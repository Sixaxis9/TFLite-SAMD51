
TFLite_SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0003eec0  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000238  0003eec0  0003eec0  0004eec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20000000  0003f0f8  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  000509d0  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  000509d0  2**0
                  CONTENTS
  5 .bss          0001a700  200009d0  0003fad0  000509d0  2**4
                  ALLOC
  6 .stack        00010000  2001b0d0  0005a1d0  000509d0  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  000509d0  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  000509fe  2**0
                  CONTENTS, READONLY
  9 .debug_info   001c8e7c  00000000  00000000  00050a57  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000fc33  00000000  00000000  002198d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0004a757  00000000  00000000  00229506  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001410  00000000  00000000  00273c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00007ef0  00000000  00000000  0027506d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003657f  00000000  00000000  0027cf5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002a3cf  00000000  00000000  002b34dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001959f8  00000000  00000000  002dd8ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00010d30  00000000  00000000  004732a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 b0 02 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	75 09 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     u...............
      7c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      8c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	c5 08 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 00 00 00 00 00 00 00 00 d1 02 00 00     ................
     184:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     204:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200009d0 	.word	0x200009d0
     280:	00000000 	.word	0x00000000
     284:	0003f0f8 	.word	0x0003f0f8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0003f0f8 	.word	0x0003f0f8
     2c4:	200009d4 	.word	0x200009d4
     2c8:	0003f0f8 	.word	0x0003f0f8
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b1c      	ldr	r3, [pc, #112]	; (348 <Reset_Handler+0x74>)
     2d8:	4a1c      	ldr	r2, [pc, #112]	; (34c <Reset_Handler+0x78>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b1c      	ldr	r3, [pc, #112]	; (350 <Reset_Handler+0x7c>)
     2e0:	4a19      	ldr	r2, [pc, #100]	; (348 <Reset_Handler+0x74>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4916      	ldr	r1, [pc, #88]	; (34c <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b14      	ldr	r3, [pc, #80]	; (354 <Reset_Handler+0x80>)
     302:	4a15      	ldr	r2, [pc, #84]	; (358 <Reset_Handler+0x84>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4b0f      	ldr	r3, [pc, #60]	; (35c <Reset_Handler+0x88>)
     320:	4a0f      	ldr	r2, [pc, #60]	; (360 <Reset_Handler+0x8c>)
     322:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     326:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     328:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     32c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     334:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     338:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     33c:	4b09      	ldr	r3, [pc, #36]	; (364 <Reset_Handler+0x90>)
     33e:	4798      	blx	r3
        main();
     340:	4b09      	ldr	r3, [pc, #36]	; (368 <Reset_Handler+0x94>)
     342:	4798      	blx	r3
     344:	e7fe      	b.n	344 <Reset_Handler+0x70>
     346:	bf00      	nop
     348:	20000000 	.word	0x20000000
     34c:	0003f0f8 	.word	0x0003f0f8
     350:	200009d0 	.word	0x200009d0
     354:	2001b0d0 	.word	0x2001b0d0
     358:	200009d0 	.word	0x200009d0
     35c:	e000ed00 	.word	0xe000ed00
     360:	00000000 	.word	0x00000000
     364:	000178fd 	.word	0x000178fd
     368:	00000c41 	.word	0x00000c41

0000036c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     36c:	b570      	push	{r4, r5, r6, lr}
     36e:	460d      	mov	r5, r1
     370:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     372:	4604      	mov	r4, r0
     374:	b160      	cbz	r0, 390 <io_write+0x24>
     376:	1c08      	adds	r0, r1, #0
     378:	bf18      	it	ne
     37a:	2001      	movne	r0, #1
     37c:	2234      	movs	r2, #52	; 0x34
     37e:	4905      	ldr	r1, [pc, #20]	; (394 <io_write+0x28>)
     380:	4b05      	ldr	r3, [pc, #20]	; (398 <io_write+0x2c>)
     382:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     384:	6823      	ldr	r3, [r4, #0]
     386:	4632      	mov	r2, r6
     388:	4629      	mov	r1, r5
     38a:	4620      	mov	r0, r4
     38c:	4798      	blx	r3
}
     38e:	bd70      	pop	{r4, r5, r6, pc}
     390:	2000      	movs	r0, #0
     392:	e7f3      	b.n	37c <io_write+0x10>
     394:	0001eb70 	.word	0x0001eb70
     398:	00000651 	.word	0x00000651

0000039c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     39c:	b570      	push	{r4, r5, r6, lr}
     39e:	460d      	mov	r5, r1
     3a0:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     3a2:	4604      	mov	r4, r0
     3a4:	b160      	cbz	r0, 3c0 <io_read+0x24>
     3a6:	1c08      	adds	r0, r1, #0
     3a8:	bf18      	it	ne
     3aa:	2001      	movne	r0, #1
     3ac:	223d      	movs	r2, #61	; 0x3d
     3ae:	4905      	ldr	r1, [pc, #20]	; (3c4 <io_read+0x28>)
     3b0:	4b05      	ldr	r3, [pc, #20]	; (3c8 <io_read+0x2c>)
     3b2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     3b4:	6863      	ldr	r3, [r4, #4]
     3b6:	4632      	mov	r2, r6
     3b8:	4629      	mov	r1, r5
     3ba:	4620      	mov	r0, r4
     3bc:	4798      	blx	r3
}
     3be:	bd70      	pop	{r4, r5, r6, pc}
     3c0:	2000      	movs	r0, #0
     3c2:	e7f3      	b.n	3ac <io_read+0x10>
     3c4:	0001eb70 	.word	0x0001eb70
     3c8:	00000651 	.word	0x00000651

000003cc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3ce:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     3d0:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     3d2:	b12f      	cbz	r7, 3e0 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     3d4:	688d      	ldr	r5, [r1, #8]
     3d6:	463c      	mov	r4, r7
     3d8:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     3da:	f1c2 0e01 	rsb	lr, r2, #1
     3de:	e00b      	b.n	3f8 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
     3e0:	4b0e      	ldr	r3, [pc, #56]	; (41c <timer_add_timer_task+0x50>)
     3e2:	4798      	blx	r3
		return;
     3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     3e6:	4473      	add	r3, lr
     3e8:	68a0      	ldr	r0, [r4, #8]
     3ea:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
     3ec:	42ab      	cmp	r3, r5
     3ee:	d20a      	bcs.n	406 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     3f0:	6823      	ldr	r3, [r4, #0]
     3f2:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     3f4:	b153      	cbz	r3, 40c <timer_add_timer_task+0x40>
     3f6:	461c      	mov	r4, r3
		if (it->time_label <= time) {
     3f8:	6863      	ldr	r3, [r4, #4]
     3fa:	4293      	cmp	r3, r2
     3fc:	d8f3      	bhi.n	3e6 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
     3fe:	68a0      	ldr	r0, [r4, #8]
     400:	4403      	add	r3, r0
     402:	1a9b      	subs	r3, r3, r2
     404:	e7f2      	b.n	3ec <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
     406:	42a7      	cmp	r7, r4
     408:	d004      	beq.n	414 <timer_add_timer_task+0x48>
     40a:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     40c:	4620      	mov	r0, r4
     40e:	4b04      	ldr	r3, [pc, #16]	; (420 <timer_add_timer_task+0x54>)
     410:	4798      	blx	r3
     412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     414:	4660      	mov	r0, ip
     416:	4b01      	ldr	r3, [pc, #4]	; (41c <timer_add_timer_task+0x50>)
     418:	4798      	blx	r3
     41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     41c:	00000679 	.word	0x00000679
     420:	000006a5 	.word	0x000006a5

00000424 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
     428:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     42a:	6907      	ldr	r7, [r0, #16]
     42c:	3701      	adds	r7, #1
     42e:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     430:	7e03      	ldrb	r3, [r0, #24]
     432:	f013 0f01 	tst.w	r3, #1
     436:	d113      	bne.n	460 <timer_process_counted+0x3c>
     438:	7e03      	ldrb	r3, [r0, #24]
     43a:	f013 0f02 	tst.w	r3, #2
     43e:	d10f      	bne.n	460 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     440:	b354      	cbz	r4, 498 <timer_process_counted+0x74>
     442:	6863      	ldr	r3, [r4, #4]
     444:	1afb      	subs	r3, r7, r3
     446:	68a2      	ldr	r2, [r4, #8]
     448:	4293      	cmp	r3, r2
     44a:	d307      	bcc.n	45c <timer_process_counted+0x38>
     44c:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     44e:	f100 0814 	add.w	r8, r0, #20
     452:	f8df 9048 	ldr.w	r9, [pc, #72]	; 49c <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     456:	f8df a048 	ldr.w	sl, [pc, #72]	; 4a0 <timer_process_counted+0x7c>
     45a:	e012      	b.n	482 <timer_process_counted+0x5e>
     45c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     460:	7e03      	ldrb	r3, [r0, #24]
     462:	f043 0302 	orr.w	r3, r3, #2
     466:	7603      	strb	r3, [r0, #24]
		return;
     468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     46c:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     46e:	68e3      	ldr	r3, [r4, #12]
     470:	4620      	mov	r0, r4
     472:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     474:	b185      	cbz	r5, 498 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     476:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     478:	686b      	ldr	r3, [r5, #4]
     47a:	1afb      	subs	r3, r7, r3
     47c:	68aa      	ldr	r2, [r5, #8]
     47e:	4293      	cmp	r3, r2
     480:	d30a      	bcc.n	498 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
     482:	4640      	mov	r0, r8
     484:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
     486:	7c23      	ldrb	r3, [r4, #16]
     488:	2b01      	cmp	r3, #1
     48a:	d1ef      	bne.n	46c <timer_process_counted+0x48>
			tmp->time_label = time;
     48c:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     48e:	463a      	mov	r2, r7
     490:	4621      	mov	r1, r4
     492:	4640      	mov	r0, r8
     494:	47d0      	blx	sl
     496:	e7e9      	b.n	46c <timer_process_counted+0x48>
     498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     49c:	000006ad 	.word	0x000006ad
     4a0:	000003cd 	.word	0x000003cd

000004a4 <timer_init>:
{
     4a4:	b538      	push	{r3, r4, r5, lr}
     4a6:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     4a8:	4604      	mov	r4, r0
     4aa:	b178      	cbz	r0, 4cc <timer_init+0x28>
     4ac:	1c08      	adds	r0, r1, #0
     4ae:	bf18      	it	ne
     4b0:	2001      	movne	r0, #1
     4b2:	223b      	movs	r2, #59	; 0x3b
     4b4:	4906      	ldr	r1, [pc, #24]	; (4d0 <timer_init+0x2c>)
     4b6:	4b07      	ldr	r3, [pc, #28]	; (4d4 <timer_init+0x30>)
     4b8:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     4ba:	4629      	mov	r1, r5
     4bc:	4620      	mov	r0, r4
     4be:	4b06      	ldr	r3, [pc, #24]	; (4d8 <timer_init+0x34>)
     4c0:	4798      	blx	r3
	descr->time                           = 0;
     4c2:	2000      	movs	r0, #0
     4c4:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     4c6:	4b05      	ldr	r3, [pc, #20]	; (4dc <timer_init+0x38>)
     4c8:	6023      	str	r3, [r4, #0]
}
     4ca:	bd38      	pop	{r3, r4, r5, pc}
     4cc:	2000      	movs	r0, #0
     4ce:	e7f0      	b.n	4b2 <timer_init+0xe>
     4d0:	0001eb84 	.word	0x0001eb84
     4d4:	00000651 	.word	0x00000651
     4d8:	00000909 	.word	0x00000909
     4dc:	00000425 	.word	0x00000425

000004e0 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     4e4:	460f      	mov	r7, r1
     4e6:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     4e8:	4604      	mov	r4, r0
     4ea:	b328      	cbz	r0, 538 <usart_sync_write+0x58>
     4ec:	b331      	cbz	r1, 53c <usart_sync_write+0x5c>
     4ee:	1c10      	adds	r0, r2, #0
     4f0:	bf18      	it	ne
     4f2:	2001      	movne	r0, #1
     4f4:	22f1      	movs	r2, #241	; 0xf1
     4f6:	4912      	ldr	r1, [pc, #72]	; (540 <usart_sync_write+0x60>)
     4f8:	4b12      	ldr	r3, [pc, #72]	; (544 <usart_sync_write+0x64>)
     4fa:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     4fc:	3408      	adds	r4, #8
     4fe:	4d12      	ldr	r5, [pc, #72]	; (548 <usart_sync_write+0x68>)
     500:	4620      	mov	r0, r4
     502:	47a8      	blx	r5
     504:	2800      	cmp	r0, #0
     506:	d0fb      	beq.n	500 <usart_sync_write+0x20>
     508:	3f01      	subs	r7, #1
     50a:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     50c:	f8df 9040 	ldr.w	r9, [pc, #64]	; 550 <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     510:	4d0d      	ldr	r5, [pc, #52]	; (548 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     512:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     516:	4620      	mov	r0, r4
     518:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     51a:	4620      	mov	r0, r4
     51c:	47a8      	blx	r5
     51e:	2800      	cmp	r0, #0
     520:	d0fb      	beq.n	51a <usart_sync_write+0x3a>
			;
	} while (++offset < length);
     522:	3601      	adds	r6, #1
     524:	4546      	cmp	r6, r8
     526:	d3f4      	bcc.n	512 <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
     528:	4d08      	ldr	r5, [pc, #32]	; (54c <usart_sync_write+0x6c>)
     52a:	4620      	mov	r0, r4
     52c:	47a8      	blx	r5
     52e:	2800      	cmp	r0, #0
     530:	d0fb      	beq.n	52a <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
     532:	4630      	mov	r0, r6
     534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     538:	2000      	movs	r0, #0
     53a:	e7db      	b.n	4f4 <usart_sync_write+0x14>
     53c:	2000      	movs	r0, #0
     53e:	e7d9      	b.n	4f4 <usart_sync_write+0x14>
     540:	0001eb9c 	.word	0x0001eb9c
     544:	00000651 	.word	0x00000651
     548:	00000acf 	.word	0x00000acf
     54c:	00000ad9 	.word	0x00000ad9
     550:	00000ac1 	.word	0x00000ac1

00000554 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     558:	460f      	mov	r7, r1
     55a:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     55c:	4604      	mov	r4, r0
     55e:	b1e0      	cbz	r0, 59a <usart_sync_read+0x46>
     560:	b1e9      	cbz	r1, 59e <usart_sync_read+0x4a>
     562:	1c10      	adds	r0, r2, #0
     564:	bf18      	it	ne
     566:	2001      	movne	r0, #1
     568:	f44f 7286 	mov.w	r2, #268	; 0x10c
     56c:	490d      	ldr	r1, [pc, #52]	; (5a4 <usart_sync_read+0x50>)
     56e:	4b0e      	ldr	r3, [pc, #56]	; (5a8 <usart_sync_read+0x54>)
     570:	4798      	blx	r3
     572:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
     574:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     576:	3408      	adds	r4, #8
     578:	4d0c      	ldr	r5, [pc, #48]	; (5ac <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     57a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 5b0 <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
     57e:	4620      	mov	r0, r4
     580:	47a8      	blx	r5
     582:	2800      	cmp	r0, #0
     584:	d0fb      	beq.n	57e <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     586:	4620      	mov	r0, r4
     588:	47c8      	blx	r9
     58a:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     58e:	3601      	adds	r6, #1
     590:	4546      	cmp	r6, r8
     592:	d3f4      	bcc.n	57e <usart_sync_read+0x2a>

	return (int32_t)offset;
}
     594:	4630      	mov	r0, r6
     596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     59a:	2000      	movs	r0, #0
     59c:	e7e4      	b.n	568 <usart_sync_read+0x14>
     59e:	2000      	movs	r0, #0
     5a0:	e7e2      	b.n	568 <usart_sync_read+0x14>
     5a2:	bf00      	nop
     5a4:	0001eb9c 	.word	0x0001eb9c
     5a8:	00000651 	.word	0x00000651
     5ac:	00000ae3 	.word	0x00000ae3
     5b0:	00000ac7 	.word	0x00000ac7

000005b4 <usart_sync_init>:
{
     5b4:	b538      	push	{r3, r4, r5, lr}
     5b6:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     5b8:	4604      	mov	r4, r0
     5ba:	b198      	cbz	r0, 5e4 <usart_sync_init+0x30>
     5bc:	1c08      	adds	r0, r1, #0
     5be:	bf18      	it	ne
     5c0:	2001      	movne	r0, #1
     5c2:	2234      	movs	r2, #52	; 0x34
     5c4:	4908      	ldr	r1, [pc, #32]	; (5e8 <usart_sync_init+0x34>)
     5c6:	4b09      	ldr	r3, [pc, #36]	; (5ec <usart_sync_init+0x38>)
     5c8:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     5ca:	4629      	mov	r1, r5
     5cc:	f104 0008 	add.w	r0, r4, #8
     5d0:	4b07      	ldr	r3, [pc, #28]	; (5f0 <usart_sync_init+0x3c>)
     5d2:	4798      	blx	r3
	if (init_status) {
     5d4:	4603      	mov	r3, r0
     5d6:	b918      	cbnz	r0, 5e0 <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
     5d8:	4a06      	ldr	r2, [pc, #24]	; (5f4 <usart_sync_init+0x40>)
     5da:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     5dc:	4a06      	ldr	r2, [pc, #24]	; (5f8 <usart_sync_init+0x44>)
     5de:	6022      	str	r2, [r4, #0]
}
     5e0:	4618      	mov	r0, r3
     5e2:	bd38      	pop	{r3, r4, r5, pc}
     5e4:	2000      	movs	r0, #0
     5e6:	e7ec      	b.n	5c2 <usart_sync_init+0xe>
     5e8:	0001eb9c 	.word	0x0001eb9c
     5ec:	00000651 	.word	0x00000651
     5f0:	00000a81 	.word	0x00000a81
     5f4:	00000555 	.word	0x00000555
     5f8:	000004e1 	.word	0x000004e1

000005fc <usart_sync_enable>:
{
     5fc:	b510      	push	{r4, lr}
	ASSERT(descr);
     5fe:	4604      	mov	r4, r0
     600:	2253      	movs	r2, #83	; 0x53
     602:	4906      	ldr	r1, [pc, #24]	; (61c <usart_sync_enable+0x20>)
     604:	3000      	adds	r0, #0
     606:	bf18      	it	ne
     608:	2001      	movne	r0, #1
     60a:	4b05      	ldr	r3, [pc, #20]	; (620 <usart_sync_enable+0x24>)
     60c:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     60e:	f104 0008 	add.w	r0, r4, #8
     612:	4b04      	ldr	r3, [pc, #16]	; (624 <usart_sync_enable+0x28>)
     614:	4798      	blx	r3
}
     616:	2000      	movs	r0, #0
     618:	bd10      	pop	{r4, pc}
     61a:	bf00      	nop
     61c:	0001eb9c 	.word	0x0001eb9c
     620:	00000651 	.word	0x00000651
     624:	00000aad 	.word	0x00000aad

00000628 <usart_sync_get_io_descriptor>:
{
     628:	b538      	push	{r3, r4, r5, lr}
     62a:	460c      	mov	r4, r1
	ASSERT(descr && io);
     62c:	4605      	mov	r5, r0
     62e:	b148      	cbz	r0, 644 <usart_sync_get_io_descriptor+0x1c>
     630:	1c08      	adds	r0, r1, #0
     632:	bf18      	it	ne
     634:	2001      	movne	r0, #1
     636:	2269      	movs	r2, #105	; 0x69
     638:	4903      	ldr	r1, [pc, #12]	; (648 <usart_sync_get_io_descriptor+0x20>)
     63a:	4b04      	ldr	r3, [pc, #16]	; (64c <usart_sync_get_io_descriptor+0x24>)
     63c:	4798      	blx	r3
	*io = &descr->io;
     63e:	6025      	str	r5, [r4, #0]
}
     640:	2000      	movs	r0, #0
     642:	bd38      	pop	{r3, r4, r5, pc}
     644:	2000      	movs	r0, #0
     646:	e7f6      	b.n	636 <usart_sync_get_io_descriptor+0xe>
     648:	0001eb9c 	.word	0x0001eb9c
     64c:	00000651 	.word	0x00000651

00000650 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     650:	b900      	cbnz	r0, 654 <assert+0x4>
		__asm("BKPT #0");
     652:	be00      	bkpt	0x0000
     654:	4770      	bx	lr

00000656 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     656:	6803      	ldr	r3, [r0, #0]
     658:	b14b      	cbz	r3, 66e <is_list_element+0x18>
		if (it == element) {
     65a:	428b      	cmp	r3, r1
     65c:	d009      	beq.n	672 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
     65e:	681b      	ldr	r3, [r3, #0]
     660:	b11b      	cbz	r3, 66a <is_list_element+0x14>
		if (it == element) {
     662:	4299      	cmp	r1, r3
     664:	d1fb      	bne.n	65e <is_list_element+0x8>
			return true;
     666:	2001      	movs	r0, #1
		}
	}

	return false;
}
     668:	4770      	bx	lr
	return false;
     66a:	2000      	movs	r0, #0
     66c:	4770      	bx	lr
     66e:	2000      	movs	r0, #0
     670:	4770      	bx	lr
			return true;
     672:	2001      	movs	r0, #1
     674:	4770      	bx	lr
	...

00000678 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     678:	b538      	push	{r3, r4, r5, lr}
     67a:	4604      	mov	r4, r0
     67c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
     67e:	4b06      	ldr	r3, [pc, #24]	; (698 <list_insert_as_head+0x20>)
     680:	4798      	blx	r3
     682:	f080 0001 	eor.w	r0, r0, #1
     686:	2239      	movs	r2, #57	; 0x39
     688:	4904      	ldr	r1, [pc, #16]	; (69c <list_insert_as_head+0x24>)
     68a:	b2c0      	uxtb	r0, r0
     68c:	4b04      	ldr	r3, [pc, #16]	; (6a0 <list_insert_as_head+0x28>)
     68e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     690:	6823      	ldr	r3, [r4, #0]
     692:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     694:	6025      	str	r5, [r4, #0]
     696:	bd38      	pop	{r3, r4, r5, pc}
     698:	00000657 	.word	0x00000657
     69c:	0001ebb8 	.word	0x0001ebb8
     6a0:	00000651 	.word	0x00000651

000006a4 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     6a4:	6803      	ldr	r3, [r0, #0]
     6a6:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     6a8:	6001      	str	r1, [r0, #0]
     6aa:	4770      	bx	lr

000006ac <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     6ac:	6803      	ldr	r3, [r0, #0]
     6ae:	b10b      	cbz	r3, 6b4 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     6b0:	681a      	ldr	r2, [r3, #0]
     6b2:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     6b4:	4618      	mov	r0, r3
     6b6:	4770      	bx	lr

000006b8 <_write>:

// Added
int _write(int __fd, const void *__buf, size_t __nbyte );
int _read(int __fd, void *__buf, size_t __nbyte );

int _write(int __fd, const void *__buf, size_t __nbyte ){
     6b8:	b508      	push	{r3, lr}
	io_write(io, __buf, __nbyte);
     6ba:	4b03      	ldr	r3, [pc, #12]	; (6c8 <_write+0x10>)
     6bc:	6818      	ldr	r0, [r3, #0]
     6be:	4b03      	ldr	r3, [pc, #12]	; (6cc <_write+0x14>)
     6c0:	4798      	blx	r3
	return 0;
}
     6c2:	2000      	movs	r0, #0
     6c4:	bd08      	pop	{r3, pc}
     6c6:	bf00      	nop
     6c8:	200009f4 	.word	0x200009f4
     6cc:	0000036d 	.word	0x0000036d

000006d0 <_read>:

int _read(int __fd, void *__buf, size_t __nbyte ){
	return 0;
}
     6d0:	2000      	movs	r0, #0
     6d2:	4770      	bx	lr

000006d4 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     6d4:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     6d6:	4a06      	ldr	r2, [pc, #24]	; (6f0 <_sbrk+0x1c>)
     6d8:	6812      	ldr	r2, [r2, #0]
     6da:	b122      	cbz	r2, 6e6 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     6dc:	4a04      	ldr	r2, [pc, #16]	; (6f0 <_sbrk+0x1c>)
     6de:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     6e0:	4403      	add	r3, r0
     6e2:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     6e4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     6e6:	4903      	ldr	r1, [pc, #12]	; (6f4 <_sbrk+0x20>)
     6e8:	4a01      	ldr	r2, [pc, #4]	; (6f0 <_sbrk+0x1c>)
     6ea:	6011      	str	r1, [r2, #0]
     6ec:	e7f6      	b.n	6dc <_sbrk+0x8>
     6ee:	bf00      	nop
     6f0:	200009ec 	.word	0x200009ec
     6f4:	2002b0d0 	.word	0x2002b0d0

000006f8 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     6f8:	f04f 30ff 	mov.w	r0, #4294967295
     6fc:	4770      	bx	lr

000006fe <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     6fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     702:	604b      	str	r3, [r1, #4]

	return 0;
}
     704:	2000      	movs	r0, #0
     706:	4770      	bx	lr

00000708 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     708:	2001      	movs	r0, #1
     70a:	4770      	bx	lr

0000070c <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     70c:	2000      	movs	r0, #0
     70e:	4770      	bx	lr

00000710 <_exit>:

/**
 * \brief Replacement of C library of _exit
 */
extern void _exit(int status)
{
     710:	b508      	push	{r3, lr}
	printf("Exiting with status %d.\n", status);
     712:	4601      	mov	r1, r0
     714:	4801      	ldr	r0, [pc, #4]	; (71c <_exit+0xc>)
     716:	4b02      	ldr	r3, [pc, #8]	; (720 <_exit+0x10>)
     718:	4798      	blx	r3
     71a:	e7fe      	b.n	71a <_exit+0xa>
     71c:	0001ebd8 	.word	0x0001ebd8
     720:	000183d1 	.word	0x000183d1

00000724 <_kill>:

/**
 * \brief Replacement of C library of _kill
 */
extern void _kill(int pid, int sig)
{
     724:	4770      	bx	lr

00000726 <_getpid>:
 * \brief Replacement of C library of _getpid
 */
extern int _getpid(void)
{
	return -1;
}
     726:	f04f 30ff 	mov.w	r0, #4294967295
     72a:	4770      	bx	lr

0000072c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     72c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     72e:	4a09      	ldr	r2, [pc, #36]	; (754 <_init_chip+0x28>)
     730:	8813      	ldrh	r3, [r2, #0]
     732:	b29b      	uxth	r3, r3
     734:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     736:	4b08      	ldr	r3, [pc, #32]	; (758 <_init_chip+0x2c>)
     738:	4798      	blx	r3
	_oscctrl_init_sources();
     73a:	4b08      	ldr	r3, [pc, #32]	; (75c <_init_chip+0x30>)
     73c:	4798      	blx	r3
	_mclk_init();
     73e:	4b08      	ldr	r3, [pc, #32]	; (760 <_init_chip+0x34>)
     740:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     742:	2008      	movs	r0, #8
     744:	4c07      	ldr	r4, [pc, #28]	; (764 <_init_chip+0x38>)
     746:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
     748:	4b07      	ldr	r3, [pc, #28]	; (768 <_init_chip+0x3c>)
     74a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     74c:	f640 70f7 	movw	r0, #4087	; 0xff7
     750:	47a0      	blx	r4
     752:	bd10      	pop	{r4, pc}
     754:	41004000 	.word	0x41004000
     758:	000007b9 	.word	0x000007b9
     75c:	000007d9 	.word	0x000007d9
     760:	000007ad 	.word	0x000007ad
     764:	0000076d 	.word	0x0000076d
     768:	000007dd 	.word	0x000007dd

0000076c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     76c:	f010 0f01 	tst.w	r0, #1
     770:	d008      	beq.n	784 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL[index].reg = data;
     772:	4a0b      	ldr	r2, [pc, #44]	; (7a0 <_gclk_init_generators_by_fref+0x34>)
     774:	4b0b      	ldr	r3, [pc, #44]	; (7a4 <_gclk_init_generators_by_fref+0x38>)
     776:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     778:	4619      	mov	r1, r3
     77a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     77e:	684b      	ldr	r3, [r1, #4]
     780:	4213      	tst	r3, r2
     782:	d1fc      	bne.n	77e <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     784:	f010 0f08 	tst.w	r0, #8
     788:	d008      	beq.n	79c <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     78a:	4a07      	ldr	r2, [pc, #28]	; (7a8 <_gclk_init_generators_by_fref+0x3c>)
     78c:	4b05      	ldr	r3, [pc, #20]	; (7a4 <_gclk_init_generators_by_fref+0x38>)
     78e:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     790:	4619      	mov	r1, r3
     792:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     796:	684b      	ldr	r3, [r1, #4]
     798:	4213      	tst	r3, r2
     79a:	d1fc      	bne.n	796 <_gclk_init_generators_by_fref+0x2a>
     79c:	4770      	bx	lr
     79e:	bf00      	nop
     7a0:	00010906 	.word	0x00010906
     7a4:	40001c00 	.word	0x40001c00
     7a8:	00010905 	.word	0x00010905

000007ac <_mclk_init>:
}

static inline void hri_mclk_write_CPUDIV_reg(const void *const hw, hri_mclk_cpudiv_reg_t data)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->CPUDIV.reg = data;
     7ac:	2201      	movs	r2, #1
     7ae:	4b01      	ldr	r3, [pc, #4]	; (7b4 <_mclk_init+0x8>)
     7b0:	715a      	strb	r2, [r3, #5]
     7b2:	4770      	bx	lr
     7b4:	40000800 	.word	0x40000800

000007b8 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
     7b8:	4b06      	ldr	r3, [pc, #24]	; (7d4 <_osc32kctrl_init_sources+0x1c>)
     7ba:	f242 028e 	movw	r2, #8334	; 0x208e
     7be:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
     7c0:	2200      	movs	r2, #0
     7c2:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
     7c4:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     7c6:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     7c8:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     7cc:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     7ce:	2201      	movs	r2, #1
     7d0:	741a      	strb	r2, [r3, #16]
     7d2:	4770      	bx	lr
     7d4:	40001400 	.word	0x40001400

000007d8 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
     7d8:	4770      	bx	lr
	...

000007dc <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     7dc:	4a36      	ldr	r2, [pc, #216]	; (8b8 <_oscctrl_init_referenced_generators+0xdc>)
     7de:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     7e0:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     7e4:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     7e8:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     7ea:	4611      	mov	r1, r2
     7ec:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     7f0:	684b      	ldr	r3, [r1, #4]
     7f2:	4213      	tst	r3, r2
     7f4:	d1fc      	bne.n	7f0 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     7f6:	4a30      	ldr	r2, [pc, #192]	; (8b8 <_oscctrl_init_referenced_generators+0xdc>)
     7f8:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     7fa:	f013 0f04 	tst.w	r3, #4
     7fe:	d1fb      	bne.n	7f8 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     800:	4b2e      	ldr	r3, [pc, #184]	; (8bc <_oscctrl_init_referenced_generators+0xe0>)
     802:	2200      	movs	r2, #0
     804:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
     806:	4a2e      	ldr	r2, [pc, #184]	; (8c0 <_oscctrl_init_referenced_generators+0xe4>)
     808:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     80a:	461a      	mov	r2, r3
     80c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
     810:	f013 0f10 	tst.w	r3, #16
     814:	d1fa      	bne.n	80c <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     816:	2200      	movs	r2, #0
     818:	4b28      	ldr	r3, [pc, #160]	; (8bc <_oscctrl_init_referenced_generators+0xe0>)
     81a:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     81e:	461a      	mov	r2, r3
     820:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     824:	f013 0f04 	tst.w	r3, #4
     828:	d1fa      	bne.n	820 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     82a:	2202      	movs	r2, #2
     82c:	4b23      	ldr	r3, [pc, #140]	; (8bc <_oscctrl_init_referenced_generators+0xe0>)
     82e:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     830:	461a      	mov	r2, r3
     832:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
     836:	f013 0f02 	tst.w	r3, #2
     83a:	d1fa      	bne.n	832 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
     83c:	4b1f      	ldr	r3, [pc, #124]	; (8bc <_oscctrl_init_referenced_generators+0xe0>)
     83e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
     840:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     842:	461a      	mov	r2, r3
     844:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
     848:	f013 0f08 	tst.w	r3, #8
     84c:	d1fa      	bne.n	844 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     84e:	2280      	movs	r2, #128	; 0x80
     850:	4b1a      	ldr	r3, [pc, #104]	; (8bc <_oscctrl_init_referenced_generators+0xe0>)
     852:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     856:	461a      	mov	r2, r3
     858:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     85c:	f013 0f04 	tst.w	r3, #4
     860:	d1fa      	bne.n	858 <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
     862:	4b16      	ldr	r3, [pc, #88]	; (8bc <_oscctrl_init_referenced_generators+0xe0>)
     864:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
     868:	f013 0f01 	tst.w	r3, #1
     86c:	d01d      	beq.n	8aa <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
     86e:	4a13      	ldr	r2, [pc, #76]	; (8bc <_oscctrl_init_referenced_generators+0xe0>)
     870:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
     872:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
     876:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
     87a:	d1f9      	bne.n	870 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
     87c:	4a0e      	ldr	r2, [pc, #56]	; (8b8 <_oscctrl_init_referenced_generators+0xdc>)
     87e:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
     880:	2b00      	cmp	r3, #0
     882:	d1fc      	bne.n	87e <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     884:	4a0c      	ldr	r2, [pc, #48]	; (8b8 <_oscctrl_init_referenced_generators+0xdc>)
     886:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     888:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     88c:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     890:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     892:	4611      	mov	r1, r2
     894:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     898:	684b      	ldr	r3, [r1, #4]
     89a:	4213      	tst	r3, r2
     89c:	d1fc      	bne.n	898 <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     89e:	4a06      	ldr	r2, [pc, #24]	; (8b8 <_oscctrl_init_referenced_generators+0xdc>)
     8a0:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     8a2:	f013 0f04 	tst.w	r3, #4
     8a6:	d1fb      	bne.n	8a0 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
     8a8:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
     8aa:	4a04      	ldr	r2, [pc, #16]	; (8bc <_oscctrl_init_referenced_generators+0xe0>)
     8ac:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
     8ae:	f413 7f80 	tst.w	r3, #256	; 0x100
     8b2:	d0fb      	beq.n	8ac <_oscctrl_init_referenced_generators+0xd0>
     8b4:	e7e2      	b.n	87c <_oscctrl_init_referenced_generators+0xa0>
     8b6:	bf00      	nop
     8b8:	40001c00 	.word	0x40001c00
     8bc:	40001000 	.word	0x40001000
     8c0:	04010000 	.word	0x04010000

000008c4 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     8c4:	b500      	push	{lr}
     8c6:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     8c8:	4b0d      	ldr	r3, [pc, #52]	; (900 <RAMECC_Handler+0x3c>)
     8ca:	789b      	ldrb	r3, [r3, #2]
     8cc:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     8ce:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     8d0:	9b01      	ldr	r3, [sp, #4]
     8d2:	f013 0f02 	tst.w	r3, #2
     8d6:	d006      	beq.n	8e6 <RAMECC_Handler+0x22>
     8d8:	4b0a      	ldr	r3, [pc, #40]	; (904 <RAMECC_Handler+0x40>)
     8da:	681b      	ldr	r3, [r3, #0]
     8dc:	b11b      	cbz	r3, 8e6 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     8de:	4a08      	ldr	r2, [pc, #32]	; (900 <RAMECC_Handler+0x3c>)
     8e0:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     8e2:	4798      	blx	r3
     8e4:	e009      	b.n	8fa <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     8e6:	9b01      	ldr	r3, [sp, #4]
     8e8:	f013 0f01 	tst.w	r3, #1
     8ec:	d005      	beq.n	8fa <RAMECC_Handler+0x36>
     8ee:	4b05      	ldr	r3, [pc, #20]	; (904 <RAMECC_Handler+0x40>)
     8f0:	685b      	ldr	r3, [r3, #4]
     8f2:	b113      	cbz	r3, 8fa <RAMECC_Handler+0x36>
     8f4:	4a02      	ldr	r2, [pc, #8]	; (900 <RAMECC_Handler+0x3c>)
     8f6:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     8f8:	4798      	blx	r3
	} else {
		return;
	}
}
     8fa:	b003      	add	sp, #12
     8fc:	f85d fb04 	ldr.w	pc, [sp], #4
     900:	41020000 	.word	0x41020000
     904:	2001b070 	.word	0x2001b070

00000908 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
     908:	b538      	push	{r3, r4, r5, lr}
     90a:	460c      	mov	r4, r1
	ASSERT(dev);
     90c:	4605      	mov	r5, r0
     90e:	2230      	movs	r2, #48	; 0x30
     910:	4914      	ldr	r1, [pc, #80]	; (964 <_timer_init+0x5c>)
     912:	3000      	adds	r0, #0
     914:	bf18      	it	ne
     916:	2001      	movne	r0, #1
     918:	4b13      	ldr	r3, [pc, #76]	; (968 <_timer_init+0x60>)
     91a:	4798      	blx	r3

	dev->hw = hw;
     91c:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
     91e:	2301      	movs	r3, #1
     920:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     922:	f248 0203 	movw	r2, #32771	; 0x8003
     926:	6923      	ldr	r3, [r4, #16]
     928:	4213      	tst	r3, r2
     92a:	d1fc      	bne.n	926 <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
     92c:	68eb      	ldr	r3, [r5, #12]
     92e:	691a      	ldr	r2, [r3, #16]
     930:	f012 0f01 	tst.w	r2, #1
     934:	d1fb      	bne.n	92e <_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
     936:	f248 0280 	movw	r2, #32896	; 0x8080
     93a:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     93c:	f248 0103 	movw	r1, #32771	; 0x8003
     940:	691a      	ldr	r2, [r3, #16]
     942:	420a      	tst	r2, r1
     944:	d1fc      	bne.n	940 <_timer_init+0x38>
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
     946:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
     948:	2320      	movs	r3, #32
     94a:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     94c:	6913      	ldr	r3, [r2, #16]
     94e:	f013 0f60 	tst.w	r3, #96	; 0x60
     952:	d1fb      	bne.n	94c <_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
     954:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     956:	f44f 7280 	mov.w	r2, #256	; 0x100
     95a:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
     95c:	4b03      	ldr	r3, [pc, #12]	; (96c <_timer_init+0x64>)
     95e:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
     960:	2000      	movs	r0, #0
     962:	bd38      	pop	{r3, r4, r5, pc}
     964:	0001ebf4 	.word	0x0001ebf4
     968:	00000651 	.word	0x00000651
     96c:	200009f0 	.word	0x200009f0

00000970 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
     970:	2000      	movs	r0, #0
     972:	4770      	bx	lr

00000974 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     974:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
     976:	4b08      	ldr	r3, [pc, #32]	; (998 <RTC_Handler+0x24>)
     978:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
     97a:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     97c:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
     97e:	f413 7f80 	tst.w	r3, #256	; 0x100
     982:	d007      	beq.n	994 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
     984:	6823      	ldr	r3, [r4, #0]
     986:	b10b      	cbz	r3, 98c <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
     988:	4620      	mov	r0, r4
     98a:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     98c:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     98e:	f44f 7280 	mov.w	r2, #256	; 0x100
     992:	819a      	strh	r2, [r3, #12]
     994:	bd10      	pop	{r4, pc}
     996:	bf00      	nop
     998:	200009f0 	.word	0x200009f0

0000099c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     99c:	b470      	push	{r4, r5, r6}
     99e:	b089      	sub	sp, #36	; 0x24
     9a0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     9a2:	466c      	mov	r4, sp
     9a4:	4d0d      	ldr	r5, [pc, #52]	; (9dc <_sercom_get_hardware_index+0x40>)
     9a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     9a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     9aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     9ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     9b2:	9b00      	ldr	r3, [sp, #0]
     9b4:	42b3      	cmp	r3, r6
     9b6:	d00d      	beq.n	9d4 <_sercom_get_hardware_index+0x38>
     9b8:	4631      	mov	r1, r6
     9ba:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9bc:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     9be:	f853 2b04 	ldr.w	r2, [r3], #4
     9c2:	428a      	cmp	r2, r1
     9c4:	d007      	beq.n	9d6 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9c6:	3001      	adds	r0, #1
     9c8:	2808      	cmp	r0, #8
     9ca:	d1f8      	bne.n	9be <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
     9cc:	2000      	movs	r0, #0
}
     9ce:	b009      	add	sp, #36	; 0x24
     9d0:	bc70      	pop	{r4, r5, r6}
     9d2:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9d4:	2000      	movs	r0, #0
			return i;
     9d6:	b2c0      	uxtb	r0, r0
     9d8:	e7f9      	b.n	9ce <_sercom_get_hardware_index+0x32>
     9da:	bf00      	nop
     9dc:	0001ec0c 	.word	0x0001ec0c

000009e0 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     9e0:	b510      	push	{r4, lr}
     9e2:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     9e4:	4b21      	ldr	r3, [pc, #132]	; (a6c <_usart_init+0x8c>)
     9e6:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
     9e8:	2804      	cmp	r0, #4
     9ea:	d005      	beq.n	9f8 <_usart_init+0x18>
	ASSERT(false);
     9ec:	f240 2247 	movw	r2, #583	; 0x247
     9f0:	491f      	ldr	r1, [pc, #124]	; (a70 <_usart_init+0x90>)
     9f2:	2000      	movs	r0, #0
     9f4:	4b1f      	ldr	r3, [pc, #124]	; (a74 <_usart_init+0x94>)
     9f6:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     9f8:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     9fa:	f013 0f01 	tst.w	r3, #1
     9fe:	d119      	bne.n	a34 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a00:	69e3      	ldr	r3, [r4, #28]
     a02:	f013 0f03 	tst.w	r3, #3
     a06:	d1fb      	bne.n	a00 <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     a08:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     a0a:	f013 0f02 	tst.w	r3, #2
     a0e:	d00b      	beq.n	a28 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     a10:	6823      	ldr	r3, [r4, #0]
     a12:	f023 0302 	bic.w	r3, r3, #2
     a16:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a18:	69e3      	ldr	r3, [r4, #28]
     a1a:	f013 0f03 	tst.w	r3, #3
     a1e:	d1fb      	bne.n	a18 <_usart_init+0x38>
     a20:	69e3      	ldr	r3, [r4, #28]
     a22:	f013 0f02 	tst.w	r3, #2
     a26:	d1fb      	bne.n	a20 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     a28:	2305      	movs	r3, #5
     a2a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a2c:	69e3      	ldr	r3, [r4, #28]
     a2e:	f013 0f03 	tst.w	r3, #3
     a32:	d1fb      	bne.n	a2c <_usart_init+0x4c>
     a34:	69e3      	ldr	r3, [r4, #28]
     a36:	f013 0f01 	tst.w	r3, #1
     a3a:	d1fb      	bne.n	a34 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     a3c:	4b0e      	ldr	r3, [pc, #56]	; (a78 <_usart_init+0x98>)
     a3e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a40:	69e3      	ldr	r3, [r4, #28]
     a42:	f013 0f03 	tst.w	r3, #3
     a46:	d1fb      	bne.n	a40 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     a48:	f44f 3340 	mov.w	r3, #196608	; 0x30000
     a4c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a4e:	69e3      	ldr	r3, [r4, #28]
     a50:	f013 0f1f 	tst.w	r3, #31
     a54:	d1fb      	bne.n	a4e <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
     a56:	4b09      	ldr	r3, [pc, #36]	; (a7c <_usart_init+0x9c>)
     a58:	60a3      	str	r3, [r4, #8]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     a5a:	f24f 632b 	movw	r3, #63019	; 0xf62b
     a5e:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     a60:	2000      	movs	r0, #0
     a62:	73a0      	strb	r0, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     a64:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
     a68:	bd10      	pop	{r4, pc}
     a6a:	bf00      	nop
     a6c:	0000099d 	.word	0x0000099d
     a70:	0001ec44 	.word	0x0001ec44
     a74:	00000651 	.word	0x00000651
     a78:	40100004 	.word	0x40100004
     a7c:	00700002 	.word	0x00700002

00000a80 <_usart_sync_init>:
{
     a80:	b538      	push	{r3, r4, r5, lr}
     a82:	460c      	mov	r4, r1
	ASSERT(device);
     a84:	4605      	mov	r5, r0
     a86:	22bb      	movs	r2, #187	; 0xbb
     a88:	4905      	ldr	r1, [pc, #20]	; (aa0 <_usart_sync_init+0x20>)
     a8a:	3000      	adds	r0, #0
     a8c:	bf18      	it	ne
     a8e:	2001      	movne	r0, #1
     a90:	4b04      	ldr	r3, [pc, #16]	; (aa4 <_usart_sync_init+0x24>)
     a92:	4798      	blx	r3
	device->hw = hw;
     a94:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     a96:	4620      	mov	r0, r4
     a98:	4b03      	ldr	r3, [pc, #12]	; (aa8 <_usart_sync_init+0x28>)
     a9a:	4798      	blx	r3
}
     a9c:	bd38      	pop	{r3, r4, r5, pc}
     a9e:	bf00      	nop
     aa0:	0001ec44 	.word	0x0001ec44
     aa4:	00000651 	.word	0x00000651
     aa8:	000009e1 	.word	0x000009e1

00000aac <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     aac:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     aae:	6813      	ldr	r3, [r2, #0]
     ab0:	f043 0302 	orr.w	r3, r3, #2
     ab4:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ab6:	69d3      	ldr	r3, [r2, #28]
     ab8:	f013 0f03 	tst.w	r3, #3
     abc:	d1fb      	bne.n	ab6 <_usart_sync_enable+0xa>
}
     abe:	4770      	bx	lr

00000ac0 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     ac0:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
     ac2:	6299      	str	r1, [r3, #40]	; 0x28
     ac4:	4770      	bx	lr

00000ac6 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     ac6:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     ac8:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
     aca:	b2c0      	uxtb	r0, r0
     acc:	4770      	bx	lr

00000ace <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     ace:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     ad0:	7e18      	ldrb	r0, [r3, #24]
}
     ad2:	f000 0001 	and.w	r0, r0, #1
     ad6:	4770      	bx	lr

00000ad8 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     ad8:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     ada:	7e18      	ldrb	r0, [r3, #24]
}
     adc:	f3c0 0040 	ubfx	r0, r0, #1, #1
     ae0:	4770      	bx	lr

00000ae2 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     ae2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     ae4:	7e18      	ldrb	r0, [r3, #24]
}
     ae6:	f3c0 0080 	ubfx	r0, r0, #2, #1
     aea:	4770      	bx	lr

00000aec <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     aec:	b508      	push	{r3, lr}
	system_init();
     aee:	4b01      	ldr	r3, [pc, #4]	; (af4 <atmel_start_init+0x8>)
     af0:	4798      	blx	r3
     af2:	bd08      	pop	{r3, pc}
     af4:	00000b8d 	.word	0x00000b8d

00000af8 <USART_0_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     af8:	4b10      	ldr	r3, [pc, #64]	; (b3c <USART_0_PORT_init+0x44>)
     afa:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     afe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b02:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b06:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b0a:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b0e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b12:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b16:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b1a:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     b1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b22:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b26:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b2a:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b2e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b32:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b36:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     b3a:	4770      	bx	lr
     b3c:	41008000 	.word	0x41008000

00000b40 <USART_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     b40:	4b06      	ldr	r3, [pc, #24]	; (b5c <USART_0_CLOCK_init+0x1c>)
     b42:	2240      	movs	r2, #64	; 0x40
     b44:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     b48:	2243      	movs	r2, #67	; 0x43
     b4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     b4e:	4a04      	ldr	r2, [pc, #16]	; (b60 <USART_0_CLOCK_init+0x20>)
     b50:	6a13      	ldr	r3, [r2, #32]
     b52:	f043 0301 	orr.w	r3, r3, #1
     b56:	6213      	str	r3, [r2, #32]
     b58:	4770      	bx	lr
     b5a:	bf00      	nop
     b5c:	40001c00 	.word	0x40001c00
     b60:	40000800 	.word	0x40000800

00000b64 <USART_0_init>:

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}

void USART_0_init(void)
{
     b64:	b508      	push	{r3, lr}
	USART_0_CLOCK_init();
     b66:	4b05      	ldr	r3, [pc, #20]	; (b7c <USART_0_init+0x18>)
     b68:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM4, (void *)NULL);
     b6a:	2200      	movs	r2, #0
     b6c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     b70:	4803      	ldr	r0, [pc, #12]	; (b80 <USART_0_init+0x1c>)
     b72:	4b04      	ldr	r3, [pc, #16]	; (b84 <USART_0_init+0x20>)
     b74:	4798      	blx	r3
	USART_0_PORT_init();
     b76:	4b04      	ldr	r3, [pc, #16]	; (b88 <USART_0_init+0x24>)
     b78:	4798      	blx	r3
     b7a:	bd08      	pop	{r3, pc}
     b7c:	00000b41 	.word	0x00000b41
     b80:	2001b09c 	.word	0x2001b09c
     b84:	000005b5 	.word	0x000005b5
     b88:	00000af9 	.word	0x00000af9

00000b8c <system_init>:
}

void system_init(void)
{
     b8c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     b8e:	4b12      	ldr	r3, [pc, #72]	; (bd8 <system_init+0x4c>)
     b90:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b92:	4b12      	ldr	r3, [pc, #72]	; (bdc <system_init+0x50>)
     b94:	2202      	movs	r2, #2
     b96:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b9e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     ba2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     ba6:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     baa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bae:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     bb2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bb6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     bba:	4a09      	ldr	r2, [pc, #36]	; (be0 <system_init+0x54>)
     bbc:	6953      	ldr	r3, [r2, #20]
     bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     bc2:	6153      	str	r3, [r2, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     bc4:	4b07      	ldr	r3, [pc, #28]	; (be4 <system_init+0x58>)
     bc6:	4798      	blx	r3
     bc8:	4602      	mov	r2, r0
     bca:	4907      	ldr	r1, [pc, #28]	; (be8 <system_init+0x5c>)
     bcc:	4807      	ldr	r0, [pc, #28]	; (bec <system_init+0x60>)
     bce:	4b08      	ldr	r3, [pc, #32]	; (bf0 <system_init+0x64>)
     bd0:	4798      	blx	r3

	gpio_set_pin_function(LED, GPIO_PIN_FUNCTION_OFF);

	TIMER_0_init();

	USART_0_init();
     bd2:	4b08      	ldr	r3, [pc, #32]	; (bf4 <system_init+0x68>)
     bd4:	4798      	blx	r3
     bd6:	bd08      	pop	{r3, pc}
     bd8:	0000072d 	.word	0x0000072d
     bdc:	41008000 	.word	0x41008000
     be0:	40000800 	.word	0x40000800
     be4:	00000971 	.word	0x00000971
     be8:	40002400 	.word	0x40002400
     bec:	2001b080 	.word	0x2001b080
     bf0:	000004a5 	.word	0x000004a5
     bf4:	00000b65 	.word	0x00000b65

00000bf8 <_Z8USART_0_v>:
		//delay_ms(100);
	}
}

void USART_0_(void)
{
     bf8:	b510      	push	{r4, lr}
	usart_sync_get_io_descriptor(&USART_0, &io);
     bfa:	4c04      	ldr	r4, [pc, #16]	; (c0c <_Z8USART_0_v+0x14>)
     bfc:	4904      	ldr	r1, [pc, #16]	; (c10 <_Z8USART_0_v+0x18>)
     bfe:	4620      	mov	r0, r4
     c00:	4b04      	ldr	r3, [pc, #16]	; (c14 <_Z8USART_0_v+0x1c>)
     c02:	4798      	blx	r3
	usart_sync_enable(&USART_0);
     c04:	4620      	mov	r0, r4
     c06:	4b04      	ldr	r3, [pc, #16]	; (c18 <_Z8USART_0_v+0x20>)
     c08:	4798      	blx	r3
     c0a:	bd10      	pop	{r4, pc}
     c0c:	2001b09c 	.word	0x2001b09c
     c10:	200009f4 	.word	0x200009f4
     c14:	00000629 	.word	0x00000629
     c18:	000005fd 	.word	0x000005fd

00000c1c <DebugLog>:
}

extern "C"{ void DebugLog(const char *s){
     c1c:	b510      	push	{r4, lr}
     c1e:	4604      	mov	r4, r0
	io_write(io, (uint8_t *) s, strlen(s));
     c20:	4b04      	ldr	r3, [pc, #16]	; (c34 <DebugLog+0x18>)
     c22:	4798      	blx	r3
     c24:	b282      	uxth	r2, r0
     c26:	4621      	mov	r1, r4
     c28:	4b03      	ldr	r3, [pc, #12]	; (c38 <DebugLog+0x1c>)
     c2a:	6818      	ldr	r0, [r3, #0]
     c2c:	4b03      	ldr	r3, [pc, #12]	; (c3c <DebugLog+0x20>)
     c2e:	4798      	blx	r3
     c30:	bd10      	pop	{r4, pc}
     c32:	bf00      	nop
     c34:	00019041 	.word	0x00019041
     c38:	200009f4 	.word	0x200009f4
     c3c:	0000036d 	.word	0x0000036d

00000c40 <main>:
{
     c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c44:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
	atmel_start_init();
     c48:	4b2f      	ldr	r3, [pc, #188]	; (d08 <main+0xc8>)
     c4a:	4798      	blx	r3
	USART_0_();
     c4c:	4b2f      	ldr	r3, [pc, #188]	; (d0c <main+0xcc>)
     c4e:	4798      	blx	r3
	DebugLog("Hello");
     c50:	482f      	ldr	r0, [pc, #188]	; (d10 <main+0xd0>)
     c52:	4b30      	ldr	r3, [pc, #192]	; (d14 <main+0xd4>)
     c54:	4798      	blx	r3
	setup_inference();
     c56:	4b30      	ldr	r3, [pc, #192]	; (d18 <main+0xd8>)
     c58:	4798      	blx	r3
		io_read(io, image_serial, 1024);
     c5a:	4e30      	ldr	r6, [pc, #192]	; (d1c <main+0xdc>)
		  uint8_t best_output = 0;
     c5c:	2500      	movs	r5, #0
		  int8_t accuracy = -128;
     c5e:	46a9      	mov	r9, r5
     c60:	f04f 0a01 	mov.w	sl, #1
				  best_output = i;
     c64:	f10d 0806 	add.w	r8, sp, #6
     c68:	4654      	mov	r4, sl
     c6a:	e02a      	b.n	cc2 <main+0x82>
		  for (int i = 0; i < 43; i++)
     c6c:	3301      	adds	r3, #1
     c6e:	2b2b      	cmp	r3, #43	; 0x2b
     c70:	d008      	beq.n	c84 <main+0x44>
			  if (accuracy < output[i])
     c72:	f910 2f01 	ldrsb.w	r2, [r0, #1]!
     c76:	428a      	cmp	r2, r1
     c78:	ddf8      	ble.n	c6c <main+0x2c>
				  best_output = i;
     c7a:	f88d 3006 	strb.w	r3, [sp, #6]
				  accuracy = output[i];
     c7e:	4611      	mov	r1, r2
     c80:	4627      	mov	r7, r4
     c82:	e7f3      	b.n	c6c <main+0x2c>
     c84:	2f00      	cmp	r7, #0
     c86:	d13b      	bne.n	d00 <main+0xc0>
		memcpy(accuracy_1, &accuracy, 4);
     c88:	f8dd 3007 	ldr.w	r3, [sp, #7]
     c8c:	9302      	str	r3, [sp, #8]
		uint8_t cicle_count[4] = {0x00, 0x00, 0x00, 0x20};
     c8e:	f88d 500c 	strb.w	r5, [sp, #12]
     c92:	f88d 500d 	strb.w	r5, [sp, #13]
     c96:	f88d 500e 	strb.w	r5, [sp, #14]
     c9a:	2320      	movs	r3, #32
     c9c:	f88d 300f 	strb.w	r3, [sp, #15]
		  io_write(io, &best_output, 1);
     ca0:	4652      	mov	r2, sl
     ca2:	4641      	mov	r1, r8
     ca4:	6830      	ldr	r0, [r6, #0]
     ca6:	4f1e      	ldr	r7, [pc, #120]	; (d20 <main+0xe0>)
     ca8:	47b8      	blx	r7
		  io_write(io, accuracy_1, 4);		  
     caa:	2204      	movs	r2, #4
     cac:	a902      	add	r1, sp, #8
     cae:	6830      	ldr	r0, [r6, #0]
     cb0:	47b8      	blx	r7
		  io_write(io, cicle_count, 4);
     cb2:	2204      	movs	r2, #4
     cb4:	a903      	add	r1, sp, #12
     cb6:	6830      	ldr	r0, [r6, #0]
     cb8:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     cba:	2202      	movs	r2, #2
     cbc:	4b19      	ldr	r3, [pc, #100]	; (d24 <main+0xe4>)
     cbe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		io_read(io, image_serial, 1024);
     cc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
     cc6:	a904      	add	r1, sp, #16
     cc8:	6830      	ldr	r0, [r6, #0]
     cca:	4b17      	ldr	r3, [pc, #92]	; (d28 <main+0xe8>)
     ccc:	4798      	blx	r3
     cce:	f10d 020f 	add.w	r2, sp, #15
     cd2:	4916      	ldr	r1, [pc, #88]	; (d2c <main+0xec>)
     cd4:	f20d 400f 	addw	r0, sp, #1039	; 0x40f
    iArray[i] = (int8_t) (image_serial[i] >> 1);
     cd8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
     cdc:	105b      	asrs	r3, r3, #1
     cde:	f801 3f01 	strb.w	r3, [r1, #1]!
for(int i = 0; i < 1024; ++i) {
     ce2:	4282      	cmp	r2, r0
     ce4:	d1f8      	bne.n	cd8 <main+0x98>
		int8_t *output = run_inference();
     ce6:	4b12      	ldr	r3, [pc, #72]	; (d30 <main+0xf0>)
     ce8:	4798      	blx	r3
		  uint8_t best_output = 0;
     cea:	f88d 5006 	strb.w	r5, [sp, #6]
		  int8_t accuracy = -128;
     cee:	2380      	movs	r3, #128	; 0x80
     cf0:	f88d 3007 	strb.w	r3, [sp, #7]
     cf4:	3801      	subs	r0, #1
     cf6:	464f      	mov	r7, r9
     cf8:	f06f 017f 	mvn.w	r1, #127	; 0x7f
		  for (int i = 0; i < 43; i++)
     cfc:	462b      	mov	r3, r5
     cfe:	e7b8      	b.n	c72 <main+0x32>
     d00:	f88d 1007 	strb.w	r1, [sp, #7]
     d04:	e7c0      	b.n	c88 <main+0x48>
     d06:	bf00      	nop
     d08:	00000aed 	.word	0x00000aed
     d0c:	00000bf9 	.word	0x00000bf9
     d10:	0003a9e0 	.word	0x0003a9e0
     d14:	00000c1d 	.word	0x00000c1d
     d18:	00000e39 	.word	0x00000e39
     d1c:	200009f4 	.word	0x200009f4
     d20:	0000036d 	.word	0x0000036d
     d24:	41008000 	.word	0x41008000
     d28:	0000039d 	.word	0x0000039d
     d2c:	20019b67 	.word	0x20019b67
     d30:	000012a9 	.word	0x000012a9

00000d34 <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
     d34:	4770      	bx	lr

00000d36 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
     d36:	b508      	push	{r3, lr}
                                   int version) const final {
    return FindOp(op);
     d38:	6803      	ldr	r3, [r0, #0]
     d3a:	691b      	ldr	r3, [r3, #16]
     d3c:	4798      	blx	r3
  }
     d3e:	bd08      	pop	{r3, pc}

00000d40 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
     d40:	b508      	push	{r3, lr}
    return FindOp(op);
     d42:	6803      	ldr	r3, [r0, #0]
     d44:	695b      	ldr	r3, [r3, #20]
     d46:	4798      	blx	r3
  }
     d48:	bd08      	pop	{r3, pc}

00000d4a <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE>:
 public:
  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
      : error_reporter_(error_reporter) {}

  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
    if (op == BuiltinOperator_CUSTOM) return nullptr;
     d4a:	2920      	cmp	r1, #32
     d4c:	d019      	beq.n	d82 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x38>
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
     d4e:	b430      	push	{r4, r5}

    for (unsigned int i = 0; i < registrations_len_; ++i) {
     d50:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
     d54:	b1bc      	cbz	r4, d86 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x3c>
      const TfLiteRegistration& registration = registrations_[i];
      if (registration.builtin_code == op) {
     d56:	460d      	mov	r5, r1
     d58:	6983      	ldr	r3, [r0, #24]
     d5a:	428b      	cmp	r3, r1
     d5c:	d00c      	beq.n	d78 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x2e>
     d5e:	4602      	mov	r2, r0
     d60:	2300      	movs	r3, #0
    for (unsigned int i = 0; i < registrations_len_; ++i) {
     d62:	3301      	adds	r3, #1
     d64:	42a3      	cmp	r3, r4
     d66:	d009      	beq.n	d7c <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x32>
     d68:	3220      	adds	r2, #32
      if (registration.builtin_code == op) {
     d6a:	6991      	ldr	r1, [r2, #24]
     d6c:	42a9      	cmp	r1, r5
     d6e:	d1f8      	bne.n	d62 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x18>
      const TfLiteRegistration& registration = registrations_[i];
     d70:	eb00 1043 	add.w	r0, r0, r3, lsl #5
     d74:	3004      	adds	r0, #4
     d76:	e002      	b.n	d7e <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x34>
     d78:	3004      	adds	r0, #4
     d7a:	e000      	b.n	d7e <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x34>
        return &registration;
      }
    }
    return nullptr;
     d7c:	2000      	movs	r0, #0
  }
     d7e:	bc30      	pop	{r4, r5}
     d80:	4770      	bx	lr
    if (op == BuiltinOperator_CUSTOM) return nullptr;
     d82:	2000      	movs	r0, #0
     d84:	4770      	bx	lr
    return nullptr;
     d86:	2000      	movs	r0, #0
     d88:	e7f9      	b.n	d7e <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x34>

00000d8a <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
     d8a:	4770      	bx	lr

00000d8c <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE>:
      }
    }
    return nullptr;
  }

  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
     d8c:	b538      	push	{r3, r4, r5, lr}
      BuiltinOperator op) const override {
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
     d8e:	f8d0 50c4 	ldr.w	r5, [r0, #196]	; 0xc4
     d92:	2d05      	cmp	r5, #5
     d94:	d812      	bhi.n	dbc <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x30>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
     d96:	b1bd      	cbz	r5, dc8 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x3c>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
     d98:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
     d9c:	428b      	cmp	r3, r1
     d9e:	d00f      	beq.n	dc0 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x34>
     da0:	f100 02a9 	add.w	r2, r0, #169	; 0xa9
     da4:	2300      	movs	r3, #0
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
     da6:	3301      	adds	r3, #1
     da8:	429d      	cmp	r5, r3
     daa:	d00b      	beq.n	dc4 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x38>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
     dac:	f812 4b01 	ldrb.w	r4, [r2], #1
     db0:	428c      	cmp	r4, r1
     db2:	d1f8      	bne.n	da6 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x1a>
     db4:	332c      	adds	r3, #44	; 0x2c
     db6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
     dba:	bd38      	pop	{r3, r4, r5, pc}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
     dbc:	4b03      	ldr	r3, [pc, #12]	; (dcc <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x40>)
     dbe:	4798      	blx	r3
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
     dc0:	2300      	movs	r3, #0
     dc2:	e7f7      	b.n	db4 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x28>
    }
    return nullptr;
     dc4:	2000      	movs	r0, #0
     dc6:	bd38      	pop	{r3, r4, r5, pc}
     dc8:	2000      	movs	r0, #0
  }
     dca:	bd38      	pop	{r3, r4, r5, pc}
     dcc:	0001739d 	.word	0x0001739d

00000dd0 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
     dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
     dd4:	f8d0 60a4 	ldr.w	r6, [r0, #164]	; 0xa4
     dd8:	b1ce      	cbz	r6, e0e <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x3e>
     dda:	4689      	mov	r9, r1
     ddc:	4680      	mov	r8, r0
     dde:	4604      	mov	r4, r0
     de0:	2500      	movs	r5, #0
          (strcmp(registration.custom_name, op) == 0)) {
     de2:	4f0c      	ldr	r7, [pc, #48]	; (e14 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x44>)
     de4:	e003      	b.n	dee <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x1e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
     de6:	3501      	adds	r5, #1
     de8:	3420      	adds	r4, #32
     dea:	42b5      	cmp	r5, r6
     dec:	d00c      	beq.n	e08 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x38>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
     dee:	69a3      	ldr	r3, [r4, #24]
     df0:	2b20      	cmp	r3, #32
     df2:	d1f8      	bne.n	de6 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x16>
          (strcmp(registration.custom_name, op) == 0)) {
     df4:	4649      	mov	r1, r9
     df6:	69e0      	ldr	r0, [r4, #28]
     df8:	47b8      	blx	r7
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
     dfa:	2800      	cmp	r0, #0
     dfc:	d1f3      	bne.n	de6 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x16>
      const TfLiteRegistration& registration = registrations_[i];
     dfe:	eb08 1045 	add.w	r0, r8, r5, lsl #5
     e02:	3004      	adds	r0, #4
     e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return nullptr;
     e08:	2000      	movs	r0, #0
     e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     e0e:	2000      	movs	r0, #0
  }
     e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     e14:	00018969 	.word	0x00018969

00000e18 <_ZN6tflite22MicroMutableOpResolverILj5EED0Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
     e18:	b510      	push	{r4, lr}
     e1a:	4604      	mov	r4, r0
     e1c:	4b01      	ldr	r3, [pc, #4]	; (e24 <_ZN6tflite22MicroMutableOpResolverILj5EED0Ev+0xc>)
     e1e:	4798      	blx	r3
     e20:	4620      	mov	r0, r4
     e22:	bd10      	pop	{r4, pc}
     e24:	0000ccb9 	.word	0x0000ccb9

00000e28 <_ZN6tflite18MicroErrorReporterD0Ev>:
     e28:	b510      	push	{r4, lr}
     e2a:	4604      	mov	r4, r0
     e2c:	4b01      	ldr	r3, [pc, #4]	; (e34 <_ZN6tflite18MicroErrorReporterD0Ev+0xc>)
     e2e:	4798      	blx	r3
     e30:	4620      	mov	r0, r4
     e32:	bd10      	pop	{r4, pc}
     e34:	0000ccb9 	.word	0x0000ccb9

00000e38 <_Z15setup_inferencev>:
constexpr int kTensorArenaSize = 100 * 1024;
alignas(16) uint8_t tensor_arena[kTensorArenaSize];
}  // namespace

// The name of this function is important for Arduino compatibility.
void setup_inference() {
     e38:	b5f0      	push	{r4, r5, r6, r7, lr}
     e3a:	b08d      	sub	sp, #52	; 0x34
  // Set up logging. Google style is to avoid globals or statics because of
  // lifetime uncertainty, but since this has a trivial destructor it's okay.
  static tflite::MicroErrorReporter micro_error_reporter;  // NOLINT
     e3c:	4ba2      	ldr	r3, [pc, #648]	; (10c8 <_Z15setup_inferencev+0x290>)
     e3e:	781b      	ldrb	r3, [r3, #0]
     e40:	f3bf 8f5b 	dmb	ish
     e44:	f013 0f01 	tst.w	r3, #1
     e48:	f000 8099 	beq.w	f7e <_Z15setup_inferencev+0x146>
  error_reporter = &micro_error_reporter;
     e4c:	489e      	ldr	r0, [pc, #632]	; (10c8 <_Z15setup_inferencev+0x290>)
     e4e:	4b9f      	ldr	r3, [pc, #636]	; (10cc <_Z15setup_inferencev+0x294>)
     e50:	6043      	str	r3, [r0, #4]
// Helpers to get a typed pointer to the root object contained in the buffer.
template<typename T> T *GetMutableRoot(void *buf) {
  EndianCheck();
  return reinterpret_cast<T *>(
      reinterpret_cast<uint8_t *>(buf) +
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
     e52:	4b9f      	ldr	r3, [pc, #636]	; (10d0 <_Z15setup_inferencev+0x298>)
     e54:	6819      	ldr	r1, [r3, #0]
     e56:	18ca      	adds	r2, r1, r3

  // Map the model into a usable data structure. This doesn't involve any
  // copying or parsing, it's a very lightweight operation.
  model = tflite::GetModel(g_magic_wand_model_data);
     e58:	6082      	str	r2, [r0, #8]
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
     e5a:	58cb      	ldr	r3, [r1, r3]
     e5c:	1ad3      	subs	r3, r2, r3
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
     e5e:	8819      	ldrh	r1, [r3, #0]
     e60:	2904      	cmp	r1, #4
     e62:	f340 809b 	ble.w	f9c <_Z15setup_inferencev+0x164>

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
  return EndianScalar(*reinterpret_cast<const T *>(p));
     e66:	889b      	ldrh	r3, [r3, #4]
  }

  template<typename T> T GetField(voffset_t field, T defaultval) const {
    auto field_offset = GetOptionalFieldOffset(field);
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
     e68:	2b00      	cmp	r3, #0
     e6a:	f000 809f 	beq.w	fac <_Z15setup_inferencev+0x174>
     e6e:	58d2      	ldr	r2, [r2, r3]
  if (model->version() != TFLITE_SCHEMA_VERSION) {
     e70:	2a03      	cmp	r2, #3
     e72:	f040 8094 	bne.w	f9e <_Z15setup_inferencev+0x166>
  // Pull in only the operation implementations we need.
  // This relies on a complete list of all the ops needed by this graph.
  // An easier approach is to just use the AllOpsResolver, but this will
  // incur some penalty in code space for op implementations that are not
  // needed by this graph.
  static tflite::MicroMutableOpResolver<5> micro_op_resolver;  // NOLINT
     e76:	4b94      	ldr	r3, [pc, #592]	; (10c8 <_Z15setup_inferencev+0x290>)
     e78:	7b1b      	ldrb	r3, [r3, #12]
     e7a:	f3bf 8f5b 	dmb	ish
     e7e:	f013 0f01 	tst.w	r3, #1
     e82:	f000 8095 	beq.w	fb0 <_Z15setup_inferencev+0x178>
                      ParseConcatenation);
  }

  TfLiteStatus AddConv2D() {
    return AddBuiltin(BuiltinOperator_CONV_2D,
                      tflite::ops::micro::Register_CONV_2D(), ParseConv2D);
     e86:	a804      	add	r0, sp, #16
     e88:	4b92      	ldr	r3, [pc, #584]	; (10d4 <_Z15setup_inferencev+0x29c>)
     e8a:	4798      	blx	r3
                             "AddBuiltin function.");
      }
      return kTfLiteError;
    }

    if (FindOp(op) != nullptr) {
     e8c:	488e      	ldr	r0, [pc, #568]	; (10c8 <_Z15setup_inferencev+0x290>)
     e8e:	6903      	ldr	r3, [r0, #16]
     e90:	691b      	ldr	r3, [r3, #16]
     e92:	2103      	movs	r1, #3
     e94:	3010      	adds	r0, #16
     e96:	4798      	blx	r3
     e98:	2800      	cmp	r0, #0
     e9a:	f000 80a4 	beq.w	fe6 <_Z15setup_inferencev+0x1ae>
      if (error_reporter_ != nullptr) {
     e9e:	4b8a      	ldr	r3, [pc, #552]	; (10c8 <_Z15setup_inferencev+0x290>)
     ea0:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
     ea4:	b118      	cbz	r0, eae <_Z15setup_inferencev+0x76>
        TF_LITE_REPORT_ERROR(error_reporter_,
     ea6:	2203      	movs	r2, #3
     ea8:	498b      	ldr	r1, [pc, #556]	; (10d8 <_Z15setup_inferencev+0x2a0>)
     eaa:	4b8c      	ldr	r3, [pc, #560]	; (10dc <_Z15setup_inferencev+0x2a4>)
     eac:	4798      	blx	r3
                      tflite::ops::micro::Register_FULLY_CONNECTED(),
     eae:	a804      	add	r0, sp, #16
     eb0:	4b8b      	ldr	r3, [pc, #556]	; (10e0 <_Z15setup_inferencev+0x2a8>)
     eb2:	4798      	blx	r3
    if (FindOp(op) != nullptr) {
     eb4:	4884      	ldr	r0, [pc, #528]	; (10c8 <_Z15setup_inferencev+0x290>)
     eb6:	6903      	ldr	r3, [r0, #16]
     eb8:	691b      	ldr	r3, [r3, #16]
     eba:	2109      	movs	r1, #9
     ebc:	3010      	adds	r0, #16
     ebe:	4798      	blx	r3
     ec0:	2800      	cmp	r0, #0
     ec2:	f000 80c0 	beq.w	1046 <_Z15setup_inferencev+0x20e>
      if (error_reporter_ != nullptr) {
     ec6:	4b80      	ldr	r3, [pc, #512]	; (10c8 <_Z15setup_inferencev+0x290>)
     ec8:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
     ecc:	b118      	cbz	r0, ed6 <_Z15setup_inferencev+0x9e>
        TF_LITE_REPORT_ERROR(error_reporter_,
     ece:	2209      	movs	r2, #9
     ed0:	4981      	ldr	r1, [pc, #516]	; (10d8 <_Z15setup_inferencev+0x2a0>)
     ed2:	4b82      	ldr	r3, [pc, #520]	; (10dc <_Z15setup_inferencev+0x2a4>)
     ed4:	4798      	blx	r3
                      tflite::ops::micro::Register_MAX_POOL_2D(), ParsePool);
     ed6:	a804      	add	r0, sp, #16
     ed8:	4b82      	ldr	r3, [pc, #520]	; (10e4 <_Z15setup_inferencev+0x2ac>)
     eda:	4798      	blx	r3
    if (FindOp(op) != nullptr) {
     edc:	487a      	ldr	r0, [pc, #488]	; (10c8 <_Z15setup_inferencev+0x290>)
     ede:	6903      	ldr	r3, [r0, #16]
     ee0:	691b      	ldr	r3, [r3, #16]
     ee2:	2111      	movs	r1, #17
     ee4:	3010      	adds	r0, #16
     ee6:	4798      	blx	r3
     ee8:	2800      	cmp	r0, #0
     eea:	f000 80dc 	beq.w	10a6 <_Z15setup_inferencev+0x26e>
      if (error_reporter_ != nullptr) {
     eee:	4b76      	ldr	r3, [pc, #472]	; (10c8 <_Z15setup_inferencev+0x290>)
     ef0:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
     ef4:	b118      	cbz	r0, efe <_Z15setup_inferencev+0xc6>
        TF_LITE_REPORT_ERROR(error_reporter_,
     ef6:	2211      	movs	r2, #17
     ef8:	4977      	ldr	r1, [pc, #476]	; (10d8 <_Z15setup_inferencev+0x2a0>)
     efa:	4b78      	ldr	r3, [pc, #480]	; (10dc <_Z15setup_inferencev+0x2a4>)
     efc:	4798      	blx	r3
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
     efe:	a804      	add	r0, sp, #16
     f00:	4b79      	ldr	r3, [pc, #484]	; (10e8 <_Z15setup_inferencev+0x2b0>)
     f02:	4798      	blx	r3
    if (FindOp(op) != nullptr) {
     f04:	4870      	ldr	r0, [pc, #448]	; (10c8 <_Z15setup_inferencev+0x290>)
     f06:	6903      	ldr	r3, [r0, #16]
     f08:	691b      	ldr	r3, [r3, #16]
     f0a:	2116      	movs	r1, #22
     f0c:	3010      	adds	r0, #16
     f0e:	4798      	blx	r3
     f10:	2800      	cmp	r0, #0
     f12:	f000 812b 	beq.w	116c <_Z15setup_inferencev+0x334>
      if (error_reporter_ != nullptr) {
     f16:	4b6c      	ldr	r3, [pc, #432]	; (10c8 <_Z15setup_inferencev+0x290>)
     f18:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
     f1c:	b118      	cbz	r0, f26 <_Z15setup_inferencev+0xee>
        TF_LITE_REPORT_ERROR(error_reporter_,
     f1e:	2216      	movs	r2, #22
     f20:	496d      	ldr	r1, [pc, #436]	; (10d8 <_Z15setup_inferencev+0x2a0>)
     f22:	4b6e      	ldr	r3, [pc, #440]	; (10dc <_Z15setup_inferencev+0x2a4>)
     f24:	4798      	blx	r3
                      tflite::ops::micro::Register_SOFTMAX(), ParseSoftmax);
     f26:	a804      	add	r0, sp, #16
     f28:	4b70      	ldr	r3, [pc, #448]	; (10ec <_Z15setup_inferencev+0x2b4>)
     f2a:	4798      	blx	r3
    if (FindOp(op) != nullptr) {
     f2c:	4866      	ldr	r0, [pc, #408]	; (10c8 <_Z15setup_inferencev+0x290>)
     f2e:	6903      	ldr	r3, [r0, #16]
     f30:	691b      	ldr	r3, [r3, #16]
     f32:	2119      	movs	r1, #25
     f34:	3010      	adds	r0, #16
     f36:	4798      	blx	r3
     f38:	2800      	cmp	r0, #0
     f3a:	f000 8147 	beq.w	11cc <_Z15setup_inferencev+0x394>
      if (error_reporter_ != nullptr) {
     f3e:	4b62      	ldr	r3, [pc, #392]	; (10c8 <_Z15setup_inferencev+0x290>)
     f40:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
     f44:	b118      	cbz	r0, f4e <_Z15setup_inferencev+0x116>
        TF_LITE_REPORT_ERROR(error_reporter_,
     f46:	2219      	movs	r2, #25
     f48:	4963      	ldr	r1, [pc, #396]	; (10d8 <_Z15setup_inferencev+0x2a0>)
     f4a:	4b64      	ldr	r3, [pc, #400]	; (10dc <_Z15setup_inferencev+0x2a4>)
     f4c:	4798      	blx	r3
  micro_op_resolver.AddReshape();
  micro_op_resolver.AddSoftmax();

  // Build an interpreter to run the model with.
  static tflite::MicroInterpreter static_interpreter(
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
     f4e:	4b5e      	ldr	r3, [pc, #376]	; (10c8 <_Z15setup_inferencev+0x290>)
     f50:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
     f54:	f3bf 8f5b 	dmb	ish
     f58:	f013 0f01 	tst.w	r3, #1
     f5c:	f000 8166 	beq.w	122c <_Z15setup_inferencev+0x3f4>
  interpreter = &static_interpreter;
     f60:	4c63      	ldr	r4, [pc, #396]	; (10f0 <_Z15setup_inferencev+0x2b8>)
     f62:	f604 2098 	addw	r0, r4, #2712	; 0xa98
     f66:	f8c4 0b18 	str.w	r0, [r4, #2840]	; 0xb18

  // Allocate memory from the tensor_arena for the model's tensors.
  interpreter->AllocateTensors();
     f6a:	4b62      	ldr	r3, [pc, #392]	; (10f4 <_Z15setup_inferencev+0x2bc>)
     f6c:	4798      	blx	r3

  // Obtain pointer to the model's input tensor.
  model_input = interpreter->input(0);
     f6e:	2100      	movs	r1, #0
     f70:	f8d4 0b18 	ldr.w	r0, [r4, #2840]	; 0xb18
     f74:	4b60      	ldr	r3, [pc, #384]	; (10f8 <_Z15setup_inferencev+0x2c0>)
     f76:	4798      	blx	r3
     f78:	f8c4 0b1c 	str.w	r0, [r4, #2844]	; 0xb1c
     f7c:	e014      	b.n	fa8 <_Z15setup_inferencev+0x170>
  static tflite::MicroErrorReporter micro_error_reporter;  // NOLINT
     f7e:	4852      	ldr	r0, [pc, #328]	; (10c8 <_Z15setup_inferencev+0x290>)
     f80:	4b5e      	ldr	r3, [pc, #376]	; (10fc <_Z15setup_inferencev+0x2c4>)
     f82:	4798      	blx	r3
     f84:	2800      	cmp	r0, #0
     f86:	f43f af61 	beq.w	e4c <_Z15setup_inferencev+0x14>
     f8a:	484f      	ldr	r0, [pc, #316]	; (10c8 <_Z15setup_inferencev+0x290>)
     f8c:	4b5c      	ldr	r3, [pc, #368]	; (1100 <_Z15setup_inferencev+0x2c8>)
     f8e:	4798      	blx	r3
     f90:	4a5c      	ldr	r2, [pc, #368]	; (1104 <_Z15setup_inferencev+0x2cc>)
     f92:	495d      	ldr	r1, [pc, #372]	; (1108 <_Z15setup_inferencev+0x2d0>)
     f94:	484d      	ldr	r0, [pc, #308]	; (10cc <_Z15setup_inferencev+0x294>)
     f96:	4b5d      	ldr	r3, [pc, #372]	; (110c <_Z15setup_inferencev+0x2d4>)
     f98:	4798      	blx	r3
     f9a:	e757      	b.n	e4c <_Z15setup_inferencev+0x14>
     f9c:	2200      	movs	r2, #0
    TF_LITE_REPORT_ERROR(error_reporter,
     f9e:	2303      	movs	r3, #3
     fa0:	495b      	ldr	r1, [pc, #364]	; (1110 <_Z15setup_inferencev+0x2d8>)
     fa2:	484a      	ldr	r0, [pc, #296]	; (10cc <_Z15setup_inferencev+0x294>)
     fa4:	4c4d      	ldr	r4, [pc, #308]	; (10dc <_Z15setup_inferencev+0x2a4>)
     fa6:	47a0      	blx	r4

  /*TfLiteStatus setup_status = SetupAccelerometer(error_reporter);
  if (setup_status != kTfLiteOk) {
    TF_LITE_REPORT_ERROR(error_reporter, "Set up failed\n");
  }*/
}
     fa8:	b00d      	add	sp, #52	; 0x34
     faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fac:	2200      	movs	r2, #0
     fae:	e7f6      	b.n	f9e <_Z15setup_inferencev+0x166>
  static tflite::MicroMutableOpResolver<5> micro_op_resolver;  // NOLINT
     fb0:	4858      	ldr	r0, [pc, #352]	; (1114 <_Z15setup_inferencev+0x2dc>)
     fb2:	4b52      	ldr	r3, [pc, #328]	; (10fc <_Z15setup_inferencev+0x2c4>)
     fb4:	4798      	blx	r3
     fb6:	2800      	cmp	r0, #0
     fb8:	f43f af65 	beq.w	e86 <_Z15setup_inferencev+0x4e>
      : error_reporter_(error_reporter) {}
     fbc:	4c42      	ldr	r4, [pc, #264]	; (10c8 <_Z15setup_inferencev+0x290>)
     fbe:	4b56      	ldr	r3, [pc, #344]	; (1118 <_Z15setup_inferencev+0x2e0>)
     fc0:	6123      	str	r3, [r4, #16]
     fc2:	2300      	movs	r3, #0
     fc4:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
     fc8:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
     fcc:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
     fd0:	f104 000c 	add.w	r0, r4, #12
     fd4:	4b4a      	ldr	r3, [pc, #296]	; (1100 <_Z15setup_inferencev+0x2c8>)
     fd6:	4798      	blx	r3
     fd8:	4a4a      	ldr	r2, [pc, #296]	; (1104 <_Z15setup_inferencev+0x2cc>)
     fda:	4950      	ldr	r1, [pc, #320]	; (111c <_Z15setup_inferencev+0x2e4>)
     fdc:	f104 0010 	add.w	r0, r4, #16
     fe0:	4b4a      	ldr	r3, [pc, #296]	; (110c <_Z15setup_inferencev+0x2d4>)
     fe2:	4798      	blx	r3
     fe4:	e74f      	b.n	e86 <_Z15setup_inferencev+0x4e>
                             op);
      }
      return kTfLiteError;
    }

    if (registrations_len_ >= tOpCount) {
     fe6:	4b38      	ldr	r3, [pc, #224]	; (10c8 <_Z15setup_inferencev+0x290>)
     fe8:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
     fec:	2e04      	cmp	r6, #4
     fee:	d90a      	bls.n	1006 <_Z15setup_inferencev+0x1ce>
      if (error_reporter_) {
     ff0:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
     ff4:	2800      	cmp	r0, #0
     ff6:	f43f af5a 	beq.w	eae <_Z15setup_inferencev+0x76>
        TF_LITE_REPORT_ERROR(error_reporter_,
     ffa:	2305      	movs	r3, #5
     ffc:	2203      	movs	r2, #3
     ffe:	4948      	ldr	r1, [pc, #288]	; (1120 <_Z15setup_inferencev+0x2e8>)
    1000:	4c36      	ldr	r4, [pc, #216]	; (10dc <_Z15setup_inferencev+0x2a4>)
    1002:	47a0      	blx	r4
    1004:	e753      	b.n	eae <_Z15setup_inferencev+0x76>
                             op, tOpCount);
      }
      return kTfLiteError;
    }

    registrations_[registrations_len_] = registration;
    1006:	4f30      	ldr	r7, [pc, #192]	; (10c8 <_Z15setup_inferencev+0x290>)
    1008:	eb07 1e46 	add.w	lr, r7, r6, lsl #5
    100c:	f10e 0414 	add.w	r4, lr, #20
    1010:	ad04      	add	r5, sp, #16
    1012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1016:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    101a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
    101e:	2203      	movs	r2, #3
    1020:	f8ce 2028 	str.w	r2, [lr, #40]	; 0x28
    registrations_len_++;
    1024:	3601      	adds	r6, #1
    1026:	f8c7 60b4 	str.w	r6, [r7, #180]	; 0xb4

    builtin_codes_[num_buitin_ops_] = op;
    102a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    102e:	18f9      	adds	r1, r7, r3
    1030:	f881 20b8 	strb.w	r2, [r1, #184]	; 0xb8
    builtin_parsers_[num_buitin_ops_] = parser;
    1034:	eb07 0283 	add.w	r2, r7, r3, lsl #2
    1038:	493a      	ldr	r1, [pc, #232]	; (1124 <_Z15setup_inferencev+0x2ec>)
    103a:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    num_buitin_ops_++;
    103e:	3301      	adds	r3, #1
    1040:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    1044:	e733      	b.n	eae <_Z15setup_inferencev+0x76>
    if (registrations_len_ >= tOpCount) {
    1046:	4b20      	ldr	r3, [pc, #128]	; (10c8 <_Z15setup_inferencev+0x290>)
    1048:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
    104c:	2e04      	cmp	r6, #4
    104e:	d90a      	bls.n	1066 <_Z15setup_inferencev+0x22e>
      if (error_reporter_) {
    1050:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
    1054:	2800      	cmp	r0, #0
    1056:	f43f af3e 	beq.w	ed6 <_Z15setup_inferencev+0x9e>
        TF_LITE_REPORT_ERROR(error_reporter_,
    105a:	2305      	movs	r3, #5
    105c:	2209      	movs	r2, #9
    105e:	4930      	ldr	r1, [pc, #192]	; (1120 <_Z15setup_inferencev+0x2e8>)
    1060:	4c1e      	ldr	r4, [pc, #120]	; (10dc <_Z15setup_inferencev+0x2a4>)
    1062:	47a0      	blx	r4
    1064:	e737      	b.n	ed6 <_Z15setup_inferencev+0x9e>
    registrations_[registrations_len_] = registration;
    1066:	4f18      	ldr	r7, [pc, #96]	; (10c8 <_Z15setup_inferencev+0x290>)
    1068:	eb07 1e46 	add.w	lr, r7, r6, lsl #5
    106c:	f10e 0414 	add.w	r4, lr, #20
    1070:	ad04      	add	r5, sp, #16
    1072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1076:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    107a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    107e:	2209      	movs	r2, #9
    1080:	f8ce 2028 	str.w	r2, [lr, #40]	; 0x28
    registrations_len_++;
    1084:	3601      	adds	r6, #1
    1086:	f8c7 60b4 	str.w	r6, [r7, #180]	; 0xb4
    builtin_codes_[num_buitin_ops_] = op;
    108a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    108e:	18f9      	adds	r1, r7, r3
    1090:	f881 20b8 	strb.w	r2, [r1, #184]	; 0xb8
    builtin_parsers_[num_buitin_ops_] = parser;
    1094:	eb07 0283 	add.w	r2, r7, r3, lsl #2
    1098:	4923      	ldr	r1, [pc, #140]	; (1128 <_Z15setup_inferencev+0x2f0>)
    109a:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    num_buitin_ops_++;
    109e:	3301      	adds	r3, #1
    10a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    10a4:	e717      	b.n	ed6 <_Z15setup_inferencev+0x9e>
    if (registrations_len_ >= tOpCount) {
    10a6:	4b08      	ldr	r3, [pc, #32]	; (10c8 <_Z15setup_inferencev+0x290>)
    10a8:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
    10ac:	2e04      	cmp	r6, #4
    10ae:	d93d      	bls.n	112c <_Z15setup_inferencev+0x2f4>
      if (error_reporter_) {
    10b0:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
    10b4:	2800      	cmp	r0, #0
    10b6:	f43f af22 	beq.w	efe <_Z15setup_inferencev+0xc6>
        TF_LITE_REPORT_ERROR(error_reporter_,
    10ba:	2305      	movs	r3, #5
    10bc:	2211      	movs	r2, #17
    10be:	4918      	ldr	r1, [pc, #96]	; (1120 <_Z15setup_inferencev+0x2e8>)
    10c0:	4c06      	ldr	r4, [pc, #24]	; (10dc <_Z15setup_inferencev+0x2a4>)
    10c2:	47a0      	blx	r4
    10c4:	e71b      	b.n	efe <_Z15setup_inferencev+0xc6>
    10c6:	bf00      	nop
    10c8:	20000a00 	.word	0x20000a00
    10cc:	20000004 	.word	0x20000004
    10d0:	0001ec60 	.word	0x0001ec60
    10d4:	00003745 	.word	0x00003745
    10d8:	0003aa68 	.word	0x0003aa68
    10dc:	000012f9 	.word	0x000012f9
    10e0:	00004c11 	.word	0x00004c11
    10e4:	000060f9 	.word	0x000060f9
    10e8:	000077c5 	.word	0x000077c5
    10ec:	0000646d 	.word	0x0000646d
    10f0:	20019048 	.word	0x20019048
    10f4:	00009159 	.word	0x00009159
    10f8:	000093ad 	.word	0x000093ad
    10fc:	0000ccc1 	.word	0x0000ccc1
    1100:	0000ccf9 	.word	0x0000ccf9
    1104:	20000000 	.word	0x20000000
    1108:	00000d35 	.word	0x00000d35
    110c:	0000ccad 	.word	0x0000ccad
    1110:	0003aa20 	.word	0x0003aa20
    1114:	20000a0c 	.word	0x20000a0c
    1118:	0003aa04 	.word	0x0003aa04
    111c:	00000d8b 	.word	0x00000d8b
    1120:	0003aab8 	.word	0x0003aab8
    1124:	00001491 	.word	0x00001491
    1128:	000015d1 	.word	0x000015d1
    registrations_[registrations_len_] = registration;
    112c:	4f50      	ldr	r7, [pc, #320]	; (1270 <_Z15setup_inferencev+0x438>)
    112e:	eb07 1e46 	add.w	lr, r7, r6, lsl #5
    1132:	f10e 0414 	add.w	r4, lr, #20
    1136:	ad04      	add	r5, sp, #16
    1138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    113a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    113c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1140:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    1144:	2211      	movs	r2, #17
    1146:	f8ce 2028 	str.w	r2, [lr, #40]	; 0x28
    registrations_len_++;
    114a:	3601      	adds	r6, #1
    114c:	f8c7 60b4 	str.w	r6, [r7, #180]	; 0xb4
    builtin_codes_[num_buitin_ops_] = op;
    1150:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    1154:	18f9      	adds	r1, r7, r3
    1156:	f881 20b8 	strb.w	r2, [r1, #184]	; 0xb8
    builtin_parsers_[num_buitin_ops_] = parser;
    115a:	eb07 0283 	add.w	r2, r7, r3, lsl #2
    115e:	4945      	ldr	r1, [pc, #276]	; (1274 <_Z15setup_inferencev+0x43c>)
    1160:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    num_buitin_ops_++;
    1164:	3301      	adds	r3, #1
    1166:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    116a:	e6c8      	b.n	efe <_Z15setup_inferencev+0xc6>
    if (registrations_len_ >= tOpCount) {
    116c:	4b40      	ldr	r3, [pc, #256]	; (1270 <_Z15setup_inferencev+0x438>)
    116e:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
    1172:	2e04      	cmp	r6, #4
    1174:	d90a      	bls.n	118c <_Z15setup_inferencev+0x354>
      if (error_reporter_) {
    1176:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
    117a:	2800      	cmp	r0, #0
    117c:	f43f aed3 	beq.w	f26 <_Z15setup_inferencev+0xee>
        TF_LITE_REPORT_ERROR(error_reporter_,
    1180:	2305      	movs	r3, #5
    1182:	2216      	movs	r2, #22
    1184:	493c      	ldr	r1, [pc, #240]	; (1278 <_Z15setup_inferencev+0x440>)
    1186:	4c3d      	ldr	r4, [pc, #244]	; (127c <_Z15setup_inferencev+0x444>)
    1188:	47a0      	blx	r4
    118a:	e6cc      	b.n	f26 <_Z15setup_inferencev+0xee>
    registrations_[registrations_len_] = registration;
    118c:	4f38      	ldr	r7, [pc, #224]	; (1270 <_Z15setup_inferencev+0x438>)
    118e:	eb07 1e46 	add.w	lr, r7, r6, lsl #5
    1192:	f10e 0414 	add.w	r4, lr, #20
    1196:	ad04      	add	r5, sp, #16
    1198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    119a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    119c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    11a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    11a4:	2216      	movs	r2, #22
    11a6:	f8ce 2028 	str.w	r2, [lr, #40]	; 0x28
    registrations_len_++;
    11aa:	3601      	adds	r6, #1
    11ac:	f8c7 60b4 	str.w	r6, [r7, #180]	; 0xb4
    builtin_codes_[num_buitin_ops_] = op;
    11b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    11b4:	18f9      	adds	r1, r7, r3
    11b6:	f881 20b8 	strb.w	r2, [r1, #184]	; 0xb8
    builtin_parsers_[num_buitin_ops_] = parser;
    11ba:	eb07 0283 	add.w	r2, r7, r3, lsl #2
    11be:	4930      	ldr	r1, [pc, #192]	; (1280 <_Z15setup_inferencev+0x448>)
    11c0:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    num_buitin_ops_++;
    11c4:	3301      	adds	r3, #1
    11c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    11ca:	e6ac      	b.n	f26 <_Z15setup_inferencev+0xee>
    if (registrations_len_ >= tOpCount) {
    11cc:	4b28      	ldr	r3, [pc, #160]	; (1270 <_Z15setup_inferencev+0x438>)
    11ce:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
    11d2:	2e04      	cmp	r6, #4
    11d4:	d90a      	bls.n	11ec <_Z15setup_inferencev+0x3b4>
      if (error_reporter_) {
    11d6:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
    11da:	2800      	cmp	r0, #0
    11dc:	f43f aeb7 	beq.w	f4e <_Z15setup_inferencev+0x116>
        TF_LITE_REPORT_ERROR(error_reporter_,
    11e0:	2305      	movs	r3, #5
    11e2:	2219      	movs	r2, #25
    11e4:	4924      	ldr	r1, [pc, #144]	; (1278 <_Z15setup_inferencev+0x440>)
    11e6:	4c25      	ldr	r4, [pc, #148]	; (127c <_Z15setup_inferencev+0x444>)
    11e8:	47a0      	blx	r4
    11ea:	e6b0      	b.n	f4e <_Z15setup_inferencev+0x116>
    registrations_[registrations_len_] = registration;
    11ec:	4f20      	ldr	r7, [pc, #128]	; (1270 <_Z15setup_inferencev+0x438>)
    11ee:	eb07 1e46 	add.w	lr, r7, r6, lsl #5
    11f2:	f10e 0414 	add.w	r4, lr, #20
    11f6:	ad04      	add	r5, sp, #16
    11f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    11fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    11fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1200:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    1204:	2219      	movs	r2, #25
    1206:	f8ce 2028 	str.w	r2, [lr, #40]	; 0x28
    registrations_len_++;
    120a:	3601      	adds	r6, #1
    120c:	f8c7 60b4 	str.w	r6, [r7, #180]	; 0xb4
    builtin_codes_[num_buitin_ops_] = op;
    1210:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    1214:	18f9      	adds	r1, r7, r3
    1216:	f881 20b8 	strb.w	r2, [r1, #184]	; 0xb8
    builtin_parsers_[num_buitin_ops_] = parser;
    121a:	eb07 0283 	add.w	r2, r7, r3, lsl #2
    121e:	4919      	ldr	r1, [pc, #100]	; (1284 <_Z15setup_inferencev+0x44c>)
    1220:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    num_buitin_ops_++;
    1224:	3301      	adds	r3, #1
    1226:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    122a:	e690      	b.n	f4e <_Z15setup_inferencev+0x116>
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
    122c:	4816      	ldr	r0, [pc, #88]	; (1288 <_Z15setup_inferencev+0x450>)
    122e:	4b17      	ldr	r3, [pc, #92]	; (128c <_Z15setup_inferencev+0x454>)
    1230:	4798      	blx	r3
    1232:	2800      	cmp	r0, #0
    1234:	f43f ae94 	beq.w	f60 <_Z15setup_inferencev+0x128>
    1238:	4c0d      	ldr	r4, [pc, #52]	; (1270 <_Z15setup_inferencev+0x438>)
    123a:	4d15      	ldr	r5, [pc, #84]	; (1290 <_Z15setup_inferencev+0x458>)
    123c:	2300      	movs	r3, #0
    123e:	9302      	str	r3, [sp, #8]
    1240:	6863      	ldr	r3, [r4, #4]
    1242:	9301      	str	r3, [sp, #4]
    1244:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
    1248:	9300      	str	r3, [sp, #0]
    124a:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
    124e:	f104 0210 	add.w	r2, r4, #16
    1252:	68a1      	ldr	r1, [r4, #8]
    1254:	4628      	mov	r0, r5
    1256:	4e0f      	ldr	r6, [pc, #60]	; (1294 <_Z15setup_inferencev+0x45c>)
    1258:	47b0      	blx	r6
    125a:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
    125e:	4b0e      	ldr	r3, [pc, #56]	; (1298 <_Z15setup_inferencev+0x460>)
    1260:	4798      	blx	r3
    1262:	4a0e      	ldr	r2, [pc, #56]	; (129c <_Z15setup_inferencev+0x464>)
    1264:	490e      	ldr	r1, [pc, #56]	; (12a0 <_Z15setup_inferencev+0x468>)
    1266:	4628      	mov	r0, r5
    1268:	4b0e      	ldr	r3, [pc, #56]	; (12a4 <_Z15setup_inferencev+0x46c>)
    126a:	4798      	blx	r3
    126c:	e678      	b.n	f60 <_Z15setup_inferencev+0x128>
    126e:	bf00      	nop
    1270:	20000a00 	.word	0x20000a00
    1274:	00001705 	.word	0x00001705
    1278:	0003aab8 	.word	0x0003aab8
    127c:	000012f9 	.word	0x000012f9
    1280:	00001845 	.word	0x00001845
    1284:	0000190d 	.word	0x0000190d
    1288:	20000adc 	.word	0x20000adc
    128c:	0000ccc1 	.word	0x0000ccc1
    1290:	20019ae0 	.word	0x20019ae0
    1294:	00009101 	.word	0x00009101
    1298:	0000ccf9 	.word	0x0000ccf9
    129c:	20000000 	.word	0x20000000
    12a0:	0000903f 	.word	0x0000903f
    12a4:	0000ccad 	.word	0x0000ccad

000012a8 <_Z13run_inferencev>:

int8_t *run_inference() {
    12a8:	b508      	push	{r3, lr}
  //if (!got_data) return;

  // Run inference, and report any error.
  
	//model_input->data.f = fArray;
	model_input->data.int8 = iArray;
    12aa:	4b0d      	ldr	r3, [pc, #52]	; (12e0 <_Z13run_inferencev+0x38>)
    12ac:	f8d3 2b1c 	ldr.w	r2, [r3, #2844]	; 0xb1c
    12b0:	f503 6132 	add.w	r1, r3, #2848	; 0xb20
    12b4:	6051      	str	r1, [r2, #4]
  TfLiteStatus invoke_status = interpreter->Invoke();
    12b6:	f8d3 0b18 	ldr.w	r0, [r3, #2840]	; 0xb18
    12ba:	4b0a      	ldr	r3, [pc, #40]	; (12e4 <_Z13run_inferencev+0x3c>)
    12bc:	4798      	blx	r3
  if (invoke_status != kTfLiteOk) {
    12be:	b938      	cbnz	r0, 12d0 <_Z13run_inferencev+0x28>
    TF_LITE_REPORT_ERROR(error_reporter, "Invoke failed on index: %d\n",
                         0); //begin_index
    //return 1;
  }
//  return interpreter->output(0)->data.f;
  return interpreter->output(0)->data.int8;
    12c0:	2100      	movs	r1, #0
    12c2:	4b07      	ldr	r3, [pc, #28]	; (12e0 <_Z13run_inferencev+0x38>)
    12c4:	f8d3 0b18 	ldr.w	r0, [r3, #2840]	; 0xb18
    12c8:	4b07      	ldr	r3, [pc, #28]	; (12e8 <_Z13run_inferencev+0x40>)
    12ca:	4798      	blx	r3
  // Analyze the results to obtain a prediction
  //int gesture_index = PredictGesture(interpreter->output(0)->data.f);

  // Produce an output
  //HandleOutput(error_reporter, gesture_index);
}
    12cc:	6840      	ldr	r0, [r0, #4]
    12ce:	bd08      	pop	{r3, pc}
    TF_LITE_REPORT_ERROR(error_reporter, "Invoke failed on index: %d\n",
    12d0:	2200      	movs	r2, #0
    12d2:	4906      	ldr	r1, [pc, #24]	; (12ec <_Z13run_inferencev+0x44>)
    12d4:	4b06      	ldr	r3, [pc, #24]	; (12f0 <_Z13run_inferencev+0x48>)
    12d6:	6858      	ldr	r0, [r3, #4]
    12d8:	4b06      	ldr	r3, [pc, #24]	; (12f4 <_Z13run_inferencev+0x4c>)
    12da:	4798      	blx	r3
    12dc:	e7f0      	b.n	12c0 <_Z13run_inferencev+0x18>
    12de:	bf00      	nop
    12e0:	20019048 	.word	0x20019048
    12e4:	000092a1 	.word	0x000092a1
    12e8:	000093f9 	.word	0x000093f9
    12ec:	0003aafc 	.word	0x0003aafc
    12f0:	20000a00 	.word	0x20000a00
    12f4:	000012f9 	.word	0x000012f9

000012f8 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
    12f8:	b40e      	push	{r1, r2, r3}
    12fa:	b500      	push	{lr}
    12fc:	b082      	sub	sp, #8
    12fe:	aa03      	add	r2, sp, #12
    1300:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
    1304:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
    1306:	6803      	ldr	r3, [r0, #0]
    1308:	689b      	ldr	r3, [r3, #8]
    130a:	4798      	blx	r3
  va_end(args);
  return code;
}
    130c:	b002      	add	sp, #8
    130e:	f85d eb04 	ldr.w	lr, [sp], #4
    1312:	b003      	add	sp, #12
    1314:	4770      	bx	lr

00001316 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
    1316:	b40c      	push	{r2, r3}
    1318:	b500      	push	{lr}
    131a:	b083      	sub	sp, #12
    131c:	aa04      	add	r2, sp, #16
    131e:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
    1322:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
    1324:	6803      	ldr	r3, [r0, #0]
    1326:	689b      	ldr	r3, [r3, #8]
    1328:	4798      	blx	r3
  va_end(args);
  return code;
}
    132a:	b003      	add	sp, #12
    132c:	f85d eb04 	ldr.w	lr, [sp], #4
    1330:	b002      	add	sp, #8
    1332:	4770      	bx	lr

00001334 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1334:	3801      	subs	r0, #1
    1336:	2804      	cmp	r0, #4
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1338:	d80e      	bhi.n	1358 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x24>
  }
  const tflite::ResizeNearestNeighborOptions *builtin_options_as_ResizeNearestNeighborOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_ResizeNearestNeighborOptions ? static_cast<const tflite::ResizeNearestNeighborOptions *>(builtin_options()) : nullptr;
  }
  const tflite::LeakyReluOptions *builtin_options_as_LeakyReluOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_LeakyReluOptions ? static_cast<const tflite::LeakyReluOptions *>(builtin_options()) : nullptr;
    133a:	e8df f000 	tbb	[pc, r0]
    133e:	0503      	.short	0x0503
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
    return const_cast<Table *>(this)->GetPointer<P>(field);
    1340:	0907      	.short	0x0907
    1342:	0b          	.byte	0x0b
    1343:	00          	.byte	0x00
    1344:	2001      	movs	r0, #1
    1346:	4770      	bx	lr
      return kTfLiteOk;
    }
    case BuiltinOperator_LEAKY_RELU: {
      auto params = safe_allocator.Allocate<TfLiteLeakyReluParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
      if (const auto* leaky_relu_params =
    1348:	2002      	movs	r0, #2
    return data_ - ReadScalar<soffset_t>(data_);
    134a:	4770      	bx	lr
    134c:	2003      	movs	r0, #3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    134e:	4770      	bx	lr
    1350:	2004      	movs	r0, #4
    1352:	4770      	bx	lr
    1354:	2005      	movs	r0, #5
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1356:	4770      	bx	lr
    1358:	2000      	movs	r0, #0
              op->builtin_options_as_LeakyReluOptions()) {
        params->alpha = leaky_relu_params->alpha();
    135a:	4770      	bx	lr

0000135c <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:
      }
      *builtin_data = params.release();
    135c:	b120      	cbz	r0, 1368 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0xc>
      return kTfLiteOk;
    135e:	2801      	cmp	r0, #1
    1360:	bf0c      	ite	eq
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    1362:	2002      	moveq	r0, #2
    1364:	2000      	movne	r0, #0
    1366:	4770      	bx	lr
    1368:	2001      	movs	r0, #1
    136a:	4770      	bx	lr

0000136c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
    136c:	b508      	push	{r3, lr}
    136e:	b118      	cbz	r0, 1378 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc>
    1370:	b121      	cbz	r1, 137c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10>
    1372:	b12a      	cbz	r2, 1380 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14>
    1374:	b133      	cbz	r3, 1384 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
    1376:	bd08      	pop	{r3, pc}
    1378:	4b03      	ldr	r3, [pc, #12]	; (1388 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c>)
    137a:	4798      	blx	r3
    137c:	4b02      	ldr	r3, [pc, #8]	; (1388 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c>)
    137e:	4798      	blx	r3
    1380:	4b01      	ldr	r3, [pc, #4]	; (1388 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c>)
    1382:	4798      	blx	r3
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    1384:	4b00      	ldr	r3, [pc, #0]	; (1388 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c>)
    1386:	4798      	blx	r3
    1388:	0001739d 	.word	0x0001739d

0000138c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>:
    138c:	b538      	push	{r3, r4, r5, lr}
    138e:	b1c1      	cbz	r1, 13c2 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x36>
    }
    case BuiltinOperator_MIRROR_PAD: {
      auto params = safe_allocator.Allocate<TfLiteMirrorPaddingParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    1390:	460d      	mov	r5, r1
    1392:	680c      	ldr	r4, [r1, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    1394:	ebb4 0f90 	cmp.w	r4, r0, lsr #2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1398:	d81a      	bhi.n	13d0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x44>
    139a:	b314      	cbz	r4, 13e2 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x56>
    139c:	3a04      	subs	r2, #4
    139e:	2300      	movs	r3, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    13a0:	f851 0f04 	ldr.w	r0, [r1, #4]!
  }
  const tflite::SquaredDifferenceOptions *builtin_options_as_SquaredDifferenceOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_SquaredDifferenceOptions ? static_cast<const tflite::SquaredDifferenceOptions *>(builtin_options()) : nullptr;
  }
  const tflite::MirrorPadOptions *builtin_options_as_MirrorPadOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_MirrorPadOptions ? static_cast<const tflite::MirrorPadOptions *>(builtin_options()) : nullptr;
    13a4:	f842 0f04 	str.w	r0, [r2, #4]!
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    13a8:	3301      	adds	r3, #1
    13aa:	429c      	cmp	r4, r3
    13ac:	d017      	beq.n	13de <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x52>
    auto p = data_ + field_offset;
    13ae:	6828      	ldr	r0, [r5, #0]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    13b0:	4283      	cmp	r3, r0
    13b2:	d3f5      	bcc.n	13a0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x14>
      const auto* mirror_pad_params = op->builtin_options_as_MirrorPadOptions();
      if (mirror_pad_params != nullptr) {
    13b4:	4b0c      	ldr	r3, [pc, #48]	; (13e8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x5c>)
    13b6:	4a0d      	ldr	r2, [pc, #52]	; (13ec <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x60>)
    return data_ - ReadScalar<soffset_t>(data_);
    13b8:	f240 1101 	movw	r1, #257	; 0x101
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    13bc:	480c      	ldr	r0, [pc, #48]	; (13f0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x64>)
    13be:	4c0d      	ldr	r4, [pc, #52]	; (13f4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x68>)
    13c0:	47a0      	blx	r4
    13c2:	9a04      	ldr	r2, [sp, #16]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    13c4:	490c      	ldr	r1, [pc, #48]	; (13f8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>)
        params->mode =
            mirror_pad_params->mode() == tflite::MirrorPadMode_REFLECT
                ? TfLiteMirrorPaddingMode::kTfLiteMirrorPaddingReflect
    13c6:	4618      	mov	r0, r3
    13c8:	4b0c      	ldr	r3, [pc, #48]	; (13fc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x70>)
    13ca:	4798      	blx	r3
    13cc:	2001      	movs	r0, #1
    13ce:	bd38      	pop	{r3, r4, r5, pc}
        params->mode =
    13d0:	9a04      	ldr	r2, [sp, #16]
                : TfLiteMirrorPaddingMode::kTfLiteMirrorPaddingSymmetric;
      }
      *builtin_data = params.release();
    13d2:	490b      	ldr	r1, [pc, #44]	; (1400 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x74>)
      return kTfLiteOk;
    13d4:	4618      	mov	r0, r3
    13d6:	4b09      	ldr	r3, [pc, #36]	; (13fc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x70>)
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    13d8:	4798      	blx	r3
    13da:	2001      	movs	r0, #1
    13dc:	bd38      	pop	{r3, r4, r5, pc}
    13de:	2000      	movs	r0, #0
    13e0:	bd38      	pop	{r3, r4, r5, pc}
    13e2:	2000      	movs	r0, #0
    13e4:	bd38      	pop	{r3, r4, r5, pc}
    13e6:	bf00      	nop
    13e8:	0003ac5c 	.word	0x0003ac5c
    13ec:	0003ab18 	.word	0x0003ab18
    13f0:	0003ac68 	.word	0x0003ac68
                ? TfLiteMirrorPaddingMode::kTfLiteMirrorPaddingReflect
    13f4:	000173ad 	.word	0x000173ad
    13f8:	0003abe8 	.word	0x0003abe8
    13fc:	000012f9 	.word	0x000012f9
    1400:	0003ac18 	.word	0x0003ac18

00001404 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
    1404:	b508      	push	{r3, lr}
    1406:	280a      	cmp	r0, #10
    1408:	d833      	bhi.n	1472 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x6e>
    140a:	e8df f000 	tbb	[pc, r0]
    140e:	060a      	.short	0x060a
    1410:	26221a16 	.word	0x26221a16
    1414:	1e2e122a 	.word	0x1e2e122a
    1418:	0e          	.byte	0x0e
    1419:	00          	.byte	0x00
    141a:	230a      	movs	r3, #10
    141c:	700b      	strb	r3, [r1, #0]
    141e:	2000      	movs	r0, #0
    1420:	bd08      	pop	{r3, pc}
    1422:	2301      	movs	r3, #1
    }
    case BuiltinOperator_UNIQUE: {
      auto params = safe_allocator.Allocate<TfLiteUniqueParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    1424:	700b      	strb	r3, [r1, #0]
    1426:	2000      	movs	r0, #0
    return data_ - ReadScalar<soffset_t>(data_);
    1428:	bd08      	pop	{r3, pc}
    142a:	230b      	movs	r3, #11
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    142c:	700b      	strb	r3, [r1, #0]
    142e:	2000      	movs	r0, #0
    1430:	bd08      	pop	{r3, pc}
    1432:	2307      	movs	r3, #7
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1434:	700b      	strb	r3, [r1, #0]
  }
  const tflite::SplitVOptions *builtin_options_as_SplitVOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_SplitVOptions ? static_cast<const tflite::SplitVOptions *>(builtin_options()) : nullptr;
  }
  const tflite::UniqueOptions *builtin_options_as_UniqueOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_UniqueOptions ? static_cast<const tflite::UniqueOptions *>(builtin_options()) : nullptr;
    1436:	2000      	movs	r0, #0
    1438:	bd08      	pop	{r3, pc}
    143a:	2302      	movs	r3, #2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    143c:	700b      	strb	r3, [r1, #0]
    143e:	2000      	movs	r0, #0
    1440:	bd08      	pop	{r3, pc}
    auto p = data_ + field_offset;
    1442:	2303      	movs	r3, #3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    1444:	700b      	strb	r3, [r1, #0]
    1446:	2000      	movs	r0, #0
      const auto* unique_params = op->builtin_options_as_UniqueOptions();
      if (unique_params != nullptr) {
    1448:	bd08      	pop	{r3, pc}
    144a:	2309      	movs	r3, #9
    return data_ - ReadScalar<soffset_t>(data_);
    144c:	700b      	strb	r3, [r1, #0]
    144e:	2000      	movs	r0, #0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1450:	bd08      	pop	{r3, pc}
    1452:	2304      	movs	r3, #4
    1454:	700b      	strb	r3, [r1, #0]
    1456:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1458:	bd08      	pop	{r3, pc}
        params->index_out_type =
            unique_params->idx_out_type() == tflite::TensorType_INT64
                ? TfLiteType::kTfLiteInt64
    145a:	2305      	movs	r3, #5
    145c:	700b      	strb	r3, [r1, #0]
    145e:	2000      	movs	r0, #0
    1460:	bd08      	pop	{r3, pc}
    1462:	2306      	movs	r3, #6
        params->index_out_type =
    1464:	700b      	strb	r3, [r1, #0]
                : TfLiteType::kTfLiteInt32;
      }
      *builtin_data = params.release();
    1466:	2000      	movs	r0, #0
      return kTfLiteOk;
    1468:	bd08      	pop	{r3, pc}
    146a:	2308      	movs	r3, #8
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    146c:	700b      	strb	r3, [r1, #0]
    146e:	2000      	movs	r0, #0
    1470:	bd08      	pop	{r3, pc}
    1472:	4613      	mov	r3, r2
    1474:	4602      	mov	r2, r0
    1476:	2000      	movs	r0, #0
    1478:	7008      	strb	r0, [r1, #0]
    147a:	4903      	ldr	r1, [pc, #12]	; (1488 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x84>)
    147c:	4618      	mov	r0, r3
    147e:	4b03      	ldr	r3, [pc, #12]	; (148c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x88>)
    1480:	4798      	blx	r3
    1482:	2001      	movs	r0, #1
    1484:	bd08      	pop	{r3, pc}
                ? TfLiteType::kTfLiteInt64
    1486:	bf00      	nop
    1488:	0003aca8 	.word	0x0003aca8
    148c:	000012f9 	.word	0x000012f9

00001490 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
    1490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1494:	b082      	sub	sp, #8
    1496:	4604      	mov	r4, r0
    1498:	460f      	mov	r7, r1
    }
    case BuiltinOperator_REVERSE_SEQUENCE: {
      auto params = safe_allocator.Allocate<TfLiteReverseSequenceParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    149a:	4615      	mov	r5, r2
    149c:	4698      	mov	r8, r3
    return data_ - ReadScalar<soffset_t>(data_);
    149e:	4e45      	ldr	r6, [pc, #276]	; (15b4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>)
    14a0:	47b0      	blx	r6
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    14a2:	682b      	ldr	r3, [r5, #0]
    14a4:	681b      	ldr	r3, [r3, #0]
    14a6:	2204      	movs	r2, #4
    14a8:	2118      	movs	r1, #24
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    14aa:	4628      	mov	r0, r5
  }
  const tflite::RankOptions *builtin_options_as_RankOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_RankOptions ? static_cast<const tflite::RankOptions *>(builtin_options()) : nullptr;
  }
  const tflite::ReverseSequenceOptions *builtin_options_as_ReverseSequenceOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_ReverseSequenceOptions ? static_cast<const tflite::ReverseSequenceOptions *>(builtin_options()) : nullptr;
    14ac:	4798      	blx	r3
    14ae:	2800      	cmp	r0, #0
    14b0:	d05a      	beq.n	1568 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    14b2:	4606      	mov	r6, r0
    14b4:	6823      	ldr	r3, [r4, #0]
    14b6:	1ae3      	subs	r3, r4, r3
    auto p = data_ + field_offset;
    14b8:	881a      	ldrh	r2, [r3, #0]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    14ba:	2a0a      	cmp	r2, #10
    14bc:	dd4e      	ble.n	155c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
      if (const auto* reverse_seq_params =
    14be:	8959      	ldrh	r1, [r3, #10]
    14c0:	2900      	cmp	r1, #0
    return data_ - ReadScalar<soffset_t>(data_);
    14c2:	d04b      	beq.n	155c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
    14c4:	5c61      	ldrb	r1, [r4, r1]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    14c6:	2901      	cmp	r1, #1
    14c8:	d148      	bne.n	155c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
    14ca:	2a0c      	cmp	r2, #12
    14cc:	dd46      	ble.n	155c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    14ce:	899b      	ldrh	r3, [r3, #12]
    14d0:	18e7      	adds	r7, r4, r3
              op->builtin_options_as_ReverseSequenceOptions()) {
        params->seq_dim = reverse_seq_params->seq_dim();
    14d2:	2b00      	cmp	r3, #0
    return data_ - ReadScalar<soffset_t>(data_);
    14d4:	d042      	beq.n	155c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
    14d6:	58e5      	ldr	r5, [r4, r3]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    14d8:	197c      	adds	r4, r7, r5
    14da:	d03f      	beq.n	155c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
    14dc:	597b      	ldr	r3, [r7, r5]
    14de:	1ae3      	subs	r3, r4, r3
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    14e0:	881a      	ldrh	r2, [r3, #0]
    14e2:	2a04      	cmp	r2, #4
        params->batch_dim = reverse_seq_params->batch_dim();
    14e4:	dd4d      	ble.n	1582 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf2>
      }
      *builtin_data = params.release();
    14e6:	889b      	ldrh	r3, [r3, #4]
      return kTfLiteOk;
    14e8:	2b00      	cmp	r3, #0
    14ea:	d04c      	beq.n	1586 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf6>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    14ec:	56e0      	ldrsb	r0, [r4, r3]
    14ee:	b2c0      	uxtb	r0, r0
    14f0:	4b31      	ldr	r3, [pc, #196]	; (15b8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x128>)
    14f2:	4798      	blx	r3
    14f4:	7030      	strb	r0, [r6, #0]
    14f6:	597b      	ldr	r3, [r7, r5]
    14f8:	1ae3      	subs	r3, r4, r3
    14fa:	881a      	ldrh	r2, [r3, #0]
    14fc:	2a06      	cmp	r2, #6
    14fe:	dd44      	ble.n	158a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    1500:	88db      	ldrh	r3, [r3, #6]
    1502:	2b00      	cmp	r3, #0
    1504:	d043      	beq.n	158e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfe>
    1506:	58e3      	ldr	r3, [r4, r3]
    1508:	6073      	str	r3, [r6, #4]
    150a:	597b      	ldr	r3, [r7, r5]
    150c:	1ae3      	subs	r3, r4, r3
    150e:	881a      	ldrh	r2, [r3, #0]
    1510:	2a08      	cmp	r2, #8
    1512:	dd3e      	ble.n	1592 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x102>
    1514:	891b      	ldrh	r3, [r3, #8]
    1516:	2b00      	cmp	r3, #0
    1518:	d03d      	beq.n	1596 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
    151a:	58e3      	ldr	r3, [r4, r3]
    151c:	60b3      	str	r3, [r6, #8]
    151e:	597b      	ldr	r3, [r7, r5]
    1520:	1ae3      	subs	r3, r4, r3
    }
    case BuiltinOperator_IF: {
      auto params = safe_allocator.Allocate<TfLiteIfParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    1522:	881a      	ldrh	r2, [r3, #0]
    1524:	2a0a      	cmp	r2, #10
    return data_ - ReadScalar<soffset_t>(data_);
    1526:	dd38      	ble.n	159a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10a>
    1528:	895b      	ldrh	r3, [r3, #10]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    152a:	2b00      	cmp	r3, #0
    152c:	d037      	beq.n	159e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    152e:	56e0      	ldrsb	r0, [r4, r3]
    1530:	b2c0      	uxtb	r0, r0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1532:	4b22      	ldr	r3, [pc, #136]	; (15bc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
  }
  const tflite::HardSwishOptions *builtin_options_as_HardSwishOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_HardSwishOptions ? static_cast<const tflite::HardSwishOptions *>(builtin_options()) : nullptr;
  }
  const tflite::IfOptions *builtin_options_as_IfOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_IfOptions ? static_cast<const tflite::IfOptions *>(builtin_options()) : nullptr;
    1534:	4798      	blx	r3
    1536:	7330      	strb	r0, [r6, #12]
    1538:	597b      	ldr	r3, [r7, r5]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    153a:	1ae3      	subs	r3, r4, r3
    153c:	881a      	ldrh	r2, [r3, #0]
    153e:	2a0c      	cmp	r2, #12
    auto p = data_ + field_offset;
    1540:	dd2f      	ble.n	15a2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x112>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    1542:	899b      	ldrh	r3, [r3, #12]
    1544:	b37b      	cbz	r3, 15a6 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>
      if (const auto* if_params = op->builtin_options_as_IfOptions()) {
    1546:	58e3      	ldr	r3, [r4, r3]
    1548:	6133      	str	r3, [r6, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    154a:	597b      	ldr	r3, [r7, r5]
    154c:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    154e:	881a      	ldrh	r2, [r3, #0]
    1550:	2a0e      	cmp	r2, #14
    1552:	dd2a      	ble.n	15aa <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a>
    1554:	89db      	ldrh	r3, [r3, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1556:	b353      	cbz	r3, 15ae <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11e>
    1558:	58e3      	ldr	r3, [r4, r3]
        params->then_subgraph_index = if_params->then_subgraph_index();
    155a:	6173      	str	r3, [r6, #20]
    return data_ - ReadScalar<soffset_t>(data_);
    155c:	f8c8 6000 	str.w	r6, [r8]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1560:	2000      	movs	r0, #0
    1562:	b002      	add	sp, #8
    1564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1568:	4b15      	ldr	r3, [pc, #84]	; (15c0 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
    156a:	9301      	str	r3, [sp, #4]
        params->else_subgraph_index = if_params->else_subgraph_index();
    156c:	f240 33e9 	movw	r3, #1001	; 0x3e9
      }
      *builtin_data = params.release();
      return kTfLiteOk;
    1570:	9300      	str	r3, [sp, #0]
    1572:	4b14      	ldr	r3, [pc, #80]	; (15c4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    1574:	4a14      	ldr	r2, [pc, #80]	; (15c8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
    1576:	4639      	mov	r1, r7
    1578:	4638      	mov	r0, r7
    157a:	4c14      	ldr	r4, [pc, #80]	; (15cc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
    157c:	47a0      	blx	r4
    157e:	2001      	movs	r0, #1
    1580:	e7ef      	b.n	1562 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    1582:	2000      	movs	r0, #0
    1584:	e7b3      	b.n	14ee <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
    1586:	2000      	movs	r0, #0
    1588:	e7b1      	b.n	14ee <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
    158a:	2300      	movs	r3, #0
    158c:	e7bc      	b.n	1508 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>
    158e:	2300      	movs	r3, #0
    1590:	e7ba      	b.n	1508 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>
    1592:	2300      	movs	r3, #0
    1594:	e7c2      	b.n	151c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    1596:	2300      	movs	r3, #0
    1598:	e7c0      	b.n	151c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    159a:	2000      	movs	r0, #0
    159c:	e7c8      	b.n	1530 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    159e:	2000      	movs	r0, #0
    15a0:	e7c6      	b.n	1530 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    15a2:	2301      	movs	r3, #1
    15a4:	e7d0      	b.n	1548 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
    15a6:	2301      	movs	r3, #1
    15a8:	e7ce      	b.n	1548 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
    }
    case BuiltinOperator_WHILE: {
      auto params = safe_allocator.Allocate<TfLiteWhileParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    15aa:	2301      	movs	r3, #1
    15ac:	e7d5      	b.n	155a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
    return data_ - ReadScalar<soffset_t>(data_);
    15ae:	2301      	movs	r3, #1
    15b0:	e7d3      	b.n	155a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    15b2:	bf00      	nop
    15b4:	0000136d 	.word	0x0000136d
    15b8:	0000135d 	.word	0x0000135d
  }
  const tflite::WhileOptions *builtin_options_as_WhileOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_WhileOptions ? static_cast<const tflite::WhileOptions *>(builtin_options()) : nullptr;
    15bc:	00001335 	.word	0x00001335
    15c0:	0003ad20 	.word	0x0003ad20
    15c4:	0003accc 	.word	0x0003accc
    auto p = data_ + field_offset;
    15c8:	0003ad08 	.word	0x0003ad08
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    15cc:	00001317 	.word	0x00001317

000015d0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
      if (const auto* while_params = op->builtin_options_as_WhileOptions()) {
    15d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return data_ - ReadScalar<soffset_t>(data_);
    15d4:	b082      	sub	sp, #8
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    15d6:	4604      	mov	r4, r0
    15d8:	4689      	mov	r9, r1
    15da:	4690      	mov	r8, r2
    15dc:	469a      	mov	sl, r3
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    15de:	4d41      	ldr	r5, [pc, #260]	; (16e4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x114>)
    15e0:	47a8      	blx	r5
        params->cond_subgraph_index = while_params->cond_subgraph_index();
    15e2:	f8d8 3000 	ldr.w	r3, [r8]
    return data_ - ReadScalar<soffset_t>(data_);
    15e6:	681b      	ldr	r3, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    15e8:	2201      	movs	r2, #1
    15ea:	2104      	movs	r1, #4
    15ec:	4640      	mov	r0, r8
    15ee:	4798      	blx	r3
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    15f0:	2800      	cmp	r0, #0
    15f2:	d054      	beq.n	169e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
        params->body_subgraph_index = while_params->body_subgraph_index();
    15f4:	4605      	mov	r5, r0
      }
      *builtin_data = params.release();
    15f6:	6823      	ldr	r3, [r4, #0]
      return kTfLiteOk;
    15f8:	1ae3      	subs	r3, r4, r3
    15fa:	881a      	ldrh	r2, [r3, #0]
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    15fc:	2a0a      	cmp	r2, #10
    15fe:	dd69      	ble.n	16d4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    1600:	8959      	ldrh	r1, [r3, #10]
    1602:	2900      	cmp	r1, #0
    1604:	d066      	beq.n	16d4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    1606:	5c61      	ldrb	r1, [r4, r1]
    1608:	2908      	cmp	r1, #8
    160a:	d163      	bne.n	16d4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    160c:	2a0c      	cmp	r2, #12
    160e:	dd61      	ble.n	16d4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    1610:	899b      	ldrh	r3, [r3, #12]
    1612:	18e7      	adds	r7, r4, r3
    1614:	2b00      	cmp	r3, #0
    1616:	d05d      	beq.n	16d4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    1618:	58e6      	ldr	r6, [r4, r3]
    161a:	19bc      	adds	r4, r7, r6
    161c:	d05a      	beq.n	16d4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    161e:	59bb      	ldr	r3, [r7, r6]
    1620:	1ae3      	subs	r3, r4, r3
    1622:	881a      	ldrh	r2, [r3, #0]
    1624:	2a04      	cmp	r2, #4
    1626:	dd47      	ble.n	16b8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe8>
    1628:	889b      	ldrh	r3, [r3, #4]
    162a:	2b00      	cmp	r3, #0
    162c:	d046      	beq.n	16bc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xec>
    162e:	56e0      	ldrsb	r0, [r4, r3]
    1630:	b2c0      	uxtb	r0, r0
    }
    case BuiltinOperator_BATCH_MATMUL: {
      auto params = safe_allocator.Allocate<TfLiteBatchMatMulParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    1632:	4b2d      	ldr	r3, [pc, #180]	; (16e8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>)
    1634:	4798      	blx	r3
    1636:	7028      	strb	r0, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    1638:	59bb      	ldr	r3, [r7, r6]
    163a:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    163c:	881a      	ldrh	r2, [r3, #0]
    163e:	2a08      	cmp	r2, #8
    1640:	dd3e      	ble.n	16c0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>
    1642:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1644:	2b00      	cmp	r3, #0
  }
  const tflite::SegmentSumOptions *builtin_options_as_SegmentSumOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_SegmentSumOptions ? static_cast<const tflite::SegmentSumOptions *>(builtin_options()) : nullptr;
  }
  const tflite::BatchMatMulOptions *builtin_options_as_BatchMatMulOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_BatchMatMulOptions ? static_cast<const tflite::BatchMatMulOptions *>(builtin_options()) : nullptr;
    1646:	d03d      	beq.n	16c4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>
    1648:	5ce3      	ldrb	r3, [r4, r3]
    164a:	3300      	adds	r3, #0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    164c:	bf18      	it	ne
    164e:	2301      	movne	r3, #1
    1650:	70ab      	strb	r3, [r5, #2]
    auto p = data_ + field_offset;
    1652:	59bb      	ldr	r3, [r7, r6]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    1654:	1ae3      	subs	r3, r4, r3
    1656:	881a      	ldrh	r2, [r3, #0]
      if (const auto* bmm_params =
    1658:	2a0a      	cmp	r2, #10
    165a:	dd35      	ble.n	16c8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
    return data_ - ReadScalar<soffset_t>(data_);
    165c:	895b      	ldrh	r3, [r3, #10]
    165e:	2b00      	cmp	r3, #0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1660:	d034      	beq.n	16cc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfc>
    1662:	5ce3      	ldrb	r3, [r4, r3]
    1664:	3300      	adds	r3, #0
    1666:	bf18      	it	ne
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1668:	2301      	movne	r3, #1
    166a:	70eb      	strb	r3, [r5, #3]
    return GetField<uint8_t>(VT_ADJ_X, 0) != 0;
    166c:	59bb      	ldr	r3, [r7, r6]
    166e:	1ae3      	subs	r3, r4, r3
    1670:	881a      	ldrh	r2, [r3, #0]
    1672:	2a06      	cmp	r2, #6
    return data_ - ReadScalar<soffset_t>(data_);
    1674:	dd2c      	ble.n	16d0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x100>
    1676:	88db      	ldrh	r3, [r3, #6]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1678:	b353      	cbz	r3, 16d0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x100>
    167a:	56e3      	ldrsb	r3, [r4, r3]
    167c:	b343      	cbz	r3, 16d0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x100>
    167e:	2b01      	cmp	r3, #1
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1680:	d02c      	beq.n	16dc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10c>
    1682:	491a      	ldr	r1, [pc, #104]	; (16ec <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>)
    return GetField<uint8_t>(VT_ADJ_Y, 0) != 0;
    1684:	4648      	mov	r0, r9
    1686:	4b1a      	ldr	r3, [pc, #104]	; (16f0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>)
    1688:	4798      	blx	r3
    168a:	f8d8 3000 	ldr.w	r3, [r8]
              op->builtin_options_as_BatchMatMulOptions()) {
        params->adj_x = bmm_params->adj_x();
        params->adj_y = bmm_params->adj_y();
      }
      *builtin_data = params.release();
      return kTfLiteOk;
    168e:	685b      	ldr	r3, [r3, #4]
    1690:	4629      	mov	r1, r5
    1692:	4640      	mov	r0, r8
    1694:	4798      	blx	r3
    1696:	2001      	movs	r0, #1
    1698:	b002      	add	sp, #8
    169a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    169e:	4b15      	ldr	r3, [pc, #84]	; (16f4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>)
    16a0:	9301      	str	r3, [sp, #4]
    16a2:	f240 434f 	movw	r3, #1103	; 0x44f
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    16a6:	9300      	str	r3, [sp, #0]
    16a8:	4b13      	ldr	r3, [pc, #76]	; (16f8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x128>)
    16aa:	4a14      	ldr	r2, [pc, #80]	; (16fc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
    16ac:	4649      	mov	r1, r9
    16ae:	4648      	mov	r0, r9
    16b0:	4c13      	ldr	r4, [pc, #76]	; (1700 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
    16b2:	47a0      	blx	r4
    16b4:	2001      	movs	r0, #1
    16b6:	e7ef      	b.n	1698 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
    16b8:	2000      	movs	r0, #0
    16ba:	e7b9      	b.n	1630 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
    16bc:	2000      	movs	r0, #0
    16be:	e7b7      	b.n	1630 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
    16c0:	2300      	movs	r3, #0
    16c2:	e7c2      	b.n	164a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7a>
    16c4:	2300      	movs	r3, #0
    16c6:	e7c0      	b.n	164a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7a>
    16c8:	2300      	movs	r3, #0
    16ca:	e7cb      	b.n	1664 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>
    16cc:	2300      	movs	r3, #0
      return kTfLiteOk;
    16ce:	e7c9      	b.n	1664 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>
  return kTfLiteError;
#else
  return ParseOpDataTfLite(op, op_type, error_reporter, allocator,
                           builtin_data);
#endif
}
    16d0:	2300      	movs	r3, #0
    16d2:	706b      	strb	r3, [r5, #1]
    16d4:	f8ca 5000 	str.w	r5, [sl]
    void operator()(void* data) { allocator_->Deallocate(data); }
    16d8:	2000      	movs	r0, #0
    16da:	e7dd      	b.n	1698 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
    16dc:	2301      	movs	r3, #1
    16de:	706b      	strb	r3, [r5, #1]
    16e0:	e7f8      	b.n	16d4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    16e2:	bf00      	nop
    16e4:	0000136d 	.word	0x0000136d
    16e8:	00001335 	.word	0x00001335
    16ec:	0003ad34 	.word	0x0003ad34
                           builtin_data);
    16f0:	000012f9 	.word	0x000012f9
    16f4:	0003ad20 	.word	0x0003ad20
    16f8:	0003accc 	.word	0x0003accc
    16fc:	0003ad08 	.word	0x0003ad08
        break;
    1700:	00001317 	.word	0x00001317

00001704 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                       BuiltinDataAllocator* allocator, void** builtin_data) {
    1704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1708:	b082      	sub	sp, #8
    170a:	4604      	mov	r4, r0
    170c:	460f      	mov	r7, r1
    170e:	4615      	mov	r5, r2
    1710:	4698      	mov	r8, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    1712:	4e45      	ldr	r6, [pc, #276]	; (1828 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>)
    1714:	47b0      	blx	r6
    1716:	682b      	ldr	r3, [r5, #0]
    1718:	681b      	ldr	r3, [r3, #0]
    171a:	2204      	movs	r2, #4
    171c:	2128      	movs	r1, #40	; 0x28
    171e:	4628      	mov	r0, r5
    1720:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    1722:	2800      	cmp	r0, #0
    1724:	d05b      	beq.n	17de <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xda>
    1726:	4606      	mov	r6, r0
    return data_ - ReadScalar<soffset_t>(data_);
    1728:	6823      	ldr	r3, [r4, #0]
    172a:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    172c:	881a      	ldrh	r2, [r3, #0]
    172e:	2a0a      	cmp	r2, #10
    1730:	dd4f      	ble.n	17d2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    1732:	8959      	ldrh	r1, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1734:	2900      	cmp	r1, #0
    1736:	d04c      	beq.n	17d2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
    1738:	5c61      	ldrb	r1, [r4, r1]
    173a:	2905      	cmp	r1, #5
    173c:	d149      	bne.n	17d2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    173e:	2a0c      	cmp	r2, #12
    1740:	dd47      	ble.n	17d2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    1742:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
    1744:	18e7      	adds	r7, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    1746:	2b00      	cmp	r3, #0
    1748:	d043      	beq.n	17d2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    174a:	58e5      	ldr	r5, [r4, r3]
  if (schema_params != nullptr) {
    174c:	197c      	adds	r4, r7, r5
    174e:	d040      	beq.n	17d2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    return data_ - ReadScalar<soffset_t>(data_);
    1750:	597b      	ldr	r3, [r7, r5]
    1752:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1754:	881a      	ldrh	r2, [r3, #0]
    1756:	2a04      	cmp	r2, #4
    1758:	dd4e      	ble.n	17f8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>
    175a:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    175c:	2b00      	cmp	r3, #0
    175e:	d04d      	beq.n	17fc <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
    1760:	56e0      	ldrsb	r0, [r4, r3]
    params->padding = ConvertPadding(schema_params->padding());
    1762:	b2c0      	uxtb	r0, r0
    1764:	4b31      	ldr	r3, [pc, #196]	; (182c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x128>)
    1766:	4798      	blx	r3
    1768:	7030      	strb	r0, [r6, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    176a:	597b      	ldr	r3, [r7, r5]
    176c:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    176e:	881a      	ldrh	r2, [r3, #0]
    1770:	2a06      	cmp	r2, #6
    1772:	dd45      	ble.n	1800 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfc>
    1774:	88db      	ldrh	r3, [r3, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1776:	2b00      	cmp	r3, #0
    1778:	d044      	beq.n	1804 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x100>
    177a:	58e3      	ldr	r3, [r4, r3]
    params->stride_width = schema_params->stride_w();
    177c:	6073      	str	r3, [r6, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    177e:	597b      	ldr	r3, [r7, r5]
    1780:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1782:	881a      	ldrh	r2, [r3, #0]
    1784:	2a08      	cmp	r2, #8
    1786:	dd3f      	ble.n	1808 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    1788:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    178a:	2b00      	cmp	r3, #0
    178c:	d03e      	beq.n	180c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x108>
    178e:	58e3      	ldr	r3, [r4, r3]
    params->stride_height = schema_params->stride_h();
    1790:	60b3      	str	r3, [r6, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    1792:	597b      	ldr	r3, [r7, r5]
    1794:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1796:	881a      	ldrh	r2, [r3, #0]
    1798:	2a0a      	cmp	r2, #10
    179a:	dd39      	ble.n	1810 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10c>
    179c:	895b      	ldrh	r3, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    179e:	2b00      	cmp	r3, #0
    17a0:	d038      	beq.n	1814 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x110>
    17a2:	58e3      	ldr	r3, [r4, r3]
    params->filter_width = schema_params->filter_width();
    17a4:	60f3      	str	r3, [r6, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    17a6:	597b      	ldr	r3, [r7, r5]
    17a8:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    17aa:	881a      	ldrh	r2, [r3, #0]
    17ac:	2a0c      	cmp	r2, #12
    17ae:	dd33      	ble.n	1818 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x114>
    17b0:	899b      	ldrh	r3, [r3, #12]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    17b2:	2b00      	cmp	r3, #0
    17b4:	d032      	beq.n	181c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>
    17b6:	58e3      	ldr	r3, [r4, r3]
    params->filter_height = schema_params->filter_height();
    17b8:	6133      	str	r3, [r6, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    17ba:	597b      	ldr	r3, [r7, r5]
    17bc:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    17be:	881a      	ldrh	r2, [r3, #0]
    17c0:	2a0e      	cmp	r2, #14
    17c2:	dd2d      	ble.n	1820 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>
    17c4:	89db      	ldrh	r3, [r3, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    17c6:	b36b      	cbz	r3, 1824 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>
    17c8:	56e0      	ldrsb	r0, [r4, r3]
        ConvertActivation(schema_params->fused_activation_function());
    17ca:	b2c0      	uxtb	r0, r0
    17cc:	4b18      	ldr	r3, [pc, #96]	; (1830 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
    17ce:	4798      	blx	r3
    params->activation =
    17d0:	7530      	strb	r0, [r6, #20]
  *builtin_data = params.release();
    17d2:	f8c8 6000 	str.w	r6, [r8]
  return kTfLiteOk;
    17d6:	2000      	movs	r0, #0
}
    17d8:	b002      	add	sp, #8
    17da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    17de:	4b15      	ldr	r3, [pc, #84]	; (1834 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
    17e0:	9301      	str	r3, [sp, #4]
    17e2:	f240 5346 	movw	r3, #1350	; 0x546
    17e6:	9300      	str	r3, [sp, #0]
    17e8:	4b13      	ldr	r3, [pc, #76]	; (1838 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
    17ea:	4a14      	ldr	r2, [pc, #80]	; (183c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
    17ec:	4639      	mov	r1, r7
    17ee:	4638      	mov	r0, r7
    17f0:	4c13      	ldr	r4, [pc, #76]	; (1840 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
    17f2:	47a0      	blx	r4
    17f4:	2001      	movs	r0, #1
    17f6:	e7ef      	b.n	17d8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
    17f8:	2000      	movs	r0, #0
    17fa:	e7b2      	b.n	1762 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
    17fc:	2000      	movs	r0, #0
    17fe:	e7b0      	b.n	1762 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
    1800:	2300      	movs	r3, #0
    1802:	e7bb      	b.n	177c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>
    1804:	2300      	movs	r3, #0
    1806:	e7b9      	b.n	177c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>
    1808:	2300      	movs	r3, #0
    180a:	e7c1      	b.n	1790 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    180c:	2300      	movs	r3, #0
    180e:	e7bf      	b.n	1790 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    1810:	2300      	movs	r3, #0
    1812:	e7c7      	b.n	17a4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    1814:	2300      	movs	r3, #0
    1816:	e7c5      	b.n	17a4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    1818:	2300      	movs	r3, #0
    181a:	e7cd      	b.n	17b8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb4>
    181c:	2300      	movs	r3, #0
    181e:	e7cb      	b.n	17b8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb4>
    1820:	2000      	movs	r0, #0
    1822:	e7d2      	b.n	17ca <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    1824:	2000      	movs	r0, #0
    1826:	e7d0      	b.n	17ca <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    1828:	0000136d 	.word	0x0000136d
    182c:	0000135d 	.word	0x0000135d
    1830:	00001335 	.word	0x00001335
    1834:	0003ad20 	.word	0x0003ad20
    1838:	0003accc 	.word	0x0003accc
    183c:	0003ad08 	.word	0x0003ad08
    1840:	00001317 	.word	0x00001317

00001844 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                          void** builtin_data) {
    1844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1848:	b082      	sub	sp, #8
    184a:	4605      	mov	r5, r0
    184c:	4688      	mov	r8, r1
    184e:	4614      	mov	r4, r2
    1850:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    1852:	4e27      	ldr	r6, [pc, #156]	; (18f0 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xac>)
    1854:	47b0      	blx	r6
    1856:	6823      	ldr	r3, [r4, #0]
    1858:	681b      	ldr	r3, [r3, #0]
    185a:	2204      	movs	r2, #4
    185c:	2124      	movs	r1, #36	; 0x24
    185e:	4620      	mov	r0, r4
    1860:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    1862:	b378      	cbz	r0, 18c4 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x80>
    1864:	4606      	mov	r6, r0
    return data_ - ReadScalar<soffset_t>(data_);
    1866:	682b      	ldr	r3, [r5, #0]
    1868:	1aeb      	subs	r3, r5, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    186a:	881a      	ldrh	r2, [r3, #0]
    186c:	2a0a      	cmp	r2, #10
    186e:	dd26      	ble.n	18be <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7a>
    1870:	8959      	ldrh	r1, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1872:	b321      	cbz	r1, 18be <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7a>
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
    1874:	5c69      	ldrb	r1, [r5, r1]
    1876:	2911      	cmp	r1, #17
    1878:	d121      	bne.n	18be <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    187a:	2a0c      	cmp	r2, #12
    187c:	dd1f      	ble.n	18be <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7a>
    187e:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
    1880:	18e9      	adds	r1, r5, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    1882:	b1e3      	cbz	r3, 18be <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7a>
    1884:	58eb      	ldr	r3, [r5, r3]
  if (schema_params != nullptr) {
    1886:	18ca      	adds	r2, r1, r3
    1888:	d019      	beq.n	18be <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7a>
    return data_ - ReadScalar<soffset_t>(data_);
    188a:	58cb      	ldr	r3, [r1, r3]
    188c:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    188e:	8819      	ldrh	r1, [r3, #0]
    1890:	2904      	cmp	r1, #4
    1892:	dd14      	ble.n	18be <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7a>
    1894:	889b      	ldrh	r3, [r3, #4]
    auto p = data_ + field_offset;
    1896:	eb02 0a03 	add.w	sl, r2, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    189a:	b183      	cbz	r3, 18be <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7a>
    189c:	f852 9003 	ldr.w	r9, [r2, r3]
    if (new_shape != nullptr) {
    18a0:	eb1a 0109 	adds.w	r1, sl, r9
    18a4:	d00b      	beq.n	18be <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7a>
      TF_LITE_ENSURE_STATUS(
    18a6:	4b13      	ldr	r3, [pc, #76]	; (18f4 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>)
    18a8:	9300      	str	r3, [sp, #0]
    18aa:	4643      	mov	r3, r8
    18ac:	4602      	mov	r2, r0
    18ae:	2020      	movs	r0, #32
    18b0:	4d11      	ldr	r5, [pc, #68]	; (18f8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb4>)
    18b2:	47a8      	blx	r5
    18b4:	4605      	mov	r5, r0
    18b6:	b990      	cbnz	r0, 18de <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9a>
      params->num_dimensions = new_shape->size();
    18b8:	f85a 3009 	ldr.w	r3, [sl, r9]
    18bc:	6233      	str	r3, [r6, #32]
  *builtin_data = params.release();
    18be:	603e      	str	r6, [r7, #0]
  return kTfLiteOk;
    18c0:	2000      	movs	r0, #0
    18c2:	e012      	b.n	18ea <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    18c4:	4b0d      	ldr	r3, [pc, #52]	; (18fc <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
    18c6:	9301      	str	r3, [sp, #4]
    18c8:	f44f 63b4 	mov.w	r3, #1440	; 0x5a0
    18cc:	9300      	str	r3, [sp, #0]
    18ce:	4b0c      	ldr	r3, [pc, #48]	; (1900 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
    18d0:	4a0c      	ldr	r2, [pc, #48]	; (1904 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
    18d2:	4641      	mov	r1, r8
    18d4:	4640      	mov	r0, r8
    18d6:	4c0c      	ldr	r4, [pc, #48]	; (1908 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc4>)
    18d8:	47a0      	blx	r4
    18da:	2001      	movs	r0, #1
    18dc:	e005      	b.n	18ea <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    void operator()(void* data) { allocator_->Deallocate(data); }
    18de:	6823      	ldr	r3, [r4, #0]
    18e0:	685b      	ldr	r3, [r3, #4]
    18e2:	4631      	mov	r1, r6
    18e4:	4620      	mov	r0, r4
    18e6:	4798      	blx	r3
      TF_LITE_ENSURE_STATUS(
    18e8:	4628      	mov	r0, r5
}
    18ea:	b002      	add	sp, #8
    18ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    18f0:	0000136d 	.word	0x0000136d
    18f4:	0003ad60 	.word	0x0003ad60
    18f8:	0000138d 	.word	0x0000138d
    18fc:	0003ad20 	.word	0x0003ad20
    1900:	0003accc 	.word	0x0003accc
    1904:	0003ad08 	.word	0x0003ad08
    1908:	00001317 	.word	0x00001317

0000190c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                          void** builtin_data) {
    190c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1910:	b082      	sub	sp, #8
    1912:	4604      	mov	r4, r0
    1914:	4688      	mov	r8, r1
    1916:	4615      	mov	r5, r2
    1918:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    191a:	4f1d      	ldr	r7, [pc, #116]	; (1990 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>)
    191c:	47b8      	blx	r7
    191e:	682b      	ldr	r3, [r5, #0]
    1920:	681b      	ldr	r3, [r3, #0]
    1922:	2204      	movs	r2, #4
    1924:	4611      	mov	r1, r2
    1926:	4628      	mov	r0, r5
    1928:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    192a:	b300      	cbz	r0, 196e <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x62>
    192c:	4602      	mov	r2, r0
    return data_ - ReadScalar<soffset_t>(data_);
    192e:	6823      	ldr	r3, [r4, #0]
    1930:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1932:	8819      	ldrh	r1, [r3, #0]
    1934:	290a      	cmp	r1, #10
    1936:	dd15      	ble.n	1964 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    1938:	8958      	ldrh	r0, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    193a:	b198      	cbz	r0, 1964 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
    193c:	5c20      	ldrb	r0, [r4, r0]
    193e:	2809      	cmp	r0, #9
    1940:	d110      	bne.n	1964 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1942:	290c      	cmp	r1, #12
    1944:	dd0e      	ble.n	1964 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    1946:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
    1948:	18e1      	adds	r1, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    194a:	b15b      	cbz	r3, 1964 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    194c:	58e3      	ldr	r3, [r4, r3]
  if (schema_params != nullptr) {
    194e:	18c8      	adds	r0, r1, r3
    1950:	d008      	beq.n	1964 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    return data_ - ReadScalar<soffset_t>(data_);
    1952:	58cb      	ldr	r3, [r1, r3]
    1954:	1ac3      	subs	r3, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1956:	8819      	ldrh	r1, [r3, #0]
    1958:	2904      	cmp	r1, #4
    195a:	dd15      	ble.n	1988 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7c>
    195c:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    195e:	b1ab      	cbz	r3, 198c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x80>
    1960:	58c3      	ldr	r3, [r0, r3]
    params->beta = schema_params->beta();
    1962:	6013      	str	r3, [r2, #0]
  *builtin_data = params.release();
    1964:	6032      	str	r2, [r6, #0]
  return kTfLiteOk;
    1966:	2000      	movs	r0, #0
}
    1968:	b002      	add	sp, #8
    196a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    196e:	4b09      	ldr	r3, [pc, #36]	; (1994 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>)
    1970:	9301      	str	r3, [sp, #4]
    1972:	f240 53fa 	movw	r3, #1530	; 0x5fa
    1976:	9300      	str	r3, [sp, #0]
    1978:	4b07      	ldr	r3, [pc, #28]	; (1998 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>)
    197a:	4a08      	ldr	r2, [pc, #32]	; (199c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>)
    197c:	4641      	mov	r1, r8
    197e:	4640      	mov	r0, r8
    1980:	4c07      	ldr	r4, [pc, #28]	; (19a0 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>)
    1982:	47a0      	blx	r4
    1984:	2001      	movs	r0, #1
    1986:	e7ef      	b.n	1968 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>
    1988:	2300      	movs	r3, #0
    198a:	e7ea      	b.n	1962 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x56>
    198c:	2300      	movs	r3, #0
    198e:	e7e8      	b.n	1962 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x56>
    1990:	0000136d 	.word	0x0000136d
    1994:	0003ad20 	.word	0x0003ad20
    1998:	0003accc 	.word	0x0003accc
    199c:	0003ad08 	.word	0x0003ad08
    19a0:	00001317 	.word	0x00001317

000019a4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
    19a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    19a8:	460e      	mov	r6, r1
    19aa:	4617      	mov	r7, r2
    19ac:	461d      	mov	r5, r3
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
    19ae:	2300      	movs	r3, #0
    19b0:	602b      	str	r3, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    19b2:	6803      	ldr	r3, [r0, #0]
    19b4:	1ac3      	subs	r3, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    19b6:	881a      	ldrh	r2, [r3, #0]
    19b8:	2a04      	cmp	r2, #4
    19ba:	dd41      	ble.n	1a40 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9c>
    19bc:	8899      	ldrh	r1, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    19be:	2900      	cmp	r1, #0
    19c0:	d03e      	beq.n	1a40 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9c>
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
    19c2:	5c44      	ldrb	r4, [r0, r1]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    19c4:	2a08      	cmp	r2, #8
    19c6:	dd1b      	ble.n	1a00 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5c>
    19c8:	8919      	ldrh	r1, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    19ca:	b1e1      	cbz	r1, 1a06 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x62>
    19cc:	f850 8001 	ldr.w	r8, [r0, r1]
  auto builtin_code = opcode->builtin_code();
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX ||
    19d0:	2c7e      	cmp	r4, #126	; 0x7e
    19d2:	dc1b      	bgt.n	1a0c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x68>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
    19d4:	2c20      	cmp	r4, #32
    19d6:	d13a      	bne.n	1a4e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xaa>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    19d8:	2a06      	cmp	r2, #6
    19da:	dd2a      	ble.n	1a32 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x8e>
    19dc:	88db      	ldrh	r3, [r3, #6]
    auto p = data_ + field_offset;
    19de:	18c1      	adds	r1, r0, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    19e0:	b33b      	cbz	r3, 1a32 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x8e>
    19e2:	58c3      	ldr	r3, [r0, r3]
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
    }
  } else if (!opcode->custom_code()) {
    19e4:	18c9      	adds	r1, r1, r3
    19e6:	d024      	beq.n	1a32 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x8e>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
  } else {
    const char* name = opcode->custom_code()->c_str();
    *registration = op_resolver.FindOp(name, version);
    19e8:	6833      	ldr	r3, [r6, #0]
    19ea:	685b      	ldr	r3, [r3, #4]
    19ec:	4642      	mov	r2, r8
    19ee:	3104      	adds	r1, #4
    19f0:	4630      	mov	r0, r6
    19f2:	4798      	blx	r3
    19f4:	6028      	str	r0, [r5, #0]
    status = kTfLiteError;
    19f6:	fab0 f080 	clz	r0, r0
    19fa:	0940      	lsrs	r0, r0, #5
    19fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1a00:	f04f 0801 	mov.w	r8, #1
    1a04:	e7e4      	b.n	19d0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x2c>
    1a06:	f04f 0801 	mov.w	r8, #1
    1a0a:	e7e1      	b.n	19d0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x2c>
    TF_LITE_REPORT_ERROR(
    1a0c:	4622      	mov	r2, r4
    1a0e:	4916      	ldr	r1, [pc, #88]	; (1a68 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc4>)
    1a10:	4638      	mov	r0, r7
    1a12:	4b16      	ldr	r3, [pc, #88]	; (1a6c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc8>)
    1a14:	4798      	blx	r3
    status = kTfLiteError;
    1a16:	2001      	movs	r0, #1
    1a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      TF_LITE_REPORT_ERROR(
    1a1c:	4643      	mov	r3, r8
    1a1e:	4a14      	ldr	r2, [pc, #80]	; (1a70 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xcc>)
    1a20:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    1a24:	4913      	ldr	r1, [pc, #76]	; (1a74 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd0>)
    1a26:	4638      	mov	r0, r7
    1a28:	4c10      	ldr	r4, [pc, #64]	; (1a6c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc8>)
    1a2a:	47a0      	blx	r4
      status = kTfLiteError;
    1a2c:	2001      	movs	r0, #1
    1a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TF_LITE_REPORT_ERROR(
    1a32:	4911      	ldr	r1, [pc, #68]	; (1a78 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>)
    1a34:	4638      	mov	r0, r7
    1a36:	4b0d      	ldr	r3, [pc, #52]	; (1a6c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc8>)
    1a38:	4798      	blx	r3
    status = kTfLiteError;
    1a3a:	2001      	movs	r0, #1
    1a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1a40:	2a08      	cmp	r2, #8
    1a42:	dd01      	ble.n	1a48 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa4>
    1a44:	2400      	movs	r4, #0
    1a46:	e7bf      	b.n	19c8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x24>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1a48:	f04f 0801 	mov.w	r8, #1
    1a4c:	2400      	movs	r4, #0
    *registration = op_resolver.FindOp(builtin_code, version);
    1a4e:	6833      	ldr	r3, [r6, #0]
    1a50:	681b      	ldr	r3, [r3, #0]
    1a52:	4642      	mov	r2, r8
    1a54:	4621      	mov	r1, r4
    1a56:	4630      	mov	r0, r6
    1a58:	4798      	blx	r3
    1a5a:	6028      	str	r0, [r5, #0]
    if (*registration == nullptr) {
    1a5c:	2800      	cmp	r0, #0
    1a5e:	d0dd      	beq.n	1a1c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x78>
  TfLiteStatus status = kTfLiteOk;
    1a60:	2000      	movs	r0, #0
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
    1a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a66:	bf00      	nop
    1a68:	0003afdc 	.word	0x0003afdc
    1a6c:	000012f9 	.word	0x000012f9
    1a70:	0003addc 	.word	0x0003addc
    1a74:	0003b030 	.word	0x0003b030
    1a78:	0003b068 	.word	0x0003b068

00001a7c <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>:
#include "tensorflow/lite/c/common.h"

namespace tflite {

TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
  if (!tensor->is_variable) {
    1a7c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    1a80:	b193      	cbz	r3, 1aa8 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x2c>
TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
    1a82:	b430      	push	{r4, r5}
    return kTfLiteOk;
  }
  // TODO(b/115961645): Implement - If a variable tensor has a buffer, reset it
  // to the value of the buffer.
  int value = 0;
  if (tensor->type == kTfLiteInt8) {
    1a84:	7803      	ldrb	r3, [r0, #0]
    1a86:	2b09      	cmp	r3, #9
    value = tensor->params.zero_point;
    1a88:	bf0c      	ite	eq
    1a8a:	6905      	ldreq	r5, [r0, #16]
  int value = 0;
    1a8c:	2500      	movne	r5, #0
#if __ANDROID__ || defined(__x86_64__) || defined(__i386__) || \
    defined(__i386) || defined(__x86__) || defined(__X86__) || \
    defined(_X86_) || defined(_M_IX86) || defined(_M_X64)
  memset(tensor->data.raw, value, tensor->bytes);
#else
  char* raw_ptr = tensor->data.raw;
    1a8e:	6844      	ldr	r4, [r0, #4]
  for (size_t i = 0; i < tensor->bytes; ++i) {
    1a90:	6983      	ldr	r3, [r0, #24]
    1a92:	b133      	cbz	r3, 1aa2 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x26>
    1a94:	4623      	mov	r3, r4
    *raw_ptr = value;
    1a96:	f803 5b01 	strb.w	r5, [r3], #1
  for (size_t i = 0; i < tensor->bytes; ++i) {
    1a9a:	1b1a      	subs	r2, r3, r4
    1a9c:	6981      	ldr	r1, [r0, #24]
    1a9e:	4291      	cmp	r1, r2
    1aa0:	d8f9      	bhi.n	1a96 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x1a>
    raw_ptr++;
  }
#endif
  return kTfLiteOk;
}
    1aa2:	2000      	movs	r0, #0
    1aa4:	bc30      	pop	{r4, r5}
    1aa6:	4770      	bx	lr
    1aa8:	2000      	movs	r0, #0
    1aaa:	4770      	bx	lr

00001aac <TfLiteIntArrayGetSizeInBytes>:
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
    1aac:	3001      	adds	r0, #1
}
    1aae:	0080      	lsls	r0, r0, #2
    1ab0:	4770      	bx	lr
	...

00001ab4 <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
    1ab4:	280b      	cmp	r0, #11
    1ab6:	d81d      	bhi.n	1af4 <TfLiteTypeGetName+0x40>
    1ab8:	e8df f000 	tbb	[pc, r0]
    1abc:	0c0a061e 	.word	0x0c0a061e
    1ac0:	08121610 	.word	0x08121610
    1ac4:	1a180e14 	.word	0x1a180e14
    case kTfLiteNoType:
      return "NOTYPE";
    case kTfLiteFloat32:
      return "FLOAT32";
    1ac8:	480c      	ldr	r0, [pc, #48]	; (1afc <TfLiteTypeGetName+0x48>)
    1aca:	4770      	bx	lr
    case kTfLiteInt16:
      return "INT16";
    1acc:	480c      	ldr	r0, [pc, #48]	; (1b00 <TfLiteTypeGetName+0x4c>)
    1ace:	4770      	bx	lr
    case kTfLiteInt32:
      return "INT32";
    1ad0:	480c      	ldr	r0, [pc, #48]	; (1b04 <TfLiteTypeGetName+0x50>)
    1ad2:	4770      	bx	lr
    case kTfLiteUInt8:
      return "UINT8";
    1ad4:	480c      	ldr	r0, [pc, #48]	; (1b08 <TfLiteTypeGetName+0x54>)
    1ad6:	4770      	bx	lr
    case kTfLiteInt8:
      return "INT8";
    1ad8:	480c      	ldr	r0, [pc, #48]	; (1b0c <TfLiteTypeGetName+0x58>)
    1ada:	4770      	bx	lr
    case kTfLiteInt64:
      return "INT64";
    1adc:	480c      	ldr	r0, [pc, #48]	; (1b10 <TfLiteTypeGetName+0x5c>)
    1ade:	4770      	bx	lr
    case kTfLiteBool:
      return "BOOL";
    1ae0:	480c      	ldr	r0, [pc, #48]	; (1b14 <TfLiteTypeGetName+0x60>)
    1ae2:	4770      	bx	lr
    case kTfLiteComplex64:
      return "COMPLEX64";
    1ae4:	480c      	ldr	r0, [pc, #48]	; (1b18 <TfLiteTypeGetName+0x64>)
    1ae6:	4770      	bx	lr
    case kTfLiteString:
      return "STRING";
    1ae8:	480c      	ldr	r0, [pc, #48]	; (1b1c <TfLiteTypeGetName+0x68>)
    1aea:	4770      	bx	lr
    case kTfLiteFloat16:
      return "FLOAT16";
    1aec:	480c      	ldr	r0, [pc, #48]	; (1b20 <TfLiteTypeGetName+0x6c>)
    1aee:	4770      	bx	lr
    case kTfLiteFloat64:
      return "FLOAT64";
    1af0:	480c      	ldr	r0, [pc, #48]	; (1b24 <TfLiteTypeGetName+0x70>)
    1af2:	4770      	bx	lr
  }
  return "Unknown type";
    1af4:	480c      	ldr	r0, [pc, #48]	; (1b28 <TfLiteTypeGetName+0x74>)
    1af6:	4770      	bx	lr
      return "NOTYPE";
    1af8:	480c      	ldr	r0, [pc, #48]	; (1b2c <TfLiteTypeGetName+0x78>)
}
    1afa:	4770      	bx	lr
    1afc:	0003b640 	.word	0x0003b640
    1b00:	0003b648 	.word	0x0003b648
    1b04:	0003b650 	.word	0x0003b650
    1b08:	0003b658 	.word	0x0003b658
    1b0c:	0003b660 	.word	0x0003b660
    1b10:	0003b668 	.word	0x0003b668
    1b14:	0003b670 	.word	0x0003b670
    1b18:	0003b678 	.word	0x0003b678
    1b1c:	0003b684 	.word	0x0003b684
    1b20:	0003b68c 	.word	0x0003b68c
    1b24:	0003b694 	.word	0x0003b694
    1b28:	0003b69c 	.word	0x0003b69c
    1b2c:	0003b638 	.word	0x0003b638

00001b30 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
    1b30:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    1b34:	4680      	mov	r8, r0
    1b36:	4689      	mov	r9, r1
    1b38:	4616      	mov	r6, r2
    1b3a:	461c      	mov	r4, r3
  if (double_multiplier == 0.) {
    1b3c:	2200      	movs	r2, #0
    1b3e:	2300      	movs	r3, #0
    1b40:	4d1c      	ldr	r5, [pc, #112]	; (1bb4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x84>)
    1b42:	47a8      	blx	r5
    1b44:	b120      	cbz	r0, 1b50 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x20>
    *quantized_multiplier = 0;
    1b46:	2300      	movs	r3, #0
    1b48:	6033      	str	r3, [r6, #0]
    *shift = 0;
    1b4a:	6023      	str	r3, [r4, #0]
    return;
    1b4c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
    1b50:	4622      	mov	r2, r4
    1b52:	4640      	mov	r0, r8
    1b54:	4649      	mov	r1, r9
    1b56:	4b18      	ldr	r3, [pc, #96]	; (1bb8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x88>)
    1b58:	4798      	blx	r3
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    1b5a:	2200      	movs	r2, #0
    1b5c:	4b17      	ldr	r3, [pc, #92]	; (1bbc <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8c>)
    1b5e:	4d18      	ldr	r5, [pc, #96]	; (1bc0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x90>)
    1b60:	47a8      	blx	r5
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
    1b62:	4b18      	ldr	r3, [pc, #96]	; (1bc4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x94>)
    1b64:	4798      	blx	r3
    1b66:	4b18      	ldr	r3, [pc, #96]	; (1bc8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x98>)
    1b68:	4798      	blx	r3
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    1b6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1b6e:	2300      	movs	r3, #0
    1b70:	4282      	cmp	r2, r0
    1b72:	418b      	sbcs	r3, r1
    1b74:	db13      	blt.n	1b9e <_ZN6tflite18QuantizeMultiplierEdPlPi+0x6e>
  if (q_fixed == (1ll << 31)) {
    1b76:	2900      	cmp	r1, #0
    1b78:	bf08      	it	eq
    1b7a:	f1b0 4f00 	cmpeq.w	r0, #2147483648	; 0x80000000
    1b7e:	d010      	beq.n	1ba2 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x72>
    q_fixed /= 2;
    ++*shift;
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
    1b80:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    1b84:	f171 0300 	sbcs.w	r3, r1, #0
    1b88:	da11      	bge.n	1bae <_ZN6tflite18QuantizeMultiplierEdPlPi+0x7e>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
    1b8a:	6823      	ldr	r3, [r4, #0]
    1b8c:	f113 0f1f 	cmn.w	r3, #31
    1b90:	da02      	bge.n	1b98 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x68>
    *shift = 0;
    1b92:	2300      	movs	r3, #0
    1b94:	6023      	str	r3, [r4, #0]
    q_fixed = 0;
    1b96:	2000      	movs	r0, #0
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
    1b98:	6030      	str	r0, [r6, #0]
    1b9a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    1b9e:	4b0b      	ldr	r3, [pc, #44]	; (1bcc <_ZN6tflite18QuantizeMultiplierEdPlPi+0x9c>)
    1ba0:	4798      	blx	r3
    ++*shift;
    1ba2:	6823      	ldr	r3, [r4, #0]
    1ba4:	3301      	adds	r3, #1
    1ba6:	6023      	str	r3, [r4, #0]
    q_fixed /= 2;
    1ba8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    1bac:	e7ed      	b.n	1b8a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x5a>
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
    1bae:	4b07      	ldr	r3, [pc, #28]	; (1bcc <_ZN6tflite18QuantizeMultiplierEdPlPi+0x9c>)
    1bb0:	4798      	blx	r3
    1bb2:	bf00      	nop
    1bb4:	00015991 	.word	0x00015991
    1bb8:	00014d11 	.word	0x00014d11
    1bbc:	41e00000 	.word	0x41e00000
    1bc0:	000154c1 	.word	0x000154c1
    1bc4:	00014d75 	.word	0x00014d75
    1bc8:	00016149 	.word	0x00016149
    1bcc:	0001739d 	.word	0x0001739d

00001bd0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:
}

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
    1bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1bd4:	4606      	mov	r6, r0
    1bd6:	460f      	mov	r7, r1
    1bd8:	4690      	mov	r8, r2
    1bda:	461c      	mov	r4, r3
  TFLITE_CHECK_GT(double_multiplier, 1.);
    1bdc:	2200      	movs	r2, #0
    1bde:	4b09      	ldr	r3, [pc, #36]	; (1c04 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x34>)
    1be0:	4d09      	ldr	r5, [pc, #36]	; (1c08 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x38>)
    1be2:	47a8      	blx	r5
    1be4:	b150      	cbz	r0, 1bfc <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x2c>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
    1be6:	4623      	mov	r3, r4
    1be8:	4642      	mov	r2, r8
    1bea:	4630      	mov	r0, r6
    1bec:	4639      	mov	r1, r7
    1bee:	4d07      	ldr	r5, [pc, #28]	; (1c0c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3c>)
    1bf0:	47a8      	blx	r5
  TFLITE_CHECK_GE(*left_shift, 0);
    1bf2:	6823      	ldr	r3, [r4, #0]
    1bf4:	2b00      	cmp	r3, #0
    1bf6:	db03      	blt.n	1c00 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x30>
    1bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_CHECK_GT(double_multiplier, 1.);
    1bfc:	4b04      	ldr	r3, [pc, #16]	; (1c10 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x40>)
    1bfe:	4798      	blx	r3
  TFLITE_CHECK_GE(*left_shift, 0);
    1c00:	4b03      	ldr	r3, [pc, #12]	; (1c10 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x40>)
    1c02:	4798      	blx	r3
    1c04:	3ff00000 	.word	0x3ff00000
    1c08:	000159e1 	.word	0x000159e1
    1c0c:	00001b31 	.word	0x00001b31
    1c10:	0001739d 	.word	0x0001739d
    1c14:	00000000 	.word	0x00000000

00001c18 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
    1c18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c1c:	4682      	mov	sl, r0
    1c1e:	468b      	mov	fp, r1
    1c20:	4616      	mov	r6, r2
    1c22:	461f      	mov	r7, r3
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    1c24:	980a      	ldr	r0, [sp, #40]	; 0x28
    1c26:	f1c0 001f 	rsb	r0, r0, #31
    1c2a:	2301      	movs	r3, #1
    1c2c:	fa03 f000 	lsl.w	r0, r3, r0
    1c30:	4b13      	ldr	r3, [pc, #76]	; (1c80 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x68>)
    1c32:	4798      	blx	r3
    1c34:	4680      	mov	r8, r0
    1c36:	4689      	mov	r9, r1
    1c38:	4c12      	ldr	r4, [pc, #72]	; (1c84 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x6c>)
    1c3a:	4632      	mov	r2, r6
    1c3c:	463b      	mov	r3, r7
    1c3e:	4650      	mov	r0, sl
    1c40:	4659      	mov	r1, fp
    1c42:	47a0      	blx	r4
    1c44:	4602      	mov	r2, r0
    1c46:	460b      	mov	r3, r1
    1c48:	4640      	mov	r0, r8
    1c4a:	4649      	mov	r1, r9
    1c4c:	47a0      	blx	r4
    1c4e:	4604      	mov	r4, r0
    1c50:	460d      	mov	r5, r1
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    1c52:	a309      	add	r3, pc, #36	; (adr r3, 1c78 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x60>)
    1c54:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c58:	4e0b      	ldr	r6, [pc, #44]	; (1c88 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x70>)
    1c5a:	47b0      	blx	r6
    1c5c:	b938      	cbnz	r0, 1c6e <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x56>
	return __b;
      return __a;
    1c5e:	4620      	mov	r0, r4
    1c60:	4629      	mov	r1, r5
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
                                   quantized_multiplier, left_shift);
    1c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1c66:	4c09      	ldr	r4, [pc, #36]	; (1c8c <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x74>)
    1c68:	47a0      	blx	r4
    1c6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return __b;
    1c6e:	a102      	add	r1, pc, #8	; (adr r1, 1c78 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x60>)
    1c70:	e9d1 0100 	ldrd	r0, r1, [r1]
    1c74:	e7f5      	b.n	1c62 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x4a>
    1c76:	bf00      	nop
    1c78:	ffc00000 	.word	0xffc00000
    1c7c:	41dfffff 	.word	0x41dfffff
    1c80:	000153f5 	.word	0x000153f5
    1c84:	000154c1 	.word	0x000154c1
    1c88:	000159e1 	.word	0x000159e1
    1c8c:	00001bd1 	.word	0x00001bd1

00001c90 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
    1c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1c94:	4681      	mov	r9, r0
    1c96:	4688      	mov	r8, r1
    1c98:	4615      	mov	r5, r2
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
    1c9a:	2401      	movs	r4, #1
    1c9c:	fa04 f000 	lsl.w	r0, r4, r0
    1ca0:	3801      	subs	r0, #1
    1ca2:	4b19      	ldr	r3, [pc, #100]	; (1d08 <_ZN6tflite20CalculateInputRadiusEiii+0x78>)
    1ca4:	4798      	blx	r3
    1ca6:	4606      	mov	r6, r0
    1ca8:	460f      	mov	r7, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
    1caa:	eba5 0009 	sub.w	r0, r5, r9
    1cae:	f1a0 0120 	sub.w	r1, r0, #32
    1cb2:	f1c0 0320 	rsb	r3, r0, #32
    1cb6:	fa04 f101 	lsl.w	r1, r4, r1
    1cba:	fa24 f303 	lsr.w	r3, r4, r3
      1.0 * ((1 << input_integer_bits) - 1) *
    1cbe:	4d13      	ldr	r5, [pc, #76]	; (1d0c <_ZN6tflite20CalculateInputRadiusEiii+0x7c>)
    1cc0:	fa04 f000 	lsl.w	r0, r4, r0
    1cc4:	4319      	orrs	r1, r3
    1cc6:	47a8      	blx	r5
    1cc8:	4602      	mov	r2, r0
    1cca:	460b      	mov	r3, r1
    1ccc:	4630      	mov	r0, r6
    1cce:	4639      	mov	r1, r7
    1cd0:	4e0f      	ldr	r6, [pc, #60]	; (1d10 <_ZN6tflite20CalculateInputRadiusEiii+0x80>)
    1cd2:	47b0      	blx	r6
    1cd4:	4606      	mov	r6, r0
    1cd6:	460f      	mov	r7, r1
      (1ll << input_left_shift);
    1cd8:	f1a8 0120 	sub.w	r1, r8, #32
    1cdc:	f1c8 0320 	rsb	r3, r8, #32
    1ce0:	fa04 f101 	lsl.w	r1, r4, r1
    1ce4:	fa24 f303 	lsr.w	r3, r4, r3
      (1ll << (total_signed_bits - input_integer_bits)) /
    1ce8:	fa04 f008 	lsl.w	r0, r4, r8
    1cec:	4319      	orrs	r1, r3
    1cee:	47a8      	blx	r5
      (1ll << input_left_shift);
    1cf0:	4602      	mov	r2, r0
    1cf2:	460b      	mov	r3, r1
    1cf4:	4630      	mov	r0, r6
    1cf6:	4639      	mov	r1, r7
    1cf8:	4c06      	ldr	r4, [pc, #24]	; (1d14 <_ZN6tflite20CalculateInputRadiusEiii+0x84>)
    1cfa:	47a0      	blx	r4
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
    1cfc:	4b06      	ldr	r3, [pc, #24]	; (1d18 <_ZN6tflite20CalculateInputRadiusEiii+0x88>)
    1cfe:	4798      	blx	r3
    1d00:	4b06      	ldr	r3, [pc, #24]	; (1d1c <_ZN6tflite20CalculateInputRadiusEiii+0x8c>)
    1d02:	4798      	blx	r3
#endif  // TFLITE_EMULATE_FLOAT
}
    1d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1d08:	000153f5 	.word	0x000153f5
    1d0c:	00015465 	.word	0x00015465
    1d10:	000154c1 	.word	0x000154c1
    1d14:	00015715 	.word	0x00015715
    1d18:	00014bf9 	.word	0x00014bf9
    1d1c:	000159f5 	.word	0x000159f5

00001d20 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
    1d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d24:	b082      	sub	sp, #8
    1d26:	4680      	mov	r8, r0
    1d28:	4608      	mov	r0, r1
    1d2a:	461d      	mov	r5, r3
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
    1d2c:	68d1      	ldr	r1, [r2, #12]
    1d2e:	68c0      	ldr	r0, [r0, #12]
    1d30:	4b13      	ldr	r3, [pc, #76]	; (1d80 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
    1d32:	4798      	blx	r3
    1d34:	4604      	mov	r4, r0
    1d36:	4b13      	ldr	r3, [pc, #76]	; (1d84 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x64>)
    1d38:	4798      	blx	r3
    1d3a:	4606      	mov	r6, r0
    1d3c:	460f      	mov	r7, r1
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    1d3e:	2100      	movs	r1, #0
    1d40:	4620      	mov	r0, r4
    1d42:	4b11      	ldr	r3, [pc, #68]	; (1d88 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x68>)
    1d44:	4798      	blx	r3
    1d46:	b178      	cbz	r0, 1d68 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x48>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
    1d48:	68e8      	ldr	r0, [r5, #12]
    1d4a:	4b0e      	ldr	r3, [pc, #56]	; (1d84 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x64>)
    1d4c:	4798      	blx	r3
    1d4e:	4602      	mov	r2, r0
    1d50:	460b      	mov	r3, r1
    1d52:	4630      	mov	r0, r6
    1d54:	4639      	mov	r1, r7
    1d56:	4c0d      	ldr	r4, [pc, #52]	; (1d8c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x6c>)
    1d58:	47a0      	blx	r4
    1d5a:	9b08      	ldr	r3, [sp, #32]
    1d5c:	e9c3 0100 	strd	r0, r1, [r3]

  return kTfLiteOk;
    1d60:	2000      	movs	r0, #0
}
    1d62:	b002      	add	sp, #8
    1d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    1d68:	4b09      	ldr	r3, [pc, #36]	; (1d90 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>)
    1d6a:	9300      	str	r3, [sp, #0]
    1d6c:	f8d8 4014 	ldr.w	r4, [r8, #20]
    1d70:	23a7      	movs	r3, #167	; 0xa7
    1d72:	4a08      	ldr	r2, [pc, #32]	; (1d94 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x74>)
    1d74:	4908      	ldr	r1, [pc, #32]	; (1d98 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x78>)
    1d76:	4640      	mov	r0, r8
    1d78:	47a0      	blx	r4
    1d7a:	2001      	movs	r0, #1
    1d7c:	e7f1      	b.n	1d62 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x42>
    1d7e:	bf00      	nop
    1d80:	00015d41 	.word	0x00015d41
    1d84:	00015419 	.word	0x00015419
    1d88:	000160a5 	.word	0x000160a5
    1d8c:	00015715 	.word	0x00015715
    1d90:	0003b6dc 	.word	0x0003b6dc
    1d94:	0003b6ac 	.word	0x0003b6ac
    1d98:	0003ad08 	.word	0x0003ad08
    1d9c:	00000000 	.word	0x00000000

00001da0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
                                              double* multiplier) {
    1da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1da4:	b082      	sub	sp, #8
    1da6:	4682      	mov	sl, r0
    1da8:	460d      	mov	r5, r1
    1daa:	4617      	mov	r7, r2
    1dac:	461c      	mov	r4, r3
  const double input_product_scale = static_cast<double>(input->params.scale) *
    1dae:	4e22      	ldr	r6, [pc, #136]	; (1e38 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
    1db0:	68c8      	ldr	r0, [r1, #12]
    1db2:	47b0      	blx	r6
    1db4:	4680      	mov	r8, r0
    1db6:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
    1db8:	68f8      	ldr	r0, [r7, #12]
    1dba:	47b0      	blx	r6
    1dbc:	4602      	mov	r2, r0
    1dbe:	460b      	mov	r3, r1
    1dc0:	4640      	mov	r0, r8
    1dc2:	4649      	mov	r1, r9
    1dc4:	4e1d      	ldr	r6, [pc, #116]	; (1e3c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x9c>)
    1dc6:	47b0      	blx	r6
  if (bias) {
    1dc8:	b1e4      	cbz	r4, 1e04 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x64>
    1dca:	4680      	mov	r8, r0
    1dcc:	4689      	mov	r9, r1
    const double bias_scale = static_cast<double>(bias->params.scale);
    1dce:	4e1a      	ldr	r6, [pc, #104]	; (1e38 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
    1dd0:	68e0      	ldr	r0, [r4, #12]
    1dd2:	47b0      	blx	r6
    const double scale_diff = std::abs(input_product_scale - bias_scale);
    1dd4:	4602      	mov	r2, r0
    1dd6:	460b      	mov	r3, r1
    1dd8:	4640      	mov	r0, r8
    1dda:	4649      	mov	r1, r9
    1ddc:	4c18      	ldr	r4, [pc, #96]	; (1e40 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
    1dde:	47a0      	blx	r4
    1de0:	4680      	mov	r8, r0
_GLIBCXX_BEGIN_NAMESPACE_VERSION

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    1de2:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    const double output_scale = static_cast<double>(output->params.scale);
    1de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1de8:	68d8      	ldr	r0, [r3, #12]
    1dea:	47b0      	blx	r6
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    1dec:	4602      	mov	r2, r0
    1dee:	460b      	mov	r3, r1
    1df0:	4640      	mov	r0, r8
    1df2:	4621      	mov	r1, r4
    1df4:	4c13      	ldr	r4, [pc, #76]	; (1e44 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
    1df6:	47a0      	blx	r4
    1df8:	a30d      	add	r3, pc, #52	; (adr r3, 1e30 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x90>)
    1dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
    1dfe:	4c12      	ldr	r4, [pc, #72]	; (1e48 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa8>)
    1e00:	47a0      	blx	r4
    1e02:	b150      	cbz	r0, 1e1a <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7a>
                                          multiplier);
    1e04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e06:	9300      	str	r3, [sp, #0]
    1e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e0a:	463a      	mov	r2, r7
    1e0c:	4629      	mov	r1, r5
    1e0e:	4650      	mov	r0, sl
    1e10:	4c0e      	ldr	r4, [pc, #56]	; (1e4c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xac>)
    1e12:	47a0      	blx	r4
}
    1e14:	b002      	add	sp, #8
    1e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    1e1a:	4b0d      	ldr	r3, [pc, #52]	; (1e50 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb0>)
    1e1c:	9300      	str	r3, [sp, #0]
    1e1e:	f8da 4014 	ldr.w	r4, [sl, #20]
    1e22:	239a      	movs	r3, #154	; 0x9a
    1e24:	4a0b      	ldr	r2, [pc, #44]	; (1e54 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>)
    1e26:	490c      	ldr	r1, [pc, #48]	; (1e58 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb8>)
    1e28:	4650      	mov	r0, sl
    1e2a:	47a0      	blx	r4
    1e2c:	2001      	movs	r0, #1
    1e2e:	e7f1      	b.n	1e14 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x74>
    1e30:	47ae147b 	.word	0x47ae147b
    1e34:	3f947ae1 	.word	0x3f947ae1
    1e38:	00015419 	.word	0x00015419
    1e3c:	000154c1 	.word	0x000154c1
    1e40:	00015159 	.word	0x00015159
    1e44:	00015715 	.word	0x00015715
    1e48:	000159b9 	.word	0x000159b9
    1e4c:	00001d21 	.word	0x00001d21
    1e50:	0003b6f8 	.word	0x0003b6f8
    1e54:	0003b6ac 	.word	0x0003b6ac
    1e58:	0003ad08 	.word	0x0003ad08

00001e5c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
    1e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e60:	b083      	sub	sp, #12
    1e62:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
    1e64:	7813      	ldrb	r3, [r2, #0]
    1e66:	2b03      	cmp	r3, #3
    1e68:	d01f      	beq.n	1eaa <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4e>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
    1e6a:	2b09      	cmp	r3, #9
    1e6c:	d020      	beq.n	1eb0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x54>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
    1e6e:	2b07      	cmp	r3, #7
    1e70:	d112      	bne.n	1e98 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x3c>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
    1e72:	f647 76ff 	movw	r6, #32767	; 0x7fff
    qmin = std::numeric_limits<int16_t>::min();
    1e76:	4f36      	ldr	r7, [pc, #216]	; (1f50 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xf4>)
  const auto scale = output->params.scale;
    1e78:	f8d2 800c 	ldr.w	r8, [r2, #12]
  const auto zero_point = output->params.zero_point;
    1e7c:	6914      	ldr	r4, [r2, #16]
  if (activation == kTfLiteActRelu) {
    1e7e:	2901      	cmp	r1, #1
    1e80:	d01a      	beq.n	1eb8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x5c>
  } else if (activation == kTfLiteActRelu6) {
    1e82:	2903      	cmp	r1, #3
    1e84:	d029      	beq.n	1eda <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (activation == kTfLiteActReluN1To1) {
    1e86:	2902      	cmp	r1, #2
    1e88:	d044      	beq.n	1f14 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb8>
    *act_min = qmin;
    1e8a:	602f      	str	r7, [r5, #0]
    *act_max = qmax;
    1e8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1e8e:	601e      	str	r6, [r3, #0]
    TF_LITE_ENSURE(context, false);
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
                                        act_max);
  return kTfLiteOk;
    1e90:	2000      	movs	r0, #0
}
    1e92:	b003      	add	sp, #12
    1e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE(context, false);
    1e98:	4b2e      	ldr	r3, [pc, #184]	; (1f54 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xf8>)
    1e9a:	9300      	str	r3, [sp, #0]
    1e9c:	6944      	ldr	r4, [r0, #20]
    1e9e:	23da      	movs	r3, #218	; 0xda
    1ea0:	4a2d      	ldr	r2, [pc, #180]	; (1f58 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xfc>)
    1ea2:	492e      	ldr	r1, [pc, #184]	; (1f5c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x100>)
    1ea4:	47a0      	blx	r4
    1ea6:	2001      	movs	r0, #1
    1ea8:	e7f3      	b.n	1e92 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x36>
    qmax = std::numeric_limits<uint8_t>::max();
    1eaa:	26ff      	movs	r6, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
    1eac:	2700      	movs	r7, #0
    1eae:	e7e3      	b.n	1e78 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1c>
    qmax = std::numeric_limits<int8_t>::max();
    1eb0:	267f      	movs	r6, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
    1eb2:	f06f 077f 	mvn.w	r7, #127	; 0x7f
    1eb6:	e7df      	b.n	1e78 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1c>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
    1eb8:	4641      	mov	r1, r8
    1eba:	2000      	movs	r0, #0
    1ebc:	4b28      	ldr	r3, [pc, #160]	; (1f60 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x104>)
    1ebe:	4798      	blx	r3
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
    1ec0:	4b28      	ldr	r3, [pc, #160]	; (1f64 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x108>)
    1ec2:	4798      	blx	r3
    1ec4:	4b28      	ldr	r3, [pc, #160]	; (1f68 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x10c>)
    1ec6:	4798      	blx	r3
  };
    1ec8:	4420      	add	r0, r4
    *act_min = std::max(qmin, quantize(0.0));
    1eca:	42b8      	cmp	r0, r7
    1ecc:	bfb8      	it	lt
    1ece:	4638      	movlt	r0, r7
    1ed0:	6028      	str	r0, [r5, #0]
    *act_max = qmax;
    1ed2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1ed4:	601e      	str	r6, [r3, #0]
  return kTfLiteOk;
    1ed6:	2000      	movs	r0, #0
    1ed8:	e7db      	b.n	1e92 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x36>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
    1eda:	f8df b084 	ldr.w	fp, [pc, #132]	; 1f60 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x104>
    1ede:	4641      	mov	r1, r8
    1ee0:	2000      	movs	r0, #0
    1ee2:	47d8      	blx	fp
    1ee4:	f8df a07c 	ldr.w	sl, [pc, #124]	; 1f64 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x108>
    1ee8:	47d0      	blx	sl
    1eea:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1f68 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x10c>
    1eee:	47c8      	blx	r9
  };
    1ef0:	4420      	add	r0, r4
    *act_min = std::max(qmin, quantize(0.0));
    1ef2:	42b8      	cmp	r0, r7
    1ef4:	bfb8      	it	lt
    1ef6:	4638      	movlt	r0, r7
    1ef8:	6028      	str	r0, [r5, #0]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
    1efa:	4641      	mov	r1, r8
    1efc:	481b      	ldr	r0, [pc, #108]	; (1f6c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x110>)
    1efe:	47d8      	blx	fp
    1f00:	47d0      	blx	sl
    1f02:	47c8      	blx	r9
  };
    1f04:	4420      	add	r0, r4
    *act_max = std::min(qmax, quantize(6.0));
    1f06:	42b0      	cmp	r0, r6
    1f08:	bfa8      	it	ge
    1f0a:	4630      	movge	r0, r6
    1f0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1f0e:	6018      	str	r0, [r3, #0]
  return kTfLiteOk;
    1f10:	2000      	movs	r0, #0
    1f12:	e7be      	b.n	1e92 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x36>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
    1f14:	f8df b048 	ldr.w	fp, [pc, #72]	; 1f60 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x104>
    1f18:	4641      	mov	r1, r8
    1f1a:	4815      	ldr	r0, [pc, #84]	; (1f70 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x114>)
    1f1c:	47d8      	blx	fp
    1f1e:	f8df a044 	ldr.w	sl, [pc, #68]	; 1f64 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x108>
    1f22:	47d0      	blx	sl
    1f24:	f8df 9040 	ldr.w	r9, [pc, #64]	; 1f68 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x10c>
    1f28:	47c8      	blx	r9
  };
    1f2a:	4420      	add	r0, r4
    *act_min = std::max(qmin, quantize(-1.0));
    1f2c:	42b8      	cmp	r0, r7
    1f2e:	bfb8      	it	lt
    1f30:	4638      	movlt	r0, r7
    1f32:	6028      	str	r0, [r5, #0]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
    1f34:	4641      	mov	r1, r8
    1f36:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    1f3a:	47d8      	blx	fp
    1f3c:	47d0      	blx	sl
    1f3e:	47c8      	blx	r9
  };
    1f40:	4420      	add	r0, r4
    *act_max = std::min(qmax, quantize(1.0));
    1f42:	42b0      	cmp	r0, r6
    1f44:	bfa8      	it	ge
    1f46:	4630      	movge	r0, r6
    1f48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1f4a:	6018      	str	r0, [r3, #0]
  return kTfLiteOk;
    1f4c:	2000      	movs	r0, #0
    1f4e:	e7a0      	b.n	1e92 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x36>
    1f50:	ffff8000 	.word	0xffff8000
    1f54:	0003b71c 	.word	0x0003b71c
    1f58:	0003b6ac 	.word	0x0003b6ac
    1f5c:	0003ad08 	.word	0x0003ad08
    1f60:	00015ea9 	.word	0x00015ea9
    1f64:	00014e15 	.word	0x00014e15
    1f68:	000160cd 	.word	0x000160cd
    1f6c:	40c00000 	.word	0x40c00000
    1f70:	bf800000 	.word	0xbf800000

00001f74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
    1f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f78:	b091      	sub	sp, #68	; 0x44
    1f7a:	9005      	str	r0, [sp, #20]
    1f7c:	9309      	str	r3, [sp, #36]	; 0x24
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    1f7e:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
    1f82:	2b01      	cmp	r3, #1
    1f84:	f040 8084 	bne.w	2090 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x11c>
    1f88:	468b      	mov	fp, r1
    1f8a:	4691      	mov	r9, r2
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    1f8c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    1f90:	2b01      	cmp	r3, #1
    1f92:	f040 808d 	bne.w	20b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x13c>
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
    1f96:	6b53      	ldr	r3, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
    1f98:	2b00      	cmp	r3, #0
    1f9a:	f000 8098 	beq.w	20ce <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x15a>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    1f9e:	681a      	ldr	r2, [r3, #0]
    1fa0:	9208      	str	r2, [sp, #32]
    1fa2:	2a00      	cmp	r2, #0
    1fa4:	f000 809d 	beq.w	20e2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x16e>
  const bool is_per_channel = affine_quantization->scale->size > 1;
    1fa8:	9a08      	ldr	r2, [sp, #32]
    1faa:	f8d2 a000 	ldr.w	sl, [r2]
  if (is_per_channel) {
    1fae:	f1ba 0f01 	cmp.w	sl, #1
    1fb2:	dd18      	ble.n	1fe6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x72>
    TF_LITE_ENSURE(context,
    1fb4:	780a      	ldrb	r2, [r1, #0]
    1fb6:	2a09      	cmp	r2, #9
    1fb8:	d002      	beq.n	1fc0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x4c>
    1fba:	2a07      	cmp	r2, #7
    1fbc:	f040 809b 	bne.w	20f6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x182>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
    1fc0:	f899 2000 	ldrb.w	r2, [r9]
    1fc4:	2a09      	cmp	r2, #9
    1fc6:	f040 80a0 	bne.w	210a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x196>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
    1fca:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1fcc:	4592      	cmp	sl, r2
    1fce:	f040 80ab 	bne.w	2128 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1b4>
    TF_LITE_ENSURE_EQ(
    1fd2:	f8d9 2008 	ldr.w	r2, [r9, #8]
    1fd6:	689b      	ldr	r3, [r3, #8]
    1fd8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    1fdc:	6853      	ldr	r3, [r2, #4]
    1fde:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1fe0:	429a      	cmp	r2, r3
    1fe2:	f040 80b0 	bne.w	2146 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d2>
  const float input_scale = input->params.scale;
    1fe6:	f8db 300c 	ldr.w	r3, [fp, #12]
    1fea:	9306      	str	r3, [sp, #24]
  const float output_scale = output->params.scale;
    1fec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    1fee:	68db      	ldr	r3, [r3, #12]
    1ff0:	9307      	str	r3, [sp, #28]
  const float* filter_scales = affine_quantization->scale->data;
    1ff2:	9b08      	ldr	r3, [sp, #32]
    1ff4:	3304      	adds	r3, #4
    1ff6:	461a      	mov	r2, r3
  for (int i = 0; i < num_channels; ++i) {
    1ff8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1ffa:	2b00      	cmp	r3, #0
    1ffc:	dd3c      	ble.n	2078 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x104>
    1ffe:	9f20      	ldr	r7, [sp, #128]	; 0x80
    2000:	3f04      	subs	r7, #4
    2002:	9e21      	ldr	r6, [sp, #132]	; 0x84
    2004:	3e04      	subs	r6, #4
    2006:	2400      	movs	r4, #0
    const double filter_scale = static_cast<double>(scale);
    2008:	4d6b      	ldr	r5, [pc, #428]	; (21b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x244>)
                                          static_cast<double>(output_scale);
    200a:	9704      	str	r7, [sp, #16]
    200c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    2010:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    2014:	4691      	mov	r9, r2
    2016:	469b      	mov	fp, r3
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
    2018:	f1ba 0f01 	cmp.w	sl, #1
    201c:	bfce      	itee	gt
    201e:	f859 0024 	ldrgt.w	r0, [r9, r4, lsl #2]
    2022:	9b08      	ldrle	r3, [sp, #32]
    2024:	6858      	ldrle	r0, [r3, #4]
    const double filter_scale = static_cast<double>(scale);
    2026:	47a8      	blx	r5
    2028:	4607      	mov	r7, r0
    202a:	4688      	mov	r8, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
    202c:	9806      	ldr	r0, [sp, #24]
    202e:	47a8      	blx	r5
    2030:	4602      	mov	r2, r0
    2032:	460b      	mov	r3, r1
    2034:	4638      	mov	r0, r7
    2036:	4641      	mov	r1, r8
    2038:	4f60      	ldr	r7, [pc, #384]	; (21bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x248>)
    203a:	47b8      	blx	r7
    203c:	4607      	mov	r7, r0
    203e:	4688      	mov	r8, r1
                                          static_cast<double>(output_scale);
    2040:	9807      	ldr	r0, [sp, #28]
    2042:	47a8      	blx	r5
    2044:	4602      	mov	r2, r0
    2046:	460b      	mov	r3, r1
    2048:	4638      	mov	r0, r7
    204a:	4641      	mov	r1, r8
    204c:	4f5c      	ldr	r7, [pc, #368]	; (21c0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24c>)
    204e:	47b8      	blx	r7
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
    2050:	ab0e      	add	r3, sp, #56	; 0x38
    2052:	aa0d      	add	r2, sp, #52	; 0x34
    2054:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 2200 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>
    2058:	47c0      	blx	r8
    per_channel_multiplier[i] = significand;
    205a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    205c:	9a04      	ldr	r2, [sp, #16]
    205e:	f842 3f04 	str.w	r3, [r2, #4]!
    2062:	9204      	str	r2, [sp, #16]
    per_channel_shift[i] = channel_shift;
    2064:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2066:	f846 3f04 	str.w	r3, [r6, #4]!
  for (int i = 0; i < num_channels; ++i) {
    206a:	3401      	adds	r4, #1
    206c:	45a3      	cmp	fp, r4
    206e:	d1d3      	bne.n	2018 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xa4>
    2070:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    2074:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  if (input->type == kTfLiteUInt8) {
    2078:	f89b 3000 	ldrb.w	r3, [fp]
    207c:	2b03      	cmp	r3, #3
    207e:	d070      	beq.n	2162 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1ee>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
    2080:	2b09      	cmp	r3, #9
    2082:	f000 808f 	beq.w	21a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x230>
    2086:	2b07      	cmp	r3, #7
    2088:	f000 808c 	beq.w	21a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x230>
  return kTfLiteOk;
    208c:	2000      	movs	r0, #0
    208e:	e00c      	b.n	20aa <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    2090:	2401      	movs	r4, #1
    2092:	9403      	str	r4, [sp, #12]
    2094:	9302      	str	r3, [sp, #8]
    2096:	4b4b      	ldr	r3, [pc, #300]	; (21c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x250>)
    2098:	9301      	str	r3, [sp, #4]
    209a:	4b4b      	ldr	r3, [pc, #300]	; (21c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x254>)
    209c:	9300      	str	r3, [sp, #0]
    209e:	6945      	ldr	r5, [r0, #20]
    20a0:	2336      	movs	r3, #54	; 0x36
    20a2:	4a4a      	ldr	r2, [pc, #296]	; (21cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    20a4:	494a      	ldr	r1, [pc, #296]	; (21d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x25c>)
    20a6:	47a8      	blx	r5
    20a8:	4620      	mov	r0, r4
}
    20aa:	b011      	add	sp, #68	; 0x44
    20ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    20b0:	2401      	movs	r4, #1
    20b2:	9403      	str	r4, [sp, #12]
    20b4:	9302      	str	r3, [sp, #8]
    20b6:	4b43      	ldr	r3, [pc, #268]	; (21c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x250>)
    20b8:	9301      	str	r3, [sp, #4]
    20ba:	4b46      	ldr	r3, [pc, #280]	; (21d4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x260>)
    20bc:	9300      	str	r3, [sp, #0]
    20be:	9805      	ldr	r0, [sp, #20]
    20c0:	6945      	ldr	r5, [r0, #20]
    20c2:	2338      	movs	r3, #56	; 0x38
    20c4:	4a41      	ldr	r2, [pc, #260]	; (21cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    20c6:	4942      	ldr	r1, [pc, #264]	; (21d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x25c>)
    20c8:	47a8      	blx	r5
    20ca:	4620      	mov	r0, r4
    20cc:	e7ed      	b.n	20aa <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
  TF_LITE_ENSURE(context, affine_quantization);
    20ce:	4b42      	ldr	r3, [pc, #264]	; (21d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x264>)
    20d0:	9300      	str	r3, [sp, #0]
    20d2:	9805      	ldr	r0, [sp, #20]
    20d4:	6944      	ldr	r4, [r0, #20]
    20d6:	2342      	movs	r3, #66	; 0x42
    20d8:	4a3c      	ldr	r2, [pc, #240]	; (21cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    20da:	4940      	ldr	r1, [pc, #256]	; (21dc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x268>)
    20dc:	47a0      	blx	r4
    20de:	2001      	movs	r0, #1
    20e0:	e7e3      	b.n	20aa <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    20e2:	4b3f      	ldr	r3, [pc, #252]	; (21e0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x26c>)
    20e4:	9300      	str	r3, [sp, #0]
    20e6:	9805      	ldr	r0, [sp, #20]
    20e8:	6944      	ldr	r4, [r0, #20]
    20ea:	2343      	movs	r3, #67	; 0x43
    20ec:	4a37      	ldr	r2, [pc, #220]	; (21cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    20ee:	493b      	ldr	r1, [pc, #236]	; (21dc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x268>)
    20f0:	47a0      	blx	r4
    20f2:	2001      	movs	r0, #1
    20f4:	e7d9      	b.n	20aa <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
    TF_LITE_ENSURE(context,
    20f6:	4b3b      	ldr	r3, [pc, #236]	; (21e4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x270>)
    20f8:	9300      	str	r3, [sp, #0]
    20fa:	9805      	ldr	r0, [sp, #20]
    20fc:	6944      	ldr	r4, [r0, #20]
    20fe:	2348      	movs	r3, #72	; 0x48
    2100:	4a32      	ldr	r2, [pc, #200]	; (21cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    2102:	4936      	ldr	r1, [pc, #216]	; (21dc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x268>)
    2104:	47a0      	blx	r4
    2106:	2001      	movs	r0, #1
    2108:	e7cf      	b.n	20aa <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
    210a:	2309      	movs	r3, #9
    210c:	9303      	str	r3, [sp, #12]
    210e:	9202      	str	r2, [sp, #8]
    2110:	4b35      	ldr	r3, [pc, #212]	; (21e8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x274>)
    2112:	9301      	str	r3, [sp, #4]
    2114:	4b35      	ldr	r3, [pc, #212]	; (21ec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x278>)
    2116:	9300      	str	r3, [sp, #0]
    2118:	9805      	ldr	r0, [sp, #20]
    211a:	6944      	ldr	r4, [r0, #20]
    211c:	2349      	movs	r3, #73	; 0x49
    211e:	4a2b      	ldr	r2, [pc, #172]	; (21cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    2120:	492b      	ldr	r1, [pc, #172]	; (21d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x25c>)
    2122:	47a0      	blx	r4
    2124:	2001      	movs	r0, #1
    2126:	e7c0      	b.n	20aa <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
    2128:	9203      	str	r2, [sp, #12]
    212a:	f8cd a008 	str.w	sl, [sp, #8]
    212e:	4b30      	ldr	r3, [pc, #192]	; (21f0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x27c>)
    2130:	9301      	str	r3, [sp, #4]
    2132:	4b30      	ldr	r3, [pc, #192]	; (21f4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x280>)
    2134:	9300      	str	r3, [sp, #0]
    2136:	9805      	ldr	r0, [sp, #20]
    2138:	6944      	ldr	r4, [r0, #20]
    213a:	234a      	movs	r3, #74	; 0x4a
    213c:	4a23      	ldr	r2, [pc, #140]	; (21cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    213e:	4924      	ldr	r1, [pc, #144]	; (21d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x25c>)
    2140:	47a0      	blx	r4
    2142:	2001      	movs	r0, #1
    2144:	e7b1      	b.n	20aa <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
    TF_LITE_ENSURE_EQ(
    2146:	9303      	str	r3, [sp, #12]
    2148:	9202      	str	r2, [sp, #8]
    214a:	4b2b      	ldr	r3, [pc, #172]	; (21f8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x284>)
    214c:	9301      	str	r3, [sp, #4]
    214e:	4b28      	ldr	r3, [pc, #160]	; (21f0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x27c>)
    2150:	9300      	str	r3, [sp, #0]
    2152:	9805      	ldr	r0, [sp, #20]
    2154:	6944      	ldr	r4, [r0, #20]
    2156:	234d      	movs	r3, #77	; 0x4d
    2158:	4a1c      	ldr	r2, [pc, #112]	; (21cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    215a:	491d      	ldr	r1, [pc, #116]	; (21d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x25c>)
    215c:	47a0      	blx	r4
    215e:	2001      	movs	r0, #1
    2160:	e7a3      	b.n	20aa <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
    double real_multiplier = 0.0;
    2162:	ab10      	add	r3, sp, #64	; 0x40
    2164:	2000      	movs	r0, #0
    2166:	2100      	movs	r1, #0
    2168:	e963 0102 	strd	r0, r1, [r3, #-8]!
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    216c:	9301      	str	r3, [sp, #4]
    216e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    2170:	9300      	str	r3, [sp, #0]
    2172:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2174:	464a      	mov	r2, r9
    2176:	4659      	mov	r1, fp
    2178:	9805      	ldr	r0, [sp, #20]
    217a:	4c20      	ldr	r4, [pc, #128]	; (21fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x288>)
    217c:	47a0      	blx	r4
    217e:	2800      	cmp	r0, #0
    2180:	d193      	bne.n	20aa <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
    2182:	ab0d      	add	r3, sp, #52	; 0x34
    2184:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    2186:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    218a:	4c1d      	ldr	r4, [pc, #116]	; (2200 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
    218c:	47a0      	blx	r4
    *shift = -exponent;
    218e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2190:	425b      	negs	r3, r3
    2192:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    2194:	6013      	str	r3, [r2, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
    2196:	f89b 3000 	ldrb.w	r3, [fp]
    219a:	2b09      	cmp	r3, #9
    219c:	d002      	beq.n	21a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x230>
    219e:	2b03      	cmp	r3, #3
    21a0:	f47f af71 	bne.w	2086 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x112>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    21a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    21a6:	7819      	ldrb	r1, [r3, #0]
    21a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    21aa:	9300      	str	r3, [sp, #0]
    21ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    21ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    21b0:	9805      	ldr	r0, [sp, #20]
    21b2:	4c14      	ldr	r4, [pc, #80]	; (2204 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x290>)
    21b4:	47a0      	blx	r4
    21b6:	e778      	b.n	20aa <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
    21b8:	00015419 	.word	0x00015419
    21bc:	000154c1 	.word	0x000154c1
    21c0:	00015715 	.word	0x00015715
    21c4:	0003b740 	.word	0x0003b740
    21c8:	0003b75c 	.word	0x0003b75c
    21cc:	0003b6ac 	.word	0x0003b6ac
    21d0:	0003b724 	.word	0x0003b724
    21d4:	0003b778 	.word	0x0003b778
    21d8:	0003b794 	.word	0x0003b794
    21dc:	0003ad08 	.word	0x0003ad08
    21e0:	0003b7a8 	.word	0x0003b7a8
    21e4:	0003b7c4 	.word	0x0003b7c4
    21e8:	0003b800 	.word	0x0003b800
    21ec:	0003b80c 	.word	0x0003b80c
    21f0:	0003b81c 	.word	0x0003b81c
    21f4:	0003b82c 	.word	0x0003b82c
    21f8:	0003b850 	.word	0x0003b850
    21fc:	00001da1 	.word	0x00001da1
    2200:	00001b31 	.word	0x00001b31
    2204:	00001e5d 	.word	0x00001e5d

00002208 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj>:
        reinterpret_cast<int*>(data->per_channel_output_shift), num_channels));
  }
  return kTfLiteOk;
}

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
    2208:	b500      	push	{lr}
    220a:	b083      	sub	sp, #12
  void* raw;
  context->AllocatePersistentBuffer(context, sizeof(int), &raw);
    220c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    220e:	aa01      	add	r2, sp, #4
    2210:	2104      	movs	r1, #4
    2212:	4798      	blx	r3
  return raw;
}
    2214:	9801      	ldr	r0, [sp, #4]
    2216:	b003      	add	sp, #12
    2218:	f85d fb04 	ldr.w	pc, [sp], #4

0000221c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>:
                             OpData* data) {
    221c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2220:	b08a      	sub	sp, #40	; 0x28
    2222:	9e18      	ldr	r6, [sp, #96]	; 0x60
  bool has_bias = node->inputs->size == 3;
    2224:	680c      	ldr	r4, [r1, #0]
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    2226:	6824      	ldr	r4, [r4, #0]
    2228:	3c02      	subs	r4, #2
    222a:	2c01      	cmp	r4, #1
    222c:	d813      	bhi.n	2256 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x3a>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    222e:	684c      	ldr	r4, [r1, #4]
    2230:	6825      	ldr	r5, [r4, #0]
    2232:	2d01      	cmp	r5, #1
    2234:	d018      	beq.n	2268 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x4c>
    2236:	2401      	movs	r4, #1
    2238:	9403      	str	r4, [sp, #12]
    223a:	9502      	str	r5, [sp, #8]
    223c:	4b5c      	ldr	r3, [pc, #368]	; (23b0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x194>)
    223e:	9301      	str	r3, [sp, #4]
    2240:	4b5c      	ldr	r3, [pc, #368]	; (23b4 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x198>)
    2242:	9300      	str	r3, [sp, #0]
    2244:	6945      	ldr	r5, [r0, #20]
    2246:	2352      	movs	r3, #82	; 0x52
    2248:	4a5b      	ldr	r2, [pc, #364]	; (23b8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x19c>)
    224a:	495c      	ldr	r1, [pc, #368]	; (23bc <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x1a0>)
    224c:	47a8      	blx	r5
    224e:	4620      	mov	r0, r4
}
    2250:	b00a      	add	sp, #40	; 0x28
    2252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    2256:	4b5a      	ldr	r3, [pc, #360]	; (23c0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x1a4>)
    2258:	9300      	str	r3, [sp, #0]
    225a:	6944      	ldr	r4, [r0, #20]
    225c:	2351      	movs	r3, #81	; 0x51
    225e:	4a56      	ldr	r2, [pc, #344]	; (23b8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x19c>)
    2260:	4958      	ldr	r1, [pc, #352]	; (23c4 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x1a8>)
    2262:	47a0      	blx	r4
    2264:	2001      	movs	r0, #1
    2266:	e7f3      	b.n	2250 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x34>
  auto padding = params->padding;
    2268:	f892 c000 	ldrb.w	ip, [r2]
      width, filter_height, filter_width, padding, &out_height, &out_width);
    226c:	f8d2 9008 	ldr.w	r9, [r2, #8]
    2270:	f8d2 e004 	ldr.w	lr, [r2, #4]
    2274:	6954      	ldr	r4, [r2, #20]
}

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    2276:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    2278:	1e7d      	subs	r5, r7, #1
    227a:	6917      	ldr	r7, [r2, #16]
    227c:	fb07 f705 	mul.w	r7, r7, r5
    2280:	f107 0a01 	add.w	sl, r7, #1
  switch (padding) {
    2284:	f1bc 0f01 	cmp.w	ip, #1
    2288:	d011      	beq.n	22ae <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x92>
    228a:	f1bc 0f02 	cmp.w	ip, #2
    228e:	d050      	beq.n	2332 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x116>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    2290:	9d14      	ldr	r5, [sp, #80]	; 0x50
    2292:	3d01      	subs	r5, #1
    2294:	fb04 f405 	mul.w	r4, r4, r5
    2298:	f104 0801 	add.w	r8, r4, #1
  switch (padding) {
    229c:	f1bc 0f01 	cmp.w	ip, #1
    22a0:	d05c      	beq.n	235c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x140>
    22a2:	f1bc 0f02 	cmp.w	ip, #2
    22a6:	d05b      	beq.n	2360 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x144>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    default:
      return 0;
    22a8:	2500      	movs	r5, #0
    22aa:	462c      	mov	r4, r5
    22ac:	e010      	b.n	22d0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0xb4>
      return (image_size + stride - 1) / stride;
    22ae:	eb0e 0503 	add.w	r5, lr, r3
    22b2:	3d01      	subs	r5, #1
    22b4:	fb95 f5fe 	sdiv	r5, r5, lr
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    22b8:	9f14      	ldr	r7, [sp, #80]	; 0x50
    22ba:	f107 38ff 	add.w	r8, r7, #4294967295
    22be:	fb04 f408 	mul.w	r4, r4, r8
    22c2:	f104 0801 	add.w	r8, r4, #1
      return (image_size + stride - 1) / stride;
    22c6:	9c12      	ldr	r4, [sp, #72]	; 0x48
    22c8:	444c      	add	r4, r9
    22ca:	3c01      	subs	r4, #1
    22cc:	fb94 f4f9 	sdiv	r4, r4, r9
      ((out_size - 1) * stride + effective_filter_size - in_size);
    22d0:	3c01      	subs	r4, #1
    22d2:	fb09 8404 	mla	r4, r9, r4, r8
    22d6:	9f12      	ldr	r7, [sp, #72]	; 0x48
    22d8:	1be4      	subs	r4, r4, r7
  total_padding = total_padding > 0 ? total_padding : 0;
    22da:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
      ((out_size - 1) * stride + effective_filter_size - in_size);
    22de:	3d01      	subs	r5, #1
    22e0:	fb0e a505 	mla	r5, lr, r5, sl
    22e4:	1aeb      	subs	r3, r5, r3
  total_padding = total_padding > 0 ? total_padding : 0;
    22e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  return total_padding / 2;
    22ea:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
    22ee:	106d      	asrs	r5, r5, #1
    22f0:	6035      	str	r5, [r6, #0]
    22f2:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
    22f6:	106d      	asrs	r5, r5, #1
    22f8:	6075      	str	r5, [r6, #4]
  *offset = total_padding % 2;
    22fa:	f003 0301 	and.w	r3, r3, #1
    22fe:	60b3      	str	r3, [r6, #8]
    2300:	f004 0401 	and.w	r4, r4, #1
    2304:	60f4      	str	r4, [r6, #12]
  if (data_type != kTfLiteFloat32) {
    2306:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    230a:	2b01      	cmp	r3, #1
    230c:	d04d      	beq.n	23aa <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x18e>
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}
inline const TfLiteTensor* GetInput(const TfLiteContext* context,
                                    const TfLiteNode* node, int index) {
  return &context->tensors[node->inputs->data[index]];
    230e:	6885      	ldr	r5, [r0, #8]
    2310:	680b      	ldr	r3, [r1, #0]
    2312:	685c      	ldr	r4, [r3, #4]
    2314:	eb05 1e84 	add.w	lr, r5, r4, lsl #6
    2318:	689c      	ldr	r4, [r3, #8]
    231a:	eb05 1484 	add.w	r4, r5, r4, lsl #6
}

inline const TfLiteTensor* GetOptionalInputTensor(TfLiteContext* context,
                                                  const TfLiteNode* node,
                                                  int index) {
  const bool use_tensor = index < node->inputs->size &&
    231e:	681f      	ldr	r7, [r3, #0]
    2320:	2f02      	cmp	r7, #2
    2322:	dd21      	ble.n	2368 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x14c>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    2324:	68db      	ldr	r3, [r3, #12]
  const bool use_tensor = index < node->inputs->size &&
    2326:	f1b3 3fff 	cmp.w	r3, #4294967295
    232a:	d01b      	beq.n	2364 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x148>
  if (use_tensor) {
    return &context->tensors[node->inputs->data[index]];
    232c:	eb05 1383 	add.w	r3, r5, r3, lsl #6
    2330:	e01b      	b.n	236a <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x14e>
      return (image_size + stride - effective_filter_size) / stride;
    2332:	eb0e 0503 	add.w	r5, lr, r3
    2336:	eba5 050a 	sub.w	r5, r5, sl
    233a:	fb95 f5fe 	sdiv	r5, r5, lr
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    233e:	9f14      	ldr	r7, [sp, #80]	; 0x50
    2340:	f107 38ff 	add.w	r8, r7, #4294967295
    2344:	fb04 f408 	mul.w	r4, r4, r8
    2348:	f104 0801 	add.w	r8, r4, #1
      return (image_size + stride - effective_filter_size) / stride;
    234c:	9c12      	ldr	r4, [sp, #72]	; 0x48
    234e:	eb09 0c04 	add.w	ip, r9, r4
    2352:	ebac 0c08 	sub.w	ip, ip, r8
    2356:	fb9c f4f9 	sdiv	r4, ip, r9
    235a:	e7b9      	b.n	22d0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0xb4>
      return 0;
    235c:	2500      	movs	r5, #0
    235e:	e7b2      	b.n	22c6 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0xaa>
    2360:	2500      	movs	r5, #0
    2362:	e7f3      	b.n	234c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x130>
  }
  return nullptr;
    2364:	2300      	movs	r3, #0
    2366:	e000      	b.n	236a <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x14e>
    2368:	2300      	movs	r3, #0
    int num_channels = filter->dims->data[kConvQuantizedDimension];
    236a:	68a7      	ldr	r7, [r4, #8]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    236c:	687f      	ldr	r7, [r7, #4]
    236e:	9708      	str	r7, [sp, #32]
    2370:	f506 6783 	add.w	r7, r6, #1048	; 0x418
    2374:	9707      	str	r7, [sp, #28]
    2376:	f106 0718 	add.w	r7, r6, #24
    237a:	9706      	str	r7, [sp, #24]
    237c:	f606 071c 	addw	r7, r6, #2076	; 0x81c
    2380:	9705      	str	r7, [sp, #20]
    2382:	f606 0718 	addw	r7, r6, #2072	; 0x818
    2386:	9704      	str	r7, [sp, #16]
    2388:	f106 0714 	add.w	r7, r6, #20
    238c:	9703      	str	r7, [sp, #12]
    238e:	3610      	adds	r6, #16
    2390:	9602      	str	r6, [sp, #8]
    2392:	320c      	adds	r2, #12
    2394:	9201      	str	r2, [sp, #4]
  return &context->tensors[node->outputs->data[index]];
    2396:	684a      	ldr	r2, [r1, #4]
    2398:	6852      	ldr	r2, [r2, #4]
    239a:	eb05 1582 	add.w	r5, r5, r2, lsl #6
    239e:	9500      	str	r5, [sp, #0]
    23a0:	4622      	mov	r2, r4
    23a2:	4671      	mov	r1, lr
    23a4:	4c08      	ldr	r4, [pc, #32]	; (23c8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x1ac>)
    23a6:	47a0      	blx	r4
    23a8:	e752      	b.n	2250 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x34>
  return kTfLiteOk;
    23aa:	2000      	movs	r0, #0
    23ac:	e750      	b.n	2250 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x34>
    23ae:	bf00      	nop
    23b0:	0003bf08 	.word	0x0003bf08
    23b4:	0003b9dc 	.word	0x0003b9dc
    23b8:	0003b980 	.word	0x0003b980
    23bc:	0003b724 	.word	0x0003b724
    23c0:	0003b9b8 	.word	0x0003b9b8
    23c4:	0003ad08 	.word	0x0003ad08
    23c8:	00001f75 	.word	0x00001f75

000023cc <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    23cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23d0:	f6ad 0ddc 	subw	sp, sp, #2268	; 0x8dc
    23d4:	9009      	str	r0, [sp, #36]	; 0x24
    23d6:	460c      	mov	r4, r1
#if defined(__ARM_FEATURE_DSP) || defined(__ARM_FEATURE_MVE)
  OpData data;
  int32_t buf_size = 0;

  auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);
    23d8:	694b      	ldr	r3, [r1, #20]
    23da:	930a      	str	r3, [sp, #40]	; 0x28
  return &context->tensors[node->inputs->data[index]];
    23dc:	6885      	ldr	r5, [r0, #8]
    23de:	680b      	ldr	r3, [r1, #0]
    23e0:	685a      	ldr	r2, [r3, #4]
    23e2:	ea4f 1b82 	mov.w	fp, r2, lsl #6
    23e6:	f8d3 a008 	ldr.w	sl, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
    23ea:	684b      	ldr	r3, [r1, #4]
    23ec:	685e      	ldr	r6, [r3, #4]
    23ee:	eb05 1386 	add.w	r3, r5, r6, lsl #6
    23f2:	9308      	str	r3, [sp, #32]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
  if (tensor == nullptr) {
    23f4:	eb15 090b 	adds.w	r9, r5, fp
    23f8:	f000 8096 	beq.w	2528 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x15c>
    return RuntimeShape();
  }

  TfLiteIntArray* dims = tensor->dims;
    23fc:	f8d9 8008 	ldr.w	r8, [r9, #8]
  const int dims_size = dims->size;
    2400:	f8d8 7000 	ldr.w	r7, [r8]
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
    2404:	9728      	str	r7, [sp, #160]	; 0xa0
    if (dimensions_count > kMaxSmallSize) {
    2406:	2f05      	cmp	r7, #5
    2408:	f340 8091 	ble.w	252e <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x162>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32[dimensions_count];
    240c:	4b89      	ldr	r3, [pc, #548]	; (2634 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
    240e:	429f      	cmp	r7, r3
    2410:	bf94      	ite	ls
    2412:	00b8      	lslls	r0, r7, #2
    2414:	f04f 30ff 	movhi.w	r0, #4294967295
    2418:	4b87      	ldr	r3, [pc, #540]	; (2638 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x26c>)
    241a:	4798      	blx	r3
    241c:	9029      	str	r0, [sp, #164]	; 0xa4
  }

  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
    Resize(dimensions_count);
    int32* dst_dims = DimsData();
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    241e:	00ba      	lsls	r2, r7, #2
    2420:	f108 0104 	add.w	r1, r8, #4
    2424:	4b85      	ldr	r3, [pc, #532]	; (263c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x270>)
    2426:	4798      	blx	r3
  if (tensor == nullptr) {
    2428:	9b08      	ldr	r3, [sp, #32]
    242a:	2b00      	cmp	r3, #0
    242c:	f000 8081 	beq.w	2532 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x166>
  TfLiteIntArray* dims = tensor->dims;
    2430:	9b08      	ldr	r3, [sp, #32]
    2432:	f8d3 8008 	ldr.w	r8, [r3, #8]
  const int dims_size = dims->size;
    2436:	f8d8 7000 	ldr.w	r7, [r8]
    size_ = dimensions_count;
    243a:	9722      	str	r7, [sp, #136]	; 0x88
    if (dimensions_count > kMaxSmallSize) {
    243c:	2f05      	cmp	r7, #5
    243e:	dd7a      	ble.n	2536 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x16a>
      dims_pointer_ = new int32[dimensions_count];
    2440:	4b7c      	ldr	r3, [pc, #496]	; (2634 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
    2442:	429f      	cmp	r7, r3
    2444:	bf94      	ite	ls
    2446:	00b8      	lslls	r0, r7, #2
    2448:	f04f 30ff 	movhi.w	r0, #4294967295
    244c:	4b7a      	ldr	r3, [pc, #488]	; (2638 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x26c>)
    244e:	4798      	blx	r3
    2450:	9023      	str	r0, [sp, #140]	; 0x8c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2452:	00ba      	lsls	r2, r7, #2
    2454:	f108 0104 	add.w	r1, r8, #4
    2458:	4b78      	ldr	r3, [pc, #480]	; (263c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x270>)
    245a:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    245c:	9f28      	ldr	r7, [sp, #160]	; 0xa0
    245e:	2f00      	cmp	r7, #0
    2460:	dd6b      	ble.n	253a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x16e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2462:	2f05      	cmp	r7, #5
    2464:	bfc6      	itte	gt
    2466:	9b29      	ldrgt	r3, [sp, #164]	; 0xa4
    2468:	681a      	ldrgt	r2, [r3, #0]
    246a:	9a29      	ldrle	r2, [sp, #164]	; 0xa4
    TFLITE_DCHECK_LT(i, size_);
    246c:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
    2470:	f1b8 0f00 	cmp.w	r8, #0
    2474:	dd63      	ble.n	253e <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x172>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2476:	f1b8 0f05 	cmp.w	r8, #5
    247a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    247c:	bfc8      	it	gt
    247e:	681b      	ldrgt	r3, [r3, #0]
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    2480:	4293      	cmp	r3, r2
    2482:	d15e      	bne.n	2542 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x176>
  RuntimeShape input_shape = GetTensorShape(input);
  RuntimeShape output_shape = GetTensorShape(output);

  // Initialize cmsis-nn input dimensions
  cmsis_nn_dims input_dims;
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
    2484:	931e      	str	r3, [sp, #120]	; 0x78
  input_dims.h = input->dims->data[1];
    2486:	f8d9 1008 	ldr.w	r1, [r9, #8]
    248a:	688a      	ldr	r2, [r1, #8]
    248c:	921f      	str	r2, [sp, #124]	; 0x7c
  input_dims.w = input->dims->data[2];
    248e:	68c9      	ldr	r1, [r1, #12]
    2490:	910b      	str	r1, [sp, #44]	; 0x2c
    2492:	9120      	str	r1, [sp, #128]	; 0x80
    TFLITE_DCHECK_LT(i, size_);
    2494:	2f03      	cmp	r7, #3
    2496:	dd56      	ble.n	2546 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x17a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2498:	2f05      	cmp	r7, #5
    249a:	bfc6      	itte	gt
    249c:	9929      	ldrgt	r1, [sp, #164]	; 0xa4
    249e:	68c9      	ldrgt	r1, [r1, #12]
    24a0:	992c      	ldrle	r1, [sp, #176]	; 0xb0
  input_dims.c = input_shape.Dims(3);
    24a2:	9121      	str	r1, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
    24a4:	f1b8 0f03 	cmp.w	r8, #3
    24a8:	dd4f      	ble.n	254a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x17e>
  return &context->tensors[node->inputs->data[index]];
    24aa:	eb05 1a8a 	add.w	sl, r5, sl, lsl #6
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    24ae:	f1b8 0f05 	cmp.w	r8, #5
    24b2:	dc4c      	bgt.n	254e <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x182>
    24b4:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98

  // Initialize cmsis-nn filter dimensions
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_shape.Dims(3);
    24b8:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
  filter_dims.h = filter->dims->data[1];
    24bc:	f8da 0008 	ldr.w	r0, [sl, #8]
    24c0:	f8d0 c008 	ldr.w	ip, [r0, #8]
    24c4:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
  filter_dims.w = filter->dims->data[2];
    24c8:	68c0      	ldr	r0, [r0, #12]
    24ca:	901c      	str	r0, [sp, #112]	; 0x70
  filter_dims.c = input_dims.c;
    24cc:	911d      	str	r1, [sp, #116]	; 0x74

  // Initialize cmsis-nn output dimensions
  cmsis_nn_dims output_dims;
  output_dims.n = input_dims.n;
    24ce:	9316      	str	r3, [sp, #88]	; 0x58
  output_dims.h = output->dims->data[1];
    24d0:	9b08      	ldr	r3, [sp, #32]
    24d2:	689b      	ldr	r3, [r3, #8]
    24d4:	6899      	ldr	r1, [r3, #8]
    24d6:	9117      	str	r1, [sp, #92]	; 0x5c
  output_dims.w = output->dims->data[2];
    24d8:	68db      	ldr	r3, [r3, #12]
    24da:	9318      	str	r3, [sp, #96]	; 0x60
  output_dims.c = output_shape.Dims(3);
    24dc:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64

  int* buffer_idx = reinterpret_cast<int*>(node->user_data);
    24e0:	f8d4 a010 	ldr.w	sl, [r4, #16]

  TF_LITE_ENSURE_STATUS(CalculateOpData(
    24e4:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
    24e8:	f8cd e018 	str.w	lr, [sp, #24]
    24ec:	f815 e00b 	ldrb.w	lr, [r5, fp]
    24f0:	f8cd e014 	str.w	lr, [sp, #20]
    24f4:	9104      	str	r1, [sp, #16]
    24f6:	9303      	str	r3, [sp, #12]
    24f8:	f8cd c008 	str.w	ip, [sp, #8]
    24fc:	9001      	str	r0, [sp, #4]
    24fe:	9200      	str	r2, [sp, #0]
    2500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2504:	4621      	mov	r1, r4
    2506:	9809      	ldr	r0, [sp, #36]	; 0x24
    2508:	4e4d      	ldr	r6, [pc, #308]	; (2640 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x274>)
    250a:	47b0      	blx	r6
    250c:	2800      	cmp	r0, #0
    250e:	d04e      	beq.n	25ae <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
    2510:	4604      	mov	r4, r0
    if (size_ > kMaxSmallSize) {
    2512:	2f05      	cmp	r7, #5
    2514:	dd03      	ble.n	251e <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x152>
      delete[] dims_pointer_;
    2516:	9829      	ldr	r0, [sp, #164]	; 0xa4
    2518:	b108      	cbz	r0, 251e <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x152>
    251a:	4b4a      	ldr	r3, [pc, #296]	; (2644 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x278>)
    251c:	4798      	blx	r3
  } else {
    *buffer_idx = -1;
  }
#endif
  return kTfLiteOk;
}
    251e:	4620      	mov	r0, r4
    2520:	f60d 0ddc 	addw	sp, sp, #2268	; 0x8dc
    2524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  RuntimeShape() : size_(0) {}
    2528:	2300      	movs	r3, #0
    252a:	9328      	str	r3, [sp, #160]	; 0xa0
    252c:	e77c      	b.n	2428 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    252e:	a829      	add	r0, sp, #164	; 0xa4
    2530:	e775      	b.n	241e <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x52>
  RuntimeShape() : size_(0) {}
    2532:	9322      	str	r3, [sp, #136]	; 0x88
    2534:	e792      	b.n	245c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x90>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2536:	a823      	add	r0, sp, #140	; 0x8c
    2538:	e78b      	b.n	2452 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x86>
    TFLITE_DCHECK_LT(i, size_);
    253a:	4b43      	ldr	r3, [pc, #268]	; (2648 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
    253c:	4798      	blx	r3
    253e:	4b42      	ldr	r3, [pc, #264]	; (2648 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
    2540:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    2542:	4b41      	ldr	r3, [pc, #260]	; (2648 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
    2544:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    2546:	4b40      	ldr	r3, [pc, #256]	; (2648 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
    2548:	4798      	blx	r3
    254a:	4b3f      	ldr	r3, [pc, #252]	; (2648 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
    254c:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    254e:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
  filter_dims.n = output_shape.Dims(3);
    2552:	f8de 000c 	ldr.w	r0, [lr, #12]
    2556:	901a      	str	r0, [sp, #104]	; 0x68
  filter_dims.h = filter->dims->data[1];
    2558:	f8da 0008 	ldr.w	r0, [sl, #8]
    255c:	f8d0 c008 	ldr.w	ip, [r0, #8]
    2560:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
  filter_dims.w = filter->dims->data[2];
    2564:	68c0      	ldr	r0, [r0, #12]
    2566:	901c      	str	r0, [sp, #112]	; 0x70
  filter_dims.c = input_dims.c;
    2568:	911d      	str	r1, [sp, #116]	; 0x74
  output_dims.n = input_dims.n;
    256a:	9316      	str	r3, [sp, #88]	; 0x58
  output_dims.h = output->dims->data[1];
    256c:	9b08      	ldr	r3, [sp, #32]
    256e:	689b      	ldr	r3, [r3, #8]
    2570:	6899      	ldr	r1, [r3, #8]
    2572:	9117      	str	r1, [sp, #92]	; 0x5c
  output_dims.w = output->dims->data[2];
    2574:	68db      	ldr	r3, [r3, #12]
    2576:	9318      	str	r3, [sp, #96]	; 0x60
    2578:	f8de 600c 	ldr.w	r6, [lr, #12]
  output_dims.c = output_shape.Dims(3);
    257c:	9619      	str	r6, [sp, #100]	; 0x64
  int* buffer_idx = reinterpret_cast<int*>(node->user_data);
    257e:	f8d4 a010 	ldr.w	sl, [r4, #16]
  TF_LITE_ENSURE_STATUS(CalculateOpData(
    2582:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
    2586:	f8cd e018 	str.w	lr, [sp, #24]
    258a:	f815 e00b 	ldrb.w	lr, [r5, fp]
    258e:	f8cd e014 	str.w	lr, [sp, #20]
    2592:	9104      	str	r1, [sp, #16]
    2594:	9303      	str	r3, [sp, #12]
    2596:	f8cd c008 	str.w	ip, [sp, #8]
    259a:	9001      	str	r0, [sp, #4]
    259c:	9200      	str	r2, [sp, #0]
    259e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    25a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    25a2:	4621      	mov	r1, r4
    25a4:	9809      	ldr	r0, [sp, #36]	; 0x24
    25a6:	4e26      	ldr	r6, [pc, #152]	; (2640 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x274>)
    25a8:	47b0      	blx	r6
    25aa:	2800      	cmp	r0, #0
    25ac:	d13f      	bne.n	262e <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x262>
  if (input->type == kTfLiteInt8) {
    25ae:	f815 300b 	ldrb.w	r3, [r5, fp]
    25b2:	2b09      	cmp	r3, #9
    25b4:	d007      	beq.n	25c6 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1fa>
  node->user_data = buffer_idx;
    25b6:	f8c4 a010 	str.w	sl, [r4, #16]
    *buffer_idx = -1;
    25ba:	f04f 33ff 	mov.w	r3, #4294967295
    25be:	f8ca 3000 	str.w	r3, [sl]
  return kTfLiteOk;
    25c2:	2400      	movs	r4, #0
    25c4:	e028      	b.n	2618 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x24c>
    conv_params.input_offset = -input->params.zero_point;
    25c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
    25ca:	425b      	negs	r3, r3
    25cc:	930c      	str	r3, [sp, #48]	; 0x30
    conv_params.output_offset = output->params.zero_point;
    25ce:	9b08      	ldr	r3, [sp, #32]
    25d0:	691b      	ldr	r3, [r3, #16]
    25d2:	930d      	str	r3, [sp, #52]	; 0x34
    conv_params.stride.h = params->stride_height;
    25d4:	990a      	ldr	r1, [sp, #40]	; 0x28
    25d6:	688b      	ldr	r3, [r1, #8]
    25d8:	930f      	str	r3, [sp, #60]	; 0x3c
    conv_params.stride.w = params->stride_width;
    25da:	684b      	ldr	r3, [r1, #4]
    25dc:	930e      	str	r3, [sp, #56]	; 0x38
    conv_params.dilation.h = params->dilation_height_factor;
    25de:	694b      	ldr	r3, [r1, #20]
    25e0:	9313      	str	r3, [sp, #76]	; 0x4c
    conv_params.dilation.w = params->dilation_width_factor;
    25e2:	690b      	ldr	r3, [r1, #16]
    25e4:	9312      	str	r3, [sp, #72]	; 0x48
    conv_params.padding.h = data.padding.height;
    25e6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    25e8:	9311      	str	r3, [sp, #68]	; 0x44
    conv_params.padding.w = data.padding.width;
    25ea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    25ec:	9310      	str	r3, [sp, #64]	; 0x40
    conv_params.activation.min = data.output_activation_min;
    25ee:	f8dd 38d0 	ldr.w	r3, [sp, #2256]	; 0x8d0
    25f2:	9314      	str	r3, [sp, #80]	; 0x50
    conv_params.activation.max = data.output_activation_max;
    25f4:	f8dd 38d4 	ldr.w	r3, [sp, #2260]	; 0x8d4
    25f8:	9315      	str	r3, [sp, #84]	; 0x54
        &conv_params, &input_dims, &filter_dims, &output_dims);
    25fa:	ab16      	add	r3, sp, #88	; 0x58
    25fc:	aa1a      	add	r2, sp, #104	; 0x68
    25fe:	a91e      	add	r1, sp, #120	; 0x78
    2600:	a80c      	add	r0, sp, #48	; 0x30
    2602:	4d12      	ldr	r5, [pc, #72]	; (264c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x280>)
    2604:	47a8      	blx	r5
  node->user_data = buffer_idx;
    2606:	f8c4 a010 	str.w	sl, [r4, #16]
  if (buf_size > 0) {
    260a:	1e01      	subs	r1, r0, #0
    260c:	ddd5      	ble.n	25ba <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1ee>
    TF_LITE_ENSURE_STATUS(
    260e:	9809      	ldr	r0, [sp, #36]	; 0x24
    2610:	6c03      	ldr	r3, [r0, #64]	; 0x40
    2612:	4652      	mov	r2, sl
    2614:	4798      	blx	r3
    2616:	4604      	mov	r4, r0
    if (size_ > kMaxSmallSize) {
    2618:	f1b8 0f05 	cmp.w	r8, #5
    261c:	f77f af79 	ble.w	2512 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x146>
      delete[] dims_pointer_;
    2620:	9823      	ldr	r0, [sp, #140]	; 0x8c
    2622:	2800      	cmp	r0, #0
    2624:	f43f af75 	beq.w	2512 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x146>
    2628:	4b06      	ldr	r3, [pc, #24]	; (2644 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x278>)
    262a:	4798      	blx	r3
    262c:	e771      	b.n	2512 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x146>
  TF_LITE_ENSURE_STATUS(CalculateOpData(
    262e:	4604      	mov	r4, r0
    2630:	e7f6      	b.n	2620 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x254>
    2632:	bf00      	nop
    2634:	1ffffffe 	.word	0x1ffffffe
    2638:	0000cd6d 	.word	0x0000cd6d
    263c:	00018121 	.word	0x00018121
    2640:	0000221d 	.word	0x0000221d
    2644:	0000ccbd 	.word	0x0000ccbd
    2648:	0001739d 	.word	0x0001739d
    264c:	00009e65 	.word	0x00009e65

00002650 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_>:
TfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                           TfLiteConvParams* params, OpData* data,
                           const TfLiteTensor* input,
                           const TfLiteTensor* filter, const TfLiteTensor* bias,
                           TfLiteTensor* im2col, TfLiteTensor* hwcn_weights,
                           TfLiteTensor* output) {
    2650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2654:	b0d7      	sub	sp, #348	; 0x15c
    2656:	9d60      	ldr	r5, [sp, #384]	; 0x180
    2658:	f8dd 9184 	ldr.w	r9, [sp, #388]	; 0x184
    265c:	f8dd a188 	ldr.w	sl, [sp, #392]	; 0x188
    2660:	9c65      	ldr	r4, [sp, #404]	; 0x194
  const int32_t input_offset = -input->params.zero_point;
    2662:	6929      	ldr	r1, [r5, #16]
    2664:	9108      	str	r1, [sp, #32]
  const int32_t filter_offset = -filter->params.zero_point;
    2666:	f8d9 1010 	ldr.w	r1, [r9, #16]
    266a:	9109      	str	r1, [sp, #36]	; 0x24
  const int32_t output_offset = output->params.zero_point;
    266c:	6921      	ldr	r1, [r4, #16]
    266e:	9125      	str	r1, [sp, #148]	; 0x94

  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
  op_params.padding_values.width = data->padding.width;
    2670:	6819      	ldr	r1, [r3, #0]
    2672:	9100      	str	r1, [sp, #0]
  op_params.padding_values.height = data->padding.height;
    2674:	6859      	ldr	r1, [r3, #4]
    2676:	9101      	str	r1, [sp, #4]
  op_params.stride_width = params->stride_width;
    2678:	f8d2 b004 	ldr.w	fp, [r2, #4]
  op_params.stride_height = params->stride_height;
    267c:	6891      	ldr	r1, [r2, #8]
    267e:	9102      	str	r1, [sp, #8]
  op_params.dilation_width_factor = params->dilation_width_factor;
    2680:	6911      	ldr	r1, [r2, #16]
    2682:	9103      	str	r1, [sp, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
    2684:	6952      	ldr	r2, [r2, #20]
    2686:	9204      	str	r2, [sp, #16]
  op_params.input_offset = input_offset;
  op_params.weights_offset = filter_offset;
  op_params.output_offset = output_offset;
  op_params.output_multiplier = data->output_multiplier;
    2688:	691a      	ldr	r2, [r3, #16]
    268a:	9213      	str	r2, [sp, #76]	; 0x4c
  op_params.output_shift = -data->output_shift;
    268c:	695f      	ldr	r7, [r3, #20]
  op_params.quantized_activation_min = data->output_activation_min;
    268e:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
    2692:	9217      	str	r2, [sp, #92]	; 0x5c
  op_params.quantized_activation_max = data->output_activation_max;
    2694:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
    2698:	9318      	str	r3, [sp, #96]	; 0x60
  if (tensor == nullptr) {
    269a:	2d00      	cmp	r5, #0
    269c:	f000 815f 	beq.w	295e <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x30e>
  const int dims_size = dims->size;
    26a0:	f8d5 8008 	ldr.w	r8, [r5, #8]
    26a4:	f858 6b04 	ldr.w	r6, [r8], #4
    size_ = dimensions_count;
    26a8:	9638      	str	r6, [sp, #224]	; 0xe0
    if (dimensions_count > kMaxSmallSize) {
    26aa:	2e05      	cmp	r6, #5
    26ac:	f340 815b 	ble.w	2966 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x316>
      dims_pointer_ = new int32[dimensions_count];
    26b0:	4bb0      	ldr	r3, [pc, #704]	; (2974 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x324>)
    26b2:	429e      	cmp	r6, r3
    26b4:	bf94      	ite	ls
    26b6:	00b0      	lslls	r0, r6, #2
    26b8:	f04f 30ff 	movhi.w	r0, #4294967295
    26bc:	4bae      	ldr	r3, [pc, #696]	; (2978 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x328>)
    26be:	4798      	blx	r3
    26c0:	9039      	str	r0, [sp, #228]	; 0xe4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    26c2:	00b2      	lsls	r2, r6, #2
    26c4:	4641      	mov	r1, r8
    26c6:	4bad      	ldr	r3, [pc, #692]	; (297c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x32c>)
    26c8:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    26ca:	686b      	ldr	r3, [r5, #4]
    26cc:	930c      	str	r3, [sp, #48]	; 0x30
  if (tensor == nullptr) {
    26ce:	f1b9 0f00 	cmp.w	r9, #0
    26d2:	f000 814a 	beq.w	296a <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x31a>
  const int dims_size = dims->size;
    26d6:	f8d9 6008 	ldr.w	r6, [r9, #8]
    26da:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    26de:	953e      	str	r5, [sp, #248]	; 0xf8
    if (dimensions_count > kMaxSmallSize) {
    26e0:	2d05      	cmp	r5, #5
    26e2:	f340 814d 	ble.w	2980 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x330>
      dims_pointer_ = new int32[dimensions_count];
    26e6:	4ba3      	ldr	r3, [pc, #652]	; (2974 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x324>)
    26e8:	429d      	cmp	r5, r3
    26ea:	bf94      	ite	ls
    26ec:	00a8      	lslls	r0, r5, #2
    26ee:	f04f 30ff 	movhi.w	r0, #4294967295
    26f2:	4ba1      	ldr	r3, [pc, #644]	; (2978 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x328>)
    26f4:	4798      	blx	r3
    26f6:	903f      	str	r0, [sp, #252]	; 0xfc
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    26f8:	00aa      	lsls	r2, r5, #2
    26fa:	4631      	mov	r1, r6
    26fc:	4b9f      	ldr	r3, [pc, #636]	; (297c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x32c>)
    26fe:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    2700:	f8d9 3004 	ldr.w	r3, [r9, #4]
    2704:	9326      	str	r3, [sp, #152]	; 0x98
  if (tensor == nullptr) {
    2706:	f1ba 0f00 	cmp.w	sl, #0
    270a:	f000 813b 	beq.w	2984 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x334>
  const int dims_size = dims->size;
    270e:	f8da 6008 	ldr.w	r6, [sl, #8]
    2712:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    2716:	9544      	str	r5, [sp, #272]	; 0x110
    if (dimensions_count > kMaxSmallSize) {
    2718:	2d05      	cmp	r5, #5
    271a:	f340 8137 	ble.w	298c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x33c>
      dims_pointer_ = new int32[dimensions_count];
    271e:	4b95      	ldr	r3, [pc, #596]	; (2974 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x324>)
    2720:	429d      	cmp	r5, r3
    2722:	bf94      	ite	ls
    2724:	00a8      	lslls	r0, r5, #2
    2726:	f04f 30ff 	movhi.w	r0, #4294967295
    272a:	4b93      	ldr	r3, [pc, #588]	; (2978 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x328>)
    272c:	4798      	blx	r3
    272e:	9045      	str	r0, [sp, #276]	; 0x114
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2730:	00aa      	lsls	r2, r5, #2
    2732:	4631      	mov	r1, r6
    2734:	4b91      	ldr	r3, [pc, #580]	; (297c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x32c>)
    2736:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    2738:	f8da 3004 	ldr.w	r3, [sl, #4]
    273c:	931a      	str	r3, [sp, #104]	; 0x68
  if (tensor == nullptr) {
    273e:	2c00      	cmp	r4, #0
    2740:	f000 8126 	beq.w	2990 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x340>
  const int dims_size = dims->size;
    2744:	68a6      	ldr	r6, [r4, #8]
    2746:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    274a:	954a      	str	r5, [sp, #296]	; 0x128
    if (dimensions_count > kMaxSmallSize) {
    274c:	2d05      	cmp	r5, #5
    274e:	f340 8123 	ble.w	2998 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x348>
      dims_pointer_ = new int32[dimensions_count];
    2752:	4b88      	ldr	r3, [pc, #544]	; (2974 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x324>)
    2754:	429d      	cmp	r5, r3
    2756:	bf94      	ite	ls
    2758:	00a8      	lslls	r0, r5, #2
    275a:	f04f 30ff 	movhi.w	r0, #4294967295
    275e:	4b86      	ldr	r3, [pc, #536]	; (2978 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x328>)
    2760:	4798      	blx	r3
    2762:	904b      	str	r0, [sp, #300]	; 0x12c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2764:	00aa      	lsls	r2, r5, #2
    2766:	4631      	mov	r1, r6
    2768:	4b84      	ldr	r3, [pc, #528]	; (297c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x32c>)
    276a:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    276c:	6863      	ldr	r3, [r4, #4]
    276e:	9306      	str	r3, [sp, #24]
  if (tensor == nullptr) {
    2770:	9b63      	ldr	r3, [sp, #396]	; 0x18c
    2772:	2b00      	cmp	r3, #0
    2774:	f000 8112 	beq.w	299c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x34c>
  TfLiteIntArray* dims = tensor->dims;
    2778:	9b63      	ldr	r3, [sp, #396]	; 0x18c
    277a:	689d      	ldr	r5, [r3, #8]
  const int dims_size = dims->size;
    277c:	682c      	ldr	r4, [r5, #0]
    size_ = dimensions_count;
    277e:	9450      	str	r4, [sp, #320]	; 0x140
    if (dimensions_count > kMaxSmallSize) {
    2780:	2c05      	cmp	r4, #5
    2782:	f340 810d 	ble.w	29a0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x350>
      dims_pointer_ = new int32[dimensions_count];
    2786:	4b7b      	ldr	r3, [pc, #492]	; (2974 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x324>)
    2788:	429c      	cmp	r4, r3
    278a:	bf94      	ite	ls
    278c:	00a0      	lslls	r0, r4, #2
    278e:	f04f 30ff 	movhi.w	r0, #4294967295
    2792:	4b79      	ldr	r3, [pc, #484]	; (2978 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x328>)
    2794:	4798      	blx	r3
    2796:	9051      	str	r0, [sp, #324]	; 0x144
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2798:	00a2      	lsls	r2, r4, #2
    279a:	1d29      	adds	r1, r5, #4
    279c:	4b77      	ldr	r3, [pc, #476]	; (297c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x32c>)
    279e:	4798      	blx	r3
  op_params.stride_width = params->stride_width;
    27a0:	fa0f f38b 	sxth.w	r3, fp
    27a4:	930d      	str	r3, [sp, #52]	; 0x34
  op_params.stride_height = params->stride_height;
    27a6:	f9bd 5008 	ldrsh.w	r5, [sp, #8]
  op_params.dilation_width_factor = params->dilation_width_factor;
    27aa:	f9bd e00c 	ldrsh.w	lr, [sp, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
    27ae:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
  op_params.padding_values.width = data->padding.width;
    27b2:	f9bd 4000 	ldrsh.w	r4, [sp]
  op_params.padding_values.height = data->padding.height;
    27b6:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    27ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    27bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
    27be:	4293      	cmp	r3, r2
    27c0:	f300 80f0 	bgt.w	29a4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x354>

  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    27c4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    27c6:	2b04      	cmp	r3, #4
    27c8:	f040 80ee 	bne.w	29a8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x358>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    27cc:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    27ce:	2b04      	cmp	r3, #4
    27d0:	f040 80ec 	bne.w	29ac <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x35c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    27d4:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    27d6:	2b04      	cmp	r3, #4
    27d8:	f040 80ea 	bne.w	29b0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x360>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    27dc:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    27de:	930a      	str	r3, [sp, #40]	; 0x28
    27e0:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
    27e2:	921e      	str	r2, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    27e4:	429a      	cmp	r2, r3
    27e6:	f040 80e5 	bne.w	29b4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x364>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    27ea:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    27ec:	9307      	str	r3, [sp, #28]
    27ee:	f8dd 9108 	ldr.w	r9, [sp, #264]	; 0x108
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    27f2:	4599      	cmp	r9, r3
    27f4:	f040 80e0 	bne.w	29b8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x368>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    27f8:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    27fa:	930b      	str	r3, [sp, #44]	; 0x2c
    27fc:	9a4e      	ldr	r2, [sp, #312]	; 0x138
    27fe:	9212      	str	r2, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    2800:	429a      	cmp	r2, r3
    2802:	f040 80db 	bne.w	29bc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x36c>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (bias_data) {
    2806:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    2808:	b1ab      	cbz	r3, 2836 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1e6>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    280a:	9a44      	ldr	r2, [sp, #272]	; 0x110
    280c:	2a05      	cmp	r2, #5
    280e:	bfcc      	ite	gt
    2810:	9945      	ldrgt	r1, [sp, #276]	; 0x114
    2812:	a945      	addle	r1, sp, #276	; 0x114
    for (int i = 0; i < size_; i++) {
    2814:	2a00      	cmp	r2, #0
    2816:	f340 80d3 	ble.w	29c0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x370>
    281a:	460b      	mov	r3, r1
    281c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    2820:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
    2822:	f853 0b04 	ldr.w	r0, [r3], #4
    2826:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
    282a:	4299      	cmp	r1, r3
    282c:	d1f9      	bne.n	2822 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1d2>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    282e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2830:	429a      	cmp	r2, r3
    2832:	f040 80c7 	bne.w	29c4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x374>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2836:	f8dd b0e8 	ldr.w	fp, [sp, #232]	; 0xe8
    283a:	f8dd c0ec 	ldr.w	ip, [sp, #236]	; 0xec
    283e:	9b40      	ldr	r3, [sp, #256]	; 0x100
    2840:	9305      	str	r3, [sp, #20]
    2842:	f8dd a104 	ldr.w	sl, [sp, #260]	; 0x104
    2846:	994c      	ldr	r1, [sp, #304]	; 0x130
    2848:	9114      	str	r1, [sp, #80]	; 0x50
    284a:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    284c:	461a      	mov	r2, r3
    284e:	9322      	str	r3, [sp, #136]	; 0x88
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
    2850:	981e      	ldr	r0, [sp, #120]	; 0x78
    2852:	2800      	cmp	r0, #0
    2854:	f340 81f8 	ble.w	2c48 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x5f8>
  op_params.output_shift = -data->output_shift;
    2858:	4279      	negs	r1, r7
    285a:	2900      	cmp	r1, #0
    285c:	bfd4      	ite	le
    285e:	4638      	movle	r0, r7
    2860:	2000      	movgt	r0, #0
    2862:	9024      	str	r0, [sp, #144]	; 0x90
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
  assert(exponent <= 31);
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    2864:	2301      	movs	r3, #1
    2866:	4083      	lsls	r3, r0
    2868:	1e58      	subs	r0, r3, #1
    286a:	9032      	str	r0, [sp, #200]	; 0xc8
  return a >> offset;
    286c:	1040      	asrs	r0, r0, #1
    286e:	9033      	str	r0, [sp, #204]	; 0xcc
    2870:	9812      	ldr	r0, [sp, #72]	; 0x48
    2872:	902f      	str	r0, [sp, #188]	; 0xbc
    2874:	4617      	mov	r7, r2
    2876:	4613      	mov	r3, r2
    2878:	9a14      	ldr	r2, [sp, #80]	; 0x50
    287a:	fb03 f302 	mul.w	r3, r3, r2
    287e:	fb00 f003 	mul.w	r0, r0, r3
    2882:	9030      	str	r0, [sp, #192]	; 0xc0
    2884:	9806      	ldr	r0, [sp, #24]
    2886:	9020      	str	r0, [sp, #128]	; 0x80
    2888:	fb0c f30b 	mul.w	r3, ip, fp
    288c:	9807      	ldr	r0, [sp, #28]
    288e:	fb00 f203 	mul.w	r2, r0, r3
    2892:	922e      	str	r2, [sp, #184]	; 0xb8
    2894:	f1c8 0800 	rsb	r8, r8, #0
    2898:	f8cd 80c4 	str.w	r8, [sp, #196]	; 0xc4
    289c:	4263      	negs	r3, r4
    289e:	932c      	str	r3, [sp, #176]	; 0xb0
    28a0:	fb08 f30c 	mul.w	r3, r8, ip
    28a4:	1b1b      	subs	r3, r3, r4
    28a6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    28a8:	fb00 4403 	mla	r4, r0, r3, r4
    28ac:	941d      	str	r4, [sp, #116]	; 0x74
    28ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
    28b0:	461a      	mov	r2, r3
    28b2:	fb02 f407 	mul.w	r4, r2, r7
    28b6:	942b      	str	r4, [sp, #172]	; 0xac
    28b8:	952a      	str	r5, [sp, #168]	; 0xa8
    28ba:	4602      	mov	r2, r0
    28bc:	fb00 f30c 	mul.w	r3, r0, ip
    28c0:	fb03 f005 	mul.w	r0, r3, r5
    28c4:	9036      	str	r0, [sp, #216]	; 0xd8
    28c6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    28c8:	9428      	str	r4, [sp, #160]	; 0xa0
    28ca:	4610      	mov	r0, r2
    28cc:	fb02 f404 	mul.w	r4, r2, r4
    28d0:	9429      	str	r4, [sp, #164]	; 0xa4
    28d2:	f8cd 9010 	str.w	r9, [sp, #16]
    28d6:	9a05      	ldr	r2, [sp, #20]
    28d8:	fb0a f202 	mul.w	r2, sl, r2
    28dc:	fb09 f202 	mul.w	r2, r9, r2
    28e0:	922d      	str	r2, [sp, #180]	; 0xb4
    28e2:	fb09 f20a 	mul.w	r2, r9, sl
    28e6:	9211      	str	r2, [sp, #68]	; 0x44
    28e8:	9610      	str	r6, [sp, #64]	; 0x40
    28ea:	fb03 f306 	mul.w	r3, r3, r6
    28ee:	930f      	str	r3, [sp, #60]	; 0x3c
    28f0:	f8cd e008 	str.w	lr, [sp, #8]
    28f4:	fb00 f30e 	mul.w	r3, r0, lr
    28f8:	9303      	str	r3, [sp, #12]
    28fa:	2300      	movs	r3, #0
    28fc:	9306      	str	r3, [sp, #24]
  std::int64_t b_64(b);
    28fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2900:	461c      	mov	r4, r3
    2902:	17dd      	asrs	r5, r3, #31
    2904:	e9cd 4534 	strd	r4, r5, [sp, #208]	; 0xd0

inline int32 MultiplyByQuantizedMultiplier(int32 x, int32 quantized_multiplier,
                                           int shift) {
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
    2908:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
    290c:	9337      	str	r3, [sp, #220]	; 0xdc
    for (int out_y = 0; out_y < output_height; ++out_y) {
    290e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    2910:	2b00      	cmp	r3, #0
    2912:	f340 818a 	ble.w	2c2a <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x5da>
    2916:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    2918:	9323      	str	r3, [sp, #140]	; 0x8c
    291a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    291c:	9319      	str	r3, [sp, #100]	; 0x64
    291e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    2920:	931f      	str	r3, [sp, #124]	; 0x7c
    2922:	2300      	movs	r3, #0
    2924:	931c      	str	r3, [sp, #112]	; 0x70
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    2926:	465b      	mov	r3, fp
    2928:	46d3      	mov	fp, sl
    292a:	46e2      	mov	sl, ip
    292c:	469c      	mov	ip, r3
      for (int out_x = 0; out_x < output_width; ++out_x) {
    292e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2930:	2b00      	cmp	r3, #0
    2932:	f340 8163 	ble.w	2bfc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x5ac>
    2936:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    2938:	930e      	str	r3, [sp, #56]	; 0x38
    293a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    293c:	9316      	str	r3, [sp, #88]	; 0x58
    293e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    2940:	9315      	str	r3, [sp, #84]	; 0x54
    2942:	2300      	movs	r3, #0
    2944:	931b      	str	r3, [sp, #108]	; 0x6c
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    2946:	46e0      	mov	r8, ip
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    2948:	9b12      	ldr	r3, [sp, #72]	; 0x48
    294a:	2b00      	cmp	r3, #0
    294c:	f340 8142 	ble.w	2bd4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x584>
    2950:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2952:	9321      	str	r3, [sp, #132]	; 0x84
    2954:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2956:	9327      	str	r3, [sp, #156]	; 0x9c
    2958:	f04f 0c00 	mov.w	ip, #0
    295c:	e106      	b.n	2b6c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x51c>
  RuntimeShape() : size_(0) {}
    295e:	2300      	movs	r3, #0
    2960:	9338      	str	r3, [sp, #224]	; 0xe0
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    2962:	930c      	str	r3, [sp, #48]	; 0x30
    2964:	e6b3      	b.n	26ce <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x7e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2966:	a839      	add	r0, sp, #228	; 0xe4
    2968:	e6ab      	b.n	26c2 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x72>
  RuntimeShape() : size_(0) {}
    296a:	2300      	movs	r3, #0
    296c:	933e      	str	r3, [sp, #248]	; 0xf8
    296e:	9326      	str	r3, [sp, #152]	; 0x98
    2970:	e6c9      	b.n	2706 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xb6>
    2972:	bf00      	nop
    2974:	1ffffffe 	.word	0x1ffffffe
    2978:	0000cd6d 	.word	0x0000cd6d
    297c:	00018121 	.word	0x00018121
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2980:	a83f      	add	r0, sp, #252	; 0xfc
    2982:	e6b9      	b.n	26f8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xa8>
  RuntimeShape() : size_(0) {}
    2984:	2300      	movs	r3, #0
    2986:	9344      	str	r3, [sp, #272]	; 0x110
    2988:	931a      	str	r3, [sp, #104]	; 0x68
    298a:	e6d8      	b.n	273e <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xee>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    298c:	a845      	add	r0, sp, #276	; 0x114
    298e:	e6cf      	b.n	2730 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xe0>
  RuntimeShape() : size_(0) {}
    2990:	2300      	movs	r3, #0
    2992:	934a      	str	r3, [sp, #296]	; 0x128
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    2994:	9306      	str	r3, [sp, #24]
    2996:	e6eb      	b.n	2770 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x120>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2998:	a84b      	add	r0, sp, #300	; 0x12c
    299a:	e6e3      	b.n	2764 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x114>
  RuntimeShape() : size_(0) {}
    299c:	9350      	str	r3, [sp, #320]	; 0x140
    299e:	e6ff      	b.n	27a0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x150>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    29a0:	a851      	add	r0, sp, #324	; 0x144
    29a2:	e6f9      	b.n	2798 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x148>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    29a4:	4b85      	ldr	r3, [pc, #532]	; (2bbc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x56c>)
    29a6:	4798      	blx	r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    29a8:	4b84      	ldr	r3, [pc, #528]	; (2bbc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x56c>)
    29aa:	4798      	blx	r3
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    29ac:	4b83      	ldr	r3, [pc, #524]	; (2bbc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x56c>)
    29ae:	4798      	blx	r3
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    29b0:	4b82      	ldr	r3, [pc, #520]	; (2bbc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x56c>)
    29b2:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    29b4:	4b81      	ldr	r3, [pc, #516]	; (2bbc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x56c>)
    29b6:	4798      	blx	r3
    29b8:	4b80      	ldr	r3, [pc, #512]	; (2bbc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x56c>)
    29ba:	4798      	blx	r3
    29bc:	4b7f      	ldr	r3, [pc, #508]	; (2bbc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x56c>)
    29be:	4798      	blx	r3
    int buffer_size = 1;
    29c0:	2201      	movs	r2, #1
    29c2:	e734      	b.n	282e <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1de>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    29c4:	4b7d      	ldr	r3, [pc, #500]	; (2bbc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x56c>)
    29c6:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    29c8:	4b7c      	ldr	r3, [pc, #496]	; (2bbc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x56c>)
    29ca:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    29cc:	4b7b      	ldr	r3, [pc, #492]	; (2bbc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x56c>)
    29ce:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    29d0:	4b7a      	ldr	r3, [pc, #488]	; (2bbc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x56c>)
    29d2:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    29d4:	4b79      	ldr	r3, [pc, #484]	; (2bbc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x56c>)
    29d6:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    29d8:	4b78      	ldr	r3, [pc, #480]	; (2bbc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x56c>)
    29da:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    29dc:	4b77      	ldr	r3, [pc, #476]	; (2bbc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x56c>)
    29de:	4798      	blx	r3
          const int in_x_origin = (out_x * stride_width) - pad_width;
          const int in_y_origin = (out_y * stride_height) - pad_height;
          int32 acc = 0;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    29e0:	3301      	adds	r3, #1
    29e2:	454b      	cmp	r3, r9
    29e4:	d030      	beq.n	2a48 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x3f8>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    29e6:	2a00      	cmp	r2, #0
    29e8:	dbfa      	blt.n	29e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x390>
    29ea:	4552      	cmp	r2, sl
    29ec:	daf8      	bge.n	29e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x390>
    29ee:	2900      	cmp	r1, #0
    29f0:	dbf6      	blt.n	29e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x390>
    29f2:	4541      	cmp	r1, r8
    29f4:	daf4      	bge.n	29e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x390>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    29f6:	9c06      	ldr	r4, [sp, #24]
    29f8:	2c00      	cmp	r4, #0
    29fa:	dbe5      	blt.n	29c8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x378>
    29fc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    29fe:	42a5      	cmp	r5, r4
    2a00:	dde2      	ble.n	29c8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x378>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    2a02:	2b00      	cmp	r3, #0
    2a04:	dbe2      	blt.n	29cc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x37c>
    2a06:	9c07      	ldr	r4, [sp, #28]
    2a08:	429c      	cmp	r4, r3
    2a0a:	dddf      	ble.n	29cc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x37c>
                    (in_y < input_height)) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
                                                      in_x, in_channel)];
    2a0c:	5cf4      	ldrb	r4, [r6, r3]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    2a0e:	f1bc 0f00 	cmp.w	ip, #0
    2a12:	dbdd      	blt.n	29d0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x380>
    2a14:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2a16:	45bc      	cmp	ip, r7
    2a18:	dada      	bge.n	29d0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x380>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    2a1a:	f1be 0f00 	cmp.w	lr, #0
    2a1e:	dbd9      	blt.n	29d4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x384>
    2a20:	9f05      	ldr	r7, [sp, #20]
    2a22:	4577      	cmp	r7, lr
    2a24:	ddd6      	ble.n	29d4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x384>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    2a26:	2800      	cmp	r0, #0
    2a28:	dbd6      	blt.n	29d8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x388>
    2a2a:	4583      	cmp	fp, r0
    2a2c:	ddd4      	ble.n	29d8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x388>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    2a2e:	4599      	cmp	r9, r3
    2a30:	ddd4      	ble.n	29dc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x38c>
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
                                         filter_x, in_channel)];
    2a32:	9f00      	ldr	r7, [sp, #0]
    2a34:	5cfd      	ldrb	r5, [r7, r3]
                  acc +=
                      (filter_val + filter_offset) * (input_val + input_offset);
    2a36:	9f09      	ldr	r7, [sp, #36]	; 0x24
    2a38:	1bed      	subs	r5, r5, r7
    2a3a:	9f08      	ldr	r7, [sp, #32]
    2a3c:	1be4      	subs	r4, r4, r7
    2a3e:	9f01      	ldr	r7, [sp, #4]
    2a40:	fb04 7405 	mla	r4, r4, r5, r7
    2a44:	9401      	str	r4, [sp, #4]
    2a46:	e7cb      	b.n	29e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x390>
    2a48:	9f00      	ldr	r7, [sp, #0]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    2a4a:	3001      	adds	r0, #1
    2a4c:	9b02      	ldr	r3, [sp, #8]
    2a4e:	441a      	add	r2, r3
    2a50:	9b04      	ldr	r3, [sp, #16]
    2a52:	441f      	add	r7, r3
    2a54:	9b03      	ldr	r3, [sp, #12]
    2a56:	441e      	add	r6, r3
    2a58:	4558      	cmp	r0, fp
    2a5a:	d005      	beq.n	2a68 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x418>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    2a5c:	f1b9 0f00 	cmp.w	r9, #0
    2a60:	ddf3      	ble.n	2a4a <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x3fa>
    2a62:	2300      	movs	r3, #0
    2a64:	9700      	str	r7, [sp, #0]
    2a66:	e7be      	b.n	29e6 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x396>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    2a68:	f10e 0e01 	add.w	lr, lr, #1
    2a6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2a6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    2a70:	4413      	add	r3, r2
    2a72:	930d      	str	r3, [sp, #52]	; 0x34
    2a74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2a76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2a78:	4413      	add	r3, r2
    2a7a:	930c      	str	r3, [sp, #48]	; 0x30
    2a7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2a7e:	4419      	add	r1, r3
    2a80:	9b05      	ldr	r3, [sp, #20]
    2a82:	459e      	cmp	lr, r3
    2a84:	d009      	beq.n	2a9a <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x44a>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    2a86:	f1bb 0f00 	cmp.w	fp, #0
    2a8a:	dded      	ble.n	2a68 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x418>
    2a8c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    2a8e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    2a90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2a92:	2000      	movs	r0, #0
    2a94:	e7e2      	b.n	2a5c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x40c>
          int32 acc = 0;
    2a96:	2300      	movs	r3, #0
    2a98:	9301      	str	r3, [sp, #4]
                }
              }
            }
          }
          if (bias_data) {
    2a9a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    2a9c:	b123      	cbz	r3, 2aa8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x458>
            acc += bias_data[out_channel];
    2a9e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
    2aa2:	9a01      	ldr	r2, [sp, #4]
    2aa4:	441a      	add	r2, r3
    2aa6:	9201      	str	r2, [sp, #4]
  int right_shift = shift > 0 ? 0 : -shift;
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    2aa8:	9a01      	ldr	r2, [sp, #4]
    2aaa:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    2aac:	409a      	lsls	r2, r3
    2aae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2ab0:	4293      	cmp	r3, r2
    2ab2:	d067      	beq.n	2b84 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x534>
  std::int64_t a_64(a);
    2ab4:	17d5      	asrs	r5, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    2ab6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    2ab8:	fb02 f103 	mul.w	r1, r2, r3
    2abc:	9813      	ldr	r0, [sp, #76]	; 0x4c
    2abe:	fb00 1105 	mla	r1, r0, r5, r1
    2ac2:	fba2 2300 	umull	r2, r3, r2, r0
    2ac6:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    2ac8:	2a00      	cmp	r2, #0
    2aca:	f173 0100 	sbcs.w	r1, r3, #0
    2ace:	f2c0 80cd 	blt.w	2c6c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x61c>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    2ad2:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    2ad6:	f143 0300 	adc.w	r3, r3, #0
    2ada:	4610      	mov	r0, r2
    2adc:	4619      	mov	r1, r3
    2ade:	2a00      	cmp	r2, #0
    2ae0:	f173 0400 	sbcs.w	r4, r3, #0
    2ae4:	f2c0 80d7 	blt.w	2c96 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x646>
    2ae8:	0fc3      	lsrs	r3, r0, #31
    2aea:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  assert(exponent >= 0);
    2aee:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2af0:	2a00      	cmp	r2, #0
    2af2:	db4d      	blt.n	2b90 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x540>
  assert(exponent <= 31);
    2af4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2af6:	2a1f      	cmp	r2, #31
    2af8:	dc51      	bgt.n	2b9e <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x54e>
  return a + b;
    2afa:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    2afc:	eb02 71d3 	add.w	r1, r2, r3, lsr #31
  return a & b;
    2b00:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    2b02:	401a      	ands	r2, r3
  return a >> offset;
    2b04:	9824      	ldr	r0, [sp, #144]	; 0x90
    2b06:	4103      	asrs	r3, r0
  return a + b;
    2b08:	4291      	cmp	r1, r2
    2b0a:	bfb8      	it	lt
    2b0c:	3301      	addlt	r3, #1
          }
          acc = MultiplyByQuantizedMultiplier(acc, output_multiplier,
                                              output_shift);
          acc += output_offset;
    2b0e:	9a25      	ldr	r2, [sp, #148]	; 0x94
    2b10:	4413      	add	r3, r2
    2b12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    2b14:	4293      	cmp	r3, r2
    2b16:	bfb8      	it	lt
    2b18:	4613      	movlt	r3, r2
    2b1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    2b1c:	4293      	cmp	r3, r2
    2b1e:	bfa8      	it	ge
    2b20:	4613      	movge	r3, r2
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    2b22:	9a06      	ldr	r2, [sp, #24]
    2b24:	2a00      	cmp	r2, #0
    2b26:	db41      	blt.n	2bac <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x55c>
    2b28:	991e      	ldr	r1, [sp, #120]	; 0x78
    2b2a:	4291      	cmp	r1, r2
    2b2c:	dd3e      	ble.n	2bac <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x55c>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    2b2e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    2b30:	2a00      	cmp	r2, #0
    2b32:	db3d      	blt.n	2bb0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x560>
    2b34:	9914      	ldr	r1, [sp, #80]	; 0x50
    2b36:	428a      	cmp	r2, r1
    2b38:	da3a      	bge.n	2bb0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x560>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    2b3a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    2b3c:	2a00      	cmp	r2, #0
    2b3e:	db39      	blt.n	2bb4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x564>
    2b40:	9922      	ldr	r1, [sp, #136]	; 0x88
    2b42:	428a      	cmp	r2, r1
    2b44:	da36      	bge.n	2bb4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x564>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    2b46:	f1bc 0f00 	cmp.w	ip, #0
    2b4a:	db35      	blt.n	2bb8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x568>
    2b4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    2b4e:	4594      	cmp	ip, r2
    2b50:	da32      	bge.n	2bb8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x568>
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              static_cast<uint8>(acc);
    2b52:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    2b54:	f802 3b01 	strb.w	r3, [r2], #1
    2b58:	9227      	str	r2, [sp, #156]	; 0x9c
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    2b5a:	f10c 0c01 	add.w	ip, ip, #1
    2b5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    2b60:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    2b62:	4413      	add	r3, r2
    2b64:	9321      	str	r3, [sp, #132]	; 0x84
    2b66:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2b68:	459c      	cmp	ip, r3
    2b6a:	d033      	beq.n	2bd4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x584>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    2b6c:	9b05      	ldr	r3, [sp, #20]
    2b6e:	2b00      	cmp	r3, #0
    2b70:	dd91      	ble.n	2a96 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x446>
    2b72:	9923      	ldr	r1, [sp, #140]	; 0x8c
    2b74:	9b16      	ldr	r3, [sp, #88]	; 0x58
    2b76:	930c      	str	r3, [sp, #48]	; 0x30
    2b78:	9b21      	ldr	r3, [sp, #132]	; 0x84
    2b7a:	930d      	str	r3, [sp, #52]	; 0x34
    2b7c:	2300      	movs	r3, #0
    2b7e:	9301      	str	r3, [sp, #4]
    2b80:	469e      	mov	lr, r3
    2b82:	e780      	b.n	2a86 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x436>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    2b84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    2b88:	d194      	bne.n	2ab4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x464>
    2b8a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    2b8e:	e7ae      	b.n	2aee <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x49e>
  assert(exponent >= 0);
    2b90:	4b0b      	ldr	r3, [pc, #44]	; (2bc0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x570>)
    2b92:	4a0c      	ldr	r2, [pc, #48]	; (2bc4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x574>)
    2b94:	f44f 71b3 	mov.w	r1, #358	; 0x166
    2b98:	480b      	ldr	r0, [pc, #44]	; (2bc8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x578>)
    2b9a:	4c0c      	ldr	r4, [pc, #48]	; (2bcc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x57c>)
    2b9c:	47a0      	blx	r4
  assert(exponent <= 31);
    2b9e:	4b0c      	ldr	r3, [pc, #48]	; (2bd0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x580>)
    2ba0:	4a08      	ldr	r2, [pc, #32]	; (2bc4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x574>)
    2ba2:	f240 1167 	movw	r1, #359	; 0x167
    2ba6:	4808      	ldr	r0, [pc, #32]	; (2bc8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x578>)
    2ba8:	4c08      	ldr	r4, [pc, #32]	; (2bcc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x57c>)
    2baa:	47a0      	blx	r4
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    2bac:	4b03      	ldr	r3, [pc, #12]	; (2bbc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x56c>)
    2bae:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    2bb0:	4b02      	ldr	r3, [pc, #8]	; (2bbc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x56c>)
    2bb2:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    2bb4:	4b01      	ldr	r3, [pc, #4]	; (2bbc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x56c>)
    2bb6:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    2bb8:	4b00      	ldr	r3, [pc, #0]	; (2bbc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x56c>)
    2bba:	4798      	blx	r3
    2bbc:	0001739d 	.word	0x0001739d
    2bc0:	0003b9f0 	.word	0x0003b9f0
    2bc4:	0003b904 	.word	0x0003b904
    2bc8:	0003ba00 	.word	0x0003ba00
    2bcc:	000173ad 	.word	0x000173ad
    2bd0:	0003ba34 	.word	0x0003ba34
      for (int out_x = 0; out_x < output_width; ++out_x) {
    2bd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    2bd6:	3301      	adds	r3, #1
    2bd8:	931b      	str	r3, [sp, #108]	; 0x6c
    2bda:	9a15      	ldr	r2, [sp, #84]	; 0x54
    2bdc:	992f      	ldr	r1, [sp, #188]	; 0xbc
    2bde:	440a      	add	r2, r1
    2be0:	9215      	str	r2, [sp, #84]	; 0x54
    2be2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    2be4:	9929      	ldr	r1, [sp, #164]	; 0xa4
    2be6:	440a      	add	r2, r1
    2be8:	9216      	str	r2, [sp, #88]	; 0x58
    2bea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2bec:	9928      	ldr	r1, [sp, #160]	; 0xa0
    2bee:	440a      	add	r2, r1
    2bf0:	920e      	str	r2, [sp, #56]	; 0x38
    2bf2:	9a22      	ldr	r2, [sp, #136]	; 0x88
    2bf4:	4293      	cmp	r3, r2
    2bf6:	f47f aea7 	bne.w	2948 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2f8>
    2bfa:	46c4      	mov	ip, r8
    for (int out_y = 0; out_y < output_height; ++out_y) {
    2bfc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    2bfe:	3301      	adds	r3, #1
    2c00:	931c      	str	r3, [sp, #112]	; 0x70
    2c02:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    2c04:	992b      	ldr	r1, [sp, #172]	; 0xac
    2c06:	440a      	add	r2, r1
    2c08:	921f      	str	r2, [sp, #124]	; 0x7c
    2c0a:	9a19      	ldr	r2, [sp, #100]	; 0x64
    2c0c:	9936      	ldr	r1, [sp, #216]	; 0xd8
    2c0e:	440a      	add	r2, r1
    2c10:	9219      	str	r2, [sp, #100]	; 0x64
    2c12:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    2c14:	992a      	ldr	r1, [sp, #168]	; 0xa8
    2c16:	440a      	add	r2, r1
    2c18:	9223      	str	r2, [sp, #140]	; 0x8c
    2c1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    2c1c:	4293      	cmp	r3, r2
    2c1e:	f47f ae86 	bne.w	292e <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2de>
    2c22:	4663      	mov	r3, ip
    2c24:	46d4      	mov	ip, sl
    2c26:	46da      	mov	sl, fp
    2c28:	469b      	mov	fp, r3
  for (int batch = 0; batch < batches; ++batch) {
    2c2a:	9b06      	ldr	r3, [sp, #24]
    2c2c:	3301      	adds	r3, #1
    2c2e:	9306      	str	r3, [sp, #24]
    2c30:	9a20      	ldr	r2, [sp, #128]	; 0x80
    2c32:	9930      	ldr	r1, [sp, #192]	; 0xc0
    2c34:	440a      	add	r2, r1
    2c36:	9220      	str	r2, [sp, #128]	; 0x80
    2c38:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    2c3a:	992e      	ldr	r1, [sp, #184]	; 0xb8
    2c3c:	440a      	add	r2, r1
    2c3e:	921d      	str	r2, [sp, #116]	; 0x74
    2c40:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    2c42:	4293      	cmp	r3, r2
    2c44:	f47f ae63 	bne.w	290e <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2be>
    if (size_ > kMaxSmallSize) {
    2c48:	9b50      	ldr	r3, [sp, #320]	; 0x140
    2c4a:	2b05      	cmp	r3, #5
    2c4c:	dd03      	ble.n	2c56 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x606>
      delete[] dims_pointer_;
    2c4e:	9851      	ldr	r0, [sp, #324]	; 0x144
    2c50:	b108      	cbz	r0, 2c56 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x606>
    2c52:	4b14      	ldr	r3, [pc, #80]	; (2ca4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x654>)
    2c54:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    2c56:	9b44      	ldr	r3, [sp, #272]	; 0x110
    2c58:	2b05      	cmp	r3, #5
    2c5a:	dd03      	ble.n	2c64 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x614>
      delete[] dims_pointer_;
    2c5c:	9845      	ldr	r0, [sp, #276]	; 0x114
    2c5e:	b108      	cbz	r0, 2c64 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x614>
    2c60:	4b10      	ldr	r3, [pc, #64]	; (2ca4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x654>)
    2c62:	4798      	blx	r3
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
                      GetTensorData<uint8_t>(im2col), nullptr);
  return kTfLiteOk;
}
    2c64:	2000      	movs	r0, #0
    2c66:	b057      	add	sp, #348	; 0x15c
    2c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    2c6c:	480e      	ldr	r0, [pc, #56]	; (2ca8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x658>)
    2c6e:	f04f 31ff 	mov.w	r1, #4294967295
    2c72:	1880      	adds	r0, r0, r2
    2c74:	4159      	adcs	r1, r3
    2c76:	4602      	mov	r2, r0
    2c78:	460b      	mov	r3, r1
    2c7a:	2800      	cmp	r0, #0
    2c7c:	f171 0400 	sbcs.w	r4, r1, #0
    2c80:	db03      	blt.n	2c8a <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x63a>
    2c82:	0fc3      	lsrs	r3, r0, #31
    2c84:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    2c88:	e731      	b.n	2aee <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x49e>
    2c8a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2c8e:	2100      	movs	r1, #0
    2c90:	1880      	adds	r0, r0, r2
    2c92:	4159      	adcs	r1, r3
    2c94:	e7f5      	b.n	2c82 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x632>
    2c96:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2c9a:	2100      	movs	r1, #0
    2c9c:	1880      	adds	r0, r0, r2
    2c9e:	4159      	adcs	r1, r3
    2ca0:	e722      	b.n	2ae8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x498>
    2ca2:	bf00      	nop
    2ca4:	0000ccbd 	.word	0x0000ccbd
    2ca8:	c0000001 	.word	0xc0000001

00002cac <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_>:

TfLiteStatus EvalQuantizedPerChannel(
    TfLiteContext* context, TfLiteNode* node, TfLiteConvParams* params,
    OpData* data, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output, TfLiteTensor* im2col) {
    2cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cb0:	b0bf      	sub	sp, #252	; 0xfc
    2cb2:	4680      	mov	r8, r0
    2cb4:	4689      	mov	r9, r1
    2cb6:	9c48      	ldr	r4, [sp, #288]	; 0x120
    2cb8:	9e49      	ldr	r6, [sp, #292]	; 0x124
    2cba:	9f4a      	ldr	r7, [sp, #296]	; 0x128
    2cbc:	9d4b      	ldr	r5, [sp, #300]	; 0x12c
  // Initialize cmsis-nn convolution parameters
  cmsis_nn_conv_params conv_params;
  conv_params.input_offset = -input->params.zero_point;
    2cbe:	6921      	ldr	r1, [r4, #16]
    2cc0:	4249      	negs	r1, r1
    2cc2:	9134      	str	r1, [sp, #208]	; 0xd0
  conv_params.output_offset = output->params.zero_point;
    2cc4:	6929      	ldr	r1, [r5, #16]
    2cc6:	9135      	str	r1, [sp, #212]	; 0xd4
  conv_params.stride.h = params->stride_height;
    2cc8:	6891      	ldr	r1, [r2, #8]
    2cca:	9137      	str	r1, [sp, #220]	; 0xdc
  conv_params.stride.w = params->stride_width;
    2ccc:	6851      	ldr	r1, [r2, #4]
    2cce:	9136      	str	r1, [sp, #216]	; 0xd8
  conv_params.dilation.h = params->dilation_height_factor;
    2cd0:	6951      	ldr	r1, [r2, #20]
    2cd2:	913b      	str	r1, [sp, #236]	; 0xec
  conv_params.dilation.w = params->dilation_width_factor;
    2cd4:	6912      	ldr	r2, [r2, #16]
    2cd6:	923a      	str	r2, [sp, #232]	; 0xe8
  conv_params.padding.h = data->padding.height;
    2cd8:	685a      	ldr	r2, [r3, #4]
    2cda:	9239      	str	r2, [sp, #228]	; 0xe4
  conv_params.padding.w = data->padding.width;
    2cdc:	681a      	ldr	r2, [r3, #0]
    2cde:	9238      	str	r2, [sp, #224]	; 0xe0
  conv_params.activation.min = data->output_activation_min;
    2ce0:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
    2ce4:	923c      	str	r2, [sp, #240]	; 0xf0
  conv_params.activation.max = data->output_activation_max;
    2ce6:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
    2cea:	923d      	str	r2, [sp, #244]	; 0xf4

  // Initialize cmsis-nn per channel quantization parameters
  cmsis_nn_per_channel_quant_params quant_params;
  quant_params.multiplier = data->per_channel_output_multiplier;
    2cec:	f103 0218 	add.w	r2, r3, #24
    2cf0:	9232      	str	r2, [sp, #200]	; 0xc8
  quant_params.shift = data->per_channel_output_shift;
    2cf2:	f503 6383 	add.w	r3, r3, #1048	; 0x418
    2cf6:	9333      	str	r3, [sp, #204]	; 0xcc
  if (tensor == nullptr) {
    2cf8:	2e00      	cmp	r6, #0
    2cfa:	f000 8100 	beq.w	2efe <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x252>
  TfLiteIntArray* dims = tensor->dims;
    2cfe:	f8d6 b008 	ldr.w	fp, [r6, #8]
  const int dims_size = dims->size;
    2d02:	f8db a000 	ldr.w	sl, [fp]
    size_ = dimensions_count;
    2d06:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
    if (dimensions_count > kMaxSmallSize) {
    2d0a:	f1ba 0f05 	cmp.w	sl, #5
    2d0e:	f340 80f9 	ble.w	2f04 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x258>
      dims_pointer_ = new int32[dimensions_count];
    2d12:	4b92      	ldr	r3, [pc, #584]	; (2f5c <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2b0>)
    2d14:	459a      	cmp	sl, r3
    2d16:	bf94      	ite	ls
    2d18:	ea4f 008a 	movls.w	r0, sl, lsl #2
    2d1c:	f04f 30ff 	movhi.w	r0, #4294967295
    2d20:	4b8f      	ldr	r3, [pc, #572]	; (2f60 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2b4>)
    2d22:	4798      	blx	r3
    2d24:	902d      	str	r0, [sp, #180]	; 0xb4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2d26:	ea4f 028a 	mov.w	r2, sl, lsl #2
    2d2a:	f10b 0104 	add.w	r1, fp, #4
    2d2e:	4b8d      	ldr	r3, [pc, #564]	; (2f64 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2b8>)
    2d30:	4798      	blx	r3
  if (tensor == nullptr) {
    2d32:	2c00      	cmp	r4, #0
    2d34:	f000 80e8 	beq.w	2f08 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x25c>
  TfLiteIntArray* dims = tensor->dims;
    2d38:	f8d4 b008 	ldr.w	fp, [r4, #8]
  const int dims_size = dims->size;
    2d3c:	f8db a000 	ldr.w	sl, [fp]
    size_ = dimensions_count;
    2d40:	f8cd a098 	str.w	sl, [sp, #152]	; 0x98
    if (dimensions_count > kMaxSmallSize) {
    2d44:	f1ba 0f05 	cmp.w	sl, #5
    2d48:	f340 80e1 	ble.w	2f0e <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x262>
      dims_pointer_ = new int32[dimensions_count];
    2d4c:	4b83      	ldr	r3, [pc, #524]	; (2f5c <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2b0>)
    2d4e:	459a      	cmp	sl, r3
    2d50:	bf94      	ite	ls
    2d52:	ea4f 008a 	movls.w	r0, sl, lsl #2
    2d56:	f04f 30ff 	movhi.w	r0, #4294967295
    2d5a:	4b81      	ldr	r3, [pc, #516]	; (2f60 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2b4>)
    2d5c:	4798      	blx	r3
    2d5e:	9027      	str	r0, [sp, #156]	; 0x9c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2d60:	ea4f 028a 	mov.w	r2, sl, lsl #2
    2d64:	f10b 0104 	add.w	r1, fp, #4
    2d68:	4b7e      	ldr	r3, [pc, #504]	; (2f64 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2b8>)
    2d6a:	4798      	blx	r3
  if (tensor == nullptr) {
    2d6c:	2d00      	cmp	r5, #0
    2d6e:	f000 80d0 	beq.w	2f12 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x266>
  TfLiteIntArray* dims = tensor->dims;
    2d72:	f8d5 b008 	ldr.w	fp, [r5, #8]
  const int dims_size = dims->size;
    2d76:	f8db a000 	ldr.w	sl, [fp]
    size_ = dimensions_count;
    2d7a:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
    if (dimensions_count > kMaxSmallSize) {
    2d7e:	f1ba 0f05 	cmp.w	sl, #5
    2d82:	f340 80c9 	ble.w	2f18 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x26c>
      dims_pointer_ = new int32[dimensions_count];
    2d86:	4b75      	ldr	r3, [pc, #468]	; (2f5c <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2b0>)
    2d88:	459a      	cmp	sl, r3
    2d8a:	bf94      	ite	ls
    2d8c:	ea4f 008a 	movls.w	r0, sl, lsl #2
    2d90:	f04f 30ff 	movhi.w	r0, #4294967295
    2d94:	4b72      	ldr	r3, [pc, #456]	; (2f60 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2b4>)
    2d96:	4798      	blx	r3
    2d98:	9021      	str	r0, [sp, #132]	; 0x84
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2d9a:	ea4f 028a 	mov.w	r2, sl, lsl #2
    2d9e:	f10b 0104 	add.w	r1, fp, #4
    2da2:	4b70      	ldr	r3, [pc, #448]	; (2f64 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2b8>)
    2da4:	4798      	blx	r3
  if (tensor == nullptr) {
    2da6:	2f00      	cmp	r7, #0
    2da8:	f000 80b8 	beq.w	2f1c <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x270>
  TfLiteIntArray* dims = tensor->dims;
    2dac:	f8d7 b008 	ldr.w	fp, [r7, #8]
  const int dims_size = dims->size;
    2db0:	f8db a000 	ldr.w	sl, [fp]
    size_ = dimensions_count;
    2db4:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
    if (dimensions_count > kMaxSmallSize) {
    2db8:	f1ba 0f05 	cmp.w	sl, #5
    2dbc:	f340 80b1 	ble.w	2f22 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x276>
      dims_pointer_ = new int32[dimensions_count];
    2dc0:	4b66      	ldr	r3, [pc, #408]	; (2f5c <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2b0>)
    2dc2:	459a      	cmp	sl, r3
    2dc4:	bf94      	ite	ls
    2dc6:	ea4f 008a 	movls.w	r0, sl, lsl #2
    2dca:	f04f 30ff 	movhi.w	r0, #4294967295
    2dce:	4b64      	ldr	r3, [pc, #400]	; (2f60 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2b4>)
    2dd0:	4798      	blx	r3
    2dd2:	901b      	str	r0, [sp, #108]	; 0x6c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2dd4:	ea4f 028a 	mov.w	r2, sl, lsl #2
    2dd8:	f10b 0104 	add.w	r1, fp, #4
    2ddc:	4b61      	ldr	r3, [pc, #388]	; (2f64 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2b8>)
    2dde:	4798      	blx	r3
  RuntimeShape input_shape = GetTensorShape(input);
  RuntimeShape output_shape = GetTensorShape(output);
  RuntimeShape bias_shape = GetTensorShape(bias);

  // Sanity check.
  TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
    2de0:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    2de2:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    2de4:	429a      	cmp	r2, r3
    2de6:	f300 809e 	bgt.w	2f26 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x27a>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    2dea:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2dec:	2b04      	cmp	r3, #4
    2dee:	f040 809c 	bne.w	2f2a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x27e>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    2df2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    2df4:	2b04      	cmp	r3, #4
    2df6:	f040 809a 	bne.w	2f2e <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x282>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    2dfa:	9b20      	ldr	r3, [sp, #128]	; 0x80
    2dfc:	2b04      	cmp	r3, #4
    2dfe:	f040 8098 	bne.w	2f32 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x286>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2e02:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    2e06:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    2e08:	459c      	cmp	ip, r3
    2e0a:	f040 8094 	bne.w	2f36 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x28a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2e0e:	f8dd a0c0 	ldr.w	sl, [sp, #192]	; 0xc0
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    2e12:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    2e14:	459a      	cmp	sl, r3
    2e16:	f040 8090 	bne.w	2f3a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x28e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2e1a:	f8dd e090 	ldr.w	lr, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    2e1e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    2e20:	459e      	cmp	lr, r3
    2e22:	f040 808c 	bne.w	2f3e <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x292>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    2e26:	b1af      	cbz	r7, 2e54 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x1a8>
  const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (GetTensorData<int8_t>(bias)) {
    2e28:	687b      	ldr	r3, [r7, #4]
    2e2a:	b19b      	cbz	r3, 2e54 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x1a8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2e2c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    2e2e:	2a05      	cmp	r2, #5
    2e30:	bfcc      	ite	gt
    2e32:	981b      	ldrgt	r0, [sp, #108]	; 0x6c
    2e34:	a81b      	addle	r0, sp, #108	; 0x6c
    for (int i = 0; i < size_; i++) {
    2e36:	2a00      	cmp	r2, #0
    2e38:	f340 8083 	ble.w	2f42 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x296>
    2e3c:	4603      	mov	r3, r0
    2e3e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    2e42:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
    2e44:	f853 1b04 	ldr.w	r1, [r3], #4
    2e48:	fb01 f202 	mul.w	r2, r1, r2
    for (int i = 0; i < size_; i++) {
    2e4c:	4298      	cmp	r0, r3
    2e4e:	d1f9      	bne.n	2e44 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x198>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    2e50:	4596      	cmp	lr, r2
    2e52:	d178      	bne.n	2f46 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x29a>
  }

  // Initialize cmsis-nn dimensions
  // Input
  cmsis_nn_dims input_dims;
  input_dims.n = batch_size;
    2e54:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
  input_dims.h = input_shape.Dims(1);
    2e58:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2e5a:	9317      	str	r3, [sp, #92]	; 0x5c
  input_dims.w = input_shape.Dims(2);
    2e5c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    2e5e:	9318      	str	r3, [sp, #96]	; 0x60
  input_dims.c = input_depth;
    2e60:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64

  // Filter
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_depth;
    2e64:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
  filter_dims.h = filter_shape.Dims(1);
    2e68:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    2e6a:	9313      	str	r3, [sp, #76]	; 0x4c
  filter_dims.w = filter_shape.Dims(2);
    2e6c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    2e6e:	9314      	str	r3, [sp, #80]	; 0x50
  filter_dims.c = input_depth;
    2e70:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54

  // Bias
  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
    2e74:	2301      	movs	r3, #1
    2e76:	930e      	str	r3, [sp, #56]	; 0x38
  bias_dims.h = 1;
    2e78:	930f      	str	r3, [sp, #60]	; 0x3c
  bias_dims.w = 1;
    2e7a:	9310      	str	r3, [sp, #64]	; 0x40
  bias_dims.c = output_depth;
    2e7c:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44

  // Output
  cmsis_nn_dims output_dims;
  output_dims.n = batch_size;
    2e80:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
  output_dims.h = output_shape.Dims(1);
    2e84:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2e86:	930b      	str	r3, [sp, #44]	; 0x2c
  output_dims.w = output_shape.Dims(2);
    2e88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2e8a:	930c      	str	r3, [sp, #48]	; 0x30
  output_dims.c = output_depth;
    2e8c:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34

  // Initialize cmsis-nn context
  cmsis_nn_context ctx;
  ctx.buf = nullptr;
    2e90:	2300      	movs	r3, #0
    2e92:	9308      	str	r3, [sp, #32]
  ctx.size = 0;
    2e94:	9309      	str	r3, [sp, #36]	; 0x24

  auto* buffer_idx = reinterpret_cast<int*>(node->user_data);
  if (*buffer_idx > -1) {
    2e96:	f8d9 3010 	ldr.w	r3, [r9, #16]
    2e9a:	6819      	ldr	r1, [r3, #0]
    2e9c:	2900      	cmp	r1, #0
    2e9e:	db04      	blt.n	2eaa <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x1fe>
    ctx.buf = context->GetScratchBuffer(context, *buffer_idx);
    2ea0:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    2ea4:	4640      	mov	r0, r8
    2ea6:	4798      	blx	r3
    2ea8:	9008      	str	r0, [sp, #32]
    2eaa:	2c00      	cmp	r4, #0
    2eac:	d04d      	beq.n	2f4a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x29e>
    2eae:	6862      	ldr	r2, [r4, #4]
    2eb0:	2e00      	cmp	r6, #0
    2eb2:	d04c      	beq.n	2f4e <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2a2>
    2eb4:	6871      	ldr	r1, [r6, #4]
    2eb6:	2f00      	cmp	r7, #0
    2eb8:	d04b      	beq.n	2f52 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2a6>
    2eba:	6878      	ldr	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    2ebc:	2d00      	cmp	r5, #0
    2ebe:	d04a      	beq.n	2f56 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2aa>
    2ec0:	686b      	ldr	r3, [r5, #4]
  // the parameters passed
  arm_status status = arm_convolve_wrapper_s8(
      &ctx, &conv_params, &quant_params, &input_dims,
      GetTensorData<int8_t>(input), &filter_dims, GetTensorData<int8_t>(filter),
      &bias_dims, GetTensorData<int32>(bias), &output_dims,
      GetTensorData<int8_t>(output));
    2ec2:	9306      	str	r3, [sp, #24]
    2ec4:	ab0a      	add	r3, sp, #40	; 0x28
    2ec6:	9305      	str	r3, [sp, #20]
    2ec8:	9004      	str	r0, [sp, #16]
    2eca:	ab0e      	add	r3, sp, #56	; 0x38
    2ecc:	9303      	str	r3, [sp, #12]
    2ece:	9102      	str	r1, [sp, #8]
    2ed0:	ab12      	add	r3, sp, #72	; 0x48
    2ed2:	9301      	str	r3, [sp, #4]
    2ed4:	9200      	str	r2, [sp, #0]
    2ed6:	ab16      	add	r3, sp, #88	; 0x58
    2ed8:	aa32      	add	r2, sp, #200	; 0xc8
    2eda:	a934      	add	r1, sp, #208	; 0xd0
    2edc:	a808      	add	r0, sp, #32
    2ede:	4c22      	ldr	r4, [pc, #136]	; (2f68 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2bc>)
    2ee0:	47a0      	blx	r4

  if (status == ARM_MATH_SUCCESS) {
    return kTfLiteOk;
    2ee2:	1c04      	adds	r4, r0, #0
    2ee4:	bf18      	it	ne
    2ee6:	2401      	movne	r4, #1
    if (size_ > kMaxSmallSize) {
    2ee8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    2eea:	2b05      	cmp	r3, #5
    2eec:	dd03      	ble.n	2ef6 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x24a>
      delete[] dims_pointer_;
    2eee:	981b      	ldr	r0, [sp, #108]	; 0x6c
    2ef0:	b108      	cbz	r0, 2ef6 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x24a>
    2ef2:	4b1e      	ldr	r3, [pc, #120]	; (2f6c <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2c0>)
    2ef4:	4798      	blx	r3
      GetTensorData<int32>(bias), GetTensorShape(output),
      GetTensorData<int8>(output));

#endif
  return kTfLiteOk;
}
    2ef6:	4620      	mov	r0, r4
    2ef8:	b03f      	add	sp, #252	; 0xfc
    2efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  RuntimeShape() : size_(0) {}
    2efe:	2300      	movs	r3, #0
    2f00:	932c      	str	r3, [sp, #176]	; 0xb0
    2f02:	e716      	b.n	2d32 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x86>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2f04:	a82d      	add	r0, sp, #180	; 0xb4
    2f06:	e70e      	b.n	2d26 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x7a>
  RuntimeShape() : size_(0) {}
    2f08:	2300      	movs	r3, #0
    2f0a:	9326      	str	r3, [sp, #152]	; 0x98
    2f0c:	e72e      	b.n	2d6c <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0xc0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2f0e:	a827      	add	r0, sp, #156	; 0x9c
    2f10:	e726      	b.n	2d60 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0xb4>
  RuntimeShape() : size_(0) {}
    2f12:	2300      	movs	r3, #0
    2f14:	9320      	str	r3, [sp, #128]	; 0x80
    2f16:	e746      	b.n	2da6 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0xfa>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2f18:	a821      	add	r0, sp, #132	; 0x84
    2f1a:	e73e      	b.n	2d9a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0xee>
  RuntimeShape() : size_(0) {}
    2f1c:	2300      	movs	r3, #0
    2f1e:	931a      	str	r3, [sp, #104]	; 0x68
    2f20:	e75e      	b.n	2de0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x134>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2f22:	a81b      	add	r0, sp, #108	; 0x6c
    2f24:	e756      	b.n	2dd4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x128>
  TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
    2f26:	4b12      	ldr	r3, [pc, #72]	; (2f70 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2c4>)
    2f28:	4798      	blx	r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    2f2a:	4b11      	ldr	r3, [pc, #68]	; (2f70 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2c4>)
    2f2c:	4798      	blx	r3
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    2f2e:	4b10      	ldr	r3, [pc, #64]	; (2f70 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2c4>)
    2f30:	4798      	blx	r3
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    2f32:	4b0f      	ldr	r3, [pc, #60]	; (2f70 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2c4>)
    2f34:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    2f36:	4b0e      	ldr	r3, [pc, #56]	; (2f70 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2c4>)
    2f38:	4798      	blx	r3
    2f3a:	4b0d      	ldr	r3, [pc, #52]	; (2f70 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2c4>)
    2f3c:	4798      	blx	r3
    2f3e:	4b0c      	ldr	r3, [pc, #48]	; (2f70 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2c4>)
    2f40:	4798      	blx	r3
    int buffer_size = 1;
    2f42:	2201      	movs	r2, #1
    2f44:	e784      	b.n	2e50 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x1a4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    2f46:	4b0a      	ldr	r3, [pc, #40]	; (2f70 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2c4>)
    2f48:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    2f4a:	2200      	movs	r2, #0
    2f4c:	e7b0      	b.n	2eb0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x204>
    2f4e:	2100      	movs	r1, #0
    2f50:	e7b1      	b.n	2eb6 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x20a>
    2f52:	2000      	movs	r0, #0
    2f54:	e7b2      	b.n	2ebc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x210>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    2f56:	2300      	movs	r3, #0
    2f58:	e7b3      	b.n	2ec2 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x216>
    2f5a:	bf00      	nop
    2f5c:	1ffffffe 	.word	0x1ffffffe
    2f60:	0000cd6d 	.word	0x0000cd6d
    2f64:	00018121 	.word	0x00018121
    2f68:	00009db1 	.word	0x00009db1
    2f6c:	0000ccbd 	.word	0x0000ccbd
    2f70:	0001739d 	.word	0x0001739d

00002f74 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_>:

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteConvParams* params, OpData* data,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* im2col,
                       TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
    2f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f78:	b0d1      	sub	sp, #324	; 0x144
    2f7a:	9c5a      	ldr	r4, [sp, #360]	; 0x168
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
    2f7c:	7b11      	ldrb	r1, [r2, #12]
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
    2f7e:	2901      	cmp	r1, #1
    2f80:	f000 816a 	beq.w	3258 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2e4>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
    2f84:	2903      	cmp	r1, #3
    2f86:	f000 816c 	beq.w	3262 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2ee>
    *activation_min = 0;
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    2f8a:	2902      	cmp	r1, #2
    2f8c:	f000 816e 	beq.w	326c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2f8>
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
    2f90:	49ad      	ldr	r1, [pc, #692]	; (3248 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2d4>)
    2f92:	9116      	str	r1, [sp, #88]	; 0x58
    *activation_min = std::numeric_limits<T>::lowest();
    2f94:	f46f 0100 	mvn.w	r1, #8388608	; 0x800000
    2f98:	9115      	str	r1, [sp, #84]	; 0x54
                           &output_activation_max);

  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
  op_params.padding_values.width = data->padding.width;
    2f9a:	f8d3 b000 	ldr.w	fp, [r3]
  op_params.padding_values.height = data->padding.height;
    2f9e:	685b      	ldr	r3, [r3, #4]
    2fa0:	9301      	str	r3, [sp, #4]
  op_params.stride_width = params->stride_width;
    2fa2:	f8d2 8004 	ldr.w	r8, [r2, #4]
  op_params.stride_height = params->stride_height;
    2fa6:	6895      	ldr	r5, [r2, #8]
  op_params.dilation_width_factor = params->dilation_width_factor;
    2fa8:	f8d2 9010 	ldr.w	r9, [r2, #16]
  op_params.dilation_height_factor = params->dilation_height_factor;
    2fac:	f8d2 a014 	ldr.w	sl, [r2, #20]
  if (tensor == nullptr) {
    2fb0:	2c00      	cmp	r4, #0
    2fb2:	f000 8161 	beq.w	3278 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x304>
  const int dims_size = dims->size;
    2fb6:	68a7      	ldr	r7, [r4, #8]
    2fb8:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    2fbc:	9632      	str	r6, [sp, #200]	; 0xc8
    if (dimensions_count > kMaxSmallSize) {
    2fbe:	2e05      	cmp	r6, #5
    2fc0:	f340 815e 	ble.w	3280 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x30c>
      dims_pointer_ = new int32[dimensions_count];
    2fc4:	4ba1      	ldr	r3, [pc, #644]	; (324c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2d8>)
    2fc6:	429e      	cmp	r6, r3
    2fc8:	bf94      	ite	ls
    2fca:	00b0      	lslls	r0, r6, #2
    2fcc:	f04f 30ff 	movhi.w	r0, #4294967295
    2fd0:	4b9f      	ldr	r3, [pc, #636]	; (3250 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2dc>)
    2fd2:	4798      	blx	r3
    2fd4:	9033      	str	r0, [sp, #204]	; 0xcc
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2fd6:	00b2      	lsls	r2, r6, #2
    2fd8:	4639      	mov	r1, r7
    2fda:	4b9e      	ldr	r3, [pc, #632]	; (3254 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2e0>)
    2fdc:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    2fde:	6863      	ldr	r3, [r4, #4]
    2fe0:	9303      	str	r3, [sp, #12]
  if (tensor == nullptr) {
    2fe2:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    2fe4:	2b00      	cmp	r3, #0
    2fe6:	f000 814d 	beq.w	3284 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x310>
  const int dims_size = dims->size;
    2fea:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    2fec:	689f      	ldr	r7, [r3, #8]
    2fee:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    2ff2:	9638      	str	r6, [sp, #224]	; 0xe0
    if (dimensions_count > kMaxSmallSize) {
    2ff4:	2e05      	cmp	r6, #5
    2ff6:	f340 8148 	ble.w	328a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x316>
      dims_pointer_ = new int32[dimensions_count];
    2ffa:	4b94      	ldr	r3, [pc, #592]	; (324c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2d8>)
    2ffc:	429e      	cmp	r6, r3
    2ffe:	bf94      	ite	ls
    3000:	00b0      	lslls	r0, r6, #2
    3002:	f04f 30ff 	movhi.w	r0, #4294967295
    3006:	4b92      	ldr	r3, [pc, #584]	; (3250 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2dc>)
    3008:	4798      	blx	r3
    300a:	9039      	str	r0, [sp, #228]	; 0xe4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    300c:	00b2      	lsls	r2, r6, #2
    300e:	4639      	mov	r1, r7
    3010:	4b90      	ldr	r3, [pc, #576]	; (3254 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2e0>)
    3012:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    3014:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    3016:	685b      	ldr	r3, [r3, #4]
    3018:	9325      	str	r3, [sp, #148]	; 0x94
  if (tensor == nullptr) {
    301a:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    301c:	2b00      	cmp	r3, #0
    301e:	f000 8136 	beq.w	328e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x31a>
  const int dims_size = dims->size;
    3022:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    3024:	689f      	ldr	r7, [r3, #8]
    3026:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    302a:	963e      	str	r6, [sp, #248]	; 0xf8
    if (dimensions_count > kMaxSmallSize) {
    302c:	2e05      	cmp	r6, #5
    302e:	f340 8131 	ble.w	3294 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x320>
      dims_pointer_ = new int32[dimensions_count];
    3032:	4b86      	ldr	r3, [pc, #536]	; (324c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2d8>)
    3034:	429e      	cmp	r6, r3
    3036:	bf94      	ite	ls
    3038:	00b0      	lslls	r0, r6, #2
    303a:	f04f 30ff 	movhi.w	r0, #4294967295
    303e:	4b84      	ldr	r3, [pc, #528]	; (3250 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2dc>)
    3040:	4798      	blx	r3
    3042:	903f      	str	r0, [sp, #252]	; 0xfc
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    3044:	00b2      	lsls	r2, r6, #2
    3046:	4639      	mov	r1, r7
    3048:	4b82      	ldr	r3, [pc, #520]	; (3254 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2e0>)
    304a:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    304c:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    304e:	685b      	ldr	r3, [r3, #4]
    3050:	9317      	str	r3, [sp, #92]	; 0x5c
  if (tensor == nullptr) {
    3052:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
    3054:	2b00      	cmp	r3, #0
    3056:	f000 811f 	beq.w	3298 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x324>
  const int dims_size = dims->size;
    305a:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
    305c:	689f      	ldr	r7, [r3, #8]
    305e:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    3062:	9644      	str	r6, [sp, #272]	; 0x110
    if (dimensions_count > kMaxSmallSize) {
    3064:	2e05      	cmp	r6, #5
    3066:	f340 811a 	ble.w	329e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x32a>
      dims_pointer_ = new int32[dimensions_count];
    306a:	4b78      	ldr	r3, [pc, #480]	; (324c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2d8>)
    306c:	429e      	cmp	r6, r3
    306e:	bf94      	ite	ls
    3070:	00b0      	lslls	r0, r6, #2
    3072:	f04f 30ff 	movhi.w	r0, #4294967295
    3076:	4b76      	ldr	r3, [pc, #472]	; (3250 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2dc>)
    3078:	4798      	blx	r3
    307a:	9045      	str	r0, [sp, #276]	; 0x114
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    307c:	00b2      	lsls	r2, r6, #2
    307e:	4639      	mov	r1, r7
    3080:	4b74      	ldr	r3, [pc, #464]	; (3254 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2e0>)
    3082:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    3084:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
    3086:	685f      	ldr	r7, [r3, #4]
  if (tensor == nullptr) {
    3088:	9b5d      	ldr	r3, [sp, #372]	; 0x174
    308a:	2b00      	cmp	r3, #0
    308c:	f000 8109 	beq.w	32a2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x32e>
  TfLiteIntArray* dims = tensor->dims;
    3090:	9b5d      	ldr	r3, [sp, #372]	; 0x174
    3092:	689e      	ldr	r6, [r3, #8]
  const int dims_size = dims->size;
    3094:	6834      	ldr	r4, [r6, #0]
    size_ = dimensions_count;
    3096:	944a      	str	r4, [sp, #296]	; 0x128
    if (dimensions_count > kMaxSmallSize) {
    3098:	2c05      	cmp	r4, #5
    309a:	f340 8104 	ble.w	32a6 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x332>
      dims_pointer_ = new int32[dimensions_count];
    309e:	4b6b      	ldr	r3, [pc, #428]	; (324c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2d8>)
    30a0:	429c      	cmp	r4, r3
    30a2:	bf94      	ite	ls
    30a4:	00a0      	lslls	r0, r4, #2
    30a6:	f04f 30ff 	movhi.w	r0, #4294967295
    30aa:	4b69      	ldr	r3, [pc, #420]	; (3250 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2dc>)
    30ac:	4798      	blx	r3
    30ae:	904b      	str	r0, [sp, #300]	; 0x12c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    30b0:	00a2      	lsls	r2, r4, #2
    30b2:	1d31      	adds	r1, r6, #4
    30b4:	4b67      	ldr	r3, [pc, #412]	; (3254 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2e0>)
    30b6:	4798      	blx	r3
  op_params.stride_width = params->stride_width;
    30b8:	fa0f f888 	sxth.w	r8, r8
  op_params.stride_height = params->stride_height;
    30bc:	b22d      	sxth	r5, r5
  op_params.dilation_width_factor = params->dilation_width_factor;
    30be:	fa0f f989 	sxth.w	r9, r9
  op_params.dilation_height_factor = params->dilation_height_factor;
    30c2:	fa0f fe8a 	sxth.w	lr, sl
  op_params.padding_values.width = data->padding.width;
    30c6:	fa0f f68b 	sxth.w	r6, fp
  op_params.padding_values.height = data->padding.height;
    30ca:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    30ce:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    30d0:	2b04      	cmp	r3, #4
    30d2:	f040 80ea 	bne.w	32aa <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x336>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    30d6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    30d8:	2b04      	cmp	r3, #4
    30da:	f040 80e8 	bne.w	32ae <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x33a>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    30de:	9b44      	ldr	r3, [sp, #272]	; 0x110
    30e0:	2b04      	cmp	r3, #4
    30e2:	f040 80e6 	bne.w	32b2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x33e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    30e6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    30e8:	930c      	str	r3, [sp, #48]	; 0x30
    30ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
    30ec:	921e      	str	r2, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    30ee:	429a      	cmp	r2, r3
    30f0:	f040 80e1 	bne.w	32b6 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x342>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    30f4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    30f6:	930b      	str	r3, [sp, #44]	; 0x2c
    30f8:	f8dd b0f0 	ldr.w	fp, [sp, #240]	; 0xf0
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    30fc:	459b      	cmp	fp, r3
    30fe:	f040 80dc 	bne.w	32ba <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x346>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    3102:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    3104:	930d      	str	r3, [sp, #52]	; 0x34
    3106:	9a48      	ldr	r2, [sp, #288]	; 0x120
    3108:	9214      	str	r2, [sp, #80]	; 0x50
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    310a:	429a      	cmp	r2, r3
    310c:	f040 80d7 	bne.w	32be <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x34a>
  if (bias_data) {
    3110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    3112:	b1ab      	cbz	r3, 3140 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1cc>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3114:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    3116:	2a05      	cmp	r2, #5
    3118:	bfcc      	ite	gt
    311a:	993f      	ldrgt	r1, [sp, #252]	; 0xfc
    311c:	a93f      	addle	r1, sp, #252	; 0xfc
    for (int i = 0; i < size_; i++) {
    311e:	2a00      	cmp	r2, #0
    3120:	f340 80cf 	ble.w	32c2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x34e>
    3124:	460b      	mov	r3, r1
    3126:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    312a:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
    312c:	f853 0b04 	ldr.w	r0, [r3], #4
    3130:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
    3134:	428b      	cmp	r3, r1
    3136:	d1f9      	bne.n	312c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1b8>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    3138:	9b14      	ldr	r3, [sp, #80]	; 0x50
    313a:	429a      	cmp	r2, r3
    313c:	f040 80c3 	bne.w	32c6 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x352>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    3140:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    3142:	9301      	str	r3, [sp, #4]
    3144:	f8dd a0d4 	ldr.w	sl, [sp, #212]	; 0xd4
    3148:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    314a:	9208      	str	r2, [sp, #32]
    314c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    314e:	4619      	mov	r1, r3
    3150:	9302      	str	r3, [sp, #8]
    3152:	9846      	ldr	r0, [sp, #280]	; 0x118
    3154:	4602      	mov	r2, r0
    3156:	9023      	str	r0, [sp, #140]	; 0x8c
    3158:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    315a:	9321      	str	r3, [sp, #132]	; 0x84
  for (int batch = 0; batch < batches; ++batch) {
    315c:	981e      	ldr	r0, [sp, #120]	; 0x78
    315e:	2800      	cmp	r0, #0
    3160:	f340 81b9 	ble.w	34d6 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x562>
    3164:	4618      	mov	r0, r3
    3166:	fb03 f302 	mul.w	r3, r3, r2
    316a:	009b      	lsls	r3, r3, #2
    316c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    316e:	fb02 fc03 	mul.w	ip, r2, r3
    3172:	f8cd c0b8 	str.w	ip, [sp, #184]	; 0xb8
    3176:	971a      	str	r7, [sp, #104]	; 0x68
    3178:	9b01      	ldr	r3, [sp, #4]
    317a:	fb0a f303 	mul.w	r3, sl, r3
    317e:	009b      	lsls	r3, r3, #2
    3180:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3182:	4617      	mov	r7, r2
    3184:	fb02 f303 	mul.w	r3, r2, r3
    3188:	932a      	str	r3, [sp, #168]	; 0xa8
    318a:	4263      	negs	r3, r4
    318c:	461c      	mov	r4, r3
    318e:	932b      	str	r3, [sp, #172]	; 0xac
    3190:	4273      	negs	r3, r6
    3192:	9328      	str	r3, [sp, #160]	; 0xa0
    3194:	0093      	lsls	r3, r2, #2
    3196:	fb04 f20a 	mul.w	r2, r4, sl
    319a:	1b92      	subs	r2, r2, r6
    319c:	9e03      	ldr	r6, [sp, #12]
    319e:	fb03 6602 	mla	r6, r3, r2, r6
    31a2:	9620      	str	r6, [sp, #128]	; 0x80
    31a4:	4602      	mov	r2, r0
    31a6:	9c14      	ldr	r4, [sp, #80]	; 0x50
    31a8:	fb02 f204 	mul.w	r2, r2, r4
    31ac:	0090      	lsls	r0, r2, #2
    31ae:	902c      	str	r0, [sp, #176]	; 0xb0
    31b0:	9529      	str	r5, [sp, #164]	; 0xa4
    31b2:	fb07 f20a 	mul.w	r2, r7, sl
    31b6:	0092      	lsls	r2, r2, #2
    31b8:	fb02 f005 	mul.w	r0, r2, r5
    31bc:	902d      	str	r0, [sp, #180]	; 0xb4
    31be:	00a0      	lsls	r0, r4, #2
    31c0:	902f      	str	r0, [sp, #188]	; 0xbc
    31c2:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
    31c6:	fb08 f003 	mul.w	r0, r8, r3
    31ca:	9031      	str	r0, [sp, #196]	; 0xc4
    31cc:	4608      	mov	r0, r1
    31ce:	9c08      	ldr	r4, [sp, #32]
    31d0:	fb01 f104 	mul.w	r1, r1, r4
    31d4:	0089      	lsls	r1, r1, #2
    31d6:	fb0b f101 	mul.w	r1, fp, r1
    31da:	9127      	str	r1, [sp, #156]	; 0x9c
    31dc:	fb00 f10b 	mul.w	r1, r0, fp
    31e0:	0089      	lsls	r1, r1, #2
    31e2:	9113      	str	r1, [sp, #76]	; 0x4c
    31e4:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
    31e8:	fb02 f20e 	mul.w	r2, r2, lr
    31ec:	9212      	str	r2, [sp, #72]	; 0x48
    31ee:	ea4f 028b 	mov.w	r2, fp, lsl #2
    31f2:	9206      	str	r2, [sp, #24]
    31f4:	f8cd 9014 	str.w	r9, [sp, #20]
    31f8:	fb09 f303 	mul.w	r3, r9, r3
    31fc:	9304      	str	r3, [sp, #16]
    31fe:	2300      	movs	r3, #0
    3200:	930a      	str	r3, [sp, #40]	; 0x28
    for (int out_y = 0; out_y < output_height; ++out_y) {
    3202:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    3204:	2b00      	cmp	r3, #0
    3206:	f340 8157 	ble.w	34b8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x544>
    320a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    320c:	9319      	str	r3, [sp, #100]	; 0x64
    320e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3210:	931d      	str	r3, [sp, #116]	; 0x74
    3212:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    3214:	9318      	str	r3, [sp, #96]	; 0x60
    3216:	2300      	movs	r3, #0
    3218:	931c      	str	r3, [sp, #112]	; 0x70
      for (int out_x = 0; out_x < output_width; ++out_x) {
    321a:	9b21      	ldr	r3, [sp, #132]	; 0x84
    321c:	2b00      	cmp	r3, #0
    321e:	f340 8138 	ble.w	3492 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x51e>
    3222:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3224:	9310      	str	r3, [sp, #64]	; 0x40
    3226:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    3228:	9324      	str	r3, [sp, #144]	; 0x90
    322a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    322c:	9322      	str	r3, [sp, #136]	; 0x88
    322e:	2300      	movs	r3, #0
    3230:	931b      	str	r3, [sp, #108]	; 0x6c
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    3232:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3234:	2b00      	cmp	r3, #0
    3236:	f340 8119 	ble.w	346c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4f8>
    323a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    323c:	931f      	str	r3, [sp, #124]	; 0x7c
    323e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    3240:	9326      	str	r3, [sp, #152]	; 0x98
    3242:	2300      	movs	r3, #0
    3244:	9309      	str	r3, [sp, #36]	; 0x24
    3246:	e0ea      	b.n	341e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4aa>
    3248:	7f7fffff 	.word	0x7f7fffff
    324c:	1ffffffe 	.word	0x1ffffffe
    3250:	0000cd6d 	.word	0x0000cd6d
    3254:	00018121 	.word	0x00018121
    *activation_max = std::numeric_limits<T>::max();
    3258:	497c      	ldr	r1, [pc, #496]	; (344c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4d8>)
    325a:	9116      	str	r1, [sp, #88]	; 0x58
    *activation_min = 0;
    325c:	2100      	movs	r1, #0
    325e:	9115      	str	r1, [sp, #84]	; 0x54
    3260:	e69b      	b.n	2f9a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x26>
    *activation_max = 6;
    3262:	497b      	ldr	r1, [pc, #492]	; (3450 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4dc>)
    3264:	9116      	str	r1, [sp, #88]	; 0x58
    *activation_min = 0;
    3266:	2100      	movs	r1, #0
    3268:	9115      	str	r1, [sp, #84]	; 0x54
    326a:	e696      	b.n	2f9a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x26>
    *activation_max = 1;
    326c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    3270:	9116      	str	r1, [sp, #88]	; 0x58
    *activation_min = -1;
    3272:	4978      	ldr	r1, [pc, #480]	; (3454 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4e0>)
    3274:	9115      	str	r1, [sp, #84]	; 0x54
    3276:	e690      	b.n	2f9a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x26>
  RuntimeShape() : size_(0) {}
    3278:	2300      	movs	r3, #0
    327a:	9332      	str	r3, [sp, #200]	; 0xc8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    327c:	9303      	str	r3, [sp, #12]
    327e:	e6b0      	b.n	2fe2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x6e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3280:	a833      	add	r0, sp, #204	; 0xcc
    3282:	e6a8      	b.n	2fd6 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x62>
  RuntimeShape() : size_(0) {}
    3284:	9338      	str	r3, [sp, #224]	; 0xe0
    3286:	9325      	str	r3, [sp, #148]	; 0x94
    3288:	e6c7      	b.n	301a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xa6>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    328a:	a839      	add	r0, sp, #228	; 0xe4
    328c:	e6be      	b.n	300c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x98>
  RuntimeShape() : size_(0) {}
    328e:	933e      	str	r3, [sp, #248]	; 0xf8
    3290:	9317      	str	r3, [sp, #92]	; 0x5c
    3292:	e6de      	b.n	3052 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xde>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3294:	a83f      	add	r0, sp, #252	; 0xfc
    3296:	e6d5      	b.n	3044 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0xd0>
  RuntimeShape() : size_(0) {}
    3298:	2700      	movs	r7, #0
    329a:	9744      	str	r7, [sp, #272]	; 0x110
    329c:	e6f4      	b.n	3088 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x114>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    329e:	a845      	add	r0, sp, #276	; 0x114
    32a0:	e6ec      	b.n	307c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x108>
  RuntimeShape() : size_(0) {}
    32a2:	934a      	str	r3, [sp, #296]	; 0x128
    32a4:	e708      	b.n	30b8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x144>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    32a6:	a84b      	add	r0, sp, #300	; 0x12c
    32a8:	e702      	b.n	30b0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x13c>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    32aa:	4b6b      	ldr	r3, [pc, #428]	; (3458 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4e4>)
    32ac:	4798      	blx	r3
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    32ae:	4b6a      	ldr	r3, [pc, #424]	; (3458 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4e4>)
    32b0:	4798      	blx	r3
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    32b2:	4b69      	ldr	r3, [pc, #420]	; (3458 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4e4>)
    32b4:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    32b6:	4b68      	ldr	r3, [pc, #416]	; (3458 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4e4>)
    32b8:	4798      	blx	r3
    32ba:	4b67      	ldr	r3, [pc, #412]	; (3458 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4e4>)
    32bc:	4798      	blx	r3
    32be:	4b66      	ldr	r3, [pc, #408]	; (3458 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4e4>)
    32c0:	4798      	blx	r3
    int buffer_size = 1;
    32c2:	2201      	movs	r2, #1
    32c4:	e738      	b.n	3138 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x1c4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    32c6:	4b64      	ldr	r3, [pc, #400]	; (3458 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4e4>)
    32c8:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    32ca:	4b63      	ldr	r3, [pc, #396]	; (3458 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4e4>)
    32cc:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    32ce:	4b62      	ldr	r3, [pc, #392]	; (3458 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4e4>)
    32d0:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    32d2:	4b61      	ldr	r3, [pc, #388]	; (3458 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4e4>)
    32d4:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    32d6:	4b60      	ldr	r3, [pc, #384]	; (3458 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4e4>)
    32d8:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    32da:	4b5f      	ldr	r3, [pc, #380]	; (3458 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4e4>)
    32dc:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    32de:	4b5e      	ldr	r3, [pc, #376]	; (3458 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4e4>)
    32e0:	4798      	blx	r3
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    32e2:	3401      	adds	r4, #1
    32e4:	455c      	cmp	r4, fp
    32e6:	d032      	beq.n	334e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x3da>
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    32e8:	2d00      	cmp	r5, #0
    32ea:	dbfa      	blt.n	32e2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x36e>
    32ec:	4555      	cmp	r5, sl
    32ee:	daf8      	bge.n	32e2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x36e>
    32f0:	2e00      	cmp	r6, #0
    32f2:	dbf6      	blt.n	32e2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x36e>
    32f4:	9b01      	ldr	r3, [sp, #4]
    32f6:	429e      	cmp	r6, r3
    32f8:	daf3      	bge.n	32e2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x36e>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    32fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    32fc:	2b00      	cmp	r3, #0
    32fe:	dbe4      	blt.n	32ca <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x356>
    3300:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3302:	4293      	cmp	r3, r2
    3304:	dae1      	bge.n	32ca <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x356>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    3306:	2c00      	cmp	r4, #0
    3308:	dbe1      	blt.n	32ce <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x35a>
    330a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    330c:	42a3      	cmp	r3, r4
    330e:	ddde      	ble.n	32ce <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x35a>
                      input_shape, batch, in_y, in_x, in_channel)];
    3310:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    3314:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3316:	2a00      	cmp	r2, #0
    3318:	dbdb      	blt.n	32d2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x35e>
    331a:	990d      	ldr	r1, [sp, #52]	; 0x34
    331c:	428a      	cmp	r2, r1
    331e:	dad8      	bge.n	32d2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x35e>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    3320:	9a07      	ldr	r2, [sp, #28]
    3322:	2a00      	cmp	r2, #0
    3324:	dbd7      	blt.n	32d6 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x362>
    3326:	9908      	ldr	r1, [sp, #32]
    3328:	428a      	cmp	r2, r1
    332a:	dad4      	bge.n	32d6 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x362>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    332c:	2f00      	cmp	r7, #0
    332e:	dbd4      	blt.n	32da <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x366>
    3330:	9a02      	ldr	r2, [sp, #8]
    3332:	42ba      	cmp	r2, r7
    3334:	ddd1      	ble.n	32da <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x366>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    3336:	45a3      	cmp	fp, r4
    3338:	ddd1      	ble.n	32de <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x36a>
                  total += (input_value * filter_value);
    333a:	f859 1024 	ldr.w	r1, [r9, r4, lsl #2]
    333e:	4b47      	ldr	r3, [pc, #284]	; (345c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4e8>)
    3340:	4798      	blx	r3
    3342:	4601      	mov	r1, r0
    3344:	9803      	ldr	r0, [sp, #12]
    3346:	4b46      	ldr	r3, [pc, #280]	; (3460 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4ec>)
    3348:	4798      	blx	r3
    334a:	9003      	str	r0, [sp, #12]
    334c:	e7c9      	b.n	32e2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x36e>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    334e:	3701      	adds	r7, #1
    3350:	9b05      	ldr	r3, [sp, #20]
    3352:	441d      	add	r5, r3
    3354:	9b06      	ldr	r3, [sp, #24]
    3356:	4499      	add	r9, r3
    3358:	9b04      	ldr	r3, [sp, #16]
    335a:	4498      	add	r8, r3
    335c:	9b02      	ldr	r3, [sp, #8]
    335e:	429f      	cmp	r7, r3
    3360:	d004      	beq.n	336c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x3f8>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    3362:	f1bb 0f00 	cmp.w	fp, #0
    3366:	ddf2      	ble.n	334e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x3da>
    3368:	2400      	movs	r4, #0
    336a:	e7bd      	b.n	32e8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x374>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    336c:	9b07      	ldr	r3, [sp, #28]
    336e:	3301      	adds	r3, #1
    3370:	9307      	str	r3, [sp, #28]
    3372:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    3374:	9913      	ldr	r1, [sp, #76]	; 0x4c
    3376:	440a      	add	r2, r1
    3378:	920f      	str	r2, [sp, #60]	; 0x3c
    337a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    337c:	9912      	ldr	r1, [sp, #72]	; 0x48
    337e:	440a      	add	r2, r1
    3380:	920e      	str	r2, [sp, #56]	; 0x38
    3382:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3384:	4416      	add	r6, r2
    3386:	9a08      	ldr	r2, [sp, #32]
    3388:	4293      	cmp	r3, r2
    338a:	d00b      	beq.n	33a4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x430>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    338c:	9b02      	ldr	r3, [sp, #8]
    338e:	2b00      	cmp	r3, #0
    3390:	ddec      	ble.n	336c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x3f8>
    3392:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    3396:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    339a:	9d10      	ldr	r5, [sp, #64]	; 0x40
    339c:	2700      	movs	r7, #0
    339e:	e7e0      	b.n	3362 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x3ee>
          float total = 0.f;
    33a0:	2300      	movs	r3, #0
    33a2:	9303      	str	r3, [sp, #12]
          if (bias_data) {
    33a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    33a6:	2b00      	cmp	r3, #0
    33a8:	d046      	beq.n	3438 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4c4>
            bias_value = bias_data[out_channel];
    33aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    33ac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    33b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    33b2:	2b00      	cmp	r3, #0
    33b4:	db42      	blt.n	343c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4c8>
    33b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    33b8:	4293      	cmp	r3, r2
    33ba:	da3f      	bge.n	343c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4c8>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    33bc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    33be:	2b00      	cmp	r3, #0
    33c0:	db3e      	blt.n	3440 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4cc>
    33c2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    33c4:	4293      	cmp	r3, r2
    33c6:	da3b      	bge.n	3440 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4cc>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    33c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    33ca:	2b00      	cmp	r3, #0
    33cc:	db3a      	blt.n	3444 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4d0>
    33ce:	9a21      	ldr	r2, [sp, #132]	; 0x84
    33d0:	4293      	cmp	r3, r2
    33d2:	da37      	bge.n	3444 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4d0>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    33d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    33d6:	2b00      	cmp	r3, #0
    33d8:	db36      	blt.n	3448 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4d4>
    33da:	9a14      	ldr	r2, [sp, #80]	; 0x50
    33dc:	429a      	cmp	r2, r3
    33de:	dd33      	ble.n	3448 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4d4>
              ActivationFunctionWithMinMax(total + bias_value,
    33e0:	9903      	ldr	r1, [sp, #12]
    33e2:	4b1f      	ldr	r3, [pc, #124]	; (3460 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4ec>)
    33e4:	4798      	blx	r3
    33e6:	4604      	mov	r4, r0
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    33e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
    33ea:	4629      	mov	r1, r5
    33ec:	4b1d      	ldr	r3, [pc, #116]	; (3464 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4f0>)
    33ee:	4798      	blx	r3
    33f0:	b100      	cbz	r0, 33f4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x480>
	return __b;
    33f2:	462c      	mov	r4, r5
      if (__b < __a)
    33f4:	9d16      	ldr	r5, [sp, #88]	; 0x58
    33f6:	4629      	mov	r1, r5
    33f8:	4620      	mov	r0, r4
    33fa:	4b1b      	ldr	r3, [pc, #108]	; (3468 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4f4>)
    33fc:	4798      	blx	r3
    33fe:	b100      	cbz	r0, 3402 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x48e>
	return __b;
    3400:	462c      	mov	r4, r5
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    3402:	9b26      	ldr	r3, [sp, #152]	; 0x98
    3404:	f843 4b04 	str.w	r4, [r3], #4
    3408:	9326      	str	r3, [sp, #152]	; 0x98
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    340a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    340c:	3301      	adds	r3, #1
    340e:	9309      	str	r3, [sp, #36]	; 0x24
    3410:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    3412:	9927      	ldr	r1, [sp, #156]	; 0x9c
    3414:	440a      	add	r2, r1
    3416:	921f      	str	r2, [sp, #124]	; 0x7c
    3418:	9a14      	ldr	r2, [sp, #80]	; 0x50
    341a:	4293      	cmp	r3, r2
    341c:	d026      	beq.n	346c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4f8>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    341e:	9b08      	ldr	r3, [sp, #32]
    3420:	2b00      	cmp	r3, #0
    3422:	ddbd      	ble.n	33a0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x42c>
    3424:	9e19      	ldr	r6, [sp, #100]	; 0x64
    3426:	9b24      	ldr	r3, [sp, #144]	; 0x90
    3428:	930e      	str	r3, [sp, #56]	; 0x38
    342a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    342c:	930f      	str	r3, [sp, #60]	; 0x3c
    342e:	2300      	movs	r3, #0
    3430:	9307      	str	r3, [sp, #28]
    3432:	2300      	movs	r3, #0
    3434:	9303      	str	r3, [sp, #12]
    3436:	e7a9      	b.n	338c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x418>
          float bias_value = 0.0f;
    3438:	2000      	movs	r0, #0
    343a:	e7b9      	b.n	33b0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x43c>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    343c:	4b06      	ldr	r3, [pc, #24]	; (3458 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4e4>)
    343e:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    3440:	4b05      	ldr	r3, [pc, #20]	; (3458 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4e4>)
    3442:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    3444:	4b04      	ldr	r3, [pc, #16]	; (3458 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4e4>)
    3446:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    3448:	4b03      	ldr	r3, [pc, #12]	; (3458 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x4e4>)
    344a:	4798      	blx	r3
    344c:	7f7fffff 	.word	0x7f7fffff
    3450:	40c00000 	.word	0x40c00000
    3454:	bf800000 	.word	0xbf800000
    3458:	0001739d 	.word	0x0001739d
    345c:	00015d41 	.word	0x00015d41
    3460:	00015b31 	.word	0x00015b31
    3464:	0001607d 	.word	0x0001607d
    3468:	000160b9 	.word	0x000160b9
      for (int out_x = 0; out_x < output_width; ++out_x) {
    346c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    346e:	3301      	adds	r3, #1
    3470:	931b      	str	r3, [sp, #108]	; 0x6c
    3472:	9a22      	ldr	r2, [sp, #136]	; 0x88
    3474:	992f      	ldr	r1, [sp, #188]	; 0xbc
    3476:	440a      	add	r2, r1
    3478:	9222      	str	r2, [sp, #136]	; 0x88
    347a:	9a24      	ldr	r2, [sp, #144]	; 0x90
    347c:	9931      	ldr	r1, [sp, #196]	; 0xc4
    347e:	440a      	add	r2, r1
    3480:	9224      	str	r2, [sp, #144]	; 0x90
    3482:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3484:	9930      	ldr	r1, [sp, #192]	; 0xc0
    3486:	440a      	add	r2, r1
    3488:	9210      	str	r2, [sp, #64]	; 0x40
    348a:	9a21      	ldr	r2, [sp, #132]	; 0x84
    348c:	4293      	cmp	r3, r2
    348e:	f47f aed0 	bne.w	3232 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2be>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    3492:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    3494:	3301      	adds	r3, #1
    3496:	931c      	str	r3, [sp, #112]	; 0x70
    3498:	9a18      	ldr	r2, [sp, #96]	; 0x60
    349a:	992c      	ldr	r1, [sp, #176]	; 0xb0
    349c:	440a      	add	r2, r1
    349e:	9218      	str	r2, [sp, #96]	; 0x60
    34a0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    34a2:	992d      	ldr	r1, [sp, #180]	; 0xb4
    34a4:	440a      	add	r2, r1
    34a6:	921d      	str	r2, [sp, #116]	; 0x74
    34a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
    34aa:	9929      	ldr	r1, [sp, #164]	; 0xa4
    34ac:	440a      	add	r2, r1
    34ae:	9219      	str	r2, [sp, #100]	; 0x64
    34b0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    34b2:	4293      	cmp	r3, r2
    34b4:	f47f aeb1 	bne.w	321a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x2a6>
  for (int batch = 0; batch < batches; ++batch) {
    34b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    34ba:	3301      	adds	r3, #1
    34bc:	930a      	str	r3, [sp, #40]	; 0x28
    34be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    34c0:	992e      	ldr	r1, [sp, #184]	; 0xb8
    34c2:	440a      	add	r2, r1
    34c4:	921a      	str	r2, [sp, #104]	; 0x68
    34c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
    34c8:	992a      	ldr	r1, [sp, #168]	; 0xa8
    34ca:	440a      	add	r2, r1
    34cc:	9220      	str	r2, [sp, #128]	; 0x80
    34ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    34d0:	4293      	cmp	r3, r2
    34d2:	f47f ae96 	bne.w	3202 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x28e>
    if (size_ > kMaxSmallSize) {
    34d6:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    34d8:	2b05      	cmp	r3, #5
    34da:	dd03      	ble.n	34e4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x570>
      delete[] dims_pointer_;
    34dc:	984b      	ldr	r0, [sp, #300]	; 0x12c
    34de:	b108      	cbz	r0, 34e4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x570>
    34e0:	4b06      	ldr	r3, [pc, #24]	; (34fc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x588>)
    34e2:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    34e4:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    34e6:	2b05      	cmp	r3, #5
    34e8:	dd03      	ble.n	34f2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x57e>
      delete[] dims_pointer_;
    34ea:	983f      	ldr	r0, [sp, #252]	; 0xfc
    34ec:	b108      	cbz	r0, 34f2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x57e>
    34ee:	4b03      	ldr	r3, [pc, #12]	; (34fc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_+0x588>)
    34f0:	4798      	blx	r3
                      GetTensorData<float>(filter), GetTensorShape(bias),
                      GetTensorData<float>(bias), GetTensorShape(output),
                      GetTensorData<float>(output), GetTensorShape(im2col),
                      GetTensorData<float>(im2col));
  return kTfLiteOk;
}
    34f2:	2000      	movs	r0, #0
    34f4:	b051      	add	sp, #324	; 0x144
    34f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    34fa:	bf00      	nop
    34fc:	0000ccbd 	.word	0x0000ccbd

00003500 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    3500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3504:	f6ad 0d4c 	subw	sp, sp, #2124	; 0x84c
    3508:	4680      	mov	r8, r0
    350a:	460f      	mov	r7, r1
  return &context->tensors[node->outputs->data[index]];
    350c:	6884      	ldr	r4, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    350e:	680b      	ldr	r3, [r1, #0]
    3510:	685d      	ldr	r5, [r3, #4]
    3512:	01ad      	lsls	r5, r5, #6
    3514:	eb04 0a05 	add.w	sl, r4, r5
    3518:	689e      	ldr	r6, [r3, #8]
    351a:	eb04 1286 	add.w	r2, r4, r6, lsl #6
    351e:	9208      	str	r2, [sp, #32]
  const bool use_tensor = index < node->inputs->size &&
    3520:	681a      	ldr	r2, [r3, #0]
    3522:	2a02      	cmp	r2, #2
    3524:	dd09      	ble.n	353a <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3a>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    3526:	68db      	ldr	r3, [r3, #12]
  const bool use_tensor = index < node->inputs->size &&
    3528:	f1b3 3fff 	cmp.w	r3, #4294967295
    352c:	d002      	beq.n	3534 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x34>
    return &context->tensors[node->inputs->data[index]];
    352e:	eb04 1b83 	add.w	fp, r4, r3, lsl #6
    3532:	e004      	b.n	353e <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3e>
  return nullptr;
    3534:	f04f 0b00 	mov.w	fp, #0
    3538:	e001      	b.n	353e <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3e>
    353a:	f04f 0b00 	mov.w	fp, #0
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);

  int input_width = input->dims->data[2];
  int input_height = input->dims->data[1];
  int filter_width = filter->dims->data[2];
    353e:	9808      	ldr	r0, [sp, #32]
    3540:	6881      	ldr	r1, [r0, #8]
  int output_height = output->dims->data[1];

  OpData data;

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
    3542:	5d62      	ldrb	r2, [r4, r5]
    3544:	2a09      	cmp	r2, #9
    3546:	d037      	beq.n	35b8 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xb8>
  auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);
    3548:	697b      	ldr	r3, [r7, #20]
    354a:	461e      	mov	r6, r3
    354c:	9309      	str	r3, [sp, #36]	; 0x24
  return &context->tensors[node->outputs->data[index]];
    354e:	687b      	ldr	r3, [r7, #4]
    3550:	685b      	ldr	r3, [r3, #4]
    3552:	eb04 1983 	add.w	r9, r4, r3, lsl #6
  int input_width = input->dims->data[2];
    3556:	f8da 0008 	ldr.w	r0, [sl, #8]
  int output_width = output->dims->data[2];
    355a:	f8d9 e008 	ldr.w	lr, [r9, #8]
                           filter->dims->data[kConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
                      affine_quantization->zero_point->size);
  }

  TF_LITE_ENSURE_STATUS(CalculateOpData(
    355e:	68c3      	ldr	r3, [r0, #12]
    3560:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
    3564:	f8cd c018 	str.w	ip, [sp, #24]
    3568:	9205      	str	r2, [sp, #20]
    356a:	f8de 2008 	ldr.w	r2, [lr, #8]
    356e:	9204      	str	r2, [sp, #16]
    3570:	f8de 200c 	ldr.w	r2, [lr, #12]
    3574:	9203      	str	r2, [sp, #12]
    3576:	688a      	ldr	r2, [r1, #8]
    3578:	9202      	str	r2, [sp, #8]
    357a:	68ca      	ldr	r2, [r1, #12]
    357c:	9201      	str	r2, [sp, #4]
    357e:	6882      	ldr	r2, [r0, #8]
    3580:	9200      	str	r2, [sp, #0]
    3582:	4632      	mov	r2, r6
    3584:	4639      	mov	r1, r7
    3586:	4640      	mov	r0, r8
    3588:	4e5d      	ldr	r6, [pc, #372]	; (3700 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x200>)
    358a:	47b0      	blx	r6
    358c:	2800      	cmp	r0, #0
    358e:	d14d      	bne.n	362c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x12c>
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, &data));

  switch (input->type) {  // Already know in/out types are same.
    3590:	5d60      	ldrb	r0, [r4, r5]
    3592:	2803      	cmp	r0, #3
    3594:	f000 80a1 	beq.w	36da <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x1da>
    3598:	2809      	cmp	r0, #9
    359a:	f000 808d 	beq.w	36b8 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x1b8>
    359e:	2801      	cmp	r0, #1
    35a0:	d078      	beq.n	3694 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x194>
    case kTfLiteUInt8:
      return EvalQuantized(context, node, params, &data, input, filter, bias,
                           nullptr, nullptr, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    35a2:	f8d8 6014 	ldr.w	r6, [r8, #20]
    35a6:	4b57      	ldr	r3, [pc, #348]	; (3704 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x204>)
    35a8:	4798      	blx	r3
    35aa:	5d63      	ldrb	r3, [r4, r5]
    35ac:	4602      	mov	r2, r0
    35ae:	4956      	ldr	r1, [pc, #344]	; (3708 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x208>)
    35b0:	4640      	mov	r0, r8
    35b2:	47b0      	blx	r6
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    35b4:	2001      	movs	r0, #1
    35b6:	e039      	b.n	362c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x12c>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    35b8:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    35bc:	2b01      	cmp	r3, #1
    35be:	d125      	bne.n	360c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x10c>
            filter->quantization.params);
    35c0:	9b08      	ldr	r3, [sp, #32]
    35c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    TF_LITE_ENSURE(context, affine_quantization);
    35c4:	2b00      	cmp	r3, #0
    35c6:	d035      	beq.n	3634 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x134>
    TF_LITE_ENSURE(context, affine_quantization->scale);
    35c8:	6818      	ldr	r0, [r3, #0]
    35ca:	2800      	cmp	r0, #0
    35cc:	d03e      	beq.n	364c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x14c>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
    35ce:	f8d3 e004 	ldr.w	lr, [r3, #4]
    35d2:	f1be 0f00 	cmp.w	lr, #0
    35d6:	d045      	beq.n	3664 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x164>
    TF_LITE_ENSURE(context,
    35d8:	6803      	ldr	r3, [r0, #0]
    35da:	2b01      	cmp	r3, #1
    35dc:	d002      	beq.n	35e4 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xe4>
    35de:	6848      	ldr	r0, [r1, #4]
    35e0:	4283      	cmp	r3, r0
    35e2:	d14b      	bne.n	367c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x17c>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    35e4:	f8de 0000 	ldr.w	r0, [lr]
    35e8:	4283      	cmp	r3, r0
    35ea:	d0ad      	beq.n	3548 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x48>
    35ec:	9003      	str	r0, [sp, #12]
    35ee:	9302      	str	r3, [sp, #8]
    35f0:	4b46      	ldr	r3, [pc, #280]	; (370c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x20c>)
    35f2:	9301      	str	r3, [sp, #4]
    35f4:	4b46      	ldr	r3, [pc, #280]	; (3710 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x210>)
    35f6:	9300      	str	r3, [sp, #0]
    35f8:	f8d8 4014 	ldr.w	r4, [r8, #20]
    35fc:	f240 1397 	movw	r3, #407	; 0x197
    3600:	4a44      	ldr	r2, [pc, #272]	; (3714 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x214>)
    3602:	4945      	ldr	r1, [pc, #276]	; (3718 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x218>)
    3604:	4640      	mov	r0, r8
    3606:	47a0      	blx	r4
    3608:	2001      	movs	r0, #1
    360a:	e00f      	b.n	362c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x12c>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    360c:	2401      	movs	r4, #1
    360e:	9403      	str	r4, [sp, #12]
    3610:	9302      	str	r3, [sp, #8]
    3612:	4b42      	ldr	r3, [pc, #264]	; (371c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x21c>)
    3614:	9301      	str	r3, [sp, #4]
    3616:	4b42      	ldr	r3, [pc, #264]	; (3720 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x220>)
    3618:	9300      	str	r3, [sp, #0]
    361a:	f8d8 5014 	ldr.w	r5, [r8, #20]
    361e:	f44f 73c5 	mov.w	r3, #394	; 0x18a
    3622:	4a3c      	ldr	r2, [pc, #240]	; (3714 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x214>)
    3624:	493c      	ldr	r1, [pc, #240]	; (3718 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x218>)
    3626:	4640      	mov	r0, r8
    3628:	47a8      	blx	r5
    362a:	4620      	mov	r0, r4
  }
  return kTfLiteOk;
}
    362c:	f60d 0d4c 	addw	sp, sp, #2124	; 0x84c
    3630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE(context, affine_quantization);
    3634:	4b3b      	ldr	r3, [pc, #236]	; (3724 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x224>)
    3636:	9300      	str	r3, [sp, #0]
    3638:	f8d8 4014 	ldr.w	r4, [r8, #20]
    363c:	f240 138f 	movw	r3, #399	; 0x18f
    3640:	4a34      	ldr	r2, [pc, #208]	; (3714 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x214>)
    3642:	4939      	ldr	r1, [pc, #228]	; (3728 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x228>)
    3644:	4640      	mov	r0, r8
    3646:	47a0      	blx	r4
    3648:	2001      	movs	r0, #1
    364a:	e7ef      	b.n	362c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x12c>
    TF_LITE_ENSURE(context, affine_quantization->scale);
    364c:	4b37      	ldr	r3, [pc, #220]	; (372c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x22c>)
    364e:	9300      	str	r3, [sp, #0]
    3650:	f8d8 4014 	ldr.w	r4, [r8, #20]
    3654:	f44f 73c8 	mov.w	r3, #400	; 0x190
    3658:	4a2e      	ldr	r2, [pc, #184]	; (3714 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x214>)
    365a:	4933      	ldr	r1, [pc, #204]	; (3728 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x228>)
    365c:	4640      	mov	r0, r8
    365e:	47a0      	blx	r4
    3660:	2001      	movs	r0, #1
    3662:	e7e3      	b.n	362c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x12c>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
    3664:	4b32      	ldr	r3, [pc, #200]	; (3730 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x230>)
    3666:	9300      	str	r3, [sp, #0]
    3668:	f8d8 4014 	ldr.w	r4, [r8, #20]
    366c:	f240 1391 	movw	r3, #401	; 0x191
    3670:	4a28      	ldr	r2, [pc, #160]	; (3714 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x214>)
    3672:	492d      	ldr	r1, [pc, #180]	; (3728 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x228>)
    3674:	4640      	mov	r0, r8
    3676:	47a0      	blx	r4
    3678:	2001      	movs	r0, #1
    367a:	e7d7      	b.n	362c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x12c>
    TF_LITE_ENSURE(context,
    367c:	4b2d      	ldr	r3, [pc, #180]	; (3734 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x234>)
    367e:	9300      	str	r3, [sp, #0]
    3680:	f8d8 4014 	ldr.w	r4, [r8, #20]
    3684:	f240 1395 	movw	r3, #405	; 0x195
    3688:	4a22      	ldr	r2, [pc, #136]	; (3714 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x214>)
    368a:	4927      	ldr	r1, [pc, #156]	; (3728 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x228>)
    368c:	4640      	mov	r0, r8
    368e:	47a0      	blx	r4
    3690:	2001      	movs	r0, #1
    3692:	e7cb      	b.n	362c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x12c>
                       nullptr, nullptr, output);
    3694:	f8cd 9014 	str.w	r9, [sp, #20]
    3698:	2300      	movs	r3, #0
    369a:	9304      	str	r3, [sp, #16]
    369c:	9303      	str	r3, [sp, #12]
    369e:	f8cd b008 	str.w	fp, [sp, #8]
    36a2:	9b08      	ldr	r3, [sp, #32]
    36a4:	9301      	str	r3, [sp, #4]
    36a6:	f8cd a000 	str.w	sl, [sp]
    36aa:	ab0a      	add	r3, sp, #40	; 0x28
    36ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    36ae:	4639      	mov	r1, r7
    36b0:	4640      	mov	r0, r8
    36b2:	4c21      	ldr	r4, [pc, #132]	; (3738 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x238>)
    36b4:	47a0      	blx	r4
    36b6:	e7b9      	b.n	362c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x12c>
                                     filter, bias, output, nullptr);
    36b8:	2300      	movs	r3, #0
    36ba:	9304      	str	r3, [sp, #16]
    36bc:	f8cd 900c 	str.w	r9, [sp, #12]
    36c0:	f8cd b008 	str.w	fp, [sp, #8]
    36c4:	9b08      	ldr	r3, [sp, #32]
    36c6:	9301      	str	r3, [sp, #4]
    36c8:	f8cd a000 	str.w	sl, [sp]
    36cc:	ab0a      	add	r3, sp, #40	; 0x28
    36ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    36d0:	4639      	mov	r1, r7
    36d2:	4640      	mov	r0, r8
    36d4:	4c19      	ldr	r4, [pc, #100]	; (373c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x23c>)
    36d6:	47a0      	blx	r4
    36d8:	e7a8      	b.n	362c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x12c>
                           nullptr, nullptr, output);
    36da:	f8cd 9014 	str.w	r9, [sp, #20]
    36de:	2300      	movs	r3, #0
    36e0:	9304      	str	r3, [sp, #16]
    36e2:	9303      	str	r3, [sp, #12]
    36e4:	f8cd b008 	str.w	fp, [sp, #8]
    36e8:	9b08      	ldr	r3, [sp, #32]
    36ea:	9301      	str	r3, [sp, #4]
    36ec:	f8cd a000 	str.w	sl, [sp]
    36f0:	ab0a      	add	r3, sp, #40	; 0x28
    36f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    36f4:	4639      	mov	r1, r7
    36f6:	4640      	mov	r0, r8
    36f8:	4c11      	ldr	r4, [pc, #68]	; (3740 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x240>)
    36fa:	47a0      	blx	r4
    36fc:	e796      	b.n	362c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x12c>
    36fe:	bf00      	nop
    3700:	0000221d 	.word	0x0000221d
    3704:	00001ab5 	.word	0x00001ab5
    3708:	0003bb08 	.word	0x0003bb08
    370c:	0003bae0 	.word	0x0003bae0
    3710:	0003b82c 	.word	0x0003b82c
    3714:	0003b980 	.word	0x0003b980
    3718:	0003b724 	.word	0x0003b724
    371c:	0003b740 	.word	0x0003b740
    3720:	0003b778 	.word	0x0003b778
    3724:	0003b794 	.word	0x0003b794
    3728:	0003ad08 	.word	0x0003ad08
    372c:	0003b7a8 	.word	0x0003b7a8
    3730:	0003ba44 	.word	0x0003ba44
    3734:	0003ba64 	.word	0x0003ba64
    3738:	00002f75 	.word	0x00002f75
    373c:	00002cad 	.word	0x00002cad
    3740:	00002651 	.word	0x00002651

00003744 <_ZN6tflite3ops5micro16Register_CONV_2DEv>:

}  // namespace conv

TfLiteRegistration Register_CONV_2D() {
    3744:	b470      	push	{r4, r5, r6}
    3746:	4606      	mov	r6, r0
          /*prepare=*/conv::Prepare,
          /*invoke=*/conv::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    3748:	4604      	mov	r4, r0
    374a:	4d05      	ldr	r5, [pc, #20]	; (3760 <_ZN6tflite3ops5micro16Register_CONV_2DEv+0x1c>)
    374c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    374e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3750:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3754:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    3758:	4630      	mov	r0, r6
    375a:	bc70      	pop	{r4, r5, r6}
    375c:	4770      	bx	lr
    375e:	bf00      	nop
    3760:	0003b960 	.word	0x0003b960

00003764 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:
  return status;
}

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
    3764:	b500      	push	{lr}
    3766:	b083      	sub	sp, #12
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    3768:	6b83      	ldr	r3, [r0, #56]	; 0x38
    376a:	b163      	cbz	r3, 3786 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x22>
  void* data = nullptr;
    376c:	aa02      	add	r2, sp, #8
    376e:	2100      	movs	r1, #0
    3770:	f842 1d04 	str.w	r1, [r2, #-4]!
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
    3774:	2118      	movs	r1, #24
    3776:	4798      	blx	r3
    3778:	2801      	cmp	r0, #1
      kTfLiteError) {
    return nullptr;
  }
  return data;
    377a:	bf14      	ite	ne
    377c:	9801      	ldrne	r0, [sp, #4]
    return nullptr;
    377e:	2000      	moveq	r0, #0
}
    3780:	b003      	add	sp, #12
    3782:	f85d fb04 	ldr.w	pc, [sp], #4
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    3786:	4b01      	ldr	r3, [pc, #4]	; (378c <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x28>)
    3788:	4798      	blx	r3
    378a:	bf00      	nop
    378c:	0001739d 	.word	0x0001739d

00003790 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    3790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3794:	b097      	sub	sp, #92	; 0x5c
  TFLITE_DCHECK(node->user_data != nullptr);
    3796:	f8d1 8010 	ldr.w	r8, [r1, #16]
    379a:	f1b8 0f00 	cmp.w	r8, #0
    379e:	d016      	beq.n	37ce <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
    37a0:	4606      	mov	r6, r0
  TFLITE_DCHECK(node->builtin_data != nullptr);
    37a2:	f8d1 c014 	ldr.w	ip, [r1, #20]
    37a6:	f1bc 0f00 	cmp.w	ip, #0
    37aa:	d012      	beq.n	37d2 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
  return &context->tensors[node->inputs->data[index]];
    37ac:	6884      	ldr	r4, [r0, #8]
    37ae:	680b      	ldr	r3, [r1, #0]
    37b0:	685d      	ldr	r5, [r3, #4]
    37b2:	01ad      	lsls	r5, r5, #6
    37b4:	eb04 0e05 	add.w	lr, r4, r5
  const bool use_tensor = index < node->inputs->size &&
    37b8:	681a      	ldr	r2, [r3, #0]
    37ba:	2a02      	cmp	r2, #2
    37bc:	dd0e      	ble.n	37dc <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x4c>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    37be:	68df      	ldr	r7, [r3, #12]
  const bool use_tensor = index < node->inputs->size &&
    37c0:	f1b7 3fff 	cmp.w	r7, #4294967295
    37c4:	d007      	beq.n	37d6 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x46>
    return &context->tensors[node->inputs->data[index]];
    37c6:	eb04 1287 	add.w	r2, r4, r7, lsl #6
    37ca:	9205      	str	r2, [sp, #20]
    37cc:	e008      	b.n	37e0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x50>
  TFLITE_DCHECK(node->user_data != nullptr);
    37ce:	4b74      	ldr	r3, [pc, #464]	; (39a0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x210>)
    37d0:	4798      	blx	r3
  TFLITE_DCHECK(node->builtin_data != nullptr);
    37d2:	4b73      	ldr	r3, [pc, #460]	; (39a0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x210>)
    37d4:	4798      	blx	r3
  return nullptr;
    37d6:	2200      	movs	r2, #0
    37d8:	9205      	str	r2, [sp, #20]
    37da:	e001      	b.n	37e0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x50>
    37dc:	2200      	movs	r2, #0
    37de:	9205      	str	r2, [sp, #20]
  return &context->tensors[node->outputs->data[index]];
    37e0:	684a      	ldr	r2, [r1, #4]
    37e2:	6852      	ldr	r2, [r2, #4]
    37e4:	ea4f 1a82 	mov.w	sl, r2, lsl #6
    37e8:	eb04 090a 	add.w	r9, r4, sl

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    37ec:	5d60      	ldrb	r0, [r4, r5]
    37ee:	f814 200a 	ldrb.w	r2, [r4, sl]
    37f2:	4282      	cmp	r2, r0
    37f4:	d10c      	bne.n	3810 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
  return &context->tensors[node->inputs->data[index]];
    37f6:	689b      	ldr	r3, [r3, #8]
    37f8:	019b      	lsls	r3, r3, #6
    37fa:	eb04 0a03 	add.w	sl, r4, r3
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
    37fe:	5ce3      	ldrb	r3, [r4, r3]
    3800:	4283      	cmp	r3, r0
    3802:	d01c      	beq.n	383e <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
    3804:	6973      	ldr	r3, [r6, #20]
    3806:	4967      	ldr	r1, [pc, #412]	; (39a4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
    3808:	4630      	mov	r0, r6
    380a:	4798      	blx	r3
    380c:	2001      	movs	r0, #1
    380e:	e013      	b.n	3838 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    3810:	6977      	ldr	r7, [r6, #20]
    3812:	4d65      	ldr	r5, [pc, #404]	; (39a8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x218>)
    3814:	47a8      	blx	r5
    3816:	4680      	mov	r8, r0
    3818:	f814 000a 	ldrb.w	r0, [r4, sl]
    381c:	47a8      	blx	r5
    381e:	9003      	str	r0, [sp, #12]
    3820:	f8cd 8008 	str.w	r8, [sp, #8]
    3824:	4b61      	ldr	r3, [pc, #388]	; (39ac <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x21c>)
    3826:	9301      	str	r3, [sp, #4]
    3828:	4b61      	ldr	r3, [pc, #388]	; (39b0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
    382a:	9300      	str	r3, [sp, #0]
    382c:	2364      	movs	r3, #100	; 0x64
    382e:	4a61      	ldr	r2, [pc, #388]	; (39b4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x224>)
    3830:	4961      	ldr	r1, [pc, #388]	; (39b8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
    3832:	4630      	mov	r0, r6
    3834:	47b8      	blx	r7
    3836:	2001      	movs	r0, #1
    } else {
      data->buffer_idx = -1;
    }
  }
  return kTfLiteOk;
}
    3838:	b017      	add	sp, #92	; 0x5c
    383a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params->activation,
    383e:	f89c b000 	ldrb.w	fp, [ip]
  data->buffer_idx = -1;
    3842:	f04f 33ff 	mov.w	r3, #4294967295
    3846:	f8c8 3014 	str.w	r3, [r8, #20]
  if (data_type != kTfLiteFloat32) {
    384a:	2801      	cmp	r0, #1
    384c:	d026      	beq.n	389c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x10c>
    double real_multiplier = 0.0;
    384e:	a916      	add	r1, sp, #88	; 0x58
    3850:	2200      	movs	r2, #0
    3852:	2300      	movs	r3, #0
    3854:	e961 2306 	strd	r2, r3, [r1, #-24]!
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    3858:	9101      	str	r1, [sp, #4]
    385a:	f8cd 9000 	str.w	r9, [sp]
    385e:	9b05      	ldr	r3, [sp, #20]
    3860:	4652      	mov	r2, sl
    3862:	4671      	mov	r1, lr
    3864:	4630      	mov	r0, r6
    3866:	4f55      	ldr	r7, [pc, #340]	; (39bc <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
    3868:	47b8      	blx	r7
    386a:	2800      	cmp	r0, #0
    386c:	d1e4      	bne.n	3838 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
    386e:	ab0a      	add	r3, sp, #40	; 0x28
    3870:	4642      	mov	r2, r8
    3872:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    3876:	4f52      	ldr	r7, [pc, #328]	; (39c0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x230>)
    3878:	47b8      	blx	r7
    data->output_shift = -exponent;
    387a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    387c:	425b      	negs	r3, r3
    387e:	f8c8 3004 	str.w	r3, [r8, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    3882:	f108 030c 	add.w	r3, r8, #12
    3886:	9300      	str	r3, [sp, #0]
    3888:	f108 0308 	add.w	r3, r8, #8
    388c:	464a      	mov	r2, r9
    388e:	4659      	mov	r1, fp
    3890:	4630      	mov	r0, r6
    3892:	f8df b144 	ldr.w	fp, [pc, #324]	; 39d8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x248>
    3896:	47d8      	blx	fp
    3898:	2800      	cmp	r0, #0
    389a:	d1cd      	bne.n	3838 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
  if (input->type == kTfLiteInt8 && nullptr != GetTensorData<int32>(bias)) {
    389c:	5d63      	ldrb	r3, [r4, r5]
    389e:	2b09      	cmp	r3, #9
    38a0:	d001      	beq.n	38a6 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x116>
  return kTfLiteOk;
    38a2:	2000      	movs	r0, #0
    38a4:	e7c8      	b.n	3838 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
    38a6:	9b05      	ldr	r3, [sp, #20]
    38a8:	2b00      	cmp	r3, #0
    38aa:	d074      	beq.n	3996 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x206>
  if (input->type == kTfLiteInt8 && nullptr != GetTensorData<int32>(bias)) {
    38ac:	685b      	ldr	r3, [r3, #4]
    38ae:	2b00      	cmp	r3, #0
    38b0:	d073      	beq.n	399a <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x20a>
  if (tensor == nullptr) {
    38b2:	f1ba 0f00 	cmp.w	sl, #0
    38b6:	d051      	beq.n	395c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1cc>
  TfLiteIntArray* dims = tensor->dims;
    38b8:	f8da 5008 	ldr.w	r5, [sl, #8]
  const int dims_size = dims->size;
    38bc:	682c      	ldr	r4, [r5, #0]
    size_ = dimensions_count;
    38be:	940a      	str	r4, [sp, #40]	; 0x28
    if (dimensions_count > kMaxSmallSize) {
    38c0:	2c05      	cmp	r4, #5
    38c2:	dd4e      	ble.n	3962 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1d2>
      dims_pointer_ = new int32[dimensions_count];
    38c4:	4b3f      	ldr	r3, [pc, #252]	; (39c4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x234>)
    38c6:	429c      	cmp	r4, r3
    38c8:	bf94      	ite	ls
    38ca:	00a0      	lslls	r0, r4, #2
    38cc:	f04f 30ff 	movhi.w	r0, #4294967295
    38d0:	4b3d      	ldr	r3, [pc, #244]	; (39c8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
    38d2:	4798      	blx	r3
    38d4:	900b      	str	r0, [sp, #44]	; 0x2c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    38d6:	00a2      	lsls	r2, r4, #2
    38d8:	1d29      	adds	r1, r5, #4
    38da:	4b3c      	ldr	r3, [pc, #240]	; (39cc <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
    38dc:	4798      	blx	r3
  if (tensor == nullptr) {
    38de:	f1b9 0f00 	cmp.w	r9, #0
    38e2:	d042      	beq.n	396a <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1da>
  TfLiteIntArray* dims = tensor->dims;
    38e4:	f8d9 5008 	ldr.w	r5, [r9, #8]
  const int dims_size = dims->size;
    38e8:	682c      	ldr	r4, [r5, #0]
    size_ = dimensions_count;
    38ea:	9410      	str	r4, [sp, #64]	; 0x40
    if (dimensions_count > kMaxSmallSize) {
    38ec:	2c05      	cmp	r4, #5
    38ee:	dd3a      	ble.n	3966 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1d6>
      dims_pointer_ = new int32[dimensions_count];
    38f0:	4b34      	ldr	r3, [pc, #208]	; (39c4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x234>)
    38f2:	429c      	cmp	r4, r3
    38f4:	bf94      	ite	ls
    38f6:	00a0      	lslls	r0, r4, #2
    38f8:	f04f 30ff 	movhi.w	r0, #4294967295
    38fc:	4b32      	ldr	r3, [pc, #200]	; (39c8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
    38fe:	4798      	blx	r3
    3900:	9011      	str	r0, [sp, #68]	; 0x44
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    3902:	00a2      	lsls	r2, r4, #2
    3904:	1d29      	adds	r1, r5, #4
    3906:	4b31      	ldr	r3, [pc, #196]	; (39cc <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
    3908:	4798      	blx	r3
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    390a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    390c:	2b02      	cmp	r3, #2
    390e:	d12c      	bne.n	396a <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1da>
  inline int32 DimensionsCount() const { return size_; }
    3910:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    TFLITE_DCHECK_GE(i, 0);
    3912:	1e6b      	subs	r3, r5, #1
    3914:	d42b      	bmi.n	396e <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1de>
    TFLITE_DCHECK_LT(i, size_);
    3916:	42ab      	cmp	r3, r5
    3918:	da2b      	bge.n	3972 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    391a:	2d05      	cmp	r5, #5
    391c:	dc2b      	bgt.n	3976 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1e6>
    391e:	aa16      	add	r2, sp, #88	; 0x58
    3920:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3924:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
    3928:	9306      	str	r3, [sp, #24]
    filter_dims.h = 1;
    392a:	2301      	movs	r3, #1
    392c:	9307      	str	r3, [sp, #28]
    filter_dims.w = 1;
    392e:	9308      	str	r3, [sp, #32]
    filter_dims.c = output_shape.Dims(1);
    3930:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3932:	9309      	str	r3, [sp, #36]	; 0x24
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
    3934:	a806      	add	r0, sp, #24
    3936:	4b26      	ldr	r3, [pc, #152]	; (39d0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
    3938:	4798      	blx	r3
    if (buf_size > 0) {
    393a:	1e01      	subs	r1, r0, #0
    393c:	dd1f      	ble.n	397e <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1ee>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
    393e:	6c33      	ldr	r3, [r6, #64]	; 0x40
    3940:	f108 0214 	add.w	r2, r8, #20
    3944:	4630      	mov	r0, r6
    3946:	4798      	blx	r3
    3948:	4604      	mov	r4, r0
    394a:	b1e0      	cbz	r0, 3986 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1f6>
    if (size_ > kMaxSmallSize) {
    394c:	2d05      	cmp	r5, #5
    394e:	dd03      	ble.n	3958 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1c8>
      delete[] dims_pointer_;
    3950:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3952:	b108      	cbz	r0, 3958 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1c8>
    3954:	4b1f      	ldr	r3, [pc, #124]	; (39d4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    3956:	4798      	blx	r3
    3958:	4620      	mov	r0, r4
    395a:	e76d      	b.n	3838 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
  RuntimeShape() : size_(0) {}
    395c:	2300      	movs	r3, #0
    395e:	930a      	str	r3, [sp, #40]	; 0x28
    3960:	e7bd      	b.n	38de <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x14e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3962:	a80b      	add	r0, sp, #44	; 0x2c
    3964:	e7b7      	b.n	38d6 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x146>
    3966:	a811      	add	r0, sp, #68	; 0x44
    3968:	e7cb      	b.n	3902 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x172>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    396a:	4b0d      	ldr	r3, [pc, #52]	; (39a0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x210>)
    396c:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    396e:	4b0c      	ldr	r3, [pc, #48]	; (39a0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x210>)
    3970:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    3972:	4b0b      	ldr	r3, [pc, #44]	; (39a0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x210>)
    3974:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    3976:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    397c:	e7d4      	b.n	3928 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x198>
      data->buffer_idx = -1;
    397e:	f04f 33ff 	mov.w	r3, #4294967295
    3982:	f8c8 3014 	str.w	r3, [r8, #20]
    if (size_ > kMaxSmallSize) {
    3986:	2d05      	cmp	r5, #5
    3988:	dd03      	ble.n	3992 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x202>
      delete[] dims_pointer_;
    398a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    398c:	b108      	cbz	r0, 3992 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x202>
    398e:	4b11      	ldr	r3, [pc, #68]	; (39d4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    3990:	4798      	blx	r3
  return kTfLiteOk;
    3992:	2000      	movs	r0, #0
    3994:	e750      	b.n	3838 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
    3996:	2000      	movs	r0, #0
    3998:	e74e      	b.n	3838 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
    399a:	2000      	movs	r0, #0
    399c:	e74c      	b.n	3838 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
    399e:	bf00      	nop
    39a0:	0001739d 	.word	0x0001739d
    39a4:	0003bc18 	.word	0x0003bc18
    39a8:	00001ab5 	.word	0x00001ab5
    39ac:	0003bbfc 	.word	0x0003bbfc
    39b0:	0003bc0c 	.word	0x0003bc0c
    39b4:	0003bba0 	.word	0x0003bba0
    39b8:	0003bbe0 	.word	0x0003bbe0
    39bc:	00001da1 	.word	0x00001da1
    39c0:	00001b31 	.word	0x00001b31
    39c4:	1ffffffe 	.word	0x1ffffffe
    39c8:	0000cd6d 	.word	0x0000cd6d
    39cc:	00018121 	.word	0x00018121
    39d0:	0000a66d 	.word	0x0000a66d
    39d4:	0000ccbd 	.word	0x0000ccbd
    39d8:	00001e5d 	.word	0x00001e5d

000039dc <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data, const TfLiteTensor* input,
                               const TfLiteTensor* filter,
                               const TfLiteTensor* bias, TfLiteTensor* output) {
    39dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    39e0:	b0df      	sub	sp, #380	; 0x17c
    39e2:	9008      	str	r0, [sp, #32]
    39e4:	4614      	mov	r4, r2
    39e6:	461d      	mov	r5, r3
    39e8:	f8dd 91a4 	ldr.w	r9, [sp, #420]	; 0x1a4
    39ec:	f8dd b1a8 	ldr.w	fp, [sp, #424]	; 0x1a8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    39f0:	f1b9 0f00 	cmp.w	r9, #0
    39f4:	f000 8120 	beq.w	3c38 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x25c>
  // The 'if' condition can be removed when null handling of bias is added to
  // arm_fully_connected_s8
  if (nullptr != GetTensorData<int32>(bias)) {
    39f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
    39fc:	2b00      	cmp	r3, #0
    39fe:	f000 811b 	beq.w	3c38 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x25c>
  if (tensor == nullptr) {
    3a02:	f1bb 0f00 	cmp.w	fp, #0
    3a06:	f000 80e7 	beq.w	3bd8 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1fc>
  TfLiteIntArray* dims = tensor->dims;
    3a0a:	f8db 7008 	ldr.w	r7, [fp, #8]
  const int dims_size = dims->size;
    3a0e:	683e      	ldr	r6, [r7, #0]
    size_ = dimensions_count;
    3a10:	9634      	str	r6, [sp, #208]	; 0xd0
    if (dimensions_count > kMaxSmallSize) {
    3a12:	2e05      	cmp	r6, #5
    3a14:	f340 80de 	ble.w	3bd4 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1f8>
      dims_pointer_ = new int32[dimensions_count];
    3a18:	4b7d      	ldr	r3, [pc, #500]	; (3c10 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x234>)
    3a1a:	429e      	cmp	r6, r3
    3a1c:	bf94      	ite	ls
    3a1e:	00b0      	lslls	r0, r6, #2
    3a20:	f04f 30ff 	movhi.w	r0, #4294967295
    3a24:	4b7b      	ldr	r3, [pc, #492]	; (3c14 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x238>)
    3a26:	4798      	blx	r3
    3a28:	9035      	str	r0, [sp, #212]	; 0xd4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    3a2a:	00b2      	lsls	r2, r6, #2
    3a2c:	1d39      	adds	r1, r7, #4
    3a2e:	4b7a      	ldr	r3, [pc, #488]	; (3c18 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x23c>)
    3a30:	4798      	blx	r3
    const RuntimeShape output_shape = GetTensorShape(output);
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    3a32:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    3a34:	2b02      	cmp	r3, #2
    3a36:	f040 80cf 	bne.w	3bd8 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1fc>
  if (tensor == nullptr) {
    3a3a:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
    3a3c:	2b00      	cmp	r3, #0
    3a3e:	f000 80cf 	beq.w	3be0 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x204>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    3a42:	9f35      	ldr	r7, [sp, #212]	; 0xd4
    3a44:	f8dd 80d8 	ldr.w	r8, [sp, #216]	; 0xd8
  TfLiteIntArray* dims = tensor->dims;
    3a48:	f8d3 a008 	ldr.w	sl, [r3, #8]
  const int dims_size = dims->size;
    3a4c:	f8da 6000 	ldr.w	r6, [sl]
    size_ = dimensions_count;
    3a50:	963a      	str	r6, [sp, #232]	; 0xe8
    if (dimensions_count > kMaxSmallSize) {
    3a52:	2e05      	cmp	r6, #5
    3a54:	f340 80c2 	ble.w	3bdc <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x200>
      dims_pointer_ = new int32[dimensions_count];
    3a58:	4b6d      	ldr	r3, [pc, #436]	; (3c10 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x234>)
    3a5a:	429e      	cmp	r6, r3
    3a5c:	bf94      	ite	ls
    3a5e:	00b0      	lslls	r0, r6, #2
    3a60:	f04f 30ff 	movhi.w	r0, #4294967295
    3a64:	4b6b      	ldr	r3, [pc, #428]	; (3c14 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x238>)
    3a66:	4798      	blx	r3
    3a68:	903b      	str	r0, [sp, #236]	; 0xec
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    3a6a:	00b2      	lsls	r2, r6, #2
    3a6c:	f10a 0104 	add.w	r1, sl, #4
    3a70:	4b69      	ldr	r3, [pc, #420]	; (3c18 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x23c>)
    3a72:	4798      	blx	r3
  inline int32 DimensionsCount() const { return size_; }
    3a74:	9e3a      	ldr	r6, [sp, #232]	; 0xe8
    TFLITE_DCHECK_GE(i, 0);
    3a76:	1e73      	subs	r3, r6, #1
    3a78:	f100 80b2 	bmi.w	3be0 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x204>
    TFLITE_DCHECK_LT(i, size_);
    3a7c:	42b3      	cmp	r3, r6
    3a7e:	f280 80b1 	bge.w	3be4 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x208>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    3a82:	2e05      	cmp	r6, #5
    3a84:	f300 80b0 	bgt.w	3be8 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x20c>
    3a88:	aa5e      	add	r2, sp, #376	; 0x178
    3a8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3a8e:	f853 3c8c 	ldr.w	r3, [r3, #-140]
    3a92:	9309      	str	r3, [sp, #36]	; 0x24
  if (tensor == nullptr) {
    3a94:	2d00      	cmp	r5, #0
    3a96:	f000 80ae 	beq.w	3bf6 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x21a>
  TfLiteIntArray* dims = tensor->dims;
    3a9a:	68ab      	ldr	r3, [r5, #8]
    3a9c:	930a      	str	r3, [sp, #40]	; 0x28
  const int dims_size = dims->size;
    3a9e:	f8d3 a000 	ldr.w	sl, [r3]
    size_ = dimensions_count;
    3aa2:	f8cd a100 	str.w	sl, [sp, #256]	; 0x100
    if (dimensions_count > kMaxSmallSize) {
    3aa6:	f1ba 0f05 	cmp.w	sl, #5
    3aaa:	f340 80a2 	ble.w	3bf2 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x216>
      dims_pointer_ = new int32[dimensions_count];
    3aae:	4b58      	ldr	r3, [pc, #352]	; (3c10 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x234>)
    3ab0:	459a      	cmp	sl, r3
    3ab2:	bf94      	ite	ls
    3ab4:	ea4f 008a 	movls.w	r0, sl, lsl #2
    3ab8:	f04f 30ff 	movhi.w	r0, #4294967295
    3abc:	4b55      	ldr	r3, [pc, #340]	; (3c14 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x238>)
    3abe:	4798      	blx	r3
    3ac0:	9041      	str	r0, [sp, #260]	; 0x104
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    3ac2:	ea4f 028a 	mov.w	r2, sl, lsl #2
    3ac6:	990a      	ldr	r1, [sp, #40]	; 0x28
    3ac8:	3104      	adds	r1, #4
    3aca:	4b53      	ldr	r3, [pc, #332]	; (3c18 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x23c>)
    3acc:	4798      	blx	r3
    const int output_depth = output_shape.Dims(1);
    const RuntimeShape filter_shape = GetTensorShape(filter);
    const int filter_dim_count = filter_shape.DimensionsCount();
    const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
    const RuntimeShape input_shape = GetTensorShape(input);
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 2);
    3ace:	9b40      	ldr	r3, [sp, #256]	; 0x100
    3ad0:	2b02      	cmp	r3, #2
    3ad2:	f040 8090 	bne.w	3bf6 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x21a>
    TFLITE_DCHECK_EQ(batches, input_shape.Dims(0));
    3ad6:	9b41      	ldr	r3, [sp, #260]	; 0x104
    3ad8:	429f      	cmp	r7, r3
    3ada:	f040 808e 	bne.w	3bfa <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x21e>

    cmsis_nn_fc_params fc_params;
    fc_params.input_offset = -input->params.zero_point;
    3ade:	692b      	ldr	r3, [r5, #16]
    3ae0:	425b      	negs	r3, r3
    3ae2:	932f      	str	r3, [sp, #188]	; 0xbc
    fc_params.filter_offset = -filter->params.zero_point;
    3ae4:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
    3ae6:	691b      	ldr	r3, [r3, #16]
    3ae8:	425b      	negs	r3, r3
    3aea:	9330      	str	r3, [sp, #192]	; 0xc0
    fc_params.output_offset = output->params.zero_point;
    3aec:	f8db 3010 	ldr.w	r3, [fp, #16]
    3af0:	9331      	str	r3, [sp, #196]	; 0xc4
    fc_params.activation.min = data.output_activation_min;
    3af2:	68a3      	ldr	r3, [r4, #8]
    3af4:	9332      	str	r3, [sp, #200]	; 0xc8
    fc_params.activation.max = data.output_activation_max;
    3af6:	68e3      	ldr	r3, [r4, #12]
    3af8:	9333      	str	r3, [sp, #204]	; 0xcc

    cmsis_nn_per_tensor_quant_params quant_params;
    quant_params.multiplier = data.output_multiplier;
    3afa:	6823      	ldr	r3, [r4, #0]
    3afc:	931b      	str	r3, [sp, #108]	; 0x6c
    // TODO(b/138810107): Figure out whether output shift should be inverted
    quant_params.shift = -data.output_shift;
    3afe:	6863      	ldr	r3, [r4, #4]
    3b00:	425b      	negs	r3, r3
    3b02:	931c      	str	r3, [sp, #112]	; 0x70

    cmsis_nn_dims input_dims;
    input_dims.n = batches;
    3b04:	971f      	str	r7, [sp, #124]	; 0x7c
    input_dims.h = 1;
    3b06:	2301      	movs	r3, #1
    3b08:	9320      	str	r3, [sp, #128]	; 0x80
    input_dims.w = 1;
    3b0a:	9321      	str	r3, [sp, #132]	; 0x84
    input_dims.c = input_shape.Dims(1);
    3b0c:	9a42      	ldr	r2, [sp, #264]	; 0x108
    3b0e:	9222      	str	r2, [sp, #136]	; 0x88

    cmsis_nn_dims filter_dims;
    filter_dims.n = accum_depth;
    3b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3b12:	9223      	str	r2, [sp, #140]	; 0x8c
    filter_dims.h = 1;
    3b14:	9324      	str	r3, [sp, #144]	; 0x90
    filter_dims.w = 1;
    3b16:	9325      	str	r3, [sp, #148]	; 0x94
    filter_dims.c = output_depth;
    3b18:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98

    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
    3b1c:	9327      	str	r3, [sp, #156]	; 0x9c
    bias_dims.h = 1;
    3b1e:	9328      	str	r3, [sp, #160]	; 0xa0
    bias_dims.w = 1;
    3b20:	9329      	str	r3, [sp, #164]	; 0xa4
    bias_dims.c = output_depth;
    3b22:	f8cd 80a8 	str.w	r8, [sp, #168]	; 0xa8

    cmsis_nn_dims output_dims;
    output_dims.n = batches;
    3b26:	972b      	str	r7, [sp, #172]	; 0xac
    output_dims.h = 1;
    3b28:	932c      	str	r3, [sp, #176]	; 0xb0
    output_dims.w = 1;
    3b2a:	932d      	str	r3, [sp, #180]	; 0xb4
    output_dims.c = output_depth;
    3b2c:	f8cd 80b8 	str.w	r8, [sp, #184]	; 0xb8

    cmsis_nn_context ctx;
    ctx.buf = nullptr;
    3b30:	2300      	movs	r3, #0
    3b32:	931d      	str	r3, [sp, #116]	; 0x74
    ctx.size = 0;
    3b34:	931e      	str	r3, [sp, #120]	; 0x78

    if (data.buffer_idx > -1) {
    3b36:	6961      	ldr	r1, [r4, #20]
    3b38:	4299      	cmp	r1, r3
    3b3a:	db03      	blt.n	3b44 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x168>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
    3b3c:	9808      	ldr	r0, [sp, #32]
    3b3e:	6c43      	ldr	r3, [r0, #68]	; 0x44
    3b40:	4798      	blx	r3
    3b42:	901d      	str	r0, [sp, #116]	; 0x74
    }

    TF_LITE_ENSURE_EQ(
    3b44:	f8db 3004 	ldr.w	r3, [fp, #4]
    3b48:	9306      	str	r3, [sp, #24]
    3b4a:	ab2b      	add	r3, sp, #172	; 0xac
    3b4c:	9305      	str	r3, [sp, #20]
    3b4e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    3b52:	9304      	str	r3, [sp, #16]
    3b54:	ab27      	add	r3, sp, #156	; 0x9c
    3b56:	9303      	str	r3, [sp, #12]
    3b58:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
    3b5a:	685b      	ldr	r3, [r3, #4]
    3b5c:	9302      	str	r3, [sp, #8]
    3b5e:	ab23      	add	r3, sp, #140	; 0x8c
    3b60:	9301      	str	r3, [sp, #4]
    3b62:	686b      	ldr	r3, [r5, #4]
    3b64:	9300      	str	r3, [sp, #0]
    3b66:	ab1f      	add	r3, sp, #124	; 0x7c
    3b68:	aa1b      	add	r2, sp, #108	; 0x6c
    3b6a:	a92f      	add	r1, sp, #188	; 0xbc
    3b6c:	a81d      	add	r0, sp, #116	; 0x74
    3b6e:	4c2b      	ldr	r4, [pc, #172]	; (3c1c <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x240>)
    3b70:	47a0      	blx	r4
    3b72:	2800      	cmp	r0, #0
    3b74:	d043      	beq.n	3bfe <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x222>
    3b76:	9f08      	ldr	r7, [sp, #32]
    3b78:	697c      	ldr	r4, [r7, #20]
    3b7a:	f8db 3004 	ldr.w	r3, [fp, #4]
    3b7e:	9306      	str	r3, [sp, #24]
    3b80:	ab2b      	add	r3, sp, #172	; 0xac
    3b82:	9305      	str	r3, [sp, #20]
    3b84:	f8d9 3004 	ldr.w	r3, [r9, #4]
    3b88:	9304      	str	r3, [sp, #16]
    3b8a:	ab27      	add	r3, sp, #156	; 0x9c
    3b8c:	9303      	str	r3, [sp, #12]
    3b8e:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
    3b90:	685b      	ldr	r3, [r3, #4]
    3b92:	9302      	str	r3, [sp, #8]
    3b94:	ab23      	add	r3, sp, #140	; 0x8c
    3b96:	9301      	str	r3, [sp, #4]
    3b98:	686b      	ldr	r3, [r5, #4]
    3b9a:	9300      	str	r3, [sp, #0]
    3b9c:	ab1f      	add	r3, sp, #124	; 0x7c
    3b9e:	aa1b      	add	r2, sp, #108	; 0x6c
    3ba0:	a92f      	add	r1, sp, #188	; 0xbc
    3ba2:	a81d      	add	r0, sp, #116	; 0x74
    3ba4:	4d1d      	ldr	r5, [pc, #116]	; (3c1c <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x240>)
    3ba6:	47a8      	blx	r5
    3ba8:	2300      	movs	r3, #0
    3baa:	9303      	str	r3, [sp, #12]
    3bac:	9002      	str	r0, [sp, #8]
    3bae:	4b1c      	ldr	r3, [pc, #112]	; (3c20 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x244>)
    3bb0:	9301      	str	r3, [sp, #4]
    3bb2:	4b1c      	ldr	r3, [pc, #112]	; (3c24 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x248>)
    3bb4:	9300      	str	r3, [sp, #0]
    3bb6:	23c9      	movs	r3, #201	; 0xc9
    3bb8:	4a1b      	ldr	r2, [pc, #108]	; (3c28 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x24c>)
    3bba:	491c      	ldr	r1, [pc, #112]	; (3c2c <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x250>)
    3bbc:	4638      	mov	r0, r7
    3bbe:	47a0      	blx	r4
    if (size_ > kMaxSmallSize) {
    3bc0:	2e05      	cmp	r6, #5
    3bc2:	dd03      	ble.n	3bcc <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1f0>
      delete[] dims_pointer_;
    3bc4:	983b      	ldr	r0, [sp, #236]	; 0xec
    3bc6:	b108      	cbz	r0, 3bcc <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1f0>
    3bc8:	4b19      	ldr	r3, [pc, #100]	; (3c30 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x254>)
    3bca:	4798      	blx	r3
    3bcc:	2001      	movs	r0, #1
        GetTensorShape(filter), GetTensorData<int8_t>(filter),
        GetTensorShape(bias), GetTensorData<int32_t>(bias),
        GetTensorShape(output), GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
}
    3bce:	b05f      	add	sp, #380	; 0x17c
    3bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3bd4:	a835      	add	r0, sp, #212	; 0xd4
    3bd6:	e728      	b.n	3a2a <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4e>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    3bd8:	4b16      	ldr	r3, [pc, #88]	; (3c34 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x258>)
    3bda:	4798      	blx	r3
    3bdc:	a83b      	add	r0, sp, #236	; 0xec
    3bde:	e744      	b.n	3a6a <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x8e>
    TFLITE_DCHECK_GE(i, 0);
    3be0:	4b14      	ldr	r3, [pc, #80]	; (3c34 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x258>)
    3be2:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    3be4:	4b13      	ldr	r3, [pc, #76]	; (3c34 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x258>)
    3be6:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    3be8:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    3bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3bee:	9309      	str	r3, [sp, #36]	; 0x24
    3bf0:	e750      	b.n	3a94 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0xb8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3bf2:	a841      	add	r0, sp, #260	; 0x104
    3bf4:	e765      	b.n	3ac2 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0xe6>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 2);
    3bf6:	4b0f      	ldr	r3, [pc, #60]	; (3c34 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x258>)
    3bf8:	4798      	blx	r3
    TFLITE_DCHECK_EQ(batches, input_shape.Dims(0));
    3bfa:	4b0e      	ldr	r3, [pc, #56]	; (3c34 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x258>)
    3bfc:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    3bfe:	2e05      	cmp	r6, #5
    3c00:	dd03      	ble.n	3c0a <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x22e>
      delete[] dims_pointer_;
    3c02:	983b      	ldr	r0, [sp, #236]	; 0xec
    3c04:	b108      	cbz	r0, 3c0a <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x22e>
    3c06:	4b0a      	ldr	r3, [pc, #40]	; (3c30 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x254>)
    3c08:	4798      	blx	r3
  return kTfLiteOk;
    3c0a:	2000      	movs	r0, #0
    3c0c:	e7df      	b.n	3bce <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1f2>
    3c0e:	bf00      	nop
    3c10:	1ffffffe 	.word	0x1ffffffe
    3c14:	0000cd6d 	.word	0x0000cd6d
    3c18:	00018121 	.word	0x00018121
    3c1c:	0000a5fd 	.word	0x0000a5fd
    3c20:	0003bc8c 	.word	0x0003bc8c
    3c24:	0003bca0 	.word	0x0003bca0
    3c28:	0003bba0 	.word	0x0003bba0
    3c2c:	0003b724 	.word	0x0003b724
    3c30:	0000ccbd 	.word	0x0000ccbd
    3c34:	0001739d 	.word	0x0001739d
    op_params.input_offset = -input->params.zero_point;
    3c38:	692f      	ldr	r7, [r5, #16]
    op_params.weights_offset = -filter->params.zero_point;
    3c3a:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
    3c3c:	691e      	ldr	r6, [r3, #16]
    op_params.output_offset = output->params.zero_point;
    3c3e:	f8db 3010 	ldr.w	r3, [fp, #16]
    3c42:	930e      	str	r3, [sp, #56]	; 0x38
    op_params.output_multiplier = data.output_multiplier;
    3c44:	f8d4 a000 	ldr.w	sl, [r4]
    op_params.output_shift = -data.output_shift;
    3c48:	6863      	ldr	r3, [r4, #4]
    3c4a:	9308      	str	r3, [sp, #32]
    op_params.quantized_activation_min = data.output_activation_min;
    3c4c:	68a3      	ldr	r3, [r4, #8]
    3c4e:	930c      	str	r3, [sp, #48]	; 0x30
    op_params.quantized_activation_max = data.output_activation_max;
    3c50:	68e3      	ldr	r3, [r4, #12]
    3c52:	930d      	str	r3, [sp, #52]	; 0x34
  if (tensor == nullptr) {
    3c54:	2d00      	cmp	r5, #0
    3c56:	f000 80bd 	beq.w	3dd4 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x3f8>
  const int dims_size = dims->size;
    3c5a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    3c5e:	f858 4b04 	ldr.w	r4, [r8], #4
    size_ = dimensions_count;
    3c62:	9446      	str	r4, [sp, #280]	; 0x118
    if (dimensions_count > kMaxSmallSize) {
    3c64:	2c05      	cmp	r4, #5
    3c66:	f340 80b9 	ble.w	3ddc <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x400>
      dims_pointer_ = new int32[dimensions_count];
    3c6a:	4b9e      	ldr	r3, [pc, #632]	; (3ee4 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x508>)
    3c6c:	429c      	cmp	r4, r3
    3c6e:	bf94      	ite	ls
    3c70:	00a0      	lslls	r0, r4, #2
    3c72:	f04f 30ff 	movhi.w	r0, #4294967295
    3c76:	4b9c      	ldr	r3, [pc, #624]	; (3ee8 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x50c>)
    3c78:	4798      	blx	r3
    3c7a:	9047      	str	r0, [sp, #284]	; 0x11c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    3c7c:	00a2      	lsls	r2, r4, #2
    3c7e:	4641      	mov	r1, r8
    3c80:	4b9a      	ldr	r3, [pc, #616]	; (3eec <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x510>)
    3c82:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    3c84:	f8d5 8004 	ldr.w	r8, [r5, #4]
  if (tensor == nullptr) {
    3c88:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
    3c8a:	2b00      	cmp	r3, #0
    3c8c:	f000 80a8 	beq.w	3de0 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x404>
  const int dims_size = dims->size;
    3c90:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
    3c92:	689d      	ldr	r5, [r3, #8]
    3c94:	f855 4b04 	ldr.w	r4, [r5], #4
    size_ = dimensions_count;
    3c98:	944c      	str	r4, [sp, #304]	; 0x130
    if (dimensions_count > kMaxSmallSize) {
    3c9a:	2c05      	cmp	r4, #5
    3c9c:	f340 80a3 	ble.w	3de6 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x40a>
      dims_pointer_ = new int32[dimensions_count];
    3ca0:	4b90      	ldr	r3, [pc, #576]	; (3ee4 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x508>)
    3ca2:	429c      	cmp	r4, r3
    3ca4:	bf94      	ite	ls
    3ca6:	00a0      	lslls	r0, r4, #2
    3ca8:	f04f 30ff 	movhi.w	r0, #4294967295
    3cac:	4b8e      	ldr	r3, [pc, #568]	; (3ee8 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x50c>)
    3cae:	4798      	blx	r3
    3cb0:	904d      	str	r0, [sp, #308]	; 0x134
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    3cb2:	00a2      	lsls	r2, r4, #2
    3cb4:	4629      	mov	r1, r5
    3cb6:	4b8d      	ldr	r3, [pc, #564]	; (3eec <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x510>)
    3cb8:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    3cba:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
    3cbc:	685b      	ldr	r3, [r3, #4]
    3cbe:	9317      	str	r3, [sp, #92]	; 0x5c
  if (tensor == nullptr) {
    3cc0:	f1b9 0f00 	cmp.w	r9, #0
    3cc4:	f000 8091 	beq.w	3dea <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x40e>
  const int dims_size = dims->size;
    3cc8:	f8d9 5008 	ldr.w	r5, [r9, #8]
    3ccc:	f855 4b04 	ldr.w	r4, [r5], #4
    size_ = dimensions_count;
    3cd0:	9452      	str	r4, [sp, #328]	; 0x148
    if (dimensions_count > kMaxSmallSize) {
    3cd2:	2c05      	cmp	r4, #5
    3cd4:	f340 808d 	ble.w	3df2 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x416>
      dims_pointer_ = new int32[dimensions_count];
    3cd8:	4b82      	ldr	r3, [pc, #520]	; (3ee4 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x508>)
    3cda:	429c      	cmp	r4, r3
    3cdc:	bf94      	ite	ls
    3cde:	00a0      	lslls	r0, r4, #2
    3ce0:	f04f 30ff 	movhi.w	r0, #4294967295
    3ce4:	4b80      	ldr	r3, [pc, #512]	; (3ee8 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x50c>)
    3ce6:	4798      	blx	r3
    3ce8:	9053      	str	r0, [sp, #332]	; 0x14c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    3cea:	00a2      	lsls	r2, r4, #2
    3cec:	4629      	mov	r1, r5
    3cee:	4b7f      	ldr	r3, [pc, #508]	; (3eec <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x510>)
    3cf0:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    3cf2:	f8d9 3004 	ldr.w	r3, [r9, #4]
    3cf6:	930a      	str	r3, [sp, #40]	; 0x28
  if (tensor == nullptr) {
    3cf8:	f1bb 0f00 	cmp.w	fp, #0
    3cfc:	d07b      	beq.n	3df6 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x41a>
  const int dims_size = dims->size;
    3cfe:	f8db 5008 	ldr.w	r5, [fp, #8]
    3d02:	f855 4b04 	ldr.w	r4, [r5], #4
    size_ = dimensions_count;
    3d06:	9458      	str	r4, [sp, #352]	; 0x160
    if (dimensions_count > kMaxSmallSize) {
    3d08:	2c05      	cmp	r4, #5
    3d0a:	dd7b      	ble.n	3e04 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x428>
      dims_pointer_ = new int32[dimensions_count];
    3d0c:	4b75      	ldr	r3, [pc, #468]	; (3ee4 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x508>)
    3d0e:	429c      	cmp	r4, r3
    3d10:	bf94      	ite	ls
    3d12:	00a0      	lslls	r0, r4, #2
    3d14:	f04f 30ff 	movhi.w	r0, #4294967295
    3d18:	4b73      	ldr	r3, [pc, #460]	; (3ee8 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x50c>)
    3d1a:	4798      	blx	r3
    3d1c:	9059      	str	r0, [sp, #356]	; 0x164
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    3d1e:	00a2      	lsls	r2, r4, #2
    3d20:	4629      	mov	r1, r5
    3d22:	4b72      	ldr	r3, [pc, #456]	; (3eec <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x510>)
    3d24:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    3d26:	f8db 1004 	ldr.w	r1, [fp, #4]
  inline int32 DimensionsCount() const { return size_; }
    3d2a:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    3d2c:	9319      	str	r3, [sp, #100]	; 0x64
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    3d2e:	2b01      	cmp	r3, #1
    3d30:	dd66      	ble.n	3e00 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x424>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    3d32:	9b58      	ldr	r3, [sp, #352]	; 0x160
    3d34:	2b02      	cmp	r3, #2
    3d36:	d167      	bne.n	3e08 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x42c>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    3d38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3d3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3d3c:	4293      	cmp	r3, r2
    3d3e:	dc65      	bgt.n	3e0c <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x430>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    3d40:	9b59      	ldr	r3, [sp, #356]	; 0x164
    3d42:	9318      	str	r3, [sp, #96]	; 0x60
    3d44:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    3d46:	9316      	str	r3, [sp, #88]	; 0x58
    TFLITE_DCHECK_GE(i, 0);
    3d48:	9b19      	ldr	r3, [sp, #100]	; 0x64
    3d4a:	1e9a      	subs	r2, r3, #2
    3d4c:	d460      	bmi.n	3e10 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x434>
    TFLITE_DCHECK_LT(i, size_);
    3d4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    3d50:	4293      	cmp	r3, r2
    3d52:	dd5f      	ble.n	3e14 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x438>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    3d54:	9b19      	ldr	r3, [sp, #100]	; 0x64
    3d56:	2b05      	cmp	r3, #5
    3d58:	dc5e      	bgt.n	3e18 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x43c>
    3d5a:	ab5e      	add	r3, sp, #376	; 0x178
    3d5c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3d60:	f852 3c44 	ldr.w	r3, [r2, #-68]
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = output_shape.Dims(0);
  const int output_depth = output_shape.Dims(1);
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    3d64:	9a16      	ldr	r2, [sp, #88]	; 0x58
    3d66:	4293      	cmp	r3, r2
    3d68:	db5a      	blt.n	3e20 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x444>
    TFLITE_DCHECK_GE(i, 0);
    3d6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    3d6c:	1e5a      	subs	r2, r3, #1
    3d6e:	d459      	bmi.n	3e24 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x448>
    TFLITE_DCHECK_LT(i, size_);
    3d70:	9b19      	ldr	r3, [sp, #100]	; 0x64
    3d72:	4293      	cmp	r3, r2
    3d74:	dd58      	ble.n	3e28 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x44c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    3d76:	9b19      	ldr	r3, [sp, #100]	; 0x64
    3d78:	2b05      	cmp	r3, #5
    3d7a:	dc57      	bgt.n	3e2c <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x450>
    3d7c:	ab5e      	add	r3, sp, #376	; 0x178
    3d7e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3d82:	f852 3c44 	ldr.w	r3, [r2, #-68]
    3d86:	930b      	str	r3, [sp, #44]	; 0x2c
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
  for (int b = 0; b < batches; ++b) {
    3d88:	9b18      	ldr	r3, [sp, #96]	; 0x60
    3d8a:	2b00      	cmp	r3, #0
    3d8c:	f340 8083 	ble.w	3e96 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4ba>
    op_params.output_shift = -data.output_shift;
    3d90:	9a08      	ldr	r2, [sp, #32]
    3d92:	4253      	negs	r3, r2
    3d94:	2b00      	cmp	r3, #0
    3d96:	bfd4      	ite	le
    3d98:	4696      	movle	lr, r2
    3d9a:	f04f 0e00 	movgt.w	lr, #0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    3d9e:	2201      	movs	r2, #1
    3da0:	fa02 f20e 	lsl.w	r2, r2, lr
    3da4:	3a01      	subs	r2, #1
    3da6:	9210      	str	r2, [sp, #64]	; 0x40
  return a >> offset;
    3da8:	1052      	asrs	r2, r2, #1
    3daa:	9211      	str	r2, [sp, #68]	; 0x44
    3dac:	9a16      	ldr	r2, [sp, #88]	; 0x58
    3dae:	9214      	str	r2, [sp, #80]	; 0x50
    3db0:	eb01 0c02 	add.w	ip, r1, r2
    3db4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3db6:	9209      	str	r2, [sp, #36]	; 0x24
    3db8:	f8cd 8020 	str.w	r8, [sp, #32]
    3dbc:	2200      	movs	r2, #0
    3dbe:	9215      	str	r2, [sp, #84]	; 0x54
  int left_shift = shift > 0 ? shift : 0;
    3dc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3dc4:	930f      	str	r3, [sp, #60]	; 0x3c
  std::int64_t b_64(b);
    3dc6:	4653      	mov	r3, sl
    3dc8:	17dc      	asrs	r4, r3, #31
    3dca:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    3dce:	46e1      	mov	r9, ip
    3dd0:	46f4      	mov	ip, lr
    3dd2:	e053      	b.n	3e7c <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4a0>
  RuntimeShape() : size_(0) {}
    3dd4:	2300      	movs	r3, #0
    3dd6:	9346      	str	r3, [sp, #280]	; 0x118
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    3dd8:	4698      	mov	r8, r3
    3dda:	e755      	b.n	3c88 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x2ac>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3ddc:	a847      	add	r0, sp, #284	; 0x11c
    3dde:	e74d      	b.n	3c7c <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x2a0>
  RuntimeShape() : size_(0) {}
    3de0:	934c      	str	r3, [sp, #304]	; 0x130
    3de2:	9317      	str	r3, [sp, #92]	; 0x5c
    3de4:	e76c      	b.n	3cc0 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x2e4>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3de6:	a84d      	add	r0, sp, #308	; 0x134
    3de8:	e763      	b.n	3cb2 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x2d6>
  RuntimeShape() : size_(0) {}
    3dea:	2300      	movs	r3, #0
    3dec:	9352      	str	r3, [sp, #328]	; 0x148
    3dee:	930a      	str	r3, [sp, #40]	; 0x28
    3df0:	e782      	b.n	3cf8 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x31c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3df2:	a853      	add	r0, sp, #332	; 0x14c
    3df4:	e779      	b.n	3cea <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x30e>
  RuntimeShape() : size_(0) {}
    3df6:	2300      	movs	r3, #0
    3df8:	9358      	str	r3, [sp, #352]	; 0x160
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    3dfa:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    3dfc:	2b01      	cmp	r3, #1
    3dfe:	dc03      	bgt.n	3e08 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x42c>
    3e00:	4b3b      	ldr	r3, [pc, #236]	; (3ef0 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x514>)
    3e02:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3e04:	a859      	add	r0, sp, #356	; 0x164
    3e06:	e78a      	b.n	3d1e <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x342>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    3e08:	4b39      	ldr	r3, [pc, #228]	; (3ef0 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x514>)
    3e0a:	4798      	blx	r3
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    3e0c:	4b38      	ldr	r3, [pc, #224]	; (3ef0 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x514>)
    3e0e:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    3e10:	4b37      	ldr	r3, [pc, #220]	; (3ef0 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x514>)
    3e12:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    3e14:	4b36      	ldr	r3, [pc, #216]	; (3ef0 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x514>)
    3e16:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    3e18:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    3e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3e1e:	e7a1      	b.n	3d64 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x388>
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    3e20:	4b33      	ldr	r3, [pc, #204]	; (3ef0 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x514>)
    3e22:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    3e24:	4b32      	ldr	r3, [pc, #200]	; (3ef0 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x514>)
    3e26:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    3e28:	4b31      	ldr	r3, [pc, #196]	; (3ef0 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x514>)
    3e2a:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    3e2c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    3e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3e32:	930b      	str	r3, [sp, #44]	; 0x2c
    3e34:	e7a8      	b.n	3d88 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x3ac>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
      int32 acc = 0;
    3e36:	2200      	movs	r2, #0
    3e38:	e0a6      	b.n	3f88 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x5ac>
    3e3a:	f1ba 4f00 	cmp.w	sl, #2147483648	; 0x80000000
    3e3e:	f040 80ac 	bne.w	3f9a <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x5be>
    3e42:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    3e46:	e06c      	b.n	3f22 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x546>
  assert(exponent >= 0);
    3e48:	4b2a      	ldr	r3, [pc, #168]	; (3ef4 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x518>)
    3e4a:	4a2b      	ldr	r2, [pc, #172]	; (3ef8 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x51c>)
    3e4c:	f44f 71b3 	mov.w	r1, #358	; 0x166
    3e50:	482a      	ldr	r0, [pc, #168]	; (3efc <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x520>)
    3e52:	4c2b      	ldr	r4, [pc, #172]	; (3f00 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x524>)
    3e54:	47a0      	blx	r4
  assert(exponent <= 31);
    3e56:	4b2b      	ldr	r3, [pc, #172]	; (3f04 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x528>)
    3e58:	4a27      	ldr	r2, [pc, #156]	; (3ef8 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x51c>)
    3e5a:	f240 1167 	movw	r1, #359	; 0x167
    3e5e:	4827      	ldr	r0, [pc, #156]	; (3efc <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x520>)
    3e60:	4c27      	ldr	r4, [pc, #156]	; (3f00 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x524>)
    3e62:	47a0      	blx	r4
  for (int b = 0; b < batches; ++b) {
    3e64:	9b15      	ldr	r3, [sp, #84]	; 0x54
    3e66:	3301      	adds	r3, #1
    3e68:	9315      	str	r3, [sp, #84]	; 0x54
    3e6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    3e6c:	4491      	add	r9, r2
    3e6e:	9a08      	ldr	r2, [sp, #32]
    3e70:	9909      	ldr	r1, [sp, #36]	; 0x24
    3e72:	440a      	add	r2, r1
    3e74:	9208      	str	r2, [sp, #32]
    3e76:	9a18      	ldr	r2, [sp, #96]	; 0x60
    3e78:	4293      	cmp	r3, r2
    3e7a:	d00c      	beq.n	3e96 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4ba>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    3e7c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3e7e:	2b00      	cmp	r3, #0
    3e80:	ddf0      	ble.n	3e64 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x488>
    3e82:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3e84:	eba9 0e03 	sub.w	lr, r9, r3
    3e88:	980a      	ldr	r0, [sp, #40]	; 0x28
    3e8a:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    3e8e:	9b08      	ldr	r3, [sp, #32]
    3e90:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3e92:	1899      	adds	r1, r3, r2
    3e94:	e067      	b.n	3f66 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x58a>
    if (size_ > kMaxSmallSize) {
    3e96:	9b52      	ldr	r3, [sp, #328]	; 0x148
    3e98:	2b05      	cmp	r3, #5
    3e9a:	dd03      	ble.n	3ea4 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4c8>
      delete[] dims_pointer_;
    3e9c:	9853      	ldr	r0, [sp, #332]	; 0x14c
    3e9e:	b108      	cbz	r0, 3ea4 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4c8>
    3ea0:	4b19      	ldr	r3, [pc, #100]	; (3f08 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x52c>)
    3ea2:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    3ea4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    3ea6:	2b05      	cmp	r3, #5
    3ea8:	dd03      	ble.n	3eb2 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4d6>
      delete[] dims_pointer_;
    3eaa:	984d      	ldr	r0, [sp, #308]	; 0x134
    3eac:	b108      	cbz	r0, 3eb2 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4d6>
    3eae:	4b16      	ldr	r3, [pc, #88]	; (3f08 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x52c>)
    3eb0:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    3eb2:	9b46      	ldr	r3, [sp, #280]	; 0x118
    3eb4:	2b05      	cmp	r3, #5
    3eb6:	dd03      	ble.n	3ec0 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4e4>
      delete[] dims_pointer_;
    3eb8:	9847      	ldr	r0, [sp, #284]	; 0x11c
    3eba:	b108      	cbz	r0, 3ec0 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4e4>
    3ebc:	4b12      	ldr	r3, [pc, #72]	; (3f08 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x52c>)
    3ebe:	4798      	blx	r3
  return kTfLiteOk;
    3ec0:	2000      	movs	r0, #0
    3ec2:	e684      	b.n	3bce <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1f2>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    3ec4:	4c11      	ldr	r4, [pc, #68]	; (3f0c <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x530>)
    3ec6:	f04f 35ff 	mov.w	r5, #4294967295
    3eca:	18a4      	adds	r4, r4, r2
    3ecc:	415d      	adcs	r5, r3
    3ece:	4622      	mov	r2, r4
    3ed0:	462b      	mov	r3, r5
    3ed2:	2c00      	cmp	r4, #0
    3ed4:	f175 0b00 	sbcs.w	fp, r5, #0
    3ed8:	db1a      	blt.n	3f10 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x534>
    3eda:	0fe3      	lsrs	r3, r4, #31
    3edc:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    3ee0:	e01f      	b.n	3f22 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x546>
    3ee2:	bf00      	nop
    3ee4:	1ffffffe 	.word	0x1ffffffe
    3ee8:	0000cd6d 	.word	0x0000cd6d
    3eec:	00018121 	.word	0x00018121
    3ef0:	0001739d 	.word	0x0001739d
    3ef4:	0003b9f0 	.word	0x0003b9f0
    3ef8:	0003bb24 	.word	0x0003bb24
    3efc:	0003ba00 	.word	0x0003ba00
    3f00:	000173ad 	.word	0x000173ad
    3f04:	0003ba34 	.word	0x0003ba34
    3f08:	0000ccbd 	.word	0x0000ccbd
    3f0c:	c0000001 	.word	0xc0000001
    3f10:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    3f14:	2500      	movs	r5, #0
    3f16:	18a4      	adds	r4, r4, r2
    3f18:	415d      	adcs	r5, r3
    3f1a:	e7de      	b.n	3eda <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4fe>
    3f1c:	0fe3      	lsrs	r3, r4, #31
    3f1e:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
  assert(exponent >= 0);
    3f22:	f1bc 0f00 	cmp.w	ip, #0
    3f26:	db8f      	blt.n	3e48 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x46c>
  assert(exponent <= 31);
    3f28:	f1bc 0f1f 	cmp.w	ip, #31
    3f2c:	dc93      	bgt.n	3e56 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x47a>
  return a + b;
    3f2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3f30:	eb02 74d3 	add.w	r4, r2, r3, lsr #31
  return a & b;
    3f34:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3f36:	401a      	ands	r2, r3
  return a >> offset;
    3f38:	fa43 f30c 	asr.w	r3, r3, ip
  return a + b;
    3f3c:	4294      	cmp	r4, r2
    3f3e:	bfb8      	it	lt
    3f40:	3301      	addlt	r3, #1
      }
      if (bias_data) {
        acc += bias_data[out_c];
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
      acc += output_offset;
    3f42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3f44:	4413      	add	r3, r2
      acc = std::max(acc, output_activation_min);
      acc = std::min(acc, output_activation_max);
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
    3f46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3f48:	4293      	cmp	r3, r2
    3f4a:	bfb8      	it	lt
    3f4c:	4613      	movlt	r3, r2
    3f4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3f50:	4293      	cmp	r3, r2
    3f52:	bfa8      	it	ge
    3f54:	4613      	movge	r3, r2
    3f56:	f80e 3b01 	strb.w	r3, [lr], #1
    3f5a:	3004      	adds	r0, #4
    3f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3f5e:	4498      	add	r8, r3
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    3f60:	45f1      	cmp	r9, lr
    3f62:	f43f af7f 	beq.w	3e64 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x488>
      for (int d = 0; d < accum_depth; ++d) {
    3f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3f68:	2b00      	cmp	r3, #0
    3f6a:	f77f af64 	ble.w	3e36 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x45a>
    3f6e:	46c3      	mov	fp, r8
    3f70:	9d08      	ldr	r5, [sp, #32]
    3f72:	2200      	movs	r2, #0
        int32 input_val = input_data[b * accum_depth + d];
    3f74:	f915 4b01 	ldrsb.w	r4, [r5], #1
        int32 filter_val = filter_data[out_c * accum_depth + d];
    3f78:	f91b 3b01 	ldrsb.w	r3, [fp], #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
    3f7c:	1b9b      	subs	r3, r3, r6
    3f7e:	1be4      	subs	r4, r4, r7
    3f80:	fb04 2203 	mla	r2, r4, r3, r2
      for (int d = 0; d < accum_depth; ++d) {
    3f84:	428d      	cmp	r5, r1
    3f86:	d1f5      	bne.n	3f74 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x598>
      if (bias_data) {
    3f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3f8a:	b10b      	cbz	r3, 3f90 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x5b4>
        acc += bias_data[out_c];
    3f8c:	6803      	ldr	r3, [r0, #0]
    3f8e:	441a      	add	r2, r3
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    3f90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3f92:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    3f94:	4592      	cmp	sl, r2
    3f96:	f43f af50 	beq.w	3e3a <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x45e>
  std::int64_t a_64(a);
    3f9a:	17d5      	asrs	r5, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    3f9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3f9e:	fb02 f403 	mul.w	r4, r2, r3
    3fa2:	fb0a 4405 	mla	r4, sl, r5, r4
    3fa6:	fba2 230a 	umull	r2, r3, r2, sl
    3faa:	4423      	add	r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    3fac:	2a00      	cmp	r2, #0
    3fae:	f173 0400 	sbcs.w	r4, r3, #0
    3fb2:	db87      	blt.n	3ec4 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4e8>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    3fb4:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    3fb8:	f143 0300 	adc.w	r3, r3, #0
    3fbc:	4614      	mov	r4, r2
    3fbe:	461d      	mov	r5, r3
    3fc0:	2a00      	cmp	r2, #0
    3fc2:	f173 0b00 	sbcs.w	fp, r3, #0
    3fc6:	daa9      	bge.n	3f1c <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x540>
    3fc8:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    3fcc:	2500      	movs	r5, #0
    3fce:	18a4      	adds	r4, r4, r2
    3fd0:	415d      	adcs	r5, r3
    3fd2:	e7a3      	b.n	3f1c <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x540>

00003fd4 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>:
}

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
    3fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3fd8:	b0a9      	sub	sp, #164	; 0xa4
    3fda:	461c      	mov	r4, r3
    3fdc:	9d32      	ldr	r5, [sp, #200]	; 0xc8
    3fde:	9f33      	ldr	r7, [sp, #204]	; 0xcc
    3fe0:	9e34      	ldr	r6, [sp, #208]	; 0xd0
  if (activation == kTfLiteActRelu) {
    3fe2:	2a01      	cmp	r2, #1
    3fe4:	f000 80d5 	beq.w	4192 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1be>
  } else if (activation == kTfLiteActRelu6) {
    3fe8:	2a03      	cmp	r2, #3
    3fea:	f000 80d7 	beq.w	419c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1c8>
  } else if (activation == kTfLiteActReluN1To1) {
    3fee:	2a02      	cmp	r2, #2
    3ff0:	f000 80d9 	beq.w	41a6 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1d2>
    *activation_max = std::numeric_limits<T>::max();
    3ff4:	4b88      	ldr	r3, [pc, #544]	; (4218 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x244>)
    3ff6:	9305      	str	r3, [sp, #20]
    *activation_min = std::numeric_limits<T>::lowest();
    3ff8:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    3ffc:	9304      	str	r3, [sp, #16]
  if (tensor == nullptr) {
    3ffe:	2c00      	cmp	r4, #0
    4000:	f000 80d7 	beq.w	41b2 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1de>
  const int dims_size = dims->size;
    4004:	f8d4 9008 	ldr.w	r9, [r4, #8]
    4008:	f859 8b04 	ldr.w	r8, [r9], #4
    size_ = dimensions_count;
    400c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    if (dimensions_count > kMaxSmallSize) {
    4010:	f1b8 0f05 	cmp.w	r8, #5
    4014:	f340 80cf 	ble.w	41b6 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1e2>
      dims_pointer_ = new int32[dimensions_count];
    4018:	4b80      	ldr	r3, [pc, #512]	; (421c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x248>)
    401a:	4598      	cmp	r8, r3
    401c:	bf94      	ite	ls
    401e:	ea4f 0088 	movls.w	r0, r8, lsl #2
    4022:	f04f 30ff 	movhi.w	r0, #4294967295
    4026:	4b7e      	ldr	r3, [pc, #504]	; (4220 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x24c>)
    4028:	4798      	blx	r3
    402a:	9011      	str	r0, [sp, #68]	; 0x44
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    402c:	ea4f 0288 	mov.w	r2, r8, lsl #2
    4030:	4649      	mov	r1, r9
    4032:	4b7c      	ldr	r3, [pc, #496]	; (4224 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x250>)
    4034:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    4036:	6864      	ldr	r4, [r4, #4]
  if (tensor == nullptr) {
    4038:	2d00      	cmp	r5, #0
    403a:	f000 80be 	beq.w	41ba <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1e6>
  const int dims_size = dims->size;
    403e:	f8d5 9008 	ldr.w	r9, [r5, #8]
    4042:	f859 8b04 	ldr.w	r8, [r9], #4
    size_ = dimensions_count;
    4046:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
    if (dimensions_count > kMaxSmallSize) {
    404a:	f1b8 0f05 	cmp.w	r8, #5
    404e:	f340 80b8 	ble.w	41c2 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1ee>
      dims_pointer_ = new int32[dimensions_count];
    4052:	4b72      	ldr	r3, [pc, #456]	; (421c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x248>)
    4054:	4598      	cmp	r8, r3
    4056:	bf94      	ite	ls
    4058:	ea4f 0088 	movls.w	r0, r8, lsl #2
    405c:	f04f 30ff 	movhi.w	r0, #4294967295
    4060:	4b6f      	ldr	r3, [pc, #444]	; (4220 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x24c>)
    4062:	4798      	blx	r3
    4064:	9017      	str	r0, [sp, #92]	; 0x5c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4066:	ea4f 0288 	mov.w	r2, r8, lsl #2
    406a:	4649      	mov	r1, r9
    406c:	4b6d      	ldr	r3, [pc, #436]	; (4224 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x250>)
    406e:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    4070:	686b      	ldr	r3, [r5, #4]
    4072:	930c      	str	r3, [sp, #48]	; 0x30
  if (tensor == nullptr) {
    4074:	2f00      	cmp	r7, #0
    4076:	f000 80a6 	beq.w	41c6 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1f2>
  const int dims_size = dims->size;
    407a:	f8d7 8008 	ldr.w	r8, [r7, #8]
    407e:	f858 5b04 	ldr.w	r5, [r8], #4
    size_ = dimensions_count;
    4082:	951c      	str	r5, [sp, #112]	; 0x70
    if (dimensions_count > kMaxSmallSize) {
    4084:	2d05      	cmp	r5, #5
    4086:	f340 80a2 	ble.w	41ce <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1fa>
      dims_pointer_ = new int32[dimensions_count];
    408a:	4b64      	ldr	r3, [pc, #400]	; (421c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x248>)
    408c:	429d      	cmp	r5, r3
    408e:	bf94      	ite	ls
    4090:	00a8      	lslls	r0, r5, #2
    4092:	f04f 30ff 	movhi.w	r0, #4294967295
    4096:	4b62      	ldr	r3, [pc, #392]	; (4220 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x24c>)
    4098:	4798      	blx	r3
    409a:	901d      	str	r0, [sp, #116]	; 0x74
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    409c:	00aa      	lsls	r2, r5, #2
    409e:	4641      	mov	r1, r8
    40a0:	4b60      	ldr	r3, [pc, #384]	; (4224 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x250>)
    40a2:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    40a4:	687b      	ldr	r3, [r7, #4]
    40a6:	9303      	str	r3, [sp, #12]
  if (tensor == nullptr) {
    40a8:	2e00      	cmp	r6, #0
    40aa:	f000 8094 	beq.w	41d6 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x202>
  const int dims_size = dims->size;
    40ae:	68b7      	ldr	r7, [r6, #8]
    40b0:	f857 5b04 	ldr.w	r5, [r7], #4
    size_ = dimensions_count;
    40b4:	9522      	str	r5, [sp, #136]	; 0x88
    if (dimensions_count > kMaxSmallSize) {
    40b6:	2d05      	cmp	r5, #5
    40b8:	f340 808b 	ble.w	41d2 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1fe>
      dims_pointer_ = new int32[dimensions_count];
    40bc:	4b57      	ldr	r3, [pc, #348]	; (421c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x248>)
    40be:	429d      	cmp	r5, r3
    40c0:	bf94      	ite	ls
    40c2:	00a8      	lslls	r0, r5, #2
    40c4:	f04f 30ff 	movhi.w	r0, #4294967295
    40c8:	4b55      	ldr	r3, [pc, #340]	; (4220 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x24c>)
    40ca:	4798      	blx	r3
    40cc:	9023      	str	r0, [sp, #140]	; 0x8c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    40ce:	00aa      	lsls	r2, r5, #2
    40d0:	4639      	mov	r1, r7
    40d2:	4b54      	ldr	r3, [pc, #336]	; (4224 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x250>)
    40d4:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    40d6:	6875      	ldr	r5, [r6, #4]
  inline int32 DimensionsCount() const { return size_; }
    40d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    40da:	930f      	str	r3, [sp, #60]	; 0x3c
    40dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
    40de:	920e      	str	r2, [sp, #56]	; 0x38
// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
  const int dims_count = shape.DimensionsCount();
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    40e0:	1e59      	subs	r1, r3, #1
    40e2:	d478      	bmi.n	41d6 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x202>
    40e4:	428b      	cmp	r3, r1
    40e6:	dd76      	ble.n	41d6 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x202>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    40e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    40ea:	2b05      	cmp	r3, #5
    40ec:	bfcc      	ite	gt
    40ee:	9823      	ldrgt	r0, [sp, #140]	; 0x8c
    40f0:	a823      	addle	r0, sp, #140	; 0x8c
  const auto* dims_data = shape.DimsData();
  int flat_size = 1;
  for (int i = 0; i < dims_count; ++i) {
    40f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    40f4:	2a00      	cmp	r2, #0
    40f6:	dd70      	ble.n	41da <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x206>
    40f8:	2301      	movs	r3, #1
    40fa:	461f      	mov	r7, r3
    40fc:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    40fe:	463e      	mov	r6, r7
    4100:	4696      	mov	lr, r2
    4102:	4299      	cmp	r1, r3
    4104:	bf14      	ite	ne
    4106:	f850 2023 	ldrne.w	r2, [r0, r3, lsl #2]
    410a:	4632      	moveq	r2, r6
    410c:	fb02 f707 	mul.w	r7, r2, r7
  for (int i = 0; i < dims_count; ++i) {
    4110:	3301      	adds	r3, #1
    4112:	459e      	cmp	lr, r3
    4114:	d1f5      	bne.n	4102 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x12e>
    4116:	970b      	str	r7, [sp, #44]	; 0x2c
    TFLITE_DCHECK_GE(i, 0);
    4118:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    411a:	3b02      	subs	r3, #2
    411c:	d460      	bmi.n	41e0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x20c>
    TFLITE_DCHECK_LT(i, size_);
    411e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4120:	429a      	cmp	r2, r3
    4122:	dd5f      	ble.n	41e4 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x210>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    4124:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4126:	2a05      	cmp	r2, #5
    4128:	dc5e      	bgt.n	41e8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x214>
    412a:	aa28      	add	r2, sp, #160	; 0xa0
    412c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4130:	f853 3c44 	ldr.w	r3, [r3, #-68]
    4134:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4136:	2a05      	cmp	r2, #5
    4138:	dc5a      	bgt.n	41f0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x21c>
    413a:	aa28      	add	r2, sp, #160	; 0xa0
    413c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4140:	f851 2c14 	ldr.w	r2, [r1, #-20]
    4144:	920a      	str	r2, [sp, #40]	; 0x28
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    4146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4148:	429a      	cmp	r2, r3
    414a:	d156      	bne.n	41fa <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x226>
    TFLITE_DCHECK_GE(i, 0);
    414c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    414e:	3b01      	subs	r3, #1
    4150:	d455      	bmi.n	41fe <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x22a>
    TFLITE_DCHECK_LT(i, size_);
    4152:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4154:	429a      	cmp	r2, r3
    4156:	dd54      	ble.n	4202 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x22e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    4158:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    415a:	2a05      	cmp	r2, #5
    415c:	dc53      	bgt.n	4206 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x232>
    415e:	aa28      	add	r2, sp, #160	; 0xa0
    4160:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4164:	f853 3c44 	ldr.w	r3, [r3, #-68]
    4168:	9306      	str	r3, [sp, #24]
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
  for (int b = 0; b < batches; ++b) {
    416a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    416c:	2b00      	cmp	r3, #0
    416e:	f340 80b4 	ble.w	42da <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x306>
    4172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4174:	009b      	lsls	r3, r3, #2
    4176:	930d      	str	r3, [sp, #52]	; 0x34
    4178:	9508      	str	r5, [sp, #32]
    417a:	9a06      	ldr	r2, [sp, #24]
    417c:	0092      	lsls	r2, r2, #2
    417e:	9201      	str	r2, [sp, #4]
    4180:	9402      	str	r4, [sp, #8]
    4182:	9a03      	ldr	r2, [sp, #12]
    4184:	18d3      	adds	r3, r2, r3
    4186:	9307      	str	r3, [sp, #28]
    4188:	2300      	movs	r3, #0
    418a:	9309      	str	r3, [sp, #36]	; 0x24
    for (int out_c = 0; out_c < output_depth; ++out_c) {
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
    418c:	4d26      	ldr	r5, [pc, #152]	; (4228 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x254>)
    418e:	4f27      	ldr	r7, [pc, #156]	; (422c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x258>)
    4190:	e095      	b.n	42be <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2ea>
    *activation_max = std::numeric_limits<T>::max();
    4192:	4b21      	ldr	r3, [pc, #132]	; (4218 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x244>)
    4194:	9305      	str	r3, [sp, #20]
    *activation_min = 0;
    4196:	2300      	movs	r3, #0
    4198:	9304      	str	r3, [sp, #16]
    419a:	e730      	b.n	3ffe <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2a>
    *activation_max = 6;
    419c:	4b24      	ldr	r3, [pc, #144]	; (4230 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x25c>)
    419e:	9305      	str	r3, [sp, #20]
    *activation_min = 0;
    41a0:	2300      	movs	r3, #0
    41a2:	9304      	str	r3, [sp, #16]
    41a4:	e72b      	b.n	3ffe <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2a>
    *activation_max = 1;
    41a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    41aa:	9305      	str	r3, [sp, #20]
    *activation_min = -1;
    41ac:	4b21      	ldr	r3, [pc, #132]	; (4234 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x260>)
    41ae:	9304      	str	r3, [sp, #16]
    41b0:	e725      	b.n	3ffe <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2a>
  RuntimeShape() : size_(0) {}
    41b2:	9410      	str	r4, [sp, #64]	; 0x40
    41b4:	e740      	b.n	4038 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x64>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    41b6:	a811      	add	r0, sp, #68	; 0x44
    41b8:	e738      	b.n	402c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x58>
  RuntimeShape() : size_(0) {}
    41ba:	2300      	movs	r3, #0
    41bc:	9316      	str	r3, [sp, #88]	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    41be:	930c      	str	r3, [sp, #48]	; 0x30
    41c0:	e758      	b.n	4074 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xa0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    41c2:	a817      	add	r0, sp, #92	; 0x5c
    41c4:	e74f      	b.n	4066 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x92>
  RuntimeShape() : size_(0) {}
    41c6:	2300      	movs	r3, #0
    41c8:	931c      	str	r3, [sp, #112]	; 0x70
    41ca:	9303      	str	r3, [sp, #12]
    41cc:	e76c      	b.n	40a8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xd4>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    41ce:	a81d      	add	r0, sp, #116	; 0x74
    41d0:	e764      	b.n	409c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xc8>
    41d2:	a823      	add	r0, sp, #140	; 0x8c
    41d4:	e77b      	b.n	40ce <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xfa>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    41d6:	4b18      	ldr	r3, [pc, #96]	; (4238 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x264>)
    41d8:	4798      	blx	r3
  int flat_size = 1;
    41da:	2301      	movs	r3, #1
    41dc:	930b      	str	r3, [sp, #44]	; 0x2c
    41de:	e79b      	b.n	4118 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x144>
    TFLITE_DCHECK_GE(i, 0);
    41e0:	4b15      	ldr	r3, [pc, #84]	; (4238 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x264>)
    41e2:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    41e4:	4b14      	ldr	r3, [pc, #80]	; (4238 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x264>)
    41e6:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    41e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    41ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    41ee:	e7a1      	b.n	4134 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x160>
    41f0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    41f2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    41f6:	920a      	str	r2, [sp, #40]	; 0x28
    41f8:	e7a5      	b.n	4146 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x172>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    41fa:	4b0f      	ldr	r3, [pc, #60]	; (4238 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x264>)
    41fc:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    41fe:	4b0e      	ldr	r3, [pc, #56]	; (4238 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x264>)
    4200:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    4202:	4b0d      	ldr	r3, [pc, #52]	; (4238 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x264>)
    4204:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    4206:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    4208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    420c:	9306      	str	r3, [sp, #24]
    420e:	e7ac      	b.n	416a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x196>
      for (int d = 0; d < accum_depth; ++d) {
    4210:	2600      	movs	r6, #0
    4212:	e02f      	b.n	4274 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2a0>
                 weights_data[out_c * accum_depth + d];
      }
      float bias_value = 0.0f;
    4214:	2100      	movs	r1, #0
    4216:	e032      	b.n	427e <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2aa>
    4218:	7f7fffff 	.word	0x7f7fffff
    421c:	1ffffffe 	.word	0x1ffffffe
    4220:	0000cd6d 	.word	0x0000cd6d
    4224:	00018121 	.word	0x00018121
    4228:	00015d41 	.word	0x00015d41
    422c:	00015b31 	.word	0x00015b31
    4230:	40c00000 	.word	0x40c00000
    4234:	bf800000 	.word	0xbf800000
    4238:	0001739d 	.word	0x0001739d
      if (bias_data) {
        bias_value = bias_data[out_c];
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    423c:	9b00      	ldr	r3, [sp, #0]
    423e:	f843 4b04 	str.w	r4, [r3], #4
    4242:	9300      	str	r3, [sp, #0]
    4244:	f10a 0a04 	add.w	sl, sl, #4
    4248:	9b01      	ldr	r3, [sp, #4]
    424a:	449b      	add	fp, r3
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    424c:	9b07      	ldr	r3, [sp, #28]
    424e:	4553      	cmp	r3, sl
    4250:	d027      	beq.n	42a2 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2ce>
      for (int d = 0; d < accum_depth; ++d) {
    4252:	9b06      	ldr	r3, [sp, #24]
    4254:	2b00      	cmp	r3, #0
    4256:	dddb      	ble.n	4210 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x23c>
    4258:	46d8      	mov	r8, fp
    425a:	9c02      	ldr	r4, [sp, #8]
    425c:	2600      	movs	r6, #0
        total += input_data[b * accum_depth + d] *
    425e:	f858 1b04 	ldr.w	r1, [r8], #4
    4262:	f854 0b04 	ldr.w	r0, [r4], #4
    4266:	47a8      	blx	r5
    4268:	4601      	mov	r1, r0
    426a:	4630      	mov	r0, r6
    426c:	47b8      	blx	r7
    426e:	4606      	mov	r6, r0
      for (int d = 0; d < accum_depth; ++d) {
    4270:	454c      	cmp	r4, r9
    4272:	d1f4      	bne.n	425e <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x28a>
      if (bias_data) {
    4274:	9b03      	ldr	r3, [sp, #12]
    4276:	2b00      	cmp	r3, #0
    4278:	d0cc      	beq.n	4214 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x240>
        bias_value = bias_data[out_c];
    427a:	f8da 1000 	ldr.w	r1, [sl]
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    427e:	4630      	mov	r0, r6
    4280:	47b8      	blx	r7
    4282:	4604      	mov	r4, r0
      if (__a < __b)
    4284:	9e04      	ldr	r6, [sp, #16]
    4286:	4631      	mov	r1, r6
    4288:	4b24      	ldr	r3, [pc, #144]	; (431c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x348>)
    428a:	4798      	blx	r3
    428c:	b100      	cbz	r0, 4290 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2bc>
	return __b;
    428e:	4634      	mov	r4, r6
      if (__b < __a)
    4290:	9e05      	ldr	r6, [sp, #20]
    4292:	4631      	mov	r1, r6
    4294:	4620      	mov	r0, r4
    4296:	4b22      	ldr	r3, [pc, #136]	; (4320 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x34c>)
    4298:	4798      	blx	r3
    429a:	2800      	cmp	r0, #0
    429c:	d0ce      	beq.n	423c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x268>
	return __b;
    429e:	4634      	mov	r4, r6
    42a0:	e7cc      	b.n	423c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x268>
  for (int b = 0; b < batches; ++b) {
    42a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    42a4:	3301      	adds	r3, #1
    42a6:	9309      	str	r3, [sp, #36]	; 0x24
    42a8:	9a08      	ldr	r2, [sp, #32]
    42aa:	990d      	ldr	r1, [sp, #52]	; 0x34
    42ac:	440a      	add	r2, r1
    42ae:	9208      	str	r2, [sp, #32]
    42b0:	9a02      	ldr	r2, [sp, #8]
    42b2:	9901      	ldr	r1, [sp, #4]
    42b4:	440a      	add	r2, r1
    42b6:	9202      	str	r2, [sp, #8]
    42b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    42ba:	4293      	cmp	r3, r2
    42bc:	d00d      	beq.n	42da <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x306>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    42be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    42c0:	2b00      	cmp	r3, #0
    42c2:	ddee      	ble.n	42a2 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2ce>
    42c4:	f8dd a00c 	ldr.w	sl, [sp, #12]
    42c8:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    42cc:	9b02      	ldr	r3, [sp, #8]
    42ce:	9a01      	ldr	r2, [sp, #4]
    42d0:	eb03 0902 	add.w	r9, r3, r2
    42d4:	9b08      	ldr	r3, [sp, #32]
    42d6:	9300      	str	r3, [sp, #0]
    42d8:	e7bb      	b.n	4252 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x27e>
    if (size_ > kMaxSmallSize) {
    42da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    42dc:	2b05      	cmp	r3, #5
    42de:	dd03      	ble.n	42e8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x314>
      delete[] dims_pointer_;
    42e0:	9823      	ldr	r0, [sp, #140]	; 0x8c
    42e2:	b108      	cbz	r0, 42e8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x314>
    42e4:	4b0f      	ldr	r3, [pc, #60]	; (4324 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x350>)
    42e6:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    42e8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    42ea:	2b05      	cmp	r3, #5
    42ec:	dd03      	ble.n	42f6 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x322>
      delete[] dims_pointer_;
    42ee:	981d      	ldr	r0, [sp, #116]	; 0x74
    42f0:	b108      	cbz	r0, 42f6 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x322>
    42f2:	4b0c      	ldr	r3, [pc, #48]	; (4324 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x350>)
    42f4:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    42f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    42f8:	2b05      	cmp	r3, #5
    42fa:	dd03      	ble.n	4304 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x330>
      delete[] dims_pointer_;
    42fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
    42fe:	b108      	cbz	r0, 4304 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x330>
    4300:	4b08      	ldr	r3, [pc, #32]	; (4324 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x350>)
    4302:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    4304:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4306:	2b05      	cmp	r3, #5
    4308:	dd03      	ble.n	4312 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x33e>
      delete[] dims_pointer_;
    430a:	9811      	ldr	r0, [sp, #68]	; 0x44
    430c:	b108      	cbz	r0, 4312 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x33e>
    430e:	4b05      	ldr	r3, [pc, #20]	; (4324 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x350>)
    4310:	4798      	blx	r3
      op_params, GetTensorShape(input), GetTensorData<float>(input),
      GetTensorShape(filter), GetTensorData<float>(filter),
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
      GetTensorData<float>(output));
  return kTfLiteOk;
}
    4312:	2000      	movs	r0, #0
    4314:	b029      	add	sp, #164	; 0xa4
    4316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    431a:	bf00      	nop
    431c:	0001607d 	.word	0x0001607d
    4320:	000160b9 	.word	0x000160b9
    4324:	0000ccbd 	.word	0x0000ccbd

00004328 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    4328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    432c:	b0cb      	sub	sp, #300	; 0x12c
  TFLITE_DCHECK(node->builtin_data != nullptr);
    432e:	f8d1 e014 	ldr.w	lr, [r1, #20]
    4332:	f1be 0f00 	cmp.w	lr, #0
    4336:	d014      	beq.n	4362 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3a>
    4338:	4607      	mov	r7, r0
  return &context->tensors[node->inputs->data[index]];
    433a:	6884      	ldr	r4, [r0, #8]
    433c:	680b      	ldr	r3, [r1, #0]
    433e:	685a      	ldr	r2, [r3, #4]
    4340:	ea4f 1a82 	mov.w	sl, r2, lsl #6
    4344:	eb04 080a 	add.w	r8, r4, sl
    4348:	689e      	ldr	r6, [r3, #8]
    434a:	eb04 1686 	add.w	r6, r4, r6, lsl #6
  const bool use_tensor = index < node->inputs->size &&
    434e:	681a      	ldr	r2, [r3, #0]
    4350:	2a02      	cmp	r2, #2
    4352:	dd0b      	ble.n	436c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x44>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    4354:	68db      	ldr	r3, [r3, #12]
  const bool use_tensor = index < node->inputs->size &&
    4356:	f1b3 3fff 	cmp.w	r3, #4294967295
    435a:	d004      	beq.n	4366 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3e>
    return &context->tensors[node->inputs->data[index]];
    435c:	eb04 1b83 	add.w	fp, r4, r3, lsl #6
    4360:	e006      	b.n	4370 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x48>
    4362:	4baf      	ldr	r3, [pc, #700]	; (4620 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2f8>)
    4364:	4798      	blx	r3
  return nullptr;
    4366:	f04f 0b00 	mov.w	fp, #0
    436a:	e001      	b.n	4370 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x48>
    436c:	f04f 0b00 	mov.w	fp, #0
  return &context->tensors[node->outputs->data[index]];
    4370:	684b      	ldr	r3, [r1, #4]
    4372:	685d      	ldr	r5, [r3, #4]
    4374:	01ab      	lsls	r3, r5, #6
    4376:	9306      	str	r3, [sp, #24]
    4378:	eb04 0903 	add.w	r9, r4, r3
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
    437c:	690a      	ldr	r2, [r1, #16]
    437e:	b192      	cbz	r2, 43a6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x7e>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
    4380:	f814 000a 	ldrb.w	r0, [r4, sl]
    4384:	2803      	cmp	r0, #3
    4386:	d028      	beq.n	43da <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb2>
    4388:	2809      	cmp	r0, #9
    438a:	d01c      	beq.n	43c6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x9e>
    438c:	2801      	cmp	r0, #1
    438e:	d00c      	beq.n	43aa <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x82>

    case kTfLiteUInt8:
      return EvalQuantized(context, node, data, input, filter, bias, output);

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    4390:	697d      	ldr	r5, [r7, #20]
    4392:	4ba4      	ldr	r3, [pc, #656]	; (4624 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2fc>)
    4394:	4798      	blx	r3
    4396:	f814 300a 	ldrb.w	r3, [r4, sl]
    439a:	4602      	mov	r2, r0
    439c:	49a2      	ldr	r1, [pc, #648]	; (4628 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x300>)
    439e:	4638      	mov	r0, r7
    43a0:	47a8      	blx	r5
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    43a2:	2001      	movs	r0, #1
    43a4:	e00c      	b.n	43c0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x98>
  TFLITE_DCHECK(node->user_data != nullptr);
    43a6:	4b9e      	ldr	r3, [pc, #632]	; (4620 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2f8>)
    43a8:	4798      	blx	r3
                       output);
    43aa:	f89e 2000 	ldrb.w	r2, [lr]
    43ae:	f8cd 9008 	str.w	r9, [sp, #8]
    43b2:	f8cd b004 	str.w	fp, [sp, #4]
    43b6:	9600      	str	r6, [sp, #0]
    43b8:	4643      	mov	r3, r8
    43ba:	4638      	mov	r0, r7
    43bc:	4c9b      	ldr	r4, [pc, #620]	; (462c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x304>)
    43be:	47a0      	blx	r4
  }
  return kTfLiteOk;
}
    43c0:	b04b      	add	sp, #300	; 0x12c
    43c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                               output);
    43c6:	f8cd 9008 	str.w	r9, [sp, #8]
    43ca:	f8cd b004 	str.w	fp, [sp, #4]
    43ce:	9600      	str	r6, [sp, #0]
    43d0:	4643      	mov	r3, r8
    43d2:	4638      	mov	r0, r7
    43d4:	4c96      	ldr	r4, [pc, #600]	; (4630 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x308>)
    43d6:	47a0      	blx	r4
    43d8:	e7f2      	b.n	43c0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x98>
  const int32_t input_offset = -input->params.zero_point;
    43da:	f8d8 5010 	ldr.w	r5, [r8, #16]
  const int32_t filter_offset = -filter->params.zero_point;
    43de:	f8d6 a010 	ldr.w	sl, [r6, #16]
  const int32_t output_offset = output->params.zero_point;
    43e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
    43e6:	9309      	str	r3, [sp, #36]	; 0x24
  op_params.output_multiplier = data.output_multiplier;
    43e8:	6813      	ldr	r3, [r2, #0]
    43ea:	9307      	str	r3, [sp, #28]
  op_params.output_shift = -data.output_shift;
    43ec:	6853      	ldr	r3, [r2, #4]
    43ee:	930b      	str	r3, [sp, #44]	; 0x2c
    43f0:	425b      	negs	r3, r3
    43f2:	930c      	str	r3, [sp, #48]	; 0x30
  op_params.quantized_activation_min = data.output_activation_min;
    43f4:	6893      	ldr	r3, [r2, #8]
    43f6:	9304      	str	r3, [sp, #16]
  op_params.quantized_activation_max = data.output_activation_max;
    43f8:	68d3      	ldr	r3, [r2, #12]
    43fa:	9305      	str	r3, [sp, #20]
  switch (output->type) {
    43fc:	9b06      	ldr	r3, [sp, #24]
    43fe:	5ce0      	ldrb	r0, [r4, r3]
    4400:	2803      	cmp	r0, #3
    4402:	d00d      	beq.n	4420 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xf8>
    4404:	2807      	cmp	r0, #7
    4406:	f000 8197 	beq.w	4738 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x410>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    440a:	697e      	ldr	r6, [r7, #20]
    440c:	4b85      	ldr	r3, [pc, #532]	; (4624 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2fc>)
    440e:	4798      	blx	r3
    4410:	9b06      	ldr	r3, [sp, #24]
    4412:	5ce3      	ldrb	r3, [r4, r3]
    4414:	4602      	mov	r2, r0
    4416:	4984      	ldr	r1, [pc, #528]	; (4628 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x300>)
    4418:	4638      	mov	r0, r7
    441a:	47b0      	blx	r6
      return kTfLiteError;
    441c:	2001      	movs	r0, #1
      return EvalQuantized(context, node, data, input, filter, bias, output);
    441e:	e7cf      	b.n	43c0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x98>
  if (tensor == nullptr) {
    4420:	f1b8 0f00 	cmp.w	r8, #0
    4424:	f000 80e4 	beq.w	45f0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2c8>
  const int dims_size = dims->size;
    4428:	f8d8 7008 	ldr.w	r7, [r8, #8]
    442c:	f857 4b04 	ldr.w	r4, [r7], #4
    size_ = dimensions_count;
    4430:	9444      	str	r4, [sp, #272]	; 0x110
    if (dimensions_count > kMaxSmallSize) {
    4432:	2c05      	cmp	r4, #5
    4434:	f340 80df 	ble.w	45f6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ce>
      dims_pointer_ = new int32[dimensions_count];
    4438:	4b7e      	ldr	r3, [pc, #504]	; (4634 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x30c>)
    443a:	429c      	cmp	r4, r3
    443c:	bf94      	ite	ls
    443e:	00a0      	lslls	r0, r4, #2
    4440:	f04f 30ff 	movhi.w	r0, #4294967295
    4444:	4b7c      	ldr	r3, [pc, #496]	; (4638 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x310>)
    4446:	4798      	blx	r3
    4448:	9045      	str	r0, [sp, #276]	; 0x114
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    444a:	00a2      	lsls	r2, r4, #2
    444c:	4639      	mov	r1, r7
    444e:	4b7b      	ldr	r3, [pc, #492]	; (463c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x314>)
    4450:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    4452:	f8d8 7004 	ldr.w	r7, [r8, #4]
  if (tensor == nullptr) {
    4456:	2e00      	cmp	r6, #0
    4458:	f000 80cf 	beq.w	45fa <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2d2>
  const int dims_size = dims->size;
    445c:	f8d6 8008 	ldr.w	r8, [r6, #8]
    4460:	f858 4b04 	ldr.w	r4, [r8], #4
    size_ = dimensions_count;
    4464:	943e      	str	r4, [sp, #248]	; 0xf8
    if (dimensions_count > kMaxSmallSize) {
    4466:	2c05      	cmp	r4, #5
    4468:	f340 80cb 	ble.w	4602 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2da>
      dims_pointer_ = new int32[dimensions_count];
    446c:	4b71      	ldr	r3, [pc, #452]	; (4634 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x30c>)
    446e:	429c      	cmp	r4, r3
    4470:	bf94      	ite	ls
    4472:	00a0      	lslls	r0, r4, #2
    4474:	f04f 30ff 	movhi.w	r0, #4294967295
    4478:	4b6f      	ldr	r3, [pc, #444]	; (4638 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x310>)
    447a:	4798      	blx	r3
    447c:	903f      	str	r0, [sp, #252]	; 0xfc
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    447e:	00a2      	lsls	r2, r4, #2
    4480:	4641      	mov	r1, r8
    4482:	4b6e      	ldr	r3, [pc, #440]	; (463c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x314>)
    4484:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    4486:	6873      	ldr	r3, [r6, #4]
    4488:	9315      	str	r3, [sp, #84]	; 0x54
  if (tensor == nullptr) {
    448a:	f1bb 0f00 	cmp.w	fp, #0
    448e:	f000 80ba 	beq.w	4606 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2de>
  const int dims_size = dims->size;
    4492:	f8db 6008 	ldr.w	r6, [fp, #8]
    4496:	f856 4b04 	ldr.w	r4, [r6], #4
    size_ = dimensions_count;
    449a:	9438      	str	r4, [sp, #224]	; 0xe0
    if (dimensions_count > kMaxSmallSize) {
    449c:	2c05      	cmp	r4, #5
    449e:	f340 80b6 	ble.w	460e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2e6>
      dims_pointer_ = new int32[dimensions_count];
    44a2:	4b64      	ldr	r3, [pc, #400]	; (4634 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x30c>)
    44a4:	429c      	cmp	r4, r3
    44a6:	bf94      	ite	ls
    44a8:	00a0      	lslls	r0, r4, #2
    44aa:	f04f 30ff 	movhi.w	r0, #4294967295
    44ae:	4b62      	ldr	r3, [pc, #392]	; (4638 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x310>)
    44b0:	4798      	blx	r3
    44b2:	9039      	str	r0, [sp, #228]	; 0xe4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    44b4:	00a2      	lsls	r2, r4, #2
    44b6:	4631      	mov	r1, r6
    44b8:	4b60      	ldr	r3, [pc, #384]	; (463c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x314>)
    44ba:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    44bc:	f8db 3004 	ldr.w	r3, [fp, #4]
    44c0:	9308      	str	r3, [sp, #32]
  if (tensor == nullptr) {
    44c2:	f1b9 0f00 	cmp.w	r9, #0
    44c6:	f000 80a4 	beq.w	4612 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ea>
  const int dims_size = dims->size;
    44ca:	f8d9 6008 	ldr.w	r6, [r9, #8]
    44ce:	f856 4b04 	ldr.w	r4, [r6], #4
    size_ = dimensions_count;
    44d2:	9432      	str	r4, [sp, #200]	; 0xc8
    if (dimensions_count > kMaxSmallSize) {
    44d4:	2c05      	cmp	r4, #5
    44d6:	f340 80b3 	ble.w	4640 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x318>
      dims_pointer_ = new int32[dimensions_count];
    44da:	4b56      	ldr	r3, [pc, #344]	; (4634 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x30c>)
    44dc:	429c      	cmp	r4, r3
    44de:	bf94      	ite	ls
    44e0:	00a0      	lslls	r0, r4, #2
    44e2:	f04f 30ff 	movhi.w	r0, #4294967295
    44e6:	4b54      	ldr	r3, [pc, #336]	; (4638 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x310>)
    44e8:	4798      	blx	r3
    44ea:	9033      	str	r0, [sp, #204]	; 0xcc
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    44ec:	00a2      	lsls	r2, r4, #2
    44ee:	4631      	mov	r1, r6
    44f0:	4b52      	ldr	r3, [pc, #328]	; (463c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x314>)
    44f2:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    44f4:	f8d9 6004 	ldr.w	r6, [r9, #4]
  inline int32 DimensionsCount() const { return size_; }
    44f8:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    44fa:	9316      	str	r3, [sp, #88]	; 0x58
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    44fc:	2b01      	cmp	r3, #1
    44fe:	f340 808d 	ble.w	461c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2f4>
    4502:	9932      	ldr	r1, [sp, #200]	; 0xc8
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
    4504:	2900      	cmp	r1, #0
    4506:	f340 809d 	ble.w	4644 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x31c>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    450a:	9b04      	ldr	r3, [sp, #16]
    450c:	9a05      	ldr	r2, [sp, #20]
    450e:	4293      	cmp	r3, r2
    4510:	f300 809a 	bgt.w	4648 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x320>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    4514:	1e4a      	subs	r2, r1, #1
    4516:	f100 8099 	bmi.w	464c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x324>
    451a:	4291      	cmp	r1, r2
    451c:	f340 8096 	ble.w	464c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x324>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4520:	2905      	cmp	r1, #5
    4522:	bfcc      	ite	gt
    4524:	9833      	ldrgt	r0, [sp, #204]	; 0xcc
    4526:	a833      	addle	r0, sp, #204	; 0xcc
    4528:	2301      	movs	r3, #1
    452a:	9314      	str	r3, [sp, #80]	; 0x50
    452c:	2400      	movs	r4, #0
    452e:	4623      	mov	r3, r4
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    4530:	2401      	movs	r4, #1
    4532:	4694      	mov	ip, r2
    4534:	46a6      	mov	lr, r4
    4536:	4563      	cmp	r3, ip
    4538:	bf14      	ite	ne
    453a:	f850 2023 	ldrne.w	r2, [r0, r3, lsl #2]
    453e:	4622      	moveq	r2, r4
    4540:	fb02 fe0e 	mul.w	lr, r2, lr
  for (int i = 0; i < dims_count; ++i) {
    4544:	3301      	adds	r3, #1
    4546:	4299      	cmp	r1, r3
    4548:	d1f5      	bne.n	4536 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x20e>
    454a:	9317      	str	r3, [sp, #92]	; 0x5c
    454c:	4662      	mov	r2, ip
    454e:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
    TFLITE_DCHECK_GE(i, 0);
    4552:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4554:	1e99      	subs	r1, r3, #2
    4556:	d47b      	bmi.n	4650 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x328>
    TFLITE_DCHECK_LT(i, size_);
    4558:	9b16      	ldr	r3, [sp, #88]	; 0x58
    455a:	428b      	cmp	r3, r1
    455c:	dd7a      	ble.n	4654 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x32c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    455e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4560:	2b05      	cmp	r3, #5
    4562:	dc79      	bgt.n	4658 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x330>
    4564:	ab4a      	add	r3, sp, #296	; 0x128
    4566:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    456a:	f851 1c2c 	ldr.w	r1, [r1, #-44]
    456e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    4570:	2b05      	cmp	r3, #5
    4572:	dc75      	bgt.n	4660 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x338>
    4574:	ab4a      	add	r3, sp, #296	; 0x128
    4576:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    457a:	f852 3c5c 	ldr.w	r3, [r2, #-92]
    457e:	9313      	str	r3, [sp, #76]	; 0x4c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    4580:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4582:	428b      	cmp	r3, r1
    4584:	d171      	bne.n	466a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x342>
    TFLITE_DCHECK_GE(i, 0);
    4586:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4588:	1e5a      	subs	r2, r3, #1
    458a:	d470      	bmi.n	466e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x346>
    TFLITE_DCHECK_LT(i, size_);
    458c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    458e:	4293      	cmp	r3, r2
    4590:	dd6f      	ble.n	4672 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x34a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    4592:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4594:	2b05      	cmp	r3, #5
    4596:	dc6e      	bgt.n	4676 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x34e>
    4598:	ab4a      	add	r3, sp, #296	; 0x128
    459a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    459e:	f852 3c2c 	ldr.w	r3, [r2, #-44]
    45a2:	930a      	str	r3, [sp, #40]	; 0x28
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
  for (int b = 0; b < batches; ++b) {
    45a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    45a6:	2b00      	cmp	r3, #0
    45a8:	f340 809a 	ble.w	46e0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3b8>
    45ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    45ae:	2a00      	cmp	r2, #0
    45b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    45b2:	bfc8      	it	gt
    45b4:	2400      	movgt	r4, #0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    45b6:	2301      	movs	r3, #1
    45b8:	40a3      	lsls	r3, r4
    45ba:	3b01      	subs	r3, #1
    45bc:	930c      	str	r3, [sp, #48]	; 0x30
  return a >> offset;
    45be:	105b      	asrs	r3, r3, #1
    45c0:	9310      	str	r3, [sp, #64]	; 0x40
    45c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    45c4:	9312      	str	r3, [sp, #72]	; 0x48
    45c6:	eb06 0c03 	add.w	ip, r6, r3
    45ca:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    45ce:	9706      	str	r7, [sp, #24]
    45d0:	2300      	movs	r3, #0
    45d2:	9311      	str	r3, [sp, #68]	; 0x44
  int left_shift = shift > 0 ? shift : 0;
    45d4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    45d8:	930b      	str	r3, [sp, #44]	; 0x2c
  std::int64_t b_64(b);
    45da:	9a07      	ldr	r2, [sp, #28]
    45dc:	4610      	mov	r0, r2
    45de:	17d1      	asrs	r1, r2, #31
    45e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    45e4:	46a6      	mov	lr, r4
    45e6:	f8cd 901c 	str.w	r9, [sp, #28]
    45ea:	46e1      	mov	r9, ip
    45ec:	4694      	mov	ip, r2
    45ee:	e06a      	b.n	46c6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x39e>
  RuntimeShape() : size_(0) {}
    45f0:	2700      	movs	r7, #0
    45f2:	9744      	str	r7, [sp, #272]	; 0x110
    45f4:	e72f      	b.n	4456 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x12e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    45f6:	a845      	add	r0, sp, #276	; 0x114
    45f8:	e727      	b.n	444a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x122>
  RuntimeShape() : size_(0) {}
    45fa:	2300      	movs	r3, #0
    45fc:	933e      	str	r3, [sp, #248]	; 0xf8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    45fe:	9315      	str	r3, [sp, #84]	; 0x54
    4600:	e743      	b.n	448a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x162>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4602:	a83f      	add	r0, sp, #252	; 0xfc
    4604:	e73b      	b.n	447e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x156>
  RuntimeShape() : size_(0) {}
    4606:	2300      	movs	r3, #0
    4608:	9338      	str	r3, [sp, #224]	; 0xe0
    460a:	9308      	str	r3, [sp, #32]
    460c:	e759      	b.n	44c2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x19a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    460e:	a839      	add	r0, sp, #228	; 0xe4
    4610:	e750      	b.n	44b4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x18c>
  RuntimeShape() : size_(0) {}
    4612:	2300      	movs	r3, #0
    4614:	9332      	str	r3, [sp, #200]	; 0xc8
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    4616:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    4618:	2b01      	cmp	r3, #1
    461a:	dc13      	bgt.n	4644 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x31c>
    461c:	4b00      	ldr	r3, [pc, #0]	; (4620 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2f8>)
    461e:	4798      	blx	r3
    4620:	0001739d 	.word	0x0001739d
    4624:	00001ab5 	.word	0x00001ab5
    4628:	0003bb08 	.word	0x0003bb08
    462c:	00003fd5 	.word	0x00003fd5
    4630:	000039dd 	.word	0x000039dd
    4634:	1ffffffe 	.word	0x1ffffffe
    4638:	0000cd6d 	.word	0x0000cd6d
    463c:	00018121 	.word	0x00018121
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4640:	a833      	add	r0, sp, #204	; 0xcc
    4642:	e753      	b.n	44ec <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1c4>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
    4644:	4b35      	ldr	r3, [pc, #212]	; (471c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3f4>)
    4646:	4798      	blx	r3
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    4648:	4b34      	ldr	r3, [pc, #208]	; (471c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3f4>)
    464a:	4798      	blx	r3
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    464c:	4b33      	ldr	r3, [pc, #204]	; (471c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3f4>)
    464e:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    4650:	4b32      	ldr	r3, [pc, #200]	; (471c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3f4>)
    4652:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    4654:	4b31      	ldr	r3, [pc, #196]	; (471c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3f4>)
    4656:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    4658:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    465a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    465e:	e786      	b.n	456e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x246>
    4660:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    4662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4666:	9313      	str	r3, [sp, #76]	; 0x4c
    4668:	e78a      	b.n	4580 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x258>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    466a:	4b2c      	ldr	r3, [pc, #176]	; (471c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3f4>)
    466c:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    466e:	4b2b      	ldr	r3, [pc, #172]	; (471c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3f4>)
    4670:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    4672:	4b2a      	ldr	r3, [pc, #168]	; (471c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3f4>)
    4674:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    4676:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    4678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    467c:	930a      	str	r3, [sp, #40]	; 0x28
    467e:	e791      	b.n	45a4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x27c>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
      int32 acc = 0;
    4680:	2200      	movs	r2, #0
    4682:	e21a      	b.n	4aba <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x792>
    4684:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    4688:	f040 8220 	bne.w	4acc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x7a4>
    468c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    4690:	e1dd      	b.n	4a4e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x726>
  assert(exponent >= 0);
    4692:	4b23      	ldr	r3, [pc, #140]	; (4720 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3f8>)
    4694:	4a23      	ldr	r2, [pc, #140]	; (4724 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3fc>)
    4696:	f44f 71b3 	mov.w	r1, #358	; 0x166
    469a:	4823      	ldr	r0, [pc, #140]	; (4728 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x400>)
    469c:	4c23      	ldr	r4, [pc, #140]	; (472c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x404>)
    469e:	47a0      	blx	r4
  assert(exponent <= 31);
    46a0:	4b23      	ldr	r3, [pc, #140]	; (4730 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x408>)
    46a2:	4a20      	ldr	r2, [pc, #128]	; (4724 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3fc>)
    46a4:	f240 1167 	movw	r1, #359	; 0x167
    46a8:	481f      	ldr	r0, [pc, #124]	; (4728 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x400>)
    46aa:	4c20      	ldr	r4, [pc, #128]	; (472c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x404>)
    46ac:	47a0      	blx	r4
  for (int b = 0; b < batches; ++b) {
    46ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    46b0:	3301      	adds	r3, #1
    46b2:	9311      	str	r3, [sp, #68]	; 0x44
    46b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    46b6:	4491      	add	r9, r2
    46b8:	9a06      	ldr	r2, [sp, #24]
    46ba:	9907      	ldr	r1, [sp, #28]
    46bc:	440a      	add	r2, r1
    46be:	9206      	str	r2, [sp, #24]
    46c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    46c2:	4293      	cmp	r3, r2
    46c4:	d00c      	beq.n	46e0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3b8>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    46c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    46c8:	2b00      	cmp	r3, #0
    46ca:	ddf0      	ble.n	46ae <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x386>
    46cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    46ce:	eba9 0003 	sub.w	r0, r9, r3
    46d2:	9c08      	ldr	r4, [sp, #32]
    46d4:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
    46d8:	9b06      	ldr	r3, [sp, #24]
    46da:	9a07      	ldr	r2, [sp, #28]
    46dc:	1899      	adds	r1, r3, r2
    46de:	e1da      	b.n	4a96 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x76e>
    if (size_ > kMaxSmallSize) {
    46e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    46e2:	2b05      	cmp	r3, #5
    46e4:	dd03      	ble.n	46ee <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3c6>
      delete[] dims_pointer_;
    46e6:	9833      	ldr	r0, [sp, #204]	; 0xcc
    46e8:	b108      	cbz	r0, 46ee <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3c6>
    46ea:	4b12      	ldr	r3, [pc, #72]	; (4734 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x40c>)
    46ec:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    46ee:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    46f0:	2b05      	cmp	r3, #5
    46f2:	dd03      	ble.n	46fc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3d4>
      delete[] dims_pointer_;
    46f4:	9839      	ldr	r0, [sp, #228]	; 0xe4
    46f6:	b108      	cbz	r0, 46fc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3d4>
    46f8:	4b0e      	ldr	r3, [pc, #56]	; (4734 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x40c>)
    46fa:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    46fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    46fe:	2b05      	cmp	r3, #5
    4700:	dd03      	ble.n	470a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3e2>
      delete[] dims_pointer_;
    4702:	983f      	ldr	r0, [sp, #252]	; 0xfc
    4704:	b108      	cbz	r0, 470a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3e2>
    4706:	4b0b      	ldr	r3, [pc, #44]	; (4734 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x40c>)
    4708:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    470a:	9b44      	ldr	r3, [sp, #272]	; 0x110
    470c:	2b05      	cmp	r3, #5
    470e:	dd03      	ble.n	4718 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3f0>
      delete[] dims_pointer_;
    4710:	9845      	ldr	r0, [sp, #276]	; 0x114
    4712:	b108      	cbz	r0, 4718 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3f0>
    4714:	4b07      	ldr	r3, [pc, #28]	; (4734 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x40c>)
    4716:	4798      	blx	r3
  return kTfLiteOk;
    4718:	2000      	movs	r0, #0
    471a:	e651      	b.n	43c0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x98>
    471c:	0001739d 	.word	0x0001739d
    4720:	0003b9f0 	.word	0x0003b9f0
    4724:	0003bb24 	.word	0x0003bb24
    4728:	0003ba00 	.word	0x0003ba00
    472c:	000173ad 	.word	0x000173ad
    4730:	0003ba34 	.word	0x0003ba34
    4734:	0000ccbd 	.word	0x0000ccbd
  if (tensor == nullptr) {
    4738:	f1b8 0f00 	cmp.w	r8, #0
    473c:	f000 80e6 	beq.w	490c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5e4>
  const int dims_size = dims->size;
    4740:	f8d8 7008 	ldr.w	r7, [r8, #8]
    4744:	f857 4b04 	ldr.w	r4, [r7], #4
    size_ = dimensions_count;
    4748:	942c      	str	r4, [sp, #176]	; 0xb0
    if (dimensions_count > kMaxSmallSize) {
    474a:	2c05      	cmp	r4, #5
    474c:	f340 80e1 	ble.w	4912 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5ea>
      dims_pointer_ = new int32[dimensions_count];
    4750:	4ba5      	ldr	r3, [pc, #660]	; (49e8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6c0>)
    4752:	429c      	cmp	r4, r3
    4754:	bf94      	ite	ls
    4756:	00a0      	lslls	r0, r4, #2
    4758:	f04f 30ff 	movhi.w	r0, #4294967295
    475c:	4ba3      	ldr	r3, [pc, #652]	; (49ec <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6c4>)
    475e:	4798      	blx	r3
    4760:	902d      	str	r0, [sp, #180]	; 0xb4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4762:	00a2      	lsls	r2, r4, #2
    4764:	4639      	mov	r1, r7
    4766:	4ba2      	ldr	r3, [pc, #648]	; (49f0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6c8>)
    4768:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    476a:	f8d8 7004 	ldr.w	r7, [r8, #4]
  if (tensor == nullptr) {
    476e:	2e00      	cmp	r6, #0
    4770:	f000 80d1 	beq.w	4916 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5ee>
  const int dims_size = dims->size;
    4774:	f8d6 8008 	ldr.w	r8, [r6, #8]
    4778:	f858 4b04 	ldr.w	r4, [r8], #4
    size_ = dimensions_count;
    477c:	9426      	str	r4, [sp, #152]	; 0x98
    if (dimensions_count > kMaxSmallSize) {
    477e:	2c05      	cmp	r4, #5
    4780:	f340 80cd 	ble.w	491e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5f6>
      dims_pointer_ = new int32[dimensions_count];
    4784:	4b98      	ldr	r3, [pc, #608]	; (49e8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6c0>)
    4786:	429c      	cmp	r4, r3
    4788:	bf94      	ite	ls
    478a:	00a0      	lslls	r0, r4, #2
    478c:	f04f 30ff 	movhi.w	r0, #4294967295
    4790:	4b96      	ldr	r3, [pc, #600]	; (49ec <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6c4>)
    4792:	4798      	blx	r3
    4794:	9027      	str	r0, [sp, #156]	; 0x9c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4796:	00a2      	lsls	r2, r4, #2
    4798:	4641      	mov	r1, r8
    479a:	4b95      	ldr	r3, [pc, #596]	; (49f0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6c8>)
    479c:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    479e:	6873      	ldr	r3, [r6, #4]
    47a0:	9314      	str	r3, [sp, #80]	; 0x50
  if (tensor == nullptr) {
    47a2:	f1bb 0f00 	cmp.w	fp, #0
    47a6:	f000 80bc 	beq.w	4922 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5fa>
  const int dims_size = dims->size;
    47aa:	f8db 6008 	ldr.w	r6, [fp, #8]
    47ae:	f856 4b04 	ldr.w	r4, [r6], #4
    size_ = dimensions_count;
    47b2:	9420      	str	r4, [sp, #128]	; 0x80
    if (dimensions_count > kMaxSmallSize) {
    47b4:	2c05      	cmp	r4, #5
    47b6:	f340 80b8 	ble.w	492a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x602>
      dims_pointer_ = new int32[dimensions_count];
    47ba:	4b8b      	ldr	r3, [pc, #556]	; (49e8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6c0>)
    47bc:	429c      	cmp	r4, r3
    47be:	bf94      	ite	ls
    47c0:	00a0      	lslls	r0, r4, #2
    47c2:	f04f 30ff 	movhi.w	r0, #4294967295
    47c6:	4b89      	ldr	r3, [pc, #548]	; (49ec <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6c4>)
    47c8:	4798      	blx	r3
    47ca:	9021      	str	r0, [sp, #132]	; 0x84
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    47cc:	00a2      	lsls	r2, r4, #2
    47ce:	4631      	mov	r1, r6
    47d0:	4b87      	ldr	r3, [pc, #540]	; (49f0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6c8>)
    47d2:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    47d4:	f8db 3004 	ldr.w	r3, [fp, #4]
    47d8:	9315      	str	r3, [sp, #84]	; 0x54
  if (tensor == nullptr) {
    47da:	f1b9 0f00 	cmp.w	r9, #0
    47de:	f000 80a6 	beq.w	492e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x606>
  const int dims_size = dims->size;
    47e2:	f8d9 6008 	ldr.w	r6, [r9, #8]
    47e6:	f856 4b04 	ldr.w	r4, [r6], #4
    size_ = dimensions_count;
    47ea:	941a      	str	r4, [sp, #104]	; 0x68
    if (dimensions_count > kMaxSmallSize) {
    47ec:	2c05      	cmp	r4, #5
    47ee:	f340 80a1 	ble.w	4934 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x60c>
      dims_pointer_ = new int32[dimensions_count];
    47f2:	4b7d      	ldr	r3, [pc, #500]	; (49e8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6c0>)
    47f4:	429c      	cmp	r4, r3
    47f6:	bf94      	ite	ls
    47f8:	00a0      	lslls	r0, r4, #2
    47fa:	f04f 30ff 	movhi.w	r0, #4294967295
    47fe:	4b7b      	ldr	r3, [pc, #492]	; (49ec <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6c4>)
    4800:	4798      	blx	r3
    4802:	901b      	str	r0, [sp, #108]	; 0x6c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4804:	00a2      	lsls	r2, r4, #2
    4806:	4631      	mov	r1, r6
    4808:	4b79      	ldr	r3, [pc, #484]	; (49f0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6c8>)
    480a:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    480c:	f8d9 4004 	ldr.w	r4, [r9, #4]
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    4810:	9b04      	ldr	r3, [sp, #16]
    4812:	9a05      	ldr	r2, [sp, #20]
    4814:	4293      	cmp	r3, r2
    4816:	f300 808f 	bgt.w	4938 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x610>
  TFLITE_DCHECK_EQ(output_offset, 0);
    481a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    481c:	2b00      	cmp	r3, #0
    481e:	f040 808d 	bne.w	493c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x614>
  inline int32 DimensionsCount() const { return size_; }
    4822:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4824:	9319      	str	r3, [sp, #100]	; 0x64
    4826:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4828:	9218      	str	r2, [sp, #96]	; 0x60
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    482a:	1e59      	subs	r1, r3, #1
    482c:	f100 8088 	bmi.w	4940 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x618>
    4830:	428b      	cmp	r3, r1
    4832:	f340 8085 	ble.w	4940 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x618>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4836:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4838:	2b05      	cmp	r3, #5
    483a:	bfcc      	ite	gt
    483c:	981b      	ldrgt	r0, [sp, #108]	; 0x6c
    483e:	a81b      	addle	r0, sp, #108	; 0x6c
  for (int i = 0; i < dims_count; ++i) {
    4840:	9a19      	ldr	r2, [sp, #100]	; 0x64
    4842:	2a00      	cmp	r2, #0
    4844:	dd7e      	ble.n	4944 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x61c>
    4846:	2301      	movs	r3, #1
    4848:	9312      	str	r3, [sp, #72]	; 0x48
    484a:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    484c:	2601      	movs	r6, #1
    484e:	4694      	mov	ip, r2
    4850:	46b6      	mov	lr, r6
    4852:	428b      	cmp	r3, r1
    4854:	bf14      	ite	ne
    4856:	f850 2023 	ldrne.w	r2, [r0, r3, lsl #2]
    485a:	4632      	moveq	r2, r6
    485c:	fb02 fe0e 	mul.w	lr, r2, lr
  for (int i = 0; i < dims_count; ++i) {
    4860:	3301      	adds	r3, #1
    4862:	459c      	cmp	ip, r3
    4864:	d1f5      	bne.n	4852 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x52a>
    4866:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    TFLITE_DCHECK_GE(i, 0);
    486a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    486c:	1e9a      	subs	r2, r3, #2
    486e:	d46c      	bmi.n	494a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x622>
    TFLITE_DCHECK_LT(i, size_);
    4870:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4872:	4293      	cmp	r3, r2
    4874:	dd6b      	ble.n	494e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x626>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    4876:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4878:	2b05      	cmp	r3, #5
    487a:	dc6a      	bgt.n	4952 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x62a>
    487c:	ab4a      	add	r3, sp, #296	; 0x128
    487e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4882:	f852 2c8c 	ldr.w	r2, [r2, #-140]
    4886:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4888:	2b05      	cmp	r3, #5
    488a:	dc66      	bgt.n	495a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x632>
    488c:	ab4a      	add	r3, sp, #296	; 0x128
    488e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4892:	f851 3cbc 	ldr.w	r3, [r1, #-188]
    4896:	9313      	str	r3, [sp, #76]	; 0x4c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    4898:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    489a:	4293      	cmp	r3, r2
    489c:	d162      	bne.n	4964 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x63c>
    TFLITE_DCHECK_GE(i, 0);
    489e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    48a0:	1e5a      	subs	r2, r3, #1
    48a2:	d461      	bmi.n	4968 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x640>
    TFLITE_DCHECK_LT(i, size_);
    48a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    48a6:	4293      	cmp	r3, r2
    48a8:	dd60      	ble.n	496c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x644>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    48aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
    48ac:	2b05      	cmp	r3, #5
    48ae:	dc5f      	bgt.n	4970 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x648>
    48b0:	ab4a      	add	r3, sp, #296	; 0x128
    48b2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    48b6:	f852 3c8c 	ldr.w	r3, [r2, #-140]
    48ba:	9308      	str	r3, [sp, #32]
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
  for (int b = 0; b < batches; ++b) {
    48bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    48be:	2b00      	cmp	r3, #0
    48c0:	f340 80a4 	ble.w	4a0c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6e4>
    48c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    48c6:	2a00      	cmp	r2, #0
    48c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    48ca:	bfc8      	it	gt
    48cc:	2300      	movgt	r3, #0
    48ce:	469c      	mov	ip, r3
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    48d0:	2301      	movs	r3, #1
    48d2:	fa03 f30c 	lsl.w	r3, r3, ip
    48d6:	3b01      	subs	r3, #1
    48d8:	930a      	str	r3, [sp, #40]	; 0x28
  return a >> offset;
    48da:	105b      	asrs	r3, r3, #1
    48dc:	930b      	str	r3, [sp, #44]	; 0x2c
    48de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    48e0:	005b      	lsls	r3, r3, #1
    48e2:	9311      	str	r3, [sp, #68]	; 0x44
    48e4:	9410      	str	r4, [sp, #64]	; 0x40
    48e6:	9b08      	ldr	r3, [sp, #32]
    48e8:	4619      	mov	r1, r3
    48ea:	9706      	str	r7, [sp, #24]
    48ec:	2300      	movs	r3, #0
    48ee:	930e      	str	r3, [sp, #56]	; 0x38
    48f0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    48f4:	9309      	str	r3, [sp, #36]	; 0x24
  std::int64_t b_64(b);
    48f6:	9a07      	ldr	r2, [sp, #28]
    48f8:	4616      	mov	r6, r2
    48fa:	17d7      	asrs	r7, r2, #31
    48fc:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    4900:	9516      	str	r5, [sp, #88]	; 0x58
    4902:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
    4906:	4615      	mov	r5, r2
    4908:	468a      	mov	sl, r1
    490a:	e058      	b.n	49be <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x696>
  RuntimeShape() : size_(0) {}
    490c:	2700      	movs	r7, #0
    490e:	972c      	str	r7, [sp, #176]	; 0xb0
    4910:	e72d      	b.n	476e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x446>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4912:	a82d      	add	r0, sp, #180	; 0xb4
    4914:	e725      	b.n	4762 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x43a>
  RuntimeShape() : size_(0) {}
    4916:	2300      	movs	r3, #0
    4918:	9326      	str	r3, [sp, #152]	; 0x98
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    491a:	9314      	str	r3, [sp, #80]	; 0x50
    491c:	e741      	b.n	47a2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x47a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    491e:	a827      	add	r0, sp, #156	; 0x9c
    4920:	e739      	b.n	4796 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x46e>
  RuntimeShape() : size_(0) {}
    4922:	2300      	movs	r3, #0
    4924:	9320      	str	r3, [sp, #128]	; 0x80
    4926:	9315      	str	r3, [sp, #84]	; 0x54
    4928:	e757      	b.n	47da <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x4b2>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    492a:	a821      	add	r0, sp, #132	; 0x84
    492c:	e74e      	b.n	47cc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x4a4>
  RuntimeShape() : size_(0) {}
    492e:	2400      	movs	r4, #0
    4930:	941a      	str	r4, [sp, #104]	; 0x68
    4932:	e76d      	b.n	4810 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x4e8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4934:	a81b      	add	r0, sp, #108	; 0x6c
    4936:	e765      	b.n	4804 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x4dc>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    4938:	4b2e      	ldr	r3, [pc, #184]	; (49f4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6cc>)
    493a:	4798      	blx	r3
  TFLITE_DCHECK_EQ(output_offset, 0);
    493c:	4b2d      	ldr	r3, [pc, #180]	; (49f4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6cc>)
    493e:	4798      	blx	r3
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    4940:	4b2c      	ldr	r3, [pc, #176]	; (49f4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6cc>)
    4942:	4798      	blx	r3
  int flat_size = 1;
    4944:	2301      	movs	r3, #1
    4946:	9312      	str	r3, [sp, #72]	; 0x48
    4948:	e78f      	b.n	486a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x542>
    TFLITE_DCHECK_GE(i, 0);
    494a:	4b2a      	ldr	r3, [pc, #168]	; (49f4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6cc>)
    494c:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    494e:	4b29      	ldr	r3, [pc, #164]	; (49f4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6cc>)
    4950:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    4952:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    4954:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4958:	e795      	b.n	4886 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x55e>
    495a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    495c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4960:	9313      	str	r3, [sp, #76]	; 0x4c
    4962:	e799      	b.n	4898 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x570>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    4964:	4b23      	ldr	r3, [pc, #140]	; (49f4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6cc>)
    4966:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    4968:	4b22      	ldr	r3, [pc, #136]	; (49f4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6cc>)
    496a:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    496c:	4b21      	ldr	r3, [pc, #132]	; (49f4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6cc>)
    496e:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    4970:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    4972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4976:	9308      	str	r3, [sp, #32]
    4978:	e7a0      	b.n	48bc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x594>
    497a:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
    497e:	f040 8126 	bne.w	4bce <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8a6>
    4982:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    4986:	e0eb      	b.n	4b60 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x838>
  assert(exponent >= 0);
    4988:	4b1b      	ldr	r3, [pc, #108]	; (49f8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6d0>)
    498a:	4a1c      	ldr	r2, [pc, #112]	; (49fc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6d4>)
    498c:	f44f 71b3 	mov.w	r1, #358	; 0x166
    4990:	481b      	ldr	r0, [pc, #108]	; (4a00 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6d8>)
    4992:	4c1c      	ldr	r4, [pc, #112]	; (4a04 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6dc>)
    4994:	47a0      	blx	r4
  assert(exponent <= 31);
    4996:	4b1c      	ldr	r3, [pc, #112]	; (4a08 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6e0>)
    4998:	4a18      	ldr	r2, [pc, #96]	; (49fc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6d4>)
    499a:	f240 1167 	movw	r1, #359	; 0x167
    499e:	4818      	ldr	r0, [pc, #96]	; (4a00 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6d8>)
    49a0:	4c18      	ldr	r4, [pc, #96]	; (4a04 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6dc>)
    49a2:	47a0      	blx	r4
  for (int b = 0; b < batches; ++b) {
    49a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    49a6:	3301      	adds	r3, #1
    49a8:	930e      	str	r3, [sp, #56]	; 0x38
    49aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    49ac:	9911      	ldr	r1, [sp, #68]	; 0x44
    49ae:	440a      	add	r2, r1
    49b0:	9210      	str	r2, [sp, #64]	; 0x40
    49b2:	9a06      	ldr	r2, [sp, #24]
    49b4:	4452      	add	r2, sl
    49b6:	9206      	str	r2, [sp, #24]
    49b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    49ba:	429a      	cmp	r2, r3
    49bc:	d026      	beq.n	4a0c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6e4>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    49be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    49c0:	2b00      	cmp	r3, #0
    49c2:	ddef      	ble.n	49a4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x67c>
    49c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    49c6:	f1a3 0804 	sub.w	r8, r3, #4
    49ca:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    49ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
    49d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    49d2:	441a      	add	r2, r3
    49d4:	9207      	str	r2, [sp, #28]
    49d6:	469e      	mov	lr, r3
    49d8:	9b06      	ldr	r3, [sp, #24]
    49da:	eb03 040a 	add.w	r4, r3, sl
  const int32_t filter_offset = -filter->params.zero_point;
    49de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    49e0:	4258      	negs	r0, r3
  const int32_t input_offset = -input->params.zero_point;
    49e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    49e4:	4259      	negs	r1, r3
    49e6:	e0dc      	b.n	4ba2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x87a>
    49e8:	1ffffffe 	.word	0x1ffffffe
    49ec:	0000cd6d 	.word	0x0000cd6d
    49f0:	00018121 	.word	0x00018121
    49f4:	0001739d 	.word	0x0001739d
    49f8:	0003b9f0 	.word	0x0003b9f0
    49fc:	0003bb24 	.word	0x0003bb24
    4a00:	0003ba00 	.word	0x0003ba00
    4a04:	000173ad 	.word	0x000173ad
    4a08:	0003ba34 	.word	0x0003ba34
    if (size_ > kMaxSmallSize) {
    4a0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4a0e:	2b05      	cmp	r3, #5
    4a10:	dd03      	ble.n	4a1a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6f2>
      delete[] dims_pointer_;
    4a12:	981b      	ldr	r0, [sp, #108]	; 0x6c
    4a14:	b108      	cbz	r0, 4a1a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6f2>
    4a16:	4b7c      	ldr	r3, [pc, #496]	; (4c08 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8e0>)
    4a18:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    4a1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    4a1c:	2b05      	cmp	r3, #5
    4a1e:	dd03      	ble.n	4a28 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x700>
      delete[] dims_pointer_;
    4a20:	9821      	ldr	r0, [sp, #132]	; 0x84
    4a22:	b108      	cbz	r0, 4a28 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x700>
    4a24:	4b78      	ldr	r3, [pc, #480]	; (4c08 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8e0>)
    4a26:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    4a28:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4a2a:	2b05      	cmp	r3, #5
    4a2c:	dd03      	ble.n	4a36 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x70e>
      delete[] dims_pointer_;
    4a2e:	9827      	ldr	r0, [sp, #156]	; 0x9c
    4a30:	b108      	cbz	r0, 4a36 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x70e>
    4a32:	4b75      	ldr	r3, [pc, #468]	; (4c08 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8e0>)
    4a34:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    4a36:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    4a38:	2b05      	cmp	r3, #5
    4a3a:	dd03      	ble.n	4a44 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x71c>
      delete[] dims_pointer_;
    4a3c:	982d      	ldr	r0, [sp, #180]	; 0xb4
    4a3e:	b108      	cbz	r0, 4a44 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x71c>
    4a40:	4b71      	ldr	r3, [pc, #452]	; (4c08 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8e0>)
    4a42:	4798      	blx	r3
  return kTfLiteOk;
    4a44:	2000      	movs	r0, #0
    4a46:	e4bb      	b.n	43c0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x98>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    4a48:	0ff3      	lsrs	r3, r6, #31
    4a4a:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
  assert(exponent >= 0);
    4a4e:	f1be 0f00 	cmp.w	lr, #0
    4a52:	f6ff ae1e 	blt.w	4692 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x36a>
  assert(exponent <= 31);
    4a56:	f1be 0f1f 	cmp.w	lr, #31
    4a5a:	f73f ae21 	bgt.w	46a0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x378>
  return a + b;
    4a5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4a60:	eb02 76d3 	add.w	r6, r2, r3, lsr #31
  return a & b;
    4a64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4a66:	401a      	ands	r2, r3
  return a >> offset;
    4a68:	fa43 f30e 	asr.w	r3, r3, lr
  return a + b;
    4a6c:	4296      	cmp	r6, r2
    4a6e:	bfb8      	it	lt
    4a70:	3301      	addlt	r3, #1
      acc += output_offset;
    4a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4a74:	4413      	add	r3, r2
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
    4a76:	9a04      	ldr	r2, [sp, #16]
    4a78:	4293      	cmp	r3, r2
    4a7a:	bfb8      	it	lt
    4a7c:	4613      	movlt	r3, r2
    4a7e:	9a05      	ldr	r2, [sp, #20]
    4a80:	4293      	cmp	r3, r2
    4a82:	bfa8      	it	ge
    4a84:	4613      	movge	r3, r2
    4a86:	f800 3b01 	strb.w	r3, [r0], #1
    4a8a:	3404      	adds	r4, #4
    4a8c:	9b07      	ldr	r3, [sp, #28]
    4a8e:	4498      	add	r8, r3
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    4a90:	4548      	cmp	r0, r9
    4a92:	f43f ae0c 	beq.w	46ae <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x386>
      for (int d = 0; d < accum_depth; ++d) {
    4a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4a98:	2b00      	cmp	r3, #0
    4a9a:	f77f adf1 	ble.w	4680 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x358>
    4a9e:	46c3      	mov	fp, r8
    4aa0:	9f06      	ldr	r7, [sp, #24]
    4aa2:	2200      	movs	r2, #0
        int32 input_val = input_data[b * accum_depth + d];
    4aa4:	f817 6b01 	ldrb.w	r6, [r7], #1
        int32 filter_val = filter_data[out_c * accum_depth + d];
    4aa8:	f81b 3b01 	ldrb.w	r3, [fp], #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
    4aac:	eba3 030a 	sub.w	r3, r3, sl
    4ab0:	1b76      	subs	r6, r6, r5
    4ab2:	fb06 2203 	mla	r2, r6, r3, r2
      for (int d = 0; d < accum_depth; ++d) {
    4ab6:	42b9      	cmp	r1, r7
    4ab8:	d1f4      	bne.n	4aa4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x77c>
      if (bias_data) {
    4aba:	9b08      	ldr	r3, [sp, #32]
    4abc:	b10b      	cbz	r3, 4ac2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x79a>
        acc += bias_data[out_c];
    4abe:	6823      	ldr	r3, [r4, #0]
    4ac0:	441a      	add	r2, r3
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    4ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4ac4:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    4ac6:	4594      	cmp	ip, r2
    4ac8:	f43f addc 	beq.w	4684 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x35c>
  std::int64_t a_64(a);
    4acc:	17d7      	asrs	r7, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    4ace:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4ad0:	fb02 f603 	mul.w	r6, r2, r3
    4ad4:	fb0c 6607 	mla	r6, ip, r7, r6
    4ad8:	fba2 230c 	umull	r2, r3, r2, ip
    4adc:	4433      	add	r3, r6
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    4ade:	2a00      	cmp	r2, #0
    4ae0:	f173 0600 	sbcs.w	r6, r3, #0
    4ae4:	db24      	blt.n	4b30 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x808>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    4ae6:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    4aea:	f143 0300 	adc.w	r3, r3, #0
    4aee:	4616      	mov	r6, r2
    4af0:	461f      	mov	r7, r3
    4af2:	2a00      	cmp	r2, #0
    4af4:	f173 0b00 	sbcs.w	fp, r3, #0
    4af8:	daa6      	bge.n	4a48 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x720>
    4afa:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    4afe:	2700      	movs	r7, #0
    4b00:	18b6      	adds	r6, r6, r2
    4b02:	415f      	adcs	r7, r3
    4b04:	e7a0      	b.n	4a48 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x720>
    4b06:	4e41      	ldr	r6, [pc, #260]	; (4c0c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8e4>)
    4b08:	f04f 37ff 	mov.w	r7, #4294967295
    4b0c:	18b6      	adds	r6, r6, r2
    4b0e:	415f      	adcs	r7, r3
    4b10:	4632      	mov	r2, r6
    4b12:	463b      	mov	r3, r7
    4b14:	2e00      	cmp	r6, #0
    4b16:	f177 0b00 	sbcs.w	fp, r7, #0
    4b1a:	db03      	blt.n	4b24 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x7fc>
    4b1c:	0ff3      	lsrs	r3, r6, #31
    4b1e:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
    4b22:	e01d      	b.n	4b60 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x838>
    4b24:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    4b28:	2700      	movs	r7, #0
    4b2a:	18b6      	adds	r6, r6, r2
    4b2c:	415f      	adcs	r7, r3
    4b2e:	e7f5      	b.n	4b1c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x7f4>
    4b30:	4e36      	ldr	r6, [pc, #216]	; (4c0c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8e4>)
    4b32:	f04f 37ff 	mov.w	r7, #4294967295
    4b36:	18b6      	adds	r6, r6, r2
    4b38:	415f      	adcs	r7, r3
    4b3a:	4632      	mov	r2, r6
    4b3c:	463b      	mov	r3, r7
    4b3e:	2e00      	cmp	r6, #0
    4b40:	f177 0b00 	sbcs.w	fp, r7, #0
    4b44:	db03      	blt.n	4b4e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x826>
    4b46:	0ff3      	lsrs	r3, r6, #31
    4b48:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
    4b4c:	e77f      	b.n	4a4e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x726>
    4b4e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    4b52:	2700      	movs	r7, #0
    4b54:	18b6      	adds	r6, r6, r2
    4b56:	415f      	adcs	r7, r3
    4b58:	e7f5      	b.n	4b46 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x81e>
    4b5a:	0ff3      	lsrs	r3, r6, #31
    4b5c:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
  assert(exponent >= 0);
    4b60:	f1bc 0f00 	cmp.w	ip, #0
    4b64:	f6ff af10 	blt.w	4988 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x660>
  assert(exponent <= 31);
    4b68:	f1bc 0f1f 	cmp.w	ip, #31
    4b6c:	f73f af13 	bgt.w	4996 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x66e>
  return a + b;
    4b70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4b72:	eb02 76d3 	add.w	r6, r2, r3, lsr #31
  return a & b;
    4b76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4b78:	401a      	ands	r2, r3
  return a >> offset;
    4b7a:	fa43 f30c 	asr.w	r3, r3, ip
  return a + b;
    4b7e:	4296      	cmp	r6, r2
    4b80:	bfb8      	it	lt
    4b82:	3301      	addlt	r3, #1
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
      // Saturate, cast to int16, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
      accum = std::min(accum, output_activation_max - output_offset);
      accum += output_offset;
      output_data[out_c + output_depth * b] = accum;
    4b84:	9a04      	ldr	r2, [sp, #16]
    4b86:	4293      	cmp	r3, r2
    4b88:	bfb8      	it	lt
    4b8a:	4613      	movlt	r3, r2
    4b8c:	9a05      	ldr	r2, [sp, #20]
    4b8e:	4293      	cmp	r3, r2
    4b90:	bfa8      	it	ge
    4b92:	4613      	movge	r3, r2
    4b94:	f82e 3b02 	strh.w	r3, [lr], #2
    4b98:	44d1      	add	r9, sl
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    4b9a:	9b07      	ldr	r3, [sp, #28]
    4b9c:	4573      	cmp	r3, lr
    4b9e:	f43f af01 	beq.w	49a4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x67c>
      int32 accum = bias_data[out_c];
    4ba2:	f858 2f04 	ldr.w	r2, [r8, #4]!
      for (int d = 0; d < accum_depth; ++d) {
    4ba6:	9b08      	ldr	r3, [sp, #32]
    4ba8:	2b00      	cmp	r3, #0
    4baa:	dd0b      	ble.n	4bc4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x89c>
    4bac:	46cb      	mov	fp, r9
    4bae:	9f06      	ldr	r7, [sp, #24]
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
    4bb0:	f817 6b01 	ldrb.w	r6, [r7], #1
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
    4bb4:	f81b 3b01 	ldrb.w	r3, [fp], #1
    4bb8:	4403      	add	r3, r0
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
    4bba:	440e      	add	r6, r1
        accum += filter_val * input_val;
    4bbc:	fb16 2203 	smlabb	r2, r6, r3, r2
      for (int d = 0; d < accum_depth; ++d) {
    4bc0:	42bc      	cmp	r4, r7
    4bc2:	d1f5      	bne.n	4bb0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x888>
    4bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4bc6:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    4bc8:	4295      	cmp	r5, r2
    4bca:	f43f aed6 	beq.w	497a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x652>
  std::int64_t a_64(a);
    4bce:	17d7      	asrs	r7, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    4bd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4bd2:	fb02 f603 	mul.w	r6, r2, r3
    4bd6:	fb05 6607 	mla	r6, r5, r7, r6
    4bda:	fba2 2305 	umull	r2, r3, r2, r5
    4bde:	4433      	add	r3, r6
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    4be0:	2a00      	cmp	r2, #0
    4be2:	f173 0600 	sbcs.w	r6, r3, #0
    4be6:	db8e      	blt.n	4b06 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x7de>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    4be8:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    4bec:	f143 0300 	adc.w	r3, r3, #0
    4bf0:	4616      	mov	r6, r2
    4bf2:	461f      	mov	r7, r3
    4bf4:	2a00      	cmp	r2, #0
    4bf6:	f173 0b00 	sbcs.w	fp, r3, #0
    4bfa:	daae      	bge.n	4b5a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x832>
    4bfc:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    4c00:	2700      	movs	r7, #0
    4c02:	18b6      	adds	r6, r6, r2
    4c04:	415f      	adcs	r7, r3
    4c06:	e7a8      	b.n	4b5a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x832>
    4c08:	0000ccbd 	.word	0x0000ccbd
    4c0c:	c0000001 	.word	0xc0000001

00004c10 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:

}  // namespace fully_connected

TfLiteRegistration Register_FULLY_CONNECTED() {
    4c10:	b470      	push	{r4, r5, r6}
    4c12:	4606      	mov	r6, r0
          /*prepare=*/fully_connected::Prepare,
          /*invoke=*/fully_connected::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    4c14:	4604      	mov	r4, r0
    4c16:	4d05      	ldr	r5, [pc, #20]	; (4c2c <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x1c>)
    4c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4c1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    4c20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    4c24:	4630      	mov	r0, r6
    4c26:	bc70      	pop	{r4, r5, r6}
    4c28:	4770      	bx	lr
    4c2a:	bf00      	nop
    4c2c:	0003bb80 	.word	0x0003bb80

00004c30 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj>:
  return kTfLiteOk;
}

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
    4c30:	b500      	push	{lr}
    4c32:	b083      	sub	sp, #12
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    4c34:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4c36:	b163      	cbz	r3, 4c52 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj+0x22>
  void* data = nullptr;
    4c38:	aa02      	add	r2, sp, #8
    4c3a:	2100      	movs	r1, #0
    4c3c:	f842 1d04 	str.w	r1, [r2, #-4]!
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
    4c40:	211c      	movs	r1, #28
    4c42:	4798      	blx	r3
    4c44:	2801      	cmp	r0, #1
      kTfLiteError) {
    return nullptr;
  }
  return data;
    4c46:	bf14      	ite	ne
    4c48:	9801      	ldrne	r0, [sp, #4]
    return nullptr;
    4c4a:	2000      	moveq	r0, #0
}
    4c4c:	b003      	add	sp, #12
    4c4e:	f85d fb04 	ldr.w	pc, [sp], #4
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    4c52:	4b01      	ldr	r3, [pc, #4]	; (4c58 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj+0x28>)
    4c54:	4798      	blx	r3
    4c56:	bf00      	nop
    4c58:	0001739d 	.word	0x0001739d

00004c5c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>:
                             OpData* data) {
    4c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c60:	b082      	sub	sp, #8
    4c62:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  return t->dims->data[dim];
    4c64:	6894      	ldr	r4, [r2, #8]
    4c66:	f8d4 9008 	ldr.w	r9, [r4, #8]
    4c6a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
      params->stride_height, params->stride_width,
    4c6e:	f8d1 8008 	ldr.w	r8, [r1, #8]
    4c72:	684c      	ldr	r4, [r1, #4]
      /*dilation_rate_width=*/1, height, width, params->filter_height,
    4c74:	f8d1 a010 	ldr.w	sl, [r1, #16]
      params->filter_width, params->padding, &out_height, &out_width);
    4c78:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    4c7c:	780d      	ldrb	r5, [r1, #0]
  switch (padding) {
    4c7e:	2d01      	cmp	r5, #1
    4c80:	d008      	beq.n	4c94 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0x38>
    4c82:	2d02      	cmp	r5, #2
    4c84:	d044      	beq.n	4d10 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xb4>
    4c86:	2d01      	cmp	r5, #1
    4c88:	d04f      	beq.n	4d2a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xce>
    4c8a:	2d02      	cmp	r5, #2
    4c8c:	d04f      	beq.n	4d2e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xd2>
      return 0;
    4c8e:	2500      	movs	r5, #0
    4c90:	462e      	mov	r6, r5
    4c92:	e009      	b.n	4ca8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0x4c>
      return (image_size + stride - 1) / stride;
    4c94:	eb0e 0504 	add.w	r5, lr, r4
    4c98:	3d01      	subs	r5, #1
    4c9a:	fb95 f5f4 	sdiv	r5, r5, r4
    4c9e:	eb08 0609 	add.w	r6, r8, r9
    4ca2:	3e01      	subs	r6, #1
    4ca4:	fb96 f6f8 	sdiv	r6, r6, r8
      ((out_size - 1) * stride + effective_filter_size - in_size);
    4ca8:	3e01      	subs	r6, #1
    4caa:	fb08 a606 	mla	r6, r8, r6, sl
    4cae:	eba6 0609 	sub.w	r6, r6, r9
  total_padding = total_padding > 0 ? total_padding : 0;
    4cb2:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      ((out_size - 1) * stride + effective_filter_size - in_size);
    4cb6:	3d01      	subs	r5, #1
    4cb8:	fb04 c405 	mla	r4, r4, r5, ip
    4cbc:	eba4 040e 	sub.w	r4, r4, lr
  total_padding = total_padding > 0 ? total_padding : 0;
    4cc0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  return total_padding / 2;
    4cc4:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
    4cc8:	106d      	asrs	r5, r5, #1
    4cca:	603d      	str	r5, [r7, #0]
    4ccc:	eb06 75d6 	add.w	r5, r6, r6, lsr #31
    4cd0:	106d      	asrs	r5, r5, #1
    4cd2:	607d      	str	r5, [r7, #4]
  *offset = total_padding % 2;
    4cd4:	f004 0401 	and.w	r4, r4, #1
    4cd8:	60bc      	str	r4, [r7, #8]
    4cda:	f006 0601 	and.w	r6, r6, #1
    4cde:	60fe      	str	r6, [r7, #12]
  if (input->type != kTfLiteFloat32) {
    4ce0:	7812      	ldrb	r2, [r2, #0]
    4ce2:	2a01      	cmp	r2, #1
    4ce4:	d00d      	beq.n	4d02 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xa6>
    4ce6:	461a      	mov	r2, r3
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    4ce8:	7d09      	ldrb	r1, [r1, #20]
    4cea:	f107 0318 	add.w	r3, r7, #24
    4cee:	9300      	str	r3, [sp, #0]
    4cf0:	f107 0314 	add.w	r3, r7, #20
    4cf4:	4c10      	ldr	r4, [pc, #64]	; (4d38 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xdc>)
    4cf6:	47a0      	blx	r4
    4cf8:	b938      	cbnz	r0, 4d0a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xae>
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
    4cfa:	697a      	ldr	r2, [r7, #20]
    4cfc:	69bb      	ldr	r3, [r7, #24]
    4cfe:	429a      	cmp	r2, r3
    4d00:	dc17      	bgt.n	4d32 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xd6>
  data->buffer_idx = -1;
    4d02:	f04f 33ff 	mov.w	r3, #4294967295
    4d06:	613b      	str	r3, [r7, #16]
  return kTfLiteOk;
    4d08:	2000      	movs	r0, #0
}
    4d0a:	b002      	add	sp, #8
    4d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return (image_size + stride - effective_filter_size) / stride;
    4d10:	eb0e 0504 	add.w	r5, lr, r4
    4d14:	eba5 050c 	sub.w	r5, r5, ip
    4d18:	fb95 f5f4 	sdiv	r5, r5, r4
    4d1c:	eb08 0609 	add.w	r6, r8, r9
    4d20:	eba6 060a 	sub.w	r6, r6, sl
    4d24:	fb96 f6f8 	sdiv	r6, r6, r8
    4d28:	e7be      	b.n	4ca8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0x4c>
      return 0;
    4d2a:	2500      	movs	r5, #0
    4d2c:	e7b7      	b.n	4c9e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0x42>
    4d2e:	2500      	movs	r5, #0
    4d30:	e7f4      	b.n	4d1c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xc0>
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
    4d32:	4b02      	ldr	r3, [pc, #8]	; (4d3c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xe0>)
    4d34:	4798      	blx	r3
    4d36:	bf00      	nop
    4d38:	00001e5d 	.word	0x00001e5d
    4d3c:	0001739d 	.word	0x0001739d

00004d40 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    4d40:	b530      	push	{r4, r5, lr}
    4d42:	b083      	sub	sp, #12
  TFLITE_DCHECK(node->user_data != nullptr);
    4d44:	690c      	ldr	r4, [r1, #16]
    4d46:	b184      	cbz	r4, 4d6a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    4d48:	694d      	ldr	r5, [r1, #20]
    4d4a:	b185      	cbz	r5, 4d6e <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
  return &context->tensors[node->inputs->data[index]];
    4d4c:	6882      	ldr	r2, [r0, #8]
  return &context->tensors[node->outputs->data[index]];
    4d4e:	684b      	ldr	r3, [r1, #4]
    4d50:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
    4d52:	6809      	ldr	r1, [r1, #0]
    4d54:	6849      	ldr	r1, [r1, #4]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
    4d56:	9400      	str	r4, [sp, #0]
    4d58:	eb02 1383 	add.w	r3, r2, r3, lsl #6
    4d5c:	eb02 1281 	add.w	r2, r2, r1, lsl #6
    4d60:	4629      	mov	r1, r5
    4d62:	4c04      	ldr	r4, [pc, #16]	; (4d74 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x34>)
    4d64:	47a0      	blx	r4

  return kTfLiteOk;
}
    4d66:	b003      	add	sp, #12
    4d68:	bd30      	pop	{r4, r5, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
    4d6a:	4b03      	ldr	r3, [pc, #12]	; (4d78 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x38>)
    4d6c:	4798      	blx	r3
  TFLITE_DCHECK(node->builtin_data != nullptr);
    4d6e:	4b02      	ldr	r3, [pc, #8]	; (4d78 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x38>)
    4d70:	4798      	blx	r3
    4d72:	bf00      	nop
    4d74:	00004c5d 	.word	0x00004c5d
    4d78:	0001739d 	.word	0x0001739d

00004d7c <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
    4d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d80:	b08e      	sub	sp, #56	; 0x38
  TFLITE_DCHECK(node->user_data != nullptr);
    4d82:	f8d1 8010 	ldr.w	r8, [r1, #16]
    4d86:	f1b8 0f00 	cmp.w	r8, #0
    4d8a:	d01d      	beq.n	4dc8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x4c>
    4d8c:	4607      	mov	r7, r0
  TFLITE_DCHECK(node->builtin_data != nullptr);
    4d8e:	6948      	ldr	r0, [r1, #20]
    4d90:	b1e0      	cbz	r0, 4dcc <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x50>
    4d92:	68be      	ldr	r6, [r7, #8]
    4d94:	680b      	ldr	r3, [r1, #0]
    4d96:	685c      	ldr	r4, [r3, #4]
    4d98:	01a4      	lsls	r4, r4, #6
    4d9a:	eb06 0904 	add.w	r9, r6, r4
  return &context->tensors[node->outputs->data[index]];
    4d9e:	684b      	ldr	r3, [r1, #4]
    4da0:	685d      	ldr	r5, [r3, #4]
    4da2:	eb06 1585 	add.w	r5, r6, r5, lsl #6
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
    4da6:	f8cd 8000 	str.w	r8, [sp]
    4daa:	462b      	mov	r3, r5
    4dac:	464a      	mov	r2, r9
    4dae:	4601      	mov	r1, r0
    4db0:	4638      	mov	r0, r7
    4db2:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 4e84 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x108>
    4db6:	47d0      	blx	sl
    4db8:	b918      	cbnz	r0, 4dc2 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x46>

  if (input->type == kTfLiteInt8) {
    4dba:	5d33      	ldrb	r3, [r6, r4]
    4dbc:	2b09      	cmp	r3, #9
    4dbe:	d007      	beq.n	4dd0 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x54>
          context, buffer_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
    }
  }
  return kTfLiteOk;
    4dc0:	2000      	movs	r0, #0
}
    4dc2:	b00e      	add	sp, #56	; 0x38
    4dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
    4dc8:	4b29      	ldr	r3, [pc, #164]	; (4e70 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
    4dca:	4798      	blx	r3
  TFLITE_DCHECK(node->builtin_data != nullptr);
    4dcc:	4b28      	ldr	r3, [pc, #160]	; (4e70 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
    4dce:	4798      	blx	r3
  if (tensor == nullptr) {
    4dd0:	f1b9 0f00 	cmp.w	r9, #0
    4dd4:	d03e      	beq.n	4e54 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xd8>
  TfLiteIntArray* dims = tensor->dims;
    4dd6:	f8d9 6008 	ldr.w	r6, [r9, #8]
  const int dims_size = dims->size;
    4dda:	6834      	ldr	r4, [r6, #0]
    size_ = dimensions_count;
    4ddc:	9402      	str	r4, [sp, #8]
    if (dimensions_count > kMaxSmallSize) {
    4dde:	2c05      	cmp	r4, #5
    4de0:	dd36      	ble.n	4e50 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xd4>
      dims_pointer_ = new int32[dimensions_count];
    4de2:	4b24      	ldr	r3, [pc, #144]	; (4e74 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
    4de4:	429c      	cmp	r4, r3
    4de6:	bf94      	ite	ls
    4de8:	00a0      	lslls	r0, r4, #2
    4dea:	f04f 30ff 	movhi.w	r0, #4294967295
    4dee:	4b22      	ldr	r3, [pc, #136]	; (4e78 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
    4df0:	4798      	blx	r3
    4df2:	9003      	str	r0, [sp, #12]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4df4:	00a2      	lsls	r2, r4, #2
    4df6:	1d31      	adds	r1, r6, #4
    4df8:	4b20      	ldr	r3, [pc, #128]	; (4e7c <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x100>)
    4dfa:	4798      	blx	r3
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    4dfc:	9b02      	ldr	r3, [sp, #8]
    4dfe:	2b04      	cmp	r3, #4
    4e00:	d128      	bne.n	4e54 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xd8>
  if (tensor == nullptr) {
    4e02:	2d00      	cmp	r5, #0
    4e04:	d02a      	beq.n	4e5c <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe0>
  TfLiteIntArray* dims = tensor->dims;
    4e06:	68ad      	ldr	r5, [r5, #8]
  const int dims_size = dims->size;
    4e08:	682c      	ldr	r4, [r5, #0]
    size_ = dimensions_count;
    4e0a:	9408      	str	r4, [sp, #32]
    if (dimensions_count > kMaxSmallSize) {
    4e0c:	2c05      	cmp	r4, #5
    4e0e:	dd23      	ble.n	4e58 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xdc>
      dims_pointer_ = new int32[dimensions_count];
    4e10:	4b18      	ldr	r3, [pc, #96]	; (4e74 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
    4e12:	429c      	cmp	r4, r3
    4e14:	bf94      	ite	ls
    4e16:	00a0      	lslls	r0, r4, #2
    4e18:	f04f 30ff 	movhi.w	r0, #4294967295
    4e1c:	4b16      	ldr	r3, [pc, #88]	; (4e78 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
    4e1e:	4798      	blx	r3
    4e20:	9009      	str	r0, [sp, #36]	; 0x24
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4e22:	00a2      	lsls	r2, r4, #2
    4e24:	1d29      	adds	r1, r5, #4
    4e26:	4b15      	ldr	r3, [pc, #84]	; (4e7c <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x100>)
    4e28:	4798      	blx	r3
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    4e2a:	9b08      	ldr	r3, [sp, #32]
    4e2c:	2b04      	cmp	r3, #4
    4e2e:	d115      	bne.n	4e5c <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    4e30:	990c      	ldr	r1, [sp, #48]	; 0x30
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    4e32:	9b06      	ldr	r3, [sp, #24]
    4e34:	4299      	cmp	r1, r3
    4e36:	d113      	bne.n	4e60 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe4>
        arm_avgpool_s8_get_buffer_size(output_width, depth);
    4e38:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4e3a:	4b11      	ldr	r3, [pc, #68]	; (4e80 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x104>)
    4e3c:	4798      	blx	r3
    if (buffer_size > 0) {
    4e3e:	1e01      	subs	r1, r0, #0
    4e40:	dd10      	ble.n	4e64 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe8>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
    4e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4e44:	f108 0210 	add.w	r2, r8, #16
    4e48:	4638      	mov	r0, r7
    4e4a:	4798      	blx	r3
    4e4c:	b170      	cbz	r0, 4e6c <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xf0>
    4e4e:	e7b8      	b.n	4dc2 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x46>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4e50:	a803      	add	r0, sp, #12
    4e52:	e7cf      	b.n	4df4 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x78>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    4e54:	4b06      	ldr	r3, [pc, #24]	; (4e70 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
    4e56:	4798      	blx	r3
    4e58:	a809      	add	r0, sp, #36	; 0x24
    4e5a:	e7e2      	b.n	4e22 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa6>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    4e5c:	4b04      	ldr	r3, [pc, #16]	; (4e70 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
    4e5e:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    4e60:	4b03      	ldr	r3, [pc, #12]	; (4e70 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
    4e62:	4798      	blx	r3
      data->buffer_idx = -1;
    4e64:	f04f 33ff 	mov.w	r3, #4294967295
    4e68:	f8c8 3010 	str.w	r3, [r8, #16]
  return kTfLiteOk;
    4e6c:	2000      	movs	r0, #0
    4e6e:	e7a8      	b.n	4dc2 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x46>
    4e70:	0001739d 	.word	0x0001739d
    4e74:	1ffffffe 	.word	0x1ffffffe
    4e78:	0000cd6d 	.word	0x0000cd6d
    4e7c:	00018121 	.word	0x00018121
    4e80:	0000ba19 	.word	0x0000ba19
    4e84:	00004c5d 	.word	0x00004c5d

00004e88 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
    4e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e8c:	b0f1      	sub	sp, #452	; 0x1c4
    4e8e:	4680      	mov	r8, r0
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
    4e90:	694f      	ldr	r7, [r1, #20]

  const OpData& data = *(static_cast<const OpData*>(node->user_data));
    4e92:	690e      	ldr	r6, [r1, #16]
  return &context->tensors[node->inputs->data[index]];
    4e94:	6882      	ldr	r2, [r0, #8]
    4e96:	680b      	ldr	r3, [r1, #0]
    4e98:	685b      	ldr	r3, [r3, #4]
    4e9a:	019b      	lsls	r3, r3, #6
    4e9c:	18d5      	adds	r5, r2, r3
  return &context->tensors[node->outputs->data[index]];
    4e9e:	6849      	ldr	r1, [r1, #4]
    4ea0:	684c      	ldr	r4, [r1, #4]
    4ea2:	eb02 1484 	add.w	r4, r2, r4, lsl #6

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  // Inputs and outputs share the same type, guaranteed by the converter.
  switch (input->type) {
    4ea6:	5cd0      	ldrb	r0, [r2, r3]
    4ea8:	2803      	cmp	r0, #3
    4eaa:	f000 8217 	beq.w	52dc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x454>
    4eae:	2809      	cmp	r0, #9
    4eb0:	f000 8214 	beq.w	52dc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x454>
    4eb4:	2801      	cmp	r0, #1
    4eb6:	d00b      	beq.n	4ed0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x48>
    case kTfLiteUInt8:
    case kTfLiteInt8:
      AverageEvalQuantized(context, node, params, data, input, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
    4eb8:	f8d8 4014 	ldr.w	r4, [r8, #20]
    4ebc:	4b95      	ldr	r3, [pc, #596]	; (5114 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x28c>)
    4ebe:	4798      	blx	r3
    4ec0:	4602      	mov	r2, r0
    4ec2:	4995      	ldr	r1, [pc, #596]	; (5118 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x290>)
    4ec4:	4640      	mov	r0, r8
    4ec6:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
    4ec8:	2001      	movs	r0, #1
  }
  return kTfLiteOk;
}
    4eca:	b071      	add	sp, #452	; 0x1c4
    4ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  CalculateActivationRange(params->activation, &activation_min,
    4ed0:	7d3b      	ldrb	r3, [r7, #20]
  if (activation == kTfLiteActRelu) {
    4ed2:	2b01      	cmp	r3, #1
    4ed4:	f000 80f1 	beq.w	50ba <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x232>
  } else if (activation == kTfLiteActRelu6) {
    4ed8:	2b03      	cmp	r3, #3
    4eda:	f000 80f3 	beq.w	50c4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x23c>
  } else if (activation == kTfLiteActReluN1To1) {
    4ede:	2b02      	cmp	r3, #2
    4ee0:	f000 80f5 	beq.w	50ce <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x246>
    *activation_max = std::numeric_limits<T>::max();
    4ee4:	4b8d      	ldr	r3, [pc, #564]	; (511c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x294>)
    4ee6:	931e      	str	r3, [sp, #120]	; 0x78
    *activation_min = std::numeric_limits<T>::lowest();
    4ee8:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    4eec:	931d      	str	r3, [sp, #116]	; 0x74
  op_params.stride_height = params->stride_height;
    4eee:	68bb      	ldr	r3, [r7, #8]
    4ef0:	9326      	str	r3, [sp, #152]	; 0x98
  op_params.stride_width = params->stride_width;
    4ef2:	687b      	ldr	r3, [r7, #4]
    4ef4:	9327      	str	r3, [sp, #156]	; 0x9c
  op_params.filter_height = params->filter_height;
    4ef6:	693b      	ldr	r3, [r7, #16]
    4ef8:	9328      	str	r3, [sp, #160]	; 0xa0
  op_params.filter_width = params->filter_width;
    4efa:	68fb      	ldr	r3, [r7, #12]
    4efc:	9323      	str	r3, [sp, #140]	; 0x8c
  op_params.padding_values.height = data.padding.height;
    4efe:	6873      	ldr	r3, [r6, #4]
    4f00:	9329      	str	r3, [sp, #164]	; 0xa4
  op_params.padding_values.width = data.padding.width;
    4f02:	6833      	ldr	r3, [r6, #0]
    4f04:	932a      	str	r3, [sp, #168]	; 0xa8
  if (tensor == nullptr) {
    4f06:	2d00      	cmp	r5, #0
    4f08:	f000 80e7 	beq.w	50da <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x252>
  const int dims_size = dims->size;
    4f0c:	68af      	ldr	r7, [r5, #8]
    4f0e:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    4f12:	965e      	str	r6, [sp, #376]	; 0x178
    if (dimensions_count > kMaxSmallSize) {
    4f14:	2e05      	cmp	r6, #5
    4f16:	f340 80e4 	ble.w	50e2 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x25a>
      dims_pointer_ = new int32[dimensions_count];
    4f1a:	4b81      	ldr	r3, [pc, #516]	; (5120 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x298>)
    4f1c:	429e      	cmp	r6, r3
    4f1e:	bf94      	ite	ls
    4f20:	00b0      	lslls	r0, r6, #2
    4f22:	f04f 30ff 	movhi.w	r0, #4294967295
    4f26:	4b7f      	ldr	r3, [pc, #508]	; (5124 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x29c>)
    4f28:	4798      	blx	r3
    4f2a:	905f      	str	r0, [sp, #380]	; 0x17c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4f2c:	00b2      	lsls	r2, r6, #2
    4f2e:	4639      	mov	r1, r7
    4f30:	4b7d      	ldr	r3, [pc, #500]	; (5128 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2a0>)
    4f32:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    4f34:	686b      	ldr	r3, [r5, #4]
    4f36:	932b      	str	r3, [sp, #172]	; 0xac
  if (tensor == nullptr) {
    4f38:	2c00      	cmp	r4, #0
    4f3a:	f000 80d4 	beq.w	50e6 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  const int dims_size = dims->size;
    4f3e:	68a6      	ldr	r6, [r4, #8]
    4f40:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    4f44:	9558      	str	r5, [sp, #352]	; 0x160
    if (dimensions_count > kMaxSmallSize) {
    4f46:	2d05      	cmp	r5, #5
    4f48:	f340 80d4 	ble.w	50f4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x26c>
      dims_pointer_ = new int32[dimensions_count];
    4f4c:	4b74      	ldr	r3, [pc, #464]	; (5120 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x298>)
    4f4e:	429d      	cmp	r5, r3
    4f50:	bf94      	ite	ls
    4f52:	00a8      	lslls	r0, r5, #2
    4f54:	f04f 30ff 	movhi.w	r0, #4294967295
    4f58:	4b72      	ldr	r3, [pc, #456]	; (5124 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x29c>)
    4f5a:	4798      	blx	r3
    4f5c:	9059      	str	r0, [sp, #356]	; 0x164
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4f5e:	00aa      	lsls	r2, r5, #2
    4f60:	4631      	mov	r1, r6
    4f62:	4b71      	ldr	r3, [pc, #452]	; (5128 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2a0>)
    4f64:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    4f66:	6862      	ldr	r2, [r4, #4]

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    4f68:	9b5e      	ldr	r3, [sp, #376]	; 0x178
    4f6a:	2b04      	cmp	r3, #4
    4f6c:	f040 80c0 	bne.w	50f0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x268>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    4f70:	9b58      	ldr	r3, [sp, #352]	; 0x160
    4f72:	2b04      	cmp	r3, #4
    4f74:	f040 80c0 	bne.w	50f8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x270>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    4f78:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
    4f7a:	9312      	str	r3, [sp, #72]	; 0x48
    4f7c:	9959      	ldr	r1, [sp, #356]	; 0x164
    4f7e:	911a      	str	r1, [sp, #104]	; 0x68
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    4f80:	4299      	cmp	r1, r3
    4f82:	f040 80bb 	bne.w	50fc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x274>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    4f86:	f8dd a188 	ldr.w	sl, [sp, #392]	; 0x188
    4f8a:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    4f8c:	9314      	str	r3, [sp, #80]	; 0x50
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    4f8e:	4553      	cmp	r3, sl
    4f90:	f040 80b6 	bne.w	5100 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x278>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    4f94:	9b60      	ldr	r3, [sp, #384]	; 0x180
    4f96:	461d      	mov	r5, r3
    4f98:	9311      	str	r3, [sp, #68]	; 0x44
    4f9a:	f8dd 9184 	ldr.w	r9, [sp, #388]	; 0x184
    4f9e:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    4fa0:	4618      	mov	r0, r3
    4fa2:	9319      	str	r3, [sp, #100]	; 0x64
    4fa4:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    4fa6:	9318      	str	r3, [sp, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
    4fa8:	991a      	ldr	r1, [sp, #104]	; 0x68
    4faa:	2900      	cmp	r1, #0
    4fac:	f340 8194 	ble.w	52d8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x450>
    4fb0:	4619      	mov	r1, r3
    4fb2:	fb03 f300 	mul.w	r3, r3, r0
    4fb6:	009b      	lsls	r3, r3, #2
    4fb8:	9c14      	ldr	r4, [sp, #80]	; 0x50
    4fba:	fb04 f303 	mul.w	r3, r4, r3
    4fbe:	9336      	str	r3, [sp, #216]	; 0xd8
    4fc0:	9230      	str	r2, [sp, #192]	; 0xc0
    4fc2:	9525      	str	r5, [sp, #148]	; 0x94
    4fc4:	460b      	mov	r3, r1
    4fc6:	fb03 f304 	mul.w	r3, r3, r4
    4fca:	009b      	lsls	r3, r3, #2
    4fcc:	9334      	str	r3, [sp, #208]	; 0xd0
    4fce:	00a3      	lsls	r3, r4, #2
    4fd0:	9337      	str	r3, [sp, #220]	; 0xdc
    4fd2:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
    4fd6:	fb0a f309 	mul.w	r3, sl, r9
    4fda:	009b      	lsls	r3, r3, #2
    4fdc:	930f      	str	r3, [sp, #60]	; 0x3c
    4fde:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
    4fe2:	2300      	movs	r3, #0
    4fe4:	932f      	str	r3, [sp, #188]	; 0xbc
    4fe6:	930d      	str	r3, [sp, #52]	; 0x34
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          float total = 0.f;
    4fe8:	2300      	movs	r3, #0
    4fea:	931f      	str	r3, [sp, #124]	; 0x7c
    4fec:	464f      	mov	r7, r9
    4fee:	465b      	mov	r3, fp
    4ff0:	46d3      	mov	fp, sl
    4ff2:	469a      	mov	sl, r3
    for (int out_y = 0; out_y < output_height; ++out_y) {
    4ff4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4ff6:	2b00      	cmp	r3, #0
    4ff8:	f340 815f 	ble.w	52ba <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x432>
    4ffc:	9b26      	ldr	r3, [sp, #152]	; 0x98
    4ffe:	9333      	str	r3, [sp, #204]	; 0xcc
    5000:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
    5004:	9a25      	ldr	r2, [sp, #148]	; 0x94
    5006:	189a      	adds	r2, r3, r2
    5008:	922e      	str	r2, [sp, #184]	; 0xb8
    500a:	425b      	negs	r3, r3
    500c:	9317      	str	r3, [sp, #92]	; 0x5c
    500e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    5010:	9331      	str	r3, [sp, #196]	; 0xc4
    5012:	2300      	movs	r3, #0
    5014:	9321      	str	r3, [sp, #132]	; 0x84
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              total +=
    5016:	f8df 9120 	ldr.w	r9, [pc, #288]	; 5138 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2b0>
    501a:	46d0      	mov	r8, sl
    501c:	46da      	mov	sl, fp
    501e:	46bb      	mov	fp, r7
      for (int out_x = 0; out_x < output_width; ++out_x) {
    5020:	9b18      	ldr	r3, [sp, #96]	; 0x60
    5022:	2b00      	cmp	r3, #0
    5024:	f340 8134 	ble.w	5290 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x408>
    5028:	992e      	ldr	r1, [sp, #184]	; 0xb8
    502a:	9a25      	ldr	r2, [sp, #148]	; 0x94
    502c:	1a8b      	subs	r3, r1, r2
    502e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5032:	461a      	mov	r2, r3
    5034:	931c      	str	r3, [sp, #112]	; 0x70
    5036:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    5038:	4618      	mov	r0, r3
    503a:	4288      	cmp	r0, r1
    503c:	bfa8      	it	ge
    503e:	4608      	movge	r0, r1
    5040:	900c      	str	r0, [sp, #48]	; 0x30
    5042:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    5044:	9335      	str	r3, [sp, #212]	; 0xd4
    5046:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	; 0xa8
    504a:	9924      	ldr	r1, [sp, #144]	; 0x90
    504c:	18c8      	adds	r0, r1, r3
    504e:	902c      	str	r0, [sp, #176]	; 0xb0
    5050:	425b      	negs	r3, r3
    5052:	9316      	str	r3, [sp, #88]	; 0x58
    5054:	9222      	str	r2, [sp, #136]	; 0x88
    5056:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    5058:	982f      	ldr	r0, [sp, #188]	; 0xbc
    505a:	4403      	add	r3, r0
    505c:	4413      	add	r3, r2
    505e:	fb01 f303 	mul.w	r3, r1, r3
    5062:	9332      	str	r3, [sp, #200]	; 0xc8
              std::min(params.filter_height, input_height - in_y_origin);
    5064:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    5066:	932d      	str	r3, [sp, #180]	; 0xb4
    5068:	2300      	movs	r3, #0
    506a:	9320      	str	r3, [sp, #128]	; 0x80
    506c:	465e      	mov	r6, fp
    506e:	46d3      	mov	fp, sl
    5070:	46c2      	mov	sl, r8
        for (int channel = 0; channel < depth; ++channel) {
    5072:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5074:	2b00      	cmp	r3, #0
    5076:	f340 80f6 	ble.w	5266 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x3de>
              (out_x * stride_width) - params.padding_values.width;
    507a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    507c:	4619      	mov	r1, r3
    507e:	931b      	str	r3, [sp, #108]	; 0x6c
    5080:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
    5082:	9824      	ldr	r0, [sp, #144]	; 0x90
    5084:	1a22      	subs	r2, r4, r0
    5086:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    508a:	4610      	mov	r0, r2
    508c:	920b      	str	r2, [sp, #44]	; 0x2c
    508e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    5090:	4615      	mov	r5, r2
    5092:	42a5      	cmp	r5, r4
    5094:	bfa8      	it	ge
    5096:	4625      	movge	r5, r4
    5098:	950a      	str	r5, [sp, #40]	; 0x28
    509a:	9c32      	ldr	r4, [sp, #200]	; 0xc8
    509c:	18e3      	adds	r3, r4, r3
    509e:	4602      	mov	r2, r0
    50a0:	4403      	add	r3, r0
    50a2:	982b      	ldr	r0, [sp, #172]	; 0xac
    50a4:	fb0a 0303 	mla	r3, sl, r3, r0
    50a8:	9313      	str	r3, [sp, #76]	; 0x4c
              std::min(params.filter_width, input_width - in_x_origin);
    50aa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    50ac:	9315      	str	r3, [sp, #84]	; 0x54
    50ae:	f04f 0800 	mov.w	r8, #0
    50b2:	1c53      	adds	r3, r2, #1
    50b4:	440b      	add	r3, r1
    50b6:	9310      	str	r3, [sp, #64]	; 0x40
    50b8:	e0b6      	b.n	5228 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x3a0>
    *activation_max = std::numeric_limits<T>::max();
    50ba:	4b18      	ldr	r3, [pc, #96]	; (511c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x294>)
    50bc:	931e      	str	r3, [sp, #120]	; 0x78
    *activation_min = 0;
    50be:	2300      	movs	r3, #0
    50c0:	931d      	str	r3, [sp, #116]	; 0x74
    50c2:	e714      	b.n	4eee <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x66>
    *activation_max = 6;
    50c4:	4b19      	ldr	r3, [pc, #100]	; (512c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2a4>)
    50c6:	931e      	str	r3, [sp, #120]	; 0x78
    *activation_min = 0;
    50c8:	2300      	movs	r3, #0
    50ca:	931d      	str	r3, [sp, #116]	; 0x74
    50cc:	e70f      	b.n	4eee <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x66>
    *activation_max = 1;
    50ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    50d2:	931e      	str	r3, [sp, #120]	; 0x78
    *activation_min = -1;
    50d4:	4b16      	ldr	r3, [pc, #88]	; (5130 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2a8>)
    50d6:	931d      	str	r3, [sp, #116]	; 0x74
    50d8:	e709      	b.n	4eee <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x66>
  RuntimeShape() : size_(0) {}
    50da:	2300      	movs	r3, #0
    50dc:	935e      	str	r3, [sp, #376]	; 0x178
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    50de:	932b      	str	r3, [sp, #172]	; 0xac
    50e0:	e72a      	b.n	4f38 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xb0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    50e2:	a85f      	add	r0, sp, #380	; 0x17c
    50e4:	e722      	b.n	4f2c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa4>
  RuntimeShape() : size_(0) {}
    50e6:	2300      	movs	r3, #0
    50e8:	9358      	str	r3, [sp, #352]	; 0x160
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    50ea:	9b5e      	ldr	r3, [sp, #376]	; 0x178
    50ec:	2b04      	cmp	r3, #4
    50ee:	d003      	beq.n	50f8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x270>
    50f0:	4b10      	ldr	r3, [pc, #64]	; (5134 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    50f2:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    50f4:	a859      	add	r0, sp, #356	; 0x164
    50f6:	e732      	b.n	4f5e <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xd6>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    50f8:	4b0e      	ldr	r3, [pc, #56]	; (5134 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    50fa:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    50fc:	4b0d      	ldr	r3, [pc, #52]	; (5134 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    50fe:	4798      	blx	r3
    5100:	4b0c      	ldr	r3, [pc, #48]	; (5134 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    5102:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    5104:	4b0b      	ldr	r3, [pc, #44]	; (5134 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    5106:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    5108:	4b0a      	ldr	r3, [pc, #40]	; (5134 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    510a:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    510c:	4b09      	ldr	r3, [pc, #36]	; (5134 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    510e:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5110:	4b08      	ldr	r3, [pc, #32]	; (5134 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    5112:	4798      	blx	r3
    5114:	00001ab5 	.word	0x00001ab5
    5118:	0003bdc8 	.word	0x0003bdc8
    511c:	7f7fffff 	.word	0x7f7fffff
    5120:	1ffffffe 	.word	0x1ffffffe
    5124:	0000cd6d 	.word	0x0000cd6d
    5128:	00018121 	.word	0x00018121
    512c:	40c00000 	.word	0x40c00000
    5130:	bf800000 	.word	0xbf800000
    5134:	0001739d 	.word	0x0001739d
    5138:	00015b31 	.word	0x00015b31
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    513c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    513e:	3301      	adds	r3, #1
    5140:	9309      	str	r3, [sp, #36]	; 0x24
    5142:	9a07      	ldr	r2, [sp, #28]
    5144:	990f      	ldr	r1, [sp, #60]	; 0x3c
    5146:	440a      	add	r2, r1
    5148:	9207      	str	r2, [sp, #28]
    514a:	9a08      	ldr	r2, [sp, #32]
    514c:	3201      	adds	r2, #1
    514e:	9208      	str	r2, [sp, #32]
    5150:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5152:	4293      	cmp	r3, r2
    5154:	da32      	bge.n	51bc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x334>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    5156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5158:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    515a:	4293      	cmp	r3, r2
    515c:	ddee      	ble.n	513c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2b4>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    515e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5160:	2b00      	cmp	r3, #0
    5162:	dbcf      	blt.n	5104 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x27c>
    5164:	9a12      	ldr	r2, [sp, #72]	; 0x48
    5166:	429a      	cmp	r2, r3
    5168:	ddcc      	ble.n	5104 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x27c>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    516a:	9b08      	ldr	r3, [sp, #32]
    516c:	2b00      	cmp	r3, #0
    516e:	dbcb      	blt.n	5108 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x280>
    5170:	9a11      	ldr	r2, [sp, #68]	; 0x44
    5172:	429a      	cmp	r2, r3
    5174:	ddc8      	ble.n	5108 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x280>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5178:	2b00      	cmp	r3, #0
    517a:	dbc7      	blt.n	510c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x284>
    517c:	429e      	cmp	r6, r3
    517e:	ddc5      	ble.n	510c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x284>
    5180:	9c10      	ldr	r4, [sp, #64]	; 0x40
    5182:	9d07      	ldr	r5, [sp, #28]
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5184:	f1b8 0f00 	cmp.w	r8, #0
    5188:	dbc2      	blt.n	5110 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x288>
    518a:	45c3      	cmp	fp, r8
    518c:	ddc0      	ble.n	5110 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x288>
              total +=
    518e:	6829      	ldr	r1, [r5, #0]
    5190:	9805      	ldr	r0, [sp, #20]
    5192:	47c8      	blx	r9
    5194:	9005      	str	r0, [sp, #20]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
              filter_count++;
    5196:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    519a:	9806      	ldr	r0, [sp, #24]
    519c:	47c8      	blx	r9
    519e:	9006      	str	r0, [sp, #24]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    51a0:	42a7      	cmp	r7, r4
    51a2:	d0cb      	beq.n	513c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2b4>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    51a4:	2c00      	cmp	r4, #0
    51a6:	dbb1      	blt.n	510c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x284>
    51a8:	1c63      	adds	r3, r4, #1
    51aa:	4455      	add	r5, sl
    51ac:	42a6      	cmp	r6, r4
    51ae:	ddad      	ble.n	510c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x284>
    51b0:	461c      	mov	r4, r3
    51b2:	e7e7      	b.n	5184 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2fc>
          float filter_count = 0;
    51b4:	2300      	movs	r3, #0
    51b6:	9306      	str	r3, [sp, #24]
          float total = 0.f;
    51b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    51ba:	9305      	str	r3, [sp, #20]
            }
          }
          const float average = total / filter_count;
    51bc:	9906      	ldr	r1, [sp, #24]
    51be:	9805      	ldr	r0, [sp, #20]
    51c0:	4b8b      	ldr	r3, [pc, #556]	; (53f0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x568>)
    51c2:	4798      	blx	r3
    51c4:	4604      	mov	r4, r0
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    51c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    51c8:	2b00      	cmp	r3, #0
    51ca:	db44      	blt.n	5256 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x3ce>
    51cc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    51ce:	429a      	cmp	r2, r3
    51d0:	dd41      	ble.n	5256 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x3ce>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    51d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
    51d4:	2b00      	cmp	r3, #0
    51d6:	db40      	blt.n	525a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x3d2>
    51d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
    51da:	429a      	cmp	r2, r3
    51dc:	dd3d      	ble.n	525a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x3d2>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    51de:	9b20      	ldr	r3, [sp, #128]	; 0x80
    51e0:	2b00      	cmp	r3, #0
    51e2:	db3c      	blt.n	525e <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x3d6>
    51e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    51e6:	429a      	cmp	r2, r3
    51e8:	dd39      	ble.n	525e <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x3d6>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    51ea:	f1b8 0f00 	cmp.w	r8, #0
    51ee:	db38      	blt.n	5262 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x3da>
    51f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    51f2:	4543      	cmp	r3, r8
    51f4:	dd35      	ble.n	5262 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x3da>
      if (__a < __b)
    51f6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    51f8:	4629      	mov	r1, r5
    51fa:	4b7e      	ldr	r3, [pc, #504]	; (53f4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x56c>)
    51fc:	4798      	blx	r3
    51fe:	b100      	cbz	r0, 5202 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x37a>
	return __b;
    5200:	462c      	mov	r4, r5
      if (__b < __a)
    5202:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    5204:	4629      	mov	r1, r5
    5206:	4620      	mov	r0, r4
    5208:	4b7b      	ldr	r3, [pc, #492]	; (53f8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x570>)
    520a:	4798      	blx	r3
    520c:	b100      	cbz	r0, 5210 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x388>
	return __b;
    520e:	462c      	mov	r4, r5
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    5210:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5212:	f843 4b04 	str.w	r4, [r3], #4
    5216:	9315      	str	r3, [sp, #84]	; 0x54
        for (int channel = 0; channel < depth; ++channel) {
    5218:	f108 0801 	add.w	r8, r8, #1
    521c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    521e:	3304      	adds	r3, #4
    5220:	9313      	str	r3, [sp, #76]	; 0x4c
    5222:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5224:	4598      	cmp	r8, r3
    5226:	d01e      	beq.n	5266 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x3de>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    5228:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    522a:	990c      	ldr	r1, [sp, #48]	; 0x30
    522c:	428a      	cmp	r2, r1
    522e:	dac1      	bge.n	51b4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x32c>
    5230:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    5232:	9922      	ldr	r1, [sp, #136]	; 0x88
    5234:	440b      	add	r3, r1
    5236:	9308      	str	r3, [sp, #32]
    5238:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    523a:	9307      	str	r3, [sp, #28]
    523c:	9209      	str	r2, [sp, #36]	; 0x24
    523e:	2300      	movs	r3, #0
    5240:	9306      	str	r3, [sp, #24]
    5242:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    5244:	9305      	str	r3, [sp, #20]
              const int in_x = in_x_origin + filter_x;
    5246:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    5248:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    524a:	4413      	add	r3, r2
    524c:	930e      	str	r3, [sp, #56]	; 0x38
    524e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5250:	9a16      	ldr	r2, [sp, #88]	; 0x58
    5252:	189f      	adds	r7, r3, r2
    5254:	e77f      	b.n	5156 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2ce>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    5256:	4b69      	ldr	r3, [pc, #420]	; (53fc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x574>)
    5258:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    525a:	4b68      	ldr	r3, [pc, #416]	; (53fc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x574>)
    525c:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    525e:	4b67      	ldr	r3, [pc, #412]	; (53fc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x574>)
    5260:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5262:	4b66      	ldr	r3, [pc, #408]	; (53fc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x574>)
    5264:	4798      	blx	r3
      for (int out_x = 0; out_x < output_width; ++out_x) {
    5266:	9b20      	ldr	r3, [sp, #128]	; 0x80
    5268:	3301      	adds	r3, #1
    526a:	9320      	str	r3, [sp, #128]	; 0x80
    526c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    526e:	9937      	ldr	r1, [sp, #220]	; 0xdc
    5270:	440a      	add	r2, r1
    5272:	922d      	str	r2, [sp, #180]	; 0xb4
    5274:	992c      	ldr	r1, [sp, #176]	; 0xb0
    5276:	9a35      	ldr	r2, [sp, #212]	; 0xd4
    5278:	1a89      	subs	r1, r1, r2
    527a:	912c      	str	r1, [sp, #176]	; 0xb0
    527c:	9916      	ldr	r1, [sp, #88]	; 0x58
    527e:	4411      	add	r1, r2
    5280:	9116      	str	r1, [sp, #88]	; 0x58
    5282:	9a18      	ldr	r2, [sp, #96]	; 0x60
    5284:	4293      	cmp	r3, r2
    5286:	f47f aef4 	bne.w	5072 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x1ea>
    528a:	46d0      	mov	r8, sl
    528c:	46da      	mov	sl, fp
    528e:	46b3      	mov	fp, r6
    for (int out_y = 0; out_y < output_height; ++out_y) {
    5290:	9b21      	ldr	r3, [sp, #132]	; 0x84
    5292:	3301      	adds	r3, #1
    5294:	9321      	str	r3, [sp, #132]	; 0x84
    5296:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    5298:	9934      	ldr	r1, [sp, #208]	; 0xd0
    529a:	440a      	add	r2, r1
    529c:	9231      	str	r2, [sp, #196]	; 0xc4
    529e:	992e      	ldr	r1, [sp, #184]	; 0xb8
    52a0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    52a2:	1a89      	subs	r1, r1, r2
    52a4:	912e      	str	r1, [sp, #184]	; 0xb8
    52a6:	9917      	ldr	r1, [sp, #92]	; 0x5c
    52a8:	4411      	add	r1, r2
    52aa:	9117      	str	r1, [sp, #92]	; 0x5c
    52ac:	9a19      	ldr	r2, [sp, #100]	; 0x64
    52ae:	4293      	cmp	r3, r2
    52b0:	f47f aeb6 	bne.w	5020 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x198>
    52b4:	465f      	mov	r7, fp
    52b6:	46d3      	mov	fp, sl
    52b8:	46c2      	mov	sl, r8
  for (int batch = 0; batch < batches; ++batch) {
    52ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    52bc:	3301      	adds	r3, #1
    52be:	930d      	str	r3, [sp, #52]	; 0x34
    52c0:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    52c2:	9936      	ldr	r1, [sp, #216]	; 0xd8
    52c4:	440a      	add	r2, r1
    52c6:	9230      	str	r2, [sp, #192]	; 0xc0
    52c8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
    52ca:	9925      	ldr	r1, [sp, #148]	; 0x94
    52cc:	440a      	add	r2, r1
    52ce:	922f      	str	r2, [sp, #188]	; 0xbc
    52d0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    52d2:	4293      	cmp	r3, r2
    52d4:	f47f ae8e 	bne.w	4ff4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x16c>
  return kTfLiteOk;
    52d8:	2000      	movs	r0, #0
    52da:	e5f6      	b.n	4eca <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x42>
  TFLITE_DCHECK(input->type == kTfLiteUInt8 || input->type == kTfLiteInt8);
    52dc:	2803      	cmp	r0, #3
    52de:	f000 8097 	beq.w	5410 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x588>
    52e2:	2809      	cmp	r0, #9
    52e4:	f040 8082 	bne.w	53ec <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x564>
  if (tensor == nullptr) {
    52e8:	2d00      	cmp	r5, #0
    52ea:	f000 8242 	beq.w	5772 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x8ea>
  TfLiteIntArray* dims = tensor->dims;
    52ee:	f8d5 a008 	ldr.w	sl, [r5, #8]
  const int dims_size = dims->size;
    52f2:	f8da 9000 	ldr.w	r9, [sl]
    size_ = dimensions_count;
    52f6:	f8cd 9118 	str.w	r9, [sp, #280]	; 0x118
    if (dimensions_count > kMaxSmallSize) {
    52fa:	f1b9 0f05 	cmp.w	r9, #5
    52fe:	f340 8236 	ble.w	576e <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x8e6>
      dims_pointer_ = new int32[dimensions_count];
    5302:	4b3f      	ldr	r3, [pc, #252]	; (5400 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x578>)
    5304:	4599      	cmp	r9, r3
    5306:	bf94      	ite	ls
    5308:	ea4f 0089 	movls.w	r0, r9, lsl #2
    530c:	f04f 30ff 	movhi.w	r0, #4294967295
    5310:	4b3c      	ldr	r3, [pc, #240]	; (5404 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x57c>)
    5312:	4798      	blx	r3
    5314:	9047      	str	r0, [sp, #284]	; 0x11c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    5316:	ea4f 0289 	mov.w	r2, r9, lsl #2
    531a:	f10a 0104 	add.w	r1, sl, #4
    531e:	4b3a      	ldr	r3, [pc, #232]	; (5408 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x580>)
    5320:	4798      	blx	r3
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    5322:	9b46      	ldr	r3, [sp, #280]	; 0x118
    5324:	2b04      	cmp	r3, #4
    5326:	f040 8224 	bne.w	5772 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x8ea>
  if (tensor == nullptr) {
    532a:	2c00      	cmp	r4, #0
    532c:	f000 8225 	beq.w	577a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x8f2>
  TfLiteIntArray* dims = tensor->dims;
    5330:	f8d4 a008 	ldr.w	sl, [r4, #8]
  const int dims_size = dims->size;
    5334:	f8da 9000 	ldr.w	r9, [sl]
    size_ = dimensions_count;
    5338:	f8cd 9130 	str.w	r9, [sp, #304]	; 0x130
    if (dimensions_count > kMaxSmallSize) {
    533c:	f1b9 0f05 	cmp.w	r9, #5
    5340:	f340 8219 	ble.w	5776 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x8ee>
      dims_pointer_ = new int32[dimensions_count];
    5344:	4b2e      	ldr	r3, [pc, #184]	; (5400 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x578>)
    5346:	4599      	cmp	r9, r3
    5348:	bf94      	ite	ls
    534a:	ea4f 0089 	movls.w	r0, r9, lsl #2
    534e:	f04f 30ff 	movhi.w	r0, #4294967295
    5352:	4b2c      	ldr	r3, [pc, #176]	; (5404 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x57c>)
    5354:	4798      	blx	r3
    5356:	904d      	str	r0, [sp, #308]	; 0x134
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    5358:	ea4f 0289 	mov.w	r2, r9, lsl #2
    535c:	f10a 0104 	add.w	r1, sl, #4
    5360:	4b29      	ldr	r3, [pc, #164]	; (5408 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x580>)
    5362:	4798      	blx	r3
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    5364:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    5366:	2b04      	cmp	r3, #4
    5368:	f040 8207 	bne.w	577a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x8f2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    536c:	9a50      	ldr	r2, [sp, #320]	; 0x140
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    536e:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    5370:	429a      	cmp	r2, r3
    5372:	f040 8204 	bne.w	577e <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x8f6>
    input_dims.n = 1;
    5376:	2301      	movs	r3, #1
    5378:	933a      	str	r3, [sp, #232]	; 0xe8
    input_dims.h = input_shape.Dims(1);
    537a:	9948      	ldr	r1, [sp, #288]	; 0x120
    537c:	913b      	str	r1, [sp, #236]	; 0xec
    input_dims.w = input_shape.Dims(2);
    537e:	9949      	ldr	r1, [sp, #292]	; 0x124
    5380:	913c      	str	r1, [sp, #240]	; 0xf0
    input_dims.c = depth;
    5382:	923d      	str	r2, [sp, #244]	; 0xf4
    output_dims.n = 1;
    5384:	933e      	str	r3, [sp, #248]	; 0xf8
    output_dims.h = output_shape.Dims(1);
    5386:	994e      	ldr	r1, [sp, #312]	; 0x138
    5388:	913f      	str	r1, [sp, #252]	; 0xfc
    output_dims.w = output_shape.Dims(2);
    538a:	994f      	ldr	r1, [sp, #316]	; 0x13c
    538c:	9140      	str	r1, [sp, #256]	; 0x100
    output_dims.c = depth;
    538e:	9241      	str	r2, [sp, #260]	; 0x104
    pool_params.stride.h = params->stride_height;
    5390:	68ba      	ldr	r2, [r7, #8]
    5392:	9253      	str	r2, [sp, #332]	; 0x14c
    pool_params.stride.w = params->stride_width;
    5394:	687a      	ldr	r2, [r7, #4]
    5396:	9252      	str	r2, [sp, #328]	; 0x148
    pool_params.padding.h = data.padding.height;
    5398:	6872      	ldr	r2, [r6, #4]
    539a:	9255      	str	r2, [sp, #340]	; 0x154
    pool_params.padding.w = data.padding.width;
    539c:	6832      	ldr	r2, [r6, #0]
    539e:	9254      	str	r2, [sp, #336]	; 0x150
    pool_params.activation.min = data.activation_min;
    53a0:	6972      	ldr	r2, [r6, #20]
    53a2:	9256      	str	r2, [sp, #344]	; 0x158
    pool_params.activation.max = data.activation_max;
    53a4:	69b2      	ldr	r2, [r6, #24]
    53a6:	9257      	str	r2, [sp, #348]	; 0x15c
    filter_dims.n = 1;
    53a8:	9342      	str	r3, [sp, #264]	; 0x108
    filter_dims.h = params->filter_height;
    53aa:	693a      	ldr	r2, [r7, #16]
    53ac:	9243      	str	r2, [sp, #268]	; 0x10c
    filter_dims.w = params->filter_width;
    53ae:	68fa      	ldr	r2, [r7, #12]
    53b0:	9244      	str	r2, [sp, #272]	; 0x110
    filter_dims.c = 1;
    53b2:	9345      	str	r3, [sp, #276]	; 0x114
    ctx.buf = nullptr;
    53b4:	2300      	movs	r3, #0
    53b6:	9338      	str	r3, [sp, #224]	; 0xe0
    ctx.size = 0;
    53b8:	9339      	str	r3, [sp, #228]	; 0xe4
    if (data.buffer_idx > -1) {
    53ba:	6931      	ldr	r1, [r6, #16]
    53bc:	4299      	cmp	r1, r3
    53be:	db04      	blt.n	53ca <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x542>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
    53c0:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    53c4:	4640      	mov	r0, r8
    53c6:	4798      	blx	r3
    53c8:	9038      	str	r0, [sp, #224]	; 0xe0
    TFLITE_DCHECK_EQ(
    53ca:	686b      	ldr	r3, [r5, #4]
    53cc:	6862      	ldr	r2, [r4, #4]
    53ce:	9202      	str	r2, [sp, #8]
    53d0:	aa3e      	add	r2, sp, #248	; 0xf8
    53d2:	9201      	str	r2, [sp, #4]
    53d4:	aa42      	add	r2, sp, #264	; 0x108
    53d6:	9200      	str	r2, [sp, #0]
    53d8:	aa3a      	add	r2, sp, #232	; 0xe8
    53da:	a952      	add	r1, sp, #328	; 0x148
    53dc:	a838      	add	r0, sp, #224	; 0xe0
    53de:	4c0b      	ldr	r4, [pc, #44]	; (540c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x584>)
    53e0:	47a0      	blx	r4
        ARM_MATH_SUCCESS);
    53e2:	2800      	cmp	r0, #0
    53e4:	f040 81cd 	bne.w	5782 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x8fa>
  return kTfLiteOk;
    53e8:	2000      	movs	r0, #0
    53ea:	e56e      	b.n	4eca <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x42>
  TFLITE_DCHECK(input->type == kTfLiteUInt8 || input->type == kTfLiteInt8);
    53ec:	4b03      	ldr	r3, [pc, #12]	; (53fc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x574>)
    53ee:	4798      	blx	r3
    53f0:	00015ea9 	.word	0x00015ea9
    53f4:	0001607d 	.word	0x0001607d
    53f8:	000160b9 	.word	0x000160b9
    53fc:	0001739d 	.word	0x0001739d
    5400:	1ffffffe 	.word	0x1ffffffe
    5404:	0000cd6d 	.word	0x0000cd6d
    5408:	00018121 	.word	0x00018121
    540c:	0000b84d 	.word	0x0000b84d
  op_params.stride_height = params->stride_height;
    5410:	68bb      	ldr	r3, [r7, #8]
    5412:	9305      	str	r3, [sp, #20]
  op_params.stride_width = params->stride_width;
    5414:	687b      	ldr	r3, [r7, #4]
    5416:	9306      	str	r3, [sp, #24]
  op_params.filter_height = params->filter_height;
    5418:	693b      	ldr	r3, [r7, #16]
    541a:	9325      	str	r3, [sp, #148]	; 0x94
  op_params.filter_width = params->filter_width;
    541c:	68fb      	ldr	r3, [r7, #12]
    541e:	9326      	str	r3, [sp, #152]	; 0x98
  op_params.padding_values.height = data.padding.height;
    5420:	6873      	ldr	r3, [r6, #4]
    5422:	9307      	str	r3, [sp, #28]
  op_params.padding_values.width = data.padding.width;
    5424:	6833      	ldr	r3, [r6, #0]
    5426:	930b      	str	r3, [sp, #44]	; 0x2c
  op_params.quantized_activation_min = data.activation_min;
    5428:	6973      	ldr	r3, [r6, #20]
    542a:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.quantized_activation_max = data.activation_max;
    542c:	69b3      	ldr	r3, [r6, #24]
    542e:	931b      	str	r3, [sp, #108]	; 0x6c
  if (tensor == nullptr) {
    5430:	2d00      	cmp	r5, #0
    5432:	f000 80cd 	beq.w	55d0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x748>
  const int dims_size = dims->size;
    5436:	68af      	ldr	r7, [r5, #8]
    5438:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    543c:	966a      	str	r6, [sp, #424]	; 0x1a8
    if (dimensions_count > kMaxSmallSize) {
    543e:	2e05      	cmp	r6, #5
    5440:	f340 80ca 	ble.w	55d8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x750>
      dims_pointer_ = new int32[dimensions_count];
    5444:	4ba8      	ldr	r3, [pc, #672]	; (56e8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x860>)
    5446:	429e      	cmp	r6, r3
    5448:	bf94      	ite	ls
    544a:	00b0      	lslls	r0, r6, #2
    544c:	f04f 30ff 	movhi.w	r0, #4294967295
    5450:	4ba6      	ldr	r3, [pc, #664]	; (56ec <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x864>)
    5452:	4798      	blx	r3
    5454:	906b      	str	r0, [sp, #428]	; 0x1ac
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    5456:	00b2      	lsls	r2, r6, #2
    5458:	4639      	mov	r1, r7
    545a:	4ba5      	ldr	r3, [pc, #660]	; (56f0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x868>)
    545c:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    545e:	686b      	ldr	r3, [r5, #4]
    5460:	9311      	str	r3, [sp, #68]	; 0x44
  if (tensor == nullptr) {
    5462:	2c00      	cmp	r4, #0
    5464:	f000 80ba 	beq.w	55dc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x754>
  const int dims_size = dims->size;
    5468:	68a6      	ldr	r6, [r4, #8]
    546a:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    546e:	9564      	str	r5, [sp, #400]	; 0x190
    if (dimensions_count > kMaxSmallSize) {
    5470:	2d05      	cmp	r5, #5
    5472:	f340 80b6 	ble.w	55e2 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x75a>
      dims_pointer_ = new int32[dimensions_count];
    5476:	4b9c      	ldr	r3, [pc, #624]	; (56e8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x860>)
    5478:	429d      	cmp	r5, r3
    547a:	bf94      	ite	ls
    547c:	00a8      	lslls	r0, r5, #2
    547e:	f04f 30ff 	movhi.w	r0, #4294967295
    5482:	4b9a      	ldr	r3, [pc, #616]	; (56ec <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x864>)
    5484:	4798      	blx	r3
    5486:	9065      	str	r0, [sp, #404]	; 0x194
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    5488:	00aa      	lsls	r2, r5, #2
    548a:	4631      	mov	r1, r6
    548c:	4b98      	ldr	r3, [pc, #608]	; (56f0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x868>)
    548e:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    5490:	6862      	ldr	r2, [r4, #4]
inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const uint8* input_data,
                        const RuntimeShape& output_shape, uint8* output_data) {
  TFLITE_DCHECK_LE(params.quantized_activation_min,
                   params.quantized_activation_max);
    5492:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    5494:	991b      	ldr	r1, [sp, #108]	; 0x6c
    5496:	428b      	cmp	r3, r1
    5498:	f300 80a5 	bgt.w	55e6 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x75e>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    549c:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
    549e:	2b04      	cmp	r3, #4
    54a0:	f040 80a3 	bne.w	55ea <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x762>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    54a4:	9b64      	ldr	r3, [sp, #400]	; 0x190
    54a6:	2b04      	cmp	r3, #4
    54a8:	f040 80a1 	bne.w	55ee <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x766>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    54ac:	9b6b      	ldr	r3, [sp, #428]	; 0x1ac
    54ae:	930a      	str	r3, [sp, #40]	; 0x28
    54b0:	9965      	ldr	r1, [sp, #404]	; 0x194
    54b2:	9114      	str	r1, [sp, #80]	; 0x50
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    54b4:	4299      	cmp	r1, r3
    54b6:	f040 809c 	bne.w	55f2 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x76a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    54ba:	f8dd 91b8 	ldr.w	r9, [sp, #440]	; 0x1b8
    54be:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
    54c0:	930d      	str	r3, [sp, #52]	; 0x34
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    54c2:	454b      	cmp	r3, r9
    54c4:	f040 8097 	bne.w	55f6 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x76e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    54c8:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
    54ca:	461d      	mov	r5, r3
    54cc:	9309      	str	r3, [sp, #36]	; 0x24
    54ce:	f8dd a1b4 	ldr.w	sl, [sp, #436]	; 0x1b4
    54d2:	9b66      	ldr	r3, [sp, #408]	; 0x198
    54d4:	461c      	mov	r4, r3
    54d6:	9313      	str	r3, [sp, #76]	; 0x4c
    54d8:	9b67      	ldr	r3, [sp, #412]	; 0x19c
    54da:	9312      	str	r3, [sp, #72]	; 0x48
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
    54dc:	9914      	ldr	r1, [sp, #80]	; 0x50
    54de:	2900      	cmp	r1, #0
    54e0:	dd82      	ble.n	53e8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x560>
    54e2:	980d      	ldr	r0, [sp, #52]	; 0x34
    54e4:	9027      	str	r0, [sp, #156]	; 0x9c
    54e6:	4619      	mov	r1, r3
    54e8:	fb03 f304 	mul.w	r3, r3, r4
    54ec:	fb00 f303 	mul.w	r3, r0, r3
    54f0:	9329      	str	r3, [sp, #164]	; 0xa4
    54f2:	9220      	str	r2, [sp, #128]	; 0x80
    54f4:	951f      	str	r5, [sp, #124]	; 0x7c
    54f6:	460b      	mov	r3, r1
    54f8:	fb03 f300 	mul.w	r3, r3, r0
    54fc:	9324      	str	r3, [sp, #144]	; 0x90
    54fe:	46c8      	mov	r8, r9
    5500:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
    5504:	fb09 f30a 	mul.w	r3, r9, sl
    5508:	9308      	str	r3, [sp, #32]
    550a:	2300      	movs	r3, #0
    550c:	931c      	str	r3, [sp, #112]	; 0x70
    550e:	469b      	mov	fp, r3
    5510:	9b05      	ldr	r3, [sp, #20]
    5512:	932a      	str	r3, [sp, #168]	; 0xa8
    5514:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
    5518:	932b      	str	r3, [sp, #172]	; 0xac
    551a:	9b06      	ldr	r3, [sp, #24]
    551c:	932c      	str	r3, [sp, #176]	; 0xb0
    551e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
    5522:	932d      	str	r3, [sp, #180]	; 0xb4
    for (int out_y = 0; out_y < output_height; ++out_y) {
    5524:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    5526:	2b00      	cmp	r3, #0
    5528:	f340 8112 	ble.w	5750 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x8c8>
    552c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    552e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    5530:	441a      	add	r2, r3
    5532:	921e      	str	r2, [sp, #120]	; 0x78
    5534:	425b      	negs	r3, r3
    5536:	930e      	str	r3, [sp, #56]	; 0x38
    5538:	9b20      	ldr	r3, [sp, #128]	; 0x80
    553a:	9319      	str	r3, [sp, #100]	; 0x64
    553c:	2300      	movs	r3, #0
    553e:	9310      	str	r3, [sp, #64]	; 0x40
      for (int out_x = 0; out_x < output_width; ++out_x) {
    5540:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5542:	2b00      	cmp	r3, #0
    5544:	f340 80f2 	ble.w	572c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x8a4>
    5548:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    554a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    554c:	1a53      	subs	r3, r2, r1
    554e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5552:	9316      	str	r3, [sp, #88]	; 0x58
    5554:	9925      	ldr	r1, [sp, #148]	; 0x94
    5556:	4291      	cmp	r1, r2
    5558:	bfa8      	it	ge
    555a:	4611      	movge	r1, r2
    555c:	9105      	str	r1, [sp, #20]
    555e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    5560:	9923      	ldr	r1, [sp, #140]	; 0x8c
    5562:	1850      	adds	r0, r2, r1
    5564:	9022      	str	r0, [sp, #136]	; 0x88
    5566:	4252      	negs	r2, r2
    5568:	9218      	str	r2, [sp, #96]	; 0x60
    556a:	461a      	mov	r2, r3
    556c:	9317      	str	r3, [sp, #92]	; 0x5c
    556e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5570:	981c      	ldr	r0, [sp, #112]	; 0x70
    5572:	4403      	add	r3, r0
    5574:	4413      	add	r3, r2
    5576:	fb01 f303 	mul.w	r3, r1, r3
    557a:	9328      	str	r3, [sp, #160]	; 0xa0
          const int filter_x_start = std::max(0, -in_x_origin);
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
    557c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    557e:	931d      	str	r3, [sp, #116]	; 0x74
    5580:	2300      	movs	r3, #0
    5582:	930f      	str	r3, [sp, #60]	; 0x3c
        for (int channel = 0; channel < depth; ++channel) {
    5584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5586:	2b00      	cmp	r3, #0
    5588:	f340 80be 	ble.w	5708 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x880>
              (out_x * stride_width) - params.padding_values.width;
    558c:	9e18      	ldr	r6, [sp, #96]	; 0x60
    558e:	4633      	mov	r3, r6
    5590:	9822      	ldr	r0, [sp, #136]	; 0x88
    5592:	9923      	ldr	r1, [sp, #140]	; 0x8c
    5594:	1a41      	subs	r1, r0, r1
    5596:	ea21 72e1 	bic.w	r2, r1, r1, asr #31
    559a:	4611      	mov	r1, r2
    559c:	9206      	str	r2, [sp, #24]
    559e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    55a0:	4614      	mov	r4, r2
    55a2:	4284      	cmp	r4, r0
    55a4:	bfa8      	it	ge
    55a6:	4604      	movge	r4, r0
    55a8:	4625      	mov	r5, r4
    55aa:	9407      	str	r4, [sp, #28]
    55ac:	4632      	mov	r2, r6
    55ae:	9828      	ldr	r0, [sp, #160]	; 0xa0
    55b0:	4402      	add	r2, r0
    55b2:	440a      	add	r2, r1
    55b4:	fb08 f202 	mul.w	r2, r8, r2
    55b8:	9221      	str	r2, [sp, #132]	; 0x84
              std::min(params.filter_width, input_width - in_x_origin);
    55ba:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    55bc:	9215      	str	r2, [sp, #84]	; 0x54
    55be:	2400      	movs	r4, #0
          int filter_count = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
    55c0:	460a      	mov	r2, r1
    55c2:	1871      	adds	r1, r6, r1
    55c4:	910b      	str	r1, [sp, #44]	; 0x2c
    55c6:	3201      	adds	r2, #1
    55c8:	19ae      	adds	r6, r5, r6
    55ca:	18d3      	adds	r3, r2, r3
    55cc:	930c      	str	r3, [sp, #48]	; 0x30
    55ce:	e07a      	b.n	56c6 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x83e>
  RuntimeShape() : size_(0) {}
    55d0:	2300      	movs	r3, #0
    55d2:	936a      	str	r3, [sp, #424]	; 0x1a8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    55d4:	9311      	str	r3, [sp, #68]	; 0x44
    55d6:	e744      	b.n	5462 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x5da>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    55d8:	a86b      	add	r0, sp, #428	; 0x1ac
    55da:	e73c      	b.n	5456 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x5ce>
  RuntimeShape() : size_(0) {}
    55dc:	2200      	movs	r2, #0
    55de:	9264      	str	r2, [sp, #400]	; 0x190
    55e0:	e757      	b.n	5492 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x60a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    55e2:	a865      	add	r0, sp, #404	; 0x194
    55e4:	e750      	b.n	5488 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x600>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    55e6:	4b43      	ldr	r3, [pc, #268]	; (56f4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x86c>)
    55e8:	4798      	blx	r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    55ea:	4b42      	ldr	r3, [pc, #264]	; (56f4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x86c>)
    55ec:	4798      	blx	r3
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    55ee:	4b41      	ldr	r3, [pc, #260]	; (56f4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x86c>)
    55f0:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    55f2:	4b40      	ldr	r3, [pc, #256]	; (56f4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x86c>)
    55f4:	4798      	blx	r3
    55f6:	4b3f      	ldr	r3, [pc, #252]	; (56f4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x86c>)
    55f8:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    55fa:	4b3e      	ldr	r3, [pc, #248]	; (56f4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x86c>)
    55fc:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    55fe:	4b3d      	ldr	r3, [pc, #244]	; (56f4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x86c>)
    5600:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5602:	4b3c      	ldr	r3, [pc, #240]	; (56f4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x86c>)
    5604:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5606:	4b3b      	ldr	r3, [pc, #236]	; (56f4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x86c>)
    5608:	4798      	blx	r3
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    560a:	f10c 0c01 	add.w	ip, ip, #1
    560e:	9b08      	ldr	r3, [sp, #32]
    5610:	449e      	add	lr, r3
    5612:	3701      	adds	r7, #1
    5614:	9b05      	ldr	r3, [sp, #20]
    5616:	4563      	cmp	r3, ip
    5618:	dd28      	ble.n	566c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x7e4>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    561a:	9b06      	ldr	r3, [sp, #24]
    561c:	9a07      	ldr	r2, [sp, #28]
    561e:	4293      	cmp	r3, r2
    5620:	daf3      	bge.n	560a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x782>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    5622:	f1bb 0f00 	cmp.w	fp, #0
    5626:	dbe8      	blt.n	55fa <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x772>
    5628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    562a:	459b      	cmp	fp, r3
    562c:	dae5      	bge.n	55fa <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x772>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    562e:	2f00      	cmp	r7, #0
    5630:	dbe5      	blt.n	55fe <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x776>
    5632:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5634:	42bb      	cmp	r3, r7
    5636:	dde2      	ble.n	55fe <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x776>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    563a:	2b00      	cmp	r3, #0
    563c:	dbe1      	blt.n	5602 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x77a>
    563e:	459a      	cmp	sl, r3
    5640:	dddf      	ble.n	5602 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x77a>
    5642:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5644:	4672      	mov	r2, lr
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5646:	2c00      	cmp	r4, #0
    5648:	dbdd      	blt.n	5606 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x77e>
    564a:	454c      	cmp	r4, r9
    564c:	dadb      	bge.n	5606 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x77e>
              const int in_y = in_y_origin + filter_y;
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
    564e:	7815      	ldrb	r5, [r2, #0]
    5650:	4429      	add	r1, r5
              filter_count++;
    5652:	3001      	adds	r0, #1
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    5654:	42b3      	cmp	r3, r6
    5656:	d0d8      	beq.n	560a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x782>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5658:	2b00      	cmp	r3, #0
    565a:	dbd2      	blt.n	5602 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x77a>
    565c:	1c5d      	adds	r5, r3, #1
    565e:	4442      	add	r2, r8
    5660:	459a      	cmp	sl, r3
    5662:	ddce      	ble.n	5602 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x77a>
    5664:	462b      	mov	r3, r5
    5666:	e7ee      	b.n	5646 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x7be>
          int32 acc = 0;
    5668:	2100      	movs	r1, #0
          int filter_count = 0;
    566a:	4608      	mov	r0, r1
            }
          }
          acc = (acc + filter_count / 2) / filter_count;
    566c:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
    5670:	eb01 0363 	add.w	r3, r1, r3, asr #1
    5674:	fb93 f3f0 	sdiv	r3, r3, r0
    5678:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    567a:	4293      	cmp	r3, r2
    567c:	bfb8      	it	lt
    567e:	4613      	movlt	r3, r2
    5680:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    5682:	4293      	cmp	r3, r2
    5684:	bfa8      	it	ge
    5686:	4613      	movge	r3, r2
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    5688:	f1bb 0f00 	cmp.w	fp, #0
    568c:	db34      	blt.n	56f8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x870>
    568e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    5690:	4593      	cmp	fp, r2
    5692:	da31      	bge.n	56f8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x870>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    5694:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5696:	2a00      	cmp	r2, #0
    5698:	db30      	blt.n	56fc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x874>
    569a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    569c:	428a      	cmp	r2, r1
    569e:	da2d      	bge.n	56fc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x874>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    56a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    56a2:	2a00      	cmp	r2, #0
    56a4:	db2c      	blt.n	5700 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x878>
    56a6:	9912      	ldr	r1, [sp, #72]	; 0x48
    56a8:	428a      	cmp	r2, r1
    56aa:	da29      	bge.n	5700 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x878>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    56ac:	2c00      	cmp	r4, #0
    56ae:	db29      	blt.n	5704 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x87c>
    56b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    56b2:	4294      	cmp	r4, r2
    56b4:	da26      	bge.n	5704 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x87c>
          acc = std::max(acc, params.quantized_activation_min);
          acc = std::min(acc, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              static_cast<uint8>(acc);
    56b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
    56b8:	f802 3b01 	strb.w	r3, [r2], #1
    56bc:	9215      	str	r2, [sp, #84]	; 0x54
        for (int channel = 0; channel < depth; ++channel) {
    56be:	3401      	adds	r4, #1
    56c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    56c2:	429c      	cmp	r4, r3
    56c4:	d020      	beq.n	5708 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x880>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    56c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    56c8:	9905      	ldr	r1, [sp, #20]
    56ca:	428a      	cmp	r2, r1
    56cc:	dacc      	bge.n	5668 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x7e0>
    56ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
    56d0:	eb04 0e03 	add.w	lr, r4, r3
    56d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    56d6:	449e      	add	lr, r3
    56d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    56da:	990e      	ldr	r1, [sp, #56]	; 0x38
    56dc:	185f      	adds	r7, r3, r1
    56de:	4694      	mov	ip, r2
    56e0:	2100      	movs	r1, #0
    56e2:	4608      	mov	r0, r1
    56e4:	e799      	b.n	561a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x792>
    56e6:	bf00      	nop
    56e8:	1ffffffe 	.word	0x1ffffffe
    56ec:	0000cd6d 	.word	0x0000cd6d
    56f0:	00018121 	.word	0x00018121
    56f4:	0001739d 	.word	0x0001739d
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    56f8:	4b23      	ldr	r3, [pc, #140]	; (5788 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x900>)
    56fa:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    56fc:	4b22      	ldr	r3, [pc, #136]	; (5788 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x900>)
    56fe:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5700:	4b21      	ldr	r3, [pc, #132]	; (5788 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x900>)
    5702:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5704:	4b20      	ldr	r3, [pc, #128]	; (5788 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x900>)
    5706:	4798      	blx	r3
      for (int out_x = 0; out_x < output_width; ++out_x) {
    5708:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    570a:	3301      	adds	r3, #1
    570c:	930f      	str	r3, [sp, #60]	; 0x3c
    570e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    5710:	9927      	ldr	r1, [sp, #156]	; 0x9c
    5712:	440a      	add	r2, r1
    5714:	921d      	str	r2, [sp, #116]	; 0x74
    5716:	9922      	ldr	r1, [sp, #136]	; 0x88
    5718:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    571a:	1a89      	subs	r1, r1, r2
    571c:	9122      	str	r1, [sp, #136]	; 0x88
    571e:	9918      	ldr	r1, [sp, #96]	; 0x60
    5720:	4411      	add	r1, r2
    5722:	9118      	str	r1, [sp, #96]	; 0x60
    5724:	9a12      	ldr	r2, [sp, #72]	; 0x48
    5726:	4293      	cmp	r3, r2
    5728:	f47f af2c 	bne.w	5584 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6fc>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    572c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    572e:	3301      	adds	r3, #1
    5730:	9310      	str	r3, [sp, #64]	; 0x40
    5732:	9a19      	ldr	r2, [sp, #100]	; 0x64
    5734:	9924      	ldr	r1, [sp, #144]	; 0x90
    5736:	440a      	add	r2, r1
    5738:	9219      	str	r2, [sp, #100]	; 0x64
    573a:	991e      	ldr	r1, [sp, #120]	; 0x78
    573c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    573e:	1a89      	subs	r1, r1, r2
    5740:	911e      	str	r1, [sp, #120]	; 0x78
    5742:	990e      	ldr	r1, [sp, #56]	; 0x38
    5744:	4411      	add	r1, r2
    5746:	910e      	str	r1, [sp, #56]	; 0x38
    5748:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    574a:	4293      	cmp	r3, r2
    574c:	f47f aef8 	bne.w	5540 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6b8>
  for (int batch = 0; batch < batches; ++batch) {
    5750:	f10b 0b01 	add.w	fp, fp, #1
    5754:	9b20      	ldr	r3, [sp, #128]	; 0x80
    5756:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    5758:	4413      	add	r3, r2
    575a:	9320      	str	r3, [sp, #128]	; 0x80
    575c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    575e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    5760:	4413      	add	r3, r2
    5762:	931c      	str	r3, [sp, #112]	; 0x70
    5764:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5766:	459b      	cmp	fp, r3
    5768:	f47f aedc 	bne.w	5524 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x69c>
    576c:	e63c      	b.n	53e8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x560>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    576e:	a847      	add	r0, sp, #284	; 0x11c
    5770:	e5d1      	b.n	5316 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x48e>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    5772:	4b05      	ldr	r3, [pc, #20]	; (5788 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x900>)
    5774:	4798      	blx	r3
    5776:	a84d      	add	r0, sp, #308	; 0x134
    5778:	e5ee      	b.n	5358 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x4d0>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    577a:	4b03      	ldr	r3, [pc, #12]	; (5788 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x900>)
    577c:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    577e:	4b02      	ldr	r3, [pc, #8]	; (5788 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x900>)
    5780:	4798      	blx	r3
    TFLITE_DCHECK_EQ(
    5782:	4b01      	ldr	r3, [pc, #4]	; (5788 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x900>)
    5784:	4798      	blx	r3
    5786:	bf00      	nop
    5788:	0001739d 	.word	0x0001739d

0000578c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
    578c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5790:	b0e9      	sub	sp, #420	; 0x1a4
    5792:	4605      	mov	r5, r0
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
    5794:	694c      	ldr	r4, [r1, #20]

  const OpData& data = *(static_cast<const OpData*>(node->user_data));
    5796:	f8d1 8010 	ldr.w	r8, [r1, #16]

  TfLiteTensor* input = &context->tensors[flatbuffers::EndianScalar(
    579a:	6882      	ldr	r2, [r0, #8]
    579c:	680b      	ldr	r3, [r1, #0]
      node->inputs->data[kInputTensor])];
    579e:	685b      	ldr	r3, [r3, #4]
    57a0:	019b      	lsls	r3, r3, #6
    57a2:	18d7      	adds	r7, r2, r3
  return &context->tensors[node->outputs->data[index]];
    57a4:	6849      	ldr	r1, [r1, #4]
    57a6:	684e      	ldr	r6, [r1, #4]
    57a8:	eb02 1686 	add.w	r6, r2, r6, lsl #6
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  switch (input->type) {
    57ac:	5cd0      	ldrb	r0, [r2, r3]
    57ae:	2803      	cmp	r0, #3
    57b0:	f000 81eb 	beq.w	5b8a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3fe>
    57b4:	2809      	cmp	r0, #9
    57b6:	f000 83a5 	beq.w	5f04 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x778>
    57ba:	2801      	cmp	r0, #1
    57bc:	d00a      	beq.n	57d4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x48>
      break;
    case kTfLiteInt8:
      MaxEvalInt8(context, node, params, data, input, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
    57be:	696c      	ldr	r4, [r5, #20]
    57c0:	4ba3      	ldr	r3, [pc, #652]	; (5a50 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2c4>)
    57c2:	4798      	blx	r3
    57c4:	4602      	mov	r2, r0
    57c6:	49a3      	ldr	r1, [pc, #652]	; (5a54 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2c8>)
    57c8:	4628      	mov	r0, r5
    57ca:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
    57cc:	2001      	movs	r0, #1
  }
  return kTfLiteOk;
}
    57ce:	b069      	add	sp, #420	; 0x1a4
    57d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  CalculateActivationRange(params->activation, &activation_min,
    57d4:	7d23      	ldrb	r3, [r4, #20]
  if (activation == kTfLiteActRelu) {
    57d6:	2b01      	cmp	r3, #1
    57d8:	f000 80cf 	beq.w	597a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x1ee>
  } else if (activation == kTfLiteActRelu6) {
    57dc:	2b03      	cmp	r3, #3
    57de:	f000 80d1 	beq.w	5984 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x1f8>
  } else if (activation == kTfLiteActReluN1To1) {
    57e2:	2b02      	cmp	r3, #2
    57e4:	f000 80d3 	beq.w	598e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x202>
    *activation_max = std::numeric_limits<T>::max();
    57e8:	4b9b      	ldr	r3, [pc, #620]	; (5a58 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2cc>)
    57ea:	931d      	str	r3, [sp, #116]	; 0x74
    *activation_min = std::numeric_limits<T>::lowest();
    57ec:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    57f0:	931c      	str	r3, [sp, #112]	; 0x70
  op_params.stride_height = params->stride_height;
    57f2:	68a3      	ldr	r3, [r4, #8]
    57f4:	9324      	str	r3, [sp, #144]	; 0x90
  op_params.stride_width = params->stride_width;
    57f6:	6863      	ldr	r3, [r4, #4]
    57f8:	9325      	str	r3, [sp, #148]	; 0x94
  op_params.filter_height = params->filter_height;
    57fa:	6923      	ldr	r3, [r4, #16]
    57fc:	9326      	str	r3, [sp, #152]	; 0x98
  op_params.filter_width = params->filter_width;
    57fe:	68e3      	ldr	r3, [r4, #12]
    5800:	9322      	str	r3, [sp, #136]	; 0x88
  op_params.padding_values.height = data.padding.height;
    5802:	f8d8 3004 	ldr.w	r3, [r8, #4]
    5806:	9327      	str	r3, [sp, #156]	; 0x9c
  op_params.padding_values.width = data.padding.width;
    5808:	f8d8 3000 	ldr.w	r3, [r8]
    580c:	9328      	str	r3, [sp, #160]	; 0xa0
  if (tensor == nullptr) {
    580e:	2f00      	cmp	r7, #0
    5810:	f000 80c3 	beq.w	599a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x20e>
  const int dims_size = dims->size;
    5814:	68bd      	ldr	r5, [r7, #8]
    5816:	f855 4b04 	ldr.w	r4, [r5], #4
    size_ = dimensions_count;
    581a:	9456      	str	r4, [sp, #344]	; 0x158
    if (dimensions_count > kMaxSmallSize) {
    581c:	2c05      	cmp	r4, #5
    581e:	f340 80c0 	ble.w	59a2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x216>
      dims_pointer_ = new int32[dimensions_count];
    5822:	4b8e      	ldr	r3, [pc, #568]	; (5a5c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2d0>)
    5824:	429c      	cmp	r4, r3
    5826:	bf94      	ite	ls
    5828:	00a0      	lslls	r0, r4, #2
    582a:	f04f 30ff 	movhi.w	r0, #4294967295
    582e:	4b8c      	ldr	r3, [pc, #560]	; (5a60 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2d4>)
    5830:	4798      	blx	r3
    5832:	9057      	str	r0, [sp, #348]	; 0x15c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    5834:	00a2      	lsls	r2, r4, #2
    5836:	4629      	mov	r1, r5
    5838:	4b8a      	ldr	r3, [pc, #552]	; (5a64 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2d8>)
    583a:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    583c:	687b      	ldr	r3, [r7, #4]
    583e:	9317      	str	r3, [sp, #92]	; 0x5c
  if (tensor == nullptr) {
    5840:	2e00      	cmp	r6, #0
    5842:	f000 80b0 	beq.w	59a6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x21a>
  const int dims_size = dims->size;
    5846:	68b5      	ldr	r5, [r6, #8]
    5848:	f855 4b04 	ldr.w	r4, [r5], #4
    size_ = dimensions_count;
    584c:	9450      	str	r4, [sp, #320]	; 0x140
    if (dimensions_count > kMaxSmallSize) {
    584e:	2c05      	cmp	r4, #5
    5850:	f340 80b0 	ble.w	59b4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x228>
      dims_pointer_ = new int32[dimensions_count];
    5854:	4b81      	ldr	r3, [pc, #516]	; (5a5c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2d0>)
    5856:	429c      	cmp	r4, r3
    5858:	bf94      	ite	ls
    585a:	00a0      	lslls	r0, r4, #2
    585c:	f04f 30ff 	movhi.w	r0, #4294967295
    5860:	4b7f      	ldr	r3, [pc, #508]	; (5a60 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2d4>)
    5862:	4798      	blx	r3
    5864:	9051      	str	r0, [sp, #324]	; 0x144
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    5866:	00a2      	lsls	r2, r4, #2
    5868:	4629      	mov	r1, r5
    586a:	4b7e      	ldr	r3, [pc, #504]	; (5a64 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2d8>)
    586c:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    586e:	6873      	ldr	r3, [r6, #4]
    5870:	9320      	str	r3, [sp, #128]	; 0x80
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    5872:	9b56      	ldr	r3, [sp, #344]	; 0x158
    5874:	2b04      	cmp	r3, #4
    5876:	f040 809b 	bne.w	59b0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x224>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    587a:	9b50      	ldr	r3, [sp, #320]	; 0x140
    587c:	2b04      	cmp	r3, #4
    587e:	f040 809b 	bne.w	59b8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x22c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    5882:	9b57      	ldr	r3, [sp, #348]	; 0x15c
    5884:	9310      	str	r3, [sp, #64]	; 0x40
    5886:	9a51      	ldr	r2, [sp, #324]	; 0x144
    5888:	9219      	str	r2, [sp, #100]	; 0x64
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    588a:	429a      	cmp	r2, r3
    588c:	f040 8096 	bne.w	59bc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x230>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    5890:	f8dd a168 	ldr.w	sl, [sp, #360]	; 0x168
    5894:	9b54      	ldr	r3, [sp, #336]	; 0x150
    5896:	9311      	str	r3, [sp, #68]	; 0x44
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    5898:	4553      	cmp	r3, sl
    589a:	f040 8091 	bne.w	59c0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x234>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    589e:	9b58      	ldr	r3, [sp, #352]	; 0x160
    58a0:	930f      	str	r3, [sp, #60]	; 0x3c
    58a2:	f8dd b164 	ldr.w	fp, [sp, #356]	; 0x164
    58a6:	9b52      	ldr	r3, [sp, #328]	; 0x148
    58a8:	9314      	str	r3, [sp, #80]	; 0x50
    58aa:	9b53      	ldr	r3, [sp, #332]	; 0x14c
    58ac:	9318      	str	r3, [sp, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
    58ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
    58b0:	2b00      	cmp	r3, #0
    58b2:	f340 8168 	ble.w	5b86 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3fa>
    58b6:	2300      	movs	r3, #0
    58b8:	930b      	str	r3, [sp, #44]	; 0x2c
    58ba:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
    58be:	fb0b f30a 	mul.w	r3, fp, sl
    58c2:	931f      	str	r3, [sp, #124]	; 0x7c
    for (int out_y = 0; out_y < output_height; ++out_y) {
    58c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    58c6:	2b00      	cmp	r3, #0
    58c8:	f340 8156 	ble.w	5b78 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3ec>
    58cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
    58ce:	932e      	str	r3, [sp, #184]	; 0xb8
    58d0:	f9bd 309c 	ldrsh.w	r3, [sp, #156]	; 0x9c
    58d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    58d6:	922c      	str	r2, [sp, #176]	; 0xb0
    58d8:	18d1      	adds	r1, r2, r3
    58da:	912a      	str	r1, [sp, #168]	; 0xa8
    58dc:	425b      	negs	r3, r3
    58de:	9315      	str	r3, [sp, #84]	; 0x54
    58e0:	2300      	movs	r3, #0
    58e2:	9316      	str	r3, [sp, #88]	; 0x58
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    58e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    58e6:	fb03 f302 	mul.w	r3, r3, r2
    58ea:	932d      	str	r3, [sp, #180]	; 0xb4
      for (int out_x = 0; out_x < output_width; ++out_x) {
    58ec:	9a18      	ldr	r2, [sp, #96]	; 0x60
    58ee:	2a00      	cmp	r2, #0
    58f0:	f340 8134 	ble.w	5b5c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3d0>
    58f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    58f6:	992c      	ldr	r1, [sp, #176]	; 0xb0
    58f8:	1a59      	subs	r1, r3, r1
    58fa:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    58fe:	911b      	str	r1, [sp, #108]	; 0x6c
    5900:	9826      	ldr	r0, [sp, #152]	; 0x98
    5902:	4298      	cmp	r0, r3
    5904:	bfa8      	it	ge
    5906:	4618      	movge	r0, r3
    5908:	900a      	str	r0, [sp, #40]	; 0x28
    590a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    590c:	932f      	str	r3, [sp, #188]	; 0xbc
    590e:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
    5912:	eb03 000b 	add.w	r0, r3, fp
    5916:	9029      	str	r0, [sp, #164]	; 0xa4
    5918:	425b      	negs	r3, r3
    591a:	9313      	str	r3, [sp, #76]	; 0x4c
          const int filter_x_start = std::max(0, -in_x_origin);
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
    591c:	2300      	movs	r3, #0
    591e:	9312      	str	r3, [sp, #72]	; 0x48
    5920:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    5922:	9815      	ldr	r0, [sp, #84]	; 0x54
    5924:	4403      	add	r3, r0
    5926:	440b      	add	r3, r1
    5928:	9923      	ldr	r1, [sp, #140]	; 0x8c
    592a:	fb01 f303 	mul.w	r3, r1, r3
    592e:	932b      	str	r3, [sp, #172]	; 0xac
    5930:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5932:	990b      	ldr	r1, [sp, #44]	; 0x2c
    5934:	9816      	ldr	r0, [sp, #88]	; 0x58
    5936:	fb01 0303 	mla	r3, r1, r3, r0
    593a:	fb02 f303 	mul.w	r3, r2, r3
    593e:	9321      	str	r3, [sp, #132]	; 0x84
    5940:	4653      	mov	r3, sl
    5942:	46da      	mov	sl, fp
    5944:	469b      	mov	fp, r3
        for (int channel = 0; channel < depth; ++channel) {
    5946:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5948:	2b00      	cmp	r3, #0
    594a:	f340 80f6 	ble.w	5b3a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3ae>
              (out_x * stride_width) - params.padding_values.width;
    594e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    5950:	931a      	str	r3, [sp, #104]	; 0x68
    5952:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    5954:	9923      	ldr	r1, [sp, #140]	; 0x8c
    5956:	1a51      	subs	r1, r2, r1
    5958:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    595c:	9109      	str	r1, [sp, #36]	; 0x24
    595e:	9822      	ldr	r0, [sp, #136]	; 0x88
    5960:	4290      	cmp	r0, r2
    5962:	bfa8      	it	ge
    5964:	4610      	movge	r0, r2
    5966:	9008      	str	r0, [sp, #32]
              std::min(params.filter_width, input_width - in_x_origin);
    5968:	f04f 0900 	mov.w	r9, #0
    596c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    596e:	18d3      	adds	r3, r2, r3
    5970:	440b      	add	r3, r1
    5972:	fb0b f303 	mul.w	r3, fp, r3
    5976:	931e      	str	r3, [sp, #120]	; 0x78
    5978:	e0b3      	b.n	5ae2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x356>
    *activation_max = std::numeric_limits<T>::max();
    597a:	4b37      	ldr	r3, [pc, #220]	; (5a58 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2cc>)
    597c:	931d      	str	r3, [sp, #116]	; 0x74
    *activation_min = 0;
    597e:	2300      	movs	r3, #0
    5980:	931c      	str	r3, [sp, #112]	; 0x70
    5982:	e736      	b.n	57f2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x66>
    *activation_max = 6;
    5984:	4b38      	ldr	r3, [pc, #224]	; (5a68 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2dc>)
    5986:	931d      	str	r3, [sp, #116]	; 0x74
    *activation_min = 0;
    5988:	2300      	movs	r3, #0
    598a:	931c      	str	r3, [sp, #112]	; 0x70
    598c:	e731      	b.n	57f2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x66>
    *activation_max = 1;
    598e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    5992:	931d      	str	r3, [sp, #116]	; 0x74
    *activation_min = -1;
    5994:	4b35      	ldr	r3, [pc, #212]	; (5a6c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e0>)
    5996:	931c      	str	r3, [sp, #112]	; 0x70
    5998:	e72b      	b.n	57f2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x66>
  RuntimeShape() : size_(0) {}
    599a:	2300      	movs	r3, #0
    599c:	9356      	str	r3, [sp, #344]	; 0x158
    599e:	9317      	str	r3, [sp, #92]	; 0x5c
    59a0:	e74e      	b.n	5840 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb4>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    59a2:	a857      	add	r0, sp, #348	; 0x15c
    59a4:	e746      	b.n	5834 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>
  RuntimeShape() : size_(0) {}
    59a6:	2300      	movs	r3, #0
    59a8:	9350      	str	r3, [sp, #320]	; 0x140
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    59aa:	9b56      	ldr	r3, [sp, #344]	; 0x158
    59ac:	2b04      	cmp	r3, #4
    59ae:	d003      	beq.n	59b8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x22c>
    59b0:	4b2f      	ldr	r3, [pc, #188]	; (5a70 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    59b2:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    59b4:	a851      	add	r0, sp, #324	; 0x144
    59b6:	e756      	b.n	5866 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xda>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    59b8:	4b2d      	ldr	r3, [pc, #180]	; (5a70 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    59ba:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    59bc:	4b2c      	ldr	r3, [pc, #176]	; (5a70 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    59be:	4798      	blx	r3
    59c0:	4b2b      	ldr	r3, [pc, #172]	; (5a70 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    59c2:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    59c4:	4b2a      	ldr	r3, [pc, #168]	; (5a70 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    59c6:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    59c8:	4b29      	ldr	r3, [pc, #164]	; (5a70 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    59ca:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    59cc:	4b28      	ldr	r3, [pc, #160]	; (5a70 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    59ce:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    59d0:	4b27      	ldr	r3, [pc, #156]	; (5a70 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    59d2:	4798      	blx	r3
          float max = std::numeric_limits<float>::lowest();
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    59d4:	9b07      	ldr	r3, [sp, #28]
    59d6:	3301      	adds	r3, #1
    59d8:	9307      	str	r3, [sp, #28]
    59da:	9a06      	ldr	r2, [sp, #24]
    59dc:	990c      	ldr	r1, [sp, #48]	; 0x30
    59de:	440a      	add	r2, r1
    59e0:	9206      	str	r2, [sp, #24]
    59e2:	9a05      	ldr	r2, [sp, #20]
    59e4:	3201      	adds	r2, #1
    59e6:	9205      	str	r2, [sp, #20]
    59e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    59ea:	429a      	cmp	r2, r3
    59ec:	dd44      	ble.n	5a78 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2ec>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    59ee:	9b08      	ldr	r3, [sp, #32]
    59f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    59f2:	4293      	cmp	r3, r2
    59f4:	ddee      	ble.n	59d4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x248>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    59f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    59f8:	2b00      	cmp	r3, #0
    59fa:	dbe3      	blt.n	59c4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x238>
    59fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    59fe:	429a      	cmp	r2, r3
    5a00:	dde0      	ble.n	59c4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x238>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    5a02:	9b05      	ldr	r3, [sp, #20]
    5a04:	2b00      	cmp	r3, #0
    5a06:	dbdf      	blt.n	59c8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x23c>
    5a08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5a0a:	429a      	cmp	r2, r3
    5a0c:	dddc      	ble.n	59c8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x23c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5a10:	2b00      	cmp	r3, #0
    5a12:	dbdb      	blt.n	59cc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x240>
    5a14:	459a      	cmp	sl, r3
    5a16:	ddd9      	ble.n	59cc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x240>
    5a18:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    5a1a:	9d06      	ldr	r5, [sp, #24]
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5a1c:	f1b9 0f00 	cmp.w	r9, #0
    5a20:	dbd6      	blt.n	59d0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x244>
    5a22:	45cb      	cmp	fp, r9
    5a24:	ddd4      	ble.n	59d0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x244>
      if (__a < __b)
    5a26:	6829      	ldr	r1, [r5, #0]
    5a28:	984a      	ldr	r0, [sp, #296]	; 0x128
    5a2a:	4b12      	ldr	r3, [pc, #72]	; (5a74 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e8>)
    5a2c:	4798      	blx	r3
      return __a;
    5a2e:	2800      	cmp	r0, #0
    5a30:	bf0c      	ite	eq
    5a32:	4633      	moveq	r3, r6
    5a34:	462b      	movne	r3, r5
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
    5a36:	681b      	ldr	r3, [r3, #0]
    5a38:	934a      	str	r3, [sp, #296]	; 0x128
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    5a3a:	42a7      	cmp	r7, r4
    5a3c:	d0ca      	beq.n	59d4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x248>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5a3e:	2c00      	cmp	r4, #0
    5a40:	dbc4      	blt.n	59cc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x240>
    5a42:	1c63      	adds	r3, r4, #1
    5a44:	4445      	add	r5, r8
    5a46:	45a2      	cmp	sl, r4
    5a48:	ddc0      	ble.n	59cc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x240>
    5a4a:	461c      	mov	r4, r3
    5a4c:	e7e6      	b.n	5a1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x290>
    5a4e:	bf00      	nop
    5a50:	00001ab5 	.word	0x00001ab5
    5a54:	0003bdf4 	.word	0x0003bdf4
    5a58:	7f7fffff 	.word	0x7f7fffff
    5a5c:	1ffffffe 	.word	0x1ffffffe
    5a60:	0000cd6d 	.word	0x0000cd6d
    5a64:	00018121 	.word	0x00018121
    5a68:	40c00000 	.word	0x40c00000
    5a6c:	bf800000 	.word	0xbf800000
    5a70:	0001739d 	.word	0x0001739d
    5a74:	0001607d 	.word	0x0001607d
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    5a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5a7a:	2b00      	cmp	r3, #0
    5a7c:	db55      	blt.n	5b2a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x39e>
    5a7e:	9a19      	ldr	r2, [sp, #100]	; 0x64
    5a80:	429a      	cmp	r2, r3
    5a82:	dd52      	ble.n	5b2a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x39e>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    5a84:	9b16      	ldr	r3, [sp, #88]	; 0x58
    5a86:	2b00      	cmp	r3, #0
    5a88:	db51      	blt.n	5b2e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3a2>
    5a8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    5a8c:	429a      	cmp	r2, r3
    5a8e:	dd4e      	ble.n	5b2e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3a2>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5a90:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5a92:	2b00      	cmp	r3, #0
    5a94:	db4d      	blt.n	5b32 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3a6>
    5a96:	9a18      	ldr	r2, [sp, #96]	; 0x60
    5a98:	429a      	cmp	r2, r3
    5a9a:	dd4a      	ble.n	5b32 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3a6>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5a9c:	f1b9 0f00 	cmp.w	r9, #0
    5aa0:	db49      	blt.n	5b36 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3aa>
    5aa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5aa4:	454b      	cmp	r3, r9
    5aa6:	dd46      	ble.n	5b36 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3aa>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    5aa8:	9b21      	ldr	r3, [sp, #132]	; 0x84
    5aaa:	9a12      	ldr	r2, [sp, #72]	; 0x48
    5aac:	189d      	adds	r5, r3, r2
    5aae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5ab0:	fb03 9505 	mla	r5, r3, r5, r9
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
    5ab4:	9c4a      	ldr	r4, [sp, #296]	; 0x128
      if (__a < __b)
    5ab6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
    5ab8:	4631      	mov	r1, r6
    5aba:	4620      	mov	r0, r4
    5abc:	4ba8      	ldr	r3, [pc, #672]	; (5d60 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5d4>)
    5abe:	4798      	blx	r3
    5ac0:	b100      	cbz	r0, 5ac4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x338>
	return __b;
    5ac2:	4634      	mov	r4, r6
      if (__b < __a)
    5ac4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    5ac6:	4631      	mov	r1, r6
    5ac8:	4620      	mov	r0, r4
    5aca:	4ba6      	ldr	r3, [pc, #664]	; (5d64 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5d8>)
    5acc:	4798      	blx	r3
    5ace:	b100      	cbz	r0, 5ad2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x346>
	return __b;
    5ad0:	4634      	mov	r4, r6
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    5ad2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    5ad4:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
        for (int channel = 0; channel < depth; ++channel) {
    5ad8:	f109 0901 	add.w	r9, r9, #1
    5adc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5ade:	4599      	cmp	r9, r3
    5ae0:	d02b      	beq.n	5b3a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3ae>
          float max = std::numeric_limits<float>::lowest();
    5ae2:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    5ae6:	934a      	str	r3, [sp, #296]	; 0x128
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    5ae8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    5aea:	990a      	ldr	r1, [sp, #40]	; 0x28
    5aec:	428a      	cmp	r2, r1
    5aee:	dac3      	bge.n	5a78 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2ec>
    5af0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    5af2:	009b      	lsls	r3, r3, #2
    5af4:	930c      	str	r3, [sp, #48]	; 0x30
    5af6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    5af8:	444b      	add	r3, r9
    5afa:	9917      	ldr	r1, [sp, #92]	; 0x5c
    5afc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    5b00:	9306      	str	r3, [sp, #24]
    5b02:	4613      	mov	r3, r2
    5b04:	9a15      	ldr	r2, [sp, #84]	; 0x54
    5b06:	189a      	adds	r2, r3, r2
    5b08:	9205      	str	r2, [sp, #20]
    5b0a:	ea4f 088b 	mov.w	r8, fp, lsl #2
    5b0e:	9307      	str	r3, [sp, #28]
              const int in_x = in_x_origin + filter_x;
    5b10:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    5b12:	4613      	mov	r3, r2
    5b14:	9909      	ldr	r1, [sp, #36]	; 0x24
    5b16:	440b      	add	r3, r1
    5b18:	930d      	str	r3, [sp, #52]	; 0x34
    5b1a:	1c4b      	adds	r3, r1, #1
    5b1c:	4413      	add	r3, r2
    5b1e:	930e      	str	r3, [sp, #56]	; 0x38
    5b20:	9b08      	ldr	r3, [sp, #32]
    5b22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    5b24:	189f      	adds	r7, r3, r2
      return __a;
    5b26:	ae4a      	add	r6, sp, #296	; 0x128
    5b28:	e761      	b.n	59ee <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x262>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    5b2a:	4b8f      	ldr	r3, [pc, #572]	; (5d68 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5dc>)
    5b2c:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    5b2e:	4b8e      	ldr	r3, [pc, #568]	; (5d68 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5dc>)
    5b30:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5b32:	4b8d      	ldr	r3, [pc, #564]	; (5d68 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5dc>)
    5b34:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5b36:	4b8c      	ldr	r3, [pc, #560]	; (5d68 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5dc>)
    5b38:	4798      	blx	r3
      for (int out_x = 0; out_x < output_width; ++out_x) {
    5b3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5b3c:	3301      	adds	r3, #1
    5b3e:	9312      	str	r3, [sp, #72]	; 0x48
    5b40:	9929      	ldr	r1, [sp, #164]	; 0xa4
    5b42:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
    5b44:	1a89      	subs	r1, r1, r2
    5b46:	9129      	str	r1, [sp, #164]	; 0xa4
    5b48:	9913      	ldr	r1, [sp, #76]	; 0x4c
    5b4a:	4411      	add	r1, r2
    5b4c:	9113      	str	r1, [sp, #76]	; 0x4c
    5b4e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    5b50:	4293      	cmp	r3, r2
    5b52:	f47f aef8 	bne.w	5946 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x1ba>
    5b56:	465b      	mov	r3, fp
    5b58:	46d3      	mov	fp, sl
    5b5a:	469a      	mov	sl, r3
    for (int out_y = 0; out_y < output_height; ++out_y) {
    5b5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    5b5e:	3301      	adds	r3, #1
    5b60:	9316      	str	r3, [sp, #88]	; 0x58
    5b62:	992a      	ldr	r1, [sp, #168]	; 0xa8
    5b64:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    5b66:	1a89      	subs	r1, r1, r2
    5b68:	912a      	str	r1, [sp, #168]	; 0xa8
    5b6a:	9915      	ldr	r1, [sp, #84]	; 0x54
    5b6c:	4411      	add	r1, r2
    5b6e:	9115      	str	r1, [sp, #84]	; 0x54
    5b70:	9a14      	ldr	r2, [sp, #80]	; 0x50
    5b72:	4293      	cmp	r3, r2
    5b74:	f47f aeba 	bne.w	58ec <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x160>
  for (int batch = 0; batch < batches; ++batch) {
    5b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5b7a:	3301      	adds	r3, #1
    5b7c:	930b      	str	r3, [sp, #44]	; 0x2c
    5b7e:	9a19      	ldr	r2, [sp, #100]	; 0x64
    5b80:	4293      	cmp	r3, r2
    5b82:	f47f ae9f 	bne.w	58c4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x138>
  return kTfLiteOk;
    5b86:	2000      	movs	r0, #0
    5b88:	e621      	b.n	57ce <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x42>
  op_params.stride_height = params->stride_height;
    5b8a:	68a5      	ldr	r5, [r4, #8]
  op_params.stride_width = params->stride_width;
    5b8c:	6863      	ldr	r3, [r4, #4]
    5b8e:	9320      	str	r3, [sp, #128]	; 0x80
  op_params.filter_height = params->filter_height;
    5b90:	6923      	ldr	r3, [r4, #16]
    5b92:	9321      	str	r3, [sp, #132]	; 0x84
  op_params.filter_width = params->filter_width;
    5b94:	68e3      	ldr	r3, [r4, #12]
    5b96:	931d      	str	r3, [sp, #116]	; 0x74
  op_params.padding_values.height = data.padding.height;
    5b98:	f8d8 4004 	ldr.w	r4, [r8, #4]
  op_params.padding_values.width = data.padding.width;
    5b9c:	f8d8 3000 	ldr.w	r3, [r8]
    5ba0:	9322      	str	r3, [sp, #136]	; 0x88
  op_params.quantized_activation_min = data.activation_min;
    5ba2:	f8d8 3014 	ldr.w	r3, [r8, #20]
    5ba6:	930d      	str	r3, [sp, #52]	; 0x34
  op_params.quantized_activation_max = data.activation_max;
    5ba8:	f8d8 3018 	ldr.w	r3, [r8, #24]
    5bac:	9310      	str	r3, [sp, #64]	; 0x40
  if (tensor == nullptr) {
    5bae:	2f00      	cmp	r7, #0
    5bb0:	f000 80c7 	beq.w	5d42 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5b6>
  const int dims_size = dims->size;
    5bb4:	f8d7 9008 	ldr.w	r9, [r7, #8]
    5bb8:	f859 8b04 	ldr.w	r8, [r9], #4
    size_ = dimensions_count;
    5bbc:	f8cd 8188 	str.w	r8, [sp, #392]	; 0x188
    if (dimensions_count > kMaxSmallSize) {
    5bc0:	f1b8 0f05 	cmp.w	r8, #5
    5bc4:	f340 80c1 	ble.w	5d4a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5be>
      dims_pointer_ = new int32[dimensions_count];
    5bc8:	4b68      	ldr	r3, [pc, #416]	; (5d6c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5e0>)
    5bca:	4598      	cmp	r8, r3
    5bcc:	bf94      	ite	ls
    5bce:	ea4f 0088 	movls.w	r0, r8, lsl #2
    5bd2:	f04f 30ff 	movhi.w	r0, #4294967295
    5bd6:	4b66      	ldr	r3, [pc, #408]	; (5d70 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5e4>)
    5bd8:	4798      	blx	r3
    5bda:	9063      	str	r0, [sp, #396]	; 0x18c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    5bdc:	ea4f 0288 	mov.w	r2, r8, lsl #2
    5be0:	4649      	mov	r1, r9
    5be2:	4b64      	ldr	r3, [pc, #400]	; (5d74 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5e8>)
    5be4:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    5be6:	687b      	ldr	r3, [r7, #4]
    5be8:	9314      	str	r3, [sp, #80]	; 0x50
  if (tensor == nullptr) {
    5bea:	2e00      	cmp	r6, #0
    5bec:	f000 80af 	beq.w	5d4e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5c2>
  const int dims_size = dims->size;
    5bf0:	f8d6 8008 	ldr.w	r8, [r6, #8]
    5bf4:	f858 7b04 	ldr.w	r7, [r8], #4
    size_ = dimensions_count;
    5bf8:	975c      	str	r7, [sp, #368]	; 0x170
    if (dimensions_count > kMaxSmallSize) {
    5bfa:	2f05      	cmp	r7, #5
    5bfc:	f340 80ab 	ble.w	5d56 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5ca>
      dims_pointer_ = new int32[dimensions_count];
    5c00:	4b5a      	ldr	r3, [pc, #360]	; (5d6c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5e0>)
    5c02:	429f      	cmp	r7, r3
    5c04:	bf94      	ite	ls
    5c06:	00b8      	lslls	r0, r7, #2
    5c08:	f04f 30ff 	movhi.w	r0, #4294967295
    5c0c:	4b58      	ldr	r3, [pc, #352]	; (5d70 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5e4>)
    5c0e:	4798      	blx	r3
    5c10:	905d      	str	r0, [sp, #372]	; 0x174
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    5c12:	00ba      	lsls	r2, r7, #2
    5c14:	4641      	mov	r1, r8
    5c16:	4b57      	ldr	r3, [pc, #348]	; (5d74 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5e8>)
    5c18:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    5c1a:	6873      	ldr	r3, [r6, #4]
    5c1c:	931b      	str	r3, [sp, #108]	; 0x6c

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8* input_data, const RuntimeShape& output_shape,
                    uint8* output_data) {
  TFLITE_DCHECK_LE(params.quantized_activation_min,
                   params.quantized_activation_max);
    5c1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5c20:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5c22:	4293      	cmp	r3, r2
    5c24:	f300 8099 	bgt.w	5d5a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5ce>
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
    5c28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5c2a:	2b00      	cmp	r3, #0
    5c2c:	f2c0 80a4 	blt.w	5d78 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5ec>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
    5c30:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5c32:	2bff      	cmp	r3, #255	; 0xff
    5c34:	f300 80a2 	bgt.w	5d7c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5f0>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    5c38:	9b62      	ldr	r3, [sp, #392]	; 0x188
    5c3a:	2b04      	cmp	r3, #4
    5c3c:	f040 80a0 	bne.w	5d80 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5f4>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    5c40:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    5c42:	2b04      	cmp	r3, #4
    5c44:	f040 809e 	bne.w	5d84 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5f8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    5c48:	9b63      	ldr	r3, [sp, #396]	; 0x18c
    5c4a:	930c      	str	r3, [sp, #48]	; 0x30
    5c4c:	9a5d      	ldr	r2, [sp, #372]	; 0x174
    5c4e:	9217      	str	r2, [sp, #92]	; 0x5c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    5c50:	429a      	cmp	r2, r3
    5c52:	f040 8099 	bne.w	5d88 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5fc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    5c56:	f8dd a198 	ldr.w	sl, [sp, #408]	; 0x198
    5c5a:	9b60      	ldr	r3, [sp, #384]	; 0x180
    5c5c:	930e      	str	r3, [sp, #56]	; 0x38
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    5c5e:	4553      	cmp	r3, sl
    5c60:	f040 8094 	bne.w	5d8c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x600>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    5c64:	9b64      	ldr	r3, [sp, #400]	; 0x190
    5c66:	930b      	str	r3, [sp, #44]	; 0x2c
    5c68:	f8dd 9194 	ldr.w	r9, [sp, #404]	; 0x194
    5c6c:	9b5e      	ldr	r3, [sp, #376]	; 0x178
    5c6e:	9316      	str	r3, [sp, #88]	; 0x58
    5c70:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
    5c72:	9315      	str	r3, [sp, #84]	; 0x54
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
    5c74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    5c76:	2b00      	cmp	r3, #0
    5c78:	f340 813f 	ble.w	5efa <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x76e>
    5c7c:	f04f 0800 	mov.w	r8, #0
    5c80:	952a      	str	r5, [sp, #168]	; 0xa8
    5c82:	b223      	sxth	r3, r4
    5c84:	9328      	str	r3, [sp, #160]	; 0xa0
    5c86:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
    5c8a:	fb09 f30a 	mul.w	r3, r9, sl
    5c8e:	930a      	str	r3, [sp, #40]	; 0x28
    5c90:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
    5c94:	4653      	mov	r3, sl
    5c96:	46c2      	mov	sl, r8
    5c98:	4698      	mov	r8, r3
    for (int out_y = 0; out_y < output_height; ++out_y) {
    5c9a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    5c9c:	2a00      	cmp	r2, #0
    5c9e:	f340 8126 	ble.w	5eee <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x762>
    5ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5ca4:	9325      	str	r3, [sp, #148]	; 0x94
    5ca6:	9928      	ldr	r1, [sp, #160]	; 0xa0
    5ca8:	18c8      	adds	r0, r1, r3
    5caa:	9023      	str	r0, [sp, #140]	; 0x8c
    5cac:	4249      	negs	r1, r1
    5cae:	9112      	str	r1, [sp, #72]	; 0x48
    5cb0:	2100      	movs	r1, #0
    5cb2:	9113      	str	r1, [sp, #76]	; 0x4c
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    5cb4:	fb03 f30a 	mul.w	r3, r3, sl
    5cb8:	9326      	str	r3, [sp, #152]	; 0x98
    5cba:	fb02 f30a 	mul.w	r3, r2, sl
    5cbe:	9327      	str	r3, [sp, #156]	; 0x9c
      for (int out_x = 0; out_x < output_width; ++out_x) {
    5cc0:	9a15      	ldr	r2, [sp, #84]	; 0x54
    5cc2:	2a00      	cmp	r2, #0
    5cc4:	f340 8105 	ble.w	5ed2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x746>
    5cc8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    5cca:	9925      	ldr	r1, [sp, #148]	; 0x94
    5ccc:	1a59      	subs	r1, r3, r1
    5cce:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    5cd2:	9119      	str	r1, [sp, #100]	; 0x64
    5cd4:	9821      	ldr	r0, [sp, #132]	; 0x84
    5cd6:	4298      	cmp	r0, r3
    5cd8:	bfa8      	it	ge
    5cda:	4618      	movge	r0, r3
    5cdc:	9007      	str	r0, [sp, #28]
    5cde:	9b20      	ldr	r3, [sp, #128]	; 0x80
    5ce0:	9329      	str	r3, [sp, #164]	; 0xa4
    5ce2:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
    5ce6:	eb03 0009 	add.w	r0, r3, r9
    5cea:	901f      	str	r0, [sp, #124]	; 0x7c
    5cec:	425b      	negs	r3, r3
    5cee:	9311      	str	r3, [sp, #68]	; 0x44
          const int filter_x_start = std::max(0, -in_x_origin);
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
    5cf0:	2300      	movs	r3, #0
    5cf2:	930f      	str	r3, [sp, #60]	; 0x3c
    5cf4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    5cf6:	9812      	ldr	r0, [sp, #72]	; 0x48
    5cf8:	4403      	add	r3, r0
    5cfa:	440b      	add	r3, r1
    5cfc:	991e      	ldr	r1, [sp, #120]	; 0x78
    5cfe:	fb01 f303 	mul.w	r3, r1, r3
    5d02:	9324      	str	r3, [sp, #144]	; 0x90
    5d04:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    5d06:	9913      	ldr	r1, [sp, #76]	; 0x4c
    5d08:	440b      	add	r3, r1
    5d0a:	fb02 f303 	mul.w	r3, r2, r3
    5d0e:	931c      	str	r3, [sp, #112]	; 0x70
        for (int channel = 0; channel < depth; ++channel) {
    5d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5d12:	2b00      	cmp	r3, #0
    5d14:	f340 80cf 	ble.w	5eb6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x72a>
              (out_x * stride_width) - params.padding_values.width;
    5d18:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5d1a:	9318      	str	r3, [sp, #96]	; 0x60
    5d1c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    5d1e:	991e      	ldr	r1, [sp, #120]	; 0x78
    5d20:	1a51      	subs	r1, r2, r1
    5d22:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    5d26:	9105      	str	r1, [sp, #20]
    5d28:	981d      	ldr	r0, [sp, #116]	; 0x74
    5d2a:	4290      	cmp	r0, r2
    5d2c:	bfa8      	it	ge
    5d2e:	4610      	movge	r0, r2
    5d30:	9006      	str	r0, [sp, #24]
              std::min(params.filter_width, input_width - in_x_origin);
    5d32:	2400      	movs	r4, #0
    5d34:	9a24      	ldr	r2, [sp, #144]	; 0x90
    5d36:	18d3      	adds	r3, r2, r3
    5d38:	440b      	add	r3, r1
    5d3a:	fb08 f303 	mul.w	r3, r8, r3
    5d3e:	931a      	str	r3, [sp, #104]	; 0x68
    5d40:	e095      	b.n	5e6e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6e2>
  RuntimeShape() : size_(0) {}
    5d42:	2300      	movs	r3, #0
    5d44:	9362      	str	r3, [sp, #392]	; 0x188
    5d46:	9314      	str	r3, [sp, #80]	; 0x50
    5d48:	e74f      	b.n	5bea <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x45e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    5d4a:	a863      	add	r0, sp, #396	; 0x18c
    5d4c:	e746      	b.n	5bdc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x450>
  RuntimeShape() : size_(0) {}
    5d4e:	2300      	movs	r3, #0
    5d50:	935c      	str	r3, [sp, #368]	; 0x170
    5d52:	931b      	str	r3, [sp, #108]	; 0x6c
    5d54:	e763      	b.n	5c1e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x492>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    5d56:	a85d      	add	r0, sp, #372	; 0x174
    5d58:	e75b      	b.n	5c12 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x486>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    5d5a:	4b03      	ldr	r3, [pc, #12]	; (5d68 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5dc>)
    5d5c:	4798      	blx	r3
    5d5e:	bf00      	nop
    5d60:	0001607d 	.word	0x0001607d
    5d64:	000160b9 	.word	0x000160b9
    5d68:	0001739d 	.word	0x0001739d
    5d6c:	1ffffffe 	.word	0x1ffffffe
    5d70:	0000cd6d 	.word	0x0000cd6d
    5d74:	00018121 	.word	0x00018121
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
    5d78:	4b61      	ldr	r3, [pc, #388]	; (5f00 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x774>)
    5d7a:	4798      	blx	r3
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
    5d7c:	4b60      	ldr	r3, [pc, #384]	; (5f00 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x774>)
    5d7e:	4798      	blx	r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    5d80:	4b5f      	ldr	r3, [pc, #380]	; (5f00 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x774>)
    5d82:	4798      	blx	r3
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    5d84:	4b5e      	ldr	r3, [pc, #376]	; (5f00 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x774>)
    5d86:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    5d88:	4b5d      	ldr	r3, [pc, #372]	; (5f00 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x774>)
    5d8a:	4798      	blx	r3
    5d8c:	4b5c      	ldr	r3, [pc, #368]	; (5f00 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x774>)
    5d8e:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    5d90:	4b5b      	ldr	r3, [pc, #364]	; (5f00 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x774>)
    5d92:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    5d94:	4b5a      	ldr	r3, [pc, #360]	; (5f00 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x774>)
    5d96:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5d98:	4b59      	ldr	r3, [pc, #356]	; (5f00 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x774>)
    5d9a:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5d9c:	4b58      	ldr	r3, [pc, #352]	; (5f00 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x774>)
    5d9e:	4798      	blx	r3
          uint8 max = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    5da0:	f10c 0c01 	add.w	ip, ip, #1
    5da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5da6:	449e      	add	lr, r3
    5da8:	3701      	adds	r7, #1
    5daa:	9b07      	ldr	r3, [sp, #28]
    5dac:	459c      	cmp	ip, r3
    5dae:	da2d      	bge.n	5e0c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x680>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    5db0:	9b05      	ldr	r3, [sp, #20]
    5db2:	9a06      	ldr	r2, [sp, #24]
    5db4:	4293      	cmp	r3, r2
    5db6:	daf3      	bge.n	5da0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x614>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    5db8:	f1ba 0f00 	cmp.w	sl, #0
    5dbc:	dbe8      	blt.n	5d90 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x604>
    5dbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5dc0:	459a      	cmp	sl, r3
    5dc2:	dae5      	bge.n	5d90 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x604>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    5dc4:	2f00      	cmp	r7, #0
    5dc6:	dbe5      	blt.n	5d94 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x608>
    5dc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5dca:	429f      	cmp	r7, r3
    5dcc:	dae2      	bge.n	5d94 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x608>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5dce:	9b08      	ldr	r3, [sp, #32]
    5dd0:	2b00      	cmp	r3, #0
    5dd2:	dbe1      	blt.n	5d98 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x60c>
    5dd4:	4599      	cmp	r9, r3
    5dd6:	dddf      	ble.n	5d98 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x60c>
    5dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5dda:	4672      	mov	r2, lr
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5ddc:	2c00      	cmp	r4, #0
    5dde:	dbdd      	blt.n	5d9c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x610>
    5de0:	4544      	cmp	r4, r8
    5de2:	dadb      	bge.n	5d9c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x610>
      if (__a < __b)
    5de4:	f89d 0128 	ldrb.w	r0, [sp, #296]	; 0x128
    5de8:	7811      	ldrb	r1, [r2, #0]
    5dea:	4288      	cmp	r0, r1
      return __a;
    5dec:	bfac      	ite	ge
    5dee:	4659      	movge	r1, fp
    5df0:	4611      	movlt	r1, r2
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
    5df2:	7809      	ldrb	r1, [r1, #0]
    5df4:	f88d 1128 	strb.w	r1, [sp, #296]	; 0x128
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    5df8:	42ab      	cmp	r3, r5
    5dfa:	d0d1      	beq.n	5da0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x614>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5dfc:	2b00      	cmp	r3, #0
    5dfe:	dbcb      	blt.n	5d98 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x60c>
    5e00:	1c59      	adds	r1, r3, #1
    5e02:	4432      	add	r2, r6
    5e04:	4599      	cmp	r9, r3
    5e06:	ddc7      	ble.n	5d98 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x60c>
    5e08:	460b      	mov	r3, r1
    5e0a:	e7e7      	b.n	5ddc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x650>
      if (__a < __b)
    5e0c:	f89d 3128 	ldrb.w	r3, [sp, #296]	; 0x128
    5e10:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    5e14:	4293      	cmp	r3, r2
    5e16:	da01      	bge.n	5e1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x690>
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
            }
          }
          max = std::max<uint8>(max, params.quantized_activation_min);
    5e18:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    5e1c:	f88d 3128 	strb.w	r3, [sp, #296]	; 0x128
      if (__b < __a)
    5e20:	9910      	ldr	r1, [sp, #64]	; 0x40
    5e22:	b2ca      	uxtb	r2, r1
    5e24:	4293      	cmp	r3, r2
          max = std::min<uint8>(max, params.quantized_activation_max);
    5e26:	bfc8      	it	gt
    5e28:	4613      	movgt	r3, r2
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    5e2a:	f1ba 0f00 	cmp.w	sl, #0
    5e2e:	db3a      	blt.n	5ea6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x71a>
    5e30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    5e32:	4592      	cmp	sl, r2
    5e34:	da37      	bge.n	5ea6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x71a>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    5e36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    5e38:	2a00      	cmp	r2, #0
    5e3a:	db36      	blt.n	5eaa <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x71e>
    5e3c:	9916      	ldr	r1, [sp, #88]	; 0x58
    5e3e:	428a      	cmp	r2, r1
    5e40:	da33      	bge.n	5eaa <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x71e>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5e42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5e44:	2a00      	cmp	r2, #0
    5e46:	db32      	blt.n	5eae <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x722>
    5e48:	9915      	ldr	r1, [sp, #84]	; 0x54
    5e4a:	428a      	cmp	r2, r1
    5e4c:	da2f      	bge.n	5eae <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x722>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5e4e:	2c00      	cmp	r4, #0
    5e50:	db2f      	blt.n	5eb2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x726>
    5e52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5e54:	4294      	cmp	r4, r2
    5e56:	da2c      	bge.n	5eb2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x726>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    5e58:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5e5a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    5e5c:	440a      	add	r2, r1
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    5e5e:	980e      	ldr	r0, [sp, #56]	; 0x38
    5e60:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
    5e62:	fb00 5202 	mla	r2, r0, r2, r5
    5e66:	5513      	strb	r3, [r2, r4]
        for (int channel = 0; channel < depth; ++channel) {
    5e68:	3401      	adds	r4, #1
    5e6a:	4284      	cmp	r4, r0
    5e6c:	d023      	beq.n	5eb6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x72a>
          uint8 max = 0;
    5e6e:	2300      	movs	r3, #0
    5e70:	f88d 3128 	strb.w	r3, [sp, #296]	; 0x128
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    5e74:	9a19      	ldr	r2, [sp, #100]	; 0x64
    5e76:	9907      	ldr	r1, [sp, #28]
    5e78:	428a      	cmp	r2, r1
    5e7a:	f280 8126 	bge.w	60ca <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x93e>
    5e7e:	4646      	mov	r6, r8
    5e80:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    5e82:	eb03 0e04 	add.w	lr, r3, r4
    5e86:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5e88:	449e      	add	lr, r3
    5e8a:	9912      	ldr	r1, [sp, #72]	; 0x48
    5e8c:	188f      	adds	r7, r1, r2
    5e8e:	4694      	mov	ip, r2
              const int in_x = in_x_origin + filter_x;
    5e90:	9b05      	ldr	r3, [sp, #20]
    5e92:	9a18      	ldr	r2, [sp, #96]	; 0x60
    5e94:	1899      	adds	r1, r3, r2
    5e96:	9108      	str	r1, [sp, #32]
    5e98:	3301      	adds	r3, #1
    5e9a:	4413      	add	r3, r2
    5e9c:	9309      	str	r3, [sp, #36]	; 0x24
    5e9e:	9b06      	ldr	r3, [sp, #24]
    5ea0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    5ea2:	189d      	adds	r5, r3, r2
    5ea4:	e784      	b.n	5db0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x624>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    5ea6:	4b16      	ldr	r3, [pc, #88]	; (5f00 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x774>)
    5ea8:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    5eaa:	4b15      	ldr	r3, [pc, #84]	; (5f00 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x774>)
    5eac:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5eae:	4b14      	ldr	r3, [pc, #80]	; (5f00 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x774>)
    5eb0:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5eb2:	4b13      	ldr	r3, [pc, #76]	; (5f00 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x774>)
    5eb4:	4798      	blx	r3
      for (int out_x = 0; out_x < output_width; ++out_x) {
    5eb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5eb8:	3301      	adds	r3, #1
    5eba:	930f      	str	r3, [sp, #60]	; 0x3c
    5ebc:	991f      	ldr	r1, [sp, #124]	; 0x7c
    5ebe:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    5ec0:	1a89      	subs	r1, r1, r2
    5ec2:	911f      	str	r1, [sp, #124]	; 0x7c
    5ec4:	9911      	ldr	r1, [sp, #68]	; 0x44
    5ec6:	4411      	add	r1, r2
    5ec8:	9111      	str	r1, [sp, #68]	; 0x44
    5eca:	9a15      	ldr	r2, [sp, #84]	; 0x54
    5ecc:	4293      	cmp	r3, r2
    5ece:	f47f af1f 	bne.w	5d10 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x584>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    5ed2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    5ed4:	3301      	adds	r3, #1
    5ed6:	9313      	str	r3, [sp, #76]	; 0x4c
    5ed8:	9923      	ldr	r1, [sp, #140]	; 0x8c
    5eda:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    5edc:	1a89      	subs	r1, r1, r2
    5ede:	9123      	str	r1, [sp, #140]	; 0x8c
    5ee0:	9912      	ldr	r1, [sp, #72]	; 0x48
    5ee2:	4411      	add	r1, r2
    5ee4:	9112      	str	r1, [sp, #72]	; 0x48
    5ee6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    5ee8:	4293      	cmp	r3, r2
    5eea:	f47f aee9 	bne.w	5cc0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x534>
  for (int batch = 0; batch < batches; ++batch) {
    5eee:	f10a 0a01 	add.w	sl, sl, #1
    5ef2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    5ef4:	459a      	cmp	sl, r3
    5ef6:	f47f aed0 	bne.w	5c9a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x50e>
  return kTfLiteOk;
    5efa:	2000      	movs	r0, #0
    5efc:	e467      	b.n	57ce <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x42>
    5efe:	bf00      	nop
    5f00:	0001739d 	.word	0x0001739d
  if (tensor == nullptr) {
    5f04:	2f00      	cmp	r7, #0
    5f06:	f000 80b2 	beq.w	606e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8e2>
  TfLiteIntArray* dims = tensor->dims;
    5f0a:	f8d7 a008 	ldr.w	sl, [r7, #8]
  const int dims_size = dims->size;
    5f0e:	f8da 9000 	ldr.w	r9, [sl]
    size_ = dimensions_count;
    5f12:	f8cd 90f8 	str.w	r9, [sp, #248]	; 0xf8
    if (dimensions_count > kMaxSmallSize) {
    5f16:	f1b9 0f05 	cmp.w	r9, #5
    5f1a:	f340 80ab 	ble.w	6074 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8e8>
      dims_pointer_ = new int32[dimensions_count];
    5f1e:	4b70      	ldr	r3, [pc, #448]	; (60e0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x954>)
    5f20:	4599      	cmp	r9, r3
    5f22:	bf94      	ite	ls
    5f24:	ea4f 0089 	movls.w	r0, r9, lsl #2
    5f28:	f04f 30ff 	movhi.w	r0, #4294967295
    5f2c:	4b6d      	ldr	r3, [pc, #436]	; (60e4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x958>)
    5f2e:	4798      	blx	r3
    5f30:	903f      	str	r0, [sp, #252]	; 0xfc
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    5f32:	ea4f 0289 	mov.w	r2, r9, lsl #2
    5f36:	f10a 0104 	add.w	r1, sl, #4
    5f3a:	4b6b      	ldr	r3, [pc, #428]	; (60e8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x95c>)
    5f3c:	4798      	blx	r3
  if (tensor == nullptr) {
    5f3e:	2e00      	cmp	r6, #0
    5f40:	f000 809a 	beq.w	6078 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8ec>
  TfLiteIntArray* dims = tensor->dims;
    5f44:	f8d6 a008 	ldr.w	sl, [r6, #8]
  const int dims_size = dims->size;
    5f48:	f8da 9000 	ldr.w	r9, [sl]
    size_ = dimensions_count;
    5f4c:	f8cd 9110 	str.w	r9, [sp, #272]	; 0x110
    if (dimensions_count > kMaxSmallSize) {
    5f50:	f1b9 0f05 	cmp.w	r9, #5
    5f54:	f340 8093 	ble.w	607e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8f2>
      dims_pointer_ = new int32[dimensions_count];
    5f58:	4b61      	ldr	r3, [pc, #388]	; (60e0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x954>)
    5f5a:	4599      	cmp	r9, r3
    5f5c:	bf94      	ite	ls
    5f5e:	ea4f 0089 	movls.w	r0, r9, lsl #2
    5f62:	f04f 30ff 	movhi.w	r0, #4294967295
    5f66:	4b5f      	ldr	r3, [pc, #380]	; (60e4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x958>)
    5f68:	4798      	blx	r3
    5f6a:	9045      	str	r0, [sp, #276]	; 0x114
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    5f6c:	ea4f 0289 	mov.w	r2, r9, lsl #2
    5f70:	f10a 0104 	add.w	r1, sl, #4
    5f74:	4b5c      	ldr	r3, [pc, #368]	; (60e8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x95c>)
    5f76:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    5f78:	f8dd 90f8 	ldr.w	r9, [sp, #248]	; 0xf8
    5f7c:	f1b9 0f03 	cmp.w	r9, #3
    5f80:	dd7f      	ble.n	6082 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8f6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    5f82:	f1b9 0f05 	cmp.w	r9, #5
    5f86:	bfc6      	itte	gt
    5f88:	9b3f      	ldrgt	r3, [sp, #252]	; 0xfc
    5f8a:	68da      	ldrgt	r2, [r3, #12]
    5f8c:	9a42      	ldrle	r2, [sp, #264]	; 0x108
    TFLITE_DCHECK_LT(i, size_);
    5f8e:	f8dd a110 	ldr.w	sl, [sp, #272]	; 0x110
    5f92:	f1ba 0f03 	cmp.w	sl, #3
    5f96:	dd76      	ble.n	6086 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8fa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    5f98:	f1ba 0f05 	cmp.w	sl, #5
    5f9c:	bfc6      	itte	gt
    5f9e:	9b45      	ldrgt	r3, [sp, #276]	; 0x114
    5fa0:	68db      	ldrgt	r3, [r3, #12]
    5fa2:	9b48      	ldrle	r3, [sp, #288]	; 0x120
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    5fa4:	4293      	cmp	r3, r2
    5fa6:	d170      	bne.n	608a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8fe>
  input_dims.n = 1;
    5fa8:	2201      	movs	r2, #1
    5faa:	9232      	str	r2, [sp, #200]	; 0xc8
    TFLITE_DCHECK_LT(i, size_);
    5fac:	4591      	cmp	r9, r2
    5fae:	dd6e      	ble.n	608e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x902>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    5fb0:	f1b9 0f05 	cmp.w	r9, #5
    5fb4:	dc6d      	bgt.n	6092 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x906>
  input_dims.h = input_shape.Dims(1);
    5fb6:	9a40      	ldr	r2, [sp, #256]	; 0x100
    5fb8:	9233      	str	r2, [sp, #204]	; 0xcc
    TFLITE_DCHECK_LT(i, size_);
    5fba:	f1b9 0f02 	cmp.w	r9, #2
    5fbe:	dd70      	ble.n	60a2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x916>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    5fc0:	9a41      	ldr	r2, [sp, #260]	; 0x104
  input_dims.w = input_shape.Dims(2);
    5fc2:	9234      	str	r2, [sp, #208]	; 0xd0
  input_dims.c = depth;
    5fc4:	9335      	str	r3, [sp, #212]	; 0xd4
  output_dims.n = 1;
    5fc6:	2201      	movs	r2, #1
    5fc8:	9236      	str	r2, [sp, #216]	; 0xd8
    TFLITE_DCHECK_LT(i, size_);
    5fca:	4592      	cmp	sl, r2
    5fcc:	dd6b      	ble.n	60a6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x91a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    5fce:	f1ba 0f05 	cmp.w	sl, #5
    5fd2:	dc6a      	bgt.n	60aa <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x91e>
  output_dims.h = output_shape.Dims(1);
    5fd4:	9a46      	ldr	r2, [sp, #280]	; 0x118
    5fd6:	9237      	str	r2, [sp, #220]	; 0xdc
    TFLITE_DCHECK_LT(i, size_);
    5fd8:	f1ba 0f02 	cmp.w	sl, #2
    5fdc:	dd6d      	ble.n	60ba <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x92e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    5fde:	9a47      	ldr	r2, [sp, #284]	; 0x11c
  output_dims.w = output_shape.Dims(2);
    5fe0:	9238      	str	r2, [sp, #224]	; 0xe0
  output_dims.c = depth;
    5fe2:	9339      	str	r3, [sp, #228]	; 0xe4
  pool_params.stride.h = params->stride_height;
    5fe4:	68a3      	ldr	r3, [r4, #8]
    5fe6:	934b      	str	r3, [sp, #300]	; 0x12c
  pool_params.stride.w = params->stride_width;
    5fe8:	6863      	ldr	r3, [r4, #4]
    5fea:	934a      	str	r3, [sp, #296]	; 0x128
  pool_params.padding.h = data.padding.height;
    5fec:	f8d8 3004 	ldr.w	r3, [r8, #4]
    5ff0:	934d      	str	r3, [sp, #308]	; 0x134
  pool_params.padding.w = data.padding.width;
    5ff2:	f8d8 3000 	ldr.w	r3, [r8]
    5ff6:	934c      	str	r3, [sp, #304]	; 0x130
  pool_params.activation.min = data.activation_min;
    5ff8:	f8d8 3014 	ldr.w	r3, [r8, #20]
    5ffc:	934e      	str	r3, [sp, #312]	; 0x138
  pool_params.activation.max = data.activation_max;
    5ffe:	f8d8 3018 	ldr.w	r3, [r8, #24]
    6002:	934f      	str	r3, [sp, #316]	; 0x13c
  filter_dims.n = 1;
    6004:	2301      	movs	r3, #1
    6006:	933a      	str	r3, [sp, #232]	; 0xe8
  filter_dims.h = params->filter_height;
    6008:	6922      	ldr	r2, [r4, #16]
    600a:	923b      	str	r2, [sp, #236]	; 0xec
  filter_dims.w = params->filter_width;
    600c:	68e2      	ldr	r2, [r4, #12]
    600e:	923c      	str	r2, [sp, #240]	; 0xf0
  filter_dims.c = 1;
    6010:	933d      	str	r3, [sp, #244]	; 0xf4
  ctx.buf = nullptr;
    6012:	2300      	movs	r3, #0
    6014:	9330      	str	r3, [sp, #192]	; 0xc0
  ctx.size = 0;
    6016:	9331      	str	r3, [sp, #196]	; 0xc4
  if (data.buffer_idx > -1) {
    6018:	f8d8 1010 	ldr.w	r1, [r8, #16]
    601c:	4299      	cmp	r1, r3
    601e:	db03      	blt.n	6028 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x89c>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
    6020:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    6022:	4628      	mov	r0, r5
    6024:	4798      	blx	r3
    6026:	9030      	str	r0, [sp, #192]	; 0xc0
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6028:	2f00      	cmp	r7, #0
    602a:	d048      	beq.n	60be <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x932>
    602c:	687b      	ldr	r3, [r7, #4]
    602e:	2e00      	cmp	r6, #0
    6030:	d047      	beq.n	60c2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x936>
    6032:	6872      	ldr	r2, [r6, #4]
  TFLITE_DCHECK_EQ(arm_max_pool_s8(&ctx, &pool_params, &input_dims,
    6034:	9202      	str	r2, [sp, #8]
    6036:	aa36      	add	r2, sp, #216	; 0xd8
    6038:	9201      	str	r2, [sp, #4]
    603a:	aa3a      	add	r2, sp, #232	; 0xe8
    603c:	9200      	str	r2, [sp, #0]
    603e:	aa32      	add	r2, sp, #200	; 0xc8
    6040:	a94a      	add	r1, sp, #296	; 0x128
    6042:	a830      	add	r0, sp, #192	; 0xc0
    6044:	4c29      	ldr	r4, [pc, #164]	; (60ec <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x960>)
    6046:	47a0      	blx	r4
                   ARM_MATH_SUCCESS);
    6048:	2800      	cmp	r0, #0
    604a:	d13c      	bne.n	60c6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x93a>
    if (size_ > kMaxSmallSize) {
    604c:	f1ba 0f05 	cmp.w	sl, #5
    6050:	dd03      	ble.n	605a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8ce>
      delete[] dims_pointer_;
    6052:	9845      	ldr	r0, [sp, #276]	; 0x114
    6054:	b108      	cbz	r0, 605a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8ce>
    6056:	4b26      	ldr	r3, [pc, #152]	; (60f0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x964>)
    6058:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    605a:	f1b9 0f05 	cmp.w	r9, #5
    605e:	dd03      	ble.n	6068 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8dc>
      delete[] dims_pointer_;
    6060:	983f      	ldr	r0, [sp, #252]	; 0xfc
    6062:	b108      	cbz	r0, 6068 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8dc>
    6064:	4b22      	ldr	r3, [pc, #136]	; (60f0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x964>)
    6066:	4798      	blx	r3
  return kTfLiteOk;
    6068:	2000      	movs	r0, #0
    606a:	f7ff bbb0 	b.w	57ce <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x42>
  RuntimeShape() : size_(0) {}
    606e:	2300      	movs	r3, #0
    6070:	933e      	str	r3, [sp, #248]	; 0xf8
    6072:	e764      	b.n	5f3e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7b2>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6074:	a83f      	add	r0, sp, #252	; 0xfc
    6076:	e75c      	b.n	5f32 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7a6>
  RuntimeShape() : size_(0) {}
    6078:	2300      	movs	r3, #0
    607a:	9344      	str	r3, [sp, #272]	; 0x110
    607c:	e77c      	b.n	5f78 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7ec>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    607e:	a845      	add	r0, sp, #276	; 0x114
    6080:	e774      	b.n	5f6c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7e0>
    TFLITE_DCHECK_LT(i, size_);
    6082:	4b1c      	ldr	r3, [pc, #112]	; (60f4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x968>)
    6084:	4798      	blx	r3
    6086:	4b1b      	ldr	r3, [pc, #108]	; (60f4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x968>)
    6088:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    608a:	4b1a      	ldr	r3, [pc, #104]	; (60f4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x968>)
    608c:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    608e:	4b19      	ldr	r3, [pc, #100]	; (60f4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x968>)
    6090:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6092:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    6094:	6851      	ldr	r1, [r2, #4]
  input_dims.h = input_shape.Dims(1);
    6096:	9133      	str	r1, [sp, #204]	; 0xcc
    TFLITE_DCHECK_LT(i, size_);
    6098:	f1b9 0f02 	cmp.w	r9, #2
    609c:	dd01      	ble.n	60a2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x916>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    609e:	6892      	ldr	r2, [r2, #8]
    60a0:	e78f      	b.n	5fc2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x836>
    TFLITE_DCHECK_LT(i, size_);
    60a2:	4b14      	ldr	r3, [pc, #80]	; (60f4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x968>)
    60a4:	4798      	blx	r3
    60a6:	4b13      	ldr	r3, [pc, #76]	; (60f4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x968>)
    60a8:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    60aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
    60ac:	6851      	ldr	r1, [r2, #4]
  output_dims.h = output_shape.Dims(1);
    60ae:	9137      	str	r1, [sp, #220]	; 0xdc
    TFLITE_DCHECK_LT(i, size_);
    60b0:	f1ba 0f02 	cmp.w	sl, #2
    60b4:	dd01      	ble.n	60ba <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x92e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    60b6:	6892      	ldr	r2, [r2, #8]
    60b8:	e792      	b.n	5fe0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x854>
    TFLITE_DCHECK_LT(i, size_);
    60ba:	4b0e      	ldr	r3, [pc, #56]	; (60f4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x968>)
    60bc:	4798      	blx	r3
    60be:	2300      	movs	r3, #0
    60c0:	e7b5      	b.n	602e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8a2>
    60c2:	2200      	movs	r2, #0
    60c4:	e7b6      	b.n	6034 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8a8>
  TFLITE_DCHECK_EQ(arm_max_pool_s8(&ctx, &pool_params, &input_dims,
    60c6:	4b0b      	ldr	r3, [pc, #44]	; (60f4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x968>)
    60c8:	4798      	blx	r3
      if (__a < __b)
    60ca:	f89d 3128 	ldrb.w	r3, [sp, #296]	; 0x128
    60ce:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    60d2:	429a      	cmp	r2, r3
    60d4:	f73f aea0 	bgt.w	5e18 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68c>
          max = std::max<uint8>(max, params.quantized_activation_min);
    60d8:	f88d 3128 	strb.w	r3, [sp, #296]	; 0x128
    60dc:	e6a5      	b.n	5e2a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x69e>
    60de:	bf00      	nop
    60e0:	1ffffffe 	.word	0x1ffffffe
    60e4:	0000cd6d 	.word	0x0000cd6d
    60e8:	00018121 	.word	0x00018121
    60ec:	0000ba1d 	.word	0x0000ba1d
    60f0:	0000ccbd 	.word	0x0000ccbd
    60f4:	0001739d 	.word	0x0001739d

000060f8 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
}

TfLiteRegistration Register_MAX_POOL_2D() {
    60f8:	b470      	push	{r4, r5, r6}
    60fa:	4606      	mov	r6, r0
          /*prepare=*/pooling::MaxPrepare,
          /*invoke=*/pooling::MaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    60fc:	4604      	mov	r4, r0
    60fe:	4d05      	ldr	r5, [pc, #20]	; (6114 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x1c>)
    6100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6104:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6108:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    610c:	4630      	mov	r0, r6
    610e:	bc70      	pop	{r4, r5, r6}
    6110:	4770      	bx	lr
    6112:	bf00      	nop
    6114:	0003bda8 	.word	0x0003bda8

00006118 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
  return kTfLiteOk;
}

}  // namespace

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    6118:	b530      	push	{r4, r5, lr}
    611a:	b085      	sub	sp, #20
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    611c:	680a      	ldr	r2, [r1, #0]
    611e:	6813      	ldr	r3, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    6120:	2b01      	cmp	r3, #1
    6122:	d10d      	bne.n	6140 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    6124:	684b      	ldr	r3, [r1, #4]
    6126:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    6128:	2b01      	cmp	r3, #1
    612a:	d118      	bne.n	615e <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x46>
  return &context->tensors[node->inputs->data[index]];
    612c:	6852      	ldr	r2, [r2, #4]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    612e:	6883      	ldr	r3, [r0, #8]
    6130:	eb03 1382 	add.w	r3, r3, r2, lsl #6
    6134:	689b      	ldr	r3, [r3, #8]
  const TfLiteTensor* input = GetInput(context, node, 0);
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
    6136:	681b      	ldr	r3, [r3, #0]
    6138:	2b00      	cmp	r3, #0
    613a:	dd1e      	ble.n	617a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x62>

  return kTfLiteOk;
    613c:	2000      	movs	r0, #0
    613e:	e00c      	b.n	615a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x42>
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    6140:	2401      	movs	r4, #1
    6142:	9403      	str	r4, [sp, #12]
    6144:	9302      	str	r3, [sp, #8]
    6146:	4b11      	ldr	r3, [pc, #68]	; (618c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x74>)
    6148:	9301      	str	r3, [sp, #4]
    614a:	4b11      	ldr	r3, [pc, #68]	; (6190 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>)
    614c:	9300      	str	r3, [sp, #0]
    614e:	6945      	ldr	r5, [r0, #20]
    6150:	234a      	movs	r3, #74	; 0x4a
    6152:	4a10      	ldr	r2, [pc, #64]	; (6194 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    6154:	4910      	ldr	r1, [pc, #64]	; (6198 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x80>)
    6156:	47a8      	blx	r5
    6158:	4620      	mov	r0, r4
}
    615a:	b005      	add	sp, #20
    615c:	bd30      	pop	{r4, r5, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    615e:	2401      	movs	r4, #1
    6160:	9403      	str	r4, [sp, #12]
    6162:	9302      	str	r3, [sp, #8]
    6164:	4b09      	ldr	r3, [pc, #36]	; (618c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x74>)
    6166:	9301      	str	r3, [sp, #4]
    6168:	4b0c      	ldr	r3, [pc, #48]	; (619c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    616a:	9300      	str	r3, [sp, #0]
    616c:	6945      	ldr	r5, [r0, #20]
    616e:	234b      	movs	r3, #75	; 0x4b
    6170:	4a08      	ldr	r2, [pc, #32]	; (6194 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    6172:	4909      	ldr	r1, [pc, #36]	; (6198 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x80>)
    6174:	47a8      	blx	r5
    6176:	4620      	mov	r0, r4
    6178:	e7ef      	b.n	615a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x42>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
    617a:	4b09      	ldr	r3, [pc, #36]	; (61a0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x88>)
    617c:	9300      	str	r3, [sp, #0]
    617e:	6944      	ldr	r4, [r0, #20]
    6180:	234d      	movs	r3, #77	; 0x4d
    6182:	4a04      	ldr	r2, [pc, #16]	; (6194 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    6184:	4907      	ldr	r1, [pc, #28]	; (61a4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
    6186:	47a0      	blx	r4
    6188:	2001      	movs	r0, #1
    618a:	e7e6      	b.n	615a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x42>
    618c:	0003bf08 	.word	0x0003bf08
    6190:	0003becc 	.word	0x0003becc
    6194:	0003be94 	.word	0x0003be94
    6198:	0003b724 	.word	0x0003b724
    619c:	0003bedc 	.word	0x0003bedc
    61a0:	0003bef0 	.word	0x0003bef0
    61a4:	0003ad08 	.word	0x0003ad08

000061a8 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:

// Takes a tensor and performs softmax along the last dimension.
void SoftmaxFloat(const TfLiteTensor* input, TfLiteTensor* output,
                  const SoftmaxParams& op_data) {
    61a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61ac:	b099      	sub	sp, #100	; 0x64
    61ae:	460d      	mov	r5, r1
    61b0:	4693      	mov	fp, r2
  if (tensor == nullptr) {
    61b2:	2800      	cmp	r0, #0
    61b4:	f000 811a 	beq.w	63ec <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x244>
    61b8:	4607      	mov	r7, r0
  const int dims_size = dims->size;
    61ba:	6886      	ldr	r6, [r0, #8]
    61bc:	f856 4b04 	ldr.w	r4, [r6], #4
    size_ = dimensions_count;
    61c0:	940c      	str	r4, [sp, #48]	; 0x30
    if (dimensions_count > kMaxSmallSize) {
    61c2:	2c05      	cmp	r4, #5
    61c4:	f340 8115 	ble.w	63f2 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x24a>
      dims_pointer_ = new int32[dimensions_count];
    61c8:	4b9c      	ldr	r3, [pc, #624]	; (643c <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x294>)
    61ca:	429c      	cmp	r4, r3
    61cc:	bf94      	ite	ls
    61ce:	00a0      	lslls	r0, r4, #2
    61d0:	f04f 30ff 	movhi.w	r0, #4294967295
    61d4:	4b9a      	ldr	r3, [pc, #616]	; (6440 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x298>)
    61d6:	4798      	blx	r3
    61d8:	900d      	str	r0, [sp, #52]	; 0x34
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    61da:	00a2      	lsls	r2, r4, #2
    61dc:	4631      	mov	r1, r6
    61de:	4b99      	ldr	r3, [pc, #612]	; (6444 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x29c>)
    61e0:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    61e2:	687c      	ldr	r4, [r7, #4]
  if (tensor == nullptr) {
    61e4:	2d00      	cmp	r5, #0
    61e6:	f000 8106 	beq.w	63f6 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x24e>
  const int dims_size = dims->size;
    61ea:	68af      	ldr	r7, [r5, #8]
    61ec:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    61f0:	9612      	str	r6, [sp, #72]	; 0x48
    if (dimensions_count > kMaxSmallSize) {
    61f2:	2e05      	cmp	r6, #5
    61f4:	f340 8101 	ble.w	63fa <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x252>
      dims_pointer_ = new int32[dimensions_count];
    61f8:	4b90      	ldr	r3, [pc, #576]	; (643c <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x294>)
    61fa:	429e      	cmp	r6, r3
    61fc:	bf94      	ite	ls
    61fe:	00b0      	lslls	r0, r6, #2
    6200:	f04f 30ff 	movhi.w	r0, #4294967295
    6204:	4b8e      	ldr	r3, [pc, #568]	; (6440 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x298>)
    6206:	4798      	blx	r3
    6208:	9013      	str	r0, [sp, #76]	; 0x4c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    620a:	00b2      	lsls	r2, r6, #2
    620c:	4639      	mov	r1, r7
    620e:	4b8d      	ldr	r3, [pc, #564]	; (6444 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x29c>)
    6210:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6212:	686d      	ldr	r5, [r5, #4]
  inline int32 DimensionsCount() const { return size_; }
    6214:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6216:	4618      	mov	r0, r3
    6218:	9308      	str	r3, [sp, #32]
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    621a:	461a      	mov	r2, r3
    621c:	1e5f      	subs	r7, r3, #1

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
    621e:	2b00      	cmp	r3, #0
    6220:	dd27      	ble.n	6272 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xca>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6222:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TFLITE_DCHECK_LT(i, size_);
    6226:	9912      	ldr	r1, [sp, #72]	; 0x48
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6228:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    622c:	2201      	movs	r2, #1
    622e:	2300      	movs	r3, #0
    6230:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    6234:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
    6238:	46a2      	mov	sl, r4
    if (i != skip_dim) {
    623a:	429f      	cmp	r7, r3
    623c:	d014      	beq.n	6268 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc0>
    TFLITE_DCHECK_GE(i, 0);
    623e:	2b00      	cmp	r3, #0
    6240:	f2c0 80dd 	blt.w	63fe <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x256>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6244:	2805      	cmp	r0, #5
    6246:	bfcc      	ite	gt
    6248:	f859 6023 	ldrgt.w	r6, [r9, r3, lsl #2]
    624c:	f85e 6022 	ldrle.w	r6, [lr, r2, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    6250:	428b      	cmp	r3, r1
    6252:	f280 80d6 	bge.w	6402 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x25a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6256:	2905      	cmp	r1, #5
    6258:	bfcc      	ite	gt
    625a:	f858 4023 	ldrgt.w	r4, [r8, r3, lsl #2]
    625e:	f85c 4022 	ldrle.w	r4, [ip, r2, lsl #2]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    6262:	42b4      	cmp	r4, r6
    6264:	f040 80cf 	bne.w	6406 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x25e>
  for (int i = 0; i < dims_count; ++i) {
    6268:	3301      	adds	r3, #1
    626a:	3201      	adds	r2, #1
    626c:	4298      	cmp	r0, r3
    626e:	d1e4      	bne.n	623a <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x92>
    6270:	4654      	mov	r4, sl
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    6272:	2f00      	cmp	r7, #0
    6274:	f2c0 80c9 	blt.w	640a <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x262>
    6278:	9b08      	ldr	r3, [sp, #32]
    627a:	42bb      	cmp	r3, r7
    627c:	f340 80c5 	ble.w	640a <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x262>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6280:	9b08      	ldr	r3, [sp, #32]
    6282:	2b05      	cmp	r3, #5
    6284:	f340 80d4 	ble.w	6430 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x288>
    6288:	990d      	ldr	r1, [sp, #52]	; 0x34
  for (int i = 0; i < dims_count; ++i) {
    628a:	2b00      	cmp	r3, #0
    628c:	f340 80bf 	ble.w	640e <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x266>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6290:	2301      	movs	r3, #1
    6292:	461e      	mov	r6, r3
    6294:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    6296:	4630      	mov	r0, r6
    6298:	f8dd e020 	ldr.w	lr, [sp, #32]
    629c:	429f      	cmp	r7, r3
    629e:	bf14      	ite	ne
    62a0:	f851 2023 	ldrne.w	r2, [r1, r3, lsl #2]
    62a4:	4602      	moveq	r2, r0
    62a6:	fb02 f606 	mul.w	r6, r2, r6
  for (int i = 0; i < dims_count; ++i) {
    62aa:	3301      	adds	r3, #1
    62ac:	459e      	cmp	lr, r3
    62ae:	dcf5      	bgt.n	629c <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xf4>
    62b0:	9607      	str	r6, [sp, #28]
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    62b2:	9b08      	ldr	r3, [sp, #32]
    62b4:	2b05      	cmp	r3, #5
    62b6:	f300 80ac 	bgt.w	6412 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x26a>
    62ba:	ab18      	add	r3, sp, #96	; 0x60
    62bc:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    62c0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    TFLITE_DCHECK_LT(i, size_);
    62c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    62c6:	9209      	str	r2, [sp, #36]	; 0x24
    62c8:	4297      	cmp	r7, r2
    62ca:	f280 80a9 	bge.w	6420 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x278>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    62ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    62d0:	2a05      	cmp	r2, #5
    62d2:	f300 80a7 	bgt.w	6424 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x27c>
    62d6:	aa18      	add	r2, sp, #96	; 0x60
    62d8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    62dc:	f857 7c14 	ldr.w	r7, [r7, #-20]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    62e0:	429f      	cmp	r7, r3
    62e2:	f040 80a3 	bne.w	642c <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x284>
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
    62e6:	9b07      	ldr	r3, [sp, #28]
    62e8:	2b00      	cmp	r3, #0
    62ea:	dd6e      	ble.n	63ca <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x222>
    62ec:	00bb      	lsls	r3, r7, #2
    62ee:	9306      	str	r3, [sp, #24]
    62f0:	9403      	str	r4, [sp, #12]
    62f2:	9504      	str	r5, [sp, #16]
    62f4:	2300      	movs	r3, #0
    62f6:	9305      	str	r3, [sp, #20]
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
    for (int c = 0; c < depth; ++c) {
    62f8:	465b      	mov	r3, fp
    62fa:	46bb      	mov	fp, r7
    62fc:	461f      	mov	r7, r3
    float max = std::numeric_limits<float>::lowest();
    62fe:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    6302:	930b      	str	r3, [sp, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
    6304:	f1bb 0f00 	cmp.w	fp, #0
    6308:	dd50      	ble.n	63ac <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x204>
    630a:	9b06      	ldr	r3, [sp, #24]
    630c:	461a      	mov	r2, r3
    630e:	9c03      	ldr	r4, [sp, #12]
    6310:	eb02 0804 	add.w	r8, r2, r4
      return __a;
    6314:	ae0b      	add	r6, sp, #44	; 0x2c
      max = std::max(max, input_data[i * depth + c]);
    6316:	4625      	mov	r5, r4
    6318:	3404      	adds	r4, #4
      if (__a < __b)
    631a:	6829      	ldr	r1, [r5, #0]
    631c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    631e:	4b4a      	ldr	r3, [pc, #296]	; (6448 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2a0>)
    6320:	4798      	blx	r3
      return __a;
    6322:	2800      	cmp	r0, #0
    6324:	bf08      	it	eq
    6326:	4635      	moveq	r5, r6
    6328:	682d      	ldr	r5, [r5, #0]
    632a:	950b      	str	r5, [sp, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
    632c:	4544      	cmp	r4, r8
    632e:	d1f2      	bne.n	6316 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x16e>
    6330:	9e03      	ldr	r6, [sp, #12]
    6332:	2300      	movs	r3, #0
    6334:	9301      	str	r3, [sp, #4]
    6336:	2400      	movs	r4, #0
    }

    // Compute sum.
    float sum = 0.f;
    for (int c = 0; c < depth; ++c) {
      sum += std::exp((input_data[i * depth + c] - max) *
    6338:	f8df a128 	ldr.w	sl, [pc, #296]	; 6464 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2bc>
    633c:	f8df 9128 	ldr.w	r9, [pc, #296]	; 6468 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2c0>
    6340:	9502      	str	r5, [sp, #8]
    6342:	f856 8b04 	ldr.w	r8, [r6], #4
                      static_cast<float>(params.beta));
    6346:	e9d7 0100 	ldrd	r0, r1, [r7]
    634a:	4b40      	ldr	r3, [pc, #256]	; (644c <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2a4>)
    634c:	4798      	blx	r3
    634e:	4605      	mov	r5, r0
      sum += std::exp((input_data[i * depth + c] - max) *
    6350:	9902      	ldr	r1, [sp, #8]
    6352:	4640      	mov	r0, r8
    6354:	47d0      	blx	sl
    6356:	4601      	mov	r1, r0
    6358:	4628      	mov	r0, r5
    635a:	47c8      	blx	r9
  { return __builtin_expf(__x); }
    635c:	4b3c      	ldr	r3, [pc, #240]	; (6450 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2a8>)
    635e:	4798      	blx	r3
    6360:	4601      	mov	r1, r0
    6362:	9801      	ldr	r0, [sp, #4]
    6364:	4b3b      	ldr	r3, [pc, #236]	; (6454 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2ac>)
    6366:	4798      	blx	r3
    6368:	9001      	str	r0, [sp, #4]
    for (int c = 0; c < depth; ++c) {
    636a:	3401      	adds	r4, #1
    636c:	455c      	cmp	r4, fp
    636e:	d1e8      	bne.n	6342 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x19a>
    6370:	9e04      	ldr	r6, [sp, #16]
    6372:	9d03      	ldr	r5, [sp, #12]
    6374:	2400      	movs	r4, #0
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
    6376:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 6464 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2bc>
                                            static_cast<float>(params.beta)) /
    637a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 644c <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2a4>
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
    637e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 6468 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2c0>
    6382:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6384:	f855 0b04 	ldr.w	r0, [r5], #4
    6388:	47d0      	blx	sl
    638a:	9002      	str	r0, [sp, #8]
                                            static_cast<float>(params.beta)) /
    638c:	e9d7 0100 	ldrd	r0, r1, [r7]
    6390:	47c8      	blx	r9
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
    6392:	4601      	mov	r1, r0
    6394:	9802      	ldr	r0, [sp, #8]
    6396:	47c0      	blx	r8
    6398:	4b2d      	ldr	r3, [pc, #180]	; (6450 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2a8>)
    639a:	4798      	blx	r3
                                            static_cast<float>(params.beta)) /
    639c:	9901      	ldr	r1, [sp, #4]
    639e:	4b2e      	ldr	r3, [pc, #184]	; (6458 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b0>)
    63a0:	4798      	blx	r3
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
    63a2:	f846 0b04 	str.w	r0, [r6], #4
    for (int c = 0; c < depth; ++c) {
    63a6:	3401      	adds	r4, #1
    63a8:	455c      	cmp	r4, fp
    63aa:	d1ea      	bne.n	6382 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x1da>
  for (int i = 0; i < outer_size; ++i) {
    63ac:	9b05      	ldr	r3, [sp, #20]
    63ae:	3301      	adds	r3, #1
    63b0:	9305      	str	r3, [sp, #20]
    63b2:	9a03      	ldr	r2, [sp, #12]
    63b4:	4610      	mov	r0, r2
    63b6:	9906      	ldr	r1, [sp, #24]
    63b8:	4408      	add	r0, r1
    63ba:	9003      	str	r0, [sp, #12]
    63bc:	9a04      	ldr	r2, [sp, #16]
    63be:	4610      	mov	r0, r2
    63c0:	4408      	add	r0, r1
    63c2:	9004      	str	r0, [sp, #16]
    63c4:	9a07      	ldr	r2, [sp, #28]
    63c6:	4293      	cmp	r3, r2
    63c8:	d199      	bne.n	62fe <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x156>
    if (size_ > kMaxSmallSize) {
    63ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    63cc:	2b05      	cmp	r3, #5
    63ce:	dd03      	ble.n	63d8 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x230>
      delete[] dims_pointer_;
    63d0:	9813      	ldr	r0, [sp, #76]	; 0x4c
    63d2:	b108      	cbz	r0, 63d8 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x230>
    63d4:	4b21      	ldr	r3, [pc, #132]	; (645c <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b4>)
    63d6:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    63d8:	9b08      	ldr	r3, [sp, #32]
    63da:	2b05      	cmp	r3, #5
    63dc:	dd03      	ble.n	63e6 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x23e>
      delete[] dims_pointer_;
    63de:	980d      	ldr	r0, [sp, #52]	; 0x34
    63e0:	b108      	cbz	r0, 63e6 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x23e>
    63e2:	4b1e      	ldr	r3, [pc, #120]	; (645c <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b4>)
    63e4:	4798      	blx	r3
  tflite::reference_ops::Softmax(
      op_data, GetTensorShape(input), GetTensorData<float>(input),
      GetTensorShape(output), GetTensorData<float>(output));
}
    63e6:	b019      	add	sp, #100	; 0x64
    63e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  RuntimeShape() : size_(0) {}
    63ec:	2400      	movs	r4, #0
    63ee:	940c      	str	r4, [sp, #48]	; 0x30
    63f0:	e6f8      	b.n	61e4 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x3c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    63f2:	a80d      	add	r0, sp, #52	; 0x34
    63f4:	e6f1      	b.n	61da <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x32>
  RuntimeShape() : size_(0) {}
    63f6:	9512      	str	r5, [sp, #72]	; 0x48
    63f8:	e70c      	b.n	6214 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x6c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    63fa:	a813      	add	r0, sp, #76	; 0x4c
    63fc:	e705      	b.n	620a <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x62>
    TFLITE_DCHECK_GE(i, 0);
    63fe:	4b18      	ldr	r3, [pc, #96]	; (6460 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b8>)
    6400:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    6402:	4b17      	ldr	r3, [pc, #92]	; (6460 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b8>)
    6404:	4798      	blx	r3
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    6406:	4b16      	ldr	r3, [pc, #88]	; (6460 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b8>)
    6408:	4798      	blx	r3
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    640a:	4b15      	ldr	r3, [pc, #84]	; (6460 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b8>)
    640c:	4798      	blx	r3
  int flat_size = 1;
    640e:	2301      	movs	r3, #1
    6410:	9307      	str	r3, [sp, #28]
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6414:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    6418:	e754      	b.n	62c4 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x11c>
  int flat_size = 1;
    641a:	2301      	movs	r3, #1
    641c:	9307      	str	r3, [sp, #28]
    641e:	e74c      	b.n	62ba <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x112>
    TFLITE_DCHECK_LT(i, size_);
    6420:	4b0f      	ldr	r3, [pc, #60]	; (6460 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b8>)
    6422:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6424:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6426:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    642a:	e759      	b.n	62e0 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x138>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    642c:	4b0c      	ldr	r3, [pc, #48]	; (6460 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b8>)
    642e:	4798      	blx	r3
  for (int i = 0; i < dims_count; ++i) {
    6430:	9b08      	ldr	r3, [sp, #32]
    6432:	2b00      	cmp	r3, #0
    6434:	ddf1      	ble.n	641a <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x272>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6436:	a90d      	add	r1, sp, #52	; 0x34
    6438:	e72a      	b.n	6290 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xe8>
    643a:	bf00      	nop
    643c:	1ffffffe 	.word	0x1ffffffe
    6440:	0000cd6d 	.word	0x0000cd6d
    6444:	00018121 	.word	0x00018121
    6448:	0001607d 	.word	0x0001607d
    644c:	00015a85 	.word	0x00015a85
    6450:	00014e61 	.word	0x00014e61
    6454:	00015b31 	.word	0x00015b31
    6458:	00015ea9 	.word	0x00015ea9
    645c:	0000ccbd 	.word	0x0000ccbd
    6460:	0001739d 	.word	0x0001739d
    6464:	00015b2d 	.word	0x00015b2d
    6468:	00015d41 	.word	0x00015d41

0000646c <_ZN6tflite3ops5micro16Register_SOFTMAXEv>:
      return kTfLiteError;
  }
}
}  // namespace activations

TfLiteRegistration Register_SOFTMAX() {
    646c:	b470      	push	{r4, r5, r6}
    646e:	4606      	mov	r6, r0
          /*prepare=*/activations::SoftmaxPrepare,
          /*invoke=*/activations::SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    6470:	4604      	mov	r4, r0
    6472:	4d05      	ldr	r5, [pc, #20]	; (6488 <_ZN6tflite3ops5micro16Register_SOFTMAXEv+0x1c>)
    6474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6478:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    647c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    6480:	4630      	mov	r0, r6
    6482:	bc70      	pop	{r4, r5, r6}
    6484:	4770      	bx	lr
    6486:	bf00      	nop
    6488:	0003be18 	.word	0x0003be18

0000648c <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    648c:	4288      	cmp	r0, r1
    648e:	d01c      	beq.n	64ca <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x3e>
// A FixedPoint multiplication is just a
// SaturatingRoundingDoublingHighMul operation on the underlying
// raw integer values. The IntegerBits simply add up, as is obvious
// from the fact that the range is [-2^IntegerBits, 2^IntegerBits).
template <typename tRawType, int tIntegerBits_a, int tIntegerBits_b>
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    6490:	b430      	push	{r4, r5}
  std::int64_t a_64(a);
    6492:	17c5      	asrs	r5, r0, #31
  std::int64_t b_64(b);
    6494:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    6496:	fb00 f303 	mul.w	r3, r0, r3
    649a:	fb01 3305 	mla	r3, r1, r5, r3
    649e:	fba0 0101 	umull	r0, r1, r0, r1
    64a2:	4419      	add	r1, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    64a4:	2800      	cmp	r0, #0
    64a6:	f171 0300 	sbcs.w	r3, r1, #0
    64aa:	db14      	blt.n	64d6 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    64ac:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    64b0:	f141 0100 	adc.w	r1, r1, #0
    64b4:	4602      	mov	r2, r0
    64b6:	460b      	mov	r3, r1
    64b8:	2800      	cmp	r0, #0
    64ba:	f171 0400 	sbcs.w	r4, r1, #0
    64be:	db1f      	blt.n	6500 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x74>
    64c0:	0fd0      	lsrs	r0, r2, #31
    64c2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    FixedPoint<tRawType, tIntegerBits_a> a,
    FixedPoint<tRawType, tIntegerBits_b> b) {
  FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> c;
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
  return c;
}
    64c6:	bc30      	pop	{r4, r5}
    64c8:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    64ca:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    64ce:	d1df      	bne.n	6490 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4>
    64d0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    64d4:	4770      	bx	lr
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    64d6:	4a0d      	ldr	r2, [pc, #52]	; (650c <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x80>)
    64d8:	f04f 33ff 	mov.w	r3, #4294967295
    64dc:	1880      	adds	r0, r0, r2
    64de:	4159      	adcs	r1, r3
    64e0:	4602      	mov	r2, r0
    64e2:	460b      	mov	r3, r1
    64e4:	2800      	cmp	r0, #0
    64e6:	f171 0400 	sbcs.w	r4, r1, #0
    64ea:	db03      	blt.n	64f4 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x68>
    64ec:	0fd0      	lsrs	r0, r2, #31
    64ee:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    64f2:	e7e8      	b.n	64c6 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x3a>
    64f4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    64f8:	2300      	movs	r3, #0
    64fa:	1812      	adds	r2, r2, r0
    64fc:	414b      	adcs	r3, r1
    64fe:	e7f5      	b.n	64ec <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x60>
    6500:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    6504:	2300      	movs	r3, #0
    6506:	1812      	adds	r2, r2, r0
    6508:	414b      	adcs	r3, r1
    650a:	e7d9      	b.n	64c0 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x34>
    650c:	c0000001 	.word	0xc0000001

00006510 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
    6510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  std::int64_t sum = a64 + b64;
    6514:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    6518:	2300      	movs	r3, #0
    651a:	1814      	adds	r4, r2, r0
    651c:	eb43 75e0 	adc.w	r5, r3, r0, asr #31
  std::int64_t sign = sum >= 0 ? 1 : -1;
    6520:	2c00      	cmp	r4, #0
    6522:	f175 0300 	sbcs.w	r3, r5, #0
    6526:	bfb9      	ittee	lt
    6528:	f04f 32ff 	movlt.w	r2, #4294967295
    652c:	f04f 33ff 	movlt.w	r3, #4294967295
    6530:	2201      	movge	r2, #1
    6532:	2300      	movge	r3, #0
  return static_cast<std::int32_t>((sum + sign) / 2);
    6534:	18a0      	adds	r0, r4, r2
    6536:	eb45 0103 	adc.w	r1, r5, r3
    653a:	0fcb      	lsrs	r3, r1, #31
    653c:	18c0      	adds	r0, r0, r3
    653e:	f141 0100 	adc.w	r1, r1, #0
    6542:	1049      	asrs	r1, r1, #1
    6544:	ea4f 0030 	mov.w	r0, r0, rrx
    6548:	4683      	mov	fp, r0
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
    654a:	4956      	ldr	r1, [pc, #344]	; (66a4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x194>)
    654c:	4b56      	ldr	r3, [pc, #344]	; (66a8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x198>)
    654e:	4798      	blx	r3
  return a + b;
    6550:	f100 345a 	add.w	r4, r0, #1515870810	; 0x5a5a5a5a
    6554:	2503      	movs	r5, #3
  for (int i = 0; i < 3; i++) {
    F2 half_denominator_times_x = half_denominator * x;
    6556:	f8df a150 	ldr.w	sl, [pc, #336]	; 66a8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x198>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    655a:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
    655e:	f04f 0900 	mov.w	r9, #0
    6562:	e068      	b.n	6636 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x126>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6564:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    6568:	d16c      	bne.n	6644 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x134>
  return a ? BitNot(zero) : zero;
    656a:	f04f 3eff 	mov.w	lr, #4294967295
    656e:	2000      	movs	r0, #0
             : wide_shifted > max ? max
    6570:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    6574:	e050      	b.n	6618 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x108>
             ? min
    6576:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    657a:	e04d      	b.n	6618 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x108>
  return a ? BitNot(zero) : zero;
    657c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    6580:	bfb4      	ite	lt
    6582:	2300      	movlt	r3, #0
    6584:	2301      	movge	r3, #1
    6586:	4258      	negs	r0, r3
    6588:	f1b4 4f40 	cmp.w	r4, #3221225472	; 0xc0000000
    658c:	bfcc      	ite	gt
    658e:	2200      	movgt	r2, #0
    6590:	2201      	movle	r2, #1
    6592:	4251      	negs	r1, r2
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
    6594:	17e5      	asrs	r5, r4, #31
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    6596:	1924      	adds	r4, r4, r4
    6598:	416d      	adcs	r5, r5
             ? min
    659a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    659e:	f175 36ff 	sbcs.w	r6, r5, #4294967295
    65a2:	db14      	blt.n	65ce <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbe>
             : wide_shifted > max ? max
    65a4:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    65a8:	2700      	movs	r7, #0
    65aa:	42a6      	cmp	r6, r4
    65ac:	eb77 0605 	sbcs.w	r6, r7, r5
    65b0:	bfb8      	it	lt
    65b2:	f06f 4400 	mvnlt.w	r4, #2147483648	; 0x80000000
  return a & b;
    65b6:	3b01      	subs	r3, #1
    65b8:	401c      	ands	r4, r3
    65ba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  return a ^ b;
    65be:	4060      	eors	r0, r4
  return a & b;
    65c0:	3a01      	subs	r2, #1
    65c2:	4010      	ands	r0, r2
    65c4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
  return a ^ b;
    65c8:	4058      	eors	r0, r3
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
}
    65ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
             ? min
    65ce:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    65d2:	e7f0      	b.n	65b6 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa6>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    65d4:	0fd1      	lsrs	r1, r2, #31
    65d6:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
  return a ? BitNot(zero) : zero;
    65da:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    65de:	f04f 3eff 	mov.w	lr, #4294967295
    65e2:	bfb8      	it	lt
    65e4:	f04f 0e00 	movlt.w	lr, #0
    65e8:	f1b1 4f60 	cmp.w	r1, #3758096384	; 0xe0000000
    65ec:	f04f 30ff 	mov.w	r0, #4294967295
    65f0:	bfc8      	it	gt
    65f2:	2000      	movgt	r0, #0
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
    65f4:	460a      	mov	r2, r1
    65f6:	17cb      	asrs	r3, r1, #31
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    65f8:	009f      	lsls	r7, r3, #2
    65fa:	ea47 7791 	orr.w	r7, r7, r1, lsr #30
    65fe:	008e      	lsls	r6, r1, #2
             ? min
    6600:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
    6604:	f177 33ff 	sbcs.w	r3, r7, #4294967295
    6608:	dbb5      	blt.n	6576 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x66>
             : wide_shifted > max ? max
    660a:	45b0      	cmp	r8, r6
    660c:	eb79 0307 	sbcs.w	r3, r9, r7
    6610:	bfac      	ite	ge
    6612:	4632      	movge	r2, r6
    6614:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
    6618:	ea6f 030e 	mvn.w	r3, lr
  return a & b;
    661c:	4013      	ands	r3, r2
    661e:	f02e 4e00 	bic.w	lr, lr, #2147483648	; 0x80000000
  return a ^ b;
    6622:	ea83 030e 	eor.w	r3, r3, lr
  return ~a;
    6626:	43c2      	mvns	r2, r0
  return a & b;
    6628:	4013      	ands	r3, r2
    662a:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  return a ^ b;
    662e:	4043      	eors	r3, r0
  return a + b;
    6630:	441c      	add	r4, r3
  for (int i = 0; i < 3; i++) {
    6632:	3d01      	subs	r5, #1
    6634:	d0a2      	beq.n	657c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x6c>
    F2 half_denominator_times_x = half_denominator * x;
    6636:	4621      	mov	r1, r4
    6638:	4658      	mov	r0, fp
    663a:	47d0      	blx	sl
  return a - b;
    663c:	f1c0 5e00 	rsb	lr, r0, #536870912	; 0x20000000
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6640:	4574      	cmp	r4, lr
    6642:	d08f      	beq.n	6564 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x54>
  std::int64_t b_64(b);
    6644:	4672      	mov	r2, lr
    6646:	17d3      	asrs	r3, r2, #31
  std::int64_t a_64(a);
    6648:	17e1      	asrs	r1, r4, #31
  std::int64_t ab_64 = a_64 * b_64;
    664a:	fb0e f201 	mul.w	r2, lr, r1
    664e:	fb04 2303 	mla	r3, r4, r3, r2
    6652:	fbae 0104 	umull	r0, r1, lr, r4
    6656:	4419      	add	r1, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    6658:	2800      	cmp	r0, #0
    665a:	f171 0300 	sbcs.w	r3, r1, #0
    665e:	db0e      	blt.n	667e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x16e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    6660:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    6664:	f141 0100 	adc.w	r1, r1, #0
    6668:	4602      	mov	r2, r0
    666a:	460b      	mov	r3, r1
    666c:	2800      	cmp	r0, #0
    666e:	f171 0e00 	sbcs.w	lr, r1, #0
    6672:	daaf      	bge.n	65d4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xc4>
    6674:	eb10 0208 	adds.w	r2, r0, r8
    6678:	eb41 0309 	adc.w	r3, r1, r9
    667c:	e7aa      	b.n	65d4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xc4>
    667e:	4a0b      	ldr	r2, [pc, #44]	; (66ac <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x19c>)
    6680:	f04f 33ff 	mov.w	r3, #4294967295
    6684:	1812      	adds	r2, r2, r0
    6686:	414b      	adcs	r3, r1
    6688:	4610      	mov	r0, r2
    668a:	4619      	mov	r1, r3
    668c:	2a00      	cmp	r2, #0
    668e:	f173 0e00 	sbcs.w	lr, r3, #0
    6692:	da03      	bge.n	669c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x18c>
    6694:	eb12 0008 	adds.w	r0, r2, r8
    6698:	eb43 0109 	adc.w	r1, r3, r9
    669c:	0fc3      	lsrs	r3, r0, #31
    669e:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
    66a2:	e79a      	b.n	65da <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xca>
    66a4:	c3c3c3c4 	.word	0xc3c3c3c4
    66a8:	0000648d 	.word	0x0000648d
    66ac:	c0000001 	.word	0xc0000001

000066b0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    66b0:	4288      	cmp	r0, r1
    66b2:	d01c      	beq.n	66ee <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x3e>
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    66b4:	b430      	push	{r4, r5}
  std::int64_t a_64(a);
    66b6:	17c5      	asrs	r5, r0, #31
  std::int64_t b_64(b);
    66b8:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    66ba:	fb00 f303 	mul.w	r3, r0, r3
    66be:	fb01 3305 	mla	r3, r1, r5, r3
    66c2:	fba0 0101 	umull	r0, r1, r0, r1
    66c6:	4419      	add	r1, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    66c8:	2800      	cmp	r0, #0
    66ca:	f171 0300 	sbcs.w	r3, r1, #0
    66ce:	db14      	blt.n	66fa <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    66d0:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    66d4:	f141 0100 	adc.w	r1, r1, #0
    66d8:	4602      	mov	r2, r0
    66da:	460b      	mov	r3, r1
    66dc:	2800      	cmp	r0, #0
    66de:	f171 0400 	sbcs.w	r4, r1, #0
    66e2:	db1f      	blt.n	6724 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x74>
    66e4:	0fd0      	lsrs	r0, r2, #31
    66e6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
}
    66ea:	bc30      	pop	{r4, r5}
    66ec:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    66ee:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    66f2:	d1df      	bne.n	66b4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4>
    66f4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    66f8:	4770      	bx	lr
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    66fa:	4a0d      	ldr	r2, [pc, #52]	; (6730 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x80>)
    66fc:	f04f 33ff 	mov.w	r3, #4294967295
    6700:	1880      	adds	r0, r0, r2
    6702:	4159      	adcs	r1, r3
    6704:	4602      	mov	r2, r0
    6706:	460b      	mov	r3, r1
    6708:	2800      	cmp	r0, #0
    670a:	f171 0400 	sbcs.w	r4, r1, #0
    670e:	db03      	blt.n	6718 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x68>
    6710:	0fd0      	lsrs	r0, r2, #31
    6712:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    6716:	e7e8      	b.n	66ea <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x3a>
    6718:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    671c:	2300      	movs	r3, #0
    671e:	1812      	adds	r2, r2, r0
    6720:	414b      	adcs	r3, r1
    6722:	e7f5      	b.n	6710 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x60>
    6724:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    6728:	2300      	movs	r3, #0
    672a:	1812      	adds	r2, r2, r0
    672c:	414b      	adcs	r3, r1
    672e:	e7d9      	b.n	66e4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x34>
    6730:	c0000001 	.word	0xc0000001

00006734 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
    6734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
    6738:	4f14      	ldr	r7, [pc, #80]	; (678c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x58>)
  return a + b;
    673a:	f100 5680 	add.w	r6, r0, #268435456	; 0x10000000
  F x2 = x * x;
    673e:	4631      	mov	r1, r6
    6740:	4630      	mov	r0, r6
    6742:	4d13      	ldr	r5, [pc, #76]	; (6790 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x5c>)
    6744:	47a8      	blx	r5
    6746:	4604      	mov	r4, r0
  F x3 = x2 * x;
    6748:	4631      	mov	r1, r6
    674a:	47a8      	blx	r5
    674c:	4680      	mov	r8, r0
  F x4 = x2 * x2;
    674e:	4621      	mov	r1, r4
    6750:	4620      	mov	r0, r4
    6752:	47a8      	blx	r5
  return a & b;
    6754:	0fc3      	lsrs	r3, r0, #31
  return a + b;
    6756:	3301      	adds	r3, #1
  return a & b;
    6758:	f000 0203 	and.w	r2, r0, #3
  return a >> offset;
    675c:	1080      	asrs	r0, r0, #2
  return a + b;
    675e:	4293      	cmp	r3, r2
    6760:	bfb8      	it	lt
    6762:	3001      	addlt	r0, #1
      SaturatingRoundingMultiplyByPOT<-1>(
    6764:	490b      	ldr	r1, [pc, #44]	; (6794 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x60>)
    6766:	4440      	add	r0, r8
    6768:	47a8      	blx	r5
  return a + b;
    676a:	4420      	add	r0, r4
  return a & b;
    676c:	f000 0301 	and.w	r3, r0, #1
  return a ? BitNot(zero) : zero;
    6770:	ebb3 7fd0 	cmp.w	r3, r0, lsr #31
  return a & b;
    6774:	bfcc      	ite	gt
    6776:	2401      	movgt	r4, #1
    6778:	2400      	movle	r4, #0
  return a + b;
    677a:	eb04 0060 	add.w	r0, r4, r0, asr #1
  return AddSaturatingIf16Bit(
    677e:	1981      	adds	r1, r0, r6
    6780:	4638      	mov	r0, r7
    6782:	47a8      	blx	r5
}
    6784:	4438      	add	r0, r7
    6786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    678a:	bf00      	nop
    678c:	70f5a894 	.word	0x70f5a894
    6790:	000066b1 	.word	0x000066b1
    6794:	2aaaaaab 	.word	0x2aaaaaab

00006798 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
    6798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    679c:	4605      	mov	r5, r0
  return a - b;
    679e:	f040 447f 	orr.w	r4, r0, #4278190080	; 0xff000000
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
    67a2:	17e3      	asrs	r3, r4, #31
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    67a4:	0159      	lsls	r1, r3, #5
    67a6:	ea41 61d4 	orr.w	r1, r1, r4, lsr #27
    67aa:	0160      	lsls	r0, r4, #5
             ? min
    67ac:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    67b0:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    67b4:	db78      	blt.n	68a8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x110>
             : wide_shifted > max ? max
    67b6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    67ba:	2300      	movs	r3, #0
    67bc:	4282      	cmp	r2, r0
    67be:	418b      	sbcs	r3, r1
    67c0:	bfb8      	it	lt
    67c2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
      Rescale<0>(a_mod_quarter_minus_one_quarter));
    67c6:	4b3a      	ldr	r3, [pc, #232]	; (68b0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x118>)
    67c8:	4798      	blx	r3
    67ca:	4682      	mov	sl, r0
  return a - b;
    67cc:	1b64      	subs	r4, r4, r5
  return a ? BitNot(zero) : zero;
    67ce:	f3c4 6800 	ubfx	r8, r4, #24, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    67d2:	4938      	ldr	r1, [pc, #224]	; (68b4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x11c>)
    67d4:	4e38      	ldr	r6, [pc, #224]	; (68b8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x120>)
    67d6:	47b0      	blx	r6
  return a ? BitNot(zero) : zero;
    67d8:	f1c8 0900 	rsb	r9, r8, #0
  return a & b;
    67dc:	ea00 0909 	and.w	r9, r0, r9
    67e0:	f108 38ff 	add.w	r8, r8, #4294967295
    67e4:	ea08 080a 	and.w	r8, r8, sl
  return a ^ b;
    67e8:	ea89 0808 	eor.w	r8, r9, r8
  return a ? BitNot(zero) : zero;
    67ec:	f3c4 6940 	ubfx	r9, r4, #25, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
    67f0:	4932      	ldr	r1, [pc, #200]	; (68bc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x124>)
    67f2:	4640      	mov	r0, r8
    67f4:	47b0      	blx	r6
  return a ? BitNot(zero) : zero;
    67f6:	f1c9 0a00 	rsb	sl, r9, #0
  return a & b;
    67fa:	ea00 0a0a 	and.w	sl, r0, sl
    67fe:	f109 39ff 	add.w	r9, r9, #4294967295
    6802:	ea09 0908 	and.w	r9, r9, r8
  return a ^ b;
    6806:	ea8a 0909 	eor.w	r9, sl, r9
  return a ? BitNot(zero) : zero;
    680a:	f3c4 6a80 	ubfx	sl, r4, #26, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
    680e:	492c      	ldr	r1, [pc, #176]	; (68c0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x128>)
    6810:	4648      	mov	r0, r9
    6812:	47b0      	blx	r6
  return a ? BitNot(zero) : zero;
    6814:	f1ca 0800 	rsb	r8, sl, #0
  return a & b;
    6818:	ea00 0808 	and.w	r8, r0, r8
    681c:	f10a 3aff 	add.w	sl, sl, #4294967295
    6820:	ea0a 0a09 	and.w	sl, sl, r9
  return a ^ b;
    6824:	ea88 0a0a 	eor.w	sl, r8, sl
  return a ? BitNot(zero) : zero;
    6828:	f3c4 68c0 	ubfx	r8, r4, #27, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
    682c:	4925      	ldr	r1, [pc, #148]	; (68c4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x12c>)
    682e:	4650      	mov	r0, sl
    6830:	47b0      	blx	r6
  return a ? BitNot(zero) : zero;
    6832:	f1c8 0900 	rsb	r9, r8, #0
  return a & b;
    6836:	ea00 0909 	and.w	r9, r0, r9
    683a:	f108 38ff 	add.w	r8, r8, #4294967295
    683e:	ea08 080a 	and.w	r8, r8, sl
  return a ^ b;
    6842:	ea89 0808 	eor.w	r8, r9, r8
  return a ? BitNot(zero) : zero;
    6846:	f3c4 7700 	ubfx	r7, r4, #28, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
    684a:	491f      	ldr	r1, [pc, #124]	; (68c8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x130>)
    684c:	4640      	mov	r0, r8
    684e:	47b0      	blx	r6
  return a ? BitNot(zero) : zero;
    6850:	f1c7 0900 	rsb	r9, r7, #0
  return a & b;
    6854:	ea00 0009 	and.w	r0, r0, r9
    6858:	f107 39ff 	add.w	r9, r7, #4294967295
    685c:	ea09 0908 	and.w	r9, r9, r8
  return a ^ b;
    6860:	ea80 0909 	eor.w	r9, r0, r9
  return a ? BitNot(zero) : zero;
    6864:	f3c4 7840 	ubfx	r8, r4, #29, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
    6868:	4918      	ldr	r1, [pc, #96]	; (68cc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x134>)
    686a:	4648      	mov	r0, r9
    686c:	47b0      	blx	r6
  return a ? BitNot(zero) : zero;
    686e:	f1c8 0700 	rsb	r7, r8, #0
  return a & b;
    6872:	4007      	ands	r7, r0
    6874:	f108 38ff 	add.w	r8, r8, #4294967295
    6878:	ea08 0009 	and.w	r0, r8, r9
  return a ^ b;
    687c:	4047      	eors	r7, r0
  return a ? BitNot(zero) : zero;
    687e:	f3c4 7480 	ubfx	r4, r4, #30, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
    6882:	21f2      	movs	r1, #242	; 0xf2
    6884:	4638      	mov	r0, r7
    6886:	47b0      	blx	r6
  return a ? BitNot(zero) : zero;
    6888:	4263      	negs	r3, r4
  return a & b;
    688a:	4018      	ands	r0, r3
    688c:	3c01      	subs	r4, #1
    688e:	403c      	ands	r4, r7
  return a ^ b;
    6890:	4044      	eors	r4, r0
  return a ? BitNot(zero) : zero;
    6892:	fab5 f385 	clz	r3, r5
    6896:	095b      	lsrs	r3, r3, #5
  return a & b;
    6898:	1e58      	subs	r0, r3, #1
    689a:	4020      	ands	r0, r4
  return a ? BitNot(zero) : zero;
    689c:	425b      	negs	r3, r3
  return a & b;
    689e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
    68a2:	4058      	eors	r0, r3
    68a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
             ? min
    68a8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    68ac:	e78b      	b.n	67c6 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x2e>
    68ae:	bf00      	nop
    68b0:	00006735 	.word	0x00006735
    68b4:	63afbe7b 	.word	0x63afbe7b
    68b8:	000066b1 	.word	0x000066b1
    68bc:	4da2cbf2 	.word	0x4da2cbf2
    68c0:	2f16ac6c 	.word	0x2f16ac6c
    68c4:	1152aaa4 	.word	0x1152aaa4
    68c8:	02582ab7 	.word	0x02582ab7
    68cc:	000afe11 	.word	0x000afe11

000068d0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
  return a & b;
    68d0:	0fc3      	lsrs	r3, r0, #31
  return a + b;
    68d2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
  return a & b;
    68d6:	f3c0 020b 	ubfx	r2, r0, #0, #12
  return a >> offset;
    68da:	1300      	asrs	r0, r0, #12
}
    68dc:	4293      	cmp	r3, r2
    68de:	bfb8      	it	lt
    68e0:	3001      	addlt	r0, #1
    68e2:	4770      	bx	lr

000068e4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:
                      const SoftmaxParams& op_data) {
    68e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68e8:	b0af      	sub	sp, #188	; 0xbc
    68ea:	460d      	mov	r5, r1
    68ec:	4614      	mov	r4, r2
  if (tensor == nullptr) {
    68ee:	4606      	mov	r6, r0
    68f0:	2800      	cmp	r0, #0
    68f2:	f000 80b7 	beq.w	6a64 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x180>
  TfLiteIntArray* dims = tensor->dims;
    68f6:	f8d0 8008 	ldr.w	r8, [r0, #8]
  const int dims_size = dims->size;
    68fa:	f8d8 7000 	ldr.w	r7, [r8]
    size_ = dimensions_count;
    68fe:	9718      	str	r7, [sp, #96]	; 0x60
    if (dimensions_count > kMaxSmallSize) {
    6900:	2f05      	cmp	r7, #5
    6902:	f340 80b2 	ble.w	6a6a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x186>
      dims_pointer_ = new int32[dimensions_count];
    6906:	4bab      	ldr	r3, [pc, #684]	; (6bb4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2d0>)
    6908:	429f      	cmp	r7, r3
    690a:	bf94      	ite	ls
    690c:	00b8      	lslls	r0, r7, #2
    690e:	f04f 30ff 	movhi.w	r0, #4294967295
    6912:	4ba9      	ldr	r3, [pc, #676]	; (6bb8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2d4>)
    6914:	4798      	blx	r3
    6916:	9019      	str	r0, [sp, #100]	; 0x64
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    6918:	00ba      	lsls	r2, r7, #2
    691a:	f108 0104 	add.w	r1, r8, #4
    691e:	4ba7      	ldr	r3, [pc, #668]	; (6bbc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2d8>)
    6920:	4798      	blx	r3
  if (tensor == nullptr) {
    6922:	2d00      	cmp	r5, #0
    6924:	f000 80a3 	beq.w	6a6e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x18a>
  TfLiteIntArray* dims = tensor->dims;
    6928:	f8d5 8008 	ldr.w	r8, [r5, #8]
  const int dims_size = dims->size;
    692c:	f8d8 7000 	ldr.w	r7, [r8]
    size_ = dimensions_count;
    6930:	9712      	str	r7, [sp, #72]	; 0x48
    if (dimensions_count > kMaxSmallSize) {
    6932:	2f05      	cmp	r7, #5
    6934:	f340 809e 	ble.w	6a74 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x190>
      dims_pointer_ = new int32[dimensions_count];
    6938:	4b9e      	ldr	r3, [pc, #632]	; (6bb4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2d0>)
    693a:	429f      	cmp	r7, r3
    693c:	bf94      	ite	ls
    693e:	00b8      	lslls	r0, r7, #2
    6940:	f04f 30ff 	movhi.w	r0, #4294967295
    6944:	4b9c      	ldr	r3, [pc, #624]	; (6bb8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2d4>)
    6946:	4798      	blx	r3
    6948:	9013      	str	r0, [sp, #76]	; 0x4c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    694a:	00ba      	lsls	r2, r7, #2
    694c:	f108 0104 	add.w	r1, r8, #4
    6950:	4b9a      	ldr	r3, [pc, #616]	; (6bbc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2d8>)
    6952:	4798      	blx	r3
  if (input->type == kTfLiteUInt8) {
    6954:	7833      	ldrb	r3, [r6, #0]
    6956:	2b03      	cmp	r3, #3
    6958:	f000 808e 	beq.w	6a78 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x194>
    if (output->type == kTfLiteInt16) {
    695c:	782b      	ldrb	r3, [r5, #0]
    695e:	2b07      	cmp	r3, #7
    6960:	f000 81ed 	beq.w	6d3e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x45a>
  inline int32 DimensionsCount() const { return size_; }
    6964:	9818      	ldr	r0, [sp, #96]	; 0x60
      const int trailing_dim = input_shape.DimensionsCount() - 1;
    6966:	f100 3cff 	add.w	ip, r0, #4294967295
  for (int i = 0; i < dims_count; ++i) {
    696a:	2800      	cmp	r0, #0
    696c:	dd27      	ble.n	69be <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xda>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    696e:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
    TFLITE_DCHECK_LT(i, size_);
    6972:	9912      	ldr	r1, [sp, #72]	; 0x48
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6974:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    6978:	2201      	movs	r2, #1
    697a:	2300      	movs	r3, #0
    697c:	f10d 0948 	add.w	r9, sp, #72	; 0x48
    6980:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    6984:	46a6      	mov	lr, r4
    if (i != skip_dim) {
    6986:	459c      	cmp	ip, r3
    6988:	d014      	beq.n	69b4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xd0>
    TFLITE_DCHECK_GE(i, 0);
    698a:	2b00      	cmp	r3, #0
    698c:	f2c0 8354 	blt.w	7038 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x754>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6990:	2805      	cmp	r0, #5
    6992:	bfcc      	ite	gt
    6994:	f85b 7023 	ldrgt.w	r7, [fp, r3, lsl #2]
    6998:	f858 7022 	ldrle.w	r7, [r8, r2, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    699c:	428b      	cmp	r3, r1
    699e:	f280 834d 	bge.w	703c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x758>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    69a2:	2905      	cmp	r1, #5
    69a4:	bfcc      	ite	gt
    69a6:	f85a 4023 	ldrgt.w	r4, [sl, r3, lsl #2]
    69aa:	f859 4022 	ldrle.w	r4, [r9, r2, lsl #2]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    69ae:	42bc      	cmp	r4, r7
    69b0:	f040 8346 	bne.w	7040 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x75c>
  for (int i = 0; i < dims_count; ++i) {
    69b4:	3301      	adds	r3, #1
    69b6:	3201      	adds	r2, #1
    69b8:	4298      	cmp	r0, r3
    69ba:	d1e4      	bne.n	6986 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xa2>
    69bc:	4674      	mov	r4, lr
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    69be:	f1bc 0f00 	cmp.w	ip, #0
    69c2:	f2c0 833f 	blt.w	7044 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x760>
    69c6:	4584      	cmp	ip, r0
    69c8:	f280 833c 	bge.w	7044 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x760>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    69cc:	2805      	cmp	r0, #5
    69ce:	f340 8421 	ble.w	7214 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x930>
    69d2:	9f19      	ldr	r7, [sp, #100]	; 0x64
  for (int i = 0; i < dims_count; ++i) {
    69d4:	2800      	cmp	r0, #0
    69d6:	f340 8337 	ble.w	7048 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x764>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    69da:	2101      	movs	r1, #1
    69dc:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    69de:	468e      	mov	lr, r1
    69e0:	459c      	cmp	ip, r3
    69e2:	bf14      	ite	ne
    69e4:	f857 2023 	ldrne.w	r2, [r7, r3, lsl #2]
    69e8:	4672      	moveq	r2, lr
    69ea:	fb02 f101 	mul.w	r1, r2, r1
  for (int i = 0; i < dims_count; ++i) {
    69ee:	3301      	adds	r3, #1
    69f0:	4298      	cmp	r0, r3
    69f2:	dcf5      	bgt.n	69e0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xfc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    69f4:	2805      	cmp	r0, #5
    69f6:	f300 8328 	bgt.w	704a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x766>
    69fa:	ab2e      	add	r3, sp, #184	; 0xb8
    69fc:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    6a00:	f853 0c54 	ldr.w	r0, [r3, #-84]
    TFLITE_DCHECK_LT(i, size_);
    6a04:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6a06:	459c      	cmp	ip, r3
    6a08:	f280 8325 	bge.w	7056 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x772>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6a0c:	2b05      	cmp	r3, #5
    6a0e:	f300 8324 	bgt.w	705a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x776>
    6a12:	ab2e      	add	r3, sp, #184	; 0xb8
    6a14:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
    6a18:	f85c 2c6c 	ldr.w	r2, [ip, #-108]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    6a1c:	4282      	cmp	r2, r0
    6a1e:	f040 8320 	bne.w	7062 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x77e>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    6a22:	2e00      	cmp	r6, #0
    6a24:	f000 831f 	beq.w	7066 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x782>
    6a28:	6870      	ldr	r0, [r6, #4]
                     op_data.input_multiplier, op_data.input_left_shift,
    6a2a:	68a3      	ldr	r3, [r4, #8]
    6a2c:	68e6      	ldr	r6, [r4, #12]
                     op_data.diff_min, GetTensorData<int8_t>(output));
    6a2e:	69a4      	ldr	r4, [r4, #24]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6a30:	2d00      	cmp	r5, #0
    6a32:	f000 831a 	beq.w	706a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x786>
    6a36:	686d      	ldr	r5, [r5, #4]
    6a38:	9502      	str	r5, [sp, #8]
    6a3a:	9401      	str	r4, [sp, #4]
    6a3c:	9600      	str	r6, [sp, #0]
    6a3e:	4c60      	ldr	r4, [pc, #384]	; (6bc0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2dc>)
    6a40:	47a0      	blx	r4
    if (size_ > kMaxSmallSize) {
    6a42:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6a44:	2b05      	cmp	r3, #5
    6a46:	dd03      	ble.n	6a50 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x16c>
      delete[] dims_pointer_;
    6a48:	9813      	ldr	r0, [sp, #76]	; 0x4c
    6a4a:	b108      	cbz	r0, 6a50 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x16c>
    6a4c:	4b5d      	ldr	r3, [pc, #372]	; (6bc4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2e0>)
    6a4e:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    6a50:	9b18      	ldr	r3, [sp, #96]	; 0x60
    6a52:	2b05      	cmp	r3, #5
    6a54:	dd03      	ble.n	6a5e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x17a>
      delete[] dims_pointer_;
    6a56:	9819      	ldr	r0, [sp, #100]	; 0x64
    6a58:	b108      	cbz	r0, 6a5e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x17a>
    6a5a:	4b5a      	ldr	r3, [pc, #360]	; (6bc4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2e0>)
    6a5c:	4798      	blx	r3
}
    6a5e:	b02f      	add	sp, #188	; 0xbc
    6a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  RuntimeShape() : size_(0) {}
    6a64:	2300      	movs	r3, #0
    6a66:	9318      	str	r3, [sp, #96]	; 0x60
    6a68:	e75b      	b.n	6922 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x3e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6a6a:	a819      	add	r0, sp, #100	; 0x64
    6a6c:	e754      	b.n	6918 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x34>
  RuntimeShape() : size_(0) {}
    6a6e:	2300      	movs	r3, #0
    6a70:	9312      	str	r3, [sp, #72]	; 0x48
    6a72:	e76f      	b.n	6954 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x70>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6a74:	a813      	add	r0, sp, #76	; 0x4c
    6a76:	e768      	b.n	694a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x66>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    6a78:	2e00      	cmp	r6, #0
    6a7a:	d074      	beq.n	6b66 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x282>
    6a7c:	f8d6 a004 	ldr.w	sl, [r6, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6a80:	2d00      	cmp	r5, #0
    6a82:	d073      	beq.n	6b6c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x288>
    6a84:	f8d5 b004 	ldr.w	fp, [r5, #4]
// Quantized softmax with int8/uint8 input and int8/uint8/int16 output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32 input_beta_multiplier = params.input_multiplier;
    6a88:	68a6      	ldr	r6, [r4, #8]
  const int32 input_beta_left_shift = params.input_left_shift;
    6a8a:	68e3      	ldr	r3, [r4, #12]
    6a8c:	9306      	str	r3, [sp, #24]
  const int diff_min = params.diff_min;
    6a8e:	69a3      	ldr	r3, [r4, #24]
    6a90:	9307      	str	r3, [sp, #28]
  inline int32 DimensionsCount() const { return size_; }
    6a92:	9918      	ldr	r1, [sp, #96]	; 0x60
  using FixedPointScaledDiff =
      gemmlowp::FixedPoint<int32, kScaledDiffIntegerBits>;
  using FixedPointAccum = gemmlowp::FixedPoint<int32, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
    6a94:	1e4f      	subs	r7, r1, #1
  for (int i = 0; i < dims_count; ++i) {
    6a96:	2900      	cmp	r1, #0
    6a98:	dd22      	ble.n	6ae0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x1fc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6a9a:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
    TFLITE_DCHECK_LT(i, size_);
    6a9e:	9812      	ldr	r0, [sp, #72]	; 0x48
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6aa0:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    6aa4:	2201      	movs	r2, #1
    6aa6:	2300      	movs	r3, #0
    6aa8:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    6aac:	f10d 0e60 	add.w	lr, sp, #96	; 0x60
    if (i != skip_dim) {
    6ab0:	429f      	cmp	r7, r3
    6ab2:	d011      	beq.n	6ad8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x1f4>
    TFLITE_DCHECK_GE(i, 0);
    6ab4:	2b00      	cmp	r3, #0
    6ab6:	db5c      	blt.n	6b72 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x28e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6ab8:	2905      	cmp	r1, #5
    6aba:	bfcc      	ite	gt
    6abc:	f859 4023 	ldrgt.w	r4, [r9, r3, lsl #2]
    6ac0:	f85e 4022 	ldrle.w	r4, [lr, r2, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    6ac4:	4283      	cmp	r3, r0
    6ac6:	da56      	bge.n	6b76 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x292>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6ac8:	2805      	cmp	r0, #5
    6aca:	bfcc      	ite	gt
    6acc:	f858 5023 	ldrgt.w	r5, [r8, r3, lsl #2]
    6ad0:	f85c 5022 	ldrle.w	r5, [ip, r2, lsl #2]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    6ad4:	42a5      	cmp	r5, r4
    6ad6:	d150      	bne.n	6b7a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x296>
  for (int i = 0; i < dims_count; ++i) {
    6ad8:	3301      	adds	r3, #1
    6ada:	3201      	adds	r2, #1
    6adc:	4299      	cmp	r1, r3
    6ade:	d1e7      	bne.n	6ab0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x1cc>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    6ae0:	2f00      	cmp	r7, #0
    6ae2:	db4c      	blt.n	6b7e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x29a>
    6ae4:	42b9      	cmp	r1, r7
    6ae6:	dd4a      	ble.n	6b7e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x29a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6ae8:	2905      	cmp	r1, #5
    6aea:	f340 82c0 	ble.w	706e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x78a>
    6aee:	9819      	ldr	r0, [sp, #100]	; 0x64
  for (int i = 0; i < dims_count; ++i) {
    6af0:	2900      	cmp	r1, #0
    6af2:	dd46      	ble.n	6b82 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x29e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6af4:	2301      	movs	r3, #1
    6af6:	461d      	mov	r5, r3
    6af8:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    6afa:	462c      	mov	r4, r5
    6afc:	429f      	cmp	r7, r3
    6afe:	bf14      	ite	ne
    6b00:	f850 2023 	ldrne.w	r2, [r0, r3, lsl #2]
    6b04:	4622      	moveq	r2, r4
    6b06:	fb02 f505 	mul.w	r5, r2, r5
  for (int i = 0; i < dims_count; ++i) {
    6b0a:	3301      	adds	r3, #1
    6b0c:	4299      	cmp	r1, r3
    6b0e:	dcf5      	bgt.n	6afc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x218>
    6b10:	950c      	str	r5, [sp, #48]	; 0x30
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6b12:	2905      	cmp	r1, #5
    6b14:	dc37      	bgt.n	6b86 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2a2>
    6b16:	ab2e      	add	r3, sp, #184	; 0xb8
    6b18:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    6b1c:	f853 2c54 	ldr.w	r2, [r3, #-84]
    TFLITE_DCHECK_LT(i, size_);
    6b20:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6b22:	429f      	cmp	r7, r3
    6b24:	da36      	bge.n	6b94 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6b26:	2b05      	cmp	r3, #5
    6b28:	dc36      	bgt.n	6b98 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b4>
    6b2a:	ab2e      	add	r3, sp, #184	; 0xb8
    6b2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    6b30:	f857 3c6c 	ldr.w	r3, [r7, #-108]
    6b34:	930a      	str	r3, [sp, #40]	; 0x28
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    6b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6b38:	4293      	cmp	r3, r2
    6b3a:	d132      	bne.n	6ba2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2be>
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
    6b3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6b3e:	2b00      	cmp	r3, #0
    6b40:	f77f af7f 	ble.w	6a42 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x15e>
    6b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6b46:	930d      	str	r3, [sp, #52]	; 0x34
    6b48:	eb0a 0703 	add.w	r7, sl, r3
    6b4c:	f8cd a020 	str.w	sl, [sp, #32]
    6b50:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    6b54:	2300      	movs	r3, #0
    6b56:	930b      	str	r3, [sp, #44]	; 0x2c
  std::int64_t b_64(b);
    6b58:	4633      	mov	r3, r6
    6b5a:	17f4      	asrs	r4, r6, #31
    6b5c:	e9cd 3404 	strd	r3, r4, [sp, #16]
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    6b60:	f8dd 801c 	ldr.w	r8, [sp, #28]
    6b64:	e0cf      	b.n	6d06 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x422>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    6b66:	f04f 0a00 	mov.w	sl, #0
    6b6a:	e789      	b.n	6a80 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x19c>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6b6c:	f04f 0b00 	mov.w	fp, #0
    6b70:	e78a      	b.n	6a88 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x1a4>
    TFLITE_DCHECK_GE(i, 0);
    6b72:	4b15      	ldr	r3, [pc, #84]	; (6bc8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2e4>)
    6b74:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    6b76:	4b14      	ldr	r3, [pc, #80]	; (6bc8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2e4>)
    6b78:	4798      	blx	r3
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    6b7a:	4b13      	ldr	r3, [pc, #76]	; (6bc8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2e4>)
    6b7c:	4798      	blx	r3
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    6b7e:	4b12      	ldr	r3, [pc, #72]	; (6bc8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2e4>)
    6b80:	4798      	blx	r3
  int flat_size = 1;
    6b82:	2301      	movs	r3, #1
    6b84:	930c      	str	r3, [sp, #48]	; 0x30
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6b86:	9b19      	ldr	r3, [sp, #100]	; 0x64
    6b88:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    6b8c:	e7c8      	b.n	6b20 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x23c>
  int flat_size = 1;
    6b8e:	2301      	movs	r3, #1
    6b90:	930c      	str	r3, [sp, #48]	; 0x30
    6b92:	e7c0      	b.n	6b16 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x232>
    TFLITE_DCHECK_LT(i, size_);
    6b94:	4b0c      	ldr	r3, [pc, #48]	; (6bc8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2e4>)
    6b96:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6b98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6b9a:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    6b9e:	930a      	str	r3, [sp, #40]	; 0x28
    6ba0:	e7c9      	b.n	6b36 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x252>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    6ba2:	4b09      	ldr	r3, [pc, #36]	; (6bc8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2e4>)
    6ba4:	4798      	blx	r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6ba6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6baa:	f040 827b 	bne.w	70a4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7c0>
    6bae:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6bb2:	e264      	b.n	707e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x79a>
    6bb4:	1ffffffe 	.word	0x1ffffffe
    6bb8:	0000cd6d 	.word	0x0000cd6d
    6bbc:	00018121 	.word	0x00018121
    6bc0:	0000bcc5 	.word	0x0000bcc5
    6bc4:	0000ccbd 	.word	0x0000ccbd
    6bc8:	0001739d 	.word	0x0001739d
      input_val);
}

inline int32 GetReciprocal(int32 x, int x_integer_digits,
                           int* num_bits_over_unit) {
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
    6bcc:	4650      	mov	r0, sl
  return integer_input ? __builtin_clz(integer_input)
    6bce:	f1ba 0f00 	cmp.w	sl, #0
    6bd2:	d11a      	bne.n	6c0a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x326>
    6bd4:	f04f 0a20 	mov.w	sl, #32
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
    6bd8:	f1ca 090c 	rsb	r9, sl, #12
  const int32 shifted_sum_minus_one =
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
    6bdc:	fa00 f00a 	lsl.w	r0, r0, sl
                         (static_cast<uint32>(1) << 31));

  gemmlowp::FixedPoint<int32, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
    6be0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    6be4:	4bb2      	ldr	r3, [pc, #712]	; (6eb0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5cc>)
    6be6:	4798      	blx	r3
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
    6be8:	9007      	str	r0, [sp, #28]

    for (int c = 0; c < depth; ++c) {
    6bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6bec:	2b00      	cmp	r3, #0
    6bee:	dd78      	ble.n	6ce2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x3fe>
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);

        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
            (shifted_scale * exp_in_0).raw(),
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
    6bf0:	f109 0917 	add.w	r9, r9, #23
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    6bf4:	f04f 0a01 	mov.w	sl, #1
    6bf8:	fa0a fa09 	lsl.w	sl, sl, r9
    6bfc:	f10a 3aff 	add.w	sl, sl, #4294967295
  return a >> offset;
    6c00:	ea4f 0b6a 	mov.w	fp, sl, asr #1
    6c04:	9d09      	ldr	r5, [sp, #36]	; 0x24
    6c06:	9c08      	ldr	r4, [sp, #32]
    6c08:	e01f      	b.n	6c4a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x366>
  return integer_input ? __builtin_clz(integer_input)
    6c0a:	faba fa8a 	clz	sl, sl
    6c0e:	e7e3      	b.n	6bd8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2f4>
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
    6c10:	2000      	movs	r0, #0
  return integer_input ? __builtin_clz(integer_input)
    6c12:	f04f 0a20 	mov.w	sl, #32
    6c16:	e7df      	b.n	6bd8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2f4>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6c1c:	d120      	bne.n	6c60 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x37c>
    6c1e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6c22:	e039      	b.n	6c98 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x3b4>
  assert(exponent >= 0);
    6c24:	4ba3      	ldr	r3, [pc, #652]	; (6eb4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5d0>)
    6c26:	4aa4      	ldr	r2, [pc, #656]	; (6eb8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5d4>)
    6c28:	f44f 71b3 	mov.w	r1, #358	; 0x166
    6c2c:	48a3      	ldr	r0, [pc, #652]	; (6ebc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5d8>)
    6c2e:	4ca4      	ldr	r4, [pc, #656]	; (6ec0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5dc>)
    6c30:	47a0      	blx	r4
  assert(exponent <= 31);
    6c32:	4ba4      	ldr	r3, [pc, #656]	; (6ec4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5e0>)
    6c34:	4aa0      	ldr	r2, [pc, #640]	; (6eb8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5d4>)
    6c36:	f240 1167 	movw	r1, #359	; 0x167
    6c3a:	48a0      	ldr	r0, [pc, #640]	; (6ebc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5d8>)
    6c3c:	4ca0      	ldr	r4, [pc, #640]	; (6ec0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5dc>)
    6c3e:	47a0      	blx	r4
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    6c40:	2300      	movs	r3, #0
    6c42:	702b      	strb	r3, [r5, #0]
    6c44:	3501      	adds	r5, #1
    for (int c = 0; c < depth; ++c) {
    6c46:	42bc      	cmp	r4, r7
    6c48:	d04b      	beq.n	6ce2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x3fe>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
    6c4a:	f814 2b01 	ldrb.w	r2, [r4], #1
    6c4e:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    6c52:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    6c54:	4590      	cmp	r8, r2
    6c56:	dcf3      	bgt.n	6c40 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x35c>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    6c58:	9b06      	ldr	r3, [sp, #24]
    6c5a:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6c5c:	4296      	cmp	r6, r2
    6c5e:	d0db      	beq.n	6c18 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x334>
  std::int64_t a_64(a);
    6c60:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    6c62:	fb06 f101 	mul.w	r1, r6, r1
    6c66:	9b05      	ldr	r3, [sp, #20]
    6c68:	fb02 1103 	mla	r1, r2, r3, r1
    6c6c:	fba6 2302 	umull	r2, r3, r6, r2
    6c70:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    6c72:	2a00      	cmp	r2, #0
    6c74:	f173 0100 	sbcs.w	r1, r3, #0
    6c78:	f2c0 82e7 	blt.w	724a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x966>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    6c7c:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    6c80:	f143 0300 	adc.w	r3, r3, #0
    6c84:	4610      	mov	r0, r2
    6c86:	4619      	mov	r1, r3
    6c88:	2a00      	cmp	r2, #0
    6c8a:	f173 0e00 	sbcs.w	lr, r3, #0
    6c8e:	f2c0 8228 	blt.w	70e2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7fe>
    6c92:	0fc0      	lsrs	r0, r0, #31
    6c94:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    6c98:	4b8b      	ldr	r3, [pc, #556]	; (6ec8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5e4>)
    6c9a:	4798      	blx	r3
            (shifted_scale * exp_in_0).raw(),
    6c9c:	4601      	mov	r1, r0
    6c9e:	9807      	ldr	r0, [sp, #28]
    6ca0:	4b8a      	ldr	r3, [pc, #552]	; (6ecc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5e8>)
    6ca2:	4798      	blx	r3
  assert(exponent >= 0);
    6ca4:	f1b9 0f00 	cmp.w	r9, #0
    6ca8:	dbbc      	blt.n	6c24 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x340>
  assert(exponent <= 31);
    6caa:	f1b9 0f1f 	cmp.w	r9, #31
    6cae:	dcc0      	bgt.n	6c32 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x34e>
  return a + b;
    6cb0:	eb0b 72d0 	add.w	r2, fp, r0, lsr #31
  return a & b;
    6cb4:	ea00 030a 	and.w	r3, r0, sl
  return a >> offset;
    6cb8:	fa40 f009 	asr.w	r0, r0, r9
  return a + b;
    6cbc:	429a      	cmp	r2, r3
    6cbe:	bfb8      	it	lt
    6cc0:	3001      	addlt	r0, #1
            static_cast<int32>(std::numeric_limits<OutputT>::min());
    6cc2:	9011      	str	r0, [sp, #68]	; 0x44
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
    6cc4:	23ff      	movs	r3, #255	; 0xff
    6cc6:	932b      	str	r3, [sp, #172]	; 0xac
      if (__b < __a)
    6cc8:	4298      	cmp	r0, r3
      return __a;
    6cca:	bfd4      	ite	le
    6ccc:	ab11      	addle	r3, sp, #68	; 0x44
	return __b;
    6cce:	ab2b      	addgt	r3, sp, #172	; 0xac
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
    6cd0:	2200      	movs	r2, #0
    6cd2:	922a      	str	r2, [sp, #168]	; 0xa8
      if (__a < __b)
    6cd4:	681a      	ldr	r2, [r3, #0]
    6cd6:	2a00      	cmp	r2, #0
	return __b;
    6cd8:	bfb8      	it	lt
    6cda:	ab2a      	addlt	r3, sp, #168	; 0xa8
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    6cdc:	681b      	ldr	r3, [r3, #0]
    6cde:	702b      	strb	r3, [r5, #0]
    6ce0:	e7b0      	b.n	6c44 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x360>
  for (int i = 0; i < outer_size; ++i) {
    6ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6ce4:	3301      	adds	r3, #1
    6ce6:	930b      	str	r3, [sp, #44]	; 0x2c
    6ce8:	990d      	ldr	r1, [sp, #52]	; 0x34
    6cea:	440f      	add	r7, r1
    6cec:	9a08      	ldr	r2, [sp, #32]
    6cee:	4610      	mov	r0, r2
    6cf0:	460a      	mov	r2, r1
    6cf2:	4408      	add	r0, r1
    6cf4:	9008      	str	r0, [sp, #32]
    6cf6:	9909      	ldr	r1, [sp, #36]	; 0x24
    6cf8:	4608      	mov	r0, r1
    6cfa:	4410      	add	r0, r2
    6cfc:	9009      	str	r0, [sp, #36]	; 0x24
    6cfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6d00:	4293      	cmp	r3, r2
    6d02:	f43f ae9e 	beq.w	6a42 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x15e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    6d06:	2300      	movs	r3, #0
    6d08:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    for (int c = 0; c < depth; ++c) {
    6d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6d0e:	2b00      	cmp	r3, #0
    6d10:	f77f af7e 	ble.w	6c10 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x32c>
    6d14:	9c08      	ldr	r4, [sp, #32]
      return __a;
    6d16:	f10d 0043 	add.w	r0, sp, #67	; 0x43
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    6d1a:	4623      	mov	r3, r4
    6d1c:	3401      	adds	r4, #1
      if (__a < __b)
    6d1e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
    6d22:	781a      	ldrb	r2, [r3, #0]
    6d24:	4291      	cmp	r1, r2
      return __a;
    6d26:	bfa8      	it	ge
    6d28:	4603      	movge	r3, r0
    6d2a:	f893 9000 	ldrb.w	r9, [r3]
    6d2e:	f88d 9043 	strb.w	r9, [sp, #67]	; 0x43
    for (int c = 0; c < depth; ++c) {
    6d32:	42a7      	cmp	r7, r4
    6d34:	d1f1      	bne.n	6d1a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x436>
    6d36:	9d08      	ldr	r5, [sp, #32]
    6d38:	f04f 0a00 	mov.w	sl, #0
    6d3c:	e1a7      	b.n	708e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7aa>
  if (tensor == nullptr) {
    6d3e:	2e00      	cmp	r6, #0
    6d40:	d069      	beq.n	6e16 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x532>
  const int dims_size = dims->size;
    6d42:	f8d6 8008 	ldr.w	r8, [r6, #8]
    6d46:	f858 7b04 	ldr.w	r7, [r8], #4
    size_ = dimensions_count;
    6d4a:	971e      	str	r7, [sp, #120]	; 0x78
    if (dimensions_count > kMaxSmallSize) {
    6d4c:	2f05      	cmp	r7, #5
    6d4e:	dd66      	ble.n	6e1e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x53a>
      dims_pointer_ = new int32[dimensions_count];
    6d50:	4b5f      	ldr	r3, [pc, #380]	; (6ed0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5ec>)
    6d52:	429f      	cmp	r7, r3
    6d54:	bf94      	ite	ls
    6d56:	00b8      	lslls	r0, r7, #2
    6d58:	f04f 30ff 	movhi.w	r0, #4294967295
    6d5c:	4b5d      	ldr	r3, [pc, #372]	; (6ed4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5f0>)
    6d5e:	4798      	blx	r3
    6d60:	901f      	str	r0, [sp, #124]	; 0x7c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    6d62:	00ba      	lsls	r2, r7, #2
    6d64:	4641      	mov	r1, r8
    6d66:	4b5c      	ldr	r3, [pc, #368]	; (6ed8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5f4>)
    6d68:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    6d6a:	f8d6 a004 	ldr.w	sl, [r6, #4]
  if (tensor == nullptr) {
    6d6e:	2d00      	cmp	r5, #0
    6d70:	d057      	beq.n	6e22 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x53e>
  const int dims_size = dims->size;
    6d72:	68af      	ldr	r7, [r5, #8]
    6d74:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    6d78:	9624      	str	r6, [sp, #144]	; 0x90
    if (dimensions_count > kMaxSmallSize) {
    6d7a:	2e05      	cmp	r6, #5
    6d7c:	dd55      	ble.n	6e2a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x546>
      dims_pointer_ = new int32[dimensions_count];
    6d7e:	4b54      	ldr	r3, [pc, #336]	; (6ed0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5ec>)
    6d80:	429e      	cmp	r6, r3
    6d82:	bf94      	ite	ls
    6d84:	00b0      	lslls	r0, r6, #2
    6d86:	f04f 30ff 	movhi.w	r0, #4294967295
    6d8a:	4b52      	ldr	r3, [pc, #328]	; (6ed4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5f0>)
    6d8c:	4798      	blx	r3
    6d8e:	9025      	str	r0, [sp, #148]	; 0x94
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    6d90:	00b2      	lsls	r2, r6, #2
    6d92:	4639      	mov	r1, r7
    6d94:	4b50      	ldr	r3, [pc, #320]	; (6ed8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5f4>)
    6d96:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6d98:	f8d5 b004 	ldr.w	fp, [r5, #4]
  const int32 input_beta_multiplier = params.input_multiplier;
    6d9c:	68a6      	ldr	r6, [r4, #8]
  const int32 input_beta_left_shift = params.input_left_shift;
    6d9e:	68e3      	ldr	r3, [r4, #12]
    6da0:	9306      	str	r3, [sp, #24]
  const int diff_min = params.diff_min;
    6da2:	69a3      	ldr	r3, [r4, #24]
    6da4:	9307      	str	r3, [sp, #28]
  inline int32 DimensionsCount() const { return size_; }
    6da6:	991e      	ldr	r1, [sp, #120]	; 0x78
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    6da8:	1e4f      	subs	r7, r1, #1
  for (int i = 0; i < dims_count; ++i) {
    6daa:	2900      	cmp	r1, #0
    6dac:	dd22      	ble.n	6df4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x510>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6dae:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
    TFLITE_DCHECK_LT(i, size_);
    6db2:	9824      	ldr	r0, [sp, #144]	; 0x90
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6db4:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    6db8:	2201      	movs	r2, #1
    6dba:	2300      	movs	r3, #0
    6dbc:	f10d 0c90 	add.w	ip, sp, #144	; 0x90
    6dc0:	f10d 0e78 	add.w	lr, sp, #120	; 0x78
    if (i != skip_dim) {
    6dc4:	429f      	cmp	r7, r3
    6dc6:	d011      	beq.n	6dec <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x508>
    TFLITE_DCHECK_GE(i, 0);
    6dc8:	2b00      	cmp	r3, #0
    6dca:	db30      	blt.n	6e2e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x54a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6dcc:	2905      	cmp	r1, #5
    6dce:	bfcc      	ite	gt
    6dd0:	f859 4023 	ldrgt.w	r4, [r9, r3, lsl #2]
    6dd4:	f85e 4022 	ldrle.w	r4, [lr, r2, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    6dd8:	4298      	cmp	r0, r3
    6dda:	dd2a      	ble.n	6e32 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x54e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6ddc:	2805      	cmp	r0, #5
    6dde:	bfcc      	ite	gt
    6de0:	f858 5023 	ldrgt.w	r5, [r8, r3, lsl #2]
    6de4:	f85c 5022 	ldrle.w	r5, [ip, r2, lsl #2]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    6de8:	42a5      	cmp	r5, r4
    6dea:	d124      	bne.n	6e36 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x552>
  for (int i = 0; i < dims_count; ++i) {
    6dec:	3301      	adds	r3, #1
    6dee:	3201      	adds	r2, #1
    6df0:	4299      	cmp	r1, r3
    6df2:	d1e7      	bne.n	6dc4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x4e0>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    6df4:	2f00      	cmp	r7, #0
    6df6:	db20      	blt.n	6e3a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x556>
    6df8:	42b9      	cmp	r1, r7
    6dfa:	dd1e      	ble.n	6e3a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x556>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6dfc:	2905      	cmp	r1, #5
    6dfe:	f340 8176 	ble.w	70ee <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x80a>
    6e02:	981f      	ldr	r0, [sp, #124]	; 0x7c
  for (int i = 0; i < dims_count; ++i) {
    6e04:	2900      	cmp	r1, #0
    6e06:	f300 8176 	bgt.w	70f6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x812>
  int flat_size = 1;
    6e0a:	2301      	movs	r3, #1
    6e0c:	930d      	str	r3, [sp, #52]	; 0x34
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6e0e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    6e10:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    6e14:	e186      	b.n	7124 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x840>
  RuntimeShape() : size_(0) {}
    6e16:	2300      	movs	r3, #0
    6e18:	931e      	str	r3, [sp, #120]	; 0x78
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    6e1a:	469a      	mov	sl, r3
    6e1c:	e7a7      	b.n	6d6e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x48a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6e1e:	a81f      	add	r0, sp, #124	; 0x7c
    6e20:	e79f      	b.n	6d62 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x47e>
  RuntimeShape() : size_(0) {}
    6e22:	2300      	movs	r3, #0
    6e24:	9324      	str	r3, [sp, #144]	; 0x90
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6e26:	469b      	mov	fp, r3
    6e28:	e7b8      	b.n	6d9c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x4b8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6e2a:	a825      	add	r0, sp, #148	; 0x94
    6e2c:	e7b0      	b.n	6d90 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x4ac>
    TFLITE_DCHECK_GE(i, 0);
    6e2e:	4b2b      	ldr	r3, [pc, #172]	; (6edc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5f8>)
    6e30:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    6e32:	4b2a      	ldr	r3, [pc, #168]	; (6edc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5f8>)
    6e34:	4798      	blx	r3
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    6e36:	4b29      	ldr	r3, [pc, #164]	; (6edc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5f8>)
    6e38:	4798      	blx	r3
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    6e3a:	4b28      	ldr	r3, [pc, #160]	; (6edc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5f8>)
    6e3c:	4798      	blx	r3
  int flat_size = 1;
    6e3e:	2301      	movs	r3, #1
    6e40:	930d      	str	r3, [sp, #52]	; 0x34
    6e42:	e16a      	b.n	711a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x836>
    TFLITE_DCHECK_LT(i, size_);
    6e44:	4b25      	ldr	r3, [pc, #148]	; (6edc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5f8>)
    6e46:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6e48:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6e4a:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    6e4e:	930b      	str	r3, [sp, #44]	; 0x2c
    6e50:	e175      	b.n	713e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x85a>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    6e52:	4b22      	ldr	r3, [pc, #136]	; (6edc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5f8>)
    6e54:	4798      	blx	r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6e56:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6e5a:	f040 81b7 	bne.w	71cc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8e8>
    6e5e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6e62:	e1a0      	b.n	71a6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8c2>
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
    6e64:	4653      	mov	r3, sl
  return integer_input ? __builtin_clz(integer_input)
    6e66:	f1ba 0f00 	cmp.w	sl, #0
    6e6a:	d11b      	bne.n	6ea4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5c0>
    6e6c:	2020      	movs	r0, #32
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
    6e6e:	f1c0 090c 	rsb	r9, r0, #12
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
    6e72:	fa03 f000 	lsl.w	r0, r3, r0
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
    6e76:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    6e7a:	4b0d      	ldr	r3, [pc, #52]	; (6eb0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5cc>)
    6e7c:	4798      	blx	r3
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
    6e7e:	9007      	str	r0, [sp, #28]
    for (int c = 0; c < depth; ++c) {
    6e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6e82:	2b00      	cmp	r3, #0
    6e84:	f340 8099 	ble.w	6fba <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x6d6>
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
    6e88:	f109 090f 	add.w	r9, r9, #15
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    6e8c:	f04f 0a01 	mov.w	sl, #1
    6e90:	fa0a fa09 	lsl.w	sl, sl, r9
    6e94:	f10a 3aff 	add.w	sl, sl, #4294967295
  return a >> offset;
    6e98:	ea4f 036a 	mov.w	r3, sl, asr #1
    6e9c:	9308      	str	r3, [sp, #32]
    6e9e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    6ea0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    6ea2:	e037      	b.n	6f14 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x630>
  return integer_input ? __builtin_clz(integer_input)
    6ea4:	faba f08a 	clz	r0, sl
    6ea8:	e7e1      	b.n	6e6e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x58a>
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
    6eaa:	2300      	movs	r3, #0
  return integer_input ? __builtin_clz(integer_input)
    6eac:	2020      	movs	r0, #32
    6eae:	e7de      	b.n	6e6e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x58a>
    6eb0:	00006511 	.word	0x00006511
    6eb4:	0003b9f0 	.word	0x0003b9f0
    6eb8:	0003be38 	.word	0x0003be38
    6ebc:	0003ba00 	.word	0x0003ba00
    6ec0:	000173ad 	.word	0x000173ad
    6ec4:	0003ba34 	.word	0x0003ba34
    6ec8:	00006799 	.word	0x00006799
    6ecc:	000066b1 	.word	0x000066b1
    6ed0:	1ffffffe 	.word	0x1ffffffe
    6ed4:	0000cd6d 	.word	0x0000cd6d
    6ed8:	00018121 	.word	0x00018121
    6edc:	0001739d 	.word	0x0001739d
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6ee0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6ee4:	d121      	bne.n	6f2a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x646>
    6ee6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6eea:	e03b      	b.n	6f64 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x680>
  assert(exponent >= 0);
    6eec:	4ba1      	ldr	r3, [pc, #644]	; (7174 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x890>)
    6eee:	4aa2      	ldr	r2, [pc, #648]	; (7178 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x894>)
    6ef0:	f44f 71b3 	mov.w	r1, #358	; 0x166
    6ef4:	48a1      	ldr	r0, [pc, #644]	; (717c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x898>)
    6ef6:	4ca2      	ldr	r4, [pc, #648]	; (7180 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x89c>)
    6ef8:	47a0      	blx	r4
  assert(exponent <= 31);
    6efa:	4ba2      	ldr	r3, [pc, #648]	; (7184 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8a0>)
    6efc:	4a9e      	ldr	r2, [pc, #632]	; (7178 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x894>)
    6efe:	f240 1167 	movw	r1, #359	; 0x167
    6f02:	489e      	ldr	r0, [pc, #632]	; (717c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x898>)
    6f04:	4c9e      	ldr	r4, [pc, #632]	; (7180 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x89c>)
    6f06:	47a0      	blx	r4
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    6f08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    6f0c:	802b      	strh	r3, [r5, #0]
    6f0e:	3502      	adds	r5, #2
    for (int c = 0; c < depth; ++c) {
    6f10:	42bc      	cmp	r4, r7
    6f12:	d052      	beq.n	6fba <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x6d6>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
    6f14:	f914 2b01 	ldrsb.w	r2, [r4], #1
    6f18:	f99d 3043 	ldrsb.w	r3, [sp, #67]	; 0x43
    6f1c:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    6f1e:	4590      	cmp	r8, r2
    6f20:	dcf2      	bgt.n	6f08 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x624>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    6f22:	9b06      	ldr	r3, [sp, #24]
    6f24:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6f26:	4296      	cmp	r6, r2
    6f28:	d0da      	beq.n	6ee0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5fc>
  std::int64_t a_64(a);
    6f2a:	ea4f 7ce2 	mov.w	ip, r2, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    6f2e:	9b05      	ldr	r3, [sp, #20]
    6f30:	fb02 f103 	mul.w	r1, r2, r3
    6f34:	fb06 110c 	mla	r1, r6, ip, r1
    6f38:	fba2 2306 	umull	r2, r3, r2, r6
    6f3c:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    6f3e:	2a00      	cmp	r2, #0
    6f40:	f173 0100 	sbcs.w	r1, r3, #0
    6f44:	f2c0 81ab 	blt.w	729e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9ba>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    6f48:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    6f4c:	f143 0300 	adc.w	r3, r3, #0
    6f50:	4610      	mov	r0, r2
    6f52:	4619      	mov	r1, r3
    6f54:	2a00      	cmp	r2, #0
    6f56:	f173 0e00 	sbcs.w	lr, r3, #0
    6f5a:	f2c0 8155 	blt.w	7208 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x924>
    6f5e:	0fc0      	lsrs	r0, r0, #31
    6f60:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    6f64:	4b88      	ldr	r3, [pc, #544]	; (7188 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8a4>)
    6f66:	4798      	blx	r3
            (shifted_scale * exp_in_0).raw(),
    6f68:	4601      	mov	r1, r0
    6f6a:	9807      	ldr	r0, [sp, #28]
    6f6c:	4b87      	ldr	r3, [pc, #540]	; (718c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8a8>)
    6f6e:	4798      	blx	r3
  assert(exponent >= 0);
    6f70:	f1b9 0f00 	cmp.w	r9, #0
    6f74:	dbba      	blt.n	6eec <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x608>
  assert(exponent <= 31);
    6f76:	f1b9 0f1f 	cmp.w	r9, #31
    6f7a:	dcbe      	bgt.n	6efa <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x616>
  return a + b;
    6f7c:	9b08      	ldr	r3, [sp, #32]
    6f7e:	eb03 72d0 	add.w	r2, r3, r0, lsr #31
  return a & b;
    6f82:	ea00 030a 	and.w	r3, r0, sl
  return a >> offset;
    6f86:	fa40 f009 	asr.w	r0, r0, r9
  return a + b;
    6f8a:	429a      	cmp	r2, r3
    6f8c:	bfb8      	it	lt
    6f8e:	3001      	addlt	r0, #1
            unsat_output +
    6f90:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
            static_cast<int32>(std::numeric_limits<OutputT>::min());
    6f94:	9011      	str	r0, [sp, #68]	; 0x44
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
    6f96:	f647 73ff 	movw	r3, #32767	; 0x7fff
    6f9a:	932d      	str	r3, [sp, #180]	; 0xb4
      if (__b < __a)
    6f9c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
      return __a;
    6fa0:	bfb4      	ite	lt
    6fa2:	ab11      	addlt	r3, sp, #68	; 0x44
	return __b;
    6fa4:	ab2d      	addge	r3, sp, #180	; 0xb4
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
    6fa6:	4a7a      	ldr	r2, [pc, #488]	; (7190 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8ac>)
    6fa8:	922c      	str	r2, [sp, #176]	; 0xb0
      if (__a < __b)
    6faa:	681a      	ldr	r2, [r3, #0]
    6fac:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
	return __b;
    6fb0:	bfb8      	it	lt
    6fb2:	ab2c      	addlt	r3, sp, #176	; 0xb0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    6fb4:	681b      	ldr	r3, [r3, #0]
    6fb6:	802b      	strh	r3, [r5, #0]
    6fb8:	e7a9      	b.n	6f0e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x62a>
  for (int i = 0; i < outer_size; ++i) {
    6fba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6fbc:	3301      	adds	r3, #1
    6fbe:	930c      	str	r3, [sp, #48]	; 0x30
    6fc0:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6fc2:	440f      	add	r7, r1
    6fc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6fc6:	4610      	mov	r0, r2
    6fc8:	4408      	add	r0, r1
    6fca:	9009      	str	r0, [sp, #36]	; 0x24
    6fcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6fce:	990e      	ldr	r1, [sp, #56]	; 0x38
    6fd0:	440a      	add	r2, r1
    6fd2:	920a      	str	r2, [sp, #40]	; 0x28
    6fd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6fd6:	4293      	cmp	r3, r2
    6fd8:	d01c      	beq.n	7014 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x730>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    6fda:	2380      	movs	r3, #128	; 0x80
    6fdc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    for (int c = 0; c < depth; ++c) {
    6fe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6fe2:	2b00      	cmp	r3, #0
    6fe4:	f77f af61 	ble.w	6eaa <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5c6>
    6fe8:	9c09      	ldr	r4, [sp, #36]	; 0x24
      return __a;
    6fea:	f10d 0043 	add.w	r0, sp, #67	; 0x43
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    6fee:	4623      	mov	r3, r4
    6ff0:	3401      	adds	r4, #1
      if (__a < __b)
    6ff2:	f99d 1043 	ldrsb.w	r1, [sp, #67]	; 0x43
    6ff6:	f993 2000 	ldrsb.w	r2, [r3]
    6ffa:	4291      	cmp	r1, r2
      return __a;
    6ffc:	bfa8      	it	ge
    6ffe:	4603      	movge	r3, r0
    7000:	f993 9000 	ldrsb.w	r9, [r3]
    7004:	f88d 9043 	strb.w	r9, [sp, #67]	; 0x43
    for (int c = 0; c < depth; ++c) {
    7008:	42bc      	cmp	r4, r7
    700a:	d1f0      	bne.n	6fee <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x70a>
    700c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    700e:	f04f 0a00 	mov.w	sl, #0
    7012:	e0d0      	b.n	71b6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8d2>
    if (size_ > kMaxSmallSize) {
    7014:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7016:	2b05      	cmp	r3, #5
    7018:	dd03      	ble.n	7022 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x73e>
      delete[] dims_pointer_;
    701a:	9825      	ldr	r0, [sp, #148]	; 0x94
    701c:	b108      	cbz	r0, 7022 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x73e>
    701e:	4b5d      	ldr	r3, [pc, #372]	; (7194 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b0>)
    7020:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    7022:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    7024:	2b05      	cmp	r3, #5
    7026:	f77f ad0c 	ble.w	6a42 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x15e>
      delete[] dims_pointer_;
    702a:	981f      	ldr	r0, [sp, #124]	; 0x7c
    702c:	2800      	cmp	r0, #0
    702e:	f43f ad08 	beq.w	6a42 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x15e>
    7032:	4b58      	ldr	r3, [pc, #352]	; (7194 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b0>)
    7034:	4798      	blx	r3
    7036:	e504      	b.n	6a42 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x15e>
    TFLITE_DCHECK_GE(i, 0);
    7038:	4b57      	ldr	r3, [pc, #348]	; (7198 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b4>)
    703a:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    703c:	4b56      	ldr	r3, [pc, #344]	; (7198 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b4>)
    703e:	4798      	blx	r3
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    7040:	4b55      	ldr	r3, [pc, #340]	; (7198 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b4>)
    7042:	4798      	blx	r3
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    7044:	4b54      	ldr	r3, [pc, #336]	; (7198 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b4>)
    7046:	4798      	blx	r3
  int flat_size = 1;
    7048:	2101      	movs	r1, #1
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    704a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    704c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
    7050:	e4d8      	b.n	6a04 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x120>
  int flat_size = 1;
    7052:	2101      	movs	r1, #1
    7054:	e4d1      	b.n	69fa <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x116>
    TFLITE_DCHECK_LT(i, size_);
    7056:	4b50      	ldr	r3, [pc, #320]	; (7198 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b4>)
    7058:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    705a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    705c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
    7060:	e4dc      	b.n	6a1c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x138>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    7062:	4b4d      	ldr	r3, [pc, #308]	; (7198 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b4>)
    7064:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7066:	2000      	movs	r0, #0
    7068:	e4df      	b.n	6a2a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x146>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    706a:	2500      	movs	r5, #0
    706c:	e4e4      	b.n	6a38 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x154>
  for (int i = 0; i < dims_count; ++i) {
    706e:	2900      	cmp	r1, #0
    7070:	f77f ad8d 	ble.w	6b8e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2aa>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    7074:	a819      	add	r0, sp, #100	; 0x64
    7076:	e53d      	b.n	6af4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x210>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    7078:	0fc0      	lsrs	r0, r0, #31
    707a:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    707e:	4b42      	ldr	r3, [pc, #264]	; (7188 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8a4>)
    7080:	4798      	blx	r3
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
    7082:	4b46      	ldr	r3, [pc, #280]	; (719c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b8>)
    7084:	4798      	blx	r3
  return a + b;
    7086:	4482      	add	sl, r0
    for (int c = 0; c < depth; ++c) {
    7088:	42a5      	cmp	r5, r4
    708a:	f43f ad9f 	beq.w	6bcc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2e8>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
    708e:	f815 2b01 	ldrb.w	r2, [r5], #1
    7092:	eba2 0209 	sub.w	r2, r2, r9
      if (input_diff >= diff_min) {
    7096:	4590      	cmp	r8, r2
    7098:	dcf6      	bgt.n	7088 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7a4>
    709a:	9b06      	ldr	r3, [sp, #24]
    709c:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    709e:	4296      	cmp	r6, r2
    70a0:	f43f ad81 	beq.w	6ba6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2c2>
  std::int64_t a_64(a);
    70a4:	ea4f 7ce2 	mov.w	ip, r2, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    70a8:	9b05      	ldr	r3, [sp, #20]
    70aa:	fb02 f103 	mul.w	r1, r2, r3
    70ae:	fb06 110c 	mla	r1, r6, ip, r1
    70b2:	fba2 2306 	umull	r2, r3, r2, r6
    70b6:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    70b8:	2a00      	cmp	r2, #0
    70ba:	f173 0100 	sbcs.w	r1, r3, #0
    70be:	f2c0 80af 	blt.w	7220 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x93c>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    70c2:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    70c6:	f143 0300 	adc.w	r3, r3, #0
    70ca:	4610      	mov	r0, r2
    70cc:	4619      	mov	r1, r3
    70ce:	2a00      	cmp	r2, #0
    70d0:	f173 0e00 	sbcs.w	lr, r3, #0
    70d4:	dad0      	bge.n	7078 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x794>
    70d6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    70da:	2100      	movs	r1, #0
    70dc:	1880      	adds	r0, r0, r2
    70de:	4159      	adcs	r1, r3
    70e0:	e7ca      	b.n	7078 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x794>
    70e2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    70e6:	2100      	movs	r1, #0
    70e8:	1880      	adds	r0, r0, r2
    70ea:	4159      	adcs	r1, r3
    70ec:	e5d1      	b.n	6c92 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x3ae>
  for (int i = 0; i < dims_count; ++i) {
    70ee:	2900      	cmp	r1, #0
    70f0:	f77f aea5 	ble.w	6e3e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x55a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    70f4:	a81f      	add	r0, sp, #124	; 0x7c
    70f6:	2301      	movs	r3, #1
    70f8:	461d      	mov	r5, r3
    70fa:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    70fc:	462c      	mov	r4, r5
    70fe:	429f      	cmp	r7, r3
    7100:	bf14      	ite	ne
    7102:	f850 2023 	ldrne.w	r2, [r0, r3, lsl #2]
    7106:	4622      	moveq	r2, r4
    7108:	fb02 f505 	mul.w	r5, r2, r5
  for (int i = 0; i < dims_count; ++i) {
    710c:	3301      	adds	r3, #1
    710e:	4299      	cmp	r1, r3
    7110:	dcf5      	bgt.n	70fe <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x81a>
    7112:	950d      	str	r5, [sp, #52]	; 0x34
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    7114:	2905      	cmp	r1, #5
    7116:	f73f ae7a 	bgt.w	6e0e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x52a>
    711a:	ab2e      	add	r3, sp, #184	; 0xb8
    711c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    7120:	f853 2c3c 	ldr.w	r2, [r3, #-60]
    TFLITE_DCHECK_LT(i, size_);
    7124:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7126:	429f      	cmp	r7, r3
    7128:	f6bf ae8c 	bge.w	6e44 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x560>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    712c:	2b05      	cmp	r3, #5
    712e:	f73f ae8b 	bgt.w	6e48 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x564>
    7132:	ab2e      	add	r3, sp, #184	; 0xb8
    7134:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    7138:	f857 3c24 	ldr.w	r3, [r7, #-36]
    713c:	930b      	str	r3, [sp, #44]	; 0x2c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    713e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7140:	4293      	cmp	r3, r2
    7142:	f47f ae86 	bne.w	6e52 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x56e>
  for (int i = 0; i < outer_size; ++i) {
    7146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7148:	2b00      	cmp	r3, #0
    714a:	f77f af63 	ble.w	7014 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x730>
    714e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7150:	930f      	str	r3, [sp, #60]	; 0x3c
    7152:	eb0a 0703 	add.w	r7, sl, r3
    7156:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    715a:	005b      	lsls	r3, r3, #1
    715c:	930e      	str	r3, [sp, #56]	; 0x38
    715e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    7162:	2300      	movs	r3, #0
    7164:	930c      	str	r3, [sp, #48]	; 0x30
  std::int64_t b_64(b);
    7166:	4633      	mov	r3, r6
    7168:	17f4      	asrs	r4, r6, #31
    716a:	e9cd 3404 	strd	r3, r4, [sp, #16]
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    716e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    7172:	e732      	b.n	6fda <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x6f6>
    7174:	0003b9f0 	.word	0x0003b9f0
    7178:	0003be38 	.word	0x0003be38
    717c:	0003ba00 	.word	0x0003ba00
    7180:	000173ad 	.word	0x000173ad
    7184:	0003ba34 	.word	0x0003ba34
    7188:	00006799 	.word	0x00006799
    718c:	000066b1 	.word	0x000066b1
    7190:	ffff8000 	.word	0xffff8000
    7194:	0000ccbd 	.word	0x0000ccbd
    7198:	0001739d 	.word	0x0001739d
    719c:	000068d1 	.word	0x000068d1
    71a0:	0fc0      	lsrs	r0, r0, #31
    71a2:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    71a6:	4b48      	ldr	r3, [pc, #288]	; (72c8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9e4>)
    71a8:	4798      	blx	r3
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
    71aa:	4b48      	ldr	r3, [pc, #288]	; (72cc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9e8>)
    71ac:	4798      	blx	r3
  return a + b;
    71ae:	4482      	add	sl, r0
    for (int c = 0; c < depth; ++c) {
    71b0:	42a5      	cmp	r5, r4
    71b2:	f43f ae57 	beq.w	6e64 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x580>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
    71b6:	f915 2b01 	ldrsb.w	r2, [r5], #1
    71ba:	eba2 0209 	sub.w	r2, r2, r9
      if (input_diff >= diff_min) {
    71be:	4590      	cmp	r8, r2
    71c0:	dcf6      	bgt.n	71b0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8cc>
    71c2:	9b06      	ldr	r3, [sp, #24]
    71c4:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    71c6:	4296      	cmp	r6, r2
    71c8:	f43f ae45 	beq.w	6e56 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x572>
  std::int64_t a_64(a);
    71cc:	ea4f 7ce2 	mov.w	ip, r2, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    71d0:	9b05      	ldr	r3, [sp, #20]
    71d2:	fb02 f103 	mul.w	r1, r2, r3
    71d6:	fb06 110c 	mla	r1, r6, ip, r1
    71da:	fba2 2306 	umull	r2, r3, r2, r6
    71de:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    71e0:	2a00      	cmp	r2, #0
    71e2:	f173 0100 	sbcs.w	r1, r3, #0
    71e6:	db45      	blt.n	7274 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x990>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    71e8:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    71ec:	f143 0300 	adc.w	r3, r3, #0
    71f0:	4610      	mov	r0, r2
    71f2:	4619      	mov	r1, r3
    71f4:	2a00      	cmp	r2, #0
    71f6:	f173 0e00 	sbcs.w	lr, r3, #0
    71fa:	dad1      	bge.n	71a0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8bc>
    71fc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7200:	2100      	movs	r1, #0
    7202:	1880      	adds	r0, r0, r2
    7204:	4159      	adcs	r1, r3
    7206:	e7cb      	b.n	71a0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8bc>
    7208:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    720c:	2100      	movs	r1, #0
    720e:	1880      	adds	r0, r0, r2
    7210:	4159      	adcs	r1, r3
    7212:	e6a4      	b.n	6f5e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x67a>
  for (int i = 0; i < dims_count; ++i) {
    7214:	2800      	cmp	r0, #0
    7216:	f77f af1c 	ble.w	7052 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x76e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    721a:	af19      	add	r7, sp, #100	; 0x64
    721c:	f7ff bbdd 	b.w	69da <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xf6>
    7220:	482b      	ldr	r0, [pc, #172]	; (72d0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9ec>)
    7222:	f04f 31ff 	mov.w	r1, #4294967295
    7226:	1880      	adds	r0, r0, r2
    7228:	4159      	adcs	r1, r3
    722a:	4602      	mov	r2, r0
    722c:	460b      	mov	r3, r1
    722e:	2800      	cmp	r0, #0
    7230:	f171 0e00 	sbcs.w	lr, r1, #0
    7234:	db03      	blt.n	723e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x95a>
    7236:	0fc0      	lsrs	r0, r0, #31
    7238:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
    723c:	e71f      	b.n	707e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x79a>
    723e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7242:	2100      	movs	r1, #0
    7244:	1880      	adds	r0, r0, r2
    7246:	4159      	adcs	r1, r3
    7248:	e7f5      	b.n	7236 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x952>
    724a:	4821      	ldr	r0, [pc, #132]	; (72d0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9ec>)
    724c:	f04f 31ff 	mov.w	r1, #4294967295
    7250:	1880      	adds	r0, r0, r2
    7252:	4159      	adcs	r1, r3
    7254:	4602      	mov	r2, r0
    7256:	460b      	mov	r3, r1
    7258:	2800      	cmp	r0, #0
    725a:	f171 0e00 	sbcs.w	lr, r1, #0
    725e:	db03      	blt.n	7268 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x984>
    7260:	0fc0      	lsrs	r0, r0, #31
    7262:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
    7266:	e517      	b.n	6c98 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x3b4>
    7268:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    726c:	2100      	movs	r1, #0
    726e:	1880      	adds	r0, r0, r2
    7270:	4159      	adcs	r1, r3
    7272:	e7f5      	b.n	7260 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x97c>
    7274:	4816      	ldr	r0, [pc, #88]	; (72d0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9ec>)
    7276:	f04f 31ff 	mov.w	r1, #4294967295
    727a:	1880      	adds	r0, r0, r2
    727c:	4159      	adcs	r1, r3
    727e:	4602      	mov	r2, r0
    7280:	460b      	mov	r3, r1
    7282:	2800      	cmp	r0, #0
    7284:	f171 0e00 	sbcs.w	lr, r1, #0
    7288:	db03      	blt.n	7292 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9ae>
    728a:	0fc0      	lsrs	r0, r0, #31
    728c:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
    7290:	e789      	b.n	71a6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8c2>
    7292:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7296:	2100      	movs	r1, #0
    7298:	1880      	adds	r0, r0, r2
    729a:	4159      	adcs	r1, r3
    729c:	e7f5      	b.n	728a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9a6>
    729e:	480c      	ldr	r0, [pc, #48]	; (72d0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9ec>)
    72a0:	f04f 31ff 	mov.w	r1, #4294967295
    72a4:	1880      	adds	r0, r0, r2
    72a6:	4159      	adcs	r1, r3
    72a8:	4602      	mov	r2, r0
    72aa:	460b      	mov	r3, r1
    72ac:	2800      	cmp	r0, #0
    72ae:	f171 0e00 	sbcs.w	lr, r1, #0
    72b2:	db03      	blt.n	72bc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9d8>
    72b4:	0fc0      	lsrs	r0, r0, #31
    72b6:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
    72ba:	e653      	b.n	6f64 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x680>
    72bc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    72c0:	2100      	movs	r1, #0
    72c2:	1880      	adds	r0, r0, r2
    72c4:	4159      	adcs	r1, r3
    72c6:	e7f5      	b.n	72b4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9d0>
    72c8:	00006799 	.word	0x00006799
    72cc:	000068d1 	.word	0x000068d1
    72d0:	c0000001 	.word	0xc0000001

000072d4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
    72d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    72d8:	b096      	sub	sp, #88	; 0x58
    72da:	4606      	mov	r6, r0
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
    72dc:	f8d1 9014 	ldr.w	r9, [r1, #20]
  return &context->tensors[node->inputs->data[index]];
    72e0:	6885      	ldr	r5, [r0, #8]
    72e2:	680b      	ldr	r3, [r1, #0]
    72e4:	685c      	ldr	r4, [r3, #4]
    72e6:	01a4      	lsls	r4, r4, #6
    72e8:	eb05 0804 	add.w	r8, r5, r4
  return &context->tensors[node->outputs->data[index]];
    72ec:	684b      	ldr	r3, [r1, #4]
    72ee:	685b      	ldr	r3, [r3, #4]
    72f0:	019b      	lsls	r3, r3, #6
    72f2:	18ef      	adds	r7, r5, r3
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
    72f4:	5d28      	ldrb	r0, [r5, r4]
    72f6:	2803      	cmp	r0, #3
    72f8:	d022      	beq.n	7340 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x6c>
    72fa:	2809      	cmp	r0, #9
    72fc:	d07a      	beq.n	73f4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x120>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    72fe:	2801      	cmp	r0, #1
    7300:	f040 80cd 	bne.w	749e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ca>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    7304:	5ce8      	ldrb	r0, [r5, r3]
    7306:	2801      	cmp	r0, #1
    7308:	f040 80de 	bne.w	74c8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f4>
    op_data->beta = static_cast<double>(params->beta);
    730c:	f8d9 0000 	ldr.w	r0, [r9]
    7310:	4b7d      	ldr	r3, [pc, #500]	; (7508 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x234>)
    7312:	4798      	blx	r3
    7314:	e9cd 0108 	strd	r0, r1, [sp, #32]
  switch (input->type) {
    7318:	5d28      	ldrb	r0, [r5, r4]
    731a:	2803      	cmp	r0, #3
    731c:	f000 80ed 	beq.w	74fa <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x226>
    7320:	2809      	cmp	r0, #9
    7322:	f000 80ea 	beq.w	74fa <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x226>
    7326:	2801      	cmp	r0, #1
    7328:	f000 80e0 	beq.w	74ec <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x218>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    732c:	6977      	ldr	r7, [r6, #20]
    732e:	4b77      	ldr	r3, [pc, #476]	; (750c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x238>)
    7330:	4798      	blx	r3
    7332:	5d2b      	ldrb	r3, [r5, r4]
    7334:	4602      	mov	r2, r0
    7336:	4976      	ldr	r1, [pc, #472]	; (7510 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x23c>)
    7338:	4630      	mov	r0, r6
    733a:	47b8      	blx	r7
      return kTfLiteError;
    733c:	2001      	movs	r0, #1
    733e:	e0c0      	b.n	74c2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ee>
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
    7340:	5ce8      	ldrb	r0, [r5, r3]
    7342:	2803      	cmp	r0, #3
    7344:	d011      	beq.n	736a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x96>
    7346:	6975      	ldr	r5, [r6, #20]
    7348:	4c70      	ldr	r4, [pc, #448]	; (750c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x238>)
    734a:	47a0      	blx	r4
    734c:	4607      	mov	r7, r0
    734e:	2003      	movs	r0, #3
    7350:	47a0      	blx	r4
    7352:	9003      	str	r0, [sp, #12]
    7354:	9702      	str	r7, [sp, #8]
    7356:	4b6f      	ldr	r3, [pc, #444]	; (7514 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x240>)
    7358:	9301      	str	r3, [sp, #4]
    735a:	4b6f      	ldr	r3, [pc, #444]	; (7518 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x244>)
    735c:	9300      	str	r3, [sp, #0]
    735e:	2323      	movs	r3, #35	; 0x23
    7360:	4a6e      	ldr	r2, [pc, #440]	; (751c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x248>)
    7362:	496f      	ldr	r1, [pc, #444]	; (7520 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x24c>)
    7364:	4630      	mov	r0, r6
    7366:	47a8      	blx	r5
    7368:	e0aa      	b.n	74c0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ec>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    736a:	693b      	ldr	r3, [r7, #16]
    736c:	2b00      	cmp	r3, #0
    736e:	d133      	bne.n	73d8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x104>
    TF_LITE_ENSURE(context, (output->params.scale == 1.f / 256) ||
    7370:	f8d7 a00c 	ldr.w	sl, [r7, #12]
    7374:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
    7378:	4650      	mov	r0, sl
    737a:	4b6a      	ldr	r3, [pc, #424]	; (7524 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x250>)
    737c:	4798      	blx	r3
    737e:	b928      	cbnz	r0, 738c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb8>
    7380:	4969      	ldr	r1, [pc, #420]	; (7528 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x254>)
    7382:	4650      	mov	r0, sl
    7384:	4b67      	ldr	r3, [pc, #412]	; (7524 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x250>)
    7386:	4798      	blx	r3
    7388:	2800      	cmp	r0, #0
    738a:	d07f      	beq.n	748c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1b8>
    tflite::PreprocessSoftmaxScaling(
    738c:	f8df a178 	ldr.w	sl, [pc, #376]	; 7508 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x234>
    7390:	f8d8 000c 	ldr.w	r0, [r8, #12]
    7394:	47d0      	blx	sl
    7396:	e9cd 0104 	strd	r0, r1, [sp, #16]
    739a:	f8d9 0000 	ldr.w	r0, [r9]
    739e:	47d0      	blx	sl
        &op_data->input_multiplier, &input_left_shift);
    73a0:	ab07      	add	r3, sp, #28
    73a2:	9302      	str	r3, [sp, #8]
    73a4:	ab0a      	add	r3, sp, #40	; 0x28
    73a6:	9301      	str	r3, [sp, #4]
    73a8:	f04f 0905 	mov.w	r9, #5
    73ac:	f8cd 9000 	str.w	r9, [sp]
    73b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    73b4:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 7570 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x29c>
    73b8:	47d0      	blx	sl
    op_data->input_left_shift = input_left_shift;
    73ba:	9907      	ldr	r1, [sp, #28]
    73bc:	910b      	str	r1, [sp, #44]	; 0x2c
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
    73be:	221f      	movs	r2, #31
    73c0:	4648      	mov	r0, r9
    73c2:	4b5a      	ldr	r3, [pc, #360]	; (752c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x258>)
    73c4:	4798      	blx	r3
    73c6:	4b5a      	ldr	r3, [pc, #360]	; (7530 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x25c>)
    73c8:	4798      	blx	r3
                                            op_data->input_left_shift);
    73ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    73ce:	4619      	mov	r1, r3
    73d0:	4b58      	ldr	r3, [pc, #352]	; (7534 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x260>)
    73d2:	4798      	blx	r3
    73d4:	900e      	str	r0, [sp, #56]	; 0x38
    73d6:	e79f      	b.n	7318 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x44>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    73d8:	2200      	movs	r2, #0
    73da:	9203      	str	r2, [sp, #12]
    73dc:	9302      	str	r3, [sp, #8]
    73de:	4b56      	ldr	r3, [pc, #344]	; (7538 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x264>)
    73e0:	9301      	str	r3, [sp, #4]
    73e2:	4b56      	ldr	r3, [pc, #344]	; (753c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x268>)
    73e4:	9300      	str	r3, [sp, #0]
    73e6:	6974      	ldr	r4, [r6, #20]
    73e8:	2324      	movs	r3, #36	; 0x24
    73ea:	4a4c      	ldr	r2, [pc, #304]	; (751c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x248>)
    73ec:	4954      	ldr	r1, [pc, #336]	; (7540 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x26c>)
    73ee:	4630      	mov	r0, r6
    73f0:	47a0      	blx	r4
    73f2:	e065      	b.n	74c0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ec>
      if (output->type == kTfLiteInt16) {
    73f4:	5ce8      	ldrb	r0, [r5, r3]
    73f6:	2807      	cmp	r0, #7
    73f8:	d013      	beq.n	7422 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x14e>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    73fa:	2809      	cmp	r0, #9
    73fc:	d023      	beq.n	7446 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x172>
    73fe:	6975      	ldr	r5, [r6, #20]
    7400:	4c42      	ldr	r4, [pc, #264]	; (750c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x238>)
    7402:	47a0      	blx	r4
    7404:	4607      	mov	r7, r0
    7406:	2009      	movs	r0, #9
    7408:	47a0      	blx	r4
    740a:	9003      	str	r0, [sp, #12]
    740c:	9702      	str	r7, [sp, #8]
    740e:	4b4d      	ldr	r3, [pc, #308]	; (7544 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x270>)
    7410:	9301      	str	r3, [sp, #4]
    7412:	4b41      	ldr	r3, [pc, #260]	; (7518 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x244>)
    7414:	9300      	str	r3, [sp, #0]
    7416:	232c      	movs	r3, #44	; 0x2c
    7418:	4a40      	ldr	r2, [pc, #256]	; (751c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x248>)
    741a:	4941      	ldr	r1, [pc, #260]	; (7520 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x24c>)
    741c:	4630      	mov	r0, r6
    741e:	47a8      	blx	r5
    7420:	e04e      	b.n	74c0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ec>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
    7422:	693b      	ldr	r3, [r7, #16]
    7424:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    7428:	d0a2      	beq.n	7370 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x9c>
    742a:	4a47      	ldr	r2, [pc, #284]	; (7548 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x274>)
    742c:	9203      	str	r2, [sp, #12]
    742e:	9302      	str	r3, [sp, #8]
    7430:	4b46      	ldr	r3, [pc, #280]	; (754c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x278>)
    7432:	9301      	str	r3, [sp, #4]
    7434:	4b41      	ldr	r3, [pc, #260]	; (753c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x268>)
    7436:	9300      	str	r3, [sp, #0]
    7438:	6974      	ldr	r4, [r6, #20]
    743a:	2328      	movs	r3, #40	; 0x28
    743c:	4a37      	ldr	r2, [pc, #220]	; (751c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x248>)
    743e:	4940      	ldr	r1, [pc, #256]	; (7540 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x26c>)
    7440:	4630      	mov	r0, r6
    7442:	47a0      	blx	r4
    7444:	e03c      	b.n	74c0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ec>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    7446:	693b      	ldr	r3, [r7, #16]
    7448:	f113 0f80 	cmn.w	r3, #128	; 0x80
    744c:	d00e      	beq.n	746c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x198>
    744e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    7452:	9203      	str	r2, [sp, #12]
    7454:	9302      	str	r3, [sp, #8]
    7456:	4b3e      	ldr	r3, [pc, #248]	; (7550 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x27c>)
    7458:	9301      	str	r3, [sp, #4]
    745a:	4b38      	ldr	r3, [pc, #224]	; (753c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x268>)
    745c:	9300      	str	r3, [sp, #0]
    745e:	6974      	ldr	r4, [r6, #20]
    7460:	232d      	movs	r3, #45	; 0x2d
    7462:	4a2e      	ldr	r2, [pc, #184]	; (751c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x248>)
    7464:	4936      	ldr	r1, [pc, #216]	; (7540 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x26c>)
    7466:	4630      	mov	r0, r6
    7468:	47a0      	blx	r4
    746a:	e029      	b.n	74c0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ec>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
    746c:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
    7470:	68f8      	ldr	r0, [r7, #12]
    7472:	4b2c      	ldr	r3, [pc, #176]	; (7524 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x250>)
    7474:	4798      	blx	r3
    7476:	2800      	cmp	r0, #0
    7478:	d188      	bne.n	738c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb8>
    747a:	4b36      	ldr	r3, [pc, #216]	; (7554 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x280>)
    747c:	9300      	str	r3, [sp, #0]
    747e:	6974      	ldr	r4, [r6, #20]
    7480:	232e      	movs	r3, #46	; 0x2e
    7482:	4a26      	ldr	r2, [pc, #152]	; (751c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x248>)
    7484:	4934      	ldr	r1, [pc, #208]	; (7558 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x284>)
    7486:	4630      	mov	r0, r6
    7488:	47a0      	blx	r4
    748a:	e019      	b.n	74c0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ec>
    TF_LITE_ENSURE(context, (output->params.scale == 1.f / 256) ||
    748c:	4b33      	ldr	r3, [pc, #204]	; (755c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x288>)
    748e:	9300      	str	r3, [sp, #0]
    7490:	6974      	ldr	r4, [r6, #20]
    7492:	2332      	movs	r3, #50	; 0x32
    7494:	4a21      	ldr	r2, [pc, #132]	; (751c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x248>)
    7496:	4930      	ldr	r1, [pc, #192]	; (7558 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x284>)
    7498:	4630      	mov	r0, r6
    749a:	47a0      	blx	r4
    749c:	e010      	b.n	74c0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ec>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    749e:	6975      	ldr	r5, [r6, #20]
    74a0:	4c1a      	ldr	r4, [pc, #104]	; (750c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x238>)
    74a2:	47a0      	blx	r4
    74a4:	4607      	mov	r7, r0
    74a6:	2001      	movs	r0, #1
    74a8:	47a0      	blx	r4
    74aa:	9003      	str	r0, [sp, #12]
    74ac:	9702      	str	r7, [sp, #8]
    74ae:	4b2c      	ldr	r3, [pc, #176]	; (7560 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28c>)
    74b0:	9301      	str	r3, [sp, #4]
    74b2:	4b2c      	ldr	r3, [pc, #176]	; (7564 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x290>)
    74b4:	9300      	str	r3, [sp, #0]
    74b6:	2340      	movs	r3, #64	; 0x40
    74b8:	4a18      	ldr	r2, [pc, #96]	; (751c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x248>)
    74ba:	4919      	ldr	r1, [pc, #100]	; (7520 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x24c>)
    74bc:	4630      	mov	r0, r6
    74be:	47a8      	blx	r5
  TF_LITE_ENSURE_STATUS(
    74c0:	2001      	movs	r0, #1
}
    74c2:	b016      	add	sp, #88	; 0x58
    74c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    74c8:	6975      	ldr	r5, [r6, #20]
    74ca:	4c10      	ldr	r4, [pc, #64]	; (750c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x238>)
    74cc:	47a0      	blx	r4
    74ce:	4607      	mov	r7, r0
    74d0:	2001      	movs	r0, #1
    74d2:	47a0      	blx	r4
    74d4:	9003      	str	r0, [sp, #12]
    74d6:	9702      	str	r7, [sp, #8]
    74d8:	4b21      	ldr	r3, [pc, #132]	; (7560 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28c>)
    74da:	9301      	str	r3, [sp, #4]
    74dc:	4b0e      	ldr	r3, [pc, #56]	; (7518 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x244>)
    74de:	9300      	str	r3, [sp, #0]
    74e0:	2341      	movs	r3, #65	; 0x41
    74e2:	4a0e      	ldr	r2, [pc, #56]	; (751c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x248>)
    74e4:	490e      	ldr	r1, [pc, #56]	; (7520 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x24c>)
    74e6:	4630      	mov	r0, r6
    74e8:	47a8      	blx	r5
    74ea:	e7e9      	b.n	74c0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ec>
      SoftmaxFloat(input, output, op_data);
    74ec:	aa08      	add	r2, sp, #32
    74ee:	4639      	mov	r1, r7
    74f0:	4640      	mov	r0, r8
    74f2:	4b1d      	ldr	r3, [pc, #116]	; (7568 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x294>)
    74f4:	4798      	blx	r3
      return kTfLiteOk;
    74f6:	2000      	movs	r0, #0
    74f8:	e7e3      	b.n	74c2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ee>
      SoftmaxQuantized(input, output, op_data);
    74fa:	aa08      	add	r2, sp, #32
    74fc:	4639      	mov	r1, r7
    74fe:	4640      	mov	r0, r8
    7500:	4b1a      	ldr	r3, [pc, #104]	; (756c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x298>)
    7502:	4798      	blx	r3
      return kTfLiteOk;
    7504:	2000      	movs	r0, #0
    7506:	e7dc      	b.n	74c2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ee>
    7508:	00015419 	.word	0x00015419
    750c:	00001ab5 	.word	0x00001ab5
    7510:	0003bb08 	.word	0x0003bb08
    7514:	0003bf0c 	.word	0x0003bf0c
    7518:	0003bbfc 	.word	0x0003bbfc
    751c:	0003be94 	.word	0x0003be94
    7520:	0003bbe0 	.word	0x0003bbe0
    7524:	00016069 	.word	0x00016069
    7528:	3b808081 	.word	0x3b808081
    752c:	00001c91 	.word	0x00001c91
    7530:	000153f5 	.word	0x000153f5
    7534:	000159f5 	.word	0x000159f5
    7538:	0003b9fc 	.word	0x0003b9fc
    753c:	0003bf1c 	.word	0x0003bf1c
    7540:	0003b724 	.word	0x0003b724
    7544:	0003b800 	.word	0x0003b800
    7548:	ffff8000 	.word	0xffff8000
    754c:	0003bf38 	.word	0x0003bf38
    7550:	0003bf40 	.word	0x0003bf40
    7554:	0003bf48 	.word	0x0003bf48
    7558:	0003ad08 	.word	0x0003ad08
    755c:	0003bf6c 	.word	0x0003bf6c
    7560:	0003bfb8 	.word	0x0003bfb8
    7564:	0003bc0c 	.word	0x0003bc0c
    7568:	000061a9 	.word	0x000061a9
    756c:	000068e5 	.word	0x000068e5
    7570:	00001c19 	.word	0x00001c19

00007574 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    7574:	b410      	push	{r4}
  return &context->tensors[node->inputs->data[index]];
    7576:	6884      	ldr	r4, [r0, #8]
    7578:	680b      	ldr	r3, [r1, #0]
    757a:	685a      	ldr	r2, [r3, #4]
    757c:	eb04 1282 	add.w	r2, r4, r2, lsl #6
  return &context->tensors[node->outputs->data[index]];
    7580:	684b      	ldr	r3, [r1, #4]
    7582:	685b      	ldr	r3, [r3, #4]
    7584:	eb04 1483 	add.w	r4, r4, r3, lsl #6
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
    7588:	6851      	ldr	r1, [r2, #4]
    758a:	6863      	ldr	r3, [r4, #4]
    758c:	4299      	cmp	r1, r3
    758e:	d00a      	beq.n	75a6 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input->bytes; ++i) {
    7590:	6993      	ldr	r3, [r2, #24]
    7592:	b143      	cbz	r3, 75a6 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
    7594:	2300      	movs	r3, #0
      output->data.raw[i] = input->data.raw[i];
    7596:	6851      	ldr	r1, [r2, #4]
    7598:	5cc8      	ldrb	r0, [r1, r3]
    759a:	6861      	ldr	r1, [r4, #4]
    759c:	54c8      	strb	r0, [r1, r3]
    for (size_t i = 0; i < input->bytes; ++i) {
    759e:	3301      	adds	r3, #1
    75a0:	6991      	ldr	r1, [r2, #24]
    75a2:	4299      	cmp	r1, r3
    75a4:	d8f7      	bhi.n	7596 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x22>
    }
  }
  return kTfLiteOk;
}
    75a6:	2000      	movs	r0, #0
    75a8:	bc10      	pop	{r4}
    75aa:	4770      	bx	lr

000075ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
    75ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    75b0:	b085      	sub	sp, #20
    75b2:	4606      	mov	r6, r0
  return &context->tensors[node->inputs->data[index]];
    75b4:	6885      	ldr	r5, [r0, #8]
    75b6:	f8d1 a000 	ldr.w	sl, [r1]
    75ba:	f8da 3004 	ldr.w	r3, [sl, #4]
    75be:	ea4f 1c83 	mov.w	ip, r3, lsl #6
    75c2:	eb05 030c 	add.w	r3, r5, ip
  return &context->tensors[node->outputs->data[index]];
    75c6:	684a      	ldr	r2, [r1, #4]
    75c8:	6854      	ldr	r4, [r2, #4]
    75ca:	01a4      	lsls	r4, r4, #6
    75cc:	eb05 0b04 	add.w	fp, r5, r4
  return NumElements(t->dims);
    75d0:	689f      	ldr	r7, [r3, #8]
  for (int i = 0; i < dims->size; ++i) {
    75d2:	f8d7 e000 	ldr.w	lr, [r7]
    75d6:	f1be 0f00 	cmp.w	lr, #0
    75da:	dd23      	ble.n	7624 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x78>
    75dc:	3704      	adds	r7, #4
    75de:	2201      	movs	r2, #1
    75e0:	2300      	movs	r3, #0
    75e2:	2000      	movs	r0, #0
    count *= dims->data[i];
    75e4:	f857 1b04 	ldr.w	r1, [r7], #4
    75e8:	ea4f 79e1 	mov.w	r9, r1, asr #31
    75ec:	fb02 f809 	mul.w	r8, r2, r9
    75f0:	fb01 8803 	mla	r8, r1, r3, r8
    75f4:	fba2 2301 	umull	r2, r3, r2, r1
    75f8:	4443      	add	r3, r8
  for (int i = 0; i < dims->size; ++i) {
    75fa:	3001      	adds	r0, #1
    75fc:	4570      	cmp	r0, lr
    75fe:	d1f1      	bne.n	75e4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x38>
  TfLiteIntArray* output_shape = output->dims;
    7600:	f8db 9008 	ldr.w	r9, [fp, #8]
      output_shape->size == 1 && output_shape->data[0] == 0) {
    7604:	f8da 3000 	ldr.w	r3, [sl]
    7608:	2b01      	cmp	r3, #1
    760a:	d00d      	beq.n	7628 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x7c>
  for (int i = 0; i < output_shape->size; ++i) {
    760c:	f8d9 e000 	ldr.w	lr, [r9]
    7610:	f1be 0f00 	cmp.w	lr, #0
    7614:	dd53      	ble.n	76be <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x112>
    7616:	f109 0004 	add.w	r0, r9, #4
  int64_t count = 1;
    761a:	2300      	movs	r3, #0
    761c:	f04f 38ff 	mov.w	r8, #4294967295
    7620:	2701      	movs	r7, #1
    7622:	e013      	b.n	764c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa0>
    7624:	2201      	movs	r2, #1
    7626:	e7eb      	b.n	7600 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x54>
      output_shape->size == 1 && output_shape->data[0] == 0) {
    7628:	f8d9 7000 	ldr.w	r7, [r9]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
    762c:	2f01      	cmp	r7, #1
    762e:	d1ed      	bne.n	760c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x60>
      output_shape->size == 1 && output_shape->data[0] == 0) {
    7630:	f8d9 3004 	ldr.w	r3, [r9, #4]
    7634:	2b00      	cmp	r3, #0
    7636:	d05d      	beq.n	76f4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x148>
  for (int i = 0; i < output_shape->size; ++i) {
    7638:	f8d9 e000 	ldr.w	lr, [r9]
    763c:	e7eb      	b.n	7616 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x6a>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
    763e:	f1b8 3fff 	cmp.w	r8, #4294967295
    7642:	d10b      	bne.n	765c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb0>
    7644:	4698      	mov	r8, r3
  for (int i = 0; i < output_shape->size; ++i) {
    7646:	3301      	adds	r3, #1
    7648:	4573      	cmp	r3, lr
    764a:	d018      	beq.n	767e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xd2>
    int value = output_shape->data[i];
    764c:	f850 1b04 	ldr.w	r1, [r0], #4
    if (value == -1) {
    7650:	f1b1 3fff 	cmp.w	r1, #4294967295
    7654:	d0f3      	beq.n	763e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x92>
      num_output_elements *= value;
    7656:	fb01 f707 	mul.w	r7, r1, r7
    765a:	e7f4      	b.n	7646 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
    765c:	f04f 33ff 	mov.w	r3, #4294967295
    7660:	9303      	str	r3, [sp, #12]
    7662:	f8cd 8008 	str.w	r8, [sp, #8]
    7666:	4b25      	ldr	r3, [pc, #148]	; (76fc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x150>)
    7668:	9301      	str	r3, [sp, #4]
    766a:	4b25      	ldr	r3, [pc, #148]	; (7700 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x154>)
    766c:	9300      	str	r3, [sp, #0]
    766e:	6974      	ldr	r4, [r6, #20]
    7670:	2335      	movs	r3, #53	; 0x35
    7672:	4a24      	ldr	r2, [pc, #144]	; (7704 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    7674:	4924      	ldr	r1, [pc, #144]	; (7708 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x15c>)
    7676:	4630      	mov	r0, r6
    7678:	47a0      	blx	r4
    767a:	2001      	movs	r0, #1
    767c:	e035      	b.n	76ea <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x13e>
  if (stretch_dim != -1) {
    767e:	f1b8 3fff 	cmp.w	r8, #4294967295
    7682:	d007      	beq.n	7694 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xe8>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    7684:	fb92 f3f7 	sdiv	r3, r2, r7
    7688:	eb09 0888 	add.w	r8, r9, r8, lsl #2
    768c:	f8c8 3004 	str.w	r3, [r8, #4]
    num_output_elements *= output_shape->data[stretch_dim];
    7690:	fb03 f707 	mul.w	r7, r3, r7
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    7694:	f815 000c 	ldrb.w	r0, [r5, ip]
    7698:	5d2b      	ldrb	r3, [r5, r4]
    769a:	4283      	cmp	r3, r0
    769c:	d111      	bne.n	76c2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x116>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    769e:	4297      	cmp	r7, r2
    76a0:	d026      	beq.n	76f0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x144>
    76a2:	9703      	str	r7, [sp, #12]
    76a4:	9202      	str	r2, [sp, #8]
    76a6:	4b19      	ldr	r3, [pc, #100]	; (770c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x160>)
    76a8:	9301      	str	r3, [sp, #4]
    76aa:	4b19      	ldr	r3, [pc, #100]	; (7710 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x164>)
    76ac:	9300      	str	r3, [sp, #0]
    76ae:	6974      	ldr	r4, [r6, #20]
    76b0:	2341      	movs	r3, #65	; 0x41
    76b2:	4a14      	ldr	r2, [pc, #80]	; (7704 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    76b4:	4914      	ldr	r1, [pc, #80]	; (7708 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x15c>)
    76b6:	4630      	mov	r0, r6
    76b8:	47a0      	blx	r4
    76ba:	2001      	movs	r0, #1
    76bc:	e015      	b.n	76ea <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x13e>
  int num_output_elements = 1;
    76be:	2701      	movs	r7, #1
    76c0:	e7e8      	b.n	7694 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xe8>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    76c2:	f8d6 8014 	ldr.w	r8, [r6, #20]
    76c6:	4f13      	ldr	r7, [pc, #76]	; (7714 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x168>)
    76c8:	47b8      	blx	r7
    76ca:	4681      	mov	r9, r0
    76cc:	5d28      	ldrb	r0, [r5, r4]
    76ce:	47b8      	blx	r7
    76d0:	9003      	str	r0, [sp, #12]
    76d2:	f8cd 9008 	str.w	r9, [sp, #8]
    76d6:	4b10      	ldr	r3, [pc, #64]	; (7718 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>)
    76d8:	9301      	str	r3, [sp, #4]
    76da:	4b10      	ldr	r3, [pc, #64]	; (771c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x170>)
    76dc:	9300      	str	r3, [sp, #0]
    76de:	2340      	movs	r3, #64	; 0x40
    76e0:	4a08      	ldr	r2, [pc, #32]	; (7704 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    76e2:	490f      	ldr	r1, [pc, #60]	; (7720 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x174>)
    76e4:	4630      	mov	r0, r6
    76e6:	47c0      	blx	r8
    76e8:	2001      	movs	r0, #1
}
    76ea:	b005      	add	sp, #20
    76ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return kTfLiteOk;
    76f0:	2000      	movs	r0, #0
    76f2:	e7fa      	b.n	76ea <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x13e>
    output_shape->size = 0;
    76f4:	2300      	movs	r3, #0
    76f6:	f8c9 3000 	str.w	r3, [r9]
    76fa:	e7cb      	b.n	7694 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xe8>
    76fc:	0003c018 	.word	0x0003c018
    7700:	0003c01c 	.word	0x0003c01c
    7704:	0003bfe8 	.word	0x0003bfe8
    7708:	0003b724 	.word	0x0003b724
    770c:	0003c028 	.word	0x0003c028
    7710:	0003c03c 	.word	0x0003c03c
    7714:	00001ab5 	.word	0x00001ab5
    7718:	0003bbfc 	.word	0x0003bbfc
    771c:	0003bc0c 	.word	0x0003bc0c
    7720:	0003bbe0 	.word	0x0003bbe0

00007724 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    7724:	b570      	push	{r4, r5, r6, lr}
    7726:	b084      	sub	sp, #16
    7728:	4604      	mov	r4, r0
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    772a:	680b      	ldr	r3, [r1, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
    772c:	681b      	ldr	r3, [r3, #0]
    772e:	3b01      	subs	r3, #1
    7730:	2b01      	cmp	r3, #1
    7732:	d909      	bls.n	7748 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
    7734:	4b1a      	ldr	r3, [pc, #104]	; (77a0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    7736:	9300      	str	r3, [sp, #0]
    7738:	6945      	ldr	r5, [r0, #20]
    773a:	2346      	movs	r3, #70	; 0x46
    773c:	4a19      	ldr	r2, [pc, #100]	; (77a4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
    773e:	491a      	ldr	r1, [pc, #104]	; (77a8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    7740:	47a8      	blx	r5
    7742:	2001      	movs	r0, #1
}
    7744:	b004      	add	sp, #16
    7746:	bd70      	pop	{r4, r5, r6, pc}
    7748:	460d      	mov	r5, r1
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    774a:	684b      	ldr	r3, [r1, #4]
    774c:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    774e:	2b01      	cmp	r3, #1
    7750:	d00d      	beq.n	776e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    7752:	2501      	movs	r5, #1
    7754:	9503      	str	r5, [sp, #12]
    7756:	9302      	str	r3, [sp, #8]
    7758:	4b14      	ldr	r3, [pc, #80]	; (77ac <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
    775a:	9301      	str	r3, [sp, #4]
    775c:	4b14      	ldr	r3, [pc, #80]	; (77b0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
    775e:	9300      	str	r3, [sp, #0]
    7760:	6946      	ldr	r6, [r0, #20]
    7762:	2347      	movs	r3, #71	; 0x47
    7764:	4a0f      	ldr	r2, [pc, #60]	; (77a4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
    7766:	4913      	ldr	r1, [pc, #76]	; (77b4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
    7768:	47b0      	blx	r6
    776a:	4628      	mov	r0, r5
    776c:	e7ea      	b.n	7744 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
    776e:	4b12      	ldr	r3, [pc, #72]	; (77b8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    7770:	4798      	blx	r3
    7772:	b908      	cbnz	r0, 7778 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x54>
  return kTfLiteOk;
    7774:	2000      	movs	r0, #0
    7776:	e7e5      	b.n	7744 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
    7778:	6966      	ldr	r6, [r4, #20]
    777a:	4629      	mov	r1, r5
    777c:	4620      	mov	r0, r4
    777e:	4b0e      	ldr	r3, [pc, #56]	; (77b8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    7780:	4798      	blx	r3
    7782:	2300      	movs	r3, #0
    7784:	9303      	str	r3, [sp, #12]
    7786:	9002      	str	r0, [sp, #8]
    7788:	4b0c      	ldr	r3, [pc, #48]	; (77bc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x98>)
    778a:	9301      	str	r3, [sp, #4]
    778c:	4b0c      	ldr	r3, [pc, #48]	; (77c0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
    778e:	9300      	str	r3, [sp, #0]
    7790:	2348      	movs	r3, #72	; 0x48
    7792:	4a04      	ldr	r2, [pc, #16]	; (77a4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
    7794:	4907      	ldr	r1, [pc, #28]	; (77b4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
    7796:	4620      	mov	r0, r4
    7798:	47b0      	blx	r6
    779a:	2001      	movs	r0, #1
    779c:	e7d2      	b.n	7744 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
    779e:	bf00      	nop
    77a0:	0003c050 	.word	0x0003c050
    77a4:	0003bfe8 	.word	0x0003bfe8
    77a8:	0003ad08 	.word	0x0003ad08
    77ac:	0003bf08 	.word	0x0003bf08
    77b0:	0003bedc 	.word	0x0003bedc
    77b4:	0003b724 	.word	0x0003b724
    77b8:	000075ad 	.word	0x000075ad
    77bc:	0003c080 	.word	0x0003c080
    77c0:	0003c08c 	.word	0x0003c08c

000077c4 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
    77c4:	b470      	push	{r4, r5, r6}
    77c6:	4606      	mov	r6, r0
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    77c8:	4604      	mov	r4, r0
    77ca:	4d05      	ldr	r5, [pc, #20]	; (77e0 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x1c>)
    77cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    77ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    77d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    77d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    77d8:	4630      	mov	r0, r6
    77da:	bc70      	pop	{r4, r5, r6}
    77dc:	4770      	bx	lr
    77de:	bf00      	nop
    77e0:	0003bfc8 	.word	0x0003bfc8

000077e4 <_ZN6tflite14AlignPointerUpEPhj>:
namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
    77e4:	1e4b      	subs	r3, r1, #1
    77e6:	4418      	add	r0, r3
    77e8:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
    77ec:	fb01 f000 	mul.w	r0, r1, r0
    77f0:	4770      	bx	lr

000077f2 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
    77f2:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
    77f6:	fb00 f001 	mul.w	r0, r0, r1
    77fa:	4770      	bx	lr

000077fc <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
    77fc:	3801      	subs	r0, #1
    77fe:	4408      	add	r0, r1
    7800:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_size;
}
    7804:	fb01 f000 	mul.w	r0, r1, r0
    7808:	4770      	bx	lr

0000780a <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
  switch (type) {
    780a:	3801      	subs	r0, #1
    780c:	2808      	cmp	r0, #8
    780e:	d826      	bhi.n	785e <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x54>
    7810:	e8df f000 	tbb	[pc, r0]
    7814:	19110d05 	.word	0x19110d05
    7818:	21091d25 	.word	0x21091d25
    781c:	15          	.byte	0x15
    781d:	00          	.byte	0x00
    case kTfLiteFloat32:
      *size = sizeof(float);
    781e:	2304      	movs	r3, #4
    7820:	600b      	str	r3, [r1, #0]
      *size = sizeof(float) * 2;
      break;
    default:
      return kTfLiteError;
  }
  return kTfLiteOk;
    7822:	2000      	movs	r0, #0
      break;
    7824:	4770      	bx	lr
      *size = sizeof(int16_t);
    7826:	2302      	movs	r3, #2
    7828:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    782a:	2000      	movs	r0, #0
      break;
    782c:	4770      	bx	lr
      *size = sizeof(int32_t);
    782e:	2304      	movs	r3, #4
    7830:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    7832:	2000      	movs	r0, #0
      break;
    7834:	4770      	bx	lr
      *size = sizeof(uint8_t);
    7836:	2301      	movs	r3, #1
    7838:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    783a:	2000      	movs	r0, #0
      break;
    783c:	4770      	bx	lr
      *size = sizeof(int8_t);
    783e:	2301      	movs	r3, #1
    7840:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    7842:	2000      	movs	r0, #0
      break;
    7844:	4770      	bx	lr
      *size = sizeof(int64_t);
    7846:	2308      	movs	r3, #8
    7848:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    784a:	2000      	movs	r0, #0
      break;
    784c:	4770      	bx	lr
      *size = sizeof(bool);
    784e:	2301      	movs	r3, #1
    7850:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    7852:	2000      	movs	r0, #0
      break;
    7854:	4770      	bx	lr
      *size = sizeof(float) * 2;
    7856:	2308      	movs	r3, #8
    7858:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    785a:	2000      	movs	r0, #0
      break;
    785c:	4770      	bx	lr
      return kTfLiteError;
    785e:	2001      	movs	r0, #1
}
    7860:	4770      	bx	lr
	...

00007864 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
    7864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7868:	b083      	sub	sp, #12
    786a:	4688      	mov	r8, r1
    786c:	4691      	mov	r9, r2
    return data_ - ReadScalar<soffset_t>(data_);
    786e:	6802      	ldr	r2, [r0, #0]
    7870:	eba0 0e02 	sub.w	lr, r0, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7874:	f8be c000 	ldrh.w	ip, [lr]
    7878:	f1bc 0f04 	cmp.w	ip, #4
    787c:	dd22      	ble.n	78c4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x60>
    787e:	f8be 2004 	ldrh.w	r2, [lr, #4]
    auto p = data_ + field_offset;
    7882:	1885      	adds	r5, r0, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7884:	b302      	cbz	r2, 78c8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x64>
    7886:	5881      	ldr	r1, [r0, r2]
  int element_count = 1;
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
    7888:	186c      	adds	r4, r5, r1
    788a:	d01f      	beq.n	78cc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x68>
  uoffset_t size() const { return EndianScalar(length_); }
    788c:	586f      	ldr	r7, [r5, r1]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    788e:	b1ff      	cbz	r7, 78d0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6c>
    7890:	2100      	movs	r1, #0
    7892:	2501      	movs	r5, #1
      element_count *= flatbuffer_tensor.shape()->Get(n);
    7894:	f854 6f04 	ldr.w	r6, [r4, #4]!
    7898:	fb06 f505 	mul.w	r5, r6, r5
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    789c:	3101      	adds	r1, #1
    789e:	42b9      	cmp	r1, r7
    78a0:	d1f8      	bne.n	7894 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x30>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    78a2:	f1bc 0f06 	cmp.w	ip, #6
    78a6:	dd15      	ble.n	78d4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x70>
    78a8:	f8be 2006 	ldrh.w	r2, [lr, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    78ac:	b1a2      	cbz	r2, 78d8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x74>
    78ae:	5680      	ldrsb	r0, [r0, r2]
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    78b0:	461a      	mov	r2, r3
    78b2:	f10d 0107 	add.w	r1, sp, #7
    78b6:	b2c0      	uxtb	r0, r0
    78b8:	4b0f      	ldr	r3, [pc, #60]	; (78f8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x94>)
    78ba:	4798      	blx	r3
    78bc:	b170      	cbz	r0, 78dc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x78>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
  *bytes = element_count * (*type_size);
  return kTfLiteOk;
}
    78be:	b003      	add	sp, #12
    78c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  int element_count = 1;
    78c4:	2501      	movs	r5, #1
    78c6:	e7ec      	b.n	78a2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
    78c8:	2501      	movs	r5, #1
    78ca:	e7ea      	b.n	78a2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
    78cc:	2501      	movs	r5, #1
    78ce:	e7e8      	b.n	78a2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    78d0:	2501      	movs	r5, #1
    78d2:	e7e6      	b.n	78a2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
    78d4:	2000      	movs	r0, #0
    78d6:	e7eb      	b.n	78b0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4c>
    78d8:	2000      	movs	r0, #0
    78da:	e7e9      	b.n	78b0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4c>
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
    78dc:	4649      	mov	r1, r9
    78de:	f89d 0007 	ldrb.w	r0, [sp, #7]
    78e2:	4b06      	ldr	r3, [pc, #24]	; (78fc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x98>)
    78e4:	4798      	blx	r3
    78e6:	2800      	cmp	r0, #0
    78e8:	d1e9      	bne.n	78be <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x5a>
  *bytes = element_count * (*type_size);
    78ea:	f8d9 2000 	ldr.w	r2, [r9]
    78ee:	fb05 f502 	mul.w	r5, r5, r2
    78f2:	f8c8 5000 	str.w	r5, [r8]
  return kTfLiteOk;
    78f6:	e7e2      	b.n	78be <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x5a>
    78f8:	00001405 	.word	0x00001405
    78fc:	0000780b 	.word	0x0000780b

00007900 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
}

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
  // We don't own the scratch buffer, so don't deallocate anything.
}
    7900:	4770      	bx	lr

00007902 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    line[kLineWidth] = 0;
    TF_LITE_REPORT_ERROR(error_reporter, "%s", (const char*)line);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
    7902:	6880      	ldr	r0, [r0, #8]
    7904:	4770      	bx	lr
	...

00007908 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
    int last_time_used) {
    7908:	b538      	push	{r3, r4, r5, lr}
  if (buffer_count_ >= max_buffer_count_) {
    790a:	6884      	ldr	r4, [r0, #8]
    790c:	6845      	ldr	r5, [r0, #4]
    790e:	42ac      	cmp	r4, r5
    7910:	da11      	bge.n	7936 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2e>
  BufferRequirements* current = &requirements_[buffer_count_];
    7912:	0124      	lsls	r4, r4, #4
    7914:	68c5      	ldr	r5, [r0, #12]
    7916:	1929      	adds	r1, r5, r4
  current->size = size;
    7918:	512a      	str	r2, [r5, r4]
  current->first_time_used = first_time_used;
    791a:	608b      	str	r3, [r1, #8]
  current->last_time_used = last_time_used;
    791c:	9b04      	ldr	r3, [sp, #16]
    791e:	60cb      	str	r3, [r1, #12]
  current->offline_offset = kOnlinePlannedBuffer;
    7920:	f04f 33ff 	mov.w	r3, #4294967295
    7924:	604b      	str	r3, [r1, #4]
  ++buffer_count_;
    7926:	6883      	ldr	r3, [r0, #8]
    7928:	3301      	adds	r3, #1
    792a:	6083      	str	r3, [r0, #8]
  need_to_calculate_offsets_ = true;
    792c:	2301      	movs	r3, #1
    792e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  return kTfLiteOk;
    7932:	2000      	movs	r0, #0
}
    7934:	bd38      	pop	{r3, r4, r5, pc}
    7936:	4608      	mov	r0, r1
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
    7938:	462a      	mov	r2, r5
    793a:	4902      	ldr	r1, [pc, #8]	; (7944 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x3c>)
    793c:	4b02      	ldr	r3, [pc, #8]	; (7948 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x40>)
    793e:	4798      	blx	r3
    return kTfLiteError;
    7940:	2001      	movs	r0, #1
    7942:	bd38      	pop	{r3, r4, r5, pc}
    7944:	0003c0cc 	.word	0x0003c0cc
    7948:	000012f9 	.word	0x000012f9

0000794c <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
    794c:	b510      	push	{r4, lr}
    794e:	4604      	mov	r4, r0
}
    7950:	4b01      	ldr	r3, [pc, #4]	; (7958 <_ZN6tflite19GreedyMemoryPlannerD0Ev+0xc>)
    7952:	4798      	blx	r3
    7954:	4620      	mov	r0, r4
    7956:	bd10      	pop	{r4, pc}
    7958:	0000ccb9 	.word	0x0000ccb9

0000795c <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
void ReverseSortInPlace(int* values, int* ids, int size) {
    795c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7960:	4694      	mov	ip, r2
    7962:	f102 4780 	add.w	r7, r2, #1073741824	; 0x40000000
    7966:	3f01      	subs	r7, #1
    7968:	eb00 0787 	add.w	r7, r0, r7, lsl #2
    for (int i = 1; i < size; ++i) {
    796c:	f04f 0800 	mov.w	r8, #0
        any_swapped = true;
    7970:	f04f 0e01 	mov.w	lr, #1
    7974:	e010      	b.n	7998 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x3c>
    7976:	3304      	adds	r3, #4
    7978:	3404      	adds	r4, #4
    for (int i = 1; i < size; ++i) {
    797a:	42bb      	cmp	r3, r7
    797c:	d00b      	beq.n	7996 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x3a>
      if (values[i - 1] < values[i]) {
    797e:	681d      	ldr	r5, [r3, #0]
    7980:	685e      	ldr	r6, [r3, #4]
    7982:	42b5      	cmp	r5, r6
    7984:	daf7      	bge.n	7976 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x1a>
        values[i - 1] = values[i];
    7986:	601e      	str	r6, [r3, #0]
        values[i] = value_temp;
    7988:	605d      	str	r5, [r3, #4]
        const int id_temp = ids[i - 1];
    798a:	6825      	ldr	r5, [r4, #0]
        ids[i - 1] = ids[i];
    798c:	6866      	ldr	r6, [r4, #4]
    798e:	6026      	str	r6, [r4, #0]
        ids[i] = id_temp;
    7990:	6065      	str	r5, [r4, #4]
        any_swapped = true;
    7992:	4672      	mov	r2, lr
    7994:	e7ef      	b.n	7976 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x1a>
  do {
    7996:	b132      	cbz	r2, 79a6 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x4a>
    for (int i = 1; i < size; ++i) {
    7998:	f1bc 0f01 	cmp.w	ip, #1
    799c:	dd03      	ble.n	79a6 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x4a>
    799e:	4603      	mov	r3, r0
    79a0:	460c      	mov	r4, r1
    79a2:	4642      	mov	r2, r8
    79a4:	e7eb      	b.n	797e <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x22>
    79a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000079ac <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
    79ac:	b410      	push	{r4}
    : buffer_count_(0), need_to_calculate_offsets_(true) {
    79ae:	4c0e      	ldr	r4, [pc, #56]	; (79e8 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0x3c>)
    79b0:	6004      	str	r4, [r0, #0]
    79b2:	2400      	movs	r4, #0
    79b4:	6084      	str	r4, [r0, #8]
    79b6:	2401      	movs	r4, #1
    79b8:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
    79bc:	f104 34cc 	add.w	r4, r4, #3435973836	; 0xcccccccc
    79c0:	fba4 4202 	umull	r4, r2, r4, r2
    79c4:	0952      	lsrs	r2, r2, #5
    79c6:	6042      	str	r2, [r0, #4]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
    79c8:	60c1      	str	r1, [r0, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
    79ca:	eb01 1102 	add.w	r1, r1, r2, lsl #4
  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
    79ce:	6101      	str	r1, [r0, #16]
  next_free += sizeof(int) * max_buffer_count_;
    79d0:	0094      	lsls	r4, r2, #2
    79d2:	4421      	add	r1, r4
  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
    79d4:	6141      	str	r1, [r0, #20]
  next_free += sizeof(int) * max_buffer_count_;
    79d6:	4421      	add	r1, r4
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
    79d8:	6181      	str	r1, [r0, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
    79da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    79de:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
    79e2:	6241      	str	r1, [r0, #36]	; 0x24
}
    79e4:	bc10      	pop	{r4}
    79e6:	4770      	bx	lr
    79e8:	0003c0b4 	.word	0x0003c0b4

000079ec <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:
    int last_time_used, int offline_offset) {
    79ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    79ee:	b083      	sub	sp, #12
  BufferRequirements* current = &requirements_[buffer_count_];
    79f0:	68c5      	ldr	r5, [r0, #12]
    79f2:	6887      	ldr	r7, [r0, #8]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
    79f4:	6804      	ldr	r4, [r0, #0]
    79f6:	9e08      	ldr	r6, [sp, #32]
    79f8:	9600      	str	r6, [sp, #0]
    79fa:	68a4      	ldr	r4, [r4, #8]
    79fc:	47a0      	blx	r4
    79fe:	b928      	cbnz	r0, 7a0c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x20>
  current->offline_offset = offline_offset;
    7a00:	eb05 1507 	add.w	r5, r5, r7, lsl #4
    7a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7a06:	606b      	str	r3, [r5, #4]
}
    7a08:	b003      	add	sp, #12
    7a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return kTfLiteError;
    7a0c:	2001      	movs	r0, #1
    7a0e:	e7fb      	b.n	7a08 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1c>

00007a10 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
    const int last_time_used) const {
    7a10:	b410      	push	{r4}
      &requirements_[entry->requirements_index];
    7a12:	684c      	ldr	r4, [r1, #4]
    7a14:	68c1      	ldr	r1, [r0, #12]
    7a16:	eb01 1104 	add.w	r1, r1, r4, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
    7a1a:	6888      	ldr	r0, [r1, #8]
    7a1c:	4298      	cmp	r0, r3
    7a1e:	dc06      	bgt.n	7a2e <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1e>
  if (first_time_used > entry_requirements->last_time_used) {
    7a20:	68c8      	ldr	r0, [r1, #12]
    7a22:	4290      	cmp	r0, r2
    7a24:	bfb4      	ite	lt
    7a26:	2000      	movlt	r0, #0
    7a28:	2001      	movge	r0, #1
}
    7a2a:	bc10      	pop	{r4}
    7a2c:	4770      	bx	lr
    return false;
    7a2e:	2000      	movs	r0, #0
    7a30:	e7fb      	b.n	7a2a <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1a>
	...

00007a34 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
    7a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (start == nullptr) {
    7a38:	b1e1      	cbz	r1, 7a74 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x40>
    if (start->next_entry_index == -1) {
    7a3a:	688c      	ldr	r4, [r1, #8]
    7a3c:	f1b4 3fff 	cmp.w	r4, #4294967295
    7a40:	d01f      	beq.n	7a82 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x4e>
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
    7a42:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7a46:	6981      	ldr	r1, [r0, #24]
    7a48:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    7a4c:	461f      	mov	r7, r3
    7a4e:	4690      	mov	r8, r2
    7a50:	4605      	mov	r5, r0
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
    7a52:	4e0f      	ldr	r6, [pc, #60]	; (7a90 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x5c>)
    7a54:	463b      	mov	r3, r7
    7a56:	4642      	mov	r2, r8
    7a58:	4621      	mov	r1, r4
    7a5a:	4628      	mov	r0, r5
    7a5c:	47b0      	blx	r6
    7a5e:	b998      	cbnz	r0, 7a88 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
    if (candidate_next_entry->next_entry_index == -1) {
    7a60:	68a1      	ldr	r1, [r4, #8]
    7a62:	f1b1 3fff 	cmp.w	r1, #4294967295
    7a66:	d00e      	beq.n	7a86 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x52>
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
    7a68:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    candidate_next_entry =
    7a6c:	69ac      	ldr	r4, [r5, #24]
    7a6e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
    7a72:	e7ef      	b.n	7a54 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x20>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
    7a74:	6a04      	ldr	r4, [r0, #32]
    7a76:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7a7a:	6981      	ldr	r1, [r0, #24]
    7a7c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    7a80:	e7e4      	b.n	7a4c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x18>
      return nullptr;
    7a82:	2400      	movs	r4, #0
    7a84:	e000      	b.n	7a88 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  ListEntry* result = nullptr;
    7a86:	2400      	movs	r4, #0
}
    7a88:	4620      	mov	r0, r4
    7a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a8e:	bf00      	nop
    7a90:	00007a11 	.word	0x00007a11

00007a94 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
    7a94:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    7a98:	2b00      	cmp	r3, #0
    7a9a:	f000 80d6 	beq.w	7c4a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b6>
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
    7a9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7aa2:	b085      	sub	sp, #20
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
    7aa4:	6887      	ldr	r7, [r0, #8]
    7aa6:	2f00      	cmp	r7, #0
    7aa8:	f000 80cc 	beq.w	7c44 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b0>
  need_to_calculate_offsets_ = false;
    7aac:	2300      	movs	r3, #0
    7aae:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  for (int i = 0; i < buffer_count_; ++i) {
    7ab2:	429f      	cmp	r7, r3
    7ab4:	dd2a      	ble.n	7b0c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x78>
    7ab6:	461d      	mov	r5, r3
    7ab8:	461c      	mov	r4, r3
    7aba:	461a      	mov	r2, r3
      buffer_offsets_[i] = -1;
    7abc:	f04f 3eff 	mov.w	lr, #4294967295
    7ac0:	e00f      	b.n	7ae2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x4e>
      idx_from_tail--;
    7ac2:	3f01      	subs	r7, #1
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
    7ac4:	58c9      	ldr	r1, [r1, r3]
    7ac6:	6903      	ldr	r3, [r0, #16]
    7ac8:	f843 1027 	str.w	r1, [r3, r7, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
    7acc:	6943      	ldr	r3, [r0, #20]
    7ace:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
      buffer_offsets_[i] = -1;
    7ad2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    7ad4:	f843 e005 	str.w	lr, [r3, r5]
  for (int i = 0; i < buffer_count_; ++i) {
    7ad8:	3401      	adds	r4, #1
    7ada:	6883      	ldr	r3, [r0, #8]
    7adc:	3504      	adds	r5, #4
    7ade:	42a3      	cmp	r3, r4
    7ae0:	dd16      	ble.n	7b10 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x7c>
    7ae2:	0123      	lsls	r3, r4, #4
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
    7ae4:	68c1      	ldr	r1, [r0, #12]
    7ae6:	18ce      	adds	r6, r1, r3
    7ae8:	6876      	ldr	r6, [r6, #4]
    7aea:	f1b6 3fff 	cmp.w	r6, #4294967295
    7aee:	d0e8      	beq.n	7ac2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2e>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
    7af0:	58ce      	ldr	r6, [r1, r3]
    7af2:	6901      	ldr	r1, [r0, #16]
    7af4:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
      buffer_ids_sorted_[idx_from_head] = i;
    7af8:	6941      	ldr	r1, [r0, #20]
    7afa:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
      buffer_offsets_[i] = requirements_[i].offline_offset;
    7afe:	68c1      	ldr	r1, [r0, #12]
    7b00:	440b      	add	r3, r1
    7b02:	6859      	ldr	r1, [r3, #4]
    7b04:	6a43      	ldr	r3, [r0, #36]	; 0x24
    7b06:	5159      	str	r1, [r3, r5]
      idx_from_head++;
    7b08:	3201      	adds	r2, #1
    7b0a:	e7e5      	b.n	7ad8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x44>
  for (int i = 0; i < buffer_count_; ++i) {
    7b0c:	463b      	mov	r3, r7
  int idx_from_head = 0;
    7b0e:	2200      	movs	r2, #0
    7b10:	4604      	mov	r4, r0
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
    7b12:	0090      	lsls	r0, r2, #2
    7b14:	6961      	ldr	r1, [r4, #20]
    7b16:	6925      	ldr	r5, [r4, #16]
                     buffer_count_ - idx_from_head);
    7b18:	1a9a      	subs	r2, r3, r2
    7b1a:	4401      	add	r1, r0
    7b1c:	4428      	add	r0, r5
    7b1e:	4b4b      	ldr	r3, [pc, #300]	; (7c4c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b8>)
    7b20:	4798      	blx	r3
  first_entry_index_ = 0;
    7b22:	2300      	movs	r3, #0
    7b24:	6223      	str	r3, [r4, #32]
  next_free_entry_ = 1;
    7b26:	2301      	movs	r3, #1
    7b28:	61e3      	str	r3, [r4, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
    7b2a:	69a3      	ldr	r3, [r4, #24]
    7b2c:	4619      	mov	r1, r3
    7b2e:	9303      	str	r3, [sp, #12]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
    7b30:	f04f 33ff 	mov.w	r3, #4294967295
    7b34:	608b      	str	r3, [r1, #8]
  int buffer_id = buffer_ids_sorted_[0];
    7b36:	6963      	ldr	r3, [r4, #20]
    7b38:	681b      	ldr	r3, [r3, #0]
  first_entry->requirements_index = buffer_id;
    7b3a:	604b      	str	r3, [r1, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
    7b3c:	68e2      	ldr	r2, [r4, #12]
    7b3e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    7b42:	6852      	ldr	r2, [r2, #4]
    7b44:	f1b2 3fff 	cmp.w	r2, #4294967295
    7b48:	d00a      	beq.n	7b60 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xcc>
  first_entry->offset = buffer_offsets_[buffer_id];
    7b4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b50:	9a03      	ldr	r2, [sp, #12]
    7b52:	6013      	str	r3, [r2, #0]
  for (int i = 1; i < buffer_count_; ++i) {
    7b54:	68a3      	ldr	r3, [r4, #8]
    7b56:	2b01      	cmp	r3, #1
    7b58:	dd74      	ble.n	7c44 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b0>
    7b5a:	f04f 0a01 	mov.w	sl, #1
    7b5e:	e03a      	b.n	7bd6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x142>
    buffer_offsets_[buffer_id] = 0;
    7b60:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7b62:	2100      	movs	r1, #0
    7b64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    7b68:	e7ef      	b.n	7b4a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xb6>
            prior_entry, wanted_first_time_used, wanted_last_time_used);
    7b6a:	9b02      	ldr	r3, [sp, #8]
    7b6c:	9a01      	ldr	r2, [sp, #4]
    7b6e:	4639      	mov	r1, r7
    7b70:	9800      	ldr	r0, [sp, #0]
    7b72:	4c37      	ldr	r4, [pc, #220]	; (7c50 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1bc>)
    7b74:	47a0      	blx	r4
              &requirements_[prior_entry->requirements_index];
    7b76:	687b      	ldr	r3, [r7, #4]
              prior_entry->offset + candidate_requirements->size;
    7b78:	011b      	lsls	r3, r3, #4
    7b7a:	f858 3003 	ldr.w	r3, [r8, r3]
    7b7e:	441d      	add	r5, r3
    7b80:	42ae      	cmp	r6, r5
    7b82:	bfb8      	it	lt
    7b84:	462e      	movlt	r6, r5
            prior_entry, wanted_first_time_used, wanted_last_time_used);
    7b86:	4607      	mov	r7, r0
        if (next_entry == nullptr) {
    7b88:	b12f      	cbz	r7, 7b96 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x102>
        const int gap = next_entry->offset - candidate_offset;
    7b8a:	683d      	ldr	r5, [r7, #0]
    7b8c:	1bab      	subs	r3, r5, r6
        if (gap >= wanted_size) {
    7b8e:	459b      	cmp	fp, r3
    7b90:	dceb      	bgt.n	7b6a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd6>
    7b92:	9c00      	ldr	r4, [sp, #0]
    7b94:	e02c      	b.n	7bf0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15c>
    7b96:	9c00      	ldr	r4, [sp, #0]
    7b98:	e02a      	b.n	7bf0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15c>
    7b9a:	9803      	ldr	r0, [sp, #12]
    7b9c:	e000      	b.n	7ba0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x10c>
        current_entry = next_entry;
    7b9e:	4628      	mov	r0, r5
        const int next_entry_index = current_entry->next_entry_index;
    7ba0:	6882      	ldr	r2, [r0, #8]
        if (next_entry_index == -1) {
    7ba2:	f1b2 3fff 	cmp.w	r2, #4294967295
    7ba6:	d00c      	beq.n	7bc2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12e>
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
    7ba8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    7bac:	69a1      	ldr	r1, [r4, #24]
    7bae:	eb01 0583 	add.w	r5, r1, r3, lsl #2
        if (next_entry->offset > candidate_offset) {
    7bb2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    7bb6:	429e      	cmp	r6, r3
    7bb8:	daf1      	bge.n	7b9e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x10a>
          new_entry->next_entry_index = current_entry->next_entry_index;
    7bba:	60ba      	str	r2, [r7, #8]
          current_entry->next_entry_index = new_entry_index;
    7bbc:	f8c0 e008 	str.w	lr, [r0, #8]
          break;
    7bc0:	e004      	b.n	7bcc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x138>
          current_entry->next_entry_index = new_entry_index;
    7bc2:	f8c0 e008 	str.w	lr, [r0, #8]
          new_entry->next_entry_index = -1;
    7bc6:	f04f 33ff 	mov.w	r3, #4294967295
    7bca:	60bb      	str	r3, [r7, #8]
  for (int i = 1; i < buffer_count_; ++i) {
    7bcc:	f10a 0a01 	add.w	sl, sl, #1
    7bd0:	68a3      	ldr	r3, [r4, #8]
    7bd2:	4553      	cmp	r3, sl
    7bd4:	dd36      	ble.n	7c44 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b0>
    buffer_id = buffer_ids_sorted_[i];
    7bd6:	6963      	ldr	r3, [r4, #20]
    7bd8:	f853 902a 	ldr.w	r9, [r3, sl, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
    7bdc:	f8d4 800c 	ldr.w	r8, [r4, #12]
    7be0:	ea4f 1209 	mov.w	r2, r9, lsl #4
    7be4:	eb08 0302 	add.w	r3, r8, r2
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
    7be8:	685e      	ldr	r6, [r3, #4]
    7bea:	f1b6 3fff 	cmp.w	r6, #4294967295
    7bee:	d01b      	beq.n	7c28 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x194>
    buffer_offsets_[buffer_id] = candidate_offset;
    7bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7bf2:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
    7bf6:	69e3      	ldr	r3, [r4, #28]
    7bf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7bfc:	69a2      	ldr	r2, [r4, #24]
    7bfe:	eb02 0783 	add.w	r7, r2, r3, lsl #2
    new_entry->offset = candidate_offset;
    7c02:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
    new_entry->requirements_index = buffer_id;
    7c06:	f8c7 9004 	str.w	r9, [r7, #4]
    const int new_entry_index = next_free_entry_;
    7c0a:	f8d4 e01c 	ldr.w	lr, [r4, #28]
    ++next_free_entry_;
    7c0e:	f10e 0301 	add.w	r3, lr, #1
    7c12:	61e3      	str	r3, [r4, #28]
    if (first_entry->offset > candidate_offset) {
    7c14:	9b03      	ldr	r3, [sp, #12]
    7c16:	681b      	ldr	r3, [r3, #0]
    7c18:	429e      	cmp	r6, r3
    7c1a:	dabe      	bge.n	7b9a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x106>
      first_entry->next_entry_index = first_entry_index_;
    7c1c:	6a23      	ldr	r3, [r4, #32]
    7c1e:	60bb      	str	r3, [r7, #8]
      first_entry_index_ = new_entry_index;
    7c20:	f8c4 e020 	str.w	lr, [r4, #32]
      first_entry = new_entry;
    7c24:	9703      	str	r7, [sp, #12]
    7c26:	e7d1      	b.n	7bcc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x138>
    const int wanted_size = wanted_requirements->size;
    7c28:	f858 b002 	ldr.w	fp, [r8, r2]
    const int wanted_first_time_used = wanted_requirements->first_time_used;
    7c2c:	689a      	ldr	r2, [r3, #8]
    7c2e:	9201      	str	r2, [sp, #4]
    const int wanted_last_time_used = wanted_requirements->last_time_used;
    7c30:	68db      	ldr	r3, [r3, #12]
    7c32:	9302      	str	r3, [sp, #8]
            prior_entry, wanted_first_time_used, wanted_last_time_used);
    7c34:	2100      	movs	r1, #0
    7c36:	4620      	mov	r0, r4
    7c38:	4d05      	ldr	r5, [pc, #20]	; (7c50 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1bc>)
    7c3a:	47a8      	blx	r5
    7c3c:	4607      	mov	r7, r0
    7c3e:	2600      	movs	r6, #0
    7c40:	9400      	str	r4, [sp, #0]
    7c42:	e7a1      	b.n	7b88 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xf4>
}
    7c44:	b005      	add	sp, #20
    7c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7c4a:	4770      	bx	lr
    7c4c:	0000795d 	.word	0x0000795d
    7c50:	00007a35 	.word	0x00007a35

00007c54 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
    7c54:	b570      	push	{r4, r5, r6, lr}
    7c56:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
    7c58:	4b18      	ldr	r3, [pc, #96]	; (7cbc <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x68>)
    7c5a:	4798      	blx	r3
  if (buffer_count_ == 0) {
    7c5c:	68a3      	ldr	r3, [r4, #8]
    7c5e:	b343      	cbz	r3, 7cb2 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x5e>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
    7c60:	69a1      	ldr	r1, [r4, #24]
    7c62:	6a23      	ldr	r3, [r4, #32]
    7c64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7c68:	009b      	lsls	r3, r3, #2
  while (entry) {
    7c6a:	18ce      	adds	r6, r1, r3
    7c6c:	d023      	beq.n	7cb6 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x62>
        &requirements_[entry->requirements_index];
    7c6e:	68e5      	ldr	r5, [r4, #12]
    7c70:	6872      	ldr	r2, [r6, #4]
    const size_t current_size = entry->offset + requirements->size;
    7c72:	0112      	lsls	r2, r2, #4
    7c74:	58a8      	ldr	r0, [r5, r2]
    7c76:	58cb      	ldr	r3, [r1, r3]
    7c78:	4418      	add	r0, r3
    7c7a:	2800      	cmp	r0, #0
    7c7c:	bf38      	it	cc
    7c7e:	2000      	movcc	r0, #0
    if (entry->next_entry_index == -1) {
    7c80:	68b3      	ldr	r3, [r6, #8]
    7c82:	f1b3 3fff 	cmp.w	r3, #4294967295
    7c86:	d012      	beq.n	7cae <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x5a>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
    7c88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  while (entry) {
    7c8c:	eb11 0483 	adds.w	r4, r1, r3, lsl #2
    7c90:	d00e      	beq.n	7cb0 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x5c>
        &requirements_[entry->requirements_index];
    7c92:	6862      	ldr	r2, [r4, #4]
    const size_t current_size = entry->offset + requirements->size;
    7c94:	0112      	lsls	r2, r2, #4
    7c96:	58aa      	ldr	r2, [r5, r2]
    7c98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    7c9c:	4413      	add	r3, r2
    7c9e:	4298      	cmp	r0, r3
    7ca0:	bf38      	it	cc
    7ca2:	4618      	movcc	r0, r3
    if (entry->next_entry_index == -1) {
    7ca4:	68a3      	ldr	r3, [r4, #8]
    7ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
    7caa:	d1ed      	bne.n	7c88 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
}
    7cac:	bd70      	pop	{r4, r5, r6, pc}
    7cae:	bd70      	pop	{r4, r5, r6, pc}
    7cb0:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
    7cb2:	2000      	movs	r0, #0
    7cb4:	bd70      	pop	{r4, r5, r6, pc}
  size_t max_size = 0;
    7cb6:	2000      	movs	r0, #0
    7cb8:	e7f8      	b.n	7cac <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x58>
    7cba:	bf00      	nop
    7cbc:	00007a95 	.word	0x00007a95

00007cc0 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
    7cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cc2:	4605      	mov	r5, r0
    7cc4:	460f      	mov	r7, r1
    7cc6:	4614      	mov	r4, r2
    7cc8:	461e      	mov	r6, r3
  CalculateOffsetsIfNeeded();
    7cca:	4b0a      	ldr	r3, [pc, #40]	; (7cf4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x34>)
    7ccc:	4798      	blx	r3
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
    7cce:	2c00      	cmp	r4, #0
    7cd0:	db08      	blt.n	7ce4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    7cd2:	68ab      	ldr	r3, [r5, #8]
    7cd4:	429c      	cmp	r4, r3
    7cd6:	da05      	bge.n	7ce4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    TF_LITE_REPORT_ERROR(error_reporter,
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
    7cd8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7cda:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    7cde:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
    7ce0:	2000      	movs	r0, #0
}
    7ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(error_reporter,
    7ce4:	68ab      	ldr	r3, [r5, #8]
    7ce6:	4622      	mov	r2, r4
    7ce8:	4903      	ldr	r1, [pc, #12]	; (7cf8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x38>)
    7cea:	4638      	mov	r0, r7
    7cec:	4c03      	ldr	r4, [pc, #12]	; (7cfc <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x3c>)
    7cee:	47a0      	blx	r4
    return kTfLiteError;
    7cf0:	2001      	movs	r0, #1
    7cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7cf4:	00007a95 	.word	0x00007a95
    7cf8:	0003c0ec 	.word	0x0003c0ec
    7cfc:	000012f9 	.word	0x000012f9

00007d00 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
      : memory_allocator_(memory_allocator) {}

  void* Allocate(size_t size, size_t alignment_hint) override {
    7d00:	b508      	push	{r3, lr}
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
    7d02:	6840      	ldr	r0, [r0, #4]
    7d04:	6803      	ldr	r3, [r0, #0]
    7d06:	68db      	ldr	r3, [r3, #12]
    7d08:	4798      	blx	r3
  }
    7d0a:	bd08      	pop	{r3, pc}

00007d0c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
    7d0c:	4770      	bx	lr

00007d0e <_ZN6tflite14MicroAllocatorD1Ev>:
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}

MicroAllocator::~MicroAllocator() {}
    7d0e:	4770      	bx	lr

00007d10 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
    7d10:	4770      	bx	lr
	...

00007d14 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
    7d14:	b510      	push	{r4, lr}
    7d16:	4604      	mov	r4, r0
    7d18:	4b01      	ldr	r3, [pc, #4]	; (7d20 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev+0xc>)
    7d1a:	4798      	blx	r3
    7d1c:	4620      	mov	r0, r4
    7d1e:	bd10      	pop	{r4, pc}
    7d20:	0000ccb9 	.word	0x0000ccb9

00007d24 <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
    7d24:	b510      	push	{r4, lr}
    7d26:	4604      	mov	r4, r0
    7d28:	4b01      	ldr	r3, [pc, #4]	; (7d30 <_ZN6tflite14MicroAllocatorD0Ev+0xc>)
    7d2a:	4798      	blx	r3
    7d2c:	4620      	mov	r0, r4
    7d2e:	bd10      	pop	{r4, pc}
    7d30:	0000ccb9 	.word	0x0000ccb9

00007d34 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateTfLiteTensorArray(
    TfLiteContext* context, const SubGraph* subgraph) {
    7d34:	b538      	push	{r3, r4, r5, lr}
    7d36:	4605      	mov	r5, r0
    7d38:	460c      	mov	r4, r1
    return data_ - ReadScalar<soffset_t>(data_);
    7d3a:	6813      	ldr	r3, [r2, #0]
    7d3c:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7d3e:	8819      	ldrh	r1, [r3, #0]
    7d40:	2904      	cmp	r1, #4
    7d42:	dd10      	ble.n	7d66 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x32>
    7d44:	8899      	ldrh	r1, [r3, #4]
    auto p = data_ + field_offset;
    7d46:	1853      	adds	r3, r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7d48:	b179      	cbz	r1, 7d6a <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x36>
    7d4a:	5852      	ldr	r2, [r2, r1]
    7d4c:	4413      	add	r3, r2
  uoffset_t size() const { return EndianScalar(length_); }
    7d4e:	6819      	ldr	r1, [r3, #0]
  context->tensors_size = subgraph->tensors()->size();
    7d50:	6021      	str	r1, [r4, #0]
  context->tensors =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
    7d52:	6868      	ldr	r0, [r5, #4]
          sizeof(TfLiteTensor) * context->tensors_size, alignof(TfLiteTensor)));
    7d54:	6803      	ldr	r3, [r0, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
    7d56:	68db      	ldr	r3, [r3, #12]
    7d58:	2204      	movs	r2, #4
    7d5a:	0189      	lsls	r1, r1, #6
    7d5c:	4798      	blx	r3
  context->tensors =
    7d5e:	60a0      	str	r0, [r4, #8]
  if (context->tensors == nullptr) {
    7d60:	b128      	cbz	r0, 7d6e <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x3a>
        error_reporter_,
        "Failed to allocate memory for context->tensors, %d bytes required",
        sizeof(TfLiteTensor) * context->tensors_size);
    return kTfLiteError;
  }
  return kTfLiteOk;
    7d62:	2000      	movs	r0, #0
}
    7d64:	bd38      	pop	{r3, r4, r5, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7d66:	2300      	movs	r3, #0
    7d68:	e7f1      	b.n	7d4e <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x1a>
    7d6a:	2300      	movs	r3, #0
    7d6c:	e7ef      	b.n	7d4e <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x1a>
    TF_LITE_REPORT_ERROR(
    7d6e:	6822      	ldr	r2, [r4, #0]
    7d70:	0192      	lsls	r2, r2, #6
    7d72:	4903      	ldr	r1, [pc, #12]	; (7d80 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x4c>)
    7d74:	68a8      	ldr	r0, [r5, #8]
    7d76:	4b03      	ldr	r3, [pc, #12]	; (7d84 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x50>)
    7d78:	4798      	blx	r3
    return kTfLiteError;
    7d7a:	2001      	movs	r0, #1
    7d7c:	bd38      	pop	{r3, r4, r5, pc}
    7d7e:	bf00      	nop
    7d80:	0003c6a4 	.word	0x0003c6a4
    7d84:	000012f9 	.word	0x000012f9

00007d88 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE>:
  }
  return kTfLiteOk;
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const SubGraph* subgraph, NodeAndRegistration** node_and_registrations) {
    7d88:	b570      	push	{r4, r5, r6, lr}
    7d8a:	4604      	mov	r4, r0
    7d8c:	4615      	mov	r5, r2
  NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
      memory_allocator_->AllocateFromTail(
    7d8e:	6840      	ldr	r0, [r0, #4]
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
          alignof(NodeAndRegistration)));
    7d90:	6803      	ldr	r3, [r0, #0]
    7d92:	68de      	ldr	r6, [r3, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    7d94:	680b      	ldr	r3, [r1, #0]
    7d96:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7d98:	881a      	ldrh	r2, [r3, #0]
    7d9a:	2a0a      	cmp	r2, #10
    7d9c:	dd0e      	ble.n	7dbc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x34>
    7d9e:	895a      	ldrh	r2, [r3, #10]
    auto p = data_ + field_offset;
    7da0:	188b      	adds	r3, r1, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7da2:	b16a      	cbz	r2, 7dc0 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x38>
    7da4:	588a      	ldr	r2, [r1, r2]
    7da6:	4413      	add	r3, r2
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
    7da8:	6819      	ldr	r1, [r3, #0]
    7daa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
          alignof(NodeAndRegistration)));
    7dae:	2204      	movs	r2, #4
    7db0:	00c9      	lsls	r1, r1, #3
    7db2:	47b0      	blx	r6
  if (output == nullptr) {
    7db4:	b130      	cbz	r0, 7dc4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x3c>
    TF_LITE_REPORT_ERROR(
        error_reporter_,
        "Failed to allocate memory for node_and_registrations.");
    return kTfLiteError;
  }
  *node_and_registrations = output;
    7db6:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
    7db8:	2000      	movs	r0, #0
}
    7dba:	bd70      	pop	{r4, r5, r6, pc}
    7dbc:	2300      	movs	r3, #0
    7dbe:	e7f3      	b.n	7da8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x20>
    7dc0:	2300      	movs	r3, #0
    7dc2:	e7f1      	b.n	7da8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x20>
    TF_LITE_REPORT_ERROR(
    7dc4:	4902      	ldr	r1, [pc, #8]	; (7dd0 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x48>)
    7dc6:	68a0      	ldr	r0, [r4, #8]
    7dc8:	4b02      	ldr	r3, [pc, #8]	; (7dd4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x4c>)
    7dca:	4798      	blx	r3
    return kTfLiteError;
    7dcc:	2001      	movs	r0, #1
    7dce:	bd70      	pop	{r4, r5, r6, pc}
    7dd0:	0003c6e8 	.word	0x0003c6e8
    7dd4:	000012f9 	.word	0x000012f9

00007dd8 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE>:

  return kTfLiteOk;
}

TfLiteStatus MicroAllocator::AllocateVariables(TfLiteContext* context,
                                               const SubGraph* subgraph) {
    7dd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (size_t i = 0; i < context->tensors_size; ++i) {
    7ddc:	680b      	ldr	r3, [r1, #0]
    7dde:	2b00      	cmp	r3, #0
    7de0:	d059      	beq.n	7e96 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xbe>
    7de2:	4616      	mov	r6, r2
    7de4:	460f      	mov	r7, r1
    7de6:	4682      	mov	sl, r0
    7de8:	2500      	movs	r5, #0
    7dea:	462c      	mov	r4, r5
    if (subgraph->tensors()->Get(i)->is_variable()) {
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
    7dec:	f04f 0b10 	mov.w	fp, #16
                             "Failed to allocate variable tensor of size %d",
                             context->tensors[i].bytes);
        return kTfLiteError;
      }
    }
    tflite::ResetVariableTensor(&(context->tensors[i]));
    7df0:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 7eb4 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xdc>
    7df4:	e012      	b.n	7e1c <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x44>
    7df6:	2300      	movs	r3, #0
    7df8:	e01b      	b.n	7e32 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x5a>
    7dfa:	2300      	movs	r3, #0
    7dfc:	e019      	b.n	7e32 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x5a>
    FLATBUFFERS_ASSERT(i < size());
    7dfe:	4b27      	ldr	r3, [pc, #156]	; (7e9c <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xc4>)
    7e00:	4a27      	ldr	r2, [pc, #156]	; (7ea0 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xc8>)
    7e02:	f240 1101 	movw	r1, #257	; 0x101
    7e06:	4827      	ldr	r0, [pc, #156]	; (7ea4 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xcc>)
    7e08:	4c27      	ldr	r4, [pc, #156]	; (7ea8 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xd0>)
    7e0a:	47a0      	blx	r4
    7e0c:	68b8      	ldr	r0, [r7, #8]
    7e0e:	4428      	add	r0, r5
    7e10:	47c8      	blx	r9
  for (size_t i = 0; i < context->tensors_size; ++i) {
    7e12:	3401      	adds	r4, #1
    7e14:	3540      	adds	r5, #64	; 0x40
    7e16:	683b      	ldr	r3, [r7, #0]
    7e18:	42a3      	cmp	r3, r4
    7e1a:	d939      	bls.n	7e90 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xb8>
    return data_ - ReadScalar<soffset_t>(data_);
    7e1c:	6833      	ldr	r3, [r6, #0]
    7e1e:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7e20:	881a      	ldrh	r2, [r3, #0]
    7e22:	2a04      	cmp	r2, #4
    7e24:	dde7      	ble.n	7df6 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x1e>
    7e26:	889a      	ldrh	r2, [r3, #4]
    auto p = data_ + field_offset;
    7e28:	18b3      	adds	r3, r6, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7e2a:	2a00      	cmp	r2, #0
    7e2c:	d0e5      	beq.n	7dfa <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x22>
    7e2e:	58b2      	ldr	r2, [r6, r2]
    7e30:	4413      	add	r3, r2
    FLATBUFFERS_ASSERT(i < size());
    7e32:	681a      	ldr	r2, [r3, #0]
    7e34:	4294      	cmp	r4, r2
    7e36:	d2e2      	bcs.n	7dfe <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x26>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7e38:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    7e3a:	eb03 0284 	add.w	r2, r3, r4, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7e3e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    7e42:	18d1      	adds	r1, r2, r3
    return data_ - ReadScalar<soffset_t>(data_);
    7e44:	58d3      	ldr	r3, [r2, r3]
    7e46:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7e48:	881a      	ldrh	r2, [r3, #0]
    7e4a:	2a0e      	cmp	r2, #14
    7e4c:	ddde      	ble.n	7e0c <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x34>
    7e4e:	89db      	ldrh	r3, [r3, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7e50:	2b00      	cmp	r3, #0
    7e52:	d0db      	beq.n	7e0c <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x34>
    if (subgraph->tensors()->Get(i)->is_variable()) {
    7e54:	5ccb      	ldrb	r3, [r1, r3]
    7e56:	2b00      	cmp	r3, #0
    7e58:	d0d8      	beq.n	7e0c <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x34>
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
    7e5a:	68bb      	ldr	r3, [r7, #8]
    7e5c:	eb03 0805 	add.w	r8, r3, r5
    7e60:	f8da 0004 	ldr.w	r0, [sl, #4]
          context->tensors[i].bytes, kBufferAlignment);
    7e64:	6803      	ldr	r3, [r0, #0]
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
    7e66:	68db      	ldr	r3, [r3, #12]
    7e68:	465a      	mov	r2, fp
    7e6a:	f8d8 1018 	ldr.w	r1, [r8, #24]
    7e6e:	4798      	blx	r3
    7e70:	f8c8 0004 	str.w	r0, [r8, #4]
      if (context->tensors[i].data.data == nullptr) {
    7e74:	68bb      	ldr	r3, [r7, #8]
    7e76:	442b      	add	r3, r5
    7e78:	685a      	ldr	r2, [r3, #4]
    7e7a:	2a00      	cmp	r2, #0
    7e7c:	d1c6      	bne.n	7e0c <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x34>
        TF_LITE_REPORT_ERROR(error_reporter_,
    7e7e:	699a      	ldr	r2, [r3, #24]
    7e80:	490a      	ldr	r1, [pc, #40]	; (7eac <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xd4>)
    7e82:	f8da 0008 	ldr.w	r0, [sl, #8]
    7e86:	4b0a      	ldr	r3, [pc, #40]	; (7eb0 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xd8>)
    7e88:	4798      	blx	r3
        return kTfLiteError;
    7e8a:	2001      	movs	r0, #1
    7e8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }

  return kTfLiteOk;
    7e90:	2000      	movs	r0, #0
    7e92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e96:	2000      	movs	r0, #0
}
    7e98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e9c:	0003ac5c 	.word	0x0003ac5c
    7ea0:	0003c1bc 	.word	0x0003c1bc
    7ea4:	0003ac68 	.word	0x0003ac68
    7ea8:	000173ad 	.word	0x000173ad
    7eac:	0003c720 	.word	0x0003c720
    7eb0:	000012f9 	.word	0x000012f9
    7eb4:	00001a7d 	.word	0x00001a7d

00007eb8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>:
    NodeAndRegistration* node_and_registrations) {
    7eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ebc:	b08b      	sub	sp, #44	; 0x2c
    7ebe:	9002      	str	r0, [sp, #8]
    7ec0:	4693      	mov	fp, r2
    7ec2:	9305      	str	r3, [sp, #20]
    return data_ - ReadScalar<soffset_t>(data_);
    7ec4:	680b      	ldr	r3, [r1, #0]
    7ec6:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7ec8:	881a      	ldrh	r2, [r3, #0]
    7eca:	2a06      	cmp	r2, #6
    7ecc:	dd0e      	ble.n	7eec <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x34>
    7ece:	88db      	ldrh	r3, [r3, #6]
    auto p = data_ + field_offset;
    7ed0:	18ca      	adds	r2, r1, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ed2:	b173      	cbz	r3, 7ef2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x3a>
    7ed4:	58cb      	ldr	r3, [r1, r3]
    7ed6:	18d3      	adds	r3, r2, r3
    7ed8:	9303      	str	r3, [sp, #12]
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
    7eda:	9b02      	ldr	r3, [sp, #8]
    7edc:	685b      	ldr	r3, [r3, #4]
      : memory_allocator_(memory_allocator) {}
    7ede:	4aa0      	ldr	r2, [pc, #640]	; (8160 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2a8>)
    7ee0:	9208      	str	r2, [sp, #32]
    7ee2:	9309      	str	r3, [sp, #36]	; 0x24
    7ee4:	9d14      	ldr	r5, [sp, #80]	; 0x50
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
    7ee6:	f04f 0a00 	mov.w	sl, #0
    7eea:	e09f      	b.n	802c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x174>
    7eec:	2300      	movs	r3, #0
    7eee:	9303      	str	r3, [sp, #12]
    7ef0:	e7f3      	b.n	7eda <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22>
    7ef2:	2300      	movs	r3, #0
    7ef4:	9303      	str	r3, [sp, #12]
    7ef6:	e7f0      	b.n	7eda <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22>
    7ef8:	2300      	movs	r3, #0
    7efa:	e0a8      	b.n	804e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x196>
    7efc:	2300      	movs	r3, #0
    7efe:	e0a6      	b.n	804e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x196>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7f00:	2300      	movs	r3, #0
    7f02:	9301      	str	r3, [sp, #4]
    7f04:	e0ba      	b.n	807c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1c4>
    7f06:	2300      	movs	r3, #0
    7f08:	9301      	str	r3, [sp, #4]
    7f0a:	e0b7      	b.n	807c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1c4>
      TF_LITE_REPORT_ERROR(error_reporter_,
    7f0c:	4995      	ldr	r1, [pc, #596]	; (8164 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ac>)
    7f0e:	9b02      	ldr	r3, [sp, #8]
    7f10:	6898      	ldr	r0, [r3, #8]
    7f12:	4b95      	ldr	r3, [pc, #596]	; (8168 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b0>)
    7f14:	4798      	blx	r3
      return kTfLiteError;
    7f16:	2301      	movs	r3, #1
    7f18:	461c      	mov	r4, r3
    7f1a:	e115      	b.n	8148 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x290>
    7f1c:	464e      	mov	r6, r9
    7f1e:	4604      	mov	r4, r0
      TF_LITE_REPORT_ERROR(error_reporter_,
    7f20:	9b02      	ldr	r3, [sp, #8]
    7f22:	6898      	ldr	r0, [r3, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    7f24:	f8d9 3000 	ldr.w	r3, [r9]
    7f28:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7f2a:	881a      	ldrh	r2, [r3, #0]
    7f2c:	2a04      	cmp	r2, #4
    7f2e:	dd07      	ble.n	7f40 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x88>
    7f30:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7f32:	b16b      	cbz	r3, 7f50 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x98>
    7f34:	f819 3003 	ldrb.w	r3, [r9, r3]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    7f38:	2b7e      	cmp	r3, #126	; 0x7e
    7f3a:	dd02      	ble.n	7f42 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x8a>
    7f3c:	4a8b      	ldr	r2, [pc, #556]	; (816c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>)
    7f3e:	e003      	b.n	7f48 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x90>
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
    7f40:	2300      	movs	r3, #0
  return EnumNamesBuiltinOperator()[index];
    7f42:	4a8b      	ldr	r2, [pc, #556]	; (8170 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b8>)
    7f44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7f48:	498a      	ldr	r1, [pc, #552]	; (8174 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2bc>)
    7f4a:	4b87      	ldr	r3, [pc, #540]	; (8168 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b0>)
    7f4c:	4798      	blx	r3
      return status;
    7f4e:	e0fb      	b.n	8148 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x290>
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
    7f50:	2300      	movs	r3, #0
    7f52:	e7f6      	b.n	7f42 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x8a>
    7f54:	f8dd 9004 	ldr.w	r9, [sp, #4]
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
    7f58:	464a      	mov	r2, r9
    7f5a:	4987      	ldr	r1, [pc, #540]	; (8178 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2c0>)
    7f5c:	9b02      	ldr	r3, [sp, #8]
    7f5e:	6898      	ldr	r0, [r3, #8]
    7f60:	4b81      	ldr	r3, [pc, #516]	; (8168 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b0>)
    7f62:	4798      	blx	r3
      return kTfLiteError;
    7f64:	2301      	movs	r3, #1
    7f66:	461c      	mov	r4, r3
    7f68:	e0ee      	b.n	8148 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x290>
    return data_ - ReadScalar<soffset_t>(data_);
    7f6a:	f858 3007 	ldr.w	r3, [r8, r7]
    7f6e:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7f70:	881a      	ldrh	r2, [r3, #0]
    7f72:	2a0e      	cmp	r2, #14
    7f74:	f340 80d6 	ble.w	8124 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x26c>
    7f78:	89db      	ldrh	r3, [r3, #14]
    auto p = data_ + field_offset;
    7f7a:	18e2      	adds	r2, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7f7c:	2b00      	cmp	r3, #0
    7f7e:	f000 80d5 	beq.w	812c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x274>
    7f82:	58e3      	ldr	r3, [r4, r3]
      if (op->custom_options() != nullptr) {
    7f84:	18d6      	adds	r6, r2, r3
    7f86:	f000 80d5 	beq.w	8134 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x27c>
  uoffset_t size() const { return EndianScalar(length_); }
    7f8a:	f852 9003 	ldr.w	r9, [r2, r3]
            reinterpret_cast<const char*>(op->custom_options()->data());
    7f8e:	3604      	adds	r6, #4
    7f90:	e017      	b.n	7fc2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x10a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7f92:	58e3      	ldr	r3, [r4, r3]
      if (op->custom_options() != nullptr) {
    7f94:	42da      	cmn	r2, r3
    7f96:	f040 80a3 	bne.w	80e0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x228>
          op_resolver.GetOpDataParser(op_type);
    7f9a:	9805      	ldr	r0, [sp, #20]
    7f9c:	6803      	ldr	r3, [r0, #0]
    7f9e:	699b      	ldr	r3, [r3, #24]
    7fa0:	4798      	blx	r3
      if (parser == nullptr) {
    7fa2:	4681      	mov	r9, r0
    7fa4:	2800      	cmp	r0, #0
    7fa6:	f000 80ac 	beq.w	8102 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x24a>
      TF_LITE_ENSURE_STATUS(parser(op, error_reporter_, &builtin_data_allocator,
    7faa:	ab07      	add	r3, sp, #28
    7fac:	aa08      	add	r2, sp, #32
    7fae:	9902      	ldr	r1, [sp, #8]
    7fb0:	6889      	ldr	r1, [r1, #8]
    7fb2:	4620      	mov	r0, r4
    7fb4:	47c8      	blx	r9
    7fb6:	2800      	cmp	r0, #0
    7fb8:	f040 80c2 	bne.w	8140 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x288>
    size_t custom_data_size = 0;
    7fbc:	f04f 0900 	mov.w	r9, #0
    const char* custom_data = nullptr;
    7fc0:	464e      	mov	r6, r9
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
    7fc2:	9b02      	ldr	r3, [sp, #8]
    7fc4:	6898      	ldr	r0, [r3, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    7fc6:	f858 3007 	ldr.w	r3, [r8, r7]
    7fca:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7fcc:	881a      	ldrh	r2, [r3, #0]
    7fce:	2a06      	cmp	r2, #6
    7fd0:	f340 80c1 	ble.w	8156 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x29e>
    7fd4:	88d9      	ldrh	r1, [r3, #6]
    auto p = data_ + field_offset;
    7fd6:	1867      	adds	r7, r4, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7fd8:	2900      	cmp	r1, #0
    7fda:	f000 80b9 	beq.w	8150 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x298>
    7fde:	5861      	ldr	r1, [r4, r1]
    7fe0:	440f      	add	r7, r1
  TFLITE_DCHECK(error_reporter != nullptr);
    7fe2:	2800      	cmp	r0, #0
    7fe4:	f000 80b9 	beq.w	815a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2a2>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    7fe8:	2f00      	cmp	r7, #0
    7fea:	f000 80b2 	beq.w	8152 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x29a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7fee:	2a08      	cmp	r2, #8
    7ff0:	f340 80a4 	ble.w	813c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x284>
    7ff4:	891b      	ldrh	r3, [r3, #8]
    auto p = data_ + field_offset;
    7ff6:	18e2      	adds	r2, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ff8:	2b00      	cmp	r3, #0
    7ffa:	f000 809f 	beq.w	813c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x284>
    7ffe:	58e4      	ldr	r4, [r4, r3]
    8000:	3528      	adds	r5, #40	; 0x28
    8002:	1914      	adds	r4, r2, r4
    8004:	f000 809a 	beq.w	813c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x284>
    *node = {};
    8008:	2224      	movs	r2, #36	; 0x24
    800a:	2100      	movs	r1, #0
    800c:	9804      	ldr	r0, [sp, #16]
    800e:	4b5b      	ldr	r3, [pc, #364]	; (817c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2c4>)
    8010:	4798      	blx	r3
    node->inputs = inputs_array;
    8012:	f845 7c28 	str.w	r7, [r5, #-40]
    node->outputs = outputs_array;
    8016:	f845 4c24 	str.w	r4, [r5, #-36]
    node->builtin_data = reinterpret_cast<void*>(builtin_data);
    801a:	9b07      	ldr	r3, [sp, #28]
    801c:	f845 3c14 	str.w	r3, [r5, #-20]
    node->custom_initial_data = custom_data;
    8020:	f845 6c10 	str.w	r6, [r5, #-16]
    node->custom_initial_data_size = custom_data_size;
    8024:	f845 9c0c 	str.w	r9, [r5, #-12]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
    8028:	f10a 0a01 	add.w	sl, sl, #1
    return data_ - ReadScalar<soffset_t>(data_);
    802c:	f8db 3000 	ldr.w	r3, [fp]
    8030:	ebab 0303 	sub.w	r3, fp, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8034:	881a      	ldrh	r2, [r3, #0]
    8036:	2a0a      	cmp	r2, #10
    8038:	f77f af5e 	ble.w	7ef8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x40>
    803c:	895a      	ldrh	r2, [r3, #10]
    auto p = data_ + field_offset;
    803e:	eb0b 0302 	add.w	r3, fp, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8042:	2a00      	cmp	r2, #0
    8044:	f43f af5a 	beq.w	7efc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x44>
    8048:	f85b 2002 	ldr.w	r2, [fp, r2]
    804c:	4413      	add	r3, r2
    804e:	681a      	ldr	r2, [r3, #0]
    8050:	4592      	cmp	sl, r2
    8052:	d277      	bcs.n	8144 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x28c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8054:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    8056:	eb03 088a 	add.w	r8, r3, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    805a:	f853 702a 	ldr.w	r7, [r3, sl, lsl #2]
    805e:	eb08 0407 	add.w	r4, r8, r7
    return data_ - ReadScalar<soffset_t>(data_);
    8062:	f858 3007 	ldr.w	r3, [r8, r7]
    8066:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8068:	881a      	ldrh	r2, [r3, #0]
    806a:	2a04      	cmp	r2, #4
    806c:	f77f af48 	ble.w	7f00 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x48>
    8070:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8072:	2b00      	cmp	r3, #0
    8074:	f43f af47 	beq.w	7f06 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x4e>
    8078:	58e3      	ldr	r3, [r4, r3]
    807a:	9301      	str	r3, [sp, #4]
    if (index >= opcodes->size()) {
    807c:	9b03      	ldr	r3, [sp, #12]
    807e:	681b      	ldr	r3, [r3, #0]
    8080:	9a01      	ldr	r2, [sp, #4]
    8082:	4293      	cmp	r3, r2
    8084:	f67f af42 	bls.w	7f0c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x54>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8088:	9b03      	ldr	r3, [sp, #12]
    808a:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    808c:	9a01      	ldr	r2, [sp, #4]
    808e:	eb03 0982 	add.w	r9, r3, r2, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8096:	4499      	add	r9, r3
                                  &(node_and_registrations[i].registration));
    8098:	9504      	str	r5, [sp, #16]
    809a:	f105 0324 	add.w	r3, r5, #36	; 0x24
    809e:	9a02      	ldr	r2, [sp, #8]
    80a0:	6892      	ldr	r2, [r2, #8]
    80a2:	9905      	ldr	r1, [sp, #20]
    80a4:	4648      	mov	r0, r9
    80a6:	4e36      	ldr	r6, [pc, #216]	; (8180 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2c8>)
    80a8:	47b0      	blx	r6
    if (status != kTfLiteOk) {
    80aa:	2800      	cmp	r0, #0
    80ac:	f47f af36 	bne.w	7f1c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x64>
    const auto* registration = node_and_registrations[i].registration;
    80b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    if (registration == nullptr) {
    80b2:	2b00      	cmp	r3, #0
    80b4:	f43f af4e 	beq.w	7f54 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x9c>
        static_cast<BuiltinOperator>(registration->builtin_code);
    80b8:	695e      	ldr	r6, [r3, #20]
    80ba:	b2f1      	uxtb	r1, r6
    unsigned char* builtin_data = nullptr;
    80bc:	2300      	movs	r3, #0
    80be:	9307      	str	r3, [sp, #28]
    if (op_type == BuiltinOperator_CUSTOM) {
    80c0:	2920      	cmp	r1, #32
    80c2:	f43f af52 	beq.w	7f6a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xb2>
    return data_ - ReadScalar<soffset_t>(data_);
    80c6:	f858 3007 	ldr.w	r3, [r8, r7]
    80ca:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    80cc:	881a      	ldrh	r2, [r3, #0]
    80ce:	2a0e      	cmp	r2, #14
    80d0:	f77f af63 	ble.w	7f9a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xe2>
    80d4:	89db      	ldrh	r3, [r3, #14]
    auto p = data_ + field_offset;
    80d6:	18e2      	adds	r2, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80d8:	2b00      	cmp	r3, #0
    80da:	f47f af5a 	bne.w	7f92 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xda>
    80de:	e75c      	b.n	7f9a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xe2>
        TF_LITE_REPORT_ERROR(
    80e0:	9b02      	ldr	r3, [sp, #8]
    80e2:	6898      	ldr	r0, [r3, #8]
    80e4:	fa5f f986 	uxtb.w	r9, r6
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    80e8:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
  return EnumNamesBuiltinOperator()[index];
    80ec:	bfda      	itte	le
    80ee:	4b20      	ldrle	r3, [pc, #128]	; (8170 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b8>)
    80f0:	f853 2029 	ldrle.w	r2, [r3, r9, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    80f4:	4a1d      	ldrgt	r2, [pc, #116]	; (816c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>)
    80f6:	4923      	ldr	r1, [pc, #140]	; (8184 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2cc>)
    80f8:	4b1b      	ldr	r3, [pc, #108]	; (8168 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b0>)
    80fa:	4798      	blx	r3
        return kTfLiteError;
    80fc:	2301      	movs	r3, #1
    80fe:	461c      	mov	r4, r3
    8100:	e022      	b.n	8148 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x290>
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
    8102:	9b02      	ldr	r3, [sp, #8]
    8104:	6898      	ldr	r0, [r3, #8]
    8106:	fa5f f986 	uxtb.w	r9, r6
    810a:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
  return EnumNamesBuiltinOperator()[index];
    810e:	bfda      	itte	le
    8110:	4b17      	ldrle	r3, [pc, #92]	; (8170 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b8>)
    8112:	f853 2029 	ldrle.w	r2, [r3, r9, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    8116:	4a15      	ldrgt	r2, [pc, #84]	; (816c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>)
    8118:	491b      	ldr	r1, [pc, #108]	; (8188 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d0>)
    811a:	4b13      	ldr	r3, [pc, #76]	; (8168 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b0>)
    811c:	4798      	blx	r3
        return kTfLiteError;
    811e:	2301      	movs	r3, #1
    8120:	461c      	mov	r4, r3
    8122:	e011      	b.n	8148 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x290>
    size_t custom_data_size = 0;
    8124:	f04f 0900 	mov.w	r9, #0
    const char* custom_data = nullptr;
    8128:	464e      	mov	r6, r9
    812a:	e74a      	b.n	7fc2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x10a>
    size_t custom_data_size = 0;
    812c:	f04f 0900 	mov.w	r9, #0
    const char* custom_data = nullptr;
    8130:	464e      	mov	r6, r9
    8132:	e746      	b.n	7fc2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x10a>
    size_t custom_data_size = 0;
    8134:	f04f 0900 	mov.w	r9, #0
    const char* custom_data = nullptr;
    8138:	464e      	mov	r6, r9
    813a:	e742      	b.n	7fc2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x10a>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    813c:	4b13      	ldr	r3, [pc, #76]	; (818c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>)
    813e:	4798      	blx	r3
      TF_LITE_ENSURE_STATUS(parser(op, error_reporter_, &builtin_data_allocator,
    8140:	4604      	mov	r4, r0
    8142:	e001      	b.n	8148 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x290>
  return kTfLiteOk;
    8144:	2300      	movs	r3, #0
    8146:	461c      	mov	r4, r3
}
    8148:	4620      	mov	r0, r4
    814a:	b00b      	add	sp, #44	; 0x2c
    814c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
    8150:	b118      	cbz	r0, 815a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2a2>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    8152:	4b0e      	ldr	r3, [pc, #56]	; (818c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>)
    8154:	4798      	blx	r3
  TFLITE_DCHECK(error_reporter != nullptr);
    8156:	2800      	cmp	r0, #0
    8158:	d1fb      	bne.n	8152 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x29a>
    815a:	4b0c      	ldr	r3, [pc, #48]	; (818c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>)
    815c:	4798      	blx	r3
    815e:	bf00      	nop
    8160:	0003c2bc 	.word	0x0003c2bc
    8164:	0003c750 	.word	0x0003c750
    8168:	000012f9 	.word	0x000012f9
    816c:	0003b064 	.word	0x0003b064
    8170:	0003addc 	.word	0x0003addc
    8174:	0003c77c 	.word	0x0003c77c
    8178:	0003c7ac 	.word	0x0003c7ac
    817c:	0001831d 	.word	0x0001831d
    8180:	000019a5 	.word	0x000019a5
    8184:	0003c7d0 	.word	0x0003c7d0
    8188:	0003c818 	.word	0x0003c818
    818c:	0001739d 	.word	0x0001739d

00008190 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
    ErrorReporter* error_reporter, TfLiteTensor* result) {
    8190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8194:	b085      	sub	sp, #20
    8196:	4607      	mov	r7, r0
    8198:	460e      	mov	r6, r1
    819a:	4690      	mov	r8, r2
    819c:	461d      	mov	r5, r3
    819e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  *result = {};
    81a0:	2240      	movs	r2, #64	; 0x40
    81a2:	2100      	movs	r1, #0
    81a4:	4620      	mov	r0, r4
    81a6:	4ba6      	ldr	r3, [pc, #664]	; (8440 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b0>)
    81a8:	4798      	blx	r3
    return data_ - ReadScalar<soffset_t>(data_);
    81aa:	6833      	ldr	r3, [r6, #0]
    81ac:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    81ae:	881a      	ldrh	r2, [r3, #0]
    81b0:	2a06      	cmp	r2, #6
    81b2:	dd0b      	ble.n	81cc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3c>
    81b4:	88db      	ldrh	r3, [r3, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    81b6:	b15b      	cbz	r3, 81d0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x40>
    81b8:	56f0      	ldrsb	r0, [r6, r3]
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    81ba:	462a      	mov	r2, r5
    81bc:	4621      	mov	r1, r4
    81be:	b2c0      	uxtb	r0, r0
    81c0:	4ba0      	ldr	r3, [pc, #640]	; (8444 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b4>)
    81c2:	4798      	blx	r3
    81c4:	b130      	cbz	r0, 81d4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x44>
}
    81c6:	b005      	add	sp, #20
    81c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    81cc:	2000      	movs	r0, #0
    81ce:	e7f4      	b.n	81ba <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a>
    81d0:	2000      	movs	r0, #0
    81d2:	e7f2      	b.n	81ba <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a>
    return data_ - ReadScalar<soffset_t>(data_);
    81d4:	6833      	ldr	r3, [r6, #0]
    81d6:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    81d8:	881a      	ldrh	r2, [r3, #0]
    81da:	2a0e      	cmp	r2, #14
    81dc:	f340 80f2 	ble.w	83c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x234>
    81e0:	89db      	ldrh	r3, [r3, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    81e2:	2b00      	cmp	r3, #0
    81e4:	f000 80f0 	beq.w	83c8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x238>
    81e8:	5cf3      	ldrb	r3, [r6, r3]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
    81ea:	3300      	adds	r3, #0
    81ec:	bf18      	it	ne
    81ee:	2301      	movne	r3, #1
    81f0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    return data_ - ReadScalar<soffset_t>(data_);
    81f4:	6833      	ldr	r3, [r6, #0]
    81f6:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    81f8:	881a      	ldrh	r2, [r3, #0]
    81fa:	2a08      	cmp	r2, #8
    81fc:	f340 80e6 	ble.w	83cc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x23c>
    8200:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8202:	2b00      	cmp	r3, #0
    8204:	f000 80e4 	beq.w	83d0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x240>
    8208:	58f3      	ldr	r3, [r6, r3]
    FLATBUFFERS_ASSERT(i < size());
    820a:	f8d8 2000 	ldr.w	r2, [r8]
    820e:	429a      	cmp	r2, r3
    8210:	f240 80e0 	bls.w	83d4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x244>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8214:	f108 0804 	add.w	r8, r8, #4
    p += i * sizeof(uoffset_t);
    8218:	eb08 0283 	add.w	r2, r8, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    821c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
    8220:	18d1      	adds	r1, r2, r3
    8222:	d010      	beq.n	8246 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb6>
    return data_ - ReadScalar<soffset_t>(data_);
    8224:	58d3      	ldr	r3, [r2, r3]
    8226:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8228:	881a      	ldrh	r2, [r3, #0]
    822a:	2a04      	cmp	r2, #4
    822c:	dd0b      	ble.n	8246 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb6>
    822e:	889b      	ldrh	r3, [r3, #4]
    auto p = data_ + field_offset;
    8230:	18ca      	adds	r2, r1, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8232:	b143      	cbz	r3, 8246 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb6>
    8234:	58cb      	ldr	r3, [r1, r3]
    if (auto* array = buffer->data()) {
    8236:	18d1      	adds	r1, r2, r3
    8238:	d005      	beq.n	8246 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb6>
      if (array->size()) {
    823a:	58d3      	ldr	r3, [r2, r3]
    823c:	b11b      	cbz	r3, 8246 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb6>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    823e:	3104      	adds	r1, #4
        result->data.data =
    8240:	6061      	str	r1, [r4, #4]
        result->allocation_type = kTfLiteMmapRo;
    8242:	2301      	movs	r3, #1
    8244:	7523      	strb	r3, [r4, #20]
  if (result->data.data == nullptr) {
    8246:	6863      	ldr	r3, [r4, #4]
    8248:	2b00      	cmp	r3, #0
    824a:	f000 80ca 	beq.w	83e2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x252>
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
    824e:	462b      	mov	r3, r5
    8250:	aa03      	add	r2, sp, #12
    8252:	f104 0118 	add.w	r1, r4, #24
    8256:	4630      	mov	r0, r6
    8258:	f8df 821c 	ldr.w	r8, [pc, #540]	; 8478 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2e8>
    825c:	47c0      	blx	r8
    825e:	2800      	cmp	r0, #0
    8260:	d1b1      	bne.n	81c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    return data_ - ReadScalar<soffset_t>(data_);
    8262:	6833      	ldr	r3, [r6, #0]
    8264:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8266:	881a      	ldrh	r2, [r3, #0]
    8268:	2a04      	cmp	r2, #4
    826a:	f340 80bd 	ble.w	83e8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x258>
    826e:	889a      	ldrh	r2, [r3, #4]
    auto p = data_ + field_offset;
    8270:	18b3      	adds	r3, r6, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8272:	2a00      	cmp	r2, #0
    8274:	f000 80b8 	beq.w	83e8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x258>
    8278:	58b2      	ldr	r2, [r6, r2]
  if (flatbuffer_tensor.shape() == nullptr) {
    827a:	189b      	adds	r3, r3, r2
    827c:	f000 80b4 	beq.w	83e8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x258>
  TFLITE_DCHECK(error_reporter != nullptr);
    8280:	2d00      	cmp	r5, #0
    8282:	f000 80b4 	beq.w	83ee <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x25e>
    *result = const_cast<kTfLiteArrayType*>(
    8286:	60a3      	str	r3, [r4, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    8288:	6833      	ldr	r3, [r6, #0]
    828a:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    828c:	881a      	ldrh	r2, [r3, #0]
    828e:	2a0c      	cmp	r2, #12
    8290:	f340 812e 	ble.w	84f0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x360>
    8294:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
    8296:	eb06 0a03 	add.w	sl, r6, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    829a:	2b00      	cmp	r3, #0
    829c:	f000 812a 	beq.w	84f4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x364>
    82a0:	f856 9003 	ldr.w	r9, [r6, r3]
      src_quantization->zero_point() &&
    82a4:	eb1a 0609 	adds.w	r6, sl, r9
    82a8:	f000 8126 	beq.w	84f8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x368>
    return data_ - ReadScalar<soffset_t>(data_);
    82ac:	f85a 3009 	ldr.w	r3, [sl, r9]
    82b0:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    82b2:	8819      	ldrh	r1, [r3, #0]
    82b4:	2908      	cmp	r1, #8
    82b6:	f340 8121 	ble.w	84fc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36c>
    82ba:	891a      	ldrh	r2, [r3, #8]
    auto p = data_ + field_offset;
    82bc:	18b0      	adds	r0, r6, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    82be:	2a00      	cmp	r2, #0
    82c0:	f000 811e 	beq.w	8500 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x370>
    82c4:	58b2      	ldr	r2, [r6, r2]
  if (src_quantization && src_quantization->scale() &&
    82c6:	42d0      	cmn	r0, r2
    82c8:	f000 811c 	beq.w	8504 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x374>
    82cc:	5882      	ldr	r2, [r0, r2]
    82ce:	2a00      	cmp	r2, #0
    82d0:	f000 811a 	beq.w	8508 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x378>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    82d4:	290a      	cmp	r1, #10
    82d6:	f340 8119 	ble.w	850c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x37c>
    82da:	895b      	ldrh	r3, [r3, #10]
    auto p = data_ + field_offset;
    82dc:	18f2      	adds	r2, r6, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    82de:	2b00      	cmp	r3, #0
    82e0:	f000 8116 	beq.w	8510 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x380>
    82e4:	58f3      	ldr	r3, [r6, r3]
      (src_quantization->scale()->size() > 0) &&
    82e6:	42da      	cmn	r2, r3
    82e8:	f000 8114 	beq.w	8514 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x384>
  if (src_quantization && src_quantization->scale() &&
    82ec:	58d3      	ldr	r3, [r2, r3]
    82ee:	2b00      	cmp	r3, #0
    82f0:	f000 8112 	beq.w	8518 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x388>
    return data_ - ReadScalar<soffset_t>(data_);
    82f4:	46b0      	mov	r8, r6
    82f6:	f85a 3009 	ldr.w	r3, [sl, r9]
    82fa:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    82fc:	2908      	cmp	r1, #8
    82fe:	dd78      	ble.n	83f2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x262>
    8300:	891a      	ldrh	r2, [r3, #8]
    auto p = data_ + field_offset;
    8302:	4603      	mov	r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8304:	2a00      	cmp	r2, #0
    8306:	d076      	beq.n	83f6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x266>
    8308:	58b2      	ldr	r2, [r6, r2]
    830a:	4413      	add	r3, r2
    FLATBUFFERS_ASSERT(i < size());
    830c:	681a      	ldr	r2, [r3, #0]
    830e:	2a00      	cmp	r2, #0
    8310:	d073      	beq.n	83fa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x26a>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8312:	685b      	ldr	r3, [r3, #4]
    result->params.scale = src_quantization->scale()->Get(0);
    8314:	60e3      	str	r3, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    8316:	f85a 3009 	ldr.w	r3, [sl, r9]
    831a:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    831c:	881a      	ldrh	r2, [r3, #0]
    831e:	2a0a      	cmp	r2, #10
    8320:	dd72      	ble.n	8408 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x278>
    8322:	895a      	ldrh	r2, [r3, #10]
    auto p = data_ + field_offset;
    8324:	18b3      	adds	r3, r6, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8326:	2a00      	cmp	r2, #0
    8328:	d070      	beq.n	840c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x27c>
    832a:	58b2      	ldr	r2, [r6, r2]
    832c:	4413      	add	r3, r2
    FLATBUFFERS_ASSERT(i < size());
    832e:	681a      	ldr	r2, [r3, #0]
    8330:	2a00      	cmp	r2, #0
    8332:	d06d      	beq.n	8410 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x280>
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
    8334:	685b      	ldr	r3, [r3, #4]
    8336:	6123      	str	r3, [r4, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    8338:	f85a 3009 	ldr.w	r3, [sl, r9]
    833c:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    833e:	881a      	ldrh	r2, [r3, #0]
    8340:	2a08      	cmp	r2, #8
    8342:	dd6c      	ble.n	841e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x28e>
    8344:	891a      	ldrh	r2, [r3, #8]
    auto p = data_ + field_offset;
    8346:	18b3      	adds	r3, r6, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8348:	2a00      	cmp	r2, #0
    834a:	d06a      	beq.n	8422 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x292>
    834c:	58b2      	ldr	r2, [r6, r2]
    834e:	4413      	add	r3, r2
    int channels = src_quantization->scale()->size();
    8350:	f8d3 b000 	ldr.w	fp, [r3]
                                        alignof(TfLiteAffineQuantization)));
    8354:	683b      	ldr	r3, [r7, #0]
    8356:	68db      	ldr	r3, [r3, #12]
    8358:	2204      	movs	r2, #4
    835a:	210c      	movs	r1, #12
    835c:	4638      	mov	r0, r7
    835e:	4798      	blx	r3
    if (quantization == nullptr) {
    8360:	9000      	str	r0, [sp, #0]
    8362:	2800      	cmp	r0, #0
    8364:	d05f      	beq.n	8426 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x296>
            TfLiteIntArrayGetSizeInBytes(channels), alignof(TfLiteIntArray)));
    8366:	683b      	ldr	r3, [r7, #0]
    8368:	68db      	ldr	r3, [r3, #12]
    836a:	9301      	str	r3, [sp, #4]
    836c:	4658      	mov	r0, fp
    836e:	4b36      	ldr	r3, [pc, #216]	; (8448 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b8>)
    8370:	4798      	blx	r3
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
    8372:	2204      	movs	r2, #4
    8374:	4601      	mov	r1, r0
    8376:	4638      	mov	r0, r7
    8378:	9b01      	ldr	r3, [sp, #4]
    837a:	4798      	blx	r3
    quantization->zero_point =
    837c:	9b00      	ldr	r3, [sp, #0]
    837e:	6058      	str	r0, [r3, #4]
    if (quantization->zero_point == nullptr) {
    8380:	2800      	cmp	r0, #0
    8382:	d056      	beq.n	8432 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
    return data_ - ReadScalar<soffset_t>(data_);
    8384:	f85a 3009 	ldr.w	r3, [sl, r9]
    8388:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    838a:	881a      	ldrh	r2, [r3, #0]
    838c:	2a08      	cmp	r2, #8
    838e:	f340 80c8 	ble.w	8522 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x392>
    8392:	891a      	ldrh	r2, [r3, #8]
    auto p = data_ + field_offset;
    8394:	18b3      	adds	r3, r6, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8396:	2a00      	cmp	r2, #0
    8398:	f000 80c0 	beq.w	851c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x38c>
    839c:	58b2      	ldr	r2, [r6, r2]
    839e:	4413      	add	r3, r2
  TFLITE_DCHECK(error_reporter != nullptr);
    83a0:	2d00      	cmp	r5, #0
    83a2:	f000 80c0 	beq.w	8526 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x396>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    83a6:	2b00      	cmp	r3, #0
    83a8:	f000 80b9 	beq.w	851e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x38e>
    *result = const_cast<kTfLiteArrayType*>(
    83ac:	9900      	ldr	r1, [sp, #0]
    83ae:	600b      	str	r3, [r1, #0]
    quantization->zero_point->size = channels;
    83b0:	f8c0 b000 	str.w	fp, [r0]
    int* zero_point_data = quantization->zero_point->data;
    83b4:	6848      	ldr	r0, [r1, #4]
    for (int i = 0; i < channels; i++) {
    83b6:	f1bb 0f00 	cmp.w	fp, #0
    83ba:	f340 8084 	ble.w	84c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x336>
    83be:	2100      	movs	r1, #0
    83c0:	460d      	mov	r5, r1
    83c2:	e069      	b.n	8498 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x308>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    83c4:	2300      	movs	r3, #0
    83c6:	e710      	b.n	81ea <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5a>
    83c8:	2300      	movs	r3, #0
    83ca:	e70e      	b.n	81ea <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5a>
    83cc:	2300      	movs	r3, #0
    83ce:	e71c      	b.n	820a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7a>
    83d0:	2300      	movs	r3, #0
    83d2:	e71a      	b.n	820a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7a>
    FLATBUFFERS_ASSERT(i < size());
    83d4:	4b1d      	ldr	r3, [pc, #116]	; (844c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2bc>)
    83d6:	4a1e      	ldr	r2, [pc, #120]	; (8450 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c0>)
    83d8:	f240 1101 	movw	r1, #257	; 0x101
    83dc:	481d      	ldr	r0, [pc, #116]	; (8454 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c4>)
    83de:	4c1e      	ldr	r4, [pc, #120]	; (8458 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c8>)
    83e0:	47a0      	blx	r4
    result->allocation_type = kTfLiteArenaRw;
    83e2:	2302      	movs	r3, #2
    83e4:	7523      	strb	r3, [r4, #20]
    83e6:	e732      	b.n	824e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xbe>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    83e8:	4b1c      	ldr	r3, [pc, #112]	; (845c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2cc>)
    83ea:	60a3      	str	r3, [r4, #8]
    83ec:	e74c      	b.n	8288 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
  TFLITE_DCHECK(error_reporter != nullptr);
    83ee:	4b1c      	ldr	r3, [pc, #112]	; (8460 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2d0>)
    83f0:	4798      	blx	r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    83f2:	2300      	movs	r3, #0
    83f4:	e78a      	b.n	830c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x17c>
    83f6:	2300      	movs	r3, #0
    83f8:	e788      	b.n	830c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x17c>
    FLATBUFFERS_ASSERT(i < size());
    83fa:	4b14      	ldr	r3, [pc, #80]	; (844c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2bc>)
    83fc:	4a19      	ldr	r2, [pc, #100]	; (8464 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2d4>)
    83fe:	f240 1101 	movw	r1, #257	; 0x101
    8402:	4814      	ldr	r0, [pc, #80]	; (8454 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c4>)
    8404:	4c14      	ldr	r4, [pc, #80]	; (8458 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c8>)
    8406:	47a0      	blx	r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8408:	2300      	movs	r3, #0
    840a:	e790      	b.n	832e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x19e>
    840c:	2300      	movs	r3, #0
    840e:	e78e      	b.n	832e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x19e>
    FLATBUFFERS_ASSERT(i < size());
    8410:	4b0e      	ldr	r3, [pc, #56]	; (844c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2bc>)
    8412:	4a15      	ldr	r2, [pc, #84]	; (8468 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2d8>)
    8414:	f240 1101 	movw	r1, #257	; 0x101
    8418:	480e      	ldr	r0, [pc, #56]	; (8454 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c4>)
    841a:	4c0f      	ldr	r4, [pc, #60]	; (8458 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c8>)
    841c:	47a0      	blx	r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    841e:	2300      	movs	r3, #0
    8420:	e796      	b.n	8350 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1c0>
    8422:	2300      	movs	r3, #0
    8424:	e794      	b.n	8350 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1c0>
      TF_LITE_REPORT_ERROR(error_reporter,
    8426:	4911      	ldr	r1, [pc, #68]	; (846c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2dc>)
    8428:	4628      	mov	r0, r5
    842a:	4b11      	ldr	r3, [pc, #68]	; (8470 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2e0>)
    842c:	4798      	blx	r3
      return kTfLiteError;
    842e:	2001      	movs	r0, #1
    8430:	e6c9      	b.n	81c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
      TF_LITE_REPORT_ERROR(error_reporter,
    8432:	4910      	ldr	r1, [pc, #64]	; (8474 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2e4>)
    8434:	4628      	mov	r0, r5
    8436:	4b0e      	ldr	r3, [pc, #56]	; (8470 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2e0>)
    8438:	4798      	blx	r3
      return kTfLiteError;
    843a:	2001      	movs	r0, #1
    843c:	e6c3      	b.n	81c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    843e:	bf00      	nop
    8440:	0001831d 	.word	0x0001831d
    8444:	00001405 	.word	0x00001405
    8448:	00001aad 	.word	0x00001aad
    844c:	0003ac5c 	.word	0x0003ac5c
    8450:	0003c2cc 	.word	0x0003c2cc
    8454:	0003ac68 	.word	0x0003ac68
    8458:	000173ad 	.word	0x000173ad
    845c:	0003c3c4 	.word	0x0003c3c4
    8460:	0001739d 	.word	0x0001739d
    8464:	0003c3c8 	.word	0x0003c3c8
    8468:	0003c490 	.word	0x0003c490
    846c:	0003c838 	.word	0x0003c838
    8470:	000012f9 	.word	0x000012f9
    8474:	0003c868 	.word	0x0003c868
    8478:	00007865 	.word	0x00007865
    847c:	f858 2002 	ldr.w	r2, [r8, r2]
    8480:	4413      	add	r3, r2
    FLATBUFFERS_ASSERT(i < size());
    8482:	681a      	ldr	r2, [r3, #0]
    8484:	4297      	cmp	r7, r2
    8486:	d217      	bcs.n	84b8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x328>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8488:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
    848c:	685b      	ldr	r3, [r3, #4]
    848e:	f840 3f04 	str.w	r3, [r0, #4]!
    for (int i = 0; i < channels; i++) {
    8492:	3101      	adds	r1, #1
    8494:	458b      	cmp	fp, r1
    8496:	d016      	beq.n	84c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x336>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
    8498:	460f      	mov	r7, r1
    return data_ - ReadScalar<soffset_t>(data_);
    849a:	6832      	ldr	r2, [r6, #0]
    849c:	eba8 0202 	sub.w	r2, r8, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    84a0:	8813      	ldrh	r3, [r2, #0]
    84a2:	2b0a      	cmp	r3, #10
    84a4:	dd06      	ble.n	84b4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x324>
    84a6:	8952      	ldrh	r2, [r2, #10]
    auto p = data_ + field_offset;
    84a8:	eb08 0302 	add.w	r3, r8, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    84ac:	2a00      	cmp	r2, #0
    84ae:	d1e5      	bne.n	847c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2ec>
    84b0:	462b      	mov	r3, r5
    84b2:	e7e6      	b.n	8482 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2f2>
    84b4:	462b      	mov	r3, r5
    84b6:	e7e4      	b.n	8482 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2f2>
    FLATBUFFERS_ASSERT(i < size());
    84b8:	4b1c      	ldr	r3, [pc, #112]	; (852c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x39c>)
    84ba:	4a1d      	ldr	r2, [pc, #116]	; (8530 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3a0>)
    84bc:	f240 1101 	movw	r1, #257	; 0x101
    84c0:	481c      	ldr	r0, [pc, #112]	; (8534 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3a4>)
    84c2:	4c1d      	ldr	r4, [pc, #116]	; (8538 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3a8>)
    84c4:	47a0      	blx	r4
    return data_ - ReadScalar<soffset_t>(data_);
    84c6:	f85a 3009 	ldr.w	r3, [sl, r9]
    84ca:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    84cc:	881a      	ldrh	r2, [r3, #0]
    84ce:	2a10      	cmp	r2, #16
    84d0:	dd0a      	ble.n	84e8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x358>
    84d2:	8a1b      	ldrh	r3, [r3, #16]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    84d4:	b153      	cbz	r3, 84ec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x35c>
    84d6:	58f3      	ldr	r3, [r6, r3]
    quantization->quantized_dimension = src_quantization->quantized_dimension();
    84d8:	9900      	ldr	r1, [sp, #0]
    84da:	608b      	str	r3, [r1, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
    84dc:	2301      	movs	r3, #1
    84de:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    84e2:	6361      	str	r1, [r4, #52]	; 0x34
  return kTfLiteOk;
    84e4:	2000      	movs	r0, #0
    84e6:	e66e      	b.n	81c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    84e8:	2300      	movs	r3, #0
    84ea:	e7f5      	b.n	84d8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x348>
    84ec:	2300      	movs	r3, #0
    84ee:	e7f3      	b.n	84d8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x348>
    84f0:	2000      	movs	r0, #0
    84f2:	e668      	b.n	81c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    84f4:	2000      	movs	r0, #0
    84f6:	e666      	b.n	81c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    84f8:	2000      	movs	r0, #0
    84fa:	e664      	b.n	81c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    84fc:	2000      	movs	r0, #0
    84fe:	e662      	b.n	81c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    8500:	2000      	movs	r0, #0
    8502:	e660      	b.n	81c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    8504:	2000      	movs	r0, #0
    8506:	e65e      	b.n	81c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    8508:	2000      	movs	r0, #0
    850a:	e65c      	b.n	81c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    850c:	2000      	movs	r0, #0
    850e:	e65a      	b.n	81c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    8510:	2000      	movs	r0, #0
    8512:	e658      	b.n	81c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    8514:	2000      	movs	r0, #0
    8516:	e656      	b.n	81c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    8518:	2000      	movs	r0, #0
    851a:	e654      	b.n	81c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
  TFLITE_DCHECK(error_reporter != nullptr);
    851c:	b11d      	cbz	r5, 8526 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x396>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    851e:	4b07      	ldr	r3, [pc, #28]	; (853c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3ac>)
    8520:	4798      	blx	r3
  TFLITE_DCHECK(error_reporter != nullptr);
    8522:	2d00      	cmp	r5, #0
    8524:	d1fb      	bne.n	851e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x38e>
    8526:	4b05      	ldr	r3, [pc, #20]	; (853c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3ac>)
    8528:	4798      	blx	r3
    852a:	bf00      	nop
    852c:	0003ac5c 	.word	0x0003ac5c
    8530:	0003c490 	.word	0x0003c490
    8534:	0003ac68 	.word	0x0003ac68
    8538:	000173ad 	.word	0x000173ad
    853c:	0001739d 	.word	0x0001739d

00008540 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:
    const Model* model, TfLiteContext* context, const SubGraph* subgraph) {
    8540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8544:	b082      	sub	sp, #8
    8546:	4607      	mov	r7, r0
    8548:	460e      	mov	r6, r1
    854a:	4691      	mov	r9, r2
    854c:	461d      	mov	r5, r3
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    854e:	2400      	movs	r4, #0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8550:	46a2      	mov	sl, r4
        error_reporter_, &context->tensors[i]);
    8552:	f8df 8084 	ldr.w	r8, [pc, #132]	; 85d8 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x98>
    8556:	e00e      	b.n	8576 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x36>
    8558:	4653      	mov	r3, sl
    855a:	e017      	b.n	858c <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4c>
    855c:	4653      	mov	r3, sl
    855e:	e015      	b.n	858c <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4c>
    8560:	58f3      	ldr	r3, [r6, r3]
    8562:	441a      	add	r2, r3
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
    8564:	f8d9 3008 	ldr.w	r3, [r9, #8]
    8568:	eb03 1384 	add.w	r3, r3, r4, lsl #6
        error_reporter_, &context->tensors[i]);
    856c:	9300      	str	r3, [sp, #0]
    856e:	68bb      	ldr	r3, [r7, #8]
    8570:	47c0      	blx	r8
    if (status != kTfLiteOk) {
    8572:	bb10      	cbnz	r0, 85ba <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x7a>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    8574:	3401      	adds	r4, #1
    return data_ - ReadScalar<soffset_t>(data_);
    8576:	682b      	ldr	r3, [r5, #0]
    8578:	1aeb      	subs	r3, r5, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    857a:	881a      	ldrh	r2, [r3, #0]
    857c:	2a04      	cmp	r2, #4
    857e:	ddeb      	ble.n	8558 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x18>
    8580:	889a      	ldrh	r2, [r3, #4]
    auto p = data_ + field_offset;
    8582:	18ab      	adds	r3, r5, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8584:	2a00      	cmp	r2, #0
    8586:	d0e9      	beq.n	855c <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1c>
    8588:	58aa      	ldr	r2, [r5, r2]
    858a:	4413      	add	r3, r2
    858c:	681a      	ldr	r2, [r3, #0]
    858e:	4294      	cmp	r4, r2
    8590:	d21a      	bcs.n	85c8 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x88>
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
    8592:	6878      	ldr	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8594:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    8596:	eb03 0284 	add.w	r2, r3, r4, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    859a:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
    859e:	4411      	add	r1, r2
    return data_ - ReadScalar<soffset_t>(data_);
    85a0:	6833      	ldr	r3, [r6, #0]
    85a2:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    85a4:	881a      	ldrh	r2, [r3, #0]
    85a6:	2a0c      	cmp	r2, #12
    85a8:	dd05      	ble.n	85b6 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x76>
    85aa:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
    85ac:	18f2      	adds	r2, r6, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    85ae:	2b00      	cmp	r3, #0
    85b0:	d1d6      	bne.n	8560 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x20>
    85b2:	4652      	mov	r2, sl
    85b4:	e7d6      	b.n	8564 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x24>
    85b6:	4652      	mov	r2, sl
    85b8:	e7d4      	b.n	8564 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x24>
      TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
    85ba:	4622      	mov	r2, r4
    85bc:	4904      	ldr	r1, [pc, #16]	; (85d0 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x90>)
    85be:	68b8      	ldr	r0, [r7, #8]
    85c0:	4b04      	ldr	r3, [pc, #16]	; (85d4 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x94>)
    85c2:	4798      	blx	r3
      return kTfLiteError;
    85c4:	2001      	movs	r0, #1
    85c6:	e000      	b.n	85ca <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x8a>
  return kTfLiteOk;
    85c8:	2000      	movs	r0, #0
}
    85ca:	b002      	add	sp, #8
    85cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    85d0:	0003c898 	.word	0x0003c898
    85d4:	000012f9 	.word	0x000012f9
    85d8:	00008191 	.word	0x00008191

000085dc <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
    85dc:	b538      	push	{r3, r4, r5, lr}
  TFLITE_DCHECK(memory_allocator != nullptr);
    85de:	b198      	cbz	r0, 8608 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x2c>
    85e0:	460d      	mov	r5, r1
    85e2:	4604      	mov	r4, r0
  TFLITE_DCHECK(error_reporter != nullptr);
    85e4:	b191      	cbz	r1, 860c <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x30>
      sizeof(MicroAllocator), alignof(MicroAllocator));
    85e6:	6803      	ldr	r3, [r0, #0]
    85e8:	68db      	ldr	r3, [r3, #12]
    85ea:	2204      	movs	r2, #4
    85ec:	2118      	movs	r1, #24
    85ee:	4798      	blx	r3
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
    85f0:	4603      	mov	r3, r0
    85f2:	b138      	cbz	r0, 8604 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x28>
      model_is_allocating_(false) {}
    85f4:	4a06      	ldr	r2, [pc, #24]	; (8610 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x34>)
    85f6:	6002      	str	r2, [r0, #0]
    85f8:	6044      	str	r4, [r0, #4]
    85fa:	6085      	str	r5, [r0, #8]
    85fc:	2200      	movs	r2, #0
    85fe:	7302      	strb	r2, [r0, #12]
    8600:	6102      	str	r2, [r0, #16]
    8602:	6142      	str	r2, [r0, #20]
}
    8604:	4618      	mov	r0, r3
    8606:	bd38      	pop	{r3, r4, r5, pc}
  TFLITE_DCHECK(memory_allocator != nullptr);
    8608:	4b02      	ldr	r3, [pc, #8]	; (8614 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x38>)
    860a:	4798      	blx	r3
  TFLITE_DCHECK(error_reporter != nullptr);
    860c:	4b01      	ldr	r3, [pc, #4]	; (8614 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x38>)
    860e:	4798      	blx	r3
    8610:	0003c570 	.word	0x0003c570
    8614:	0001739d 	.word	0x0001739d

00008618 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
    8618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    861a:	4604      	mov	r4, r0
    861c:	460f      	mov	r7, r1
    861e:	4616      	mov	r6, r2
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
    8620:	2110      	movs	r1, #16
    8622:	4b0a      	ldr	r3, [pc, #40]	; (864c <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x34>)
    8624:	4798      	blx	r3
    8626:	4605      	mov	r5, r0
  if (aligned_arena != tensor_arena) {
    8628:	4284      	cmp	r4, r0
    862a:	d004      	beq.n	8636 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x1e>
    TF_LITE_REPORT_ERROR(
    862c:	1b02      	subs	r2, r0, r4
    862e:	4908      	ldr	r1, [pc, #32]	; (8650 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x38>)
    8630:	4630      	mov	r0, r6
    8632:	4b08      	ldr	r3, [pc, #32]	; (8654 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x3c>)
    8634:	4798      	blx	r3
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
    8636:	19e2      	adds	r2, r4, r7
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
    8638:	1b52      	subs	r2, r2, r5
    863a:	4629      	mov	r1, r5
    863c:	4630      	mov	r0, r6
    863e:	4b06      	ldr	r3, [pc, #24]	; (8658 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x40>)
    8640:	4798      	blx	r3
                error_reporter);
    8642:	4631      	mov	r1, r6
    8644:	4b05      	ldr	r3, [pc, #20]	; (865c <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x44>)
    8646:	4798      	blx	r3
}
    8648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    864a:	bf00      	nop
    864c:	000077e5 	.word	0x000077e5
    8650:	0003c8b8 	.word	0x0003c8b8
    8654:	000012f9 	.word	0x000012f9
    8658:	00009895 	.word	0x00009895
    865c:	000085dd 	.word	0x000085dd

00008660 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>:
                                                      void** ptr) {
    8660:	b570      	push	{r4, r5, r6, lr}
    8662:	4604      	mov	r4, r0
    8664:	460e      	mov	r6, r1
    8666:	4615      	mov	r5, r2
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
    8668:	6840      	ldr	r0, [r0, #4]
    866a:	6803      	ldr	r3, [r0, #0]
    866c:	68db      	ldr	r3, [r3, #12]
    866e:	2210      	movs	r2, #16
    8670:	4798      	blx	r3
  if (data == nullptr) {
    8672:	b110      	cbz	r0, 867a <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x1a>
  (*ptr) = data;
    8674:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
    8676:	2000      	movs	r0, #0
}
    8678:	bd70      	pop	{r4, r5, r6, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    867a:	4632      	mov	r2, r6
    867c:	4902      	ldr	r1, [pc, #8]	; (8688 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x28>)
    867e:	68a0      	ldr	r0, [r4, #8]
    8680:	4b02      	ldr	r3, [pc, #8]	; (868c <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x2c>)
    8682:	4798      	blx	r3
    return kTfLiteError;
    8684:	2001      	movs	r0, #1
    8686:	bd70      	pop	{r4, r5, r6, pc}
    8688:	0003c924 	.word	0x0003c924
    868c:	000012f9 	.word	0x000012f9

00008690 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>:
                                                         int* buffer_idx) {
    8690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8694:	4604      	mov	r4, r0
    8696:	460e      	mov	r6, r1
    8698:	4690      	mov	r8, r2
    869a:	461f      	mov	r7, r3
  if (scratch_buffer_handles_ != nullptr &&
    869c:	6905      	ldr	r5, [r0, #16]
    869e:	b15d      	cbz	r5, 86b8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x28>
          memory_allocator_->GetTail()) {
    86a0:	6840      	ldr	r0, [r0, #4]
    86a2:	4b14      	ldr	r3, [pc, #80]	; (86f4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x64>)
    86a4:	4798      	blx	r3
  if (scratch_buffer_handles_ != nullptr &&
    86a6:	4285      	cmp	r5, r0
    86a8:	d006      	beq.n	86b8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x28>
    TF_LITE_REPORT_ERROR(error_reporter_,
    86aa:	4913      	ldr	r1, [pc, #76]	; (86f8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x68>)
    86ac:	68a0      	ldr	r0, [r4, #8]
    86ae:	4b13      	ldr	r3, [pc, #76]	; (86fc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x6c>)
    86b0:	4798      	blx	r3
    return kTfLiteError;
    86b2:	2001      	movs	r0, #1
    86b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          memory_allocator_->AllocateFromTail(
    86b8:	6860      	ldr	r0, [r4, #4]
              alignof(internal::ScratchBufferHandle)));
    86ba:	6803      	ldr	r3, [r0, #0]
    86bc:	68db      	ldr	r3, [r3, #12]
    86be:	2204      	movs	r2, #4
    86c0:	210c      	movs	r1, #12
    86c2:	4798      	blx	r3
  if (handle == nullptr) {
    86c4:	4603      	mov	r3, r0
    86c6:	b160      	cbz	r0, 86e2 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x52>
  *handle = {};
    86c8:	2000      	movs	r0, #0
    86ca:	6018      	str	r0, [r3, #0]
  handle->bytes = bytes;
    86cc:	f8c3 8004 	str.w	r8, [r3, #4]
  handle->node_idx = node_id;
    86d0:	609e      	str	r6, [r3, #8]
  *buffer_idx = scratch_buffer_count_;
    86d2:	6962      	ldr	r2, [r4, #20]
    86d4:	603a      	str	r2, [r7, #0]
  scratch_buffer_count_ += 1;
    86d6:	6962      	ldr	r2, [r4, #20]
    86d8:	3201      	adds	r2, #1
    86da:	6162      	str	r2, [r4, #20]
  scratch_buffer_handles_ = handle;
    86dc:	6123      	str	r3, [r4, #16]
}
    86de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    86e2:	4632      	mov	r2, r6
    86e4:	4906      	ldr	r1, [pc, #24]	; (8700 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x70>)
    86e6:	68a0      	ldr	r0, [r4, #8]
    86e8:	4b04      	ldr	r3, [pc, #16]	; (86fc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x6c>)
    86ea:	4798      	blx	r3
    return kTfLiteError;
    86ec:	2001      	movs	r0, #1
    86ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    86f2:	bf00      	nop
    86f4:	000098f5 	.word	0x000098f5
    86f8:	0003c954 	.word	0x0003c954
    86fc:	000012f9 	.word	0x000012f9
    8700:	0003c9b8 	.word	0x0003c9b8

00008704 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>:
  if (static_cast<size_t>(buffer_idx) >= scratch_buffer_count_) {
    8704:	6943      	ldr	r3, [r0, #20]
    8706:	428b      	cmp	r3, r1
    8708:	d908      	bls.n	871c <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x18>
  return scratch_buffer_handles_[scratch_buffer_count_ - buffer_idx - 1].data;
    870a:	1a5b      	subs	r3, r3, r1
    870c:	6901      	ldr	r1, [r0, #16]
    870e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8712:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8716:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    871a:	4770      	bx	lr
void* MicroAllocator::GetScratchBuffer(int buffer_idx) const {
    871c:	b510      	push	{r4, lr}
    871e:	460a      	mov	r2, r1
    TF_LITE_REPORT_ERROR(error_reporter_,
    8720:	4902      	ldr	r1, [pc, #8]	; (872c <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x28>)
    8722:	6880      	ldr	r0, [r0, #8]
    8724:	4c02      	ldr	r4, [pc, #8]	; (8730 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x2c>)
    8726:	47a0      	blx	r4
    return nullptr;
    8728:	2000      	movs	r0, #0
    872a:	bd10      	pop	{r4, pc}
    872c:	0003c9f0 	.word	0x0003c9f0
    8730:	000012f9 	.word	0x000012f9

00008734 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>:

ErrorReporter* MicroAllocator::error_reporter() const {
  return error_reporter_;
}

const SubGraph* MicroAllocator::GetSubGraphFromModel(const Model* model) {
    8734:	b508      	push	{r3, lr}
    return data_ - ReadScalar<soffset_t>(data_);
    8736:	680b      	ldr	r3, [r1, #0]
    8738:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    873a:	881a      	ldrh	r2, [r3, #0]
    873c:	2a08      	cmp	r2, #8
    873e:	dd0b      	ble.n	8758 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x24>
    8740:	891a      	ldrh	r2, [r3, #8]
    auto p = data_ + field_offset;
    8742:	188b      	adds	r3, r1, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8744:	b152      	cbz	r2, 875c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x28>
    8746:	588a      	ldr	r2, [r1, r2]
    8748:	4413      	add	r3, r2
  auto* subgraphs = model->subgraphs();
  if (subgraphs->size() != 1) {
    874a:	681a      	ldr	r2, [r3, #0]
    874c:	2a01      	cmp	r2, #1
    874e:	d107      	bne.n	8760 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x2c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8750:	1d18      	adds	r0, r3, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8752:	685b      	ldr	r3, [r3, #4]
    8754:	4418      	add	r0, r3
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Only 1 subgraph is currently supported.\n");
    return nullptr;
  }
  return (*subgraphs)[0];
}
    8756:	bd08      	pop	{r3, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8758:	2300      	movs	r3, #0
    875a:	e7f6      	b.n	874a <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x16>
    875c:	2300      	movs	r3, #0
    875e:	e7f4      	b.n	874a <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x16>
    TF_LITE_REPORT_ERROR(error_reporter_,
    8760:	4902      	ldr	r1, [pc, #8]	; (876c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x38>)
    8762:	6880      	ldr	r0, [r0, #8]
    8764:	4b02      	ldr	r3, [pc, #8]	; (8770 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x3c>)
    8766:	4798      	blx	r3
    return nullptr;
    8768:	2000      	movs	r0, #0
    876a:	bd08      	pop	{r3, pc}
    876c:	0003ca1c 	.word	0x0003ca1c
    8770:	000012f9 	.word	0x000012f9

00008774 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>:
    NodeAndRegistration** node_and_registrations) {
    8774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8778:	b083      	sub	sp, #12
  TFLITE_DCHECK(model != nullptr);
    877a:	2900      	cmp	r1, #0
    877c:	d031      	beq.n	87e2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x6e>
    877e:	4604      	mov	r4, r0
    8780:	4615      	mov	r5, r2
    8782:	461f      	mov	r7, r3
    8784:	460e      	mov	r6, r1
  TFLITE_DCHECK(context != nullptr);
    8786:	2a00      	cmp	r2, #0
    8788:	d02d      	beq.n	87e6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x72>
  if (model_is_allocating_) {
    878a:	7b03      	ldrb	r3, [r0, #12]
    878c:	2b00      	cmp	r3, #0
    878e:	d12c      	bne.n	87ea <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x76>
  const SubGraph* subgraph = GetSubGraphFromModel(model);
    8790:	4b1b      	ldr	r3, [pc, #108]	; (8800 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x8c>)
    8792:	4798      	blx	r3
  TFLITE_DCHECK(subgraph != nullptr);
    8794:	4680      	mov	r8, r0
    8796:	2800      	cmp	r0, #0
    8798:	d02f      	beq.n	87fa <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x86>
  model_is_allocating_ = true;
    879a:	2301      	movs	r3, #1
    879c:	7323      	strb	r3, [r4, #12]
  TF_LITE_ENSURE_STATUS(AllocateTfLiteTensorArray(context, subgraph));
    879e:	6823      	ldr	r3, [r4, #0]
    87a0:	689b      	ldr	r3, [r3, #8]
    87a2:	4602      	mov	r2, r0
    87a4:	4629      	mov	r1, r5
    87a6:	4620      	mov	r0, r4
    87a8:	4798      	blx	r3
    87aa:	bb18      	cbnz	r0, 87f4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x80>
  TF_LITE_ENSURE_STATUS(
    87ac:	6823      	ldr	r3, [r4, #0]
    87ae:	f8d3 900c 	ldr.w	r9, [r3, #12]
    87b2:	4643      	mov	r3, r8
    87b4:	462a      	mov	r2, r5
    87b6:	4631      	mov	r1, r6
    87b8:	4620      	mov	r0, r4
    87ba:	47c8      	blx	r9
    87bc:	b9d0      	cbnz	r0, 87f4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x80>
  TF_LITE_ENSURE_STATUS(
    87be:	6823      	ldr	r3, [r4, #0]
    87c0:	691b      	ldr	r3, [r3, #16]
    87c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    87c4:	4641      	mov	r1, r8
    87c6:	4620      	mov	r0, r4
    87c8:	4798      	blx	r3
    87ca:	b998      	cbnz	r0, 87f4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x80>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
    87cc:	6823      	ldr	r3, [r4, #0]
    87ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    87d0:	6812      	ldr	r2, [r2, #0]
    87d2:	9200      	str	r2, [sp, #0]
    87d4:	695d      	ldr	r5, [r3, #20]
    87d6:	463b      	mov	r3, r7
    87d8:	4642      	mov	r2, r8
    87da:	4631      	mov	r1, r6
    87dc:	4620      	mov	r0, r4
    87de:	47a8      	blx	r5
    87e0:	e008      	b.n	87f4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x80>
  TFLITE_DCHECK(model != nullptr);
    87e2:	4b08      	ldr	r3, [pc, #32]	; (8804 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x90>)
    87e4:	4798      	blx	r3
  TFLITE_DCHECK(context != nullptr);
    87e6:	4b07      	ldr	r3, [pc, #28]	; (8804 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x90>)
    87e8:	4798      	blx	r3
    TF_LITE_REPORT_ERROR(error_reporter_,
    87ea:	4907      	ldr	r1, [pc, #28]	; (8808 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x94>)
    87ec:	6880      	ldr	r0, [r0, #8]
    87ee:	4b07      	ldr	r3, [pc, #28]	; (880c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x98>)
    87f0:	4798      	blx	r3
    return kTfLiteError;
    87f2:	2001      	movs	r0, #1
}
    87f4:	b003      	add	sp, #12
    87f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  TFLITE_DCHECK(subgraph != nullptr);
    87fa:	4b02      	ldr	r3, [pc, #8]	; (8804 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x90>)
    87fc:	4798      	blx	r3
    87fe:	bf00      	nop
    8800:	00008735 	.word	0x00008735
    8804:	0001739d 	.word	0x0001739d
    8808:	0003ca48 	.word	0x0003ca48
    880c:	000012f9 	.word	0x000012f9

00008810 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>:
                                                   TfLiteContext* context) {
    8810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8814:	4604      	mov	r4, r0
  if (!model_is_allocating_) {
    8816:	7b03      	ldrb	r3, [r0, #12]
    8818:	b17b      	cbz	r3, 883a <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x2a>
    881a:	460d      	mov	r5, r1
    881c:	4616      	mov	r6, r2
  const SubGraph* subgraph = GetSubGraphFromModel(model);
    881e:	4b12      	ldr	r3, [pc, #72]	; (8868 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x58>)
    8820:	4798      	blx	r3
  TFLITE_DCHECK(subgraph != nullptr);
    8822:	4680      	mov	r8, r0
    8824:	b180      	cbz	r0, 8848 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x38>
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, context, subgraph));
    8826:	6823      	ldr	r3, [r4, #0]
    8828:	69df      	ldr	r7, [r3, #28]
    882a:	4603      	mov	r3, r0
    882c:	4632      	mov	r2, r6
    882e:	4629      	mov	r1, r5
    8830:	4620      	mov	r0, r4
    8832:	47b8      	blx	r7
    8834:	b150      	cbz	r0, 884c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x3c>
    8836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    883a:	490c      	ldr	r1, [pc, #48]	; (886c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x5c>)
    883c:	6880      	ldr	r0, [r0, #8]
    883e:	4b0c      	ldr	r3, [pc, #48]	; (8870 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x60>)
    8840:	4798      	blx	r3
    return kTfLiteError;
    8842:	2001      	movs	r0, #1
    8844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_DCHECK(subgraph != nullptr);
    8848:	4b0a      	ldr	r3, [pc, #40]	; (8874 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x64>)
    884a:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(AllocateVariables(context, subgraph));
    884c:	6823      	ldr	r3, [r4, #0]
    884e:	699b      	ldr	r3, [r3, #24]
    8850:	4642      	mov	r2, r8
    8852:	4631      	mov	r1, r6
    8854:	4620      	mov	r0, r4
    8856:	4798      	blx	r3
    8858:	b918      	cbnz	r0, 8862 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x52>
  model_is_allocating_ = false;
    885a:	2200      	movs	r2, #0
    885c:	7322      	strb	r2, [r4, #12]
  return kTfLiteOk;
    885e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
    8862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8866:	bf00      	nop
    8868:	00008735 	.word	0x00008735
    886c:	0003caa0 	.word	0x0003caa0
    8870:	000012f9 	.word	0x000012f9
    8874:	0001739d 	.word	0x0001739d

00008878 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(const Model* model,
                                                    TfLiteContext* context,
                                                    const SubGraph* subgraph) {
    8878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    887c:	b09f      	sub	sp, #124	; 0x7c
    887e:	4607      	mov	r7, r0
    8880:	9003      	str	r0, [sp, #12]
    8882:	460c      	mov	r4, r1
    8884:	9208      	str	r2, [sp, #32]
    8886:	469a      	mov	sl, r3
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // thrown away when the child allocator (tmp_allocator) goes out of scope.
  {
    SimpleMemoryAllocator tmp_allocator(error_reporter_,
                                        memory_allocator_->GetHead(),
                                        memory_allocator_->GetTail());
    8888:	6885      	ldr	r5, [r0, #8]
    888a:	6840      	ldr	r0, [r0, #4]
    888c:	4bab      	ldr	r3, [pc, #684]	; (8b3c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2c4>)
    888e:	4798      	blx	r3
    8890:	4606      	mov	r6, r0
    8892:	6878      	ldr	r0, [r7, #4]
    8894:	4baa      	ldr	r3, [pc, #680]	; (8b40 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2c8>)
    8896:	4798      	blx	r3
    8898:	4603      	mov	r3, r0
    889a:	4632      	mov	r2, r6
    889c:	4629      	mov	r1, r5
    889e:	a80d      	add	r0, sp, #52	; 0x34
    88a0:	4da8      	ldr	r5, [pc, #672]	; (8b44 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2cc>)
    88a2:	47a8      	blx	r5

    AllocationInfoBuilder builder(error_reporter_, &tmp_allocator);
    88a4:	68bb      	ldr	r3, [r7, #8]
    88a6:	9305      	str	r3, [sp, #20]
    return data_ - ReadScalar<soffset_t>(data_);
    88a8:	46d3      	mov	fp, sl
    88aa:	f8da 3000 	ldr.w	r3, [sl]
    88ae:	ebaa 0303 	sub.w	r3, sl, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    88b2:	881a      	ldrh	r2, [r3, #0]
    88b4:	2a04      	cmp	r2, #4
    88b6:	dd3a      	ble.n	892e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xb6>
    88b8:	889a      	ldrh	r2, [r3, #4]
    auto p = data_ + field_offset;
    88ba:	eb0a 0302 	add.w	r3, sl, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    88be:	2a00      	cmp	r2, #0
    88c0:	d037      	beq.n	8932 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xba>
    88c2:	f85a 2002 	ldr.w	r2, [sl, r2]
    88c6:	4413      	add	r3, r2
  uoffset_t size() const { return EndianScalar(length_); }
    88c8:	681b      	ldr	r3, [r3, #0]
    88ca:	461a      	mov	r2, r3
    88cc:	9304      	str	r3, [sp, #16]
  size_t Size() const { return tensor_count_ + buffer_count_; }
    88ce:	9b03      	ldr	r3, [sp, #12]
    88d0:	695b      	ldr	r3, [r3, #20]
    88d2:	18d3      	adds	r3, r2, r3
    88d4:	9307      	str	r3, [sp, #28]
  size_t bytes = sizeof(AllocationInfo) * Size();
    88d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    88da:	00db      	lsls	r3, r3, #3
    88dc:	4619      	mov	r1, r3
    88de:	9306      	str	r3, [sp, #24]
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
    88e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    88e2:	68db      	ldr	r3, [r3, #12]
    88e4:	2204      	movs	r2, #4
    88e6:	a80d      	add	r0, sp, #52	; 0x34
    88e8:	4798      	blx	r3
  if (info_ == nullptr) {
    88ea:	4606      	mov	r6, r0
    88ec:	b318      	cbz	r0, 8936 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xbe>
    return data_ - ReadScalar<soffset_t>(data_);
    88ee:	46a1      	mov	r9, r4
    88f0:	6823      	ldr	r3, [r4, #0]
    88f2:	1ae3      	subs	r3, r4, r3
    88f4:	461a      	mov	r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    88f6:	881b      	ldrh	r3, [r3, #0]
    88f8:	4618      	mov	r0, r3
    88fa:	2b10      	cmp	r3, #16
    88fc:	f340 8282 	ble.w	8e04 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x58c>
    8900:	4611      	mov	r1, r2
    8902:	8a13      	ldrh	r3, [r2, #16]
    auto p = data_ + field_offset;
    8904:	18e2      	adds	r2, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8906:	2b00      	cmp	r3, #0
    8908:	f000 8094 	beq.w	8a34 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1bc>
    890c:	58e3      	ldr	r3, [r4, r3]
  if (model->metadata()) {
    890e:	42da      	cmn	r2, r3
    8910:	f000 828a 	beq.w	8e28 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x5b0>
    8914:	2300      	movs	r3, #0
    8916:	9302      	str	r3, [sp, #8]
    8918:	461c      	mov	r4, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
    891a:	9609      	str	r6, [sp, #36]	; 0x24
    891c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    8920:	468b      	mov	fp, r1
    8922:	4680      	mov	r8, r0
    8924:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
    8928:	f8dd a010 	ldr.w	sl, [sp, #16]
    892c:	e01d      	b.n	896a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xf2>
    892e:	2300      	movs	r3, #0
    8930:	e7ca      	b.n	88c8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x50>
    8932:	2300      	movs	r3, #0
    8934:	e7c8      	b.n	88c8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x50>
    TF_LITE_REPORT_ERROR(
    8936:	9a06      	ldr	r2, [sp, #24]
    8938:	4983      	ldr	r1, [pc, #524]	; (8b48 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2d0>)
    893a:	9805      	ldr	r0, [sp, #20]
    893c:	4b83      	ldr	r3, [pc, #524]	; (8b4c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2d4>)
    893e:	4798      	blx	r3
    TF_LITE_ENSURE_STATUS(
    8940:	2401      	movs	r4, #1
    8942:	a80d      	add	r0, sp, #52	; 0x34
    8944:	4b82      	ldr	r3, [pc, #520]	; (8b50 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2d8>)
    8946:	4798      	blx	r3
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
                                            /*alignment=*/1);
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
  }
  return kTfLiteOk;
}
    8948:	4620      	mov	r0, r4
    894a:	b01f      	add	sp, #124	; 0x7c
    894c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8950:	2300      	movs	r3, #0
    8952:	e016      	b.n	8982 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x10a>
    8954:	2300      	movs	r3, #0
    8956:	e014      	b.n	8982 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x10a>
    8958:	58f3      	ldr	r3, [r6, r3]
    895a:	4418      	add	r0, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
    895c:	2217      	movs	r2, #23
    895e:	497d      	ldr	r1, [pc, #500]	; (8b54 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2dc>)
    8960:	3004      	adds	r0, #4
    8962:	4b7d      	ldr	r3, [pc, #500]	; (8b58 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2e0>)
    8964:	4798      	blx	r3
    8966:	b310      	cbz	r0, 89ae <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x136>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    8968:	3401      	adds	r4, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    896a:	f1b8 0f10 	cmp.w	r8, #16
    896e:	ddef      	ble.n	8950 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xd8>
    8970:	f8bb 2010 	ldrh.w	r2, [fp, #16]
    auto p = data_ + field_offset;
    8974:	eb09 0302 	add.w	r3, r9, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8978:	2a00      	cmp	r2, #0
    897a:	d0eb      	beq.n	8954 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xdc>
    897c:	f859 2002 	ldr.w	r2, [r9, r2]
    8980:	4413      	add	r3, r2
    8982:	681a      	ldr	r2, [r3, #0]
    8984:	42a2      	cmp	r2, r4
    8986:	d958      	bls.n	8a3a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1c2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8988:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    898a:	eb03 0284 	add.w	r2, r3, r4, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    898e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    8992:	18d6      	adds	r6, r2, r3
    return data_ - ReadScalar<soffset_t>(data_);
    8994:	58d5      	ldr	r5, [r2, r3]
    8996:	1b75      	subs	r5, r6, r5
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8998:	882f      	ldrh	r7, [r5, #0]
    899a:	2f04      	cmp	r7, #4
    899c:	dd05      	ble.n	89aa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x132>
    899e:	88ab      	ldrh	r3, [r5, #4]
    auto p = data_ + field_offset;
    89a0:	18f0      	adds	r0, r6, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    89a2:	2b00      	cmp	r3, #0
    89a4:	d1d8      	bne.n	8958 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xe0>
    89a6:	2000      	movs	r0, #0
    89a8:	e7d8      	b.n	895c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xe4>
    89aa:	2000      	movs	r0, #0
    89ac:	e7d6      	b.n	895c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xe4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    89ae:	f1b8 0f0c 	cmp.w	r8, #12
    89b2:	dd25      	ble.n	8a00 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x188>
    89b4:	f8bb 200c 	ldrh.w	r2, [fp, #12]
    auto p = data_ + field_offset;
    89b8:	eb09 0302 	add.w	r3, r9, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    89bc:	b312      	cbz	r2, 8a04 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x18c>
    89be:	f859 2002 	ldr.w	r2, [r9, r2]
    89c2:	4413      	add	r3, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    89c4:	2f06      	cmp	r7, #6
    89c6:	dd1f      	ble.n	8a08 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x190>
    89c8:	88ea      	ldrh	r2, [r5, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    89ca:	b1fa      	cbz	r2, 8a0c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x194>
    89cc:	58b2      	ldr	r2, [r6, r2]
    FLATBUFFERS_ASSERT(i < size());
    89ce:	6819      	ldr	r1, [r3, #0]
    89d0:	4291      	cmp	r1, r2
    89d2:	d91d      	bls.n	8a10 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x198>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    89d4:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    89d6:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    89da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    89de:	18ca      	adds	r2, r1, r3
    return data_ - ReadScalar<soffset_t>(data_);
    89e0:	58cb      	ldr	r3, [r1, r3]
    89e2:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    89e4:	8819      	ldrh	r1, [r3, #0]
    89e6:	2904      	cmp	r1, #4
    89e8:	dd19      	ble.n	8a1e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1a6>
    89ea:	8899      	ldrh	r1, [r3, #4]
    auto p = data_ + field_offset;
    89ec:	1853      	adds	r3, r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    89ee:	b1c1      	cbz	r1, 8a22 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1aa>
    89f0:	5852      	ldr	r2, [r2, r1]
    89f2:	4413      	add	r3, r2
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
    89f4:	68da      	ldr	r2, [r3, #12]
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
    89f6:	3310      	adds	r3, #16
        if (tensor_count_ != nbr_tensors) {
    89f8:	4592      	cmp	sl, r2
    89fa:	d114      	bne.n	8a26 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1ae>
        *offline_planner_offsets =
    89fc:	9302      	str	r3, [sp, #8]
    89fe:	e7b3      	b.n	8968 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xf0>
    8a00:	2300      	movs	r3, #0
    8a02:	e7df      	b.n	89c4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x14c>
    8a04:	2300      	movs	r3, #0
    8a06:	e7dd      	b.n	89c4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x14c>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8a08:	2200      	movs	r2, #0
    8a0a:	e7e0      	b.n	89ce <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x156>
    8a0c:	2200      	movs	r2, #0
    8a0e:	e7de      	b.n	89ce <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x156>
    FLATBUFFERS_ASSERT(i < size());
    8a10:	4b52      	ldr	r3, [pc, #328]	; (8b5c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2e4>)
    8a12:	4a53      	ldr	r2, [pc, #332]	; (8b60 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2e8>)
    8a14:	f240 1101 	movw	r1, #257	; 0x101
    8a18:	4852      	ldr	r0, [pc, #328]	; (8b64 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ec>)
    8a1a:	4c53      	ldr	r4, [pc, #332]	; (8b68 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2f0>)
    8a1c:	47a0      	blx	r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a1e:	2300      	movs	r3, #0
    8a20:	e7e8      	b.n	89f4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x17c>
    8a22:	2300      	movs	r3, #0
    8a24:	e7e6      	b.n	89f4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x17c>
          TF_LITE_REPORT_ERROR(reporter_,
    8a26:	9b04      	ldr	r3, [sp, #16]
    8a28:	4950      	ldr	r1, [pc, #320]	; (8b6c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2f4>)
    8a2a:	9805      	ldr	r0, [sp, #20]
    8a2c:	4c47      	ldr	r4, [pc, #284]	; (8b4c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2d4>)
    8a2e:	47a0      	blx	r4
    TF_LITE_ENSURE_STATUS(
    8a30:	2401      	movs	r4, #1
    8a32:	e786      	b.n	8942 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xca>
    const int32_t* offline_planner_offsets = nullptr;
    8a34:	2300      	movs	r3, #0
    8a36:	9302      	str	r3, [sp, #8]
    8a38:	e1e6      	b.n	8e08 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x590>
    8a3a:	9e09      	ldr	r6, [sp, #36]	; 0x24
    8a3c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    8a40:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    8a44:	e1e0      	b.n	8e08 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x590>
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
    8a46:	2100      	movs	r1, #0
    8a48:	4608      	mov	r0, r1
    8a4a:	e061      	b.n	8b10 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x298>
    return data_ - ReadScalar<soffset_t>(data_);
    8a4c:	f8da 4000 	ldr.w	r4, [sl]
    8a50:	ebab 0404 	sub.w	r4, fp, r4
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a54:	f8b4 8000 	ldrh.w	r8, [r4]
    8a58:	f1b8 0f04 	cmp.w	r8, #4
    8a5c:	dd23      	ble.n	8aa6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x22e>
    8a5e:	88a4      	ldrh	r4, [r4, #4]
    auto p = data_ + field_offset;
    8a60:	eb0b 0804 	add.w	r8, fp, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a64:	b30c      	cbz	r4, 8aaa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x232>
    8a66:	f85b 4004 	ldr.w	r4, [fp, r4]
    8a6a:	44a0      	add	r8, r4
    FLATBUFFERS_ASSERT(i < size());
    8a6c:	f8d8 4000 	ldr.w	r4, [r8]
    8a70:	42a1      	cmp	r1, r4
    8a72:	d21c      	bcs.n	8aae <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x236>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8a74:	f108 0804 	add.w	r8, r8, #4
    p += i * sizeof(uoffset_t);
    8a78:	eb08 0481 	add.w	r4, r8, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8a7c:	f858 9021 	ldr.w	r9, [r8, r1, lsl #2]
    8a80:	eb04 0809 	add.w	r8, r4, r9
    return data_ - ReadScalar<soffset_t>(data_);
    8a84:	f854 4009 	ldr.w	r4, [r4, r9]
    8a88:	eba8 0404 	sub.w	r4, r8, r4
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a8c:	f8b4 9000 	ldrh.w	r9, [r4]
    8a90:	f1b9 0f0e 	cmp.w	r9, #14
    8a94:	dd12      	ble.n	8abc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x244>
    8a96:	89e4      	ldrh	r4, [r4, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8a98:	b194      	cbz	r4, 8ac0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x248>
    8a9a:	f818 4004 	ldrb.w	r4, [r8, r4]
    8a9e:	fab4 f484 	clz	r4, r4
    8aa2:	0964      	lsrs	r4, r4, #5
    8aa4:	e01e      	b.n	8ae4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x26c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8aa6:	46e0      	mov	r8, ip
    8aa8:	e7e0      	b.n	8a6c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1f4>
    8aaa:	46e0      	mov	r8, ip
    8aac:	e7de      	b.n	8a6c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1f4>
    FLATBUFFERS_ASSERT(i < size());
    8aae:	4b2b      	ldr	r3, [pc, #172]	; (8b5c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2e4>)
    8ab0:	4a2f      	ldr	r2, [pc, #188]	; (8b70 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2f8>)
    8ab2:	f240 1101 	movw	r1, #257	; 0x101
    8ab6:	482b      	ldr	r0, [pc, #172]	; (8b64 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ec>)
    8ab8:	4c2b      	ldr	r4, [pc, #172]	; (8b68 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2f0>)
    8aba:	47a0      	blx	r4
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8abc:	4664      	mov	r4, ip
    8abe:	e7ee      	b.n	8a9e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x226>
    8ac0:	4664      	mov	r4, ip
    8ac2:	e7ec      	b.n	8a9e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x226>
      current->offline_offset = kOnlinePlannedBuffer;
    8ac4:	6105      	str	r5, [r0, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
    8ac6:	3101      	adds	r1, #1
    8ac8:	3240      	adds	r2, #64	; 0x40
    8aca:	3318      	adds	r3, #24
    8acc:	458e      	cmp	lr, r1
    8ace:	d0ba      	beq.n	8a46 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1ce>
    8ad0:	4618      	mov	r0, r3
    current->output_ptr = &(runtime_tensors[i].data.data);
    8ad2:	605a      	str	r2, [r3, #4]
    current->bytes = runtime_tensors[i].bytes;
    8ad4:	6954      	ldr	r4, [r2, #20]
    8ad6:	601c      	str	r4, [r3, #0]
    current->first_created = -1;
    8ad8:	609d      	str	r5, [r3, #8]
    current->last_used = -1;
    8ada:	60dd      	str	r5, [r3, #12]
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
    8adc:	6814      	ldr	r4, [r2, #0]
    8ade:	2c00      	cmp	r4, #0
    8ae0:	d0b4      	beq.n	8a4c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1d4>
    8ae2:	4664      	mov	r4, ip
    8ae4:	7504      	strb	r4, [r0, #20]
    if (offline_offsets) {
    8ae6:	2f00      	cmp	r7, #0
    8ae8:	d0ec      	beq.n	8ac4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x24c>
      current->offline_offset = offline_offsets[i];
    8aea:	f857 4021 	ldr.w	r4, [r7, r1, lsl #2]
    8aee:	6104      	str	r4, [r0, #16]
    8af0:	e7e9      	b.n	8ac6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x24e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8af2:	f85b 2002 	ldr.w	r2, [fp, r2]
    8af6:	4413      	add	r3, r2
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    8af8:	681a      	ldr	r2, [r3, #0]
    8afa:	428a      	cmp	r2, r1
    8afc:	d918      	bls.n	8b30 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2b8>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8afe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    AllocationInfo* current = &info_[tensor_index];
    8b02:	685b      	ldr	r3, [r3, #4]
    current->first_created = 0;
    8b04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8b08:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    8b0c:	6098      	str	r0, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    8b0e:	3101      	adds	r1, #1
    return data_ - ReadScalar<soffset_t>(data_);
    8b10:	f8da 3000 	ldr.w	r3, [sl]
    8b14:	ebab 0303 	sub.w	r3, fp, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b18:	881a      	ldrh	r2, [r3, #0]
    8b1a:	2a06      	cmp	r2, #6
    8b1c:	dd06      	ble.n	8b2c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2b4>
    8b1e:	88da      	ldrh	r2, [r3, #6]
    auto p = data_ + field_offset;
    8b20:	eb0b 0302 	add.w	r3, fp, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8b24:	2a00      	cmp	r2, #0
    8b26:	d1e4      	bne.n	8af2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27a>
    8b28:	4603      	mov	r3, r0
    8b2a:	e7e5      	b.n	8af8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x280>
    8b2c:	4603      	mov	r3, r0
    8b2e:	e7e3      	b.n	8af8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x280>
    8b30:	2100      	movs	r1, #0
    8b32:	460d      	mov	r5, r1
    8b34:	e027      	b.n	8b86 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x30e>
    8b36:	462b      	mov	r3, r5
    8b38:	e034      	b.n	8ba4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x32c>
    8b3a:	bf00      	nop
    8b3c:	000098f1 	.word	0x000098f1
    8b40:	000098f5 	.word	0x000098f5
    8b44:	0000987d 	.word	0x0000987d
    8b48:	0003caec 	.word	0x0003caec
    8b4c:	000012f9 	.word	0x000012f9
    8b50:	000097e9 	.word	0x000097e9
    8b54:	0003c590 	.word	0x0003c590
    8b58:	0001911d 	.word	0x0001911d
    8b5c:	0003ac5c 	.word	0x0003ac5c
    8b60:	0003c2cc 	.word	0x0003c2cc
    8b64:	0003ac68 	.word	0x0003ac68
    8b68:	000173ad 	.word	0x000173ad
    8b6c:	0003cb30 	.word	0x0003cb30
    8b70:	0003c1bc 	.word	0x0003c1bc
    8b74:	462b      	mov	r3, r5
    8b76:	e015      	b.n	8ba4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x32c>
    8b78:	f85b 0000 	ldr.w	r0, [fp, r0]
    8b7c:	4402      	add	r2, r0
    current->last_used = subgraph->operators()->size() - 1;
    8b7e:	6812      	ldr	r2, [r2, #0]
    8b80:	3a01      	subs	r2, #1
    8b82:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    8b84:	3101      	adds	r1, #1
    return data_ - ReadScalar<soffset_t>(data_);
    8b86:	f8da 2000 	ldr.w	r2, [sl]
    8b8a:	ebab 0202 	sub.w	r2, fp, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b8e:	8814      	ldrh	r4, [r2, #0]
    8b90:	2c08      	cmp	r4, #8
    8b92:	ddd0      	ble.n	8b36 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2be>
    8b94:	8910      	ldrh	r0, [r2, #8]
    auto p = data_ + field_offset;
    8b96:	eb0b 0300 	add.w	r3, fp, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8b9a:	2800      	cmp	r0, #0
    8b9c:	d0ea      	beq.n	8b74 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2fc>
    8b9e:	f85b 0000 	ldr.w	r0, [fp, r0]
    8ba2:	4403      	add	r3, r0
    8ba4:	6818      	ldr	r0, [r3, #0]
    8ba6:	4288      	cmp	r0, r1
    8ba8:	d911      	bls.n	8bce <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x356>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8baa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    AllocationInfo* current = &info_[tensor_index];
    8bae:	685b      	ldr	r3, [r3, #4]
    8bb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8bb4:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8bb8:	2c0a      	cmp	r4, #10
    8bba:	dd06      	ble.n	8bca <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x352>
    8bbc:	8950      	ldrh	r0, [r2, #10]
    auto p = data_ + field_offset;
    8bbe:	eb0b 0200 	add.w	r2, fp, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8bc2:	2800      	cmp	r0, #0
    8bc4:	d1d8      	bne.n	8b78 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x300>
    8bc6:	462a      	mov	r2, r5
    8bc8:	e7d9      	b.n	8b7e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x306>
    8bca:	462a      	mov	r2, r5
    8bcc:	e7d7      	b.n	8b7e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x306>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8bce:	2c0a      	cmp	r4, #10
    8bd0:	dd11      	ble.n	8bf6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x37e>
    8bd2:	8952      	ldrh	r2, [r2, #10]
    auto p = data_ + field_offset;
    8bd4:	eb0a 0302 	add.w	r3, sl, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8bd8:	b17a      	cbz	r2, 8bfa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x382>
    8bda:	f85a 2002 	ldr.w	r2, [sl, r2]
    8bde:	4413      	add	r3, r2
  uoffset_t size() const { return EndianScalar(length_); }
    8be0:	681b      	ldr	r3, [r3, #0]
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
    8be2:	1e59      	subs	r1, r3, #1
    8be4:	d40b      	bmi.n	8bfe <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x386>
    8be6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8bea:	3b01      	subs	r3, #1
    8bec:	009d      	lsls	r5, r3, #2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8bee:	f04f 0c00 	mov.w	ip, #0
    8bf2:	46e0      	mov	r8, ip
    8bf4:	e060      	b.n	8cb8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x440>
    8bf6:	2300      	movs	r3, #0
    8bf8:	e7f2      	b.n	8be0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x368>
    8bfa:	2300      	movs	r3, #0
    8bfc:	e7f0      	b.n	8be0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x368>
  for (size_t i = 0; i < tensor_count_; ++i) {
    8bfe:	9b04      	ldr	r3, [sp, #16]
    8c00:	2b00      	cmp	r3, #0
    8c02:	f000 8114 	beq.w	8e2e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x5b6>
    8c06:	4631      	mov	r1, r6
    8c08:	2200      	movs	r2, #0
      current->needs_allocating = false;
    8c0a:	4615      	mov	r5, r2
    8c0c:	9f04      	ldr	r7, [sp, #16]
    8c0e:	e076      	b.n	8cfe <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x486>
    8c10:	4663      	mov	r3, ip
    8c12:	e060      	b.n	8cd6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x45e>
    8c14:	4663      	mov	r3, ip
    8c16:	e05e      	b.n	8cd6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x45e>
    FLATBUFFERS_ASSERT(i < size());
    8c18:	4ba4      	ldr	r3, [pc, #656]	; (8eac <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x634>)
    8c1a:	4aa5      	ldr	r2, [pc, #660]	; (8eb0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x638>)
    8c1c:	f240 1101 	movw	r1, #257	; 0x101
    8c20:	48a4      	ldr	r0, [pc, #656]	; (8eb4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x63c>)
    8c22:	4ca5      	ldr	r4, [pc, #660]	; (8eb8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x640>)
    8c24:	47a0      	blx	r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8c26:	4644      	mov	r4, r8
    8c28:	e00e      	b.n	8c48 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3d0>
    8c2a:	4644      	mov	r4, r8
    8c2c:	e00c      	b.n	8c48 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3d0>
        current->last_used = i;
    8c2e:	60d9      	str	r1, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    8c30:	3701      	adds	r7, #1
    return data_ - ReadScalar<soffset_t>(data_);
    8c32:	6813      	ldr	r3, [r2, #0]
    8c34:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c36:	881c      	ldrh	r4, [r3, #0]
    8c38:	2c06      	cmp	r4, #6
    8c3a:	ddf4      	ble.n	8c26 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3ae>
    8c3c:	88db      	ldrh	r3, [r3, #6]
    auto p = data_ + field_offset;
    8c3e:	18d4      	adds	r4, r2, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8c40:	2b00      	cmp	r3, #0
    8c42:	d0f2      	beq.n	8c2a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3b2>
    8c44:	58d3      	ldr	r3, [r2, r3]
    8c46:	441c      	add	r4, r3
    8c48:	6823      	ldr	r3, [r4, #0]
    8c4a:	42bb      	cmp	r3, r7
    8c4c:	d90d      	bls.n	8c6a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3f2>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8c4e:	eb04 0487 	add.w	r4, r4, r7, lsl #2
      AllocationInfo* current = &info_[tensor_index];
    8c52:	6863      	ldr	r3, [r4, #4]
    8c54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8c58:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
      if (((current->last_used == -1) || (current->last_used < i))) {
    8c5c:	68dc      	ldr	r4, [r3, #12]
    8c5e:	f1b4 3fff 	cmp.w	r4, #4294967295
    8c62:	d0e4      	beq.n	8c2e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3b6>
    8c64:	42a1      	cmp	r1, r4
    8c66:	dde3      	ble.n	8c30 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3b8>
    8c68:	e7e1      	b.n	8c2e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3b6>
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    8c6a:	2700      	movs	r7, #0
    8c6c:	e005      	b.n	8c7a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x402>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8c6e:	4644      	mov	r4, r8
    8c70:	e00e      	b.n	8c90 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x418>
    8c72:	4644      	mov	r4, r8
    8c74:	e00c      	b.n	8c90 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x418>
        current->first_created = i;
    8c76:	6099      	str	r1, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    8c78:	3701      	adds	r7, #1
    return data_ - ReadScalar<soffset_t>(data_);
    8c7a:	6813      	ldr	r3, [r2, #0]
    8c7c:	1ac3      	subs	r3, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c7e:	881c      	ldrh	r4, [r3, #0]
    8c80:	2c08      	cmp	r4, #8
    8c82:	ddf4      	ble.n	8c6e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3f6>
    8c84:	891b      	ldrh	r3, [r3, #8]
    auto p = data_ + field_offset;
    8c86:	18c4      	adds	r4, r0, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8c88:	2b00      	cmp	r3, #0
    8c8a:	d0f2      	beq.n	8c72 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3fa>
    8c8c:	58c3      	ldr	r3, [r0, r3]
    8c8e:	441c      	add	r4, r3
    8c90:	6823      	ldr	r3, [r4, #0]
    8c92:	42bb      	cmp	r3, r7
    8c94:	d90d      	bls.n	8cb2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x43a>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8c96:	eb04 0487 	add.w	r4, r4, r7, lsl #2
      AllocationInfo* current = &info_[tensor_index];
    8c9a:	6863      	ldr	r3, [r4, #4]
    8c9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8ca0:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
      if ((current->first_created == -1) || (current->first_created > i)) {
    8ca4:	689c      	ldr	r4, [r3, #8]
    8ca6:	f1b4 3fff 	cmp.w	r4, #4294967295
    8caa:	d0e4      	beq.n	8c76 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3fe>
    8cac:	42a1      	cmp	r1, r4
    8cae:	dae3      	bge.n	8c78 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x400>
    8cb0:	e7e1      	b.n	8c76 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3fe>
    8cb2:	3d04      	subs	r5, #4
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
    8cb4:	3901      	subs	r1, #1
    8cb6:	d4a2      	bmi.n	8bfe <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x386>
    return data_ - ReadScalar<soffset_t>(data_);
    8cb8:	f8da 3000 	ldr.w	r3, [sl]
    8cbc:	ebab 0303 	sub.w	r3, fp, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8cc0:	881a      	ldrh	r2, [r3, #0]
    8cc2:	2a0a      	cmp	r2, #10
    8cc4:	dda4      	ble.n	8c10 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x398>
    8cc6:	895a      	ldrh	r2, [r3, #10]
    auto p = data_ + field_offset;
    8cc8:	eb0b 0302 	add.w	r3, fp, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8ccc:	2a00      	cmp	r2, #0
    8cce:	d0a1      	beq.n	8c14 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x39c>
    8cd0:	f85b 2002 	ldr.w	r2, [fp, r2]
    8cd4:	4413      	add	r3, r2
    FLATBUFFERS_ASSERT(i < size());
    8cd6:	681a      	ldr	r2, [r3, #0]
    8cd8:	4291      	cmp	r1, r2
    8cda:	d29d      	bcs.n	8c18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3a0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8cdc:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    8cde:	195a      	adds	r2, r3, r5
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8ce0:	595b      	ldr	r3, [r3, r5]
    8ce2:	441a      	add	r2, r3
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    8ce4:	2700      	movs	r7, #0
    return data_ - ReadScalar<soffset_t>(data_);
    8ce6:	4610      	mov	r0, r2
    8ce8:	e7a3      	b.n	8c32 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3ba>
        (current->first_created == -1) && (current->last_used != -1);
    8cea:	68c8      	ldr	r0, [r1, #12]
    8cec:	f1b0 3fff 	cmp.w	r0, #4294967295
    8cf0:	d00e      	beq.n	8d10 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x498>
      current->needs_allocating = false;
    8cf2:	750d      	strb	r5, [r1, #20]
  for (size_t i = 0; i < tensor_count_; ++i) {
    8cf4:	3201      	adds	r2, #1
    8cf6:	3118      	adds	r1, #24
    8cf8:	4297      	cmp	r7, r2
    8cfa:	f000 8098 	beq.w	8e2e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x5b6>
    AllocationInfo* current = &info_[i];
    8cfe:	460c      	mov	r4, r1
        (current->first_created == -1) && (current->last_used != -1);
    8d00:	688b      	ldr	r3, [r1, #8]
    8d02:	f1b3 3fff 	cmp.w	r3, #4294967295
    8d06:	d0f0      	beq.n	8cea <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x472>
        ((current->first_created == -1) || (current->last_used == -1));
    8d08:	68c8      	ldr	r0, [r1, #12]
    8d0a:	f1b0 3fff 	cmp.w	r0, #4294967295
    8d0e:	d1f1      	bne.n	8cf4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x47c>
    if (has_partial_lifetime && current->needs_allocating) {
    8d10:	7d20      	ldrb	r0, [r4, #20]
    8d12:	2800      	cmp	r0, #0
    8d14:	d0ee      	beq.n	8cf4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x47c>
      TF_LITE_REPORT_ERROR(
    8d16:	68e1      	ldr	r1, [r4, #12]
    8d18:	9100      	str	r1, [sp, #0]
    8d1a:	4968      	ldr	r1, [pc, #416]	; (8ebc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x644>)
    8d1c:	9805      	ldr	r0, [sp, #20]
    8d1e:	4c68      	ldr	r4, [pc, #416]	; (8ec0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x648>)
    8d20:	47a0      	blx	r4
    TF_LITE_ENSURE_STATUS(builder.AddTensors(subgraph, offline_planner_offsets,
    8d22:	2401      	movs	r4, #1
    8d24:	e60d      	b.n	8942 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xca>
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    8d26:	9b03      	ldr	r3, [sp, #12]
    8d28:	6898      	ldr	r0, [r3, #8]
    8d2a:	4b66      	ldr	r3, [pc, #408]	; (8ec4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x64c>)
    8d2c:	9301      	str	r3, [sp, #4]
    8d2e:	f240 338f 	movw	r3, #911	; 0x38f
    8d32:	9300      	str	r3, [sp, #0]
    8d34:	4b64      	ldr	r3, [pc, #400]	; (8ec8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x650>)
    8d36:	4a65      	ldr	r2, [pc, #404]	; (8ecc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x654>)
    8d38:	4601      	mov	r1, r0
    8d3a:	4c65      	ldr	r4, [pc, #404]	; (8ed0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x658>)
    8d3c:	47a0      	blx	r4
    8d3e:	2401      	movs	r4, #1
    8d40:	e5ff      	b.n	8942 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xca>
        TF_LITE_ENSURE_STATUS(
    8d42:	68a3      	ldr	r3, [r4, #8]
    8d44:	68e1      	ldr	r1, [r4, #12]
    8d46:	9100      	str	r1, [sp, #0]
    8d48:	9913      	ldr	r1, [sp, #76]	; 0x4c
    8d4a:	688e      	ldr	r6, [r1, #8]
    8d4c:	4651      	mov	r1, sl
    8d4e:	a813      	add	r0, sp, #76	; 0x4c
    8d50:	47b0      	blx	r6
    8d52:	2800      	cmp	r0, #0
    8d54:	f040 80d0 	bne.w	8ef8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x680>
  for (size_t i = 0; i < allocation_info_size; ++i) {
    8d58:	3501      	adds	r5, #1
    8d5a:	3418      	adds	r4, #24
    8d5c:	42af      	cmp	r7, r5
    8d5e:	f000 80cd 	beq.w	8efc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x684>
    if (current->needs_allocating) {
    8d62:	7d23      	ldrb	r3, [r4, #20]
    8d64:	2b00      	cmp	r3, #0
    8d66:	d0f7      	beq.n	8d58 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4e0>
          AlignSizeUp(current->bytes, kBufferAlignment);
    8d68:	4659      	mov	r1, fp
    8d6a:	6820      	ldr	r0, [r4, #0]
    8d6c:	47c0      	blx	r8
    8d6e:	4602      	mov	r2, r0
      if (current->offline_offset == kOnlinePlannedBuffer) {
    8d70:	6921      	ldr	r1, [r4, #16]
    8d72:	f1b1 3fff 	cmp.w	r1, #4294967295
    8d76:	d0e4      	beq.n	8d42 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4ca>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
    8d78:	68a3      	ldr	r3, [r4, #8]
    8d7a:	9101      	str	r1, [sp, #4]
    8d7c:	68e1      	ldr	r1, [r4, #12]
    8d7e:	9100      	str	r1, [sp, #0]
    8d80:	4651      	mov	r1, sl
    8d82:	a813      	add	r0, sp, #76	; 0x4c
    8d84:	47c8      	blx	r9
    8d86:	2800      	cmp	r0, #0
    8d88:	d0e6      	beq.n	8d58 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4e0>
    8d8a:	4604      	mov	r4, r0
    8d8c:	e00b      	b.n	8da6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x52e>
      TF_LITE_REPORT_ERROR(
    8d8e:	9b03      	ldr	r3, [sp, #12]
    8d90:	689d      	ldr	r5, [r3, #8]
    8d92:	a813      	add	r0, sp, #76	; 0x4c
    8d94:	4b4f      	ldr	r3, [pc, #316]	; (8ed4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x65c>)
    8d96:	4798      	blx	r3
    8d98:	4623      	mov	r3, r4
    8d9a:	4602      	mov	r2, r0
    8d9c:	494e      	ldr	r1, [pc, #312]	; (8ed8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x660>)
    8d9e:	4628      	mov	r0, r5
    8da0:	4c47      	ldr	r4, [pc, #284]	; (8ec0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x648>)
    8da2:	47a0      	blx	r4
      return kTfLiteError;
    8da4:	2401      	movs	r4, #1
    TF_LITE_ENSURE_STATUS(
    8da6:	a813      	add	r0, sp, #76	; 0x4c
    8da8:	4b4c      	ldr	r3, [pc, #304]	; (8edc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x664>)
    8daa:	4798      	blx	r3
    8dac:	e5c9      	b.n	8942 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xca>
      TF_LITE_ENSURE_STATUS(
    8dae:	4604      	mov	r4, r0
    8db0:	e7f9      	b.n	8da6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x52e>
  for (size_t i = 0; i < allocation_info_size; ++i) {
    8db2:	3401      	adds	r4, #1
    8db4:	3618      	adds	r6, #24
    8db6:	9b07      	ldr	r3, [sp, #28]
    8db8:	42a3      	cmp	r3, r4
    8dba:	f000 80c8 	beq.w	8f4e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x6d6>
    if (current->needs_allocating) {
    8dbe:	7d33      	ldrb	r3, [r6, #20]
    8dc0:	2b00      	cmp	r3, #0
    8dc2:	d0f6      	beq.n	8db2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x53a>
      int offset = -1;
    8dc4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
      TF_LITE_ENSURE_STATUS(
    8dc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8dca:	f8d3 a014 	ldr.w	sl, [r3, #20]
    8dce:	ab0c      	add	r3, sp, #48	; 0x30
    8dd0:	462a      	mov	r2, r5
    8dd2:	4659      	mov	r1, fp
    8dd4:	a813      	add	r0, sp, #76	; 0x4c
    8dd6:	47d0      	blx	sl
    8dd8:	2800      	cmp	r0, #0
    8dda:	d1e8      	bne.n	8dae <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x536>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
    8ddc:	6872      	ldr	r2, [r6, #4]
    8dde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8de0:	444b      	add	r3, r9
    8de2:	6013      	str	r3, [r2, #0]
      ++planner_index;
    8de4:	3501      	adds	r5, #1
    8de6:	e7e4      	b.n	8db2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x53a>
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
    8de8:	9b03      	ldr	r3, [sp, #12]
    8dea:	6898      	ldr	r0, [r3, #8]
    8dec:	4b3c      	ldr	r3, [pc, #240]	; (8ee0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x668>)
    8dee:	9301      	str	r3, [sp, #4]
    8df0:	f44f 736a 	mov.w	r3, #936	; 0x3a8
    8df4:	9300      	str	r3, [sp, #0]
    8df6:	4b34      	ldr	r3, [pc, #208]	; (8ec8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x650>)
    8df8:	4a34      	ldr	r2, [pc, #208]	; (8ecc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x654>)
    8dfa:	4601      	mov	r1, r0
    8dfc:	4c34      	ldr	r4, [pc, #208]	; (8ed0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x658>)
    8dfe:	47a0      	blx	r4
    8e00:	2401      	movs	r4, #1
    8e02:	e7d0      	b.n	8da6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x52e>
    const int32_t* offline_planner_offsets = nullptr;
    8e04:	2300      	movs	r3, #0
    8e06:	9302      	str	r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(builder.AddTensors(subgraph, offline_planner_offsets,
    8e08:	9b08      	ldr	r3, [sp, #32]
    8e0a:	689a      	ldr	r2, [r3, #8]
  for (size_t i = 0; i < tensor_count_; ++i) {
    8e0c:	9b04      	ldr	r3, [sp, #16]
    8e0e:	2b00      	cmp	r3, #0
    8e10:	f43f ae19 	beq.w	8a46 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1ce>
    8e14:	3204      	adds	r2, #4
    8e16:	4633      	mov	r3, r6
    8e18:	2100      	movs	r1, #0
    current->first_created = -1;
    8e1a:	f04f 35ff 	mov.w	r5, #4294967295
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
    8e1e:	468c      	mov	ip, r1
    8e20:	f8dd e010 	ldr.w	lr, [sp, #16]
    8e24:	9f02      	ldr	r7, [sp, #8]
    8e26:	e653      	b.n	8ad0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x258>
    const int32_t* offline_planner_offsets = nullptr;
    8e28:	2300      	movs	r3, #0
    8e2a:	9302      	str	r3, [sp, #8]
    8e2c:	e7ec      	b.n	8e08 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x590>
    TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_handles_));
    8e2e:	9b03      	ldr	r3, [sp, #12]
    8e30:	6919      	ldr	r1, [r3, #16]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    8e32:	9a04      	ldr	r2, [sp, #16]
    8e34:	9807      	ldr	r0, [sp, #28]
    8e36:	4282      	cmp	r2, r0
    8e38:	d215      	bcs.n	8e66 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x5ee>
    8e3a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    8e3e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    8e42:	9a06      	ldr	r2, [sp, #24]
    8e44:	4432      	add	r2, r6
    current->needs_allocating = true;
    8e46:	2501      	movs	r5, #1
    current->offline_offset = kOnlinePlannedBuffer;
    8e48:	f04f 34ff 	mov.w	r4, #4294967295
    current->output_ptr = reinterpret_cast<void**>(&handle->data);
    8e4c:	6059      	str	r1, [r3, #4]
    current->bytes = handle->bytes;
    8e4e:	6848      	ldr	r0, [r1, #4]
    8e50:	6018      	str	r0, [r3, #0]
    current->first_created = handle->node_idx;
    8e52:	6888      	ldr	r0, [r1, #8]
    8e54:	6098      	str	r0, [r3, #8]
    current->last_used = handle->node_idx;
    8e56:	6888      	ldr	r0, [r1, #8]
    8e58:	60d8      	str	r0, [r3, #12]
    current->needs_allocating = true;
    8e5a:	751d      	strb	r5, [r3, #20]
    current->offline_offset = kOnlinePlannedBuffer;
    8e5c:	611c      	str	r4, [r3, #16]
    8e5e:	310c      	adds	r1, #12
    8e60:	3318      	adds	r3, #24
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    8e62:	4293      	cmp	r3, r2
    8e64:	d1f2      	bne.n	8e4c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x5d4>
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
    8e66:	a80d      	add	r0, sp, #52	; 0x34
    8e68:	4b1e      	ldr	r3, [pc, #120]	; (8ee4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x66c>)
    8e6a:	4798      	blx	r3
    8e6c:	4604      	mov	r4, r0
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
    8e6e:	2201      	movs	r2, #1
    8e70:	4601      	mov	r1, r0
    8e72:	a80d      	add	r0, sp, #52	; 0x34
    8e74:	4b1c      	ldr	r3, [pc, #112]	; (8ee8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x670>)
    8e76:	4798      	blx	r3
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    8e78:	4601      	mov	r1, r0
    8e7a:	2800      	cmp	r0, #0
    8e7c:	f43f af53 	beq.w	8d26 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4ae>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    8e80:	4622      	mov	r2, r4
    8e82:	a813      	add	r0, sp, #76	; 0x4c
    8e84:	4b19      	ldr	r3, [pc, #100]	; (8eec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x674>)
    8e86:	4798      	blx	r3
    TF_LITE_ENSURE_STATUS(
    8e88:	9b03      	ldr	r3, [sp, #12]
    8e8a:	f8d3 a008 	ldr.w	sl, [r3, #8]
  for (size_t i = 0; i < allocation_info_size; ++i) {
    8e8e:	9b07      	ldr	r3, [sp, #28]
    8e90:	2b00      	cmp	r3, #0
    8e92:	d04d      	beq.n	8f30 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x6b8>
    8e94:	4634      	mov	r4, r6
    8e96:	2500      	movs	r5, #0
          AlignSizeUp(current->bytes, kBufferAlignment);
    8e98:	f04f 0b10 	mov.w	fp, #16
    8e9c:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8ef0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x678>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
    8ea0:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8ef4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x67c>
    8ea4:	461f      	mov	r7, r3
    8ea6:	9602      	str	r6, [sp, #8]
    8ea8:	e75b      	b.n	8d62 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4ea>
    8eaa:	bf00      	nop
    8eac:	0003ac5c 	.word	0x0003ac5c
    8eb0:	0003c5a8 	.word	0x0003c5a8
    8eb4:	0003ac68 	.word	0x0003ac68
    8eb8:	000173ad 	.word	0x000173ad
    8ebc:	0003cb7c 	.word	0x0003cb7c
    8ec0:	000012f9 	.word	0x000012f9
    8ec4:	0003cc10 	.word	0x0003cc10
    8ec8:	0003cbe0 	.word	0x0003cbe0
    8ecc:	0003ad08 	.word	0x0003ad08
    8ed0:	00001317 	.word	0x00001317
    8ed4:	00007c55 	.word	0x00007c55
    8ed8:	0003cc2c 	.word	0x0003cc2c
    8edc:	00007901 	.word	0x00007901
    8ee0:	0003cc84 	.word	0x0003cc84
    8ee4:	000098f9 	.word	0x000098f9
    8ee8:	000097ed 	.word	0x000097ed
    8eec:	000079ad 	.word	0x000079ad
    8ef0:	000077fd 	.word	0x000077fd
    8ef4:	000079ed 	.word	0x000079ed
        TF_LITE_ENSURE_STATUS(
    8ef8:	4604      	mov	r4, r0
    8efa:	e754      	b.n	8da6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x52e>
    8efc:	9e02      	ldr	r6, [sp, #8]
        memory_allocator_->GetAvailableMemory();
    8efe:	9b03      	ldr	r3, [sp, #12]
    8f00:	6858      	ldr	r0, [r3, #4]
    8f02:	4b1e      	ldr	r3, [pc, #120]	; (8f7c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x704>)
    8f04:	4798      	blx	r3
    8f06:	4604      	mov	r4, r0
    if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
    8f08:	a813      	add	r0, sp, #76	; 0x4c
    8f0a:	4b1d      	ldr	r3, [pc, #116]	; (8f80 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x708>)
    8f0c:	4798      	blx	r3
    8f0e:	4284      	cmp	r4, r0
    8f10:	f4ff af3d 	bcc.w	8d8e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x516>
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
    8f14:	9a03      	ldr	r2, [sp, #12]
    8f16:	f8d2 b008 	ldr.w	fp, [r2, #8]
    8f1a:	6850      	ldr	r0, [r2, #4]
    8f1c:	4b19      	ldr	r3, [pc, #100]	; (8f84 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x70c>)
    8f1e:	4798      	blx	r3
    8f20:	4681      	mov	r9, r0
  for (size_t i = 0; i < allocation_info_size; ++i) {
    8f22:	9b07      	ldr	r3, [sp, #28]
    8f24:	b19b      	cbz	r3, 8f4e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x6d6>
    8f26:	2500      	movs	r5, #0
    8f28:	462c      	mov	r4, r5
      int offset = -1;
    8f2a:	f04f 38ff 	mov.w	r8, #4294967295
    8f2e:	e746      	b.n	8dbe <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x546>
        memory_allocator_->GetAvailableMemory();
    8f30:	9b03      	ldr	r3, [sp, #12]
    8f32:	6858      	ldr	r0, [r3, #4]
    8f34:	4b11      	ldr	r3, [pc, #68]	; (8f7c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x704>)
    8f36:	4798      	blx	r3
    8f38:	4604      	mov	r4, r0
    if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
    8f3a:	a813      	add	r0, sp, #76	; 0x4c
    8f3c:	4b10      	ldr	r3, [pc, #64]	; (8f80 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x708>)
    8f3e:	4798      	blx	r3
    8f40:	4284      	cmp	r4, r0
    8f42:	f4ff af24 	bcc.w	8d8e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x516>
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
    8f46:	9b03      	ldr	r3, [sp, #12]
    8f48:	6858      	ldr	r0, [r3, #4]
    8f4a:	4b0e      	ldr	r3, [pc, #56]	; (8f84 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x70c>)
    8f4c:	4798      	blx	r3
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
    8f4e:	9b03      	ldr	r3, [sp, #12]
    8f50:	685c      	ldr	r4, [r3, #4]
                                            /*alignment=*/1);
    8f52:	6823      	ldr	r3, [r4, #0]
    8f54:	689d      	ldr	r5, [r3, #8]
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
    8f56:	a813      	add	r0, sp, #76	; 0x4c
    8f58:	4b09      	ldr	r3, [pc, #36]	; (8f80 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x708>)
    8f5a:	4798      	blx	r3
                                            /*alignment=*/1);
    8f5c:	2201      	movs	r2, #1
    8f5e:	4601      	mov	r1, r0
    8f60:	4620      	mov	r0, r4
    8f62:	47a8      	blx	r5
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
    8f64:	2800      	cmp	r0, #0
    8f66:	f43f af3f 	beq.w	8de8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x570>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    8f6a:	a813      	add	r0, sp, #76	; 0x4c
    8f6c:	4b06      	ldr	r3, [pc, #24]	; (8f88 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x710>)
    8f6e:	4798      	blx	r3
                                        memory_allocator_->GetTail());
    8f70:	a80d      	add	r0, sp, #52	; 0x34
    8f72:	4b06      	ldr	r3, [pc, #24]	; (8f8c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x714>)
    8f74:	4798      	blx	r3
  return kTfLiteOk;
    8f76:	2400      	movs	r4, #0
    8f78:	e4e6      	b.n	8948 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xd0>
    8f7a:	bf00      	nop
    8f7c:	000098f9 	.word	0x000098f9
    8f80:	00007c55 	.word	0x00007c55
    8f84:	000098f1 	.word	0x000098f1
    8f88:	00007901 	.word	0x00007901
    8f8c:	000097e9 	.word	0x000097e9

00008f90 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
#include "tensorflow/lite/micro/micro_string.h"
#endif

namespace tflite {

int MicroErrorReporter::Report(const char* format, va_list args) {
    8f90:	b510      	push	{r4, lr}
    8f92:	b0c0      	sub	sp, #256	; 0x100
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
    8f94:	4613      	mov	r3, r2
    8f96:	460a      	mov	r2, r1
    8f98:	f44f 7180 	mov.w	r1, #256	; 0x100
    8f9c:	4668      	mov	r0, sp
    8f9e:	4c05      	ldr	r4, [pc, #20]	; (8fb4 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x24>)
    8fa0:	47a0      	blx	r4
  DebugLog(log_buffer);
    8fa2:	4668      	mov	r0, sp
    8fa4:	4c04      	ldr	r4, [pc, #16]	; (8fb8 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x28>)
    8fa6:	47a0      	blx	r4
  DebugLog("\r\n");
    8fa8:	4804      	ldr	r0, [pc, #16]	; (8fbc <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x2c>)
    8faa:	47a0      	blx	r4
#endif
  return 0;
}
    8fac:	2000      	movs	r0, #0
    8fae:	b040      	add	sp, #256	; 0x100
    8fb0:	bd10      	pop	{r4, pc}
    8fb2:	bf00      	nop
    8fb4:	000094e5 	.word	0x000094e5
    8fb8:	00000c1d 	.word	0x00000c1d
    8fbc:	0003ccbc 	.word	0x0003ccbc

00008fc0 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    8fc0:	6943      	ldr	r3, [r0, #20]
    8fc2:	2b20      	cmp	r3, #32
    8fc4:	d007      	beq.n	8fd6 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    8fc6:	b2db      	uxtb	r3, r3
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    8fc8:	2b7e      	cmp	r3, #126	; 0x7e
  return EnumNamesBuiltinOperator()[index];
    8fca:	bfda      	itte	le
    8fcc:	4a03      	ldrle	r2, [pc, #12]	; (8fdc <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x1c>)
    8fce:	f852 0023 	ldrle.w	r0, [r2, r3, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    8fd2:	4803      	ldrgt	r0, [pc, #12]	; (8fe0 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x20>)
    return registration->custom_name;
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
  }
}
    8fd4:	4770      	bx	lr
    return registration->custom_name;
    8fd6:	6980      	ldr	r0, [r0, #24]
    8fd8:	4770      	bx	lr
    8fda:	bf00      	nop
    8fdc:	0003addc 	.word	0x0003addc
    8fe0:	0003b064 	.word	0x0003b064

00008fe4 <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextjPPv>:
}  // namespace

namespace internal {

TfLiteStatus ContextHelper::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                     size_t bytes, void** ptr) {
    8fe4:	b508      	push	{r3, lr}
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
      ->allocator_->AllocatePersistentBuffer(bytes, ptr);
    8fe6:	68c3      	ldr	r3, [r0, #12]
    8fe8:	6818      	ldr	r0, [r3, #0]
    8fea:	4b01      	ldr	r3, [pc, #4]	; (8ff0 <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextjPPv+0xc>)
    8fec:	4798      	blx	r3
}
    8fee:	bd08      	pop	{r3, pc}
    8ff0:	00008661 	.word	0x00008661

00008ff4 <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus ContextHelper::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                        size_t bytes,
                                                        int* buffer_idx) {
    8ff4:	b510      	push	{r4, lr}
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
    8ff6:	68c0      	ldr	r0, [r0, #12]
  return helper->allocator_->RequestScratchBufferInArena(
      helper->current_node_idx_, bytes, buffer_idx);
    8ff8:	4613      	mov	r3, r2
    8ffa:	460a      	mov	r2, r1
    8ffc:	6881      	ldr	r1, [r0, #8]
    8ffe:	6800      	ldr	r0, [r0, #0]
    9000:	4c01      	ldr	r4, [pc, #4]	; (9008 <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x14>)
    9002:	47a0      	blx	r4
}
    9004:	bd10      	pop	{r4, pc}
    9006:	bf00      	nop
    9008:	00008691 	.word	0x00008691

0000900c <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti>:

void* ContextHelper::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
    900c:	b508      	push	{r3, lr}
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
      ->allocator_->GetScratchBuffer(buffer_idx);
    900e:	68c3      	ldr	r3, [r0, #12]
    9010:	6818      	ldr	r0, [r3, #0]
    9012:	4b01      	ldr	r3, [pc, #4]	; (9018 <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti+0xc>)
    9014:	4798      	blx	r3
}
    9016:	bd08      	pop	{r3, pc}
    9018:	00008705 	.word	0x00008705

0000901c <_ZN6tflite8internal13ContextHelper13ReportOpErrorEP13TfLiteContextPKcz>:

void ContextHelper::ReportOpError(struct TfLiteContext* context,
                                  const char* format, ...) {
    901c:	b40e      	push	{r1, r2, r3}
    901e:	b500      	push	{lr}
    9020:	b082      	sub	sp, #8
    9022:	aa03      	add	r2, sp, #12
    9024:	f852 1b04 	ldr.w	r1, [r2], #4
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
    9028:	68c3      	ldr	r3, [r0, #12]
  va_list args;
  va_start(args, format);
    902a:	9201      	str	r2, [sp, #4]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
    902c:	6858      	ldr	r0, [r3, #4]
    902e:	6803      	ldr	r3, [r0, #0]
    9030:	689b      	ldr	r3, [r3, #8]
    9032:	4798      	blx	r3
  va_end(args);
}
    9034:	b002      	add	sp, #8
    9036:	f85d eb04 	ldr.w	lr, [sp], #4
    903a:	b003      	add	sp, #12
    903c:	4770      	bx	lr

0000903e <_ZN6tflite16MicroInterpreterD1Ev>:
      initialization_status_(kTfLiteError),
      context_helper_(error_reporter_, &allocator_) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
    903e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9042:	4606      	mov	r6, r0
  if (node_and_registrations_ != nullptr) {
    9044:	6803      	ldr	r3, [r0, #0]
    9046:	b333      	cbz	r3, 9096 <_ZN6tflite16MicroInterpreterD1Ev+0x58>
    9048:	2500      	movs	r5, #0
    904a:	462c      	mov	r4, r5
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    904c:	46a8      	mov	r8, r5
      const TfLiteRegistration* registration =
          node_and_registrations_[i].registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
        registration->free(&context_, node->user_data);
    904e:	f100 0710 	add.w	r7, r0, #16
    9052:	e005      	b.n	9060 <_ZN6tflite16MicroInterpreterD1Ev+0x22>
    9054:	4643      	mov	r3, r8
    9056:	e00f      	b.n	9078 <_ZN6tflite16MicroInterpreterD1Ev+0x3a>
    9058:	4643      	mov	r3, r8
    905a:	e00d      	b.n	9078 <_ZN6tflite16MicroInterpreterD1Ev+0x3a>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    905c:	3401      	adds	r4, #1
    905e:	3528      	adds	r5, #40	; 0x28
    9060:	6f32      	ldr	r2, [r6, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    9062:	6813      	ldr	r3, [r2, #0]
    9064:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9066:	8819      	ldrh	r1, [r3, #0]
    9068:	290a      	cmp	r1, #10
    906a:	ddf3      	ble.n	9054 <_ZN6tflite16MicroInterpreterD1Ev+0x16>
    906c:	8959      	ldrh	r1, [r3, #10]
    auto p = data_ + field_offset;
    906e:	1853      	adds	r3, r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9070:	2900      	cmp	r1, #0
    9072:	d0f1      	beq.n	9058 <_ZN6tflite16MicroInterpreterD1Ev+0x1a>
    9074:	5852      	ldr	r2, [r2, r1]
    9076:	4413      	add	r3, r2
    9078:	681b      	ldr	r3, [r3, #0]
    907a:	429c      	cmp	r4, r3
    907c:	d20b      	bcs.n	9096 <_ZN6tflite16MicroInterpreterD1Ev+0x58>
      TfLiteNode* node = &(node_and_registrations_[i].node);
    907e:	6833      	ldr	r3, [r6, #0]
    9080:	442b      	add	r3, r5
          node_and_registrations_[i].registration;
    9082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      if (registration != nullptr && registration->free != nullptr) {
    9084:	2a00      	cmp	r2, #0
    9086:	d0e9      	beq.n	905c <_ZN6tflite16MicroInterpreterD1Ev+0x1e>
    9088:	6852      	ldr	r2, [r2, #4]
    908a:	2a00      	cmp	r2, #0
    908c:	d0e6      	beq.n	905c <_ZN6tflite16MicroInterpreterD1Ev+0x1e>
        registration->free(&context_, node->user_data);
    908e:	6919      	ldr	r1, [r3, #16]
    9090:	4638      	mov	r0, r7
    9092:	4790      	blx	r2
    9094:	e7e2      	b.n	905c <_ZN6tflite16MicroInterpreterD1Ev+0x1e>
      }
    }
  }
}
    9096:	4630      	mov	r0, r6
    9098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000909c <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>:

void MicroInterpreter::Init(tflite::Profiler* profiler) {
    909c:	b510      	push	{r4, lr}
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs =
      model_->subgraphs();
    909e:	6842      	ldr	r2, [r0, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    90a0:	6813      	ldr	r3, [r2, #0]
    90a2:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    90a4:	881c      	ldrh	r4, [r3, #0]
    90a6:	2c08      	cmp	r4, #8
    90a8:	dd10      	ble.n	90cc <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x30>
    90aa:	891c      	ldrh	r4, [r3, #8]
    auto p = data_ + field_offset;
    90ac:	1913      	adds	r3, r2, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    90ae:	b17c      	cbz	r4, 90d0 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x34>
    90b0:	5912      	ldr	r2, [r2, r4]
    90b2:	4413      	add	r3, r2
  if (subgraphs->size() != 1) {
    90b4:	681a      	ldr	r2, [r3, #0]
    90b6:	2a01      	cmp	r2, #1
    90b8:	d00c      	beq.n	90d4 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x38>
    90ba:	4604      	mov	r4, r0
    TF_LITE_REPORT_ERROR(error_reporter_,
    90bc:	490d      	ldr	r1, [pc, #52]	; (90f4 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x58>)
    90be:	68c0      	ldr	r0, [r0, #12]
    90c0:	4b0d      	ldr	r3, [pc, #52]	; (90f8 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x5c>)
    90c2:	4798      	blx	r3
                         "Only 1 subgraph is currently supported.\n");
    initialization_status_ = kTfLiteError;
    90c4:	2301      	movs	r3, #1
    90c6:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
    return;
    90ca:	bd10      	pop	{r4, pc}
    90cc:	2300      	movs	r3, #0
    90ce:	e7f1      	b.n	90b4 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x18>
    90d0:	2300      	movs	r3, #0
    90d2:	e7ef      	b.n	90b4 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x18>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    90d4:	1d1a      	adds	r2, r3, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    90d6:	685b      	ldr	r3, [r3, #4]
    90d8:	4413      	add	r3, r2
  }
  subgraph_ = (*subgraphs)[0];
    90da:	6703      	str	r3, [r0, #112]	; 0x70

  context_.impl_ = static_cast<void*>(&context_helper_);
    90dc:	f100 0374 	add.w	r3, r0, #116	; 0x74
    90e0:	61c3      	str	r3, [r0, #28]
  context_.ReportError = context_helper_.ReportOpError;
    90e2:	4b06      	ldr	r3, [pc, #24]	; (90fc <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x60>)
    90e4:	6243      	str	r3, [r0, #36]	; 0x24
  context_.recommended_num_threads = 1;
    90e6:	2301      	movs	r3, #1
    90e8:	6343      	str	r3, [r0, #52]	; 0x34
  context_.profiler = profiler;
    90ea:	6441      	str	r1, [r0, #68]	; 0x44

  initialization_status_ = kTfLiteOk;
    90ec:	2300      	movs	r3, #0
    90ee:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
    90f2:	bd10      	pop	{r4, pc}
    90f4:	0003ca1c 	.word	0x0003ca1c
    90f8:	000012f9 	.word	0x000012f9
    90fc:	0000901d 	.word	0x0000901d

00009100 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>:
MicroInterpreter::MicroInterpreter(const Model* model,
    9100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9102:	4604      	mov	r4, r0
    9104:	461f      	mov	r7, r3
    9106:	9e07      	ldr	r6, [sp, #28]
      context_helper_(error_reporter_, &allocator_) {
    9108:	2500      	movs	r5, #0
    910a:	6005      	str	r5, [r0, #0]
    910c:	6041      	str	r1, [r0, #4]
    910e:	6082      	str	r2, [r0, #8]
    9110:	60c6      	str	r6, [r0, #12]
    9112:	2258      	movs	r2, #88	; 0x58
    9114:	4629      	mov	r1, r5
    9116:	3010      	adds	r0, #16
    9118:	4b0c      	ldr	r3, [pc, #48]	; (914c <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0x4c>)
    911a:	4798      	blx	r3
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
    911c:	4632      	mov	r2, r6
    911e:	9906      	ldr	r1, [sp, #24]
    9120:	4638      	mov	r0, r7
    9122:	4b0b      	ldr	r3, [pc, #44]	; (9150 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0x50>)
    9124:	4798      	blx	r3
      context_helper_(error_reporter_, &allocator_) {
    9126:	66a0      	str	r0, [r4, #104]	; 0x68
    9128:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
    912c:	2301      	movs	r3, #1
    912e:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
    9132:	68e3      	ldr	r3, [r4, #12]
// Check tensorflow/lite/c/common.h for detailed descriptions.
class ContextHelper {
 public:
  explicit ContextHelper(ErrorReporter* error_reporter,
                         MicroAllocator* allocator)
      : allocator_(allocator), error_reporter_(error_reporter) {}
    9134:	6760      	str	r0, [r4, #116]	; 0x74
    9136:	67a3      	str	r3, [r4, #120]	; 0x78
    9138:	f04f 33ff 	mov.w	r3, #4294967295
    913c:	67e3      	str	r3, [r4, #124]	; 0x7c
  Init(profiler);
    913e:	9908      	ldr	r1, [sp, #32]
    9140:	4620      	mov	r0, r4
    9142:	4b04      	ldr	r3, [pc, #16]	; (9154 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0x54>)
    9144:	4798      	blx	r3
}
    9146:	4620      	mov	r0, r4
    9148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    914a:	bf00      	nop
    914c:	0001831d 	.word	0x0001831d
    9150:	00008619 	.word	0x00008619
    9154:	0000909d 	.word	0x0000909d

00009158 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
  for (int32_t i = 0; i < size; ++i) {
    data[i] = flatbuffers::EndianScalar(data[i]);
  }
}

TfLiteStatus MicroInterpreter::AllocateTensors() {
    9158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    915c:	b082      	sub	sp, #8
    915e:	4604      	mov	r4, r0
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
    9160:	f100 0710 	add.w	r7, r0, #16
    9164:	9000      	str	r0, [sp, #0]
    9166:	6883      	ldr	r3, [r0, #8]
    9168:	463a      	mov	r2, r7
    916a:	6841      	ldr	r1, [r0, #4]
    916c:	6e80      	ldr	r0, [r0, #104]	; 0x68
    916e:	4d43      	ldr	r5, [pc, #268]	; (927c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x124>)
    9170:	47a8      	blx	r5
    9172:	b938      	cbnz	r0, 9184 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c>
        CorrectTensorEndianness(thisTensor);
    }
  }

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
    9174:	4b42      	ldr	r3, [pc, #264]	; (9280 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x128>)
    9176:	64a3      	str	r3, [r4, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
    9178:	2600      	movs	r6, #0
    917a:	6526      	str	r6, [r4, #80]	; 0x50
  context_.GetScratchBuffer = nullptr;
    917c:	6566      	str	r6, [r4, #84]	; 0x54
    917e:	46b0      	mov	r8, r6
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9180:	46b1      	mov	r9, r6
    9182:	e01f      	b.n	91c4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x6c>
    TF_LITE_REPORT_ERROR(error_reporter_,
    9184:	493f      	ldr	r1, [pc, #252]	; (9284 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x12c>)
    9186:	68e0      	ldr	r0, [r4, #12]
    9188:	4b3f      	ldr	r3, [pc, #252]	; (9288 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x130>)
    918a:	4798      	blx	r3
    initialization_status_ = kTfLiteError;
    918c:	2001      	movs	r0, #1
    918e:	f884 006d 	strb.w	r0, [r4, #109]	; 0x6d
    return kTfLiteError;
    9192:	e05c      	b.n	924e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf6>
    9194:	5852      	ldr	r2, [r2, r1]
    9196:	4413      	add	r3, r2

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    9198:	681b      	ldr	r3, [r3, #0]
    919a:	429e      	cmp	r6, r3
    919c:	d220      	bcs.n	91e0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x88>
  static void* GetScratchBuffer(TfLiteContext* ctx, int buffer_idx);

  static void ReportOpError(struct TfLiteContext* context, const char* format,
                            ...);

  void SetNodeIndex(int idx) { current_node_idx_ = idx; }
    919e:	67e6      	str	r6, [r4, #124]	; 0x7c
    context_helper_.SetNodeIndex(i);
    auto* node = &(node_and_registrations_[i].node);
    91a0:	6825      	ldr	r5, [r4, #0]
    91a2:	4445      	add	r5, r8
    auto* registration = node_and_registrations_[i].registration;
    91a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    size_t init_data_size;
    const char* init_data;
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    91a6:	695a      	ldr	r2, [r3, #20]
    91a8:	2a20      	cmp	r2, #32
      init_data = reinterpret_cast<const char*>(node->custom_initial_data);
    91aa:	bf07      	ittee	eq
    91ac:	69a9      	ldreq	r1, [r5, #24]
      init_data_size = node->custom_initial_data_size;
    91ae:	69ea      	ldreq	r2, [r5, #28]
    } else {
      init_data = reinterpret_cast<const char*>(node->builtin_data);
    91b0:	6969      	ldrne	r1, [r5, #20]
      init_data_size = 0;
    91b2:	464a      	movne	r2, r9
    }
    if (registration->init) {
    91b4:	681b      	ldr	r3, [r3, #0]
    91b6:	b113      	cbz	r3, 91be <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x66>
      node->user_data =
          registration->init(&context_, init_data, init_data_size);
    91b8:	4638      	mov	r0, r7
    91ba:	4798      	blx	r3
      node->user_data =
    91bc:	6128      	str	r0, [r5, #16]
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    91be:	3601      	adds	r6, #1
    91c0:	f108 0828 	add.w	r8, r8, #40	; 0x28
    91c4:	6f22      	ldr	r2, [r4, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    91c6:	6813      	ldr	r3, [r2, #0]
    91c8:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    91ca:	8819      	ldrh	r1, [r3, #0]
    91cc:	290a      	cmp	r1, #10
    91ce:	dd05      	ble.n	91dc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x84>
    91d0:	8959      	ldrh	r1, [r3, #10]
    auto p = data_ + field_offset;
    91d2:	1853      	adds	r3, r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    91d4:	2900      	cmp	r1, #0
    91d6:	d1dd      	bne.n	9194 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3c>
    91d8:	464b      	mov	r3, r9
    91da:	e7dd      	b.n	9198 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40>
    91dc:	464b      	mov	r3, r9
    91de:	e7db      	b.n	9198 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40>
    91e0:	f04f 33ff 	mov.w	r3, #4294967295
    91e4:	67e3      	str	r3, [r4, #124]	; 0x7c
  }
  context_helper_.SetNodeIndex(-1);

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is available
  // in Prepare stage.
  context_.RequestScratchBufferInArena =
    91e6:	4b29      	ldr	r3, [pc, #164]	; (928c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x134>)
    91e8:	6523      	str	r3, [r4, #80]	; 0x50
    91ea:	2600      	movs	r6, #0
      context_helper_.RequestScratchBufferInArena;
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    91ec:	4635      	mov	r5, r6
    91ee:	46b0      	mov	r8, r6
    91f0:	e012      	b.n	9218 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xc0>
    91f2:	5852      	ldr	r2, [r2, r1]
    91f4:	4413      	add	r3, r2
    91f6:	681b      	ldr	r3, [r3, #0]
    91f8:	429d      	cmp	r5, r3
    91fa:	d22b      	bcs.n	9254 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xfc>
    91fc:	67e5      	str	r5, [r4, #124]	; 0x7c
    // Set node idx to annotate the lifetime for scratch buffers.
    context_helper_.SetNodeIndex(i);
    auto* node = &(node_and_registrations_[i].node);
    91fe:	6821      	ldr	r1, [r4, #0]
    9200:	4431      	add	r1, r6
    auto* registration = node_and_registrations_[i].registration;
    9202:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
    if (registration->prepare) {
    9206:	f8d9 3008 	ldr.w	r3, [r9, #8]
    920a:	b11b      	cbz	r3, 9214 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xbc>
      TfLiteStatus prepare_status = registration->prepare(&context_, node);
    920c:	4638      	mov	r0, r7
    920e:	4798      	blx	r3
      if (prepare_status != kTfLiteOk) {
    9210:	4682      	mov	sl, r0
    9212:	b978      	cbnz	r0, 9234 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xdc>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    9214:	3501      	adds	r5, #1
    9216:	3628      	adds	r6, #40	; 0x28
    9218:	6f22      	ldr	r2, [r4, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    921a:	6813      	ldr	r3, [r2, #0]
    921c:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    921e:	8819      	ldrh	r1, [r3, #0]
    9220:	290a      	cmp	r1, #10
    9222:	dd05      	ble.n	9230 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xd8>
    9224:	8959      	ldrh	r1, [r3, #10]
    auto p = data_ + field_offset;
    9226:	1853      	adds	r3, r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9228:	2900      	cmp	r1, #0
    922a:	d1e2      	bne.n	91f2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x9a>
    922c:	4643      	mov	r3, r8
    922e:	e7e2      	b.n	91f6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x9e>
    9230:	4643      	mov	r3, r8
    9232:	e7e0      	b.n	91f6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x9e>
        TF_LITE_REPORT_ERROR(
    9234:	4648      	mov	r0, r9
    9236:	4b16      	ldr	r3, [pc, #88]	; (9290 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x138>)
    9238:	4798      	blx	r3
    923a:	68e4      	ldr	r4, [r4, #12]
    923c:	f8cd a000 	str.w	sl, [sp]
    9240:	462b      	mov	r3, r5
    9242:	4602      	mov	r2, r0
    9244:	4913      	ldr	r1, [pc, #76]	; (9294 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x13c>)
    9246:	4620      	mov	r0, r4
    9248:	4c0f      	ldr	r4, [pc, #60]	; (9288 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x130>)
    924a:	47a0      	blx	r4
            error_reporter_,
            "Node %s (number %df) failed to prepare with status %d",
            OpNameFromRegistration(registration), i, prepare_status);
        return kTfLiteError;
    924c:	2001      	movs	r0, #1

  TF_LITE_ENSURE_OK(&context_,
                    allocator_.FinishModelAllocation(model_, &context_));
  tensors_allocated_ = true;
  return kTfLiteOk;
}
    924e:	b002      	add	sp, #8
    9250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9254:	f04f 33ff 	mov.w	r3, #4294967295
    9258:	67e3      	str	r3, [r4, #124]	; 0x7c
  context_.AllocatePersistentBuffer = nullptr;
    925a:	2300      	movs	r3, #0
    925c:	64a3      	str	r3, [r4, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
    925e:	6523      	str	r3, [r4, #80]	; 0x50
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
    9260:	4b0d      	ldr	r3, [pc, #52]	; (9298 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x140>)
    9262:	6563      	str	r3, [r4, #84]	; 0x54
  TF_LITE_ENSURE_OK(&context_,
    9264:	463a      	mov	r2, r7
    9266:	6861      	ldr	r1, [r4, #4]
    9268:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    926a:	4b0c      	ldr	r3, [pc, #48]	; (929c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x144>)
    926c:	4798      	blx	r3
    926e:	2800      	cmp	r0, #0
    9270:	d1ed      	bne.n	924e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf6>
  tensors_allocated_ = true;
    9272:	2201      	movs	r2, #1
    9274:	f884 206c 	strb.w	r2, [r4, #108]	; 0x6c
  return kTfLiteOk;
    9278:	e7e9      	b.n	924e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf6>
    927a:	bf00      	nop
    927c:	00008775 	.word	0x00008775
    9280:	00008fe5 	.word	0x00008fe5
    9284:	0003ccc0 	.word	0x0003ccc0
    9288:	000012f9 	.word	0x000012f9
    928c:	00008ff5 	.word	0x00008ff5
    9290:	00008fc1 	.word	0x00008fc1
    9294:	0003cce4 	.word	0x0003cce4
    9298:	0000900d 	.word	0x0000900d
    929c:	00008811 	.word	0x00008811

000092a0 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
    92a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    92a4:	b087      	sub	sp, #28
    92a6:	4606      	mov	r6, r0
  if (initialization_status_ != kTfLiteOk) {
    92a8:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
    92ac:	b94b      	cbnz	r3, 92c2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
    return kTfLiteError;
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
    92ae:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    92b2:	b163      	cbz	r3, 92ce <_ZN6tflite16MicroInterpreter6InvokeEv+0x2e>
TfLiteStatus MicroInterpreter::Invoke() {
    92b4:	f04f 0900 	mov.w	r9, #0
    92b8:	46c8      	mov	r8, r9
    92ba:	46ca      	mov	sl, r9
#ifndef NDEBUG  // Omit profiler overhead from release builds.
      // The case where profiler == nullptr is handled by ScopedOperatorProfile.
      tflite::Profiler* profiler =
          reinterpret_cast<tflite::Profiler*>(context_.profiler);
      ScopedOperatorProfile scoped_profiler(
          profiler, OpNameFromRegistration(registration), i);
    92bc:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 93a4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x104>
    92c0:	e02e      	b.n	9320 <_ZN6tflite16MicroInterpreter6InvokeEv+0x80>
    TF_LITE_REPORT_ERROR(error_reporter_,
    92c2:	4935      	ldr	r1, [pc, #212]	; (9398 <_ZN6tflite16MicroInterpreter6InvokeEv+0xf8>)
    92c4:	68c0      	ldr	r0, [r0, #12]
    92c6:	4b35      	ldr	r3, [pc, #212]	; (939c <_ZN6tflite16MicroInterpreter6InvokeEv+0xfc>)
    92c8:	4798      	blx	r3
    return kTfLiteError;
    92ca:	2501      	movs	r5, #1
    92cc:	e01e      	b.n	930c <_ZN6tflite16MicroInterpreter6InvokeEv+0x6c>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
    92ce:	4b34      	ldr	r3, [pc, #208]	; (93a0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x100>)
    92d0:	4798      	blx	r3
    92d2:	4605      	mov	r5, r0
    92d4:	2800      	cmp	r0, #0
    92d6:	d0ed      	beq.n	92b4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x14>
    92d8:	e018      	b.n	930c <_ZN6tflite16MicroInterpreter6InvokeEv+0x6c>
    92da:	4653      	mov	r3, sl
    92dc:	e02c      	b.n	9338 <_ZN6tflite16MicroInterpreter6InvokeEv+0x98>
    92de:	4653      	mov	r3, sl
    92e0:	e02a      	b.n	9338 <_ZN6tflite16MicroInterpreter6InvokeEv+0x98>
class ScopedProfile {
 public:
  ScopedProfile(Profiler* profiler, const char* tag,
                Profiler::EventType event_type = Profiler::EventType::DEFAULT,
                int64_t event_metadata = 0)
      : profiler_(profiler), event_handle_(0) {
    92e2:	f8cd a014 	str.w	sl, [sp, #20]
    92e6:	e044      	b.n	9372 <_ZN6tflite16MicroInterpreter6InvokeEv+0xd2>
#endif
      invoke_status = registration->invoke(&context_, node);

      if (invoke_status == kTfLiteError) {
        TF_LITE_REPORT_ERROR(
    92e8:	4638      	mov	r0, r7
    92ea:	4b2e      	ldr	r3, [pc, #184]	; (93a4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x104>)
    92ec:	4798      	blx	r3
    92ee:	68f6      	ldr	r6, [r6, #12]
    92f0:	2501      	movs	r5, #1
    92f2:	9500      	str	r5, [sp, #0]
    92f4:	4643      	mov	r3, r8
    92f6:	4602      	mov	r2, r0
    92f8:	492b      	ldr	r1, [pc, #172]	; (93a8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x108>)
    92fa:	4630      	mov	r0, r6
    92fc:	4e27      	ldr	r6, [pc, #156]	; (939c <_ZN6tflite16MicroInterpreter6InvokeEv+0xfc>)
    92fe:	47b0      	blx	r6
      event_handle_ = profiler_->BeginEvent(tag, event_type, event_metadata);
    }
  }

  ~ScopedProfile() {
    if (profiler_) {
    9300:	b124      	cbz	r4, 930c <_ZN6tflite16MicroInterpreter6InvokeEv+0x6c>
      profiler_->EndEvent(event_handle_);
    9302:	6823      	ldr	r3, [r4, #0]
    9304:	691b      	ldr	r3, [r3, #16]
    9306:	9905      	ldr	r1, [sp, #20]
    9308:	4620      	mov	r0, r4
    930a:	4798      	blx	r3
        return invoke_status;
      }
    }
  }
  return kTfLiteOk;
}
    930c:	4628      	mov	r0, r5
    930e:	b007      	add	sp, #28
    9310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9314:	4605      	mov	r5, r0
    9316:	e7f3      	b.n	9300 <_ZN6tflite16MicroInterpreter6InvokeEv+0x60>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    9318:	f108 0801 	add.w	r8, r8, #1
    931c:	f109 0928 	add.w	r9, r9, #40	; 0x28
    9320:	6f32      	ldr	r2, [r6, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    9322:	6813      	ldr	r3, [r2, #0]
    9324:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9326:	8819      	ldrh	r1, [r3, #0]
    9328:	290a      	cmp	r1, #10
    932a:	ddd6      	ble.n	92da <_ZN6tflite16MicroInterpreter6InvokeEv+0x3a>
    932c:	8959      	ldrh	r1, [r3, #10]
    auto p = data_ + field_offset;
    932e:	1853      	adds	r3, r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9330:	2900      	cmp	r1, #0
    9332:	d0d4      	beq.n	92de <_ZN6tflite16MicroInterpreter6InvokeEv+0x3e>
    9334:	5852      	ldr	r2, [r2, r1]
    9336:	4413      	add	r3, r2
    9338:	681b      	ldr	r3, [r3, #0]
    933a:	4598      	cmp	r8, r3
    933c:	d22a      	bcs.n	9394 <_ZN6tflite16MicroInterpreter6InvokeEv+0xf4>
    auto* node = &(node_and_registrations_[i].node);
    933e:	6835      	ldr	r5, [r6, #0]
    9340:	444d      	add	r5, r9
    auto* registration = node_and_registrations_[i].registration;
    9342:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    if (registration->invoke) {
    9344:	68fb      	ldr	r3, [r7, #12]
    9346:	2b00      	cmp	r3, #0
    9348:	d0e6      	beq.n	9318 <_ZN6tflite16MicroInterpreter6InvokeEv+0x78>
          reinterpret_cast<tflite::Profiler*>(context_.profiler);
    934a:	6c74      	ldr	r4, [r6, #68]	; 0x44
          profiler, OpNameFromRegistration(registration), i);
    934c:	4638      	mov	r0, r7
    934e:	47d8      	blx	fp
    if (profiler) {
    9350:	2c00      	cmp	r4, #0
    9352:	d0c6      	beq.n	92e2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x42>
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
    9354:	6823      	ldr	r3, [r4, #0]
    9356:	2100      	movs	r1, #0
    9358:	2200      	movs	r2, #0
    935a:	e9cd 1202 	strd	r1, r2, [sp, #8]

class ScopedOperatorProfile : public ScopedProfile {
 public:
  ScopedOperatorProfile(Profiler* profiler, const char* tag, int node_index)
      : ScopedProfile(profiler, tag, Profiler::EventType::OPERATOR_INVOKE_EVENT,
                      static_cast<uint32_t>(node_index)) {}
    935e:	f8cd 8000 	str.w	r8, [sp]
    9362:	f8cd a004 	str.w	sl, [sp, #4]
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
    9366:	689b      	ldr	r3, [r3, #8]
    9368:	2202      	movs	r2, #2
    936a:	4601      	mov	r1, r0
    936c:	4620      	mov	r0, r4
    936e:	4798      	blx	r3
    9370:	9005      	str	r0, [sp, #20]
      invoke_status = registration->invoke(&context_, node);
    9372:	68fb      	ldr	r3, [r7, #12]
    9374:	4629      	mov	r1, r5
    9376:	f106 0010 	add.w	r0, r6, #16
    937a:	4798      	blx	r3
      if (invoke_status == kTfLiteError) {
    937c:	2801      	cmp	r0, #1
    937e:	d0b3      	beq.n	92e8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x48>
      } else if (invoke_status != kTfLiteOk) {
    9380:	2800      	cmp	r0, #0
    9382:	d1c7      	bne.n	9314 <_ZN6tflite16MicroInterpreter6InvokeEv+0x74>
    if (profiler_) {
    9384:	2c00      	cmp	r4, #0
    9386:	d0c7      	beq.n	9318 <_ZN6tflite16MicroInterpreter6InvokeEv+0x78>
      profiler_->EndEvent(event_handle_);
    9388:	6823      	ldr	r3, [r4, #0]
    938a:	691b      	ldr	r3, [r3, #16]
    938c:	9905      	ldr	r1, [sp, #20]
    938e:	4620      	mov	r0, r4
    9390:	4798      	blx	r3
    9392:	e7c1      	b.n	9318 <_ZN6tflite16MicroInterpreter6InvokeEv+0x78>
  return kTfLiteOk;
    9394:	2500      	movs	r5, #0
    9396:	e7b9      	b.n	930c <_ZN6tflite16MicroInterpreter6InvokeEv+0x6c>
    9398:	0003cd1c 	.word	0x0003cd1c
    939c:	000012f9 	.word	0x000012f9
    93a0:	00009159 	.word	0x00009159
    93a4:	00008fc1 	.word	0x00008fc1
    93a8:	0003cd4c 	.word	0x0003cd4c

000093ac <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
    93ac:	b538      	push	{r3, r4, r5, lr}
    }
    return nullptr;
  }

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const { return subgraph_->inputs()->Length(); }
    93ae:	6f05      	ldr	r5, [r0, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    93b0:	682b      	ldr	r3, [r5, #0]
    93b2:	1aeb      	subs	r3, r5, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    93b4:	881a      	ldrh	r2, [r3, #0]
    93b6:	2a06      	cmp	r2, #6
    93b8:	dd0e      	ble.n	93d8 <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    93ba:	88db      	ldrh	r3, [r3, #6]
    auto p = data_ + field_offset;
    93bc:	18ec      	adds	r4, r5, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    93be:	b16b      	cbz	r3, 93dc <_ZN6tflite16MicroInterpreter5inputEj+0x30>
    93c0:	58ea      	ldr	r2, [r5, r3]
    93c2:	4414      	add	r4, r2
  uoffset_t size() const { return EndianScalar(length_); }
    93c4:	6823      	ldr	r3, [r4, #0]
  const size_t length = inputs_size();
  if ((index < 0) || (index >= length)) {
    93c6:	4299      	cmp	r1, r3
    93c8:	d20a      	bcs.n	93e0 <_ZN6tflite16MicroInterpreter5inputEj+0x34>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    93ca:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
  }
  return &(context_.tensors[inputs().Get(index)]);
    93ce:	6863      	ldr	r3, [r4, #4]
    93d0:	6980      	ldr	r0, [r0, #24]
    93d2:	eb00 1083 	add.w	r0, r0, r3, lsl #6
}
    93d6:	bd38      	pop	{r3, r4, r5, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    93d8:	2400      	movs	r4, #0
    93da:	e7f3      	b.n	93c4 <_ZN6tflite16MicroInterpreter5inputEj+0x18>
    93dc:	2400      	movs	r4, #0
    93de:	e7f1      	b.n	93c4 <_ZN6tflite16MicroInterpreter5inputEj+0x18>
    93e0:	460a      	mov	r2, r1
    TF_LITE_REPORT_ERROR(error_reporter_,
    93e2:	4903      	ldr	r1, [pc, #12]	; (93f0 <_ZN6tflite16MicroInterpreter5inputEj+0x44>)
    93e4:	68c0      	ldr	r0, [r0, #12]
    93e6:	4c03      	ldr	r4, [pc, #12]	; (93f4 <_ZN6tflite16MicroInterpreter5inputEj+0x48>)
    93e8:	47a0      	blx	r4
    return nullptr;
    93ea:	2000      	movs	r0, #0
    93ec:	bd38      	pop	{r3, r4, r5, pc}
    93ee:	bf00      	nop
    93f0:	0003cd80 	.word	0x0003cd80
    93f4:	000012f9 	.word	0x000012f9

000093f8 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
    93f8:	b538      	push	{r3, r4, r5, lr}
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const { return subgraph_->outputs()->Length(); }
    93fa:	6f05      	ldr	r5, [r0, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    93fc:	682b      	ldr	r3, [r5, #0]
    93fe:	1aeb      	subs	r3, r5, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9400:	881a      	ldrh	r2, [r3, #0]
    9402:	2a08      	cmp	r2, #8
    9404:	dd0e      	ble.n	9424 <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    9406:	891b      	ldrh	r3, [r3, #8]
    auto p = data_ + field_offset;
    9408:	18ec      	adds	r4, r5, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    940a:	b16b      	cbz	r3, 9428 <_ZN6tflite16MicroInterpreter6outputEj+0x30>
    940c:	58ea      	ldr	r2, [r5, r3]
    940e:	4414      	add	r4, r2
  uoffset_t size() const { return EndianScalar(length_); }
    9410:	6823      	ldr	r3, [r4, #0]
  const size_t length = outputs_size();
  if ((index < 0) || (index >= length)) {
    9412:	4299      	cmp	r1, r3
    9414:	d20a      	bcs.n	942c <_ZN6tflite16MicroInterpreter6outputEj+0x34>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    9416:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
  }
  return &(context_.tensors[outputs().Get(index)]);
    941a:	6863      	ldr	r3, [r4, #4]
    941c:	6980      	ldr	r0, [r0, #24]
    941e:	eb00 1083 	add.w	r0, r0, r3, lsl #6
}
    9422:	bd38      	pop	{r3, r4, r5, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9424:	2400      	movs	r4, #0
    9426:	e7f3      	b.n	9410 <_ZN6tflite16MicroInterpreter6outputEj+0x18>
    9428:	2400      	movs	r4, #0
    942a:	e7f1      	b.n	9410 <_ZN6tflite16MicroInterpreter6outputEj+0x18>
    942c:	460a      	mov	r2, r1
    TF_LITE_REPORT_ERROR(error_reporter_,
    942e:	4903      	ldr	r1, [pc, #12]	; (943c <_ZN6tflite16MicroInterpreter6outputEj+0x44>)
    9430:	68c0      	ldr	r0, [r0, #12]
    9432:	4c03      	ldr	r4, [pc, #12]	; (9440 <_ZN6tflite16MicroInterpreter6outputEj+0x48>)
    9434:	47a0      	blx	r4
    return nullptr;
    9436:	2000      	movs	r0, #0
    9438:	bd38      	pop	{r3, r4, r5, pc}
    943a:	bf00      	nop
    943c:	0003cdac 	.word	0x0003cdac
    9440:	000012f9 	.word	0x000012f9

00009444 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
  char* current = main;
  while (*current != 0) {
    9444:	7803      	ldrb	r3, [r0, #0]
    9446:	b1bb      	cbz	r3, 9478 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x34>
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
    9448:	b410      	push	{r4}
  while (*current != 0) {
    944a:	4603      	mov	r3, r0
    944c:	f813 4f01 	ldrb.w	r4, [r3, #1]!
    9450:	2c00      	cmp	r4, #0
    9452:	d1fb      	bne.n	944c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x8>
    ++current;
  }
  char* current_end = main + (main_max_length - 1);
    9454:	3901      	subs	r1, #1
    9456:	4408      	add	r0, r1
  while ((*to_append != 0) && (current < current_end)) {
    9458:	7811      	ldrb	r1, [r2, #0]
    945a:	b141      	cbz	r1, 946e <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
    945c:	4298      	cmp	r0, r3
    945e:	d906      	bls.n	946e <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
    *current = *to_append;
    9460:	f803 1b01 	strb.w	r1, [r3], #1
  while ((*to_append != 0) && (current < current_end)) {
    9464:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    9468:	b109      	cbz	r1, 946e <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
    946a:	4298      	cmp	r0, r3
    946c:	d1f8      	bne.n	9460 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x1c>
    ++current;
    ++to_append;
  }
  *current = 0;
    946e:	2200      	movs	r2, #0
    9470:	701a      	strb	r2, [r3, #0]
  return current;
}
    9472:	4618      	mov	r0, r3
    9474:	bc10      	pop	{r4}
    9476:	4770      	bx	lr
  char* current = main;
    9478:	4603      	mov	r3, r0
  char* current_end = main + (main_max_length - 1);
    947a:	3901      	subs	r1, #1
    947c:	4408      	add	r0, r1
  while ((*to_append != 0) && (current < current_end)) {
    947e:	7811      	ldrb	r1, [r2, #0]
    9480:	b141      	cbz	r1, 9494 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    9482:	4298      	cmp	r0, r3
    9484:	d906      	bls.n	9494 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
    9486:	f803 1b01 	strb.w	r1, [r3], #1
  while ((*to_append != 0) && (current < current_end)) {
    948a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    948e:	b109      	cbz	r1, 9494 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    9490:	4298      	cmp	r0, r3
    9492:	d1f8      	bne.n	9486 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x42>
  *current = 0;
    9494:	2200      	movs	r2, #0
    9496:	701a      	strb	r2, [r3, #0]
}
    9498:	4618      	mov	r0, r3
    949a:	4770      	bx	lr

0000949c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
    949c:	b430      	push	{r4, r5}
    949e:	460c      	mov	r4, r1
    94a0:	e000      	b.n	94a4 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x8>
    if (digit < 10) {
      character = '0' + digit;
    } else {
      character = 'a' + (digit - 10);
    }
    *buffer++ = character;
    94a2:	462c      	mov	r4, r5
    int32_t digit = i % base;
    94a4:	fbb0 f3f2 	udiv	r3, r0, r2
    94a8:	fb02 0313 	mls	r3, r2, r3, r0
    if (digit < 10) {
    94ac:	2b09      	cmp	r3, #9
      character = '0' + digit;
    94ae:	bfd4      	ite	le
    94b0:	3330      	addle	r3, #48	; 0x30
      character = 'a' + (digit - 10);
    94b2:	3357      	addgt	r3, #87	; 0x57
    94b4:	b2db      	uxtb	r3, r3
    *buffer++ = character;
    94b6:	4625      	mov	r5, r4
    94b8:	f805 3b01 	strb.w	r3, [r5], #1
    i /= base;
    94bc:	fbb0 f0f2 	udiv	r0, r0, r2
  } while (i > 0);
    94c0:	2800      	cmp	r0, #0
    94c2:	d1ee      	bne.n	94a2 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x6>
  *buffer = 0;
    94c4:	2300      	movs	r3, #0
    94c6:	702b      	strb	r3, [r5, #0]
  while (p1 < p2) {
    94c8:	428c      	cmp	r4, r1
    94ca:	d907      	bls.n	94dc <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x40>
    char tmp = *p1;
    94cc:	780b      	ldrb	r3, [r1, #0]
    *p1++ = *p2;
    94ce:	7822      	ldrb	r2, [r4, #0]
    94d0:	f801 2b01 	strb.w	r2, [r1], #1
    *p2-- = tmp;
    94d4:	f804 3901 	strb.w	r3, [r4], #-1
  while (p1 < p2) {
    94d8:	42a1      	cmp	r1, r4
    94da:	d3f7      	bcc.n	94cc <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
  ReverseStringInPlace(start, buffer);
  return buffer;
}
    94dc:	4628      	mov	r0, r5
    94de:	bc30      	pop	{r4, r5}
    94e0:	4770      	bx	lr
	...

000094e4 <MicroVsnprintf>:
}

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
    94e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    94e8:	b097      	sub	sp, #92	; 0x5c
    94ea:	4680      	mov	r8, r0
    94ec:	9102      	str	r1, [sp, #8]
    94ee:	4691      	mov	r9, r2
    94f0:	469a      	mov	sl, r3
  int output_index = 0;
  const char* current = format;
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
    94f2:	f101 3bff 	add.w	fp, r1, #4294967295
  int output_index = 0;
    94f6:	2400      	movs	r4, #0
  while (*current != '\0' && output_index < usable_length) {
    94f8:	f899 3000 	ldrb.w	r3, [r9]
    94fc:	2b00      	cmp	r3, #0
    94fe:	f000 8158 	beq.w	97b2 <MicroVsnprintf+0x2ce>
    9502:	455c      	cmp	r4, fp
    9504:	f280 8155 	bge.w	97b2 <MicroVsnprintf+0x2ce>
    if (*current == '%') {
    9508:	2b25      	cmp	r3, #37	; 0x25
    950a:	d005      	beq.n	9518 <MicroVsnprintf+0x34>
            output[output_index++] = string[string_idx++];
          }
          current++;
      }
    } else {
      output[output_index++] = *current++;
    950c:	f109 0901 	add.w	r9, r9, #1
    9510:	f808 3004 	strb.w	r3, [r8, r4]
    9514:	3401      	adds	r4, #1
    9516:	e7ef      	b.n	94f8 <MicroVsnprintf+0x14>
      switch (*current) {
    9518:	f899 3001 	ldrb.w	r3, [r9, #1]
    951c:	2b66      	cmp	r3, #102	; 0x66
    951e:	d069      	beq.n	95f4 <MicroVsnprintf+0x110>
    9520:	d909      	bls.n	9536 <MicroVsnprintf+0x52>
    9522:	2b75      	cmp	r3, #117	; 0x75
    9524:	d02d      	beq.n	9582 <MicroVsnprintf+0x9e>
    9526:	2b78      	cmp	r3, #120	; 0x78
    9528:	d044      	beq.n	95b4 <MicroVsnprintf+0xd0>
    952a:	2b73      	cmp	r3, #115	; 0x73
    952c:	f000 8126 	beq.w	977c <MicroVsnprintf+0x298>
      current++;
    9530:	f109 0901 	add.w	r9, r9, #1
    9534:	e7e0      	b.n	94f8 <MicroVsnprintf+0x14>
      switch (*current) {
    9536:	2b25      	cmp	r3, #37	; 0x25
    9538:	f000 8119 	beq.w	976e <MicroVsnprintf+0x28a>
    953c:	2b64      	cmp	r3, #100	; 0x64
    953e:	d1f7      	bne.n	9530 <MicroVsnprintf+0x4c>
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    9540:	ebab 0304 	sub.w	r3, fp, r4
    9544:	2b0a      	cmp	r3, #10
    9546:	dd11      	ble.n	956c <MicroVsnprintf+0x88>
              FormatInt32(&output[output_index], va_arg(args, int32_t));
    9548:	eb08 0504 	add.w	r5, r8, r4
    954c:	f10a 0604 	add.w	r6, sl, #4
    9550:	f8da 0000 	ldr.w	r0, [sl]
  if (i < 0) {
    9554:	2800      	cmp	r0, #0
    9556:	db0e      	blt.n	9576 <MicroVsnprintf+0x92>
    9558:	4629      	mov	r1, r5
  return FastUInt32ToBufferLeft(u, buffer, 10);
    955a:	220a      	movs	r2, #10
    955c:	4b98      	ldr	r3, [pc, #608]	; (97c0 <MicroVsnprintf+0x2dc>)
    955e:	4798      	blx	r3
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
    9560:	1b40      	subs	r0, r0, r5
          output_index +=
    9562:	4404      	add	r4, r0
          current++;
    9564:	f109 0902 	add.w	r9, r9, #2
              FormatInt32(&output[output_index], va_arg(args, int32_t));
    9568:	46b2      	mov	sl, r6
          break;
    956a:	e7c5      	b.n	94f8 <MicroVsnprintf+0x14>
            output[output_index++] = '\0';
    956c:	1c60      	adds	r0, r4, #1
    956e:	2300      	movs	r3, #0
    9570:	f808 3004 	strb.w	r3, [r8, r4]
            return output_index;
    9574:	e121      	b.n	97ba <MicroVsnprintf+0x2d6>
    *buffer++ = '-';
    9576:	1c69      	adds	r1, r5, #1
    9578:	232d      	movs	r3, #45	; 0x2d
    957a:	f808 3004 	strb.w	r3, [r8, r4]
    u = -u;
    957e:	4240      	negs	r0, r0
    9580:	e7eb      	b.n	955a <MicroVsnprintf+0x76>
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    9582:	ebab 0304 	sub.w	r3, fp, r4
    9586:	2b0a      	cmp	r3, #10
    9588:	dd0f      	ble.n	95aa <MicroVsnprintf+0xc6>
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
    958a:	eb08 0504 	add.w	r5, r8, r4
    958e:	f10a 0604 	add.w	r6, sl, #4
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
    9592:	220a      	movs	r2, #10
    9594:	4629      	mov	r1, r5
    9596:	f8da 0000 	ldr.w	r0, [sl]
    959a:	4b89      	ldr	r3, [pc, #548]	; (97c0 <MicroVsnprintf+0x2dc>)
    959c:	4798      	blx	r3
    959e:	1b40      	subs	r0, r0, r5
          output_index +=
    95a0:	4404      	add	r4, r0
          current++;
    95a2:	f109 0902 	add.w	r9, r9, #2
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
    95a6:	46b2      	mov	sl, r6
          break;
    95a8:	e7a6      	b.n	94f8 <MicroVsnprintf+0x14>
            output[output_index++] = '\0';
    95aa:	1c60      	adds	r0, r4, #1
    95ac:	2300      	movs	r3, #0
    95ae:	f808 3004 	strb.w	r3, [r8, r4]
            return output_index;
    95b2:	e102      	b.n	97ba <MicroVsnprintf+0x2d6>
          if (usable_length - output_index < kMaxHexCharsNeeded) {
    95b4:	ebab 0304 	sub.w	r3, fp, r4
    95b8:	2b09      	cmp	r3, #9
    95ba:	dd16      	ble.n	95ea <MicroVsnprintf+0x106>
          output[output_index++] = '0';
    95bc:	2330      	movs	r3, #48	; 0x30
    95be:	f808 3004 	strb.w	r3, [r8, r4]
          output[output_index++] = 'x';
    95c2:	1ca5      	adds	r5, r4, #2
    95c4:	4444      	add	r4, r8
    95c6:	2378      	movs	r3, #120	; 0x78
    95c8:	7063      	strb	r3, [r4, #1]
              FormatHex(&output[output_index], va_arg(args, uint32_t));
    95ca:	eb08 0405 	add.w	r4, r8, r5
    95ce:	f10a 0604 	add.w	r6, sl, #4
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
    95d2:	2210      	movs	r2, #16
    95d4:	4621      	mov	r1, r4
    95d6:	f8da 0000 	ldr.w	r0, [sl]
    95da:	4b79      	ldr	r3, [pc, #484]	; (97c0 <MicroVsnprintf+0x2dc>)
    95dc:	4798      	blx	r3
    95de:	1b04      	subs	r4, r0, r4
          output_index +=
    95e0:	442c      	add	r4, r5
          current++;
    95e2:	f109 0902 	add.w	r9, r9, #2
              FormatHex(&output[output_index], va_arg(args, uint32_t));
    95e6:	46b2      	mov	sl, r6
          break;
    95e8:	e786      	b.n	94f8 <MicroVsnprintf+0x14>
            output[output_index++] = '\0';
    95ea:	1c60      	adds	r0, r4, #1
    95ec:	2300      	movs	r3, #0
    95ee:	f808 3004 	strb.w	r3, [r8, r4]
            return output_index;
    95f2:	e0e2      	b.n	97ba <MicroVsnprintf+0x2d6>
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
    95f4:	ebab 0004 	sub.w	r0, fp, r4
    95f8:	4b72      	ldr	r3, [pc, #456]	; (97c4 <MicroVsnprintf+0x2e0>)
    95fa:	4798      	blx	r3
    95fc:	4972      	ldr	r1, [pc, #456]	; (97c8 <MicroVsnprintf+0x2e4>)
    95fe:	4b73      	ldr	r3, [pc, #460]	; (97cc <MicroVsnprintf+0x2e8>)
    9600:	4798      	blx	r3
    9602:	2800      	cmp	r0, #0
    9604:	d16c      	bne.n	96e0 <MicroVsnprintf+0x1fc>
              FormatFloat(&output[output_index], va_arg(args, double));
    9606:	eb08 0604 	add.w	r6, r8, r4
    960a:	f10a 0a07 	add.w	sl, sl, #7
    960e:	f02a 0307 	bic.w	r3, sl, #7
    9612:	f103 0a08 	add.w	sl, r3, #8
  char* current_end = buffer + (kFastToBufferSize - 1);
    9616:	f106 022f 	add.w	r2, r6, #47	; 0x2f
    961a:	9200      	str	r2, [sp, #0]
              FormatFloat(&output[output_index], va_arg(args, double));
    961c:	e9d3 0100 	ldrd	r0, r1, [r3]
    9620:	4b6b      	ldr	r3, [pc, #428]	; (97d0 <MicroVsnprintf+0x2ec>)
    9622:	4798      	blx	r3
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
    9624:	f3c0 53c7 	ubfx	r3, r0, #23, #8
    9628:	9304      	str	r3, [sp, #16]
    962a:	3b7f      	subs	r3, #127	; 0x7f
    962c:	9303      	str	r3, [sp, #12]
    962e:	9301      	str	r3, [sp, #4]
  const uint32_t fraction = (u & fraction_mask);
    9630:	f3c0 0516 	ubfx	r5, r0, #0, #23
  if (u & sign_mask) {
    9634:	2800      	cmp	r0, #0
    *current = '-';
    9636:	bfbd      	ittte	lt
    9638:	232d      	movlt	r3, #45	; 0x2d
    963a:	f808 3004 	strblt.w	r3, [r8, r4]
    current += 1;
    963e:	f106 0e01 	addlt.w	lr, r6, #1
  char* current = buffer;
    9642:	46b6      	movge	lr, r6
  *current = 0;
    9644:	2300      	movs	r3, #0
    9646:	f88e 3000 	strb.w	r3, [lr]
  if (exponent == 128) {
    964a:	9b01      	ldr	r3, [sp, #4]
    964c:	2b80      	cmp	r3, #128	; 0x80
    964e:	d04c      	beq.n	96ea <MicroVsnprintf+0x206>
                                   18, 19, 20, 21, 22, 23};
    9650:	4b60      	ldr	r3, [pc, #384]	; (97d4 <MicroVsnprintf+0x2f0>)
    9652:	af06      	add	r7, sp, #24
    9654:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    9656:	c707      	stmia	r7!, {r0, r1, r2}
    9658:	703b      	strb	r3, [r7, #0]
    965a:	aa06      	add	r2, sp, #24
    965c:	f10d 0125 	add.w	r1, sp, #37	; 0x25
  uint32_t scaled_fraction = fraction;
    9660:	4628      	mov	r0, r5
    scaled_fraction += (fraction >> scale_shifts[i]);
    9662:	f912 3b01 	ldrsb.w	r3, [r2], #1
    9666:	fa25 f303 	lsr.w	r3, r5, r3
    966a:	4418      	add	r0, r3
  for (int i = 0; i < scale_shifts_size; ++i) {
    966c:	428a      	cmp	r2, r1
    966e:	d1f8      	bne.n	9662 <MicroVsnprintf+0x17e>
  *current = '1';
    9670:	2331      	movs	r3, #49	; 0x31
    9672:	f88e 3000 	strb.w	r3, [lr]
  *current = '.';
    9676:	232e      	movs	r3, #46	; 0x2e
    9678:	f88e 3001 	strb.w	r3, [lr, #1]
  current += 1;
    967c:	f10e 0502 	add.w	r5, lr, #2
  *current = 0;
    9680:	2300      	movs	r3, #0
    9682:	f88e 3002 	strb.w	r3, [lr, #2]
  if (current_end - current <= kMaxFractionalDigits) {
    9686:	9505      	str	r5, [sp, #20]
    9688:	9b00      	ldr	r3, [sp, #0]
    968a:	1b5f      	subs	r7, r3, r5
    968c:	2f07      	cmp	r7, #7
    968e:	dd5f      	ble.n	9750 <MicroVsnprintf+0x26c>
    9690:	462b      	mov	r3, r5
    9692:	f10e 0e08 	add.w	lr, lr, #8
    *(current + i) = '0';
    9696:	2230      	movs	r2, #48	; 0x30
    9698:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (int i = 1; i < kMaxFractionalDigits; i++) {
    969c:	4573      	cmp	r3, lr
    969e:	d1fb      	bne.n	9698 <MicroVsnprintf+0x1b4>
  FastUInt32ToBufferLeft(number, number_string, base);
    96a0:	220a      	movs	r2, #10
    96a2:	a90a      	add	r1, sp, #40	; 0x28
    96a4:	4b46      	ldr	r3, [pc, #280]	; (97c0 <MicroVsnprintf+0x2dc>)
    96a6:	4798      	blx	r3
  return StrCatStr(main, main_max_length, number_string);
    96a8:	aa0a      	add	r2, sp, #40	; 0x28
    96aa:	4639      	mov	r1, r7
    96ac:	4628      	mov	r0, r5
    96ae:	4b4a      	ldr	r3, [pc, #296]	; (97d8 <MicroVsnprintf+0x2f4>)
    96b0:	4798      	blx	r3
  int fraction_digits = current - previous;
    96b2:	9b05      	ldr	r3, [sp, #20]
    96b4:	1ac1      	subs	r1, r0, r3
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
    96b6:	f1c1 0207 	rsb	r2, r1, #7
  *current = '0';
    96ba:	2330      	movs	r3, #48	; 0x30
    96bc:	7003      	strb	r3, [r0, #0]
  for (int i = 0; i < fraction_digits; i++) {
    96be:	2900      	cmp	r1, #0
    96c0:	dd0c      	ble.n	96dc <MicroVsnprintf+0x1f8>
    96c2:	4603      	mov	r3, r0
    96c4:	4402      	add	r2, r0
    96c6:	1a40      	subs	r0, r0, r1
    96c8:	4686      	mov	lr, r0
    *current = '0';
    96ca:	2730      	movs	r7, #48	; 0x30
    *(current + leading_zeros) = *current;
    96cc:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    96d0:	f802 1d01 	strb.w	r1, [r2, #-1]!
    *current = '0';
    96d4:	f803 7d01 	strb.w	r7, [r3, #-1]!
  for (int i = 0; i < fraction_digits; i++) {
    96d8:	4573      	cmp	r3, lr
    96da:	d1f7      	bne.n	96cc <MicroVsnprintf+0x1e8>
  current += kMaxFractionalDigits;
    96dc:	1dc1      	adds	r1, r0, #7
    96de:	e018      	b.n	9712 <MicroVsnprintf+0x22e>
            output[output_index++] = '\0';
    96e0:	1c60      	adds	r0, r4, #1
    96e2:	2300      	movs	r3, #0
    96e4:	f808 3004 	strb.w	r3, [r8, r4]
            return output_index;
    96e8:	e067      	b.n	97ba <MicroVsnprintf+0x2d6>
    if (fraction == 0) {
    96ea:	b945      	cbnz	r5, 96fe <MicroVsnprintf+0x21a>
      current = StrCatStr(current, (current_end - current), "Inf");
    96ec:	4a3b      	ldr	r2, [pc, #236]	; (97dc <MicroVsnprintf+0x2f8>)
    96ee:	9b00      	ldr	r3, [sp, #0]
    96f0:	eba3 010e 	sub.w	r1, r3, lr
    96f4:	4670      	mov	r0, lr
    96f6:	4b38      	ldr	r3, [pc, #224]	; (97d8 <MicroVsnprintf+0x2f4>)
    96f8:	4798      	blx	r3
    96fa:	4605      	mov	r5, r0
    96fc:	e028      	b.n	9750 <MicroVsnprintf+0x26c>
      current = StrCatStr(current, (current_end - current), "NaN");
    96fe:	4a38      	ldr	r2, [pc, #224]	; (97e0 <MicroVsnprintf+0x2fc>)
    9700:	9b00      	ldr	r3, [sp, #0]
    9702:	eba3 010e 	sub.w	r1, r3, lr
    9706:	4670      	mov	r0, lr
    9708:	4b33      	ldr	r3, [pc, #204]	; (97d8 <MicroVsnprintf+0x2f4>)
    970a:	4798      	blx	r3
    970c:	4605      	mov	r5, r0
    970e:	e01f      	b.n	9750 <MicroVsnprintf+0x26c>
  while (*(current - 1) == '0' && (current - 1) > previous) {
    9710:	4619      	mov	r1, r3
    9712:	4608      	mov	r0, r1
    9714:	1e4b      	subs	r3, r1, #1
    9716:	f811 2c01 	ldrb.w	r2, [r1, #-1]
    971a:	2a30      	cmp	r2, #48	; 0x30
    971c:	d101      	bne.n	9722 <MicroVsnprintf+0x23e>
    971e:	429d      	cmp	r5, r3
    9720:	d3f6      	bcc.n	9710 <MicroVsnprintf+0x22c>
  *current = 0;
    9722:	2300      	movs	r3, #0
    9724:	7003      	strb	r3, [r0, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
    9726:	4a2f      	ldr	r2, [pc, #188]	; (97e4 <MicroVsnprintf+0x300>)
    9728:	9f00      	ldr	r7, [sp, #0]
    972a:	1a79      	subs	r1, r7, r1
    972c:	4b2a      	ldr	r3, [pc, #168]	; (97d8 <MicroVsnprintf+0x2f4>)
    972e:	4798      	blx	r3
    9730:	4605      	mov	r5, r0
  current = StrCatInt32(current, (current_end - current), exponent);
    9732:	1a3f      	subs	r7, r7, r0
  if (i < 0) {
    9734:	9b01      	ldr	r3, [sp, #4]
    9736:	2b00      	cmp	r3, #0
    9738:	db0f      	blt.n	975a <MicroVsnprintf+0x276>
    973a:	a90a      	add	r1, sp, #40	; 0x28
  return FastUInt32ToBufferLeft(u, buffer, 10);
    973c:	220a      	movs	r2, #10
    973e:	9803      	ldr	r0, [sp, #12]
    9740:	4b1f      	ldr	r3, [pc, #124]	; (97c0 <MicroVsnprintf+0x2dc>)
    9742:	4798      	blx	r3
  return StrCatStr(main, main_max_length, number_string);
    9744:	aa0a      	add	r2, sp, #40	; 0x28
    9746:	4639      	mov	r1, r7
    9748:	4628      	mov	r0, r5
    974a:	4b23      	ldr	r3, [pc, #140]	; (97d8 <MicroVsnprintf+0x2f4>)
    974c:	4798      	blx	r3
    974e:	4605      	mov	r5, r0
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
    9750:	1bad      	subs	r5, r5, r6
          output_index +=
    9752:	442c      	add	r4, r5
          current++;
    9754:	f109 0902 	add.w	r9, r9, #2
          break;
    9758:	e6ce      	b.n	94f8 <MicroVsnprintf+0x14>
    *buffer++ = '-';
    975a:	232d      	movs	r3, #45	; 0x2d
    975c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    u = -u;
    9760:	9b04      	ldr	r3, [sp, #16]
    9762:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
    9766:	9303      	str	r3, [sp, #12]
    *buffer++ = '-';
    9768:	f10d 0129 	add.w	r1, sp, #41	; 0x29
    976c:	e7e6      	b.n	973c <MicroVsnprintf+0x258>
          output[output_index++] = *current++;
    976e:	f109 0902 	add.w	r9, r9, #2
    9772:	2325      	movs	r3, #37	; 0x25
    9774:	f808 3004 	strb.w	r3, [r8, r4]
    9778:	3401      	adds	r4, #1
          break;
    977a:	e6bd      	b.n	94f8 <MicroVsnprintf+0x14>
          char* string = va_arg(args, char*);
    977c:	f10a 0604 	add.w	r6, sl, #4
    9780:	f8da 2000 	ldr.w	r2, [sl]
                 string[string_idx] != '\0') {
    9784:	7813      	ldrb	r3, [r2, #0]
          while (string_idx + output_index < usable_length &&
    9786:	b183      	cbz	r3, 97aa <MicroVsnprintf+0x2c6>
    9788:	eb08 0104 	add.w	r1, r8, r4
    978c:	9802      	ldr	r0, [sp, #8]
    978e:	3802      	subs	r0, #2
    9790:	1b05      	subs	r5, r0, r4
    9792:	1c60      	adds	r0, r4, #1
    9794:	eb00 0055 	add.w	r0, r0, r5, lsr #1
            output[output_index++] = string[string_idx++];
    9798:	3401      	adds	r4, #1
    979a:	f801 3b01 	strb.w	r3, [r1], #1
          while (string_idx + output_index < usable_length &&
    979e:	4284      	cmp	r4, r0
    97a0:	d003      	beq.n	97aa <MicroVsnprintf+0x2c6>
                 string[string_idx] != '\0') {
    97a2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
          while (string_idx + output_index < usable_length &&
    97a6:	2b00      	cmp	r3, #0
    97a8:	d1f6      	bne.n	9798 <MicroVsnprintf+0x2b4>
          current++;
    97aa:	f109 0902 	add.w	r9, r9, #2
          char* string = va_arg(args, char*);
    97ae:	46b2      	mov	sl, r6
    97b0:	e6a2      	b.n	94f8 <MicroVsnprintf+0x14>
    }
  }
  output[output_index++] = '\0';
    97b2:	1c60      	adds	r0, r4, #1
    97b4:	2300      	movs	r3, #0
    97b6:	f808 3004 	strb.w	r3, [r8, r4]
  return output_index;
}
    97ba:	b017      	add	sp, #92	; 0x5c
    97bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    97c0:	0000949d 	.word	0x0000949d
    97c4:	00015c99 	.word	0x00015c99
    97c8:	41600000 	.word	0x41600000
    97cc:	0001607d 	.word	0x0001607d
    97d0:	00015a85 	.word	0x00015a85
    97d4:	0003ce34 	.word	0x0003ce34
    97d8:	00009445 	.word	0x00009445
    97dc:	0003ce44 	.word	0x0003ce44
    97e0:	0003ce48 	.word	0x0003ce48
    97e4:	0003ce4c 	.word	0x0003ce4c

000097e8 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
}

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
    97e8:	4770      	bx	lr
	...

000097ec <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromHead(size_t size,
                                                 size_t alignment) {
    97ec:	b530      	push	{r4, r5, lr}
    97ee:	b083      	sub	sp, #12
    97f0:	4605      	mov	r5, r0
    97f2:	460c      	mov	r4, r1
  uint8_t* const aligned_result = AlignPointerUp(head_, alignment);
    97f4:	4611      	mov	r1, r2
    97f6:	6900      	ldr	r0, [r0, #16]
    97f8:	4b09      	ldr	r3, [pc, #36]	; (9820 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x34>)
    97fa:	4798      	blx	r3
  const size_t available_memory = tail_ - aligned_result;
    97fc:	696b      	ldr	r3, [r5, #20]
    97fe:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    9800:	42a3      	cmp	r3, r4
    9802:	d303      	bcc.n	980c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x20>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return nullptr;
  }
  head_ = aligned_result + size;
    9804:	4404      	add	r4, r0
    9806:	612c      	str	r4, [r5, #16]
  return aligned_result;
}
    9808:	b003      	add	sp, #12
    980a:	bd30      	pop	{r4, r5, pc}
    TF_LITE_REPORT_ERROR(
    980c:	6868      	ldr	r0, [r5, #4]
    980e:	1ae2      	subs	r2, r4, r3
    9810:	9200      	str	r2, [sp, #0]
    9812:	4622      	mov	r2, r4
    9814:	4903      	ldr	r1, [pc, #12]	; (9824 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x38>)
    9816:	4c04      	ldr	r4, [pc, #16]	; (9828 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x3c>)
    9818:	47a0      	blx	r4
    return nullptr;
    981a:	2000      	movs	r0, #0
    981c:	e7f4      	b.n	9808 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x1c>
    981e:	bf00      	nop
    9820:	000077e5 	.word	0x000077e5
    9824:	0003ce68 	.word	0x0003ce68
    9828:	000012f9 	.word	0x000012f9

0000982c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
    982c:	b530      	push	{r4, r5, lr}
    982e:	b083      	sub	sp, #12
    9830:	4604      	mov	r4, r0
    9832:	460d      	mov	r5, r1
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
    9834:	6940      	ldr	r0, [r0, #20]
    9836:	4611      	mov	r1, r2
    9838:	1b40      	subs	r0, r0, r5
    983a:	4b09      	ldr	r3, [pc, #36]	; (9860 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x34>)
    983c:	4798      	blx	r3
  if (aligned_result < head_) {
    983e:	6923      	ldr	r3, [r4, #16]
    9840:	4298      	cmp	r0, r3
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, size - missing_memory, missing_memory);
    return nullptr;
  }
  tail_ = aligned_result;
    9842:	bf28      	it	cs
    9844:	6160      	strcs	r0, [r4, #20]
  if (aligned_result < head_) {
    9846:	d301      	bcc.n	984c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x20>
  return aligned_result;
}
    9848:	b003      	add	sp, #12
    984a:	bd30      	pop	{r4, r5, pc}
    const size_t missing_memory = head_ - aligned_result;
    984c:	1a1b      	subs	r3, r3, r0
    TF_LITE_REPORT_ERROR(
    984e:	6860      	ldr	r0, [r4, #4]
    9850:	9300      	str	r3, [sp, #0]
    9852:	1aeb      	subs	r3, r5, r3
    9854:	462a      	mov	r2, r5
    9856:	4903      	ldr	r1, [pc, #12]	; (9864 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x38>)
    9858:	4c03      	ldr	r4, [pc, #12]	; (9868 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x3c>)
    985a:	47a0      	blx	r4
    return nullptr;
    985c:	2000      	movs	r0, #0
    985e:	e7f3      	b.n	9848 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x1c>
    9860:	000077f3 	.word	0x000077f3
    9864:	0003ce68 	.word	0x0003ce68
    9868:	000012f9 	.word	0x000012f9

0000986c <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
    986c:	b510      	push	{r4, lr}
    986e:	4604      	mov	r4, r0
    9870:	4b01      	ldr	r3, [pc, #4]	; (9878 <_ZN6tflite21SimpleMemoryAllocatorD0Ev+0xc>)
    9872:	4798      	blx	r3
    9874:	4620      	mov	r0, r4
    9876:	bd10      	pop	{r4, pc}
    9878:	0000ccb9 	.word	0x0000ccb9

0000987c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
    987c:	b430      	push	{r4, r5}
      tail_(buffer_tail) {}
    987e:	4d04      	ldr	r5, [pc, #16]	; (9890 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x14>)
    9880:	6005      	str	r5, [r0, #0]
    9882:	6041      	str	r1, [r0, #4]
    9884:	6082      	str	r2, [r0, #8]
    9886:	60c3      	str	r3, [r0, #12]
    9888:	6102      	str	r2, [r0, #16]
    988a:	6143      	str	r3, [r0, #20]
    988c:	bc30      	pop	{r4, r5}
    988e:	4770      	bx	lr
    9890:	0003ce58 	.word	0x0003ce58

00009894 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
    9894:	b500      	push	{lr}
    9896:	b087      	sub	sp, #28
  TFLITE_DCHECK(error_reporter != nullptr);
    9898:	b300      	cbz	r0, 98dc <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x48>
    989a:	4603      	mov	r3, r0
  TFLITE_DCHECK(buffer_head != nullptr);
    989c:	b301      	cbz	r1, 98e0 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x4c>
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
    989e:	440a      	add	r2, r1
      tail_(buffer_tail) {}
    98a0:	4810      	ldr	r0, [pc, #64]	; (98e4 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x50>)
    98a2:	9000      	str	r0, [sp, #0]
    98a4:	9301      	str	r3, [sp, #4]
    98a6:	9102      	str	r1, [sp, #8]
    98a8:	9203      	str	r2, [sp, #12]
    98aa:	9104      	str	r1, [sp, #16]
    98ac:	9205      	str	r2, [sp, #20]
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
    98ae:	2204      	movs	r2, #4
    98b0:	2118      	movs	r1, #24
    98b2:	4668      	mov	r0, sp
    98b4:	4b0c      	ldr	r3, [pc, #48]	; (98e8 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x54>)
    98b6:	4798      	blx	r3
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
    98b8:	4603      	mov	r3, r0
    98ba:	b158      	cbz	r0, 98d4 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x40>
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
    98bc:	4a09      	ldr	r2, [pc, #36]	; (98e4 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x50>)
    98be:	6002      	str	r2, [r0, #0]
    98c0:	9a01      	ldr	r2, [sp, #4]
    98c2:	6042      	str	r2, [r0, #4]
    98c4:	9a02      	ldr	r2, [sp, #8]
    98c6:	6082      	str	r2, [r0, #8]
    98c8:	9a03      	ldr	r2, [sp, #12]
    98ca:	60c2      	str	r2, [r0, #12]
    98cc:	9a04      	ldr	r2, [sp, #16]
    98ce:	6102      	str	r2, [r0, #16]
    98d0:	9a05      	ldr	r2, [sp, #20]
    98d2:	6142      	str	r2, [r0, #20]
}
    98d4:	4618      	mov	r0, r3
    98d6:	b007      	add	sp, #28
    98d8:	f85d fb04 	ldr.w	pc, [sp], #4
  TFLITE_DCHECK(error_reporter != nullptr);
    98dc:	4b03      	ldr	r3, [pc, #12]	; (98ec <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x58>)
    98de:	4798      	blx	r3
  TFLITE_DCHECK(buffer_head != nullptr);
    98e0:	4b02      	ldr	r3, [pc, #8]	; (98ec <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x58>)
    98e2:	4798      	blx	r3
    98e4:	0003ce58 	.word	0x0003ce58
    98e8:	0000982d 	.word	0x0000982d
    98ec:	0001739d 	.word	0x0001739d

000098f0 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>:

uint8_t* SimpleMemoryAllocator::GetHead() const { return head_; }
    98f0:	6900      	ldr	r0, [r0, #16]
    98f2:	4770      	bx	lr

000098f4 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>:

uint8_t* SimpleMemoryAllocator::GetTail() const { return tail_; }
    98f4:	6940      	ldr	r0, [r0, #20]
    98f6:	4770      	bx	lr

000098f8 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>:
size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory() const {
  return tail_ - head_;
    98f8:	6942      	ldr	r2, [r0, #20]
    98fa:	6900      	ldr	r0, [r0, #16]
}
    98fc:	1a10      	subs	r0, r2, r0
    98fe:	4770      	bx	lr

00009900 <arm_convolve_1x1_s8_fast>:
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
    if (input_dims->c % 4 != 0 ||
    9900:	68d8      	ldr	r0, [r3, #12]
    9902:	f010 0f03 	tst.w	r0, #3
    9906:	d12e      	bne.n	9966 <arm_convolve_1x1_s8_fast+0x66>
{
    9908:	b510      	push	{r4, lr}
    990a:	b08a      	sub	sp, #40	; 0x28
    if (input_dims->c % 4 != 0 ||
    990c:	690c      	ldr	r4, [r1, #16]
    990e:	2c00      	cmp	r4, #0
    9910:	d12c      	bne.n	996c <arm_convolve_1x1_s8_fast+0x6c>
        conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
    9912:	694c      	ldr	r4, [r1, #20]
    9914:	2c00      	cmp	r4, #0
    9916:	d12c      	bne.n	9972 <arm_convolve_1x1_s8_fast+0x72>
    9918:	688c      	ldr	r4, [r1, #8]
    991a:	2c01      	cmp	r4, #1
    991c:	d12c      	bne.n	9978 <arm_convolve_1x1_s8_fast+0x78>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
    991e:	68cc      	ldr	r4, [r1, #12]
    9920:	2c01      	cmp	r4, #1
    9922:	d12c      	bne.n	997e <arm_convolve_1x1_s8_fast+0x7e>

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
    const int32_t rhs_rows = output_dims->c;
    const int32_t rhs_cols = input_dims->c;

    arm_nn_mat_mult_nt_t_s8(input_data,
    9924:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    9926:	9408      	str	r4, [sp, #32]
    9928:	6a0c      	ldr	r4, [r1, #32]
    992a:	9407      	str	r4, [sp, #28]
    992c:	684c      	ldr	r4, [r1, #4]
    992e:	9406      	str	r4, [sp, #24]
    9930:	6809      	ldr	r1, [r1, #0]
    9932:	9105      	str	r1, [sp, #20]
    9934:	9004      	str	r0, [sp, #16]
    9936:	9911      	ldr	r1, [sp, #68]	; 0x44
    9938:	68c9      	ldr	r1, [r1, #12]
    993a:	9103      	str	r1, [sp, #12]
    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
    993c:	6898      	ldr	r0, [r3, #8]
    993e:	6859      	ldr	r1, [r3, #4]
    9940:	fb01 f100 	mul.w	r1, r1, r0
    9944:	681b      	ldr	r3, [r3, #0]
    9946:	fb03 f301 	mul.w	r3, r3, r1
    arm_nn_mat_mult_nt_t_s8(input_data,
    994a:	9302      	str	r3, [sp, #8]
    994c:	6853      	ldr	r3, [r2, #4]
    994e:	9301      	str	r3, [sp, #4]
    9950:	6813      	ldr	r3, [r2, #0]
    9952:	9300      	str	r3, [sp, #0]
    9954:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9956:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9958:	990e      	ldr	r1, [sp, #56]	; 0x38
    995a:	980c      	ldr	r0, [sp, #48]	; 0x30
    995c:	4c09      	ldr	r4, [pc, #36]	; (9984 <arm_convolve_1x1_s8_fast+0x84>)
    995e:	47a0      	blx	r4
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_MATH_SUCCESS;
    9960:	2000      	movs	r0, #0
}
    9962:	b00a      	add	sp, #40	; 0x28
    9964:	bd10      	pop	{r4, pc}
        return ARM_MATH_SIZE_MISMATCH;
    9966:	f06f 0002 	mvn.w	r0, #2
    996a:	4770      	bx	lr
    996c:	f06f 0002 	mvn.w	r0, #2
    9970:	e7f7      	b.n	9962 <arm_convolve_1x1_s8_fast+0x62>
    9972:	f06f 0002 	mvn.w	r0, #2
    9976:	e7f4      	b.n	9962 <arm_convolve_1x1_s8_fast+0x62>
    9978:	f06f 0002 	mvn.w	r0, #2
    997c:	e7f1      	b.n	9962 <arm_convolve_1x1_s8_fast+0x62>
    997e:	f06f 0002 	mvn.w	r0, #2
    9982:	e7ee      	b.n	9962 <arm_convolve_1x1_s8_fast+0x62>
    9984:	0000a6e9 	.word	0x0000a6e9

00009988 <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
    (void)input_dims;
    return 0;
}
    9988:	2000      	movs	r0, #0
    998a:	4770      	bx	lr

0000998c <arm_convolve_1_x_n_s8>:
                                 const q7_t *filter_data,
                                 const cmsis_nn_dims* bias_dims,
                                 const int32_t *bias_data,
                                 const cmsis_nn_dims* output_dims,
                                 q7_t *output_data)
{
    998c:	b530      	push	{r4, r5, lr}
    998e:	b089      	sub	sp, #36	; 0x24
    9990:	9c11      	ldr	r4, [sp, #68]	; 0x44
    (void)bias_dims;
    arm_status status = ARM_MATH_SUCCESS;
    if (output_dims->w % 4 != 0)
    9992:	68a5      	ldr	r5, [r4, #8]
    9994:	f015 0f03 	tst.w	r5, #3
    9998:	d110      	bne.n	99bc <arm_convolve_1_x_n_s8+0x30>
        }
        output_data += (3 * output_ch);
    }

#else
    status = arm_convolve_s8(ctx,
    999a:	9d12      	ldr	r5, [sp, #72]	; 0x48
    999c:	9506      	str	r5, [sp, #24]
    999e:	9405      	str	r4, [sp, #20]
    99a0:	9c10      	ldr	r4, [sp, #64]	; 0x40
    99a2:	9404      	str	r4, [sp, #16]
    99a4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    99a6:	9403      	str	r4, [sp, #12]
    99a8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    99aa:	9402      	str	r4, [sp, #8]
    99ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    99ae:	9401      	str	r4, [sp, #4]
    99b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    99b2:	9400      	str	r4, [sp, #0]
    99b4:	4c03      	ldr	r4, [pc, #12]	; (99c4 <arm_convolve_1_x_n_s8+0x38>)
    99b6:	47a0      	blx	r4
#endif

out:
    /* Return to application */
    return status;
}
    99b8:	b009      	add	sp, #36	; 0x24
    99ba:	bd30      	pop	{r4, r5, pc}
        status = ARM_MATH_SIZE_MISMATCH;
    99bc:	f06f 0002 	mvn.w	r0, #2
    99c0:	e7fa      	b.n	99b8 <arm_convolve_1_x_n_s8+0x2c>
    99c2:	bf00      	nop
    99c4:	000099dd 	.word	0x000099dd

000099c8 <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims* input_dims,
                                              const cmsis_nn_dims* filter_dims)
{
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
    99c8:	68c3      	ldr	r3, [r0, #12]
    99ca:	009b      	lsls	r3, r3, #2
    99cc:	6888      	ldr	r0, [r1, #8]
    99ce:	fb00 f003 	mul.w	r0, r0, r3
    99d2:	684b      	ldr	r3, [r1, #4]
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
    99d4:	fb03 f000 	mul.w	r0, r3, r0
    99d8:	4770      	bx	lr
	...

000099dc <arm_convolve_s8>:
                           const q7_t *filter_data,
                           const cmsis_nn_dims* bias_dims,
                           const int32_t *bias_data,
                           const cmsis_nn_dims* output_dims,
                           q7_t *output_data)
{
    99dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    99e0:	b0b1      	sub	sp, #196	; 0xc4
    99e2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
    99e4:	f8dd c0fc 	ldr.w	ip, [sp, #252]	; 0xfc
    q15_t *buffer_a = (q15_t *)ctx->buf;
    99e8:	6800      	ldr	r0, [r0, #0]
    99ea:	9019      	str	r0, [sp, #100]	; 0x64

    const uint16_t input_batches = input_dims->n;
    const uint16_t input_x       = input_dims->w;
    99ec:	f8d3 a008 	ldr.w	sl, [r3, #8]
    const uint16_t input_y       = input_dims->h;
    99f0:	f8d3 b004 	ldr.w	fp, [r3, #4]
    const uint16_t input_ch      = input_dims->c;
    99f4:	68df      	ldr	r7, [r3, #12]
    99f6:	b2b8      	uxth	r0, r7
    99f8:	9009      	str	r0, [sp, #36]	; 0x24
    const uint16_t kernel_x      = filter_dims->w;
    99fa:	f8d5 e008 	ldr.w	lr, [r5, #8]
    const uint16_t kernel_y      = filter_dims->h;
    99fe:	686e      	ldr	r6, [r5, #4]
    const uint16_t output_x      = output_dims->w;
    9a00:	f8dc 4008 	ldr.w	r4, [ip, #8]
    9a04:	940a      	str	r4, [sp, #40]	; 0x28
    const uint16_t output_y      = output_dims->h;
    9a06:	f8dc 8004 	ldr.w	r8, [ip, #4]
    const uint16_t output_ch     = output_dims->c;
    9a0a:	f8dc c00c 	ldr.w	ip, [ip, #12]
    9a0e:	fa1f f48c 	uxth.w	r4, ip
    9a12:	9425      	str	r4, [sp, #148]	; 0x94

    const uint16_t pad_x         = conv_params->padding.w;
    9a14:	690c      	ldr	r4, [r1, #16]
    9a16:	9415      	str	r4, [sp, #84]	; 0x54
    const uint16_t pad_y         = conv_params->padding.h;
    9a18:	694c      	ldr	r4, [r1, #20]
    9a1a:	9426      	str	r4, [sp, #152]	; 0x98
    const uint16_t stride_x      = conv_params->stride.w;
    9a1c:	688c      	ldr	r4, [r1, #8]
    9a1e:	9416      	str	r4, [sp, #88]	; 0x58
    const uint16_t stride_y      = conv_params->stride.h;
    9a20:	68cc      	ldr	r4, [r1, #12]
    9a22:	9427      	str	r4, [sp, #156]	; 0x9c

    const int32_t input_offset       = conv_params->input_offset;
    9a24:	680c      	ldr	r4, [r1, #0]
    9a26:	940e      	str	r4, [sp, #56]	; 0x38
    const int32_t out_offset         = conv_params->output_offset;
    9a28:	684c      	ldr	r4, [r1, #4]
    9a2a:	941d      	str	r4, [sp, #116]	; 0x74
    const int32_t out_activation_min = conv_params->activation.min;
    9a2c:	6a0c      	ldr	r4, [r1, #32]
    9a2e:	941e      	str	r4, [sp, #120]	; 0x78
    const int32_t out_activation_max = conv_params->activation.max;
    9a30:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    9a32:	941f      	str	r4, [sp, #124]	; 0x7c
    int32_t *output_mult             = quant_params->multiplier;
    9a34:	6814      	ldr	r4, [r2, #0]
    9a36:	9420      	str	r4, [sp, #128]	; 0x80
    int32_t *output_shift            = quant_params->shift;
    9a38:	6852      	ldr	r2, [r2, #4]
    9a3a:	9221      	str	r2, [sp, #132]	; 0x84
    9a3c:	881b      	ldrh	r3, [r3, #0]
    9a3e:	932e      	str	r3, [sp, #184]	; 0xb8

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
    9a40:	2b00      	cmp	r3, #0
    9a42:	f000 819f 	beq.w	9d84 <arm_convolve_s8+0x3a8>
    9a46:	fa1f f08e 	uxth.w	r0, lr
    9a4a:	b2b5      	uxth	r5, r6
    9a4c:	fa1f f388 	uxth.w	r3, r8
    9a50:	931c      	str	r3, [sp, #112]	; 0x70
    9a52:	952f      	str	r5, [sp, #188]	; 0xbc
    9a54:	b2ba      	uxth	r2, r7
    9a56:	9210      	str	r2, [sp, #64]	; 0x40
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
                    {
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
                        {
                            /* Filling 0 for out-of-bound paddings */
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
    9a58:	920f      	str	r2, [sp, #60]	; 0x3c
    9a5a:	ea4f 0942 	mov.w	r9, r2, lsl #1
                        two_column_buf += input_ch;
                    }
                }

                /* Computation is filed for every 2 columns */
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
    9a5e:	0093      	lsls	r3, r2, #2
    9a60:	fb05 f303 	mul.w	r3, r5, r3
    9a64:	9013      	str	r0, [sp, #76]	; 0x4c
    9a66:	4686      	mov	lr, r0
    9a68:	9e19      	ldr	r6, [sp, #100]	; 0x64
    9a6a:	fb00 6103 	mla	r1, r0, r3, r6
    9a6e:	9118      	str	r1, [sp, #96]	; 0x60
                {
                    out =
                        arm_nn_mat_mult_kernel_s8_s16(filter_data,
    9a70:	fb10 f005 	smulbb	r0, r0, r5
    9a74:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9a78:	fb10 f403 	smulbb	r4, r0, r3
    9a7c:	b2a1      	uxth	r1, r4
    9a7e:	4608      	mov	r0, r1
    9a80:	9128      	str	r1, [sp, #160]	; 0xa0

                /* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
                const q15_t *ip_as_col = buffer_a;

                /* 4 multiply and accumulates are done in one loop. */
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
    9a82:	4613      	mov	r3, r2
    9a84:	fb05 f303 	mul.w	r3, r5, r3
    9a88:	4671      	mov	r1, lr
    9a8a:	fb01 f303 	mul.w	r3, r1, r3
    9a8e:	f3c3 018f 	ubfx	r1, r3, #2, #16
    9a92:	460c      	mov	r4, r1
    9a94:	9129      	str	r1, [sp, #164]	; 0xa4
                    sum = __SMLAD(ker_a2, ip_b2, sum);

                    col_count--;
                }
                /* Handle left over mac */
                col_count = input_ch * kernel_y * kernel_x & 0x3;
    9a96:	f000 0103 	and.w	r1, r0, #3
    9a9a:	9122      	str	r1, [sp, #136]	; 0x88
    9a9c:	fa1f fa8a 	uxth.w	sl, sl
    9aa0:	fa1f fb8b 	uxth.w	fp, fp
                }
            }
        }
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
    9aa4:	fb0b f30a 	mul.w	r3, fp, sl
    9aa8:	fb02 f203 	mul.w	r2, r2, r3
    9aac:	922b      	str	r2, [sp, #172]	; 0xac
    9aae:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    9ab2:	9214      	str	r2, [sp, #80]	; 0x50
    9ab4:	fa1f f18c 	uxth.w	r1, ip
    9ab8:	912a      	str	r1, [sp, #168]	; 0xa8
        output_data += (output_x * output_y * output_ch);
    9aba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    9abc:	fb03 f302 	mul.w	r3, r3, r2
    9ac0:	fb01 f303 	mul.w	r3, r1, r3
    9ac4:	932c      	str	r3, [sp, #176]	; 0xb0
    9ac6:	1e63      	subs	r3, r4, #1
    9ac8:	b29b      	uxth	r3, r3
    9aca:	3301      	adds	r3, #1
    9acc:	009a      	lsls	r2, r3, #2
    9ace:	9224      	str	r2, [sp, #144]	; 0x90
    9ad0:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    9ad4:	932d      	str	r3, [sp, #180]	; 0xb4
    9ad6:	2300      	movs	r3, #0
    9ad8:	9323      	str	r3, [sp, #140]	; 0x8c
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
    9ada:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 9d98 <arm_convolve_s8+0x3bc>
    9ade:	e147      	b.n	9d70 <arm_convolve_s8+0x394>
    9ae0:	464a      	mov	r2, r9
    9ae2:	2100      	movs	r1, #0
    9ae4:	4628      	mov	r0, r5
    9ae6:	47c0      	blx	r8
                        two_column_buf += input_ch;
    9ae8:	444d      	add	r5, r9
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
    9aea:	3401      	adds	r4, #1
    9aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9aee:	429c      	cmp	r4, r3
    9af0:	d016      	beq.n	9b20 <arm_convolve_s8+0x144>
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
    9af2:	2e00      	cmp	r6, #0
    9af4:	dbf4      	blt.n	9ae0 <arm_convolve_s8+0x104>
    9af6:	45b3      	cmp	fp, r6
    9af8:	ddf2      	ble.n	9ae0 <arm_convolve_s8+0x104>
    9afa:	2c00      	cmp	r4, #0
    9afc:	dbf0      	blt.n	9ae0 <arm_convolve_s8+0x104>
    9afe:	45a2      	cmp	sl, r4
    9b00:	ddee      	ble.n	9ae0 <arm_convolve_s8+0x104>
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch, two_column_buf, input_ch, input_offset);
    9b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9b04:	1918      	adds	r0, r3, r4
    9b06:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
    9b0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9b0c:	4629      	mov	r1, r5
    9b0e:	4686      	mov	lr, r0
    9b10:	9810      	ldr	r0, [sp, #64]	; 0x40
    9b12:	4607      	mov	r7, r0
    9b14:	983a      	ldr	r0, [sp, #232]	; 0xe8
    9b16:	fb07 000e 	mla	r0, r7, lr, r0
    9b1a:	4f9c      	ldr	r7, [pc, #624]	; (9d8c <arm_convolve_s8+0x3b0>)
    9b1c:	47b8      	blx	r7
    9b1e:	e7e3      	b.n	9ae8 <arm_convolve_s8+0x10c>
    9b20:	461f      	mov	r7, r3
    9b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9b24:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9b26:	4413      	add	r3, r2
    9b28:	930a      	str	r3, [sp, #40]	; 0x28
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
    9b2a:	3601      	adds	r6, #1
    9b2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9b2e:	429e      	cmp	r6, r3
    9b30:	d008      	beq.n	9b44 <arm_convolve_s8+0x168>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
    9b32:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    9b34:	42bc      	cmp	r4, r7
    9b36:	daf8      	bge.n	9b2a <arm_convolve_s8+0x14e>
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch, two_column_buf, input_ch, input_offset);
    9b38:	fb06 f30a 	mul.w	r3, r6, sl
    9b3c:	930b      	str	r3, [sp, #44]	; 0x2c
    9b3e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
    9b40:	9709      	str	r7, [sp, #36]	; 0x24
    9b42:	e7d6      	b.n	9af2 <arm_convolve_s8+0x116>
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
    9b44:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9b46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9b48:	4293      	cmp	r3, r2
    9b4a:	d015      	beq.n	9b78 <arm_convolve_s8+0x19c>
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
    9b4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9b4e:	3301      	adds	r3, #1
    9b50:	9312      	str	r3, [sp, #72]	; 0x48
    9b52:	9a14      	ldr	r2, [sp, #80]	; 0x50
    9b54:	4293      	cmp	r3, r2
    9b56:	d029      	beq.n	9bac <arm_convolve_s8+0x1d0>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
    9b58:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    9b5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9b5c:	4296      	cmp	r6, r2
    9b5e:	daf1      	bge.n	9b44 <arm_convolve_s8+0x168>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
    9b60:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    9b64:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9b66:	fb02 f303 	mul.w	r3, r2, r3
    9b6a:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
    9b6e:	1a9b      	subs	r3, r3, r2
    9b70:	930d      	str	r3, [sp, #52]	; 0x34
    9b72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9b74:	189f      	adds	r7, r3, r2
    9b76:	e7dc      	b.n	9b32 <arm_convolve_s8+0x156>
                    out =
    9b78:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9b7a:	9306      	str	r3, [sp, #24]
    9b7c:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    9b7e:	9305      	str	r3, [sp, #20]
    9b80:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    9b82:	9304      	str	r3, [sp, #16]
    9b84:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
    9b88:	9303      	str	r3, [sp, #12]
    9b8a:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
    9b8e:	9302      	str	r3, [sp, #8]
    9b90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9b92:	9301      	str	r3, [sp, #4]
    9b94:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9b96:	9300      	str	r3, [sp, #0]
    9b98:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9b9a:	9a25      	ldr	r2, [sp, #148]	; 0x94
    9b9c:	9d19      	ldr	r5, [sp, #100]	; 0x64
    9b9e:	4629      	mov	r1, r5
    9ba0:	983c      	ldr	r0, [sp, #240]	; 0xf0
    9ba2:	4c7b      	ldr	r4, [pc, #492]	; (9d90 <arm_convolve_s8+0x3b4>)
    9ba4:	47a0      	blx	r4
    9ba6:	901a      	str	r0, [sp, #104]	; 0x68
                    two_column_buf = buffer_a;
    9ba8:	950a      	str	r5, [sp, #40]	; 0x28
    9baa:	e7cf      	b.n	9b4c <arm_convolve_s8+0x170>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
    9bac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9bae:	3301      	adds	r3, #1
    9bb0:	931b      	str	r3, [sp, #108]	; 0x6c
    9bb2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    9bb4:	4293      	cmp	r3, r2
    9bb6:	d015      	beq.n	9be4 <arm_convolve_s8+0x208>
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
    9bb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9bba:	2b00      	cmp	r3, #0
    9bbc:	d0f6      	beq.n	9bac <arm_convolve_s8+0x1d0>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
    9bbe:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
    9bc2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9bc4:	fb02 f303 	mul.w	r3, r2, r3
    9bc8:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
    9bcc:	1a9b      	subs	r3, r3, r2
    9bce:	9317      	str	r3, [sp, #92]	; 0x5c
    9bd0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
    9bd2:	4413      	add	r3, r2
    9bd4:	930c      	str	r3, [sp, #48]	; 0x30
    9bd6:	2300      	movs	r3, #0
    9bd8:	9312      	str	r3, [sp, #72]	; 0x48
    9bda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9bdc:	fb09 f303 	mul.w	r3, r9, r3
    9be0:	9311      	str	r3, [sp, #68]	; 0x44
    9be2:	e7b9      	b.n	9b58 <arm_convolve_s8+0x17c>
        if (two_column_buf != buffer_a)
    9be4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9be6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9be8:	4293      	cmp	r3, r2
    9bea:	f000 80b3 	beq.w	9d54 <arm_convolve_s8+0x378>
            for (i = 0; i < output_ch; i++)
    9bee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    9bf0:	2b00      	cmp	r3, #0
    9bf2:	f000 80af 	beq.w	9d54 <arm_convolve_s8+0x378>
    9bf6:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    9bf8:	f1a2 0c04 	sub.w	ip, r2, #4
    9bfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
    9bfe:	3a04      	subs	r2, #4
    9c00:	920a      	str	r2, [sp, #40]	; 0x28
    9c02:	9a21      	ldr	r2, [sp, #132]	; 0x84
    9c04:	3a04      	subs	r2, #4
    9c06:	9209      	str	r2, [sp, #36]	; 0x24
    9c08:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    9c0a:	18d3      	adds	r3, r2, r3
    9c0c:	930b      	str	r3, [sp, #44]	; 0x2c
    9c0e:	f8dd e0f0 	ldr.w	lr, [sp, #240]	; 0xf0
    9c12:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9c14:	3b01      	subs	r3, #1
    9c16:	b29b      	uxth	r3, r3
    9c18:	930c      	str	r3, [sp, #48]	; 0x30
    9c1a:	3301      	adds	r3, #1
    9c1c:	930d      	str	r3, [sp, #52]	; 0x34
    9c1e:	e034      	b.n	9c8a <arm_convolve_s8+0x2ae>
                const q15_t *ip_as_col = buffer_a;
    9c20:	9919      	ldr	r1, [sp, #100]	; 0x64
    9c22:	e054      	b.n	9cce <arm_convolve_s8+0x2f2>
 */
__STATIC_FORCEINLINE q31_t arm_nn_sat_doubling_high_mult(const q31_t m1, const q31_t m2)
{
    q31_t result = 0;
    // Rounding offset to add for a right shift of 31
    q63_t mult = 1 << 30;
    9c24:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    9c28:	2700      	movs	r7, #0
    9c2a:	e073      	b.n	9d14 <arm_convolve_s8+0x338>
    // Gets resolved as a SMLAL instruction
    mult = mult + (q63_t)m1 * m2;

    // Utilize all of the upper 32 bits. This is the doubling step
    // as well.
    result = (int32_t) (mult / (1ll << 31));
    9c2c:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    9c30:	2700      	movs	r7, #0
    9c32:	1836      	adds	r6, r6, r0
    9c34:	414f      	adcs	r7, r1
    9c36:	e07f      	b.n	9d38 <arm_convolve_s8+0x35c>

    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    9c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    9c3c:	f040 8082 	bne.w	9d44 <arm_convolve_s8+0x368>
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    9c40:	2a00      	cmp	r2, #0
    9c42:	dd02      	ble.n	9c4a <arm_convolve_s8+0x26e>
        result = Q31_MAX;
    9c44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    9c48:	e00d      	b.n	9c66 <arm_convolve_s8+0x28a>
    9c4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    9c4e:	4252      	negs	r2, r2
    const q31_t remainder_mask = (1 << exponent) - 1;
    9c50:	2301      	movs	r3, #1
    9c52:	4093      	lsls	r3, r2
    9c54:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
    9c56:	ea01 0003 	and.w	r0, r1, r3
    q31_t threshold = remainder_mask >> 1;
    9c5a:	105b      	asrs	r3, r3, #1
    if (result < 0)
    9c5c:	4111      	asrs	r1, r2
    9c5e:	d477      	bmi.n	9d50 <arm_convolve_s8+0x374>
    if (remainder > threshold)
    9c60:	4298      	cmp	r0, r3
        result++;
    9c62:	bfc8      	it	gt
    9c64:	3101      	addgt	r1, #1
                sum += out_offset;
    9c66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9c68:	440b      	add	r3, r1
                sum = MAX(sum, out_activation_min);
    9c6a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    9c6c:	4293      	cmp	r3, r2
    9c6e:	bfb8      	it	lt
    9c70:	4613      	movlt	r3, r2
                sum = MIN(sum, out_activation_max);
    9c72:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    9c74:	4293      	cmp	r3, r2
    9c76:	bfa8      	it	ge
    9c78:	4613      	movge	r3, r2
                *out++ = (q7_t)sum;
    9c7a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    9c7c:	f802 3b01 	strb.w	r3, [r2], #1
    9c80:	4613      	mov	r3, r2
    9c82:	921a      	str	r2, [sp, #104]	; 0x68
            for (i = 0; i < output_ch; i++)
    9c84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9c86:	4293      	cmp	r3, r2
    9c88:	d064      	beq.n	9d54 <arm_convolve_s8+0x378>
                q31_t sum = bias_data[i];
    9c8a:	f85c 3f04 	ldr.w	r3, [ip, #4]!
                while (col_count)
    9c8e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    9c90:	2a00      	cmp	r2, #0
    9c92:	d0c5      	beq.n	9c20 <arm_convolve_s8+0x244>
    9c94:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9c96:	eb0e 0602 	add.w	r6, lr, r2
    9c9a:	9d19      	ldr	r5, [sp, #100]	; 0x64
  memcpy(&val, *in_q7, 4);
    9c9c:	f85e 0b04 	ldr.w	r0, [lr], #4
  op2 %= 32U;
  if (op2 == 0U)
  {
    return op1;
  }
  return (op1 >> op2) | (op1 << (32U - op2));
    9ca0:	ea4f 2230 	mov.w	r2, r0, ror #8

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    9ca4:	fa2f f282 	sxtb16	r2, r2
    9ca8:	fa2f f080 	sxtb16	r0, r0
  *out1 = (int32_t) (__PKHBT (inAbuf2, inAbuf1, 16));
    9cac:	b281      	uxth	r1, r0
    9cae:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  memcpy(&val, *in_q15, 4);
    9cb2:	682c      	ldr	r4, [r5, #0]

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    9cb4:	fb21 3104 	smlad	r1, r1, r4, r3
    9cb8:	686c      	ldr	r4, [r5, #4]
    9cba:	3508      	adds	r5, #8
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
    9cbc:	0c13      	lsrs	r3, r2, #16
    9cbe:	041b      	lsls	r3, r3, #16
    9cc0:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
    9cc4:	fb23 1304 	smlad	r3, r3, r4, r1
    9cc8:	4576      	cmp	r6, lr
    9cca:	d1e7      	bne.n	9c9c <arm_convolve_s8+0x2c0>
  *in_q15 += 2;
    9ccc:	992d      	ldr	r1, [sp, #180]	; 0xb4
                while (col_count)
    9cce:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9cd0:	b172      	cbz	r2, 9cf0 <arm_convolve_s8+0x314>
    9cd2:	f10e 32ff 	add.w	r2, lr, #4294967295
    9cd6:	980c      	ldr	r0, [sp, #48]	; 0x30
    9cd8:	eb0e 0500 	add.w	r5, lr, r0
                    sum += ker_a1 * ip_b1;
    9cdc:	f912 0f01 	ldrsb.w	r0, [r2, #1]!
    9ce0:	f931 4b02 	ldrsh.w	r4, [r1], #2
    9ce4:	fb04 3300 	mla	r3, r4, r0, r3
                while (col_count)
    9ce8:	4295      	cmp	r5, r2
    9cea:	d1f7      	bne.n	9cdc <arm_convolve_s8+0x300>
    9cec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9cee:	4496      	add	lr, r2
                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
    9cf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9cf2:	f852 4f04 	ldr.w	r4, [r2, #4]!
    9cf6:	920a      	str	r2, [sp, #40]	; 0x28
    9cf8:	9909      	ldr	r1, [sp, #36]	; 0x24
    9cfa:	f851 2f04 	ldr.w	r2, [r1, #4]!
    9cfe:	9109      	str	r1, [sp, #36]	; 0x24
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    9d00:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
    9d04:	408b      	lsls	r3, r1
    if ((m1 < 0) ^ (m2 < 0))
    9d06:	0fe1      	lsrs	r1, r4, #31
    9d08:	ebb1 7fd3 	cmp.w	r1, r3, lsr #31
    9d0c:	d08a      	beq.n	9c24 <arm_convolve_s8+0x248>
        mult = 1 - mult;
    9d0e:	4e21      	ldr	r6, [pc, #132]	; (9d94 <arm_convolve_s8+0x3b8>)
    9d10:	f04f 37ff 	mov.w	r7, #4294967295
    mult = mult + (q63_t)m1 * m2;
    9d14:	17e1      	asrs	r1, r4, #31
    9d16:	fb03 f501 	mul.w	r5, r3, r1
    9d1a:	17d9      	asrs	r1, r3, #31
    9d1c:	fb04 5501 	mla	r5, r4, r1, r5
    9d20:	fba3 0104 	umull	r0, r1, r3, r4
    9d24:	4429      	add	r1, r5
    9d26:	1980      	adds	r0, r0, r6
    9d28:	4179      	adcs	r1, r7
    result = (int32_t) (mult / (1ll << 31));
    9d2a:	4606      	mov	r6, r0
    9d2c:	460f      	mov	r7, r1
    9d2e:	2800      	cmp	r0, #0
    9d30:	f171 0500 	sbcs.w	r5, r1, #0
    9d34:	f6ff af7a 	blt.w	9c2c <arm_convolve_s8+0x250>
    9d38:	0ff1      	lsrs	r1, r6, #31
    9d3a:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    9d3e:	429c      	cmp	r4, r3
    9d40:	f43f af7a 	beq.w	9c38 <arm_convolve_s8+0x25c>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    9d44:	2a00      	cmp	r2, #0
    9d46:	dd82      	ble.n	9c4e <arm_convolve_s8+0x272>
    if (result < 0)
    9d48:	2900      	cmp	r1, #0
    9d4a:	da8c      	bge.n	9c66 <arm_convolve_s8+0x28a>
    q31_t threshold = remainder_mask >> 1;
    9d4c:	2300      	movs	r3, #0
    int32_t remainder = remainder_mask & dividend;
    9d4e:	4618      	mov	r0, r3
        threshold++;
    9d50:	3301      	adds	r3, #1
    9d52:	e785      	b.n	9c60 <arm_convolve_s8+0x284>
        input_data += (input_x * input_y * input_ch);
    9d54:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    9d56:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    9d58:	4413      	add	r3, r2
    9d5a:	933a      	str	r3, [sp, #232]	; 0xe8
        output_data += (output_x * output_y * output_ch);
    9d5c:	9b40      	ldr	r3, [sp, #256]	; 0x100
    9d5e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    9d60:	4413      	add	r3, r2
    9d62:	9340      	str	r3, [sp, #256]	; 0x100
    for (i_batch = 0; i_batch < input_batches; i_batch++)
    9d64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9d66:	3301      	adds	r3, #1
    9d68:	9323      	str	r3, [sp, #140]	; 0x8c
    9d6a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    9d6c:	4293      	cmp	r3, r2
    9d6e:	d009      	beq.n	9d84 <arm_convolve_s8+0x3a8>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
    9d70:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    9d72:	2b00      	cmp	r3, #0
    9d74:	d0ee      	beq.n	9d54 <arm_convolve_s8+0x378>
    9d76:	9b40      	ldr	r3, [sp, #256]	; 0x100
    9d78:	931a      	str	r3, [sp, #104]	; 0x68
    9d7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9d7c:	930a      	str	r3, [sp, #40]	; 0x28
    9d7e:	2300      	movs	r3, #0
    9d80:	931b      	str	r3, [sp, #108]	; 0x6c
    9d82:	e719      	b.n	9bb8 <arm_convolve_s8+0x1dc>
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
}
    9d84:	2000      	movs	r0, #0
    9d86:	b031      	add	sp, #196	; 0xc4
    9d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d8c:	0000b7e1 	.word	0x0000b7e1
    9d90:	00009ed5 	.word	0x00009ed5
    9d94:	c0000001 	.word	0xc0000001
    9d98:	0001831d 	.word	0x0001831d

00009d9c <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims* input_dims,
                                        const cmsis_nn_dims* filter_dims)
{
#if defined(ARM_MATH_DSP)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
    9d9c:	68c3      	ldr	r3, [r0, #12]
    9d9e:	009b      	lsls	r3, r3, #2
    9da0:	6888      	ldr	r0, [r1, #8]
    9da2:	fb00 f003 	mul.w	r0, r0, r3
    9da6:	684b      	ldr	r3, [r1, #4]
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
    9da8:	fb03 f000 	mul.w	r0, r3, r0
    9dac:	4770      	bx	lr
	...

00009db0 <arm_convolve_wrapper_s8>:
                                   const q7_t *filter_data,
                                   const cmsis_nn_dims* bias_dims,
                                   const int32_t *bias_data,
                                   const cmsis_nn_dims* output_dims,
                                   q7_t *output_data)
{
    9db0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9db2:	b089      	sub	sp, #36	; 0x24
    9db4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    9db6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    9db8:	9e14      	ldr	r6, [sp, #80]	; 0x50
    if ((conv_params->padding.w == 0) &&
    9dba:	690f      	ldr	r7, [r1, #16]
    9dbc:	b947      	cbnz	r7, 9dd0 <arm_convolve_wrapper_s8+0x20>
    9dbe:	694f      	ldr	r7, [r1, #20]
    9dc0:	b937      	cbnz	r7, 9dd0 <arm_convolve_wrapper_s8+0x20>
        (conv_params->padding.h == 0) &&
        (input_dims->c % 4 == 0) &&
    9dc2:	68df      	ldr	r7, [r3, #12]
        (conv_params->padding.h == 0) &&
    9dc4:	f017 0f03 	tst.w	r7, #3
    9dc8:	d102      	bne.n	9dd0 <arm_convolve_wrapper_s8+0x20>
        (input_dims->c % 4 == 0) &&
    9dca:	688f      	ldr	r7, [r1, #8]
    9dcc:	2f01      	cmp	r7, #1
    9dce:	d011      	beq.n	9df4 <arm_convolve_wrapper_s8+0x44>
                                        bias_dims,
                                        bias_data,
                                        output_dims,
                                        output_data);
    }
    else if ((output_dims->h == 1) &&
    9dd0:	6867      	ldr	r7, [r4, #4]
    9dd2:	2f01      	cmp	r7, #1
    9dd4:	d025      	beq.n	9e22 <arm_convolve_wrapper_s8+0x72>
                                     output_dims,
                                     output_data);
    }
    else
    {
        return arm_convolve_s8(ctx,
    9dd6:	9606      	str	r6, [sp, #24]
    9dd8:	9405      	str	r4, [sp, #20]
    9dda:	9c12      	ldr	r4, [sp, #72]	; 0x48
    9ddc:	9404      	str	r4, [sp, #16]
    9dde:	9c11      	ldr	r4, [sp, #68]	; 0x44
    9de0:	9403      	str	r4, [sp, #12]
    9de2:	9c10      	ldr	r4, [sp, #64]	; 0x40
    9de4:	9402      	str	r4, [sp, #8]
    9de6:	9501      	str	r5, [sp, #4]
    9de8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    9dea:	9400      	str	r4, [sp, #0]
    9dec:	4c1a      	ldr	r4, [pc, #104]	; (9e58 <arm_convolve_wrapper_s8+0xa8>)
    9dee:	47a0      	blx	r4
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
    9df0:	b009      	add	sp, #36	; 0x24
    9df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (conv_params->stride.w == 1) &&
    9df4:	68cf      	ldr	r7, [r1, #12]
    9df6:	2f01      	cmp	r7, #1
    9df8:	d1ea      	bne.n	9dd0 <arm_convolve_wrapper_s8+0x20>
        (conv_params->stride.h == 1) &&
    9dfa:	68af      	ldr	r7, [r5, #8]
    9dfc:	2f01      	cmp	r7, #1
    9dfe:	d1e7      	bne.n	9dd0 <arm_convolve_wrapper_s8+0x20>
        (filter_dims->w == 1) &&
    9e00:	686f      	ldr	r7, [r5, #4]
    9e02:	2f01      	cmp	r7, #1
    9e04:	d1e4      	bne.n	9dd0 <arm_convolve_wrapper_s8+0x20>
        return arm_convolve_1x1_s8_fast(ctx,
    9e06:	9606      	str	r6, [sp, #24]
    9e08:	9405      	str	r4, [sp, #20]
    9e0a:	9c12      	ldr	r4, [sp, #72]	; 0x48
    9e0c:	9404      	str	r4, [sp, #16]
    9e0e:	9c11      	ldr	r4, [sp, #68]	; 0x44
    9e10:	9403      	str	r4, [sp, #12]
    9e12:	9c10      	ldr	r4, [sp, #64]	; 0x40
    9e14:	9402      	str	r4, [sp, #8]
    9e16:	9501      	str	r5, [sp, #4]
    9e18:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    9e1a:	9400      	str	r4, [sp, #0]
    9e1c:	4c0f      	ldr	r4, [pc, #60]	; (9e5c <arm_convolve_wrapper_s8+0xac>)
    9e1e:	47a0      	blx	r4
    9e20:	e7e6      	b.n	9df0 <arm_convolve_wrapper_s8+0x40>
    else if ((output_dims->h == 1) &&
    9e22:	685f      	ldr	r7, [r3, #4]
    9e24:	2f01      	cmp	r7, #1
    9e26:	d1d6      	bne.n	9dd6 <arm_convolve_wrapper_s8+0x26>
             (input_dims->h == 1) &&
    9e28:	686f      	ldr	r7, [r5, #4]
    9e2a:	2f01      	cmp	r7, #1
    9e2c:	d1d3      	bne.n	9dd6 <arm_convolve_wrapper_s8+0x26>
             (output_dims->w % 4 == 0) &&
    9e2e:	68a7      	ldr	r7, [r4, #8]
             (filter_dims->h == 1) &&
    9e30:	f017 0f03 	tst.w	r7, #3
    9e34:	d1cf      	bne.n	9dd6 <arm_convolve_wrapper_s8+0x26>
             (output_dims->w % 4 == 0) &&
    9e36:	681f      	ldr	r7, [r3, #0]
    9e38:	2f01      	cmp	r7, #1
    9e3a:	d1cc      	bne.n	9dd6 <arm_convolve_wrapper_s8+0x26>
        return arm_convolve_1_x_n_s8(ctx,
    9e3c:	9606      	str	r6, [sp, #24]
    9e3e:	9405      	str	r4, [sp, #20]
    9e40:	9c12      	ldr	r4, [sp, #72]	; 0x48
    9e42:	9404      	str	r4, [sp, #16]
    9e44:	9c11      	ldr	r4, [sp, #68]	; 0x44
    9e46:	9403      	str	r4, [sp, #12]
    9e48:	9c10      	ldr	r4, [sp, #64]	; 0x40
    9e4a:	9402      	str	r4, [sp, #8]
    9e4c:	9501      	str	r5, [sp, #4]
    9e4e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    9e50:	9400      	str	r4, [sp, #0]
    9e52:	4c03      	ldr	r4, [pc, #12]	; (9e60 <arm_convolve_wrapper_s8+0xb0>)
    9e54:	47a0      	blx	r4
    9e56:	e7cb      	b.n	9df0 <arm_convolve_wrapper_s8+0x40>
    9e58:	000099dd 	.word	0x000099dd
    9e5c:	00009901 	.word	0x00009901
    9e60:	0000998d 	.word	0x0000998d

00009e64 <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params* conv_params,
                                                const cmsis_nn_dims* input_dims,
                                                const cmsis_nn_dims* filter_dims,
                                                const cmsis_nn_dims* output_dims)
{
    9e64:	b510      	push	{r4, lr}
    9e66:	4604      	mov	r4, r0
    9e68:	4608      	mov	r0, r1
    if ((conv_params->padding.w == 0) &&
    9e6a:	6921      	ldr	r1, [r4, #16]
    9e6c:	b941      	cbnz	r1, 9e80 <arm_convolve_wrapper_s8_get_buffer_size+0x1c>
    9e6e:	6961      	ldr	r1, [r4, #20]
    9e70:	b931      	cbnz	r1, 9e80 <arm_convolve_wrapper_s8_get_buffer_size+0x1c>
        (conv_params->padding.h == 0) &&
        (input_dims->c % 4 == 0) &&
    9e72:	68c1      	ldr	r1, [r0, #12]
        (conv_params->padding.h == 0) &&
    9e74:	f011 0f03 	tst.w	r1, #3
    9e78:	d102      	bne.n	9e80 <arm_convolve_wrapper_s8_get_buffer_size+0x1c>
        (input_dims->c % 4 == 0) &&
    9e7a:	68a1      	ldr	r1, [r4, #8]
    9e7c:	2901      	cmp	r1, #1
    9e7e:	d006      	beq.n	9e8e <arm_convolve_wrapper_s8_get_buffer_size+0x2a>
        (filter_dims->w == 1) &&
        (filter_dims->h == 1))
    {
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
    }
    else if ((output_dims->h == 1) &&
    9e80:	6859      	ldr	r1, [r3, #4]
    9e82:	2901      	cmp	r1, #1
    9e84:	d00f      	beq.n	9ea6 <arm_convolve_wrapper_s8_get_buffer_size+0x42>
    {
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
    9e86:	4611      	mov	r1, r2
    9e88:	4b0f      	ldr	r3, [pc, #60]	; (9ec8 <arm_convolve_wrapper_s8_get_buffer_size+0x64>)
    9e8a:	4798      	blx	r3
    }
}
    9e8c:	bd10      	pop	{r4, pc}
        (conv_params->stride.w == 1) &&
    9e8e:	68e1      	ldr	r1, [r4, #12]
    9e90:	2901      	cmp	r1, #1
    9e92:	d1f5      	bne.n	9e80 <arm_convolve_wrapper_s8_get_buffer_size+0x1c>
        (conv_params->stride.h == 1) &&
    9e94:	6891      	ldr	r1, [r2, #8]
    9e96:	2901      	cmp	r1, #1
    9e98:	d1f2      	bne.n	9e80 <arm_convolve_wrapper_s8_get_buffer_size+0x1c>
        (filter_dims->w == 1) &&
    9e9a:	6851      	ldr	r1, [r2, #4]
    9e9c:	2901      	cmp	r1, #1
    9e9e:	d1ef      	bne.n	9e80 <arm_convolve_wrapper_s8_get_buffer_size+0x1c>
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
    9ea0:	4b0a      	ldr	r3, [pc, #40]	; (9ecc <arm_convolve_wrapper_s8_get_buffer_size+0x68>)
    9ea2:	4798      	blx	r3
    9ea4:	bd10      	pop	{r4, pc}
    else if ((output_dims->h == 1) &&
    9ea6:	6841      	ldr	r1, [r0, #4]
    9ea8:	2901      	cmp	r1, #1
    9eaa:	d1ec      	bne.n	9e86 <arm_convolve_wrapper_s8_get_buffer_size+0x22>
             (input_dims->h == 1) &&
    9eac:	6851      	ldr	r1, [r2, #4]
    9eae:	2901      	cmp	r1, #1
    9eb0:	d1e9      	bne.n	9e86 <arm_convolve_wrapper_s8_get_buffer_size+0x22>
             (output_dims->w % 4 == 0) &&
    9eb2:	689b      	ldr	r3, [r3, #8]
             (filter_dims->h == 1) &&
    9eb4:	f013 0f03 	tst.w	r3, #3
    9eb8:	d1e5      	bne.n	9e86 <arm_convolve_wrapper_s8_get_buffer_size+0x22>
             (output_dims->w % 4 == 0) &&
    9eba:	6803      	ldr	r3, [r0, #0]
    9ebc:	2b01      	cmp	r3, #1
    9ebe:	d1e2      	bne.n	9e86 <arm_convolve_wrapper_s8_get_buffer_size+0x22>
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
    9ec0:	4611      	mov	r1, r2
    9ec2:	4b03      	ldr	r3, [pc, #12]	; (9ed0 <arm_convolve_wrapper_s8_get_buffer_size+0x6c>)
    9ec4:	4798      	blx	r3
    9ec6:	bd10      	pop	{r4, pc}
    9ec8:	00009d9d 	.word	0x00009d9d
    9ecc:	00009989 	.word	0x00009989
    9ed0:	000099c9 	.word	0x000099c9

00009ed4 <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
    9ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ed8:	b09d      	sub	sp, #116	; 0x74
    9eda:	4683      	mov	fp, r0
    9edc:	460d      	mov	r5, r1
    9ede:	910e      	str	r1, [sp, #56]	; 0x38
    9ee0:	4614      	mov	r4, r2
    9ee2:	9219      	str	r2, [sp, #100]	; 0x64
    9ee4:	461f      	mov	r7, r3
    9ee6:	9317      	str	r3, [sp, #92]	; 0x5c
    9ee8:	f9bd 00a0 	ldrsh.w	r0, [sp, #160]	; 0xa0
    9eec:	9004      	str	r0, [sp, #16]
    9eee:	f9bd 00a4 	ldrsh.w	r0, [sp, #164]	; 0xa4
    9ef2:	9005      	str	r0, [sp, #20]
    9ef4:	f8bd 00a8 	ldrh.w	r0, [sp, #168]	; 0xa8
    9ef8:	901a      	str	r0, [sp, #104]	; 0x68

    return out_1;

#elif defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
    9efa:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
    9efc:	18b2      	adds	r2, r6, r2
    9efe:	4611      	mov	r1, r2
    9f00:	9218      	str	r2, [sp, #96]	; 0x60
    const int32_t *bias = output_bias;

    uint16_t row_count = output_ch / 2;
    const q7_t *ip_a0 = input_a;
    /* this loop over rows in A */
    while (row_count)
    9f02:	0863      	lsrs	r3, r4, #1
    9f04:	f000 833f 	beq.w	a586 <arm_nn_mat_mult_kernel_s8_s16+0x6b2>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;
    9f08:	900c      	str	r0, [sp, #48]	; 0x30
    9f0a:	eb05 0240 	add.w	r2, r5, r0, lsl #1
    9f0e:	4614      	mov	r4, r2
    9f10:	9212      	str	r2, [sp, #72]	; 0x48
        q31_t ch_0_out_0 = *bias;
        q31_t ch_0_out_1 = *bias++;
        q31_t ch_1_out_0 = *bias;
        q31_t ch_1_out_1 = *bias++;

        uint16_t col_count = num_col_a / 4;
    9f12:	4602      	mov	r2, r0
    9f14:	0880      	lsrs	r0, r0, #2
    9f16:	900f      	str	r0, [sp, #60]	; 0x3c
    9f18:	9e2b      	ldr	r6, [sp, #172]	; 0xac
    9f1a:	3608      	adds	r6, #8
    9f1c:	9607      	str	r6, [sp, #28]
    9f1e:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
    9f20:	3602      	adds	r6, #2
    9f22:	9608      	str	r6, [sp, #32]
    9f24:	3102      	adds	r1, #2
    9f26:	9109      	str	r1, [sp, #36]	; 0x24
    9f28:	9926      	ldr	r1, [sp, #152]	; 0x98
    9f2a:	3108      	adds	r1, #8
    9f2c:	910a      	str	r1, [sp, #40]	; 0x28
    9f2e:	4639      	mov	r1, r7
    9f30:	3108      	adds	r1, #8
    9f32:	910b      	str	r1, [sp, #44]	; 0x2c
    9f34:	3b01      	subs	r3, #1
    9f36:	b29b      	uxth	r3, r3
    9f38:	931b      	str	r3, [sp, #108]	; 0x6c
    9f3a:	3302      	adds	r3, #2
    9f3c:	992b      	ldr	r1, [sp, #172]	; 0xac
    9f3e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    9f42:	9311      	str	r3, [sp, #68]	; 0x44
    9f44:	1e43      	subs	r3, r0, #1
    9f46:	b29b      	uxth	r3, r3
    9f48:	3301      	adds	r3, #1
    9f4a:	0099      	lsls	r1, r3, #2
    9f4c:	910d      	str	r1, [sp, #52]	; 0x34
    9f4e:	00db      	lsls	r3, r3, #3
    9f50:	4621      	mov	r1, r4
    9f52:	4419      	add	r1, r3
    9f54:	9114      	str	r1, [sp, #80]	; 0x50
    9f56:	18eb      	adds	r3, r5, r3
    9f58:	9313      	str	r3, [sp, #76]	; 0x4c
            ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
            ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

            col_count--;
        } /* while over col_count */
        col_count = num_col_a & 0x3;
    9f5a:	f002 0303 	and.w	r3, r2, #3
    9f5e:	9310      	str	r3, [sp, #64]	; 0x40
    9f60:	3b01      	subs	r3, #1
    9f62:	b29b      	uxth	r3, r3
    9f64:	9315      	str	r3, [sp, #84]	; 0x54
    9f66:	3301      	adds	r3, #1
    9f68:	9316      	str	r3, [sp, #88]	; 0x58
    const q31_t remainder_mask = (1 << exponent) - 1;
    9f6a:	46da      	mov	sl, fp
    9f6c:	e0ac      	b.n	a0c8 <arm_nn_mat_mult_kernel_s8_s16+0x1f4>
        const q15_t *ip_b1 = ip_b0 + num_col_a;
    9f6e:	9f12      	ldr	r7, [sp, #72]	; 0x48
        const q15_t *ip_b0 = input_b;
    9f70:	9e0e      	ldr	r6, [sp, #56]	; 0x38
        q31_t ch_1_out_1 = *bias++;
    9f72:	46c1      	mov	r9, r8
        q31_t ch_0_out_1 = *bias++;
    9f74:	462a      	mov	r2, r5
    9f76:	e103      	b.n	a180 <arm_nn_mat_mult_kernel_s8_s16+0x2ac>
    q63_t mult = 1 << 30;
    9f78:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    9f7c:	9100      	str	r1, [sp, #0]
    9f7e:	2100      	movs	r1, #0
    9f80:	9101      	str	r1, [sp, #4]
    9f82:	e12f      	b.n	a1e4 <arm_nn_mat_mult_kernel_s8_s16+0x310>
    result = (int32_t) (mult / (1ll << 31));
    9f84:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    9f88:	2700      	movs	r7, #0
    9f8a:	1836      	adds	r6, r6, r0
    9f8c:	414f      	adcs	r7, r1
    9f8e:	e13d      	b.n	a20c <arm_nn_mat_mult_kernel_s8_s16+0x338>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    9f90:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
    9f94:	f040 8140 	bne.w	a218 <arm_nn_mat_mult_kernel_s8_s16+0x344>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    9f98:	2c00      	cmp	r4, #0
    9f9a:	dd02      	ble.n	9fa2 <arm_nn_mat_mult_kernel_s8_s16+0xce>
        result = Q31_MAX;
    9f9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    9fa0:	e145      	b.n	a22e <arm_nn_mat_mult_kernel_s8_s16+0x35a>
    9fa2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    9fa6:	4264      	negs	r4, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
    9fa8:	2301      	movs	r3, #1
    9faa:	40a3      	lsls	r3, r4
    9fac:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
    9fae:	ea01 0003 	and.w	r0, r1, r3
    q31_t threshold = remainder_mask >> 1;
    9fb2:	105b      	asrs	r3, r3, #1
    if (result < 0)
    9fb4:	4121      	asrs	r1, r4
    9fb6:	f140 8137 	bpl.w	a228 <arm_nn_mat_mult_kernel_s8_s16+0x354>
    9fba:	e134      	b.n	a226 <arm_nn_mat_mult_kernel_s8_s16+0x352>
    q63_t mult = 1 << 30;
    9fbc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    9fc0:	2500      	movs	r5, #0
    9fc2:	e151      	b.n	a268 <arm_nn_mat_mult_kernel_s8_s16+0x394>
    result = (int32_t) (mult / (1ll << 31));
    9fc4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    9fc8:	2500      	movs	r5, #0
    9fca:	1824      	adds	r4, r4, r0
    9fcc:	414d      	adcs	r5, r1
    9fce:	e15d      	b.n	a28c <arm_nn_mat_mult_kernel_s8_s16+0x3b8>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    9fd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    9fd4:	f040 8160 	bne.w	a298 <arm_nn_mat_mult_kernel_s8_s16+0x3c4>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    9fd8:	2e00      	cmp	r6, #0
    9fda:	dd02      	ble.n	9fe2 <arm_nn_mat_mult_kernel_s8_s16+0x10e>
        result = Q31_MAX;
    9fdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    9fe0:	e165      	b.n	a2ae <arm_nn_mat_mult_kernel_s8_s16+0x3da>
    9fe2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    9fe6:	4276      	negs	r6, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
    9fe8:	2301      	movs	r3, #1
    9fea:	40b3      	lsls	r3, r6
    9fec:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
    9fee:	ea01 0203 	and.w	r2, r1, r3
    q31_t threshold = remainder_mask >> 1;
    9ff2:	105b      	asrs	r3, r3, #1
    if (result < 0)
    9ff4:	4131      	asrs	r1, r6
    9ff6:	f140 8157 	bpl.w	a2a8 <arm_nn_mat_mult_kernel_s8_s16+0x3d4>
    9ffa:	e154      	b.n	a2a6 <arm_nn_mat_mult_kernel_s8_s16+0x3d2>
    q63_t mult = 1 << 30;
    9ffc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    a000:	2500      	movs	r5, #0
    a002:	e172      	b.n	a2ea <arm_nn_mat_mult_kernel_s8_s16+0x416>
    result = (int32_t) (mult / (1ll << 31));
    a004:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    a008:	2500      	movs	r5, #0
    a00a:	18a4      	adds	r4, r4, r2
    a00c:	415d      	adcs	r5, r3
    a00e:	e17e      	b.n	a30e <arm_nn_mat_mult_kernel_s8_s16+0x43a>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    a010:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
    a014:	f040 8181 	bne.w	a31a <arm_nn_mat_mult_kernel_s8_s16+0x446>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a018:	2800      	cmp	r0, #0
    a01a:	dd02      	ble.n	a022 <arm_nn_mat_mult_kernel_s8_s16+0x14e>
        result = Q31_MAX;
    a01c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    a020:	e186      	b.n	a330 <arm_nn_mat_mult_kernel_s8_s16+0x45c>
    a022:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a026:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
    a028:	2201      	movs	r2, #1
    a02a:	4082      	lsls	r2, r0
    a02c:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
    a02e:	ea03 0102 	and.w	r1, r3, r2
    q31_t threshold = remainder_mask >> 1;
    a032:	1052      	asrs	r2, r2, #1
    if (result < 0)
    a034:	4103      	asrs	r3, r0
    a036:	f140 8178 	bpl.w	a32a <arm_nn_mat_mult_kernel_s8_s16+0x456>
    a03a:	e175      	b.n	a328 <arm_nn_mat_mult_kernel_s8_s16+0x454>
    q63_t mult = 1 << 30;
    a03c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    a040:	2700      	movs	r7, #0
    a042:	e192      	b.n	a36a <arm_nn_mat_mult_kernel_s8_s16+0x496>
    result = (int32_t) (mult / (1ll << 31));
    a044:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    a048:	2700      	movs	r7, #0
    a04a:	18b6      	adds	r6, r6, r2
    a04c:	415f      	adcs	r7, r3
    a04e:	e19e      	b.n	a38e <arm_nn_mat_mult_kernel_s8_s16+0x4ba>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    a050:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    a054:	f040 81a1 	bne.w	a39a <arm_nn_mat_mult_kernel_s8_s16+0x4c6>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a058:	2d00      	cmp	r5, #0
    a05a:	dd02      	ble.n	a062 <arm_nn_mat_mult_kernel_s8_s16+0x18e>
        result = Q31_MAX;
    a05c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    a060:	e011      	b.n	a086 <arm_nn_mat_mult_kernel_s8_s16+0x1b2>
    a062:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a066:	426d      	negs	r5, r5
    const q31_t remainder_mask = (1 << exponent) - 1;
    a068:	2201      	movs	r2, #1
    a06a:	40aa      	lsls	r2, r5
    a06c:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
    a06e:	ea03 0102 	and.w	r1, r3, r2
    q31_t threshold = remainder_mask >> 1;
    a072:	1052      	asrs	r2, r2, #1
    if (result < 0)
    a074:	412b      	asrs	r3, r5
    a076:	d503      	bpl.n	a080 <arm_nn_mat_mult_kernel_s8_s16+0x1ac>
    a078:	e001      	b.n	a07e <arm_nn_mat_mult_kernel_s8_s16+0x1aa>
    q31_t threshold = remainder_mask >> 1;
    a07a:	2200      	movs	r2, #0
    int32_t remainder = remainder_mask & dividend;
    a07c:	4611      	mov	r1, r2
        threshold++;
    a07e:	3201      	adds	r2, #1
    if (remainder > threshold)
    a080:	428a      	cmp	r2, r1
        result++;
    a082:	bfb8      	it	lt
    a084:	3301      	addlt	r3, #1
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
        *out_0++ = (q7_t)ch_1_out_0;

        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
        ch_1_out_1 += out_offset;
    a086:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    a088:	4413      	add	r3, r2
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
    a08a:	9a04      	ldr	r2, [sp, #16]
    a08c:	4293      	cmp	r3, r2
    a08e:	bfb8      	it	lt
    a090:	4613      	movlt	r3, r2
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
    a092:	9a05      	ldr	r2, [sp, #20]
    a094:	4293      	cmp	r3, r2
    a096:	bfa8      	it	ge
    a098:	4613      	movge	r3, r2
        *out_1++ = (q7_t)ch_1_out_1;
    a09a:	f80b 3c01 	strb.w	r3, [fp, #-1]
        out_mult++;
        out_shift++;

        /* skip row */
        ip_a0 += num_col_a;
    a09e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a0a0:	449a      	add	sl, r3
    a0a2:	9b07      	ldr	r3, [sp, #28]
    a0a4:	3308      	adds	r3, #8
    a0a6:	9307      	str	r3, [sp, #28]
    a0a8:	9a08      	ldr	r2, [sp, #32]
    a0aa:	3202      	adds	r2, #2
    a0ac:	9208      	str	r2, [sp, #32]
    a0ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a0b0:	3202      	adds	r2, #2
    a0b2:	9209      	str	r2, [sp, #36]	; 0x24
    a0b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a0b6:	3208      	adds	r2, #8
    a0b8:	920a      	str	r2, [sp, #40]	; 0x28
    a0ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a0bc:	3208      	adds	r2, #8
    a0be:	920b      	str	r2, [sp, #44]	; 0x2c
    while (row_count)
    a0c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a0c2:	4293      	cmp	r3, r2
    a0c4:	f000 8172 	beq.w	a3ac <arm_nn_mat_mult_kernel_s8_s16+0x4d8>
        const q7_t *ip_a1 = ip_a0 + num_col_a;
    a0c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a0ca:	4453      	add	r3, sl
    a0cc:	4619      	mov	r1, r3
    a0ce:	9306      	str	r3, [sp, #24]
        q31_t ch_0_out_0 = *bias;
    a0d0:	9a07      	ldr	r2, [sp, #28]
    a0d2:	f852 5c08 	ldr.w	r5, [r2, #-8]
        q31_t ch_1_out_0 = *bias;
    a0d6:	f852 8c04 	ldr.w	r8, [r2, #-4]
        while (col_count)
    a0da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a0dc:	2b00      	cmp	r3, #0
    a0de:	f43f af46 	beq.w	9f6e <arm_nn_mat_mult_kernel_s8_s16+0x9a>
    a0e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a0e4:	4453      	add	r3, sl
    a0e6:	9303      	str	r3, [sp, #12]
    a0e8:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    a0ec:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
    a0f0:	46c1      	mov	r9, r8
    a0f2:	462a      	mov	r2, r5
    a0f4:	9100      	str	r1, [sp, #0]
  memcpy(&val, *in_q15, 4);
    a0f6:	f8de 6000 	ldr.w	r6, [lr]
    a0fa:	f8dc b000 	ldr.w	fp, [ip]
  memcpy(&val, *in_q7, 4);
    a0fe:	f85a 3b04 	ldr.w	r3, [sl], #4
  return (op1 >> op2) | (op1 << (32U - op2));
    a102:	ea4f 2133 	mov.w	r1, r3, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    a106:	fa2f f081 	sxtb16	r0, r1
    a10a:	fa2f f383 	sxtb16	r3, r3
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
    a10e:	0c04      	lsrs	r4, r0, #16
    a110:	0424      	lsls	r4, r4, #16
    a112:	ea44 4413 	orr.w	r4, r4, r3, lsr #16
  *out1 = (int32_t) (__PKHBT (inAbuf2, inAbuf1, 16));
    a116:	b299      	uxth	r1, r3
    a118:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  memcpy(&val, *in_q7, 4);
    a11c:	9800      	ldr	r0, [sp, #0]
    a11e:	f850 3b04 	ldr.w	r3, [r0], #4
    a122:	9000      	str	r0, [sp, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
    a124:	ea4f 2733 	mov.w	r7, r3, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    a128:	fa2f f787 	sxtb16	r7, r7
    a12c:	fa2f f383 	sxtb16	r3, r3
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
    a130:	0c38      	lsrs	r0, r7, #16
    a132:	0400      	lsls	r0, r0, #16
    a134:	ea40 4013 	orr.w	r0, r0, r3, lsr #16
  *out1 = (int32_t) (__PKHBT (inAbuf2, inAbuf1, 16));
    a138:	b29b      	uxth	r3, r3
    a13a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    a13e:	fb21 5506 	smlad	r5, r1, r6, r5
    a142:	fb21 210b 	smlad	r1, r1, fp, r2
    a146:	fb23 8806 	smlad	r8, r3, r6, r8
    a14a:	fb23 930b 	smlad	r3, r3, fp, r9
  memcpy(&val, *in_q15, 4);
    a14e:	f8de 6004 	ldr.w	r6, [lr, #4]
    a152:	f10e 0e08 	add.w	lr, lr, #8
    a156:	f8dc 9004 	ldr.w	r9, [ip, #4]
    a15a:	f10c 0c08 	add.w	ip, ip, #8
    a15e:	fb24 5506 	smlad	r5, r4, r6, r5
    a162:	fb24 1209 	smlad	r2, r4, r9, r1
    a166:	fb20 8806 	smlad	r8, r0, r6, r8
    a16a:	fb20 3909 	smlad	r9, r0, r9, r3
    a16e:	9b03      	ldr	r3, [sp, #12]
    a170:	459a      	cmp	sl, r3
    a172:	d1c0      	bne.n	a0f6 <arm_nn_mat_mult_kernel_s8_s16+0x222>
    a174:	9b06      	ldr	r3, [sp, #24]
    a176:	990d      	ldr	r1, [sp, #52]	; 0x34
    a178:	440b      	add	r3, r1
    a17a:	9306      	str	r3, [sp, #24]
  *in_q15 += 2;
    a17c:	9f14      	ldr	r7, [sp, #80]	; 0x50
    a17e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
        while (col_count)
    a180:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a182:	b1d3      	cbz	r3, a1ba <arm_nn_mat_mult_kernel_s8_s16+0x2e6>
    a184:	f10a 33ff 	add.w	r3, sl, #4294967295
    a188:	9915      	ldr	r1, [sp, #84]	; 0x54
    a18a:	eb0a 0e01 	add.w	lr, sl, r1
    a18e:	f8dd c018 	ldr.w	ip, [sp, #24]
            ch_0_out_0 += a0 * b0;
    a192:	f913 0f01 	ldrsb.w	r0, [r3, #1]!
    a196:	f936 4b02 	ldrsh.w	r4, [r6], #2
    a19a:	fb04 5500 	mla	r5, r4, r0, r5
            ch_0_out_1 += a0 * b1;
    a19e:	f937 1b02 	ldrsh.w	r1, [r7], #2
    a1a2:	fb01 2200 	mla	r2, r1, r0, r2
            ch_1_out_0 += a1 * b0;
    a1a6:	f91c 0b01 	ldrsb.w	r0, [ip], #1
    a1aa:	fb00 8804 	mla	r8, r0, r4, r8
            ch_1_out_1 += a1 * b1;
    a1ae:	fb00 9901 	mla	r9, r0, r1, r9
        while (col_count)
    a1b2:	4573      	cmp	r3, lr
    a1b4:	d1ed      	bne.n	a192 <arm_nn_mat_mult_kernel_s8_s16+0x2be>
    a1b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a1b8:	449a      	add	sl, r3
    a1ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a1bc:	469c      	mov	ip, r3
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
    a1be:	f853 3c08 	ldr.w	r3, [r3, #-8]
    a1c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    a1c4:	468e      	mov	lr, r1
    a1c6:	f851 4c08 	ldr.w	r4, [r1, #-8]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a1ca:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
    a1ce:	408d      	lsls	r5, r1
    if ((m1 < 0) ^ (m2 < 0))
    a1d0:	0fd9      	lsrs	r1, r3, #31
    a1d2:	ebb1 7fd5 	cmp.w	r1, r5, lsr #31
    a1d6:	f43f aecf 	beq.w	9f78 <arm_nn_mat_mult_kernel_s8_s16+0xa4>
        mult = 1 - mult;
    a1da:	4973      	ldr	r1, [pc, #460]	; (a3a8 <arm_nn_mat_mult_kernel_s8_s16+0x4d4>)
    a1dc:	9100      	str	r1, [sp, #0]
    a1de:	f04f 31ff 	mov.w	r1, #4294967295
    a1e2:	9101      	str	r1, [sp, #4]
    mult = mult + (q63_t)m1 * m2;
    a1e4:	17d9      	asrs	r1, r3, #31
    a1e6:	fb05 f601 	mul.w	r6, r5, r1
    a1ea:	17e9      	asrs	r1, r5, #31
    a1ec:	fb03 6601 	mla	r6, r3, r1, r6
    a1f0:	fba5 0103 	umull	r0, r1, r5, r3
    a1f4:	4431      	add	r1, r6
    a1f6:	e9dd 6700 	ldrd	r6, r7, [sp]
    a1fa:	1836      	adds	r6, r6, r0
    a1fc:	414f      	adcs	r7, r1
    a1fe:	4630      	mov	r0, r6
    a200:	4639      	mov	r1, r7
    result = (int32_t) (mult / (1ll << 31));
    a202:	2e00      	cmp	r6, #0
    a204:	f177 0b00 	sbcs.w	fp, r7, #0
    a208:	f6ff aebc 	blt.w	9f84 <arm_nn_mat_mult_kernel_s8_s16+0xb0>
    a20c:	0ff1      	lsrs	r1, r6, #31
    a20e:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    a212:	42ab      	cmp	r3, r5
    a214:	f43f aebc 	beq.w	9f90 <arm_nn_mat_mult_kernel_s8_s16+0xbc>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a218:	2c00      	cmp	r4, #0
    a21a:	f77f aec4 	ble.w	9fa6 <arm_nn_mat_mult_kernel_s8_s16+0xd2>
    if (result < 0)
    a21e:	2900      	cmp	r1, #0
    a220:	da05      	bge.n	a22e <arm_nn_mat_mult_kernel_s8_s16+0x35a>
    q31_t threshold = remainder_mask >> 1;
    a222:	2300      	movs	r3, #0
    int32_t remainder = remainder_mask & dividend;
    a224:	4618      	mov	r0, r3
        threshold++;
    a226:	3301      	adds	r3, #1
    if (remainder > threshold)
    a228:	4283      	cmp	r3, r0
        result++;
    a22a:	bfb8      	it	lt
    a22c:	3101      	addlt	r1, #1
        ch_0_out_0 += out_offset;
    a22e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    a230:	4419      	add	r1, r3
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
    a232:	9b04      	ldr	r3, [sp, #16]
    a234:	4299      	cmp	r1, r3
    a236:	bfb8      	it	lt
    a238:	4619      	movlt	r1, r3
    a23a:	9b08      	ldr	r3, [sp, #32]
    a23c:	9300      	str	r3, [sp, #0]
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
    a23e:	9805      	ldr	r0, [sp, #20]
    a240:	4281      	cmp	r1, r0
    a242:	bfa8      	it	ge
    a244:	4601      	movge	r1, r0
        *out_0++ = (q7_t)ch_0_out_0;
    a246:	f803 1c02 	strb.w	r1, [r3, #-2]
        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
    a24a:	f85c 3c08 	ldr.w	r3, [ip, #-8]
    a24e:	f85e 6c08 	ldr.w	r6, [lr, #-8]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a252:	ea26 71e6 	bic.w	r1, r6, r6, asr #31
    a256:	408a      	lsls	r2, r1
    if ((m1 < 0) ^ (m2 < 0))
    a258:	0fd9      	lsrs	r1, r3, #31
    a25a:	ebb1 7fd2 	cmp.w	r1, r2, lsr #31
    a25e:	f43f aead 	beq.w	9fbc <arm_nn_mat_mult_kernel_s8_s16+0xe8>
        mult = 1 - mult;
    a262:	4c51      	ldr	r4, [pc, #324]	; (a3a8 <arm_nn_mat_mult_kernel_s8_s16+0x4d4>)
    a264:	f04f 35ff 	mov.w	r5, #4294967295
    mult = mult + (q63_t)m1 * m2;
    a268:	17d9      	asrs	r1, r3, #31
    a26a:	fb02 f701 	mul.w	r7, r2, r1
    a26e:	17d1      	asrs	r1, r2, #31
    a270:	fb03 7701 	mla	r7, r3, r1, r7
    a274:	fba2 0103 	umull	r0, r1, r2, r3
    a278:	4439      	add	r1, r7
    a27a:	1900      	adds	r0, r0, r4
    a27c:	4169      	adcs	r1, r5
    result = (int32_t) (mult / (1ll << 31));
    a27e:	4604      	mov	r4, r0
    a280:	460d      	mov	r5, r1
    a282:	2800      	cmp	r0, #0
    a284:	f171 0700 	sbcs.w	r7, r1, #0
    a288:	f6ff ae9c 	blt.w	9fc4 <arm_nn_mat_mult_kernel_s8_s16+0xf0>
    a28c:	0fe1      	lsrs	r1, r4, #31
    a28e:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    a292:	4293      	cmp	r3, r2
    a294:	f43f ae9c 	beq.w	9fd0 <arm_nn_mat_mult_kernel_s8_s16+0xfc>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a298:	2e00      	cmp	r6, #0
    a29a:	f77f aea4 	ble.w	9fe6 <arm_nn_mat_mult_kernel_s8_s16+0x112>
    if (result < 0)
    a29e:	2900      	cmp	r1, #0
    a2a0:	da05      	bge.n	a2ae <arm_nn_mat_mult_kernel_s8_s16+0x3da>
    q31_t threshold = remainder_mask >> 1;
    a2a2:	2300      	movs	r3, #0
    int32_t remainder = remainder_mask & dividend;
    a2a4:	461a      	mov	r2, r3
        threshold++;
    a2a6:	3301      	adds	r3, #1
    if (remainder > threshold)
    a2a8:	4293      	cmp	r3, r2
        result++;
    a2aa:	bfb8      	it	lt
    a2ac:	3101      	addlt	r1, #1
        ch_0_out_1 += out_offset;
    a2ae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    a2b0:	4419      	add	r1, r3
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
    a2b2:	9b04      	ldr	r3, [sp, #16]
    a2b4:	4299      	cmp	r1, r3
    a2b6:	bfb8      	it	lt
    a2b8:	4619      	movlt	r1, r3
    a2ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a2bc:	4693      	mov	fp, r2
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
    a2be:	9b05      	ldr	r3, [sp, #20]
    a2c0:	4299      	cmp	r1, r3
    a2c2:	bfa8      	it	ge
    a2c4:	4619      	movge	r1, r3
        *out_1++ = (q7_t)ch_0_out_1;
    a2c6:	f802 1c02 	strb.w	r1, [r2, #-2]
        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
    a2ca:	f85c 1c04 	ldr.w	r1, [ip, #-4]
    a2ce:	f85e 0c04 	ldr.w	r0, [lr, #-4]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a2d2:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
    a2d6:	fa08 f707 	lsl.w	r7, r8, r7
    if ((m1 < 0) ^ (m2 < 0))
    a2da:	0fcb      	lsrs	r3, r1, #31
    a2dc:	ebb3 7fd7 	cmp.w	r3, r7, lsr #31
    a2e0:	f43f ae8c 	beq.w	9ffc <arm_nn_mat_mult_kernel_s8_s16+0x128>
        mult = 1 - mult;
    a2e4:	4c30      	ldr	r4, [pc, #192]	; (a3a8 <arm_nn_mat_mult_kernel_s8_s16+0x4d4>)
    a2e6:	f04f 35ff 	mov.w	r5, #4294967295
    mult = mult + (q63_t)m1 * m2;
    a2ea:	17cb      	asrs	r3, r1, #31
    a2ec:	fb07 f603 	mul.w	r6, r7, r3
    a2f0:	17fb      	asrs	r3, r7, #31
    a2f2:	fb01 6603 	mla	r6, r1, r3, r6
    a2f6:	fba7 2301 	umull	r2, r3, r7, r1
    a2fa:	4433      	add	r3, r6
    a2fc:	1912      	adds	r2, r2, r4
    a2fe:	416b      	adcs	r3, r5
    result = (int32_t) (mult / (1ll << 31));
    a300:	4614      	mov	r4, r2
    a302:	461d      	mov	r5, r3
    a304:	2a00      	cmp	r2, #0
    a306:	f173 0600 	sbcs.w	r6, r3, #0
    a30a:	f6ff ae7b 	blt.w	a004 <arm_nn_mat_mult_kernel_s8_s16+0x130>
    a30e:	0fe3      	lsrs	r3, r4, #31
    a310:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    a314:	42b9      	cmp	r1, r7
    a316:	f43f ae7b 	beq.w	a010 <arm_nn_mat_mult_kernel_s8_s16+0x13c>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a31a:	2800      	cmp	r0, #0
    a31c:	f77f ae83 	ble.w	a026 <arm_nn_mat_mult_kernel_s8_s16+0x152>
    if (result < 0)
    a320:	2b00      	cmp	r3, #0
    a322:	da05      	bge.n	a330 <arm_nn_mat_mult_kernel_s8_s16+0x45c>
    q31_t threshold = remainder_mask >> 1;
    a324:	2200      	movs	r2, #0
    int32_t remainder = remainder_mask & dividend;
    a326:	4611      	mov	r1, r2
        threshold++;
    a328:	3201      	adds	r2, #1
    if (remainder > threshold)
    a32a:	428a      	cmp	r2, r1
        result++;
    a32c:	bfb8      	it	lt
    a32e:	3301      	addlt	r3, #1
        ch_1_out_0 += out_offset;
    a330:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    a332:	4413      	add	r3, r2
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
    a334:	9a04      	ldr	r2, [sp, #16]
    a336:	4293      	cmp	r3, r2
    a338:	bfb8      	it	lt
    a33a:	4613      	movlt	r3, r2
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
    a33c:	9a05      	ldr	r2, [sp, #20]
    a33e:	4293      	cmp	r3, r2
    a340:	bfa8      	it	ge
    a342:	4613      	movge	r3, r2
        *out_0++ = (q7_t)ch_1_out_0;
    a344:	9a00      	ldr	r2, [sp, #0]
    a346:	f802 3c01 	strb.w	r3, [r2, #-1]
        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
    a34a:	f85c 4c04 	ldr.w	r4, [ip, #-4]
    a34e:	f85e 5c04 	ldr.w	r5, [lr, #-4]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a352:	ea25 70e5 	bic.w	r0, r5, r5, asr #31
    a356:	fa09 f000 	lsl.w	r0, r9, r0
    if ((m1 < 0) ^ (m2 < 0))
    a35a:	0fe3      	lsrs	r3, r4, #31
    a35c:	ebb3 7fd0 	cmp.w	r3, r0, lsr #31
    a360:	f43f ae6c 	beq.w	a03c <arm_nn_mat_mult_kernel_s8_s16+0x168>
        mult = 1 - mult;
    a364:	4e10      	ldr	r6, [pc, #64]	; (a3a8 <arm_nn_mat_mult_kernel_s8_s16+0x4d4>)
    a366:	f04f 37ff 	mov.w	r7, #4294967295
    mult = mult + (q63_t)m1 * m2;
    a36a:	17e3      	asrs	r3, r4, #31
    a36c:	fb00 f103 	mul.w	r1, r0, r3
    a370:	17c3      	asrs	r3, r0, #31
    a372:	fb04 1103 	mla	r1, r4, r3, r1
    a376:	fba0 2304 	umull	r2, r3, r0, r4
    a37a:	440b      	add	r3, r1
    a37c:	1992      	adds	r2, r2, r6
    a37e:	417b      	adcs	r3, r7
    result = (int32_t) (mult / (1ll << 31));
    a380:	4616      	mov	r6, r2
    a382:	461f      	mov	r7, r3
    a384:	2a00      	cmp	r2, #0
    a386:	f173 0100 	sbcs.w	r1, r3, #0
    a38a:	f6ff ae5b 	blt.w	a044 <arm_nn_mat_mult_kernel_s8_s16+0x170>
    a38e:	0ff3      	lsrs	r3, r6, #31
    a390:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    a394:	4284      	cmp	r4, r0
    a396:	f43f ae5b 	beq.w	a050 <arm_nn_mat_mult_kernel_s8_s16+0x17c>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a39a:	2d00      	cmp	r5, #0
    a39c:	f77f ae63 	ble.w	a066 <arm_nn_mat_mult_kernel_s8_s16+0x192>
    if (result < 0)
    a3a0:	2b00      	cmp	r3, #0
    a3a2:	f6bf ae70 	bge.w	a086 <arm_nn_mat_mult_kernel_s8_s16+0x1b2>
    a3a6:	e668      	b.n	a07a <arm_nn_mat_mult_kernel_s8_s16+0x1a6>
    a3a8:	c0000001 	.word	0xc0000001
    a3ac:	46d3      	mov	fp, sl
    a3ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a3b0:	3301      	adds	r3, #1
    a3b2:	00d9      	lsls	r1, r3, #3
    a3b4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    a3b6:	440a      	add	r2, r1
    a3b8:	005b      	lsls	r3, r3, #1
    a3ba:	982c      	ldr	r0, [sp, #176]	; 0xb0
    a3bc:	4418      	add	r0, r3
    a3be:	902c      	str	r0, [sp, #176]	; 0xb0
    a3c0:	9818      	ldr	r0, [sp, #96]	; 0x60
    a3c2:	4418      	add	r0, r3
    a3c4:	9018      	str	r0, [sp, #96]	; 0x60
    a3c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a3c8:	440b      	add	r3, r1
    a3ca:	9326      	str	r3, [sp, #152]	; 0x98
    a3cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a3ce:	440b      	add	r3, r1
    a3d0:	9317      	str	r3, [sp, #92]	; 0x5c
        row_count--;
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
    a3d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a3d4:	f013 0f01 	tst.w	r3, #1
    a3d8:	f000 80ce 	beq.w	a578 <arm_nn_mat_mult_kernel_s8_s16+0x6a4>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;
    a3dc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    a3de:	991a      	ldr	r1, [sp, #104]	; 0x68
    a3e0:	eb05 0741 	add.w	r7, r5, r1, lsl #1

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
    a3e4:	6812      	ldr	r2, [r2, #0]
        q31_t ch_0_out_1 = *bias++;

        uint16_t col_count = num_col_a >> 2;
        while (col_count)
    a3e6:	088b      	lsrs	r3, r1, #2
    a3e8:	f000 80cf 	beq.w	a58a <arm_nn_mat_mult_kernel_s8_s16+0x6b6>
    a3ec:	f103 3cff 	add.w	ip, r3, #4294967295
    a3f0:	fa1f fc8c 	uxth.w	ip, ip
    a3f4:	f10c 0c01 	add.w	ip, ip, #1
    a3f8:	eb0b 0e8c 	add.w	lr, fp, ip, lsl #2
    a3fc:	463e      	mov	r6, r7
    a3fe:	4613      	mov	r3, r2
  memcpy(&val, *in_q7, 4);
    a400:	f85b 0b04 	ldr.w	r0, [fp], #4
  return (op1 >> op2) | (op1 << (32U - op2));
    a404:	ea4f 2130 	mov.w	r1, r0, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    a408:	fa2f f881 	sxtb16	r8, r1
    a40c:	fa2f f080 	sxtb16	r0, r0
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
    a410:	ea4f 4418 	mov.w	r4, r8, lsr #16
    a414:	0424      	lsls	r4, r4, #16
    a416:	ea44 4410 	orr.w	r4, r4, r0, lsr #16
  *out1 = (int32_t) (__PKHBT (inAbuf2, inAbuf1, 16));
    a41a:	b280      	uxth	r0, r0
    a41c:	ea40 4108 	orr.w	r1, r0, r8, lsl #16
  memcpy(&val, *in_q15, 4);
    a420:	6828      	ldr	r0, [r5, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    a422:	fb21 2000 	smlad	r0, r1, r0, r2
    a426:	6832      	ldr	r2, [r6, #0]
    a428:	fb21 3102 	smlad	r1, r1, r2, r3
    a42c:	686a      	ldr	r2, [r5, #4]
    a42e:	3508      	adds	r5, #8
    a430:	6873      	ldr	r3, [r6, #4]
    a432:	3608      	adds	r6, #8
    a434:	fb24 0202 	smlad	r2, r4, r2, r0
    a438:	fb24 1103 	smlad	r1, r4, r3, r1
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
    a43c:	460b      	mov	r3, r1
        while (col_count)
    a43e:	45f3      	cmp	fp, lr
    a440:	d1de      	bne.n	a400 <arm_nn_mat_mult_kernel_s8_s16+0x52c>
    a442:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    a446:	4467      	add	r7, ip
    a448:	990e      	ldr	r1, [sp, #56]	; 0x38
    a44a:	4461      	add	r1, ip
    a44c:	910e      	str	r1, [sp, #56]	; 0x38

            col_count--;
        }
        col_count = num_col_a & 0x3;
        while (col_count)
    a44e:	991a      	ldr	r1, [sp, #104]	; 0x68
    a450:	f011 0003 	ands.w	r0, r1, #3
    a454:	d011      	beq.n	a47a <arm_nn_mat_mult_kernel_s8_s16+0x5a6>
    a456:	f10b 31ff 	add.w	r1, fp, #4294967295
    a45a:	3801      	subs	r0, #1
    a45c:	fa1b f480 	uxtah	r4, fp, r0
    a460:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        {
            q7_t a0 = *ip_a0++;
            q15_t b0 = *ip_b0++;
            q15_t b1 = *ip_b1++;

            ch_0_out_0 += a0 * b0;
    a462:	f911 0f01 	ldrsb.w	r0, [r1, #1]!
    a466:	f935 6b02 	ldrsh.w	r6, [r5], #2
    a46a:	fb00 2206 	mla	r2, r0, r6, r2
            ch_0_out_1 += a0 * b1;
    a46e:	f937 6b02 	ldrsh.w	r6, [r7], #2
    a472:	fb00 3306 	mla	r3, r0, r6, r3
        while (col_count)
    a476:	428c      	cmp	r4, r1
    a478:	d1f3      	bne.n	a462 <arm_nn_mat_mult_kernel_s8_s16+0x58e>
            col_count--;
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
    a47a:	9926      	ldr	r1, [sp, #152]	; 0x98
    a47c:	6809      	ldr	r1, [r1, #0]
    a47e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a480:	6800      	ldr	r0, [r0, #0]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a482:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
    a486:	40a2      	lsls	r2, r4
    if ((m1 < 0) ^ (m2 < 0))
    a488:	0fcc      	lsrs	r4, r1, #31
    a48a:	ebb4 7fd2 	cmp.w	r4, r2, lsr #31
        mult = 1 - mult;
    a48e:	bf19      	ittee	ne
    a490:	4e59      	ldrne	r6, [pc, #356]	; (a5f8 <arm_nn_mat_mult_kernel_s8_s16+0x724>)
    a492:	f04f 37ff 	movne.w	r7, #4294967295
    q63_t mult = 1 << 30;
    a496:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
    a49a:	2700      	moveq	r7, #0
    mult = mult + (q63_t)m1 * m2;
    a49c:	17cd      	asrs	r5, r1, #31
    a49e:	fb02 fe05 	mul.w	lr, r2, r5
    a4a2:	17d5      	asrs	r5, r2, #31
    a4a4:	fb01 ee05 	mla	lr, r1, r5, lr
    a4a8:	fba2 4501 	umull	r4, r5, r2, r1
    a4ac:	4475      	add	r5, lr
    a4ae:	1936      	adds	r6, r6, r4
    a4b0:	416f      	adcs	r7, r5
    result = (int32_t) (mult / (1ll << 31));
    a4b2:	4634      	mov	r4, r6
    a4b4:	463d      	mov	r5, r7
    a4b6:	2e00      	cmp	r6, #0
    a4b8:	f177 0e00 	sbcs.w	lr, r7, #0
    a4bc:	db67      	blt.n	a58e <arm_nn_mat_mult_kernel_s8_s16+0x6ba>
    a4be:	0fe4      	lsrs	r4, r4, #31
    a4c0:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    a4c4:	4291      	cmp	r1, r2
    a4c6:	d068      	beq.n	a59a <arm_nn_mat_mult_kernel_s8_s16+0x6c6>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a4c8:	2800      	cmp	r0, #0
    a4ca:	dd70      	ble.n	a5ae <arm_nn_mat_mult_kernel_s8_s16+0x6da>
    if (result < 0)
    a4cc:	2c00      	cmp	r4, #0
    a4ce:	da05      	bge.n	a4dc <arm_nn_mat_mult_kernel_s8_s16+0x608>
    q31_t threshold = remainder_mask >> 1;
    a4d0:	2200      	movs	r2, #0
    int32_t remainder = remainder_mask & dividend;
    a4d2:	4611      	mov	r1, r2
        threshold++;
    a4d4:	3201      	adds	r2, #1
    if (remainder > threshold)
    a4d6:	428a      	cmp	r2, r1
        result++;
    a4d8:	bfb8      	it	lt
    a4da:	3401      	addlt	r4, #1
        ch_0_out_0 += out_offset;
    a4dc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    a4de:	4422      	add	r2, r4
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
    a4e0:	9904      	ldr	r1, [sp, #16]
    a4e2:	428a      	cmp	r2, r1
    a4e4:	bfb8      	it	lt
    a4e6:	460a      	movlt	r2, r1
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
        *out_0++ = (q7_t)ch_0_out_0;
    a4e8:	992c      	ldr	r1, [sp, #176]	; 0xb0
    a4ea:	1c48      	adds	r0, r1, #1
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
    a4ec:	9905      	ldr	r1, [sp, #20]
    a4ee:	428a      	cmp	r2, r1
    a4f0:	bfa8      	it	ge
    a4f2:	460a      	movge	r2, r1
        *out_0++ = (q7_t)ch_0_out_0;
    a4f4:	992c      	ldr	r1, [sp, #176]	; 0xb0
    a4f6:	700a      	strb	r2, [r1, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
    a4f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a4fa:	6812      	ldr	r2, [r2, #0]
    a4fc:	9917      	ldr	r1, [sp, #92]	; 0x5c
    a4fe:	6809      	ldr	r1, [r1, #0]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a500:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
    a504:	40a3      	lsls	r3, r4
    if ((m1 < 0) ^ (m2 < 0))
    a506:	0fd4      	lsrs	r4, r2, #31
    a508:	ebb4 7fd3 	cmp.w	r4, r3, lsr #31
        mult = 1 - mult;
    a50c:	bf19      	ittee	ne
    a50e:	4e3a      	ldrne	r6, [pc, #232]	; (a5f8 <arm_nn_mat_mult_kernel_s8_s16+0x724>)
    a510:	f04f 37ff 	movne.w	r7, #4294967295
    q63_t mult = 1 << 30;
    a514:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
    a518:	2700      	moveq	r7, #0
    mult = mult + (q63_t)m1 * m2;
    a51a:	17d5      	asrs	r5, r2, #31
    a51c:	fb03 fe05 	mul.w	lr, r3, r5
    a520:	17dd      	asrs	r5, r3, #31
    a522:	fb02 ee05 	mla	lr, r2, r5, lr
    a526:	fba3 4502 	umull	r4, r5, r3, r2
    a52a:	4475      	add	r5, lr
    a52c:	19a4      	adds	r4, r4, r6
    a52e:	417d      	adcs	r5, r7
    result = (int32_t) (mult / (1ll << 31));
    a530:	4626      	mov	r6, r4
    a532:	462f      	mov	r7, r5
    a534:	2c00      	cmp	r4, #0
    a536:	f175 0e00 	sbcs.w	lr, r5, #0
    a53a:	db42      	blt.n	a5c2 <arm_nn_mat_mult_kernel_s8_s16+0x6ee>
    a53c:	0ff4      	lsrs	r4, r6, #31
    a53e:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    a542:	429a      	cmp	r2, r3
    a544:	d043      	beq.n	a5ce <arm_nn_mat_mult_kernel_s8_s16+0x6fa>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a546:	2900      	cmp	r1, #0
    a548:	dd4b      	ble.n	a5e2 <arm_nn_mat_mult_kernel_s8_s16+0x70e>
    if (result < 0)
    a54a:	2c00      	cmp	r4, #0
    a54c:	da05      	bge.n	a55a <arm_nn_mat_mult_kernel_s8_s16+0x686>
    q31_t threshold = remainder_mask >> 1;
    a54e:	2300      	movs	r3, #0
    int32_t remainder = remainder_mask & dividend;
    a550:	461a      	mov	r2, r3
        threshold++;
    a552:	3301      	adds	r3, #1
    if (remainder > threshold)
    a554:	4293      	cmp	r3, r2
        result++;
    a556:	bfb8      	it	lt
    a558:	3401      	addlt	r4, #1
        ch_0_out_1 += out_offset;
    a55a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    a55c:	4423      	add	r3, r4
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
    a55e:	9a04      	ldr	r2, [sp, #16]
    a560:	429a      	cmp	r2, r3
    a562:	bfb8      	it	lt
    a564:	461a      	movlt	r2, r3
    a566:	4613      	mov	r3, r2
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
    a568:	9a05      	ldr	r2, [sp, #20]
    a56a:	429a      	cmp	r2, r3
    a56c:	bfa8      	it	ge
    a56e:	461a      	movge	r2, r3
    a570:	4613      	mov	r3, r2
        *out_1++ = (q7_t)ch_0_out_1;
    a572:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a574:	7013      	strb	r3, [r2, #0]
        *out_0++ = (q7_t)ch_0_out_0;
    a576:	902c      	str	r0, [sp, #176]	; 0xb0
        out_mult++;
        out_shift++;
    }

    out_0 += output_ch;
    a578:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a57a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    a57c:	4413      	add	r3, r2
    a57e:	4618      	mov	r0, r3
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
    a580:	b01d      	add	sp, #116	; 0x74
    a582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const int32_t *bias = output_bias;
    a586:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    a588:	e723      	b.n	a3d2 <arm_nn_mat_mult_kernel_s8_s16+0x4fe>
        q31_t ch_0_out_1 = *bias++;
    a58a:	4613      	mov	r3, r2
    a58c:	e75f      	b.n	a44e <arm_nn_mat_mult_kernel_s8_s16+0x57a>
    result = (int32_t) (mult / (1ll << 31));
    a58e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    a592:	2500      	movs	r5, #0
    a594:	19a4      	adds	r4, r4, r6
    a596:	417d      	adcs	r5, r7
    a598:	e791      	b.n	a4be <arm_nn_mat_mult_kernel_s8_s16+0x5ea>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    a59a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a59e:	d193      	bne.n	a4c8 <arm_nn_mat_mult_kernel_s8_s16+0x5f4>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a5a0:	2800      	cmp	r0, #0
    a5a2:	dd02      	ble.n	a5aa <arm_nn_mat_mult_kernel_s8_s16+0x6d6>
        result = Q31_MAX;
    a5a4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    a5a8:	e798      	b.n	a4dc <arm_nn_mat_mult_kernel_s8_s16+0x608>
    a5aa:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a5ae:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
    a5b0:	2201      	movs	r2, #1
    a5b2:	4082      	lsls	r2, r0
    a5b4:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
    a5b6:	ea04 0102 	and.w	r1, r4, r2
    q31_t threshold = remainder_mask >> 1;
    a5ba:	1052      	asrs	r2, r2, #1
    if (result < 0)
    a5bc:	4104      	asrs	r4, r0
    a5be:	d58a      	bpl.n	a4d6 <arm_nn_mat_mult_kernel_s8_s16+0x602>
    a5c0:	e788      	b.n	a4d4 <arm_nn_mat_mult_kernel_s8_s16+0x600>
    result = (int32_t) (mult / (1ll << 31));
    a5c2:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    a5c6:	2700      	movs	r7, #0
    a5c8:	1936      	adds	r6, r6, r4
    a5ca:	416f      	adcs	r7, r5
    a5cc:	e7b6      	b.n	a53c <arm_nn_mat_mult_kernel_s8_s16+0x668>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    a5ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    a5d2:	d1b8      	bne.n	a546 <arm_nn_mat_mult_kernel_s8_s16+0x672>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a5d4:	2900      	cmp	r1, #0
    a5d6:	dd02      	ble.n	a5de <arm_nn_mat_mult_kernel_s8_s16+0x70a>
        result = Q31_MAX;
    a5d8:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    a5dc:	e7bd      	b.n	a55a <arm_nn_mat_mult_kernel_s8_s16+0x686>
    a5de:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a5e2:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
    a5e4:	2301      	movs	r3, #1
    a5e6:	408b      	lsls	r3, r1
    a5e8:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
    a5ea:	ea04 0203 	and.w	r2, r4, r3
    q31_t threshold = remainder_mask >> 1;
    a5ee:	105b      	asrs	r3, r3, #1
    if (result < 0)
    a5f0:	410c      	asrs	r4, r1
    a5f2:	d5af      	bpl.n	a554 <arm_nn_mat_mult_kernel_s8_s16+0x680>
    a5f4:	e7ad      	b.n	a552 <arm_nn_mat_mult_kernel_s8_s16+0x67e>
    a5f6:	bf00      	nop
    a5f8:	c0000001 	.word	0xc0000001

0000a5fc <arm_fully_connected_s8>:
                       const q7_t *kernel,
                       const cmsis_nn_dims *bias_dims,
                       const int32_t *bias,
                       const cmsis_nn_dims *output_dims,
                       q7_t *output)
{
    a5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a600:	b08b      	sub	sp, #44	; 0x2c
    a602:	9e14      	ldr	r6, [sp, #80]	; 0x50
    a604:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    a608:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
    a60c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
    a60e:	681d      	ldr	r5, [r3, #0]

    while (batch_cnt)
    a610:	b335      	cbz	r5, a660 <arm_fully_connected_s8+0x64>
    a612:	4690      	mov	r8, r2
    a614:	460c      	mov	r4, r1
    {
        arm_nn_vec_mat_mult_t_s8(input,
    a616:	f8df b050 	ldr.w	fp, [pc, #80]	; a668 <arm_fully_connected_s8+0x6c>
    a61a:	6923      	ldr	r3, [r4, #16]
    a61c:	9308      	str	r3, [sp, #32]
    a61e:	68e3      	ldr	r3, [r4, #12]
    a620:	9307      	str	r3, [sp, #28]
    a622:	f8da 300c 	ldr.w	r3, [sl, #12]
    a626:	9306      	str	r3, [sp, #24]
    a628:	f8d9 3000 	ldr.w	r3, [r9]
    a62c:	9305      	str	r3, [sp, #20]
    a62e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    a632:	9304      	str	r3, [sp, #16]
    a634:	f8d8 3000 	ldr.w	r3, [r8]
    a638:	9303      	str	r3, [sp, #12]
    a63a:	68a3      	ldr	r3, [r4, #8]
    a63c:	9302      	str	r3, [sp, #8]
    a63e:	6863      	ldr	r3, [r4, #4]
    a640:	9301      	str	r3, [sp, #4]
    a642:	6823      	ldr	r3, [r4, #0]
    a644:	9300      	str	r3, [sp, #0]
    a646:	463b      	mov	r3, r7
    a648:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a64a:	9916      	ldr	r1, [sp, #88]	; 0x58
    a64c:	4630      	mov	r0, r6
    a64e:	47d8      	blx	fp
                                 quant_params->shift,
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
                                 fc_params->activation.min,
                                 fc_params->activation.max);
        input += filter_dims->n;
    a650:	f8d9 3000 	ldr.w	r3, [r9]
    a654:	441e      	add	r6, r3
        output += output_dims->c;
    a656:	f8da 300c 	ldr.w	r3, [sl, #12]
    a65a:	441f      	add	r7, r3
    while (batch_cnt)
    a65c:	3d01      	subs	r5, #1
    a65e:	d1dc      	bne.n	a61a <arm_fully_connected_s8+0x1e>
        batch_cnt--;
    }
    return (ARM_MATH_SUCCESS);
}
    a660:	2000      	movs	r0, #0
    a662:	b00b      	add	sp, #44	; 0x2c
    a664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a668:	0000b209 	.word	0x0000b209

0000a66c <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
    (void)filter_dims;
    return 0;
}
    a66c:	2000      	movs	r0, #0
    a66e:	4770      	bx	lr

0000a670 <arm_nn_accumulate_q7_to_q15>:
 * @addtogroup NNBasicMath
 * @{
 */

void arm_nn_accumulate_q7_to_q15(q15_t *pDst, const q7_t *pSrc, uint32_t length)
{
    a670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    q15_t *pCnt = pDst;
    const q7_t *pV = pSrc;
    q31_t v1, v2, vo1, vo2;
    int32_t cnt = length >> 2;
    a674:	ea4f 0e92 	mov.w	lr, r2, lsr #2
    q31_t in;

    while (cnt > 0l)
    a678:	f1be 0f00 	cmp.w	lr, #0
    a67c:	d023      	beq.n	a6c6 <arm_nn_accumulate_q7_to_q15+0x56>
    a67e:	4676      	mov	r6, lr
    a680:	460f      	mov	r7, r1
    a682:	4604      	mov	r4, r0
  memcpy(&val, *in_q7, 4);
    a684:	f857 5b04 	ldr.w	r5, [r7], #4
  return (op1 >> op2) | (op1 << (32U - op2));
    a688:	ea4f 2335 	mov.w	r3, r5, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    a68c:	fa2f f383 	sxtb16	r3, r3
    a690:	fa2f f585 	sxtb16	r5, r5
        q31_t value = arm_nn_read_q7x4_ia(&pV);
        v1 = __SXTB16(__ROR((uint32_t)value, 8));
        v2 = __SXTB16(value);
#ifndef ARM_MATH_BIG_ENDIAN
        vo2 = (q31_t)__PKHTB(v1, v2, 16);
        vo1 = (q31_t)__PKHBT(v2, v1, 16);
    a694:	fa1f fc85 	uxth.w	ip, r5
    a698:	ea4c 4c03 	orr.w	ip, ip, r3, lsl #16
  memcpy(&val, in_q15, 4);
    a69c:	f8d4 8000 	ldr.w	r8, [r4]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    a6a0:	fa9c fc18 	qadd16	ip, ip, r8
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
    a6a4:	f8c4 c000 	str.w	ip, [r4]
        vo2 = (q31_t)__PKHTB(v1, v2, 16);
    a6a8:	0c1b      	lsrs	r3, r3, #16
    a6aa:	041b      	lsls	r3, r3, #16
    a6ac:	ea43 4315 	orr.w	r3, r3, r5, lsr #16
    a6b0:	6865      	ldr	r5, [r4, #4]
    a6b2:	fa93 f315 	qadd16	r3, r3, r5
    a6b6:	6063      	str	r3, [r4, #4]
    a6b8:	3408      	adds	r4, #8
    while (cnt > 0l)
    a6ba:	3e01      	subs	r6, #1
    a6bc:	d1e2      	bne.n	a684 <arm_nn_accumulate_q7_to_q15+0x14>
    a6be:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
    a6c2:	eb01 018e 	add.w	r1, r1, lr, lsl #2
        write_q15x2_ia(&pCnt, __QADD16(vo2, in));

        cnt--;
    }
    cnt = length & 0x3;
    while (cnt > 0l)
    a6c6:	f012 0203 	ands.w	r2, r2, #3
    a6ca:	d00a      	beq.n	a6e2 <arm_nn_accumulate_q7_to_q15+0x72>
    a6cc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
    {
        *pCnt++ += *pV++;
    a6d0:	f911 3b01 	ldrsb.w	r3, [r1], #1
    a6d4:	f830 4b02 	ldrh.w	r4, [r0], #2
    a6d8:	4423      	add	r3, r4
    a6da:	f820 3c02 	strh.w	r3, [r0, #-2]
    while (cnt > 0l)
    a6de:	4290      	cmp	r0, r2
    a6e0:	d1f6      	bne.n	a6d0 <arm_nn_accumulate_q7_to_q15+0x60>
    a6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0000a6e8 <arm_nn_mat_mult_nt_t_s8>:
                                   const int32_t rhs_cols,
                                   const int32_t lhs_offset,
                                   const int32_t dst_offset,
                                   const int32_t activation_min,
                                   const int32_t activation_max)
{
    a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6ec:	b0b3      	sub	sp, #204	; 0xcc
    a6ee:	9028      	str	r0, [sp, #160]	; 0xa0
    a6f0:	912d      	str	r1, [sp, #180]	; 0xb4
    a6f2:	9231      	str	r2, [sp, #196]	; 0xc4
    a6f4:	932e      	str	r3, [sp, #184]	; 0xb8
#if defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
    a6f6:	983f      	ldr	r0, [sp, #252]	; 0xfc
    a6f8:	2802      	cmp	r0, #2
    a6fa:	f100 84dc 	bmi.w	b0b6 <arm_nn_mat_mult_nt_t_s8+0x9ce>
    a6fe:	461d      	mov	r5, r3
        lhs_offset_contribution1 *= lhs_offset;

        lhs_offset_contribution0 += bias[rhs_rows_idx];
        lhs_offset_contribution1 += bias[rhs_rows_idx + 1];

        int32_t lhs_rows_idx = lhs_rows >> 1;
    a700:	983e      	ldr	r0, [sp, #248]	; 0xf8
    a702:	1040      	asrs	r0, r0, #1
    a704:	9029      	str	r0, [sp, #164]	; 0xa4

            dst_ptr[0] = (q7_t)res00;
            dst_ptr[1] = (q7_t)res01;
        }

        rhs += 2 * rhs_cols;
    a706:	9c40      	ldr	r4, [sp, #256]	; 0x100
    a708:	0064      	lsls	r4, r4, #1
    a70a:	9420      	str	r4, [sp, #128]	; 0x80
    a70c:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
    a710:	465c      	mov	r4, fp
    a712:	190c      	adds	r4, r1, r4
    a714:	9426      	str	r4, [sp, #152]	; 0x98
    a716:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
    a718:	3404      	adds	r4, #4
    a71a:	941a      	str	r4, [sp, #104]	; 0x68
    a71c:	9c3d      	ldr	r4, [sp, #244]	; 0xf4
    a71e:	3404      	adds	r4, #4
    a720:	941b      	str	r4, [sp, #108]	; 0x6c
    a722:	3204      	adds	r2, #4
    a724:	9227      	str	r2, [sp, #156]	; 0x9c
    a726:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    a728:	922b      	str	r2, [sp, #172]	; 0xac
    a72a:	3a02      	subs	r2, #2
    a72c:	922f      	str	r2, [sp, #188]	; 0xbc
    a72e:	0852      	lsrs	r2, r2, #1
    a730:	9230      	str	r2, [sp, #192]	; 0xc0
    a732:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
    a734:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
    a738:	f103 020c 	add.w	r2, r3, #12
    a73c:	922c      	str	r2, [sp, #176]	; 0xb0
    a73e:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    a740:	0052      	lsls	r2, r2, #1
    a742:	9224      	str	r2, [sp, #144]	; 0x90
    a744:	9223      	str	r2, [sp, #140]	; 0x8c
    a746:	fb02 f200 	mul.w	r2, r2, r0
    a74a:	922a      	str	r2, [sp, #168]	; 0xa8
    a74c:	9525      	str	r5, [sp, #148]	; 0x94
    a74e:	9119      	str	r1, [sp, #100]	; 0x64
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
    a750:	f1ab 0310 	sub.w	r3, fp, #16
    a754:	9306      	str	r3, [sp, #24]
    a756:	f10b 0304 	add.w	r3, fp, #4
    a75a:	9305      	str	r3, [sp, #20]
    q63_t mult = 1 << 30;
    a75c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a760:	931e      	str	r3, [sp, #120]	; 0x78
    a762:	2300      	movs	r3, #0
    a764:	931f      	str	r3, [sp, #124]	; 0x7c
        mult = 1 - mult;
    a766:	4b59      	ldr	r3, [pc, #356]	; (a8cc <arm_nn_mat_mult_nt_t_s8+0x1e4>)
    a768:	930a      	str	r3, [sp, #40]	; 0x28
    a76a:	f04f 33ff 	mov.w	r3, #4294967295
    a76e:	930b      	str	r3, [sp, #44]	; 0x2c
    a770:	f8cd b000 	str.w	fp, [sp]
    a774:	f000 bc08 	b.w	af88 <arm_nn_mat_mult_nt_t_s8+0x8a0>
        for (int32_t x = 0; x < rhs_cols; ++x)
    a778:	2200      	movs	r2, #0
    a77a:	4611      	mov	r1, r2
    a77c:	f000 bc18 	b.w	afb0 <arm_nn_mat_mult_nt_t_s8+0x8c8>
    q63_t mult = 1 << 30;
    a780:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
    a784:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
    a788:	e25d      	b.n	ac46 <arm_nn_mat_mult_nt_t_s8+0x55e>
    result = (int32_t) (mult / (1ll << 31));
    a78a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    a78e:	f04f 0b00 	mov.w	fp, #0
    a792:	eb1a 0a06 	adds.w	sl, sl, r6
    a796:	eb4b 0b07 	adc.w	fp, fp, r7
    a79a:	e26c      	b.n	ac76 <arm_nn_mat_mult_nt_t_s8+0x58e>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    a79c:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
    a7a0:	f040 8271 	bne.w	ac86 <arm_nn_mat_mult_nt_t_s8+0x59e>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a7a4:	2a00      	cmp	r2, #0
    a7a6:	dd07      	ble.n	a7b8 <arm_nn_mat_mult_nt_t_s8+0xd0>
    q31_t threshold = remainder_mask >> 1;
    a7a8:	2200      	movs	r2, #0
    a7aa:	9208      	str	r2, [sp, #32]
    const q31_t remainder_mask = (1 << exponent) - 1;
    a7ac:	9218      	str	r2, [sp, #96]	; 0x60
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a7ae:	9217      	str	r2, [sp, #92]	; 0x5c
        result = Q31_MAX;
    a7b0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    a7b4:	9207      	str	r2, [sp, #28]
    a7b6:	e021      	b.n	a7fc <arm_nn_mat_mult_nt_t_s8+0x114>
    a7b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    a7bc:	9107      	str	r1, [sp, #28]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a7be:	4252      	negs	r2, r2
    a7c0:	4615      	mov	r5, r2
    a7c2:	9217      	str	r2, [sp, #92]	; 0x5c
    const q31_t remainder_mask = (1 << exponent) - 1;
    a7c4:	2101      	movs	r1, #1
    a7c6:	4091      	lsls	r1, r2
    a7c8:	1e4a      	subs	r2, r1, #1
    a7ca:	9218      	str	r2, [sp, #96]	; 0x60
    int32_t remainder = remainder_mask & dividend;
    a7cc:	9e07      	ldr	r6, [sp, #28]
    a7ce:	ea06 0102 	and.w	r1, r6, r2
    q31_t threshold = remainder_mask >> 1;
    a7d2:	1052      	asrs	r2, r2, #1
    if (result < 0)
    a7d4:	fa56 f505 	asrs.w	r5, r6, r5
    a7d8:	9507      	str	r5, [sp, #28]
    a7da:	d401      	bmi.n	a7e0 <arm_nn_mat_mult_nt_t_s8+0xf8>
    q31_t threshold = remainder_mask >> 1;
    a7dc:	9208      	str	r2, [sp, #32]
    a7de:	e008      	b.n	a7f2 <arm_nn_mat_mult_nt_t_s8+0x10a>
    a7e0:	9208      	str	r2, [sp, #32]
    a7e2:	e004      	b.n	a7ee <arm_nn_mat_mult_nt_t_s8+0x106>
    a7e4:	2200      	movs	r2, #0
    a7e6:	9208      	str	r2, [sp, #32]
    int32_t remainder = remainder_mask & dividend;
    a7e8:	4611      	mov	r1, r2
    const q31_t remainder_mask = (1 << exponent) - 1;
    a7ea:	9218      	str	r2, [sp, #96]	; 0x60
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a7ec:	9217      	str	r2, [sp, #92]	; 0x5c
        threshold++;
    a7ee:	9a08      	ldr	r2, [sp, #32]
    a7f0:	3201      	adds	r2, #1
    if (remainder > threshold)
    a7f2:	428a      	cmp	r2, r1
    a7f4:	da02      	bge.n	a7fc <arm_nn_mat_mult_nt_t_s8+0x114>
        result++;
    a7f6:	9a07      	ldr	r2, [sp, #28]
    a7f8:	3201      	adds	r2, #1
    a7fa:	9207      	str	r2, [sp, #28]
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
    a7fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
    a7fe:	6812      	ldr	r2, [r2, #0]
    a800:	9922      	ldr	r1, [sp, #136]	; 0x88
    a802:	6809      	ldr	r1, [r1, #0]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a804:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
    a808:	950f      	str	r5, [sp, #60]	; 0x3c
    a80a:	40ac      	lsls	r4, r5
    if ((m1 < 0) ^ (m2 < 0))
    a80c:	ea4f 79d2 	mov.w	r9, r2, lsr #31
    a810:	ebb9 7fd4 	cmp.w	r9, r4, lsr #31
    a814:	d02b      	beq.n	a86e <arm_nn_mat_mult_nt_t_s8+0x186>
        mult = 1 - mult;
    a816:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    a81a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    mult = mult + (q63_t)m1 * m2;
    a81e:	4615      	mov	r5, r2
    a820:	17d6      	asrs	r6, r2, #31
    a822:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
    a826:	4635      	mov	r5, r6
    a828:	fb04 f505 	mul.w	r5, r4, r5
    a82c:	17e7      	asrs	r7, r4, #31
    a82e:	fb02 5507 	mla	r5, r2, r7, r5
    a832:	fba4 6702 	umull	r6, r7, r4, r2
    a836:	442f      	add	r7, r5
    a838:	eb16 060a 	adds.w	r6, r6, sl
    a83c:	eb47 070b 	adc.w	r7, r7, fp
    result = (int32_t) (mult / (1ll << 31));
    a840:	46b2      	mov	sl, r6
    a842:	46bb      	mov	fp, r7
    a844:	2e00      	cmp	r6, #0
    a846:	f177 0500 	sbcs.w	r5, r7, #0
    a84a:	db15      	blt.n	a878 <arm_nn_mat_mult_nt_t_s8+0x190>
    a84c:	ea4f 7cda 	mov.w	ip, sl, lsr #31
    a850:	ea4c 0c4b 	orr.w	ip, ip, fp, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    a854:	42a2      	cmp	r2, r4
    a856:	d018      	beq.n	a88a <arm_nn_mat_mult_nt_t_s8+0x1a2>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a858:	2900      	cmp	r1, #0
    a85a:	dd25      	ble.n	a8a8 <arm_nn_mat_mult_nt_t_s8+0x1c0>
    if (result < 0)
    a85c:	f1bc 0f00 	cmp.w	ip, #0
    a860:	db36      	blt.n	a8d0 <arm_nn_mat_mult_nt_t_s8+0x1e8>
    q31_t threshold = remainder_mask >> 1;
    a862:	f04f 0a00 	mov.w	sl, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
    a866:	46d3      	mov	fp, sl
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a868:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
    a86c:	e03c      	b.n	a8e8 <arm_nn_mat_mult_nt_t_s8+0x200>
    q63_t mult = 1 << 30;
    a86e:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
    a872:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
    a876:	e7d2      	b.n	a81e <arm_nn_mat_mult_nt_t_s8+0x136>
    result = (int32_t) (mult / (1ll << 31));
    a878:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    a87c:	f04f 0b00 	mov.w	fp, #0
    a880:	eb1a 0a06 	adds.w	sl, sl, r6
    a884:	eb4b 0b07 	adc.w	fp, fp, r7
    a888:	e7e0      	b.n	a84c <arm_nn_mat_mult_nt_t_s8+0x164>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    a88a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    a88e:	d1e3      	bne.n	a858 <arm_nn_mat_mult_nt_t_s8+0x170>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a890:	2900      	cmp	r1, #0
    a892:	dd07      	ble.n	a8a4 <arm_nn_mat_mult_nt_t_s8+0x1bc>
    q31_t threshold = remainder_mask >> 1;
    a894:	f04f 0a00 	mov.w	sl, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
    a898:	46d3      	mov	fp, sl
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a89a:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
        result = Q31_MAX;
    a89e:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    a8a2:	e021      	b.n	a8e8 <arm_nn_mat_mult_nt_t_s8+0x200>
    a8a4:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a8a8:	4249      	negs	r1, r1
    a8aa:	460d      	mov	r5, r1
    a8ac:	9116      	str	r1, [sp, #88]	; 0x58
    const q31_t remainder_mask = (1 << exponent) - 1;
    a8ae:	2101      	movs	r1, #1
    a8b0:	40a9      	lsls	r1, r5
    a8b2:	f101 3bff 	add.w	fp, r1, #4294967295
    int32_t remainder = remainder_mask & dividend;
    a8b6:	ea0c 040b 	and.w	r4, ip, fp
    q31_t threshold = remainder_mask >> 1;
    a8ba:	ea4f 016b 	mov.w	r1, fp, asr #1
    if (result < 0)
    a8be:	fa5c fc05 	asrs.w	ip, ip, r5
    a8c2:	d401      	bmi.n	a8c8 <arm_nn_mat_mult_nt_t_s8+0x1e0>
    q31_t threshold = remainder_mask >> 1;
    a8c4:	468a      	mov	sl, r1
    a8c6:	e00b      	b.n	a8e0 <arm_nn_mat_mult_nt_t_s8+0x1f8>
    a8c8:	468a      	mov	sl, r1
    a8ca:	e007      	b.n	a8dc <arm_nn_mat_mult_nt_t_s8+0x1f4>
    a8cc:	c0000001 	.word	0xc0000001
    a8d0:	f04f 0a00 	mov.w	sl, #0
    int32_t remainder = remainder_mask & dividend;
    a8d4:	4654      	mov	r4, sl
    const q31_t remainder_mask = (1 << exponent) - 1;
    a8d6:	46d3      	mov	fp, sl
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a8d8:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
        threshold++;
    a8dc:	f10a 0101 	add.w	r1, sl, #1
    if (remainder > threshold)
    a8e0:	42a1      	cmp	r1, r4
        result++;
    a8e2:	bfb8      	it	lt
    a8e4:	f10c 0c01 	addlt.w	ip, ip, #1
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a8e8:	9912      	ldr	r1, [sp, #72]	; 0x48
    a8ea:	4088      	lsls	r0, r1
    if ((m1 < 0) ^ (m2 < 0))
    a8ec:	9913      	ldr	r1, [sp, #76]	; 0x4c
    a8ee:	ebb1 7fd0 	cmp.w	r1, r0, lsr #31
    a8f2:	f000 81d4 	beq.w	ac9e <arm_nn_mat_mult_nt_t_s8+0x5b6>
        mult = 1 - mult;
    a8f6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    a8f8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    mult = mult + (q63_t)m1 * m2;
    a8fa:	9915      	ldr	r1, [sp, #84]	; 0x54
    a8fc:	fb00 f101 	mul.w	r1, r0, r1
    a900:	17c5      	asrs	r5, r0, #31
    a902:	fb0e 1105 	mla	r1, lr, r5, r1
    a906:	fba0 450e 	umull	r4, r5, r0, lr
    a90a:	440d      	add	r5, r1
    a90c:	19a4      	adds	r4, r4, r6
    a90e:	417d      	adcs	r5, r7
    result = (int32_t) (mult / (1ll << 31));
    a910:	4626      	mov	r6, r4
    a912:	462f      	mov	r7, r5
    a914:	2c00      	cmp	r4, #0
    a916:	f175 0100 	sbcs.w	r1, r5, #0
    a91a:	f2c0 81c3 	blt.w	aca4 <arm_nn_mat_mult_nt_t_s8+0x5bc>
    a91e:	0ff6      	lsrs	r6, r6, #31
    a920:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    a924:	4586      	cmp	lr, r0
    a926:	f000 81c3 	beq.w	acb0 <arm_nn_mat_mult_nt_t_s8+0x5c8>
    int32_t remainder = remainder_mask & dividend;
    a92a:	9918      	ldr	r1, [sp, #96]	; 0x60
    a92c:	4031      	ands	r1, r6
    if (result < 0)
    a92e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a930:	4106      	asrs	r6, r0
    a932:	f100 81c3 	bmi.w	acbc <arm_nn_mat_mult_nt_t_s8+0x5d4>
    if (remainder > threshold)
    a936:	9808      	ldr	r0, [sp, #32]
    a938:	4281      	cmp	r1, r0
        result++;
    a93a:	bfc8      	it	gt
    a93c:	3601      	addgt	r6, #1
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    a93e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a940:	408b      	lsls	r3, r1
    if ((m1 < 0) ^ (m2 < 0))
    a942:	ebb9 7fd3 	cmp.w	r9, r3, lsr #31
    a946:	f000 81bd 	beq.w	acc4 <arm_nn_mat_mult_nt_t_s8+0x5dc>
        mult = 1 - mult;
    a94a:	990a      	ldr	r1, [sp, #40]	; 0x28
    a94c:	9108      	str	r1, [sp, #32]
    a94e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    a950:	9109      	str	r1, [sp, #36]	; 0x24
    mult = mult + (q63_t)m1 * m2;
    a952:	9c11      	ldr	r4, [sp, #68]	; 0x44
    a954:	fb03 f404 	mul.w	r4, r3, r4
    a958:	17d9      	asrs	r1, r3, #31
    a95a:	fb02 4401 	mla	r4, r2, r1, r4
    a95e:	fba3 0102 	umull	r0, r1, r3, r2
    a962:	4421      	add	r1, r4
    a964:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    a968:	1824      	adds	r4, r4, r0
    a96a:	414d      	adcs	r5, r1
    a96c:	4620      	mov	r0, r4
    a96e:	4629      	mov	r1, r5
    result = (int32_t) (mult / (1ll << 31));
    a970:	2c00      	cmp	r4, #0
    a972:	f175 0700 	sbcs.w	r7, r5, #0
    a976:	f2c0 81aa 	blt.w	acce <arm_nn_mat_mult_nt_t_s8+0x5e6>
    a97a:	0fe1      	lsrs	r1, r4, #31
    a97c:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    a980:	429a      	cmp	r2, r3
    a982:	f000 81aa 	beq.w	acda <arm_nn_mat_mult_nt_t_s8+0x5f2>
    int32_t remainder = remainder_mask & dividend;
    a986:	ea01 0b0b 	and.w	fp, r1, fp
    if (result < 0)
    a98a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a98c:	4119      	asrs	r1, r3
        threshold++;
    a98e:	bf48      	it	mi
    a990:	f10a 0a01 	addmi.w	sl, sl, #1
    if (remainder > threshold)
    a994:	45d3      	cmp	fp, sl
        result++;
    a996:	bfc8      	it	gt
    a998:	3101      	addgt	r1, #1
            res00 += dst_offset;
    a99a:	9b07      	ldr	r3, [sp, #28]
    a99c:	9a42      	ldr	r2, [sp, #264]	; 0x108
    a99e:	4413      	add	r3, r2
            res01 += dst_offset;
    a9a0:	4494      	add	ip, r2
            res10 += dst_offset;
    a9a2:	4416      	add	r6, r2
            res11 += dst_offset;
    a9a4:	4411      	add	r1, r2
            res00 = MAX(res00, activation_min);
    a9a6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    a9a8:	4293      	cmp	r3, r2
    a9aa:	bfb8      	it	lt
    a9ac:	4613      	movlt	r3, r2
            res01 = MAX(res01, activation_min);
    a9ae:	4594      	cmp	ip, r2
    a9b0:	bfb8      	it	lt
    a9b2:	4694      	movlt	ip, r2
            res10 = MAX(res10, activation_min);
    a9b4:	4296      	cmp	r6, r2
    a9b6:	bfb8      	it	lt
    a9b8:	4616      	movlt	r6, r2
            res11 = MAX(res11, activation_min);
    a9ba:	4291      	cmp	r1, r2
    a9bc:	bfb8      	it	lt
    a9be:	4611      	movlt	r1, r2
            res00 = MIN(res00, activation_max);
    a9c0:	9a44      	ldr	r2, [sp, #272]	; 0x110
    a9c2:	4293      	cmp	r3, r2
    a9c4:	bfa8      	it	ge
    a9c6:	4613      	movge	r3, r2
            dst_ptr[0] = (q7_t)res00;
    a9c8:	980d      	ldr	r0, [sp, #52]	; 0x34
    a9ca:	4602      	mov	r2, r0
    a9cc:	7003      	strb	r3, [r0, #0]
            res01 = MIN(res01, activation_max);
    a9ce:	9b44      	ldr	r3, [sp, #272]	; 0x110
    a9d0:	459c      	cmp	ip, r3
    a9d2:	bfa8      	it	ge
    a9d4:	469c      	movge	ip, r3
            dst_ptr[1] = (q7_t)res01;
    a9d6:	f880 c001 	strb.w	ip, [r0, #1]
            res10 = MIN(res10, activation_max);
    a9da:	9b44      	ldr	r3, [sp, #272]	; 0x110
    a9dc:	429e      	cmp	r6, r3
    a9de:	bfa8      	it	ge
    a9e0:	461e      	movge	r6, r3
            dst_ptr[0] = (q7_t)res10;
    a9e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    a9e4:	7026      	strb	r6, [r4, #0]
            res11 = MIN(res11, activation_max);
    a9e6:	9b44      	ldr	r3, [sp, #272]	; 0x110
    a9e8:	4299      	cmp	r1, r3
    a9ea:	bfa8      	it	ge
    a9ec:	4619      	movge	r1, r3
            dst_ptr[1] = (q7_t)res11;
    a9ee:	7061      	strb	r1, [r4, #1]
    a9f0:	4613      	mov	r3, r2
    a9f2:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a9f4:	4413      	add	r3, r2
    a9f6:	930d      	str	r3, [sp, #52]	; 0x34
            lhs_ptr += rhs_cols;
    a9f8:	9b00      	ldr	r3, [sp, #0]
    a9fa:	4498      	add	r8, r3
    a9fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a9fe:	18e3      	adds	r3, r4, r3
    aa00:	930e      	str	r3, [sp, #56]	; 0x38
        while (lhs_rows_idx)
    aa02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    aa04:	3b01      	subs	r3, #1
    aa06:	930c      	str	r3, [sp, #48]	; 0x30
    aa08:	f000 816d 	beq.w	ace6 <arm_nn_mat_mult_nt_t_s8+0x5fe>
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
    aa0c:	9b06      	ldr	r3, [sp, #24]
    aa0e:	2b00      	cmp	r3, #0
    aa10:	f2c0 82ee 	blt.w	aff0 <arm_nn_mat_mult_nt_t_s8+0x908>
    aa14:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
    aa18:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    aa1a:	4623      	mov	r3, r4
    aa1c:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
    aa20:	4648      	mov	r0, r9
    aa22:	f04f 0c00 	mov.w	ip, #0
    aa26:	4621      	mov	r1, r4
  memcpy(&val, *in_q7, 4);
    aa28:	f8de 4000 	ldr.w	r4, [lr]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    aa2c:	fa2f f784 	sxtb16	r7, r4
    aa30:	f8d8 5000 	ldr.w	r5, [r8]
    aa34:	fa2f fa85 	sxtb16	sl, r5
  memcpy(&val, in_q7, 4);
    aa38:	9a00      	ldr	r2, [sp, #0]
    aa3a:	f85e 2002 	ldr.w	r2, [lr, r2]
  return (op1 >> op2) | (op1 << (32U - op2));
    aa3e:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    aa42:	fa2f f484 	sxtb16	r4, r4
  return (op1 >> op2) | (op1 << (32U - op2));
    aa46:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    aa4a:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    aa4e:	fb2a 9907 	smlad	r9, sl, r7, r9
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    aa52:	fa2f fb82 	sxtb16	fp, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    aa56:	fb25 9904 	smlad	r9, r5, r4, r9
  return (op1 >> op2) | (op1 << (32U - op2));
    aa5a:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    aa5e:	fa2f f682 	sxtb16	r6, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    aa62:	fb2a 110b 	smlad	r1, sl, fp, r1
    aa66:	fb25 1106 	smlad	r1, r5, r6, r1
    aa6a:	9a00      	ldr	r2, [sp, #0]
    aa6c:	f858 2002 	ldr.w	r2, [r8, r2]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    aa70:	fa2f f582 	sxtb16	r5, r2
  return (op1 >> op2) | (op1 << (32U - op2));
    aa74:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    aa78:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    aa7c:	fb25 0707 	smlad	r7, r5, r7, r0
    aa80:	fb25 330b 	smlad	r3, r5, fp, r3
    aa84:	fb22 7704 	smlad	r7, r2, r4, r7
  memcpy(&val, *in_q7, 4);
    aa88:	f8de 4004 	ldr.w	r4, [lr, #4]
    aa8c:	fb22 3206 	smlad	r2, r2, r6, r3
  memcpy(&val, in_q7, 4);
    aa90:	9b05      	ldr	r3, [sp, #20]
    aa92:	f85e 3003 	ldr.w	r3, [lr, r3]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    aa96:	fa2f f684 	sxtb16	r6, r4
  memcpy(&val, *in_q7, 4);
    aa9a:	f8d8 5004 	ldr.w	r5, [r8, #4]
    aa9e:	fa2f fa85 	sxtb16	sl, r5
  return (op1 >> op2) | (op1 << (32U - op2));
    aaa2:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    aaa6:	fa2f f484 	sxtb16	r4, r4
  return (op1 >> op2) | (op1 << (32U - op2));
    aaaa:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    aaae:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    aab2:	fb2a 9906 	smlad	r9, sl, r6, r9
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    aab6:	fa2f fb83 	sxtb16	fp, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    aaba:	fb25 9904 	smlad	r9, r5, r4, r9
  return (op1 >> op2) | (op1 << (32U - op2));
    aabe:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    aac2:	fa2f f083 	sxtb16	r0, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    aac6:	fb2a 110b 	smlad	r1, sl, fp, r1
    aaca:	fb25 1500 	smlad	r5, r5, r0, r1
  memcpy(&val, in_q7, 4);
    aace:	9b05      	ldr	r3, [sp, #20]
    aad0:	f858 3003 	ldr.w	r3, [r8, r3]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    aad4:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
    aad8:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    aadc:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    aae0:	fb21 7706 	smlad	r7, r1, r6, r7
    aae4:	fb21 220b 	smlad	r2, r1, fp, r2
    aae8:	fb23 7404 	smlad	r4, r3, r4, r7
  memcpy(&val, *in_q7, 4);
    aaec:	f8de 6008 	ldr.w	r6, [lr, #8]
    aaf0:	fb23 2300 	smlad	r3, r3, r0, r2
  memcpy(&val, in_q7, 4);
    aaf4:	9a03      	ldr	r2, [sp, #12]
    aaf6:	f85e 0002 	ldr.w	r0, [lr, r2]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    aafa:	fa2f f786 	sxtb16	r7, r6
  memcpy(&val, *in_q7, 4);
    aafe:	f8d8 1008 	ldr.w	r1, [r8, #8]
    ab02:	fa2f fa81 	sxtb16	sl, r1
  return (op1 >> op2) | (op1 << (32U - op2));
    ab06:	ea4f 2236 	mov.w	r2, r6, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ab0a:	fa2f f282 	sxtb16	r2, r2
  return (op1 >> op2) | (op1 << (32U - op2));
    ab0e:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ab12:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    ab16:	fb2a 9907 	smlad	r9, sl, r7, r9
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ab1a:	fa2f fb80 	sxtb16	fp, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    ab1e:	fb21 9902 	smlad	r9, r1, r2, r9
  return (op1 >> op2) | (op1 << (32U - op2));
    ab22:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ab26:	fa2f f080 	sxtb16	r0, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    ab2a:	fb2a 550b 	smlad	r5, sl, fp, r5
    ab2e:	fb21 5500 	smlad	r5, r1, r0, r5
  memcpy(&val, in_q7, 4);
    ab32:	9903      	ldr	r1, [sp, #12]
    ab34:	f858 6001 	ldr.w	r6, [r8, r1]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ab38:	fa2f f186 	sxtb16	r1, r6
  return (op1 >> op2) | (op1 << (32U - op2));
    ab3c:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ab40:	fa2f f686 	sxtb16	r6, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    ab44:	fb21 4407 	smlad	r4, r1, r7, r4
    ab48:	fb21 330b 	smlad	r3, r1, fp, r3
    ab4c:	fb26 4402 	smlad	r4, r6, r2, r4
  memcpy(&val, *in_q7, 4);
    ab50:	f8de 200c 	ldr.w	r2, [lr, #12]
    ab54:	f10e 0e10 	add.w	lr, lr, #16
    ab58:	fb26 3000 	smlad	r0, r6, r0, r3
  memcpy(&val, in_q7, 4);
    ab5c:	9b04      	ldr	r3, [sp, #16]
    ab5e:	f85e 6003 	ldr.w	r6, [lr, r3]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ab62:	fa2f f782 	sxtb16	r7, r2
  memcpy(&val, *in_q7, 4);
    ab66:	f8d8 100c 	ldr.w	r1, [r8, #12]
    ab6a:	f108 0810 	add.w	r8, r8, #16
    ab6e:	fa2f fa81 	sxtb16	sl, r1
  return (op1 >> op2) | (op1 << (32U - op2));
    ab72:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ab76:	fa2f f282 	sxtb16	r2, r2
  return (op1 >> op2) | (op1 << (32U - op2));
    ab7a:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ab7e:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    ab82:	fb2a 9907 	smlad	r9, sl, r7, r9
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ab86:	fa2f fb86 	sxtb16	fp, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    ab8a:	fb21 9902 	smlad	r9, r1, r2, r9
  return (op1 >> op2) | (op1 << (32U - op2));
    ab8e:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ab92:	fa2f f686 	sxtb16	r6, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    ab96:	fb2a 550b 	smlad	r5, sl, fp, r5
    ab9a:	fb21 5106 	smlad	r1, r1, r6, r5
  memcpy(&val, in_q7, 4);
    ab9e:	f858 3003 	ldr.w	r3, [r8, r3]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    aba2:	fa2f f583 	sxtb16	r5, r3
  return (op1 >> op2) | (op1 << (32U - op2));
    aba6:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    abaa:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    abae:	fb25 4407 	smlad	r4, r5, r7, r4
    abb2:	fb25 0b0b 	smlad	fp, r5, fp, r0
    abb6:	fb23 4002 	smlad	r0, r3, r2, r4
    abba:	fb23 b306 	smlad	r3, r3, r6, fp
    abbe:	f10c 0c10 	add.w	ip, ip, #16
    abc2:	9a06      	ldr	r2, [sp, #24]
    abc4:	4594      	cmp	ip, r2
    abc6:	f77f af2f 	ble.w	aa28 <arm_nn_mat_mult_nt_t_s8+0x340>
    abca:	460c      	mov	r4, r1
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
    abcc:	9a40      	ldr	r2, [sp, #256]	; 0x100
    abce:	4562      	cmp	r2, ip
    abd0:	dd23      	ble.n	ac1a <arm_nn_mat_mult_nt_t_s8+0x532>
    abd2:	f10e 3aff 	add.w	sl, lr, #4294967295
    abd6:	9900      	ldr	r1, [sp, #0]
    abd8:	eb0e 0201 	add.w	r2, lr, r1
    abdc:	f108 37ff 	add.w	r7, r8, #4294967295
    abe0:	eb08 0601 	add.w	r6, r8, r1
    abe4:	46e3      	mov	fp, ip
    abe6:	9920      	ldr	r1, [sp, #128]	; 0x80
    abe8:	eba1 0c0c 	sub.w	ip, r1, ip
    abec:	44f4      	add	ip, lr
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
    abee:	f912 1b01 	ldrsb.w	r1, [r2], #1
                res00 += lhs_value * rhs_value0;
    abf2:	f917 5f01 	ldrsb.w	r5, [r7, #1]!
    abf6:	f91a ef01 	ldrsb.w	lr, [sl, #1]!
    abfa:	fb0e 9905 	mla	r9, lr, r5, r9
                res01 += lhs_value * rhs_value1;
    abfe:	fb01 4405 	mla	r4, r1, r5, r4
                lhs_value  = lhs_ptr[rhs_cols];
    ac02:	f916 5b01 	ldrsb.w	r5, [r6], #1
                res10 += lhs_value * rhs_value0;
    ac06:	fb05 000e 	mla	r0, r5, lr, r0
                res11 += lhs_value * rhs_value1;
    ac0a:	fb05 3301 	mla	r3, r5, r1, r3
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
    ac0e:	4562      	cmp	r2, ip
    ac10:	d1ed      	bne.n	abee <arm_nn_mat_mult_nt_t_s8+0x506>
    ac12:	9a00      	ldr	r2, [sp, #0]
    ac14:	eba2 0b0b 	sub.w	fp, r2, fp
    ac18:	44d8      	add	r8, fp
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx],     dst_shifts[rhs_rows_idx]);
    ac1a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    ac1c:	f852 ec04 	ldr.w	lr, [r2, #-4]
    ac20:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    ac22:	f852 2c04 	ldr.w	r2, [r2, #-4]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    ac26:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
    ac2a:	9112      	str	r1, [sp, #72]	; 0x48
    ac2c:	fa09 f901 	lsl.w	r9, r9, r1
    if ((m1 < 0) ^ (m2 < 0))
    ac30:	ea4f 71de 	mov.w	r1, lr, lsr #31
    ac34:	9113      	str	r1, [sp, #76]	; 0x4c
    ac36:	ebb1 7fd9 	cmp.w	r1, r9, lsr #31
    ac3a:	f43f ada1 	beq.w	a780 <arm_nn_mat_mult_nt_t_s8+0x98>
        mult = 1 - mult;
    ac3e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    ac42:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    mult = mult + (q63_t)m1 * m2;
    ac46:	4675      	mov	r5, lr
    ac48:	17ee      	asrs	r6, r5, #31
    ac4a:	e9cd 5614 	strd	r5, r6, [sp, #80]	; 0x50
    ac4e:	fb09 f106 	mul.w	r1, r9, r6
    ac52:	464e      	mov	r6, r9
    ac54:	17f7      	asrs	r7, r6, #31
    ac56:	fb0e 1107 	mla	r1, lr, r7, r1
    ac5a:	fba9 670e 	umull	r6, r7, r9, lr
    ac5e:	440f      	add	r7, r1
    ac60:	eb16 060a 	adds.w	r6, r6, sl
    ac64:	eb47 070b 	adc.w	r7, r7, fp
    result = (int32_t) (mult / (1ll << 31));
    ac68:	46b2      	mov	sl, r6
    ac6a:	46bb      	mov	fp, r7
    ac6c:	2e00      	cmp	r6, #0
    ac6e:	f177 0100 	sbcs.w	r1, r7, #0
    ac72:	f6ff ad8a 	blt.w	a78a <arm_nn_mat_mult_nt_t_s8+0xa2>
    ac76:	ea4f 71da 	mov.w	r1, sl, lsr #31
    ac7a:	ea41 014b 	orr.w	r1, r1, fp, lsl #1
    ac7e:	9107      	str	r1, [sp, #28]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    ac80:	45ce      	cmp	lr, r9
    ac82:	f43f ad8b 	beq.w	a79c <arm_nn_mat_mult_nt_t_s8+0xb4>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    ac86:	2a00      	cmp	r2, #0
    ac88:	f77f ad99 	ble.w	a7be <arm_nn_mat_mult_nt_t_s8+0xd6>
    if (result < 0)
    ac8c:	9a07      	ldr	r2, [sp, #28]
    ac8e:	2a00      	cmp	r2, #0
    ac90:	f6ff ada8 	blt.w	a7e4 <arm_nn_mat_mult_nt_t_s8+0xfc>
    q31_t threshold = remainder_mask >> 1;
    ac94:	2200      	movs	r2, #0
    ac96:	9208      	str	r2, [sp, #32]
    const q31_t remainder_mask = (1 << exponent) - 1;
    ac98:	9218      	str	r2, [sp, #96]	; 0x60
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    ac9a:	9217      	str	r2, [sp, #92]	; 0x5c
    ac9c:	e5ae      	b.n	a7fc <arm_nn_mat_mult_nt_t_s8+0x114>
    q63_t mult = 1 << 30;
    ac9e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
    aca0:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
    aca2:	e62a      	b.n	a8fa <arm_nn_mat_mult_nt_t_s8+0x212>
    result = (int32_t) (mult / (1ll << 31));
    aca4:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    aca8:	2700      	movs	r7, #0
    acaa:	1936      	adds	r6, r6, r4
    acac:	416f      	adcs	r7, r5
    acae:	e636      	b.n	a91e <arm_nn_mat_mult_nt_t_s8+0x236>
        result = Q31_MAX;
    acb0:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    acb4:	bf08      	it	eq
    acb6:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000
    acba:	e636      	b.n	a92a <arm_nn_mat_mult_nt_t_s8+0x242>
        threshold++;
    acbc:	9808      	ldr	r0, [sp, #32]
    acbe:	3001      	adds	r0, #1
    acc0:	9008      	str	r0, [sp, #32]
    acc2:	e638      	b.n	a936 <arm_nn_mat_mult_nt_t_s8+0x24e>
    q63_t mult = 1 << 30;
    acc4:	991e      	ldr	r1, [sp, #120]	; 0x78
    acc6:	9108      	str	r1, [sp, #32]
    acc8:	991f      	ldr	r1, [sp, #124]	; 0x7c
    acca:	9109      	str	r1, [sp, #36]	; 0x24
    accc:	e641      	b.n	a952 <arm_nn_mat_mult_nt_t_s8+0x26a>
    result = (int32_t) (mult / (1ll << 31));
    acce:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    acd2:	2500      	movs	r5, #0
    acd4:	1824      	adds	r4, r4, r0
    acd6:	414d      	adcs	r5, r1
    acd8:	e64f      	b.n	a97a <arm_nn_mat_mult_nt_t_s8+0x292>
        result = Q31_MAX;
    acda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    acde:	bf08      	it	eq
    ace0:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    ace4:	e64f      	b.n	a986 <arm_nn_mat_mult_nt_t_s8+0x29e>
    ace6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ace8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    acea:	eb03 0b02 	add.w	fp, r3, r2
        if (lhs_rows % 2)
    acee:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    acf0:	f013 0f01 	tst.w	r3, #1
    acf4:	f000 812f 	beq.w	af56 <arm_nn_mat_mult_nt_t_s8+0x86e>
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
    acf8:	9806      	ldr	r0, [sp, #24]
    acfa:	2800      	cmp	r0, #0
    acfc:	f2c0 8187 	blt.w	b00e <arm_nn_mat_mult_nt_t_s8+0x926>
    ad00:	9f26      	ldr	r7, [sp, #152]	; 0x98
    ad02:	9e19      	ldr	r6, [sp, #100]	; 0x64
    ad04:	f04f 0e00 	mov.w	lr, #0
    ad08:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    ad0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  memcpy(&val, *in_q7, 4);
    ad0c:	6831      	ldr	r1, [r6, #0]
  memcpy(&val, in_q7, 4);
    ad0e:	683c      	ldr	r4, [r7, #0]
  memcpy(&val, *in_q7, 4);
    ad10:	f8d8 2000 	ldr.w	r2, [r8]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ad14:	fa2f fa81 	sxtb16	sl, r1
    ad18:	fa2f fc82 	sxtb16	ip, r2
    ad1c:	fa2f f984 	sxtb16	r9, r4
  return (op1 >> op2) | (op1 << (32U - op2));
    ad20:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ad24:	fa2f f181 	sxtb16	r1, r1
  return (op1 >> op2) | (op1 << (32U - op2));
    ad28:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ad2c:	fa2f f282 	sxtb16	r2, r2
  return (op1 >> op2) | (op1 << (32U - op2));
    ad30:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ad34:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    ad38:	fb2c 550a 	smlad	r5, ip, sl, r5
    ad3c:	fb22 5101 	smlad	r1, r2, r1, r5
    ad40:	fb2c 3309 	smlad	r3, ip, r9, r3
    ad44:	fb22 3204 	smlad	r2, r2, r4, r3
    ad48:	6875      	ldr	r5, [r6, #4]
  memcpy(&val, in_q7, 4);
    ad4a:	687c      	ldr	r4, [r7, #4]
  memcpy(&val, *in_q7, 4);
    ad4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ad50:	fa2f fa85 	sxtb16	sl, r5
    ad54:	fa2f fc83 	sxtb16	ip, r3
    ad58:	fa2f f984 	sxtb16	r9, r4
  return (op1 >> op2) | (op1 << (32U - op2));
    ad5c:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ad60:	fa2f f585 	sxtb16	r5, r5
  return (op1 >> op2) | (op1 << (32U - op2));
    ad64:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ad68:	fa2f f383 	sxtb16	r3, r3
  return (op1 >> op2) | (op1 << (32U - op2));
    ad6c:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ad70:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    ad74:	fb2c 110a 	smlad	r1, ip, sl, r1
    ad78:	fb23 1105 	smlad	r1, r3, r5, r1
    ad7c:	fb2c 2209 	smlad	r2, ip, r9, r2
    ad80:	fb23 2304 	smlad	r3, r3, r4, r2
    ad84:	68b5      	ldr	r5, [r6, #8]
  memcpy(&val, in_q7, 4);
    ad86:	68bc      	ldr	r4, [r7, #8]
  memcpy(&val, *in_q7, 4);
    ad88:	f8d8 2008 	ldr.w	r2, [r8, #8]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ad8c:	fa2f fa85 	sxtb16	sl, r5
    ad90:	fa2f fc82 	sxtb16	ip, r2
    ad94:	fa2f f984 	sxtb16	r9, r4
  return (op1 >> op2) | (op1 << (32U - op2));
    ad98:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ad9c:	fa2f f585 	sxtb16	r5, r5
  return (op1 >> op2) | (op1 << (32U - op2));
    ada0:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ada4:	fa2f f282 	sxtb16	r2, r2
  return (op1 >> op2) | (op1 << (32U - op2));
    ada8:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    adac:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    adb0:	fb2c 110a 	smlad	r1, ip, sl, r1
    adb4:	fb22 1105 	smlad	r1, r2, r5, r1
    adb8:	fb2c 3309 	smlad	r3, ip, r9, r3
    adbc:	fb22 3404 	smlad	r4, r2, r4, r3
    adc0:	68f2      	ldr	r2, [r6, #12]
    adc2:	3610      	adds	r6, #16
  memcpy(&val, in_q7, 4);
    adc4:	f8d7 c00c 	ldr.w	ip, [r7, #12]
  memcpy(&val, *in_q7, 4);
    adc8:	f8d8 300c 	ldr.w	r3, [r8, #12]
    adcc:	f108 0810 	add.w	r8, r8, #16
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    add0:	fa2f f582 	sxtb16	r5, r2
    add4:	fa2f f983 	sxtb16	r9, r3
    add8:	fa2f fa8c 	sxtb16	sl, ip
  return (op1 >> op2) | (op1 << (32U - op2));
    addc:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ade0:	fa2f f282 	sxtb16	r2, r2
  return (op1 >> op2) | (op1 << (32U - op2));
    ade4:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    ade8:	fa2f f383 	sxtb16	r3, r3
  return (op1 >> op2) | (op1 << (32U - op2));
    adec:	ea4f 2c3c 	mov.w	ip, ip, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    adf0:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    adf4:	fb29 1505 	smlad	r5, r9, r5, r1
    adf8:	fb23 5502 	smlad	r5, r3, r2, r5
    adfc:	fb29 440a 	smlad	r4, r9, sl, r4
    ae00:	fb23 430c 	smlad	r3, r3, ip, r4
    ae04:	f10e 0e10 	add.w	lr, lr, #16
    ae08:	3710      	adds	r7, #16
    ae0a:	4586      	cmp	lr, r0
    ae0c:	f77f af7e 	ble.w	ad0c <arm_nn_mat_mult_nt_t_s8+0x624>
    ae10:	951c      	str	r5, [sp, #112]	; 0x70
    ae12:	931d      	str	r3, [sp, #116]	; 0x74
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
    ae14:	9b40      	ldr	r3, [sp, #256]	; 0x100
    ae16:	4573      	cmp	r3, lr
    ae18:	dd15      	ble.n	ae46 <arm_nn_mat_mult_nt_t_s8+0x75e>
    ae1a:	1e71      	subs	r1, r6, #1
    ae1c:	9a00      	ldr	r2, [sp, #0]
    ae1e:	4416      	add	r6, r2
    ae20:	eba2 030e 	sub.w	r3, r2, lr
    ae24:	4443      	add	r3, r8
    ae26:	981c      	ldr	r0, [sp, #112]	; 0x70
    ae28:	9c1d      	ldr	r4, [sp, #116]	; 0x74
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
    ae2a:	f916 5b01 	ldrsb.w	r5, [r6], #1
                res00 += lhs_value * rhs_value0;
    ae2e:	f918 2b01 	ldrsb.w	r2, [r8], #1
    ae32:	f911 7f01 	ldrsb.w	r7, [r1, #1]!
    ae36:	fb02 0007 	mla	r0, r2, r7, r0
                res01 += lhs_value * rhs_value1;
    ae3a:	fb02 4405 	mla	r4, r2, r5, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
    ae3e:	4598      	cmp	r8, r3
    ae40:	d1f3      	bne.n	ae2a <arm_nn_mat_mult_nt_t_s8+0x742>
    ae42:	901c      	str	r0, [sp, #112]	; 0x70
    ae44:	941d      	str	r4, [sp, #116]	; 0x74
    ae46:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ae48:	469c      	mov	ip, r3
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx],     dst_shifts[rhs_rows_idx]);
    ae4a:	f853 2c04 	ldr.w	r2, [r3, #-4]
    ae4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ae50:	469e      	mov	lr, r3
    ae52:	f853 6c04 	ldr.w	r6, [r3, #-4]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    ae56:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
    ae5a:	991c      	ldr	r1, [sp, #112]	; 0x70
    ae5c:	4099      	lsls	r1, r3
    ae5e:	460b      	mov	r3, r1
    if ((m1 < 0) ^ (m2 < 0))
    ae60:	0fd1      	lsrs	r1, r2, #31
    ae62:	ebb1 7fd3 	cmp.w	r1, r3, lsr #31
    ae66:	f000 80d6 	beq.w	b016 <arm_nn_mat_mult_nt_t_s8+0x92e>
        mult = 1 - mult;
    ae6a:	f8df 8398 	ldr.w	r8, [pc, #920]	; b204 <arm_nn_mat_mult_nt_t_s8+0xb1c>
    ae6e:	f04f 39ff 	mov.w	r9, #4294967295
    mult = mult + (q63_t)m1 * m2;
    ae72:	17d1      	asrs	r1, r2, #31
    ae74:	fb03 f401 	mul.w	r4, r3, r1
    ae78:	17d9      	asrs	r1, r3, #31
    ae7a:	fb02 4401 	mla	r4, r2, r1, r4
    ae7e:	fba3 0102 	umull	r0, r1, r3, r2
    ae82:	4421      	add	r1, r4
    ae84:	eb10 0008 	adds.w	r0, r0, r8
    ae88:	eb41 0109 	adc.w	r1, r1, r9
    result = (int32_t) (mult / (1ll << 31));
    ae8c:	4604      	mov	r4, r0
    ae8e:	460d      	mov	r5, r1
    ae90:	2800      	cmp	r0, #0
    ae92:	f171 0700 	sbcs.w	r7, r1, #0
    ae96:	f2c0 80c3 	blt.w	b020 <arm_nn_mat_mult_nt_t_s8+0x938>
    ae9a:	0fe1      	lsrs	r1, r4, #31
    ae9c:	ea41 0745 	orr.w	r7, r1, r5, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    aea0:	429a      	cmp	r2, r3
    aea2:	f000 80c3 	beq.w	b02c <arm_nn_mat_mult_nt_t_s8+0x944>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    aea6:	2e00      	cmp	r6, #0
    aea8:	f340 80cb 	ble.w	b042 <arm_nn_mat_mult_nt_t_s8+0x95a>
    if (result < 0)
    aeac:	2f00      	cmp	r7, #0
    aeae:	da05      	bge.n	aebc <arm_nn_mat_mult_nt_t_s8+0x7d4>
    q31_t threshold = remainder_mask >> 1;
    aeb0:	2300      	movs	r3, #0
    int32_t remainder = remainder_mask & dividend;
    aeb2:	461a      	mov	r2, r3
        threshold++;
    aeb4:	3301      	adds	r3, #1
    if (remainder > threshold)
    aeb6:	4293      	cmp	r3, r2
        result++;
    aeb8:	bfb8      	it	lt
    aeba:	3701      	addlt	r7, #1
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
    aebc:	f8dc 2000 	ldr.w	r2, [ip]
    aec0:	f8de 6000 	ldr.w	r6, [lr]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    aec4:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
    aec8:	991d      	ldr	r1, [sp, #116]	; 0x74
    aeca:	4099      	lsls	r1, r3
    aecc:	460b      	mov	r3, r1
    if ((m1 < 0) ^ (m2 < 0))
    aece:	0fd1      	lsrs	r1, r2, #31
    aed0:	ebb1 7fd3 	cmp.w	r1, r3, lsr #31
    aed4:	f000 80c0 	beq.w	b058 <arm_nn_mat_mult_nt_t_s8+0x970>
        mult = 1 - mult;
    aed8:	f8df 8328 	ldr.w	r8, [pc, #808]	; b204 <arm_nn_mat_mult_nt_t_s8+0xb1c>
    aedc:	f04f 39ff 	mov.w	r9, #4294967295
    mult = mult + (q63_t)m1 * m2;
    aee0:	17d1      	asrs	r1, r2, #31
    aee2:	fb03 f401 	mul.w	r4, r3, r1
    aee6:	17d9      	asrs	r1, r3, #31
    aee8:	fb02 4401 	mla	r4, r2, r1, r4
    aeec:	fba3 0102 	umull	r0, r1, r3, r2
    aef0:	4421      	add	r1, r4
    aef2:	eb10 0008 	adds.w	r0, r0, r8
    aef6:	eb41 0109 	adc.w	r1, r1, r9
    result = (int32_t) (mult / (1ll << 31));
    aefa:	4604      	mov	r4, r0
    aefc:	460d      	mov	r5, r1
    aefe:	2800      	cmp	r0, #0
    af00:	f171 0e00 	sbcs.w	lr, r1, #0
    af04:	f2c0 80ad 	blt.w	b062 <arm_nn_mat_mult_nt_t_s8+0x97a>
    af08:	0fe1      	lsrs	r1, r4, #31
    af0a:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    af0e:	429a      	cmp	r2, r3
    af10:	f000 80ad 	beq.w	b06e <arm_nn_mat_mult_nt_t_s8+0x986>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    af14:	2e00      	cmp	r6, #0
    af16:	f340 80b5 	ble.w	b084 <arm_nn_mat_mult_nt_t_s8+0x99c>
    if (result < 0)
    af1a:	2900      	cmp	r1, #0
    af1c:	da05      	bge.n	af2a <arm_nn_mat_mult_nt_t_s8+0x842>
    q31_t threshold = remainder_mask >> 1;
    af1e:	2300      	movs	r3, #0
    int32_t remainder = remainder_mask & dividend;
    af20:	461a      	mov	r2, r3
        threshold++;
    af22:	3301      	adds	r3, #1
    if (remainder > threshold)
    af24:	4293      	cmp	r3, r2
        result++;
    af26:	bfb8      	it	lt
    af28:	3101      	addlt	r1, #1
            res00 += dst_offset;
    af2a:	9b42      	ldr	r3, [sp, #264]	; 0x108
    af2c:	443b      	add	r3, r7
            res01 += dst_offset;
    af2e:	9a42      	ldr	r2, [sp, #264]	; 0x108
    af30:	4411      	add	r1, r2
            res00 = MAX(res00, activation_min);
    af32:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    af34:	4293      	cmp	r3, r2
    af36:	bfb8      	it	lt
    af38:	4613      	movlt	r3, r2
            res01 = MAX(res01, activation_min);
    af3a:	4291      	cmp	r1, r2
    af3c:	bfb8      	it	lt
    af3e:	4611      	movlt	r1, r2
            res00 = MIN(res00, activation_max);
    af40:	9a44      	ldr	r2, [sp, #272]	; 0x110
    af42:	4293      	cmp	r3, r2
    af44:	bfa8      	it	ge
    af46:	4613      	movge	r3, r2
            dst_ptr[0] = (q7_t)res00;
    af48:	f88b 3000 	strb.w	r3, [fp]
            res01 = MIN(res01, activation_max);
    af4c:	4291      	cmp	r1, r2
    af4e:	bfa8      	it	ge
    af50:	4611      	movge	r1, r2
            dst_ptr[1] = (q7_t)res01;
    af52:	f88b 1001 	strb.w	r1, [fp, #1]
        rhs += 2 * rhs_cols;
    af56:	9b19      	ldr	r3, [sp, #100]	; 0x64
    af58:	4619      	mov	r1, r3
    af5a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    af5c:	4411      	add	r1, r2
    af5e:	9119      	str	r1, [sp, #100]	; 0x64
        dst += 2;
    af60:	9b25      	ldr	r3, [sp, #148]	; 0x94
    af62:	3302      	adds	r3, #2
    af64:	9325      	str	r3, [sp, #148]	; 0x94
    af66:	9b26      	ldr	r3, [sp, #152]	; 0x98
    af68:	4619      	mov	r1, r3
    af6a:	4411      	add	r1, r2
    af6c:	9126      	str	r1, [sp, #152]	; 0x98
    af6e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    af70:	3308      	adds	r3, #8
    af72:	931a      	str	r3, [sp, #104]	; 0x68
    af74:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    af76:	3208      	adds	r2, #8
    af78:	921b      	str	r2, [sp, #108]	; 0x6c
    af7a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    af7c:	3208      	adds	r2, #8
    af7e:	9227      	str	r2, [sp, #156]	; 0x9c
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
    af80:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    af82:	4293      	cmp	r3, r2
    af84:	f000 8089 	beq.w	b09a <arm_nn_mat_mult_nt_t_s8+0x9b2>
        for (int32_t x = 0; x < rhs_cols; ++x)
    af88:	9b40      	ldr	r3, [sp, #256]	; 0x100
    af8a:	2b00      	cmp	r3, #0
    af8c:	f77f abf4 	ble.w	a778 <arm_nn_mat_mult_nt_t_s8+0x90>
    af90:	9a19      	ldr	r2, [sp, #100]	; 0x64
    af92:	4613      	mov	r3, r2
    af94:	1e50      	subs	r0, r2, #1
    af96:	9a20      	ldr	r2, [sp, #128]	; 0x80
    af98:	189d      	adds	r5, r3, r2
    af9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    af9c:	2200      	movs	r2, #0
    af9e:	4611      	mov	r1, r2
            lhs_offset_contribution0 += rhs[x];
    afa0:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
    afa4:	4421      	add	r1, r4
            lhs_offset_contribution1 += rhs[x + rhs_cols];
    afa6:	f913 4b01 	ldrsb.w	r4, [r3], #1
    afaa:	4422      	add	r2, r4
        for (int32_t x = 0; x < rhs_cols; ++x)
    afac:	42ab      	cmp	r3, r5
    afae:	d1f7      	bne.n	afa0 <arm_nn_mat_mult_nt_t_s8+0x8b8>
        lhs_offset_contribution0 += bias[rhs_rows_idx];
    afb0:	9827      	ldr	r0, [sp, #156]	; 0x9c
    afb2:	f850 3c04 	ldr.w	r3, [r0, #-4]
    afb6:	9c41      	ldr	r4, [sp, #260]	; 0x104
    afb8:	fb01 3304 	mla	r3, r1, r4, r3
    afbc:	931c      	str	r3, [sp, #112]	; 0x70
        lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
    afbe:	6803      	ldr	r3, [r0, #0]
    afc0:	fb02 3304 	mla	r3, r2, r4, r3
    afc4:	931d      	str	r3, [sp, #116]	; 0x74
        while (lhs_rows_idx)
    afc6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    afc8:	b1e3      	cbz	r3, b004 <arm_nn_mat_mult_nt_t_s8+0x91c>
    afca:	9a25      	ldr	r2, [sp, #148]	; 0x94
    afcc:	992b      	ldr	r1, [sp, #172]	; 0xac
    afce:	1851      	adds	r1, r2, r1
    afd0:	910e      	str	r1, [sp, #56]	; 0x38
    afd2:	930c      	str	r3, [sp, #48]	; 0x30
    afd4:	920d      	str	r2, [sp, #52]	; 0x34
    afd6:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
    afda:	9a00      	ldr	r2, [sp, #0]
    afdc:	4613      	mov	r3, r2
    afde:	3308      	adds	r3, #8
    afe0:	9303      	str	r3, [sp, #12]
    afe2:	1f13      	subs	r3, r2, #4
    afe4:	9304      	str	r3, [sp, #16]
    afe6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    afe8:	9321      	str	r3, [sp, #132]	; 0x84
    afea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    afec:	9322      	str	r3, [sp, #136]	; 0x88
    afee:	e50d      	b.n	aa0c <arm_nn_mat_mult_nt_t_s8+0x324>
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
    aff0:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
    aff4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    aff6:	4623      	mov	r3, r4
    aff8:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
    affc:	4648      	mov	r0, r9
    affe:	f04f 0c00 	mov.w	ip, #0
    b002:	e5e3      	b.n	abcc <arm_nn_mat_mult_nt_t_s8+0x4e4>
        const q7_t *lhs_ptr = &lhs[0];
    b004:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
        while (lhs_rows_idx)
    b008:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
    b00c:	e66f      	b.n	acee <arm_nn_mat_mult_nt_t_s8+0x606>
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
    b00e:	9e19      	ldr	r6, [sp, #100]	; 0x64
    b010:	f04f 0e00 	mov.w	lr, #0
    b014:	e6fe      	b.n	ae14 <arm_nn_mat_mult_nt_t_s8+0x72c>
    q63_t mult = 1 << 30;
    b016:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    b01a:	f04f 0900 	mov.w	r9, #0
    b01e:	e728      	b.n	ae72 <arm_nn_mat_mult_nt_t_s8+0x78a>
    result = (int32_t) (mult / (1ll << 31));
    b020:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    b024:	2500      	movs	r5, #0
    b026:	1824      	adds	r4, r4, r0
    b028:	414d      	adcs	r5, r1
    b02a:	e736      	b.n	ae9a <arm_nn_mat_mult_nt_t_s8+0x7b2>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    b02c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    b030:	f47f af39 	bne.w	aea6 <arm_nn_mat_mult_nt_t_s8+0x7be>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b034:	2e00      	cmp	r6, #0
    b036:	dd02      	ble.n	b03e <arm_nn_mat_mult_nt_t_s8+0x956>
        result = Q31_MAX;
    b038:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    b03c:	e73e      	b.n	aebc <arm_nn_mat_mult_nt_t_s8+0x7d4>
    b03e:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b042:	4276      	negs	r6, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
    b044:	2301      	movs	r3, #1
    b046:	40b3      	lsls	r3, r6
    b048:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
    b04a:	ea07 0203 	and.w	r2, r7, r3
    q31_t threshold = remainder_mask >> 1;
    b04e:	105b      	asrs	r3, r3, #1
    if (result < 0)
    b050:	4137      	asrs	r7, r6
    b052:	f57f af30 	bpl.w	aeb6 <arm_nn_mat_mult_nt_t_s8+0x7ce>
    b056:	e72d      	b.n	aeb4 <arm_nn_mat_mult_nt_t_s8+0x7cc>
    q63_t mult = 1 << 30;
    b058:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    b05c:	f04f 0900 	mov.w	r9, #0
    b060:	e73e      	b.n	aee0 <arm_nn_mat_mult_nt_t_s8+0x7f8>
    result = (int32_t) (mult / (1ll << 31));
    b062:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    b066:	2500      	movs	r5, #0
    b068:	1824      	adds	r4, r4, r0
    b06a:	414d      	adcs	r5, r1
    b06c:	e74c      	b.n	af08 <arm_nn_mat_mult_nt_t_s8+0x820>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    b06e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    b072:	f47f af4f 	bne.w	af14 <arm_nn_mat_mult_nt_t_s8+0x82c>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b076:	2e00      	cmp	r6, #0
    b078:	dd02      	ble.n	b080 <arm_nn_mat_mult_nt_t_s8+0x998>
        result = Q31_MAX;
    b07a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b07e:	e754      	b.n	af2a <arm_nn_mat_mult_nt_t_s8+0x842>
    b080:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b084:	4276      	negs	r6, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
    b086:	2301      	movs	r3, #1
    b088:	40b3      	lsls	r3, r6
    b08a:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
    b08c:	ea01 0203 	and.w	r2, r1, r3
    q31_t threshold = remainder_mask >> 1;
    b090:	105b      	asrs	r3, r3, #1
    if (result < 0)
    b092:	4131      	asrs	r1, r6
    b094:	f57f af46 	bpl.w	af24 <arm_nn_mat_mult_nt_t_s8+0x83c>
    b098:	e743      	b.n	af22 <arm_nn_mat_mult_nt_t_s8+0x83a>
    b09a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b09c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    b09e:	fb02 3303 	mla	r3, r2, r3, r3
    b0a2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    b0a4:	441a      	add	r2, r3
    b0a6:	922d      	str	r2, [sp, #180]	; 0xb4
    b0a8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    b0aa:	f023 0301 	bic.w	r3, r3, #1
    b0ae:	3302      	adds	r3, #2
    b0b0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    b0b2:	441a      	add	r2, r3
    b0b4:	922e      	str	r2, [sp, #184]	; 0xb8
    }

    if (rhs_rows % 2)
    b0b6:	f8dd a0fc 	ldr.w	sl, [sp, #252]	; 0xfc
    b0ba:	f01a 0f01 	tst.w	sl, #1
    b0be:	f000 809d 	beq.w	b1fc <arm_nn_mat_mult_nt_t_s8+0xb14>
    {
        const q7_t *lhs_ptr = &lhs[0];
        q7_t *dst_ptr = &dst[0];

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
    b0c2:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    b0c4:	2b00      	cmp	r3, #0
    b0c6:	f340 8099 	ble.w	b1fc <arm_nn_mat_mult_nt_t_s8+0xb14>
        {
            const q7_t *rhs_ptr = &rhs[0];
            q31_t res00 = bias[rhs_rows - 1];
    b0ca:	f10a 4980 	add.w	r9, sl, #1073741824	; 0x40000000
    b0ce:	f109 39ff 	add.w	r9, r9, #4294967295
    b0d2:	ea4f 0989 	mov.w	r9, r9, lsl #2
    b0d6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    b0d8:	444b      	add	r3, r9
    b0da:	469c      	mov	ip, r3
                ++rhs_ptr;
                ++lhs_ptr;
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
    b0dc:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    b0de:	eb03 0809 	add.w	r8, r3, r9
    b0e2:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    b0e4:	4499      	add	r9, r3
    b0e6:	f04f 0e00 	mov.w	lr, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
    b0ea:	f8cd a00c 	str.w	sl, [sp, #12]
    b0ee:	f8cd c010 	str.w	ip, [sp, #16]
    b0f2:	46c2      	mov	sl, r8
    b0f4:	46f4      	mov	ip, lr
    b0f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    b0f8:	f8dd 80b8 	ldr.w	r8, [sp, #184]	; 0xb8
    b0fc:	9941      	ldr	r1, [sp, #260]	; 0x104
    b0fe:	e03c      	b.n	b17a <arm_nn_mat_mult_nt_t_s8+0xa92>
    q63_t mult = 1 << 30;
    b100:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    b104:	9400      	str	r4, [sp, #0]
    b106:	2400      	movs	r4, #0
    b108:	9401      	str	r4, [sp, #4]
    b10a:	e059      	b.n	b1c0 <arm_nn_mat_mult_nt_t_s8+0xad8>
    result = (int32_t) (mult / (1ll << 31));
    b10c:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    b110:	2700      	movs	r7, #0
    b112:	1936      	adds	r6, r6, r4
    b114:	416f      	adcs	r7, r5
    b116:	e066      	b.n	b1e6 <arm_nn_mat_mult_nt_t_s8+0xafe>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    b118:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b11c:	d168      	bne.n	b1f0 <arm_nn_mat_mult_nt_t_s8+0xb08>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b11e:	f1be 0f00 	cmp.w	lr, #0
    b122:	dd02      	ble.n	b12a <arm_nn_mat_mult_nt_t_s8+0xa42>
        result = Q31_MAX;
    b124:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    b128:	e014      	b.n	b154 <arm_nn_mat_mult_nt_t_s8+0xa6c>
    b12a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b12e:	f1ce 0e00 	rsb	lr, lr, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
    b132:	2201      	movs	r2, #1
    b134:	fa02 f20e 	lsl.w	r2, r2, lr
    b138:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
    b13a:	ea04 0002 	and.w	r0, r4, r2
    q31_t threshold = remainder_mask >> 1;
    b13e:	1052      	asrs	r2, r2, #1
    if (result < 0)
    b140:	fa54 f40e 	asrs.w	r4, r4, lr
    b144:	d503      	bpl.n	b14e <arm_nn_mat_mult_nt_t_s8+0xa66>
    b146:	e001      	b.n	b14c <arm_nn_mat_mult_nt_t_s8+0xa64>
    q31_t threshold = remainder_mask >> 1;
    b148:	2200      	movs	r2, #0
    int32_t remainder = remainder_mask & dividend;
    b14a:	4610      	mov	r0, r2
        threshold++;
    b14c:	3201      	adds	r2, #1
    if (remainder > threshold)
    b14e:	4282      	cmp	r2, r0
        result++;
    b150:	bfb8      	it	lt
    b152:	3401      	addlt	r4, #1

            // Add offset
            res00 += dst_offset;
    b154:	9a42      	ldr	r2, [sp, #264]	; 0x108
    b156:	4422      	add	r2, r4

            // Clamp the result
            res00 = MAX(res00, activation_min);
    b158:	9843      	ldr	r0, [sp, #268]	; 0x10c
    b15a:	4282      	cmp	r2, r0
    b15c:	bfb8      	it	lt
    b15e:	4602      	movlt	r2, r0
            res00 = MIN(res00, activation_max);
    b160:	9844      	ldr	r0, [sp, #272]	; 0x110
    b162:	4282      	cmp	r2, r0
    b164:	bfa8      	it	ge
    b166:	4602      	movge	r2, r0

            dst_ptr[0] = (q7_t)res00;
    b168:	f888 2000 	strb.w	r2, [r8]
            dst_ptr += rhs_rows;
    b16c:	9a03      	ldr	r2, [sp, #12]
    b16e:	4490      	add	r8, r2
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
    b170:	f10c 0c01 	add.w	ip, ip, #1
    b174:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    b176:	4562      	cmp	r2, ip
    b178:	d040      	beq.n	b1fc <arm_nn_mat_mult_nt_t_s8+0xb14>
            q31_t res00 = bias[rhs_rows - 1];
    b17a:	9a04      	ldr	r2, [sp, #16]
    b17c:	6812      	ldr	r2, [r2, #0]
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
    b17e:	9840      	ldr	r0, [sp, #256]	; 0x100
    b180:	2800      	cmp	r0, #0
    b182:	dd0d      	ble.n	b1a0 <arm_nn_mat_mult_nt_t_s8+0xab8>
    b184:	982d      	ldr	r0, [sp, #180]	; 0xb4
    b186:	1e44      	subs	r4, r0, #1
    b188:	9840      	ldr	r0, [sp, #256]	; 0x100
    b18a:	181e      	adds	r6, r3, r0
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
    b18c:	f913 0b01 	ldrsb.w	r0, [r3], #1
    b190:	4408      	add	r0, r1
                q31_t rhs_value = rhs_ptr[0];
    b192:	f914 5f01 	ldrsb.w	r5, [r4, #1]!
                res00 += lhs_value * rhs_value;
    b196:	fb05 2200 	mla	r2, r5, r0, r2
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
    b19a:	42b3      	cmp	r3, r6
    b19c:	d1f6      	bne.n	b18c <arm_nn_mat_mult_nt_t_s8+0xaa4>
                ++lhs_ptr;
    b19e:	4633      	mov	r3, r6
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
    b1a0:	f8da 0000 	ldr.w	r0, [sl]
    b1a4:	f8d9 e000 	ldr.w	lr, [r9]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b1a8:	ea2e 74ee 	bic.w	r4, lr, lr, asr #31
    b1ac:	40a2      	lsls	r2, r4
    if ((m1 < 0) ^ (m2 < 0))
    b1ae:	0fc4      	lsrs	r4, r0, #31
    b1b0:	ebb4 7fd2 	cmp.w	r4, r2, lsr #31
    b1b4:	d0a4      	beq.n	b100 <arm_nn_mat_mult_nt_t_s8+0xa18>
        mult = 1 - mult;
    b1b6:	4c13      	ldr	r4, [pc, #76]	; (b204 <arm_nn_mat_mult_nt_t_s8+0xb1c>)
    b1b8:	9400      	str	r4, [sp, #0]
    b1ba:	f04f 34ff 	mov.w	r4, #4294967295
    b1be:	9401      	str	r4, [sp, #4]
    mult = mult + (q63_t)m1 * m2;
    b1c0:	17c5      	asrs	r5, r0, #31
    b1c2:	fb02 f605 	mul.w	r6, r2, r5
    b1c6:	17d5      	asrs	r5, r2, #31
    b1c8:	fb00 6605 	mla	r6, r0, r5, r6
    b1cc:	fba2 4500 	umull	r4, r5, r2, r0
    b1d0:	4435      	add	r5, r6
    b1d2:	e9dd 6700 	ldrd	r6, r7, [sp]
    b1d6:	1936      	adds	r6, r6, r4
    b1d8:	416f      	adcs	r7, r5
    b1da:	4634      	mov	r4, r6
    b1dc:	463d      	mov	r5, r7
    result = (int32_t) (mult / (1ll << 31));
    b1de:	2e00      	cmp	r6, #0
    b1e0:	f177 0b00 	sbcs.w	fp, r7, #0
    b1e4:	db92      	blt.n	b10c <arm_nn_mat_mult_nt_t_s8+0xa24>
    b1e6:	0ff4      	lsrs	r4, r6, #31
    b1e8:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    b1ec:	4290      	cmp	r0, r2
    b1ee:	d093      	beq.n	b118 <arm_nn_mat_mult_nt_t_s8+0xa30>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b1f0:	f1be 0f00 	cmp.w	lr, #0
    b1f4:	dd9b      	ble.n	b12e <arm_nn_mat_mult_nt_t_s8+0xa46>
    if (result < 0)
    b1f6:	2c00      	cmp	r4, #0
    b1f8:	daac      	bge.n	b154 <arm_nn_mat_mult_nt_t_s8+0xa6c>
    b1fa:	e7a5      	b.n	b148 <arm_nn_mat_mult_nt_t_s8+0xa60>
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_MATH_SUCCESS;
}
    b1fc:	2000      	movs	r0, #0
    b1fe:	b033      	add	sp, #204	; 0xcc
    b200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b204:	c0000001 	.word	0xc0000001

0000b208 <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
    b208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b20c:	b097      	sub	sp, #92	; 0x5c
    b20e:	900a      	str	r0, [sp, #40]	; 0x28
    b210:	9110      	str	r1, [sp, #64]	; 0x40
    b212:	9212      	str	r2, [sp, #72]	; 0x48
    b214:	9313      	str	r3, [sp, #76]	; 0x4c
    b216:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
    const int16_t lhs_offset_s16 = lhs_offset;
    const int16_t rhs_offset_s16 = rhs_offset;

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
    b21a:	f8bd 8080 	ldrh.w	r8, [sp, #128]	; 0x80
    b21e:	9820      	ldr	r0, [sp, #128]	; 0x80
    b220:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
    b224:	fa1f fc89 	uxth.w	ip, r9
    b228:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
    b22c:	9826      	ldr	r0, [sp, #152]	; 0x98
    b22e:	2802      	cmp	r0, #2
    b230:	f100 81c9 	bmi.w	b5c6 <arm_nn_vec_mat_mult_t_s8+0x3be>
    b234:	4614      	mov	r4, r2
    b236:	461a      	mov	r2, r3
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b238:	9824      	ldr	r0, [sp, #144]	; 0x90
    b23a:	4240      	negs	r0, r0
    b23c:	900e      	str	r0, [sp, #56]	; 0x38
    const q31_t remainder_mask = (1 << exponent) - 1;
    b23e:	2301      	movs	r3, #1
    b240:	4083      	lsls	r3, r0
    b242:	1e58      	subs	r0, r3, #1
    b244:	900f      	str	r0, [sp, #60]	; 0x3c
    q31_t threshold = remainder_mask >> 1;
    b246:	1040      	asrs	r0, r0, #1
    b248:	9011      	str	r0, [sp, #68]	; 0x44
        res01 = MIN(res01, activation_max);

        *dst++ = (q7_t)res00;
        *dst++ = (q7_t)res01;

        rhs += 2 * rhs_cols;
    b24a:	9825      	ldr	r0, [sp, #148]	; 0x94
    b24c:	0040      	lsls	r0, r0, #1
    b24e:	900b      	str	r0, [sp, #44]	; 0x2c
    b250:	4620      	mov	r0, r4
    b252:	3008      	adds	r0, #8
    b254:	9003      	str	r0, [sp, #12]
    b256:	4613      	mov	r3, r2
    b258:	3302      	adds	r3, #2
    b25a:	9309      	str	r3, [sp, #36]	; 0x24
    b25c:	9b26      	ldr	r3, [sp, #152]	; 0x98
    b25e:	3b02      	subs	r3, #2
    b260:	9314      	str	r3, [sp, #80]	; 0x50
    b262:	f023 0301 	bic.w	r3, r3, #1
    b266:	9315      	str	r3, [sp, #84]	; 0x54
    b268:	3304      	adds	r3, #4
    b26a:	18d3      	adds	r3, r2, r3
    b26c:	930c      	str	r3, [sp, #48]	; 0x30
    b26e:	9104      	str	r1, [sp, #16]
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
    b270:	9b25      	ldr	r3, [sp, #148]	; 0x94
    b272:	3b10      	subs	r3, #16
    b274:	9301      	str	r3, [sp, #4]
    b276:	9b25      	ldr	r3, [sp, #148]	; 0x94
    b278:	9302      	str	r3, [sp, #8]
    b27a:	f1c3 0310 	rsb	r3, r3, #16
    b27e:	930d      	str	r3, [sp, #52]	; 0x34
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b280:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b282:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b286:	9305      	str	r3, [sp, #20]
    if ((m1 < 0) ^ (m2 < 0))
    b288:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    b28a:	0fdb      	lsrs	r3, r3, #31
    b28c:	9308      	str	r3, [sp, #32]
    mult = mult + (q63_t)m1 * m2;
    b28e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    b290:	4619      	mov	r1, r3
    b292:	17da      	asrs	r2, r3, #31
    b294:	e9cd 1206 	strd	r1, r2, [sp, #24]
    b298:	e08a      	b.n	b3b0 <arm_nn_vec_mat_mult_t_s8+0x1a8>
    b29a:	f8dd b010 	ldr.w	fp, [sp, #16]
        const q7_t *lhs_ptr = &lhs[0];
    b29e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
        int32_t rhs_cols_idx = 0;
    b2a0:	f04f 0a00 	mov.w	sl, #0
    b2a4:	e124      	b.n	b4f0 <arm_nn_vec_mat_mult_t_s8+0x2e8>
    q63_t mult = 1 << 30;
    b2a6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    b2aa:	2500      	movs	r5, #0
    b2ac:	e144      	b.n	b538 <arm_nn_vec_mat_mult_t_s8+0x330>
    result = (int32_t) (mult / (1ll << 31));
    b2ae:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    b2b2:	2500      	movs	r5, #0
    b2b4:	1824      	adds	r4, r4, r0
    b2b6:	414d      	adcs	r5, r1
    b2b8:	e151      	b.n	b55e <arm_nn_vec_mat_mult_t_s8+0x356>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    b2ba:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
    b2be:	f040 8155 	bne.w	b56c <arm_nn_vec_mat_mult_t_s8+0x364>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b2c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
    b2c4:	2a00      	cmp	r2, #0
    b2c6:	dd05      	ble.n	b2d4 <arm_nn_vec_mat_mult_t_s8+0xcc>
    q31_t threshold = remainder_mask >> 1;
    b2c8:	2600      	movs	r6, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
    b2ca:	4637      	mov	r7, r6
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b2cc:	46b6      	mov	lr, r6
        result = Q31_MAX;
    b2ce:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    b2d2:	e018      	b.n	b306 <arm_nn_vec_mat_mult_t_s8+0xfe>
    b2d4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    int32_t remainder = remainder_mask & dividend;
    b2d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b2da:	4022      	ands	r2, r4
    if (result < 0)
    b2dc:	990e      	ldr	r1, [sp, #56]	; 0x38
    b2de:	410c      	asrs	r4, r1
    b2e0:	d405      	bmi.n	b2ee <arm_nn_vec_mat_mult_t_s8+0xe6>
    q31_t threshold = remainder_mask >> 1;
    b2e2:	9911      	ldr	r1, [sp, #68]	; 0x44
    b2e4:	460e      	mov	r6, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
    b2e6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b2e8:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
    b2ec:	e008      	b.n	b300 <arm_nn_vec_mat_mult_t_s8+0xf8>
    q31_t threshold = remainder_mask >> 1;
    b2ee:	9e11      	ldr	r6, [sp, #68]	; 0x44
    const q31_t remainder_mask = (1 << exponent) - 1;
    b2f0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b2f2:	468e      	mov	lr, r1
    b2f4:	e003      	b.n	b2fe <arm_nn_vec_mat_mult_t_s8+0xf6>
    q31_t threshold = remainder_mask >> 1;
    b2f6:	2600      	movs	r6, #0
    int32_t remainder = remainder_mask & dividend;
    b2f8:	4632      	mov	r2, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
    b2fa:	4637      	mov	r7, r6
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b2fc:	46b6      	mov	lr, r6
        threshold++;
    b2fe:	1c71      	adds	r1, r6, #1
    if (remainder > threshold)
    b300:	4291      	cmp	r1, r2
        result++;
    b302:	bfb8      	it	lt
    b304:	3401      	addlt	r4, #1
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b306:	9a05      	ldr	r2, [sp, #20]
    b308:	fa03 f502 	lsl.w	r5, r3, r2
    if ((m1 < 0) ^ (m2 < 0))
    b30c:	9b08      	ldr	r3, [sp, #32]
    b30e:	ebb3 7fd5 	cmp.w	r3, r5, lsr #31
    b312:	f000 8136 	beq.w	b582 <arm_nn_vec_mat_mult_t_s8+0x37a>
        mult = 1 - mult;
    b316:	f8df a454 	ldr.w	sl, [pc, #1108]	; b76c <arm_nn_vec_mat_mult_t_s8+0x564>
    b31a:	f04f 3bff 	mov.w	fp, #4294967295
    mult = mult + (q63_t)m1 * m2;
    b31e:	9b07      	ldr	r3, [sp, #28]
    b320:	fb05 f103 	mul.w	r1, r5, r3
    b324:	17eb      	asrs	r3, r5, #31
    b326:	9823      	ldr	r0, [sp, #140]	; 0x8c
    b328:	fb00 1103 	mla	r1, r0, r3, r1
    b32c:	fba5 2300 	umull	r2, r3, r5, r0
    b330:	440b      	add	r3, r1
    b332:	eb12 020a 	adds.w	r2, r2, sl
    b336:	eb43 030b 	adc.w	r3, r3, fp
    result = (int32_t) (mult / (1ll << 31));
    b33a:	4610      	mov	r0, r2
    b33c:	4619      	mov	r1, r3
    b33e:	2a00      	cmp	r2, #0
    b340:	f173 0a00 	sbcs.w	sl, r3, #0
    b344:	f2c0 8122 	blt.w	b58c <arm_nn_vec_mat_mult_t_s8+0x384>
    b348:	0fc3      	lsrs	r3, r0, #31
    b34a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    b34e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    b350:	42aa      	cmp	r2, r5
    b352:	f000 8121 	beq.w	b598 <arm_nn_vec_mat_mult_t_s8+0x390>
    int32_t remainder = remainder_mask & dividend;
    b356:	401f      	ands	r7, r3
    if (result < 0)
    b358:	fa53 f30e 	asrs.w	r3, r3, lr
        threshold++;
    b35c:	bf48      	it	mi
    b35e:	3601      	addmi	r6, #1
    if (remainder > threshold)
    b360:	42b7      	cmp	r7, r6
        result++;
    b362:	bfc8      	it	gt
    b364:	3301      	addgt	r3, #1
        res00 += dst_offset;
    b366:	9a22      	ldr	r2, [sp, #136]	; 0x88
    b368:	4414      	add	r4, r2
        res01 += dst_offset;
    b36a:	4413      	add	r3, r2
        res00 = MAX(res00, activation_min);
    b36c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    b36e:	4294      	cmp	r4, r2
    b370:	bfb8      	it	lt
    b372:	4614      	movlt	r4, r2
        res01 = MAX(res01, activation_min);
    b374:	4293      	cmp	r3, r2
    b376:	bfb8      	it	lt
    b378:	4613      	movlt	r3, r2
        res00 = MIN(res00, activation_max);
    b37a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    b37c:	4294      	cmp	r4, r2
    b37e:	bfa8      	it	ge
    b380:	4614      	movge	r4, r2
        *dst++ = (q7_t)res00;
    b382:	9909      	ldr	r1, [sp, #36]	; 0x24
    b384:	f801 4c02 	strb.w	r4, [r1, #-2]
        res01 = MIN(res01, activation_max);
    b388:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    b38a:	4293      	cmp	r3, r2
    b38c:	bfa8      	it	ge
    b38e:	4613      	movge	r3, r2
        *dst++ = (q7_t)res01;
    b390:	460a      	mov	r2, r1
    b392:	f801 3c01 	strb.w	r3, [r1, #-1]
        rhs += 2 * rhs_cols;
    b396:	9b04      	ldr	r3, [sp, #16]
    b398:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b39a:	440b      	add	r3, r1
    b39c:	9304      	str	r3, [sp, #16]
    b39e:	9b03      	ldr	r3, [sp, #12]
    b3a0:	3308      	adds	r3, #8
    b3a2:	9303      	str	r3, [sp, #12]
    b3a4:	1c93      	adds	r3, r2, #2
    b3a6:	9309      	str	r3, [sp, #36]	; 0x24
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
    b3a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b3aa:	4293      	cmp	r3, r2
    b3ac:	f000 80fa 	beq.w	b5a4 <arm_nn_vec_mat_mult_t_s8+0x39c>
        q31_t res00 = *bias++;
    b3b0:	9a03      	ldr	r2, [sp, #12]
    b3b2:	f852 5c08 	ldr.w	r5, [r2, #-8]
        q31_t res01 = *bias++;
    b3b6:	f852 3c04 	ldr.w	r3, [r2, #-4]
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
    b3ba:	9a01      	ldr	r2, [sp, #4]
    b3bc:	2a00      	cmp	r2, #0
    b3be:	f6ff af6c 	blt.w	b29a <arm_nn_vec_mat_mult_t_s8+0x92>
    b3c2:	9a04      	ldr	r2, [sp, #16]
    b3c4:	9925      	ldr	r1, [sp, #148]	; 0x94
    b3c6:	eb02 0e01 	add.w	lr, r2, r1
    b3ca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    b3cc:	f04f 0a00 	mov.w	sl, #0
    b3d0:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
    b3d4:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    b3d8:	9a02      	ldr	r2, [sp, #8]
    b3da:	ebae 0b02 	sub.w	fp, lr, r2
  memcpy(&val, *in_q7, 4);
    b3de:	f8db 2000 	ldr.w	r2, [fp]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b3e2:	fa2c f082 	sxtab16	r0, ip, r2
    b3e6:	683c      	ldr	r4, [r7, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
    b3e8:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b3ec:	fa2c f282 	sxtab16	r2, ip, r2
    b3f0:	fa28 f684 	sxtab16	r6, r8, r4
  memcpy(&val, in_q7, 4);
    b3f4:	f8de 1000 	ldr.w	r1, [lr]
  return (op1 >> op2) | (op1 << (32U - op2));
    b3f8:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b3fc:	fa28 f484 	sxtab16	r4, r8, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    b400:	fb26 5000 	smlad	r0, r6, r0, r5
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b404:	fa2c f581 	sxtab16	r5, ip, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    b408:	fb24 0202 	smlad	r2, r4, r2, r0
  return (op1 >> op2) | (op1 << (32U - op2));
    b40c:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b410:	fa2c f181 	sxtab16	r1, ip, r1
  memcpy(&val, *in_q7, 4);
    b414:	f8db 0004 	ldr.w	r0, [fp, #4]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    b418:	fb26 3505 	smlad	r5, r6, r5, r3
    b41c:	fb24 5501 	smlad	r5, r4, r1, r5
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b420:	fa2c f480 	sxtab16	r4, ip, r0
    b424:	687b      	ldr	r3, [r7, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
    b426:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b42a:	fa2c f080 	sxtab16	r0, ip, r0
    b42e:	fa28 f183 	sxtab16	r1, r8, r3
  memcpy(&val, in_q7, 4);
    b432:	f8de 6004 	ldr.w	r6, [lr, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
    b436:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b43a:	fa28 f383 	sxtab16	r3, r8, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    b43e:	fb21 2204 	smlad	r2, r1, r4, r2
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b442:	fa2c f486 	sxtab16	r4, ip, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    b446:	fb23 2200 	smlad	r2, r3, r0, r2
  return (op1 >> op2) | (op1 << (32U - op2));
    b44a:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b44e:	fa2c f686 	sxtab16	r6, ip, r6
  memcpy(&val, *in_q7, 4);
    b452:	f8db 0008 	ldr.w	r0, [fp, #8]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    b456:	fb21 5404 	smlad	r4, r1, r4, r5
    b45a:	fb23 4406 	smlad	r4, r3, r6, r4
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b45e:	fa2c f680 	sxtab16	r6, ip, r0
    b462:	68bb      	ldr	r3, [r7, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
    b464:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b468:	fa2c f080 	sxtab16	r0, ip, r0
    b46c:	fa28 f583 	sxtab16	r5, r8, r3
  memcpy(&val, in_q7, 4);
    b470:	f8de 1008 	ldr.w	r1, [lr, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
    b474:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b478:	fa28 f383 	sxtab16	r3, r8, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    b47c:	fb25 2206 	smlad	r2, r5, r6, r2
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b480:	fa2c f681 	sxtab16	r6, ip, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    b484:	fb23 2000 	smlad	r0, r3, r0, r2
  return (op1 >> op2) | (op1 << (32U - op2));
    b488:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b48c:	fa2c f181 	sxtab16	r1, ip, r1
  memcpy(&val, *in_q7, 4);
    b490:	f8db 200c 	ldr.w	r2, [fp, #12]
    b494:	eb09 0b0e 	add.w	fp, r9, lr
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    b498:	fb25 4406 	smlad	r4, r5, r6, r4
    b49c:	fb23 4101 	smlad	r1, r3, r1, r4
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b4a0:	fa2c f582 	sxtab16	r5, ip, r2
    b4a4:	68fb      	ldr	r3, [r7, #12]
    b4a6:	3710      	adds	r7, #16
  return (op1 >> op2) | (op1 << (32U - op2));
    b4a8:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b4ac:	fa2c f282 	sxtab16	r2, ip, r2
    b4b0:	fa28 f683 	sxtab16	r6, r8, r3
  memcpy(&val, in_q7, 4);
    b4b4:	f8de 400c 	ldr.w	r4, [lr, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
    b4b8:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b4bc:	fa28 f383 	sxtab16	r3, r8, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    b4c0:	fb26 0505 	smlad	r5, r6, r5, r0
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b4c4:	fa2c f084 	sxtab16	r0, ip, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    b4c8:	fb23 5502 	smlad	r5, r3, r2, r5
  return (op1 >> op2) | (op1 << (32U - op2));
    b4cc:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b4d0:	fa2c f484 	sxtab16	r4, ip, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    b4d4:	fb26 1100 	smlad	r1, r6, r0, r1
    b4d8:	fb23 1304 	smlad	r3, r3, r4, r1
    b4dc:	f10a 0a10 	add.w	sl, sl, #16
    b4e0:	f10e 0e10 	add.w	lr, lr, #16
    b4e4:	9a01      	ldr	r2, [sp, #4]
    b4e6:	4592      	cmp	sl, r2
    b4e8:	f77f af76 	ble.w	b3d8 <arm_nn_vec_mat_mult_t_s8+0x1d0>
    b4ec:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
    b4f0:	9a25      	ldr	r2, [sp, #148]	; 0x94
    b4f2:	4552      	cmp	r2, sl
    b4f4:	dd15      	ble.n	b522 <arm_nn_vec_mat_mult_t_s8+0x31a>
    b4f6:	f10b 30ff 	add.w	r0, fp, #4294967295
    b4fa:	4493      	add	fp, r2
    b4fc:	eba2 0a0a 	sub.w	sl, r2, sl
    b500:	44ba      	add	sl, r7
    b502:	9e20      	ldr	r6, [sp, #128]	; 0x80
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
    b504:	f91b 1b01 	ldrsb.w	r1, [fp], #1
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
    b508:	f917 2b01 	ldrsb.w	r2, [r7], #1
    b50c:	4432      	add	r2, r6
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
    b50e:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
    b512:	444c      	add	r4, r9
            res00 += lhs_value * rhs_value0;
    b514:	fb02 5504 	mla	r5, r2, r4, r5
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
    b518:	4449      	add	r1, r9
            res01 += lhs_value * rhs_value1;
    b51a:	fb02 3301 	mla	r3, r2, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
    b51e:	4557      	cmp	r7, sl
    b520:	d1f0      	bne.n	b504 <arm_nn_vec_mat_mult_t_s8+0x2fc>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b522:	9a05      	ldr	r2, [sp, #20]
    b524:	fa05 f602 	lsl.w	r6, r5, r2
    if ((m1 < 0) ^ (m2 < 0))
    b528:	9a08      	ldr	r2, [sp, #32]
    b52a:	ebb2 7fd6 	cmp.w	r2, r6, lsr #31
    b52e:	f43f aeba 	beq.w	b2a6 <arm_nn_vec_mat_mult_t_s8+0x9e>
        mult = 1 - mult;
    b532:	4c8e      	ldr	r4, [pc, #568]	; (b76c <arm_nn_vec_mat_mult_t_s8+0x564>)
    b534:	f04f 35ff 	mov.w	r5, #4294967295
    mult = mult + (q63_t)m1 * m2;
    b538:	9a07      	ldr	r2, [sp, #28]
    b53a:	fb06 f202 	mul.w	r2, r6, r2
    b53e:	17f1      	asrs	r1, r6, #31
    b540:	9f23      	ldr	r7, [sp, #140]	; 0x8c
    b542:	fb07 2201 	mla	r2, r7, r1, r2
    b546:	fba6 0107 	umull	r0, r1, r6, r7
    b54a:	4411      	add	r1, r2
    b54c:	1900      	adds	r0, r0, r4
    b54e:	4169      	adcs	r1, r5
    result = (int32_t) (mult / (1ll << 31));
    b550:	4604      	mov	r4, r0
    b552:	460d      	mov	r5, r1
    b554:	2800      	cmp	r0, #0
    b556:	f171 0200 	sbcs.w	r2, r1, #0
    b55a:	f6ff aea8 	blt.w	b2ae <arm_nn_vec_mat_mult_t_s8+0xa6>
    b55e:	0fe4      	lsrs	r4, r4, #31
    b560:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    b564:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    b566:	42b2      	cmp	r2, r6
    b568:	f43f aea7 	beq.w	b2ba <arm_nn_vec_mat_mult_t_s8+0xb2>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b56c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    b56e:	2a00      	cmp	r2, #0
    b570:	f77f aeb2 	ble.w	b2d8 <arm_nn_vec_mat_mult_t_s8+0xd0>
    if (result < 0)
    b574:	2c00      	cmp	r4, #0
    b576:	f6ff aebe 	blt.w	b2f6 <arm_nn_vec_mat_mult_t_s8+0xee>
    q31_t threshold = remainder_mask >> 1;
    b57a:	2600      	movs	r6, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
    b57c:	4637      	mov	r7, r6
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b57e:	46b6      	mov	lr, r6
    b580:	e6c1      	b.n	b306 <arm_nn_vec_mat_mult_t_s8+0xfe>
    q63_t mult = 1 << 30;
    b582:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    b586:	f04f 0b00 	mov.w	fp, #0
    b58a:	e6c8      	b.n	b31e <arm_nn_vec_mat_mult_t_s8+0x116>
    result = (int32_t) (mult / (1ll << 31));
    b58c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    b590:	2100      	movs	r1, #0
    b592:	1880      	adds	r0, r0, r2
    b594:	4159      	adcs	r1, r3
    b596:	e6d7      	b.n	b348 <arm_nn_vec_mat_mult_t_s8+0x140>
        result = Q31_MAX;
    b598:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
    b59c:	bf08      	it	eq
    b59e:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
    b5a2:	e6d8      	b.n	b356 <arm_nn_vec_mat_mult_t_s8+0x14e>
    b5a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b5a6:	085b      	lsrs	r3, r3, #1
    b5a8:	3301      	adds	r3, #1
    b5aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b5ac:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    b5b0:	9212      	str	r2, [sp, #72]	; 0x48
    b5b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    b5b4:	3202      	adds	r2, #2
    b5b6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    b5b8:	4411      	add	r1, r2
    b5ba:	9113      	str	r1, [sp, #76]	; 0x4c
    b5bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b5be:	9910      	ldr	r1, [sp, #64]	; 0x40
    b5c0:	fb03 1302 	mla	r3, r3, r2, r1
    b5c4:	9310      	str	r3, [sp, #64]	; 0x40
    }

    if (rhs_rows % 2)
    b5c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
    b5c8:	f013 0f01 	tst.w	r3, #1
    b5cc:	f000 80ac 	beq.w	b728 <arm_nn_vec_mat_mult_t_s8+0x520>
    {
        const q7_t *lhs_ptr = &lhs[0];
        const q7_t *rhs_ptr = &rhs[0];

        q31_t res00 = *bias++;
    b5d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b5d2:	681b      	ldr	r3, [r3, #0]

        int32_t rhs_cols_idx = 0;

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
    b5d4:	9a25      	ldr	r2, [sp, #148]	; 0x94
    b5d6:	f1b2 0a10 	subs.w	sl, r2, #16
    b5da:	f100 80a9 	bmi.w	b730 <arm_nn_vec_mat_mult_t_s8+0x528>
    b5de:	2500      	movs	r5, #0
    b5e0:	990a      	ldr	r1, [sp, #40]	; 0x28
    b5e2:	9810      	ldr	r0, [sp, #64]	; 0x40
  memcpy(&val, *in_q7, 4);
    b5e4:	6804      	ldr	r4, [r0, #0]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b5e6:	fa2c f684 	sxtab16	r6, ip, r4
    b5ea:	680a      	ldr	r2, [r1, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
    b5ec:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b5f0:	fa2c f484 	sxtab16	r4, ip, r4
    b5f4:	fa28 f782 	sxtab16	r7, r8, r2
  return (op1 >> op2) | (op1 << (32U - op2));
    b5f8:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b5fc:	fa28 f282 	sxtab16	r2, r8, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    b600:	fb27 3306 	smlad	r3, r7, r6, r3
    b604:	fb22 3204 	smlad	r2, r2, r4, r3
    b608:	6844      	ldr	r4, [r0, #4]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b60a:	fa2c f684 	sxtab16	r6, ip, r4
    b60e:	684b      	ldr	r3, [r1, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
    b610:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b614:	fa2c f484 	sxtab16	r4, ip, r4
    b618:	fa28 f783 	sxtab16	r7, r8, r3
  return (op1 >> op2) | (op1 << (32U - op2));
    b61c:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b620:	fa28 f383 	sxtab16	r3, r8, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    b624:	fb27 2206 	smlad	r2, r7, r6, r2
    b628:	fb23 2404 	smlad	r4, r3, r4, r2
    b62c:	6882      	ldr	r2, [r0, #8]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b62e:	fa2c f682 	sxtab16	r6, ip, r2
    b632:	688b      	ldr	r3, [r1, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
    b634:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b638:	fa2c f282 	sxtab16	r2, ip, r2
    b63c:	fa28 f783 	sxtab16	r7, r8, r3
  return (op1 >> op2) | (op1 << (32U - op2));
    b640:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b644:	fa28 f383 	sxtab16	r3, r8, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    b648:	fb27 4406 	smlad	r4, r7, r6, r4
    b64c:	fb23 4202 	smlad	r2, r3, r2, r4
    b650:	68c4      	ldr	r4, [r0, #12]
    b652:	3010      	adds	r0, #16
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b654:	fa2c f684 	sxtab16	r6, ip, r4
    b658:	68cb      	ldr	r3, [r1, #12]
    b65a:	3110      	adds	r1, #16
  return (op1 >> op2) | (op1 << (32U - op2));
    b65c:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b660:	fa2c f484 	sxtab16	r4, ip, r4
    b664:	fa28 f783 	sxtab16	r7, r8, r3
  return (op1 >> op2) | (op1 << (32U - op2));
    b668:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b66c:	fa28 f383 	sxtab16	r3, r8, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
    b670:	fb27 2206 	smlad	r2, r7, r6, r2
    b674:	fb23 2304 	smlad	r3, r3, r4, r2
    b678:	3510      	adds	r5, #16
    b67a:	4555      	cmp	r5, sl
    b67c:	ddb2      	ble.n	b5e4 <arm_nn_vec_mat_mult_t_s8+0x3dc>
    b67e:	910a      	str	r1, [sp, #40]	; 0x28
    b680:	9010      	str	r0, [sp, #64]	; 0x40
            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
            res00 = __SMLAD(val2, val0, res00);
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
    b682:	9a25      	ldr	r2, [sp, #148]	; 0x94
    b684:	42aa      	cmp	r2, r5
    b686:	dd10      	ble.n	b6aa <arm_nn_vec_mat_mult_t_s8+0x4a2>
    b688:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b68a:	1e51      	subs	r1, r2, #1
    b68c:	9a25      	ldr	r2, [sp, #148]	; 0x94
    b68e:	1b52      	subs	r2, r2, r5
    b690:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    b692:	442a      	add	r2, r5
    b694:	9e20      	ldr	r6, [sp, #128]	; 0x80
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
    b696:	f911 0f01 	ldrsb.w	r0, [r1, #1]!
    b69a:	4448      	add	r0, r9
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
    b69c:	f915 4b01 	ldrsb.w	r4, [r5], #1
    b6a0:	4434      	add	r4, r6

            res00 += lhs_value * rhs_value0;
    b6a2:	fb04 3300 	mla	r3, r4, r0, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
    b6a6:	4295      	cmp	r5, r2
    b6a8:	d1f5      	bne.n	b696 <arm_nn_vec_mat_mult_t_s8+0x48e>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b6aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
    b6ac:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    b6b0:	4093      	lsls	r3, r2
    if ((m1 < 0) ^ (m2 < 0))
    b6b2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    b6b4:	0fd2      	lsrs	r2, r2, #31
    b6b6:	ebb2 7fd3 	cmp.w	r2, r3, lsr #31
        mult = 1 - mult;
    b6ba:	bf19      	ittee	ne
    b6bc:	4c2b      	ldrne	r4, [pc, #172]	; (b76c <arm_nn_vec_mat_mult_t_s8+0x564>)
    b6be:	f04f 35ff 	movne.w	r5, #4294967295
    q63_t mult = 1 << 30;
    b6c2:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
    b6c6:	2500      	moveq	r5, #0
    mult = mult + (q63_t)m1 * m2;
    b6c8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    b6ca:	17d1      	asrs	r1, r2, #31
    b6cc:	fb03 f201 	mul.w	r2, r3, r1
    b6d0:	17d9      	asrs	r1, r3, #31
    b6d2:	9e23      	ldr	r6, [sp, #140]	; 0x8c
    b6d4:	fb06 2201 	mla	r2, r6, r1, r2
    b6d8:	fba3 0106 	umull	r0, r1, r3, r6
    b6dc:	4411      	add	r1, r2
    b6de:	1900      	adds	r0, r0, r4
    b6e0:	4169      	adcs	r1, r5
    result = (int32_t) (mult / (1ll << 31));
    b6e2:	4604      	mov	r4, r0
    b6e4:	460d      	mov	r5, r1
    b6e6:	2800      	cmp	r0, #0
    b6e8:	f171 0200 	sbcs.w	r2, r1, #0
    b6ec:	db22      	blt.n	b734 <arm_nn_vec_mat_mult_t_s8+0x52c>
    b6ee:	0fe2      	lsrs	r2, r4, #31
    b6f0:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    b6f4:	9923      	ldr	r1, [sp, #140]	; 0x8c
    b6f6:	4299      	cmp	r1, r3
    b6f8:	d022      	beq.n	b740 <arm_nn_vec_mat_mult_t_s8+0x538>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b6fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b6fc:	2b00      	cmp	r3, #0
    b6fe:	dd2a      	ble.n	b756 <arm_nn_vec_mat_mult_t_s8+0x54e>
    if (result < 0)
    b700:	2a00      	cmp	r2, #0
    b702:	da05      	bge.n	b710 <arm_nn_vec_mat_mult_t_s8+0x508>
    q31_t threshold = remainder_mask >> 1;
    b704:	2300      	movs	r3, #0
    int32_t remainder = remainder_mask & dividend;
    b706:	4619      	mov	r1, r3
        threshold++;
    b708:	3301      	adds	r3, #1
    if (remainder > threshold)
    b70a:	428b      	cmp	r3, r1
        result++;
    b70c:	bfb8      	it	lt
    b70e:	3201      	addlt	r2, #1

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);

        // Add offset
        res00 += dst_offset;
    b710:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b712:	4413      	add	r3, r2

        // Clamp the result
        res00 = MAX(res00, activation_min);
    b714:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    b716:	4293      	cmp	r3, r2
    b718:	bfb8      	it	lt
    b71a:	4613      	movlt	r3, r2
        res00 = MIN(res00, activation_max);
    b71c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    b71e:	4293      	cmp	r3, r2
    b720:	bfa8      	it	ge
    b722:	4613      	movge	r3, r2

        *dst = (q7_t)res00;
    b724:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b726:	7013      	strb	r3, [r2, #0]
        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
}
    b728:	2000      	movs	r0, #0
    b72a:	b017      	add	sp, #92	; 0x5c
    b72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int32_t rhs_cols_idx = 0;
    b730:	2500      	movs	r5, #0
    b732:	e7a6      	b.n	b682 <arm_nn_vec_mat_mult_t_s8+0x47a>
    result = (int32_t) (mult / (1ll << 31));
    b734:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    b738:	2500      	movs	r5, #0
    b73a:	1824      	adds	r4, r4, r0
    b73c:	414d      	adcs	r5, r1
    b73e:	e7d6      	b.n	b6ee <arm_nn_vec_mat_mult_t_s8+0x4e6>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    b740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    b744:	d1d9      	bne.n	b6fa <arm_nn_vec_mat_mult_t_s8+0x4f2>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b746:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b748:	2b00      	cmp	r3, #0
    b74a:	dd02      	ble.n	b752 <arm_nn_vec_mat_mult_t_s8+0x54a>
        result = Q31_MAX;
    b74c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    b750:	e7de      	b.n	b710 <arm_nn_vec_mat_mult_t_s8+0x508>
    b752:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
    b756:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b758:	4258      	negs	r0, r3
    const q31_t remainder_mask = (1 << exponent) - 1;
    b75a:	2301      	movs	r3, #1
    b75c:	4083      	lsls	r3, r0
    b75e:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
    b760:	ea02 0103 	and.w	r1, r2, r3
    q31_t threshold = remainder_mask >> 1;
    b764:	105b      	asrs	r3, r3, #1
    if (result < 0)
    b766:	4102      	asrs	r2, r0
    b768:	d5cf      	bpl.n	b70a <arm_nn_vec_mat_mult_t_s8+0x502>
    b76a:	e7cd      	b.n	b708 <arm_nn_vec_mat_mult_t_s8+0x500>
    b76c:	c0000001 	.word	0xc0000001

0000b770 <arm_q7_to_q15_no_shift>:

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    while (blkCnt > 0u)
    b770:	ea5f 0c92 	movs.w	ip, r2, lsr #2
    b774:	d027      	beq.n	b7c6 <arm_q7_to_q15_no_shift+0x56>
{
    b776:	b5f0      	push	{r4, r5, r6, r7, lr}
    while (blkCnt > 0u)
    b778:	4686      	mov	lr, r0
    b77a:	460d      	mov	r5, r1
    b77c:	4667      	mov	r7, ip
  memcpy(&val, *in_q7, 4);
    b77e:	f85e 4b04 	ldr.w	r4, [lr], #4
  return (op1 >> op2) | (op1 << (32U - op2));
    b782:	ea4f 2334 	mov.w	r3, r4, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
    b786:	fa2f f383 	sxtb16	r3, r3
    b78a:	fa2f f484 	sxtb16	r4, r4
        /* extend remaining two q7_t values to q15_t values */
        in2 = __SXTB16(in);

#ifndef ARM_MATH_BIG_ENDIAN
        out2 = (int32_t)__PKHTB(in1, in2, 16);
        out1 = (int32_t)__PKHBT(in2, in1, 16);
    b78e:	b2a6      	uxth	r6, r4
    b790:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
    b794:	602e      	str	r6, [r5, #0]
        out2 = (int32_t)__PKHTB(in1, in2, 16);
    b796:	0c1b      	lsrs	r3, r3, #16
    b798:	041b      	lsls	r3, r3, #16
    b79a:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    b79e:	606b      	str	r3, [r5, #4]
    b7a0:	3508      	adds	r5, #8
    while (blkCnt > 0u)
    b7a2:	3f01      	subs	r7, #1
    b7a4:	d1eb      	bne.n	b77e <arm_q7_to_q15_no_shift+0xe>
    b7a6:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
    b7aa:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
    b7ae:	f012 0203 	ands.w	r2, r2, #3
    b7b2:	d007      	beq.n	b7c4 <arm_q7_to_q15_no_shift+0x54>
    b7b4:	3902      	subs	r1, #2
    b7b6:	4402      	add	r2, r0
    {
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t)*pIn++;
    b7b8:	f910 3b01 	ldrsb.w	r3, [r0], #1
    b7bc:	f821 3f02 	strh.w	r3, [r1, #2]!
    while (blkCnt > 0u)
    b7c0:	4290      	cmp	r0, r2
    b7c2:	d1f9      	bne.n	b7b8 <arm_q7_to_q15_no_shift+0x48>
    b7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b7c6:	f012 0203 	ands.w	r2, r2, #3
    b7ca:	d008      	beq.n	b7de <arm_q7_to_q15_no_shift+0x6e>
    b7cc:	3902      	subs	r1, #2
    b7ce:	4402      	add	r2, r0
        *pDst++ = (q15_t)*pIn++;
    b7d0:	f910 3b01 	ldrsb.w	r3, [r0], #1
    b7d4:	f821 3f02 	strh.w	r3, [r1, #2]!
    while (blkCnt > 0u)
    b7d8:	4290      	cmp	r0, r2
    b7da:	d1f9      	bne.n	b7d0 <arm_q7_to_q15_no_shift+0x60>
    b7dc:	4770      	bx	lr
    b7de:	4770      	bx	lr

0000b7e0 <arm_q7_to_q15_with_offset>:

void arm_q7_to_q15_with_offset(const q7_t *src,
                               q15_t *dst,
                               uint32_t block_size,
                               q15_t offset)
{
    b7e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    q31_t in_q15x2_2;
    q31_t out_q15x2_1;
    q31_t out_q15x2_2;

    /*loop unrolling */
    block_cnt = block_size >> 2;
    b7e4:	ea4f 0892 	mov.w	r8, r2, lsr #2

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
    b7e8:	fa1f fe83 	uxth.w	lr, r3
    b7ec:	ea4e 4e03 	orr.w	lr, lr, r3, lsl #16
    while (block_cnt > 0)
    b7f0:	f1b8 0f00 	cmp.w	r8, #0
    b7f4:	d01c      	beq.n	b830 <arm_q7_to_q15_with_offset+0x50>
    b7f6:	4647      	mov	r7, r8
    b7f8:	460e      	mov	r6, r1
    b7fa:	4684      	mov	ip, r0
    b7fc:	f85c 5b04 	ldr.w	r5, [ip], #4
  return (op1 >> op2) | (op1 << (32U - op2));
    b800:	ea4f 2435 	mov.w	r4, r5, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    b804:	fa2e f484 	sxtab16	r4, lr, r4
    b808:	fa2e f585 	sxtab16	r5, lr, r5
        /* Extract and sign extend each of the four q7 values to q15 */
        in_q15x2_1 = __SXTAB16(offset_q15x2, __ROR(in_q7x4, 8));
        in_q15x2_2 = __SXTAB16(offset_q15x2, in_q7x4);

        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
    b80c:	fa1f f985 	uxth.w	r9, r5
    b810:	ea49 4904 	orr.w	r9, r9, r4, lsl #16
    b814:	f8c6 9000 	str.w	r9, [r6]
        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
    b818:	0c24      	lsrs	r4, r4, #16
    b81a:	0424      	lsls	r4, r4, #16
    b81c:	ea44 4415 	orr.w	r4, r4, r5, lsr #16
    b820:	6074      	str	r4, [r6, #4]
    b822:	3608      	adds	r6, #8
    while (block_cnt > 0)
    b824:	3f01      	subs	r7, #1
    b826:	d1e9      	bne.n	b7fc <arm_q7_to_q15_with_offset+0x1c>
    b828:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
    b82c:	eb00 0088 	add.w	r0, r0, r8, lsl #2
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
    b830:	f012 0203 	ands.w	r2, r2, #3
    b834:	d008      	beq.n	b848 <arm_q7_to_q15_with_offset+0x68>
    b836:	3902      	subs	r1, #2
    b838:	4402      	add	r2, r0
    {
        *dst++ = (q15_t)*src++ + offset;
    b83a:	f910 4b01 	ldrsb.w	r4, [r0], #1
    b83e:	441c      	add	r4, r3
    b840:	f821 4f02 	strh.w	r4, [r1, #2]!
    while (block_cnt > 0)
    b844:	4282      	cmp	r2, r0
    b846:	d1f8      	bne.n	b83a <arm_q7_to_q15_with_offset+0x5a>
    b848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000b84c <arm_avgpool_s8>:
                          const cmsis_nn_dims *input_dims,
                          const q7_t *src,
                          const cmsis_nn_dims *filter_dims,
                          const cmsis_nn_dims *output_dims,
                          q7_t *dst)
{
    b84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b850:	b0a1      	sub	sp, #132	; 0x84
    b852:	469e      	mov	lr, r3
    b854:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    b856:	9d2b      	ldr	r5, [sp, #172]	; 0xac
  const int32_t dim_src_height = input_dims->h;
    b858:	6853      	ldr	r3, [r2, #4]
    b85a:	931a      	str	r3, [sp, #104]	; 0x68
  const int32_t dim_src_width = input_dims->w;
    b85c:	6893      	ldr	r3, [r2, #8]
  const int32_t dim_dst_height = output_dims->h;
    b85e:	686f      	ldr	r7, [r5, #4]
    b860:	971b      	str	r7, [sp, #108]	; 0x6c
  const int32_t dim_dst_width = output_dims->w;
    b862:	68ad      	ldr	r5, [r5, #8]
    b864:	950b      	str	r5, [sp, #44]	; 0x2c
  const int32_t stride_height = pool_params->stride.h;
    b866:	684d      	ldr	r5, [r1, #4]
  const int32_t stride_width = pool_params->stride.w;
    b868:	680e      	ldr	r6, [r1, #0]
    b86a:	960c      	str	r6, [sp, #48]	; 0x30
  const int32_t dim_kernel_height = filter_dims->h;
    b86c:	6866      	ldr	r6, [r4, #4]
    b86e:	961c      	str	r6, [sp, #112]	; 0x70
  const int32_t dim_kernel_width = filter_dims->w;
    b870:	68a4      	ldr	r4, [r4, #8]
    b872:	940e      	str	r4, [sp, #56]	; 0x38
  const int32_t padding_height = pool_params->padding.h;
    b874:	68cc      	ldr	r4, [r1, #12]
  const int32_t padding_width = pool_params->padding.w;
    b876:	688e      	ldr	r6, [r1, #8]
    b878:	961d      	str	r6, [sp, #116]	; 0x74
  const int32_t act_min = pool_params->activation.min;
    b87a:	690e      	ldr	r6, [r1, #16]
    b87c:	960f      	str	r6, [sp, #60]	; 0x3c
  const int32_t act_max = pool_params->activation.max;
    b87e:	6949      	ldr	r1, [r1, #20]
    b880:	9110      	str	r1, [sp, #64]	; 0x40
  const int32_t ch_src = input_dims->c;
    b882:	68d2      	ldr	r2, [r2, #12]
  q15_t *bufferA = (q15_t *)ctx->buf;
    b884:	6801      	ldr	r1, [r0, #0]
    b886:	9101      	str	r1, [sp, #4]

  /* Run the following code for Cortex-M4 and Cortex-M7
   */
  int32_t k_x, k_y, i_x, i_y;

  for (i_y = 0; i_y < dim_dst_height; i_y++)
    b888:	2f00      	cmp	r7, #0
    b88a:	f340 80bc 	ble.w	ba06 <arm_avgpool_s8+0x1ba>
    b88e:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
    b892:	951f      	str	r5, [sp, #124]	; 0x7c
    b894:	9417      	str	r4, [sp, #92]	; 0x5c
    b896:	4260      	negs	r0, r4
    b898:	9018      	str	r0, [sp, #96]	; 0x60
    b89a:	930d      	str	r3, [sp, #52]	; 0x34
    b89c:	4691      	mov	r9, r2
    b89e:	fb02 f303 	mul.w	r3, r2, r3
    b8a2:	9306      	str	r3, [sp, #24]
    b8a4:	b293      	uxth	r3, r2
    b8a6:	9312      	str	r3, [sp, #72]	; 0x48
    b8a8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    b8ac:	9313      	str	r3, [sp, #76]	; 0x4c
    b8ae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b8b0:	1e6b      	subs	r3, r5, #1
    b8b2:	fb02 2303 	mla	r3, r2, r3, r2
    b8b6:	931e      	str	r3, [sp, #120]	; 0x78
    b8b8:	2300      	movs	r3, #0
    b8ba:	9319      	str	r3, [sp, #100]	; 0x64
          {
            arm_q7_to_q15_no_shift(start, bufferA, ch_src);
          }
          else
          {
            arm_nn_accumulate_q7_to_q15(bufferA, start, ch_src);
    b8bc:	f8df b154 	ldr.w	fp, [pc, #340]	; ba14 <arm_avgpool_s8+0x1c8>
    b8c0:	e07f      	b.n	b9c2 <arm_avgpool_s8+0x176>
        for (k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
    b8c2:	9d02      	ldr	r5, [sp, #8]
    b8c4:	4634      	mov	r4, r6
    b8c6:	9603      	str	r6, [sp, #12]
          if (count == 0)
    b8c8:	b1dc      	cbz	r4, b902 <arm_avgpool_s8+0xb6>
            arm_nn_accumulate_q7_to_q15(bufferA, start, ch_src);
    b8ca:	464a      	mov	r2, r9
    b8cc:	4629      	mov	r1, r5
    b8ce:	9801      	ldr	r0, [sp, #4]
    b8d0:	47d8      	blx	fp
          }
          count++;
    b8d2:	3401      	adds	r4, #1
    b8d4:	444d      	add	r5, r9
        for (k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
    b8d6:	eba8 0306 	sub.w	r3, r8, r6
    b8da:	4423      	add	r3, r4
    b8dc:	429f      	cmp	r7, r3
    b8de:	dcf3      	bgt.n	b8c8 <arm_avgpool_s8+0x7c>
    b8e0:	eba7 0608 	sub.w	r6, r7, r8
    b8e4:	9b03      	ldr	r3, [sp, #12]
    b8e6:	441e      	add	r6, r3
      for (k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
    b8e8:	f10a 0a01 	add.w	sl, sl, #1
    b8ec:	9b02      	ldr	r3, [sp, #8]
    b8ee:	9a06      	ldr	r2, [sp, #24]
    b8f0:	4413      	add	r3, r2
    b8f2:	9302      	str	r3, [sp, #8]
    b8f4:	9b04      	ldr	r3, [sp, #16]
    b8f6:	4553      	cmp	r3, sl
    b8f8:	dd0a      	ble.n	b910 <arm_avgpool_s8+0xc4>
        for (k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
    b8fa:	9b05      	ldr	r3, [sp, #20]
    b8fc:	42bb      	cmp	r3, r7
    b8fe:	dbe0      	blt.n	b8c2 <arm_avgpool_s8+0x76>
    b900:	e7f2      	b.n	b8e8 <arm_avgpool_s8+0x9c>
            arm_q7_to_q15_no_shift(start, bufferA, ch_src);
    b902:	464a      	mov	r2, r9
    b904:	9901      	ldr	r1, [sp, #4]
    b906:	4628      	mov	r0, r5
    b908:	4b41      	ldr	r3, [pc, #260]	; (ba10 <arm_avgpool_s8+0x1c4>)
    b90a:	4798      	blx	r3
    b90c:	e7e1      	b.n	b8d2 <arm_avgpool_s8+0x86>
      int count = 0;
    b90e:	2600      	movs	r6, #0
        }
      }
      buffer_scale_back_q15_to_q7_and_clamp(bufferA, dst, ch_src, count, act_min, act_max);
    b910:	b2b0      	uxth	r0, r6
  for (i = 0; i < length; i++)
    b912:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b914:	b1c3      	cbz	r3, b948 <arm_avgpool_s8+0xfc>
    sum = buffer[i] > 0 ? (buffer[i] + count / 2) / count : (buffer[i] - count / 2) / count;
    b916:	0840      	lsrs	r0, r0, #1
    b918:	9a01      	ldr	r2, [sp, #4]
    b91a:	9909      	ldr	r1, [sp, #36]	; 0x24
    b91c:	b2b6      	uxth	r6, r6
    b91e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    b920:	9d10      	ldr	r5, [sp, #64]	; 0x40
    b922:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    b924:	f932 3b02 	ldrsh.w	r3, [r2], #2
    b928:	2b00      	cmp	r3, #0
    b92a:	bfcc      	ite	gt
    b92c:	181b      	addgt	r3, r3, r0
    b92e:	1a1b      	suble	r3, r3, r0
    b930:	fb93 f3f6 	sdiv	r3, r3, r6
    sum = MAX(sum, act_min);
    b934:	42a3      	cmp	r3, r4
    b936:	bfb8      	it	lt
    b938:	4623      	movlt	r3, r4
    sum = MIN(sum, act_max);
    b93a:	42ab      	cmp	r3, r5
    b93c:	bfa8      	it	ge
    b93e:	462b      	movge	r3, r5
    target[i] = (q7_t) (sum);
    b940:	f801 3f01 	strb.w	r3, [r1, #1]!
  for (i = 0; i < length; i++)
    b944:	42ba      	cmp	r2, r7
    b946:	d1ed      	bne.n	b924 <arm_avgpool_s8+0xd8>
    for (i_x = 0; i_x < dim_dst_width; i_x++)
    b948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b94a:	3301      	adds	r3, #1
    b94c:	930a      	str	r3, [sp, #40]	; 0x28
    b94e:	9a07      	ldr	r2, [sp, #28]
    b950:	990c      	ldr	r1, [sp, #48]	; 0x30
    b952:	1a52      	subs	r2, r2, r1
    b954:	9207      	str	r2, [sp, #28]
    b956:	9a08      	ldr	r2, [sp, #32]
    b958:	9915      	ldr	r1, [sp, #84]	; 0x54
    b95a:	440a      	add	r2, r1
    b95c:	9208      	str	r2, [sp, #32]
    b95e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b960:	444a      	add	r2, r9
    b962:	9209      	str	r2, [sp, #36]	; 0x24
    b964:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b966:	429a      	cmp	r2, r3
    b968:	d01a      	beq.n	b9a0 <arm_avgpool_s8+0x154>
      const int32_t kernel_x_start = MAX(0, -base_idx_x);
    b96a:	9a07      	ldr	r2, [sp, #28]
    b96c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    b970:	461c      	mov	r4, r3
    b972:	9305      	str	r3, [sp, #20]
      const int32_t kernel_x_end = MIN(dim_kernel_width, dim_src_width - base_idx_x);
    b974:	990d      	ldr	r1, [sp, #52]	; 0x34
    b976:	188f      	adds	r7, r1, r2
    b978:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b97a:	4297      	cmp	r7, r2
    b97c:	bfa8      	it	ge
    b97e:	4617      	movge	r7, r2
      for (k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
    b980:	9911      	ldr	r1, [sp, #68]	; 0x44
    b982:	9804      	ldr	r0, [sp, #16]
    b984:	4281      	cmp	r1, r0
    b986:	dac2      	bge.n	b90e <arm_avgpool_s8+0xc2>
    b988:	4698      	mov	r8, r3
    b98a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    b98c:	9808      	ldr	r0, [sp, #32]
    b98e:	1813      	adds	r3, r2, r0
    b990:	4423      	add	r3, r4
    b992:	9a16      	ldr	r2, [sp, #88]	; 0x58
    b994:	fb09 2303 	mla	r3, r9, r3, r2
    b998:	9302      	str	r3, [sp, #8]
    b99a:	468a      	mov	sl, r1
    b99c:	2600      	movs	r6, #0
    b99e:	e7ac      	b.n	b8fa <arm_avgpool_s8+0xae>
    b9a0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    b9a2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    b9a4:	4413      	add	r3, r2
    b9a6:	932c      	str	r3, [sp, #176]	; 0xb0
  for (i_y = 0; i_y < dim_dst_height; i_y++)
    b9a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b9aa:	3301      	adds	r3, #1
    b9ac:	9319      	str	r3, [sp, #100]	; 0x64
    b9ae:	9917      	ldr	r1, [sp, #92]	; 0x5c
    b9b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    b9b2:	1a89      	subs	r1, r1, r2
    b9b4:	9117      	str	r1, [sp, #92]	; 0x5c
    b9b6:	9918      	ldr	r1, [sp, #96]	; 0x60
    b9b8:	4411      	add	r1, r2
    b9ba:	9118      	str	r1, [sp, #96]	; 0x60
    b9bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    b9be:	429a      	cmp	r2, r3
    b9c0:	d021      	beq.n	ba06 <arm_avgpool_s8+0x1ba>
    for (i_x = 0; i_x < dim_dst_width; i_x++)
    b9c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b9c4:	2b00      	cmp	r3, #0
    b9c6:	ddef      	ble.n	b9a8 <arm_avgpool_s8+0x15c>
      const int32_t kernel_y_start = MAX(0, -base_idx_y);
    b9c8:	9917      	ldr	r1, [sp, #92]	; 0x5c
    b9ca:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
    b9ce:	461a      	mov	r2, r3
    b9d0:	9311      	str	r3, [sp, #68]	; 0x44
      const int32_t kernel_y_end = MIN(dim_kernel_height, dim_src_height - base_idx_y);
    b9d2:	981a      	ldr	r0, [sp, #104]	; 0x68
    b9d4:	1843      	adds	r3, r0, r1
    b9d6:	991c      	ldr	r1, [sp, #112]	; 0x70
    b9d8:	428b      	cmp	r3, r1
    b9da:	bfa8      	it	ge
    b9dc:	460b      	movge	r3, r1
    b9de:	9304      	str	r3, [sp, #16]
    b9e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b9e2:	9307      	str	r3, [sp, #28]
    b9e4:	990c      	ldr	r1, [sp, #48]	; 0x30
    b9e6:	9115      	str	r1, [sp, #84]	; 0x54
    b9e8:	425b      	negs	r3, r3
    b9ea:	9308      	str	r3, [sp, #32]
    b9ec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    b9ee:	3b01      	subs	r3, #1
    b9f0:	9309      	str	r3, [sp, #36]	; 0x24
    b9f2:	4613      	mov	r3, r2
    b9f4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    b9f6:	4413      	add	r3, r2
    b9f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b9fa:	fb02 f303 	mul.w	r3, r2, r3
    b9fe:	9314      	str	r3, [sp, #80]	; 0x50
    ba00:	2300      	movs	r3, #0
    ba02:	930a      	str	r3, [sp, #40]	; 0x28
    ba04:	e7b1      	b.n	b96a <arm_avgpool_s8+0x11e>
    }
  }

#endif
  return ARM_MATH_SUCCESS;
}
    ba06:	2000      	movs	r0, #0
    ba08:	b021      	add	sp, #132	; 0x84
    ba0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba0e:	bf00      	nop
    ba10:	0000b771 	.word	0x0000b771
    ba14:	0000a671 	.word	0x0000a671

0000ba18 <arm_avgpool_s8_get_buffer_size>:
  return (ch_src * sizeof(int16_t));
#else
  (void)ch_src;
  return 0;
#endif
}
    ba18:	0048      	lsls	r0, r1, #1
    ba1a:	4770      	bx	lr

0000ba1c <arm_max_pool_s8>:
                const cmsis_nn_dims *input_dims,
                const q7_t *src,
                const cmsis_nn_dims *filter_dims,
                const cmsis_nn_dims *output_dims,
                q7_t *dst)
{
    ba1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba20:	b0a1      	sub	sp, #132	; 0x84
    ba22:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    ba24:	9d2b      	ldr	r5, [sp, #172]	; 0xac
    const int32_t input_y = input_dims->h;
    ba26:	6850      	ldr	r0, [r2, #4]
    ba28:	9017      	str	r0, [sp, #92]	; 0x5c
    const int32_t input_x = input_dims->w;
    ba2a:	6890      	ldr	r0, [r2, #8]
    const int32_t output_y = output_dims->h;
    ba2c:	686e      	ldr	r6, [r5, #4]
    ba2e:	960f      	str	r6, [sp, #60]	; 0x3c
    const int32_t output_x = output_dims->w;
    ba30:	68ad      	ldr	r5, [r5, #8]
    ba32:	9509      	str	r5, [sp, #36]	; 0x24
    const int32_t stride_y = pool_params->stride.h;
    ba34:	684f      	ldr	r7, [r1, #4]
    ba36:	9718      	str	r7, [sp, #96]	; 0x60
    const int32_t stride_x = pool_params->stride.w;
    ba38:	680f      	ldr	r7, [r1, #0]
    ba3a:	9719      	str	r7, [sp, #100]	; 0x64
    const int32_t kernel_y = filter_dims->h;
    ba3c:	6867      	ldr	r7, [r4, #4]
    ba3e:	971a      	str	r7, [sp, #104]	; 0x68
    const int32_t kernel_x = filter_dims->w;
    ba40:	68a4      	ldr	r4, [r4, #8]
    ba42:	941b      	str	r4, [sp, #108]	; 0x6c
    const int32_t pad_y = pool_params->padding.h;
    ba44:	68cc      	ldr	r4, [r1, #12]
    const int32_t pad_x = pool_params->padding.w;
    ba46:	688f      	ldr	r7, [r1, #8]
    ba48:	971c      	str	r7, [sp, #112]	; 0x70
    const int32_t act_min = pool_params->activation.min;
    ba4a:	690f      	ldr	r7, [r1, #16]
    ba4c:	9710      	str	r7, [sp, #64]	; 0x40
    const int32_t act_max = pool_params->activation.max;
    ba4e:	6949      	ldr	r1, [r1, #20]
    ba50:	9111      	str	r1, [sp, #68]	; 0x44
    const int32_t channel_in = input_dims->c;
    ba52:	68d2      	ldr	r2, [r2, #12]
    ba54:	9212      	str	r2, [sp, #72]	; 0x48
    (void)ctx;
    q7_t *dst_base = dst;

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
    ba56:	4261      	negs	r1, r4
    ba58:	910b      	str	r1, [sp, #44]	; 0x2c
    ba5a:	2e00      	cmp	r6, #0
    ba5c:	f340 80d5 	ble.w	bc0a <arm_max_pool_s8+0x1ee>
    ba60:	931f      	str	r3, [sp, #124]	; 0x7c
    int32_t cnt = length >> 2;
    ba62:	4613      	mov	r3, r2
    ba64:	ea4f 0aa2 	mov.w	sl, r2, asr #2
    ba68:	940e      	str	r4, [sp, #56]	; 0x38
    ba6a:	9015      	str	r0, [sp, #84]	; 0x54
    ba6c:	4691      	mov	r9, r2
    ba6e:	fb03 f300 	mul.w	r3, r3, r0
    ba72:	9308      	str	r3, [sp, #32]
    ba74:	ea4f 038a 	mov.w	r3, sl, lsl #2
    ba78:	9302      	str	r3, [sp, #8]
    ba7a:	1e6b      	subs	r3, r5, #1
    ba7c:	fb02 2303 	mla	r3, r2, r3, r2
    ba80:	9316      	str	r3, [sp, #88]	; 0x58
    ba82:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    ba84:	930d      	str	r3, [sp, #52]	; 0x34
    ba86:	2300      	movs	r3, #0
    ba88:	9314      	str	r3, [sp, #80]	; 0x50
                {
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);

                    if (count == 0)
                    {
                        memcpy(dst, start, channel_in);
    ba8a:	4f8d      	ldr	r7, [pc, #564]	; (bcc0 <arm_max_pool_s8+0x2a4>)
    ba8c:	46d0      	mov	r8, sl
    ba8e:	e09c      	b.n	bbca <arm_max_pool_s8+0x1ae>
    while (cnt > 0l)
    ba90:	f1b8 0f00 	cmp.w	r8, #0
    ba94:	dd46      	ble.n	bb24 <arm_max_pool_s8+0x108>
    ba96:	46c6      	mov	lr, r8
    ba98:	9801      	ldr	r0, [sp, #4]
  memcpy(&val, in_q7, 4);
    ba9a:	6803      	ldr	r3, [r0, #0]
  memcpy(&val, *in_q7, 4);
    ba9c:	f851 2b04 	ldr.w	r2, [r1], #4
        if (comp_max.bytes[0] > ref_max.bytes[0])
    baa0:	fa4f fc82 	sxtb.w	ip, r2
    baa4:	fa4f fb83 	sxtb.w	fp, r3
    baa8:	45dc      	cmp	ip, fp
            ref_max.bytes[0] = comp_max.bytes[0];
    baaa:	bfc8      	it	gt
    baac:	f36c 0307 	bfigt	r3, ip, #0, #8
        if (comp_max.bytes[1] > ref_max.bytes[1])
    bab0:	f342 2c07 	sbfx	ip, r2, #8, #8
    bab4:	f343 2b07 	sbfx	fp, r3, #8, #8
    bab8:	45e3      	cmp	fp, ip
            ref_max.bytes[1] = comp_max.bytes[1];
    baba:	bfb8      	it	lt
    babc:	f36c 230f 	bfilt	r3, ip, #8, #8
        if (comp_max.bytes[2] > ref_max.bytes[2])
    bac0:	f342 4c07 	sbfx	ip, r2, #16, #8
    bac4:	f343 4b07 	sbfx	fp, r3, #16, #8
    bac8:	45e3      	cmp	fp, ip
            ref_max.bytes[2] = comp_max.bytes[2];
    baca:	bfb8      	it	lt
    bacc:	f36c 4317 	bfilt	r3, ip, #16, #8
        if (comp_max.bytes[3] > ref_max.bytes[3])
    bad0:	1612      	asrs	r2, r2, #24
    bad2:	ebb2 6f23 	cmp.w	r2, r3, asr #24
            ref_max.bytes[3] = comp_max.bytes[3];
    bad6:	bfc8      	it	gt
    bad8:	f362 631f 	bfigt	r3, r2, #24, #8
  q7_t ** pQ7,
  q31_t   value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ7, &val, 4);
    badc:	f840 3b04 	str.w	r3, [r0], #4
    while (cnt > 0l)
    bae0:	f1be 0e01 	subs.w	lr, lr, #1
    bae4:	d1d9      	bne.n	ba9a <arm_max_pool_s8+0x7e>
    bae6:	9b02      	ldr	r3, [sp, #8]
    bae8:	18e1      	adds	r1, r4, r3
  (*pQ7)[1] = (val >> 8) & 0x0FF;
  (*pQ7)[2] = (val >> 16) & 0x0FF;
  (*pQ7)[3] = (val >> 24) & 0x0FF;

#endif
  *pQ7 += 4;
    baea:	9b03      	ldr	r3, [sp, #12]
    while (cnt > 0l)
    baec:	f1ba 0f00 	cmp.w	sl, #0
    baf0:	d00c      	beq.n	bb0c <arm_max_pool_s8+0xf0>
    baf2:	3901      	subs	r1, #1
    baf4:	eb03 0e0a 	add.w	lr, r3, sl
        if (*src > *dst)
    baf8:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
    bafc:	f993 0000 	ldrsb.w	r0, [r3]
    bb00:	4290      	cmp	r0, r2
            *dst = *src;
    bb02:	bfb8      	it	lt
    bb04:	701a      	strblt	r2, [r3, #0]
        dst++;
    bb06:	3301      	adds	r3, #1
    while (cnt > 0l)
    bb08:	4573      	cmp	r3, lr
    bb0a:	d1f5      	bne.n	baf8 <arm_max_pool_s8+0xdc>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
    bb0c:	3501      	adds	r5, #1
    bb0e:	444c      	add	r4, r9
    bb10:	2301      	movs	r3, #1
    bb12:	42ae      	cmp	r6, r5
    bb14:	dd08      	ble.n	bb28 <arm_max_pool_s8+0x10c>
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
    bb16:	4621      	mov	r1, r4
                    if (count == 0)
    bb18:	2b00      	cmp	r3, #0
    bb1a:	d1b9      	bne.n	ba90 <arm_max_pool_s8+0x74>
                        memcpy(dst, start, channel_in);
    bb1c:	464a      	mov	r2, r9
    bb1e:	9801      	ldr	r0, [sp, #4]
    bb20:	47b8      	blx	r7
    bb22:	e7f3      	b.n	bb0c <arm_max_pool_s8+0xf0>
    while (cnt > 0l)
    bb24:	9b01      	ldr	r3, [sp, #4]
    bb26:	e7e1      	b.n	baec <arm_max_pool_s8+0xd0>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
    bb28:	9a05      	ldr	r2, [sp, #20]
    bb2a:	3201      	adds	r2, #1
    bb2c:	9205      	str	r2, [sp, #20]
    bb2e:	9904      	ldr	r1, [sp, #16]
    bb30:	9808      	ldr	r0, [sp, #32]
    bb32:	4401      	add	r1, r0
    bb34:	9104      	str	r1, [sp, #16]
    bb36:	9907      	ldr	r1, [sp, #28]
    bb38:	4291      	cmp	r1, r2
    bb3a:	dd05      	ble.n	bb48 <arm_max_pool_s8+0x12c>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
    bb3c:	9a06      	ldr	r2, [sp, #24]
    bb3e:	42b2      	cmp	r2, r6
    bb40:	daf2      	bge.n	bb28 <arm_max_pool_s8+0x10c>
    bb42:	9c04      	ldr	r4, [sp, #16]
    bb44:	9d06      	ldr	r5, [sp, #24]
    bb46:	e7e6      	b.n	bb16 <arm_max_pool_s8+0xfa>
    bb48:	9b01      	ldr	r3, [sp, #4]
    bb4a:	444b      	add	r3, r9
    bb4c:	9301      	str	r3, [sp, #4]
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
    bb4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bb50:	4619      	mov	r1, r3
    bb52:	9a19      	ldr	r2, [sp, #100]	; 0x64
    bb54:	4411      	add	r1, r2
    bb56:	910a      	str	r1, [sp, #40]	; 0x28
    bb58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bb5a:	3301      	adds	r3, #1
    bb5c:	9313      	str	r3, [sp, #76]	; 0x4c
    bb5e:	990c      	ldr	r1, [sp, #48]	; 0x30
    bb60:	1a8a      	subs	r2, r1, r2
    bb62:	920c      	str	r2, [sp, #48]	; 0x30
    bb64:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bb66:	429a      	cmp	r2, r3
    bb68:	d01d      	beq.n	bba6 <arm_max_pool_s8+0x18a>
            const int32_t ker_x_start = MAX(0, -base_idx_x);
    bb6a:	990c      	ldr	r1, [sp, #48]	; 0x30
    bb6c:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
    bb70:	461a      	mov	r2, r3
    bb72:	9306      	str	r3, [sp, #24]
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
    bb74:	9815      	ldr	r0, [sp, #84]	; 0x54
    bb76:	1846      	adds	r6, r0, r1
    bb78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    bb7a:	429e      	cmp	r6, r3
    bb7c:	bfa8      	it	ge
    bb7e:	461e      	movge	r6, r3
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
    bb80:	991d      	ldr	r1, [sp, #116]	; 0x74
    bb82:	9807      	ldr	r0, [sp, #28]
    bb84:	4281      	cmp	r1, r0
    bb86:	dadf      	bge.n	bb48 <arm_max_pool_s8+0x12c>
    bb88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bb8a:	981e      	ldr	r0, [sp, #120]	; 0x78
    bb8c:	4403      	add	r3, r0
    bb8e:	4413      	add	r3, r2
    bb90:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    bb92:	fb09 2303 	mla	r3, r9, r3, r2
    bb96:	9304      	str	r3, [sp, #16]
    bb98:	9b01      	ldr	r3, [sp, #4]
    bb9a:	9a02      	ldr	r2, [sp, #8]
    bb9c:	4413      	add	r3, r2
    bb9e:	9303      	str	r3, [sp, #12]
    bba0:	9105      	str	r1, [sp, #20]
    bba2:	2300      	movs	r3, #0
    bba4:	e7ca      	b.n	bb3c <arm_max_pool_s8+0x120>
    bba6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bba8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    bbaa:	4413      	add	r3, r2
    bbac:	930d      	str	r3, [sp, #52]	; 0x34
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
    bbae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bbb0:	4619      	mov	r1, r3
    bbb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    bbb4:	4411      	add	r1, r2
    bbb6:	910b      	str	r1, [sp, #44]	; 0x2c
    bbb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    bbba:	3301      	adds	r3, #1
    bbbc:	9314      	str	r3, [sp, #80]	; 0x50
    bbbe:	990e      	ldr	r1, [sp, #56]	; 0x38
    bbc0:	1a8a      	subs	r2, r1, r2
    bbc2:	920e      	str	r2, [sp, #56]	; 0x38
    bbc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    bbc6:	429a      	cmp	r2, r3
    bbc8:	d01f      	beq.n	bc0a <arm_max_pool_s8+0x1ee>
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
    bbca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    bbcc:	425a      	negs	r2, r3
    bbce:	920a      	str	r2, [sp, #40]	; 0x28
    bbd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bbd2:	2a00      	cmp	r2, #0
    bbd4:	ddeb      	ble.n	bbae <arm_max_pool_s8+0x192>
    bbd6:	930c      	str	r3, [sp, #48]	; 0x30
            const int32_t ker_y_start = MAX(0, -base_idx_y);
    bbd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    bbda:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    bbde:	931d      	str	r3, [sp, #116]	; 0x74
    bbe0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bbe2:	18cb      	adds	r3, r1, r3
    bbe4:	9915      	ldr	r1, [sp, #84]	; 0x54
    bbe6:	fb01 f303 	mul.w	r3, r1, r3
    bbea:	931e      	str	r3, [sp, #120]	; 0x78
    bbec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bbee:	9301      	str	r3, [sp, #4]
    bbf0:	2300      	movs	r3, #0
    bbf2:	9313      	str	r3, [sp, #76]	; 0x4c
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
    bbf4:	9917      	ldr	r1, [sp, #92]	; 0x5c
    bbf6:	188b      	adds	r3, r1, r2
    bbf8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    bbfa:	4293      	cmp	r3, r2
    bbfc:	bfa8      	it	ge
    bbfe:	4613      	movge	r3, r2
    bc00:	9307      	str	r3, [sp, #28]
    cnt = length & 0x3;
    bc02:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bc04:	f003 0a03 	and.w	sl, r3, #3
    bc08:	e7af      	b.n	bb6a <arm_max_pool_s8+0x14e>
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
    bc0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bc0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    bc0e:	fb03 f302 	mul.w	r3, r3, r2
    bc12:	9a12      	ldr	r2, [sp, #72]	; 0x48
    bc14:	fb02 f203 	mul.w	r2, r2, r3
    bc18:	4613      	mov	r3, r2
    int32_t cnt = length >> 2;
    bc1a:	1090      	asrs	r0, r2, #2
    while (cnt > 0l)
    bc1c:	2800      	cmp	r0, #0
    bc1e:	dd37      	ble.n	bc90 <arm_max_pool_s8+0x274>
    bc20:	4605      	mov	r5, r0
    bc22:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
    bc24:	9e10      	ldr	r6, [sp, #64]	; 0x40
    bc26:	9f11      	ldr	r7, [sp, #68]	; 0x44
  memcpy(&val, in_q7, 4);
    bc28:	6822      	ldr	r2, [r4, #0]
        in.word = arm_nn_read_q7x4(source);
    bc2a:	4611      	mov	r1, r2
        in.bytes[0] = MAX(in.bytes[0], act_min);
    bc2c:	b252      	sxtb	r2, r2
    bc2e:	42b2      	cmp	r2, r6
    bc30:	bfb8      	it	lt
    bc32:	4632      	movlt	r2, r6
        in.bytes[0] = MIN(in.bytes[0], act_max);
    bc34:	b252      	sxtb	r2, r2
    bc36:	42ba      	cmp	r2, r7
    bc38:	bfa8      	it	ge
    bc3a:	463a      	movge	r2, r7
    bc3c:	f362 0107 	bfi	r1, r2, #0, #8
        in.bytes[1] = MAX(in.bytes[1], act_min);
    bc40:	f341 2207 	sbfx	r2, r1, #8, #8
    bc44:	42b2      	cmp	r2, r6
    bc46:	bfb8      	it	lt
    bc48:	4632      	movlt	r2, r6
        in.bytes[1] = MIN(in.bytes[1], act_max);
    bc4a:	b252      	sxtb	r2, r2
    bc4c:	42ba      	cmp	r2, r7
    bc4e:	bfa8      	it	ge
    bc50:	463a      	movge	r2, r7
    bc52:	f362 210f 	bfi	r1, r2, #8, #8
        in.bytes[2] = MAX(in.bytes[2], act_min);
    bc56:	f341 4207 	sbfx	r2, r1, #16, #8
    bc5a:	42b2      	cmp	r2, r6
    bc5c:	bfb8      	it	lt
    bc5e:	4632      	movlt	r2, r6
        in.bytes[2] = MIN(in.bytes[2], act_max);
    bc60:	b252      	sxtb	r2, r2
    bc62:	42ba      	cmp	r2, r7
    bc64:	bfa8      	it	ge
    bc66:	463a      	movge	r2, r7
    bc68:	f362 4117 	bfi	r1, r2, #16, #8
        in.bytes[3] = MAX(in.bytes[3], act_min);
    bc6c:	160a      	asrs	r2, r1, #24
    bc6e:	42b2      	cmp	r2, r6
    bc70:	bfb8      	it	lt
    bc72:	4632      	movlt	r2, r6
        in.bytes[3] = MIN(in.bytes[3], act_max);
    bc74:	b252      	sxtb	r2, r2
    bc76:	42ba      	cmp	r2, r7
    bc78:	bfa8      	it	ge
    bc7a:	463a      	movge	r2, r7
    bc7c:	f362 611f 	bfi	r1, r2, #24, #8
  memcpy (*pQ7, &val, 4);
    bc80:	f844 1b04 	str.w	r1, [r4], #4
    while (cnt > 0l)
    bc84:	3d01      	subs	r5, #1
    bc86:	d1cf      	bne.n	bc28 <arm_max_pool_s8+0x20c>
    bc88:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    bc8a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    bc8e:	922c      	str	r2, [sp, #176]	; 0xb0
    while (cnt > 0l)
    bc90:	f013 0303 	ands.w	r3, r3, #3
    bc94:	d010      	beq.n	bcb8 <arm_max_pool_s8+0x29c>
    bc96:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    bc98:	4413      	add	r3, r2
    bc9a:	4611      	mov	r1, r2
        int32_t comp = *source;
    bc9c:	f991 2000 	ldrsb.w	r2, [r1]
        comp = MAX(comp, act_min);
    bca0:	9810      	ldr	r0, [sp, #64]	; 0x40
    bca2:	4282      	cmp	r2, r0
    bca4:	bfb8      	it	lt
    bca6:	4602      	movlt	r2, r0
        comp = MIN(comp, act_max);
    bca8:	9811      	ldr	r0, [sp, #68]	; 0x44
    bcaa:	4282      	cmp	r2, r0
    bcac:	bfa8      	it	ge
    bcae:	4602      	movge	r2, r0
        *source++ = (int8_t)comp;
    bcb0:	f801 2b01 	strb.w	r2, [r1], #1
    while (cnt > 0l)
    bcb4:	428b      	cmp	r3, r1
    bcb6:	d1f1      	bne.n	bc9c <arm_max_pool_s8+0x280>

    return ARM_MATH_SUCCESS;
}
    bcb8:	2000      	movs	r0, #0
    bcba:	b021      	add	sp, #132	; 0x84
    bcbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bcc0:	00018121 	.word	0x00018121

0000bcc4 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
    bcc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bcc8:	b09b      	sub	sp, #108	; 0x6c
    bcca:	9212      	str	r2, [sp, #72]	; 0x48
    const int32_t mask = (1 << shift);

    int32_t col = 0;
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
    bccc:	2900      	cmp	r1, #0
    bcce:	9115      	str	r1, [sp, #84]	; 0x54
    bcd0:	f340 87e9 	ble.w	cca6 <arm_softmax_s8+0xfe2>
    bcd4:	4614      	mov	r4, r2
    bcd6:	461a      	mov	r2, r3
    bcd8:	9414      	str	r4, [sp, #80]	; 0x50
    bcda:	1903      	adds	r3, r0, r4
    bcdc:	930a      	str	r3, [sp, #40]	; 0x28
    bcde:	1c43      	adds	r3, r0, #1
    bce0:	9311      	str	r3, [sp, #68]	; 0x44
    bce2:	2300      	movs	r3, #0
    bce4:	9313      	str	r3, [sp, #76]	; 0x4c
        mult = 1 - mult;
    bce6:	4b16      	ldr	r3, [pc, #88]	; (bd40 <arm_softmax_s8+0x7c>)
    bce8:	9301      	str	r3, [sp, #4]
    bcea:	f04f 33ff 	mov.w	r3, #4294967295
    bcee:	9306      	str	r3, [sp, #24]
__STATIC_FORCEINLINE q31_t arm_nn_mult_by_power_of_two(const int32_t val, const int32_t exp)
{
    const int32_t thresh = ((1 << (31 - exp)) - 1);
    int32_t result = val << exp;
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    bcf0:	4693      	mov	fp, r2
    bcf2:	f000 bfb1 	b.w	cc58 <arm_softmax_s8+0xf94>
    result = (int32_t) (mult / (1ll << 31));
    bcf6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    bcfa:	2500      	movs	r5, #0
    bcfc:	1824      	adds	r4, r4, r0
    bcfe:	414d      	adcs	r5, r1
    bd00:	e1d9      	b.n	c0b6 <arm_softmax_s8+0x3f2>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    bd02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    bd06:	f040 81ef 	bne.w	c0e8 <arm_softmax_s8+0x424>
        result = Q31_MAX;
    bd0a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    bd0e:	9302      	str	r3, [sp, #8]
    mult = mult + (q63_t)m1 * m2;
    bd10:	480c      	ldr	r0, [pc, #48]	; (bd44 <arm_softmax_s8+0x80>)
    bd12:	2100      	movs	r1, #0
    result = (int32_t) (mult / (1ll << 31));
    bd14:	4686      	mov	lr, r0
    mult = mult + (q63_t)m1 * m2;
    bd16:	f8df 8030 	ldr.w	r8, [pc, #48]	; bd48 <arm_softmax_s8+0x84>
    bd1a:	f04f 0900 	mov.w	r9, #0
    const int32_t x                     = (val_mod_minus_quarter << 5) + (1 << 28);
    bd1e:	4a0a      	ldr	r2, [pc, #40]	; (bd48 <arm_softmax_s8+0x84>)
    const int32_t remainder             = val_mod_minus_quarter - val;
    bd20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    bd24:	e205      	b.n	c132 <arm_softmax_s8+0x46e>
    result = (int32_t) (mult / (1ll << 31));
    bd26:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    bd2a:	2500      	movs	r5, #0
    bd2c:	1824      	adds	r4, r4, r0
    bd2e:	414d      	adcs	r5, r1
    bd30:	e1f5      	b.n	c11e <arm_softmax_s8+0x45a>
    bd32:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    bd36:	2700      	movs	r7, #0
    bd38:	1936      	adds	r6, r6, r4
    bd3a:	416f      	adcs	r7, r5
    bd3c:	e20a      	b.n	c154 <arm_softmax_s8+0x490>
    bd3e:	bf00      	nop
    bd40:	c0000001 	.word	0xc0000001
    bd44:	01fffff8 	.word	0x01fffff8
    bd48:	0fffffe0 	.word	0x0fffffe0
    result = dividend >> exponent;
    bd4c:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
        result++;
    bd50:	3601      	adds	r6, #1
    if ((m1 < 0) ^ (m2 < 0))
    bd52:	0fd4      	lsrs	r4, r2, #31
    bd54:	ebb4 7fde 	cmp.w	r4, lr, lsr #31
        mult = 1 - mult;
    bd58:	bf19      	ittee	ne
    bd5a:	9c01      	ldrne	r4, [sp, #4]
    bd5c:	9d06      	ldrne	r5, [sp, #24]
    q63_t mult = 1 << 30;
    bd5e:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
    bd62:	2500      	moveq	r5, #0
    mult = mult + (q63_t)m1 * m2;
    bd64:	fb08 f701 	mul.w	r7, r8, r1
    bd68:	fb00 7709 	mla	r7, r0, r9, r7
    bd6c:	fba8 0100 	umull	r0, r1, r8, r0
    bd70:	4439      	add	r1, r7
    bd72:	1900      	adds	r0, r0, r4
    bd74:	4169      	adcs	r1, r5
    result = (int32_t) (mult / (1ll << 31));
    bd76:	4604      	mov	r4, r0
    bd78:	460d      	mov	r5, r1
    bd7a:	2800      	cmp	r0, #0
    bd7c:	f171 0700 	sbcs.w	r7, r1, #0
    bd80:	f2c0 81f6 	blt.w	c170 <arm_softmax_s8+0x4ac>
    bd84:	0fe0      	lsrs	r0, r4, #31
    bd86:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    if ((m1 < 0) ^ (m2 < 0))
    bd8a:	1830      	adds	r0, r6, r0
        mult = 1 - mult;
    bd8c:	bf47      	ittee	mi
    bd8e:	9c01      	ldrmi	r4, [sp, #4]
    bd90:	9d06      	ldrmi	r5, [sp, #24]
    q63_t mult = 1 << 30;
    bd92:	f04f 4480 	movpl.w	r4, #1073741824	; 0x40000000
    bd96:	2500      	movpl	r5, #0
    mult = mult + (q63_t)m1 * m2;
    bd98:	ea4f 79e0 	mov.w	r9, r0, asr #31
    bd9c:	49ca      	ldr	r1, [pc, #808]	; (c0c8 <arm_softmax_s8+0x404>)
    bd9e:	fba0 0101 	umull	r0, r1, r0, r1
    bda2:	4ec9      	ldr	r6, [pc, #804]	; (c0c8 <arm_softmax_s8+0x404>)
    bda4:	fb06 1109 	mla	r1, r6, r9, r1
    bda8:	1900      	adds	r0, r0, r4
    bdaa:	4169      	adcs	r1, r5
    result = (int32_t) (mult / (1ll << 31));
    bdac:	4606      	mov	r6, r0
    bdae:	460f      	mov	r7, r1
    bdb0:	2800      	cmp	r0, #0
    bdb2:	f171 0400 	sbcs.w	r4, r1, #0
    bdb6:	f2c0 81e1 	blt.w	c17c <arm_softmax_s8+0x4b8>
    bdba:	0ff1      	lsrs	r1, r6, #31
    bdbc:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
    bdc0:	448e      	add	lr, r1
    result = dividend >> exponent;
    bdc2:	ea4f 006e 	mov.w	r0, lr, asr #1
    int32_t remainder = remainder_mask & dividend;
    bdc6:	f00e 0e01 	and.w	lr, lr, #1
    if (remainder > threshold)
    bdca:	ebbe 7fd0 	cmp.w	lr, r0, lsr #31
        result++;
    bdce:	bfc8      	it	gt
    bdd0:	3001      	addgt	r0, #1
    if ((m1 < 0) ^ (m2 < 0))
    bdd2:	1882      	adds	r2, r0, r2
        mult = 1 - mult;
    bdd4:	bf47      	ittee	mi
    bdd6:	9c01      	ldrmi	r4, [sp, #4]
    bdd8:	9d06      	ldrmi	r5, [sp, #24]
    q63_t mult = 1 << 30;
    bdda:	f04f 4480 	movpl.w	r4, #1073741824	; 0x40000000
    bdde:	2500      	movpl	r5, #0
    mult = mult + (q63_t)m1 * m2;
    bde0:	17d7      	asrs	r7, r2, #31
    bde2:	49ba      	ldr	r1, [pc, #744]	; (c0cc <arm_softmax_s8+0x408>)
    bde4:	fba2 0101 	umull	r0, r1, r2, r1
    bde8:	4ab8      	ldr	r2, [pc, #736]	; (c0cc <arm_softmax_s8+0x408>)
    bdea:	fb02 1107 	mla	r1, r2, r7, r1
    bdee:	1900      	adds	r0, r0, r4
    bdf0:	4169      	adcs	r1, r5
    result = (int32_t) (mult / (1ll << 31));
    bdf2:	4606      	mov	r6, r0
    bdf4:	460f      	mov	r7, r1
    bdf6:	2800      	cmp	r0, #0
    bdf8:	f171 0200 	sbcs.w	r2, r1, #0
    bdfc:	f2c0 81c4 	blt.w	c188 <arm_softmax_s8+0x4c4>
    be00:	0ff1      	lsrs	r1, r6, #31
    be02:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
    be06:	f3c3 6500 	ubfx	r5, r3, #24, #1
    be0a:	4268      	negs	r0, r5
    if ((m1 < 0) ^ (m2 < 0))
    be0c:	4aaf      	ldr	r2, [pc, #700]	; (c0cc <arm_softmax_s8+0x408>)
    be0e:	1889      	adds	r1, r1, r2
    be10:	f100 81c0 	bmi.w	c194 <arm_softmax_s8+0x4d0>
    q63_t mult = 1 << 30;
    be14:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    be18:	2700      	movs	r7, #0
    be1a:	e9cd 6704 	strd	r6, r7, [sp, #16]
    mult = mult + (q63_t)m1 * m2;
    be1e:	4aac      	ldr	r2, [pc, #688]	; (c0d0 <arm_softmax_s8+0x40c>)
    be20:	fba1 6702 	umull	r6, r7, r1, r2
    be24:	ea4f 79e1 	mov.w	r9, r1, asr #31
    be28:	4aa9      	ldr	r2, [pc, #676]	; (c0d0 <arm_softmax_s8+0x40c>)
    be2a:	fb02 7709 	mla	r7, r2, r9, r7
    be2e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    be32:	eb18 0806 	adds.w	r8, r8, r6
    be36:	eb49 0907 	adc.w	r9, r9, r7
    be3a:	4646      	mov	r6, r8
    be3c:	464f      	mov	r7, r9
    result = (int32_t) (mult / (1ll << 31));
    be3e:	2e00      	cmp	r6, #0
    be40:	f179 0200 	sbcs.w	r2, r9, #0
    be44:	f2c0 81ab 	blt.w	c19e <arm_softmax_s8+0x4da>
    be48:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    be4c:	ea42 0249 	orr.w	r2, r2, r9, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
    be50:	4002      	ands	r2, r0
    be52:	3d01      	subs	r5, #1
    be54:	4029      	ands	r1, r5
    SELECT_IF_NON_ZERO(1302514674)
    be56:	f3c3 6540 	ubfx	r5, r3, #25, #1
    be5a:	f1c5 0e00 	rsb	lr, r5, #0
    if ((m1 < 0) ^ (m2 < 0))
    be5e:	404a      	eors	r2, r1
        mult = 1 - mult;
    be60:	bf47      	ittee	mi
    be62:	9801      	ldrmi	r0, [sp, #4]
    be64:	9906      	ldrmi	r1, [sp, #24]
    q63_t mult = 1 << 30;
    be66:	f04f 4080 	movpl.w	r0, #1073741824	; 0x40000000
    be6a:	2100      	movpl	r1, #0
    mult = mult + (q63_t)m1 * m2;
    be6c:	4c99      	ldr	r4, [pc, #612]	; (c0d4 <arm_softmax_s8+0x410>)
    be6e:	fba2 6704 	umull	r6, r7, r2, r4
    be72:	ea4f 79e2 	mov.w	r9, r2, asr #31
    be76:	fb04 7709 	mla	r7, r4, r9, r7
    be7a:	1836      	adds	r6, r6, r0
    be7c:	414f      	adcs	r7, r1
    result = (int32_t) (mult / (1ll << 31));
    be7e:	46b0      	mov	r8, r6
    be80:	46b9      	mov	r9, r7
    be82:	2e00      	cmp	r6, #0
    be84:	f177 0100 	sbcs.w	r1, r7, #0
    be88:	f2c0 8192 	blt.w	c1b0 <arm_softmax_s8+0x4ec>
    be8c:	ea4f 74d8 	mov.w	r4, r8, lsr #31
    be90:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
    be94:	ea0e 0404 	and.w	r4, lr, r4
    be98:	3d01      	subs	r5, #1
    be9a:	402a      	ands	r2, r5
    SELECT_IF_NON_ZERO(790015084)
    be9c:	f3c3 6580 	ubfx	r5, r3, #26, #1
    bea0:	f1c5 0e00 	rsb	lr, r5, #0
    if ((m1 < 0) ^ (m2 < 0))
    bea4:	4054      	eors	r4, r2
        mult = 1 - mult;
    bea6:	bf47      	ittee	mi
    bea8:	9801      	ldrmi	r0, [sp, #4]
    beaa:	9906      	ldrmi	r1, [sp, #24]
    q63_t mult = 1 << 30;
    beac:	f04f 4080 	movpl.w	r0, #1073741824	; 0x40000000
    beb0:	2100      	movpl	r1, #0
    mult = mult + (q63_t)m1 * m2;
    beb2:	4a89      	ldr	r2, [pc, #548]	; (c0d8 <arm_softmax_s8+0x414>)
    beb4:	fba4 6702 	umull	r6, r7, r4, r2
    beb8:	ea4f 79e4 	mov.w	r9, r4, asr #31
    bebc:	fb02 7709 	mla	r7, r2, r9, r7
    bec0:	1836      	adds	r6, r6, r0
    bec2:	414f      	adcs	r7, r1
    result = (int32_t) (mult / (1ll << 31));
    bec4:	46b0      	mov	r8, r6
    bec6:	46b9      	mov	r9, r7
    bec8:	2e00      	cmp	r6, #0
    beca:	f177 0200 	sbcs.w	r2, r7, #0
    bece:	f2c0 8178 	blt.w	c1c2 <arm_softmax_s8+0x4fe>
    bed2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
    bed6:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
    SELECT_IF_NON_ZERO(790015084)
    beda:	ea0e 0000 	and.w	r0, lr, r0
    bede:	3d01      	subs	r5, #1
    bee0:	402c      	ands	r4, r5
    SELECT_IF_NON_ZERO(290630308)
    bee2:	f3c3 6ec0 	ubfx	lr, r3, #27, #1
    bee6:	f1ce 0c00 	rsb	ip, lr, #0
    if ((m1 < 0) ^ (m2 < 0))
    beea:	4060      	eors	r0, r4
        mult = 1 - mult;
    beec:	bf47      	ittee	mi
    beee:	f8dd 8004 	ldrmi.w	r8, [sp, #4]
    bef2:	f8dd 9018 	ldrmi.w	r9, [sp, #24]
    q63_t mult = 1 << 30;
    bef6:	f04f 4880 	movpl.w	r8, #1073741824	; 0x40000000
    befa:	f04f 0900 	movpl.w	r9, #0
    mult = mult + (q63_t)m1 * m2;
    befe:	4a77      	ldr	r2, [pc, #476]	; (c0dc <arm_softmax_s8+0x418>)
    bf00:	fba0 4502 	umull	r4, r5, r0, r2
    bf04:	17c7      	asrs	r7, r0, #31
    bf06:	fb02 5507 	mla	r5, r2, r7, r5
    bf0a:	eb14 0408 	adds.w	r4, r4, r8
    bf0e:	eb45 0509 	adc.w	r5, r5, r9
    result = (int32_t) (mult / (1ll << 31));
    bf12:	4626      	mov	r6, r4
    bf14:	462f      	mov	r7, r5
    bf16:	2c00      	cmp	r4, #0
    bf18:	f175 0200 	sbcs.w	r2, r5, #0
    bf1c:	f2c0 815a 	blt.w	c1d4 <arm_softmax_s8+0x510>
    bf20:	0ff1      	lsrs	r1, r6, #31
    bf22:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    SELECT_IF_NON_ZERO(290630308)
    bf26:	ea0c 0101 	and.w	r1, ip, r1
    bf2a:	f10e 3eff 	add.w	lr, lr, #4294967295
    bf2e:	ea0e 0000 	and.w	r0, lr, r0
    SELECT_IF_NON_ZERO(39332535)
    bf32:	f3c3 7e00 	ubfx	lr, r3, #28, #1
    bf36:	f1ce 0c00 	rsb	ip, lr, #0
    if ((m1 < 0) ^ (m2 < 0))
    bf3a:	4041      	eors	r1, r0
        mult = 1 - mult;
    bf3c:	bf47      	ittee	mi
    bf3e:	f8dd 8004 	ldrmi.w	r8, [sp, #4]
    bf42:	f8dd 9018 	ldrmi.w	r9, [sp, #24]
    q63_t mult = 1 << 30;
    bf46:	f04f 4880 	movpl.w	r8, #1073741824	; 0x40000000
    bf4a:	f04f 0900 	movpl.w	r9, #0
    mult = mult + (q63_t)m1 * m2;
    bf4e:	4a64      	ldr	r2, [pc, #400]	; (c0e0 <arm_softmax_s8+0x41c>)
    bf50:	fba1 4502 	umull	r4, r5, r1, r2
    bf54:	17cf      	asrs	r7, r1, #31
    bf56:	fb02 5507 	mla	r5, r2, r7, r5
    bf5a:	eb14 0408 	adds.w	r4, r4, r8
    bf5e:	eb45 0509 	adc.w	r5, r5, r9
    result = (int32_t) (mult / (1ll << 31));
    bf62:	4626      	mov	r6, r4
    bf64:	462f      	mov	r7, r5
    bf66:	2c00      	cmp	r4, #0
    bf68:	f175 0200 	sbcs.w	r2, r5, #0
    bf6c:	f2c0 8138 	blt.w	c1e0 <arm_softmax_s8+0x51c>
    bf70:	0ff2      	lsrs	r2, r6, #31
    bf72:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
    SELECT_IF_NON_ZERO(39332535)
    bf76:	ea0c 0202 	and.w	r2, ip, r2
    bf7a:	f10e 3eff 	add.w	lr, lr, #4294967295
    bf7e:	ea0e 0101 	and.w	r1, lr, r1
    SELECT_IF_NON_ZERO(720401)
    bf82:	f3c3 7e40 	ubfx	lr, r3, #29, #1
    bf86:	f1ce 0c00 	rsb	ip, lr, #0
    if ((m1 < 0) ^ (m2 < 0))
    bf8a:	404a      	eors	r2, r1
        mult = 1 - mult;
    bf8c:	bf47      	ittee	mi
    bf8e:	9e01      	ldrmi	r6, [sp, #4]
    bf90:	9f06      	ldrmi	r7, [sp, #24]
    q63_t mult = 1 << 30;
    bf92:	f04f 4680 	movpl.w	r6, #1073741824	; 0x40000000
    bf96:	2700      	movpl	r7, #0
    mult = mult + (q63_t)m1 * m2;
    bf98:	f8df 8148 	ldr.w	r8, [pc, #328]	; c0e4 <arm_softmax_s8+0x420>
    bf9c:	fba2 0108 	umull	r0, r1, r2, r8
    bfa0:	17d5      	asrs	r5, r2, #31
    bfa2:	fb08 1105 	mla	r1, r8, r5, r1
    bfa6:	1980      	adds	r0, r0, r6
    bfa8:	4179      	adcs	r1, r7
    result = (int32_t) (mult / (1ll << 31));
    bfaa:	4604      	mov	r4, r0
    bfac:	460d      	mov	r5, r1
    bfae:	2800      	cmp	r0, #0
    bfb0:	f171 0600 	sbcs.w	r6, r1, #0
    bfb4:	f2c0 811a 	blt.w	c1ec <arm_softmax_s8+0x528>
    bfb8:	0fe1      	lsrs	r1, r4, #31
    bfba:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    SELECT_IF_NON_ZERO(720401)
    bfbe:	ea0c 0c01 	and.w	ip, ip, r1
    bfc2:	f10e 3eff 	add.w	lr, lr, #4294967295
    bfc6:	ea0e 0202 	and.w	r2, lr, r2
    SELECT_IF_NON_ZERO(242)
    bfca:	f3c3 7380 	ubfx	r3, r3, #30, #1
    bfce:	425e      	negs	r6, r3
    if ((m1 < 0) ^ (m2 < 0))
    bfd0:	ea9c 0202 	eors.w	r2, ip, r2
        mult = 1 - mult;
    bfd4:	bf47      	ittee	mi
    bfd6:	f8dd 8004 	ldrmi.w	r8, [sp, #4]
    bfda:	f8dd 9018 	ldrmi.w	r9, [sp, #24]
    q63_t mult = 1 << 30;
    bfde:	f04f 4880 	movpl.w	r8, #1073741824	; 0x40000000
    bfe2:	f04f 0900 	movpl.w	r9, #0
    mult = mult + (q63_t)m1 * m2;
    bfe6:	17d5      	asrs	r5, r2, #31
    bfe8:	012f      	lsls	r7, r5, #4
    bfea:	0110      	lsls	r0, r2, #4
    bfec:	ea47 7112 	orr.w	r1, r7, r2, lsr #28
    bff0:	1a80      	subs	r0, r0, r2
    bff2:	eb61 0105 	sbc.w	r1, r1, r5
    bff6:	00cf      	lsls	r7, r1, #3
    bff8:	ea47 7750 	orr.w	r7, r7, r0, lsr #29
    bffc:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
    c000:	eb1e 0002 	adds.w	r0, lr, r2
    c004:	eb47 0105 	adc.w	r1, r7, r5
    c008:	1800      	adds	r0, r0, r0
    c00a:	4149      	adcs	r1, r1
    c00c:	eb10 0008 	adds.w	r0, r0, r8
    c010:	eb41 0109 	adc.w	r1, r1, r9
    result = (int32_t) (mult / (1ll << 31));
    c014:	4604      	mov	r4, r0
    c016:	460d      	mov	r5, r1
    c018:	2800      	cmp	r0, #0
    c01a:	f171 0700 	sbcs.w	r7, r1, #0
    c01e:	f2c0 80eb 	blt.w	c1f8 <arm_softmax_s8+0x534>
    c022:	0fe1      	lsrs	r1, r4, #31
    c024:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    SELECT_IF_NON_ZERO(242)
    c028:	400e      	ands	r6, r1
    c02a:	3b01      	subs	r3, #1
    c02c:	4013      	ands	r3, r2
    mask = MASK_IF_ZERO(val);
    c02e:	9a02      	ldr	r2, [sp, #8]
    c030:	fab2 f082 	clz	r0, r2
    c034:	0940      	lsrs	r0, r0, #5
    SELECT_IF_NON_ZERO(242)
    c036:	4073      	eors	r3, r6
    return SELECT_USING_MASK(mask, Q31_MAX, result);
    c038:	1e42      	subs	r2, r0, #1
    c03a:	4013      	ands	r3, r2
    mask = MASK_IF_ZERO(val);
    c03c:	4240      	negs	r0, r0
    return SELECT_USING_MASK(mask, Q31_MAX, result);
    c03e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    c042:	4043      	eors	r3, r0
    int32_t remainder = remainder_mask & dividend;
    c044:	f3c3 010b 	ubfx	r1, r3, #0, #12
    result = dividend >> exponent;
    c048:	131b      	asrs	r3, r3, #12
        threshold++;
    c04a:	2b00      	cmp	r3, #0
    c04c:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c050:	bfb8      	it	lt
    c052:	f44f 6200 	movlt.w	r2, #2048	; 0x800
    if (remainder > threshold)
    c056:	428a      	cmp	r2, r1
        result++;
    c058:	bfb8      	it	lt
    c05a:	3301      	addlt	r3, #1
        for (col = 0; col < row_size; ++col)
        {
            diff = input[col] - max;
            if (diff >= diff_min)
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
    c05c:	9a07      	ldr	r2, [sp, #28]
    c05e:	441a      	add	r2, r3
    c060:	9207      	str	r2, [sp, #28]
        for (col = 0; col < row_size; ++col)
    c062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c064:	4553      	cmp	r3, sl
    c066:	f000 80cd 	beq.w	c204 <arm_softmax_s8+0x540>
            diff = input[col] - max;
    c06a:	f91a 3b01 	ldrsb.w	r3, [sl], #1
    c06e:	9a08      	ldr	r2, [sp, #32]
    c070:	1a9b      	subs	r3, r3, r2
            if (diff >= diff_min)
    c072:	9a25      	ldr	r2, [sp, #148]	; 0x94
    c074:	4293      	cmp	r3, r2
    c076:	dbf4      	blt.n	c062 <arm_softmax_s8+0x39e>
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
    c078:	9a24      	ldr	r2, [sp, #144]	; 0x90
    c07a:	4093      	lsls	r3, r2
    if ((m1 < 0) ^ (m2 < 0))
    c07c:	ea4f 72db 	mov.w	r2, fp, lsr #31
    c080:	ebb2 7fd3 	cmp.w	r2, r3, lsr #31
        mult = 1 - mult;
    c084:	bf19      	ittee	ne
    c086:	9c01      	ldrne	r4, [sp, #4]
    c088:	9d06      	ldrne	r5, [sp, #24]
    q63_t mult = 1 << 30;
    c08a:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
    c08e:	2500      	moveq	r5, #0
    mult = mult + (q63_t)m1 * m2;
    c090:	4658      	mov	r0, fp
    c092:	17c1      	asrs	r1, r0, #31
    c094:	fb03 f201 	mul.w	r2, r3, r1
    c098:	17d9      	asrs	r1, r3, #31
    c09a:	fb0b 2201 	mla	r2, fp, r1, r2
    c09e:	fba3 010b 	umull	r0, r1, r3, fp
    c0a2:	4411      	add	r1, r2
    c0a4:	1900      	adds	r0, r0, r4
    c0a6:	4169      	adcs	r1, r5
    result = (int32_t) (mult / (1ll << 31));
    c0a8:	4604      	mov	r4, r0
    c0aa:	460d      	mov	r5, r1
    c0ac:	2800      	cmp	r0, #0
    c0ae:	f171 0200 	sbcs.w	r2, r1, #0
    c0b2:	f6ff ae20 	blt.w	bcf6 <arm_softmax_s8+0x32>
    c0b6:	0fe2      	lsrs	r2, r4, #31
    c0b8:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    c0bc:	9202      	str	r2, [sp, #8]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    c0be:	455b      	cmp	r3, fp
    c0c0:	f43f ae1f 	beq.w	bd02 <arm_softmax_s8+0x3e>
    c0c4:	e010      	b.n	c0e8 <arm_softmax_s8+0x424>
    c0c6:	bf00      	nop
    c0c8:	2aaaaaab 	.word	0x2aaaaaab
    c0cc:	70f5a894 	.word	0x70f5a894
    c0d0:	63afbe7b 	.word	0x63afbe7b
    c0d4:	4da2cbf2 	.word	0x4da2cbf2
    c0d8:	2f16ac6c 	.word	0x2f16ac6c
    c0dc:	1152aaa4 	.word	0x1152aaa4
    c0e0:	02582ab7 	.word	0x02582ab7
    c0e4:	000afe11 	.word	0x000afe11
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
    c0e8:	9902      	ldr	r1, [sp, #8]
    c0ea:	f041 427f 	orr.w	r2, r1, #4278190080	; 0xff000000
    const int32_t remainder             = val_mod_minus_quarter - val;
    c0ee:	1a53      	subs	r3, r2, r1
    const int32_t x                     = (val_mod_minus_quarter << 5) + (1 << 28);
    c0f0:	0152      	lsls	r2, r2, #5
    c0f2:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
    mult = mult + (q63_t)m1 * m2;
    c0f6:	4690      	mov	r8, r2
    c0f8:	ea4f 79e2 	mov.w	r9, r2, asr #31
    c0fc:	fb02 f409 	mul.w	r4, r2, r9
    c100:	fba2 0102 	umull	r0, r1, r2, r2
    c104:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    c108:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    c10c:	f141 0100 	adc.w	r1, r1, #0
    result = (int32_t) (mult / (1ll << 31));
    c110:	4604      	mov	r4, r0
    c112:	460d      	mov	r5, r1
    c114:	2800      	cmp	r0, #0
    c116:	f171 0600 	sbcs.w	r6, r1, #0
    c11a:	f6ff ae04 	blt.w	bd26 <arm_softmax_s8+0x62>
    c11e:	ea4f 7ed4 	mov.w	lr, r4, lsr #31
    c122:	ea4e 0e45 	orr.w	lr, lr, r5, lsl #1
    mult = mult + (q63_t)m1 * m2;
    c126:	4670      	mov	r0, lr
    c128:	17c1      	asrs	r1, r0, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    c12a:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c12e:	f43f ae0d 	beq.w	bd4c <arm_softmax_s8+0x88>
    mult = mult + (q63_t)m1 * m2;
    c132:	fb00 f601 	mul.w	r6, r0, r1
    c136:	fba0 4500 	umull	r4, r5, r0, r0
    c13a:	eb05 0546 	add.w	r5, r5, r6, lsl #1
    c13e:	f114 4480 	adds.w	r4, r4, #1073741824	; 0x40000000
    c142:	f145 0500 	adc.w	r5, r5, #0
    result = (int32_t) (mult / (1ll << 31));
    c146:	4626      	mov	r6, r4
    c148:	462f      	mov	r7, r5
    c14a:	2c00      	cmp	r4, #0
    c14c:	f175 0c00 	sbcs.w	ip, r5, #0
    c150:	f6ff adef 	blt.w	bd32 <arm_softmax_s8+0x6e>
    c154:	0ff6      	lsrs	r6, r6, #31
    c156:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
    int32_t remainder = remainder_mask & dividend;
    c15a:	f006 0403 	and.w	r4, r6, #3
    result = dividend >> exponent;
    c15e:	10b6      	asrs	r6, r6, #2
        threshold++;
    c160:	2e00      	cmp	r6, #0
    c162:	bfac      	ite	ge
    c164:	2501      	movge	r5, #1
    c166:	2502      	movlt	r5, #2
    if (remainder > threshold)
    c168:	42ac      	cmp	r4, r5
    c16a:	f77f adf2 	ble.w	bd52 <arm_softmax_s8+0x8e>
    c16e:	e5ef      	b.n	bd50 <arm_softmax_s8+0x8c>
    result = (int32_t) (mult / (1ll << 31));
    c170:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c174:	2500      	movs	r5, #0
    c176:	1824      	adds	r4, r4, r0
    c178:	414d      	adcs	r5, r1
    c17a:	e603      	b.n	bd84 <arm_softmax_s8+0xc0>
    c17c:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    c180:	2700      	movs	r7, #0
    c182:	1836      	adds	r6, r6, r0
    c184:	414f      	adcs	r7, r1
    c186:	e618      	b.n	bdba <arm_softmax_s8+0xf6>
    c188:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    c18c:	2700      	movs	r7, #0
    c18e:	1836      	adds	r6, r6, r0
    c190:	414f      	adcs	r7, r1
    c192:	e635      	b.n	be00 <arm_softmax_s8+0x13c>
        mult = 1 - mult;
    c194:	9a01      	ldr	r2, [sp, #4]
    c196:	9204      	str	r2, [sp, #16]
    c198:	9a06      	ldr	r2, [sp, #24]
    c19a:	9205      	str	r2, [sp, #20]
    c19c:	e63f      	b.n	be1e <arm_softmax_s8+0x15a>
    result = (int32_t) (mult / (1ll << 31));
    c19e:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
    c1a2:	f04f 0900 	mov.w	r9, #0
    c1a6:	eb18 0806 	adds.w	r8, r8, r6
    c1aa:	eb49 0907 	adc.w	r9, r9, r7
    c1ae:	e64b      	b.n	be48 <arm_softmax_s8+0x184>
    c1b0:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
    c1b4:	f04f 0900 	mov.w	r9, #0
    c1b8:	eb18 0806 	adds.w	r8, r8, r6
    c1bc:	eb49 0907 	adc.w	r9, r9, r7
    c1c0:	e664      	b.n	be8c <arm_softmax_s8+0x1c8>
    c1c2:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
    c1c6:	f04f 0900 	mov.w	r9, #0
    c1ca:	eb18 0806 	adds.w	r8, r8, r6
    c1ce:	eb49 0907 	adc.w	r9, r9, r7
    c1d2:	e67e      	b.n	bed2 <arm_softmax_s8+0x20e>
    c1d4:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    c1d8:	2700      	movs	r7, #0
    c1da:	1936      	adds	r6, r6, r4
    c1dc:	416f      	adcs	r7, r5
    c1de:	e69f      	b.n	bf20 <arm_softmax_s8+0x25c>
    c1e0:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    c1e4:	2700      	movs	r7, #0
    c1e6:	1936      	adds	r6, r6, r4
    c1e8:	416f      	adcs	r7, r5
    c1ea:	e6c1      	b.n	bf70 <arm_softmax_s8+0x2ac>
    c1ec:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c1f0:	2500      	movs	r5, #0
    c1f2:	1824      	adds	r4, r4, r0
    c1f4:	414d      	adcs	r5, r1
    c1f6:	e6df      	b.n	bfb8 <arm_softmax_s8+0x2f4>
    c1f8:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c1fc:	2500      	movs	r5, #0
    c1fe:	1824      	adds	r4, r4, r0
    c200:	414d      	adcs	r5, r1
    c202:	e70e      	b.n	c022 <arm_softmax_s8+0x35e>
    c204:	f8dd a020 	ldr.w	sl, [sp, #32]
    c208:	9a07      	ldr	r2, [sp, #28]
    c20a:	fab2 f182 	clz	r1, r2
            }
        }

        const int32_t headroom = __CLZ(sum);
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
    c20e:	f1c1 0323 	rsb	r3, r1, #35	; 0x23
    c212:	930d      	str	r3, [sp, #52]	; 0x34
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
    c214:	fa02 f101 	lsl.w	r1, r2, r1
    c218:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    return result;
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
    c21c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    c220:	2300      	movs	r3, #0
    c222:	1852      	adds	r2, r2, r1
    c224:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
    c228:	2a00      	cmp	r2, #0
    c22a:	f173 0100 	sbcs.w	r1, r3, #0
    c22e:	bfb9      	ittee	lt
    c230:	f04f 30ff 	movlt.w	r0, #4294967295
    c234:	f04f 31ff 	movlt.w	r1, #4294967295
    c238:	2001      	movge	r0, #1
    c23a:	2100      	movge	r1, #0
    c23c:	1880      	adds	r0, r0, r2
    c23e:	4159      	adcs	r1, r3
    c240:	0fcc      	lsrs	r4, r1, #31
    c242:	1900      	adds	r0, r0, r4
    c244:	f141 0100 	adc.w	r1, r1, #0
    c248:	1049      	asrs	r1, r1, #1
    c24a:	ea4f 0030 	mov.w	r0, r0, rrx
    c24e:	4602      	mov	r2, r0
    if ((m1 < 0) ^ (m2 < 0))
    c250:	2800      	cmp	r0, #0
    c252:	f2c0 817b 	blt.w	c54c <arm_softmax_s8+0x888>
        mult = 1 - mult;
    c256:	4cc5      	ldr	r4, [pc, #788]	; (c56c <arm_softmax_s8+0x8a8>)
    c258:	f04f 35ff 	mov.w	r5, #4294967295
    mult = mult + (q63_t)m1 * m2;
    c25c:	4690      	mov	r8, r2
    c25e:	ea4f 79e2 	mov.w	r9, r2, asr #31
    c262:	48c3      	ldr	r0, [pc, #780]	; (c570 <arm_softmax_s8+0x8ac>)
    c264:	4253      	negs	r3, r2
    c266:	fb00 3309 	mla	r3, r0, r9, r3
    c26a:	fba2 0100 	umull	r0, r1, r2, r0
    c26e:	4419      	add	r1, r3
    c270:	1900      	adds	r0, r0, r4
    c272:	4169      	adcs	r1, r5
    result = (int32_t) (mult / (1ll << 31));
    c274:	4604      	mov	r4, r0
    c276:	460d      	mov	r5, r1
    c278:	2800      	cmp	r0, #0
    c27a:	f171 0300 	sbcs.w	r3, r1, #0
    c27e:	f2c0 8169 	blt.w	c554 <arm_softmax_s8+0x890>
    c282:	0fe3      	lsrs	r3, r4, #31
    c284:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
    c288:	f103 335a 	add.w	r3, r3, #1515870810	; 0x5a5a5a5a
    if ((m1 < 0) ^ (m2 < 0))
    c28c:	ea4f 7ed2 	mov.w	lr, r2, lsr #31
    c290:	0fde      	lsrs	r6, r3, #31
    c292:	45b6      	cmp	lr, r6
    c294:	f000 8164 	beq.w	c560 <arm_softmax_s8+0x89c>
        mult = 1 - mult;
    c298:	49b4      	ldr	r1, [pc, #720]	; (c56c <arm_softmax_s8+0x8a8>)
    c29a:	9102      	str	r1, [sp, #8]
    c29c:	f04f 31ff 	mov.w	r1, #4294967295
    c2a0:	9103      	str	r1, [sp, #12]
    mult = mult + (q63_t)m1 * m2;
    c2a2:	4618      	mov	r0, r3
    c2a4:	17d9      	asrs	r1, r3, #31
    c2a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
    c2aa:	fb08 f401 	mul.w	r4, r8, r1
    c2ae:	fb03 4409 	mla	r4, r3, r9, r4
    c2b2:	fba8 0103 	umull	r0, r1, r8, r3
    c2b6:	4421      	add	r1, r4
    c2b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    c2bc:	1824      	adds	r4, r4, r0
    c2be:	414d      	adcs	r5, r1
    c2c0:	4620      	mov	r0, r4
    c2c2:	4629      	mov	r1, r5
    result = (int32_t) (mult / (1ll << 31));
    c2c4:	2c00      	cmp	r4, #0
    c2c6:	f175 0700 	sbcs.w	r7, r5, #0
    c2ca:	f2c0 8155 	blt.w	c578 <arm_softmax_s8+0x8b4>
    c2ce:	0fe0      	lsrs	r0, r4, #31
    c2d0:	ea40 0045 	orr.w	r0, r0, r5, lsl #1

    const int32_t shift = (1 << 29);
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    c2d4:	f1c0 5000 	rsb	r0, r0, #536870912	; 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
    c2d8:	ebb6 7fd0 	cmp.w	r6, r0, lsr #31
        mult = 1 - mult;
    c2dc:	bf19      	ittee	ne
    c2de:	4ea3      	ldrne	r6, [pc, #652]	; (c56c <arm_softmax_s8+0x8a8>)
    c2e0:	f04f 37ff 	movne.w	r7, #4294967295
    q63_t mult = 1 << 30;
    c2e4:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
    c2e8:	2700      	moveq	r7, #0
    mult = mult + (q63_t)m1 * m2;
    c2ea:	17c5      	asrs	r5, r0, #31
    c2ec:	9905      	ldr	r1, [sp, #20]
    c2ee:	fb00 f101 	mul.w	r1, r0, r1
    c2f2:	fb03 1405 	mla	r4, r3, r5, r1
    c2f6:	fba0 0103 	umull	r0, r1, r0, r3
    c2fa:	4421      	add	r1, r4
    c2fc:	1980      	adds	r0, r0, r6
    c2fe:	4179      	adcs	r1, r7
    result = (int32_t) (mult / (1ll << 31));
    c300:	4604      	mov	r4, r0
    c302:	460d      	mov	r5, r1
    c304:	2800      	cmp	r0, #0
    c306:	f171 0600 	sbcs.w	r6, r1, #0
    c30a:	f2c0 813b 	blt.w	c584 <arm_softmax_s8+0x8c0>
    c30e:	0fe0      	lsrs	r0, r4, #31
    c310:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    c314:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    c318:	bfac      	ite	ge
    c31a:	f06f 4400 	mvnge.w	r4, #2147483648	; 0x80000000
    c31e:	2400      	movlt	r4, #0
    c320:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    c324:	f04f 31ff 	mov.w	r1, #4294967295
    c328:	bfa8      	it	ge
    c32a:	2100      	movge	r1, #0
    c32c:	ea01 0180 	and.w	r1, r1, r0, lsl #2
    c330:	4061      	eors	r1, r4
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    c332:	4c90      	ldr	r4, [pc, #576]	; (c574 <arm_softmax_s8+0x8b0>)
    c334:	42a0      	cmp	r0, r4
    c336:	bfb4      	ite	lt
    c338:	f04f 4400 	movlt.w	r4, #2147483648	; 0x80000000
    c33c:	2400      	movge	r4, #0
    c33e:	4d8d      	ldr	r5, [pc, #564]	; (c574 <arm_softmax_s8+0x8b0>)
    c340:	42a8      	cmp	r0, r5
    c342:	bfb8      	it	lt
    c344:	2100      	movlt	r1, #0
    c346:	4061      	eors	r1, r4
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    c348:	440b      	add	r3, r1
    if ((m1 < 0) ^ (m2 < 0))
    c34a:	0fdf      	lsrs	r7, r3, #31
    c34c:	45be      	cmp	lr, r7
        mult = 1 - mult;
    c34e:	bf19      	ittee	ne
    c350:	4c86      	ldrne	r4, [pc, #536]	; (c56c <arm_softmax_s8+0x8a8>)
    c352:	f04f 35ff 	movne.w	r5, #4294967295
    q63_t mult = 1 << 30;
    c356:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
    c35a:	2500      	moveq	r5, #0
    mult = mult + (q63_t)m1 * m2;
    c35c:	4618      	mov	r0, r3
    c35e:	17d9      	asrs	r1, r3, #31
    c360:	e9cd 0104 	strd	r0, r1, [sp, #16]
    c364:	fb08 f601 	mul.w	r6, r8, r1
    c368:	fb03 6609 	mla	r6, r3, r9, r6
    c36c:	fba8 0103 	umull	r0, r1, r8, r3
    c370:	4431      	add	r1, r6
    c372:	1900      	adds	r0, r0, r4
    c374:	4169      	adcs	r1, r5
    result = (int32_t) (mult / (1ll << 31));
    c376:	4604      	mov	r4, r0
    c378:	460d      	mov	r5, r1
    c37a:	2800      	cmp	r0, #0
    c37c:	f171 0600 	sbcs.w	r6, r1, #0
    c380:	f2c0 8106 	blt.w	c590 <arm_softmax_s8+0x8cc>
    c384:	0fe6      	lsrs	r6, r4, #31
    c386:	ea46 0645 	orr.w	r6, r6, r5, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    c38a:	4293      	cmp	r3, r2
    c38c:	f000 8106 	beq.w	c59c <arm_softmax_s8+0x8d8>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    c390:	f1c6 5600 	rsb	r6, r6, #536870912	; 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
    c394:	ebb7 7fd6 	cmp.w	r7, r6, lsr #31
    c398:	f000 812a 	beq.w	c5f0 <arm_softmax_s8+0x92c>
        mult = 1 - mult;
    c39c:	4973      	ldr	r1, [pc, #460]	; (c56c <arm_softmax_s8+0x8a8>)
    c39e:	9102      	str	r1, [sp, #8]
    c3a0:	f04f 31ff 	mov.w	r1, #4294967295
    c3a4:	9103      	str	r1, [sp, #12]
    mult = mult + (q63_t)m1 * m2;
    c3a6:	9c05      	ldr	r4, [sp, #20]
    c3a8:	fb06 f404 	mul.w	r4, r6, r4
    c3ac:	17f1      	asrs	r1, r6, #31
    c3ae:	fb03 4401 	mla	r4, r3, r1, r4
    c3b2:	fba6 0103 	umull	r0, r1, r6, r3
    c3b6:	4421      	add	r1, r4
    c3b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    c3bc:	1824      	adds	r4, r4, r0
    c3be:	414d      	adcs	r5, r1
    c3c0:	4620      	mov	r0, r4
    c3c2:	4629      	mov	r1, r5
    result = (int32_t) (mult / (1ll << 31));
    c3c4:	2c00      	cmp	r4, #0
    c3c6:	f175 0700 	sbcs.w	r7, r5, #0
    c3ca:	f2c0 8117 	blt.w	c5fc <arm_softmax_s8+0x938>
    c3ce:	0fe0      	lsrs	r0, r4, #31
    c3d0:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    c3d4:	42b3      	cmp	r3, r6
    c3d6:	f000 8117 	beq.w	c608 <arm_softmax_s8+0x944>
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    c3da:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    c3de:	bfac      	ite	ge
    c3e0:	f06f 4400 	mvnge.w	r4, #2147483648	; 0x80000000
    c3e4:	2400      	movlt	r4, #0
    c3e6:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    c3ea:	f04f 31ff 	mov.w	r1, #4294967295
    c3ee:	bfa8      	it	ge
    c3f0:	2100      	movge	r1, #0
    c3f2:	ea01 0180 	and.w	r1, r1, r0, lsl #2
    c3f6:	4061      	eors	r1, r4
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    c3f8:	4c5e      	ldr	r4, [pc, #376]	; (c574 <arm_softmax_s8+0x8b0>)
    c3fa:	42a0      	cmp	r0, r4
    c3fc:	bfb4      	ite	lt
    c3fe:	f04f 4400 	movlt.w	r4, #2147483648	; 0x80000000
    c402:	2400      	movge	r4, #0
    c404:	4d5b      	ldr	r5, [pc, #364]	; (c574 <arm_softmax_s8+0x8b0>)
    c406:	42a8      	cmp	r0, r5
    c408:	bfb8      	it	lt
    c40a:	2100      	movlt	r1, #0
    c40c:	4061      	eors	r1, r4
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    c40e:	440b      	add	r3, r1
    if ((m1 < 0) ^ (m2 < 0))
    c410:	0fde      	lsrs	r6, r3, #31
    c412:	45b6      	cmp	lr, r6
        mult = 1 - mult;
    c414:	bf19      	ittee	ne
    c416:	4c55      	ldrne	r4, [pc, #340]	; (c56c <arm_softmax_s8+0x8a8>)
    c418:	f04f 35ff 	movne.w	r5, #4294967295
    q63_t mult = 1 << 30;
    c41c:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
    c420:	2500      	moveq	r5, #0
    mult = mult + (q63_t)m1 * m2;
    c422:	4618      	mov	r0, r3
    c424:	17d9      	asrs	r1, r3, #31
    c426:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c42a:	fb08 f701 	mul.w	r7, r8, r1
    c42e:	fb03 7709 	mla	r7, r3, r9, r7
    c432:	fba8 0103 	umull	r0, r1, r8, r3
    c436:	4439      	add	r1, r7
    c438:	1900      	adds	r0, r0, r4
    c43a:	4169      	adcs	r1, r5
    result = (int32_t) (mult / (1ll << 31));
    c43c:	4604      	mov	r4, r0
    c43e:	460d      	mov	r5, r1
    c440:	2800      	cmp	r0, #0
    c442:	f171 0700 	sbcs.w	r7, r1, #0
    c446:	f2c0 80e8 	blt.w	c61a <arm_softmax_s8+0x956>
    c44a:	0fe1      	lsrs	r1, r4, #31
    c44c:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    c450:	4293      	cmp	r3, r2
    c452:	f000 80e8 	beq.w	c626 <arm_softmax_s8+0x962>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    c456:	f1c1 5200 	rsb	r2, r1, #536870912	; 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
    c45a:	ebb6 7fd2 	cmp.w	r6, r2, lsr #31
        mult = 1 - mult;
    c45e:	bf19      	ittee	ne
    c460:	4c42      	ldrne	r4, [pc, #264]	; (c56c <arm_softmax_s8+0x8a8>)
    c462:	f04f 35ff 	movne.w	r5, #4294967295
    q63_t mult = 1 << 30;
    c466:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
    c46a:	2500      	moveq	r5, #0
    mult = mult + (q63_t)m1 * m2;
    c46c:	9e03      	ldr	r6, [sp, #12]
    c46e:	fb02 f606 	mul.w	r6, r2, r6
    c472:	17d1      	asrs	r1, r2, #31
    c474:	fb03 6601 	mla	r6, r3, r1, r6
    c478:	fba2 0103 	umull	r0, r1, r2, r3
    c47c:	4431      	add	r1, r6
    c47e:	1900      	adds	r0, r0, r4
    c480:	4169      	adcs	r1, r5
    result = (int32_t) (mult / (1ll << 31));
    c482:	4604      	mov	r4, r0
    c484:	460d      	mov	r5, r1
    c486:	2800      	cmp	r0, #0
    c488:	f171 0600 	sbcs.w	r6, r1, #0
    c48c:	f2c0 80f4 	blt.w	c678 <arm_softmax_s8+0x9b4>
    c490:	0fe1      	lsrs	r1, r4, #31
    c492:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    c496:	4293      	cmp	r3, r2
    c498:	f000 80f4 	beq.w	c684 <arm_softmax_s8+0x9c0>
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    c49c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    c4a0:	bfac      	ite	ge
    c4a2:	f06f 4000 	mvnge.w	r0, #2147483648	; 0x80000000
    c4a6:	2000      	movlt	r0, #0
    c4a8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    c4ac:	f04f 32ff 	mov.w	r2, #4294967295
    c4b0:	bfa8      	it	ge
    c4b2:	2200      	movge	r2, #0
    c4b4:	ea02 0281 	and.w	r2, r2, r1, lsl #2
    c4b8:	4042      	eors	r2, r0
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    c4ba:	482e      	ldr	r0, [pc, #184]	; (c574 <arm_softmax_s8+0x8b0>)
    c4bc:	4281      	cmp	r1, r0
    c4be:	bfb4      	ite	lt
    c4c0:	f04f 4000 	movlt.w	r0, #2147483648	; 0x80000000
    c4c4:	2000      	movge	r0, #0
    c4c6:	4c2b      	ldr	r4, [pc, #172]	; (c574 <arm_softmax_s8+0x8b0>)
    c4c8:	42a1      	cmp	r1, r4
    c4ca:	bfb8      	it	lt
    c4cc:	2200      	movlt	r2, #0
    c4ce:	4042      	eors	r2, r0
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    c4d0:	4413      	add	r3, r2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    c4d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    c4d6:	bfac      	ite	ge
    c4d8:	f06f 4200 	mvnge.w	r2, #2147483648	; 0x80000000
    c4dc:	2200      	movlt	r2, #0
    c4de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    c4e2:	f04f 30ff 	mov.w	r0, #4294967295
    c4e6:	bfa8      	it	ge
    c4e8:	2000      	movge	r0, #0
    c4ea:	ea00 0043 	and.w	r0, r0, r3, lsl #1
    c4ee:	4050      	eors	r0, r2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    c4f0:	4a1e      	ldr	r2, [pc, #120]	; (c56c <arm_softmax_s8+0x8a8>)
    c4f2:	4293      	cmp	r3, r2
    c4f4:	bfb4      	ite	lt
    c4f6:	f04f 4200 	movlt.w	r2, #2147483648	; 0x80000000
    c4fa:	2200      	movge	r2, #0
    c4fc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
    c500:	bfcc      	ite	gt
    c502:	4603      	movgt	r3, r0
    c504:	2300      	movle	r3, #0
    c506:	4053      	eors	r3, r2
    c508:	9304      	str	r3, [sp, #16]

        for (col = 0; col < row_size; ++col)
    c50a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c50c:	2b00      	cmp	r3, #0
    c50e:	f340 838d 	ble.w	cc2c <arm_softmax_s8+0xf68>
    const q31_t remainder_mask = (1 << exponent) - 1;
    c512:	2301      	movs	r3, #1
    c514:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c516:	4093      	lsls	r3, r2
    c518:	3b01      	subs	r3, #1
    c51a:	930e      	str	r3, [sp, #56]	; 0x38
    q31_t threshold = remainder_mask >> 1;
    c51c:	105b      	asrs	r3, r3, #1
    c51e:	930f      	str	r3, [sp, #60]	; 0x3c
        threshold++;
    c520:	3301      	adds	r3, #1
    c522:	9310      	str	r3, [sp, #64]	; 0x40
    c524:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c526:	3b02      	subs	r3, #2
    c528:	9302      	str	r3, [sp, #8]
    c52a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    c52c:	461a      	mov	r2, r3
    c52e:	9914      	ldr	r1, [sp, #80]	; 0x50
    c530:	440a      	add	r2, r1
    c532:	920b      	str	r2, [sp, #44]	; 0x2c
    mult = mult + (q63_t)m1 * m2;
    c534:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
    c538:	469a      	mov	sl, r3
    c53a:	e139      	b.n	c7b0 <arm_softmax_s8+0xaec>
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
    c53c:	2303      	movs	r3, #3
    c53e:	930d      	str	r3, [sp, #52]	; 0x34
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
    c540:	f04f 32ff 	mov.w	r2, #4294967295
    q63_t mult = 1 << 30;
    c544:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    c548:	2500      	movs	r5, #0
    c54a:	e687      	b.n	c25c <arm_softmax_s8+0x598>
    c54c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    c550:	2500      	movs	r5, #0
    c552:	e683      	b.n	c25c <arm_softmax_s8+0x598>
    result = (int32_t) (mult / (1ll << 31));
    c554:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c558:	2500      	movs	r5, #0
    c55a:	1824      	adds	r4, r4, r0
    c55c:	414d      	adcs	r5, r1
    c55e:	e690      	b.n	c282 <arm_softmax_s8+0x5be>
    q63_t mult = 1 << 30;
    c560:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c564:	2100      	movs	r1, #0
    c566:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c56a:	e69a      	b.n	c2a2 <arm_softmax_s8+0x5de>
    c56c:	c0000001 	.word	0xc0000001
    c570:	c3c3c3c4 	.word	0xc3c3c3c4
    c574:	e0000001 	.word	0xe0000001
    result = (int32_t) (mult / (1ll << 31));
    c578:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c57c:	2500      	movs	r5, #0
    c57e:	1824      	adds	r4, r4, r0
    c580:	414d      	adcs	r5, r1
    c582:	e6a4      	b.n	c2ce <arm_softmax_s8+0x60a>
    c584:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c588:	2500      	movs	r5, #0
    c58a:	1824      	adds	r4, r4, r0
    c58c:	414d      	adcs	r5, r1
    c58e:	e6be      	b.n	c30e <arm_softmax_s8+0x64a>
    c590:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c594:	2500      	movs	r5, #0
    c596:	1824      	adds	r4, r4, r0
    c598:	414d      	adcs	r5, r1
    c59a:	e6f3      	b.n	c384 <arm_softmax_s8+0x6c0>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    c59c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c5a0:	f47f aef6 	bne.w	c390 <arm_softmax_s8+0x6cc>
    mult = mult + (q63_t)m1 * m2;
    c5a4:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    c5a8:	00a9      	lsls	r1, r5, #2
    c5aa:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
    c5ae:	9117      	str	r1, [sp, #92]	; 0x5c
    c5b0:	0099      	lsls	r1, r3, #2
    c5b2:	9116      	str	r1, [sp, #88]	; 0x58
    c5b4:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    c5b8:	1ba4      	subs	r4, r4, r6
    c5ba:	eb65 0507 	sbc.w	r5, r5, r7
    c5be:	0769      	lsls	r1, r5, #29
    c5c0:	ea41 01d4 	orr.w	r1, r1, r4, lsr #3
    c5c4:	0760      	lsls	r0, r4, #29
    c5c6:	4604      	mov	r4, r0
    c5c8:	460d      	mov	r5, r1
    c5ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    c5ce:	1900      	adds	r0, r0, r4
    c5d0:	4169      	adcs	r1, r5
    c5d2:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    c5d6:	f141 0100 	adc.w	r1, r1, #0
    result = (int32_t) (mult / (1ll << 31));
    c5da:	4604      	mov	r4, r0
    c5dc:	460d      	mov	r5, r1
    c5de:	2800      	cmp	r0, #0
    c5e0:	f171 0600 	sbcs.w	r6, r1, #0
    c5e4:	f2c0 8353 	blt.w	cc8e <arm_softmax_s8+0xfca>
    c5e8:	0fe0      	lsrs	r0, r4, #31
    c5ea:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    c5ee:	e6f4      	b.n	c3da <arm_softmax_s8+0x716>
    q63_t mult = 1 << 30;
    c5f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c5f4:	2100      	movs	r1, #0
    c5f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c5fa:	e6d4      	b.n	c3a6 <arm_softmax_s8+0x6e2>
    result = (int32_t) (mult / (1ll << 31));
    c5fc:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c600:	2500      	movs	r5, #0
    c602:	1824      	adds	r4, r4, r0
    c604:	414d      	adcs	r5, r1
    c606:	e6e2      	b.n	c3ce <arm_softmax_s8+0x70a>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    c608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    c60c:	f47f aee5 	bne.w	c3da <arm_softmax_s8+0x716>
        result = Q31_MAX;
    c610:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    c614:	4601      	mov	r1, r0
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    c616:	2400      	movs	r4, #0
    c618:	e6f4      	b.n	c404 <arm_softmax_s8+0x740>
    result = (int32_t) (mult / (1ll << 31));
    c61a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c61e:	2500      	movs	r5, #0
    c620:	1824      	adds	r4, r4, r0
    c622:	414d      	adcs	r5, r1
    c624:	e711      	b.n	c44a <arm_softmax_s8+0x786>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    c626:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c62a:	f47f af14 	bne.w	c456 <arm_softmax_s8+0x792>
    mult = mult + (q63_t)m1 * m2;
    c62e:	e9dd 7802 	ldrd	r7, r8, [sp, #8]
    c632:	4642      	mov	r2, r8
    c634:	0092      	lsls	r2, r2, #2
    c636:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    c63a:	9219      	str	r2, [sp, #100]	; 0x64
    c63c:	009a      	lsls	r2, r3, #2
    c63e:	9218      	str	r2, [sp, #96]	; 0x60
    c640:	e9dd 5618 	ldrd	r5, r6, [sp, #96]	; 0x60
    c644:	1b78      	subs	r0, r7, r5
    c646:	eb68 0106 	sbc.w	r1, r8, r6
    c64a:	074a      	lsls	r2, r1, #29
    c64c:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
    c650:	0744      	lsls	r4, r0, #29
    c652:	4620      	mov	r0, r4
    c654:	183c      	adds	r4, r7, r0
    c656:	eb48 0502 	adc.w	r5, r8, r2
    c65a:	f114 4080 	adds.w	r0, r4, #1073741824	; 0x40000000
    c65e:	f145 0100 	adc.w	r1, r5, #0
    result = (int32_t) (mult / (1ll << 31));
    c662:	4604      	mov	r4, r0
    c664:	460d      	mov	r5, r1
    c666:	2800      	cmp	r0, #0
    c668:	f171 0200 	sbcs.w	r2, r1, #0
    c66c:	f2c0 8315 	blt.w	cc9a <arm_softmax_s8+0xfd6>
    c670:	0fe1      	lsrs	r1, r4, #31
    c672:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    c676:	e711      	b.n	c49c <arm_softmax_s8+0x7d8>
    c678:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c67c:	2500      	movs	r5, #0
    c67e:	1824      	adds	r4, r4, r0
    c680:	414d      	adcs	r5, r1
    c682:	e705      	b.n	c490 <arm_softmax_s8+0x7cc>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    c684:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    c688:	f47f af08 	bne.w	c49c <arm_softmax_s8+0x7d8>
        result = Q31_MAX;
    c68c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    c690:	460a      	mov	r2, r1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    c692:	2000      	movs	r0, #0
    c694:	e717      	b.n	c4c6 <arm_softmax_s8+0x802>
    result = (int32_t) (mult / (1ll << 31));
    c696:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c69a:	2500      	movs	r5, #0
    c69c:	1824      	adds	r4, r4, r0
    c69e:	414d      	adcs	r5, r1
    c6a0:	e0af      	b.n	c802 <arm_softmax_s8+0xb3e>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    c6a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    c6a6:	f040 80b3 	bne.w	c810 <arm_softmax_s8+0xb4c>
        result = Q31_MAX;
    c6aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    c6ae:	9307      	str	r3, [sp, #28]
    mult = mult + (q63_t)m1 * m2;
    c6b0:	4838      	ldr	r0, [pc, #224]	; (c794 <arm_softmax_s8+0xad0>)
    c6b2:	2100      	movs	r1, #0
    result = (int32_t) (mult / (1ll << 31));
    c6b4:	4686      	mov	lr, r0
    mult = mult + (q63_t)m1 * m2;
    c6b6:	f8df 80e0 	ldr.w	r8, [pc, #224]	; c798 <arm_softmax_s8+0xad4>
    c6ba:	f04f 0900 	mov.w	r9, #0
    const int32_t x                     = (val_mod_minus_quarter << 5) + (1 << 28);
    c6be:	4a36      	ldr	r2, [pc, #216]	; (c798 <arm_softmax_s8+0xad4>)
    const int32_t remainder             = val_mod_minus_quarter - val;
    c6c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c6c4:	e0c9      	b.n	c85a <arm_softmax_s8+0xb96>
    result = (int32_t) (mult / (1ll << 31));
    c6c6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c6ca:	2500      	movs	r5, #0
    c6cc:	1824      	adds	r4, r4, r0
    c6ce:	414d      	adcs	r5, r1
    c6d0:	e0b9      	b.n	c846 <arm_softmax_s8+0xb82>
    c6d2:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    c6d6:	2700      	movs	r7, #0
    c6d8:	1936      	adds	r6, r6, r4
    c6da:	416f      	adcs	r7, r5
    c6dc:	e0ce      	b.n	c87c <arm_softmax_s8+0xbb8>
    result = dividend >> exponent;
    c6de:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
        result++;
    c6e2:	3601      	adds	r6, #1
    c6e4:	e0d7      	b.n	c896 <arm_softmax_s8+0xbd2>
    result = (int32_t) (mult / (1ll << 31));
    c6e6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c6ea:	2500      	movs	r5, #0
    c6ec:	1824      	adds	r4, r4, r0
    c6ee:	414d      	adcs	r5, r1
    c6f0:	e0ea      	b.n	c8c8 <arm_softmax_s8+0xc04>
    c6f2:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    c6f6:	2700      	movs	r7, #0
    c6f8:	1836      	adds	r6, r6, r0
    c6fa:	414f      	adcs	r7, r1
    c6fc:	e0ff      	b.n	c8fe <arm_softmax_s8+0xc3a>
    c6fe:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    c702:	2700      	movs	r7, #0
    c704:	1836      	adds	r6, r6, r0
    c706:	414f      	adcs	r7, r1
    c708:	e11c      	b.n	c944 <arm_softmax_s8+0xc80>
        mult = 1 - mult;
    c70a:	9a01      	ldr	r2, [sp, #4]
    c70c:	9208      	str	r2, [sp, #32]
    c70e:	9a06      	ldr	r2, [sp, #24]
    c710:	9209      	str	r2, [sp, #36]	; 0x24
    c712:	e126      	b.n	c962 <arm_softmax_s8+0xc9e>
    result = (int32_t) (mult / (1ll << 31));
    c714:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
    c718:	f04f 0900 	mov.w	r9, #0
    c71c:	eb18 0806 	adds.w	r8, r8, r6
    c720:	eb49 0907 	adc.w	r9, r9, r7
    c724:	e132      	b.n	c98c <arm_softmax_s8+0xcc8>
    c726:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
    c72a:	f04f 0900 	mov.w	r9, #0
    c72e:	eb18 0806 	adds.w	r8, r8, r6
    c732:	eb49 0907 	adc.w	r9, r9, r7
    c736:	e14b      	b.n	c9d0 <arm_softmax_s8+0xd0c>
    c738:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
    c73c:	f04f 0900 	mov.w	r9, #0
    c740:	eb18 0806 	adds.w	r8, r8, r6
    c744:	eb49 0907 	adc.w	r9, r9, r7
    c748:	e165      	b.n	ca16 <arm_softmax_s8+0xd52>
    c74a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    c74e:	2700      	movs	r7, #0
    c750:	1936      	adds	r6, r6, r4
    c752:	416f      	adcs	r7, r5
    c754:	e186      	b.n	ca64 <arm_softmax_s8+0xda0>
    c756:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    c75a:	2700      	movs	r7, #0
    c75c:	1936      	adds	r6, r6, r4
    c75e:	416f      	adcs	r7, r5
    c760:	e1a8      	b.n	cab4 <arm_softmax_s8+0xdf0>
    c762:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c766:	2500      	movs	r5, #0
    c768:	1824      	adds	r4, r4, r0
    c76a:	414d      	adcs	r5, r1
    c76c:	e1c6      	b.n	cafc <arm_softmax_s8+0xe38>
    c76e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c772:	2500      	movs	r5, #0
    c774:	1824      	adds	r4, r4, r0
    c776:	414d      	adcs	r5, r1
    c778:	e1f5      	b.n	cb66 <arm_softmax_s8+0xea2>
    c77a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c77e:	2500      	movs	r5, #0
    c780:	1824      	adds	r4, r4, r0
    c782:	414d      	adcs	r5, r1
    c784:	e21f      	b.n	cbc6 <arm_softmax_s8+0xf02>
        result = Q31_MAX;
    c786:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    c78a:	bf08      	it	eq
    c78c:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
    c790:	e220      	b.n	cbd4 <arm_softmax_s8+0xf10>
    c792:	bf00      	nop
    c794:	01fffff8 	.word	0x01fffff8
    c798:	0fffffe0 	.word	0x0fffffe0
        {
            diff = input[col] - max;
            if (diff >= diff_min)
            {
                const int32_t res = DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
    c79c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    c7a0:	f88a 3000 	strb.w	r3, [sl]
    c7a4:	f10a 0a01 	add.w	sl, sl, #1
        for (col = 0; col < row_size; ++col)
    c7a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c7aa:	459a      	cmp	sl, r3
    c7ac:	f000 823e 	beq.w	cc2c <arm_softmax_s8+0xf68>
            diff = input[col] - max;
    c7b0:	9a02      	ldr	r2, [sp, #8]
    c7b2:	f912 3f01 	ldrsb.w	r3, [r2, #1]!
    c7b6:	9202      	str	r2, [sp, #8]
    c7b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c7ba:	1a9b      	subs	r3, r3, r2
            if (diff >= diff_min)
    c7bc:	9a25      	ldr	r2, [sp, #148]	; 0x94
    c7be:	429a      	cmp	r2, r3
    c7c0:	f300 8220 	bgt.w	cc04 <arm_softmax_s8+0xf40>
                const int32_t res = DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
    c7c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    c7c6:	4093      	lsls	r3, r2
    if ((m1 < 0) ^ (m2 < 0))
    c7c8:	ea4f 72db 	mov.w	r2, fp, lsr #31
    c7cc:	ebb2 7fd3 	cmp.w	r2, r3, lsr #31
        mult = 1 - mult;
    c7d0:	bf19      	ittee	ne
    c7d2:	9c01      	ldrne	r4, [sp, #4]
    c7d4:	9d06      	ldrne	r5, [sp, #24]
    q63_t mult = 1 << 30;
    c7d6:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
    c7da:	2500      	moveq	r5, #0
    mult = mult + (q63_t)m1 * m2;
    c7dc:	4658      	mov	r0, fp
    c7de:	17c1      	asrs	r1, r0, #31
    c7e0:	fb03 f201 	mul.w	r2, r3, r1
    c7e4:	17d9      	asrs	r1, r3, #31
    c7e6:	fb0b 2201 	mla	r2, fp, r1, r2
    c7ea:	fba3 010b 	umull	r0, r1, r3, fp
    c7ee:	4411      	add	r1, r2
    c7f0:	1900      	adds	r0, r0, r4
    c7f2:	4169      	adcs	r1, r5
    result = (int32_t) (mult / (1ll << 31));
    c7f4:	4604      	mov	r4, r0
    c7f6:	460d      	mov	r5, r1
    c7f8:	2800      	cmp	r0, #0
    c7fa:	f171 0200 	sbcs.w	r2, r1, #0
    c7fe:	f6ff af4a 	blt.w	c696 <arm_softmax_s8+0x9d2>
    c802:	0fe2      	lsrs	r2, r4, #31
    c804:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    c808:	9207      	str	r2, [sp, #28]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    c80a:	459b      	cmp	fp, r3
    c80c:	f43f af49 	beq.w	c6a2 <arm_softmax_s8+0x9de>
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
    c810:	9907      	ldr	r1, [sp, #28]
    c812:	f041 427f 	orr.w	r2, r1, #4278190080	; 0xff000000
    const int32_t remainder             = val_mod_minus_quarter - val;
    c816:	1a53      	subs	r3, r2, r1
    const int32_t x                     = (val_mod_minus_quarter << 5) + (1 << 28);
    c818:	0152      	lsls	r2, r2, #5
    c81a:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
    mult = mult + (q63_t)m1 * m2;
    c81e:	4690      	mov	r8, r2
    c820:	ea4f 79e2 	mov.w	r9, r2, asr #31
    c824:	fb02 f409 	mul.w	r4, r2, r9
    c828:	fba2 0102 	umull	r0, r1, r2, r2
    c82c:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    c830:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    c834:	f141 0100 	adc.w	r1, r1, #0
    result = (int32_t) (mult / (1ll << 31));
    c838:	4604      	mov	r4, r0
    c83a:	460d      	mov	r5, r1
    c83c:	2800      	cmp	r0, #0
    c83e:	f171 0600 	sbcs.w	r6, r1, #0
    c842:	f6ff af40 	blt.w	c6c6 <arm_softmax_s8+0xa02>
    c846:	ea4f 7ed4 	mov.w	lr, r4, lsr #31
    c84a:	ea4e 0e45 	orr.w	lr, lr, r5, lsl #1
    mult = mult + (q63_t)m1 * m2;
    c84e:	4670      	mov	r0, lr
    c850:	17c1      	asrs	r1, r0, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    c852:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c856:	f43f af42 	beq.w	c6de <arm_softmax_s8+0xa1a>
    mult = mult + (q63_t)m1 * m2;
    c85a:	fb00 f601 	mul.w	r6, r0, r1
    c85e:	fba0 4500 	umull	r4, r5, r0, r0
    c862:	eb05 0546 	add.w	r5, r5, r6, lsl #1
    c866:	f114 4480 	adds.w	r4, r4, #1073741824	; 0x40000000
    c86a:	f145 0500 	adc.w	r5, r5, #0
    result = (int32_t) (mult / (1ll << 31));
    c86e:	4626      	mov	r6, r4
    c870:	462f      	mov	r7, r5
    c872:	2c00      	cmp	r4, #0
    c874:	f175 0c00 	sbcs.w	ip, r5, #0
    c878:	f6ff af2b 	blt.w	c6d2 <arm_softmax_s8+0xa0e>
    c87c:	0ff6      	lsrs	r6, r6, #31
    c87e:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
    int32_t remainder = remainder_mask & dividend;
    c882:	f006 0403 	and.w	r4, r6, #3
    result = dividend >> exponent;
    c886:	10b6      	asrs	r6, r6, #2
        threshold++;
    c888:	2e00      	cmp	r6, #0
    c88a:	bfac      	ite	ge
    c88c:	2501      	movge	r5, #1
    c88e:	2502      	movlt	r5, #2
    if (remainder > threshold)
    c890:	42ac      	cmp	r4, r5
    c892:	f73f af26 	bgt.w	c6e2 <arm_softmax_s8+0xa1e>
    if ((m1 < 0) ^ (m2 < 0))
    c896:	0fd4      	lsrs	r4, r2, #31
    c898:	ebb4 7fde 	cmp.w	r4, lr, lsr #31
        mult = 1 - mult;
    c89c:	bf19      	ittee	ne
    c89e:	9c01      	ldrne	r4, [sp, #4]
    c8a0:	9d06      	ldrne	r5, [sp, #24]
    q63_t mult = 1 << 30;
    c8a2:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
    c8a6:	2500      	moveq	r5, #0
    mult = mult + (q63_t)m1 * m2;
    c8a8:	fb08 f701 	mul.w	r7, r8, r1
    c8ac:	fb00 7709 	mla	r7, r0, r9, r7
    c8b0:	fba8 0100 	umull	r0, r1, r8, r0
    c8b4:	4439      	add	r1, r7
    c8b6:	1900      	adds	r0, r0, r4
    c8b8:	4169      	adcs	r1, r5
    result = (int32_t) (mult / (1ll << 31));
    c8ba:	4604      	mov	r4, r0
    c8bc:	460d      	mov	r5, r1
    c8be:	2800      	cmp	r0, #0
    c8c0:	f171 0700 	sbcs.w	r7, r1, #0
    c8c4:	f6ff af0f 	blt.w	c6e6 <arm_softmax_s8+0xa22>
    c8c8:	0fe0      	lsrs	r0, r4, #31
    c8ca:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    if ((m1 < 0) ^ (m2 < 0))
    c8ce:	1830      	adds	r0, r6, r0
        mult = 1 - mult;
    c8d0:	bf47      	ittee	mi
    c8d2:	9c01      	ldrmi	r4, [sp, #4]
    c8d4:	9d06      	ldrmi	r5, [sp, #24]
    q63_t mult = 1 << 30;
    c8d6:	f04f 4480 	movpl.w	r4, #1073741824	; 0x40000000
    c8da:	2500      	movpl	r5, #0
    mult = mult + (q63_t)m1 * m2;
    c8dc:	ea4f 79e0 	mov.w	r9, r0, asr #31
    c8e0:	49ca      	ldr	r1, [pc, #808]	; (cc0c <arm_softmax_s8+0xf48>)
    c8e2:	fba0 0101 	umull	r0, r1, r0, r1
    c8e6:	4ec9      	ldr	r6, [pc, #804]	; (cc0c <arm_softmax_s8+0xf48>)
    c8e8:	fb06 1109 	mla	r1, r6, r9, r1
    c8ec:	1900      	adds	r0, r0, r4
    c8ee:	4169      	adcs	r1, r5
    result = (int32_t) (mult / (1ll << 31));
    c8f0:	4606      	mov	r6, r0
    c8f2:	460f      	mov	r7, r1
    c8f4:	2800      	cmp	r0, #0
    c8f6:	f171 0400 	sbcs.w	r4, r1, #0
    c8fa:	f6ff aefa 	blt.w	c6f2 <arm_softmax_s8+0xa2e>
    c8fe:	0ff1      	lsrs	r1, r6, #31
    c900:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
    c904:	448e      	add	lr, r1
    result = dividend >> exponent;
    c906:	ea4f 006e 	mov.w	r0, lr, asr #1
    int32_t remainder = remainder_mask & dividend;
    c90a:	f00e 0e01 	and.w	lr, lr, #1
    if (remainder > threshold)
    c90e:	ebbe 7fd0 	cmp.w	lr, r0, lsr #31
        result++;
    c912:	bfc8      	it	gt
    c914:	3001      	addgt	r0, #1
    if ((m1 < 0) ^ (m2 < 0))
    c916:	1882      	adds	r2, r0, r2
        mult = 1 - mult;
    c918:	bf47      	ittee	mi
    c91a:	9c01      	ldrmi	r4, [sp, #4]
    c91c:	9d06      	ldrmi	r5, [sp, #24]
    q63_t mult = 1 << 30;
    c91e:	f04f 4480 	movpl.w	r4, #1073741824	; 0x40000000
    c922:	2500      	movpl	r5, #0
    mult = mult + (q63_t)m1 * m2;
    c924:	17d7      	asrs	r7, r2, #31
    c926:	49ba      	ldr	r1, [pc, #744]	; (cc10 <arm_softmax_s8+0xf4c>)
    c928:	fba2 0101 	umull	r0, r1, r2, r1
    c92c:	4ab8      	ldr	r2, [pc, #736]	; (cc10 <arm_softmax_s8+0xf4c>)
    c92e:	fb02 1107 	mla	r1, r2, r7, r1
    c932:	1900      	adds	r0, r0, r4
    c934:	4169      	adcs	r1, r5
    result = (int32_t) (mult / (1ll << 31));
    c936:	4606      	mov	r6, r0
    c938:	460f      	mov	r7, r1
    c93a:	2800      	cmp	r0, #0
    c93c:	f171 0200 	sbcs.w	r2, r1, #0
    c940:	f6ff aedd 	blt.w	c6fe <arm_softmax_s8+0xa3a>
    c944:	0ff1      	lsrs	r1, r6, #31
    c946:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
    c94a:	f3c3 6500 	ubfx	r5, r3, #24, #1
    c94e:	4268      	negs	r0, r5
    if ((m1 < 0) ^ (m2 < 0))
    c950:	4aaf      	ldr	r2, [pc, #700]	; (cc10 <arm_softmax_s8+0xf4c>)
    c952:	1889      	adds	r1, r1, r2
    c954:	f53f aed9 	bmi.w	c70a <arm_softmax_s8+0xa46>
    q63_t mult = 1 << 30;
    c958:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    c95c:	2700      	movs	r7, #0
    c95e:	e9cd 6708 	strd	r6, r7, [sp, #32]
    mult = mult + (q63_t)m1 * m2;
    c962:	4aac      	ldr	r2, [pc, #688]	; (cc14 <arm_softmax_s8+0xf50>)
    c964:	fba1 6702 	umull	r6, r7, r1, r2
    c968:	ea4f 79e1 	mov.w	r9, r1, asr #31
    c96c:	4aa9      	ldr	r2, [pc, #676]	; (cc14 <arm_softmax_s8+0xf50>)
    c96e:	fb02 7709 	mla	r7, r2, r9, r7
    c972:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    c976:	eb18 0806 	adds.w	r8, r8, r6
    c97a:	eb49 0907 	adc.w	r9, r9, r7
    c97e:	4646      	mov	r6, r8
    c980:	464f      	mov	r7, r9
    result = (int32_t) (mult / (1ll << 31));
    c982:	2e00      	cmp	r6, #0
    c984:	f179 0200 	sbcs.w	r2, r9, #0
    c988:	f6ff aec4 	blt.w	c714 <arm_softmax_s8+0xa50>
    c98c:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    c990:	ea42 0249 	orr.w	r2, r2, r9, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
    c994:	4002      	ands	r2, r0
    c996:	3d01      	subs	r5, #1
    c998:	4029      	ands	r1, r5
    SELECT_IF_NON_ZERO(1302514674)
    c99a:	f3c3 6540 	ubfx	r5, r3, #25, #1
    c99e:	f1c5 0e00 	rsb	lr, r5, #0
    if ((m1 < 0) ^ (m2 < 0))
    c9a2:	404a      	eors	r2, r1
        mult = 1 - mult;
    c9a4:	bf47      	ittee	mi
    c9a6:	9801      	ldrmi	r0, [sp, #4]
    c9a8:	9906      	ldrmi	r1, [sp, #24]
    q63_t mult = 1 << 30;
    c9aa:	f04f 4080 	movpl.w	r0, #1073741824	; 0x40000000
    c9ae:	2100      	movpl	r1, #0
    mult = mult + (q63_t)m1 * m2;
    c9b0:	4c99      	ldr	r4, [pc, #612]	; (cc18 <arm_softmax_s8+0xf54>)
    c9b2:	fba2 6704 	umull	r6, r7, r2, r4
    c9b6:	ea4f 79e2 	mov.w	r9, r2, asr #31
    c9ba:	fb04 7709 	mla	r7, r4, r9, r7
    c9be:	1836      	adds	r6, r6, r0
    c9c0:	414f      	adcs	r7, r1
    result = (int32_t) (mult / (1ll << 31));
    c9c2:	46b0      	mov	r8, r6
    c9c4:	46b9      	mov	r9, r7
    c9c6:	2e00      	cmp	r6, #0
    c9c8:	f177 0100 	sbcs.w	r1, r7, #0
    c9cc:	f6ff aeab 	blt.w	c726 <arm_softmax_s8+0xa62>
    c9d0:	ea4f 74d8 	mov.w	r4, r8, lsr #31
    c9d4:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
    c9d8:	ea0e 0404 	and.w	r4, lr, r4
    c9dc:	3d01      	subs	r5, #1
    c9de:	402a      	ands	r2, r5
    SELECT_IF_NON_ZERO(790015084)
    c9e0:	f3c3 6580 	ubfx	r5, r3, #26, #1
    c9e4:	f1c5 0e00 	rsb	lr, r5, #0
    if ((m1 < 0) ^ (m2 < 0))
    c9e8:	4054      	eors	r4, r2
        mult = 1 - mult;
    c9ea:	bf47      	ittee	mi
    c9ec:	9801      	ldrmi	r0, [sp, #4]
    c9ee:	9906      	ldrmi	r1, [sp, #24]
    q63_t mult = 1 << 30;
    c9f0:	f04f 4080 	movpl.w	r0, #1073741824	; 0x40000000
    c9f4:	2100      	movpl	r1, #0
    mult = mult + (q63_t)m1 * m2;
    c9f6:	4a89      	ldr	r2, [pc, #548]	; (cc1c <arm_softmax_s8+0xf58>)
    c9f8:	fba4 6702 	umull	r6, r7, r4, r2
    c9fc:	ea4f 79e4 	mov.w	r9, r4, asr #31
    ca00:	fb02 7709 	mla	r7, r2, r9, r7
    ca04:	1836      	adds	r6, r6, r0
    ca06:	414f      	adcs	r7, r1
    result = (int32_t) (mult / (1ll << 31));
    ca08:	46b0      	mov	r8, r6
    ca0a:	46b9      	mov	r9, r7
    ca0c:	2e00      	cmp	r6, #0
    ca0e:	f177 0200 	sbcs.w	r2, r7, #0
    ca12:	f6ff ae91 	blt.w	c738 <arm_softmax_s8+0xa74>
    ca16:	ea4f 70d8 	mov.w	r0, r8, lsr #31
    ca1a:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
    SELECT_IF_NON_ZERO(790015084)
    ca1e:	ea0e 0000 	and.w	r0, lr, r0
    ca22:	3d01      	subs	r5, #1
    ca24:	402c      	ands	r4, r5
    SELECT_IF_NON_ZERO(290630308)
    ca26:	f3c3 6ec0 	ubfx	lr, r3, #27, #1
    ca2a:	f1ce 0c00 	rsb	ip, lr, #0
    if ((m1 < 0) ^ (m2 < 0))
    ca2e:	4060      	eors	r0, r4
        mult = 1 - mult;
    ca30:	bf47      	ittee	mi
    ca32:	f8dd 8004 	ldrmi.w	r8, [sp, #4]
    ca36:	f8dd 9018 	ldrmi.w	r9, [sp, #24]
    q63_t mult = 1 << 30;
    ca3a:	f04f 4880 	movpl.w	r8, #1073741824	; 0x40000000
    ca3e:	f04f 0900 	movpl.w	r9, #0
    mult = mult + (q63_t)m1 * m2;
    ca42:	4a77      	ldr	r2, [pc, #476]	; (cc20 <arm_softmax_s8+0xf5c>)
    ca44:	fba0 4502 	umull	r4, r5, r0, r2
    ca48:	17c7      	asrs	r7, r0, #31
    ca4a:	fb02 5507 	mla	r5, r2, r7, r5
    ca4e:	eb14 0408 	adds.w	r4, r4, r8
    ca52:	eb45 0509 	adc.w	r5, r5, r9
    result = (int32_t) (mult / (1ll << 31));
    ca56:	4626      	mov	r6, r4
    ca58:	462f      	mov	r7, r5
    ca5a:	2c00      	cmp	r4, #0
    ca5c:	f175 0200 	sbcs.w	r2, r5, #0
    ca60:	f6ff ae73 	blt.w	c74a <arm_softmax_s8+0xa86>
    ca64:	0ff1      	lsrs	r1, r6, #31
    ca66:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    SELECT_IF_NON_ZERO(290630308)
    ca6a:	ea0c 0101 	and.w	r1, ip, r1
    ca6e:	f10e 3eff 	add.w	lr, lr, #4294967295
    ca72:	ea0e 0000 	and.w	r0, lr, r0
    SELECT_IF_NON_ZERO(39332535)
    ca76:	f3c3 7e00 	ubfx	lr, r3, #28, #1
    ca7a:	f1ce 0c00 	rsb	ip, lr, #0
    if ((m1 < 0) ^ (m2 < 0))
    ca7e:	4041      	eors	r1, r0
        mult = 1 - mult;
    ca80:	bf47      	ittee	mi
    ca82:	f8dd 8004 	ldrmi.w	r8, [sp, #4]
    ca86:	f8dd 9018 	ldrmi.w	r9, [sp, #24]
    q63_t mult = 1 << 30;
    ca8a:	f04f 4880 	movpl.w	r8, #1073741824	; 0x40000000
    ca8e:	f04f 0900 	movpl.w	r9, #0
    mult = mult + (q63_t)m1 * m2;
    ca92:	4a64      	ldr	r2, [pc, #400]	; (cc24 <arm_softmax_s8+0xf60>)
    ca94:	fba1 4502 	umull	r4, r5, r1, r2
    ca98:	17cf      	asrs	r7, r1, #31
    ca9a:	fb02 5507 	mla	r5, r2, r7, r5
    ca9e:	eb14 0408 	adds.w	r4, r4, r8
    caa2:	eb45 0509 	adc.w	r5, r5, r9
    result = (int32_t) (mult / (1ll << 31));
    caa6:	4626      	mov	r6, r4
    caa8:	462f      	mov	r7, r5
    caaa:	2c00      	cmp	r4, #0
    caac:	f175 0200 	sbcs.w	r2, r5, #0
    cab0:	f6ff ae51 	blt.w	c756 <arm_softmax_s8+0xa92>
    cab4:	0ff2      	lsrs	r2, r6, #31
    cab6:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
    SELECT_IF_NON_ZERO(39332535)
    caba:	ea0c 0202 	and.w	r2, ip, r2
    cabe:	f10e 3eff 	add.w	lr, lr, #4294967295
    cac2:	ea0e 0101 	and.w	r1, lr, r1
    SELECT_IF_NON_ZERO(720401)
    cac6:	f3c3 7e40 	ubfx	lr, r3, #29, #1
    caca:	f1ce 0c00 	rsb	ip, lr, #0
    if ((m1 < 0) ^ (m2 < 0))
    cace:	404a      	eors	r2, r1
        mult = 1 - mult;
    cad0:	bf47      	ittee	mi
    cad2:	9e01      	ldrmi	r6, [sp, #4]
    cad4:	9f06      	ldrmi	r7, [sp, #24]
    q63_t mult = 1 << 30;
    cad6:	f04f 4680 	movpl.w	r6, #1073741824	; 0x40000000
    cada:	2700      	movpl	r7, #0
    mult = mult + (q63_t)m1 * m2;
    cadc:	f8df 8148 	ldr.w	r8, [pc, #328]	; cc28 <arm_softmax_s8+0xf64>
    cae0:	fba2 0108 	umull	r0, r1, r2, r8
    cae4:	17d5      	asrs	r5, r2, #31
    cae6:	fb08 1105 	mla	r1, r8, r5, r1
    caea:	1980      	adds	r0, r0, r6
    caec:	4179      	adcs	r1, r7
    result = (int32_t) (mult / (1ll << 31));
    caee:	4604      	mov	r4, r0
    caf0:	460d      	mov	r5, r1
    caf2:	2800      	cmp	r0, #0
    caf4:	f171 0600 	sbcs.w	r6, r1, #0
    caf8:	f6ff ae33 	blt.w	c762 <arm_softmax_s8+0xa9e>
    cafc:	0fe1      	lsrs	r1, r4, #31
    cafe:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    SELECT_IF_NON_ZERO(720401)
    cb02:	ea0c 0c01 	and.w	ip, ip, r1
    cb06:	f10e 3eff 	add.w	lr, lr, #4294967295
    cb0a:	ea0e 0202 	and.w	r2, lr, r2
    SELECT_IF_NON_ZERO(242)
    cb0e:	f3c3 7380 	ubfx	r3, r3, #30, #1
    cb12:	425e      	negs	r6, r3
    if ((m1 < 0) ^ (m2 < 0))
    cb14:	ea9c 0202 	eors.w	r2, ip, r2
        mult = 1 - mult;
    cb18:	bf47      	ittee	mi
    cb1a:	f8dd 8004 	ldrmi.w	r8, [sp, #4]
    cb1e:	f8dd 9018 	ldrmi.w	r9, [sp, #24]
    q63_t mult = 1 << 30;
    cb22:	f04f 4880 	movpl.w	r8, #1073741824	; 0x40000000
    cb26:	f04f 0900 	movpl.w	r9, #0
    mult = mult + (q63_t)m1 * m2;
    cb2a:	17d5      	asrs	r5, r2, #31
    cb2c:	012f      	lsls	r7, r5, #4
    cb2e:	0110      	lsls	r0, r2, #4
    cb30:	ea47 7112 	orr.w	r1, r7, r2, lsr #28
    cb34:	1a80      	subs	r0, r0, r2
    cb36:	eb61 0105 	sbc.w	r1, r1, r5
    cb3a:	00cf      	lsls	r7, r1, #3
    cb3c:	ea47 7750 	orr.w	r7, r7, r0, lsr #29
    cb40:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
    cb44:	eb1e 0002 	adds.w	r0, lr, r2
    cb48:	eb47 0105 	adc.w	r1, r7, r5
    cb4c:	1800      	adds	r0, r0, r0
    cb4e:	4149      	adcs	r1, r1
    cb50:	eb10 0008 	adds.w	r0, r0, r8
    cb54:	eb41 0109 	adc.w	r1, r1, r9
    result = (int32_t) (mult / (1ll << 31));
    cb58:	4604      	mov	r4, r0
    cb5a:	460d      	mov	r5, r1
    cb5c:	2800      	cmp	r0, #0
    cb5e:	f171 0700 	sbcs.w	r7, r1, #0
    cb62:	f6ff ae04 	blt.w	c76e <arm_softmax_s8+0xaaa>
    cb66:	0fe1      	lsrs	r1, r4, #31
    cb68:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    SELECT_IF_NON_ZERO(242)
    cb6c:	400e      	ands	r6, r1
    cb6e:	3b01      	subs	r3, #1
    cb70:	4013      	ands	r3, r2
    mask = MASK_IF_ZERO(val);
    cb72:	9a07      	ldr	r2, [sp, #28]
    cb74:	fab2 f082 	clz	r0, r2
    cb78:	0940      	lsrs	r0, r0, #5
    SELECT_IF_NON_ZERO(242)
    cb7a:	4073      	eors	r3, r6
    return SELECT_USING_MASK(mask, Q31_MAX, result);
    cb7c:	1e44      	subs	r4, r0, #1
    cb7e:	4023      	ands	r3, r4
    mask = MASK_IF_ZERO(val);
    cb80:	4242      	negs	r2, r0
    return SELECT_USING_MASK(mask, Q31_MAX, result);
    cb82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    cb86:	405a      	eors	r2, r3
    if ((m1 < 0) ^ (m2 < 0))
    cb88:	0fd3      	lsrs	r3, r2, #31
    cb8a:	9904      	ldr	r1, [sp, #16]
    cb8c:	ebb3 7fd1 	cmp.w	r3, r1, lsr #31
        mult = 1 - mult;
    cb90:	bf19      	ittee	ne
    cb92:	9c01      	ldrne	r4, [sp, #4]
    cb94:	9d06      	ldrne	r5, [sp, #24]
    q63_t mult = 1 << 30;
    cb96:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
    cb9a:	2500      	moveq	r5, #0
    mult = mult + (q63_t)m1 * m2;
    cb9c:	17d1      	asrs	r1, r2, #31
    cb9e:	9e04      	ldr	r6, [sp, #16]
    cba0:	4633      	mov	r3, r6
    cba2:	fb03 f301 	mul.w	r3, r3, r1
    cba6:	ea4f 78e6 	mov.w	r8, r6, asr #31
    cbaa:	fb02 3308 	mla	r3, r2, r8, r3
    cbae:	fba6 0102 	umull	r0, r1, r6, r2
    cbb2:	4419      	add	r1, r3
    cbb4:	1900      	adds	r0, r0, r4
    cbb6:	4169      	adcs	r1, r5
    result = (int32_t) (mult / (1ll << 31));
    cbb8:	4604      	mov	r4, r0
    cbba:	460d      	mov	r5, r1
    cbbc:	2800      	cmp	r0, #0
    cbbe:	f171 0300 	sbcs.w	r3, r1, #0
    cbc2:	f6ff adda 	blt.w	c77a <arm_softmax_s8+0xab6>
    cbc6:	0fe3      	lsrs	r3, r4, #31
    cbc8:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    cbcc:	9904      	ldr	r1, [sp, #16]
    cbce:	4291      	cmp	r1, r2
    cbd0:	f43f add9 	beq.w	c786 <arm_softmax_s8+0xac2>
    int32_t remainder = remainder_mask & dividend;
    cbd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cbd6:	401a      	ands	r2, r3
    result = dividend >> exponent;
    cbd8:	990d      	ldr	r1, [sp, #52]	; 0x34
    cbda:	410b      	asrs	r3, r1
        threshold++;
    cbdc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    cbde:	9810      	ldr	r0, [sp, #64]	; 0x40
    cbe0:	ea31 0123 	bics.w	r1, r1, r3, asr #32
    cbe4:	bf28      	it	cs
    cbe6:	4601      	movcs	r1, r0
    if (remainder > threshold)
    cbe8:	428a      	cmp	r2, r1
        result++;
    cbea:	bfc8      	it	gt
    cbec:	3301      	addgt	r3, #1
    cbee:	3b80      	subs	r3, #128	; 0x80
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
    cbf0:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
    cbf4:	f6ff add2 	blt.w	c79c <arm_softmax_s8+0xad8>
    cbf8:	2b7e      	cmp	r3, #126	; 0x7e
    cbfa:	dc01      	bgt.n	cc00 <arm_softmax_s8+0xf3c>
    cbfc:	b25b      	sxtb	r3, r3
    cbfe:	e5cf      	b.n	c7a0 <arm_softmax_s8+0xadc>
    cc00:	237f      	movs	r3, #127	; 0x7f
    cc02:	e5cd      	b.n	c7a0 <arm_softmax_s8+0xadc>
            }
            else
            {
                output[col] = -128;
    cc04:	2380      	movs	r3, #128	; 0x80
    cc06:	f88a 3000 	strb.w	r3, [sl]
    cc0a:	e5cb      	b.n	c7a4 <arm_softmax_s8+0xae0>
    cc0c:	2aaaaaab 	.word	0x2aaaaaab
    cc10:	70f5a894 	.word	0x70f5a894
    cc14:	63afbe7b 	.word	0x63afbe7b
    cc18:	4da2cbf2 	.word	0x4da2cbf2
    cc1c:	2f16ac6c 	.word	0x2f16ac6c
    cc20:	1152aaa4 	.word	0x1152aaa4
    cc24:	02582ab7 	.word	0x02582ab7
    cc28:	000afe11 	.word	0x000afe11
    cc2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
    cc2e:	4619      	mov	r1, r3
    cc30:	9a14      	ldr	r2, [sp, #80]	; 0x50
    cc32:	4411      	add	r1, r2
    cc34:	9126      	str	r1, [sp, #152]	; 0x98
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
    cc36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cc38:	3301      	adds	r3, #1
    cc3a:	4619      	mov	r1, r3
    cc3c:	9313      	str	r3, [sp, #76]	; 0x4c
    cc3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cc40:	4618      	mov	r0, r3
    cc42:	4613      	mov	r3, r2
    cc44:	4410      	add	r0, r2
    cc46:	900a      	str	r0, [sp, #40]	; 0x28
    cc48:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cc4a:	4610      	mov	r0, r2
    cc4c:	4418      	add	r0, r3
    cc4e:	9011      	str	r0, [sp, #68]	; 0x44
    cc50:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cc52:	461a      	mov	r2, r3
    cc54:	428a      	cmp	r2, r1
    cc56:	d026      	beq.n	cca6 <arm_softmax_s8+0xfe2>
        int8_t max = *input;
    cc58:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cc5a:	f913 ac01 	ldrsb.w	sl, [r3, #-1]
        for (col = 1; col < row_size; ++col)
    cc5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    cc60:	2a01      	cmp	r2, #1
    cc62:	dd07      	ble.n	cc74 <arm_softmax_s8+0xfb0>
    cc64:	990a      	ldr	r1, [sp, #40]	; 0x28
            max = MAX(max, input[col]);
    cc66:	f913 2b01 	ldrsb.w	r2, [r3], #1
    cc6a:	4592      	cmp	sl, r2
    cc6c:	bfb8      	it	lt
    cc6e:	4692      	movlt	sl, r2
        for (col = 1; col < row_size; ++col)
    cc70:	4299      	cmp	r1, r3
    cc72:	d1f8      	bne.n	cc66 <arm_softmax_s8+0xfa2>
        for (col = 0; col < row_size; ++col)
    cc74:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cc76:	2b00      	cmp	r3, #0
    cc78:	f77f ac60 	ble.w	c53c <arm_softmax_s8+0x878>
    cc7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cc7e:	3b01      	subs	r3, #1
    cc80:	2200      	movs	r2, #0
    cc82:	9207      	str	r2, [sp, #28]
    mult = mult + (q63_t)m1 * m2;
    cc84:	f8cd a020 	str.w	sl, [sp, #32]
    cc88:	469a      	mov	sl, r3
    cc8a:	f7ff b9ee 	b.w	c06a <arm_softmax_s8+0x3a6>
    result = (int32_t) (mult / (1ll << 31));
    cc8e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    cc92:	2500      	movs	r5, #0
    cc94:	1824      	adds	r4, r4, r0
    cc96:	414d      	adcs	r5, r1
    cc98:	e4a6      	b.n	c5e8 <arm_softmax_s8+0x924>
    cc9a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    cc9e:	2500      	movs	r5, #0
    cca0:	1824      	adds	r4, r4, r0
    cca2:	414d      	adcs	r5, r1
    cca4:	e4e4      	b.n	c670 <arm_softmax_s8+0x9ac>
        input += row_size;
        output += row_size;
    }

#endif
}
    cca6:	b01b      	add	sp, #108	; 0x6c
    cca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ccac <__aeabi_atexit>:
    ccac:	460b      	mov	r3, r1
    ccae:	4601      	mov	r1, r0
    ccb0:	4618      	mov	r0, r3
    ccb2:	f00a bb99 	b.w	173e8 <__cxa_atexit>
    ccb6:	bf00      	nop

0000ccb8 <_ZdlPv>:
    ccb8:	f00a bede 	b.w	17a78 <free>

0000ccbc <_ZdaPv>:
    ccbc:	f7ff bffc 	b.w	ccb8 <_ZdlPv>

0000ccc0 <__cxa_guard_acquire>:
    ccc0:	b508      	push	{r3, lr}
    ccc2:	6803      	ldr	r3, [r0, #0]
    ccc4:	07db      	lsls	r3, r3, #31
    ccc6:	d405      	bmi.n	ccd4 <__cxa_guard_acquire+0x14>
    ccc8:	7843      	ldrb	r3, [r0, #1]
    ccca:	b92b      	cbnz	r3, ccd8 <__cxa_guard_acquire+0x18>
    cccc:	2301      	movs	r3, #1
    ccce:	7043      	strb	r3, [r0, #1]
    ccd0:	4618      	mov	r0, r3
    ccd2:	bd08      	pop	{r3, pc}
    ccd4:	2000      	movs	r0, #0
    ccd6:	bd08      	pop	{r3, pc}
    ccd8:	2004      	movs	r0, #4
    ccda:	f000 fc07 	bl	d4ec <__cxa_allocate_exception>
    ccde:	4b03      	ldr	r3, [pc, #12]	; (ccec <__cxa_guard_acquire+0x2c>)
    cce0:	6003      	str	r3, [r0, #0]
    cce2:	4a03      	ldr	r2, [pc, #12]	; (ccf0 <__cxa_guard_acquire+0x30>)
    cce4:	4903      	ldr	r1, [pc, #12]	; (ccf4 <__cxa_guard_acquire+0x34>)
    cce6:	f001 f92f 	bl	df48 <__cxa_throw>
    ccea:	bf00      	nop
    ccec:	0003cee4 	.word	0x0003cee4
    ccf0:	0000cd01 	.word	0x0000cd01
    ccf4:	0003ceac 	.word	0x0003ceac

0000ccf8 <__cxa_guard_release>:
    ccf8:	2301      	movs	r3, #1
    ccfa:	6003      	str	r3, [r0, #0]
    ccfc:	4770      	bx	lr
    ccfe:	bf00      	nop

0000cd00 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>:
    cd00:	b510      	push	{r4, lr}
    cd02:	4b03      	ldr	r3, [pc, #12]	; (cd10 <_ZN9__gnu_cxx20recursive_init_errorD1Ev+0x10>)
    cd04:	6003      	str	r3, [r0, #0]
    cd06:	4604      	mov	r4, r0
    cd08:	f000 fd7c 	bl	d804 <_ZNSt9exceptionD1Ev>
    cd0c:	4620      	mov	r0, r4
    cd0e:	bd10      	pop	{r4, pc}
    cd10:	0003cee4 	.word	0x0003cee4

0000cd14 <_ZN9__gnu_cxx20recursive_init_errorD0Ev>:
    cd14:	b510      	push	{r4, lr}
    cd16:	4b05      	ldr	r3, [pc, #20]	; (cd2c <_ZN9__gnu_cxx20recursive_init_errorD0Ev+0x18>)
    cd18:	6003      	str	r3, [r0, #0]
    cd1a:	4604      	mov	r4, r0
    cd1c:	f000 fd72 	bl	d804 <_ZNSt9exceptionD1Ev>
    cd20:	4620      	mov	r0, r4
    cd22:	2104      	movs	r1, #4
    cd24:	f000 fb72 	bl	d40c <_ZdlPvj>
    cd28:	4620      	mov	r0, r4
    cd2a:	bd10      	pop	{r4, pc}
    cd2c:	0003cee4 	.word	0x0003cee4

0000cd30 <_Znwj>:
    cd30:	b510      	push	{r4, lr}
    cd32:	2800      	cmp	r0, #0
    cd34:	bf14      	ite	ne
    cd36:	4604      	movne	r4, r0
    cd38:	2401      	moveq	r4, #1
    cd3a:	4620      	mov	r0, r4
    cd3c:	f00a fe94 	bl	17a68 <malloc>
    cd40:	b100      	cbz	r0, cd44 <_Znwj+0x14>
    cd42:	bd10      	pop	{r4, pc}
    cd44:	f001 f976 	bl	e034 <_ZSt15get_new_handlerv>
    cd48:	b108      	cbz	r0, cd4e <_Znwj+0x1e>
    cd4a:	4780      	blx	r0
    cd4c:	e7f5      	b.n	cd3a <_Znwj+0xa>
    cd4e:	2004      	movs	r0, #4
    cd50:	f000 fbcc 	bl	d4ec <__cxa_allocate_exception>
    cd54:	4b02      	ldr	r3, [pc, #8]	; (cd60 <_Znwj+0x30>)
    cd56:	6003      	str	r3, [r0, #0]
    cd58:	4a02      	ldr	r2, [pc, #8]	; (cd64 <_Znwj+0x34>)
    cd5a:	4903      	ldr	r1, [pc, #12]	; (cd68 <_Znwj+0x38>)
    cd5c:	f001 f8f4 	bl	df48 <__cxa_throw>
    cd60:	0003d118 	.word	0x0003d118
    cd64:	0000d2e5 	.word	0x0000d2e5
    cd68:	0003d0f4 	.word	0x0003d0f4

0000cd6c <_Znaj>:
    cd6c:	f7ff bfe0 	b.w	cd30 <_Znwj>

0000cd70 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    cd70:	b510      	push	{r4, lr}
    cd72:	4b03      	ldr	r3, [pc, #12]	; (cd80 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
    cd74:	6003      	str	r3, [r0, #0]
    cd76:	4604      	mov	r4, r0
    cd78:	f000 faee 	bl	d358 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    cd7c:	4620      	mov	r0, r4
    cd7e:	bd10      	pop	{r4, pc}
    cd80:	0003cf2c 	.word	0x0003cf2c

0000cd84 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    cd84:	b510      	push	{r4, lr}
    cd86:	4b05      	ldr	r3, [pc, #20]	; (cd9c <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
    cd88:	6003      	str	r3, [r0, #0]
    cd8a:	4604      	mov	r4, r0
    cd8c:	f000 fae4 	bl	d358 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    cd90:	4620      	mov	r0, r4
    cd92:	210c      	movs	r1, #12
    cd94:	f000 fb3a 	bl	d40c <_ZdlPvj>
    cd98:	4620      	mov	r0, r4
    cd9a:	bd10      	pop	{r4, pc}
    cd9c:	0003cf2c 	.word	0x0003cf2c

0000cda0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    cda0:	b570      	push	{r4, r5, r6, lr}
    cda2:	b082      	sub	sp, #8
    cda4:	460d      	mov	r5, r1
    cda6:	9c06      	ldr	r4, [sp, #24]
    cda8:	4294      	cmp	r4, r2
    cdaa:	4606      	mov	r6, r0
    cdac:	d009      	beq.n	cdc2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
    cdae:	68b0      	ldr	r0, [r6, #8]
    cdb0:	6806      	ldr	r6, [r0, #0]
    cdb2:	9406      	str	r4, [sp, #24]
    cdb4:	6a34      	ldr	r4, [r6, #32]
    cdb6:	4629      	mov	r1, r5
    cdb8:	46a4      	mov	ip, r4
    cdba:	b002      	add	sp, #8
    cdbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cdc0:	4760      	bx	ip
    cdc2:	4619      	mov	r1, r3
    cdc4:	9201      	str	r2, [sp, #4]
    cdc6:	9300      	str	r3, [sp, #0]
    cdc8:	f000 f86a 	bl	cea0 <_ZNKSt9type_infoeqERKS_>
    cdcc:	9b00      	ldr	r3, [sp, #0]
    cdce:	9a01      	ldr	r2, [sp, #4]
    cdd0:	2800      	cmp	r0, #0
    cdd2:	d0ec      	beq.n	cdae <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
    cdd4:	2006      	movs	r0, #6
    cdd6:	b002      	add	sp, #8
    cdd8:	bd70      	pop	{r4, r5, r6, pc}
    cdda:	bf00      	nop

0000cddc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    cddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cde0:	b081      	sub	sp, #4
    cde2:	460e      	mov	r6, r1
    cde4:	4619      	mov	r1, r3
    cde6:	461f      	mov	r7, r3
    cde8:	4691      	mov	r9, r2
    cdea:	4683      	mov	fp, r0
    cdec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    cdee:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    cdf2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    cdf6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    cdf8:	f000 f852 	bl	cea0 <_ZNKSt9type_infoeqERKS_>
    cdfc:	b170      	cbz	r0, ce1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
    cdfe:	2e00      	cmp	r6, #0
    ce00:	602c      	str	r4, [r5, #0]
    ce02:	f885 9004 	strb.w	r9, [r5, #4]
    ce06:	db1f      	blt.n	ce48 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
    ce08:	4434      	add	r4, r6
    ce0a:	45a0      	cmp	r8, r4
    ce0c:	bf0c      	ite	eq
    ce0e:	2406      	moveq	r4, #6
    ce10:	2401      	movne	r4, #1
    ce12:	71ac      	strb	r4, [r5, #6]
    ce14:	2000      	movs	r0, #0
    ce16:	b001      	add	sp, #4
    ce18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce1c:	4544      	cmp	r4, r8
    ce1e:	d018      	beq.n	ce52 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
    ce20:	f8db 0008 	ldr.w	r0, [fp, #8]
    ce24:	f8d0 e000 	ldr.w	lr, [r0]
    ce28:	950d      	str	r5, [sp, #52]	; 0x34
    ce2a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    ce2e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
    ce32:	940a      	str	r4, [sp, #40]	; 0x28
    ce34:	f8de 401c 	ldr.w	r4, [lr, #28]
    ce38:	463b      	mov	r3, r7
    ce3a:	464a      	mov	r2, r9
    ce3c:	4631      	mov	r1, r6
    ce3e:	46a4      	mov	ip, r4
    ce40:	b001      	add	sp, #4
    ce42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce46:	4760      	bx	ip
    ce48:	3602      	adds	r6, #2
    ce4a:	d1e3      	bne.n	ce14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
    ce4c:	2301      	movs	r3, #1
    ce4e:	71ab      	strb	r3, [r5, #6]
    ce50:	e7e0      	b.n	ce14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
    ce52:	4651      	mov	r1, sl
    ce54:	4658      	mov	r0, fp
    ce56:	f000 f823 	bl	cea0 <_ZNKSt9type_infoeqERKS_>
    ce5a:	2800      	cmp	r0, #0
    ce5c:	d0e0      	beq.n	ce20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
    ce5e:	2000      	movs	r0, #0
    ce60:	f885 9005 	strb.w	r9, [r5, #5]
    ce64:	b001      	add	sp, #4
    ce66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce6a:	bf00      	nop

0000ce6c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    ce6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce70:	4607      	mov	r7, r0
    ce72:	460c      	mov	r4, r1
    ce74:	4615      	mov	r5, r2
    ce76:	461e      	mov	r6, r3
    ce78:	f000 fa86 	bl	d388 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    ce7c:	b108      	cbz	r0, ce82 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
    ce7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ce82:	68b8      	ldr	r0, [r7, #8]
    ce84:	6807      	ldr	r7, [r0, #0]
    ce86:	4621      	mov	r1, r4
    ce88:	69bc      	ldr	r4, [r7, #24]
    ce8a:	4633      	mov	r3, r6
    ce8c:	462a      	mov	r2, r5
    ce8e:	46a4      	mov	ip, r4
    ce90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ce94:	4760      	bx	ip
    ce96:	bf00      	nop

0000ce98 <_ZNSt9type_infoD1Ev>:
    ce98:	4770      	bx	lr
    ce9a:	bf00      	nop

0000ce9c <_ZNKSt9type_info14__is_pointer_pEv>:
    ce9c:	2000      	movs	r0, #0
    ce9e:	4770      	bx	lr

0000cea0 <_ZNKSt9type_infoeqERKS_>:
    cea0:	4281      	cmp	r1, r0
    cea2:	d011      	beq.n	cec8 <_ZNKSt9type_infoeqERKS_+0x28>
    cea4:	b508      	push	{r3, lr}
    cea6:	6840      	ldr	r0, [r0, #4]
    cea8:	7803      	ldrb	r3, [r0, #0]
    ceaa:	2b2a      	cmp	r3, #42	; 0x2a
    ceac:	d00a      	beq.n	cec4 <_ZNKSt9type_infoeqERKS_+0x24>
    ceae:	6849      	ldr	r1, [r1, #4]
    ceb0:	780b      	ldrb	r3, [r1, #0]
    ceb2:	2b2a      	cmp	r3, #42	; 0x2a
    ceb4:	bf08      	it	eq
    ceb6:	3101      	addeq	r1, #1
    ceb8:	f00b fd56 	bl	18968 <strcmp>
    cebc:	fab0 f080 	clz	r0, r0
    cec0:	0940      	lsrs	r0, r0, #5
    cec2:	bd08      	pop	{r3, pc}
    cec4:	2000      	movs	r0, #0
    cec6:	bd08      	pop	{r3, pc}
    cec8:	2001      	movs	r0, #1
    ceca:	4770      	bx	lr

0000cecc <_ZSt19__throw_logic_errorPKc>:
    cecc:	b538      	push	{r3, r4, r5, lr}
    cece:	4605      	mov	r5, r0
    ced0:	2008      	movs	r0, #8
    ced2:	f000 fb0b 	bl	d4ec <__cxa_allocate_exception>
    ced6:	4629      	mov	r1, r5
    ced8:	4604      	mov	r4, r0
    ceda:	f001 f8f7 	bl	e0cc <_ZNSt11logic_errorC1EPKc>
    cede:	4620      	mov	r0, r4
    cee0:	4a04      	ldr	r2, [pc, #16]	; (cef4 <_ZSt19__throw_logic_errorPKc+0x28>)
    cee2:	4905      	ldr	r1, [pc, #20]	; (cef8 <_ZSt19__throw_logic_errorPKc+0x2c>)
    cee4:	f001 f830 	bl	df48 <__cxa_throw>
    cee8:	4620      	mov	r0, r4
    ceea:	f000 fb17 	bl	d51c <__cxa_free_exception>
    ceee:	f000 fb39 	bl	d564 <__cxa_end_cleanup>
    cef2:	bf00      	nop
    cef4:	0000e049 	.word	0x0000e049
    cef8:	0003d244 	.word	0x0003d244

0000cefc <_ZSt20__throw_length_errorPKc>:
    cefc:	b538      	push	{r3, r4, r5, lr}
    cefe:	4605      	mov	r5, r0
    cf00:	2008      	movs	r0, #8
    cf02:	f000 faf3 	bl	d4ec <__cxa_allocate_exception>
    cf06:	4629      	mov	r1, r5
    cf08:	4604      	mov	r4, r0
    cf0a:	f001 f8f3 	bl	e0f4 <_ZNSt12length_errorC1EPKc>
    cf0e:	4620      	mov	r0, r4
    cf10:	4a04      	ldr	r2, [pc, #16]	; (cf24 <_ZSt20__throw_length_errorPKc+0x28>)
    cf12:	4905      	ldr	r1, [pc, #20]	; (cf28 <_ZSt20__throw_length_errorPKc+0x2c>)
    cf14:	f001 f818 	bl	df48 <__cxa_throw>
    cf18:	4620      	mov	r0, r4
    cf1a:	f000 faff 	bl	d51c <__cxa_free_exception>
    cf1e:	f000 fb21 	bl	d564 <__cxa_end_cleanup>
    cf22:	bf00      	nop
    cf24:	0000e09d 	.word	0x0000e09d
    cf28:	0003d250 	.word	0x0003d250

0000cf2c <_ZNK12_GLOBAL__N_122generic_error_category4nameEv>:
    cf2c:	4800      	ldr	r0, [pc, #0]	; (cf30 <_ZNK12_GLOBAL__N_122generic_error_category4nameEv+0x4>)
    cf2e:	4770      	bx	lr
    cf30:	0003cf70 	.word	0x0003cf70

0000cf34 <_ZNK12_GLOBAL__N_121system_error_category4nameEv>:
    cf34:	4800      	ldr	r0, [pc, #0]	; (cf38 <_ZNK12_GLOBAL__N_121system_error_category4nameEv+0x4>)
    cf36:	4770      	bx	lr
    cf38:	0003cf68 	.word	0x0003cf68

0000cf3c <_ZNKSt3_V214error_category23default_error_conditionEi>:
    cf3c:	6002      	str	r2, [r0, #0]
    cf3e:	6041      	str	r1, [r0, #4]
    cf40:	4770      	bx	lr
    cf42:	bf00      	nop

0000cf44 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei>:
    cf44:	684b      	ldr	r3, [r1, #4]
    cf46:	4283      	cmp	r3, r0
    cf48:	d001      	beq.n	cf4e <_ZNKSt3_V214error_category10equivalentERKSt10error_codei+0xa>
    cf4a:	2000      	movs	r0, #0
    cf4c:	4770      	bx	lr
    cf4e:	6808      	ldr	r0, [r1, #0]
    cf50:	1a80      	subs	r0, r0, r2
    cf52:	fab0 f080 	clz	r0, r0
    cf56:	0940      	lsrs	r0, r0, #5
    cf58:	4770      	bx	lr
    cf5a:	bf00      	nop

0000cf5c <_ZN12_GLOBAL__N_121system_error_categoryD1Ev>:
    cf5c:	4770      	bx	lr
    cf5e:	bf00      	nop

0000cf60 <_ZN12_GLOBAL__N_122generic_error_categoryD1Ev>:
    cf60:	4770      	bx	lr
    cf62:	bf00      	nop

0000cf64 <_ZN12_GLOBAL__N_121system_error_categoryD0Ev>:
    cf64:	b510      	push	{r4, lr}
    cf66:	4604      	mov	r4, r0
    cf68:	f7ff fea6 	bl	ccb8 <_ZdlPv>
    cf6c:	4620      	mov	r0, r4
    cf6e:	bd10      	pop	{r4, pc}

0000cf70 <_ZN12_GLOBAL__N_122generic_error_categoryD0Ev>:
    cf70:	b510      	push	{r4, lr}
    cf72:	4604      	mov	r4, r0
    cf74:	f7ff fea0 	bl	ccb8 <_ZdlPv>
    cf78:	4620      	mov	r0, r4
    cf7a:	bd10      	pop	{r4, pc}

0000cf7c <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei>:
    cf7c:	b510      	push	{r4, lr}
    cf7e:	680b      	ldr	r3, [r1, #0]
    cf80:	b086      	sub	sp, #24
    cf82:	4604      	mov	r4, r0
    cf84:	691b      	ldr	r3, [r3, #16]
    cf86:	4668      	mov	r0, sp
    cf88:	4798      	blx	r3
    cf8a:	4620      	mov	r0, r4
    cf8c:	e89d 0006 	ldmia.w	sp, {r1, r2}
    cf90:	f001 f8ba 	bl	e108 <_ZNSt12__cow_stringC1EPKcj>
    cf94:	9800      	ldr	r0, [sp, #0]
    cf96:	ab02      	add	r3, sp, #8
    cf98:	4298      	cmp	r0, r3
    cf9a:	d001      	beq.n	cfa0 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei+0x24>
    cf9c:	f7ff fe8c 	bl	ccb8 <_ZdlPv>
    cfa0:	4620      	mov	r0, r4
    cfa2:	b006      	add	sp, #24
    cfa4:	bd10      	pop	{r4, pc}
    cfa6:	9800      	ldr	r0, [sp, #0]
    cfa8:	ab02      	add	r3, sp, #8
    cfaa:	4298      	cmp	r0, r3
    cfac:	d001      	beq.n	cfb2 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei+0x36>
    cfae:	f7ff fe83 	bl	ccb8 <_ZdlPv>
    cfb2:	f000 fad7 	bl	d564 <__cxa_end_cleanup>
    cfb6:	bf00      	nop

0000cfb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27>:
    cfb8:	b570      	push	{r4, r5, r6, lr}
    cfba:	4605      	mov	r5, r0
    cfbc:	b082      	sub	sp, #8
    cfbe:	b301      	cbz	r1, d002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x4a>
    cfc0:	1a54      	subs	r4, r2, r1
    cfc2:	2c0f      	cmp	r4, #15
    cfc4:	460e      	mov	r6, r1
    cfc6:	9401      	str	r4, [sp, #4]
    cfc8:	d80a      	bhi.n	cfe0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x28>
    cfca:	682b      	ldr	r3, [r5, #0]
    cfcc:	2c01      	cmp	r4, #1
    cfce:	4618      	mov	r0, r3
    cfd0:	d013      	beq.n	cffa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x42>
    cfd2:	b964      	cbnz	r4, cfee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x36>
    cfd4:	9a01      	ldr	r2, [sp, #4]
    cfd6:	606a      	str	r2, [r5, #4]
    cfd8:	2100      	movs	r1, #0
    cfda:	5499      	strb	r1, [r3, r2]
    cfdc:	b002      	add	sp, #8
    cfde:	bd70      	pop	{r4, r5, r6, pc}
    cfe0:	2200      	movs	r2, #0
    cfe2:	a901      	add	r1, sp, #4
    cfe4:	f000 f956 	bl	d294 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
    cfe8:	9b01      	ldr	r3, [sp, #4]
    cfea:	6028      	str	r0, [r5, #0]
    cfec:	60ab      	str	r3, [r5, #8]
    cfee:	4622      	mov	r2, r4
    cff0:	4631      	mov	r1, r6
    cff2:	f00b f895 	bl	18120 <memcpy>
    cff6:	682b      	ldr	r3, [r5, #0]
    cff8:	e7ec      	b.n	cfd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x1c>
    cffa:	7832      	ldrb	r2, [r6, #0]
    cffc:	701a      	strb	r2, [r3, #0]
    cffe:	682b      	ldr	r3, [r5, #0]
    d000:	e7e8      	b.n	cfd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x1c>
    d002:	b112      	cbz	r2, d00a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x52>
    d004:	4802      	ldr	r0, [pc, #8]	; (d010 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x58>)
    d006:	f7ff ff61 	bl	cecc <_ZSt19__throw_logic_errorPKc>
    d00a:	9201      	str	r2, [sp, #4]
    d00c:	6803      	ldr	r3, [r0, #0]
    d00e:	e7e1      	b.n	cfd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x1c>
    d010:	0003cf78 	.word	0x0003cf78

0000d014 <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei>:
    d014:	b538      	push	{r3, r4, r5, lr}
    d016:	4604      	mov	r4, r0
    d018:	4610      	mov	r0, r2
    d01a:	f00b fff5 	bl	19008 <strerror>
    d01e:	f104 0308 	add.w	r3, r4, #8
    d022:	6023      	str	r3, [r4, #0]
    d024:	4605      	mov	r5, r0
    d026:	b140      	cbz	r0, d03a <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei+0x26>
    d028:	f00c f80a 	bl	19040 <strlen>
    d02c:	4629      	mov	r1, r5
    d02e:	182a      	adds	r2, r5, r0
    d030:	4620      	mov	r0, r4
    d032:	f7ff ffc1 	bl	cfb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27>
    d036:	4620      	mov	r0, r4
    d038:	bd38      	pop	{r3, r4, r5, pc}
    d03a:	4620      	mov	r0, r4
    d03c:	f04f 32ff 	mov.w	r2, #4294967295
    d040:	4629      	mov	r1, r5
    d042:	f7ff ffb9 	bl	cfb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27>
    d046:	4620      	mov	r0, r4
    d048:	bd38      	pop	{r3, r4, r5, pc}
    d04a:	bf00      	nop

0000d04c <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition>:
    d04c:	b530      	push	{r4, r5, lr}
    d04e:	6803      	ldr	r3, [r0, #0]
    d050:	4d0c      	ldr	r5, [pc, #48]	; (d084 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x38>)
    d052:	695b      	ldr	r3, [r3, #20]
    d054:	42ab      	cmp	r3, r5
    d056:	b083      	sub	sp, #12
    d058:	4614      	mov	r4, r2
    d05a:	d10c      	bne.n	d076 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x2a>
    d05c:	6863      	ldr	r3, [r4, #4]
    d05e:	4283      	cmp	r3, r0
    d060:	d002      	beq.n	d068 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x1c>
    d062:	2000      	movs	r0, #0
    d064:	b003      	add	sp, #12
    d066:	bd30      	pop	{r4, r5, pc}
    d068:	6820      	ldr	r0, [r4, #0]
    d06a:	1a40      	subs	r0, r0, r1
    d06c:	fab0 f080 	clz	r0, r0
    d070:	0940      	lsrs	r0, r0, #5
    d072:	b003      	add	sp, #12
    d074:	bd30      	pop	{r4, r5, pc}
    d076:	460a      	mov	r2, r1
    d078:	4601      	mov	r1, r0
    d07a:	4668      	mov	r0, sp
    d07c:	4798      	blx	r3
    d07e:	9900      	ldr	r1, [sp, #0]
    d080:	9801      	ldr	r0, [sp, #4]
    d082:	e7eb      	b.n	d05c <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x10>
    d084:	0000cf3d 	.word	0x0000cf3d

0000d088 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev>:
    d088:	b510      	push	{r4, lr}
    d08a:	4c06      	ldr	r4, [pc, #24]	; (d0a4 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x1c>)
    d08c:	4906      	ldr	r1, [pc, #24]	; (d0a8 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x20>)
    d08e:	4807      	ldr	r0, [pc, #28]	; (d0ac <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x24>)
    d090:	4622      	mov	r2, r4
    d092:	f7ff fe0b 	bl	ccac <__aeabi_atexit>
    d096:	4622      	mov	r2, r4
    d098:	4905      	ldr	r1, [pc, #20]	; (d0b0 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x28>)
    d09a:	4806      	ldr	r0, [pc, #24]	; (d0b4 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x2c>)
    d09c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d0a0:	f7ff be04 	b.w	ccac <__aeabi_atexit>
    d0a4:	20000000 	.word	0x20000000
    d0a8:	0000cf61 	.word	0x0000cf61
    d0ac:	20000010 	.word	0x20000010
    d0b0:	0000cf5d 	.word	0x0000cf5d
    d0b4:	2000000c 	.word	0x2000000c

0000d0b8 <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
    d0b8:	4b13      	ldr	r3, [pc, #76]	; (d108 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x50>)
    d0ba:	4298      	cmp	r0, r3
    d0bc:	b510      	push	{r4, lr}
    d0be:	d81f      	bhi.n	d100 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x48>
    d0c0:	4288      	cmp	r0, r1
    d0c2:	4604      	mov	r4, r0
    d0c4:	d914      	bls.n	d0f0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x38>
    d0c6:	004a      	lsls	r2, r1, #1
    d0c8:	4290      	cmp	r0, r2
    d0ca:	bf38      	it	cc
    d0cc:	4614      	movcc	r4, r2
    d0ce:	f104 021d 	add.w	r2, r4, #29
    d0d2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    d0d6:	f104 000d 	add.w	r0, r4, #13
    d0da:	d90b      	bls.n	d0f4 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x3c>
    d0dc:	42a1      	cmp	r1, r4
    d0de:	d209      	bcs.n	d0f4 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x3c>
    d0e0:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
    d0e4:	f3c2 020b 	ubfx	r2, r2, #0, #12
    d0e8:	1aa4      	subs	r4, r4, r2
    d0ea:	429c      	cmp	r4, r3
    d0ec:	bf28      	it	cs
    d0ee:	461c      	movcs	r4, r3
    d0f0:	f104 000d 	add.w	r0, r4, #13
    d0f4:	f7ff fe1c 	bl	cd30 <_Znwj>
    d0f8:	2200      	movs	r2, #0
    d0fa:	6044      	str	r4, [r0, #4]
    d0fc:	6082      	str	r2, [r0, #8]
    d0fe:	bd10      	pop	{r4, pc}
    d100:	4802      	ldr	r0, [pc, #8]	; (d10c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x54>)
    d102:	f7ff fefb 	bl	cefc <_ZSt20__throw_length_errorPKc>
    d106:	bf00      	nop
    d108:	3ffffffc 	.word	0x3ffffffc
    d10c:	0003d0b4 	.word	0x0003d0b4

0000d110 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27>:
    d110:	b570      	push	{r4, r5, r6, lr}
    d112:	1a0c      	subs	r4, r1, r0
    d114:	4606      	mov	r6, r0
    d116:	2100      	movs	r1, #0
    d118:	4620      	mov	r0, r4
    d11a:	f7ff ffcd 	bl	d0b8 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
    d11e:	2c01      	cmp	r4, #1
    d120:	4605      	mov	r5, r0
    d122:	f100 030c 	add.w	r3, r0, #12
    d126:	d005      	beq.n	d134 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x24>
    d128:	b984      	cbnz	r4, d14c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x3c>
    d12a:	4a0c      	ldr	r2, [pc, #48]	; (d15c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x4c>)
    d12c:	4295      	cmp	r5, r2
    d12e:	d106      	bne.n	d13e <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x2e>
    d130:	4618      	mov	r0, r3
    d132:	bd70      	pop	{r4, r5, r6, pc}
    d134:	7832      	ldrb	r2, [r6, #0]
    d136:	7302      	strb	r2, [r0, #12]
    d138:	4a08      	ldr	r2, [pc, #32]	; (d15c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x4c>)
    d13a:	4295      	cmp	r5, r2
    d13c:	d0f8      	beq.n	d130 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x20>
    d13e:	1929      	adds	r1, r5, r4
    d140:	2200      	movs	r2, #0
    d142:	602c      	str	r4, [r5, #0]
    d144:	60aa      	str	r2, [r5, #8]
    d146:	730a      	strb	r2, [r1, #12]
    d148:	4618      	mov	r0, r3
    d14a:	bd70      	pop	{r4, r5, r6, pc}
    d14c:	4618      	mov	r0, r3
    d14e:	4631      	mov	r1, r6
    d150:	4622      	mov	r2, r4
    d152:	f00a ffe5 	bl	18120 <memcpy>
    d156:	4603      	mov	r3, r0
    d158:	e7e7      	b.n	d12a <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x1a>
    d15a:	bf00      	nop
    d15c:	2001af68 	.word	0x2001af68

0000d160 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
    d160:	f7ff bdaa 	b.w	ccb8 <_ZdlPv>

0000d164 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>:
    d164:	4288      	cmp	r0, r1
    d166:	d002      	beq.n	d16e <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0xa>
    d168:	b118      	cbz	r0, d172 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0xe>
    d16a:	f7ff bfd1 	b.w	d110 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27>
    d16e:	4804      	ldr	r0, [pc, #16]	; (d180 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x1c>)
    d170:	4770      	bx	lr
    d172:	2900      	cmp	r1, #0
    d174:	d0f9      	beq.n	d16a <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x6>
    d176:	b508      	push	{r3, lr}
    d178:	4802      	ldr	r0, [pc, #8]	; (d184 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x20>)
    d17a:	f7ff fea7 	bl	cecc <_ZSt19__throw_logic_errorPKc>
    d17e:	bf00      	nop
    d180:	2001af74 	.word	0x2001af74
    d184:	0003d088 	.word	0x0003d088

0000d188 <_ZNSsC1EPKcjRKSaIcE>:
    d188:	b538      	push	{r3, r4, r5, lr}
    d18a:	460d      	mov	r5, r1
    d18c:	4604      	mov	r4, r0
    d18e:	4411      	add	r1, r2
    d190:	4628      	mov	r0, r5
    d192:	461a      	mov	r2, r3
    d194:	f04f 0300 	mov.w	r3, #0
    d198:	f7ff ffe4 	bl	d164 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
    d19c:	6020      	str	r0, [r4, #0]
    d19e:	4620      	mov	r0, r4
    d1a0:	bd38      	pop	{r3, r4, r5, pc}
    d1a2:	bf00      	nop

0000d1a4 <_ZNSsC1EPKcRKSaIcE>:
    d1a4:	b570      	push	{r4, r5, r6, lr}
    d1a6:	4605      	mov	r5, r0
    d1a8:	4616      	mov	r6, r2
    d1aa:	460c      	mov	r4, r1
    d1ac:	b161      	cbz	r1, d1c8 <_ZNSsC1EPKcRKSaIcE+0x24>
    d1ae:	4608      	mov	r0, r1
    d1b0:	f00b ff46 	bl	19040 <strlen>
    d1b4:	1821      	adds	r1, r4, r0
    d1b6:	4632      	mov	r2, r6
    d1b8:	4620      	mov	r0, r4
    d1ba:	f04f 0300 	mov.w	r3, #0
    d1be:	f7ff ffd1 	bl	d164 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
    d1c2:	6028      	str	r0, [r5, #0]
    d1c4:	4628      	mov	r0, r5
    d1c6:	bd70      	pop	{r4, r5, r6, pc}
    d1c8:	f04f 31ff 	mov.w	r1, #4294967295
    d1cc:	e7f3      	b.n	d1b6 <_ZNSsC1EPKcRKSaIcE+0x12>
    d1ce:	bf00      	nop

0000d1d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
    d1d0:	4b24      	ldr	r3, [pc, #144]	; (d264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
    d1d2:	681a      	ldr	r2, [r3, #0]
    d1d4:	07d0      	lsls	r0, r2, #31
    d1d6:	bf5c      	itt	pl
    d1d8:	2201      	movpl	r2, #1
    d1da:	601a      	strpl	r2, [r3, #0]
    d1dc:	4b22      	ldr	r3, [pc, #136]	; (d268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
    d1de:	681a      	ldr	r2, [r3, #0]
    d1e0:	07d1      	lsls	r1, r2, #31
    d1e2:	bf5c      	itt	pl
    d1e4:	2201      	movpl	r2, #1
    d1e6:	601a      	strpl	r2, [r3, #0]
    d1e8:	4b20      	ldr	r3, [pc, #128]	; (d26c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
    d1ea:	681a      	ldr	r2, [r3, #0]
    d1ec:	07d2      	lsls	r2, r2, #31
    d1ee:	bf5c      	itt	pl
    d1f0:	2201      	movpl	r2, #1
    d1f2:	601a      	strpl	r2, [r3, #0]
    d1f4:	4b1e      	ldr	r3, [pc, #120]	; (d270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
    d1f6:	681a      	ldr	r2, [r3, #0]
    d1f8:	07d0      	lsls	r0, r2, #31
    d1fa:	bf5c      	itt	pl
    d1fc:	2201      	movpl	r2, #1
    d1fe:	601a      	strpl	r2, [r3, #0]
    d200:	4b1c      	ldr	r3, [pc, #112]	; (d274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
    d202:	681a      	ldr	r2, [r3, #0]
    d204:	07d1      	lsls	r1, r2, #31
    d206:	bf5c      	itt	pl
    d208:	2201      	movpl	r2, #1
    d20a:	601a      	strpl	r2, [r3, #0]
    d20c:	4b1a      	ldr	r3, [pc, #104]	; (d278 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
    d20e:	681a      	ldr	r2, [r3, #0]
    d210:	07d2      	lsls	r2, r2, #31
    d212:	bf5c      	itt	pl
    d214:	2201      	movpl	r2, #1
    d216:	601a      	strpl	r2, [r3, #0]
    d218:	4b18      	ldr	r3, [pc, #96]	; (d27c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
    d21a:	681a      	ldr	r2, [r3, #0]
    d21c:	07d0      	lsls	r0, r2, #31
    d21e:	bf5c      	itt	pl
    d220:	2201      	movpl	r2, #1
    d222:	601a      	strpl	r2, [r3, #0]
    d224:	4b16      	ldr	r3, [pc, #88]	; (d280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
    d226:	681a      	ldr	r2, [r3, #0]
    d228:	07d1      	lsls	r1, r2, #31
    d22a:	bf5c      	itt	pl
    d22c:	2201      	movpl	r2, #1
    d22e:	601a      	strpl	r2, [r3, #0]
    d230:	4b14      	ldr	r3, [pc, #80]	; (d284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
    d232:	681a      	ldr	r2, [r3, #0]
    d234:	07d2      	lsls	r2, r2, #31
    d236:	bf5c      	itt	pl
    d238:	2201      	movpl	r2, #1
    d23a:	601a      	strpl	r2, [r3, #0]
    d23c:	4b12      	ldr	r3, [pc, #72]	; (d288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
    d23e:	681a      	ldr	r2, [r3, #0]
    d240:	07d0      	lsls	r0, r2, #31
    d242:	bf5c      	itt	pl
    d244:	2201      	movpl	r2, #1
    d246:	601a      	strpl	r2, [r3, #0]
    d248:	4b10      	ldr	r3, [pc, #64]	; (d28c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
    d24a:	681a      	ldr	r2, [r3, #0]
    d24c:	07d1      	lsls	r1, r2, #31
    d24e:	bf5c      	itt	pl
    d250:	2201      	movpl	r2, #1
    d252:	601a      	strpl	r2, [r3, #0]
    d254:	4b0e      	ldr	r3, [pc, #56]	; (d290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
    d256:	681a      	ldr	r2, [r3, #0]
    d258:	07d2      	lsls	r2, r2, #31
    d25a:	bf5c      	itt	pl
    d25c:	2201      	movpl	r2, #1
    d25e:	601a      	strpl	r2, [r3, #0]
    d260:	4770      	bx	lr
    d262:	bf00      	nop
    d264:	2001afa4 	.word	0x2001afa4
    d268:	2001afa0 	.word	0x2001afa0
    d26c:	2001af9c 	.word	0x2001af9c
    d270:	2001af98 	.word	0x2001af98
    d274:	2001af94 	.word	0x2001af94
    d278:	2001af90 	.word	0x2001af90
    d27c:	2001af8c 	.word	0x2001af8c
    d280:	2001af88 	.word	0x2001af88
    d284:	2001af84 	.word	0x2001af84
    d288:	2001af80 	.word	0x2001af80
    d28c:	2001af7c 	.word	0x2001af7c
    d290:	2001af78 	.word	0x2001af78

0000d294 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
    d294:	6808      	ldr	r0, [r1, #0]
    d296:	2800      	cmp	r0, #0
    d298:	b508      	push	{r3, lr}
    d29a:	db1a      	blt.n	d2d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x3e>
    d29c:	4290      	cmp	r0, r2
    d29e:	d90a      	bls.n	d2b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
    d2a0:	0052      	lsls	r2, r2, #1
    d2a2:	4290      	cmp	r0, r2
    d2a4:	d207      	bcs.n	d2b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
    d2a6:	2a00      	cmp	r2, #0
    d2a8:	db0a      	blt.n	d2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
    d2aa:	600a      	str	r2, [r1, #0]
    d2ac:	1c50      	adds	r0, r2, #1
    d2ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d2b2:	f7ff bd3d 	b.w	cd30 <_Znwj>
    d2b6:	3001      	adds	r0, #1
    d2b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d2bc:	f7ff bd38 	b.w	cd30 <_Znwj>
    d2c0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    d2c4:	600b      	str	r3, [r1, #0]
    d2c6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    d2ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d2ce:	f7ff bd2f 	b.w	cd30 <_Znwj>
    d2d2:	4801      	ldr	r0, [pc, #4]	; (d2d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x44>)
    d2d4:	f7ff fe12 	bl	cefc <_ZSt20__throw_length_errorPKc>
    d2d8:	0003d0cc 	.word	0x0003d0cc

0000d2dc <_ZNKSt9bad_alloc4whatEv>:
    d2dc:	4800      	ldr	r0, [pc, #0]	; (d2e0 <_ZNKSt9bad_alloc4whatEv+0x4>)
    d2de:	4770      	bx	lr
    d2e0:	0003d0e4 	.word	0x0003d0e4

0000d2e4 <_ZNSt9bad_allocD1Ev>:
    d2e4:	b510      	push	{r4, lr}
    d2e6:	4b03      	ldr	r3, [pc, #12]	; (d2f4 <_ZNSt9bad_allocD1Ev+0x10>)
    d2e8:	6003      	str	r3, [r0, #0]
    d2ea:	4604      	mov	r4, r0
    d2ec:	f000 fa8a 	bl	d804 <_ZNSt9exceptionD1Ev>
    d2f0:	4620      	mov	r0, r4
    d2f2:	bd10      	pop	{r4, pc}
    d2f4:	0003d118 	.word	0x0003d118

0000d2f8 <_ZNSt9bad_allocD0Ev>:
    d2f8:	b510      	push	{r4, lr}
    d2fa:	4b05      	ldr	r3, [pc, #20]	; (d310 <_ZNSt9bad_allocD0Ev+0x18>)
    d2fc:	6003      	str	r3, [r0, #0]
    d2fe:	4604      	mov	r4, r0
    d300:	f000 fa80 	bl	d804 <_ZNSt9exceptionD1Ev>
    d304:	4620      	mov	r0, r4
    d306:	2104      	movs	r1, #4
    d308:	f000 f880 	bl	d40c <_ZdlPvj>
    d30c:	4620      	mov	r0, r4
    d30e:	bd10      	pop	{r4, pc}
    d310:	0003d118 	.word	0x0003d118

0000d314 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    d314:	b570      	push	{r4, r5, r6, lr}
    d316:	6803      	ldr	r3, [r0, #0]
    d318:	b084      	sub	sp, #16
    d31a:	2400      	movs	r4, #0
    d31c:	699e      	ldr	r6, [r3, #24]
    d31e:	9400      	str	r4, [sp, #0]
    d320:	2310      	movs	r3, #16
    d322:	4615      	mov	r5, r2
    d324:	9302      	str	r3, [sp, #8]
    d326:	6812      	ldr	r2, [r2, #0]
    d328:	f88d 4004 	strb.w	r4, [sp, #4]
    d32c:	466b      	mov	r3, sp
    d32e:	9403      	str	r4, [sp, #12]
    d330:	47b0      	blx	r6
    d332:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d336:	f003 0306 	and.w	r3, r3, #6
    d33a:	2b06      	cmp	r3, #6
    d33c:	bf03      	ittte	eq
    d33e:	9b00      	ldreq	r3, [sp, #0]
    d340:	602b      	streq	r3, [r5, #0]
    d342:	2001      	moveq	r0, #1
    d344:	4620      	movne	r0, r4
    d346:	b004      	add	sp, #16
    d348:	bd70      	pop	{r4, r5, r6, pc}
    d34a:	bf00      	nop

0000d34c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    d34c:	9800      	ldr	r0, [sp, #0]
    d34e:	4290      	cmp	r0, r2
    d350:	bf0c      	ite	eq
    d352:	2006      	moveq	r0, #6
    d354:	2001      	movne	r0, #1
    d356:	4770      	bx	lr

0000d358 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    d358:	b510      	push	{r4, lr}
    d35a:	4b03      	ldr	r3, [pc, #12]	; (d368 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
    d35c:	6003      	str	r3, [r0, #0]
    d35e:	4604      	mov	r4, r0
    d360:	f7ff fd9a 	bl	ce98 <_ZNSt9type_infoD1Ev>
    d364:	4620      	mov	r0, r4
    d366:	bd10      	pop	{r4, pc}
    d368:	0003d15c 	.word	0x0003d15c

0000d36c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    d36c:	b510      	push	{r4, lr}
    d36e:	4b05      	ldr	r3, [pc, #20]	; (d384 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
    d370:	6003      	str	r3, [r0, #0]
    d372:	4604      	mov	r4, r0
    d374:	f7ff fd90 	bl	ce98 <_ZNSt9type_infoD1Ev>
    d378:	4620      	mov	r0, r4
    d37a:	2108      	movs	r1, #8
    d37c:	f000 f846 	bl	d40c <_ZdlPvj>
    d380:	4620      	mov	r0, r4
    d382:	bd10      	pop	{r4, pc}
    d384:	0003d15c 	.word	0x0003d15c

0000d388 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    d388:	b538      	push	{r3, r4, r5, lr}
    d38a:	4615      	mov	r5, r2
    d38c:	461c      	mov	r4, r3
    d38e:	f7ff fd87 	bl	cea0 <_ZNKSt9type_infoeqERKS_>
    d392:	b120      	cbz	r0, d39e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
    d394:	2208      	movs	r2, #8
    d396:	2306      	movs	r3, #6
    d398:	6025      	str	r5, [r4, #0]
    d39a:	60e2      	str	r2, [r4, #12]
    d39c:	7123      	strb	r3, [r4, #4]
    d39e:	bd38      	pop	{r3, r4, r5, pc}

0000d3a0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    d3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3a4:	4617      	mov	r7, r2
    d3a6:	461c      	mov	r4, r3
    d3a8:	4606      	mov	r6, r0
    d3aa:	460d      	mov	r5, r1
    d3ac:	f7ff fd78 	bl	cea0 <_ZNKSt9type_infoeqERKS_>
    d3b0:	b908      	cbnz	r0, d3b6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
    d3b2:	2c03      	cmp	r4, #3
    d3b4:	d901      	bls.n	d3ba <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
    d3b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d3ba:	682b      	ldr	r3, [r5, #0]
    d3bc:	463a      	mov	r2, r7
    d3be:	4631      	mov	r1, r6
    d3c0:	4628      	mov	r0, r5
    d3c2:	695b      	ldr	r3, [r3, #20]
    d3c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d3c8:	4718      	bx	r3
    d3ca:	bf00      	nop

0000d3cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    d3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d3ce:	b083      	sub	sp, #12
    d3d0:	4617      	mov	r7, r2
    d3d2:	9d08      	ldr	r5, [sp, #32]
    d3d4:	990a      	ldr	r1, [sp, #40]	; 0x28
    d3d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    d3d8:	428d      	cmp	r5, r1
    d3da:	4606      	mov	r6, r0
    d3dc:	d00b      	beq.n	d3f6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
    d3de:	4619      	mov	r1, r3
    d3e0:	4630      	mov	r0, r6
    d3e2:	f7ff fd5d 	bl	cea0 <_ZNKSt9type_infoeqERKS_>
    d3e6:	b118      	cbz	r0, d3f0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
    d3e8:	2301      	movs	r3, #1
    d3ea:	6025      	str	r5, [r4, #0]
    d3ec:	7127      	strb	r7, [r4, #4]
    d3ee:	71a3      	strb	r3, [r4, #6]
    d3f0:	2000      	movs	r0, #0
    d3f2:	b003      	add	sp, #12
    d3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d3f6:	9909      	ldr	r1, [sp, #36]	; 0x24
    d3f8:	9301      	str	r3, [sp, #4]
    d3fa:	f7ff fd51 	bl	cea0 <_ZNKSt9type_infoeqERKS_>
    d3fe:	b118      	cbz	r0, d408 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
    d400:	2000      	movs	r0, #0
    d402:	7167      	strb	r7, [r4, #5]
    d404:	b003      	add	sp, #12
    d406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d408:	9b01      	ldr	r3, [sp, #4]
    d40a:	e7e8      	b.n	d3de <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

0000d40c <_ZdlPvj>:
    d40c:	f7ff bc54 	b.w	ccb8 <_ZdlPv>

0000d410 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
    d410:	b4f0      	push	{r4, r5, r6, r7}
    d412:	4c1b      	ldr	r4, [pc, #108]	; (d480 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>)
    d414:	f850 7c08 	ldr.w	r7, [r0, #-8]
    d418:	6861      	ldr	r1, [r4, #4]
    d41a:	f1a0 0608 	sub.w	r6, r0, #8
    d41e:	b1c9      	cbz	r1, d454 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
    d420:	19f5      	adds	r5, r6, r7
    d422:	42a9      	cmp	r1, r5
    d424:	d01b      	beq.n	d45e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
    d426:	684a      	ldr	r2, [r1, #4]
    d428:	b32a      	cbz	r2, d476 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
    d42a:	4295      	cmp	r5, r2
    d42c:	d303      	bcc.n	d436 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x26>
    d42e:	e022      	b.n	d476 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
    d430:	429d      	cmp	r5, r3
    d432:	d205      	bcs.n	d440 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
    d434:	461a      	mov	r2, r3
    d436:	6853      	ldr	r3, [r2, #4]
    d438:	1d0c      	adds	r4, r1, #4
    d43a:	4611      	mov	r1, r2
    d43c:	2b00      	cmp	r3, #0
    d43e:	d1f7      	bne.n	d430 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
    d440:	6811      	ldr	r1, [r2, #0]
    d442:	1855      	adds	r5, r2, r1
    d444:	42ae      	cmp	r6, r5
    d446:	d013      	beq.n	d470 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
    d448:	f840 3c04 	str.w	r3, [r0, #-4]
    d44c:	6823      	ldr	r3, [r4, #0]
    d44e:	605e      	str	r6, [r3, #4]
    d450:	bcf0      	pop	{r4, r5, r6, r7}
    d452:	4770      	bx	lr
    d454:	f840 1c04 	str.w	r1, [r0, #-4]
    d458:	6066      	str	r6, [r4, #4]
    d45a:	bcf0      	pop	{r4, r5, r6, r7}
    d45c:	4770      	bx	lr
    d45e:	680b      	ldr	r3, [r1, #0]
    d460:	684a      	ldr	r2, [r1, #4]
    d462:	f840 2c04 	str.w	r2, [r0, #-4]
    d466:	441f      	add	r7, r3
    d468:	f840 7c08 	str.w	r7, [r0, #-8]
    d46c:	6066      	str	r6, [r4, #4]
    d46e:	e7ef      	b.n	d450 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
    d470:	440f      	add	r7, r1
    d472:	6017      	str	r7, [r2, #0]
    d474:	e7ec      	b.n	d450 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
    d476:	4613      	mov	r3, r2
    d478:	3404      	adds	r4, #4
    d47a:	460a      	mov	r2, r1
    d47c:	e7e0      	b.n	d440 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
    d47e:	bf00      	nop
    d480:	2001afa8 	.word	0x2001afa8

0000d484 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
    d484:	b430      	push	{r4, r5}
    d486:	4c18      	ldr	r4, [pc, #96]	; (d4e8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x64>)
    d488:	f100 0108 	add.w	r1, r0, #8
    d48c:	6863      	ldr	r3, [r4, #4]
    d48e:	2908      	cmp	r1, #8
    d490:	bf38      	it	cc
    d492:	2108      	movcc	r1, #8
    d494:	b313      	cbz	r3, d4dc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
    d496:	3107      	adds	r1, #7
    d498:	681a      	ldr	r2, [r3, #0]
    d49a:	f021 0107 	bic.w	r1, r1, #7
    d49e:	4291      	cmp	r1, r2
    d4a0:	d804      	bhi.n	d4ac <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
    d4a2:	e01d      	b.n	d4e0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5c>
    d4a4:	6802      	ldr	r2, [r0, #0]
    d4a6:	4291      	cmp	r1, r2
    d4a8:	d905      	bls.n	d4b6 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
    d4aa:	4603      	mov	r3, r0
    d4ac:	6858      	ldr	r0, [r3, #4]
    d4ae:	2800      	cmp	r0, #0
    d4b0:	d1f8      	bne.n	d4a4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
    d4b2:	bc30      	pop	{r4, r5}
    d4b4:	4770      	bx	lr
    d4b6:	3304      	adds	r3, #4
    d4b8:	1a52      	subs	r2, r2, r1
    d4ba:	2a07      	cmp	r2, #7
    d4bc:	d90a      	bls.n	d4d4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
    d4be:	1845      	adds	r5, r0, r1
    d4c0:	6844      	ldr	r4, [r0, #4]
    d4c2:	606c      	str	r4, [r5, #4]
    d4c4:	681c      	ldr	r4, [r3, #0]
    d4c6:	5042      	str	r2, [r0, r1]
    d4c8:	6021      	str	r1, [r4, #0]
    d4ca:	601d      	str	r5, [r3, #0]
    d4cc:	f104 0008 	add.w	r0, r4, #8
    d4d0:	bc30      	pop	{r4, r5}
    d4d2:	4770      	bx	lr
    d4d4:	6842      	ldr	r2, [r0, #4]
    d4d6:	601a      	str	r2, [r3, #0]
    d4d8:	4604      	mov	r4, r0
    d4da:	e7f7      	b.n	d4cc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
    d4dc:	4618      	mov	r0, r3
    d4de:	e7e8      	b.n	d4b2 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
    d4e0:	4618      	mov	r0, r3
    d4e2:	1d23      	adds	r3, r4, #4
    d4e4:	e7e8      	b.n	d4b8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
    d4e6:	bf00      	nop
    d4e8:	2001afa8 	.word	0x2001afa8

0000d4ec <__cxa_allocate_exception>:
    d4ec:	b538      	push	{r3, r4, r5, lr}
    d4ee:	f100 0580 	add.w	r5, r0, #128	; 0x80
    d4f2:	4628      	mov	r0, r5
    d4f4:	f00a fab8 	bl	17a68 <malloc>
    d4f8:	4604      	mov	r4, r0
    d4fa:	b138      	cbz	r0, d50c <__cxa_allocate_exception+0x20>
    d4fc:	2280      	movs	r2, #128	; 0x80
    d4fe:	2100      	movs	r1, #0
    d500:	4620      	mov	r0, r4
    d502:	f00a ff0b 	bl	1831c <memset>
    d506:	f104 0080 	add.w	r0, r4, #128	; 0x80
    d50a:	bd38      	pop	{r3, r4, r5, pc}
    d50c:	4628      	mov	r0, r5
    d50e:	f7ff ffb9 	bl	d484 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    d512:	4604      	mov	r4, r0
    d514:	2800      	cmp	r0, #0
    d516:	d1f1      	bne.n	d4fc <__cxa_allocate_exception+0x10>
    d518:	f000 fccc 	bl	deb4 <_ZSt9terminatev>

0000d51c <__cxa_free_exception>:
    d51c:	4a06      	ldr	r2, [pc, #24]	; (d538 <__cxa_free_exception+0x1c>)
    d51e:	6893      	ldr	r3, [r2, #8]
    d520:	3880      	subs	r0, #128	; 0x80
    d522:	4298      	cmp	r0, r3
    d524:	d905      	bls.n	d532 <__cxa_free_exception+0x16>
    d526:	68d2      	ldr	r2, [r2, #12]
    d528:	4413      	add	r3, r2
    d52a:	4298      	cmp	r0, r3
    d52c:	d201      	bcs.n	d532 <__cxa_free_exception+0x16>
    d52e:	f7ff bf6f 	b.w	d410 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    d532:	f00a baa1 	b.w	17a78 <free>
    d536:	bf00      	nop
    d538:	2001afa8 	.word	0x2001afa8

0000d53c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
    d53c:	b538      	push	{r3, r4, r5, lr}
    d53e:	4c08      	ldr	r4, [pc, #32]	; (d560 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
    d540:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
    d544:	4628      	mov	r0, r5
    d546:	60e5      	str	r5, [r4, #12]
    d548:	f00a fa8e 	bl	17a68 <malloc>
    d54c:	60a0      	str	r0, [r4, #8]
    d54e:	b120      	cbz	r0, d55a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
    d550:	2300      	movs	r3, #0
    d552:	6060      	str	r0, [r4, #4]
    d554:	6005      	str	r5, [r0, #0]
    d556:	6043      	str	r3, [r0, #4]
    d558:	bd38      	pop	{r3, r4, r5, pc}
    d55a:	60e0      	str	r0, [r4, #12]
    d55c:	6060      	str	r0, [r4, #4]
    d55e:	bd38      	pop	{r3, r4, r5, pc}
    d560:	2001afa8 	.word	0x2001afa8

0000d564 <__cxa_end_cleanup>:
    d564:	b41e      	push	{r1, r2, r3, r4}
    d566:	f000 f891 	bl	d68c <__gnu_end_cleanup>
    d56a:	bc1e      	pop	{r1, r2, r3, r4}
    d56c:	f009 fd0c 	bl	16f88 <_Unwind_Resume>

0000d570 <__cxa_type_match>:
    d570:	b5f0      	push	{r4, r5, r6, r7, lr}
    d572:	7802      	ldrb	r2, [r0, #0]
    d574:	2a47      	cmp	r2, #71	; 0x47
    d576:	b083      	sub	sp, #12
    d578:	460d      	mov	r5, r1
    d57a:	461f      	mov	r7, r3
    d57c:	d01e      	beq.n	d5bc <__cxa_type_match+0x4c>
    d57e:	2300      	movs	r3, #0
    d580:	4c27      	ldr	r4, [pc, #156]	; (d620 <__cxa_type_match+0xb0>)
    d582:	9301      	str	r3, [sp, #4]
    d584:	6823      	ldr	r3, [r4, #0]
    d586:	4620      	mov	r0, r4
    d588:	689b      	ldr	r3, [r3, #8]
    d58a:	4798      	blx	r3
    d58c:	b180      	cbz	r0, d5b0 <__cxa_type_match+0x40>
    d58e:	9b01      	ldr	r3, [sp, #4]
    d590:	681b      	ldr	r3, [r3, #0]
    d592:	9301      	str	r3, [sp, #4]
    d594:	2602      	movs	r6, #2
    d596:	682b      	ldr	r3, [r5, #0]
    d598:	4621      	mov	r1, r4
    d59a:	4628      	mov	r0, r5
    d59c:	691c      	ldr	r4, [r3, #16]
    d59e:	aa01      	add	r2, sp, #4
    d5a0:	2301      	movs	r3, #1
    d5a2:	47a0      	blx	r4
    d5a4:	b130      	cbz	r0, d5b4 <__cxa_type_match+0x44>
    d5a6:	9b01      	ldr	r3, [sp, #4]
    d5a8:	603b      	str	r3, [r7, #0]
    d5aa:	4630      	mov	r0, r6
    d5ac:	b003      	add	sp, #12
    d5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d5b0:	2601      	movs	r6, #1
    d5b2:	e7f0      	b.n	d596 <__cxa_type_match+0x26>
    d5b4:	4606      	mov	r6, r0
    d5b6:	4630      	mov	r0, r6
    d5b8:	b003      	add	sp, #12
    d5ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d5bc:	7843      	ldrb	r3, [r0, #1]
    d5be:	2b4e      	cmp	r3, #78	; 0x4e
    d5c0:	d1dd      	bne.n	d57e <__cxa_type_match+0xe>
    d5c2:	7883      	ldrb	r3, [r0, #2]
    d5c4:	2b55      	cmp	r3, #85	; 0x55
    d5c6:	d1da      	bne.n	d57e <__cxa_type_match+0xe>
    d5c8:	78c3      	ldrb	r3, [r0, #3]
    d5ca:	2b43      	cmp	r3, #67	; 0x43
    d5cc:	d019      	beq.n	d602 <__cxa_type_match+0x92>
    d5ce:	78c3      	ldrb	r3, [r0, #3]
    d5d0:	2b43      	cmp	r3, #67	; 0x43
    d5d2:	d1d4      	bne.n	d57e <__cxa_type_match+0xe>
    d5d4:	7903      	ldrb	r3, [r0, #4]
    d5d6:	2b43      	cmp	r3, #67	; 0x43
    d5d8:	d1d1      	bne.n	d57e <__cxa_type_match+0xe>
    d5da:	7943      	ldrb	r3, [r0, #5]
    d5dc:	2b2b      	cmp	r3, #43	; 0x2b
    d5de:	d1ce      	bne.n	d57e <__cxa_type_match+0xe>
    d5e0:	7983      	ldrb	r3, [r0, #6]
    d5e2:	2b2b      	cmp	r3, #43	; 0x2b
    d5e4:	d1cb      	bne.n	d57e <__cxa_type_match+0xe>
    d5e6:	79c3      	ldrb	r3, [r0, #7]
    d5e8:	2b01      	cmp	r3, #1
    d5ea:	d8c8      	bhi.n	d57e <__cxa_type_match+0xe>
    d5ec:	d004      	beq.n	d5f8 <__cxa_type_match+0x88>
    d5ee:	f850 4c20 	ldr.w	r4, [r0, #-32]
    d5f2:	3058      	adds	r0, #88	; 0x58
    d5f4:	9001      	str	r0, [sp, #4]
    d5f6:	e7c5      	b.n	d584 <__cxa_type_match+0x14>
    d5f8:	f850 0c20 	ldr.w	r0, [r0, #-32]
    d5fc:	f850 4c78 	ldr.w	r4, [r0, #-120]
    d600:	e7f8      	b.n	d5f4 <__cxa_type_match+0x84>
    d602:	7903      	ldrb	r3, [r0, #4]
    d604:	2b46      	cmp	r3, #70	; 0x46
    d606:	d1e2      	bne.n	d5ce <__cxa_type_match+0x5e>
    d608:	7943      	ldrb	r3, [r0, #5]
    d60a:	2b4f      	cmp	r3, #79	; 0x4f
    d60c:	d1df      	bne.n	d5ce <__cxa_type_match+0x5e>
    d60e:	7983      	ldrb	r3, [r0, #6]
    d610:	2b52      	cmp	r3, #82	; 0x52
    d612:	d1dc      	bne.n	d5ce <__cxa_type_match+0x5e>
    d614:	79c3      	ldrb	r3, [r0, #7]
    d616:	2b00      	cmp	r3, #0
    d618:	d1d9      	bne.n	d5ce <__cxa_type_match+0x5e>
    d61a:	9301      	str	r3, [sp, #4]
    d61c:	4c01      	ldr	r4, [pc, #4]	; (d624 <__cxa_type_match+0xb4>)
    d61e:	e7b1      	b.n	d584 <__cxa_type_match+0x14>
    d620:	0003d1ac 	.word	0x0003d1ac
    d624:	0003d1a4 	.word	0x0003d1a4

0000d628 <__cxa_begin_cleanup>:
    d628:	b510      	push	{r4, lr}
    d62a:	4604      	mov	r4, r0
    d62c:	f000 f902 	bl	d834 <__cxa_get_globals>
    d630:	7823      	ldrb	r3, [r4, #0]
    d632:	2b47      	cmp	r3, #71	; 0x47
    d634:	f1a4 0220 	sub.w	r2, r4, #32
    d638:	d004      	beq.n	d644 <__cxa_begin_cleanup+0x1c>
    d63a:	6883      	ldr	r3, [r0, #8]
    d63c:	bb23      	cbnz	r3, d688 <__cxa_begin_cleanup+0x60>
    d63e:	6082      	str	r2, [r0, #8]
    d640:	2001      	movs	r0, #1
    d642:	bd10      	pop	{r4, pc}
    d644:	7863      	ldrb	r3, [r4, #1]
    d646:	2b4e      	cmp	r3, #78	; 0x4e
    d648:	d1f7      	bne.n	d63a <__cxa_begin_cleanup+0x12>
    d64a:	78a3      	ldrb	r3, [r4, #2]
    d64c:	2b55      	cmp	r3, #85	; 0x55
    d64e:	d1f4      	bne.n	d63a <__cxa_begin_cleanup+0x12>
    d650:	78e3      	ldrb	r3, [r4, #3]
    d652:	2b43      	cmp	r3, #67	; 0x43
    d654:	d1f1      	bne.n	d63a <__cxa_begin_cleanup+0x12>
    d656:	7923      	ldrb	r3, [r4, #4]
    d658:	2b43      	cmp	r3, #67	; 0x43
    d65a:	d1ee      	bne.n	d63a <__cxa_begin_cleanup+0x12>
    d65c:	7963      	ldrb	r3, [r4, #5]
    d65e:	2b2b      	cmp	r3, #43	; 0x2b
    d660:	d1eb      	bne.n	d63a <__cxa_begin_cleanup+0x12>
    d662:	79a3      	ldrb	r3, [r4, #6]
    d664:	2b2b      	cmp	r3, #43	; 0x2b
    d666:	d1e8      	bne.n	d63a <__cxa_begin_cleanup+0x12>
    d668:	79e3      	ldrb	r3, [r4, #7]
    d66a:	2b01      	cmp	r3, #1
    d66c:	d8e5      	bhi.n	d63a <__cxa_begin_cleanup+0x12>
    d66e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    d672:	3301      	adds	r3, #1
    d674:	2b01      	cmp	r3, #1
    d676:	f844 3c04 	str.w	r3, [r4, #-4]
    d67a:	d1e1      	bne.n	d640 <__cxa_begin_cleanup+0x18>
    d67c:	6883      	ldr	r3, [r0, #8]
    d67e:	f844 3c08 	str.w	r3, [r4, #-8]
    d682:	6082      	str	r2, [r0, #8]
    d684:	2001      	movs	r0, #1
    d686:	bd10      	pop	{r4, pc}
    d688:	f000 fc14 	bl	deb4 <_ZSt9terminatev>

0000d68c <__gnu_end_cleanup>:
    d68c:	b508      	push	{r3, lr}
    d68e:	f000 f8d1 	bl	d834 <__cxa_get_globals>
    d692:	6883      	ldr	r3, [r0, #8]
    d694:	b383      	cbz	r3, d6f8 <__gnu_end_cleanup+0x6c>
    d696:	f893 2020 	ldrb.w	r2, [r3, #32]
    d69a:	2a47      	cmp	r2, #71	; 0x47
    d69c:	d004      	beq.n	d6a8 <__gnu_end_cleanup+0x1c>
    d69e:	2200      	movs	r2, #0
    d6a0:	6082      	str	r2, [r0, #8]
    d6a2:	f103 0020 	add.w	r0, r3, #32
    d6a6:	bd08      	pop	{r3, pc}
    d6a8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
    d6ac:	2a4e      	cmp	r2, #78	; 0x4e
    d6ae:	d1f6      	bne.n	d69e <__gnu_end_cleanup+0x12>
    d6b0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    d6b4:	2a55      	cmp	r2, #85	; 0x55
    d6b6:	d1f2      	bne.n	d69e <__gnu_end_cleanup+0x12>
    d6b8:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
    d6bc:	2a43      	cmp	r2, #67	; 0x43
    d6be:	d1ee      	bne.n	d69e <__gnu_end_cleanup+0x12>
    d6c0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    d6c4:	2a43      	cmp	r2, #67	; 0x43
    d6c6:	d1ea      	bne.n	d69e <__gnu_end_cleanup+0x12>
    d6c8:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    d6cc:	2a2b      	cmp	r2, #43	; 0x2b
    d6ce:	d1e6      	bne.n	d69e <__gnu_end_cleanup+0x12>
    d6d0:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
    d6d4:	2a2b      	cmp	r2, #43	; 0x2b
    d6d6:	d1e2      	bne.n	d69e <__gnu_end_cleanup+0x12>
    d6d8:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    d6dc:	2a01      	cmp	r2, #1
    d6de:	d8de      	bhi.n	d69e <__gnu_end_cleanup+0x12>
    d6e0:	69da      	ldr	r2, [r3, #28]
    d6e2:	3a01      	subs	r2, #1
    d6e4:	61da      	str	r2, [r3, #28]
    d6e6:	2a00      	cmp	r2, #0
    d6e8:	d1db      	bne.n	d6a2 <__gnu_end_cleanup+0x16>
    d6ea:	699a      	ldr	r2, [r3, #24]
    d6ec:	6082      	str	r2, [r0, #8]
    d6ee:	2200      	movs	r2, #0
    d6f0:	619a      	str	r2, [r3, #24]
    d6f2:	f103 0020 	add.w	r0, r3, #32
    d6f6:	bd08      	pop	{r3, pc}
    d6f8:	f000 fbdc 	bl	deb4 <_ZSt9terminatev>

0000d6fc <__cxa_begin_catch>:
    d6fc:	b538      	push	{r3, r4, r5, lr}
    d6fe:	4604      	mov	r4, r0
    d700:	f000 f898 	bl	d834 <__cxa_get_globals>
    d704:	7822      	ldrb	r2, [r4, #0]
    d706:	6803      	ldr	r3, [r0, #0]
    d708:	2a47      	cmp	r2, #71	; 0x47
    d70a:	f1a4 0120 	sub.w	r1, r4, #32
    d70e:	d004      	beq.n	d71a <__cxa_begin_catch+0x1e>
    d710:	bb83      	cbnz	r3, d774 <__cxa_begin_catch+0x78>
    d712:	461c      	mov	r4, r3
    d714:	6001      	str	r1, [r0, #0]
    d716:	4620      	mov	r0, r4
    d718:	bd38      	pop	{r3, r4, r5, pc}
    d71a:	7862      	ldrb	r2, [r4, #1]
    d71c:	2a4e      	cmp	r2, #78	; 0x4e
    d71e:	d1f7      	bne.n	d710 <__cxa_begin_catch+0x14>
    d720:	78a2      	ldrb	r2, [r4, #2]
    d722:	2a55      	cmp	r2, #85	; 0x55
    d724:	d1f4      	bne.n	d710 <__cxa_begin_catch+0x14>
    d726:	78e2      	ldrb	r2, [r4, #3]
    d728:	2a43      	cmp	r2, #67	; 0x43
    d72a:	d1f1      	bne.n	d710 <__cxa_begin_catch+0x14>
    d72c:	7922      	ldrb	r2, [r4, #4]
    d72e:	2a43      	cmp	r2, #67	; 0x43
    d730:	d1ee      	bne.n	d710 <__cxa_begin_catch+0x14>
    d732:	7962      	ldrb	r2, [r4, #5]
    d734:	2a2b      	cmp	r2, #43	; 0x2b
    d736:	d1eb      	bne.n	d710 <__cxa_begin_catch+0x14>
    d738:	79a2      	ldrb	r2, [r4, #6]
    d73a:	2a2b      	cmp	r2, #43	; 0x2b
    d73c:	d1e8      	bne.n	d710 <__cxa_begin_catch+0x14>
    d73e:	79e2      	ldrb	r2, [r4, #7]
    d740:	2a01      	cmp	r2, #1
    d742:	d8e5      	bhi.n	d710 <__cxa_begin_catch+0x14>
    d744:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    d748:	2a00      	cmp	r2, #0
    d74a:	db10      	blt.n	d76e <__cxa_begin_catch+0x72>
    d74c:	3201      	adds	r2, #1
    d74e:	6845      	ldr	r5, [r0, #4]
    d750:	f844 2c0c 	str.w	r2, [r4, #-12]
    d754:	3d01      	subs	r5, #1
    d756:	6045      	str	r5, [r0, #4]
    d758:	428b      	cmp	r3, r1
    d75a:	bf1c      	itt	ne
    d75c:	f844 3c10 	strne.w	r3, [r4, #-16]
    d760:	6001      	strne	r1, [r0, #0]
    d762:	4620      	mov	r0, r4
    d764:	6a64      	ldr	r4, [r4, #36]	; 0x24
    d766:	f009 f861 	bl	1682c <_Unwind_Complete>
    d76a:	4620      	mov	r0, r4
    d76c:	bd38      	pop	{r3, r4, r5, pc}
    d76e:	f1c2 0201 	rsb	r2, r2, #1
    d772:	e7ec      	b.n	d74e <__cxa_begin_catch+0x52>
    d774:	f000 fb9e 	bl	deb4 <_ZSt9terminatev>

0000d778 <__cxa_end_catch>:
    d778:	b508      	push	{r3, lr}
    d77a:	f000 f857 	bl	d82c <__cxa_get_globals_fast>
    d77e:	4602      	mov	r2, r0
    d780:	6800      	ldr	r0, [r0, #0]
    d782:	2800      	cmp	r0, #0
    d784:	d03d      	beq.n	d802 <__cxa_end_catch+0x8a>
    d786:	f890 3020 	ldrb.w	r3, [r0, #32]
    d78a:	2b47      	cmp	r3, #71	; 0x47
    d78c:	d006      	beq.n	d79c <__cxa_end_catch+0x24>
    d78e:	2300      	movs	r3, #0
    d790:	6013      	str	r3, [r2, #0]
    d792:	3020      	adds	r0, #32
    d794:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d798:	f009 b84a 	b.w	16830 <_Unwind_DeleteException>
    d79c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    d7a0:	2b4e      	cmp	r3, #78	; 0x4e
    d7a2:	d1f4      	bne.n	d78e <__cxa_end_catch+0x16>
    d7a4:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    d7a8:	2b55      	cmp	r3, #85	; 0x55
    d7aa:	d1f0      	bne.n	d78e <__cxa_end_catch+0x16>
    d7ac:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    d7b0:	2b43      	cmp	r3, #67	; 0x43
    d7b2:	d1ec      	bne.n	d78e <__cxa_end_catch+0x16>
    d7b4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    d7b8:	2b43      	cmp	r3, #67	; 0x43
    d7ba:	d1e8      	bne.n	d78e <__cxa_end_catch+0x16>
    d7bc:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
    d7c0:	2b2b      	cmp	r3, #43	; 0x2b
    d7c2:	d1e4      	bne.n	d78e <__cxa_end_catch+0x16>
    d7c4:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
    d7c8:	2b2b      	cmp	r3, #43	; 0x2b
    d7ca:	d1e0      	bne.n	d78e <__cxa_end_catch+0x16>
    d7cc:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
    d7d0:	2b01      	cmp	r3, #1
    d7d2:	d8dc      	bhi.n	d78e <__cxa_end_catch+0x16>
    d7d4:	6943      	ldr	r3, [r0, #20]
    d7d6:	2b00      	cmp	r3, #0
    d7d8:	db05      	blt.n	d7e6 <__cxa_end_catch+0x6e>
    d7da:	3b01      	subs	r3, #1
    d7dc:	d008      	beq.n	d7f0 <__cxa_end_catch+0x78>
    d7de:	1c5a      	adds	r2, r3, #1
    d7e0:	d00d      	beq.n	d7fe <__cxa_end_catch+0x86>
    d7e2:	6143      	str	r3, [r0, #20]
    d7e4:	bd08      	pop	{r3, pc}
    d7e6:	3301      	adds	r3, #1
    d7e8:	d1fb      	bne.n	d7e2 <__cxa_end_catch+0x6a>
    d7ea:	6901      	ldr	r1, [r0, #16]
    d7ec:	6011      	str	r1, [r2, #0]
    d7ee:	e7f8      	b.n	d7e2 <__cxa_end_catch+0x6a>
    d7f0:	6903      	ldr	r3, [r0, #16]
    d7f2:	6013      	str	r3, [r2, #0]
    d7f4:	3020      	adds	r0, #32
    d7f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d7fa:	f009 b819 	b.w	16830 <_Unwind_DeleteException>
    d7fe:	f000 fb59 	bl	deb4 <_ZSt9terminatev>
    d802:	bd08      	pop	{r3, pc}

0000d804 <_ZNSt9exceptionD1Ev>:
    d804:	4770      	bx	lr
    d806:	bf00      	nop

0000d808 <_ZNSt13bad_exceptionD1Ev>:
    d808:	4770      	bx	lr
    d80a:	bf00      	nop

0000d80c <_ZGTtNKSt9exception4whatEv>:
    d80c:	4800      	ldr	r0, [pc, #0]	; (d810 <_ZGTtNKSt9exception4whatEv+0x4>)
    d80e:	4770      	bx	lr
    d810:	0003d194 	.word	0x0003d194

0000d814 <_ZGTtNKSt13bad_exception4whatEv>:
    d814:	4800      	ldr	r0, [pc, #0]	; (d818 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
    d816:	4770      	bx	lr
    d818:	0003d180 	.word	0x0003d180

0000d81c <_ZNSt13bad_exceptionD0Ev>:
    d81c:	b510      	push	{r4, lr}
    d81e:	2104      	movs	r1, #4
    d820:	4604      	mov	r4, r0
    d822:	f7ff fdf3 	bl	d40c <_ZdlPvj>
    d826:	4620      	mov	r0, r4
    d828:	bd10      	pop	{r4, pc}
    d82a:	bf00      	nop

0000d82c <__cxa_get_globals_fast>:
    d82c:	4800      	ldr	r0, [pc, #0]	; (d830 <__cxa_get_globals_fast+0x4>)
    d82e:	4770      	bx	lr
    d830:	2001afb8 	.word	0x2001afb8

0000d834 <__cxa_get_globals>:
    d834:	4800      	ldr	r0, [pc, #0]	; (d838 <__cxa_get_globals+0x4>)
    d836:	4770      	bx	lr
    d838:	2001afb8 	.word	0x2001afb8

0000d83c <_ZL28read_encoded_value_with_basehjPKhPj>:
    d83c:	2850      	cmp	r0, #80	; 0x50
    d83e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d840:	d054      	beq.n	d8ec <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
    d842:	f000 040f 	and.w	r4, r0, #15
    d846:	2c0c      	cmp	r4, #12
    d848:	d84e      	bhi.n	d8e8 <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
    d84a:	e8df f004 	tbb	[pc, r4]
    d84e:	3907      	.short	0x3907
    d850:	4d170749 	.word	0x4d170749
    d854:	1f4d4d4d 	.word	0x1f4d4d4d
    d858:	071b      	.short	0x071b
    d85a:	17          	.byte	0x17
    d85b:	00          	.byte	0x00
    d85c:	4615      	mov	r5, r2
    d85e:	f855 4b04 	ldr.w	r4, [r5], #4
    d862:	b144      	cbz	r4, d876 <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
    d864:	f000 0670 	and.w	r6, r0, #112	; 0x70
    d868:	2e10      	cmp	r6, #16
    d86a:	bf08      	it	eq
    d86c:	4611      	moveq	r1, r2
    d86e:	440c      	add	r4, r1
    d870:	0602      	lsls	r2, r0, #24
    d872:	bf48      	it	mi
    d874:	6824      	ldrmi	r4, [r4, #0]
    d876:	601c      	str	r4, [r3, #0]
    d878:	4628      	mov	r0, r5
    d87a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d87c:	4615      	mov	r5, r2
    d87e:	f855 4b08 	ldr.w	r4, [r5], #8
    d882:	e7ee      	b.n	d862 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
    d884:	4615      	mov	r5, r2
    d886:	f935 4b02 	ldrsh.w	r4, [r5], #2
    d88a:	e7ea      	b.n	d862 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
    d88c:	2400      	movs	r4, #0
    d88e:	4627      	mov	r7, r4
    d890:	4615      	mov	r5, r2
    d892:	f815 eb01 	ldrb.w	lr, [r5], #1
    d896:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
    d89a:	40be      	lsls	r6, r7
    d89c:	f01e 0f80 	tst.w	lr, #128	; 0x80
    d8a0:	ea44 0406 	orr.w	r4, r4, r6
    d8a4:	f107 0707 	add.w	r7, r7, #7
    d8a8:	d1f3      	bne.n	d892 <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
    d8aa:	2f1f      	cmp	r7, #31
    d8ac:	d8d9      	bhi.n	d862 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
    d8ae:	f01e 0f40 	tst.w	lr, #64	; 0x40
    d8b2:	d0d6      	beq.n	d862 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
    d8b4:	f04f 36ff 	mov.w	r6, #4294967295
    d8b8:	fa06 f707 	lsl.w	r7, r6, r7
    d8bc:	433c      	orrs	r4, r7
    d8be:	e7d1      	b.n	d864 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
    d8c0:	2400      	movs	r4, #0
    d8c2:	4627      	mov	r7, r4
    d8c4:	4615      	mov	r5, r2
    d8c6:	f815 eb01 	ldrb.w	lr, [r5], #1
    d8ca:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
    d8ce:	40be      	lsls	r6, r7
    d8d0:	f01e 0f80 	tst.w	lr, #128	; 0x80
    d8d4:	ea44 0406 	orr.w	r4, r4, r6
    d8d8:	f107 0707 	add.w	r7, r7, #7
    d8dc:	d1f3      	bne.n	d8c6 <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
    d8de:	e7c0      	b.n	d862 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
    d8e0:	4615      	mov	r5, r2
    d8e2:	f835 4b02 	ldrh.w	r4, [r5], #2
    d8e6:	e7bc      	b.n	d862 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
    d8e8:	f009 fd58 	bl	1739c <abort>
    d8ec:	3203      	adds	r2, #3
    d8ee:	f022 0503 	bic.w	r5, r2, #3
    d8f2:	f855 4b04 	ldr.w	r4, [r5], #4
    d8f6:	601c      	str	r4, [r3, #0]
    d8f8:	4628      	mov	r0, r5
    d8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d8fc <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    d8fc:	28ff      	cmp	r0, #255	; 0xff
    d8fe:	d00d      	beq.n	d91c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
    d900:	f000 0070 	and.w	r0, r0, #112	; 0x70
    d904:	2820      	cmp	r0, #32
    d906:	d015      	beq.n	d934 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
    d908:	d90a      	bls.n	d920 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
    d90a:	2840      	cmp	r0, #64	; 0x40
    d90c:	d00f      	beq.n	d92e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
    d90e:	2850      	cmp	r0, #80	; 0x50
    d910:	d004      	beq.n	d91c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
    d912:	2830      	cmp	r0, #48	; 0x30
    d914:	d108      	bne.n	d928 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
    d916:	4608      	mov	r0, r1
    d918:	f009 bd3a 	b.w	17390 <_Unwind_GetDataRelBase>
    d91c:	2000      	movs	r0, #0
    d91e:	4770      	bx	lr
    d920:	2800      	cmp	r0, #0
    d922:	d0fb      	beq.n	d91c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
    d924:	2810      	cmp	r0, #16
    d926:	d0f9      	beq.n	d91c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
    d928:	b508      	push	{r3, lr}
    d92a:	f009 fd37 	bl	1739c <abort>
    d92e:	4608      	mov	r0, r1
    d930:	f009 bd1a 	b.w	17368 <_Unwind_GetRegionStart>
    d934:	4608      	mov	r0, r1
    d936:	f009 bd27 	b.w	17388 <_Unwind_GetTextRelBase>
    d93a:	bf00      	nop

0000d93c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    d93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d93e:	460c      	mov	r4, r1
    d940:	4615      	mov	r5, r2
    d942:	4607      	mov	r7, r0
    d944:	2800      	cmp	r0, #0
    d946:	d044      	beq.n	d9d2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x96>
    d948:	f009 fd0e 	bl	17368 <_Unwind_GetRegionStart>
    d94c:	6028      	str	r0, [r5, #0]
    d94e:	7826      	ldrb	r6, [r4, #0]
    d950:	2eff      	cmp	r6, #255	; 0xff
    d952:	f104 0401 	add.w	r4, r4, #1
    d956:	d032      	beq.n	d9be <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
    d958:	4639      	mov	r1, r7
    d95a:	4630      	mov	r0, r6
    d95c:	f7ff ffce 	bl	d8fc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    d960:	4622      	mov	r2, r4
    d962:	4601      	mov	r1, r0
    d964:	1d2b      	adds	r3, r5, #4
    d966:	4630      	mov	r0, r6
    d968:	f7ff ff68 	bl	d83c <_ZL28read_encoded_value_with_basehjPKhPj>
    d96c:	4604      	mov	r4, r0
    d96e:	1c60      	adds	r0, r4, #1
    d970:	7823      	ldrb	r3, [r4, #0]
    d972:	752b      	strb	r3, [r5, #20]
    d974:	2bff      	cmp	r3, #255	; 0xff
    d976:	d029      	beq.n	d9cc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
    d978:	2310      	movs	r3, #16
    d97a:	2400      	movs	r4, #0
    d97c:	752b      	strb	r3, [r5, #20]
    d97e:	4622      	mov	r2, r4
    d980:	f810 1b01 	ldrb.w	r1, [r0], #1
    d984:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    d988:	4093      	lsls	r3, r2
    d98a:	0609      	lsls	r1, r1, #24
    d98c:	ea44 0403 	orr.w	r4, r4, r3
    d990:	f102 0207 	add.w	r2, r2, #7
    d994:	d4f4      	bmi.n	d980 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
    d996:	4404      	add	r4, r0
    d998:	60ec      	str	r4, [r5, #12]
    d99a:	7803      	ldrb	r3, [r0, #0]
    d99c:	756b      	strb	r3, [r5, #21]
    d99e:	2400      	movs	r4, #0
    d9a0:	3001      	adds	r0, #1
    d9a2:	4622      	mov	r2, r4
    d9a4:	f810 1b01 	ldrb.w	r1, [r0], #1
    d9a8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    d9ac:	4093      	lsls	r3, r2
    d9ae:	431c      	orrs	r4, r3
    d9b0:	060b      	lsls	r3, r1, #24
    d9b2:	f102 0207 	add.w	r2, r2, #7
    d9b6:	d4f5      	bmi.n	d9a4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x68>
    d9b8:	4404      	add	r4, r0
    d9ba:	612c      	str	r4, [r5, #16]
    d9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d9be:	6068      	str	r0, [r5, #4]
    d9c0:	7823      	ldrb	r3, [r4, #0]
    d9c2:	752b      	strb	r3, [r5, #20]
    d9c4:	2bff      	cmp	r3, #255	; 0xff
    d9c6:	f104 0001 	add.w	r0, r4, #1
    d9ca:	d1d5      	bne.n	d978 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>
    d9cc:	2300      	movs	r3, #0
    d9ce:	60eb      	str	r3, [r5, #12]
    d9d0:	e7e3      	b.n	d99a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
    d9d2:	e7bb      	b.n	d94c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

0000d9d4 <__gxx_personality_v0>:
    d9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9d8:	f000 0403 	and.w	r4, r0, #3
    d9dc:	b097      	sub	sp, #92	; 0x5c
    d9de:	2300      	movs	r3, #0
    d9e0:	2c01      	cmp	r4, #1
    d9e2:	4689      	mov	r9, r1
    d9e4:	4617      	mov	r7, r2
    d9e6:	930a      	str	r3, [sp, #40]	; 0x28
    d9e8:	d01e      	beq.n	da28 <__gxx_personality_v0+0x54>
    d9ea:	d30e      	bcc.n	da0a <__gxx_personality_v0+0x36>
    d9ec:	2c02      	cmp	r4, #2
    d9ee:	d10a      	bne.n	da06 <__gxx_personality_v0+0x32>
    d9f0:	4639      	mov	r1, r7
    d9f2:	4648      	mov	r0, r9
    d9f4:	f009 fca4 	bl	17340 <__gnu_unwind_frame>
    d9f8:	2800      	cmp	r0, #0
    d9fa:	f000 80a5 	beq.w	db48 <__gxx_personality_v0+0x174>
    d9fe:	2009      	movs	r0, #9
    da00:	b017      	add	sp, #92	; 0x5c
    da02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da06:	f009 fcc9 	bl	1739c <abort>
    da0a:	0700      	lsls	r0, r0, #28
    da0c:	d4f0      	bmi.n	d9f0 <__gxx_personality_v0+0x1c>
    da0e:	2301      	movs	r3, #1
    da10:	9303      	str	r3, [sp, #12]
    da12:	aa16      	add	r2, sp, #88	; 0x58
    da14:	2300      	movs	r3, #0
    da16:	f842 9d2c 	str.w	r9, [r2, #-44]!
    da1a:	4619      	mov	r1, r3
    da1c:	9200      	str	r2, [sp, #0]
    da1e:	4638      	mov	r0, r7
    da20:	220c      	movs	r2, #12
    da22:	f008 ff31 	bl	16888 <_Unwind_VRS_Set>
    da26:	e00f      	b.n	da48 <__gxx_personality_v0+0x74>
    da28:	f010 0408 	ands.w	r4, r0, #8
    da2c:	f000 8090 	beq.w	db50 <__gxx_personality_v0+0x17c>
    da30:	aa16      	add	r2, sp, #88	; 0x58
    da32:	f044 0402 	orr.w	r4, r4, #2
    da36:	f842 1d2c 	str.w	r1, [r2, #-44]!
    da3a:	4638      	mov	r0, r7
    da3c:	9200      	str	r2, [sp, #0]
    da3e:	4619      	mov	r1, r3
    da40:	220c      	movs	r2, #12
    da42:	9403      	str	r4, [sp, #12]
    da44:	f008 ff20 	bl	16888 <_Unwind_VRS_Set>
    da48:	4638      	mov	r0, r7
    da4a:	f009 fc93 	bl	17374 <_Unwind_GetLanguageSpecificData>
    da4e:	9005      	str	r0, [sp, #20]
    da50:	2800      	cmp	r0, #0
    da52:	d0cd      	beq.n	d9f0 <__gxx_personality_v0+0x1c>
    da54:	ab10      	add	r3, sp, #64	; 0x40
    da56:	461a      	mov	r2, r3
    da58:	9905      	ldr	r1, [sp, #20]
    da5a:	9306      	str	r3, [sp, #24]
    da5c:	4638      	mov	r0, r7
    da5e:	f7ff ff6d 	bl	d93c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    da62:	4639      	mov	r1, r7
    da64:	4604      	mov	r4, r0
    da66:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    da6a:	f7ff ff47 	bl	d8fc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    da6e:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
    da72:	2300      	movs	r3, #0
    da74:	9012      	str	r0, [sp, #72]	; 0x48
    da76:	4619      	mov	r1, r3
    da78:	220f      	movs	r2, #15
    da7a:	f8cd b000 	str.w	fp, [sp]
    da7e:	4638      	mov	r0, r7
    da80:	f008 fedc 	bl	1683c <_Unwind_VRS_Get>
    da84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    da86:	9a14      	ldr	r2, [sp, #80]	; 0x50
    da88:	f023 0301 	bic.w	r3, r3, #1
    da8c:	42a2      	cmp	r2, r4
    da8e:	f103 36ff 	add.w	r6, r3, #4294967295
    da92:	d975      	bls.n	db80 <__gxx_personality_v0+0x1ac>
    da94:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
    da98:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    da9c:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
    daa0:	2100      	movs	r1, #0
    daa2:	4628      	mov	r0, r5
    daa4:	f7ff ff2a 	bl	d8fc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    daa8:	4622      	mov	r2, r4
    daaa:	4653      	mov	r3, sl
    daac:	4601      	mov	r1, r0
    daae:	4628      	mov	r0, r5
    dab0:	f7ff fec4 	bl	d83c <_ZL28read_encoded_value_with_basehjPKhPj>
    dab4:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
    dab8:	4605      	mov	r5, r0
    daba:	2100      	movs	r1, #0
    dabc:	4620      	mov	r0, r4
    dabe:	f7ff ff1d 	bl	d8fc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    dac2:	462a      	mov	r2, r5
    dac4:	4643      	mov	r3, r8
    dac6:	4601      	mov	r1, r0
    dac8:	4620      	mov	r0, r4
    daca:	f7ff feb7 	bl	d83c <_ZL28read_encoded_value_with_basehjPKhPj>
    dace:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
    dad2:	4605      	mov	r5, r0
    dad4:	2100      	movs	r1, #0
    dad6:	4620      	mov	r0, r4
    dad8:	f7ff ff10 	bl	d8fc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    dadc:	462a      	mov	r2, r5
    dade:	4601      	mov	r1, r0
    dae0:	465b      	mov	r3, fp
    dae2:	4620      	mov	r0, r4
    dae4:	f7ff feaa 	bl	d83c <_ZL28read_encoded_value_with_basehjPKhPj>
    dae8:	4604      	mov	r4, r0
    daea:	2000      	movs	r0, #0
    daec:	4602      	mov	r2, r0
    daee:	f814 1b01 	ldrb.w	r1, [r4], #1
    daf2:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    daf6:	4093      	lsls	r3, r2
    daf8:	0609      	lsls	r1, r1, #24
    dafa:	ea40 0003 	orr.w	r0, r0, r3
    dafe:	f102 0207 	add.w	r2, r2, #7
    db02:	d4f4      	bmi.n	daee <__gxx_personality_v0+0x11a>
    db04:	9b10      	ldr	r3, [sp, #64]	; 0x40
    db06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    db08:	4413      	add	r3, r2
    db0a:	429e      	cmp	r6, r3
    db0c:	d231      	bcs.n	db72 <__gxx_personality_v0+0x19e>
    db0e:	9b03      	ldr	r3, [sp, #12]
    db10:	07db      	lsls	r3, r3, #31
    db12:	d539      	bpl.n	db88 <__gxx_personality_v0+0x1b4>
    db14:	2500      	movs	r5, #0
    db16:	9504      	str	r5, [sp, #16]
    db18:	2300      	movs	r3, #0
    db1a:	4619      	mov	r1, r3
    db1c:	220d      	movs	r2, #13
    db1e:	f8cd 8000 	str.w	r8, [sp]
    db22:	4638      	mov	r0, r7
    db24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    db26:	f008 fe89 	bl	1683c <_Unwind_VRS_Get>
    db2a:	9a05      	ldr	r2, [sp, #20]
    db2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    db2e:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
    db32:	9a04      	ldr	r2, [sp, #16]
    db34:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
    db38:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
    db3c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
    db40:	f8c9 3020 	str.w	r3, [r9, #32]
    db44:	2006      	movs	r0, #6
    db46:	e75b      	b.n	da00 <__gxx_personality_v0+0x2c>
    db48:	2008      	movs	r0, #8
    db4a:	b017      	add	sp, #92	; 0x5c
    db4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db50:	ab10      	add	r3, sp, #64	; 0x40
    db52:	9300      	str	r3, [sp, #0]
    db54:	9306      	str	r3, [sp, #24]
    db56:	220d      	movs	r2, #13
    db58:	4623      	mov	r3, r4
    db5a:	4621      	mov	r1, r4
    db5c:	4638      	mov	r0, r7
    db5e:	f8d9 5020 	ldr.w	r5, [r9, #32]
    db62:	f008 fe6b 	bl	1683c <_Unwind_VRS_Get>
    db66:	9b10      	ldr	r3, [sp, #64]	; 0x40
    db68:	429d      	cmp	r5, r3
    db6a:	d012      	beq.n	db92 <__gxx_personality_v0+0x1be>
    db6c:	2302      	movs	r3, #2
    db6e:	9303      	str	r3, [sp, #12]
    db70:	e74f      	b.n	da12 <__gxx_personality_v0+0x3e>
    db72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    db74:	4413      	add	r3, r2
    db76:	429e      	cmp	r6, r3
    db78:	d359      	bcc.n	dc2e <__gxx_personality_v0+0x25a>
    db7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    db7c:	42a3      	cmp	r3, r4
    db7e:	d88d      	bhi.n	da9c <__gxx_personality_v0+0xc8>
    db80:	2500      	movs	r5, #0
    db82:	9504      	str	r5, [sp, #16]
    db84:	2401      	movs	r4, #1
    db86:	e105      	b.n	dd94 <__gxx_personality_v0+0x3c0>
    db88:	9b03      	ldr	r3, [sp, #12]
    db8a:	071b      	lsls	r3, r3, #28
    db8c:	d54c      	bpl.n	dc28 <__gxx_personality_v0+0x254>
    db8e:	f000 f991 	bl	deb4 <_ZSt9terminatev>
    db92:	aa16      	add	r2, sp, #88	; 0x58
    db94:	4623      	mov	r3, r4
    db96:	f842 9d2c 	str.w	r9, [r2, #-44]!
    db9a:	4621      	mov	r1, r4
    db9c:	9200      	str	r2, [sp, #0]
    db9e:	4638      	mov	r0, r7
    dba0:	220c      	movs	r2, #12
    dba2:	f008 fe71 	bl	16888 <_Unwind_VRS_Set>
    dba6:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
    dbaa:	9304      	str	r3, [sp, #16]
    dbac:	2b00      	cmp	r3, #0
    dbae:	d03b      	beq.n	dc28 <__gxx_personality_v0+0x254>
    dbb0:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
    dbb4:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
    dbb8:	2403      	movs	r4, #3
    dbba:	2d00      	cmp	r5, #0
    dbbc:	f2c0 8106 	blt.w	ddcc <__gxx_personality_v0+0x3f8>
    dbc0:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
    dbc4:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    dbc8:	a916      	add	r1, sp, #88	; 0x58
    dbca:	2300      	movs	r3, #0
    dbcc:	f841 9d28 	str.w	r9, [r1, #-40]!
    dbd0:	461a      	mov	r2, r3
    dbd2:	9100      	str	r1, [sp, #0]
    dbd4:	4638      	mov	r0, r7
    dbd6:	4619      	mov	r1, r3
    dbd8:	f008 fe56 	bl	16888 <_Unwind_VRS_Set>
    dbdc:	2300      	movs	r3, #0
    dbde:	4619      	mov	r1, r3
    dbe0:	2201      	movs	r2, #1
    dbe2:	f8cd a000 	str.w	sl, [sp]
    dbe6:	4638      	mov	r0, r7
    dbe8:	950d      	str	r5, [sp, #52]	; 0x34
    dbea:	f008 fe4d 	bl	16888 <_Unwind_VRS_Set>
    dbee:	2300      	movs	r3, #0
    dbf0:	4619      	mov	r1, r3
    dbf2:	220f      	movs	r2, #15
    dbf4:	f8cd 8000 	str.w	r8, [sp]
    dbf8:	4638      	mov	r0, r7
    dbfa:	f008 fe1f 	bl	1683c <_Unwind_VRS_Get>
    dbfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dc00:	9a04      	ldr	r2, [sp, #16]
    dc02:	f8cd 8000 	str.w	r8, [sp]
    dc06:	f003 0501 	and.w	r5, r3, #1
    dc0a:	2300      	movs	r3, #0
    dc0c:	4315      	orrs	r5, r2
    dc0e:	4638      	mov	r0, r7
    dc10:	4619      	mov	r1, r3
    dc12:	220f      	movs	r2, #15
    dc14:	950e      	str	r5, [sp, #56]	; 0x38
    dc16:	f008 fe37 	bl	16888 <_Unwind_VRS_Set>
    dc1a:	2c02      	cmp	r4, #2
    dc1c:	f000 8080 	beq.w	dd20 <__gxx_personality_v0+0x34c>
    dc20:	2007      	movs	r0, #7
    dc22:	b017      	add	sp, #92	; 0x5c
    dc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc28:	4648      	mov	r0, r9
    dc2a:	f000 fb7b 	bl	e324 <__cxa_call_terminate>
    dc2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dc30:	9304      	str	r3, [sp, #16]
    dc32:	461a      	mov	r2, r3
    dc34:	2b00      	cmp	r3, #0
    dc36:	d178      	bne.n	dd2a <__gxx_personality_v0+0x356>
    dc38:	2800      	cmp	r0, #0
    dc3a:	f43f aed9 	beq.w	d9f0 <__gxx_personality_v0+0x1c>
    dc3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    dc40:	9a04      	ldr	r2, [sp, #16]
    dc42:	3801      	subs	r0, #1
    dc44:	4403      	add	r3, r0
    dc46:	2a00      	cmp	r2, #0
    dc48:	f43f aed2 	beq.w	d9f0 <__gxx_personality_v0+0x1c>
    dc4c:	2b00      	cmp	r3, #0
    dc4e:	d075      	beq.n	dd3c <__gxx_personality_v0+0x368>
    dc50:	9a03      	ldr	r2, [sp, #12]
    dc52:	f012 0208 	ands.w	r2, r2, #8
    dc56:	9209      	str	r2, [sp, #36]	; 0x24
    dc58:	f000 80f6 	beq.w	de48 <__gxx_personality_v0+0x474>
    dc5c:	2147      	movs	r1, #71	; 0x47
    dc5e:	224e      	movs	r2, #78	; 0x4e
    dc60:	f889 1000 	strb.w	r1, [r9]
    dc64:	f889 2001 	strb.w	r2, [r9, #1]
    dc68:	2155      	movs	r1, #85	; 0x55
    dc6a:	2243      	movs	r2, #67	; 0x43
    dc6c:	f889 1002 	strb.w	r1, [r9, #2]
    dc70:	f889 2003 	strb.w	r2, [r9, #3]
    dc74:	2146      	movs	r1, #70	; 0x46
    dc76:	224f      	movs	r2, #79	; 0x4f
    dc78:	f889 1004 	strb.w	r1, [r9, #4]
    dc7c:	f889 2005 	strb.w	r2, [r9, #5]
    dc80:	2152      	movs	r1, #82	; 0x52
    dc82:	2200      	movs	r2, #0
    dc84:	f889 1006 	strb.w	r1, [r9, #6]
    dc88:	f889 2007 	strb.w	r2, [r9, #7]
    dc8c:	2200      	movs	r2, #0
    dc8e:	9208      	str	r2, [sp, #32]
    dc90:	9707      	str	r7, [sp, #28]
    dc92:	2500      	movs	r5, #0
    dc94:	4629      	mov	r1, r5
    dc96:	e000      	b.n	dc9a <__gxx_personality_v0+0x2c6>
    dc98:	4623      	mov	r3, r4
    dc9a:	461c      	mov	r4, r3
    dc9c:	f814 0b01 	ldrb.w	r0, [r4], #1
    dca0:	f000 027f 	and.w	r2, r0, #127	; 0x7f
    dca4:	408a      	lsls	r2, r1
    dca6:	0606      	lsls	r6, r0, #24
    dca8:	ea45 0502 	orr.w	r5, r5, r2
    dcac:	f101 0107 	add.w	r1, r1, #7
    dcb0:	d4f2      	bmi.n	dc98 <__gxx_personality_v0+0x2c4>
    dcb2:	291f      	cmp	r1, #31
    dcb4:	d805      	bhi.n	dcc2 <__gxx_personality_v0+0x2ee>
    dcb6:	0642      	lsls	r2, r0, #25
    dcb8:	d503      	bpl.n	dcc2 <__gxx_personality_v0+0x2ee>
    dcba:	2201      	movs	r2, #1
    dcbc:	408a      	lsls	r2, r1
    dcbe:	4252      	negs	r2, r2
    dcc0:	4315      	orrs	r5, r2
    dcc2:	2600      	movs	r6, #0
    dcc4:	4631      	mov	r1, r6
    dcc6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    dcca:	f000 027f 	and.w	r2, r0, #127	; 0x7f
    dcce:	408a      	lsls	r2, r1
    dcd0:	0607      	lsls	r7, r0, #24
    dcd2:	ea46 0602 	orr.w	r6, r6, r2
    dcd6:	f101 0107 	add.w	r1, r1, #7
    dcda:	d4f4      	bmi.n	dcc6 <__gxx_personality_v0+0x2f2>
    dcdc:	291f      	cmp	r1, #31
    dcde:	d805      	bhi.n	dcec <__gxx_personality_v0+0x318>
    dce0:	0640      	lsls	r0, r0, #25
    dce2:	d503      	bpl.n	dcec <__gxx_personality_v0+0x318>
    dce4:	2301      	movs	r3, #1
    dce6:	408b      	lsls	r3, r1
    dce8:	425b      	negs	r3, r3
    dcea:	431e      	orrs	r6, r3
    dcec:	2d00      	cmp	r5, #0
    dcee:	d05c      	beq.n	ddaa <__gxx_personality_v0+0x3d6>
    dcf0:	dd5e      	ble.n	ddb0 <__gxx_personality_v0+0x3dc>
    dcf2:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    dcf6:	28ff      	cmp	r0, #255	; 0xff
    dcf8:	f000 80a4 	beq.w	de44 <__gxx_personality_v0+0x470>
    dcfc:	f000 0307 	and.w	r3, r0, #7
    dd00:	2b04      	cmp	r3, #4
    dd02:	f63f ae80 	bhi.w	da06 <__gxx_personality_v0+0x32>
    dd06:	a201      	add	r2, pc, #4	; (adr r2, dd0c <__gxx_personality_v0+0x338>)
    dd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    dd0c:	0000dd77 	.word	0x0000dd77
    dd10:	0000da07 	.word	0x0000da07
    dd14:	0000dd7d 	.word	0x0000dd7d
    dd18:	0000dd77 	.word	0x0000dd77
    dd1c:	0000dd55 	.word	0x0000dd55
    dd20:	4648      	mov	r0, r9
    dd22:	f7ff fc81 	bl	d628 <__cxa_begin_cleanup>
    dd26:	2007      	movs	r0, #7
    dd28:	e66a      	b.n	da00 <__gxx_personality_v0+0x2c>
    dd2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    dd2c:	441a      	add	r2, r3
    dd2e:	9204      	str	r2, [sp, #16]
    dd30:	2800      	cmp	r0, #0
    dd32:	d184      	bne.n	dc3e <__gxx_personality_v0+0x26a>
    dd34:	9b04      	ldr	r3, [sp, #16]
    dd36:	2b00      	cmp	r3, #0
    dd38:	f43f ae5a 	beq.w	d9f0 <__gxx_personality_v0+0x1c>
    dd3c:	9b03      	ldr	r3, [sp, #12]
    dd3e:	f013 0301 	ands.w	r3, r3, #1
    dd42:	f47f ae55 	bne.w	d9f0 <__gxx_personality_v0+0x1c>
    dd46:	9a03      	ldr	r2, [sp, #12]
    dd48:	f012 0508 	ands.w	r5, r2, #8
    dd4c:	f040 8097 	bne.w	de7e <__gxx_personality_v0+0x4aa>
    dd50:	2402      	movs	r4, #2
    dd52:	e739      	b.n	dbc8 <__gxx_personality_v0+0x1f4>
    dd54:	00eb      	lsls	r3, r5, #3
    dd56:	425b      	negs	r3, r3
    dd58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    dd5a:	9912      	ldr	r1, [sp, #72]	; 0x48
    dd5c:	441a      	add	r2, r3
    dd5e:	4643      	mov	r3, r8
    dd60:	f7ff fd6c 	bl	d83c <_ZL28read_encoded_value_with_basehjPKhPj>
    dd64:	990e      	ldr	r1, [sp, #56]	; 0x38
    dd66:	b199      	cbz	r1, dd90 <__gxx_personality_v0+0x3bc>
    dd68:	f1b9 0f00 	cmp.w	r9, #0
    dd6c:	d109      	bne.n	dd82 <__gxx_personality_v0+0x3ae>
    dd6e:	2e00      	cmp	r6, #0
    dd70:	d077      	beq.n	de62 <__gxx_personality_v0+0x48e>
    dd72:	19a3      	adds	r3, r4, r6
    dd74:	e78d      	b.n	dc92 <__gxx_personality_v0+0x2be>
    dd76:	00ab      	lsls	r3, r5, #2
    dd78:	425b      	negs	r3, r3
    dd7a:	e7ed      	b.n	dd58 <__gxx_personality_v0+0x384>
    dd7c:	006b      	lsls	r3, r5, #1
    dd7e:	425b      	negs	r3, r3
    dd80:	e7ea      	b.n	dd58 <__gxx_personality_v0+0x384>
    dd82:	ab0a      	add	r3, sp, #40	; 0x28
    dd84:	2200      	movs	r2, #0
    dd86:	4648      	mov	r0, r9
    dd88:	f7ff fbf2 	bl	d570 <__cxa_type_match>
    dd8c:	2800      	cmp	r0, #0
    dd8e:	d0ee      	beq.n	dd6e <__gxx_personality_v0+0x39a>
    dd90:	9f07      	ldr	r7, [sp, #28]
    dd92:	2403      	movs	r4, #3
    dd94:	9b03      	ldr	r3, [sp, #12]
    dd96:	07da      	lsls	r2, r3, #31
    dd98:	d460      	bmi.n	de5c <__gxx_personality_v0+0x488>
    dd9a:	9b03      	ldr	r3, [sp, #12]
    dd9c:	0719      	lsls	r1, r3, #28
    dd9e:	d466      	bmi.n	de6e <__gxx_personality_v0+0x49a>
    dda0:	2c01      	cmp	r4, #1
    dda2:	f43f af41 	beq.w	dc28 <__gxx_personality_v0+0x254>
    dda6:	9905      	ldr	r1, [sp, #20]
    dda8:	e707      	b.n	dbba <__gxx_personality_v0+0x1e6>
    ddaa:	2301      	movs	r3, #1
    ddac:	9308      	str	r3, [sp, #32]
    ddae:	e7de      	b.n	dd6e <__gxx_personality_v0+0x39a>
    ddb0:	f1b9 0f00 	cmp.w	r9, #0
    ddb4:	d001      	beq.n	ddba <__gxx_personality_v0+0x3e6>
    ddb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ddb8:	b35b      	cbz	r3, de12 <__gxx_personality_v0+0x43e>
    ddba:	1c6b      	adds	r3, r5, #1
    ddbc:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
    ddc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ddc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddc6:	2b00      	cmp	r3, #0
    ddc8:	d1d1      	bne.n	dd6e <__gxx_personality_v0+0x39a>
    ddca:	e7e1      	b.n	dd90 <__gxx_personality_v0+0x3bc>
    ddcc:	9a06      	ldr	r2, [sp, #24]
    ddce:	4638      	mov	r0, r7
    ddd0:	f7ff fdb4 	bl	d93c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    ddd4:	4639      	mov	r1, r7
    ddd6:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    ddda:	f7ff fd8f 	bl	d8fc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    ddde:	00aa      	lsls	r2, r5, #2
    dde0:	f082 0203 	eor.w	r2, r2, #3
    dde4:	43d2      	mvns	r2, r2
    dde6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    dde8:	9012      	str	r0, [sp, #72]	; 0x48
    ddea:	58b3      	ldr	r3, [r6, r2]
    ddec:	4416      	add	r6, r2
    ddee:	b133      	cbz	r3, ddfe <__gxx_personality_v0+0x42a>
    ddf0:	4632      	mov	r2, r6
    ddf2:	2300      	movs	r3, #0
    ddf4:	f852 1f04 	ldr.w	r1, [r2, #4]!
    ddf8:	3301      	adds	r3, #1
    ddfa:	2900      	cmp	r1, #0
    ddfc:	d1fa      	bne.n	ddf4 <__gxx_personality_v0+0x420>
    ddfe:	2204      	movs	r2, #4
    de00:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
    de04:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
    de08:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
    de0c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
    de10:	e6d6      	b.n	dbc0 <__gxx_personality_v0+0x1ec>
    de12:	1c6f      	adds	r7, r5, #1
    de14:	ebc7 7387 	rsb	r3, r7, r7, lsl #30
    de18:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    de1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    de1c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    de20:	920f      	str	r2, [sp, #60]	; 0x3c
    de22:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    de26:	b921      	cbnz	r1, de32 <__gxx_personality_v0+0x45e>
    de28:	e7b2      	b.n	dd90 <__gxx_personality_v0+0x3bc>
    de2a:	f857 1f04 	ldr.w	r1, [r7, #4]!
    de2e:	2900      	cmp	r1, #0
    de30:	d0ae      	beq.n	dd90 <__gxx_personality_v0+0x3bc>
    de32:	4439      	add	r1, r7
    de34:	465b      	mov	r3, fp
    de36:	2200      	movs	r2, #0
    de38:	4648      	mov	r0, r9
    de3a:	f7ff fb99 	bl	d570 <__cxa_type_match>
    de3e:	2800      	cmp	r0, #0
    de40:	d0f3      	beq.n	de2a <__gxx_personality_v0+0x456>
    de42:	e794      	b.n	dd6e <__gxx_personality_v0+0x39a>
    de44:	2300      	movs	r3, #0
    de46:	e787      	b.n	dd58 <__gxx_personality_v0+0x384>
    de48:	f899 2007 	ldrb.w	r2, [r9, #7]
    de4c:	2a01      	cmp	r2, #1
    de4e:	bf0c      	ite	eq
    de50:	f859 2c20 	ldreq.w	r2, [r9, #-32]
    de54:	f109 0258 	addne.w	r2, r9, #88	; 0x58
    de58:	920a      	str	r2, [sp, #40]	; 0x28
    de5a:	e717      	b.n	dc8c <__gxx_personality_v0+0x2b8>
    de5c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    de60:	e65a      	b.n	db18 <__gxx_personality_v0+0x144>
    de62:	9b08      	ldr	r3, [sp, #32]
    de64:	9f07      	ldr	r7, [sp, #28]
    de66:	2b00      	cmp	r3, #0
    de68:	f47f af68 	bne.w	dd3c <__gxx_personality_v0+0x368>
    de6c:	e5c0      	b.n	d9f0 <__gxx_personality_v0+0x1c>
    de6e:	2c01      	cmp	r4, #1
    de70:	f43f ae8d 	beq.w	db8e <__gxx_personality_v0+0x1ba>
    de74:	2d00      	cmp	r5, #0
    de76:	f6bf aea3 	bge.w	dbc0 <__gxx_personality_v0+0x1ec>
    de7a:	f000 f829 	bl	ded0 <_ZSt10unexpectedv>
    de7e:	461d      	mov	r5, r3
    de80:	2402      	movs	r4, #2
    de82:	e6a1      	b.n	dbc8 <__gxx_personality_v0+0x1f4>
    de84:	f7ff fc3a 	bl	d6fc <__cxa_begin_catch>
    de88:	e681      	b.n	db8e <__gxx_personality_v0+0x1ba>
    de8a:	bf00      	nop

0000de8c <_ZN10__cxxabiv111__terminateEPFvvE>:
    de8c:	b508      	push	{r3, lr}
    de8e:	4780      	blx	r0
    de90:	f009 fa84 	bl	1739c <abort>
    de94:	f7ff fc32 	bl	d6fc <__cxa_begin_catch>
    de98:	f009 fa80 	bl	1739c <abort>
    de9c:	460d      	mov	r5, r1
    de9e:	4604      	mov	r4, r0
    dea0:	f7ff fc6a 	bl	d778 <__cxa_end_catch>
    dea4:	3501      	adds	r5, #1
    dea6:	d001      	beq.n	deac <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
    dea8:	f7ff fb5c 	bl	d564 <__cxa_end_cleanup>
    deac:	4620      	mov	r0, r4
    deae:	f000 fa49 	bl	e344 <__cxa_call_unexpected>
    deb2:	bf00      	nop

0000deb4 <_ZSt9terminatev>:
    deb4:	b508      	push	{r3, lr}
    deb6:	4b03      	ldr	r3, [pc, #12]	; (dec4 <_ZSt9terminatev+0x10>)
    deb8:	6818      	ldr	r0, [r3, #0]
    deba:	f3bf 8f5b 	dmb	ish
    debe:	f7ff ffe5 	bl	de8c <_ZN10__cxxabiv111__terminateEPFvvE>
    dec2:	bf00      	nop
    dec4:	20000018 	.word	0x20000018

0000dec8 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    dec8:	b508      	push	{r3, lr}
    deca:	4780      	blx	r0
    decc:	f7ff fff2 	bl	deb4 <_ZSt9terminatev>

0000ded0 <_ZSt10unexpectedv>:
    ded0:	b508      	push	{r3, lr}
    ded2:	4b03      	ldr	r3, [pc, #12]	; (dee0 <_ZSt10unexpectedv+0x10>)
    ded4:	6818      	ldr	r0, [r3, #0]
    ded6:	f3bf 8f5b 	dmb	ish
    deda:	f7ff fff5 	bl	dec8 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    dede:	bf00      	nop
    dee0:	20000014 	.word	0x20000014

0000dee4 <_ZSt13get_terminatev>:
    dee4:	4b02      	ldr	r3, [pc, #8]	; (def0 <_ZSt13get_terminatev+0xc>)
    dee6:	6818      	ldr	r0, [r3, #0]
    dee8:	f3bf 8f5b 	dmb	ish
    deec:	4770      	bx	lr
    deee:	bf00      	nop
    def0:	20000018 	.word	0x20000018

0000def4 <_ZSt14get_unexpectedv>:
    def4:	4b02      	ldr	r3, [pc, #8]	; (df00 <_ZSt14get_unexpectedv+0xc>)
    def6:	6818      	ldr	r0, [r3, #0]
    def8:	f3bf 8f5b 	dmb	ish
    defc:	4770      	bx	lr
    defe:	bf00      	nop
    df00:	20000014 	.word	0x20000014

0000df04 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
    df04:	2801      	cmp	r0, #1
    df06:	b510      	push	{r4, lr}
    df08:	d81a      	bhi.n	df40 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
    df0a:	f3bf 8f5b 	dmb	ish
    df0e:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
    df12:	e853 2f00 	ldrex	r2, [r3]
    df16:	3a01      	subs	r2, #1
    df18:	e843 2000 	strex	r0, r2, [r3]
    df1c:	2800      	cmp	r0, #0
    df1e:	d1f8      	bne.n	df12 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
    df20:	f3bf 8f5b 	dmb	ish
    df24:	b95a      	cbnz	r2, df3e <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
    df26:	f851 3c1c 	ldr.w	r3, [r1, #-28]
    df2a:	f101 0458 	add.w	r4, r1, #88	; 0x58
    df2e:	b10b      	cbz	r3, df34 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
    df30:	4620      	mov	r0, r4
    df32:	4798      	blx	r3
    df34:	4620      	mov	r0, r4
    df36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df3a:	f7ff baef 	b.w	d51c <__cxa_free_exception>
    df3e:	bd10      	pop	{r4, pc}
    df40:	f851 0c14 	ldr.w	r0, [r1, #-20]
    df44:	f7ff ffa2 	bl	de8c <_ZN10__cxxabiv111__terminateEPFvvE>

0000df48 <__cxa_throw>:
    df48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    df4a:	4604      	mov	r4, r0
    df4c:	460f      	mov	r7, r1
    df4e:	4616      	mov	r6, r2
    df50:	f7ff fc70 	bl	d834 <__cxa_get_globals>
    df54:	6843      	ldr	r3, [r0, #4]
    df56:	2501      	movs	r5, #1
    df58:	442b      	add	r3, r5
    df5a:	6043      	str	r3, [r0, #4]
    df5c:	f844 7c78 	str.w	r7, [r4, #-120]
    df60:	f844 6c74 	str.w	r6, [r4, #-116]
    df64:	f844 5c80 	str.w	r5, [r4, #-128]
    df68:	f7ff ffc4 	bl	def4 <_ZSt14get_unexpectedv>
    df6c:	f844 0c70 	str.w	r0, [r4, #-112]
    df70:	f7ff ffb8 	bl	dee4 <_ZSt13get_terminatev>
    df74:	2347      	movs	r3, #71	; 0x47
    df76:	2243      	movs	r2, #67	; 0x43
    df78:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
    df7c:	4910      	ldr	r1, [pc, #64]	; (dfc0 <__cxa_throw+0x78>)
    df7e:	f804 3c58 	strb.w	r3, [r4, #-88]
    df82:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
    df86:	232b      	movs	r3, #43	; 0x2b
    df88:	2755      	movs	r7, #85	; 0x55
    df8a:	2600      	movs	r6, #0
    df8c:	f844 0c6c 	str.w	r0, [r4, #-108]
    df90:	f804 ec57 	strb.w	lr, [r4, #-87]
    df94:	f844 1c50 	str.w	r1, [r4, #-80]
    df98:	f804 2c55 	strb.w	r2, [r4, #-85]
    df9c:	f804 2c54 	strb.w	r2, [r4, #-84]
    dfa0:	f804 3c53 	strb.w	r3, [r4, #-83]
    dfa4:	f804 3c52 	strb.w	r3, [r4, #-82]
    dfa8:	f804 7c56 	strb.w	r7, [r4, #-86]
    dfac:	f804 6c51 	strb.w	r6, [r4, #-81]
    dfb0:	4628      	mov	r0, r5
    dfb2:	f008 ffd7 	bl	16f64 <_Unwind_RaiseException>
    dfb6:	4628      	mov	r0, r5
    dfb8:	f7ff fba0 	bl	d6fc <__cxa_begin_catch>
    dfbc:	f7ff ff7a 	bl	deb4 <_ZSt9terminatev>
    dfc0:	0000df05 	.word	0x0000df05

0000dfc4 <__cxa_rethrow>:
    dfc4:	b510      	push	{r4, lr}
    dfc6:	f7ff fc35 	bl	d834 <__cxa_get_globals>
    dfca:	6842      	ldr	r2, [r0, #4]
    dfcc:	6804      	ldr	r4, [r0, #0]
    dfce:	3201      	adds	r2, #1
    dfd0:	6042      	str	r2, [r0, #4]
    dfd2:	b164      	cbz	r4, dfee <__cxa_rethrow+0x2a>
    dfd4:	f894 2020 	ldrb.w	r2, [r4, #32]
    dfd8:	2a47      	cmp	r2, #71	; 0x47
    dfda:	d00a      	beq.n	dff2 <__cxa_rethrow+0x2e>
    dfdc:	2200      	movs	r2, #0
    dfde:	6002      	str	r2, [r0, #0]
    dfe0:	3420      	adds	r4, #32
    dfe2:	4620      	mov	r0, r4
    dfe4:	f008 ffe2 	bl	16fac <_Unwind_Resume_or_Rethrow>
    dfe8:	4620      	mov	r0, r4
    dfea:	f7ff fb87 	bl	d6fc <__cxa_begin_catch>
    dfee:	f7ff ff61 	bl	deb4 <_ZSt9terminatev>
    dff2:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    dff6:	2a4e      	cmp	r2, #78	; 0x4e
    dff8:	d1f0      	bne.n	dfdc <__cxa_rethrow+0x18>
    dffa:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    dffe:	2a55      	cmp	r2, #85	; 0x55
    e000:	d1ec      	bne.n	dfdc <__cxa_rethrow+0x18>
    e002:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    e006:	2a43      	cmp	r2, #67	; 0x43
    e008:	d1e8      	bne.n	dfdc <__cxa_rethrow+0x18>
    e00a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    e00e:	2a43      	cmp	r2, #67	; 0x43
    e010:	d1e4      	bne.n	dfdc <__cxa_rethrow+0x18>
    e012:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    e016:	2a2b      	cmp	r2, #43	; 0x2b
    e018:	d1e0      	bne.n	dfdc <__cxa_rethrow+0x18>
    e01a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    e01e:	2a2b      	cmp	r2, #43	; 0x2b
    e020:	d1dc      	bne.n	dfdc <__cxa_rethrow+0x18>
    e022:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
    e026:	2a01      	cmp	r2, #1
    e028:	d8d8      	bhi.n	dfdc <__cxa_rethrow+0x18>
    e02a:	6962      	ldr	r2, [r4, #20]
    e02c:	4252      	negs	r2, r2
    e02e:	6162      	str	r2, [r4, #20]
    e030:	e7d6      	b.n	dfe0 <__cxa_rethrow+0x1c>
    e032:	bf00      	nop

0000e034 <_ZSt15get_new_handlerv>:
    e034:	4b02      	ldr	r3, [pc, #8]	; (e040 <_ZSt15get_new_handlerv+0xc>)
    e036:	6818      	ldr	r0, [r3, #0]
    e038:	f3bf 8f5b 	dmb	ish
    e03c:	4770      	bx	lr
    e03e:	bf00      	nop
    e040:	2001afc4 	.word	0x2001afc4

0000e044 <_ZNKSt11logic_error4whatEv>:
    e044:	6840      	ldr	r0, [r0, #4]
    e046:	4770      	bx	lr

0000e048 <_ZNSt11logic_errorD1Ev>:
    e048:	b510      	push	{r4, lr}
    e04a:	6843      	ldr	r3, [r0, #4]
    e04c:	4a0c      	ldr	r2, [pc, #48]	; (e080 <_ZNSt11logic_errorD1Ev+0x38>)
    e04e:	490d      	ldr	r1, [pc, #52]	; (e084 <_ZNSt11logic_errorD1Ev+0x3c>)
    e050:	6001      	str	r1, [r0, #0]
    e052:	4604      	mov	r4, r0
    e054:	f1a3 000c 	sub.w	r0, r3, #12
    e058:	4290      	cmp	r0, r2
    e05a:	b082      	sub	sp, #8
    e05c:	d105      	bne.n	e06a <_ZNSt11logic_errorD1Ev+0x22>
    e05e:	4620      	mov	r0, r4
    e060:	f7ff fbd0 	bl	d804 <_ZNSt9exceptionD1Ev>
    e064:	4620      	mov	r0, r4
    e066:	b002      	add	sp, #8
    e068:	bd10      	pop	{r4, pc}
    e06a:	f853 2c04 	ldr.w	r2, [r3, #-4]
    e06e:	1e51      	subs	r1, r2, #1
    e070:	2a00      	cmp	r2, #0
    e072:	f843 1c04 	str.w	r1, [r3, #-4]
    e076:	dcf2      	bgt.n	e05e <_ZNSt11logic_errorD1Ev+0x16>
    e078:	a901      	add	r1, sp, #4
    e07a:	f7ff f871 	bl	d160 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    e07e:	e7ee      	b.n	e05e <_ZNSt11logic_errorD1Ev+0x16>
    e080:	2001af68 	.word	0x2001af68
    e084:	0003d288 	.word	0x0003d288

0000e088 <_ZNSt11logic_errorD0Ev>:
    e088:	b510      	push	{r4, lr}
    e08a:	4604      	mov	r4, r0
    e08c:	f7ff ffdc 	bl	e048 <_ZNSt11logic_errorD1Ev>
    e090:	4620      	mov	r0, r4
    e092:	f7fe fe11 	bl	ccb8 <_ZdlPv>
    e096:	4620      	mov	r0, r4
    e098:	bd10      	pop	{r4, pc}
    e09a:	bf00      	nop

0000e09c <_ZNSt12length_errorD1Ev>:
    e09c:	b510      	push	{r4, lr}
    e09e:	4b03      	ldr	r3, [pc, #12]	; (e0ac <_ZNSt12length_errorD1Ev+0x10>)
    e0a0:	6003      	str	r3, [r0, #0]
    e0a2:	4604      	mov	r4, r0
    e0a4:	f7ff ffd0 	bl	e048 <_ZNSt11logic_errorD1Ev>
    e0a8:	4620      	mov	r0, r4
    e0aa:	bd10      	pop	{r4, pc}
    e0ac:	0003d29c 	.word	0x0003d29c

0000e0b0 <_ZNSt12length_errorD0Ev>:
    e0b0:	b510      	push	{r4, lr}
    e0b2:	4b05      	ldr	r3, [pc, #20]	; (e0c8 <_ZNSt12length_errorD0Ev+0x18>)
    e0b4:	6003      	str	r3, [r0, #0]
    e0b6:	4604      	mov	r4, r0
    e0b8:	f7ff ffc6 	bl	e048 <_ZNSt11logic_errorD1Ev>
    e0bc:	4620      	mov	r0, r4
    e0be:	f7fe fdfb 	bl	ccb8 <_ZdlPv>
    e0c2:	4620      	mov	r0, r4
    e0c4:	bd10      	pop	{r4, pc}
    e0c6:	bf00      	nop
    e0c8:	0003d29c 	.word	0x0003d29c

0000e0cc <_ZNSt11logic_errorC1EPKc>:
    e0cc:	b510      	push	{r4, lr}
    e0ce:	4b08      	ldr	r3, [pc, #32]	; (e0f0 <_ZNSt11logic_errorC1EPKc+0x24>)
    e0d0:	b082      	sub	sp, #8
    e0d2:	4604      	mov	r4, r0
    e0d4:	aa01      	add	r2, sp, #4
    e0d6:	f840 3b04 	str.w	r3, [r0], #4
    e0da:	f7ff f863 	bl	d1a4 <_ZNSsC1EPKcRKSaIcE>
    e0de:	4620      	mov	r0, r4
    e0e0:	b002      	add	sp, #8
    e0e2:	bd10      	pop	{r4, pc}
    e0e4:	4620      	mov	r0, r4
    e0e6:	f7ff fb8d 	bl	d804 <_ZNSt9exceptionD1Ev>
    e0ea:	f7ff fa3b 	bl	d564 <__cxa_end_cleanup>
    e0ee:	bf00      	nop
    e0f0:	0003d288 	.word	0x0003d288

0000e0f4 <_ZNSt12length_errorC1EPKc>:
    e0f4:	b510      	push	{r4, lr}
    e0f6:	4604      	mov	r4, r0
    e0f8:	f7ff ffe8 	bl	e0cc <_ZNSt11logic_errorC1EPKc>
    e0fc:	4b01      	ldr	r3, [pc, #4]	; (e104 <_ZNSt12length_errorC1EPKc+0x10>)
    e0fe:	6023      	str	r3, [r4, #0]
    e100:	4620      	mov	r0, r4
    e102:	bd10      	pop	{r4, pc}
    e104:	0003d29c 	.word	0x0003d29c

0000e108 <_ZNSt12__cow_stringC1EPKcj>:
    e108:	b510      	push	{r4, lr}
    e10a:	b082      	sub	sp, #8
    e10c:	ab01      	add	r3, sp, #4
    e10e:	4604      	mov	r4, r0
    e110:	f7ff f83a 	bl	d188 <_ZNSsC1EPKcjRKSaIcE>
    e114:	4620      	mov	r0, r4
    e116:	b002      	add	sp, #8
    e118:	bd10      	pop	{r4, pc}
    e11a:	bf00      	nop

0000e11c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
    e11c:	4b18      	ldr	r3, [pc, #96]	; (e180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
    e11e:	681a      	ldr	r2, [r3, #0]
    e120:	07d1      	lsls	r1, r2, #31
    e122:	bf5c      	itt	pl
    e124:	2201      	movpl	r2, #1
    e126:	601a      	strpl	r2, [r3, #0]
    e128:	4b16      	ldr	r3, [pc, #88]	; (e184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
    e12a:	681a      	ldr	r2, [r3, #0]
    e12c:	07d2      	lsls	r2, r2, #31
    e12e:	bf5c      	itt	pl
    e130:	2201      	movpl	r2, #1
    e132:	601a      	strpl	r2, [r3, #0]
    e134:	4b14      	ldr	r3, [pc, #80]	; (e188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
    e136:	681a      	ldr	r2, [r3, #0]
    e138:	07d0      	lsls	r0, r2, #31
    e13a:	bf5c      	itt	pl
    e13c:	2201      	movpl	r2, #1
    e13e:	601a      	strpl	r2, [r3, #0]
    e140:	4b12      	ldr	r3, [pc, #72]	; (e18c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
    e142:	681a      	ldr	r2, [r3, #0]
    e144:	07d1      	lsls	r1, r2, #31
    e146:	bf5c      	itt	pl
    e148:	2201      	movpl	r2, #1
    e14a:	601a      	strpl	r2, [r3, #0]
    e14c:	4b10      	ldr	r3, [pc, #64]	; (e190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
    e14e:	681a      	ldr	r2, [r3, #0]
    e150:	07d2      	lsls	r2, r2, #31
    e152:	bf5c      	itt	pl
    e154:	2201      	movpl	r2, #1
    e156:	601a      	strpl	r2, [r3, #0]
    e158:	4b0e      	ldr	r3, [pc, #56]	; (e194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
    e15a:	681a      	ldr	r2, [r3, #0]
    e15c:	07d0      	lsls	r0, r2, #31
    e15e:	bf5c      	itt	pl
    e160:	2201      	movpl	r2, #1
    e162:	601a      	strpl	r2, [r3, #0]
    e164:	4b0c      	ldr	r3, [pc, #48]	; (e198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
    e166:	681a      	ldr	r2, [r3, #0]
    e168:	07d1      	lsls	r1, r2, #31
    e16a:	bf5c      	itt	pl
    e16c:	2201      	movpl	r2, #1
    e16e:	601a      	strpl	r2, [r3, #0]
    e170:	4b0a      	ldr	r3, [pc, #40]	; (e19c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
    e172:	681a      	ldr	r2, [r3, #0]
    e174:	07d2      	lsls	r2, r2, #31
    e176:	bf5c      	itt	pl
    e178:	2201      	movpl	r2, #1
    e17a:	601a      	strpl	r2, [r3, #0]
    e17c:	4770      	bx	lr
    e17e:	bf00      	nop
    e180:	2001afe4 	.word	0x2001afe4
    e184:	2001afe0 	.word	0x2001afe0
    e188:	2001afdc 	.word	0x2001afdc
    e18c:	2001afd8 	.word	0x2001afd8
    e190:	2001afd4 	.word	0x2001afd4
    e194:	2001afd0 	.word	0x2001afd0
    e198:	2001afcc 	.word	0x2001afcc
    e19c:	2001afc8 	.word	0x2001afc8

0000e1a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
    e1a0:	4b18      	ldr	r3, [pc, #96]	; (e204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
    e1a2:	681a      	ldr	r2, [r3, #0]
    e1a4:	07d1      	lsls	r1, r2, #31
    e1a6:	bf5c      	itt	pl
    e1a8:	2201      	movpl	r2, #1
    e1aa:	601a      	strpl	r2, [r3, #0]
    e1ac:	4b16      	ldr	r3, [pc, #88]	; (e208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
    e1ae:	681a      	ldr	r2, [r3, #0]
    e1b0:	07d2      	lsls	r2, r2, #31
    e1b2:	bf5c      	itt	pl
    e1b4:	2201      	movpl	r2, #1
    e1b6:	601a      	strpl	r2, [r3, #0]
    e1b8:	4b14      	ldr	r3, [pc, #80]	; (e20c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
    e1ba:	681a      	ldr	r2, [r3, #0]
    e1bc:	07d0      	lsls	r0, r2, #31
    e1be:	bf5c      	itt	pl
    e1c0:	2201      	movpl	r2, #1
    e1c2:	601a      	strpl	r2, [r3, #0]
    e1c4:	4b12      	ldr	r3, [pc, #72]	; (e210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
    e1c6:	681a      	ldr	r2, [r3, #0]
    e1c8:	07d1      	lsls	r1, r2, #31
    e1ca:	bf5c      	itt	pl
    e1cc:	2201      	movpl	r2, #1
    e1ce:	601a      	strpl	r2, [r3, #0]
    e1d0:	4b10      	ldr	r3, [pc, #64]	; (e214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
    e1d2:	681a      	ldr	r2, [r3, #0]
    e1d4:	07d2      	lsls	r2, r2, #31
    e1d6:	bf5c      	itt	pl
    e1d8:	2201      	movpl	r2, #1
    e1da:	601a      	strpl	r2, [r3, #0]
    e1dc:	4b0e      	ldr	r3, [pc, #56]	; (e218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
    e1de:	681a      	ldr	r2, [r3, #0]
    e1e0:	07d0      	lsls	r0, r2, #31
    e1e2:	bf5c      	itt	pl
    e1e4:	2201      	movpl	r2, #1
    e1e6:	601a      	strpl	r2, [r3, #0]
    e1e8:	4b0c      	ldr	r3, [pc, #48]	; (e21c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
    e1ea:	681a      	ldr	r2, [r3, #0]
    e1ec:	07d1      	lsls	r1, r2, #31
    e1ee:	bf5c      	itt	pl
    e1f0:	2201      	movpl	r2, #1
    e1f2:	601a      	strpl	r2, [r3, #0]
    e1f4:	4b0a      	ldr	r3, [pc, #40]	; (e220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
    e1f6:	681a      	ldr	r2, [r3, #0]
    e1f8:	07d2      	lsls	r2, r2, #31
    e1fa:	bf5c      	itt	pl
    e1fc:	2201      	movpl	r2, #1
    e1fe:	601a      	strpl	r2, [r3, #0]
    e200:	4770      	bx	lr
    e202:	bf00      	nop
    e204:	2001b004 	.word	0x2001b004
    e208:	2001b000 	.word	0x2001b000
    e20c:	2001affc 	.word	0x2001affc
    e210:	2001aff8 	.word	0x2001aff8
    e214:	2001aff4 	.word	0x2001aff4
    e218:	2001aff0 	.word	0x2001aff0
    e21c:	2001afec 	.word	0x2001afec
    e220:	2001afe8 	.word	0x2001afe8

0000e224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
    e224:	4b24      	ldr	r3, [pc, #144]	; (e2b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
    e226:	681a      	ldr	r2, [r3, #0]
    e228:	07d0      	lsls	r0, r2, #31
    e22a:	bf5c      	itt	pl
    e22c:	2201      	movpl	r2, #1
    e22e:	601a      	strpl	r2, [r3, #0]
    e230:	4b22      	ldr	r3, [pc, #136]	; (e2bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
    e232:	681a      	ldr	r2, [r3, #0]
    e234:	07d1      	lsls	r1, r2, #31
    e236:	bf5c      	itt	pl
    e238:	2201      	movpl	r2, #1
    e23a:	601a      	strpl	r2, [r3, #0]
    e23c:	4b20      	ldr	r3, [pc, #128]	; (e2c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
    e23e:	681a      	ldr	r2, [r3, #0]
    e240:	07d2      	lsls	r2, r2, #31
    e242:	bf5c      	itt	pl
    e244:	2201      	movpl	r2, #1
    e246:	601a      	strpl	r2, [r3, #0]
    e248:	4b1e      	ldr	r3, [pc, #120]	; (e2c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
    e24a:	681a      	ldr	r2, [r3, #0]
    e24c:	07d0      	lsls	r0, r2, #31
    e24e:	bf5c      	itt	pl
    e250:	2201      	movpl	r2, #1
    e252:	601a      	strpl	r2, [r3, #0]
    e254:	4b1c      	ldr	r3, [pc, #112]	; (e2c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
    e256:	681a      	ldr	r2, [r3, #0]
    e258:	07d1      	lsls	r1, r2, #31
    e25a:	bf5c      	itt	pl
    e25c:	2201      	movpl	r2, #1
    e25e:	601a      	strpl	r2, [r3, #0]
    e260:	4b1a      	ldr	r3, [pc, #104]	; (e2cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
    e262:	681a      	ldr	r2, [r3, #0]
    e264:	07d2      	lsls	r2, r2, #31
    e266:	bf5c      	itt	pl
    e268:	2201      	movpl	r2, #1
    e26a:	601a      	strpl	r2, [r3, #0]
    e26c:	4b18      	ldr	r3, [pc, #96]	; (e2d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
    e26e:	681a      	ldr	r2, [r3, #0]
    e270:	07d0      	lsls	r0, r2, #31
    e272:	bf5c      	itt	pl
    e274:	2201      	movpl	r2, #1
    e276:	601a      	strpl	r2, [r3, #0]
    e278:	4b16      	ldr	r3, [pc, #88]	; (e2d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
    e27a:	681a      	ldr	r2, [r3, #0]
    e27c:	07d1      	lsls	r1, r2, #31
    e27e:	bf5c      	itt	pl
    e280:	2201      	movpl	r2, #1
    e282:	601a      	strpl	r2, [r3, #0]
    e284:	4b14      	ldr	r3, [pc, #80]	; (e2d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
    e286:	681a      	ldr	r2, [r3, #0]
    e288:	07d2      	lsls	r2, r2, #31
    e28a:	bf5c      	itt	pl
    e28c:	2201      	movpl	r2, #1
    e28e:	601a      	strpl	r2, [r3, #0]
    e290:	4b12      	ldr	r3, [pc, #72]	; (e2dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
    e292:	681a      	ldr	r2, [r3, #0]
    e294:	07d0      	lsls	r0, r2, #31
    e296:	bf5c      	itt	pl
    e298:	2201      	movpl	r2, #1
    e29a:	601a      	strpl	r2, [r3, #0]
    e29c:	4b10      	ldr	r3, [pc, #64]	; (e2e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
    e29e:	681a      	ldr	r2, [r3, #0]
    e2a0:	07d1      	lsls	r1, r2, #31
    e2a2:	bf5c      	itt	pl
    e2a4:	2201      	movpl	r2, #1
    e2a6:	601a      	strpl	r2, [r3, #0]
    e2a8:	4b0e      	ldr	r3, [pc, #56]	; (e2e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
    e2aa:	681a      	ldr	r2, [r3, #0]
    e2ac:	07d2      	lsls	r2, r2, #31
    e2ae:	bf5c      	itt	pl
    e2b0:	2201      	movpl	r2, #1
    e2b2:	601a      	strpl	r2, [r3, #0]
    e2b4:	4770      	bx	lr
    e2b6:	bf00      	nop
    e2b8:	2001b034 	.word	0x2001b034
    e2bc:	2001b030 	.word	0x2001b030
    e2c0:	2001b02c 	.word	0x2001b02c
    e2c4:	2001b028 	.word	0x2001b028
    e2c8:	2001b024 	.word	0x2001b024
    e2cc:	2001b020 	.word	0x2001b020
    e2d0:	2001b01c 	.word	0x2001b01c
    e2d4:	2001b018 	.word	0x2001b018
    e2d8:	2001b014 	.word	0x2001b014
    e2dc:	2001b010 	.word	0x2001b010
    e2e0:	2001b00c 	.word	0x2001b00c
    e2e4:	2001b008 	.word	0x2001b008

0000e2e8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
    e2e8:	7803      	ldrb	r3, [r0, #0]
    e2ea:	2b47      	cmp	r3, #71	; 0x47
    e2ec:	d001      	beq.n	e2f2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
    e2ee:	2000      	movs	r0, #0
    e2f0:	4770      	bx	lr
    e2f2:	7843      	ldrb	r3, [r0, #1]
    e2f4:	2b4e      	cmp	r3, #78	; 0x4e
    e2f6:	d1fa      	bne.n	e2ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    e2f8:	7883      	ldrb	r3, [r0, #2]
    e2fa:	2b55      	cmp	r3, #85	; 0x55
    e2fc:	d1f7      	bne.n	e2ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    e2fe:	78c3      	ldrb	r3, [r0, #3]
    e300:	2b43      	cmp	r3, #67	; 0x43
    e302:	d1f4      	bne.n	e2ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    e304:	7903      	ldrb	r3, [r0, #4]
    e306:	2b43      	cmp	r3, #67	; 0x43
    e308:	d1f1      	bne.n	e2ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    e30a:	7943      	ldrb	r3, [r0, #5]
    e30c:	2b2b      	cmp	r3, #43	; 0x2b
    e30e:	d1ee      	bne.n	e2ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    e310:	7983      	ldrb	r3, [r0, #6]
    e312:	2b2b      	cmp	r3, #43	; 0x2b
    e314:	d1eb      	bne.n	e2ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    e316:	79c0      	ldrb	r0, [r0, #7]
    e318:	2801      	cmp	r0, #1
    e31a:	bf8c      	ite	hi
    e31c:	2000      	movhi	r0, #0
    e31e:	2001      	movls	r0, #1
    e320:	4770      	bx	lr
    e322:	bf00      	nop

0000e324 <__cxa_call_terminate>:
    e324:	b510      	push	{r4, lr}
    e326:	b130      	cbz	r0, e336 <__cxa_call_terminate+0x12>
    e328:	4604      	mov	r4, r0
    e32a:	f7ff f9e7 	bl	d6fc <__cxa_begin_catch>
    e32e:	4620      	mov	r0, r4
    e330:	f7ff ffda 	bl	e2e8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
    e334:	b908      	cbnz	r0, e33a <__cxa_call_terminate+0x16>
    e336:	f7ff fdbd 	bl	deb4 <_ZSt9terminatev>
    e33a:	f854 0c14 	ldr.w	r0, [r4, #-20]
    e33e:	f7ff fda5 	bl	de8c <_ZN10__cxxabiv111__terminateEPFvvE>
    e342:	bf00      	nop

0000e344 <__cxa_call_unexpected>:
    e344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e348:	b085      	sub	sp, #20
    e34a:	4602      	mov	r2, r0
    e34c:	f7ff ffcc 	bl	e2e8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
    e350:	b160      	cbz	r0, e36c <__cxa_call_unexpected+0x28>
    e352:	f852 8c18 	ldr.w	r8, [r2, #-24]
    e356:	f852 5c14 	ldr.w	r5, [r2, #-20]
    e35a:	6a96      	ldr	r6, [r2, #40]	; 0x28
    e35c:	6b17      	ldr	r7, [r2, #48]	; 0x30
    e35e:	6b54      	ldr	r4, [r2, #52]	; 0x34
    e360:	4610      	mov	r0, r2
    e362:	f7ff f9cb 	bl	d6fc <__cxa_begin_catch>
    e366:	4640      	mov	r0, r8
    e368:	f7ff fdae 	bl	dec8 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    e36c:	4610      	mov	r0, r2
    e36e:	f7ff f9c5 	bl	d6fc <__cxa_begin_catch>
    e372:	f7ff fdad 	bl	ded0 <_ZSt10unexpectedv>
    e376:	f7ff f9c1 	bl	d6fc <__cxa_begin_catch>
    e37a:	f7ff fd9b 	bl	deb4 <_ZSt9terminatev>
    e37e:	f7ff f9bd 	bl	d6fc <__cxa_begin_catch>
    e382:	f7ff fa53 	bl	d82c <__cxa_get_globals_fast>
    e386:	6803      	ldr	r3, [r0, #0]
    e388:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    e38c:	2a01      	cmp	r2, #1
    e38e:	d036      	beq.n	e3fe <__cxa_call_unexpected+0xba>
    e390:	f103 0278 	add.w	r2, r3, #120	; 0x78
    e394:	f10d 0a10 	add.w	sl, sp, #16
    e398:	f04f 0800 	mov.w	r8, #0
    e39c:	3320      	adds	r3, #32
    e39e:	f84a 2d08 	str.w	r2, [sl, #-8]!
    e3a2:	f027 0b03 	bic.w	fp, r7, #3
    e3a6:	9301      	str	r3, [sp, #4]
    e3a8:	46c1      	mov	r9, r8
    e3aa:	45b1      	cmp	r9, r6
    e3ac:	da1b      	bge.n	e3e6 <__cxa_call_unexpected+0xa2>
    e3ae:	6827      	ldr	r7, [r4, #0]
    e3b0:	b107      	cbz	r7, e3b4 <__cxa_call_unexpected+0x70>
    e3b2:	4427      	add	r7, r4
    e3b4:	4653      	mov	r3, sl
    e3b6:	2200      	movs	r2, #0
    e3b8:	4639      	mov	r1, r7
    e3ba:	9801      	ldr	r0, [sp, #4]
    e3bc:	f7ff f8d8 	bl	d570 <__cxa_type_match>
    e3c0:	bb10      	cbnz	r0, e408 <__cxa_call_unexpected+0xc4>
    e3c2:	683b      	ldr	r3, [r7, #0]
    e3c4:	4914      	ldr	r1, [pc, #80]	; (e418 <__cxa_call_unexpected+0xd4>)
    e3c6:	691b      	ldr	r3, [r3, #16]
    e3c8:	9300      	str	r3, [sp, #0]
    e3ca:	aa04      	add	r2, sp, #16
    e3cc:	2301      	movs	r3, #1
    e3ce:	f842 0d04 	str.w	r0, [r2, #-4]!
    e3d2:	4638      	mov	r0, r7
    e3d4:	9f00      	ldr	r7, [sp, #0]
    e3d6:	47b8      	blx	r7
    e3d8:	2800      	cmp	r0, #0
    e3da:	bf18      	it	ne
    e3dc:	4680      	movne	r8, r0
    e3de:	f109 0901 	add.w	r9, r9, #1
    e3e2:	445c      	add	r4, fp
    e3e4:	e7e1      	b.n	e3aa <__cxa_call_unexpected+0x66>
    e3e6:	f1b8 0f00 	cmp.w	r8, #0
    e3ea:	d00a      	beq.n	e402 <__cxa_call_unexpected+0xbe>
    e3ec:	2004      	movs	r0, #4
    e3ee:	f7ff f87d 	bl	d4ec <__cxa_allocate_exception>
    e3f2:	4b0a      	ldr	r3, [pc, #40]	; (e41c <__cxa_call_unexpected+0xd8>)
    e3f4:	6003      	str	r3, [r0, #0]
    e3f6:	4a0a      	ldr	r2, [pc, #40]	; (e420 <__cxa_call_unexpected+0xdc>)
    e3f8:	4907      	ldr	r1, [pc, #28]	; (e418 <__cxa_call_unexpected+0xd4>)
    e3fa:	f7ff fda5 	bl	df48 <__cxa_throw>
    e3fe:	681a      	ldr	r2, [r3, #0]
    e400:	e7c8      	b.n	e394 <__cxa_call_unexpected+0x50>
    e402:	4628      	mov	r0, r5
    e404:	f7ff fd42 	bl	de8c <_ZN10__cxxabiv111__terminateEPFvvE>
    e408:	f7ff fddc 	bl	dfc4 <__cxa_rethrow>
    e40c:	f7ff f9b4 	bl	d778 <__cxa_end_catch>
    e410:	f7ff f9b2 	bl	d778 <__cxa_end_catch>
    e414:	f7ff f8a6 	bl	d564 <__cxa_end_cleanup>
    e418:	0003d1b4 	.word	0x0003d1b4
    e41c:	0003d238 	.word	0x0003d238
    e420:	0000d809 	.word	0x0000d809

0000e424 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
    e424:	b570      	push	{r4, r5, r6, lr}
    e426:	4b3c      	ldr	r3, [pc, #240]	; (e518 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
    e428:	781a      	ldrb	r2, [r3, #0]
    e42a:	b082      	sub	sp, #8
    e42c:	2a00      	cmp	r2, #0
    e42e:	d135      	bne.n	e49c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
    e430:	2401      	movs	r4, #1
    e432:	701c      	strb	r4, [r3, #0]
    e434:	f006 fbd0 	bl	14bd8 <__cxa_current_exception_type>
    e438:	2800      	cmp	r0, #0
    e43a:	d05b      	beq.n	e4f4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>
    e43c:	6844      	ldr	r4, [r0, #4]
    e43e:	4d37      	ldr	r5, [pc, #220]	; (e51c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
    e440:	7823      	ldrb	r3, [r4, #0]
    e442:	2b2a      	cmp	r3, #42	; 0x2a
    e444:	ab02      	add	r3, sp, #8
    e446:	f04f 32ff 	mov.w	r2, #4294967295
    e44a:	bf08      	it	eq
    e44c:	3401      	addeq	r4, #1
    e44e:	f843 2d04 	str.w	r2, [r3, #-4]!
    e452:	2200      	movs	r2, #0
    e454:	4611      	mov	r1, r2
    e456:	4620      	mov	r0, r4
    e458:	f006 fb50 	bl	14afc <__cxa_demangle>
    e45c:	682b      	ldr	r3, [r5, #0]
    e45e:	4606      	mov	r6, r0
    e460:	68db      	ldr	r3, [r3, #12]
    e462:	482f      	ldr	r0, [pc, #188]	; (e520 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
    e464:	2230      	movs	r2, #48	; 0x30
    e466:	2101      	movs	r1, #1
    e468:	f009 fa38 	bl	178dc <fwrite>
    e46c:	9b01      	ldr	r3, [sp, #4]
    e46e:	b17b      	cbz	r3, e490 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
    e470:	682b      	ldr	r3, [r5, #0]
    e472:	4620      	mov	r0, r4
    e474:	68d9      	ldr	r1, [r3, #12]
    e476:	f009 f847 	bl	17508 <fputs>
    e47a:	682b      	ldr	r3, [r5, #0]
    e47c:	4829      	ldr	r0, [pc, #164]	; (e524 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
    e47e:	68db      	ldr	r3, [r3, #12]
    e480:	2202      	movs	r2, #2
    e482:	2101      	movs	r1, #1
    e484:	f009 fa2a 	bl	178dc <fwrite>
    e488:	9b01      	ldr	r3, [sp, #4]
    e48a:	b18b      	cbz	r3, e4b0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
    e48c:	f7ff fd9a 	bl	dfc4 <__cxa_rethrow>
    e490:	682b      	ldr	r3, [r5, #0]
    e492:	4630      	mov	r0, r6
    e494:	68d9      	ldr	r1, [r3, #12]
    e496:	f009 f837 	bl	17508 <fputs>
    e49a:	e7ee      	b.n	e47a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
    e49c:	4b1f      	ldr	r3, [pc, #124]	; (e51c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
    e49e:	4822      	ldr	r0, [pc, #136]	; (e528 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
    e4a0:	681b      	ldr	r3, [r3, #0]
    e4a2:	221d      	movs	r2, #29
    e4a4:	68db      	ldr	r3, [r3, #12]
    e4a6:	2101      	movs	r1, #1
    e4a8:	f009 fa18 	bl	178dc <fwrite>
    e4ac:	f008 ff76 	bl	1739c <abort>
    e4b0:	4630      	mov	r0, r6
    e4b2:	f009 fae1 	bl	17a78 <free>
    e4b6:	e7e9      	b.n	e48c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
    e4b8:	2901      	cmp	r1, #1
    e4ba:	460c      	mov	r4, r1
    e4bc:	d127      	bne.n	e50e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xea>
    e4be:	f7ff f91d 	bl	d6fc <__cxa_begin_catch>
    e4c2:	6803      	ldr	r3, [r0, #0]
    e4c4:	689b      	ldr	r3, [r3, #8]
    e4c6:	4798      	blx	r3
    e4c8:	682b      	ldr	r3, [r5, #0]
    e4ca:	4606      	mov	r6, r0
    e4cc:	68db      	ldr	r3, [r3, #12]
    e4ce:	4817      	ldr	r0, [pc, #92]	; (e52c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
    e4d0:	4621      	mov	r1, r4
    e4d2:	220b      	movs	r2, #11
    e4d4:	f009 fa02 	bl	178dc <fwrite>
    e4d8:	682b      	ldr	r3, [r5, #0]
    e4da:	4630      	mov	r0, r6
    e4dc:	68d9      	ldr	r1, [r3, #12]
    e4de:	f009 f813 	bl	17508 <fputs>
    e4e2:	682b      	ldr	r3, [r5, #0]
    e4e4:	200a      	movs	r0, #10
    e4e6:	68d9      	ldr	r1, [r3, #12]
    e4e8:	f008 ff9e 	bl	17428 <fputc>
    e4ec:	f7ff f944 	bl	d778 <__cxa_end_catch>
    e4f0:	f008 ff54 	bl	1739c <abort>
    e4f4:	4b09      	ldr	r3, [pc, #36]	; (e51c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
    e4f6:	480e      	ldr	r0, [pc, #56]	; (e530 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
    e4f8:	681b      	ldr	r3, [r3, #0]
    e4fa:	4621      	mov	r1, r4
    e4fc:	68db      	ldr	r3, [r3, #12]
    e4fe:	222d      	movs	r2, #45	; 0x2d
    e500:	f009 f9ec 	bl	178dc <fwrite>
    e504:	e7f4      	b.n	e4f0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
    e506:	f7ff f937 	bl	d778 <__cxa_end_catch>
    e50a:	f7ff f82b 	bl	d564 <__cxa_end_cleanup>
    e50e:	f7ff f8f5 	bl	d6fc <__cxa_begin_catch>
    e512:	f7ff f931 	bl	d778 <__cxa_end_catch>
    e516:	e7eb      	b.n	e4f0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
    e518:	2001b038 	.word	0x2001b038
    e51c:	20000020 	.word	0x20000020
    e520:	0003d2c8 	.word	0x0003d2c8
    e524:	0003d2fc 	.word	0x0003d2fc
    e528:	0003d2a8 	.word	0x0003d2a8
    e52c:	0003d330 	.word	0x0003d330
    e530:	0003d300 	.word	0x0003d300

0000e534 <d_make_comp>:
    e534:	b470      	push	{r4, r5, r6}
    e536:	1e4c      	subs	r4, r1, #1
    e538:	2c4c      	cmp	r4, #76	; 0x4c
    e53a:	d82d      	bhi.n	e598 <d_make_comp+0x64>
    e53c:	e8df f004 	tbb	[pc, r4]
    e540:	3c3c3c3c 	.word	0x3c3c3c3c
    e544:	2c2c2c2c 	.word	0x2c2c2c2c
    e548:	273c2727 	.word	0x273c2727
    e54c:	27272727 	.word	0x27272727
    e550:	27272727 	.word	0x27272727
    e554:	2c272727 	.word	0x2c272727
    e558:	28282828 	.word	0x28282828
    e55c:	28282828 	.word	0x28282828
    e560:	2727273c 	.word	0x2727273c
    e564:	272c2727 	.word	0x272c2727
    e568:	2c3c3e28 	.word	0x2c3c3e28
    e56c:	3e28283c 	.word	0x3e28283c
    e570:	27272c2c 	.word	0x27272c2c
    e574:	3c3c3c27 	.word	0x3c3c3c27
    e578:	3c273c3c 	.word	0x3c273c3c
    e57c:	2c3c273c 	.word	0x2c3c273c
    e580:	2727272c 	.word	0x2727272c
    e584:	272c2c2c 	.word	0x272c2c2c
    e588:	283c2727 	.word	0x283c2727
    e58c:	3c          	.byte	0x3c
    e58d:	00          	.byte	0x00
    e58e:	b11a      	cbz	r2, e598 <d_make_comp+0x64>
    e590:	6944      	ldr	r4, [r0, #20]
    e592:	6985      	ldr	r5, [r0, #24]
    e594:	42ac      	cmp	r4, r5
    e596:	db02      	blt.n	e59e <d_make_comp+0x6a>
    e598:	2000      	movs	r0, #0
    e59a:	bc70      	pop	{r4, r5, r6}
    e59c:	4770      	bx	lr
    e59e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    e5a2:	6906      	ldr	r6, [r0, #16]
    e5a4:	00ad      	lsls	r5, r5, #2
    e5a6:	3401      	adds	r4, #1
    e5a8:	6144      	str	r4, [r0, #20]
    e5aa:	1970      	adds	r0, r6, r5
    e5ac:	d0f5      	beq.n	e59a <d_make_comp+0x66>
    e5ae:	5571      	strb	r1, [r6, r5]
    e5b0:	6042      	str	r2, [r0, #4]
    e5b2:	6083      	str	r3, [r0, #8]
    e5b4:	bc70      	pop	{r4, r5, r6}
    e5b6:	4770      	bx	lr
    e5b8:	2a00      	cmp	r2, #0
    e5ba:	d0ed      	beq.n	e598 <d_make_comp+0x64>
    e5bc:	2b00      	cmp	r3, #0
    e5be:	d0eb      	beq.n	e598 <d_make_comp+0x64>
    e5c0:	6944      	ldr	r4, [r0, #20]
    e5c2:	6985      	ldr	r5, [r0, #24]
    e5c4:	42ac      	cmp	r4, r5
    e5c6:	dae7      	bge.n	e598 <d_make_comp+0x64>
    e5c8:	e7e9      	b.n	e59e <d_make_comp+0x6a>
    e5ca:	bf00      	nop

0000e5cc <d_cv_qualifiers>:
    e5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e5d0:	68c3      	ldr	r3, [r0, #12]
    e5d2:	f1b2 0a00 	subs.w	sl, r2, #0
    e5d6:	4604      	mov	r4, r0
    e5d8:	460e      	mov	r6, r1
    e5da:	781a      	ldrb	r2, [r3, #0]
    e5dc:	bf15      	itete	ne
    e5de:	f04f 091e 	movne.w	r9, #30
    e5e2:	f04f 091b 	moveq.w	r9, #27
    e5e6:	f04f 081d 	movne.w	r8, #29
    e5ea:	f04f 081a 	moveq.w	r8, #26
    e5ee:	bf14      	ite	ne
    e5f0:	271c      	movne	r7, #28
    e5f2:	2719      	moveq	r7, #25
    e5f4:	460d      	mov	r5, r1
    e5f6:	e018      	b.n	e62a <d_cv_qualifiers+0x5e>
    e5f8:	2a56      	cmp	r2, #86	; 0x56
    e5fa:	d01f      	beq.n	e63c <d_cv_qualifiers+0x70>
    e5fc:	2a4b      	cmp	r2, #75	; 0x4b
    e5fe:	d024      	beq.n	e64a <d_cv_qualifiers+0x7e>
    e600:	2a44      	cmp	r2, #68	; 0x44
    e602:	d12d      	bne.n	e660 <d_cv_qualifiers+0x94>
    e604:	785a      	ldrb	r2, [r3, #1]
    e606:	2a78      	cmp	r2, #120	; 0x78
    e608:	d127      	bne.n	e65a <d_cv_qualifiers+0x8e>
    e60a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    e60c:	3302      	adds	r3, #2
    e60e:	3211      	adds	r2, #17
    e610:	60e3      	str	r3, [r4, #12]
    e612:	6322      	str	r2, [r4, #48]	; 0x30
    e614:	214c      	movs	r1, #76	; 0x4c
    e616:	2300      	movs	r3, #0
    e618:	461a      	mov	r2, r3
    e61a:	4620      	mov	r0, r4
    e61c:	f7ff ff8a 	bl	e534 <d_make_comp>
    e620:	6028      	str	r0, [r5, #0]
    e622:	b1c8      	cbz	r0, e658 <d_cv_qualifiers+0x8c>
    e624:	68e3      	ldr	r3, [r4, #12]
    e626:	781a      	ldrb	r2, [r3, #0]
    e628:	1d05      	adds	r5, r0, #4
    e62a:	2a72      	cmp	r2, #114	; 0x72
    e62c:	d1e4      	bne.n	e5f8 <d_cv_qualifiers+0x2c>
    e62e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    e630:	3301      	adds	r3, #1
    e632:	3209      	adds	r2, #9
    e634:	60e3      	str	r3, [r4, #12]
    e636:	6322      	str	r2, [r4, #48]	; 0x30
    e638:	4639      	mov	r1, r7
    e63a:	e7ec      	b.n	e616 <d_cv_qualifiers+0x4a>
    e63c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    e63e:	3301      	adds	r3, #1
    e640:	3209      	adds	r2, #9
    e642:	60e3      	str	r3, [r4, #12]
    e644:	6322      	str	r2, [r4, #48]	; 0x30
    e646:	4641      	mov	r1, r8
    e648:	e7e5      	b.n	e616 <d_cv_qualifiers+0x4a>
    e64a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    e64c:	3301      	adds	r3, #1
    e64e:	3206      	adds	r2, #6
    e650:	60e3      	str	r3, [r4, #12]
    e652:	6322      	str	r2, [r4, #48]	; 0x30
    e654:	4649      	mov	r1, r9
    e656:	e7de      	b.n	e616 <d_cv_qualifiers+0x4a>
    e658:	4605      	mov	r5, r0
    e65a:	4628      	mov	r0, r5
    e65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e660:	f1ba 0f00 	cmp.w	sl, #0
    e664:	d1f9      	bne.n	e65a <d_cv_qualifiers+0x8e>
    e666:	2a46      	cmp	r2, #70	; 0x46
    e668:	d1f7      	bne.n	e65a <d_cv_qualifiers+0x8e>
    e66a:	42b5      	cmp	r5, r6
    e66c:	d0f5      	beq.n	e65a <d_cv_qualifiers+0x8e>
    e66e:	201d      	movs	r0, #29
    e670:	211e      	movs	r1, #30
    e672:	221c      	movs	r2, #28
    e674:	e007      	b.n	e686 <d_cv_qualifiers+0xba>
    e676:	2b1b      	cmp	r3, #27
    e678:	d00b      	beq.n	e692 <d_cv_qualifiers+0xc6>
    e67a:	2b19      	cmp	r3, #25
    e67c:	d100      	bne.n	e680 <d_cv_qualifiers+0xb4>
    e67e:	7032      	strb	r2, [r6, #0]
    e680:	3604      	adds	r6, #4
    e682:	42b5      	cmp	r5, r6
    e684:	d0e9      	beq.n	e65a <d_cv_qualifiers+0x8e>
    e686:	6836      	ldr	r6, [r6, #0]
    e688:	7833      	ldrb	r3, [r6, #0]
    e68a:	2b1a      	cmp	r3, #26
    e68c:	d1f3      	bne.n	e676 <d_cv_qualifiers+0xaa>
    e68e:	7030      	strb	r0, [r6, #0]
    e690:	e7f6      	b.n	e680 <d_cv_qualifiers+0xb4>
    e692:	7031      	strb	r1, [r6, #0]
    e694:	e7f4      	b.n	e680 <d_cv_qualifiers+0xb4>
    e696:	bf00      	nop

0000e698 <d_ref_qualifier>:
    e698:	b410      	push	{r4}
    e69a:	68c3      	ldr	r3, [r0, #12]
    e69c:	781c      	ldrb	r4, [r3, #0]
    e69e:	2c52      	cmp	r4, #82	; 0x52
    e6a0:	460a      	mov	r2, r1
    e6a2:	d00d      	beq.n	e6c0 <d_ref_qualifier+0x28>
    e6a4:	2c4f      	cmp	r4, #79	; 0x4f
    e6a6:	d002      	beq.n	e6ae <d_ref_qualifier+0x16>
    e6a8:	4608      	mov	r0, r1
    e6aa:	bc10      	pop	{r4}
    e6ac:	4770      	bx	lr
    e6ae:	6b01      	ldr	r1, [r0, #48]	; 0x30
    e6b0:	3103      	adds	r1, #3
    e6b2:	6301      	str	r1, [r0, #48]	; 0x30
    e6b4:	2120      	movs	r1, #32
    e6b6:	3301      	adds	r3, #1
    e6b8:	60c3      	str	r3, [r0, #12]
    e6ba:	bc10      	pop	{r4}
    e6bc:	2300      	movs	r3, #0
    e6be:	e739      	b.n	e534 <d_make_comp>
    e6c0:	6b01      	ldr	r1, [r0, #48]	; 0x30
    e6c2:	3102      	adds	r1, #2
    e6c4:	6301      	str	r1, [r0, #48]	; 0x30
    e6c6:	211f      	movs	r1, #31
    e6c8:	e7f5      	b.n	e6b6 <d_ref_qualifier+0x1e>
    e6ca:	bf00      	nop

0000e6cc <d_count_templates_scopes>:
    e6cc:	2a00      	cmp	r2, #0
    e6ce:	d04d      	beq.n	e76c <d_count_templates_scopes+0xa0>
    e6d0:	b570      	push	{r4, r5, r6, lr}
    e6d2:	4605      	mov	r5, r0
    e6d4:	460e      	mov	r6, r1
    e6d6:	4614      	mov	r4, r2
    e6d8:	7823      	ldrb	r3, [r4, #0]
    e6da:	3b01      	subs	r3, #1
    e6dc:	2b4c      	cmp	r3, #76	; 0x4c
    e6de:	d82b      	bhi.n	e738 <d_count_templates_scopes+0x6c>
    e6e0:	e8df f003 	tbb	[pc, r3]
    e6e4:	3f363636 	.word	0x3f363636
    e6e8:	27272a2a 	.word	0x27272a2a
    e6ec:	36363636 	.word	0x36363636
    e6f0:	36363636 	.word	0x36363636
    e6f4:	36363636 	.word	0x36363636
    e6f8:	2a363636 	.word	0x2a363636
    e6fc:	36363636 	.word	0x36363636
    e700:	36363636 	.word	0x36363636
    e704:	2f2f3636 	.word	0x2f2f3636
    e708:	362a3636 	.word	0x362a3636
    e70c:	2b363636 	.word	0x2b363636
    e710:	36363636 	.word	0x36363636
    e714:	3636272a 	.word	0x3636272a
    e718:	36363636 	.word	0x36363636
    e71c:	36363636 	.word	0x36363636
    e720:	2a363636 	.word	0x2a363636
    e724:	2b2b362a 	.word	0x2b2b362a
    e728:	362a2b2b 	.word	0x362a2b2b
    e72c:	36363636 	.word	0x36363636
    e730:	36          	.byte	0x36
    e731:	00          	.byte	0x00
    e732:	68a4      	ldr	r4, [r4, #8]
    e734:	2c00      	cmp	r4, #0
    e736:	d1cf      	bne.n	e6d8 <d_count_templates_scopes+0xc>
    e738:	bd70      	pop	{r4, r5, r6, pc}
    e73a:	6864      	ldr	r4, [r4, #4]
    e73c:	2c00      	cmp	r4, #0
    e73e:	d1cb      	bne.n	e6d8 <d_count_templates_scopes+0xc>
    e740:	e7fa      	b.n	e738 <d_count_templates_scopes+0x6c>
    e742:	6862      	ldr	r2, [r4, #4]
    e744:	7813      	ldrb	r3, [r2, #0]
    e746:	2b05      	cmp	r3, #5
    e748:	d103      	bne.n	e752 <d_count_templates_scopes+0x86>
    e74a:	6833      	ldr	r3, [r6, #0]
    e74c:	3301      	adds	r3, #1
    e74e:	6033      	str	r3, [r6, #0]
    e750:	6862      	ldr	r2, [r4, #4]
    e752:	4631      	mov	r1, r6
    e754:	4628      	mov	r0, r5
    e756:	f7ff ffb9 	bl	e6cc <d_count_templates_scopes>
    e75a:	68a4      	ldr	r4, [r4, #8]
    e75c:	2c00      	cmp	r4, #0
    e75e:	d1bb      	bne.n	e6d8 <d_count_templates_scopes+0xc>
    e760:	e7ea      	b.n	e738 <d_count_templates_scopes+0x6c>
    e762:	682b      	ldr	r3, [r5, #0]
    e764:	3301      	adds	r3, #1
    e766:	602b      	str	r3, [r5, #0]
    e768:	6862      	ldr	r2, [r4, #4]
    e76a:	e7f2      	b.n	e752 <d_count_templates_scopes+0x86>
    e76c:	4770      	bx	lr
    e76e:	bf00      	nop

0000e770 <d_append_buffer>:
    e770:	b37a      	cbz	r2, e7d2 <d_append_buffer+0x62>
    e772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e776:	460d      	mov	r5, r1
    e778:	4604      	mov	r4, r0
    e77a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    e77e:	18af      	adds	r7, r5, r2
    e780:	f04f 0800 	mov.w	r8, #0
    e784:	e009      	b.n	e79a <d_append_buffer+0x2a>
    e786:	460b      	mov	r3, r1
    e788:	42bd      	cmp	r5, r7
    e78a:	f101 0101 	add.w	r1, r1, #1
    e78e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e792:	54e6      	strb	r6, [r4, r3]
    e794:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    e798:	d019      	beq.n	e7ce <d_append_buffer+0x5e>
    e79a:	29ff      	cmp	r1, #255	; 0xff
    e79c:	f815 6b01 	ldrb.w	r6, [r5], #1
    e7a0:	d1f1      	bne.n	e786 <d_append_buffer+0x16>
    e7a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e7a6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    e7aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e7ae:	4620      	mov	r0, r4
    e7b0:	4798      	blx	r3
    e7b2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e7b6:	3301      	adds	r3, #1
    e7b8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e7bc:	2300      	movs	r3, #0
    e7be:	2101      	movs	r1, #1
    e7c0:	42bd      	cmp	r5, r7
    e7c2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e7c6:	54e6      	strb	r6, [r4, r3]
    e7c8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    e7cc:	d1e5      	bne.n	e79a <d_append_buffer+0x2a>
    e7ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e7d2:	4770      	bx	lr

0000e7d4 <d_number.isra.0>:
    e7d4:	b470      	push	{r4, r5, r6}
    e7d6:	6802      	ldr	r2, [r0, #0]
    e7d8:	7811      	ldrb	r1, [r2, #0]
    e7da:	296e      	cmp	r1, #110	; 0x6e
    e7dc:	d018      	beq.n	e810 <d_number.isra.0+0x3c>
    e7de:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    e7e2:	2b09      	cmp	r3, #9
    e7e4:	d81e      	bhi.n	e824 <d_number.isra.0+0x50>
    e7e6:	2600      	movs	r6, #0
    e7e8:	2300      	movs	r3, #0
    e7ea:	3201      	adds	r2, #1
    e7ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    e7f0:	6002      	str	r2, [r0, #0]
    e7f2:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    e7f6:	7811      	ldrb	r1, [r2, #0]
    e7f8:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
    e7fc:	2d09      	cmp	r5, #9
    e7fe:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    e802:	d9f2      	bls.n	e7ea <d_number.isra.0+0x16>
    e804:	b10e      	cbz	r6, e80a <d_number.isra.0+0x36>
    e806:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
    e80a:	4618      	mov	r0, r3
    e80c:	bc70      	pop	{r4, r5, r6}
    e80e:	4770      	bx	lr
    e810:	1c53      	adds	r3, r2, #1
    e812:	6003      	str	r3, [r0, #0]
    e814:	7851      	ldrb	r1, [r2, #1]
    e816:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    e81a:	2a09      	cmp	r2, #9
    e81c:	d802      	bhi.n	e824 <d_number.isra.0+0x50>
    e81e:	461a      	mov	r2, r3
    e820:	2601      	movs	r6, #1
    e822:	e7e1      	b.n	e7e8 <d_number.isra.0+0x14>
    e824:	2300      	movs	r3, #0
    e826:	e7f0      	b.n	e80a <d_number.isra.0+0x36>

0000e828 <d_number_component>:
    e828:	6943      	ldr	r3, [r0, #20]
    e82a:	6982      	ldr	r2, [r0, #24]
    e82c:	4293      	cmp	r3, r2
    e82e:	b510      	push	{r4, lr}
    e830:	da0f      	bge.n	e852 <d_number_component+0x2a>
    e832:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    e836:	6901      	ldr	r1, [r0, #16]
    e838:	0092      	lsls	r2, r2, #2
    e83a:	3301      	adds	r3, #1
    e83c:	188c      	adds	r4, r1, r2
    e83e:	6143      	str	r3, [r0, #20]
    e840:	d005      	beq.n	e84e <d_number_component+0x26>
    e842:	2341      	movs	r3, #65	; 0x41
    e844:	300c      	adds	r0, #12
    e846:	548b      	strb	r3, [r1, r2]
    e848:	f7ff ffc4 	bl	e7d4 <d_number.isra.0>
    e84c:	6060      	str	r0, [r4, #4]
    e84e:	4620      	mov	r0, r4
    e850:	bd10      	pop	{r4, pc}
    e852:	2400      	movs	r4, #0
    e854:	4620      	mov	r0, r4
    e856:	bd10      	pop	{r4, pc}

0000e858 <d_compact_number>:
    e858:	b510      	push	{r4, lr}
    e85a:	68c3      	ldr	r3, [r0, #12]
    e85c:	781a      	ldrb	r2, [r3, #0]
    e85e:	2a5f      	cmp	r2, #95	; 0x5f
    e860:	4604      	mov	r4, r0
    e862:	d00d      	beq.n	e880 <d_compact_number+0x28>
    e864:	2a6e      	cmp	r2, #110	; 0x6e
    e866:	d00f      	beq.n	e888 <d_compact_number+0x30>
    e868:	300c      	adds	r0, #12
    e86a:	f7ff ffb3 	bl	e7d4 <d_number.isra.0>
    e86e:	3001      	adds	r0, #1
    e870:	d40a      	bmi.n	e888 <d_compact_number+0x30>
    e872:	68e3      	ldr	r3, [r4, #12]
    e874:	781a      	ldrb	r2, [r3, #0]
    e876:	2a5f      	cmp	r2, #95	; 0x5f
    e878:	d106      	bne.n	e888 <d_compact_number+0x30>
    e87a:	3301      	adds	r3, #1
    e87c:	60e3      	str	r3, [r4, #12]
    e87e:	bd10      	pop	{r4, pc}
    e880:	3301      	adds	r3, #1
    e882:	2000      	movs	r0, #0
    e884:	60e3      	str	r3, [r4, #12]
    e886:	bd10      	pop	{r4, pc}
    e888:	f04f 30ff 	mov.w	r0, #4294967295
    e88c:	bd10      	pop	{r4, pc}
    e88e:	bf00      	nop

0000e890 <d_template_param>:
    e890:	b538      	push	{r3, r4, r5, lr}
    e892:	68c3      	ldr	r3, [r0, #12]
    e894:	781a      	ldrb	r2, [r3, #0]
    e896:	2a54      	cmp	r2, #84	; 0x54
    e898:	d001      	beq.n	e89e <d_template_param+0xe>
    e89a:	2000      	movs	r0, #0
    e89c:	bd38      	pop	{r3, r4, r5, pc}
    e89e:	3301      	adds	r3, #1
    e8a0:	60c3      	str	r3, [r0, #12]
    e8a2:	4604      	mov	r4, r0
    e8a4:	f7ff ffd8 	bl	e858 <d_compact_number>
    e8a8:	1e05      	subs	r5, r0, #0
    e8aa:	dbf6      	blt.n	e89a <d_template_param+0xa>
    e8ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    e8ae:	6963      	ldr	r3, [r4, #20]
    e8b0:	69a1      	ldr	r1, [r4, #24]
    e8b2:	3201      	adds	r2, #1
    e8b4:	428b      	cmp	r3, r1
    e8b6:	62a2      	str	r2, [r4, #40]	; 0x28
    e8b8:	daef      	bge.n	e89a <d_template_param+0xa>
    e8ba:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    e8be:	6921      	ldr	r1, [r4, #16]
    e8c0:	0092      	lsls	r2, r2, #2
    e8c2:	3301      	adds	r3, #1
    e8c4:	1888      	adds	r0, r1, r2
    e8c6:	6163      	str	r3, [r4, #20]
    e8c8:	d002      	beq.n	e8d0 <d_template_param+0x40>
    e8ca:	2305      	movs	r3, #5
    e8cc:	548b      	strb	r3, [r1, r2]
    e8ce:	6045      	str	r5, [r0, #4]
    e8d0:	bd38      	pop	{r3, r4, r5, pc}
    e8d2:	bf00      	nop

0000e8d4 <d_source_name>:
    e8d4:	b570      	push	{r4, r5, r6, lr}
    e8d6:	4604      	mov	r4, r0
    e8d8:	300c      	adds	r0, #12
    e8da:	f7ff ff7b 	bl	e7d4 <d_number.isra.0>
    e8de:	1e06      	subs	r6, r0, #0
    e8e0:	dd4d      	ble.n	e97e <d_source_name+0xaa>
    e8e2:	68e5      	ldr	r5, [r4, #12]
    e8e4:	6863      	ldr	r3, [r4, #4]
    e8e6:	1b5b      	subs	r3, r3, r5
    e8e8:	429e      	cmp	r6, r3
    e8ea:	dc2b      	bgt.n	e944 <d_source_name+0x70>
    e8ec:	68a2      	ldr	r2, [r4, #8]
    e8ee:	19ab      	adds	r3, r5, r6
    e8f0:	0752      	lsls	r2, r2, #29
    e8f2:	60e3      	str	r3, [r4, #12]
    e8f4:	d504      	bpl.n	e900 <d_source_name+0x2c>
    e8f6:	5daa      	ldrb	r2, [r5, r6]
    e8f8:	2a24      	cmp	r2, #36	; 0x24
    e8fa:	bf04      	itt	eq
    e8fc:	3301      	addeq	r3, #1
    e8fe:	60e3      	streq	r3, [r4, #12]
    e900:	2e09      	cmp	r6, #9
    e902:	dd0c      	ble.n	e91e <d_source_name+0x4a>
    e904:	2208      	movs	r2, #8
    e906:	491f      	ldr	r1, [pc, #124]	; (e984 <d_source_name+0xb0>)
    e908:	4628      	mov	r0, r5
    e90a:	f009 fbd9 	bl	180c0 <memcmp>
    e90e:	b930      	cbnz	r0, e91e <d_source_name+0x4a>
    e910:	7a2b      	ldrb	r3, [r5, #8]
    e912:	2b2e      	cmp	r3, #46	; 0x2e
    e914:	d019      	beq.n	e94a <d_source_name+0x76>
    e916:	2b5f      	cmp	r3, #95	; 0x5f
    e918:	d017      	beq.n	e94a <d_source_name+0x76>
    e91a:	2b24      	cmp	r3, #36	; 0x24
    e91c:	d015      	beq.n	e94a <d_source_name+0x76>
    e91e:	6963      	ldr	r3, [r4, #20]
    e920:	69a2      	ldr	r2, [r4, #24]
    e922:	4293      	cmp	r3, r2
    e924:	da0e      	bge.n	e944 <d_source_name+0x70>
    e926:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    e92a:	6921      	ldr	r1, [r4, #16]
    e92c:	0092      	lsls	r2, r2, #2
    e92e:	3301      	adds	r3, #1
    e930:	1888      	adds	r0, r1, r2
    e932:	6163      	str	r3, [r4, #20]
    e934:	d006      	beq.n	e944 <d_source_name+0x70>
    e936:	b12d      	cbz	r5, e944 <d_source_name+0x70>
    e938:	2300      	movs	r3, #0
    e93a:	548b      	strb	r3, [r1, r2]
    e93c:	6045      	str	r5, [r0, #4]
    e93e:	6086      	str	r6, [r0, #8]
    e940:	62e0      	str	r0, [r4, #44]	; 0x2c
    e942:	bd70      	pop	{r4, r5, r6, pc}
    e944:	2000      	movs	r0, #0
    e946:	62e0      	str	r0, [r4, #44]	; 0x2c
    e948:	bd70      	pop	{r4, r5, r6, pc}
    e94a:	7a6b      	ldrb	r3, [r5, #9]
    e94c:	2b4e      	cmp	r3, #78	; 0x4e
    e94e:	d1e6      	bne.n	e91e <d_source_name+0x4a>
    e950:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e952:	6962      	ldr	r2, [r4, #20]
    e954:	69a1      	ldr	r1, [r4, #24]
    e956:	3316      	adds	r3, #22
    e958:	1b9e      	subs	r6, r3, r6
    e95a:	428a      	cmp	r2, r1
    e95c:	6326      	str	r6, [r4, #48]	; 0x30
    e95e:	daf1      	bge.n	e944 <d_source_name+0x70>
    e960:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    e964:	6921      	ldr	r1, [r4, #16]
    e966:	009b      	lsls	r3, r3, #2
    e968:	3201      	adds	r2, #1
    e96a:	18c8      	adds	r0, r1, r3
    e96c:	6162      	str	r2, [r4, #20]
    e96e:	d0ea      	beq.n	e946 <d_source_name+0x72>
    e970:	2500      	movs	r5, #0
    e972:	54cd      	strb	r5, [r1, r3]
    e974:	4a04      	ldr	r2, [pc, #16]	; (e988 <d_source_name+0xb4>)
    e976:	6042      	str	r2, [r0, #4]
    e978:	2315      	movs	r3, #21
    e97a:	6083      	str	r3, [r0, #8]
    e97c:	e7e3      	b.n	e946 <d_source_name+0x72>
    e97e:	2000      	movs	r0, #0
    e980:	bd70      	pop	{r4, r5, r6, pc}
    e982:	bf00      	nop
    e984:	0003dad4 	.word	0x0003dad4
    e988:	0003dae0 	.word	0x0003dae0

0000e98c <d_abi_tags>:
    e98c:	b570      	push	{r4, r5, r6, lr}
    e98e:	68c3      	ldr	r3, [r0, #12]
    e990:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
    e992:	781a      	ldrb	r2, [r3, #0]
    e994:	2a42      	cmp	r2, #66	; 0x42
    e996:	4604      	mov	r4, r0
    e998:	460d      	mov	r5, r1
    e99a:	d10f      	bne.n	e9bc <d_abi_tags+0x30>
    e99c:	3301      	adds	r3, #1
    e99e:	60e3      	str	r3, [r4, #12]
    e9a0:	4620      	mov	r0, r4
    e9a2:	f7ff ff97 	bl	e8d4 <d_source_name>
    e9a6:	462a      	mov	r2, r5
    e9a8:	4603      	mov	r3, r0
    e9aa:	214b      	movs	r1, #75	; 0x4b
    e9ac:	4620      	mov	r0, r4
    e9ae:	f7ff fdc1 	bl	e534 <d_make_comp>
    e9b2:	68e3      	ldr	r3, [r4, #12]
    e9b4:	781a      	ldrb	r2, [r3, #0]
    e9b6:	2a42      	cmp	r2, #66	; 0x42
    e9b8:	4605      	mov	r5, r0
    e9ba:	d0ef      	beq.n	e99c <d_abi_tags+0x10>
    e9bc:	62e6      	str	r6, [r4, #44]	; 0x2c
    e9be:	4628      	mov	r0, r5
    e9c0:	bd70      	pop	{r4, r5, r6, pc}
    e9c2:	bf00      	nop

0000e9c4 <d_substitution>:
    e9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e9c8:	4605      	mov	r5, r0
    e9ca:	68c0      	ldr	r0, [r0, #12]
    e9cc:	7803      	ldrb	r3, [r0, #0]
    e9ce:	2b53      	cmp	r3, #83	; 0x53
    e9d0:	d002      	beq.n	e9d8 <d_substitution+0x14>
    e9d2:	2000      	movs	r0, #0
    e9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e9d8:	1c43      	adds	r3, r0, #1
    e9da:	60eb      	str	r3, [r5, #12]
    e9dc:	7842      	ldrb	r2, [r0, #1]
    e9de:	b1a2      	cbz	r2, ea0a <d_substitution+0x46>
    e9e0:	1c83      	adds	r3, r0, #2
    e9e2:	60eb      	str	r3, [r5, #12]
    e9e4:	7842      	ldrb	r2, [r0, #1]
    e9e6:	2a5f      	cmp	r2, #95	; 0x5f
    e9e8:	d15a      	bne.n	eaa0 <d_substitution+0xdc>
    e9ea:	2300      	movs	r3, #0
    e9ec:	6a2a      	ldr	r2, [r5, #32]
    e9ee:	4293      	cmp	r3, r2
    e9f0:	d2ef      	bcs.n	e9d2 <d_substitution+0xe>
    e9f2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    e9f4:	69e9      	ldr	r1, [r5, #28]
    e9f6:	3201      	adds	r2, #1
    e9f8:	62aa      	str	r2, [r5, #40]	; 0x28
    e9fa:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    e9fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ea02:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    ea06:	2b19      	cmp	r3, #25
    ea08:	d94f      	bls.n	eaaa <d_substitution+0xe6>
    ea0a:	68ab      	ldr	r3, [r5, #8]
    ea0c:	f003 0308 	and.w	r3, r3, #8
    ea10:	2b00      	cmp	r3, #0
    ea12:	bf14      	ite	ne
    ea14:	2401      	movne	r4, #1
    ea16:	2400      	moveq	r4, #0
    ea18:	d101      	bne.n	ea1e <d_substitution+0x5a>
    ea1a:	2900      	cmp	r1, #0
    ea1c:	d169      	bne.n	eaf2 <d_substitution+0x12e>
    ea1e:	4b46      	ldr	r3, [pc, #280]	; (eb38 <d_substitution+0x174>)
    ea20:	2174      	movs	r1, #116	; 0x74
    ea22:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
    ea26:	e003      	b.n	ea30 <d_substitution+0x6c>
    ea28:	331c      	adds	r3, #28
    ea2a:	4283      	cmp	r3, r0
    ea2c:	d2d1      	bcs.n	e9d2 <d_substitution+0xe>
    ea2e:	7819      	ldrb	r1, [r3, #0]
    ea30:	428a      	cmp	r2, r1
    ea32:	d1f9      	bne.n	ea28 <d_substitution+0x64>
    ea34:	695e      	ldr	r6, [r3, #20]
    ea36:	2e00      	cmp	r6, #0
    ea38:	d07b      	beq.n	eb32 <d_substitution+0x16e>
    ea3a:	696a      	ldr	r2, [r5, #20]
    ea3c:	69a9      	ldr	r1, [r5, #24]
    ea3e:	428a      	cmp	r2, r1
    ea40:	da63      	bge.n	eb0a <d_substitution+0x146>
    ea42:	eb02 0742 	add.w	r7, r2, r2, lsl #1
    ea46:	f8d5 e010 	ldr.w	lr, [r5, #16]
    ea4a:	f8d3 8018 	ldr.w	r8, [r3, #24]
    ea4e:	00bf      	lsls	r7, r7, #2
    ea50:	3201      	adds	r2, #1
    ea52:	eb1e 0007 	adds.w	r0, lr, r7
    ea56:	616a      	str	r2, [r5, #20]
    ea58:	d006      	beq.n	ea68 <d_substitution+0xa4>
    ea5a:	f04f 0c18 	mov.w	ip, #24
    ea5e:	f80e c007 	strb.w	ip, [lr, r7]
    ea62:	6046      	str	r6, [r0, #4]
    ea64:	f8c0 8008 	str.w	r8, [r0, #8]
    ea68:	62e8      	str	r0, [r5, #44]	; 0x2c
    ea6a:	2c00      	cmp	r4, #0
    ea6c:	d04a      	beq.n	eb04 <d_substitution+0x140>
    ea6e:	68de      	ldr	r6, [r3, #12]
    ea70:	691c      	ldr	r4, [r3, #16]
    ea72:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    ea74:	4291      	cmp	r1, r2
    ea76:	4423      	add	r3, r4
    ea78:	632b      	str	r3, [r5, #48]	; 0x30
    ea7a:	dd41      	ble.n	eb00 <d_substitution+0x13c>
    ea7c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    ea80:	6929      	ldr	r1, [r5, #16]
    ea82:	009b      	lsls	r3, r3, #2
    ea84:	3201      	adds	r2, #1
    ea86:	18c8      	adds	r0, r1, r3
    ea88:	616a      	str	r2, [r5, #20]
    ea8a:	d003      	beq.n	ea94 <d_substitution+0xd0>
    ea8c:	2218      	movs	r2, #24
    ea8e:	54ca      	strb	r2, [r1, r3]
    ea90:	6046      	str	r6, [r0, #4]
    ea92:	6084      	str	r4, [r0, #8]
    ea94:	68eb      	ldr	r3, [r5, #12]
    ea96:	781b      	ldrb	r3, [r3, #0]
    ea98:	2b42      	cmp	r3, #66	; 0x42
    ea9a:	d038      	beq.n	eb0e <d_substitution+0x14a>
    ea9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eaa0:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
    eaa4:	b2e3      	uxtb	r3, r4
    eaa6:	2b09      	cmp	r3, #9
    eaa8:	d8ab      	bhi.n	ea02 <d_substitution+0x3e>
    eaaa:	2100      	movs	r1, #0
    eaac:	e00d      	b.n	eaca <d_substitution+0x106>
    eaae:	3b30      	subs	r3, #48	; 0x30
    eab0:	4299      	cmp	r1, r3
    eab2:	d88e      	bhi.n	e9d2 <d_substitution+0xe>
    eab4:	68e9      	ldr	r1, [r5, #12]
    eab6:	780a      	ldrb	r2, [r1, #0]
    eab8:	1c48      	adds	r0, r1, #1
    eaba:	b11a      	cbz	r2, eac4 <d_substitution+0x100>
    eabc:	60e8      	str	r0, [r5, #12]
    eabe:	780a      	ldrb	r2, [r1, #0]
    eac0:	2a5f      	cmp	r2, #95	; 0x5f
    eac2:	d014      	beq.n	eaee <d_substitution+0x12a>
    eac4:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
    eac8:	4619      	mov	r1, r3
    eaca:	b2e4      	uxtb	r4, r4
    eacc:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    ead0:	2c09      	cmp	r4, #9
    ead2:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
    ead6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    eada:	d9e8      	bls.n	eaae <d_substitution+0xea>
    eadc:	2819      	cmp	r0, #25
    eade:	f63f af78 	bhi.w	e9d2 <d_substitution+0xe>
    eae2:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    eae6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    eaea:	3b37      	subs	r3, #55	; 0x37
    eaec:	e7e0      	b.n	eab0 <d_substitution+0xec>
    eaee:	3301      	adds	r3, #1
    eaf0:	e77c      	b.n	e9ec <d_substitution+0x28>
    eaf2:	68eb      	ldr	r3, [r5, #12]
    eaf4:	781b      	ldrb	r3, [r3, #0]
    eaf6:	3b43      	subs	r3, #67	; 0x43
    eaf8:	2b01      	cmp	r3, #1
    eafa:	bf98      	it	ls
    eafc:	2401      	movls	r4, #1
    eafe:	e78e      	b.n	ea1e <d_substitution+0x5a>
    eb00:	2000      	movs	r0, #0
    eb02:	e7c7      	b.n	ea94 <d_substitution+0xd0>
    eb04:	685e      	ldr	r6, [r3, #4]
    eb06:	689c      	ldr	r4, [r3, #8]
    eb08:	e7b3      	b.n	ea72 <d_substitution+0xae>
    eb0a:	2000      	movs	r0, #0
    eb0c:	e7ac      	b.n	ea68 <d_substitution+0xa4>
    eb0e:	4601      	mov	r1, r0
    eb10:	4628      	mov	r0, r5
    eb12:	f7ff ff3b 	bl	e98c <d_abi_tags>
    eb16:	2800      	cmp	r0, #0
    eb18:	f43f af5b 	beq.w	e9d2 <d_substitution+0xe>
    eb1c:	6a2b      	ldr	r3, [r5, #32]
    eb1e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    eb20:	4293      	cmp	r3, r2
    eb22:	dabb      	bge.n	ea9c <d_substitution+0xd8>
    eb24:	69e9      	ldr	r1, [r5, #28]
    eb26:	1c5a      	adds	r2, r3, #1
    eb28:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    eb2c:	622a      	str	r2, [r5, #32]
    eb2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb32:	69a9      	ldr	r1, [r5, #24]
    eb34:	696a      	ldr	r2, [r5, #20]
    eb36:	e798      	b.n	ea6a <d_substitution+0xa6>
    eb38:	0003d33c 	.word	0x0003d33c

0000eb3c <d_call_offset>:
    eb3c:	b538      	push	{r3, r4, r5, lr}
    eb3e:	4604      	mov	r4, r0
    eb40:	b929      	cbnz	r1, eb4e <d_call_offset+0x12>
    eb42:	68c3      	ldr	r3, [r0, #12]
    eb44:	781a      	ldrb	r2, [r3, #0]
    eb46:	b132      	cbz	r2, eb56 <d_call_offset+0x1a>
    eb48:	1c5a      	adds	r2, r3, #1
    eb4a:	60c2      	str	r2, [r0, #12]
    eb4c:	7819      	ldrb	r1, [r3, #0]
    eb4e:	2968      	cmp	r1, #104	; 0x68
    eb50:	d019      	beq.n	eb86 <d_call_offset+0x4a>
    eb52:	2976      	cmp	r1, #118	; 0x76
    eb54:	d001      	beq.n	eb5a <d_call_offset+0x1e>
    eb56:	2000      	movs	r0, #0
    eb58:	bd38      	pop	{r3, r4, r5, pc}
    eb5a:	f104 050c 	add.w	r5, r4, #12
    eb5e:	4628      	mov	r0, r5
    eb60:	f7ff fe38 	bl	e7d4 <d_number.isra.0>
    eb64:	68e3      	ldr	r3, [r4, #12]
    eb66:	781a      	ldrb	r2, [r3, #0]
    eb68:	2a5f      	cmp	r2, #95	; 0x5f
    eb6a:	d1f4      	bne.n	eb56 <d_call_offset+0x1a>
    eb6c:	3301      	adds	r3, #1
    eb6e:	60e3      	str	r3, [r4, #12]
    eb70:	4628      	mov	r0, r5
    eb72:	f7ff fe2f 	bl	e7d4 <d_number.isra.0>
    eb76:	68e3      	ldr	r3, [r4, #12]
    eb78:	781a      	ldrb	r2, [r3, #0]
    eb7a:	2a5f      	cmp	r2, #95	; 0x5f
    eb7c:	d1eb      	bne.n	eb56 <d_call_offset+0x1a>
    eb7e:	3301      	adds	r3, #1
    eb80:	60e3      	str	r3, [r4, #12]
    eb82:	2001      	movs	r0, #1
    eb84:	bd38      	pop	{r3, r4, r5, pc}
    eb86:	f104 000c 	add.w	r0, r4, #12
    eb8a:	f7ff fe23 	bl	e7d4 <d_number.isra.0>
    eb8e:	e7f2      	b.n	eb76 <d_call_offset+0x3a>

0000eb90 <d_lookup_template_argument.isra.6>:
    eb90:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    eb94:	b19b      	cbz	r3, ebbe <d_lookup_template_argument.isra.6+0x2e>
    eb96:	680a      	ldr	r2, [r1, #0]
    eb98:	685b      	ldr	r3, [r3, #4]
    eb9a:	2a00      	cmp	r2, #0
    eb9c:	689b      	ldr	r3, [r3, #8]
    eb9e:	db09      	blt.n	ebb4 <d_lookup_template_argument.isra.6+0x24>
    eba0:	b923      	cbnz	r3, ebac <d_lookup_template_argument.isra.6+0x1c>
    eba2:	e007      	b.n	ebb4 <d_lookup_template_argument.isra.6+0x24>
    eba4:	b142      	cbz	r2, ebb8 <d_lookup_template_argument.isra.6+0x28>
    eba6:	689b      	ldr	r3, [r3, #8]
    eba8:	3a01      	subs	r2, #1
    ebaa:	b11b      	cbz	r3, ebb4 <d_lookup_template_argument.isra.6+0x24>
    ebac:	7819      	ldrb	r1, [r3, #0]
    ebae:	292f      	cmp	r1, #47	; 0x2f
    ebb0:	d0f8      	beq.n	eba4 <d_lookup_template_argument.isra.6+0x14>
    ebb2:	2300      	movs	r3, #0
    ebb4:	4618      	mov	r0, r3
    ebb6:	4770      	bx	lr
    ebb8:	685b      	ldr	r3, [r3, #4]
    ebba:	4618      	mov	r0, r3
    ebbc:	4770      	bx	lr
    ebbe:	2201      	movs	r2, #1
    ebc0:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
    ebc4:	e7f6      	b.n	ebb4 <d_lookup_template_argument.isra.6+0x24>
    ebc6:	bf00      	nop

0000ebc8 <d_find_pack>:
    ebc8:	2900      	cmp	r1, #0
    ebca:	d041      	beq.n	ec50 <d_find_pack+0x88>
    ebcc:	b538      	push	{r3, r4, r5, lr}
    ebce:	4605      	mov	r5, r0
    ebd0:	460c      	mov	r4, r1
    ebd2:	7823      	ldrb	r3, [r4, #0]
    ebd4:	2b4b      	cmp	r3, #75	; 0x4b
    ebd6:	d827      	bhi.n	ec28 <d_find_pack+0x60>
    ebd8:	e8df f003 	tbb	[pc, r3]
    ebdc:	2626262e 	.word	0x2626262e
    ebe0:	2b2e3026 	.word	0x2b2e3026
    ebe4:	2626262b 	.word	0x2626262b
    ebe8:	26262626 	.word	0x26262626
    ebec:	26262626 	.word	0x26262626
    ebf0:	26262626 	.word	0x26262626
    ebf4:	2626262e 	.word	0x2626262e
    ebf8:	26262626 	.word	0x26262626
    ebfc:	26262626 	.word	0x26262626
    ec00:	2e262626 	.word	0x2e262626
    ec04:	26262626 	.word	0x26262626
    ec08:	2626262e 	.word	0x2626262e
    ec0c:	262b2e26 	.word	0x262b2e26
    ec10:	26262626 	.word	0x26262626
    ec14:	26262626 	.word	0x26262626
    ec18:	26262626 	.word	0x26262626
    ec1c:	26262e2e 	.word	0x26262e2e
    ec20:	2e2e2e26 	.word	0x2e2e2e26
    ec24:	2e2e2626 	.word	0x2e2e2626
    ec28:	6861      	ldr	r1, [r4, #4]
    ec2a:	4628      	mov	r0, r5
    ec2c:	f7ff ffcc 	bl	ebc8 <d_find_pack>
    ec30:	b918      	cbnz	r0, ec3a <d_find_pack+0x72>
    ec32:	68a4      	ldr	r4, [r4, #8]
    ec34:	2c00      	cmp	r4, #0
    ec36:	d1cc      	bne.n	ebd2 <d_find_pack+0xa>
    ec38:	2000      	movs	r0, #0
    ec3a:	bd38      	pop	{r3, r4, r5, pc}
    ec3c:	1d21      	adds	r1, r4, #4
    ec3e:	4628      	mov	r0, r5
    ec40:	f7ff ffa6 	bl	eb90 <d_lookup_template_argument.isra.6>
    ec44:	2800      	cmp	r0, #0
    ec46:	d0f7      	beq.n	ec38 <d_find_pack+0x70>
    ec48:	7803      	ldrb	r3, [r0, #0]
    ec4a:	2b2f      	cmp	r3, #47	; 0x2f
    ec4c:	d1f4      	bne.n	ec38 <d_find_pack+0x70>
    ec4e:	bd38      	pop	{r3, r4, r5, pc}
    ec50:	2000      	movs	r0, #0
    ec52:	4770      	bx	lr

0000ec54 <d_growable_string_callback_adapter>:
    ec54:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec56:	4615      	mov	r5, r2
    ec58:	6852      	ldr	r2, [r2, #4]
    ec5a:	68ac      	ldr	r4, [r5, #8]
    ec5c:	1c4b      	adds	r3, r1, #1
    ec5e:	4413      	add	r3, r2
    ec60:	42a3      	cmp	r3, r4
    ec62:	b083      	sub	sp, #12
    ec64:	460e      	mov	r6, r1
    ec66:	4607      	mov	r7, r0
    ec68:	d813      	bhi.n	ec92 <d_growable_string_callback_adapter+0x3e>
    ec6a:	68ec      	ldr	r4, [r5, #12]
    ec6c:	b10c      	cbz	r4, ec72 <d_growable_string_callback_adapter+0x1e>
    ec6e:	b003      	add	sp, #12
    ec70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec72:	e895 0009 	ldmia.w	r5, {r0, r3}
    ec76:	4632      	mov	r2, r6
    ec78:	4639      	mov	r1, r7
    ec7a:	4418      	add	r0, r3
    ec7c:	f009 fa50 	bl	18120 <memcpy>
    ec80:	682b      	ldr	r3, [r5, #0]
    ec82:	686a      	ldr	r2, [r5, #4]
    ec84:	4433      	add	r3, r6
    ec86:	549c      	strb	r4, [r3, r2]
    ec88:	686b      	ldr	r3, [r5, #4]
    ec8a:	441e      	add	r6, r3
    ec8c:	606e      	str	r6, [r5, #4]
    ec8e:	b003      	add	sp, #12
    ec90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec92:	68ea      	ldr	r2, [r5, #12]
    ec94:	2a00      	cmp	r2, #0
    ec96:	d1ea      	bne.n	ec6e <d_growable_string_callback_adapter+0x1a>
    ec98:	b91c      	cbnz	r4, eca2 <d_growable_string_callback_adapter+0x4e>
    ec9a:	2b02      	cmp	r3, #2
    ec9c:	f04f 0402 	mov.w	r4, #2
    eca0:	d902      	bls.n	eca8 <d_growable_string_callback_adapter+0x54>
    eca2:	0064      	lsls	r4, r4, #1
    eca4:	42a3      	cmp	r3, r4
    eca6:	d8fc      	bhi.n	eca2 <d_growable_string_callback_adapter+0x4e>
    eca8:	4621      	mov	r1, r4
    ecaa:	6828      	ldr	r0, [r5, #0]
    ecac:	f009 fbdc 	bl	18468 <realloc>
    ecb0:	b110      	cbz	r0, ecb8 <d_growable_string_callback_adapter+0x64>
    ecb2:	6028      	str	r0, [r5, #0]
    ecb4:	60ac      	str	r4, [r5, #8]
    ecb6:	e7d8      	b.n	ec6a <d_growable_string_callback_adapter+0x16>
    ecb8:	9001      	str	r0, [sp, #4]
    ecba:	6828      	ldr	r0, [r5, #0]
    ecbc:	f008 fedc 	bl	17a78 <free>
    ecc0:	9b01      	ldr	r3, [sp, #4]
    ecc2:	602b      	str	r3, [r5, #0]
    ecc4:	2201      	movs	r2, #1
    ecc6:	606b      	str	r3, [r5, #4]
    ecc8:	60ab      	str	r3, [r5, #8]
    ecca:	60ea      	str	r2, [r5, #12]
    eccc:	e7cf      	b.n	ec6e <d_growable_string_callback_adapter+0x1a>
    ecce:	bf00      	nop

0000ecd0 <d_append_num>:
    ecd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ecd4:	b088      	sub	sp, #32
    ecd6:	460a      	mov	r2, r1
    ecd8:	4604      	mov	r4, r0
    ecda:	491b      	ldr	r1, [pc, #108]	; (ed48 <d_append_num+0x78>)
    ecdc:	a801      	add	r0, sp, #4
    ecde:	f009 fdd1 	bl	18884 <sprintf>
    ece2:	a801      	add	r0, sp, #4
    ece4:	f00a f9ac 	bl	19040 <strlen>
    ece8:	b350      	cbz	r0, ed40 <d_append_num+0x70>
    ecea:	ad01      	add	r5, sp, #4
    ecec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    ecf0:	182f      	adds	r7, r5, r0
    ecf2:	f04f 0800 	mov.w	r8, #0
    ecf6:	e009      	b.n	ed0c <d_append_num+0x3c>
    ecf8:	460b      	mov	r3, r1
    ecfa:	42bd      	cmp	r5, r7
    ecfc:	f101 0101 	add.w	r1, r1, #1
    ed00:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ed04:	54e6      	strb	r6, [r4, r3]
    ed06:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    ed0a:	d019      	beq.n	ed40 <d_append_num+0x70>
    ed0c:	29ff      	cmp	r1, #255	; 0xff
    ed0e:	f815 6b01 	ldrb.w	r6, [r5], #1
    ed12:	d1f1      	bne.n	ecf8 <d_append_num+0x28>
    ed14:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ed18:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    ed1c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ed20:	4620      	mov	r0, r4
    ed22:	4798      	blx	r3
    ed24:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    ed28:	3301      	adds	r3, #1
    ed2a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ed2e:	2300      	movs	r3, #0
    ed30:	2101      	movs	r1, #1
    ed32:	42bd      	cmp	r5, r7
    ed34:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ed38:	54e6      	strb	r6, [r4, r3]
    ed3a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    ed3e:	d1e5      	bne.n	ed0c <d_append_num+0x3c>
    ed40:	b008      	add	sp, #32
    ed42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed46:	bf00      	nop
    ed48:	0003cbdc 	.word	0x0003cbdc

0000ed4c <d_exprlist>:
    ed4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed50:	68c3      	ldr	r3, [r0, #12]
    ed52:	781d      	ldrb	r5, [r3, #0]
    ed54:	b083      	sub	sp, #12
    ed56:	2200      	movs	r2, #0
    ed58:	428d      	cmp	r5, r1
    ed5a:	4604      	mov	r4, r0
    ed5c:	9201      	str	r2, [sp, #4]
    ed5e:	f000 81c6 	beq.w	f0ee <d_exprlist+0x3a2>
    ed62:	4688      	mov	r8, r1
    ed64:	f8df 949c 	ldr.w	r9, [pc, #1180]	; f204 <d_exprlist+0x4b8>
    ed68:	ae01      	add	r6, sp, #4
    ed6a:	e023      	b.n	edb4 <d_exprlist+0x68>
    ed6c:	2a66      	cmp	r2, #102	; 0x66
    ed6e:	d04c      	beq.n	ee0a <d_exprlist+0xbe>
    ed70:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    ed74:	2909      	cmp	r1, #9
    ed76:	f200 8217 	bhi.w	f1a8 <d_exprlist+0x45c>
    ed7a:	4620      	mov	r0, r4
    ed7c:	f001 fb10 	bl	103a0 <d_unqualified_name>
    ed80:	4605      	mov	r5, r0
    ed82:	2800      	cmp	r0, #0
    ed84:	f000 8170 	beq.w	f068 <d_exprlist+0x31c>
    ed88:	68e3      	ldr	r3, [r4, #12]
    ed8a:	781b      	ldrb	r3, [r3, #0]
    ed8c:	2b49      	cmp	r3, #73	; 0x49
    ed8e:	f000 8092 	beq.w	eeb6 <d_exprlist+0x16a>
    ed92:	6367      	str	r7, [r4, #52]	; 0x34
    ed94:	462a      	mov	r2, r5
    ed96:	2300      	movs	r3, #0
    ed98:	212e      	movs	r1, #46	; 0x2e
    ed9a:	4620      	mov	r0, r4
    ed9c:	f7ff fbca 	bl	e534 <d_make_comp>
    eda0:	6030      	str	r0, [r6, #0]
    eda2:	2800      	cmp	r0, #0
    eda4:	d05b      	beq.n	ee5e <d_exprlist+0x112>
    eda6:	68e3      	ldr	r3, [r4, #12]
    eda8:	781a      	ldrb	r2, [r3, #0]
    edaa:	4542      	cmp	r2, r8
    edac:	f100 0608 	add.w	r6, r0, #8
    edb0:	f000 8107 	beq.w	efc2 <d_exprlist+0x276>
    edb4:	2501      	movs	r5, #1
    edb6:	6b67      	ldr	r7, [r4, #52]	; 0x34
    edb8:	6365      	str	r5, [r4, #52]	; 0x34
    edba:	781a      	ldrb	r2, [r3, #0]
    edbc:	2a4c      	cmp	r2, #76	; 0x4c
    edbe:	d047      	beq.n	ee50 <d_exprlist+0x104>
    edc0:	2a54      	cmp	r2, #84	; 0x54
    edc2:	d051      	beq.n	ee68 <d_exprlist+0x11c>
    edc4:	2a73      	cmp	r2, #115	; 0x73
    edc6:	d1d1      	bne.n	ed6c <d_exprlist+0x20>
    edc8:	785a      	ldrb	r2, [r3, #1]
    edca:	2a72      	cmp	r2, #114	; 0x72
    edcc:	f000 80e2 	beq.w	ef94 <d_exprlist+0x248>
    edd0:	2a70      	cmp	r2, #112	; 0x70
    edd2:	f000 80fd 	beq.w	efd0 <d_exprlist+0x284>
    edd6:	4620      	mov	r0, r4
    edd8:	f001 fa22 	bl	10220 <d_operator_name>
    eddc:	4605      	mov	r5, r0
    edde:	2800      	cmp	r0, #0
    ede0:	f000 8142 	beq.w	f068 <d_exprlist+0x31c>
    ede4:	782b      	ldrb	r3, [r5, #0]
    ede6:	2b31      	cmp	r3, #49	; 0x31
    ede8:	d043      	beq.n	ee72 <d_exprlist+0x126>
    edea:	2b32      	cmp	r3, #50	; 0x32
    edec:	d05c      	beq.n	eea8 <d_exprlist+0x15c>
    edee:	2b33      	cmp	r3, #51	; 0x33
    edf0:	d17b      	bne.n	eeea <d_exprlist+0x19e>
    edf2:	68e3      	ldr	r3, [r4, #12]
    edf4:	781a      	ldrb	r2, [r3, #0]
    edf6:	2a5f      	cmp	r2, #95	; 0x5f
    edf8:	f040 80c1 	bne.w	ef7e <d_exprlist+0x232>
    edfc:	3301      	adds	r3, #1
    edfe:	60e3      	str	r3, [r4, #12]
    ee00:	2145      	movs	r1, #69	; 0x45
    ee02:	4620      	mov	r0, r4
    ee04:	f7ff ffa2 	bl	ed4c <d_exprlist>
    ee08:	e0bc      	b.n	ef84 <d_exprlist+0x238>
    ee0a:	785a      	ldrb	r2, [r3, #1]
    ee0c:	2a70      	cmp	r2, #112	; 0x70
    ee0e:	d1e2      	bne.n	edd6 <d_exprlist+0x8a>
    ee10:	1c9a      	adds	r2, r3, #2
    ee12:	60e2      	str	r2, [r4, #12]
    ee14:	789a      	ldrb	r2, [r3, #2]
    ee16:	2a54      	cmp	r2, #84	; 0x54
    ee18:	d069      	beq.n	eeee <d_exprlist+0x1a2>
    ee1a:	4620      	mov	r0, r4
    ee1c:	f7ff fd1c 	bl	e858 <d_compact_number>
    ee20:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    ee24:	4298      	cmp	r0, r3
    ee26:	d060      	beq.n	eeea <d_exprlist+0x19e>
    ee28:	1c43      	adds	r3, r0, #1
    ee2a:	d05e      	beq.n	eeea <d_exprlist+0x19e>
    ee2c:	3001      	adds	r0, #1
    ee2e:	6963      	ldr	r3, [r4, #20]
    ee30:	69a2      	ldr	r2, [r4, #24]
    ee32:	4293      	cmp	r3, r2
    ee34:	da59      	bge.n	eeea <d_exprlist+0x19e>
    ee36:	6922      	ldr	r2, [r4, #16]
    ee38:	1c59      	adds	r1, r3, #1
    ee3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ee3e:	eb12 0583 	adds.w	r5, r2, r3, lsl #2
    ee42:	6161      	str	r1, [r4, #20]
    ee44:	d051      	beq.n	eeea <d_exprlist+0x19e>
    ee46:	2106      	movs	r1, #6
    ee48:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    ee4c:	6068      	str	r0, [r5, #4]
    ee4e:	e7a0      	b.n	ed92 <d_exprlist+0x46>
    ee50:	4620      	mov	r0, r4
    ee52:	f001 fef3 	bl	10c3c <d_expr_primary>
    ee56:	4605      	mov	r5, r0
    ee58:	6367      	str	r7, [r4, #52]	; 0x34
    ee5a:	2d00      	cmp	r5, #0
    ee5c:	d19a      	bne.n	ed94 <d_exprlist+0x48>
    ee5e:	2500      	movs	r5, #0
    ee60:	4628      	mov	r0, r5
    ee62:	b003      	add	sp, #12
    ee64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee68:	4620      	mov	r0, r4
    ee6a:	f7ff fd11 	bl	e890 <d_template_param>
    ee6e:	4605      	mov	r5, r0
    ee70:	e7f2      	b.n	ee58 <d_exprlist+0x10c>
    ee72:	f8d5 b004 	ldr.w	fp, [r5, #4]
    ee76:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ee78:	f8db 2008 	ldr.w	r2, [fp, #8]
    ee7c:	f8db a000 	ldr.w	sl, [fp]
    ee80:	3a02      	subs	r2, #2
    ee82:	4413      	add	r3, r2
    ee84:	6323      	str	r3, [r4, #48]	; 0x30
    ee86:	4650      	mov	r0, sl
    ee88:	4649      	mov	r1, r9
    ee8a:	f009 fd6d 	bl	18968 <strcmp>
    ee8e:	2800      	cmp	r0, #0
    ee90:	f000 80e6 	beq.w	f060 <d_exprlist+0x314>
    ee94:	f8db 300c 	ldr.w	r3, [fp, #12]
    ee98:	2b03      	cmp	r3, #3
    ee9a:	d826      	bhi.n	eeea <d_exprlist+0x19e>
    ee9c:	e8df f013 	tbh	[pc, r3, lsl #1]
    eea0:	0135002b 	.word	0x0135002b
    eea4:	00a50033 	.word	0x00a50033
    eea8:	686b      	ldr	r3, [r5, #4]
    eeaa:	2b03      	cmp	r3, #3
    eeac:	d81d      	bhi.n	eeea <d_exprlist+0x19e>
    eeae:	e8df f003 	tbb	[pc, r3]
    eeb2:	6622      	.short	0x6622
    eeb4:	1c1c      	.short	0x1c1c
    eeb6:	4620      	mov	r0, r4
    eeb8:	f000 fc04 	bl	f6c4 <d_template_args>
    eebc:	462a      	mov	r2, r5
    eebe:	4603      	mov	r3, r0
    eec0:	2104      	movs	r1, #4
    eec2:	4620      	mov	r0, r4
    eec4:	f7ff fb36 	bl	e534 <d_make_comp>
    eec8:	4605      	mov	r5, r0
    eeca:	e7c5      	b.n	ee58 <d_exprlist+0x10c>
    eecc:	2a74      	cmp	r2, #116	; 0x74
    eece:	d182      	bne.n	edd6 <d_exprlist+0x8a>
    eed0:	785b      	ldrb	r3, [r3, #1]
    eed2:	2b6c      	cmp	r3, #108	; 0x6c
    eed4:	f47f af7f 	bne.w	edd6 <d_exprlist+0x8a>
    eed8:	4620      	mov	r0, r4
    eeda:	f000 fdb9 	bl	fa50 <d_type>
    eede:	68e3      	ldr	r3, [r4, #12]
    eee0:	785a      	ldrb	r2, [r3, #1]
    eee2:	4605      	mov	r5, r0
    eee4:	2a00      	cmp	r2, #0
    eee6:	f040 8169 	bne.w	f1bc <d_exprlist+0x470>
    eeea:	6367      	str	r7, [r4, #52]	; 0x34
    eeec:	e7b7      	b.n	ee5e <d_exprlist+0x112>
    eeee:	3303      	adds	r3, #3
    eef0:	60e3      	str	r3, [r4, #12]
    eef2:	2000      	movs	r0, #0
    eef4:	e79b      	b.n	ee2e <d_exprlist+0xe2>
    eef6:	462a      	mov	r2, r5
    eef8:	2300      	movs	r3, #0
    eefa:	2135      	movs	r1, #53	; 0x35
    eefc:	4620      	mov	r0, r4
    eefe:	f7ff fb19 	bl	e534 <d_make_comp>
    ef02:	4605      	mov	r5, r0
    ef04:	e7a8      	b.n	ee58 <d_exprlist+0x10c>
    ef06:	f1ba 0f00 	cmp.w	sl, #0
    ef0a:	d0ee      	beq.n	eeea <d_exprlist+0x19e>
    ef0c:	686b      	ldr	r3, [r5, #4]
    ef0e:	681b      	ldr	r3, [r3, #0]
    ef10:	785a      	ldrb	r2, [r3, #1]
    ef12:	2a63      	cmp	r2, #99	; 0x63
    ef14:	f000 80d2 	beq.w	f0bc <d_exprlist+0x370>
    ef18:	f89a 3000 	ldrb.w	r3, [sl]
    ef1c:	2b66      	cmp	r3, #102	; 0x66
    ef1e:	f000 80ef 	beq.w	f100 <d_exprlist+0x3b4>
    ef22:	4620      	mov	r0, r4
    ef24:	f000 f970 	bl	f208 <d_expression_1>
    ef28:	4683      	mov	fp, r0
    ef2a:	49b1      	ldr	r1, [pc, #708]	; (f1f0 <d_exprlist+0x4a4>)
    ef2c:	4650      	mov	r0, sl
    ef2e:	f009 fd1b 	bl	18968 <strcmp>
    ef32:	2800      	cmp	r0, #0
    ef34:	f000 809d 	beq.w	f072 <d_exprlist+0x326>
    ef38:	49ae      	ldr	r1, [pc, #696]	; (f1f4 <d_exprlist+0x4a8>)
    ef3a:	4650      	mov	r0, sl
    ef3c:	f009 fd14 	bl	18968 <strcmp>
    ef40:	b130      	cbz	r0, ef50 <d_exprlist+0x204>
    ef42:	4650      	mov	r0, sl
    ef44:	49ac      	ldr	r1, [pc, #688]	; (f1f8 <d_exprlist+0x4ac>)
    ef46:	f009 fd0f 	bl	18968 <strcmp>
    ef4a:	2800      	cmp	r0, #0
    ef4c:	f040 8083 	bne.w	f056 <d_exprlist+0x30a>
    ef50:	4620      	mov	r0, r4
    ef52:	f001 fa25 	bl	103a0 <d_unqualified_name>
    ef56:	68e3      	ldr	r3, [r4, #12]
    ef58:	781b      	ldrb	r3, [r3, #0]
    ef5a:	2b49      	cmp	r3, #73	; 0x49
    ef5c:	4682      	mov	sl, r0
    ef5e:	f000 80e9 	beq.w	f134 <d_exprlist+0x3e8>
    ef62:	4653      	mov	r3, sl
    ef64:	465a      	mov	r2, fp
    ef66:	2138      	movs	r1, #56	; 0x38
    ef68:	4620      	mov	r0, r4
    ef6a:	f7ff fae3 	bl	e534 <d_make_comp>
    ef6e:	462a      	mov	r2, r5
    ef70:	4603      	mov	r3, r0
    ef72:	2137      	movs	r1, #55	; 0x37
    ef74:	4620      	mov	r0, r4
    ef76:	f7ff fadd 	bl	e534 <d_make_comp>
    ef7a:	4605      	mov	r5, r0
    ef7c:	e76c      	b.n	ee58 <d_exprlist+0x10c>
    ef7e:	4620      	mov	r0, r4
    ef80:	f000 f942 	bl	f208 <d_expression_1>
    ef84:	4603      	mov	r3, r0
    ef86:	462a      	mov	r2, r5
    ef88:	2136      	movs	r1, #54	; 0x36
    ef8a:	4620      	mov	r0, r4
    ef8c:	f7ff fad2 	bl	e534 <d_make_comp>
    ef90:	4605      	mov	r5, r0
    ef92:	e761      	b.n	ee58 <d_exprlist+0x10c>
    ef94:	3302      	adds	r3, #2
    ef96:	60e3      	str	r3, [r4, #12]
    ef98:	4620      	mov	r0, r4
    ef9a:	f000 fd59 	bl	fa50 <d_type>
    ef9e:	4682      	mov	sl, r0
    efa0:	4620      	mov	r0, r4
    efa2:	f001 f9fd 	bl	103a0 <d_unqualified_name>
    efa6:	68e3      	ldr	r3, [r4, #12]
    efa8:	781b      	ldrb	r3, [r3, #0]
    efaa:	2b49      	cmp	r3, #73	; 0x49
    efac:	4683      	mov	fp, r0
    efae:	f000 8093 	beq.w	f0d8 <d_exprlist+0x38c>
    efb2:	4603      	mov	r3, r0
    efb4:	4629      	mov	r1, r5
    efb6:	4652      	mov	r2, sl
    efb8:	4620      	mov	r0, r4
    efba:	f7ff fabb 	bl	e534 <d_make_comp>
    efbe:	4605      	mov	r5, r0
    efc0:	e74a      	b.n	ee58 <d_exprlist+0x10c>
    efc2:	9d01      	ldr	r5, [sp, #4]
    efc4:	3301      	adds	r3, #1
    efc6:	4628      	mov	r0, r5
    efc8:	60e3      	str	r3, [r4, #12]
    efca:	b003      	add	sp, #12
    efcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    efd0:	3302      	adds	r3, #2
    efd2:	60e3      	str	r3, [r4, #12]
    efd4:	4620      	mov	r0, r4
    efd6:	f000 f917 	bl	f208 <d_expression_1>
    efda:	2300      	movs	r3, #0
    efdc:	4602      	mov	r2, r0
    efde:	214a      	movs	r1, #74	; 0x4a
    efe0:	4620      	mov	r0, r4
    efe2:	f7ff faa7 	bl	e534 <d_make_comp>
    efe6:	4605      	mov	r5, r0
    efe8:	e736      	b.n	ee58 <d_exprlist+0x10c>
    efea:	f1ba 0f00 	cmp.w	sl, #0
    efee:	f43f af7c 	beq.w	eeea <d_exprlist+0x19e>
    eff2:	4982      	ldr	r1, [pc, #520]	; (f1fc <d_exprlist+0x4b0>)
    eff4:	4650      	mov	r0, sl
    eff6:	f009 fcb7 	bl	18968 <strcmp>
    effa:	2800      	cmp	r0, #0
    effc:	d03f      	beq.n	f07e <d_exprlist+0x332>
    effe:	f89a 3000 	ldrb.w	r3, [sl]
    f002:	2b66      	cmp	r3, #102	; 0x66
    f004:	f000 80bd 	beq.w	f182 <d_exprlist+0x436>
    f008:	2b6e      	cmp	r3, #110	; 0x6e
    f00a:	f47f af6e 	bne.w	eeea <d_exprlist+0x19e>
    f00e:	f89a 3001 	ldrb.w	r3, [sl, #1]
    f012:	2b77      	cmp	r3, #119	; 0x77
    f014:	d002      	beq.n	f01c <d_exprlist+0x2d0>
    f016:	2b61      	cmp	r3, #97	; 0x61
    f018:	f47f af67 	bne.w	eeea <d_exprlist+0x19e>
    f01c:	215f      	movs	r1, #95	; 0x5f
    f01e:	4620      	mov	r0, r4
    f020:	f7ff fe94 	bl	ed4c <d_exprlist>
    f024:	4682      	mov	sl, r0
    f026:	4620      	mov	r0, r4
    f028:	f000 fd12 	bl	fa50 <d_type>
    f02c:	68e3      	ldr	r3, [r4, #12]
    f02e:	781a      	ldrb	r2, [r3, #0]
    f030:	2a45      	cmp	r2, #69	; 0x45
    f032:	4683      	mov	fp, r0
    f034:	f000 80a1 	beq.w	f17a <d_exprlist+0x42e>
    f038:	2a70      	cmp	r2, #112	; 0x70
    f03a:	f000 80a6 	beq.w	f18a <d_exprlist+0x43e>
    f03e:	2a69      	cmp	r2, #105	; 0x69
    f040:	f47f af53 	bne.w	eeea <d_exprlist+0x19e>
    f044:	785b      	ldrb	r3, [r3, #1]
    f046:	2b6c      	cmp	r3, #108	; 0x6c
    f048:	f47f af4f 	bne.w	eeea <d_exprlist+0x19e>
    f04c:	4620      	mov	r0, r4
    f04e:	f000 f8db 	bl	f208 <d_expression_1>
    f052:	4603      	mov	r3, r0
    f054:	e01f      	b.n	f096 <d_exprlist+0x34a>
    f056:	4620      	mov	r0, r4
    f058:	f000 f8d6 	bl	f208 <d_expression_1>
    f05c:	4682      	mov	sl, r0
    f05e:	e780      	b.n	ef62 <d_exprlist+0x216>
    f060:	4620      	mov	r0, r4
    f062:	f000 fcf5 	bl	fa50 <d_type>
    f066:	e78d      	b.n	ef84 <d_exprlist+0x238>
    f068:	4628      	mov	r0, r5
    f06a:	6367      	str	r7, [r4, #52]	; 0x34
    f06c:	b003      	add	sp, #12
    f06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f072:	2145      	movs	r1, #69	; 0x45
    f074:	4620      	mov	r0, r4
    f076:	f7ff fe69 	bl	ed4c <d_exprlist>
    f07a:	4682      	mov	sl, r0
    f07c:	e771      	b.n	ef62 <d_exprlist+0x216>
    f07e:	4620      	mov	r0, r4
    f080:	f000 f8c2 	bl	f208 <d_expression_1>
    f084:	4682      	mov	sl, r0
    f086:	4620      	mov	r0, r4
    f088:	f000 f8be 	bl	f208 <d_expression_1>
    f08c:	4683      	mov	fp, r0
    f08e:	4620      	mov	r0, r4
    f090:	f000 f8ba 	bl	f208 <d_expression_1>
    f094:	4603      	mov	r3, r0
    f096:	465a      	mov	r2, fp
    f098:	213b      	movs	r1, #59	; 0x3b
    f09a:	4620      	mov	r0, r4
    f09c:	f7ff fa4a 	bl	e534 <d_make_comp>
    f0a0:	4652      	mov	r2, sl
    f0a2:	4603      	mov	r3, r0
    f0a4:	213a      	movs	r1, #58	; 0x3a
    f0a6:	4620      	mov	r0, r4
    f0a8:	f7ff fa44 	bl	e534 <d_make_comp>
    f0ac:	462a      	mov	r2, r5
    f0ae:	4603      	mov	r3, r0
    f0b0:	2139      	movs	r1, #57	; 0x39
    f0b2:	4620      	mov	r0, r4
    f0b4:	f7ff fa3e 	bl	e534 <d_make_comp>
    f0b8:	4605      	mov	r5, r0
    f0ba:	e6cd      	b.n	ee58 <d_exprlist+0x10c>
    f0bc:	781b      	ldrb	r3, [r3, #0]
    f0be:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
    f0c2:	2a01      	cmp	r2, #1
    f0c4:	d903      	bls.n	f0ce <d_exprlist+0x382>
    f0c6:	3b72      	subs	r3, #114	; 0x72
    f0c8:	2b01      	cmp	r3, #1
    f0ca:	f63f af25 	bhi.w	ef18 <d_exprlist+0x1cc>
    f0ce:	4620      	mov	r0, r4
    f0d0:	f000 fcbe 	bl	fa50 <d_type>
    f0d4:	4683      	mov	fp, r0
    f0d6:	e728      	b.n	ef2a <d_exprlist+0x1de>
    f0d8:	4620      	mov	r0, r4
    f0da:	f000 faf3 	bl	f6c4 <d_template_args>
    f0de:	465a      	mov	r2, fp
    f0e0:	4603      	mov	r3, r0
    f0e2:	2104      	movs	r1, #4
    f0e4:	4620      	mov	r0, r4
    f0e6:	f7ff fa25 	bl	e534 <d_make_comp>
    f0ea:	4603      	mov	r3, r0
    f0ec:	e762      	b.n	efb4 <d_exprlist+0x268>
    f0ee:	3301      	adds	r3, #1
    f0f0:	60c3      	str	r3, [r0, #12]
    f0f2:	212e      	movs	r1, #46	; 0x2e
    f0f4:	4613      	mov	r3, r2
    f0f6:	b003      	add	sp, #12
    f0f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f0fc:	f7ff ba1a 	b.w	e534 <d_make_comp>
    f100:	4620      	mov	r0, r4
    f102:	f001 f88d 	bl	10220 <d_operator_name>
    f106:	4683      	mov	fp, r0
    f108:	e70f      	b.n	ef2a <d_exprlist+0x1de>
    f10a:	f1ba 0f00 	cmp.w	sl, #0
    f10e:	f43f af36 	beq.w	ef7e <d_exprlist+0x232>
    f112:	f89a 3000 	ldrb.w	r3, [sl]
    f116:	2b70      	cmp	r3, #112	; 0x70
    f118:	d017      	beq.n	f14a <d_exprlist+0x3fe>
    f11a:	2b6d      	cmp	r3, #109	; 0x6d
    f11c:	d015      	beq.n	f14a <d_exprlist+0x3fe>
    f11e:	4650      	mov	r0, sl
    f120:	4937      	ldr	r1, [pc, #220]	; (f200 <d_exprlist+0x4b4>)
    f122:	f009 fc21 	bl	18968 <strcmp>
    f126:	2800      	cmp	r0, #0
    f128:	f47f af29 	bne.w	ef7e <d_exprlist+0x232>
    f12c:	4620      	mov	r0, r4
    f12e:	f000 fa65 	bl	f5fc <d_template_args_1>
    f132:	e727      	b.n	ef84 <d_exprlist+0x238>
    f134:	4620      	mov	r0, r4
    f136:	f000 fac5 	bl	f6c4 <d_template_args>
    f13a:	4652      	mov	r2, sl
    f13c:	4603      	mov	r3, r0
    f13e:	2104      	movs	r1, #4
    f140:	4620      	mov	r0, r4
    f142:	f7ff f9f7 	bl	e534 <d_make_comp>
    f146:	4682      	mov	sl, r0
    f148:	e70b      	b.n	ef62 <d_exprlist+0x216>
    f14a:	f89a 2001 	ldrb.w	r2, [sl, #1]
    f14e:	429a      	cmp	r2, r3
    f150:	d1e5      	bne.n	f11e <d_exprlist+0x3d2>
    f152:	68e3      	ldr	r3, [r4, #12]
    f154:	781a      	ldrb	r2, [r3, #0]
    f156:	2a5f      	cmp	r2, #95	; 0x5f
    f158:	d023      	beq.n	f1a2 <d_exprlist+0x456>
    f15a:	4650      	mov	r0, sl
    f15c:	4928      	ldr	r1, [pc, #160]	; (f200 <d_exprlist+0x4b4>)
    f15e:	f009 fc03 	bl	18968 <strcmp>
    f162:	2800      	cmp	r0, #0
    f164:	d03f      	beq.n	f1e6 <d_exprlist+0x49a>
    f166:	4620      	mov	r0, r4
    f168:	f000 f84e 	bl	f208 <d_expression_1>
    f16c:	4603      	mov	r3, r0
    f16e:	461a      	mov	r2, r3
    f170:	2138      	movs	r1, #56	; 0x38
    f172:	4620      	mov	r0, r4
    f174:	f7ff f9de 	bl	e534 <d_make_comp>
    f178:	e704      	b.n	ef84 <d_exprlist+0x238>
    f17a:	3301      	adds	r3, #1
    f17c:	60e3      	str	r3, [r4, #12]
    f17e:	2300      	movs	r3, #0
    f180:	e789      	b.n	f096 <d_exprlist+0x34a>
    f182:	4620      	mov	r0, r4
    f184:	f001 f84c 	bl	10220 <d_operator_name>
    f188:	e77c      	b.n	f084 <d_exprlist+0x338>
    f18a:	785a      	ldrb	r2, [r3, #1]
    f18c:	2a69      	cmp	r2, #105	; 0x69
    f18e:	f47f aeac 	bne.w	eeea <d_exprlist+0x19e>
    f192:	3302      	adds	r3, #2
    f194:	60e3      	str	r3, [r4, #12]
    f196:	2145      	movs	r1, #69	; 0x45
    f198:	4620      	mov	r0, r4
    f19a:	f7ff fdd7 	bl	ed4c <d_exprlist>
    f19e:	4603      	mov	r3, r0
    f1a0:	e779      	b.n	f096 <d_exprlist+0x34a>
    f1a2:	3301      	adds	r3, #1
    f1a4:	60e3      	str	r3, [r4, #12]
    f1a6:	e7ba      	b.n	f11e <d_exprlist+0x3d2>
    f1a8:	2a6f      	cmp	r2, #111	; 0x6f
    f1aa:	d015      	beq.n	f1d8 <d_exprlist+0x48c>
    f1ac:	2a69      	cmp	r2, #105	; 0x69
    f1ae:	f47f ae8d 	bne.w	eecc <d_exprlist+0x180>
    f1b2:	785a      	ldrb	r2, [r3, #1]
    f1b4:	2a6c      	cmp	r2, #108	; 0x6c
    f1b6:	f47f ae0e 	bne.w	edd6 <d_exprlist+0x8a>
    f1ba:	2500      	movs	r5, #0
    f1bc:	3302      	adds	r3, #2
    f1be:	60e3      	str	r3, [r4, #12]
    f1c0:	2145      	movs	r1, #69	; 0x45
    f1c2:	4620      	mov	r0, r4
    f1c4:	f7ff fdc2 	bl	ed4c <d_exprlist>
    f1c8:	462a      	mov	r2, r5
    f1ca:	4603      	mov	r3, r0
    f1cc:	2130      	movs	r1, #48	; 0x30
    f1ce:	4620      	mov	r0, r4
    f1d0:	f7ff f9b0 	bl	e534 <d_make_comp>
    f1d4:	4605      	mov	r5, r0
    f1d6:	e63f      	b.n	ee58 <d_exprlist+0x10c>
    f1d8:	785a      	ldrb	r2, [r3, #1]
    f1da:	2a6e      	cmp	r2, #110	; 0x6e
    f1dc:	f47f adfb 	bne.w	edd6 <d_exprlist+0x8a>
    f1e0:	3302      	adds	r3, #2
    f1e2:	60e3      	str	r3, [r4, #12]
    f1e4:	e5c9      	b.n	ed7a <d_exprlist+0x2e>
    f1e6:	4620      	mov	r0, r4
    f1e8:	f000 fa08 	bl	f5fc <d_template_args_1>
    f1ec:	4603      	mov	r3, r0
    f1ee:	e7be      	b.n	f16e <d_exprlist+0x422>
    f1f0:	0003dafc 	.word	0x0003dafc
    f1f4:	0003db00 	.word	0x0003db00
    f1f8:	0003db04 	.word	0x0003db04
    f1fc:	0003db08 	.word	0x0003db08
    f200:	0003daf8 	.word	0x0003daf8
    f204:	0003dff4 	.word	0x0003dff4

0000f208 <d_expression_1>:
    f208:	68c1      	ldr	r1, [r0, #12]
    f20a:	780b      	ldrb	r3, [r1, #0]
    f20c:	2b4c      	cmp	r3, #76	; 0x4c
    f20e:	f000 8087 	beq.w	f320 <d_expression_1+0x118>
    f212:	2b54      	cmp	r3, #84	; 0x54
    f214:	f000 8086 	beq.w	f324 <d_expression_1+0x11c>
    f218:	2b73      	cmp	r3, #115	; 0x73
    f21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f21e:	4604      	mov	r4, r0
    f220:	d037      	beq.n	f292 <d_expression_1+0x8a>
    f222:	2b66      	cmp	r3, #102	; 0x66
    f224:	d012      	beq.n	f24c <d_expression_1+0x44>
    f226:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f22a:	2a09      	cmp	r2, #9
    f22c:	f200 81b8 	bhi.w	f5a0 <d_expression_1+0x398>
    f230:	4620      	mov	r0, r4
    f232:	f001 f8b5 	bl	103a0 <d_unqualified_name>
    f236:	4605      	mov	r5, r0
    f238:	2800      	cmp	r0, #0
    f23a:	d06d      	beq.n	f318 <d_expression_1+0x110>
    f23c:	68e3      	ldr	r3, [r4, #12]
    f23e:	781b      	ldrb	r3, [r3, #0]
    f240:	2b49      	cmp	r3, #73	; 0x49
    f242:	f000 8088 	beq.w	f356 <d_expression_1+0x14e>
    f246:	4628      	mov	r0, r5
    f248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f24c:	784b      	ldrb	r3, [r1, #1]
    f24e:	2b70      	cmp	r3, #112	; 0x70
    f250:	d039      	beq.n	f2c6 <d_expression_1+0xbe>
    f252:	4620      	mov	r0, r4
    f254:	f000 ffe4 	bl	10220 <d_operator_name>
    f258:	4605      	mov	r5, r0
    f25a:	2800      	cmp	r0, #0
    f25c:	d05c      	beq.n	f318 <d_expression_1+0x110>
    f25e:	7803      	ldrb	r3, [r0, #0]
    f260:	2b31      	cmp	r3, #49	; 0x31
    f262:	d061      	beq.n	f328 <d_expression_1+0x120>
    f264:	2b32      	cmp	r3, #50	; 0x32
    f266:	d025      	beq.n	f2b4 <d_expression_1+0xac>
    f268:	2b33      	cmp	r3, #51	; 0x33
    f26a:	d155      	bne.n	f318 <d_expression_1+0x110>
    f26c:	68e3      	ldr	r3, [r4, #12]
    f26e:	781a      	ldrb	r2, [r3, #0]
    f270:	2a5f      	cmp	r2, #95	; 0x5f
    f272:	f040 81b4 	bne.w	f5de <d_expression_1+0x3d6>
    f276:	3301      	adds	r3, #1
    f278:	60e3      	str	r3, [r4, #12]
    f27a:	2145      	movs	r1, #69	; 0x45
    f27c:	4620      	mov	r0, r4
    f27e:	f7ff fd65 	bl	ed4c <d_exprlist>
    f282:	4603      	mov	r3, r0
    f284:	462a      	mov	r2, r5
    f286:	4620      	mov	r0, r4
    f288:	2136      	movs	r1, #54	; 0x36
    f28a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f28e:	f7ff b951 	b.w	e534 <d_make_comp>
    f292:	784b      	ldrb	r3, [r1, #1]
    f294:	2b72      	cmp	r3, #114	; 0x72
    f296:	d069      	beq.n	f36c <d_expression_1+0x164>
    f298:	2b70      	cmp	r3, #112	; 0x70
    f29a:	d1da      	bne.n	f252 <d_expression_1+0x4a>
    f29c:	3102      	adds	r1, #2
    f29e:	60c1      	str	r1, [r0, #12]
    f2a0:	f7ff ffb2 	bl	f208 <d_expression_1>
    f2a4:	2300      	movs	r3, #0
    f2a6:	4602      	mov	r2, r0
    f2a8:	214a      	movs	r1, #74	; 0x4a
    f2aa:	4620      	mov	r0, r4
    f2ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f2b0:	f7ff b940 	b.w	e534 <d_make_comp>
    f2b4:	6843      	ldr	r3, [r0, #4]
    f2b6:	2b03      	cmp	r3, #3
    f2b8:	d82e      	bhi.n	f318 <d_expression_1+0x110>
    f2ba:	e8df f013 	tbh	[pc, r3, lsl #1]
    f2be:	0071      	.short	0x0071
    f2c0:	002d0190 	.word	0x002d0190
    f2c4:	002d      	.short	0x002d
    f2c6:	1c8b      	adds	r3, r1, #2
    f2c8:	60c3      	str	r3, [r0, #12]
    f2ca:	788b      	ldrb	r3, [r1, #2]
    f2cc:	2b54      	cmp	r3, #84	; 0x54
    f2ce:	d063      	beq.n	f398 <d_expression_1+0x190>
    f2d0:	f7ff fac2 	bl	e858 <d_compact_number>
    f2d4:	43c3      	mvns	r3, r0
    f2d6:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
    f2da:	d01d      	beq.n	f318 <d_expression_1+0x110>
    f2dc:	3001      	adds	r0, #1
    f2de:	6963      	ldr	r3, [r4, #20]
    f2e0:	69a2      	ldr	r2, [r4, #24]
    f2e2:	4293      	cmp	r3, r2
    f2e4:	da18      	bge.n	f318 <d_expression_1+0x110>
    f2e6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    f2ea:	6921      	ldr	r1, [r4, #16]
    f2ec:	0092      	lsls	r2, r2, #2
    f2ee:	3301      	adds	r3, #1
    f2f0:	188d      	adds	r5, r1, r2
    f2f2:	6163      	str	r3, [r4, #20]
    f2f4:	d0a7      	beq.n	f246 <d_expression_1+0x3e>
    f2f6:	2306      	movs	r3, #6
    f2f8:	548b      	strb	r3, [r1, r2]
    f2fa:	6068      	str	r0, [r5, #4]
    f2fc:	e7a3      	b.n	f246 <d_expression_1+0x3e>
    f2fe:	2b74      	cmp	r3, #116	; 0x74
    f300:	d1a7      	bne.n	f252 <d_expression_1+0x4a>
    f302:	784b      	ldrb	r3, [r1, #1]
    f304:	2b6c      	cmp	r3, #108	; 0x6c
    f306:	d1a4      	bne.n	f252 <d_expression_1+0x4a>
    f308:	f000 fba2 	bl	fa50 <d_type>
    f30c:	68e1      	ldr	r1, [r4, #12]
    f30e:	784b      	ldrb	r3, [r1, #1]
    f310:	4605      	mov	r5, r0
    f312:	2b00      	cmp	r3, #0
    f314:	f040 814e 	bne.w	f5b4 <d_expression_1+0x3ac>
    f318:	2500      	movs	r5, #0
    f31a:	4628      	mov	r0, r5
    f31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f320:	f001 bc8c 	b.w	10c3c <d_expr_primary>
    f324:	f7ff bab4 	b.w	e890 <d_template_param>
    f328:	6847      	ldr	r7, [r0, #4]
    f32a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f32c:	68ba      	ldr	r2, [r7, #8]
    f32e:	683e      	ldr	r6, [r7, #0]
    f330:	49ac      	ldr	r1, [pc, #688]	; (f5e4 <d_expression_1+0x3dc>)
    f332:	3a02      	subs	r2, #2
    f334:	4413      	add	r3, r2
    f336:	6323      	str	r3, [r4, #48]	; 0x30
    f338:	4630      	mov	r0, r6
    f33a:	f009 fb15 	bl	18968 <strcmp>
    f33e:	2800      	cmp	r0, #0
    f340:	f000 80ab 	beq.w	f49a <d_expression_1+0x292>
    f344:	68ff      	ldr	r7, [r7, #12]
    f346:	2f03      	cmp	r7, #3
    f348:	d8e6      	bhi.n	f318 <d_expression_1+0x110>
    f34a:	e8df f017 	tbh	[pc, r7, lsl #1]
    f34e:	0029      	.short	0x0029
    f350:	007100ff 	.word	0x007100ff
    f354:	0031      	.short	0x0031
    f356:	4620      	mov	r0, r4
    f358:	f000 f9b4 	bl	f6c4 <d_template_args>
    f35c:	462a      	mov	r2, r5
    f35e:	4603      	mov	r3, r0
    f360:	2104      	movs	r1, #4
    f362:	4620      	mov	r0, r4
    f364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f368:	f7ff b8e4 	b.w	e534 <d_make_comp>
    f36c:	3102      	adds	r1, #2
    f36e:	60c1      	str	r1, [r0, #12]
    f370:	f000 fb6e 	bl	fa50 <d_type>
    f374:	4605      	mov	r5, r0
    f376:	4620      	mov	r0, r4
    f378:	f001 f812 	bl	103a0 <d_unqualified_name>
    f37c:	68e3      	ldr	r3, [r4, #12]
    f37e:	781b      	ldrb	r3, [r3, #0]
    f380:	2b49      	cmp	r3, #73	; 0x49
    f382:	4606      	mov	r6, r0
    f384:	f000 80ae 	beq.w	f4e4 <d_expression_1+0x2dc>
    f388:	4603      	mov	r3, r0
    f38a:	462a      	mov	r2, r5
    f38c:	4620      	mov	r0, r4
    f38e:	2101      	movs	r1, #1
    f390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f394:	f7ff b8ce 	b.w	e534 <d_make_comp>
    f398:	3103      	adds	r1, #3
    f39a:	60c1      	str	r1, [r0, #12]
    f39c:	2000      	movs	r0, #0
    f39e:	e79e      	b.n	f2de <d_expression_1+0xd6>
    f3a0:	462a      	mov	r2, r5
    f3a2:	4620      	mov	r0, r4
    f3a4:	2300      	movs	r3, #0
    f3a6:	2135      	movs	r1, #53	; 0x35
    f3a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f3ac:	f7ff b8c2 	b.w	e534 <d_make_comp>
    f3b0:	2e00      	cmp	r6, #0
    f3b2:	d0b1      	beq.n	f318 <d_expression_1+0x110>
    f3b4:	498c      	ldr	r1, [pc, #560]	; (f5e8 <d_expression_1+0x3e0>)
    f3b6:	4630      	mov	r0, r6
    f3b8:	f009 fad6 	bl	18968 <strcmp>
    f3bc:	2800      	cmp	r0, #0
    f3be:	d071      	beq.n	f4a4 <d_expression_1+0x29c>
    f3c0:	7833      	ldrb	r3, [r6, #0]
    f3c2:	2b66      	cmp	r3, #102	; 0x66
    f3c4:	f000 80b2 	beq.w	f52c <d_expression_1+0x324>
    f3c8:	2b6e      	cmp	r3, #110	; 0x6e
    f3ca:	d1a5      	bne.n	f318 <d_expression_1+0x110>
    f3cc:	7873      	ldrb	r3, [r6, #1]
    f3ce:	2b77      	cmp	r3, #119	; 0x77
    f3d0:	d001      	beq.n	f3d6 <d_expression_1+0x1ce>
    f3d2:	2b61      	cmp	r3, #97	; 0x61
    f3d4:	d1a0      	bne.n	f318 <d_expression_1+0x110>
    f3d6:	215f      	movs	r1, #95	; 0x5f
    f3d8:	4620      	mov	r0, r4
    f3da:	f7ff fcb7 	bl	ed4c <d_exprlist>
    f3de:	4606      	mov	r6, r0
    f3e0:	4620      	mov	r0, r4
    f3e2:	f000 fb35 	bl	fa50 <d_type>
    f3e6:	68e3      	ldr	r3, [r4, #12]
    f3e8:	781a      	ldrb	r2, [r3, #0]
    f3ea:	2a45      	cmp	r2, #69	; 0x45
    f3ec:	4607      	mov	r7, r0
    f3ee:	f000 8099 	beq.w	f524 <d_expression_1+0x31c>
    f3f2:	2a70      	cmp	r2, #112	; 0x70
    f3f4:	f000 809e 	beq.w	f534 <d_expression_1+0x32c>
    f3f8:	2a69      	cmp	r2, #105	; 0x69
    f3fa:	d18d      	bne.n	f318 <d_expression_1+0x110>
    f3fc:	785b      	ldrb	r3, [r3, #1]
    f3fe:	2b6c      	cmp	r3, #108	; 0x6c
    f400:	d18a      	bne.n	f318 <d_expression_1+0x110>
    f402:	4620      	mov	r0, r4
    f404:	f7ff ff00 	bl	f208 <d_expression_1>
    f408:	4603      	mov	r3, r0
    f40a:	463a      	mov	r2, r7
    f40c:	213b      	movs	r1, #59	; 0x3b
    f40e:	4620      	mov	r0, r4
    f410:	f7ff f890 	bl	e534 <d_make_comp>
    f414:	4632      	mov	r2, r6
    f416:	4603      	mov	r3, r0
    f418:	213a      	movs	r1, #58	; 0x3a
    f41a:	4620      	mov	r0, r4
    f41c:	f7ff f88a 	bl	e534 <d_make_comp>
    f420:	462a      	mov	r2, r5
    f422:	4603      	mov	r3, r0
    f424:	2139      	movs	r1, #57	; 0x39
    f426:	4620      	mov	r0, r4
    f428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f42c:	f7ff b882 	b.w	e534 <d_make_comp>
    f430:	2e00      	cmp	r6, #0
    f432:	f43f af71 	beq.w	f318 <d_expression_1+0x110>
    f436:	686b      	ldr	r3, [r5, #4]
    f438:	681b      	ldr	r3, [r3, #0]
    f43a:	785a      	ldrb	r2, [r3, #1]
    f43c:	2a63      	cmp	r2, #99	; 0x63
    f43e:	d044      	beq.n	f4ca <d_expression_1+0x2c2>
    f440:	7833      	ldrb	r3, [r6, #0]
    f442:	2b66      	cmp	r3, #102	; 0x66
    f444:	d059      	beq.n	f4fa <d_expression_1+0x2f2>
    f446:	4620      	mov	r0, r4
    f448:	f7ff fede 	bl	f208 <d_expression_1>
    f44c:	4607      	mov	r7, r0
    f44e:	4967      	ldr	r1, [pc, #412]	; (f5ec <d_expression_1+0x3e4>)
    f450:	4630      	mov	r0, r6
    f452:	f009 fa89 	bl	18968 <strcmp>
    f456:	b390      	cbz	r0, f4be <d_expression_1+0x2b6>
    f458:	4965      	ldr	r1, [pc, #404]	; (f5f0 <d_expression_1+0x3e8>)
    f45a:	4630      	mov	r0, r6
    f45c:	f009 fa84 	bl	18968 <strcmp>
    f460:	b128      	cbz	r0, f46e <d_expression_1+0x266>
    f462:	4630      	mov	r0, r6
    f464:	4963      	ldr	r1, [pc, #396]	; (f5f4 <d_expression_1+0x3ec>)
    f466:	f009 fa7f 	bl	18968 <strcmp>
    f46a:	2800      	cmp	r0, #0
    f46c:	d14a      	bne.n	f504 <d_expression_1+0x2fc>
    f46e:	4620      	mov	r0, r4
    f470:	f000 ff96 	bl	103a0 <d_unqualified_name>
    f474:	68e3      	ldr	r3, [r4, #12]
    f476:	781b      	ldrb	r3, [r3, #0]
    f478:	2b49      	cmp	r3, #73	; 0x49
    f47a:	4606      	mov	r6, r0
    f47c:	d047      	beq.n	f50e <d_expression_1+0x306>
    f47e:	4633      	mov	r3, r6
    f480:	463a      	mov	r2, r7
    f482:	2138      	movs	r1, #56	; 0x38
    f484:	4620      	mov	r0, r4
    f486:	f7ff f855 	bl	e534 <d_make_comp>
    f48a:	462a      	mov	r2, r5
    f48c:	4603      	mov	r3, r0
    f48e:	2137      	movs	r1, #55	; 0x37
    f490:	4620      	mov	r0, r4
    f492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f496:	f7ff b84d 	b.w	e534 <d_make_comp>
    f49a:	4620      	mov	r0, r4
    f49c:	f000 fad8 	bl	fa50 <d_type>
    f4a0:	4603      	mov	r3, r0
    f4a2:	e6ef      	b.n	f284 <d_expression_1+0x7c>
    f4a4:	4620      	mov	r0, r4
    f4a6:	f7ff feaf 	bl	f208 <d_expression_1>
    f4aa:	4606      	mov	r6, r0
    f4ac:	4620      	mov	r0, r4
    f4ae:	f7ff feab 	bl	f208 <d_expression_1>
    f4b2:	4607      	mov	r7, r0
    f4b4:	4620      	mov	r0, r4
    f4b6:	f7ff fea7 	bl	f208 <d_expression_1>
    f4ba:	4603      	mov	r3, r0
    f4bc:	e7a5      	b.n	f40a <d_expression_1+0x202>
    f4be:	2145      	movs	r1, #69	; 0x45
    f4c0:	4620      	mov	r0, r4
    f4c2:	f7ff fc43 	bl	ed4c <d_exprlist>
    f4c6:	4606      	mov	r6, r0
    f4c8:	e7d9      	b.n	f47e <d_expression_1+0x276>
    f4ca:	781b      	ldrb	r3, [r3, #0]
    f4cc:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
    f4d0:	2a01      	cmp	r2, #1
    f4d2:	d902      	bls.n	f4da <d_expression_1+0x2d2>
    f4d4:	3b72      	subs	r3, #114	; 0x72
    f4d6:	2b01      	cmp	r3, #1
    f4d8:	d8b2      	bhi.n	f440 <d_expression_1+0x238>
    f4da:	4620      	mov	r0, r4
    f4dc:	f000 fab8 	bl	fa50 <d_type>
    f4e0:	4607      	mov	r7, r0
    f4e2:	e7b4      	b.n	f44e <d_expression_1+0x246>
    f4e4:	4620      	mov	r0, r4
    f4e6:	f000 f8ed 	bl	f6c4 <d_template_args>
    f4ea:	4632      	mov	r2, r6
    f4ec:	4603      	mov	r3, r0
    f4ee:	2104      	movs	r1, #4
    f4f0:	4620      	mov	r0, r4
    f4f2:	f7ff f81f 	bl	e534 <d_make_comp>
    f4f6:	4603      	mov	r3, r0
    f4f8:	e747      	b.n	f38a <d_expression_1+0x182>
    f4fa:	4620      	mov	r0, r4
    f4fc:	f000 fe90 	bl	10220 <d_operator_name>
    f500:	4607      	mov	r7, r0
    f502:	e7a4      	b.n	f44e <d_expression_1+0x246>
    f504:	4620      	mov	r0, r4
    f506:	f7ff fe7f 	bl	f208 <d_expression_1>
    f50a:	4606      	mov	r6, r0
    f50c:	e7b7      	b.n	f47e <d_expression_1+0x276>
    f50e:	4620      	mov	r0, r4
    f510:	f000 f8d8 	bl	f6c4 <d_template_args>
    f514:	4632      	mov	r2, r6
    f516:	4603      	mov	r3, r0
    f518:	2104      	movs	r1, #4
    f51a:	4620      	mov	r0, r4
    f51c:	f7ff f80a 	bl	e534 <d_make_comp>
    f520:	4606      	mov	r6, r0
    f522:	e7ac      	b.n	f47e <d_expression_1+0x276>
    f524:	3301      	adds	r3, #1
    f526:	60e3      	str	r3, [r4, #12]
    f528:	2300      	movs	r3, #0
    f52a:	e76e      	b.n	f40a <d_expression_1+0x202>
    f52c:	4620      	mov	r0, r4
    f52e:	f000 fe77 	bl	10220 <d_operator_name>
    f532:	e7ba      	b.n	f4aa <d_expression_1+0x2a2>
    f534:	785a      	ldrb	r2, [r3, #1]
    f536:	2a69      	cmp	r2, #105	; 0x69
    f538:	f47f aeee 	bne.w	f318 <d_expression_1+0x110>
    f53c:	3302      	adds	r3, #2
    f53e:	60e3      	str	r3, [r4, #12]
    f540:	2145      	movs	r1, #69	; 0x45
    f542:	4620      	mov	r0, r4
    f544:	f7ff fc02 	bl	ed4c <d_exprlist>
    f548:	4603      	mov	r3, r0
    f54a:	e75e      	b.n	f40a <d_expression_1+0x202>
    f54c:	2e00      	cmp	r6, #0
    f54e:	d046      	beq.n	f5de <d_expression_1+0x3d6>
    f550:	7833      	ldrb	r3, [r6, #0]
    f552:	2b70      	cmp	r3, #112	; 0x70
    f554:	d015      	beq.n	f582 <d_expression_1+0x37a>
    f556:	2b6d      	cmp	r3, #109	; 0x6d
    f558:	d013      	beq.n	f582 <d_expression_1+0x37a>
    f55a:	2700      	movs	r7, #0
    f55c:	4630      	mov	r0, r6
    f55e:	4926      	ldr	r1, [pc, #152]	; (f5f8 <d_expression_1+0x3f0>)
    f560:	f009 fa02 	bl	18968 <strcmp>
    f564:	b1b8      	cbz	r0, f596 <d_expression_1+0x38e>
    f566:	4620      	mov	r0, r4
    f568:	f7ff fe4e 	bl	f208 <d_expression_1>
    f56c:	4603      	mov	r3, r0
    f56e:	2f00      	cmp	r7, #0
    f570:	f43f ae88 	beq.w	f284 <d_expression_1+0x7c>
    f574:	461a      	mov	r2, r3
    f576:	2138      	movs	r1, #56	; 0x38
    f578:	4620      	mov	r0, r4
    f57a:	f7fe ffdb 	bl	e534 <d_make_comp>
    f57e:	4603      	mov	r3, r0
    f580:	e680      	b.n	f284 <d_expression_1+0x7c>
    f582:	7872      	ldrb	r2, [r6, #1]
    f584:	429a      	cmp	r2, r3
    f586:	d1e8      	bne.n	f55a <d_expression_1+0x352>
    f588:	68e3      	ldr	r3, [r4, #12]
    f58a:	781a      	ldrb	r2, [r3, #0]
    f58c:	2a5f      	cmp	r2, #95	; 0x5f
    f58e:	d1e5      	bne.n	f55c <d_expression_1+0x354>
    f590:	3301      	adds	r3, #1
    f592:	60e3      	str	r3, [r4, #12]
    f594:	e7e1      	b.n	f55a <d_expression_1+0x352>
    f596:	4620      	mov	r0, r4
    f598:	f000 f830 	bl	f5fc <d_template_args_1>
    f59c:	4603      	mov	r3, r0
    f59e:	e7e6      	b.n	f56e <d_expression_1+0x366>
    f5a0:	2b6f      	cmp	r3, #111	; 0x6f
    f5a2:	d015      	beq.n	f5d0 <d_expression_1+0x3c8>
    f5a4:	2b69      	cmp	r3, #105	; 0x69
    f5a6:	f47f aeaa 	bne.w	f2fe <d_expression_1+0xf6>
    f5aa:	784b      	ldrb	r3, [r1, #1]
    f5ac:	2b6c      	cmp	r3, #108	; 0x6c
    f5ae:	f47f ae50 	bne.w	f252 <d_expression_1+0x4a>
    f5b2:	2500      	movs	r5, #0
    f5b4:	3102      	adds	r1, #2
    f5b6:	60e1      	str	r1, [r4, #12]
    f5b8:	4620      	mov	r0, r4
    f5ba:	2145      	movs	r1, #69	; 0x45
    f5bc:	f7ff fbc6 	bl	ed4c <d_exprlist>
    f5c0:	462a      	mov	r2, r5
    f5c2:	4603      	mov	r3, r0
    f5c4:	2130      	movs	r1, #48	; 0x30
    f5c6:	4620      	mov	r0, r4
    f5c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f5cc:	f7fe bfb2 	b.w	e534 <d_make_comp>
    f5d0:	784b      	ldrb	r3, [r1, #1]
    f5d2:	2b6e      	cmp	r3, #110	; 0x6e
    f5d4:	f47f ae3d 	bne.w	f252 <d_expression_1+0x4a>
    f5d8:	3102      	adds	r1, #2
    f5da:	60c1      	str	r1, [r0, #12]
    f5dc:	e628      	b.n	f230 <d_expression_1+0x28>
    f5de:	2700      	movs	r7, #0
    f5e0:	e7c1      	b.n	f566 <d_expression_1+0x35e>
    f5e2:	bf00      	nop
    f5e4:	0003dff4 	.word	0x0003dff4
    f5e8:	0003db08 	.word	0x0003db08
    f5ec:	0003dafc 	.word	0x0003dafc
    f5f0:	0003db00 	.word	0x0003db00
    f5f4:	0003db04 	.word	0x0003db04
    f5f8:	0003daf8 	.word	0x0003daf8

0000f5fc <d_template_args_1>:
    f5fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f600:	68c2      	ldr	r2, [r0, #12]
    f602:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
    f606:	7813      	ldrb	r3, [r2, #0]
    f608:	2b45      	cmp	r3, #69	; 0x45
    f60a:	b083      	sub	sp, #12
    f60c:	4604      	mov	r4, r0
    f60e:	d04e      	beq.n	f6ae <d_template_args_1+0xb2>
    f610:	ae02      	add	r6, sp, #8
    f612:	2100      	movs	r1, #0
    f614:	f846 1d04 	str.w	r1, [r6, #-4]!
    f618:	2701      	movs	r7, #1
    f61a:	3b49      	subs	r3, #73	; 0x49
    f61c:	2b0f      	cmp	r3, #15
    f61e:	d83e      	bhi.n	f69e <d_template_args_1+0xa2>
    f620:	e8df f003 	tbb	[pc, r3]
    f624:	1b3d3838 	.word	0x1b3d3838
    f628:	3d3d3d3d 	.word	0x3d3d3d3d
    f62c:	3d3d3d3d 	.word	0x3d3d3d3d
    f630:	083d3d3d 	.word	0x083d3d3d
    f634:	3201      	adds	r2, #1
    f636:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
    f63a:	60e2      	str	r2, [r4, #12]
    f63c:	6367      	str	r7, [r4, #52]	; 0x34
    f63e:	4620      	mov	r0, r4
    f640:	f7ff fde2 	bl	f208 <d_expression_1>
    f644:	68e3      	ldr	r3, [r4, #12]
    f646:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    f64a:	781a      	ldrb	r2, [r3, #0]
    f64c:	2a45      	cmp	r2, #69	; 0x45
    f64e:	4605      	mov	r5, r0
    f650:	d02a      	beq.n	f6a8 <d_template_args_1+0xac>
    f652:	2000      	movs	r0, #0
    f654:	b003      	add	sp, #12
    f656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f65a:	4620      	mov	r0, r4
    f65c:	f001 faee 	bl	10c3c <d_expr_primary>
    f660:	4605      	mov	r5, r0
    f662:	2300      	movs	r3, #0
    f664:	212f      	movs	r1, #47	; 0x2f
    f666:	462a      	mov	r2, r5
    f668:	4620      	mov	r0, r4
    f66a:	2d00      	cmp	r5, #0
    f66c:	d0f1      	beq.n	f652 <d_template_args_1+0x56>
    f66e:	f7fe ff61 	bl	e534 <d_make_comp>
    f672:	6030      	str	r0, [r6, #0]
    f674:	f100 0608 	add.w	r6, r0, #8
    f678:	2800      	cmp	r0, #0
    f67a:	d0ea      	beq.n	f652 <d_template_args_1+0x56>
    f67c:	68e2      	ldr	r2, [r4, #12]
    f67e:	7813      	ldrb	r3, [r2, #0]
    f680:	2b45      	cmp	r3, #69	; 0x45
    f682:	d1ca      	bne.n	f61a <d_template_args_1+0x1e>
    f684:	9801      	ldr	r0, [sp, #4]
    f686:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    f68a:	3201      	adds	r2, #1
    f68c:	60e2      	str	r2, [r4, #12]
    f68e:	b003      	add	sp, #12
    f690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f694:	4620      	mov	r0, r4
    f696:	f000 f815 	bl	f6c4 <d_template_args>
    f69a:	4605      	mov	r5, r0
    f69c:	e7e1      	b.n	f662 <d_template_args_1+0x66>
    f69e:	4620      	mov	r0, r4
    f6a0:	f000 f9d6 	bl	fa50 <d_type>
    f6a4:	4605      	mov	r5, r0
    f6a6:	e7dc      	b.n	f662 <d_template_args_1+0x66>
    f6a8:	3301      	adds	r3, #1
    f6aa:	60e3      	str	r3, [r4, #12]
    f6ac:	e7d9      	b.n	f662 <d_template_args_1+0x66>
    f6ae:	3201      	adds	r2, #1
    f6b0:	2300      	movs	r3, #0
    f6b2:	60c2      	str	r2, [r0, #12]
    f6b4:	212f      	movs	r1, #47	; 0x2f
    f6b6:	461a      	mov	r2, r3
    f6b8:	b003      	add	sp, #12
    f6ba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f6be:	f7fe bf39 	b.w	e534 <d_make_comp>
    f6c2:	bf00      	nop

0000f6c4 <d_template_args>:
    f6c4:	68c2      	ldr	r2, [r0, #12]
    f6c6:	7813      	ldrb	r3, [r2, #0]
    f6c8:	3b49      	subs	r3, #73	; 0x49
    f6ca:	2b01      	cmp	r3, #1
    f6cc:	d802      	bhi.n	f6d4 <d_template_args+0x10>
    f6ce:	3201      	adds	r2, #1
    f6d0:	60c2      	str	r2, [r0, #12]
    f6d2:	e793      	b.n	f5fc <d_template_args_1>
    f6d4:	2000      	movs	r0, #0
    f6d6:	4770      	bx	lr

0000f6d8 <d_name>:
    f6d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f6dc:	68c2      	ldr	r2, [r0, #12]
    f6de:	7813      	ldrb	r3, [r2, #0]
    f6e0:	3b4e      	subs	r3, #78	; 0x4e
    f6e2:	b085      	sub	sp, #20
    f6e4:	4605      	mov	r5, r0
    f6e6:	2b0c      	cmp	r3, #12
    f6e8:	d870      	bhi.n	f7cc <d_name+0xf4>
    f6ea:	e8df f003 	tbb	[pc, r3]
    f6ee:	6f1e      	.short	0x6f1e
    f6f0:	5b6f6f6f 	.word	0x5b6f6f6f
    f6f4:	6f6f176f 	.word	0x6f6f176f
    f6f8:	6f6f      	.short	0x6f6f
    f6fa:	07          	.byte	0x07
    f6fb:	00          	.byte	0x00
    f6fc:	3201      	adds	r2, #1
    f6fe:	2100      	movs	r1, #0
    f700:	60c2      	str	r2, [r0, #12]
    f702:	f000 ffbd 	bl	10680 <d_encoding>
    f706:	68eb      	ldr	r3, [r5, #12]
    f708:	7819      	ldrb	r1, [r3, #0]
    f70a:	2945      	cmp	r1, #69	; 0x45
    f70c:	4606      	mov	r6, r0
    f70e:	f000 8099 	beq.w	f844 <d_name+0x16c>
    f712:	2200      	movs	r2, #0
    f714:	4610      	mov	r0, r2
    f716:	b005      	add	sp, #20
    f718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f71c:	f000 fe40 	bl	103a0 <d_unqualified_name>
    f720:	4602      	mov	r2, r0
    f722:	4610      	mov	r0, r2
    f724:	b005      	add	sp, #20
    f726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f72a:	3201      	adds	r2, #1
    f72c:	60c2      	str	r2, [r0, #12]
    f72e:	a903      	add	r1, sp, #12
    f730:	2201      	movs	r2, #1
    f732:	f7fe ff4b 	bl	e5cc <d_cv_qualifiers>
    f736:	4681      	mov	r9, r0
    f738:	2800      	cmp	r0, #0
    f73a:	d0ea      	beq.n	f712 <d_name+0x3a>
    f73c:	2100      	movs	r1, #0
    f73e:	4628      	mov	r0, r5
    f740:	f7fe ffaa 	bl	e698 <d_ref_qualifier>
    f744:	68ea      	ldr	r2, [r5, #12]
    f746:	4eb4      	ldr	r6, [pc, #720]	; (fa18 <d_name+0x340>)
    f748:	7814      	ldrb	r4, [r2, #0]
    f74a:	4680      	mov	r8, r0
    f74c:	2700      	movs	r7, #0
    f74e:	2c00      	cmp	r4, #0
    f750:	f000 80e8 	beq.w	f924 <d_name+0x24c>
    f754:	2c44      	cmp	r4, #68	; 0x44
    f756:	f000 80d1 	beq.w	f8fc <d_name+0x224>
    f75a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    f75e:	b2db      	uxtb	r3, r3
    f760:	2b1c      	cmp	r3, #28
    f762:	f240 80a8 	bls.w	f8b6 <d_name+0x1de>
    f766:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    f76a:	2b19      	cmp	r3, #25
    f76c:	f240 80a8 	bls.w	f8c0 <d_name+0x1e8>
    f770:	2c55      	cmp	r4, #85	; 0x55
    f772:	f000 80de 	beq.w	f932 <d_name+0x25a>
    f776:	2c53      	cmp	r4, #83	; 0x53
    f778:	f000 80f1 	beq.w	f95e <d_name+0x286>
    f77c:	2c49      	cmp	r4, #73	; 0x49
    f77e:	f000 80da 	beq.w	f936 <d_name+0x25e>
    f782:	2c54      	cmp	r4, #84	; 0x54
    f784:	f000 811f 	beq.w	f9c6 <d_name+0x2ee>
    f788:	2c45      	cmp	r4, #69	; 0x45
    f78a:	f000 814b 	beq.w	fa24 <d_name+0x34c>
    f78e:	2c4d      	cmp	r4, #77	; 0x4d
    f790:	f040 80c8 	bne.w	f924 <d_name+0x24c>
    f794:	2f00      	cmp	r7, #0
    f796:	f000 80c5 	beq.w	f924 <d_name+0x24c>
    f79a:	1c53      	adds	r3, r2, #1
    f79c:	60eb      	str	r3, [r5, #12]
    f79e:	7854      	ldrb	r4, [r2, #1]
    f7a0:	461a      	mov	r2, r3
    f7a2:	e7d4      	b.n	f74e <d_name+0x76>
    f7a4:	7853      	ldrb	r3, [r2, #1]
    f7a6:	2b74      	cmp	r3, #116	; 0x74
    f7a8:	d031      	beq.n	f80e <d_name+0x136>
    f7aa:	2100      	movs	r1, #0
    f7ac:	f7ff f90a 	bl	e9c4 <d_substitution>
    f7b0:	68eb      	ldr	r3, [r5, #12]
    f7b2:	7819      	ldrb	r1, [r3, #0]
    f7b4:	2949      	cmp	r1, #73	; 0x49
    f7b6:	4602      	mov	r2, r0
    f7b8:	d1b3      	bne.n	f722 <d_name+0x4a>
    f7ba:	3301      	adds	r3, #1
    f7bc:	60eb      	str	r3, [r5, #12]
    f7be:	4628      	mov	r0, r5
    f7c0:	9201      	str	r2, [sp, #4]
    f7c2:	f7ff ff1b 	bl	f5fc <d_template_args_1>
    f7c6:	9a01      	ldr	r2, [sp, #4]
    f7c8:	4603      	mov	r3, r0
    f7ca:	e017      	b.n	f7fc <d_name+0x124>
    f7cc:	f000 fde8 	bl	103a0 <d_unqualified_name>
    f7d0:	68eb      	ldr	r3, [r5, #12]
    f7d2:	7819      	ldrb	r1, [r3, #0]
    f7d4:	2949      	cmp	r1, #73	; 0x49
    f7d6:	4602      	mov	r2, r0
    f7d8:	d1a3      	bne.n	f722 <d_name+0x4a>
    f7da:	2a00      	cmp	r2, #0
    f7dc:	d099      	beq.n	f712 <d_name+0x3a>
    f7de:	6a29      	ldr	r1, [r5, #32]
    f7e0:	6a68      	ldr	r0, [r5, #36]	; 0x24
    f7e2:	4281      	cmp	r1, r0
    f7e4:	da95      	bge.n	f712 <d_name+0x3a>
    f7e6:	69ec      	ldr	r4, [r5, #28]
    f7e8:	1c48      	adds	r0, r1, #1
    f7ea:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
    f7ee:	6228      	str	r0, [r5, #32]
    f7f0:	7819      	ldrb	r1, [r3, #0]
    f7f2:	3949      	subs	r1, #73	; 0x49
    f7f4:	2901      	cmp	r1, #1
    f7f6:	bf88      	it	hi
    f7f8:	2300      	movhi	r3, #0
    f7fa:	d9de      	bls.n	f7ba <d_name+0xe2>
    f7fc:	4628      	mov	r0, r5
    f7fe:	2104      	movs	r1, #4
    f800:	f7fe fe98 	bl	e534 <d_make_comp>
    f804:	4602      	mov	r2, r0
    f806:	4610      	mov	r0, r2
    f808:	b005      	add	sp, #20
    f80a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f80e:	6943      	ldr	r3, [r0, #20]
    f810:	6981      	ldr	r1, [r0, #24]
    f812:	3202      	adds	r2, #2
    f814:	428b      	cmp	r3, r1
    f816:	60c2      	str	r2, [r0, #12]
    f818:	f2c0 80ab 	blt.w	f972 <d_name+0x29a>
    f81c:	2400      	movs	r4, #0
    f81e:	4628      	mov	r0, r5
    f820:	f000 fdbe 	bl	103a0 <d_unqualified_name>
    f824:	4622      	mov	r2, r4
    f826:	4603      	mov	r3, r0
    f828:	2101      	movs	r1, #1
    f82a:	4628      	mov	r0, r5
    f82c:	f7fe fe82 	bl	e534 <d_make_comp>
    f830:	6b29      	ldr	r1, [r5, #48]	; 0x30
    f832:	68eb      	ldr	r3, [r5, #12]
    f834:	3103      	adds	r1, #3
    f836:	6329      	str	r1, [r5, #48]	; 0x30
    f838:	7819      	ldrb	r1, [r3, #0]
    f83a:	2949      	cmp	r1, #73	; 0x49
    f83c:	4602      	mov	r2, r0
    f83e:	f47f af70 	bne.w	f722 <d_name+0x4a>
    f842:	e7ca      	b.n	f7da <d_name+0x102>
    f844:	1c5a      	adds	r2, r3, #1
    f846:	60ea      	str	r2, [r5, #12]
    f848:	7859      	ldrb	r1, [r3, #1]
    f84a:	2973      	cmp	r1, #115	; 0x73
    f84c:	f000 80a3 	beq.w	f996 <d_name+0x2be>
    f850:	2964      	cmp	r1, #100	; 0x64
    f852:	f000 80bc 	beq.w	f9ce <d_name+0x2f6>
    f856:	4628      	mov	r0, r5
    f858:	f7ff ff3e 	bl	f6d8 <d_name>
    f85c:	4604      	mov	r4, r0
    f85e:	2800      	cmp	r0, #0
    f860:	d072      	beq.n	f948 <d_name+0x270>
    f862:	7803      	ldrb	r3, [r0, #0]
    f864:	2b45      	cmp	r3, #69	; 0x45
    f866:	f000 8094 	beq.w	f992 <d_name+0x2ba>
    f86a:	2b47      	cmp	r3, #71	; 0x47
    f86c:	f000 8091 	beq.w	f992 <d_name+0x2ba>
    f870:	68eb      	ldr	r3, [r5, #12]
    f872:	781a      	ldrb	r2, [r3, #0]
    f874:	2a5f      	cmp	r2, #95	; 0x5f
    f876:	f040 808c 	bne.w	f992 <d_name+0x2ba>
    f87a:	f04f 37ff 	mov.w	r7, #4294967295
    f87e:	4628      	mov	r0, r5
    f880:	3301      	adds	r3, #1
    f882:	f840 3f0c 	str.w	r3, [r0, #12]!
    f886:	f7fe ffa5 	bl	e7d4 <d_number.isra.0>
    f88a:	2800      	cmp	r0, #0
    f88c:	f6ff af41 	blt.w	f712 <d_name+0x3a>
    f890:	1c7b      	adds	r3, r7, #1
    f892:	d07e      	beq.n	f992 <d_name+0x2ba>
    f894:	696b      	ldr	r3, [r5, #20]
    f896:	69aa      	ldr	r2, [r5, #24]
    f898:	4293      	cmp	r3, r2
    f89a:	da55      	bge.n	f948 <d_name+0x270>
    f89c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    f8a0:	6929      	ldr	r1, [r5, #16]
    f8a2:	3301      	adds	r3, #1
    f8a4:	0092      	lsls	r2, r2, #2
    f8a6:	616b      	str	r3, [r5, #20]
    f8a8:	188b      	adds	r3, r1, r2
    f8aa:	d04e      	beq.n	f94a <d_name+0x272>
    f8ac:	2046      	movs	r0, #70	; 0x46
    f8ae:	5488      	strb	r0, [r1, r2]
    f8b0:	609f      	str	r7, [r3, #8]
    f8b2:	605c      	str	r4, [r3, #4]
    f8b4:	e049      	b.n	f94a <d_name+0x272>
    f8b6:	fa26 f303 	lsr.w	r3, r6, r3
    f8ba:	07d9      	lsls	r1, r3, #31
    f8bc:	f57f af53 	bpl.w	f766 <d_name+0x8e>
    f8c0:	4628      	mov	r0, r5
    f8c2:	f000 fd6d 	bl	103a0 <d_unqualified_name>
    f8c6:	b347      	cbz	r7, f91a <d_name+0x242>
    f8c8:	2101      	movs	r1, #1
    f8ca:	4603      	mov	r3, r0
    f8cc:	463a      	mov	r2, r7
    f8ce:	4628      	mov	r0, r5
    f8d0:	f7fe fe30 	bl	e534 <d_make_comp>
    f8d4:	4607      	mov	r7, r0
    f8d6:	2c53      	cmp	r4, #83	; 0x53
    f8d8:	d01c      	beq.n	f914 <d_name+0x23c>
    f8da:	68ea      	ldr	r2, [r5, #12]
    f8dc:	7814      	ldrb	r4, [r2, #0]
    f8de:	2c45      	cmp	r4, #69	; 0x45
    f8e0:	f43f af3b 	beq.w	f75a <d_name+0x82>
    f8e4:	b1f7      	cbz	r7, f924 <d_name+0x24c>
    f8e6:	6a2b      	ldr	r3, [r5, #32]
    f8e8:	6a69      	ldr	r1, [r5, #36]	; 0x24
    f8ea:	428b      	cmp	r3, r1
    f8ec:	da1a      	bge.n	f924 <d_name+0x24c>
    f8ee:	69e9      	ldr	r1, [r5, #28]
    f8f0:	1c58      	adds	r0, r3, #1
    f8f2:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    f8f6:	6228      	str	r0, [r5, #32]
    f8f8:	7814      	ldrb	r4, [r2, #0]
    f8fa:	e728      	b.n	f74e <d_name+0x76>
    f8fc:	7853      	ldrb	r3, [r2, #1]
    f8fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    f902:	2b54      	cmp	r3, #84	; 0x54
    f904:	4628      	mov	r0, r5
    f906:	d00a      	beq.n	f91e <d_name+0x246>
    f908:	f000 fd4a 	bl	103a0 <d_unqualified_name>
    f90c:	2f00      	cmp	r7, #0
    f90e:	d1db      	bne.n	f8c8 <d_name+0x1f0>
    f910:	4607      	mov	r7, r0
    f912:	e7e2      	b.n	f8da <d_name+0x202>
    f914:	68ea      	ldr	r2, [r5, #12]
    f916:	7814      	ldrb	r4, [r2, #0]
    f918:	e719      	b.n	f74e <d_name+0x76>
    f91a:	4607      	mov	r7, r0
    f91c:	e7db      	b.n	f8d6 <d_name+0x1fe>
    f91e:	f000 f897 	bl	fa50 <d_type>
    f922:	e7f3      	b.n	f90c <d_name+0x234>
    f924:	2200      	movs	r2, #0
    f926:	4610      	mov	r0, r2
    f928:	f8c9 2000 	str.w	r2, [r9]
    f92c:	b005      	add	sp, #20
    f92e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f932:	4628      	mov	r0, r5
    f934:	e7e8      	b.n	f908 <d_name+0x230>
    f936:	2f00      	cmp	r7, #0
    f938:	d0f4      	beq.n	f924 <d_name+0x24c>
    f93a:	3201      	adds	r2, #1
    f93c:	60ea      	str	r2, [r5, #12]
    f93e:	4628      	mov	r0, r5
    f940:	f7ff fe5c 	bl	f5fc <d_template_args_1>
    f944:	2104      	movs	r1, #4
    f946:	e7c0      	b.n	f8ca <d_name+0x1f2>
    f948:	2300      	movs	r3, #0
    f94a:	4632      	mov	r2, r6
    f94c:	4628      	mov	r0, r5
    f94e:	2102      	movs	r1, #2
    f950:	f7fe fdf0 	bl	e534 <d_make_comp>
    f954:	4602      	mov	r2, r0
    f956:	4610      	mov	r0, r2
    f958:	b005      	add	sp, #20
    f95a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f95e:	2101      	movs	r1, #1
    f960:	4628      	mov	r0, r5
    f962:	f7ff f82f 	bl	e9c4 <d_substitution>
    f966:	2f00      	cmp	r7, #0
    f968:	d1ae      	bne.n	f8c8 <d_name+0x1f0>
    f96a:	68ea      	ldr	r2, [r5, #12]
    f96c:	4607      	mov	r7, r0
    f96e:	7814      	ldrb	r4, [r2, #0]
    f970:	e6ed      	b.n	f74e <d_name+0x76>
    f972:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    f976:	6901      	ldr	r1, [r0, #16]
    f978:	0092      	lsls	r2, r2, #2
    f97a:	3301      	adds	r3, #1
    f97c:	188c      	adds	r4, r1, r2
    f97e:	6143      	str	r3, [r0, #20]
    f980:	f43f af4d 	beq.w	f81e <d_name+0x146>
    f984:	2300      	movs	r3, #0
    f986:	548b      	strb	r3, [r1, r2]
    f988:	4824      	ldr	r0, [pc, #144]	; (fa1c <d_name+0x344>)
    f98a:	6060      	str	r0, [r4, #4]
    f98c:	2303      	movs	r3, #3
    f98e:	60a3      	str	r3, [r4, #8]
    f990:	e745      	b.n	f81e <d_name+0x146>
    f992:	4623      	mov	r3, r4
    f994:	e7d9      	b.n	f94a <d_name+0x272>
    f996:	1c9a      	adds	r2, r3, #2
    f998:	60ea      	str	r2, [r5, #12]
    f99a:	789a      	ldrb	r2, [r3, #2]
    f99c:	2a5f      	cmp	r2, #95	; 0x5f
    f99e:	d032      	beq.n	fa06 <d_name+0x32e>
    f9a0:	696b      	ldr	r3, [r5, #20]
    f9a2:	69aa      	ldr	r2, [r5, #24]
    f9a4:	4293      	cmp	r3, r2
    f9a6:	dacf      	bge.n	f948 <d_name+0x270>
    f9a8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    f9ac:	6929      	ldr	r1, [r5, #16]
    f9ae:	3301      	adds	r3, #1
    f9b0:	0092      	lsls	r2, r2, #2
    f9b2:	616b      	str	r3, [r5, #20]
    f9b4:	188b      	adds	r3, r1, r2
    f9b6:	d0c8      	beq.n	f94a <d_name+0x272>
    f9b8:	2400      	movs	r4, #0
    f9ba:	548c      	strb	r4, [r1, r2]
    f9bc:	4818      	ldr	r0, [pc, #96]	; (fa20 <d_name+0x348>)
    f9be:	6058      	str	r0, [r3, #4]
    f9c0:	220e      	movs	r2, #14
    f9c2:	609a      	str	r2, [r3, #8]
    f9c4:	e7c1      	b.n	f94a <d_name+0x272>
    f9c6:	4628      	mov	r0, r5
    f9c8:	f7fe ff62 	bl	e890 <d_template_param>
    f9cc:	e79e      	b.n	f90c <d_name+0x234>
    f9ce:	3302      	adds	r3, #2
    f9d0:	60eb      	str	r3, [r5, #12]
    f9d2:	4628      	mov	r0, r5
    f9d4:	f7fe ff40 	bl	e858 <d_compact_number>
    f9d8:	1e07      	subs	r7, r0, #0
    f9da:	f6ff ae9a 	blt.w	f712 <d_name+0x3a>
    f9de:	4628      	mov	r0, r5
    f9e0:	f7ff fe7a 	bl	f6d8 <d_name>
    f9e4:	4604      	mov	r4, r0
    f9e6:	2800      	cmp	r0, #0
    f9e8:	f43f af54 	beq.w	f894 <d_name+0x1bc>
    f9ec:	7803      	ldrb	r3, [r0, #0]
    f9ee:	2b45      	cmp	r3, #69	; 0x45
    f9f0:	f43f af50 	beq.w	f894 <d_name+0x1bc>
    f9f4:	2b47      	cmp	r3, #71	; 0x47
    f9f6:	f43f af4d 	beq.w	f894 <d_name+0x1bc>
    f9fa:	68eb      	ldr	r3, [r5, #12]
    f9fc:	781a      	ldrb	r2, [r3, #0]
    f9fe:	2a5f      	cmp	r2, #95	; 0x5f
    fa00:	f47f af48 	bne.w	f894 <d_name+0x1bc>
    fa04:	e73b      	b.n	f87e <d_name+0x1a6>
    fa06:	4628      	mov	r0, r5
    fa08:	3303      	adds	r3, #3
    fa0a:	f840 3f0c 	str.w	r3, [r0, #12]!
    fa0e:	f7fe fee1 	bl	e7d4 <d_number.isra.0>
    fa12:	2800      	cmp	r0, #0
    fa14:	dac4      	bge.n	f9a0 <d_name+0x2c8>
    fa16:	e67c      	b.n	f712 <d_name+0x3a>
    fa18:	100803ff 	.word	0x100803ff
    fa1c:	0003db1c 	.word	0x0003db1c
    fa20:	0003db0c 	.word	0x0003db0c
    fa24:	f8c9 7000 	str.w	r7, [r9]
    fa28:	2f00      	cmp	r7, #0
    fa2a:	f43f ae72 	beq.w	f712 <d_name+0x3a>
    fa2e:	f1b8 0f00 	cmp.w	r8, #0
    fa32:	d004      	beq.n	fa3e <d_name+0x366>
    fa34:	9b03      	ldr	r3, [sp, #12]
    fa36:	f8c8 3004 	str.w	r3, [r8, #4]
    fa3a:	f8cd 800c 	str.w	r8, [sp, #12]
    fa3e:	7813      	ldrb	r3, [r2, #0]
    fa40:	2b45      	cmp	r3, #69	; 0x45
    fa42:	f47f ae66 	bne.w	f712 <d_name+0x3a>
    fa46:	3201      	adds	r2, #1
    fa48:	60ea      	str	r2, [r5, #12]
    fa4a:	9a03      	ldr	r2, [sp, #12]
    fa4c:	e669      	b.n	f722 <d_name+0x4a>
    fa4e:	bf00      	nop

0000fa50 <d_type>:
    fa50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fa54:	68c2      	ldr	r2, [r0, #12]
    fa56:	7813      	ldrb	r3, [r2, #0]
    fa58:	2b72      	cmp	r3, #114	; 0x72
    fa5a:	b083      	sub	sp, #12
    fa5c:	4604      	mov	r4, r0
    fa5e:	d058      	beq.n	fb12 <d_type+0xc2>
    fa60:	2b56      	cmp	r3, #86	; 0x56
    fa62:	d056      	beq.n	fb12 <d_type+0xc2>
    fa64:	2b4b      	cmp	r3, #75	; 0x4b
    fa66:	d054      	beq.n	fb12 <d_type+0xc2>
    fa68:	2b44      	cmp	r3, #68	; 0x44
    fa6a:	f000 809f 	beq.w	fbac <d_type+0x15c>
    fa6e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    fa72:	294a      	cmp	r1, #74	; 0x4a
    fa74:	f200 808a 	bhi.w	fb8c <d_type+0x13c>
    fa78:	e8df f011 	tbh	[pc, r1, lsl #1]
    fa7c:	012a012a 	.word	0x012a012a
    fa80:	012a012a 	.word	0x012a012a
    fa84:	012a012a 	.word	0x012a012a
    fa88:	012a012a 	.word	0x012a012a
    fa8c:	012a012a 	.word	0x012a012a
    fa90:	00880088 	.word	0x00880088
    fa94:	00880088 	.word	0x00880088
    fa98:	00880088 	.word	0x00880088
    fa9c:	020b0088 	.word	0x020b0088
    faa0:	01520088 	.word	0x01520088
    faa4:	00880088 	.word	0x00880088
    faa8:	0160014c 	.word	0x0160014c
    faac:	00880088 	.word	0x00880088
    fab0:	00880088 	.word	0x00880088
    fab4:	016e0088 	.word	0x016e0088
    fab8:	0186012a 	.word	0x0186012a
    fabc:	008801c3 	.word	0x008801c3
    fac0:	01a20194 	.word	0x01a20194
    fac4:	01f301d1 	.word	0x01f301d1
    fac8:	00880088 	.word	0x00880088
    facc:	00880088 	.word	0x00880088
    fad0:	0088012a 	.word	0x0088012a
    fad4:	00880088 	.word	0x00880088
    fad8:	00880088 	.word	0x00880088
    fadc:	010c0088 	.word	0x010c0088
    fae0:	010c010c 	.word	0x010c010c
    fae4:	010c010c 	.word	0x010c010c
    fae8:	010c010c 	.word	0x010c010c
    faec:	010c010c 	.word	0x010c010c
    faf0:	0088010c 	.word	0x0088010c
    faf4:	010c010c 	.word	0x010c010c
    faf8:	010c010c 	.word	0x010c010c
    fafc:	00880088 	.word	0x00880088
    fb00:	010c0088 	.word	0x010c0088
    fb04:	013e010c 	.word	0x013e010c
    fb08:	010c010c 	.word	0x010c010c
    fb0c:	010c010c 	.word	0x010c010c
    fb10:	010c      	.short	0x010c
    fb12:	2200      	movs	r2, #0
    fb14:	a901      	add	r1, sp, #4
    fb16:	4620      	mov	r0, r4
    fb18:	f7fe fd58 	bl	e5cc <d_cv_qualifiers>
    fb1c:	4605      	mov	r5, r0
    fb1e:	2800      	cmp	r0, #0
    fb20:	d034      	beq.n	fb8c <d_type+0x13c>
    fb22:	68e3      	ldr	r3, [r4, #12]
    fb24:	781b      	ldrb	r3, [r3, #0]
    fb26:	2b46      	cmp	r3, #70	; 0x46
    fb28:	4620      	mov	r0, r4
    fb2a:	d034      	beq.n	fb96 <d_type+0x146>
    fb2c:	f7ff ff90 	bl	fa50 <d_type>
    fb30:	6028      	str	r0, [r5, #0]
    fb32:	b358      	cbz	r0, fb8c <d_type+0x13c>
    fb34:	7803      	ldrb	r3, [r0, #0]
    fb36:	3b1f      	subs	r3, #31
    fb38:	2b01      	cmp	r3, #1
    fb3a:	d930      	bls.n	fb9e <d_type+0x14e>
    fb3c:	9a01      	ldr	r2, [sp, #4]
    fb3e:	b32a      	cbz	r2, fb8c <d_type+0x13c>
    fb40:	6a23      	ldr	r3, [r4, #32]
    fb42:	6a61      	ldr	r1, [r4, #36]	; 0x24
    fb44:	428b      	cmp	r3, r1
    fb46:	da21      	bge.n	fb8c <d_type+0x13c>
    fb48:	69e0      	ldr	r0, [r4, #28]
    fb4a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    fb4e:	9d01      	ldr	r5, [sp, #4]
    fb50:	1c59      	adds	r1, r3, #1
    fb52:	4628      	mov	r0, r5
    fb54:	6221      	str	r1, [r4, #32]
    fb56:	b003      	add	sp, #12
    fb58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fb5c:	2301      	movs	r3, #1
    fb5e:	6b45      	ldr	r5, [r0, #52]	; 0x34
    fb60:	6343      	str	r3, [r0, #52]	; 0x34
    fb62:	f7ff fb51 	bl	f208 <d_expression_1>
    fb66:	6365      	str	r5, [r4, #52]	; 0x34
    fb68:	4602      	mov	r2, r0
    fb6a:	2300      	movs	r3, #0
    fb6c:	2142      	movs	r1, #66	; 0x42
    fb6e:	4620      	mov	r0, r4
    fb70:	f7fe fce0 	bl	e534 <d_make_comp>
    fb74:	4605      	mov	r5, r0
    fb76:	9001      	str	r0, [sp, #4]
    fb78:	b140      	cbz	r0, fb8c <d_type+0x13c>
    fb7a:	68e3      	ldr	r3, [r4, #12]
    fb7c:	781a      	ldrb	r2, [r3, #0]
    fb7e:	b12a      	cbz	r2, fb8c <d_type+0x13c>
    fb80:	1c5a      	adds	r2, r3, #1
    fb82:	60e2      	str	r2, [r4, #12]
    fb84:	781b      	ldrb	r3, [r3, #0]
    fb86:	2b45      	cmp	r3, #69	; 0x45
    fb88:	f000 80aa 	beq.w	fce0 <d_type+0x290>
    fb8c:	2500      	movs	r5, #0
    fb8e:	4628      	mov	r0, r5
    fb90:	b003      	add	sp, #12
    fb92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fb96:	f000 fd53 	bl	10640 <d_function_type>
    fb9a:	6028      	str	r0, [r5, #0]
    fb9c:	e7c9      	b.n	fb32 <d_type+0xe2>
    fb9e:	9a01      	ldr	r2, [sp, #4]
    fba0:	6843      	ldr	r3, [r0, #4]
    fba2:	6042      	str	r2, [r0, #4]
    fba4:	682a      	ldr	r2, [r5, #0]
    fba6:	9201      	str	r2, [sp, #4]
    fba8:	602b      	str	r3, [r5, #0]
    fbaa:	e7c7      	b.n	fb3c <d_type+0xec>
    fbac:	7853      	ldrb	r3, [r2, #1]
    fbae:	2b78      	cmp	r3, #120	; 0x78
    fbb0:	d0af      	beq.n	fb12 <d_type+0xc2>
    fbb2:	1c53      	adds	r3, r2, #1
    fbb4:	60c3      	str	r3, [r0, #12]
    fbb6:	7853      	ldrb	r3, [r2, #1]
    fbb8:	2b00      	cmp	r3, #0
    fbba:	d0e7      	beq.n	fb8c <d_type+0x13c>
    fbbc:	1c93      	adds	r3, r2, #2
    fbbe:	60c3      	str	r3, [r0, #12]
    fbc0:	7853      	ldrb	r3, [r2, #1]
    fbc2:	3b46      	subs	r3, #70	; 0x46
    fbc4:	2b30      	cmp	r3, #48	; 0x30
    fbc6:	d8e1      	bhi.n	fb8c <d_type+0x13c>
    fbc8:	a101      	add	r1, pc, #4	; (adr r1, fbd0 <d_type+0x180>)
    fbca:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    fbce:	bf00      	nop
    fbd0:	000100bb 	.word	0x000100bb
    fbd4:	0000fb8d 	.word	0x0000fb8d
    fbd8:	0000fb8d 	.word	0x0000fb8d
    fbdc:	0000fb8d 	.word	0x0000fb8d
    fbe0:	0000fb8d 	.word	0x0000fb8d
    fbe4:	0000fb8d 	.word	0x0000fb8d
    fbe8:	0000fb8d 	.word	0x0000fb8d
    fbec:	0000fb8d 	.word	0x0000fb8d
    fbf0:	0000fb8d 	.word	0x0000fb8d
    fbf4:	0000fb8d 	.word	0x0000fb8d
    fbf8:	0000fb8d 	.word	0x0000fb8d
    fbfc:	0000fb8d 	.word	0x0000fb8d
    fc00:	0000fb8d 	.word	0x0000fb8d
    fc04:	0000fb8d 	.word	0x0000fb8d
    fc08:	0000fb5d 	.word	0x0000fb5d
    fc0c:	0000fb8d 	.word	0x0000fb8d
    fc10:	0000fb8d 	.word	0x0000fb8d
    fc14:	0000fb8d 	.word	0x0000fb8d
    fc18:	0000fb8d 	.word	0x0000fb8d
    fc1c:	0000fb8d 	.word	0x0000fb8d
    fc20:	0000fb8d 	.word	0x0000fb8d
    fc24:	0000fb8d 	.word	0x0000fb8d
    fc28:	0000fb8d 	.word	0x0000fb8d
    fc2c:	0000fb8d 	.word	0x0000fb8d
    fc30:	0000fb8d 	.word	0x0000fb8d
    fc34:	0000fb8d 	.word	0x0000fb8d
    fc38:	0000fb8d 	.word	0x0000fb8d
    fc3c:	0001008f 	.word	0x0001008f
    fc40:	0000fb8d 	.word	0x0000fb8d
    fc44:	00010063 	.word	0x00010063
    fc48:	00010043 	.word	0x00010043
    fc4c:	00010019 	.word	0x00010019
    fc50:	0000ffeb 	.word	0x0000ffeb
    fc54:	0000fb8d 	.word	0x0000fb8d
    fc58:	0000ffbd 	.word	0x0000ffbd
    fc5c:	0000ff99 	.word	0x0000ff99
    fc60:	0000fb8d 	.word	0x0000fb8d
    fc64:	0000fb8d 	.word	0x0000fb8d
    fc68:	0000fb8d 	.word	0x0000fb8d
    fc6c:	0000fb8d 	.word	0x0000fb8d
    fc70:	0000ff5f 	.word	0x0000ff5f
    fc74:	0000fb8d 	.word	0x0000fb8d
    fc78:	0000ff49 	.word	0x0000ff49
    fc7c:	0000fb8d 	.word	0x0000fb8d
    fc80:	0000fb8d 	.word	0x0000fb8d
    fc84:	0000ff1b 	.word	0x0000ff1b
    fc88:	0000fb5d 	.word	0x0000fb5d
    fc8c:	0000fb8d 	.word	0x0000fb8d
    fc90:	0000fee5 	.word	0x0000fee5
    fc94:	6960      	ldr	r0, [r4, #20]
    fc96:	69a5      	ldr	r5, [r4, #24]
    fc98:	49bc      	ldr	r1, [pc, #752]	; (ff8c <d_type+0x53c>)
    fc9a:	3b61      	subs	r3, #97	; 0x61
    fc9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    fca0:	42a8      	cmp	r0, r5
    fca2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    fca6:	f280 823a 	bge.w	1011e <STACK_SIZE+0x11e>
    fcaa:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    fcae:	6926      	ldr	r6, [r4, #16]
    fcb0:	0089      	lsls	r1, r1, #2
    fcb2:	3001      	adds	r0, #1
    fcb4:	1875      	adds	r5, r6, r1
    fcb6:	6160      	str	r0, [r4, #20]
    fcb8:	f000 8231 	beq.w	1011e <STACK_SIZE+0x11e>
    fcbc:	2027      	movs	r0, #39	; 0x27
    fcbe:	5470      	strb	r0, [r6, r1]
    fcc0:	606b      	str	r3, [r5, #4]
    fcc2:	6859      	ldr	r1, [r3, #4]
    fcc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    fcc6:	3201      	adds	r2, #1
    fcc8:	440b      	add	r3, r1
    fcca:	60e2      	str	r2, [r4, #12]
    fccc:	6323      	str	r3, [r4, #48]	; 0x30
    fcce:	e75e      	b.n	fb8e <d_type+0x13e>
    fcd0:	4620      	mov	r0, r4
    fcd2:	f7ff fd01 	bl	f6d8 <d_name>
    fcd6:	4605      	mov	r5, r0
    fcd8:	9001      	str	r0, [sp, #4]
    fcda:	2d00      	cmp	r5, #0
    fcdc:	f43f af56 	beq.w	fb8c <d_type+0x13c>
    fce0:	6a23      	ldr	r3, [r4, #32]
    fce2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    fce4:	4293      	cmp	r3, r2
    fce6:	f6bf af51 	bge.w	fb8c <d_type+0x13c>
    fcea:	69e1      	ldr	r1, [r4, #28]
    fcec:	1c5a      	adds	r2, r3, #1
    fcee:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
    fcf2:	9d01      	ldr	r5, [sp, #4]
    fcf4:	6222      	str	r2, [r4, #32]
    fcf6:	e74a      	b.n	fb8e <d_type+0x13e>
    fcf8:	3201      	adds	r2, #1
    fcfa:	60e2      	str	r2, [r4, #12]
    fcfc:	4620      	mov	r0, r4
    fcfe:	f7fe fde9 	bl	e8d4 <d_source_name>
    fd02:	2300      	movs	r3, #0
    fd04:	4602      	mov	r2, r0
    fd06:	2128      	movs	r1, #40	; 0x28
    fd08:	4620      	mov	r0, r4
    fd0a:	f7fe fc13 	bl	e534 <d_make_comp>
    fd0e:	4605      	mov	r5, r0
    fd10:	9001      	str	r0, [sp, #4]
    fd12:	e7e2      	b.n	fcda <d_type+0x28a>
    fd14:	4620      	mov	r0, r4
    fd16:	f000 fc93 	bl	10640 <d_function_type>
    fd1a:	4605      	mov	r5, r0
    fd1c:	9001      	str	r0, [sp, #4]
    fd1e:	e7dc      	b.n	fcda <d_type+0x28a>
    fd20:	3201      	adds	r2, #1
    fd22:	60e2      	str	r2, [r4, #12]
    fd24:	4620      	mov	r0, r4
    fd26:	f7ff fe93 	bl	fa50 <d_type>
    fd2a:	2300      	movs	r3, #0
    fd2c:	4602      	mov	r2, r0
    fd2e:	2125      	movs	r1, #37	; 0x25
    fd30:	4620      	mov	r0, r4
    fd32:	f7fe fbff 	bl	e534 <d_make_comp>
    fd36:	4605      	mov	r5, r0
    fd38:	9001      	str	r0, [sp, #4]
    fd3a:	e7ce      	b.n	fcda <d_type+0x28a>
    fd3c:	3201      	adds	r2, #1
    fd3e:	60e2      	str	r2, [r4, #12]
    fd40:	4620      	mov	r0, r4
    fd42:	f7ff fe85 	bl	fa50 <d_type>
    fd46:	2300      	movs	r3, #0
    fd48:	4602      	mov	r2, r0
    fd4a:	2126      	movs	r1, #38	; 0x26
    fd4c:	4620      	mov	r0, r4
    fd4e:	f7fe fbf1 	bl	e534 <d_make_comp>
    fd52:	4605      	mov	r5, r0
    fd54:	9001      	str	r0, [sp, #4]
    fd56:	e7c0      	b.n	fcda <d_type+0x28a>
    fd58:	3201      	adds	r2, #1
    fd5a:	60e2      	str	r2, [r4, #12]
    fd5c:	4620      	mov	r0, r4
    fd5e:	f7ff fe77 	bl	fa50 <d_type>
    fd62:	4605      	mov	r5, r0
    fd64:	2800      	cmp	r0, #0
    fd66:	f000 80bb 	beq.w	fee0 <d_type+0x490>
    fd6a:	4620      	mov	r0, r4
    fd6c:	f7ff fe70 	bl	fa50 <d_type>
    fd70:	2800      	cmp	r0, #0
    fd72:	f000 80b5 	beq.w	fee0 <d_type+0x490>
    fd76:	4603      	mov	r3, r0
    fd78:	462a      	mov	r2, r5
    fd7a:	212b      	movs	r1, #43	; 0x2b
    fd7c:	4620      	mov	r0, r4
    fd7e:	f7fe fbd9 	bl	e534 <d_make_comp>
    fd82:	4605      	mov	r5, r0
    fd84:	9501      	str	r5, [sp, #4]
    fd86:	e7a8      	b.n	fcda <d_type+0x28a>
    fd88:	3201      	adds	r2, #1
    fd8a:	60e2      	str	r2, [r4, #12]
    fd8c:	4620      	mov	r0, r4
    fd8e:	f7ff fe5f 	bl	fa50 <d_type>
    fd92:	2300      	movs	r3, #0
    fd94:	4602      	mov	r2, r0
    fd96:	2124      	movs	r1, #36	; 0x24
    fd98:	4620      	mov	r0, r4
    fd9a:	f7fe fbcb 	bl	e534 <d_make_comp>
    fd9e:	4605      	mov	r5, r0
    fda0:	9001      	str	r0, [sp, #4]
    fda2:	e79a      	b.n	fcda <d_type+0x28a>
    fda4:	3201      	adds	r2, #1
    fda6:	60e2      	str	r2, [r4, #12]
    fda8:	4620      	mov	r0, r4
    fdaa:	f7ff fe51 	bl	fa50 <d_type>
    fdae:	2300      	movs	r3, #0
    fdb0:	4602      	mov	r2, r0
    fdb2:	2123      	movs	r1, #35	; 0x23
    fdb4:	4620      	mov	r0, r4
    fdb6:	f7fe fbbd 	bl	e534 <d_make_comp>
    fdba:	4605      	mov	r5, r0
    fdbc:	9001      	str	r0, [sp, #4]
    fdbe:	e78c      	b.n	fcda <d_type+0x28a>
    fdc0:	7853      	ldrb	r3, [r2, #1]
    fdc2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    fdc6:	2a09      	cmp	r2, #9
    fdc8:	d905      	bls.n	fdd6 <d_type+0x386>
    fdca:	2b5f      	cmp	r3, #95	; 0x5f
    fdcc:	d003      	beq.n	fdd6 <d_type+0x386>
    fdce:	3b41      	subs	r3, #65	; 0x41
    fdd0:	2b19      	cmp	r3, #25
    fdd2:	f200 81c3 	bhi.w	1015c <STACK_SIZE+0x15c>
    fdd6:	2100      	movs	r1, #0
    fdd8:	4620      	mov	r0, r4
    fdda:	f7fe fdf3 	bl	e9c4 <d_substitution>
    fdde:	68e3      	ldr	r3, [r4, #12]
    fde0:	9001      	str	r0, [sp, #4]
    fde2:	781b      	ldrb	r3, [r3, #0]
    fde4:	2b49      	cmp	r3, #73	; 0x49
    fde6:	4605      	mov	r5, r0
    fde8:	f47f aed1 	bne.w	fb8e <d_type+0x13e>
    fdec:	4620      	mov	r0, r4
    fdee:	f7ff fc69 	bl	f6c4 <d_template_args>
    fdf2:	462a      	mov	r2, r5
    fdf4:	4603      	mov	r3, r0
    fdf6:	2104      	movs	r1, #4
    fdf8:	4620      	mov	r0, r4
    fdfa:	f7fe fb9b 	bl	e534 <d_make_comp>
    fdfe:	4605      	mov	r5, r0
    fe00:	e7c0      	b.n	fd84 <d_type+0x334>
    fe02:	3201      	adds	r2, #1
    fe04:	60e2      	str	r2, [r4, #12]
    fe06:	4620      	mov	r0, r4
    fe08:	f7ff fe22 	bl	fa50 <d_type>
    fe0c:	2300      	movs	r3, #0
    fe0e:	4602      	mov	r2, r0
    fe10:	2122      	movs	r1, #34	; 0x22
    fe12:	4620      	mov	r0, r4
    fe14:	f7fe fb8e 	bl	e534 <d_make_comp>
    fe18:	4605      	mov	r5, r0
    fe1a:	9001      	str	r0, [sp, #4]
    fe1c:	e75d      	b.n	fcda <d_type+0x28a>
    fe1e:	4620      	mov	r0, r4
    fe20:	f7fe fd36 	bl	e890 <d_template_param>
    fe24:	68e6      	ldr	r6, [r4, #12]
    fe26:	9001      	str	r0, [sp, #4]
    fe28:	7833      	ldrb	r3, [r6, #0]
    fe2a:	2b49      	cmp	r3, #73	; 0x49
    fe2c:	4605      	mov	r5, r0
    fe2e:	f47f af54 	bne.w	fcda <d_type+0x28a>
    fe32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    fe34:	2b00      	cmp	r3, #0
    fe36:	f040 81a9 	bne.w	1018c <STACK_SIZE+0x18c>
    fe3a:	2800      	cmp	r0, #0
    fe3c:	f43f aea6 	beq.w	fb8c <d_type+0x13c>
    fe40:	6a23      	ldr	r3, [r4, #32]
    fe42:	6a62      	ldr	r2, [r4, #36]	; 0x24
    fe44:	4293      	cmp	r3, r2
    fe46:	f6bf aea1 	bge.w	fb8c <d_type+0x13c>
    fe4a:	69e1      	ldr	r1, [r4, #28]
    fe4c:	1c5a      	adds	r2, r3, #1
    fe4e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    fe52:	6222      	str	r2, [r4, #32]
    fe54:	4620      	mov	r0, r4
    fe56:	9d01      	ldr	r5, [sp, #4]
    fe58:	f7ff fc34 	bl	f6c4 <d_template_args>
    fe5c:	462a      	mov	r2, r5
    fe5e:	4603      	mov	r3, r0
    fe60:	e7c9      	b.n	fdf6 <d_type+0x3a6>
    fe62:	3201      	adds	r2, #1
    fe64:	60e2      	str	r2, [r4, #12]
    fe66:	4620      	mov	r0, r4
    fe68:	f7fe fd34 	bl	e8d4 <d_source_name>
    fe6c:	68e3      	ldr	r3, [r4, #12]
    fe6e:	9001      	str	r0, [sp, #4]
    fe70:	781b      	ldrb	r3, [r3, #0]
    fe72:	2b49      	cmp	r3, #73	; 0x49
    fe74:	4605      	mov	r5, r0
    fe76:	f000 817e 	beq.w	10176 <STACK_SIZE+0x176>
    fe7a:	4620      	mov	r0, r4
    fe7c:	f7ff fde8 	bl	fa50 <d_type>
    fe80:	9b01      	ldr	r3, [sp, #4]
    fe82:	4602      	mov	r2, r0
    fe84:	2121      	movs	r1, #33	; 0x21
    fe86:	4620      	mov	r0, r4
    fe88:	f7fe fb54 	bl	e534 <d_make_comp>
    fe8c:	4605      	mov	r5, r0
    fe8e:	9001      	str	r0, [sp, #4]
    fe90:	e723      	b.n	fcda <d_type+0x28a>
    fe92:	1c51      	adds	r1, r2, #1
    fe94:	60e1      	str	r1, [r4, #12]
    fe96:	7853      	ldrb	r3, [r2, #1]
    fe98:	2b5f      	cmp	r3, #95	; 0x5f
    fe9a:	f000 8144 	beq.w	10126 <STACK_SIZE+0x126>
    fe9e:	3b30      	subs	r3, #48	; 0x30
    fea0:	2b09      	cmp	r3, #9
    fea2:	f200 814e 	bhi.w	10142 <STACK_SIZE+0x142>
    fea6:	460b      	mov	r3, r1
    fea8:	3301      	adds	r3, #1
    feaa:	60e3      	str	r3, [r4, #12]
    feac:	781a      	ldrb	r2, [r3, #0]
    feae:	3a30      	subs	r2, #48	; 0x30
    feb0:	2a09      	cmp	r2, #9
    feb2:	d9f9      	bls.n	fea8 <d_type+0x458>
    feb4:	6962      	ldr	r2, [r4, #20]
    feb6:	69a0      	ldr	r0, [r4, #24]
    feb8:	4282      	cmp	r2, r0
    feba:	da11      	bge.n	fee0 <d_type+0x490>
    febc:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    fec0:	6926      	ldr	r6, [r4, #16]
    fec2:	0080      	lsls	r0, r0, #2
    fec4:	3201      	adds	r2, #1
    fec6:	1835      	adds	r5, r6, r0
    fec8:	6162      	str	r2, [r4, #20]
    feca:	d009      	beq.n	fee0 <d_type+0x490>
    fecc:	1a5a      	subs	r2, r3, r1
    fece:	d007      	beq.n	fee0 <d_type+0x490>
    fed0:	2700      	movs	r7, #0
    fed2:	5437      	strb	r7, [r6, r0]
    fed4:	6069      	str	r1, [r5, #4]
    fed6:	60aa      	str	r2, [r5, #8]
    fed8:	781a      	ldrb	r2, [r3, #0]
    feda:	2a5f      	cmp	r2, #95	; 0x5f
    fedc:	f000 8190 	beq.w	10200 <STACK_SIZE+0x200>
    fee0:	2500      	movs	r5, #0
    fee2:	e74f      	b.n	fd84 <d_type+0x334>
    fee4:	7893      	ldrb	r3, [r2, #2]
    fee6:	2b5f      	cmp	r3, #95	; 0x5f
    fee8:	f000 8180 	beq.w	101ec <STACK_SIZE+0x1ec>
    feec:	f7fe fc9c 	bl	e828 <d_number_component>
    fef0:	4605      	mov	r5, r0
    fef2:	2d00      	cmp	r5, #0
    fef4:	f43f af46 	beq.w	fd84 <d_type+0x334>
    fef8:	68e3      	ldr	r3, [r4, #12]
    fefa:	781a      	ldrb	r2, [r3, #0]
    fefc:	2a5f      	cmp	r2, #95	; 0x5f
    fefe:	d1ef      	bne.n	fee0 <d_type+0x490>
    ff00:	3301      	adds	r3, #1
    ff02:	60e3      	str	r3, [r4, #12]
    ff04:	4620      	mov	r0, r4
    ff06:	f7ff fda3 	bl	fa50 <d_type>
    ff0a:	462a      	mov	r2, r5
    ff0c:	4603      	mov	r3, r0
    ff0e:	212d      	movs	r1, #45	; 0x2d
    ff10:	4620      	mov	r0, r4
    ff12:	f7fe fb0f 	bl	e534 <d_make_comp>
    ff16:	4605      	mov	r5, r0
    ff18:	e734      	b.n	fd84 <d_type+0x334>
    ff1a:	6942      	ldr	r2, [r0, #20]
    ff1c:	6983      	ldr	r3, [r0, #24]
    ff1e:	429a      	cmp	r2, r3
    ff20:	f280 80fd 	bge.w	1011e <STACK_SIZE+0x11e>
    ff24:	230c      	movs	r3, #12
    ff26:	6901      	ldr	r1, [r0, #16]
    ff28:	fb03 f302 	mul.w	r3, r3, r2
    ff2c:	18cd      	adds	r5, r1, r3
    ff2e:	f102 0201 	add.w	r2, r2, #1
    ff32:	6142      	str	r2, [r0, #20]
    ff34:	f000 80f3 	beq.w	1011e <STACK_SIZE+0x11e>
    ff38:	4a15      	ldr	r2, [pc, #84]	; (ff90 <d_type+0x540>)
    ff3a:	2027      	movs	r0, #39	; 0x27
    ff3c:	54c8      	strb	r0, [r1, r3]
    ff3e:	606a      	str	r2, [r5, #4]
    ff40:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ff42:	3308      	adds	r3, #8
    ff44:	6323      	str	r3, [r4, #48]	; 0x30
    ff46:	e622      	b.n	fb8e <d_type+0x13e>
    ff48:	f7ff fd82 	bl	fa50 <d_type>
    ff4c:	2300      	movs	r3, #0
    ff4e:	4602      	mov	r2, r0
    ff50:	214a      	movs	r1, #74	; 0x4a
    ff52:	4620      	mov	r0, r4
    ff54:	f7fe faee 	bl	e534 <d_make_comp>
    ff58:	4605      	mov	r5, r0
    ff5a:	9001      	str	r0, [sp, #4]
    ff5c:	e6bd      	b.n	fcda <d_type+0x28a>
    ff5e:	6942      	ldr	r2, [r0, #20]
    ff60:	6983      	ldr	r3, [r0, #24]
    ff62:	429a      	cmp	r2, r3
    ff64:	f280 80db 	bge.w	1011e <STACK_SIZE+0x11e>
    ff68:	230c      	movs	r3, #12
    ff6a:	6901      	ldr	r1, [r0, #16]
    ff6c:	fb03 f302 	mul.w	r3, r3, r2
    ff70:	18cd      	adds	r5, r1, r3
    ff72:	f102 0201 	add.w	r2, r2, #1
    ff76:	6142      	str	r2, [r0, #20]
    ff78:	f000 80d1 	beq.w	1011e <STACK_SIZE+0x11e>
    ff7c:	2027      	movs	r0, #39	; 0x27
    ff7e:	4a05      	ldr	r2, [pc, #20]	; (ff94 <d_type+0x544>)
    ff80:	54c8      	strb	r0, [r1, r3]
    ff82:	606a      	str	r2, [r5, #4]
    ff84:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ff86:	3311      	adds	r3, #17
    ff88:	6323      	str	r3, [r4, #48]	; 0x30
    ff8a:	e600      	b.n	fb8e <d_type+0x13e>
    ff8c:	0003d400 	.word	0x0003d400
    ff90:	0003d658 	.word	0x0003d658
    ff94:	0003d680 	.word	0x0003d680
    ff98:	6942      	ldr	r2, [r0, #20]
    ff9a:	6983      	ldr	r3, [r0, #24]
    ff9c:	429a      	cmp	r2, r3
    ff9e:	f280 80be 	bge.w	1011e <STACK_SIZE+0x11e>
    ffa2:	230c      	movs	r3, #12
    ffa4:	6901      	ldr	r1, [r0, #16]
    ffa6:	fb03 f302 	mul.w	r3, r3, r2
    ffaa:	18cd      	adds	r5, r1, r3
    ffac:	f102 0201 	add.w	r2, r2, #1
    ffb0:	6142      	str	r2, [r0, #20]
    ffb2:	f000 80b4 	beq.w	1011e <STACK_SIZE+0x11e>
    ffb6:	2027      	movs	r0, #39	; 0x27
    ffb8:	4a92      	ldr	r2, [pc, #584]	; (10204 <STACK_SIZE+0x204>)
    ffba:	e7bf      	b.n	ff3c <d_type+0x4ec>
    ffbc:	6942      	ldr	r2, [r0, #20]
    ffbe:	6983      	ldr	r3, [r0, #24]
    ffc0:	429a      	cmp	r2, r3
    ffc2:	f280 80ac 	bge.w	1011e <STACK_SIZE+0x11e>
    ffc6:	230c      	movs	r3, #12
    ffc8:	6901      	ldr	r1, [r0, #16]
    ffca:	fb03 f302 	mul.w	r3, r3, r2
    ffce:	18cd      	adds	r5, r1, r3
    ffd0:	f102 0201 	add.w	r2, r2, #1
    ffd4:	6142      	str	r2, [r0, #20]
    ffd6:	f000 80a2 	beq.w	1011e <STACK_SIZE+0x11e>
    ffda:	2027      	movs	r0, #39	; 0x27
    ffdc:	4a8a      	ldr	r2, [pc, #552]	; (10208 <STACK_SIZE+0x208>)
    ffde:	54c8      	strb	r0, [r1, r3]
    ffe0:	606a      	str	r2, [r5, #4]
    ffe2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ffe4:	3304      	adds	r3, #4
    ffe6:	6323      	str	r3, [r4, #48]	; 0x30
    ffe8:	e5d1      	b.n	fb8e <d_type+0x13e>
    ffea:	6942      	ldr	r2, [r0, #20]
    ffec:	6983      	ldr	r3, [r0, #24]
    ffee:	429a      	cmp	r2, r3
    fff0:	f280 8095 	bge.w	1011e <STACK_SIZE+0x11e>
    fff4:	230c      	movs	r3, #12
    fff6:	6901      	ldr	r1, [r0, #16]
    fff8:	fb03 f302 	mul.w	r3, r3, r2
    fffc:	18cd      	adds	r5, r1, r3
    fffe:	f102 0201 	add.w	r2, r2, #1
   10002:	6142      	str	r2, [r0, #20]
   10004:	f000 808b 	beq.w	1011e <STACK_SIZE+0x11e>
   10008:	4a80      	ldr	r2, [pc, #512]	; (1020c <STACK_SIZE+0x20c>)
   1000a:	2027      	movs	r0, #39	; 0x27
   1000c:	54c8      	strb	r0, [r1, r3]
   1000e:	606a      	str	r2, [r5, #4]
   10010:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10012:	3309      	adds	r3, #9
   10014:	6323      	str	r3, [r4, #48]	; 0x30
   10016:	e5ba      	b.n	fb8e <d_type+0x13e>
   10018:	6942      	ldr	r2, [r0, #20]
   1001a:	6983      	ldr	r3, [r0, #24]
   1001c:	429a      	cmp	r2, r3
   1001e:	da7e      	bge.n	1011e <STACK_SIZE+0x11e>
   10020:	230c      	movs	r3, #12
   10022:	6901      	ldr	r1, [r0, #16]
   10024:	fb03 f302 	mul.w	r3, r3, r2
   10028:	18cd      	adds	r5, r1, r3
   1002a:	f102 0201 	add.w	r2, r2, #1
   1002e:	6142      	str	r2, [r0, #20]
   10030:	d075      	beq.n	1011e <STACK_SIZE+0x11e>
   10032:	2027      	movs	r0, #39	; 0x27
   10034:	4a76      	ldr	r2, [pc, #472]	; (10210 <STACK_SIZE+0x210>)
   10036:	54c8      	strb	r0, [r1, r3]
   10038:	606a      	str	r2, [r5, #4]
   1003a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1003c:	330a      	adds	r3, #10
   1003e:	6323      	str	r3, [r4, #48]	; 0x30
   10040:	e5a5      	b.n	fb8e <d_type+0x13e>
   10042:	6942      	ldr	r2, [r0, #20]
   10044:	6983      	ldr	r3, [r0, #24]
   10046:	429a      	cmp	r2, r3
   10048:	da69      	bge.n	1011e <STACK_SIZE+0x11e>
   1004a:	230c      	movs	r3, #12
   1004c:	6901      	ldr	r1, [r0, #16]
   1004e:	fb03 f302 	mul.w	r3, r3, r2
   10052:	18cd      	adds	r5, r1, r3
   10054:	f102 0201 	add.w	r2, r2, #1
   10058:	6142      	str	r2, [r0, #20]
   1005a:	d060      	beq.n	1011e <STACK_SIZE+0x11e>
   1005c:	2027      	movs	r0, #39	; 0x27
   1005e:	4a6d      	ldr	r2, [pc, #436]	; (10214 <STACK_SIZE+0x214>)
   10060:	e7d4      	b.n	1000c <STACK_SIZE+0xc>
   10062:	6942      	ldr	r2, [r0, #20]
   10064:	6983      	ldr	r3, [r0, #24]
   10066:	429a      	cmp	r2, r3
   10068:	f6bf ad90 	bge.w	fb8c <d_type+0x13c>
   1006c:	230c      	movs	r3, #12
   1006e:	6901      	ldr	r1, [r0, #16]
   10070:	fb03 f302 	mul.w	r3, r3, r2
   10074:	18cd      	adds	r5, r1, r3
   10076:	f102 0201 	add.w	r2, r2, #1
   1007a:	6142      	str	r2, [r0, #20]
   1007c:	f43f ad87 	beq.w	fb8e <d_type+0x13e>
   10080:	2000      	movs	r0, #0
   10082:	54c8      	strb	r0, [r1, r3]
   10084:	4a64      	ldr	r2, [pc, #400]	; (10218 <STACK_SIZE+0x218>)
   10086:	606a      	str	r2, [r5, #4]
   10088:	230e      	movs	r3, #14
   1008a:	60ab      	str	r3, [r5, #8]
   1008c:	e57f      	b.n	fb8e <d_type+0x13e>
   1008e:	6942      	ldr	r2, [r0, #20]
   10090:	6983      	ldr	r3, [r0, #24]
   10092:	429a      	cmp	r2, r3
   10094:	f6bf ad7a 	bge.w	fb8c <d_type+0x13c>
   10098:	230c      	movs	r3, #12
   1009a:	6901      	ldr	r1, [r0, #16]
   1009c:	fb03 f302 	mul.w	r3, r3, r2
   100a0:	18cd      	adds	r5, r1, r3
   100a2:	f102 0201 	add.w	r2, r2, #1
   100a6:	6142      	str	r2, [r0, #20]
   100a8:	f43f ad71 	beq.w	fb8e <d_type+0x13e>
   100ac:	2000      	movs	r0, #0
   100ae:	54c8      	strb	r0, [r1, r3]
   100b0:	4a5a      	ldr	r2, [pc, #360]	; (1021c <STACK_SIZE+0x21c>)
   100b2:	606a      	str	r2, [r5, #4]
   100b4:	2304      	movs	r3, #4
   100b6:	60ab      	str	r3, [r5, #8]
   100b8:	e569      	b.n	fb8e <d_type+0x13e>
   100ba:	6943      	ldr	r3, [r0, #20]
   100bc:	6981      	ldr	r1, [r0, #24]
   100be:	428b      	cmp	r3, r1
   100c0:	da7a      	bge.n	101b8 <STACK_SIZE+0x1b8>
   100c2:	6900      	ldr	r0, [r0, #16]
   100c4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   100c8:	0089      	lsls	r1, r1, #2
   100ca:	3301      	adds	r3, #1
   100cc:	1845      	adds	r5, r0, r1
   100ce:	262c      	movs	r6, #44	; 0x2c
   100d0:	6163      	str	r3, [r4, #20]
   100d2:	9501      	str	r5, [sp, #4]
   100d4:	5446      	strb	r6, [r0, r1]
   100d6:	7893      	ldrb	r3, [r2, #2]
   100d8:	3b30      	subs	r3, #48	; 0x30
   100da:	b2db      	uxtb	r3, r3
   100dc:	2b09      	cmp	r3, #9
   100de:	bf94      	ite	ls
   100e0:	2301      	movls	r3, #1
   100e2:	2300      	movhi	r3, #0
   100e4:	812b      	strh	r3, [r5, #8]
   100e6:	d97b      	bls.n	101e0 <STACK_SIZE+0x1e0>
   100e8:	4620      	mov	r0, r4
   100ea:	f7ff fcb1 	bl	fa50 <d_type>
   100ee:	9b01      	ldr	r3, [sp, #4]
   100f0:	6068      	str	r0, [r5, #4]
   100f2:	685b      	ldr	r3, [r3, #4]
   100f4:	2b00      	cmp	r3, #0
   100f6:	f43f ad49 	beq.w	fb8c <d_type+0x13c>
   100fa:	f104 000c 	add.w	r0, r4, #12
   100fe:	f7fe fb69 	bl	e7d4 <d_number.isra.0>
   10102:	68e2      	ldr	r2, [r4, #12]
   10104:	7813      	ldrb	r3, [r2, #0]
   10106:	b113      	cbz	r3, 1010e <STACK_SIZE+0x10e>
   10108:	1c53      	adds	r3, r2, #1
   1010a:	60e3      	str	r3, [r4, #12]
   1010c:	7813      	ldrb	r3, [r2, #0]
   1010e:	9d01      	ldr	r5, [sp, #4]
   10110:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
   10114:	fab3 f383 	clz	r3, r3
   10118:	095b      	lsrs	r3, r3, #5
   1011a:	816b      	strh	r3, [r5, #10]
   1011c:	e537      	b.n	fb8e <d_type+0x13e>
   1011e:	2300      	movs	r3, #0
   10120:	9301      	str	r3, [sp, #4]
   10122:	685b      	ldr	r3, [r3, #4]
   10124:	deff      	udf	#255	; 0xff
   10126:	2500      	movs	r5, #0
   10128:	3101      	adds	r1, #1
   1012a:	60e1      	str	r1, [r4, #12]
   1012c:	4620      	mov	r0, r4
   1012e:	f7ff fc8f 	bl	fa50 <d_type>
   10132:	462a      	mov	r2, r5
   10134:	4603      	mov	r3, r0
   10136:	212a      	movs	r1, #42	; 0x2a
   10138:	4620      	mov	r0, r4
   1013a:	f7fe f9fb 	bl	e534 <d_make_comp>
   1013e:	4605      	mov	r5, r0
   10140:	e620      	b.n	fd84 <d_type+0x334>
   10142:	2301      	movs	r3, #1
   10144:	6b65      	ldr	r5, [r4, #52]	; 0x34
   10146:	6363      	str	r3, [r4, #52]	; 0x34
   10148:	4620      	mov	r0, r4
   1014a:	f7ff f85d 	bl	f208 <d_expression_1>
   1014e:	6365      	str	r5, [r4, #52]	; 0x34
   10150:	4605      	mov	r5, r0
   10152:	2800      	cmp	r0, #0
   10154:	f43f aec4 	beq.w	fee0 <d_type+0x490>
   10158:	68e3      	ldr	r3, [r4, #12]
   1015a:	e6bd      	b.n	fed8 <d_type+0x488>
   1015c:	4620      	mov	r0, r4
   1015e:	f7ff fabb 	bl	f6d8 <d_name>
   10162:	4605      	mov	r5, r0
   10164:	9001      	str	r0, [sp, #4]
   10166:	2800      	cmp	r0, #0
   10168:	f43f ad10 	beq.w	fb8c <d_type+0x13c>
   1016c:	7803      	ldrb	r3, [r0, #0]
   1016e:	2b18      	cmp	r3, #24
   10170:	f47f adb6 	bne.w	fce0 <d_type+0x290>
   10174:	e50b      	b.n	fb8e <d_type+0x13e>
   10176:	4620      	mov	r0, r4
   10178:	f7ff faa4 	bl	f6c4 <d_template_args>
   1017c:	462a      	mov	r2, r5
   1017e:	4603      	mov	r3, r0
   10180:	2104      	movs	r1, #4
   10182:	4620      	mov	r0, r4
   10184:	f7fe f9d6 	bl	e534 <d_make_comp>
   10188:	9001      	str	r0, [sp, #4]
   1018a:	e676      	b.n	fe7a <d_type+0x42a>
   1018c:	4620      	mov	r0, r4
   1018e:	f8d4 9014 	ldr.w	r9, [r4, #20]
   10192:	f8d4 8020 	ldr.w	r8, [r4, #32]
   10196:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   10198:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1019a:	f7ff fa93 	bl	f6c4 <d_template_args>
   1019e:	68e2      	ldr	r2, [r4, #12]
   101a0:	7812      	ldrb	r2, [r2, #0]
   101a2:	2a49      	cmp	r2, #73	; 0x49
   101a4:	d00b      	beq.n	101be <STACK_SIZE+0x1be>
   101a6:	6325      	str	r5, [r4, #48]	; 0x30
   101a8:	60e6      	str	r6, [r4, #12]
   101aa:	f8c4 9014 	str.w	r9, [r4, #20]
   101ae:	f8c4 8020 	str.w	r8, [r4, #32]
   101b2:	62a7      	str	r7, [r4, #40]	; 0x28
   101b4:	9d01      	ldr	r5, [sp, #4]
   101b6:	e590      	b.n	fcda <d_type+0x28a>
   101b8:	2300      	movs	r3, #0
   101ba:	701b      	strb	r3, [r3, #0]
   101bc:	deff      	udf	#255	; 0xff
   101be:	9b01      	ldr	r3, [sp, #4]
   101c0:	2b00      	cmp	r3, #0
   101c2:	f43f ace3 	beq.w	fb8c <d_type+0x13c>
   101c6:	6a22      	ldr	r2, [r4, #32]
   101c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   101ca:	428a      	cmp	r2, r1
   101cc:	f6bf acde 	bge.w	fb8c <d_type+0x13c>
   101d0:	69e5      	ldr	r5, [r4, #28]
   101d2:	1c51      	adds	r1, r2, #1
   101d4:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
   101d8:	9a01      	ldr	r2, [sp, #4]
   101da:	6221      	str	r1, [r4, #32]
   101dc:	4603      	mov	r3, r0
   101de:	e60a      	b.n	fdf6 <d_type+0x3a6>
   101e0:	f104 000c 	add.w	r0, r4, #12
   101e4:	f7fe faf6 	bl	e7d4 <d_number.isra.0>
   101e8:	9d01      	ldr	r5, [sp, #4]
   101ea:	e77d      	b.n	100e8 <STACK_SIZE+0xe8>
   101ec:	3203      	adds	r2, #3
   101ee:	2301      	movs	r3, #1
   101f0:	6b46      	ldr	r6, [r0, #52]	; 0x34
   101f2:	60c2      	str	r2, [r0, #12]
   101f4:	6343      	str	r3, [r0, #52]	; 0x34
   101f6:	f7ff f807 	bl	f208 <d_expression_1>
   101fa:	6366      	str	r6, [r4, #52]	; 0x34
   101fc:	4605      	mov	r5, r0
   101fe:	e678      	b.n	fef2 <d_type+0x4a2>
   10200:	4619      	mov	r1, r3
   10202:	e791      	b.n	10128 <STACK_SIZE+0x128>
   10204:	0003d66c 	.word	0x0003d66c
   10208:	0003d644 	.word	0x0003d644
   1020c:	0003d608 	.word	0x0003d608
   10210:	0003d630 	.word	0x0003d630
   10214:	0003d61c 	.word	0x0003d61c
   10218:	0003db28 	.word	0x0003db28
   1021c:	0003db20 	.word	0x0003db20

00010220 <d_operator_name>:
   10220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10222:	68c3      	ldr	r3, [r0, #12]
   10224:	781e      	ldrb	r6, [r3, #0]
   10226:	4684      	mov	ip, r0
   10228:	b326      	cbz	r6, 10274 <d_operator_name+0x54>
   1022a:	1c5a      	adds	r2, r3, #1
   1022c:	60c2      	str	r2, [r0, #12]
   1022e:	785a      	ldrb	r2, [r3, #1]
   10230:	781e      	ldrb	r6, [r3, #0]
   10232:	2a00      	cmp	r2, #0
   10234:	d058      	beq.n	102e8 <d_operator_name+0xc8>
   10236:	1c9a      	adds	r2, r3, #2
   10238:	60c2      	str	r2, [r0, #12]
   1023a:	2e76      	cmp	r6, #118	; 0x76
   1023c:	4604      	mov	r4, r0
   1023e:	f893 e001 	ldrb.w	lr, [r3, #1]
   10242:	d043      	beq.n	102cc <d_operator_name+0xac>
   10244:	2e63      	cmp	r6, #99	; 0x63
   10246:	d116      	bne.n	10276 <d_operator_name+0x56>
   10248:	f1be 0f76 	cmp.w	lr, #118	; 0x76
   1024c:	d113      	bne.n	10276 <d_operator_name+0x56>
   1024e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10250:	6b85      	ldr	r5, [r0, #56]	; 0x38
   10252:	fab3 f383 	clz	r3, r3
   10256:	095b      	lsrs	r3, r3, #5
   10258:	6383      	str	r3, [r0, #56]	; 0x38
   1025a:	f7ff fbf9 	bl	fa50 <d_type>
   1025e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   10260:	4602      	mov	r2, r0
   10262:	2b00      	cmp	r3, #0
   10264:	d052      	beq.n	1030c <d_operator_name+0xec>
   10266:	2300      	movs	r3, #0
   10268:	2134      	movs	r1, #52	; 0x34
   1026a:	4620      	mov	r0, r4
   1026c:	f7fe f962 	bl	e534 <d_make_comp>
   10270:	63a5      	str	r5, [r4, #56]	; 0x38
   10272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10274:	46b6      	mov	lr, r6
   10276:	4c28      	ldr	r4, [pc, #160]	; (10318 <d_operator_name+0xf8>)
   10278:	2043      	movs	r0, #67	; 0x43
   1027a:	2200      	movs	r2, #0
   1027c:	e004      	b.n	10288 <d_operator_name+0x68>
   1027e:	bf94      	ite	ls
   10280:	1c5a      	addls	r2, r3, #1
   10282:	4618      	movhi	r0, r3
   10284:	4282      	cmp	r2, r0
   10286:	d02d      	beq.n	102e4 <d_operator_name+0xc4>
   10288:	1a83      	subs	r3, r0, r2
   1028a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   1028e:	eb02 0363 	add.w	r3, r2, r3, asr #1
   10292:	0119      	lsls	r1, r3, #4
   10294:	1867      	adds	r7, r4, r1
   10296:	5861      	ldr	r1, [r4, r1]
   10298:	780d      	ldrb	r5, [r1, #0]
   1029a:	42b5      	cmp	r5, r6
   1029c:	d1ef      	bne.n	1027e <d_operator_name+0x5e>
   1029e:	7849      	ldrb	r1, [r1, #1]
   102a0:	4571      	cmp	r1, lr
   102a2:	d1ec      	bne.n	1027e <d_operator_name+0x5e>
   102a4:	f8dc 3014 	ldr.w	r3, [ip, #20]
   102a8:	f8dc 2018 	ldr.w	r2, [ip, #24]
   102ac:	4293      	cmp	r3, r2
   102ae:	da19      	bge.n	102e4 <d_operator_name+0xc4>
   102b0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   102b4:	f8dc 1010 	ldr.w	r1, [ip, #16]
   102b8:	0092      	lsls	r2, r2, #2
   102ba:	3301      	adds	r3, #1
   102bc:	1888      	adds	r0, r1, r2
   102be:	f8cc 3014 	str.w	r3, [ip, #20]
   102c2:	d013      	beq.n	102ec <d_operator_name+0xcc>
   102c4:	2331      	movs	r3, #49	; 0x31
   102c6:	548b      	strb	r3, [r1, r2]
   102c8:	6047      	str	r7, [r0, #4]
   102ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   102cc:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
   102d0:	b2eb      	uxtb	r3, r5
   102d2:	2b09      	cmp	r3, #9
   102d4:	d8cf      	bhi.n	10276 <d_operator_name+0x56>
   102d6:	f7fe fafd 	bl	e8d4 <d_source_name>
   102da:	6963      	ldr	r3, [r4, #20]
   102dc:	69a2      	ldr	r2, [r4, #24]
   102de:	4293      	cmp	r3, r2
   102e0:	4601      	mov	r1, r0
   102e2:	db04      	blt.n	102ee <d_operator_name+0xce>
   102e4:	2000      	movs	r0, #0
   102e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   102e8:	4696      	mov	lr, r2
   102ea:	e7c4      	b.n	10276 <d_operator_name+0x56>
   102ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   102ee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   102f2:	6926      	ldr	r6, [r4, #16]
   102f4:	0092      	lsls	r2, r2, #2
   102f6:	3301      	adds	r3, #1
   102f8:	18b0      	adds	r0, r6, r2
   102fa:	6163      	str	r3, [r4, #20]
   102fc:	d0f2      	beq.n	102e4 <d_operator_name+0xc4>
   102fe:	2900      	cmp	r1, #0
   10300:	d0f0      	beq.n	102e4 <d_operator_name+0xc4>
   10302:	2332      	movs	r3, #50	; 0x32
   10304:	54b3      	strb	r3, [r6, r2]
   10306:	6045      	str	r5, [r0, #4]
   10308:	6081      	str	r1, [r0, #8]
   1030a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1030c:	2133      	movs	r1, #51	; 0x33
   1030e:	4620      	mov	r0, r4
   10310:	f7fe f910 	bl	e534 <d_make_comp>
   10314:	e7ac      	b.n	10270 <d_operator_name+0x50>
   10316:	bf00      	nop
   10318:	0003d694 	.word	0x0003d694

0001031c <d_parmlist>:
   1031c:	b530      	push	{r4, r5, lr}
   1031e:	68c2      	ldr	r2, [r0, #12]
   10320:	b083      	sub	sp, #12
   10322:	2300      	movs	r3, #0
   10324:	9301      	str	r3, [sp, #4]
   10326:	7813      	ldrb	r3, [r2, #0]
   10328:	b343      	cbz	r3, 1037c <d_parmlist+0x60>
   1032a:	2b45      	cmp	r3, #69	; 0x45
   1032c:	d026      	beq.n	1037c <d_parmlist+0x60>
   1032e:	2b2e      	cmp	r3, #46	; 0x2e
   10330:	d024      	beq.n	1037c <d_parmlist+0x60>
   10332:	4604      	mov	r4, r0
   10334:	ad01      	add	r5, sp, #4
   10336:	e015      	b.n	10364 <d_parmlist+0x48>
   10338:	2b4f      	cmp	r3, #79	; 0x4f
   1033a:	d016      	beq.n	1036a <d_parmlist+0x4e>
   1033c:	f7ff fb88 	bl	fa50 <d_type>
   10340:	2300      	movs	r3, #0
   10342:	4602      	mov	r2, r0
   10344:	212e      	movs	r1, #46	; 0x2e
   10346:	b1c8      	cbz	r0, 1037c <d_parmlist+0x60>
   10348:	4620      	mov	r0, r4
   1034a:	f7fe f8f3 	bl	e534 <d_make_comp>
   1034e:	6028      	str	r0, [r5, #0]
   10350:	b1a0      	cbz	r0, 1037c <d_parmlist+0x60>
   10352:	68e2      	ldr	r2, [r4, #12]
   10354:	7813      	ldrb	r3, [r2, #0]
   10356:	f100 0508 	add.w	r5, r0, #8
   1035a:	b14b      	cbz	r3, 10370 <d_parmlist+0x54>
   1035c:	2b45      	cmp	r3, #69	; 0x45
   1035e:	d007      	beq.n	10370 <d_parmlist+0x54>
   10360:	2b2e      	cmp	r3, #46	; 0x2e
   10362:	d005      	beq.n	10370 <d_parmlist+0x54>
   10364:	2b52      	cmp	r3, #82	; 0x52
   10366:	4620      	mov	r0, r4
   10368:	d1e6      	bne.n	10338 <d_parmlist+0x1c>
   1036a:	7853      	ldrb	r3, [r2, #1]
   1036c:	2b45      	cmp	r3, #69	; 0x45
   1036e:	d1e5      	bne.n	1033c <d_parmlist+0x20>
   10370:	9801      	ldr	r0, [sp, #4]
   10372:	b118      	cbz	r0, 1037c <d_parmlist+0x60>
   10374:	6883      	ldr	r3, [r0, #8]
   10376:	b123      	cbz	r3, 10382 <d_parmlist+0x66>
   10378:	b003      	add	sp, #12
   1037a:	bd30      	pop	{r4, r5, pc}
   1037c:	2000      	movs	r0, #0
   1037e:	b003      	add	sp, #12
   10380:	bd30      	pop	{r4, r5, pc}
   10382:	6842      	ldr	r2, [r0, #4]
   10384:	7811      	ldrb	r1, [r2, #0]
   10386:	2927      	cmp	r1, #39	; 0x27
   10388:	d1f6      	bne.n	10378 <d_parmlist+0x5c>
   1038a:	6852      	ldr	r2, [r2, #4]
   1038c:	7c11      	ldrb	r1, [r2, #16]
   1038e:	2909      	cmp	r1, #9
   10390:	d1f2      	bne.n	10378 <d_parmlist+0x5c>
   10392:	6851      	ldr	r1, [r2, #4]
   10394:	6b22      	ldr	r2, [r4, #48]	; 0x30
   10396:	1a52      	subs	r2, r2, r1
   10398:	6322      	str	r2, [r4, #48]	; 0x30
   1039a:	6043      	str	r3, [r0, #4]
   1039c:	e7ec      	b.n	10378 <d_parmlist+0x5c>
   1039e:	bf00      	nop

000103a0 <d_unqualified_name>:
   103a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   103a2:	68c1      	ldr	r1, [r0, #12]
   103a4:	780b      	ldrb	r3, [r1, #0]
   103a6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   103aa:	2a09      	cmp	r2, #9
   103ac:	4604      	mov	r4, r0
   103ae:	d920      	bls.n	103f2 <d_unqualified_name+0x52>
   103b0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   103b4:	2a19      	cmp	r2, #25
   103b6:	d925      	bls.n	10404 <d_unqualified_name+0x64>
   103b8:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
   103bc:	2a01      	cmp	r2, #1
   103be:	d92c      	bls.n	1041a <d_unqualified_name+0x7a>
   103c0:	2b4c      	cmp	r3, #76	; 0x4c
   103c2:	f000 8088 	beq.w	104d6 <d_unqualified_name+0x136>
   103c6:	2b55      	cmp	r3, #85	; 0x55
   103c8:	d133      	bne.n	10432 <d_unqualified_name+0x92>
   103ca:	784b      	ldrb	r3, [r1, #1]
   103cc:	2b6c      	cmp	r3, #108	; 0x6c
   103ce:	d033      	beq.n	10438 <d_unqualified_name+0x98>
   103d0:	2b74      	cmp	r3, #116	; 0x74
   103d2:	d12e      	bne.n	10432 <d_unqualified_name+0x92>
   103d4:	1c4b      	adds	r3, r1, #1
   103d6:	60c3      	str	r3, [r0, #12]
   103d8:	784b      	ldrb	r3, [r1, #1]
   103da:	2b74      	cmp	r3, #116	; 0x74
   103dc:	d05a      	beq.n	10494 <d_unqualified_name+0xf4>
   103de:	2b42      	cmp	r3, #66	; 0x42
   103e0:	f04f 0500 	mov.w	r5, #0
   103e4:	d10c      	bne.n	10400 <d_unqualified_name+0x60>
   103e6:	4629      	mov	r1, r5
   103e8:	4620      	mov	r0, r4
   103ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   103ee:	f7fe bacd 	b.w	e98c <d_abi_tags>
   103f2:	f7fe fa6f 	bl	e8d4 <d_source_name>
   103f6:	68e3      	ldr	r3, [r4, #12]
   103f8:	781b      	ldrb	r3, [r3, #0]
   103fa:	4605      	mov	r5, r0
   103fc:	2b42      	cmp	r3, #66	; 0x42
   103fe:	d0f2      	beq.n	103e6 <d_unqualified_name+0x46>
   10400:	4628      	mov	r0, r5
   10402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10404:	f7ff ff0c 	bl	10220 <d_operator_name>
   10408:	4605      	mov	r5, r0
   1040a:	b118      	cbz	r0, 10414 <d_unqualified_name+0x74>
   1040c:	7803      	ldrb	r3, [r0, #0]
   1040e:	2b31      	cmp	r3, #49	; 0x31
   10410:	f000 80b2 	beq.w	10578 <d_unqualified_name+0x1d8>
   10414:	68e3      	ldr	r3, [r4, #12]
   10416:	781b      	ldrb	r3, [r3, #0]
   10418:	e7f0      	b.n	103fc <d_unqualified_name+0x5c>
   1041a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
   1041c:	b125      	cbz	r5, 10428 <d_unqualified_name+0x88>
   1041e:	782a      	ldrb	r2, [r5, #0]
   10420:	2a00      	cmp	r2, #0
   10422:	d06c      	beq.n	104fe <d_unqualified_name+0x15e>
   10424:	2a18      	cmp	r2, #24
   10426:	d06a      	beq.n	104fe <d_unqualified_name+0x15e>
   10428:	2b43      	cmp	r3, #67	; 0x43
   1042a:	f000 80bf 	beq.w	105ac <d_unqualified_name+0x20c>
   1042e:	2b44      	cmp	r3, #68	; 0x44
   10430:	d06f      	beq.n	10512 <d_unqualified_name+0x172>
   10432:	2500      	movs	r5, #0
   10434:	4628      	mov	r0, r5
   10436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10438:	1c4b      	adds	r3, r1, #1
   1043a:	60c3      	str	r3, [r0, #12]
   1043c:	784b      	ldrb	r3, [r1, #1]
   1043e:	2b6c      	cmp	r3, #108	; 0x6c
   10440:	d1cd      	bne.n	103de <d_unqualified_name+0x3e>
   10442:	3102      	adds	r1, #2
   10444:	60c1      	str	r1, [r0, #12]
   10446:	f7ff ff69 	bl	1031c <d_parmlist>
   1044a:	4606      	mov	r6, r0
   1044c:	b1f0      	cbz	r0, 1048c <d_unqualified_name+0xec>
   1044e:	68e2      	ldr	r2, [r4, #12]
   10450:	7813      	ldrb	r3, [r2, #0]
   10452:	2b45      	cmp	r3, #69	; 0x45
   10454:	d1c3      	bne.n	103de <d_unqualified_name+0x3e>
   10456:	3201      	adds	r2, #1
   10458:	60e2      	str	r2, [r4, #12]
   1045a:	4620      	mov	r0, r4
   1045c:	f7fe f9fc 	bl	e858 <d_compact_number>
   10460:	2800      	cmp	r0, #0
   10462:	db13      	blt.n	1048c <d_unqualified_name+0xec>
   10464:	6963      	ldr	r3, [r4, #20]
   10466:	69a2      	ldr	r2, [r4, #24]
   10468:	4293      	cmp	r3, r2
   1046a:	da0f      	bge.n	1048c <d_unqualified_name+0xec>
   1046c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   10470:	6921      	ldr	r1, [r4, #16]
   10472:	0092      	lsls	r2, r2, #2
   10474:	3301      	adds	r3, #1
   10476:	188d      	adds	r5, r1, r2
   10478:	6163      	str	r3, [r4, #20]
   1047a:	d0cb      	beq.n	10414 <d_unqualified_name+0x74>
   1047c:	2345      	movs	r3, #69	; 0x45
   1047e:	548b      	strb	r3, [r1, r2]
   10480:	606e      	str	r6, [r5, #4]
   10482:	60a8      	str	r0, [r5, #8]
   10484:	6a23      	ldr	r3, [r4, #32]
   10486:	6a62      	ldr	r2, [r4, #36]	; 0x24
   10488:	4293      	cmp	r3, r2
   1048a:	db1c      	blt.n	104c6 <d_unqualified_name+0x126>
   1048c:	68e3      	ldr	r3, [r4, #12]
   1048e:	2500      	movs	r5, #0
   10490:	781b      	ldrb	r3, [r3, #0]
   10492:	e7b3      	b.n	103fc <d_unqualified_name+0x5c>
   10494:	3102      	adds	r1, #2
   10496:	60c1      	str	r1, [r0, #12]
   10498:	f7fe f9de 	bl	e858 <d_compact_number>
   1049c:	2800      	cmp	r0, #0
   1049e:	dbf5      	blt.n	1048c <d_unqualified_name+0xec>
   104a0:	6963      	ldr	r3, [r4, #20]
   104a2:	69a2      	ldr	r2, [r4, #24]
   104a4:	4293      	cmp	r3, r2
   104a6:	daf1      	bge.n	1048c <d_unqualified_name+0xec>
   104a8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   104ac:	6921      	ldr	r1, [r4, #16]
   104ae:	0092      	lsls	r2, r2, #2
   104b0:	3301      	adds	r3, #1
   104b2:	188d      	adds	r5, r1, r2
   104b4:	6163      	str	r3, [r4, #20]
   104b6:	d0ad      	beq.n	10414 <d_unqualified_name+0x74>
   104b8:	2347      	movs	r3, #71	; 0x47
   104ba:	548b      	strb	r3, [r1, r2]
   104bc:	6068      	str	r0, [r5, #4]
   104be:	6a23      	ldr	r3, [r4, #32]
   104c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   104c2:	4293      	cmp	r3, r2
   104c4:	dae2      	bge.n	1048c <d_unqualified_name+0xec>
   104c6:	69e1      	ldr	r1, [r4, #28]
   104c8:	68e2      	ldr	r2, [r4, #12]
   104ca:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   104ce:	3301      	adds	r3, #1
   104d0:	6223      	str	r3, [r4, #32]
   104d2:	7813      	ldrb	r3, [r2, #0]
   104d4:	e792      	b.n	103fc <d_unqualified_name+0x5c>
   104d6:	3101      	adds	r1, #1
   104d8:	60c1      	str	r1, [r0, #12]
   104da:	f7fe f9fb 	bl	e8d4 <d_source_name>
   104de:	4605      	mov	r5, r0
   104e0:	2800      	cmp	r0, #0
   104e2:	d0a6      	beq.n	10432 <d_unqualified_name+0x92>
   104e4:	68e2      	ldr	r2, [r4, #12]
   104e6:	7813      	ldrb	r3, [r2, #0]
   104e8:	2b5f      	cmp	r3, #95	; 0x5f
   104ea:	d187      	bne.n	103fc <d_unqualified_name+0x5c>
   104ec:	4620      	mov	r0, r4
   104ee:	3201      	adds	r2, #1
   104f0:	f840 2f0c 	str.w	r2, [r0, #12]!
   104f4:	f7fe f96e 	bl	e7d4 <d_number.isra.0>
   104f8:	2800      	cmp	r0, #0
   104fa:	da8b      	bge.n	10414 <d_unqualified_name+0x74>
   104fc:	e799      	b.n	10432 <d_unqualified_name+0x92>
   104fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10500:	68aa      	ldr	r2, [r5, #8]
   10502:	4413      	add	r3, r2
   10504:	6323      	str	r3, [r4, #48]	; 0x30
   10506:	780b      	ldrb	r3, [r1, #0]
   10508:	2b43      	cmp	r3, #67	; 0x43
   1050a:	d04f      	beq.n	105ac <d_unqualified_name+0x20c>
   1050c:	2b44      	cmp	r3, #68	; 0x44
   1050e:	f47f af66 	bne.w	103de <d_unqualified_name+0x3e>
   10512:	784b      	ldrb	r3, [r1, #1]
   10514:	3b30      	subs	r3, #48	; 0x30
   10516:	2b05      	cmp	r3, #5
   10518:	d88b      	bhi.n	10432 <d_unqualified_name+0x92>
   1051a:	a201      	add	r2, pc, #4	; (adr r2, 10520 <d_unqualified_name+0x180>)
   1051c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10520:	00010575 	.word	0x00010575
   10524:	00010539 	.word	0x00010539
   10528:	00010571 	.word	0x00010571
   1052c:	00010433 	.word	0x00010433
   10530:	0001056d 	.word	0x0001056d
   10534:	00010569 	.word	0x00010569
   10538:	2702      	movs	r7, #2
   1053a:	6963      	ldr	r3, [r4, #20]
   1053c:	69a2      	ldr	r2, [r4, #24]
   1053e:	1c88      	adds	r0, r1, #2
   10540:	4293      	cmp	r3, r2
   10542:	60e0      	str	r0, [r4, #12]
   10544:	da56      	bge.n	105f4 <d_unqualified_name+0x254>
   10546:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1054a:	6920      	ldr	r0, [r4, #16]
   1054c:	0092      	lsls	r2, r2, #2
   1054e:	3301      	adds	r3, #1
   10550:	1886      	adds	r6, r0, r2
   10552:	6163      	str	r3, [r4, #20]
   10554:	d005      	beq.n	10562 <d_unqualified_name+0x1c2>
   10556:	2d00      	cmp	r5, #0
   10558:	d04f      	beq.n	105fa <d_unqualified_name+0x25a>
   1055a:	2308      	movs	r3, #8
   1055c:	5483      	strb	r3, [r0, r2]
   1055e:	7137      	strb	r7, [r6, #4]
   10560:	60b5      	str	r5, [r6, #8]
   10562:	788b      	ldrb	r3, [r1, #2]
   10564:	4635      	mov	r5, r6
   10566:	e749      	b.n	103fc <d_unqualified_name+0x5c>
   10568:	2705      	movs	r7, #5
   1056a:	e7e6      	b.n	1053a <d_unqualified_name+0x19a>
   1056c:	2704      	movs	r7, #4
   1056e:	e7e4      	b.n	1053a <d_unqualified_name+0x19a>
   10570:	2703      	movs	r7, #3
   10572:	e7e2      	b.n	1053a <d_unqualified_name+0x19a>
   10574:	2701      	movs	r7, #1
   10576:	e7e0      	b.n	1053a <d_unqualified_name+0x19a>
   10578:	6842      	ldr	r2, [r0, #4]
   1057a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1057c:	6896      	ldr	r6, [r2, #8]
   1057e:	6810      	ldr	r0, [r2, #0]
   10580:	491f      	ldr	r1, [pc, #124]	; (10600 <d_unqualified_name+0x260>)
   10582:	3307      	adds	r3, #7
   10584:	4433      	add	r3, r6
   10586:	6323      	str	r3, [r4, #48]	; 0x30
   10588:	f008 f9ee 	bl	18968 <strcmp>
   1058c:	2800      	cmp	r0, #0
   1058e:	f47f af41 	bne.w	10414 <d_unqualified_name+0x74>
   10592:	4620      	mov	r0, r4
   10594:	f7fe f99e 	bl	e8d4 <d_source_name>
   10598:	462a      	mov	r2, r5
   1059a:	4603      	mov	r3, r0
   1059c:	2136      	movs	r1, #54	; 0x36
   1059e:	4620      	mov	r0, r4
   105a0:	f7fd ffc8 	bl	e534 <d_make_comp>
   105a4:	68e3      	ldr	r3, [r4, #12]
   105a6:	4605      	mov	r5, r0
   105a8:	781b      	ldrb	r3, [r3, #0]
   105aa:	e727      	b.n	103fc <d_unqualified_name+0x5c>
   105ac:	784b      	ldrb	r3, [r1, #1]
   105ae:	3b31      	subs	r3, #49	; 0x31
   105b0:	2b04      	cmp	r3, #4
   105b2:	f63f af3e 	bhi.w	10432 <d_unqualified_name+0x92>
   105b6:	e8df f003 	tbb	[pc, r3]
   105ba:	0315      	.short	0x0315
   105bc:	191b      	.short	0x191b
   105be:	17          	.byte	0x17
   105bf:	00          	.byte	0x00
   105c0:	2702      	movs	r7, #2
   105c2:	6963      	ldr	r3, [r4, #20]
   105c4:	69a2      	ldr	r2, [r4, #24]
   105c6:	1c88      	adds	r0, r1, #2
   105c8:	4293      	cmp	r3, r2
   105ca:	60e0      	str	r0, [r4, #12]
   105cc:	da12      	bge.n	105f4 <d_unqualified_name+0x254>
   105ce:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   105d2:	6920      	ldr	r0, [r4, #16]
   105d4:	0092      	lsls	r2, r2, #2
   105d6:	3301      	adds	r3, #1
   105d8:	1886      	adds	r6, r0, r2
   105da:	6163      	str	r3, [r4, #20]
   105dc:	d0c1      	beq.n	10562 <d_unqualified_name+0x1c2>
   105de:	b165      	cbz	r5, 105fa <d_unqualified_name+0x25a>
   105e0:	2307      	movs	r3, #7
   105e2:	e7bb      	b.n	1055c <d_unqualified_name+0x1bc>
   105e4:	2701      	movs	r7, #1
   105e6:	e7ec      	b.n	105c2 <d_unqualified_name+0x222>
   105e8:	2705      	movs	r7, #5
   105ea:	e7ea      	b.n	105c2 <d_unqualified_name+0x222>
   105ec:	2704      	movs	r7, #4
   105ee:	e7e8      	b.n	105c2 <d_unqualified_name+0x222>
   105f0:	2703      	movs	r7, #3
   105f2:	e7e6      	b.n	105c2 <d_unqualified_name+0x222>
   105f4:	788b      	ldrb	r3, [r1, #2]
   105f6:	2500      	movs	r5, #0
   105f8:	e700      	b.n	103fc <d_unqualified_name+0x5c>
   105fa:	788b      	ldrb	r3, [r1, #2]
   105fc:	e6fe      	b.n	103fc <d_unqualified_name+0x5c>
   105fe:	bf00      	nop
   10600:	0003db38 	.word	0x0003db38

00010604 <d_bare_function_type>:
   10604:	b570      	push	{r4, r5, r6, lr}
   10606:	68c3      	ldr	r3, [r0, #12]
   10608:	781a      	ldrb	r2, [r3, #0]
   1060a:	2a4a      	cmp	r2, #74	; 0x4a
   1060c:	4604      	mov	r4, r0
   1060e:	d00d      	beq.n	1062c <d_bare_function_type+0x28>
   10610:	b971      	cbnz	r1, 10630 <d_bare_function_type+0x2c>
   10612:	460d      	mov	r5, r1
   10614:	4620      	mov	r0, r4
   10616:	f7ff fe81 	bl	1031c <d_parmlist>
   1061a:	b178      	cbz	r0, 1063c <d_bare_function_type+0x38>
   1061c:	4603      	mov	r3, r0
   1061e:	462a      	mov	r2, r5
   10620:	4620      	mov	r0, r4
   10622:	2129      	movs	r1, #41	; 0x29
   10624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10628:	f7fd bf84 	b.w	e534 <d_make_comp>
   1062c:	3301      	adds	r3, #1
   1062e:	60c3      	str	r3, [r0, #12]
   10630:	4620      	mov	r0, r4
   10632:	f7ff fa0d 	bl	fa50 <d_type>
   10636:	4605      	mov	r5, r0
   10638:	2800      	cmp	r0, #0
   1063a:	d1eb      	bne.n	10614 <d_bare_function_type+0x10>
   1063c:	2000      	movs	r0, #0
   1063e:	bd70      	pop	{r4, r5, r6, pc}

00010640 <d_function_type>:
   10640:	68c3      	ldr	r3, [r0, #12]
   10642:	781a      	ldrb	r2, [r3, #0]
   10644:	2a46      	cmp	r2, #70	; 0x46
   10646:	d001      	beq.n	1064c <d_function_type+0xc>
   10648:	2000      	movs	r0, #0
   1064a:	4770      	bx	lr
   1064c:	b510      	push	{r4, lr}
   1064e:	1c5a      	adds	r2, r3, #1
   10650:	60c2      	str	r2, [r0, #12]
   10652:	785a      	ldrb	r2, [r3, #1]
   10654:	2a59      	cmp	r2, #89	; 0x59
   10656:	bf04      	itt	eq
   10658:	3302      	addeq	r3, #2
   1065a:	60c3      	streq	r3, [r0, #12]
   1065c:	2101      	movs	r1, #1
   1065e:	4604      	mov	r4, r0
   10660:	f7ff ffd0 	bl	10604 <d_bare_function_type>
   10664:	4601      	mov	r1, r0
   10666:	4620      	mov	r0, r4
   10668:	f7fe f816 	bl	e698 <d_ref_qualifier>
   1066c:	68e3      	ldr	r3, [r4, #12]
   1066e:	781a      	ldrb	r2, [r3, #0]
   10670:	2a45      	cmp	r2, #69	; 0x45
   10672:	d001      	beq.n	10678 <d_function_type+0x38>
   10674:	2000      	movs	r0, #0
   10676:	bd10      	pop	{r4, pc}
   10678:	3301      	adds	r3, #1
   1067a:	60e3      	str	r3, [r4, #12]
   1067c:	bd10      	pop	{r4, pc}
   1067e:	bf00      	nop

00010680 <d_encoding>:
   10680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10684:	68c3      	ldr	r3, [r0, #12]
   10686:	781a      	ldrb	r2, [r3, #0]
   10688:	2a47      	cmp	r2, #71	; 0x47
   1068a:	4605      	mov	r5, r0
   1068c:	d01f      	beq.n	106ce <d_encoding+0x4e>
   1068e:	2a54      	cmp	r2, #84	; 0x54
   10690:	d01d      	beq.n	106ce <d_encoding+0x4e>
   10692:	460e      	mov	r6, r1
   10694:	f7ff f820 	bl	f6d8 <d_name>
   10698:	4604      	mov	r4, r0
   1069a:	b310      	cbz	r0, 106e2 <d_encoding+0x62>
   1069c:	b32e      	cbz	r6, 106ea <d_encoding+0x6a>
   1069e:	68ab      	ldr	r3, [r5, #8]
   106a0:	07db      	lsls	r3, r3, #31
   106a2:	d422      	bmi.n	106ea <d_encoding+0x6a>
   106a4:	7823      	ldrb	r3, [r4, #0]
   106a6:	f1a3 021c 	sub.w	r2, r3, #28
   106aa:	2a04      	cmp	r2, #4
   106ac:	d940      	bls.n	10730 <d_encoding+0xb0>
   106ae:	2b4c      	cmp	r3, #76	; 0x4c
   106b0:	d03e      	beq.n	10730 <d_encoding+0xb0>
   106b2:	2b02      	cmp	r3, #2
   106b4:	d116      	bne.n	106e4 <d_encoding+0x64>
   106b6:	68a3      	ldr	r3, [r4, #8]
   106b8:	781a      	ldrb	r2, [r3, #0]
   106ba:	f1a2 011c 	sub.w	r1, r2, #28
   106be:	2904      	cmp	r1, #4
   106c0:	f240 8283 	bls.w	10bca <d_encoding+0x54a>
   106c4:	2a4c      	cmp	r2, #76	; 0x4c
   106c6:	f000 8280 	beq.w	10bca <d_encoding+0x54a>
   106ca:	60a3      	str	r3, [r4, #8]
   106cc:	e00a      	b.n	106e4 <d_encoding+0x64>
   106ce:	6b29      	ldr	r1, [r5, #48]	; 0x30
   106d0:	f101 0214 	add.w	r2, r1, #20
   106d4:	632a      	str	r2, [r5, #48]	; 0x30
   106d6:	781a      	ldrb	r2, [r3, #0]
   106d8:	2a54      	cmp	r2, #84	; 0x54
   106da:	d02b      	beq.n	10734 <d_encoding+0xb4>
   106dc:	2a47      	cmp	r2, #71	; 0x47
   106de:	f000 809f 	beq.w	10820 <d_encoding+0x1a0>
   106e2:	2400      	movs	r4, #0
   106e4:	4620      	mov	r0, r4
   106e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   106ea:	68eb      	ldr	r3, [r5, #12]
   106ec:	781b      	ldrb	r3, [r3, #0]
   106ee:	2b00      	cmp	r3, #0
   106f0:	d0f8      	beq.n	106e4 <d_encoding+0x64>
   106f2:	2b45      	cmp	r3, #69	; 0x45
   106f4:	d0f6      	beq.n	106e4 <d_encoding+0x64>
   106f6:	4621      	mov	r1, r4
   106f8:	780a      	ldrb	r2, [r1, #0]
   106fa:	2a20      	cmp	r2, #32
   106fc:	f200 8113 	bhi.w	10926 <d_encoding+0x2a6>
   10700:	2a1c      	cmp	r2, #28
   10702:	f080 8112 	bcs.w	1092a <d_encoding+0x2aa>
   10706:	2a04      	cmp	r2, #4
   10708:	f040 8101 	bne.w	1090e <d_encoding+0x28e>
   1070c:	684a      	ldr	r2, [r1, #4]
   1070e:	b16a      	cbz	r2, 1072c <d_encoding+0xac>
   10710:	7813      	ldrb	r3, [r2, #0]
   10712:	2b08      	cmp	r3, #8
   10714:	f103 31ff 	add.w	r1, r3, #4294967295
   10718:	f200 80f6 	bhi.w	10908 <d_encoding+0x288>
   1071c:	2b07      	cmp	r3, #7
   1071e:	f080 80f6 	bcs.w	1090e <d_encoding+0x28e>
   10722:	2901      	cmp	r1, #1
   10724:	d802      	bhi.n	1072c <d_encoding+0xac>
   10726:	6892      	ldr	r2, [r2, #8]
   10728:	2a00      	cmp	r2, #0
   1072a:	d1f1      	bne.n	10710 <d_encoding+0x90>
   1072c:	2101      	movs	r1, #1
   1072e:	e0ef      	b.n	10910 <d_encoding+0x290>
   10730:	6864      	ldr	r4, [r4, #4]
   10732:	e7b7      	b.n	106a4 <d_encoding+0x24>
   10734:	1c5a      	adds	r2, r3, #1
   10736:	60ea      	str	r2, [r5, #12]
   10738:	785a      	ldrb	r2, [r3, #1]
   1073a:	2a00      	cmp	r2, #0
   1073c:	d0d1      	beq.n	106e2 <d_encoding+0x62>
   1073e:	1c9a      	adds	r2, r3, #2
   10740:	60ea      	str	r2, [r5, #12]
   10742:	785b      	ldrb	r3, [r3, #1]
   10744:	3b43      	subs	r3, #67	; 0x43
   10746:	2b33      	cmp	r3, #51	; 0x33
   10748:	d8cb      	bhi.n	106e2 <d_encoding+0x62>
   1074a:	a201      	add	r2, pc, #4	; (adr r2, 10750 <d_encoding+0xd0>)
   1074c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10750:	00010b8b 	.word	0x00010b8b
   10754:	000106e3 	.word	0x000106e3
   10758:	000106e3 	.word	0x000106e3
   1075c:	00010b75 	.word	0x00010b75
   10760:	000106e3 	.word	0x000106e3
   10764:	00010b5f 	.word	0x00010b5f
   10768:	00010b49 	.word	0x00010b49
   1076c:	00010b33 	.word	0x00010b33
   10770:	000106e3 	.word	0x000106e3
   10774:	000106e3 	.word	0x000106e3
   10778:	000106e3 	.word	0x000106e3
   1077c:	000106e3 	.word	0x000106e3
   10780:	000106e3 	.word	0x000106e3
   10784:	000106e3 	.word	0x000106e3
   10788:	000106e3 	.word	0x000106e3
   1078c:	000106e3 	.word	0x000106e3
   10790:	00010b1d 	.word	0x00010b1d
   10794:	00010b03 	.word	0x00010b03
   10798:	000106e3 	.word	0x000106e3
   1079c:	00010ae9 	.word	0x00010ae9
   107a0:	00010ad3 	.word	0x00010ad3
   107a4:	000106e3 	.word	0x000106e3
   107a8:	000106e3 	.word	0x000106e3
   107ac:	000106e3 	.word	0x000106e3
   107b0:	000106e3 	.word	0x000106e3
   107b4:	000106e3 	.word	0x000106e3
   107b8:	000106e3 	.word	0x000106e3
   107bc:	000106e3 	.word	0x000106e3
   107c0:	000106e3 	.word	0x000106e3
   107c4:	000106e3 	.word	0x000106e3
   107c8:	000106e3 	.word	0x000106e3
   107cc:	000106e3 	.word	0x000106e3
   107d0:	00010a9f 	.word	0x00010a9f
   107d4:	000106e3 	.word	0x000106e3
   107d8:	000106e3 	.word	0x000106e3
   107dc:	000106e3 	.word	0x000106e3
   107e0:	000106e3 	.word	0x000106e3
   107e4:	00010a79 	.word	0x00010a79
   107e8:	000106e3 	.word	0x000106e3
   107ec:	000106e3 	.word	0x000106e3
   107f0:	000106e3 	.word	0x000106e3
   107f4:	000106e3 	.word	0x000106e3
   107f8:	000106e3 	.word	0x000106e3
   107fc:	000106e3 	.word	0x000106e3
   10800:	000106e3 	.word	0x000106e3
   10804:	000106e3 	.word	0x000106e3
   10808:	000106e3 	.word	0x000106e3
   1080c:	000106e3 	.word	0x000106e3
   10810:	000106e3 	.word	0x000106e3
   10814:	000106e3 	.word	0x000106e3
   10818:	000106e3 	.word	0x000106e3
   1081c:	00010a53 	.word	0x00010a53
   10820:	1c5a      	adds	r2, r3, #1
   10822:	60ea      	str	r2, [r5, #12]
   10824:	785a      	ldrb	r2, [r3, #1]
   10826:	2a00      	cmp	r2, #0
   10828:	f43f af5b 	beq.w	106e2 <d_encoding+0x62>
   1082c:	1c9a      	adds	r2, r3, #2
   1082e:	60ea      	str	r2, [r5, #12]
   10830:	785a      	ldrb	r2, [r3, #1]
   10832:	3a41      	subs	r2, #65	; 0x41
   10834:	2a31      	cmp	r2, #49	; 0x31
   10836:	f63f af54 	bhi.w	106e2 <d_encoding+0x62>
   1083a:	a101      	add	r1, pc, #4	; (adr r1, 10840 <d_encoding+0x1c0>)
   1083c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   10840:	00010935 	.word	0x00010935
   10844:	000106e3 	.word	0x000106e3
   10848:	000106e3 	.word	0x000106e3
   1084c:	000106e3 	.word	0x000106e3
   10850:	000106e3 	.word	0x000106e3
   10854:	000106e3 	.word	0x000106e3
   10858:	000106e3 	.word	0x000106e3
   1085c:	000106e3 	.word	0x000106e3
   10860:	000106e3 	.word	0x000106e3
   10864:	000106e3 	.word	0x000106e3
   10868:	000106e3 	.word	0x000106e3
   1086c:	000106e3 	.word	0x000106e3
   10870:	000106e3 	.word	0x000106e3
   10874:	000106e3 	.word	0x000106e3
   10878:	000106e3 	.word	0x000106e3
   1087c:	000106e3 	.word	0x000106e3
   10880:	000106e3 	.word	0x000106e3
   10884:	00010a35 	.word	0x00010a35
   10888:	000106e3 	.word	0x000106e3
   1088c:	00010a09 	.word	0x00010a09
   10890:	000106e3 	.word	0x000106e3
   10894:	000109f3 	.word	0x000109f3
   10898:	000106e3 	.word	0x000106e3
   1089c:	000106e3 	.word	0x000106e3
   108a0:	000106e3 	.word	0x000106e3
   108a4:	000106e3 	.word	0x000106e3
   108a8:	000106e3 	.word	0x000106e3
   108ac:	000106e3 	.word	0x000106e3
   108b0:	000106e3 	.word	0x000106e3
   108b4:	000106e3 	.word	0x000106e3
   108b8:	000106e3 	.word	0x000106e3
   108bc:	000106e3 	.word	0x000106e3
   108c0:	000106e3 	.word	0x000106e3
   108c4:	000106e3 	.word	0x000106e3
   108c8:	000106e3 	.word	0x000106e3
   108cc:	000106e3 	.word	0x000106e3
   108d0:	000106e3 	.word	0x000106e3
   108d4:	000106e3 	.word	0x000106e3
   108d8:	000106e3 	.word	0x000106e3
   108dc:	000106e3 	.word	0x000106e3
   108e0:	000106e3 	.word	0x000106e3
   108e4:	000106e3 	.word	0x000106e3
   108e8:	000106e3 	.word	0x000106e3
   108ec:	000106e3 	.word	0x000106e3
   108f0:	000106e3 	.word	0x000106e3
   108f4:	000106e3 	.word	0x000106e3
   108f8:	000106e3 	.word	0x000106e3
   108fc:	000106e3 	.word	0x000106e3
   10900:	000106e3 	.word	0x000106e3
   10904:	0001094d 	.word	0x0001094d
   10908:	2b34      	cmp	r3, #52	; 0x34
   1090a:	f47f af0f 	bne.w	1072c <d_encoding+0xac>
   1090e:	2100      	movs	r1, #0
   10910:	4628      	mov	r0, r5
   10912:	f7ff fe77 	bl	10604 <d_bare_function_type>
   10916:	4622      	mov	r2, r4
   10918:	4603      	mov	r3, r0
   1091a:	2103      	movs	r1, #3
   1091c:	4628      	mov	r0, r5
   1091e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10922:	f7fd be07 	b.w	e534 <d_make_comp>
   10926:	2a4c      	cmp	r2, #76	; 0x4c
   10928:	d1f1      	bne.n	1090e <d_encoding+0x28e>
   1092a:	6849      	ldr	r1, [r1, #4]
   1092c:	2900      	cmp	r1, #0
   1092e:	f47f aee3 	bne.w	106f8 <d_encoding+0x78>
   10932:	e7ed      	b.n	10910 <d_encoding+0x290>
   10934:	2100      	movs	r1, #0
   10936:	4628      	mov	r0, r5
   10938:	f7ff fea2 	bl	10680 <d_encoding>
   1093c:	2300      	movs	r3, #0
   1093e:	4602      	mov	r2, r0
   10940:	2117      	movs	r1, #23
   10942:	4628      	mov	r0, r5
   10944:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10948:	f7fd bdf4 	b.w	e534 <d_make_comp>
   1094c:	f105 000c 	add.w	r0, r5, #12
   10950:	f7fd ff40 	bl	e7d4 <d_number.isra.0>
   10954:	2801      	cmp	r0, #1
   10956:	f77f aec4 	ble.w	106e2 <d_encoding+0x62>
   1095a:	68eb      	ldr	r3, [r5, #12]
   1095c:	781a      	ldrb	r2, [r3, #0]
   1095e:	2a00      	cmp	r2, #0
   10960:	f43f aebf 	beq.w	106e2 <d_encoding+0x62>
   10964:	1c5f      	adds	r7, r3, #1
   10966:	60ef      	str	r7, [r5, #12]
   10968:	781b      	ldrb	r3, [r3, #0]
   1096a:	2b5f      	cmp	r3, #95	; 0x5f
   1096c:	f47f aeb9 	bne.w	106e2 <d_encoding+0x62>
   10970:	2200      	movs	r2, #0
   10972:	1e46      	subs	r6, r0, #1
   10974:	4690      	mov	r8, r2
   10976:	f04f 0940 	mov.w	r9, #64	; 0x40
   1097a:	783b      	ldrb	r3, [r7, #0]
   1097c:	2b00      	cmp	r3, #0
   1097e:	f43f aeb0 	beq.w	106e2 <d_encoding+0x62>
   10982:	2b24      	cmp	r3, #36	; 0x24
   10984:	f000 8128 	beq.w	10bd8 <d_encoding+0x558>
   10988:	463c      	mov	r4, r7
   1098a:	2100      	movs	r1, #0
   1098c:	e004      	b.n	10998 <d_encoding+0x318>
   1098e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   10992:	b123      	cbz	r3, 1099e <d_encoding+0x31e>
   10994:	2b24      	cmp	r3, #36	; 0x24
   10996:	d002      	beq.n	1099e <d_encoding+0x31e>
   10998:	3101      	adds	r1, #1
   1099a:	42b1      	cmp	r1, r6
   1099c:	dbf7      	blt.n	1098e <d_encoding+0x30e>
   1099e:	696c      	ldr	r4, [r5, #20]
   109a0:	69a8      	ldr	r0, [r5, #24]
   109a2:	4284      	cmp	r4, r0
   109a4:	f280 8113 	bge.w	10bce <d_encoding+0x54e>
   109a8:	6928      	ldr	r0, [r5, #16]
   109aa:	1c63      	adds	r3, r4, #1
   109ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   109b0:	616b      	str	r3, [r5, #20]
   109b2:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
   109b6:	f000 810a 	beq.w	10bce <d_encoding+0x54e>
   109ba:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
   109be:	605f      	str	r7, [r3, #4]
   109c0:	6099      	str	r1, [r3, #8]
   109c2:	68ef      	ldr	r7, [r5, #12]
   109c4:	440f      	add	r7, r1
   109c6:	1a76      	subs	r6, r6, r1
   109c8:	60ef      	str	r7, [r5, #12]
   109ca:	2a00      	cmp	r2, #0
   109cc:	f000 8121 	beq.w	10c12 <d_encoding+0x592>
   109d0:	213f      	movs	r1, #63	; 0x3f
   109d2:	4628      	mov	r0, r5
   109d4:	f7fd fdae 	bl	e534 <d_make_comp>
   109d8:	4602      	mov	r2, r0
   109da:	2800      	cmp	r0, #0
   109dc:	f43f ae81 	beq.w	106e2 <d_encoding+0x62>
   109e0:	2e00      	cmp	r6, #0
   109e2:	dcca      	bgt.n	1097a <d_encoding+0x2fa>
   109e4:	4628      	mov	r0, r5
   109e6:	2300      	movs	r3, #0
   109e8:	213e      	movs	r1, #62	; 0x3e
   109ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   109ee:	f7fd bda1 	b.w	e534 <d_make_comp>
   109f2:	4628      	mov	r0, r5
   109f4:	f7fe fe70 	bl	f6d8 <d_name>
   109f8:	2300      	movs	r3, #0
   109fa:	4602      	mov	r2, r0
   109fc:	2113      	movs	r1, #19
   109fe:	4628      	mov	r0, r5
   10a00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10a04:	f7fd bd96 	b.w	e534 <d_make_comp>
   10a08:	789a      	ldrb	r2, [r3, #2]
   10a0a:	2100      	movs	r1, #0
   10a0c:	4628      	mov	r0, r5
   10a0e:	2a00      	cmp	r2, #0
   10a10:	f000 8101 	beq.w	10c16 <d_encoding+0x596>
   10a14:	1cda      	adds	r2, r3, #3
   10a16:	60ea      	str	r2, [r5, #12]
   10a18:	789b      	ldrb	r3, [r3, #2]
   10a1a:	2b6e      	cmp	r3, #110	; 0x6e
   10a1c:	f040 80fb 	bne.w	10c16 <d_encoding+0x596>
   10a20:	f7ff fe2e 	bl	10680 <d_encoding>
   10a24:	2300      	movs	r3, #0
   10a26:	4602      	mov	r2, r0
   10a28:	2149      	movs	r1, #73	; 0x49
   10a2a:	4628      	mov	r0, r5
   10a2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10a30:	f7fd bd80 	b.w	e534 <d_make_comp>
   10a34:	4628      	mov	r0, r5
   10a36:	f7fe fe4f 	bl	f6d8 <d_name>
   10a3a:	4604      	mov	r4, r0
   10a3c:	4628      	mov	r0, r5
   10a3e:	f7fd fef3 	bl	e828 <d_number_component>
   10a42:	4622      	mov	r2, r4
   10a44:	4603      	mov	r3, r0
   10a46:	2116      	movs	r1, #22
   10a48:	4628      	mov	r0, r5
   10a4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10a4e:	f7fd bd71 	b.w	e534 <d_make_comp>
   10a52:	2176      	movs	r1, #118	; 0x76
   10a54:	4628      	mov	r0, r5
   10a56:	f7fe f871 	bl	eb3c <d_call_offset>
   10a5a:	2800      	cmp	r0, #0
   10a5c:	f43f ae41 	beq.w	106e2 <d_encoding+0x62>
   10a60:	2100      	movs	r1, #0
   10a62:	4628      	mov	r0, r5
   10a64:	f7ff fe0c 	bl	10680 <d_encoding>
   10a68:	2300      	movs	r3, #0
   10a6a:	4602      	mov	r2, r0
   10a6c:	2110      	movs	r1, #16
   10a6e:	4628      	mov	r0, r5
   10a70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10a74:	f7fd bd5e 	b.w	e534 <d_make_comp>
   10a78:	2168      	movs	r1, #104	; 0x68
   10a7a:	4628      	mov	r0, r5
   10a7c:	f7fe f85e 	bl	eb3c <d_call_offset>
   10a80:	2800      	cmp	r0, #0
   10a82:	f43f ae2e 	beq.w	106e2 <d_encoding+0x62>
   10a86:	2100      	movs	r1, #0
   10a88:	4628      	mov	r0, r5
   10a8a:	f7ff fdf9 	bl	10680 <d_encoding>
   10a8e:	2300      	movs	r3, #0
   10a90:	4602      	mov	r2, r0
   10a92:	210f      	movs	r1, #15
   10a94:	4628      	mov	r0, r5
   10a96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10a9a:	f7fd bd4b 	b.w	e534 <d_make_comp>
   10a9e:	2100      	movs	r1, #0
   10aa0:	4628      	mov	r0, r5
   10aa2:	f7fe f84b 	bl	eb3c <d_call_offset>
   10aa6:	2800      	cmp	r0, #0
   10aa8:	f43f ae1b 	beq.w	106e2 <d_encoding+0x62>
   10aac:	2100      	movs	r1, #0
   10aae:	4628      	mov	r0, r5
   10ab0:	f7fe f844 	bl	eb3c <d_call_offset>
   10ab4:	2800      	cmp	r0, #0
   10ab6:	f43f ae14 	beq.w	106e2 <d_encoding+0x62>
   10aba:	2100      	movs	r1, #0
   10abc:	4628      	mov	r0, r5
   10abe:	f7ff fddf 	bl	10680 <d_encoding>
   10ac2:	2300      	movs	r3, #0
   10ac4:	4602      	mov	r2, r0
   10ac6:	2111      	movs	r1, #17
   10ac8:	4628      	mov	r0, r5
   10aca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10ace:	f7fd bd31 	b.w	e534 <d_make_comp>
   10ad2:	4628      	mov	r0, r5
   10ad4:	f7fe fe00 	bl	f6d8 <d_name>
   10ad8:	2300      	movs	r3, #0
   10ada:	4602      	mov	r2, r0
   10adc:	2115      	movs	r1, #21
   10ade:	4628      	mov	r0, r5
   10ae0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10ae4:	f7fd bd26 	b.w	e534 <d_make_comp>
   10ae8:	310f      	adds	r1, #15
   10aea:	6329      	str	r1, [r5, #48]	; 0x30
   10aec:	4628      	mov	r0, r5
   10aee:	f7fe ffaf 	bl	fa50 <d_type>
   10af2:	2300      	movs	r3, #0
   10af4:	4602      	mov	r2, r0
   10af6:	2109      	movs	r1, #9
   10af8:	4628      	mov	r0, r5
   10afa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10afe:	f7fd bd19 	b.w	e534 <d_make_comp>
   10b02:	310a      	adds	r1, #10
   10b04:	6329      	str	r1, [r5, #48]	; 0x30
   10b06:	4628      	mov	r0, r5
   10b08:	f7fe ffa2 	bl	fa50 <d_type>
   10b0c:	2300      	movs	r3, #0
   10b0e:	4602      	mov	r2, r0
   10b10:	210a      	movs	r1, #10
   10b12:	4628      	mov	r0, r5
   10b14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b18:	f7fd bd0c 	b.w	e534 <d_make_comp>
   10b1c:	4628      	mov	r0, r5
   10b1e:	f7fe ff97 	bl	fa50 <d_type>
   10b22:	2300      	movs	r3, #0
   10b24:	4602      	mov	r2, r0
   10b26:	210d      	movs	r1, #13
   10b28:	4628      	mov	r0, r5
   10b2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b2e:	f7fd bd01 	b.w	e534 <d_make_comp>
   10b32:	4628      	mov	r0, r5
   10b34:	f7fe ff8c 	bl	fa50 <d_type>
   10b38:	2300      	movs	r3, #0
   10b3a:	4602      	mov	r2, r0
   10b3c:	2112      	movs	r1, #18
   10b3e:	4628      	mov	r0, r5
   10b40:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b44:	f7fd bcf6 	b.w	e534 <d_make_comp>
   10b48:	4628      	mov	r0, r5
   10b4a:	f7fe ff81 	bl	fa50 <d_type>
   10b4e:	2300      	movs	r3, #0
   10b50:	4602      	mov	r2, r0
   10b52:	210c      	movs	r1, #12
   10b54:	4628      	mov	r0, r5
   10b56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b5a:	f7fd bceb 	b.w	e534 <d_make_comp>
   10b5e:	4628      	mov	r0, r5
   10b60:	f7fe fdba 	bl	f6d8 <d_name>
   10b64:	2300      	movs	r3, #0
   10b66:	4602      	mov	r2, r0
   10b68:	2114      	movs	r1, #20
   10b6a:	4628      	mov	r0, r5
   10b6c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b70:	f7fd bce0 	b.w	e534 <d_make_comp>
   10b74:	4628      	mov	r0, r5
   10b76:	f7fe ff6b 	bl	fa50 <d_type>
   10b7a:	2300      	movs	r3, #0
   10b7c:	4602      	mov	r2, r0
   10b7e:	210e      	movs	r1, #14
   10b80:	4628      	mov	r0, r5
   10b82:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b86:	f7fd bcd5 	b.w	e534 <d_make_comp>
   10b8a:	4628      	mov	r0, r5
   10b8c:	f7fe ff60 	bl	fa50 <d_type>
   10b90:	4604      	mov	r4, r0
   10b92:	f105 000c 	add.w	r0, r5, #12
   10b96:	f7fd fe1d 	bl	e7d4 <d_number.isra.0>
   10b9a:	2800      	cmp	r0, #0
   10b9c:	f6ff ada1 	blt.w	106e2 <d_encoding+0x62>
   10ba0:	68eb      	ldr	r3, [r5, #12]
   10ba2:	781a      	ldrb	r2, [r3, #0]
   10ba4:	2a5f      	cmp	r2, #95	; 0x5f
   10ba6:	f47f ad9c 	bne.w	106e2 <d_encoding+0x62>
   10baa:	3301      	adds	r3, #1
   10bac:	60eb      	str	r3, [r5, #12]
   10bae:	4628      	mov	r0, r5
   10bb0:	f7fe ff4e 	bl	fa50 <d_type>
   10bb4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   10bb6:	1d59      	adds	r1, r3, #5
   10bb8:	6329      	str	r1, [r5, #48]	; 0x30
   10bba:	4602      	mov	r2, r0
   10bbc:	4623      	mov	r3, r4
   10bbe:	4628      	mov	r0, r5
   10bc0:	210b      	movs	r1, #11
   10bc2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10bc6:	f7fd bcb5 	b.w	e534 <d_make_comp>
   10bca:	685b      	ldr	r3, [r3, #4]
   10bcc:	e574      	b.n	106b8 <d_encoding+0x38>
   10bce:	68eb      	ldr	r3, [r5, #12]
   10bd0:	440b      	add	r3, r1
   10bd2:	60eb      	str	r3, [r5, #12]
   10bd4:	2400      	movs	r4, #0
   10bd6:	e585      	b.n	106e4 <d_encoding+0x64>
   10bd8:	787b      	ldrb	r3, [r7, #1]
   10bda:	2b53      	cmp	r3, #83	; 0x53
   10bdc:	d027      	beq.n	10c2e <d_encoding+0x5ae>
   10bde:	2b5f      	cmp	r3, #95	; 0x5f
   10be0:	d023      	beq.n	10c2a <d_encoding+0x5aa>
   10be2:	2b24      	cmp	r3, #36	; 0x24
   10be4:	f47f ad7d 	bne.w	106e2 <d_encoding+0x62>
   10be8:	4618      	mov	r0, r3
   10bea:	6969      	ldr	r1, [r5, #20]
   10bec:	69ab      	ldr	r3, [r5, #24]
   10bee:	4299      	cmp	r1, r3
   10bf0:	da1f      	bge.n	10c32 <d_encoding+0x5b2>
   10bf2:	692c      	ldr	r4, [r5, #16]
   10bf4:	1c4f      	adds	r7, r1, #1
   10bf6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   10bfa:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
   10bfe:	616f      	str	r7, [r5, #20]
   10c00:	d017      	beq.n	10c32 <d_encoding+0x5b2>
   10c02:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
   10c06:	6058      	str	r0, [r3, #4]
   10c08:	68ef      	ldr	r7, [r5, #12]
   10c0a:	3702      	adds	r7, #2
   10c0c:	3e02      	subs	r6, #2
   10c0e:	60ef      	str	r7, [r5, #12]
   10c10:	e6db      	b.n	109ca <d_encoding+0x34a>
   10c12:	461a      	mov	r2, r3
   10c14:	e6e4      	b.n	109e0 <d_encoding+0x360>
   10c16:	f7ff fd33 	bl	10680 <d_encoding>
   10c1a:	2300      	movs	r3, #0
   10c1c:	4602      	mov	r2, r0
   10c1e:	2148      	movs	r1, #72	; 0x48
   10c20:	4628      	mov	r0, r5
   10c22:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10c26:	f7fd bc85 	b.w	e534 <d_make_comp>
   10c2a:	202e      	movs	r0, #46	; 0x2e
   10c2c:	e7dd      	b.n	10bea <d_encoding+0x56a>
   10c2e:	202f      	movs	r0, #47	; 0x2f
   10c30:	e7db      	b.n	10bea <d_encoding+0x56a>
   10c32:	68eb      	ldr	r3, [r5, #12]
   10c34:	3302      	adds	r3, #2
   10c36:	60eb      	str	r3, [r5, #12]
   10c38:	2400      	movs	r4, #0
   10c3a:	e553      	b.n	106e4 <d_encoding+0x64>

00010c3c <d_expr_primary>:
   10c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c3e:	68c2      	ldr	r2, [r0, #12]
   10c40:	7813      	ldrb	r3, [r2, #0]
   10c42:	2b4c      	cmp	r3, #76	; 0x4c
   10c44:	d001      	beq.n	10c4a <d_expr_primary+0xe>
   10c46:	2000      	movs	r0, #0
   10c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10c4a:	1c53      	adds	r3, r2, #1
   10c4c:	60c3      	str	r3, [r0, #12]
   10c4e:	7851      	ldrb	r1, [r2, #1]
   10c50:	295f      	cmp	r1, #95	; 0x5f
   10c52:	4605      	mov	r5, r0
   10c54:	d03a      	beq.n	10ccc <d_expr_primary+0x90>
   10c56:	295a      	cmp	r1, #90	; 0x5a
   10c58:	d03f      	beq.n	10cda <d_expr_primary+0x9e>
   10c5a:	f7fe fef9 	bl	fa50 <d_type>
   10c5e:	2800      	cmp	r0, #0
   10c60:	d0f1      	beq.n	10c46 <d_expr_primary+0xa>
   10c62:	7803      	ldrb	r3, [r0, #0]
   10c64:	2b27      	cmp	r3, #39	; 0x27
   10c66:	d046      	beq.n	10cf6 <d_expr_primary+0xba>
   10c68:	68ee      	ldr	r6, [r5, #12]
   10c6a:	7833      	ldrb	r3, [r6, #0]
   10c6c:	2b6e      	cmp	r3, #110	; 0x6e
   10c6e:	d04b      	beq.n	10d08 <d_expr_primary+0xcc>
   10c70:	213c      	movs	r1, #60	; 0x3c
   10c72:	2b45      	cmp	r3, #69	; 0x45
   10c74:	d04e      	beq.n	10d14 <d_expr_primary+0xd8>
   10c76:	2b00      	cmp	r3, #0
   10c78:	d0e5      	beq.n	10c46 <d_expr_primary+0xa>
   10c7a:	4633      	mov	r3, r6
   10c7c:	e001      	b.n	10c82 <d_expr_primary+0x46>
   10c7e:	2c00      	cmp	r4, #0
   10c80:	d0e1      	beq.n	10c46 <d_expr_primary+0xa>
   10c82:	3301      	adds	r3, #1
   10c84:	60eb      	str	r3, [r5, #12]
   10c86:	781c      	ldrb	r4, [r3, #0]
   10c88:	2c45      	cmp	r4, #69	; 0x45
   10c8a:	d1f8      	bne.n	10c7e <d_expr_primary+0x42>
   10c8c:	1b9c      	subs	r4, r3, r6
   10c8e:	696b      	ldr	r3, [r5, #20]
   10c90:	69aa      	ldr	r2, [r5, #24]
   10c92:	4293      	cmp	r3, r2
   10c94:	da2d      	bge.n	10cf2 <d_expr_primary+0xb6>
   10c96:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   10c9a:	692f      	ldr	r7, [r5, #16]
   10c9c:	3301      	adds	r3, #1
   10c9e:	0092      	lsls	r2, r2, #2
   10ca0:	616b      	str	r3, [r5, #20]
   10ca2:	18bb      	adds	r3, r7, r2
   10ca4:	d025      	beq.n	10cf2 <d_expr_primary+0xb6>
   10ca6:	b326      	cbz	r6, 10cf2 <d_expr_primary+0xb6>
   10ca8:	b31c      	cbz	r4, 10cf2 <d_expr_primary+0xb6>
   10caa:	f04f 0e00 	mov.w	lr, #0
   10cae:	f807 e002 	strb.w	lr, [r7, r2]
   10cb2:	605e      	str	r6, [r3, #4]
   10cb4:	609c      	str	r4, [r3, #8]
   10cb6:	4602      	mov	r2, r0
   10cb8:	4628      	mov	r0, r5
   10cba:	f7fd fc3b 	bl	e534 <d_make_comp>
   10cbe:	68eb      	ldr	r3, [r5, #12]
   10cc0:	781a      	ldrb	r2, [r3, #0]
   10cc2:	2a45      	cmp	r2, #69	; 0x45
   10cc4:	d1bf      	bne.n	10c46 <d_expr_primary+0xa>
   10cc6:	3301      	adds	r3, #1
   10cc8:	60eb      	str	r3, [r5, #12]
   10cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10ccc:	1c93      	adds	r3, r2, #2
   10cce:	60c3      	str	r3, [r0, #12]
   10cd0:	7892      	ldrb	r2, [r2, #2]
   10cd2:	2a5a      	cmp	r2, #90	; 0x5a
   10cd4:	bf18      	it	ne
   10cd6:	2000      	movne	r0, #0
   10cd8:	d107      	bne.n	10cea <d_expr_primary+0xae>
   10cda:	3301      	adds	r3, #1
   10cdc:	60eb      	str	r3, [r5, #12]
   10cde:	2100      	movs	r1, #0
   10ce0:	4628      	mov	r0, r5
   10ce2:	f7ff fccd 	bl	10680 <d_encoding>
   10ce6:	68eb      	ldr	r3, [r5, #12]
   10ce8:	781a      	ldrb	r2, [r3, #0]
   10cea:	2a45      	cmp	r2, #69	; 0x45
   10cec:	d0eb      	beq.n	10cc6 <d_expr_primary+0x8a>
   10cee:	2000      	movs	r0, #0
   10cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10cf2:	2300      	movs	r3, #0
   10cf4:	e7df      	b.n	10cb6 <d_expr_primary+0x7a>
   10cf6:	6843      	ldr	r3, [r0, #4]
   10cf8:	7c1a      	ldrb	r2, [r3, #16]
   10cfa:	2a00      	cmp	r2, #0
   10cfc:	d0b4      	beq.n	10c68 <d_expr_primary+0x2c>
   10cfe:	685a      	ldr	r2, [r3, #4]
   10d00:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   10d02:	1a9b      	subs	r3, r3, r2
   10d04:	632b      	str	r3, [r5, #48]	; 0x30
   10d06:	e7af      	b.n	10c68 <d_expr_primary+0x2c>
   10d08:	1c72      	adds	r2, r6, #1
   10d0a:	60ea      	str	r2, [r5, #12]
   10d0c:	7873      	ldrb	r3, [r6, #1]
   10d0e:	213d      	movs	r1, #61	; 0x3d
   10d10:	4616      	mov	r6, r2
   10d12:	e7ae      	b.n	10c72 <d_expr_primary+0x36>
   10d14:	2400      	movs	r4, #0
   10d16:	e7ba      	b.n	10c8e <d_expr_primary+0x52>

00010d18 <d_print_comp_inner>:
   10d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d1c:	4604      	mov	r4, r0
   10d1e:	b095      	sub	sp, #84	; 0x54
   10d20:	2a00      	cmp	r2, #0
   10d22:	f000 80db 	beq.w	10edc <d_print_comp_inner+0x1c4>
   10d26:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
   10d2a:	2f00      	cmp	r7, #0
   10d2c:	f040 80c2 	bne.w	10eb4 <d_print_comp_inner+0x19c>
   10d30:	7813      	ldrb	r3, [r2, #0]
   10d32:	4688      	mov	r8, r1
   10d34:	4615      	mov	r5, r2
   10d36:	2b4d      	cmp	r3, #77	; 0x4d
   10d38:	f201 81e6 	bhi.w	12108 <d_print_comp_inner+0x13f0>
   10d3c:	e8df f013 	tbh	[pc, r3, lsl #1]
   10d40:	043c045a 	.word	0x043c045a
   10d44:	03a4043c 	.word	0x03a4043c
   10d48:	048904a5 	.word	0x048904a5
   10d4c:	038e04ea 	.word	0x038e04ea
   10d50:	0330037c 	.word	0x0330037c
   10d54:	030a0356 	.word	0x030a0356
   10d58:	029802e4 	.word	0x029802e4
   10d5c:	027202be 	.word	0x027202be
   10d60:	01f0024c 	.word	0x01f0024c
   10d64:	01ca0226 	.word	0x01ca0226
   10d68:	015801a4 	.word	0x015801a4
   10d6c:	0132017e 	.word	0x0132017e
   10d70:	00f2010b 	.word	0x00f2010b
   10d74:	00f200f2 	.word	0x00f200f2
   10d78:	00d400d4 	.word	0x00d400d4
   10d7c:	00d400d4 	.word	0x00d400d4
   10d80:	00d400d4 	.word	0x00d400d4
   10d84:	06d500d4 	.word	0x06d500d4
   10d88:	00d406d5 	.word	0x00d406d5
   10d8c:	06a900d4 	.word	0x06a900d4
   10d90:	069306fc 	.word	0x069306fc
   10d94:	0701071d 	.word	0x0701071d
   10d98:	07010788 	.word	0x07010788
   10d9c:	057b057b 	.word	0x057b057b
   10da0:	06060630 	.word	0x06060630
   10da4:	09e405e0 	.word	0x09e405e0
   10da8:	068e05ad 	.word	0x068e05ad
   10dac:	004e0654 	.word	0x004e0654
   10db0:	094c0485 	.word	0x094c0485
   10db4:	08df08df 	.word	0x08df08df
   10db8:	08ae08ae 	.word	0x08ae08ae
   10dbc:	05480888 	.word	0x05480888
   10dc0:	08e4053a 	.word	0x08e4053a
   10dc4:	09be0514 	.word	0x09be0514
   10dc8:	09980914 	.word	0x09980914
   10dcc:	07cb09e4 	.word	0x07cb09e4
   10dd0:	07f10862 	.word	0x07f10862
   10dd4:	04130817 	.word	0x04130817
   10dd8:	055200d4 	.word	0x055200d4
   10ddc:	68ab      	ldr	r3, [r5, #8]
   10dde:	781b      	ldrb	r3, [r3, #0]
   10de0:	2b38      	cmp	r3, #56	; 0x38
   10de2:	d17b      	bne.n	10edc <d_print_comp_inner+0x1c4>
   10de4:	686a      	ldr	r2, [r5, #4]
   10de6:	6853      	ldr	r3, [r2, #4]
   10de8:	681b      	ldr	r3, [r3, #0]
   10dea:	7859      	ldrb	r1, [r3, #1]
   10dec:	2963      	cmp	r1, #99	; 0x63
   10dee:	f002 814a 	beq.w	13086 <d_print_comp_inner+0x236e>
   10df2:	f105 0308 	add.w	r3, r5, #8
   10df6:	4641      	mov	r1, r8
   10df8:	4620      	mov	r0, r4
   10dfa:	f003 fbbb 	bl	14574 <d_maybe_print_fold_expression.isra.15>
   10dfe:	4606      	mov	r6, r0
   10e00:	2800      	cmp	r0, #0
   10e02:	d157      	bne.n	10eb4 <d_print_comp_inner+0x19c>
   10e04:	686b      	ldr	r3, [r5, #4]
   10e06:	781a      	ldrb	r2, [r3, #0]
   10e08:	2a31      	cmp	r2, #49	; 0x31
   10e0a:	f002 836b 	beq.w	134e4 <d_print_comp_inner+0x27cc>
   10e0e:	685b      	ldr	r3, [r3, #4]
   10e10:	49c7      	ldr	r1, [pc, #796]	; (11130 <d_print_comp_inner+0x418>)
   10e12:	6818      	ldr	r0, [r3, #0]
   10e14:	f007 fda8 	bl	18968 <strcmp>
   10e18:	68ab      	ldr	r3, [r5, #8]
   10e1a:	b920      	cbnz	r0, 10e26 <d_print_comp_inner+0x10e>
   10e1c:	685a      	ldr	r2, [r3, #4]
   10e1e:	7811      	ldrb	r1, [r2, #0]
   10e20:	2903      	cmp	r1, #3
   10e22:	f002 83a5 	beq.w	13570 <d_print_comp_inner+0x2858>
   10e26:	685a      	ldr	r2, [r3, #4]
   10e28:	4641      	mov	r1, r8
   10e2a:	4620      	mov	r0, r4
   10e2c:	f003 fb3e 	bl	144ac <d_print_subexpr>
   10e30:	686f      	ldr	r7, [r5, #4]
   10e32:	49c0      	ldr	r1, [pc, #768]	; (11134 <d_print_comp_inner+0x41c>)
   10e34:	687b      	ldr	r3, [r7, #4]
   10e36:	f8d3 9000 	ldr.w	r9, [r3]
   10e3a:	4648      	mov	r0, r9
   10e3c:	f007 fd94 	bl	18968 <strcmp>
   10e40:	4606      	mov	r6, r0
   10e42:	2800      	cmp	r0, #0
   10e44:	f042 826f 	bne.w	13326 <d_print_comp_inner+0x260e>
   10e48:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10e4c:	29ff      	cmp	r1, #255	; 0xff
   10e4e:	f002 844a 	beq.w	136e6 <d_print_comp_inner+0x29ce>
   10e52:	1c4a      	adds	r2, r1, #1
   10e54:	235b      	movs	r3, #91	; 0x5b
   10e56:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   10e5a:	5463      	strb	r3, [r4, r1]
   10e5c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   10e60:	68ab      	ldr	r3, [r5, #8]
   10e62:	4641      	mov	r1, r8
   10e64:	689a      	ldr	r2, [r3, #8]
   10e66:	4620      	mov	r0, r4
   10e68:	f002 fcfa 	bl	13860 <d_print_comp>
   10e6c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10e70:	29ff      	cmp	r1, #255	; 0xff
   10e72:	f002 8425 	beq.w	136c0 <d_print_comp_inner+0x29a8>
   10e76:	235d      	movs	r3, #93	; 0x5d
   10e78:	1c4a      	adds	r2, r1, #1
   10e7a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   10e7e:	5463      	strb	r3, [r4, r1]
   10e80:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   10e84:	686b      	ldr	r3, [r5, #4]
   10e86:	781a      	ldrb	r2, [r3, #0]
   10e88:	2a31      	cmp	r2, #49	; 0x31
   10e8a:	d113      	bne.n	10eb4 <d_print_comp_inner+0x19c>
   10e8c:	685b      	ldr	r3, [r3, #4]
   10e8e:	689a      	ldr	r2, [r3, #8]
   10e90:	2a01      	cmp	r2, #1
   10e92:	d10f      	bne.n	10eb4 <d_print_comp_inner+0x19c>
   10e94:	685b      	ldr	r3, [r3, #4]
   10e96:	781b      	ldrb	r3, [r3, #0]
   10e98:	2b3e      	cmp	r3, #62	; 0x3e
   10e9a:	d10b      	bne.n	10eb4 <d_print_comp_inner+0x19c>
   10e9c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10ea0:	29ff      	cmp	r1, #255	; 0xff
   10ea2:	f002 8482 	beq.w	137aa <d_print_comp_inner+0x2a92>
   10ea6:	2329      	movs	r3, #41	; 0x29
   10ea8:	1c4a      	adds	r2, r1, #1
   10eaa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   10eae:	5463      	strb	r3, [r4, r1]
   10eb0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   10eb4:	b015      	add	sp, #84	; 0x54
   10eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10eba:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   10ebe:	2b00      	cmp	r3, #0
   10ec0:	f2c1 84a4 	blt.w	1280c <d_print_comp_inner+0x1af4>
   10ec4:	2b00      	cmp	r3, #0
   10ec6:	f002 8432 	beq.w	1372e <d_print_comp_inner+0x2a16>
   10eca:	6880      	ldr	r0, [r0, #8]
   10ecc:	3b01      	subs	r3, #1
   10ece:	b110      	cbz	r0, 10ed6 <d_print_comp_inner+0x1be>
   10ed0:	7802      	ldrb	r2, [r0, #0]
   10ed2:	2a2f      	cmp	r2, #47	; 0x2f
   10ed4:	d0f6      	beq.n	10ec4 <d_print_comp_inner+0x1ac>
   10ed6:	b10f      	cbz	r7, 10edc <d_print_comp_inner+0x1c4>
   10ed8:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   10edc:	2301      	movs	r3, #1
   10ede:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   10ee2:	b015      	add	sp, #84	; 0x54
   10ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ee8:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   10eec:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   10ef0:	9505      	str	r5, [sp, #20]
   10ef2:	ab14      	add	r3, sp, #80	; 0x50
   10ef4:	2100      	movs	r1, #0
   10ef6:	f843 cd40 	str.w	ip, [r3, #-64]!
   10efa:	9106      	str	r1, [sp, #24]
   10efc:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   10f00:	9207      	str	r2, [sp, #28]
   10f02:	686a      	ldr	r2, [r5, #4]
   10f04:	4641      	mov	r1, r8
   10f06:	4620      	mov	r0, r4
   10f08:	f002 fcaa 	bl	13860 <d_print_comp>
   10f0c:	9b06      	ldr	r3, [sp, #24]
   10f0e:	2b00      	cmp	r3, #0
   10f10:	f001 8389 	beq.w	12626 <d_print_comp_inner+0x190e>
   10f14:	9b04      	ldr	r3, [sp, #16]
   10f16:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   10f1a:	2f00      	cmp	r7, #0
   10f1c:	d0ca      	beq.n	10eb4 <d_print_comp_inner+0x19c>
   10f1e:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   10f22:	e7c7      	b.n	10eb4 <d_print_comp_inner+0x19c>
   10f24:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
   10f28:	f1bc 0f00 	cmp.w	ip, #0
   10f2c:	d0de      	beq.n	10eec <d_print_comp_inner+0x1d4>
   10f2e:	4662      	mov	r2, ip
   10f30:	e005      	b.n	10f3e <d_print_comp_inner+0x226>
   10f32:	428b      	cmp	r3, r1
   10f34:	f001 86b8 	beq.w	12ca8 <d_print_comp_inner+0x1f90>
   10f38:	6812      	ldr	r2, [r2, #0]
   10f3a:	2a00      	cmp	r2, #0
   10f3c:	d0d6      	beq.n	10eec <d_print_comp_inner+0x1d4>
   10f3e:	6890      	ldr	r0, [r2, #8]
   10f40:	2800      	cmp	r0, #0
   10f42:	d1f9      	bne.n	10f38 <d_print_comp_inner+0x220>
   10f44:	6851      	ldr	r1, [r2, #4]
   10f46:	7809      	ldrb	r1, [r1, #0]
   10f48:	f1a1 0e19 	sub.w	lr, r1, #25
   10f4c:	f1be 0f02 	cmp.w	lr, #2
   10f50:	d9ef      	bls.n	10f32 <d_print_comp_inner+0x21a>
   10f52:	4607      	mov	r7, r0
   10f54:	e7ca      	b.n	10eec <d_print_comp_inner+0x1d4>
   10f56:	68af      	ldr	r7, [r5, #8]
   10f58:	686d      	ldr	r5, [r5, #4]
   10f5a:	2f00      	cmp	r7, #0
   10f5c:	d0aa      	beq.n	10eb4 <d_print_comp_inner+0x19c>
   10f5e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   10f62:	442f      	add	r7, r5
   10f64:	f04f 0800 	mov.w	r8, #0
   10f68:	e008      	b.n	10f7c <d_print_comp_inner+0x264>
   10f6a:	460b      	mov	r3, r1
   10f6c:	3101      	adds	r1, #1
   10f6e:	42bd      	cmp	r5, r7
   10f70:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   10f74:	54e6      	strb	r6, [r4, r3]
   10f76:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   10f7a:	d09b      	beq.n	10eb4 <d_print_comp_inner+0x19c>
   10f7c:	29ff      	cmp	r1, #255	; 0xff
   10f7e:	f815 6b01 	ldrb.w	r6, [r5], #1
   10f82:	d1f2      	bne.n	10f6a <d_print_comp_inner+0x252>
   10f84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10f88:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   10f8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10f90:	4620      	mov	r0, r4
   10f92:	4798      	blx	r3
   10f94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10f98:	3301      	adds	r3, #1
   10f9a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10f9e:	2101      	movs	r1, #1
   10fa0:	2300      	movs	r3, #0
   10fa2:	e7e4      	b.n	10f6e <d_print_comp_inner+0x256>
   10fa4:	4e64      	ldr	r6, [pc, #400]	; (11138 <d_print_comp_inner+0x420>)
   10fa6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   10faa:	f106 0a11 	add.w	sl, r6, #17
   10fae:	f04f 0900 	mov.w	r9, #0
   10fb2:	e009      	b.n	10fc8 <d_print_comp_inner+0x2b0>
   10fb4:	460b      	mov	r3, r1
   10fb6:	3101      	adds	r1, #1
   10fb8:	4556      	cmp	r6, sl
   10fba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   10fbe:	54e7      	strb	r7, [r4, r3]
   10fc0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   10fc4:	f001 8296 	beq.w	124f4 <d_print_comp_inner+0x17dc>
   10fc8:	29ff      	cmp	r1, #255	; 0xff
   10fca:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   10fce:	d1f1      	bne.n	10fb4 <d_print_comp_inner+0x29c>
   10fd0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10fd4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   10fd8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10fdc:	4620      	mov	r0, r4
   10fde:	4798      	blx	r3
   10fe0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10fe4:	3301      	adds	r3, #1
   10fe6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10fea:	2101      	movs	r1, #1
   10fec:	2300      	movs	r3, #0
   10fee:	e7e3      	b.n	10fb8 <d_print_comp_inner+0x2a0>
   10ff0:	4e52      	ldr	r6, [pc, #328]	; (1113c <d_print_comp_inner+0x424>)
   10ff2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   10ff6:	f106 0a19 	add.w	sl, r6, #25
   10ffa:	f04f 0900 	mov.w	r9, #0
   10ffe:	e009      	b.n	11014 <d_print_comp_inner+0x2fc>
   11000:	460b      	mov	r3, r1
   11002:	3101      	adds	r1, #1
   11004:	4556      	cmp	r6, sl
   11006:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1100a:	54e7      	strb	r7, [r4, r3]
   1100c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   11010:	f001 82a8 	beq.w	12564 <d_print_comp_inner+0x184c>
   11014:	29ff      	cmp	r1, #255	; 0xff
   11016:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1101a:	d1f1      	bne.n	11000 <d_print_comp_inner+0x2e8>
   1101c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11020:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   11024:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11028:	4620      	mov	r0, r4
   1102a:	4798      	blx	r3
   1102c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11030:	3301      	adds	r3, #1
   11032:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11036:	2101      	movs	r1, #1
   11038:	2300      	movs	r3, #0
   1103a:	e7e3      	b.n	11004 <d_print_comp_inner+0x2ec>
   1103c:	4e40      	ldr	r6, [pc, #256]	; (11140 <d_print_comp_inner+0x428>)
   1103e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11042:	f106 0a15 	add.w	sl, r6, #21
   11046:	f04f 0900 	mov.w	r9, #0
   1104a:	e009      	b.n	11060 <d_print_comp_inner+0x348>
   1104c:	460b      	mov	r3, r1
   1104e:	3101      	adds	r1, #1
   11050:	4556      	cmp	r6, sl
   11052:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11056:	54e7      	strb	r7, [r4, r3]
   11058:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1105c:	f001 8251 	beq.w	12502 <d_print_comp_inner+0x17ea>
   11060:	29ff      	cmp	r1, #255	; 0xff
   11062:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   11066:	d1f1      	bne.n	1104c <d_print_comp_inner+0x334>
   11068:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1106c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   11070:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11074:	4620      	mov	r0, r4
   11076:	4798      	blx	r3
   11078:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1107c:	3301      	adds	r3, #1
   1107e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11082:	2101      	movs	r1, #1
   11084:	2300      	movs	r3, #0
   11086:	e7e3      	b.n	11050 <d_print_comp_inner+0x338>
   11088:	4e2e      	ldr	r6, [pc, #184]	; (11144 <d_print_comp_inner+0x42c>)
   1108a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1108e:	f106 0a16 	add.w	sl, r6, #22
   11092:	f04f 0900 	mov.w	r9, #0
   11096:	e009      	b.n	110ac <d_print_comp_inner+0x394>
   11098:	460b      	mov	r3, r1
   1109a:	3101      	adds	r1, #1
   1109c:	4556      	cmp	r6, sl
   1109e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   110a2:	54e7      	strb	r7, [r4, r3]
   110a4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   110a8:	f001 8263 	beq.w	12572 <d_print_comp_inner+0x185a>
   110ac:	29ff      	cmp	r1, #255	; 0xff
   110ae:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   110b2:	d1f1      	bne.n	11098 <d_print_comp_inner+0x380>
   110b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   110b8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   110bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   110c0:	4620      	mov	r0, r4
   110c2:	4798      	blx	r3
   110c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   110c8:	3301      	adds	r3, #1
   110ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   110ce:	2101      	movs	r1, #1
   110d0:	2300      	movs	r3, #0
   110d2:	e7e3      	b.n	1109c <d_print_comp_inner+0x384>
   110d4:	4e1c      	ldr	r6, [pc, #112]	; (11148 <d_print_comp_inner+0x430>)
   110d6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   110da:	f106 0a13 	add.w	sl, r6, #19
   110de:	f04f 0900 	mov.w	r9, #0
   110e2:	e009      	b.n	110f8 <d_print_comp_inner+0x3e0>
   110e4:	460b      	mov	r3, r1
   110e6:	3101      	adds	r1, #1
   110e8:	45b2      	cmp	sl, r6
   110ea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   110ee:	54e7      	strb	r7, [r4, r3]
   110f0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   110f4:	f001 8077 	beq.w	121e6 <d_print_comp_inner+0x14ce>
   110f8:	29ff      	cmp	r1, #255	; 0xff
   110fa:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   110fe:	d1f1      	bne.n	110e4 <d_print_comp_inner+0x3cc>
   11100:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11104:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   11108:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1110c:	4620      	mov	r0, r4
   1110e:	4798      	blx	r3
   11110:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11114:	3301      	adds	r3, #1
   11116:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1111a:	2101      	movs	r1, #1
   1111c:	2300      	movs	r3, #0
   1111e:	e7e3      	b.n	110e8 <d_print_comp_inner+0x3d0>
   11120:	4e0a      	ldr	r6, [pc, #40]	; (1114c <d_print_comp_inner+0x434>)
   11122:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11126:	f106 0a1a 	add.w	sl, r6, #26
   1112a:	f04f 0900 	mov.w	r9, #0
   1112e:	e019      	b.n	11164 <d_print_comp_inner+0x44c>
   11130:	0003dafc 	.word	0x0003dafc
   11134:	0003dcf8 	.word	0x0003dcf8
   11138:	0003dc87 	.word	0x0003dc87
   1113c:	0003dc53 	.word	0x0003dc53
   11140:	0003dc6f 	.word	0x0003dc6f
   11144:	0003dc3b 	.word	0x0003dc3b
   11148:	0003dc27 	.word	0x0003dc27
   1114c:	0003dbfb 	.word	0x0003dbfb
   11150:	460b      	mov	r3, r1
   11152:	3101      	adds	r1, #1
   11154:	4556      	cmp	r6, sl
   11156:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1115a:	54e7      	strb	r7, [r4, r3]
   1115c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   11160:	f001 804f 	beq.w	12202 <d_print_comp_inner+0x14ea>
   11164:	29ff      	cmp	r1, #255	; 0xff
   11166:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1116a:	d1f1      	bne.n	11150 <d_print_comp_inner+0x438>
   1116c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11170:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   11174:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11178:	4620      	mov	r0, r4
   1117a:	4798      	blx	r3
   1117c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11180:	3301      	adds	r3, #1
   11182:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11186:	2101      	movs	r1, #1
   11188:	2300      	movs	r3, #0
   1118a:	e7e3      	b.n	11154 <d_print_comp_inner+0x43c>
   1118c:	4eb5      	ldr	r6, [pc, #724]	; (11464 <d_print_comp_inner+0x74c>)
   1118e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11192:	f106 0a0f 	add.w	sl, r6, #15
   11196:	f04f 0900 	mov.w	r9, #0
   1119a:	e009      	b.n	111b0 <d_print_comp_inner+0x498>
   1119c:	460b      	mov	r3, r1
   1119e:	3101      	adds	r1, #1
   111a0:	4556      	cmp	r6, sl
   111a2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   111a6:	54e7      	strb	r7, [r4, r3]
   111a8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   111ac:	f001 8022 	beq.w	121f4 <d_print_comp_inner+0x14dc>
   111b0:	29ff      	cmp	r1, #255	; 0xff
   111b2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   111b6:	d1f1      	bne.n	1119c <d_print_comp_inner+0x484>
   111b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   111bc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   111c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   111c4:	4620      	mov	r0, r4
   111c6:	4798      	blx	r3
   111c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   111cc:	3301      	adds	r3, #1
   111ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   111d2:	2101      	movs	r1, #1
   111d4:	2300      	movs	r3, #0
   111d6:	e7e3      	b.n	111a0 <d_print_comp_inner+0x488>
   111d8:	4ea3      	ldr	r6, [pc, #652]	; (11468 <d_print_comp_inner+0x750>)
   111da:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   111de:	f106 0a11 	add.w	sl, r6, #17
   111e2:	f04f 0900 	mov.w	r9, #0
   111e6:	e009      	b.n	111fc <d_print_comp_inner+0x4e4>
   111e8:	460b      	mov	r3, r1
   111ea:	3101      	adds	r1, #1
   111ec:	4556      	cmp	r6, sl
   111ee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   111f2:	54e7      	strb	r7, [r4, r3]
   111f4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   111f8:	f001 800a 	beq.w	12210 <d_print_comp_inner+0x14f8>
   111fc:	29ff      	cmp	r1, #255	; 0xff
   111fe:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   11202:	d1f1      	bne.n	111e8 <d_print_comp_inner+0x4d0>
   11204:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11208:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1120c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11210:	4620      	mov	r0, r4
   11212:	4798      	blx	r3
   11214:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11218:	3301      	adds	r3, #1
   1121a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1121e:	2101      	movs	r1, #1
   11220:	2300      	movs	r3, #0
   11222:	e7e3      	b.n	111ec <d_print_comp_inner+0x4d4>
   11224:	4e91      	ldr	r6, [pc, #580]	; (1146c <d_print_comp_inner+0x754>)
   11226:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1122a:	f106 0a15 	add.w	sl, r6, #21
   1122e:	f04f 0900 	mov.w	r9, #0
   11232:	e009      	b.n	11248 <d_print_comp_inner+0x530>
   11234:	460b      	mov	r3, r1
   11236:	3101      	adds	r1, #1
   11238:	4556      	cmp	r6, sl
   1123a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1123e:	54e7      	strb	r7, [r4, r3]
   11240:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   11244:	f000 87b3 	beq.w	121ae <d_print_comp_inner+0x1496>
   11248:	29ff      	cmp	r1, #255	; 0xff
   1124a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1124e:	d1f1      	bne.n	11234 <d_print_comp_inner+0x51c>
   11250:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11254:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   11258:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1125c:	4620      	mov	r0, r4
   1125e:	4798      	blx	r3
   11260:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11264:	3301      	adds	r3, #1
   11266:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1126a:	2101      	movs	r1, #1
   1126c:	2300      	movs	r3, #0
   1126e:	e7e3      	b.n	11238 <d_print_comp_inner+0x520>
   11270:	4e7f      	ldr	r6, [pc, #508]	; (11470 <d_print_comp_inner+0x758>)
   11272:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11276:	f106 0a12 	add.w	sl, r6, #18
   1127a:	f04f 0900 	mov.w	r9, #0
   1127e:	e009      	b.n	11294 <d_print_comp_inner+0x57c>
   11280:	460b      	mov	r3, r1
   11282:	3101      	adds	r1, #1
   11284:	45b2      	cmp	sl, r6
   11286:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1128a:	54e7      	strb	r7, [r4, r3]
   1128c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   11290:	f000 879b 	beq.w	121ca <d_print_comp_inner+0x14b2>
   11294:	29ff      	cmp	r1, #255	; 0xff
   11296:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1129a:	d1f1      	bne.n	11280 <d_print_comp_inner+0x568>
   1129c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   112a0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   112a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   112a8:	4620      	mov	r0, r4
   112aa:	4798      	blx	r3
   112ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   112b0:	3301      	adds	r3, #1
   112b2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   112b6:	2101      	movs	r1, #1
   112b8:	2300      	movs	r3, #0
   112ba:	e7e3      	b.n	11284 <d_print_comp_inner+0x56c>
   112bc:	4e6d      	ldr	r6, [pc, #436]	; (11474 <d_print_comp_inner+0x75c>)
   112be:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   112c2:	f106 0a10 	add.w	sl, r6, #16
   112c6:	f04f 0900 	mov.w	r9, #0
   112ca:	e009      	b.n	112e0 <d_print_comp_inner+0x5c8>
   112cc:	460b      	mov	r3, r1
   112ce:	3101      	adds	r1, #1
   112d0:	4556      	cmp	r6, sl
   112d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   112d6:	54e7      	strb	r7, [r4, r3]
   112d8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   112dc:	f000 876e 	beq.w	121bc <d_print_comp_inner+0x14a4>
   112e0:	29ff      	cmp	r1, #255	; 0xff
   112e2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   112e6:	d1f1      	bne.n	112cc <d_print_comp_inner+0x5b4>
   112e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   112ec:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   112f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   112f4:	4620      	mov	r0, r4
   112f6:	4798      	blx	r3
   112f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   112fc:	3301      	adds	r3, #1
   112fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11302:	2101      	movs	r1, #1
   11304:	2300      	movs	r3, #0
   11306:	e7e3      	b.n	112d0 <d_print_comp_inner+0x5b8>
   11308:	4e5b      	ldr	r6, [pc, #364]	; (11478 <d_print_comp_inner+0x760>)
   1130a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1130e:	f106 0a0d 	add.w	sl, r6, #13
   11312:	f04f 0900 	mov.w	r9, #0
   11316:	e009      	b.n	1132c <d_print_comp_inner+0x614>
   11318:	460b      	mov	r3, r1
   1131a:	3101      	adds	r1, #1
   1131c:	4556      	cmp	r6, sl
   1131e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11322:	54e7      	strb	r7, [r4, r3]
   11324:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   11328:	f000 8756 	beq.w	121d8 <d_print_comp_inner+0x14c0>
   1132c:	29ff      	cmp	r1, #255	; 0xff
   1132e:	f816 7b01 	ldrb.w	r7, [r6], #1
   11332:	d1f1      	bne.n	11318 <d_print_comp_inner+0x600>
   11334:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11338:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1133c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11340:	4620      	mov	r0, r4
   11342:	4798      	blx	r3
   11344:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11348:	3301      	adds	r3, #1
   1134a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1134e:	2101      	movs	r1, #1
   11350:	2300      	movs	r3, #0
   11352:	e7e3      	b.n	1131c <d_print_comp_inner+0x604>
   11354:	4e49      	ldr	r6, [pc, #292]	; (1147c <d_print_comp_inner+0x764>)
   11356:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1135a:	f106 0a18 	add.w	sl, r6, #24
   1135e:	f04f 0900 	mov.w	r9, #0
   11362:	e009      	b.n	11378 <d_print_comp_inner+0x660>
   11364:	460b      	mov	r3, r1
   11366:	3101      	adds	r1, #1
   11368:	45b2      	cmp	sl, r6
   1136a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1136e:	54e7      	strb	r7, [r4, r3]
   11370:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   11374:	f000 86e3 	beq.w	1213e <d_print_comp_inner+0x1426>
   11378:	29ff      	cmp	r1, #255	; 0xff
   1137a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1137e:	d1f1      	bne.n	11364 <d_print_comp_inner+0x64c>
   11380:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11384:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   11388:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1138c:	4620      	mov	r0, r4
   1138e:	4798      	blx	r3
   11390:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11394:	3301      	adds	r3, #1
   11396:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1139a:	2101      	movs	r1, #1
   1139c:	2300      	movs	r3, #0
   1139e:	e7e3      	b.n	11368 <d_print_comp_inner+0x650>
   113a0:	4e37      	ldr	r6, [pc, #220]	; (11480 <d_print_comp_inner+0x768>)
   113a2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   113a6:	f106 0a0b 	add.w	sl, r6, #11
   113aa:	f04f 0900 	mov.w	r9, #0
   113ae:	e009      	b.n	113c4 <d_print_comp_inner+0x6ac>
   113b0:	460b      	mov	r3, r1
   113b2:	3101      	adds	r1, #1
   113b4:	45b2      	cmp	sl, r6
   113b6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   113ba:	54e7      	strb	r7, [r4, r3]
   113bc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   113c0:	f000 87ca 	beq.w	12358 <d_print_comp_inner+0x1640>
   113c4:	29ff      	cmp	r1, #255	; 0xff
   113c6:	f816 7b01 	ldrb.w	r7, [r6], #1
   113ca:	d1f1      	bne.n	113b0 <d_print_comp_inner+0x698>
   113cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   113d0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   113d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   113d8:	4620      	mov	r0, r4
   113da:	4798      	blx	r3
   113dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   113e0:	3301      	adds	r3, #1
   113e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   113e6:	2101      	movs	r1, #1
   113e8:	2300      	movs	r3, #0
   113ea:	e7e3      	b.n	113b4 <d_print_comp_inner+0x69c>
   113ec:	4e25      	ldr	r6, [pc, #148]	; (11484 <d_print_comp_inner+0x76c>)
   113ee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   113f2:	f106 0a08 	add.w	sl, r6, #8
   113f6:	f04f 0900 	mov.w	r9, #0
   113fa:	e009      	b.n	11410 <d_print_comp_inner+0x6f8>
   113fc:	460b      	mov	r3, r1
   113fe:	3101      	adds	r1, #1
   11400:	45b2      	cmp	sl, r6
   11402:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11406:	54e7      	strb	r7, [r4, r3]
   11408:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1140c:	f000 86c8 	beq.w	121a0 <d_print_comp_inner+0x1488>
   11410:	29ff      	cmp	r1, #255	; 0xff
   11412:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   11416:	d1f1      	bne.n	113fc <d_print_comp_inner+0x6e4>
   11418:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1141c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   11420:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11424:	4620      	mov	r0, r4
   11426:	4798      	blx	r3
   11428:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1142c:	3301      	adds	r3, #1
   1142e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11432:	2101      	movs	r1, #1
   11434:	2300      	movs	r3, #0
   11436:	e7e3      	b.n	11400 <d_print_comp_inner+0x6e8>
   11438:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1143c:	29ff      	cmp	r1, #255	; 0xff
   1143e:	f001 847c 	beq.w	12d3a <d_print_comp_inner+0x2022>
   11442:	1c4a      	adds	r2, r1, #1
   11444:	237e      	movs	r3, #126	; 0x7e
   11446:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1144a:	5463      	strb	r3, [r4, r1]
   1144c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   11450:	4641      	mov	r1, r8
   11452:	68aa      	ldr	r2, [r5, #8]
   11454:	4620      	mov	r0, r4
   11456:	f002 fa03 	bl	13860 <d_print_comp>
   1145a:	e52b      	b.n	10eb4 <d_print_comp_inner+0x19c>
   1145c:	68aa      	ldr	r2, [r5, #8]
   1145e:	f002 f9ff 	bl	13860 <d_print_comp>
   11462:	e527      	b.n	10eb4 <d_print_comp_inner+0x19c>
   11464:	0003dc17 	.word	0x0003dc17
   11468:	0003dbe7 	.word	0x0003dbe7
   1146c:	0003dbe3 	.word	0x0003dbe3
   11470:	0003dbbb 	.word	0x0003dbbb
   11474:	0003dbcf 	.word	0x0003dbcf
   11478:	0003dbac 	.word	0x0003dbac
   1147c:	0003db87 	.word	0x0003db87
   11480:	0003db70 	.word	0x0003db70
   11484:	0003db7b 	.word	0x0003db7b
   11488:	2200      	movs	r2, #0
   1148a:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   1148e:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   11492:	686e      	ldr	r6, [r5, #4]
   11494:	9300      	str	r3, [sp, #0]
   11496:	2e00      	cmp	r6, #0
   11498:	f000 864c 	beq.w	12134 <d_print_comp_inner+0x141c>
   1149c:	f10d 0910 	add.w	r9, sp, #16
   114a0:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
   114a4:	4617      	mov	r7, r2
   114a6:	4696      	mov	lr, r2
   114a8:	464b      	mov	r3, r9
   114aa:	7831      	ldrb	r1, [r6, #0]
   114ac:	601a      	str	r2, [r3, #0]
   114ae:	f1a1 021c 	sub.w	r2, r1, #28
   114b2:	2a04      	cmp	r2, #4
   114b4:	605e      	str	r6, [r3, #4]
   114b6:	f8c3 e008 	str.w	lr, [r3, #8]
   114ba:	f8c3 c00c 	str.w	ip, [r3, #12]
   114be:	f107 0701 	add.w	r7, r7, #1
   114c2:	4618      	mov	r0, r3
   114c4:	461a      	mov	r2, r3
   114c6:	f240 862a 	bls.w	1211e <d_print_comp_inner+0x1406>
   114ca:	294c      	cmp	r1, #76	; 0x4c
   114cc:	f000 8627 	beq.w	1211e <d_print_comp_inner+0x1406>
   114d0:	2904      	cmp	r1, #4
   114d2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   114d6:	f001 87bb 	beq.w	13450 <d_print_comp_inner+0x2738>
   114da:	2902      	cmp	r1, #2
   114dc:	d11a      	bne.n	11514 <d_print_comp_inner+0x7fc>
   114de:	f8d6 b008 	ldr.w	fp, [r6, #8]
   114e2:	f89b 3000 	ldrb.w	r3, [fp]
   114e6:	2b46      	cmp	r3, #70	; 0x46
   114e8:	f002 8035 	beq.w	13556 <d_print_comp_inner+0x283e>
   114ec:	462b      	mov	r3, r5
   114ee:	eb09 1e07 	add.w	lr, r9, r7, lsl #4
   114f2:	9601      	str	r6, [sp, #4]
   114f4:	465d      	mov	r5, fp
   114f6:	4676      	mov	r6, lr
   114f8:	46a2      	mov	sl, r4
   114fa:	469b      	mov	fp, r3
   114fc:	782b      	ldrb	r3, [r5, #0]
   114fe:	f1a3 021c 	sub.w	r2, r3, #28
   11502:	2a04      	cmp	r2, #4
   11504:	f241 805d 	bls.w	125c2 <d_print_comp_inner+0x18aa>
   11508:	2b4c      	cmp	r3, #76	; 0x4c
   1150a:	f001 805a 	beq.w	125c2 <d_print_comp_inner+0x18aa>
   1150e:	9e01      	ldr	r6, [sp, #4]
   11510:	4654      	mov	r4, sl
   11512:	465d      	mov	r5, fp
   11514:	68aa      	ldr	r2, [r5, #8]
   11516:	4641      	mov	r1, r8
   11518:	4620      	mov	r0, r4
   1151a:	f002 f9a1 	bl	13860 <d_print_comp>
   1151e:	7833      	ldrb	r3, [r6, #0]
   11520:	2b04      	cmp	r3, #4
   11522:	f002 8020 	beq.w	13566 <d_print_comp_inner+0x284e>
   11526:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   1152a:	2620      	movs	r6, #32
   1152c:	f859 5c08 	ldr.w	r5, [r9, #-8]
   11530:	3f01      	subs	r7, #1
   11532:	b985      	cbnz	r5, 11556 <d_print_comp_inner+0x83e>
   11534:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   11538:	29ff      	cmp	r1, #255	; 0xff
   1153a:	f002 8043 	beq.w	135c4 <d_print_comp_inner+0x28ac>
   1153e:	1c4b      	adds	r3, r1, #1
   11540:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   11544:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   11548:	5466      	strb	r6, [r4, r1]
   1154a:	4620      	mov	r0, r4
   1154c:	4641      	mov	r1, r8
   1154e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   11552:	f002 f995 	bl	13880 <d_print_mod>
   11556:	f1a9 0910 	sub.w	r9, r9, #16
   1155a:	2f00      	cmp	r7, #0
   1155c:	d1e6      	bne.n	1152c <d_print_comp_inner+0x814>
   1155e:	9b00      	ldr	r3, [sp, #0]
   11560:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   11564:	e4a6      	b.n	10eb4 <d_print_comp_inner+0x19c>
   11566:	4ed1      	ldr	r6, [pc, #836]	; (118ac <d_print_comp_inner+0xb94>)
   11568:	686a      	ldr	r2, [r5, #4]
   1156a:	f002 f979 	bl	13860 <d_print_comp>
   1156e:	f106 0a05 	add.w	sl, r6, #5
   11572:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   11576:	f04f 0900 	mov.w	r9, #0
   1157a:	e009      	b.n	11590 <d_print_comp_inner+0x878>
   1157c:	460b      	mov	r3, r1
   1157e:	3101      	adds	r1, #1
   11580:	45b2      	cmp	sl, r6
   11582:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11586:	54e7      	strb	r7, [r4, r3]
   11588:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1158c:	f000 86d1 	beq.w	12332 <d_print_comp_inner+0x161a>
   11590:	29ff      	cmp	r1, #255	; 0xff
   11592:	f816 7b01 	ldrb.w	r7, [r6], #1
   11596:	d1f1      	bne.n	1157c <d_print_comp_inner+0x864>
   11598:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1159c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   115a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   115a4:	4620      	mov	r0, r4
   115a6:	4798      	blx	r3
   115a8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   115ac:	3301      	adds	r3, #1
   115ae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   115b2:	2101      	movs	r1, #1
   115b4:	2300      	movs	r3, #0
   115b6:	e7e3      	b.n	11580 <d_print_comp_inner+0x868>
   115b8:	686a      	ldr	r2, [r5, #4]
   115ba:	f002 f951 	bl	13860 <d_print_comp>
   115be:	f018 0904 	ands.w	r9, r8, #4
   115c2:	f001 82aa 	beq.w	12b1a <d_print_comp_inner+0x1e02>
   115c6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   115ca:	29ff      	cmp	r1, #255	; 0xff
   115cc:	f001 859a 	beq.w	13104 <d_print_comp_inner+0x23ec>
   115d0:	1c4a      	adds	r2, r1, #1
   115d2:	232e      	movs	r3, #46	; 0x2e
   115d4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   115d8:	5463      	strb	r3, [r4, r1]
   115da:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   115de:	68ad      	ldr	r5, [r5, #8]
   115e0:	782b      	ldrb	r3, [r5, #0]
   115e2:	2b46      	cmp	r3, #70	; 0x46
   115e4:	f001 83cc 	beq.w	12d80 <d_print_comp_inner+0x2068>
   115e8:	462a      	mov	r2, r5
   115ea:	4641      	mov	r1, r8
   115ec:	4620      	mov	r0, r4
   115ee:	f002 f937 	bl	13860 <d_print_comp>
   115f2:	e45f      	b.n	10eb4 <d_print_comp_inner+0x19c>
   115f4:	f011 0804 	ands.w	r8, r1, #4
   115f8:	f041 808b 	bne.w	12712 <d_print_comp_inner+0x19fa>
   115fc:	68af      	ldr	r7, [r5, #8]
   115fe:	686d      	ldr	r5, [r5, #4]
   11600:	2f00      	cmp	r7, #0
   11602:	f43f ac57 	beq.w	10eb4 <d_print_comp_inner+0x19c>
   11606:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1160a:	442f      	add	r7, r5
   1160c:	e009      	b.n	11622 <d_print_comp_inner+0x90a>
   1160e:	460b      	mov	r3, r1
   11610:	3101      	adds	r1, #1
   11612:	42bd      	cmp	r5, r7
   11614:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11618:	54e6      	strb	r6, [r4, r3]
   1161a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1161e:	f43f ac49 	beq.w	10eb4 <d_print_comp_inner+0x19c>
   11622:	29ff      	cmp	r1, #255	; 0xff
   11624:	f815 6b01 	ldrb.w	r6, [r5], #1
   11628:	d1f1      	bne.n	1160e <d_print_comp_inner+0x8f6>
   1162a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1162e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   11632:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11636:	4620      	mov	r0, r4
   11638:	4798      	blx	r3
   1163a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1163e:	3301      	adds	r3, #1
   11640:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11644:	2101      	movs	r1, #1
   11646:	2300      	movs	r3, #0
   11648:	e7e3      	b.n	11612 <d_print_comp_inner+0x8fa>
   1164a:	2301      	movs	r3, #1
   1164c:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   11650:	e430      	b.n	10eb4 <d_print_comp_inner+0x19c>
   11652:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   11656:	2b00      	cmp	r3, #0
   11658:	f041 8106 	bne.w	12868 <d_print_comp_inner+0x1b50>
   1165c:	1d29      	adds	r1, r5, #4
   1165e:	f7fd fa97 	bl	eb90 <d_lookup_template_argument.isra.6>
   11662:	2800      	cmp	r0, #0
   11664:	f43f ac3a 	beq.w	10edc <d_print_comp_inner+0x1c4>
   11668:	7803      	ldrb	r3, [r0, #0]
   1166a:	2b2f      	cmp	r3, #47	; 0x2f
   1166c:	f001 83fc 	beq.w	12e68 <d_print_comp_inner+0x2150>
   11670:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
   11674:	682b      	ldr	r3, [r5, #0]
   11676:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1167a:	4602      	mov	r2, r0
   1167c:	4641      	mov	r1, r8
   1167e:	4620      	mov	r0, r4
   11680:	f002 f8ee 	bl	13860 <d_print_comp>
   11684:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   11688:	e414      	b.n	10eb4 <d_print_comp_inner+0x19c>
   1168a:	2300      	movs	r3, #0
   1168c:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
   11690:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
   11694:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   11698:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
   1169c:	f011 0f04 	tst.w	r1, #4
   116a0:	686e      	ldr	r6, [r5, #4]
   116a2:	d005      	beq.n	116b0 <d_print_comp_inner+0x998>
   116a4:	7833      	ldrb	r3, [r6, #0]
   116a6:	b91b      	cbnz	r3, 116b0 <d_print_comp_inner+0x998>
   116a8:	68b2      	ldr	r2, [r6, #8]
   116aa:	2a06      	cmp	r2, #6
   116ac:	f001 853c 	beq.w	13128 <d_print_comp_inner+0x2410>
   116b0:	4632      	mov	r2, r6
   116b2:	4641      	mov	r1, r8
   116b4:	4620      	mov	r0, r4
   116b6:	f002 f8d3 	bl	13860 <d_print_comp>
   116ba:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   116be:	2b3c      	cmp	r3, #60	; 0x3c
   116c0:	f001 8274 	beq.w	12bac <d_print_comp_inner+0x1e94>
   116c4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   116c8:	2bff      	cmp	r3, #255	; 0xff
   116ca:	f001 8489 	beq.w	12fe0 <d_print_comp_inner+0x22c8>
   116ce:	1c59      	adds	r1, r3, #1
   116d0:	223c      	movs	r2, #60	; 0x3c
   116d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   116d6:	54e2      	strb	r2, [r4, r3]
   116d8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   116dc:	4641      	mov	r1, r8
   116de:	68aa      	ldr	r2, [r5, #8]
   116e0:	4620      	mov	r0, r4
   116e2:	f002 f8bd 	bl	13860 <d_print_comp>
   116e6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   116ea:	2b3e      	cmp	r3, #62	; 0x3e
   116ec:	f001 8239 	beq.w	12b62 <d_print_comp_inner+0x1e4a>
   116f0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   116f4:	2bff      	cmp	r3, #255	; 0xff
   116f6:	f001 8460 	beq.w	12fba <d_print_comp_inner+0x22a2>
   116fa:	1c59      	adds	r1, r3, #1
   116fc:	223e      	movs	r2, #62	; 0x3e
   116fe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11702:	54e2      	strb	r2, [r4, r3]
   11704:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   11708:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1170c:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
   11710:	f7ff bbd0 	b.w	10eb4 <d_print_comp_inner+0x19c>
   11714:	686f      	ldr	r7, [r5, #4]
   11716:	2f00      	cmp	r7, #0
   11718:	f001 8082 	beq.w	12820 <d_print_comp_inner+0x1b08>
   1171c:	4d64      	ldr	r5, [pc, #400]	; (118b0 <d_print_comp_inner+0xb98>)
   1171e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11722:	f105 0906 	add.w	r9, r5, #6
   11726:	f04f 0800 	mov.w	r8, #0
   1172a:	e009      	b.n	11740 <d_print_comp_inner+0xa28>
   1172c:	460b      	mov	r3, r1
   1172e:	3101      	adds	r1, #1
   11730:	45a9      	cmp	r9, r5
   11732:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11736:	54e6      	strb	r6, [r4, r3]
   11738:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1173c:	f000 8782 	beq.w	12644 <d_print_comp_inner+0x192c>
   11740:	29ff      	cmp	r1, #255	; 0xff
   11742:	f815 6b01 	ldrb.w	r6, [r5], #1
   11746:	d1f1      	bne.n	1172c <d_print_comp_inner+0xa14>
   11748:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1174c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   11750:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11754:	4620      	mov	r0, r4
   11756:	4798      	blx	r3
   11758:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1175c:	3301      	adds	r3, #1
   1175e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11762:	2101      	movs	r1, #1
   11764:	2300      	movs	r3, #0
   11766:	e7e3      	b.n	11730 <d_print_comp_inner+0xa18>
   11768:	4e52      	ldr	r6, [pc, #328]	; (118b4 <d_print_comp_inner+0xb9c>)
   1176a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1176e:	f106 0a0a 	add.w	sl, r6, #10
   11772:	f04f 0900 	mov.w	r9, #0
   11776:	e009      	b.n	1178c <d_print_comp_inner+0xa74>
   11778:	460b      	mov	r3, r1
   1177a:	3101      	adds	r1, #1
   1177c:	4556      	cmp	r6, sl
   1177e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11782:	54e7      	strb	r7, [r4, r3]
   11784:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   11788:	f000 8701 	beq.w	1258e <d_print_comp_inner+0x1876>
   1178c:	29ff      	cmp	r1, #255	; 0xff
   1178e:	f816 7b01 	ldrb.w	r7, [r6], #1
   11792:	d1f1      	bne.n	11778 <d_print_comp_inner+0xa60>
   11794:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11798:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1179c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   117a0:	4620      	mov	r0, r4
   117a2:	4798      	blx	r3
   117a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   117a8:	3301      	adds	r3, #1
   117aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   117ae:	2101      	movs	r1, #1
   117b0:	2300      	movs	r3, #0
   117b2:	e7e3      	b.n	1177c <d_print_comp_inner+0xa64>
   117b4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   117b8:	792d      	ldrb	r5, [r5, #4]
   117ba:	29ff      	cmp	r1, #255	; 0xff
   117bc:	f001 82ab 	beq.w	12d16 <d_print_comp_inner+0x1ffe>
   117c0:	1c4b      	adds	r3, r1, #1
   117c2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   117c6:	5465      	strb	r5, [r4, r1]
   117c8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   117cc:	f7ff bb72 	b.w	10eb4 <d_print_comp_inner+0x19c>
   117d0:	686a      	ldr	r2, [r5, #4]
   117d2:	f002 f845 	bl	13860 <d_print_comp>
   117d6:	68aa      	ldr	r2, [r5, #8]
   117d8:	4641      	mov	r1, r8
   117da:	4620      	mov	r0, r4
   117dc:	f002 f840 	bl	13860 <d_print_comp>
   117e0:	f7ff bb68 	b.w	10eb4 <d_print_comp_inner+0x19c>
   117e4:	4e34      	ldr	r6, [pc, #208]	; (118b8 <d_print_comp_inner+0xba0>)
   117e6:	686a      	ldr	r2, [r5, #4]
   117e8:	f002 f83a 	bl	13860 <d_print_comp>
   117ec:	f106 0a08 	add.w	sl, r6, #8
   117f0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   117f4:	f04f 0900 	mov.w	r9, #0
   117f8:	e009      	b.n	1180e <d_print_comp_inner+0xaf6>
   117fa:	460b      	mov	r3, r1
   117fc:	3101      	adds	r1, #1
   117fe:	4556      	cmp	r6, sl
   11800:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11804:	54e7      	strb	r7, [r4, r3]
   11806:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1180a:	f000 8508 	beq.w	1221e <d_print_comp_inner+0x1506>
   1180e:	29ff      	cmp	r1, #255	; 0xff
   11810:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   11814:	d1f1      	bne.n	117fa <d_print_comp_inner+0xae2>
   11816:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1181a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1181e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11822:	4620      	mov	r0, r4
   11824:	4798      	blx	r3
   11826:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1182a:	3301      	adds	r3, #1
   1182c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11830:	2101      	movs	r1, #1
   11832:	2300      	movs	r3, #0
   11834:	e7e3      	b.n	117fe <d_print_comp_inner+0xae6>
   11836:	686a      	ldr	r2, [r5, #4]
   11838:	b10a      	cbz	r2, 1183e <d_print_comp_inner+0xb26>
   1183a:	f002 f811 	bl	13860 <d_print_comp>
   1183e:	68ab      	ldr	r3, [r5, #8]
   11840:	2b00      	cmp	r3, #0
   11842:	f43f ab37 	beq.w	10eb4 <d_print_comp_inner+0x19c>
   11846:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
   1184a:	2efd      	cmp	r6, #253	; 0xfd
   1184c:	f201 81bc 	bhi.w	12bc8 <d_print_comp_inner+0x1eb0>
   11850:	4f1a      	ldr	r7, [pc, #104]	; (118bc <d_print_comp_inner+0xba4>)
   11852:	f04f 0a00 	mov.w	sl, #0
   11856:	f107 0b02 	add.w	fp, r7, #2
   1185a:	4631      	mov	r1, r6
   1185c:	e009      	b.n	11872 <d_print_comp_inner+0xb5a>
   1185e:	460b      	mov	r3, r1
   11860:	3101      	adds	r1, #1
   11862:	455f      	cmp	r7, fp
   11864:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11868:	54e6      	strb	r6, [r4, r3]
   1186a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1186e:	f000 86c1 	beq.w	125f4 <d_print_comp_inner+0x18dc>
   11872:	29ff      	cmp	r1, #255	; 0xff
   11874:	f817 6b01 	ldrb.w	r6, [r7], #1
   11878:	d1f1      	bne.n	1185e <d_print_comp_inner+0xb46>
   1187a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1187e:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   11882:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11886:	4620      	mov	r0, r4
   11888:	4798      	blx	r3
   1188a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1188e:	3301      	adds	r3, #1
   11890:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11894:	2101      	movs	r1, #1
   11896:	2300      	movs	r3, #0
   11898:	e7e3      	b.n	11862 <d_print_comp_inner+0xb4a>
   1189a:	4e09      	ldr	r6, [pc, #36]	; (118c0 <d_print_comp_inner+0xba8>)
   1189c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   118a0:	f106 0a09 	add.w	sl, r6, #9
   118a4:	f04f 0900 	mov.w	r9, #0
   118a8:	e016      	b.n	118d8 <d_print_comp_inner+0xbc0>
   118aa:	bf00      	nop
   118ac:	0003db3c 	.word	0x0003db3c
   118b0:	0003dd44 	.word	0x0003dd44
   118b4:	0003dd2c 	.word	0x0003dd2c
   118b8:	0003ddab 	.word	0x0003ddab
   118bc:	0003dcd0 	.word	0x0003dcd0
   118c0:	0003dcdf 	.word	0x0003dcdf
   118c4:	460b      	mov	r3, r1
   118c6:	3101      	adds	r1, #1
   118c8:	4556      	cmp	r6, sl
   118ca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   118ce:	54e7      	strb	r7, [r4, r3]
   118d0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   118d4:	f000 8594 	beq.w	12400 <d_print_comp_inner+0x16e8>
   118d8:	29ff      	cmp	r1, #255	; 0xff
   118da:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   118de:	d1f1      	bne.n	118c4 <d_print_comp_inner+0xbac>
   118e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   118e4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   118e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   118ec:	4620      	mov	r0, r4
   118ee:	4798      	blx	r3
   118f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   118f4:	3301      	adds	r3, #1
   118f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   118fa:	2101      	movs	r1, #1
   118fc:	2300      	movs	r3, #0
   118fe:	e7e3      	b.n	118c8 <d_print_comp_inner+0xbb0>
   11900:	4ed1      	ldr	r6, [pc, #836]	; (11c48 <d_print_comp_inner+0xf30>)
   11902:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11906:	f106 0a09 	add.w	sl, r6, #9
   1190a:	f04f 0900 	mov.w	r9, #0
   1190e:	e009      	b.n	11924 <d_print_comp_inner+0xc0c>
   11910:	460b      	mov	r3, r1
   11912:	3101      	adds	r1, #1
   11914:	4556      	cmp	r6, sl
   11916:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1191a:	54e7      	strb	r7, [r4, r3]
   1191c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   11920:	f000 8597 	beq.w	12452 <d_print_comp_inner+0x173a>
   11924:	29ff      	cmp	r1, #255	; 0xff
   11926:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1192a:	d1f1      	bne.n	11910 <d_print_comp_inner+0xbf8>
   1192c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11930:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   11934:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11938:	4620      	mov	r0, r4
   1193a:	4798      	blx	r3
   1193c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11940:	3301      	adds	r3, #1
   11942:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11946:	2101      	movs	r1, #1
   11948:	2300      	movs	r3, #0
   1194a:	e7e3      	b.n	11914 <d_print_comp_inner+0xbfc>
   1194c:	f8d5 a004 	ldr.w	sl, [r5, #4]
   11950:	4dbe      	ldr	r5, [pc, #760]	; (11c4c <d_print_comp_inner+0xf34>)
   11952:	f8da 7008 	ldr.w	r7, [sl, #8]
   11956:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1195a:	f105 0808 	add.w	r8, r5, #8
   1195e:	f04f 0900 	mov.w	r9, #0
   11962:	e009      	b.n	11978 <d_print_comp_inner+0xc60>
   11964:	460b      	mov	r3, r1
   11966:	3101      	adds	r1, #1
   11968:	45a8      	cmp	r8, r5
   1196a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1196e:	54e6      	strb	r6, [r4, r3]
   11970:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   11974:	f000 8506 	beq.w	12384 <d_print_comp_inner+0x166c>
   11978:	29ff      	cmp	r1, #255	; 0xff
   1197a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1197e:	d1f1      	bne.n	11964 <d_print_comp_inner+0xc4c>
   11980:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11984:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   11988:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1198c:	4620      	mov	r0, r4
   1198e:	4798      	blx	r3
   11990:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11994:	3301      	adds	r3, #1
   11996:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1199a:	2101      	movs	r1, #1
   1199c:	2300      	movs	r3, #0
   1199e:	e7e3      	b.n	11968 <d_print_comp_inner+0xc50>
   119a0:	686a      	ldr	r2, [r5, #4]
   119a2:	68ae      	ldr	r6, [r5, #8]
   119a4:	b10a      	cbz	r2, 119aa <d_print_comp_inner+0xc92>
   119a6:	f001 ff5b 	bl	13860 <d_print_comp>
   119aa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   119ae:	2bff      	cmp	r3, #255	; 0xff
   119b0:	f001 82b1 	beq.w	12f16 <d_print_comp_inner+0x21fe>
   119b4:	1c5a      	adds	r2, r3, #1
   119b6:	257b      	movs	r5, #123	; 0x7b
   119b8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   119bc:	4641      	mov	r1, r8
   119be:	54e5      	strb	r5, [r4, r3]
   119c0:	4632      	mov	r2, r6
   119c2:	4620      	mov	r0, r4
   119c4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   119c8:	f001 ff4a 	bl	13860 <d_print_comp>
   119cc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   119d0:	29ff      	cmp	r1, #255	; 0xff
   119d2:	f001 81e7 	beq.w	12da4 <d_print_comp_inner+0x208c>
   119d6:	1c4a      	adds	r2, r1, #1
   119d8:	237d      	movs	r3, #125	; 0x7d
   119da:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   119de:	5463      	strb	r3, [r4, r1]
   119e0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   119e4:	f7ff ba66 	b.w	10eb4 <d_print_comp_inner+0x19c>
   119e8:	f8d5 9004 	ldr.w	r9, [r5, #4]
   119ec:	68ae      	ldr	r6, [r5, #8]
   119ee:	f899 3000 	ldrb.w	r3, [r9]
   119f2:	2b31      	cmp	r3, #49	; 0x31
   119f4:	f000 87cb 	beq.w	1298e <d_print_comp_inner+0x1c76>
   119f8:	2b33      	cmp	r3, #51	; 0x33
   119fa:	f041 86d3 	bne.w	137a4 <d_print_comp_inner+0x2a8c>
   119fe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11a02:	29ff      	cmp	r1, #255	; 0xff
   11a04:	f001 84c3 	beq.w	1338e <d_print_comp_inner+0x2676>
   11a08:	1c4a      	adds	r2, r1, #1
   11a0a:	2328      	movs	r3, #40	; 0x28
   11a0c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   11a10:	5463      	strb	r3, [r4, r1]
   11a12:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   11a16:	a904      	add	r1, sp, #16
   11a18:	f8d9 2004 	ldr.w	r2, [r9, #4]
   11a1c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   11a20:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
   11a24:	4620      	mov	r0, r4
   11a26:	4641      	mov	r1, r8
   11a28:	9305      	str	r3, [sp, #20]
   11a2a:	9204      	str	r2, [sp, #16]
   11a2c:	f7ff f974 	bl	10d18 <d_print_comp_inner>
   11a30:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   11a34:	9b05      	ldr	r3, [sp, #20]
   11a36:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   11a3a:	29ff      	cmp	r1, #255	; 0xff
   11a3c:	f001 8496 	beq.w	1336c <d_print_comp_inner+0x2654>
   11a40:	2329      	movs	r3, #41	; 0x29
   11a42:	1c4a      	adds	r2, r1, #1
   11a44:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   11a48:	5463      	strb	r3, [r4, r1]
   11a4a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   11a4e:	4632      	mov	r2, r6
   11a50:	4641      	mov	r1, r8
   11a52:	4620      	mov	r0, r4
   11a54:	f002 fd2a 	bl	144ac <d_print_subexpr>
   11a58:	f7ff ba2c 	b.w	10eb4 <d_print_comp_inner+0x19c>
   11a5c:	686a      	ldr	r2, [r5, #4]
   11a5e:	f002 fce7 	bl	14430 <d_print_expr_op>
   11a62:	f7ff ba27 	b.w	10eb4 <d_print_comp_inner+0x19c>
   11a66:	f011 0f20 	tst.w	r1, #32
   11a6a:	f040 8753 	bne.w	12914 <d_print_comp_inner+0x1bfc>
   11a6e:	686a      	ldr	r2, [r5, #4]
   11a70:	b11a      	cbz	r2, 11a7a <d_print_comp_inner+0xd62>
   11a72:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   11a76:	f001 81d0 	beq.w	12e1a <d_print_comp_inner+0x2102>
   11a7a:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   11a7e:	f105 0208 	add.w	r2, r5, #8
   11a82:	4641      	mov	r1, r8
   11a84:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   11a88:	4620      	mov	r0, r4
   11a8a:	f002 fbdd 	bl	14248 <d_print_function_type.isra.11>
   11a8e:	f7ff ba11 	b.w	10eb4 <d_print_comp_inner+0x19c>
   11a92:	f011 0804 	ands.w	r8, r1, #4
   11a96:	686b      	ldr	r3, [r5, #4]
   11a98:	f040 8612 	bne.w	126c0 <d_print_comp_inner+0x19a8>
   11a9c:	e893 00a0 	ldmia.w	r3, {r5, r7}
   11aa0:	2f00      	cmp	r7, #0
   11aa2:	f43f aa07 	beq.w	10eb4 <d_print_comp_inner+0x19c>
   11aa6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11aaa:	442f      	add	r7, r5
   11aac:	e009      	b.n	11ac2 <d_print_comp_inner+0xdaa>
   11aae:	460b      	mov	r3, r1
   11ab0:	3101      	adds	r1, #1
   11ab2:	42bd      	cmp	r5, r7
   11ab4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11ab8:	54e6      	strb	r6, [r4, r3]
   11aba:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   11abe:	f43f a9f9 	beq.w	10eb4 <d_print_comp_inner+0x19c>
   11ac2:	29ff      	cmp	r1, #255	; 0xff
   11ac4:	f815 6b01 	ldrb.w	r6, [r5], #1
   11ac8:	d1f1      	bne.n	11aae <d_print_comp_inner+0xd96>
   11aca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11ace:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   11ad2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11ad6:	4620      	mov	r0, r4
   11ad8:	4798      	blx	r3
   11ada:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11ade:	3301      	adds	r3, #1
   11ae0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11ae4:	2101      	movs	r1, #1
   11ae6:	2300      	movs	r3, #0
   11ae8:	e7e3      	b.n	11ab2 <d_print_comp_inner+0xd9a>
   11aea:	6869      	ldr	r1, [r5, #4]
   11aec:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
   11af0:	780b      	ldrb	r3, [r1, #0]
   11af2:	2f00      	cmp	r7, #0
   11af4:	f040 85e1 	bne.w	126ba <d_print_comp_inner+0x19a2>
   11af8:	2b05      	cmp	r3, #5
   11afa:	f001 81c7 	beq.w	12e8c <d_print_comp_inner+0x2174>
   11afe:	2b23      	cmp	r3, #35	; 0x23
   11b00:	f000 8689 	beq.w	12816 <d_print_comp_inner+0x1afe>
   11b04:	782a      	ldrb	r2, [r5, #0]
   11b06:	429a      	cmp	r2, r3
   11b08:	f000 8685 	beq.w	12816 <d_print_comp_inner+0x1afe>
   11b0c:	2b24      	cmp	r3, #36	; 0x24
   11b0e:	f47f a9eb 	bne.w	10ee8 <d_print_comp_inner+0x1d0>
   11b12:	a814      	add	r0, sp, #80	; 0x50
   11b14:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   11b18:	684a      	ldr	r2, [r1, #4]
   11b1a:	f840 3d40 	str.w	r3, [r0, #-64]!
   11b1e:	2100      	movs	r1, #0
   11b20:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   11b24:	9505      	str	r5, [sp, #20]
   11b26:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   11b2a:	9106      	str	r1, [sp, #24]
   11b2c:	9307      	str	r3, [sp, #28]
   11b2e:	2a00      	cmp	r2, #0
   11b30:	f47f a9e8 	bne.w	10f04 <d_print_comp_inner+0x1ec>
   11b34:	f7ff b9e5 	b.w	10f02 <d_print_comp_inner+0x1ea>
   11b38:	686a      	ldr	r2, [r5, #4]
   11b3a:	f001 fe91 	bl	13860 <d_print_comp>
   11b3e:	f7ff b9b9 	b.w	10eb4 <d_print_comp_inner+0x19c>
   11b42:	ab14      	add	r3, sp, #80	; 0x50
   11b44:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
   11b48:	f843 2d40 	str.w	r2, [r3, #-64]!
   11b4c:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   11b50:	68aa      	ldr	r2, [r5, #8]
   11b52:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   11b56:	9307      	str	r3, [sp, #28]
   11b58:	2600      	movs	r6, #0
   11b5a:	9505      	str	r5, [sp, #20]
   11b5c:	9606      	str	r6, [sp, #24]
   11b5e:	f001 fe7f 	bl	13860 <d_print_comp>
   11b62:	9b06      	ldr	r3, [sp, #24]
   11b64:	b923      	cbnz	r3, 11b70 <d_print_comp_inner+0xe58>
   11b66:	462a      	mov	r2, r5
   11b68:	4641      	mov	r1, r8
   11b6a:	4620      	mov	r0, r4
   11b6c:	f001 fe88 	bl	13880 <d_print_mod>
   11b70:	9b04      	ldr	r3, [sp, #16]
   11b72:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   11b76:	f7ff b99d 	b.w	10eb4 <d_print_comp_inner+0x19c>
   11b7a:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   11b7e:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
   11b82:	f849 bd40 	str.w	fp, [r9, #-64]!
   11b86:	2200      	movs	r2, #0
   11b88:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   11b8c:	f8cd b000 	str.w	fp, [sp]
   11b90:	4659      	mov	r1, fp
   11b92:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
   11b96:	9505      	str	r5, [sp, #20]
   11b98:	9206      	str	r2, [sp, #24]
   11b9a:	9307      	str	r3, [sp, #28]
   11b9c:	2900      	cmp	r1, #0
   11b9e:	f001 83a0 	beq.w	132e2 <d_print_comp_inner+0x25ca>
   11ba2:	684b      	ldr	r3, [r1, #4]
   11ba4:	781b      	ldrb	r3, [r3, #0]
   11ba6:	3b19      	subs	r3, #25
   11ba8:	2b02      	cmp	r3, #2
   11baa:	f201 839a 	bhi.w	132e2 <d_print_comp_inner+0x25ca>
   11bae:	46ac      	mov	ip, r5
   11bb0:	2701      	movs	r7, #1
   11bb2:	460e      	mov	r6, r1
   11bb4:	464d      	mov	r5, r9
   11bb6:	e004      	b.n	11bc2 <d_print_comp_inner+0xeaa>
   11bb8:	6873      	ldr	r3, [r6, #4]
   11bba:	781b      	ldrb	r3, [r3, #0]
   11bbc:	3b19      	subs	r3, #25
   11bbe:	2b02      	cmp	r3, #2
   11bc0:	d81b      	bhi.n	11bfa <d_print_comp_inner+0xee2>
   11bc2:	68b3      	ldr	r3, [r6, #8]
   11bc4:	ea4f 1e07 	mov.w	lr, r7, lsl #4
   11bc8:	aa14      	add	r2, sp, #80	; 0x50
   11bca:	eb02 0b0e 	add.w	fp, r2, lr
   11bce:	b98b      	cbnz	r3, 11bf4 <d_print_comp_inner+0xedc>
   11bd0:	2f03      	cmp	r7, #3
   11bd2:	f201 80f9 	bhi.w	12dc8 <d_print_comp_inner+0x20b0>
   11bd6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   11bda:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
   11bde:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   11be2:	f84b 5c40 	str.w	r5, [fp, #-64]
   11be6:	2301      	movs	r3, #1
   11be8:	eb09 050e 	add.w	r5, r9, lr
   11bec:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   11bf0:	3701      	adds	r7, #1
   11bf2:	60b3      	str	r3, [r6, #8]
   11bf4:	6836      	ldr	r6, [r6, #0]
   11bf6:	2e00      	cmp	r6, #0
   11bf8:	d1de      	bne.n	11bb8 <d_print_comp_inner+0xea0>
   11bfa:	f8dc 2008 	ldr.w	r2, [ip, #8]
   11bfe:	4641      	mov	r1, r8
   11c00:	4620      	mov	r0, r4
   11c02:	4665      	mov	r5, ip
   11c04:	f001 fe2c 	bl	13860 <d_print_comp>
   11c08:	9b06      	ldr	r3, [sp, #24]
   11c0a:	9a00      	ldr	r2, [sp, #0]
   11c0c:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   11c10:	2b00      	cmp	r3, #0
   11c12:	f47f a94f 	bne.w	10eb4 <d_print_comp_inner+0x19c>
   11c16:	2f01      	cmp	r7, #1
   11c18:	d00c      	beq.n	11c34 <d_print_comp_inner+0xf1c>
   11c1a:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   11c1e:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   11c22:	3f01      	subs	r7, #1
   11c24:	4641      	mov	r1, r8
   11c26:	4620      	mov	r0, r4
   11c28:	f001 fe2a 	bl	13880 <d_print_mod>
   11c2c:	2f01      	cmp	r7, #1
   11c2e:	f1a9 0910 	sub.w	r9, r9, #16
   11c32:	d1f4      	bne.n	11c1e <d_print_comp_inner+0xf06>
   11c34:	1d2a      	adds	r2, r5, #4
   11c36:	4641      	mov	r1, r8
   11c38:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   11c3c:	4620      	mov	r0, r4
   11c3e:	f002 fa27 	bl	14090 <d_print_array_type.isra.10>
   11c42:	f7ff b937 	b.w	10eb4 <d_print_comp_inner+0x19c>
   11c46:	bf00      	nop
   11c48:	0003dcdf 	.word	0x0003dcdf
   11c4c:	0003dcd3 	.word	0x0003dcd3
   11c50:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
   11c54:	2b00      	cmp	r3, #0
   11c56:	f040 8674 	bne.w	12942 <d_print_comp_inner+0x1c2a>
   11c5a:	686a      	ldr	r2, [r5, #4]
   11c5c:	4bd5      	ldr	r3, [pc, #852]	; (11fb4 <d_print_comp_inner+0x129c>)
   11c5e:	6851      	ldr	r1, [r2, #4]
   11c60:	4299      	cmp	r1, r3
   11c62:	f000 866a 	beq.w	1293a <d_print_comp_inner+0x1c22>
   11c66:	4641      	mov	r1, r8
   11c68:	4620      	mov	r0, r4
   11c6a:	f001 fdf9 	bl	13860 <d_print_comp>
   11c6e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   11c72:	2bff      	cmp	r3, #255	; 0xff
   11c74:	f001 82b2 	beq.w	131dc <d_print_comp_inner+0x24c4>
   11c78:	1c59      	adds	r1, r3, #1
   11c7a:	2220      	movs	r2, #32
   11c7c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11c80:	54e2      	strb	r2, [r4, r3]
   11c82:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   11c86:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
   11c8a:	2b00      	cmp	r3, #0
   11c8c:	f000 8595 	beq.w	127ba <d_print_comp_inner+0x1aa2>
   11c90:	4dc9      	ldr	r5, [pc, #804]	; (11fb8 <d_print_comp_inner+0x12a0>)
   11c92:	f04f 0800 	mov.w	r8, #0
   11c96:	1daf      	adds	r7, r5, #6
   11c98:	e009      	b.n	11cae <d_print_comp_inner+0xf96>
   11c9a:	460b      	mov	r3, r1
   11c9c:	3101      	adds	r1, #1
   11c9e:	42bd      	cmp	r5, r7
   11ca0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11ca4:	54e6      	strb	r6, [r4, r3]
   11ca6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   11caa:	f43f a903 	beq.w	10eb4 <d_print_comp_inner+0x19c>
   11cae:	29ff      	cmp	r1, #255	; 0xff
   11cb0:	f815 6b01 	ldrb.w	r6, [r5], #1
   11cb4:	d1f1      	bne.n	11c9a <d_print_comp_inner+0xf82>
   11cb6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11cba:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   11cbe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11cc2:	4620      	mov	r0, r4
   11cc4:	4798      	blx	r3
   11cc6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11cca:	3301      	adds	r3, #1
   11ccc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11cd0:	2101      	movs	r1, #1
   11cd2:	2300      	movs	r3, #0
   11cd4:	e7e3      	b.n	11c9e <d_print_comp_inner+0xf86>
   11cd6:	4eb9      	ldr	r6, [pc, #740]	; (11fbc <d_print_comp_inner+0x12a4>)
   11cd8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11cdc:	f106 090e 	add.w	r9, r6, #14
   11ce0:	f04f 0800 	mov.w	r8, #0
   11ce4:	e009      	b.n	11cfa <d_print_comp_inner+0xfe2>
   11ce6:	460b      	mov	r3, r1
   11ce8:	3101      	adds	r1, #1
   11cea:	45b1      	cmp	r9, r6
   11cec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11cf0:	54e7      	strb	r7, [r4, r3]
   11cf2:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   11cf6:	f000 83b3 	beq.w	12460 <d_print_comp_inner+0x1748>
   11cfa:	29ff      	cmp	r1, #255	; 0xff
   11cfc:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   11d00:	d1f1      	bne.n	11ce6 <d_print_comp_inner+0xfce>
   11d02:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11d06:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   11d0a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11d0e:	4620      	mov	r0, r4
   11d10:	4798      	blx	r3
   11d12:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11d16:	3301      	adds	r3, #1
   11d18:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11d1c:	2101      	movs	r1, #1
   11d1e:	2300      	movs	r3, #0
   11d20:	e7e3      	b.n	11cea <d_print_comp_inner+0xfd2>
   11d22:	4ea7      	ldr	r6, [pc, #668]	; (11fc0 <d_print_comp_inner+0x12a8>)
   11d24:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11d28:	f106 0a1a 	add.w	sl, r6, #26
   11d2c:	f04f 0900 	mov.w	r9, #0
   11d30:	e009      	b.n	11d46 <d_print_comp_inner+0x102e>
   11d32:	460b      	mov	r3, r1
   11d34:	3101      	adds	r1, #1
   11d36:	4556      	cmp	r6, sl
   11d38:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11d3c:	54e7      	strb	r7, [r4, r3]
   11d3e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   11d42:	f000 82ef 	beq.w	12324 <d_print_comp_inner+0x160c>
   11d46:	29ff      	cmp	r1, #255	; 0xff
   11d48:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   11d4c:	d1f1      	bne.n	11d32 <d_print_comp_inner+0x101a>
   11d4e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11d52:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   11d56:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11d5a:	4620      	mov	r0, r4
   11d5c:	4798      	blx	r3
   11d5e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11d62:	3301      	adds	r3, #1
   11d64:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11d68:	2101      	movs	r1, #1
   11d6a:	2300      	movs	r3, #0
   11d6c:	e7e3      	b.n	11d36 <d_print_comp_inner+0x101e>
   11d6e:	6869      	ldr	r1, [r5, #4]
   11d70:	f7fc ff2a 	bl	ebc8 <d_find_pack>
   11d74:	f04f 0900 	mov.w	r9, #0
   11d78:	2800      	cmp	r0, #0
   11d7a:	f001 835d 	beq.w	13438 <d_print_comp_inner+0x2720>
   11d7e:	7803      	ldrb	r3, [r0, #0]
   11d80:	2b2f      	cmp	r3, #47	; 0x2f
   11d82:	f040 8457 	bne.w	12634 <d_print_comp_inner+0x191c>
   11d86:	6843      	ldr	r3, [r0, #4]
   11d88:	2b00      	cmp	r3, #0
   11d8a:	f000 8453 	beq.w	12634 <d_print_comp_inner+0x191c>
   11d8e:	6880      	ldr	r0, [r0, #8]
   11d90:	f109 0901 	add.w	r9, r9, #1
   11d94:	2800      	cmp	r0, #0
   11d96:	d1f2      	bne.n	11d7e <d_print_comp_inner+0x1066>
   11d98:	686b      	ldr	r3, [r5, #4]
   11d9a:	9300      	str	r3, [sp, #0]
   11d9c:	f109 33ff 	add.w	r3, r9, #4294967295
   11da0:	9301      	str	r3, [sp, #4]
   11da2:	f04f 0a00 	mov.w	sl, #0
   11da6:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   11daa:	9a00      	ldr	r2, [sp, #0]
   11dac:	4641      	mov	r1, r8
   11dae:	4620      	mov	r0, r4
   11db0:	f001 fd56 	bl	13860 <d_print_comp>
   11db4:	9b01      	ldr	r3, [sp, #4]
   11db6:	42bb      	cmp	r3, r7
   11db8:	f340 81ab 	ble.w	12112 <d_print_comp_inner+0x13fa>
   11dbc:	4d81      	ldr	r5, [pc, #516]	; (11fc4 <d_print_comp_inner+0x12ac>)
   11dbe:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   11dc2:	f105 0b02 	add.w	fp, r5, #2
   11dc6:	e009      	b.n	11ddc <d_print_comp_inner+0x10c4>
   11dc8:	460b      	mov	r3, r1
   11dca:	3101      	adds	r1, #1
   11dcc:	45ab      	cmp	fp, r5
   11dce:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11dd2:	54e6      	strb	r6, [r4, r3]
   11dd4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   11dd8:	f000 819b 	beq.w	12112 <d_print_comp_inner+0x13fa>
   11ddc:	29ff      	cmp	r1, #255	; 0xff
   11dde:	f815 6b01 	ldrb.w	r6, [r5], #1
   11de2:	d1f1      	bne.n	11dc8 <d_print_comp_inner+0x10b0>
   11de4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11de8:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   11dec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11df0:	4620      	mov	r0, r4
   11df2:	4798      	blx	r3
   11df4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11df8:	3301      	adds	r3, #1
   11dfa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11dfe:	2101      	movs	r1, #1
   11e00:	2300      	movs	r3, #0
   11e02:	e7e3      	b.n	11dcc <d_print_comp_inner+0x10b4>
   11e04:	4e70      	ldr	r6, [pc, #448]	; (11fc8 <d_print_comp_inner+0x12b0>)
   11e06:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11e0a:	f106 0a16 	add.w	sl, r6, #22
   11e0e:	f04f 0900 	mov.w	r9, #0
   11e12:	e009      	b.n	11e28 <d_print_comp_inner+0x1110>
   11e14:	460b      	mov	r3, r1
   11e16:	3101      	adds	r1, #1
   11e18:	45b2      	cmp	sl, r6
   11e1a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11e1e:	54e7      	strb	r7, [r4, r3]
   11e20:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   11e24:	f000 835f 	beq.w	124e6 <d_print_comp_inner+0x17ce>
   11e28:	29ff      	cmp	r1, #255	; 0xff
   11e2a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   11e2e:	d1f1      	bne.n	11e14 <d_print_comp_inner+0x10fc>
   11e30:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11e34:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   11e38:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11e3c:	4620      	mov	r0, r4
   11e3e:	4798      	blx	r3
   11e40:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11e44:	3301      	adds	r3, #1
   11e46:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11e4a:	2101      	movs	r1, #1
   11e4c:	2300      	movs	r3, #0
   11e4e:	e7e3      	b.n	11e18 <d_print_comp_inner+0x1100>
   11e50:	4e5e      	ldr	r6, [pc, #376]	; (11fcc <d_print_comp_inner+0x12b4>)
   11e52:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11e56:	f106 0a0e 	add.w	sl, r6, #14
   11e5a:	f04f 0900 	mov.w	r9, #0
   11e5e:	e009      	b.n	11e74 <d_print_comp_inner+0x115c>
   11e60:	460b      	mov	r3, r1
   11e62:	3101      	adds	r1, #1
   11e64:	4556      	cmp	r6, sl
   11e66:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11e6a:	54e7      	strb	r7, [r4, r3]
   11e6c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   11e70:	f000 83a0 	beq.w	125b4 <d_print_comp_inner+0x189c>
   11e74:	29ff      	cmp	r1, #255	; 0xff
   11e76:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   11e7a:	d1f1      	bne.n	11e60 <d_print_comp_inner+0x1148>
   11e7c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11e80:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   11e84:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11e88:	4620      	mov	r0, r4
   11e8a:	4798      	blx	r3
   11e8c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11e90:	3301      	adds	r3, #1
   11e92:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11e96:	2101      	movs	r1, #1
   11e98:	2300      	movs	r3, #0
   11e9a:	e7e3      	b.n	11e64 <d_print_comp_inner+0x114c>
   11e9c:	686a      	ldr	r2, [r5, #4]
   11e9e:	7811      	ldrb	r1, [r2, #0]
   11ea0:	2927      	cmp	r1, #39	; 0x27
   11ea2:	f000 8615 	beq.w	12ad0 <d_print_comp_inner+0x1db8>
   11ea6:	2600      	movs	r6, #0
   11ea8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   11eac:	29ff      	cmp	r1, #255	; 0xff
   11eae:	f001 80c5 	beq.w	1303c <d_print_comp_inner+0x2324>
   11eb2:	2328      	movs	r3, #40	; 0x28
   11eb4:	1c4a      	adds	r2, r1, #1
   11eb6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   11eba:	5463      	strb	r3, [r4, r1]
   11ebc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   11ec0:	686a      	ldr	r2, [r5, #4]
   11ec2:	4641      	mov	r1, r8
   11ec4:	4620      	mov	r0, r4
   11ec6:	f001 fccb 	bl	13860 <d_print_comp>
   11eca:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   11ece:	2bff      	cmp	r3, #255	; 0xff
   11ed0:	f001 8099 	beq.w	13006 <d_print_comp_inner+0x22ee>
   11ed4:	1c59      	adds	r1, r3, #1
   11ed6:	2229      	movs	r2, #41	; 0x29
   11ed8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11edc:	54e2      	strb	r2, [r4, r3]
   11ede:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   11ee2:	782b      	ldrb	r3, [r5, #0]
   11ee4:	2b3d      	cmp	r3, #61	; 0x3d
   11ee6:	f000 86e6 	beq.w	12cb6 <d_print_comp_inner+0x1f9e>
   11eea:	2e08      	cmp	r6, #8
   11eec:	f000 867f 	beq.w	12bee <d_print_comp_inner+0x1ed6>
   11ef0:	68aa      	ldr	r2, [r5, #8]
   11ef2:	4641      	mov	r1, r8
   11ef4:	4620      	mov	r0, r4
   11ef6:	f001 fcb3 	bl	13860 <d_print_comp>
   11efa:	f7fe bfdb 	b.w	10eb4 <d_print_comp_inner+0x19c>
   11efe:	2301      	movs	r3, #1
   11f00:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   11f04:	f7fe bfd6 	b.w	10eb4 <d_print_comp_inner+0x19c>
   11f08:	686a      	ldr	r2, [r5, #4]
   11f0a:	4931      	ldr	r1, [pc, #196]	; (11fd0 <d_print_comp_inner+0x12b8>)
   11f0c:	a804      	add	r0, sp, #16
   11f0e:	f006 fcb9 	bl	18884 <sprintf>
   11f12:	a804      	add	r0, sp, #16
   11f14:	f007 f894 	bl	19040 <strlen>
   11f18:	2800      	cmp	r0, #0
   11f1a:	f43e afcb 	beq.w	10eb4 <d_print_comp_inner+0x19c>
   11f1e:	ad04      	add	r5, sp, #16
   11f20:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   11f24:	182f      	adds	r7, r5, r0
   11f26:	f04f 0800 	mov.w	r8, #0
   11f2a:	e009      	b.n	11f40 <d_print_comp_inner+0x1228>
   11f2c:	460b      	mov	r3, r1
   11f2e:	3101      	adds	r1, #1
   11f30:	42bd      	cmp	r5, r7
   11f32:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11f36:	54e6      	strb	r6, [r4, r3]
   11f38:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   11f3c:	f43e afba 	beq.w	10eb4 <d_print_comp_inner+0x19c>
   11f40:	29ff      	cmp	r1, #255	; 0xff
   11f42:	f815 6b01 	ldrb.w	r6, [r5], #1
   11f46:	d1f1      	bne.n	11f2c <d_print_comp_inner+0x1214>
   11f48:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11f4c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   11f50:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11f54:	4620      	mov	r0, r4
   11f56:	4798      	blx	r3
   11f58:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11f5c:	3301      	adds	r3, #1
   11f5e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11f62:	2101      	movs	r1, #1
   11f64:	2300      	movs	r3, #0
   11f66:	e7e3      	b.n	11f30 <d_print_comp_inner+0x1218>
   11f68:	4e1a      	ldr	r6, [pc, #104]	; (11fd4 <d_print_comp_inner+0x12bc>)
   11f6a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11f6e:	f106 0a1c 	add.w	sl, r6, #28
   11f72:	f04f 0900 	mov.w	r9, #0
   11f76:	e009      	b.n	11f8c <d_print_comp_inner+0x1274>
   11f78:	460b      	mov	r3, r1
   11f7a:	3101      	adds	r1, #1
   11f7c:	4556      	cmp	r6, sl
   11f7e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11f82:	54e7      	strb	r7, [r4, r3]
   11f84:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   11f88:	f000 82fa 	beq.w	12580 <d_print_comp_inner+0x1868>
   11f8c:	29ff      	cmp	r1, #255	; 0xff
   11f8e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   11f92:	d1f1      	bne.n	11f78 <d_print_comp_inner+0x1260>
   11f94:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11f98:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   11f9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11fa0:	4620      	mov	r0, r4
   11fa2:	4798      	blx	r3
   11fa4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11fa8:	3301      	adds	r3, #1
   11faa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11fae:	2101      	movs	r1, #1
   11fb0:	2300      	movs	r3, #0
   11fb2:	e7e3      	b.n	11f7c <d_print_comp_inner+0x1264>
   11fb4:	0003d4a0 	.word	0x0003d4a0
   11fb8:	0003dcc0 	.word	0x0003dcc0
   11fbc:	0003dd9b 	.word	0x0003dd9b
   11fc0:	0003dc9b 	.word	0x0003dc9b
   11fc4:	0003dcd0 	.word	0x0003dcd0
   11fc8:	0003dc9f 	.word	0x0003dc9f
   11fcc:	0003dd1b 	.word	0x0003dd1b
   11fd0:	0003cbdc 	.word	0x0003cbdc
   11fd4:	0003dd6b 	.word	0x0003dd6b
   11fd8:	68ab      	ldr	r3, [r5, #8]
   11fda:	781a      	ldrb	r2, [r3, #0]
   11fdc:	2a3a      	cmp	r2, #58	; 0x3a
   11fde:	f47e af7d 	bne.w	10edc <d_print_comp_inner+0x1c4>
   11fe2:	689b      	ldr	r3, [r3, #8]
   11fe4:	781b      	ldrb	r3, [r3, #0]
   11fe6:	2b3b      	cmp	r3, #59	; 0x3b
   11fe8:	f47e af78 	bne.w	10edc <d_print_comp_inner+0x1c4>
   11fec:	f105 0308 	add.w	r3, r5, #8
   11ff0:	686a      	ldr	r2, [r5, #4]
   11ff2:	f002 fabf 	bl	14574 <d_maybe_print_fold_expression.isra.15>
   11ff6:	4606      	mov	r6, r0
   11ff8:	2800      	cmp	r0, #0
   11ffa:	f47e af5b 	bne.w	10eb4 <d_print_comp_inner+0x19c>
   11ffe:	f8d5 a004 	ldr.w	sl, [r5, #4]
   12002:	68aa      	ldr	r2, [r5, #8]
   12004:	f8da 1004 	ldr.w	r1, [sl, #4]
   12008:	6893      	ldr	r3, [r2, #8]
   1200a:	6808      	ldr	r0, [r1, #0]
   1200c:	49d6      	ldr	r1, [pc, #856]	; (12368 <d_print_comp_inner+0x1650>)
   1200e:	f8d2 9004 	ldr.w	r9, [r2, #4]
   12012:	685f      	ldr	r7, [r3, #4]
   12014:	689d      	ldr	r5, [r3, #8]
   12016:	f006 fca7 	bl	18968 <strcmp>
   1201a:	2800      	cmp	r0, #0
   1201c:	f001 82e2 	beq.w	135e4 <d_print_comp_inner+0x28cc>
   12020:	2204      	movs	r2, #4
   12022:	49d2      	ldr	r1, [pc, #840]	; (1236c <d_print_comp_inner+0x1654>)
   12024:	4620      	mov	r0, r4
   12026:	f7fc fba3 	bl	e770 <d_append_buffer>
   1202a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1202e:	b183      	cbz	r3, 12052 <d_print_comp_inner+0x133a>
   12030:	4641      	mov	r1, r8
   12032:	464a      	mov	r2, r9
   12034:	4620      	mov	r0, r4
   12036:	f002 fa39 	bl	144ac <d_print_subexpr>
   1203a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1203e:	29ff      	cmp	r1, #255	; 0xff
   12040:	f001 83ec 	beq.w	1381c <d_print_comp_inner+0x2b04>
   12044:	2320      	movs	r3, #32
   12046:	1c4a      	adds	r2, r1, #1
   12048:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1204c:	5463      	strb	r3, [r4, r1]
   1204e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   12052:	463a      	mov	r2, r7
   12054:	4641      	mov	r1, r8
   12056:	4620      	mov	r0, r4
   12058:	f001 fc02 	bl	13860 <d_print_comp>
   1205c:	2d00      	cmp	r5, #0
   1205e:	f43e af29 	beq.w	10eb4 <d_print_comp_inner+0x19c>
   12062:	462a      	mov	r2, r5
   12064:	4641      	mov	r1, r8
   12066:	4620      	mov	r0, r4
   12068:	f002 fa20 	bl	144ac <d_print_subexpr>
   1206c:	f7fe bf22 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12070:	4ebf      	ldr	r6, [pc, #764]	; (12370 <d_print_comp_inner+0x1658>)
   12072:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   12076:	f106 0a08 	add.w	sl, r6, #8
   1207a:	f04f 0900 	mov.w	r9, #0
   1207e:	e009      	b.n	12094 <d_print_comp_inner+0x137c>
   12080:	460b      	mov	r3, r1
   12082:	3101      	adds	r1, #1
   12084:	4556      	cmp	r6, sl
   12086:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1208a:	54e7      	strb	r7, [r4, r3]
   1208c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   12090:	f000 80d8 	beq.w	12244 <d_print_comp_inner+0x152c>
   12094:	29ff      	cmp	r1, #255	; 0xff
   12096:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1209a:	d1f1      	bne.n	12080 <d_print_comp_inner+0x1368>
   1209c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   120a0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   120a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   120a8:	4620      	mov	r0, r4
   120aa:	4798      	blx	r3
   120ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   120b0:	3301      	adds	r3, #1
   120b2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   120b6:	2101      	movs	r1, #1
   120b8:	2300      	movs	r3, #0
   120ba:	e7e3      	b.n	12084 <d_print_comp_inner+0x136c>
   120bc:	4ead      	ldr	r6, [pc, #692]	; (12374 <d_print_comp_inner+0x165c>)
   120be:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   120c2:	f106 0a1d 	add.w	sl, r6, #29
   120c6:	f04f 0900 	mov.w	r9, #0
   120ca:	e009      	b.n	120e0 <d_print_comp_inner+0x13c8>
   120cc:	460b      	mov	r3, r1
   120ce:	3101      	adds	r1, #1
   120d0:	45b2      	cmp	sl, r6
   120d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   120d6:	54e7      	strb	r7, [r4, r3]
   120d8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   120dc:	f000 81fc 	beq.w	124d8 <d_print_comp_inner+0x17c0>
   120e0:	29ff      	cmp	r1, #255	; 0xff
   120e2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   120e6:	d1f1      	bne.n	120cc <d_print_comp_inner+0x13b4>
   120e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   120ec:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   120f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   120f4:	4620      	mov	r0, r4
   120f6:	4798      	blx	r3
   120f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   120fc:	3301      	adds	r3, #1
   120fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   12102:	2101      	movs	r1, #1
   12104:	2300      	movs	r3, #0
   12106:	e7e3      	b.n	120d0 <d_print_comp_inner+0x13b8>
   12108:	2301      	movs	r3, #1
   1210a:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   1210e:	f7fe bed1 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12112:	3701      	adds	r7, #1
   12114:	454f      	cmp	r7, r9
   12116:	f47f ae46 	bne.w	11da6 <d_print_comp_inner+0x108e>
   1211a:	f7fe becb 	b.w	10eb4 <d_print_comp_inner+0x19c>
   1211e:	6876      	ldr	r6, [r6, #4]
   12120:	2e00      	cmp	r6, #0
   12122:	f001 806e 	beq.w	13202 <d_print_comp_inner+0x24ea>
   12126:	2f04      	cmp	r7, #4
   12128:	f103 0310 	add.w	r3, r3, #16
   1212c:	f47f a9bd 	bne.w	114aa <d_print_comp_inner+0x792>
   12130:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   12134:	2301      	movs	r3, #1
   12136:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   1213a:	f7fe bebb 	b.w	10eb4 <d_print_comp_inner+0x19c>
   1213e:	4e8e      	ldr	r6, [pc, #568]	; (12378 <d_print_comp_inner+0x1660>)
   12140:	686a      	ldr	r2, [r5, #4]
   12142:	4641      	mov	r1, r8
   12144:	4620      	mov	r0, r4
   12146:	f001 fb8b 	bl	13860 <d_print_comp>
   1214a:	f106 0a04 	add.w	sl, r6, #4
   1214e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   12152:	f04f 0900 	mov.w	r9, #0
   12156:	e008      	b.n	1216a <d_print_comp_inner+0x1452>
   12158:	460b      	mov	r3, r1
   1215a:	3101      	adds	r1, #1
   1215c:	45b2      	cmp	sl, r6
   1215e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12162:	54e7      	strb	r7, [r4, r3]
   12164:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   12168:	d013      	beq.n	12192 <d_print_comp_inner+0x147a>
   1216a:	29ff      	cmp	r1, #255	; 0xff
   1216c:	f816 7b01 	ldrb.w	r7, [r6], #1
   12170:	d1f2      	bne.n	12158 <d_print_comp_inner+0x1440>
   12172:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12176:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1217a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1217e:	4620      	mov	r0, r4
   12180:	4798      	blx	r3
   12182:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   12186:	3301      	adds	r3, #1
   12188:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1218c:	2101      	movs	r1, #1
   1218e:	2300      	movs	r3, #0
   12190:	e7e4      	b.n	1215c <d_print_comp_inner+0x1444>
   12192:	68aa      	ldr	r2, [r5, #8]
   12194:	4641      	mov	r1, r8
   12196:	4620      	mov	r0, r4
   12198:	f001 fb62 	bl	13860 <d_print_comp>
   1219c:	f7fe be8a 	b.w	10eb4 <d_print_comp_inner+0x19c>
   121a0:	686a      	ldr	r2, [r5, #4]
   121a2:	4641      	mov	r1, r8
   121a4:	4620      	mov	r0, r4
   121a6:	f001 fb5b 	bl	13860 <d_print_comp>
   121aa:	f7fe be83 	b.w	10eb4 <d_print_comp_inner+0x19c>
   121ae:	686a      	ldr	r2, [r5, #4]
   121b0:	4641      	mov	r1, r8
   121b2:	4620      	mov	r0, r4
   121b4:	f001 fb54 	bl	13860 <d_print_comp>
   121b8:	f7fe be7c 	b.w	10eb4 <d_print_comp_inner+0x19c>
   121bc:	686a      	ldr	r2, [r5, #4]
   121be:	4641      	mov	r1, r8
   121c0:	4620      	mov	r0, r4
   121c2:	f001 fb4d 	bl	13860 <d_print_comp>
   121c6:	f7fe be75 	b.w	10eb4 <d_print_comp_inner+0x19c>
   121ca:	686a      	ldr	r2, [r5, #4]
   121cc:	4641      	mov	r1, r8
   121ce:	4620      	mov	r0, r4
   121d0:	f001 fb46 	bl	13860 <d_print_comp>
   121d4:	f7fe be6e 	b.w	10eb4 <d_print_comp_inner+0x19c>
   121d8:	686a      	ldr	r2, [r5, #4]
   121da:	4641      	mov	r1, r8
   121dc:	4620      	mov	r0, r4
   121de:	f001 fb3f 	bl	13860 <d_print_comp>
   121e2:	f7fe be67 	b.w	10eb4 <d_print_comp_inner+0x19c>
   121e6:	686a      	ldr	r2, [r5, #4]
   121e8:	4641      	mov	r1, r8
   121ea:	4620      	mov	r0, r4
   121ec:	f001 fb38 	bl	13860 <d_print_comp>
   121f0:	f7fe be60 	b.w	10eb4 <d_print_comp_inner+0x19c>
   121f4:	686a      	ldr	r2, [r5, #4]
   121f6:	4641      	mov	r1, r8
   121f8:	4620      	mov	r0, r4
   121fa:	f001 fb31 	bl	13860 <d_print_comp>
   121fe:	f7fe be59 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12202:	686a      	ldr	r2, [r5, #4]
   12204:	4641      	mov	r1, r8
   12206:	4620      	mov	r0, r4
   12208:	f001 fb2a 	bl	13860 <d_print_comp>
   1220c:	f7fe be52 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12210:	686a      	ldr	r2, [r5, #4]
   12212:	4641      	mov	r1, r8
   12214:	4620      	mov	r0, r4
   12216:	f001 fb23 	bl	13860 <d_print_comp>
   1221a:	f7fe be4b 	b.w	10eb4 <d_print_comp_inner+0x19c>
   1221e:	4641      	mov	r1, r8
   12220:	68aa      	ldr	r2, [r5, #8]
   12222:	4620      	mov	r0, r4
   12224:	f001 fb1c 	bl	13860 <d_print_comp>
   12228:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1222c:	29ff      	cmp	r1, #255	; 0xff
   1222e:	f000 8560 	beq.w	12cf2 <d_print_comp_inner+0x1fda>
   12232:	1c4a      	adds	r2, r1, #1
   12234:	235d      	movs	r3, #93	; 0x5d
   12236:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1223a:	5463      	strb	r3, [r4, r1]
   1223c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   12240:	f7fe be38 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12244:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   12248:	4e4c      	ldr	r6, [pc, #304]	; (1237c <d_print_comp_inner+0x1664>)
   1224a:	3301      	adds	r3, #1
   1224c:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   12250:	4641      	mov	r1, r8
   12252:	686a      	ldr	r2, [r5, #4]
   12254:	4620      	mov	r0, r4
   12256:	f001 fb03 	bl	13860 <d_print_comp>
   1225a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1225e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   12262:	3b01      	subs	r3, #1
   12264:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   12268:	f106 0902 	add.w	r9, r6, #2
   1226c:	f04f 0800 	mov.w	r8, #0
   12270:	e008      	b.n	12284 <d_print_comp_inner+0x156c>
   12272:	460b      	mov	r3, r1
   12274:	3101      	adds	r1, #1
   12276:	454e      	cmp	r6, r9
   12278:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1227c:	54e7      	strb	r7, [r4, r3]
   1227e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   12282:	d013      	beq.n	122ac <d_print_comp_inner+0x1594>
   12284:	29ff      	cmp	r1, #255	; 0xff
   12286:	f816 7b01 	ldrb.w	r7, [r6], #1
   1228a:	d1f2      	bne.n	12272 <d_print_comp_inner+0x155a>
   1228c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12290:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   12294:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12298:	4620      	mov	r0, r4
   1229a:	4798      	blx	r3
   1229c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   122a0:	3301      	adds	r3, #1
   122a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   122a6:	2101      	movs	r1, #1
   122a8:	2300      	movs	r3, #0
   122aa:	e7e4      	b.n	12276 <d_print_comp_inner+0x155e>
   122ac:	68aa      	ldr	r2, [r5, #8]
   122ae:	4934      	ldr	r1, [pc, #208]	; (12380 <d_print_comp_inner+0x1668>)
   122b0:	3201      	adds	r2, #1
   122b2:	a804      	add	r0, sp, #16
   122b4:	f006 fae6 	bl	18884 <sprintf>
   122b8:	a804      	add	r0, sp, #16
   122ba:	f006 fec1 	bl	19040 <strlen>
   122be:	b318      	cbz	r0, 12308 <d_print_comp_inner+0x15f0>
   122c0:	ad04      	add	r5, sp, #16
   122c2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   122c6:	182f      	adds	r7, r5, r0
   122c8:	f04f 0800 	mov.w	r8, #0
   122cc:	e008      	b.n	122e0 <d_print_comp_inner+0x15c8>
   122ce:	460b      	mov	r3, r1
   122d0:	3101      	adds	r1, #1
   122d2:	42af      	cmp	r7, r5
   122d4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   122d8:	54e6      	strb	r6, [r4, r3]
   122da:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   122de:	d015      	beq.n	1230c <d_print_comp_inner+0x15f4>
   122e0:	29ff      	cmp	r1, #255	; 0xff
   122e2:	f815 6b01 	ldrb.w	r6, [r5], #1
   122e6:	d1f2      	bne.n	122ce <d_print_comp_inner+0x15b6>
   122e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   122ec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   122f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   122f4:	4620      	mov	r0, r4
   122f6:	4798      	blx	r3
   122f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   122fc:	3301      	adds	r3, #1
   122fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   12302:	2101      	movs	r1, #1
   12304:	2300      	movs	r3, #0
   12306:	e7e4      	b.n	122d2 <d_print_comp_inner+0x15ba>
   12308:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1230c:	29ff      	cmp	r1, #255	; 0xff
   1230e:	f000 8560 	beq.w	12dd2 <d_print_comp_inner+0x20ba>
   12312:	1c4a      	adds	r2, r1, #1
   12314:	237d      	movs	r3, #125	; 0x7d
   12316:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1231a:	5463      	strb	r3, [r4, r1]
   1231c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   12320:	f7fe bdc8 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12324:	686a      	ldr	r2, [r5, #4]
   12326:	4641      	mov	r1, r8
   12328:	4620      	mov	r0, r4
   1232a:	f001 fa99 	bl	13860 <d_print_comp>
   1232e:	f7fe bdc1 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12332:	4641      	mov	r1, r8
   12334:	68aa      	ldr	r2, [r5, #8]
   12336:	4620      	mov	r0, r4
   12338:	f001 fa92 	bl	13860 <d_print_comp>
   1233c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   12340:	29ff      	cmp	r1, #255	; 0xff
   12342:	f000 850b 	beq.w	12d5c <d_print_comp_inner+0x2044>
   12346:	1c4a      	adds	r2, r1, #1
   12348:	235d      	movs	r3, #93	; 0x5d
   1234a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1234e:	5463      	strb	r3, [r4, r1]
   12350:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   12354:	f7fe bdae 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12358:	686a      	ldr	r2, [r5, #4]
   1235a:	4641      	mov	r1, r8
   1235c:	4620      	mov	r0, r4
   1235e:	f001 fa7f 	bl	13860 <d_print_comp>
   12362:	f7fe bda7 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12366:	bf00      	nop
   12368:	0003db08 	.word	0x0003db08
   1236c:	0003dd00 	.word	0x0003dd00
   12370:	0003dd8b 	.word	0x0003dd8b
   12374:	0003dd4b 	.word	0x0003dd4b
   12378:	0003dba4 	.word	0x0003dba4
   1237c:	0003dd98 	.word	0x0003dd98
   12380:	0003cbdc 	.word	0x0003cbdc
   12384:	f8da 5004 	ldr.w	r5, [sl, #4]
   12388:	782b      	ldrb	r3, [r5, #0]
   1238a:	3b61      	subs	r3, #97	; 0x61
   1238c:	2b19      	cmp	r3, #25
   1238e:	d809      	bhi.n	123a4 <d_print_comp_inner+0x168c>
   12390:	29ff      	cmp	r1, #255	; 0xff
   12392:	f000 8793 	beq.w	132bc <d_print_comp_inner+0x25a4>
   12396:	2320      	movs	r3, #32
   12398:	1c4a      	adds	r2, r1, #1
   1239a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1239e:	5463      	strb	r3, [r4, r1]
   123a0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   123a4:	19eb      	adds	r3, r5, r7
   123a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   123aa:	2b20      	cmp	r3, #32
   123ac:	bf08      	it	eq
   123ae:	f107 37ff 	addeq.w	r7, r7, #4294967295
   123b2:	2f00      	cmp	r7, #0
   123b4:	f43e ad7e 	beq.w	10eb4 <d_print_comp_inner+0x19c>
   123b8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   123bc:	442f      	add	r7, r5
   123be:	f04f 0800 	mov.w	r8, #0
   123c2:	e009      	b.n	123d8 <d_print_comp_inner+0x16c0>
   123c4:	460b      	mov	r3, r1
   123c6:	3101      	adds	r1, #1
   123c8:	42af      	cmp	r7, r5
   123ca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   123ce:	54e6      	strb	r6, [r4, r3]
   123d0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   123d4:	f43e ad6e 	beq.w	10eb4 <d_print_comp_inner+0x19c>
   123d8:	29ff      	cmp	r1, #255	; 0xff
   123da:	f815 6b01 	ldrb.w	r6, [r5], #1
   123de:	d1f1      	bne.n	123c4 <d_print_comp_inner+0x16ac>
   123e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   123e4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   123e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   123ec:	4620      	mov	r0, r4
   123ee:	4798      	blx	r3
   123f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   123f4:	3301      	adds	r3, #1
   123f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   123fa:	2101      	movs	r1, #1
   123fc:	2300      	movs	r3, #0
   123fe:	e7e3      	b.n	123c8 <d_print_comp_inner+0x16b0>
   12400:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   12404:	b13a      	cbz	r2, 12416 <d_print_comp_inner+0x16fe>
   12406:	ab14      	add	r3, sp, #80	; 0x50
   12408:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
   1240c:	f843 1d48 	str.w	r1, [r3, #-72]!
   12410:	9203      	str	r2, [sp, #12]
   12412:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   12416:	686b      	ldr	r3, [r5, #4]
   12418:	781a      	ldrb	r2, [r3, #0]
   1241a:	2a04      	cmp	r2, #4
   1241c:	f000 830e 	beq.w	12a3c <d_print_comp_inner+0x1d24>
   12420:	a804      	add	r0, sp, #16
   12422:	461a      	mov	r2, r3
   12424:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   12428:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
   1242c:	4641      	mov	r1, r8
   1242e:	4620      	mov	r0, r4
   12430:	9304      	str	r3, [sp, #16]
   12432:	9505      	str	r5, [sp, #20]
   12434:	f7fe fc70 	bl	10d18 <d_print_comp_inner>
   12438:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   1243c:	9a05      	ldr	r2, [sp, #20]
   1243e:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   12442:	2b00      	cmp	r3, #0
   12444:	f43e ad36 	beq.w	10eb4 <d_print_comp_inner+0x19c>
   12448:	9b02      	ldr	r3, [sp, #8]
   1244a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1244e:	f7fe bd31 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12452:	68aa      	ldr	r2, [r5, #8]
   12454:	4641      	mov	r1, r8
   12456:	4620      	mov	r0, r4
   12458:	f001 fa02 	bl	13860 <d_print_comp>
   1245c:	f7fe bd2a 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12460:	686a      	ldr	r2, [r5, #4]
   12462:	49d8      	ldr	r1, [pc, #864]	; (127c4 <d_print_comp_inner+0x1aac>)
   12464:	3201      	adds	r2, #1
   12466:	a804      	add	r0, sp, #16
   12468:	f006 fa0c 	bl	18884 <sprintf>
   1246c:	a804      	add	r0, sp, #16
   1246e:	f006 fde7 	bl	19040 <strlen>
   12472:	b318      	cbz	r0, 124bc <d_print_comp_inner+0x17a4>
   12474:	ad04      	add	r5, sp, #16
   12476:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1247a:	182f      	adds	r7, r5, r0
   1247c:	f04f 0800 	mov.w	r8, #0
   12480:	e008      	b.n	12494 <d_print_comp_inner+0x177c>
   12482:	460b      	mov	r3, r1
   12484:	3101      	adds	r1, #1
   12486:	42bd      	cmp	r5, r7
   12488:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1248c:	54e6      	strb	r6, [r4, r3]
   1248e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   12492:	d015      	beq.n	124c0 <d_print_comp_inner+0x17a8>
   12494:	29ff      	cmp	r1, #255	; 0xff
   12496:	f815 6b01 	ldrb.w	r6, [r5], #1
   1249a:	d1f2      	bne.n	12482 <d_print_comp_inner+0x176a>
   1249c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   124a0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   124a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   124a8:	4620      	mov	r0, r4
   124aa:	4798      	blx	r3
   124ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   124b0:	3301      	adds	r3, #1
   124b2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   124b6:	2101      	movs	r1, #1
   124b8:	2300      	movs	r3, #0
   124ba:	e7e4      	b.n	12486 <d_print_comp_inner+0x176e>
   124bc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   124c0:	29ff      	cmp	r1, #255	; 0xff
   124c2:	f000 8404 	beq.w	12cce <d_print_comp_inner+0x1fb6>
   124c6:	1c4a      	adds	r2, r1, #1
   124c8:	237d      	movs	r3, #125	; 0x7d
   124ca:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   124ce:	5463      	strb	r3, [r4, r1]
   124d0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   124d4:	f7fe bcee 	b.w	10eb4 <d_print_comp_inner+0x19c>
   124d8:	686a      	ldr	r2, [r5, #4]
   124da:	4641      	mov	r1, r8
   124dc:	4620      	mov	r0, r4
   124de:	f001 f9bf 	bl	13860 <d_print_comp>
   124e2:	f7fe bce7 	b.w	10eb4 <d_print_comp_inner+0x19c>
   124e6:	686a      	ldr	r2, [r5, #4]
   124e8:	4641      	mov	r1, r8
   124ea:	4620      	mov	r0, r4
   124ec:	f001 f9b8 	bl	13860 <d_print_comp>
   124f0:	f7fe bce0 	b.w	10eb4 <d_print_comp_inner+0x19c>
   124f4:	686a      	ldr	r2, [r5, #4]
   124f6:	4641      	mov	r1, r8
   124f8:	4620      	mov	r0, r4
   124fa:	f001 f9b1 	bl	13860 <d_print_comp>
   124fe:	f7fe bcd9 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12502:	4eb1      	ldr	r6, [pc, #708]	; (127c8 <d_print_comp_inner+0x1ab0>)
   12504:	68aa      	ldr	r2, [r5, #8]
   12506:	4641      	mov	r1, r8
   12508:	4620      	mov	r0, r4
   1250a:	f001 f9a9 	bl	13860 <d_print_comp>
   1250e:	f106 0a05 	add.w	sl, r6, #5
   12512:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   12516:	f04f 0900 	mov.w	r9, #0
   1251a:	e008      	b.n	1252e <d_print_comp_inner+0x1816>
   1251c:	460b      	mov	r3, r1
   1251e:	3101      	adds	r1, #1
   12520:	4556      	cmp	r6, sl
   12522:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12526:	54e7      	strb	r7, [r4, r3]
   12528:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1252c:	d013      	beq.n	12556 <d_print_comp_inner+0x183e>
   1252e:	29ff      	cmp	r1, #255	; 0xff
   12530:	f816 7b01 	ldrb.w	r7, [r6], #1
   12534:	d1f2      	bne.n	1251c <d_print_comp_inner+0x1804>
   12536:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1253a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1253e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12542:	4620      	mov	r0, r4
   12544:	4798      	blx	r3
   12546:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1254a:	3301      	adds	r3, #1
   1254c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   12550:	2101      	movs	r1, #1
   12552:	2300      	movs	r3, #0
   12554:	e7e4      	b.n	12520 <d_print_comp_inner+0x1808>
   12556:	686a      	ldr	r2, [r5, #4]
   12558:	4641      	mov	r1, r8
   1255a:	4620      	mov	r0, r4
   1255c:	f001 f980 	bl	13860 <d_print_comp>
   12560:	f7fe bca8 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12564:	686a      	ldr	r2, [r5, #4]
   12566:	4641      	mov	r1, r8
   12568:	4620      	mov	r0, r4
   1256a:	f001 f979 	bl	13860 <d_print_comp>
   1256e:	f7fe bca1 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12572:	686a      	ldr	r2, [r5, #4]
   12574:	4641      	mov	r1, r8
   12576:	4620      	mov	r0, r4
   12578:	f001 f972 	bl	13860 <d_print_comp>
   1257c:	f7fe bc9a 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12580:	686a      	ldr	r2, [r5, #4]
   12582:	4641      	mov	r1, r8
   12584:	4620      	mov	r0, r4
   12586:	f001 f96b 	bl	13860 <d_print_comp>
   1258a:	f7fe bc93 	b.w	10eb4 <d_print_comp_inner+0x19c>
   1258e:	4641      	mov	r1, r8
   12590:	686a      	ldr	r2, [r5, #4]
   12592:	4620      	mov	r0, r4
   12594:	f001 f964 	bl	13860 <d_print_comp>
   12598:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1259c:	29ff      	cmp	r1, #255	; 0xff
   1259e:	f000 842a 	beq.w	12df6 <d_print_comp_inner+0x20de>
   125a2:	1c4a      	adds	r2, r1, #1
   125a4:	2329      	movs	r3, #41	; 0x29
   125a6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   125aa:	5463      	strb	r3, [r4, r1]
   125ac:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   125b0:	f7fe bc80 	b.w	10eb4 <d_print_comp_inner+0x19c>
   125b4:	686a      	ldr	r2, [r5, #4]
   125b6:	4641      	mov	r1, r8
   125b8:	4620      	mov	r0, r4
   125ba:	f001 f951 	bl	13860 <d_print_comp>
   125be:	f7fe bc79 	b.w	10eb4 <d_print_comp_inner+0x19c>
   125c2:	2f04      	cmp	r7, #4
   125c4:	f1a6 0410 	sub.w	r4, r6, #16
   125c8:	f106 0e10 	add.w	lr, r6, #16
   125cc:	f000 8722 	beq.w	13414 <d_print_comp_inner+0x26fc>
   125d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   125d4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   125d8:	2300      	movs	r3, #0
   125da:	f84e 4c10 	str.w	r4, [lr, #-16]
   125de:	e906 1008 	stmdb	r6, {r3, ip}
   125e2:	f8ca 6114 	str.w	r6, [sl, #276]	; 0x114
   125e6:	f846 5c0c 	str.w	r5, [r6, #-12]
   125ea:	686d      	ldr	r5, [r5, #4]
   125ec:	3701      	adds	r7, #1
   125ee:	4676      	mov	r6, lr
   125f0:	f7fe bf84 	b.w	114fc <d_print_comp_inner+0x7e4>
   125f4:	68aa      	ldr	r2, [r5, #8]
   125f6:	9300      	str	r3, [sp, #0]
   125f8:	460e      	mov	r6, r1
   125fa:	4620      	mov	r0, r4
   125fc:	4641      	mov	r1, r8
   125fe:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
   12602:	f001 f92d 	bl	13860 <d_print_comp>
   12606:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1260a:	9b00      	ldr	r3, [sp, #0]
   1260c:	4295      	cmp	r5, r2
   1260e:	f47e ac51 	bne.w	10eb4 <d_print_comp_inner+0x19c>
   12612:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   12616:	42b2      	cmp	r2, r6
   12618:	f47e ac4c 	bne.w	10eb4 <d_print_comp_inner+0x19c>
   1261c:	3b01      	subs	r3, #1
   1261e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   12622:	f7fe bc47 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12626:	462a      	mov	r2, r5
   12628:	4641      	mov	r1, r8
   1262a:	4620      	mov	r0, r4
   1262c:	f001 f928 	bl	13880 <d_print_mod>
   12630:	f7fe bc70 	b.w	10f14 <d_print_comp_inner+0x1fc>
   12634:	686b      	ldr	r3, [r5, #4]
   12636:	9300      	str	r3, [sp, #0]
   12638:	f1b9 0f00 	cmp.w	r9, #0
   1263c:	f47f abae 	bne.w	11d9c <d_print_comp_inner+0x1084>
   12640:	f7fe bc38 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12644:	463a      	mov	r2, r7
   12646:	a804      	add	r0, sp, #16
   12648:	495e      	ldr	r1, [pc, #376]	; (127c4 <d_print_comp_inner+0x1aac>)
   1264a:	f006 f91b 	bl	18884 <sprintf>
   1264e:	a804      	add	r0, sp, #16
   12650:	f006 fcf6 	bl	19040 <strlen>
   12654:	b318      	cbz	r0, 1269e <d_print_comp_inner+0x1986>
   12656:	ad04      	add	r5, sp, #16
   12658:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1265c:	182f      	adds	r7, r5, r0
   1265e:	f04f 0800 	mov.w	r8, #0
   12662:	e008      	b.n	12676 <d_print_comp_inner+0x195e>
   12664:	460b      	mov	r3, r1
   12666:	3101      	adds	r1, #1
   12668:	42af      	cmp	r7, r5
   1266a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1266e:	54e6      	strb	r6, [r4, r3]
   12670:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   12674:	d015      	beq.n	126a2 <d_print_comp_inner+0x198a>
   12676:	29ff      	cmp	r1, #255	; 0xff
   12678:	f815 6b01 	ldrb.w	r6, [r5], #1
   1267c:	d1f2      	bne.n	12664 <d_print_comp_inner+0x194c>
   1267e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12682:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   12686:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1268a:	4620      	mov	r0, r4
   1268c:	4798      	blx	r3
   1268e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   12692:	3301      	adds	r3, #1
   12694:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   12698:	2101      	movs	r1, #1
   1269a:	2300      	movs	r3, #0
   1269c:	e7e4      	b.n	12668 <d_print_comp_inner+0x1950>
   1269e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   126a2:	29ff      	cmp	r1, #255	; 0xff
   126a4:	f000 84dd 	beq.w	13062 <d_print_comp_inner+0x234a>
   126a8:	1c4a      	adds	r2, r1, #1
   126aa:	237d      	movs	r3, #125	; 0x7d
   126ac:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   126b0:	5463      	strb	r3, [r4, r1]
   126b2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   126b6:	f7fe bbfd 	b.w	10eb4 <d_print_comp_inner+0x19c>
   126ba:	2700      	movs	r7, #0
   126bc:	f7ff ba1f 	b.w	11afe <d_print_comp_inner+0xde6>
   126c0:	68df      	ldr	r7, [r3, #12]
   126c2:	689d      	ldr	r5, [r3, #8]
   126c4:	2f00      	cmp	r7, #0
   126c6:	f43e abf5 	beq.w	10eb4 <d_print_comp_inner+0x19c>
   126ca:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   126ce:	442f      	add	r7, r5
   126d0:	f04f 0800 	mov.w	r8, #0
   126d4:	e009      	b.n	126ea <d_print_comp_inner+0x19d2>
   126d6:	460b      	mov	r3, r1
   126d8:	3101      	adds	r1, #1
   126da:	42bd      	cmp	r5, r7
   126dc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   126e0:	54e6      	strb	r6, [r4, r3]
   126e2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   126e6:	f43e abe5 	beq.w	10eb4 <d_print_comp_inner+0x19c>
   126ea:	29ff      	cmp	r1, #255	; 0xff
   126ec:	f815 6b01 	ldrb.w	r6, [r5], #1
   126f0:	d1f1      	bne.n	126d6 <d_print_comp_inner+0x19be>
   126f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   126f6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   126fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   126fe:	4620      	mov	r0, r4
   12700:	4798      	blx	r3
   12702:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   12706:	3301      	adds	r3, #1
   12708:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1270c:	2101      	movs	r1, #1
   1270e:	2300      	movs	r3, #0
   12710:	e7e3      	b.n	126da <d_print_comp_inner+0x19c2>
   12712:	686e      	ldr	r6, [r5, #4]
   12714:	68af      	ldr	r7, [r5, #8]
   12716:	4437      	add	r7, r6
   12718:	42be      	cmp	r6, r7
   1271a:	f4be abcb 	bcs.w	10eb4 <d_print_comp_inner+0x19c>
   1271e:	f04f 0800 	mov.w	r8, #0
   12722:	e00d      	b.n	12740 <d_print_comp_inner+0x1a28>
   12724:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   12728:	29ff      	cmp	r1, #255	; 0xff
   1272a:	d036      	beq.n	1279a <d_print_comp_inner+0x1a82>
   1272c:	1c4b      	adds	r3, r1, #1
   1272e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   12732:	5465      	strb	r5, [r4, r1]
   12734:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   12738:	3601      	adds	r6, #1
   1273a:	42b7      	cmp	r7, r6
   1273c:	f67e abba 	bls.w	10eb4 <d_print_comp_inner+0x19c>
   12740:	1bbb      	subs	r3, r7, r6
   12742:	2b03      	cmp	r3, #3
   12744:	7835      	ldrb	r5, [r6, #0]
   12746:	dded      	ble.n	12724 <d_print_comp_inner+0x1a0c>
   12748:	2d5f      	cmp	r5, #95	; 0x5f
   1274a:	d1eb      	bne.n	12724 <d_print_comp_inner+0x1a0c>
   1274c:	7873      	ldrb	r3, [r6, #1]
   1274e:	2b5f      	cmp	r3, #95	; 0x5f
   12750:	d1e8      	bne.n	12724 <d_print_comp_inner+0x1a0c>
   12752:	78b3      	ldrb	r3, [r6, #2]
   12754:	2b55      	cmp	r3, #85	; 0x55
   12756:	d1e5      	bne.n	12724 <d_print_comp_inner+0x1a0c>
   12758:	1cf3      	adds	r3, r6, #3
   1275a:	429f      	cmp	r7, r3
   1275c:	d9e2      	bls.n	12724 <d_print_comp_inner+0x1a0c>
   1275e:	2000      	movs	r0, #0
   12760:	e006      	b.n	12770 <d_print_comp_inner+0x1a58>
   12762:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
   12766:	429f      	cmp	r7, r3
   12768:	eb02 1000 	add.w	r0, r2, r0, lsl #4
   1276c:	f000 85c7 	beq.w	132fe <d_print_comp_inner+0x25e6>
   12770:	4699      	mov	r9, r3
   12772:	f813 5b01 	ldrb.w	r5, [r3], #1
   12776:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
   1277a:	b2d1      	uxtb	r1, r2
   1277c:	2909      	cmp	r1, #9
   1277e:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
   12782:	d9f0      	bls.n	12766 <d_print_comp_inner+0x1a4e>
   12784:	f1be 0f05 	cmp.w	lr, #5
   12788:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
   1278c:	d9e9      	bls.n	12762 <d_print_comp_inner+0x1a4a>
   1278e:	2a05      	cmp	r2, #5
   12790:	f200 8743 	bhi.w	1361a <d_print_comp_inner+0x2902>
   12794:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
   12798:	e7e5      	b.n	12766 <d_print_comp_inner+0x1a4e>
   1279a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1279e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   127a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   127a6:	4620      	mov	r0, r4
   127a8:	4798      	blx	r3
   127aa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   127ae:	3301      	adds	r3, #1
   127b0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   127b4:	2100      	movs	r1, #0
   127b6:	2301      	movs	r3, #1
   127b8:	e7b9      	b.n	1272e <d_print_comp_inner+0x1a16>
   127ba:	4d04      	ldr	r5, [pc, #16]	; (127cc <d_print_comp_inner+0x1ab4>)
   127bc:	4698      	mov	r8, r3
   127be:	1daf      	adds	r7, r5, #6
   127c0:	e010      	b.n	127e4 <d_print_comp_inner+0x1acc>
   127c2:	bf00      	nop
   127c4:	0003cbdc 	.word	0x0003cbdc
   127c8:	0003dc68 	.word	0x0003dc68
   127cc:	0003dcc8 	.word	0x0003dcc8
   127d0:	460b      	mov	r3, r1
   127d2:	3101      	adds	r1, #1
   127d4:	42bd      	cmp	r5, r7
   127d6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   127da:	54e6      	strb	r6, [r4, r3]
   127dc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   127e0:	f43e ab68 	beq.w	10eb4 <d_print_comp_inner+0x19c>
   127e4:	29ff      	cmp	r1, #255	; 0xff
   127e6:	f815 6b01 	ldrb.w	r6, [r5], #1
   127ea:	d1f1      	bne.n	127d0 <d_print_comp_inner+0x1ab8>
   127ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   127f0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   127f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   127f8:	4620      	mov	r0, r4
   127fa:	4798      	blx	r3
   127fc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   12800:	3301      	adds	r3, #1
   12802:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   12806:	2101      	movs	r1, #1
   12808:	2300      	movs	r3, #0
   1280a:	e7e3      	b.n	127d4 <d_print_comp_inner+0x1abc>
   1280c:	782b      	ldrb	r3, [r5, #0]
   1280e:	2b2f      	cmp	r3, #47	; 0x2f
   12810:	f47e ab6a 	bne.w	10ee8 <d_print_comp_inner+0x1d0>
   12814:	4601      	mov	r1, r0
   12816:	460d      	mov	r5, r1
   12818:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   1281c:	f7fe bb66 	b.w	10eec <d_print_comp_inner+0x1d4>
   12820:	4dd7      	ldr	r5, [pc, #860]	; (12b80 <d_print_comp_inner+0x1e68>)
   12822:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   12826:	f105 0804 	add.w	r8, r5, #4
   1282a:	e009      	b.n	12840 <d_print_comp_inner+0x1b28>
   1282c:	460b      	mov	r3, r1
   1282e:	3101      	adds	r1, #1
   12830:	45a8      	cmp	r8, r5
   12832:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12836:	54e6      	strb	r6, [r4, r3]
   12838:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1283c:	f43e ab3a 	beq.w	10eb4 <d_print_comp_inner+0x19c>
   12840:	29ff      	cmp	r1, #255	; 0xff
   12842:	f815 6b01 	ldrb.w	r6, [r5], #1
   12846:	d1f1      	bne.n	1282c <d_print_comp_inner+0x1b14>
   12848:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1284c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   12850:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12854:	4620      	mov	r0, r4
   12856:	4798      	blx	r3
   12858:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1285c:	3301      	adds	r3, #1
   1285e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   12862:	2101      	movs	r1, #1
   12864:	2300      	movs	r3, #0
   12866:	e7e3      	b.n	12830 <d_print_comp_inner+0x1b18>
   12868:	4ec6      	ldr	r6, [pc, #792]	; (12b84 <d_print_comp_inner+0x1e6c>)
   1286a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1286e:	f106 0905 	add.w	r9, r6, #5
   12872:	f04f 0800 	mov.w	r8, #0
   12876:	e008      	b.n	1288a <d_print_comp_inner+0x1b72>
   12878:	460b      	mov	r3, r1
   1287a:	3101      	adds	r1, #1
   1287c:	45b1      	cmp	r9, r6
   1287e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12882:	54e7      	strb	r7, [r4, r3]
   12884:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   12888:	d013      	beq.n	128b2 <d_print_comp_inner+0x1b9a>
   1288a:	29ff      	cmp	r1, #255	; 0xff
   1288c:	f816 7b01 	ldrb.w	r7, [r6], #1
   12890:	d1f2      	bne.n	12878 <d_print_comp_inner+0x1b60>
   12892:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12896:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1289a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1289e:	4620      	mov	r0, r4
   128a0:	4798      	blx	r3
   128a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   128a6:	3301      	adds	r3, #1
   128a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   128ac:	2101      	movs	r1, #1
   128ae:	2300      	movs	r3, #0
   128b0:	e7e4      	b.n	1287c <d_print_comp_inner+0x1b64>
   128b2:	686a      	ldr	r2, [r5, #4]
   128b4:	49b4      	ldr	r1, [pc, #720]	; (12b88 <d_print_comp_inner+0x1e70>)
   128b6:	3201      	adds	r2, #1
   128b8:	a804      	add	r0, sp, #16
   128ba:	f005 ffe3 	bl	18884 <sprintf>
   128be:	a804      	add	r0, sp, #16
   128c0:	f006 fbbe 	bl	19040 <strlen>
   128c4:	2800      	cmp	r0, #0
   128c6:	f43e aaf5 	beq.w	10eb4 <d_print_comp_inner+0x19c>
   128ca:	ad04      	add	r5, sp, #16
   128cc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   128d0:	182f      	adds	r7, r5, r0
   128d2:	f04f 0800 	mov.w	r8, #0
   128d6:	e009      	b.n	128ec <d_print_comp_inner+0x1bd4>
   128d8:	460b      	mov	r3, r1
   128da:	3101      	adds	r1, #1
   128dc:	42af      	cmp	r7, r5
   128de:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   128e2:	54e6      	strb	r6, [r4, r3]
   128e4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   128e8:	f43e aae4 	beq.w	10eb4 <d_print_comp_inner+0x19c>
   128ec:	29ff      	cmp	r1, #255	; 0xff
   128ee:	f815 6b01 	ldrb.w	r6, [r5], #1
   128f2:	d1f1      	bne.n	128d8 <d_print_comp_inner+0x1bc0>
   128f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   128f8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   128fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12900:	4620      	mov	r0, r4
   12902:	4798      	blx	r3
   12904:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   12908:	3301      	adds	r3, #1
   1290a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1290e:	2101      	movs	r1, #1
   12910:	2300      	movs	r3, #0
   12912:	e7e3      	b.n	128dc <d_print_comp_inner+0x1bc4>
   12914:	f021 0860 	bic.w	r8, r1, #96	; 0x60
   12918:	f105 0208 	add.w	r2, r5, #8
   1291c:	4641      	mov	r1, r8
   1291e:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   12922:	f001 fc91 	bl	14248 <d_print_function_type.isra.11>
   12926:	686a      	ldr	r2, [r5, #4]
   12928:	2a00      	cmp	r2, #0
   1292a:	f43e aac3 	beq.w	10eb4 <d_print_comp_inner+0x19c>
   1292e:	4641      	mov	r1, r8
   12930:	4620      	mov	r0, r4
   12932:	f000 ff95 	bl	13860 <d_print_comp>
   12936:	f7fe babd 	b.w	10eb4 <d_print_comp_inner+0x19c>
   1293a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1293e:	f7ff b9a2 	b.w	11c86 <d_print_comp_inner+0xf6e>
   12942:	4e92      	ldr	r6, [pc, #584]	; (12b8c <d_print_comp_inner+0x1e74>)
   12944:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   12948:	f106 0a05 	add.w	sl, r6, #5
   1294c:	f04f 0900 	mov.w	r9, #0
   12950:	e009      	b.n	12966 <d_print_comp_inner+0x1c4e>
   12952:	460b      	mov	r3, r1
   12954:	3101      	adds	r1, #1
   12956:	45b2      	cmp	sl, r6
   12958:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1295c:	54e7      	strb	r7, [r4, r3]
   1295e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   12962:	f43f a97a 	beq.w	11c5a <d_print_comp_inner+0xf42>
   12966:	29ff      	cmp	r1, #255	; 0xff
   12968:	f816 7b01 	ldrb.w	r7, [r6], #1
   1296c:	d1f1      	bne.n	12952 <d_print_comp_inner+0x1c3a>
   1296e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12972:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   12976:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1297a:	4620      	mov	r0, r4
   1297c:	4798      	blx	r3
   1297e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   12982:	3301      	adds	r3, #1
   12984:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   12988:	2101      	movs	r1, #1
   1298a:	2300      	movs	r3, #0
   1298c:	e7e3      	b.n	12956 <d_print_comp_inner+0x1c3e>
   1298e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   12992:	497f      	ldr	r1, [pc, #508]	; (12b90 <d_print_comp_inner+0x1e78>)
   12994:	681f      	ldr	r7, [r3, #0]
   12996:	4638      	mov	r0, r7
   12998:	f005 ffe6 	bl	18968 <strcmp>
   1299c:	f896 a000 	ldrb.w	sl, [r6]
   129a0:	b918      	cbnz	r0, 129aa <d_print_comp_inner+0x1c92>
   129a2:	f1ba 0f03 	cmp.w	sl, #3
   129a6:	f000 851b 	beq.w	133e0 <d_print_comp_inner+0x26c8>
   129aa:	f1ba 0f38 	cmp.w	sl, #56	; 0x38
   129ae:	f000 85fd 	beq.w	135ac <d_print_comp_inner+0x2894>
   129b2:	4978      	ldr	r1, [pc, #480]	; (12b94 <d_print_comp_inner+0x1e7c>)
   129b4:	4638      	mov	r0, r7
   129b6:	f005 ffd7 	bl	18968 <strcmp>
   129ba:	4605      	mov	r5, r0
   129bc:	2800      	cmp	r0, #0
   129be:	f000 8135 	beq.w	12c2c <d_print_comp_inner+0x1f14>
   129c2:	4975      	ldr	r1, [pc, #468]	; (12b98 <d_print_comp_inner+0x1e80>)
   129c4:	4638      	mov	r0, r7
   129c6:	f005 ffcf 	bl	18968 <strcmp>
   129ca:	2800      	cmp	r0, #0
   129cc:	f000 82b6 	beq.w	12f3c <d_print_comp_inner+0x2224>
   129d0:	464a      	mov	r2, r9
   129d2:	4641      	mov	r1, r8
   129d4:	4620      	mov	r0, r4
   129d6:	f001 fd2b 	bl	14430 <d_print_expr_op>
   129da:	2f00      	cmp	r7, #0
   129dc:	f43f a837 	beq.w	11a4e <d_print_comp_inner+0xd36>
   129e0:	496e      	ldr	r1, [pc, #440]	; (12b9c <d_print_comp_inner+0x1e84>)
   129e2:	4638      	mov	r0, r7
   129e4:	f005 ffc0 	bl	18968 <strcmp>
   129e8:	2800      	cmp	r0, #0
   129ea:	f000 8384 	beq.w	130f6 <d_print_comp_inner+0x23de>
   129ee:	4638      	mov	r0, r7
   129f0:	496b      	ldr	r1, [pc, #428]	; (12ba0 <d_print_comp_inner+0x1e88>)
   129f2:	f005 ffb9 	bl	18968 <strcmp>
   129f6:	4605      	mov	r5, r0
   129f8:	2800      	cmp	r0, #0
   129fa:	f47f a828 	bne.w	11a4e <d_print_comp_inner+0xd36>
   129fe:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   12a02:	2bff      	cmp	r3, #255	; 0xff
   12a04:	f000 84db 	beq.w	133be <d_print_comp_inner+0x26a6>
   12a08:	1c58      	adds	r0, r3, #1
   12a0a:	2528      	movs	r5, #40	; 0x28
   12a0c:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   12a10:	4641      	mov	r1, r8
   12a12:	54e5      	strb	r5, [r4, r3]
   12a14:	4632      	mov	r2, r6
   12a16:	4620      	mov	r0, r4
   12a18:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   12a1c:	f000 ff20 	bl	13860 <d_print_comp>
   12a20:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   12a24:	29ff      	cmp	r1, #255	; 0xff
   12a26:	f000 846d 	beq.w	13304 <d_print_comp_inner+0x25ec>
   12a2a:	2329      	movs	r3, #41	; 0x29
   12a2c:	1c4a      	adds	r2, r1, #1
   12a2e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   12a32:	5463      	strb	r3, [r4, r1]
   12a34:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   12a38:	f7fe ba3c 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12a3c:	f10d 0910 	add.w	r9, sp, #16
   12a40:	685a      	ldr	r2, [r3, #4]
   12a42:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   12a46:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   12a4a:	4641      	mov	r1, r8
   12a4c:	4620      	mov	r0, r4
   12a4e:	9204      	str	r2, [sp, #16]
   12a50:	9305      	str	r3, [sp, #20]
   12a52:	f7fe f961 	bl	10d18 <d_print_comp_inner>
   12a56:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   12a5a:	9a05      	ldr	r2, [sp, #20]
   12a5c:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   12a60:	b113      	cbz	r3, 12a68 <d_print_comp_inner+0x1d50>
   12a62:	9b02      	ldr	r3, [sp, #8]
   12a64:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   12a68:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   12a6c:	2b3c      	cmp	r3, #60	; 0x3c
   12a6e:	f000 83d9 	beq.w	13224 <d_print_comp_inner+0x250c>
   12a72:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   12a76:	29ff      	cmp	r1, #255	; 0xff
   12a78:	f000 8467 	beq.w	1334a <d_print_comp_inner+0x2632>
   12a7c:	1c4a      	adds	r2, r1, #1
   12a7e:	233c      	movs	r3, #60	; 0x3c
   12a80:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   12a84:	5463      	strb	r3, [r4, r1]
   12a86:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   12a8a:	686b      	ldr	r3, [r5, #4]
   12a8c:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   12a90:	689b      	ldr	r3, [r3, #8]
   12a92:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   12a96:	461a      	mov	r2, r3
   12a98:	4641      	mov	r1, r8
   12a9a:	4620      	mov	r0, r4
   12a9c:	9304      	str	r3, [sp, #16]
   12a9e:	9505      	str	r5, [sp, #20]
   12aa0:	f7fe f93a 	bl	10d18 <d_print_comp_inner>
   12aa4:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   12aa8:	9a05      	ldr	r2, [sp, #20]
   12aaa:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   12aae:	2b3e      	cmp	r3, #62	; 0x3e
   12ab0:	f000 83ab 	beq.w	1320a <d_print_comp_inner+0x24f2>
   12ab4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   12ab8:	29ff      	cmp	r1, #255	; 0xff
   12aba:	f000 849a 	beq.w	133f2 <d_print_comp_inner+0x26da>
   12abe:	233e      	movs	r3, #62	; 0x3e
   12ac0:	1c4a      	adds	r2, r1, #1
   12ac2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   12ac6:	5463      	strb	r3, [r4, r1]
   12ac8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   12acc:	f7fe b9f2 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12ad0:	6852      	ldr	r2, [r2, #4]
   12ad2:	7c16      	ldrb	r6, [r2, #16]
   12ad4:	2e00      	cmp	r6, #0
   12ad6:	f43f a9e7 	beq.w	11ea8 <d_print_comp_inner+0x1190>
   12ada:	2e06      	cmp	r6, #6
   12adc:	f240 8337 	bls.w	1314e <d_print_comp_inner+0x2436>
   12ae0:	2e07      	cmp	r6, #7
   12ae2:	f47f a9e1 	bne.w	11ea8 <d_print_comp_inner+0x1190>
   12ae6:	68aa      	ldr	r2, [r5, #8]
   12ae8:	7811      	ldrb	r1, [r2, #0]
   12aea:	2900      	cmp	r1, #0
   12aec:	f47f a9dc 	bne.w	11ea8 <d_print_comp_inner+0x1190>
   12af0:	6891      	ldr	r1, [r2, #8]
   12af2:	2901      	cmp	r1, #1
   12af4:	f47f a9d8 	bne.w	11ea8 <d_print_comp_inner+0x1190>
   12af8:	2b3c      	cmp	r3, #60	; 0x3c
   12afa:	f47f a9d5 	bne.w	11ea8 <d_print_comp_inner+0x1190>
   12afe:	6853      	ldr	r3, [r2, #4]
   12b00:	781b      	ldrb	r3, [r3, #0]
   12b02:	2b30      	cmp	r3, #48	; 0x30
   12b04:	f000 8626 	beq.w	13754 <d_print_comp_inner+0x2a3c>
   12b08:	2b31      	cmp	r3, #49	; 0x31
   12b0a:	f47f a9cd 	bne.w	11ea8 <d_print_comp_inner+0x1190>
   12b0e:	2204      	movs	r2, #4
   12b10:	4924      	ldr	r1, [pc, #144]	; (12ba4 <d_print_comp_inner+0x1e8c>)
   12b12:	f7fb fe2d 	bl	e770 <d_append_buffer>
   12b16:	f7fe b9cd 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12b1a:	4e23      	ldr	r6, [pc, #140]	; (12ba8 <d_print_comp_inner+0x1e90>)
   12b1c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   12b20:	f106 0a02 	add.w	sl, r6, #2
   12b24:	e009      	b.n	12b3a <d_print_comp_inner+0x1e22>
   12b26:	460b      	mov	r3, r1
   12b28:	3101      	adds	r1, #1
   12b2a:	45b2      	cmp	sl, r6
   12b2c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12b30:	54e7      	strb	r7, [r4, r3]
   12b32:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   12b36:	f43e ad52 	beq.w	115de <d_print_comp_inner+0x8c6>
   12b3a:	29ff      	cmp	r1, #255	; 0xff
   12b3c:	f816 7b01 	ldrb.w	r7, [r6], #1
   12b40:	d1f1      	bne.n	12b26 <d_print_comp_inner+0x1e0e>
   12b42:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12b46:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   12b4a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12b4e:	4620      	mov	r0, r4
   12b50:	4798      	blx	r3
   12b52:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   12b56:	3301      	adds	r3, #1
   12b58:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   12b5c:	2101      	movs	r1, #1
   12b5e:	2300      	movs	r3, #0
   12b60:	e7e3      	b.n	12b2a <d_print_comp_inner+0x1e12>
   12b62:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   12b66:	29ff      	cmp	r1, #255	; 0xff
   12b68:	f000 84e4 	beq.w	13534 <d_print_comp_inner+0x281c>
   12b6c:	2220      	movs	r2, #32
   12b6e:	1c4b      	adds	r3, r1, #1
   12b70:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   12b74:	5462      	strb	r2, [r4, r1]
   12b76:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   12b7a:	f7fe bdbb 	b.w	116f4 <d_print_comp_inner+0x9dc>
   12b7e:	bf00      	nop
   12b80:	0003dd3c 	.word	0x0003dd3c
   12b84:	0003db68 	.word	0x0003db68
   12b88:	0003cbdc 	.word	0x0003cbdc
   12b8c:	0003dcb8 	.word	0x0003dcb8
   12b90:	0003dcec 	.word	0x0003dcec
   12b94:	0003ddb8 	.word	0x0003ddb8
   12b98:	0003daf8 	.word	0x0003daf8
   12b9c:	0003dcf0 	.word	0x0003dcf0
   12ba0:	0003dff4 	.word	0x0003dff4
   12ba4:	0003dd14 	.word	0x0003dd14
   12ba8:	0003db44 	.word	0x0003db44
   12bac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   12bb0:	29ff      	cmp	r1, #255	; 0xff
   12bb2:	f000 8465 	beq.w	13480 <d_print_comp_inner+0x2768>
   12bb6:	2220      	movs	r2, #32
   12bb8:	1c4b      	adds	r3, r1, #1
   12bba:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   12bbe:	5462      	strb	r2, [r4, r1]
   12bc0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   12bc4:	f7fe bd80 	b.w	116c8 <d_print_comp_inner+0x9b0>
   12bc8:	2700      	movs	r7, #0
   12bca:	55a7      	strb	r7, [r4, r6]
   12bcc:	4631      	mov	r1, r6
   12bce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12bd2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12bd6:	4620      	mov	r0, r4
   12bd8:	4798      	blx	r3
   12bda:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   12bde:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   12be2:	3301      	adds	r3, #1
   12be4:	463e      	mov	r6, r7
   12be6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   12bea:	f7fe be31 	b.w	11850 <d_print_comp_inner+0xb38>
   12bee:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   12bf2:	29ff      	cmp	r1, #255	; 0xff
   12bf4:	f000 8465 	beq.w	134c2 <d_print_comp_inner+0x27aa>
   12bf8:	1c4a      	adds	r2, r1, #1
   12bfa:	235b      	movs	r3, #91	; 0x5b
   12bfc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   12c00:	5463      	strb	r3, [r4, r1]
   12c02:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   12c06:	4641      	mov	r1, r8
   12c08:	68aa      	ldr	r2, [r5, #8]
   12c0a:	4620      	mov	r0, r4
   12c0c:	f000 fe28 	bl	13860 <d_print_comp>
   12c10:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   12c14:	29ff      	cmp	r1, #255	; 0xff
   12c16:	f000 8312 	beq.w	1323e <d_print_comp_inner+0x2526>
   12c1a:	235d      	movs	r3, #93	; 0x5d
   12c1c:	1c4a      	adds	r2, r1, #1
   12c1e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   12c22:	5463      	strb	r3, [r4, r1]
   12c24:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   12c28:	f7fe b944 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12c2c:	4631      	mov	r1, r6
   12c2e:	4620      	mov	r0, r4
   12c30:	f7fb ffca 	bl	ebc8 <d_find_pack>
   12c34:	b928      	cbnz	r0, 12c42 <d_print_comp_inner+0x1f2a>
   12c36:	e007      	b.n	12c48 <d_print_comp_inner+0x1f30>
   12c38:	6843      	ldr	r3, [r0, #4]
   12c3a:	b12b      	cbz	r3, 12c48 <d_print_comp_inner+0x1f30>
   12c3c:	6880      	ldr	r0, [r0, #8]
   12c3e:	3501      	adds	r5, #1
   12c40:	b110      	cbz	r0, 12c48 <d_print_comp_inner+0x1f30>
   12c42:	7803      	ldrb	r3, [r0, #0]
   12c44:	2b2f      	cmp	r3, #47	; 0x2f
   12c46:	d0f7      	beq.n	12c38 <d_print_comp_inner+0x1f20>
   12c48:	462a      	mov	r2, r5
   12c4a:	a804      	add	r0, sp, #16
   12c4c:	49d4      	ldr	r1, [pc, #848]	; (12fa0 <d_print_comp_inner+0x2288>)
   12c4e:	f005 fe19 	bl	18884 <sprintf>
   12c52:	a804      	add	r0, sp, #16
   12c54:	f006 f9f4 	bl	19040 <strlen>
   12c58:	2800      	cmp	r0, #0
   12c5a:	f43e a92b 	beq.w	10eb4 <d_print_comp_inner+0x19c>
   12c5e:	ad04      	add	r5, sp, #16
   12c60:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   12c64:	182f      	adds	r7, r5, r0
   12c66:	f04f 0800 	mov.w	r8, #0
   12c6a:	e009      	b.n	12c80 <d_print_comp_inner+0x1f68>
   12c6c:	460b      	mov	r3, r1
   12c6e:	3101      	adds	r1, #1
   12c70:	42bd      	cmp	r5, r7
   12c72:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12c76:	54e6      	strb	r6, [r4, r3]
   12c78:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   12c7c:	f43e a91a 	beq.w	10eb4 <d_print_comp_inner+0x19c>
   12c80:	29ff      	cmp	r1, #255	; 0xff
   12c82:	f815 6b01 	ldrb.w	r6, [r5], #1
   12c86:	d1f1      	bne.n	12c6c <d_print_comp_inner+0x1f54>
   12c88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12c8c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   12c90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12c94:	4620      	mov	r0, r4
   12c96:	4798      	blx	r3
   12c98:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   12c9c:	3301      	adds	r3, #1
   12c9e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   12ca2:	2101      	movs	r1, #1
   12ca4:	2300      	movs	r3, #0
   12ca6:	e7e3      	b.n	12c70 <d_print_comp_inner+0x1f58>
   12ca8:	686a      	ldr	r2, [r5, #4]
   12caa:	4641      	mov	r1, r8
   12cac:	4620      	mov	r0, r4
   12cae:	f000 fdd7 	bl	13860 <d_print_comp>
   12cb2:	f7fe b8ff 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12cb6:	29ff      	cmp	r1, #255	; 0xff
   12cb8:	f000 83d2 	beq.w	13460 <d_print_comp_inner+0x2748>
   12cbc:	232d      	movs	r3, #45	; 0x2d
   12cbe:	1c4a      	adds	r2, r1, #1
   12cc0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   12cc4:	5463      	strb	r3, [r4, r1]
   12cc6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   12cca:	f7ff b90e 	b.w	11eea <d_print_comp_inner+0x11d2>
   12cce:	2500      	movs	r5, #0
   12cd0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12cd4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12cd8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   12cdc:	4620      	mov	r0, r4
   12cde:	4798      	blx	r3
   12ce0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   12ce4:	3301      	adds	r3, #1
   12ce6:	4629      	mov	r1, r5
   12ce8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   12cec:	2201      	movs	r2, #1
   12cee:	f7ff bbeb 	b.w	124c8 <d_print_comp_inner+0x17b0>
   12cf2:	2500      	movs	r5, #0
   12cf4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12cf8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12cfc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   12d00:	4620      	mov	r0, r4
   12d02:	4798      	blx	r3
   12d04:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   12d08:	3301      	adds	r3, #1
   12d0a:	4629      	mov	r1, r5
   12d0c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   12d10:	2201      	movs	r2, #1
   12d12:	f7ff ba8f 	b.w	12234 <d_print_comp_inner+0x151c>
   12d16:	2600      	movs	r6, #0
   12d18:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   12d1c:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   12d20:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   12d24:	4798      	blx	r3
   12d26:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   12d2a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   12d2e:	3301      	adds	r3, #1
   12d30:	4631      	mov	r1, r6
   12d32:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   12d36:	f7fe bd43 	b.w	117c0 <d_print_comp_inner+0xaa8>
   12d3a:	2600      	movs	r6, #0
   12d3c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   12d40:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   12d44:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   12d48:	4798      	blx	r3
   12d4a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   12d4e:	3301      	adds	r3, #1
   12d50:	4631      	mov	r1, r6
   12d52:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   12d56:	2201      	movs	r2, #1
   12d58:	f7fe bb74 	b.w	11444 <d_print_comp_inner+0x72c>
   12d5c:	2500      	movs	r5, #0
   12d5e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12d62:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12d66:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   12d6a:	4620      	mov	r0, r4
   12d6c:	4798      	blx	r3
   12d6e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   12d72:	3301      	adds	r3, #1
   12d74:	4629      	mov	r1, r5
   12d76:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   12d7a:	2201      	movs	r2, #1
   12d7c:	f7ff bae4 	b.w	12348 <d_print_comp_inner+0x1630>
   12d80:	220d      	movs	r2, #13
   12d82:	4988      	ldr	r1, [pc, #544]	; (12fa4 <d_print_comp_inner+0x228c>)
   12d84:	4620      	mov	r0, r4
   12d86:	f7fb fcf3 	bl	e770 <d_append_buffer>
   12d8a:	68a9      	ldr	r1, [r5, #8]
   12d8c:	4620      	mov	r0, r4
   12d8e:	3101      	adds	r1, #1
   12d90:	f7fb ff9e 	bl	ecd0 <d_append_num>
   12d94:	2203      	movs	r2, #3
   12d96:	4984      	ldr	r1, [pc, #528]	; (12fa8 <d_print_comp_inner+0x2290>)
   12d98:	4620      	mov	r0, r4
   12d9a:	f7fb fce9 	bl	e770 <d_append_buffer>
   12d9e:	686d      	ldr	r5, [r5, #4]
   12da0:	f7fe bc22 	b.w	115e8 <d_print_comp_inner+0x8d0>
   12da4:	2500      	movs	r5, #0
   12da6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12daa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12dae:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   12db2:	4620      	mov	r0, r4
   12db4:	4798      	blx	r3
   12db6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   12dba:	3301      	adds	r3, #1
   12dbc:	4629      	mov	r1, r5
   12dbe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   12dc2:	2201      	movs	r2, #1
   12dc4:	f7fe be08 	b.w	119d8 <d_print_comp_inner+0xcc0>
   12dc8:	2301      	movs	r3, #1
   12dca:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   12dce:	f7fe b871 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12dd2:	2500      	movs	r5, #0
   12dd4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12dd8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12ddc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   12de0:	4620      	mov	r0, r4
   12de2:	4798      	blx	r3
   12de4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   12de8:	3301      	adds	r3, #1
   12dea:	4629      	mov	r1, r5
   12dec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   12df0:	2201      	movs	r2, #1
   12df2:	f7ff ba8f 	b.w	12314 <d_print_comp_inner+0x15fc>
   12df6:	2500      	movs	r5, #0
   12df8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12dfc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12e00:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   12e04:	4620      	mov	r0, r4
   12e06:	4798      	blx	r3
   12e08:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   12e0c:	3301      	adds	r3, #1
   12e0e:	4629      	mov	r1, r5
   12e10:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   12e14:	2201      	movs	r2, #1
   12e16:	f7ff bbc5 	b.w	125a4 <d_print_comp_inner+0x188c>
   12e1a:	a914      	add	r1, sp, #80	; 0x50
   12e1c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   12e20:	f841 0d40 	str.w	r0, [r1, #-64]!
   12e24:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   12e28:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   12e2c:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
   12e30:	4620      	mov	r0, r4
   12e32:	4641      	mov	r1, r8
   12e34:	9306      	str	r3, [sp, #24]
   12e36:	9607      	str	r6, [sp, #28]
   12e38:	9505      	str	r5, [sp, #20]
   12e3a:	f000 fd11 	bl	13860 <d_print_comp>
   12e3e:	9e06      	ldr	r6, [sp, #24]
   12e40:	9b04      	ldr	r3, [sp, #16]
   12e42:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   12e46:	2e00      	cmp	r6, #0
   12e48:	f47e a834 	bne.w	10eb4 <d_print_comp_inner+0x19c>
   12e4c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   12e50:	29ff      	cmp	r1, #255	; 0xff
   12e52:	f000 8409 	beq.w	13668 <d_print_comp_inner+0x2950>
   12e56:	2320      	movs	r3, #32
   12e58:	1c4a      	adds	r2, r1, #1
   12e5a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   12e5e:	5463      	strb	r3, [r4, r1]
   12e60:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   12e64:	f7fe be0b 	b.w	11a7e <d_print_comp_inner+0xd66>
   12e68:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   12e6c:	2b00      	cmp	r3, #0
   12e6e:	f6fe abff 	blt.w	11670 <d_print_comp_inner+0x958>
   12e72:	2b00      	cmp	r3, #0
   12e74:	f000 829d 	beq.w	133b2 <d_print_comp_inner+0x269a>
   12e78:	6880      	ldr	r0, [r0, #8]
   12e7a:	3b01      	subs	r3, #1
   12e7c:	2800      	cmp	r0, #0
   12e7e:	f43e a82d 	beq.w	10edc <d_print_comp_inner+0x1c4>
   12e82:	7802      	ldrb	r2, [r0, #0]
   12e84:	2a2f      	cmp	r2, #47	; 0x2f
   12e86:	d0f4      	beq.n	12e72 <d_print_comp_inner+0x215a>
   12e88:	f7fe b828 	b.w	10edc <d_print_comp_inner+0x1c4>
   12e8c:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
   12e90:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
   12e94:	f1be 0f00 	cmp.w	lr, #0
   12e98:	dd14      	ble.n	12ec4 <d_print_comp_inner+0x21ac>
   12e9a:	6813      	ldr	r3, [r2, #0]
   12e9c:	4299      	cmp	r1, r3
   12e9e:	f000 83f5 	beq.w	1368c <d_print_comp_inner+0x2974>
   12ea2:	f102 0008 	add.w	r0, r2, #8
   12ea6:	463b      	mov	r3, r7
   12ea8:	46a4      	mov	ip, r4
   12eaa:	e004      	b.n	12eb6 <d_print_comp_inner+0x219e>
   12eac:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   12eb0:	42a1      	cmp	r1, r4
   12eb2:	f000 81d4 	beq.w	1325e <d_print_comp_inner+0x2546>
   12eb6:	3301      	adds	r3, #1
   12eb8:	459e      	cmp	lr, r3
   12eba:	4681      	mov	r9, r0
   12ebc:	f100 0008 	add.w	r0, r0, #8
   12ec0:	d1f4      	bne.n	12eac <d_print_comp_inner+0x2194>
   12ec2:	4664      	mov	r4, ip
   12ec4:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   12ec8:	459e      	cmp	lr, r3
   12eca:	f280 84b9 	bge.w	13840 <d_print_comp_inner+0x2b28>
   12ece:	f10e 0301 	add.w	r3, lr, #1
   12ed2:	eb02 00ce 	add.w	r0, r2, lr, lsl #3
   12ed6:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   12eda:	f842 103e 	str.w	r1, [r2, lr, lsl #3]
   12ede:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   12ee2:	3004      	adds	r0, #4
   12ee4:	468e      	mov	lr, r1
   12ee6:	2a00      	cmp	r2, #0
   12ee8:	f000 848d 	beq.w	13806 <d_print_comp_inner+0x2aee>
   12eec:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   12ef0:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   12ef4:	428b      	cmp	r3, r1
   12ef6:	f103 0c01 	add.w	ip, r3, #1
   12efa:	f280 84a1 	bge.w	13840 <d_print_comp_inner+0x2b28>
   12efe:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   12f02:	f8c4 c13c 	str.w	ip, [r4, #316]	; 0x13c
   12f06:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   12f0a:	6851      	ldr	r1, [r2, #4]
   12f0c:	6059      	str	r1, [r3, #4]
   12f0e:	6003      	str	r3, [r0, #0]
   12f10:	6812      	ldr	r2, [r2, #0]
   12f12:	4618      	mov	r0, r3
   12f14:	e7e7      	b.n	12ee6 <d_print_comp_inner+0x21ce>
   12f16:	2500      	movs	r5, #0
   12f18:	4619      	mov	r1, r3
   12f1a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12f1e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12f22:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   12f26:	4620      	mov	r0, r4
   12f28:	4798      	blx	r3
   12f2a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   12f2e:	1c5a      	adds	r2, r3, #1
   12f30:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   12f34:	462b      	mov	r3, r5
   12f36:	2201      	movs	r2, #1
   12f38:	f7fe bd3d 	b.w	119b6 <d_print_comp_inner+0xc9e>
   12f3c:	2e00      	cmp	r6, #0
   12f3e:	f000 844d 	beq.w	137dc <d_print_comp_inner+0x2ac4>
   12f42:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
   12f46:	f040 8488 	bne.w	1385a <d_print_comp_inner+0x2b42>
   12f4a:	6873      	ldr	r3, [r6, #4]
   12f4c:	b373      	cbz	r3, 12fac <d_print_comp_inner+0x2294>
   12f4e:	4607      	mov	r7, r0
   12f50:	e007      	b.n	12f62 <d_print_comp_inner+0x224a>
   12f52:	3701      	adds	r7, #1
   12f54:	68b6      	ldr	r6, [r6, #8]
   12f56:	b356      	cbz	r6, 12fae <d_print_comp_inner+0x2296>
   12f58:	7833      	ldrb	r3, [r6, #0]
   12f5a:	2b2f      	cmp	r3, #47	; 0x2f
   12f5c:	d127      	bne.n	12fae <d_print_comp_inner+0x2296>
   12f5e:	6873      	ldr	r3, [r6, #4]
   12f60:	b32b      	cbz	r3, 12fae <d_print_comp_inner+0x2296>
   12f62:	781a      	ldrb	r2, [r3, #0]
   12f64:	2a4a      	cmp	r2, #74	; 0x4a
   12f66:	d1f4      	bne.n	12f52 <d_print_comp_inner+0x223a>
   12f68:	6859      	ldr	r1, [r3, #4]
   12f6a:	4620      	mov	r0, r4
   12f6c:	f7fb fe2c 	bl	ebc8 <d_find_pack>
   12f70:	b198      	cbz	r0, 12f9a <d_print_comp_inner+0x2282>
   12f72:	7803      	ldrb	r3, [r0, #0]
   12f74:	2b2f      	cmp	r3, #47	; 0x2f
   12f76:	f040 846c 	bne.w	13852 <d_print_comp_inner+0x2b3a>
   12f7a:	6843      	ldr	r3, [r0, #4]
   12f7c:	2b00      	cmp	r3, #0
   12f7e:	f000 8464 	beq.w	1384a <d_print_comp_inner+0x2b32>
   12f82:	4603      	mov	r3, r0
   12f84:	2000      	movs	r0, #0
   12f86:	e004      	b.n	12f92 <d_print_comp_inner+0x227a>
   12f88:	781a      	ldrb	r2, [r3, #0]
   12f8a:	2a2f      	cmp	r2, #47	; 0x2f
   12f8c:	d105      	bne.n	12f9a <d_print_comp_inner+0x2282>
   12f8e:	685a      	ldr	r2, [r3, #4]
   12f90:	b11a      	cbz	r2, 12f9a <d_print_comp_inner+0x2282>
   12f92:	689b      	ldr	r3, [r3, #8]
   12f94:	3001      	adds	r0, #1
   12f96:	2b00      	cmp	r3, #0
   12f98:	d1f6      	bne.n	12f88 <d_print_comp_inner+0x2270>
   12f9a:	4407      	add	r7, r0
   12f9c:	e7da      	b.n	12f54 <d_print_comp_inner+0x223c>
   12f9e:	bf00      	nop
   12fa0:	0003cbdc 	.word	0x0003cbdc
   12fa4:	0003db48 	.word	0x0003db48
   12fa8:	0003db58 	.word	0x0003db58
   12fac:	461f      	mov	r7, r3
   12fae:	4639      	mov	r1, r7
   12fb0:	4620      	mov	r0, r4
   12fb2:	f7fb fe8d 	bl	ecd0 <d_append_num>
   12fb6:	f7fd bf7d 	b.w	10eb4 <d_print_comp_inner+0x19c>
   12fba:	2500      	movs	r5, #0
   12fbc:	4619      	mov	r1, r3
   12fbe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12fc2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12fc6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   12fca:	4620      	mov	r0, r4
   12fcc:	4798      	blx	r3
   12fce:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   12fd2:	1c5a      	adds	r2, r3, #1
   12fd4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   12fd8:	462b      	mov	r3, r5
   12fda:	2101      	movs	r1, #1
   12fdc:	f7fe bb8e 	b.w	116fc <d_print_comp_inner+0x9e4>
   12fe0:	2600      	movs	r6, #0
   12fe2:	4619      	mov	r1, r3
   12fe4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12fe8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12fec:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   12ff0:	4620      	mov	r0, r4
   12ff2:	4798      	blx	r3
   12ff4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   12ff8:	1c5a      	adds	r2, r3, #1
   12ffa:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   12ffe:	4633      	mov	r3, r6
   13000:	2101      	movs	r1, #1
   13002:	f7fe bb65 	b.w	116d0 <d_print_comp_inner+0x9b8>
   13006:	2200      	movs	r2, #0
   13008:	4619      	mov	r1, r3
   1300a:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1300e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13012:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13016:	4620      	mov	r0, r4
   13018:	4798      	blx	r3
   1301a:	2329      	movs	r3, #41	; 0x29
   1301c:	7023      	strb	r3, [r4, #0]
   1301e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   13022:	782a      	ldrb	r2, [r5, #0]
   13024:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13028:	2101      	movs	r1, #1
   1302a:	3301      	adds	r3, #1
   1302c:	2a3d      	cmp	r2, #61	; 0x3d
   1302e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13032:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13036:	f47e af58 	bne.w	11eea <d_print_comp_inner+0x11d2>
   1303a:	e63f      	b.n	12cbc <d_print_comp_inner+0x1fa4>
   1303c:	2700      	movs	r7, #0
   1303e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13042:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   13046:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1304a:	4620      	mov	r0, r4
   1304c:	4798      	blx	r3
   1304e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13052:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   13056:	3301      	adds	r3, #1
   13058:	4639      	mov	r1, r7
   1305a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1305e:	f7fe bf28 	b.w	11eb2 <d_print_comp_inner+0x119a>
   13062:	2500      	movs	r5, #0
   13064:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13068:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1306c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   13070:	4620      	mov	r0, r4
   13072:	4798      	blx	r3
   13074:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13078:	3301      	adds	r3, #1
   1307a:	4629      	mov	r1, r5
   1307c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13080:	2201      	movs	r2, #1
   13082:	f7ff bb12 	b.w	126aa <d_print_comp_inner+0x1992>
   13086:	781b      	ldrb	r3, [r3, #0]
   13088:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
   1308c:	2901      	cmp	r1, #1
   1308e:	d903      	bls.n	13098 <d_print_comp_inner+0x2380>
   13090:	3b72      	subs	r3, #114	; 0x72
   13092:	2b01      	cmp	r3, #1
   13094:	f63d aead 	bhi.w	10df2 <d_print_comp_inner+0xda>
   13098:	4641      	mov	r1, r8
   1309a:	4620      	mov	r0, r4
   1309c:	f001 f9c8 	bl	14430 <d_print_expr_op>
   130a0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   130a4:	29ff      	cmp	r1, #255	; 0xff
   130a6:	f000 8271 	beq.w	1358c <d_print_comp_inner+0x2874>
   130aa:	1c4a      	adds	r2, r1, #1
   130ac:	233c      	movs	r3, #60	; 0x3c
   130ae:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   130b2:	5463      	strb	r3, [r4, r1]
   130b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   130b8:	68ab      	ldr	r3, [r5, #8]
   130ba:	4641      	mov	r1, r8
   130bc:	685a      	ldr	r2, [r3, #4]
   130be:	4620      	mov	r0, r4
   130c0:	f000 fbce 	bl	13860 <d_print_comp>
   130c4:	2202      	movs	r2, #2
   130c6:	49d5      	ldr	r1, [pc, #852]	; (1341c <d_print_comp_inner+0x2704>)
   130c8:	4620      	mov	r0, r4
   130ca:	f7fb fb51 	bl	e770 <d_append_buffer>
   130ce:	68ab      	ldr	r3, [r5, #8]
   130d0:	4641      	mov	r1, r8
   130d2:	689a      	ldr	r2, [r3, #8]
   130d4:	4620      	mov	r0, r4
   130d6:	f000 fbc3 	bl	13860 <d_print_comp>
   130da:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   130de:	29ff      	cmp	r1, #255	; 0xff
   130e0:	f000 81df 	beq.w	134a2 <d_print_comp_inner+0x278a>
   130e4:	2329      	movs	r3, #41	; 0x29
   130e6:	1c4a      	adds	r2, r1, #1
   130e8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   130ec:	5463      	strb	r3, [r4, r1]
   130ee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   130f2:	f7fd bedf 	b.w	10eb4 <d_print_comp_inner+0x19c>
   130f6:	4632      	mov	r2, r6
   130f8:	4641      	mov	r1, r8
   130fa:	4620      	mov	r0, r4
   130fc:	f000 fbb0 	bl	13860 <d_print_comp>
   13100:	f7fd bed8 	b.w	10eb4 <d_print_comp_inner+0x19c>
   13104:	2600      	movs	r6, #0
   13106:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1310a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1310e:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   13112:	4620      	mov	r0, r4
   13114:	4798      	blx	r3
   13116:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1311a:	3301      	adds	r3, #1
   1311c:	4631      	mov	r1, r6
   1311e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13122:	2201      	movs	r2, #1
   13124:	f7fe ba55 	b.w	115d2 <d_print_comp_inner+0x8ba>
   13128:	49bd      	ldr	r1, [pc, #756]	; (13420 <d_print_comp_inner+0x2708>)
   1312a:	6870      	ldr	r0, [r6, #4]
   1312c:	f005 fff6 	bl	1911c <strncmp>
   13130:	2800      	cmp	r0, #0
   13132:	f47e aabd 	bne.w	116b0 <d_print_comp_inner+0x998>
   13136:	68aa      	ldr	r2, [r5, #8]
   13138:	4641      	mov	r1, r8
   1313a:	4620      	mov	r0, r4
   1313c:	f000 fb90 	bl	13860 <d_print_comp>
   13140:	2202      	movs	r2, #2
   13142:	49b8      	ldr	r1, [pc, #736]	; (13424 <d_print_comp_inner+0x270c>)
   13144:	4620      	mov	r0, r4
   13146:	f7fb fb13 	bl	e770 <d_append_buffer>
   1314a:	f7fe badd 	b.w	11708 <d_print_comp_inner+0x9f0>
   1314e:	68aa      	ldr	r2, [r5, #8]
   13150:	7817      	ldrb	r7, [r2, #0]
   13152:	2f00      	cmp	r7, #0
   13154:	f47e aea8 	bne.w	11ea8 <d_print_comp_inner+0x1190>
   13158:	2b3d      	cmp	r3, #61	; 0x3d
   1315a:	f000 82ef 	beq.w	1373c <d_print_comp_inner+0x2a24>
   1315e:	68aa      	ldr	r2, [r5, #8]
   13160:	4641      	mov	r1, r8
   13162:	4620      	mov	r0, r4
   13164:	3e02      	subs	r6, #2
   13166:	f000 fb7b 	bl	13860 <d_print_comp>
   1316a:	2e04      	cmp	r6, #4
   1316c:	f63d aea2 	bhi.w	10eb4 <d_print_comp_inner+0x19c>
   13170:	e8df f006 	tbb	[pc, r6]
   13174:	0a111826 	.word	0x0a111826
   13178:	03          	.byte	0x03
   13179:	00          	.byte	0x00
   1317a:	4620      	mov	r0, r4
   1317c:	2203      	movs	r2, #3
   1317e:	49aa      	ldr	r1, [pc, #680]	; (13428 <d_print_comp_inner+0x2710>)
   13180:	f7fb faf6 	bl	e770 <d_append_buffer>
   13184:	f7fd be96 	b.w	10eb4 <d_print_comp_inner+0x19c>
   13188:	4620      	mov	r0, r4
   1318a:	2202      	movs	r2, #2
   1318c:	49a7      	ldr	r1, [pc, #668]	; (1342c <d_print_comp_inner+0x2714>)
   1318e:	f7fb faef 	bl	e770 <d_append_buffer>
   13192:	f7fd be8f 	b.w	10eb4 <d_print_comp_inner+0x19c>
   13196:	4620      	mov	r0, r4
   13198:	2202      	movs	r2, #2
   1319a:	49a5      	ldr	r1, [pc, #660]	; (13430 <d_print_comp_inner+0x2718>)
   1319c:	f7fb fae8 	bl	e770 <d_append_buffer>
   131a0:	f7fd be88 	b.w	10eb4 <d_print_comp_inner+0x19c>
   131a4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   131a8:	29ff      	cmp	r1, #255	; 0xff
   131aa:	f000 831a 	beq.w	137e2 <d_print_comp_inner+0x2aca>
   131ae:	236c      	movs	r3, #108	; 0x6c
   131b0:	1c4a      	adds	r2, r1, #1
   131b2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   131b6:	5463      	strb	r3, [r4, r1]
   131b8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   131bc:	f7fd be7a 	b.w	10eb4 <d_print_comp_inner+0x19c>
   131c0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   131c4:	29ff      	cmp	r1, #255	; 0xff
   131c6:	f000 82db 	beq.w	13780 <d_print_comp_inner+0x2a68>
   131ca:	2375      	movs	r3, #117	; 0x75
   131cc:	1c4a      	adds	r2, r1, #1
   131ce:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   131d2:	5463      	strb	r3, [r4, r1]
   131d4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   131d8:	f7fd be6c 	b.w	10eb4 <d_print_comp_inner+0x19c>
   131dc:	2600      	movs	r6, #0
   131de:	4619      	mov	r1, r3
   131e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   131e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   131e8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   131ec:	4620      	mov	r0, r4
   131ee:	4798      	blx	r3
   131f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   131f4:	1c5a      	adds	r2, r3, #1
   131f6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   131fa:	4633      	mov	r3, r6
   131fc:	2101      	movs	r1, #1
   131fe:	f7fe bd3c 	b.w	11c7a <d_print_comp_inner+0xf62>
   13202:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   13206:	f7fe bf95 	b.w	12134 <d_print_comp_inner+0x141c>
   1320a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1320e:	29ff      	cmp	r1, #255	; 0xff
   13210:	f000 8244 	beq.w	1369c <d_print_comp_inner+0x2984>
   13214:	2320      	movs	r3, #32
   13216:	1c4a      	adds	r2, r1, #1
   13218:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1321c:	5463      	strb	r3, [r4, r1]
   1321e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   13222:	e447      	b.n	12ab4 <d_print_comp_inner+0x1d9c>
   13224:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   13228:	29ff      	cmp	r1, #255	; 0xff
   1322a:	f000 826e 	beq.w	1370a <d_print_comp_inner+0x29f2>
   1322e:	2320      	movs	r3, #32
   13230:	1c4a      	adds	r2, r1, #1
   13232:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   13236:	5463      	strb	r3, [r4, r1]
   13238:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1323c:	e419      	b.n	12a72 <d_print_comp_inner+0x1d5a>
   1323e:	2500      	movs	r5, #0
   13240:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13244:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   13248:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1324c:	4620      	mov	r0, r4
   1324e:	4798      	blx	r3
   13250:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13254:	3301      	adds	r3, #1
   13256:	4629      	mov	r1, r5
   13258:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1325c:	e4dd      	b.n	12c1a <d_print_comp_inner+0x1f02>
   1325e:	4664      	mov	r4, ip
   13260:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
   13264:	b1d8      	cbz	r0, 1329e <d_print_comp_inner+0x2586>
   13266:	6802      	ldr	r2, [r0, #0]
   13268:	4291      	cmp	r1, r2
   1326a:	d00a      	beq.n	13282 <d_print_comp_inner+0x256a>
   1326c:	4603      	mov	r3, r0
   1326e:	e004      	b.n	1327a <d_print_comp_inner+0x2562>
   13270:	685b      	ldr	r3, [r3, #4]
   13272:	b1a3      	cbz	r3, 1329e <d_print_comp_inner+0x2586>
   13274:	681a      	ldr	r2, [r3, #0]
   13276:	4291      	cmp	r1, r2
   13278:	d003      	beq.n	13282 <d_print_comp_inner+0x256a>
   1327a:	4295      	cmp	r5, r2
   1327c:	d1f8      	bne.n	13270 <d_print_comp_inner+0x2558>
   1327e:	4298      	cmp	r0, r3
   13280:	d0f6      	beq.n	13270 <d_print_comp_inner+0x2558>
   13282:	3104      	adds	r1, #4
   13284:	4620      	mov	r0, r4
   13286:	f7fb fc83 	bl	eb90 <d_lookup_template_argument.isra.6>
   1328a:	2800      	cmp	r0, #0
   1328c:	f43d ae26 	beq.w	10edc <d_print_comp_inner+0x1c4>
   13290:	7803      	ldrb	r3, [r0, #0]
   13292:	2b2f      	cmp	r3, #47	; 0x2f
   13294:	f43d ae11 	beq.w	10eba <d_print_comp_inner+0x1a2>
   13298:	4601      	mov	r1, r0
   1329a:	f7fe bc30 	b.w	11afe <d_print_comp_inner+0xde6>
   1329e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   132a2:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   132a6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   132aa:	3104      	adds	r1, #4
   132ac:	4620      	mov	r0, r4
   132ae:	f7fb fc6f 	bl	eb90 <d_lookup_template_argument.isra.6>
   132b2:	2800      	cmp	r0, #0
   132b4:	f43d ae10 	beq.w	10ed8 <d_print_comp_inner+0x1c0>
   132b8:	2701      	movs	r7, #1
   132ba:	e7e9      	b.n	13290 <d_print_comp_inner+0x2578>
   132bc:	2600      	movs	r6, #0
   132be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   132c2:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   132c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   132ca:	4620      	mov	r0, r4
   132cc:	4798      	blx	r3
   132ce:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   132d2:	f8da 5004 	ldr.w	r5, [sl, #4]
   132d6:	3301      	adds	r3, #1
   132d8:	4631      	mov	r1, r6
   132da:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   132de:	f7ff b85a 	b.w	12396 <d_print_comp_inner+0x167e>
   132e2:	68aa      	ldr	r2, [r5, #8]
   132e4:	4641      	mov	r1, r8
   132e6:	4620      	mov	r0, r4
   132e8:	f000 faba 	bl	13860 <d_print_comp>
   132ec:	9b06      	ldr	r3, [sp, #24]
   132ee:	9a00      	ldr	r2, [sp, #0]
   132f0:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   132f4:	2b00      	cmp	r3, #0
   132f6:	f43e ac9d 	beq.w	11c34 <d_print_comp_inner+0xf1c>
   132fa:	f7fd bddb 	b.w	10eb4 <d_print_comp_inner+0x19c>
   132fe:	255f      	movs	r5, #95	; 0x5f
   13300:	f7ff ba10 	b.w	12724 <d_print_comp_inner+0x1a0c>
   13304:	2500      	movs	r5, #0
   13306:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1330a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1330e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13312:	4620      	mov	r0, r4
   13314:	4798      	blx	r3
   13316:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1331a:	3301      	adds	r3, #1
   1331c:	4629      	mov	r1, r5
   1331e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13322:	f7ff bb82 	b.w	12a2a <d_print_comp_inner+0x1d12>
   13326:	4648      	mov	r0, r9
   13328:	4942      	ldr	r1, [pc, #264]	; (13434 <d_print_comp_inner+0x271c>)
   1332a:	f005 fb1d 	bl	18968 <strcmp>
   1332e:	b120      	cbz	r0, 1333a <d_print_comp_inner+0x2622>
   13330:	463a      	mov	r2, r7
   13332:	4641      	mov	r1, r8
   13334:	4620      	mov	r0, r4
   13336:	f001 f87b 	bl	14430 <d_print_expr_op>
   1333a:	68ab      	ldr	r3, [r5, #8]
   1333c:	4641      	mov	r1, r8
   1333e:	689a      	ldr	r2, [r3, #8]
   13340:	4620      	mov	r0, r4
   13342:	f001 f8b3 	bl	144ac <d_print_subexpr>
   13346:	f7fd bd9d 	b.w	10e84 <d_print_comp_inner+0x16c>
   1334a:	2600      	movs	r6, #0
   1334c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13350:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   13354:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13358:	4620      	mov	r0, r4
   1335a:	4798      	blx	r3
   1335c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13360:	3301      	adds	r3, #1
   13362:	4631      	mov	r1, r6
   13364:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13368:	f7ff bb88 	b.w	12a7c <d_print_comp_inner+0x1d64>
   1336c:	2500      	movs	r5, #0
   1336e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13372:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   13376:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1337a:	4620      	mov	r0, r4
   1337c:	4798      	blx	r3
   1337e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13382:	3301      	adds	r3, #1
   13384:	4629      	mov	r1, r5
   13386:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1338a:	f7fe bb59 	b.w	11a40 <d_print_comp_inner+0xd28>
   1338e:	2500      	movs	r5, #0
   13390:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   13394:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   13398:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1339c:	4798      	blx	r3
   1339e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   133a2:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   133a6:	3301      	adds	r3, #1
   133a8:	4629      	mov	r1, r5
   133aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   133ae:	f7fe bb2b 	b.w	11a08 <d_print_comp_inner+0xcf0>
   133b2:	6840      	ldr	r0, [r0, #4]
   133b4:	2800      	cmp	r0, #0
   133b6:	f43d ad91 	beq.w	10edc <d_print_comp_inner+0x1c4>
   133ba:	f7fe b959 	b.w	11670 <d_print_comp_inner+0x958>
   133be:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   133c2:	4619      	mov	r1, r3
   133c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   133c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   133cc:	4620      	mov	r0, r4
   133ce:	4798      	blx	r3
   133d0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   133d4:	1c5a      	adds	r2, r3, #1
   133d6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   133da:	462b      	mov	r3, r5
   133dc:	f7ff bb14 	b.w	12a08 <d_print_comp_inner+0x1cf0>
   133e0:	6873      	ldr	r3, [r6, #4]
   133e2:	781a      	ldrb	r2, [r3, #0]
   133e4:	2a01      	cmp	r2, #1
   133e6:	f000 8153 	beq.w	13690 <d_print_comp_inner+0x2978>
   133ea:	f896 a000 	ldrb.w	sl, [r6]
   133ee:	f7ff bae0 	b.w	129b2 <d_print_comp_inner+0x1c9a>
   133f2:	2500      	movs	r5, #0
   133f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   133f8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   133fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13400:	4620      	mov	r0, r4
   13402:	4798      	blx	r3
   13404:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13408:	3301      	adds	r3, #1
   1340a:	4629      	mov	r1, r5
   1340c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13410:	f7ff bb55 	b.w	12abe <d_print_comp_inner+0x1da6>
   13414:	4654      	mov	r4, sl
   13416:	f7fe be8d 	b.w	12134 <d_print_comp_inner+0x141c>
   1341a:	bf00      	nop
   1341c:	0003dcf4 	.word	0x0003dcf4
   13420:	0003db5c 	.word	0x0003db5c
   13424:	0003db64 	.word	0x0003db64
   13428:	0003dd10 	.word	0x0003dd10
   1342c:	0003dd0c 	.word	0x0003dd0c
   13430:	0003dd08 	.word	0x0003dd08
   13434:	0003dafc 	.word	0x0003dafc
   13438:	686a      	ldr	r2, [r5, #4]
   1343a:	4641      	mov	r1, r8
   1343c:	4620      	mov	r0, r4
   1343e:	f001 f835 	bl	144ac <d_print_subexpr>
   13442:	4620      	mov	r0, r4
   13444:	2203      	movs	r2, #3
   13446:	49e2      	ldr	r1, [pc, #904]	; (137d0 <d_print_comp_inner+0x2ab8>)
   13448:	f7fb f992 	bl	e770 <d_append_buffer>
   1344c:	f7fd bd32 	b.w	10eb4 <d_print_comp_inner+0x19c>
   13450:	ab14      	add	r3, sp, #80	; 0x50
   13452:	9603      	str	r6, [sp, #12]
   13454:	f843 cd48 	str.w	ip, [r3, #-72]!
   13458:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1345c:	f7fe b85a 	b.w	11514 <d_print_comp_inner+0x7fc>
   13460:	2700      	movs	r7, #0
   13462:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13466:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1346a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1346e:	4620      	mov	r0, r4
   13470:	4798      	blx	r3
   13472:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13476:	3301      	adds	r3, #1
   13478:	4639      	mov	r1, r7
   1347a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1347e:	e41d      	b.n	12cbc <d_print_comp_inner+0x1fa4>
   13480:	2600      	movs	r6, #0
   13482:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13486:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1348a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1348e:	4620      	mov	r0, r4
   13490:	4798      	blx	r3
   13492:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13496:	3301      	adds	r3, #1
   13498:	4631      	mov	r1, r6
   1349a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1349e:	f7ff bb8a 	b.w	12bb6 <d_print_comp_inner+0x1e9e>
   134a2:	2500      	movs	r5, #0
   134a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   134a8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   134ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   134b0:	4620      	mov	r0, r4
   134b2:	4798      	blx	r3
   134b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   134b8:	3301      	adds	r3, #1
   134ba:	4629      	mov	r1, r5
   134bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   134c0:	e610      	b.n	130e4 <d_print_comp_inner+0x23cc>
   134c2:	2600      	movs	r6, #0
   134c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   134c8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   134cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   134d0:	4620      	mov	r0, r4
   134d2:	4798      	blx	r3
   134d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   134d8:	3301      	adds	r3, #1
   134da:	4631      	mov	r1, r6
   134dc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   134e0:	f7ff bb8a 	b.w	12bf8 <d_print_comp_inner+0x1ee0>
   134e4:	685a      	ldr	r2, [r3, #4]
   134e6:	6891      	ldr	r1, [r2, #8]
   134e8:	2901      	cmp	r1, #1
   134ea:	f47d ac90 	bne.w	10e0e <d_print_comp_inner+0xf6>
   134ee:	6852      	ldr	r2, [r2, #4]
   134f0:	7812      	ldrb	r2, [r2, #0]
   134f2:	2a3e      	cmp	r2, #62	; 0x3e
   134f4:	f47d ac8b 	bne.w	10e0e <d_print_comp_inner+0xf6>
   134f8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   134fc:	29ff      	cmp	r1, #255	; 0xff
   134fe:	d10f      	bne.n	13520 <d_print_comp_inner+0x2808>
   13500:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13504:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   13508:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1350c:	4620      	mov	r0, r4
   1350e:	4798      	blx	r3
   13510:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13514:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   13518:	3301      	adds	r3, #1
   1351a:	4631      	mov	r1, r6
   1351c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13520:	2328      	movs	r3, #40	; 0x28
   13522:	1c4a      	adds	r2, r1, #1
   13524:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   13528:	5463      	strb	r3, [r4, r1]
   1352a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1352e:	686b      	ldr	r3, [r5, #4]
   13530:	f7fd bc6d 	b.w	10e0e <d_print_comp_inner+0xf6>
   13534:	2500      	movs	r5, #0
   13536:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1353a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1353e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13542:	4620      	mov	r0, r4
   13544:	4798      	blx	r3
   13546:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1354a:	3301      	adds	r3, #1
   1354c:	4629      	mov	r1, r5
   1354e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13552:	f7ff bb0b 	b.w	12b6c <d_print_comp_inner+0x1e54>
   13556:	f8db b004 	ldr.w	fp, [fp, #4]
   1355a:	f1bb 0f00 	cmp.w	fp, #0
   1355e:	f43e ade9 	beq.w	12134 <d_print_comp_inner+0x141c>
   13562:	f7fd bfc3 	b.w	114ec <d_print_comp_inner+0x7d4>
   13566:	9b02      	ldr	r3, [sp, #8]
   13568:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1356c:	f7fd bfdb 	b.w	11526 <d_print_comp_inner+0x80e>
   13570:	6893      	ldr	r3, [r2, #8]
   13572:	781b      	ldrb	r3, [r3, #0]
   13574:	2b29      	cmp	r3, #41	; 0x29
   13576:	bf1c      	itt	ne
   13578:	2301      	movne	r3, #1
   1357a:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
   1357e:	6852      	ldr	r2, [r2, #4]
   13580:	4641      	mov	r1, r8
   13582:	4620      	mov	r0, r4
   13584:	f000 ff92 	bl	144ac <d_print_subexpr>
   13588:	f7fd bc52 	b.w	10e30 <d_print_comp_inner+0x118>
   1358c:	2600      	movs	r6, #0
   1358e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13592:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   13596:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1359a:	4620      	mov	r0, r4
   1359c:	4798      	blx	r3
   1359e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   135a2:	3301      	adds	r3, #1
   135a4:	4631      	mov	r1, r6
   135a6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   135aa:	e57e      	b.n	130aa <d_print_comp_inner+0x2392>
   135ac:	6872      	ldr	r2, [r6, #4]
   135ae:	4641      	mov	r1, r8
   135b0:	4620      	mov	r0, r4
   135b2:	f000 ff7b 	bl	144ac <d_print_subexpr>
   135b6:	464a      	mov	r2, r9
   135b8:	4641      	mov	r1, r8
   135ba:	4620      	mov	r0, r4
   135bc:	f000 ff38 	bl	14430 <d_print_expr_op>
   135c0:	f7fd bc78 	b.w	10eb4 <d_print_comp_inner+0x19c>
   135c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   135c8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   135cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   135d0:	4620      	mov	r0, r4
   135d2:	4798      	blx	r3
   135d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   135d8:	3301      	adds	r3, #1
   135da:	4629      	mov	r1, r5
   135dc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   135e0:	f7fd bfad 	b.w	1153e <d_print_comp_inner+0x826>
   135e4:	464a      	mov	r2, r9
   135e6:	4641      	mov	r1, r8
   135e8:	4620      	mov	r0, r4
   135ea:	f000 ff5f 	bl	144ac <d_print_subexpr>
   135ee:	4652      	mov	r2, sl
   135f0:	4641      	mov	r1, r8
   135f2:	4620      	mov	r0, r4
   135f4:	f000 ff1c 	bl	14430 <d_print_expr_op>
   135f8:	463a      	mov	r2, r7
   135fa:	4641      	mov	r1, r8
   135fc:	4620      	mov	r0, r4
   135fe:	f000 ff55 	bl	144ac <d_print_subexpr>
   13602:	4620      	mov	r0, r4
   13604:	2203      	movs	r2, #3
   13606:	4973      	ldr	r1, [pc, #460]	; (137d4 <d_print_comp_inner+0x2abc>)
   13608:	f7fb f8b2 	bl	e770 <d_append_buffer>
   1360c:	462a      	mov	r2, r5
   1360e:	4641      	mov	r1, r8
   13610:	4620      	mov	r0, r4
   13612:	f000 ff4b 	bl	144ac <d_print_subexpr>
   13616:	f7fd bc4d 	b.w	10eb4 <d_print_comp_inner+0x19c>
   1361a:	454f      	cmp	r7, r9
   1361c:	f67f ae6f 	bls.w	132fe <d_print_comp_inner+0x25e6>
   13620:	2d5f      	cmp	r5, #95	; 0x5f
   13622:	f47f ae6c 	bne.w	132fe <d_print_comp_inner+0x25e6>
   13626:	28ff      	cmp	r0, #255	; 0xff
   13628:	f63f a87c 	bhi.w	12724 <d_print_comp_inner+0x1a0c>
   1362c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   13630:	29ff      	cmp	r1, #255	; 0xff
   13632:	b2c5      	uxtb	r5, r0
   13634:	d10f      	bne.n	13656 <d_print_comp_inner+0x293e>
   13636:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1363a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1363e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13642:	4620      	mov	r0, r4
   13644:	4798      	blx	r3
   13646:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1364a:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   1364e:	3301      	adds	r3, #1
   13650:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13654:	2100      	movs	r1, #0
   13656:	1c4b      	adds	r3, r1, #1
   13658:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1365c:	464e      	mov	r6, r9
   1365e:	5465      	strb	r5, [r4, r1]
   13660:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   13664:	f7ff b868 	b.w	12738 <d_print_comp_inner+0x1a20>
   13668:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1366c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   13670:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13674:	4620      	mov	r0, r4
   13676:	4798      	blx	r3
   13678:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1367c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   13680:	3301      	adds	r3, #1
   13682:	4631      	mov	r1, r6
   13684:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13688:	f7ff bbe5 	b.w	12e56 <d_print_comp_inner+0x213e>
   1368c:	4691      	mov	r9, r2
   1368e:	e5e7      	b.n	13260 <d_print_comp_inner+0x2548>
   13690:	68b2      	ldr	r2, [r6, #8]
   13692:	7812      	ldrb	r2, [r2, #0]
   13694:	2a29      	cmp	r2, #41	; 0x29
   13696:	bf08      	it	eq
   13698:	461e      	moveq	r6, r3
   1369a:	e6a6      	b.n	133ea <d_print_comp_inner+0x26d2>
   1369c:	2500      	movs	r5, #0
   1369e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   136a2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   136a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   136aa:	4620      	mov	r0, r4
   136ac:	4798      	blx	r3
   136ae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   136b2:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   136b6:	3301      	adds	r3, #1
   136b8:	4629      	mov	r1, r5
   136ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   136be:	e5a9      	b.n	13214 <d_print_comp_inner+0x24fc>
   136c0:	2600      	movs	r6, #0
   136c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   136c6:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   136ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   136ce:	4620      	mov	r0, r4
   136d0:	4798      	blx	r3
   136d2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   136d6:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   136da:	3301      	adds	r3, #1
   136dc:	4631      	mov	r1, r6
   136de:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   136e2:	f7fd bbc8 	b.w	10e76 <d_print_comp_inner+0x15e>
   136e6:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   136ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   136ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   136f2:	4620      	mov	r0, r4
   136f4:	4798      	blx	r3
   136f6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   136fa:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   136fe:	3301      	adds	r3, #1
   13700:	4631      	mov	r1, r6
   13702:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13706:	f7fd bba4 	b.w	10e52 <d_print_comp_inner+0x13a>
   1370a:	2600      	movs	r6, #0
   1370c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13710:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   13714:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13718:	4620      	mov	r0, r4
   1371a:	4798      	blx	r3
   1371c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13720:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   13724:	3301      	adds	r3, #1
   13726:	4631      	mov	r1, r6
   13728:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1372c:	e57f      	b.n	1322e <d_print_comp_inner+0x2516>
   1372e:	6841      	ldr	r1, [r0, #4]
   13730:	2900      	cmp	r1, #0
   13732:	f43d abd0 	beq.w	10ed6 <d_print_comp_inner+0x1be>
   13736:	780b      	ldrb	r3, [r1, #0]
   13738:	f7fe b9e1 	b.w	11afe <d_print_comp_inner+0xde6>
   1373c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   13740:	29ff      	cmp	r1, #255	; 0xff
   13742:	d00d      	beq.n	13760 <d_print_comp_inner+0x2a48>
   13744:	232d      	movs	r3, #45	; 0x2d
   13746:	1c4a      	adds	r2, r1, #1
   13748:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1374c:	5463      	strb	r3, [r4, r1]
   1374e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   13752:	e504      	b.n	1315e <d_print_comp_inner+0x2446>
   13754:	2205      	movs	r2, #5
   13756:	4920      	ldr	r1, [pc, #128]	; (137d8 <d_print_comp_inner+0x2ac0>)
   13758:	f7fb f80a 	bl	e770 <d_append_buffer>
   1375c:	f7fd bbaa 	b.w	10eb4 <d_print_comp_inner+0x19c>
   13760:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   13764:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
   13768:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1376c:	4798      	blx	r3
   1376e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13772:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   13776:	3301      	adds	r3, #1
   13778:	4639      	mov	r1, r7
   1377a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1377e:	e7e1      	b.n	13744 <d_print_comp_inner+0x2a2c>
   13780:	2500      	movs	r5, #0
   13782:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13786:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1378a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1378e:	4620      	mov	r0, r4
   13790:	4798      	blx	r3
   13792:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13796:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   1379a:	3301      	adds	r3, #1
   1379c:	4629      	mov	r1, r5
   1379e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   137a2:	e512      	b.n	131ca <d_print_comp_inner+0x24b2>
   137a4:	2700      	movs	r7, #0
   137a6:	f7ff b913 	b.w	129d0 <d_print_comp_inner+0x1cb8>
   137aa:	2500      	movs	r5, #0
   137ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   137b0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   137b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   137b8:	4620      	mov	r0, r4
   137ba:	4798      	blx	r3
   137bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   137c0:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   137c4:	3301      	adds	r3, #1
   137c6:	4629      	mov	r1, r5
   137c8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   137cc:	f7fd bb6b 	b.w	10ea6 <d_print_comp_inner+0x18e>
   137d0:	0003dd38 	.word	0x0003dd38
   137d4:	0003dcfc 	.word	0x0003dcfc
   137d8:	0003b71c 	.word	0x0003b71c
   137dc:	4637      	mov	r7, r6
   137de:	f7ff bbe6 	b.w	12fae <d_print_comp_inner+0x2296>
   137e2:	2500      	movs	r5, #0
   137e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   137e8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   137ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   137f0:	4620      	mov	r0, r4
   137f2:	4798      	blx	r3
   137f4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   137f8:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   137fc:	3301      	adds	r3, #1
   137fe:	4629      	mov	r1, r5
   13800:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13804:	e4d3      	b.n	131ae <d_print_comp_inner+0x2496>
   13806:	4671      	mov	r1, lr
   13808:	6002      	str	r2, [r0, #0]
   1380a:	3104      	adds	r1, #4
   1380c:	4620      	mov	r0, r4
   1380e:	f7fb f9bf 	bl	eb90 <d_lookup_template_argument.isra.6>
   13812:	2800      	cmp	r0, #0
   13814:	f47f ad3c 	bne.w	13290 <d_print_comp_inner+0x2578>
   13818:	f7fd bb60 	b.w	10edc <d_print_comp_inner+0x1c4>
   1381c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13820:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   13824:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13828:	4620      	mov	r0, r4
   1382a:	4798      	blx	r3
   1382c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13830:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   13834:	3301      	adds	r3, #1
   13836:	4631      	mov	r1, r6
   13838:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1383c:	f7fe bc02 	b.w	12044 <d_print_comp_inner+0x132c>
   13840:	2301      	movs	r3, #1
   13842:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   13846:	f7fd bb35 	b.w	10eb4 <d_print_comp_inner+0x19c>
   1384a:	4618      	mov	r0, r3
   1384c:	4407      	add	r7, r0
   1384e:	f7ff bb81 	b.w	12f54 <d_print_comp_inner+0x223c>
   13852:	2000      	movs	r0, #0
   13854:	4407      	add	r7, r0
   13856:	f7ff bb7d 	b.w	12f54 <d_print_comp_inner+0x223c>
   1385a:	4607      	mov	r7, r0
   1385c:	f7ff bba7 	b.w	12fae <d_print_comp_inner+0x2296>

00013860 <d_print_comp>:
   13860:	b510      	push	{r4, lr}
   13862:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   13866:	b082      	sub	sp, #8
   13868:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   1386c:	4604      	mov	r4, r0
   1386e:	e88d 000c 	stmia.w	sp, {r2, r3}
   13872:	f7fd fa51 	bl	10d18 <d_print_comp_inner>
   13876:	9b01      	ldr	r3, [sp, #4]
   13878:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1387c:	b002      	add	sp, #8
   1387e:	bd10      	pop	{r4, pc}

00013880 <d_print_mod>:
   13880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13884:	7813      	ldrb	r3, [r2, #0]
   13886:	3b03      	subs	r3, #3
   13888:	b082      	sub	sp, #8
   1388a:	4615      	mov	r5, r2
   1388c:	4604      	mov	r4, r0
   1388e:	4688      	mov	r8, r1
   13890:	2b49      	cmp	r3, #73	; 0x49
   13892:	f200 8223 	bhi.w	13cdc <d_print_mod+0x45c>
   13896:	e8df f013 	tbh	[pc, r3, lsl #1]
   1389a:	01e7      	.short	0x01e7
   1389c:	02210221 	.word	0x02210221
   138a0:	02210221 	.word	0x02210221
   138a4:	02210221 	.word	0x02210221
   138a8:	02210221 	.word	0x02210221
   138ac:	02210221 	.word	0x02210221
   138b0:	02210221 	.word	0x02210221
   138b4:	02210221 	.word	0x02210221
   138b8:	02210221 	.word	0x02210221
   138bc:	02210221 	.word	0x02210221
   138c0:	02210221 	.word	0x02210221
   138c4:	01e90221 	.word	0x01e90221
   138c8:	01a80182 	.word	0x01a80182
   138cc:	018201e9 	.word	0x018201e9
   138d0:	01cd01a8 	.word	0x01cd01a8
   138d4:	006f01da 	.word	0x006f01da
   138d8:	009c008c 	.word	0x009c008c
   138dc:	00cf00ab 	.word	0x00cf00ab
   138e0:	022100f4 	.word	0x022100f4
   138e4:	02210221 	.word	0x02210221
   138e8:	01190221 	.word	0x01190221
   138ec:	015c0221 	.word	0x015c0221
   138f0:	02210221 	.word	0x02210221
   138f4:	02210221 	.word	0x02210221
   138f8:	02210221 	.word	0x02210221
   138fc:	02210221 	.word	0x02210221
   13900:	02210221 	.word	0x02210221
   13904:	02210221 	.word	0x02210221
   13908:	02210221 	.word	0x02210221
   1390c:	02210221 	.word	0x02210221
   13910:	02210221 	.word	0x02210221
   13914:	02210221 	.word	0x02210221
   13918:	02210221 	.word	0x02210221
   1391c:	02210221 	.word	0x02210221
   13920:	02210221 	.word	0x02210221
   13924:	02210221 	.word	0x02210221
   13928:	02210221 	.word	0x02210221
   1392c:	004a      	.short	0x004a
   1392e:	4dd3      	ldr	r5, [pc, #844]	; (13c7c <d_print_mod+0x3fc>)
   13930:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   13934:	f105 0711 	add.w	r7, r5, #17
   13938:	f04f 0800 	mov.w	r8, #0
   1393c:	e008      	b.n	13950 <d_print_mod+0xd0>
   1393e:	460b      	mov	r3, r1
   13940:	3101      	adds	r1, #1
   13942:	42bd      	cmp	r5, r7
   13944:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13948:	54e6      	strb	r6, [r4, r3]
   1394a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1394e:	d02d      	beq.n	139ac <d_print_mod+0x12c>
   13950:	29ff      	cmp	r1, #255	; 0xff
   13952:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   13956:	d1f2      	bne.n	1393e <d_print_mod+0xbe>
   13958:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1395c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   13960:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13964:	4620      	mov	r0, r4
   13966:	4798      	blx	r3
   13968:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1396c:	3301      	adds	r3, #1
   1396e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13972:	2101      	movs	r1, #1
   13974:	2300      	movs	r3, #0
   13976:	e7e4      	b.n	13942 <d_print_mod+0xc2>
   13978:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1397c:	29ff      	cmp	r1, #255	; 0xff
   1397e:	f000 81f7 	beq.w	13d70 <d_print_mod+0x4f0>
   13982:	1c4a      	adds	r2, r1, #1
   13984:	2320      	movs	r3, #32
   13986:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1398a:	5463      	strb	r3, [r4, r1]
   1398c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   13990:	68aa      	ldr	r2, [r5, #8]
   13992:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   13996:	9200      	str	r2, [sp, #0]
   13998:	4641      	mov	r1, r8
   1399a:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1399e:	4620      	mov	r0, r4
   139a0:	9301      	str	r3, [sp, #4]
   139a2:	f7fd f9b9 	bl	10d18 <d_print_comp_inner>
   139a6:	9b01      	ldr	r3, [sp, #4]
   139a8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   139ac:	b002      	add	sp, #8
   139ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   139b2:	f011 0504 	ands.w	r5, r1, #4
   139b6:	d1f9      	bne.n	139ac <d_print_mod+0x12c>
   139b8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   139bc:	2bff      	cmp	r3, #255	; 0xff
   139be:	f000 821c 	beq.w	13dfa <d_print_mod+0x57a>
   139c2:	222a      	movs	r2, #42	; 0x2a
   139c4:	1c59      	adds	r1, r3, #1
   139c6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   139ca:	54e2      	strb	r2, [r4, r3]
   139cc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   139d0:	e7ec      	b.n	139ac <d_print_mod+0x12c>
   139d2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   139d6:	29ff      	cmp	r1, #255	; 0xff
   139d8:	f000 81b9 	beq.w	13d4e <d_print_mod+0x4ce>
   139dc:	1c4a      	adds	r2, r1, #1
   139de:	2326      	movs	r3, #38	; 0x26
   139e0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   139e4:	5463      	strb	r3, [r4, r1]
   139e6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   139ea:	b002      	add	sp, #8
   139ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   139f0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   139f4:	4da2      	ldr	r5, [pc, #648]	; (13c80 <d_print_mod+0x400>)
   139f6:	f04f 0800 	mov.w	r8, #0
   139fa:	1caf      	adds	r7, r5, #2
   139fc:	e008      	b.n	13a10 <d_print_mod+0x190>
   139fe:	460b      	mov	r3, r1
   13a00:	3101      	adds	r1, #1
   13a02:	42bd      	cmp	r5, r7
   13a04:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13a08:	54e6      	strb	r6, [r4, r3]
   13a0a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   13a0e:	d0cd      	beq.n	139ac <d_print_mod+0x12c>
   13a10:	29ff      	cmp	r1, #255	; 0xff
   13a12:	f815 6b01 	ldrb.w	r6, [r5], #1
   13a16:	d1f2      	bne.n	139fe <d_print_mod+0x17e>
   13a18:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13a1c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   13a20:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13a24:	4620      	mov	r0, r4
   13a26:	4798      	blx	r3
   13a28:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13a2c:	3301      	adds	r3, #1
   13a2e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13a32:	2101      	movs	r1, #1
   13a34:	2300      	movs	r3, #0
   13a36:	e7e4      	b.n	13a02 <d_print_mod+0x182>
   13a38:	4d92      	ldr	r5, [pc, #584]	; (13c84 <d_print_mod+0x404>)
   13a3a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   13a3e:	f105 0708 	add.w	r7, r5, #8
   13a42:	f04f 0800 	mov.w	r8, #0
   13a46:	e008      	b.n	13a5a <d_print_mod+0x1da>
   13a48:	460b      	mov	r3, r1
   13a4a:	3101      	adds	r1, #1
   13a4c:	42bd      	cmp	r5, r7
   13a4e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13a52:	54e6      	strb	r6, [r4, r3]
   13a54:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   13a58:	d0a8      	beq.n	139ac <d_print_mod+0x12c>
   13a5a:	29ff      	cmp	r1, #255	; 0xff
   13a5c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   13a60:	d1f2      	bne.n	13a48 <d_print_mod+0x1c8>
   13a62:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13a66:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   13a6a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13a6e:	4620      	mov	r0, r4
   13a70:	4798      	blx	r3
   13a72:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13a76:	3301      	adds	r3, #1
   13a78:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13a7c:	2101      	movs	r1, #1
   13a7e:	2300      	movs	r3, #0
   13a80:	e7e4      	b.n	13a4c <d_print_mod+0x1cc>
   13a82:	4d81      	ldr	r5, [pc, #516]	; (13c88 <d_print_mod+0x408>)
   13a84:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   13a88:	f105 070a 	add.w	r7, r5, #10
   13a8c:	f04f 0800 	mov.w	r8, #0
   13a90:	e008      	b.n	13aa4 <d_print_mod+0x224>
   13a92:	460b      	mov	r3, r1
   13a94:	3101      	adds	r1, #1
   13a96:	42bd      	cmp	r5, r7
   13a98:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13a9c:	54e6      	strb	r6, [r4, r3]
   13a9e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   13aa2:	d083      	beq.n	139ac <d_print_mod+0x12c>
   13aa4:	29ff      	cmp	r1, #255	; 0xff
   13aa6:	f815 6b01 	ldrb.w	r6, [r5], #1
   13aaa:	d1f2      	bne.n	13a92 <d_print_mod+0x212>
   13aac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13ab0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   13ab4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13ab8:	4620      	mov	r0, r4
   13aba:	4798      	blx	r3
   13abc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13ac0:	3301      	adds	r3, #1
   13ac2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13ac6:	2101      	movs	r1, #1
   13ac8:	2300      	movs	r3, #0
   13aca:	e7e4      	b.n	13a96 <d_print_mod+0x216>
   13acc:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   13ad0:	2b28      	cmp	r3, #40	; 0x28
   13ad2:	d00b      	beq.n	13aec <d_print_mod+0x26c>
   13ad4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   13ad8:	2bff      	cmp	r3, #255	; 0xff
   13ada:	f000 8126 	beq.w	13d2a <d_print_mod+0x4aa>
   13ade:	2220      	movs	r2, #32
   13ae0:	1c59      	adds	r1, r3, #1
   13ae2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13ae6:	54e2      	strb	r2, [r4, r3]
   13ae8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   13aec:	686a      	ldr	r2, [r5, #4]
   13aee:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   13af2:	4d66      	ldr	r5, [pc, #408]	; (13c8c <d_print_mod+0x40c>)
   13af4:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   13af8:	4641      	mov	r1, r8
   13afa:	4620      	mov	r0, r4
   13afc:	9301      	str	r3, [sp, #4]
   13afe:	9200      	str	r2, [sp, #0]
   13b00:	f7fd f90a 	bl	10d18 <d_print_comp_inner>
   13b04:	9b01      	ldr	r3, [sp, #4]
   13b06:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   13b0a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   13b0e:	1cef      	adds	r7, r5, #3
   13b10:	f04f 0800 	mov.w	r8, #0
   13b14:	e009      	b.n	13b2a <d_print_mod+0x2aa>
   13b16:	460b      	mov	r3, r1
   13b18:	3101      	adds	r1, #1
   13b1a:	42bd      	cmp	r5, r7
   13b1c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13b20:	54e6      	strb	r6, [r4, r3]
   13b22:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   13b26:	f43f af41 	beq.w	139ac <d_print_mod+0x12c>
   13b2a:	29ff      	cmp	r1, #255	; 0xff
   13b2c:	f815 6b01 	ldrb.w	r6, [r5], #1
   13b30:	d1f1      	bne.n	13b16 <d_print_mod+0x296>
   13b32:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13b36:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   13b3a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13b3e:	4620      	mov	r0, r4
   13b40:	4798      	blx	r3
   13b42:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13b46:	3301      	adds	r3, #1
   13b48:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13b4c:	2101      	movs	r1, #1
   13b4e:	2300      	movs	r3, #0
   13b50:	e7e3      	b.n	13b1a <d_print_mod+0x29a>
   13b52:	4e4f      	ldr	r6, [pc, #316]	; (13c90 <d_print_mod+0x410>)
   13b54:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   13b58:	f106 0a0a 	add.w	sl, r6, #10
   13b5c:	f04f 0900 	mov.w	r9, #0
   13b60:	e009      	b.n	13b76 <d_print_mod+0x2f6>
   13b62:	460b      	mov	r3, r1
   13b64:	3101      	adds	r1, #1
   13b66:	4556      	cmp	r6, sl
   13b68:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13b6c:	54e7      	strb	r7, [r4, r3]
   13b6e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   13b72:	f000 80c0 	beq.w	13cf6 <d_print_mod+0x476>
   13b76:	29ff      	cmp	r1, #255	; 0xff
   13b78:	f816 7b01 	ldrb.w	r7, [r6], #1
   13b7c:	d1f1      	bne.n	13b62 <d_print_mod+0x2e2>
   13b7e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13b82:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   13b86:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13b8a:	4620      	mov	r0, r4
   13b8c:	4798      	blx	r3
   13b8e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13b92:	3301      	adds	r3, #1
   13b94:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13b98:	2101      	movs	r1, #1
   13b9a:	2300      	movs	r3, #0
   13b9c:	e7e3      	b.n	13b66 <d_print_mod+0x2e6>
   13b9e:	4d3d      	ldr	r5, [pc, #244]	; (13c94 <d_print_mod+0x414>)
   13ba0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   13ba4:	f105 0709 	add.w	r7, r5, #9
   13ba8:	f04f 0800 	mov.w	r8, #0
   13bac:	e009      	b.n	13bc2 <d_print_mod+0x342>
   13bae:	460b      	mov	r3, r1
   13bb0:	3101      	adds	r1, #1
   13bb2:	42bd      	cmp	r5, r7
   13bb4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13bb8:	54e6      	strb	r6, [r4, r3]
   13bba:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   13bbe:	f43f aef5 	beq.w	139ac <d_print_mod+0x12c>
   13bc2:	29ff      	cmp	r1, #255	; 0xff
   13bc4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   13bc8:	d1f1      	bne.n	13bae <d_print_mod+0x32e>
   13bca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13bce:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   13bd2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13bd6:	4620      	mov	r0, r4
   13bd8:	4798      	blx	r3
   13bda:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13bde:	3301      	adds	r3, #1
   13be0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13be4:	2101      	movs	r1, #1
   13be6:	2300      	movs	r3, #0
   13be8:	e7e3      	b.n	13bb2 <d_print_mod+0x332>
   13bea:	4d2b      	ldr	r5, [pc, #172]	; (13c98 <d_print_mod+0x418>)
   13bec:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   13bf0:	1daf      	adds	r7, r5, #6
   13bf2:	f04f 0800 	mov.w	r8, #0
   13bf6:	e009      	b.n	13c0c <d_print_mod+0x38c>
   13bf8:	460b      	mov	r3, r1
   13bfa:	3101      	adds	r1, #1
   13bfc:	42bd      	cmp	r5, r7
   13bfe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13c02:	54e6      	strb	r6, [r4, r3]
   13c04:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   13c08:	f43f aed0 	beq.w	139ac <d_print_mod+0x12c>
   13c0c:	29ff      	cmp	r1, #255	; 0xff
   13c0e:	f815 6b01 	ldrb.w	r6, [r5], #1
   13c12:	d1f1      	bne.n	13bf8 <d_print_mod+0x378>
   13c14:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13c18:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   13c1c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13c20:	4620      	mov	r0, r4
   13c22:	4798      	blx	r3
   13c24:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13c28:	3301      	adds	r3, #1
   13c2a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13c2e:	2101      	movs	r1, #1
   13c30:	2300      	movs	r3, #0
   13c32:	e7e3      	b.n	13bfc <d_print_mod+0x37c>
   13c34:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   13c38:	2bff      	cmp	r3, #255	; 0xff
   13c3a:	f000 80cc 	beq.w	13dd6 <d_print_mod+0x556>
   13c3e:	2220      	movs	r2, #32
   13c40:	1c59      	adds	r1, r3, #1
   13c42:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13c46:	54e2      	strb	r2, [r4, r3]
   13c48:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   13c4c:	e6c3      	b.n	139d6 <d_print_mod+0x156>
   13c4e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   13c52:	2bff      	cmp	r3, #255	; 0xff
   13c54:	f000 80ad 	beq.w	13db2 <d_print_mod+0x532>
   13c58:	2220      	movs	r2, #32
   13c5a:	1c59      	adds	r1, r3, #1
   13c5c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13c60:	54e2      	strb	r2, [r4, r3]
   13c62:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   13c66:	e6c5      	b.n	139f4 <d_print_mod+0x174>
   13c68:	686a      	ldr	r2, [r5, #4]
   13c6a:	e692      	b.n	13992 <d_print_mod+0x112>
   13c6c:	4d0b      	ldr	r5, [pc, #44]	; (13c9c <d_print_mod+0x41c>)
   13c6e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   13c72:	f105 0709 	add.w	r7, r5, #9
   13c76:	f04f 0800 	mov.w	r8, #0
   13c7a:	e01b      	b.n	13cb4 <d_print_mod+0x434>
   13c7c:	0003dddb 	.word	0x0003dddb
   13c80:	0003ddf0 	.word	0x0003ddf0
   13c84:	0003ddf3 	.word	0x0003ddf3
   13c88:	0003de00 	.word	0x0003de00
   13c8c:	0003de0c 	.word	0x0003de0c
   13c90:	0003de10 	.word	0x0003de10
   13c94:	0003ddc7 	.word	0x0003ddc7
   13c98:	0003ddd4 	.word	0x0003ddd4
   13c9c:	0003ddbb 	.word	0x0003ddbb
   13ca0:	460b      	mov	r3, r1
   13ca2:	3101      	adds	r1, #1
   13ca4:	42af      	cmp	r7, r5
   13ca6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13caa:	54e6      	strb	r6, [r4, r3]
   13cac:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   13cb0:	f43f ae7c 	beq.w	139ac <d_print_mod+0x12c>
   13cb4:	29ff      	cmp	r1, #255	; 0xff
   13cb6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   13cba:	d1f1      	bne.n	13ca0 <d_print_mod+0x420>
   13cbc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13cc0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   13cc4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13cc8:	4620      	mov	r0, r4
   13cca:	4798      	blx	r3
   13ccc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13cd0:	3301      	adds	r3, #1
   13cd2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13cd6:	2101      	movs	r1, #1
   13cd8:	2300      	movs	r3, #0
   13cda:	e7e3      	b.n	13ca4 <d_print_mod+0x424>
   13cdc:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   13ce0:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   13ce4:	462a      	mov	r2, r5
   13ce6:	9301      	str	r3, [sp, #4]
   13ce8:	9500      	str	r5, [sp, #0]
   13cea:	f7fd f815 	bl	10d18 <d_print_comp_inner>
   13cee:	9b01      	ldr	r3, [sp, #4]
   13cf0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   13cf4:	e65a      	b.n	139ac <d_print_mod+0x12c>
   13cf6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   13cfa:	686a      	ldr	r2, [r5, #4]
   13cfc:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   13d00:	4641      	mov	r1, r8
   13d02:	4620      	mov	r0, r4
   13d04:	9301      	str	r3, [sp, #4]
   13d06:	9200      	str	r2, [sp, #0]
   13d08:	f7fd f806 	bl	10d18 <d_print_comp_inner>
   13d0c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   13d10:	9b01      	ldr	r3, [sp, #4]
   13d12:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   13d16:	29ff      	cmp	r1, #255	; 0xff
   13d18:	d03a      	beq.n	13d90 <d_print_mod+0x510>
   13d1a:	1c4a      	adds	r2, r1, #1
   13d1c:	2329      	movs	r3, #41	; 0x29
   13d1e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   13d22:	5463      	strb	r3, [r4, r1]
   13d24:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   13d28:	e640      	b.n	139ac <d_print_mod+0x12c>
   13d2a:	2600      	movs	r6, #0
   13d2c:	4619      	mov	r1, r3
   13d2e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   13d32:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   13d36:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   13d3a:	4798      	blx	r3
   13d3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13d40:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   13d44:	1c5a      	adds	r2, r3, #1
   13d46:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   13d4a:	4633      	mov	r3, r6
   13d4c:	e6c7      	b.n	13ade <d_print_mod+0x25e>
   13d4e:	2500      	movs	r5, #0
   13d50:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13d54:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13d58:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   13d5c:	4620      	mov	r0, r4
   13d5e:	4798      	blx	r3
   13d60:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13d64:	3301      	adds	r3, #1
   13d66:	4629      	mov	r1, r5
   13d68:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13d6c:	2201      	movs	r2, #1
   13d6e:	e636      	b.n	139de <d_print_mod+0x15e>
   13d70:	2600      	movs	r6, #0
   13d72:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   13d76:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   13d7a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   13d7e:	4798      	blx	r3
   13d80:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13d84:	3301      	adds	r3, #1
   13d86:	4631      	mov	r1, r6
   13d88:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13d8c:	2201      	movs	r2, #1
   13d8e:	e5f9      	b.n	13984 <d_print_mod+0x104>
   13d90:	2500      	movs	r5, #0
   13d92:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13d96:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13d9a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   13d9e:	4620      	mov	r0, r4
   13da0:	4798      	blx	r3
   13da2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13da6:	3301      	adds	r3, #1
   13da8:	4629      	mov	r1, r5
   13daa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13dae:	2201      	movs	r2, #1
   13db0:	e7b4      	b.n	13d1c <d_print_mod+0x49c>
   13db2:	2500      	movs	r5, #0
   13db4:	4619      	mov	r1, r3
   13db6:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   13dba:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   13dbe:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   13dc2:	4798      	blx	r3
   13dc4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13dc8:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   13dcc:	1c5a      	adds	r2, r3, #1
   13dce:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   13dd2:	462b      	mov	r3, r5
   13dd4:	e740      	b.n	13c58 <d_print_mod+0x3d8>
   13dd6:	2500      	movs	r5, #0
   13dd8:	4619      	mov	r1, r3
   13dda:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   13dde:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   13de2:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   13de6:	4798      	blx	r3
   13de8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13dec:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   13df0:	1c5a      	adds	r2, r3, #1
   13df2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   13df6:	462b      	mov	r3, r5
   13df8:	e721      	b.n	13c3e <d_print_mod+0x3be>
   13dfa:	4619      	mov	r1, r3
   13dfc:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   13e00:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   13e04:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   13e08:	4798      	blx	r3
   13e0a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13e0e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   13e12:	1c5a      	adds	r2, r3, #1
   13e14:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   13e18:	462b      	mov	r3, r5
   13e1a:	e5d2      	b.n	139c2 <d_print_mod+0x142>

00013e1c <d_print_mod_list>:
   13e1c:	2a00      	cmp	r2, #0
   13e1e:	f000 80a1 	beq.w	13f64 <d_print_mod_list+0x148>
   13e22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e26:	461e      	mov	r6, r3
   13e28:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
   13e2c:	b089      	sub	sp, #36	; 0x24
   13e2e:	4605      	mov	r5, r0
   13e30:	bb43      	cbnz	r3, 13e84 <d_print_mod_list+0x68>
   13e32:	460f      	mov	r7, r1
   13e34:	4614      	mov	r4, r2
   13e36:	f04f 0801 	mov.w	r8, #1
   13e3a:	e002      	b.n	13e42 <d_print_mod_list+0x26>
   13e3c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   13e40:	bb03      	cbnz	r3, 13e84 <d_print_mod_list+0x68>
   13e42:	68a3      	ldr	r3, [r4, #8]
   13e44:	b9db      	cbnz	r3, 13e7e <d_print_mod_list+0x62>
   13e46:	6862      	ldr	r2, [r4, #4]
   13e48:	7813      	ldrb	r3, [r2, #0]
   13e4a:	b92e      	cbnz	r6, 13e58 <d_print_mod_list+0x3c>
   13e4c:	f1a3 011c 	sub.w	r1, r3, #28
   13e50:	2904      	cmp	r1, #4
   13e52:	d914      	bls.n	13e7e <d_print_mod_list+0x62>
   13e54:	2b4c      	cmp	r3, #76	; 0x4c
   13e56:	d012      	beq.n	13e7e <d_print_mod_list+0x62>
   13e58:	68e1      	ldr	r1, [r4, #12]
   13e5a:	f8c4 8008 	str.w	r8, [r4, #8]
   13e5e:	2b29      	cmp	r3, #41	; 0x29
   13e60:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
   13e64:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
   13e68:	d00f      	beq.n	13e8a <d_print_mod_list+0x6e>
   13e6a:	2b2a      	cmp	r3, #42	; 0x2a
   13e6c:	d018      	beq.n	13ea0 <d_print_mod_list+0x84>
   13e6e:	2b02      	cmp	r3, #2
   13e70:	d021      	beq.n	13eb6 <d_print_mod_list+0x9a>
   13e72:	4639      	mov	r1, r7
   13e74:	4628      	mov	r0, r5
   13e76:	f7ff fd03 	bl	13880 <d_print_mod>
   13e7a:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   13e7e:	6824      	ldr	r4, [r4, #0]
   13e80:	2c00      	cmp	r4, #0
   13e82:	d1db      	bne.n	13e3c <d_print_mod_list+0x20>
   13e84:	b009      	add	sp, #36	; 0x24
   13e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e8a:	6823      	ldr	r3, [r4, #0]
   13e8c:	3208      	adds	r2, #8
   13e8e:	4639      	mov	r1, r7
   13e90:	4628      	mov	r0, r5
   13e92:	f000 f9d9 	bl	14248 <d_print_function_type.isra.11>
   13e96:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   13e9a:	b009      	add	sp, #36	; 0x24
   13e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ea0:	6823      	ldr	r3, [r4, #0]
   13ea2:	3204      	adds	r2, #4
   13ea4:	4639      	mov	r1, r7
   13ea6:	4628      	mov	r0, r5
   13ea8:	f000 f8f2 	bl	14090 <d_print_array_type.isra.10>
   13eac:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   13eb0:	b009      	add	sp, #36	; 0x24
   13eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13eb6:	2600      	movs	r6, #0
   13eb8:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
   13ebc:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
   13ec0:	6852      	ldr	r2, [r2, #4]
   13ec2:	4639      	mov	r1, r7
   13ec4:	4628      	mov	r0, r5
   13ec6:	f7ff fccb 	bl	13860 <d_print_comp>
   13eca:	f017 0a04 	ands.w	sl, r7, #4
   13ece:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
   13ed2:	d023      	beq.n	13f1c <d_print_mod_list+0x100>
   13ed4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   13ed8:	29ff      	cmp	r1, #255	; 0xff
   13eda:	f000 80c1 	beq.w	14060 <d_print_mod_list+0x244>
   13ede:	1c4a      	adds	r2, r1, #1
   13ee0:	232e      	movs	r3, #46	; 0x2e
   13ee2:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
   13ee6:	546b      	strb	r3, [r5, r1]
   13ee8:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
   13eec:	6863      	ldr	r3, [r4, #4]
   13eee:	689c      	ldr	r4, [r3, #8]
   13ef0:	7823      	ldrb	r3, [r4, #0]
   13ef2:	2b46      	cmp	r3, #70	; 0x46
   13ef4:	d037      	beq.n	13f66 <d_print_mod_list+0x14a>
   13ef6:	f1a3 021c 	sub.w	r2, r3, #28
   13efa:	2a04      	cmp	r2, #4
   13efc:	d90b      	bls.n	13f16 <d_print_mod_list+0xfa>
   13efe:	2b4c      	cmp	r3, #76	; 0x4c
   13f00:	d009      	beq.n	13f16 <d_print_mod_list+0xfa>
   13f02:	4622      	mov	r2, r4
   13f04:	4639      	mov	r1, r7
   13f06:	4628      	mov	r0, r5
   13f08:	f7ff fcaa 	bl	13860 <d_print_comp>
   13f0c:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   13f10:	b009      	add	sp, #36	; 0x24
   13f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f16:	6864      	ldr	r4, [r4, #4]
   13f18:	7823      	ldrb	r3, [r4, #0]
   13f1a:	e7ec      	b.n	13ef6 <d_print_mod_list+0xda>
   13f1c:	4e58      	ldr	r6, [pc, #352]	; (14080 <d_print_mod_list+0x264>)
   13f1e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   13f22:	f106 0b02 	add.w	fp, r6, #2
   13f26:	e009      	b.n	13f3c <d_print_mod_list+0x120>
   13f28:	460b      	mov	r3, r1
   13f2a:	3101      	adds	r1, #1
   13f2c:	455e      	cmp	r6, fp
   13f2e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   13f32:	f805 8003 	strb.w	r8, [r5, r3]
   13f36:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   13f3a:	d0d7      	beq.n	13eec <d_print_mod_list+0xd0>
   13f3c:	29ff      	cmp	r1, #255	; 0xff
   13f3e:	f816 8b01 	ldrb.w	r8, [r6], #1
   13f42:	d1f1      	bne.n	13f28 <d_print_mod_list+0x10c>
   13f44:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   13f48:	f885 a0ff 	strb.w	sl, [r5, #255]	; 0xff
   13f4c:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   13f50:	4628      	mov	r0, r5
   13f52:	4798      	blx	r3
   13f54:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   13f58:	3301      	adds	r3, #1
   13f5a:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   13f5e:	2101      	movs	r1, #1
   13f60:	2300      	movs	r3, #0
   13f62:	e7e3      	b.n	13f2c <d_print_mod_list+0x110>
   13f64:	4770      	bx	lr
   13f66:	4e47      	ldr	r6, [pc, #284]	; (14084 <d_print_mod_list+0x268>)
   13f68:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   13f6c:	f106 0a0d 	add.w	sl, r6, #13
   13f70:	f04f 0b00 	mov.w	fp, #0
   13f74:	e009      	b.n	13f8a <d_print_mod_list+0x16e>
   13f76:	460b      	mov	r3, r1
   13f78:	3101      	adds	r1, #1
   13f7a:	45b2      	cmp	sl, r6
   13f7c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   13f80:	f805 8003 	strb.w	r8, [r5, r3]
   13f84:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   13f88:	d013      	beq.n	13fb2 <d_print_mod_list+0x196>
   13f8a:	29ff      	cmp	r1, #255	; 0xff
   13f8c:	f816 8b01 	ldrb.w	r8, [r6], #1
   13f90:	d1f1      	bne.n	13f76 <d_print_mod_list+0x15a>
   13f92:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   13f96:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   13f9a:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   13f9e:	4628      	mov	r0, r5
   13fa0:	4798      	blx	r3
   13fa2:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   13fa6:	3301      	adds	r3, #1
   13fa8:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   13fac:	2101      	movs	r1, #1
   13fae:	2300      	movs	r3, #0
   13fb0:	e7e3      	b.n	13f7a <d_print_mod_list+0x15e>
   13fb2:	68a2      	ldr	r2, [r4, #8]
   13fb4:	4934      	ldr	r1, [pc, #208]	; (14088 <d_print_mod_list+0x26c>)
   13fb6:	3201      	adds	r2, #1
   13fb8:	a801      	add	r0, sp, #4
   13fba:	f004 fc63 	bl	18884 <sprintf>
   13fbe:	a801      	add	r0, sp, #4
   13fc0:	f005 f83e 	bl	19040 <strlen>
   13fc4:	b328      	cbz	r0, 14012 <d_print_mod_list+0x1f6>
   13fc6:	ae01      	add	r6, sp, #4
   13fc8:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   13fcc:	eb06 0a00 	add.w	sl, r6, r0
   13fd0:	f04f 0b00 	mov.w	fp, #0
   13fd4:	e009      	b.n	13fea <d_print_mod_list+0x1ce>
   13fd6:	460b      	mov	r3, r1
   13fd8:	3101      	adds	r1, #1
   13fda:	45b2      	cmp	sl, r6
   13fdc:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   13fe0:	f805 8003 	strb.w	r8, [r5, r3]
   13fe4:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   13fe8:	d015      	beq.n	14016 <d_print_mod_list+0x1fa>
   13fea:	29ff      	cmp	r1, #255	; 0xff
   13fec:	f816 8b01 	ldrb.w	r8, [r6], #1
   13ff0:	d1f1      	bne.n	13fd6 <d_print_mod_list+0x1ba>
   13ff2:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   13ff6:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   13ffa:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   13ffe:	4628      	mov	r0, r5
   14000:	4798      	blx	r3
   14002:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   14006:	3301      	adds	r3, #1
   14008:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1400c:	2101      	movs	r1, #1
   1400e:	2300      	movs	r3, #0
   14010:	e7e3      	b.n	13fda <d_print_mod_list+0x1be>
   14012:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   14016:	4e1d      	ldr	r6, [pc, #116]	; (1408c <d_print_mod_list+0x270>)
   14018:	f04f 0b00 	mov.w	fp, #0
   1401c:	f106 0a03 	add.w	sl, r6, #3
   14020:	e00a      	b.n	14038 <d_print_mod_list+0x21c>
   14022:	460b      	mov	r3, r1
   14024:	3101      	adds	r1, #1
   14026:	45b2      	cmp	sl, r6
   14028:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1402c:	f805 8003 	strb.w	r8, [r5, r3]
   14030:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   14034:	f43f af6f 	beq.w	13f16 <d_print_mod_list+0xfa>
   14038:	29ff      	cmp	r1, #255	; 0xff
   1403a:	f816 8b01 	ldrb.w	r8, [r6], #1
   1403e:	d1f0      	bne.n	14022 <d_print_mod_list+0x206>
   14040:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   14044:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   14048:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1404c:	4628      	mov	r0, r5
   1404e:	4798      	blx	r3
   14050:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   14054:	3301      	adds	r3, #1
   14056:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1405a:	2101      	movs	r1, #1
   1405c:	2300      	movs	r3, #0
   1405e:	e7e2      	b.n	14026 <d_print_mod_list+0x20a>
   14060:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   14064:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   14068:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
   1406c:	4628      	mov	r0, r5
   1406e:	4798      	blx	r3
   14070:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   14074:	3301      	adds	r3, #1
   14076:	4631      	mov	r1, r6
   14078:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1407c:	2201      	movs	r2, #1
   1407e:	e72f      	b.n	13ee0 <d_print_mod_list+0xc4>
   14080:	0003db44 	.word	0x0003db44
   14084:	0003db48 	.word	0x0003db48
   14088:	0003cbdc 	.word	0x0003cbdc
   1408c:	0003db58 	.word	0x0003db58

00014090 <d_print_array_type.isra.10>:
   14090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14094:	4604      	mov	r4, r0
   14096:	460f      	mov	r7, r1
   14098:	4690      	mov	r8, r2
   1409a:	b163      	cbz	r3, 140b6 <d_print_array_type.isra.10+0x26>
   1409c:	461e      	mov	r6, r3
   1409e:	461a      	mov	r2, r3
   140a0:	6893      	ldr	r3, [r2, #8]
   140a2:	b393      	cbz	r3, 1410a <d_print_array_type.isra.10+0x7a>
   140a4:	6812      	ldr	r2, [r2, #0]
   140a6:	2a00      	cmp	r2, #0
   140a8:	d1fa      	bne.n	140a0 <d_print_array_type.isra.10+0x10>
   140aa:	4613      	mov	r3, r2
   140ac:	4639      	mov	r1, r7
   140ae:	4632      	mov	r2, r6
   140b0:	4620      	mov	r0, r4
   140b2:	f7ff feb3 	bl	13e1c <d_print_mod_list>
   140b6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   140ba:	29ff      	cmp	r1, #255	; 0xff
   140bc:	f000 808d 	beq.w	141da <d_print_array_type.isra.10+0x14a>
   140c0:	1c4b      	adds	r3, r1, #1
   140c2:	2220      	movs	r2, #32
   140c4:	2bff      	cmp	r3, #255	; 0xff
   140c6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   140ca:	5462      	strb	r2, [r4, r1]
   140cc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   140d0:	d068      	beq.n	141a4 <d_print_array_type.isra.10+0x114>
   140d2:	225b      	movs	r2, #91	; 0x5b
   140d4:	1c59      	adds	r1, r3, #1
   140d6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   140da:	54e2      	strb	r2, [r4, r3]
   140dc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   140e0:	f8d8 2000 	ldr.w	r2, [r8]
   140e4:	b12a      	cbz	r2, 140f2 <d_print_array_type.isra.10+0x62>
   140e6:	4639      	mov	r1, r7
   140e8:	4620      	mov	r0, r4
   140ea:	f7ff fbb9 	bl	13860 <d_print_comp>
   140ee:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   140f2:	29ff      	cmp	r1, #255	; 0xff
   140f4:	f000 8082 	beq.w	141fc <d_print_array_type.isra.10+0x16c>
   140f8:	1c4a      	adds	r2, r1, #1
   140fa:	235d      	movs	r3, #93	; 0x5d
   140fc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   14100:	5463      	strb	r3, [r4, r1]
   14102:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   14106:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1410a:	6852      	ldr	r2, [r2, #4]
   1410c:	7812      	ldrb	r2, [r2, #0]
   1410e:	2a2a      	cmp	r2, #42	; 0x2a
   14110:	d03f      	beq.n	14192 <d_print_array_type.isra.10+0x102>
   14112:	f8df 9130 	ldr.w	r9, [pc, #304]	; 14244 <d_print_array_type.isra.10+0x1b4>
   14116:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1411a:	461d      	mov	r5, r3
   1411c:	f109 0b02 	add.w	fp, r9, #2
   14120:	e00a      	b.n	14138 <d_print_array_type.isra.10+0xa8>
   14122:	460b      	mov	r3, r1
   14124:	45cb      	cmp	fp, r9
   14126:	f101 0101 	add.w	r1, r1, #1
   1412a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1412e:	f804 a003 	strb.w	sl, [r4, r3]
   14132:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   14136:	d01a      	beq.n	1416e <d_print_array_type.isra.10+0xde>
   14138:	29ff      	cmp	r1, #255	; 0xff
   1413a:	f819 ab01 	ldrb.w	sl, [r9], #1
   1413e:	d1f0      	bne.n	14122 <d_print_array_type.isra.10+0x92>
   14140:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14144:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   14148:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1414c:	4620      	mov	r0, r4
   1414e:	4798      	blx	r3
   14150:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   14154:	3301      	adds	r3, #1
   14156:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1415a:	2300      	movs	r3, #0
   1415c:	2101      	movs	r1, #1
   1415e:	45cb      	cmp	fp, r9
   14160:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14164:	f804 a003 	strb.w	sl, [r4, r3]
   14168:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1416c:	d1e4      	bne.n	14138 <d_print_array_type.isra.10+0xa8>
   1416e:	2300      	movs	r3, #0
   14170:	4632      	mov	r2, r6
   14172:	4639      	mov	r1, r7
   14174:	4620      	mov	r0, r4
   14176:	f7ff fe51 	bl	13e1c <d_print_mod_list>
   1417a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1417e:	2bff      	cmp	r3, #255	; 0xff
   14180:	d04d      	beq.n	1421e <d_print_array_type.isra.10+0x18e>
   14182:	1c59      	adds	r1, r3, #1
   14184:	2229      	movs	r2, #41	; 0x29
   14186:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1418a:	54e2      	strb	r2, [r4, r3]
   1418c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   14190:	e793      	b.n	140ba <d_print_array_type.isra.10+0x2a>
   14192:	4632      	mov	r2, r6
   14194:	4639      	mov	r1, r7
   14196:	4620      	mov	r0, r4
   14198:	f7ff fe40 	bl	13e1c <d_print_mod_list>
   1419c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   141a0:	2bff      	cmp	r3, #255	; 0xff
   141a2:	d196      	bne.n	140d2 <d_print_array_type.isra.10+0x42>
   141a4:	2200      	movs	r2, #0
   141a6:	4619      	mov	r1, r3
   141a8:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   141ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   141b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   141b4:	4620      	mov	r0, r4
   141b6:	4798      	blx	r3
   141b8:	235b      	movs	r3, #91	; 0x5b
   141ba:	7023      	strb	r3, [r4, #0]
   141bc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   141c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   141c4:	f8d8 2000 	ldr.w	r2, [r8]
   141c8:	3301      	adds	r3, #1
   141ca:	2101      	movs	r1, #1
   141cc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   141d0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   141d4:	2a00      	cmp	r2, #0
   141d6:	d186      	bne.n	140e6 <d_print_array_type.isra.10+0x56>
   141d8:	e78e      	b.n	140f8 <d_print_array_type.isra.10+0x68>
   141da:	2500      	movs	r5, #0
   141dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   141e0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   141e4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   141e8:	4620      	mov	r0, r4
   141ea:	4798      	blx	r3
   141ec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   141f0:	3301      	adds	r3, #1
   141f2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   141f6:	4629      	mov	r1, r5
   141f8:	2301      	movs	r3, #1
   141fa:	e762      	b.n	140c2 <d_print_array_type.isra.10+0x32>
   141fc:	2500      	movs	r5, #0
   141fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14202:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14206:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1420a:	4620      	mov	r0, r4
   1420c:	4798      	blx	r3
   1420e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   14212:	3301      	adds	r3, #1
   14214:	4629      	mov	r1, r5
   14216:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1421a:	2201      	movs	r2, #1
   1421c:	e76d      	b.n	140fa <d_print_array_type.isra.10+0x6a>
   1421e:	2500      	movs	r5, #0
   14220:	4619      	mov	r1, r3
   14222:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14226:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1422a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1422e:	4620      	mov	r0, r4
   14230:	4798      	blx	r3
   14232:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   14236:	1c5a      	adds	r2, r3, #1
   14238:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1423c:	462b      	mov	r3, r5
   1423e:	2101      	movs	r1, #1
   14240:	e7a0      	b.n	14184 <d_print_array_type.isra.10+0xf4>
   14242:	bf00      	nop
   14244:	0003dd34 	.word	0x0003dd34

00014248 <d_print_function_type.isra.11>:
   14248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1424c:	4604      	mov	r4, r0
   1424e:	b083      	sub	sp, #12
   14250:	460e      	mov	r6, r1
   14252:	4617      	mov	r7, r2
   14254:	461d      	mov	r5, r3
   14256:	b34b      	cbz	r3, 142ac <d_print_function_type.isra.11+0x64>
   14258:	689b      	ldr	r3, [r3, #8]
   1425a:	bb3b      	cbnz	r3, 142ac <d_print_function_type.isra.11+0x64>
   1425c:	462a      	mov	r2, r5
   1425e:	2001      	movs	r0, #1
   14260:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 1442c <d_print_function_type.isra.11+0x1e4>
   14264:	e006      	b.n	14274 <d_print_function_type.isra.11+0x2c>
   14266:	f411 6f60 	tst.w	r1, #3584	; 0xe00
   1426a:	d15a      	bne.n	14322 <d_print_function_type.isra.11+0xda>
   1426c:	6812      	ldr	r2, [r2, #0]
   1426e:	b1ea      	cbz	r2, 142ac <d_print_function_type.isra.11+0x64>
   14270:	6893      	ldr	r3, [r2, #8]
   14272:	b9db      	cbnz	r3, 142ac <d_print_function_type.isra.11+0x64>
   14274:	6853      	ldr	r3, [r2, #4]
   14276:	781b      	ldrb	r3, [r3, #0]
   14278:	3b19      	subs	r3, #25
   1427a:	b2db      	uxtb	r3, r3
   1427c:	2b12      	cmp	r3, #18
   1427e:	fa00 f103 	lsl.w	r1, r0, r3
   14282:	d8f3      	bhi.n	1426c <d_print_function_type.isra.11+0x24>
   14284:	ea11 0f0e 	tst.w	r1, lr
   14288:	d0ed      	beq.n	14266 <d_print_function_type.isra.11+0x1e>
   1428a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1428e:	2b20      	cmp	r3, #32
   14290:	d04d      	beq.n	1432e <d_print_function_type.isra.11+0xe6>
   14292:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   14296:	2bff      	cmp	r3, #255	; 0xff
   14298:	f000 80b4 	beq.w	14404 <d_print_function_type.isra.11+0x1bc>
   1429c:	1c59      	adds	r1, r3, #1
   1429e:	2220      	movs	r2, #32
   142a0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   142a4:	54e2      	strb	r2, [r4, r3]
   142a6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   142aa:	e042      	b.n	14332 <d_print_function_type.isra.11+0xea>
   142ac:	2300      	movs	r3, #0
   142ae:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   142b2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   142b6:	4631      	mov	r1, r6
   142b8:	462a      	mov	r2, r5
   142ba:	4620      	mov	r0, r4
   142bc:	f7ff fdae 	bl	13e1c <d_print_mod_list>
   142c0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   142c4:	29ff      	cmp	r1, #255	; 0xff
   142c6:	d056      	beq.n	14376 <d_print_function_type.isra.11+0x12e>
   142c8:	1c4b      	adds	r3, r1, #1
   142ca:	2228      	movs	r2, #40	; 0x28
   142cc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   142d0:	5462      	strb	r2, [r4, r1]
   142d2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   142d6:	6838      	ldr	r0, [r7, #0]
   142d8:	b178      	cbz	r0, 142fa <d_print_function_type.isra.11+0xb2>
   142da:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   142de:	9000      	str	r0, [sp, #0]
   142e0:	4602      	mov	r2, r0
   142e2:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   142e6:	4631      	mov	r1, r6
   142e8:	4620      	mov	r0, r4
   142ea:	9301      	str	r3, [sp, #4]
   142ec:	f7fc fd14 	bl	10d18 <d_print_comp_inner>
   142f0:	9a01      	ldr	r2, [sp, #4]
   142f2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   142f6:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   142fa:	2bff      	cmp	r3, #255	; 0xff
   142fc:	d04d      	beq.n	1439a <d_print_function_type.isra.11+0x152>
   142fe:	1c5a      	adds	r2, r3, #1
   14300:	2029      	movs	r0, #41	; 0x29
   14302:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   14306:	4631      	mov	r1, r6
   14308:	54e0      	strb	r0, [r4, r3]
   1430a:	462a      	mov	r2, r5
   1430c:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
   14310:	2301      	movs	r3, #1
   14312:	4620      	mov	r0, r4
   14314:	f7ff fd82 	bl	13e1c <d_print_mod_list>
   14318:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
   1431c:	b003      	add	sp, #12
   1431e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14322:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   14326:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
   1432a:	2a28      	cmp	r2, #40	; 0x28
   1432c:	d1af      	bne.n	1428e <d_print_function_type.isra.11+0x46>
   1432e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   14332:	29ff      	cmp	r1, #255	; 0xff
   14334:	d054      	beq.n	143e0 <d_print_function_type.isra.11+0x198>
   14336:	1c4a      	adds	r2, r1, #1
   14338:	2328      	movs	r3, #40	; 0x28
   1433a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1433e:	5463      	strb	r3, [r4, r1]
   14340:	f04f 0900 	mov.w	r9, #0
   14344:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   14348:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   1434c:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   14350:	464b      	mov	r3, r9
   14352:	462a      	mov	r2, r5
   14354:	4631      	mov	r1, r6
   14356:	4620      	mov	r0, r4
   14358:	f7ff fd60 	bl	13e1c <d_print_mod_list>
   1435c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   14360:	2bff      	cmp	r3, #255	; 0xff
   14362:	d02c      	beq.n	143be <d_print_function_type.isra.11+0x176>
   14364:	1c59      	adds	r1, r3, #1
   14366:	2229      	movs	r2, #41	; 0x29
   14368:	29ff      	cmp	r1, #255	; 0xff
   1436a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1436e:	54e2      	strb	r2, [r4, r3]
   14370:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   14374:	d1a8      	bne.n	142c8 <d_print_function_type.isra.11+0x80>
   14376:	f04f 0900 	mov.w	r9, #0
   1437a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1437e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   14382:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14386:	4620      	mov	r0, r4
   14388:	4798      	blx	r3
   1438a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1438e:	3301      	adds	r3, #1
   14390:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14394:	4649      	mov	r1, r9
   14396:	2301      	movs	r3, #1
   14398:	e797      	b.n	142ca <d_print_function_type.isra.11+0x82>
   1439a:	2700      	movs	r7, #0
   1439c:	4619      	mov	r1, r3
   1439e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   143a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   143a6:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   143aa:	4620      	mov	r0, r4
   143ac:	4798      	blx	r3
   143ae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   143b2:	1c5a      	adds	r2, r3, #1
   143b4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   143b8:	463b      	mov	r3, r7
   143ba:	2201      	movs	r2, #1
   143bc:	e7a0      	b.n	14300 <d_print_function_type.isra.11+0xb8>
   143be:	4619      	mov	r1, r3
   143c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   143c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   143c8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   143cc:	4620      	mov	r0, r4
   143ce:	4798      	blx	r3
   143d0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   143d4:	1c5a      	adds	r2, r3, #1
   143d6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   143da:	464b      	mov	r3, r9
   143dc:	2101      	movs	r1, #1
   143de:	e7c2      	b.n	14366 <d_print_function_type.isra.11+0x11e>
   143e0:	f04f 0800 	mov.w	r8, #0
   143e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   143e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   143ec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   143f0:	4620      	mov	r0, r4
   143f2:	4798      	blx	r3
   143f4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   143f8:	3301      	adds	r3, #1
   143fa:	4641      	mov	r1, r8
   143fc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14400:	2201      	movs	r2, #1
   14402:	e799      	b.n	14338 <d_print_function_type.isra.11+0xf0>
   14404:	f04f 0800 	mov.w	r8, #0
   14408:	4619      	mov	r1, r3
   1440a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1440e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14412:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14416:	4620      	mov	r0, r4
   14418:	4798      	blx	r3
   1441a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1441e:	1c5a      	adds	r2, r3, #1
   14420:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   14424:	4643      	mov	r3, r8
   14426:	2101      	movs	r1, #1
   14428:	e739      	b.n	1429e <d_print_function_type.isra.11+0x56>
   1442a:	bf00      	nop
   1442c:	00043107 	.word	0x00043107

00014430 <d_print_expr_op>:
   14430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14434:	7815      	ldrb	r5, [r2, #0]
   14436:	2d31      	cmp	r5, #49	; 0x31
   14438:	b082      	sub	sp, #8
   1443a:	4613      	mov	r3, r2
   1443c:	4604      	mov	r4, r0
   1443e:	d00d      	beq.n	1445c <d_print_expr_op+0x2c>
   14440:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
   14444:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   14448:	e88d 0028 	stmia.w	sp, {r3, r5}
   1444c:	f7fc fc64 	bl	10d18 <d_print_comp_inner>
   14450:	9b01      	ldr	r3, [sp, #4]
   14452:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   14456:	b002      	add	sp, #8
   14458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1445c:	6853      	ldr	r3, [r2, #4]
   1445e:	689f      	ldr	r7, [r3, #8]
   14460:	685d      	ldr	r5, [r3, #4]
   14462:	2f00      	cmp	r7, #0
   14464:	d0f7      	beq.n	14456 <d_print_expr_op+0x26>
   14466:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1446a:	442f      	add	r7, r5
   1446c:	f04f 0800 	mov.w	r8, #0
   14470:	e008      	b.n	14484 <d_print_expr_op+0x54>
   14472:	460b      	mov	r3, r1
   14474:	3101      	adds	r1, #1
   14476:	42bd      	cmp	r5, r7
   14478:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1447c:	54e6      	strb	r6, [r4, r3]
   1447e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14482:	d0e8      	beq.n	14456 <d_print_expr_op+0x26>
   14484:	29ff      	cmp	r1, #255	; 0xff
   14486:	f815 6b01 	ldrb.w	r6, [r5], #1
   1448a:	d1f2      	bne.n	14472 <d_print_expr_op+0x42>
   1448c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14490:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14494:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14498:	4620      	mov	r0, r4
   1449a:	4798      	blx	r3
   1449c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   144a0:	3301      	adds	r3, #1
   144a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   144a6:	2101      	movs	r1, #1
   144a8:	2300      	movs	r3, #0
   144aa:	e7e4      	b.n	14476 <d_print_expr_op+0x46>

000144ac <d_print_subexpr>:
   144ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   144ae:	7813      	ldrb	r3, [r2, #0]
   144b0:	2b01      	cmp	r3, #1
   144b2:	b083      	sub	sp, #12
   144b4:	4615      	mov	r5, r2
   144b6:	460e      	mov	r6, r1
   144b8:	4604      	mov	r4, r0
   144ba:	d929      	bls.n	14510 <d_print_subexpr+0x64>
   144bc:	2b30      	cmp	r3, #48	; 0x30
   144be:	d027      	beq.n	14510 <d_print_subexpr+0x64>
   144c0:	2b06      	cmp	r3, #6
   144c2:	d025      	beq.n	14510 <d_print_subexpr+0x64>
   144c4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   144c8:	29ff      	cmp	r1, #255	; 0xff
   144ca:	d031      	beq.n	14530 <d_print_subexpr+0x84>
   144cc:	1c4a      	adds	r2, r1, #1
   144ce:	2328      	movs	r3, #40	; 0x28
   144d0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   144d4:	5463      	strb	r3, [r4, r1]
   144d6:	462a      	mov	r2, r5
   144d8:	4631      	mov	r1, r6
   144da:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   144de:	4620      	mov	r0, r4
   144e0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   144e4:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   144e8:	9301      	str	r3, [sp, #4]
   144ea:	9500      	str	r5, [sp, #0]
   144ec:	f7fc fc14 	bl	10d18 <d_print_comp_inner>
   144f0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   144f4:	9b01      	ldr	r3, [sp, #4]
   144f6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   144fa:	29ff      	cmp	r1, #255	; 0xff
   144fc:	d028      	beq.n	14550 <d_print_subexpr+0xa4>
   144fe:	1c4a      	adds	r2, r1, #1
   14500:	2329      	movs	r3, #41	; 0x29
   14502:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   14506:	5463      	strb	r3, [r4, r1]
   14508:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1450c:	b003      	add	sp, #12
   1450e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14510:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   14514:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   14518:	4631      	mov	r1, r6
   1451a:	462a      	mov	r2, r5
   1451c:	4620      	mov	r0, r4
   1451e:	9301      	str	r3, [sp, #4]
   14520:	9500      	str	r5, [sp, #0]
   14522:	f7fc fbf9 	bl	10d18 <d_print_comp_inner>
   14526:	9b01      	ldr	r3, [sp, #4]
   14528:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1452c:	b003      	add	sp, #12
   1452e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14530:	2700      	movs	r7, #0
   14532:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14536:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1453a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1453e:	4798      	blx	r3
   14540:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   14544:	3301      	adds	r3, #1
   14546:	4639      	mov	r1, r7
   14548:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1454c:	2201      	movs	r2, #1
   1454e:	e7be      	b.n	144ce <d_print_subexpr+0x22>
   14550:	2500      	movs	r5, #0
   14552:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14556:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1455a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1455e:	4620      	mov	r0, r4
   14560:	4798      	blx	r3
   14562:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   14566:	3301      	adds	r3, #1
   14568:	4629      	mov	r1, r5
   1456a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1456e:	2201      	movs	r2, #1
   14570:	e7c6      	b.n	14500 <d_print_subexpr+0x54>
   14572:	bf00      	nop

00014574 <d_maybe_print_fold_expression.isra.15>:
   14574:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14578:	6852      	ldr	r2, [r2, #4]
   1457a:	6812      	ldr	r2, [r2, #0]
   1457c:	7815      	ldrb	r5, [r2, #0]
   1457e:	2d66      	cmp	r5, #102	; 0x66
   14580:	d002      	beq.n	14588 <d_maybe_print_fold_expression.isra.15+0x14>
   14582:	2000      	movs	r0, #0
   14584:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14588:	681b      	ldr	r3, [r3, #0]
   1458a:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
   1458e:	f8d3 9008 	ldr.w	r9, [r3, #8]
   14592:	f8d3 8004 	ldr.w	r8, [r3, #4]
   14596:	f899 3000 	ldrb.w	r3, [r9]
   1459a:	2b3b      	cmp	r3, #59	; 0x3b
   1459c:	f04f 33ff 	mov.w	r3, #4294967295
   145a0:	bf04      	itt	eq
   145a2:	f8d9 5008 	ldreq.w	r5, [r9, #8]
   145a6:	f8d9 9004 	ldreq.w	r9, [r9, #4]
   145aa:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   145ae:	7853      	ldrb	r3, [r2, #1]
   145b0:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
   145b4:	bf18      	it	ne
   145b6:	2500      	movne	r5, #0
   145b8:	460e      	mov	r6, r1
   145ba:	4604      	mov	r4, r0
   145bc:	2b26      	cmp	r3, #38	; 0x26
   145be:	d82b      	bhi.n	14618 <d_maybe_print_fold_expression.isra.15+0xa4>
   145c0:	e8df f003 	tbb	[pc, r3]
   145c4:	2a2a2a90 	.word	0x2a2a2a90
   145c8:	2a902a2a 	.word	0x2a902a2a
   145cc:	2a2a2a2a 	.word	0x2a2a2a2a
   145d0:	2a2a2a2a 	.word	0x2a2a2a2a
   145d4:	2a2a2a2a 	.word	0x2a2a2a2a
   145d8:	2a2a2a2a 	.word	0x2a2a2a2a
   145dc:	2a2a2a2a 	.word	0x2a2a2a2a
   145e0:	2a2a2a2a 	.word	0x2a2a2a2a
   145e4:	2a2a2a6a 	.word	0x2a2a2a6a
   145e8:	2a2a      	.short	0x2a2a
   145ea:	2f          	.byte	0x2f
   145eb:	00          	.byte	0x00
   145ec:	4642      	mov	r2, r8
   145ee:	4631      	mov	r1, r6
   145f0:	4620      	mov	r0, r4
   145f2:	f7ff ff1d 	bl	14430 <d_print_expr_op>
   145f6:	464a      	mov	r2, r9
   145f8:	4631      	mov	r1, r6
   145fa:	4620      	mov	r0, r4
   145fc:	f7ff ff56 	bl	144ac <d_print_subexpr>
   14600:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   14604:	29ff      	cmp	r1, #255	; 0xff
   14606:	f000 80b2 	beq.w	1476e <d_maybe_print_fold_expression.isra.15+0x1fa>
   1460a:	1c4a      	adds	r2, r1, #1
   1460c:	2329      	movs	r3, #41	; 0x29
   1460e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   14612:	5463      	strb	r3, [r4, r1]
   14614:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   14618:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   1461c:	2001      	movs	r0, #1
   1461e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14622:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   14626:	29ff      	cmp	r1, #255	; 0xff
   14628:	f000 80c5 	beq.w	147b6 <d_maybe_print_fold_expression.isra.15+0x242>
   1462c:	1c4a      	adds	r2, r1, #1
   1462e:	2328      	movs	r3, #40	; 0x28
   14630:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   14634:	4620      	mov	r0, r4
   14636:	5463      	strb	r3, [r4, r1]
   14638:	464a      	mov	r2, r9
   1463a:	4631      	mov	r1, r6
   1463c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   14640:	4d65      	ldr	r5, [pc, #404]	; (147d8 <d_maybe_print_fold_expression.isra.15+0x264>)
   14642:	f7ff ff33 	bl	144ac <d_print_subexpr>
   14646:	4642      	mov	r2, r8
   14648:	4631      	mov	r1, r6
   1464a:	4620      	mov	r0, r4
   1464c:	f7ff fef0 	bl	14430 <d_print_expr_op>
   14650:	f105 0904 	add.w	r9, r5, #4
   14654:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   14658:	f04f 0800 	mov.w	r8, #0
   1465c:	e008      	b.n	14670 <d_maybe_print_fold_expression.isra.15+0xfc>
   1465e:	460b      	mov	r3, r1
   14660:	3101      	adds	r1, #1
   14662:	45a9      	cmp	r9, r5
   14664:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14668:	54e6      	strb	r6, [r4, r3]
   1466a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1466e:	d0d3      	beq.n	14618 <d_maybe_print_fold_expression.isra.15+0xa4>
   14670:	29ff      	cmp	r1, #255	; 0xff
   14672:	f815 6b01 	ldrb.w	r6, [r5], #1
   14676:	d1f2      	bne.n	1465e <d_maybe_print_fold_expression.isra.15+0xea>
   14678:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1467c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14680:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14684:	4620      	mov	r0, r4
   14686:	4798      	blx	r3
   14688:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1468c:	3301      	adds	r3, #1
   1468e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14692:	2101      	movs	r1, #1
   14694:	2300      	movs	r3, #0
   14696:	e7e4      	b.n	14662 <d_maybe_print_fold_expression.isra.15+0xee>
   14698:	4d50      	ldr	r5, [pc, #320]	; (147dc <d_maybe_print_fold_expression.isra.15+0x268>)
   1469a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1469e:	f105 0b04 	add.w	fp, r5, #4
   146a2:	e009      	b.n	146b8 <d_maybe_print_fold_expression.isra.15+0x144>
   146a4:	460b      	mov	r3, r1
   146a6:	3101      	adds	r1, #1
   146a8:	455d      	cmp	r5, fp
   146aa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   146ae:	f804 a003 	strb.w	sl, [r4, r3]
   146b2:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   146b6:	d099      	beq.n	145ec <d_maybe_print_fold_expression.isra.15+0x78>
   146b8:	29ff      	cmp	r1, #255	; 0xff
   146ba:	f815 ab01 	ldrb.w	sl, [r5], #1
   146be:	d1f1      	bne.n	146a4 <d_maybe_print_fold_expression.isra.15+0x130>
   146c0:	f04f 0300 	mov.w	r3, #0
   146c4:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   146c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   146cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   146d0:	4620      	mov	r0, r4
   146d2:	4798      	blx	r3
   146d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   146d8:	3301      	adds	r3, #1
   146da:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   146de:	2101      	movs	r1, #1
   146e0:	2300      	movs	r3, #0
   146e2:	e7e1      	b.n	146a8 <d_maybe_print_fold_expression.isra.15+0x134>
   146e4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   146e8:	2bff      	cmp	r3, #255	; 0xff
   146ea:	d051      	beq.n	14790 <d_maybe_print_fold_expression.isra.15+0x21c>
   146ec:	1c59      	adds	r1, r3, #1
   146ee:	f04f 0e28 	mov.w	lr, #40	; 0x28
   146f2:	464a      	mov	r2, r9
   146f4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   146f8:	4620      	mov	r0, r4
   146fa:	f804 e003 	strb.w	lr, [r4, r3]
   146fe:	4631      	mov	r1, r6
   14700:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
   14704:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 147e0 <d_maybe_print_fold_expression.isra.15+0x26c>
   14708:	f7ff fed0 	bl	144ac <d_print_subexpr>
   1470c:	4631      	mov	r1, r6
   1470e:	4642      	mov	r2, r8
   14710:	4620      	mov	r0, r4
   14712:	f7ff fe8d 	bl	14430 <d_print_expr_op>
   14716:	f109 0b03 	add.w	fp, r9, #3
   1471a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1471e:	e009      	b.n	14734 <d_maybe_print_fold_expression.isra.15+0x1c0>
   14720:	460b      	mov	r3, r1
   14722:	3101      	adds	r1, #1
   14724:	45cb      	cmp	fp, r9
   14726:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1472a:	f804 a003 	strb.w	sl, [r4, r3]
   1472e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   14732:	d015      	beq.n	14760 <d_maybe_print_fold_expression.isra.15+0x1ec>
   14734:	29ff      	cmp	r1, #255	; 0xff
   14736:	f819 ab01 	ldrb.w	sl, [r9], #1
   1473a:	d1f1      	bne.n	14720 <d_maybe_print_fold_expression.isra.15+0x1ac>
   1473c:	f04f 0300 	mov.w	r3, #0
   14740:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   14744:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14748:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1474c:	4620      	mov	r0, r4
   1474e:	4798      	blx	r3
   14750:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   14754:	3301      	adds	r3, #1
   14756:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1475a:	2101      	movs	r1, #1
   1475c:	2300      	movs	r3, #0
   1475e:	e7e1      	b.n	14724 <d_maybe_print_fold_expression.isra.15+0x1b0>
   14760:	4642      	mov	r2, r8
   14762:	4631      	mov	r1, r6
   14764:	4620      	mov	r0, r4
   14766:	f7ff fe63 	bl	14430 <d_print_expr_op>
   1476a:	462a      	mov	r2, r5
   1476c:	e744      	b.n	145f8 <d_maybe_print_fold_expression.isra.15+0x84>
   1476e:	2500      	movs	r5, #0
   14770:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14774:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14778:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1477c:	4620      	mov	r0, r4
   1477e:	4798      	blx	r3
   14780:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   14784:	3301      	adds	r3, #1
   14786:	4629      	mov	r1, r5
   14788:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1478c:	2201      	movs	r2, #1
   1478e:	e73d      	b.n	1460c <d_maybe_print_fold_expression.isra.15+0x98>
   14790:	f04f 0a00 	mov.w	sl, #0
   14794:	4619      	mov	r1, r3
   14796:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1479a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1479e:	f880 a0ff 	strb.w	sl, [r0, #255]	; 0xff
   147a2:	4798      	blx	r3
   147a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   147a8:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
   147ac:	1c5a      	adds	r2, r3, #1
   147ae:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   147b2:	4653      	mov	r3, sl
   147b4:	e79a      	b.n	146ec <d_maybe_print_fold_expression.isra.15+0x178>
   147b6:	2500      	movs	r5, #0
   147b8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   147bc:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   147c0:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   147c4:	4798      	blx	r3
   147c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   147ca:	3301      	adds	r3, #1
   147cc:	4629      	mov	r1, r5
   147ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   147d2:	2201      	movs	r2, #1
   147d4:	e72b      	b.n	1462e <d_maybe_print_fold_expression.isra.15+0xba>
   147d6:	bf00      	nop
   147d8:	0003de24 	.word	0x0003de24
   147dc:	0003de1c 	.word	0x0003de1c
   147e0:	0003dd38 	.word	0x0003dd38

000147e4 <d_demangle_callback.constprop.17>:
   147e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147e8:	b0e7      	sub	sp, #412	; 0x19c
   147ea:	f890 9000 	ldrb.w	r9, [r0]
   147ee:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   147f2:	af00      	add	r7, sp, #0
   147f4:	4605      	mov	r5, r0
   147f6:	4688      	mov	r8, r1
   147f8:	4616      	mov	r6, r2
   147fa:	f000 80f1 	beq.w	149e0 <d_demangle_callback.constprop.17+0x1fc>
   147fe:	2208      	movs	r2, #8
   14800:	49bd      	ldr	r1, [pc, #756]	; (14af8 <d_demangle_callback.constprop.17+0x314>)
   14802:	4628      	mov	r0, r5
   14804:	f004 fc8a 	bl	1911c <strncmp>
   14808:	b948      	cbnz	r0, 1481e <d_demangle_callback.constprop.17+0x3a>
   1480a:	7a2b      	ldrb	r3, [r5, #8]
   1480c:	2b2e      	cmp	r3, #46	; 0x2e
   1480e:	f000 80d6 	beq.w	149be <d_demangle_callback.constprop.17+0x1da>
   14812:	2b5f      	cmp	r3, #95	; 0x5f
   14814:	f000 80d3 	beq.w	149be <d_demangle_callback.constprop.17+0x1da>
   14818:	2b24      	cmp	r3, #36	; 0x24
   1481a:	f000 80d0 	beq.w	149be <d_demangle_callback.constprop.17+0x1da>
   1481e:	f04f 0a00 	mov.w	sl, #0
   14822:	4628      	mov	r0, r5
   14824:	f004 fc0c 	bl	19040 <strlen>
   14828:	ea4f 0b40 	mov.w	fp, r0, lsl #1
   1482c:	0083      	lsls	r3, r0, #2
   1482e:	eb03 020b 	add.w	r2, r3, fp
   14832:	0092      	lsls	r2, r2, #2
   14834:	3208      	adds	r2, #8
   14836:	330a      	adds	r3, #10
   14838:	ebad 0d02 	sub.w	sp, sp, r2
   1483c:	f023 0307 	bic.w	r3, r3, #7
   14840:	2400      	movs	r4, #0
   14842:	466a      	mov	r2, sp
   14844:	1829      	adds	r1, r5, r0
   14846:	ebad 0d03 	sub.w	sp, sp, r3
   1484a:	f1ba 0f01 	cmp.w	sl, #1
   1484e:	f04f 0311 	mov.w	r3, #17
   14852:	627a      	str	r2, [r7, #36]	; 0x24
   14854:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
   14858:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
   1485c:	617d      	str	r5, [r7, #20]
   1485e:	623d      	str	r5, [r7, #32]
   14860:	63b8      	str	r0, [r7, #56]	; 0x38
   14862:	61b9      	str	r1, [r7, #24]
   14864:	61fb      	str	r3, [r7, #28]
   14866:	62bc      	str	r4, [r7, #40]	; 0x28
   14868:	637c      	str	r4, [r7, #52]	; 0x34
   1486a:	63fc      	str	r4, [r7, #60]	; 0x3c
   1486c:	643c      	str	r4, [r7, #64]	; 0x40
   1486e:	647c      	str	r4, [r7, #68]	; 0x44
   14870:	64bc      	str	r4, [r7, #72]	; 0x48
   14872:	64fc      	str	r4, [r7, #76]	; 0x4c
   14874:	f000 80bb 	beq.w	149ee <d_demangle_callback.constprop.17+0x20a>
   14878:	f0c0 80cf 	bcc.w	14a1a <d_demangle_callback.constprop.17+0x236>
   1487c:	7aeb      	ldrb	r3, [r5, #11]
   1487e:	f1ba 0f02 	cmp.w	sl, #2
   14882:	bf18      	it	ne
   14884:	f04f 0944 	movne.w	r9, #68	; 0x44
   14888:	f105 0a0b 	add.w	sl, r5, #11
   1488c:	bf08      	it	eq
   1488e:	f04f 0943 	moveq.w	r9, #67	; 0x43
   14892:	2b5f      	cmp	r3, #95	; 0x5f
   14894:	f8c7 a020 	str.w	sl, [r7, #32]
   14898:	f000 80b2 	beq.w	14a00 <d_demangle_callback.constprop.17+0x21c>
   1489c:	4650      	mov	r0, sl
   1489e:	607a      	str	r2, [r7, #4]
   148a0:	f004 fbce 	bl	19040 <strlen>
   148a4:	f1bb 0f00 	cmp.w	fp, #0
   148a8:	687a      	ldr	r2, [r7, #4]
   148aa:	f340 80bf 	ble.w	14a2c <d_demangle_callback.constprop.17+0x248>
   148ae:	2301      	movs	r3, #1
   148b0:	62bb      	str	r3, [r7, #40]	; 0x28
   148b2:	2800      	cmp	r0, #0
   148b4:	f000 80ba 	beq.w	14a2c <d_demangle_callback.constprop.17+0x248>
   148b8:	2300      	movs	r3, #0
   148ba:	f8c2 a004 	str.w	sl, [r2, #4]
   148be:	6090      	str	r0, [r2, #8]
   148c0:	7013      	strb	r3, [r2, #0]
   148c2:	4649      	mov	r1, r9
   148c4:	2300      	movs	r3, #0
   148c6:	f107 0014 	add.w	r0, r7, #20
   148ca:	f7f9 fe33 	bl	e534 <d_make_comp>
   148ce:	6a3c      	ldr	r4, [r7, #32]
   148d0:	4605      	mov	r5, r0
   148d2:	4620      	mov	r0, r4
   148d4:	f004 fbb4 	bl	19040 <strlen>
   148d8:	1823      	adds	r3, r4, r0
   148da:	623b      	str	r3, [r7, #32]
   148dc:	f814 9000 	ldrb.w	r9, [r4, r0]
   148e0:	f1b9 0f00 	cmp.w	r9, #0
   148e4:	f040 8086 	bne.w	149f4 <d_demangle_callback.constprop.17+0x210>
   148e8:	2d00      	cmp	r5, #0
   148ea:	f000 8083 	beq.w	149f4 <d_demangle_callback.constprop.17+0x210>
   148ee:	f107 0450 	add.w	r4, r7, #80	; 0x50
   148f2:	462a      	mov	r2, r5
   148f4:	f507 71c2 	add.w	r1, r7, #388	; 0x184
   148f8:	f507 70c8 	add.w	r0, r7, #400	; 0x190
   148fc:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   14900:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
   14904:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
   14908:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   1490c:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
   14910:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   14914:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
   14918:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
   1491c:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
   14920:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
   14924:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   14928:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   1492c:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
   14930:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
   14934:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
   14938:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
   1493c:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   14940:	f7f9 fec4 	bl	e6cc <d_count_templates_scopes>
   14944:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
   14948:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   1494c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   14950:	613b      	str	r3, [r7, #16]
   14952:	00d0      	lsls	r0, r2, #3
   14954:	fb01 f102 	mul.w	r1, r1, r2
   14958:	3008      	adds	r0, #8
   1495a:	46e8      	mov	r8, sp
   1495c:	00ca      	lsls	r2, r1, #3
   1495e:	ebad 0d00 	sub.w	sp, sp, r0
   14962:	4668      	mov	r0, sp
   14964:	3208      	adds	r2, #8
   14966:	ebad 0d02 	sub.w	sp, sp, r2
   1496a:	f107 060c 	add.w	r6, r7, #12
   1496e:	462a      	mov	r2, r5
   14970:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
   14974:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
   14978:	4620      	mov	r0, r4
   1497a:	2111      	movs	r1, #17
   1497c:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
   14980:	60fd      	str	r5, [r7, #12]
   14982:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
   14986:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
   1498a:	f7fc f9c5 	bl	10d18 <d_print_comp_inner>
   1498e:	693b      	ldr	r3, [r7, #16]
   14990:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   14994:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   14998:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1499c:	f804 9001 	strb.w	r9, [r4, r1]
   149a0:	4620      	mov	r0, r4
   149a2:	46c5      	mov	sp, r8
   149a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   149a8:	4798      	blx	r3
   149aa:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   149ae:	fab0 f080 	clz	r0, r0
   149b2:	0940      	lsrs	r0, r0, #5
   149b4:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   149b8:	46bd      	mov	sp, r7
   149ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149be:	7a6b      	ldrb	r3, [r5, #9]
   149c0:	2b44      	cmp	r3, #68	; 0x44
   149c2:	d002      	beq.n	149ca <d_demangle_callback.constprop.17+0x1e6>
   149c4:	2b49      	cmp	r3, #73	; 0x49
   149c6:	f47f af2a 	bne.w	1481e <d_demangle_callback.constprop.17+0x3a>
   149ca:	7aaa      	ldrb	r2, [r5, #10]
   149cc:	2a5f      	cmp	r2, #95	; 0x5f
   149ce:	f47f af26 	bne.w	1481e <d_demangle_callback.constprop.17+0x3a>
   149d2:	2b49      	cmp	r3, #73	; 0x49
   149d4:	bf14      	ite	ne
   149d6:	f04f 0a03 	movne.w	sl, #3
   149da:	f04f 0a02 	moveq.w	sl, #2
   149de:	e720      	b.n	14822 <d_demangle_callback.constprop.17+0x3e>
   149e0:	7843      	ldrb	r3, [r0, #1]
   149e2:	2b5a      	cmp	r3, #90	; 0x5a
   149e4:	f47f af0b 	bne.w	147fe <d_demangle_callback.constprop.17+0x1a>
   149e8:	f04f 0a01 	mov.w	sl, #1
   149ec:	e719      	b.n	14822 <d_demangle_callback.constprop.17+0x3e>
   149ee:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   149f2:	d01d      	beq.n	14a30 <d_demangle_callback.constprop.17+0x24c>
   149f4:	2000      	movs	r0, #0
   149f6:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   149fa:	46bd      	mov	sp, r7
   149fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a00:	7b2b      	ldrb	r3, [r5, #12]
   14a02:	2b5a      	cmp	r3, #90	; 0x5a
   14a04:	f47f af4a 	bne.w	1489c <d_demangle_callback.constprop.17+0xb8>
   14a08:	350d      	adds	r5, #13
   14a0a:	4621      	mov	r1, r4
   14a0c:	f107 0014 	add.w	r0, r7, #20
   14a10:	623d      	str	r5, [r7, #32]
   14a12:	f7fb fe35 	bl	10680 <d_encoding>
   14a16:	4602      	mov	r2, r0
   14a18:	e753      	b.n	148c2 <d_demangle_callback.constprop.17+0xde>
   14a1a:	f107 0014 	add.w	r0, r7, #20
   14a1e:	f7fb f817 	bl	fa50 <d_type>
   14a22:	6a3b      	ldr	r3, [r7, #32]
   14a24:	4605      	mov	r5, r0
   14a26:	f893 9000 	ldrb.w	r9, [r3]
   14a2a:	e759      	b.n	148e0 <d_demangle_callback.constprop.17+0xfc>
   14a2c:	2200      	movs	r2, #0
   14a2e:	e748      	b.n	148c2 <d_demangle_callback.constprop.17+0xde>
   14a30:	786b      	ldrb	r3, [r5, #1]
   14a32:	2b5a      	cmp	r3, #90	; 0x5a
   14a34:	d1de      	bne.n	149f4 <d_demangle_callback.constprop.17+0x210>
   14a36:	3502      	adds	r5, #2
   14a38:	4651      	mov	r1, sl
   14a3a:	f107 0014 	add.w	r0, r7, #20
   14a3e:	623d      	str	r5, [r7, #32]
   14a40:	f7fb fe1e 	bl	10680 <d_encoding>
   14a44:	69fb      	ldr	r3, [r7, #28]
   14a46:	07db      	lsls	r3, r3, #31
   14a48:	4605      	mov	r5, r0
   14a4a:	d551      	bpl.n	14af0 <d_demangle_callback.constprop.17+0x30c>
   14a4c:	6a38      	ldr	r0, [r7, #32]
   14a4e:	f890 9000 	ldrb.w	r9, [r0]
   14a52:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
   14a56:	f47f af43 	bne.w	148e0 <d_demangle_callback.constprop.17+0xfc>
   14a5a:	7843      	ldrb	r3, [r0, #1]
   14a5c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   14a60:	2a19      	cmp	r2, #25
   14a62:	d939      	bls.n	14ad8 <d_demangle_callback.constprop.17+0x2f4>
   14a64:	2b5f      	cmp	r3, #95	; 0x5f
   14a66:	d037      	beq.n	14ad8 <d_demangle_callback.constprop.17+0x2f4>
   14a68:	3b30      	subs	r3, #48	; 0x30
   14a6a:	2b09      	cmp	r3, #9
   14a6c:	d840      	bhi.n	14af0 <d_demangle_callback.constprop.17+0x30c>
   14a6e:	7803      	ldrb	r3, [r0, #0]
   14a70:	4602      	mov	r2, r0
   14a72:	2b2e      	cmp	r3, #46	; 0x2e
   14a74:	d112      	bne.n	14a9c <d_demangle_callback.constprop.17+0x2b8>
   14a76:	7853      	ldrb	r3, [r2, #1]
   14a78:	3b30      	subs	r3, #48	; 0x30
   14a7a:	2b09      	cmp	r3, #9
   14a7c:	d80e      	bhi.n	14a9c <d_demangle_callback.constprop.17+0x2b8>
   14a7e:	7893      	ldrb	r3, [r2, #2]
   14a80:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   14a84:	2909      	cmp	r1, #9
   14a86:	f102 0202 	add.w	r2, r2, #2
   14a8a:	d8f2      	bhi.n	14a72 <d_demangle_callback.constprop.17+0x28e>
   14a8c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   14a90:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   14a94:	2909      	cmp	r1, #9
   14a96:	d9f9      	bls.n	14a8c <d_demangle_callback.constprop.17+0x2a8>
   14a98:	2b2e      	cmp	r3, #46	; 0x2e
   14a9a:	d0ec      	beq.n	14a76 <d_demangle_callback.constprop.17+0x292>
   14a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14aa0:	623a      	str	r2, [r7, #32]
   14aa2:	4299      	cmp	r1, r3
   14aa4:	da16      	bge.n	14ad4 <d_demangle_callback.constprop.17+0x2f0>
   14aa6:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
   14aaa:	1c4b      	adds	r3, r1, #1
   14aac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   14ab0:	62bb      	str	r3, [r7, #40]	; 0x28
   14ab2:	eb1e 0381 	adds.w	r3, lr, r1, lsl #2
   14ab6:	d00d      	beq.n	14ad4 <d_demangle_callback.constprop.17+0x2f0>
   14ab8:	1a12      	subs	r2, r2, r0
   14aba:	d00b      	beq.n	14ad4 <d_demangle_callback.constprop.17+0x2f0>
   14abc:	f80e 4021 	strb.w	r4, [lr, r1, lsl #2]
   14ac0:	6058      	str	r0, [r3, #4]
   14ac2:	609a      	str	r2, [r3, #8]
   14ac4:	462a      	mov	r2, r5
   14ac6:	214d      	movs	r1, #77	; 0x4d
   14ac8:	f107 0014 	add.w	r0, r7, #20
   14acc:	f7f9 fd32 	bl	e534 <d_make_comp>
   14ad0:	4605      	mov	r5, r0
   14ad2:	e7bb      	b.n	14a4c <d_demangle_callback.constprop.17+0x268>
   14ad4:	2300      	movs	r3, #0
   14ad6:	e7f5      	b.n	14ac4 <d_demangle_callback.constprop.17+0x2e0>
   14ad8:	1c81      	adds	r1, r0, #2
   14ada:	460a      	mov	r2, r1
   14adc:	f811 3b01 	ldrb.w	r3, [r1], #1
   14ae0:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
   14ae4:	f1be 0f19 	cmp.w	lr, #25
   14ae8:	d9f7      	bls.n	14ada <d_demangle_callback.constprop.17+0x2f6>
   14aea:	2b5f      	cmp	r3, #95	; 0x5f
   14aec:	d0f5      	beq.n	14ada <d_demangle_callback.constprop.17+0x2f6>
   14aee:	e7c0      	b.n	14a72 <d_demangle_callback.constprop.17+0x28e>
   14af0:	6a3b      	ldr	r3, [r7, #32]
   14af2:	f893 9000 	ldrb.w	r9, [r3]
   14af6:	e6f3      	b.n	148e0 <d_demangle_callback.constprop.17+0xfc>
   14af8:	0003dad4 	.word	0x0003dad4

00014afc <__cxa_demangle>:
   14afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b00:	b084      	sub	sp, #16
   14b02:	b378      	cbz	r0, 14b64 <__cxa_demangle+0x68>
   14b04:	b101      	cbz	r1, 14b08 <__cxa_demangle+0xc>
   14b06:	b36a      	cbz	r2, 14b64 <__cxa_demangle+0x68>
   14b08:	2400      	movs	r4, #0
   14b0a:	4616      	mov	r6, r2
   14b0c:	460d      	mov	r5, r1
   14b0e:	466a      	mov	r2, sp
   14b10:	4927      	ldr	r1, [pc, #156]	; (14bb0 <__cxa_demangle+0xb4>)
   14b12:	9400      	str	r4, [sp, #0]
   14b14:	461f      	mov	r7, r3
   14b16:	9401      	str	r4, [sp, #4]
   14b18:	9402      	str	r4, [sp, #8]
   14b1a:	9403      	str	r4, [sp, #12]
   14b1c:	f7ff fe62 	bl	147e4 <d_demangle_callback.constprop.17>
   14b20:	2800      	cmp	r0, #0
   14b22:	d03f      	beq.n	14ba4 <__cxa_demangle+0xa8>
   14b24:	9b03      	ldr	r3, [sp, #12]
   14b26:	b1d3      	cbz	r3, 14b5e <__cxa_demangle+0x62>
   14b28:	f04f 0801 	mov.w	r8, #1
   14b2c:	9c00      	ldr	r4, [sp, #0]
   14b2e:	b35c      	cbz	r4, 14b88 <__cxa_demangle+0x8c>
   14b30:	b33d      	cbz	r5, 14b82 <__cxa_demangle+0x86>
   14b32:	4620      	mov	r0, r4
   14b34:	f004 fa84 	bl	19040 <strlen>
   14b38:	6833      	ldr	r3, [r6, #0]
   14b3a:	4298      	cmp	r0, r3
   14b3c:	d21b      	bcs.n	14b76 <__cxa_demangle+0x7a>
   14b3e:	1c42      	adds	r2, r0, #1
   14b40:	4621      	mov	r1, r4
   14b42:	4628      	mov	r0, r5
   14b44:	f003 faec 	bl	18120 <memcpy>
   14b48:	4620      	mov	r0, r4
   14b4a:	f002 ff95 	bl	17a78 <free>
   14b4e:	462c      	mov	r4, r5
   14b50:	b10f      	cbz	r7, 14b56 <__cxa_demangle+0x5a>
   14b52:	2300      	movs	r3, #0
   14b54:	603b      	str	r3, [r7, #0]
   14b56:	4620      	mov	r0, r4
   14b58:	b004      	add	sp, #16
   14b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b5e:	f8dd 8008 	ldr.w	r8, [sp, #8]
   14b62:	e7e3      	b.n	14b2c <__cxa_demangle+0x30>
   14b64:	b113      	cbz	r3, 14b6c <__cxa_demangle+0x70>
   14b66:	f06f 0202 	mvn.w	r2, #2
   14b6a:	601a      	str	r2, [r3, #0]
   14b6c:	2400      	movs	r4, #0
   14b6e:	4620      	mov	r0, r4
   14b70:	b004      	add	sp, #16
   14b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b76:	4628      	mov	r0, r5
   14b78:	f002 ff7e 	bl	17a78 <free>
   14b7c:	f8c6 8000 	str.w	r8, [r6]
   14b80:	e7e6      	b.n	14b50 <__cxa_demangle+0x54>
   14b82:	2e00      	cmp	r6, #0
   14b84:	d1fa      	bne.n	14b7c <__cxa_demangle+0x80>
   14b86:	e7e3      	b.n	14b50 <__cxa_demangle+0x54>
   14b88:	2f00      	cmp	r7, #0
   14b8a:	d0ef      	beq.n	14b6c <__cxa_demangle+0x70>
   14b8c:	f1b8 0f01 	cmp.w	r8, #1
   14b90:	d004      	beq.n	14b9c <__cxa_demangle+0xa0>
   14b92:	f06f 0301 	mvn.w	r3, #1
   14b96:	603b      	str	r3, [r7, #0]
   14b98:	2400      	movs	r4, #0
   14b9a:	e7dc      	b.n	14b56 <__cxa_demangle+0x5a>
   14b9c:	f04f 33ff 	mov.w	r3, #4294967295
   14ba0:	603b      	str	r3, [r7, #0]
   14ba2:	e7d8      	b.n	14b56 <__cxa_demangle+0x5a>
   14ba4:	9800      	ldr	r0, [sp, #0]
   14ba6:	f002 ff67 	bl	17a78 <free>
   14baa:	2f00      	cmp	r7, #0
   14bac:	d1f1      	bne.n	14b92 <__cxa_demangle+0x96>
   14bae:	e7dd      	b.n	14b6c <__cxa_demangle+0x70>
   14bb0:	0000ec55 	.word	0x0000ec55

00014bb4 <__gcclibcxx_demangle_callback>:
   14bb4:	b160      	cbz	r0, 14bd0 <__gcclibcxx_demangle_callback+0x1c>
   14bb6:	b508      	push	{r3, lr}
   14bb8:	b139      	cbz	r1, 14bca <__gcclibcxx_demangle_callback+0x16>
   14bba:	f7ff fe13 	bl	147e4 <d_demangle_callback.constprop.17>
   14bbe:	2800      	cmp	r0, #0
   14bc0:	bf0c      	ite	eq
   14bc2:	f06f 0001 	mvneq.w	r0, #1
   14bc6:	2000      	movne	r0, #0
   14bc8:	bd08      	pop	{r3, pc}
   14bca:	f06f 0002 	mvn.w	r0, #2
   14bce:	bd08      	pop	{r3, pc}
   14bd0:	f06f 0002 	mvn.w	r0, #2
   14bd4:	4770      	bx	lr
   14bd6:	bf00      	nop

00014bd8 <__cxa_current_exception_type>:
   14bd8:	b508      	push	{r3, lr}
   14bda:	f7f8 fe2b 	bl	d834 <__cxa_get_globals>
   14bde:	6800      	ldr	r0, [r0, #0]
   14be0:	b130      	cbz	r0, 14bf0 <__cxa_current_exception_type+0x18>
   14be2:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   14be6:	2b01      	cmp	r3, #1
   14be8:	bf04      	itt	eq
   14bea:	6800      	ldreq	r0, [r0, #0]
   14bec:	3878      	subeq	r0, #120	; 0x78
   14bee:	6800      	ldr	r0, [r0, #0]
   14bf0:	bd08      	pop	{r3, pc}
   14bf2:	bf00      	nop
   14bf4:	0000      	movs	r0, r0
	...

00014bf8 <floor>:
   14bf8:	f3c1 520a 	ubfx	r2, r1, #20, #11
   14bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14c00:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
   14c04:	2e13      	cmp	r6, #19
   14c06:	460b      	mov	r3, r1
   14c08:	460d      	mov	r5, r1
   14c0a:	4604      	mov	r4, r0
   14c0c:	4688      	mov	r8, r1
   14c0e:	4607      	mov	r7, r0
   14c10:	dc1d      	bgt.n	14c4e <floor+0x56>
   14c12:	2e00      	cmp	r6, #0
   14c14:	db40      	blt.n	14c98 <floor+0xa0>
   14c16:	4a3c      	ldr	r2, [pc, #240]	; (14d08 <floor+0x110>)
   14c18:	fa42 f906 	asr.w	r9, r2, r6
   14c1c:	ea01 0209 	and.w	r2, r1, r9
   14c20:	4302      	orrs	r2, r0
   14c22:	4686      	mov	lr, r0
   14c24:	d018      	beq.n	14c58 <floor+0x60>
   14c26:	a336      	add	r3, pc, #216	; (adr r3, 14d00 <floor+0x108>)
   14c28:	e9d3 2300 	ldrd	r2, r3, [r3]
   14c2c:	f000 fa96 	bl	1515c <__adddf3>
   14c30:	2200      	movs	r2, #0
   14c32:	2300      	movs	r3, #0
   14c34:	f000 fed4 	bl	159e0 <__aeabi_dcmpgt>
   14c38:	b120      	cbz	r0, 14c44 <floor+0x4c>
   14c3a:	2d00      	cmp	r5, #0
   14c3c:	db42      	blt.n	14cc4 <floor+0xcc>
   14c3e:	ea28 0509 	bic.w	r5, r8, r9
   14c42:	2700      	movs	r7, #0
   14c44:	463c      	mov	r4, r7
   14c46:	4629      	mov	r1, r5
   14c48:	4620      	mov	r0, r4
   14c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14c4e:	2e33      	cmp	r6, #51	; 0x33
   14c50:	dd06      	ble.n	14c60 <floor+0x68>
   14c52:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   14c56:	d02f      	beq.n	14cb8 <floor+0xc0>
   14c58:	4619      	mov	r1, r3
   14c5a:	4620      	mov	r0, r4
   14c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14c60:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   14c64:	f04f 39ff 	mov.w	r9, #4294967295
   14c68:	fa29 f902 	lsr.w	r9, r9, r2
   14c6c:	ea10 0f09 	tst.w	r0, r9
   14c70:	d0f2      	beq.n	14c58 <floor+0x60>
   14c72:	a323      	add	r3, pc, #140	; (adr r3, 14d00 <floor+0x108>)
   14c74:	e9d3 2300 	ldrd	r2, r3, [r3]
   14c78:	f000 fa70 	bl	1515c <__adddf3>
   14c7c:	2200      	movs	r2, #0
   14c7e:	2300      	movs	r3, #0
   14c80:	f000 feae 	bl	159e0 <__aeabi_dcmpgt>
   14c84:	2800      	cmp	r0, #0
   14c86:	d0dd      	beq.n	14c44 <floor+0x4c>
   14c88:	2d00      	cmp	r5, #0
   14c8a:	db21      	blt.n	14cd0 <floor+0xd8>
   14c8c:	4645      	mov	r5, r8
   14c8e:	ea27 0709 	bic.w	r7, r7, r9
   14c92:	463c      	mov	r4, r7
   14c94:	4629      	mov	r1, r5
   14c96:	e7d7      	b.n	14c48 <floor+0x50>
   14c98:	a319      	add	r3, pc, #100	; (adr r3, 14d00 <floor+0x108>)
   14c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   14c9e:	f000 fa5d 	bl	1515c <__adddf3>
   14ca2:	2200      	movs	r2, #0
   14ca4:	2300      	movs	r3, #0
   14ca6:	f000 fe9b 	bl	159e0 <__aeabi_dcmpgt>
   14caa:	2800      	cmp	r0, #0
   14cac:	d0ca      	beq.n	14c44 <floor+0x4c>
   14cae:	2d00      	cmp	r5, #0
   14cb0:	db19      	blt.n	14ce6 <floor+0xee>
   14cb2:	2700      	movs	r7, #0
   14cb4:	463d      	mov	r5, r7
   14cb6:	e7c5      	b.n	14c44 <floor+0x4c>
   14cb8:	4602      	mov	r2, r0
   14cba:	460b      	mov	r3, r1
   14cbc:	f000 fa4e 	bl	1515c <__adddf3>
   14cc0:	4604      	mov	r4, r0
   14cc2:	e7ca      	b.n	14c5a <floor+0x62>
   14cc4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   14cc8:	fa43 f606 	asr.w	r6, r3, r6
   14ccc:	44b0      	add	r8, r6
   14cce:	e7b6      	b.n	14c3e <floor+0x46>
   14cd0:	2e14      	cmp	r6, #20
   14cd2:	d010      	beq.n	14cf6 <floor+0xfe>
   14cd4:	2301      	movs	r3, #1
   14cd6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
   14cda:	fa03 f606 	lsl.w	r6, r3, r6
   14cde:	1937      	adds	r7, r6, r4
   14ce0:	bf28      	it	cs
   14ce2:	4498      	addcs	r8, r3
   14ce4:	e7d2      	b.n	14c8c <floor+0x94>
   14ce6:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   14cea:	4b08      	ldr	r3, [pc, #32]	; (14d0c <floor+0x114>)
   14cec:	4322      	orrs	r2, r4
   14cee:	bf18      	it	ne
   14cf0:	461d      	movne	r5, r3
   14cf2:	2700      	movs	r7, #0
   14cf4:	e7a6      	b.n	14c44 <floor+0x4c>
   14cf6:	f105 0801 	add.w	r8, r5, #1
   14cfa:	e7c7      	b.n	14c8c <floor+0x94>
   14cfc:	f3af 8000 	nop.w
   14d00:	8800759c 	.word	0x8800759c
   14d04:	7e37e43c 	.word	0x7e37e43c
   14d08:	000fffff 	.word	0x000fffff
   14d0c:	bff00000 	.word	0xbff00000

00014d10 <frexp>:
   14d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d12:	f8df e05c 	ldr.w	lr, [pc, #92]	; 14d70 <frexp+0x60>
   14d16:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   14d1a:	2700      	movs	r7, #0
   14d1c:	4573      	cmp	r3, lr
   14d1e:	4604      	mov	r4, r0
   14d20:	460d      	mov	r5, r1
   14d22:	4616      	mov	r6, r2
   14d24:	6017      	str	r7, [r2, #0]
   14d26:	dc1d      	bgt.n	14d64 <frexp+0x54>
   14d28:	ea50 0e03 	orrs.w	lr, r0, r3
   14d2c:	d01a      	beq.n	14d64 <frexp+0x54>
   14d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   14d32:	460a      	mov	r2, r1
   14d34:	da09      	bge.n	14d4a <frexp+0x3a>
   14d36:	2200      	movs	r2, #0
   14d38:	4b0c      	ldr	r3, [pc, #48]	; (14d6c <frexp+0x5c>)
   14d3a:	f000 fbc1 	bl	154c0 <__aeabi_dmul>
   14d3e:	f06f 0735 	mvn.w	r7, #53	; 0x35
   14d42:	4604      	mov	r4, r0
   14d44:	460a      	mov	r2, r1
   14d46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   14d4a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   14d4e:	151b      	asrs	r3, r3, #20
   14d50:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   14d54:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   14d58:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   14d5c:	443b      	add	r3, r7
   14d5e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   14d62:	6033      	str	r3, [r6, #0]
   14d64:	4620      	mov	r0, r4
   14d66:	4629      	mov	r1, r5
   14d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14d6a:	bf00      	nop
   14d6c:	43500000 	.word	0x43500000
   14d70:	7fefffff 	.word	0x7fefffff

00014d74 <round>:
   14d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d76:	f3c1 560a 	ubfx	r6, r1, #20, #11
   14d7a:	f2a6 35ff 	subw	r5, r6, #1023	; 0x3ff
   14d7e:	2d13      	cmp	r5, #19
   14d80:	460a      	mov	r2, r1
   14d82:	460b      	mov	r3, r1
   14d84:	4604      	mov	r4, r0
   14d86:	dc11      	bgt.n	14dac <round+0x38>
   14d88:	2d00      	cmp	r5, #0
   14d8a:	db2e      	blt.n	14dea <round+0x76>
   14d8c:	468e      	mov	lr, r1
   14d8e:	4920      	ldr	r1, [pc, #128]	; (14e10 <round+0x9c>)
   14d90:	4129      	asrs	r1, r5
   14d92:	420a      	tst	r2, r1
   14d94:	d025      	beq.n	14de2 <round+0x6e>
   14d96:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   14d9a:	412b      	asrs	r3, r5
   14d9c:	4473      	add	r3, lr
   14d9e:	ea23 0301 	bic.w	r3, r3, r1
   14da2:	2600      	movs	r6, #0
   14da4:	4619      	mov	r1, r3
   14da6:	4634      	mov	r4, r6
   14da8:	4620      	mov	r0, r4
   14daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14dac:	2d33      	cmp	r5, #51	; 0x33
   14dae:	dd05      	ble.n	14dbc <round+0x48>
   14db0:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   14db4:	d01f      	beq.n	14df6 <round+0x82>
   14db6:	4611      	mov	r1, r2
   14db8:	4620      	mov	r0, r4
   14dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14dbc:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   14dc0:	f04f 31ff 	mov.w	r1, #4294967295
   14dc4:	fa21 f606 	lsr.w	r6, r1, r6
   14dc8:	4230      	tst	r0, r6
   14dca:	d0f4      	beq.n	14db6 <round+0x42>
   14dcc:	2201      	movs	r2, #1
   14dce:	f1c5 0533 	rsb	r5, r5, #51	; 0x33
   14dd2:	fa02 f505 	lsl.w	r5, r2, r5
   14dd6:	182d      	adds	r5, r5, r0
   14dd8:	bf28      	it	cs
   14dda:	189b      	addcs	r3, r3, r2
   14ddc:	ea25 0606 	bic.w	r6, r5, r6
   14de0:	e7e0      	b.n	14da4 <round+0x30>
   14de2:	2800      	cmp	r0, #0
   14de4:	d1d7      	bne.n	14d96 <round+0x22>
   14de6:	4611      	mov	r1, r2
   14de8:	e7e6      	b.n	14db8 <round+0x44>
   14dea:	3501      	adds	r5, #1
   14dec:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   14df0:	d007      	beq.n	14e02 <round+0x8e>
   14df2:	2600      	movs	r6, #0
   14df4:	e7d6      	b.n	14da4 <round+0x30>
   14df6:	4602      	mov	r2, r0
   14df8:	460b      	mov	r3, r1
   14dfa:	f000 f9af 	bl	1515c <__adddf3>
   14dfe:	4604      	mov	r4, r0
   14e00:	e7d2      	b.n	14da8 <round+0x34>
   14e02:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
   14e06:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   14e0a:	2600      	movs	r6, #0
   14e0c:	e7ca      	b.n	14da4 <round+0x30>
   14e0e:	bf00      	nop
   14e10:	000fffff 	.word	0x000fffff

00014e14 <roundf>:
   14e14:	b508      	push	{r3, lr}
   14e16:	f3c0 53c7 	ubfx	r3, r0, #23, #8
   14e1a:	3b7f      	subs	r3, #127	; 0x7f
   14e1c:	2b16      	cmp	r3, #22
   14e1e:	4601      	mov	r1, r0
   14e20:	dc0e      	bgt.n	14e40 <roundf+0x2c>
   14e22:	2b00      	cmp	r3, #0
   14e24:	4602      	mov	r2, r0
   14e26:	db12      	blt.n	14e4e <roundf+0x3a>
   14e28:	480c      	ldr	r0, [pc, #48]	; (14e5c <roundf+0x48>)
   14e2a:	4118      	asrs	r0, r3
   14e2c:	4201      	tst	r1, r0
   14e2e:	d005      	beq.n	14e3c <roundf+0x28>
   14e30:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   14e34:	4119      	asrs	r1, r3
   14e36:	4411      	add	r1, r2
   14e38:	ea21 0100 	bic.w	r1, r1, r0
   14e3c:	4608      	mov	r0, r1
   14e3e:	bd08      	pop	{r3, pc}
   14e40:	2b80      	cmp	r3, #128	; 0x80
   14e42:	d1fb      	bne.n	14e3c <roundf+0x28>
   14e44:	f000 fe74 	bl	15b30 <__addsf3>
   14e48:	4601      	mov	r1, r0
   14e4a:	4608      	mov	r0, r1
   14e4c:	bd08      	pop	{r3, pc}
   14e4e:	3301      	adds	r3, #1
   14e50:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
   14e54:	d1f2      	bne.n	14e3c <roundf+0x28>
   14e56:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
   14e5a:	e7ef      	b.n	14e3c <roundf+0x28>
   14e5c:	007fffff 	.word	0x007fffff

00014e60 <expf>:
   14e60:	b5f0      	push	{r4, r5, r6, r7, lr}
   14e62:	4e31      	ldr	r6, [pc, #196]	; (14f28 <expf+0xc8>)
   14e64:	b08b      	sub	sp, #44	; 0x2c
   14e66:	4604      	mov	r4, r0
   14e68:	f000 f86a 	bl	14f40 <__ieee754_expf>
   14e6c:	f996 3000 	ldrsb.w	r3, [r6]
   14e70:	3301      	adds	r3, #1
   14e72:	4605      	mov	r5, r0
   14e74:	d034      	beq.n	14ee0 <expf+0x80>
   14e76:	4620      	mov	r0, r4
   14e78:	f000 f962 	bl	15140 <finitef>
   14e7c:	2800      	cmp	r0, #0
   14e7e:	d02f      	beq.n	14ee0 <expf+0x80>
   14e80:	492a      	ldr	r1, [pc, #168]	; (14f2c <expf+0xcc>)
   14e82:	4620      	mov	r0, r4
   14e84:	f001 f918 	bl	160b8 <__aeabi_fcmpgt>
   14e88:	4607      	mov	r7, r0
   14e8a:	2800      	cmp	r0, #0
   14e8c:	d12b      	bne.n	14ee6 <expf+0x86>
   14e8e:	4928      	ldr	r1, [pc, #160]	; (14f30 <expf+0xd0>)
   14e90:	4620      	mov	r0, r4
   14e92:	f001 f8f3 	bl	1607c <__aeabi_fcmplt>
   14e96:	b318      	cbz	r0, 14ee0 <expf+0x80>
   14e98:	4b26      	ldr	r3, [pc, #152]	; (14f34 <expf+0xd4>)
   14e9a:	9708      	str	r7, [sp, #32]
   14e9c:	4620      	mov	r0, r4
   14e9e:	2204      	movs	r2, #4
   14ea0:	e88d 000c 	stmia.w	sp, {r2, r3}
   14ea4:	f000 fab8 	bl	15418 <__aeabi_f2d>
   14ea8:	f996 3000 	ldrsb.w	r3, [r6]
   14eac:	2400      	movs	r4, #0
   14eae:	2500      	movs	r5, #0
   14eb0:	2b02      	cmp	r3, #2
   14eb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   14eb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   14eba:	e9cd 4506 	strd	r4, r5, [sp, #24]
   14ebe:	d02e      	beq.n	14f1e <expf+0xbe>
   14ec0:	4668      	mov	r0, sp
   14ec2:	f000 f93b 	bl	1513c <matherr>
   14ec6:	2800      	cmp	r0, #0
   14ec8:	d029      	beq.n	14f1e <expf+0xbe>
   14eca:	9b08      	ldr	r3, [sp, #32]
   14ecc:	b11b      	cbz	r3, 14ed6 <expf+0x76>
   14ece:	f002 fa91 	bl	173f4 <__errno>
   14ed2:	9b08      	ldr	r3, [sp, #32]
   14ed4:	6003      	str	r3, [r0, #0]
   14ed6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   14eda:	f000 fdd3 	bl	15a84 <__aeabi_d2f>
   14ede:	4605      	mov	r5, r0
   14ee0:	4628      	mov	r0, r5
   14ee2:	b00b      	add	sp, #44	; 0x2c
   14ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14ee6:	2303      	movs	r3, #3
   14ee8:	4a12      	ldr	r2, [pc, #72]	; (14f34 <expf+0xd4>)
   14eea:	9300      	str	r3, [sp, #0]
   14eec:	4620      	mov	r0, r4
   14eee:	2300      	movs	r3, #0
   14ef0:	9308      	str	r3, [sp, #32]
   14ef2:	9201      	str	r2, [sp, #4]
   14ef4:	f000 fa90 	bl	15418 <__aeabi_f2d>
   14ef8:	f996 3000 	ldrsb.w	r3, [r6]
   14efc:	e9cd 0104 	strd	r0, r1, [sp, #16]
   14f00:	e9cd 0102 	strd	r0, r1, [sp, #8]
   14f04:	b92b      	cbnz	r3, 14f12 <expf+0xb2>
   14f06:	4b0c      	ldr	r3, [pc, #48]	; (14f38 <expf+0xd8>)
   14f08:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   14f0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14f10:	e7d6      	b.n	14ec0 <expf+0x60>
   14f12:	490a      	ldr	r1, [pc, #40]	; (14f3c <expf+0xdc>)
   14f14:	2000      	movs	r0, #0
   14f16:	2b02      	cmp	r3, #2
   14f18:	e9cd 0106 	strd	r0, r1, [sp, #24]
   14f1c:	d1d0      	bne.n	14ec0 <expf+0x60>
   14f1e:	f002 fa69 	bl	173f4 <__errno>
   14f22:	2322      	movs	r3, #34	; 0x22
   14f24:	6003      	str	r3, [r0, #0]
   14f26:	e7d0      	b.n	14eca <expf+0x6a>
   14f28:	2000001c 	.word	0x2000001c
   14f2c:	42b17180 	.word	0x42b17180
   14f30:	c2cff1b5 	.word	0xc2cff1b5
   14f34:	0003e2fc 	.word	0x0003e2fc
   14f38:	47efffff 	.word	0x47efffff
   14f3c:	7ff00000 	.word	0x7ff00000

00014f40 <__ieee754_expf>:
   14f40:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
   14f44:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   14f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14f4c:	4604      	mov	r4, r0
   14f4e:	d86f      	bhi.n	15030 <__ieee754_expf+0xf0>
   14f50:	ea4f 75d0 	mov.w	r5, r0, lsr #31
   14f54:	d071      	beq.n	1503a <__ieee754_expf+0xfa>
   14f56:	4969      	ldr	r1, [pc, #420]	; (150fc <__ieee754_expf+0x1bc>)
   14f58:	4288      	cmp	r0, r1
   14f5a:	f300 808c 	bgt.w	15076 <__ieee754_expf+0x136>
   14f5e:	2800      	cmp	r0, #0
   14f60:	f2c0 8082 	blt.w	15068 <__ieee754_expf+0x128>
   14f64:	4b66      	ldr	r3, [pc, #408]	; (15100 <__ieee754_expf+0x1c0>)
   14f66:	429a      	cmp	r2, r3
   14f68:	d96a      	bls.n	15040 <__ieee754_expf+0x100>
   14f6a:	4b66      	ldr	r3, [pc, #408]	; (15104 <__ieee754_expf+0x1c4>)
   14f6c:	429a      	cmp	r2, r3
   14f6e:	f200 80a2 	bhi.w	150b6 <__ieee754_expf+0x176>
   14f72:	4b65      	ldr	r3, [pc, #404]	; (15108 <__ieee754_expf+0x1c8>)
   14f74:	4620      	mov	r0, r4
   14f76:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   14f7a:	f000 fdd7 	bl	15b2c <__aeabi_fsub>
   14f7e:	4b63      	ldr	r3, [pc, #396]	; (1510c <__ieee754_expf+0x1cc>)
   14f80:	4607      	mov	r7, r0
   14f82:	f1c5 0001 	rsb	r0, r5, #1
   14f86:	f853 8025 	ldr.w	r8, [r3, r5, lsl #2]
   14f8a:	1b45      	subs	r5, r0, r5
   14f8c:	4641      	mov	r1, r8
   14f8e:	4638      	mov	r0, r7
   14f90:	f000 fdcc 	bl	15b2c <__aeabi_fsub>
   14f94:	4604      	mov	r4, r0
   14f96:	4621      	mov	r1, r4
   14f98:	4620      	mov	r0, r4
   14f9a:	f000 fed1 	bl	15d40 <__aeabi_fmul>
   14f9e:	495c      	ldr	r1, [pc, #368]	; (15110 <__ieee754_expf+0x1d0>)
   14fa0:	4606      	mov	r6, r0
   14fa2:	f000 fecd 	bl	15d40 <__aeabi_fmul>
   14fa6:	495b      	ldr	r1, [pc, #364]	; (15114 <__ieee754_expf+0x1d4>)
   14fa8:	f000 fdc0 	bl	15b2c <__aeabi_fsub>
   14fac:	4631      	mov	r1, r6
   14fae:	f000 fec7 	bl	15d40 <__aeabi_fmul>
   14fb2:	4959      	ldr	r1, [pc, #356]	; (15118 <__ieee754_expf+0x1d8>)
   14fb4:	f000 fdbc 	bl	15b30 <__addsf3>
   14fb8:	4631      	mov	r1, r6
   14fba:	f000 fec1 	bl	15d40 <__aeabi_fmul>
   14fbe:	4957      	ldr	r1, [pc, #348]	; (1511c <__ieee754_expf+0x1dc>)
   14fc0:	f000 fdb4 	bl	15b2c <__aeabi_fsub>
   14fc4:	4631      	mov	r1, r6
   14fc6:	f000 febb 	bl	15d40 <__aeabi_fmul>
   14fca:	4955      	ldr	r1, [pc, #340]	; (15120 <__ieee754_expf+0x1e0>)
   14fcc:	f000 fdb0 	bl	15b30 <__addsf3>
   14fd0:	4631      	mov	r1, r6
   14fd2:	f000 feb5 	bl	15d40 <__aeabi_fmul>
   14fd6:	4601      	mov	r1, r0
   14fd8:	4620      	mov	r0, r4
   14fda:	f000 fda7 	bl	15b2c <__aeabi_fsub>
   14fde:	4606      	mov	r6, r0
   14fe0:	2d00      	cmp	r5, #0
   14fe2:	d04e      	beq.n	15082 <__ieee754_expf+0x142>
   14fe4:	4620      	mov	r0, r4
   14fe6:	4631      	mov	r1, r6
   14fe8:	f000 feaa 	bl	15d40 <__aeabi_fmul>
   14fec:	4631      	mov	r1, r6
   14fee:	4604      	mov	r4, r0
   14ff0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   14ff4:	f000 fd9a 	bl	15b2c <__aeabi_fsub>
   14ff8:	4601      	mov	r1, r0
   14ffa:	4620      	mov	r0, r4
   14ffc:	f000 ff54 	bl	15ea8 <__aeabi_fdiv>
   15000:	4601      	mov	r1, r0
   15002:	4640      	mov	r0, r8
   15004:	f000 fd92 	bl	15b2c <__aeabi_fsub>
   15008:	4639      	mov	r1, r7
   1500a:	f000 fd8f 	bl	15b2c <__aeabi_fsub>
   1500e:	4601      	mov	r1, r0
   15010:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   15014:	f000 fd8a 	bl	15b2c <__aeabi_fsub>
   15018:	f115 0f7d 	cmn.w	r5, #125	; 0x7d
   1501c:	da6a      	bge.n	150f4 <__ieee754_expf+0x1b4>
   1501e:	3564      	adds	r5, #100	; 0x64
   15020:	eb00 50c5 	add.w	r0, r0, r5, lsl #23
   15024:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
   15028:	f000 fe8a 	bl	15d40 <__aeabi_fmul>
   1502c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15030:	4601      	mov	r1, r0
   15032:	f000 fd7d 	bl	15b30 <__addsf3>
   15036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1503a:	b9cd      	cbnz	r5, 15070 <__ieee754_expf+0x130>
   1503c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15040:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
   15044:	d235      	bcs.n	150b2 <__ieee754_expf+0x172>
   15046:	4937      	ldr	r1, [pc, #220]	; (15124 <__ieee754_expf+0x1e4>)
   15048:	4620      	mov	r0, r4
   1504a:	f000 fd71 	bl	15b30 <__addsf3>
   1504e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   15052:	f001 f831 	bl	160b8 <__aeabi_fcmpgt>
   15056:	2800      	cmp	r0, #0
   15058:	d04a      	beq.n	150f0 <__ieee754_expf+0x1b0>
   1505a:	4620      	mov	r0, r4
   1505c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   15060:	f000 fd66 	bl	15b30 <__addsf3>
   15064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15068:	4b2f      	ldr	r3, [pc, #188]	; (15128 <__ieee754_expf+0x1e8>)
   1506a:	429a      	cmp	r2, r3
   1506c:	f67f af7a 	bls.w	14f64 <__ieee754_expf+0x24>
   15070:	2000      	movs	r0, #0
   15072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15076:	492b      	ldr	r1, [pc, #172]	; (15124 <__ieee754_expf+0x1e4>)
   15078:	4608      	mov	r0, r1
   1507a:	f000 fe61 	bl	15d40 <__aeabi_fmul>
   1507e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15082:	4601      	mov	r1, r0
   15084:	4620      	mov	r0, r4
   15086:	f000 fe5b 	bl	15d40 <__aeabi_fmul>
   1508a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1508e:	4605      	mov	r5, r0
   15090:	4630      	mov	r0, r6
   15092:	f000 fd4b 	bl	15b2c <__aeabi_fsub>
   15096:	4601      	mov	r1, r0
   15098:	4628      	mov	r0, r5
   1509a:	f000 ff05 	bl	15ea8 <__aeabi_fdiv>
   1509e:	4621      	mov	r1, r4
   150a0:	f000 fd44 	bl	15b2c <__aeabi_fsub>
   150a4:	4601      	mov	r1, r0
   150a6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   150aa:	f000 fd3f 	bl	15b2c <__aeabi_fsub>
   150ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   150b2:	2500      	movs	r5, #0
   150b4:	e76f      	b.n	14f96 <__ieee754_expf+0x56>
   150b6:	491d      	ldr	r1, [pc, #116]	; (1512c <__ieee754_expf+0x1ec>)
   150b8:	4620      	mov	r0, r4
   150ba:	f000 fe41 	bl	15d40 <__aeabi_fmul>
   150be:	4b1c      	ldr	r3, [pc, #112]	; (15130 <__ieee754_expf+0x1f0>)
   150c0:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   150c4:	f000 fd34 	bl	15b30 <__addsf3>
   150c8:	f001 f800 	bl	160cc <__aeabi_f2iz>
   150cc:	4605      	mov	r5, r0
   150ce:	f000 fde3 	bl	15c98 <__aeabi_i2f>
   150d2:	4918      	ldr	r1, [pc, #96]	; (15134 <__ieee754_expf+0x1f4>)
   150d4:	4606      	mov	r6, r0
   150d6:	f000 fe33 	bl	15d40 <__aeabi_fmul>
   150da:	4601      	mov	r1, r0
   150dc:	4620      	mov	r0, r4
   150de:	f000 fd25 	bl	15b2c <__aeabi_fsub>
   150e2:	4915      	ldr	r1, [pc, #84]	; (15138 <__ieee754_expf+0x1f8>)
   150e4:	4607      	mov	r7, r0
   150e6:	4630      	mov	r0, r6
   150e8:	f000 fe2a 	bl	15d40 <__aeabi_fmul>
   150ec:	4680      	mov	r8, r0
   150ee:	e74d      	b.n	14f8c <__ieee754_expf+0x4c>
   150f0:	4605      	mov	r5, r0
   150f2:	e750      	b.n	14f96 <__ieee754_expf+0x56>
   150f4:	eb00 50c5 	add.w	r0, r0, r5, lsl #23
   150f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   150fc:	42b17217 	.word	0x42b17217
   15100:	3eb17218 	.word	0x3eb17218
   15104:	3f851591 	.word	0x3f851591
   15108:	0003e30c 	.word	0x0003e30c
   1510c:	0003e314 	.word	0x0003e314
   15110:	3331bb4c 	.word	0x3331bb4c
   15114:	35ddea0e 	.word	0x35ddea0e
   15118:	388ab355 	.word	0x388ab355
   1511c:	3b360b61 	.word	0x3b360b61
   15120:	3e2aaaab 	.word	0x3e2aaaab
   15124:	7149f2ca 	.word	0x7149f2ca
   15128:	42cff1b5 	.word	0x42cff1b5
   1512c:	3fb8aa3b 	.word	0x3fb8aa3b
   15130:	0003e304 	.word	0x0003e304
   15134:	3f317180 	.word	0x3f317180
   15138:	3717f7d1 	.word	0x3717f7d1

0001513c <matherr>:
   1513c:	2000      	movs	r0, #0
   1513e:	4770      	bx	lr

00015140 <finitef>:
   15140:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   15144:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   15148:	bfac      	ite	ge
   1514a:	2000      	movge	r0, #0
   1514c:	2001      	movlt	r0, #1
   1514e:	4770      	bx	lr

00015150 <__aeabi_drsub>:
   15150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   15154:	e002      	b.n	1515c <__adddf3>
   15156:	bf00      	nop

00015158 <__aeabi_dsub>:
   15158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001515c <__adddf3>:
   1515c:	b530      	push	{r4, r5, lr}
   1515e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   15162:	ea4f 0543 	mov.w	r5, r3, lsl #1
   15166:	ea94 0f05 	teq	r4, r5
   1516a:	bf08      	it	eq
   1516c:	ea90 0f02 	teqeq	r0, r2
   15170:	bf1f      	itttt	ne
   15172:	ea54 0c00 	orrsne.w	ip, r4, r0
   15176:	ea55 0c02 	orrsne.w	ip, r5, r2
   1517a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1517e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   15182:	f000 80e2 	beq.w	1534a <__adddf3+0x1ee>
   15186:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1518a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1518e:	bfb8      	it	lt
   15190:	426d      	neglt	r5, r5
   15192:	dd0c      	ble.n	151ae <__adddf3+0x52>
   15194:	442c      	add	r4, r5
   15196:	ea80 0202 	eor.w	r2, r0, r2
   1519a:	ea81 0303 	eor.w	r3, r1, r3
   1519e:	ea82 0000 	eor.w	r0, r2, r0
   151a2:	ea83 0101 	eor.w	r1, r3, r1
   151a6:	ea80 0202 	eor.w	r2, r0, r2
   151aa:	ea81 0303 	eor.w	r3, r1, r3
   151ae:	2d36      	cmp	r5, #54	; 0x36
   151b0:	bf88      	it	hi
   151b2:	bd30      	pophi	{r4, r5, pc}
   151b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   151b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   151bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   151c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   151c4:	d002      	beq.n	151cc <__adddf3+0x70>
   151c6:	4240      	negs	r0, r0
   151c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   151cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   151d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   151d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   151d8:	d002      	beq.n	151e0 <__adddf3+0x84>
   151da:	4252      	negs	r2, r2
   151dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   151e0:	ea94 0f05 	teq	r4, r5
   151e4:	f000 80a7 	beq.w	15336 <__adddf3+0x1da>
   151e8:	f1a4 0401 	sub.w	r4, r4, #1
   151ec:	f1d5 0e20 	rsbs	lr, r5, #32
   151f0:	db0d      	blt.n	1520e <__adddf3+0xb2>
   151f2:	fa02 fc0e 	lsl.w	ip, r2, lr
   151f6:	fa22 f205 	lsr.w	r2, r2, r5
   151fa:	1880      	adds	r0, r0, r2
   151fc:	f141 0100 	adc.w	r1, r1, #0
   15200:	fa03 f20e 	lsl.w	r2, r3, lr
   15204:	1880      	adds	r0, r0, r2
   15206:	fa43 f305 	asr.w	r3, r3, r5
   1520a:	4159      	adcs	r1, r3
   1520c:	e00e      	b.n	1522c <__adddf3+0xd0>
   1520e:	f1a5 0520 	sub.w	r5, r5, #32
   15212:	f10e 0e20 	add.w	lr, lr, #32
   15216:	2a01      	cmp	r2, #1
   15218:	fa03 fc0e 	lsl.w	ip, r3, lr
   1521c:	bf28      	it	cs
   1521e:	f04c 0c02 	orrcs.w	ip, ip, #2
   15222:	fa43 f305 	asr.w	r3, r3, r5
   15226:	18c0      	adds	r0, r0, r3
   15228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1522c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   15230:	d507      	bpl.n	15242 <__adddf3+0xe6>
   15232:	f04f 0e00 	mov.w	lr, #0
   15236:	f1dc 0c00 	rsbs	ip, ip, #0
   1523a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1523e:	eb6e 0101 	sbc.w	r1, lr, r1
   15242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   15246:	d31b      	bcc.n	15280 <__adddf3+0x124>
   15248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1524c:	d30c      	bcc.n	15268 <__adddf3+0x10c>
   1524e:	0849      	lsrs	r1, r1, #1
   15250:	ea5f 0030 	movs.w	r0, r0, rrx
   15254:	ea4f 0c3c 	mov.w	ip, ip, rrx
   15258:	f104 0401 	add.w	r4, r4, #1
   1525c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   15260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   15264:	f080 809a 	bcs.w	1539c <__adddf3+0x240>
   15268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1526c:	bf08      	it	eq
   1526e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   15272:	f150 0000 	adcs.w	r0, r0, #0
   15276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1527a:	ea41 0105 	orr.w	r1, r1, r5
   1527e:	bd30      	pop	{r4, r5, pc}
   15280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   15284:	4140      	adcs	r0, r0
   15286:	eb41 0101 	adc.w	r1, r1, r1
   1528a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1528e:	f1a4 0401 	sub.w	r4, r4, #1
   15292:	d1e9      	bne.n	15268 <__adddf3+0x10c>
   15294:	f091 0f00 	teq	r1, #0
   15298:	bf04      	itt	eq
   1529a:	4601      	moveq	r1, r0
   1529c:	2000      	moveq	r0, #0
   1529e:	fab1 f381 	clz	r3, r1
   152a2:	bf08      	it	eq
   152a4:	3320      	addeq	r3, #32
   152a6:	f1a3 030b 	sub.w	r3, r3, #11
   152aa:	f1b3 0220 	subs.w	r2, r3, #32
   152ae:	da0c      	bge.n	152ca <__adddf3+0x16e>
   152b0:	320c      	adds	r2, #12
   152b2:	dd08      	ble.n	152c6 <__adddf3+0x16a>
   152b4:	f102 0c14 	add.w	ip, r2, #20
   152b8:	f1c2 020c 	rsb	r2, r2, #12
   152bc:	fa01 f00c 	lsl.w	r0, r1, ip
   152c0:	fa21 f102 	lsr.w	r1, r1, r2
   152c4:	e00c      	b.n	152e0 <__adddf3+0x184>
   152c6:	f102 0214 	add.w	r2, r2, #20
   152ca:	bfd8      	it	le
   152cc:	f1c2 0c20 	rsble	ip, r2, #32
   152d0:	fa01 f102 	lsl.w	r1, r1, r2
   152d4:	fa20 fc0c 	lsr.w	ip, r0, ip
   152d8:	bfdc      	itt	le
   152da:	ea41 010c 	orrle.w	r1, r1, ip
   152de:	4090      	lslle	r0, r2
   152e0:	1ae4      	subs	r4, r4, r3
   152e2:	bfa2      	ittt	ge
   152e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   152e8:	4329      	orrge	r1, r5
   152ea:	bd30      	popge	{r4, r5, pc}
   152ec:	ea6f 0404 	mvn.w	r4, r4
   152f0:	3c1f      	subs	r4, #31
   152f2:	da1c      	bge.n	1532e <__adddf3+0x1d2>
   152f4:	340c      	adds	r4, #12
   152f6:	dc0e      	bgt.n	15316 <__adddf3+0x1ba>
   152f8:	f104 0414 	add.w	r4, r4, #20
   152fc:	f1c4 0220 	rsb	r2, r4, #32
   15300:	fa20 f004 	lsr.w	r0, r0, r4
   15304:	fa01 f302 	lsl.w	r3, r1, r2
   15308:	ea40 0003 	orr.w	r0, r0, r3
   1530c:	fa21 f304 	lsr.w	r3, r1, r4
   15310:	ea45 0103 	orr.w	r1, r5, r3
   15314:	bd30      	pop	{r4, r5, pc}
   15316:	f1c4 040c 	rsb	r4, r4, #12
   1531a:	f1c4 0220 	rsb	r2, r4, #32
   1531e:	fa20 f002 	lsr.w	r0, r0, r2
   15322:	fa01 f304 	lsl.w	r3, r1, r4
   15326:	ea40 0003 	orr.w	r0, r0, r3
   1532a:	4629      	mov	r1, r5
   1532c:	bd30      	pop	{r4, r5, pc}
   1532e:	fa21 f004 	lsr.w	r0, r1, r4
   15332:	4629      	mov	r1, r5
   15334:	bd30      	pop	{r4, r5, pc}
   15336:	f094 0f00 	teq	r4, #0
   1533a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1533e:	bf06      	itte	eq
   15340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   15344:	3401      	addeq	r4, #1
   15346:	3d01      	subne	r5, #1
   15348:	e74e      	b.n	151e8 <__adddf3+0x8c>
   1534a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1534e:	bf18      	it	ne
   15350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   15354:	d029      	beq.n	153aa <__adddf3+0x24e>
   15356:	ea94 0f05 	teq	r4, r5
   1535a:	bf08      	it	eq
   1535c:	ea90 0f02 	teqeq	r0, r2
   15360:	d005      	beq.n	1536e <__adddf3+0x212>
   15362:	ea54 0c00 	orrs.w	ip, r4, r0
   15366:	bf04      	itt	eq
   15368:	4619      	moveq	r1, r3
   1536a:	4610      	moveq	r0, r2
   1536c:	bd30      	pop	{r4, r5, pc}
   1536e:	ea91 0f03 	teq	r1, r3
   15372:	bf1e      	ittt	ne
   15374:	2100      	movne	r1, #0
   15376:	2000      	movne	r0, #0
   15378:	bd30      	popne	{r4, r5, pc}
   1537a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1537e:	d105      	bne.n	1538c <__adddf3+0x230>
   15380:	0040      	lsls	r0, r0, #1
   15382:	4149      	adcs	r1, r1
   15384:	bf28      	it	cs
   15386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1538a:	bd30      	pop	{r4, r5, pc}
   1538c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   15390:	bf3c      	itt	cc
   15392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   15396:	bd30      	popcc	{r4, r5, pc}
   15398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1539c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   153a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   153a4:	f04f 0000 	mov.w	r0, #0
   153a8:	bd30      	pop	{r4, r5, pc}
   153aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   153ae:	bf1a      	itte	ne
   153b0:	4619      	movne	r1, r3
   153b2:	4610      	movne	r0, r2
   153b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   153b8:	bf1c      	itt	ne
   153ba:	460b      	movne	r3, r1
   153bc:	4602      	movne	r2, r0
   153be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   153c2:	bf06      	itte	eq
   153c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   153c8:	ea91 0f03 	teqeq	r1, r3
   153cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   153d0:	bd30      	pop	{r4, r5, pc}
   153d2:	bf00      	nop

000153d4 <__aeabi_ui2d>:
   153d4:	f090 0f00 	teq	r0, #0
   153d8:	bf04      	itt	eq
   153da:	2100      	moveq	r1, #0
   153dc:	4770      	bxeq	lr
   153de:	b530      	push	{r4, r5, lr}
   153e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   153e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   153e8:	f04f 0500 	mov.w	r5, #0
   153ec:	f04f 0100 	mov.w	r1, #0
   153f0:	e750      	b.n	15294 <__adddf3+0x138>
   153f2:	bf00      	nop

000153f4 <__aeabi_i2d>:
   153f4:	f090 0f00 	teq	r0, #0
   153f8:	bf04      	itt	eq
   153fa:	2100      	moveq	r1, #0
   153fc:	4770      	bxeq	lr
   153fe:	b530      	push	{r4, r5, lr}
   15400:	f44f 6480 	mov.w	r4, #1024	; 0x400
   15404:	f104 0432 	add.w	r4, r4, #50	; 0x32
   15408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1540c:	bf48      	it	mi
   1540e:	4240      	negmi	r0, r0
   15410:	f04f 0100 	mov.w	r1, #0
   15414:	e73e      	b.n	15294 <__adddf3+0x138>
   15416:	bf00      	nop

00015418 <__aeabi_f2d>:
   15418:	0042      	lsls	r2, r0, #1
   1541a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1541e:	ea4f 0131 	mov.w	r1, r1, rrx
   15422:	ea4f 7002 	mov.w	r0, r2, lsl #28
   15426:	bf1f      	itttt	ne
   15428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1542c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   15430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   15434:	4770      	bxne	lr
   15436:	f092 0f00 	teq	r2, #0
   1543a:	bf14      	ite	ne
   1543c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   15440:	4770      	bxeq	lr
   15442:	b530      	push	{r4, r5, lr}
   15444:	f44f 7460 	mov.w	r4, #896	; 0x380
   15448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1544c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   15450:	e720      	b.n	15294 <__adddf3+0x138>
   15452:	bf00      	nop

00015454 <__aeabi_ul2d>:
   15454:	ea50 0201 	orrs.w	r2, r0, r1
   15458:	bf08      	it	eq
   1545a:	4770      	bxeq	lr
   1545c:	b530      	push	{r4, r5, lr}
   1545e:	f04f 0500 	mov.w	r5, #0
   15462:	e00a      	b.n	1547a <__aeabi_l2d+0x16>

00015464 <__aeabi_l2d>:
   15464:	ea50 0201 	orrs.w	r2, r0, r1
   15468:	bf08      	it	eq
   1546a:	4770      	bxeq	lr
   1546c:	b530      	push	{r4, r5, lr}
   1546e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   15472:	d502      	bpl.n	1547a <__aeabi_l2d+0x16>
   15474:	4240      	negs	r0, r0
   15476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1547a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1547e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   15482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   15486:	f43f aedc 	beq.w	15242 <__adddf3+0xe6>
   1548a:	f04f 0203 	mov.w	r2, #3
   1548e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   15492:	bf18      	it	ne
   15494:	3203      	addne	r2, #3
   15496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1549a:	bf18      	it	ne
   1549c:	3203      	addne	r2, #3
   1549e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   154a2:	f1c2 0320 	rsb	r3, r2, #32
   154a6:	fa00 fc03 	lsl.w	ip, r0, r3
   154aa:	fa20 f002 	lsr.w	r0, r0, r2
   154ae:	fa01 fe03 	lsl.w	lr, r1, r3
   154b2:	ea40 000e 	orr.w	r0, r0, lr
   154b6:	fa21 f102 	lsr.w	r1, r1, r2
   154ba:	4414      	add	r4, r2
   154bc:	e6c1      	b.n	15242 <__adddf3+0xe6>
   154be:	bf00      	nop

000154c0 <__aeabi_dmul>:
   154c0:	b570      	push	{r4, r5, r6, lr}
   154c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   154c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   154ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   154ce:	bf1d      	ittte	ne
   154d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   154d4:	ea94 0f0c 	teqne	r4, ip
   154d8:	ea95 0f0c 	teqne	r5, ip
   154dc:	f000 f8de 	bleq	1569c <__aeabi_dmul+0x1dc>
   154e0:	442c      	add	r4, r5
   154e2:	ea81 0603 	eor.w	r6, r1, r3
   154e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   154ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   154ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   154f2:	bf18      	it	ne
   154f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   154f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   154fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   15500:	d038      	beq.n	15574 <__aeabi_dmul+0xb4>
   15502:	fba0 ce02 	umull	ip, lr, r0, r2
   15506:	f04f 0500 	mov.w	r5, #0
   1550a:	fbe1 e502 	umlal	lr, r5, r1, r2
   1550e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   15512:	fbe0 e503 	umlal	lr, r5, r0, r3
   15516:	f04f 0600 	mov.w	r6, #0
   1551a:	fbe1 5603 	umlal	r5, r6, r1, r3
   1551e:	f09c 0f00 	teq	ip, #0
   15522:	bf18      	it	ne
   15524:	f04e 0e01 	orrne.w	lr, lr, #1
   15528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1552c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   15530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   15534:	d204      	bcs.n	15540 <__aeabi_dmul+0x80>
   15536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1553a:	416d      	adcs	r5, r5
   1553c:	eb46 0606 	adc.w	r6, r6, r6
   15540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   15544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   15548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1554c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   15550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   15554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   15558:	bf88      	it	hi
   1555a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1555e:	d81e      	bhi.n	1559e <__aeabi_dmul+0xde>
   15560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   15564:	bf08      	it	eq
   15566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1556a:	f150 0000 	adcs.w	r0, r0, #0
   1556e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   15572:	bd70      	pop	{r4, r5, r6, pc}
   15574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   15578:	ea46 0101 	orr.w	r1, r6, r1
   1557c:	ea40 0002 	orr.w	r0, r0, r2
   15580:	ea81 0103 	eor.w	r1, r1, r3
   15584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   15588:	bfc2      	ittt	gt
   1558a:	ebd4 050c 	rsbsgt	r5, r4, ip
   1558e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   15592:	bd70      	popgt	{r4, r5, r6, pc}
   15594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   15598:	f04f 0e00 	mov.w	lr, #0
   1559c:	3c01      	subs	r4, #1
   1559e:	f300 80ab 	bgt.w	156f8 <__aeabi_dmul+0x238>
   155a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   155a6:	bfde      	ittt	le
   155a8:	2000      	movle	r0, #0
   155aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   155ae:	bd70      	pople	{r4, r5, r6, pc}
   155b0:	f1c4 0400 	rsb	r4, r4, #0
   155b4:	3c20      	subs	r4, #32
   155b6:	da35      	bge.n	15624 <__aeabi_dmul+0x164>
   155b8:	340c      	adds	r4, #12
   155ba:	dc1b      	bgt.n	155f4 <__aeabi_dmul+0x134>
   155bc:	f104 0414 	add.w	r4, r4, #20
   155c0:	f1c4 0520 	rsb	r5, r4, #32
   155c4:	fa00 f305 	lsl.w	r3, r0, r5
   155c8:	fa20 f004 	lsr.w	r0, r0, r4
   155cc:	fa01 f205 	lsl.w	r2, r1, r5
   155d0:	ea40 0002 	orr.w	r0, r0, r2
   155d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   155d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   155dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   155e0:	fa21 f604 	lsr.w	r6, r1, r4
   155e4:	eb42 0106 	adc.w	r1, r2, r6
   155e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   155ec:	bf08      	it	eq
   155ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   155f2:	bd70      	pop	{r4, r5, r6, pc}
   155f4:	f1c4 040c 	rsb	r4, r4, #12
   155f8:	f1c4 0520 	rsb	r5, r4, #32
   155fc:	fa00 f304 	lsl.w	r3, r0, r4
   15600:	fa20 f005 	lsr.w	r0, r0, r5
   15604:	fa01 f204 	lsl.w	r2, r1, r4
   15608:	ea40 0002 	orr.w	r0, r0, r2
   1560c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   15610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   15614:	f141 0100 	adc.w	r1, r1, #0
   15618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1561c:	bf08      	it	eq
   1561e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   15622:	bd70      	pop	{r4, r5, r6, pc}
   15624:	f1c4 0520 	rsb	r5, r4, #32
   15628:	fa00 f205 	lsl.w	r2, r0, r5
   1562c:	ea4e 0e02 	orr.w	lr, lr, r2
   15630:	fa20 f304 	lsr.w	r3, r0, r4
   15634:	fa01 f205 	lsl.w	r2, r1, r5
   15638:	ea43 0302 	orr.w	r3, r3, r2
   1563c:	fa21 f004 	lsr.w	r0, r1, r4
   15640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   15644:	fa21 f204 	lsr.w	r2, r1, r4
   15648:	ea20 0002 	bic.w	r0, r0, r2
   1564c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   15650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   15654:	bf08      	it	eq
   15656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1565a:	bd70      	pop	{r4, r5, r6, pc}
   1565c:	f094 0f00 	teq	r4, #0
   15660:	d10f      	bne.n	15682 <__aeabi_dmul+0x1c2>
   15662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   15666:	0040      	lsls	r0, r0, #1
   15668:	eb41 0101 	adc.w	r1, r1, r1
   1566c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   15670:	bf08      	it	eq
   15672:	3c01      	subeq	r4, #1
   15674:	d0f7      	beq.n	15666 <__aeabi_dmul+0x1a6>
   15676:	ea41 0106 	orr.w	r1, r1, r6
   1567a:	f095 0f00 	teq	r5, #0
   1567e:	bf18      	it	ne
   15680:	4770      	bxne	lr
   15682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   15686:	0052      	lsls	r2, r2, #1
   15688:	eb43 0303 	adc.w	r3, r3, r3
   1568c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   15690:	bf08      	it	eq
   15692:	3d01      	subeq	r5, #1
   15694:	d0f7      	beq.n	15686 <__aeabi_dmul+0x1c6>
   15696:	ea43 0306 	orr.w	r3, r3, r6
   1569a:	4770      	bx	lr
   1569c:	ea94 0f0c 	teq	r4, ip
   156a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   156a4:	bf18      	it	ne
   156a6:	ea95 0f0c 	teqne	r5, ip
   156aa:	d00c      	beq.n	156c6 <__aeabi_dmul+0x206>
   156ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   156b0:	bf18      	it	ne
   156b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   156b6:	d1d1      	bne.n	1565c <__aeabi_dmul+0x19c>
   156b8:	ea81 0103 	eor.w	r1, r1, r3
   156bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   156c0:	f04f 0000 	mov.w	r0, #0
   156c4:	bd70      	pop	{r4, r5, r6, pc}
   156c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   156ca:	bf06      	itte	eq
   156cc:	4610      	moveq	r0, r2
   156ce:	4619      	moveq	r1, r3
   156d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   156d4:	d019      	beq.n	1570a <__aeabi_dmul+0x24a>
   156d6:	ea94 0f0c 	teq	r4, ip
   156da:	d102      	bne.n	156e2 <__aeabi_dmul+0x222>
   156dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   156e0:	d113      	bne.n	1570a <__aeabi_dmul+0x24a>
   156e2:	ea95 0f0c 	teq	r5, ip
   156e6:	d105      	bne.n	156f4 <__aeabi_dmul+0x234>
   156e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   156ec:	bf1c      	itt	ne
   156ee:	4610      	movne	r0, r2
   156f0:	4619      	movne	r1, r3
   156f2:	d10a      	bne.n	1570a <__aeabi_dmul+0x24a>
   156f4:	ea81 0103 	eor.w	r1, r1, r3
   156f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   156fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   15700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   15704:	f04f 0000 	mov.w	r0, #0
   15708:	bd70      	pop	{r4, r5, r6, pc}
   1570a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1570e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   15712:	bd70      	pop	{r4, r5, r6, pc}

00015714 <__aeabi_ddiv>:
   15714:	b570      	push	{r4, r5, r6, lr}
   15716:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1571a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1571e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   15722:	bf1d      	ittte	ne
   15724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   15728:	ea94 0f0c 	teqne	r4, ip
   1572c:	ea95 0f0c 	teqne	r5, ip
   15730:	f000 f8a7 	bleq	15882 <__aeabi_ddiv+0x16e>
   15734:	eba4 0405 	sub.w	r4, r4, r5
   15738:	ea81 0e03 	eor.w	lr, r1, r3
   1573c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   15740:	ea4f 3101 	mov.w	r1, r1, lsl #12
   15744:	f000 8088 	beq.w	15858 <__aeabi_ddiv+0x144>
   15748:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1574c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   15750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   15754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   15758:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1575c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   15760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   15764:	ea4f 2600 	mov.w	r6, r0, lsl #8
   15768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1576c:	429d      	cmp	r5, r3
   1576e:	bf08      	it	eq
   15770:	4296      	cmpeq	r6, r2
   15772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   15776:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1577a:	d202      	bcs.n	15782 <__aeabi_ddiv+0x6e>
   1577c:	085b      	lsrs	r3, r3, #1
   1577e:	ea4f 0232 	mov.w	r2, r2, rrx
   15782:	1ab6      	subs	r6, r6, r2
   15784:	eb65 0503 	sbc.w	r5, r5, r3
   15788:	085b      	lsrs	r3, r3, #1
   1578a:	ea4f 0232 	mov.w	r2, r2, rrx
   1578e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   15792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   15796:	ebb6 0e02 	subs.w	lr, r6, r2
   1579a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1579e:	bf22      	ittt	cs
   157a0:	1ab6      	subcs	r6, r6, r2
   157a2:	4675      	movcs	r5, lr
   157a4:	ea40 000c 	orrcs.w	r0, r0, ip
   157a8:	085b      	lsrs	r3, r3, #1
   157aa:	ea4f 0232 	mov.w	r2, r2, rrx
   157ae:	ebb6 0e02 	subs.w	lr, r6, r2
   157b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   157b6:	bf22      	ittt	cs
   157b8:	1ab6      	subcs	r6, r6, r2
   157ba:	4675      	movcs	r5, lr
   157bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   157c0:	085b      	lsrs	r3, r3, #1
   157c2:	ea4f 0232 	mov.w	r2, r2, rrx
   157c6:	ebb6 0e02 	subs.w	lr, r6, r2
   157ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   157ce:	bf22      	ittt	cs
   157d0:	1ab6      	subcs	r6, r6, r2
   157d2:	4675      	movcs	r5, lr
   157d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   157d8:	085b      	lsrs	r3, r3, #1
   157da:	ea4f 0232 	mov.w	r2, r2, rrx
   157de:	ebb6 0e02 	subs.w	lr, r6, r2
   157e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   157e6:	bf22      	ittt	cs
   157e8:	1ab6      	subcs	r6, r6, r2
   157ea:	4675      	movcs	r5, lr
   157ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   157f0:	ea55 0e06 	orrs.w	lr, r5, r6
   157f4:	d018      	beq.n	15828 <__aeabi_ddiv+0x114>
   157f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   157fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   157fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
   15802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   15806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1580a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1580e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   15812:	d1c0      	bne.n	15796 <__aeabi_ddiv+0x82>
   15814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   15818:	d10b      	bne.n	15832 <__aeabi_ddiv+0x11e>
   1581a:	ea41 0100 	orr.w	r1, r1, r0
   1581e:	f04f 0000 	mov.w	r0, #0
   15822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   15826:	e7b6      	b.n	15796 <__aeabi_ddiv+0x82>
   15828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1582c:	bf04      	itt	eq
   1582e:	4301      	orreq	r1, r0
   15830:	2000      	moveq	r0, #0
   15832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   15836:	bf88      	it	hi
   15838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1583c:	f63f aeaf 	bhi.w	1559e <__aeabi_dmul+0xde>
   15840:	ebb5 0c03 	subs.w	ip, r5, r3
   15844:	bf04      	itt	eq
   15846:	ebb6 0c02 	subseq.w	ip, r6, r2
   1584a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1584e:	f150 0000 	adcs.w	r0, r0, #0
   15852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   15856:	bd70      	pop	{r4, r5, r6, pc}
   15858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1585c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   15860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   15864:	bfc2      	ittt	gt
   15866:	ebd4 050c 	rsbsgt	r5, r4, ip
   1586a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1586e:	bd70      	popgt	{r4, r5, r6, pc}
   15870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   15874:	f04f 0e00 	mov.w	lr, #0
   15878:	3c01      	subs	r4, #1
   1587a:	e690      	b.n	1559e <__aeabi_dmul+0xde>
   1587c:	ea45 0e06 	orr.w	lr, r5, r6
   15880:	e68d      	b.n	1559e <__aeabi_dmul+0xde>
   15882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   15886:	ea94 0f0c 	teq	r4, ip
   1588a:	bf08      	it	eq
   1588c:	ea95 0f0c 	teqeq	r5, ip
   15890:	f43f af3b 	beq.w	1570a <__aeabi_dmul+0x24a>
   15894:	ea94 0f0c 	teq	r4, ip
   15898:	d10a      	bne.n	158b0 <__aeabi_ddiv+0x19c>
   1589a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1589e:	f47f af34 	bne.w	1570a <__aeabi_dmul+0x24a>
   158a2:	ea95 0f0c 	teq	r5, ip
   158a6:	f47f af25 	bne.w	156f4 <__aeabi_dmul+0x234>
   158aa:	4610      	mov	r0, r2
   158ac:	4619      	mov	r1, r3
   158ae:	e72c      	b.n	1570a <__aeabi_dmul+0x24a>
   158b0:	ea95 0f0c 	teq	r5, ip
   158b4:	d106      	bne.n	158c4 <__aeabi_ddiv+0x1b0>
   158b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   158ba:	f43f aefd 	beq.w	156b8 <__aeabi_dmul+0x1f8>
   158be:	4610      	mov	r0, r2
   158c0:	4619      	mov	r1, r3
   158c2:	e722      	b.n	1570a <__aeabi_dmul+0x24a>
   158c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   158c8:	bf18      	it	ne
   158ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   158ce:	f47f aec5 	bne.w	1565c <__aeabi_dmul+0x19c>
   158d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   158d6:	f47f af0d 	bne.w	156f4 <__aeabi_dmul+0x234>
   158da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   158de:	f47f aeeb 	bne.w	156b8 <__aeabi_dmul+0x1f8>
   158e2:	e712      	b.n	1570a <__aeabi_dmul+0x24a>

000158e4 <__gedf2>:
   158e4:	f04f 3cff 	mov.w	ip, #4294967295
   158e8:	e006      	b.n	158f8 <__cmpdf2+0x4>
   158ea:	bf00      	nop

000158ec <__ledf2>:
   158ec:	f04f 0c01 	mov.w	ip, #1
   158f0:	e002      	b.n	158f8 <__cmpdf2+0x4>
   158f2:	bf00      	nop

000158f4 <__cmpdf2>:
   158f4:	f04f 0c01 	mov.w	ip, #1
   158f8:	f84d cd04 	str.w	ip, [sp, #-4]!
   158fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   15900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   15904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   15908:	bf18      	it	ne
   1590a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1590e:	d01b      	beq.n	15948 <__cmpdf2+0x54>
   15910:	b001      	add	sp, #4
   15912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   15916:	bf0c      	ite	eq
   15918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1591c:	ea91 0f03 	teqne	r1, r3
   15920:	bf02      	ittt	eq
   15922:	ea90 0f02 	teqeq	r0, r2
   15926:	2000      	moveq	r0, #0
   15928:	4770      	bxeq	lr
   1592a:	f110 0f00 	cmn.w	r0, #0
   1592e:	ea91 0f03 	teq	r1, r3
   15932:	bf58      	it	pl
   15934:	4299      	cmppl	r1, r3
   15936:	bf08      	it	eq
   15938:	4290      	cmpeq	r0, r2
   1593a:	bf2c      	ite	cs
   1593c:	17d8      	asrcs	r0, r3, #31
   1593e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   15942:	f040 0001 	orr.w	r0, r0, #1
   15946:	4770      	bx	lr
   15948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1594c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   15950:	d102      	bne.n	15958 <__cmpdf2+0x64>
   15952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   15956:	d107      	bne.n	15968 <__cmpdf2+0x74>
   15958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1595c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   15960:	d1d6      	bne.n	15910 <__cmpdf2+0x1c>
   15962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   15966:	d0d3      	beq.n	15910 <__cmpdf2+0x1c>
   15968:	f85d 0b04 	ldr.w	r0, [sp], #4
   1596c:	4770      	bx	lr
   1596e:	bf00      	nop

00015970 <__aeabi_cdrcmple>:
   15970:	4684      	mov	ip, r0
   15972:	4610      	mov	r0, r2
   15974:	4662      	mov	r2, ip
   15976:	468c      	mov	ip, r1
   15978:	4619      	mov	r1, r3
   1597a:	4663      	mov	r3, ip
   1597c:	e000      	b.n	15980 <__aeabi_cdcmpeq>
   1597e:	bf00      	nop

00015980 <__aeabi_cdcmpeq>:
   15980:	b501      	push	{r0, lr}
   15982:	f7ff ffb7 	bl	158f4 <__cmpdf2>
   15986:	2800      	cmp	r0, #0
   15988:	bf48      	it	mi
   1598a:	f110 0f00 	cmnmi.w	r0, #0
   1598e:	bd01      	pop	{r0, pc}

00015990 <__aeabi_dcmpeq>:
   15990:	f84d ed08 	str.w	lr, [sp, #-8]!
   15994:	f7ff fff4 	bl	15980 <__aeabi_cdcmpeq>
   15998:	bf0c      	ite	eq
   1599a:	2001      	moveq	r0, #1
   1599c:	2000      	movne	r0, #0
   1599e:	f85d fb08 	ldr.w	pc, [sp], #8
   159a2:	bf00      	nop

000159a4 <__aeabi_dcmplt>:
   159a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   159a8:	f7ff ffea 	bl	15980 <__aeabi_cdcmpeq>
   159ac:	bf34      	ite	cc
   159ae:	2001      	movcc	r0, #1
   159b0:	2000      	movcs	r0, #0
   159b2:	f85d fb08 	ldr.w	pc, [sp], #8
   159b6:	bf00      	nop

000159b8 <__aeabi_dcmple>:
   159b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   159bc:	f7ff ffe0 	bl	15980 <__aeabi_cdcmpeq>
   159c0:	bf94      	ite	ls
   159c2:	2001      	movls	r0, #1
   159c4:	2000      	movhi	r0, #0
   159c6:	f85d fb08 	ldr.w	pc, [sp], #8
   159ca:	bf00      	nop

000159cc <__aeabi_dcmpge>:
   159cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   159d0:	f7ff ffce 	bl	15970 <__aeabi_cdrcmple>
   159d4:	bf94      	ite	ls
   159d6:	2001      	movls	r0, #1
   159d8:	2000      	movhi	r0, #0
   159da:	f85d fb08 	ldr.w	pc, [sp], #8
   159de:	bf00      	nop

000159e0 <__aeabi_dcmpgt>:
   159e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   159e4:	f7ff ffc4 	bl	15970 <__aeabi_cdrcmple>
   159e8:	bf34      	ite	cc
   159ea:	2001      	movcc	r0, #1
   159ec:	2000      	movcs	r0, #0
   159ee:	f85d fb08 	ldr.w	pc, [sp], #8
   159f2:	bf00      	nop

000159f4 <__aeabi_d2iz>:
   159f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   159f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   159fc:	d215      	bcs.n	15a2a <__aeabi_d2iz+0x36>
   159fe:	d511      	bpl.n	15a24 <__aeabi_d2iz+0x30>
   15a00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   15a04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   15a08:	d912      	bls.n	15a30 <__aeabi_d2iz+0x3c>
   15a0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   15a0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   15a12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   15a16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   15a1a:	fa23 f002 	lsr.w	r0, r3, r2
   15a1e:	bf18      	it	ne
   15a20:	4240      	negne	r0, r0
   15a22:	4770      	bx	lr
   15a24:	f04f 0000 	mov.w	r0, #0
   15a28:	4770      	bx	lr
   15a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   15a2e:	d105      	bne.n	15a3c <__aeabi_d2iz+0x48>
   15a30:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   15a34:	bf08      	it	eq
   15a36:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   15a3a:	4770      	bx	lr
   15a3c:	f04f 0000 	mov.w	r0, #0
   15a40:	4770      	bx	lr
   15a42:	bf00      	nop

00015a44 <__aeabi_d2uiz>:
   15a44:	004a      	lsls	r2, r1, #1
   15a46:	d211      	bcs.n	15a6c <__aeabi_d2uiz+0x28>
   15a48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   15a4c:	d211      	bcs.n	15a72 <__aeabi_d2uiz+0x2e>
   15a4e:	d50d      	bpl.n	15a6c <__aeabi_d2uiz+0x28>
   15a50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   15a54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   15a58:	d40e      	bmi.n	15a78 <__aeabi_d2uiz+0x34>
   15a5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   15a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   15a62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   15a66:	fa23 f002 	lsr.w	r0, r3, r2
   15a6a:	4770      	bx	lr
   15a6c:	f04f 0000 	mov.w	r0, #0
   15a70:	4770      	bx	lr
   15a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   15a76:	d102      	bne.n	15a7e <__aeabi_d2uiz+0x3a>
   15a78:	f04f 30ff 	mov.w	r0, #4294967295
   15a7c:	4770      	bx	lr
   15a7e:	f04f 0000 	mov.w	r0, #0
   15a82:	4770      	bx	lr

00015a84 <__aeabi_d2f>:
   15a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
   15a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   15a8c:	bf24      	itt	cs
   15a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   15a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   15a96:	d90d      	bls.n	15ab4 <__aeabi_d2f+0x30>
   15a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   15a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   15aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   15aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   15aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   15aac:	bf08      	it	eq
   15aae:	f020 0001 	biceq.w	r0, r0, #1
   15ab2:	4770      	bx	lr
   15ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   15ab8:	d121      	bne.n	15afe <__aeabi_d2f+0x7a>
   15aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   15abe:	bfbc      	itt	lt
   15ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   15ac4:	4770      	bxlt	lr
   15ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   15aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
   15ace:	f1c2 0218 	rsb	r2, r2, #24
   15ad2:	f1c2 0c20 	rsb	ip, r2, #32
   15ad6:	fa10 f30c 	lsls.w	r3, r0, ip
   15ada:	fa20 f002 	lsr.w	r0, r0, r2
   15ade:	bf18      	it	ne
   15ae0:	f040 0001 	orrne.w	r0, r0, #1
   15ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   15ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   15aec:	fa03 fc0c 	lsl.w	ip, r3, ip
   15af0:	ea40 000c 	orr.w	r0, r0, ip
   15af4:	fa23 f302 	lsr.w	r3, r3, r2
   15af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   15afc:	e7cc      	b.n	15a98 <__aeabi_d2f+0x14>
   15afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
   15b02:	d107      	bne.n	15b14 <__aeabi_d2f+0x90>
   15b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   15b08:	bf1e      	ittt	ne
   15b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   15b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   15b12:	4770      	bxne	lr
   15b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   15b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   15b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   15b20:	4770      	bx	lr
   15b22:	bf00      	nop

00015b24 <__aeabi_frsub>:
   15b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   15b28:	e002      	b.n	15b30 <__addsf3>
   15b2a:	bf00      	nop

00015b2c <__aeabi_fsub>:
   15b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00015b30 <__addsf3>:
   15b30:	0042      	lsls	r2, r0, #1
   15b32:	bf1f      	itttt	ne
   15b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   15b38:	ea92 0f03 	teqne	r2, r3
   15b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   15b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   15b44:	d06a      	beq.n	15c1c <__addsf3+0xec>
   15b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
   15b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   15b4e:	bfc1      	itttt	gt
   15b50:	18d2      	addgt	r2, r2, r3
   15b52:	4041      	eorgt	r1, r0
   15b54:	4048      	eorgt	r0, r1
   15b56:	4041      	eorgt	r1, r0
   15b58:	bfb8      	it	lt
   15b5a:	425b      	neglt	r3, r3
   15b5c:	2b19      	cmp	r3, #25
   15b5e:	bf88      	it	hi
   15b60:	4770      	bxhi	lr
   15b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   15b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   15b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   15b6e:	bf18      	it	ne
   15b70:	4240      	negne	r0, r0
   15b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   15b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   15b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   15b7e:	bf18      	it	ne
   15b80:	4249      	negne	r1, r1
   15b82:	ea92 0f03 	teq	r2, r3
   15b86:	d03f      	beq.n	15c08 <__addsf3+0xd8>
   15b88:	f1a2 0201 	sub.w	r2, r2, #1
   15b8c:	fa41 fc03 	asr.w	ip, r1, r3
   15b90:	eb10 000c 	adds.w	r0, r0, ip
   15b94:	f1c3 0320 	rsb	r3, r3, #32
   15b98:	fa01 f103 	lsl.w	r1, r1, r3
   15b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   15ba0:	d502      	bpl.n	15ba8 <__addsf3+0x78>
   15ba2:	4249      	negs	r1, r1
   15ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   15ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   15bac:	d313      	bcc.n	15bd6 <__addsf3+0xa6>
   15bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   15bb2:	d306      	bcc.n	15bc2 <__addsf3+0x92>
   15bb4:	0840      	lsrs	r0, r0, #1
   15bb6:	ea4f 0131 	mov.w	r1, r1, rrx
   15bba:	f102 0201 	add.w	r2, r2, #1
   15bbe:	2afe      	cmp	r2, #254	; 0xfe
   15bc0:	d251      	bcs.n	15c66 <__addsf3+0x136>
   15bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   15bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   15bca:	bf08      	it	eq
   15bcc:	f020 0001 	biceq.w	r0, r0, #1
   15bd0:	ea40 0003 	orr.w	r0, r0, r3
   15bd4:	4770      	bx	lr
   15bd6:	0049      	lsls	r1, r1, #1
   15bd8:	eb40 0000 	adc.w	r0, r0, r0
   15bdc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   15be0:	f1a2 0201 	sub.w	r2, r2, #1
   15be4:	d1ed      	bne.n	15bc2 <__addsf3+0x92>
   15be6:	fab0 fc80 	clz	ip, r0
   15bea:	f1ac 0c08 	sub.w	ip, ip, #8
   15bee:	ebb2 020c 	subs.w	r2, r2, ip
   15bf2:	fa00 f00c 	lsl.w	r0, r0, ip
   15bf6:	bfaa      	itet	ge
   15bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   15bfc:	4252      	neglt	r2, r2
   15bfe:	4318      	orrge	r0, r3
   15c00:	bfbc      	itt	lt
   15c02:	40d0      	lsrlt	r0, r2
   15c04:	4318      	orrlt	r0, r3
   15c06:	4770      	bx	lr
   15c08:	f092 0f00 	teq	r2, #0
   15c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   15c10:	bf06      	itte	eq
   15c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   15c16:	3201      	addeq	r2, #1
   15c18:	3b01      	subne	r3, #1
   15c1a:	e7b5      	b.n	15b88 <__addsf3+0x58>
   15c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   15c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   15c24:	bf18      	it	ne
   15c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   15c2a:	d021      	beq.n	15c70 <__addsf3+0x140>
   15c2c:	ea92 0f03 	teq	r2, r3
   15c30:	d004      	beq.n	15c3c <__addsf3+0x10c>
   15c32:	f092 0f00 	teq	r2, #0
   15c36:	bf08      	it	eq
   15c38:	4608      	moveq	r0, r1
   15c3a:	4770      	bx	lr
   15c3c:	ea90 0f01 	teq	r0, r1
   15c40:	bf1c      	itt	ne
   15c42:	2000      	movne	r0, #0
   15c44:	4770      	bxne	lr
   15c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   15c4a:	d104      	bne.n	15c56 <__addsf3+0x126>
   15c4c:	0040      	lsls	r0, r0, #1
   15c4e:	bf28      	it	cs
   15c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   15c54:	4770      	bx	lr
   15c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   15c5a:	bf3c      	itt	cc
   15c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   15c60:	4770      	bxcc	lr
   15c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   15c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   15c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   15c6e:	4770      	bx	lr
   15c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
   15c74:	bf16      	itet	ne
   15c76:	4608      	movne	r0, r1
   15c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   15c7c:	4601      	movne	r1, r0
   15c7e:	0242      	lsls	r2, r0, #9
   15c80:	bf06      	itte	eq
   15c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   15c86:	ea90 0f01 	teqeq	r0, r1
   15c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   15c8e:	4770      	bx	lr

00015c90 <__aeabi_ui2f>:
   15c90:	f04f 0300 	mov.w	r3, #0
   15c94:	e004      	b.n	15ca0 <__aeabi_i2f+0x8>
   15c96:	bf00      	nop

00015c98 <__aeabi_i2f>:
   15c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   15c9c:	bf48      	it	mi
   15c9e:	4240      	negmi	r0, r0
   15ca0:	ea5f 0c00 	movs.w	ip, r0
   15ca4:	bf08      	it	eq
   15ca6:	4770      	bxeq	lr
   15ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   15cac:	4601      	mov	r1, r0
   15cae:	f04f 0000 	mov.w	r0, #0
   15cb2:	e01c      	b.n	15cee <__aeabi_l2f+0x2a>

00015cb4 <__aeabi_ul2f>:
   15cb4:	ea50 0201 	orrs.w	r2, r0, r1
   15cb8:	bf08      	it	eq
   15cba:	4770      	bxeq	lr
   15cbc:	f04f 0300 	mov.w	r3, #0
   15cc0:	e00a      	b.n	15cd8 <__aeabi_l2f+0x14>
   15cc2:	bf00      	nop

00015cc4 <__aeabi_l2f>:
   15cc4:	ea50 0201 	orrs.w	r2, r0, r1
   15cc8:	bf08      	it	eq
   15cca:	4770      	bxeq	lr
   15ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   15cd0:	d502      	bpl.n	15cd8 <__aeabi_l2f+0x14>
   15cd2:	4240      	negs	r0, r0
   15cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   15cd8:	ea5f 0c01 	movs.w	ip, r1
   15cdc:	bf02      	ittt	eq
   15cde:	4684      	moveq	ip, r0
   15ce0:	4601      	moveq	r1, r0
   15ce2:	2000      	moveq	r0, #0
   15ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   15ce8:	bf08      	it	eq
   15cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   15cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   15cf2:	fabc f28c 	clz	r2, ip
   15cf6:	3a08      	subs	r2, #8
   15cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   15cfc:	db10      	blt.n	15d20 <__aeabi_l2f+0x5c>
   15cfe:	fa01 fc02 	lsl.w	ip, r1, r2
   15d02:	4463      	add	r3, ip
   15d04:	fa00 fc02 	lsl.w	ip, r0, r2
   15d08:	f1c2 0220 	rsb	r2, r2, #32
   15d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   15d10:	fa20 f202 	lsr.w	r2, r0, r2
   15d14:	eb43 0002 	adc.w	r0, r3, r2
   15d18:	bf08      	it	eq
   15d1a:	f020 0001 	biceq.w	r0, r0, #1
   15d1e:	4770      	bx	lr
   15d20:	f102 0220 	add.w	r2, r2, #32
   15d24:	fa01 fc02 	lsl.w	ip, r1, r2
   15d28:	f1c2 0220 	rsb	r2, r2, #32
   15d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   15d30:	fa21 f202 	lsr.w	r2, r1, r2
   15d34:	eb43 0002 	adc.w	r0, r3, r2
   15d38:	bf08      	it	eq
   15d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   15d3e:	4770      	bx	lr

00015d40 <__aeabi_fmul>:
   15d40:	f04f 0cff 	mov.w	ip, #255	; 0xff
   15d44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   15d48:	bf1e      	ittt	ne
   15d4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   15d4e:	ea92 0f0c 	teqne	r2, ip
   15d52:	ea93 0f0c 	teqne	r3, ip
   15d56:	d06f      	beq.n	15e38 <__aeabi_fmul+0xf8>
   15d58:	441a      	add	r2, r3
   15d5a:	ea80 0c01 	eor.w	ip, r0, r1
   15d5e:	0240      	lsls	r0, r0, #9
   15d60:	bf18      	it	ne
   15d62:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   15d66:	d01e      	beq.n	15da6 <__aeabi_fmul+0x66>
   15d68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   15d6c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   15d70:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   15d74:	fba0 3101 	umull	r3, r1, r0, r1
   15d78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   15d7c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   15d80:	bf3e      	ittt	cc
   15d82:	0049      	lslcc	r1, r1, #1
   15d84:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   15d88:	005b      	lslcc	r3, r3, #1
   15d8a:	ea40 0001 	orr.w	r0, r0, r1
   15d8e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   15d92:	2afd      	cmp	r2, #253	; 0xfd
   15d94:	d81d      	bhi.n	15dd2 <__aeabi_fmul+0x92>
   15d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   15d9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   15d9e:	bf08      	it	eq
   15da0:	f020 0001 	biceq.w	r0, r0, #1
   15da4:	4770      	bx	lr
   15da6:	f090 0f00 	teq	r0, #0
   15daa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   15dae:	bf08      	it	eq
   15db0:	0249      	lsleq	r1, r1, #9
   15db2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   15db6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   15dba:	3a7f      	subs	r2, #127	; 0x7f
   15dbc:	bfc2      	ittt	gt
   15dbe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   15dc2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   15dc6:	4770      	bxgt	lr
   15dc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   15dcc:	f04f 0300 	mov.w	r3, #0
   15dd0:	3a01      	subs	r2, #1
   15dd2:	dc5d      	bgt.n	15e90 <__aeabi_fmul+0x150>
   15dd4:	f112 0f19 	cmn.w	r2, #25
   15dd8:	bfdc      	itt	le
   15dda:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   15dde:	4770      	bxle	lr
   15de0:	f1c2 0200 	rsb	r2, r2, #0
   15de4:	0041      	lsls	r1, r0, #1
   15de6:	fa21 f102 	lsr.w	r1, r1, r2
   15dea:	f1c2 0220 	rsb	r2, r2, #32
   15dee:	fa00 fc02 	lsl.w	ip, r0, r2
   15df2:	ea5f 0031 	movs.w	r0, r1, rrx
   15df6:	f140 0000 	adc.w	r0, r0, #0
   15dfa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   15dfe:	bf08      	it	eq
   15e00:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   15e04:	4770      	bx	lr
   15e06:	f092 0f00 	teq	r2, #0
   15e0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   15e0e:	bf02      	ittt	eq
   15e10:	0040      	lsleq	r0, r0, #1
   15e12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   15e16:	3a01      	subeq	r2, #1
   15e18:	d0f9      	beq.n	15e0e <__aeabi_fmul+0xce>
   15e1a:	ea40 000c 	orr.w	r0, r0, ip
   15e1e:	f093 0f00 	teq	r3, #0
   15e22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   15e26:	bf02      	ittt	eq
   15e28:	0049      	lsleq	r1, r1, #1
   15e2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   15e2e:	3b01      	subeq	r3, #1
   15e30:	d0f9      	beq.n	15e26 <__aeabi_fmul+0xe6>
   15e32:	ea41 010c 	orr.w	r1, r1, ip
   15e36:	e78f      	b.n	15d58 <__aeabi_fmul+0x18>
   15e38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   15e3c:	ea92 0f0c 	teq	r2, ip
   15e40:	bf18      	it	ne
   15e42:	ea93 0f0c 	teqne	r3, ip
   15e46:	d00a      	beq.n	15e5e <__aeabi_fmul+0x11e>
   15e48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   15e4c:	bf18      	it	ne
   15e4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   15e52:	d1d8      	bne.n	15e06 <__aeabi_fmul+0xc6>
   15e54:	ea80 0001 	eor.w	r0, r0, r1
   15e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   15e5c:	4770      	bx	lr
   15e5e:	f090 0f00 	teq	r0, #0
   15e62:	bf17      	itett	ne
   15e64:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   15e68:	4608      	moveq	r0, r1
   15e6a:	f091 0f00 	teqne	r1, #0
   15e6e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   15e72:	d014      	beq.n	15e9e <__aeabi_fmul+0x15e>
   15e74:	ea92 0f0c 	teq	r2, ip
   15e78:	d101      	bne.n	15e7e <__aeabi_fmul+0x13e>
   15e7a:	0242      	lsls	r2, r0, #9
   15e7c:	d10f      	bne.n	15e9e <__aeabi_fmul+0x15e>
   15e7e:	ea93 0f0c 	teq	r3, ip
   15e82:	d103      	bne.n	15e8c <__aeabi_fmul+0x14c>
   15e84:	024b      	lsls	r3, r1, #9
   15e86:	bf18      	it	ne
   15e88:	4608      	movne	r0, r1
   15e8a:	d108      	bne.n	15e9e <__aeabi_fmul+0x15e>
   15e8c:	ea80 0001 	eor.w	r0, r0, r1
   15e90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   15e94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   15e98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   15e9c:	4770      	bx	lr
   15e9e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   15ea2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   15ea6:	4770      	bx	lr

00015ea8 <__aeabi_fdiv>:
   15ea8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   15eac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   15eb0:	bf1e      	ittt	ne
   15eb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   15eb6:	ea92 0f0c 	teqne	r2, ip
   15eba:	ea93 0f0c 	teqne	r3, ip
   15ebe:	d069      	beq.n	15f94 <__aeabi_fdiv+0xec>
   15ec0:	eba2 0203 	sub.w	r2, r2, r3
   15ec4:	ea80 0c01 	eor.w	ip, r0, r1
   15ec8:	0249      	lsls	r1, r1, #9
   15eca:	ea4f 2040 	mov.w	r0, r0, lsl #9
   15ece:	d037      	beq.n	15f40 <__aeabi_fdiv+0x98>
   15ed0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   15ed4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   15ed8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   15edc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   15ee0:	428b      	cmp	r3, r1
   15ee2:	bf38      	it	cc
   15ee4:	005b      	lslcc	r3, r3, #1
   15ee6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   15eea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   15eee:	428b      	cmp	r3, r1
   15ef0:	bf24      	itt	cs
   15ef2:	1a5b      	subcs	r3, r3, r1
   15ef4:	ea40 000c 	orrcs.w	r0, r0, ip
   15ef8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   15efc:	bf24      	itt	cs
   15efe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   15f02:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   15f06:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   15f0a:	bf24      	itt	cs
   15f0c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   15f10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   15f14:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   15f18:	bf24      	itt	cs
   15f1a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   15f1e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   15f22:	011b      	lsls	r3, r3, #4
   15f24:	bf18      	it	ne
   15f26:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   15f2a:	d1e0      	bne.n	15eee <__aeabi_fdiv+0x46>
   15f2c:	2afd      	cmp	r2, #253	; 0xfd
   15f2e:	f63f af50 	bhi.w	15dd2 <__aeabi_fmul+0x92>
   15f32:	428b      	cmp	r3, r1
   15f34:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   15f38:	bf08      	it	eq
   15f3a:	f020 0001 	biceq.w	r0, r0, #1
   15f3e:	4770      	bx	lr
   15f40:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   15f44:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   15f48:	327f      	adds	r2, #127	; 0x7f
   15f4a:	bfc2      	ittt	gt
   15f4c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   15f50:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   15f54:	4770      	bxgt	lr
   15f56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   15f5a:	f04f 0300 	mov.w	r3, #0
   15f5e:	3a01      	subs	r2, #1
   15f60:	e737      	b.n	15dd2 <__aeabi_fmul+0x92>
   15f62:	f092 0f00 	teq	r2, #0
   15f66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   15f6a:	bf02      	ittt	eq
   15f6c:	0040      	lsleq	r0, r0, #1
   15f6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   15f72:	3a01      	subeq	r2, #1
   15f74:	d0f9      	beq.n	15f6a <__aeabi_fdiv+0xc2>
   15f76:	ea40 000c 	orr.w	r0, r0, ip
   15f7a:	f093 0f00 	teq	r3, #0
   15f7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   15f82:	bf02      	ittt	eq
   15f84:	0049      	lsleq	r1, r1, #1
   15f86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   15f8a:	3b01      	subeq	r3, #1
   15f8c:	d0f9      	beq.n	15f82 <__aeabi_fdiv+0xda>
   15f8e:	ea41 010c 	orr.w	r1, r1, ip
   15f92:	e795      	b.n	15ec0 <__aeabi_fdiv+0x18>
   15f94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   15f98:	ea92 0f0c 	teq	r2, ip
   15f9c:	d108      	bne.n	15fb0 <__aeabi_fdiv+0x108>
   15f9e:	0242      	lsls	r2, r0, #9
   15fa0:	f47f af7d 	bne.w	15e9e <__aeabi_fmul+0x15e>
   15fa4:	ea93 0f0c 	teq	r3, ip
   15fa8:	f47f af70 	bne.w	15e8c <__aeabi_fmul+0x14c>
   15fac:	4608      	mov	r0, r1
   15fae:	e776      	b.n	15e9e <__aeabi_fmul+0x15e>
   15fb0:	ea93 0f0c 	teq	r3, ip
   15fb4:	d104      	bne.n	15fc0 <__aeabi_fdiv+0x118>
   15fb6:	024b      	lsls	r3, r1, #9
   15fb8:	f43f af4c 	beq.w	15e54 <__aeabi_fmul+0x114>
   15fbc:	4608      	mov	r0, r1
   15fbe:	e76e      	b.n	15e9e <__aeabi_fmul+0x15e>
   15fc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   15fc4:	bf18      	it	ne
   15fc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   15fca:	d1ca      	bne.n	15f62 <__aeabi_fdiv+0xba>
   15fcc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   15fd0:	f47f af5c 	bne.w	15e8c <__aeabi_fmul+0x14c>
   15fd4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   15fd8:	f47f af3c 	bne.w	15e54 <__aeabi_fmul+0x114>
   15fdc:	e75f      	b.n	15e9e <__aeabi_fmul+0x15e>
   15fde:	bf00      	nop

00015fe0 <__gesf2>:
   15fe0:	f04f 3cff 	mov.w	ip, #4294967295
   15fe4:	e006      	b.n	15ff4 <__cmpsf2+0x4>
   15fe6:	bf00      	nop

00015fe8 <__lesf2>:
   15fe8:	f04f 0c01 	mov.w	ip, #1
   15fec:	e002      	b.n	15ff4 <__cmpsf2+0x4>
   15fee:	bf00      	nop

00015ff0 <__cmpsf2>:
   15ff0:	f04f 0c01 	mov.w	ip, #1
   15ff4:	f84d cd04 	str.w	ip, [sp, #-4]!
   15ff8:	ea4f 0240 	mov.w	r2, r0, lsl #1
   15ffc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   16000:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   16004:	bf18      	it	ne
   16006:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1600a:	d011      	beq.n	16030 <__cmpsf2+0x40>
   1600c:	b001      	add	sp, #4
   1600e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   16012:	bf18      	it	ne
   16014:	ea90 0f01 	teqne	r0, r1
   16018:	bf58      	it	pl
   1601a:	ebb2 0003 	subspl.w	r0, r2, r3
   1601e:	bf88      	it	hi
   16020:	17c8      	asrhi	r0, r1, #31
   16022:	bf38      	it	cc
   16024:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   16028:	bf18      	it	ne
   1602a:	f040 0001 	orrne.w	r0, r0, #1
   1602e:	4770      	bx	lr
   16030:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   16034:	d102      	bne.n	1603c <__cmpsf2+0x4c>
   16036:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1603a:	d105      	bne.n	16048 <__cmpsf2+0x58>
   1603c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   16040:	d1e4      	bne.n	1600c <__cmpsf2+0x1c>
   16042:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   16046:	d0e1      	beq.n	1600c <__cmpsf2+0x1c>
   16048:	f85d 0b04 	ldr.w	r0, [sp], #4
   1604c:	4770      	bx	lr
   1604e:	bf00      	nop

00016050 <__aeabi_cfrcmple>:
   16050:	4684      	mov	ip, r0
   16052:	4608      	mov	r0, r1
   16054:	4661      	mov	r1, ip
   16056:	e7ff      	b.n	16058 <__aeabi_cfcmpeq>

00016058 <__aeabi_cfcmpeq>:
   16058:	b50f      	push	{r0, r1, r2, r3, lr}
   1605a:	f7ff ffc9 	bl	15ff0 <__cmpsf2>
   1605e:	2800      	cmp	r0, #0
   16060:	bf48      	it	mi
   16062:	f110 0f00 	cmnmi.w	r0, #0
   16066:	bd0f      	pop	{r0, r1, r2, r3, pc}

00016068 <__aeabi_fcmpeq>:
   16068:	f84d ed08 	str.w	lr, [sp, #-8]!
   1606c:	f7ff fff4 	bl	16058 <__aeabi_cfcmpeq>
   16070:	bf0c      	ite	eq
   16072:	2001      	moveq	r0, #1
   16074:	2000      	movne	r0, #0
   16076:	f85d fb08 	ldr.w	pc, [sp], #8
   1607a:	bf00      	nop

0001607c <__aeabi_fcmplt>:
   1607c:	f84d ed08 	str.w	lr, [sp, #-8]!
   16080:	f7ff ffea 	bl	16058 <__aeabi_cfcmpeq>
   16084:	bf34      	ite	cc
   16086:	2001      	movcc	r0, #1
   16088:	2000      	movcs	r0, #0
   1608a:	f85d fb08 	ldr.w	pc, [sp], #8
   1608e:	bf00      	nop

00016090 <__aeabi_fcmple>:
   16090:	f84d ed08 	str.w	lr, [sp, #-8]!
   16094:	f7ff ffe0 	bl	16058 <__aeabi_cfcmpeq>
   16098:	bf94      	ite	ls
   1609a:	2001      	movls	r0, #1
   1609c:	2000      	movhi	r0, #0
   1609e:	f85d fb08 	ldr.w	pc, [sp], #8
   160a2:	bf00      	nop

000160a4 <__aeabi_fcmpge>:
   160a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   160a8:	f7ff ffd2 	bl	16050 <__aeabi_cfrcmple>
   160ac:	bf94      	ite	ls
   160ae:	2001      	movls	r0, #1
   160b0:	2000      	movhi	r0, #0
   160b2:	f85d fb08 	ldr.w	pc, [sp], #8
   160b6:	bf00      	nop

000160b8 <__aeabi_fcmpgt>:
   160b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   160bc:	f7ff ffc8 	bl	16050 <__aeabi_cfrcmple>
   160c0:	bf34      	ite	cc
   160c2:	2001      	movcc	r0, #1
   160c4:	2000      	movcs	r0, #0
   160c6:	f85d fb08 	ldr.w	pc, [sp], #8
   160ca:	bf00      	nop

000160cc <__aeabi_f2iz>:
   160cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
   160d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   160d4:	d30f      	bcc.n	160f6 <__aeabi_f2iz+0x2a>
   160d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
   160da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   160de:	d90d      	bls.n	160fc <__aeabi_f2iz+0x30>
   160e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
   160e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   160e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   160ec:	fa23 f002 	lsr.w	r0, r3, r2
   160f0:	bf18      	it	ne
   160f2:	4240      	negne	r0, r0
   160f4:	4770      	bx	lr
   160f6:	f04f 0000 	mov.w	r0, #0
   160fa:	4770      	bx	lr
   160fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
   16100:	d101      	bne.n	16106 <__aeabi_f2iz+0x3a>
   16102:	0242      	lsls	r2, r0, #9
   16104:	d105      	bne.n	16112 <__aeabi_f2iz+0x46>
   16106:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   1610a:	bf08      	it	eq
   1610c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   16110:	4770      	bx	lr
   16112:	f04f 0000 	mov.w	r0, #0
   16116:	4770      	bx	lr

00016118 <__aeabi_uldivmod>:
   16118:	b953      	cbnz	r3, 16130 <__aeabi_uldivmod+0x18>
   1611a:	b94a      	cbnz	r2, 16130 <__aeabi_uldivmod+0x18>
   1611c:	2900      	cmp	r1, #0
   1611e:	bf08      	it	eq
   16120:	2800      	cmpeq	r0, #0
   16122:	bf1c      	itt	ne
   16124:	f04f 31ff 	movne.w	r1, #4294967295
   16128:	f04f 30ff 	movne.w	r0, #4294967295
   1612c:	f001 b934 	b.w	17398 <__aeabi_idiv0>
   16130:	f1ad 0c08 	sub.w	ip, sp, #8
   16134:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   16138:	f000 f844 	bl	161c4 <__udivmoddi4>
   1613c:	f8dd e004 	ldr.w	lr, [sp, #4]
   16140:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   16144:	b004      	add	sp, #16
   16146:	4770      	bx	lr

00016148 <__aeabi_d2lz>:
   16148:	b538      	push	{r3, r4, r5, lr}
   1614a:	4605      	mov	r5, r0
   1614c:	460c      	mov	r4, r1
   1614e:	4628      	mov	r0, r5
   16150:	4621      	mov	r1, r4
   16152:	2200      	movs	r2, #0
   16154:	2300      	movs	r3, #0
   16156:	f7ff fc25 	bl	159a4 <__aeabi_dcmplt>
   1615a:	b928      	cbnz	r0, 16168 <__aeabi_d2lz+0x20>
   1615c:	4628      	mov	r0, r5
   1615e:	4621      	mov	r1, r4
   16160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16164:	f000 b80a 	b.w	1617c <__aeabi_d2ulz>
   16168:	4628      	mov	r0, r5
   1616a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   1616e:	f000 f805 	bl	1617c <__aeabi_d2ulz>
   16172:	4240      	negs	r0, r0
   16174:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   16178:	bd38      	pop	{r3, r4, r5, pc}
   1617a:	bf00      	nop

0001617c <__aeabi_d2ulz>:
   1617c:	b5d0      	push	{r4, r6, r7, lr}
   1617e:	2200      	movs	r2, #0
   16180:	4b0e      	ldr	r3, [pc, #56]	; (161bc <__aeabi_d2ulz+0x40>)
   16182:	4606      	mov	r6, r0
   16184:	460f      	mov	r7, r1
   16186:	f7ff f99b 	bl	154c0 <__aeabi_dmul>
   1618a:	f7ff fc5b 	bl	15a44 <__aeabi_d2uiz>
   1618e:	4604      	mov	r4, r0
   16190:	f7ff f920 	bl	153d4 <__aeabi_ui2d>
   16194:	2200      	movs	r2, #0
   16196:	4b0a      	ldr	r3, [pc, #40]	; (161c0 <__aeabi_d2ulz+0x44>)
   16198:	f7ff f992 	bl	154c0 <__aeabi_dmul>
   1619c:	4602      	mov	r2, r0
   1619e:	460b      	mov	r3, r1
   161a0:	4630      	mov	r0, r6
   161a2:	4639      	mov	r1, r7
   161a4:	f7fe ffd8 	bl	15158 <__aeabi_dsub>
   161a8:	f7ff fc4c 	bl	15a44 <__aeabi_d2uiz>
   161ac:	4623      	mov	r3, r4
   161ae:	2200      	movs	r2, #0
   161b0:	ea42 0200 	orr.w	r2, r2, r0
   161b4:	4610      	mov	r0, r2
   161b6:	4619      	mov	r1, r3
   161b8:	bdd0      	pop	{r4, r6, r7, pc}
   161ba:	bf00      	nop
   161bc:	3df00000 	.word	0x3df00000
   161c0:	41f00000 	.word	0x41f00000

000161c4 <__udivmoddi4>:
   161c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   161c8:	468c      	mov	ip, r1
   161ca:	460d      	mov	r5, r1
   161cc:	4604      	mov	r4, r0
   161ce:	9e08      	ldr	r6, [sp, #32]
   161d0:	2b00      	cmp	r3, #0
   161d2:	d151      	bne.n	16278 <__udivmoddi4+0xb4>
   161d4:	428a      	cmp	r2, r1
   161d6:	4617      	mov	r7, r2
   161d8:	d96d      	bls.n	162b6 <__udivmoddi4+0xf2>
   161da:	fab2 fe82 	clz	lr, r2
   161de:	f1be 0f00 	cmp.w	lr, #0
   161e2:	d00b      	beq.n	161fc <__udivmoddi4+0x38>
   161e4:	f1ce 0c20 	rsb	ip, lr, #32
   161e8:	fa01 f50e 	lsl.w	r5, r1, lr
   161ec:	fa20 fc0c 	lsr.w	ip, r0, ip
   161f0:	fa02 f70e 	lsl.w	r7, r2, lr
   161f4:	ea4c 0c05 	orr.w	ip, ip, r5
   161f8:	fa00 f40e 	lsl.w	r4, r0, lr
   161fc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   16200:	0c25      	lsrs	r5, r4, #16
   16202:	fbbc f8fa 	udiv	r8, ip, sl
   16206:	fa1f f987 	uxth.w	r9, r7
   1620a:	fb0a cc18 	mls	ip, sl, r8, ip
   1620e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   16212:	fb08 f309 	mul.w	r3, r8, r9
   16216:	42ab      	cmp	r3, r5
   16218:	d90a      	bls.n	16230 <__udivmoddi4+0x6c>
   1621a:	19ed      	adds	r5, r5, r7
   1621c:	f108 32ff 	add.w	r2, r8, #4294967295
   16220:	f080 8123 	bcs.w	1646a <__udivmoddi4+0x2a6>
   16224:	42ab      	cmp	r3, r5
   16226:	f240 8120 	bls.w	1646a <__udivmoddi4+0x2a6>
   1622a:	f1a8 0802 	sub.w	r8, r8, #2
   1622e:	443d      	add	r5, r7
   16230:	1aed      	subs	r5, r5, r3
   16232:	b2a4      	uxth	r4, r4
   16234:	fbb5 f0fa 	udiv	r0, r5, sl
   16238:	fb0a 5510 	mls	r5, sl, r0, r5
   1623c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   16240:	fb00 f909 	mul.w	r9, r0, r9
   16244:	45a1      	cmp	r9, r4
   16246:	d909      	bls.n	1625c <__udivmoddi4+0x98>
   16248:	19e4      	adds	r4, r4, r7
   1624a:	f100 33ff 	add.w	r3, r0, #4294967295
   1624e:	f080 810a 	bcs.w	16466 <__udivmoddi4+0x2a2>
   16252:	45a1      	cmp	r9, r4
   16254:	f240 8107 	bls.w	16466 <__udivmoddi4+0x2a2>
   16258:	3802      	subs	r0, #2
   1625a:	443c      	add	r4, r7
   1625c:	eba4 0409 	sub.w	r4, r4, r9
   16260:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   16264:	2100      	movs	r1, #0
   16266:	2e00      	cmp	r6, #0
   16268:	d061      	beq.n	1632e <__udivmoddi4+0x16a>
   1626a:	fa24 f40e 	lsr.w	r4, r4, lr
   1626e:	2300      	movs	r3, #0
   16270:	6034      	str	r4, [r6, #0]
   16272:	6073      	str	r3, [r6, #4]
   16274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16278:	428b      	cmp	r3, r1
   1627a:	d907      	bls.n	1628c <__udivmoddi4+0xc8>
   1627c:	2e00      	cmp	r6, #0
   1627e:	d054      	beq.n	1632a <__udivmoddi4+0x166>
   16280:	2100      	movs	r1, #0
   16282:	e886 0021 	stmia.w	r6, {r0, r5}
   16286:	4608      	mov	r0, r1
   16288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1628c:	fab3 f183 	clz	r1, r3
   16290:	2900      	cmp	r1, #0
   16292:	f040 808e 	bne.w	163b2 <__udivmoddi4+0x1ee>
   16296:	42ab      	cmp	r3, r5
   16298:	d302      	bcc.n	162a0 <__udivmoddi4+0xdc>
   1629a:	4282      	cmp	r2, r0
   1629c:	f200 80fa 	bhi.w	16494 <__udivmoddi4+0x2d0>
   162a0:	1a84      	subs	r4, r0, r2
   162a2:	eb65 0503 	sbc.w	r5, r5, r3
   162a6:	2001      	movs	r0, #1
   162a8:	46ac      	mov	ip, r5
   162aa:	2e00      	cmp	r6, #0
   162ac:	d03f      	beq.n	1632e <__udivmoddi4+0x16a>
   162ae:	e886 1010 	stmia.w	r6, {r4, ip}
   162b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   162b6:	b912      	cbnz	r2, 162be <__udivmoddi4+0xfa>
   162b8:	2701      	movs	r7, #1
   162ba:	fbb7 f7f2 	udiv	r7, r7, r2
   162be:	fab7 fe87 	clz	lr, r7
   162c2:	f1be 0f00 	cmp.w	lr, #0
   162c6:	d134      	bne.n	16332 <__udivmoddi4+0x16e>
   162c8:	1beb      	subs	r3, r5, r7
   162ca:	0c3a      	lsrs	r2, r7, #16
   162cc:	fa1f fc87 	uxth.w	ip, r7
   162d0:	2101      	movs	r1, #1
   162d2:	fbb3 f8f2 	udiv	r8, r3, r2
   162d6:	0c25      	lsrs	r5, r4, #16
   162d8:	fb02 3318 	mls	r3, r2, r8, r3
   162dc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   162e0:	fb0c f308 	mul.w	r3, ip, r8
   162e4:	42ab      	cmp	r3, r5
   162e6:	d907      	bls.n	162f8 <__udivmoddi4+0x134>
   162e8:	19ed      	adds	r5, r5, r7
   162ea:	f108 30ff 	add.w	r0, r8, #4294967295
   162ee:	d202      	bcs.n	162f6 <__udivmoddi4+0x132>
   162f0:	42ab      	cmp	r3, r5
   162f2:	f200 80d1 	bhi.w	16498 <__udivmoddi4+0x2d4>
   162f6:	4680      	mov	r8, r0
   162f8:	1aed      	subs	r5, r5, r3
   162fa:	b2a3      	uxth	r3, r4
   162fc:	fbb5 f0f2 	udiv	r0, r5, r2
   16300:	fb02 5510 	mls	r5, r2, r0, r5
   16304:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   16308:	fb0c fc00 	mul.w	ip, ip, r0
   1630c:	45a4      	cmp	ip, r4
   1630e:	d907      	bls.n	16320 <__udivmoddi4+0x15c>
   16310:	19e4      	adds	r4, r4, r7
   16312:	f100 33ff 	add.w	r3, r0, #4294967295
   16316:	d202      	bcs.n	1631e <__udivmoddi4+0x15a>
   16318:	45a4      	cmp	ip, r4
   1631a:	f200 80b8 	bhi.w	1648e <__udivmoddi4+0x2ca>
   1631e:	4618      	mov	r0, r3
   16320:	eba4 040c 	sub.w	r4, r4, ip
   16324:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   16328:	e79d      	b.n	16266 <__udivmoddi4+0xa2>
   1632a:	4631      	mov	r1, r6
   1632c:	4630      	mov	r0, r6
   1632e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16332:	f1ce 0420 	rsb	r4, lr, #32
   16336:	fa05 f30e 	lsl.w	r3, r5, lr
   1633a:	fa07 f70e 	lsl.w	r7, r7, lr
   1633e:	fa20 f804 	lsr.w	r8, r0, r4
   16342:	0c3a      	lsrs	r2, r7, #16
   16344:	fa25 f404 	lsr.w	r4, r5, r4
   16348:	ea48 0803 	orr.w	r8, r8, r3
   1634c:	fbb4 f1f2 	udiv	r1, r4, r2
   16350:	ea4f 4518 	mov.w	r5, r8, lsr #16
   16354:	fb02 4411 	mls	r4, r2, r1, r4
   16358:	fa1f fc87 	uxth.w	ip, r7
   1635c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   16360:	fb01 f30c 	mul.w	r3, r1, ip
   16364:	42ab      	cmp	r3, r5
   16366:	fa00 f40e 	lsl.w	r4, r0, lr
   1636a:	d909      	bls.n	16380 <__udivmoddi4+0x1bc>
   1636c:	19ed      	adds	r5, r5, r7
   1636e:	f101 30ff 	add.w	r0, r1, #4294967295
   16372:	f080 808a 	bcs.w	1648a <__udivmoddi4+0x2c6>
   16376:	42ab      	cmp	r3, r5
   16378:	f240 8087 	bls.w	1648a <__udivmoddi4+0x2c6>
   1637c:	3902      	subs	r1, #2
   1637e:	443d      	add	r5, r7
   16380:	1aeb      	subs	r3, r5, r3
   16382:	fa1f f588 	uxth.w	r5, r8
   16386:	fbb3 f0f2 	udiv	r0, r3, r2
   1638a:	fb02 3310 	mls	r3, r2, r0, r3
   1638e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   16392:	fb00 f30c 	mul.w	r3, r0, ip
   16396:	42ab      	cmp	r3, r5
   16398:	d907      	bls.n	163aa <__udivmoddi4+0x1e6>
   1639a:	19ed      	adds	r5, r5, r7
   1639c:	f100 38ff 	add.w	r8, r0, #4294967295
   163a0:	d26f      	bcs.n	16482 <__udivmoddi4+0x2be>
   163a2:	42ab      	cmp	r3, r5
   163a4:	d96d      	bls.n	16482 <__udivmoddi4+0x2be>
   163a6:	3802      	subs	r0, #2
   163a8:	443d      	add	r5, r7
   163aa:	1aeb      	subs	r3, r5, r3
   163ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   163b0:	e78f      	b.n	162d2 <__udivmoddi4+0x10e>
   163b2:	f1c1 0720 	rsb	r7, r1, #32
   163b6:	fa22 f807 	lsr.w	r8, r2, r7
   163ba:	408b      	lsls	r3, r1
   163bc:	fa05 f401 	lsl.w	r4, r5, r1
   163c0:	ea48 0303 	orr.w	r3, r8, r3
   163c4:	fa20 fe07 	lsr.w	lr, r0, r7
   163c8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   163cc:	40fd      	lsrs	r5, r7
   163ce:	ea4e 0e04 	orr.w	lr, lr, r4
   163d2:	fbb5 f9fc 	udiv	r9, r5, ip
   163d6:	ea4f 441e 	mov.w	r4, lr, lsr #16
   163da:	fb0c 5519 	mls	r5, ip, r9, r5
   163de:	fa1f f883 	uxth.w	r8, r3
   163e2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   163e6:	fb09 f408 	mul.w	r4, r9, r8
   163ea:	42ac      	cmp	r4, r5
   163ec:	fa02 f201 	lsl.w	r2, r2, r1
   163f0:	fa00 fa01 	lsl.w	sl, r0, r1
   163f4:	d908      	bls.n	16408 <__udivmoddi4+0x244>
   163f6:	18ed      	adds	r5, r5, r3
   163f8:	f109 30ff 	add.w	r0, r9, #4294967295
   163fc:	d243      	bcs.n	16486 <__udivmoddi4+0x2c2>
   163fe:	42ac      	cmp	r4, r5
   16400:	d941      	bls.n	16486 <__udivmoddi4+0x2c2>
   16402:	f1a9 0902 	sub.w	r9, r9, #2
   16406:	441d      	add	r5, r3
   16408:	1b2d      	subs	r5, r5, r4
   1640a:	fa1f fe8e 	uxth.w	lr, lr
   1640e:	fbb5 f0fc 	udiv	r0, r5, ip
   16412:	fb0c 5510 	mls	r5, ip, r0, r5
   16416:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   1641a:	fb00 f808 	mul.w	r8, r0, r8
   1641e:	45a0      	cmp	r8, r4
   16420:	d907      	bls.n	16432 <__udivmoddi4+0x26e>
   16422:	18e4      	adds	r4, r4, r3
   16424:	f100 35ff 	add.w	r5, r0, #4294967295
   16428:	d229      	bcs.n	1647e <__udivmoddi4+0x2ba>
   1642a:	45a0      	cmp	r8, r4
   1642c:	d927      	bls.n	1647e <__udivmoddi4+0x2ba>
   1642e:	3802      	subs	r0, #2
   16430:	441c      	add	r4, r3
   16432:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   16436:	eba4 0408 	sub.w	r4, r4, r8
   1643a:	fba0 8902 	umull	r8, r9, r0, r2
   1643e:	454c      	cmp	r4, r9
   16440:	46c6      	mov	lr, r8
   16442:	464d      	mov	r5, r9
   16444:	d315      	bcc.n	16472 <__udivmoddi4+0x2ae>
   16446:	d012      	beq.n	1646e <__udivmoddi4+0x2aa>
   16448:	b156      	cbz	r6, 16460 <__udivmoddi4+0x29c>
   1644a:	ebba 030e 	subs.w	r3, sl, lr
   1644e:	eb64 0405 	sbc.w	r4, r4, r5
   16452:	fa04 f707 	lsl.w	r7, r4, r7
   16456:	40cb      	lsrs	r3, r1
   16458:	431f      	orrs	r7, r3
   1645a:	40cc      	lsrs	r4, r1
   1645c:	6037      	str	r7, [r6, #0]
   1645e:	6074      	str	r4, [r6, #4]
   16460:	2100      	movs	r1, #0
   16462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16466:	4618      	mov	r0, r3
   16468:	e6f8      	b.n	1625c <__udivmoddi4+0x98>
   1646a:	4690      	mov	r8, r2
   1646c:	e6e0      	b.n	16230 <__udivmoddi4+0x6c>
   1646e:	45c2      	cmp	sl, r8
   16470:	d2ea      	bcs.n	16448 <__udivmoddi4+0x284>
   16472:	ebb8 0e02 	subs.w	lr, r8, r2
   16476:	eb69 0503 	sbc.w	r5, r9, r3
   1647a:	3801      	subs	r0, #1
   1647c:	e7e4      	b.n	16448 <__udivmoddi4+0x284>
   1647e:	4628      	mov	r0, r5
   16480:	e7d7      	b.n	16432 <__udivmoddi4+0x26e>
   16482:	4640      	mov	r0, r8
   16484:	e791      	b.n	163aa <__udivmoddi4+0x1e6>
   16486:	4681      	mov	r9, r0
   16488:	e7be      	b.n	16408 <__udivmoddi4+0x244>
   1648a:	4601      	mov	r1, r0
   1648c:	e778      	b.n	16380 <__udivmoddi4+0x1bc>
   1648e:	3802      	subs	r0, #2
   16490:	443c      	add	r4, r7
   16492:	e745      	b.n	16320 <__udivmoddi4+0x15c>
   16494:	4608      	mov	r0, r1
   16496:	e708      	b.n	162aa <__udivmoddi4+0xe6>
   16498:	f1a8 0802 	sub.w	r8, r8, #2
   1649c:	443d      	add	r5, r7
   1649e:	e72b      	b.n	162f8 <__udivmoddi4+0x134>

000164a0 <selfrel_offset31>:
   164a0:	6803      	ldr	r3, [r0, #0]
   164a2:	005a      	lsls	r2, r3, #1
   164a4:	bf4c      	ite	mi
   164a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   164aa:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   164ae:	4418      	add	r0, r3
   164b0:	4770      	bx	lr
   164b2:	bf00      	nop

000164b4 <search_EIT_table>:
   164b4:	b361      	cbz	r1, 16510 <search_EIT_table+0x5c>
   164b6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164ba:	f101 3aff 	add.w	sl, r1, #4294967295
   164be:	4690      	mov	r8, r2
   164c0:	4606      	mov	r6, r0
   164c2:	46d1      	mov	r9, sl
   164c4:	2700      	movs	r7, #0
   164c6:	eb07 0409 	add.w	r4, r7, r9
   164ca:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   164ce:	1064      	asrs	r4, r4, #1
   164d0:	00e5      	lsls	r5, r4, #3
   164d2:	1971      	adds	r1, r6, r5
   164d4:	4608      	mov	r0, r1
   164d6:	f7ff ffe3 	bl	164a0 <selfrel_offset31>
   164da:	45a2      	cmp	sl, r4
   164dc:	4683      	mov	fp, r0
   164de:	f105 0008 	add.w	r0, r5, #8
   164e2:	4430      	add	r0, r6
   164e4:	d009      	beq.n	164fa <search_EIT_table+0x46>
   164e6:	f7ff ffdb 	bl	164a0 <selfrel_offset31>
   164ea:	45c3      	cmp	fp, r8
   164ec:	f100 30ff 	add.w	r0, r0, #4294967295
   164f0:	d805      	bhi.n	164fe <search_EIT_table+0x4a>
   164f2:	4540      	cmp	r0, r8
   164f4:	d209      	bcs.n	1650a <search_EIT_table+0x56>
   164f6:	1c67      	adds	r7, r4, #1
   164f8:	e7e5      	b.n	164c6 <search_EIT_table+0x12>
   164fa:	45c3      	cmp	fp, r8
   164fc:	d905      	bls.n	1650a <search_EIT_table+0x56>
   164fe:	42a7      	cmp	r7, r4
   16500:	d002      	beq.n	16508 <search_EIT_table+0x54>
   16502:	f104 39ff 	add.w	r9, r4, #4294967295
   16506:	e7de      	b.n	164c6 <search_EIT_table+0x12>
   16508:	2100      	movs	r1, #0
   1650a:	4608      	mov	r0, r1
   1650c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16510:	4608      	mov	r0, r1
   16512:	4770      	bx	lr

00016514 <__gnu_unwind_get_pr_addr>:
   16514:	2801      	cmp	r0, #1
   16516:	d007      	beq.n	16528 <__gnu_unwind_get_pr_addr+0x14>
   16518:	2802      	cmp	r0, #2
   1651a:	d007      	beq.n	1652c <__gnu_unwind_get_pr_addr+0x18>
   1651c:	4b04      	ldr	r3, [pc, #16]	; (16530 <__gnu_unwind_get_pr_addr+0x1c>)
   1651e:	2800      	cmp	r0, #0
   16520:	bf0c      	ite	eq
   16522:	4618      	moveq	r0, r3
   16524:	2000      	movne	r0, #0
   16526:	4770      	bx	lr
   16528:	4802      	ldr	r0, [pc, #8]	; (16534 <__gnu_unwind_get_pr_addr+0x20>)
   1652a:	4770      	bx	lr
   1652c:	4802      	ldr	r0, [pc, #8]	; (16538 <__gnu_unwind_get_pr_addr+0x24>)
   1652e:	4770      	bx	lr
   16530:	00016c19 	.word	0x00016c19
   16534:	00016c1d 	.word	0x00016c1d
   16538:	00016c21 	.word	0x00016c21

0001653c <get_eit_entry>:
   1653c:	b530      	push	{r4, r5, lr}
   1653e:	4b24      	ldr	r3, [pc, #144]	; (165d0 <get_eit_entry+0x94>)
   16540:	b083      	sub	sp, #12
   16542:	4604      	mov	r4, r0
   16544:	1e8d      	subs	r5, r1, #2
   16546:	b37b      	cbz	r3, 165a8 <get_eit_entry+0x6c>
   16548:	a901      	add	r1, sp, #4
   1654a:	4628      	mov	r0, r5
   1654c:	f3af 8000 	nop.w
   16550:	b320      	cbz	r0, 1659c <get_eit_entry+0x60>
   16552:	9901      	ldr	r1, [sp, #4]
   16554:	462a      	mov	r2, r5
   16556:	f7ff ffad 	bl	164b4 <search_EIT_table>
   1655a:	4601      	mov	r1, r0
   1655c:	b1f0      	cbz	r0, 1659c <get_eit_entry+0x60>
   1655e:	f7ff ff9f 	bl	164a0 <selfrel_offset31>
   16562:	684b      	ldr	r3, [r1, #4]
   16564:	64a0      	str	r0, [r4, #72]	; 0x48
   16566:	2b01      	cmp	r3, #1
   16568:	d012      	beq.n	16590 <get_eit_entry+0x54>
   1656a:	2b00      	cmp	r3, #0
   1656c:	f101 0004 	add.w	r0, r1, #4
   16570:	db20      	blt.n	165b4 <get_eit_entry+0x78>
   16572:	f7ff ff95 	bl	164a0 <selfrel_offset31>
   16576:	2300      	movs	r3, #0
   16578:	64e0      	str	r0, [r4, #76]	; 0x4c
   1657a:	6523      	str	r3, [r4, #80]	; 0x50
   1657c:	6803      	ldr	r3, [r0, #0]
   1657e:	2b00      	cmp	r3, #0
   16580:	db1c      	blt.n	165bc <get_eit_entry+0x80>
   16582:	f7ff ff8d 	bl	164a0 <selfrel_offset31>
   16586:	2300      	movs	r3, #0
   16588:	6120      	str	r0, [r4, #16]
   1658a:	4618      	mov	r0, r3
   1658c:	b003      	add	sp, #12
   1658e:	bd30      	pop	{r4, r5, pc}
   16590:	2300      	movs	r3, #0
   16592:	6123      	str	r3, [r4, #16]
   16594:	2305      	movs	r3, #5
   16596:	4618      	mov	r0, r3
   16598:	b003      	add	sp, #12
   1659a:	bd30      	pop	{r4, r5, pc}
   1659c:	2300      	movs	r3, #0
   1659e:	6123      	str	r3, [r4, #16]
   165a0:	2309      	movs	r3, #9
   165a2:	4618      	mov	r0, r3
   165a4:	b003      	add	sp, #12
   165a6:	bd30      	pop	{r4, r5, pc}
   165a8:	490a      	ldr	r1, [pc, #40]	; (165d4 <get_eit_entry+0x98>)
   165aa:	480b      	ldr	r0, [pc, #44]	; (165d8 <get_eit_entry+0x9c>)
   165ac:	1a09      	subs	r1, r1, r0
   165ae:	10c9      	asrs	r1, r1, #3
   165b0:	9101      	str	r1, [sp, #4]
   165b2:	e7cf      	b.n	16554 <get_eit_entry+0x18>
   165b4:	2301      	movs	r3, #1
   165b6:	64e0      	str	r0, [r4, #76]	; 0x4c
   165b8:	6523      	str	r3, [r4, #80]	; 0x50
   165ba:	e7df      	b.n	1657c <get_eit_entry+0x40>
   165bc:	f3c3 6003 	ubfx	r0, r3, #24, #4
   165c0:	f7ff ffa8 	bl	16514 <__gnu_unwind_get_pr_addr>
   165c4:	2800      	cmp	r0, #0
   165c6:	6120      	str	r0, [r4, #16]
   165c8:	bf14      	ite	ne
   165ca:	2300      	movne	r3, #0
   165cc:	2309      	moveq	r3, #9
   165ce:	e7dc      	b.n	1658a <get_eit_entry+0x4e>
   165d0:	00000000 	.word	0x00000000
   165d4:	0003f0f8 	.word	0x0003f0f8
   165d8:	0003eec0 	.word	0x0003eec0

000165dc <restore_non_core_regs>:
   165dc:	6803      	ldr	r3, [r0, #0]
   165de:	07da      	lsls	r2, r3, #31
   165e0:	b510      	push	{r4, lr}
   165e2:	4604      	mov	r4, r0
   165e4:	d406      	bmi.n	165f4 <restore_non_core_regs+0x18>
   165e6:	079b      	lsls	r3, r3, #30
   165e8:	f100 0048 	add.w	r0, r0, #72	; 0x48
   165ec:	d509      	bpl.n	16602 <restore_non_core_regs+0x26>
   165ee:	f000 fc51 	bl	16e94 <__gnu_Unwind_Restore_VFP_D>
   165f2:	6823      	ldr	r3, [r4, #0]
   165f4:	0759      	lsls	r1, r3, #29
   165f6:	d509      	bpl.n	1660c <restore_non_core_regs+0x30>
   165f8:	071a      	lsls	r2, r3, #28
   165fa:	d50e      	bpl.n	1661a <restore_non_core_regs+0x3e>
   165fc:	06db      	lsls	r3, r3, #27
   165fe:	d513      	bpl.n	16628 <restore_non_core_regs+0x4c>
   16600:	bd10      	pop	{r4, pc}
   16602:	f000 fc3f 	bl	16e84 <__gnu_Unwind_Restore_VFP>
   16606:	6823      	ldr	r3, [r4, #0]
   16608:	0759      	lsls	r1, r3, #29
   1660a:	d4f5      	bmi.n	165f8 <restore_non_core_regs+0x1c>
   1660c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   16610:	f000 fc48 	bl	16ea4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   16614:	6823      	ldr	r3, [r4, #0]
   16616:	071a      	lsls	r2, r3, #28
   16618:	d4f0      	bmi.n	165fc <restore_non_core_regs+0x20>
   1661a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1661e:	f000 fc49 	bl	16eb4 <__gnu_Unwind_Restore_WMMXD>
   16622:	6823      	ldr	r3, [r4, #0]
   16624:	06db      	lsls	r3, r3, #27
   16626:	d4eb      	bmi.n	16600 <restore_non_core_regs+0x24>
   16628:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1662c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16630:	f000 bc84 	b.w	16f3c <__gnu_Unwind_Restore_WMMXC>

00016634 <_Unwind_decode_typeinfo_ptr.isra.0>:
   16634:	6803      	ldr	r3, [r0, #0]
   16636:	b103      	cbz	r3, 1663a <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
   16638:	4403      	add	r3, r0
   1663a:	4618      	mov	r0, r3
   1663c:	4770      	bx	lr
   1663e:	bf00      	nop

00016640 <__gnu_unwind_24bit.isra.1>:
   16640:	2009      	movs	r0, #9
   16642:	4770      	bx	lr

00016644 <_Unwind_DebugHook>:
   16644:	4770      	bx	lr
   16646:	bf00      	nop

00016648 <unwind_phase2>:
   16648:	b570      	push	{r4, r5, r6, lr}
   1664a:	4604      	mov	r4, r0
   1664c:	460d      	mov	r5, r1
   1664e:	e008      	b.n	16662 <unwind_phase2+0x1a>
   16650:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   16652:	6163      	str	r3, [r4, #20]
   16654:	462a      	mov	r2, r5
   16656:	6923      	ldr	r3, [r4, #16]
   16658:	4621      	mov	r1, r4
   1665a:	2001      	movs	r0, #1
   1665c:	4798      	blx	r3
   1665e:	2808      	cmp	r0, #8
   16660:	d108      	bne.n	16674 <unwind_phase2+0x2c>
   16662:	6c29      	ldr	r1, [r5, #64]	; 0x40
   16664:	4620      	mov	r0, r4
   16666:	f7ff ff69 	bl	1653c <get_eit_entry>
   1666a:	4606      	mov	r6, r0
   1666c:	2800      	cmp	r0, #0
   1666e:	d0ef      	beq.n	16650 <unwind_phase2+0x8>
   16670:	f000 fe94 	bl	1739c <abort>
   16674:	2807      	cmp	r0, #7
   16676:	d1fb      	bne.n	16670 <unwind_phase2+0x28>
   16678:	4630      	mov	r0, r6
   1667a:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1667c:	f7ff ffe2 	bl	16644 <_Unwind_DebugHook>
   16680:	1d28      	adds	r0, r5, #4
   16682:	f000 fbf3 	bl	16e6c <__restore_core_regs>
   16686:	bf00      	nop

00016688 <unwind_phase2_forced>:
   16688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1668c:	1d0c      	adds	r4, r1, #4
   1668e:	4605      	mov	r5, r0
   16690:	4692      	mov	sl, r2
   16692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16694:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   16698:	ae03      	add	r6, sp, #12
   1669a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1669c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1669e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   166a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   166a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   166a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   166a8:	ac02      	add	r4, sp, #8
   166aa:	f8d5 800c 	ldr.w	r8, [r5, #12]
   166ae:	f8d5 9018 	ldr.w	r9, [r5, #24]
   166b2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   166b6:	2300      	movs	r3, #0
   166b8:	4628      	mov	r0, r5
   166ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
   166bc:	6023      	str	r3, [r4, #0]
   166be:	f7ff ff3d 	bl	1653c <get_eit_entry>
   166c2:	f1ba 0f00 	cmp.w	sl, #0
   166c6:	4607      	mov	r7, r0
   166c8:	bf14      	ite	ne
   166ca:	260a      	movne	r6, #10
   166cc:	2609      	moveq	r6, #9
   166ce:	b17f      	cbz	r7, 166f0 <unwind_phase2_forced+0x68>
   166d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   166d2:	f046 0110 	orr.w	r1, r6, #16
   166d6:	e88d 0210 	stmia.w	sp, {r4, r9}
   166da:	462a      	mov	r2, r5
   166dc:	6463      	str	r3, [r4, #68]	; 0x44
   166de:	2001      	movs	r0, #1
   166e0:	462b      	mov	r3, r5
   166e2:	47c0      	blx	r8
   166e4:	bb78      	cbnz	r0, 16746 <unwind_phase2_forced+0xbe>
   166e6:	4638      	mov	r0, r7
   166e8:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   166ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   166f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   166f2:	616b      	str	r3, [r5, #20]
   166f4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   166f8:	4621      	mov	r1, r4
   166fa:	a87a      	add	r0, sp, #488	; 0x1e8
   166fc:	f001 fd10 	bl	18120 <memcpy>
   16700:	692b      	ldr	r3, [r5, #16]
   16702:	aa7a      	add	r2, sp, #488	; 0x1e8
   16704:	4629      	mov	r1, r5
   16706:	4630      	mov	r0, r6
   16708:	4798      	blx	r3
   1670a:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1670c:	4682      	mov	sl, r0
   1670e:	e88d 0210 	stmia.w	sp, {r4, r9}
   16712:	4631      	mov	r1, r6
   16714:	6463      	str	r3, [r4, #68]	; 0x44
   16716:	462a      	mov	r2, r5
   16718:	462b      	mov	r3, r5
   1671a:	2001      	movs	r0, #1
   1671c:	47c0      	blx	r8
   1671e:	b990      	cbnz	r0, 16746 <unwind_phase2_forced+0xbe>
   16720:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   16724:	a97a      	add	r1, sp, #488	; 0x1e8
   16726:	4620      	mov	r0, r4
   16728:	f001 fcfa 	bl	18120 <memcpy>
   1672c:	f1ba 0f08 	cmp.w	sl, #8
   16730:	d106      	bne.n	16740 <unwind_phase2_forced+0xb8>
   16732:	6c21      	ldr	r1, [r4, #64]	; 0x40
   16734:	4628      	mov	r0, r5
   16736:	f7ff ff01 	bl	1653c <get_eit_entry>
   1673a:	2609      	movs	r6, #9
   1673c:	4607      	mov	r7, r0
   1673e:	e7c6      	b.n	166ce <unwind_phase2_forced+0x46>
   16740:	f1ba 0f07 	cmp.w	sl, #7
   16744:	d005      	beq.n	16752 <unwind_phase2_forced+0xca>
   16746:	2709      	movs	r7, #9
   16748:	4638      	mov	r0, r7
   1674a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1674e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16752:	4638      	mov	r0, r7
   16754:	6c21      	ldr	r1, [r4, #64]	; 0x40
   16756:	f7ff ff75 	bl	16644 <_Unwind_DebugHook>
   1675a:	a803      	add	r0, sp, #12
   1675c:	f000 fb86 	bl	16e6c <__restore_core_regs>

00016760 <_Unwind_GetCFA>:
   16760:	6c40      	ldr	r0, [r0, #68]	; 0x44
   16762:	4770      	bx	lr

00016764 <__gnu_Unwind_RaiseException>:
   16764:	b5f0      	push	{r4, r5, r6, r7, lr}
   16766:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   16768:	640b      	str	r3, [r1, #64]	; 0x40
   1676a:	1d0e      	adds	r6, r1, #4
   1676c:	460f      	mov	r7, r1
   1676e:	4604      	mov	r4, r0
   16770:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   16772:	b0f9      	sub	sp, #484	; 0x1e4
   16774:	ad01      	add	r5, sp, #4
   16776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   16778:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1677a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1677c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1677e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   16780:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   16784:	f04f 36ff 	mov.w	r6, #4294967295
   16788:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1678c:	9600      	str	r6, [sp, #0]
   1678e:	e006      	b.n	1679e <__gnu_Unwind_RaiseException+0x3a>
   16790:	6923      	ldr	r3, [r4, #16]
   16792:	466a      	mov	r2, sp
   16794:	4621      	mov	r1, r4
   16796:	4798      	blx	r3
   16798:	2808      	cmp	r0, #8
   1679a:	4605      	mov	r5, r0
   1679c:	d108      	bne.n	167b0 <__gnu_Unwind_RaiseException+0x4c>
   1679e:	9910      	ldr	r1, [sp, #64]	; 0x40
   167a0:	4620      	mov	r0, r4
   167a2:	f7ff fecb 	bl	1653c <get_eit_entry>
   167a6:	2800      	cmp	r0, #0
   167a8:	d0f2      	beq.n	16790 <__gnu_Unwind_RaiseException+0x2c>
   167aa:	2009      	movs	r0, #9
   167ac:	b079      	add	sp, #484	; 0x1e4
   167ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   167b0:	4668      	mov	r0, sp
   167b2:	f7ff ff13 	bl	165dc <restore_non_core_regs>
   167b6:	2d06      	cmp	r5, #6
   167b8:	d1f7      	bne.n	167aa <__gnu_Unwind_RaiseException+0x46>
   167ba:	4639      	mov	r1, r7
   167bc:	4620      	mov	r0, r4
   167be:	f7ff ff43 	bl	16648 <unwind_phase2>
   167c2:	bf00      	nop

000167c4 <__gnu_Unwind_ForcedUnwind>:
   167c4:	b430      	push	{r4, r5}
   167c6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   167c8:	60c1      	str	r1, [r0, #12]
   167ca:	6182      	str	r2, [r0, #24]
   167cc:	4619      	mov	r1, r3
   167ce:	641d      	str	r5, [r3, #64]	; 0x40
   167d0:	2200      	movs	r2, #0
   167d2:	bc30      	pop	{r4, r5}
   167d4:	e758      	b.n	16688 <unwind_phase2_forced>
   167d6:	bf00      	nop

000167d8 <__gnu_Unwind_Resume>:
   167d8:	b570      	push	{r4, r5, r6, lr}
   167da:	68c6      	ldr	r6, [r0, #12]
   167dc:	6943      	ldr	r3, [r0, #20]
   167de:	640b      	str	r3, [r1, #64]	; 0x40
   167e0:	b126      	cbz	r6, 167ec <__gnu_Unwind_Resume+0x14>
   167e2:	2201      	movs	r2, #1
   167e4:	f7ff ff50 	bl	16688 <unwind_phase2_forced>
   167e8:	f000 fdd8 	bl	1739c <abort>
   167ec:	6903      	ldr	r3, [r0, #16]
   167ee:	460a      	mov	r2, r1
   167f0:	4604      	mov	r4, r0
   167f2:	460d      	mov	r5, r1
   167f4:	4601      	mov	r1, r0
   167f6:	2002      	movs	r0, #2
   167f8:	4798      	blx	r3
   167fa:	2807      	cmp	r0, #7
   167fc:	d007      	beq.n	1680e <__gnu_Unwind_Resume+0x36>
   167fe:	2808      	cmp	r0, #8
   16800:	d103      	bne.n	1680a <__gnu_Unwind_Resume+0x32>
   16802:	4629      	mov	r1, r5
   16804:	4620      	mov	r0, r4
   16806:	f7ff ff1f 	bl	16648 <unwind_phase2>
   1680a:	f000 fdc7 	bl	1739c <abort>
   1680e:	4630      	mov	r0, r6
   16810:	6c29      	ldr	r1, [r5, #64]	; 0x40
   16812:	f7ff ff17 	bl	16644 <_Unwind_DebugHook>
   16816:	1d28      	adds	r0, r5, #4
   16818:	f000 fb28 	bl	16e6c <__restore_core_regs>

0001681c <__gnu_Unwind_Resume_or_Rethrow>:
   1681c:	68c2      	ldr	r2, [r0, #12]
   1681e:	b11a      	cbz	r2, 16828 <__gnu_Unwind_Resume_or_Rethrow+0xc>
   16820:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   16822:	640a      	str	r2, [r1, #64]	; 0x40
   16824:	2200      	movs	r2, #0
   16826:	e72f      	b.n	16688 <unwind_phase2_forced>
   16828:	e79c      	b.n	16764 <__gnu_Unwind_RaiseException>
   1682a:	bf00      	nop

0001682c <_Unwind_Complete>:
   1682c:	4770      	bx	lr
   1682e:	bf00      	nop

00016830 <_Unwind_DeleteException>:
   16830:	6883      	ldr	r3, [r0, #8]
   16832:	b113      	cbz	r3, 1683a <_Unwind_DeleteException+0xa>
   16834:	4601      	mov	r1, r0
   16836:	2001      	movs	r0, #1
   16838:	4718      	bx	r3
   1683a:	4770      	bx	lr

0001683c <_Unwind_VRS_Get>:
   1683c:	b500      	push	{lr}
   1683e:	2904      	cmp	r1, #4
   16840:	d807      	bhi.n	16852 <_Unwind_VRS_Get+0x16>
   16842:	e8df f001 	tbb	[pc, r1]
   16846:	0903      	.short	0x0903
   16848:	0906      	.short	0x0906
   1684a:	09          	.byte	0x09
   1684b:	00          	.byte	0x00
   1684c:	b90b      	cbnz	r3, 16852 <_Unwind_VRS_Get+0x16>
   1684e:	2a0f      	cmp	r2, #15
   16850:	d905      	bls.n	1685e <_Unwind_VRS_Get+0x22>
   16852:	2002      	movs	r0, #2
   16854:	f85d fb04 	ldr.w	pc, [sp], #4
   16858:	2001      	movs	r0, #1
   1685a:	f85d fb04 	ldr.w	pc, [sp], #4
   1685e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   16862:	4618      	mov	r0, r3
   16864:	6853      	ldr	r3, [r2, #4]
   16866:	9a01      	ldr	r2, [sp, #4]
   16868:	6013      	str	r3, [r2, #0]
   1686a:	f85d fb04 	ldr.w	pc, [sp], #4
   1686e:	bf00      	nop

00016870 <_Unwind_GetGR>:
   16870:	b510      	push	{r4, lr}
   16872:	b084      	sub	sp, #16
   16874:	2300      	movs	r3, #0
   16876:	ac03      	add	r4, sp, #12
   16878:	460a      	mov	r2, r1
   1687a:	9400      	str	r4, [sp, #0]
   1687c:	4619      	mov	r1, r3
   1687e:	f7ff ffdd 	bl	1683c <_Unwind_VRS_Get>
   16882:	9803      	ldr	r0, [sp, #12]
   16884:	b004      	add	sp, #16
   16886:	bd10      	pop	{r4, pc}

00016888 <_Unwind_VRS_Set>:
   16888:	b500      	push	{lr}
   1688a:	2904      	cmp	r1, #4
   1688c:	d807      	bhi.n	1689e <_Unwind_VRS_Set+0x16>
   1688e:	e8df f001 	tbb	[pc, r1]
   16892:	0903      	.short	0x0903
   16894:	0906      	.short	0x0906
   16896:	09          	.byte	0x09
   16897:	00          	.byte	0x00
   16898:	b90b      	cbnz	r3, 1689e <_Unwind_VRS_Set+0x16>
   1689a:	2a0f      	cmp	r2, #15
   1689c:	d905      	bls.n	168aa <_Unwind_VRS_Set+0x22>
   1689e:	2002      	movs	r0, #2
   168a0:	f85d fb04 	ldr.w	pc, [sp], #4
   168a4:	2001      	movs	r0, #1
   168a6:	f85d fb04 	ldr.w	pc, [sp], #4
   168aa:	9901      	ldr	r1, [sp, #4]
   168ac:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   168b0:	6809      	ldr	r1, [r1, #0]
   168b2:	6051      	str	r1, [r2, #4]
   168b4:	4618      	mov	r0, r3
   168b6:	f85d fb04 	ldr.w	pc, [sp], #4
   168ba:	bf00      	nop

000168bc <_Unwind_SetGR>:
   168bc:	b510      	push	{r4, lr}
   168be:	b084      	sub	sp, #16
   168c0:	ac04      	add	r4, sp, #16
   168c2:	2300      	movs	r3, #0
   168c4:	f844 2d04 	str.w	r2, [r4, #-4]!
   168c8:	460a      	mov	r2, r1
   168ca:	9400      	str	r4, [sp, #0]
   168cc:	4619      	mov	r1, r3
   168ce:	f7ff ffdb 	bl	16888 <_Unwind_VRS_Set>
   168d2:	b004      	add	sp, #16
   168d4:	bd10      	pop	{r4, pc}
   168d6:	bf00      	nop

000168d8 <__gnu_Unwind_Backtrace>:
   168d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   168da:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   168dc:	6413      	str	r3, [r2, #64]	; 0x40
   168de:	1d15      	adds	r5, r2, #4
   168e0:	4607      	mov	r7, r0
   168e2:	460e      	mov	r6, r1
   168e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   168e6:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   168ea:	ac17      	add	r4, sp, #92	; 0x5c
   168ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   168ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   168f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   168f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   168f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   168f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   168fa:	f04f 35ff 	mov.w	r5, #4294967295
   168fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   16902:	9516      	str	r5, [sp, #88]	; 0x58
   16904:	e010      	b.n	16928 <__gnu_Unwind_Backtrace+0x50>
   16906:	a816      	add	r0, sp, #88	; 0x58
   16908:	f7ff ffd8 	bl	168bc <_Unwind_SetGR>
   1690c:	4631      	mov	r1, r6
   1690e:	a816      	add	r0, sp, #88	; 0x58
   16910:	47b8      	blx	r7
   16912:	aa16      	add	r2, sp, #88	; 0x58
   16914:	4669      	mov	r1, sp
   16916:	b978      	cbnz	r0, 16938 <__gnu_Unwind_Backtrace+0x60>
   16918:	9b04      	ldr	r3, [sp, #16]
   1691a:	2008      	movs	r0, #8
   1691c:	4798      	blx	r3
   1691e:	2805      	cmp	r0, #5
   16920:	4604      	mov	r4, r0
   16922:	d00a      	beq.n	1693a <__gnu_Unwind_Backtrace+0x62>
   16924:	2809      	cmp	r0, #9
   16926:	d007      	beq.n	16938 <__gnu_Unwind_Backtrace+0x60>
   16928:	9926      	ldr	r1, [sp, #152]	; 0x98
   1692a:	4668      	mov	r0, sp
   1692c:	f7ff fe06 	bl	1653c <get_eit_entry>
   16930:	466a      	mov	r2, sp
   16932:	210c      	movs	r1, #12
   16934:	2800      	cmp	r0, #0
   16936:	d0e6      	beq.n	16906 <__gnu_Unwind_Backtrace+0x2e>
   16938:	2409      	movs	r4, #9
   1693a:	a816      	add	r0, sp, #88	; 0x58
   1693c:	f7ff fe4e 	bl	165dc <restore_non_core_regs>
   16940:	4620      	mov	r0, r4
   16942:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   16946:	bdf0      	pop	{r4, r5, r6, r7, pc}

00016948 <__gnu_unwind_pr_common>:
   16948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1694c:	460d      	mov	r5, r1
   1694e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
   16950:	b08b      	sub	sp, #44	; 0x2c
   16952:	1d0c      	adds	r4, r1, #4
   16954:	6809      	ldr	r1, [r1, #0]
   16956:	9107      	str	r1, [sp, #28]
   16958:	4691      	mov	r9, r2
   1695a:	9408      	str	r4, [sp, #32]
   1695c:	f000 0b03 	and.w	fp, r0, #3
   16960:	461e      	mov	r6, r3
   16962:	2b00      	cmp	r3, #0
   16964:	d160      	bne.n	16a28 <__gnu_unwind_pr_common+0xe0>
   16966:	0209      	lsls	r1, r1, #8
   16968:	2303      	movs	r3, #3
   1696a:	9107      	str	r1, [sp, #28]
   1696c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
   16970:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   16974:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   16976:	f1bb 0f02 	cmp.w	fp, #2
   1697a:	bf08      	it	eq
   1697c:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   1697e:	f013 0301 	ands.w	r3, r3, #1
   16982:	d140      	bne.n	16a06 <__gnu_unwind_pr_common+0xbe>
   16984:	9301      	str	r3, [sp, #4]
   16986:	f000 0308 	and.w	r3, r0, #8
   1698a:	9303      	str	r3, [sp, #12]
   1698c:	f8d4 8000 	ldr.w	r8, [r4]
   16990:	f1b8 0f00 	cmp.w	r8, #0
   16994:	d039      	beq.n	16a0a <__gnu_unwind_pr_common+0xc2>
   16996:	2e02      	cmp	r6, #2
   16998:	d043      	beq.n	16a22 <__gnu_unwind_pr_common+0xda>
   1699a:	f8b4 8000 	ldrh.w	r8, [r4]
   1699e:	8867      	ldrh	r7, [r4, #2]
   169a0:	3404      	adds	r4, #4
   169a2:	6cab      	ldr	r3, [r5, #72]	; 0x48
   169a4:	f027 0a01 	bic.w	sl, r7, #1
   169a8:	210f      	movs	r1, #15
   169aa:	4648      	mov	r0, r9
   169ac:	449a      	add	sl, r3
   169ae:	f7ff ff5f 	bl	16870 <_Unwind_GetGR>
   169b2:	4582      	cmp	sl, r0
   169b4:	d833      	bhi.n	16a1e <__gnu_unwind_pr_common+0xd6>
   169b6:	f028 0301 	bic.w	r3, r8, #1
   169ba:	449a      	add	sl, r3
   169bc:	4550      	cmp	r0, sl
   169be:	bf2c      	ite	cs
   169c0:	2000      	movcs	r0, #0
   169c2:	2001      	movcc	r0, #1
   169c4:	007f      	lsls	r7, r7, #1
   169c6:	f007 0702 	and.w	r7, r7, #2
   169ca:	f008 0801 	and.w	r8, r8, #1
   169ce:	ea47 0708 	orr.w	r7, r7, r8
   169d2:	2f01      	cmp	r7, #1
   169d4:	d03e      	beq.n	16a54 <__gnu_unwind_pr_common+0x10c>
   169d6:	d335      	bcc.n	16a44 <__gnu_unwind_pr_common+0xfc>
   169d8:	2f02      	cmp	r7, #2
   169da:	d11c      	bne.n	16a16 <__gnu_unwind_pr_common+0xce>
   169dc:	6823      	ldr	r3, [r4, #0]
   169de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   169e2:	9202      	str	r2, [sp, #8]
   169e4:	f1bb 0f00 	cmp.w	fp, #0
   169e8:	d176      	bne.n	16ad8 <__gnu_unwind_pr_common+0x190>
   169ea:	b128      	cbz	r0, 169f8 <__gnu_unwind_pr_common+0xb0>
   169ec:	9903      	ldr	r1, [sp, #12]
   169ee:	2900      	cmp	r1, #0
   169f0:	d07e      	beq.n	16af0 <__gnu_unwind_pr_common+0x1a8>
   169f2:	2a00      	cmp	r2, #0
   169f4:	f000 80a6 	beq.w	16b44 <__gnu_unwind_pr_common+0x1fc>
   169f8:	2b00      	cmp	r3, #0
   169fa:	db77      	blt.n	16aec <__gnu_unwind_pr_common+0x1a4>
   169fc:	9b02      	ldr	r3, [sp, #8]
   169fe:	3301      	adds	r3, #1
   16a00:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   16a04:	e7c2      	b.n	1698c <__gnu_unwind_pr_common+0x44>
   16a06:	2300      	movs	r3, #0
   16a08:	9301      	str	r3, [sp, #4]
   16a0a:	2e02      	cmp	r6, #2
   16a0c:	dd3e      	ble.n	16a8c <__gnu_unwind_pr_common+0x144>
   16a0e:	f7ff fe17 	bl	16640 <__gnu_unwind_24bit.isra.1>
   16a12:	2800      	cmp	r0, #0
   16a14:	d040      	beq.n	16a98 <__gnu_unwind_pr_common+0x150>
   16a16:	2009      	movs	r0, #9
   16a18:	b00b      	add	sp, #44	; 0x2c
   16a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a1e:	2000      	movs	r0, #0
   16a20:	e7d0      	b.n	169c4 <__gnu_unwind_pr_common+0x7c>
   16a22:	6867      	ldr	r7, [r4, #4]
   16a24:	3408      	adds	r4, #8
   16a26:	e7bc      	b.n	169a2 <__gnu_unwind_pr_common+0x5a>
   16a28:	2b02      	cmp	r3, #2
   16a2a:	dca3      	bgt.n	16974 <__gnu_unwind_pr_common+0x2c>
   16a2c:	0c0b      	lsrs	r3, r1, #16
   16a2e:	b2da      	uxtb	r2, r3
   16a30:	0409      	lsls	r1, r1, #16
   16a32:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   16a36:	2302      	movs	r3, #2
   16a38:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   16a3c:	9107      	str	r1, [sp, #28]
   16a3e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   16a42:	e797      	b.n	16974 <__gnu_unwind_pr_common+0x2c>
   16a44:	f1bb 0f00 	cmp.w	fp, #0
   16a48:	d002      	beq.n	16a50 <__gnu_unwind_pr_common+0x108>
   16a4a:	2800      	cmp	r0, #0
   16a4c:	f040 80bd 	bne.w	16bca <__gnu_unwind_pr_common+0x282>
   16a50:	3404      	adds	r4, #4
   16a52:	e79b      	b.n	1698c <__gnu_unwind_pr_common+0x44>
   16a54:	f1bb 0f00 	cmp.w	fp, #0
   16a58:	d125      	bne.n	16aa6 <__gnu_unwind_pr_common+0x15e>
   16a5a:	b1a8      	cbz	r0, 16a88 <__gnu_unwind_pr_common+0x140>
   16a5c:	e894 000c 	ldmia.w	r4, {r2, r3}
   16a60:	1c99      	adds	r1, r3, #2
   16a62:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   16a66:	d0d6      	beq.n	16a16 <__gnu_unwind_pr_common+0xce>
   16a68:	f105 0158 	add.w	r1, r5, #88	; 0x58
   16a6c:	3301      	adds	r3, #1
   16a6e:	9106      	str	r1, [sp, #24]
   16a70:	f000 80a3 	beq.w	16bba <__gnu_unwind_pr_common+0x272>
   16a74:	1d20      	adds	r0, r4, #4
   16a76:	f7ff fddd 	bl	16634 <_Unwind_decode_typeinfo_ptr.isra.0>
   16a7a:	ab06      	add	r3, sp, #24
   16a7c:	4601      	mov	r1, r0
   16a7e:	4628      	mov	r0, r5
   16a80:	f7f6 fd76 	bl	d570 <__cxa_type_match>
   16a84:	2800      	cmp	r0, #0
   16a86:	d177      	bne.n	16b78 <__gnu_unwind_pr_common+0x230>
   16a88:	3408      	adds	r4, #8
   16a8a:	e77f      	b.n	1698c <__gnu_unwind_pr_common+0x44>
   16a8c:	a907      	add	r1, sp, #28
   16a8e:	4648      	mov	r0, r9
   16a90:	f000 faee 	bl	17070 <__gnu_unwind_execute>
   16a94:	2800      	cmp	r0, #0
   16a96:	d1be      	bne.n	16a16 <__gnu_unwind_pr_common+0xce>
   16a98:	9b01      	ldr	r3, [sp, #4]
   16a9a:	2b00      	cmp	r3, #0
   16a9c:	d15c      	bne.n	16b58 <__gnu_unwind_pr_common+0x210>
   16a9e:	2008      	movs	r0, #8
   16aa0:	b00b      	add	sp, #44	; 0x2c
   16aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16aa6:	210d      	movs	r1, #13
   16aa8:	4648      	mov	r0, r9
   16aaa:	6a2f      	ldr	r7, [r5, #32]
   16aac:	f7ff fee0 	bl	16870 <_Unwind_GetGR>
   16ab0:	4287      	cmp	r7, r0
   16ab2:	d1e9      	bne.n	16a88 <__gnu_unwind_pr_common+0x140>
   16ab4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   16ab6:	429c      	cmp	r4, r3
   16ab8:	d1e6      	bne.n	16a88 <__gnu_unwind_pr_common+0x140>
   16aba:	4620      	mov	r0, r4
   16abc:	f7ff fcf0 	bl	164a0 <selfrel_offset31>
   16ac0:	210f      	movs	r1, #15
   16ac2:	4602      	mov	r2, r0
   16ac4:	4648      	mov	r0, r9
   16ac6:	f7ff fef9 	bl	168bc <_Unwind_SetGR>
   16aca:	4648      	mov	r0, r9
   16acc:	462a      	mov	r2, r5
   16ace:	2100      	movs	r1, #0
   16ad0:	f7ff fef4 	bl	168bc <_Unwind_SetGR>
   16ad4:	2007      	movs	r0, #7
   16ad6:	e79f      	b.n	16a18 <__gnu_unwind_pr_common+0xd0>
   16ad8:	210d      	movs	r1, #13
   16ada:	4648      	mov	r0, r9
   16adc:	6a2f      	ldr	r7, [r5, #32]
   16ade:	f7ff fec7 	bl	16870 <_Unwind_GetGR>
   16ae2:	4287      	cmp	r7, r0
   16ae4:	d058      	beq.n	16b98 <__gnu_unwind_pr_common+0x250>
   16ae6:	6823      	ldr	r3, [r4, #0]
   16ae8:	2b00      	cmp	r3, #0
   16aea:	da87      	bge.n	169fc <__gnu_unwind_pr_common+0xb4>
   16aec:	3404      	adds	r4, #4
   16aee:	e785      	b.n	169fc <__gnu_unwind_pr_common+0xb4>
   16af0:	9b02      	ldr	r3, [sp, #8]
   16af2:	b33b      	cbz	r3, 16b44 <__gnu_unwind_pr_common+0x1fc>
   16af4:	f105 0358 	add.w	r3, r5, #88	; 0x58
   16af8:	1d27      	adds	r7, r4, #4
   16afa:	f8cd b010 	str.w	fp, [sp, #16]
   16afe:	f8dd 800c 	ldr.w	r8, [sp, #12]
   16b02:	f8dd a008 	ldr.w	sl, [sp, #8]
   16b06:	9605      	str	r6, [sp, #20]
   16b08:	46a3      	mov	fp, r4
   16b0a:	461c      	mov	r4, r3
   16b0c:	e002      	b.n	16b14 <__gnu_unwind_pr_common+0x1cc>
   16b0e:	45b2      	cmp	sl, r6
   16b10:	46b0      	mov	r8, r6
   16b12:	d016      	beq.n	16b42 <__gnu_unwind_pr_common+0x1fa>
   16b14:	4638      	mov	r0, r7
   16b16:	9406      	str	r4, [sp, #24]
   16b18:	f7ff fd8c 	bl	16634 <_Unwind_decode_typeinfo_ptr.isra.0>
   16b1c:	ab06      	add	r3, sp, #24
   16b1e:	4601      	mov	r1, r0
   16b20:	2200      	movs	r2, #0
   16b22:	4628      	mov	r0, r5
   16b24:	f7f6 fd24 	bl	d570 <__cxa_type_match>
   16b28:	f108 0601 	add.w	r6, r8, #1
   16b2c:	3704      	adds	r7, #4
   16b2e:	2800      	cmp	r0, #0
   16b30:	d0ed      	beq.n	16b0e <__gnu_unwind_pr_common+0x1c6>
   16b32:	9b02      	ldr	r3, [sp, #8]
   16b34:	9e05      	ldr	r6, [sp, #20]
   16b36:	4543      	cmp	r3, r8
   16b38:	465c      	mov	r4, fp
   16b3a:	f8dd b010 	ldr.w	fp, [sp, #16]
   16b3e:	d1d2      	bne.n	16ae6 <__gnu_unwind_pr_common+0x19e>
   16b40:	e000      	b.n	16b44 <__gnu_unwind_pr_common+0x1fc>
   16b42:	465c      	mov	r4, fp
   16b44:	4648      	mov	r0, r9
   16b46:	210d      	movs	r1, #13
   16b48:	f7ff fe92 	bl	16870 <_Unwind_GetGR>
   16b4c:	9b06      	ldr	r3, [sp, #24]
   16b4e:	6228      	str	r0, [r5, #32]
   16b50:	62ac      	str	r4, [r5, #40]	; 0x28
   16b52:	626b      	str	r3, [r5, #36]	; 0x24
   16b54:	2006      	movs	r0, #6
   16b56:	e75f      	b.n	16a18 <__gnu_unwind_pr_common+0xd0>
   16b58:	210f      	movs	r1, #15
   16b5a:	4648      	mov	r0, r9
   16b5c:	f7ff fe88 	bl	16870 <_Unwind_GetGR>
   16b60:	210e      	movs	r1, #14
   16b62:	4602      	mov	r2, r0
   16b64:	4648      	mov	r0, r9
   16b66:	f7ff fea9 	bl	168bc <_Unwind_SetGR>
   16b6a:	4648      	mov	r0, r9
   16b6c:	4a29      	ldr	r2, [pc, #164]	; (16c14 <__gnu_unwind_pr_common+0x2cc>)
   16b6e:	210f      	movs	r1, #15
   16b70:	f7ff fea4 	bl	168bc <_Unwind_SetGR>
   16b74:	2007      	movs	r0, #7
   16b76:	e74f      	b.n	16a18 <__gnu_unwind_pr_common+0xd0>
   16b78:	4607      	mov	r7, r0
   16b7a:	210d      	movs	r1, #13
   16b7c:	4648      	mov	r0, r9
   16b7e:	f7ff fe77 	bl	16870 <_Unwind_GetGR>
   16b82:	2f02      	cmp	r7, #2
   16b84:	6228      	str	r0, [r5, #32]
   16b86:	d11d      	bne.n	16bc4 <__gnu_unwind_pr_common+0x27c>
   16b88:	462b      	mov	r3, r5
   16b8a:	9a06      	ldr	r2, [sp, #24]
   16b8c:	f843 2f2c 	str.w	r2, [r3, #44]!
   16b90:	626b      	str	r3, [r5, #36]	; 0x24
   16b92:	62ac      	str	r4, [r5, #40]	; 0x28
   16b94:	2006      	movs	r0, #6
   16b96:	e73f      	b.n	16a18 <__gnu_unwind_pr_common+0xd0>
   16b98:	6aab      	ldr	r3, [r5, #40]	; 0x28
   16b9a:	429c      	cmp	r4, r3
   16b9c:	d1a3      	bne.n	16ae6 <__gnu_unwind_pr_common+0x19e>
   16b9e:	2204      	movs	r2, #4
   16ba0:	2700      	movs	r7, #0
   16ba2:	18a3      	adds	r3, r4, r2
   16ba4:	9902      	ldr	r1, [sp, #8]
   16ba6:	62a9      	str	r1, [r5, #40]	; 0x28
   16ba8:	62ef      	str	r7, [r5, #44]	; 0x2c
   16baa:	632a      	str	r2, [r5, #48]	; 0x30
   16bac:	636b      	str	r3, [r5, #52]	; 0x34
   16bae:	6823      	ldr	r3, [r4, #0]
   16bb0:	42bb      	cmp	r3, r7
   16bb2:	db1d      	blt.n	16bf0 <__gnu_unwind_pr_common+0x2a8>
   16bb4:	2301      	movs	r3, #1
   16bb6:	9301      	str	r3, [sp, #4]
   16bb8:	e720      	b.n	169fc <__gnu_unwind_pr_common+0xb4>
   16bba:	4648      	mov	r0, r9
   16bbc:	210d      	movs	r1, #13
   16bbe:	f7ff fe57 	bl	16870 <_Unwind_GetGR>
   16bc2:	6228      	str	r0, [r5, #32]
   16bc4:	9b06      	ldr	r3, [sp, #24]
   16bc6:	626b      	str	r3, [r5, #36]	; 0x24
   16bc8:	e7e3      	b.n	16b92 <__gnu_unwind_pr_common+0x24a>
   16bca:	4620      	mov	r0, r4
   16bcc:	f7ff fc68 	bl	164a0 <selfrel_offset31>
   16bd0:	3404      	adds	r4, #4
   16bd2:	4606      	mov	r6, r0
   16bd4:	63ac      	str	r4, [r5, #56]	; 0x38
   16bd6:	4628      	mov	r0, r5
   16bd8:	f7f6 fd26 	bl	d628 <__cxa_begin_cleanup>
   16bdc:	2800      	cmp	r0, #0
   16bde:	f43f af1a 	beq.w	16a16 <__gnu_unwind_pr_common+0xce>
   16be2:	4648      	mov	r0, r9
   16be4:	4632      	mov	r2, r6
   16be6:	210f      	movs	r1, #15
   16be8:	f7ff fe68 	bl	168bc <_Unwind_SetGR>
   16bec:	2007      	movs	r0, #7
   16bee:	e713      	b.n	16a18 <__gnu_unwind_pr_common+0xd0>
   16bf0:	4608      	mov	r0, r1
   16bf2:	3001      	adds	r0, #1
   16bf4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   16bf8:	f7ff fc52 	bl	164a0 <selfrel_offset31>
   16bfc:	210f      	movs	r1, #15
   16bfe:	4602      	mov	r2, r0
   16c00:	4648      	mov	r0, r9
   16c02:	f7ff fe5b 	bl	168bc <_Unwind_SetGR>
   16c06:	4648      	mov	r0, r9
   16c08:	462a      	mov	r2, r5
   16c0a:	4639      	mov	r1, r7
   16c0c:	f7ff fe56 	bl	168bc <_Unwind_SetGR>
   16c10:	2007      	movs	r0, #7
   16c12:	e701      	b.n	16a18 <__gnu_unwind_pr_common+0xd0>
   16c14:	0000e345 	.word	0x0000e345

00016c18 <__aeabi_unwind_cpp_pr0>:
   16c18:	2300      	movs	r3, #0
   16c1a:	e695      	b.n	16948 <__gnu_unwind_pr_common>

00016c1c <__aeabi_unwind_cpp_pr1>:
   16c1c:	2301      	movs	r3, #1
   16c1e:	e693      	b.n	16948 <__gnu_unwind_pr_common>

00016c20 <__aeabi_unwind_cpp_pr2>:
   16c20:	2302      	movs	r3, #2
   16c22:	e691      	b.n	16948 <__gnu_unwind_pr_common>

00016c24 <_Unwind_VRS_Pop>:
   16c24:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c26:	4604      	mov	r4, r0
   16c28:	b0c5      	sub	sp, #276	; 0x114
   16c2a:	2904      	cmp	r1, #4
   16c2c:	d80d      	bhi.n	16c4a <_Unwind_VRS_Pop+0x26>
   16c2e:	e8df f001 	tbb	[pc, r1]
   16c32:	0353      	.short	0x0353
   16c34:	310c      	.short	0x310c
   16c36:	0f          	.byte	0x0f
   16c37:	00          	.byte	0x00
   16c38:	2b01      	cmp	r3, #1
   16c3a:	ea4f 4612 	mov.w	r6, r2, lsr #16
   16c3e:	b295      	uxth	r5, r2
   16c40:	d162      	bne.n	16d08 <_Unwind_VRS_Pop+0xe4>
   16c42:	1972      	adds	r2, r6, r5
   16c44:	2a10      	cmp	r2, #16
   16c46:	f240 809b 	bls.w	16d80 <_Unwind_VRS_Pop+0x15c>
   16c4a:	2002      	movs	r0, #2
   16c4c:	b045      	add	sp, #276	; 0x114
   16c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16c50:	2b00      	cmp	r3, #0
   16c52:	d1fa      	bne.n	16c4a <_Unwind_VRS_Pop+0x26>
   16c54:	2a10      	cmp	r2, #16
   16c56:	d8f8      	bhi.n	16c4a <_Unwind_VRS_Pop+0x26>
   16c58:	6823      	ldr	r3, [r4, #0]
   16c5a:	06d8      	lsls	r0, r3, #27
   16c5c:	f100 80c6 	bmi.w	16dec <_Unwind_VRS_Pop+0x1c8>
   16c60:	ae22      	add	r6, sp, #136	; 0x88
   16c62:	4630      	mov	r0, r6
   16c64:	9201      	str	r2, [sp, #4]
   16c66:	f000 f973 	bl	16f50 <__gnu_Unwind_Save_WMMXC>
   16c6a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   16c6c:	9a01      	ldr	r2, [sp, #4]
   16c6e:	2300      	movs	r3, #0
   16c70:	2501      	movs	r5, #1
   16c72:	fa05 f103 	lsl.w	r1, r5, r3
   16c76:	4211      	tst	r1, r2
   16c78:	d003      	beq.n	16c82 <_Unwind_VRS_Pop+0x5e>
   16c7a:	6801      	ldr	r1, [r0, #0]
   16c7c:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
   16c80:	3004      	adds	r0, #4
   16c82:	3301      	adds	r3, #1
   16c84:	2b04      	cmp	r3, #4
   16c86:	d1f4      	bne.n	16c72 <_Unwind_VRS_Pop+0x4e>
   16c88:	63a0      	str	r0, [r4, #56]	; 0x38
   16c8a:	4630      	mov	r0, r6
   16c8c:	f000 f956 	bl	16f3c <__gnu_Unwind_Restore_WMMXC>
   16c90:	2000      	movs	r0, #0
   16c92:	e7db      	b.n	16c4c <_Unwind_VRS_Pop+0x28>
   16c94:	2b03      	cmp	r3, #3
   16c96:	d1d8      	bne.n	16c4a <_Unwind_VRS_Pop+0x26>
   16c98:	0c15      	lsrs	r5, r2, #16
   16c9a:	b297      	uxth	r7, r2
   16c9c:	19eb      	adds	r3, r5, r7
   16c9e:	2b10      	cmp	r3, #16
   16ca0:	d8d3      	bhi.n	16c4a <_Unwind_VRS_Pop+0x26>
   16ca2:	6823      	ldr	r3, [r4, #0]
   16ca4:	071e      	lsls	r6, r3, #28
   16ca6:	f100 80b5 	bmi.w	16e14 <_Unwind_VRS_Pop+0x1f0>
   16caa:	ae22      	add	r6, sp, #136	; 0x88
   16cac:	4630      	mov	r0, r6
   16cae:	f000 f923 	bl	16ef8 <__gnu_Unwind_Save_WMMXD>
   16cb2:	00ed      	lsls	r5, r5, #3
   16cb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16cb6:	b14f      	cbz	r7, 16ccc <_Unwind_VRS_Pop+0xa8>
   16cb8:	3d04      	subs	r5, #4
   16cba:	1971      	adds	r1, r6, r5
   16cbc:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
   16cc0:	f853 2b04 	ldr.w	r2, [r3], #4
   16cc4:	f841 2f04 	str.w	r2, [r1, #4]!
   16cc8:	4283      	cmp	r3, r0
   16cca:	d1f9      	bne.n	16cc0 <_Unwind_VRS_Pop+0x9c>
   16ccc:	4630      	mov	r0, r6
   16cce:	63a3      	str	r3, [r4, #56]	; 0x38
   16cd0:	f000 f8f0 	bl	16eb4 <__gnu_Unwind_Restore_WMMXD>
   16cd4:	2000      	movs	r0, #0
   16cd6:	e7b9      	b.n	16c4c <_Unwind_VRS_Pop+0x28>
   16cd8:	2b00      	cmp	r3, #0
   16cda:	d1b6      	bne.n	16c4a <_Unwind_VRS_Pop+0x26>
   16cdc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
   16cde:	b297      	uxth	r7, r2
   16ce0:	1d20      	adds	r0, r4, #4
   16ce2:	2601      	movs	r6, #1
   16ce4:	fa06 f103 	lsl.w	r1, r6, r3
   16ce8:	4239      	tst	r1, r7
   16cea:	f103 0301 	add.w	r3, r3, #1
   16cee:	d002      	beq.n	16cf6 <_Unwind_VRS_Pop+0xd2>
   16cf0:	6829      	ldr	r1, [r5, #0]
   16cf2:	6001      	str	r1, [r0, #0]
   16cf4:	3504      	adds	r5, #4
   16cf6:	2b10      	cmp	r3, #16
   16cf8:	f100 0004 	add.w	r0, r0, #4
   16cfc:	d1f2      	bne.n	16ce4 <_Unwind_VRS_Pop+0xc0>
   16cfe:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
   16d02:	d13b      	bne.n	16d7c <_Unwind_VRS_Pop+0x158>
   16d04:	63a5      	str	r5, [r4, #56]	; 0x38
   16d06:	e7a1      	b.n	16c4c <_Unwind_VRS_Pop+0x28>
   16d08:	2b05      	cmp	r3, #5
   16d0a:	d19e      	bne.n	16c4a <_Unwind_VRS_Pop+0x26>
   16d0c:	1977      	adds	r7, r6, r5
   16d0e:	2f20      	cmp	r7, #32
   16d10:	d89b      	bhi.n	16c4a <_Unwind_VRS_Pop+0x26>
   16d12:	2e0f      	cmp	r6, #15
   16d14:	d966      	bls.n	16de4 <_Unwind_VRS_Pop+0x1c0>
   16d16:	462f      	mov	r7, r5
   16d18:	2d00      	cmp	r5, #0
   16d1a:	d13a      	bne.n	16d92 <_Unwind_VRS_Pop+0x16e>
   16d1c:	462a      	mov	r2, r5
   16d1e:	2700      	movs	r7, #0
   16d20:	2a00      	cmp	r2, #0
   16d22:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   16d24:	dd72      	ble.n	16e0c <_Unwind_VRS_Pop+0x1e8>
   16d26:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   16d2a:	4601      	mov	r1, r0
   16d2c:	a844      	add	r0, sp, #272	; 0x110
   16d2e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   16d32:	388c      	subs	r0, #140	; 0x8c
   16d34:	f851 5b04 	ldr.w	r5, [r1], #4
   16d38:	f840 5f04 	str.w	r5, [r0, #4]!
   16d3c:	4291      	cmp	r1, r2
   16d3e:	d1f9      	bne.n	16d34 <_Unwind_VRS_Pop+0x110>
   16d40:	4608      	mov	r0, r1
   16d42:	b197      	cbz	r7, 16d6a <_Unwind_VRS_Pop+0x146>
   16d44:	2e10      	cmp	r6, #16
   16d46:	4632      	mov	r2, r6
   16d48:	a944      	add	r1, sp, #272	; 0x110
   16d4a:	bf38      	it	cc
   16d4c:	2210      	movcc	r2, #16
   16d4e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   16d52:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
   16d56:	0079      	lsls	r1, r7, #1
   16d58:	3a04      	subs	r2, #4
   16d5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   16d5e:	f850 5b04 	ldr.w	r5, [r0], #4
   16d62:	f842 5f04 	str.w	r5, [r2, #4]!
   16d66:	4288      	cmp	r0, r1
   16d68:	d1f9      	bne.n	16d5e <_Unwind_VRS_Pop+0x13a>
   16d6a:	2b01      	cmp	r3, #1
   16d6c:	d048      	beq.n	16e00 <_Unwind_VRS_Pop+0x1dc>
   16d6e:	2e0f      	cmp	r6, #15
   16d70:	63a1      	str	r1, [r4, #56]	; 0x38
   16d72:	d933      	bls.n	16ddc <_Unwind_VRS_Pop+0x1b8>
   16d74:	b117      	cbz	r7, 16d7c <_Unwind_VRS_Pop+0x158>
   16d76:	a802      	add	r0, sp, #8
   16d78:	f000 f894 	bl	16ea4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   16d7c:	2000      	movs	r0, #0
   16d7e:	e765      	b.n	16c4c <_Unwind_VRS_Pop+0x28>
   16d80:	2e0f      	cmp	r6, #15
   16d82:	f63f af62 	bhi.w	16c4a <_Unwind_VRS_Pop+0x26>
   16d86:	2700      	movs	r7, #0
   16d88:	6822      	ldr	r2, [r4, #0]
   16d8a:	07d1      	lsls	r1, r2, #31
   16d8c:	d417      	bmi.n	16dbe <_Unwind_VRS_Pop+0x19a>
   16d8e:	2f00      	cmp	r7, #0
   16d90:	d060      	beq.n	16e54 <_Unwind_VRS_Pop+0x230>
   16d92:	6822      	ldr	r2, [r4, #0]
   16d94:	0751      	lsls	r1, r2, #29
   16d96:	d445      	bmi.n	16e24 <_Unwind_VRS_Pop+0x200>
   16d98:	2b01      	cmp	r3, #1
   16d9a:	d04d      	beq.n	16e38 <_Unwind_VRS_Pop+0x214>
   16d9c:	2e0f      	cmp	r6, #15
   16d9e:	d806      	bhi.n	16dae <_Unwind_VRS_Pop+0x18a>
   16da0:	a822      	add	r0, sp, #136	; 0x88
   16da2:	9301      	str	r3, [sp, #4]
   16da4:	f000 f87a 	bl	16e9c <__gnu_Unwind_Save_VFP_D>
   16da8:	9b01      	ldr	r3, [sp, #4]
   16daa:	2f00      	cmp	r7, #0
   16dac:	d0b6      	beq.n	16d1c <_Unwind_VRS_Pop+0xf8>
   16dae:	a802      	add	r0, sp, #8
   16db0:	9301      	str	r3, [sp, #4]
   16db2:	f000 f87b 	bl	16eac <__gnu_Unwind_Save_VFP_D_16_to_31>
   16db6:	9b01      	ldr	r3, [sp, #4]
   16db8:	f1c6 0210 	rsb	r2, r6, #16
   16dbc:	e7b0      	b.n	16d20 <_Unwind_VRS_Pop+0xfc>
   16dbe:	f022 0101 	bic.w	r1, r2, #1
   16dc2:	2b05      	cmp	r3, #5
   16dc4:	6021      	str	r1, [r4, #0]
   16dc6:	9301      	str	r3, [sp, #4]
   16dc8:	4620      	mov	r0, r4
   16dca:	d03b      	beq.n	16e44 <_Unwind_VRS_Pop+0x220>
   16dcc:	f022 0203 	bic.w	r2, r2, #3
   16dd0:	f840 2b48 	str.w	r2, [r0], #72
   16dd4:	f000 f85a 	bl	16e8c <__gnu_Unwind_Save_VFP>
   16dd8:	9b01      	ldr	r3, [sp, #4]
   16dda:	e7d8      	b.n	16d8e <_Unwind_VRS_Pop+0x16a>
   16ddc:	a822      	add	r0, sp, #136	; 0x88
   16dde:	f000 f859 	bl	16e94 <__gnu_Unwind_Restore_VFP_D>
   16de2:	e7c7      	b.n	16d74 <_Unwind_VRS_Pop+0x150>
   16de4:	2f10      	cmp	r7, #16
   16de6:	d9ce      	bls.n	16d86 <_Unwind_VRS_Pop+0x162>
   16de8:	3f10      	subs	r7, #16
   16dea:	e7cd      	b.n	16d88 <_Unwind_VRS_Pop+0x164>
   16dec:	f023 0310 	bic.w	r3, r3, #16
   16df0:	6023      	str	r3, [r4, #0]
   16df2:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   16df6:	9201      	str	r2, [sp, #4]
   16df8:	f000 f8aa 	bl	16f50 <__gnu_Unwind_Save_WMMXC>
   16dfc:	9a01      	ldr	r2, [sp, #4]
   16dfe:	e72f      	b.n	16c60 <_Unwind_VRS_Pop+0x3c>
   16e00:	3104      	adds	r1, #4
   16e02:	63a1      	str	r1, [r4, #56]	; 0x38
   16e04:	a822      	add	r0, sp, #136	; 0x88
   16e06:	f000 f83d 	bl	16e84 <__gnu_Unwind_Restore_VFP>
   16e0a:	e7b7      	b.n	16d7c <_Unwind_VRS_Pop+0x158>
   16e0c:	2f00      	cmp	r7, #0
   16e0e:	d199      	bne.n	16d44 <_Unwind_VRS_Pop+0x120>
   16e10:	4601      	mov	r1, r0
   16e12:	e7aa      	b.n	16d6a <_Unwind_VRS_Pop+0x146>
   16e14:	f023 0308 	bic.w	r3, r3, #8
   16e18:	6023      	str	r3, [r4, #0]
   16e1a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   16e1e:	f000 f86b 	bl	16ef8 <__gnu_Unwind_Save_WMMXD>
   16e22:	e742      	b.n	16caa <_Unwind_VRS_Pop+0x86>
   16e24:	4620      	mov	r0, r4
   16e26:	f022 0204 	bic.w	r2, r2, #4
   16e2a:	f840 2bd0 	str.w	r2, [r0], #208
   16e2e:	9301      	str	r3, [sp, #4]
   16e30:	f000 f83c 	bl	16eac <__gnu_Unwind_Save_VFP_D_16_to_31>
   16e34:	9b01      	ldr	r3, [sp, #4]
   16e36:	e7af      	b.n	16d98 <_Unwind_VRS_Pop+0x174>
   16e38:	a822      	add	r0, sp, #136	; 0x88
   16e3a:	9301      	str	r3, [sp, #4]
   16e3c:	f000 f826 	bl	16e8c <__gnu_Unwind_Save_VFP>
   16e40:	9b01      	ldr	r3, [sp, #4]
   16e42:	e7b9      	b.n	16db8 <_Unwind_VRS_Pop+0x194>
   16e44:	f041 0102 	orr.w	r1, r1, #2
   16e48:	f840 1b48 	str.w	r1, [r0], #72
   16e4c:	f000 f826 	bl	16e9c <__gnu_Unwind_Save_VFP_D>
   16e50:	9b01      	ldr	r3, [sp, #4]
   16e52:	e79c      	b.n	16d8e <_Unwind_VRS_Pop+0x16a>
   16e54:	2b01      	cmp	r3, #1
   16e56:	d003      	beq.n	16e60 <_Unwind_VRS_Pop+0x23c>
   16e58:	2e0f      	cmp	r6, #15
   16e5a:	f63f af5f 	bhi.w	16d1c <_Unwind_VRS_Pop+0xf8>
   16e5e:	e79f      	b.n	16da0 <_Unwind_VRS_Pop+0x17c>
   16e60:	a822      	add	r0, sp, #136	; 0x88
   16e62:	9301      	str	r3, [sp, #4]
   16e64:	f000 f812 	bl	16e8c <__gnu_Unwind_Save_VFP>
   16e68:	9b01      	ldr	r3, [sp, #4]
   16e6a:	e757      	b.n	16d1c <_Unwind_VRS_Pop+0xf8>

00016e6c <__restore_core_regs>:
   16e6c:	f100 0134 	add.w	r1, r0, #52	; 0x34
   16e70:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   16e74:	469c      	mov	ip, r3
   16e76:	46a6      	mov	lr, r4
   16e78:	f84c 5d04 	str.w	r5, [ip, #-4]!
   16e7c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   16e80:	46e5      	mov	sp, ip
   16e82:	bd00      	pop	{pc}

00016e84 <__gnu_Unwind_Restore_VFP>:
   16e84:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   16e88:	4770      	bx	lr
   16e8a:	bf00      	nop

00016e8c <__gnu_Unwind_Save_VFP>:
   16e8c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   16e90:	4770      	bx	lr
   16e92:	bf00      	nop

00016e94 <__gnu_Unwind_Restore_VFP_D>:
   16e94:	ec90 0b20 	vldmia	r0, {d0-d15}
   16e98:	4770      	bx	lr
   16e9a:	bf00      	nop

00016e9c <__gnu_Unwind_Save_VFP_D>:
   16e9c:	ec80 0b20 	vstmia	r0, {d0-d15}
   16ea0:	4770      	bx	lr
   16ea2:	bf00      	nop

00016ea4 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   16ea4:	ecd0 0b20 	vldmia	r0, {d16-d31}
   16ea8:	4770      	bx	lr
   16eaa:	bf00      	nop

00016eac <__gnu_Unwind_Save_VFP_D_16_to_31>:
   16eac:	ecc0 0b20 	vstmia	r0, {d16-d31}
   16eb0:	4770      	bx	lr
   16eb2:	bf00      	nop

00016eb4 <__gnu_Unwind_Restore_WMMXD>:
   16eb4:	ecf0 0102 	ldfe	f0, [r0], #8
   16eb8:	ecf0 1102 	ldfe	f1, [r0], #8
   16ebc:	ecf0 2102 	ldfe	f2, [r0], #8
   16ec0:	ecf0 3102 	ldfe	f3, [r0], #8
   16ec4:	ecf0 4102 	ldfe	f4, [r0], #8
   16ec8:	ecf0 5102 	ldfe	f5, [r0], #8
   16ecc:	ecf0 6102 	ldfe	f6, [r0], #8
   16ed0:	ecf0 7102 	ldfe	f7, [r0], #8
   16ed4:	ecf0 8102 	ldfp	f0, [r0], #8
   16ed8:	ecf0 9102 	ldfp	f1, [r0], #8
   16edc:	ecf0 a102 	ldfp	f2, [r0], #8
   16ee0:	ecf0 b102 	ldfp	f3, [r0], #8
   16ee4:	ecf0 c102 	ldfp	f4, [r0], #8
   16ee8:	ecf0 d102 	ldfp	f5, [r0], #8
   16eec:	ecf0 e102 	ldfp	f6, [r0], #8
   16ef0:	ecf0 f102 	ldfp	f7, [r0], #8
   16ef4:	4770      	bx	lr
   16ef6:	bf00      	nop

00016ef8 <__gnu_Unwind_Save_WMMXD>:
   16ef8:	ece0 0102 	stfe	f0, [r0], #8
   16efc:	ece0 1102 	stfe	f1, [r0], #8
   16f00:	ece0 2102 	stfe	f2, [r0], #8
   16f04:	ece0 3102 	stfe	f3, [r0], #8
   16f08:	ece0 4102 	stfe	f4, [r0], #8
   16f0c:	ece0 5102 	stfe	f5, [r0], #8
   16f10:	ece0 6102 	stfe	f6, [r0], #8
   16f14:	ece0 7102 	stfe	f7, [r0], #8
   16f18:	ece0 8102 	stfp	f0, [r0], #8
   16f1c:	ece0 9102 	stfp	f1, [r0], #8
   16f20:	ece0 a102 	stfp	f2, [r0], #8
   16f24:	ece0 b102 	stfp	f3, [r0], #8
   16f28:	ece0 c102 	stfp	f4, [r0], #8
   16f2c:	ece0 d102 	stfp	f5, [r0], #8
   16f30:	ece0 e102 	stfp	f6, [r0], #8
   16f34:	ece0 f102 	stfp	f7, [r0], #8
   16f38:	4770      	bx	lr
   16f3a:	bf00      	nop

00016f3c <__gnu_Unwind_Restore_WMMXC>:
   16f3c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   16f40:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   16f44:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   16f48:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   16f4c:	4770      	bx	lr
   16f4e:	bf00      	nop

00016f50 <__gnu_Unwind_Save_WMMXC>:
   16f50:	fca0 8101 	stc2	1, cr8, [r0], #4
   16f54:	fca0 9101 	stc2	1, cr9, [r0], #4
   16f58:	fca0 a101 	stc2	1, cr10, [r0], #4
   16f5c:	fca0 b101 	stc2	1, cr11, [r0], #4
   16f60:	4770      	bx	lr
   16f62:	bf00      	nop

00016f64 <_Unwind_RaiseException>:
   16f64:	46ec      	mov	ip, sp
   16f66:	b500      	push	{lr}
   16f68:	e92d 5000 	stmdb	sp!, {ip, lr}
   16f6c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   16f70:	f04f 0300 	mov.w	r3, #0
   16f74:	e92d 000c 	stmdb	sp!, {r2, r3}
   16f78:	a901      	add	r1, sp, #4
   16f7a:	f7ff fbf3 	bl	16764 <__gnu_Unwind_RaiseException>
   16f7e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   16f82:	b012      	add	sp, #72	; 0x48
   16f84:	4770      	bx	lr
   16f86:	bf00      	nop

00016f88 <_Unwind_Resume>:
   16f88:	46ec      	mov	ip, sp
   16f8a:	b500      	push	{lr}
   16f8c:	e92d 5000 	stmdb	sp!, {ip, lr}
   16f90:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   16f94:	f04f 0300 	mov.w	r3, #0
   16f98:	e92d 000c 	stmdb	sp!, {r2, r3}
   16f9c:	a901      	add	r1, sp, #4
   16f9e:	f7ff fc1b 	bl	167d8 <__gnu_Unwind_Resume>
   16fa2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   16fa6:	b012      	add	sp, #72	; 0x48
   16fa8:	4770      	bx	lr
   16faa:	bf00      	nop

00016fac <_Unwind_Resume_or_Rethrow>:
   16fac:	46ec      	mov	ip, sp
   16fae:	b500      	push	{lr}
   16fb0:	e92d 5000 	stmdb	sp!, {ip, lr}
   16fb4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   16fb8:	f04f 0300 	mov.w	r3, #0
   16fbc:	e92d 000c 	stmdb	sp!, {r2, r3}
   16fc0:	a901      	add	r1, sp, #4
   16fc2:	f7ff fc2b 	bl	1681c <__gnu_Unwind_Resume_or_Rethrow>
   16fc6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   16fca:	b012      	add	sp, #72	; 0x48
   16fcc:	4770      	bx	lr
   16fce:	bf00      	nop

00016fd0 <_Unwind_ForcedUnwind>:
   16fd0:	46ec      	mov	ip, sp
   16fd2:	b500      	push	{lr}
   16fd4:	e92d 5000 	stmdb	sp!, {ip, lr}
   16fd8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   16fdc:	f04f 0300 	mov.w	r3, #0
   16fe0:	e92d 000c 	stmdb	sp!, {r2, r3}
   16fe4:	ab01      	add	r3, sp, #4
   16fe6:	f7ff fbed 	bl	167c4 <__gnu_Unwind_ForcedUnwind>
   16fea:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   16fee:	b012      	add	sp, #72	; 0x48
   16ff0:	4770      	bx	lr
   16ff2:	bf00      	nop

00016ff4 <_Unwind_Backtrace>:
   16ff4:	46ec      	mov	ip, sp
   16ff6:	b500      	push	{lr}
   16ff8:	e92d 5000 	stmdb	sp!, {ip, lr}
   16ffc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   17000:	f04f 0300 	mov.w	r3, #0
   17004:	e92d 000c 	stmdb	sp!, {r2, r3}
   17008:	aa01      	add	r2, sp, #4
   1700a:	f7ff fc65 	bl	168d8 <__gnu_Unwind_Backtrace>
   1700e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   17012:	b012      	add	sp, #72	; 0x48
   17014:	4770      	bx	lr
   17016:	bf00      	nop

00017018 <next_unwind_byte>:
   17018:	7a02      	ldrb	r2, [r0, #8]
   1701a:	b91a      	cbnz	r2, 17024 <next_unwind_byte+0xc>
   1701c:	7a43      	ldrb	r3, [r0, #9]
   1701e:	b943      	cbnz	r3, 17032 <next_unwind_byte+0x1a>
   17020:	20b0      	movs	r0, #176	; 0xb0
   17022:	4770      	bx	lr
   17024:	6803      	ldr	r3, [r0, #0]
   17026:	3a01      	subs	r2, #1
   17028:	7202      	strb	r2, [r0, #8]
   1702a:	021a      	lsls	r2, r3, #8
   1702c:	6002      	str	r2, [r0, #0]
   1702e:	0e18      	lsrs	r0, r3, #24
   17030:	4770      	bx	lr
   17032:	6842      	ldr	r2, [r0, #4]
   17034:	3b01      	subs	r3, #1
   17036:	b410      	push	{r4}
   17038:	7243      	strb	r3, [r0, #9]
   1703a:	6813      	ldr	r3, [r2, #0]
   1703c:	2103      	movs	r1, #3
   1703e:	1d14      	adds	r4, r2, #4
   17040:	7201      	strb	r1, [r0, #8]
   17042:	021a      	lsls	r2, r3, #8
   17044:	6044      	str	r4, [r0, #4]
   17046:	6002      	str	r2, [r0, #0]
   17048:	bc10      	pop	{r4}
   1704a:	0e18      	lsrs	r0, r3, #24
   1704c:	4770      	bx	lr
   1704e:	bf00      	nop

00017050 <_Unwind_GetGR.constprop.0>:
   17050:	b500      	push	{lr}
   17052:	b085      	sub	sp, #20
   17054:	aa03      	add	r2, sp, #12
   17056:	2300      	movs	r3, #0
   17058:	9200      	str	r2, [sp, #0]
   1705a:	4619      	mov	r1, r3
   1705c:	220c      	movs	r2, #12
   1705e:	f7ff fbed 	bl	1683c <_Unwind_VRS_Get>
   17062:	9803      	ldr	r0, [sp, #12]
   17064:	b005      	add	sp, #20
   17066:	f85d fb04 	ldr.w	pc, [sp], #4
   1706a:	bf00      	nop

0001706c <unwind_UCB_from_context>:
   1706c:	e7f0      	b.n	17050 <_Unwind_GetGR.constprop.0>
   1706e:	bf00      	nop

00017070 <__gnu_unwind_execute>:
   17070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17074:	4606      	mov	r6, r0
   17076:	b085      	sub	sp, #20
   17078:	460f      	mov	r7, r1
   1707a:	f04f 0800 	mov.w	r8, #0
   1707e:	4638      	mov	r0, r7
   17080:	f7ff ffca 	bl	17018 <next_unwind_byte>
   17084:	28b0      	cmp	r0, #176	; 0xb0
   17086:	4604      	mov	r4, r0
   17088:	d023      	beq.n	170d2 <__gnu_unwind_execute+0x62>
   1708a:	0605      	lsls	r5, r0, #24
   1708c:	d427      	bmi.n	170de <__gnu_unwind_execute+0x6e>
   1708e:	2300      	movs	r3, #0
   17090:	f10d 090c 	add.w	r9, sp, #12
   17094:	4619      	mov	r1, r3
   17096:	0085      	lsls	r5, r0, #2
   17098:	220d      	movs	r2, #13
   1709a:	f8cd 9000 	str.w	r9, [sp]
   1709e:	4630      	mov	r0, r6
   170a0:	f7ff fbcc 	bl	1683c <_Unwind_VRS_Get>
   170a4:	b2ed      	uxtb	r5, r5
   170a6:	9b03      	ldr	r3, [sp, #12]
   170a8:	f8cd 9000 	str.w	r9, [sp]
   170ac:	0660      	lsls	r0, r4, #25
   170ae:	f105 0504 	add.w	r5, r5, #4
   170b2:	bf4c      	ite	mi
   170b4:	1b5d      	submi	r5, r3, r5
   170b6:	18ed      	addpl	r5, r5, r3
   170b8:	2300      	movs	r3, #0
   170ba:	4619      	mov	r1, r3
   170bc:	220d      	movs	r2, #13
   170be:	4630      	mov	r0, r6
   170c0:	9503      	str	r5, [sp, #12]
   170c2:	f7ff fbe1 	bl	16888 <_Unwind_VRS_Set>
   170c6:	4638      	mov	r0, r7
   170c8:	f7ff ffa6 	bl	17018 <next_unwind_byte>
   170cc:	28b0      	cmp	r0, #176	; 0xb0
   170ce:	4604      	mov	r4, r0
   170d0:	d1db      	bne.n	1708a <__gnu_unwind_execute+0x1a>
   170d2:	f1b8 0f00 	cmp.w	r8, #0
   170d6:	f000 8095 	beq.w	17204 <__gnu_unwind_execute+0x194>
   170da:	2000      	movs	r0, #0
   170dc:	e01c      	b.n	17118 <__gnu_unwind_execute+0xa8>
   170de:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   170e2:	2b80      	cmp	r3, #128	; 0x80
   170e4:	d05d      	beq.n	171a2 <__gnu_unwind_execute+0x132>
   170e6:	2b90      	cmp	r3, #144	; 0x90
   170e8:	d019      	beq.n	1711e <__gnu_unwind_execute+0xae>
   170ea:	2ba0      	cmp	r3, #160	; 0xa0
   170ec:	d02c      	beq.n	17148 <__gnu_unwind_execute+0xd8>
   170ee:	2bb0      	cmp	r3, #176	; 0xb0
   170f0:	d03f      	beq.n	17172 <__gnu_unwind_execute+0x102>
   170f2:	2bc0      	cmp	r3, #192	; 0xc0
   170f4:	d06c      	beq.n	171d0 <__gnu_unwind_execute+0x160>
   170f6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   170fa:	2bd0      	cmp	r3, #208	; 0xd0
   170fc:	d10b      	bne.n	17116 <__gnu_unwind_execute+0xa6>
   170fe:	f000 0207 	and.w	r2, r0, #7
   17102:	3201      	adds	r2, #1
   17104:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   17108:	2305      	movs	r3, #5
   1710a:	2101      	movs	r1, #1
   1710c:	4630      	mov	r0, r6
   1710e:	f7ff fd89 	bl	16c24 <_Unwind_VRS_Pop>
   17112:	2800      	cmp	r0, #0
   17114:	d0b3      	beq.n	1707e <__gnu_unwind_execute+0xe>
   17116:	2009      	movs	r0, #9
   17118:	b005      	add	sp, #20
   1711a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1711e:	f000 030d 	and.w	r3, r0, #13
   17122:	2b0d      	cmp	r3, #13
   17124:	d0f7      	beq.n	17116 <__gnu_unwind_execute+0xa6>
   17126:	ad03      	add	r5, sp, #12
   17128:	2300      	movs	r3, #0
   1712a:	f000 020f 	and.w	r2, r0, #15
   1712e:	4619      	mov	r1, r3
   17130:	9500      	str	r5, [sp, #0]
   17132:	4630      	mov	r0, r6
   17134:	f7ff fb82 	bl	1683c <_Unwind_VRS_Get>
   17138:	2300      	movs	r3, #0
   1713a:	9500      	str	r5, [sp, #0]
   1713c:	4619      	mov	r1, r3
   1713e:	220d      	movs	r2, #13
   17140:	4630      	mov	r0, r6
   17142:	f7ff fba1 	bl	16888 <_Unwind_VRS_Set>
   17146:	e79a      	b.n	1707e <__gnu_unwind_execute+0xe>
   17148:	43c2      	mvns	r2, r0
   1714a:	f002 0307 	and.w	r3, r2, #7
   1714e:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   17152:	411a      	asrs	r2, r3
   17154:	0701      	lsls	r1, r0, #28
   17156:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   1715a:	f04f 0300 	mov.w	r3, #0
   1715e:	bf48      	it	mi
   17160:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   17164:	4619      	mov	r1, r3
   17166:	4630      	mov	r0, r6
   17168:	f7ff fd5c 	bl	16c24 <_Unwind_VRS_Pop>
   1716c:	2800      	cmp	r0, #0
   1716e:	d1d2      	bne.n	17116 <__gnu_unwind_execute+0xa6>
   17170:	e785      	b.n	1707e <__gnu_unwind_execute+0xe>
   17172:	28b1      	cmp	r0, #177	; 0xb1
   17174:	d057      	beq.n	17226 <__gnu_unwind_execute+0x1b6>
   17176:	28b2      	cmp	r0, #178	; 0xb2
   17178:	d068      	beq.n	1724c <__gnu_unwind_execute+0x1dc>
   1717a:	28b3      	cmp	r0, #179	; 0xb3
   1717c:	f000 8095 	beq.w	172aa <__gnu_unwind_execute+0x23a>
   17180:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   17184:	2bb4      	cmp	r3, #180	; 0xb4
   17186:	d0c6      	beq.n	17116 <__gnu_unwind_execute+0xa6>
   17188:	f000 0207 	and.w	r2, r0, #7
   1718c:	3201      	adds	r2, #1
   1718e:	2301      	movs	r3, #1
   17190:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   17194:	4619      	mov	r1, r3
   17196:	4630      	mov	r0, r6
   17198:	f7ff fd44 	bl	16c24 <_Unwind_VRS_Pop>
   1719c:	2800      	cmp	r0, #0
   1719e:	d1ba      	bne.n	17116 <__gnu_unwind_execute+0xa6>
   171a0:	e76d      	b.n	1707e <__gnu_unwind_execute+0xe>
   171a2:	4638      	mov	r0, r7
   171a4:	f7ff ff38 	bl	17018 <next_unwind_byte>
   171a8:	0224      	lsls	r4, r4, #8
   171aa:	4304      	orrs	r4, r0
   171ac:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   171b0:	d0b1      	beq.n	17116 <__gnu_unwind_execute+0xa6>
   171b2:	0124      	lsls	r4, r4, #4
   171b4:	2300      	movs	r3, #0
   171b6:	b2a2      	uxth	r2, r4
   171b8:	4619      	mov	r1, r3
   171ba:	4630      	mov	r0, r6
   171bc:	f7ff fd32 	bl	16c24 <_Unwind_VRS_Pop>
   171c0:	2800      	cmp	r0, #0
   171c2:	d1a8      	bne.n	17116 <__gnu_unwind_execute+0xa6>
   171c4:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   171c8:	bf18      	it	ne
   171ca:	f04f 0801 	movne.w	r8, #1
   171ce:	e756      	b.n	1707e <__gnu_unwind_execute+0xe>
   171d0:	28c6      	cmp	r0, #198	; 0xc6
   171d2:	d07d      	beq.n	172d0 <__gnu_unwind_execute+0x260>
   171d4:	28c7      	cmp	r0, #199	; 0xc7
   171d6:	f000 8086 	beq.w	172e6 <__gnu_unwind_execute+0x276>
   171da:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   171de:	2bc0      	cmp	r3, #192	; 0xc0
   171e0:	f000 8094 	beq.w	1730c <__gnu_unwind_execute+0x29c>
   171e4:	28c8      	cmp	r0, #200	; 0xc8
   171e6:	f000 809f 	beq.w	17328 <__gnu_unwind_execute+0x2b8>
   171ea:	28c9      	cmp	r0, #201	; 0xc9
   171ec:	d193      	bne.n	17116 <__gnu_unwind_execute+0xa6>
   171ee:	4638      	mov	r0, r7
   171f0:	f7ff ff12 	bl	17018 <next_unwind_byte>
   171f4:	0302      	lsls	r2, r0, #12
   171f6:	f000 000f 	and.w	r0, r0, #15
   171fa:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   171fe:	3001      	adds	r0, #1
   17200:	4302      	orrs	r2, r0
   17202:	e781      	b.n	17108 <__gnu_unwind_execute+0x98>
   17204:	ac03      	add	r4, sp, #12
   17206:	4643      	mov	r3, r8
   17208:	220e      	movs	r2, #14
   1720a:	4641      	mov	r1, r8
   1720c:	9400      	str	r4, [sp, #0]
   1720e:	4630      	mov	r0, r6
   17210:	f7ff fb14 	bl	1683c <_Unwind_VRS_Get>
   17214:	9400      	str	r4, [sp, #0]
   17216:	4630      	mov	r0, r6
   17218:	4643      	mov	r3, r8
   1721a:	220f      	movs	r2, #15
   1721c:	4641      	mov	r1, r8
   1721e:	f7ff fb33 	bl	16888 <_Unwind_VRS_Set>
   17222:	4640      	mov	r0, r8
   17224:	e778      	b.n	17118 <__gnu_unwind_execute+0xa8>
   17226:	4638      	mov	r0, r7
   17228:	f7ff fef6 	bl	17018 <next_unwind_byte>
   1722c:	2800      	cmp	r0, #0
   1722e:	f43f af72 	beq.w	17116 <__gnu_unwind_execute+0xa6>
   17232:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   17236:	f47f af6e 	bne.w	17116 <__gnu_unwind_execute+0xa6>
   1723a:	4602      	mov	r2, r0
   1723c:	4619      	mov	r1, r3
   1723e:	4630      	mov	r0, r6
   17240:	f7ff fcf0 	bl	16c24 <_Unwind_VRS_Pop>
   17244:	2800      	cmp	r0, #0
   17246:	f47f af66 	bne.w	17116 <__gnu_unwind_execute+0xa6>
   1724a:	e718      	b.n	1707e <__gnu_unwind_execute+0xe>
   1724c:	2300      	movs	r3, #0
   1724e:	f10d 090c 	add.w	r9, sp, #12
   17252:	220d      	movs	r2, #13
   17254:	4619      	mov	r1, r3
   17256:	f8cd 9000 	str.w	r9, [sp]
   1725a:	4630      	mov	r0, r6
   1725c:	f7ff faee 	bl	1683c <_Unwind_VRS_Get>
   17260:	4638      	mov	r0, r7
   17262:	f7ff fed9 	bl	17018 <next_unwind_byte>
   17266:	0602      	lsls	r2, r0, #24
   17268:	f04f 0402 	mov.w	r4, #2
   1726c:	d50c      	bpl.n	17288 <__gnu_unwind_execute+0x218>
   1726e:	9b03      	ldr	r3, [sp, #12]
   17270:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   17274:	40a0      	lsls	r0, r4
   17276:	4403      	add	r3, r0
   17278:	4638      	mov	r0, r7
   1727a:	9303      	str	r3, [sp, #12]
   1727c:	f7ff fecc 	bl	17018 <next_unwind_byte>
   17280:	0603      	lsls	r3, r0, #24
   17282:	f104 0407 	add.w	r4, r4, #7
   17286:	d4f2      	bmi.n	1726e <__gnu_unwind_execute+0x1fe>
   17288:	9b03      	ldr	r3, [sp, #12]
   1728a:	f8cd 9000 	str.w	r9, [sp]
   1728e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   17292:	40a2      	lsls	r2, r4
   17294:	f503 7401 	add.w	r4, r3, #516	; 0x204
   17298:	2300      	movs	r3, #0
   1729a:	4414      	add	r4, r2
   1729c:	4619      	mov	r1, r3
   1729e:	220d      	movs	r2, #13
   172a0:	4630      	mov	r0, r6
   172a2:	9403      	str	r4, [sp, #12]
   172a4:	f7ff faf0 	bl	16888 <_Unwind_VRS_Set>
   172a8:	e6e9      	b.n	1707e <__gnu_unwind_execute+0xe>
   172aa:	4638      	mov	r0, r7
   172ac:	f7ff feb4 	bl	17018 <next_unwind_byte>
   172b0:	0301      	lsls	r1, r0, #12
   172b2:	f000 000f 	and.w	r0, r0, #15
   172b6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   172ba:	1c42      	adds	r2, r0, #1
   172bc:	2301      	movs	r3, #1
   172be:	430a      	orrs	r2, r1
   172c0:	4630      	mov	r0, r6
   172c2:	4619      	mov	r1, r3
   172c4:	f7ff fcae 	bl	16c24 <_Unwind_VRS_Pop>
   172c8:	2800      	cmp	r0, #0
   172ca:	f47f af24 	bne.w	17116 <__gnu_unwind_execute+0xa6>
   172ce:	e6d6      	b.n	1707e <__gnu_unwind_execute+0xe>
   172d0:	4638      	mov	r0, r7
   172d2:	f7ff fea1 	bl	17018 <next_unwind_byte>
   172d6:	0301      	lsls	r1, r0, #12
   172d8:	f000 000f 	and.w	r0, r0, #15
   172dc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   172e0:	1c42      	adds	r2, r0, #1
   172e2:	2303      	movs	r3, #3
   172e4:	e7eb      	b.n	172be <__gnu_unwind_execute+0x24e>
   172e6:	4638      	mov	r0, r7
   172e8:	f7ff fe96 	bl	17018 <next_unwind_byte>
   172ec:	2800      	cmp	r0, #0
   172ee:	f43f af12 	beq.w	17116 <__gnu_unwind_execute+0xa6>
   172f2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   172f6:	f47f af0e 	bne.w	17116 <__gnu_unwind_execute+0xa6>
   172fa:	4602      	mov	r2, r0
   172fc:	2104      	movs	r1, #4
   172fe:	4630      	mov	r0, r6
   17300:	f7ff fc90 	bl	16c24 <_Unwind_VRS_Pop>
   17304:	2800      	cmp	r0, #0
   17306:	f47f af06 	bne.w	17116 <__gnu_unwind_execute+0xa6>
   1730a:	e6b8      	b.n	1707e <__gnu_unwind_execute+0xe>
   1730c:	f000 020f 	and.w	r2, r0, #15
   17310:	3201      	adds	r2, #1
   17312:	2303      	movs	r3, #3
   17314:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   17318:	4619      	mov	r1, r3
   1731a:	4630      	mov	r0, r6
   1731c:	f7ff fc82 	bl	16c24 <_Unwind_VRS_Pop>
   17320:	2800      	cmp	r0, #0
   17322:	f47f aef8 	bne.w	17116 <__gnu_unwind_execute+0xa6>
   17326:	e6aa      	b.n	1707e <__gnu_unwind_execute+0xe>
   17328:	4638      	mov	r0, r7
   1732a:	f7ff fe75 	bl	17018 <next_unwind_byte>
   1732e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   17332:	f000 030f 	and.w	r3, r0, #15
   17336:	3210      	adds	r2, #16
   17338:	3301      	adds	r3, #1
   1733a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   1733e:	e6e3      	b.n	17108 <__gnu_unwind_execute+0x98>

00017340 <__gnu_unwind_frame>:
   17340:	b510      	push	{r4, lr}
   17342:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   17344:	b084      	sub	sp, #16
   17346:	685a      	ldr	r2, [r3, #4]
   17348:	2003      	movs	r0, #3
   1734a:	f88d 000c 	strb.w	r0, [sp, #12]
   1734e:	79dc      	ldrb	r4, [r3, #7]
   17350:	f88d 400d 	strb.w	r4, [sp, #13]
   17354:	0212      	lsls	r2, r2, #8
   17356:	3308      	adds	r3, #8
   17358:	4608      	mov	r0, r1
   1735a:	a901      	add	r1, sp, #4
   1735c:	9201      	str	r2, [sp, #4]
   1735e:	9302      	str	r3, [sp, #8]
   17360:	f7ff fe86 	bl	17070 <__gnu_unwind_execute>
   17364:	b004      	add	sp, #16
   17366:	bd10      	pop	{r4, pc}

00017368 <_Unwind_GetRegionStart>:
   17368:	b508      	push	{r3, lr}
   1736a:	f7ff fe7f 	bl	1706c <unwind_UCB_from_context>
   1736e:	6c80      	ldr	r0, [r0, #72]	; 0x48
   17370:	bd08      	pop	{r3, pc}
   17372:	bf00      	nop

00017374 <_Unwind_GetLanguageSpecificData>:
   17374:	b508      	push	{r3, lr}
   17376:	f7ff fe79 	bl	1706c <unwind_UCB_from_context>
   1737a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1737c:	79c3      	ldrb	r3, [r0, #7]
   1737e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   17382:	3008      	adds	r0, #8
   17384:	bd08      	pop	{r3, pc}
   17386:	bf00      	nop

00017388 <_Unwind_GetTextRelBase>:
   17388:	b508      	push	{r3, lr}
   1738a:	f000 f807 	bl	1739c <abort>
   1738e:	bf00      	nop

00017390 <_Unwind_GetDataRelBase>:
   17390:	b508      	push	{r3, lr}
   17392:	f7ff fff9 	bl	17388 <_Unwind_GetTextRelBase>
   17396:	bf00      	nop

00017398 <__aeabi_idiv0>:
   17398:	4770      	bx	lr
   1739a:	bf00      	nop

0001739c <abort>:
   1739c:	b508      	push	{r3, lr}
   1739e:	2006      	movs	r0, #6
   173a0:	f001 fa52 	bl	18848 <raise>
   173a4:	2001      	movs	r0, #1
   173a6:	f7e9 f9b3 	bl	710 <_exit>
   173aa:	bf00      	nop

000173ac <__assert_func>:
   173ac:	b500      	push	{lr}
   173ae:	4c0a      	ldr	r4, [pc, #40]	; (173d8 <__assert_func+0x2c>)
   173b0:	6826      	ldr	r6, [r4, #0]
   173b2:	4605      	mov	r5, r0
   173b4:	b085      	sub	sp, #20
   173b6:	461c      	mov	r4, r3
   173b8:	68f0      	ldr	r0, [r6, #12]
   173ba:	b152      	cbz	r2, 173d2 <__assert_func+0x26>
   173bc:	4b07      	ldr	r3, [pc, #28]	; (173dc <__assert_func+0x30>)
   173be:	9202      	str	r2, [sp, #8]
   173c0:	e88d 000a 	stmia.w	sp, {r1, r3}
   173c4:	4622      	mov	r2, r4
   173c6:	462b      	mov	r3, r5
   173c8:	4905      	ldr	r1, [pc, #20]	; (173e0 <__assert_func+0x34>)
   173ca:	f000 f819 	bl	17400 <fiprintf>
   173ce:	f7ff ffe5 	bl	1739c <abort>
   173d2:	4b04      	ldr	r3, [pc, #16]	; (173e4 <__assert_func+0x38>)
   173d4:	461a      	mov	r2, r3
   173d6:	e7f2      	b.n	173be <__assert_func+0x12>
   173d8:	20000020 	.word	0x20000020
   173dc:	0003e31c 	.word	0x0003e31c
   173e0:	0003e32c 	.word	0x0003e32c
   173e4:	0003b064 	.word	0x0003b064

000173e8 <__cxa_atexit>:
   173e8:	4613      	mov	r3, r2
   173ea:	460a      	mov	r2, r1
   173ec:	4601      	mov	r1, r0
   173ee:	2002      	movs	r0, #2
   173f0:	f005 bbe2 	b.w	1cbb8 <__register_exitproc>

000173f4 <__errno>:
   173f4:	4b01      	ldr	r3, [pc, #4]	; (173fc <__errno+0x8>)
   173f6:	6818      	ldr	r0, [r3, #0]
   173f8:	4770      	bx	lr
   173fa:	bf00      	nop
   173fc:	20000020 	.word	0x20000020

00017400 <fiprintf>:
   17400:	b40e      	push	{r1, r2, r3}
   17402:	b510      	push	{r4, lr}
   17404:	b083      	sub	sp, #12
   17406:	ab05      	add	r3, sp, #20
   17408:	4c06      	ldr	r4, [pc, #24]	; (17424 <fiprintf+0x24>)
   1740a:	f853 2b04 	ldr.w	r2, [r3], #4
   1740e:	9301      	str	r3, [sp, #4]
   17410:	4601      	mov	r1, r0
   17412:	6820      	ldr	r0, [r4, #0]
   17414:	f003 f94e 	bl	1a6b4 <_vfiprintf_r>
   17418:	b003      	add	sp, #12
   1741a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1741e:	b003      	add	sp, #12
   17420:	4770      	bx	lr
   17422:	bf00      	nop
   17424:	20000020 	.word	0x20000020

00017428 <fputc>:
   17428:	4b14      	ldr	r3, [pc, #80]	; (1747c <fputc+0x54>)
   1742a:	b570      	push	{r4, r5, r6, lr}
   1742c:	681d      	ldr	r5, [r3, #0]
   1742e:	4606      	mov	r6, r0
   17430:	460c      	mov	r4, r1
   17432:	b10d      	cbz	r5, 17438 <fputc+0x10>
   17434:	6bab      	ldr	r3, [r5, #56]	; 0x38
   17436:	b1c3      	cbz	r3, 1746a <fputc+0x42>
   17438:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1743a:	07d8      	lsls	r0, r3, #31
   1743c:	d402      	bmi.n	17444 <fputc+0x1c>
   1743e:	89a3      	ldrh	r3, [r4, #12]
   17440:	0599      	lsls	r1, r3, #22
   17442:	d516      	bpl.n	17472 <fputc+0x4a>
   17444:	4628      	mov	r0, r5
   17446:	4622      	mov	r2, r4
   17448:	4631      	mov	r1, r6
   1744a:	f000 ffd5 	bl	183f8 <_putc_r>
   1744e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   17450:	07da      	lsls	r2, r3, #31
   17452:	4605      	mov	r5, r0
   17454:	d402      	bmi.n	1745c <fputc+0x34>
   17456:	89a3      	ldrh	r3, [r4, #12]
   17458:	059b      	lsls	r3, r3, #22
   1745a:	d501      	bpl.n	17460 <fputc+0x38>
   1745c:	4628      	mov	r0, r5
   1745e:	bd70      	pop	{r4, r5, r6, pc}
   17460:	6da0      	ldr	r0, [r4, #88]	; 0x58
   17462:	f000 fa87 	bl	17974 <__retarget_lock_release_recursive>
   17466:	4628      	mov	r0, r5
   17468:	bd70      	pop	{r4, r5, r6, pc}
   1746a:	4628      	mov	r0, r5
   1746c:	f006 fcde 	bl	1de2c <__sinit>
   17470:	e7e2      	b.n	17438 <fputc+0x10>
   17472:	6da0      	ldr	r0, [r4, #88]	; 0x58
   17474:	f000 fa7c 	bl	17970 <__retarget_lock_acquire_recursive>
   17478:	e7e4      	b.n	17444 <fputc+0x1c>
   1747a:	bf00      	nop
   1747c:	20000020 	.word	0x20000020

00017480 <_fputs_r>:
   17480:	b530      	push	{r4, r5, lr}
   17482:	b087      	sub	sp, #28
   17484:	4605      	mov	r5, r0
   17486:	4608      	mov	r0, r1
   17488:	4614      	mov	r4, r2
   1748a:	9101      	str	r1, [sp, #4]
   1748c:	f001 fdd8 	bl	19040 <strlen>
   17490:	aa01      	add	r2, sp, #4
   17492:	2301      	movs	r3, #1
   17494:	9005      	str	r0, [sp, #20]
   17496:	9002      	str	r0, [sp, #8]
   17498:	9203      	str	r2, [sp, #12]
   1749a:	9304      	str	r3, [sp, #16]
   1749c:	b10d      	cbz	r5, 174a2 <_fputs_r+0x22>
   1749e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   174a0:	b333      	cbz	r3, 174f0 <_fputs_r+0x70>
   174a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   174a4:	f013 0f01 	tst.w	r3, #1
   174a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   174ac:	b29a      	uxth	r2, r3
   174ae:	d101      	bne.n	174b4 <_fputs_r+0x34>
   174b0:	0590      	lsls	r0, r2, #22
   174b2:	d521      	bpl.n	174f8 <_fputs_r+0x78>
   174b4:	0491      	lsls	r1, r2, #18
   174b6:	d406      	bmi.n	174c6 <_fputs_r+0x46>
   174b8:	6e62      	ldr	r2, [r4, #100]	; 0x64
   174ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   174be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   174c2:	81a3      	strh	r3, [r4, #12]
   174c4:	6662      	str	r2, [r4, #100]	; 0x64
   174c6:	4628      	mov	r0, r5
   174c8:	aa03      	add	r2, sp, #12
   174ca:	4621      	mov	r1, r4
   174cc:	f000 f838 	bl	17540 <__sfvwrite_r>
   174d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   174d2:	07da      	lsls	r2, r3, #31
   174d4:	4605      	mov	r5, r0
   174d6:	d402      	bmi.n	174de <_fputs_r+0x5e>
   174d8:	89a3      	ldrh	r3, [r4, #12]
   174da:	059b      	lsls	r3, r3, #22
   174dc:	d502      	bpl.n	174e4 <_fputs_r+0x64>
   174de:	4628      	mov	r0, r5
   174e0:	b007      	add	sp, #28
   174e2:	bd30      	pop	{r4, r5, pc}
   174e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   174e6:	f000 fa45 	bl	17974 <__retarget_lock_release_recursive>
   174ea:	4628      	mov	r0, r5
   174ec:	b007      	add	sp, #28
   174ee:	bd30      	pop	{r4, r5, pc}
   174f0:	4628      	mov	r0, r5
   174f2:	f006 fc9b 	bl	1de2c <__sinit>
   174f6:	e7d4      	b.n	174a2 <_fputs_r+0x22>
   174f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   174fa:	f000 fa39 	bl	17970 <__retarget_lock_acquire_recursive>
   174fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17502:	b29a      	uxth	r2, r3
   17504:	e7d6      	b.n	174b4 <_fputs_r+0x34>
   17506:	bf00      	nop

00017508 <fputs>:
   17508:	4b02      	ldr	r3, [pc, #8]	; (17514 <fputs+0xc>)
   1750a:	460a      	mov	r2, r1
   1750c:	4601      	mov	r1, r0
   1750e:	6818      	ldr	r0, [r3, #0]
   17510:	f7ff bfb6 	b.w	17480 <_fputs_r>
   17514:	20000020 	.word	0x20000020

00017518 <_fstat_r>:
   17518:	b538      	push	{r3, r4, r5, lr}
   1751a:	460b      	mov	r3, r1
   1751c:	4c07      	ldr	r4, [pc, #28]	; (1753c <_fstat_r+0x24>)
   1751e:	4605      	mov	r5, r0
   17520:	4611      	mov	r1, r2
   17522:	4618      	mov	r0, r3
   17524:	2300      	movs	r3, #0
   17526:	6023      	str	r3, [r4, #0]
   17528:	f7e9 f8e9 	bl	6fe <_fstat>
   1752c:	1c43      	adds	r3, r0, #1
   1752e:	d000      	beq.n	17532 <_fstat_r+0x1a>
   17530:	bd38      	pop	{r3, r4, r5, pc}
   17532:	6823      	ldr	r3, [r4, #0]
   17534:	2b00      	cmp	r3, #0
   17536:	d0fb      	beq.n	17530 <_fstat_r+0x18>
   17538:	602b      	str	r3, [r5, #0]
   1753a:	bd38      	pop	{r3, r4, r5, pc}
   1753c:	2001b0cc 	.word	0x2001b0cc

00017540 <__sfvwrite_r>:
   17540:	6893      	ldr	r3, [r2, #8]
   17542:	2b00      	cmp	r3, #0
   17544:	d073      	beq.n	1762e <__sfvwrite_r+0xee>
   17546:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1754a:	898b      	ldrh	r3, [r1, #12]
   1754c:	b083      	sub	sp, #12
   1754e:	460c      	mov	r4, r1
   17550:	0719      	lsls	r1, r3, #28
   17552:	9000      	str	r0, [sp, #0]
   17554:	4616      	mov	r6, r2
   17556:	d526      	bpl.n	175a6 <__sfvwrite_r+0x66>
   17558:	6922      	ldr	r2, [r4, #16]
   1755a:	b322      	cbz	r2, 175a6 <__sfvwrite_r+0x66>
   1755c:	f013 0002 	ands.w	r0, r3, #2
   17560:	6835      	ldr	r5, [r6, #0]
   17562:	d02c      	beq.n	175be <__sfvwrite_r+0x7e>
   17564:	f04f 0900 	mov.w	r9, #0
   17568:	4fb0      	ldr	r7, [pc, #704]	; (1782c <__sfvwrite_r+0x2ec>)
   1756a:	46c8      	mov	r8, r9
   1756c:	46b2      	mov	sl, r6
   1756e:	45b8      	cmp	r8, r7
   17570:	4643      	mov	r3, r8
   17572:	464a      	mov	r2, r9
   17574:	bf28      	it	cs
   17576:	463b      	movcs	r3, r7
   17578:	9800      	ldr	r0, [sp, #0]
   1757a:	f1b8 0f00 	cmp.w	r8, #0
   1757e:	d050      	beq.n	17622 <__sfvwrite_r+0xe2>
   17580:	69e1      	ldr	r1, [r4, #28]
   17582:	6a66      	ldr	r6, [r4, #36]	; 0x24
   17584:	47b0      	blx	r6
   17586:	2800      	cmp	r0, #0
   17588:	dd58      	ble.n	1763c <__sfvwrite_r+0xfc>
   1758a:	f8da 3008 	ldr.w	r3, [sl, #8]
   1758e:	1a1b      	subs	r3, r3, r0
   17590:	4481      	add	r9, r0
   17592:	eba8 0800 	sub.w	r8, r8, r0
   17596:	f8ca 3008 	str.w	r3, [sl, #8]
   1759a:	2b00      	cmp	r3, #0
   1759c:	d1e7      	bne.n	1756e <__sfvwrite_r+0x2e>
   1759e:	2000      	movs	r0, #0
   175a0:	b003      	add	sp, #12
   175a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175a6:	4621      	mov	r1, r4
   175a8:	9800      	ldr	r0, [sp, #0]
   175aa:	f005 faa1 	bl	1caf0 <__swsetup_r>
   175ae:	2800      	cmp	r0, #0
   175b0:	f040 8133 	bne.w	1781a <__sfvwrite_r+0x2da>
   175b4:	89a3      	ldrh	r3, [r4, #12]
   175b6:	6835      	ldr	r5, [r6, #0]
   175b8:	f013 0002 	ands.w	r0, r3, #2
   175bc:	d1d2      	bne.n	17564 <__sfvwrite_r+0x24>
   175be:	f013 0901 	ands.w	r9, r3, #1
   175c2:	d145      	bne.n	17650 <__sfvwrite_r+0x110>
   175c4:	464f      	mov	r7, r9
   175c6:	9601      	str	r6, [sp, #4]
   175c8:	b337      	cbz	r7, 17618 <__sfvwrite_r+0xd8>
   175ca:	059a      	lsls	r2, r3, #22
   175cc:	f8d4 8008 	ldr.w	r8, [r4, #8]
   175d0:	f140 8083 	bpl.w	176da <__sfvwrite_r+0x19a>
   175d4:	4547      	cmp	r7, r8
   175d6:	46c3      	mov	fp, r8
   175d8:	f0c0 80ab 	bcc.w	17732 <__sfvwrite_r+0x1f2>
   175dc:	f413 6f90 	tst.w	r3, #1152	; 0x480
   175e0:	f040 80ac 	bne.w	1773c <__sfvwrite_r+0x1fc>
   175e4:	6820      	ldr	r0, [r4, #0]
   175e6:	46ba      	mov	sl, r7
   175e8:	465a      	mov	r2, fp
   175ea:	4649      	mov	r1, r9
   175ec:	f000 fe32 	bl	18254 <memmove>
   175f0:	68a2      	ldr	r2, [r4, #8]
   175f2:	6823      	ldr	r3, [r4, #0]
   175f4:	eba2 0208 	sub.w	r2, r2, r8
   175f8:	445b      	add	r3, fp
   175fa:	60a2      	str	r2, [r4, #8]
   175fc:	6023      	str	r3, [r4, #0]
   175fe:	9a01      	ldr	r2, [sp, #4]
   17600:	6893      	ldr	r3, [r2, #8]
   17602:	eba3 030a 	sub.w	r3, r3, sl
   17606:	44d1      	add	r9, sl
   17608:	eba7 070a 	sub.w	r7, r7, sl
   1760c:	6093      	str	r3, [r2, #8]
   1760e:	2b00      	cmp	r3, #0
   17610:	d0c5      	beq.n	1759e <__sfvwrite_r+0x5e>
   17612:	89a3      	ldrh	r3, [r4, #12]
   17614:	2f00      	cmp	r7, #0
   17616:	d1d8      	bne.n	175ca <__sfvwrite_r+0x8a>
   17618:	f8d5 9000 	ldr.w	r9, [r5]
   1761c:	686f      	ldr	r7, [r5, #4]
   1761e:	3508      	adds	r5, #8
   17620:	e7d2      	b.n	175c8 <__sfvwrite_r+0x88>
   17622:	f8d5 9000 	ldr.w	r9, [r5]
   17626:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1762a:	3508      	adds	r5, #8
   1762c:	e79f      	b.n	1756e <__sfvwrite_r+0x2e>
   1762e:	2000      	movs	r0, #0
   17630:	4770      	bx	lr
   17632:	4621      	mov	r1, r4
   17634:	9800      	ldr	r0, [sp, #0]
   17636:	f006 fba1 	bl	1dd7c <_fflush_r>
   1763a:	b370      	cbz	r0, 1769a <__sfvwrite_r+0x15a>
   1763c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17644:	f04f 30ff 	mov.w	r0, #4294967295
   17648:	81a3      	strh	r3, [r4, #12]
   1764a:	b003      	add	sp, #12
   1764c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17650:	4681      	mov	r9, r0
   17652:	4633      	mov	r3, r6
   17654:	464e      	mov	r6, r9
   17656:	46a8      	mov	r8, r5
   17658:	469a      	mov	sl, r3
   1765a:	464d      	mov	r5, r9
   1765c:	b34e      	cbz	r6, 176b2 <__sfvwrite_r+0x172>
   1765e:	b380      	cbz	r0, 176c2 <__sfvwrite_r+0x182>
   17660:	6820      	ldr	r0, [r4, #0]
   17662:	6923      	ldr	r3, [r4, #16]
   17664:	6962      	ldr	r2, [r4, #20]
   17666:	45b1      	cmp	r9, r6
   17668:	46cb      	mov	fp, r9
   1766a:	bf28      	it	cs
   1766c:	46b3      	movcs	fp, r6
   1766e:	4298      	cmp	r0, r3
   17670:	465f      	mov	r7, fp
   17672:	d904      	bls.n	1767e <__sfvwrite_r+0x13e>
   17674:	68a3      	ldr	r3, [r4, #8]
   17676:	4413      	add	r3, r2
   17678:	459b      	cmp	fp, r3
   1767a:	f300 80a6 	bgt.w	177ca <__sfvwrite_r+0x28a>
   1767e:	4593      	cmp	fp, r2
   17680:	db4b      	blt.n	1771a <__sfvwrite_r+0x1da>
   17682:	4613      	mov	r3, r2
   17684:	6a67      	ldr	r7, [r4, #36]	; 0x24
   17686:	69e1      	ldr	r1, [r4, #28]
   17688:	9800      	ldr	r0, [sp, #0]
   1768a:	462a      	mov	r2, r5
   1768c:	47b8      	blx	r7
   1768e:	1e07      	subs	r7, r0, #0
   17690:	ddd4      	ble.n	1763c <__sfvwrite_r+0xfc>
   17692:	ebb9 0907 	subs.w	r9, r9, r7
   17696:	d0cc      	beq.n	17632 <__sfvwrite_r+0xf2>
   17698:	2001      	movs	r0, #1
   1769a:	f8da 3008 	ldr.w	r3, [sl, #8]
   1769e:	1bdb      	subs	r3, r3, r7
   176a0:	443d      	add	r5, r7
   176a2:	1bf6      	subs	r6, r6, r7
   176a4:	f8ca 3008 	str.w	r3, [sl, #8]
   176a8:	2b00      	cmp	r3, #0
   176aa:	f43f af78 	beq.w	1759e <__sfvwrite_r+0x5e>
   176ae:	2e00      	cmp	r6, #0
   176b0:	d1d5      	bne.n	1765e <__sfvwrite_r+0x11e>
   176b2:	f108 0308 	add.w	r3, r8, #8
   176b6:	e913 0060 	ldmdb	r3, {r5, r6}
   176ba:	4698      	mov	r8, r3
   176bc:	3308      	adds	r3, #8
   176be:	2e00      	cmp	r6, #0
   176c0:	d0f9      	beq.n	176b6 <__sfvwrite_r+0x176>
   176c2:	4632      	mov	r2, r6
   176c4:	210a      	movs	r1, #10
   176c6:	4628      	mov	r0, r5
   176c8:	f000 fcaa 	bl	18020 <memchr>
   176cc:	2800      	cmp	r0, #0
   176ce:	f000 80a1 	beq.w	17814 <__sfvwrite_r+0x2d4>
   176d2:	3001      	adds	r0, #1
   176d4:	eba0 0905 	sub.w	r9, r0, r5
   176d8:	e7c2      	b.n	17660 <__sfvwrite_r+0x120>
   176da:	6820      	ldr	r0, [r4, #0]
   176dc:	6923      	ldr	r3, [r4, #16]
   176de:	4298      	cmp	r0, r3
   176e0:	d802      	bhi.n	176e8 <__sfvwrite_r+0x1a8>
   176e2:	6963      	ldr	r3, [r4, #20]
   176e4:	429f      	cmp	r7, r3
   176e6:	d25d      	bcs.n	177a4 <__sfvwrite_r+0x264>
   176e8:	45b8      	cmp	r8, r7
   176ea:	bf28      	it	cs
   176ec:	46b8      	movcs	r8, r7
   176ee:	4642      	mov	r2, r8
   176f0:	4649      	mov	r1, r9
   176f2:	f000 fdaf 	bl	18254 <memmove>
   176f6:	68a3      	ldr	r3, [r4, #8]
   176f8:	6822      	ldr	r2, [r4, #0]
   176fa:	eba3 0308 	sub.w	r3, r3, r8
   176fe:	4442      	add	r2, r8
   17700:	60a3      	str	r3, [r4, #8]
   17702:	6022      	str	r2, [r4, #0]
   17704:	b10b      	cbz	r3, 1770a <__sfvwrite_r+0x1ca>
   17706:	46c2      	mov	sl, r8
   17708:	e779      	b.n	175fe <__sfvwrite_r+0xbe>
   1770a:	4621      	mov	r1, r4
   1770c:	9800      	ldr	r0, [sp, #0]
   1770e:	f006 fb35 	bl	1dd7c <_fflush_r>
   17712:	2800      	cmp	r0, #0
   17714:	d192      	bne.n	1763c <__sfvwrite_r+0xfc>
   17716:	46c2      	mov	sl, r8
   17718:	e771      	b.n	175fe <__sfvwrite_r+0xbe>
   1771a:	465a      	mov	r2, fp
   1771c:	4629      	mov	r1, r5
   1771e:	f000 fd99 	bl	18254 <memmove>
   17722:	68a2      	ldr	r2, [r4, #8]
   17724:	6823      	ldr	r3, [r4, #0]
   17726:	eba2 020b 	sub.w	r2, r2, fp
   1772a:	445b      	add	r3, fp
   1772c:	60a2      	str	r2, [r4, #8]
   1772e:	6023      	str	r3, [r4, #0]
   17730:	e7af      	b.n	17692 <__sfvwrite_r+0x152>
   17732:	6820      	ldr	r0, [r4, #0]
   17734:	46b8      	mov	r8, r7
   17736:	46ba      	mov	sl, r7
   17738:	46bb      	mov	fp, r7
   1773a:	e755      	b.n	175e8 <__sfvwrite_r+0xa8>
   1773c:	6962      	ldr	r2, [r4, #20]
   1773e:	6820      	ldr	r0, [r4, #0]
   17740:	6921      	ldr	r1, [r4, #16]
   17742:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   17746:	eba0 0a01 	sub.w	sl, r0, r1
   1774a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   1774e:	f10a 0001 	add.w	r0, sl, #1
   17752:	ea4f 0868 	mov.w	r8, r8, asr #1
   17756:	4438      	add	r0, r7
   17758:	4540      	cmp	r0, r8
   1775a:	4642      	mov	r2, r8
   1775c:	bf84      	itt	hi
   1775e:	4680      	movhi	r8, r0
   17760:	4642      	movhi	r2, r8
   17762:	055b      	lsls	r3, r3, #21
   17764:	d544      	bpl.n	177f0 <__sfvwrite_r+0x2b0>
   17766:	4611      	mov	r1, r2
   17768:	9800      	ldr	r0, [sp, #0]
   1776a:	f000 f98d 	bl	17a88 <_malloc_r>
   1776e:	4683      	mov	fp, r0
   17770:	2800      	cmp	r0, #0
   17772:	d055      	beq.n	17820 <__sfvwrite_r+0x2e0>
   17774:	4652      	mov	r2, sl
   17776:	6921      	ldr	r1, [r4, #16]
   17778:	f000 fcd2 	bl	18120 <memcpy>
   1777c:	89a3      	ldrh	r3, [r4, #12]
   1777e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   17782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17786:	81a3      	strh	r3, [r4, #12]
   17788:	eb0b 000a 	add.w	r0, fp, sl
   1778c:	eba8 030a 	sub.w	r3, r8, sl
   17790:	f8c4 b010 	str.w	fp, [r4, #16]
   17794:	f8c4 8014 	str.w	r8, [r4, #20]
   17798:	6020      	str	r0, [r4, #0]
   1779a:	60a3      	str	r3, [r4, #8]
   1779c:	46b8      	mov	r8, r7
   1779e:	46ba      	mov	sl, r7
   177a0:	46bb      	mov	fp, r7
   177a2:	e721      	b.n	175e8 <__sfvwrite_r+0xa8>
   177a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   177a8:	42b9      	cmp	r1, r7
   177aa:	bf28      	it	cs
   177ac:	4639      	movcs	r1, r7
   177ae:	464a      	mov	r2, r9
   177b0:	fb91 f1f3 	sdiv	r1, r1, r3
   177b4:	9800      	ldr	r0, [sp, #0]
   177b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   177b8:	fb03 f301 	mul.w	r3, r3, r1
   177bc:	69e1      	ldr	r1, [r4, #28]
   177be:	47b0      	blx	r6
   177c0:	f1b0 0a00 	subs.w	sl, r0, #0
   177c4:	f73f af1b 	bgt.w	175fe <__sfvwrite_r+0xbe>
   177c8:	e738      	b.n	1763c <__sfvwrite_r+0xfc>
   177ca:	461a      	mov	r2, r3
   177cc:	4629      	mov	r1, r5
   177ce:	9301      	str	r3, [sp, #4]
   177d0:	f000 fd40 	bl	18254 <memmove>
   177d4:	6822      	ldr	r2, [r4, #0]
   177d6:	9b01      	ldr	r3, [sp, #4]
   177d8:	9800      	ldr	r0, [sp, #0]
   177da:	441a      	add	r2, r3
   177dc:	6022      	str	r2, [r4, #0]
   177de:	4621      	mov	r1, r4
   177e0:	f006 facc 	bl	1dd7c <_fflush_r>
   177e4:	9b01      	ldr	r3, [sp, #4]
   177e6:	2800      	cmp	r0, #0
   177e8:	f47f af28 	bne.w	1763c <__sfvwrite_r+0xfc>
   177ec:	461f      	mov	r7, r3
   177ee:	e750      	b.n	17692 <__sfvwrite_r+0x152>
   177f0:	9800      	ldr	r0, [sp, #0]
   177f2:	f000 fe41 	bl	18478 <_realloc_r>
   177f6:	4683      	mov	fp, r0
   177f8:	2800      	cmp	r0, #0
   177fa:	d1c5      	bne.n	17788 <__sfvwrite_r+0x248>
   177fc:	9d00      	ldr	r5, [sp, #0]
   177fe:	6921      	ldr	r1, [r4, #16]
   17800:	4628      	mov	r0, r5
   17802:	f006 fc39 	bl	1e078 <_free_r>
   17806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1780a:	220c      	movs	r2, #12
   1780c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   17810:	602a      	str	r2, [r5, #0]
   17812:	e715      	b.n	17640 <__sfvwrite_r+0x100>
   17814:	f106 0901 	add.w	r9, r6, #1
   17818:	e722      	b.n	17660 <__sfvwrite_r+0x120>
   1781a:	f04f 30ff 	mov.w	r0, #4294967295
   1781e:	e6bf      	b.n	175a0 <__sfvwrite_r+0x60>
   17820:	9a00      	ldr	r2, [sp, #0]
   17822:	230c      	movs	r3, #12
   17824:	6013      	str	r3, [r2, #0]
   17826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1782a:	e709      	b.n	17640 <__sfvwrite_r+0x100>
   1782c:	7ffffc00 	.word	0x7ffffc00

00017830 <_fwrite_r>:
   17830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17834:	b086      	sub	sp, #24
   17836:	fb02 f503 	mul.w	r5, r2, r3
   1783a:	4690      	mov	r8, r2
   1783c:	461e      	mov	r6, r3
   1783e:	aa01      	add	r2, sp, #4
   17840:	2301      	movs	r3, #1
   17842:	9101      	str	r1, [sp, #4]
   17844:	9502      	str	r5, [sp, #8]
   17846:	9505      	str	r5, [sp, #20]
   17848:	9203      	str	r2, [sp, #12]
   1784a:	9304      	str	r3, [sp, #16]
   1784c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1784e:	4607      	mov	r7, r0
   17850:	b110      	cbz	r0, 17858 <_fwrite_r+0x28>
   17852:	6b83      	ldr	r3, [r0, #56]	; 0x38
   17854:	2b00      	cmp	r3, #0
   17856:	d031      	beq.n	178bc <_fwrite_r+0x8c>
   17858:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1785a:	f013 0f01 	tst.w	r3, #1
   1785e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17862:	b29a      	uxth	r2, r3
   17864:	d101      	bne.n	1786a <_fwrite_r+0x3a>
   17866:	0591      	lsls	r1, r2, #22
   17868:	d52b      	bpl.n	178c2 <_fwrite_r+0x92>
   1786a:	0492      	lsls	r2, r2, #18
   1786c:	d406      	bmi.n	1787c <_fwrite_r+0x4c>
   1786e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   17870:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   17874:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   17878:	81a3      	strh	r3, [r4, #12]
   1787a:	6662      	str	r2, [r4, #100]	; 0x64
   1787c:	4638      	mov	r0, r7
   1787e:	aa03      	add	r2, sp, #12
   17880:	4621      	mov	r1, r4
   17882:	f7ff fe5d 	bl	17540 <__sfvwrite_r>
   17886:	6e63      	ldr	r3, [r4, #100]	; 0x64
   17888:	b940      	cbnz	r0, 1789c <_fwrite_r+0x6c>
   1788a:	07d8      	lsls	r0, r3, #31
   1788c:	d402      	bmi.n	17894 <_fwrite_r+0x64>
   1788e:	89a3      	ldrh	r3, [r4, #12]
   17890:	0599      	lsls	r1, r3, #22
   17892:	d51d      	bpl.n	178d0 <_fwrite_r+0xa0>
   17894:	4630      	mov	r0, r6
   17896:	b006      	add	sp, #24
   17898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1789c:	07da      	lsls	r2, r3, #31
   1789e:	d506      	bpl.n	178ae <_fwrite_r+0x7e>
   178a0:	9805      	ldr	r0, [sp, #20]
   178a2:	1a2d      	subs	r5, r5, r0
   178a4:	fbb5 f0f8 	udiv	r0, r5, r8
   178a8:	b006      	add	sp, #24
   178aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   178ae:	89a3      	ldrh	r3, [r4, #12]
   178b0:	059b      	lsls	r3, r3, #22
   178b2:	d4f5      	bmi.n	178a0 <_fwrite_r+0x70>
   178b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   178b6:	f000 f85d 	bl	17974 <__retarget_lock_release_recursive>
   178ba:	e7f1      	b.n	178a0 <_fwrite_r+0x70>
   178bc:	f006 fab6 	bl	1de2c <__sinit>
   178c0:	e7ca      	b.n	17858 <_fwrite_r+0x28>
   178c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   178c4:	f000 f854 	bl	17970 <__retarget_lock_acquire_recursive>
   178c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   178cc:	b29a      	uxth	r2, r3
   178ce:	e7cc      	b.n	1786a <_fwrite_r+0x3a>
   178d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   178d2:	f000 f84f 	bl	17974 <__retarget_lock_release_recursive>
   178d6:	4630      	mov	r0, r6
   178d8:	e7e6      	b.n	178a8 <_fwrite_r+0x78>
   178da:	bf00      	nop

000178dc <fwrite>:
   178dc:	b510      	push	{r4, lr}
   178de:	b082      	sub	sp, #8
   178e0:	4c05      	ldr	r4, [pc, #20]	; (178f8 <fwrite+0x1c>)
   178e2:	9300      	str	r3, [sp, #0]
   178e4:	6824      	ldr	r4, [r4, #0]
   178e6:	4613      	mov	r3, r2
   178e8:	460a      	mov	r2, r1
   178ea:	4601      	mov	r1, r0
   178ec:	4620      	mov	r0, r4
   178ee:	f7ff ff9f 	bl	17830 <_fwrite_r>
   178f2:	b002      	add	sp, #8
   178f4:	bd10      	pop	{r4, pc}
   178f6:	bf00      	nop
   178f8:	20000020 	.word	0x20000020

000178fc <__libc_init_array>:
   178fc:	b570      	push	{r4, r5, r6, lr}
   178fe:	4e0f      	ldr	r6, [pc, #60]	; (1793c <__libc_init_array+0x40>)
   17900:	4d0f      	ldr	r5, [pc, #60]	; (17940 <__libc_init_array+0x44>)
   17902:	1b76      	subs	r6, r6, r5
   17904:	10b6      	asrs	r6, r6, #2
   17906:	bf18      	it	ne
   17908:	2400      	movne	r4, #0
   1790a:	d005      	beq.n	17918 <__libc_init_array+0x1c>
   1790c:	3401      	adds	r4, #1
   1790e:	f855 3b04 	ldr.w	r3, [r5], #4
   17912:	4798      	blx	r3
   17914:	42a6      	cmp	r6, r4
   17916:	d1f9      	bne.n	1790c <__libc_init_array+0x10>
   17918:	4e0a      	ldr	r6, [pc, #40]	; (17944 <__libc_init_array+0x48>)
   1791a:	4d0b      	ldr	r5, [pc, #44]	; (17948 <__libc_init_array+0x4c>)
   1791c:	1b76      	subs	r6, r6, r5
   1791e:	f027 fab1 	bl	3ee84 <_init>
   17922:	10b6      	asrs	r6, r6, #2
   17924:	bf18      	it	ne
   17926:	2400      	movne	r4, #0
   17928:	d006      	beq.n	17938 <__libc_init_array+0x3c>
   1792a:	3401      	adds	r4, #1
   1792c:	f855 3b04 	ldr.w	r3, [r5], #4
   17930:	4798      	blx	r3
   17932:	42a6      	cmp	r6, r4
   17934:	d1f9      	bne.n	1792a <__libc_init_array+0x2e>
   17936:	bd70      	pop	{r4, r5, r6, pc}
   17938:	bd70      	pop	{r4, r5, r6, pc}
   1793a:	bf00      	nop
   1793c:	0003ee90 	.word	0x0003ee90
   17940:	0003ee90 	.word	0x0003ee90
   17944:	0003eeb0 	.word	0x0003eeb0
   17948:	0003ee90 	.word	0x0003ee90

0001794c <__locale_mb_cur_max>:
   1794c:	4b04      	ldr	r3, [pc, #16]	; (17960 <__locale_mb_cur_max+0x14>)
   1794e:	4a05      	ldr	r2, [pc, #20]	; (17964 <__locale_mb_cur_max+0x18>)
   17950:	681b      	ldr	r3, [r3, #0]
   17952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17954:	2b00      	cmp	r3, #0
   17956:	bf08      	it	eq
   17958:	4613      	moveq	r3, r2
   1795a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   1795e:	4770      	bx	lr
   17960:	20000020 	.word	0x20000020
   17964:	20000450 	.word	0x20000450

00017968 <__retarget_lock_init_recursive>:
   17968:	4770      	bx	lr
   1796a:	bf00      	nop

0001796c <__retarget_lock_close_recursive>:
   1796c:	4770      	bx	lr
   1796e:	bf00      	nop

00017970 <__retarget_lock_acquire_recursive>:
   17970:	4770      	bx	lr
   17972:	bf00      	nop

00017974 <__retarget_lock_release_recursive>:
   17974:	4770      	bx	lr
   17976:	bf00      	nop

00017978 <__swhatbuf_r>:
   17978:	b570      	push	{r4, r5, r6, lr}
   1797a:	460c      	mov	r4, r1
   1797c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   17980:	2900      	cmp	r1, #0
   17982:	b090      	sub	sp, #64	; 0x40
   17984:	4615      	mov	r5, r2
   17986:	461e      	mov	r6, r3
   17988:	db14      	blt.n	179b4 <__swhatbuf_r+0x3c>
   1798a:	aa01      	add	r2, sp, #4
   1798c:	f7ff fdc4 	bl	17518 <_fstat_r>
   17990:	2800      	cmp	r0, #0
   17992:	db0f      	blt.n	179b4 <__swhatbuf_r+0x3c>
   17994:	9a02      	ldr	r2, [sp, #8]
   17996:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   1799a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   1799e:	fab2 f282 	clz	r2, r2
   179a2:	0952      	lsrs	r2, r2, #5
   179a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   179a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
   179ac:	6032      	str	r2, [r6, #0]
   179ae:	602b      	str	r3, [r5, #0]
   179b0:	b010      	add	sp, #64	; 0x40
   179b2:	bd70      	pop	{r4, r5, r6, pc}
   179b4:	89a2      	ldrh	r2, [r4, #12]
   179b6:	2300      	movs	r3, #0
   179b8:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   179bc:	6033      	str	r3, [r6, #0]
   179be:	d004      	beq.n	179ca <__swhatbuf_r+0x52>
   179c0:	2240      	movs	r2, #64	; 0x40
   179c2:	4618      	mov	r0, r3
   179c4:	602a      	str	r2, [r5, #0]
   179c6:	b010      	add	sp, #64	; 0x40
   179c8:	bd70      	pop	{r4, r5, r6, pc}
   179ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
   179ce:	602b      	str	r3, [r5, #0]
   179d0:	b010      	add	sp, #64	; 0x40
   179d2:	bd70      	pop	{r4, r5, r6, pc}

000179d4 <__smakebuf_r>:
   179d4:	898a      	ldrh	r2, [r1, #12]
   179d6:	0792      	lsls	r2, r2, #30
   179d8:	460b      	mov	r3, r1
   179da:	d506      	bpl.n	179ea <__smakebuf_r+0x16>
   179dc:	f101 0243 	add.w	r2, r1, #67	; 0x43
   179e0:	2101      	movs	r1, #1
   179e2:	601a      	str	r2, [r3, #0]
   179e4:	611a      	str	r2, [r3, #16]
   179e6:	6159      	str	r1, [r3, #20]
   179e8:	4770      	bx	lr
   179ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   179ec:	b083      	sub	sp, #12
   179ee:	ab01      	add	r3, sp, #4
   179f0:	466a      	mov	r2, sp
   179f2:	460c      	mov	r4, r1
   179f4:	4606      	mov	r6, r0
   179f6:	f7ff ffbf 	bl	17978 <__swhatbuf_r>
   179fa:	9900      	ldr	r1, [sp, #0]
   179fc:	4605      	mov	r5, r0
   179fe:	4630      	mov	r0, r6
   17a00:	f000 f842 	bl	17a88 <_malloc_r>
   17a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17a08:	b1d8      	cbz	r0, 17a42 <__smakebuf_r+0x6e>
   17a0a:	9a01      	ldr	r2, [sp, #4]
   17a0c:	4f15      	ldr	r7, [pc, #84]	; (17a64 <__smakebuf_r+0x90>)
   17a0e:	9900      	ldr	r1, [sp, #0]
   17a10:	63f7      	str	r7, [r6, #60]	; 0x3c
   17a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17a16:	81a3      	strh	r3, [r4, #12]
   17a18:	6020      	str	r0, [r4, #0]
   17a1a:	6120      	str	r0, [r4, #16]
   17a1c:	6161      	str	r1, [r4, #20]
   17a1e:	b91a      	cbnz	r2, 17a28 <__smakebuf_r+0x54>
   17a20:	432b      	orrs	r3, r5
   17a22:	81a3      	strh	r3, [r4, #12]
   17a24:	b003      	add	sp, #12
   17a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17a28:	4630      	mov	r0, r6
   17a2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   17a2e:	f006 fc33 	bl	1e298 <_isatty_r>
   17a32:	b1a0      	cbz	r0, 17a5e <__smakebuf_r+0x8a>
   17a34:	89a3      	ldrh	r3, [r4, #12]
   17a36:	f023 0303 	bic.w	r3, r3, #3
   17a3a:	f043 0301 	orr.w	r3, r3, #1
   17a3e:	b21b      	sxth	r3, r3
   17a40:	e7ee      	b.n	17a20 <__smakebuf_r+0x4c>
   17a42:	059a      	lsls	r2, r3, #22
   17a44:	d4ee      	bmi.n	17a24 <__smakebuf_r+0x50>
   17a46:	f023 0303 	bic.w	r3, r3, #3
   17a4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   17a4e:	f043 0302 	orr.w	r3, r3, #2
   17a52:	2101      	movs	r1, #1
   17a54:	81a3      	strh	r3, [r4, #12]
   17a56:	6022      	str	r2, [r4, #0]
   17a58:	6122      	str	r2, [r4, #16]
   17a5a:	6161      	str	r1, [r4, #20]
   17a5c:	e7e2      	b.n	17a24 <__smakebuf_r+0x50>
   17a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17a62:	e7dd      	b.n	17a20 <__smakebuf_r+0x4c>
   17a64:	0001ddd1 	.word	0x0001ddd1

00017a68 <malloc>:
   17a68:	4b02      	ldr	r3, [pc, #8]	; (17a74 <malloc+0xc>)
   17a6a:	4601      	mov	r1, r0
   17a6c:	6818      	ldr	r0, [r3, #0]
   17a6e:	f000 b80b 	b.w	17a88 <_malloc_r>
   17a72:	bf00      	nop
   17a74:	20000020 	.word	0x20000020

00017a78 <free>:
   17a78:	4b02      	ldr	r3, [pc, #8]	; (17a84 <free+0xc>)
   17a7a:	4601      	mov	r1, r0
   17a7c:	6818      	ldr	r0, [r3, #0]
   17a7e:	f006 bafb 	b.w	1e078 <_free_r>
   17a82:	bf00      	nop
   17a84:	20000020 	.word	0x20000020

00017a88 <_malloc_r>:
   17a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a8c:	f101 060b 	add.w	r6, r1, #11
   17a90:	2e16      	cmp	r6, #22
   17a92:	b083      	sub	sp, #12
   17a94:	4605      	mov	r5, r0
   17a96:	f240 809e 	bls.w	17bd6 <_malloc_r+0x14e>
   17a9a:	f036 0607 	bics.w	r6, r6, #7
   17a9e:	f100 80bd 	bmi.w	17c1c <_malloc_r+0x194>
   17aa2:	42b1      	cmp	r1, r6
   17aa4:	f200 80ba 	bhi.w	17c1c <_malloc_r+0x194>
   17aa8:	f000 fc86 	bl	183b8 <__malloc_lock>
   17aac:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   17ab0:	f0c0 8293 	bcc.w	17fda <_malloc_r+0x552>
   17ab4:	0a73      	lsrs	r3, r6, #9
   17ab6:	f000 80b8 	beq.w	17c2a <_malloc_r+0x1a2>
   17aba:	2b04      	cmp	r3, #4
   17abc:	f200 8179 	bhi.w	17db2 <_malloc_r+0x32a>
   17ac0:	09b3      	lsrs	r3, r6, #6
   17ac2:	f103 0039 	add.w	r0, r3, #57	; 0x39
   17ac6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   17aca:	00c3      	lsls	r3, r0, #3
   17acc:	4fbf      	ldr	r7, [pc, #764]	; (17dcc <_malloc_r+0x344>)
   17ace:	443b      	add	r3, r7
   17ad0:	f1a3 0108 	sub.w	r1, r3, #8
   17ad4:	685c      	ldr	r4, [r3, #4]
   17ad6:	42a1      	cmp	r1, r4
   17ad8:	d106      	bne.n	17ae8 <_malloc_r+0x60>
   17ada:	e00c      	b.n	17af6 <_malloc_r+0x6e>
   17adc:	2a00      	cmp	r2, #0
   17ade:	f280 80aa 	bge.w	17c36 <_malloc_r+0x1ae>
   17ae2:	68e4      	ldr	r4, [r4, #12]
   17ae4:	42a1      	cmp	r1, r4
   17ae6:	d006      	beq.n	17af6 <_malloc_r+0x6e>
   17ae8:	6863      	ldr	r3, [r4, #4]
   17aea:	f023 0303 	bic.w	r3, r3, #3
   17aee:	1b9a      	subs	r2, r3, r6
   17af0:	2a0f      	cmp	r2, #15
   17af2:	ddf3      	ble.n	17adc <_malloc_r+0x54>
   17af4:	4670      	mov	r0, lr
   17af6:	693c      	ldr	r4, [r7, #16]
   17af8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 17de0 <_malloc_r+0x358>
   17afc:	4574      	cmp	r4, lr
   17afe:	f000 81ab 	beq.w	17e58 <_malloc_r+0x3d0>
   17b02:	6863      	ldr	r3, [r4, #4]
   17b04:	f023 0303 	bic.w	r3, r3, #3
   17b08:	1b9a      	subs	r2, r3, r6
   17b0a:	2a0f      	cmp	r2, #15
   17b0c:	f300 8190 	bgt.w	17e30 <_malloc_r+0x3a8>
   17b10:	2a00      	cmp	r2, #0
   17b12:	f8c7 e014 	str.w	lr, [r7, #20]
   17b16:	f8c7 e010 	str.w	lr, [r7, #16]
   17b1a:	f280 809d 	bge.w	17c58 <_malloc_r+0x1d0>
   17b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   17b22:	f080 8161 	bcs.w	17de8 <_malloc_r+0x360>
   17b26:	08db      	lsrs	r3, r3, #3
   17b28:	f103 0c01 	add.w	ip, r3, #1
   17b2c:	1099      	asrs	r1, r3, #2
   17b2e:	687a      	ldr	r2, [r7, #4]
   17b30:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   17b34:	f8c4 8008 	str.w	r8, [r4, #8]
   17b38:	2301      	movs	r3, #1
   17b3a:	408b      	lsls	r3, r1
   17b3c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   17b40:	4313      	orrs	r3, r2
   17b42:	3908      	subs	r1, #8
   17b44:	60e1      	str	r1, [r4, #12]
   17b46:	607b      	str	r3, [r7, #4]
   17b48:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   17b4c:	f8c8 400c 	str.w	r4, [r8, #12]
   17b50:	1082      	asrs	r2, r0, #2
   17b52:	2401      	movs	r4, #1
   17b54:	4094      	lsls	r4, r2
   17b56:	429c      	cmp	r4, r3
   17b58:	f200 808b 	bhi.w	17c72 <_malloc_r+0x1ea>
   17b5c:	421c      	tst	r4, r3
   17b5e:	d106      	bne.n	17b6e <_malloc_r+0xe6>
   17b60:	f020 0003 	bic.w	r0, r0, #3
   17b64:	0064      	lsls	r4, r4, #1
   17b66:	421c      	tst	r4, r3
   17b68:	f100 0004 	add.w	r0, r0, #4
   17b6c:	d0fa      	beq.n	17b64 <_malloc_r+0xdc>
   17b6e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   17b72:	46cc      	mov	ip, r9
   17b74:	4680      	mov	r8, r0
   17b76:	f8dc 300c 	ldr.w	r3, [ip, #12]
   17b7a:	459c      	cmp	ip, r3
   17b7c:	d107      	bne.n	17b8e <_malloc_r+0x106>
   17b7e:	e16d      	b.n	17e5c <_malloc_r+0x3d4>
   17b80:	2a00      	cmp	r2, #0
   17b82:	f280 817b 	bge.w	17e7c <_malloc_r+0x3f4>
   17b86:	68db      	ldr	r3, [r3, #12]
   17b88:	459c      	cmp	ip, r3
   17b8a:	f000 8167 	beq.w	17e5c <_malloc_r+0x3d4>
   17b8e:	6859      	ldr	r1, [r3, #4]
   17b90:	f021 0103 	bic.w	r1, r1, #3
   17b94:	1b8a      	subs	r2, r1, r6
   17b96:	2a0f      	cmp	r2, #15
   17b98:	ddf2      	ble.n	17b80 <_malloc_r+0xf8>
   17b9a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   17b9e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   17ba2:	9300      	str	r3, [sp, #0]
   17ba4:	199c      	adds	r4, r3, r6
   17ba6:	4628      	mov	r0, r5
   17ba8:	f046 0601 	orr.w	r6, r6, #1
   17bac:	f042 0501 	orr.w	r5, r2, #1
   17bb0:	605e      	str	r6, [r3, #4]
   17bb2:	f8c8 c00c 	str.w	ip, [r8, #12]
   17bb6:	f8cc 8008 	str.w	r8, [ip, #8]
   17bba:	617c      	str	r4, [r7, #20]
   17bbc:	613c      	str	r4, [r7, #16]
   17bbe:	f8c4 e00c 	str.w	lr, [r4, #12]
   17bc2:	f8c4 e008 	str.w	lr, [r4, #8]
   17bc6:	6065      	str	r5, [r4, #4]
   17bc8:	505a      	str	r2, [r3, r1]
   17bca:	f000 fbfb 	bl	183c4 <__malloc_unlock>
   17bce:	9b00      	ldr	r3, [sp, #0]
   17bd0:	f103 0408 	add.w	r4, r3, #8
   17bd4:	e01e      	b.n	17c14 <_malloc_r+0x18c>
   17bd6:	2910      	cmp	r1, #16
   17bd8:	d820      	bhi.n	17c1c <_malloc_r+0x194>
   17bda:	f000 fbed 	bl	183b8 <__malloc_lock>
   17bde:	2610      	movs	r6, #16
   17be0:	2318      	movs	r3, #24
   17be2:	2002      	movs	r0, #2
   17be4:	4f79      	ldr	r7, [pc, #484]	; (17dcc <_malloc_r+0x344>)
   17be6:	443b      	add	r3, r7
   17be8:	f1a3 0208 	sub.w	r2, r3, #8
   17bec:	685c      	ldr	r4, [r3, #4]
   17bee:	4294      	cmp	r4, r2
   17bf0:	f000 813d 	beq.w	17e6e <_malloc_r+0x3e6>
   17bf4:	6863      	ldr	r3, [r4, #4]
   17bf6:	68e1      	ldr	r1, [r4, #12]
   17bf8:	68a6      	ldr	r6, [r4, #8]
   17bfa:	f023 0303 	bic.w	r3, r3, #3
   17bfe:	4423      	add	r3, r4
   17c00:	4628      	mov	r0, r5
   17c02:	685a      	ldr	r2, [r3, #4]
   17c04:	60f1      	str	r1, [r6, #12]
   17c06:	f042 0201 	orr.w	r2, r2, #1
   17c0a:	608e      	str	r6, [r1, #8]
   17c0c:	605a      	str	r2, [r3, #4]
   17c0e:	f000 fbd9 	bl	183c4 <__malloc_unlock>
   17c12:	3408      	adds	r4, #8
   17c14:	4620      	mov	r0, r4
   17c16:	b003      	add	sp, #12
   17c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c1c:	2400      	movs	r4, #0
   17c1e:	230c      	movs	r3, #12
   17c20:	4620      	mov	r0, r4
   17c22:	602b      	str	r3, [r5, #0]
   17c24:	b003      	add	sp, #12
   17c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c2a:	2040      	movs	r0, #64	; 0x40
   17c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
   17c30:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   17c34:	e74a      	b.n	17acc <_malloc_r+0x44>
   17c36:	4423      	add	r3, r4
   17c38:	68e1      	ldr	r1, [r4, #12]
   17c3a:	685a      	ldr	r2, [r3, #4]
   17c3c:	68a6      	ldr	r6, [r4, #8]
   17c3e:	f042 0201 	orr.w	r2, r2, #1
   17c42:	60f1      	str	r1, [r6, #12]
   17c44:	4628      	mov	r0, r5
   17c46:	608e      	str	r6, [r1, #8]
   17c48:	605a      	str	r2, [r3, #4]
   17c4a:	f000 fbbb 	bl	183c4 <__malloc_unlock>
   17c4e:	3408      	adds	r4, #8
   17c50:	4620      	mov	r0, r4
   17c52:	b003      	add	sp, #12
   17c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c58:	4423      	add	r3, r4
   17c5a:	4628      	mov	r0, r5
   17c5c:	685a      	ldr	r2, [r3, #4]
   17c5e:	f042 0201 	orr.w	r2, r2, #1
   17c62:	605a      	str	r2, [r3, #4]
   17c64:	f000 fbae 	bl	183c4 <__malloc_unlock>
   17c68:	3408      	adds	r4, #8
   17c6a:	4620      	mov	r0, r4
   17c6c:	b003      	add	sp, #12
   17c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c72:	68bc      	ldr	r4, [r7, #8]
   17c74:	6863      	ldr	r3, [r4, #4]
   17c76:	f023 0803 	bic.w	r8, r3, #3
   17c7a:	45b0      	cmp	r8, r6
   17c7c:	d304      	bcc.n	17c88 <_malloc_r+0x200>
   17c7e:	eba8 0306 	sub.w	r3, r8, r6
   17c82:	2b0f      	cmp	r3, #15
   17c84:	f300 8085 	bgt.w	17d92 <_malloc_r+0x30a>
   17c88:	f8df 9158 	ldr.w	r9, [pc, #344]	; 17de4 <_malloc_r+0x35c>
   17c8c:	4b50      	ldr	r3, [pc, #320]	; (17dd0 <_malloc_r+0x348>)
   17c8e:	f8d9 2000 	ldr.w	r2, [r9]
   17c92:	681b      	ldr	r3, [r3, #0]
   17c94:	3201      	adds	r2, #1
   17c96:	4433      	add	r3, r6
   17c98:	eb04 0a08 	add.w	sl, r4, r8
   17c9c:	f000 8155 	beq.w	17f4a <_malloc_r+0x4c2>
   17ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   17ca4:	330f      	adds	r3, #15
   17ca6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   17caa:	f02b 0b0f 	bic.w	fp, fp, #15
   17cae:	4659      	mov	r1, fp
   17cb0:	4628      	mov	r0, r5
   17cb2:	f000 fd87 	bl	187c4 <_sbrk_r>
   17cb6:	1c41      	adds	r1, r0, #1
   17cb8:	4602      	mov	r2, r0
   17cba:	f000 80fc 	beq.w	17eb6 <_malloc_r+0x42e>
   17cbe:	4582      	cmp	sl, r0
   17cc0:	f200 80f7 	bhi.w	17eb2 <_malloc_r+0x42a>
   17cc4:	4b43      	ldr	r3, [pc, #268]	; (17dd4 <_malloc_r+0x34c>)
   17cc6:	6819      	ldr	r1, [r3, #0]
   17cc8:	4459      	add	r1, fp
   17cca:	6019      	str	r1, [r3, #0]
   17ccc:	f000 814d 	beq.w	17f6a <_malloc_r+0x4e2>
   17cd0:	f8d9 0000 	ldr.w	r0, [r9]
   17cd4:	3001      	adds	r0, #1
   17cd6:	bf1b      	ittet	ne
   17cd8:	eba2 0a0a 	subne.w	sl, r2, sl
   17cdc:	4451      	addne	r1, sl
   17cde:	f8c9 2000 	streq.w	r2, [r9]
   17ce2:	6019      	strne	r1, [r3, #0]
   17ce4:	f012 0107 	ands.w	r1, r2, #7
   17ce8:	f000 8115 	beq.w	17f16 <_malloc_r+0x48e>
   17cec:	f1c1 0008 	rsb	r0, r1, #8
   17cf0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   17cf4:	4402      	add	r2, r0
   17cf6:	3108      	adds	r1, #8
   17cf8:	eb02 090b 	add.w	r9, r2, fp
   17cfc:	f3c9 090b 	ubfx	r9, r9, #0, #12
   17d00:	eba1 0909 	sub.w	r9, r1, r9
   17d04:	4649      	mov	r1, r9
   17d06:	4628      	mov	r0, r5
   17d08:	9301      	str	r3, [sp, #4]
   17d0a:	9200      	str	r2, [sp, #0]
   17d0c:	f000 fd5a 	bl	187c4 <_sbrk_r>
   17d10:	1c43      	adds	r3, r0, #1
   17d12:	e89d 000c 	ldmia.w	sp, {r2, r3}
   17d16:	f000 8143 	beq.w	17fa0 <_malloc_r+0x518>
   17d1a:	1a80      	subs	r0, r0, r2
   17d1c:	4448      	add	r0, r9
   17d1e:	f040 0001 	orr.w	r0, r0, #1
   17d22:	6819      	ldr	r1, [r3, #0]
   17d24:	60ba      	str	r2, [r7, #8]
   17d26:	4449      	add	r1, r9
   17d28:	42bc      	cmp	r4, r7
   17d2a:	6050      	str	r0, [r2, #4]
   17d2c:	6019      	str	r1, [r3, #0]
   17d2e:	d017      	beq.n	17d60 <_malloc_r+0x2d8>
   17d30:	f1b8 0f0f 	cmp.w	r8, #15
   17d34:	f240 80fb 	bls.w	17f2e <_malloc_r+0x4a6>
   17d38:	6860      	ldr	r0, [r4, #4]
   17d3a:	f1a8 020c 	sub.w	r2, r8, #12
   17d3e:	f022 0207 	bic.w	r2, r2, #7
   17d42:	eb04 0e02 	add.w	lr, r4, r2
   17d46:	f000 0001 	and.w	r0, r0, #1
   17d4a:	f04f 0c05 	mov.w	ip, #5
   17d4e:	4310      	orrs	r0, r2
   17d50:	2a0f      	cmp	r2, #15
   17d52:	6060      	str	r0, [r4, #4]
   17d54:	f8ce c004 	str.w	ip, [lr, #4]
   17d58:	f8ce c008 	str.w	ip, [lr, #8]
   17d5c:	f200 8117 	bhi.w	17f8e <_malloc_r+0x506>
   17d60:	4b1d      	ldr	r3, [pc, #116]	; (17dd8 <_malloc_r+0x350>)
   17d62:	68bc      	ldr	r4, [r7, #8]
   17d64:	681a      	ldr	r2, [r3, #0]
   17d66:	4291      	cmp	r1, r2
   17d68:	bf88      	it	hi
   17d6a:	6019      	strhi	r1, [r3, #0]
   17d6c:	4b1b      	ldr	r3, [pc, #108]	; (17ddc <_malloc_r+0x354>)
   17d6e:	681a      	ldr	r2, [r3, #0]
   17d70:	4291      	cmp	r1, r2
   17d72:	6862      	ldr	r2, [r4, #4]
   17d74:	bf88      	it	hi
   17d76:	6019      	strhi	r1, [r3, #0]
   17d78:	f022 0203 	bic.w	r2, r2, #3
   17d7c:	4296      	cmp	r6, r2
   17d7e:	eba2 0306 	sub.w	r3, r2, r6
   17d82:	d801      	bhi.n	17d88 <_malloc_r+0x300>
   17d84:	2b0f      	cmp	r3, #15
   17d86:	dc04      	bgt.n	17d92 <_malloc_r+0x30a>
   17d88:	4628      	mov	r0, r5
   17d8a:	f000 fb1b 	bl	183c4 <__malloc_unlock>
   17d8e:	2400      	movs	r4, #0
   17d90:	e740      	b.n	17c14 <_malloc_r+0x18c>
   17d92:	19a2      	adds	r2, r4, r6
   17d94:	f043 0301 	orr.w	r3, r3, #1
   17d98:	f046 0601 	orr.w	r6, r6, #1
   17d9c:	6066      	str	r6, [r4, #4]
   17d9e:	4628      	mov	r0, r5
   17da0:	60ba      	str	r2, [r7, #8]
   17da2:	6053      	str	r3, [r2, #4]
   17da4:	f000 fb0e 	bl	183c4 <__malloc_unlock>
   17da8:	3408      	adds	r4, #8
   17daa:	4620      	mov	r0, r4
   17dac:	b003      	add	sp, #12
   17dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17db2:	2b14      	cmp	r3, #20
   17db4:	d971      	bls.n	17e9a <_malloc_r+0x412>
   17db6:	2b54      	cmp	r3, #84	; 0x54
   17db8:	f200 80a3 	bhi.w	17f02 <_malloc_r+0x47a>
   17dbc:	0b33      	lsrs	r3, r6, #12
   17dbe:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   17dc2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   17dc6:	00c3      	lsls	r3, r0, #3
   17dc8:	e680      	b.n	17acc <_malloc_r+0x44>
   17dca:	bf00      	nop
   17dcc:	200005bc 	.word	0x200005bc
   17dd0:	2001b06c 	.word	0x2001b06c
   17dd4:	2001b03c 	.word	0x2001b03c
   17dd8:	2001b064 	.word	0x2001b064
   17ddc:	2001b068 	.word	0x2001b068
   17de0:	200005c4 	.word	0x200005c4
   17de4:	200009c4 	.word	0x200009c4
   17de8:	0a5a      	lsrs	r2, r3, #9
   17dea:	2a04      	cmp	r2, #4
   17dec:	d95b      	bls.n	17ea6 <_malloc_r+0x41e>
   17dee:	2a14      	cmp	r2, #20
   17df0:	f200 80ae 	bhi.w	17f50 <_malloc_r+0x4c8>
   17df4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   17df8:	00c9      	lsls	r1, r1, #3
   17dfa:	325b      	adds	r2, #91	; 0x5b
   17dfc:	eb07 0c01 	add.w	ip, r7, r1
   17e00:	5879      	ldr	r1, [r7, r1]
   17e02:	f1ac 0c08 	sub.w	ip, ip, #8
   17e06:	458c      	cmp	ip, r1
   17e08:	f000 8088 	beq.w	17f1c <_malloc_r+0x494>
   17e0c:	684a      	ldr	r2, [r1, #4]
   17e0e:	f022 0203 	bic.w	r2, r2, #3
   17e12:	4293      	cmp	r3, r2
   17e14:	d273      	bcs.n	17efe <_malloc_r+0x476>
   17e16:	6889      	ldr	r1, [r1, #8]
   17e18:	458c      	cmp	ip, r1
   17e1a:	d1f7      	bne.n	17e0c <_malloc_r+0x384>
   17e1c:	f8dc 200c 	ldr.w	r2, [ip, #12]
   17e20:	687b      	ldr	r3, [r7, #4]
   17e22:	60e2      	str	r2, [r4, #12]
   17e24:	f8c4 c008 	str.w	ip, [r4, #8]
   17e28:	6094      	str	r4, [r2, #8]
   17e2a:	f8cc 400c 	str.w	r4, [ip, #12]
   17e2e:	e68f      	b.n	17b50 <_malloc_r+0xc8>
   17e30:	19a1      	adds	r1, r4, r6
   17e32:	f046 0c01 	orr.w	ip, r6, #1
   17e36:	f042 0601 	orr.w	r6, r2, #1
   17e3a:	f8c4 c004 	str.w	ip, [r4, #4]
   17e3e:	4628      	mov	r0, r5
   17e40:	6179      	str	r1, [r7, #20]
   17e42:	6139      	str	r1, [r7, #16]
   17e44:	f8c1 e00c 	str.w	lr, [r1, #12]
   17e48:	f8c1 e008 	str.w	lr, [r1, #8]
   17e4c:	604e      	str	r6, [r1, #4]
   17e4e:	50e2      	str	r2, [r4, r3]
   17e50:	f000 fab8 	bl	183c4 <__malloc_unlock>
   17e54:	3408      	adds	r4, #8
   17e56:	e6dd      	b.n	17c14 <_malloc_r+0x18c>
   17e58:	687b      	ldr	r3, [r7, #4]
   17e5a:	e679      	b.n	17b50 <_malloc_r+0xc8>
   17e5c:	f108 0801 	add.w	r8, r8, #1
   17e60:	f018 0f03 	tst.w	r8, #3
   17e64:	f10c 0c08 	add.w	ip, ip, #8
   17e68:	f47f ae85 	bne.w	17b76 <_malloc_r+0xee>
   17e6c:	e02d      	b.n	17eca <_malloc_r+0x442>
   17e6e:	68dc      	ldr	r4, [r3, #12]
   17e70:	42a3      	cmp	r3, r4
   17e72:	bf08      	it	eq
   17e74:	3002      	addeq	r0, #2
   17e76:	f43f ae3e 	beq.w	17af6 <_malloc_r+0x6e>
   17e7a:	e6bb      	b.n	17bf4 <_malloc_r+0x16c>
   17e7c:	4419      	add	r1, r3
   17e7e:	461c      	mov	r4, r3
   17e80:	684a      	ldr	r2, [r1, #4]
   17e82:	68db      	ldr	r3, [r3, #12]
   17e84:	f854 6f08 	ldr.w	r6, [r4, #8]!
   17e88:	f042 0201 	orr.w	r2, r2, #1
   17e8c:	604a      	str	r2, [r1, #4]
   17e8e:	4628      	mov	r0, r5
   17e90:	60f3      	str	r3, [r6, #12]
   17e92:	609e      	str	r6, [r3, #8]
   17e94:	f000 fa96 	bl	183c4 <__malloc_unlock>
   17e98:	e6bc      	b.n	17c14 <_malloc_r+0x18c>
   17e9a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   17e9e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   17ea2:	00c3      	lsls	r3, r0, #3
   17ea4:	e612      	b.n	17acc <_malloc_r+0x44>
   17ea6:	099a      	lsrs	r2, r3, #6
   17ea8:	f102 0139 	add.w	r1, r2, #57	; 0x39
   17eac:	00c9      	lsls	r1, r1, #3
   17eae:	3238      	adds	r2, #56	; 0x38
   17eb0:	e7a4      	b.n	17dfc <_malloc_r+0x374>
   17eb2:	42bc      	cmp	r4, r7
   17eb4:	d054      	beq.n	17f60 <_malloc_r+0x4d8>
   17eb6:	68bc      	ldr	r4, [r7, #8]
   17eb8:	6862      	ldr	r2, [r4, #4]
   17eba:	f022 0203 	bic.w	r2, r2, #3
   17ebe:	e75d      	b.n	17d7c <_malloc_r+0x2f4>
   17ec0:	f859 3908 	ldr.w	r3, [r9], #-8
   17ec4:	4599      	cmp	r9, r3
   17ec6:	f040 8086 	bne.w	17fd6 <_malloc_r+0x54e>
   17eca:	f010 0f03 	tst.w	r0, #3
   17ece:	f100 30ff 	add.w	r0, r0, #4294967295
   17ed2:	d1f5      	bne.n	17ec0 <_malloc_r+0x438>
   17ed4:	687b      	ldr	r3, [r7, #4]
   17ed6:	ea23 0304 	bic.w	r3, r3, r4
   17eda:	607b      	str	r3, [r7, #4]
   17edc:	0064      	lsls	r4, r4, #1
   17ede:	429c      	cmp	r4, r3
   17ee0:	f63f aec7 	bhi.w	17c72 <_malloc_r+0x1ea>
   17ee4:	2c00      	cmp	r4, #0
   17ee6:	f43f aec4 	beq.w	17c72 <_malloc_r+0x1ea>
   17eea:	421c      	tst	r4, r3
   17eec:	4640      	mov	r0, r8
   17eee:	f47f ae3e 	bne.w	17b6e <_malloc_r+0xe6>
   17ef2:	0064      	lsls	r4, r4, #1
   17ef4:	421c      	tst	r4, r3
   17ef6:	f100 0004 	add.w	r0, r0, #4
   17efa:	d0fa      	beq.n	17ef2 <_malloc_r+0x46a>
   17efc:	e637      	b.n	17b6e <_malloc_r+0xe6>
   17efe:	468c      	mov	ip, r1
   17f00:	e78c      	b.n	17e1c <_malloc_r+0x394>
   17f02:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   17f06:	d815      	bhi.n	17f34 <_malloc_r+0x4ac>
   17f08:	0bf3      	lsrs	r3, r6, #15
   17f0a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   17f0e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   17f12:	00c3      	lsls	r3, r0, #3
   17f14:	e5da      	b.n	17acc <_malloc_r+0x44>
   17f16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   17f1a:	e6ed      	b.n	17cf8 <_malloc_r+0x270>
   17f1c:	687b      	ldr	r3, [r7, #4]
   17f1e:	1092      	asrs	r2, r2, #2
   17f20:	2101      	movs	r1, #1
   17f22:	fa01 f202 	lsl.w	r2, r1, r2
   17f26:	4313      	orrs	r3, r2
   17f28:	607b      	str	r3, [r7, #4]
   17f2a:	4662      	mov	r2, ip
   17f2c:	e779      	b.n	17e22 <_malloc_r+0x39a>
   17f2e:	2301      	movs	r3, #1
   17f30:	6053      	str	r3, [r2, #4]
   17f32:	e729      	b.n	17d88 <_malloc_r+0x300>
   17f34:	f240 5254 	movw	r2, #1364	; 0x554
   17f38:	4293      	cmp	r3, r2
   17f3a:	d822      	bhi.n	17f82 <_malloc_r+0x4fa>
   17f3c:	0cb3      	lsrs	r3, r6, #18
   17f3e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   17f42:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   17f46:	00c3      	lsls	r3, r0, #3
   17f48:	e5c0      	b.n	17acc <_malloc_r+0x44>
   17f4a:	f103 0b10 	add.w	fp, r3, #16
   17f4e:	e6ae      	b.n	17cae <_malloc_r+0x226>
   17f50:	2a54      	cmp	r2, #84	; 0x54
   17f52:	d829      	bhi.n	17fa8 <_malloc_r+0x520>
   17f54:	0b1a      	lsrs	r2, r3, #12
   17f56:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   17f5a:	00c9      	lsls	r1, r1, #3
   17f5c:	326e      	adds	r2, #110	; 0x6e
   17f5e:	e74d      	b.n	17dfc <_malloc_r+0x374>
   17f60:	4b20      	ldr	r3, [pc, #128]	; (17fe4 <_malloc_r+0x55c>)
   17f62:	6819      	ldr	r1, [r3, #0]
   17f64:	4459      	add	r1, fp
   17f66:	6019      	str	r1, [r3, #0]
   17f68:	e6b2      	b.n	17cd0 <_malloc_r+0x248>
   17f6a:	f3ca 000b 	ubfx	r0, sl, #0, #12
   17f6e:	2800      	cmp	r0, #0
   17f70:	f47f aeae 	bne.w	17cd0 <_malloc_r+0x248>
   17f74:	eb08 030b 	add.w	r3, r8, fp
   17f78:	68ba      	ldr	r2, [r7, #8]
   17f7a:	f043 0301 	orr.w	r3, r3, #1
   17f7e:	6053      	str	r3, [r2, #4]
   17f80:	e6ee      	b.n	17d60 <_malloc_r+0x2d8>
   17f82:	207f      	movs	r0, #127	; 0x7f
   17f84:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   17f88:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   17f8c:	e59e      	b.n	17acc <_malloc_r+0x44>
   17f8e:	f104 0108 	add.w	r1, r4, #8
   17f92:	4628      	mov	r0, r5
   17f94:	9300      	str	r3, [sp, #0]
   17f96:	f006 f86f 	bl	1e078 <_free_r>
   17f9a:	9b00      	ldr	r3, [sp, #0]
   17f9c:	6819      	ldr	r1, [r3, #0]
   17f9e:	e6df      	b.n	17d60 <_malloc_r+0x2d8>
   17fa0:	2001      	movs	r0, #1
   17fa2:	f04f 0900 	mov.w	r9, #0
   17fa6:	e6bc      	b.n	17d22 <_malloc_r+0x29a>
   17fa8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   17fac:	d805      	bhi.n	17fba <_malloc_r+0x532>
   17fae:	0bda      	lsrs	r2, r3, #15
   17fb0:	f102 0178 	add.w	r1, r2, #120	; 0x78
   17fb4:	00c9      	lsls	r1, r1, #3
   17fb6:	3277      	adds	r2, #119	; 0x77
   17fb8:	e720      	b.n	17dfc <_malloc_r+0x374>
   17fba:	f240 5154 	movw	r1, #1364	; 0x554
   17fbe:	428a      	cmp	r2, r1
   17fc0:	d805      	bhi.n	17fce <_malloc_r+0x546>
   17fc2:	0c9a      	lsrs	r2, r3, #18
   17fc4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   17fc8:	00c9      	lsls	r1, r1, #3
   17fca:	327c      	adds	r2, #124	; 0x7c
   17fcc:	e716      	b.n	17dfc <_malloc_r+0x374>
   17fce:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   17fd2:	227e      	movs	r2, #126	; 0x7e
   17fd4:	e712      	b.n	17dfc <_malloc_r+0x374>
   17fd6:	687b      	ldr	r3, [r7, #4]
   17fd8:	e780      	b.n	17edc <_malloc_r+0x454>
   17fda:	08f0      	lsrs	r0, r6, #3
   17fdc:	f106 0308 	add.w	r3, r6, #8
   17fe0:	e600      	b.n	17be4 <_malloc_r+0x15c>
   17fe2:	bf00      	nop
   17fe4:	2001b03c 	.word	0x2001b03c

00017fe8 <__ascii_mbtowc>:
   17fe8:	b082      	sub	sp, #8
   17fea:	b149      	cbz	r1, 18000 <__ascii_mbtowc+0x18>
   17fec:	b15a      	cbz	r2, 18006 <__ascii_mbtowc+0x1e>
   17fee:	b16b      	cbz	r3, 1800c <__ascii_mbtowc+0x24>
   17ff0:	7813      	ldrb	r3, [r2, #0]
   17ff2:	600b      	str	r3, [r1, #0]
   17ff4:	7812      	ldrb	r2, [r2, #0]
   17ff6:	1c10      	adds	r0, r2, #0
   17ff8:	bf18      	it	ne
   17ffa:	2001      	movne	r0, #1
   17ffc:	b002      	add	sp, #8
   17ffe:	4770      	bx	lr
   18000:	a901      	add	r1, sp, #4
   18002:	2a00      	cmp	r2, #0
   18004:	d1f3      	bne.n	17fee <__ascii_mbtowc+0x6>
   18006:	4610      	mov	r0, r2
   18008:	b002      	add	sp, #8
   1800a:	4770      	bx	lr
   1800c:	f06f 0001 	mvn.w	r0, #1
   18010:	e7f4      	b.n	17ffc <__ascii_mbtowc+0x14>
   18012:	bf00      	nop
	...

00018020 <memchr>:
   18020:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   18024:	2a10      	cmp	r2, #16
   18026:	db2b      	blt.n	18080 <memchr+0x60>
   18028:	f010 0f07 	tst.w	r0, #7
   1802c:	d008      	beq.n	18040 <memchr+0x20>
   1802e:	f810 3b01 	ldrb.w	r3, [r0], #1
   18032:	3a01      	subs	r2, #1
   18034:	428b      	cmp	r3, r1
   18036:	d02d      	beq.n	18094 <memchr+0x74>
   18038:	f010 0f07 	tst.w	r0, #7
   1803c:	b342      	cbz	r2, 18090 <memchr+0x70>
   1803e:	d1f6      	bne.n	1802e <memchr+0xe>
   18040:	b4f0      	push	{r4, r5, r6, r7}
   18042:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   18046:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1804a:	f022 0407 	bic.w	r4, r2, #7
   1804e:	f07f 0700 	mvns.w	r7, #0
   18052:	2300      	movs	r3, #0
   18054:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   18058:	3c08      	subs	r4, #8
   1805a:	ea85 0501 	eor.w	r5, r5, r1
   1805e:	ea86 0601 	eor.w	r6, r6, r1
   18062:	fa85 f547 	uadd8	r5, r5, r7
   18066:	faa3 f587 	sel	r5, r3, r7
   1806a:	fa86 f647 	uadd8	r6, r6, r7
   1806e:	faa5 f687 	sel	r6, r5, r7
   18072:	b98e      	cbnz	r6, 18098 <memchr+0x78>
   18074:	d1ee      	bne.n	18054 <memchr+0x34>
   18076:	bcf0      	pop	{r4, r5, r6, r7}
   18078:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1807c:	f002 0207 	and.w	r2, r2, #7
   18080:	b132      	cbz	r2, 18090 <memchr+0x70>
   18082:	f810 3b01 	ldrb.w	r3, [r0], #1
   18086:	3a01      	subs	r2, #1
   18088:	ea83 0301 	eor.w	r3, r3, r1
   1808c:	b113      	cbz	r3, 18094 <memchr+0x74>
   1808e:	d1f8      	bne.n	18082 <memchr+0x62>
   18090:	2000      	movs	r0, #0
   18092:	4770      	bx	lr
   18094:	3801      	subs	r0, #1
   18096:	4770      	bx	lr
   18098:	2d00      	cmp	r5, #0
   1809a:	bf06      	itte	eq
   1809c:	4635      	moveq	r5, r6
   1809e:	3803      	subeq	r0, #3
   180a0:	3807      	subne	r0, #7
   180a2:	f015 0f01 	tst.w	r5, #1
   180a6:	d107      	bne.n	180b8 <memchr+0x98>
   180a8:	3001      	adds	r0, #1
   180aa:	f415 7f80 	tst.w	r5, #256	; 0x100
   180ae:	bf02      	ittt	eq
   180b0:	3001      	addeq	r0, #1
   180b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   180b6:	3001      	addeq	r0, #1
   180b8:	bcf0      	pop	{r4, r5, r6, r7}
   180ba:	3801      	subs	r0, #1
   180bc:	4770      	bx	lr
   180be:	bf00      	nop

000180c0 <memcmp>:
   180c0:	2a03      	cmp	r2, #3
   180c2:	b470      	push	{r4, r5, r6}
   180c4:	d922      	bls.n	1810c <memcmp+0x4c>
   180c6:	ea40 0301 	orr.w	r3, r0, r1
   180ca:	079b      	lsls	r3, r3, #30
   180cc:	d011      	beq.n	180f2 <memcmp+0x32>
   180ce:	7803      	ldrb	r3, [r0, #0]
   180d0:	780c      	ldrb	r4, [r1, #0]
   180d2:	42a3      	cmp	r3, r4
   180d4:	d11d      	bne.n	18112 <memcmp+0x52>
   180d6:	440a      	add	r2, r1
   180d8:	3101      	adds	r1, #1
   180da:	e005      	b.n	180e8 <memcmp+0x28>
   180dc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   180e0:	f811 4b01 	ldrb.w	r4, [r1], #1
   180e4:	42a3      	cmp	r3, r4
   180e6:	d114      	bne.n	18112 <memcmp+0x52>
   180e8:	4291      	cmp	r1, r2
   180ea:	d1f7      	bne.n	180dc <memcmp+0x1c>
   180ec:	2000      	movs	r0, #0
   180ee:	bc70      	pop	{r4, r5, r6}
   180f0:	4770      	bx	lr
   180f2:	680d      	ldr	r5, [r1, #0]
   180f4:	6806      	ldr	r6, [r0, #0]
   180f6:	42ae      	cmp	r6, r5
   180f8:	460c      	mov	r4, r1
   180fa:	4603      	mov	r3, r0
   180fc:	f101 0104 	add.w	r1, r1, #4
   18100:	f100 0004 	add.w	r0, r0, #4
   18104:	d108      	bne.n	18118 <memcmp+0x58>
   18106:	3a04      	subs	r2, #4
   18108:	2a03      	cmp	r2, #3
   1810a:	d8f2      	bhi.n	180f2 <memcmp+0x32>
   1810c:	2a00      	cmp	r2, #0
   1810e:	d1de      	bne.n	180ce <memcmp+0xe>
   18110:	e7ec      	b.n	180ec <memcmp+0x2c>
   18112:	1b18      	subs	r0, r3, r4
   18114:	bc70      	pop	{r4, r5, r6}
   18116:	4770      	bx	lr
   18118:	4621      	mov	r1, r4
   1811a:	4618      	mov	r0, r3
   1811c:	e7d7      	b.n	180ce <memcmp+0xe>
   1811e:	bf00      	nop

00018120 <memcpy>:
   18120:	4684      	mov	ip, r0
   18122:	ea41 0300 	orr.w	r3, r1, r0
   18126:	f013 0303 	ands.w	r3, r3, #3
   1812a:	d16d      	bne.n	18208 <memcpy+0xe8>
   1812c:	3a40      	subs	r2, #64	; 0x40
   1812e:	d341      	bcc.n	181b4 <memcpy+0x94>
   18130:	f851 3b04 	ldr.w	r3, [r1], #4
   18134:	f840 3b04 	str.w	r3, [r0], #4
   18138:	f851 3b04 	ldr.w	r3, [r1], #4
   1813c:	f840 3b04 	str.w	r3, [r0], #4
   18140:	f851 3b04 	ldr.w	r3, [r1], #4
   18144:	f840 3b04 	str.w	r3, [r0], #4
   18148:	f851 3b04 	ldr.w	r3, [r1], #4
   1814c:	f840 3b04 	str.w	r3, [r0], #4
   18150:	f851 3b04 	ldr.w	r3, [r1], #4
   18154:	f840 3b04 	str.w	r3, [r0], #4
   18158:	f851 3b04 	ldr.w	r3, [r1], #4
   1815c:	f840 3b04 	str.w	r3, [r0], #4
   18160:	f851 3b04 	ldr.w	r3, [r1], #4
   18164:	f840 3b04 	str.w	r3, [r0], #4
   18168:	f851 3b04 	ldr.w	r3, [r1], #4
   1816c:	f840 3b04 	str.w	r3, [r0], #4
   18170:	f851 3b04 	ldr.w	r3, [r1], #4
   18174:	f840 3b04 	str.w	r3, [r0], #4
   18178:	f851 3b04 	ldr.w	r3, [r1], #4
   1817c:	f840 3b04 	str.w	r3, [r0], #4
   18180:	f851 3b04 	ldr.w	r3, [r1], #4
   18184:	f840 3b04 	str.w	r3, [r0], #4
   18188:	f851 3b04 	ldr.w	r3, [r1], #4
   1818c:	f840 3b04 	str.w	r3, [r0], #4
   18190:	f851 3b04 	ldr.w	r3, [r1], #4
   18194:	f840 3b04 	str.w	r3, [r0], #4
   18198:	f851 3b04 	ldr.w	r3, [r1], #4
   1819c:	f840 3b04 	str.w	r3, [r0], #4
   181a0:	f851 3b04 	ldr.w	r3, [r1], #4
   181a4:	f840 3b04 	str.w	r3, [r0], #4
   181a8:	f851 3b04 	ldr.w	r3, [r1], #4
   181ac:	f840 3b04 	str.w	r3, [r0], #4
   181b0:	3a40      	subs	r2, #64	; 0x40
   181b2:	d2bd      	bcs.n	18130 <memcpy+0x10>
   181b4:	3230      	adds	r2, #48	; 0x30
   181b6:	d311      	bcc.n	181dc <memcpy+0xbc>
   181b8:	f851 3b04 	ldr.w	r3, [r1], #4
   181bc:	f840 3b04 	str.w	r3, [r0], #4
   181c0:	f851 3b04 	ldr.w	r3, [r1], #4
   181c4:	f840 3b04 	str.w	r3, [r0], #4
   181c8:	f851 3b04 	ldr.w	r3, [r1], #4
   181cc:	f840 3b04 	str.w	r3, [r0], #4
   181d0:	f851 3b04 	ldr.w	r3, [r1], #4
   181d4:	f840 3b04 	str.w	r3, [r0], #4
   181d8:	3a10      	subs	r2, #16
   181da:	d2ed      	bcs.n	181b8 <memcpy+0x98>
   181dc:	320c      	adds	r2, #12
   181de:	d305      	bcc.n	181ec <memcpy+0xcc>
   181e0:	f851 3b04 	ldr.w	r3, [r1], #4
   181e4:	f840 3b04 	str.w	r3, [r0], #4
   181e8:	3a04      	subs	r2, #4
   181ea:	d2f9      	bcs.n	181e0 <memcpy+0xc0>
   181ec:	3204      	adds	r2, #4
   181ee:	d008      	beq.n	18202 <memcpy+0xe2>
   181f0:	07d2      	lsls	r2, r2, #31
   181f2:	bf1c      	itt	ne
   181f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   181f8:	f800 3b01 	strbne.w	r3, [r0], #1
   181fc:	d301      	bcc.n	18202 <memcpy+0xe2>
   181fe:	880b      	ldrh	r3, [r1, #0]
   18200:	8003      	strh	r3, [r0, #0]
   18202:	4660      	mov	r0, ip
   18204:	4770      	bx	lr
   18206:	bf00      	nop
   18208:	2a08      	cmp	r2, #8
   1820a:	d313      	bcc.n	18234 <memcpy+0x114>
   1820c:	078b      	lsls	r3, r1, #30
   1820e:	d08d      	beq.n	1812c <memcpy+0xc>
   18210:	f010 0303 	ands.w	r3, r0, #3
   18214:	d08a      	beq.n	1812c <memcpy+0xc>
   18216:	f1c3 0304 	rsb	r3, r3, #4
   1821a:	1ad2      	subs	r2, r2, r3
   1821c:	07db      	lsls	r3, r3, #31
   1821e:	bf1c      	itt	ne
   18220:	f811 3b01 	ldrbne.w	r3, [r1], #1
   18224:	f800 3b01 	strbne.w	r3, [r0], #1
   18228:	d380      	bcc.n	1812c <memcpy+0xc>
   1822a:	f831 3b02 	ldrh.w	r3, [r1], #2
   1822e:	f820 3b02 	strh.w	r3, [r0], #2
   18232:	e77b      	b.n	1812c <memcpy+0xc>
   18234:	3a04      	subs	r2, #4
   18236:	d3d9      	bcc.n	181ec <memcpy+0xcc>
   18238:	3a01      	subs	r2, #1
   1823a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1823e:	f800 3b01 	strb.w	r3, [r0], #1
   18242:	d2f9      	bcs.n	18238 <memcpy+0x118>
   18244:	780b      	ldrb	r3, [r1, #0]
   18246:	7003      	strb	r3, [r0, #0]
   18248:	784b      	ldrb	r3, [r1, #1]
   1824a:	7043      	strb	r3, [r0, #1]
   1824c:	788b      	ldrb	r3, [r1, #2]
   1824e:	7083      	strb	r3, [r0, #2]
   18250:	4660      	mov	r0, ip
   18252:	4770      	bx	lr

00018254 <memmove>:
   18254:	4288      	cmp	r0, r1
   18256:	b5f0      	push	{r4, r5, r6, r7, lr}
   18258:	d90d      	bls.n	18276 <memmove+0x22>
   1825a:	188b      	adds	r3, r1, r2
   1825c:	4298      	cmp	r0, r3
   1825e:	d20a      	bcs.n	18276 <memmove+0x22>
   18260:	1884      	adds	r4, r0, r2
   18262:	2a00      	cmp	r2, #0
   18264:	d051      	beq.n	1830a <memmove+0xb6>
   18266:	4622      	mov	r2, r4
   18268:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1826c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   18270:	4299      	cmp	r1, r3
   18272:	d1f9      	bne.n	18268 <memmove+0x14>
   18274:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18276:	2a0f      	cmp	r2, #15
   18278:	d948      	bls.n	1830c <memmove+0xb8>
   1827a:	ea41 0300 	orr.w	r3, r1, r0
   1827e:	079b      	lsls	r3, r3, #30
   18280:	d146      	bne.n	18310 <memmove+0xbc>
   18282:	f100 0410 	add.w	r4, r0, #16
   18286:	f101 0310 	add.w	r3, r1, #16
   1828a:	4615      	mov	r5, r2
   1828c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   18290:	f844 6c10 	str.w	r6, [r4, #-16]
   18294:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   18298:	f844 6c0c 	str.w	r6, [r4, #-12]
   1829c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   182a0:	f844 6c08 	str.w	r6, [r4, #-8]
   182a4:	3d10      	subs	r5, #16
   182a6:	f853 6c04 	ldr.w	r6, [r3, #-4]
   182aa:	f844 6c04 	str.w	r6, [r4, #-4]
   182ae:	2d0f      	cmp	r5, #15
   182b0:	f103 0310 	add.w	r3, r3, #16
   182b4:	f104 0410 	add.w	r4, r4, #16
   182b8:	d8e8      	bhi.n	1828c <memmove+0x38>
   182ba:	f1a2 0310 	sub.w	r3, r2, #16
   182be:	f023 030f 	bic.w	r3, r3, #15
   182c2:	f002 0e0f 	and.w	lr, r2, #15
   182c6:	3310      	adds	r3, #16
   182c8:	f1be 0f03 	cmp.w	lr, #3
   182cc:	4419      	add	r1, r3
   182ce:	4403      	add	r3, r0
   182d0:	d921      	bls.n	18316 <memmove+0xc2>
   182d2:	1f1e      	subs	r6, r3, #4
   182d4:	460d      	mov	r5, r1
   182d6:	4674      	mov	r4, lr
   182d8:	3c04      	subs	r4, #4
   182da:	f855 7b04 	ldr.w	r7, [r5], #4
   182de:	f846 7f04 	str.w	r7, [r6, #4]!
   182e2:	2c03      	cmp	r4, #3
   182e4:	d8f8      	bhi.n	182d8 <memmove+0x84>
   182e6:	f1ae 0404 	sub.w	r4, lr, #4
   182ea:	f024 0403 	bic.w	r4, r4, #3
   182ee:	3404      	adds	r4, #4
   182f0:	4421      	add	r1, r4
   182f2:	4423      	add	r3, r4
   182f4:	f002 0203 	and.w	r2, r2, #3
   182f8:	b162      	cbz	r2, 18314 <memmove+0xc0>
   182fa:	3b01      	subs	r3, #1
   182fc:	440a      	add	r2, r1
   182fe:	f811 4b01 	ldrb.w	r4, [r1], #1
   18302:	f803 4f01 	strb.w	r4, [r3, #1]!
   18306:	428a      	cmp	r2, r1
   18308:	d1f9      	bne.n	182fe <memmove+0xaa>
   1830a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1830c:	4603      	mov	r3, r0
   1830e:	e7f3      	b.n	182f8 <memmove+0xa4>
   18310:	4603      	mov	r3, r0
   18312:	e7f2      	b.n	182fa <memmove+0xa6>
   18314:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18316:	4672      	mov	r2, lr
   18318:	e7ee      	b.n	182f8 <memmove+0xa4>
   1831a:	bf00      	nop

0001831c <memset>:
   1831c:	b470      	push	{r4, r5, r6}
   1831e:	0786      	lsls	r6, r0, #30
   18320:	d046      	beq.n	183b0 <memset+0x94>
   18322:	1e54      	subs	r4, r2, #1
   18324:	2a00      	cmp	r2, #0
   18326:	d041      	beq.n	183ac <memset+0x90>
   18328:	b2ca      	uxtb	r2, r1
   1832a:	4603      	mov	r3, r0
   1832c:	e002      	b.n	18334 <memset+0x18>
   1832e:	f114 34ff 	adds.w	r4, r4, #4294967295
   18332:	d33b      	bcc.n	183ac <memset+0x90>
   18334:	f803 2b01 	strb.w	r2, [r3], #1
   18338:	079d      	lsls	r5, r3, #30
   1833a:	d1f8      	bne.n	1832e <memset+0x12>
   1833c:	2c03      	cmp	r4, #3
   1833e:	d92e      	bls.n	1839e <memset+0x82>
   18340:	b2cd      	uxtb	r5, r1
   18342:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   18346:	2c0f      	cmp	r4, #15
   18348:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1834c:	d919      	bls.n	18382 <memset+0x66>
   1834e:	f103 0210 	add.w	r2, r3, #16
   18352:	4626      	mov	r6, r4
   18354:	3e10      	subs	r6, #16
   18356:	2e0f      	cmp	r6, #15
   18358:	f842 5c10 	str.w	r5, [r2, #-16]
   1835c:	f842 5c0c 	str.w	r5, [r2, #-12]
   18360:	f842 5c08 	str.w	r5, [r2, #-8]
   18364:	f842 5c04 	str.w	r5, [r2, #-4]
   18368:	f102 0210 	add.w	r2, r2, #16
   1836c:	d8f2      	bhi.n	18354 <memset+0x38>
   1836e:	f1a4 0210 	sub.w	r2, r4, #16
   18372:	f022 020f 	bic.w	r2, r2, #15
   18376:	f004 040f 	and.w	r4, r4, #15
   1837a:	3210      	adds	r2, #16
   1837c:	2c03      	cmp	r4, #3
   1837e:	4413      	add	r3, r2
   18380:	d90d      	bls.n	1839e <memset+0x82>
   18382:	461e      	mov	r6, r3
   18384:	4622      	mov	r2, r4
   18386:	3a04      	subs	r2, #4
   18388:	2a03      	cmp	r2, #3
   1838a:	f846 5b04 	str.w	r5, [r6], #4
   1838e:	d8fa      	bhi.n	18386 <memset+0x6a>
   18390:	1f22      	subs	r2, r4, #4
   18392:	f022 0203 	bic.w	r2, r2, #3
   18396:	3204      	adds	r2, #4
   18398:	4413      	add	r3, r2
   1839a:	f004 0403 	and.w	r4, r4, #3
   1839e:	b12c      	cbz	r4, 183ac <memset+0x90>
   183a0:	b2c9      	uxtb	r1, r1
   183a2:	441c      	add	r4, r3
   183a4:	f803 1b01 	strb.w	r1, [r3], #1
   183a8:	429c      	cmp	r4, r3
   183aa:	d1fb      	bne.n	183a4 <memset+0x88>
   183ac:	bc70      	pop	{r4, r5, r6}
   183ae:	4770      	bx	lr
   183b0:	4614      	mov	r4, r2
   183b2:	4603      	mov	r3, r0
   183b4:	e7c2      	b.n	1833c <memset+0x20>
   183b6:	bf00      	nop

000183b8 <__malloc_lock>:
   183b8:	4801      	ldr	r0, [pc, #4]	; (183c0 <__malloc_lock+0x8>)
   183ba:	f7ff bad9 	b.w	17970 <__retarget_lock_acquire_recursive>
   183be:	bf00      	nop
   183c0:	2001b0a8 	.word	0x2001b0a8

000183c4 <__malloc_unlock>:
   183c4:	4801      	ldr	r0, [pc, #4]	; (183cc <__malloc_unlock+0x8>)
   183c6:	f7ff bad5 	b.w	17974 <__retarget_lock_release_recursive>
   183ca:	bf00      	nop
   183cc:	2001b0a8 	.word	0x2001b0a8

000183d0 <printf>:
   183d0:	b40f      	push	{r0, r1, r2, r3}
   183d2:	b500      	push	{lr}
   183d4:	4907      	ldr	r1, [pc, #28]	; (183f4 <printf+0x24>)
   183d6:	b083      	sub	sp, #12
   183d8:	ab04      	add	r3, sp, #16
   183da:	6808      	ldr	r0, [r1, #0]
   183dc:	f853 2b04 	ldr.w	r2, [r3], #4
   183e0:	6881      	ldr	r1, [r0, #8]
   183e2:	9301      	str	r3, [sp, #4]
   183e4:	f002 fff0 	bl	1b3c8 <_vfprintf_r>
   183e8:	b003      	add	sp, #12
   183ea:	f85d eb04 	ldr.w	lr, [sp], #4
   183ee:	b004      	add	sp, #16
   183f0:	4770      	bx	lr
   183f2:	bf00      	nop
   183f4:	20000020 	.word	0x20000020

000183f8 <_putc_r>:
   183f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   183fa:	460e      	mov	r6, r1
   183fc:	4614      	mov	r4, r2
   183fe:	4607      	mov	r7, r0
   18400:	b108      	cbz	r0, 18406 <_putc_r+0xe>
   18402:	6b83      	ldr	r3, [r0, #56]	; 0x38
   18404:	b34b      	cbz	r3, 1845a <_putc_r+0x62>
   18406:	6e63      	ldr	r3, [r4, #100]	; 0x64
   18408:	07d8      	lsls	r0, r3, #31
   1840a:	d402      	bmi.n	18412 <_putc_r+0x1a>
   1840c:	89a3      	ldrh	r3, [r4, #12]
   1840e:	0599      	lsls	r1, r3, #22
   18410:	d526      	bpl.n	18460 <_putc_r+0x68>
   18412:	68a3      	ldr	r3, [r4, #8]
   18414:	3b01      	subs	r3, #1
   18416:	2b00      	cmp	r3, #0
   18418:	60a3      	str	r3, [r4, #8]
   1841a:	db11      	blt.n	18440 <_putc_r+0x48>
   1841c:	b2f5      	uxtb	r5, r6
   1841e:	6823      	ldr	r3, [r4, #0]
   18420:	1c5a      	adds	r2, r3, #1
   18422:	6022      	str	r2, [r4, #0]
   18424:	701e      	strb	r6, [r3, #0]
   18426:	6e63      	ldr	r3, [r4, #100]	; 0x64
   18428:	07da      	lsls	r2, r3, #31
   1842a:	d402      	bmi.n	18432 <_putc_r+0x3a>
   1842c:	89a3      	ldrh	r3, [r4, #12]
   1842e:	059b      	lsls	r3, r3, #22
   18430:	d501      	bpl.n	18436 <_putc_r+0x3e>
   18432:	4628      	mov	r0, r5
   18434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18436:	6da0      	ldr	r0, [r4, #88]	; 0x58
   18438:	f7ff fa9c 	bl	17974 <__retarget_lock_release_recursive>
   1843c:	4628      	mov	r0, r5
   1843e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18440:	69a2      	ldr	r2, [r4, #24]
   18442:	4293      	cmp	r3, r2
   18444:	db02      	blt.n	1844c <_putc_r+0x54>
   18446:	b2f5      	uxtb	r5, r6
   18448:	2d0a      	cmp	r5, #10
   1844a:	d1e8      	bne.n	1841e <_putc_r+0x26>
   1844c:	4631      	mov	r1, r6
   1844e:	4638      	mov	r0, r7
   18450:	4622      	mov	r2, r4
   18452:	f004 faa7 	bl	1c9a4 <__swbuf_r>
   18456:	4605      	mov	r5, r0
   18458:	e7e5      	b.n	18426 <_putc_r+0x2e>
   1845a:	f005 fce7 	bl	1de2c <__sinit>
   1845e:	e7d2      	b.n	18406 <_putc_r+0xe>
   18460:	6da0      	ldr	r0, [r4, #88]	; 0x58
   18462:	f7ff fa85 	bl	17970 <__retarget_lock_acquire_recursive>
   18466:	e7d4      	b.n	18412 <_putc_r+0x1a>

00018468 <realloc>:
   18468:	4b02      	ldr	r3, [pc, #8]	; (18474 <realloc+0xc>)
   1846a:	460a      	mov	r2, r1
   1846c:	4601      	mov	r1, r0
   1846e:	6818      	ldr	r0, [r3, #0]
   18470:	f000 b802 	b.w	18478 <_realloc_r>
   18474:	20000020 	.word	0x20000020

00018478 <_realloc_r>:
   18478:	2900      	cmp	r1, #0
   1847a:	f000 8095 	beq.w	185a8 <_realloc_r+0x130>
   1847e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18482:	460d      	mov	r5, r1
   18484:	4616      	mov	r6, r2
   18486:	b083      	sub	sp, #12
   18488:	4680      	mov	r8, r0
   1848a:	f106 070b 	add.w	r7, r6, #11
   1848e:	f7ff ff93 	bl	183b8 <__malloc_lock>
   18492:	f855 ec04 	ldr.w	lr, [r5, #-4]
   18496:	2f16      	cmp	r7, #22
   18498:	f02e 0403 	bic.w	r4, lr, #3
   1849c:	f1a5 0908 	sub.w	r9, r5, #8
   184a0:	d83c      	bhi.n	1851c <_realloc_r+0xa4>
   184a2:	2210      	movs	r2, #16
   184a4:	4617      	mov	r7, r2
   184a6:	42be      	cmp	r6, r7
   184a8:	d83d      	bhi.n	18526 <_realloc_r+0xae>
   184aa:	4294      	cmp	r4, r2
   184ac:	da43      	bge.n	18536 <_realloc_r+0xbe>
   184ae:	4bc4      	ldr	r3, [pc, #784]	; (187c0 <_realloc_r+0x348>)
   184b0:	6899      	ldr	r1, [r3, #8]
   184b2:	eb09 0004 	add.w	r0, r9, r4
   184b6:	4288      	cmp	r0, r1
   184b8:	f000 80b4 	beq.w	18624 <_realloc_r+0x1ac>
   184bc:	6843      	ldr	r3, [r0, #4]
   184be:	f023 0101 	bic.w	r1, r3, #1
   184c2:	4401      	add	r1, r0
   184c4:	6849      	ldr	r1, [r1, #4]
   184c6:	07c9      	lsls	r1, r1, #31
   184c8:	d54c      	bpl.n	18564 <_realloc_r+0xec>
   184ca:	f01e 0f01 	tst.w	lr, #1
   184ce:	f000 809b 	beq.w	18608 <_realloc_r+0x190>
   184d2:	4631      	mov	r1, r6
   184d4:	4640      	mov	r0, r8
   184d6:	f7ff fad7 	bl	17a88 <_malloc_r>
   184da:	4606      	mov	r6, r0
   184dc:	2800      	cmp	r0, #0
   184de:	d03a      	beq.n	18556 <_realloc_r+0xde>
   184e0:	f855 3c04 	ldr.w	r3, [r5, #-4]
   184e4:	f023 0301 	bic.w	r3, r3, #1
   184e8:	444b      	add	r3, r9
   184ea:	f1a0 0208 	sub.w	r2, r0, #8
   184ee:	429a      	cmp	r2, r3
   184f0:	f000 8121 	beq.w	18736 <_realloc_r+0x2be>
   184f4:	1f22      	subs	r2, r4, #4
   184f6:	2a24      	cmp	r2, #36	; 0x24
   184f8:	f200 8107 	bhi.w	1870a <_realloc_r+0x292>
   184fc:	2a13      	cmp	r2, #19
   184fe:	f200 80db 	bhi.w	186b8 <_realloc_r+0x240>
   18502:	4603      	mov	r3, r0
   18504:	462a      	mov	r2, r5
   18506:	6811      	ldr	r1, [r2, #0]
   18508:	6019      	str	r1, [r3, #0]
   1850a:	6851      	ldr	r1, [r2, #4]
   1850c:	6059      	str	r1, [r3, #4]
   1850e:	6892      	ldr	r2, [r2, #8]
   18510:	609a      	str	r2, [r3, #8]
   18512:	4629      	mov	r1, r5
   18514:	4640      	mov	r0, r8
   18516:	f005 fdaf 	bl	1e078 <_free_r>
   1851a:	e01c      	b.n	18556 <_realloc_r+0xde>
   1851c:	f027 0707 	bic.w	r7, r7, #7
   18520:	2f00      	cmp	r7, #0
   18522:	463a      	mov	r2, r7
   18524:	dabf      	bge.n	184a6 <_realloc_r+0x2e>
   18526:	2600      	movs	r6, #0
   18528:	230c      	movs	r3, #12
   1852a:	4630      	mov	r0, r6
   1852c:	f8c8 3000 	str.w	r3, [r8]
   18530:	b003      	add	sp, #12
   18532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18536:	462e      	mov	r6, r5
   18538:	1be3      	subs	r3, r4, r7
   1853a:	2b0f      	cmp	r3, #15
   1853c:	d81e      	bhi.n	1857c <_realloc_r+0x104>
   1853e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   18542:	f003 0301 	and.w	r3, r3, #1
   18546:	4323      	orrs	r3, r4
   18548:	444c      	add	r4, r9
   1854a:	f8c9 3004 	str.w	r3, [r9, #4]
   1854e:	6863      	ldr	r3, [r4, #4]
   18550:	f043 0301 	orr.w	r3, r3, #1
   18554:	6063      	str	r3, [r4, #4]
   18556:	4640      	mov	r0, r8
   18558:	f7ff ff34 	bl	183c4 <__malloc_unlock>
   1855c:	4630      	mov	r0, r6
   1855e:	b003      	add	sp, #12
   18560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18564:	f023 0303 	bic.w	r3, r3, #3
   18568:	18e1      	adds	r1, r4, r3
   1856a:	4291      	cmp	r1, r2
   1856c:	db1f      	blt.n	185ae <_realloc_r+0x136>
   1856e:	68c3      	ldr	r3, [r0, #12]
   18570:	6882      	ldr	r2, [r0, #8]
   18572:	462e      	mov	r6, r5
   18574:	60d3      	str	r3, [r2, #12]
   18576:	460c      	mov	r4, r1
   18578:	609a      	str	r2, [r3, #8]
   1857a:	e7dd      	b.n	18538 <_realloc_r+0xc0>
   1857c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   18580:	eb09 0107 	add.w	r1, r9, r7
   18584:	f002 0201 	and.w	r2, r2, #1
   18588:	444c      	add	r4, r9
   1858a:	f043 0301 	orr.w	r3, r3, #1
   1858e:	4317      	orrs	r7, r2
   18590:	f8c9 7004 	str.w	r7, [r9, #4]
   18594:	604b      	str	r3, [r1, #4]
   18596:	6863      	ldr	r3, [r4, #4]
   18598:	f043 0301 	orr.w	r3, r3, #1
   1859c:	3108      	adds	r1, #8
   1859e:	6063      	str	r3, [r4, #4]
   185a0:	4640      	mov	r0, r8
   185a2:	f005 fd69 	bl	1e078 <_free_r>
   185a6:	e7d6      	b.n	18556 <_realloc_r+0xde>
   185a8:	4611      	mov	r1, r2
   185aa:	f7ff ba6d 	b.w	17a88 <_malloc_r>
   185ae:	f01e 0f01 	tst.w	lr, #1
   185b2:	d18e      	bne.n	184d2 <_realloc_r+0x5a>
   185b4:	f855 1c08 	ldr.w	r1, [r5, #-8]
   185b8:	eba9 0a01 	sub.w	sl, r9, r1
   185bc:	f8da 1004 	ldr.w	r1, [sl, #4]
   185c0:	f021 0103 	bic.w	r1, r1, #3
   185c4:	440b      	add	r3, r1
   185c6:	4423      	add	r3, r4
   185c8:	4293      	cmp	r3, r2
   185ca:	db25      	blt.n	18618 <_realloc_r+0x1a0>
   185cc:	68c2      	ldr	r2, [r0, #12]
   185ce:	6881      	ldr	r1, [r0, #8]
   185d0:	4656      	mov	r6, sl
   185d2:	60ca      	str	r2, [r1, #12]
   185d4:	6091      	str	r1, [r2, #8]
   185d6:	f8da 100c 	ldr.w	r1, [sl, #12]
   185da:	f856 0f08 	ldr.w	r0, [r6, #8]!
   185de:	1f22      	subs	r2, r4, #4
   185e0:	2a24      	cmp	r2, #36	; 0x24
   185e2:	60c1      	str	r1, [r0, #12]
   185e4:	6088      	str	r0, [r1, #8]
   185e6:	f200 8094 	bhi.w	18712 <_realloc_r+0x29a>
   185ea:	2a13      	cmp	r2, #19
   185ec:	d96f      	bls.n	186ce <_realloc_r+0x256>
   185ee:	6829      	ldr	r1, [r5, #0]
   185f0:	f8ca 1008 	str.w	r1, [sl, #8]
   185f4:	6869      	ldr	r1, [r5, #4]
   185f6:	f8ca 100c 	str.w	r1, [sl, #12]
   185fa:	2a1b      	cmp	r2, #27
   185fc:	f200 80a2 	bhi.w	18744 <_realloc_r+0x2cc>
   18600:	3508      	adds	r5, #8
   18602:	f10a 0210 	add.w	r2, sl, #16
   18606:	e063      	b.n	186d0 <_realloc_r+0x258>
   18608:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1860c:	eba9 0a03 	sub.w	sl, r9, r3
   18610:	f8da 1004 	ldr.w	r1, [sl, #4]
   18614:	f021 0103 	bic.w	r1, r1, #3
   18618:	1863      	adds	r3, r4, r1
   1861a:	4293      	cmp	r3, r2
   1861c:	f6ff af59 	blt.w	184d2 <_realloc_r+0x5a>
   18620:	4656      	mov	r6, sl
   18622:	e7d8      	b.n	185d6 <_realloc_r+0x15e>
   18624:	6841      	ldr	r1, [r0, #4]
   18626:	f021 0b03 	bic.w	fp, r1, #3
   1862a:	44a3      	add	fp, r4
   1862c:	f107 0010 	add.w	r0, r7, #16
   18630:	4583      	cmp	fp, r0
   18632:	da56      	bge.n	186e2 <_realloc_r+0x26a>
   18634:	f01e 0f01 	tst.w	lr, #1
   18638:	f47f af4b 	bne.w	184d2 <_realloc_r+0x5a>
   1863c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   18640:	eba9 0a01 	sub.w	sl, r9, r1
   18644:	f8da 1004 	ldr.w	r1, [sl, #4]
   18648:	f021 0103 	bic.w	r1, r1, #3
   1864c:	448b      	add	fp, r1
   1864e:	4558      	cmp	r0, fp
   18650:	dce2      	bgt.n	18618 <_realloc_r+0x1a0>
   18652:	4656      	mov	r6, sl
   18654:	f8da 100c 	ldr.w	r1, [sl, #12]
   18658:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1865c:	1f22      	subs	r2, r4, #4
   1865e:	2a24      	cmp	r2, #36	; 0x24
   18660:	60c1      	str	r1, [r0, #12]
   18662:	6088      	str	r0, [r1, #8]
   18664:	f200 808f 	bhi.w	18786 <_realloc_r+0x30e>
   18668:	2a13      	cmp	r2, #19
   1866a:	f240 808a 	bls.w	18782 <_realloc_r+0x30a>
   1866e:	6829      	ldr	r1, [r5, #0]
   18670:	f8ca 1008 	str.w	r1, [sl, #8]
   18674:	6869      	ldr	r1, [r5, #4]
   18676:	f8ca 100c 	str.w	r1, [sl, #12]
   1867a:	2a1b      	cmp	r2, #27
   1867c:	f200 808a 	bhi.w	18794 <_realloc_r+0x31c>
   18680:	3508      	adds	r5, #8
   18682:	f10a 0210 	add.w	r2, sl, #16
   18686:	6829      	ldr	r1, [r5, #0]
   18688:	6011      	str	r1, [r2, #0]
   1868a:	6869      	ldr	r1, [r5, #4]
   1868c:	6051      	str	r1, [r2, #4]
   1868e:	68a9      	ldr	r1, [r5, #8]
   18690:	6091      	str	r1, [r2, #8]
   18692:	eb0a 0107 	add.w	r1, sl, r7
   18696:	ebab 0207 	sub.w	r2, fp, r7
   1869a:	f042 0201 	orr.w	r2, r2, #1
   1869e:	6099      	str	r1, [r3, #8]
   186a0:	604a      	str	r2, [r1, #4]
   186a2:	f8da 3004 	ldr.w	r3, [sl, #4]
   186a6:	f003 0301 	and.w	r3, r3, #1
   186aa:	431f      	orrs	r7, r3
   186ac:	4640      	mov	r0, r8
   186ae:	f8ca 7004 	str.w	r7, [sl, #4]
   186b2:	f7ff fe87 	bl	183c4 <__malloc_unlock>
   186b6:	e751      	b.n	1855c <_realloc_r+0xe4>
   186b8:	682b      	ldr	r3, [r5, #0]
   186ba:	6003      	str	r3, [r0, #0]
   186bc:	686b      	ldr	r3, [r5, #4]
   186be:	6043      	str	r3, [r0, #4]
   186c0:	2a1b      	cmp	r2, #27
   186c2:	d82d      	bhi.n	18720 <_realloc_r+0x2a8>
   186c4:	f100 0308 	add.w	r3, r0, #8
   186c8:	f105 0208 	add.w	r2, r5, #8
   186cc:	e71b      	b.n	18506 <_realloc_r+0x8e>
   186ce:	4632      	mov	r2, r6
   186d0:	6829      	ldr	r1, [r5, #0]
   186d2:	6011      	str	r1, [r2, #0]
   186d4:	6869      	ldr	r1, [r5, #4]
   186d6:	6051      	str	r1, [r2, #4]
   186d8:	68a9      	ldr	r1, [r5, #8]
   186da:	6091      	str	r1, [r2, #8]
   186dc:	461c      	mov	r4, r3
   186de:	46d1      	mov	r9, sl
   186e0:	e72a      	b.n	18538 <_realloc_r+0xc0>
   186e2:	eb09 0107 	add.w	r1, r9, r7
   186e6:	ebab 0b07 	sub.w	fp, fp, r7
   186ea:	f04b 0201 	orr.w	r2, fp, #1
   186ee:	6099      	str	r1, [r3, #8]
   186f0:	604a      	str	r2, [r1, #4]
   186f2:	f855 3c04 	ldr.w	r3, [r5, #-4]
   186f6:	f003 0301 	and.w	r3, r3, #1
   186fa:	431f      	orrs	r7, r3
   186fc:	4640      	mov	r0, r8
   186fe:	f845 7c04 	str.w	r7, [r5, #-4]
   18702:	f7ff fe5f 	bl	183c4 <__malloc_unlock>
   18706:	462e      	mov	r6, r5
   18708:	e728      	b.n	1855c <_realloc_r+0xe4>
   1870a:	4629      	mov	r1, r5
   1870c:	f7ff fda2 	bl	18254 <memmove>
   18710:	e6ff      	b.n	18512 <_realloc_r+0x9a>
   18712:	4629      	mov	r1, r5
   18714:	4630      	mov	r0, r6
   18716:	461c      	mov	r4, r3
   18718:	46d1      	mov	r9, sl
   1871a:	f7ff fd9b 	bl	18254 <memmove>
   1871e:	e70b      	b.n	18538 <_realloc_r+0xc0>
   18720:	68ab      	ldr	r3, [r5, #8]
   18722:	6083      	str	r3, [r0, #8]
   18724:	68eb      	ldr	r3, [r5, #12]
   18726:	60c3      	str	r3, [r0, #12]
   18728:	2a24      	cmp	r2, #36	; 0x24
   1872a:	d017      	beq.n	1875c <_realloc_r+0x2e4>
   1872c:	f100 0310 	add.w	r3, r0, #16
   18730:	f105 0210 	add.w	r2, r5, #16
   18734:	e6e7      	b.n	18506 <_realloc_r+0x8e>
   18736:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1873a:	f023 0303 	bic.w	r3, r3, #3
   1873e:	441c      	add	r4, r3
   18740:	462e      	mov	r6, r5
   18742:	e6f9      	b.n	18538 <_realloc_r+0xc0>
   18744:	68a9      	ldr	r1, [r5, #8]
   18746:	f8ca 1010 	str.w	r1, [sl, #16]
   1874a:	68e9      	ldr	r1, [r5, #12]
   1874c:	f8ca 1014 	str.w	r1, [sl, #20]
   18750:	2a24      	cmp	r2, #36	; 0x24
   18752:	d00c      	beq.n	1876e <_realloc_r+0x2f6>
   18754:	3510      	adds	r5, #16
   18756:	f10a 0218 	add.w	r2, sl, #24
   1875a:	e7b9      	b.n	186d0 <_realloc_r+0x258>
   1875c:	692b      	ldr	r3, [r5, #16]
   1875e:	6103      	str	r3, [r0, #16]
   18760:	696b      	ldr	r3, [r5, #20]
   18762:	6143      	str	r3, [r0, #20]
   18764:	f105 0218 	add.w	r2, r5, #24
   18768:	f100 0318 	add.w	r3, r0, #24
   1876c:	e6cb      	b.n	18506 <_realloc_r+0x8e>
   1876e:	692a      	ldr	r2, [r5, #16]
   18770:	f8ca 2018 	str.w	r2, [sl, #24]
   18774:	696a      	ldr	r2, [r5, #20]
   18776:	f8ca 201c 	str.w	r2, [sl, #28]
   1877a:	3518      	adds	r5, #24
   1877c:	f10a 0220 	add.w	r2, sl, #32
   18780:	e7a6      	b.n	186d0 <_realloc_r+0x258>
   18782:	4632      	mov	r2, r6
   18784:	e77f      	b.n	18686 <_realloc_r+0x20e>
   18786:	4629      	mov	r1, r5
   18788:	4630      	mov	r0, r6
   1878a:	9301      	str	r3, [sp, #4]
   1878c:	f7ff fd62 	bl	18254 <memmove>
   18790:	9b01      	ldr	r3, [sp, #4]
   18792:	e77e      	b.n	18692 <_realloc_r+0x21a>
   18794:	68a9      	ldr	r1, [r5, #8]
   18796:	f8ca 1010 	str.w	r1, [sl, #16]
   1879a:	68e9      	ldr	r1, [r5, #12]
   1879c:	f8ca 1014 	str.w	r1, [sl, #20]
   187a0:	2a24      	cmp	r2, #36	; 0x24
   187a2:	d003      	beq.n	187ac <_realloc_r+0x334>
   187a4:	3510      	adds	r5, #16
   187a6:	f10a 0218 	add.w	r2, sl, #24
   187aa:	e76c      	b.n	18686 <_realloc_r+0x20e>
   187ac:	692a      	ldr	r2, [r5, #16]
   187ae:	f8ca 2018 	str.w	r2, [sl, #24]
   187b2:	696a      	ldr	r2, [r5, #20]
   187b4:	f8ca 201c 	str.w	r2, [sl, #28]
   187b8:	3518      	adds	r5, #24
   187ba:	f10a 0220 	add.w	r2, sl, #32
   187be:	e762      	b.n	18686 <_realloc_r+0x20e>
   187c0:	200005bc 	.word	0x200005bc

000187c4 <_sbrk_r>:
   187c4:	b538      	push	{r3, r4, r5, lr}
   187c6:	4c07      	ldr	r4, [pc, #28]	; (187e4 <_sbrk_r+0x20>)
   187c8:	2300      	movs	r3, #0
   187ca:	4605      	mov	r5, r0
   187cc:	4608      	mov	r0, r1
   187ce:	6023      	str	r3, [r4, #0]
   187d0:	f7e7 ff80 	bl	6d4 <_sbrk>
   187d4:	1c43      	adds	r3, r0, #1
   187d6:	d000      	beq.n	187da <_sbrk_r+0x16>
   187d8:	bd38      	pop	{r3, r4, r5, pc}
   187da:	6823      	ldr	r3, [r4, #0]
   187dc:	2b00      	cmp	r3, #0
   187de:	d0fb      	beq.n	187d8 <_sbrk_r+0x14>
   187e0:	602b      	str	r3, [r5, #0]
   187e2:	bd38      	pop	{r3, r4, r5, pc}
   187e4:	2001b0cc 	.word	0x2001b0cc

000187e8 <_raise_r>:
   187e8:	291f      	cmp	r1, #31
   187ea:	d828      	bhi.n	1883e <_raise_r+0x56>
   187ec:	b520      	push	{r5, lr}
   187ee:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   187f2:	b082      	sub	sp, #8
   187f4:	4605      	mov	r5, r0
   187f6:	b1aa      	cbz	r2, 18824 <_raise_r+0x3c>
   187f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   187fc:	b193      	cbz	r3, 18824 <_raise_r+0x3c>
   187fe:	2b01      	cmp	r3, #1
   18800:	d00e      	beq.n	18820 <_raise_r+0x38>
   18802:	1c58      	adds	r0, r3, #1
   18804:	d007      	beq.n	18816 <_raise_r+0x2e>
   18806:	2500      	movs	r5, #0
   18808:	4608      	mov	r0, r1
   1880a:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   1880e:	4798      	blx	r3
   18810:	4628      	mov	r0, r5
   18812:	b002      	add	sp, #8
   18814:	bd20      	pop	{r5, pc}
   18816:	2316      	movs	r3, #22
   18818:	2001      	movs	r0, #1
   1881a:	602b      	str	r3, [r5, #0]
   1881c:	b002      	add	sp, #8
   1881e:	bd20      	pop	{r5, pc}
   18820:	2000      	movs	r0, #0
   18822:	e7f6      	b.n	18812 <_raise_r+0x2a>
   18824:	4628      	mov	r0, r5
   18826:	9101      	str	r1, [sp, #4]
   18828:	f000 f82a 	bl	18880 <_getpid_r>
   1882c:	9901      	ldr	r1, [sp, #4]
   1882e:	460a      	mov	r2, r1
   18830:	4601      	mov	r1, r0
   18832:	4628      	mov	r0, r5
   18834:	b002      	add	sp, #8
   18836:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
   1883a:	f000 b80d 	b.w	18858 <_kill_r>
   1883e:	2316      	movs	r3, #22
   18840:	6003      	str	r3, [r0, #0]
   18842:	f04f 30ff 	mov.w	r0, #4294967295
   18846:	4770      	bx	lr

00018848 <raise>:
   18848:	4b02      	ldr	r3, [pc, #8]	; (18854 <raise+0xc>)
   1884a:	4601      	mov	r1, r0
   1884c:	6818      	ldr	r0, [r3, #0]
   1884e:	f7ff bfcb 	b.w	187e8 <_raise_r>
   18852:	bf00      	nop
   18854:	20000020 	.word	0x20000020

00018858 <_kill_r>:
   18858:	b538      	push	{r3, r4, r5, lr}
   1885a:	460b      	mov	r3, r1
   1885c:	4c07      	ldr	r4, [pc, #28]	; (1887c <_kill_r+0x24>)
   1885e:	4605      	mov	r5, r0
   18860:	4611      	mov	r1, r2
   18862:	4618      	mov	r0, r3
   18864:	2300      	movs	r3, #0
   18866:	6023      	str	r3, [r4, #0]
   18868:	f7e7 ff5c 	bl	724 <_kill>
   1886c:	1c43      	adds	r3, r0, #1
   1886e:	d000      	beq.n	18872 <_kill_r+0x1a>
   18870:	bd38      	pop	{r3, r4, r5, pc}
   18872:	6823      	ldr	r3, [r4, #0]
   18874:	2b00      	cmp	r3, #0
   18876:	d0fb      	beq.n	18870 <_kill_r+0x18>
   18878:	602b      	str	r3, [r5, #0]
   1887a:	bd38      	pop	{r3, r4, r5, pc}
   1887c:	2001b0cc 	.word	0x2001b0cc

00018880 <_getpid_r>:
   18880:	f7e7 bf51 	b.w	726 <_getpid>

00018884 <sprintf>:
   18884:	b40e      	push	{r1, r2, r3}
   18886:	b5f0      	push	{r4, r5, r6, r7, lr}
   18888:	b09c      	sub	sp, #112	; 0x70
   1888a:	ab21      	add	r3, sp, #132	; 0x84
   1888c:	490f      	ldr	r1, [pc, #60]	; (188cc <sprintf+0x48>)
   1888e:	f853 2b04 	ldr.w	r2, [r3], #4
   18892:	9301      	str	r3, [sp, #4]
   18894:	4605      	mov	r5, r0
   18896:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1889a:	6808      	ldr	r0, [r1, #0]
   1889c:	9502      	str	r5, [sp, #8]
   1889e:	f44f 7702 	mov.w	r7, #520	; 0x208
   188a2:	f64f 76ff 	movw	r6, #65535	; 0xffff
   188a6:	a902      	add	r1, sp, #8
   188a8:	9506      	str	r5, [sp, #24]
   188aa:	f8ad 7014 	strh.w	r7, [sp, #20]
   188ae:	9404      	str	r4, [sp, #16]
   188b0:	9407      	str	r4, [sp, #28]
   188b2:	f8ad 6016 	strh.w	r6, [sp, #22]
   188b6:	f000 fc83 	bl	191c0 <_svfprintf_r>
   188ba:	9b02      	ldr	r3, [sp, #8]
   188bc:	2200      	movs	r2, #0
   188be:	701a      	strb	r2, [r3, #0]
   188c0:	b01c      	add	sp, #112	; 0x70
   188c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   188c6:	b003      	add	sp, #12
   188c8:	4770      	bx	lr
   188ca:	bf00      	nop
   188cc:	20000020 	.word	0x20000020

000188d0 <__sread>:
   188d0:	b510      	push	{r4, lr}
   188d2:	460c      	mov	r4, r1
   188d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   188d8:	f006 f80e 	bl	1e8f8 <_read_r>
   188dc:	2800      	cmp	r0, #0
   188de:	db03      	blt.n	188e8 <__sread+0x18>
   188e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   188e2:	4403      	add	r3, r0
   188e4:	6523      	str	r3, [r4, #80]	; 0x50
   188e6:	bd10      	pop	{r4, pc}
   188e8:	89a3      	ldrh	r3, [r4, #12]
   188ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   188ee:	81a3      	strh	r3, [r4, #12]
   188f0:	bd10      	pop	{r4, pc}
   188f2:	bf00      	nop

000188f4 <__swrite>:
   188f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   188f8:	4616      	mov	r6, r2
   188fa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   188fe:	461f      	mov	r7, r3
   18900:	05d3      	lsls	r3, r2, #23
   18902:	460c      	mov	r4, r1
   18904:	4605      	mov	r5, r0
   18906:	d507      	bpl.n	18918 <__swrite+0x24>
   18908:	2200      	movs	r2, #0
   1890a:	2302      	movs	r3, #2
   1890c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   18910:	f005 fce2 	bl	1e2d8 <_lseek_r>
   18914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   18918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1891c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   18920:	81a2      	strh	r2, [r4, #12]
   18922:	463b      	mov	r3, r7
   18924:	4632      	mov	r2, r6
   18926:	4628      	mov	r0, r5
   18928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1892c:	f004 b8ca 	b.w	1cac4 <_write_r>

00018930 <__sseek>:
   18930:	b510      	push	{r4, lr}
   18932:	460c      	mov	r4, r1
   18934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   18938:	f005 fcce 	bl	1e2d8 <_lseek_r>
   1893c:	89a3      	ldrh	r3, [r4, #12]
   1893e:	1c42      	adds	r2, r0, #1
   18940:	bf0e      	itee	eq
   18942:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   18946:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   1894a:	6520      	strne	r0, [r4, #80]	; 0x50
   1894c:	81a3      	strh	r3, [r4, #12]
   1894e:	bd10      	pop	{r4, pc}

00018950 <__sclose>:
   18950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   18954:	f004 b9a2 	b.w	1cc9c <_close_r>
	...
   18960:	eba2 0003 	sub.w	r0, r2, r3
   18964:	4770      	bx	lr
   18966:	bf00      	nop

00018968 <strcmp>:
   18968:	7802      	ldrb	r2, [r0, #0]
   1896a:	780b      	ldrb	r3, [r1, #0]
   1896c:	2a01      	cmp	r2, #1
   1896e:	bf28      	it	cs
   18970:	429a      	cmpcs	r2, r3
   18972:	d1f5      	bne.n	18960 <__sclose+0x10>
   18974:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   18978:	ea40 0401 	orr.w	r4, r0, r1
   1897c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   18980:	f06f 0c00 	mvn.w	ip, #0
   18984:	ea4f 7244 	mov.w	r2, r4, lsl #29
   18988:	b312      	cbz	r2, 189d0 <strcmp+0x68>
   1898a:	ea80 0401 	eor.w	r4, r0, r1
   1898e:	f014 0f07 	tst.w	r4, #7
   18992:	d16a      	bne.n	18a6a <strcmp+0x102>
   18994:	f000 0407 	and.w	r4, r0, #7
   18998:	f020 0007 	bic.w	r0, r0, #7
   1899c:	f004 0503 	and.w	r5, r4, #3
   189a0:	f021 0107 	bic.w	r1, r1, #7
   189a4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   189a8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   189ac:	f014 0f04 	tst.w	r4, #4
   189b0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   189b4:	fa0c f405 	lsl.w	r4, ip, r5
   189b8:	ea62 0204 	orn	r2, r2, r4
   189bc:	ea66 0604 	orn	r6, r6, r4
   189c0:	d00a      	beq.n	189d8 <strcmp+0x70>
   189c2:	ea63 0304 	orn	r3, r3, r4
   189c6:	4662      	mov	r2, ip
   189c8:	ea67 0704 	orn	r7, r7, r4
   189cc:	4666      	mov	r6, ip
   189ce:	e003      	b.n	189d8 <strcmp+0x70>
   189d0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   189d4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   189d8:	fa82 f54c 	uadd8	r5, r2, ip
   189dc:	ea82 0406 	eor.w	r4, r2, r6
   189e0:	faa4 f48c 	sel	r4, r4, ip
   189e4:	bb6c      	cbnz	r4, 18a42 <strcmp+0xda>
   189e6:	fa83 f54c 	uadd8	r5, r3, ip
   189ea:	ea83 0507 	eor.w	r5, r3, r7
   189ee:	faa5 f58c 	sel	r5, r5, ip
   189f2:	b995      	cbnz	r5, 18a1a <strcmp+0xb2>
   189f4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   189f8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   189fc:	fa82 f54c 	uadd8	r5, r2, ip
   18a00:	ea82 0406 	eor.w	r4, r2, r6
   18a04:	faa4 f48c 	sel	r4, r4, ip
   18a08:	fa83 f54c 	uadd8	r5, r3, ip
   18a0c:	ea83 0507 	eor.w	r5, r3, r7
   18a10:	faa5 f58c 	sel	r5, r5, ip
   18a14:	4325      	orrs	r5, r4
   18a16:	d0db      	beq.n	189d0 <strcmp+0x68>
   18a18:	b99c      	cbnz	r4, 18a42 <strcmp+0xda>
   18a1a:	ba2d      	rev	r5, r5
   18a1c:	fab5 f485 	clz	r4, r5
   18a20:	f024 0407 	bic.w	r4, r4, #7
   18a24:	fa27 f104 	lsr.w	r1, r7, r4
   18a28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   18a2c:	fa23 f304 	lsr.w	r3, r3, r4
   18a30:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   18a34:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   18a38:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   18a3c:	eba0 0001 	sub.w	r0, r0, r1
   18a40:	4770      	bx	lr
   18a42:	ba24      	rev	r4, r4
   18a44:	fab4 f484 	clz	r4, r4
   18a48:	f024 0407 	bic.w	r4, r4, #7
   18a4c:	fa26 f104 	lsr.w	r1, r6, r4
   18a50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   18a54:	fa22 f204 	lsr.w	r2, r2, r4
   18a58:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   18a5c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   18a60:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   18a64:	eba0 0001 	sub.w	r0, r0, r1
   18a68:	4770      	bx	lr
   18a6a:	f014 0f03 	tst.w	r4, #3
   18a6e:	d13c      	bne.n	18aea <strcmp+0x182>
   18a70:	f010 0403 	ands.w	r4, r0, #3
   18a74:	d128      	bne.n	18ac8 <strcmp+0x160>
   18a76:	f850 2b08 	ldr.w	r2, [r0], #8
   18a7a:	f851 3b08 	ldr.w	r3, [r1], #8
   18a7e:	fa82 f54c 	uadd8	r5, r2, ip
   18a82:	ea82 0503 	eor.w	r5, r2, r3
   18a86:	faa5 f58c 	sel	r5, r5, ip
   18a8a:	b95d      	cbnz	r5, 18aa4 <strcmp+0x13c>
   18a8c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   18a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
   18a94:	fa82 f54c 	uadd8	r5, r2, ip
   18a98:	ea82 0503 	eor.w	r5, r2, r3
   18a9c:	faa5 f58c 	sel	r5, r5, ip
   18aa0:	2d00      	cmp	r5, #0
   18aa2:	d0e8      	beq.n	18a76 <strcmp+0x10e>
   18aa4:	ba2d      	rev	r5, r5
   18aa6:	fab5 f485 	clz	r4, r5
   18aaa:	f024 0407 	bic.w	r4, r4, #7
   18aae:	fa23 f104 	lsr.w	r1, r3, r4
   18ab2:	fa22 f204 	lsr.w	r2, r2, r4
   18ab6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   18aba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   18abe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   18ac2:	eba0 0001 	sub.w	r0, r0, r1
   18ac6:	4770      	bx	lr
   18ac8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   18acc:	f020 0003 	bic.w	r0, r0, #3
   18ad0:	f850 2b08 	ldr.w	r2, [r0], #8
   18ad4:	f021 0103 	bic.w	r1, r1, #3
   18ad8:	f851 3b08 	ldr.w	r3, [r1], #8
   18adc:	fa0c f404 	lsl.w	r4, ip, r4
   18ae0:	ea62 0204 	orn	r2, r2, r4
   18ae4:	ea63 0304 	orn	r3, r3, r4
   18ae8:	e7c9      	b.n	18a7e <strcmp+0x116>
   18aea:	f010 0403 	ands.w	r4, r0, #3
   18aee:	d01a      	beq.n	18b26 <strcmp+0x1be>
   18af0:	eba1 0104 	sub.w	r1, r1, r4
   18af4:	f020 0003 	bic.w	r0, r0, #3
   18af8:	07e4      	lsls	r4, r4, #31
   18afa:	f850 2b04 	ldr.w	r2, [r0], #4
   18afe:	d006      	beq.n	18b0e <strcmp+0x1a6>
   18b00:	d20f      	bcs.n	18b22 <strcmp+0x1ba>
   18b02:	788b      	ldrb	r3, [r1, #2]
   18b04:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   18b08:	1ae4      	subs	r4, r4, r3
   18b0a:	d106      	bne.n	18b1a <strcmp+0x1b2>
   18b0c:	b12b      	cbz	r3, 18b1a <strcmp+0x1b2>
   18b0e:	78cb      	ldrb	r3, [r1, #3]
   18b10:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   18b14:	1ae4      	subs	r4, r4, r3
   18b16:	d100      	bne.n	18b1a <strcmp+0x1b2>
   18b18:	b91b      	cbnz	r3, 18b22 <strcmp+0x1ba>
   18b1a:	4620      	mov	r0, r4
   18b1c:	f85d 4b10 	ldr.w	r4, [sp], #16
   18b20:	4770      	bx	lr
   18b22:	f101 0104 	add.w	r1, r1, #4
   18b26:	f850 2b04 	ldr.w	r2, [r0], #4
   18b2a:	07cc      	lsls	r4, r1, #31
   18b2c:	f021 0103 	bic.w	r1, r1, #3
   18b30:	f851 3b04 	ldr.w	r3, [r1], #4
   18b34:	d848      	bhi.n	18bc8 <strcmp+0x260>
   18b36:	d224      	bcs.n	18b82 <strcmp+0x21a>
   18b38:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   18b3c:	fa82 f54c 	uadd8	r5, r2, ip
   18b40:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   18b44:	faa5 f58c 	sel	r5, r5, ip
   18b48:	d10a      	bne.n	18b60 <strcmp+0x1f8>
   18b4a:	b965      	cbnz	r5, 18b66 <strcmp+0x1fe>
   18b4c:	f851 3b04 	ldr.w	r3, [r1], #4
   18b50:	ea84 0402 	eor.w	r4, r4, r2
   18b54:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   18b58:	d10e      	bne.n	18b78 <strcmp+0x210>
   18b5a:	f850 2b04 	ldr.w	r2, [r0], #4
   18b5e:	e7eb      	b.n	18b38 <strcmp+0x1d0>
   18b60:	ea4f 2313 	mov.w	r3, r3, lsr #8
   18b64:	e055      	b.n	18c12 <strcmp+0x2aa>
   18b66:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   18b6a:	d14d      	bne.n	18c08 <strcmp+0x2a0>
   18b6c:	7808      	ldrb	r0, [r1, #0]
   18b6e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   18b72:	f1c0 0000 	rsb	r0, r0, #0
   18b76:	4770      	bx	lr
   18b78:	ea4f 6212 	mov.w	r2, r2, lsr #24
   18b7c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   18b80:	e047      	b.n	18c12 <strcmp+0x2aa>
   18b82:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   18b86:	fa82 f54c 	uadd8	r5, r2, ip
   18b8a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   18b8e:	faa5 f58c 	sel	r5, r5, ip
   18b92:	d10a      	bne.n	18baa <strcmp+0x242>
   18b94:	b965      	cbnz	r5, 18bb0 <strcmp+0x248>
   18b96:	f851 3b04 	ldr.w	r3, [r1], #4
   18b9a:	ea84 0402 	eor.w	r4, r4, r2
   18b9e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   18ba2:	d10c      	bne.n	18bbe <strcmp+0x256>
   18ba4:	f850 2b04 	ldr.w	r2, [r0], #4
   18ba8:	e7eb      	b.n	18b82 <strcmp+0x21a>
   18baa:	ea4f 4313 	mov.w	r3, r3, lsr #16
   18bae:	e030      	b.n	18c12 <strcmp+0x2aa>
   18bb0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   18bb4:	d128      	bne.n	18c08 <strcmp+0x2a0>
   18bb6:	880b      	ldrh	r3, [r1, #0]
   18bb8:	ea4f 4212 	mov.w	r2, r2, lsr #16
   18bbc:	e029      	b.n	18c12 <strcmp+0x2aa>
   18bbe:	ea4f 4212 	mov.w	r2, r2, lsr #16
   18bc2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   18bc6:	e024      	b.n	18c12 <strcmp+0x2aa>
   18bc8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   18bcc:	fa82 f54c 	uadd8	r5, r2, ip
   18bd0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   18bd4:	faa5 f58c 	sel	r5, r5, ip
   18bd8:	d10a      	bne.n	18bf0 <strcmp+0x288>
   18bda:	b965      	cbnz	r5, 18bf6 <strcmp+0x28e>
   18bdc:	f851 3b04 	ldr.w	r3, [r1], #4
   18be0:	ea84 0402 	eor.w	r4, r4, r2
   18be4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   18be8:	d109      	bne.n	18bfe <strcmp+0x296>
   18bea:	f850 2b04 	ldr.w	r2, [r0], #4
   18bee:	e7eb      	b.n	18bc8 <strcmp+0x260>
   18bf0:	ea4f 6313 	mov.w	r3, r3, lsr #24
   18bf4:	e00d      	b.n	18c12 <strcmp+0x2aa>
   18bf6:	f015 0fff 	tst.w	r5, #255	; 0xff
   18bfa:	d105      	bne.n	18c08 <strcmp+0x2a0>
   18bfc:	680b      	ldr	r3, [r1, #0]
   18bfe:	ea4f 2212 	mov.w	r2, r2, lsr #8
   18c02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   18c06:	e004      	b.n	18c12 <strcmp+0x2aa>
   18c08:	f04f 0000 	mov.w	r0, #0
   18c0c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   18c10:	4770      	bx	lr
   18c12:	ba12      	rev	r2, r2
   18c14:	ba1b      	rev	r3, r3
   18c16:	fa82 f44c 	uadd8	r4, r2, ip
   18c1a:	ea82 0403 	eor.w	r4, r2, r3
   18c1e:	faa4 f58c 	sel	r5, r4, ip
   18c22:	fab5 f485 	clz	r4, r5
   18c26:	fa02 f204 	lsl.w	r2, r2, r4
   18c2a:	fa03 f304 	lsl.w	r3, r3, r4
   18c2e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   18c32:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   18c36:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   18c3a:	4770      	bx	lr

00018c3c <_strerror_r>:
   18c3c:	b510      	push	{r4, lr}
   18c3e:	298e      	cmp	r1, #142	; 0x8e
   18c40:	f200 8131 	bhi.w	18ea6 <_strerror_r+0x26a>
   18c44:	e8df f011 	tbh	[pc, r1, lsl #1]
   18c48:	012d008f 	.word	0x012d008f
   18c4c:	0129012b 	.word	0x0129012b
   18c50:	01250127 	.word	0x01250127
   18c54:	01210123 	.word	0x01210123
   18c58:	011d011f 	.word	0x011d011f
   18c5c:	0119011b 	.word	0x0119011b
   18c60:	01150117 	.word	0x01150117
   18c64:	012f0113 	.word	0x012f0113
   18c68:	010f0111 	.word	0x010f0111
   18c6c:	010b010d 	.word	0x010b010d
   18c70:	01070109 	.word	0x01070109
   18c74:	01030105 	.word	0x01030105
   18c78:	00ff0101 	.word	0x00ff0101
   18c7c:	00fb00fd 	.word	0x00fb00fd
   18c80:	00f700f9 	.word	0x00f700f9
   18c84:	00f300f5 	.word	0x00f300f5
   18c88:	00ef00f1 	.word	0x00ef00f1
   18c8c:	00eb00ed 	.word	0x00eb00ed
   18c90:	012f00e9 	.word	0x012f00e9
   18c94:	012f012f 	.word	0x012f012f
   18c98:	012f012f 	.word	0x012f012f
   18c9c:	012f012f 	.word	0x012f012f
   18ca0:	00e7012f 	.word	0x00e7012f
   18ca4:	012f00e5 	.word	0x012f00e5
   18ca8:	012f012f 	.word	0x012f012f
   18cac:	012f012f 	.word	0x012f012f
   18cb0:	012f012f 	.word	0x012f012f
   18cb4:	012f012f 	.word	0x012f012f
   18cb8:	012f012f 	.word	0x012f012f
   18cbc:	012f012f 	.word	0x012f012f
   18cc0:	00e100e3 	.word	0x00e100e3
   18cc4:	00dd00df 	.word	0x00dd00df
   18cc8:	012f012f 	.word	0x012f012f
   18ccc:	00db012f 	.word	0x00db012f
   18cd0:	012f012f 	.word	0x012f012f
   18cd4:	00d9012f 	.word	0x00d9012f
   18cd8:	012f012f 	.word	0x012f012f
   18cdc:	012f00d7 	.word	0x012f00d7
   18ce0:	00d5012f 	.word	0x00d5012f
   18ce4:	012f012f 	.word	0x012f012f
   18ce8:	012f012f 	.word	0x012f012f
   18cec:	012f012f 	.word	0x012f012f
   18cf0:	012f012f 	.word	0x012f012f
   18cf4:	012f012f 	.word	0x012f012f
   18cf8:	012f00d3 	.word	0x012f00d3
   18cfc:	00cf00d1 	.word	0x00cf00d1
   18d00:	012f00cd 	.word	0x012f00cd
   18d04:	00cb012f 	.word	0x00cb012f
   18d08:	012f012f 	.word	0x012f012f
   18d0c:	012f012f 	.word	0x012f012f
   18d10:	012f012f 	.word	0x012f012f
   18d14:	012f012f 	.word	0x012f012f
   18d18:	00c700c9 	.word	0x00c700c9
   18d1c:	00c300c5 	.word	0x00c300c5
   18d20:	00bf00c1 	.word	0x00bf00c1
   18d24:	00bd012f 	.word	0x00bd012f
   18d28:	00b900bb 	.word	0x00b900bb
   18d2c:	00b500b7 	.word	0x00b500b7
   18d30:	00b100b3 	.word	0x00b100b3
   18d34:	00ad00af 	.word	0x00ad00af
   18d38:	00a900ab 	.word	0x00a900ab
   18d3c:	00a500a7 	.word	0x00a500a7
   18d40:	00a3012f 	.word	0x00a3012f
   18d44:	009f00a1 	.word	0x009f00a1
   18d48:	012f009d 	.word	0x012f009d
   18d4c:	012f012f 	.word	0x012f012f
   18d50:	012f012f 	.word	0x012f012f
   18d54:	012f009b 	.word	0x012f009b
   18d58:	012f012f 	.word	0x012f012f
   18d5c:	00970099 	.word	0x00970099
   18d60:	00930095 	.word	0x00930095
   18d64:	0091      	.short	0x0091
   18d66:	4857      	ldr	r0, [pc, #348]	; (18ec4 <_strerror_r+0x288>)
   18d68:	bd10      	pop	{r4, pc}
   18d6a:	4857      	ldr	r0, [pc, #348]	; (18ec8 <_strerror_r+0x28c>)
   18d6c:	bd10      	pop	{r4, pc}
   18d6e:	4857      	ldr	r0, [pc, #348]	; (18ecc <_strerror_r+0x290>)
   18d70:	bd10      	pop	{r4, pc}
   18d72:	4857      	ldr	r0, [pc, #348]	; (18ed0 <_strerror_r+0x294>)
   18d74:	bd10      	pop	{r4, pc}
   18d76:	4857      	ldr	r0, [pc, #348]	; (18ed4 <_strerror_r+0x298>)
   18d78:	bd10      	pop	{r4, pc}
   18d7a:	4857      	ldr	r0, [pc, #348]	; (18ed8 <_strerror_r+0x29c>)
   18d7c:	bd10      	pop	{r4, pc}
   18d7e:	4857      	ldr	r0, [pc, #348]	; (18edc <_strerror_r+0x2a0>)
   18d80:	bd10      	pop	{r4, pc}
   18d82:	4857      	ldr	r0, [pc, #348]	; (18ee0 <_strerror_r+0x2a4>)
   18d84:	bd10      	pop	{r4, pc}
   18d86:	4857      	ldr	r0, [pc, #348]	; (18ee4 <_strerror_r+0x2a8>)
   18d88:	bd10      	pop	{r4, pc}
   18d8a:	4857      	ldr	r0, [pc, #348]	; (18ee8 <_strerror_r+0x2ac>)
   18d8c:	bd10      	pop	{r4, pc}
   18d8e:	4857      	ldr	r0, [pc, #348]	; (18eec <_strerror_r+0x2b0>)
   18d90:	bd10      	pop	{r4, pc}
   18d92:	4857      	ldr	r0, [pc, #348]	; (18ef0 <_strerror_r+0x2b4>)
   18d94:	bd10      	pop	{r4, pc}
   18d96:	4857      	ldr	r0, [pc, #348]	; (18ef4 <_strerror_r+0x2b8>)
   18d98:	bd10      	pop	{r4, pc}
   18d9a:	4857      	ldr	r0, [pc, #348]	; (18ef8 <_strerror_r+0x2bc>)
   18d9c:	bd10      	pop	{r4, pc}
   18d9e:	4857      	ldr	r0, [pc, #348]	; (18efc <_strerror_r+0x2c0>)
   18da0:	bd10      	pop	{r4, pc}
   18da2:	4857      	ldr	r0, [pc, #348]	; (18f00 <_strerror_r+0x2c4>)
   18da4:	bd10      	pop	{r4, pc}
   18da6:	4857      	ldr	r0, [pc, #348]	; (18f04 <_strerror_r+0x2c8>)
   18da8:	bd10      	pop	{r4, pc}
   18daa:	4857      	ldr	r0, [pc, #348]	; (18f08 <_strerror_r+0x2cc>)
   18dac:	bd10      	pop	{r4, pc}
   18dae:	4857      	ldr	r0, [pc, #348]	; (18f0c <_strerror_r+0x2d0>)
   18db0:	bd10      	pop	{r4, pc}
   18db2:	4857      	ldr	r0, [pc, #348]	; (18f10 <_strerror_r+0x2d4>)
   18db4:	bd10      	pop	{r4, pc}
   18db6:	4857      	ldr	r0, [pc, #348]	; (18f14 <_strerror_r+0x2d8>)
   18db8:	bd10      	pop	{r4, pc}
   18dba:	4857      	ldr	r0, [pc, #348]	; (18f18 <_strerror_r+0x2dc>)
   18dbc:	bd10      	pop	{r4, pc}
   18dbe:	4857      	ldr	r0, [pc, #348]	; (18f1c <_strerror_r+0x2e0>)
   18dc0:	bd10      	pop	{r4, pc}
   18dc2:	4857      	ldr	r0, [pc, #348]	; (18f20 <_strerror_r+0x2e4>)
   18dc4:	bd10      	pop	{r4, pc}
   18dc6:	4857      	ldr	r0, [pc, #348]	; (18f24 <_strerror_r+0x2e8>)
   18dc8:	bd10      	pop	{r4, pc}
   18dca:	4857      	ldr	r0, [pc, #348]	; (18f28 <_strerror_r+0x2ec>)
   18dcc:	bd10      	pop	{r4, pc}
   18dce:	4857      	ldr	r0, [pc, #348]	; (18f2c <_strerror_r+0x2f0>)
   18dd0:	bd10      	pop	{r4, pc}
   18dd2:	4857      	ldr	r0, [pc, #348]	; (18f30 <_strerror_r+0x2f4>)
   18dd4:	bd10      	pop	{r4, pc}
   18dd6:	4857      	ldr	r0, [pc, #348]	; (18f34 <_strerror_r+0x2f8>)
   18dd8:	bd10      	pop	{r4, pc}
   18dda:	4857      	ldr	r0, [pc, #348]	; (18f38 <_strerror_r+0x2fc>)
   18ddc:	bd10      	pop	{r4, pc}
   18dde:	4857      	ldr	r0, [pc, #348]	; (18f3c <_strerror_r+0x300>)
   18de0:	bd10      	pop	{r4, pc}
   18de2:	4857      	ldr	r0, [pc, #348]	; (18f40 <_strerror_r+0x304>)
   18de4:	bd10      	pop	{r4, pc}
   18de6:	4857      	ldr	r0, [pc, #348]	; (18f44 <_strerror_r+0x308>)
   18de8:	bd10      	pop	{r4, pc}
   18dea:	4857      	ldr	r0, [pc, #348]	; (18f48 <_strerror_r+0x30c>)
   18dec:	bd10      	pop	{r4, pc}
   18dee:	4857      	ldr	r0, [pc, #348]	; (18f4c <_strerror_r+0x310>)
   18df0:	bd10      	pop	{r4, pc}
   18df2:	4857      	ldr	r0, [pc, #348]	; (18f50 <_strerror_r+0x314>)
   18df4:	bd10      	pop	{r4, pc}
   18df6:	4857      	ldr	r0, [pc, #348]	; (18f54 <_strerror_r+0x318>)
   18df8:	bd10      	pop	{r4, pc}
   18dfa:	4857      	ldr	r0, [pc, #348]	; (18f58 <_strerror_r+0x31c>)
   18dfc:	bd10      	pop	{r4, pc}
   18dfe:	4857      	ldr	r0, [pc, #348]	; (18f5c <_strerror_r+0x320>)
   18e00:	bd10      	pop	{r4, pc}
   18e02:	4857      	ldr	r0, [pc, #348]	; (18f60 <_strerror_r+0x324>)
   18e04:	bd10      	pop	{r4, pc}
   18e06:	4857      	ldr	r0, [pc, #348]	; (18f64 <_strerror_r+0x328>)
   18e08:	bd10      	pop	{r4, pc}
   18e0a:	4857      	ldr	r0, [pc, #348]	; (18f68 <_strerror_r+0x32c>)
   18e0c:	bd10      	pop	{r4, pc}
   18e0e:	4857      	ldr	r0, [pc, #348]	; (18f6c <_strerror_r+0x330>)
   18e10:	bd10      	pop	{r4, pc}
   18e12:	4857      	ldr	r0, [pc, #348]	; (18f70 <_strerror_r+0x334>)
   18e14:	bd10      	pop	{r4, pc}
   18e16:	4857      	ldr	r0, [pc, #348]	; (18f74 <_strerror_r+0x338>)
   18e18:	bd10      	pop	{r4, pc}
   18e1a:	4857      	ldr	r0, [pc, #348]	; (18f78 <_strerror_r+0x33c>)
   18e1c:	bd10      	pop	{r4, pc}
   18e1e:	4857      	ldr	r0, [pc, #348]	; (18f7c <_strerror_r+0x340>)
   18e20:	bd10      	pop	{r4, pc}
   18e22:	4857      	ldr	r0, [pc, #348]	; (18f80 <_strerror_r+0x344>)
   18e24:	bd10      	pop	{r4, pc}
   18e26:	4857      	ldr	r0, [pc, #348]	; (18f84 <_strerror_r+0x348>)
   18e28:	bd10      	pop	{r4, pc}
   18e2a:	4857      	ldr	r0, [pc, #348]	; (18f88 <_strerror_r+0x34c>)
   18e2c:	bd10      	pop	{r4, pc}
   18e2e:	4857      	ldr	r0, [pc, #348]	; (18f8c <_strerror_r+0x350>)
   18e30:	bd10      	pop	{r4, pc}
   18e32:	4857      	ldr	r0, [pc, #348]	; (18f90 <_strerror_r+0x354>)
   18e34:	bd10      	pop	{r4, pc}
   18e36:	4857      	ldr	r0, [pc, #348]	; (18f94 <_strerror_r+0x358>)
   18e38:	bd10      	pop	{r4, pc}
   18e3a:	4857      	ldr	r0, [pc, #348]	; (18f98 <_strerror_r+0x35c>)
   18e3c:	bd10      	pop	{r4, pc}
   18e3e:	4857      	ldr	r0, [pc, #348]	; (18f9c <_strerror_r+0x360>)
   18e40:	bd10      	pop	{r4, pc}
   18e42:	4857      	ldr	r0, [pc, #348]	; (18fa0 <_strerror_r+0x364>)
   18e44:	bd10      	pop	{r4, pc}
   18e46:	4857      	ldr	r0, [pc, #348]	; (18fa4 <_strerror_r+0x368>)
   18e48:	bd10      	pop	{r4, pc}
   18e4a:	4857      	ldr	r0, [pc, #348]	; (18fa8 <_strerror_r+0x36c>)
   18e4c:	bd10      	pop	{r4, pc}
   18e4e:	4857      	ldr	r0, [pc, #348]	; (18fac <_strerror_r+0x370>)
   18e50:	bd10      	pop	{r4, pc}
   18e52:	4857      	ldr	r0, [pc, #348]	; (18fb0 <_strerror_r+0x374>)
   18e54:	bd10      	pop	{r4, pc}
   18e56:	4857      	ldr	r0, [pc, #348]	; (18fb4 <_strerror_r+0x378>)
   18e58:	bd10      	pop	{r4, pc}
   18e5a:	4857      	ldr	r0, [pc, #348]	; (18fb8 <_strerror_r+0x37c>)
   18e5c:	bd10      	pop	{r4, pc}
   18e5e:	4857      	ldr	r0, [pc, #348]	; (18fbc <_strerror_r+0x380>)
   18e60:	bd10      	pop	{r4, pc}
   18e62:	4857      	ldr	r0, [pc, #348]	; (18fc0 <_strerror_r+0x384>)
   18e64:	bd10      	pop	{r4, pc}
   18e66:	4857      	ldr	r0, [pc, #348]	; (18fc4 <_strerror_r+0x388>)
   18e68:	bd10      	pop	{r4, pc}
   18e6a:	4857      	ldr	r0, [pc, #348]	; (18fc8 <_strerror_r+0x38c>)
   18e6c:	bd10      	pop	{r4, pc}
   18e6e:	4857      	ldr	r0, [pc, #348]	; (18fcc <_strerror_r+0x390>)
   18e70:	bd10      	pop	{r4, pc}
   18e72:	4857      	ldr	r0, [pc, #348]	; (18fd0 <_strerror_r+0x394>)
   18e74:	bd10      	pop	{r4, pc}
   18e76:	4857      	ldr	r0, [pc, #348]	; (18fd4 <_strerror_r+0x398>)
   18e78:	bd10      	pop	{r4, pc}
   18e7a:	4857      	ldr	r0, [pc, #348]	; (18fd8 <_strerror_r+0x39c>)
   18e7c:	bd10      	pop	{r4, pc}
   18e7e:	4857      	ldr	r0, [pc, #348]	; (18fdc <_strerror_r+0x3a0>)
   18e80:	bd10      	pop	{r4, pc}
   18e82:	4857      	ldr	r0, [pc, #348]	; (18fe0 <_strerror_r+0x3a4>)
   18e84:	bd10      	pop	{r4, pc}
   18e86:	4857      	ldr	r0, [pc, #348]	; (18fe4 <_strerror_r+0x3a8>)
   18e88:	bd10      	pop	{r4, pc}
   18e8a:	4857      	ldr	r0, [pc, #348]	; (18fe8 <_strerror_r+0x3ac>)
   18e8c:	bd10      	pop	{r4, pc}
   18e8e:	4857      	ldr	r0, [pc, #348]	; (18fec <_strerror_r+0x3b0>)
   18e90:	bd10      	pop	{r4, pc}
   18e92:	4857      	ldr	r0, [pc, #348]	; (18ff0 <_strerror_r+0x3b4>)
   18e94:	bd10      	pop	{r4, pc}
   18e96:	4857      	ldr	r0, [pc, #348]	; (18ff4 <_strerror_r+0x3b8>)
   18e98:	bd10      	pop	{r4, pc}
   18e9a:	4857      	ldr	r0, [pc, #348]	; (18ff8 <_strerror_r+0x3bc>)
   18e9c:	bd10      	pop	{r4, pc}
   18e9e:	4857      	ldr	r0, [pc, #348]	; (18ffc <_strerror_r+0x3c0>)
   18ea0:	bd10      	pop	{r4, pc}
   18ea2:	4857      	ldr	r0, [pc, #348]	; (19000 <_strerror_r+0x3c4>)
   18ea4:	bd10      	pop	{r4, pc}
   18ea6:	4614      	mov	r4, r2
   18ea8:	4602      	mov	r2, r0
   18eaa:	2b00      	cmp	r3, #0
   18eac:	bf18      	it	ne
   18eae:	461a      	movne	r2, r3
   18eb0:	4608      	mov	r0, r1
   18eb2:	4621      	mov	r1, r4
   18eb4:	f001 fbb2 	bl	1a61c <_user_strerror>
   18eb8:	4b52      	ldr	r3, [pc, #328]	; (19004 <_strerror_r+0x3c8>)
   18eba:	2800      	cmp	r0, #0
   18ebc:	bf08      	it	eq
   18ebe:	4618      	moveq	r0, r3
   18ec0:	bd10      	pop	{r4, pc}
   18ec2:	bf00      	nop
   18ec4:	0003e470 	.word	0x0003e470
   18ec8:	0003eae4 	.word	0x0003eae4
   18ecc:	0003eacc 	.word	0x0003eacc
   18ed0:	0003eab8 	.word	0x0003eab8
   18ed4:	0003eb1c 	.word	0x0003eb1c
   18ed8:	0003e814 	.word	0x0003e814
   18edc:	0003e74c 	.word	0x0003e74c
   18ee0:	0003ea84 	.word	0x0003ea84
   18ee4:	0003ea9c 	.word	0x0003ea9c
   18ee8:	0003e688 	.word	0x0003e688
   18eec:	0003ea48 	.word	0x0003ea48
   18ef0:	0003e8bc 	.word	0x0003e8bc
   18ef4:	0003eb44 	.word	0x0003eb44
   18ef8:	0003e550 	.word	0x0003e550
   18efc:	0003e518 	.word	0x0003e518
   18f00:	0003e620 	.word	0x0003e620
   18f04:	0003e720 	.word	0x0003e720
   18f08:	0003e610 	.word	0x0003e610
   18f0c:	0003eb58 	.word	0x0003eb58
   18f10:	0003e664 	.word	0x0003e664
   18f14:	0003e838 	.word	0x0003e838
   18f18:	0003ea60 	.word	0x0003ea60
   18f1c:	0003ea30 	.word	0x0003ea30
   18f20:	0003ea00 	.word	0x0003ea00
   18f24:	0003e9e8 	.word	0x0003e9e8
   18f28:	0003e9c8 	.word	0x0003e9c8
   18f2c:	0003e9a8 	.word	0x0003e9a8
   18f30:	0003e978 	.word	0x0003e978
   18f34:	0003e954 	.word	0x0003e954
   18f38:	0003ea14 	.word	0x0003ea14
   18f3c:	0003eaf8 	.word	0x0003eaf8
   18f40:	0003e93c 	.word	0x0003e93c
   18f44:	0003e920 	.word	0x0003e920
   18f48:	0003e90c 	.word	0x0003e90c
   18f4c:	0003e8f0 	.word	0x0003e8f0
   18f50:	0003e8e4 	.word	0x0003e8e4
   18f54:	0003e8d0 	.word	0x0003e8d0
   18f58:	0003e8ac 	.word	0x0003e8ac
   18f5c:	0003e894 	.word	0x0003e894
   18f60:	0003e880 	.word	0x0003e880
   18f64:	0003e868 	.word	0x0003e868
   18f68:	0003e970 	.word	0x0003e970
   18f6c:	0003e858 	.word	0x0003e858
   18f70:	0003e850 	.word	0x0003e850
   18f74:	0003e82c 	.word	0x0003e82c
   18f78:	0003e800 	.word	0x0003e800
   18f7c:	0003e7e4 	.word	0x0003e7e4
   18f80:	0003e7d0 	.word	0x0003e7d0
   18f84:	0003e7a0 	.word	0x0003e7a0
   18f88:	0003e794 	.word	0x0003e794
   18f8c:	0003e784 	.word	0x0003e784
   18f90:	0003e76c 	.word	0x0003e76c
   18f94:	0003e75c 	.word	0x0003e75c
   18f98:	0003e734 	.word	0x0003e734
   18f9c:	0003e710 	.word	0x0003e710
   18fa0:	0003e700 	.word	0x0003e700
   18fa4:	0003e6e8 	.word	0x0003e6e8
   18fa8:	0003e6c8 	.word	0x0003e6c8
   18fac:	0003e6a8 	.word	0x0003e6a8
   18fb0:	0003e650 	.word	0x0003e650
   18fb4:	0003e640 	.word	0x0003e640
   18fb8:	0003e600 	.word	0x0003e600
   18fbc:	0003e5f0 	.word	0x0003e5f0
   18fc0:	0003e5dc 	.word	0x0003e5dc
   18fc4:	0003e5d0 	.word	0x0003e5d0
   18fc8:	0003e5b8 	.word	0x0003e5b8
   18fcc:	0003e5ac 	.word	0x0003e5ac
   18fd0:	0003e598 	.word	0x0003e598
   18fd4:	0003e584 	.word	0x0003e584
   18fd8:	0003e570 	.word	0x0003e570
   18fdc:	0003e544 	.word	0x0003e544
   18fe0:	0003e534 	.word	0x0003e534
   18fe4:	0003e504 	.word	0x0003e504
   18fe8:	0003e4f0 	.word	0x0003e4f0
   18fec:	0003e4d4 	.word	0x0003e4d4
   18ff0:	0003e4c8 	.word	0x0003e4c8
   18ff4:	0003e4b0 	.word	0x0003e4b0
   18ff8:	0003e4a0 	.word	0x0003e4a0
   18ffc:	0003e484 	.word	0x0003e484
   19000:	0003e478 	.word	0x0003e478
   19004:	0003b064 	.word	0x0003b064

00019008 <strerror>:
   19008:	b410      	push	{r4}
   1900a:	4c04      	ldr	r4, [pc, #16]	; (1901c <strerror+0x14>)
   1900c:	2300      	movs	r3, #0
   1900e:	4601      	mov	r1, r0
   19010:	461a      	mov	r2, r3
   19012:	6820      	ldr	r0, [r4, #0]
   19014:	bc10      	pop	{r4}
   19016:	f7ff be11 	b.w	18c3c <_strerror_r>
   1901a:	bf00      	nop
   1901c:	20000020 	.word	0x20000020
	...

00019040 <strlen>:
   19040:	f890 f000 	pld	[r0]
   19044:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   19048:	f020 0107 	bic.w	r1, r0, #7
   1904c:	f06f 0c00 	mvn.w	ip, #0
   19050:	f010 0407 	ands.w	r4, r0, #7
   19054:	f891 f020 	pld	[r1, #32]
   19058:	f040 8049 	bne.w	190ee <strlen+0xae>
   1905c:	f04f 0400 	mov.w	r4, #0
   19060:	f06f 0007 	mvn.w	r0, #7
   19064:	e9d1 2300 	ldrd	r2, r3, [r1]
   19068:	f891 f040 	pld	[r1, #64]	; 0x40
   1906c:	f100 0008 	add.w	r0, r0, #8
   19070:	fa82 f24c 	uadd8	r2, r2, ip
   19074:	faa4 f28c 	sel	r2, r4, ip
   19078:	fa83 f34c 	uadd8	r3, r3, ip
   1907c:	faa2 f38c 	sel	r3, r2, ip
   19080:	bb4b      	cbnz	r3, 190d6 <strlen+0x96>
   19082:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   19086:	fa82 f24c 	uadd8	r2, r2, ip
   1908a:	f100 0008 	add.w	r0, r0, #8
   1908e:	faa4 f28c 	sel	r2, r4, ip
   19092:	fa83 f34c 	uadd8	r3, r3, ip
   19096:	faa2 f38c 	sel	r3, r2, ip
   1909a:	b9e3      	cbnz	r3, 190d6 <strlen+0x96>
   1909c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   190a0:	fa82 f24c 	uadd8	r2, r2, ip
   190a4:	f100 0008 	add.w	r0, r0, #8
   190a8:	faa4 f28c 	sel	r2, r4, ip
   190ac:	fa83 f34c 	uadd8	r3, r3, ip
   190b0:	faa2 f38c 	sel	r3, r2, ip
   190b4:	b97b      	cbnz	r3, 190d6 <strlen+0x96>
   190b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   190ba:	f101 0120 	add.w	r1, r1, #32
   190be:	fa82 f24c 	uadd8	r2, r2, ip
   190c2:	f100 0008 	add.w	r0, r0, #8
   190c6:	faa4 f28c 	sel	r2, r4, ip
   190ca:	fa83 f34c 	uadd8	r3, r3, ip
   190ce:	faa2 f38c 	sel	r3, r2, ip
   190d2:	2b00      	cmp	r3, #0
   190d4:	d0c6      	beq.n	19064 <strlen+0x24>
   190d6:	2a00      	cmp	r2, #0
   190d8:	bf04      	itt	eq
   190da:	3004      	addeq	r0, #4
   190dc:	461a      	moveq	r2, r3
   190de:	ba12      	rev	r2, r2
   190e0:	fab2 f282 	clz	r2, r2
   190e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   190e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   190ec:	4770      	bx	lr
   190ee:	e9d1 2300 	ldrd	r2, r3, [r1]
   190f2:	f004 0503 	and.w	r5, r4, #3
   190f6:	f1c4 0000 	rsb	r0, r4, #0
   190fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   190fe:	f014 0f04 	tst.w	r4, #4
   19102:	f891 f040 	pld	[r1, #64]	; 0x40
   19106:	fa0c f505 	lsl.w	r5, ip, r5
   1910a:	ea62 0205 	orn	r2, r2, r5
   1910e:	bf1c      	itt	ne
   19110:	ea63 0305 	ornne	r3, r3, r5
   19114:	4662      	movne	r2, ip
   19116:	f04f 0400 	mov.w	r4, #0
   1911a:	e7a9      	b.n	19070 <strlen+0x30>

0001911c <strncmp>:
   1911c:	2a00      	cmp	r2, #0
   1911e:	d041      	beq.n	191a4 <strncmp+0x88>
   19120:	ea40 0301 	orr.w	r3, r0, r1
   19124:	f013 0303 	ands.w	r3, r3, #3
   19128:	b4f0      	push	{r4, r5, r6, r7}
   1912a:	d125      	bne.n	19178 <strncmp+0x5c>
   1912c:	2a03      	cmp	r2, #3
   1912e:	d923      	bls.n	19178 <strncmp+0x5c>
   19130:	6804      	ldr	r4, [r0, #0]
   19132:	680d      	ldr	r5, [r1, #0]
   19134:	42ac      	cmp	r4, r5
   19136:	d11f      	bne.n	19178 <strncmp+0x5c>
   19138:	3a04      	subs	r2, #4
   1913a:	d038      	beq.n	191ae <strncmp+0x92>
   1913c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   19140:	ea25 0404 	bic.w	r4, r5, r4
   19144:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   19148:	d12e      	bne.n	191a8 <strncmp+0x8c>
   1914a:	3004      	adds	r0, #4
   1914c:	3104      	adds	r1, #4
   1914e:	e00f      	b.n	19170 <strncmp+0x54>
   19150:	f850 3b04 	ldr.w	r3, [r0], #4
   19154:	680e      	ldr	r6, [r1, #0]
   19156:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   1915a:	42b3      	cmp	r3, r6
   1915c:	ea24 0403 	bic.w	r4, r4, r3
   19160:	f101 0104 	add.w	r1, r1, #4
   19164:	d126      	bne.n	191b4 <strncmp+0x98>
   19166:	3a04      	subs	r2, #4
   19168:	d021      	beq.n	191ae <strncmp+0x92>
   1916a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1916e:	d11b      	bne.n	191a8 <strncmp+0x8c>
   19170:	2a03      	cmp	r2, #3
   19172:	4607      	mov	r7, r0
   19174:	460d      	mov	r5, r1
   19176:	d8eb      	bhi.n	19150 <strncmp+0x34>
   19178:	7805      	ldrb	r5, [r0, #0]
   1917a:	780c      	ldrb	r4, [r1, #0]
   1917c:	42ac      	cmp	r4, r5
   1917e:	f102 33ff 	add.w	r3, r2, #4294967295
   19182:	d11a      	bne.n	191ba <strncmp+0x9e>
   19184:	b183      	cbz	r3, 191a8 <strncmp+0x8c>
   19186:	b914      	cbnz	r4, 1918e <strncmp+0x72>
   19188:	e00e      	b.n	191a8 <strncmp+0x8c>
   1918a:	b16b      	cbz	r3, 191a8 <strncmp+0x8c>
   1918c:	b17a      	cbz	r2, 191ae <strncmp+0x92>
   1918e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   19192:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   19196:	42a2      	cmp	r2, r4
   19198:	f103 33ff 	add.w	r3, r3, #4294967295
   1919c:	d0f5      	beq.n	1918a <strncmp+0x6e>
   1919e:	1b10      	subs	r0, r2, r4
   191a0:	bcf0      	pop	{r4, r5, r6, r7}
   191a2:	4770      	bx	lr
   191a4:	4610      	mov	r0, r2
   191a6:	4770      	bx	lr
   191a8:	2000      	movs	r0, #0
   191aa:	bcf0      	pop	{r4, r5, r6, r7}
   191ac:	4770      	bx	lr
   191ae:	4610      	mov	r0, r2
   191b0:	bcf0      	pop	{r4, r5, r6, r7}
   191b2:	4770      	bx	lr
   191b4:	4629      	mov	r1, r5
   191b6:	4638      	mov	r0, r7
   191b8:	e7de      	b.n	19178 <strncmp+0x5c>
   191ba:	462a      	mov	r2, r5
   191bc:	e7ef      	b.n	1919e <strncmp+0x82>
   191be:	bf00      	nop

000191c0 <_svfprintf_r>:
   191c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191c4:	b0c3      	sub	sp, #268	; 0x10c
   191c6:	460c      	mov	r4, r1
   191c8:	910b      	str	r1, [sp, #44]	; 0x2c
   191ca:	4692      	mov	sl, r2
   191cc:	930f      	str	r3, [sp, #60]	; 0x3c
   191ce:	900c      	str	r0, [sp, #48]	; 0x30
   191d0:	f005 f874 	bl	1e2bc <_localeconv_r>
   191d4:	6803      	ldr	r3, [r0, #0]
   191d6:	931a      	str	r3, [sp, #104]	; 0x68
   191d8:	4618      	mov	r0, r3
   191da:	f7ff ff31 	bl	19040 <strlen>
   191de:	89a3      	ldrh	r3, [r4, #12]
   191e0:	9019      	str	r0, [sp, #100]	; 0x64
   191e2:	0619      	lsls	r1, r3, #24
   191e4:	d503      	bpl.n	191ee <_svfprintf_r+0x2e>
   191e6:	6923      	ldr	r3, [r4, #16]
   191e8:	2b00      	cmp	r3, #0
   191ea:	f001 8003 	beq.w	1a1f4 <_svfprintf_r+0x1034>
   191ee:	2300      	movs	r3, #0
   191f0:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   191f4:	9313      	str	r3, [sp, #76]	; 0x4c
   191f6:	9315      	str	r3, [sp, #84]	; 0x54
   191f8:	9314      	str	r3, [sp, #80]	; 0x50
   191fa:	9327      	str	r3, [sp, #156]	; 0x9c
   191fc:	9326      	str	r3, [sp, #152]	; 0x98
   191fe:	9318      	str	r3, [sp, #96]	; 0x60
   19200:	931b      	str	r3, [sp, #108]	; 0x6c
   19202:	9309      	str	r3, [sp, #36]	; 0x24
   19204:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   19208:	46c8      	mov	r8, r9
   1920a:	9316      	str	r3, [sp, #88]	; 0x58
   1920c:	9317      	str	r3, [sp, #92]	; 0x5c
   1920e:	f89a 3000 	ldrb.w	r3, [sl]
   19212:	4654      	mov	r4, sl
   19214:	b1e3      	cbz	r3, 19250 <_svfprintf_r+0x90>
   19216:	2b25      	cmp	r3, #37	; 0x25
   19218:	d102      	bne.n	19220 <_svfprintf_r+0x60>
   1921a:	e019      	b.n	19250 <_svfprintf_r+0x90>
   1921c:	2b25      	cmp	r3, #37	; 0x25
   1921e:	d003      	beq.n	19228 <_svfprintf_r+0x68>
   19220:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   19224:	2b00      	cmp	r3, #0
   19226:	d1f9      	bne.n	1921c <_svfprintf_r+0x5c>
   19228:	eba4 050a 	sub.w	r5, r4, sl
   1922c:	b185      	cbz	r5, 19250 <_svfprintf_r+0x90>
   1922e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19230:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   19232:	f8c8 a000 	str.w	sl, [r8]
   19236:	3301      	adds	r3, #1
   19238:	442a      	add	r2, r5
   1923a:	2b07      	cmp	r3, #7
   1923c:	f8c8 5004 	str.w	r5, [r8, #4]
   19240:	9227      	str	r2, [sp, #156]	; 0x9c
   19242:	9326      	str	r3, [sp, #152]	; 0x98
   19244:	dc7f      	bgt.n	19346 <_svfprintf_r+0x186>
   19246:	f108 0808 	add.w	r8, r8, #8
   1924a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1924c:	442b      	add	r3, r5
   1924e:	9309      	str	r3, [sp, #36]	; 0x24
   19250:	7823      	ldrb	r3, [r4, #0]
   19252:	2b00      	cmp	r3, #0
   19254:	d07f      	beq.n	19356 <_svfprintf_r+0x196>
   19256:	2300      	movs	r3, #0
   19258:	461a      	mov	r2, r3
   1925a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   1925e:	4619      	mov	r1, r3
   19260:	930d      	str	r3, [sp, #52]	; 0x34
   19262:	469b      	mov	fp, r3
   19264:	f04f 30ff 	mov.w	r0, #4294967295
   19268:	7863      	ldrb	r3, [r4, #1]
   1926a:	900a      	str	r0, [sp, #40]	; 0x28
   1926c:	f104 0a01 	add.w	sl, r4, #1
   19270:	f10a 0a01 	add.w	sl, sl, #1
   19274:	f1a3 0020 	sub.w	r0, r3, #32
   19278:	2858      	cmp	r0, #88	; 0x58
   1927a:	f200 83c1 	bhi.w	19a00 <_svfprintf_r+0x840>
   1927e:	e8df f010 	tbh	[pc, r0, lsl #1]
   19282:	0238      	.short	0x0238
   19284:	03bf03bf 	.word	0x03bf03bf
   19288:	03bf0240 	.word	0x03bf0240
   1928c:	03bf03bf 	.word	0x03bf03bf
   19290:	03bf03bf 	.word	0x03bf03bf
   19294:	024503bf 	.word	0x024503bf
   19298:	03bf0203 	.word	0x03bf0203
   1929c:	026b005d 	.word	0x026b005d
   192a0:	028603bf 	.word	0x028603bf
   192a4:	039d039d 	.word	0x039d039d
   192a8:	039d039d 	.word	0x039d039d
   192ac:	039d039d 	.word	0x039d039d
   192b0:	039d039d 	.word	0x039d039d
   192b4:	03bf039d 	.word	0x03bf039d
   192b8:	03bf03bf 	.word	0x03bf03bf
   192bc:	03bf03bf 	.word	0x03bf03bf
   192c0:	03bf03bf 	.word	0x03bf03bf
   192c4:	03bf03bf 	.word	0x03bf03bf
   192c8:	033703bf 	.word	0x033703bf
   192cc:	03bf0357 	.word	0x03bf0357
   192d0:	03bf0357 	.word	0x03bf0357
   192d4:	03bf03bf 	.word	0x03bf03bf
   192d8:	039803bf 	.word	0x039803bf
   192dc:	03bf03bf 	.word	0x03bf03bf
   192e0:	03bf03ad 	.word	0x03bf03ad
   192e4:	03bf03bf 	.word	0x03bf03bf
   192e8:	03bf03bf 	.word	0x03bf03bf
   192ec:	03bf0259 	.word	0x03bf0259
   192f0:	031e03bf 	.word	0x031e03bf
   192f4:	03bf03bf 	.word	0x03bf03bf
   192f8:	03bf03bf 	.word	0x03bf03bf
   192fc:	03bf03bf 	.word	0x03bf03bf
   19300:	03bf03bf 	.word	0x03bf03bf
   19304:	03bf03bf 	.word	0x03bf03bf
   19308:	02db02c6 	.word	0x02db02c6
   1930c:	03570357 	.word	0x03570357
   19310:	028b0357 	.word	0x028b0357
   19314:	03bf02db 	.word	0x03bf02db
   19318:	029003bf 	.word	0x029003bf
   1931c:	029d03bf 	.word	0x029d03bf
   19320:	02b401cc 	.word	0x02b401cc
   19324:	03bf0208 	.word	0x03bf0208
   19328:	03bf01e1 	.word	0x03bf01e1
   1932c:	03bf007e 	.word	0x03bf007e
   19330:	020d03bf 	.word	0x020d03bf
   19334:	980d      	ldr	r0, [sp, #52]	; 0x34
   19336:	930f      	str	r3, [sp, #60]	; 0x3c
   19338:	4240      	negs	r0, r0
   1933a:	900d      	str	r0, [sp, #52]	; 0x34
   1933c:	f04b 0b04 	orr.w	fp, fp, #4
   19340:	f89a 3000 	ldrb.w	r3, [sl]
   19344:	e794      	b.n	19270 <_svfprintf_r+0xb0>
   19346:	aa25      	add	r2, sp, #148	; 0x94
   19348:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1934a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1934c:	f005 faea 	bl	1e924 <__ssprint_r>
   19350:	b940      	cbnz	r0, 19364 <_svfprintf_r+0x1a4>
   19352:	46c8      	mov	r8, r9
   19354:	e779      	b.n	1924a <_svfprintf_r+0x8a>
   19356:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   19358:	b123      	cbz	r3, 19364 <_svfprintf_r+0x1a4>
   1935a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1935c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1935e:	aa25      	add	r2, sp, #148	; 0x94
   19360:	f005 fae0 	bl	1e924 <__ssprint_r>
   19364:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19366:	899b      	ldrh	r3, [r3, #12]
   19368:	f013 0f40 	tst.w	r3, #64	; 0x40
   1936c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1936e:	bf18      	it	ne
   19370:	f04f 33ff 	movne.w	r3, #4294967295
   19374:	9309      	str	r3, [sp, #36]	; 0x24
   19376:	9809      	ldr	r0, [sp, #36]	; 0x24
   19378:	b043      	add	sp, #268	; 0x10c
   1937a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1937e:	f01b 0f20 	tst.w	fp, #32
   19382:	9311      	str	r3, [sp, #68]	; 0x44
   19384:	f040 81dd 	bne.w	19742 <_svfprintf_r+0x582>
   19388:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1938a:	f01b 0f10 	tst.w	fp, #16
   1938e:	4613      	mov	r3, r2
   19390:	f040 856e 	bne.w	19e70 <_svfprintf_r+0xcb0>
   19394:	f01b 0f40 	tst.w	fp, #64	; 0x40
   19398:	f000 856a 	beq.w	19e70 <_svfprintf_r+0xcb0>
   1939c:	8814      	ldrh	r4, [r2, #0]
   1939e:	3204      	adds	r2, #4
   193a0:	2500      	movs	r5, #0
   193a2:	2301      	movs	r3, #1
   193a4:	920f      	str	r2, [sp, #60]	; 0x3c
   193a6:	2700      	movs	r7, #0
   193a8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   193ac:	990a      	ldr	r1, [sp, #40]	; 0x28
   193ae:	1c4a      	adds	r2, r1, #1
   193b0:	f000 8265 	beq.w	1987e <_svfprintf_r+0x6be>
   193b4:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   193b8:	9207      	str	r2, [sp, #28]
   193ba:	ea54 0205 	orrs.w	r2, r4, r5
   193be:	f040 8264 	bne.w	1988a <_svfprintf_r+0x6ca>
   193c2:	2900      	cmp	r1, #0
   193c4:	f040 843c 	bne.w	19c40 <_svfprintf_r+0xa80>
   193c8:	2b00      	cmp	r3, #0
   193ca:	f040 84d7 	bne.w	19d7c <_svfprintf_r+0xbbc>
   193ce:	f01b 0301 	ands.w	r3, fp, #1
   193d2:	930e      	str	r3, [sp, #56]	; 0x38
   193d4:	f000 8604 	beq.w	19fe0 <_svfprintf_r+0xe20>
   193d8:	ae42      	add	r6, sp, #264	; 0x108
   193da:	2330      	movs	r3, #48	; 0x30
   193dc:	f806 3d41 	strb.w	r3, [r6, #-65]!
   193e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   193e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   193e4:	4293      	cmp	r3, r2
   193e6:	bfb8      	it	lt
   193e8:	4613      	movlt	r3, r2
   193ea:	9308      	str	r3, [sp, #32]
   193ec:	2300      	movs	r3, #0
   193ee:	9312      	str	r3, [sp, #72]	; 0x48
   193f0:	b117      	cbz	r7, 193f8 <_svfprintf_r+0x238>
   193f2:	9b08      	ldr	r3, [sp, #32]
   193f4:	3301      	adds	r3, #1
   193f6:	9308      	str	r3, [sp, #32]
   193f8:	9b07      	ldr	r3, [sp, #28]
   193fa:	f013 0302 	ands.w	r3, r3, #2
   193fe:	9310      	str	r3, [sp, #64]	; 0x40
   19400:	d002      	beq.n	19408 <_svfprintf_r+0x248>
   19402:	9b08      	ldr	r3, [sp, #32]
   19404:	3302      	adds	r3, #2
   19406:	9308      	str	r3, [sp, #32]
   19408:	9b07      	ldr	r3, [sp, #28]
   1940a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   1940e:	f040 830e 	bne.w	19a2e <_svfprintf_r+0x86e>
   19412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19414:	9a08      	ldr	r2, [sp, #32]
   19416:	eba3 0b02 	sub.w	fp, r3, r2
   1941a:	f1bb 0f00 	cmp.w	fp, #0
   1941e:	f340 8306 	ble.w	19a2e <_svfprintf_r+0x86e>
   19422:	f1bb 0f10 	cmp.w	fp, #16
   19426:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   19428:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1942a:	dd29      	ble.n	19480 <_svfprintf_r+0x2c0>
   1942c:	4643      	mov	r3, r8
   1942e:	4621      	mov	r1, r4
   19430:	46a8      	mov	r8, r5
   19432:	2710      	movs	r7, #16
   19434:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   19436:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   19438:	e006      	b.n	19448 <_svfprintf_r+0x288>
   1943a:	f1ab 0b10 	sub.w	fp, fp, #16
   1943e:	f1bb 0f10 	cmp.w	fp, #16
   19442:	f103 0308 	add.w	r3, r3, #8
   19446:	dd18      	ble.n	1947a <_svfprintf_r+0x2ba>
   19448:	3201      	adds	r2, #1
   1944a:	48b7      	ldr	r0, [pc, #732]	; (19728 <_svfprintf_r+0x568>)
   1944c:	9226      	str	r2, [sp, #152]	; 0x98
   1944e:	3110      	adds	r1, #16
   19450:	2a07      	cmp	r2, #7
   19452:	9127      	str	r1, [sp, #156]	; 0x9c
   19454:	e883 0081 	stmia.w	r3, {r0, r7}
   19458:	ddef      	ble.n	1943a <_svfprintf_r+0x27a>
   1945a:	aa25      	add	r2, sp, #148	; 0x94
   1945c:	4629      	mov	r1, r5
   1945e:	4620      	mov	r0, r4
   19460:	f005 fa60 	bl	1e924 <__ssprint_r>
   19464:	2800      	cmp	r0, #0
   19466:	f47f af7d 	bne.w	19364 <_svfprintf_r+0x1a4>
   1946a:	f1ab 0b10 	sub.w	fp, fp, #16
   1946e:	f1bb 0f10 	cmp.w	fp, #16
   19472:	9927      	ldr	r1, [sp, #156]	; 0x9c
   19474:	9a26      	ldr	r2, [sp, #152]	; 0x98
   19476:	464b      	mov	r3, r9
   19478:	dce6      	bgt.n	19448 <_svfprintf_r+0x288>
   1947a:	4645      	mov	r5, r8
   1947c:	460c      	mov	r4, r1
   1947e:	4698      	mov	r8, r3
   19480:	3201      	adds	r2, #1
   19482:	4ba9      	ldr	r3, [pc, #676]	; (19728 <_svfprintf_r+0x568>)
   19484:	9226      	str	r2, [sp, #152]	; 0x98
   19486:	445c      	add	r4, fp
   19488:	2a07      	cmp	r2, #7
   1948a:	9427      	str	r4, [sp, #156]	; 0x9c
   1948c:	e888 0808 	stmia.w	r8, {r3, fp}
   19490:	f300 8498 	bgt.w	19dc4 <_svfprintf_r+0xc04>
   19494:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   19498:	f108 0808 	add.w	r8, r8, #8
   1949c:	b177      	cbz	r7, 194bc <_svfprintf_r+0x2fc>
   1949e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   194a0:	3301      	adds	r3, #1
   194a2:	3401      	adds	r4, #1
   194a4:	f10d 0177 	add.w	r1, sp, #119	; 0x77
   194a8:	2201      	movs	r2, #1
   194aa:	2b07      	cmp	r3, #7
   194ac:	9427      	str	r4, [sp, #156]	; 0x9c
   194ae:	9326      	str	r3, [sp, #152]	; 0x98
   194b0:	e888 0006 	stmia.w	r8, {r1, r2}
   194b4:	f300 83db 	bgt.w	19c6e <_svfprintf_r+0xaae>
   194b8:	f108 0808 	add.w	r8, r8, #8
   194bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   194be:	b16b      	cbz	r3, 194dc <_svfprintf_r+0x31c>
   194c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   194c2:	3301      	adds	r3, #1
   194c4:	3402      	adds	r4, #2
   194c6:	a91e      	add	r1, sp, #120	; 0x78
   194c8:	2202      	movs	r2, #2
   194ca:	2b07      	cmp	r3, #7
   194cc:	9427      	str	r4, [sp, #156]	; 0x9c
   194ce:	9326      	str	r3, [sp, #152]	; 0x98
   194d0:	e888 0006 	stmia.w	r8, {r1, r2}
   194d4:	f300 83d6 	bgt.w	19c84 <_svfprintf_r+0xac4>
   194d8:	f108 0808 	add.w	r8, r8, #8
   194dc:	2d80      	cmp	r5, #128	; 0x80
   194de:	f000 8315 	beq.w	19b0c <_svfprintf_r+0x94c>
   194e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   194e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   194e6:	1a9f      	subs	r7, r3, r2
   194e8:	2f00      	cmp	r7, #0
   194ea:	dd36      	ble.n	1955a <_svfprintf_r+0x39a>
   194ec:	2f10      	cmp	r7, #16
   194ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
   194f0:	4d8e      	ldr	r5, [pc, #568]	; (1972c <_svfprintf_r+0x56c>)
   194f2:	dd27      	ble.n	19544 <_svfprintf_r+0x384>
   194f4:	4642      	mov	r2, r8
   194f6:	4621      	mov	r1, r4
   194f8:	46b0      	mov	r8, r6
   194fa:	f04f 0b10 	mov.w	fp, #16
   194fe:	462e      	mov	r6, r5
   19500:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   19502:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   19504:	e004      	b.n	19510 <_svfprintf_r+0x350>
   19506:	3f10      	subs	r7, #16
   19508:	2f10      	cmp	r7, #16
   1950a:	f102 0208 	add.w	r2, r2, #8
   1950e:	dd15      	ble.n	1953c <_svfprintf_r+0x37c>
   19510:	3301      	adds	r3, #1
   19512:	3110      	adds	r1, #16
   19514:	2b07      	cmp	r3, #7
   19516:	9127      	str	r1, [sp, #156]	; 0x9c
   19518:	9326      	str	r3, [sp, #152]	; 0x98
   1951a:	e882 0840 	stmia.w	r2, {r6, fp}
   1951e:	ddf2      	ble.n	19506 <_svfprintf_r+0x346>
   19520:	aa25      	add	r2, sp, #148	; 0x94
   19522:	4629      	mov	r1, r5
   19524:	4620      	mov	r0, r4
   19526:	f005 f9fd 	bl	1e924 <__ssprint_r>
   1952a:	2800      	cmp	r0, #0
   1952c:	f47f af1a 	bne.w	19364 <_svfprintf_r+0x1a4>
   19530:	3f10      	subs	r7, #16
   19532:	2f10      	cmp	r7, #16
   19534:	9927      	ldr	r1, [sp, #156]	; 0x9c
   19536:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19538:	464a      	mov	r2, r9
   1953a:	dce9      	bgt.n	19510 <_svfprintf_r+0x350>
   1953c:	4635      	mov	r5, r6
   1953e:	460c      	mov	r4, r1
   19540:	4646      	mov	r6, r8
   19542:	4690      	mov	r8, r2
   19544:	3301      	adds	r3, #1
   19546:	443c      	add	r4, r7
   19548:	2b07      	cmp	r3, #7
   1954a:	9427      	str	r4, [sp, #156]	; 0x9c
   1954c:	9326      	str	r3, [sp, #152]	; 0x98
   1954e:	e888 00a0 	stmia.w	r8, {r5, r7}
   19552:	f300 8381 	bgt.w	19c58 <_svfprintf_r+0xa98>
   19556:	f108 0808 	add.w	r8, r8, #8
   1955a:	9b07      	ldr	r3, [sp, #28]
   1955c:	05df      	lsls	r7, r3, #23
   1955e:	f100 8268 	bmi.w	19a32 <_svfprintf_r+0x872>
   19562:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19564:	990e      	ldr	r1, [sp, #56]	; 0x38
   19566:	f8c8 6000 	str.w	r6, [r8]
   1956a:	3301      	adds	r3, #1
   1956c:	440c      	add	r4, r1
   1956e:	2b07      	cmp	r3, #7
   19570:	9427      	str	r4, [sp, #156]	; 0x9c
   19572:	f8c8 1004 	str.w	r1, [r8, #4]
   19576:	9326      	str	r3, [sp, #152]	; 0x98
   19578:	f300 834d 	bgt.w	19c16 <_svfprintf_r+0xa56>
   1957c:	f108 0808 	add.w	r8, r8, #8
   19580:	9b07      	ldr	r3, [sp, #28]
   19582:	075b      	lsls	r3, r3, #29
   19584:	d53a      	bpl.n	195fc <_svfprintf_r+0x43c>
   19586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19588:	9a08      	ldr	r2, [sp, #32]
   1958a:	1a9d      	subs	r5, r3, r2
   1958c:	2d00      	cmp	r5, #0
   1958e:	dd35      	ble.n	195fc <_svfprintf_r+0x43c>
   19590:	2d10      	cmp	r5, #16
   19592:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19594:	dd20      	ble.n	195d8 <_svfprintf_r+0x418>
   19596:	2610      	movs	r6, #16
   19598:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1959a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   1959e:	e004      	b.n	195aa <_svfprintf_r+0x3ea>
   195a0:	3d10      	subs	r5, #16
   195a2:	2d10      	cmp	r5, #16
   195a4:	f108 0808 	add.w	r8, r8, #8
   195a8:	dd16      	ble.n	195d8 <_svfprintf_r+0x418>
   195aa:	3301      	adds	r3, #1
   195ac:	4a5e      	ldr	r2, [pc, #376]	; (19728 <_svfprintf_r+0x568>)
   195ae:	9326      	str	r3, [sp, #152]	; 0x98
   195b0:	3410      	adds	r4, #16
   195b2:	2b07      	cmp	r3, #7
   195b4:	9427      	str	r4, [sp, #156]	; 0x9c
   195b6:	e888 0044 	stmia.w	r8, {r2, r6}
   195ba:	ddf1      	ble.n	195a0 <_svfprintf_r+0x3e0>
   195bc:	aa25      	add	r2, sp, #148	; 0x94
   195be:	4659      	mov	r1, fp
   195c0:	4638      	mov	r0, r7
   195c2:	f005 f9af 	bl	1e924 <__ssprint_r>
   195c6:	2800      	cmp	r0, #0
   195c8:	f47f aecc 	bne.w	19364 <_svfprintf_r+0x1a4>
   195cc:	3d10      	subs	r5, #16
   195ce:	2d10      	cmp	r5, #16
   195d0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   195d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   195d4:	46c8      	mov	r8, r9
   195d6:	dce8      	bgt.n	195aa <_svfprintf_r+0x3ea>
   195d8:	3301      	adds	r3, #1
   195da:	4a53      	ldr	r2, [pc, #332]	; (19728 <_svfprintf_r+0x568>)
   195dc:	9326      	str	r3, [sp, #152]	; 0x98
   195de:	442c      	add	r4, r5
   195e0:	2b07      	cmp	r3, #7
   195e2:	9427      	str	r4, [sp, #156]	; 0x9c
   195e4:	e888 0024 	stmia.w	r8, {r2, r5}
   195e8:	dd08      	ble.n	195fc <_svfprintf_r+0x43c>
   195ea:	aa25      	add	r2, sp, #148	; 0x94
   195ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
   195ee:	980c      	ldr	r0, [sp, #48]	; 0x30
   195f0:	f005 f998 	bl	1e924 <__ssprint_r>
   195f4:	2800      	cmp	r0, #0
   195f6:	f47f aeb5 	bne.w	19364 <_svfprintf_r+0x1a4>
   195fa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   195fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   195fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   19600:	9908      	ldr	r1, [sp, #32]
   19602:	428a      	cmp	r2, r1
   19604:	bfac      	ite	ge
   19606:	189b      	addge	r3, r3, r2
   19608:	185b      	addlt	r3, r3, r1
   1960a:	9309      	str	r3, [sp, #36]	; 0x24
   1960c:	2c00      	cmp	r4, #0
   1960e:	f040 830d 	bne.w	19c2c <_svfprintf_r+0xa6c>
   19612:	2300      	movs	r3, #0
   19614:	9326      	str	r3, [sp, #152]	; 0x98
   19616:	46c8      	mov	r8, r9
   19618:	e5f9      	b.n	1920e <_svfprintf_r+0x4e>
   1961a:	9311      	str	r3, [sp, #68]	; 0x44
   1961c:	f01b 0320 	ands.w	r3, fp, #32
   19620:	f040 81e3 	bne.w	199ea <_svfprintf_r+0x82a>
   19624:	f01b 0210 	ands.w	r2, fp, #16
   19628:	f040 842e 	bne.w	19e88 <_svfprintf_r+0xcc8>
   1962c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   19630:	f000 842a 	beq.w	19e88 <_svfprintf_r+0xcc8>
   19634:	990f      	ldr	r1, [sp, #60]	; 0x3c
   19636:	4613      	mov	r3, r2
   19638:	460a      	mov	r2, r1
   1963a:	3204      	adds	r2, #4
   1963c:	880c      	ldrh	r4, [r1, #0]
   1963e:	920f      	str	r2, [sp, #60]	; 0x3c
   19640:	2500      	movs	r5, #0
   19642:	e6b0      	b.n	193a6 <_svfprintf_r+0x1e6>
   19644:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   19646:	9311      	str	r3, [sp, #68]	; 0x44
   19648:	6816      	ldr	r6, [r2, #0]
   1964a:	2400      	movs	r4, #0
   1964c:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
   19650:	1d15      	adds	r5, r2, #4
   19652:	2e00      	cmp	r6, #0
   19654:	f000 86a7 	beq.w	1a3a6 <_svfprintf_r+0x11e6>
   19658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1965a:	1c53      	adds	r3, r2, #1
   1965c:	f000 8609 	beq.w	1a272 <_svfprintf_r+0x10b2>
   19660:	4621      	mov	r1, r4
   19662:	4630      	mov	r0, r6
   19664:	f7fe fcdc 	bl	18020 <memchr>
   19668:	2800      	cmp	r0, #0
   1966a:	f000 86e1 	beq.w	1a430 <_svfprintf_r+0x1270>
   1966e:	1b83      	subs	r3, r0, r6
   19670:	930e      	str	r3, [sp, #56]	; 0x38
   19672:	940a      	str	r4, [sp, #40]	; 0x28
   19674:	950f      	str	r5, [sp, #60]	; 0x3c
   19676:	f8cd b01c 	str.w	fp, [sp, #28]
   1967a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1967e:	9308      	str	r3, [sp, #32]
   19680:	9412      	str	r4, [sp, #72]	; 0x48
   19682:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   19686:	e6b3      	b.n	193f0 <_svfprintf_r+0x230>
   19688:	f89a 3000 	ldrb.w	r3, [sl]
   1968c:	2201      	movs	r2, #1
   1968e:	212b      	movs	r1, #43	; 0x2b
   19690:	e5ee      	b.n	19270 <_svfprintf_r+0xb0>
   19692:	f04b 0b20 	orr.w	fp, fp, #32
   19696:	f89a 3000 	ldrb.w	r3, [sl]
   1969a:	e5e9      	b.n	19270 <_svfprintf_r+0xb0>
   1969c:	9311      	str	r3, [sp, #68]	; 0x44
   1969e:	2a00      	cmp	r2, #0
   196a0:	f040 8795 	bne.w	1a5ce <_svfprintf_r+0x140e>
   196a4:	4b22      	ldr	r3, [pc, #136]	; (19730 <_svfprintf_r+0x570>)
   196a6:	9318      	str	r3, [sp, #96]	; 0x60
   196a8:	f01b 0f20 	tst.w	fp, #32
   196ac:	f040 8111 	bne.w	198d2 <_svfprintf_r+0x712>
   196b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   196b2:	f01b 0f10 	tst.w	fp, #16
   196b6:	4613      	mov	r3, r2
   196b8:	f040 83e1 	bne.w	19e7e <_svfprintf_r+0xcbe>
   196bc:	f01b 0f40 	tst.w	fp, #64	; 0x40
   196c0:	f000 83dd 	beq.w	19e7e <_svfprintf_r+0xcbe>
   196c4:	3304      	adds	r3, #4
   196c6:	8814      	ldrh	r4, [r2, #0]
   196c8:	930f      	str	r3, [sp, #60]	; 0x3c
   196ca:	2500      	movs	r5, #0
   196cc:	f01b 0f01 	tst.w	fp, #1
   196d0:	f000 810c 	beq.w	198ec <_svfprintf_r+0x72c>
   196d4:	ea54 0305 	orrs.w	r3, r4, r5
   196d8:	f000 8108 	beq.w	198ec <_svfprintf_r+0x72c>
   196dc:	2330      	movs	r3, #48	; 0x30
   196de:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   196e2:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   196e6:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   196ea:	f04b 0b02 	orr.w	fp, fp, #2
   196ee:	2302      	movs	r3, #2
   196f0:	e659      	b.n	193a6 <_svfprintf_r+0x1e6>
   196f2:	f89a 3000 	ldrb.w	r3, [sl]
   196f6:	2900      	cmp	r1, #0
   196f8:	f47f adba 	bne.w	19270 <_svfprintf_r+0xb0>
   196fc:	2201      	movs	r2, #1
   196fe:	2120      	movs	r1, #32
   19700:	e5b6      	b.n	19270 <_svfprintf_r+0xb0>
   19702:	f04b 0b01 	orr.w	fp, fp, #1
   19706:	f89a 3000 	ldrb.w	r3, [sl]
   1970a:	e5b1      	b.n	19270 <_svfprintf_r+0xb0>
   1970c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1970e:	6823      	ldr	r3, [r4, #0]
   19710:	930d      	str	r3, [sp, #52]	; 0x34
   19712:	4618      	mov	r0, r3
   19714:	2800      	cmp	r0, #0
   19716:	4623      	mov	r3, r4
   19718:	f103 0304 	add.w	r3, r3, #4
   1971c:	f6ff ae0a 	blt.w	19334 <_svfprintf_r+0x174>
   19720:	930f      	str	r3, [sp, #60]	; 0x3c
   19722:	f89a 3000 	ldrb.w	r3, [sl]
   19726:	e5a3      	b.n	19270 <_svfprintf_r+0xb0>
   19728:	0003ebb0 	.word	0x0003ebb0
   1972c:	0003ebc0 	.word	0x0003ebc0
   19730:	0003eb94 	.word	0x0003eb94
   19734:	f04b 0b10 	orr.w	fp, fp, #16
   19738:	f01b 0f20 	tst.w	fp, #32
   1973c:	9311      	str	r3, [sp, #68]	; 0x44
   1973e:	f43f ae23 	beq.w	19388 <_svfprintf_r+0x1c8>
   19742:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   19744:	3507      	adds	r5, #7
   19746:	f025 0307 	bic.w	r3, r5, #7
   1974a:	f103 0208 	add.w	r2, r3, #8
   1974e:	e9d3 4500 	ldrd	r4, r5, [r3]
   19752:	920f      	str	r2, [sp, #60]	; 0x3c
   19754:	2301      	movs	r3, #1
   19756:	e626      	b.n	193a6 <_svfprintf_r+0x1e6>
   19758:	f89a 3000 	ldrb.w	r3, [sl]
   1975c:	2b2a      	cmp	r3, #42	; 0x2a
   1975e:	f10a 0401 	add.w	r4, sl, #1
   19762:	f000 8727 	beq.w	1a5b4 <_svfprintf_r+0x13f4>
   19766:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1976a:	2809      	cmp	r0, #9
   1976c:	46a2      	mov	sl, r4
   1976e:	f200 86ad 	bhi.w	1a4cc <_svfprintf_r+0x130c>
   19772:	2300      	movs	r3, #0
   19774:	461c      	mov	r4, r3
   19776:	f81a 3b01 	ldrb.w	r3, [sl], #1
   1977a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1977e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   19782:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   19786:	2809      	cmp	r0, #9
   19788:	d9f5      	bls.n	19776 <_svfprintf_r+0x5b6>
   1978a:	940a      	str	r4, [sp, #40]	; 0x28
   1978c:	e572      	b.n	19274 <_svfprintf_r+0xb4>
   1978e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   19792:	f89a 3000 	ldrb.w	r3, [sl]
   19796:	e56b      	b.n	19270 <_svfprintf_r+0xb0>
   19798:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   1979c:	f89a 3000 	ldrb.w	r3, [sl]
   197a0:	e566      	b.n	19270 <_svfprintf_r+0xb0>
   197a2:	f89a 3000 	ldrb.w	r3, [sl]
   197a6:	2b6c      	cmp	r3, #108	; 0x6c
   197a8:	bf03      	ittte	eq
   197aa:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   197ae:	f04b 0b20 	orreq.w	fp, fp, #32
   197b2:	f10a 0a01 	addeq.w	sl, sl, #1
   197b6:	f04b 0b10 	orrne.w	fp, fp, #16
   197ba:	e559      	b.n	19270 <_svfprintf_r+0xb0>
   197bc:	2a00      	cmp	r2, #0
   197be:	f040 8711 	bne.w	1a5e4 <_svfprintf_r+0x1424>
   197c2:	f01b 0f20 	tst.w	fp, #32
   197c6:	f040 84f9 	bne.w	1a1bc <_svfprintf_r+0xffc>
   197ca:	f01b 0f10 	tst.w	fp, #16
   197ce:	f040 84ac 	bne.w	1a12a <_svfprintf_r+0xf6a>
   197d2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   197d6:	f000 84a8 	beq.w	1a12a <_svfprintf_r+0xf6a>
   197da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   197dc:	6813      	ldr	r3, [r2, #0]
   197de:	3204      	adds	r2, #4
   197e0:	920f      	str	r2, [sp, #60]	; 0x3c
   197e2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   197e6:	801a      	strh	r2, [r3, #0]
   197e8:	e511      	b.n	1920e <_svfprintf_r+0x4e>
   197ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
   197ec:	4bb3      	ldr	r3, [pc, #716]	; (19abc <_svfprintf_r+0x8fc>)
   197ee:	680c      	ldr	r4, [r1, #0]
   197f0:	9318      	str	r3, [sp, #96]	; 0x60
   197f2:	2230      	movs	r2, #48	; 0x30
   197f4:	2378      	movs	r3, #120	; 0x78
   197f6:	3104      	adds	r1, #4
   197f8:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   197fc:	9311      	str	r3, [sp, #68]	; 0x44
   197fe:	f04b 0b02 	orr.w	fp, fp, #2
   19802:	910f      	str	r1, [sp, #60]	; 0x3c
   19804:	2500      	movs	r5, #0
   19806:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   1980a:	2302      	movs	r3, #2
   1980c:	e5cb      	b.n	193a6 <_svfprintf_r+0x1e6>
   1980e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   19810:	9311      	str	r3, [sp, #68]	; 0x44
   19812:	680a      	ldr	r2, [r1, #0]
   19814:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   19818:	2300      	movs	r3, #0
   1981a:	460a      	mov	r2, r1
   1981c:	461f      	mov	r7, r3
   1981e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   19822:	3204      	adds	r2, #4
   19824:	2301      	movs	r3, #1
   19826:	9308      	str	r3, [sp, #32]
   19828:	f8cd b01c 	str.w	fp, [sp, #28]
   1982c:	970a      	str	r7, [sp, #40]	; 0x28
   1982e:	9712      	str	r7, [sp, #72]	; 0x48
   19830:	920f      	str	r2, [sp, #60]	; 0x3c
   19832:	930e      	str	r3, [sp, #56]	; 0x38
   19834:	ae28      	add	r6, sp, #160	; 0xa0
   19836:	e5df      	b.n	193f8 <_svfprintf_r+0x238>
   19838:	9311      	str	r3, [sp, #68]	; 0x44
   1983a:	2a00      	cmp	r2, #0
   1983c:	f040 86ea 	bne.w	1a614 <_svfprintf_r+0x1454>
   19840:	f01b 0f20 	tst.w	fp, #32
   19844:	d15d      	bne.n	19902 <_svfprintf_r+0x742>
   19846:	f01b 0f10 	tst.w	fp, #16
   1984a:	f040 8308 	bne.w	19e5e <_svfprintf_r+0xc9e>
   1984e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   19852:	f000 8304 	beq.w	19e5e <_svfprintf_r+0xc9e>
   19856:	990f      	ldr	r1, [sp, #60]	; 0x3c
   19858:	f9b1 4000 	ldrsh.w	r4, [r1]
   1985c:	3104      	adds	r1, #4
   1985e:	17e5      	asrs	r5, r4, #31
   19860:	4622      	mov	r2, r4
   19862:	462b      	mov	r3, r5
   19864:	910f      	str	r1, [sp, #60]	; 0x3c
   19866:	2a00      	cmp	r2, #0
   19868:	f173 0300 	sbcs.w	r3, r3, #0
   1986c:	db58      	blt.n	19920 <_svfprintf_r+0x760>
   1986e:	990a      	ldr	r1, [sp, #40]	; 0x28
   19870:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   19874:	1c4a      	adds	r2, r1, #1
   19876:	f04f 0301 	mov.w	r3, #1
   1987a:	f47f ad9b 	bne.w	193b4 <_svfprintf_r+0x1f4>
   1987e:	ea54 0205 	orrs.w	r2, r4, r5
   19882:	f000 81df 	beq.w	19c44 <_svfprintf_r+0xa84>
   19886:	f8cd b01c 	str.w	fp, [sp, #28]
   1988a:	2b01      	cmp	r3, #1
   1988c:	f000 827b 	beq.w	19d86 <_svfprintf_r+0xbc6>
   19890:	2b02      	cmp	r3, #2
   19892:	f040 8206 	bne.w	19ca2 <_svfprintf_r+0xae2>
   19896:	9818      	ldr	r0, [sp, #96]	; 0x60
   19898:	464e      	mov	r6, r9
   1989a:	0923      	lsrs	r3, r4, #4
   1989c:	f004 010f 	and.w	r1, r4, #15
   198a0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   198a4:	092a      	lsrs	r2, r5, #4
   198a6:	461c      	mov	r4, r3
   198a8:	4615      	mov	r5, r2
   198aa:	5c43      	ldrb	r3, [r0, r1]
   198ac:	f806 3d01 	strb.w	r3, [r6, #-1]!
   198b0:	ea54 0305 	orrs.w	r3, r4, r5
   198b4:	d1f1      	bne.n	1989a <_svfprintf_r+0x6da>
   198b6:	eba9 0306 	sub.w	r3, r9, r6
   198ba:	930e      	str	r3, [sp, #56]	; 0x38
   198bc:	e590      	b.n	193e0 <_svfprintf_r+0x220>
   198be:	9311      	str	r3, [sp, #68]	; 0x44
   198c0:	2a00      	cmp	r2, #0
   198c2:	f040 86a3 	bne.w	1a60c <_svfprintf_r+0x144c>
   198c6:	4b7e      	ldr	r3, [pc, #504]	; (19ac0 <_svfprintf_r+0x900>)
   198c8:	9318      	str	r3, [sp, #96]	; 0x60
   198ca:	f01b 0f20 	tst.w	fp, #32
   198ce:	f43f aeef 	beq.w	196b0 <_svfprintf_r+0x4f0>
   198d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   198d4:	3507      	adds	r5, #7
   198d6:	f025 0307 	bic.w	r3, r5, #7
   198da:	f103 0208 	add.w	r2, r3, #8
   198de:	f01b 0f01 	tst.w	fp, #1
   198e2:	920f      	str	r2, [sp, #60]	; 0x3c
   198e4:	e9d3 4500 	ldrd	r4, r5, [r3]
   198e8:	f47f aef4 	bne.w	196d4 <_svfprintf_r+0x514>
   198ec:	2302      	movs	r3, #2
   198ee:	e55a      	b.n	193a6 <_svfprintf_r+0x1e6>
   198f0:	9311      	str	r3, [sp, #68]	; 0x44
   198f2:	2a00      	cmp	r2, #0
   198f4:	f040 8686 	bne.w	1a604 <_svfprintf_r+0x1444>
   198f8:	f04b 0b10 	orr.w	fp, fp, #16
   198fc:	f01b 0f20 	tst.w	fp, #32
   19900:	d0a1      	beq.n	19846 <_svfprintf_r+0x686>
   19902:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   19904:	3507      	adds	r5, #7
   19906:	f025 0507 	bic.w	r5, r5, #7
   1990a:	e9d5 2300 	ldrd	r2, r3, [r5]
   1990e:	2a00      	cmp	r2, #0
   19910:	f105 0108 	add.w	r1, r5, #8
   19914:	461d      	mov	r5, r3
   19916:	f173 0300 	sbcs.w	r3, r3, #0
   1991a:	910f      	str	r1, [sp, #60]	; 0x3c
   1991c:	4614      	mov	r4, r2
   1991e:	daa6      	bge.n	1986e <_svfprintf_r+0x6ae>
   19920:	272d      	movs	r7, #45	; 0x2d
   19922:	4264      	negs	r4, r4
   19924:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   19928:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   1992c:	2301      	movs	r3, #1
   1992e:	e53d      	b.n	193ac <_svfprintf_r+0x1ec>
   19930:	9311      	str	r3, [sp, #68]	; 0x44
   19932:	2a00      	cmp	r2, #0
   19934:	f040 8662 	bne.w	1a5fc <_svfprintf_r+0x143c>
   19938:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1993a:	3507      	adds	r5, #7
   1993c:	f025 0307 	bic.w	r3, r5, #7
   19940:	f103 0208 	add.w	r2, r3, #8
   19944:	920f      	str	r2, [sp, #60]	; 0x3c
   19946:	681a      	ldr	r2, [r3, #0]
   19948:	9215      	str	r2, [sp, #84]	; 0x54
   1994a:	685b      	ldr	r3, [r3, #4]
   1994c:	9314      	str	r3, [sp, #80]	; 0x50
   1994e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19950:	9d15      	ldr	r5, [sp, #84]	; 0x54
   19952:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   19956:	4628      	mov	r0, r5
   19958:	4621      	mov	r1, r4
   1995a:	f04f 32ff 	mov.w	r2, #4294967295
   1995e:	4b59      	ldr	r3, [pc, #356]	; (19ac4 <_svfprintf_r+0x904>)
   19960:	f005 f8f0 	bl	1eb44 <__aeabi_dcmpun>
   19964:	2800      	cmp	r0, #0
   19966:	f040 834a 	bne.w	19ffe <_svfprintf_r+0xe3e>
   1996a:	4628      	mov	r0, r5
   1996c:	4621      	mov	r1, r4
   1996e:	f04f 32ff 	mov.w	r2, #4294967295
   19972:	4b54      	ldr	r3, [pc, #336]	; (19ac4 <_svfprintf_r+0x904>)
   19974:	f7fc f820 	bl	159b8 <__aeabi_dcmple>
   19978:	2800      	cmp	r0, #0
   1997a:	f040 8340 	bne.w	19ffe <_svfprintf_r+0xe3e>
   1997e:	a815      	add	r0, sp, #84	; 0x54
   19980:	c80d      	ldmia	r0, {r0, r2, r3}
   19982:	9914      	ldr	r1, [sp, #80]	; 0x50
   19984:	f7fc f80e 	bl	159a4 <__aeabi_dcmplt>
   19988:	2800      	cmp	r0, #0
   1998a:	f040 8530 	bne.w	1a3ee <_svfprintf_r+0x122e>
   1998e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   19992:	4e4d      	ldr	r6, [pc, #308]	; (19ac8 <_svfprintf_r+0x908>)
   19994:	4b4d      	ldr	r3, [pc, #308]	; (19acc <_svfprintf_r+0x90c>)
   19996:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   1999a:	9007      	str	r0, [sp, #28]
   1999c:	9811      	ldr	r0, [sp, #68]	; 0x44
   1999e:	2203      	movs	r2, #3
   199a0:	2100      	movs	r1, #0
   199a2:	9208      	str	r2, [sp, #32]
   199a4:	910a      	str	r1, [sp, #40]	; 0x28
   199a6:	2847      	cmp	r0, #71	; 0x47
   199a8:	bfd8      	it	le
   199aa:	461e      	movle	r6, r3
   199ac:	920e      	str	r2, [sp, #56]	; 0x38
   199ae:	9112      	str	r1, [sp, #72]	; 0x48
   199b0:	e51e      	b.n	193f0 <_svfprintf_r+0x230>
   199b2:	f04b 0b08 	orr.w	fp, fp, #8
   199b6:	f89a 3000 	ldrb.w	r3, [sl]
   199ba:	e459      	b.n	19270 <_svfprintf_r+0xb0>
   199bc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   199c0:	2300      	movs	r3, #0
   199c2:	461c      	mov	r4, r3
   199c4:	f81a 3b01 	ldrb.w	r3, [sl], #1
   199c8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   199cc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   199d0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   199d4:	2809      	cmp	r0, #9
   199d6:	d9f5      	bls.n	199c4 <_svfprintf_r+0x804>
   199d8:	940d      	str	r4, [sp, #52]	; 0x34
   199da:	e44b      	b.n	19274 <_svfprintf_r+0xb4>
   199dc:	f04b 0b10 	orr.w	fp, fp, #16
   199e0:	9311      	str	r3, [sp, #68]	; 0x44
   199e2:	f01b 0320 	ands.w	r3, fp, #32
   199e6:	f43f ae1d 	beq.w	19624 <_svfprintf_r+0x464>
   199ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   199ec:	3507      	adds	r5, #7
   199ee:	f025 0307 	bic.w	r3, r5, #7
   199f2:	f103 0208 	add.w	r2, r3, #8
   199f6:	e9d3 4500 	ldrd	r4, r5, [r3]
   199fa:	920f      	str	r2, [sp, #60]	; 0x3c
   199fc:	2300      	movs	r3, #0
   199fe:	e4d2      	b.n	193a6 <_svfprintf_r+0x1e6>
   19a00:	9311      	str	r3, [sp, #68]	; 0x44
   19a02:	2a00      	cmp	r2, #0
   19a04:	f040 85e7 	bne.w	1a5d6 <_svfprintf_r+0x1416>
   19a08:	9a11      	ldr	r2, [sp, #68]	; 0x44
   19a0a:	2a00      	cmp	r2, #0
   19a0c:	f43f aca3 	beq.w	19356 <_svfprintf_r+0x196>
   19a10:	2300      	movs	r3, #0
   19a12:	2101      	movs	r1, #1
   19a14:	461f      	mov	r7, r3
   19a16:	9108      	str	r1, [sp, #32]
   19a18:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   19a1c:	f8cd b01c 	str.w	fp, [sp, #28]
   19a20:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   19a24:	930a      	str	r3, [sp, #40]	; 0x28
   19a26:	9312      	str	r3, [sp, #72]	; 0x48
   19a28:	910e      	str	r1, [sp, #56]	; 0x38
   19a2a:	ae28      	add	r6, sp, #160	; 0xa0
   19a2c:	e4e4      	b.n	193f8 <_svfprintf_r+0x238>
   19a2e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   19a30:	e534      	b.n	1949c <_svfprintf_r+0x2dc>
   19a32:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19a34:	2b65      	cmp	r3, #101	; 0x65
   19a36:	f340 80a7 	ble.w	19b88 <_svfprintf_r+0x9c8>
   19a3a:	a815      	add	r0, sp, #84	; 0x54
   19a3c:	c80d      	ldmia	r0, {r0, r2, r3}
   19a3e:	9914      	ldr	r1, [sp, #80]	; 0x50
   19a40:	f7fb ffa6 	bl	15990 <__aeabi_dcmpeq>
   19a44:	2800      	cmp	r0, #0
   19a46:	f000 8150 	beq.w	19cea <_svfprintf_r+0xb2a>
   19a4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19a4c:	4a20      	ldr	r2, [pc, #128]	; (19ad0 <_svfprintf_r+0x910>)
   19a4e:	f8c8 2000 	str.w	r2, [r8]
   19a52:	3301      	adds	r3, #1
   19a54:	3401      	adds	r4, #1
   19a56:	2201      	movs	r2, #1
   19a58:	2b07      	cmp	r3, #7
   19a5a:	9427      	str	r4, [sp, #156]	; 0x9c
   19a5c:	9326      	str	r3, [sp, #152]	; 0x98
   19a5e:	f8c8 2004 	str.w	r2, [r8, #4]
   19a62:	f300 836a 	bgt.w	1a13a <_svfprintf_r+0xf7a>
   19a66:	f108 0808 	add.w	r8, r8, #8
   19a6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   19a6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   19a6e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   19a70:	4293      	cmp	r3, r2
   19a72:	db03      	blt.n	19a7c <_svfprintf_r+0x8bc>
   19a74:	9b07      	ldr	r3, [sp, #28]
   19a76:	07dd      	lsls	r5, r3, #31
   19a78:	f57f ad82 	bpl.w	19580 <_svfprintf_r+0x3c0>
   19a7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19a7e:	9919      	ldr	r1, [sp, #100]	; 0x64
   19a80:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   19a82:	f8c8 2000 	str.w	r2, [r8]
   19a86:	3301      	adds	r3, #1
   19a88:	440c      	add	r4, r1
   19a8a:	2b07      	cmp	r3, #7
   19a8c:	f8c8 1004 	str.w	r1, [r8, #4]
   19a90:	9427      	str	r4, [sp, #156]	; 0x9c
   19a92:	9326      	str	r3, [sp, #152]	; 0x98
   19a94:	f300 839e 	bgt.w	1a1d4 <_svfprintf_r+0x1014>
   19a98:	f108 0808 	add.w	r8, r8, #8
   19a9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19a9e:	1e5e      	subs	r6, r3, #1
   19aa0:	2e00      	cmp	r6, #0
   19aa2:	f77f ad6d 	ble.w	19580 <_svfprintf_r+0x3c0>
   19aa6:	2e10      	cmp	r6, #16
   19aa8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19aaa:	4d0a      	ldr	r5, [pc, #40]	; (19ad4 <_svfprintf_r+0x914>)
   19aac:	f340 81f5 	ble.w	19e9a <_svfprintf_r+0xcda>
   19ab0:	4622      	mov	r2, r4
   19ab2:	2710      	movs	r7, #16
   19ab4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   19ab8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   19aba:	e013      	b.n	19ae4 <_svfprintf_r+0x924>
   19abc:	0003eb94 	.word	0x0003eb94
   19ac0:	0003eb80 	.word	0x0003eb80
   19ac4:	7fefffff 	.word	0x7fefffff
   19ac8:	0003eb74 	.word	0x0003eb74
   19acc:	0003eb70 	.word	0x0003eb70
   19ad0:	0003b9fc 	.word	0x0003b9fc
   19ad4:	0003ebc0 	.word	0x0003ebc0
   19ad8:	f108 0808 	add.w	r8, r8, #8
   19adc:	3e10      	subs	r6, #16
   19ade:	2e10      	cmp	r6, #16
   19ae0:	f340 81da 	ble.w	19e98 <_svfprintf_r+0xcd8>
   19ae4:	3301      	adds	r3, #1
   19ae6:	3210      	adds	r2, #16
   19ae8:	2b07      	cmp	r3, #7
   19aea:	9227      	str	r2, [sp, #156]	; 0x9c
   19aec:	9326      	str	r3, [sp, #152]	; 0x98
   19aee:	e888 00a0 	stmia.w	r8, {r5, r7}
   19af2:	ddf1      	ble.n	19ad8 <_svfprintf_r+0x918>
   19af4:	aa25      	add	r2, sp, #148	; 0x94
   19af6:	4621      	mov	r1, r4
   19af8:	4658      	mov	r0, fp
   19afa:	f004 ff13 	bl	1e924 <__ssprint_r>
   19afe:	2800      	cmp	r0, #0
   19b00:	f47f ac30 	bne.w	19364 <_svfprintf_r+0x1a4>
   19b04:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   19b06:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19b08:	46c8      	mov	r8, r9
   19b0a:	e7e7      	b.n	19adc <_svfprintf_r+0x91c>
   19b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19b0e:	9a08      	ldr	r2, [sp, #32]
   19b10:	1a9f      	subs	r7, r3, r2
   19b12:	2f00      	cmp	r7, #0
   19b14:	f77f ace5 	ble.w	194e2 <_svfprintf_r+0x322>
   19b18:	2f10      	cmp	r7, #16
   19b1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19b1c:	4db6      	ldr	r5, [pc, #728]	; (19df8 <_svfprintf_r+0xc38>)
   19b1e:	dd27      	ble.n	19b70 <_svfprintf_r+0x9b0>
   19b20:	4642      	mov	r2, r8
   19b22:	4621      	mov	r1, r4
   19b24:	46b0      	mov	r8, r6
   19b26:	f04f 0b10 	mov.w	fp, #16
   19b2a:	462e      	mov	r6, r5
   19b2c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   19b2e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   19b30:	e004      	b.n	19b3c <_svfprintf_r+0x97c>
   19b32:	3f10      	subs	r7, #16
   19b34:	2f10      	cmp	r7, #16
   19b36:	f102 0208 	add.w	r2, r2, #8
   19b3a:	dd15      	ble.n	19b68 <_svfprintf_r+0x9a8>
   19b3c:	3301      	adds	r3, #1
   19b3e:	3110      	adds	r1, #16
   19b40:	2b07      	cmp	r3, #7
   19b42:	9127      	str	r1, [sp, #156]	; 0x9c
   19b44:	9326      	str	r3, [sp, #152]	; 0x98
   19b46:	e882 0840 	stmia.w	r2, {r6, fp}
   19b4a:	ddf2      	ble.n	19b32 <_svfprintf_r+0x972>
   19b4c:	aa25      	add	r2, sp, #148	; 0x94
   19b4e:	4629      	mov	r1, r5
   19b50:	4620      	mov	r0, r4
   19b52:	f004 fee7 	bl	1e924 <__ssprint_r>
   19b56:	2800      	cmp	r0, #0
   19b58:	f47f ac04 	bne.w	19364 <_svfprintf_r+0x1a4>
   19b5c:	3f10      	subs	r7, #16
   19b5e:	2f10      	cmp	r7, #16
   19b60:	9927      	ldr	r1, [sp, #156]	; 0x9c
   19b62:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19b64:	464a      	mov	r2, r9
   19b66:	dce9      	bgt.n	19b3c <_svfprintf_r+0x97c>
   19b68:	4635      	mov	r5, r6
   19b6a:	460c      	mov	r4, r1
   19b6c:	4646      	mov	r6, r8
   19b6e:	4690      	mov	r8, r2
   19b70:	3301      	adds	r3, #1
   19b72:	443c      	add	r4, r7
   19b74:	2b07      	cmp	r3, #7
   19b76:	9427      	str	r4, [sp, #156]	; 0x9c
   19b78:	9326      	str	r3, [sp, #152]	; 0x98
   19b7a:	e888 00a0 	stmia.w	r8, {r5, r7}
   19b7e:	f300 8232 	bgt.w	19fe6 <_svfprintf_r+0xe26>
   19b82:	f108 0808 	add.w	r8, r8, #8
   19b86:	e4ac      	b.n	194e2 <_svfprintf_r+0x322>
   19b88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19b8a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   19b8c:	2b01      	cmp	r3, #1
   19b8e:	f340 81fe 	ble.w	19f8e <_svfprintf_r+0xdce>
   19b92:	3701      	adds	r7, #1
   19b94:	3401      	adds	r4, #1
   19b96:	2301      	movs	r3, #1
   19b98:	2f07      	cmp	r7, #7
   19b9a:	9427      	str	r4, [sp, #156]	; 0x9c
   19b9c:	9726      	str	r7, [sp, #152]	; 0x98
   19b9e:	f8c8 6000 	str.w	r6, [r8]
   19ba2:	f8c8 3004 	str.w	r3, [r8, #4]
   19ba6:	f300 8203 	bgt.w	19fb0 <_svfprintf_r+0xdf0>
   19baa:	f108 0808 	add.w	r8, r8, #8
   19bae:	9a19      	ldr	r2, [sp, #100]	; 0x64
   19bb0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   19bb2:	f8c8 3000 	str.w	r3, [r8]
   19bb6:	3701      	adds	r7, #1
   19bb8:	4414      	add	r4, r2
   19bba:	2f07      	cmp	r7, #7
   19bbc:	9427      	str	r4, [sp, #156]	; 0x9c
   19bbe:	9726      	str	r7, [sp, #152]	; 0x98
   19bc0:	f8c8 2004 	str.w	r2, [r8, #4]
   19bc4:	f300 8200 	bgt.w	19fc8 <_svfprintf_r+0xe08>
   19bc8:	f108 0808 	add.w	r8, r8, #8
   19bcc:	a815      	add	r0, sp, #84	; 0x54
   19bce:	c80d      	ldmia	r0, {r0, r2, r3}
   19bd0:	9914      	ldr	r1, [sp, #80]	; 0x50
   19bd2:	f7fb fedd 	bl	15990 <__aeabi_dcmpeq>
   19bd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19bd8:	2800      	cmp	r0, #0
   19bda:	f040 8101 	bne.w	19de0 <_svfprintf_r+0xc20>
   19bde:	3b01      	subs	r3, #1
   19be0:	3701      	adds	r7, #1
   19be2:	3601      	adds	r6, #1
   19be4:	441c      	add	r4, r3
   19be6:	2f07      	cmp	r7, #7
   19be8:	9726      	str	r7, [sp, #152]	; 0x98
   19bea:	9427      	str	r4, [sp, #156]	; 0x9c
   19bec:	f8c8 6000 	str.w	r6, [r8]
   19bf0:	f8c8 3004 	str.w	r3, [r8, #4]
   19bf4:	f300 8127 	bgt.w	19e46 <_svfprintf_r+0xc86>
   19bf8:	f108 0808 	add.w	r8, r8, #8
   19bfc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   19bfe:	f8c8 2004 	str.w	r2, [r8, #4]
   19c02:	3701      	adds	r7, #1
   19c04:	4414      	add	r4, r2
   19c06:	ab21      	add	r3, sp, #132	; 0x84
   19c08:	2f07      	cmp	r7, #7
   19c0a:	9427      	str	r4, [sp, #156]	; 0x9c
   19c0c:	9726      	str	r7, [sp, #152]	; 0x98
   19c0e:	f8c8 3000 	str.w	r3, [r8]
   19c12:	f77f acb3 	ble.w	1957c <_svfprintf_r+0x3bc>
   19c16:	aa25      	add	r2, sp, #148	; 0x94
   19c18:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19c1a:	980c      	ldr	r0, [sp, #48]	; 0x30
   19c1c:	f004 fe82 	bl	1e924 <__ssprint_r>
   19c20:	2800      	cmp	r0, #0
   19c22:	f47f ab9f 	bne.w	19364 <_svfprintf_r+0x1a4>
   19c26:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   19c28:	46c8      	mov	r8, r9
   19c2a:	e4a9      	b.n	19580 <_svfprintf_r+0x3c0>
   19c2c:	aa25      	add	r2, sp, #148	; 0x94
   19c2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19c30:	980c      	ldr	r0, [sp, #48]	; 0x30
   19c32:	f004 fe77 	bl	1e924 <__ssprint_r>
   19c36:	2800      	cmp	r0, #0
   19c38:	f43f aceb 	beq.w	19612 <_svfprintf_r+0x452>
   19c3c:	f7ff bb92 	b.w	19364 <_svfprintf_r+0x1a4>
   19c40:	f8dd b01c 	ldr.w	fp, [sp, #28]
   19c44:	2b01      	cmp	r3, #1
   19c46:	f000 8134 	beq.w	19eb2 <_svfprintf_r+0xcf2>
   19c4a:	2b02      	cmp	r3, #2
   19c4c:	d125      	bne.n	19c9a <_svfprintf_r+0xada>
   19c4e:	f8cd b01c 	str.w	fp, [sp, #28]
   19c52:	2400      	movs	r4, #0
   19c54:	2500      	movs	r5, #0
   19c56:	e61e      	b.n	19896 <_svfprintf_r+0x6d6>
   19c58:	aa25      	add	r2, sp, #148	; 0x94
   19c5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19c5c:	980c      	ldr	r0, [sp, #48]	; 0x30
   19c5e:	f004 fe61 	bl	1e924 <__ssprint_r>
   19c62:	2800      	cmp	r0, #0
   19c64:	f47f ab7e 	bne.w	19364 <_svfprintf_r+0x1a4>
   19c68:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   19c6a:	46c8      	mov	r8, r9
   19c6c:	e475      	b.n	1955a <_svfprintf_r+0x39a>
   19c6e:	aa25      	add	r2, sp, #148	; 0x94
   19c70:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19c72:	980c      	ldr	r0, [sp, #48]	; 0x30
   19c74:	f004 fe56 	bl	1e924 <__ssprint_r>
   19c78:	2800      	cmp	r0, #0
   19c7a:	f47f ab73 	bne.w	19364 <_svfprintf_r+0x1a4>
   19c7e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   19c80:	46c8      	mov	r8, r9
   19c82:	e41b      	b.n	194bc <_svfprintf_r+0x2fc>
   19c84:	aa25      	add	r2, sp, #148	; 0x94
   19c86:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19c88:	980c      	ldr	r0, [sp, #48]	; 0x30
   19c8a:	f004 fe4b 	bl	1e924 <__ssprint_r>
   19c8e:	2800      	cmp	r0, #0
   19c90:	f47f ab68 	bne.w	19364 <_svfprintf_r+0x1a4>
   19c94:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   19c96:	46c8      	mov	r8, r9
   19c98:	e420      	b.n	194dc <_svfprintf_r+0x31c>
   19c9a:	f8cd b01c 	str.w	fp, [sp, #28]
   19c9e:	2400      	movs	r4, #0
   19ca0:	2500      	movs	r5, #0
   19ca2:	4649      	mov	r1, r9
   19ca4:	e000      	b.n	19ca8 <_svfprintf_r+0xae8>
   19ca6:	4631      	mov	r1, r6
   19ca8:	08e2      	lsrs	r2, r4, #3
   19caa:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   19cae:	08e8      	lsrs	r0, r5, #3
   19cb0:	f004 0307 	and.w	r3, r4, #7
   19cb4:	4605      	mov	r5, r0
   19cb6:	4614      	mov	r4, r2
   19cb8:	3330      	adds	r3, #48	; 0x30
   19cba:	ea54 0205 	orrs.w	r2, r4, r5
   19cbe:	f801 3c01 	strb.w	r3, [r1, #-1]
   19cc2:	f101 36ff 	add.w	r6, r1, #4294967295
   19cc6:	d1ee      	bne.n	19ca6 <_svfprintf_r+0xae6>
   19cc8:	9a07      	ldr	r2, [sp, #28]
   19cca:	07d2      	lsls	r2, r2, #31
   19ccc:	f57f adf3 	bpl.w	198b6 <_svfprintf_r+0x6f6>
   19cd0:	2b30      	cmp	r3, #48	; 0x30
   19cd2:	f43f adf0 	beq.w	198b6 <_svfprintf_r+0x6f6>
   19cd6:	3902      	subs	r1, #2
   19cd8:	2330      	movs	r3, #48	; 0x30
   19cda:	f806 3c01 	strb.w	r3, [r6, #-1]
   19cde:	eba9 0301 	sub.w	r3, r9, r1
   19ce2:	930e      	str	r3, [sp, #56]	; 0x38
   19ce4:	460e      	mov	r6, r1
   19ce6:	f7ff bb7b 	b.w	193e0 <_svfprintf_r+0x220>
   19cea:	991f      	ldr	r1, [sp, #124]	; 0x7c
   19cec:	2900      	cmp	r1, #0
   19cee:	f340 822e 	ble.w	1a14e <_svfprintf_r+0xf8e>
   19cf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19cf4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   19cf6:	4293      	cmp	r3, r2
   19cf8:	bfa8      	it	ge
   19cfa:	4613      	movge	r3, r2
   19cfc:	2b00      	cmp	r3, #0
   19cfe:	461f      	mov	r7, r3
   19d00:	dd0d      	ble.n	19d1e <_svfprintf_r+0xb5e>
   19d02:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19d04:	f8c8 6000 	str.w	r6, [r8]
   19d08:	3301      	adds	r3, #1
   19d0a:	443c      	add	r4, r7
   19d0c:	2b07      	cmp	r3, #7
   19d0e:	9427      	str	r4, [sp, #156]	; 0x9c
   19d10:	f8c8 7004 	str.w	r7, [r8, #4]
   19d14:	9326      	str	r3, [sp, #152]	; 0x98
   19d16:	f300 831f 	bgt.w	1a358 <_svfprintf_r+0x1198>
   19d1a:	f108 0808 	add.w	r8, r8, #8
   19d1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19d20:	2f00      	cmp	r7, #0
   19d22:	bfa8      	it	ge
   19d24:	1bdb      	subge	r3, r3, r7
   19d26:	2b00      	cmp	r3, #0
   19d28:	461f      	mov	r7, r3
   19d2a:	f340 80d6 	ble.w	19eda <_svfprintf_r+0xd1a>
   19d2e:	2f10      	cmp	r7, #16
   19d30:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19d32:	4d31      	ldr	r5, [pc, #196]	; (19df8 <_svfprintf_r+0xc38>)
   19d34:	f340 81ed 	ble.w	1a112 <_svfprintf_r+0xf52>
   19d38:	4642      	mov	r2, r8
   19d3a:	4621      	mov	r1, r4
   19d3c:	46b0      	mov	r8, r6
   19d3e:	f04f 0b10 	mov.w	fp, #16
   19d42:	462e      	mov	r6, r5
   19d44:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   19d46:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   19d48:	e004      	b.n	19d54 <_svfprintf_r+0xb94>
   19d4a:	3208      	adds	r2, #8
   19d4c:	3f10      	subs	r7, #16
   19d4e:	2f10      	cmp	r7, #16
   19d50:	f340 81db 	ble.w	1a10a <_svfprintf_r+0xf4a>
   19d54:	3301      	adds	r3, #1
   19d56:	3110      	adds	r1, #16
   19d58:	2b07      	cmp	r3, #7
   19d5a:	9127      	str	r1, [sp, #156]	; 0x9c
   19d5c:	9326      	str	r3, [sp, #152]	; 0x98
   19d5e:	e882 0840 	stmia.w	r2, {r6, fp}
   19d62:	ddf2      	ble.n	19d4a <_svfprintf_r+0xb8a>
   19d64:	aa25      	add	r2, sp, #148	; 0x94
   19d66:	4629      	mov	r1, r5
   19d68:	4620      	mov	r0, r4
   19d6a:	f004 fddb 	bl	1e924 <__ssprint_r>
   19d6e:	2800      	cmp	r0, #0
   19d70:	f47f aaf8 	bne.w	19364 <_svfprintf_r+0x1a4>
   19d74:	9927      	ldr	r1, [sp, #156]	; 0x9c
   19d76:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19d78:	464a      	mov	r2, r9
   19d7a:	e7e7      	b.n	19d4c <_svfprintf_r+0xb8c>
   19d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19d7e:	930e      	str	r3, [sp, #56]	; 0x38
   19d80:	464e      	mov	r6, r9
   19d82:	f7ff bb2d 	b.w	193e0 <_svfprintf_r+0x220>
   19d86:	2d00      	cmp	r5, #0
   19d88:	bf08      	it	eq
   19d8a:	2c0a      	cmpeq	r4, #10
   19d8c:	f0c0 808f 	bcc.w	19eae <_svfprintf_r+0xcee>
   19d90:	464e      	mov	r6, r9
   19d92:	4620      	mov	r0, r4
   19d94:	4629      	mov	r1, r5
   19d96:	220a      	movs	r2, #10
   19d98:	2300      	movs	r3, #0
   19d9a:	f7fc f9bd 	bl	16118 <__aeabi_uldivmod>
   19d9e:	3230      	adds	r2, #48	; 0x30
   19da0:	f806 2d01 	strb.w	r2, [r6, #-1]!
   19da4:	4620      	mov	r0, r4
   19da6:	4629      	mov	r1, r5
   19da8:	2300      	movs	r3, #0
   19daa:	220a      	movs	r2, #10
   19dac:	f7fc f9b4 	bl	16118 <__aeabi_uldivmod>
   19db0:	4604      	mov	r4, r0
   19db2:	460d      	mov	r5, r1
   19db4:	ea54 0305 	orrs.w	r3, r4, r5
   19db8:	d1eb      	bne.n	19d92 <_svfprintf_r+0xbd2>
   19dba:	eba9 0306 	sub.w	r3, r9, r6
   19dbe:	930e      	str	r3, [sp, #56]	; 0x38
   19dc0:	f7ff bb0e 	b.w	193e0 <_svfprintf_r+0x220>
   19dc4:	aa25      	add	r2, sp, #148	; 0x94
   19dc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19dc8:	980c      	ldr	r0, [sp, #48]	; 0x30
   19dca:	f004 fdab 	bl	1e924 <__ssprint_r>
   19dce:	2800      	cmp	r0, #0
   19dd0:	f47f aac8 	bne.w	19364 <_svfprintf_r+0x1a4>
   19dd4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   19dd8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   19dda:	46c8      	mov	r8, r9
   19ddc:	f7ff bb5e 	b.w	1949c <_svfprintf_r+0x2dc>
   19de0:	1e5e      	subs	r6, r3, #1
   19de2:	2e00      	cmp	r6, #0
   19de4:	f77f af0a 	ble.w	19bfc <_svfprintf_r+0xa3c>
   19de8:	2e10      	cmp	r6, #16
   19dea:	4d03      	ldr	r5, [pc, #12]	; (19df8 <_svfprintf_r+0xc38>)
   19dec:	dd22      	ble.n	19e34 <_svfprintf_r+0xc74>
   19dee:	4622      	mov	r2, r4
   19df0:	f04f 0b10 	mov.w	fp, #16
   19df4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   19df6:	e006      	b.n	19e06 <_svfprintf_r+0xc46>
   19df8:	0003ebc0 	.word	0x0003ebc0
   19dfc:	3e10      	subs	r6, #16
   19dfe:	2e10      	cmp	r6, #16
   19e00:	f108 0808 	add.w	r8, r8, #8
   19e04:	dd15      	ble.n	19e32 <_svfprintf_r+0xc72>
   19e06:	3701      	adds	r7, #1
   19e08:	3210      	adds	r2, #16
   19e0a:	2f07      	cmp	r7, #7
   19e0c:	9227      	str	r2, [sp, #156]	; 0x9c
   19e0e:	9726      	str	r7, [sp, #152]	; 0x98
   19e10:	e888 0820 	stmia.w	r8, {r5, fp}
   19e14:	ddf2      	ble.n	19dfc <_svfprintf_r+0xc3c>
   19e16:	aa25      	add	r2, sp, #148	; 0x94
   19e18:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19e1a:	4620      	mov	r0, r4
   19e1c:	f004 fd82 	bl	1e924 <__ssprint_r>
   19e20:	2800      	cmp	r0, #0
   19e22:	f47f aa9f 	bne.w	19364 <_svfprintf_r+0x1a4>
   19e26:	3e10      	subs	r6, #16
   19e28:	2e10      	cmp	r6, #16
   19e2a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   19e2c:	9f26      	ldr	r7, [sp, #152]	; 0x98
   19e2e:	46c8      	mov	r8, r9
   19e30:	dce9      	bgt.n	19e06 <_svfprintf_r+0xc46>
   19e32:	4614      	mov	r4, r2
   19e34:	3701      	adds	r7, #1
   19e36:	4434      	add	r4, r6
   19e38:	2f07      	cmp	r7, #7
   19e3a:	9427      	str	r4, [sp, #156]	; 0x9c
   19e3c:	9726      	str	r7, [sp, #152]	; 0x98
   19e3e:	e888 0060 	stmia.w	r8, {r5, r6}
   19e42:	f77f aed9 	ble.w	19bf8 <_svfprintf_r+0xa38>
   19e46:	aa25      	add	r2, sp, #148	; 0x94
   19e48:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19e4a:	980c      	ldr	r0, [sp, #48]	; 0x30
   19e4c:	f004 fd6a 	bl	1e924 <__ssprint_r>
   19e50:	2800      	cmp	r0, #0
   19e52:	f47f aa87 	bne.w	19364 <_svfprintf_r+0x1a4>
   19e56:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   19e58:	9f26      	ldr	r7, [sp, #152]	; 0x98
   19e5a:	46c8      	mov	r8, r9
   19e5c:	e6ce      	b.n	19bfc <_svfprintf_r+0xa3c>
   19e5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   19e60:	6814      	ldr	r4, [r2, #0]
   19e62:	4613      	mov	r3, r2
   19e64:	3304      	adds	r3, #4
   19e66:	17e5      	asrs	r5, r4, #31
   19e68:	930f      	str	r3, [sp, #60]	; 0x3c
   19e6a:	4622      	mov	r2, r4
   19e6c:	462b      	mov	r3, r5
   19e6e:	e4fa      	b.n	19866 <_svfprintf_r+0x6a6>
   19e70:	3204      	adds	r2, #4
   19e72:	681c      	ldr	r4, [r3, #0]
   19e74:	920f      	str	r2, [sp, #60]	; 0x3c
   19e76:	2301      	movs	r3, #1
   19e78:	2500      	movs	r5, #0
   19e7a:	f7ff ba94 	b.w	193a6 <_svfprintf_r+0x1e6>
   19e7e:	681c      	ldr	r4, [r3, #0]
   19e80:	3304      	adds	r3, #4
   19e82:	930f      	str	r3, [sp, #60]	; 0x3c
   19e84:	2500      	movs	r5, #0
   19e86:	e421      	b.n	196cc <_svfprintf_r+0x50c>
   19e88:	990f      	ldr	r1, [sp, #60]	; 0x3c
   19e8a:	460a      	mov	r2, r1
   19e8c:	3204      	adds	r2, #4
   19e8e:	680c      	ldr	r4, [r1, #0]
   19e90:	920f      	str	r2, [sp, #60]	; 0x3c
   19e92:	2500      	movs	r5, #0
   19e94:	f7ff ba87 	b.w	193a6 <_svfprintf_r+0x1e6>
   19e98:	4614      	mov	r4, r2
   19e9a:	3301      	adds	r3, #1
   19e9c:	4434      	add	r4, r6
   19e9e:	2b07      	cmp	r3, #7
   19ea0:	9427      	str	r4, [sp, #156]	; 0x9c
   19ea2:	9326      	str	r3, [sp, #152]	; 0x98
   19ea4:	e888 0060 	stmia.w	r8, {r5, r6}
   19ea8:	f77f ab68 	ble.w	1957c <_svfprintf_r+0x3bc>
   19eac:	e6b3      	b.n	19c16 <_svfprintf_r+0xa56>
   19eae:	f8dd b01c 	ldr.w	fp, [sp, #28]
   19eb2:	f8cd b01c 	str.w	fp, [sp, #28]
   19eb6:	ae42      	add	r6, sp, #264	; 0x108
   19eb8:	3430      	adds	r4, #48	; 0x30
   19eba:	2301      	movs	r3, #1
   19ebc:	f806 4d41 	strb.w	r4, [r6, #-65]!
   19ec0:	930e      	str	r3, [sp, #56]	; 0x38
   19ec2:	f7ff ba8d 	b.w	193e0 <_svfprintf_r+0x220>
   19ec6:	aa25      	add	r2, sp, #148	; 0x94
   19ec8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19eca:	980c      	ldr	r0, [sp, #48]	; 0x30
   19ecc:	f004 fd2a 	bl	1e924 <__ssprint_r>
   19ed0:	2800      	cmp	r0, #0
   19ed2:	f47f aa47 	bne.w	19364 <_svfprintf_r+0x1a4>
   19ed6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   19ed8:	46c8      	mov	r8, r9
   19eda:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   19edc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19ede:	429a      	cmp	r2, r3
   19ee0:	db44      	blt.n	19f6c <_svfprintf_r+0xdac>
   19ee2:	9b07      	ldr	r3, [sp, #28]
   19ee4:	07d9      	lsls	r1, r3, #31
   19ee6:	d441      	bmi.n	19f6c <_svfprintf_r+0xdac>
   19ee8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19eea:	9812      	ldr	r0, [sp, #72]	; 0x48
   19eec:	1a9a      	subs	r2, r3, r2
   19eee:	1a1d      	subs	r5, r3, r0
   19ef0:	4295      	cmp	r5, r2
   19ef2:	bfa8      	it	ge
   19ef4:	4615      	movge	r5, r2
   19ef6:	2d00      	cmp	r5, #0
   19ef8:	dd0e      	ble.n	19f18 <_svfprintf_r+0xd58>
   19efa:	9926      	ldr	r1, [sp, #152]	; 0x98
   19efc:	f8c8 5004 	str.w	r5, [r8, #4]
   19f00:	3101      	adds	r1, #1
   19f02:	4406      	add	r6, r0
   19f04:	442c      	add	r4, r5
   19f06:	2907      	cmp	r1, #7
   19f08:	f8c8 6000 	str.w	r6, [r8]
   19f0c:	9427      	str	r4, [sp, #156]	; 0x9c
   19f0e:	9126      	str	r1, [sp, #152]	; 0x98
   19f10:	f300 823b 	bgt.w	1a38a <_svfprintf_r+0x11ca>
   19f14:	f108 0808 	add.w	r8, r8, #8
   19f18:	2d00      	cmp	r5, #0
   19f1a:	bfac      	ite	ge
   19f1c:	1b56      	subge	r6, r2, r5
   19f1e:	4616      	movlt	r6, r2
   19f20:	2e00      	cmp	r6, #0
   19f22:	f77f ab2d 	ble.w	19580 <_svfprintf_r+0x3c0>
   19f26:	2e10      	cmp	r6, #16
   19f28:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19f2a:	4db0      	ldr	r5, [pc, #704]	; (1a1ec <_svfprintf_r+0x102c>)
   19f2c:	ddb5      	ble.n	19e9a <_svfprintf_r+0xcda>
   19f2e:	4622      	mov	r2, r4
   19f30:	2710      	movs	r7, #16
   19f32:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   19f36:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   19f38:	e004      	b.n	19f44 <_svfprintf_r+0xd84>
   19f3a:	f108 0808 	add.w	r8, r8, #8
   19f3e:	3e10      	subs	r6, #16
   19f40:	2e10      	cmp	r6, #16
   19f42:	dda9      	ble.n	19e98 <_svfprintf_r+0xcd8>
   19f44:	3301      	adds	r3, #1
   19f46:	3210      	adds	r2, #16
   19f48:	2b07      	cmp	r3, #7
   19f4a:	9227      	str	r2, [sp, #156]	; 0x9c
   19f4c:	9326      	str	r3, [sp, #152]	; 0x98
   19f4e:	e888 00a0 	stmia.w	r8, {r5, r7}
   19f52:	ddf2      	ble.n	19f3a <_svfprintf_r+0xd7a>
   19f54:	aa25      	add	r2, sp, #148	; 0x94
   19f56:	4621      	mov	r1, r4
   19f58:	4658      	mov	r0, fp
   19f5a:	f004 fce3 	bl	1e924 <__ssprint_r>
   19f5e:	2800      	cmp	r0, #0
   19f60:	f47f aa00 	bne.w	19364 <_svfprintf_r+0x1a4>
   19f64:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   19f66:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19f68:	46c8      	mov	r8, r9
   19f6a:	e7e8      	b.n	19f3e <_svfprintf_r+0xd7e>
   19f6c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19f6e:	9819      	ldr	r0, [sp, #100]	; 0x64
   19f70:	991a      	ldr	r1, [sp, #104]	; 0x68
   19f72:	f8c8 1000 	str.w	r1, [r8]
   19f76:	3301      	adds	r3, #1
   19f78:	4404      	add	r4, r0
   19f7a:	2b07      	cmp	r3, #7
   19f7c:	9427      	str	r4, [sp, #156]	; 0x9c
   19f7e:	f8c8 0004 	str.w	r0, [r8, #4]
   19f82:	9326      	str	r3, [sp, #152]	; 0x98
   19f84:	f300 81f5 	bgt.w	1a372 <_svfprintf_r+0x11b2>
   19f88:	f108 0808 	add.w	r8, r8, #8
   19f8c:	e7ac      	b.n	19ee8 <_svfprintf_r+0xd28>
   19f8e:	9b07      	ldr	r3, [sp, #28]
   19f90:	07da      	lsls	r2, r3, #31
   19f92:	f53f adfe 	bmi.w	19b92 <_svfprintf_r+0x9d2>
   19f96:	3701      	adds	r7, #1
   19f98:	3401      	adds	r4, #1
   19f9a:	2301      	movs	r3, #1
   19f9c:	2f07      	cmp	r7, #7
   19f9e:	9427      	str	r4, [sp, #156]	; 0x9c
   19fa0:	9726      	str	r7, [sp, #152]	; 0x98
   19fa2:	f8c8 6000 	str.w	r6, [r8]
   19fa6:	f8c8 3004 	str.w	r3, [r8, #4]
   19faa:	f77f ae25 	ble.w	19bf8 <_svfprintf_r+0xa38>
   19fae:	e74a      	b.n	19e46 <_svfprintf_r+0xc86>
   19fb0:	aa25      	add	r2, sp, #148	; 0x94
   19fb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19fb4:	980c      	ldr	r0, [sp, #48]	; 0x30
   19fb6:	f004 fcb5 	bl	1e924 <__ssprint_r>
   19fba:	2800      	cmp	r0, #0
   19fbc:	f47f a9d2 	bne.w	19364 <_svfprintf_r+0x1a4>
   19fc0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   19fc2:	9f26      	ldr	r7, [sp, #152]	; 0x98
   19fc4:	46c8      	mov	r8, r9
   19fc6:	e5f2      	b.n	19bae <_svfprintf_r+0x9ee>
   19fc8:	aa25      	add	r2, sp, #148	; 0x94
   19fca:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19fcc:	980c      	ldr	r0, [sp, #48]	; 0x30
   19fce:	f004 fca9 	bl	1e924 <__ssprint_r>
   19fd2:	2800      	cmp	r0, #0
   19fd4:	f47f a9c6 	bne.w	19364 <_svfprintf_r+0x1a4>
   19fd8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   19fda:	9f26      	ldr	r7, [sp, #152]	; 0x98
   19fdc:	46c8      	mov	r8, r9
   19fde:	e5f5      	b.n	19bcc <_svfprintf_r+0xa0c>
   19fe0:	464e      	mov	r6, r9
   19fe2:	f7ff b9fd 	b.w	193e0 <_svfprintf_r+0x220>
   19fe6:	aa25      	add	r2, sp, #148	; 0x94
   19fe8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19fea:	980c      	ldr	r0, [sp, #48]	; 0x30
   19fec:	f004 fc9a 	bl	1e924 <__ssprint_r>
   19ff0:	2800      	cmp	r0, #0
   19ff2:	f47f a9b7 	bne.w	19364 <_svfprintf_r+0x1a4>
   19ff6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   19ff8:	46c8      	mov	r8, r9
   19ffa:	f7ff ba72 	b.w	194e2 <_svfprintf_r+0x322>
   19ffe:	9c15      	ldr	r4, [sp, #84]	; 0x54
   1a000:	4622      	mov	r2, r4
   1a002:	4620      	mov	r0, r4
   1a004:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1a006:	4623      	mov	r3, r4
   1a008:	4621      	mov	r1, r4
   1a00a:	f004 fd9b 	bl	1eb44 <__aeabi_dcmpun>
   1a00e:	2800      	cmp	r0, #0
   1a010:	f040 8286 	bne.w	1a520 <_svfprintf_r+0x1360>
   1a014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a016:	3301      	adds	r3, #1
   1a018:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a01a:	f023 0320 	bic.w	r3, r3, #32
   1a01e:	930e      	str	r3, [sp, #56]	; 0x38
   1a020:	f000 81e2 	beq.w	1a3e8 <_svfprintf_r+0x1228>
   1a024:	2b47      	cmp	r3, #71	; 0x47
   1a026:	f000 811e 	beq.w	1a266 <_svfprintf_r+0x10a6>
   1a02a:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   1a02e:	9307      	str	r3, [sp, #28]
   1a030:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1a032:	1e1f      	subs	r7, r3, #0
   1a034:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1a036:	9308      	str	r3, [sp, #32]
   1a038:	bfbb      	ittet	lt
   1a03a:	463b      	movlt	r3, r7
   1a03c:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   1a040:	2300      	movge	r3, #0
   1a042:	232d      	movlt	r3, #45	; 0x2d
   1a044:	9310      	str	r3, [sp, #64]	; 0x40
   1a046:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a048:	2b66      	cmp	r3, #102	; 0x66
   1a04a:	f000 81bb 	beq.w	1a3c4 <_svfprintf_r+0x1204>
   1a04e:	2b46      	cmp	r3, #70	; 0x46
   1a050:	f000 80df 	beq.w	1a212 <_svfprintf_r+0x1052>
   1a054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a056:	9a08      	ldr	r2, [sp, #32]
   1a058:	2b45      	cmp	r3, #69	; 0x45
   1a05a:	bf0c      	ite	eq
   1a05c:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   1a05e:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   1a060:	a823      	add	r0, sp, #140	; 0x8c
   1a062:	a920      	add	r1, sp, #128	; 0x80
   1a064:	bf08      	it	eq
   1a066:	1c5d      	addeq	r5, r3, #1
   1a068:	9004      	str	r0, [sp, #16]
   1a06a:	9103      	str	r1, [sp, #12]
   1a06c:	a81f      	add	r0, sp, #124	; 0x7c
   1a06e:	2102      	movs	r1, #2
   1a070:	463b      	mov	r3, r7
   1a072:	9002      	str	r0, [sp, #8]
   1a074:	9501      	str	r5, [sp, #4]
   1a076:	9100      	str	r1, [sp, #0]
   1a078:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a07a:	f002 feb5 	bl	1cde8 <_dtoa_r>
   1a07e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a080:	2b67      	cmp	r3, #103	; 0x67
   1a082:	4606      	mov	r6, r0
   1a084:	f040 81e0 	bne.w	1a448 <_svfprintf_r+0x1288>
   1a088:	f01b 0f01 	tst.w	fp, #1
   1a08c:	f000 8246 	beq.w	1a51c <_svfprintf_r+0x135c>
   1a090:	1974      	adds	r4, r6, r5
   1a092:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1a094:	9808      	ldr	r0, [sp, #32]
   1a096:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1a098:	4639      	mov	r1, r7
   1a09a:	f7fb fc79 	bl	15990 <__aeabi_dcmpeq>
   1a09e:	2800      	cmp	r0, #0
   1a0a0:	f040 8165 	bne.w	1a36e <_svfprintf_r+0x11ae>
   1a0a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1a0a6:	42a3      	cmp	r3, r4
   1a0a8:	d206      	bcs.n	1a0b8 <_svfprintf_r+0xef8>
   1a0aa:	2130      	movs	r1, #48	; 0x30
   1a0ac:	1c5a      	adds	r2, r3, #1
   1a0ae:	9223      	str	r2, [sp, #140]	; 0x8c
   1a0b0:	7019      	strb	r1, [r3, #0]
   1a0b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1a0b4:	429c      	cmp	r4, r3
   1a0b6:	d8f9      	bhi.n	1a0ac <_svfprintf_r+0xeec>
   1a0b8:	1b9b      	subs	r3, r3, r6
   1a0ba:	9313      	str	r3, [sp, #76]	; 0x4c
   1a0bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a0be:	2b47      	cmp	r3, #71	; 0x47
   1a0c0:	f000 80e9 	beq.w	1a296 <_svfprintf_r+0x10d6>
   1a0c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a0c6:	2b65      	cmp	r3, #101	; 0x65
   1a0c8:	f340 81cd 	ble.w	1a466 <_svfprintf_r+0x12a6>
   1a0cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a0ce:	2b66      	cmp	r3, #102	; 0x66
   1a0d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1a0d2:	9312      	str	r3, [sp, #72]	; 0x48
   1a0d4:	f000 819e 	beq.w	1a414 <_svfprintf_r+0x1254>
   1a0d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1a0da:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1a0dc:	4619      	mov	r1, r3
   1a0de:	4291      	cmp	r1, r2
   1a0e0:	f300 818a 	bgt.w	1a3f8 <_svfprintf_r+0x1238>
   1a0e4:	f01b 0f01 	tst.w	fp, #1
   1a0e8:	f040 8213 	bne.w	1a512 <_svfprintf_r+0x1352>
   1a0ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1a0f0:	9308      	str	r3, [sp, #32]
   1a0f2:	2367      	movs	r3, #103	; 0x67
   1a0f4:	920e      	str	r2, [sp, #56]	; 0x38
   1a0f6:	9311      	str	r3, [sp, #68]	; 0x44
   1a0f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1a0fa:	2b00      	cmp	r3, #0
   1a0fc:	f040 80c4 	bne.w	1a288 <_svfprintf_r+0x10c8>
   1a100:	930a      	str	r3, [sp, #40]	; 0x28
   1a102:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   1a106:	f7ff b973 	b.w	193f0 <_svfprintf_r+0x230>
   1a10a:	4635      	mov	r5, r6
   1a10c:	460c      	mov	r4, r1
   1a10e:	4646      	mov	r6, r8
   1a110:	4690      	mov	r8, r2
   1a112:	3301      	adds	r3, #1
   1a114:	443c      	add	r4, r7
   1a116:	2b07      	cmp	r3, #7
   1a118:	9427      	str	r4, [sp, #156]	; 0x9c
   1a11a:	9326      	str	r3, [sp, #152]	; 0x98
   1a11c:	e888 00a0 	stmia.w	r8, {r5, r7}
   1a120:	f73f aed1 	bgt.w	19ec6 <_svfprintf_r+0xd06>
   1a124:	f108 0808 	add.w	r8, r8, #8
   1a128:	e6d7      	b.n	19eda <_svfprintf_r+0xd1a>
   1a12a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1a12c:	6813      	ldr	r3, [r2, #0]
   1a12e:	3204      	adds	r2, #4
   1a130:	920f      	str	r2, [sp, #60]	; 0x3c
   1a132:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a134:	601a      	str	r2, [r3, #0]
   1a136:	f7ff b86a 	b.w	1920e <_svfprintf_r+0x4e>
   1a13a:	aa25      	add	r2, sp, #148	; 0x94
   1a13c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a13e:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a140:	f004 fbf0 	bl	1e924 <__ssprint_r>
   1a144:	2800      	cmp	r0, #0
   1a146:	f47f a90d 	bne.w	19364 <_svfprintf_r+0x1a4>
   1a14a:	46c8      	mov	r8, r9
   1a14c:	e48d      	b.n	19a6a <_svfprintf_r+0x8aa>
   1a14e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1a150:	4a27      	ldr	r2, [pc, #156]	; (1a1f0 <_svfprintf_r+0x1030>)
   1a152:	f8c8 2000 	str.w	r2, [r8]
   1a156:	3301      	adds	r3, #1
   1a158:	3401      	adds	r4, #1
   1a15a:	2201      	movs	r2, #1
   1a15c:	2b07      	cmp	r3, #7
   1a15e:	9427      	str	r4, [sp, #156]	; 0x9c
   1a160:	9326      	str	r3, [sp, #152]	; 0x98
   1a162:	f8c8 2004 	str.w	r2, [r8, #4]
   1a166:	dc72      	bgt.n	1a24e <_svfprintf_r+0x108e>
   1a168:	f108 0808 	add.w	r8, r8, #8
   1a16c:	b929      	cbnz	r1, 1a17a <_svfprintf_r+0xfba>
   1a16e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1a170:	b91b      	cbnz	r3, 1a17a <_svfprintf_r+0xfba>
   1a172:	9b07      	ldr	r3, [sp, #28]
   1a174:	07d8      	lsls	r0, r3, #31
   1a176:	f57f aa03 	bpl.w	19580 <_svfprintf_r+0x3c0>
   1a17a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1a17c:	9819      	ldr	r0, [sp, #100]	; 0x64
   1a17e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1a180:	f8c8 2000 	str.w	r2, [r8]
   1a184:	3301      	adds	r3, #1
   1a186:	4602      	mov	r2, r0
   1a188:	4422      	add	r2, r4
   1a18a:	2b07      	cmp	r3, #7
   1a18c:	9227      	str	r2, [sp, #156]	; 0x9c
   1a18e:	f8c8 0004 	str.w	r0, [r8, #4]
   1a192:	9326      	str	r3, [sp, #152]	; 0x98
   1a194:	f300 818d 	bgt.w	1a4b2 <_svfprintf_r+0x12f2>
   1a198:	f108 0808 	add.w	r8, r8, #8
   1a19c:	2900      	cmp	r1, #0
   1a19e:	f2c0 8165 	blt.w	1a46c <_svfprintf_r+0x12ac>
   1a1a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1a1a4:	f8c8 6000 	str.w	r6, [r8]
   1a1a8:	3301      	adds	r3, #1
   1a1aa:	188c      	adds	r4, r1, r2
   1a1ac:	2b07      	cmp	r3, #7
   1a1ae:	9427      	str	r4, [sp, #156]	; 0x9c
   1a1b0:	9326      	str	r3, [sp, #152]	; 0x98
   1a1b2:	f8c8 1004 	str.w	r1, [r8, #4]
   1a1b6:	f77f a9e1 	ble.w	1957c <_svfprintf_r+0x3bc>
   1a1ba:	e52c      	b.n	19c16 <_svfprintf_r+0xa56>
   1a1bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1a1be:	9909      	ldr	r1, [sp, #36]	; 0x24
   1a1c0:	6813      	ldr	r3, [r2, #0]
   1a1c2:	17cd      	asrs	r5, r1, #31
   1a1c4:	4608      	mov	r0, r1
   1a1c6:	3204      	adds	r2, #4
   1a1c8:	4629      	mov	r1, r5
   1a1ca:	920f      	str	r2, [sp, #60]	; 0x3c
   1a1cc:	e9c3 0100 	strd	r0, r1, [r3]
   1a1d0:	f7ff b81d 	b.w	1920e <_svfprintf_r+0x4e>
   1a1d4:	aa25      	add	r2, sp, #148	; 0x94
   1a1d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a1d8:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a1da:	f004 fba3 	bl	1e924 <__ssprint_r>
   1a1de:	2800      	cmp	r0, #0
   1a1e0:	f47f a8c0 	bne.w	19364 <_svfprintf_r+0x1a4>
   1a1e4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   1a1e6:	46c8      	mov	r8, r9
   1a1e8:	e458      	b.n	19a9c <_svfprintf_r+0x8dc>
   1a1ea:	bf00      	nop
   1a1ec:	0003ebc0 	.word	0x0003ebc0
   1a1f0:	0003b9fc 	.word	0x0003b9fc
   1a1f4:	2140      	movs	r1, #64	; 0x40
   1a1f6:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a1f8:	f7fd fc46 	bl	17a88 <_malloc_r>
   1a1fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1a1fe:	6010      	str	r0, [r2, #0]
   1a200:	6110      	str	r0, [r2, #16]
   1a202:	2800      	cmp	r0, #0
   1a204:	f000 81f2 	beq.w	1a5ec <_svfprintf_r+0x142c>
   1a208:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1a20a:	2340      	movs	r3, #64	; 0x40
   1a20c:	6153      	str	r3, [r2, #20]
   1a20e:	f7fe bfee 	b.w	191ee <_svfprintf_r+0x2e>
   1a212:	a823      	add	r0, sp, #140	; 0x8c
   1a214:	a920      	add	r1, sp, #128	; 0x80
   1a216:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1a218:	9004      	str	r0, [sp, #16]
   1a21a:	9103      	str	r1, [sp, #12]
   1a21c:	a81f      	add	r0, sp, #124	; 0x7c
   1a21e:	2103      	movs	r1, #3
   1a220:	9002      	str	r0, [sp, #8]
   1a222:	9a08      	ldr	r2, [sp, #32]
   1a224:	9401      	str	r4, [sp, #4]
   1a226:	463b      	mov	r3, r7
   1a228:	9100      	str	r1, [sp, #0]
   1a22a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a22c:	f002 fddc 	bl	1cde8 <_dtoa_r>
   1a230:	4625      	mov	r5, r4
   1a232:	4606      	mov	r6, r0
   1a234:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a236:	2b46      	cmp	r3, #70	; 0x46
   1a238:	eb06 0405 	add.w	r4, r6, r5
   1a23c:	f47f af29 	bne.w	1a092 <_svfprintf_r+0xed2>
   1a240:	7833      	ldrb	r3, [r6, #0]
   1a242:	2b30      	cmp	r3, #48	; 0x30
   1a244:	f000 8178 	beq.w	1a538 <_svfprintf_r+0x1378>
   1a248:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   1a24a:	442c      	add	r4, r5
   1a24c:	e721      	b.n	1a092 <_svfprintf_r+0xed2>
   1a24e:	aa25      	add	r2, sp, #148	; 0x94
   1a250:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a252:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a254:	f004 fb66 	bl	1e924 <__ssprint_r>
   1a258:	2800      	cmp	r0, #0
   1a25a:	f47f a883 	bne.w	19364 <_svfprintf_r+0x1a4>
   1a25e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1a260:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   1a262:	46c8      	mov	r8, r9
   1a264:	e782      	b.n	1a16c <_svfprintf_r+0xfac>
   1a266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a268:	2b00      	cmp	r3, #0
   1a26a:	bf08      	it	eq
   1a26c:	2301      	moveq	r3, #1
   1a26e:	930a      	str	r3, [sp, #40]	; 0x28
   1a270:	e6db      	b.n	1a02a <_svfprintf_r+0xe6a>
   1a272:	4630      	mov	r0, r6
   1a274:	940a      	str	r4, [sp, #40]	; 0x28
   1a276:	f7fe fee3 	bl	19040 <strlen>
   1a27a:	950f      	str	r5, [sp, #60]	; 0x3c
   1a27c:	900e      	str	r0, [sp, #56]	; 0x38
   1a27e:	f8cd b01c 	str.w	fp, [sp, #28]
   1a282:	4603      	mov	r3, r0
   1a284:	f7ff b9f9 	b.w	1967a <_svfprintf_r+0x4ba>
   1a288:	272d      	movs	r7, #45	; 0x2d
   1a28a:	2300      	movs	r3, #0
   1a28c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   1a290:	930a      	str	r3, [sp, #40]	; 0x28
   1a292:	f7ff b8ae 	b.w	193f2 <_svfprintf_r+0x232>
   1a296:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1a298:	9312      	str	r3, [sp, #72]	; 0x48
   1a29a:	461a      	mov	r2, r3
   1a29c:	3303      	adds	r3, #3
   1a29e:	db04      	blt.n	1a2aa <_svfprintf_r+0x10ea>
   1a2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a2a2:	4619      	mov	r1, r3
   1a2a4:	4291      	cmp	r1, r2
   1a2a6:	f6bf af17 	bge.w	1a0d8 <_svfprintf_r+0xf18>
   1a2aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a2ac:	3b02      	subs	r3, #2
   1a2ae:	9311      	str	r3, [sp, #68]	; 0x44
   1a2b0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   1a2b4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   1a2b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a2ba:	3b01      	subs	r3, #1
   1a2bc:	2b00      	cmp	r3, #0
   1a2be:	931f      	str	r3, [sp, #124]	; 0x7c
   1a2c0:	bfbd      	ittte	lt
   1a2c2:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   1a2c4:	f1c3 0301 	rsblt	r3, r3, #1
   1a2c8:	222d      	movlt	r2, #45	; 0x2d
   1a2ca:	222b      	movge	r2, #43	; 0x2b
   1a2cc:	2b09      	cmp	r3, #9
   1a2ce:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   1a2d2:	f340 8116 	ble.w	1a502 <_svfprintf_r+0x1342>
   1a2d6:	f10d 0493 	add.w	r4, sp, #147	; 0x93
   1a2da:	4620      	mov	r0, r4
   1a2dc:	4dab      	ldr	r5, [pc, #684]	; (1a58c <_svfprintf_r+0x13cc>)
   1a2de:	e000      	b.n	1a2e2 <_svfprintf_r+0x1122>
   1a2e0:	4610      	mov	r0, r2
   1a2e2:	fb85 1203 	smull	r1, r2, r5, r3
   1a2e6:	17d9      	asrs	r1, r3, #31
   1a2e8:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   1a2ec:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1a2f0:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   1a2f4:	3230      	adds	r2, #48	; 0x30
   1a2f6:	2909      	cmp	r1, #9
   1a2f8:	f800 2c01 	strb.w	r2, [r0, #-1]
   1a2fc:	460b      	mov	r3, r1
   1a2fe:	f100 32ff 	add.w	r2, r0, #4294967295
   1a302:	dced      	bgt.n	1a2e0 <_svfprintf_r+0x1120>
   1a304:	3330      	adds	r3, #48	; 0x30
   1a306:	3802      	subs	r0, #2
   1a308:	b2d9      	uxtb	r1, r3
   1a30a:	4284      	cmp	r4, r0
   1a30c:	f802 1c01 	strb.w	r1, [r2, #-1]
   1a310:	f240 8165 	bls.w	1a5de <_svfprintf_r+0x141e>
   1a314:	f10d 0086 	add.w	r0, sp, #134	; 0x86
   1a318:	4613      	mov	r3, r2
   1a31a:	e001      	b.n	1a320 <_svfprintf_r+0x1160>
   1a31c:	f813 1b01 	ldrb.w	r1, [r3], #1
   1a320:	f800 1b01 	strb.w	r1, [r0], #1
   1a324:	42a3      	cmp	r3, r4
   1a326:	d1f9      	bne.n	1a31c <_svfprintf_r+0x115c>
   1a328:	3301      	adds	r3, #1
   1a32a:	1a9b      	subs	r3, r3, r2
   1a32c:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   1a330:	4413      	add	r3, r2
   1a332:	aa21      	add	r2, sp, #132	; 0x84
   1a334:	1a9b      	subs	r3, r3, r2
   1a336:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a338:	931b      	str	r3, [sp, #108]	; 0x6c
   1a33a:	2a01      	cmp	r2, #1
   1a33c:	4413      	add	r3, r2
   1a33e:	930e      	str	r3, [sp, #56]	; 0x38
   1a340:	f340 8119 	ble.w	1a576 <_svfprintf_r+0x13b6>
   1a344:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a346:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1a348:	4413      	add	r3, r2
   1a34a:	930e      	str	r3, [sp, #56]	; 0x38
   1a34c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1a350:	9308      	str	r3, [sp, #32]
   1a352:	2300      	movs	r3, #0
   1a354:	9312      	str	r3, [sp, #72]	; 0x48
   1a356:	e6cf      	b.n	1a0f8 <_svfprintf_r+0xf38>
   1a358:	aa25      	add	r2, sp, #148	; 0x94
   1a35a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a35c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a35e:	f004 fae1 	bl	1e924 <__ssprint_r>
   1a362:	2800      	cmp	r0, #0
   1a364:	f47e affe 	bne.w	19364 <_svfprintf_r+0x1a4>
   1a368:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   1a36a:	46c8      	mov	r8, r9
   1a36c:	e4d7      	b.n	19d1e <_svfprintf_r+0xb5e>
   1a36e:	4623      	mov	r3, r4
   1a370:	e6a2      	b.n	1a0b8 <_svfprintf_r+0xef8>
   1a372:	aa25      	add	r2, sp, #148	; 0x94
   1a374:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a376:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a378:	f004 fad4 	bl	1e924 <__ssprint_r>
   1a37c:	2800      	cmp	r0, #0
   1a37e:	f47e aff1 	bne.w	19364 <_svfprintf_r+0x1a4>
   1a382:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1a384:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   1a386:	46c8      	mov	r8, r9
   1a388:	e5ae      	b.n	19ee8 <_svfprintf_r+0xd28>
   1a38a:	aa25      	add	r2, sp, #148	; 0x94
   1a38c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a38e:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a390:	f004 fac8 	bl	1e924 <__ssprint_r>
   1a394:	2800      	cmp	r0, #0
   1a396:	f47e afe5 	bne.w	19364 <_svfprintf_r+0x1a4>
   1a39a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1a39c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1a39e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   1a3a0:	1a9a      	subs	r2, r3, r2
   1a3a2:	46c8      	mov	r8, r9
   1a3a4:	e5b8      	b.n	19f18 <_svfprintf_r+0xd58>
   1a3a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a3a8:	9612      	str	r6, [sp, #72]	; 0x48
   1a3aa:	2b06      	cmp	r3, #6
   1a3ac:	bf28      	it	cs
   1a3ae:	2306      	movcs	r3, #6
   1a3b0:	960a      	str	r6, [sp, #40]	; 0x28
   1a3b2:	4637      	mov	r7, r6
   1a3b4:	9308      	str	r3, [sp, #32]
   1a3b6:	950f      	str	r5, [sp, #60]	; 0x3c
   1a3b8:	f8cd b01c 	str.w	fp, [sp, #28]
   1a3bc:	930e      	str	r3, [sp, #56]	; 0x38
   1a3be:	4e74      	ldr	r6, [pc, #464]	; (1a590 <_svfprintf_r+0x13d0>)
   1a3c0:	f7ff b816 	b.w	193f0 <_svfprintf_r+0x230>
   1a3c4:	a823      	add	r0, sp, #140	; 0x8c
   1a3c6:	a920      	add	r1, sp, #128	; 0x80
   1a3c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1a3ca:	9004      	str	r0, [sp, #16]
   1a3cc:	9103      	str	r1, [sp, #12]
   1a3ce:	a81f      	add	r0, sp, #124	; 0x7c
   1a3d0:	2103      	movs	r1, #3
   1a3d2:	9002      	str	r0, [sp, #8]
   1a3d4:	9a08      	ldr	r2, [sp, #32]
   1a3d6:	9501      	str	r5, [sp, #4]
   1a3d8:	463b      	mov	r3, r7
   1a3da:	9100      	str	r1, [sp, #0]
   1a3dc:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a3de:	f002 fd03 	bl	1cde8 <_dtoa_r>
   1a3e2:	4606      	mov	r6, r0
   1a3e4:	1944      	adds	r4, r0, r5
   1a3e6:	e72b      	b.n	1a240 <_svfprintf_r+0x1080>
   1a3e8:	2306      	movs	r3, #6
   1a3ea:	930a      	str	r3, [sp, #40]	; 0x28
   1a3ec:	e61d      	b.n	1a02a <_svfprintf_r+0xe6a>
   1a3ee:	272d      	movs	r7, #45	; 0x2d
   1a3f0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   1a3f4:	f7ff bacd 	b.w	19992 <_svfprintf_r+0x7d2>
   1a3f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1a3fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1a3fc:	4413      	add	r3, r2
   1a3fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1a400:	930e      	str	r3, [sp, #56]	; 0x38
   1a402:	2a00      	cmp	r2, #0
   1a404:	f340 80b0 	ble.w	1a568 <_svfprintf_r+0x13a8>
   1a408:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1a40c:	9308      	str	r3, [sp, #32]
   1a40e:	2367      	movs	r3, #103	; 0x67
   1a410:	9311      	str	r3, [sp, #68]	; 0x44
   1a412:	e671      	b.n	1a0f8 <_svfprintf_r+0xf38>
   1a414:	2b00      	cmp	r3, #0
   1a416:	f340 80c3 	ble.w	1a5a0 <_svfprintf_r+0x13e0>
   1a41a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a41c:	2a00      	cmp	r2, #0
   1a41e:	f040 8099 	bne.w	1a554 <_svfprintf_r+0x1394>
   1a422:	f01b 0f01 	tst.w	fp, #1
   1a426:	f040 8095 	bne.w	1a554 <_svfprintf_r+0x1394>
   1a42a:	9308      	str	r3, [sp, #32]
   1a42c:	930e      	str	r3, [sp, #56]	; 0x38
   1a42e:	e663      	b.n	1a0f8 <_svfprintf_r+0xf38>
   1a430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a432:	9308      	str	r3, [sp, #32]
   1a434:	930e      	str	r3, [sp, #56]	; 0x38
   1a436:	900a      	str	r0, [sp, #40]	; 0x28
   1a438:	950f      	str	r5, [sp, #60]	; 0x3c
   1a43a:	f8cd b01c 	str.w	fp, [sp, #28]
   1a43e:	9012      	str	r0, [sp, #72]	; 0x48
   1a440:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   1a444:	f7fe bfd4 	b.w	193f0 <_svfprintf_r+0x230>
   1a448:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a44a:	2b47      	cmp	r3, #71	; 0x47
   1a44c:	f47f ae20 	bne.w	1a090 <_svfprintf_r+0xed0>
   1a450:	f01b 0f01 	tst.w	fp, #1
   1a454:	f47f aeee 	bne.w	1a234 <_svfprintf_r+0x1074>
   1a458:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1a45a:	1b9b      	subs	r3, r3, r6
   1a45c:	9313      	str	r3, [sp, #76]	; 0x4c
   1a45e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a460:	2b47      	cmp	r3, #71	; 0x47
   1a462:	f43f af18 	beq.w	1a296 <_svfprintf_r+0x10d6>
   1a466:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1a468:	9312      	str	r3, [sp, #72]	; 0x48
   1a46a:	e721      	b.n	1a2b0 <_svfprintf_r+0x10f0>
   1a46c:	424f      	negs	r7, r1
   1a46e:	3110      	adds	r1, #16
   1a470:	4d48      	ldr	r5, [pc, #288]	; (1a594 <_svfprintf_r+0x13d4>)
   1a472:	da2f      	bge.n	1a4d4 <_svfprintf_r+0x1314>
   1a474:	2410      	movs	r4, #16
   1a476:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   1a47a:	e004      	b.n	1a486 <_svfprintf_r+0x12c6>
   1a47c:	f108 0808 	add.w	r8, r8, #8
   1a480:	3f10      	subs	r7, #16
   1a482:	2f10      	cmp	r7, #16
   1a484:	dd26      	ble.n	1a4d4 <_svfprintf_r+0x1314>
   1a486:	3301      	adds	r3, #1
   1a488:	3210      	adds	r2, #16
   1a48a:	2b07      	cmp	r3, #7
   1a48c:	9227      	str	r2, [sp, #156]	; 0x9c
   1a48e:	9326      	str	r3, [sp, #152]	; 0x98
   1a490:	f8c8 5000 	str.w	r5, [r8]
   1a494:	f8c8 4004 	str.w	r4, [r8, #4]
   1a498:	ddf0      	ble.n	1a47c <_svfprintf_r+0x12bc>
   1a49a:	aa25      	add	r2, sp, #148	; 0x94
   1a49c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a49e:	4658      	mov	r0, fp
   1a4a0:	f004 fa40 	bl	1e924 <__ssprint_r>
   1a4a4:	2800      	cmp	r0, #0
   1a4a6:	f47e af5d 	bne.w	19364 <_svfprintf_r+0x1a4>
   1a4aa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   1a4ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1a4ae:	46c8      	mov	r8, r9
   1a4b0:	e7e6      	b.n	1a480 <_svfprintf_r+0x12c0>
   1a4b2:	aa25      	add	r2, sp, #148	; 0x94
   1a4b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a4b6:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a4b8:	f004 fa34 	bl	1e924 <__ssprint_r>
   1a4bc:	2800      	cmp	r0, #0
   1a4be:	f47e af51 	bne.w	19364 <_svfprintf_r+0x1a4>
   1a4c2:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1a4c4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   1a4c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1a4c8:	46c8      	mov	r8, r9
   1a4ca:	e667      	b.n	1a19c <_svfprintf_r+0xfdc>
   1a4cc:	2000      	movs	r0, #0
   1a4ce:	900a      	str	r0, [sp, #40]	; 0x28
   1a4d0:	f7fe bed0 	b.w	19274 <_svfprintf_r+0xb4>
   1a4d4:	3301      	adds	r3, #1
   1a4d6:	443a      	add	r2, r7
   1a4d8:	2b07      	cmp	r3, #7
   1a4da:	e888 00a0 	stmia.w	r8, {r5, r7}
   1a4de:	9227      	str	r2, [sp, #156]	; 0x9c
   1a4e0:	9326      	str	r3, [sp, #152]	; 0x98
   1a4e2:	f108 0808 	add.w	r8, r8, #8
   1a4e6:	f77f ae5c 	ble.w	1a1a2 <_svfprintf_r+0xfe2>
   1a4ea:	aa25      	add	r2, sp, #148	; 0x94
   1a4ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a4ee:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a4f0:	f004 fa18 	bl	1e924 <__ssprint_r>
   1a4f4:	2800      	cmp	r0, #0
   1a4f6:	f47e af35 	bne.w	19364 <_svfprintf_r+0x1a4>
   1a4fa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   1a4fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1a4fe:	46c8      	mov	r8, r9
   1a500:	e64f      	b.n	1a1a2 <_svfprintf_r+0xfe2>
   1a502:	3330      	adds	r3, #48	; 0x30
   1a504:	2230      	movs	r2, #48	; 0x30
   1a506:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   1a50a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   1a50e:	ab22      	add	r3, sp, #136	; 0x88
   1a510:	e70f      	b.n	1a332 <_svfprintf_r+0x1172>
   1a512:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a514:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1a516:	4413      	add	r3, r2
   1a518:	930e      	str	r3, [sp, #56]	; 0x38
   1a51a:	e775      	b.n	1a408 <_svfprintf_r+0x1248>
   1a51c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1a51e:	e5cb      	b.n	1a0b8 <_svfprintf_r+0xef8>
   1a520:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1a522:	4e1d      	ldr	r6, [pc, #116]	; (1a598 <_svfprintf_r+0x13d8>)
   1a524:	2b00      	cmp	r3, #0
   1a526:	bfb6      	itet	lt
   1a528:	272d      	movlt	r7, #45	; 0x2d
   1a52a:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   1a52e:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
   1a532:	4b1a      	ldr	r3, [pc, #104]	; (1a59c <_svfprintf_r+0x13dc>)
   1a534:	f7ff ba2f 	b.w	19996 <_svfprintf_r+0x7d6>
   1a538:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1a53a:	9808      	ldr	r0, [sp, #32]
   1a53c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1a53e:	4639      	mov	r1, r7
   1a540:	f7fb fa26 	bl	15990 <__aeabi_dcmpeq>
   1a544:	2800      	cmp	r0, #0
   1a546:	f47f ae7f 	bne.w	1a248 <_svfprintf_r+0x1088>
   1a54a:	f1c5 0501 	rsb	r5, r5, #1
   1a54e:	951f      	str	r5, [sp, #124]	; 0x7c
   1a550:	442c      	add	r4, r5
   1a552:	e59e      	b.n	1a092 <_svfprintf_r+0xed2>
   1a554:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a556:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1a558:	4413      	add	r3, r2
   1a55a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a55c:	441a      	add	r2, r3
   1a55e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1a562:	920e      	str	r2, [sp, #56]	; 0x38
   1a564:	9308      	str	r3, [sp, #32]
   1a566:	e5c7      	b.n	1a0f8 <_svfprintf_r+0xf38>
   1a568:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a56a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a56c:	f1c3 0301 	rsb	r3, r3, #1
   1a570:	441a      	add	r2, r3
   1a572:	4613      	mov	r3, r2
   1a574:	e7d0      	b.n	1a518 <_svfprintf_r+0x1358>
   1a576:	f01b 0301 	ands.w	r3, fp, #1
   1a57a:	9312      	str	r3, [sp, #72]	; 0x48
   1a57c:	f47f aee2 	bne.w	1a344 <_svfprintf_r+0x1184>
   1a580:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a582:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1a586:	9308      	str	r3, [sp, #32]
   1a588:	e5b6      	b.n	1a0f8 <_svfprintf_r+0xf38>
   1a58a:	bf00      	nop
   1a58c:	66666667 	.word	0x66666667
   1a590:	0003eba8 	.word	0x0003eba8
   1a594:	0003ebc0 	.word	0x0003ebc0
   1a598:	0003eb7c 	.word	0x0003eb7c
   1a59c:	0003eb78 	.word	0x0003eb78
   1a5a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a5a2:	b913      	cbnz	r3, 1a5aa <_svfprintf_r+0x13ea>
   1a5a4:	f01b 0f01 	tst.w	fp, #1
   1a5a8:	d002      	beq.n	1a5b0 <_svfprintf_r+0x13f0>
   1a5aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1a5ac:	3301      	adds	r3, #1
   1a5ae:	e7d4      	b.n	1a55a <_svfprintf_r+0x139a>
   1a5b0:	2301      	movs	r3, #1
   1a5b2:	e73a      	b.n	1a42a <_svfprintf_r+0x126a>
   1a5b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1a5b6:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1a5ba:	6828      	ldr	r0, [r5, #0]
   1a5bc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   1a5c0:	900a      	str	r0, [sp, #40]	; 0x28
   1a5c2:	4628      	mov	r0, r5
   1a5c4:	3004      	adds	r0, #4
   1a5c6:	46a2      	mov	sl, r4
   1a5c8:	900f      	str	r0, [sp, #60]	; 0x3c
   1a5ca:	f7fe be51 	b.w	19270 <_svfprintf_r+0xb0>
   1a5ce:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   1a5d2:	f7ff b867 	b.w	196a4 <_svfprintf_r+0x4e4>
   1a5d6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   1a5da:	f7ff ba15 	b.w	19a08 <_svfprintf_r+0x848>
   1a5de:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   1a5e2:	e6a6      	b.n	1a332 <_svfprintf_r+0x1172>
   1a5e4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   1a5e8:	f7ff b8eb 	b.w	197c2 <_svfprintf_r+0x602>
   1a5ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a5ee:	230c      	movs	r3, #12
   1a5f0:	6013      	str	r3, [r2, #0]
   1a5f2:	f04f 33ff 	mov.w	r3, #4294967295
   1a5f6:	9309      	str	r3, [sp, #36]	; 0x24
   1a5f8:	f7fe bebd 	b.w	19376 <_svfprintf_r+0x1b6>
   1a5fc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   1a600:	f7ff b99a 	b.w	19938 <_svfprintf_r+0x778>
   1a604:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   1a608:	f7ff b976 	b.w	198f8 <_svfprintf_r+0x738>
   1a60c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   1a610:	f7ff b959 	b.w	198c6 <_svfprintf_r+0x706>
   1a614:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   1a618:	f7ff b912 	b.w	19840 <_svfprintf_r+0x680>

0001a61c <_user_strerror>:
   1a61c:	2000      	movs	r0, #0
   1a61e:	4770      	bx	lr

0001a620 <__sprint_r.part.0>:
   1a620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a624:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1a626:	049c      	lsls	r4, r3, #18
   1a628:	4693      	mov	fp, r2
   1a62a:	d52f      	bpl.n	1a68c <__sprint_r.part.0+0x6c>
   1a62c:	6893      	ldr	r3, [r2, #8]
   1a62e:	6812      	ldr	r2, [r2, #0]
   1a630:	b353      	cbz	r3, 1a688 <__sprint_r.part.0+0x68>
   1a632:	460e      	mov	r6, r1
   1a634:	4607      	mov	r7, r0
   1a636:	f102 0908 	add.w	r9, r2, #8
   1a63a:	e919 0420 	ldmdb	r9, {r5, sl}
   1a63e:	ea5f 089a 	movs.w	r8, sl, lsr #2
   1a642:	d017      	beq.n	1a674 <__sprint_r.part.0+0x54>
   1a644:	3d04      	subs	r5, #4
   1a646:	2400      	movs	r4, #0
   1a648:	e001      	b.n	1a64e <__sprint_r.part.0+0x2e>
   1a64a:	45a0      	cmp	r8, r4
   1a64c:	d010      	beq.n	1a670 <__sprint_r.part.0+0x50>
   1a64e:	4632      	mov	r2, r6
   1a650:	f855 1f04 	ldr.w	r1, [r5, #4]!
   1a654:	4638      	mov	r0, r7
   1a656:	f003 fc8b 	bl	1df70 <_fputwc_r>
   1a65a:	1c43      	adds	r3, r0, #1
   1a65c:	f104 0401 	add.w	r4, r4, #1
   1a660:	d1f3      	bne.n	1a64a <__sprint_r.part.0+0x2a>
   1a662:	2300      	movs	r3, #0
   1a664:	f8cb 3008 	str.w	r3, [fp, #8]
   1a668:	f8cb 3004 	str.w	r3, [fp, #4]
   1a66c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a670:	f8db 3008 	ldr.w	r3, [fp, #8]
   1a674:	f02a 0a03 	bic.w	sl, sl, #3
   1a678:	eba3 030a 	sub.w	r3, r3, sl
   1a67c:	f8cb 3008 	str.w	r3, [fp, #8]
   1a680:	f109 0908 	add.w	r9, r9, #8
   1a684:	2b00      	cmp	r3, #0
   1a686:	d1d8      	bne.n	1a63a <__sprint_r.part.0+0x1a>
   1a688:	2000      	movs	r0, #0
   1a68a:	e7ea      	b.n	1a662 <__sprint_r.part.0+0x42>
   1a68c:	f7fc ff58 	bl	17540 <__sfvwrite_r>
   1a690:	2300      	movs	r3, #0
   1a692:	f8cb 3008 	str.w	r3, [fp, #8]
   1a696:	f8cb 3004 	str.w	r3, [fp, #4]
   1a69a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a69e:	bf00      	nop

0001a6a0 <__sprint_r>:
   1a6a0:	6893      	ldr	r3, [r2, #8]
   1a6a2:	b10b      	cbz	r3, 1a6a8 <__sprint_r+0x8>
   1a6a4:	f7ff bfbc 	b.w	1a620 <__sprint_r.part.0>
   1a6a8:	b410      	push	{r4}
   1a6aa:	4618      	mov	r0, r3
   1a6ac:	6053      	str	r3, [r2, #4]
   1a6ae:	bc10      	pop	{r4}
   1a6b0:	4770      	bx	lr
   1a6b2:	bf00      	nop

0001a6b4 <_vfiprintf_r>:
   1a6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6b8:	b0ad      	sub	sp, #180	; 0xb4
   1a6ba:	461d      	mov	r5, r3
   1a6bc:	468b      	mov	fp, r1
   1a6be:	4690      	mov	r8, r2
   1a6c0:	9307      	str	r3, [sp, #28]
   1a6c2:	9006      	str	r0, [sp, #24]
   1a6c4:	b118      	cbz	r0, 1a6ce <_vfiprintf_r+0x1a>
   1a6c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1a6c8:	2b00      	cmp	r3, #0
   1a6ca:	f000 80f3 	beq.w	1a8b4 <_vfiprintf_r+0x200>
   1a6ce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   1a6d2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   1a6d6:	07df      	lsls	r7, r3, #31
   1a6d8:	b281      	uxth	r1, r0
   1a6da:	d402      	bmi.n	1a6e2 <_vfiprintf_r+0x2e>
   1a6dc:	058e      	lsls	r6, r1, #22
   1a6de:	f140 80fc 	bpl.w	1a8da <_vfiprintf_r+0x226>
   1a6e2:	048c      	lsls	r4, r1, #18
   1a6e4:	d40a      	bmi.n	1a6fc <_vfiprintf_r+0x48>
   1a6e6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   1a6ea:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   1a6ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1a6f2:	f8ab 100c 	strh.w	r1, [fp, #12]
   1a6f6:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   1a6fa:	b289      	uxth	r1, r1
   1a6fc:	0708      	lsls	r0, r1, #28
   1a6fe:	f140 80b3 	bpl.w	1a868 <_vfiprintf_r+0x1b4>
   1a702:	f8db 3010 	ldr.w	r3, [fp, #16]
   1a706:	2b00      	cmp	r3, #0
   1a708:	f000 80ae 	beq.w	1a868 <_vfiprintf_r+0x1b4>
   1a70c:	f001 031a 	and.w	r3, r1, #26
   1a710:	2b0a      	cmp	r3, #10
   1a712:	f000 80b5 	beq.w	1a880 <_vfiprintf_r+0x1cc>
   1a716:	2300      	movs	r3, #0
   1a718:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   1a71c:	930b      	str	r3, [sp, #44]	; 0x2c
   1a71e:	9311      	str	r3, [sp, #68]	; 0x44
   1a720:	9310      	str	r3, [sp, #64]	; 0x40
   1a722:	9303      	str	r3, [sp, #12]
   1a724:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   1a728:	46ca      	mov	sl, r9
   1a72a:	f8cd b010 	str.w	fp, [sp, #16]
   1a72e:	f898 3000 	ldrb.w	r3, [r8]
   1a732:	4644      	mov	r4, r8
   1a734:	b1fb      	cbz	r3, 1a776 <_vfiprintf_r+0xc2>
   1a736:	2b25      	cmp	r3, #37	; 0x25
   1a738:	d102      	bne.n	1a740 <_vfiprintf_r+0x8c>
   1a73a:	e01c      	b.n	1a776 <_vfiprintf_r+0xc2>
   1a73c:	2b25      	cmp	r3, #37	; 0x25
   1a73e:	d003      	beq.n	1a748 <_vfiprintf_r+0x94>
   1a740:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1a744:	2b00      	cmp	r3, #0
   1a746:	d1f9      	bne.n	1a73c <_vfiprintf_r+0x88>
   1a748:	eba4 0508 	sub.w	r5, r4, r8
   1a74c:	b19d      	cbz	r5, 1a776 <_vfiprintf_r+0xc2>
   1a74e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1a750:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1a752:	f8ca 8000 	str.w	r8, [sl]
   1a756:	3301      	adds	r3, #1
   1a758:	442a      	add	r2, r5
   1a75a:	2b07      	cmp	r3, #7
   1a75c:	f8ca 5004 	str.w	r5, [sl, #4]
   1a760:	9211      	str	r2, [sp, #68]	; 0x44
   1a762:	9310      	str	r3, [sp, #64]	; 0x40
   1a764:	dd7a      	ble.n	1a85c <_vfiprintf_r+0x1a8>
   1a766:	2a00      	cmp	r2, #0
   1a768:	f040 84b0 	bne.w	1b0cc <_vfiprintf_r+0xa18>
   1a76c:	9b03      	ldr	r3, [sp, #12]
   1a76e:	9210      	str	r2, [sp, #64]	; 0x40
   1a770:	442b      	add	r3, r5
   1a772:	46ca      	mov	sl, r9
   1a774:	9303      	str	r3, [sp, #12]
   1a776:	7823      	ldrb	r3, [r4, #0]
   1a778:	2b00      	cmp	r3, #0
   1a77a:	f000 83e0 	beq.w	1af3e <_vfiprintf_r+0x88a>
   1a77e:	2000      	movs	r0, #0
   1a780:	f04f 0300 	mov.w	r3, #0
   1a784:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   1a788:	f104 0801 	add.w	r8, r4, #1
   1a78c:	7862      	ldrb	r2, [r4, #1]
   1a78e:	4605      	mov	r5, r0
   1a790:	4606      	mov	r6, r0
   1a792:	4603      	mov	r3, r0
   1a794:	f04f 34ff 	mov.w	r4, #4294967295
   1a798:	f108 0801 	add.w	r8, r8, #1
   1a79c:	f1a2 0120 	sub.w	r1, r2, #32
   1a7a0:	2958      	cmp	r1, #88	; 0x58
   1a7a2:	f200 82de 	bhi.w	1ad62 <_vfiprintf_r+0x6ae>
   1a7a6:	e8df f011 	tbh	[pc, r1, lsl #1]
   1a7aa:	0221      	.short	0x0221
   1a7ac:	02dc02dc 	.word	0x02dc02dc
   1a7b0:	02dc0229 	.word	0x02dc0229
   1a7b4:	02dc02dc 	.word	0x02dc02dc
   1a7b8:	02dc02dc 	.word	0x02dc02dc
   1a7bc:	028902dc 	.word	0x028902dc
   1a7c0:	02dc0295 	.word	0x02dc0295
   1a7c4:	02bd00a2 	.word	0x02bd00a2
   1a7c8:	019f02dc 	.word	0x019f02dc
   1a7cc:	01a401a4 	.word	0x01a401a4
   1a7d0:	01a401a4 	.word	0x01a401a4
   1a7d4:	01a401a4 	.word	0x01a401a4
   1a7d8:	01a401a4 	.word	0x01a401a4
   1a7dc:	02dc01a4 	.word	0x02dc01a4
   1a7e0:	02dc02dc 	.word	0x02dc02dc
   1a7e4:	02dc02dc 	.word	0x02dc02dc
   1a7e8:	02dc02dc 	.word	0x02dc02dc
   1a7ec:	02dc02dc 	.word	0x02dc02dc
   1a7f0:	01b202dc 	.word	0x01b202dc
   1a7f4:	02dc02dc 	.word	0x02dc02dc
   1a7f8:	02dc02dc 	.word	0x02dc02dc
   1a7fc:	02dc02dc 	.word	0x02dc02dc
   1a800:	02dc02dc 	.word	0x02dc02dc
   1a804:	02dc02dc 	.word	0x02dc02dc
   1a808:	02dc0197 	.word	0x02dc0197
   1a80c:	02dc02dc 	.word	0x02dc02dc
   1a810:	02dc02dc 	.word	0x02dc02dc
   1a814:	02dc019b 	.word	0x02dc019b
   1a818:	025302dc 	.word	0x025302dc
   1a81c:	02dc02dc 	.word	0x02dc02dc
   1a820:	02dc02dc 	.word	0x02dc02dc
   1a824:	02dc02dc 	.word	0x02dc02dc
   1a828:	02dc02dc 	.word	0x02dc02dc
   1a82c:	02dc02dc 	.word	0x02dc02dc
   1a830:	021b025a 	.word	0x021b025a
   1a834:	02dc02dc 	.word	0x02dc02dc
   1a838:	026e02dc 	.word	0x026e02dc
   1a83c:	02dc021b 	.word	0x02dc021b
   1a840:	027302dc 	.word	0x027302dc
   1a844:	01f502dc 	.word	0x01f502dc
   1a848:	02090182 	.word	0x02090182
   1a84c:	02dc02d7 	.word	0x02dc02d7
   1a850:	02dc029a 	.word	0x02dc029a
   1a854:	02dc00a7 	.word	0x02dc00a7
   1a858:	022e02dc 	.word	0x022e02dc
   1a85c:	f10a 0a08 	add.w	sl, sl, #8
   1a860:	9b03      	ldr	r3, [sp, #12]
   1a862:	442b      	add	r3, r5
   1a864:	9303      	str	r3, [sp, #12]
   1a866:	e786      	b.n	1a776 <_vfiprintf_r+0xc2>
   1a868:	4659      	mov	r1, fp
   1a86a:	9806      	ldr	r0, [sp, #24]
   1a86c:	f002 f940 	bl	1caf0 <__swsetup_r>
   1a870:	bb18      	cbnz	r0, 1a8ba <_vfiprintf_r+0x206>
   1a872:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   1a876:	f001 031a 	and.w	r3, r1, #26
   1a87a:	2b0a      	cmp	r3, #10
   1a87c:	f47f af4b 	bne.w	1a716 <_vfiprintf_r+0x62>
   1a880:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   1a884:	2b00      	cmp	r3, #0
   1a886:	f6ff af46 	blt.w	1a716 <_vfiprintf_r+0x62>
   1a88a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   1a88e:	07db      	lsls	r3, r3, #31
   1a890:	d405      	bmi.n	1a89e <_vfiprintf_r+0x1ea>
   1a892:	058f      	lsls	r7, r1, #22
   1a894:	d403      	bmi.n	1a89e <_vfiprintf_r+0x1ea>
   1a896:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   1a89a:	f7fd f86b 	bl	17974 <__retarget_lock_release_recursive>
   1a89e:	462b      	mov	r3, r5
   1a8a0:	4642      	mov	r2, r8
   1a8a2:	4659      	mov	r1, fp
   1a8a4:	9806      	ldr	r0, [sp, #24]
   1a8a6:	f000 fd4d 	bl	1b344 <__sbprintf>
   1a8aa:	9003      	str	r0, [sp, #12]
   1a8ac:	9803      	ldr	r0, [sp, #12]
   1a8ae:	b02d      	add	sp, #180	; 0xb4
   1a8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8b4:	f003 faba 	bl	1de2c <__sinit>
   1a8b8:	e709      	b.n	1a6ce <_vfiprintf_r+0x1a>
   1a8ba:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   1a8be:	07d9      	lsls	r1, r3, #31
   1a8c0:	d404      	bmi.n	1a8cc <_vfiprintf_r+0x218>
   1a8c2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   1a8c6:	059a      	lsls	r2, r3, #22
   1a8c8:	f140 84aa 	bpl.w	1b220 <_vfiprintf_r+0xb6c>
   1a8cc:	f04f 33ff 	mov.w	r3, #4294967295
   1a8d0:	9303      	str	r3, [sp, #12]
   1a8d2:	9803      	ldr	r0, [sp, #12]
   1a8d4:	b02d      	add	sp, #180	; 0xb4
   1a8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8da:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   1a8de:	f7fd f847 	bl	17970 <__retarget_lock_acquire_recursive>
   1a8e2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   1a8e6:	b281      	uxth	r1, r0
   1a8e8:	e6fb      	b.n	1a6e2 <_vfiprintf_r+0x2e>
   1a8ea:	4276      	negs	r6, r6
   1a8ec:	9207      	str	r2, [sp, #28]
   1a8ee:	f043 0304 	orr.w	r3, r3, #4
   1a8f2:	f898 2000 	ldrb.w	r2, [r8]
   1a8f6:	e74f      	b.n	1a798 <_vfiprintf_r+0xe4>
   1a8f8:	9608      	str	r6, [sp, #32]
   1a8fa:	069e      	lsls	r6, r3, #26
   1a8fc:	f100 8450 	bmi.w	1b1a0 <_vfiprintf_r+0xaec>
   1a900:	9907      	ldr	r1, [sp, #28]
   1a902:	06dd      	lsls	r5, r3, #27
   1a904:	460a      	mov	r2, r1
   1a906:	f100 83ef 	bmi.w	1b0e8 <_vfiprintf_r+0xa34>
   1a90a:	0658      	lsls	r0, r3, #25
   1a90c:	f140 83ec 	bpl.w	1b0e8 <_vfiprintf_r+0xa34>
   1a910:	880e      	ldrh	r6, [r1, #0]
   1a912:	3104      	adds	r1, #4
   1a914:	2700      	movs	r7, #0
   1a916:	2201      	movs	r2, #1
   1a918:	9107      	str	r1, [sp, #28]
   1a91a:	f04f 0100 	mov.w	r1, #0
   1a91e:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   1a922:	2500      	movs	r5, #0
   1a924:	1c61      	adds	r1, r4, #1
   1a926:	f000 8116 	beq.w	1ab56 <_vfiprintf_r+0x4a2>
   1a92a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   1a92e:	9102      	str	r1, [sp, #8]
   1a930:	ea56 0107 	orrs.w	r1, r6, r7
   1a934:	f040 8114 	bne.w	1ab60 <_vfiprintf_r+0x4ac>
   1a938:	2c00      	cmp	r4, #0
   1a93a:	f040 835c 	bne.w	1aff6 <_vfiprintf_r+0x942>
   1a93e:	2a00      	cmp	r2, #0
   1a940:	f040 83b7 	bne.w	1b0b2 <_vfiprintf_r+0x9fe>
   1a944:	f013 0301 	ands.w	r3, r3, #1
   1a948:	9305      	str	r3, [sp, #20]
   1a94a:	f000 8457 	beq.w	1b1fc <_vfiprintf_r+0xb48>
   1a94e:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   1a952:	2330      	movs	r3, #48	; 0x30
   1a954:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   1a958:	9b05      	ldr	r3, [sp, #20]
   1a95a:	42a3      	cmp	r3, r4
   1a95c:	bfb8      	it	lt
   1a95e:	4623      	movlt	r3, r4
   1a960:	9301      	str	r3, [sp, #4]
   1a962:	b10d      	cbz	r5, 1a968 <_vfiprintf_r+0x2b4>
   1a964:	3301      	adds	r3, #1
   1a966:	9301      	str	r3, [sp, #4]
   1a968:	9b02      	ldr	r3, [sp, #8]
   1a96a:	f013 0302 	ands.w	r3, r3, #2
   1a96e:	9309      	str	r3, [sp, #36]	; 0x24
   1a970:	d002      	beq.n	1a978 <_vfiprintf_r+0x2c4>
   1a972:	9b01      	ldr	r3, [sp, #4]
   1a974:	3302      	adds	r3, #2
   1a976:	9301      	str	r3, [sp, #4]
   1a978:	9b02      	ldr	r3, [sp, #8]
   1a97a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   1a97e:	930a      	str	r3, [sp, #40]	; 0x28
   1a980:	f040 8217 	bne.w	1adb2 <_vfiprintf_r+0x6fe>
   1a984:	9b08      	ldr	r3, [sp, #32]
   1a986:	9a01      	ldr	r2, [sp, #4]
   1a988:	1a9d      	subs	r5, r3, r2
   1a98a:	2d00      	cmp	r5, #0
   1a98c:	f340 8211 	ble.w	1adb2 <_vfiprintf_r+0x6fe>
   1a990:	2d10      	cmp	r5, #16
   1a992:	f340 8490 	ble.w	1b2b6 <_vfiprintf_r+0xc02>
   1a996:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1a998:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1a99a:	4ec4      	ldr	r6, [pc, #784]	; (1acac <_vfiprintf_r+0x5f8>)
   1a99c:	46d6      	mov	lr, sl
   1a99e:	2710      	movs	r7, #16
   1a9a0:	46a2      	mov	sl, r4
   1a9a2:	4619      	mov	r1, r3
   1a9a4:	9c06      	ldr	r4, [sp, #24]
   1a9a6:	e007      	b.n	1a9b8 <_vfiprintf_r+0x304>
   1a9a8:	f101 0c02 	add.w	ip, r1, #2
   1a9ac:	f10e 0e08 	add.w	lr, lr, #8
   1a9b0:	4601      	mov	r1, r0
   1a9b2:	3d10      	subs	r5, #16
   1a9b4:	2d10      	cmp	r5, #16
   1a9b6:	dd11      	ble.n	1a9dc <_vfiprintf_r+0x328>
   1a9b8:	1c48      	adds	r0, r1, #1
   1a9ba:	3210      	adds	r2, #16
   1a9bc:	2807      	cmp	r0, #7
   1a9be:	9211      	str	r2, [sp, #68]	; 0x44
   1a9c0:	e88e 00c0 	stmia.w	lr, {r6, r7}
   1a9c4:	9010      	str	r0, [sp, #64]	; 0x40
   1a9c6:	ddef      	ble.n	1a9a8 <_vfiprintf_r+0x2f4>
   1a9c8:	2a00      	cmp	r2, #0
   1a9ca:	f040 81e4 	bne.w	1ad96 <_vfiprintf_r+0x6e2>
   1a9ce:	3d10      	subs	r5, #16
   1a9d0:	2d10      	cmp	r5, #16
   1a9d2:	4611      	mov	r1, r2
   1a9d4:	f04f 0c01 	mov.w	ip, #1
   1a9d8:	46ce      	mov	lr, r9
   1a9da:	dced      	bgt.n	1a9b8 <_vfiprintf_r+0x304>
   1a9dc:	4654      	mov	r4, sl
   1a9de:	4661      	mov	r1, ip
   1a9e0:	46f2      	mov	sl, lr
   1a9e2:	442a      	add	r2, r5
   1a9e4:	2907      	cmp	r1, #7
   1a9e6:	9211      	str	r2, [sp, #68]	; 0x44
   1a9e8:	f8ca 6000 	str.w	r6, [sl]
   1a9ec:	f8ca 5004 	str.w	r5, [sl, #4]
   1a9f0:	9110      	str	r1, [sp, #64]	; 0x40
   1a9f2:	f300 82ec 	bgt.w	1afce <_vfiprintf_r+0x91a>
   1a9f6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   1a9fa:	f10a 0a08 	add.w	sl, sl, #8
   1a9fe:	1c48      	adds	r0, r1, #1
   1aa00:	2d00      	cmp	r5, #0
   1aa02:	f040 81de 	bne.w	1adc2 <_vfiprintf_r+0x70e>
   1aa06:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1aa08:	2b00      	cmp	r3, #0
   1aa0a:	f000 81f8 	beq.w	1adfe <_vfiprintf_r+0x74a>
   1aa0e:	3202      	adds	r2, #2
   1aa10:	a90e      	add	r1, sp, #56	; 0x38
   1aa12:	2302      	movs	r3, #2
   1aa14:	2807      	cmp	r0, #7
   1aa16:	9211      	str	r2, [sp, #68]	; 0x44
   1aa18:	9010      	str	r0, [sp, #64]	; 0x40
   1aa1a:	e88a 000a 	stmia.w	sl, {r1, r3}
   1aa1e:	f340 81ea 	ble.w	1adf6 <_vfiprintf_r+0x742>
   1aa22:	2a00      	cmp	r2, #0
   1aa24:	f040 838c 	bne.w	1b140 <_vfiprintf_r+0xa8c>
   1aa28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1aa2a:	2b80      	cmp	r3, #128	; 0x80
   1aa2c:	f04f 0001 	mov.w	r0, #1
   1aa30:	4611      	mov	r1, r2
   1aa32:	46ca      	mov	sl, r9
   1aa34:	f040 81e7 	bne.w	1ae06 <_vfiprintf_r+0x752>
   1aa38:	9b08      	ldr	r3, [sp, #32]
   1aa3a:	9d01      	ldr	r5, [sp, #4]
   1aa3c:	1b5e      	subs	r6, r3, r5
   1aa3e:	2e00      	cmp	r6, #0
   1aa40:	f340 81e1 	ble.w	1ae06 <_vfiprintf_r+0x752>
   1aa44:	2e10      	cmp	r6, #16
   1aa46:	4d9a      	ldr	r5, [pc, #616]	; (1acb0 <_vfiprintf_r+0x5fc>)
   1aa48:	f340 8450 	ble.w	1b2ec <_vfiprintf_r+0xc38>
   1aa4c:	46d4      	mov	ip, sl
   1aa4e:	2710      	movs	r7, #16
   1aa50:	46a2      	mov	sl, r4
   1aa52:	9c06      	ldr	r4, [sp, #24]
   1aa54:	e007      	b.n	1aa66 <_vfiprintf_r+0x3b2>
   1aa56:	f101 0e02 	add.w	lr, r1, #2
   1aa5a:	f10c 0c08 	add.w	ip, ip, #8
   1aa5e:	4601      	mov	r1, r0
   1aa60:	3e10      	subs	r6, #16
   1aa62:	2e10      	cmp	r6, #16
   1aa64:	dd11      	ble.n	1aa8a <_vfiprintf_r+0x3d6>
   1aa66:	1c48      	adds	r0, r1, #1
   1aa68:	3210      	adds	r2, #16
   1aa6a:	2807      	cmp	r0, #7
   1aa6c:	9211      	str	r2, [sp, #68]	; 0x44
   1aa6e:	e88c 00a0 	stmia.w	ip, {r5, r7}
   1aa72:	9010      	str	r0, [sp, #64]	; 0x40
   1aa74:	ddef      	ble.n	1aa56 <_vfiprintf_r+0x3a2>
   1aa76:	2a00      	cmp	r2, #0
   1aa78:	f040 829d 	bne.w	1afb6 <_vfiprintf_r+0x902>
   1aa7c:	3e10      	subs	r6, #16
   1aa7e:	2e10      	cmp	r6, #16
   1aa80:	f04f 0e01 	mov.w	lr, #1
   1aa84:	4611      	mov	r1, r2
   1aa86:	46cc      	mov	ip, r9
   1aa88:	dced      	bgt.n	1aa66 <_vfiprintf_r+0x3b2>
   1aa8a:	4654      	mov	r4, sl
   1aa8c:	46e2      	mov	sl, ip
   1aa8e:	4432      	add	r2, r6
   1aa90:	f1be 0f07 	cmp.w	lr, #7
   1aa94:	9211      	str	r2, [sp, #68]	; 0x44
   1aa96:	e88a 0060 	stmia.w	sl, {r5, r6}
   1aa9a:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   1aa9e:	f300 8369 	bgt.w	1b174 <_vfiprintf_r+0xac0>
   1aaa2:	f10a 0a08 	add.w	sl, sl, #8
   1aaa6:	f10e 0001 	add.w	r0, lr, #1
   1aaaa:	4671      	mov	r1, lr
   1aaac:	e1ab      	b.n	1ae06 <_vfiprintf_r+0x752>
   1aaae:	9608      	str	r6, [sp, #32]
   1aab0:	f013 0220 	ands.w	r2, r3, #32
   1aab4:	f040 838c 	bne.w	1b1d0 <_vfiprintf_r+0xb1c>
   1aab8:	f013 0110 	ands.w	r1, r3, #16
   1aabc:	f040 831a 	bne.w	1b0f4 <_vfiprintf_r+0xa40>
   1aac0:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   1aac4:	f000 8316 	beq.w	1b0f4 <_vfiprintf_r+0xa40>
   1aac8:	9807      	ldr	r0, [sp, #28]
   1aaca:	460a      	mov	r2, r1
   1aacc:	4601      	mov	r1, r0
   1aace:	3104      	adds	r1, #4
   1aad0:	8806      	ldrh	r6, [r0, #0]
   1aad2:	9107      	str	r1, [sp, #28]
   1aad4:	2700      	movs	r7, #0
   1aad6:	e720      	b.n	1a91a <_vfiprintf_r+0x266>
   1aad8:	9608      	str	r6, [sp, #32]
   1aada:	f043 0310 	orr.w	r3, r3, #16
   1aade:	e7e7      	b.n	1aab0 <_vfiprintf_r+0x3fc>
   1aae0:	9608      	str	r6, [sp, #32]
   1aae2:	f043 0310 	orr.w	r3, r3, #16
   1aae6:	e708      	b.n	1a8fa <_vfiprintf_r+0x246>
   1aae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1aaec:	f898 2000 	ldrb.w	r2, [r8]
   1aaf0:	e652      	b.n	1a798 <_vfiprintf_r+0xe4>
   1aaf2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1aaf6:	2600      	movs	r6, #0
   1aaf8:	f818 2b01 	ldrb.w	r2, [r8], #1
   1aafc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   1ab00:	eb01 0646 	add.w	r6, r1, r6, lsl #1
   1ab04:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1ab08:	2909      	cmp	r1, #9
   1ab0a:	d9f5      	bls.n	1aaf8 <_vfiprintf_r+0x444>
   1ab0c:	e646      	b.n	1a79c <_vfiprintf_r+0xe8>
   1ab0e:	9608      	str	r6, [sp, #32]
   1ab10:	2800      	cmp	r0, #0
   1ab12:	f040 8408 	bne.w	1b326 <_vfiprintf_r+0xc72>
   1ab16:	f043 0310 	orr.w	r3, r3, #16
   1ab1a:	069e      	lsls	r6, r3, #26
   1ab1c:	f100 834c 	bmi.w	1b1b8 <_vfiprintf_r+0xb04>
   1ab20:	06dd      	lsls	r5, r3, #27
   1ab22:	f100 82f3 	bmi.w	1b10c <_vfiprintf_r+0xa58>
   1ab26:	0658      	lsls	r0, r3, #25
   1ab28:	f140 82f0 	bpl.w	1b10c <_vfiprintf_r+0xa58>
   1ab2c:	9d07      	ldr	r5, [sp, #28]
   1ab2e:	f9b5 6000 	ldrsh.w	r6, [r5]
   1ab32:	462a      	mov	r2, r5
   1ab34:	17f7      	asrs	r7, r6, #31
   1ab36:	3204      	adds	r2, #4
   1ab38:	4630      	mov	r0, r6
   1ab3a:	4639      	mov	r1, r7
   1ab3c:	9207      	str	r2, [sp, #28]
   1ab3e:	2800      	cmp	r0, #0
   1ab40:	f171 0200 	sbcs.w	r2, r1, #0
   1ab44:	f2c0 835d 	blt.w	1b202 <_vfiprintf_r+0xb4e>
   1ab48:	1c61      	adds	r1, r4, #1
   1ab4a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   1ab4e:	f04f 0201 	mov.w	r2, #1
   1ab52:	f47f aeea 	bne.w	1a92a <_vfiprintf_r+0x276>
   1ab56:	ea56 0107 	orrs.w	r1, r6, r7
   1ab5a:	f000 824d 	beq.w	1aff8 <_vfiprintf_r+0x944>
   1ab5e:	9302      	str	r3, [sp, #8]
   1ab60:	2a01      	cmp	r2, #1
   1ab62:	f000 828c 	beq.w	1b07e <_vfiprintf_r+0x9ca>
   1ab66:	2a02      	cmp	r2, #2
   1ab68:	f040 825c 	bne.w	1b024 <_vfiprintf_r+0x970>
   1ab6c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1ab6e:	46cb      	mov	fp, r9
   1ab70:	0933      	lsrs	r3, r6, #4
   1ab72:	f006 010f 	and.w	r1, r6, #15
   1ab76:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   1ab7a:	093a      	lsrs	r2, r7, #4
   1ab7c:	461e      	mov	r6, r3
   1ab7e:	4617      	mov	r7, r2
   1ab80:	5c43      	ldrb	r3, [r0, r1]
   1ab82:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   1ab86:	ea56 0307 	orrs.w	r3, r6, r7
   1ab8a:	d1f1      	bne.n	1ab70 <_vfiprintf_r+0x4bc>
   1ab8c:	eba9 030b 	sub.w	r3, r9, fp
   1ab90:	9305      	str	r3, [sp, #20]
   1ab92:	e6e1      	b.n	1a958 <_vfiprintf_r+0x2a4>
   1ab94:	2800      	cmp	r0, #0
   1ab96:	f040 83c0 	bne.w	1b31a <_vfiprintf_r+0xc66>
   1ab9a:	0699      	lsls	r1, r3, #26
   1ab9c:	f100 8367 	bmi.w	1b26e <_vfiprintf_r+0xbba>
   1aba0:	06da      	lsls	r2, r3, #27
   1aba2:	f100 80f1 	bmi.w	1ad88 <_vfiprintf_r+0x6d4>
   1aba6:	065b      	lsls	r3, r3, #25
   1aba8:	f140 80ee 	bpl.w	1ad88 <_vfiprintf_r+0x6d4>
   1abac:	9a07      	ldr	r2, [sp, #28]
   1abae:	6813      	ldr	r3, [r2, #0]
   1abb0:	3204      	adds	r2, #4
   1abb2:	9207      	str	r2, [sp, #28]
   1abb4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1abb8:	801a      	strh	r2, [r3, #0]
   1abba:	e5b8      	b.n	1a72e <_vfiprintf_r+0x7a>
   1abbc:	9807      	ldr	r0, [sp, #28]
   1abbe:	4a3d      	ldr	r2, [pc, #244]	; (1acb4 <_vfiprintf_r+0x600>)
   1abc0:	9608      	str	r6, [sp, #32]
   1abc2:	920b      	str	r2, [sp, #44]	; 0x2c
   1abc4:	6806      	ldr	r6, [r0, #0]
   1abc6:	2278      	movs	r2, #120	; 0x78
   1abc8:	2130      	movs	r1, #48	; 0x30
   1abca:	3004      	adds	r0, #4
   1abcc:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   1abd0:	f043 0302 	orr.w	r3, r3, #2
   1abd4:	9007      	str	r0, [sp, #28]
   1abd6:	2700      	movs	r7, #0
   1abd8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   1abdc:	2202      	movs	r2, #2
   1abde:	e69c      	b.n	1a91a <_vfiprintf_r+0x266>
   1abe0:	9608      	str	r6, [sp, #32]
   1abe2:	2800      	cmp	r0, #0
   1abe4:	d099      	beq.n	1ab1a <_vfiprintf_r+0x466>
   1abe6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1abea:	e796      	b.n	1ab1a <_vfiprintf_r+0x466>
   1abec:	f898 2000 	ldrb.w	r2, [r8]
   1abf0:	2d00      	cmp	r5, #0
   1abf2:	f47f add1 	bne.w	1a798 <_vfiprintf_r+0xe4>
   1abf6:	2001      	movs	r0, #1
   1abf8:	2520      	movs	r5, #32
   1abfa:	e5cd      	b.n	1a798 <_vfiprintf_r+0xe4>
   1abfc:	f043 0301 	orr.w	r3, r3, #1
   1ac00:	f898 2000 	ldrb.w	r2, [r8]
   1ac04:	e5c8      	b.n	1a798 <_vfiprintf_r+0xe4>
   1ac06:	9608      	str	r6, [sp, #32]
   1ac08:	2800      	cmp	r0, #0
   1ac0a:	f040 8393 	bne.w	1b334 <_vfiprintf_r+0xc80>
   1ac0e:	4929      	ldr	r1, [pc, #164]	; (1acb4 <_vfiprintf_r+0x600>)
   1ac10:	910b      	str	r1, [sp, #44]	; 0x2c
   1ac12:	069f      	lsls	r7, r3, #26
   1ac14:	f100 82e8 	bmi.w	1b1e8 <_vfiprintf_r+0xb34>
   1ac18:	9807      	ldr	r0, [sp, #28]
   1ac1a:	06de      	lsls	r6, r3, #27
   1ac1c:	4601      	mov	r1, r0
   1ac1e:	f100 8270 	bmi.w	1b102 <_vfiprintf_r+0xa4e>
   1ac22:	065d      	lsls	r5, r3, #25
   1ac24:	f140 826d 	bpl.w	1b102 <_vfiprintf_r+0xa4e>
   1ac28:	3104      	adds	r1, #4
   1ac2a:	8806      	ldrh	r6, [r0, #0]
   1ac2c:	9107      	str	r1, [sp, #28]
   1ac2e:	2700      	movs	r7, #0
   1ac30:	07d8      	lsls	r0, r3, #31
   1ac32:	f140 8222 	bpl.w	1b07a <_vfiprintf_r+0x9c6>
   1ac36:	ea56 0107 	orrs.w	r1, r6, r7
   1ac3a:	f000 821e 	beq.w	1b07a <_vfiprintf_r+0x9c6>
   1ac3e:	2130      	movs	r1, #48	; 0x30
   1ac40:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   1ac44:	f043 0302 	orr.w	r3, r3, #2
   1ac48:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   1ac4c:	2202      	movs	r2, #2
   1ac4e:	e664      	b.n	1a91a <_vfiprintf_r+0x266>
   1ac50:	9608      	str	r6, [sp, #32]
   1ac52:	2800      	cmp	r0, #0
   1ac54:	f040 836b 	bne.w	1b32e <_vfiprintf_r+0xc7a>
   1ac58:	4917      	ldr	r1, [pc, #92]	; (1acb8 <_vfiprintf_r+0x604>)
   1ac5a:	910b      	str	r1, [sp, #44]	; 0x2c
   1ac5c:	e7d9      	b.n	1ac12 <_vfiprintf_r+0x55e>
   1ac5e:	9907      	ldr	r1, [sp, #28]
   1ac60:	9608      	str	r6, [sp, #32]
   1ac62:	680a      	ldr	r2, [r1, #0]
   1ac64:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   1ac68:	f04f 0000 	mov.w	r0, #0
   1ac6c:	460a      	mov	r2, r1
   1ac6e:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   1ac72:	3204      	adds	r2, #4
   1ac74:	2001      	movs	r0, #1
   1ac76:	9001      	str	r0, [sp, #4]
   1ac78:	9207      	str	r2, [sp, #28]
   1ac7a:	9005      	str	r0, [sp, #20]
   1ac7c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   1ac80:	9302      	str	r3, [sp, #8]
   1ac82:	2400      	movs	r4, #0
   1ac84:	e670      	b.n	1a968 <_vfiprintf_r+0x2b4>
   1ac86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1ac8a:	f898 2000 	ldrb.w	r2, [r8]
   1ac8e:	e583      	b.n	1a798 <_vfiprintf_r+0xe4>
   1ac90:	f898 2000 	ldrb.w	r2, [r8]
   1ac94:	2a6c      	cmp	r2, #108	; 0x6c
   1ac96:	bf03      	ittte	eq
   1ac98:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   1ac9c:	f043 0320 	orreq.w	r3, r3, #32
   1aca0:	f108 0801 	addeq.w	r8, r8, #1
   1aca4:	f043 0310 	orrne.w	r3, r3, #16
   1aca8:	e576      	b.n	1a798 <_vfiprintf_r+0xe4>
   1acaa:	bf00      	nop
   1acac:	0003ebd0 	.word	0x0003ebd0
   1acb0:	0003ebe0 	.word	0x0003ebe0
   1acb4:	0003eb94 	.word	0x0003eb94
   1acb8:	0003eb80 	.word	0x0003eb80
   1acbc:	9907      	ldr	r1, [sp, #28]
   1acbe:	680e      	ldr	r6, [r1, #0]
   1acc0:	460a      	mov	r2, r1
   1acc2:	2e00      	cmp	r6, #0
   1acc4:	f102 0204 	add.w	r2, r2, #4
   1acc8:	f6ff ae0f 	blt.w	1a8ea <_vfiprintf_r+0x236>
   1accc:	9207      	str	r2, [sp, #28]
   1acce:	f898 2000 	ldrb.w	r2, [r8]
   1acd2:	e561      	b.n	1a798 <_vfiprintf_r+0xe4>
   1acd4:	f898 2000 	ldrb.w	r2, [r8]
   1acd8:	2001      	movs	r0, #1
   1acda:	252b      	movs	r5, #43	; 0x2b
   1acdc:	e55c      	b.n	1a798 <_vfiprintf_r+0xe4>
   1acde:	9907      	ldr	r1, [sp, #28]
   1ace0:	9608      	str	r6, [sp, #32]
   1ace2:	f8d1 b000 	ldr.w	fp, [r1]
   1ace6:	f04f 0200 	mov.w	r2, #0
   1acea:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1acee:	1d0e      	adds	r6, r1, #4
   1acf0:	f1bb 0f00 	cmp.w	fp, #0
   1acf4:	f000 82e5 	beq.w	1b2c2 <_vfiprintf_r+0xc0e>
   1acf8:	1c67      	adds	r7, r4, #1
   1acfa:	f000 82c4 	beq.w	1b286 <_vfiprintf_r+0xbd2>
   1acfe:	4622      	mov	r2, r4
   1ad00:	2100      	movs	r1, #0
   1ad02:	4658      	mov	r0, fp
   1ad04:	9301      	str	r3, [sp, #4]
   1ad06:	f7fd f98b 	bl	18020 <memchr>
   1ad0a:	9b01      	ldr	r3, [sp, #4]
   1ad0c:	2800      	cmp	r0, #0
   1ad0e:	f000 82e5 	beq.w	1b2dc <_vfiprintf_r+0xc28>
   1ad12:	eba0 020b 	sub.w	r2, r0, fp
   1ad16:	9205      	str	r2, [sp, #20]
   1ad18:	9607      	str	r6, [sp, #28]
   1ad1a:	9302      	str	r3, [sp, #8]
   1ad1c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   1ad20:	2400      	movs	r4, #0
   1ad22:	e619      	b.n	1a958 <_vfiprintf_r+0x2a4>
   1ad24:	f898 2000 	ldrb.w	r2, [r8]
   1ad28:	2a2a      	cmp	r2, #42	; 0x2a
   1ad2a:	f108 0701 	add.w	r7, r8, #1
   1ad2e:	f000 82e9 	beq.w	1b304 <_vfiprintf_r+0xc50>
   1ad32:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1ad36:	2909      	cmp	r1, #9
   1ad38:	46b8      	mov	r8, r7
   1ad3a:	f04f 0400 	mov.w	r4, #0
   1ad3e:	f63f ad2d 	bhi.w	1a79c <_vfiprintf_r+0xe8>
   1ad42:	f818 2b01 	ldrb.w	r2, [r8], #1
   1ad46:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1ad4a:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   1ad4e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1ad52:	2909      	cmp	r1, #9
   1ad54:	d9f5      	bls.n	1ad42 <_vfiprintf_r+0x68e>
   1ad56:	e521      	b.n	1a79c <_vfiprintf_r+0xe8>
   1ad58:	f043 0320 	orr.w	r3, r3, #32
   1ad5c:	f898 2000 	ldrb.w	r2, [r8]
   1ad60:	e51a      	b.n	1a798 <_vfiprintf_r+0xe4>
   1ad62:	9608      	str	r6, [sp, #32]
   1ad64:	2800      	cmp	r0, #0
   1ad66:	f040 82db 	bne.w	1b320 <_vfiprintf_r+0xc6c>
   1ad6a:	2a00      	cmp	r2, #0
   1ad6c:	f000 80e7 	beq.w	1af3e <_vfiprintf_r+0x88a>
   1ad70:	2101      	movs	r1, #1
   1ad72:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   1ad76:	f04f 0200 	mov.w	r2, #0
   1ad7a:	9101      	str	r1, [sp, #4]
   1ad7c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1ad80:	9105      	str	r1, [sp, #20]
   1ad82:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   1ad86:	e77b      	b.n	1ac80 <_vfiprintf_r+0x5cc>
   1ad88:	9a07      	ldr	r2, [sp, #28]
   1ad8a:	6813      	ldr	r3, [r2, #0]
   1ad8c:	3204      	adds	r2, #4
   1ad8e:	9207      	str	r2, [sp, #28]
   1ad90:	9a03      	ldr	r2, [sp, #12]
   1ad92:	601a      	str	r2, [r3, #0]
   1ad94:	e4cb      	b.n	1a72e <_vfiprintf_r+0x7a>
   1ad96:	aa0f      	add	r2, sp, #60	; 0x3c
   1ad98:	9904      	ldr	r1, [sp, #16]
   1ad9a:	4620      	mov	r0, r4
   1ad9c:	f7ff fc40 	bl	1a620 <__sprint_r.part.0>
   1ada0:	2800      	cmp	r0, #0
   1ada2:	f040 8139 	bne.w	1b018 <_vfiprintf_r+0x964>
   1ada6:	9910      	ldr	r1, [sp, #64]	; 0x40
   1ada8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1adaa:	f101 0c01 	add.w	ip, r1, #1
   1adae:	46ce      	mov	lr, r9
   1adb0:	e5ff      	b.n	1a9b2 <_vfiprintf_r+0x2fe>
   1adb2:	9910      	ldr	r1, [sp, #64]	; 0x40
   1adb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1adb6:	1c48      	adds	r0, r1, #1
   1adb8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   1adbc:	2d00      	cmp	r5, #0
   1adbe:	f43f ae22 	beq.w	1aa06 <_vfiprintf_r+0x352>
   1adc2:	3201      	adds	r2, #1
   1adc4:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   1adc8:	2101      	movs	r1, #1
   1adca:	2807      	cmp	r0, #7
   1adcc:	9211      	str	r2, [sp, #68]	; 0x44
   1adce:	9010      	str	r0, [sp, #64]	; 0x40
   1add0:	f8ca 5000 	str.w	r5, [sl]
   1add4:	f8ca 1004 	str.w	r1, [sl, #4]
   1add8:	f340 8108 	ble.w	1afec <_vfiprintf_r+0x938>
   1addc:	2a00      	cmp	r2, #0
   1adde:	f040 81bc 	bne.w	1b15a <_vfiprintf_r+0xaa6>
   1ade2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ade4:	2b00      	cmp	r3, #0
   1ade6:	f43f ae1f 	beq.w	1aa28 <_vfiprintf_r+0x374>
   1adea:	ab0e      	add	r3, sp, #56	; 0x38
   1adec:	2202      	movs	r2, #2
   1adee:	4608      	mov	r0, r1
   1adf0:	931c      	str	r3, [sp, #112]	; 0x70
   1adf2:	921d      	str	r2, [sp, #116]	; 0x74
   1adf4:	46ca      	mov	sl, r9
   1adf6:	4601      	mov	r1, r0
   1adf8:	f10a 0a08 	add.w	sl, sl, #8
   1adfc:	3001      	adds	r0, #1
   1adfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ae00:	2b80      	cmp	r3, #128	; 0x80
   1ae02:	f43f ae19 	beq.w	1aa38 <_vfiprintf_r+0x384>
   1ae06:	9b05      	ldr	r3, [sp, #20]
   1ae08:	1ae4      	subs	r4, r4, r3
   1ae0a:	2c00      	cmp	r4, #0
   1ae0c:	dd2e      	ble.n	1ae6c <_vfiprintf_r+0x7b8>
   1ae0e:	2c10      	cmp	r4, #16
   1ae10:	4db3      	ldr	r5, [pc, #716]	; (1b0e0 <_vfiprintf_r+0xa2c>)
   1ae12:	dd1e      	ble.n	1ae52 <_vfiprintf_r+0x79e>
   1ae14:	46d6      	mov	lr, sl
   1ae16:	2610      	movs	r6, #16
   1ae18:	9f06      	ldr	r7, [sp, #24]
   1ae1a:	f8dd a010 	ldr.w	sl, [sp, #16]
   1ae1e:	e006      	b.n	1ae2e <_vfiprintf_r+0x77a>
   1ae20:	1c88      	adds	r0, r1, #2
   1ae22:	f10e 0e08 	add.w	lr, lr, #8
   1ae26:	4619      	mov	r1, r3
   1ae28:	3c10      	subs	r4, #16
   1ae2a:	2c10      	cmp	r4, #16
   1ae2c:	dd10      	ble.n	1ae50 <_vfiprintf_r+0x79c>
   1ae2e:	1c4b      	adds	r3, r1, #1
   1ae30:	3210      	adds	r2, #16
   1ae32:	2b07      	cmp	r3, #7
   1ae34:	9211      	str	r2, [sp, #68]	; 0x44
   1ae36:	e88e 0060 	stmia.w	lr, {r5, r6}
   1ae3a:	9310      	str	r3, [sp, #64]	; 0x40
   1ae3c:	ddf0      	ble.n	1ae20 <_vfiprintf_r+0x76c>
   1ae3e:	2a00      	cmp	r2, #0
   1ae40:	d165      	bne.n	1af0e <_vfiprintf_r+0x85a>
   1ae42:	3c10      	subs	r4, #16
   1ae44:	2c10      	cmp	r4, #16
   1ae46:	f04f 0001 	mov.w	r0, #1
   1ae4a:	4611      	mov	r1, r2
   1ae4c:	46ce      	mov	lr, r9
   1ae4e:	dcee      	bgt.n	1ae2e <_vfiprintf_r+0x77a>
   1ae50:	46f2      	mov	sl, lr
   1ae52:	4422      	add	r2, r4
   1ae54:	2807      	cmp	r0, #7
   1ae56:	9211      	str	r2, [sp, #68]	; 0x44
   1ae58:	f8ca 5000 	str.w	r5, [sl]
   1ae5c:	f8ca 4004 	str.w	r4, [sl, #4]
   1ae60:	9010      	str	r0, [sp, #64]	; 0x40
   1ae62:	f300 8085 	bgt.w	1af70 <_vfiprintf_r+0x8bc>
   1ae66:	f10a 0a08 	add.w	sl, sl, #8
   1ae6a:	3001      	adds	r0, #1
   1ae6c:	9905      	ldr	r1, [sp, #20]
   1ae6e:	f8ca b000 	str.w	fp, [sl]
   1ae72:	440a      	add	r2, r1
   1ae74:	2807      	cmp	r0, #7
   1ae76:	9211      	str	r2, [sp, #68]	; 0x44
   1ae78:	f8ca 1004 	str.w	r1, [sl, #4]
   1ae7c:	9010      	str	r0, [sp, #64]	; 0x40
   1ae7e:	f340 8082 	ble.w	1af86 <_vfiprintf_r+0x8d2>
   1ae82:	2a00      	cmp	r2, #0
   1ae84:	f040 8118 	bne.w	1b0b8 <_vfiprintf_r+0xa04>
   1ae88:	9b02      	ldr	r3, [sp, #8]
   1ae8a:	9210      	str	r2, [sp, #64]	; 0x40
   1ae8c:	0758      	lsls	r0, r3, #29
   1ae8e:	d535      	bpl.n	1aefc <_vfiprintf_r+0x848>
   1ae90:	9b08      	ldr	r3, [sp, #32]
   1ae92:	9901      	ldr	r1, [sp, #4]
   1ae94:	1a5c      	subs	r4, r3, r1
   1ae96:	2c00      	cmp	r4, #0
   1ae98:	f340 80e7 	ble.w	1b06a <_vfiprintf_r+0x9b6>
   1ae9c:	46ca      	mov	sl, r9
   1ae9e:	2c10      	cmp	r4, #16
   1aea0:	f340 8218 	ble.w	1b2d4 <_vfiprintf_r+0xc20>
   1aea4:	9910      	ldr	r1, [sp, #64]	; 0x40
   1aea6:	4e8f      	ldr	r6, [pc, #572]	; (1b0e4 <_vfiprintf_r+0xa30>)
   1aea8:	9f06      	ldr	r7, [sp, #24]
   1aeaa:	f8dd b010 	ldr.w	fp, [sp, #16]
   1aeae:	2510      	movs	r5, #16
   1aeb0:	e006      	b.n	1aec0 <_vfiprintf_r+0x80c>
   1aeb2:	1c88      	adds	r0, r1, #2
   1aeb4:	f10a 0a08 	add.w	sl, sl, #8
   1aeb8:	4619      	mov	r1, r3
   1aeba:	3c10      	subs	r4, #16
   1aebc:	2c10      	cmp	r4, #16
   1aebe:	dd11      	ble.n	1aee4 <_vfiprintf_r+0x830>
   1aec0:	1c4b      	adds	r3, r1, #1
   1aec2:	3210      	adds	r2, #16
   1aec4:	2b07      	cmp	r3, #7
   1aec6:	9211      	str	r2, [sp, #68]	; 0x44
   1aec8:	f8ca 6000 	str.w	r6, [sl]
   1aecc:	f8ca 5004 	str.w	r5, [sl, #4]
   1aed0:	9310      	str	r3, [sp, #64]	; 0x40
   1aed2:	ddee      	ble.n	1aeb2 <_vfiprintf_r+0x7fe>
   1aed4:	bb42      	cbnz	r2, 1af28 <_vfiprintf_r+0x874>
   1aed6:	3c10      	subs	r4, #16
   1aed8:	2c10      	cmp	r4, #16
   1aeda:	f04f 0001 	mov.w	r0, #1
   1aede:	4611      	mov	r1, r2
   1aee0:	46ca      	mov	sl, r9
   1aee2:	dced      	bgt.n	1aec0 <_vfiprintf_r+0x80c>
   1aee4:	4422      	add	r2, r4
   1aee6:	2807      	cmp	r0, #7
   1aee8:	9211      	str	r2, [sp, #68]	; 0x44
   1aeea:	f8ca 6000 	str.w	r6, [sl]
   1aeee:	f8ca 4004 	str.w	r4, [sl, #4]
   1aef2:	9010      	str	r0, [sp, #64]	; 0x40
   1aef4:	dd51      	ble.n	1af9a <_vfiprintf_r+0x8e6>
   1aef6:	2a00      	cmp	r2, #0
   1aef8:	f040 819b 	bne.w	1b232 <_vfiprintf_r+0xb7e>
   1aefc:	9b03      	ldr	r3, [sp, #12]
   1aefe:	9a08      	ldr	r2, [sp, #32]
   1af00:	9901      	ldr	r1, [sp, #4]
   1af02:	428a      	cmp	r2, r1
   1af04:	bfac      	ite	ge
   1af06:	189b      	addge	r3, r3, r2
   1af08:	185b      	addlt	r3, r3, r1
   1af0a:	9303      	str	r3, [sp, #12]
   1af0c:	e04e      	b.n	1afac <_vfiprintf_r+0x8f8>
   1af0e:	aa0f      	add	r2, sp, #60	; 0x3c
   1af10:	4651      	mov	r1, sl
   1af12:	4638      	mov	r0, r7
   1af14:	f7ff fb84 	bl	1a620 <__sprint_r.part.0>
   1af18:	2800      	cmp	r0, #0
   1af1a:	f040 813f 	bne.w	1b19c <_vfiprintf_r+0xae8>
   1af1e:	9910      	ldr	r1, [sp, #64]	; 0x40
   1af20:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1af22:	1c48      	adds	r0, r1, #1
   1af24:	46ce      	mov	lr, r9
   1af26:	e77f      	b.n	1ae28 <_vfiprintf_r+0x774>
   1af28:	aa0f      	add	r2, sp, #60	; 0x3c
   1af2a:	4659      	mov	r1, fp
   1af2c:	4638      	mov	r0, r7
   1af2e:	f7ff fb77 	bl	1a620 <__sprint_r.part.0>
   1af32:	b960      	cbnz	r0, 1af4e <_vfiprintf_r+0x89a>
   1af34:	9910      	ldr	r1, [sp, #64]	; 0x40
   1af36:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1af38:	1c48      	adds	r0, r1, #1
   1af3a:	46ca      	mov	sl, r9
   1af3c:	e7bd      	b.n	1aeba <_vfiprintf_r+0x806>
   1af3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1af40:	f8dd b010 	ldr.w	fp, [sp, #16]
   1af44:	2b00      	cmp	r3, #0
   1af46:	f040 81d4 	bne.w	1b2f2 <_vfiprintf_r+0xc3e>
   1af4a:	2300      	movs	r3, #0
   1af4c:	9310      	str	r3, [sp, #64]	; 0x40
   1af4e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   1af52:	f013 0f01 	tst.w	r3, #1
   1af56:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   1af5a:	d102      	bne.n	1af62 <_vfiprintf_r+0x8ae>
   1af5c:	059a      	lsls	r2, r3, #22
   1af5e:	f140 80de 	bpl.w	1b11e <_vfiprintf_r+0xa6a>
   1af62:	065b      	lsls	r3, r3, #25
   1af64:	f53f acb2 	bmi.w	1a8cc <_vfiprintf_r+0x218>
   1af68:	9803      	ldr	r0, [sp, #12]
   1af6a:	b02d      	add	sp, #180	; 0xb4
   1af6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af70:	2a00      	cmp	r2, #0
   1af72:	f040 8106 	bne.w	1b182 <_vfiprintf_r+0xace>
   1af76:	9a05      	ldr	r2, [sp, #20]
   1af78:	921d      	str	r2, [sp, #116]	; 0x74
   1af7a:	2301      	movs	r3, #1
   1af7c:	9211      	str	r2, [sp, #68]	; 0x44
   1af7e:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   1af82:	9310      	str	r3, [sp, #64]	; 0x40
   1af84:	46ca      	mov	sl, r9
   1af86:	f10a 0a08 	add.w	sl, sl, #8
   1af8a:	9b02      	ldr	r3, [sp, #8]
   1af8c:	0759      	lsls	r1, r3, #29
   1af8e:	d504      	bpl.n	1af9a <_vfiprintf_r+0x8e6>
   1af90:	9b08      	ldr	r3, [sp, #32]
   1af92:	9901      	ldr	r1, [sp, #4]
   1af94:	1a5c      	subs	r4, r3, r1
   1af96:	2c00      	cmp	r4, #0
   1af98:	dc81      	bgt.n	1ae9e <_vfiprintf_r+0x7ea>
   1af9a:	9b03      	ldr	r3, [sp, #12]
   1af9c:	9908      	ldr	r1, [sp, #32]
   1af9e:	9801      	ldr	r0, [sp, #4]
   1afa0:	4281      	cmp	r1, r0
   1afa2:	bfac      	ite	ge
   1afa4:	185b      	addge	r3, r3, r1
   1afa6:	181b      	addlt	r3, r3, r0
   1afa8:	9303      	str	r3, [sp, #12]
   1afaa:	bb72      	cbnz	r2, 1b00a <_vfiprintf_r+0x956>
   1afac:	2300      	movs	r3, #0
   1afae:	9310      	str	r3, [sp, #64]	; 0x40
   1afb0:	46ca      	mov	sl, r9
   1afb2:	f7ff bbbc 	b.w	1a72e <_vfiprintf_r+0x7a>
   1afb6:	aa0f      	add	r2, sp, #60	; 0x3c
   1afb8:	9904      	ldr	r1, [sp, #16]
   1afba:	4620      	mov	r0, r4
   1afbc:	f7ff fb30 	bl	1a620 <__sprint_r.part.0>
   1afc0:	bb50      	cbnz	r0, 1b018 <_vfiprintf_r+0x964>
   1afc2:	9910      	ldr	r1, [sp, #64]	; 0x40
   1afc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1afc6:	f101 0e01 	add.w	lr, r1, #1
   1afca:	46cc      	mov	ip, r9
   1afcc:	e548      	b.n	1aa60 <_vfiprintf_r+0x3ac>
   1afce:	2a00      	cmp	r2, #0
   1afd0:	f040 8140 	bne.w	1b254 <_vfiprintf_r+0xba0>
   1afd4:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   1afd8:	2900      	cmp	r1, #0
   1afda:	f000 811b 	beq.w	1b214 <_vfiprintf_r+0xb60>
   1afde:	2201      	movs	r2, #1
   1afe0:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   1afe4:	4610      	mov	r0, r2
   1afe6:	921d      	str	r2, [sp, #116]	; 0x74
   1afe8:	911c      	str	r1, [sp, #112]	; 0x70
   1afea:	46ca      	mov	sl, r9
   1afec:	4601      	mov	r1, r0
   1afee:	f10a 0a08 	add.w	sl, sl, #8
   1aff2:	3001      	adds	r0, #1
   1aff4:	e507      	b.n	1aa06 <_vfiprintf_r+0x352>
   1aff6:	9b02      	ldr	r3, [sp, #8]
   1aff8:	2a01      	cmp	r2, #1
   1affa:	f000 8098 	beq.w	1b12e <_vfiprintf_r+0xa7a>
   1affe:	2a02      	cmp	r2, #2
   1b000:	d10d      	bne.n	1b01e <_vfiprintf_r+0x96a>
   1b002:	9302      	str	r3, [sp, #8]
   1b004:	2600      	movs	r6, #0
   1b006:	2700      	movs	r7, #0
   1b008:	e5b0      	b.n	1ab6c <_vfiprintf_r+0x4b8>
   1b00a:	aa0f      	add	r2, sp, #60	; 0x3c
   1b00c:	9904      	ldr	r1, [sp, #16]
   1b00e:	9806      	ldr	r0, [sp, #24]
   1b010:	f7ff fb06 	bl	1a620 <__sprint_r.part.0>
   1b014:	2800      	cmp	r0, #0
   1b016:	d0c9      	beq.n	1afac <_vfiprintf_r+0x8f8>
   1b018:	f8dd b010 	ldr.w	fp, [sp, #16]
   1b01c:	e797      	b.n	1af4e <_vfiprintf_r+0x89a>
   1b01e:	9302      	str	r3, [sp, #8]
   1b020:	2600      	movs	r6, #0
   1b022:	2700      	movs	r7, #0
   1b024:	4649      	mov	r1, r9
   1b026:	e000      	b.n	1b02a <_vfiprintf_r+0x976>
   1b028:	4659      	mov	r1, fp
   1b02a:	08f2      	lsrs	r2, r6, #3
   1b02c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   1b030:	08f8      	lsrs	r0, r7, #3
   1b032:	f006 0307 	and.w	r3, r6, #7
   1b036:	4607      	mov	r7, r0
   1b038:	4616      	mov	r6, r2
   1b03a:	3330      	adds	r3, #48	; 0x30
   1b03c:	ea56 0207 	orrs.w	r2, r6, r7
   1b040:	f801 3c01 	strb.w	r3, [r1, #-1]
   1b044:	f101 3bff 	add.w	fp, r1, #4294967295
   1b048:	d1ee      	bne.n	1b028 <_vfiprintf_r+0x974>
   1b04a:	9a02      	ldr	r2, [sp, #8]
   1b04c:	07d6      	lsls	r6, r2, #31
   1b04e:	f57f ad9d 	bpl.w	1ab8c <_vfiprintf_r+0x4d8>
   1b052:	2b30      	cmp	r3, #48	; 0x30
   1b054:	f43f ad9a 	beq.w	1ab8c <_vfiprintf_r+0x4d8>
   1b058:	3902      	subs	r1, #2
   1b05a:	2330      	movs	r3, #48	; 0x30
   1b05c:	f80b 3c01 	strb.w	r3, [fp, #-1]
   1b060:	eba9 0301 	sub.w	r3, r9, r1
   1b064:	9305      	str	r3, [sp, #20]
   1b066:	468b      	mov	fp, r1
   1b068:	e476      	b.n	1a958 <_vfiprintf_r+0x2a4>
   1b06a:	9b03      	ldr	r3, [sp, #12]
   1b06c:	9a08      	ldr	r2, [sp, #32]
   1b06e:	428a      	cmp	r2, r1
   1b070:	bfac      	ite	ge
   1b072:	189b      	addge	r3, r3, r2
   1b074:	185b      	addlt	r3, r3, r1
   1b076:	9303      	str	r3, [sp, #12]
   1b078:	e798      	b.n	1afac <_vfiprintf_r+0x8f8>
   1b07a:	2202      	movs	r2, #2
   1b07c:	e44d      	b.n	1a91a <_vfiprintf_r+0x266>
   1b07e:	2f00      	cmp	r7, #0
   1b080:	bf08      	it	eq
   1b082:	2e0a      	cmpeq	r6, #10
   1b084:	d352      	bcc.n	1b12c <_vfiprintf_r+0xa78>
   1b086:	46cb      	mov	fp, r9
   1b088:	4630      	mov	r0, r6
   1b08a:	4639      	mov	r1, r7
   1b08c:	220a      	movs	r2, #10
   1b08e:	2300      	movs	r3, #0
   1b090:	f7fb f842 	bl	16118 <__aeabi_uldivmod>
   1b094:	3230      	adds	r2, #48	; 0x30
   1b096:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   1b09a:	4630      	mov	r0, r6
   1b09c:	4639      	mov	r1, r7
   1b09e:	2300      	movs	r3, #0
   1b0a0:	220a      	movs	r2, #10
   1b0a2:	f7fb f839 	bl	16118 <__aeabi_uldivmod>
   1b0a6:	4606      	mov	r6, r0
   1b0a8:	460f      	mov	r7, r1
   1b0aa:	ea56 0307 	orrs.w	r3, r6, r7
   1b0ae:	d1eb      	bne.n	1b088 <_vfiprintf_r+0x9d4>
   1b0b0:	e56c      	b.n	1ab8c <_vfiprintf_r+0x4d8>
   1b0b2:	9405      	str	r4, [sp, #20]
   1b0b4:	46cb      	mov	fp, r9
   1b0b6:	e44f      	b.n	1a958 <_vfiprintf_r+0x2a4>
   1b0b8:	aa0f      	add	r2, sp, #60	; 0x3c
   1b0ba:	9904      	ldr	r1, [sp, #16]
   1b0bc:	9806      	ldr	r0, [sp, #24]
   1b0be:	f7ff faaf 	bl	1a620 <__sprint_r.part.0>
   1b0c2:	2800      	cmp	r0, #0
   1b0c4:	d1a8      	bne.n	1b018 <_vfiprintf_r+0x964>
   1b0c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b0c8:	46ca      	mov	sl, r9
   1b0ca:	e75e      	b.n	1af8a <_vfiprintf_r+0x8d6>
   1b0cc:	aa0f      	add	r2, sp, #60	; 0x3c
   1b0ce:	9904      	ldr	r1, [sp, #16]
   1b0d0:	9806      	ldr	r0, [sp, #24]
   1b0d2:	f7ff faa5 	bl	1a620 <__sprint_r.part.0>
   1b0d6:	2800      	cmp	r0, #0
   1b0d8:	d19e      	bne.n	1b018 <_vfiprintf_r+0x964>
   1b0da:	46ca      	mov	sl, r9
   1b0dc:	f7ff bbc0 	b.w	1a860 <_vfiprintf_r+0x1ac>
   1b0e0:	0003ebe0 	.word	0x0003ebe0
   1b0e4:	0003ebd0 	.word	0x0003ebd0
   1b0e8:	3104      	adds	r1, #4
   1b0ea:	6816      	ldr	r6, [r2, #0]
   1b0ec:	9107      	str	r1, [sp, #28]
   1b0ee:	2201      	movs	r2, #1
   1b0f0:	2700      	movs	r7, #0
   1b0f2:	e412      	b.n	1a91a <_vfiprintf_r+0x266>
   1b0f4:	9807      	ldr	r0, [sp, #28]
   1b0f6:	4601      	mov	r1, r0
   1b0f8:	3104      	adds	r1, #4
   1b0fa:	6806      	ldr	r6, [r0, #0]
   1b0fc:	9107      	str	r1, [sp, #28]
   1b0fe:	2700      	movs	r7, #0
   1b100:	e40b      	b.n	1a91a <_vfiprintf_r+0x266>
   1b102:	680e      	ldr	r6, [r1, #0]
   1b104:	3104      	adds	r1, #4
   1b106:	9107      	str	r1, [sp, #28]
   1b108:	2700      	movs	r7, #0
   1b10a:	e591      	b.n	1ac30 <_vfiprintf_r+0x57c>
   1b10c:	9907      	ldr	r1, [sp, #28]
   1b10e:	680e      	ldr	r6, [r1, #0]
   1b110:	460a      	mov	r2, r1
   1b112:	17f7      	asrs	r7, r6, #31
   1b114:	3204      	adds	r2, #4
   1b116:	9207      	str	r2, [sp, #28]
   1b118:	4630      	mov	r0, r6
   1b11a:	4639      	mov	r1, r7
   1b11c:	e50f      	b.n	1ab3e <_vfiprintf_r+0x48a>
   1b11e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   1b122:	f7fc fc27 	bl	17974 <__retarget_lock_release_recursive>
   1b126:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   1b12a:	e71a      	b.n	1af62 <_vfiprintf_r+0x8ae>
   1b12c:	9b02      	ldr	r3, [sp, #8]
   1b12e:	9302      	str	r3, [sp, #8]
   1b130:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   1b134:	3630      	adds	r6, #48	; 0x30
   1b136:	2301      	movs	r3, #1
   1b138:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   1b13c:	9305      	str	r3, [sp, #20]
   1b13e:	e40b      	b.n	1a958 <_vfiprintf_r+0x2a4>
   1b140:	aa0f      	add	r2, sp, #60	; 0x3c
   1b142:	9904      	ldr	r1, [sp, #16]
   1b144:	9806      	ldr	r0, [sp, #24]
   1b146:	f7ff fa6b 	bl	1a620 <__sprint_r.part.0>
   1b14a:	2800      	cmp	r0, #0
   1b14c:	f47f af64 	bne.w	1b018 <_vfiprintf_r+0x964>
   1b150:	9910      	ldr	r1, [sp, #64]	; 0x40
   1b152:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b154:	1c48      	adds	r0, r1, #1
   1b156:	46ca      	mov	sl, r9
   1b158:	e651      	b.n	1adfe <_vfiprintf_r+0x74a>
   1b15a:	aa0f      	add	r2, sp, #60	; 0x3c
   1b15c:	9904      	ldr	r1, [sp, #16]
   1b15e:	9806      	ldr	r0, [sp, #24]
   1b160:	f7ff fa5e 	bl	1a620 <__sprint_r.part.0>
   1b164:	2800      	cmp	r0, #0
   1b166:	f47f af57 	bne.w	1b018 <_vfiprintf_r+0x964>
   1b16a:	9910      	ldr	r1, [sp, #64]	; 0x40
   1b16c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b16e:	1c48      	adds	r0, r1, #1
   1b170:	46ca      	mov	sl, r9
   1b172:	e448      	b.n	1aa06 <_vfiprintf_r+0x352>
   1b174:	2a00      	cmp	r2, #0
   1b176:	f040 8091 	bne.w	1b29c <_vfiprintf_r+0xbe8>
   1b17a:	2001      	movs	r0, #1
   1b17c:	4611      	mov	r1, r2
   1b17e:	46ca      	mov	sl, r9
   1b180:	e641      	b.n	1ae06 <_vfiprintf_r+0x752>
   1b182:	aa0f      	add	r2, sp, #60	; 0x3c
   1b184:	9904      	ldr	r1, [sp, #16]
   1b186:	9806      	ldr	r0, [sp, #24]
   1b188:	f7ff fa4a 	bl	1a620 <__sprint_r.part.0>
   1b18c:	2800      	cmp	r0, #0
   1b18e:	f47f af43 	bne.w	1b018 <_vfiprintf_r+0x964>
   1b192:	9810      	ldr	r0, [sp, #64]	; 0x40
   1b194:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b196:	3001      	adds	r0, #1
   1b198:	46ca      	mov	sl, r9
   1b19a:	e667      	b.n	1ae6c <_vfiprintf_r+0x7b8>
   1b19c:	46d3      	mov	fp, sl
   1b19e:	e6d6      	b.n	1af4e <_vfiprintf_r+0x89a>
   1b1a0:	9e07      	ldr	r6, [sp, #28]
   1b1a2:	3607      	adds	r6, #7
   1b1a4:	f026 0207 	bic.w	r2, r6, #7
   1b1a8:	f102 0108 	add.w	r1, r2, #8
   1b1ac:	e9d2 6700 	ldrd	r6, r7, [r2]
   1b1b0:	9107      	str	r1, [sp, #28]
   1b1b2:	2201      	movs	r2, #1
   1b1b4:	f7ff bbb1 	b.w	1a91a <_vfiprintf_r+0x266>
   1b1b8:	9e07      	ldr	r6, [sp, #28]
   1b1ba:	3607      	adds	r6, #7
   1b1bc:	f026 0607 	bic.w	r6, r6, #7
   1b1c0:	e9d6 0100 	ldrd	r0, r1, [r6]
   1b1c4:	f106 0208 	add.w	r2, r6, #8
   1b1c8:	9207      	str	r2, [sp, #28]
   1b1ca:	4606      	mov	r6, r0
   1b1cc:	460f      	mov	r7, r1
   1b1ce:	e4b6      	b.n	1ab3e <_vfiprintf_r+0x48a>
   1b1d0:	9e07      	ldr	r6, [sp, #28]
   1b1d2:	3607      	adds	r6, #7
   1b1d4:	f026 0207 	bic.w	r2, r6, #7
   1b1d8:	f102 0108 	add.w	r1, r2, #8
   1b1dc:	e9d2 6700 	ldrd	r6, r7, [r2]
   1b1e0:	9107      	str	r1, [sp, #28]
   1b1e2:	2200      	movs	r2, #0
   1b1e4:	f7ff bb99 	b.w	1a91a <_vfiprintf_r+0x266>
   1b1e8:	9e07      	ldr	r6, [sp, #28]
   1b1ea:	3607      	adds	r6, #7
   1b1ec:	f026 0107 	bic.w	r1, r6, #7
   1b1f0:	f101 0008 	add.w	r0, r1, #8
   1b1f4:	9007      	str	r0, [sp, #28]
   1b1f6:	e9d1 6700 	ldrd	r6, r7, [r1]
   1b1fa:	e519      	b.n	1ac30 <_vfiprintf_r+0x57c>
   1b1fc:	46cb      	mov	fp, r9
   1b1fe:	f7ff bbab 	b.w	1a958 <_vfiprintf_r+0x2a4>
   1b202:	252d      	movs	r5, #45	; 0x2d
   1b204:	4276      	negs	r6, r6
   1b206:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   1b20a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1b20e:	2201      	movs	r2, #1
   1b210:	f7ff bb88 	b.w	1a924 <_vfiprintf_r+0x270>
   1b214:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b216:	b9b3      	cbnz	r3, 1b246 <_vfiprintf_r+0xb92>
   1b218:	4611      	mov	r1, r2
   1b21a:	2001      	movs	r0, #1
   1b21c:	46ca      	mov	sl, r9
   1b21e:	e5f2      	b.n	1ae06 <_vfiprintf_r+0x752>
   1b220:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   1b224:	f7fc fba6 	bl	17974 <__retarget_lock_release_recursive>
   1b228:	f04f 33ff 	mov.w	r3, #4294967295
   1b22c:	9303      	str	r3, [sp, #12]
   1b22e:	f7ff bb50 	b.w	1a8d2 <_vfiprintf_r+0x21e>
   1b232:	aa0f      	add	r2, sp, #60	; 0x3c
   1b234:	9904      	ldr	r1, [sp, #16]
   1b236:	9806      	ldr	r0, [sp, #24]
   1b238:	f7ff f9f2 	bl	1a620 <__sprint_r.part.0>
   1b23c:	2800      	cmp	r0, #0
   1b23e:	f47f aeeb 	bne.w	1b018 <_vfiprintf_r+0x964>
   1b242:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b244:	e6a9      	b.n	1af9a <_vfiprintf_r+0x8e6>
   1b246:	ab0e      	add	r3, sp, #56	; 0x38
   1b248:	2202      	movs	r2, #2
   1b24a:	931c      	str	r3, [sp, #112]	; 0x70
   1b24c:	921d      	str	r2, [sp, #116]	; 0x74
   1b24e:	2001      	movs	r0, #1
   1b250:	46ca      	mov	sl, r9
   1b252:	e5d0      	b.n	1adf6 <_vfiprintf_r+0x742>
   1b254:	aa0f      	add	r2, sp, #60	; 0x3c
   1b256:	9904      	ldr	r1, [sp, #16]
   1b258:	9806      	ldr	r0, [sp, #24]
   1b25a:	f7ff f9e1 	bl	1a620 <__sprint_r.part.0>
   1b25e:	2800      	cmp	r0, #0
   1b260:	f47f aeda 	bne.w	1b018 <_vfiprintf_r+0x964>
   1b264:	9910      	ldr	r1, [sp, #64]	; 0x40
   1b266:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b268:	1c48      	adds	r0, r1, #1
   1b26a:	46ca      	mov	sl, r9
   1b26c:	e5a4      	b.n	1adb8 <_vfiprintf_r+0x704>
   1b26e:	9a07      	ldr	r2, [sp, #28]
   1b270:	9903      	ldr	r1, [sp, #12]
   1b272:	6813      	ldr	r3, [r2, #0]
   1b274:	17cd      	asrs	r5, r1, #31
   1b276:	4608      	mov	r0, r1
   1b278:	3204      	adds	r2, #4
   1b27a:	4629      	mov	r1, r5
   1b27c:	9207      	str	r2, [sp, #28]
   1b27e:	e9c3 0100 	strd	r0, r1, [r3]
   1b282:	f7ff ba54 	b.w	1a72e <_vfiprintf_r+0x7a>
   1b286:	4658      	mov	r0, fp
   1b288:	9607      	str	r6, [sp, #28]
   1b28a:	9302      	str	r3, [sp, #8]
   1b28c:	f7fd fed8 	bl	19040 <strlen>
   1b290:	2400      	movs	r4, #0
   1b292:	9005      	str	r0, [sp, #20]
   1b294:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   1b298:	f7ff bb5e 	b.w	1a958 <_vfiprintf_r+0x2a4>
   1b29c:	aa0f      	add	r2, sp, #60	; 0x3c
   1b29e:	9904      	ldr	r1, [sp, #16]
   1b2a0:	9806      	ldr	r0, [sp, #24]
   1b2a2:	f7ff f9bd 	bl	1a620 <__sprint_r.part.0>
   1b2a6:	2800      	cmp	r0, #0
   1b2a8:	f47f aeb6 	bne.w	1b018 <_vfiprintf_r+0x964>
   1b2ac:	9910      	ldr	r1, [sp, #64]	; 0x40
   1b2ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b2b0:	1c48      	adds	r0, r1, #1
   1b2b2:	46ca      	mov	sl, r9
   1b2b4:	e5a7      	b.n	1ae06 <_vfiprintf_r+0x752>
   1b2b6:	9910      	ldr	r1, [sp, #64]	; 0x40
   1b2b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b2ba:	4e20      	ldr	r6, [pc, #128]	; (1b33c <_vfiprintf_r+0xc88>)
   1b2bc:	3101      	adds	r1, #1
   1b2be:	f7ff bb90 	b.w	1a9e2 <_vfiprintf_r+0x32e>
   1b2c2:	2c06      	cmp	r4, #6
   1b2c4:	bf28      	it	cs
   1b2c6:	2406      	movcs	r4, #6
   1b2c8:	9405      	str	r4, [sp, #20]
   1b2ca:	9607      	str	r6, [sp, #28]
   1b2cc:	9401      	str	r4, [sp, #4]
   1b2ce:	f8df b070 	ldr.w	fp, [pc, #112]	; 1b340 <_vfiprintf_r+0xc8c>
   1b2d2:	e4d5      	b.n	1ac80 <_vfiprintf_r+0x5cc>
   1b2d4:	9810      	ldr	r0, [sp, #64]	; 0x40
   1b2d6:	4e19      	ldr	r6, [pc, #100]	; (1b33c <_vfiprintf_r+0xc88>)
   1b2d8:	3001      	adds	r0, #1
   1b2da:	e603      	b.n	1aee4 <_vfiprintf_r+0x830>
   1b2dc:	9405      	str	r4, [sp, #20]
   1b2de:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   1b2e2:	9607      	str	r6, [sp, #28]
   1b2e4:	9302      	str	r3, [sp, #8]
   1b2e6:	4604      	mov	r4, r0
   1b2e8:	f7ff bb36 	b.w	1a958 <_vfiprintf_r+0x2a4>
   1b2ec:	4686      	mov	lr, r0
   1b2ee:	f7ff bbce 	b.w	1aa8e <_vfiprintf_r+0x3da>
   1b2f2:	9806      	ldr	r0, [sp, #24]
   1b2f4:	aa0f      	add	r2, sp, #60	; 0x3c
   1b2f6:	4659      	mov	r1, fp
   1b2f8:	f7ff f992 	bl	1a620 <__sprint_r.part.0>
   1b2fc:	2800      	cmp	r0, #0
   1b2fe:	f43f ae24 	beq.w	1af4a <_vfiprintf_r+0x896>
   1b302:	e624      	b.n	1af4e <_vfiprintf_r+0x89a>
   1b304:	9907      	ldr	r1, [sp, #28]
   1b306:	f898 2001 	ldrb.w	r2, [r8, #1]
   1b30a:	680c      	ldr	r4, [r1, #0]
   1b30c:	3104      	adds	r1, #4
   1b30e:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   1b312:	46b8      	mov	r8, r7
   1b314:	9107      	str	r1, [sp, #28]
   1b316:	f7ff ba3f 	b.w	1a798 <_vfiprintf_r+0xe4>
   1b31a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1b31e:	e43c      	b.n	1ab9a <_vfiprintf_r+0x4e6>
   1b320:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1b324:	e521      	b.n	1ad6a <_vfiprintf_r+0x6b6>
   1b326:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1b32a:	f7ff bbf4 	b.w	1ab16 <_vfiprintf_r+0x462>
   1b32e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1b332:	e491      	b.n	1ac58 <_vfiprintf_r+0x5a4>
   1b334:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1b338:	e469      	b.n	1ac0e <_vfiprintf_r+0x55a>
   1b33a:	bf00      	nop
   1b33c:	0003ebd0 	.word	0x0003ebd0
   1b340:	0003eba8 	.word	0x0003eba8

0001b344 <__sbprintf>:
   1b344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b348:	460c      	mov	r4, r1
   1b34a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   1b34e:	8989      	ldrh	r1, [r1, #12]
   1b350:	6e66      	ldr	r6, [r4, #100]	; 0x64
   1b352:	89e5      	ldrh	r5, [r4, #14]
   1b354:	9619      	str	r6, [sp, #100]	; 0x64
   1b356:	f021 0102 	bic.w	r1, r1, #2
   1b35a:	4606      	mov	r6, r0
   1b35c:	69e0      	ldr	r0, [r4, #28]
   1b35e:	f8ad 100c 	strh.w	r1, [sp, #12]
   1b362:	4617      	mov	r7, r2
   1b364:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1b368:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1b36a:	f8ad 500e 	strh.w	r5, [sp, #14]
   1b36e:	4698      	mov	r8, r3
   1b370:	ad1a      	add	r5, sp, #104	; 0x68
   1b372:	2300      	movs	r3, #0
   1b374:	9007      	str	r0, [sp, #28]
   1b376:	a816      	add	r0, sp, #88	; 0x58
   1b378:	9209      	str	r2, [sp, #36]	; 0x24
   1b37a:	9306      	str	r3, [sp, #24]
   1b37c:	9500      	str	r5, [sp, #0]
   1b37e:	9504      	str	r5, [sp, #16]
   1b380:	9102      	str	r1, [sp, #8]
   1b382:	9105      	str	r1, [sp, #20]
   1b384:	f7fc faf0 	bl	17968 <__retarget_lock_init_recursive>
   1b388:	4643      	mov	r3, r8
   1b38a:	463a      	mov	r2, r7
   1b38c:	4669      	mov	r1, sp
   1b38e:	4630      	mov	r0, r6
   1b390:	f7ff f990 	bl	1a6b4 <_vfiprintf_r>
   1b394:	1e05      	subs	r5, r0, #0
   1b396:	db07      	blt.n	1b3a8 <__sbprintf+0x64>
   1b398:	4630      	mov	r0, r6
   1b39a:	4669      	mov	r1, sp
   1b39c:	f002 fcee 	bl	1dd7c <_fflush_r>
   1b3a0:	2800      	cmp	r0, #0
   1b3a2:	bf18      	it	ne
   1b3a4:	f04f 35ff 	movne.w	r5, #4294967295
   1b3a8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1b3ac:	065b      	lsls	r3, r3, #25
   1b3ae:	d503      	bpl.n	1b3b8 <__sbprintf+0x74>
   1b3b0:	89a3      	ldrh	r3, [r4, #12]
   1b3b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b3b6:	81a3      	strh	r3, [r4, #12]
   1b3b8:	9816      	ldr	r0, [sp, #88]	; 0x58
   1b3ba:	f7fc fad7 	bl	1796c <__retarget_lock_close_recursive>
   1b3be:	4628      	mov	r0, r5
   1b3c0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   1b3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b3c8 <_vfprintf_r>:
   1b3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3cc:	b0c1      	sub	sp, #260	; 0x104
   1b3ce:	461d      	mov	r5, r3
   1b3d0:	468a      	mov	sl, r1
   1b3d2:	4691      	mov	r9, r2
   1b3d4:	4604      	mov	r4, r0
   1b3d6:	9008      	str	r0, [sp, #32]
   1b3d8:	f002 ff70 	bl	1e2bc <_localeconv_r>
   1b3dc:	6803      	ldr	r3, [r0, #0]
   1b3de:	9315      	str	r3, [sp, #84]	; 0x54
   1b3e0:	4618      	mov	r0, r3
   1b3e2:	f7fd fe2d 	bl	19040 <strlen>
   1b3e6:	950e      	str	r5, [sp, #56]	; 0x38
   1b3e8:	9014      	str	r0, [sp, #80]	; 0x50
   1b3ea:	b11c      	cbz	r4, 1b3f4 <_vfprintf_r+0x2c>
   1b3ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1b3ee:	2b00      	cmp	r3, #0
   1b3f0:	f000 825f 	beq.w	1b8b2 <_vfprintf_r+0x4ea>
   1b3f4:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   1b3f8:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
   1b3fc:	f013 0f01 	tst.w	r3, #1
   1b400:	b293      	uxth	r3, r2
   1b402:	d102      	bne.n	1b40a <_vfprintf_r+0x42>
   1b404:	0599      	lsls	r1, r3, #22
   1b406:	f140 8275 	bpl.w	1b8f4 <_vfprintf_r+0x52c>
   1b40a:	049f      	lsls	r7, r3, #18
   1b40c:	d40a      	bmi.n	1b424 <_vfprintf_r+0x5c>
   1b40e:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
   1b412:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
   1b416:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   1b41a:	f8aa 300c 	strh.w	r3, [sl, #12]
   1b41e:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
   1b422:	b29b      	uxth	r3, r3
   1b424:	071e      	lsls	r6, r3, #28
   1b426:	f140 8223 	bpl.w	1b870 <_vfprintf_r+0x4a8>
   1b42a:	f8da 2010 	ldr.w	r2, [sl, #16]
   1b42e:	2a00      	cmp	r2, #0
   1b430:	f000 821e 	beq.w	1b870 <_vfprintf_r+0x4a8>
   1b434:	f003 021a 	and.w	r2, r3, #26
   1b438:	2a0a      	cmp	r2, #10
   1b43a:	f000 823e 	beq.w	1b8ba <_vfprintf_r+0x4f2>
   1b43e:	2300      	movs	r3, #0
   1b440:	4618      	mov	r0, r3
   1b442:	9311      	str	r3, [sp, #68]	; 0x44
   1b444:	9313      	str	r3, [sp, #76]	; 0x4c
   1b446:	9312      	str	r3, [sp, #72]	; 0x48
   1b448:	9325      	str	r3, [sp, #148]	; 0x94
   1b44a:	9324      	str	r3, [sp, #144]	; 0x90
   1b44c:	9318      	str	r3, [sp, #96]	; 0x60
   1b44e:	9319      	str	r3, [sp, #100]	; 0x64
   1b450:	930b      	str	r3, [sp, #44]	; 0x2c
   1b452:	ab30      	add	r3, sp, #192	; 0xc0
   1b454:	9323      	str	r3, [sp, #140]	; 0x8c
   1b456:	4698      	mov	r8, r3
   1b458:	9016      	str	r0, [sp, #88]	; 0x58
   1b45a:	9017      	str	r0, [sp, #92]	; 0x5c
   1b45c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   1b460:	f899 3000 	ldrb.w	r3, [r9]
   1b464:	464c      	mov	r4, r9
   1b466:	b1eb      	cbz	r3, 1b4a4 <_vfprintf_r+0xdc>
   1b468:	2b25      	cmp	r3, #37	; 0x25
   1b46a:	d102      	bne.n	1b472 <_vfprintf_r+0xaa>
   1b46c:	e01a      	b.n	1b4a4 <_vfprintf_r+0xdc>
   1b46e:	2b25      	cmp	r3, #37	; 0x25
   1b470:	d003      	beq.n	1b47a <_vfprintf_r+0xb2>
   1b472:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1b476:	2b00      	cmp	r3, #0
   1b478:	d1f9      	bne.n	1b46e <_vfprintf_r+0xa6>
   1b47a:	eba4 0509 	sub.w	r5, r4, r9
   1b47e:	b18d      	cbz	r5, 1b4a4 <_vfprintf_r+0xdc>
   1b480:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1b482:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1b484:	f8c8 9000 	str.w	r9, [r8]
   1b488:	3301      	adds	r3, #1
   1b48a:	442a      	add	r2, r5
   1b48c:	2b07      	cmp	r3, #7
   1b48e:	f8c8 5004 	str.w	r5, [r8, #4]
   1b492:	9225      	str	r2, [sp, #148]	; 0x94
   1b494:	9324      	str	r3, [sp, #144]	; 0x90
   1b496:	f300 8201 	bgt.w	1b89c <_vfprintf_r+0x4d4>
   1b49a:	f108 0808 	add.w	r8, r8, #8
   1b49e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b4a0:	442b      	add	r3, r5
   1b4a2:	930b      	str	r3, [sp, #44]	; 0x2c
   1b4a4:	7823      	ldrb	r3, [r4, #0]
   1b4a6:	2b00      	cmp	r3, #0
   1b4a8:	f000 83f0 	beq.w	1bc8c <_vfprintf_r+0x8c4>
   1b4ac:	2300      	movs	r3, #0
   1b4ae:	461a      	mov	r2, r3
   1b4b0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1b4b4:	4619      	mov	r1, r3
   1b4b6:	930c      	str	r3, [sp, #48]	; 0x30
   1b4b8:	469b      	mov	fp, r3
   1b4ba:	7866      	ldrb	r6, [r4, #1]
   1b4bc:	f04f 33ff 	mov.w	r3, #4294967295
   1b4c0:	f104 0901 	add.w	r9, r4, #1
   1b4c4:	9309      	str	r3, [sp, #36]	; 0x24
   1b4c6:	f109 0901 	add.w	r9, r9, #1
   1b4ca:	f1a6 0320 	sub.w	r3, r6, #32
   1b4ce:	2b58      	cmp	r3, #88	; 0x58
   1b4d0:	f200 83bf 	bhi.w	1bc52 <_vfprintf_r+0x88a>
   1b4d4:	e8df f013 	tbh	[pc, r3, lsl #1]
   1b4d8:	03bd02e0 	.word	0x03bd02e0
   1b4dc:	034f03bd 	.word	0x034f03bd
   1b4e0:	03bd03bd 	.word	0x03bd03bd
   1b4e4:	03bd03bd 	.word	0x03bd03bd
   1b4e8:	03bd03bd 	.word	0x03bd03bd
   1b4ec:	03080354 	.word	0x03080354
   1b4f0:	021a03bd 	.word	0x021a03bd
   1b4f4:	03bd02e8 	.word	0x03bd02e8
   1b4f8:	033a0303 	.word	0x033a0303
   1b4fc:	033a033a 	.word	0x033a033a
   1b500:	033a033a 	.word	0x033a033a
   1b504:	033a033a 	.word	0x033a033a
   1b508:	033a033a 	.word	0x033a033a
   1b50c:	03bd03bd 	.word	0x03bd03bd
   1b510:	03bd03bd 	.word	0x03bd03bd
   1b514:	03bd03bd 	.word	0x03bd03bd
   1b518:	03bd03bd 	.word	0x03bd03bd
   1b51c:	03bd03bd 	.word	0x03bd03bd
   1b520:	03620349 	.word	0x03620349
   1b524:	036203bd 	.word	0x036203bd
   1b528:	03bd03bd 	.word	0x03bd03bd
   1b52c:	03bd03bd 	.word	0x03bd03bd
   1b530:	03bd03a2 	.word	0x03bd03a2
   1b534:	006f03bd 	.word	0x006f03bd
   1b538:	03bd03bd 	.word	0x03bd03bd
   1b53c:	03bd03bd 	.word	0x03bd03bd
   1b540:	005903bd 	.word	0x005903bd
   1b544:	03bd03bd 	.word	0x03bd03bd
   1b548:	03bd031e 	.word	0x03bd031e
   1b54c:	03bd03bd 	.word	0x03bd03bd
   1b550:	03bd03bd 	.word	0x03bd03bd
   1b554:	03bd03bd 	.word	0x03bd03bd
   1b558:	03bd03bd 	.word	0x03bd03bd
   1b55c:	032403bd 	.word	0x032403bd
   1b560:	03620273 	.word	0x03620273
   1b564:	03620362 	.word	0x03620362
   1b568:	027302b7 	.word	0x027302b7
   1b56c:	03bd03bd 	.word	0x03bd03bd
   1b570:	03bd02bc 	.word	0x03bd02bc
   1b574:	007102c9 	.word	0x007102c9
   1b578:	0247030d 	.word	0x0247030d
   1b57c:	025203bd 	.word	0x025203bd
   1b580:	005b03bd 	.word	0x005b03bd
   1b584:	03bd03bd 	.word	0x03bd03bd
   1b588:	021f      	.short	0x021f
   1b58a:	f04b 0b10 	orr.w	fp, fp, #16
   1b58e:	f01b 0f20 	tst.w	fp, #32
   1b592:	f040 8353 	bne.w	1bc3c <_vfprintf_r+0x874>
   1b596:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1b598:	f01b 0f10 	tst.w	fp, #16
   1b59c:	4613      	mov	r3, r2
   1b59e:	f040 85b4 	bne.w	1c10a <_vfprintf_r+0xd42>
   1b5a2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1b5a6:	f000 85b0 	beq.w	1c10a <_vfprintf_r+0xd42>
   1b5aa:	8814      	ldrh	r4, [r2, #0]
   1b5ac:	3204      	adds	r2, #4
   1b5ae:	2500      	movs	r5, #0
   1b5b0:	2301      	movs	r3, #1
   1b5b2:	920e      	str	r2, [sp, #56]	; 0x38
   1b5b4:	e014      	b.n	1b5e0 <_vfprintf_r+0x218>
   1b5b6:	f04b 0b10 	orr.w	fp, fp, #16
   1b5ba:	f01b 0320 	ands.w	r3, fp, #32
   1b5be:	f040 8332 	bne.w	1bc26 <_vfprintf_r+0x85e>
   1b5c2:	f01b 0210 	ands.w	r2, fp, #16
   1b5c6:	f040 8589 	bne.w	1c0dc <_vfprintf_r+0xd14>
   1b5ca:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   1b5ce:	f000 8585 	beq.w	1c0dc <_vfprintf_r+0xd14>
   1b5d2:	990e      	ldr	r1, [sp, #56]	; 0x38
   1b5d4:	4613      	mov	r3, r2
   1b5d6:	460a      	mov	r2, r1
   1b5d8:	3204      	adds	r2, #4
   1b5da:	880c      	ldrh	r4, [r1, #0]
   1b5dc:	920e      	str	r2, [sp, #56]	; 0x38
   1b5de:	2500      	movs	r5, #0
   1b5e0:	f04f 0a00 	mov.w	sl, #0
   1b5e4:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
   1b5e8:	9909      	ldr	r1, [sp, #36]	; 0x24
   1b5ea:	1c4a      	adds	r2, r1, #1
   1b5ec:	f000 820b 	beq.w	1ba06 <_vfprintf_r+0x63e>
   1b5f0:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   1b5f4:	9206      	str	r2, [sp, #24]
   1b5f6:	ea54 0205 	orrs.w	r2, r4, r5
   1b5fa:	f040 820a 	bne.w	1ba12 <_vfprintf_r+0x64a>
   1b5fe:	2900      	cmp	r1, #0
   1b600:	f040 846f 	bne.w	1bee2 <_vfprintf_r+0xb1a>
   1b604:	2b00      	cmp	r3, #0
   1b606:	f040 852d 	bne.w	1c064 <_vfprintf_r+0xc9c>
   1b60a:	f01b 0301 	ands.w	r3, fp, #1
   1b60e:	930d      	str	r3, [sp, #52]	; 0x34
   1b610:	f000 8668 	beq.w	1c2e4 <_vfprintf_r+0xf1c>
   1b614:	af40      	add	r7, sp, #256	; 0x100
   1b616:	2330      	movs	r3, #48	; 0x30
   1b618:	f807 3d41 	strb.w	r3, [r7, #-65]!
   1b61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b61e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1b620:	4293      	cmp	r3, r2
   1b622:	bfb8      	it	lt
   1b624:	4613      	movlt	r3, r2
   1b626:	9307      	str	r3, [sp, #28]
   1b628:	2300      	movs	r3, #0
   1b62a:	9310      	str	r3, [sp, #64]	; 0x40
   1b62c:	f1ba 0f00 	cmp.w	sl, #0
   1b630:	d002      	beq.n	1b638 <_vfprintf_r+0x270>
   1b632:	9b07      	ldr	r3, [sp, #28]
   1b634:	3301      	adds	r3, #1
   1b636:	9307      	str	r3, [sp, #28]
   1b638:	9b06      	ldr	r3, [sp, #24]
   1b63a:	f013 0302 	ands.w	r3, r3, #2
   1b63e:	930f      	str	r3, [sp, #60]	; 0x3c
   1b640:	d002      	beq.n	1b648 <_vfprintf_r+0x280>
   1b642:	9b07      	ldr	r3, [sp, #28]
   1b644:	3302      	adds	r3, #2
   1b646:	9307      	str	r3, [sp, #28]
   1b648:	9b06      	ldr	r3, [sp, #24]
   1b64a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   1b64e:	f040 831b 	bne.w	1bc88 <_vfprintf_r+0x8c0>
   1b652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b654:	9a07      	ldr	r2, [sp, #28]
   1b656:	eba3 0b02 	sub.w	fp, r3, r2
   1b65a:	f1bb 0f00 	cmp.w	fp, #0
   1b65e:	f340 8313 	ble.w	1bc88 <_vfprintf_r+0x8c0>
   1b662:	f1bb 0f10 	cmp.w	fp, #16
   1b666:	9925      	ldr	r1, [sp, #148]	; 0x94
   1b668:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1b66a:	dd28      	ble.n	1b6be <_vfprintf_r+0x2f6>
   1b66c:	4643      	mov	r3, r8
   1b66e:	2410      	movs	r4, #16
   1b670:	46a8      	mov	r8, r5
   1b672:	f8dd a020 	ldr.w	sl, [sp, #32]
   1b676:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1b678:	e006      	b.n	1b688 <_vfprintf_r+0x2c0>
   1b67a:	f1ab 0b10 	sub.w	fp, fp, #16
   1b67e:	f1bb 0f10 	cmp.w	fp, #16
   1b682:	f103 0308 	add.w	r3, r3, #8
   1b686:	dd18      	ble.n	1b6ba <_vfprintf_r+0x2f2>
   1b688:	3201      	adds	r2, #1
   1b68a:	48b9      	ldr	r0, [pc, #740]	; (1b970 <_vfprintf_r+0x5a8>)
   1b68c:	9224      	str	r2, [sp, #144]	; 0x90
   1b68e:	3110      	adds	r1, #16
   1b690:	2a07      	cmp	r2, #7
   1b692:	9125      	str	r1, [sp, #148]	; 0x94
   1b694:	e883 0011 	stmia.w	r3, {r0, r4}
   1b698:	ddef      	ble.n	1b67a <_vfprintf_r+0x2b2>
   1b69a:	aa23      	add	r2, sp, #140	; 0x8c
   1b69c:	4629      	mov	r1, r5
   1b69e:	4650      	mov	r0, sl
   1b6a0:	f7fe fffe 	bl	1a6a0 <__sprint_r>
   1b6a4:	2800      	cmp	r0, #0
   1b6a6:	f040 836a 	bne.w	1bd7e <_vfprintf_r+0x9b6>
   1b6aa:	f1ab 0b10 	sub.w	fp, fp, #16
   1b6ae:	f1bb 0f10 	cmp.w	fp, #16
   1b6b2:	9925      	ldr	r1, [sp, #148]	; 0x94
   1b6b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1b6b6:	ab30      	add	r3, sp, #192	; 0xc0
   1b6b8:	dce6      	bgt.n	1b688 <_vfprintf_r+0x2c0>
   1b6ba:	4645      	mov	r5, r8
   1b6bc:	4698      	mov	r8, r3
   1b6be:	3201      	adds	r2, #1
   1b6c0:	4bab      	ldr	r3, [pc, #684]	; (1b970 <_vfprintf_r+0x5a8>)
   1b6c2:	9224      	str	r2, [sp, #144]	; 0x90
   1b6c4:	eb0b 0401 	add.w	r4, fp, r1
   1b6c8:	2a07      	cmp	r2, #7
   1b6ca:	9425      	str	r4, [sp, #148]	; 0x94
   1b6cc:	e888 0808 	stmia.w	r8, {r3, fp}
   1b6d0:	f300 84cd 	bgt.w	1c06e <_vfprintf_r+0xca6>
   1b6d4:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
   1b6d8:	f108 0808 	add.w	r8, r8, #8
   1b6dc:	f1ba 0f00 	cmp.w	sl, #0
   1b6e0:	d00e      	beq.n	1b700 <_vfprintf_r+0x338>
   1b6e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1b6e4:	3301      	adds	r3, #1
   1b6e6:	3401      	adds	r4, #1
   1b6e8:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
   1b6ec:	2201      	movs	r2, #1
   1b6ee:	2b07      	cmp	r3, #7
   1b6f0:	9425      	str	r4, [sp, #148]	; 0x94
   1b6f2:	9324      	str	r3, [sp, #144]	; 0x90
   1b6f4:	e888 0006 	stmia.w	r8, {r1, r2}
   1b6f8:	f300 840a 	bgt.w	1bf10 <_vfprintf_r+0xb48>
   1b6fc:	f108 0808 	add.w	r8, r8, #8
   1b700:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b702:	b16b      	cbz	r3, 1b720 <_vfprintf_r+0x358>
   1b704:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1b706:	3301      	adds	r3, #1
   1b708:	3402      	adds	r4, #2
   1b70a:	a91c      	add	r1, sp, #112	; 0x70
   1b70c:	2202      	movs	r2, #2
   1b70e:	2b07      	cmp	r3, #7
   1b710:	9425      	str	r4, [sp, #148]	; 0x94
   1b712:	9324      	str	r3, [sp, #144]	; 0x90
   1b714:	e888 0006 	stmia.w	r8, {r1, r2}
   1b718:	f300 8406 	bgt.w	1bf28 <_vfprintf_r+0xb60>
   1b71c:	f108 0808 	add.w	r8, r8, #8
   1b720:	2d80      	cmp	r5, #128	; 0x80
   1b722:	f000 832e 	beq.w	1bd82 <_vfprintf_r+0x9ba>
   1b726:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b728:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1b72a:	eba3 0a02 	sub.w	sl, r3, r2
   1b72e:	f1ba 0f00 	cmp.w	sl, #0
   1b732:	dd3b      	ble.n	1b7ac <_vfprintf_r+0x3e4>
   1b734:	f1ba 0f10 	cmp.w	sl, #16
   1b738:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1b73a:	4d8e      	ldr	r5, [pc, #568]	; (1b974 <_vfprintf_r+0x5ac>)
   1b73c:	dd2b      	ble.n	1b796 <_vfprintf_r+0x3ce>
   1b73e:	4642      	mov	r2, r8
   1b740:	4621      	mov	r1, r4
   1b742:	46b0      	mov	r8, r6
   1b744:	f04f 0b10 	mov.w	fp, #16
   1b748:	462e      	mov	r6, r5
   1b74a:	9c08      	ldr	r4, [sp, #32]
   1b74c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1b74e:	e006      	b.n	1b75e <_vfprintf_r+0x396>
   1b750:	f1aa 0a10 	sub.w	sl, sl, #16
   1b754:	f1ba 0f10 	cmp.w	sl, #16
   1b758:	f102 0208 	add.w	r2, r2, #8
   1b75c:	dd17      	ble.n	1b78e <_vfprintf_r+0x3c6>
   1b75e:	3301      	adds	r3, #1
   1b760:	3110      	adds	r1, #16
   1b762:	2b07      	cmp	r3, #7
   1b764:	9125      	str	r1, [sp, #148]	; 0x94
   1b766:	9324      	str	r3, [sp, #144]	; 0x90
   1b768:	e882 0840 	stmia.w	r2, {r6, fp}
   1b76c:	ddf0      	ble.n	1b750 <_vfprintf_r+0x388>
   1b76e:	aa23      	add	r2, sp, #140	; 0x8c
   1b770:	4629      	mov	r1, r5
   1b772:	4620      	mov	r0, r4
   1b774:	f7fe ff94 	bl	1a6a0 <__sprint_r>
   1b778:	2800      	cmp	r0, #0
   1b77a:	f040 8300 	bne.w	1bd7e <_vfprintf_r+0x9b6>
   1b77e:	f1aa 0a10 	sub.w	sl, sl, #16
   1b782:	f1ba 0f10 	cmp.w	sl, #16
   1b786:	9925      	ldr	r1, [sp, #148]	; 0x94
   1b788:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1b78a:	aa30      	add	r2, sp, #192	; 0xc0
   1b78c:	dce7      	bgt.n	1b75e <_vfprintf_r+0x396>
   1b78e:	4635      	mov	r5, r6
   1b790:	460c      	mov	r4, r1
   1b792:	4646      	mov	r6, r8
   1b794:	4690      	mov	r8, r2
   1b796:	3301      	adds	r3, #1
   1b798:	4454      	add	r4, sl
   1b79a:	2b07      	cmp	r3, #7
   1b79c:	9425      	str	r4, [sp, #148]	; 0x94
   1b79e:	9324      	str	r3, [sp, #144]	; 0x90
   1b7a0:	e888 0420 	stmia.w	r8, {r5, sl}
   1b7a4:	f300 83a9 	bgt.w	1befa <_vfprintf_r+0xb32>
   1b7a8:	f108 0808 	add.w	r8, r8, #8
   1b7ac:	9b06      	ldr	r3, [sp, #24]
   1b7ae:	05db      	lsls	r3, r3, #23
   1b7b0:	f100 8285 	bmi.w	1bcbe <_vfprintf_r+0x8f6>
   1b7b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1b7b6:	990d      	ldr	r1, [sp, #52]	; 0x34
   1b7b8:	f8c8 7000 	str.w	r7, [r8]
   1b7bc:	3301      	adds	r3, #1
   1b7be:	440c      	add	r4, r1
   1b7c0:	2b07      	cmp	r3, #7
   1b7c2:	9425      	str	r4, [sp, #148]	; 0x94
   1b7c4:	f8c8 1004 	str.w	r1, [r8, #4]
   1b7c8:	9324      	str	r3, [sp, #144]	; 0x90
   1b7ca:	f300 8375 	bgt.w	1beb8 <_vfprintf_r+0xaf0>
   1b7ce:	f108 0808 	add.w	r8, r8, #8
   1b7d2:	9b06      	ldr	r3, [sp, #24]
   1b7d4:	0759      	lsls	r1, r3, #29
   1b7d6:	d53b      	bpl.n	1b850 <_vfprintf_r+0x488>
   1b7d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b7da:	9a07      	ldr	r2, [sp, #28]
   1b7dc:	1a9d      	subs	r5, r3, r2
   1b7de:	2d00      	cmp	r5, #0
   1b7e0:	dd36      	ble.n	1b850 <_vfprintf_r+0x488>
   1b7e2:	2d10      	cmp	r5, #16
   1b7e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1b7e6:	dd21      	ble.n	1b82c <_vfprintf_r+0x464>
   1b7e8:	2610      	movs	r6, #16
   1b7ea:	9f08      	ldr	r7, [sp, #32]
   1b7ec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1b7f0:	e004      	b.n	1b7fc <_vfprintf_r+0x434>
   1b7f2:	3d10      	subs	r5, #16
   1b7f4:	2d10      	cmp	r5, #16
   1b7f6:	f108 0808 	add.w	r8, r8, #8
   1b7fa:	dd17      	ble.n	1b82c <_vfprintf_r+0x464>
   1b7fc:	3301      	adds	r3, #1
   1b7fe:	4a5c      	ldr	r2, [pc, #368]	; (1b970 <_vfprintf_r+0x5a8>)
   1b800:	9324      	str	r3, [sp, #144]	; 0x90
   1b802:	3410      	adds	r4, #16
   1b804:	2b07      	cmp	r3, #7
   1b806:	9425      	str	r4, [sp, #148]	; 0x94
   1b808:	e888 0044 	stmia.w	r8, {r2, r6}
   1b80c:	ddf1      	ble.n	1b7f2 <_vfprintf_r+0x42a>
   1b80e:	aa23      	add	r2, sp, #140	; 0x8c
   1b810:	4651      	mov	r1, sl
   1b812:	4638      	mov	r0, r7
   1b814:	f7fe ff44 	bl	1a6a0 <__sprint_r>
   1b818:	2800      	cmp	r0, #0
   1b81a:	f040 823f 	bne.w	1bc9c <_vfprintf_r+0x8d4>
   1b81e:	3d10      	subs	r5, #16
   1b820:	2d10      	cmp	r5, #16
   1b822:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1b824:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1b826:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1b82a:	dce7      	bgt.n	1b7fc <_vfprintf_r+0x434>
   1b82c:	3301      	adds	r3, #1
   1b82e:	4a50      	ldr	r2, [pc, #320]	; (1b970 <_vfprintf_r+0x5a8>)
   1b830:	9324      	str	r3, [sp, #144]	; 0x90
   1b832:	442c      	add	r4, r5
   1b834:	2b07      	cmp	r3, #7
   1b836:	9425      	str	r4, [sp, #148]	; 0x94
   1b838:	e888 0024 	stmia.w	r8, {r2, r5}
   1b83c:	dd08      	ble.n	1b850 <_vfprintf_r+0x488>
   1b83e:	aa23      	add	r2, sp, #140	; 0x8c
   1b840:	990a      	ldr	r1, [sp, #40]	; 0x28
   1b842:	9808      	ldr	r0, [sp, #32]
   1b844:	f7fe ff2c 	bl	1a6a0 <__sprint_r>
   1b848:	2800      	cmp	r0, #0
   1b84a:	f040 8347 	bne.w	1bedc <_vfprintf_r+0xb14>
   1b84e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1b850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b852:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1b854:	9907      	ldr	r1, [sp, #28]
   1b856:	428a      	cmp	r2, r1
   1b858:	bfac      	ite	ge
   1b85a:	189b      	addge	r3, r3, r2
   1b85c:	185b      	addlt	r3, r3, r1
   1b85e:	930b      	str	r3, [sp, #44]	; 0x2c
   1b860:	2c00      	cmp	r4, #0
   1b862:	f040 8333 	bne.w	1becc <_vfprintf_r+0xb04>
   1b866:	2300      	movs	r3, #0
   1b868:	9324      	str	r3, [sp, #144]	; 0x90
   1b86a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1b86e:	e5f7      	b.n	1b460 <_vfprintf_r+0x98>
   1b870:	4651      	mov	r1, sl
   1b872:	9808      	ldr	r0, [sp, #32]
   1b874:	f001 f93c 	bl	1caf0 <__swsetup_r>
   1b878:	2800      	cmp	r0, #0
   1b87a:	d038      	beq.n	1b8ee <_vfprintf_r+0x526>
   1b87c:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   1b880:	07dd      	lsls	r5, r3, #31
   1b882:	d404      	bmi.n	1b88e <_vfprintf_r+0x4c6>
   1b884:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   1b888:	059c      	lsls	r4, r3, #22
   1b88a:	f140 85ca 	bpl.w	1c422 <_vfprintf_r+0x105a>
   1b88e:	f04f 33ff 	mov.w	r3, #4294967295
   1b892:	930b      	str	r3, [sp, #44]	; 0x2c
   1b894:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1b896:	b041      	add	sp, #260	; 0x104
   1b898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b89c:	aa23      	add	r2, sp, #140	; 0x8c
   1b89e:	990a      	ldr	r1, [sp, #40]	; 0x28
   1b8a0:	9808      	ldr	r0, [sp, #32]
   1b8a2:	f7fe fefd 	bl	1a6a0 <__sprint_r>
   1b8a6:	2800      	cmp	r0, #0
   1b8a8:	f040 8318 	bne.w	1bedc <_vfprintf_r+0xb14>
   1b8ac:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1b8b0:	e5f5      	b.n	1b49e <_vfprintf_r+0xd6>
   1b8b2:	9808      	ldr	r0, [sp, #32]
   1b8b4:	f002 faba 	bl	1de2c <__sinit>
   1b8b8:	e59c      	b.n	1b3f4 <_vfprintf_r+0x2c>
   1b8ba:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
   1b8be:	2a00      	cmp	r2, #0
   1b8c0:	f6ff adbd 	blt.w	1b43e <_vfprintf_r+0x76>
   1b8c4:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
   1b8c8:	07d0      	lsls	r0, r2, #31
   1b8ca:	d405      	bmi.n	1b8d8 <_vfprintf_r+0x510>
   1b8cc:	0599      	lsls	r1, r3, #22
   1b8ce:	d403      	bmi.n	1b8d8 <_vfprintf_r+0x510>
   1b8d0:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   1b8d4:	f7fc f84e 	bl	17974 <__retarget_lock_release_recursive>
   1b8d8:	462b      	mov	r3, r5
   1b8da:	464a      	mov	r2, r9
   1b8dc:	4651      	mov	r1, sl
   1b8de:	9808      	ldr	r0, [sp, #32]
   1b8e0:	f001 f81e 	bl	1c920 <__sbprintf>
   1b8e4:	900b      	str	r0, [sp, #44]	; 0x2c
   1b8e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1b8e8:	b041      	add	sp, #260	; 0x104
   1b8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8ee:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   1b8f2:	e59f      	b.n	1b434 <_vfprintf_r+0x6c>
   1b8f4:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   1b8f8:	f7fc f83a 	bl	17970 <__retarget_lock_acquire_recursive>
   1b8fc:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
   1b900:	b293      	uxth	r3, r2
   1b902:	e582      	b.n	1b40a <_vfprintf_r+0x42>
   1b904:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b906:	930e      	str	r3, [sp, #56]	; 0x38
   1b908:	4240      	negs	r0, r0
   1b90a:	900c      	str	r0, [sp, #48]	; 0x30
   1b90c:	f04b 0b04 	orr.w	fp, fp, #4
   1b910:	f899 6000 	ldrb.w	r6, [r9]
   1b914:	e5d7      	b.n	1b4c6 <_vfprintf_r+0xfe>
   1b916:	2a00      	cmp	r2, #0
   1b918:	f040 87df 	bne.w	1c8da <_vfprintf_r+0x1512>
   1b91c:	4b16      	ldr	r3, [pc, #88]	; (1b978 <_vfprintf_r+0x5b0>)
   1b91e:	9318      	str	r3, [sp, #96]	; 0x60
   1b920:	f01b 0f20 	tst.w	fp, #32
   1b924:	f040 84b9 	bne.w	1c29a <_vfprintf_r+0xed2>
   1b928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1b92a:	f01b 0f10 	tst.w	fp, #16
   1b92e:	4613      	mov	r3, r2
   1b930:	f040 83dc 	bne.w	1c0ec <_vfprintf_r+0xd24>
   1b934:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1b938:	f000 83d8 	beq.w	1c0ec <_vfprintf_r+0xd24>
   1b93c:	3304      	adds	r3, #4
   1b93e:	8814      	ldrh	r4, [r2, #0]
   1b940:	930e      	str	r3, [sp, #56]	; 0x38
   1b942:	2500      	movs	r5, #0
   1b944:	f01b 0f01 	tst.w	fp, #1
   1b948:	f000 8322 	beq.w	1bf90 <_vfprintf_r+0xbc8>
   1b94c:	ea54 0305 	orrs.w	r3, r4, r5
   1b950:	f000 831e 	beq.w	1bf90 <_vfprintf_r+0xbc8>
   1b954:	2330      	movs	r3, #48	; 0x30
   1b956:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
   1b95a:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
   1b95e:	f04b 0b02 	orr.w	fp, fp, #2
   1b962:	2302      	movs	r3, #2
   1b964:	e63c      	b.n	1b5e0 <_vfprintf_r+0x218>
   1b966:	f04b 0b20 	orr.w	fp, fp, #32
   1b96a:	f899 6000 	ldrb.w	r6, [r9]
   1b96e:	e5aa      	b.n	1b4c6 <_vfprintf_r+0xfe>
   1b970:	0003ebf0 	.word	0x0003ebf0
   1b974:	0003ec00 	.word	0x0003ec00
   1b978:	0003eb94 	.word	0x0003eb94
   1b97c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1b97e:	6817      	ldr	r7, [r2, #0]
   1b980:	2400      	movs	r4, #0
   1b982:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   1b986:	1d15      	adds	r5, r2, #4
   1b988:	2f00      	cmp	r7, #0
   1b98a:	f000 864e 	beq.w	1c62a <_vfprintf_r+0x1262>
   1b98e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b990:	1c53      	adds	r3, r2, #1
   1b992:	f000 85cc 	beq.w	1c52e <_vfprintf_r+0x1166>
   1b996:	4621      	mov	r1, r4
   1b998:	4638      	mov	r0, r7
   1b99a:	f7fc fb41 	bl	18020 <memchr>
   1b99e:	2800      	cmp	r0, #0
   1b9a0:	f000 8697 	beq.w	1c6d2 <_vfprintf_r+0x130a>
   1b9a4:	1bc3      	subs	r3, r0, r7
   1b9a6:	930d      	str	r3, [sp, #52]	; 0x34
   1b9a8:	9409      	str	r4, [sp, #36]	; 0x24
   1b9aa:	950e      	str	r5, [sp, #56]	; 0x38
   1b9ac:	f8cd b018 	str.w	fp, [sp, #24]
   1b9b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1b9b4:	9307      	str	r3, [sp, #28]
   1b9b6:	9410      	str	r4, [sp, #64]	; 0x40
   1b9b8:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
   1b9bc:	e636      	b.n	1b62c <_vfprintf_r+0x264>
   1b9be:	2a00      	cmp	r2, #0
   1b9c0:	f040 8796 	bne.w	1c8f0 <_vfprintf_r+0x1528>
   1b9c4:	f01b 0f20 	tst.w	fp, #32
   1b9c8:	f040 845a 	bne.w	1c280 <_vfprintf_r+0xeb8>
   1b9cc:	f01b 0f10 	tst.w	fp, #16
   1b9d0:	f040 83a2 	bne.w	1c118 <_vfprintf_r+0xd50>
   1b9d4:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1b9d8:	f000 839e 	beq.w	1c118 <_vfprintf_r+0xd50>
   1b9dc:	990e      	ldr	r1, [sp, #56]	; 0x38
   1b9de:	f9b1 4000 	ldrsh.w	r4, [r1]
   1b9e2:	3104      	adds	r1, #4
   1b9e4:	17e5      	asrs	r5, r4, #31
   1b9e6:	4622      	mov	r2, r4
   1b9e8:	462b      	mov	r3, r5
   1b9ea:	910e      	str	r1, [sp, #56]	; 0x38
   1b9ec:	2a00      	cmp	r2, #0
   1b9ee:	f173 0300 	sbcs.w	r3, r3, #0
   1b9f2:	f2c0 8487 	blt.w	1c304 <_vfprintf_r+0xf3c>
   1b9f6:	9909      	ldr	r1, [sp, #36]	; 0x24
   1b9f8:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
   1b9fc:	1c4a      	adds	r2, r1, #1
   1b9fe:	f04f 0301 	mov.w	r3, #1
   1ba02:	f47f adf5 	bne.w	1b5f0 <_vfprintf_r+0x228>
   1ba06:	ea54 0205 	orrs.w	r2, r4, r5
   1ba0a:	f000 826c 	beq.w	1bee6 <_vfprintf_r+0xb1e>
   1ba0e:	f8cd b018 	str.w	fp, [sp, #24]
   1ba12:	2b01      	cmp	r3, #1
   1ba14:	f000 8308 	beq.w	1c028 <_vfprintf_r+0xc60>
   1ba18:	2b02      	cmp	r3, #2
   1ba1a:	f040 8295 	bne.w	1bf48 <_vfprintf_r+0xb80>
   1ba1e:	9818      	ldr	r0, [sp, #96]	; 0x60
   1ba20:	af30      	add	r7, sp, #192	; 0xc0
   1ba22:	0923      	lsrs	r3, r4, #4
   1ba24:	f004 010f 	and.w	r1, r4, #15
   1ba28:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   1ba2c:	092a      	lsrs	r2, r5, #4
   1ba2e:	461c      	mov	r4, r3
   1ba30:	4615      	mov	r5, r2
   1ba32:	5c43      	ldrb	r3, [r0, r1]
   1ba34:	f807 3d01 	strb.w	r3, [r7, #-1]!
   1ba38:	ea54 0305 	orrs.w	r3, r4, r5
   1ba3c:	d1f1      	bne.n	1ba22 <_vfprintf_r+0x65a>
   1ba3e:	ab30      	add	r3, sp, #192	; 0xc0
   1ba40:	1bdb      	subs	r3, r3, r7
   1ba42:	930d      	str	r3, [sp, #52]	; 0x34
   1ba44:	e5ea      	b.n	1b61c <_vfprintf_r+0x254>
   1ba46:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   1ba4a:	f899 6000 	ldrb.w	r6, [r9]
   1ba4e:	e53a      	b.n	1b4c6 <_vfprintf_r+0xfe>
   1ba50:	f899 6000 	ldrb.w	r6, [r9]
   1ba54:	2e6c      	cmp	r6, #108	; 0x6c
   1ba56:	bf03      	ittte	eq
   1ba58:	f899 6001 	ldrbeq.w	r6, [r9, #1]
   1ba5c:	f04b 0b20 	orreq.w	fp, fp, #32
   1ba60:	f109 0901 	addeq.w	r9, r9, #1
   1ba64:	f04b 0b10 	orrne.w	fp, fp, #16
   1ba68:	e52d      	b.n	1b4c6 <_vfprintf_r+0xfe>
   1ba6a:	2a00      	cmp	r2, #0
   1ba6c:	f040 874c 	bne.w	1c908 <_vfprintf_r+0x1540>
   1ba70:	f01b 0f20 	tst.w	fp, #32
   1ba74:	f040 853f 	bne.w	1c4f6 <_vfprintf_r+0x112e>
   1ba78:	f01b 0f10 	tst.w	fp, #16
   1ba7c:	f040 80fc 	bne.w	1bc78 <_vfprintf_r+0x8b0>
   1ba80:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1ba84:	f000 80f8 	beq.w	1bc78 <_vfprintf_r+0x8b0>
   1ba88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1ba8a:	6813      	ldr	r3, [r2, #0]
   1ba8c:	3204      	adds	r2, #4
   1ba8e:	920e      	str	r2, [sp, #56]	; 0x38
   1ba90:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1ba94:	801a      	strh	r2, [r3, #0]
   1ba96:	e4e3      	b.n	1b460 <_vfprintf_r+0x98>
   1ba98:	f899 6000 	ldrb.w	r6, [r9]
   1ba9c:	2900      	cmp	r1, #0
   1ba9e:	f47f ad12 	bne.w	1b4c6 <_vfprintf_r+0xfe>
   1baa2:	2201      	movs	r2, #1
   1baa4:	2120      	movs	r1, #32
   1baa6:	e50e      	b.n	1b4c6 <_vfprintf_r+0xfe>
   1baa8:	f899 6000 	ldrb.w	r6, [r9]
   1baac:	2e2a      	cmp	r6, #42	; 0x2a
   1baae:	f109 0001 	add.w	r0, r9, #1
   1bab2:	f000 86f1 	beq.w	1c898 <_vfprintf_r+0x14d0>
   1bab6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   1baba:	2b09      	cmp	r3, #9
   1babc:	4681      	mov	r9, r0
   1babe:	bf98      	it	ls
   1bac0:	2000      	movls	r0, #0
   1bac2:	f200 863d 	bhi.w	1c740 <_vfprintf_r+0x1378>
   1bac6:	f819 6b01 	ldrb.w	r6, [r9], #1
   1baca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1bace:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   1bad2:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   1bad6:	2b09      	cmp	r3, #9
   1bad8:	d9f5      	bls.n	1bac6 <_vfprintf_r+0x6fe>
   1bada:	9009      	str	r0, [sp, #36]	; 0x24
   1badc:	e4f5      	b.n	1b4ca <_vfprintf_r+0x102>
   1bade:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   1bae2:	f899 6000 	ldrb.w	r6, [r9]
   1bae6:	e4ee      	b.n	1b4c6 <_vfprintf_r+0xfe>
   1bae8:	f899 6000 	ldrb.w	r6, [r9]
   1baec:	2201      	movs	r2, #1
   1baee:	212b      	movs	r1, #43	; 0x2b
   1baf0:	e4e9      	b.n	1b4c6 <_vfprintf_r+0xfe>
   1baf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1baf4:	4bae      	ldr	r3, [pc, #696]	; (1bdb0 <_vfprintf_r+0x9e8>)
   1baf6:	6814      	ldr	r4, [r2, #0]
   1baf8:	9318      	str	r3, [sp, #96]	; 0x60
   1bafa:	2678      	movs	r6, #120	; 0x78
   1bafc:	2330      	movs	r3, #48	; 0x30
   1bafe:	3204      	adds	r2, #4
   1bb00:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
   1bb04:	f04b 0b02 	orr.w	fp, fp, #2
   1bb08:	920e      	str	r2, [sp, #56]	; 0x38
   1bb0a:	2500      	movs	r5, #0
   1bb0c:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
   1bb10:	2302      	movs	r3, #2
   1bb12:	e565      	b.n	1b5e0 <_vfprintf_r+0x218>
   1bb14:	2a00      	cmp	r2, #0
   1bb16:	f040 86e4 	bne.w	1c8e2 <_vfprintf_r+0x151a>
   1bb1a:	4ba6      	ldr	r3, [pc, #664]	; (1bdb4 <_vfprintf_r+0x9ec>)
   1bb1c:	9318      	str	r3, [sp, #96]	; 0x60
   1bb1e:	e6ff      	b.n	1b920 <_vfprintf_r+0x558>
   1bb20:	990e      	ldr	r1, [sp, #56]	; 0x38
   1bb22:	f8cd b018 	str.w	fp, [sp, #24]
   1bb26:	680a      	ldr	r2, [r1, #0]
   1bb28:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1bb2c:	2300      	movs	r3, #0
   1bb2e:	460a      	mov	r2, r1
   1bb30:	469a      	mov	sl, r3
   1bb32:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1bb36:	3204      	adds	r2, #4
   1bb38:	2301      	movs	r3, #1
   1bb3a:	9307      	str	r3, [sp, #28]
   1bb3c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   1bb40:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
   1bb44:	920e      	str	r2, [sp, #56]	; 0x38
   1bb46:	930d      	str	r3, [sp, #52]	; 0x34
   1bb48:	af26      	add	r7, sp, #152	; 0x98
   1bb4a:	e575      	b.n	1b638 <_vfprintf_r+0x270>
   1bb4c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   1bb50:	2000      	movs	r0, #0
   1bb52:	f819 6b01 	ldrb.w	r6, [r9], #1
   1bb56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1bb5a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   1bb5e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   1bb62:	2b09      	cmp	r3, #9
   1bb64:	d9f5      	bls.n	1bb52 <_vfprintf_r+0x78a>
   1bb66:	900c      	str	r0, [sp, #48]	; 0x30
   1bb68:	e4af      	b.n	1b4ca <_vfprintf_r+0x102>
   1bb6a:	2a00      	cmp	r2, #0
   1bb6c:	f040 86c8 	bne.w	1c900 <_vfprintf_r+0x1538>
   1bb70:	f04b 0b10 	orr.w	fp, fp, #16
   1bb74:	e726      	b.n	1b9c4 <_vfprintf_r+0x5fc>
   1bb76:	f04b 0b01 	orr.w	fp, fp, #1
   1bb7a:	f899 6000 	ldrb.w	r6, [r9]
   1bb7e:	e4a2      	b.n	1b4c6 <_vfprintf_r+0xfe>
   1bb80:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1bb82:	6823      	ldr	r3, [r4, #0]
   1bb84:	930c      	str	r3, [sp, #48]	; 0x30
   1bb86:	4618      	mov	r0, r3
   1bb88:	2800      	cmp	r0, #0
   1bb8a:	4623      	mov	r3, r4
   1bb8c:	f103 0304 	add.w	r3, r3, #4
   1bb90:	f6ff aeb8 	blt.w	1b904 <_vfprintf_r+0x53c>
   1bb94:	930e      	str	r3, [sp, #56]	; 0x38
   1bb96:	f899 6000 	ldrb.w	r6, [r9]
   1bb9a:	e494      	b.n	1b4c6 <_vfprintf_r+0xfe>
   1bb9c:	2a00      	cmp	r2, #0
   1bb9e:	f040 86b7 	bne.w	1c910 <_vfprintf_r+0x1548>
   1bba2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1bba4:	3507      	adds	r5, #7
   1bba6:	f025 0307 	bic.w	r3, r5, #7
   1bbaa:	f103 0208 	add.w	r2, r3, #8
   1bbae:	920e      	str	r2, [sp, #56]	; 0x38
   1bbb0:	681a      	ldr	r2, [r3, #0]
   1bbb2:	9213      	str	r2, [sp, #76]	; 0x4c
   1bbb4:	685b      	ldr	r3, [r3, #4]
   1bbb6:	9312      	str	r3, [sp, #72]	; 0x48
   1bbb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bbba:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   1bbbc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   1bbc0:	4628      	mov	r0, r5
   1bbc2:	4621      	mov	r1, r4
   1bbc4:	f04f 32ff 	mov.w	r2, #4294967295
   1bbc8:	4b7b      	ldr	r3, [pc, #492]	; (1bdb8 <_vfprintf_r+0x9f0>)
   1bbca:	f002 ffbb 	bl	1eb44 <__aeabi_dcmpun>
   1bbce:	2800      	cmp	r0, #0
   1bbd0:	f040 83a2 	bne.w	1c318 <_vfprintf_r+0xf50>
   1bbd4:	4628      	mov	r0, r5
   1bbd6:	4621      	mov	r1, r4
   1bbd8:	f04f 32ff 	mov.w	r2, #4294967295
   1bbdc:	4b76      	ldr	r3, [pc, #472]	; (1bdb8 <_vfprintf_r+0x9f0>)
   1bbde:	f7f9 feeb 	bl	159b8 <__aeabi_dcmple>
   1bbe2:	2800      	cmp	r0, #0
   1bbe4:	f040 8398 	bne.w	1c318 <_vfprintf_r+0xf50>
   1bbe8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1bbea:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1bbec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1bbee:	9912      	ldr	r1, [sp, #72]	; 0x48
   1bbf0:	f7f9 fed8 	bl	159a4 <__aeabi_dcmplt>
   1bbf4:	2800      	cmp	r0, #0
   1bbf6:	f040 8435 	bne.w	1c464 <_vfprintf_r+0x109c>
   1bbfa:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
   1bbfe:	4f6f      	ldr	r7, [pc, #444]	; (1bdbc <_vfprintf_r+0x9f4>)
   1bc00:	4b6f      	ldr	r3, [pc, #444]	; (1bdc0 <_vfprintf_r+0x9f8>)
   1bc02:	2203      	movs	r2, #3
   1bc04:	2100      	movs	r1, #0
   1bc06:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   1bc0a:	9207      	str	r2, [sp, #28]
   1bc0c:	9109      	str	r1, [sp, #36]	; 0x24
   1bc0e:	9006      	str	r0, [sp, #24]
   1bc10:	2e47      	cmp	r6, #71	; 0x47
   1bc12:	bfd8      	it	le
   1bc14:	461f      	movle	r7, r3
   1bc16:	920d      	str	r2, [sp, #52]	; 0x34
   1bc18:	9110      	str	r1, [sp, #64]	; 0x40
   1bc1a:	e507      	b.n	1b62c <_vfprintf_r+0x264>
   1bc1c:	f04b 0b08 	orr.w	fp, fp, #8
   1bc20:	f899 6000 	ldrb.w	r6, [r9]
   1bc24:	e44f      	b.n	1b4c6 <_vfprintf_r+0xfe>
   1bc26:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1bc28:	3507      	adds	r5, #7
   1bc2a:	f025 0307 	bic.w	r3, r5, #7
   1bc2e:	f103 0208 	add.w	r2, r3, #8
   1bc32:	e9d3 4500 	ldrd	r4, r5, [r3]
   1bc36:	920e      	str	r2, [sp, #56]	; 0x38
   1bc38:	2300      	movs	r3, #0
   1bc3a:	e4d1      	b.n	1b5e0 <_vfprintf_r+0x218>
   1bc3c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1bc3e:	3507      	adds	r5, #7
   1bc40:	f025 0307 	bic.w	r3, r5, #7
   1bc44:	f103 0208 	add.w	r2, r3, #8
   1bc48:	e9d3 4500 	ldrd	r4, r5, [r3]
   1bc4c:	920e      	str	r2, [sp, #56]	; 0x38
   1bc4e:	2301      	movs	r3, #1
   1bc50:	e4c6      	b.n	1b5e0 <_vfprintf_r+0x218>
   1bc52:	2a00      	cmp	r2, #0
   1bc54:	f040 8650 	bne.w	1c8f8 <_vfprintf_r+0x1530>
   1bc58:	b1c6      	cbz	r6, 1bc8c <_vfprintf_r+0x8c4>
   1bc5a:	2300      	movs	r3, #0
   1bc5c:	2201      	movs	r2, #1
   1bc5e:	469a      	mov	sl, r3
   1bc60:	9207      	str	r2, [sp, #28]
   1bc62:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
   1bc66:	f8cd b018 	str.w	fp, [sp, #24]
   1bc6a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1bc6e:	9309      	str	r3, [sp, #36]	; 0x24
   1bc70:	9310      	str	r3, [sp, #64]	; 0x40
   1bc72:	920d      	str	r2, [sp, #52]	; 0x34
   1bc74:	af26      	add	r7, sp, #152	; 0x98
   1bc76:	e4df      	b.n	1b638 <_vfprintf_r+0x270>
   1bc78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1bc7a:	6813      	ldr	r3, [r2, #0]
   1bc7c:	3204      	adds	r2, #4
   1bc7e:	920e      	str	r2, [sp, #56]	; 0x38
   1bc80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1bc82:	601a      	str	r2, [r3, #0]
   1bc84:	f7ff bbec 	b.w	1b460 <_vfprintf_r+0x98>
   1bc88:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1bc8a:	e527      	b.n	1b6dc <_vfprintf_r+0x314>
   1bc8c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1bc8e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1bc92:	2b00      	cmp	r3, #0
   1bc94:	f040 8594 	bne.w	1c7c0 <_vfprintf_r+0x13f8>
   1bc98:	2300      	movs	r3, #0
   1bc9a:	9324      	str	r3, [sp, #144]	; 0x90
   1bc9c:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   1bca0:	f013 0f01 	tst.w	r3, #1
   1bca4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   1bca8:	d102      	bne.n	1bcb0 <_vfprintf_r+0x8e8>
   1bcaa:	059a      	lsls	r2, r3, #22
   1bcac:	f140 8249 	bpl.w	1c142 <_vfprintf_r+0xd7a>
   1bcb0:	065b      	lsls	r3, r3, #25
   1bcb2:	f53f adec 	bmi.w	1b88e <_vfprintf_r+0x4c6>
   1bcb6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1bcb8:	b041      	add	sp, #260	; 0x104
   1bcba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bcbe:	2e65      	cmp	r6, #101	; 0x65
   1bcc0:	f340 80b2 	ble.w	1be28 <_vfprintf_r+0xa60>
   1bcc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1bcc6:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1bcc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1bcca:	9912      	ldr	r1, [sp, #72]	; 0x48
   1bccc:	f7f9 fe60 	bl	15990 <__aeabi_dcmpeq>
   1bcd0:	2800      	cmp	r0, #0
   1bcd2:	f000 8160 	beq.w	1bf96 <_vfprintf_r+0xbce>
   1bcd6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1bcd8:	4a3a      	ldr	r2, [pc, #232]	; (1bdc4 <_vfprintf_r+0x9fc>)
   1bcda:	f8c8 2000 	str.w	r2, [r8]
   1bcde:	3301      	adds	r3, #1
   1bce0:	3401      	adds	r4, #1
   1bce2:	2201      	movs	r2, #1
   1bce4:	2b07      	cmp	r3, #7
   1bce6:	9425      	str	r4, [sp, #148]	; 0x94
   1bce8:	9324      	str	r3, [sp, #144]	; 0x90
   1bcea:	f8c8 2004 	str.w	r2, [r8, #4]
   1bcee:	f300 83bf 	bgt.w	1c470 <_vfprintf_r+0x10a8>
   1bcf2:	f108 0808 	add.w	r8, r8, #8
   1bcf6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1bcf8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1bcfa:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1bcfc:	4293      	cmp	r3, r2
   1bcfe:	db03      	blt.n	1bd08 <_vfprintf_r+0x940>
   1bd00:	9b06      	ldr	r3, [sp, #24]
   1bd02:	07df      	lsls	r7, r3, #31
   1bd04:	f57f ad65 	bpl.w	1b7d2 <_vfprintf_r+0x40a>
   1bd08:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1bd0a:	9914      	ldr	r1, [sp, #80]	; 0x50
   1bd0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1bd0e:	f8c8 2000 	str.w	r2, [r8]
   1bd12:	3301      	adds	r3, #1
   1bd14:	440c      	add	r4, r1
   1bd16:	2b07      	cmp	r3, #7
   1bd18:	f8c8 1004 	str.w	r1, [r8, #4]
   1bd1c:	9425      	str	r4, [sp, #148]	; 0x94
   1bd1e:	9324      	str	r3, [sp, #144]	; 0x90
   1bd20:	f300 83f8 	bgt.w	1c514 <_vfprintf_r+0x114c>
   1bd24:	f108 0808 	add.w	r8, r8, #8
   1bd28:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1bd2a:	1e5e      	subs	r6, r3, #1
   1bd2c:	2e00      	cmp	r6, #0
   1bd2e:	f77f ad50 	ble.w	1b7d2 <_vfprintf_r+0x40a>
   1bd32:	2e10      	cmp	r6, #16
   1bd34:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1bd36:	4d24      	ldr	r5, [pc, #144]	; (1bdc8 <_vfprintf_r+0xa00>)
   1bd38:	f340 81dd 	ble.w	1c0f6 <_vfprintf_r+0xd2e>
   1bd3c:	2710      	movs	r7, #16
   1bd3e:	f8dd a020 	ldr.w	sl, [sp, #32]
   1bd42:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   1bd46:	e005      	b.n	1bd54 <_vfprintf_r+0x98c>
   1bd48:	f108 0808 	add.w	r8, r8, #8
   1bd4c:	3e10      	subs	r6, #16
   1bd4e:	2e10      	cmp	r6, #16
   1bd50:	f340 81d1 	ble.w	1c0f6 <_vfprintf_r+0xd2e>
   1bd54:	3301      	adds	r3, #1
   1bd56:	3410      	adds	r4, #16
   1bd58:	2b07      	cmp	r3, #7
   1bd5a:	9425      	str	r4, [sp, #148]	; 0x94
   1bd5c:	9324      	str	r3, [sp, #144]	; 0x90
   1bd5e:	e888 00a0 	stmia.w	r8, {r5, r7}
   1bd62:	ddf1      	ble.n	1bd48 <_vfprintf_r+0x980>
   1bd64:	aa23      	add	r2, sp, #140	; 0x8c
   1bd66:	4659      	mov	r1, fp
   1bd68:	4650      	mov	r0, sl
   1bd6a:	f7fe fc99 	bl	1a6a0 <__sprint_r>
   1bd6e:	2800      	cmp	r0, #0
   1bd70:	f040 83cd 	bne.w	1c50e <_vfprintf_r+0x1146>
   1bd74:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1bd76:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1bd78:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1bd7c:	e7e6      	b.n	1bd4c <_vfprintf_r+0x984>
   1bd7e:	46aa      	mov	sl, r5
   1bd80:	e78c      	b.n	1bc9c <_vfprintf_r+0x8d4>
   1bd82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bd84:	9a07      	ldr	r2, [sp, #28]
   1bd86:	eba3 0a02 	sub.w	sl, r3, r2
   1bd8a:	f1ba 0f00 	cmp.w	sl, #0
   1bd8e:	f77f acca 	ble.w	1b726 <_vfprintf_r+0x35e>
   1bd92:	f1ba 0f10 	cmp.w	sl, #16
   1bd96:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1bd98:	4d0b      	ldr	r5, [pc, #44]	; (1bdc8 <_vfprintf_r+0xa00>)
   1bd9a:	dd39      	ble.n	1be10 <_vfprintf_r+0xa48>
   1bd9c:	4642      	mov	r2, r8
   1bd9e:	4621      	mov	r1, r4
   1bda0:	46b0      	mov	r8, r6
   1bda2:	f04f 0b10 	mov.w	fp, #16
   1bda6:	462e      	mov	r6, r5
   1bda8:	9c08      	ldr	r4, [sp, #32]
   1bdaa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1bdac:	e015      	b.n	1bdda <_vfprintf_r+0xa12>
   1bdae:	bf00      	nop
   1bdb0:	0003eb94 	.word	0x0003eb94
   1bdb4:	0003eb80 	.word	0x0003eb80
   1bdb8:	7fefffff 	.word	0x7fefffff
   1bdbc:	0003eb74 	.word	0x0003eb74
   1bdc0:	0003eb70 	.word	0x0003eb70
   1bdc4:	0003b9fc 	.word	0x0003b9fc
   1bdc8:	0003ec00 	.word	0x0003ec00
   1bdcc:	f1aa 0a10 	sub.w	sl, sl, #16
   1bdd0:	f1ba 0f10 	cmp.w	sl, #16
   1bdd4:	f102 0208 	add.w	r2, r2, #8
   1bdd8:	dd16      	ble.n	1be08 <_vfprintf_r+0xa40>
   1bdda:	3301      	adds	r3, #1
   1bddc:	3110      	adds	r1, #16
   1bdde:	2b07      	cmp	r3, #7
   1bde0:	9125      	str	r1, [sp, #148]	; 0x94
   1bde2:	9324      	str	r3, [sp, #144]	; 0x90
   1bde4:	e882 0840 	stmia.w	r2, {r6, fp}
   1bde8:	ddf0      	ble.n	1bdcc <_vfprintf_r+0xa04>
   1bdea:	aa23      	add	r2, sp, #140	; 0x8c
   1bdec:	4629      	mov	r1, r5
   1bdee:	4620      	mov	r0, r4
   1bdf0:	f7fe fc56 	bl	1a6a0 <__sprint_r>
   1bdf4:	2800      	cmp	r0, #0
   1bdf6:	d1c2      	bne.n	1bd7e <_vfprintf_r+0x9b6>
   1bdf8:	f1aa 0a10 	sub.w	sl, sl, #16
   1bdfc:	f1ba 0f10 	cmp.w	sl, #16
   1be00:	9925      	ldr	r1, [sp, #148]	; 0x94
   1be02:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1be04:	aa30      	add	r2, sp, #192	; 0xc0
   1be06:	dce8      	bgt.n	1bdda <_vfprintf_r+0xa12>
   1be08:	4635      	mov	r5, r6
   1be0a:	460c      	mov	r4, r1
   1be0c:	4646      	mov	r6, r8
   1be0e:	4690      	mov	r8, r2
   1be10:	3301      	adds	r3, #1
   1be12:	4454      	add	r4, sl
   1be14:	2b07      	cmp	r3, #7
   1be16:	9425      	str	r4, [sp, #148]	; 0x94
   1be18:	9324      	str	r3, [sp, #144]	; 0x90
   1be1a:	e888 0420 	stmia.w	r8, {r5, sl}
   1be1e:	f300 8264 	bgt.w	1c2ea <_vfprintf_r+0xf22>
   1be22:	f108 0808 	add.w	r8, r8, #8
   1be26:	e47e      	b.n	1b726 <_vfprintf_r+0x35e>
   1be28:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1be2a:	9e24      	ldr	r6, [sp, #144]	; 0x90
   1be2c:	2b01      	cmp	r3, #1
   1be2e:	f340 81fd 	ble.w	1c22c <_vfprintf_r+0xe64>
   1be32:	3601      	adds	r6, #1
   1be34:	3401      	adds	r4, #1
   1be36:	2301      	movs	r3, #1
   1be38:	2e07      	cmp	r6, #7
   1be3a:	9425      	str	r4, [sp, #148]	; 0x94
   1be3c:	9624      	str	r6, [sp, #144]	; 0x90
   1be3e:	f8c8 7000 	str.w	r7, [r8]
   1be42:	f8c8 3004 	str.w	r3, [r8, #4]
   1be46:	f300 820e 	bgt.w	1c266 <_vfprintf_r+0xe9e>
   1be4a:	f108 0808 	add.w	r8, r8, #8
   1be4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1be50:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1be52:	f8c8 3000 	str.w	r3, [r8]
   1be56:	3601      	adds	r6, #1
   1be58:	4414      	add	r4, r2
   1be5a:	2e07      	cmp	r6, #7
   1be5c:	9425      	str	r4, [sp, #148]	; 0x94
   1be5e:	9624      	str	r6, [sp, #144]	; 0x90
   1be60:	f8c8 2004 	str.w	r2, [r8, #4]
   1be64:	f300 822e 	bgt.w	1c2c4 <_vfprintf_r+0xefc>
   1be68:	f108 0808 	add.w	r8, r8, #8
   1be6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1be6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1be70:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1be72:	9912      	ldr	r1, [sp, #72]	; 0x48
   1be74:	f7f9 fd8c 	bl	15990 <__aeabi_dcmpeq>
   1be78:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1be7a:	2800      	cmp	r0, #0
   1be7c:	f040 8106 	bne.w	1c08c <_vfprintf_r+0xcc4>
   1be80:	3b01      	subs	r3, #1
   1be82:	3601      	adds	r6, #1
   1be84:	3701      	adds	r7, #1
   1be86:	441c      	add	r4, r3
   1be88:	2e07      	cmp	r6, #7
   1be8a:	9624      	str	r6, [sp, #144]	; 0x90
   1be8c:	9425      	str	r4, [sp, #148]	; 0x94
   1be8e:	f8c8 7000 	str.w	r7, [r8]
   1be92:	f8c8 3004 	str.w	r3, [r8, #4]
   1be96:	f300 81d9 	bgt.w	1c24c <_vfprintf_r+0xe84>
   1be9a:	f108 0808 	add.w	r8, r8, #8
   1be9e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1bea0:	f8c8 2004 	str.w	r2, [r8, #4]
   1bea4:	3601      	adds	r6, #1
   1bea6:	4414      	add	r4, r2
   1bea8:	ab1f      	add	r3, sp, #124	; 0x7c
   1beaa:	2e07      	cmp	r6, #7
   1beac:	9425      	str	r4, [sp, #148]	; 0x94
   1beae:	9624      	str	r6, [sp, #144]	; 0x90
   1beb0:	f8c8 3000 	str.w	r3, [r8]
   1beb4:	f77f ac8b 	ble.w	1b7ce <_vfprintf_r+0x406>
   1beb8:	aa23      	add	r2, sp, #140	; 0x8c
   1beba:	990a      	ldr	r1, [sp, #40]	; 0x28
   1bebc:	9808      	ldr	r0, [sp, #32]
   1bebe:	f7fe fbef 	bl	1a6a0 <__sprint_r>
   1bec2:	b958      	cbnz	r0, 1bedc <_vfprintf_r+0xb14>
   1bec4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1bec6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1beca:	e482      	b.n	1b7d2 <_vfprintf_r+0x40a>
   1becc:	aa23      	add	r2, sp, #140	; 0x8c
   1bece:	990a      	ldr	r1, [sp, #40]	; 0x28
   1bed0:	9808      	ldr	r0, [sp, #32]
   1bed2:	f7fe fbe5 	bl	1a6a0 <__sprint_r>
   1bed6:	2800      	cmp	r0, #0
   1bed8:	f43f acc5 	beq.w	1b866 <_vfprintf_r+0x49e>
   1bedc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1bee0:	e6dc      	b.n	1bc9c <_vfprintf_r+0x8d4>
   1bee2:	f8dd b018 	ldr.w	fp, [sp, #24]
   1bee6:	2b01      	cmp	r3, #1
   1bee8:	f000 8121 	beq.w	1c12e <_vfprintf_r+0xd66>
   1beec:	2b02      	cmp	r3, #2
   1beee:	d127      	bne.n	1bf40 <_vfprintf_r+0xb78>
   1bef0:	f8cd b018 	str.w	fp, [sp, #24]
   1bef4:	2400      	movs	r4, #0
   1bef6:	2500      	movs	r5, #0
   1bef8:	e591      	b.n	1ba1e <_vfprintf_r+0x656>
   1befa:	aa23      	add	r2, sp, #140	; 0x8c
   1befc:	990a      	ldr	r1, [sp, #40]	; 0x28
   1befe:	9808      	ldr	r0, [sp, #32]
   1bf00:	f7fe fbce 	bl	1a6a0 <__sprint_r>
   1bf04:	2800      	cmp	r0, #0
   1bf06:	d1e9      	bne.n	1bedc <_vfprintf_r+0xb14>
   1bf08:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1bf0a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1bf0e:	e44d      	b.n	1b7ac <_vfprintf_r+0x3e4>
   1bf10:	aa23      	add	r2, sp, #140	; 0x8c
   1bf12:	990a      	ldr	r1, [sp, #40]	; 0x28
   1bf14:	9808      	ldr	r0, [sp, #32]
   1bf16:	f7fe fbc3 	bl	1a6a0 <__sprint_r>
   1bf1a:	2800      	cmp	r0, #0
   1bf1c:	d1de      	bne.n	1bedc <_vfprintf_r+0xb14>
   1bf1e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1bf20:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1bf24:	f7ff bbec 	b.w	1b700 <_vfprintf_r+0x338>
   1bf28:	aa23      	add	r2, sp, #140	; 0x8c
   1bf2a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1bf2c:	9808      	ldr	r0, [sp, #32]
   1bf2e:	f7fe fbb7 	bl	1a6a0 <__sprint_r>
   1bf32:	2800      	cmp	r0, #0
   1bf34:	d1d2      	bne.n	1bedc <_vfprintf_r+0xb14>
   1bf36:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1bf38:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1bf3c:	f7ff bbf0 	b.w	1b720 <_vfprintf_r+0x358>
   1bf40:	f8cd b018 	str.w	fp, [sp, #24]
   1bf44:	2400      	movs	r4, #0
   1bf46:	2500      	movs	r5, #0
   1bf48:	a930      	add	r1, sp, #192	; 0xc0
   1bf4a:	e000      	b.n	1bf4e <_vfprintf_r+0xb86>
   1bf4c:	4639      	mov	r1, r7
   1bf4e:	08e2      	lsrs	r2, r4, #3
   1bf50:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1bf54:	08e8      	lsrs	r0, r5, #3
   1bf56:	f004 0307 	and.w	r3, r4, #7
   1bf5a:	4605      	mov	r5, r0
   1bf5c:	4614      	mov	r4, r2
   1bf5e:	3330      	adds	r3, #48	; 0x30
   1bf60:	ea54 0205 	orrs.w	r2, r4, r5
   1bf64:	f801 3c01 	strb.w	r3, [r1, #-1]
   1bf68:	f101 37ff 	add.w	r7, r1, #4294967295
   1bf6c:	d1ee      	bne.n	1bf4c <_vfprintf_r+0xb84>
   1bf6e:	9a06      	ldr	r2, [sp, #24]
   1bf70:	07d2      	lsls	r2, r2, #31
   1bf72:	f57f ad64 	bpl.w	1ba3e <_vfprintf_r+0x676>
   1bf76:	2b30      	cmp	r3, #48	; 0x30
   1bf78:	f43f ad61 	beq.w	1ba3e <_vfprintf_r+0x676>
   1bf7c:	2330      	movs	r3, #48	; 0x30
   1bf7e:	3902      	subs	r1, #2
   1bf80:	f807 3c01 	strb.w	r3, [r7, #-1]
   1bf84:	ab30      	add	r3, sp, #192	; 0xc0
   1bf86:	1a5b      	subs	r3, r3, r1
   1bf88:	930d      	str	r3, [sp, #52]	; 0x34
   1bf8a:	460f      	mov	r7, r1
   1bf8c:	f7ff bb46 	b.w	1b61c <_vfprintf_r+0x254>
   1bf90:	2302      	movs	r3, #2
   1bf92:	f7ff bb25 	b.w	1b5e0 <_vfprintf_r+0x218>
   1bf96:	991d      	ldr	r1, [sp, #116]	; 0x74
   1bf98:	2900      	cmp	r1, #0
   1bf9a:	f340 8274 	ble.w	1c486 <_vfprintf_r+0x10be>
   1bf9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1bfa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1bfa2:	4293      	cmp	r3, r2
   1bfa4:	bfa8      	it	ge
   1bfa6:	4613      	movge	r3, r2
   1bfa8:	2b00      	cmp	r3, #0
   1bfaa:	461e      	mov	r6, r3
   1bfac:	dd0d      	ble.n	1bfca <_vfprintf_r+0xc02>
   1bfae:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1bfb0:	f8c8 7000 	str.w	r7, [r8]
   1bfb4:	3301      	adds	r3, #1
   1bfb6:	4434      	add	r4, r6
   1bfb8:	2b07      	cmp	r3, #7
   1bfba:	9425      	str	r4, [sp, #148]	; 0x94
   1bfbc:	f8c8 6004 	str.w	r6, [r8, #4]
   1bfc0:	9324      	str	r3, [sp, #144]	; 0x90
   1bfc2:	f300 8324 	bgt.w	1c60e <_vfprintf_r+0x1246>
   1bfc6:	f108 0808 	add.w	r8, r8, #8
   1bfca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1bfcc:	2e00      	cmp	r6, #0
   1bfce:	bfa8      	it	ge
   1bfd0:	1b9b      	subge	r3, r3, r6
   1bfd2:	2b00      	cmp	r3, #0
   1bfd4:	461e      	mov	r6, r3
   1bfd6:	f340 80d0 	ble.w	1c17a <_vfprintf_r+0xdb2>
   1bfda:	2e10      	cmp	r6, #16
   1bfdc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1bfde:	4dc0      	ldr	r5, [pc, #768]	; (1c2e0 <_vfprintf_r+0xf18>)
   1bfe0:	f340 80b7 	ble.w	1c152 <_vfprintf_r+0xd8a>
   1bfe4:	4622      	mov	r2, r4
   1bfe6:	f04f 0a10 	mov.w	sl, #16
   1bfea:	f8dd b020 	ldr.w	fp, [sp, #32]
   1bfee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1bff0:	e005      	b.n	1bffe <_vfprintf_r+0xc36>
   1bff2:	f108 0808 	add.w	r8, r8, #8
   1bff6:	3e10      	subs	r6, #16
   1bff8:	2e10      	cmp	r6, #16
   1bffa:	f340 80a9 	ble.w	1c150 <_vfprintf_r+0xd88>
   1bffe:	3301      	adds	r3, #1
   1c000:	3210      	adds	r2, #16
   1c002:	2b07      	cmp	r3, #7
   1c004:	9225      	str	r2, [sp, #148]	; 0x94
   1c006:	9324      	str	r3, [sp, #144]	; 0x90
   1c008:	e888 0420 	stmia.w	r8, {r5, sl}
   1c00c:	ddf1      	ble.n	1bff2 <_vfprintf_r+0xc2a>
   1c00e:	aa23      	add	r2, sp, #140	; 0x8c
   1c010:	4621      	mov	r1, r4
   1c012:	4658      	mov	r0, fp
   1c014:	f7fe fb44 	bl	1a6a0 <__sprint_r>
   1c018:	2800      	cmp	r0, #0
   1c01a:	f040 8324 	bne.w	1c666 <_vfprintf_r+0x129e>
   1c01e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1c020:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1c022:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1c026:	e7e6      	b.n	1bff6 <_vfprintf_r+0xc2e>
   1c028:	2d00      	cmp	r5, #0
   1c02a:	bf08      	it	eq
   1c02c:	2c0a      	cmpeq	r4, #10
   1c02e:	d37c      	bcc.n	1c12a <_vfprintf_r+0xd62>
   1c030:	af30      	add	r7, sp, #192	; 0xc0
   1c032:	4620      	mov	r0, r4
   1c034:	4629      	mov	r1, r5
   1c036:	220a      	movs	r2, #10
   1c038:	2300      	movs	r3, #0
   1c03a:	f7fa f86d 	bl	16118 <__aeabi_uldivmod>
   1c03e:	3230      	adds	r2, #48	; 0x30
   1c040:	f807 2d01 	strb.w	r2, [r7, #-1]!
   1c044:	4620      	mov	r0, r4
   1c046:	4629      	mov	r1, r5
   1c048:	2300      	movs	r3, #0
   1c04a:	220a      	movs	r2, #10
   1c04c:	f7fa f864 	bl	16118 <__aeabi_uldivmod>
   1c050:	4604      	mov	r4, r0
   1c052:	460d      	mov	r5, r1
   1c054:	ea54 0305 	orrs.w	r3, r4, r5
   1c058:	d1eb      	bne.n	1c032 <_vfprintf_r+0xc6a>
   1c05a:	ab30      	add	r3, sp, #192	; 0xc0
   1c05c:	1bdb      	subs	r3, r3, r7
   1c05e:	930d      	str	r3, [sp, #52]	; 0x34
   1c060:	f7ff badc 	b.w	1b61c <_vfprintf_r+0x254>
   1c064:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c066:	930d      	str	r3, [sp, #52]	; 0x34
   1c068:	af30      	add	r7, sp, #192	; 0xc0
   1c06a:	f7ff bad7 	b.w	1b61c <_vfprintf_r+0x254>
   1c06e:	aa23      	add	r2, sp, #140	; 0x8c
   1c070:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c072:	9808      	ldr	r0, [sp, #32]
   1c074:	f7fe fb14 	bl	1a6a0 <__sprint_r>
   1c078:	2800      	cmp	r0, #0
   1c07a:	f47f af2f 	bne.w	1bedc <_vfprintf_r+0xb14>
   1c07e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
   1c082:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1c084:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1c088:	f7ff bb28 	b.w	1b6dc <_vfprintf_r+0x314>
   1c08c:	1e5f      	subs	r7, r3, #1
   1c08e:	2f00      	cmp	r7, #0
   1c090:	f77f af05 	ble.w	1be9e <_vfprintf_r+0xad6>
   1c094:	2f10      	cmp	r7, #16
   1c096:	4d92      	ldr	r5, [pc, #584]	; (1c2e0 <_vfprintf_r+0xf18>)
   1c098:	f340 810a 	ble.w	1c2b0 <_vfprintf_r+0xee8>
   1c09c:	f04f 0a10 	mov.w	sl, #16
   1c0a0:	f8dd b020 	ldr.w	fp, [sp, #32]
   1c0a4:	e005      	b.n	1c0b2 <_vfprintf_r+0xcea>
   1c0a6:	f108 0808 	add.w	r8, r8, #8
   1c0aa:	3f10      	subs	r7, #16
   1c0ac:	2f10      	cmp	r7, #16
   1c0ae:	f340 80ff 	ble.w	1c2b0 <_vfprintf_r+0xee8>
   1c0b2:	3601      	adds	r6, #1
   1c0b4:	3410      	adds	r4, #16
   1c0b6:	2e07      	cmp	r6, #7
   1c0b8:	9425      	str	r4, [sp, #148]	; 0x94
   1c0ba:	9624      	str	r6, [sp, #144]	; 0x90
   1c0bc:	e888 0420 	stmia.w	r8, {r5, sl}
   1c0c0:	ddf1      	ble.n	1c0a6 <_vfprintf_r+0xcde>
   1c0c2:	aa23      	add	r2, sp, #140	; 0x8c
   1c0c4:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c0c6:	4658      	mov	r0, fp
   1c0c8:	f7fe faea 	bl	1a6a0 <__sprint_r>
   1c0cc:	2800      	cmp	r0, #0
   1c0ce:	f47f af05 	bne.w	1bedc <_vfprintf_r+0xb14>
   1c0d2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1c0d4:	9e24      	ldr	r6, [sp, #144]	; 0x90
   1c0d6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1c0da:	e7e6      	b.n	1c0aa <_vfprintf_r+0xce2>
   1c0dc:	990e      	ldr	r1, [sp, #56]	; 0x38
   1c0de:	460a      	mov	r2, r1
   1c0e0:	3204      	adds	r2, #4
   1c0e2:	680c      	ldr	r4, [r1, #0]
   1c0e4:	920e      	str	r2, [sp, #56]	; 0x38
   1c0e6:	2500      	movs	r5, #0
   1c0e8:	f7ff ba7a 	b.w	1b5e0 <_vfprintf_r+0x218>
   1c0ec:	681c      	ldr	r4, [r3, #0]
   1c0ee:	3304      	adds	r3, #4
   1c0f0:	930e      	str	r3, [sp, #56]	; 0x38
   1c0f2:	2500      	movs	r5, #0
   1c0f4:	e426      	b.n	1b944 <_vfprintf_r+0x57c>
   1c0f6:	3301      	adds	r3, #1
   1c0f8:	4434      	add	r4, r6
   1c0fa:	2b07      	cmp	r3, #7
   1c0fc:	9425      	str	r4, [sp, #148]	; 0x94
   1c0fe:	9324      	str	r3, [sp, #144]	; 0x90
   1c100:	e888 0060 	stmia.w	r8, {r5, r6}
   1c104:	f77f ab63 	ble.w	1b7ce <_vfprintf_r+0x406>
   1c108:	e6d6      	b.n	1beb8 <_vfprintf_r+0xaf0>
   1c10a:	3204      	adds	r2, #4
   1c10c:	681c      	ldr	r4, [r3, #0]
   1c10e:	920e      	str	r2, [sp, #56]	; 0x38
   1c110:	2301      	movs	r3, #1
   1c112:	2500      	movs	r5, #0
   1c114:	f7ff ba64 	b.w	1b5e0 <_vfprintf_r+0x218>
   1c118:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c11a:	6814      	ldr	r4, [r2, #0]
   1c11c:	4613      	mov	r3, r2
   1c11e:	3304      	adds	r3, #4
   1c120:	17e5      	asrs	r5, r4, #31
   1c122:	930e      	str	r3, [sp, #56]	; 0x38
   1c124:	4622      	mov	r2, r4
   1c126:	462b      	mov	r3, r5
   1c128:	e460      	b.n	1b9ec <_vfprintf_r+0x624>
   1c12a:	f8dd b018 	ldr.w	fp, [sp, #24]
   1c12e:	f8cd b018 	str.w	fp, [sp, #24]
   1c132:	af40      	add	r7, sp, #256	; 0x100
   1c134:	3430      	adds	r4, #48	; 0x30
   1c136:	2301      	movs	r3, #1
   1c138:	f807 4d41 	strb.w	r4, [r7, #-65]!
   1c13c:	930d      	str	r3, [sp, #52]	; 0x34
   1c13e:	f7ff ba6d 	b.w	1b61c <_vfprintf_r+0x254>
   1c142:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   1c146:	f7fb fc15 	bl	17974 <__retarget_lock_release_recursive>
   1c14a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   1c14e:	e5af      	b.n	1bcb0 <_vfprintf_r+0x8e8>
   1c150:	4614      	mov	r4, r2
   1c152:	3301      	adds	r3, #1
   1c154:	4434      	add	r4, r6
   1c156:	2b07      	cmp	r3, #7
   1c158:	9425      	str	r4, [sp, #148]	; 0x94
   1c15a:	9324      	str	r3, [sp, #144]	; 0x90
   1c15c:	e888 0060 	stmia.w	r8, {r5, r6}
   1c160:	f340 816d 	ble.w	1c43e <_vfprintf_r+0x1076>
   1c164:	aa23      	add	r2, sp, #140	; 0x8c
   1c166:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c168:	9808      	ldr	r0, [sp, #32]
   1c16a:	f7fe fa99 	bl	1a6a0 <__sprint_r>
   1c16e:	2800      	cmp	r0, #0
   1c170:	f47f aeb4 	bne.w	1bedc <_vfprintf_r+0xb14>
   1c174:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1c176:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1c17a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1c17c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1c17e:	4293      	cmp	r3, r2
   1c180:	f280 8158 	bge.w	1c434 <_vfprintf_r+0x106c>
   1c184:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1c186:	9814      	ldr	r0, [sp, #80]	; 0x50
   1c188:	9915      	ldr	r1, [sp, #84]	; 0x54
   1c18a:	f8c8 1000 	str.w	r1, [r8]
   1c18e:	3201      	adds	r2, #1
   1c190:	4404      	add	r4, r0
   1c192:	2a07      	cmp	r2, #7
   1c194:	9425      	str	r4, [sp, #148]	; 0x94
   1c196:	f8c8 0004 	str.w	r0, [r8, #4]
   1c19a:	9224      	str	r2, [sp, #144]	; 0x90
   1c19c:	f300 8152 	bgt.w	1c444 <_vfprintf_r+0x107c>
   1c1a0:	f108 0808 	add.w	r8, r8, #8
   1c1a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1c1a6:	9910      	ldr	r1, [sp, #64]	; 0x40
   1c1a8:	1ad3      	subs	r3, r2, r3
   1c1aa:	1a56      	subs	r6, r2, r1
   1c1ac:	429e      	cmp	r6, r3
   1c1ae:	bfa8      	it	ge
   1c1b0:	461e      	movge	r6, r3
   1c1b2:	2e00      	cmp	r6, #0
   1c1b4:	dd0e      	ble.n	1c1d4 <_vfprintf_r+0xe0c>
   1c1b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1c1b8:	f8c8 6004 	str.w	r6, [r8, #4]
   1c1bc:	3201      	adds	r2, #1
   1c1be:	440f      	add	r7, r1
   1c1c0:	4434      	add	r4, r6
   1c1c2:	2a07      	cmp	r2, #7
   1c1c4:	f8c8 7000 	str.w	r7, [r8]
   1c1c8:	9425      	str	r4, [sp, #148]	; 0x94
   1c1ca:	9224      	str	r2, [sp, #144]	; 0x90
   1c1cc:	f300 823c 	bgt.w	1c648 <_vfprintf_r+0x1280>
   1c1d0:	f108 0808 	add.w	r8, r8, #8
   1c1d4:	2e00      	cmp	r6, #0
   1c1d6:	bfac      	ite	ge
   1c1d8:	1b9e      	subge	r6, r3, r6
   1c1da:	461e      	movlt	r6, r3
   1c1dc:	2e00      	cmp	r6, #0
   1c1de:	f77f aaf8 	ble.w	1b7d2 <_vfprintf_r+0x40a>
   1c1e2:	2e10      	cmp	r6, #16
   1c1e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1c1e6:	4d3e      	ldr	r5, [pc, #248]	; (1c2e0 <_vfprintf_r+0xf18>)
   1c1e8:	dd85      	ble.n	1c0f6 <_vfprintf_r+0xd2e>
   1c1ea:	2710      	movs	r7, #16
   1c1ec:	f8dd a020 	ldr.w	sl, [sp, #32]
   1c1f0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   1c1f4:	e005      	b.n	1c202 <_vfprintf_r+0xe3a>
   1c1f6:	f108 0808 	add.w	r8, r8, #8
   1c1fa:	3e10      	subs	r6, #16
   1c1fc:	2e10      	cmp	r6, #16
   1c1fe:	f77f af7a 	ble.w	1c0f6 <_vfprintf_r+0xd2e>
   1c202:	3301      	adds	r3, #1
   1c204:	3410      	adds	r4, #16
   1c206:	2b07      	cmp	r3, #7
   1c208:	9425      	str	r4, [sp, #148]	; 0x94
   1c20a:	9324      	str	r3, [sp, #144]	; 0x90
   1c20c:	e888 00a0 	stmia.w	r8, {r5, r7}
   1c210:	ddf1      	ble.n	1c1f6 <_vfprintf_r+0xe2e>
   1c212:	aa23      	add	r2, sp, #140	; 0x8c
   1c214:	4659      	mov	r1, fp
   1c216:	4650      	mov	r0, sl
   1c218:	f7fe fa42 	bl	1a6a0 <__sprint_r>
   1c21c:	2800      	cmp	r0, #0
   1c21e:	f040 8176 	bne.w	1c50e <_vfprintf_r+0x1146>
   1c222:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1c224:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1c226:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1c22a:	e7e6      	b.n	1c1fa <_vfprintf_r+0xe32>
   1c22c:	9b06      	ldr	r3, [sp, #24]
   1c22e:	07d8      	lsls	r0, r3, #31
   1c230:	f53f adff 	bmi.w	1be32 <_vfprintf_r+0xa6a>
   1c234:	3601      	adds	r6, #1
   1c236:	3401      	adds	r4, #1
   1c238:	2301      	movs	r3, #1
   1c23a:	2e07      	cmp	r6, #7
   1c23c:	9425      	str	r4, [sp, #148]	; 0x94
   1c23e:	9624      	str	r6, [sp, #144]	; 0x90
   1c240:	f8c8 7000 	str.w	r7, [r8]
   1c244:	f8c8 3004 	str.w	r3, [r8, #4]
   1c248:	f77f ae27 	ble.w	1be9a <_vfprintf_r+0xad2>
   1c24c:	aa23      	add	r2, sp, #140	; 0x8c
   1c24e:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c250:	9808      	ldr	r0, [sp, #32]
   1c252:	f7fe fa25 	bl	1a6a0 <__sprint_r>
   1c256:	2800      	cmp	r0, #0
   1c258:	f47f ae40 	bne.w	1bedc <_vfprintf_r+0xb14>
   1c25c:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1c25e:	9e24      	ldr	r6, [sp, #144]	; 0x90
   1c260:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1c264:	e61b      	b.n	1be9e <_vfprintf_r+0xad6>
   1c266:	aa23      	add	r2, sp, #140	; 0x8c
   1c268:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c26a:	9808      	ldr	r0, [sp, #32]
   1c26c:	f7fe fa18 	bl	1a6a0 <__sprint_r>
   1c270:	2800      	cmp	r0, #0
   1c272:	f47f ae33 	bne.w	1bedc <_vfprintf_r+0xb14>
   1c276:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1c278:	9e24      	ldr	r6, [sp, #144]	; 0x90
   1c27a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1c27e:	e5e6      	b.n	1be4e <_vfprintf_r+0xa86>
   1c280:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1c282:	3507      	adds	r5, #7
   1c284:	f025 0507 	bic.w	r5, r5, #7
   1c288:	e9d5 2300 	ldrd	r2, r3, [r5]
   1c28c:	f105 0108 	add.w	r1, r5, #8
   1c290:	910e      	str	r1, [sp, #56]	; 0x38
   1c292:	4614      	mov	r4, r2
   1c294:	461d      	mov	r5, r3
   1c296:	f7ff bba9 	b.w	1b9ec <_vfprintf_r+0x624>
   1c29a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1c29c:	3507      	adds	r5, #7
   1c29e:	f025 0307 	bic.w	r3, r5, #7
   1c2a2:	f103 0208 	add.w	r2, r3, #8
   1c2a6:	920e      	str	r2, [sp, #56]	; 0x38
   1c2a8:	e9d3 4500 	ldrd	r4, r5, [r3]
   1c2ac:	f7ff bb4a 	b.w	1b944 <_vfprintf_r+0x57c>
   1c2b0:	3601      	adds	r6, #1
   1c2b2:	443c      	add	r4, r7
   1c2b4:	2e07      	cmp	r6, #7
   1c2b6:	9425      	str	r4, [sp, #148]	; 0x94
   1c2b8:	9624      	str	r6, [sp, #144]	; 0x90
   1c2ba:	e888 00a0 	stmia.w	r8, {r5, r7}
   1c2be:	f77f adec 	ble.w	1be9a <_vfprintf_r+0xad2>
   1c2c2:	e7c3      	b.n	1c24c <_vfprintf_r+0xe84>
   1c2c4:	aa23      	add	r2, sp, #140	; 0x8c
   1c2c6:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c2c8:	9808      	ldr	r0, [sp, #32]
   1c2ca:	f7fe f9e9 	bl	1a6a0 <__sprint_r>
   1c2ce:	2800      	cmp	r0, #0
   1c2d0:	f47f ae04 	bne.w	1bedc <_vfprintf_r+0xb14>
   1c2d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1c2d6:	9e24      	ldr	r6, [sp, #144]	; 0x90
   1c2d8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1c2dc:	e5c6      	b.n	1be6c <_vfprintf_r+0xaa4>
   1c2de:	bf00      	nop
   1c2e0:	0003ec00 	.word	0x0003ec00
   1c2e4:	af30      	add	r7, sp, #192	; 0xc0
   1c2e6:	f7ff b999 	b.w	1b61c <_vfprintf_r+0x254>
   1c2ea:	aa23      	add	r2, sp, #140	; 0x8c
   1c2ec:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c2ee:	9808      	ldr	r0, [sp, #32]
   1c2f0:	f7fe f9d6 	bl	1a6a0 <__sprint_r>
   1c2f4:	2800      	cmp	r0, #0
   1c2f6:	f47f adf1 	bne.w	1bedc <_vfprintf_r+0xb14>
   1c2fa:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1c2fc:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1c300:	f7ff ba11 	b.w	1b726 <_vfprintf_r+0x35e>
   1c304:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   1c308:	4264      	negs	r4, r4
   1c30a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   1c30e:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
   1c312:	2301      	movs	r3, #1
   1c314:	f7ff b968 	b.w	1b5e8 <_vfprintf_r+0x220>
   1c318:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   1c31a:	4622      	mov	r2, r4
   1c31c:	4620      	mov	r0, r4
   1c31e:	9c12      	ldr	r4, [sp, #72]	; 0x48
   1c320:	4623      	mov	r3, r4
   1c322:	4621      	mov	r1, r4
   1c324:	f002 fc0e 	bl	1eb44 <__aeabi_dcmpun>
   1c328:	2800      	cmp	r0, #0
   1c32a:	f040 828c 	bne.w	1c846 <_vfprintf_r+0x147e>
   1c32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c330:	3301      	adds	r3, #1
   1c332:	f026 0320 	bic.w	r3, r6, #32
   1c336:	930d      	str	r3, [sp, #52]	; 0x34
   1c338:	f000 8091 	beq.w	1c45e <_vfprintf_r+0x1096>
   1c33c:	2b47      	cmp	r3, #71	; 0x47
   1c33e:	d104      	bne.n	1c34a <_vfprintf_r+0xf82>
   1c340:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c342:	2b00      	cmp	r3, #0
   1c344:	bf08      	it	eq
   1c346:	2301      	moveq	r3, #1
   1c348:	9309      	str	r3, [sp, #36]	; 0x24
   1c34a:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   1c34e:	9306      	str	r3, [sp, #24]
   1c350:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c352:	f1b3 0a00 	subs.w	sl, r3, #0
   1c356:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1c358:	9307      	str	r3, [sp, #28]
   1c35a:	bfbb      	ittet	lt
   1c35c:	4653      	movlt	r3, sl
   1c35e:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
   1c362:	2300      	movge	r3, #0
   1c364:	232d      	movlt	r3, #45	; 0x2d
   1c366:	2e66      	cmp	r6, #102	; 0x66
   1c368:	930f      	str	r3, [sp, #60]	; 0x3c
   1c36a:	f000 817f 	beq.w	1c66c <_vfprintf_r+0x12a4>
   1c36e:	2e46      	cmp	r6, #70	; 0x46
   1c370:	f000 81d4 	beq.w	1c71c <_vfprintf_r+0x1354>
   1c374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c376:	9a07      	ldr	r2, [sp, #28]
   1c378:	2b45      	cmp	r3, #69	; 0x45
   1c37a:	bf0c      	ite	eq
   1c37c:	9b09      	ldreq	r3, [sp, #36]	; 0x24
   1c37e:	9d09      	ldrne	r5, [sp, #36]	; 0x24
   1c380:	a821      	add	r0, sp, #132	; 0x84
   1c382:	a91e      	add	r1, sp, #120	; 0x78
   1c384:	bf08      	it	eq
   1c386:	1c5d      	addeq	r5, r3, #1
   1c388:	9004      	str	r0, [sp, #16]
   1c38a:	9103      	str	r1, [sp, #12]
   1c38c:	a81d      	add	r0, sp, #116	; 0x74
   1c38e:	2102      	movs	r1, #2
   1c390:	9002      	str	r0, [sp, #8]
   1c392:	4653      	mov	r3, sl
   1c394:	9501      	str	r5, [sp, #4]
   1c396:	9100      	str	r1, [sp, #0]
   1c398:	9808      	ldr	r0, [sp, #32]
   1c39a:	f000 fd25 	bl	1cde8 <_dtoa_r>
   1c39e:	2e67      	cmp	r6, #103	; 0x67
   1c3a0:	4607      	mov	r7, r0
   1c3a2:	f040 81af 	bne.w	1c704 <_vfprintf_r+0x133c>
   1c3a6:	f01b 0f01 	tst.w	fp, #1
   1c3aa:	f000 8213 	beq.w	1c7d4 <_vfprintf_r+0x140c>
   1c3ae:	197c      	adds	r4, r7, r5
   1c3b0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1c3b2:	9807      	ldr	r0, [sp, #28]
   1c3b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c3b6:	4651      	mov	r1, sl
   1c3b8:	f7f9 faea 	bl	15990 <__aeabi_dcmpeq>
   1c3bc:	2800      	cmp	r0, #0
   1c3be:	f040 8132 	bne.w	1c626 <_vfprintf_r+0x125e>
   1c3c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1c3c4:	42a3      	cmp	r3, r4
   1c3c6:	d206      	bcs.n	1c3d6 <_vfprintf_r+0x100e>
   1c3c8:	2130      	movs	r1, #48	; 0x30
   1c3ca:	1c5a      	adds	r2, r3, #1
   1c3cc:	9221      	str	r2, [sp, #132]	; 0x84
   1c3ce:	7019      	strb	r1, [r3, #0]
   1c3d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1c3d2:	429c      	cmp	r4, r3
   1c3d4:	d8f9      	bhi.n	1c3ca <_vfprintf_r+0x1002>
   1c3d6:	1bdb      	subs	r3, r3, r7
   1c3d8:	9311      	str	r3, [sp, #68]	; 0x44
   1c3da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c3dc:	2b47      	cmp	r3, #71	; 0x47
   1c3de:	f000 80b9 	beq.w	1c554 <_vfprintf_r+0x118c>
   1c3e2:	2e65      	cmp	r6, #101	; 0x65
   1c3e4:	f340 8276 	ble.w	1c8d4 <_vfprintf_r+0x150c>
   1c3e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1c3ea:	9310      	str	r3, [sp, #64]	; 0x40
   1c3ec:	2e66      	cmp	r6, #102	; 0x66
   1c3ee:	f000 8162 	beq.w	1c6b6 <_vfprintf_r+0x12ee>
   1c3f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1c3f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c3f6:	4619      	mov	r1, r3
   1c3f8:	4291      	cmp	r1, r2
   1c3fa:	f300 814f 	bgt.w	1c69c <_vfprintf_r+0x12d4>
   1c3fe:	f01b 0f01 	tst.w	fp, #1
   1c402:	f040 8209 	bne.w	1c818 <_vfprintf_r+0x1450>
   1c406:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1c40a:	9307      	str	r3, [sp, #28]
   1c40c:	920d      	str	r2, [sp, #52]	; 0x34
   1c40e:	2667      	movs	r6, #103	; 0x67
   1c410:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1c412:	2b00      	cmp	r3, #0
   1c414:	f040 8096 	bne.w	1c544 <_vfprintf_r+0x117c>
   1c418:	9309      	str	r3, [sp, #36]	; 0x24
   1c41a:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
   1c41e:	f7ff b905 	b.w	1b62c <_vfprintf_r+0x264>
   1c422:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   1c426:	f7fb faa5 	bl	17974 <__retarget_lock_release_recursive>
   1c42a:	f04f 33ff 	mov.w	r3, #4294967295
   1c42e:	930b      	str	r3, [sp, #44]	; 0x2c
   1c430:	f7ff ba30 	b.w	1b894 <_vfprintf_r+0x4cc>
   1c434:	9a06      	ldr	r2, [sp, #24]
   1c436:	07d5      	lsls	r5, r2, #31
   1c438:	f57f aeb4 	bpl.w	1c1a4 <_vfprintf_r+0xddc>
   1c43c:	e6a2      	b.n	1c184 <_vfprintf_r+0xdbc>
   1c43e:	f108 0808 	add.w	r8, r8, #8
   1c442:	e69a      	b.n	1c17a <_vfprintf_r+0xdb2>
   1c444:	aa23      	add	r2, sp, #140	; 0x8c
   1c446:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c448:	9808      	ldr	r0, [sp, #32]
   1c44a:	f7fe f929 	bl	1a6a0 <__sprint_r>
   1c44e:	2800      	cmp	r0, #0
   1c450:	f47f ad44 	bne.w	1bedc <_vfprintf_r+0xb14>
   1c454:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1c456:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1c458:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1c45c:	e6a2      	b.n	1c1a4 <_vfprintf_r+0xddc>
   1c45e:	2306      	movs	r3, #6
   1c460:	9309      	str	r3, [sp, #36]	; 0x24
   1c462:	e772      	b.n	1c34a <_vfprintf_r+0xf82>
   1c464:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   1c468:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
   1c46c:	f7ff bbc7 	b.w	1bbfe <_vfprintf_r+0x836>
   1c470:	aa23      	add	r2, sp, #140	; 0x8c
   1c472:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c474:	9808      	ldr	r0, [sp, #32]
   1c476:	f7fe f913 	bl	1a6a0 <__sprint_r>
   1c47a:	2800      	cmp	r0, #0
   1c47c:	f47f ad2e 	bne.w	1bedc <_vfprintf_r+0xb14>
   1c480:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1c484:	e437      	b.n	1bcf6 <_vfprintf_r+0x92e>
   1c486:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1c488:	4ab4      	ldr	r2, [pc, #720]	; (1c75c <_vfprintf_r+0x1394>)
   1c48a:	f8c8 2000 	str.w	r2, [r8]
   1c48e:	3301      	adds	r3, #1
   1c490:	3401      	adds	r4, #1
   1c492:	2201      	movs	r2, #1
   1c494:	2b07      	cmp	r3, #7
   1c496:	9425      	str	r4, [sp, #148]	; 0x94
   1c498:	9324      	str	r3, [sp, #144]	; 0x90
   1c49a:	f8c8 2004 	str.w	r2, [r8, #4]
   1c49e:	f300 8124 	bgt.w	1c6ea <_vfprintf_r+0x1322>
   1c4a2:	f108 0808 	add.w	r8, r8, #8
   1c4a6:	b929      	cbnz	r1, 1c4b4 <_vfprintf_r+0x10ec>
   1c4a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1c4aa:	b91b      	cbnz	r3, 1c4b4 <_vfprintf_r+0x10ec>
   1c4ac:	9b06      	ldr	r3, [sp, #24]
   1c4ae:	07de      	lsls	r6, r3, #31
   1c4b0:	f57f a98f 	bpl.w	1b7d2 <_vfprintf_r+0x40a>
   1c4b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1c4b6:	9814      	ldr	r0, [sp, #80]	; 0x50
   1c4b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1c4ba:	f8c8 2000 	str.w	r2, [r8]
   1c4be:	3301      	adds	r3, #1
   1c4c0:	4602      	mov	r2, r0
   1c4c2:	4422      	add	r2, r4
   1c4c4:	2b07      	cmp	r3, #7
   1c4c6:	9225      	str	r2, [sp, #148]	; 0x94
   1c4c8:	f8c8 0004 	str.w	r0, [r8, #4]
   1c4cc:	9324      	str	r3, [sp, #144]	; 0x90
   1c4ce:	f300 8169 	bgt.w	1c7a4 <_vfprintf_r+0x13dc>
   1c4d2:	f108 0808 	add.w	r8, r8, #8
   1c4d6:	2900      	cmp	r1, #0
   1c4d8:	f2c0 8136 	blt.w	1c748 <_vfprintf_r+0x1380>
   1c4dc:	9911      	ldr	r1, [sp, #68]	; 0x44
   1c4de:	f8c8 7000 	str.w	r7, [r8]
   1c4e2:	3301      	adds	r3, #1
   1c4e4:	188c      	adds	r4, r1, r2
   1c4e6:	2b07      	cmp	r3, #7
   1c4e8:	9425      	str	r4, [sp, #148]	; 0x94
   1c4ea:	9324      	str	r3, [sp, #144]	; 0x90
   1c4ec:	f8c8 1004 	str.w	r1, [r8, #4]
   1c4f0:	f77f a96d 	ble.w	1b7ce <_vfprintf_r+0x406>
   1c4f4:	e4e0      	b.n	1beb8 <_vfprintf_r+0xaf0>
   1c4f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c4f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1c4fa:	6813      	ldr	r3, [r2, #0]
   1c4fc:	17cd      	asrs	r5, r1, #31
   1c4fe:	4608      	mov	r0, r1
   1c500:	3204      	adds	r2, #4
   1c502:	4629      	mov	r1, r5
   1c504:	920e      	str	r2, [sp, #56]	; 0x38
   1c506:	e9c3 0100 	strd	r0, r1, [r3]
   1c50a:	f7fe bfa9 	b.w	1b460 <_vfprintf_r+0x98>
   1c50e:	46da      	mov	sl, fp
   1c510:	f7ff bbc4 	b.w	1bc9c <_vfprintf_r+0x8d4>
   1c514:	aa23      	add	r2, sp, #140	; 0x8c
   1c516:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c518:	9808      	ldr	r0, [sp, #32]
   1c51a:	f7fe f8c1 	bl	1a6a0 <__sprint_r>
   1c51e:	2800      	cmp	r0, #0
   1c520:	f47f acdc 	bne.w	1bedc <_vfprintf_r+0xb14>
   1c524:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1c526:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1c52a:	f7ff bbfd 	b.w	1bd28 <_vfprintf_r+0x960>
   1c52e:	4638      	mov	r0, r7
   1c530:	9409      	str	r4, [sp, #36]	; 0x24
   1c532:	f7fc fd85 	bl	19040 <strlen>
   1c536:	950e      	str	r5, [sp, #56]	; 0x38
   1c538:	900d      	str	r0, [sp, #52]	; 0x34
   1c53a:	f8cd b018 	str.w	fp, [sp, #24]
   1c53e:	4603      	mov	r3, r0
   1c540:	f7ff ba36 	b.w	1b9b0 <_vfprintf_r+0x5e8>
   1c544:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   1c548:	2300      	movs	r3, #0
   1c54a:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
   1c54e:	9309      	str	r3, [sp, #36]	; 0x24
   1c550:	f7ff b86f 	b.w	1b632 <_vfprintf_r+0x26a>
   1c554:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1c556:	9310      	str	r3, [sp, #64]	; 0x40
   1c558:	461a      	mov	r2, r3
   1c55a:	3303      	adds	r3, #3
   1c55c:	db04      	blt.n	1c568 <_vfprintf_r+0x11a0>
   1c55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c560:	4619      	mov	r1, r3
   1c562:	4291      	cmp	r1, r2
   1c564:	f6bf af45 	bge.w	1c3f2 <_vfprintf_r+0x102a>
   1c568:	3e02      	subs	r6, #2
   1c56a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1c56c:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
   1c570:	3b01      	subs	r3, #1
   1c572:	2b00      	cmp	r3, #0
   1c574:	931d      	str	r3, [sp, #116]	; 0x74
   1c576:	bfbd      	ittte	lt
   1c578:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   1c57a:	f1c3 0301 	rsblt	r3, r3, #1
   1c57e:	222d      	movlt	r2, #45	; 0x2d
   1c580:	222b      	movge	r2, #43	; 0x2b
   1c582:	2b09      	cmp	r3, #9
   1c584:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
   1c588:	f340 813e 	ble.w	1c808 <_vfprintf_r+0x1440>
   1c58c:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
   1c590:	4620      	mov	r0, r4
   1c592:	4d73      	ldr	r5, [pc, #460]	; (1c760 <_vfprintf_r+0x1398>)
   1c594:	e000      	b.n	1c598 <_vfprintf_r+0x11d0>
   1c596:	4610      	mov	r0, r2
   1c598:	fb85 1203 	smull	r1, r2, r5, r3
   1c59c:	17d9      	asrs	r1, r3, #31
   1c59e:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   1c5a2:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1c5a6:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   1c5aa:	3230      	adds	r2, #48	; 0x30
   1c5ac:	2909      	cmp	r1, #9
   1c5ae:	f800 2c01 	strb.w	r2, [r0, #-1]
   1c5b2:	460b      	mov	r3, r1
   1c5b4:	f100 32ff 	add.w	r2, r0, #4294967295
   1c5b8:	dced      	bgt.n	1c596 <_vfprintf_r+0x11ce>
   1c5ba:	3330      	adds	r3, #48	; 0x30
   1c5bc:	3802      	subs	r0, #2
   1c5be:	b2d9      	uxtb	r1, r3
   1c5c0:	4284      	cmp	r4, r0
   1c5c2:	f802 1c01 	strb.w	r1, [r2, #-1]
   1c5c6:	f240 8190 	bls.w	1c8ea <_vfprintf_r+0x1522>
   1c5ca:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
   1c5ce:	4613      	mov	r3, r2
   1c5d0:	e001      	b.n	1c5d6 <_vfprintf_r+0x120e>
   1c5d2:	f813 1b01 	ldrb.w	r1, [r3], #1
   1c5d6:	f800 1b01 	strb.w	r1, [r0], #1
   1c5da:	42a3      	cmp	r3, r4
   1c5dc:	d1f9      	bne.n	1c5d2 <_vfprintf_r+0x120a>
   1c5de:	3301      	adds	r3, #1
   1c5e0:	1a9b      	subs	r3, r3, r2
   1c5e2:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
   1c5e6:	4413      	add	r3, r2
   1c5e8:	aa1f      	add	r2, sp, #124	; 0x7c
   1c5ea:	1a9b      	subs	r3, r3, r2
   1c5ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1c5ee:	9319      	str	r3, [sp, #100]	; 0x64
   1c5f0:	2a01      	cmp	r2, #1
   1c5f2:	4413      	add	r3, r2
   1c5f4:	930d      	str	r3, [sp, #52]	; 0x34
   1c5f6:	f340 8145 	ble.w	1c884 <_vfprintf_r+0x14bc>
   1c5fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c5fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1c5fe:	4413      	add	r3, r2
   1c600:	930d      	str	r3, [sp, #52]	; 0x34
   1c602:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1c606:	9307      	str	r3, [sp, #28]
   1c608:	2300      	movs	r3, #0
   1c60a:	9310      	str	r3, [sp, #64]	; 0x40
   1c60c:	e700      	b.n	1c410 <_vfprintf_r+0x1048>
   1c60e:	aa23      	add	r2, sp, #140	; 0x8c
   1c610:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c612:	9808      	ldr	r0, [sp, #32]
   1c614:	f7fe f844 	bl	1a6a0 <__sprint_r>
   1c618:	2800      	cmp	r0, #0
   1c61a:	f47f ac5f 	bne.w	1bedc <_vfprintf_r+0xb14>
   1c61e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1c620:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1c624:	e4d1      	b.n	1bfca <_vfprintf_r+0xc02>
   1c626:	4623      	mov	r3, r4
   1c628:	e6d5      	b.n	1c3d6 <_vfprintf_r+0x100e>
   1c62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c62c:	9710      	str	r7, [sp, #64]	; 0x40
   1c62e:	2b06      	cmp	r3, #6
   1c630:	bf28      	it	cs
   1c632:	2306      	movcs	r3, #6
   1c634:	9709      	str	r7, [sp, #36]	; 0x24
   1c636:	46ba      	mov	sl, r7
   1c638:	9307      	str	r3, [sp, #28]
   1c63a:	950e      	str	r5, [sp, #56]	; 0x38
   1c63c:	f8cd b018 	str.w	fp, [sp, #24]
   1c640:	930d      	str	r3, [sp, #52]	; 0x34
   1c642:	4f48      	ldr	r7, [pc, #288]	; (1c764 <_vfprintf_r+0x139c>)
   1c644:	f7fe bff2 	b.w	1b62c <_vfprintf_r+0x264>
   1c648:	aa23      	add	r2, sp, #140	; 0x8c
   1c64a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c64c:	9808      	ldr	r0, [sp, #32]
   1c64e:	f7fe f827 	bl	1a6a0 <__sprint_r>
   1c652:	2800      	cmp	r0, #0
   1c654:	f47f ac42 	bne.w	1bedc <_vfprintf_r+0xb14>
   1c658:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1c65a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1c65c:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1c65e:	1ad3      	subs	r3, r2, r3
   1c660:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1c664:	e5b6      	b.n	1c1d4 <_vfprintf_r+0xe0c>
   1c666:	46a2      	mov	sl, r4
   1c668:	f7ff bb18 	b.w	1bc9c <_vfprintf_r+0x8d4>
   1c66c:	a821      	add	r0, sp, #132	; 0x84
   1c66e:	a91e      	add	r1, sp, #120	; 0x78
   1c670:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1c672:	9004      	str	r0, [sp, #16]
   1c674:	9103      	str	r1, [sp, #12]
   1c676:	a81d      	add	r0, sp, #116	; 0x74
   1c678:	2103      	movs	r1, #3
   1c67a:	9002      	str	r0, [sp, #8]
   1c67c:	9a07      	ldr	r2, [sp, #28]
   1c67e:	9501      	str	r5, [sp, #4]
   1c680:	4653      	mov	r3, sl
   1c682:	9100      	str	r1, [sp, #0]
   1c684:	9808      	ldr	r0, [sp, #32]
   1c686:	f000 fbaf 	bl	1cde8 <_dtoa_r>
   1c68a:	4607      	mov	r7, r0
   1c68c:	1944      	adds	r4, r0, r5
   1c68e:	783b      	ldrb	r3, [r7, #0]
   1c690:	2b30      	cmp	r3, #48	; 0x30
   1c692:	f000 80ca 	beq.w	1c82a <_vfprintf_r+0x1462>
   1c696:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   1c698:	442c      	add	r4, r5
   1c69a:	e689      	b.n	1c3b0 <_vfprintf_r+0xfe8>
   1c69c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1c69e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1c6a0:	4413      	add	r3, r2
   1c6a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c6a4:	930d      	str	r3, [sp, #52]	; 0x34
   1c6a6:	2a00      	cmp	r2, #0
   1c6a8:	f340 80e4 	ble.w	1c874 <_vfprintf_r+0x14ac>
   1c6ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1c6b0:	9307      	str	r3, [sp, #28]
   1c6b2:	2667      	movs	r6, #103	; 0x67
   1c6b4:	e6ac      	b.n	1c410 <_vfprintf_r+0x1048>
   1c6b6:	2b00      	cmp	r3, #0
   1c6b8:	f340 80fb 	ble.w	1c8b2 <_vfprintf_r+0x14ea>
   1c6bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c6be:	2a00      	cmp	r2, #0
   1c6c0:	f040 80ce 	bne.w	1c860 <_vfprintf_r+0x1498>
   1c6c4:	f01b 0f01 	tst.w	fp, #1
   1c6c8:	f040 80ca 	bne.w	1c860 <_vfprintf_r+0x1498>
   1c6cc:	9307      	str	r3, [sp, #28]
   1c6ce:	930d      	str	r3, [sp, #52]	; 0x34
   1c6d0:	e69e      	b.n	1c410 <_vfprintf_r+0x1048>
   1c6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c6d4:	9307      	str	r3, [sp, #28]
   1c6d6:	930d      	str	r3, [sp, #52]	; 0x34
   1c6d8:	9009      	str	r0, [sp, #36]	; 0x24
   1c6da:	950e      	str	r5, [sp, #56]	; 0x38
   1c6dc:	f8cd b018 	str.w	fp, [sp, #24]
   1c6e0:	9010      	str	r0, [sp, #64]	; 0x40
   1c6e2:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
   1c6e6:	f7fe bfa1 	b.w	1b62c <_vfprintf_r+0x264>
   1c6ea:	aa23      	add	r2, sp, #140	; 0x8c
   1c6ec:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c6ee:	9808      	ldr	r0, [sp, #32]
   1c6f0:	f7fd ffd6 	bl	1a6a0 <__sprint_r>
   1c6f4:	2800      	cmp	r0, #0
   1c6f6:	f47f abf1 	bne.w	1bedc <_vfprintf_r+0xb14>
   1c6fa:	991d      	ldr	r1, [sp, #116]	; 0x74
   1c6fc:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1c6fe:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1c702:	e6d0      	b.n	1c4a6 <_vfprintf_r+0x10de>
   1c704:	2e47      	cmp	r6, #71	; 0x47
   1c706:	f47f ae52 	bne.w	1c3ae <_vfprintf_r+0xfe6>
   1c70a:	f01b 0f01 	tst.w	fp, #1
   1c70e:	f000 80da 	beq.w	1c8c6 <_vfprintf_r+0x14fe>
   1c712:	2e46      	cmp	r6, #70	; 0x46
   1c714:	eb07 0405 	add.w	r4, r7, r5
   1c718:	d0b9      	beq.n	1c68e <_vfprintf_r+0x12c6>
   1c71a:	e649      	b.n	1c3b0 <_vfprintf_r+0xfe8>
   1c71c:	a821      	add	r0, sp, #132	; 0x84
   1c71e:	a91e      	add	r1, sp, #120	; 0x78
   1c720:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1c722:	9004      	str	r0, [sp, #16]
   1c724:	9103      	str	r1, [sp, #12]
   1c726:	a81d      	add	r0, sp, #116	; 0x74
   1c728:	2103      	movs	r1, #3
   1c72a:	9002      	str	r0, [sp, #8]
   1c72c:	9a07      	ldr	r2, [sp, #28]
   1c72e:	9401      	str	r4, [sp, #4]
   1c730:	4653      	mov	r3, sl
   1c732:	9100      	str	r1, [sp, #0]
   1c734:	9808      	ldr	r0, [sp, #32]
   1c736:	f000 fb57 	bl	1cde8 <_dtoa_r>
   1c73a:	4625      	mov	r5, r4
   1c73c:	4607      	mov	r7, r0
   1c73e:	e7e8      	b.n	1c712 <_vfprintf_r+0x134a>
   1c740:	2300      	movs	r3, #0
   1c742:	9309      	str	r3, [sp, #36]	; 0x24
   1c744:	f7fe bec1 	b.w	1b4ca <_vfprintf_r+0x102>
   1c748:	424e      	negs	r6, r1
   1c74a:	3110      	adds	r1, #16
   1c74c:	4d06      	ldr	r5, [pc, #24]	; (1c768 <_vfprintf_r+0x13a0>)
   1c74e:	da43      	bge.n	1c7d8 <_vfprintf_r+0x1410>
   1c750:	2410      	movs	r4, #16
   1c752:	f8dd a020 	ldr.w	sl, [sp, #32]
   1c756:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   1c75a:	e00c      	b.n	1c776 <_vfprintf_r+0x13ae>
   1c75c:	0003b9fc 	.word	0x0003b9fc
   1c760:	66666667 	.word	0x66666667
   1c764:	0003eba8 	.word	0x0003eba8
   1c768:	0003ec00 	.word	0x0003ec00
   1c76c:	f108 0808 	add.w	r8, r8, #8
   1c770:	3e10      	subs	r6, #16
   1c772:	2e10      	cmp	r6, #16
   1c774:	dd30      	ble.n	1c7d8 <_vfprintf_r+0x1410>
   1c776:	3301      	adds	r3, #1
   1c778:	3210      	adds	r2, #16
   1c77a:	2b07      	cmp	r3, #7
   1c77c:	9225      	str	r2, [sp, #148]	; 0x94
   1c77e:	9324      	str	r3, [sp, #144]	; 0x90
   1c780:	f8c8 5000 	str.w	r5, [r8]
   1c784:	f8c8 4004 	str.w	r4, [r8, #4]
   1c788:	ddf0      	ble.n	1c76c <_vfprintf_r+0x13a4>
   1c78a:	aa23      	add	r2, sp, #140	; 0x8c
   1c78c:	4659      	mov	r1, fp
   1c78e:	4650      	mov	r0, sl
   1c790:	f7fd ff86 	bl	1a6a0 <__sprint_r>
   1c794:	2800      	cmp	r0, #0
   1c796:	f47f aeba 	bne.w	1c50e <_vfprintf_r+0x1146>
   1c79a:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1c79c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1c79e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1c7a2:	e7e5      	b.n	1c770 <_vfprintf_r+0x13a8>
   1c7a4:	aa23      	add	r2, sp, #140	; 0x8c
   1c7a6:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c7a8:	9808      	ldr	r0, [sp, #32]
   1c7aa:	f7fd ff79 	bl	1a6a0 <__sprint_r>
   1c7ae:	2800      	cmp	r0, #0
   1c7b0:	f47f ab94 	bne.w	1bedc <_vfprintf_r+0xb14>
   1c7b4:	991d      	ldr	r1, [sp, #116]	; 0x74
   1c7b6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1c7b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1c7ba:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1c7be:	e68a      	b.n	1c4d6 <_vfprintf_r+0x110e>
   1c7c0:	9808      	ldr	r0, [sp, #32]
   1c7c2:	aa23      	add	r2, sp, #140	; 0x8c
   1c7c4:	4651      	mov	r1, sl
   1c7c6:	f7fd ff6b 	bl	1a6a0 <__sprint_r>
   1c7ca:	2800      	cmp	r0, #0
   1c7cc:	f43f aa64 	beq.w	1bc98 <_vfprintf_r+0x8d0>
   1c7d0:	f7ff ba64 	b.w	1bc9c <_vfprintf_r+0x8d4>
   1c7d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1c7d6:	e5fe      	b.n	1c3d6 <_vfprintf_r+0x100e>
   1c7d8:	3301      	adds	r3, #1
   1c7da:	4432      	add	r2, r6
   1c7dc:	2b07      	cmp	r3, #7
   1c7de:	e888 0060 	stmia.w	r8, {r5, r6}
   1c7e2:	9225      	str	r2, [sp, #148]	; 0x94
   1c7e4:	9324      	str	r3, [sp, #144]	; 0x90
   1c7e6:	f108 0808 	add.w	r8, r8, #8
   1c7ea:	f77f ae77 	ble.w	1c4dc <_vfprintf_r+0x1114>
   1c7ee:	aa23      	add	r2, sp, #140	; 0x8c
   1c7f0:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c7f2:	9808      	ldr	r0, [sp, #32]
   1c7f4:	f7fd ff54 	bl	1a6a0 <__sprint_r>
   1c7f8:	2800      	cmp	r0, #0
   1c7fa:	f47f ab6f 	bne.w	1bedc <_vfprintf_r+0xb14>
   1c7fe:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1c800:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1c802:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1c806:	e669      	b.n	1c4dc <_vfprintf_r+0x1114>
   1c808:	3330      	adds	r3, #48	; 0x30
   1c80a:	2230      	movs	r2, #48	; 0x30
   1c80c:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
   1c810:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
   1c814:	ab20      	add	r3, sp, #128	; 0x80
   1c816:	e6e7      	b.n	1c5e8 <_vfprintf_r+0x1220>
   1c818:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1c81a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1c81c:	4413      	add	r3, r2
   1c81e:	930d      	str	r3, [sp, #52]	; 0x34
   1c820:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1c824:	9307      	str	r3, [sp, #28]
   1c826:	2667      	movs	r6, #103	; 0x67
   1c828:	e5f2      	b.n	1c410 <_vfprintf_r+0x1048>
   1c82a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1c82c:	9807      	ldr	r0, [sp, #28]
   1c82e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c830:	4651      	mov	r1, sl
   1c832:	f7f9 f8ad 	bl	15990 <__aeabi_dcmpeq>
   1c836:	2800      	cmp	r0, #0
   1c838:	f47f af2d 	bne.w	1c696 <_vfprintf_r+0x12ce>
   1c83c:	f1c5 0501 	rsb	r5, r5, #1
   1c840:	951d      	str	r5, [sp, #116]	; 0x74
   1c842:	442c      	add	r4, r5
   1c844:	e5b4      	b.n	1c3b0 <_vfprintf_r+0xfe8>
   1c846:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c848:	4f33      	ldr	r7, [pc, #204]	; (1c918 <_vfprintf_r+0x1550>)
   1c84a:	2b00      	cmp	r3, #0
   1c84c:	bfb6      	itet	lt
   1c84e:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
   1c852:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
   1c856:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
   1c85a:	4b30      	ldr	r3, [pc, #192]	; (1c91c <_vfprintf_r+0x1554>)
   1c85c:	f7ff b9d1 	b.w	1bc02 <_vfprintf_r+0x83a>
   1c860:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1c862:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1c864:	4413      	add	r3, r2
   1c866:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c868:	441a      	add	r2, r3
   1c86a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1c86e:	920d      	str	r2, [sp, #52]	; 0x34
   1c870:	9307      	str	r3, [sp, #28]
   1c872:	e5cd      	b.n	1c410 <_vfprintf_r+0x1048>
   1c874:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1c876:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1c878:	f1c3 0301 	rsb	r3, r3, #1
   1c87c:	441a      	add	r2, r3
   1c87e:	4613      	mov	r3, r2
   1c880:	920d      	str	r2, [sp, #52]	; 0x34
   1c882:	e713      	b.n	1c6ac <_vfprintf_r+0x12e4>
   1c884:	f01b 0301 	ands.w	r3, fp, #1
   1c888:	9310      	str	r3, [sp, #64]	; 0x40
   1c88a:	f47f aeb6 	bne.w	1c5fa <_vfprintf_r+0x1232>
   1c88e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c890:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1c894:	9307      	str	r3, [sp, #28]
   1c896:	e5bb      	b.n	1c410 <_vfprintf_r+0x1048>
   1c898:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1c89a:	f899 6001 	ldrb.w	r6, [r9, #1]
   1c89e:	6823      	ldr	r3, [r4, #0]
   1c8a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   1c8a4:	9309      	str	r3, [sp, #36]	; 0x24
   1c8a6:	4623      	mov	r3, r4
   1c8a8:	3304      	adds	r3, #4
   1c8aa:	4681      	mov	r9, r0
   1c8ac:	930e      	str	r3, [sp, #56]	; 0x38
   1c8ae:	f7fe be0a 	b.w	1b4c6 <_vfprintf_r+0xfe>
   1c8b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c8b4:	b913      	cbnz	r3, 1c8bc <_vfprintf_r+0x14f4>
   1c8b6:	f01b 0f01 	tst.w	fp, #1
   1c8ba:	d002      	beq.n	1c8c2 <_vfprintf_r+0x14fa>
   1c8bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1c8be:	3301      	adds	r3, #1
   1c8c0:	e7d1      	b.n	1c866 <_vfprintf_r+0x149e>
   1c8c2:	2301      	movs	r3, #1
   1c8c4:	e702      	b.n	1c6cc <_vfprintf_r+0x1304>
   1c8c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1c8c8:	1bdb      	subs	r3, r3, r7
   1c8ca:	9311      	str	r3, [sp, #68]	; 0x44
   1c8cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c8ce:	2b47      	cmp	r3, #71	; 0x47
   1c8d0:	f43f ae40 	beq.w	1c554 <_vfprintf_r+0x118c>
   1c8d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1c8d6:	9310      	str	r3, [sp, #64]	; 0x40
   1c8d8:	e647      	b.n	1c56a <_vfprintf_r+0x11a2>
   1c8da:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   1c8de:	f7ff b81d 	b.w	1b91c <_vfprintf_r+0x554>
   1c8e2:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   1c8e6:	f7ff b918 	b.w	1bb1a <_vfprintf_r+0x752>
   1c8ea:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
   1c8ee:	e67b      	b.n	1c5e8 <_vfprintf_r+0x1220>
   1c8f0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   1c8f4:	f7ff b866 	b.w	1b9c4 <_vfprintf_r+0x5fc>
   1c8f8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   1c8fc:	f7ff b9ac 	b.w	1bc58 <_vfprintf_r+0x890>
   1c900:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   1c904:	f7ff b934 	b.w	1bb70 <_vfprintf_r+0x7a8>
   1c908:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   1c90c:	f7ff b8b0 	b.w	1ba70 <_vfprintf_r+0x6a8>
   1c910:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   1c914:	f7ff b945 	b.w	1bba2 <_vfprintf_r+0x7da>
   1c918:	0003eb7c 	.word	0x0003eb7c
   1c91c:	0003eb78 	.word	0x0003eb78

0001c920 <__sbprintf>:
   1c920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c924:	460c      	mov	r4, r1
   1c926:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   1c92a:	8989      	ldrh	r1, [r1, #12]
   1c92c:	6e66      	ldr	r6, [r4, #100]	; 0x64
   1c92e:	89e5      	ldrh	r5, [r4, #14]
   1c930:	9619      	str	r6, [sp, #100]	; 0x64
   1c932:	f021 0102 	bic.w	r1, r1, #2
   1c936:	4606      	mov	r6, r0
   1c938:	69e0      	ldr	r0, [r4, #28]
   1c93a:	f8ad 100c 	strh.w	r1, [sp, #12]
   1c93e:	4617      	mov	r7, r2
   1c940:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1c944:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1c946:	f8ad 500e 	strh.w	r5, [sp, #14]
   1c94a:	4698      	mov	r8, r3
   1c94c:	ad1a      	add	r5, sp, #104	; 0x68
   1c94e:	2300      	movs	r3, #0
   1c950:	9007      	str	r0, [sp, #28]
   1c952:	a816      	add	r0, sp, #88	; 0x58
   1c954:	9209      	str	r2, [sp, #36]	; 0x24
   1c956:	9306      	str	r3, [sp, #24]
   1c958:	9500      	str	r5, [sp, #0]
   1c95a:	9504      	str	r5, [sp, #16]
   1c95c:	9102      	str	r1, [sp, #8]
   1c95e:	9105      	str	r1, [sp, #20]
   1c960:	f7fb f802 	bl	17968 <__retarget_lock_init_recursive>
   1c964:	4643      	mov	r3, r8
   1c966:	463a      	mov	r2, r7
   1c968:	4669      	mov	r1, sp
   1c96a:	4630      	mov	r0, r6
   1c96c:	f7fe fd2c 	bl	1b3c8 <_vfprintf_r>
   1c970:	1e05      	subs	r5, r0, #0
   1c972:	db07      	blt.n	1c984 <__sbprintf+0x64>
   1c974:	4630      	mov	r0, r6
   1c976:	4669      	mov	r1, sp
   1c978:	f001 fa00 	bl	1dd7c <_fflush_r>
   1c97c:	2800      	cmp	r0, #0
   1c97e:	bf18      	it	ne
   1c980:	f04f 35ff 	movne.w	r5, #4294967295
   1c984:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1c988:	065b      	lsls	r3, r3, #25
   1c98a:	d503      	bpl.n	1c994 <__sbprintf+0x74>
   1c98c:	89a3      	ldrh	r3, [r4, #12]
   1c98e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1c992:	81a3      	strh	r3, [r4, #12]
   1c994:	9816      	ldr	r0, [sp, #88]	; 0x58
   1c996:	f7fa ffe9 	bl	1796c <__retarget_lock_close_recursive>
   1c99a:	4628      	mov	r0, r5
   1c99c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   1c9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c9a4 <__swbuf_r>:
   1c9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c9a6:	460d      	mov	r5, r1
   1c9a8:	4614      	mov	r4, r2
   1c9aa:	4606      	mov	r6, r0
   1c9ac:	b110      	cbz	r0, 1c9b4 <__swbuf_r+0x10>
   1c9ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1c9b0:	2b00      	cmp	r3, #0
   1c9b2:	d04b      	beq.n	1ca4c <__swbuf_r+0xa8>
   1c9b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1c9b8:	69a3      	ldr	r3, [r4, #24]
   1c9ba:	60a3      	str	r3, [r4, #8]
   1c9bc:	b291      	uxth	r1, r2
   1c9be:	0708      	lsls	r0, r1, #28
   1c9c0:	d539      	bpl.n	1ca36 <__swbuf_r+0x92>
   1c9c2:	6923      	ldr	r3, [r4, #16]
   1c9c4:	2b00      	cmp	r3, #0
   1c9c6:	d036      	beq.n	1ca36 <__swbuf_r+0x92>
   1c9c8:	b2ed      	uxtb	r5, r5
   1c9ca:	0489      	lsls	r1, r1, #18
   1c9cc:	462f      	mov	r7, r5
   1c9ce:	d515      	bpl.n	1c9fc <__swbuf_r+0x58>
   1c9d0:	6822      	ldr	r2, [r4, #0]
   1c9d2:	6961      	ldr	r1, [r4, #20]
   1c9d4:	1ad3      	subs	r3, r2, r3
   1c9d6:	428b      	cmp	r3, r1
   1c9d8:	da1c      	bge.n	1ca14 <__swbuf_r+0x70>
   1c9da:	3301      	adds	r3, #1
   1c9dc:	68a1      	ldr	r1, [r4, #8]
   1c9de:	1c50      	adds	r0, r2, #1
   1c9e0:	3901      	subs	r1, #1
   1c9e2:	60a1      	str	r1, [r4, #8]
   1c9e4:	6020      	str	r0, [r4, #0]
   1c9e6:	7015      	strb	r5, [r2, #0]
   1c9e8:	6962      	ldr	r2, [r4, #20]
   1c9ea:	429a      	cmp	r2, r3
   1c9ec:	d01a      	beq.n	1ca24 <__swbuf_r+0x80>
   1c9ee:	89a3      	ldrh	r3, [r4, #12]
   1c9f0:	07db      	lsls	r3, r3, #31
   1c9f2:	d501      	bpl.n	1c9f8 <__swbuf_r+0x54>
   1c9f4:	2d0a      	cmp	r5, #10
   1c9f6:	d015      	beq.n	1ca24 <__swbuf_r+0x80>
   1c9f8:	4638      	mov	r0, r7
   1c9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c9fc:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1c9fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1ca02:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   1ca06:	81a2      	strh	r2, [r4, #12]
   1ca08:	6822      	ldr	r2, [r4, #0]
   1ca0a:	6661      	str	r1, [r4, #100]	; 0x64
   1ca0c:	6961      	ldr	r1, [r4, #20]
   1ca0e:	1ad3      	subs	r3, r2, r3
   1ca10:	428b      	cmp	r3, r1
   1ca12:	dbe2      	blt.n	1c9da <__swbuf_r+0x36>
   1ca14:	4621      	mov	r1, r4
   1ca16:	4630      	mov	r0, r6
   1ca18:	f001 f9b0 	bl	1dd7c <_fflush_r>
   1ca1c:	b940      	cbnz	r0, 1ca30 <__swbuf_r+0x8c>
   1ca1e:	6822      	ldr	r2, [r4, #0]
   1ca20:	2301      	movs	r3, #1
   1ca22:	e7db      	b.n	1c9dc <__swbuf_r+0x38>
   1ca24:	4621      	mov	r1, r4
   1ca26:	4630      	mov	r0, r6
   1ca28:	f001 f9a8 	bl	1dd7c <_fflush_r>
   1ca2c:	2800      	cmp	r0, #0
   1ca2e:	d0e3      	beq.n	1c9f8 <__swbuf_r+0x54>
   1ca30:	f04f 37ff 	mov.w	r7, #4294967295
   1ca34:	e7e0      	b.n	1c9f8 <__swbuf_r+0x54>
   1ca36:	4621      	mov	r1, r4
   1ca38:	4630      	mov	r0, r6
   1ca3a:	f000 f859 	bl	1caf0 <__swsetup_r>
   1ca3e:	2800      	cmp	r0, #0
   1ca40:	d1f6      	bne.n	1ca30 <__swbuf_r+0x8c>
   1ca42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1ca46:	6923      	ldr	r3, [r4, #16]
   1ca48:	b291      	uxth	r1, r2
   1ca4a:	e7bd      	b.n	1c9c8 <__swbuf_r+0x24>
   1ca4c:	f001 f9ee 	bl	1de2c <__sinit>
   1ca50:	e7b0      	b.n	1c9b4 <__swbuf_r+0x10>
   1ca52:	bf00      	nop

0001ca54 <_wcrtomb_r>:
   1ca54:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ca56:	4606      	mov	r6, r0
   1ca58:	b085      	sub	sp, #20
   1ca5a:	461f      	mov	r7, r3
   1ca5c:	b189      	cbz	r1, 1ca82 <_wcrtomb_r+0x2e>
   1ca5e:	4c10      	ldr	r4, [pc, #64]	; (1caa0 <_wcrtomb_r+0x4c>)
   1ca60:	4d10      	ldr	r5, [pc, #64]	; (1caa4 <_wcrtomb_r+0x50>)
   1ca62:	6824      	ldr	r4, [r4, #0]
   1ca64:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1ca66:	2c00      	cmp	r4, #0
   1ca68:	bf08      	it	eq
   1ca6a:	462c      	moveq	r4, r5
   1ca6c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   1ca70:	47a0      	blx	r4
   1ca72:	1c43      	adds	r3, r0, #1
   1ca74:	d103      	bne.n	1ca7e <_wcrtomb_r+0x2a>
   1ca76:	2200      	movs	r2, #0
   1ca78:	238a      	movs	r3, #138	; 0x8a
   1ca7a:	603a      	str	r2, [r7, #0]
   1ca7c:	6033      	str	r3, [r6, #0]
   1ca7e:	b005      	add	sp, #20
   1ca80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ca82:	460c      	mov	r4, r1
   1ca84:	4906      	ldr	r1, [pc, #24]	; (1caa0 <_wcrtomb_r+0x4c>)
   1ca86:	4a07      	ldr	r2, [pc, #28]	; (1caa4 <_wcrtomb_r+0x50>)
   1ca88:	6809      	ldr	r1, [r1, #0]
   1ca8a:	6b49      	ldr	r1, [r1, #52]	; 0x34
   1ca8c:	2900      	cmp	r1, #0
   1ca8e:	bf08      	it	eq
   1ca90:	4611      	moveq	r1, r2
   1ca92:	4622      	mov	r2, r4
   1ca94:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
   1ca98:	a901      	add	r1, sp, #4
   1ca9a:	47a0      	blx	r4
   1ca9c:	e7e9      	b.n	1ca72 <_wcrtomb_r+0x1e>
   1ca9e:	bf00      	nop
   1caa0:	20000020 	.word	0x20000020
   1caa4:	20000450 	.word	0x20000450

0001caa8 <__ascii_wctomb>:
   1caa8:	b121      	cbz	r1, 1cab4 <__ascii_wctomb+0xc>
   1caaa:	2aff      	cmp	r2, #255	; 0xff
   1caac:	d804      	bhi.n	1cab8 <__ascii_wctomb+0x10>
   1caae:	700a      	strb	r2, [r1, #0]
   1cab0:	2001      	movs	r0, #1
   1cab2:	4770      	bx	lr
   1cab4:	4608      	mov	r0, r1
   1cab6:	4770      	bx	lr
   1cab8:	238a      	movs	r3, #138	; 0x8a
   1caba:	6003      	str	r3, [r0, #0]
   1cabc:	f04f 30ff 	mov.w	r0, #4294967295
   1cac0:	4770      	bx	lr
   1cac2:	bf00      	nop

0001cac4 <_write_r>:
   1cac4:	b570      	push	{r4, r5, r6, lr}
   1cac6:	460d      	mov	r5, r1
   1cac8:	4c08      	ldr	r4, [pc, #32]	; (1caec <_write_r+0x28>)
   1caca:	4611      	mov	r1, r2
   1cacc:	4606      	mov	r6, r0
   1cace:	461a      	mov	r2, r3
   1cad0:	4628      	mov	r0, r5
   1cad2:	2300      	movs	r3, #0
   1cad4:	6023      	str	r3, [r4, #0]
   1cad6:	f7e3 fdef 	bl	6b8 <_write>
   1cada:	1c43      	adds	r3, r0, #1
   1cadc:	d000      	beq.n	1cae0 <_write_r+0x1c>
   1cade:	bd70      	pop	{r4, r5, r6, pc}
   1cae0:	6823      	ldr	r3, [r4, #0]
   1cae2:	2b00      	cmp	r3, #0
   1cae4:	d0fb      	beq.n	1cade <_write_r+0x1a>
   1cae6:	6033      	str	r3, [r6, #0]
   1cae8:	bd70      	pop	{r4, r5, r6, pc}
   1caea:	bf00      	nop
   1caec:	2001b0cc 	.word	0x2001b0cc

0001caf0 <__swsetup_r>:
   1caf0:	b538      	push	{r3, r4, r5, lr}
   1caf2:	4b30      	ldr	r3, [pc, #192]	; (1cbb4 <__swsetup_r+0xc4>)
   1caf4:	681b      	ldr	r3, [r3, #0]
   1caf6:	4605      	mov	r5, r0
   1caf8:	460c      	mov	r4, r1
   1cafa:	b113      	cbz	r3, 1cb02 <__swsetup_r+0x12>
   1cafc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1cafe:	2a00      	cmp	r2, #0
   1cb00:	d038      	beq.n	1cb74 <__swsetup_r+0x84>
   1cb02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1cb06:	b293      	uxth	r3, r2
   1cb08:	0718      	lsls	r0, r3, #28
   1cb0a:	d50c      	bpl.n	1cb26 <__swsetup_r+0x36>
   1cb0c:	6920      	ldr	r0, [r4, #16]
   1cb0e:	b1a8      	cbz	r0, 1cb3c <__swsetup_r+0x4c>
   1cb10:	f013 0201 	ands.w	r2, r3, #1
   1cb14:	d01e      	beq.n	1cb54 <__swsetup_r+0x64>
   1cb16:	6963      	ldr	r3, [r4, #20]
   1cb18:	2200      	movs	r2, #0
   1cb1a:	425b      	negs	r3, r3
   1cb1c:	61a3      	str	r3, [r4, #24]
   1cb1e:	60a2      	str	r2, [r4, #8]
   1cb20:	b1f0      	cbz	r0, 1cb60 <__swsetup_r+0x70>
   1cb22:	2000      	movs	r0, #0
   1cb24:	bd38      	pop	{r3, r4, r5, pc}
   1cb26:	06d9      	lsls	r1, r3, #27
   1cb28:	d53c      	bpl.n	1cba4 <__swsetup_r+0xb4>
   1cb2a:	0758      	lsls	r0, r3, #29
   1cb2c:	d426      	bmi.n	1cb7c <__swsetup_r+0x8c>
   1cb2e:	6920      	ldr	r0, [r4, #16]
   1cb30:	f042 0308 	orr.w	r3, r2, #8
   1cb34:	81a3      	strh	r3, [r4, #12]
   1cb36:	b29b      	uxth	r3, r3
   1cb38:	2800      	cmp	r0, #0
   1cb3a:	d1e9      	bne.n	1cb10 <__swsetup_r+0x20>
   1cb3c:	f403 7220 	and.w	r2, r3, #640	; 0x280
   1cb40:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   1cb44:	d0e4      	beq.n	1cb10 <__swsetup_r+0x20>
   1cb46:	4628      	mov	r0, r5
   1cb48:	4621      	mov	r1, r4
   1cb4a:	f7fa ff43 	bl	179d4 <__smakebuf_r>
   1cb4e:	89a3      	ldrh	r3, [r4, #12]
   1cb50:	6920      	ldr	r0, [r4, #16]
   1cb52:	e7dd      	b.n	1cb10 <__swsetup_r+0x20>
   1cb54:	0799      	lsls	r1, r3, #30
   1cb56:	bf58      	it	pl
   1cb58:	6962      	ldrpl	r2, [r4, #20]
   1cb5a:	60a2      	str	r2, [r4, #8]
   1cb5c:	2800      	cmp	r0, #0
   1cb5e:	d1e0      	bne.n	1cb22 <__swsetup_r+0x32>
   1cb60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1cb64:	061a      	lsls	r2, r3, #24
   1cb66:	d5dd      	bpl.n	1cb24 <__swsetup_r+0x34>
   1cb68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1cb6c:	81a3      	strh	r3, [r4, #12]
   1cb6e:	f04f 30ff 	mov.w	r0, #4294967295
   1cb72:	bd38      	pop	{r3, r4, r5, pc}
   1cb74:	4618      	mov	r0, r3
   1cb76:	f001 f959 	bl	1de2c <__sinit>
   1cb7a:	e7c2      	b.n	1cb02 <__swsetup_r+0x12>
   1cb7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1cb7e:	b151      	cbz	r1, 1cb96 <__swsetup_r+0xa6>
   1cb80:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1cb84:	4299      	cmp	r1, r3
   1cb86:	d004      	beq.n	1cb92 <__swsetup_r+0xa2>
   1cb88:	4628      	mov	r0, r5
   1cb8a:	f001 fa75 	bl	1e078 <_free_r>
   1cb8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1cb92:	2300      	movs	r3, #0
   1cb94:	6323      	str	r3, [r4, #48]	; 0x30
   1cb96:	2300      	movs	r3, #0
   1cb98:	6920      	ldr	r0, [r4, #16]
   1cb9a:	6063      	str	r3, [r4, #4]
   1cb9c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   1cba0:	6020      	str	r0, [r4, #0]
   1cba2:	e7c5      	b.n	1cb30 <__swsetup_r+0x40>
   1cba4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1cba8:	2309      	movs	r3, #9
   1cbaa:	602b      	str	r3, [r5, #0]
   1cbac:	f04f 30ff 	mov.w	r0, #4294967295
   1cbb0:	81a2      	strh	r2, [r4, #12]
   1cbb2:	bd38      	pop	{r3, r4, r5, pc}
   1cbb4:	20000020 	.word	0x20000020

0001cbb8 <__register_exitproc>:
   1cbb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cbbc:	4d2c      	ldr	r5, [pc, #176]	; (1cc70 <__register_exitproc+0xb8>)
   1cbbe:	4606      	mov	r6, r0
   1cbc0:	6828      	ldr	r0, [r5, #0]
   1cbc2:	4698      	mov	r8, r3
   1cbc4:	460f      	mov	r7, r1
   1cbc6:	4691      	mov	r9, r2
   1cbc8:	f7fa fed2 	bl	17970 <__retarget_lock_acquire_recursive>
   1cbcc:	4b29      	ldr	r3, [pc, #164]	; (1cc74 <__register_exitproc+0xbc>)
   1cbce:	681c      	ldr	r4, [r3, #0]
   1cbd0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1cbd4:	2b00      	cmp	r3, #0
   1cbd6:	d03e      	beq.n	1cc56 <__register_exitproc+0x9e>
   1cbd8:	685a      	ldr	r2, [r3, #4]
   1cbda:	2a1f      	cmp	r2, #31
   1cbdc:	dc1c      	bgt.n	1cc18 <__register_exitproc+0x60>
   1cbde:	f102 0e01 	add.w	lr, r2, #1
   1cbe2:	b176      	cbz	r6, 1cc02 <__register_exitproc+0x4a>
   1cbe4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1cbe8:	2401      	movs	r4, #1
   1cbea:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   1cbee:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   1cbf2:	4094      	lsls	r4, r2
   1cbf4:	4320      	orrs	r0, r4
   1cbf6:	2e02      	cmp	r6, #2
   1cbf8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   1cbfc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   1cc00:	d023      	beq.n	1cc4a <__register_exitproc+0x92>
   1cc02:	3202      	adds	r2, #2
   1cc04:	f8c3 e004 	str.w	lr, [r3, #4]
   1cc08:	6828      	ldr	r0, [r5, #0]
   1cc0a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   1cc0e:	f7fa feb1 	bl	17974 <__retarget_lock_release_recursive>
   1cc12:	2000      	movs	r0, #0
   1cc14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1cc18:	4b17      	ldr	r3, [pc, #92]	; (1cc78 <__register_exitproc+0xc0>)
   1cc1a:	b30b      	cbz	r3, 1cc60 <__register_exitproc+0xa8>
   1cc1c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   1cc20:	f7fa ff22 	bl	17a68 <malloc>
   1cc24:	4603      	mov	r3, r0
   1cc26:	b1d8      	cbz	r0, 1cc60 <__register_exitproc+0xa8>
   1cc28:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   1cc2c:	6002      	str	r2, [r0, #0]
   1cc2e:	2100      	movs	r1, #0
   1cc30:	6041      	str	r1, [r0, #4]
   1cc32:	460a      	mov	r2, r1
   1cc34:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1cc38:	f04f 0e01 	mov.w	lr, #1
   1cc3c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   1cc40:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   1cc44:	2e00      	cmp	r6, #0
   1cc46:	d0dc      	beq.n	1cc02 <__register_exitproc+0x4a>
   1cc48:	e7cc      	b.n	1cbe4 <__register_exitproc+0x2c>
   1cc4a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   1cc4e:	430c      	orrs	r4, r1
   1cc50:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   1cc54:	e7d5      	b.n	1cc02 <__register_exitproc+0x4a>
   1cc56:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1cc5a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1cc5e:	e7bb      	b.n	1cbd8 <__register_exitproc+0x20>
   1cc60:	6828      	ldr	r0, [r5, #0]
   1cc62:	f7fa fe87 	bl	17974 <__retarget_lock_release_recursive>
   1cc66:	f04f 30ff 	mov.w	r0, #4294967295
   1cc6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1cc6e:	bf00      	nop
   1cc70:	200009cc 	.word	0x200009cc
   1cc74:	0003e460 	.word	0x0003e460
   1cc78:	00017a69 	.word	0x00017a69

0001cc7c <register_fini>:
   1cc7c:	4b02      	ldr	r3, [pc, #8]	; (1cc88 <register_fini+0xc>)
   1cc7e:	b113      	cbz	r3, 1cc86 <register_fini+0xa>
   1cc80:	4802      	ldr	r0, [pc, #8]	; (1cc8c <register_fini+0x10>)
   1cc82:	f000 b805 	b.w	1cc90 <atexit>
   1cc86:	4770      	bx	lr
   1cc88:	00000000 	.word	0x00000000
   1cc8c:	0001de9d 	.word	0x0001de9d

0001cc90 <atexit>:
   1cc90:	2300      	movs	r3, #0
   1cc92:	4601      	mov	r1, r0
   1cc94:	461a      	mov	r2, r3
   1cc96:	4618      	mov	r0, r3
   1cc98:	f7ff bf8e 	b.w	1cbb8 <__register_exitproc>

0001cc9c <_close_r>:
   1cc9c:	b538      	push	{r3, r4, r5, lr}
   1cc9e:	4c07      	ldr	r4, [pc, #28]	; (1ccbc <_close_r+0x20>)
   1cca0:	2300      	movs	r3, #0
   1cca2:	4605      	mov	r5, r0
   1cca4:	4608      	mov	r0, r1
   1cca6:	6023      	str	r3, [r4, #0]
   1cca8:	f7e3 fd26 	bl	6f8 <_close>
   1ccac:	1c43      	adds	r3, r0, #1
   1ccae:	d000      	beq.n	1ccb2 <_close_r+0x16>
   1ccb0:	bd38      	pop	{r3, r4, r5, pc}
   1ccb2:	6823      	ldr	r3, [r4, #0]
   1ccb4:	2b00      	cmp	r3, #0
   1ccb6:	d0fb      	beq.n	1ccb0 <_close_r+0x14>
   1ccb8:	602b      	str	r3, [r5, #0]
   1ccba:	bd38      	pop	{r3, r4, r5, pc}
   1ccbc:	2001b0cc 	.word	0x2001b0cc

0001ccc0 <quorem>:
   1ccc0:	6902      	ldr	r2, [r0, #16]
   1ccc2:	690b      	ldr	r3, [r1, #16]
   1ccc4:	4293      	cmp	r3, r2
   1ccc6:	f300 808d 	bgt.w	1cde4 <quorem+0x124>
   1ccca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ccce:	f103 38ff 	add.w	r8, r3, #4294967295
   1ccd2:	f101 0714 	add.w	r7, r1, #20
   1ccd6:	f100 0b14 	add.w	fp, r0, #20
   1ccda:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   1ccde:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   1cce2:	ea4f 0488 	mov.w	r4, r8, lsl #2
   1cce6:	b083      	sub	sp, #12
   1cce8:	3201      	adds	r2, #1
   1ccea:	fbb3 f9f2 	udiv	r9, r3, r2
   1ccee:	eb0b 0304 	add.w	r3, fp, r4
   1ccf2:	9400      	str	r4, [sp, #0]
   1ccf4:	eb07 0a04 	add.w	sl, r7, r4
   1ccf8:	9301      	str	r3, [sp, #4]
   1ccfa:	f1b9 0f00 	cmp.w	r9, #0
   1ccfe:	d039      	beq.n	1cd74 <quorem+0xb4>
   1cd00:	2500      	movs	r5, #0
   1cd02:	462e      	mov	r6, r5
   1cd04:	46bc      	mov	ip, r7
   1cd06:	46de      	mov	lr, fp
   1cd08:	f85c 4b04 	ldr.w	r4, [ip], #4
   1cd0c:	f8de 3000 	ldr.w	r3, [lr]
   1cd10:	b2a2      	uxth	r2, r4
   1cd12:	fb09 5502 	mla	r5, r9, r2, r5
   1cd16:	0c22      	lsrs	r2, r4, #16
   1cd18:	0c2c      	lsrs	r4, r5, #16
   1cd1a:	fb09 4202 	mla	r2, r9, r2, r4
   1cd1e:	b2ad      	uxth	r5, r5
   1cd20:	1b75      	subs	r5, r6, r5
   1cd22:	b296      	uxth	r6, r2
   1cd24:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   1cd28:	fa15 f383 	uxtah	r3, r5, r3
   1cd2c:	eb06 4623 	add.w	r6, r6, r3, asr #16
   1cd30:	b29b      	uxth	r3, r3
   1cd32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1cd36:	45e2      	cmp	sl, ip
   1cd38:	ea4f 4512 	mov.w	r5, r2, lsr #16
   1cd3c:	f84e 3b04 	str.w	r3, [lr], #4
   1cd40:	ea4f 4626 	mov.w	r6, r6, asr #16
   1cd44:	d2e0      	bcs.n	1cd08 <quorem+0x48>
   1cd46:	9b00      	ldr	r3, [sp, #0]
   1cd48:	f85b 3003 	ldr.w	r3, [fp, r3]
   1cd4c:	b993      	cbnz	r3, 1cd74 <quorem+0xb4>
   1cd4e:	9c01      	ldr	r4, [sp, #4]
   1cd50:	1f23      	subs	r3, r4, #4
   1cd52:	459b      	cmp	fp, r3
   1cd54:	d20c      	bcs.n	1cd70 <quorem+0xb0>
   1cd56:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1cd5a:	b94b      	cbnz	r3, 1cd70 <quorem+0xb0>
   1cd5c:	f1a4 0308 	sub.w	r3, r4, #8
   1cd60:	e002      	b.n	1cd68 <quorem+0xa8>
   1cd62:	681a      	ldr	r2, [r3, #0]
   1cd64:	3b04      	subs	r3, #4
   1cd66:	b91a      	cbnz	r2, 1cd70 <quorem+0xb0>
   1cd68:	459b      	cmp	fp, r3
   1cd6a:	f108 38ff 	add.w	r8, r8, #4294967295
   1cd6e:	d3f8      	bcc.n	1cd62 <quorem+0xa2>
   1cd70:	f8c0 8010 	str.w	r8, [r0, #16]
   1cd74:	4604      	mov	r4, r0
   1cd76:	f001 fcc3 	bl	1e700 <__mcmp>
   1cd7a:	2800      	cmp	r0, #0
   1cd7c:	db2e      	blt.n	1cddc <quorem+0x11c>
   1cd7e:	f109 0901 	add.w	r9, r9, #1
   1cd82:	465d      	mov	r5, fp
   1cd84:	2300      	movs	r3, #0
   1cd86:	f857 1b04 	ldr.w	r1, [r7], #4
   1cd8a:	6828      	ldr	r0, [r5, #0]
   1cd8c:	b28a      	uxth	r2, r1
   1cd8e:	1a9a      	subs	r2, r3, r2
   1cd90:	0c0b      	lsrs	r3, r1, #16
   1cd92:	fa12 f280 	uxtah	r2, r2, r0
   1cd96:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   1cd9a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   1cd9e:	b292      	uxth	r2, r2
   1cda0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   1cda4:	45ba      	cmp	sl, r7
   1cda6:	f845 2b04 	str.w	r2, [r5], #4
   1cdaa:	ea4f 4323 	mov.w	r3, r3, asr #16
   1cdae:	d2ea      	bcs.n	1cd86 <quorem+0xc6>
   1cdb0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   1cdb4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   1cdb8:	b982      	cbnz	r2, 1cddc <quorem+0x11c>
   1cdba:	1f1a      	subs	r2, r3, #4
   1cdbc:	4593      	cmp	fp, r2
   1cdbe:	d20b      	bcs.n	1cdd8 <quorem+0x118>
   1cdc0:	f853 2c04 	ldr.w	r2, [r3, #-4]
   1cdc4:	b942      	cbnz	r2, 1cdd8 <quorem+0x118>
   1cdc6:	3b08      	subs	r3, #8
   1cdc8:	e002      	b.n	1cdd0 <quorem+0x110>
   1cdca:	681a      	ldr	r2, [r3, #0]
   1cdcc:	3b04      	subs	r3, #4
   1cdce:	b91a      	cbnz	r2, 1cdd8 <quorem+0x118>
   1cdd0:	459b      	cmp	fp, r3
   1cdd2:	f108 38ff 	add.w	r8, r8, #4294967295
   1cdd6:	d3f8      	bcc.n	1cdca <quorem+0x10a>
   1cdd8:	f8c4 8010 	str.w	r8, [r4, #16]
   1cddc:	4648      	mov	r0, r9
   1cdde:	b003      	add	sp, #12
   1cde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cde4:	2000      	movs	r0, #0
   1cde6:	4770      	bx	lr

0001cde8 <_dtoa_r>:
   1cde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cdec:	6c01      	ldr	r1, [r0, #64]	; 0x40
   1cdee:	b09b      	sub	sp, #108	; 0x6c
   1cdf0:	4604      	mov	r4, r0
   1cdf2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   1cdf4:	4692      	mov	sl, r2
   1cdf6:	469b      	mov	fp, r3
   1cdf8:	b141      	cbz	r1, 1ce0c <_dtoa_r+0x24>
   1cdfa:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1cdfc:	604a      	str	r2, [r1, #4]
   1cdfe:	2301      	movs	r3, #1
   1ce00:	4093      	lsls	r3, r2
   1ce02:	608b      	str	r3, [r1, #8]
   1ce04:	f001 faa4 	bl	1e350 <_Bfree>
   1ce08:	2300      	movs	r3, #0
   1ce0a:	6423      	str	r3, [r4, #64]	; 0x40
   1ce0c:	f1bb 0f00 	cmp.w	fp, #0
   1ce10:	465d      	mov	r5, fp
   1ce12:	db35      	blt.n	1ce80 <_dtoa_r+0x98>
   1ce14:	2300      	movs	r3, #0
   1ce16:	6033      	str	r3, [r6, #0]
   1ce18:	4b9d      	ldr	r3, [pc, #628]	; (1d090 <_dtoa_r+0x2a8>)
   1ce1a:	43ab      	bics	r3, r5
   1ce1c:	d015      	beq.n	1ce4a <_dtoa_r+0x62>
   1ce1e:	4650      	mov	r0, sl
   1ce20:	4659      	mov	r1, fp
   1ce22:	2200      	movs	r2, #0
   1ce24:	2300      	movs	r3, #0
   1ce26:	f7f8 fdb3 	bl	15990 <__aeabi_dcmpeq>
   1ce2a:	4680      	mov	r8, r0
   1ce2c:	2800      	cmp	r0, #0
   1ce2e:	d02d      	beq.n	1ce8c <_dtoa_r+0xa4>
   1ce30:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1ce32:	2301      	movs	r3, #1
   1ce34:	6013      	str	r3, [r2, #0]
   1ce36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1ce38:	2b00      	cmp	r3, #0
   1ce3a:	f000 80bd 	beq.w	1cfb8 <_dtoa_r+0x1d0>
   1ce3e:	4895      	ldr	r0, [pc, #596]	; (1d094 <_dtoa_r+0x2ac>)
   1ce40:	6018      	str	r0, [r3, #0]
   1ce42:	3801      	subs	r0, #1
   1ce44:	b01b      	add	sp, #108	; 0x6c
   1ce46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce4a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1ce4c:	f242 730f 	movw	r3, #9999	; 0x270f
   1ce50:	6013      	str	r3, [r2, #0]
   1ce52:	f1ba 0f00 	cmp.w	sl, #0
   1ce56:	d10d      	bne.n	1ce74 <_dtoa_r+0x8c>
   1ce58:	f3c5 0513 	ubfx	r5, r5, #0, #20
   1ce5c:	b955      	cbnz	r5, 1ce74 <_dtoa_r+0x8c>
   1ce5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1ce60:	488d      	ldr	r0, [pc, #564]	; (1d098 <_dtoa_r+0x2b0>)
   1ce62:	2b00      	cmp	r3, #0
   1ce64:	d0ee      	beq.n	1ce44 <_dtoa_r+0x5c>
   1ce66:	f100 0308 	add.w	r3, r0, #8
   1ce6a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   1ce6c:	6013      	str	r3, [r2, #0]
   1ce6e:	b01b      	add	sp, #108	; 0x6c
   1ce70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce74:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1ce76:	4889      	ldr	r0, [pc, #548]	; (1d09c <_dtoa_r+0x2b4>)
   1ce78:	2b00      	cmp	r3, #0
   1ce7a:	d0e3      	beq.n	1ce44 <_dtoa_r+0x5c>
   1ce7c:	1cc3      	adds	r3, r0, #3
   1ce7e:	e7f4      	b.n	1ce6a <_dtoa_r+0x82>
   1ce80:	2301      	movs	r3, #1
   1ce82:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   1ce86:	6033      	str	r3, [r6, #0]
   1ce88:	46ab      	mov	fp, r5
   1ce8a:	e7c5      	b.n	1ce18 <_dtoa_r+0x30>
   1ce8c:	aa18      	add	r2, sp, #96	; 0x60
   1ce8e:	ab19      	add	r3, sp, #100	; 0x64
   1ce90:	9201      	str	r2, [sp, #4]
   1ce92:	9300      	str	r3, [sp, #0]
   1ce94:	4652      	mov	r2, sl
   1ce96:	465b      	mov	r3, fp
   1ce98:	4620      	mov	r0, r4
   1ce9a:	f001 fcd1 	bl	1e840 <__d2b>
   1ce9e:	0d2b      	lsrs	r3, r5, #20
   1cea0:	4681      	mov	r9, r0
   1cea2:	d071      	beq.n	1cf88 <_dtoa_r+0x1a0>
   1cea4:	f3cb 0213 	ubfx	r2, fp, #0, #20
   1cea8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   1ceac:	9f18      	ldr	r7, [sp, #96]	; 0x60
   1ceae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   1ceb2:	4650      	mov	r0, sl
   1ceb4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   1ceb8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   1cebc:	2200      	movs	r2, #0
   1cebe:	4b78      	ldr	r3, [pc, #480]	; (1d0a0 <_dtoa_r+0x2b8>)
   1cec0:	f7f8 f94a 	bl	15158 <__aeabi_dsub>
   1cec4:	a36c      	add	r3, pc, #432	; (adr r3, 1d078 <_dtoa_r+0x290>)
   1cec6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ceca:	f7f8 faf9 	bl	154c0 <__aeabi_dmul>
   1cece:	a36c      	add	r3, pc, #432	; (adr r3, 1d080 <_dtoa_r+0x298>)
   1ced0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ced4:	f7f8 f942 	bl	1515c <__adddf3>
   1ced8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1cedc:	4630      	mov	r0, r6
   1cede:	f7f8 fa89 	bl	153f4 <__aeabi_i2d>
   1cee2:	a369      	add	r3, pc, #420	; (adr r3, 1d088 <_dtoa_r+0x2a0>)
   1cee4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cee8:	f7f8 faea 	bl	154c0 <__aeabi_dmul>
   1ceec:	4602      	mov	r2, r0
   1ceee:	460b      	mov	r3, r1
   1cef0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1cef4:	f7f8 f932 	bl	1515c <__adddf3>
   1cef8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1cefc:	f7f8 fd7a 	bl	159f4 <__aeabi_d2iz>
   1cf00:	2200      	movs	r2, #0
   1cf02:	9002      	str	r0, [sp, #8]
   1cf04:	2300      	movs	r3, #0
   1cf06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1cf0a:	f7f8 fd4b 	bl	159a4 <__aeabi_dcmplt>
   1cf0e:	2800      	cmp	r0, #0
   1cf10:	f040 8173 	bne.w	1d1fa <_dtoa_r+0x412>
   1cf14:	9d02      	ldr	r5, [sp, #8]
   1cf16:	2d16      	cmp	r5, #22
   1cf18:	f200 815d 	bhi.w	1d1d6 <_dtoa_r+0x3ee>
   1cf1c:	4b61      	ldr	r3, [pc, #388]	; (1d0a4 <_dtoa_r+0x2bc>)
   1cf1e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   1cf22:	e9d3 0100 	ldrd	r0, r1, [r3]
   1cf26:	4652      	mov	r2, sl
   1cf28:	465b      	mov	r3, fp
   1cf2a:	f7f8 fd59 	bl	159e0 <__aeabi_dcmpgt>
   1cf2e:	2800      	cmp	r0, #0
   1cf30:	f000 81c5 	beq.w	1d2be <_dtoa_r+0x4d6>
   1cf34:	1e6b      	subs	r3, r5, #1
   1cf36:	9302      	str	r3, [sp, #8]
   1cf38:	2300      	movs	r3, #0
   1cf3a:	930e      	str	r3, [sp, #56]	; 0x38
   1cf3c:	1bbf      	subs	r7, r7, r6
   1cf3e:	1e7b      	subs	r3, r7, #1
   1cf40:	9306      	str	r3, [sp, #24]
   1cf42:	f100 8154 	bmi.w	1d1ee <_dtoa_r+0x406>
   1cf46:	2300      	movs	r3, #0
   1cf48:	9308      	str	r3, [sp, #32]
   1cf4a:	9b02      	ldr	r3, [sp, #8]
   1cf4c:	2b00      	cmp	r3, #0
   1cf4e:	f2c0 8145 	blt.w	1d1dc <_dtoa_r+0x3f4>
   1cf52:	9a06      	ldr	r2, [sp, #24]
   1cf54:	930d      	str	r3, [sp, #52]	; 0x34
   1cf56:	4611      	mov	r1, r2
   1cf58:	4419      	add	r1, r3
   1cf5a:	2300      	movs	r3, #0
   1cf5c:	9106      	str	r1, [sp, #24]
   1cf5e:	930c      	str	r3, [sp, #48]	; 0x30
   1cf60:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1cf62:	2b09      	cmp	r3, #9
   1cf64:	d82a      	bhi.n	1cfbc <_dtoa_r+0x1d4>
   1cf66:	2b05      	cmp	r3, #5
   1cf68:	f340 865b 	ble.w	1dc22 <_dtoa_r+0xe3a>
   1cf6c:	3b04      	subs	r3, #4
   1cf6e:	9324      	str	r3, [sp, #144]	; 0x90
   1cf70:	2500      	movs	r5, #0
   1cf72:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1cf74:	3b02      	subs	r3, #2
   1cf76:	2b03      	cmp	r3, #3
   1cf78:	f200 8642 	bhi.w	1dc00 <_dtoa_r+0xe18>
   1cf7c:	e8df f013 	tbh	[pc, r3, lsl #1]
   1cf80:	02c903d4 	.word	0x02c903d4
   1cf84:	046103df 	.word	0x046103df
   1cf88:	9f18      	ldr	r7, [sp, #96]	; 0x60
   1cf8a:	9e19      	ldr	r6, [sp, #100]	; 0x64
   1cf8c:	443e      	add	r6, r7
   1cf8e:	f206 4332 	addw	r3, r6, #1074	; 0x432
   1cf92:	2b20      	cmp	r3, #32
   1cf94:	f340 818e 	ble.w	1d2b4 <_dtoa_r+0x4cc>
   1cf98:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   1cf9c:	f206 4012 	addw	r0, r6, #1042	; 0x412
   1cfa0:	409d      	lsls	r5, r3
   1cfa2:	fa2a f000 	lsr.w	r0, sl, r0
   1cfa6:	4328      	orrs	r0, r5
   1cfa8:	f7f8 fa14 	bl	153d4 <__aeabi_ui2d>
   1cfac:	2301      	movs	r3, #1
   1cfae:	3e01      	subs	r6, #1
   1cfb0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   1cfb4:	9314      	str	r3, [sp, #80]	; 0x50
   1cfb6:	e781      	b.n	1cebc <_dtoa_r+0xd4>
   1cfb8:	483b      	ldr	r0, [pc, #236]	; (1d0a8 <_dtoa_r+0x2c0>)
   1cfba:	e743      	b.n	1ce44 <_dtoa_r+0x5c>
   1cfbc:	2100      	movs	r1, #0
   1cfbe:	6461      	str	r1, [r4, #68]	; 0x44
   1cfc0:	4620      	mov	r0, r4
   1cfc2:	9125      	str	r1, [sp, #148]	; 0x94
   1cfc4:	f001 f99e 	bl	1e304 <_Balloc>
   1cfc8:	f04f 33ff 	mov.w	r3, #4294967295
   1cfcc:	930a      	str	r3, [sp, #40]	; 0x28
   1cfce:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1cfd0:	930f      	str	r3, [sp, #60]	; 0x3c
   1cfd2:	2301      	movs	r3, #1
   1cfd4:	9004      	str	r0, [sp, #16]
   1cfd6:	6420      	str	r0, [r4, #64]	; 0x40
   1cfd8:	9224      	str	r2, [sp, #144]	; 0x90
   1cfda:	930b      	str	r3, [sp, #44]	; 0x2c
   1cfdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1cfde:	2b00      	cmp	r3, #0
   1cfe0:	f2c0 80d9 	blt.w	1d196 <_dtoa_r+0x3ae>
   1cfe4:	9a02      	ldr	r2, [sp, #8]
   1cfe6:	2a0e      	cmp	r2, #14
   1cfe8:	f300 80d5 	bgt.w	1d196 <_dtoa_r+0x3ae>
   1cfec:	4b2d      	ldr	r3, [pc, #180]	; (1d0a4 <_dtoa_r+0x2bc>)
   1cfee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1cff2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cff6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1cffa:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1cffc:	2b00      	cmp	r3, #0
   1cffe:	f2c0 83ba 	blt.w	1d776 <_dtoa_r+0x98e>
   1d002:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   1d006:	4650      	mov	r0, sl
   1d008:	462a      	mov	r2, r5
   1d00a:	4633      	mov	r3, r6
   1d00c:	4659      	mov	r1, fp
   1d00e:	f7f8 fb81 	bl	15714 <__aeabi_ddiv>
   1d012:	f7f8 fcef 	bl	159f4 <__aeabi_d2iz>
   1d016:	4680      	mov	r8, r0
   1d018:	f7f8 f9ec 	bl	153f4 <__aeabi_i2d>
   1d01c:	462a      	mov	r2, r5
   1d01e:	4633      	mov	r3, r6
   1d020:	f7f8 fa4e 	bl	154c0 <__aeabi_dmul>
   1d024:	460b      	mov	r3, r1
   1d026:	4602      	mov	r2, r0
   1d028:	4659      	mov	r1, fp
   1d02a:	4650      	mov	r0, sl
   1d02c:	f7f8 f894 	bl	15158 <__aeabi_dsub>
   1d030:	9d04      	ldr	r5, [sp, #16]
   1d032:	f108 0330 	add.w	r3, r8, #48	; 0x30
   1d036:	702b      	strb	r3, [r5, #0]
   1d038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d03a:	2b01      	cmp	r3, #1
   1d03c:	4606      	mov	r6, r0
   1d03e:	460f      	mov	r7, r1
   1d040:	f105 0501 	add.w	r5, r5, #1
   1d044:	d068      	beq.n	1d118 <_dtoa_r+0x330>
   1d046:	2200      	movs	r2, #0
   1d048:	4b18      	ldr	r3, [pc, #96]	; (1d0ac <_dtoa_r+0x2c4>)
   1d04a:	f7f8 fa39 	bl	154c0 <__aeabi_dmul>
   1d04e:	2200      	movs	r2, #0
   1d050:	2300      	movs	r3, #0
   1d052:	4606      	mov	r6, r0
   1d054:	460f      	mov	r7, r1
   1d056:	f7f8 fc9b 	bl	15990 <__aeabi_dcmpeq>
   1d05a:	2800      	cmp	r0, #0
   1d05c:	f040 8088 	bne.w	1d170 <_dtoa_r+0x388>
   1d060:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   1d064:	f04f 0a00 	mov.w	sl, #0
   1d068:	f8df b040 	ldr.w	fp, [pc, #64]	; 1d0ac <_dtoa_r+0x2c4>
   1d06c:	940c      	str	r4, [sp, #48]	; 0x30
   1d06e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1d072:	e028      	b.n	1d0c6 <_dtoa_r+0x2de>
   1d074:	f3af 8000 	nop.w
   1d078:	636f4361 	.word	0x636f4361
   1d07c:	3fd287a7 	.word	0x3fd287a7
   1d080:	8b60c8b3 	.word	0x8b60c8b3
   1d084:	3fc68a28 	.word	0x3fc68a28
   1d088:	509f79fb 	.word	0x509f79fb
   1d08c:	3fd34413 	.word	0x3fd34413
   1d090:	7ff00000 	.word	0x7ff00000
   1d094:	0003b9fd 	.word	0x0003b9fd
   1d098:	0003ec10 	.word	0x0003ec10
   1d09c:	0003ce48 	.word	0x0003ce48
   1d0a0:	3ff80000 	.word	0x3ff80000
   1d0a4:	0003ec48 	.word	0x0003ec48
   1d0a8:	0003b9fc 	.word	0x0003b9fc
   1d0ac:	40240000 	.word	0x40240000
   1d0b0:	f7f8 fa06 	bl	154c0 <__aeabi_dmul>
   1d0b4:	2200      	movs	r2, #0
   1d0b6:	2300      	movs	r3, #0
   1d0b8:	4606      	mov	r6, r0
   1d0ba:	460f      	mov	r7, r1
   1d0bc:	f7f8 fc68 	bl	15990 <__aeabi_dcmpeq>
   1d0c0:	2800      	cmp	r0, #0
   1d0c2:	f040 83c1 	bne.w	1d848 <_dtoa_r+0xa60>
   1d0c6:	4642      	mov	r2, r8
   1d0c8:	464b      	mov	r3, r9
   1d0ca:	4630      	mov	r0, r6
   1d0cc:	4639      	mov	r1, r7
   1d0ce:	f7f8 fb21 	bl	15714 <__aeabi_ddiv>
   1d0d2:	f7f8 fc8f 	bl	159f4 <__aeabi_d2iz>
   1d0d6:	4604      	mov	r4, r0
   1d0d8:	f7f8 f98c 	bl	153f4 <__aeabi_i2d>
   1d0dc:	4642      	mov	r2, r8
   1d0de:	464b      	mov	r3, r9
   1d0e0:	f7f8 f9ee 	bl	154c0 <__aeabi_dmul>
   1d0e4:	4602      	mov	r2, r0
   1d0e6:	460b      	mov	r3, r1
   1d0e8:	4630      	mov	r0, r6
   1d0ea:	4639      	mov	r1, r7
   1d0ec:	f7f8 f834 	bl	15158 <__aeabi_dsub>
   1d0f0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
   1d0f4:	9e04      	ldr	r6, [sp, #16]
   1d0f6:	f805 eb01 	strb.w	lr, [r5], #1
   1d0fa:	eba5 0e06 	sub.w	lr, r5, r6
   1d0fe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1d100:	45b6      	cmp	lr, r6
   1d102:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1d106:	4652      	mov	r2, sl
   1d108:	465b      	mov	r3, fp
   1d10a:	d1d1      	bne.n	1d0b0 <_dtoa_r+0x2c8>
   1d10c:	46a0      	mov	r8, r4
   1d10e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   1d112:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1d114:	4606      	mov	r6, r0
   1d116:	460f      	mov	r7, r1
   1d118:	4632      	mov	r2, r6
   1d11a:	463b      	mov	r3, r7
   1d11c:	4630      	mov	r0, r6
   1d11e:	4639      	mov	r1, r7
   1d120:	f7f8 f81c 	bl	1515c <__adddf3>
   1d124:	4606      	mov	r6, r0
   1d126:	460f      	mov	r7, r1
   1d128:	4602      	mov	r2, r0
   1d12a:	460b      	mov	r3, r1
   1d12c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1d130:	f7f8 fc38 	bl	159a4 <__aeabi_dcmplt>
   1d134:	b948      	cbnz	r0, 1d14a <_dtoa_r+0x362>
   1d136:	4632      	mov	r2, r6
   1d138:	463b      	mov	r3, r7
   1d13a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1d13e:	f7f8 fc27 	bl	15990 <__aeabi_dcmpeq>
   1d142:	b1a8      	cbz	r0, 1d170 <_dtoa_r+0x388>
   1d144:	f018 0f01 	tst.w	r8, #1
   1d148:	d012      	beq.n	1d170 <_dtoa_r+0x388>
   1d14a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   1d14e:	9a04      	ldr	r2, [sp, #16]
   1d150:	1e6b      	subs	r3, r5, #1
   1d152:	e004      	b.n	1d15e <_dtoa_r+0x376>
   1d154:	429a      	cmp	r2, r3
   1d156:	f000 8401 	beq.w	1d95c <_dtoa_r+0xb74>
   1d15a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   1d15e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   1d162:	f103 0501 	add.w	r5, r3, #1
   1d166:	d0f5      	beq.n	1d154 <_dtoa_r+0x36c>
   1d168:	f108 0801 	add.w	r8, r8, #1
   1d16c:	f883 8000 	strb.w	r8, [r3]
   1d170:	4649      	mov	r1, r9
   1d172:	4620      	mov	r0, r4
   1d174:	f001 f8ec 	bl	1e350 <_Bfree>
   1d178:	2200      	movs	r2, #0
   1d17a:	9b02      	ldr	r3, [sp, #8]
   1d17c:	702a      	strb	r2, [r5, #0]
   1d17e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1d180:	3301      	adds	r3, #1
   1d182:	6013      	str	r3, [r2, #0]
   1d184:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1d186:	2b00      	cmp	r3, #0
   1d188:	f000 839e 	beq.w	1d8c8 <_dtoa_r+0xae0>
   1d18c:	9804      	ldr	r0, [sp, #16]
   1d18e:	601d      	str	r5, [r3, #0]
   1d190:	b01b      	add	sp, #108	; 0x6c
   1d192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d196:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1d198:	2a00      	cmp	r2, #0
   1d19a:	d03e      	beq.n	1d21a <_dtoa_r+0x432>
   1d19c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1d19e:	2a01      	cmp	r2, #1
   1d1a0:	f340 8311 	ble.w	1d7c6 <_dtoa_r+0x9de>
   1d1a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d1a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1d1a8:	1e5f      	subs	r7, r3, #1
   1d1aa:	42ba      	cmp	r2, r7
   1d1ac:	f2c0 838f 	blt.w	1d8ce <_dtoa_r+0xae6>
   1d1b0:	1bd7      	subs	r7, r2, r7
   1d1b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d1b4:	2b00      	cmp	r3, #0
   1d1b6:	f2c0 848b 	blt.w	1dad0 <_dtoa_r+0xce8>
   1d1ba:	9d08      	ldr	r5, [sp, #32]
   1d1bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d1be:	9a08      	ldr	r2, [sp, #32]
   1d1c0:	441a      	add	r2, r3
   1d1c2:	9208      	str	r2, [sp, #32]
   1d1c4:	9a06      	ldr	r2, [sp, #24]
   1d1c6:	2101      	movs	r1, #1
   1d1c8:	441a      	add	r2, r3
   1d1ca:	4620      	mov	r0, r4
   1d1cc:	9206      	str	r2, [sp, #24]
   1d1ce:	f001 f959 	bl	1e484 <__i2b>
   1d1d2:	4606      	mov	r6, r0
   1d1d4:	e024      	b.n	1d220 <_dtoa_r+0x438>
   1d1d6:	2301      	movs	r3, #1
   1d1d8:	930e      	str	r3, [sp, #56]	; 0x38
   1d1da:	e6af      	b.n	1cf3c <_dtoa_r+0x154>
   1d1dc:	9a08      	ldr	r2, [sp, #32]
   1d1de:	9b02      	ldr	r3, [sp, #8]
   1d1e0:	1ad2      	subs	r2, r2, r3
   1d1e2:	425b      	negs	r3, r3
   1d1e4:	930c      	str	r3, [sp, #48]	; 0x30
   1d1e6:	2300      	movs	r3, #0
   1d1e8:	9208      	str	r2, [sp, #32]
   1d1ea:	930d      	str	r3, [sp, #52]	; 0x34
   1d1ec:	e6b8      	b.n	1cf60 <_dtoa_r+0x178>
   1d1ee:	f1c7 0301 	rsb	r3, r7, #1
   1d1f2:	9308      	str	r3, [sp, #32]
   1d1f4:	2300      	movs	r3, #0
   1d1f6:	9306      	str	r3, [sp, #24]
   1d1f8:	e6a7      	b.n	1cf4a <_dtoa_r+0x162>
   1d1fa:	9d02      	ldr	r5, [sp, #8]
   1d1fc:	4628      	mov	r0, r5
   1d1fe:	f7f8 f8f9 	bl	153f4 <__aeabi_i2d>
   1d202:	4602      	mov	r2, r0
   1d204:	460b      	mov	r3, r1
   1d206:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1d20a:	f7f8 fbc1 	bl	15990 <__aeabi_dcmpeq>
   1d20e:	2800      	cmp	r0, #0
   1d210:	f47f ae80 	bne.w	1cf14 <_dtoa_r+0x12c>
   1d214:	1e6b      	subs	r3, r5, #1
   1d216:	9302      	str	r3, [sp, #8]
   1d218:	e67c      	b.n	1cf14 <_dtoa_r+0x12c>
   1d21a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1d21c:	9d08      	ldr	r5, [sp, #32]
   1d21e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1d220:	2d00      	cmp	r5, #0
   1d222:	dd0c      	ble.n	1d23e <_dtoa_r+0x456>
   1d224:	9906      	ldr	r1, [sp, #24]
   1d226:	2900      	cmp	r1, #0
   1d228:	460b      	mov	r3, r1
   1d22a:	dd08      	ble.n	1d23e <_dtoa_r+0x456>
   1d22c:	42a9      	cmp	r1, r5
   1d22e:	9a08      	ldr	r2, [sp, #32]
   1d230:	bfa8      	it	ge
   1d232:	462b      	movge	r3, r5
   1d234:	1ad2      	subs	r2, r2, r3
   1d236:	1aed      	subs	r5, r5, r3
   1d238:	1acb      	subs	r3, r1, r3
   1d23a:	9208      	str	r2, [sp, #32]
   1d23c:	9306      	str	r3, [sp, #24]
   1d23e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d240:	b1d3      	cbz	r3, 1d278 <_dtoa_r+0x490>
   1d242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d244:	2b00      	cmp	r3, #0
   1d246:	f000 82b7 	beq.w	1d7b8 <_dtoa_r+0x9d0>
   1d24a:	2f00      	cmp	r7, #0
   1d24c:	dd10      	ble.n	1d270 <_dtoa_r+0x488>
   1d24e:	4631      	mov	r1, r6
   1d250:	463a      	mov	r2, r7
   1d252:	4620      	mov	r0, r4
   1d254:	f001 f9b2 	bl	1e5bc <__pow5mult>
   1d258:	464a      	mov	r2, r9
   1d25a:	4601      	mov	r1, r0
   1d25c:	4606      	mov	r6, r0
   1d25e:	4620      	mov	r0, r4
   1d260:	f001 f91a 	bl	1e498 <__multiply>
   1d264:	4649      	mov	r1, r9
   1d266:	4680      	mov	r8, r0
   1d268:	4620      	mov	r0, r4
   1d26a:	f001 f871 	bl	1e350 <_Bfree>
   1d26e:	46c1      	mov	r9, r8
   1d270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d272:	1bda      	subs	r2, r3, r7
   1d274:	f040 82a1 	bne.w	1d7ba <_dtoa_r+0x9d2>
   1d278:	2101      	movs	r1, #1
   1d27a:	4620      	mov	r0, r4
   1d27c:	f001 f902 	bl	1e484 <__i2b>
   1d280:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d282:	2b00      	cmp	r3, #0
   1d284:	4680      	mov	r8, r0
   1d286:	dd1c      	ble.n	1d2c2 <_dtoa_r+0x4da>
   1d288:	4601      	mov	r1, r0
   1d28a:	461a      	mov	r2, r3
   1d28c:	4620      	mov	r0, r4
   1d28e:	f001 f995 	bl	1e5bc <__pow5mult>
   1d292:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1d294:	2b01      	cmp	r3, #1
   1d296:	4680      	mov	r8, r0
   1d298:	f340 8254 	ble.w	1d744 <_dtoa_r+0x95c>
   1d29c:	2300      	movs	r3, #0
   1d29e:	930c      	str	r3, [sp, #48]	; 0x30
   1d2a0:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1d2a4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   1d2a8:	6918      	ldr	r0, [r3, #16]
   1d2aa:	f001 f89b 	bl	1e3e4 <__hi0bits>
   1d2ae:	f1c0 0020 	rsb	r0, r0, #32
   1d2b2:	e010      	b.n	1d2d6 <_dtoa_r+0x4ee>
   1d2b4:	f1c3 0520 	rsb	r5, r3, #32
   1d2b8:	fa0a f005 	lsl.w	r0, sl, r5
   1d2bc:	e674      	b.n	1cfa8 <_dtoa_r+0x1c0>
   1d2be:	900e      	str	r0, [sp, #56]	; 0x38
   1d2c0:	e63c      	b.n	1cf3c <_dtoa_r+0x154>
   1d2c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1d2c4:	2b01      	cmp	r3, #1
   1d2c6:	f340 8287 	ble.w	1d7d8 <_dtoa_r+0x9f0>
   1d2ca:	2300      	movs	r3, #0
   1d2cc:	930c      	str	r3, [sp, #48]	; 0x30
   1d2ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d2d0:	2001      	movs	r0, #1
   1d2d2:	2b00      	cmp	r3, #0
   1d2d4:	d1e4      	bne.n	1d2a0 <_dtoa_r+0x4b8>
   1d2d6:	9a06      	ldr	r2, [sp, #24]
   1d2d8:	4410      	add	r0, r2
   1d2da:	f010 001f 	ands.w	r0, r0, #31
   1d2de:	f000 80a1 	beq.w	1d424 <_dtoa_r+0x63c>
   1d2e2:	f1c0 0320 	rsb	r3, r0, #32
   1d2e6:	2b04      	cmp	r3, #4
   1d2e8:	f340 849e 	ble.w	1dc28 <_dtoa_r+0xe40>
   1d2ec:	9b08      	ldr	r3, [sp, #32]
   1d2ee:	f1c0 001c 	rsb	r0, r0, #28
   1d2f2:	4403      	add	r3, r0
   1d2f4:	9308      	str	r3, [sp, #32]
   1d2f6:	4613      	mov	r3, r2
   1d2f8:	4403      	add	r3, r0
   1d2fa:	4405      	add	r5, r0
   1d2fc:	9306      	str	r3, [sp, #24]
   1d2fe:	9b08      	ldr	r3, [sp, #32]
   1d300:	2b00      	cmp	r3, #0
   1d302:	dd05      	ble.n	1d310 <_dtoa_r+0x528>
   1d304:	4649      	mov	r1, r9
   1d306:	461a      	mov	r2, r3
   1d308:	4620      	mov	r0, r4
   1d30a:	f001 f9a7 	bl	1e65c <__lshift>
   1d30e:	4681      	mov	r9, r0
   1d310:	9b06      	ldr	r3, [sp, #24]
   1d312:	2b00      	cmp	r3, #0
   1d314:	dd05      	ble.n	1d322 <_dtoa_r+0x53a>
   1d316:	4641      	mov	r1, r8
   1d318:	461a      	mov	r2, r3
   1d31a:	4620      	mov	r0, r4
   1d31c:	f001 f99e 	bl	1e65c <__lshift>
   1d320:	4680      	mov	r8, r0
   1d322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d324:	2b00      	cmp	r3, #0
   1d326:	f040 8086 	bne.w	1d436 <_dtoa_r+0x64e>
   1d32a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d32c:	2b00      	cmp	r3, #0
   1d32e:	f340 8266 	ble.w	1d7fe <_dtoa_r+0xa16>
   1d332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d334:	2b00      	cmp	r3, #0
   1d336:	f000 8098 	beq.w	1d46a <_dtoa_r+0x682>
   1d33a:	2d00      	cmp	r5, #0
   1d33c:	dd05      	ble.n	1d34a <_dtoa_r+0x562>
   1d33e:	4631      	mov	r1, r6
   1d340:	462a      	mov	r2, r5
   1d342:	4620      	mov	r0, r4
   1d344:	f001 f98a 	bl	1e65c <__lshift>
   1d348:	4606      	mov	r6, r0
   1d34a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d34c:	2b00      	cmp	r3, #0
   1d34e:	f040 8337 	bne.w	1d9c0 <_dtoa_r+0xbd8>
   1d352:	9606      	str	r6, [sp, #24]
   1d354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d356:	9a04      	ldr	r2, [sp, #16]
   1d358:	f8dd b018 	ldr.w	fp, [sp, #24]
   1d35c:	3b01      	subs	r3, #1
   1d35e:	18d3      	adds	r3, r2, r3
   1d360:	930b      	str	r3, [sp, #44]	; 0x2c
   1d362:	f00a 0301 	and.w	r3, sl, #1
   1d366:	930c      	str	r3, [sp, #48]	; 0x30
   1d368:	4617      	mov	r7, r2
   1d36a:	46c2      	mov	sl, r8
   1d36c:	4651      	mov	r1, sl
   1d36e:	4648      	mov	r0, r9
   1d370:	f7ff fca6 	bl	1ccc0 <quorem>
   1d374:	4631      	mov	r1, r6
   1d376:	4605      	mov	r5, r0
   1d378:	4648      	mov	r0, r9
   1d37a:	f001 f9c1 	bl	1e700 <__mcmp>
   1d37e:	465a      	mov	r2, fp
   1d380:	900a      	str	r0, [sp, #40]	; 0x28
   1d382:	4651      	mov	r1, sl
   1d384:	4620      	mov	r0, r4
   1d386:	f001 f9d7 	bl	1e738 <__mdiff>
   1d38a:	68c2      	ldr	r2, [r0, #12]
   1d38c:	4680      	mov	r8, r0
   1d38e:	f105 0330 	add.w	r3, r5, #48	; 0x30
   1d392:	2a00      	cmp	r2, #0
   1d394:	f040 822b 	bne.w	1d7ee <_dtoa_r+0xa06>
   1d398:	4601      	mov	r1, r0
   1d39a:	4648      	mov	r0, r9
   1d39c:	9308      	str	r3, [sp, #32]
   1d39e:	f001 f9af 	bl	1e700 <__mcmp>
   1d3a2:	4641      	mov	r1, r8
   1d3a4:	9006      	str	r0, [sp, #24]
   1d3a6:	4620      	mov	r0, r4
   1d3a8:	f000 ffd2 	bl	1e350 <_Bfree>
   1d3ac:	9a06      	ldr	r2, [sp, #24]
   1d3ae:	9b08      	ldr	r3, [sp, #32]
   1d3b0:	b932      	cbnz	r2, 1d3c0 <_dtoa_r+0x5d8>
   1d3b2:	9924      	ldr	r1, [sp, #144]	; 0x90
   1d3b4:	b921      	cbnz	r1, 1d3c0 <_dtoa_r+0x5d8>
   1d3b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1d3b8:	2a00      	cmp	r2, #0
   1d3ba:	f000 83ef 	beq.w	1db9c <_dtoa_r+0xdb4>
   1d3be:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1d3c0:	990a      	ldr	r1, [sp, #40]	; 0x28
   1d3c2:	2900      	cmp	r1, #0
   1d3c4:	f2c0 829f 	blt.w	1d906 <_dtoa_r+0xb1e>
   1d3c8:	d105      	bne.n	1d3d6 <_dtoa_r+0x5ee>
   1d3ca:	9924      	ldr	r1, [sp, #144]	; 0x90
   1d3cc:	b919      	cbnz	r1, 1d3d6 <_dtoa_r+0x5ee>
   1d3ce:	990c      	ldr	r1, [sp, #48]	; 0x30
   1d3d0:	2900      	cmp	r1, #0
   1d3d2:	f000 8298 	beq.w	1d906 <_dtoa_r+0xb1e>
   1d3d6:	2a00      	cmp	r2, #0
   1d3d8:	f300 8306 	bgt.w	1d9e8 <_dtoa_r+0xc00>
   1d3dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1d3de:	703b      	strb	r3, [r7, #0]
   1d3e0:	f107 0801 	add.w	r8, r7, #1
   1d3e4:	4297      	cmp	r7, r2
   1d3e6:	4645      	mov	r5, r8
   1d3e8:	f000 830c 	beq.w	1da04 <_dtoa_r+0xc1c>
   1d3ec:	4649      	mov	r1, r9
   1d3ee:	2300      	movs	r3, #0
   1d3f0:	220a      	movs	r2, #10
   1d3f2:	4620      	mov	r0, r4
   1d3f4:	f000 ffb6 	bl	1e364 <__multadd>
   1d3f8:	455e      	cmp	r6, fp
   1d3fa:	4681      	mov	r9, r0
   1d3fc:	4631      	mov	r1, r6
   1d3fe:	f04f 0300 	mov.w	r3, #0
   1d402:	f04f 020a 	mov.w	r2, #10
   1d406:	4620      	mov	r0, r4
   1d408:	f000 81eb 	beq.w	1d7e2 <_dtoa_r+0x9fa>
   1d40c:	f000 ffaa 	bl	1e364 <__multadd>
   1d410:	4659      	mov	r1, fp
   1d412:	4606      	mov	r6, r0
   1d414:	2300      	movs	r3, #0
   1d416:	220a      	movs	r2, #10
   1d418:	4620      	mov	r0, r4
   1d41a:	f000 ffa3 	bl	1e364 <__multadd>
   1d41e:	4647      	mov	r7, r8
   1d420:	4683      	mov	fp, r0
   1d422:	e7a3      	b.n	1d36c <_dtoa_r+0x584>
   1d424:	201c      	movs	r0, #28
   1d426:	9b08      	ldr	r3, [sp, #32]
   1d428:	4403      	add	r3, r0
   1d42a:	9308      	str	r3, [sp, #32]
   1d42c:	9b06      	ldr	r3, [sp, #24]
   1d42e:	4403      	add	r3, r0
   1d430:	4405      	add	r5, r0
   1d432:	9306      	str	r3, [sp, #24]
   1d434:	e763      	b.n	1d2fe <_dtoa_r+0x516>
   1d436:	4641      	mov	r1, r8
   1d438:	4648      	mov	r0, r9
   1d43a:	f001 f961 	bl	1e700 <__mcmp>
   1d43e:	2800      	cmp	r0, #0
   1d440:	f6bf af73 	bge.w	1d32a <_dtoa_r+0x542>
   1d444:	9f02      	ldr	r7, [sp, #8]
   1d446:	4649      	mov	r1, r9
   1d448:	2300      	movs	r3, #0
   1d44a:	220a      	movs	r2, #10
   1d44c:	4620      	mov	r0, r4
   1d44e:	3f01      	subs	r7, #1
   1d450:	9702      	str	r7, [sp, #8]
   1d452:	f000 ff87 	bl	1e364 <__multadd>
   1d456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d458:	4681      	mov	r9, r0
   1d45a:	2b00      	cmp	r3, #0
   1d45c:	f040 83b6 	bne.w	1dbcc <_dtoa_r+0xde4>
   1d460:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d462:	2b00      	cmp	r3, #0
   1d464:	f340 83bf 	ble.w	1dbe6 <_dtoa_r+0xdfe>
   1d468:	930a      	str	r3, [sp, #40]	; 0x28
   1d46a:	f8dd b010 	ldr.w	fp, [sp, #16]
   1d46e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1d470:	465d      	mov	r5, fp
   1d472:	e002      	b.n	1d47a <_dtoa_r+0x692>
   1d474:	f000 ff76 	bl	1e364 <__multadd>
   1d478:	4681      	mov	r9, r0
   1d47a:	4641      	mov	r1, r8
   1d47c:	4648      	mov	r0, r9
   1d47e:	f7ff fc1f 	bl	1ccc0 <quorem>
   1d482:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   1d486:	f805 ab01 	strb.w	sl, [r5], #1
   1d48a:	eba5 030b 	sub.w	r3, r5, fp
   1d48e:	42bb      	cmp	r3, r7
   1d490:	f04f 020a 	mov.w	r2, #10
   1d494:	f04f 0300 	mov.w	r3, #0
   1d498:	4649      	mov	r1, r9
   1d49a:	4620      	mov	r0, r4
   1d49c:	dbea      	blt.n	1d474 <_dtoa_r+0x68c>
   1d49e:	9b04      	ldr	r3, [sp, #16]
   1d4a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d4a2:	2a01      	cmp	r2, #1
   1d4a4:	bfac      	ite	ge
   1d4a6:	189b      	addge	r3, r3, r2
   1d4a8:	3301      	addlt	r3, #1
   1d4aa:	461d      	mov	r5, r3
   1d4ac:	f04f 0b00 	mov.w	fp, #0
   1d4b0:	4649      	mov	r1, r9
   1d4b2:	2201      	movs	r2, #1
   1d4b4:	4620      	mov	r0, r4
   1d4b6:	f001 f8d1 	bl	1e65c <__lshift>
   1d4ba:	4641      	mov	r1, r8
   1d4bc:	4681      	mov	r9, r0
   1d4be:	f001 f91f 	bl	1e700 <__mcmp>
   1d4c2:	2800      	cmp	r0, #0
   1d4c4:	f340 823d 	ble.w	1d942 <_dtoa_r+0xb5a>
   1d4c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   1d4cc:	9904      	ldr	r1, [sp, #16]
   1d4ce:	1e6b      	subs	r3, r5, #1
   1d4d0:	e004      	b.n	1d4dc <_dtoa_r+0x6f4>
   1d4d2:	428b      	cmp	r3, r1
   1d4d4:	f000 81ae 	beq.w	1d834 <_dtoa_r+0xa4c>
   1d4d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1d4dc:	2a39      	cmp	r2, #57	; 0x39
   1d4de:	f103 0501 	add.w	r5, r3, #1
   1d4e2:	d0f6      	beq.n	1d4d2 <_dtoa_r+0x6ea>
   1d4e4:	3201      	adds	r2, #1
   1d4e6:	701a      	strb	r2, [r3, #0]
   1d4e8:	4641      	mov	r1, r8
   1d4ea:	4620      	mov	r0, r4
   1d4ec:	f000 ff30 	bl	1e350 <_Bfree>
   1d4f0:	2e00      	cmp	r6, #0
   1d4f2:	f43f ae3d 	beq.w	1d170 <_dtoa_r+0x388>
   1d4f6:	f1bb 0f00 	cmp.w	fp, #0
   1d4fa:	d005      	beq.n	1d508 <_dtoa_r+0x720>
   1d4fc:	45b3      	cmp	fp, r6
   1d4fe:	d003      	beq.n	1d508 <_dtoa_r+0x720>
   1d500:	4659      	mov	r1, fp
   1d502:	4620      	mov	r0, r4
   1d504:	f000 ff24 	bl	1e350 <_Bfree>
   1d508:	4631      	mov	r1, r6
   1d50a:	4620      	mov	r0, r4
   1d50c:	f000 ff20 	bl	1e350 <_Bfree>
   1d510:	e62e      	b.n	1d170 <_dtoa_r+0x388>
   1d512:	2300      	movs	r3, #0
   1d514:	930b      	str	r3, [sp, #44]	; 0x2c
   1d516:	9b02      	ldr	r3, [sp, #8]
   1d518:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1d51a:	4413      	add	r3, r2
   1d51c:	930f      	str	r3, [sp, #60]	; 0x3c
   1d51e:	3301      	adds	r3, #1
   1d520:	2b01      	cmp	r3, #1
   1d522:	461f      	mov	r7, r3
   1d524:	461e      	mov	r6, r3
   1d526:	930a      	str	r3, [sp, #40]	; 0x28
   1d528:	bfb8      	it	lt
   1d52a:	2701      	movlt	r7, #1
   1d52c:	2100      	movs	r1, #0
   1d52e:	2f17      	cmp	r7, #23
   1d530:	6461      	str	r1, [r4, #68]	; 0x44
   1d532:	d90a      	bls.n	1d54a <_dtoa_r+0x762>
   1d534:	2201      	movs	r2, #1
   1d536:	2304      	movs	r3, #4
   1d538:	005b      	lsls	r3, r3, #1
   1d53a:	f103 0014 	add.w	r0, r3, #20
   1d53e:	4287      	cmp	r7, r0
   1d540:	4611      	mov	r1, r2
   1d542:	f102 0201 	add.w	r2, r2, #1
   1d546:	d2f7      	bcs.n	1d538 <_dtoa_r+0x750>
   1d548:	6461      	str	r1, [r4, #68]	; 0x44
   1d54a:	4620      	mov	r0, r4
   1d54c:	f000 feda 	bl	1e304 <_Balloc>
   1d550:	2e0e      	cmp	r6, #14
   1d552:	9004      	str	r0, [sp, #16]
   1d554:	6420      	str	r0, [r4, #64]	; 0x40
   1d556:	f63f ad41 	bhi.w	1cfdc <_dtoa_r+0x1f4>
   1d55a:	2d00      	cmp	r5, #0
   1d55c:	f43f ad3e 	beq.w	1cfdc <_dtoa_r+0x1f4>
   1d560:	9902      	ldr	r1, [sp, #8]
   1d562:	2900      	cmp	r1, #0
   1d564:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   1d568:	f340 8202 	ble.w	1d970 <_dtoa_r+0xb88>
   1d56c:	4bb8      	ldr	r3, [pc, #736]	; (1d850 <_dtoa_r+0xa68>)
   1d56e:	f001 020f 	and.w	r2, r1, #15
   1d572:	110d      	asrs	r5, r1, #4
   1d574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1d578:	06e9      	lsls	r1, r5, #27
   1d57a:	e9d3 6700 	ldrd	r6, r7, [r3]
   1d57e:	f140 81ae 	bpl.w	1d8de <_dtoa_r+0xaf6>
   1d582:	4bb4      	ldr	r3, [pc, #720]	; (1d854 <_dtoa_r+0xa6c>)
   1d584:	4650      	mov	r0, sl
   1d586:	4659      	mov	r1, fp
   1d588:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1d58c:	f7f8 f8c2 	bl	15714 <__aeabi_ddiv>
   1d590:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   1d594:	f005 050f 	and.w	r5, r5, #15
   1d598:	f04f 0a03 	mov.w	sl, #3
   1d59c:	b18d      	cbz	r5, 1d5c2 <_dtoa_r+0x7da>
   1d59e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 1d854 <_dtoa_r+0xa6c>
   1d5a2:	07ea      	lsls	r2, r5, #31
   1d5a4:	d509      	bpl.n	1d5ba <_dtoa_r+0x7d2>
   1d5a6:	4630      	mov	r0, r6
   1d5a8:	4639      	mov	r1, r7
   1d5aa:	e9d8 2300 	ldrd	r2, r3, [r8]
   1d5ae:	f7f7 ff87 	bl	154c0 <__aeabi_dmul>
   1d5b2:	f10a 0a01 	add.w	sl, sl, #1
   1d5b6:	4606      	mov	r6, r0
   1d5b8:	460f      	mov	r7, r1
   1d5ba:	106d      	asrs	r5, r5, #1
   1d5bc:	f108 0808 	add.w	r8, r8, #8
   1d5c0:	d1ef      	bne.n	1d5a2 <_dtoa_r+0x7ba>
   1d5c2:	463b      	mov	r3, r7
   1d5c4:	4632      	mov	r2, r6
   1d5c6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   1d5ca:	f7f8 f8a3 	bl	15714 <__aeabi_ddiv>
   1d5ce:	4607      	mov	r7, r0
   1d5d0:	4688      	mov	r8, r1
   1d5d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d5d4:	b143      	cbz	r3, 1d5e8 <_dtoa_r+0x800>
   1d5d6:	2200      	movs	r2, #0
   1d5d8:	4b9f      	ldr	r3, [pc, #636]	; (1d858 <_dtoa_r+0xa70>)
   1d5da:	4638      	mov	r0, r7
   1d5dc:	4641      	mov	r1, r8
   1d5de:	f7f8 f9e1 	bl	159a4 <__aeabi_dcmplt>
   1d5e2:	2800      	cmp	r0, #0
   1d5e4:	f040 8286 	bne.w	1daf4 <_dtoa_r+0xd0c>
   1d5e8:	4650      	mov	r0, sl
   1d5ea:	f7f7 ff03 	bl	153f4 <__aeabi_i2d>
   1d5ee:	463a      	mov	r2, r7
   1d5f0:	4643      	mov	r3, r8
   1d5f2:	f7f7 ff65 	bl	154c0 <__aeabi_dmul>
   1d5f6:	4b99      	ldr	r3, [pc, #612]	; (1d85c <_dtoa_r+0xa74>)
   1d5f8:	2200      	movs	r2, #0
   1d5fa:	f7f7 fdaf 	bl	1515c <__adddf3>
   1d5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d600:	4605      	mov	r5, r0
   1d602:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   1d606:	2b00      	cmp	r3, #0
   1d608:	f000 813e 	beq.w	1d888 <_dtoa_r+0xaa0>
   1d60c:	9b02      	ldr	r3, [sp, #8]
   1d60e:	9315      	str	r3, [sp, #84]	; 0x54
   1d610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d612:	9312      	str	r3, [sp, #72]	; 0x48
   1d614:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d616:	2b00      	cmp	r3, #0
   1d618:	f000 81fa 	beq.w	1da10 <_dtoa_r+0xc28>
   1d61c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1d61e:	4b8c      	ldr	r3, [pc, #560]	; (1d850 <_dtoa_r+0xa68>)
   1d620:	498f      	ldr	r1, [pc, #572]	; (1d860 <_dtoa_r+0xa78>)
   1d622:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1d626:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1d62a:	2000      	movs	r0, #0
   1d62c:	f7f8 f872 	bl	15714 <__aeabi_ddiv>
   1d630:	462a      	mov	r2, r5
   1d632:	4633      	mov	r3, r6
   1d634:	f7f7 fd90 	bl	15158 <__aeabi_dsub>
   1d638:	4682      	mov	sl, r0
   1d63a:	468b      	mov	fp, r1
   1d63c:	4638      	mov	r0, r7
   1d63e:	4641      	mov	r1, r8
   1d640:	f7f8 f9d8 	bl	159f4 <__aeabi_d2iz>
   1d644:	4605      	mov	r5, r0
   1d646:	f7f7 fed5 	bl	153f4 <__aeabi_i2d>
   1d64a:	4602      	mov	r2, r0
   1d64c:	460b      	mov	r3, r1
   1d64e:	4638      	mov	r0, r7
   1d650:	4641      	mov	r1, r8
   1d652:	f7f7 fd81 	bl	15158 <__aeabi_dsub>
   1d656:	3530      	adds	r5, #48	; 0x30
   1d658:	fa5f f885 	uxtb.w	r8, r5
   1d65c:	9d04      	ldr	r5, [sp, #16]
   1d65e:	4606      	mov	r6, r0
   1d660:	460f      	mov	r7, r1
   1d662:	f885 8000 	strb.w	r8, [r5]
   1d666:	4602      	mov	r2, r0
   1d668:	460b      	mov	r3, r1
   1d66a:	4650      	mov	r0, sl
   1d66c:	4659      	mov	r1, fp
   1d66e:	3501      	adds	r5, #1
   1d670:	f7f8 f9b6 	bl	159e0 <__aeabi_dcmpgt>
   1d674:	2800      	cmp	r0, #0
   1d676:	d154      	bne.n	1d722 <_dtoa_r+0x93a>
   1d678:	4632      	mov	r2, r6
   1d67a:	463b      	mov	r3, r7
   1d67c:	2000      	movs	r0, #0
   1d67e:	4976      	ldr	r1, [pc, #472]	; (1d858 <_dtoa_r+0xa70>)
   1d680:	f7f7 fd6a 	bl	15158 <__aeabi_dsub>
   1d684:	4602      	mov	r2, r0
   1d686:	460b      	mov	r3, r1
   1d688:	4650      	mov	r0, sl
   1d68a:	4659      	mov	r1, fp
   1d68c:	f7f8 f9a8 	bl	159e0 <__aeabi_dcmpgt>
   1d690:	2800      	cmp	r0, #0
   1d692:	f040 8270 	bne.w	1db76 <_dtoa_r+0xd8e>
   1d696:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1d698:	2a01      	cmp	r2, #1
   1d69a:	f000 8111 	beq.w	1d8c0 <_dtoa_r+0xad8>
   1d69e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1d6a0:	9a04      	ldr	r2, [sp, #16]
   1d6a2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   1d6a6:	4413      	add	r3, r2
   1d6a8:	4699      	mov	r9, r3
   1d6aa:	e00d      	b.n	1d6c8 <_dtoa_r+0x8e0>
   1d6ac:	2000      	movs	r0, #0
   1d6ae:	496a      	ldr	r1, [pc, #424]	; (1d858 <_dtoa_r+0xa70>)
   1d6b0:	f7f7 fd52 	bl	15158 <__aeabi_dsub>
   1d6b4:	4652      	mov	r2, sl
   1d6b6:	465b      	mov	r3, fp
   1d6b8:	f7f8 f974 	bl	159a4 <__aeabi_dcmplt>
   1d6bc:	2800      	cmp	r0, #0
   1d6be:	f040 8258 	bne.w	1db72 <_dtoa_r+0xd8a>
   1d6c2:	454d      	cmp	r5, r9
   1d6c4:	f000 80fa 	beq.w	1d8bc <_dtoa_r+0xad4>
   1d6c8:	4650      	mov	r0, sl
   1d6ca:	4659      	mov	r1, fp
   1d6cc:	2200      	movs	r2, #0
   1d6ce:	4b65      	ldr	r3, [pc, #404]	; (1d864 <_dtoa_r+0xa7c>)
   1d6d0:	f7f7 fef6 	bl	154c0 <__aeabi_dmul>
   1d6d4:	2200      	movs	r2, #0
   1d6d6:	4b63      	ldr	r3, [pc, #396]	; (1d864 <_dtoa_r+0xa7c>)
   1d6d8:	4682      	mov	sl, r0
   1d6da:	468b      	mov	fp, r1
   1d6dc:	4630      	mov	r0, r6
   1d6de:	4639      	mov	r1, r7
   1d6e0:	f7f7 feee 	bl	154c0 <__aeabi_dmul>
   1d6e4:	460f      	mov	r7, r1
   1d6e6:	4606      	mov	r6, r0
   1d6e8:	f7f8 f984 	bl	159f4 <__aeabi_d2iz>
   1d6ec:	4680      	mov	r8, r0
   1d6ee:	f7f7 fe81 	bl	153f4 <__aeabi_i2d>
   1d6f2:	4602      	mov	r2, r0
   1d6f4:	460b      	mov	r3, r1
   1d6f6:	4630      	mov	r0, r6
   1d6f8:	4639      	mov	r1, r7
   1d6fa:	f7f7 fd2d 	bl	15158 <__aeabi_dsub>
   1d6fe:	f108 0830 	add.w	r8, r8, #48	; 0x30
   1d702:	fa5f f888 	uxtb.w	r8, r8
   1d706:	4652      	mov	r2, sl
   1d708:	465b      	mov	r3, fp
   1d70a:	f805 8b01 	strb.w	r8, [r5], #1
   1d70e:	4606      	mov	r6, r0
   1d710:	460f      	mov	r7, r1
   1d712:	f7f8 f947 	bl	159a4 <__aeabi_dcmplt>
   1d716:	4632      	mov	r2, r6
   1d718:	463b      	mov	r3, r7
   1d71a:	2800      	cmp	r0, #0
   1d71c:	d0c6      	beq.n	1d6ac <_dtoa_r+0x8c4>
   1d71e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   1d722:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1d724:	9302      	str	r3, [sp, #8]
   1d726:	e523      	b.n	1d170 <_dtoa_r+0x388>
   1d728:	2300      	movs	r3, #0
   1d72a:	930b      	str	r3, [sp, #44]	; 0x2c
   1d72c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1d72e:	2b00      	cmp	r3, #0
   1d730:	f340 80dc 	ble.w	1d8ec <_dtoa_r+0xb04>
   1d734:	461f      	mov	r7, r3
   1d736:	461e      	mov	r6, r3
   1d738:	930f      	str	r3, [sp, #60]	; 0x3c
   1d73a:	930a      	str	r3, [sp, #40]	; 0x28
   1d73c:	e6f6      	b.n	1d52c <_dtoa_r+0x744>
   1d73e:	2301      	movs	r3, #1
   1d740:	930b      	str	r3, [sp, #44]	; 0x2c
   1d742:	e7f3      	b.n	1d72c <_dtoa_r+0x944>
   1d744:	f1ba 0f00 	cmp.w	sl, #0
   1d748:	f47f ada8 	bne.w	1d29c <_dtoa_r+0x4b4>
   1d74c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1d750:	2b00      	cmp	r3, #0
   1d752:	f47f adba 	bne.w	1d2ca <_dtoa_r+0x4e2>
   1d756:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   1d75a:	0d3f      	lsrs	r7, r7, #20
   1d75c:	053f      	lsls	r7, r7, #20
   1d75e:	2f00      	cmp	r7, #0
   1d760:	f000 820d 	beq.w	1db7e <_dtoa_r+0xd96>
   1d764:	9b08      	ldr	r3, [sp, #32]
   1d766:	3301      	adds	r3, #1
   1d768:	9308      	str	r3, [sp, #32]
   1d76a:	9b06      	ldr	r3, [sp, #24]
   1d76c:	3301      	adds	r3, #1
   1d76e:	9306      	str	r3, [sp, #24]
   1d770:	2301      	movs	r3, #1
   1d772:	930c      	str	r3, [sp, #48]	; 0x30
   1d774:	e5ab      	b.n	1d2ce <_dtoa_r+0x4e6>
   1d776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d778:	2b00      	cmp	r3, #0
   1d77a:	f73f ac42 	bgt.w	1d002 <_dtoa_r+0x21a>
   1d77e:	f040 8221 	bne.w	1dbc4 <_dtoa_r+0xddc>
   1d782:	2200      	movs	r2, #0
   1d784:	4b38      	ldr	r3, [pc, #224]	; (1d868 <_dtoa_r+0xa80>)
   1d786:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1d78a:	f7f7 fe99 	bl	154c0 <__aeabi_dmul>
   1d78e:	4652      	mov	r2, sl
   1d790:	465b      	mov	r3, fp
   1d792:	f7f8 f91b 	bl	159cc <__aeabi_dcmpge>
   1d796:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   1d79a:	4646      	mov	r6, r8
   1d79c:	2800      	cmp	r0, #0
   1d79e:	d041      	beq.n	1d824 <_dtoa_r+0xa3c>
   1d7a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1d7a2:	9d04      	ldr	r5, [sp, #16]
   1d7a4:	43db      	mvns	r3, r3
   1d7a6:	9302      	str	r3, [sp, #8]
   1d7a8:	4641      	mov	r1, r8
   1d7aa:	4620      	mov	r0, r4
   1d7ac:	f000 fdd0 	bl	1e350 <_Bfree>
   1d7b0:	2e00      	cmp	r6, #0
   1d7b2:	f43f acdd 	beq.w	1d170 <_dtoa_r+0x388>
   1d7b6:	e6a7      	b.n	1d508 <_dtoa_r+0x720>
   1d7b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1d7ba:	4649      	mov	r1, r9
   1d7bc:	4620      	mov	r0, r4
   1d7be:	f000 fefd 	bl	1e5bc <__pow5mult>
   1d7c2:	4681      	mov	r9, r0
   1d7c4:	e558      	b.n	1d278 <_dtoa_r+0x490>
   1d7c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1d7c8:	2a00      	cmp	r2, #0
   1d7ca:	f000 8187 	beq.w	1dadc <_dtoa_r+0xcf4>
   1d7ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1d7d2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1d7d4:	9d08      	ldr	r5, [sp, #32]
   1d7d6:	e4f2      	b.n	1d1be <_dtoa_r+0x3d6>
   1d7d8:	f1ba 0f00 	cmp.w	sl, #0
   1d7dc:	f47f ad75 	bne.w	1d2ca <_dtoa_r+0x4e2>
   1d7e0:	e7b4      	b.n	1d74c <_dtoa_r+0x964>
   1d7e2:	f000 fdbf 	bl	1e364 <__multadd>
   1d7e6:	4647      	mov	r7, r8
   1d7e8:	4606      	mov	r6, r0
   1d7ea:	4683      	mov	fp, r0
   1d7ec:	e5be      	b.n	1d36c <_dtoa_r+0x584>
   1d7ee:	4601      	mov	r1, r0
   1d7f0:	4620      	mov	r0, r4
   1d7f2:	9306      	str	r3, [sp, #24]
   1d7f4:	f000 fdac 	bl	1e350 <_Bfree>
   1d7f8:	2201      	movs	r2, #1
   1d7fa:	9b06      	ldr	r3, [sp, #24]
   1d7fc:	e5e0      	b.n	1d3c0 <_dtoa_r+0x5d8>
   1d7fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1d800:	2b02      	cmp	r3, #2
   1d802:	f77f ad96 	ble.w	1d332 <_dtoa_r+0x54a>
   1d806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d808:	2b00      	cmp	r3, #0
   1d80a:	d1c9      	bne.n	1d7a0 <_dtoa_r+0x9b8>
   1d80c:	4641      	mov	r1, r8
   1d80e:	2205      	movs	r2, #5
   1d810:	4620      	mov	r0, r4
   1d812:	f000 fda7 	bl	1e364 <__multadd>
   1d816:	4601      	mov	r1, r0
   1d818:	4680      	mov	r8, r0
   1d81a:	4648      	mov	r0, r9
   1d81c:	f000 ff70 	bl	1e700 <__mcmp>
   1d820:	2800      	cmp	r0, #0
   1d822:	ddbd      	ble.n	1d7a0 <_dtoa_r+0x9b8>
   1d824:	9a02      	ldr	r2, [sp, #8]
   1d826:	9904      	ldr	r1, [sp, #16]
   1d828:	2331      	movs	r3, #49	; 0x31
   1d82a:	3201      	adds	r2, #1
   1d82c:	9202      	str	r2, [sp, #8]
   1d82e:	700b      	strb	r3, [r1, #0]
   1d830:	1c4d      	adds	r5, r1, #1
   1d832:	e7b9      	b.n	1d7a8 <_dtoa_r+0x9c0>
   1d834:	9a02      	ldr	r2, [sp, #8]
   1d836:	3201      	adds	r2, #1
   1d838:	9202      	str	r2, [sp, #8]
   1d83a:	9a04      	ldr	r2, [sp, #16]
   1d83c:	2331      	movs	r3, #49	; 0x31
   1d83e:	7013      	strb	r3, [r2, #0]
   1d840:	e652      	b.n	1d4e8 <_dtoa_r+0x700>
   1d842:	2301      	movs	r3, #1
   1d844:	930b      	str	r3, [sp, #44]	; 0x2c
   1d846:	e666      	b.n	1d516 <_dtoa_r+0x72e>
   1d848:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   1d84c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1d84e:	e48f      	b.n	1d170 <_dtoa_r+0x388>
   1d850:	0003ec48 	.word	0x0003ec48
   1d854:	0003ec20 	.word	0x0003ec20
   1d858:	3ff00000 	.word	0x3ff00000
   1d85c:	401c0000 	.word	0x401c0000
   1d860:	3fe00000 	.word	0x3fe00000
   1d864:	40240000 	.word	0x40240000
   1d868:	40140000 	.word	0x40140000
   1d86c:	4650      	mov	r0, sl
   1d86e:	f7f7 fdc1 	bl	153f4 <__aeabi_i2d>
   1d872:	463a      	mov	r2, r7
   1d874:	4643      	mov	r3, r8
   1d876:	f7f7 fe23 	bl	154c0 <__aeabi_dmul>
   1d87a:	2200      	movs	r2, #0
   1d87c:	4bc1      	ldr	r3, [pc, #772]	; (1db84 <_dtoa_r+0xd9c>)
   1d87e:	f7f7 fc6d 	bl	1515c <__adddf3>
   1d882:	4605      	mov	r5, r0
   1d884:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   1d888:	4641      	mov	r1, r8
   1d88a:	2200      	movs	r2, #0
   1d88c:	4bbe      	ldr	r3, [pc, #760]	; (1db88 <_dtoa_r+0xda0>)
   1d88e:	4638      	mov	r0, r7
   1d890:	f7f7 fc62 	bl	15158 <__aeabi_dsub>
   1d894:	462a      	mov	r2, r5
   1d896:	4633      	mov	r3, r6
   1d898:	4682      	mov	sl, r0
   1d89a:	468b      	mov	fp, r1
   1d89c:	f7f8 f8a0 	bl	159e0 <__aeabi_dcmpgt>
   1d8a0:	4680      	mov	r8, r0
   1d8a2:	2800      	cmp	r0, #0
   1d8a4:	f040 8110 	bne.w	1dac8 <_dtoa_r+0xce0>
   1d8a8:	462a      	mov	r2, r5
   1d8aa:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   1d8ae:	4650      	mov	r0, sl
   1d8b0:	4659      	mov	r1, fp
   1d8b2:	f7f8 f877 	bl	159a4 <__aeabi_dcmplt>
   1d8b6:	b118      	cbz	r0, 1d8c0 <_dtoa_r+0xad8>
   1d8b8:	4646      	mov	r6, r8
   1d8ba:	e771      	b.n	1d7a0 <_dtoa_r+0x9b8>
   1d8bc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   1d8c0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   1d8c4:	f7ff bb8a 	b.w	1cfdc <_dtoa_r+0x1f4>
   1d8c8:	9804      	ldr	r0, [sp, #16]
   1d8ca:	f7ff babb 	b.w	1ce44 <_dtoa_r+0x5c>
   1d8ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d8d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1d8d2:	970c      	str	r7, [sp, #48]	; 0x30
   1d8d4:	1afb      	subs	r3, r7, r3
   1d8d6:	441a      	add	r2, r3
   1d8d8:	920d      	str	r2, [sp, #52]	; 0x34
   1d8da:	2700      	movs	r7, #0
   1d8dc:	e469      	b.n	1d1b2 <_dtoa_r+0x3ca>
   1d8de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   1d8e2:	f04f 0a02 	mov.w	sl, #2
   1d8e6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   1d8ea:	e657      	b.n	1d59c <_dtoa_r+0x7b4>
   1d8ec:	2100      	movs	r1, #0
   1d8ee:	2301      	movs	r3, #1
   1d8f0:	6461      	str	r1, [r4, #68]	; 0x44
   1d8f2:	4620      	mov	r0, r4
   1d8f4:	9325      	str	r3, [sp, #148]	; 0x94
   1d8f6:	f000 fd05 	bl	1e304 <_Balloc>
   1d8fa:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1d8fc:	9004      	str	r0, [sp, #16]
   1d8fe:	6420      	str	r0, [r4, #64]	; 0x40
   1d900:	930a      	str	r3, [sp, #40]	; 0x28
   1d902:	930f      	str	r3, [sp, #60]	; 0x3c
   1d904:	e629      	b.n	1d55a <_dtoa_r+0x772>
   1d906:	2a00      	cmp	r2, #0
   1d908:	46d0      	mov	r8, sl
   1d90a:	f8cd b018 	str.w	fp, [sp, #24]
   1d90e:	469a      	mov	sl, r3
   1d910:	dd11      	ble.n	1d936 <_dtoa_r+0xb4e>
   1d912:	4649      	mov	r1, r9
   1d914:	2201      	movs	r2, #1
   1d916:	4620      	mov	r0, r4
   1d918:	f000 fea0 	bl	1e65c <__lshift>
   1d91c:	4641      	mov	r1, r8
   1d91e:	4681      	mov	r9, r0
   1d920:	f000 feee 	bl	1e700 <__mcmp>
   1d924:	2800      	cmp	r0, #0
   1d926:	f340 8146 	ble.w	1dbb6 <_dtoa_r+0xdce>
   1d92a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   1d92e:	f000 8106 	beq.w	1db3e <_dtoa_r+0xd56>
   1d932:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   1d936:	46b3      	mov	fp, r6
   1d938:	f887 a000 	strb.w	sl, [r7]
   1d93c:	1c7d      	adds	r5, r7, #1
   1d93e:	9e06      	ldr	r6, [sp, #24]
   1d940:	e5d2      	b.n	1d4e8 <_dtoa_r+0x700>
   1d942:	d104      	bne.n	1d94e <_dtoa_r+0xb66>
   1d944:	f01a 0f01 	tst.w	sl, #1
   1d948:	d001      	beq.n	1d94e <_dtoa_r+0xb66>
   1d94a:	e5bd      	b.n	1d4c8 <_dtoa_r+0x6e0>
   1d94c:	4615      	mov	r5, r2
   1d94e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1d952:	2b30      	cmp	r3, #48	; 0x30
   1d954:	f105 32ff 	add.w	r2, r5, #4294967295
   1d958:	d0f8      	beq.n	1d94c <_dtoa_r+0xb64>
   1d95a:	e5c5      	b.n	1d4e8 <_dtoa_r+0x700>
   1d95c:	9904      	ldr	r1, [sp, #16]
   1d95e:	2230      	movs	r2, #48	; 0x30
   1d960:	700a      	strb	r2, [r1, #0]
   1d962:	9a02      	ldr	r2, [sp, #8]
   1d964:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   1d968:	3201      	adds	r2, #1
   1d96a:	9202      	str	r2, [sp, #8]
   1d96c:	f7ff bbfc 	b.w	1d168 <_dtoa_r+0x380>
   1d970:	f000 80bb 	beq.w	1daea <_dtoa_r+0xd02>
   1d974:	9b02      	ldr	r3, [sp, #8]
   1d976:	425d      	negs	r5, r3
   1d978:	4b84      	ldr	r3, [pc, #528]	; (1db8c <_dtoa_r+0xda4>)
   1d97a:	f005 020f 	and.w	r2, r5, #15
   1d97e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1d982:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d986:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1d98a:	f7f7 fd99 	bl	154c0 <__aeabi_dmul>
   1d98e:	112d      	asrs	r5, r5, #4
   1d990:	4607      	mov	r7, r0
   1d992:	4688      	mov	r8, r1
   1d994:	f000 812c 	beq.w	1dbf0 <_dtoa_r+0xe08>
   1d998:	4e7d      	ldr	r6, [pc, #500]	; (1db90 <_dtoa_r+0xda8>)
   1d99a:	f04f 0a02 	mov.w	sl, #2
   1d99e:	07eb      	lsls	r3, r5, #31
   1d9a0:	d509      	bpl.n	1d9b6 <_dtoa_r+0xbce>
   1d9a2:	4638      	mov	r0, r7
   1d9a4:	4641      	mov	r1, r8
   1d9a6:	e9d6 2300 	ldrd	r2, r3, [r6]
   1d9aa:	f7f7 fd89 	bl	154c0 <__aeabi_dmul>
   1d9ae:	f10a 0a01 	add.w	sl, sl, #1
   1d9b2:	4607      	mov	r7, r0
   1d9b4:	4688      	mov	r8, r1
   1d9b6:	106d      	asrs	r5, r5, #1
   1d9b8:	f106 0608 	add.w	r6, r6, #8
   1d9bc:	d1ef      	bne.n	1d99e <_dtoa_r+0xbb6>
   1d9be:	e608      	b.n	1d5d2 <_dtoa_r+0x7ea>
   1d9c0:	6871      	ldr	r1, [r6, #4]
   1d9c2:	4620      	mov	r0, r4
   1d9c4:	f000 fc9e 	bl	1e304 <_Balloc>
   1d9c8:	6933      	ldr	r3, [r6, #16]
   1d9ca:	3302      	adds	r3, #2
   1d9cc:	009a      	lsls	r2, r3, #2
   1d9ce:	4605      	mov	r5, r0
   1d9d0:	f106 010c 	add.w	r1, r6, #12
   1d9d4:	300c      	adds	r0, #12
   1d9d6:	f7fa fba3 	bl	18120 <memcpy>
   1d9da:	4629      	mov	r1, r5
   1d9dc:	2201      	movs	r2, #1
   1d9de:	4620      	mov	r0, r4
   1d9e0:	f000 fe3c 	bl	1e65c <__lshift>
   1d9e4:	9006      	str	r0, [sp, #24]
   1d9e6:	e4b5      	b.n	1d354 <_dtoa_r+0x56c>
   1d9e8:	2b39      	cmp	r3, #57	; 0x39
   1d9ea:	f8cd b018 	str.w	fp, [sp, #24]
   1d9ee:	46d0      	mov	r8, sl
   1d9f0:	f000 80a5 	beq.w	1db3e <_dtoa_r+0xd56>
   1d9f4:	f103 0a01 	add.w	sl, r3, #1
   1d9f8:	46b3      	mov	fp, r6
   1d9fa:	f887 a000 	strb.w	sl, [r7]
   1d9fe:	1c7d      	adds	r5, r7, #1
   1da00:	9e06      	ldr	r6, [sp, #24]
   1da02:	e571      	b.n	1d4e8 <_dtoa_r+0x700>
   1da04:	465a      	mov	r2, fp
   1da06:	46d0      	mov	r8, sl
   1da08:	46b3      	mov	fp, r6
   1da0a:	469a      	mov	sl, r3
   1da0c:	4616      	mov	r6, r2
   1da0e:	e54f      	b.n	1d4b0 <_dtoa_r+0x6c8>
   1da10:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1da12:	495e      	ldr	r1, [pc, #376]	; (1db8c <_dtoa_r+0xda4>)
   1da14:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1da18:	462a      	mov	r2, r5
   1da1a:	4633      	mov	r3, r6
   1da1c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   1da20:	f7f7 fd4e 	bl	154c0 <__aeabi_dmul>
   1da24:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   1da28:	4638      	mov	r0, r7
   1da2a:	4641      	mov	r1, r8
   1da2c:	f7f7 ffe2 	bl	159f4 <__aeabi_d2iz>
   1da30:	4605      	mov	r5, r0
   1da32:	f7f7 fcdf 	bl	153f4 <__aeabi_i2d>
   1da36:	460b      	mov	r3, r1
   1da38:	4602      	mov	r2, r0
   1da3a:	4641      	mov	r1, r8
   1da3c:	4638      	mov	r0, r7
   1da3e:	f7f7 fb8b 	bl	15158 <__aeabi_dsub>
   1da42:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1da44:	460f      	mov	r7, r1
   1da46:	9904      	ldr	r1, [sp, #16]
   1da48:	3530      	adds	r5, #48	; 0x30
   1da4a:	2b01      	cmp	r3, #1
   1da4c:	700d      	strb	r5, [r1, #0]
   1da4e:	4606      	mov	r6, r0
   1da50:	f101 0501 	add.w	r5, r1, #1
   1da54:	d026      	beq.n	1daa4 <_dtoa_r+0xcbc>
   1da56:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1da58:	9a04      	ldr	r2, [sp, #16]
   1da5a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 1db98 <_dtoa_r+0xdb0>
   1da5e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   1da62:	4413      	add	r3, r2
   1da64:	f04f 0a00 	mov.w	sl, #0
   1da68:	4699      	mov	r9, r3
   1da6a:	4652      	mov	r2, sl
   1da6c:	465b      	mov	r3, fp
   1da6e:	4630      	mov	r0, r6
   1da70:	4639      	mov	r1, r7
   1da72:	f7f7 fd25 	bl	154c0 <__aeabi_dmul>
   1da76:	460f      	mov	r7, r1
   1da78:	4606      	mov	r6, r0
   1da7a:	f7f7 ffbb 	bl	159f4 <__aeabi_d2iz>
   1da7e:	4680      	mov	r8, r0
   1da80:	f7f7 fcb8 	bl	153f4 <__aeabi_i2d>
   1da84:	f108 0830 	add.w	r8, r8, #48	; 0x30
   1da88:	4602      	mov	r2, r0
   1da8a:	460b      	mov	r3, r1
   1da8c:	4630      	mov	r0, r6
   1da8e:	4639      	mov	r1, r7
   1da90:	f7f7 fb62 	bl	15158 <__aeabi_dsub>
   1da94:	f805 8b01 	strb.w	r8, [r5], #1
   1da98:	454d      	cmp	r5, r9
   1da9a:	4606      	mov	r6, r0
   1da9c:	460f      	mov	r7, r1
   1da9e:	d1e4      	bne.n	1da6a <_dtoa_r+0xc82>
   1daa0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   1daa4:	4b3b      	ldr	r3, [pc, #236]	; (1db94 <_dtoa_r+0xdac>)
   1daa6:	2200      	movs	r2, #0
   1daa8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   1daac:	f7f7 fb56 	bl	1515c <__adddf3>
   1dab0:	4632      	mov	r2, r6
   1dab2:	463b      	mov	r3, r7
   1dab4:	f7f7 ff76 	bl	159a4 <__aeabi_dcmplt>
   1dab8:	2800      	cmp	r0, #0
   1daba:	d046      	beq.n	1db4a <_dtoa_r+0xd62>
   1dabc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1dabe:	9302      	str	r3, [sp, #8]
   1dac0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   1dac4:	f7ff bb43 	b.w	1d14e <_dtoa_r+0x366>
   1dac8:	f04f 0800 	mov.w	r8, #0
   1dacc:	4646      	mov	r6, r8
   1dace:	e6a9      	b.n	1d824 <_dtoa_r+0xa3c>
   1dad0:	9b08      	ldr	r3, [sp, #32]
   1dad2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1dad4:	1a9d      	subs	r5, r3, r2
   1dad6:	2300      	movs	r3, #0
   1dad8:	f7ff bb71 	b.w	1d1be <_dtoa_r+0x3d6>
   1dadc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1dade:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1dae0:	9d08      	ldr	r5, [sp, #32]
   1dae2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1dae6:	f7ff bb6a 	b.w	1d1be <_dtoa_r+0x3d6>
   1daea:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   1daee:	f04f 0a02 	mov.w	sl, #2
   1daf2:	e56e      	b.n	1d5d2 <_dtoa_r+0x7ea>
   1daf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1daf6:	2b00      	cmp	r3, #0
   1daf8:	f43f aeb8 	beq.w	1d86c <_dtoa_r+0xa84>
   1dafc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1dafe:	2b00      	cmp	r3, #0
   1db00:	f77f aede 	ble.w	1d8c0 <_dtoa_r+0xad8>
   1db04:	2200      	movs	r2, #0
   1db06:	4b24      	ldr	r3, [pc, #144]	; (1db98 <_dtoa_r+0xdb0>)
   1db08:	4638      	mov	r0, r7
   1db0a:	4641      	mov	r1, r8
   1db0c:	f7f7 fcd8 	bl	154c0 <__aeabi_dmul>
   1db10:	4607      	mov	r7, r0
   1db12:	4688      	mov	r8, r1
   1db14:	f10a 0001 	add.w	r0, sl, #1
   1db18:	f7f7 fc6c 	bl	153f4 <__aeabi_i2d>
   1db1c:	463a      	mov	r2, r7
   1db1e:	4643      	mov	r3, r8
   1db20:	f7f7 fcce 	bl	154c0 <__aeabi_dmul>
   1db24:	2200      	movs	r2, #0
   1db26:	4b17      	ldr	r3, [pc, #92]	; (1db84 <_dtoa_r+0xd9c>)
   1db28:	f7f7 fb18 	bl	1515c <__adddf3>
   1db2c:	9a02      	ldr	r2, [sp, #8]
   1db2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1db30:	9312      	str	r3, [sp, #72]	; 0x48
   1db32:	3a01      	subs	r2, #1
   1db34:	4605      	mov	r5, r0
   1db36:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   1db3a:	9215      	str	r2, [sp, #84]	; 0x54
   1db3c:	e56a      	b.n	1d614 <_dtoa_r+0x82c>
   1db3e:	2239      	movs	r2, #57	; 0x39
   1db40:	46b3      	mov	fp, r6
   1db42:	703a      	strb	r2, [r7, #0]
   1db44:	9e06      	ldr	r6, [sp, #24]
   1db46:	1c7d      	adds	r5, r7, #1
   1db48:	e4c0      	b.n	1d4cc <_dtoa_r+0x6e4>
   1db4a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   1db4e:	2000      	movs	r0, #0
   1db50:	4910      	ldr	r1, [pc, #64]	; (1db94 <_dtoa_r+0xdac>)
   1db52:	f7f7 fb01 	bl	15158 <__aeabi_dsub>
   1db56:	4632      	mov	r2, r6
   1db58:	463b      	mov	r3, r7
   1db5a:	f7f7 ff41 	bl	159e0 <__aeabi_dcmpgt>
   1db5e:	b908      	cbnz	r0, 1db64 <_dtoa_r+0xd7c>
   1db60:	e6ae      	b.n	1d8c0 <_dtoa_r+0xad8>
   1db62:	4615      	mov	r5, r2
   1db64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1db68:	2b30      	cmp	r3, #48	; 0x30
   1db6a:	f105 32ff 	add.w	r2, r5, #4294967295
   1db6e:	d0f8      	beq.n	1db62 <_dtoa_r+0xd7a>
   1db70:	e5d7      	b.n	1d722 <_dtoa_r+0x93a>
   1db72:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   1db76:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1db78:	9302      	str	r3, [sp, #8]
   1db7a:	f7ff bae8 	b.w	1d14e <_dtoa_r+0x366>
   1db7e:	970c      	str	r7, [sp, #48]	; 0x30
   1db80:	f7ff bba5 	b.w	1d2ce <_dtoa_r+0x4e6>
   1db84:	401c0000 	.word	0x401c0000
   1db88:	40140000 	.word	0x40140000
   1db8c:	0003ec48 	.word	0x0003ec48
   1db90:	0003ec20 	.word	0x0003ec20
   1db94:	3fe00000 	.word	0x3fe00000
   1db98:	40240000 	.word	0x40240000
   1db9c:	2b39      	cmp	r3, #57	; 0x39
   1db9e:	f8cd b018 	str.w	fp, [sp, #24]
   1dba2:	46d0      	mov	r8, sl
   1dba4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   1dba8:	469a      	mov	sl, r3
   1dbaa:	d0c8      	beq.n	1db3e <_dtoa_r+0xd56>
   1dbac:	f1bb 0f00 	cmp.w	fp, #0
   1dbb0:	f73f aebf 	bgt.w	1d932 <_dtoa_r+0xb4a>
   1dbb4:	e6bf      	b.n	1d936 <_dtoa_r+0xb4e>
   1dbb6:	f47f aebe 	bne.w	1d936 <_dtoa_r+0xb4e>
   1dbba:	f01a 0f01 	tst.w	sl, #1
   1dbbe:	f43f aeba 	beq.w	1d936 <_dtoa_r+0xb4e>
   1dbc2:	e6b2      	b.n	1d92a <_dtoa_r+0xb42>
   1dbc4:	f04f 0800 	mov.w	r8, #0
   1dbc8:	4646      	mov	r6, r8
   1dbca:	e5e9      	b.n	1d7a0 <_dtoa_r+0x9b8>
   1dbcc:	4631      	mov	r1, r6
   1dbce:	2300      	movs	r3, #0
   1dbd0:	220a      	movs	r2, #10
   1dbd2:	4620      	mov	r0, r4
   1dbd4:	f000 fbc6 	bl	1e364 <__multadd>
   1dbd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1dbda:	2b00      	cmp	r3, #0
   1dbdc:	4606      	mov	r6, r0
   1dbde:	dd0a      	ble.n	1dbf6 <_dtoa_r+0xe0e>
   1dbe0:	930a      	str	r3, [sp, #40]	; 0x28
   1dbe2:	f7ff bbaa 	b.w	1d33a <_dtoa_r+0x552>
   1dbe6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1dbe8:	2b02      	cmp	r3, #2
   1dbea:	dc23      	bgt.n	1dc34 <_dtoa_r+0xe4c>
   1dbec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1dbee:	e43b      	b.n	1d468 <_dtoa_r+0x680>
   1dbf0:	f04f 0a02 	mov.w	sl, #2
   1dbf4:	e4ed      	b.n	1d5d2 <_dtoa_r+0x7ea>
   1dbf6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1dbf8:	2b02      	cmp	r3, #2
   1dbfa:	dc1b      	bgt.n	1dc34 <_dtoa_r+0xe4c>
   1dbfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1dbfe:	e7ef      	b.n	1dbe0 <_dtoa_r+0xdf8>
   1dc00:	2500      	movs	r5, #0
   1dc02:	6465      	str	r5, [r4, #68]	; 0x44
   1dc04:	4629      	mov	r1, r5
   1dc06:	4620      	mov	r0, r4
   1dc08:	f000 fb7c 	bl	1e304 <_Balloc>
   1dc0c:	f04f 33ff 	mov.w	r3, #4294967295
   1dc10:	930a      	str	r3, [sp, #40]	; 0x28
   1dc12:	930f      	str	r3, [sp, #60]	; 0x3c
   1dc14:	2301      	movs	r3, #1
   1dc16:	9004      	str	r0, [sp, #16]
   1dc18:	9525      	str	r5, [sp, #148]	; 0x94
   1dc1a:	6420      	str	r0, [r4, #64]	; 0x40
   1dc1c:	930b      	str	r3, [sp, #44]	; 0x2c
   1dc1e:	f7ff b9dd 	b.w	1cfdc <_dtoa_r+0x1f4>
   1dc22:	2501      	movs	r5, #1
   1dc24:	f7ff b9a5 	b.w	1cf72 <_dtoa_r+0x18a>
   1dc28:	f43f ab69 	beq.w	1d2fe <_dtoa_r+0x516>
   1dc2c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   1dc30:	f7ff bbf9 	b.w	1d426 <_dtoa_r+0x63e>
   1dc34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1dc36:	930a      	str	r3, [sp, #40]	; 0x28
   1dc38:	e5e5      	b.n	1d806 <_dtoa_r+0xa1e>
   1dc3a:	bf00      	nop

0001dc3c <__sflush_r>:
   1dc3c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   1dc40:	b29a      	uxth	r2, r3
   1dc42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dc46:	460d      	mov	r5, r1
   1dc48:	0711      	lsls	r1, r2, #28
   1dc4a:	4680      	mov	r8, r0
   1dc4c:	d43a      	bmi.n	1dcc4 <__sflush_r+0x88>
   1dc4e:	686a      	ldr	r2, [r5, #4]
   1dc50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1dc54:	2a00      	cmp	r2, #0
   1dc56:	81ab      	strh	r3, [r5, #12]
   1dc58:	dd6f      	ble.n	1dd3a <__sflush_r+0xfe>
   1dc5a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1dc5c:	2c00      	cmp	r4, #0
   1dc5e:	d049      	beq.n	1dcf4 <__sflush_r+0xb8>
   1dc60:	2200      	movs	r2, #0
   1dc62:	b29b      	uxth	r3, r3
   1dc64:	f8d8 6000 	ldr.w	r6, [r8]
   1dc68:	f8c8 2000 	str.w	r2, [r8]
   1dc6c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   1dc70:	d067      	beq.n	1dd42 <__sflush_r+0x106>
   1dc72:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   1dc74:	075f      	lsls	r7, r3, #29
   1dc76:	d505      	bpl.n	1dc84 <__sflush_r+0x48>
   1dc78:	6869      	ldr	r1, [r5, #4]
   1dc7a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1dc7c:	1a52      	subs	r2, r2, r1
   1dc7e:	b10b      	cbz	r3, 1dc84 <__sflush_r+0x48>
   1dc80:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1dc82:	1ad2      	subs	r2, r2, r3
   1dc84:	2300      	movs	r3, #0
   1dc86:	69e9      	ldr	r1, [r5, #28]
   1dc88:	4640      	mov	r0, r8
   1dc8a:	47a0      	blx	r4
   1dc8c:	1c44      	adds	r4, r0, #1
   1dc8e:	d03c      	beq.n	1dd0a <__sflush_r+0xce>
   1dc90:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   1dc94:	692a      	ldr	r2, [r5, #16]
   1dc96:	602a      	str	r2, [r5, #0]
   1dc98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1dc9c:	2200      	movs	r2, #0
   1dc9e:	81ab      	strh	r3, [r5, #12]
   1dca0:	04db      	lsls	r3, r3, #19
   1dca2:	606a      	str	r2, [r5, #4]
   1dca4:	d447      	bmi.n	1dd36 <__sflush_r+0xfa>
   1dca6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1dca8:	f8c8 6000 	str.w	r6, [r8]
   1dcac:	b311      	cbz	r1, 1dcf4 <__sflush_r+0xb8>
   1dcae:	f105 0340 	add.w	r3, r5, #64	; 0x40
   1dcb2:	4299      	cmp	r1, r3
   1dcb4:	d002      	beq.n	1dcbc <__sflush_r+0x80>
   1dcb6:	4640      	mov	r0, r8
   1dcb8:	f000 f9de 	bl	1e078 <_free_r>
   1dcbc:	2000      	movs	r0, #0
   1dcbe:	6328      	str	r0, [r5, #48]	; 0x30
   1dcc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dcc4:	692e      	ldr	r6, [r5, #16]
   1dcc6:	b1ae      	cbz	r6, 1dcf4 <__sflush_r+0xb8>
   1dcc8:	682c      	ldr	r4, [r5, #0]
   1dcca:	602e      	str	r6, [r5, #0]
   1dccc:	0791      	lsls	r1, r2, #30
   1dcce:	bf0c      	ite	eq
   1dcd0:	696b      	ldreq	r3, [r5, #20]
   1dcd2:	2300      	movne	r3, #0
   1dcd4:	1ba4      	subs	r4, r4, r6
   1dcd6:	60ab      	str	r3, [r5, #8]
   1dcd8:	e00a      	b.n	1dcf0 <__sflush_r+0xb4>
   1dcda:	4623      	mov	r3, r4
   1dcdc:	4632      	mov	r2, r6
   1dcde:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   1dce0:	69e9      	ldr	r1, [r5, #28]
   1dce2:	4640      	mov	r0, r8
   1dce4:	47b8      	blx	r7
   1dce6:	2800      	cmp	r0, #0
   1dce8:	eba4 0400 	sub.w	r4, r4, r0
   1dcec:	4406      	add	r6, r0
   1dcee:	dd04      	ble.n	1dcfa <__sflush_r+0xbe>
   1dcf0:	2c00      	cmp	r4, #0
   1dcf2:	dcf2      	bgt.n	1dcda <__sflush_r+0x9e>
   1dcf4:	2000      	movs	r0, #0
   1dcf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dcfa:	89ab      	ldrh	r3, [r5, #12]
   1dcfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1dd00:	81ab      	strh	r3, [r5, #12]
   1dd02:	f04f 30ff 	mov.w	r0, #4294967295
   1dd06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dd0a:	f8d8 4000 	ldr.w	r4, [r8]
   1dd0e:	2c1d      	cmp	r4, #29
   1dd10:	d8f3      	bhi.n	1dcfa <__sflush_r+0xbe>
   1dd12:	4b19      	ldr	r3, [pc, #100]	; (1dd78 <__sflush_r+0x13c>)
   1dd14:	40e3      	lsrs	r3, r4
   1dd16:	43db      	mvns	r3, r3
   1dd18:	f013 0301 	ands.w	r3, r3, #1
   1dd1c:	d1ed      	bne.n	1dcfa <__sflush_r+0xbe>
   1dd1e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   1dd22:	606b      	str	r3, [r5, #4]
   1dd24:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
   1dd28:	6929      	ldr	r1, [r5, #16]
   1dd2a:	81ab      	strh	r3, [r5, #12]
   1dd2c:	04da      	lsls	r2, r3, #19
   1dd2e:	6029      	str	r1, [r5, #0]
   1dd30:	d5b9      	bpl.n	1dca6 <__sflush_r+0x6a>
   1dd32:	2c00      	cmp	r4, #0
   1dd34:	d1b7      	bne.n	1dca6 <__sflush_r+0x6a>
   1dd36:	6528      	str	r0, [r5, #80]	; 0x50
   1dd38:	e7b5      	b.n	1dca6 <__sflush_r+0x6a>
   1dd3a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   1dd3c:	2a00      	cmp	r2, #0
   1dd3e:	dc8c      	bgt.n	1dc5a <__sflush_r+0x1e>
   1dd40:	e7d8      	b.n	1dcf4 <__sflush_r+0xb8>
   1dd42:	2301      	movs	r3, #1
   1dd44:	69e9      	ldr	r1, [r5, #28]
   1dd46:	4640      	mov	r0, r8
   1dd48:	47a0      	blx	r4
   1dd4a:	1c43      	adds	r3, r0, #1
   1dd4c:	4602      	mov	r2, r0
   1dd4e:	d002      	beq.n	1dd56 <__sflush_r+0x11a>
   1dd50:	89ab      	ldrh	r3, [r5, #12]
   1dd52:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1dd54:	e78e      	b.n	1dc74 <__sflush_r+0x38>
   1dd56:	f8d8 3000 	ldr.w	r3, [r8]
   1dd5a:	2b00      	cmp	r3, #0
   1dd5c:	d0f8      	beq.n	1dd50 <__sflush_r+0x114>
   1dd5e:	2b1d      	cmp	r3, #29
   1dd60:	d001      	beq.n	1dd66 <__sflush_r+0x12a>
   1dd62:	2b16      	cmp	r3, #22
   1dd64:	d102      	bne.n	1dd6c <__sflush_r+0x130>
   1dd66:	f8c8 6000 	str.w	r6, [r8]
   1dd6a:	e7c3      	b.n	1dcf4 <__sflush_r+0xb8>
   1dd6c:	89ab      	ldrh	r3, [r5, #12]
   1dd6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1dd72:	81ab      	strh	r3, [r5, #12]
   1dd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dd78:	20400001 	.word	0x20400001

0001dd7c <_fflush_r>:
   1dd7c:	b538      	push	{r3, r4, r5, lr}
   1dd7e:	460d      	mov	r5, r1
   1dd80:	4604      	mov	r4, r0
   1dd82:	b108      	cbz	r0, 1dd88 <_fflush_r+0xc>
   1dd84:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1dd86:	b1bb      	cbz	r3, 1ddb8 <_fflush_r+0x3c>
   1dd88:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   1dd8c:	b188      	cbz	r0, 1ddb2 <_fflush_r+0x36>
   1dd8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1dd90:	07db      	lsls	r3, r3, #31
   1dd92:	d401      	bmi.n	1dd98 <_fflush_r+0x1c>
   1dd94:	0581      	lsls	r1, r0, #22
   1dd96:	d517      	bpl.n	1ddc8 <_fflush_r+0x4c>
   1dd98:	4620      	mov	r0, r4
   1dd9a:	4629      	mov	r1, r5
   1dd9c:	f7ff ff4e 	bl	1dc3c <__sflush_r>
   1dda0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1dda2:	07da      	lsls	r2, r3, #31
   1dda4:	4604      	mov	r4, r0
   1dda6:	d402      	bmi.n	1ddae <_fflush_r+0x32>
   1dda8:	89ab      	ldrh	r3, [r5, #12]
   1ddaa:	059b      	lsls	r3, r3, #22
   1ddac:	d507      	bpl.n	1ddbe <_fflush_r+0x42>
   1ddae:	4620      	mov	r0, r4
   1ddb0:	bd38      	pop	{r3, r4, r5, pc}
   1ddb2:	4604      	mov	r4, r0
   1ddb4:	4620      	mov	r0, r4
   1ddb6:	bd38      	pop	{r3, r4, r5, pc}
   1ddb8:	f000 f838 	bl	1de2c <__sinit>
   1ddbc:	e7e4      	b.n	1dd88 <_fflush_r+0xc>
   1ddbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1ddc0:	f7f9 fdd8 	bl	17974 <__retarget_lock_release_recursive>
   1ddc4:	4620      	mov	r0, r4
   1ddc6:	bd38      	pop	{r3, r4, r5, pc}
   1ddc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1ddca:	f7f9 fdd1 	bl	17970 <__retarget_lock_acquire_recursive>
   1ddce:	e7e3      	b.n	1dd98 <_fflush_r+0x1c>

0001ddd0 <_cleanup_r>:
   1ddd0:	4901      	ldr	r1, [pc, #4]	; (1ddd8 <_cleanup_r+0x8>)
   1ddd2:	f000 ba37 	b.w	1e244 <_fwalk_reent>
   1ddd6:	bf00      	nop
   1ddd8:	0001ea81 	.word	0x0001ea81

0001dddc <std.isra.0>:
   1dddc:	b510      	push	{r4, lr}
   1ddde:	2300      	movs	r3, #0
   1dde0:	4604      	mov	r4, r0
   1dde2:	8181      	strh	r1, [r0, #12]
   1dde4:	81c2      	strh	r2, [r0, #14]
   1dde6:	6003      	str	r3, [r0, #0]
   1dde8:	6043      	str	r3, [r0, #4]
   1ddea:	6083      	str	r3, [r0, #8]
   1ddec:	6643      	str	r3, [r0, #100]	; 0x64
   1ddee:	6103      	str	r3, [r0, #16]
   1ddf0:	6143      	str	r3, [r0, #20]
   1ddf2:	6183      	str	r3, [r0, #24]
   1ddf4:	4619      	mov	r1, r3
   1ddf6:	2208      	movs	r2, #8
   1ddf8:	305c      	adds	r0, #92	; 0x5c
   1ddfa:	f7fa fa8f 	bl	1831c <memset>
   1ddfe:	4807      	ldr	r0, [pc, #28]	; (1de1c <std.isra.0+0x40>)
   1de00:	4907      	ldr	r1, [pc, #28]	; (1de20 <std.isra.0+0x44>)
   1de02:	4a08      	ldr	r2, [pc, #32]	; (1de24 <std.isra.0+0x48>)
   1de04:	4b08      	ldr	r3, [pc, #32]	; (1de28 <std.isra.0+0x4c>)
   1de06:	6220      	str	r0, [r4, #32]
   1de08:	61e4      	str	r4, [r4, #28]
   1de0a:	6261      	str	r1, [r4, #36]	; 0x24
   1de0c:	62a2      	str	r2, [r4, #40]	; 0x28
   1de0e:	62e3      	str	r3, [r4, #44]	; 0x2c
   1de10:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1de14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1de18:	f7f9 bda6 	b.w	17968 <__retarget_lock_init_recursive>
   1de1c:	000188d1 	.word	0x000188d1
   1de20:	000188f5 	.word	0x000188f5
   1de24:	00018931 	.word	0x00018931
   1de28:	00018951 	.word	0x00018951

0001de2c <__sinit>:
   1de2c:	b510      	push	{r4, lr}
   1de2e:	4604      	mov	r4, r0
   1de30:	4812      	ldr	r0, [pc, #72]	; (1de7c <__sinit+0x50>)
   1de32:	f7f9 fd9d 	bl	17970 <__retarget_lock_acquire_recursive>
   1de36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1de38:	b9d2      	cbnz	r2, 1de70 <__sinit+0x44>
   1de3a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   1de3e:	4810      	ldr	r0, [pc, #64]	; (1de80 <__sinit+0x54>)
   1de40:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   1de44:	2103      	movs	r1, #3
   1de46:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   1de4a:	63e0      	str	r0, [r4, #60]	; 0x3c
   1de4c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   1de50:	6860      	ldr	r0, [r4, #4]
   1de52:	2104      	movs	r1, #4
   1de54:	f7ff ffc2 	bl	1dddc <std.isra.0>
   1de58:	2201      	movs	r2, #1
   1de5a:	2109      	movs	r1, #9
   1de5c:	68a0      	ldr	r0, [r4, #8]
   1de5e:	f7ff ffbd 	bl	1dddc <std.isra.0>
   1de62:	2202      	movs	r2, #2
   1de64:	2112      	movs	r1, #18
   1de66:	68e0      	ldr	r0, [r4, #12]
   1de68:	f7ff ffb8 	bl	1dddc <std.isra.0>
   1de6c:	2301      	movs	r3, #1
   1de6e:	63a3      	str	r3, [r4, #56]	; 0x38
   1de70:	4802      	ldr	r0, [pc, #8]	; (1de7c <__sinit+0x50>)
   1de72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1de76:	f7f9 bd7d 	b.w	17974 <__retarget_lock_release_recursive>
   1de7a:	bf00      	nop
   1de7c:	2001b0b4 	.word	0x2001b0b4
   1de80:	0001ddd1 	.word	0x0001ddd1

0001de84 <__sfp_lock_acquire>:
   1de84:	4801      	ldr	r0, [pc, #4]	; (1de8c <__sfp_lock_acquire+0x8>)
   1de86:	f7f9 bd73 	b.w	17970 <__retarget_lock_acquire_recursive>
   1de8a:	bf00      	nop
   1de8c:	2001b0b8 	.word	0x2001b0b8

0001de90 <__sfp_lock_release>:
   1de90:	4801      	ldr	r0, [pc, #4]	; (1de98 <__sfp_lock_release+0x8>)
   1de92:	f7f9 bd6f 	b.w	17974 <__retarget_lock_release_recursive>
   1de96:	bf00      	nop
   1de98:	2001b0b8 	.word	0x2001b0b8

0001de9c <__libc_fini_array>:
   1de9c:	b538      	push	{r3, r4, r5, lr}
   1de9e:	4c0a      	ldr	r4, [pc, #40]	; (1dec8 <__libc_fini_array+0x2c>)
   1dea0:	4d0a      	ldr	r5, [pc, #40]	; (1decc <__libc_fini_array+0x30>)
   1dea2:	1b64      	subs	r4, r4, r5
   1dea4:	10a4      	asrs	r4, r4, #2
   1dea6:	d00a      	beq.n	1debe <__libc_fini_array+0x22>
   1dea8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   1deac:	3b01      	subs	r3, #1
   1deae:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1deb2:	3c01      	subs	r4, #1
   1deb4:	f855 3904 	ldr.w	r3, [r5], #-4
   1deb8:	4798      	blx	r3
   1deba:	2c00      	cmp	r4, #0
   1debc:	d1f9      	bne.n	1deb2 <__libc_fini_array+0x16>
   1debe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1dec2:	f020 bff5 	b.w	3eeb0 <_fini>
   1dec6:	bf00      	nop
   1dec8:	0003eec0 	.word	0x0003eec0
   1decc:	0003eebc 	.word	0x0003eebc

0001ded0 <__fputwc>:
   1ded0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ded4:	b082      	sub	sp, #8
   1ded6:	4680      	mov	r8, r0
   1ded8:	4689      	mov	r9, r1
   1deda:	4614      	mov	r4, r2
   1dedc:	f7f9 fd36 	bl	1794c <__locale_mb_cur_max>
   1dee0:	2801      	cmp	r0, #1
   1dee2:	d036      	beq.n	1df52 <__fputwc+0x82>
   1dee4:	464a      	mov	r2, r9
   1dee6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   1deea:	a901      	add	r1, sp, #4
   1deec:	4640      	mov	r0, r8
   1deee:	f7fe fdb1 	bl	1ca54 <_wcrtomb_r>
   1def2:	1c42      	adds	r2, r0, #1
   1def4:	4606      	mov	r6, r0
   1def6:	d025      	beq.n	1df44 <__fputwc+0x74>
   1def8:	b3a8      	cbz	r0, 1df66 <__fputwc+0x96>
   1defa:	f89d e004 	ldrb.w	lr, [sp, #4]
   1defe:	2500      	movs	r5, #0
   1df00:	f10d 0a04 	add.w	sl, sp, #4
   1df04:	e009      	b.n	1df1a <__fputwc+0x4a>
   1df06:	6823      	ldr	r3, [r4, #0]
   1df08:	1c5a      	adds	r2, r3, #1
   1df0a:	6022      	str	r2, [r4, #0]
   1df0c:	f883 e000 	strb.w	lr, [r3]
   1df10:	3501      	adds	r5, #1
   1df12:	42b5      	cmp	r5, r6
   1df14:	d227      	bcs.n	1df66 <__fputwc+0x96>
   1df16:	f815 e00a 	ldrb.w	lr, [r5, sl]
   1df1a:	68a3      	ldr	r3, [r4, #8]
   1df1c:	3b01      	subs	r3, #1
   1df1e:	2b00      	cmp	r3, #0
   1df20:	60a3      	str	r3, [r4, #8]
   1df22:	daf0      	bge.n	1df06 <__fputwc+0x36>
   1df24:	69a7      	ldr	r7, [r4, #24]
   1df26:	42bb      	cmp	r3, r7
   1df28:	4671      	mov	r1, lr
   1df2a:	4622      	mov	r2, r4
   1df2c:	4640      	mov	r0, r8
   1df2e:	db02      	blt.n	1df36 <__fputwc+0x66>
   1df30:	f1be 0f0a 	cmp.w	lr, #10
   1df34:	d1e7      	bne.n	1df06 <__fputwc+0x36>
   1df36:	f7fe fd35 	bl	1c9a4 <__swbuf_r>
   1df3a:	1c43      	adds	r3, r0, #1
   1df3c:	d1e8      	bne.n	1df10 <__fputwc+0x40>
   1df3e:	b002      	add	sp, #8
   1df40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1df44:	89a3      	ldrh	r3, [r4, #12]
   1df46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1df4a:	81a3      	strh	r3, [r4, #12]
   1df4c:	b002      	add	sp, #8
   1df4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1df52:	f109 33ff 	add.w	r3, r9, #4294967295
   1df56:	2bfe      	cmp	r3, #254	; 0xfe
   1df58:	d8c4      	bhi.n	1dee4 <__fputwc+0x14>
   1df5a:	fa5f fe89 	uxtb.w	lr, r9
   1df5e:	4606      	mov	r6, r0
   1df60:	f88d e004 	strb.w	lr, [sp, #4]
   1df64:	e7cb      	b.n	1defe <__fputwc+0x2e>
   1df66:	4648      	mov	r0, r9
   1df68:	b002      	add	sp, #8
   1df6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1df6e:	bf00      	nop

0001df70 <_fputwc_r>:
   1df70:	b530      	push	{r4, r5, lr}
   1df72:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1df74:	f013 0f01 	tst.w	r3, #1
   1df78:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1df7c:	4614      	mov	r4, r2
   1df7e:	b083      	sub	sp, #12
   1df80:	4605      	mov	r5, r0
   1df82:	b29a      	uxth	r2, r3
   1df84:	d101      	bne.n	1df8a <_fputwc_r+0x1a>
   1df86:	0590      	lsls	r0, r2, #22
   1df88:	d51c      	bpl.n	1dfc4 <_fputwc_r+0x54>
   1df8a:	0490      	lsls	r0, r2, #18
   1df8c:	d406      	bmi.n	1df9c <_fputwc_r+0x2c>
   1df8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1df90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1df94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1df98:	81a3      	strh	r3, [r4, #12]
   1df9a:	6662      	str	r2, [r4, #100]	; 0x64
   1df9c:	4628      	mov	r0, r5
   1df9e:	4622      	mov	r2, r4
   1dfa0:	f7ff ff96 	bl	1ded0 <__fputwc>
   1dfa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1dfa6:	07da      	lsls	r2, r3, #31
   1dfa8:	4605      	mov	r5, r0
   1dfaa:	d402      	bmi.n	1dfb2 <_fputwc_r+0x42>
   1dfac:	89a3      	ldrh	r3, [r4, #12]
   1dfae:	059b      	lsls	r3, r3, #22
   1dfb0:	d502      	bpl.n	1dfb8 <_fputwc_r+0x48>
   1dfb2:	4628      	mov	r0, r5
   1dfb4:	b003      	add	sp, #12
   1dfb6:	bd30      	pop	{r4, r5, pc}
   1dfb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1dfba:	f7f9 fcdb 	bl	17974 <__retarget_lock_release_recursive>
   1dfbe:	4628      	mov	r0, r5
   1dfc0:	b003      	add	sp, #12
   1dfc2:	bd30      	pop	{r4, r5, pc}
   1dfc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1dfc6:	9101      	str	r1, [sp, #4]
   1dfc8:	f7f9 fcd2 	bl	17970 <__retarget_lock_acquire_recursive>
   1dfcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1dfd0:	9901      	ldr	r1, [sp, #4]
   1dfd2:	b29a      	uxth	r2, r3
   1dfd4:	e7d9      	b.n	1df8a <_fputwc_r+0x1a>
   1dfd6:	bf00      	nop

0001dfd8 <_malloc_trim_r>:
   1dfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dfda:	4f24      	ldr	r7, [pc, #144]	; (1e06c <_malloc_trim_r+0x94>)
   1dfdc:	460c      	mov	r4, r1
   1dfde:	4606      	mov	r6, r0
   1dfe0:	f7fa f9ea 	bl	183b8 <__malloc_lock>
   1dfe4:	68bb      	ldr	r3, [r7, #8]
   1dfe6:	685d      	ldr	r5, [r3, #4]
   1dfe8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   1dfec:	310f      	adds	r1, #15
   1dfee:	f025 0503 	bic.w	r5, r5, #3
   1dff2:	4429      	add	r1, r5
   1dff4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   1dff8:	f021 010f 	bic.w	r1, r1, #15
   1dffc:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   1e000:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   1e004:	db07      	blt.n	1e016 <_malloc_trim_r+0x3e>
   1e006:	2100      	movs	r1, #0
   1e008:	4630      	mov	r0, r6
   1e00a:	f7fa fbdb 	bl	187c4 <_sbrk_r>
   1e00e:	68bb      	ldr	r3, [r7, #8]
   1e010:	442b      	add	r3, r5
   1e012:	4298      	cmp	r0, r3
   1e014:	d004      	beq.n	1e020 <_malloc_trim_r+0x48>
   1e016:	4630      	mov	r0, r6
   1e018:	f7fa f9d4 	bl	183c4 <__malloc_unlock>
   1e01c:	2000      	movs	r0, #0
   1e01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e020:	4261      	negs	r1, r4
   1e022:	4630      	mov	r0, r6
   1e024:	f7fa fbce 	bl	187c4 <_sbrk_r>
   1e028:	3001      	adds	r0, #1
   1e02a:	d00d      	beq.n	1e048 <_malloc_trim_r+0x70>
   1e02c:	4b10      	ldr	r3, [pc, #64]	; (1e070 <_malloc_trim_r+0x98>)
   1e02e:	68ba      	ldr	r2, [r7, #8]
   1e030:	6819      	ldr	r1, [r3, #0]
   1e032:	1b2d      	subs	r5, r5, r4
   1e034:	f045 0501 	orr.w	r5, r5, #1
   1e038:	4630      	mov	r0, r6
   1e03a:	1b09      	subs	r1, r1, r4
   1e03c:	6055      	str	r5, [r2, #4]
   1e03e:	6019      	str	r1, [r3, #0]
   1e040:	f7fa f9c0 	bl	183c4 <__malloc_unlock>
   1e044:	2001      	movs	r0, #1
   1e046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e048:	2100      	movs	r1, #0
   1e04a:	4630      	mov	r0, r6
   1e04c:	f7fa fbba 	bl	187c4 <_sbrk_r>
   1e050:	68ba      	ldr	r2, [r7, #8]
   1e052:	1a83      	subs	r3, r0, r2
   1e054:	2b0f      	cmp	r3, #15
   1e056:	ddde      	ble.n	1e016 <_malloc_trim_r+0x3e>
   1e058:	4c06      	ldr	r4, [pc, #24]	; (1e074 <_malloc_trim_r+0x9c>)
   1e05a:	4905      	ldr	r1, [pc, #20]	; (1e070 <_malloc_trim_r+0x98>)
   1e05c:	6824      	ldr	r4, [r4, #0]
   1e05e:	f043 0301 	orr.w	r3, r3, #1
   1e062:	1b00      	subs	r0, r0, r4
   1e064:	6053      	str	r3, [r2, #4]
   1e066:	6008      	str	r0, [r1, #0]
   1e068:	e7d5      	b.n	1e016 <_malloc_trim_r+0x3e>
   1e06a:	bf00      	nop
   1e06c:	200005bc 	.word	0x200005bc
   1e070:	2001b03c 	.word	0x2001b03c
   1e074:	200009c4 	.word	0x200009c4

0001e078 <_free_r>:
   1e078:	2900      	cmp	r1, #0
   1e07a:	d044      	beq.n	1e106 <_free_r+0x8e>
   1e07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e080:	460d      	mov	r5, r1
   1e082:	4680      	mov	r8, r0
   1e084:	f7fa f998 	bl	183b8 <__malloc_lock>
   1e088:	f855 7c04 	ldr.w	r7, [r5, #-4]
   1e08c:	4969      	ldr	r1, [pc, #420]	; (1e234 <_free_r+0x1bc>)
   1e08e:	f027 0301 	bic.w	r3, r7, #1
   1e092:	f1a5 0408 	sub.w	r4, r5, #8
   1e096:	18e2      	adds	r2, r4, r3
   1e098:	688e      	ldr	r6, [r1, #8]
   1e09a:	6850      	ldr	r0, [r2, #4]
   1e09c:	42b2      	cmp	r2, r6
   1e09e:	f020 0003 	bic.w	r0, r0, #3
   1e0a2:	d05e      	beq.n	1e162 <_free_r+0xea>
   1e0a4:	07fe      	lsls	r6, r7, #31
   1e0a6:	6050      	str	r0, [r2, #4]
   1e0a8:	d40b      	bmi.n	1e0c2 <_free_r+0x4a>
   1e0aa:	f855 7c08 	ldr.w	r7, [r5, #-8]
   1e0ae:	1be4      	subs	r4, r4, r7
   1e0b0:	f101 0e08 	add.w	lr, r1, #8
   1e0b4:	68a5      	ldr	r5, [r4, #8]
   1e0b6:	4575      	cmp	r5, lr
   1e0b8:	443b      	add	r3, r7
   1e0ba:	d06d      	beq.n	1e198 <_free_r+0x120>
   1e0bc:	68e7      	ldr	r7, [r4, #12]
   1e0be:	60ef      	str	r7, [r5, #12]
   1e0c0:	60bd      	str	r5, [r7, #8]
   1e0c2:	1815      	adds	r5, r2, r0
   1e0c4:	686d      	ldr	r5, [r5, #4]
   1e0c6:	07ed      	lsls	r5, r5, #31
   1e0c8:	d53e      	bpl.n	1e148 <_free_r+0xd0>
   1e0ca:	f043 0201 	orr.w	r2, r3, #1
   1e0ce:	6062      	str	r2, [r4, #4]
   1e0d0:	50e3      	str	r3, [r4, r3]
   1e0d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1e0d6:	d217      	bcs.n	1e108 <_free_r+0x90>
   1e0d8:	08db      	lsrs	r3, r3, #3
   1e0da:	1c58      	adds	r0, r3, #1
   1e0dc:	109a      	asrs	r2, r3, #2
   1e0de:	684d      	ldr	r5, [r1, #4]
   1e0e0:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   1e0e4:	60a7      	str	r7, [r4, #8]
   1e0e6:	2301      	movs	r3, #1
   1e0e8:	4093      	lsls	r3, r2
   1e0ea:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   1e0ee:	432b      	orrs	r3, r5
   1e0f0:	3a08      	subs	r2, #8
   1e0f2:	60e2      	str	r2, [r4, #12]
   1e0f4:	604b      	str	r3, [r1, #4]
   1e0f6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   1e0fa:	60fc      	str	r4, [r7, #12]
   1e0fc:	4640      	mov	r0, r8
   1e0fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e102:	f7fa b95f 	b.w	183c4 <__malloc_unlock>
   1e106:	4770      	bx	lr
   1e108:	0a5a      	lsrs	r2, r3, #9
   1e10a:	2a04      	cmp	r2, #4
   1e10c:	d852      	bhi.n	1e1b4 <_free_r+0x13c>
   1e10e:	099a      	lsrs	r2, r3, #6
   1e110:	f102 0739 	add.w	r7, r2, #57	; 0x39
   1e114:	00ff      	lsls	r7, r7, #3
   1e116:	f102 0538 	add.w	r5, r2, #56	; 0x38
   1e11a:	19c8      	adds	r0, r1, r7
   1e11c:	59ca      	ldr	r2, [r1, r7]
   1e11e:	3808      	subs	r0, #8
   1e120:	4290      	cmp	r0, r2
   1e122:	d04f      	beq.n	1e1c4 <_free_r+0x14c>
   1e124:	6851      	ldr	r1, [r2, #4]
   1e126:	f021 0103 	bic.w	r1, r1, #3
   1e12a:	428b      	cmp	r3, r1
   1e12c:	d232      	bcs.n	1e194 <_free_r+0x11c>
   1e12e:	6892      	ldr	r2, [r2, #8]
   1e130:	4290      	cmp	r0, r2
   1e132:	d1f7      	bne.n	1e124 <_free_r+0xac>
   1e134:	68c3      	ldr	r3, [r0, #12]
   1e136:	60a0      	str	r0, [r4, #8]
   1e138:	60e3      	str	r3, [r4, #12]
   1e13a:	609c      	str	r4, [r3, #8]
   1e13c:	60c4      	str	r4, [r0, #12]
   1e13e:	4640      	mov	r0, r8
   1e140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e144:	f7fa b93e 	b.w	183c4 <__malloc_unlock>
   1e148:	6895      	ldr	r5, [r2, #8]
   1e14a:	4f3b      	ldr	r7, [pc, #236]	; (1e238 <_free_r+0x1c0>)
   1e14c:	42bd      	cmp	r5, r7
   1e14e:	4403      	add	r3, r0
   1e150:	d040      	beq.n	1e1d4 <_free_r+0x15c>
   1e152:	68d0      	ldr	r0, [r2, #12]
   1e154:	60e8      	str	r0, [r5, #12]
   1e156:	f043 0201 	orr.w	r2, r3, #1
   1e15a:	6085      	str	r5, [r0, #8]
   1e15c:	6062      	str	r2, [r4, #4]
   1e15e:	50e3      	str	r3, [r4, r3]
   1e160:	e7b7      	b.n	1e0d2 <_free_r+0x5a>
   1e162:	07ff      	lsls	r7, r7, #31
   1e164:	4403      	add	r3, r0
   1e166:	d407      	bmi.n	1e178 <_free_r+0x100>
   1e168:	f855 2c08 	ldr.w	r2, [r5, #-8]
   1e16c:	1aa4      	subs	r4, r4, r2
   1e16e:	4413      	add	r3, r2
   1e170:	68a0      	ldr	r0, [r4, #8]
   1e172:	68e2      	ldr	r2, [r4, #12]
   1e174:	60c2      	str	r2, [r0, #12]
   1e176:	6090      	str	r0, [r2, #8]
   1e178:	4a30      	ldr	r2, [pc, #192]	; (1e23c <_free_r+0x1c4>)
   1e17a:	6812      	ldr	r2, [r2, #0]
   1e17c:	f043 0001 	orr.w	r0, r3, #1
   1e180:	4293      	cmp	r3, r2
   1e182:	6060      	str	r0, [r4, #4]
   1e184:	608c      	str	r4, [r1, #8]
   1e186:	d3b9      	bcc.n	1e0fc <_free_r+0x84>
   1e188:	4b2d      	ldr	r3, [pc, #180]	; (1e240 <_free_r+0x1c8>)
   1e18a:	4640      	mov	r0, r8
   1e18c:	6819      	ldr	r1, [r3, #0]
   1e18e:	f7ff ff23 	bl	1dfd8 <_malloc_trim_r>
   1e192:	e7b3      	b.n	1e0fc <_free_r+0x84>
   1e194:	4610      	mov	r0, r2
   1e196:	e7cd      	b.n	1e134 <_free_r+0xbc>
   1e198:	1811      	adds	r1, r2, r0
   1e19a:	6849      	ldr	r1, [r1, #4]
   1e19c:	07c9      	lsls	r1, r1, #31
   1e19e:	d444      	bmi.n	1e22a <_free_r+0x1b2>
   1e1a0:	6891      	ldr	r1, [r2, #8]
   1e1a2:	68d2      	ldr	r2, [r2, #12]
   1e1a4:	60ca      	str	r2, [r1, #12]
   1e1a6:	4403      	add	r3, r0
   1e1a8:	f043 0001 	orr.w	r0, r3, #1
   1e1ac:	6091      	str	r1, [r2, #8]
   1e1ae:	6060      	str	r0, [r4, #4]
   1e1b0:	50e3      	str	r3, [r4, r3]
   1e1b2:	e7a3      	b.n	1e0fc <_free_r+0x84>
   1e1b4:	2a14      	cmp	r2, #20
   1e1b6:	d816      	bhi.n	1e1e6 <_free_r+0x16e>
   1e1b8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   1e1bc:	00ff      	lsls	r7, r7, #3
   1e1be:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   1e1c2:	e7aa      	b.n	1e11a <_free_r+0xa2>
   1e1c4:	10aa      	asrs	r2, r5, #2
   1e1c6:	2301      	movs	r3, #1
   1e1c8:	684d      	ldr	r5, [r1, #4]
   1e1ca:	4093      	lsls	r3, r2
   1e1cc:	432b      	orrs	r3, r5
   1e1ce:	604b      	str	r3, [r1, #4]
   1e1d0:	4603      	mov	r3, r0
   1e1d2:	e7b0      	b.n	1e136 <_free_r+0xbe>
   1e1d4:	f043 0201 	orr.w	r2, r3, #1
   1e1d8:	614c      	str	r4, [r1, #20]
   1e1da:	610c      	str	r4, [r1, #16]
   1e1dc:	60e5      	str	r5, [r4, #12]
   1e1de:	60a5      	str	r5, [r4, #8]
   1e1e0:	6062      	str	r2, [r4, #4]
   1e1e2:	50e3      	str	r3, [r4, r3]
   1e1e4:	e78a      	b.n	1e0fc <_free_r+0x84>
   1e1e6:	2a54      	cmp	r2, #84	; 0x54
   1e1e8:	d806      	bhi.n	1e1f8 <_free_r+0x180>
   1e1ea:	0b1a      	lsrs	r2, r3, #12
   1e1ec:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   1e1f0:	00ff      	lsls	r7, r7, #3
   1e1f2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   1e1f6:	e790      	b.n	1e11a <_free_r+0xa2>
   1e1f8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1e1fc:	d806      	bhi.n	1e20c <_free_r+0x194>
   1e1fe:	0bda      	lsrs	r2, r3, #15
   1e200:	f102 0778 	add.w	r7, r2, #120	; 0x78
   1e204:	00ff      	lsls	r7, r7, #3
   1e206:	f102 0577 	add.w	r5, r2, #119	; 0x77
   1e20a:	e786      	b.n	1e11a <_free_r+0xa2>
   1e20c:	f240 5054 	movw	r0, #1364	; 0x554
   1e210:	4282      	cmp	r2, r0
   1e212:	d806      	bhi.n	1e222 <_free_r+0x1aa>
   1e214:	0c9a      	lsrs	r2, r3, #18
   1e216:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   1e21a:	00ff      	lsls	r7, r7, #3
   1e21c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   1e220:	e77b      	b.n	1e11a <_free_r+0xa2>
   1e222:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   1e226:	257e      	movs	r5, #126	; 0x7e
   1e228:	e777      	b.n	1e11a <_free_r+0xa2>
   1e22a:	f043 0101 	orr.w	r1, r3, #1
   1e22e:	6061      	str	r1, [r4, #4]
   1e230:	6013      	str	r3, [r2, #0]
   1e232:	e763      	b.n	1e0fc <_free_r+0x84>
   1e234:	200005bc 	.word	0x200005bc
   1e238:	200005c4 	.word	0x200005c4
   1e23c:	200009c8 	.word	0x200009c8
   1e240:	2001b06c 	.word	0x2001b06c

0001e244 <_fwalk_reent>:
   1e244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e248:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   1e24c:	d01f      	beq.n	1e28e <_fwalk_reent+0x4a>
   1e24e:	4688      	mov	r8, r1
   1e250:	4606      	mov	r6, r0
   1e252:	f04f 0900 	mov.w	r9, #0
   1e256:	687d      	ldr	r5, [r7, #4]
   1e258:	68bc      	ldr	r4, [r7, #8]
   1e25a:	3d01      	subs	r5, #1
   1e25c:	d411      	bmi.n	1e282 <_fwalk_reent+0x3e>
   1e25e:	89a3      	ldrh	r3, [r4, #12]
   1e260:	2b01      	cmp	r3, #1
   1e262:	f105 35ff 	add.w	r5, r5, #4294967295
   1e266:	d908      	bls.n	1e27a <_fwalk_reent+0x36>
   1e268:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   1e26c:	3301      	adds	r3, #1
   1e26e:	4621      	mov	r1, r4
   1e270:	4630      	mov	r0, r6
   1e272:	d002      	beq.n	1e27a <_fwalk_reent+0x36>
   1e274:	47c0      	blx	r8
   1e276:	ea49 0900 	orr.w	r9, r9, r0
   1e27a:	1c6b      	adds	r3, r5, #1
   1e27c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   1e280:	d1ed      	bne.n	1e25e <_fwalk_reent+0x1a>
   1e282:	683f      	ldr	r7, [r7, #0]
   1e284:	2f00      	cmp	r7, #0
   1e286:	d1e6      	bne.n	1e256 <_fwalk_reent+0x12>
   1e288:	4648      	mov	r0, r9
   1e28a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e28e:	46b9      	mov	r9, r7
   1e290:	4648      	mov	r0, r9
   1e292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e296:	bf00      	nop

0001e298 <_isatty_r>:
   1e298:	b538      	push	{r3, r4, r5, lr}
   1e29a:	4c07      	ldr	r4, [pc, #28]	; (1e2b8 <_isatty_r+0x20>)
   1e29c:	2300      	movs	r3, #0
   1e29e:	4605      	mov	r5, r0
   1e2a0:	4608      	mov	r0, r1
   1e2a2:	6023      	str	r3, [r4, #0]
   1e2a4:	f7e2 fa30 	bl	708 <_isatty>
   1e2a8:	1c43      	adds	r3, r0, #1
   1e2aa:	d000      	beq.n	1e2ae <_isatty_r+0x16>
   1e2ac:	bd38      	pop	{r3, r4, r5, pc}
   1e2ae:	6823      	ldr	r3, [r4, #0]
   1e2b0:	2b00      	cmp	r3, #0
   1e2b2:	d0fb      	beq.n	1e2ac <_isatty_r+0x14>
   1e2b4:	602b      	str	r3, [r5, #0]
   1e2b6:	bd38      	pop	{r3, r4, r5, pc}
   1e2b8:	2001b0cc 	.word	0x2001b0cc

0001e2bc <_localeconv_r>:
   1e2bc:	4a04      	ldr	r2, [pc, #16]	; (1e2d0 <_localeconv_r+0x14>)
   1e2be:	4b05      	ldr	r3, [pc, #20]	; (1e2d4 <_localeconv_r+0x18>)
   1e2c0:	6812      	ldr	r2, [r2, #0]
   1e2c2:	6b50      	ldr	r0, [r2, #52]	; 0x34
   1e2c4:	2800      	cmp	r0, #0
   1e2c6:	bf08      	it	eq
   1e2c8:	4618      	moveq	r0, r3
   1e2ca:	30f0      	adds	r0, #240	; 0xf0
   1e2cc:	4770      	bx	lr
   1e2ce:	bf00      	nop
   1e2d0:	20000020 	.word	0x20000020
   1e2d4:	20000450 	.word	0x20000450

0001e2d8 <_lseek_r>:
   1e2d8:	b570      	push	{r4, r5, r6, lr}
   1e2da:	460d      	mov	r5, r1
   1e2dc:	4c08      	ldr	r4, [pc, #32]	; (1e300 <_lseek_r+0x28>)
   1e2de:	4611      	mov	r1, r2
   1e2e0:	4606      	mov	r6, r0
   1e2e2:	461a      	mov	r2, r3
   1e2e4:	4628      	mov	r0, r5
   1e2e6:	2300      	movs	r3, #0
   1e2e8:	6023      	str	r3, [r4, #0]
   1e2ea:	f7e2 fa0f 	bl	70c <_lseek>
   1e2ee:	1c43      	adds	r3, r0, #1
   1e2f0:	d000      	beq.n	1e2f4 <_lseek_r+0x1c>
   1e2f2:	bd70      	pop	{r4, r5, r6, pc}
   1e2f4:	6823      	ldr	r3, [r4, #0]
   1e2f6:	2b00      	cmp	r3, #0
   1e2f8:	d0fb      	beq.n	1e2f2 <_lseek_r+0x1a>
   1e2fa:	6033      	str	r3, [r6, #0]
   1e2fc:	bd70      	pop	{r4, r5, r6, pc}
   1e2fe:	bf00      	nop
   1e300:	2001b0cc 	.word	0x2001b0cc

0001e304 <_Balloc>:
   1e304:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1e306:	b570      	push	{r4, r5, r6, lr}
   1e308:	4605      	mov	r5, r0
   1e30a:	460c      	mov	r4, r1
   1e30c:	b14b      	cbz	r3, 1e322 <_Balloc+0x1e>
   1e30e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1e312:	b180      	cbz	r0, 1e336 <_Balloc+0x32>
   1e314:	6802      	ldr	r2, [r0, #0]
   1e316:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   1e31a:	2300      	movs	r3, #0
   1e31c:	6103      	str	r3, [r0, #16]
   1e31e:	60c3      	str	r3, [r0, #12]
   1e320:	bd70      	pop	{r4, r5, r6, pc}
   1e322:	2221      	movs	r2, #33	; 0x21
   1e324:	2104      	movs	r1, #4
   1e326:	f000 fb7b 	bl	1ea20 <_calloc_r>
   1e32a:	64e8      	str	r0, [r5, #76]	; 0x4c
   1e32c:	4603      	mov	r3, r0
   1e32e:	2800      	cmp	r0, #0
   1e330:	d1ed      	bne.n	1e30e <_Balloc+0xa>
   1e332:	2000      	movs	r0, #0
   1e334:	bd70      	pop	{r4, r5, r6, pc}
   1e336:	2101      	movs	r1, #1
   1e338:	fa01 f604 	lsl.w	r6, r1, r4
   1e33c:	1d72      	adds	r2, r6, #5
   1e33e:	4628      	mov	r0, r5
   1e340:	0092      	lsls	r2, r2, #2
   1e342:	f000 fb6d 	bl	1ea20 <_calloc_r>
   1e346:	2800      	cmp	r0, #0
   1e348:	d0f3      	beq.n	1e332 <_Balloc+0x2e>
   1e34a:	6044      	str	r4, [r0, #4]
   1e34c:	6086      	str	r6, [r0, #8]
   1e34e:	e7e4      	b.n	1e31a <_Balloc+0x16>

0001e350 <_Bfree>:
   1e350:	b131      	cbz	r1, 1e360 <_Bfree+0x10>
   1e352:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1e354:	684a      	ldr	r2, [r1, #4]
   1e356:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1e35a:	6008      	str	r0, [r1, #0]
   1e35c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   1e360:	4770      	bx	lr
   1e362:	bf00      	nop

0001e364 <__multadd>:
   1e364:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e366:	690c      	ldr	r4, [r1, #16]
   1e368:	b083      	sub	sp, #12
   1e36a:	460d      	mov	r5, r1
   1e36c:	4606      	mov	r6, r0
   1e36e:	f101 0e14 	add.w	lr, r1, #20
   1e372:	2700      	movs	r7, #0
   1e374:	f8de 0000 	ldr.w	r0, [lr]
   1e378:	b281      	uxth	r1, r0
   1e37a:	fb02 3301 	mla	r3, r2, r1, r3
   1e37e:	0c01      	lsrs	r1, r0, #16
   1e380:	0c18      	lsrs	r0, r3, #16
   1e382:	fb02 0101 	mla	r1, r2, r1, r0
   1e386:	b29b      	uxth	r3, r3
   1e388:	3701      	adds	r7, #1
   1e38a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   1e38e:	42bc      	cmp	r4, r7
   1e390:	f84e 3b04 	str.w	r3, [lr], #4
   1e394:	ea4f 4311 	mov.w	r3, r1, lsr #16
   1e398:	dcec      	bgt.n	1e374 <__multadd+0x10>
   1e39a:	b13b      	cbz	r3, 1e3ac <__multadd+0x48>
   1e39c:	68aa      	ldr	r2, [r5, #8]
   1e39e:	4294      	cmp	r4, r2
   1e3a0:	da07      	bge.n	1e3b2 <__multadd+0x4e>
   1e3a2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   1e3a6:	3401      	adds	r4, #1
   1e3a8:	6153      	str	r3, [r2, #20]
   1e3aa:	612c      	str	r4, [r5, #16]
   1e3ac:	4628      	mov	r0, r5
   1e3ae:	b003      	add	sp, #12
   1e3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e3b2:	6869      	ldr	r1, [r5, #4]
   1e3b4:	9301      	str	r3, [sp, #4]
   1e3b6:	3101      	adds	r1, #1
   1e3b8:	4630      	mov	r0, r6
   1e3ba:	f7ff ffa3 	bl	1e304 <_Balloc>
   1e3be:	692a      	ldr	r2, [r5, #16]
   1e3c0:	3202      	adds	r2, #2
   1e3c2:	f105 010c 	add.w	r1, r5, #12
   1e3c6:	4607      	mov	r7, r0
   1e3c8:	0092      	lsls	r2, r2, #2
   1e3ca:	300c      	adds	r0, #12
   1e3cc:	f7f9 fea8 	bl	18120 <memcpy>
   1e3d0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   1e3d2:	6869      	ldr	r1, [r5, #4]
   1e3d4:	9b01      	ldr	r3, [sp, #4]
   1e3d6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1e3da:	6028      	str	r0, [r5, #0]
   1e3dc:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   1e3e0:	463d      	mov	r5, r7
   1e3e2:	e7de      	b.n	1e3a2 <__multadd+0x3e>

0001e3e4 <__hi0bits>:
   1e3e4:	0c02      	lsrs	r2, r0, #16
   1e3e6:	0412      	lsls	r2, r2, #16
   1e3e8:	4603      	mov	r3, r0
   1e3ea:	b9b2      	cbnz	r2, 1e41a <__hi0bits+0x36>
   1e3ec:	0403      	lsls	r3, r0, #16
   1e3ee:	2010      	movs	r0, #16
   1e3f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   1e3f4:	bf04      	itt	eq
   1e3f6:	021b      	lsleq	r3, r3, #8
   1e3f8:	3008      	addeq	r0, #8
   1e3fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   1e3fe:	bf04      	itt	eq
   1e400:	011b      	lsleq	r3, r3, #4
   1e402:	3004      	addeq	r0, #4
   1e404:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   1e408:	bf04      	itt	eq
   1e40a:	009b      	lsleq	r3, r3, #2
   1e40c:	3002      	addeq	r0, #2
   1e40e:	2b00      	cmp	r3, #0
   1e410:	db02      	blt.n	1e418 <__hi0bits+0x34>
   1e412:	005b      	lsls	r3, r3, #1
   1e414:	d403      	bmi.n	1e41e <__hi0bits+0x3a>
   1e416:	2020      	movs	r0, #32
   1e418:	4770      	bx	lr
   1e41a:	2000      	movs	r0, #0
   1e41c:	e7e8      	b.n	1e3f0 <__hi0bits+0xc>
   1e41e:	3001      	adds	r0, #1
   1e420:	4770      	bx	lr
   1e422:	bf00      	nop

0001e424 <__lo0bits>:
   1e424:	6803      	ldr	r3, [r0, #0]
   1e426:	f013 0207 	ands.w	r2, r3, #7
   1e42a:	4601      	mov	r1, r0
   1e42c:	d007      	beq.n	1e43e <__lo0bits+0x1a>
   1e42e:	07da      	lsls	r2, r3, #31
   1e430:	d421      	bmi.n	1e476 <__lo0bits+0x52>
   1e432:	0798      	lsls	r0, r3, #30
   1e434:	d421      	bmi.n	1e47a <__lo0bits+0x56>
   1e436:	089b      	lsrs	r3, r3, #2
   1e438:	600b      	str	r3, [r1, #0]
   1e43a:	2002      	movs	r0, #2
   1e43c:	4770      	bx	lr
   1e43e:	b298      	uxth	r0, r3
   1e440:	b198      	cbz	r0, 1e46a <__lo0bits+0x46>
   1e442:	4610      	mov	r0, r2
   1e444:	f013 0fff 	tst.w	r3, #255	; 0xff
   1e448:	bf04      	itt	eq
   1e44a:	0a1b      	lsreq	r3, r3, #8
   1e44c:	3008      	addeq	r0, #8
   1e44e:	071a      	lsls	r2, r3, #28
   1e450:	bf04      	itt	eq
   1e452:	091b      	lsreq	r3, r3, #4
   1e454:	3004      	addeq	r0, #4
   1e456:	079a      	lsls	r2, r3, #30
   1e458:	bf04      	itt	eq
   1e45a:	089b      	lsreq	r3, r3, #2
   1e45c:	3002      	addeq	r0, #2
   1e45e:	07da      	lsls	r2, r3, #31
   1e460:	d407      	bmi.n	1e472 <__lo0bits+0x4e>
   1e462:	085b      	lsrs	r3, r3, #1
   1e464:	d104      	bne.n	1e470 <__lo0bits+0x4c>
   1e466:	2020      	movs	r0, #32
   1e468:	4770      	bx	lr
   1e46a:	0c1b      	lsrs	r3, r3, #16
   1e46c:	2010      	movs	r0, #16
   1e46e:	e7e9      	b.n	1e444 <__lo0bits+0x20>
   1e470:	3001      	adds	r0, #1
   1e472:	600b      	str	r3, [r1, #0]
   1e474:	4770      	bx	lr
   1e476:	2000      	movs	r0, #0
   1e478:	4770      	bx	lr
   1e47a:	085b      	lsrs	r3, r3, #1
   1e47c:	600b      	str	r3, [r1, #0]
   1e47e:	2001      	movs	r0, #1
   1e480:	4770      	bx	lr
   1e482:	bf00      	nop

0001e484 <__i2b>:
   1e484:	b510      	push	{r4, lr}
   1e486:	460c      	mov	r4, r1
   1e488:	2101      	movs	r1, #1
   1e48a:	f7ff ff3b 	bl	1e304 <_Balloc>
   1e48e:	2201      	movs	r2, #1
   1e490:	6144      	str	r4, [r0, #20]
   1e492:	6102      	str	r2, [r0, #16]
   1e494:	bd10      	pop	{r4, pc}
   1e496:	bf00      	nop

0001e498 <__multiply>:
   1e498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e49c:	690c      	ldr	r4, [r1, #16]
   1e49e:	6915      	ldr	r5, [r2, #16]
   1e4a0:	42ac      	cmp	r4, r5
   1e4a2:	b083      	sub	sp, #12
   1e4a4:	468b      	mov	fp, r1
   1e4a6:	4616      	mov	r6, r2
   1e4a8:	da04      	bge.n	1e4b4 <__multiply+0x1c>
   1e4aa:	4622      	mov	r2, r4
   1e4ac:	46b3      	mov	fp, r6
   1e4ae:	462c      	mov	r4, r5
   1e4b0:	460e      	mov	r6, r1
   1e4b2:	4615      	mov	r5, r2
   1e4b4:	f8db 3008 	ldr.w	r3, [fp, #8]
   1e4b8:	f8db 1004 	ldr.w	r1, [fp, #4]
   1e4bc:	eb04 0805 	add.w	r8, r4, r5
   1e4c0:	4598      	cmp	r8, r3
   1e4c2:	bfc8      	it	gt
   1e4c4:	3101      	addgt	r1, #1
   1e4c6:	f7ff ff1d 	bl	1e304 <_Balloc>
   1e4ca:	f100 0914 	add.w	r9, r0, #20
   1e4ce:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   1e4d2:	45d1      	cmp	r9, sl
   1e4d4:	9000      	str	r0, [sp, #0]
   1e4d6:	d205      	bcs.n	1e4e4 <__multiply+0x4c>
   1e4d8:	464b      	mov	r3, r9
   1e4da:	2100      	movs	r1, #0
   1e4dc:	f843 1b04 	str.w	r1, [r3], #4
   1e4e0:	459a      	cmp	sl, r3
   1e4e2:	d8fb      	bhi.n	1e4dc <__multiply+0x44>
   1e4e4:	f106 0c14 	add.w	ip, r6, #20
   1e4e8:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   1e4ec:	f10b 0b14 	add.w	fp, fp, #20
   1e4f0:	459c      	cmp	ip, r3
   1e4f2:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   1e4f6:	d24c      	bcs.n	1e592 <__multiply+0xfa>
   1e4f8:	f8cd a004 	str.w	sl, [sp, #4]
   1e4fc:	469a      	mov	sl, r3
   1e4fe:	f8dc 5000 	ldr.w	r5, [ip]
   1e502:	b2af      	uxth	r7, r5
   1e504:	b1ef      	cbz	r7, 1e542 <__multiply+0xaa>
   1e506:	2100      	movs	r1, #0
   1e508:	464d      	mov	r5, r9
   1e50a:	465e      	mov	r6, fp
   1e50c:	460c      	mov	r4, r1
   1e50e:	f856 2b04 	ldr.w	r2, [r6], #4
   1e512:	6828      	ldr	r0, [r5, #0]
   1e514:	b293      	uxth	r3, r2
   1e516:	b281      	uxth	r1, r0
   1e518:	fb07 1303 	mla	r3, r7, r3, r1
   1e51c:	0c12      	lsrs	r2, r2, #16
   1e51e:	0c01      	lsrs	r1, r0, #16
   1e520:	4423      	add	r3, r4
   1e522:	fb07 1102 	mla	r1, r7, r2, r1
   1e526:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   1e52a:	b29b      	uxth	r3, r3
   1e52c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1e530:	45b6      	cmp	lr, r6
   1e532:	f845 3b04 	str.w	r3, [r5], #4
   1e536:	ea4f 4411 	mov.w	r4, r1, lsr #16
   1e53a:	d8e8      	bhi.n	1e50e <__multiply+0x76>
   1e53c:	602c      	str	r4, [r5, #0]
   1e53e:	f8dc 5000 	ldr.w	r5, [ip]
   1e542:	0c2d      	lsrs	r5, r5, #16
   1e544:	d01d      	beq.n	1e582 <__multiply+0xea>
   1e546:	f8d9 3000 	ldr.w	r3, [r9]
   1e54a:	4648      	mov	r0, r9
   1e54c:	461c      	mov	r4, r3
   1e54e:	4659      	mov	r1, fp
   1e550:	2200      	movs	r2, #0
   1e552:	880e      	ldrh	r6, [r1, #0]
   1e554:	0c24      	lsrs	r4, r4, #16
   1e556:	fb05 4406 	mla	r4, r5, r6, r4
   1e55a:	4422      	add	r2, r4
   1e55c:	b29b      	uxth	r3, r3
   1e55e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1e562:	f840 3b04 	str.w	r3, [r0], #4
   1e566:	f851 3b04 	ldr.w	r3, [r1], #4
   1e56a:	6804      	ldr	r4, [r0, #0]
   1e56c:	0c1b      	lsrs	r3, r3, #16
   1e56e:	b2a6      	uxth	r6, r4
   1e570:	fb05 6303 	mla	r3, r5, r3, r6
   1e574:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   1e578:	458e      	cmp	lr, r1
   1e57a:	ea4f 4213 	mov.w	r2, r3, lsr #16
   1e57e:	d8e8      	bhi.n	1e552 <__multiply+0xba>
   1e580:	6003      	str	r3, [r0, #0]
   1e582:	f10c 0c04 	add.w	ip, ip, #4
   1e586:	45e2      	cmp	sl, ip
   1e588:	f109 0904 	add.w	r9, r9, #4
   1e58c:	d8b7      	bhi.n	1e4fe <__multiply+0x66>
   1e58e:	f8dd a004 	ldr.w	sl, [sp, #4]
   1e592:	f1b8 0f00 	cmp.w	r8, #0
   1e596:	dd0b      	ble.n	1e5b0 <__multiply+0x118>
   1e598:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   1e59c:	f1aa 0a04 	sub.w	sl, sl, #4
   1e5a0:	b11b      	cbz	r3, 1e5aa <__multiply+0x112>
   1e5a2:	e005      	b.n	1e5b0 <__multiply+0x118>
   1e5a4:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   1e5a8:	b913      	cbnz	r3, 1e5b0 <__multiply+0x118>
   1e5aa:	f1b8 0801 	subs.w	r8, r8, #1
   1e5ae:	d1f9      	bne.n	1e5a4 <__multiply+0x10c>
   1e5b0:	9800      	ldr	r0, [sp, #0]
   1e5b2:	f8c0 8010 	str.w	r8, [r0, #16]
   1e5b6:	b003      	add	sp, #12
   1e5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001e5bc <__pow5mult>:
   1e5bc:	f012 0303 	ands.w	r3, r2, #3
   1e5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e5c4:	4614      	mov	r4, r2
   1e5c6:	4607      	mov	r7, r0
   1e5c8:	d12e      	bne.n	1e628 <__pow5mult+0x6c>
   1e5ca:	460d      	mov	r5, r1
   1e5cc:	10a4      	asrs	r4, r4, #2
   1e5ce:	d01c      	beq.n	1e60a <__pow5mult+0x4e>
   1e5d0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   1e5d2:	b396      	cbz	r6, 1e63a <__pow5mult+0x7e>
   1e5d4:	07e3      	lsls	r3, r4, #31
   1e5d6:	f04f 0800 	mov.w	r8, #0
   1e5da:	d406      	bmi.n	1e5ea <__pow5mult+0x2e>
   1e5dc:	1064      	asrs	r4, r4, #1
   1e5de:	d014      	beq.n	1e60a <__pow5mult+0x4e>
   1e5e0:	6830      	ldr	r0, [r6, #0]
   1e5e2:	b1a8      	cbz	r0, 1e610 <__pow5mult+0x54>
   1e5e4:	4606      	mov	r6, r0
   1e5e6:	07e3      	lsls	r3, r4, #31
   1e5e8:	d5f8      	bpl.n	1e5dc <__pow5mult+0x20>
   1e5ea:	4632      	mov	r2, r6
   1e5ec:	4629      	mov	r1, r5
   1e5ee:	4638      	mov	r0, r7
   1e5f0:	f7ff ff52 	bl	1e498 <__multiply>
   1e5f4:	b1b5      	cbz	r5, 1e624 <__pow5mult+0x68>
   1e5f6:	686a      	ldr	r2, [r5, #4]
   1e5f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1e5fa:	1064      	asrs	r4, r4, #1
   1e5fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1e600:	6029      	str	r1, [r5, #0]
   1e602:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   1e606:	4605      	mov	r5, r0
   1e608:	d1ea      	bne.n	1e5e0 <__pow5mult+0x24>
   1e60a:	4628      	mov	r0, r5
   1e60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e610:	4632      	mov	r2, r6
   1e612:	4631      	mov	r1, r6
   1e614:	4638      	mov	r0, r7
   1e616:	f7ff ff3f 	bl	1e498 <__multiply>
   1e61a:	6030      	str	r0, [r6, #0]
   1e61c:	f8c0 8000 	str.w	r8, [r0]
   1e620:	4606      	mov	r6, r0
   1e622:	e7e0      	b.n	1e5e6 <__pow5mult+0x2a>
   1e624:	4605      	mov	r5, r0
   1e626:	e7d9      	b.n	1e5dc <__pow5mult+0x20>
   1e628:	1e5a      	subs	r2, r3, #1
   1e62a:	4d0b      	ldr	r5, [pc, #44]	; (1e658 <__pow5mult+0x9c>)
   1e62c:	2300      	movs	r3, #0
   1e62e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   1e632:	f7ff fe97 	bl	1e364 <__multadd>
   1e636:	4605      	mov	r5, r0
   1e638:	e7c8      	b.n	1e5cc <__pow5mult+0x10>
   1e63a:	2101      	movs	r1, #1
   1e63c:	4638      	mov	r0, r7
   1e63e:	f7ff fe61 	bl	1e304 <_Balloc>
   1e642:	f240 2171 	movw	r1, #625	; 0x271
   1e646:	2201      	movs	r2, #1
   1e648:	2300      	movs	r3, #0
   1e64a:	6141      	str	r1, [r0, #20]
   1e64c:	6102      	str	r2, [r0, #16]
   1e64e:	4606      	mov	r6, r0
   1e650:	64b8      	str	r0, [r7, #72]	; 0x48
   1e652:	6003      	str	r3, [r0, #0]
   1e654:	e7be      	b.n	1e5d4 <__pow5mult+0x18>
   1e656:	bf00      	nop
   1e658:	0003ed10 	.word	0x0003ed10

0001e65c <__lshift>:
   1e65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e660:	4691      	mov	r9, r2
   1e662:	690a      	ldr	r2, [r1, #16]
   1e664:	688b      	ldr	r3, [r1, #8]
   1e666:	ea4f 1469 	mov.w	r4, r9, asr #5
   1e66a:	eb04 0802 	add.w	r8, r4, r2
   1e66e:	f108 0501 	add.w	r5, r8, #1
   1e672:	429d      	cmp	r5, r3
   1e674:	460e      	mov	r6, r1
   1e676:	4607      	mov	r7, r0
   1e678:	6849      	ldr	r1, [r1, #4]
   1e67a:	dd04      	ble.n	1e686 <__lshift+0x2a>
   1e67c:	005b      	lsls	r3, r3, #1
   1e67e:	429d      	cmp	r5, r3
   1e680:	f101 0101 	add.w	r1, r1, #1
   1e684:	dcfa      	bgt.n	1e67c <__lshift+0x20>
   1e686:	4638      	mov	r0, r7
   1e688:	f7ff fe3c 	bl	1e304 <_Balloc>
   1e68c:	2c00      	cmp	r4, #0
   1e68e:	f100 0314 	add.w	r3, r0, #20
   1e692:	dd06      	ble.n	1e6a2 <__lshift+0x46>
   1e694:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   1e698:	2100      	movs	r1, #0
   1e69a:	f843 1b04 	str.w	r1, [r3], #4
   1e69e:	429a      	cmp	r2, r3
   1e6a0:	d1fb      	bne.n	1e69a <__lshift+0x3e>
   1e6a2:	6934      	ldr	r4, [r6, #16]
   1e6a4:	f106 0114 	add.w	r1, r6, #20
   1e6a8:	f019 091f 	ands.w	r9, r9, #31
   1e6ac:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   1e6b0:	d01d      	beq.n	1e6ee <__lshift+0x92>
   1e6b2:	f1c9 0c20 	rsb	ip, r9, #32
   1e6b6:	2200      	movs	r2, #0
   1e6b8:	680c      	ldr	r4, [r1, #0]
   1e6ba:	fa04 f409 	lsl.w	r4, r4, r9
   1e6be:	4314      	orrs	r4, r2
   1e6c0:	f843 4b04 	str.w	r4, [r3], #4
   1e6c4:	f851 2b04 	ldr.w	r2, [r1], #4
   1e6c8:	458e      	cmp	lr, r1
   1e6ca:	fa22 f20c 	lsr.w	r2, r2, ip
   1e6ce:	d8f3      	bhi.n	1e6b8 <__lshift+0x5c>
   1e6d0:	601a      	str	r2, [r3, #0]
   1e6d2:	b10a      	cbz	r2, 1e6d8 <__lshift+0x7c>
   1e6d4:	f108 0502 	add.w	r5, r8, #2
   1e6d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1e6da:	6872      	ldr	r2, [r6, #4]
   1e6dc:	3d01      	subs	r5, #1
   1e6de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1e6e2:	6105      	str	r5, [r0, #16]
   1e6e4:	6031      	str	r1, [r6, #0]
   1e6e6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   1e6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e6ee:	3b04      	subs	r3, #4
   1e6f0:	f851 2b04 	ldr.w	r2, [r1], #4
   1e6f4:	f843 2f04 	str.w	r2, [r3, #4]!
   1e6f8:	458e      	cmp	lr, r1
   1e6fa:	d8f9      	bhi.n	1e6f0 <__lshift+0x94>
   1e6fc:	e7ec      	b.n	1e6d8 <__lshift+0x7c>
   1e6fe:	bf00      	nop

0001e700 <__mcmp>:
   1e700:	b430      	push	{r4, r5}
   1e702:	690b      	ldr	r3, [r1, #16]
   1e704:	4605      	mov	r5, r0
   1e706:	6900      	ldr	r0, [r0, #16]
   1e708:	1ac0      	subs	r0, r0, r3
   1e70a:	d10f      	bne.n	1e72c <__mcmp+0x2c>
   1e70c:	009b      	lsls	r3, r3, #2
   1e70e:	3514      	adds	r5, #20
   1e710:	3114      	adds	r1, #20
   1e712:	4419      	add	r1, r3
   1e714:	442b      	add	r3, r5
   1e716:	e001      	b.n	1e71c <__mcmp+0x1c>
   1e718:	429d      	cmp	r5, r3
   1e71a:	d207      	bcs.n	1e72c <__mcmp+0x2c>
   1e71c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   1e720:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   1e724:	4294      	cmp	r4, r2
   1e726:	d0f7      	beq.n	1e718 <__mcmp+0x18>
   1e728:	d302      	bcc.n	1e730 <__mcmp+0x30>
   1e72a:	2001      	movs	r0, #1
   1e72c:	bc30      	pop	{r4, r5}
   1e72e:	4770      	bx	lr
   1e730:	f04f 30ff 	mov.w	r0, #4294967295
   1e734:	e7fa      	b.n	1e72c <__mcmp+0x2c>
   1e736:	bf00      	nop

0001e738 <__mdiff>:
   1e738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e73c:	690f      	ldr	r7, [r1, #16]
   1e73e:	460e      	mov	r6, r1
   1e740:	6911      	ldr	r1, [r2, #16]
   1e742:	1a7f      	subs	r7, r7, r1
   1e744:	2f00      	cmp	r7, #0
   1e746:	4690      	mov	r8, r2
   1e748:	d117      	bne.n	1e77a <__mdiff+0x42>
   1e74a:	0089      	lsls	r1, r1, #2
   1e74c:	f106 0514 	add.w	r5, r6, #20
   1e750:	f102 0e14 	add.w	lr, r2, #20
   1e754:	186b      	adds	r3, r5, r1
   1e756:	4471      	add	r1, lr
   1e758:	e001      	b.n	1e75e <__mdiff+0x26>
   1e75a:	429d      	cmp	r5, r3
   1e75c:	d25c      	bcs.n	1e818 <__mdiff+0xe0>
   1e75e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1e762:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   1e766:	42a2      	cmp	r2, r4
   1e768:	d0f7      	beq.n	1e75a <__mdiff+0x22>
   1e76a:	d25e      	bcs.n	1e82a <__mdiff+0xf2>
   1e76c:	4633      	mov	r3, r6
   1e76e:	462c      	mov	r4, r5
   1e770:	4646      	mov	r6, r8
   1e772:	4675      	mov	r5, lr
   1e774:	4698      	mov	r8, r3
   1e776:	2701      	movs	r7, #1
   1e778:	e005      	b.n	1e786 <__mdiff+0x4e>
   1e77a:	db58      	blt.n	1e82e <__mdiff+0xf6>
   1e77c:	f106 0514 	add.w	r5, r6, #20
   1e780:	f108 0414 	add.w	r4, r8, #20
   1e784:	2700      	movs	r7, #0
   1e786:	6871      	ldr	r1, [r6, #4]
   1e788:	f7ff fdbc 	bl	1e304 <_Balloc>
   1e78c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1e790:	6936      	ldr	r6, [r6, #16]
   1e792:	60c7      	str	r7, [r0, #12]
   1e794:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   1e798:	46a6      	mov	lr, r4
   1e79a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   1e79e:	f100 0414 	add.w	r4, r0, #20
   1e7a2:	2300      	movs	r3, #0
   1e7a4:	f85e 1b04 	ldr.w	r1, [lr], #4
   1e7a8:	f855 8b04 	ldr.w	r8, [r5], #4
   1e7ac:	b28a      	uxth	r2, r1
   1e7ae:	fa13 f388 	uxtah	r3, r3, r8
   1e7b2:	0c09      	lsrs	r1, r1, #16
   1e7b4:	1a9a      	subs	r2, r3, r2
   1e7b6:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   1e7ba:	eb03 4322 	add.w	r3, r3, r2, asr #16
   1e7be:	b292      	uxth	r2, r2
   1e7c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   1e7c4:	45f4      	cmp	ip, lr
   1e7c6:	f844 2b04 	str.w	r2, [r4], #4
   1e7ca:	ea4f 4323 	mov.w	r3, r3, asr #16
   1e7ce:	d8e9      	bhi.n	1e7a4 <__mdiff+0x6c>
   1e7d0:	42af      	cmp	r7, r5
   1e7d2:	d917      	bls.n	1e804 <__mdiff+0xcc>
   1e7d4:	46a4      	mov	ip, r4
   1e7d6:	46ae      	mov	lr, r5
   1e7d8:	f85e 2b04 	ldr.w	r2, [lr], #4
   1e7dc:	fa13 f382 	uxtah	r3, r3, r2
   1e7e0:	1419      	asrs	r1, r3, #16
   1e7e2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   1e7e6:	b29b      	uxth	r3, r3
   1e7e8:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   1e7ec:	4577      	cmp	r7, lr
   1e7ee:	f84c 2b04 	str.w	r2, [ip], #4
   1e7f2:	ea4f 4321 	mov.w	r3, r1, asr #16
   1e7f6:	d8ef      	bhi.n	1e7d8 <__mdiff+0xa0>
   1e7f8:	43ed      	mvns	r5, r5
   1e7fa:	442f      	add	r7, r5
   1e7fc:	f027 0703 	bic.w	r7, r7, #3
   1e800:	3704      	adds	r7, #4
   1e802:	443c      	add	r4, r7
   1e804:	3c04      	subs	r4, #4
   1e806:	b922      	cbnz	r2, 1e812 <__mdiff+0xda>
   1e808:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   1e80c:	3e01      	subs	r6, #1
   1e80e:	2b00      	cmp	r3, #0
   1e810:	d0fa      	beq.n	1e808 <__mdiff+0xd0>
   1e812:	6106      	str	r6, [r0, #16]
   1e814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e818:	2100      	movs	r1, #0
   1e81a:	f7ff fd73 	bl	1e304 <_Balloc>
   1e81e:	2201      	movs	r2, #1
   1e820:	2300      	movs	r3, #0
   1e822:	6102      	str	r2, [r0, #16]
   1e824:	6143      	str	r3, [r0, #20]
   1e826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e82a:	4674      	mov	r4, lr
   1e82c:	e7ab      	b.n	1e786 <__mdiff+0x4e>
   1e82e:	4633      	mov	r3, r6
   1e830:	f106 0414 	add.w	r4, r6, #20
   1e834:	f102 0514 	add.w	r5, r2, #20
   1e838:	4616      	mov	r6, r2
   1e83a:	2701      	movs	r7, #1
   1e83c:	4698      	mov	r8, r3
   1e83e:	e7a2      	b.n	1e786 <__mdiff+0x4e>

0001e840 <__d2b>:
   1e840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e844:	b082      	sub	sp, #8
   1e846:	2101      	movs	r1, #1
   1e848:	461c      	mov	r4, r3
   1e84a:	f3c3 570a 	ubfx	r7, r3, #20, #11
   1e84e:	4615      	mov	r5, r2
   1e850:	9e08      	ldr	r6, [sp, #32]
   1e852:	f7ff fd57 	bl	1e304 <_Balloc>
   1e856:	f3c4 0413 	ubfx	r4, r4, #0, #20
   1e85a:	4680      	mov	r8, r0
   1e85c:	b10f      	cbz	r7, 1e862 <__d2b+0x22>
   1e85e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   1e862:	9401      	str	r4, [sp, #4]
   1e864:	b31d      	cbz	r5, 1e8ae <__d2b+0x6e>
   1e866:	a802      	add	r0, sp, #8
   1e868:	f840 5d08 	str.w	r5, [r0, #-8]!
   1e86c:	f7ff fdda 	bl	1e424 <__lo0bits>
   1e870:	2800      	cmp	r0, #0
   1e872:	d134      	bne.n	1e8de <__d2b+0x9e>
   1e874:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1e878:	f8c8 2014 	str.w	r2, [r8, #20]
   1e87c:	2b00      	cmp	r3, #0
   1e87e:	bf0c      	ite	eq
   1e880:	2101      	moveq	r1, #1
   1e882:	2102      	movne	r1, #2
   1e884:	f8c8 3018 	str.w	r3, [r8, #24]
   1e888:	f8c8 1010 	str.w	r1, [r8, #16]
   1e88c:	b9df      	cbnz	r7, 1e8c6 <__d2b+0x86>
   1e88e:	eb08 0381 	add.w	r3, r8, r1, lsl #2
   1e892:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   1e896:	6030      	str	r0, [r6, #0]
   1e898:	6918      	ldr	r0, [r3, #16]
   1e89a:	f7ff fda3 	bl	1e3e4 <__hi0bits>
   1e89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e8a0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   1e8a4:	6018      	str	r0, [r3, #0]
   1e8a6:	4640      	mov	r0, r8
   1e8a8:	b002      	add	sp, #8
   1e8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e8ae:	a801      	add	r0, sp, #4
   1e8b0:	f7ff fdb8 	bl	1e424 <__lo0bits>
   1e8b4:	9b01      	ldr	r3, [sp, #4]
   1e8b6:	f8c8 3014 	str.w	r3, [r8, #20]
   1e8ba:	2101      	movs	r1, #1
   1e8bc:	3020      	adds	r0, #32
   1e8be:	f8c8 1010 	str.w	r1, [r8, #16]
   1e8c2:	2f00      	cmp	r7, #0
   1e8c4:	d0e3      	beq.n	1e88e <__d2b+0x4e>
   1e8c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e8c8:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
   1e8cc:	4407      	add	r7, r0
   1e8ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   1e8d2:	6037      	str	r7, [r6, #0]
   1e8d4:	6018      	str	r0, [r3, #0]
   1e8d6:	4640      	mov	r0, r8
   1e8d8:	b002      	add	sp, #8
   1e8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e8de:	e89d 000a 	ldmia.w	sp, {r1, r3}
   1e8e2:	f1c0 0220 	rsb	r2, r0, #32
   1e8e6:	fa03 f202 	lsl.w	r2, r3, r2
   1e8ea:	430a      	orrs	r2, r1
   1e8ec:	40c3      	lsrs	r3, r0
   1e8ee:	9301      	str	r3, [sp, #4]
   1e8f0:	f8c8 2014 	str.w	r2, [r8, #20]
   1e8f4:	e7c2      	b.n	1e87c <__d2b+0x3c>
   1e8f6:	bf00      	nop

0001e8f8 <_read_r>:
   1e8f8:	b570      	push	{r4, r5, r6, lr}
   1e8fa:	460d      	mov	r5, r1
   1e8fc:	4c08      	ldr	r4, [pc, #32]	; (1e920 <_read_r+0x28>)
   1e8fe:	4611      	mov	r1, r2
   1e900:	4606      	mov	r6, r0
   1e902:	461a      	mov	r2, r3
   1e904:	4628      	mov	r0, r5
   1e906:	2300      	movs	r3, #0
   1e908:	6023      	str	r3, [r4, #0]
   1e90a:	f7e1 fee1 	bl	6d0 <_read>
   1e90e:	1c43      	adds	r3, r0, #1
   1e910:	d000      	beq.n	1e914 <_read_r+0x1c>
   1e912:	bd70      	pop	{r4, r5, r6, pc}
   1e914:	6823      	ldr	r3, [r4, #0]
   1e916:	2b00      	cmp	r3, #0
   1e918:	d0fb      	beq.n	1e912 <_read_r+0x1a>
   1e91a:	6033      	str	r3, [r6, #0]
   1e91c:	bd70      	pop	{r4, r5, r6, pc}
   1e91e:	bf00      	nop
   1e920:	2001b0cc 	.word	0x2001b0cc

0001e924 <__ssprint_r>:
   1e924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e928:	6893      	ldr	r3, [r2, #8]
   1e92a:	b083      	sub	sp, #12
   1e92c:	4690      	mov	r8, r2
   1e92e:	2b00      	cmp	r3, #0
   1e930:	d070      	beq.n	1ea14 <__ssprint_r+0xf0>
   1e932:	4682      	mov	sl, r0
   1e934:	460c      	mov	r4, r1
   1e936:	6817      	ldr	r7, [r2, #0]
   1e938:	688d      	ldr	r5, [r1, #8]
   1e93a:	6808      	ldr	r0, [r1, #0]
   1e93c:	e042      	b.n	1e9c4 <__ssprint_r+0xa0>
   1e93e:	89a3      	ldrh	r3, [r4, #12]
   1e940:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1e944:	d02e      	beq.n	1e9a4 <__ssprint_r+0x80>
   1e946:	6965      	ldr	r5, [r4, #20]
   1e948:	6921      	ldr	r1, [r4, #16]
   1e94a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1e94e:	eba0 0b01 	sub.w	fp, r0, r1
   1e952:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1e956:	f10b 0001 	add.w	r0, fp, #1
   1e95a:	106d      	asrs	r5, r5, #1
   1e95c:	4430      	add	r0, r6
   1e95e:	42a8      	cmp	r0, r5
   1e960:	462a      	mov	r2, r5
   1e962:	bf84      	itt	hi
   1e964:	4605      	movhi	r5, r0
   1e966:	462a      	movhi	r2, r5
   1e968:	055b      	lsls	r3, r3, #21
   1e96a:	d538      	bpl.n	1e9de <__ssprint_r+0xba>
   1e96c:	4611      	mov	r1, r2
   1e96e:	4650      	mov	r0, sl
   1e970:	f7f9 f88a 	bl	17a88 <_malloc_r>
   1e974:	2800      	cmp	r0, #0
   1e976:	d03c      	beq.n	1e9f2 <__ssprint_r+0xce>
   1e978:	465a      	mov	r2, fp
   1e97a:	6921      	ldr	r1, [r4, #16]
   1e97c:	9001      	str	r0, [sp, #4]
   1e97e:	f7f9 fbcf 	bl	18120 <memcpy>
   1e982:	89a2      	ldrh	r2, [r4, #12]
   1e984:	9b01      	ldr	r3, [sp, #4]
   1e986:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1e98a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1e98e:	81a2      	strh	r2, [r4, #12]
   1e990:	eba5 020b 	sub.w	r2, r5, fp
   1e994:	eb03 000b 	add.w	r0, r3, fp
   1e998:	6165      	str	r5, [r4, #20]
   1e99a:	6123      	str	r3, [r4, #16]
   1e99c:	6020      	str	r0, [r4, #0]
   1e99e:	60a2      	str	r2, [r4, #8]
   1e9a0:	4635      	mov	r5, r6
   1e9a2:	46b3      	mov	fp, r6
   1e9a4:	465a      	mov	r2, fp
   1e9a6:	4649      	mov	r1, r9
   1e9a8:	f7f9 fc54 	bl	18254 <memmove>
   1e9ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1e9b0:	68a2      	ldr	r2, [r4, #8]
   1e9b2:	6820      	ldr	r0, [r4, #0]
   1e9b4:	1b55      	subs	r5, r2, r5
   1e9b6:	4458      	add	r0, fp
   1e9b8:	1b9e      	subs	r6, r3, r6
   1e9ba:	60a5      	str	r5, [r4, #8]
   1e9bc:	6020      	str	r0, [r4, #0]
   1e9be:	f8c8 6008 	str.w	r6, [r8, #8]
   1e9c2:	b33e      	cbz	r6, 1ea14 <__ssprint_r+0xf0>
   1e9c4:	687e      	ldr	r6, [r7, #4]
   1e9c6:	463b      	mov	r3, r7
   1e9c8:	3708      	adds	r7, #8
   1e9ca:	2e00      	cmp	r6, #0
   1e9cc:	d0fa      	beq.n	1e9c4 <__ssprint_r+0xa0>
   1e9ce:	42ae      	cmp	r6, r5
   1e9d0:	f8d3 9000 	ldr.w	r9, [r3]
   1e9d4:	46ab      	mov	fp, r5
   1e9d6:	d2b2      	bcs.n	1e93e <__ssprint_r+0x1a>
   1e9d8:	4635      	mov	r5, r6
   1e9da:	46b3      	mov	fp, r6
   1e9dc:	e7e2      	b.n	1e9a4 <__ssprint_r+0x80>
   1e9de:	4650      	mov	r0, sl
   1e9e0:	f7f9 fd4a 	bl	18478 <_realloc_r>
   1e9e4:	4603      	mov	r3, r0
   1e9e6:	2800      	cmp	r0, #0
   1e9e8:	d1d2      	bne.n	1e990 <__ssprint_r+0x6c>
   1e9ea:	6921      	ldr	r1, [r4, #16]
   1e9ec:	4650      	mov	r0, sl
   1e9ee:	f7ff fb43 	bl	1e078 <_free_r>
   1e9f2:	230c      	movs	r3, #12
   1e9f4:	f8ca 3000 	str.w	r3, [sl]
   1e9f8:	89a3      	ldrh	r3, [r4, #12]
   1e9fa:	2200      	movs	r2, #0
   1e9fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1ea00:	f04f 30ff 	mov.w	r0, #4294967295
   1ea04:	81a3      	strh	r3, [r4, #12]
   1ea06:	f8c8 2008 	str.w	r2, [r8, #8]
   1ea0a:	f8c8 2004 	str.w	r2, [r8, #4]
   1ea0e:	b003      	add	sp, #12
   1ea10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea14:	2000      	movs	r0, #0
   1ea16:	f8c8 0004 	str.w	r0, [r8, #4]
   1ea1a:	b003      	add	sp, #12
   1ea1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ea20 <_calloc_r>:
   1ea20:	b510      	push	{r4, lr}
   1ea22:	fb02 f101 	mul.w	r1, r2, r1
   1ea26:	f7f9 f82f 	bl	17a88 <_malloc_r>
   1ea2a:	4604      	mov	r4, r0
   1ea2c:	b1d8      	cbz	r0, 1ea66 <_calloc_r+0x46>
   1ea2e:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1ea32:	f022 0203 	bic.w	r2, r2, #3
   1ea36:	3a04      	subs	r2, #4
   1ea38:	2a24      	cmp	r2, #36	; 0x24
   1ea3a:	d818      	bhi.n	1ea6e <_calloc_r+0x4e>
   1ea3c:	2a13      	cmp	r2, #19
   1ea3e:	d914      	bls.n	1ea6a <_calloc_r+0x4a>
   1ea40:	2300      	movs	r3, #0
   1ea42:	2a1b      	cmp	r2, #27
   1ea44:	6003      	str	r3, [r0, #0]
   1ea46:	6043      	str	r3, [r0, #4]
   1ea48:	d916      	bls.n	1ea78 <_calloc_r+0x58>
   1ea4a:	2a24      	cmp	r2, #36	; 0x24
   1ea4c:	6083      	str	r3, [r0, #8]
   1ea4e:	60c3      	str	r3, [r0, #12]
   1ea50:	bf11      	iteee	ne
   1ea52:	f100 0210 	addne.w	r2, r0, #16
   1ea56:	6103      	streq	r3, [r0, #16]
   1ea58:	6143      	streq	r3, [r0, #20]
   1ea5a:	f100 0218 	addeq.w	r2, r0, #24
   1ea5e:	2300      	movs	r3, #0
   1ea60:	6013      	str	r3, [r2, #0]
   1ea62:	6053      	str	r3, [r2, #4]
   1ea64:	6093      	str	r3, [r2, #8]
   1ea66:	4620      	mov	r0, r4
   1ea68:	bd10      	pop	{r4, pc}
   1ea6a:	4602      	mov	r2, r0
   1ea6c:	e7f7      	b.n	1ea5e <_calloc_r+0x3e>
   1ea6e:	2100      	movs	r1, #0
   1ea70:	f7f9 fc54 	bl	1831c <memset>
   1ea74:	4620      	mov	r0, r4
   1ea76:	bd10      	pop	{r4, pc}
   1ea78:	f100 0208 	add.w	r2, r0, #8
   1ea7c:	e7ef      	b.n	1ea5e <_calloc_r+0x3e>
   1ea7e:	bf00      	nop

0001ea80 <_fclose_r>:
   1ea80:	b570      	push	{r4, r5, r6, lr}
   1ea82:	b159      	cbz	r1, 1ea9c <_fclose_r+0x1c>
   1ea84:	4605      	mov	r5, r0
   1ea86:	460c      	mov	r4, r1
   1ea88:	b110      	cbz	r0, 1ea90 <_fclose_r+0x10>
   1ea8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1ea8c:	2b00      	cmp	r3, #0
   1ea8e:	d03c      	beq.n	1eb0a <_fclose_r+0x8a>
   1ea90:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1ea92:	07d8      	lsls	r0, r3, #31
   1ea94:	d505      	bpl.n	1eaa2 <_fclose_r+0x22>
   1ea96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1ea9a:	b92b      	cbnz	r3, 1eaa8 <_fclose_r+0x28>
   1ea9c:	2600      	movs	r6, #0
   1ea9e:	4630      	mov	r0, r6
   1eaa0:	bd70      	pop	{r4, r5, r6, pc}
   1eaa2:	89a3      	ldrh	r3, [r4, #12]
   1eaa4:	0599      	lsls	r1, r3, #22
   1eaa6:	d53c      	bpl.n	1eb22 <_fclose_r+0xa2>
   1eaa8:	4621      	mov	r1, r4
   1eaaa:	4628      	mov	r0, r5
   1eaac:	f7ff f8c6 	bl	1dc3c <__sflush_r>
   1eab0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1eab2:	4606      	mov	r6, r0
   1eab4:	b133      	cbz	r3, 1eac4 <_fclose_r+0x44>
   1eab6:	69e1      	ldr	r1, [r4, #28]
   1eab8:	4628      	mov	r0, r5
   1eaba:	4798      	blx	r3
   1eabc:	2800      	cmp	r0, #0
   1eabe:	bfb8      	it	lt
   1eac0:	f04f 36ff 	movlt.w	r6, #4294967295
   1eac4:	89a3      	ldrh	r3, [r4, #12]
   1eac6:	061a      	lsls	r2, r3, #24
   1eac8:	d422      	bmi.n	1eb10 <_fclose_r+0x90>
   1eaca:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1eacc:	b141      	cbz	r1, 1eae0 <_fclose_r+0x60>
   1eace:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1ead2:	4299      	cmp	r1, r3
   1ead4:	d002      	beq.n	1eadc <_fclose_r+0x5c>
   1ead6:	4628      	mov	r0, r5
   1ead8:	f7ff face 	bl	1e078 <_free_r>
   1eadc:	2300      	movs	r3, #0
   1eade:	6323      	str	r3, [r4, #48]	; 0x30
   1eae0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1eae2:	b121      	cbz	r1, 1eaee <_fclose_r+0x6e>
   1eae4:	4628      	mov	r0, r5
   1eae6:	f7ff fac7 	bl	1e078 <_free_r>
   1eaea:	2300      	movs	r3, #0
   1eaec:	6463      	str	r3, [r4, #68]	; 0x44
   1eaee:	f7ff f9c9 	bl	1de84 <__sfp_lock_acquire>
   1eaf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1eaf4:	2200      	movs	r2, #0
   1eaf6:	07db      	lsls	r3, r3, #31
   1eaf8:	81a2      	strh	r2, [r4, #12]
   1eafa:	d50e      	bpl.n	1eb1a <_fclose_r+0x9a>
   1eafc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1eafe:	f7f8 ff35 	bl	1796c <__retarget_lock_close_recursive>
   1eb02:	f7ff f9c5 	bl	1de90 <__sfp_lock_release>
   1eb06:	4630      	mov	r0, r6
   1eb08:	bd70      	pop	{r4, r5, r6, pc}
   1eb0a:	f7ff f98f 	bl	1de2c <__sinit>
   1eb0e:	e7bf      	b.n	1ea90 <_fclose_r+0x10>
   1eb10:	6921      	ldr	r1, [r4, #16]
   1eb12:	4628      	mov	r0, r5
   1eb14:	f7ff fab0 	bl	1e078 <_free_r>
   1eb18:	e7d7      	b.n	1eaca <_fclose_r+0x4a>
   1eb1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1eb1c:	f7f8 ff2a 	bl	17974 <__retarget_lock_release_recursive>
   1eb20:	e7ec      	b.n	1eafc <_fclose_r+0x7c>
   1eb22:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1eb24:	f7f8 ff24 	bl	17970 <__retarget_lock_acquire_recursive>
   1eb28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1eb2c:	2b00      	cmp	r3, #0
   1eb2e:	d1bb      	bne.n	1eaa8 <_fclose_r+0x28>
   1eb30:	6e66      	ldr	r6, [r4, #100]	; 0x64
   1eb32:	f016 0601 	ands.w	r6, r6, #1
   1eb36:	d1b1      	bne.n	1ea9c <_fclose_r+0x1c>
   1eb38:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1eb3a:	f7f8 ff1b 	bl	17974 <__retarget_lock_release_recursive>
   1eb3e:	4630      	mov	r0, r6
   1eb40:	bd70      	pop	{r4, r5, r6, pc}
   1eb42:	bf00      	nop

0001eb44 <__aeabi_dcmpun>:
   1eb44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1eb48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1eb4c:	d102      	bne.n	1eb54 <__aeabi_dcmpun+0x10>
   1eb4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1eb52:	d10a      	bne.n	1eb6a <__aeabi_dcmpun+0x26>
   1eb54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1eb58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1eb5c:	d102      	bne.n	1eb64 <__aeabi_dcmpun+0x20>
   1eb5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1eb62:	d102      	bne.n	1eb6a <__aeabi_dcmpun+0x26>
   1eb64:	f04f 0000 	mov.w	r0, #0
   1eb68:	4770      	bx	lr
   1eb6a:	f04f 0001 	mov.w	r0, #1
   1eb6e:	4770      	bx	lr
   1eb70:	682f2e2e 	.word	0x682f2e2e
   1eb74:	732f6c61 	.word	0x732f6c61
   1eb78:	682f6372 	.word	0x682f6372
   1eb7c:	695f6c61 	.word	0x695f6c61
   1eb80:	00632e6f 	.word	0x00632e6f
   1eb84:	682f2e2e 	.word	0x682f2e2e
   1eb88:	732f6c61 	.word	0x732f6c61
   1eb8c:	682f6372 	.word	0x682f6372
   1eb90:	745f6c61 	.word	0x745f6c61
   1eb94:	72656d69 	.word	0x72656d69
   1eb98:	0000632e 	.word	0x0000632e
   1eb9c:	682f2e2e 	.word	0x682f2e2e
   1eba0:	732f6c61 	.word	0x732f6c61
   1eba4:	682f6372 	.word	0x682f6372
   1eba8:	755f6c61 	.word	0x755f6c61
   1ebac:	74726173 	.word	0x74726173
   1ebb0:	6e79735f 	.word	0x6e79735f
   1ebb4:	00632e63 	.word	0x00632e63
   1ebb8:	682f2e2e 	.word	0x682f2e2e
   1ebbc:	752f6c61 	.word	0x752f6c61
   1ebc0:	736c6974 	.word	0x736c6974
   1ebc4:	6372732f 	.word	0x6372732f
   1ebc8:	6974752f 	.word	0x6974752f
   1ebcc:	6c5f736c 	.word	0x6c5f736c
   1ebd0:	2e747369 	.word	0x2e747369
   1ebd4:	00000063 	.word	0x00000063
   1ebd8:	74697845 	.word	0x74697845
   1ebdc:	20676e69 	.word	0x20676e69
   1ebe0:	68746977 	.word	0x68746977
   1ebe4:	61747320 	.word	0x61747320
   1ebe8:	20737574 	.word	0x20737574
   1ebec:	0a2e6425 	.word	0x0a2e6425
   1ebf0:	00000000 	.word	0x00000000
   1ebf4:	682f2e2e 	.word	0x682f2e2e
   1ebf8:	722f6c70 	.word	0x722f6c70
   1ebfc:	682f6374 	.word	0x682f6374
   1ec00:	725f6c70 	.word	0x725f6c70
   1ec04:	632e6374 	.word	0x632e6374
   1ec08:	00000000 	.word	0x00000000
   1ec0c:	40003000 	.word	0x40003000
   1ec10:	40003400 	.word	0x40003400
   1ec14:	41012000 	.word	0x41012000
   1ec18:	41014000 	.word	0x41014000
   1ec1c:	43000000 	.word	0x43000000
   1ec20:	43000400 	.word	0x43000400
   1ec24:	43000800 	.word	0x43000800
   1ec28:	43000c00 	.word	0x43000c00

0001ec2c <_i2cms>:
	...
   1ec44:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   1ec54:	65735f6c 6d6f6372 0000632e              l_sercom.c..

0001ec60 <g_magic_wand_model_data>:
   1ec60:	00000020 334c4654 00000000 00120000      ...TFL3........
   1ec70:	0004001c 000c0008 00140010 00180000     ................
   1ec80:	00000012 00000003 0001bcec 000198ac     ................
   1ec90:	00019894 0000003c 00000004 00000001     ....<...........
   1eca0:	0000000c 000c0008 00080004 00000008     ................
   1ecb0:	00000008 00000017 00000013 5f6e696d     ............min_
   1ecc0:	746e7572 5f656d69 73726576 006e6f69     runtime_version.
   1ecd0:	00000018 00019848 00019834 000197f8     ....H...4.......
   1ece0:	00019714 00019570 000193cc 00019308     ....p...........
   1ecf0:	000192e4 00016bc0 00015adc 000158d8     .....k...Z...X..
   1ed00:	00013984 000000f0 000000e4 000000d0     .9..............
   1ed10:	000000bc 000000a8 00000094 00000080     ................
   1ed20:	0000006c 00000058 00000044 00000030     l...X...D...0...
   1ed30:	00000004 fffe677a 00000004 00000010     ....zg..........
   1ed40:	2e352e31 00000030 00000000 00000000     1.5.0...........
	...
   1ed5c:	fffe4ea4 00000000 00000000 00000000     .N..............
   1ed6c:	fffe4eb4 00000000 00000000 00000000     .N..............
   1ed7c:	fffe4ec4 00000000 00000000 00000000     .N..............
   1ed8c:	fffe4ed4 00000000 00000000 00000000     .N..............
   1ed9c:	fffe4ee4 00000000 00000000 00000000     .N..............
   1edac:	fffe4ef4 00000000 00000000 00000000     .N..............
   1edbc:	fffe4f04 00000000 00000000 00000000     .O..............
   1edcc:	fffe4f14 00000000 00000000 00000000     .O..............
   1eddc:	fffe4f24 00000000 00000000 00000000     $O..............
   1edec:	fffe4f34 00000000 fffe683a 00000004     4O......:h......
   1edfc:	00013880 13d529e4 0ddada09 e219080e     .8...)..........
   1ee0c:	05041b0d e200c5e9 fcf9ede5 e206f223     ............#...
   1ee1c:	f20e1bcc fa0448df 00e40e20 02f5e2f7     .....H.. .......
   1ee2c:	fe03e8db fceddbd8 f53802c7 2ad7e504     ..........8....*
   1ee3c:	32060df7 e2f0fafe 17f219f7 bb37f82c     ...2........,.7.
   1ee4c:	09f9dc0a 221d2314 f535271e e7f3fb19     .....#.".'5.....
   1ee5c:	e4d7fef9 039efecd d5e6d1ed ad122926     ............&)..
   1ee6c:	fb0003ef f3182f06 060c06f6 14144709     ...../.......G..
   1ee7c:	29dbf32e 10d12dd7 272def22 1b1c0e13     ...).-..".-'....
   1ee8c:	210af3ea 0a0bf2fb ff1d12ca 362ff5ee     ...!........../6
   1ee9c:	e317d64c e5f9e813 42f3f1b6 0e3001f2     L..........B..0.
   1eeac:	fbed1bfa 27f40df8 fd490df0 0bb847f9     .......'..I..G..
   1eebc:	ed0e2503 ffcfce1a fae7fb27 eb03021a     .%......'.......
   1eecc:	f1f2d215 1b0721cd 081a15f2 c4f4cef5     .....!..........
   1eedc:	fa112cfa 1ee2f83d 34033ce3 1107e42c     .,..=....<.4,...
   1eeec:	b70cfe27 28edcc0d 2ebc0ef6 21f7fbd2     '......(.......!
   1eefc:	e82cfbfa 30ad2b05 15fb1cfd c90f0b0b     ..,..+.0........
   1ef0c:	2fd8d2f5 c612f303 1a26e9d6 f62012e8     .../......&... .
   1ef1c:	0a224129 070cc109 26cd20dc 1dde2daa     )A"...... .&.-..
   1ef2c:	e80ef017 171116eb 1b0d20c0 001e01f9     ......... ......
   1ef3c:	b400f103 15fc25f5 35cae90e 19c524d6     .....%.....5.$..
   1ef4c:	2a0a1afe dd14f634 09fff721 08d334e6     ...*4...!....4..
   1ef5c:	1d3e16b2 31f212df 0b303008 effa28ff     ..>....1.00..(..
   1ef6c:	2d1afdff 0e09eef7 16381c1c 0d11fef0     ...-......8.....
   1ef7c:	3613ec10 fd1020de d2eeefe3 01d4de07     ...6. ..........
   1ef8c:	e3f1e1e1 ffe012e6 02dbdbd8 07fff6e7     ................
   1ef9c:	fd01f3fc d508e8f4 0cade1a9 e2220cf5     ..............".
   1efac:	e8e90cf1 fd1101b4 d60bf5f9 0cd30a1a     ................
   1efbc:	ecce16ee f604e4eb f0b92f08 14ff14dd     ........./......
   1efcc:	f5fef0ce ec18fdf3 c2b02e09 d8e5ef0b     ................
   1efdc:	ec0d8125 2ec0d1eb 10efd316 f007de13     %...............
   1efec:	34eff2c9 090ff3b7 da13e43c 09edfce9     ...4....<.......
   1effc:	22f12cee f202f70e 16fe0723 071408df     .,."....#.......
   1f00c:	181efeea f0e310e5 e20522e4 f02104f2     ........."....!.
   1f01c:	101a1614 0ce21516 2522fac3 e6e4f2e4     .........."%....
   1f02c:	093643ff f0063c13 1227f11f 1a111af7     .C6..<....'.....
   1f03c:	3e0d0a05 f5060337 0901fb35 f9000bee     ...>7...5.......
   1f04c:	eeb10008 ce14f802 ae0febf5 28eb0b09     ...............(
   1f05c:	0606d621 d4cd161a f1ae15fa 16fe1305     !...............
   1f06c:	ebf4b2f4 e936e5e7 f024d3c0 c2efeaf3     ......6...$.....
   1f07c:	3906f202 f4daf51b 0cfb0a08 da19e408     ...9............
   1f08c:	1a4c1628 351d1531 1ef2f4c2 0a0b01c7     (.L.1..5........
   1f09c:	e419210d d5f1fbfa c205d646 05181611     .!......F.......
   1f0ac:	1835fa0b d7e00933 13fee9ec 0cf20101     ..5.3...........
   1f0bc:	021eaf13 f1060b2b 1bfb1afe f9e4edff     ....+...........
   1f0cc:	26f71b1b f0091020 361de9ed 20ddfed6     ...& ......6... 
   1f0dc:	0404ec08 0223f5fd 1d31ec0d 13100839     ......#...1.9...
   1f0ec:	11f408c8 e8ebf7ce e4312b07 200a330a     .........+1..3. 
   1f0fc:	d51af9e2 f10d3e07 2100fcee fcf1d90c     .....>.....!....
   1f10c:	f4241051 f8ddecf7 b7d20a04 c803fffc     Q.$.............
   1f11c:	d90804fb dab6daf9 09e3c714 18162020     ............  ..
   1f12c:	3ab720cd 0816a80f eed5181d c9fb1c2b     . .:........+...
   1f13c:	25191cfc 162206e8 a3c4a31d b91bb5e1     ...%..".........
   1f14c:	c9c7ceb6 3410ccde 0dff93b6 1f1ea0c5     .......4........
   1f15c:	b1181cb0 d4e4b9a1 233cc11a b307ea9b     ..........<#....
   1f16c:	e2afa137 02a1fe02 b8ad36e2 fbd02409     7........6...$..
   1f17c:	8504b203 a9e4f40c 0bfb0e86 04f3992e     ................
   1f18c:	ecb0a8c9 cf43bddd d22217ad 0e26dbdf     ......C..."...&.
   1f19c:	413b2010 d82a15d2 091a9ab1 b2f4e6c0     . ;A..*.........
   1f1ac:	a2d4ed15 afd5b782 eda3b7ed 933535fa     .............55.
   1f1bc:	c822f60a c5cd27ad e22a3db2 cbd2fc27     .."..'...=*.'...
   1f1cc:	a6d439b8 2e11c0b2 ecb3111a da033008     .9...........0..
   1f1dc:	e92dcedb a7ac27f6 05e9cef3 0bee25bf     ..-..'.......%..
   1f1ec:	abbdc498 9ae21ff1 00221907 a2fefeec     ..........".....
   1f1fc:	0926a7bf 96e225ff 9dd622a4 b0f33517     ..&..%..."...5..
   1f20c:	b63a3dae 290330fc 94e61df6 0bf3ead1     .=:..0.)........
   1f21c:	d3cdddd2 15d7abb9 20d226a0 1aae2d10     .........&. .-..
   1f22c:	14eb41b7 c1a746f6 280fe08e dbe2208f     .A...F.....(. ..
   1f23c:	11ac170a dd088e20 891df9d0 0f16b7dd     .... ...........
   1f24c:	3d86f21e cae4f711 d1fbdad2 3ab4e94d     ...=........M..:
   1f25c:	3b24312e d538c1ee 31210be0 e237fcf0     .1$;..8...!1..7.
   1f26c:	e6b3e2b6 c5cd0e2e c6fa43d3 eca69d17     .........C......
   1f27c:	db26de1e faa4ea2d aac487fa 37142727     ..&.-.......''.7
   1f28c:	17a805e0 a52a27ee fe02b835 df44f5f3     .....'*.5.....D.
   1f29c:	28ff0dc2 46bf3bd1 012c3629 c79fa6b5     ...(.;.F)6,.....
   1f2ac:	fd2acb10 c116ff00 aa28eb1a 06cbf5e3     ..*.......(.....
   1f2bc:	2ca2fb18 b643deb4 22ba39be e4e687d2     ...,..C..9."....
   1f2cc:	f3fb9484 dcbd05da 17e2ed22 a1b5c62c     ........"...,...
   1f2dc:	b9dec341 09099ccc 17413214 958edf2b     A........2A.+...
   1f2ec:	aab221f9 2ea21b0f f950f608 e6fea6f6     .!........P.....
   1f2fc:	c78eadce eb110199 e012aa1a 241b3ad4     .............:.$
   1f30c:	1abdcd3e 0a2dcbf0 d3f1f63c 0b01e5b9     >.....-.<.......
   1f31c:	179ad3a4 15a1f402 2c0b930b f8072639     ...........,9&..
   1f32c:	9abddf16 0ad6c029 061cd0a3 2a2235dd     ....)........5"*
   1f33c:	2302c331 c2abc79c dbaa84ce 0bdce1eb     1..#............
   1f34c:	ff05c5fd 9b1f33d4 e5130818 b228f7d0     .....3........(.
   1f35c:	40c12228 ac06299c 30c7e317 f5cd08d1     (".@.).....0....
   1f36c:	1a4ddf9e 2b08c2d7 cb4520fa d91e2705     ..M....+. E..'..
   1f37c:	cc2629ee ffcec687 d8cfddbe 1e1f24c5     .)&..........$..
   1f38c:	f80945e6 b1b903f4 0327c884 003ec4a8     .E........'...>.
   1f39c:	ae2ae726 df29e9db 0d0fb394 0912bde4     &.*...).........
   1f3ac:	42330fdc 9f81acf5 edcf0e35 9fd343e4     ..3B....5....C..
   1f3bc:	0f24a031 07dce73e 0316dcbb b009dbc5     1.$.>...........
   1f3cc:	e713e52b 42c61f32 aaebfe1d 98efaf29     +...2..B....)...
   1f3dc:	0cb7c415 e6fc2dcd 14f09f27 41f536ba     .....-..'....6.A
   1f3ec:	eb59af9b 133ccbae f6ea33e7 f5f5f2f9     ..Y...<..3......
   1f3fc:	42c01baf 07e0afbc 13fbc4ea 2dc40a97     ...B...........-
   1f40c:	c7b0b2b6 e7c8bcb0 1ffc91a0 dc30cfa9     ..............0.
   1f41c:	993e25d1 ffffd51a 010b02fd c4420003     .%>...........B.
   1f42c:	12ec9ccb fa183103 e1d01bc1 bdba3022     .....1......"0..
   1f43c:	a204c6d4 02ea15ce 08e1fe3d cb04151c     ........=.......
   1f44c:	fa2c3d10 14f72103 e63c04fb 43153a2c     .=,..!....<.,:.C
   1f45c:	17150d05 0a0cf707 0429071e 0f15b6c4     ..........).....
   1f46c:	12e2d9fa 2a0802d2 302602ed edfecef0     .......*..&0....
   1f47c:	fa11110d 12f8feba 0e21cd05 d3faeb34     ..........!.4...
   1f48c:	3ac542a0 4703320d 04352704 f0e933ee     .B.:.2.G.'5..3..
   1f49c:	ccdd0620 f6d40106 fab6d728 e50f1e4b      .......(...K...
   1f4ac:	ff09b4e9 0b880011 d815e7f9 0c0e1821     ............!...
   1f4bc:	f1c5131c 43ea0309 3a281045 1db6f8e9     .......CE.(:....
   1f4cc:	fe26000a d7d9d8af f529b70b 2530f315     ..&.......)...0%
   1f4dc:	0302e217 22eed410 1b11f4d2 0d14faef     ......."........
   1f4ec:	e918000b f2dfffe9 2cf8fcde fd061310     ...........,....
   1f4fc:	f62615f6 08e5f610 0704d307 013704e1     ..&...........7.
   1f50c:	1f150013 d0dc1c10 f81d2b03 20fd15f6     .........+..... 
   1f51c:	f5041d17 213be006 1045d52f ef1ec202     ......;!/.E.....
   1f52c:	14001561 f6eda6da 3348173c dee7351f     a.......<.H3.5..
   1f53c:	e8f9c023 fbd8051c 1d06341d f52701e7     #........4....'.
   1f54c:	2b11e501 9df1f30e 3f9d58e7 cfdc1a26     ...+.....X.?&...
   1f55c:	f026f1f3 4aee02e8 ff3e45dd 05c512e3     ..&....J.E>.....
   1f56c:	ed9df916 3ec1e8f6 2838dcb5 03ccf1f7     .......>..8(....
   1f57c:	e5f7a117 ffe335ea f5ced608 25070618     .....5.........%
   1f58c:	1716eb02 c5be0532 1a1e32e5 eeb00983     ....2....2......
   1f59c:	0c14e5b6 0ce0072b 3fff17ef d1f625f3     ....+......?.%..
   1f5ac:	0fcf090f 1d1b3508 020f060b d2f400ea     .....5..........
   1f5bc:	35eb0d04 f02c0319 1c2bf42b 13e7011b     ...5..,.+.+.....
   1f5cc:	08e4f0e4 240ff367 141a37d5 ef031923     ....g..$.7..#...
   1f5dc:	0d0443f6 4f04314f 04f7e932 f232ecfe     .C..O1.O2.....2.
   1f5ec:	02020715 f913e610 230bf33c f20396bd     ........<..#....
   1f5fc:	095df129 e436ff25 eca8f60f fb2f331c     ).].%.6......3/.
   1f60c:	fa06041c f8f709a7 95d2e009 e7e3e4f8     ................
   1f61c:	1cf1acf1 cef1ed27 0412ef2f e0eb13ee     ....'.../.......
   1f62c:	014e33b2 18ea13e2 f9f9fffd 4fd7eece     .3N............O
   1f63c:	46361eb0 fd22eefa 07faeb0c fd0610de     ..6F..".........
   1f64c:	e60fe4f7 08ff3b21 e909ca26 c1faee2c     ....!;..&...,...
   1f65c:	f7eff0d0 149a20bc 21fc0dc5 1006e1fa     ..... .....!....
   1f66c:	3eea3c2a d5f53ff2 2d0a0b24 082a1105     *<.>.?..$..-..*.
   1f67c:	f00d09fd f81802f5 f62ffeee fb1f28d8     ........../..(..
   1f68c:	e2d50b3a e9eae621 e8c003d5 00eaa708     :...!...........
   1f69c:	c13139c8 c7320829 f5e9ddf8 0b1006f4     .91.).2.........
   1f6ac:	f3081f27 41e3e908 ff9e16d6 7f042b1f     '......A.....+..
   1f6bc:	e1cdefb0 f4fae814 f5091114 1311f203     ................
   1f6cc:	16bc1cf3 f4160cba dff7cd28 d2ecfbbc     ........(.......
   1f6dc:	95f905f8 f4f002ef e4f08b06 43d0e6e8     ...............C
   1f6ec:	f6c325e8 d314f5b8 05fde41d ec25e104     .%............%.
   1f6fc:	1cfcff25 4dfc0802 54fd2321 fd58f4fb     %......M!#.T..X.
   1f70c:	3510ea22 0dd5e8ec 0a70640e e10eea29     "..5.....dp.)...
   1f71c:	f90807f0 2d32ebfe f711e208 10d812fd     ......2-........
   1f72c:	3c290913 ee28c911 40ee3af9 0a022914     ..)<..(..:.@.)..
   1f73c:	0d03f244 33c43102 1c2c1606 0a070205     D....1.3..,.....
   1f74c:	f1f70323 edf80bfe 090fd46a 0b372e23     #.......j...#.7.
   1f75c:	0eb811b7 090d0a23 d7e50b00 c7e416d6     ....#...........
   1f76c:	f50e08fc 0f0008fd fa20f5eb e203da07     .......... .....
   1f77c:	00e1f0f9 0d030112 d114fbda f5edeaf3     ................
   1f78c:	11b514f9 da1f0cfc 0800e90d 2102e612     ...............!
   1f79c:	ff03e1f8 2e0ff6c5 ed05f2fa f6e3000e     ................
   1f7ac:	0af10afb ec1c1ac3 05cf0efb e9ee1708     ................
   1f7bc:	fe02e9fc 26f63805 f7fded19 e10219f7     .....8.&........
   1f7cc:	de06090a 07eaf6fa f4fa0a0e 07f9ee0e     ................
   1f7dc:	00200bdb 21d91bec 0a0df212 0ce4f3e7     .. ....!........
   1f7ec:	11fefdf2 0e05f9fe 0adf0be7 f7d50503     ................
   1f7fc:	04f20205 e309eb18 eb02fbe2 d9eff3f9     ................
   1f80c:	f1f20cee eb13f1fe ffebfb0c 05f508e8     ................
   1f81c:	03fcfaf6 0414f5e2 f1f4daeb f405c5fc     ................
   1f82c:	f1f01bde f4fed25f 030b03f6 20030430     ...._.......0.. 
   1f83c:	0402f80d f21829f6 0bf3ec06 ee2a05e1     .....)........*.
   1f84c:	1cefffe2 f9fd02ea c716f3f0 feb7d94d     ............M...
   1f85c:	0bf51528 ff19061e 04fb01fd 20be0681     (.............. 
   1f86c:	da03de08 cbdc0307 e90c1b28 1704e102     ........(.......
   1f87c:	09f4160c d8d7eeed 3453e6d1 031fd8df     ..........S4....
   1f88c:	ecfeeebf f9ff04d9 f51104fd 07ddfff9     ................
   1f89c:	ed0df7d7 09faf004 031fecde f5f30a04     ................
   1f8ac:	04f50b00 f3d7fbfb 00e9eff5 d4031e1e     ................
   1f8bc:	0edf10e2 d80c04ff 1ef521e6 0b0a190e     .........!......
   1f8cc:	fc11fb09 f7f0f6f9 e00a000c e701f216     ................
   1f8dc:	f7f0ee21 fe18ecf6 1ffefa00 001eea0c     !...............
   1f8ec:	fae9f001 1aeef99e 0c02abe7 fc14e619     ................
   1f8fc:	0b01effc d3f6d1f1 05f9151e 20e52df8     .............-. 
   1f90c:	1930d52e d6e4e9ed 15c6f8f2 e90c01e9     ..0.............
   1f91c:	d91fdbec 0bc8d609 c307190c 0deb26c1     .............&..
   1f92c:	1d0106ca adf6010a 18e611f9 a810f109     ................
   1f93c:	bbeef921 04d90023 002db5c6 eee9f808     !...#.....-.....
   1f94c:	1c111bf2 ede5efee e2e9dbf5 fff0d506     ................
   1f95c:	29f2f8cb 0bee040a 02f9e6f8 08fff8f0     ...)............
   1f96c:	da1cf4e8 f806f1e0 00eeef14 d30dfe17     ................
   1f97c:	14faf9f6 04fd05fb 080509e0 f2060e06     ................
   1f98c:	1ef0260f 0af528f9 eb08fa04 06dc16fa     .&...(..........
   1f99c:	e8020300 0a11f635 e1ed0816 fb1afe05     ....5...........
   1f9ac:	15ffd808 e8f807f6 1dfc26f5 1a000f0d     .........&......
   1f9bc:	3101dffa 030511f7 fe1f0e07 e100f206     ...1............
   1f9cc:	11f009f1 eff70e1e 2028f928 ca0cdeea     ........(.( ....
   1f9dc:	0209ef07 06f5f1e9 1f19f4eb eafbfcf3     ................
   1f9ec:	fc04151f 11ee2501 fc0322da fa02ff25     .....%..."..%...
   1f9fc:	170b050a f3ec05f6 0521181a dbf21810     ..........!.....
   1fa0c:	fd21dceb 05f80b20 12e8001a fe02150b     ..!. ...........
   1fa1c:	fcf9e102 19fa11f6 27f700fa 03e90ef8     ...........'....
   1fa2c:	1d08fbf8 07f0fc07 ea3a09e0 f7feedf3     ..........:.....
   1fa3c:	fbf5e603 070c04fa f00f1f07 fc00e9e7     ................
   1fa4c:	050ff800 12f80511 041007ff eff51bf8     ................
   1fa5c:	0f07fb01 d8fd0308 09faf1fb 020fe424     ............$...
   1fa6c:	f906f3dd fef40105 150209fb 02fa03fe     ................
   1fa7c:	fb08fcef 31cb4102 03d7dd36 2d0a2e24     .....A.16...$..-
   1fa8c:	f0231a11 0cf1e1c0 f9f814e4 1a52e739     ..#.........9.R.
   1fa9c:	ee18fddd 2efb162b 3a25084f f123f9da     ....+...O.%:..#.
   1faac:	e83e0407 faf1dcf5 001005da 07e1e7e0     ..>.............
   1fabc:	de0e39c9 deef08d0 0bdbf7fa f1fa0704     .9..............
   1facc:	df20edfe 2ff5e0e9 f4162f02 01de1025     .. ...././..%...
   1fadc:	0ce41ae9 06d0e28f aa019110 d9e14705     .............G..
   1faec:	fafeeddb 09f0fd0e cc0414ff ee033edf     .............>..
   1fafc:	30a5f501 04c435c3 080c24ea f8c30efb     ...0.5...$......
   1fb0c:	38180cfc cfbb3000 e20702af 572500f2     ...8.0........%W
   1fb1c:	1bf1f73e 0df41e13 4615f102 07111004     >..........F....
   1fb2c:	f4ef081a 39100fdd 201cf610 07ff3430     .......9... 04..
   1fb3c:	240df307 370f321f 1de40afa 08e536f1     ...$.2.7.....6..
   1fb4c:	4217bb21 28df21bf 044d1ef2 1314d8d6     !..B.!.(..M.....
   1fb5c:	dff9fded 3c3ffc14 f4361a10 6005ea0e     ......?<..6....`
   1fb6c:	d30bf860 d9e5a5d8 281efdd8 3839e2d2     `..........(..98
   1fb7c:	29e120ea 04ba320a 2a0c29c7 f53e0400     . .).2...).*..>.
   1fb8c:	aae8de0e 9700f5e5 01e6ba19 dad8f005     ................
   1fb9c:	f4262ae7 b1eba7fa 14a620af f6aed5a8     .*&...... ......
   1fbac:	9cb6b237 d4e7e9ad f9d9e4f1 051bee11     7...............
   1fbbc:	affdf540 f8fefef4 eeae2dfe 2dab0fd2     @........-.....-
   1fbcc:	090adebc baee0fee 6deca69a d99a0bdf     ...........m....
   1fbdc:	100b17b5 1ecbf7fe 050d04db 10ee0806     ................
   1fbec:	eb3f1126 c9da2608 e1edf507 0f2fefbf     &.?..&......../.
   1fbfc:	2ea8e8f0 1020db1b e7d1dc04 3bff7609     ...... ......v.;
   1fc0c:	0616d6cd ec09122f 2a37d6e6 f89d2a39     ..../.....7*9*..
   1fc1c:	0bc30206 22f91a2a 091fcfef 1419b4c0     ....*.."........
   1fc2c:	a411b1e1 0cd513ea 2923f029 c2e9f729     ........).#))...
   1fc3c:	fd082b0d 81430d03 15f2ed1c 1430c82b     .+....C.....+.0.
   1fc4c:	0ffd08cd 2d340dbb c41920f9 acf7031e     ......4-. ......
   1fc5c:	fdbde300 f41408eb f9221c0e ef170005     ..........".....
   1fc6c:	1a23e4c2 1e1ef2e0 191bcc11 05e1fa96     ..#.............
   1fc7c:	14fc0d2d 12ba04ef ec090f4b 0a07cbe5     -.......K.......
   1fc8c:	f1f0c2e8 fcf5ebf2 e526c1d0 e9d4f1d0     ..........&.....
   1fc9c:	ecd1c110 05bf022a 032f14e8 f1e4cec0     ....*...../.....
   1fcac:	1a0af6eb 1e061113 e024046a 50170df1     ........j.$....P
   1fcbc:	0c681aff 0dd111fa d6055512 06fcd002     ..h......U......
   1fccc:	cbe7d83e 07e02000 ebd805d1 123ff7f4     >.... ........?.
   1fcdc:	061af1f1 fa9c0e3e 08b52003 14fc290f     ....>.... ...)..
   1fcec:	0220f329 e820e2f6 fe1fa40b d8f4e5f7     ). ... .........
   1fcfc:	1c3b0341 ebe8f018 11173931 b80f0e28     A.;.....19..(...
   1fd0c:	eff0270d 0f50e2f8 1607fadf 0549099d     .'....P.......I.
   1fd1c:	03112c04 e0ca14ed aad1de35 e0f6e8ff     .,......5.......
   1fd2c:	070ace0f f2e51106 3408e6cc 2930030b     ...........4..0)
   1fd3c:	0b21f425 0bfcf338 18000b06 fbf615f6     %.!.8...........
   1fd4c:	280ef420 12d2e5f7 f615cf17 123fe7cd      ..(..........?.
   1fd5c:	f515f30d 0236fbeb 22f6e209 14db2d4b     ......6...."K-..
   1fd6c:	1530090e ca19dbd4 230b1707 16f63427     ..0........#'4..
   1fd7c:	c7320641 39011c0a 455af8e3 fecb2de7     A.2....9..ZE.-..
   1fd8c:	f02c2cff 15010a3a 3b37ed41 eb1c2920     .,,.:...A.7; )..
   1fd9c:	08fe06fa 02e3ffd3 f7f0ecf0 1b1bdafc     ................
   1fdac:	042ffcf6 fe0fee00 f1e304e6 38390df1     ../...........98
   1fdbc:	03f501fe 150104eb dbfdfc1f fee2e6e6     ................
   1fdcc:	d701fdf4 14dcdad8 20f139e9 0ef8fafd     .........9. ....
   1fddc:	f3f70d12 20def518 f3e5da06 1cfa0cf4     ....... ........
   1fdec:	f0240a04 e9f8d20e 0b0a1d07 03d8d517     ..$.............
   1fdfc:	eb06edf1 dde2e1bf e8000f15 f92221f3     .............!".
   1fe0c:	e3e6301d fefff00f d6f439fb 062c1225     .0.......9..%.,.
   1fe1c:	05e10fee c5f01bf1 2f011511 1f0df7f9     .........../....
   1fe2c:	eaf30901 f31a0100 e4e71300 0ef2021b     ................
   1fe3c:	1e340f06 26031b0a 0b0500d9 e11023f7     ..4....&.....#..
   1fe4c:	04e1f3ef 09010734 09e0e41a 07f91815     ....4...........
   1fe5c:	1705170e ee1ff8e3 1722e132 dccb0416     ........2.".....
   1fe6c:	1122b2fa 08eae42d 07f621f7 1efd0721     ..".-....!..!...
   1fe7c:	0a1ad209 16121bf6 092fd700 d1ecd7dd     ........../.....
   1fe8c:	05e9053a f5fce4c8 f831c2ec eaf6e3df     :.........1.....
   1fe9c:	b7f120e5 dd2509ca 4210f906 b214f5f9     . ....%....B....
   1feac:	ea091107 f51a0217 d1d8d913 d5c9231a     .............#..
   1febc:	06fecf05 02e81104 f801050f bbeea024     ............$...
   1fecc:	1aeaf4e3 0f1312cc c7d0fefc fde50dfe     ................
   1fedc:	f20507d0 f504eb0f c0160ef3 0241dbfa     ..............A.
   1feec:	e905effe cee800de 21e3352d e9eb1dfa     ........-5.!....
   1fefc:	fb0fff10 12ebe0f8 1921f33a f1f4f1d1     ........:.!.....
   1ff0c:	1722f5fc ce24e60c bce608db 04f7f0d6     .."...$.........
   1ff1c:	e20deccc fe0ef2d1 3d1030e1 000f15e9     .........0.=....
   1ff2c:	26e1101a f539d0ed 0b3c20d7 10f51d07     ...&..9.. <.....
   1ff3c:	0ef60c0c 0bfd464c 05fa0130 0c01f60a     ....LF..0.......
   1ff4c:	0a0efb0d ff0ea7fa 0a200a14 f9dfcda3     .......... .....
   1ff5c:	00032c1a cf2b1ff5 16daec24 2725e821     .,....+.$...!.%'
   1ff6c:	0afbd90e 3a55fce1 fd3ada01 f512080c     ......U:..:.....
   1ff7c:	f9d512f4 91061f01 fcf407e9 daab1903     ................
   1ff8c:	0c1807e5 3e092415 21e7d039 e6d80bda     .....$.>9..!....
   1ff9c:	e208f31d f711eafc e7ffb624 eeeeda11     ........$.......
   1ffac:	a01820e7 0ef5ebfc ce29ffef 18ff10a0     . ........).....
   1ffbc:	2cedf30f f302ffef f414ff25 1dcadfd6     ...,....%.......
   1ffcc:	f809df05 04f30ae4 02e00d61 f0c5eff2     ........a.......
   1ffdc:	481af6c4 f5fede15 04fcf9d4 0007ef40     ...H........@...
   1ffec:	dd1dfa16 dfde1705 d90ed7c8 0b1fecf2     ................
   1fffc:	f60b11d3 f8ec071f 0ce61402 07040b20     ............ ...
   2000c:	f9e4fef3 15260df9 070ddf16 eb1611fe     ......&.........
   2001c:	f31612e7 1cdbe504 210f3a09 c80c2c38     .........:.!8,..
   2002c:	22e11a23 2819f005 fd00e1f2 2d17f6d8     #.."...(.......-
   2003c:	f302effc fade1005 f7fa025b fbfcf3df     ........[.......
   2004c:	fecbff0c e810031e 141416d7 2a261301     ..............&*
   2005c:	e0e0eb29 e40a2335 f41b1915 00f4f109     )...5#..........
   2006c:	03f306f2 f911080c 0622f0f8 14ec23a5     .........."..#..
   2007c:	0afcdc35 2dfe0cf7 f510c010 1f14eef2     5......-........
   2008c:	4c2c25de f029e981 dc1af6f5 e50df32c     .%,L..).....,...
   2009c:	e1e20d40 0f0d0d0d 501617fd 2dcd0c1d     @..........P...-
   200ac:	e63b27c5 0e21220a dee60cec 94aaf643     .';.."!.....C...
   200bc:	c3c3eb18 e90ceaec f41aeeed b5002226     ............&"..
   200cc:	f9b72200 d5f43811 1240ff47 25e5e6f4     ."...8..G.@....%
   200dc:	25321bdc f31007dc 35e202f3 02e0c4f8     ..2%.......5....
   200ec:	1136ff0d 18f81dec ec1f11e7 3fd2f200     ..6............?
   200fc:	40f8df07 ec1a05c2 0d14df0c aa1b2920     ...@........ )..
   2010c:	0acafd81 07042124 1300fd07 e10a0be8     ....$!..........
   2011c:	dae0ed0f 1fc82ce8 d7d1d310 e30cf52a     .....,......*...
   2012c:	e2f205f5 04f2fc00 0a08eafa 09271b3d     ............=.'.
   2013c:	ff0cfb08 21f001f3 0feadb20 34130020     .......! ... ..4
   2014c:	f910d906 32ffe2db d90fe6fa 230bf1fb     .......2.......#
   2015c:	1231f431 160cf2e9 10ed0cee 0925210b     1.1..........!%.
   2016c:	0910010b 16ede8f3 062018ee fcce05f4     .......... .....
   2017c:	e304221f f825d907 090cf80f 082ddcd3     ."....%.......-.
   2018c:	f80207ee d6eced4f 08c9280b 1afe230d     ....O....(...#..
   2019c:	00ffe418 def5edcb f231e41d d033fabc     ..........1...3.
   201ac:	36ec09f5 fdc4c8f0 b7430832 e9ca063e     ...6....2.C.>...
   201bc:	04f8d719 139cf2e9 fd04f40a ecd2f6f1     ................
   201cc:	0510befc a52b0ef8 0cc91de1 dced18d7     ......+.........
   201dc:	fa120f1d f206da1b 0d2ae9f7 18ce1bde     ..........*.....
   201ec:	d5d6fff3 28e51be8 f21212d7 0d0505fa     .......(........
   201fc:	e405ece1 070511e9 f1cad113 250803e6     ...............%
   2020c:	21f304f9 ecd6fa06 0214fe0d 18ebfcd2     ...!............
   2021c:	f3fdf8e7 e7b80ffa c212dfff f100d0fc     ................
   2022c:	e404063b 162d0cfb 490f0fd5 bc130320     ;.....-....I ...
   2023c:	21c918de 07f2ee13 201b1a10 dcf3db39     ...!....... 9...
   2024c:	e402b71d 0efc0820 0006d8b0 03160630     .... .......0...
   2025c:	0a00fbef fbffe832 13bf0330 2cd600e1     ....2...0......,
   2026c:	1106ea10 c10bf1d4 18f01005 1beaffe8     ................
   2027c:	0f5405fa 27dffa1d d1e10c3f 22024dc4     ..T....'?....M."
   2028c:	110014eb e9c9f9f4 ecc000f1 be03ff12     ................
   2029c:	ef12d52f e3d8f94b 0208e8e1 d2d8d01f     /...K...........
   202ac:	113e10e3 0df61397 adf8eb08 f9f609e6     ..>.............
   202bc:	ff1616bb f9030ff7 dcfa16df 14363119     .............16.
   202cc:	0fadba10 11e02020 24f0ef2c ea2a0f20     ....  ..,..$ .*.
   202dc:	05212209 12e300e4 f9e3279b f8fb0dfa     ."!......'......
   202ec:	df06f043 fb04eb12 13edeff7 143c09fd     C.............<.
   202fc:	19e405fe 0a4907c0 f926efe0 05ef2fc5     ......I...&../..
   2030c:	24fb08e9 c2ecaf32 e315ec0d 1af3f5f0     ...$2...........
   2031c:	ed333ee7 e61105d1 ff17db0d aaf313e1     .>3.............
   2032c:	18eaf6f0 44c731f3 eed132f5 3d1f0213     .....1.D.2.....=
   2033c:	ec0c1333 0302200e 05001b12 15fbf0f8     3.... ..........
   2034c:	1a04233c 1be54008 fd1032fa 0519fc03     <#...@...2......
   2035c:	ddcc08f7 f7f907f0 115af216 04ecee13     ..........Z.....
   2036c:	0b191600 def3d011 46ff0ec9 1b0c17d4     ...........F....
   2037c:	c730fdf3 09f8fcf1 270208c6 f502ea00     ..0........'....
   2038c:	ef1208e6 10e43add 23f2f0fe 11ee09fd     .....:.....#....
   2039c:	f209fd16 ba030c11 09f3d9e1 fbb62824     ............$(..
   203ac:	07fb10c3 13071243 28cc070c 030805fb     ....C......(....
   203bc:	1cc4f029 311af100 fc342e06 1915f7bb     )......1..4.....
   203cc:	230ffad8 0cd501fc 03c9dff0 12f3f224     ...#........$...
   203dc:	1ccf27ce f6e6e5bc eed6c613 aae12ba1     .'...........+..
   203ec:	f609e002 a7f3c2ba d92631e7 f0e1dc18     .........1&.....
   203fc:	08cfe7d0 ee02f200 1618f115 eb1733f9     .............3..
   2040c:	ab149d98 ddb1d694 ea1af1bf b0c7d8a0     ................
   2041c:	3616b3fc 94c210c9 ebfcf4f6 ebf20a16     ...6............
   2042c:	e8d3a5db e3000797 f5d614f6 3c0b28ba     .............(.<
   2043c:	9e8fe529 b6e4daf2 f80bb7e2 00d7c830     )...........0...
   2044c:	e6d0f0f9 03e814fa 2214c1ea fef3fa05     ..........."....
   2045c:	0d3ceb0e 10bfffff 1940de0d 1d0608de     ..<.......@.....
   2046c:	0f3d3d1d d23107d7 e6ebe4d0 e821210e     .==...1......!!.
   2047c:	fb15172d f116ecf7 02bff2e9 071109ee     -...............
   2048c:	2596dece e50c2f4a f510fd3a 061d131c     ...%J/..:.......
   2049c:	1c1c16ec cf0eb738 f8111820 0ed901dc     ....8... .......
   204ac:	ed07c609 e6eefddb 15ea000c c4049d21     ............!...
   204bc:	02272803 e0e8e038 4de9ecc3 faf1f709     .('.8......M....
   204cc:	e20e012a 0514e7e1 11e2bfdc e9d814de     *...............
   204dc:	c519fdd2 c8d9ccd9 3114f4fe 8b4f140d     ...........1..O.
   204ec:	e2f2d4f1 d312f2f1 fec3cee4 b5e64cdf     .............L..
   204fc:	fcf5c313 f1bce6c1 bca41bf6 d0ccecce     ................
   2050c:	def3deba c7e1e103 121bdefb 11f93b08     .............;..
   2051c:	1614ccc2 1c033d19 22dd1508 5ad30604     .....=....."...Z
   2052c:	e62ddc03 fd0b0edd 110eada2 deede8da     ..-.............
   2053c:	fbfbe7e8 01ff1726 f93c2116 1f13df28     ....&....!<.(...
   2054c:	eefdecf6 481e2005 35ee071c 04424820     ..... .H...5 HB.
   2055c:	e10d4232 042c0611 86cf2b0b fa20aff3     2B....,..+.... .
   2056c:	f140f51e ecf3f610 b5325af6 d011f8f1     ..@......Z2.....
   2057c:	0be7defa ceea21f4 f4ecffeb f7bedef6     .....!..........
   2058c:	29d444f7 551cff24 e0e70f01 f8bef011     .D.)$..U........
   2059c:	0fb1eeb3 ceed06f8 29fed5c8 c2f3d5e2     ...........)....
   205ac:	e604dc20 b8fc06fb e1f7e5e8 d2c6ebb8      ...............
   205bc:	3906f7bd 091a22e7 f9cf1f02 0dfabaa6     ...9."..........
   205cc:	f49707cf eccce684 1213d4f2 0ae11fe5     ................
   205dc:	fd23c8bd 14ef10e9 ff0dd9f1 0ee01b06     ..#.............
   205ec:	1521ccff 15e0391c f51b18fc bcedf3d6     ..!..9..........
   205fc:	f6f10c46 19cddff9 1411f4fd 55a725f1     F............%.U
   2060c:	1d0c0c23 c3f40548 1b5711e1 1c0926fc     #...H.....W..&..
   2061c:	4e0e15c6 144f411e 17ec1207 fd11f205     ...N.AO.........
   2062c:	dd3bf1ce f1ccd2ff f946e42b f2e2d24c     ..;.....+.F.L...
   2063c:	c2e5da0e aeffef34 0fc8f915 be04daf3     ....4...........
   2064c:	f3f7e426 f6120fe1 dfd406dd ffc12b28     &...........(+..
   2065c:	31b2f4ce c9fa1409 d521afe9 e120e6f5     ...1......!... .
   2066c:	c71500dc d009d1db fd10d3d1 bef30dc3     ................
   2067c:	afe6cc00 e3cd11ef f9cf81de 291fdacf     ...............)
   2068c:	03ace8fd 341222be dce80714 f2e1e4d1     .....".4........
   2069c:	f3ddd328 c6d1f230 c0f3e8cf 03d001f7     (...0...........
   206ac:	e608d008 04ea0e08 c305d724 11b83ed8     ........$....>..
   206bc:	baff192a 00eaf6a9 17152e1e 1bf2ded6     *...............
   206cc:	db37f3c3 e02c14eb de1a18f4 bbffec29     ..7...,.....)...
   206dc:	b11affdd 2817eef1 4ab5efdc 2605172b     .......(...J+..&
   206ec:	1446fed8 fdeffd1e 634e409d ffd9f91f     ..F......@Nc....
   206fc:	e50a3534 0c0e15d2 0303d30a 0d17060d     45..............
   2070c:	0eef09f3 3912201e fb081f0e e84f1502     ..... .9......O.
   2071c:	020406ed e618e820 062af6ef 16f5e8d9     .... .....*.....
   2072c:	fc140f04 15c10b12 d1f53104 1b110909     .........1......
   2073c:	db071515 16f806ce 1f320301 ec120a12     ..........2.....
   2074c:	e4ac0319 08ddfbf3 f7ecd4ef eef93208     .............2..
   2075c:	320efcde 07ea0321 1cfc199d f2e8d6bd     ...2!...........
   2076c:	d2db3a0b 08ead8f7 feffdee7 f3120226     .:..........&...
   2077c:	e209fcd7 0e14e1f6 e1f4ecf6 17d611fd     ................
   2078c:	f1d0f00c 321221ce df8119ff ffe62507     .....!.2.....%..
   2079c:	19040be5 e50ceed6 e00e0ef6 e3f21713     ................
   207ac:	f8f4f4af 152cec13 e5e10a18 f6edca0d     ......,.........
   207bc:	e009211b 182521d8 092024d3 14011ef0     .!...!%..$ .....
   207cc:	e00f0cea e60619f1 f80bf711 22fa2c0b     .............,."
   207dc:	f22d2302 c313fafa 0bd8f7f4 eb18010d     .#-.............
   207ec:	1221feaf 16c8d20c 17f91d0a f81514e8     ..!.............
   207fc:	f0c601fd 39f6e81f f0fed0df 231af100     .......9.......#
   2080c:	d441d8ff cf03fe27 e3a1e22a 0122eceb     ..A.'...*.....".
   2081c:	00cafbee daed35f0 f81bf9d7 21df1612     .....5.........!
   2082c:	eec3df36 c41bc615 c4c50229 fbd1030a     6.......).......
   2083c:	db07e802 0609a71e ee2a02da e6fdd8b7     ..........*.....
   2084c:	f7d3ba0d 3ebcf3ce ffdfe6ec ff38eaeb     .......>......8.
   2085c:	effdfbfb b6292bd0 e4f9c6c8 eef2afcc     .....+).........
   2086c:	a9dd0fea c40deff2 030305fb e002f826     ............&...
   2087c:	0be8e9f9 fbd7b3f2 f40d2f03 ec16f810     ........./......
   2088c:	ba05ff17 021bd4f9 c60c49c8 e6f30706     .........I......
   2089c:	0102f9f6 f2f5121d 0905f618 d9f503fb     ................
   208ac:	f7c4f60a 20241a23 f608eed4 17c9fe17     ....#.$ ........
   208bc:	ecd047dc dff61ade 210c1b28 32eeff0f     .G......(..!...2
   208cc:	0feeddde 25f210eb fc0bd5fd fa1bff2e     .......%........
   208dc:	120c0b35 26fd05de fed72120 e82718fe     5......& !....'.
   208ec:	3f3602d6 20ee1adc c92ef1e8 e82a22fe     ..6?... ....."*.
   208fc:	d9f61df7 030b1010 850613f5 03fa362a     ............*6..
   2090c:	23fa0b15 18ee19f5 2dee2021 11cc0520     ...#....! .- ...
   2091c:	e2c5cff5 fd0220f9 17d6f9ce 262008e8     ..... ........ &
   2092c:	0df2ec18 fd01cdff 2feef110 1824aff9     .........../..$.
   2093c:	fa0dfb02 231309fe ff280fef fb012adb     .......#..(..*..
   2094c:	cdb914bd e8c09ee3 e6d3e8f3 fdeaef13     ................
   2095c:	09f40ef2 e808fb45 f808000c b40ad94e     ....E.......N...
   2096c:	17e6ddd3 0c2c37f2 fcd00e0c f7f31ae2     .....7,.........
   2097c:	11d60a34 30c7150a 04f11ee3 02f6ff04     4......0........
   2098c:	eedb3e3e f62f31d2 d30eff05 fdf9fce2     >>...1/.........
   2099c:	e8f1ec0b f4f128ef f2201455 2ed9e8ee     .....(..U. .....
   209ac:	14baf1f8 cdc6fa02 37451abc 0c19eed7     ..........E7....
   209bc:	0f2b160c 03e4e0cb e6151c11 1229c605     ..+...........).
   209cc:	ac00faf2 0ce810fc 0b191d09 02a6f915     ................
   209dc:	cef817f2 e3f411ed 17edcce2 14f23f1e     .............?..
   209ec:	40fd03c4 e4b84a3e 3f3522f4 fe0cf602     ...@>J..."5?....
   209fc:	0d06f45c 01d7f5f3 3b4e02f6 d802e809     \.........N;....
   20a0c:	fffaf619 1012bc23 b1b2dc10 3b0aeede     ....#..........;
   20a1c:	1430fee2 062619fb 07e0ecf5 eb0ee71e     ..0...&.........
   20a2c:	f4141af9 0ff913ff 0df6c9b9 cc1a05fd     ................
   20a3c:	f60ce0e9 dc0ef7e6 e901f50e 11d31626     ............&...
   20a4c:	eff51743 1c09eb07 09f012e2 0109f80d     C...............
   20a5c:	12f5f209 232506e5 03fef104 06000f10     ......%#........
   20a6c:	02d4eb01 e20d0d01 13e0f617 200ee61c     ............... 
   20a7c:	f501da03 feec2ccc d2e5e909 dd1308f8     .....,..........
   20a8c:	bee01f22 0303faf3 f9fb1022 f917ef00     ".......".......
   20a9c:	00f1e2e7 eaee01e7 14e2d024 11e6f910     ........$.......
   20aac:	e1f1011a f71bf3b8 e01febe7 f5ec140a     ................
   20abc:	1d160206 0bff0cfa 0943fae3 aaf924fb     ..........C..$..
   20acc:	cef0fddc 1707e20b fae9cdf0 10f30515     ................
   20adc:	1a1cef1e f62a0cef 0511e700 fad10e15     ......*.........
   20aec:	e2f103ee e9fed944 f12513f2 2c05d701     ....D.....%....,
   20afc:	0418dd28 ec1b26eb 0601bbf6 d9e4ffd3     (....&..........
   20b0c:	38de0cef cb1d14fe d636b0e4 19d5e51c     ...8......6.....
   20b1c:	fbfc1bf0 e53fe7de 020ef0fc facf0e38     ......?.....8...
   20b2c:	e4bd1802 2310fd03 f60ad138 e4bbe617     .......#8.......
   20b3c:	10e0e61f 0ef11904 de25f308 d409f703     ..........%.....
   20b4c:	fc0917b0 ff10d0c2 def604d6 0803fe03     ................
   20b5c:	a8f008ef 0ef2e9f1 ed2bf8fa f8ffcdf1     ..........+.....
   20b6c:	faec0c04 a4f60ffc f1012419 cae51126     .........$..&...
   20b7c:	efe5ddee f3fb1614 31db02eb 12f3f7cf     ...........1....
   20b8c:	0c06fd0b bbe81b0c c6d200fd fcfff431     ............1...
   20b9c:	0ecddeed fb11db08 4821e5f2 2e01f409     ..........!H....
   20bac:	e5f9c9dd fa21fb2e c22131f3 f4031e24     ......!..1!.$...
   20bbc:	f3d5f9f6 d70a2916 f5410f46 2bae060a     .....)..F.A....+
   20bcc:	2bf5fbcb 13ddc527 380a02df cf35eaea     ...+'......8..5.
   20bdc:	2040d713 0b051ced aeb601c4 fa45e3fc     ..@ ..........E.
   20bec:	16f6e1f6 81f20623 23240e02 482df408     ....#.....$#..-H
   20bfc:	ff2721fc bfe6182c 09fc0cf1 d80341ae     .!'.,........A..
   20c0c:	94ced019 bf2de045 5c020cbb 218cdb00     ....E.-....\...!
   20c1c:	1bd907f7 f9f611f4 d302bddf f0180786     ................
   20c2c:	a34beb30 ff21e708 bf03fab9 ea00081f     0.K...!.........
   20c3c:	eadffbea 04cee711 eafcbf04 eae91bee     ................
   20c4c:	00d612e1 fffc29ff 00090927 0adc040e     .....)..'.......
   20c5c:	eb02e8e6 d9df122c 3300daf1 110cf4e0     ....,......3....
   20c6c:	2af5a626 fd00f629 e4beeff3 fc27070c     &..*).........'.
   20c7c:	e8071de7 0b0031be fd0eed01 c9081af1     .....1..........
   20c8c:	f8282d11 26c2a733 1fe91bc6 0b0604f5     .-(.3..&........
   20c9c:	eb15f8cc 3206f000 33db1d24 fc1325c9     .......2$..3.%..
   20cac:	ead7b6e5 030ded0d fb04f4ef f0fef1e9     ................
   20cbc:	223ec5f8 0b220b45 f1c91add a80936f5     ..>"E."......6..
   20ccc:	10ccfcd7 fc1b28ea df0b080d 12df222b     .....(......+"..
   20cdc:	13dbedfc e2d2dc2c 130deb0f f5500ffe     ....,.........P.
   20cec:	280aa417 070f0a05 cb300e21 2a1d250f     ...(....!.0..%.*
   20cfc:	d6edd5f2 18090c3d 1d06eafc ed07baa1     ....=...........
   20d0c:	1df7ed07 ff440406 facd2c0e 08024e01     ......D..,...N..
   20d1c:	e11f0e0a 54f9e5f4 de090df1 16d91b39     .......T....9...
   20d2c:	0df32c20 0d2a0bf9 f2edea25 d60b2129      ,....*.%...)!..
   20d3c:	dfbe18d6 f8ba2f0c ddb4ffea cfbcee28     ...../......(...
   20d4c:	31b4de3b fee4ec11 ec19ba1e dbe8b2f4     ;..1............
   20d5c:	fb1fc6e1 d100dcb7 2bbdd221 3511cf9d     ........!..+...5
   20d6c:	ff10adf5 1d242ea8 b4c8bd1a bd2d18fa     ......$.......-.
   20d7c:	cf17add4 e0c90ba8 c1ea2d3a e4eb150a     ........:-......
   20d8c:	da3e0d9f b8a61f00 f9ac01fe a700170e     ..>.............
   20d9c:	31f7ca88 31a705db b11eb0e9 0da6d6fa     ...1...1........
   20dac:	cee3ccdd f3ad2c31 e8ccf6d6 e2181ef6     ....1,..........
   20dbc:	2708a21e 2edf1236 dd1afce7 f21ce41a     ...'6...........
   20dcc:	c6a11ad4 30d214d3 c904d2ac f90ea8c8     .......0........
   20ddc:	b5d4e10e 1200c0bf d2b8eaef ba0e25d2     .............%..
   20dec:	10dbfcdc 19d4c111 b72f2411 4201e1be     .........$/....B
   20dfc:	96c9e9f7 cd164118 df02f49f 04b53ada     .....A.......:..
   20e0c:	34d819d0 c2d2fbb9 24d1d6e7 d218eab7     ...4.......$....
   20e1c:	1b1e12dd c206fc27 11040ad4 33fffa19     ....'..........3
   20e2c:	2efed0df 07f9a8a5 31c109c8 152ccb17     ...........1..,.
   20e3c:	bdffcad3 3acac817 2feccbf5 eecf09a2     .......:.../....
   20e4c:	2121d001 b0b4e1e3 e634d6f3 affaf301     ..!!......4.....
   20e5c:	302bd0e1 f817fd9e 2adf06ad 1ef2d006     ..+0.......*....
   20e6c:	28b120d6 b7afd6e2 a9b9cedd d4d4bb2c     . .(........,...
   20e7c:	21e7df19 29e7fb1e cda9f5b2 02da1a2e     ...!...)........
   20e8c:	f202ed05 a7ef121b 38decb9f 000fe3b6     ...........8....
   20e9c:	f63ce2ab d2a33812 d2b3e7b2 37c9d90a     ..<..8.........7
   20eac:	beba373c 33c9f5f2 c9ead60b 0ae12910     <7.....3.....)..
   20ebc:	e5b4e8de d4adc009 cf12ce10 d4c225e9     .............%..
   20ecc:	cdcb33ed e71eeefc ec290cda b5250cbb     .3........)...%.
   20edc:	4128b7cd 2de2b7e6 280b061d 0a09bd26     ..(A...-...(&...
   20eec:	ea251ddd 1c0e1a08 e7cf05eb 249dc7c4     ..%............$
   20efc:	33d2c908 b3f1d70f d6f7fe06 17d4360c     ...3.........6..
   20f0c:	29d3f514 d6b3f021 23aaf517 a81ae01a     ...)!......#....
   20f1c:	e7d20123 13bbcf06 faef0b0c a6d123fa     #............#..
   20f2c:	ca1c18cb 33e0d2d5 1df3bcd8 07c605a2     .......3........
   20f3c:	d21030ec fbd5b233 befa2dbb 2cd3fa0e     .0..3....-.....,
   20f4c:	0ceadcc4 31081b33 e7f93d14 b2aa00aa     ....3..1.=......
   20f5c:	07a806d1 3781f6d9 ca162dda dea50331     .......7.-..1...
   20f6c:	34f2c833 0c41f3fd bee3c3eb 1b9be82c     3..4..A.....,...
   20f7c:	26f6f00a dc06f622 43a1bdf0 d025ef3e     ...&"......C>.%.
   20f8c:	dec9129f 01fd1914 e8edc2a5 3722e8cc     .............."7
   20f9c:	ecc5dd99 32fcf426 ced7d1df 07bbe6e3     ....&..2........
   20fac:	13210be5 d2c205cf 3823edfa f9d298af     ..!.......#8....
   20fbc:	e60f2cb1 dfb32011 d1e02628 3ed822ce     .,... ..(&...".>
   20fcc:	11e7dcc5 efcf2ea9 2de9f037 c522f506     ........7..-..".
   20fdc:	02b10d41 b20ff139 e8f4deeb c1f7ff2b     A...9.......+...
   20fec:	ddbdab30 22aa20e7 d3bcc117 02c3d700     0.... ."........
   20ffc:	1d1432fe 33d6fd15 c2f033d6 3998c70d     .2.....3.3.....9
   2100c:	f4e6d6f8 03c1b5c8 bcfacac9 2fa7e0fe     .............../
   2101c:	adcac326 c9052ae3 10cf980c bddc0610     &....*..........
   2102c:	04e0f11d f4ebc710 26bd21f9 1218d0f9     .........!.&....
   2103c:	aaf009ea 27f29eeb 1ce11823 c9a6e2ac     .......'#.......
   2104c:	cbf10fbb 47c40430 c8a705f3 c4f2059f     ....0..G........
   2105c:	b7e5e3fd dec71d9f 41e328b4 3b0315ee     .........(.A...;
   2106c:	3edce10e 2c3ddde9 ee3c9fa2 b0bcf303     ...>..=,..<.....
   2107c:	19243d36 cbe694b8 c1b14bf8 39024dcd     6=$......K...M.9
   2108c:	1825a307 1dbc05d4 070a8dc5 1fbb1541     ..%.........A...
   2109c:	08424e39 0d2f4eaf cec8d924 f92123a7     9NB..N/.$....#!.
   210ac:	093ae2be b234baa0 50d4354d dad531ca     ..:...4.M5.P.1..
   210bc:	ccba32ee c3afa11a d1ce1bf1 c8432de2     .2...........-C.
   210cc:	1fbf36a0 37b804b6 3cc442d4 2d42d19e     .6.....7.B.<..B-
   210dc:	d327b11a 2dd6c3f0 37a90db4 e01e40e9     ..'....-...7.@..
   210ec:	1d023e09 9e1ec10b c0011e12 0b0f3bb0     .>...........;..
   210fc:	eabcc318 af1cf1eb e7b5ccf0 fe1cbf41     ............A...
   2110c:	9845a2b1 f0b32356 f0cae4ae 49cd39c9     ..E.V#.......9.I
   2111c:	90380be4 b0c5bbe5 df040fc5 8da0e2a9     ..8.............
   2112c:	2842d03e 5abdcdd0 cf1dd4e5 15d201c7     >.B(...Z........
   2113c:	c43bd324 08d6fdcb bce6cb37 dea386bd     $.;.....7.......
   2114c:	3cf0da2e c2e2030c be9295dd f53e0e2b     ...<........+.>.
   2115c:	37272ee1 17d03c4d 391618b4 d319fed1     ..'7M<.....9....
   2116c:	d63fcf4c b8fa01b4 4c0e1626 13c313c3     L.?.....&..L....
   2117c:	a0dbca9b d3d21430 c0b63eb1 3be5c0e1     ....0....>.....;
   2118c:	1e31fe97 2e21220e baf10647 efe3dc3c     ..1.."!.G...<...
   2119c:	9c43e33e 3ae5b0aa ccc89597 f409ae5c     >.C....:....\...
   211ac:	f93bcb1d b3e70039 10cea036 1ccde904     ..;.9...6.......
   211bc:	489d0de9 1ae4ba2b 0dc30a3e ddbe0ab8     ...H+...>.......
   211cc:	223ed70e 9a28db3e e6cec843 c1cbb0c1     ..>">.(.C.......
   211dc:	e8dd96e1 e234382b e7e1f614 33f2fed7     ....+84........3
   211ec:	02cc3811 2c18c5e2 a9d1a0e9 2cceff05     .8.....,.......,
   211fc:	e2b600bc 940acffc 52ca31ee ac4b039c     .........1.R..K.
   2120c:	bc0cd0d2 b149ae2c 1b3e2def 14819d0c     ....,.I..->.....
   2121c:	001c3ebf e4b44027 15240745 f5e5f6d5     .>..'@..E.$.....
   2122c:	11efb7a1 f5e829bd 0a31a6c9 a8df3b35     .....)....1.5;..
   2123c:	da5118cf 40d72012 1a9eeed8 3bdbbd16     ..Q.. .@.......;
   2124c:	cc06952a 94b319ec aaad1b1d 13acde27     *...........'...
   2125c:	36abc4c6 f72326aa f3ec3f25 183c453c     ...6.&#.%?..<E<.
   2126c:	9c560fa8 35393503 34e09aaf 324d26cc     ..V..595...4.&M2
   2127c:	32abb80e 3b233e3a fc1c99d2 09db36a6     ...2:>#;.....6..
   2128c:	b630cabc 0a4a24f5 27c0d9c9 26a9aec1     ..0..$J....'...&
   2129c:	dacf0d22 0b40e6db c7222a27 ad4031cd     ".....@.'*"..1@.
   212ac:	e8bbc3dc 18f7d51a d9014207 dbbb46ed     .........B...F..
   212bc:	2fd6cff0 c724dff5 cc430db3 18c84311     .../..$...C..C..
   212cc:	089bd7f3 4327af04 0d26f6e6 22122eeb     ......'C..&...."
   212dc:	cac0c79c 19130916 981ddc41 1faee923     ........A...#...
   212ec:	ea33b412 2a95218c 1613d9a9 29fd2ae8     ..3..!.*.....*.)
   212fc:	d603b551 bf12b8a8 efe4090e c3d00226     Q...........&...
   2130c:	5eca253e b94143d8 b403c22d eab0ad96     >%.^.CA.-.......
   2131c:	3328b6dc a7b41def 3e130408 48c4b6eb     ..(3.......>...H
   2132c:	2bfdd2f0 b5ed2cf3 9b0cb3d5 e3ae2c9f     ...+.,.......,..
   2133c:	ed2f45e8 a8b4a4db ad0c29b3 31c9b808     .E/......).....1
   2134c:	2addc519 e6dffcd3 ac28afd8 ff1d2120     ...*......(. !..
   2135c:	1b26e3e9 ebcdc008 30cc19cb a44f02c3     ..&........0..O.
   2136c:	1741d6e5 b5c1b5b5 23333d37 b73312d9     ..A.....7=3#..3.
   2137c:	2ff8f11e f7d82035 e4d5021c e2f60501     .../5 ..........
   2138c:	04161c00 faf7eae7 ff1b05f8 0d0d0a03     ................
   2139c:	020bddfd 17fdf90d f2fefa0a 07eae0eb     ................
   213ac:	edafffd9 062cefe5 3318fc04 f711d217     ......,....3....
   213bc:	02fbeaf0 2ed2f3c2 f21707f8 eee80024     ............$...
   213cc:	11e009f8 0225f3db 09e919e5 fc1113f8     ......%.........
   213dc:	24eeefe5 0afcece3 f1e0d625 e0102011     ...$....%.... ..
   213ec:	c9fdc70b febcef02 c107ffd5 19ec2b03     .............+..
   213fc:	120105ef 2ab21ee4 1705133e 02bd03e3     .......*>.......
   2140c:	fae0fd14 e6da11ef ecfaf7c8 0ee6fef7     ................
   2141c:	fa01ddf6 0e05c80e 0af80de4 b51600ff     ................
   2142c:	e8ef1cf8 db16ed04 18ebdfe2 0eed23fd     .............#..
   2143c:	e6edec06 32fdf9eb edffd0ea 03ec0a1c     .......2........
   2144c:	04fc21f5 12f3f90b fffdef0d f4f8fb1f     .!..............
   2145c:	06f9fe0d 14041bf0 120bfcfe 1703e6fe     ................
   2146c:	02e10838 23042a1f 00fcdeef 0a24fc02     8....*.#......$.
   2147c:	16edff05 d80b1a1b f8001cf4 050a05ed     ................
   2148c:	e5f6f9f1 e900ede3 0fe1fe08 09f4dd0b     ................
   2149c:	fd45090e 3a1402d9 071503e0 f402d6fe     ..E....:........
   214ac:	16f00ee1 3a04fa01 390ee40a 09c61a01     .......:...9....
   214bc:	f1f8f7e0 0005f5cb f221cff7 d6300bde     ..........!...0.
   214cc:	1e1df80b eef4fb48 02c82614 cdf80013     ....H....&......
   214dc:	fae2f3d9 a4fd05f5 18fd35e4 49ff55f2     .........5...U.I
   214ec:	db020d10 00f61a01 d312f625 c9f21038     ........%...8...
   214fc:	fdeffe3d 0a4fe1fc fec5e624 0d0011f4     =.....O.$.......
   2150c:	ddc2e3e9 01f113e2 210df3ef 240c11fe     ...........!...$
   2151c:	fc04f502 e30d04f4 f60c13f4 11c5fe0f     ................
   2152c:	ff020ef4 fa1df203 e1e8f715 fb1007d4     ................
   2153c:	ff08e209 1af0f3e8 edda00cb f1e6351b     .............5..
   2154c:	fff64df3 031efd1a ec051bff ea040303     .M..............
   2155c:	08dceadc fff6fe0f 0767110d eed712c1     ..........g.....
   2156c:	e8d3260f 08cc03f2 16eb0105 6116e61d     .&.............a
   2157c:	67dc0c0c f8092805 5b0f0544 fe12f50d     ...g.(..D..[....
   2158c:	064efcfc 124a0809 f1ebdd21 0911fa7f     ..N...J.!.......
   2159c:	13e305e3 1b18e8fb 210307f1 e50aecf0     ...........!....
   215ac:	16ec5628 2afb5afd 193a0d12 1912240c     (V...Z.*..:..$..
   215bc:	f90efd0e 04dc1e39 b4fe1b1b 06570901     ....9.........W.
   215cc:	f0df0420 e91a32f7 10c22fed 20f02307      ....2.../...#. 
   215dc:	edf201e5 cafa0f05 fa090001 e803f7f8     ................
   215ec:	05f8fbe5 c7eef70c 13eefee6 f5f8f0d8     ................
   215fc:	effdf9a9 11ede216 13fe06f8 fc1a0ee1     ................
   2160c:	36ed08f6 0adff303 f9f8eafc 15faf90a     ...6............
   2161c:	ef1716f7 f506f31d 01c7d306 01191fdc     ................
   2162c:	fdedfb02 d8f9fc07 f7dcf531 17ed18f2     ........1.......
   2163c:	fcdacb33 151e3b15 46f8ea13 04050ef7     3....;.....F....
   2164c:	52f42c29 050cde22 f94a0eea 11f505e2     ),.R".....J.....
   2165c:	1301f921 111cf012 f803d0e2 0014e600     !...............
   2166c:	f32df7f9 2ed1cce8 e1091c1e 0af53504     ..-..........5..
   2167c:	17320ae9 f408fc01 12f40a02 23bdf512     ..2............#
   2168c:	d20804dd 00050a0f cbe503f2 d6111003     ................
   2169c:	d3cc0205 ff130ec2 0314ed04 0c0107fb     ................
   216ac:	0b2a08fb e105dce9 04ec13f4 24000a1b     ..*............$
   216bc:	1bfd0901 28fae50c e7f70727 0eeaf1ec     .......('.......
   216cc:	1df10af4 f3cd19ee fbfe151f 19c108f7     ................
   216dc:	1c00feda f02eff1a e7ebf600 c30f0112     ................
   216ec:	ec17db08 cf060f31 f4100804 03d2cd13     ....1...........
   216fc:	0a022dcd 1af92dca e106dbf6 0af6def3     .-...-..........
   2170c:	2df708cf 0bf5e80c fafbef22 f9f729f9     ...-...."....)..
   2171c:	1cfce90c 1eed0fff d8ffe5e6 d30df800     ................
   2172c:	36fafcbb eacc1907 17f70bd6 ffe412ff     ...6............
   2173c:	2dcb0dee fd02041b e0f30bfe 35eaf905     ...-...........5
   2174c:	f82cfef1 10e80410 130819fb f9f60d0f     ..,.............
   2175c:	e9d9d317 1100ffeb 09c904c3 0b09fae2     ................
   2176c:	ffc4eeae 09d4fd1c f84ac3f9 fef9e30b     ..........J.....
   2177c:	11deedf0 101a33f3 e0e5cd34 b1e00181     .....3..4.......
   2178c:	f4fc0925 05e6ece2 e000e112 e9e7d520     %........... ...
   2179c:	f6e63e21 d011e985 0afbdacf e4e40302     !>..............
   217ac:	d10030f4 0eed05e3 da36d343 0fa3dbf5     .0......C.6.....
   217bc:	f9c5cef2 fcf208f5 0e1fecf3 e42dda01     ..............-.
   217cc:	0707d7f1 fdef03d9 0ffa07df fd0af8f8     ................
   217dc:	1005ffbd fddad5ac d43e10e9 de04fbef     ..........>.....
   217ec:	cd200ced cf1701c1 fdecfc00 e5a11016     .. .............
   217fc:	053907fe f5f918f5 03bf0af6 fc01fcfe     ..9.............
   2180c:	04f4fd45 e0ec3509 0b01f4d6 e1ddff37     E....5......7...
   2181c:	0fe0f8f9 f5eee7fc 01f3d816 fbf5010d     ................
   2182c:	e3f0faea f8ee1c15 0019e01b fbc20d0c     ................
   2183c:	01f70df9 03f91a16 f9280c28 2521fb0e     ........(.(...!%
   2184c:	00fcf3aa f2e7c417 29f3fb3f fbff0b07     ........?..)....
   2185c:	052ec515 0a13f2bd 0232fae4 ea25c71f     ..........2...%.
   2186c:	0106aed5 06f30bbc ef47fffd dbe90c1e     ..........G.....
   2187c:	f0d41111 d61216f7 f6e61abf 0df83eeb     .............>..
   2188c:	cbffd509 f305f72c 02cef30c ed0a0147     ....,.......G...
   2189c:	d1f7f61e ffc511fe 26fde1f1 fc1cf727     ...........&'...
   218ac:	fe1ffaef 121a00e7 0ef0091c 29cefae1     ...............)
   218bc:	d03002f9 f021c8e0 1a0cdb0e 2c34fce3     ..0...!.......4,
   218cc:	eb050d11 1202f5dc 0be505ed ee2d2500     .............%-.
   218dc:	f2e6ff06 0bd00325 1315fa16 03db0f01     ....%...........
   218ec:	eee73aed d107e02d d6e7fd11 fd24d8da     .:..-.........$.
   218fc:	07111519 0003f9f0 091406f7 0ff620fa     ............. ..
   2190c:	f203fdf1 0314e411 081d100c 161aea0c     ................
   2191c:	f31d032d 00ef26f8 0cef051e f2fa1de8     -....&..........
   2192c:	0f0fe215 13e5f70d ed050300 14fff6ea     ................
   2193c:	020ff2fa c6f50804 0fe5f314 d91504dd     ................
   2194c:	01f6f0ed 2cfe0d04 051afde8 17d3fd07     .......,........
   2195c:	d9fde80b fe1d0f25 fa090107 fbbe0ff6     ....%...........
   2196c:	c90b0fe4 f622130f 0402cc07 0a030c0c     ......".........
   2197c:	01f8e604 16f504eb d80419ea ff12fddc     ................
   2198c:	e317ffcd 201ede18 13fa0e2b 0c020013     ....... +.......
   2199c:	220dfabc 1f2ac105 e6f3022f 21d01fff     ..."..*./......!
   219ac:	fc280d06 f9fb080f 14070ac8 030def18     ..(.............
   219bc:	0cda0206 33c93f07 a5a60dab 8d1b1ae9     .....?.3........
   219cc:	052d35ed c7e1abc9 20a91a25 a8efa318     .5-.....%.. ....
   219dc:	0ab1b1a6 323bf8a1 363849e4 eba8eba8     ......;2.I86....
   219ec:	ea198120 c38712e3 f9cac515 d99dfa18      ...............
   219fc:	122230ea 17a7c5ac cf9cf6c6 13efaf17     .0".............
   21a0c:	a68f369e e8f3ff0b f722182b 14a8f196     .6......+.".....
   21a1c:	e10d4031 c728d001 3cade30a 259dd2bd     1@....(....<...%
   21a2c:	c727bbd8 29363511 01e00beb 0df74716     ..'..56).....G..
   21a3c:	fe2cd303 d9e3f34b 3bffbae0 d7daa61b     ..,.K......;....
   21a4c:	b0aede4d eefac813 0fdfe4d8 431af405     M..............C
   21a5c:	099635c4 3204062f fb48ed02 3800bfd5     .5../..2..H....8
   21a6c:	cad235db aa033223 d91811ab 2b2215fd     .5..#2........"+
   21a7c:	efbcd933 af259bc1 dbc52f24 00cbb247     3.....%.$/..G...
   21a8c:	01072bed e1c5d602 ee1fd05a c3b040c4     .+......Z....@..
   21a9c:	3d084cb6 efe0d8e0 1934001c bedb0fc4     .L.=......4.....
   21aac:	092e16f1 210cebac b6d9a8f4 b0fd3f94     .......!.....?..
   21abc:	1412c99d b6dfadab 07f2c10a 3934291e     .............)49
   21acc:	fad02d32 bdd3029b 339303e2 d2a99dfe     2-.........3....
   21adc:	05ff0bda dc1c9fa2 31f319fa e704a1b0     ...........1....
   21aec:	fc8cb7f1 e98facbf a23a1138 d4263f1c     ........8.:..?&.
   21afc:	9e16d6c0 4ff02b04 91eac30f aa0407cd     .....+.O........
   21b0c:	dedac718 9ebafd33 02dc233d 96c88e9f     ....3...=#......
   21b1c:	cb2d86fd c72bc1d0 0fe5f7d7 2702f2dc     ..-...+........'
   21b2c:	3746f131 01f833c0 02a0c116 38a501fd     1.F7.3.........8
   21b3c:	45b8e8e1 deb42ef4 222dcf2e 921ae80f     ...E......-"....
   21b4c:	faa80d24 1b8c18ba c517b0b1 3de733c2     $............3.=
   21b5c:	d4c8ea47 21a639ac 29152af0 e9ccc4d3     G....9.!.*.)....
   21b6c:	d0c3b902 31efc4ea 1dd051fa 0ad9ccd1     .......1.Q......
   21b7c:	998e9d97 9e8ea21a 14e7ea15 31bc16de     ...............1
   21b8c:	b4f90130 4146bed2 01ec4627 102e2aa6     0.....FA'F...*..
   21b9c:	af07c930 20ccaabe 4c04b3f6 e808c8f6     0...... ...L....
   21bac:	e599a801 1508dae9 e8bcc00b c6ce30ff     .............0..
   21bbc:	d2e8310a ffdd2ab3 130da8e7 a3431ba4     .1...*........C.
   21bcc:	f514f7d3 ae289313 a913d817 c6dc18da     ......(.........
   21bdc:	3f982aa6 eeff9ad7 dc3b45ed 291bcb35     .*.?.....E;.5..)
   21bec:	40c4a410 df10f7b0 e4f5e009 fecaff03     ...@............
   21bfc:	f0f4cacf f1f0def1 d2c21b95 6221f5db     ..............!b
   21c0c:	4adbce28 83a8b7b5 2025d0f1 cefd9a87     (..J......% ....
   21c1c:	b2d5a0d5 cf2b9b0e 04112cff 95cc2842     ......+..,..B(..
   21c2c:	d22532e8 15a3efdb da35ca02 f8c9dc46     .2%.......5.F...
   21c3c:	2bbbc1b0 ab8f39a9 f60d25fd afd2d027     ...+.9...%..'...
   21c4c:	be0a8fe1 a2fbe2ab dc04d7a7 3aa4df37     ............7..:
   21c5c:	aaf9d33b 31edbf1a b8e50ebe ff8ce6b0     ;......1........
   21c6c:	fefaef30 085603d6 9d03c12c eddd053b     0.....V.,...;...
   21c7c:	a5cdc93f e8dbd4e7 33f8e434 ea32bacc     ?.......4..3..2.
   21c8c:	25bf3bda 0f9a1db0 d22c00db 9c3a960e     .;.%......,...:.
   21c9c:	d8ab32cd 072a2699 d33c1826 1712a845     .2...&*.&.<.E...
   21cac:	9003bc18 bedc3e20 10b0cdbb 1b3ce1e0     .... >........<.
   21cbc:	a8b40ed2 cddbb2ef a5c7d213 bbf73103     .............1..
   21ccc:	d2b00031 1e0640ea 603da4ca 1c292fee     1....@....=`./).
   21cdc:	9f1ae304 0225d1e1 ebc5f824 f739a422     ......%.$...".9.
   21cec:	55fee1ad c32b091d 1e45a128 afdafdd4     ...U..+.(.E.....
   21cfc:	4544b429 4217e5f4 48db20bb 0ba7312f     ).DE...B. .H/1..
   21d0c:	43a9feb1 c617f321 0aff420b 25d723b6     ...C!....B...#.%
   21d1c:	d207c8eb 4002b2a4 da46c354 2fe3b113     .......@T.F..../
   21d2c:	99362220 cd370d21 efcadb0f b8b4b524      "6.!.7.....$...
   21d3c:	fcf2b0a8 e3f8130a b196db34 3f08ccbf     ........4......?
   21d4c:	300efea7 3e410e15 2ccf09de e2a8293e     ...0..A>...,>)..
   21d5c:	07c5d619 0ad621ff e0c826bb f643cea6     .....!...&....C.
   21d6c:	1c9d124f e211b1bf 19444652 d32ec49b     O.......RFD.....
   21d7c:	decbf725 13b910ec f50acdc2 193df9eb     %.............=.
   21d8c:	0cc3b5c5 d04f9921 dd9d10b5 b7f923b7     ....!.O......#..
   21d9c:	50fa2408 b0da0d17 eceab881 0133e228     .$.P........(.3.
   21dac:	b8e5d824 0b012eae f5d3321b d501a6af     $........2......
   21dbc:	fa01f834 3ef7fbf0 f90d3ac7 26a2141b     4......>.:.....&
   21dcc:	1128ddc9 ac07f3e1 ee04d4fd 0b46fbb8     ..(...........F.
   21ddc:	fdd6eb0b 0cd640d3 d7b8f942 1e182cf4     .....@..B....,..
   21dec:	05e32810 c233023c 3d3b4fe1 33a2edfc     .(..<.3..O;=...3
   21dfc:	43dfe709 deb61cf9 b0032123 280929b4     ...C....#!...).(
   21e0c:	0849b2aa d8113695 dd130ffa f337c6b1     ..I..6........7.
   21e1c:	221b0cf3 1340a4d7 c0dba149 03ecc21e     ..."..@.I.......
   21e2c:	f5e339d0 9cc523ed 189fd7aa c8d6091e     .9...#..........
   21e3c:	cd072045 a1feb497 3fdae8e0 ea31dff8     E .........?..1.
   21e4c:	3cf5e9e0 e5ddef01 d2394bf4 b00b3131     ...<.....K9.11..
   21e5c:	c2b5ccdc 110ad9de 1113d1f9 35a13627     ............'6.5
   21e6c:	35282e2a e9cdb109 50083310 549d3714     *.(5.....3.P.7.T
   21e7c:	02309d44 17d53534 beee2a25 3d3f24d7     D.0.45..%*...$?=
   21e8c:	fab229f4 10eac917 e7d40e3e d724453a     .)......>...:E$.
   21e9c:	c7a3ba2f f62fc69a f7e706d8 28bd40b7     /...../......@.(
   21eac:	2e0c02b8 9bb742aa 043ce140 0145f6d9     .....B..@.<...E.
   21ebc:	b9c04609 11332eeb 11ce2323 fde798b5     .F....3.##......
   21ecc:	c5f9492b f73bc91b f0e1c6b8 f4dee8a4     +I....;.........
   21edc:	a6a8e0c1 46d4e82f 27ea18ce 0724fe19     ..../..F...'..$.
   21eec:	358abaca d9eaef10 0ad899ec 1cc4aaf5     ...5............
   21efc:	b8edc84f afd9b500 beffb7e0 cddf982b     O...........+...
   21f0c:	39df21ca 14ac29b6 fd2e4e3d 1eedd3e7     .!.9.)..=N......
   21f1c:	d2b0c12d dc1094ed bb11db30 0927083c     -.......0...<.'.
   21f2c:	d3bbb91b dfca02d7 e1bfe9d1 11309422     ............".0.
   21f3c:	d2fcdef6 eb36e3f6 28c1c9ae 12b10fee     ......6....(....
   21f4c:	fedac6a0 c9e8ecc8 0d2c1a03 12a199ef     ..........,.....
   21f5c:	2609d5b5 e45117b3 f6f1b4f2 06d6fd00     ...&..Q.........
   21f6c:	d4a6bdff 14a4d2fb 0b0ef920 15b0bbae     ........ .......
   21f7c:	0128f8f5 dec8f2db a2d0113e f6fc1113     ..(.....>.......
   21f8c:	e521a92d b82cdd38 062bbdf3 27bcb608     -.!.8.,...+....'
   21f9c:	839ec320 df08e897 20cac120 0716cfe4      ....... .. ....
   21fac:	f520fcd3 371d0db8 40e4b92a b6efb2aa     .. ....7*..@....
   21fbc:	bf2ae3fe 49babaa3 b000e3c4 35f20cb5     ..*....I.......5
   21fcc:	fdf33bb3 9ae2bcc9 a71123bb 9eed9bcc     .;.......#......
   21fdc:	a6f20bfa bfe6e0cb 2008ddd0 2ee60fdb     ........... ....
   21fec:	0e150bee 101e2003 e1eff7cb 932ec3a5     ..... ..........
   21ffc:	2ef39ff5 05d63825 19efe10b e8fffb2c     ....%8......,...
   2200c:	0d2b1a01 ecf5e225 fa130cf8 0b0e080e     ..+.%...........
   2201c:	1123eed5 f00d1304 3ef4111f 02ee06fc     ..#........>....
   2202c:	0802e2d7 2d1fbee6 f5290ae8 fb211522     .......-..).".!.
   2203c:	230d12fe 0903fd0a 000f030e 0e04ed37     ...#........7...
   2204c:	08f91b19 fb28f32a 08240ae4 0b063608     ....*.(...$..6..
   2205c:	00f7e1ed edf30cf0 01f60e27 01290331     ........'...1.).
   2206c:	0bff081b fb26010d e50efde6 f12b190b     ......&.......+.
   2207c:	301fc110 f11213f6 39bdec39 24f7fb2f     ...0....9..9/..$
   2208c:	e60104ed f5e302db dd34eefd 1d26f802     ..........4...&.
   2209c:	050dfe16 0e090f07 08fef6d1 cffe160b     ................
   220ac:	f107fb0c 21fb1612 2e34e6f0 faf45301     .......!..4..S..
   220bc:	e0d907ee 05f10cfb defcdffa fef50efe     ................
   220cc:	d203eb02 ee100ce1 0726fff8 fcf5fe08     ..........&.....
   220dc:	f6ef1e21 32e12823 31eb1702 1b06cb11     !...#(.2...1....
   220ec:	02e9ff1c 06000fd9 0814ddde 33a4f6df     ...............3
   220fc:	ecd33023 01162ef4 1ff336fe f1010117     #0.......6......
   2210c:	19e4110c 0a04090c 110ee90e f7efe92d     ............-...
   2211c:	0e090412 dbf80f05 1600e0c7 f113eafa     ................
   2212c:	09152ac4 3cfcdbcf 17e71ec7 f905effa     .*.....<........
   2213c:	fd01fcfb e10c06ff fc0bd602 fc19f7fc     ................
   2214c:	25c5140c 95f8002c f3e9f2f9 e9d8060c     ...%,...........
   2215c:	161908f3 e70503ec 36061a20 2fff1fcd     ........ ..6.../
   2216c:	ed1a0611 d5ef16f8 dd2c06f6 e9fad917     ..........,.....
   2217c:	0203fa0e 0e3a08ec e7c4da00 fbf8f30d     ......:.........
   2218c:	05d8e9e3 09fd16de d5d906f7 e91925e8     .............%..
   2219c:	f805f009 de050ce1 0628090a 0ff32622     ..........(."&..
   221ac:	01e71fdc e7ff03ee 1005020b f3feff04     ................
   221bc:	faf9140b 11fe0df0 81fb1307 0b1010f7     ................
   221cc:	ef06e9fa c4f8f300 f827f503 19181120     ..........'. ...
   221dc:	c007ccf0 1bf1020c 19eecadf 181832f8     .............2..
   221ec:	1503f513 f007eb15 2a18f2e1 18b6f60a     ...........*....
   221fc:	20ee1ff6 f228fcf4 3607f911 fcfbf4f5     ... ..(....6....
   2220c:	a5351209 08f00005 b1ef0203 f8400cca     ..5...........@.
   2221c:	0b01271e f4e71f0c e017f000 f1dee6d4     .'..............
   2222c:	1df20e46 fafeffdd 2431fe06 1609fef5     F.........1$....
   2223c:	060dfdef f6c9ba1e de2a0bc7 06f9291b     ..........*..)..
   2224c:	f50ce21f 04f0030c 0fc112d6 f6ed0e17     ................
   2225c:	eefff10f fbf524f5 0d0e180d e003f6ff     .....$..........
   2226c:	05201e08 18fee635 201216da 03f3cb0d     .. .5...... ....
   2227c:	0e05050c 1e0b19ef 20f40d24 040cfdd8     ........$.. ....
   2228c:	f004eee6 fbeae0e6 f60dd3d4 e60709d4     ................
   2229c:	080ae3fc e0f8ed16 f8edd90e c9091100     ................
   222ac:	0cd601fa e1d910e9 12e0f8e0 f8dd16f5     ................
   222bc:	e5d9bf1f b6e90bf3 f9f8fb22 0cfde90a     ........".......
   222cc:	1407051f faf2ff1a f532f905 19aaf1b7     ..........2.....
   222dc:	f1e2b8f3 1d0203d6 05040305 f201cfd5     ................
   222ec:	f8290bdf fcd3f3c7 ce16e2ea 07f8d402     ..).............
   222fc:	dc13fcc5 daef03fc 20e906e9 edd9a833     ........... 3...
   2230c:	e8f303b7 13bfee28 1b22fef9 d0d822ec     ....(.....".."..
   2231c:	c1d5d7d7 2838b23a a825e624 1821de2f     ....:.8($.%./.!.
   2232c:	4509d9a8 c253d0f0 a80b3816 22cc2207     ...E..S..8..."."
   2233c:	922424be 99a4c921 b0f3e3ad 81c7ba20     .$$.!....... ...
   2234c:	a79b17fb e1f20bc9 40b7a0e4 af36b6c9     ...........@..6.
   2235c:	aefa3c87 9ab1e2b3 8540133b 048c4b91     .<......;.@..K..
   2236c:	df160dd8 d29ed6c0 b4baa212 f923cbb0     ..............#.
   2237c:	e2f6d32a 08f98e8f bac6bd26 bd299c41     *.......&...A.).
   2238c:	e809bc98 28a6c1ad 9b39fae1 2bcf2db6     .......(..9..-.+
   2239c:	d70b2a91 c597ec98 d38fbb48 179be4eb     .*......H.......
   223ac:	3f1eac11 b5ee2bc4 052e88fd 9c37193a     ...?.+......:.7.
   223bc:	f5fd2f9d f6d001ee 9bda21e3 ab1de03c     ./.......!..<...
   223cc:	c10dd128 3dd11edc 030f32c0 f7a5a507     (......=.2......
   223dc:	b6fdb61e 0a26d748 defeedd8 f0bf44e7     ....H.&......D..
   223ec:	2001b326 9795e8b4 d50c8659 b51917bd     &.. ....Y.......
   223fc:	f8893736 05d02d18 9e40df47 f591b2e3     67...-..G.@.....
   2240c:	d32625ee 1e41bfc3 dbd82bb5 3605b752     .%&...A..+..R..6
   2241c:	31f21be3 413328ec 1101c736 cec33ab4     ...1.(3A6....:..
   2242c:	ac18de23 31c543f3 e33c02f0 ea96a607     #....C.1..<.....
   2243c:	ea97c2b4 520f361f 04d432ae dc1433e4     .....6.R.2...3..
   2244c:	d0e82dfc bbee16f8 db299324 1b901f2c     .-......$.).,...
   2245c:	07a2cb90 b999f0ea e2f0e1e4 04fff01e     ................
   2246c:	afcc46a8 e5ed48e5 ba41bccf a5df2fc9     .F...H....A../..
   2247c:	3c19061a bbc091b9 ed40be9e dab0df9f     ...<......@.....
   2248c:	29d84232 e1eb20ee 4bac2311 9e43093b     2B.). ...#.K;.C.
   2249c:	1207abd9 fd1caf07 daec40d8 1b1c1836     .........@..6...
   224ac:	d500c7be ac1cd30d 94ccbb06 0db6c62c     ............,...
   224bc:	01eb35a6 3e0fcac3 3f05219b 393d30b8     .5.....>.!.?.0=9
   224cc:	1f24ab9b a93ed8d3 bd1704c0 3ef55c3c     ..$...>.....<\.>
   224dc:	d2eaf8fe cdc8a2f0 ade9e596 2bd541ed     .............A.+
   224ec:	13c24ddf 1234bc25 2605c921 139da9dc     .M..%.4.!..&....
   224fc:	e8352f9e fa3b233d 5300fdef cc3ae351     ./5.=#;....SQ.:.
   2250c:	d2f6d910 f419a61d f1ab4437 9baedf32     ........7D..2...
   2251c:	cc93e4ea e8c2ae0d b751e2c8 400201d8     ..........Q....@
   2252c:	c12625b5 f9a2062b 90cf17b0 eeccf59a     .%&.+...........
   2253c:	30b1b121 1ce32987 99ed9ccd c8f3011e     !..0.)..........
   2254c:	bb31aef6 f5a6f802 98963cef 21d09eee     ..1......<.....!
   2255c:	c09758fc d33297da c8c3c62e 29002881     .X....2......(.)
   2256c:	16a797b2 39fa92ad 2bfcc895 1e9f9733     .......9...+3...
   2257c:	89e508c4 e9333c19 e4109ed8 a3ce1d15     .....<3.........
   2258c:	10d4fc9f c6c89415 04df920a c7c9d522     ............"...
   2259c:	8e3938c9 e03623b0 d4aeee2c dfae240f     .89..#6.,....$..
   225ac:	d610a045 1f10fd23 382ad012 1f96cdd2     E...#.....*8....
   225bc:	9883d6f3 19175119 1e2e29ca 3d8a9eb6     .....Q...).....=
   225cc:	d88fe3cd b222b01f 1b2d9e3e f410df0a     ......".>.-.....
   225dc:	b40fa7cd f030fadd f331eda9 17d8e644     ......0...1.D...
   225ec:	1b221df3 1f4115dc 92caa8a4 cecac223     .."...A.....#...
   225fc:	8a05f511 a0a3fe9f 252e3aff bee2ba98     .........:.%....
   2260c:	e5e61a25 0bc7a2ab f7efb311 230e8f1f     %..............#
   2261c:	3cec58b2 de2212aa 03a2253f a4efbf00     .X.<..".?%......
   2262c:	04e50bf4 aebd36ae 5aa5f6e4 ae0abdef     .....6.....Z....
   2263c:	07bbabe1 270709fd e5e00e03 fd030b03     .......'........
   2264c:	09211402 0d0201f8 f617f5f1 02180819     ..!.............
   2265c:	fa0601d5 f904f1fb e9150cf4 f3fcd5c8     ................
   2266c:	1dc60a03 191b0aff fc1ff8fe 180221f5     .............!..
   2267c:	08f9350a f9d7f8e2 e30dfc0a ebfe1039     .5..........9...
   2268c:	f4fb2f34 0108e93c fc1900e4 e4d61a04     4/..<...........
   2269c:	021acffa 03de1407 df07ea24 09fa0717     ........$.......
   226ac:	f5f922ea 02fced02 d60bfce6 1b0e2d0c     ."...........-..
   226bc:	10e00016 1bdc2e08 0bfb0039 02f2ff03     ........9.......
   226cc:	f50ae503 25d7fde1 f734fccc 08f7e60c     .......%..4.....
   226dc:	e9ede011 f307c90f fc05fed1 05fcfd05     ................
   226ec:	07f309c6 0f02eab3 fd2310c7 03da10fd     ..........#.....
   226fc:	f60f00e5 03f3fbec 0bed00ef 15fff703     ................
   2270c:	eff30aeb f70cfc29 fb2a3005 28fe0711     ....)....0*....(
   2271c:	09050924 1d3b0c17 1dede1f9 cd0df5e0     $.....;.........
   2272c:	3012011f 1a1acce1 f232e615 0ffff512     ...0......2.....
   2273c:	0b230d33 06385b16 2ff54c04 23180204     3.#..[8..L./...#
   2274c:	00033105 fafcedfc 171a3762 fc19ee7f     .1......b7......
   2275c:	fe58f104 e4030624 f158ef00 0f3c082a     ..X.$.....X.*.<.
   2276c:	13f2f821 252213e8 240fefee f8cdc807     !....."%...$....
   2277c:	d1f6060d 06d222fb 371d18df fc0822ef     .....".....7."..
   2278c:	1504050f d6f8f41b f4e3e801 fbe6ee05     ................
   2279c:	21e8fbe2 19c50d0c f9e914f3 cc080204     ...!............
   227ac:	10e2fcfb f9eaeafd dc0007f7 09fbe6f5     ................
   227bc:	29f4f8f2 f4ff28ee 0d17f6fd 0de6e5ea     ...).(..........
   227cc:	fff7e4e5 fa04f7ec 041a2519 1a0cf9e7     .........%......
   227dc:	f50922f9 260520f5 fc16081a 26050813     ."... .&.......&
   227ec:	1cf60bf4 2e05f01a f01a0917 f60ff5f2     ................
   227fc:	fc20e823 042001fd 1df717e1 e31a3741     #. ... .....A7..
   2280c:	09032cfe 100ff4fe f4032bff 06bff0ec     .,.......+......
   2281c:	0e2c0a4f 1125fa3c fb1e0d00 0b0a1502     O.,.<.%.........
   2282c:	e114fffc f138f23b 0cf41e3d 1f3235bb     ....;.8.=....52.
   2283c:	07e4ffef 05d9f10c cefb210a f5ef9bf7     .........!......
   2284c:	da01dbd2 d601fbd7 04e0180f f3c3fd20     ............ ...
   2285c:	f9f4f907 f0efc207 050ae5dc f91bedd8     ................
   2286c:	f6101f00 080b11c3 e6ebfefc c7150ff9     ................
   2287c:	e608f40d 0307eb0b f8e5f811 ff18eec0     ................
   2288c:	ebe526cb e0dddefe e7f0f80e 10f217ff     .&..............
   2289c:	f1c8fefc 04f2f4e6 f6f90d00 03fde9f8     ................
   228ac:	fc2316d9 f802e711 02f505e0 f00ce6f5     ..#.............
   228bc:	da12f5ed 0afce3f6 00e3da08 d723faf5     ..............#.
   228cc:	0ff71bca e81bd305 fc06d4fd f5df0bc6     ................
   228dc:	e2eef5f9 cdc2fc09 feebcfea 2227e0ac     ..............'"
   228ec:	03be1903 ef0d12c0 dbd3dbf6 ee1bf90c     ................
   228fc:	0cbddd28 ed0c2c13 e8eddcf2 0ae6140a     (....,..........
   2290c:	e401f5dd f01bcceb f818e0f6 f5ddfeec     ................
   2291c:	1ff32e2b 0cc10bfb e110f7fd 06f0bfcc     +...............
   2292c:	ea25e5e7 1716d1ec d5fcff0a 0e0302f3     ..%.............
   2293c:	16040909 f520e4f9 ef1bf90c 03fa07f8     ...... .........
   2294c:	da180113 eef02200 e5defecd cff1ef0a     ....."..........
   2295c:	dde60b0a 03e520fd f7f603f0 dd220715     ..... ........".
   2296c:	fbfc0b0b 1efafb11 0ef3e515 ed2e0cf2     ................
   2297c:	e8d8db00 fafc27e4 1ff6fae6 0bf61bfd     .....'..........
   2298c:	b300fff4 19f1e310 f8110d03 0d32f30b     ..............2.
   2299c:	10020504 14ed0112 fb030efd 1119e914     ................
   229ac:	e707063b 0c14d12a 09241d14 1ee61b05     ;...*.....$.....
   229bc:	060fc7f7 f710fe07 f917e806 f8310af0     ..............1.
   229cc:	fce10c17 039ded0e eafc1eea fd10c601     ................
   229dc:	2303b4be 96fd16f1 32df0d19 06e90105     ...#.......2....
   229ec:	cecd0aee dbed1602 fc07f1f5 28fdf706     ...............(
   229fc:	ffee0d16 25f42d08 0503f5f8 ebfa0ef5     .....-.%........
   22a0c:	b017fdff 1bf4d510 0211edfd ff1323fb     .............#..
   22a1c:	11f9ed0d 141cf3f6 0ee2ded6 f9f90cd3     ................
   22a2c:	051ff0d8 0bf40d0c 04070a07 f9f615ff     ................
   22a3c:	112afd3f 08f51721 1ff5e3e4 bcdefec2     ?.*.!...........
   22a4c:	ffee0311 0d0801da 0014ec07 0987f6ce     ................
   22a5c:	81951907 e62229de 0cff01f8 a00d0c0c     .....)".........
   22a6c:	0a00fa04 22f9f317 c5271713 eeb70c47     ......."..'.G...
   22a7c:	053ebcfd 0a02f8b5 191a12e5 e424e024     ..>.........$.$.
   22a8c:	292203af 31d9da9b 05b337c6 ffe0b9fb     ..")...1.7......
   22a9c:	d3fbf0ce ebf7afcd f01b97f1 dc339bd9     ..............3.
   22aac:	ced013bc 95090c0b 20de2b20 dfb92b1b     ........ +. .+..
   22abc:	cdfc1ce3 00f2dbec 2fde0be0 f80611ec     .........../....
   22acc:	f90f0c16 dfd5330f f712f2f7 d9f0c5fc     .....3..........
   22adc:	ecdad8e3 ff12f8fd 0916c702 1002f4e3     ................
   22aec:	08d2ddbd 08f7fbeb eef10abf 13f40307     ................
   22afc:	f807f10b ef02151e 0324fa1a 05eefb12     ..........$.....
   22b0c:	12d3f8d2 db02c5e0 efff0df7 f8fbe3e7     ................
   22b1c:	1604ff04 cced1cc9 cedc2d0c 021e110f     .........-......
   22b2c:	f8feeff2 db1c03f8 e90bfe0a 130509e2     ................
   22b3c:	e230da13 e6e60310 06f69bcb c7072102     ..0..........!..
   22b4c:	dcf7f2dd 093a193b 371de213 f7abe91b     ....;.:....7....
   22b5c:	03ec12e2 0711effe f605c8f6 02fa0ce9     ................
   22b6c:	d639d7f0 f2f1dfed a8e11700 f13a13f0     ..9...........:.
   22b7c:	0e13d907 1dc40702 c0260701 f500e6e3     ..........&.....
   22b8c:	f608fbde 1d0026ff 0bfbff30 f60c27f5     .....&..0....'..
   22b9c:	3bfffddb da00e625 ed05fcf7 ffc4ee16     ...;%...........
   22bac:	10141323 dde5fa0a e3f5edff 03fae91c     #...............
   22bbc:	e3f20bef ecd81a06 0b0a14fc e7f3f9fe     ................
   22bcc:	f4302d0f f5fcd628 22f004c7 d8ffde17     .-0.(......"....
   22bdc:	02e30707 2a15f513 270218f2 ad1818db     .......*...'....
   22bec:	022ef4dd f022be00 07fdcde3 19d70193     ......".........
   22bfc:	e8031a03 0fc403e8 f608032a dd1006f3     ........*.......
   22c0c:	0faf2a0b fbf33702 deeddfe6 f8301229     .*...7......).0.
   22c1c:	d914b428 ac012044 00ed19ff f4ef0df4     (...D ..........
   22c2c:	d90021d9 0c19160d 2812dbea 0ce61e04     .!.........(....
   22c3c:	27e8ee28 1b3611f7 e61ccacb 16f7eb19     (..'..6.........
   22c4c:	0941feed 142bbbd9 0f19ff2b 140d0700     ..A...+.+.......
   22c5c:	1bf7fdfc 1a2f0b01 03ebfbe7 12e82413     ....../......$..
   22c6c:	c33214f3 04fb2403 f6fb23ef c9f2f329     ..2..$...#..)...
   22c7c:	faeef72e ccf4e703 d01bef22 11ef25f7     ........"....%..
   22c8c:	fe1800f7 10012d13 fd340909 f60d0208     .....-....4.....
   22c9c:	03f3f7be fde22824 170e030b 06f50e13     ....$(..........
   22cac:	10d81c14 e3e42bb2 ec2aeccf e7cbcb03     .....+....*.....
   22cbc:	160c2c09 0620030a 0f1317fc e807f512     .,.... .........
   22ccc:	f7c9fa13 d10f0c10 0cfcfa19 e7f50603     ................
   22cdc:	e9db1ffb f4ba0dec 05d6fd0e e51ae716     ................
   22cec:	fb27e1e0 fc0f16f6 230ee12d 15e834f7     ..'.....-..#.4..
   22cfc:	1f1af111 12fe142f ff07f524 f32c05f4     ..../...$.....,.
   22d0c:	17f8e8df f5f70add 2a13fff3 f2db1e14     ...........*....
   22d1c:	ecfb0e0d e702d62b d8e7fcdb 23ffee03     ....+..........#
   22d2c:	09ea21f9 350b1af9 2513d9df 12e21bfe     .!.....5...%....
   22d3c:	e0f8edfc 19133102 030ef4f6 bde0cde9     .....1..........
   22d4c:	dcfed20c 1ffe03fd 0afcd40c ebfeed05     ................
   22d5c:	0ce93927 15d703fc 31f9f9e6 1312dffc     '9.........1....
   22d6c:	dff80de1 2502ceb7 e4d3ff0e 1bb405c3     .......%........
   22d7c:	ef07fa1f 0df019dc 3cf9472b e10ffe33     ........+G.<3...
   22d8c:	1a0a07fc 221d11e7 0d1f0fec df02fe36     ......."....6...
   22d9c:	0820e64b ededdffa 1c171efa 170914ed     K. .............
   22dac:	322436ef 2d34edf3 f1200fd6 f6cdf6f5     .6$2..4-.. .....
   22dbc:	eefc1a10 f1d02dfa 1ee8f702 f62cec0e     .....-........,.
   22dcc:	090b2424 dee4fb28 ede3e617 10e42819     $$..(........(..
   22ddc:	1c371c0f 00f5231a 21ee13e8 120f02ec     ..7..#.....!....
   22dec:	fc1cf629 c6f4f108 ae0d05ec ebf0dc21     )...........!...
   22dfc:	19cdc903 f836f3ce 0606f2f0 20e6ecf7     ......6........ 
   22e0c:	ebdbcdee 18ef13dc ecdfece4 231c07d0     ...............#
   22e1c:	0603e80b 160df21d 17fa0a05 04072606     .............&..
   22e2c:	02dff8ea d4ebd9c1 be050003 f114c1cd     ................
   22e3c:	e7f1f706 02eafde5 c4a6210a f40117c9     .........!......
   22e4c:	f302101e d10cf725 1bf81df8 4911f6f9     ....%..........I
   22e5c:	fd28f107 13931406 12cda9ec d70e0e13     ..(.............
   22e6c:	0a09e008 da26d306 7b3629ed 2508099e     ......&..)6{...%
   22e7c:	f2dc2cfb fde5c50b 12f62400 f3f3cdee     .,.......$......
   22e8c:	c04e08f9 c6ecc70a dbeb4fcc f33011d3     ..N......O....0.
   22e9c:	b100eaf3 fa00382b dffb0434 e40911e2     ....+8..4.......
   22eac:	15e9fd14 fc0e08b5 240e0f30 f9041905     ........0..$....
   22ebc:	fdfd0208 a4d80e7e 1df2cc17 f2160f9f     ....~...........
   22ecc:	ecd6ed22 0405c544 d1c9d1fa f7ff14fd     "...D...........
   22edc:	e1efee0f ebfe1eef 0ae30bfc 150c01f4     ................
   22eec:	162e1919 e0ec0244 0adf19b6 ce2bd101     ....D.........+.
   22efc:	120d0f18 1dfbed03 2fd7f4ff dc1604cc     .........../....
   22f0c:	f0ebf8cd 100ab121 a60e84e1 33fdf489     ....!..........3
   22f1c:	fa33f00f e2e3ef1a f0aac7c6 df0ff2d5     ..3.............
   22f2c:	fe95d9ca e9063ef5 e9f5baea 17ff0afe     .....>..........
   22f3c:	15bda536 95120a4d d9c6182a f8f7ff05     6...M...*.......
   22f4c:	4106070a f026ec42 a429c702 1fc7e398     ...AB.&...).....
   22f5c:	d0bf030d 5c21ffd7 ce26f4f3 f339c0dc     ......!\..&...9.
   22f6c:	cf2bd909 fd33bd9f c211c723 150dfcfe     ..+...3.#.......
   22f7c:	f6210df9 2c251c03 0a0f0830 0aac0c40     ..!...%,0...@...
   22f8c:	af3928da f6e11e06 c8d7290c 81f8fd34     .(9......)..4...
   22f9c:	c6bf1003 e7c739c3 09d4ad41 240888de     .....9..A......$
   22fac:	e807eff5 0b4ddb00 e6febe29 1ecaf110     ......M.).......
   22fbc:	3845b9ea 8c9bd82d ab99c02b 33a80419     ..E8-...+......3
   22fcc:	4f3f15c9 a4a9c308 a7bb2bb5 ada4b64d     ..?O.....+..M...
   22fdc:	2ce41ca0 dcd65013 cfe21400 5b0baf08     ...,.P.........[
   22fec:	2706d632 35209c39 f00adc38 430af2a1     2..'9. 58......C
   22ffc:	af98ed9a 12ca09c5 169881ff 11b21e16     ................
   2300c:	f74213b0 1c1b2dcf f83f41a4 463ec9a9     ..B..-...A?...>F
   2301c:	cdfdafbb f2b51eb9 2cb048ff e8061143     .........H.,C...
   2302c:	2a4d54f8 a9b22257 92c2500e d7ce0e53     .TM*W"...P..S...
   2303c:	461c04e6 4d0af217 1de153a2 fa29fcf6     ...F...M.S....).
   2304c:	a099e1ef 511204bc bae2ae05 d2feb955     .......Q....U...
   2305c:	f8e60644 53a6f694 9e0ce2c7 31dcfbde     D......S.......1
   2306c:	4521a5ac f9e2e5a1 fa46275e a3659e1a     ..!E....^'F...e.
   2307c:	472dea19 dad11af4 02b8cae8 9c2ea63c     ..-G........<...
   2308c:	a50c5cee ae51eadf 3791d8ad ba379291     .\....Q....7..7.
   2309c:	1c22b9ab 09cc4fc8 d6b799f3 aedc0bc7     .."..O..........
   230ac:	0443c913 2a133e37 b11f0726 47ed2392     ..C.7>.*&....#.G
   230bc:	1c8ad9df f99ef621 41d9da44 56cb2bfb     ....!...D..A.+.V
   230cc:	e8caac17 d1ff3094 bcf72cf0 5c58c3d5     .....0...,....X\
   230dc:	d3fd24a4 3eaf55ec b425f8df 089f4bfe     .$...U.>..%..K..
   230ec:	ed0d08a3 fb4215c1 fdb3d29e 3ae83ef5     ......B......>.:
   230fc:	9747d830 a732ce19 4e190cc7 f906c0f9     0.G...2....N....
   2310c:	0896a429 06f40ef4 e75429a0 02af43b5     )........)T..C..
   2311c:	cccaff31 5e4b0f52 11d7eb3f 9a45aac3     1...R.K^?.....E.
   2312c:	37d7a12f 1614f1cd c7e618e5 8ed13e31     /..7........1>..
   2313c:	449e1421 fc4d2125 15fe2ec4 37a3a3d9     !..D%!M........7
   2314c:	3f279696 ecca3efc 28bed0eb ede125f4     ..'?.>.....(.%..
   2315c:	e7268243 0dded703 adfca63a e786b6e0     C.&.....:.......
   2316c:	c5493f0c cfa3e5a9 e8b1f208 ffb450ce     .?I..........P..
   2317c:	ecb5f202 be913627 52c7e99c 205ca305     ....'6.....R..\ 
   2318c:	b21da639 ff189bba d2a20a97 f8af5afd     9............Z..
   2319c:	854e1595 d84a335d 3bf49a41 3e032de6     ..N.]3J.A..;.-.>
   231ac:	502b9ca6 37a225d9 22aa493c f22defe5     ..+P.%.7<I."..-.
   231bc:	d6cce49f 0bf18721 4009fd1a 373f0d03     ....!......@..?7
   231cc:	3c303825 3cef0a2a c4e136ea e0b4f00e     %80<*..<.6......
   231dc:	fef30345 ce386284 5abecb9c 35e3f8b5     E....b8....Z...5
   231ec:	33fbf837 2dc9f9a3 f70d45e0 8dbdb70b     7..3...-.E......
   231fc:	0e1bdef1 aa42ecf0 9fccd649 1bcf29b6     ......B.I....)..
   2320c:	48c5d2ae 0fa28be2 5513c5b2 11cfd40b     ...H.......U....
   2321c:	ce3e0b2f b13af3e8 3641440a ddf7fa30     /.>...:..DA60...
   2322c:	2ac5f356 c7fed807 fbc942ef 459ba7b1     V..*.....B.....E
   2323c:	bcabcd29 a9c203d7 ac48380b 4c2beec7     )........8H...+L
   2324c:	c0d7a119 f4139523 ddc2ce87 c714e5e0     ....#...........
   2325c:	fbb884da 35285ec4 96d7c249 e82c3402     .....^(5I....4,.
   2326c:	3154e8ba 5a9d03ab 07179be9 5dd30e3c     ..T1...Z....<..]
   2327c:	de092095 e91511f3 c6c3eb28 b698c8d9     . ......(.......
   2328c:	3894ac1b d2f29f09 e217ec92 97e53a3f     ...8........?:..
   2329c:	1dff08d5 0a342b50 0e161409 2702e440     ....P+4.....@..'
   232ac:	524c12c6 213ee842 4fb03ac0 4b11d508     ..LRB.>!.:.O...K
   232bc:	b2f622c6 c3b4c6ce d4bff633 cbeeceea     ."......3.......
   232cc:	03eef2e7 bae4b9c2 140ba2c8 a0dbe7e8     ................
   232dc:	e7d6ff0c 29decb9a de8ee50b da343f3f     .......)....??4.
   232ec:	d4f2c3dd f4e5bb58 e02dd8d6 c3f61cbb     ....X.....-.....
   232fc:	020afbe9 fae6e4be 2410b1e7 dede100e     ...........$....
   2330c:	e106e4c0 04bf08e3 11f50808 58570893     ..............WX
   2331c:	ed04e55a cbefda1f 0be008bb 1ebae43f     Z...........?...
   2332c:	d8fabd88 1bc9d4f0 01f8cadc f0d9e613     ................
   2333c:	afe5c0da dac907da e8e20bec 06a8ebef     ................
   2334c:	f51c4964 e13bf4f8 eab9c632 f419dacd     dI....;.2.......
   2335c:	f0f2eac5 2303bed1 ddd1f6cb af082109     .......#.....!..
   2336c:	02ccdbb7 d5ebb9d9 ebe7dcd5 011bf4bd     ................
   2337c:	473f14b8 e7acd02f e556df09 b78eb7c9     ..?G/.....V.....
   2338c:	c9f9b218 bcf9a8ff 12e8fe21 f7f5b5e7     ........!.......
   2339c:	ede8d8eb f3edf109 2bdfdd1c f1f79dde     ...........+....
   233ac:	df950fe2 d32f1e29 cc1dbaad eeb39544     ....)./.....D...
   233bc:	10c6d0c7 b41219e8 f0e430f7 ced916cd     .........0......
   233cc:	019fa5f6 e90815e6 00d7e5e2 d6d21ae8     ................
   233dc:	09fde8b7 cdc8a4a0 c8fb16e3 ff0c13a2     ................
   233ec:	f4bfc9b2 efa2dfcd fc08ecfc faa1f8e5     ................
   233fc:	dafbdae8 08fa0113 d202ffc7 e0f1f0e0     ................
   2340c:	b02ad202 b4d5101e 2c03f4c0 d1f2d3e0     ..*........,....
   2341c:	c8f5dfb5 d709fbd3 d82ccf0d c5e08cb2     ..........,.....
   2342c:	d6cef3df bc4d1d12 ebd6f7f3 e21812f9     ......M.........
   2343c:	e4ede8e4 effede0c 4b501ff9 c9f30830     ..........PK0...
   2344c:	d60bf531 e0a6a8e1 afecb48e eff9bb1b     1...............
   2345c:	1cab02f2 ade3f3f9 0511dc35 d8e421f2     ........5....!..
   2346c:	14d5d31d bcd9a3f2 09b7faf6 03d9c4dd     ................
   2347c:	fe1086ca dcbaf008 8fbde2db f4f8f4b5     ................
   2348c:	3bea1ffe b6dbf3f8 added20b f3e71113     ...;............
   2349c:	bae9ddbb b1c7eef9 19f7bd0e e0c0c69f     ................
   234ac:	ebeed5b6 d008bcba cbe1c0cc 14f4d99c     ................
   234bc:	f4fbd20e 02d2e70e e8ff0dd1 051cc7cb     ................
   234cc:	d5cf0cae bc02b302 e0e9c717 d8bc01ee     ................
   234dc:	d5e3edd1 e4dae3c6 e3afeee7 f6c2f1e2     ................
   234ec:	eddbbf1c 20fbbacf eab401e2 dae21107     ....... ........
   234fc:	b1ddf525 edeffecd e2a0ac1b 1924d4b1     %.............$.
   2350c:	4e2cb218 aaf8cffd bed7c308 d1e9e82b     ..,N........+...
   2351c:	d4d4f3ab bbfaddea ff9234ff 90f6e50f     .........4......
   2352c:	e828e405 0ed5eef7 1fbcf8c9 dc17a6ef     ..(.............
   2353c:	d79901a2 1bb1d5fa 101bcf28 0a0107c8     ........(.......
   2354c:	d41500e5 06250ee9 52ff0808 bb1316d0     ......%....R....
   2355c:	00f69efa 89341a30 c4e1ebd9 d90d3efa     ....0.4......>..
   2356c:	021fa606 c8e40cdb ddec2ee2 35ca3109     .............1.5
   2357c:	fdd2f140 cafdd0df 09f90c23 0bdc32e8     @.......#....2..
   2358c:	b90ff236 e9fe1c23 ebfbc6ee 3ed5c2e7     6...#..........>
   2359c:	ce050b1d 11cffdf3 04ded818 0205a5ff     ................
   235ac:	e747fa0b d722d5c4 a943dcef 2ff8f4cf     ..G..."...C..../
   235bc:	fccb089b fc09070f aafa022e 81c4d8d7     ................
   235cc:	ab0514e5 f2fec3e6 16e623bd 96d92d2b     .........#..+-..
   235dc:	15f741ba e041f0a7 e1f728b7 b2bbd2c8     .A....A..(......
   235ec:	08aa03eb a3d7eb00 d809b4c4 16efc205     ................
   235fc:	14abac0f ede009f8 ebb32ae7 200a24ce     .........*...$. 
   2360c:	192acee4 12dbdd37 d8fa2f01 e81437bd     ..*.7..../...7..
   2361c:	aadec5f2 c1092aee ae0dfdf3 d4d9f7c3     .....*..........
   2362c:	a54dadd3 d7faca14 14b81706 2a303533     ..M.........350*
   2363c:	21ee1000 ad54cd54 2bedd4fd eef104dd     ...!T.T....+....
   2364c:	15de30fe 07242823 30ce0223 3697ece4     .0..#($.#..0...6
   2365c:	dddef8d8 c6bfd644 c20df31f 9fc5eda3     ....D...........
   2366c:	efcefad4 21cfed68 022f02c8 aeb82630     ....h..!../.0&..
   2367c:	fdf0c4d7 2d0a041d fb3803a7 ebebaeff     .......-..8.....
   2368c:	e6ed44cb 11a933c3 04feea02 b3e3a4f1     .D...3..........
   2369c:	f8cae022 fed9eb0d c3db1835 e4031c13     ".......5.......
   236ac:	daf6f3d6 e1d3edd6 b9f2151c e7e3c8e6     ................
   236bc:	07ab1ee3 baf0d59e 9b2ec0de 8fa52aa6     .............*..
   236cc:	23c6e1cb 27e6033a dcbd12e0 2f1ae7cb     ...#:..'......./
   236dc:	e3f4140c 222ab0d0 fa23f302 b11306a7     ......*"..#.....
   236ec:	edf526e5 f326cf91 9efbf82e 2d05f415     .&....&........-
   236fc:	ced4d5f3 2ff4c3b0 1aae0eb2 efed11e2     ......./........
   2370c:	160bc6fc ede1d1a7 e7c4be4b e0f01445     ........K...E...
   2371c:	d5efe2c6 b8bdfbe2 eb0b1412 b3a8e82b     ............+...
   2372c:	e4c447b4 c8223a94 c3acbff7 dcf6152b     .G...:".....+...
   2373c:	e4ed404a e5f7c449 cab4e307 a6f0d80c     J@..I...........
   2374c:	46ad42e6 dbcde944 200001d1 3bdd02bd     .B.FD...... ...;
   2375c:	260da52a 0c06d536 e6019e4d dfef39f1     *..&6...M....9..
   2376c:	3ed319d5 0fa0e6d5 fcc31dfc d315dc1f     ...>............
   2377c:	bc31d106 0d2b0fe0 1ab4962d b4eb1409     ..1...+.-.......
   2378c:	d0fdc7db b889deed 07031b19 0d3a18c0     ..............:.
   2379c:	162b1599 eca82349 12b5d530 b0fbe305     ..+.I#..0.......
   237ac:	ab44f1d7 b2022fac b4a9c5be e8f0d3f8     ..D../..........
   237bc:	14ddacfb 16f89fb8 2cb1d214 13d9ab0e     ...........,....
   237cc:	181003a8 b20cfcca dac5d8c2 e2e1f7d0     ................
   237dc:	bdfacebf 3c17a6d5 f5efdb9f 35b419f2     .......<.......5
   237ec:	a8a9bbbf b006ee42 ccb1f399 d81ae6fd     ....B...........
   237fc:	e9abcf35 b22ac503 07350902 ae0320fd     5.....*...5.. ..
   2380c:	e6ccffc5 9d33bfba b6ed05fd d781fd26     ......3.....&...
   2381c:	3e11fbab f6bdf4c4 4c8cafba 33a99a27     ...>.......L'..3
   2382c:	f3eecfcb ddcad6fd abecf008 a2aec10c     ................
   2383c:	06b4980c d8b7d4a8 0e1cdeba e7c3e5de     ................
   2384c:	0ec2ef26 c0f4fdb1 fe09b89f 1292ecb8     &...............
   2385c:	121a2714 1fea42bb c4e5d5c3 e3b8a4fb     .'...B..........
   2386c:	daf83d12 f34ab7c4 2d29f6fc f9d1b7cc     .=....J...)-....
   2387c:	bbd1dfbf ee99feb8 aaca1d51 06bb9be1     ........Q.......
   2388c:	e0bc1ced 01372e15 28e20eec ed0ec304     ......7....(....
   2389c:	a4ed2520 f524b5e9 e0c3d8a8 fdb6180d      %....$.........
   238ac:	96f4bbf1 38e4ba1a e1fac70f eebed4f5     .......8........
   238bc:	c99f3cda ad4cf616 1821aed0 2903e20f     .<....L...!....)
   238cc:	a802de07 e5c5a4b9 b3d5233a a91ea9db     ........:#......
   238dc:	fd16f4a0 d3f3d6bf 28da31e5 e6112922     .........1.(")..
   238ec:	fee6e0f3 32d744e8 3b3bba8a a1f6bee0     .....D.2..;;....
   238fc:	b1caf73a 270e141c e5f706d8 b61d05f6     :......'........
   2390c:	00080c0c e00e1104 fc1ebd06 e002080e     ................
   2391c:	030afbde c102f9ea 0ee0ffd9 17fdf017     ................
   2392c:	2324c1fa 16f30107 d00403c9 ee1d14e3     ..$#............
   2393c:	17f8ef16 ef2201fa 1b07f10d 12ee1805     ......".........
   2394c:	18e30f1b 00ee0922 f72fd918 dbe905ea     ...."...../.....
   2395c:	c2f6f210 c70abc37 211011e2 5be0d112     ....7......!...[
   2396c:	5ceedd38 f2cae60e ecf5ebd0 0ef3f5f6     8..\............
   2397c:	204af7d8 c964d702 ead80ff1 29faf153     ..J ..d.....S..)
   2398c:	c8e5f70b bd020d30 dae7da0d dacc12f9     ....0...........
   2399c:	1835f5f3 fa11e6e8 ed02f201 fb262c02     ..5..........,&.
   239ac:	2ce8f6ed c5401a1d 00eaf401 fa2afc00     ...,..@.......*.
   239bc:	08043408 32fd0bf9 ec2dfa1d 341bd2e4     .4.....2..-....4
   239cc:	c70229ea baf8080b 07e51c02 000f0fc6     .)..............
   239dc:	d314e91b eae8ff08 04e6f713 e52011fa     .............. .
   239ec:	060bf7ce f2fcd8ef dfe50d2b cdeb161f     ........+.......
   239fc:	edc80cdb ec1beb04 fff7ff2b fd060417     ........+.......
   23a0c:	0f1b2d07 1aed0910 0b0c3700 caeaf303     .-.......7......
   23a1c:	f31cf50b e1fc02cf cc240b0a 14fefd36     ..........$.6...
   23a2c:	28f330a6 7ff5d121 77efed0c feee0400     .0.(!......w....
   23a3c:	320be82f 19f008f5 fc4fe7fa de6df902     /..2......O...m.
   23a4c:	c6fb06e1 0a07f954 07dae601 e222dcf7     ....T.........".
   23a5c:	0ba9de18 cfe8f3e9 ef080602 f40d2bed     .............+..
   23a6c:	f01bff00 08190a09 2c0005e6 ea2a290e     ...........,.)*.
   23a7c:	fcc80501 0253deea 04e21b16 e1e9d513     ......S.........
   23a8c:	cd02ed28 16f2e712 b4d10adc d2f60c0b     (...............
   23a9c:	f4dd25f7 0af2dedd fc1017cd ccd9050d     .%..............
   23aac:	1ce7e3f9 d52af7ea d30509cd 34f1c6dc     ......*........4
   23abc:	03ae0e0d c60603f4 20edf111 f3ade3f7     ........... ....
   23acc:	0808e4f4 1101f2c4 e700fff7 cbfdfb26     ............&...
   23adc:	e708f1cc f2f415f3 fcdfd629 030dddec     ........).......
   23aec:	fe0832f8 2bd528ef c5eeebfa 3227151a     .2...(.+......'2
   23afc:	51e6f6f8 fff7ea06 09fe130e ffefda0a     ...Q............
   23b0c:	e3e7cf06 16131402 b32eeefa 13e60b30     ............0...
   23b1c:	13081310 f014f0d5 d3e814dc f604cbcd     ................
   23b2c:	f00b1214 07f937f5 09f6f9e9 0f1af802     .....7..........
   23b3c:	1a11f40d 091226e2 eaedfb0a f355f1f6     .....&........U.
   23b4c:	08ff16ce bed3f031 fbed0c08 20fb26fd     ....1........&. 
   23b5c:	ecdb1b01 e1ffeaee fc10eff1 0b0de5ef     ................
   23b6c:	07eaf2d3 ea051403 faf4f5ea 28fa06de     ...............(
   23b7c:	e305f9d0 f8d6ca12 efc2f0d1 e92ae80b     ..............*.
   23b8c:	23f20ae3 10bacfca f0f7dc12 d6e7070a     ...#............
   23b9c:	e7c7dd0c edfe0800 ff14d8de 0af309a9     ................
   23bac:	03eb25f8 ccdabde9 fad717eb fad802a1     .%..............
   23bbc:	f50abb1b fff31a18 0fe902a2 f7011cfa     ................
   23bcc:	e50104e9 0215f4e9 ea00d201 16de0810     ................
   23bdc:	ff0e0d23 db010fe5 0300d1ea 1add0a06     #...............
   23bec:	d72b0cf2 20e6f20a 28d90629 f0f73607     ..+.... )..(.6..
   23bfc:	3528f316 2b2ac7f4 fb161033 050e28cf     ..(5..*+3....(..
   23c0c:	181b35f2 f61df9ea f6e4ede7 f827ff29     .5..........).'.
   23c1c:	30e52f30 18003b1a 4f13bafd 50ff13e9     0/.0.;.....O...P
   23c2c:	0c55cf13 04eae716 190500d1 1a2cf4f0     ..U...........,.
   23c3c:	f615d90e 2acbbf15 dd420c7e 0309eddf     .......*~.B.....
   23c4c:	12f5e937 39d6eac9 e3d7f6c7 0be00bc7     7......9........
   23c5c:	29091fe4 c32ffa7f 37cf200c 18160305     ...)../.. .7....
   23c6c:	c9f90eff 88a3f70f 112bc6d6 b5cbaf03     ..........+.....
   23c7c:	ccd729da cfa0d9cf 080406cc 1d1809a1     .)..............
   23c8c:	20cd0825 fd2030fa 31faf544 ddf513e9     %.. .0 .D..1....
   23c9c:	3b0602f8 be38ecf6 f8fcf59f b9fffe32     ...;..8.....2...
   23cac:	4cfec8dd 02140f23 0af8eb12 f7ff1f02     ...L#...........
   23cbc:	e710323f 00ff4201 e2520cef d5ff3c08     ?2...B....R..<..
   23ccc:	05f7eaee c81c0609 3fc1a629 f80809ff     ........)..?....
   23cdc:	cefcfa21 420e55ed ee10c024 06d8253e     !....U.B$...>%..
   23cec:	fdf2e73c 0ef5c1c2 0c36f406 1df2c406     <.........6.....
   23cfc:	12fabae1 ca3609db e0f814fa 4e12ef0f     ......6........N
   23d0c:	f825140a ce1a38f1 ddf8c9e5 06f8d2da     ..%..8..........
   23d1c:	91ca24bb ddfa0af0 fa0cefcc d0b60a5d     .$..........]...
   23d2c:	cbd6f911 0f17f6ef f909ae01 b5d4f0fb     ................
   23d3c:	fed3d00d 120ce8e9 dbe8e8e5 9ee8fced     ................
   23d4c:	1ceeef23 2cfdc6f3 fad2eb07 143e2e14     #......,......>.
   23d5c:	2902f521 000be91e de1a030f 0e0ee2c4     !..)............
   23d6c:	be12961c 08001616 f3060b0c e6e5e80b     ................
   23d7c:	fc31de0e cd1ff9c5 d006ed48 0cebdefd     ..1.....H.......
   23d8c:	fb211405 dd261f0f d00d042a e1fbe414     ..!...&.*.......
   23d9c:	994eebf3 07fa12cf 17ed270d eadc0615     ..N......'......
   23dac:	dec1e51a 9ce1d915 d1240d39 fd150e52     ........9.$.R...
   23dbc:	10b81705 ea032013 ea2dec40 f3ecfaf3     ..... ..@.-.....
   23dcc:	fbfbfaa2 61e4da5f 650c0bd9 c9322f0b     ...._..a...e./2.
   23ddc:	031e041f ee0413ce c8fbdaa9 123abe01     ..............:.
   23dec:	fd12b601 eb04fa29 ec4d07f0 212f0226     ....).....M.&./!
   23dfc:	fcb00312 b4fb1bde 18ed1fbf eefd48c9     .............H..
   23e0c:	02d5ee21 d70acd18 15abfaf0 ddb8e518     !...............
   23e1c:	fd00e942 0044fdf2 2df5d507 faee01d5     B.....D....-....
   23e2c:	a11b7a4a e91af513 081bd7e9 3b08f7e3     Jz.............;
   23e3c:	01df150b c30cdb00 2adf9621 f10c23d5     ........!..*.#..
   23e4c:	23bbe72d 1205d0f2 28eb0c3e 0afaf3f7     -..#....>..(....
   23e5c:	fb2cfa3c fce1f3ed 0030eea3 11e86fe9     <.,.......0..o..
   23e6c:	1c0dc24e d70cbe0a 06af06bc cd33ee12     N.............3.
   23e7c:	08002509 1de52c1a 0e254a00 2f092d55     .%...,...J%.U-./
   23e8c:	03312332 f6f2e15a 3f23dce8 e00d09fd     2#1.Z.....#?....
   23e9c:	041b1e27 150c041b 3733361f 16073439     '........63794..
   23eac:	fef2e6e7 110bf230 21f0f0fd 2b5b0ef6     ....0......!..[+
   23ebc:	1c32f60b 1f21f835 df881f0c a30e3944     ..2.5.!.....D9..
   23ecc:	0901f9e7 d9df17ec f21a0b17 29c82517     .............%.)
   23edc:	ed811a1b d7c4b90d 0108c23a fe1ffef2     ........:.......
   23eec:	fcef9c38 f8f2ef1b 0d093821 16fef7d7     8.......!8......
   23efc:	d9e89ef4 23c802cc 32ee31d2 c638dccb     .......#.1.2..8.
   23f0c:	14e8c6eb ed091a04 191424d2 fe14defe     .........$......
   23f1c:	f8ddfb68 f8ae0714 093010fa d902b20e     h.........0.....
   23f2c:	0ed5e8f2 02230505 141ad669 0e00fde4     ......#.i.......
   23f3c:	05eeeac8 0ef737eb 0f0ed809 240f1f02     .....7.........$
   23f4c:	061fd8ec 010de607 f0d83a02 312e2619     .........:...&.1
   23f5c:	1219fc1f 0ade0304 e12af924 06d3bce3     ........$.*.....
   23f6c:	0bf71ce3 4ce8f1c4 0d20252a 28ec35e0     .......L*% ..5.(
   23f7c:	e9fc53cf e6c8f23d 34e5fbfd fd13e0f7     .S..=......4....
   23f8c:	0e323345 0c08f21e f73334be 1f22e231     E32......43.1.".
   23f9c:	20f636ef fee7f9cd df17fc15 131f29ed     .6. .........)..
   23fac:	2121f8f8 fd4cdefc f4ef2501 14f56cf3     ..!!..L..%...l..
   23fbc:	39f5523a 15df3afc 2f15e818 f206fa20     :R.9.:...../ ...
   23fcc:	37f208fe 1afff609 09fd0301 18ed4bf6     ...7.........K..
   23fdc:	d9fd2619 120b211d f91509b0 ecd5e8fa     .&...!..........
   23fec:	060b23da 2714f6f1 1711e7fc f0190f1f     .#.....'........
   23ffc:	cbbcfde2 1eec4ab4 d2fd01e5 eaed06fe     .....J..........
   2400c:	31e0a425 57d010d6 f21c0906 fc0cdfe1     %..1...W........
   2401c:	fdd309bd 0034eafa b620110a 1bf0d40d     ......4... .....
   2402c:	cf15ed27 01ea0ffc eee20cd8 1cfdf3d5     '...............
   2403c:	e9251613 1cc84b1b e4fc68fd 17f70226     ..%..K...h..&...
   2404c:	0fb9f6f8 d7faf5f4 4b1a2538 db05d517     ........8%.K....
   2405c:	125234f8 14cee039 fa0d19fc f9ccfecc     .4R.9...........
   2406c:	12ec1d06 5f20d5eb 46f9e2f5 09fd1bf6     ...... _...F....
   2407c:	de06f81d f6ec18dc 06e4f5f5 cd1f1bff     ................
   2408c:	1821f403 fbdfe95f 0dcc1bdf faf1fbd8     ..!._...........
   2409c:	2028eded 900d0c02 feff21f9 14f524e0     ..( .....!...$..
   240ac:	faf90823 e60b0f07 922b092b 19cc19f4     #.......+.+.....
   240bc:	dfeed93f 0067d1e5 face100a faedf3ef     ?.....g.........
   240cc:	f0b01e0a fcfe0c08 3af0afe5 51d515ec     ...........:...Q
   240dc:	f311fcf5 2d0cf401 0feae6d2 f43b11f5     .......-......;.
   240ec:	d112e8f4 ceedece9 f2120308 04fae80d     ................
   240fc:	f81400f8 0d22e4ee bad5220e 12f468ff     ......".."...h..
   2410c:	04057ffa f13ef6fc dfe80e06 15e4f7ad     ......>.........
   2411c:	f016d522 1ff3df3e 014ed504 c79adeed     "...>.....N.....
   2412c:	23fb10d2 e2f611c5 170b1216 5418ccef     ...#...........T
   2413c:	3ed92df9 f3f81ff0 39f21b40 eae0c10f     .-.>....@..9....
   2414c:	0103e518 e823d1f8 d121e40b fae9077e     ......#...!.~...
   2415c:	3cfcbad4 41fd3303 f01213c5 0028060f     ...<.3.A......(.
   2416c:	4302202d 480430e9 2430102f 0f203cff     - .C.0.H/.0$.< .
   2417c:	1029fffa 1bb03444 d9201c25 ee120f23     ..).D4..%. .#...
   2418c:	e5faf134 f2263ef3 03fa30eb 160414cb     4....>&..0......
   2419c:	d6f5f9e5 fed920ee 001fd40a 290305df     ..... .........)
   241ac:	f62dfc0a fc0a171e 01e4f2f9 f2e2e8ea     ..-.............
   241bc:	fe2008c7 db26001c 02061914 ea03f208     .. ...&.........
   241cc:	100d09fa 15092020 050a17dd 172901eb     ....  ........).
   241dc:	dee0e60c d6f003f5 f9efaf1f 2605d93d     ............=..&
   241ec:	fcdc01e1 fc172616 0d09d9e6 00ffec0e     .....&..........
   241fc:	00fbbd2a f0393218 13f139db 0002e9f8     *....29..9......
   2420c:	0efe2324 07331b0c 0515db08 ecd412d2     $#....3.........
   2421c:	35fa0e28 0952ee0d 060be9ef faf91f13     (..5..R.........
   2422c:	ca151cbf 32ffccfe 2127aa46 0006b90c     .......2F.'!....
   2423c:	3c2d06a5 0130cef5 f1dbed12 fab31013     ..-<..0.........
   2424c:	f427f4ae 0ea8480d 2b373df3 121eec15     ..'..H...=7+....
   2425c:	04e4fc08 2ff501c4 ecdc0c0a 0ff40cea     ......./........
   2426c:	0100ff0d 2909e31d 0b18f71b 09400b09     .......)......@.
   2427c:	0ceeceda 03eb04d4 eb230309 ddf8e9db     ..........#.....
   2428c:	c3f702f6 1a03e5e4 5c121ccc 03e1b8fd     ...........\....
   2429c:	e5f2e8f9 1fd90a02 14c90b08 fd02f0f9     ................
   242ac:	0bc8f612 2b02eaa4 0acf4422 e5f7f60d     .......+"D......
   242bc:	07b0c5f4 d0f2ceb8 f4f8f01f dc48440c     .............DH.
   242cc:	0de1ffd6 08a8cdfe f5fa57d4 fa1ae3f9     .........W......
   242dc:	fa02c4e1 dba629e4 56e63744 edf5f7d6     .....)..D7.V....
   242ec:	a5e1d8f0 0bd504ff f42a00f2 3c04dac8     ..........*....<
   242fc:	f401cf28 0209f6ff 43170de8 0a34210e     (..........C.!4.
   2430c:	0518101d 2fe418f9 0c2827ce fad248e2     ......./.'(..H..
   2431c:	d5ee1197 d3e4041e f9e2e411 1e0ffbdc     ................
   2432c:	2d2bd8ee 28e01825 00e11b0e 06fb0337     ..+-%..(....7...
   2433c:	fd0c0323 1e52d9fe fc31c1d2 c0dcd0d4     #.....R...1.....
   2434c:	fd03ef3e 05f509e2 000b0021 e0db05ff     >.......!.......
   2435c:	ade8fdba e7f609e8 e3fe16fc 921207de     ................
   2436c:	fc0ac5f7 e50f1206 deb3e0f4 e0d913f7     ................
   2437c:	fc53dae9 f2c8fec9 e1dc15eb cabac5b3     ..S.............
   2438c:	05e80ed6 e9b008db 01f0d70a 05ba03fc     ................
   2439c:	0afcbcc6 e91fd513 aa0dd500 0002bd06     ................
   243ac:	090c26f1 13c0011a 0ceefde6 81c42deb     .&...........-..
   243bc:	ccebd6f0 18d7defb 1bc6e822 03f40212     ........".......
   243cc:	05d0f3f7 1803de00 f3160334 39bef2e4     ........4......9
   243dc:	141f29fc 00f01334 0917ddf6 19451207     .)..4.........E.
   243ec:	248f2acf 151b06e0 4911a9e8 41ec07ef     .*.$.......I...A
   243fc:	f4fbef02 ed0f0234 f0f91e13 3032c8fa     ....4.........20
   2440c:	ec2ad61c dcecc6d1 d90afd34 ffd60bdf     ..*.....4.......
   2441c:	fe121529 0de80216 9fd805e6 35c360d9     )............`.5
   2442c:	f90a5de7 d021fe1f fbf2c8f8 db21fd19     .]....!.......!.
   2443c:	e9b6ed05 8dc20831 0162c8ed fbe2e8de     ....1.....b.....
   2444c:	d0e1f7e9 169324c9 f5caf0f7 15f9e1ec     .....$..........
   2445c:	290e01e1 0919100b 0bf5bc26 e6e00c0d     ...)....&.......
   2446c:	03090c20 2d09fc0a bbf1abec ee030535      ......-....5...
   2447c:	fef80e0b 1bd3ec9c f5e3f4e2 dc09eff6     ................
   2448c:	11edf2e6 18080b1d cfe8ff25 14d913fc     ........%.......
   2449c:	11160aeb 2dd6ebe6 e307f2ef 03fc0a2e     .......-........
   244ac:	25ffe325 01091ce9 e6def7e0 1d25f0f4     %..%..........%.
   244bc:	352f00e9 0cd833ee 0a01f50a f8f71d2b     ../5.3......+...
   244cc:	16ebefff 0f25c0e3 f5fdea30 c1e7dff8     ......%.0.......
   244dc:	e71efaf1 f2e70911 13153112 0dfa230f     .........1...#..
   244ec:	0cfef129 31ec5723 030b36fb 3024f51f     )...#W.1.6....$0
   244fc:	f513d3fe e40c1e0f 13f3fa38 c30dff29     ........8...)...
   2450c:	f43ff606 06ed061b 0d16fa03 13d81f13     ..?.............
   2451c:	16e5e109 fc1c17de fe14fff5 fdf2f4f5     ................
   2452c:	13051713 15e7f419 fc0ed5ef 0efd0bd3     ................
   2453c:	fae2de01 11d507fe ebf22c0c 012300f3     .........,....#.
   2454c:	0615080c ecd60fc9 eef101d9 fc0a0219     ................
   2455c:	eeedf515 faf4300c 0df31df7 01c2f6f5     .....0..........
   2456c:	f50107ef 01e1eafb 2a1c09fd eff00822     ...........*"...
   2457c:	eefcdffa fd09fbec 0f29eedf 39f8e63d     ..........).=..9
   2458c:	eef4ddf0 d8fe0811 0ddc1041 17eef803     ........A.......
   2459c:	0b0d02ed fec9f314 08e60f42 0506381a     ........B....8..
   245ac:	05371cf7 25e50dee f3f637de fef30be3     ..7....%.7......
   245bc:	22fdf7f3 e21e1000 f2aa0f14 d31bf608     ..."............
   245cc:	eeeba1e7 dee11a14 0a040018 2636f30d     ..............6&
   245dc:	000e3ecb 1be90bfb 051103fc e334f011     .>............4.
   245ec:	ddc918d8 fa2b3bf7 e6f30743 e12110ed     .....;+.C.....!.
   245fc:	ecfce624 18f8ddd5 ff18c42d bf29f005     $.......-.....).
   2460c:	f6da07ea 25caddfb e727f6e8 0c01e7e3     .......%..'.....
   2461c:	f826154c 28f73deb 1b45febd 072d0f00     L.&..=.(..E...-.
   2462c:	c1e80020 10ec5423 ea04db18 f5f022db      ...#T......."..
   2463c:	f1f51ce8 cbd909ff ececed41 dbf7ee2c     ........A...,...
   2464c:	01fdfbc3 0cf60d14 eff9d111 fcfae9f6     ................
   2465c:	0201e110 d8e41ae7 d511eefb 04d401e3     ................
   2466c:	2bf50028 ddefaca6 e11a1f18 fffbf307     (..+............
   2467c:	c4fe22ec e3f9f28c f6ff07e7 81fa0a47     ."..........G...
   2468c:	ff1215f9 221205e6 ece5e3d3 debc01dd     ......."........
   2469c:	04f5c6ef fae72f0a eddaf718 e7dab8fc     ...../..........
   246ac:	3d261085 f3d4dfef c5d31301 0a4cdd11     ..&=..........L.
   246bc:	e80aed97 f509eed4 851e4025 22f1c566     ........%@..f.."
   246cc:	e525f8d0 f818feac e6e0f2ea 0ff33205     ..%..........2..
   246dc:	0a4b0a1f ecd51941 46d70f29 f6fe16e4     ..K.A...)..F....
   246ec:	3534f549 f405e702 ce1bf820 23bc46f8     I.45.... ....F.#
   246fc:	fd121ad7 04e8e5c0 cadfcf0d 0f200302     .............. .
   2470c:	28f82b04 ecf1123d 092b1223 f50c1222     .+.(=...#.+."...
   2471c:	f3c70b05 f7f20514 09e70416 1a0decff     ................
   2472c:	0e1613e3 0f003733 040d010d 16efeff4     ....37..........
   2473c:	1edbf3f2 f905f3e4 d7e8a9fd f832b922     ............".2.
   2474c:	cdefc408 08f10d0c 053dbeff 2d03f20d     ..........=....-
   2475c:	07d12188 d72203d7 12ce21c9 1be215e3     .!...."..!......
   2476c:	bdc5e906 fde1360a 5830e6fd d6dec807     .....6....0X....
   2477c:	94e7eb30 0812f4f7 03eec012 11cae115     0...............
   2478c:	e31b3e05 01ffff3e cefc21c9 462005a0     .>..>....!.... F
   2479c:	2cea1e31 f43536e1 f7150463 ebfa3a2b     1..,.65.c...+:..
   247ac:	16d009f6 ee0203fb 39f50311 30dce405     ...........9...0
   247bc:	0bfb19f8 07cf3314 23fbe4f3 fdaefd05     .....3.....#....
   247cc:	3308b82e 183e3421 11ee2cbe f31100e9     ...3!4>..,......
   247dc:	2e010a0e 1d1019e1 ff3427f1 050c0613     .........'4.....
   247ec:	16f51513 fa1baf12 19e72e16 f5012c23     ............#,..
   247fc:	fa01f7d4 17e3562b 22ba1e00 f3e912ec     ....+V....."....
   2480c:	09e9cff9 21dfdc15 ecfdf1ef 3305ee10     .......!.......3
   2481c:	fa0df60b c2031b1f 15fbe5fe eb070fbb     ................
   2482c:	09f5f0f9 3345edf0 19ff01db 21d24dd3     ......E3.....M.!
   2483c:	f6eebb05 d9182323 ccea1313 f2f10807     ....##..........
   2484c:	ea032402 fbe2062f fa11a917 0305d90e     .$../...........
   2485c:	02bfd707 2c09fd04 feca0c01 0e1b26b2     .......,.....&..
   2486c:	cd100e16 2b31f100 f5e1b913 0ff5fa2e     ......1+........
   2487c:	1805fbbe 4305ce04 cfed2216 24c515de     .......C.".....$
   2488c:	d9fefcb5 0dc91d05 160f170e f8392000     ............. 9.
   2489c:	e4f30502 d7439fe2 a424fd15 d6a93ea9     ......C...$..>..
   248ac:	e8b0c3f0 b643be94 0b08fa86 90aba81a     ......C.........
   248bc:	013ad3b7 1642edf9 3afa1bee ca0a39ff     ..:...B....:.9..
   248cc:	fa0fa3bb 0018e5d6 b324d48b 90b5a8d5     ..........$.....
   248dc:	aa4fb1a1 cae6e841 0810c1b7 dd17ecae     ..O.A...........
   248ec:	09eb9b0e a998efc0 fba5dda5 e1ea29d5     .............)..
   248fc:	d0afd8ac 2b109bb9 f304aea9 fa2d33c6     .......+.....3-.
   2490c:	8b0d90d0 07979305 f8d72c93 09e722a6     .........,..."..
   2491c:	a0aa32c1 332136e9 96c438b7 be3043d2     .2...6!3.8...C0.
   2492c:	14f0f7c6 d4c098a6 1539cfb1 8d08af00     ..........9.....
   2493c:	a0bc1e9c 3cfe9a28 f7c03a8f eba2d81f     ....(..<.:......
   2494c:	27f02add d0cec5f8 c622e509 11151b19     .*.'......".....
   2495c:	c62b1724 cbea10f8 eef89d0b 96b4bb4b     $.+.........K...
   2496c:	9f83b3bc edb8a30b 11d8ce21 f2d9d495     ........!.......
   2497c:	f730e6e3 1daf98e3 b1201f10 acdd091f     ..0....... .....
   2498c:	0405f6ac 19bf3f04 d643ccd4 a42c2ab8     .....?....C..*,.
   2499c:	d7e011e8 21e02ed9 81ad18e1 384ccd0f     .......!......L8
   249ac:	f7b9162a a625fd20 9cea460c 0c31202d     *... .%..F..- 1.
   249bc:	e9a31a05 2a550920 2abb0a37 2e01e81a     .... .U*7..*....
   249cc:	c99edc26 f0a19f28 a2f79607 cfc2dd51     &...(.......Q...
   249dc:	c957f686 4da596ec 2cf696a5 1f87cf23     ..W....M...,#...
   249ec:	18ba2fe3 3616ae44 c0e3fa43 34060c0d     ./..D..6C......4
   249fc:	cce7d985 3421c38b 84a5a7cc 24409705     ......!4......@$
   24a0c:	dcb0f184 0cef8db1 a7c9fdaa 0be694c7     ................
   24a1c:	90ace4ae 32b8f2a8 fd40a8df 931e31e3     .......2..@..1..
   24a2c:	fe2fb9a7 933a199f e4c4d2b1 e2a828fb     ../...:......(..
   24a3c:	d7200025 103a1c19 e9fa02de de3e062a     %. ...:.....*.>.
   24a4c:	22e0bb08 31f9a8f4 0c06e59a bb1433cd     ..."...1.....3..
   24a5c:	e9e80bfe aed4d0aa 09853c8b de322918     .........<...)2.
   24a6c:	293cb3c0 fad107aa 3d97361a fc9e2ec5     ..<).....6.=....
   24a7c:	8dcf2fe3 df8f2223 ec171fe3 ab051ef3     ./..#"..........
   24a8c:	2ea0e3b3 c09e9aff 16fcd63b 163718be     ........;.....7.
   24a9c:	d23f1ca4 bb34e841 e23c0027 abadcdb1     ..?.A.4.'.<.....
   24aac:	cf8cc027 0b959f31 fec2bc02 d316bbc2     '...1...........
   24abc:	ec0b29de 261eb4ff 38eac78e 112db91b     .).....&...8..-.
   24acc:	c8f0042e 9626feb9 b89fdac0 1003dbcb     ......&.........
   24adc:	0fa59a3f 30c6ea93 e01dc81d 42e805a4     ?......0.......B
   24aec:	301f26fa bc3fa8df c331ab1c ace816ff     .&.0..?...1.....
   24afc:	c80aaed4 c22116ac 3ec61340 d6d237b2     ......!.@..>.7..
   24b0c:	d2b2bd19 fdb645ad 34b11e2b d02e04de     .....E..+..4....
   24b1c:	35a52ac2 3794d0ef e7c1b2ea 42dac20a     .*.5...7.......B
   24b2c:	39112d01 10e72945 e531ec2c d805e1a8     .-.9E)..,.1.....
   24b3c:	c2b84d59 01dcde31 c92bef06 aee7239c     YM..1.....+..#..
   24b4c:	368f411f fca79845 39ecb9c6 521d87c3     .A.6E......9...R
   24b5c:	d5dbd3bb 15249ec7 e5a90dd9 50d3c80d     ......$........P
   24b6c:	b45025a5 e823b4cf 3ebac5ef 0db6d29d     .%P...#....>....
   24b7c:	c4cf2ccd 14a622a3 ba19e9ef 15f6c1a9     .,..."..........
   24b8c:	d2f9ca31 fc27d83f a82599a8 094f95c7     1...?.'...%...O.
   24b9c:	d1a6f1a1 16bd1211 eea15302 f9bda509     .........S......
   24bac:	bcf809c7 e8c4bbeb bd57291e b00ae797     .........)W.....
   24bbc:	3619a7d6 180c0fd5 0fe2d1ff fdf5fb13     ...6............
   24bcc:	0800f8fc 11f5ecd6 0901ec00 1a0e07f2     ................
   24bdc:	de210903 cff200cb 07050903 e40cd6cf     ..!.............
   24bec:	ba12f62a 1cd0db04 eb150bec 07fa2506     *............%..
   24bfc:	150d0b00 03e0fa16 100221f6 1320f319     .........!.... .
   24c0c:	09e70229 0c11f531 07fc0cee e3e3f50c     )...1...........
   24c1c:	e912d6f3 cf0701fc 07eb11f8 f13bf107     ..............;.
   24c2c:	f5ebdc07 fb20e707 27f7fd12 130d2813     ...... ....'.(..
   24c3c:	0d310422 0df527fc 27faef27 130d00dc     ".1..'..'..'....
   24c4c:	edfbe5ef 0d13f001 1f07d405 d2011ef4     ................
   24c5c:	de280621 e2f91bea f135fce5 f8021b04     !.(.......5.....
   24c6c:	f0fe1bdb effdf722 0b12e4ff ff161dee     ...."...........
   24c7c:	d0c52217 f004fcd3 de10ef1f fcf0f723     ."..........#...
   24c8c:	f010ec1d ed032918 fbf1e3fe f30c07ec     .....)..........
   24c9c:	0bf5241e 03f9f31b 1a0934db 0910d618     .$.......4......
   24cac:	38000903 1917d01c 411400e5 0e240fea     ...8.......A..$.
   24cbc:	f514cecb 1cfbe0ff f004ef17 d1eb090f     ................
   24ccc:	2707e6f9 0b2001fd 27d5e2e6 e3372cd8     ...'.. ....'.,7.
   24cdc:	00c3090e ed0c13e7 c5cf15fa ffc21ef0     ................
   24cec:	ccd8f50d e911f1fe dd11ec10 0b0f0b06     ................
   24cfc:	d001fa00 0a0fff07 f4c61709 14e606f9     ................
   24d0c:	1621d81f 13b5f8ff 0ae7d9f0 070edbba     ..!.............
   24d1c:	1609d5f9 01f4100a 1212092c f704fff4     ........,.......
   24d2c:	240109f9 2b09eb05 e90d02e9 fcf80116     ...$...+........
   24d3c:	d709f71b f7130200 baf2fa10 fdfff6da     ................
   24d4c:	04fe200b 0813f2fc e91e230a f333f8f4     . .......#....3.
   24d5c:	0c0efdfe e7f6fbf0 f7d10af5 0a011218     ................
   24d6c:	04d52009 4639fb1c 0ef9ff07 18f609f4     . ....9F........
   24d7c:	1113fe02 18070201 0dde130a ee17dffa     ................
   24d8c:	0002d52c 0efcf80b 0be491fd 18ec0acb     ,...............
   24d9c:	28030b1d 1e05f0ec 00ab2b2f 2e06e1d2     ...(..../+......
   24dac:	06e10cdf f4f2f3ef 172a15d9 20f5f581     ..........*.... 
   24dbc:	de051907 0ae9e4fd aef60cdf efcfd9ce     ................
   24dcc:	1103f5c4 b016e629 f4f824b2 d7cdf1cf     ....)....$......
   24ddc:	d7d62a0d 09f02514 0fdafe14 e8bf3d0c     .*...%.......=..
   24dec:	fef017fb cdf402e4 19f9fe08 00c9f3f6     ................
   24dfc:	13ea03c3 db080221 28cdcff6 0b01b4ee     ....!......(....
   24e0c:	0310c1f5 2615f6f1 e9f5ddf0 0af82729     .......&....)'..
   24e1c:	f12513da c0081308 fce0f0f6 ec072623     ..%.........#&..
   24e2c:	0cfaed1e 01ff1be9 ffef050c 0002031a     ................
   24e3c:	d8dd0727 ffcac8ca 1e230008 153806fe     '.........#...8.
   24e4c:	f9f72115 ec2dfd17 0503b1fc 0613fba1     .!....-.........
   24e5c:	ca03a7f7 d6b61bd4 00192205 2406c405     .........".....$
   24e6c:	030302d5 e9001dce 0820ded7 de24fc21     .......... .!.$.
   24e7c:	172c1407 33f7f008 efda4f1b f5bff9fd     ..,....3.O......
   24e8c:	cc0119e7 fcfce5e2 081ca3dd b0370f3a     ............:.7.
   24e9c:	0fbc34fe 1e03f7d1 f2e9f802 24fb3f3b     .4..........;?.$
   24eac:	04080004 f42cfb0f 470f0e2b 0505e2ef     ......,.+..G....
   24ebc:	1115fc13 372801f9 f632f8c5 09e53402     ......(7..2..4..
   24ecc:	d11bf917 0b020ff0 f2fa0d15 152f0b02     ............../.
   24edc:	01e6251b e5decb97 ddec292b aeaabbbb     .%......+)......
   24eec:	2d9736aa bfcbdbe4 eef38e47 cf1c071b     .6.-....G.......
   24efc:	8dff07f8 0987b628 c1eeb451 02e1ff0d     ....(...Q.......
   24f0c:	f5ff2ddd 1bf3df09 a2dfa898 acfbb312     .-..............
   24f1c:	cdb2ca16 900c4ecb 25c3adca 1b2e0dc8     .....N.....%....
   24f2c:	c5c9cdcd 9dbfc60a a81c4102 3655f6f0     .........A....U6
   24f3c:	9d9ee91d c333c5c5 1828972f 8afb262a     ......3./.(.*&..
   24f4c:	a2ece8e9 efca15f2 2844f5b8 ab31e036     ..........D(6.1.
   24f5c:	a00511db 0e9fb8b4 2fb917bc e212c2de     .........../....
   24f6c:	b11fc007 cbf9f295 39d9c002 e5fa8efb     ...........9....
   24f7c:	f3e9838f d4c9a1c2 9c32df1a 482d2fdd     ..........2../-H
   24f8c:	30b0b2cf 2687a6fc 1b960ea7 2eb6df38     ...0...&....8...
   24f9c:	4cff28be 941aa99b f9d0f0eb bc1602ab     .(.L............
   24fac:	89e6bc30 1809e520 59eb4124 36f7c326     0... ...$A.Y&..6
   24fbc:	f5efc8ec 07d3a8dd db17f82b c62f22ae     ........+...."/.
   24fcc:	f0c23ca0 d2151621 f99706d4 88a146d3     .<..!........F..
   24fdc:	ea13cf1c aa1699b8 a34afc2f 841625b2     ......../.J..%..
   24fec:	2fb0ef44 3b4bc592 f12b43a3 1d162fef     D../..K;.C+../..
   24ffc:	45b01ecc e9f9d2ab 19febf12 e71902e6     ...E............
   2500c:	9705ef32 faae18ef 2c300586 d7bf3f13     2.........0,.?..
   2501c:	a9c1f3b2 f3d49c2e 9d2e0ac4 fc8e88d8     ................
   2502c:	b9edc19e bc8c0d22 34e3f9aa daa7ceef     ...."......4....
   2503c:	9ea49032 b3ee9f19 feaae58c acd310f1     2...............
   2504c:	afd0a9a0 e5a20b3b 053bd90d 8805f21c     ....;.....;.....
   2505c:	ccaf4cff af0138a1 d14acc9b b9a1191e     .L...8....J.....
   2506c:	ccd90e2c 2710de06 cfb7294e 0bd4c800     ,......'N)......
   2507c:	1817bdde 260ee0fa 4cebf2ff 00dbed01     .......&...L....
   2508c:	0811f9a7 c1cdfa0f d5a24cde 220310cd     .........L....."
   2509c:	d09728c7 8dc4112e aeed2814 a29904bc     .(.......(......
   250ac:	2ed636bf 05ca5505 a1d39859 d9fec62e     .6...U..Y.......
   250bc:	b7db2b28 a21f18c3 06cad8e5 fb3190d3     (+............1.
   250cc:	eafdc9e4 d00204dc c91d1330 e6041734     ........0...4...
   250dc:	a4fdd9dc 2aabe4aa bfb3b61e f0da1db6     .......*........
   250ec:	c8a3e700 d1042b98 a4a3d000 f7c5c481     .....+..........
   250fc:	91eb3119 25c1b3e4 b0cc2ca2 fa8a1499     .1.....%.,......
   2510c:	ebc3c51c fface10c d4c83723 1dc9eef4     ........#7......
   2511c:	1c0e0a46 21f7b1b2 99ba3bce e110e431     F......!.;..1...
   2512c:	f75997df bf14b6de e80ca200 0c1532e4     ..Y..........2..
   2513c:	00c6c0d2 0818bdde 0019b5de ca45ece5     ..............E.
   2514c:	13c30395 15c31e10 d7cfea9a dba3bde8     ................
   2515c:	ced62cb1 07d1dc1f 08a0b0ce 3128ed37     .,..........7.(1
   2516c:	b594b294 c0b0ff1e b01ab89f e7f61af7     ................
   2517c:	1bb4f606 f6b6284d 98dcbafd f2f94990     ....M(.......I..
   2518c:	b82e8fa4 3a2dc6a9 ace8c290 34ad12e8     ......-:.......4
   2519c:	e608e1d3 ece9bfd4 37c22ddb 2599fd3c     .........-.7<..%
   251ac:	eeacdb44 eef498c6 9b88d4c6 f8e483fe     D...............
   251bc:	93b00bcd 14e4ed20 8c8f15f8 b4f02e9d     .... ...........
   251cc:	a13214b3 a29cb48c 112df200 bcf22dae     ..2.......-..-..
   251dc:	aa2bb6af ea880f10 26d9d640 92dbf40a     ..+.....@..&....
   251ec:	a488ccf4 c5a914e7 31b89daf 26113629     ...........1)6.&
   251fc:	09922190 de0e3fcc db0bb4d8 cb04f6cc     .!...?..........
   2520c:	dcd90ee4 9f2cc3d8 01e7b003 af1aebf4     ......,.........
   2521c:	e0f3c8d1 212703d2 b4ac3b02 df120247     ......'!.;..G...
   2522c:	09c01cbb 13c714ab d39ac2f5 eecb8c1a     ................
   2523c:	8635ed0c c5eb069f fbd2bf1f bda53b04     ..5..........;..
   2524c:	f2e8f7c2 3afb86e6 f7810bd1 d1f2b001     .......:........
   2525c:	07a79cc4 8e09c421 d6f9f7e4 f5d6d1ee     ....!...........
   2526c:	1a12a9d5 2aa5e0f3 960697b3 32ebc3d2     .......*.......2
   2527c:	ccb386dd 929f0ace 139322d7 c6b8c8d9     ........."......
   2528c:	88126d3e e4e8a7af f9d4c016 a919f9af     >m..............
   2529c:	9c3df6bc 8609f9a7 d4b3f3ff bedd0de3     ..=.............
   252ac:	dda3e7c9 0c13c611 16e1e10f 34e8f0ec     ...............4
   252bc:	1136bad9 eca9b00c a2f106d7 fcead0da     ..6.............
   252cc:	0ae80e93 9f24cced edbac732 ef431db1     ......$.2.....C.
   252dc:	33c7c19d cd36d3ad cb24d4cb e7b742f5     ...3..6...$..B..
   252ec:	a7a3fcf4 f3ac33e0 cda0f828 043230c0     .....3..(....02.
   252fc:	93dfd598 fea4fbf6 0aebdc0e 01030ca5     ................
   2530c:	3504ec1d b00526ca 0cccfdb9 f307d59a     ...5.&..........
   2531c:	bc02d9d0 c8bcb6bf 20d8ef14 f388e3df     ........... ....
   2532c:	c9e339be bfb6dc0b e815e016 fbf1e8c1     .9..............
   2533c:	99f8a9db 08e001db 1916e2f0 b5e025ba     .............%..
   2534c:	0ea3b3f2 cfa533cc b0250301 d0abf6f4     .....3....%.....
   2535c:	d61687bf a50cbce9 f5e4b6ce b9210f24     ............$.!.
   2536c:	f3ff17a8 f4cc9925 ed04c600 eabce3ca     ....%...........
   2537c:	bbd9d108 c8cfcdb6 52edc6b4 0aebde07     ...........R....
   2538c:	fedbbbdf 29d6eded ebecbecb bef4aa28     .......)....(...
   2539c:	08dee1f0 c144bde9 35229a0f b0efd7fd     ......D..."5....
   253ac:	dbcc32ff b7ab49e9 e2c723f4 b927fab3     .2...I...#....'.
   253bc:	178becf4 d2bd15b7 dbf6eaf9 1abc1fe4     ................
   253cc:	b115e21a d19e139f c9a4d5df cebbdfe1     ................
   253dc:	b4d1ed16 10cbca9f 232df426 46e40603     ........&.-#...F
   253ec:	b028d9bc ace5bc10 e2b3d41d c809c4ec     ..(.............
   253fc:	aa093bb3 cbaca7c6 c6f52410 e5f3cdc5     .;.......$......
   2540c:	c9d7c61b 9fc0c6f2 da1bebe7 e2c63707     .............7..
   2541c:	ecef21fb cfc108f3 d4c41cb8 d997f7df     .!..............
   2542c:	b991aff7 b5cbd8f6 c79bddac b5c2b8f5     ................
   2543c:	daf5d1d5 ccdfcba2 bf25c9e7 31f6e9d2     ..........%....1
   2544c:	14320df7 e2bb09ec def793d4 42eab7dc     ..2............B
   2545c:	ecbac6c9 d5dbb02f 21bbfd0a 0af305a2     ..../......!....
   2546c:	15c20a16 ddd91b95 b3320485 cae4ecc1     ..........2.....
   2547c:	e4c8e3bd c83208cd 99daccab 26dbb8fe     ......2........&
   2548c:	c1d1bef6 05d9eeb1 94e5e00b f4fc35c7     .............5..
   2549c:	0d06b015 c9e8c9a8 c6ab99e8 2717d6ea     ...............'
   254ac:	2de5f2a1 0adbaee2 9bdae0b5 ad33a9c4     ...-..........3.
   254bc:	a98becd2 9898acae b5a8da02 2efdd021     ............!...
   254cc:	a4ddd1ad f5c70399 a8acd1c2 8caed2e9     ................
   254dc:	ddcab0c0 b606e79c a1c2dfcc e5e614e9     ................
   254ec:	ceefaa1d ccacb293 a1d6cb01 8223c9d7     ..............#.
   254fc:	caa0eb04 fcf99bdd 9de92ea3 0cb5aa17     ................
   2550c:	0faac6fc 13b5f6d8 56e329b4 abfecfdb     .........).V....
   2551c:	93e2f8b5 02eccf29 c3d4b1b6 d3d29e9c     ....)...........
   2552c:	daf72854 b5e7c1ba d2e6e3fb f91df043     T(..........C...
   2553c:	a191becc c10a383b 1902c123 b3dedb33     ....;8..#...3...
   2554c:	fc2f2925 12012fb8 1f2a0ea5 c29eaa1b     %)/../....*.....
   2555c:	2f522eef 9da04608 3a0e3006 240ea4ae     ..R/.F...0.:...$
   2556c:	9da82fa4 328ca09b 12c72eeb d0480307     ./.....2......H.
   2557c:	1095fcc5 cea6f610 2f18ebb8 24b101c2     .........../...$
   2558c:	09a6aba3 3d2d3a3d 37d51ad6 e22bdf0e     ....=:-=...7..+.
   2559c:	35b9e6fb 22903099 9423f719 9f0bb0c9     ...5.0."..#.....
   255ac:	ba3525c1 16c6e0b8 171bf4e9 d6a58d8a     .%5.............
   255bc:	d026a32e c3fa3be3 b3c4ecef c19bcfde     ..&..;..........
   255cc:	91a5e2f9 0ee6e823 1de5cc1f 04cda63c     ....#.......<...
   255dc:	05bd0d00 e6b2e5fe 08f02297 31331123     ........."..#.31
   255ec:	bdf6192c fff42221 48dabeae 4a0ba0dd     ,...!".....H...J
   255fc:	1da93ad6 42f81c45 11baee8d 03c0d3c7     .:..E..B........
   2560c:	d8fb5cd3 1f1fdf3e e111d7a2 bdbdfbe7     .\..>...........
   2561c:	20b48935 8e9c1093 eee2d418 e6c003e8     5.. ............
   2562c:	df1d3a39 f4dad7ad ace59937 91193794     9:......7....7..
   2563c:	371bf603 eb1f2e10 d1e2b8f6 cecc30fe     ...7.........0..
   2564c:	408e25cb a0d22b34 dccba21a 0094e93b     .%.@4+......;...
   2565c:	3af42cdb e7f3cebf e6a2e101 c11ac6f8     .,.:............
   2566c:	1d0920f8 351fbf43 aff9d0aa 0be8bef0     . ..C..5........
   2567c:	2baadf2a 1e2db2c7 e23f1df8 48080eab     *..+..-...?....H
   2568c:	b52bf6b4 c50c08e5 961b29a6 dac50109     ..+......)......
   2569c:	2ceed833 f2dd3c32 c405d9fb c2f0f613     3..,2<..........
   256ac:	b40618b9 e3ef00aa 13f44ae9 c0b8fb28     .........J..(...
   256bc:	ec02dc0c 36fea3c8 d83bbde1 fcb1a83d     .......6..;.=...
   256cc:	9e22ec32 cccdd03c e7f01bf6 e6fd07e3     2.".<...........
   256dc:	a1122c00 02aae4e6 f4cd3c06 f899ab4e     .,.......<..N...
   256ec:	41c6363c 27e8b9ea 2de42920 9ebb2504     <6.A...' ).-.%..
   256fc:	d2f2e80e 9aca20fe 46ad26ff 4ab0f997     ..... ...&.F...J
   2570c:	962d9abf 1529e904 042cfab1 ad2f9905     ..-...)...,.../.
   2571c:	0ae5ded6 e2eab400 c2d2efb8 31f1c634     ............4..1
   2572c:	edd3cc45 0db5daaf 25ef161f 1fbdf7fb     E..........%....
   2573c:	ed3342b2 d1e303d4 2c201706 0fbcc30e     .B3....... ,....
   2574c:	17b3038a a2ecb7bb b222aecb e8e2ddc1     ..........".....
   2575c:	9ef42e04 eb28efb0 15eccb9b 3ed63d2b     ......(.....+=.>
   2576c:	5be1ec24 29e697c4 01ddca37 989fc501     $..[...)7.......
   2577c:	071e0efa 020a1ead a9cca4f9 d2b1d3cc     ................
   2578c:	c1cb0fc3 97f510e0 bd0414cc a9093816     .............8..
   2579c:	b41febd8 039da843 e000d893 fdc2f420     ....C....... ...
   257ac:	2db7d2ba b6a281e5 29bb9931 03e1e8b4     ...-....1..)....
   257bc:	3b13e02b fdd5351b dbf8bbe6 1026beb9     +..;.5........&.
   257cc:	e4e406f0 e8f0cfe3 0bbf4834 d5dfdbc0     ........4H......
   257dc:	008346bb 300c0a29 d5d0c8b8 fbf69642     .F..)..0....B...
   257ec:	0f10e401 a1c9d390 f1cd2a06 2eb1e1de     .........*......
   257fc:	9138ea8d 29b8bb22 01c315f0 e4cdb495     ..8."..)........
   2580c:	c792b19b 9b0623fc 9a402bf9 bdaf3111     .....#...+@..1..
   2581c:	d629e5f3 1e0eb855 b2d639e6 c9b7a3a6     ..).U....9......
   2582c:	33844097 ba91c5b9 d714b32d c1b8c1de     .@.3....-.......
   2583c:	b8d7af05 faef48ea f9dea912 0c0837fa     .....H.......7..
   2584c:	0a5af8f6 f9f0b2c0 fcfb2ebf 08db255d     ..Z.........]%..
   2585c:	240bfc07 ff09fc07 c5070a6e fd04dfed     ...$....n.......
   2586c:	31ddf5c9 2c1d06b2 f421ec2c 26f80104     ...1...,,.!....&
   2587c:	0f0b1afe 0f0ff6e1 2e04f5f5 f511fc35     ............5...
   2588c:	3e0423c9 d0f40930 fb06fe28 d7e6ef0f     .#.>0...(.......
   2589c:	0e054815 29d93eec cefb091f 062310fc     .H...>.)......#.
   258ac:	e5251325 04183104 e80ff82e ff227513     %.%..1.......u".
   258bc:	1b99fb19 2d1a19f1 0e35e617 2bf3fb08     .......-..5....+
   258cc:	3528e6f2 232110de 2c251ce1 15ec3427     ..(5..!#..%,'4..
   258dc:	ff311c23 1a0712fd 29e00eb1 e22cdcf9     #.1........)..,.
   258ec:	dad50612 e9080d23 10fde12a 09fcfefd     ....#...*.......
   258fc:	dcf123ec f506e2fe 11161d3b 04fb22d2     .#......;...."..
   2590c:	23d2d0ed 250bfbd6 0f26e500 f0fec7f0     ...#...%..&.....
   2591c:	eac410ce 03081714 08f11b2c 0cfbe8b6     ........,.......
   2592c:	d3fd0b51 fff5cfb8 ebecf7d8 ceb8d7e2     Q...............
   2593c:	02b93f2d fde8e4d8 130df527 17f6fb05     -?......'.......
   2594c:	ddb01211 eaff04d8 0ef688ef f9d0e5eb     ................
   2595c:	0dbde7f8 c1ded41c 2cf709b4 0f03fac3     ...........,....
   2596c:	06ded6fc fe1800c7 d80122c1 eff9fc11     ........."......
   2597c:	ecfd1dfc 0be104ee d4c4de0a f5d50af7     ................
   2598c:	d114f4fe c119f8c4 f9d5f8c8 07cb17f8     ................
   2599c:	03122bc8 ecd61904 0d33292a 45fc16e0     .+......*)3....E
   259ac:	18ecef0c fa46e507 ba01f4fa b80822ff     ......F......"..
   259bc:	f01eda3a 0656e4b4 f3e02a1e 1102e30d     :.....V..*......
   259cc:	fc0af748 1a042a11 0946f2e3 fcd53230     H....*....F.02..
   259dc:	0ff0e7fd c7f42640 f1f5de21 fc02fe0a     ....@&..!.......
   259ec:	082bfaa4 dbefe62e 0403f92e fcebb2d6     ..+.............
   259fc:	18fdee18 cb2ffbfa c7dad9cc e9538e0c     ....../.......S.
   25a0c:	fb0993f3 eb270bbc dc120104 fae403cf     ......'.........
   25a1c:	cdbbaadd 140ff4cb fbdaf1ee d2b92ec8     ................
   25a2c:	caf7fbd9 d926f6e0 13cee12a d4d9f8d8     ......&.*.......
   25a3c:	dadef316 efff0d0a 33f6e615 f1e7ae0c     ...........3....
   25a4c:	8111fcfe 07d1b7cc cd1f03f2 1902f795     ................
   25a5c:	0ecf04dd 09cdff0d 131a0501 f6ceebdb     ................
   25a6c:	0b181c54 0bf931ca 41f90737 fd192df1     T....1..7..A.-..
   25a7c:	1700010e e4f4ff33 041aeff4 090a20ff     ....3........ ..
   25a8c:	c7d4033f f827ef16 ee051b08 2e13fbde     ?.....'.........
   25a9c:	ec390406 e8dc1530 f11efff0 39f92810     ..9.0........(.9
   25aac:	04071d09 284c1805 db35ff05 fc0ae602     ......L(..5.....
   25abc:	284709fa f8dd0f15 fc19ff3c c10fee5a     ..G(....<...Z...
   25acc:	2c11ebcf 05e28a30 ebf090d9 2b0d0b9d     ...,0..........+
   25adc:	0b1cd902 ccbdffe0 f0a5fe1f fb28d4ca     ..............(.
   25aec:	03ad3ae7 150217f1 f6e3ebf5 f5ce00dc     .:..............
   25afc:	bdcbe834 ac142d25 b5db15fa f40101fb     4...%-..........
   25b0c:	370625e8 f7f7c119 02f4d0e9 0fd61190     .%.7............
   25b1c:	24dd0238 3800fac4 ec10f41e 16e9e0c0     8..$...8........
   25b2c:	d44211c5 1509d89f db24ab1d 0ef7002b     ..B.......$.+...
   25b3c:	0406f6f5 0b2d3510 1f08f511 16c31cf8     .....5-.........
   25b4c:	e8402fc3 0ad64900 c21a43fb a9d70234     ./@..I...C..4...
   25b5c:	b6ce2417 3cb4eb41 b92bfd01 3ddea5e1     .$..A..<..+....=
   25b6c:	afbcba0c 0df125b2 c10fdcca f83435dc     .....%.......54.
   25b7c:	99d8c69d 370c50f6 35da31b6 b80a40e4     .....P.7.1.5.@..
   25b8c:	30144c9d 3613be29 abca112d 37d10816     .L.0)..6-......7
   25b9c:	020fba10 eab4050a 24e4d4c2 3eab2f0c     ...........$./.>
   25bac:	4105e02d 2dc6fbb9 b69db2f8 02eb3546     -..A...-....F5..
   25bbc:	06010027 3b0fc7b1 01f7459a d92a3227     '......;.E..'2*.
   25bcc:	1aafc9f0 0939bb28 32fe99a1 b39debdf     ....(.9....2....
   25bdc:	9a28893a b5c0c537 ecd1bebf ec2e2c13     :.(.7........,..
   25bec:	29fd5ad6 a6d59bfe d3c59d33 b329b6e3     .Z.)....3.....).
   25bfc:	af59f6e2 174732e5 4bfb1bff 33c9cbae     ..Y..2G....K...3
   25c0c:	b702fa3c c048aec3 c6131329 02c6aec8     <.....H.).......
   25c1c:	a3b5d8b7 18e60a1d edaa2322 3abc08e8     ........"#.....:
   25c2c:	2ecc0e2b ecc3edad 1912d4ed b420cbb9     +............. .
   25c3c:	2a970739 f206a3b7 bc99dc31 b4e73ff9     9..*....1....?..
   25c4c:	9420e0de 3b095c38 90b99bc1 023119bd     .. .8\.;......1.
   25c5c:	f017f98f e6def805 e5a801fc fb9fd710     ................
   25c6c:	b694c8d2 2cf4a822 2d0ea8aa c2f3db09     ...."..,...-....
   25c7c:	36aeaed6 c7269a05 10c11831 3914b8bc     ...6..&.1......9
   25c8c:	cf89d4d0 aa12dae0 92d139ef a9a32bf1     .........9...+..
   25c9c:	144e19fe ccd447c2 a7f4e7da c9d2d4b9     ..N..G..........
   25cac:	2523bd11 fed50598 fc32efb6 df1c06bb     ..#%......2.....
   25cbc:	afe0b0b4 1d889ecf adebc908 c64d36c9     .............6M.
   25ccc:	11405399 b5da0e10 254605a2 2aff9f2e     .S@.......F%...*
   25cdc:	e99ea296 e337a8e3 b34af6a3 fcb1fda8     ......7...J.....
   25cec:	f5972d0a 3831f0e5 8436e02d 84323fb9     .-....18-.6..?2.
   25cfc:	d3fea1d9 15d5e2cc a40c43fb 41e02f13     .........C.../.A
   25d0c:	dbda861d 2dc44645 d0a8fb1a abf6f6fb     ....EF.-........
   25d1c:	de9a111f 192daad9 0336ac93 bfd82be8     ......-...6..+..
   25d2c:	3d45e6c4 2ab6c8a1 2fdee311 e9e1acc5     ..E=...*.../....
   25d3c:	13a21f3f 4cb23f11 dd32effe 00bfcce1     ?....?.L..2.....
   25d4c:	bf0cd90a c6e2b614 ec15e2ad e9403bfc     .............;@.
   25d5c:	dabbe92c a5c2b0cb bdd0ba09 d9e5e8f9     ,...............
   25d6c:	30c495e9 fdf410fa f13ccdad 2ef639f0     ...0......<..9..
   25d7c:	3a183fe8 fdbddd33 acd33f18 2029f130     .?.:3....?..0.) 
   25d8c:	4a89fe19 3f3acc30 423f45f8 cd0dc225     ...J0.:?.E?B%...
   25d9c:	db1cd738 e6411938 3f18e896 3781a093     8...8.A....?...7
   25dac:	dc3cb606 b344ed9e b611933a dbf998c5     ..<...D.:.......
   25dbc:	bb1e1526 86fb25da 1c2fc536 d99e089c     &....%..6./.....
   25dcc:	25444ac3 e891aff1 b140a30a 30d008e4     .JD%......@....0
   25ddc:	ce194940 bb36c75a bfa9ac0a ec43f081     @I..Z.6.......C.
   25dec:	ef05ae3d 473ea7a8 1022140e eff0cdfa     =.....>G..".....
   25dfc:	3c2cbece 38140bbc c3d1d8fc 3727e4da     ..,<...8......'7
   25e0c:	db92a7c4 24fcec04 25a7a112 269640e1     .......$...%.@.&
   25e1c:	e5d827ba 02e449f3 01c42acf b9cc3cce     .'...I...*...<..
   25e2c:	ace41be2 bc27e6aa cdc0efe5 ddb5f1ac     ......'.........
   25e3c:	302def91 beaf19e0 bdcce610 e79ec105     ..-0............
   25e4c:	d3e597ff c636942c c602baa4 fa4891ff     ....,.6.......H.
   25e5c:	2331d8bd 40ccf0eb c3fec408 98b5b2e8     ..1#...@........
   25e6c:	c9f6c226 41ce9927 42ae27a4 0336caae     &...'..A.'.B..6.
   25e7c:	ce1923e8 040ae305 d8e6fad1 baf7efd8     .#..............
   25e8c:	01fedc0a f70805dd 18c8e1a7 c21305f3     ................
   25e9c:	e497efc1 d720edfc ae02efc7 f7e8f205     ...... .........
   25eac:	e996f2bc f023edeb f3abf8f3 080ce619     ......#.........
   25ebc:	e100f3f0 33e002cc d4f2fd0e f9db16db     .......3........
   25ecc:	e3c1cdfb 0be6d7db 13c6caeb e3e605ec     ................
   25edc:	f90406ea e204fa22 11eee5e3 f221f207     ....".........!.
   25eec:	d4c82e30 f6f5f8eb 0bfd11ea 0f23ed2d     0...........-.#.
   25efc:	f235e8f2 e90fc7fa dec6de05 3a1cfae7     ..5............:
   25f0c:	c9e5f1b3 000ffc0d dcc0dcfd d72bfa10     ..............+.
   25f1c:	e319cf09 190cf9c1 f4eb04e3 e74c34ee     .............4L.
   25f2c:	03c71af8 9d0e3555 e0c50f26 07d0cc84     ....U5..&.......
   25f3c:	e2ca302d 110ae432 f417ea35 1fd3cfde     -0..2...5.......
   25f4c:	cbe1d30a e4e7d802 0afac7f9 0402d4a8     ................
   25f5c:	0bc0f0f7 e62121d3 eae31505 0c05e416     .....!!.........
   25f6c:	e1d9f4ea f2f73a11 d8eaee81 06dcc61a     .....:..........
   25f7c:	0e002a1f 1b230807 f30715c8 14c10a37     .*....#.....7...
   25f8c:	fc08080a 153002bc 07edfb48 240edfea     ......0.H......$
   25f9c:	fcfd1007 e8bc221c 0e14e009 ef23151c     ....."........#.
   25fac:	edeee91c e330f928 e3d81d00 fefafd03     ....(.0.........
   25fbc:	14f8141e f5cfd62a e633f004 03fdc110     ....*.....3.....
   25fcc:	1e2bc111 15110001 fee5edd3 0f33e90b     ..+...........3.
   25fdc:	da08071a 0c3ddb00 e100b008 1401fb1a     ......=.........
   25fec:	f2fa12ec 1e3bf701 0309fb1f 3bde350b     ......;......5.;
   25ffc:	9b3119f1 0d0a060e c6cf1205 de213437     ..1.........74!.
   2600c:	0df13c1d 1dd305ee 1e00970a 15e4e30b     .<..............
   2601c:	0ffbe203 eb06dbe1 09f6f808 f1130ef4     ................
   2602c:	de1f100f f3e4f6f0 1bc7061f ccf9e0c1     ................
   2603c:	dbfbe8cd 15e4c1fb c10ee700 213016c9     ..............0!
   2604c:	ea0b2df8 0502094e 46ee2903 205afe09     .-..N....).F..Z 
   2605c:	1619ff26 05ef2419 fc38f10e a08efe34     &....$....8.4...
   2606c:	fd181c0a e314f7fc f404f0e0 c71d2100     .............!..
   2607c:	ecf609e9 f2e30107 ff0ffcf8 0bfc0afb     ................
   2608c:	f0e2063c 07c602ff 3b16023b eae8f5f9     <.......;..;....
   2609c:	0bebf2f3 26eef6e6 ddf828ec 490305f3     .......&.(.....I
   260ac:	06c8b122 050ae04c 290d040e 3325d102     "...L......)..%3
   260bc:	1623fb0c 70d523da 1e152cab 01cc242a     ..#..#.p.,..*$..
   260cc:	3a41f0cb 2bbe0e34 3ff04116 25fd22e2     ..A:4..+.A.?.".%
   260dc:	1fe40017 47e80d06 0c242907 3508f91c     .......G.)$....5
   260ec:	edf5e602 d3540136 f72404f5 cbddea10     ....6.T...$.....
   260fc:	fe04f339 f0082a19 1ef3f4df 031322fe     9....*......."..
   2610c:	04f1f6e2 13c6f21b f20d1b05 fc37fb24     ............$.7.
   2611c:	150ae813 2a2804ec ffeef81f c01d40ee     ......(*.....@..
   2612c:	0317e4e5 fbb5d414 e6f52bd9 0fd913e1     .........+......
   2613c:	f1d50722 b11b06e8 bf02fe11 fb3713fd     ".............7.
   2614c:	caf2fb29 0b1820f3 d9deec45 0bdb17dc     ).... ..E.......
   2615c:	11e81a00 e7ed12d1 0ef706de 07d9eabe     ................
   2616c:	ee35eed4 11a3e1e3 e71ac10f f30b8132     ..5.........2...
   2617c:	fef604b7 fe28b311 1711172c 00a0e8da     ......(.,.......
   2618c:	2528f6ae 008ffd05 1b49f985 0ccfe707     ..(%......I.....
   2619c:	ebec0fee edfbe8c4 eaa7dd0c d41417d2     ................
   261ac:	efeceaee 0609dedc ef2004da cefe140a     .......... .....
   261bc:	26f42abf b016f1e6 cc07f834 10ffffef     .*.&....4.......
   261cc:	01c6eef4 09e0139b ce2cf2c0 fca100d0     ..........,.....
   261dc:	08050c20 cbf905f1 210af10e b235e929      ..........!).5.
   261ec:	11cee0ce e2e614fb 0b36d11c 0efdf1ed     ..........6.....
   261fc:	ccac2518 219a37e9 d0b3e9f4 d80cce09     .%...7.!........
   2620c:	d0ff100f fc22ed02 160ae334 edf02930     ......".4...0)..
   2621c:	ec091c31 3bd613eb e91bbc24 14d31025     1......;$...%...
   2622c:	23160e20 4d2fecbc 151d00f6 84e73410      ..#../M.....4..
   2623c:	0638ef0c fa01cd14 dc52f8d0 d0093ff5     ..8.......R..?..
   2624c:	fcbef6c0 f415e612 01eb101e 0cd1c71b     ................
   2625c:	fbe60113 061de6fc 0f28f412 f9ea0a03     ..........(.....
   2626c:	f3041900 182f01d5 0a14f00d 0df4fcbf     ....../.........
   2627c:	03ee00d6 dff6f70d fdc6d315 2420da0a     .............. $
   2628c:	c11ff82b 0ff3ebd3 21bce8de e71e22bd     +..........!."..
   2629c:	13e606f6 02d6d805 09efce3e e4bb0565     ........>...e...
   262ac:	1cdbf1ff 071719e5 3edf0404 0f1a1db3     ...........>....
   262bc:	eed02224 e021d2ed e8c53916 28ce43a7     $"....!..9...C.(
   262cc:	13e8e7cb f51016bd f048e2cb f223f7f5     ..........H...#.
   262dc:	d70407e7 f1ad1bf0 f00d13f4 15a01b12     ................
   262ec:	2e32131b acd3f2b9 10eff8ff fcc7ea9a     ..2.............
   262fc:	0ab8d505 0ed4271a f3db0ce2 ef052417     .....'.......$..
   2630c:	24e4fe17 08ed340e e2de0dad f50c2425     ...$.4......%$..
   2631c:	24edeaf7 10f4e51d f1e2d706 1713e1d8     ...$............
   2632c:	cd03e2ef 2a0c3e5b 05fb38d8 f9f31d2a     ....[>.*.8..*...
   2633c:	f815f3fd 1c100210 eff1f8f8 f30d1716     ................
   2634c:	e2f4aaf5 08d635f4 20e5fb36 c61fbfde     .....5..6.. ....
   2635c:	f026cd13 041ede33 14b01bd6 f651ff07     ..&.3.........Q.
   2636c:	f9f0c8f4 e7d5f1de ce16f5f3 06ee041d     ................
   2637c:	f7cdbef7 3b14180a f72006f8 bff042a5     .......;.. ..B..
   2638c:	df1cb30f cb090028 42cb14f6 3cbba008     ....(......B...<
   2639c:	0e0ae838 f2964afe 00eea8ef ea0eb3db     8....J..........
   263ac:	d428de09 1b38cee7 9a161afd f9c0f341     ..(...8.....A...
   263bc:	bf1b1cbb 0510a91b 320ab03a a90e49ed     ........:..2.I..
   263cc:	d12751be 2412500b b0fa0a09 070408ec     .Q'..P.$........
   263dc:	f7e2eae8 fdd15763 30ed0979 032981e4     ....cW..y..0..).
   263ec:	0ccf03c6 d80bf148 aa13ed3e f30b0423     ....H...>...#...
   263fc:	ee531ceb efd63239 f714b306 f70f45ff     ..S.92.......E..
   2640c:	1624415b 4618d5f2 f3cc09ac 20dabe25     [A$....F....%.. 
   2641c:	4c0bfcff e6edd1eb 142edb16 f80d2610     ...L.........&..
   2642c:	10eeabaa 0016d516 04f6c9ed 07f2febb     ................
   2643c:	dc14c512 b326ebdd 0884cff9 d2fcfae3     ......&.........
   2644c:	f2030cca f81c29b9 c0d4deea edd0ecf1     .....)..........
   2645c:	c7cacaf1 1517fd23 0effffe7 fcd537fd     ....#........7..
   2646c:	0bf49eee e5d614ec d313a61e 22281219     ..............("
   2647c:	f80eb207 07d00a59 f6fb1de9 1619ecce     ....Y...........
   2648c:	f3d2e6df fd2ad1eb 1ace271f 2203472f     ......*..'../G."
   2649c:	e0340a07 7ef4baef f425f4f0 55e45fbc     ..4....~..%.._.U
   264ac:	9b35232a f832fa16 00ddd606 e20d1c27     *#5...2.....'...
   264bc:	efa84d02 1e0420de e681d0c3 b5093916     .M... .......9..
   264cc:	0b2fe0ff e1f39aec e519e5dd add42c21     ../.........!,..
   264dc:	0eff0e29 d1f508e3 e1f0fe16 07fea2ac     )...............
   264ec:	f2c2cfb6 04e1c6e3 0919f00e 2e2430d7     .............0$.
   264fc:	16f80efa f8d5fffe 06ee07f2 20130f38     ............8.. 
   2650c:	0614112f fc15e135 f20f0209 cabaed28     /...5.......(...
   2651c:	eef3d11d cc29dff6 061fe1ec 01431001     ......).......C.
   2652c:	d4f3e442 f7daf708 f4072df5 2ffe0e37     B........-..7../
   2653c:	4628f308 070bebf6 f9cd0f34 26e3080f     ..(F....4......&
   2654c:	d206e6e5 16330721 c93e1126 10d52124     ....!.3.&.>.$!..
   2655c:	205b083b f313c4ed 243701c9 c214f803     ;.[ ......7$....
   2656c:	f6f318f8 e00bdb01 08f5f701 feb1200d     ............. ..
   2657c:	eee84c00 16350501 15331e0d f122d431     .L....5...3.1.".
   2658c:	d4ffe7f8 dc135400 f54108f7 120a2924     .....T....A.$)..
   2659c:	ed162135 fbe01259 4db41606 d20de708     5!..Y......M....
   265ac:	1a38fb10 442ee309 5610160f 090f4eb8     ..8....D...V.N..
   265bc:	def6e020 16392518 1f090208 00421007      ....%9.......B.
   265cc:	3ef12e0c 170bf910 ee0cdb1e b60d4c31     ...>........1L..
   265dc:	020d0112 12ff0f22 f122200a 081d321d     ....".... "..2..
   265ec:	f409e605 0722f4dd 0912f047 02bbf9f8     ......".G.......
   265fc:	11051d67 06122e20 54e6afe5 22161f06     g... ......T..."
   2660c:	eb22ce18 15f20925 1ce1c3fc 351dde22     ..".%......."..5
   2661c:	d399100e ebd11810 d55bff04 2c090e17     ..........[....,
   2662c:	f8de02d2 29161bf6 eff935ee c20f230f     .......).5...#..
   2663c:	daddf834 023307ff 8ca71712 140f05bb     4.....3.........
   2664c:	fd1ecc3f f331ddef d2f043f7 ee3805dc     ?.....1..C....8.
   2665c:	f90debed 0efe1bd2 e4e932f2 13e10b3d     .........2..=...
   2666c:	349c3c0e 255cfb0a d521f7d9 28062ab3     .<.4..\%..!..*.(
   2667c:	2bba132a faf013d3 fbd910ef a7df1e08     *..+............
   2668c:	cff81a12 cd18fa01 dbb500f6 debe12ad     ................
   2669c:	1903a601 10e5f0f1 ecaa0600 27f4f3f3     ...............'
   266ac:	15bb0ad9 d3e5dc0a f2e1d0f1 2e00e9c6     ................
   266bc:	2cf4e6ef 09102208 300df040 010bc4dc     ...,."..@..0....
   266cc:	15d4d508 c50ef4f0 bb04eecd f0f1013d     ............=...
   266dc:	0cf02a0f deeafee3 f5dfefb1 85ae17db     .*..............
   266ec:	ab411c26 f7f51310 e040fd14 0f442af8     &.A.......@..*D.
   266fc:	330319fe fa2f5908 bfbbec16 f116aa01     ...3.Y/.........
   2670c:	b9b51bf7 bcd9f5fb ba1ff735 323616fb     ........5.....62
   2671c:	d30911ec d00337c7 fde6ebf7 c1150c02     .....7..........
   2672c:	fb0609f9 0ef4d808 07d204bf 0dea1107     ................
   2673c:	be0b01c6 18fae8ee 0ca0144f df300de6     ........O.....0.
   2674c:	ef27d1ab f3f3eee6 000de1f8 dc220fd8     ..'...........".
   2675c:	fcf6b0fc bcfc1726 11daa9c8 01040ef5     ....&...........
   2676c:	e2ed26c9 9fc2d9be e799f000 f4baddb1     .&..............
   2677c:	dbe9d53b 27f7eefa 30e921eb efea0a0d     ;......'.!.0....
   2678c:	1702fb3d f42d08f0 1a94cc07 0704f3e1     =.....-.........
   2679c:	150901ff ef0b0712 2f1bcce3 25d400f8     .........../...%
   267ac:	a53dfe9f 08dedfdf 1335e11f 0e04dbfa     ..=.......5.....
   267bc:	0637faae fe3a02f2 0f02101b 020618bd     ..7...:.........
   267cc:	92372010 0aef05f7 c1d214e4 8c180e08     . 7.............
   267dc:	fd1a4136 22d21012 0de1240e b3e9f1fb     6A.....".$......
   267ec:	07fd2001 ccef07ef edfe0fff ca2fe202     . ............/.
   267fc:	d8eafdd8 fbf4fe0a 00dcfe05 ddee451b     .............E..
   2680c:	c6e2f698 f004cae7 f70d0de1 d6dafb1a     ................
   2681c:	f3f0c926 0dd913af e031d510 f4b624ed     &.........1..$..
   2682c:	4cf93958 0718f6e8 07a9f8fc 540744bb     X9.L.........D.T
   2683c:	f595bf26 e4ecce20 12d425fb d5e81237     &... ....%..7...
   2684c:	980d0e1c ec1bea0e 0a0de6a9 06eefd09     ................
   2685c:	fe230412 21af2df9 31a2ff19 30f703c6     ..#..-.!...1...0
   2686c:	d337711b dd1610cb dc0ab1e1 ee1ff525     .q7.........%...
   2687c:	f730ca20 02f894cf 17e4fd42 bf2f4001      .0.....B....@/.
   2688c:	40d90dc4 bd40f247 17090cf4 0caa28cb     ...@G.@......(..
   2689c:	2d1b310e 18f30a52 ef31fc1f 4e11edd1     .1.-R.....1....N
   268ac:	030025ed 9d010c0c f5efdff4 da10ed0c     .%..............
   268bc:	f5d61ce9 b5d5312a 36f3d117 fbf805e3     ....*1.....6....
   268cc:	e5db0ef5 02edea03 f8eaf087 05f31b20     ............ ...
   268dc:	171f3b2c 0ad204ee fcf3e910 129a02a6     ,;..............
   268ec:	05050900 ba15febb 23efdd06 1bf910db     ...........#....
   268fc:	fef80efd fdc6e7ee 061dcc08 2829edf2     ..............)(
   2690c:	b5dffa29 8ee0eb21 d71c2fc4 0711dcfc     )...!..../......
   2691c:	e20edba3 0d193801 08aed234 41981ccc     .....8..4......A
   2692c:	2ee1da1d ee2315cd 1b4507ce 16f10d18     ......#...E.....
   2693c:	d5f31391 16fa12c6 d00bcb11 02f81736     ............6...
   2694c:	e6e404c5 1d22c208 11000c51 2b072baf     ......".Q....+.+
   2695c:	eb2c24ef 03f71231 d902eccf f4c4cf1c     .$,.1...........
   2696c:	ff0a3be8 2dd80785 1bccabde e6f5f5cb     .;.....-........
   2697c:	ec1b9bf2 c1fea3fc 01d964cd fd0dec0a     .........d......
   2698c:	26ffb61b e3c61ad1 cae6f8ff 35e93a14     ...&.........:.5
   2699c:	bca816b0 0889efdd f7321a0a 11dd0389     ..........2.....
   269ac:	46101515 d8dcf960 489e5cea e1380c9f     ...F`....\.H..8.
   269bc:	f1050e24 01d910d2 1160dff0 6228dd2f     $.........`./.(b
   269cc:	2cfb121e e034e0cc ccff17d3 16fe000b     ...,..4.........
   269dc:	3337ddbf faba0c0f d5100eb7 1dfb07c0     ..73............
   269ec:	f515ccfb ed1216de 4b311c0a 8b1d100d     ..........1K....
   269fc:	becdefff f0c7fb0e 0be2f0de 11c806c2     ................
   26a0c:	b8d45afe 1ff45431 ecd2fde3 faf7f20c     .Z..1T..........
   26a1c:	f5eff823 0bc00410 2bebf93d f2480329     #.......=..+).H.
   26a2c:	d5a1e694 fca6c8d3 ecdee7ee f6fe5a0c     .............Z..
   26a3c:	33e5c223 01c0f4cf 131fdcf0 d4f10905     #..3............
   26a4c:	13baeeed 9cfe0619 ff2cc4f4 91eec6c1     ..........,.....
   26a5c:	ea090813 05fa3205 06d8dceb 112d11c6     .....2........-.
   26a6c:	d731e3da 06d80e14 c40505f4 0a080269     ..1.........i...
   26a7c:	082937f1 210003e5 e5d52301 d80c2bc4     .7)....!.#...+..
   26a8c:	0859c9f9 f60e09ea c5c2172b dec44117     ..Y.....+....A..
   26a9c:	feec1940 7f2f1407 5ef3f430 01cc220c     @...../.0..^."..
   26aac:	0d10f133 f5c0871e a50fe0cf f64c12ce     3.............L.
   26abc:	f7fbf907 2ee4024b e1fccc0e 22fedcc9     ....K.........."
   26acc:	2927e20e 170eefab a61d7710 510c5321     ..').....w..!S.Q
   26adc:	d35f03ce d8ee1df8 ffde09e7 29f20d13     .._............)
   26aec:	d723255f 10650c11 bfcbef82 b3f902ec     _%#...e.........
   26afc:	fbfc262e 36c73fc3 fcefe305 c704e7e6     .&...?.6........
   26b0c:	03303508 0bfbfbcb e813f205 ef1cef02     .50.............
   26b1c:	fcf54ba8 022f4a05 fecb093e f7eade0a     .K...J/.>.......
   26b2c:	26fecdb6 f0a7ace8 d6ef34a5 01c6e003     ...&.....4......
   26b3c:	0ff1f6e3 0bd014d3 f11ce6ff e7f5f4f4     ................
   26b4c:	eefcefdd 3ff9d51a 17f602ed f80109de     .......?........
   26b5c:	c8bebefa a9e5ac06 55fed0bc f422002b     ...........U+.".
   26b6c:	cdb50cee edfde80b 37f81ed9 0a11031f     ...........7....
   26b7c:	1c31da09 133abbe3 ffa10e00 4822f2e2     ..1...:......."H
   26b8c:	a21ef0d9 051bf61a bffbd13a 235b47e9     ........:....G[#
   26b9c:	e222db19 faf4cffc fe3112ce fa3f5702     ..".......1..W?.
   26bac:	19141329 db2a0544 2f363519 13ac0bdf     )...D.*..56/....
   26bbc:	b2e21e37 04f5fb57 fe32e318 1bebed08     7...W.....2.....
   26bcc:	1b22dc17 17f816fe 06e0edf9 f0fb19c3     ..".............
   26bdc:	e9f4ef33 0e35fad6 d01034e7 2915e40d     3.....5..4.....)
   26bec:	4cd91130 e1f6f836 fe37e8c0 fe190af1     0..L6.....7.....
   26bfc:	ba220df0 31e016e7 e60225c0 eefff1eb     .."....1.%......
   26c0c:	f1f9ef09 c607feea f4d8defa ebeef707     ................
   26c1c:	f31cf801 df1a1105 eac90ffc cdbee104     ................
   26c2c:	98cd9feb bbfdeb41 e9a320ee 09c9f6fd     ....A.... ......
   26c3c:	2c04f3ff 1e26052e 1fc6a527 2ed3f3e3     ...,..&.'.......
   26c4c:	11ead0f9 33e7f5f5 3d29dce3 fff8acfe     .......3..)=....
   26c5c:	a2f5f5c5 0b4df0ba dbea89ff 170bcdff     ......M.........
   26c6c:	f81ff6ee 631041fe 544914fa 131232cb     .....A.c..IT.2..
   26c7c:	fb175efb 07d11101 daea0c0a bdaef250     .^..........P...
   26c8c:	d8faf8da 32150542 1f31fd14 2e0e02fe     ....B..2..1.....
   26c9c:	f9d2e5fa cff914ed 02b5cd0a 310ee2f4     ...............1
   26cac:	beed4bf2 141c1b1d 34e6fd1d fac6ff0d     .K.........4....
   26cbc:	2a452508 fcfd0a09 dd0f3423 30f13c09     .%E*....#4...<.0
   26ccc:	151040fa 07fe050b 0eefc6ff f218e7e1     .@..............
   26cdc:	da30030d fb04fc18 e4184228 3513fa06     ..0.....(B.....5
   26cec:	2c030fe2 11fb05d2 fd260106 f8f6d9ea     ...,......&.....
   26cfc:	3bff1181 1304ff09 cff2f0e8 06e32bf3     ...;.........+..
   26d0c:	5199d9f2 fbb12ff5 08e2ede2 c4ddffad     ...Q./..........
   26d1c:	1f0026e0 0cbb300b f7f224ce e3effae2     .&...0...$......
   26d2c:	10e7c5f4 f1fcd945 04de0d20 7cf9fd06     ....E... ......|
   26d3c:	682d17c7 464a29a2 451f31cb f4cc1511     ..-h.)JF.1.E....
   26d4c:	0c16def9 12971211 f90b15cf 23271f39     ............9.'#
   26d5c:	0e4def11 141ef80f f3e4f6ec dd122d29     ..M.........)-..
   26d6c:	1902c1df 0f19eff5 cf073201 1ce62748     .........2..H'..
   26d7c:	c6090832 f7bac4b6 42fb241d 44490802     2........$.B..ID
   26d8c:	fefe1125 29394822 28ec2b06 2616feb9     %..."H9).+.(...&
   26d9c:	0efad0f1 c70f091c fe471a11 0f14dd16     ..........G.....
   26dac:	16502901 08c0f2f1 4ef909a0 26232717     .)P........N.'#&
   26dbc:	116626fe 020dd5bc 1c1350e9 0310f0ea     .&f......P......
   26dcc:	bf020e0d 14f325ff 1ecff30a f5e43e1e     .....%.......>..
   26ddc:	cd140c07 b0d11af0 0ccc9be6 48a33269     ............i2.H
   26dec:	13f122f6 c2c5f621 43c22c05 f6f1b129     ."..!....,.C)...
   26dfc:	f4050d03 40d9c90f 0b0b14bb 3a32d2a9     .......@......2:
   26e0c:	1803001d f6ede429 b99dbcd0 66e40cb2     ....)..........f
   26e1c:	05d335db 1bfb0bf0 f4bcdaee eafa2af4     .5...........*..
   26e2c:	0c04f7fd 190ed60b f7d1e1d7 d42e2709     .............'..
   26e3c:	f4f1dbe7 e6f6ddd0 cd140c13 f4efcba3     ................
   26e4c:	20c103c9 eb4003e2 340af4fa 50e8cd21     ... ..@....4!..P
   26e5c:	eaffc9f1 20f4f610 09f3100e f81bfa05     ....... ........
   26e6c:	0dddecfc 012ff48e 00cd2626 e1eacf35     ....../.&&..5...
   26e7c:	16d2ee0a 21fd66d9 1b03db1c f13b30ff     .....f.!.....0;.
   26e8c:	e8fbed1e 0caacf09 0cf246f0 f2e6db1e     .........F......
   26e9c:	f21db6b5 e6ce260a 2d0af432 0afbf4c7     .....&..2..-....
   26eac:	d1e504f3 460f1602 f1100a03 14e32209     .......F....."..
   26ebc:	1e040508 f102f1fa 0f1604f7 f71bf909     ................
   26ecc:	d21c08e6 01f3f22a e525e5e5 f9c519e3     ....*.....%.....
   26edc:	ef021012 0508dde5 0cff00f5 f8ecedff     ................
   26eec:	01091aee f5120217 f92be7fd e90afe0e     ..........+.....
   26efc:	fedd17f0 0f400c30 01f11dda fe14f924     ....0.@.....$...
   26f0c:	fd1aee2e 13ecf206 14e0ecff f807f6f7     ................
   26f1c:	13eaecc1 f60ae83b b2fcdcf8 250c09cf     ....;..........%
   26f2c:	10efd104 08ecf8bd f3cbeb23 314bf1d6     ........#.....K1
   26f3c:	10d03c0a f526f8db 01d1f2e5 d4f1fabd     .<....&.........
   26f4c:	18e2e90c e60b0609 e8ebc625 facb2af7     ........%....*..
   26f5c:	0df3ebe0 f901a004 e134bfe6 d8ecc7e6     ..........4.....
   26f6c:	1df7281c 15cffc0c e8eb05fb 81011eeb     .(..............
   26f7c:	ddddbefc e90508f6 fefaf4df fd020bf5     ................
   26f8c:	e8d00200 f8eb2cfc 010e0d0d dce6f746     .....,......F...
   26f9c:	020c01ff f7e0021d f7f0ff20 083906f7     ........ .....9.
   26fac:	ebe1eef1 0fefffda 16f9c9e5 17f810f0     ................
   26fbc:	f522d90d dbfd00f1 f1d840f5 272e0e0c     .."......@.....'
   26fcc:	fb1c1e0c eb0401e3 ea06f82a 12f407f2     ........*.......
   26fdc:	1613f90a 41f2f2ea de1c23d8 1ae94ee4     .......A.#...N..
   26fec:	ff031fd3 e6ef0504 f9ede50e c80efef1     ................
   26ffc:	f0f1d836 13d4e83c 0a26d5c7 30f407ee     6...<.....&....0
   2700c:	ead4d6f8 d3c3e2e2 d7e1c80d f620fb33     ............3. .
   2701c:	1aea2e0d fa072707 2df7f8fc fd0e1724     .....'.....-$...
   2702c:	1b2ef916 20f7fbf8 2adbb626 1d0dfb32     ....... &..*2...
   2703c:	fd192af8 1314e7e4 f5f3f9e8 f415f3f0     .*..............
   2704c:	0d090513 19031f06 f41609da 151d3506     .............5..
   2705c:	f0fef3ff 1ae71523 b30b020c 00ea1ef9     ....#...........
   2706c:	27040a10 e702ef07 edfe0400 2313e3f3     ...'...........#
   2707c:	103eef13 01cc2611 f9edeaf9 efff3112     ..>..&.......1..
   2708c:	0a0bf911 042af9d8 e309f2fa d4d2edff     ......*.........
   2709c:	1d10fd07 e8eefa0e 1122092b e5141120     ........+.". ...
   270ac:	073a1814 3419381d 080b23ea 1025090c     ..:..8.4.#....%.
   270bc:	0122d4fc cf25f8f7 06ebf430 ff08110e     .."...%.0.......
   270cc:	032008ec faea3e19 f5040315 15ff03fb     .. ..>..........
   270dc:	f7fdf212 d00f0e03 e6e60ef1 08d20c0b     ................
   270ec:	160a1018 f7081f26 0314ece8 0ce3f8ef     ....&...........
   270fc:	0efc1405 0b17fcec fa1a02ec fe100cf9     ................
   2710c:	d71702e9 15ec1be2 0428e20a 01fa06f5     ..........(.....
   2711c:	052805d5 f3140efc 03fe0009 14c1141d     ..(.............
   2712c:	130f11fd f39b09ff e0f519ee fd110f0c     ................
   2713c:	fb0e0e07 c59de4db 10b6030d 0245b703     ..............E.
   2714c:	e53bd60c c10917ad 3fe7fab2 08072311     ..;........?.#..
   2715c:	c62b060a b2d8c8fb b69e361e 28eb1bdf     ..+......6.....(
   2716c:	c8e0eb0f 44f72a03 dc205d1b ba1e16d0     .....*.D.] .....
   2717c:	faf2a5cc 2f8dd3d9 bf1fe414 e90935b9     ......./.....5..
   2718c:	c33101e8 09e7ed46 f0b9d8d3 cd35ded5     ..1.F.........5.
   2719c:	c8b396e9 b516c81d 0ff000d3 cfffb0dd     ................
   271ac:	dbc3ddeb bcdee3d7 a2bb16a9 36001919     ...............6
   271bc:	c4040fd0 f2273109 e7bd0916 f4f64023     .....1'.....#@..
   271cc:	b0dfc629 b5f2b6c9 05d0d629 340fc9c6     ).......)......4
   271dc:	d81ffb00 d62bc9e0 33d10f93 2a10b52f     ......+....3/..*
   271ec:	08fe22da f633bd0f c7030e14 b7edee2e     ."....3.........
   271fc:	3e15cebf d7ac3413 b5cee50e 22fbe745     ...>.4......E.."
   2720c:	c7ddcad2 f70ad3bf 000aa6f5 9b21e304     ..............!.
   2721c:	091f20d1 f0f806e3 29db2ddf cda7fefd     . .......-.)....
   2722c:	1bfe19f1 ddc2e6e9 1f1eef37 4cd13514     ........7....5.L
   2723c:	d3a9eb26 151d3cfa b23bb414 d7da101c     &....<....;.....
   2724c:	0dfabcdb e6bd36c1 ca27903d d7d7aaee     .....6..=.'.....
   2725c:	2c040ce0 2bed049a 2c99c7d2 d113d3c4     ...,...+...,....
   2726c:	1badc8c0 0c1a8ec0 1d04ca18 2baf810b     ...............+
   2727c:	a0d3d0ca bd1bbce4 11f40817 cd36a6c7     ..............6.
   2728c:	9602fbf1 cab1e903 1bfee618 f5d91ff5     ................
   2729c:	dea89616 061d3ed6 381eccee 9cd2cbda     .....>.....8....
   272ac:	a539e8b0 a096f339 c9c1f4a1 e7050713     ..9.9...........
   272bc:	3ce2bbef e718f5bb 2a3bbfa5 291efcd4     ...<......;*...)
   272cc:	1e3b1db5 292ac5cb 18181716 e5104fde     ..;...*).....O..
   272dc:	44e3bef2 9213dccc 020c3bea 02beb4f0     ...D.....;......
   272ec:	b8a74095 c7e6f1de 192612ea 16d914c1     .@........&.....
   272fc:	4ac2f548 ecd3ed0e c0121bba 2e3ab62f     H..J......../.:.
   2730c:	b212f1e7 ddc6f5c1 ec05b7f6 f8b8eeb7     ................
   2731c:	21f6bede b517ce0c 253b1bd9 2acd3a05     ...!......;%.:.*
   2732c:	03ae8dca 2cf3efcb 1395e206 febc8923     .......,....#...
   2733c:	e706a530 d7e50ddd f3e9acb7 300cd1d2     0..............0
   2734c:	a0310fde a6f520cd 09c0fabf 0df23518     ..1.. .......5..
   2735c:	02b8e0c8 eeee0525 cfe5ba2d e00b2a2d     ....%...-...-*..
   2736c:	18d2c108 debb2dbe cab8d294 9f07e849     .....-......I...
   2737c:	e2b8f50c fb2ac3db 22e0ebd0 00c9d5e3     ......*...."....
   2738c:	c71910d7 fdf3c516 911fd91b 1a2de8f8     ..............-.
   2739c:	1f0be6cc 0a03f1f1 dc14e0da bdc10da3     ................
   273ac:	41a2c0b6 d320f79f b5e5ae45 b8d32004     ...A.. .E.... ..
   273bc:	f70fb2c9 d0b72e08 b6a90625 ecf7b447     ........%...G...
   273cc:	cde113cf 04180ef2 05e3efbc 48d44399     .............C.H
   273dc:	a8adb7fa f124c0d7 cc0b0f05 07079aeb     ......$.........
   273ec:	ed351c01 39cca405 e419ed24 b8abafca     ..5....9$.......
   273fc:	0000f816 f1e5f615 e7d2c5c1 d0c2bebb     ................
   2740c:	aa1ee9d0 edf1e326 23cbf2ca b1a1f7c7     ....&......#....
   2741c:	f4c49d11 d0c10d0f 0bbbd9f2 d02a1d1c     ..............*.
   2742c:	cbfb2db1 dbe209ec c93cd918 1a2e1c1d     .-........<.....
   2743c:	ac13c0ad fc2ebb37 fdf4c5cb cc00b04b     ....7.......K...
   2744c:	d0b3f54b b3d8b29d 25ccf1d4 9f92dcfb     K..........%....
   2745c:	02c91bc0 07c821f2 f202c9e0 f82606d8     .....!........&.
   2746c:	122bff07 e8f5ee1c 1c19e4e1 eaca1522     ..+........."...
   2747c:	ecc900cc 15131fdf c1ebebcf 0effe8dd     ................
   2748c:	f7d90b05 0be8e6c8 cacf15e0 dbf00fcd     ................
   2749c:	10030816 c017f309 f9aaf3f2 3306ece1     ...............3
   274ac:	f52bc6e5 dee6fe13 011ce21c 96b3900b     ..+.............
   274bc:	04d9f9c1 c7fad4cc 2c1b0d05 08da03b4     ...........,....
   274cc:	18e73ae0 f4c0ff04 f1f626dd e4e90ae9     .:.......&......
   274dc:	052fdae7 e414e910 e704f8ef e646ecf5     ../...........F.
   274ec:	f3b8d084 f7df2c11 eb360df0 d8c70407     .....,....6.....
   274fc:	210bcf03 cf03c9f4 1800fd06 092310f3     ...!..........#.
   2750c:	f7d604f5 c1eb15ef f3e1b6b3 0bbddbcc     ................
   2751c:	25141924 4000fd27 0904ca06 d89f27f5     $..%'..@.....'..
   2752c:	ea03bf17 f91ed013 080c2e08 f204cff9     ................
   2753c:	041f0322 f5fd2a19 0b2005d1 ea15e1ff     "....*.... .....
   2754c:	0acf0a00 12f804f2 f8febbe0 08b5e2ab     ................
   2755c:	81ef11cf 052146c5 fdf72025 af00f63d     .....F!.% ..=...
   2756c:	22f0030d 46e9e501 0e314042 e0f1f65b     ..."...FB@1.[...
   2757c:	0961e20e 250603e5 f0e116e3 e9091340     ..a....%....@...
   2758c:	1a1551d8 51a4e101 3ee141c9 faebc912     .Q.....Q.A.>....
   2759c:	18fde0b7 fddce9ca 0d5bec0d de32c709     ..........[...2.
   275ac:	de06020c d04417ed 0ff4acb6 d0c1201f     ......D...... ..
   275bc:	b30eced8 0d60f900 28b3bac9 080acca1     ......`....(....
   275cc:	04cb0820 19eb3410 04f0db1a 8f1afc3f      ....4......?...
   275dc:	d232c8d3 e6e545ed d295f73d 1601bd27     ..2..E..=...'...
   275ec:	d5c4fcdf 10d5f315 d91b4016 fb22ed33     .........@..3.".
   275fc:	f6e95500 29f52d4b 03f8dc31 faecfcf0     .U..K-.)1.......
   2760c:	ecf727fb ee3cb7e9 1bc5000d e903e201     .'....<.........
   2761c:	0c20e3bf 14e5e6fe f70df8fc 12375928     .. .........(Y7.
   2762c:	f3ef3313 2b1bfae0 e3203e0a 32ec00e6     .3.....+.> ....2
   2763c:	2630fc61 05dfc65e 014d8815 10153d29     a.0&^.....M.)=..
   2764c:	fb1ff2fb fd190a68 f0d92511 f60ff653     ....h....%..S...
   2765c:	39dd3fae 01201d0b 01f0d408 ea0225d8     .?.9.. ......%..
   2766c:	0c17b740 26273cc5 efcd0346 002f0dfb     @....<'&F...../.
   2767c:	2a1fe3f9 2ccec810 adfefbc9 525bf8c6     ...*...,......[R
   2768c:	d5ac8814 080cdee4 e8f0f6f9 253c3403     .............4<%
   2769c:	1b07ef4e f726eb26 d3461ec9 facc6cf0     N...&.&...F..l..
   276ac:	dbc6defe b2b9f439 f7d40f0f 25f4f41b     ....9..........%
   276bc:	dc2a2916 df240e06 04da3b01 0ffd0c07     .)*...$..;......
   276cc:	f313151c 09edef18 0bd425dc 14162909     .........%...)..
   276dc:	0bf71c0d f414d2f0 0a0716fb 060529f3     .............)..
   276ec:	07422d0c 17dd2928 1b0e4ef5 fdf4eec4     .-B.()...N......
   276fc:	201bfa15 bf091be6 05011b1a 20eb0846     ... ........F.. 
   2770c:	1a3c000f e3c01a10 1a1e090b 1dd9062c     ..<.........,...
   2771c:	db1df1fc df182972 4ae9358c 024a1ffd     ....r)...5.J..J.
   2772c:	e21224f8 03182b10 0afbf32e 2a2d12db     .$...+........-*
   2773c:	010d24fa f23b032c 232a0ba2 28c2072b     .$..,.;...*#+..(
   2774c:	b41c3187 3637dffe 12f2a611 33041824     .1....76....$..3
   2775c:	0716f717 554b3603 253ef540 f10a15a3     .....6KU@.>%....
   2776c:	07155aa3 110e060d badd12de fc98133b     .Z..........;...
   2777c:	3b1e2e19 0e08ffe1 00fdf1ef 09e627fc     ...;.........'..
   2778c:	04fff007 f1fc06f1 091bf60a fb460617     ..............F.
   2779c:	e408e0ef e5cef0e5 29fd1254 f1da12f0     ........T..)....
   277ac:	04210af5 eafbefce 22f643f4 f4fdce26     ..!......C."&...
   277bc:	05fae3d8 20f00109 f92bf8f0 c30106f9     ....... ..+.....
   277cc:	d6c9d82a f4e108ea fbf71ec5 12f62d02     *............-..
   277dc:	f7b912e5 f4fdfffe dddce4d1 e82e0206     ................
   277ec:	08d3f123 001f120a 10fd1604 f8011316     #...............
   277fc:	e014d61a 20e7e5a5 21dbe501 020d03f7     ....... ...!....
   2780c:	1cd5ffe6 feea130b caba1acf 260803bf     ...............&
   2781c:	ecf2e3f3 11fef8e4 ddf105c6 f71df70d     ................
   2782c:	dd010704 f4edec13 e20813ff f5c20bfc     ................
   2783c:	041af8c4 0fd507f1 fbd3eddb 2b21e7ed     ..............!+
   2784c:	1edbdbe5 08b71ef9 f3ffd70e 0dfe050c     ................
   2785c:	ea12fef9 f850d2f2 cff9c705 bca9fbcc     ......P.........
   2786c:	0a2b0707 dcdf2921 f5fe0430 d02aebe4     ..+.!)..0.....*.
   2787c:	0b0412e6 1210ebf6 e90f01d2 fffb0119     ................
   2788c:	01ed030d fe161cea ebccc1ec 1338ffd4     ..............8.
   2789c:	03f111d2 e5ee1c07 d2cdecf5 da06f9e1     ................
   278ac:	f6c10411 ea17fc1d f6deb302 fd1a20fa     ............. ..
   278bc:	18f5cb11 f2f7d811 d5fa07e5 fe02cec8     ................
   278cc:	100ff41d 33e4ed1b df00e6de d6f9d1d3     .......3........
   278dc:	ed26d3e1 e41e12c0 f2010424 33020e09     ..&.....$......3
   278ec:	f506f3f8 de31ff08 0eeaeff6 ffd80211     ......1.........
   278fc:	ea140222 f40ef400 0f2212dd c4c8fa13     ".........".....
   2790c:	c5f709fa 1626e404 210fda2c 2ac01ad2     ......&.,..!...*
   2791c:	f9240904 0ef5feee 02212104 3a47fe25     ..$......!!.%.G:
   2792c:	0202fff9 ffcdea33 0a32f8cf 150c2e2e     ....3.....2.....
   2793c:	01fe0533 ed2401d8 dc1ec7d4 0fdeec01     3.....$.........
   2794c:	fe0e09e5 dde50207 2cfdbb07 2829f01c     ...........,..)(
   2795c:	ff030cc6 ae1e09fe fff4641d 16fdf900     .........d......
   2796c:	dcd813ef f5d0edd3 e8030005 d30c0b08     ................
   2797c:	d7f914e4 0b021902 380810f1 f921ff15     ...........8..!.
   2798c:	0dd4ec1d 0fd90115 2f01df1f fbcdf609     .........../....
   2799c:	ed22f6d3 04f901d8 eb0bfcff 220926fd     .."..........&."
   279ac:	2111f62a 0cf4f41c 13ecf6c0 ea2d1108     *..!..........-.
   279bc:	0512f70b 26bd1600 f7072025 02fb130b     .......&% ......
   279cc:	f4f516f1 f901f01a 151cf62e 0b26dc0b     ..............&.
   279dc:	14fb0a2a 27070be4 05250509 110a1b17     *......'..%.....
   279ec:	1c001a04 0f27112b 11fc1818 0df8ee05     ....+.'.........
   279fc:	f42ffbea 100d2c28 11d11320 140f0d0e     ../.(,.. .......
   27a0c:	16f6f01d 1e241e05 0bf7fdf9 143ef91c     ......$.......>.
   27a1c:	06f9cf09 fc250cfb ecffca1a ec1008ee     ......%.........
   27a2c:	fc03e702 1b0515f8 271203cf 0ff40e02     ...........'....
   27a3c:	1911e909 d0f71dea c50b2100 0f020af9     .........!......
   27a4c:	f80c170e 072c1815 ee11b71d 27d217d8     ......,........'
   27a5c:	0ff5fc03 f9f301e6 1aef1f1a 1fda3103     .............1..
   27a6c:	cd261908 1aca07f5 0d35bc24 14f7d51f     ..&.....$.5.....
   27a7c:	1b1df9cd 042ed1fe ed07f62f 0f810806     ......../.......
   27a8c:	151d0cc1 0bbd0410 1d3924bc 27fe1df2     .........$9....'
   27a9c:	17e8000f 22fc13f7 00082e1a e1efefeb     ......."........
   27aac:	0bf821f9 0e0e29e3 ff36ff07 1b5719fe     .!...)....6...W.
   27abc:	e032f1c2 15030816 f40affe7 e5dcf4f3     ..2.............
   27acc:	eddef121 e52beb0c 2e15f1b5 f6fafd0d     !.....+.........
   27adc:	e5fdedd2 09ec0ec4 0411ecfe e7e1060f     ................
   27aec:	f3f50508 2729e0d2 f0e93fd3 0f2235d0     ......)'.?...5".
   27afc:	e9ba9cea d8f3c8d8 b3acc241 c31e5237     ........A...7R..
   27b0c:	f4e0f220 00e4e7fe f00c18d3 0303d317      ...............
   27b1c:	f3f515ed f0cf18af 34a22d42 26d5eaca     ........B-.4...&
   27b2c:	f5ede613 efddc1cd d72ed8ec 150cdebf     ................
   27b3c:	cc2fb02e 39f6f1fe f7060124 f3153203     ../....9$....2..
   27b4c:	263d03eb 15fe0cfe 042929d7 ef1f3731     ..=&.....)).17..
   27b5c:	ece00fd2 f0da0c02 d612c7ec 04feda22     ............"...
   27b6c:	21f4f720 f2c5ed4a faf134fe 2c0c0d17      ..!J....4.....,
   27b7c:	fe23eb28 ef50efef f94ab6e9 d0c6d4f6     (.#...P...J.....
   27b8c:	5103e932 ee08efd3 e143e42d 0059e328     2..Q....-.C.(.Y.
   27b9c:	f707dbd2 e830e815 f10a1ad5 fc120cef     ......0.........
   27bac:	01f8d00d 2700f404 d2c01603 e5efffea     .......'........
   27bbc:	070f05ea 0ab935de edfdf9f7 caf3f906     .....5..........
   27bcc:	17b51f19 0cf500e7 0c0bca2c 07040cf3     ........,.......
   27bdc:	e60ee8f1 f2ff01f0 c8f82d03 0c08fcdd     .........-......
   27bec:	1819f5f5 01a1060c 1bfe32da c5c9f804     .........2......
   27bfc:	09c6dada f7a708e9 1cfdec3b 02023934     ........;...49..
   27c0c:	07130425 140ce90c 341beb01 21080af7     %..........4...!
   27c1c:	f2f227d6 040e3734 07eaace9 f81224da     .'..47.......$..
   27c2c:	d2ffefd6 dd00ddf7 131a1417 0ff30b03     ................
   27c3c:	ffe805ff fcf91908 11092712 3400e4eb     .........'.....4
   27c4c:	192f1622 44eab030 13f7ed1f f107d5c7     "./.0..D........
   27c5c:	ff28ee00 f80f0efb 23d0fc1c 1e011c15     ..(........#....
   27c6c:	e20636ff 0f0af4f0 1d06d000 1110fbfe     .6..............
   27c7c:	2bdf1ed3 b1f90afb f10b2dfb b2c7eac2     ...+.....-......
   27c8c:	dc1404ec 09df18e1 14de2318 34fb07a9     .........#.....4
   27c9c:	400a11f5 f42eebf1 e20ff240 01d108ec     ...@....@.......
   27cac:	ead71204 0bfbf3d7 ce1ed3eb edaff32d     ............-...
   27cbc:	0be4c6db f1d6ddbb 25ecf2cd ae9a10ed     ...........%....
   27ccc:	1d0d19d6 fc053322 b7f60229 beb0eaf9     ...."3..).......
   27cdc:	11130bf5 090dbf07 c4bbdcfc 0b348126     ............&.4.
   27cec:	c6dcc1f9 f2f901b8 d5e8fcd5 e112cf1b     ................
   27cfc:	0c0cfccd 100808f6 f9e81d08 ca00fa36     ............6...
   27d0c:	0e11f307 20d8c301 0af1fbfa f503f11c     ....... ........
   27d1c:	cff7ff0b 25dbf1ee 1a0f1e0d 162b2704     .......%.....'+.
   27d2c:	0aed1513 040b23f0 15f5202d f219f1e3     .....#..- ......
   27d3c:	fce4e100 e7071024 2cf10323 041ffb17     ....$...#..,....
   27d4c:	05ee03f3 fc0bfeec 160401fb 11041b0a     ................
   27d5c:	23e91523 3b260aca 1e0e0ffb 0102ddf0     #..#..&;........
   27d6c:	eb04142c 010be9f4 e9140610 17201ffd     ,............. .
   27d7c:	0205f322 efcdf4fd 0ee70803 300df4f6     "..............0
   27d8c:	1522fedc e6c7f9ff 0d1c1604 fef90e01     ..".............
   27d9c:	e714fb11 dae9eff5 0c0406d8 ef08d00d     ................
   27dac:	de08edec ec15d917 fdd8e1f8 25de1fb6     ...............%
   27dbc:	e7d714ed f39c141a 9bd145e0 475cd551     .........E..Q.\G
   27dcc:	1117dac7 9de5b9f2 3fd63a1e 3f81fa10     .........:.?...?
   27ddc:	27f43ddd ff51c8ed 3d44e6b8 05dee501     .=.'..Q...D=....
   27dec:	3915b7e5 dc3e9cdb 2ea7aeac cf3aea3e     ...9..>.....>.:.
   27dfc:	b5045317 e02af30d aabfe801 df1316f4     .S....*.........
   27e0c:	2c9211c6 fa25cfc5 e3a5ccff fd2cf024     ...,..%.....$.,.
   27e1c:	432c4c9d 33f3c5bb 8fbc0830 e8a2ca3b     .L,C...30...;...
   27e2c:	01f50510 d0f326d3 99e1b4ee 504ff037     .....&......7.OP
   27e3c:	b9f8c9e4 06dbf1ff fc161d3a 3c34beb2     ........:.....4<
   27e4c:	dac4de47 e4f54e1e b44cfed3 46b00dba     G....N....L....F
   27e5c:	2cef0e2e 3e1baa00 44cd0d9b dde8f5cb     ...,...>...D....
   27e6c:	b8b2e253 c0d7ce13 c33bb0cf 3905f115     S.........;....9
   27e7c:	ae0dc43f e8cb0d06 1e42120e fadeeec2     ?.........B.....
   27e8c:	d13448a1 cdc22f0a f3b11a4c 403b30c1     .H4../..L....0;@
   27e9c:	6cebbf1c b3cda02f f2d44795 b7a7a9b8     ...l/....G......
   27eac:	baf40cb0 212b010c 14b2a8ce e5e8e1de     ......+!........
   27ebc:	d7c285c9 ae37c927 f33e1f1a c5a5b91d     ....'.7...>.....
   27ecc:	a807c124 ff47ef33 bb34dd3a 1b294c47     $...3.G.:.4.GL).
   27edc:	b2dbeb39 4e2adf97 25a91537 f5b4ad11     9.....*N7..%....
   27eec:	8c11039c 14a2f8ed a6cffbcd bc4faa02     ..............O.
   27efc:	2cdbfd10 140d4749 402cbc0f e51bd206     ...,IG....,@....
   27f0c:	a808c5cb d7dded46 d7b9ed46 4acdbc18     ....F...F......J
   27f1c:	371ea5c7 eeac14b8 1929e74e 0d18f805     ...7....N.).....
   27f2c:	32ac3e07 b3f641d2 09ba463d fddc20b9     .>.2.A..=F... ..
   27f3c:	e81d3399 ffbea7b7 1cd43b06 29280117     .3.......;....()
   27f4c:	de440703 9a18c10a 26ceb029 ccfac8ed     ..D.....)..&....
   27f5c:	50491dae d62f0bfc 13dfdffb f520d348     ..IP../.....H. .
   27f6c:	b502dccd eda6bf2b 321abf08 dcdd0612     ....+......2....
   27f7c:	4e35ea00 34cdb501 412d1ef8 2ce8d8f8     ..5N...4..-A...,
   27f8c:	e3463548 3402ff33 f73bfc61 112f4922     H5F.3..4a.;."I/.
   27f9c:	b7ccf437 9c053cc8 d3373a08 ffc2ec0f     7....<...:7.....
   27fac:	19c23904 97b698d5 3bbf25af f0ad1446     .9.......%.;F...
   27fbc:	a3f83cb4 de02cbb7 0d350a4b df1b16e0     .<......K.5.....
   27fcc:	ceae1dee 1d12f6d8 3b43290d 0a11fe92     .........)C;....
   27fdc:	0ff9bd0e ea283ed5 c2f63c3b 50c6ebfb     .....>(.;<.....P
   27fec:	e34a5a31 b20baf3c b00cd308 2e45f64a     1ZJ.<.......J.E.
   27ffc:	e19f4b4a accfe5b5 c9b127a5 5194c2c7     JK.......'.....Q
   2800c:	3aa01c0d 4cf7d4e1 2596d507 9b40ee1a     ...:...L...%..@.
   2801c:	cbfea690 ce10aae0 2b99c2d1 a1cd38f1     ...........+.8..
   2802c:	29a3a3cb 06ab93ca 45a84c38 47d3bc1a     ...)....8L.E...G
   2803c:	baeff8ee c8a2f2c7 d5f8d62c ba4e0b9b     ........,.....N.
   2804c:	c52d3aa6 0708c30e 16111920 bd474ff6     .:-..... ....OG.
   2805c:	381d97e5 b4a2313d c4432ab4 1cc1eaca     ...8=1...*C.....
   2806c:	a602ac07 bf285019 11a22eae d30af0fe     .....P(.........
   2807c:	3ac69c25 b69fa507 e81d94fc 49f0ee39     %..:........9..I
   2808c:	31e03522 a2d8081f 00925a9f f425ebb6     "5.1.....Z....%.
   2809c:	a823e132 43041ef3 fab23de5 d22fc7aa     2.#....C.=..../.
   280ac:	3b0017f5 b4fcdef5 e901ca1b 000adda4     ...;............
   280bc:	c93732dd aa15ff25 bdefe73d 25d5070b     .27.%...=......%
   280cc:	bccf1aaf abb1510f 461497a3 b63cd037     .....Q.....F7.<.
   280dc:	92a9ac26 0f051b26 0912e531 dbeb103c     &...&...1...<...
   280ec:	f13d5709 2cf51049 fb73f9ff f645fe1a     .W=.I..,..s...E.
   280fc:	2135cbf6 08f1f409 41230430 1aecf000     ..5!....0.#A....
   2810c:	0f0bf025 062a0901 0a31fe31 26fc19f5     %.....*.1.1....&
   2811c:	43ee03bb 320e14ed fb2adefd a53de64d     ...C...2..*.M.=.
   2812c:	f1dd1c00 d0290f0d fa270805 f9f42802     ......)...'..(..
   2813c:	2104e6fc 19e830ba ad02a2e2 b7241824     ...!.0......$.$.
   2814c:	011807ea 05ecf4f9 04f61822 0a2c3b27     ........"...';,.
   2815c:	33eaeff1 3b9c34f8 30f0bf2d 1edafd14     ...3.4.;-..0....
   2816c:	f935cbd1 2005f501 d1f326e8 0ffe2828     ..5.... .&..((..
   2817c:	d922faf7 55ed0666 e80e09f2 570b4bf8     ..".f..U.....K.W
   2818c:	1224e400 40fffbc8 0c21550a fbf81934     ..$....@.U!.4...
   2819c:	b1baeb0b 041a1400 fc04e1f8 3d1b1da7     ...............=
   281ac:	24e700e5 02f4da18 ed5c03f9 2cfee610     ...$......\....,
   281bc:	f908ff22 0432fb05 08faf244 0d1cd0c2     ".....2.D.......
   281cc:	0fd0edee 002a08fa fe600917 07d50c44     ......*...`.D...
   281dc:	0fe6245d 08243bf4 fb013ecf 2e0ef038     ]$...;$..>..8...
   281ec:	e3db20fb d32f0e05 0a183a7d c5e6ff40     . ..../.}:..@...
   281fc:	e963ddda 42fc0d17 0c4610fe 3438191a     ..c....B..F...84
   2820c:	dff51c0d 3cf2dbc8 4a5e1ac4 0e371801     .......<..^J..7.
   2821c:	0602df29 0fd955de 23e4264f 49c947d6     )....U..O&.#.G.I
   2822c:	264fa62c c7fd0e67 561c00ce 37e40116     ,.O&g......V...7
   2823c:	3a2b1ecd 8ca82511 f9f9160d efec1643     ..+:.%......C...
   2824c:	a9170030 1bd22cfb 49fefbfa eb17e20a     0....,.....I....
   2825c:	16f01bdb e436eb40 0e05b5ef ece4bbea     ....@.6.........
   2826c:	ec1dfcdd fbd5f72f d21229d8 f80df4ef     ..../....)......
   2827c:	02010d12 08fce517 08320e3f 3aeb141e     ........?.2....:
   2828c:	3aba040a 0205de32 11cdf2e5 f338ecc4     ...:2.........8.
   2829c:	e842a8c9 2309e028 fedc233a e8235731     ..B.(..#:#..1W#.
   282ac:	04f47706 e713f514 ee0535eb 0219ff12     .w.......5......
   282bc:	1a39182e e3f4dd36 fe2ed5ff eae41b0e     ..9.6...........
   282cc:	0d05eb0e c945e849 fff738c6 4ef90c9e     ....I.E..8.....N
   282dc:	7f3c25b3 ed3bdcfc f10bf503 f7fc26b4     .%<...;......&..
   282ec:	ed1b3322 f7fb68d8 2b4ad814 842a005b     "3...h....J+[.*.
   282fc:	0ad890c4 05c7dbe2 51d7d9ba f89377ec     ...........Q.w..
   2830c:	eab84b01 c6f21b3f 12d2011e e7eb17fd     .K..?...........
   2831c:	e8edfaff 1bfefd39 3f11d505 f42d1cd7     ....9......?..-.
   2832c:	2d019bec 0298b104 d7b7cfe9 c1c5d91d     ...-............
   2833c:	c8ef4ad9 fb1eead1 ef06d6ed a818d6f1     .J..............
   2834c:	e00525d0 1faa0c03 3bbe5fab 5d0ddb25     .%......._.;%..]
   2835c:	a4aeedbe 0312f215 1ea1c3ef 511e10d1     ...............Q
   2836c:	218cfcf9 ced55102 d9140730 efee0ec9     ...!.Q..0.......
   2837c:	d0d0d403 f0f4e313 1648e701 e70af6dc     ..........H.....
   2838c:	05ca0cf3 dbe8b8a3 f4baddee f3d9ecd9     ................
   2839c:	f5d04505 38abc9b8 2e13f10b ff32c000     .E.....8......2.
   283ac:	0107cd20 04fed1f3 fb1a21db fb0315ca      ........!......
   283bc:	8ff7eccc edc2f34d 23e809f1 d70ea8de     ....M......#....
   283cc:	3dddb5fe d5fb4e11 aae03ebd 1fef12e9     ...=.N...>......
   283dc:	d8ed0f36 e0c53501 2e00ffe3 ecf7b547     6....5......G...
   283ec:	fec2b039 e1268ee6 351ae6ef be0bf5fc     9.....&....5....
   283fc:	bff7d6b7 02fa0b19 ffabe4e4 d80534fd     .............4..
   2840c:	0822df07 e3f3d9d8 01ebfaaf bbc4f61a     ..".............
   2841c:	e522e307 cbe7fbed c425f8eb f2e9c5d7     ..".......%.....
   2842c:	1ab8fdec 1c2efcd0 0d1dea00 1be90b09     ................
   2843c:	23fc23f9 f7fdfc57 feee36f6 d815f31d     .#.#W....6......
   2844c:	0be9f911 d5280ef0 f32c21f4 dce3fa39     ......(..!,.9...
   2845c:	f0ebef1b fdc63dee e3faeb1b f62a0a03     .....=........*.
   2846c:	ea15d72f fb1f2908 2cfafaff 0a28ea29     /....).....,).(.
   2847c:	130001e6 05f41fff 0fecd126 0c0aec1b     ........&.......
   2848c:	e70ad7ee 0a31c6f9 f81fbef5 02ed1203     ......1.........
   2849c:	ec001d25 16ee0205 121a07d1 e50505f1     %...............
   284ac:	e7f2091a 20f3faf4 0f0ee913 ffda0900     ....... ........
   284bc:	c1f206f2 ef180aec eff71708 17030dfa     ................
   284cc:	22ab01ef 0be51b04 0e28f409 00f3edfb     ..."......(.....
   284dc:	04e5d8d3 c6e1f613 040fb909 ddc2e4b9     ................
   284ec:	f31d0316 f705d7c3 ead8ed01 ff2ceb01     ..............,.
   284fc:	0711d209 1826020b 0e0b22e2 f20c0d31     ......&.."..1...
   2850c:	21ce3d08 370700ff f6ff1909 09f619f7     .=.!...7........
   2851c:	f7f81ffb d3d8e338 d71a0f2b 0a27f606     ....8...+.....'.
   2852c:	fb080910 ef130df8 01e8d72d faaf0df3     ........-.......
   2853c:	d0fa1503 09f8ebd8 fef9fee3 f5f4ddec     ................
   2854c:	0902f5fa dddff820 d3ece5ff e7eac511     .... ...........
   2855c:	faf4ee00 fced3209 d3011e0f 400a12f5     .....2.........@
   2856c:	09f102b7 f11de4fb b4fb1212 fffd1815     ................
   2857c:	01dddf21 f7231bfb 09ee09c8 e322eecc     !.....#.......".
   2858c:	efff0d1e 18320210 01e71a28 0c0d19e1     ......2.(.......
   2859c:	f045fe04 e009f8e3 f80b4ae2 ffeaee43     ..E......J..C...
   285ac:	5eff0827 fb01f221 db4bf9ee 351dd8bc     '..^!.....K....5
   285bc:	37d1f028 fbea29d3 0513a607 08ed0a21     (..7.)......!...
   285cc:	f008281e f8f70203 47f2d606 2a0bfe02     .(.........G...*
   285dc:	1a161fc8 f95a3612 f9d04123 e6e2eb20     .....6Z.#A.. ...
   285ec:	fa233218 03eb3a18 21fc1be5 151b19b9     .2#..:.....!....
   285fc:	11f3f631 012c2bfb 0007e63c 0aef090a     1....+,.<.......
   2860c:	1111cb0d f309e418 eb05ddf8 0fbbee7f     ................
   2861c:	0ee22325 f41effe0 f9ff06fd f827f305     %#............'.
   2862c:	020d4f19 400d2dd4 3516fabd c00d2504     .O...-.@...5.%..
   2863c:	bddf04ff e20a3c2a eaa6b551 ef48d7d1     ....*<..Q.....H.
   2864c:	28010bee f93105d9 07ef282f 030cf1dc     ...(..1./(......
   2865c:	04fa1f1e d82017c4 f831f200 ee03efe8     ...... ...1.....
   2866c:	06fd0cd1 0303fc1a 1df3200f 410dfb02     ......... .....A
   2867c:	c722f7b5 29f50804 2ac80b16 070013ed     .."....)...*....
   2868c:	0cd2f9df f1ca0108 05f4f310 f7eff2f6     ................
   2869c:	ded69d08 e3ee08f1 0805edf5 2af8e4e7     ...............*
   286ac:	f29efd0e 0816a5da e1ef00fd f6dc08ec     ................
   286bc:	f6e5f8f8 3c2713d8 ebcee6ed 0713fa09     ......'<........
   286cc:	160a1711 e720c9f5 f827e5ec e505063e     ...... ...'.>...
   286dc:	eee90bfb f3bc0943 e80317e9 132df6d9     ....C.........-.
   286ec:	e12eebe0 23250e2d 1cec384a 3b0e2ee2     ....-.%#J8.....;
   286fc:	2f4709f1 e4ff0208 d71209f9 01111df3     ..G/............
   2870c:	e3f1e618 00fb01e9 10bcf3f0 f4310b0a     ..............1.
   2871c:	0afa3233 19cab9b4 ff01b82a 39f316db     32......*......9
   2872c:	e5eb401b edd933cd f3e00c34 06afaf29     .@...3..4...)...
   2873c:	deab240e 38bfffa1 f001561e d6811cf2     .$.....8.V......
   2874c:	29f2ae09 bfc0b8d6 cab196e4 012cd9b4     ...)..........,.
   2875c:	b51543c3 2c20b20c 2bb3c541 ccd5f90d     .C.... ,A..+....
   2876c:	13d5a2a0 bf0d46db accc3b22 05cdf515     .....F..";......
   2877c:	cd12b1f7 250c031d 1edf9bf1 f5063909     .......%.....9..
   2878c:	26491e30 f2021eea 3f38de31 1c0cf0ed     0.I&....1.8?....
   2879c:	311321dd db26c4c7 3dfd0e0f 2c1d0938     .!.1..&....=8..,
   287ac:	3e244b0a fdc101df d21b16b7 ae30e6c3     .K$>..........0.
   287bc:	45d6abb4 dc471a2b 15c238e2 272a2134     ...E+.G..8..4!*'
   287cc:	e4a532fd d8f31a95 082816d3 d9bd41b7     .2........(..A..
   287dc:	c611f1be 2637cda6 ef0bdebc 24320d0b     ......7&......2$
   287ec:	12a90df1 da3219ef ee3f07b7 ece729bd     ......2...?..)..
   287fc:	0c0bb200 c7b4f23f d63a4bad e9c3e49c     ....?....K:.....
   2880c:	1100cbb1 c6d24635 39f498c0 c9da24b4     ....5F.....9.$..
   2881c:	b8f2bcdc 9d9db8c2 ebcf36b1 1cd3bcea     .........6......
   2882c:	addde52d f5d63cde fb28aa08 ceb9ea10     -....<....(.....
   2883c:	e8d1c4b5 44550140 0d00ccf1 33fce31f     ....@.UD.......3
   2884c:	b318b2de f02c4002 480305e7 0f9e17cd     .....@,....H....
   2885c:	4013c2a7 f0eeb8b7 251c16d7 d49ce535     ...@.......%5...
   2886c:	fa06a3d8 3b20fe3a cf3cbacc 2cfd3339     ....:. ;..<.93.,
   2887c:	372932a7 2ffbd1ff c939eab3 184cd7ef     .2)7.../..9...L.
   2888c:	e5e9c6bf 28a201da 01e51c3c 2fbed5ee     .......(<....../
   2889c:	d310b4ef c1f9dc2e 272a2cdb d81f253d     .........,*'=%..
   288ac:	19b8abe7 0bf901ae 26b3210d cdf1ac0a     .........!.&....
   288bc:	c63322af 3125eb38 d9b6bdc9 3a201ede     ."3.8.%1...... :
   288cc:	c2ca39e0 acfc0725 dff71c03 1d15ea03     .9..%...........
   288dc:	3fbe9ff8 1b2a35e4 ae9dbe0d d9d4221f     ...?.5*......"..
   288ec:	f2f9d5a9 e1afbdd0 41ddc523 b2d4464c     ........#..ALF..
   288fc:	0424073a 0e4faac6 c539b82d 33f3ae99     :.$...O.-.9....3
   2890c:	1b57aeec 0fc2ab2d b12bac23 ad0ed00c     ..W.-...#.+.....
   2891c:	9648dd25 c3c509da 00afce11 2fb2f34b     %.H.........K../
   2892c:	f59024d7 4aaefed0 a3cbb0ea caf0fe2c     .$.....J....,...
   2893c:	4be43742 2fbe4adb ad2726bb d6b6b752     B7.K.J./.&'.R...
   2894c:	1908da94 31252bd9 1305b912 0c0a19fc     .....+%1........
   2895c:	add72b2e c6dcd82e 0cfcaea8 c3f5e2ff     .+..............
   2896c:	471124db aa001ad7 14c6c81b 8ee2cb08     .$.G............
   2897c:	e7043e02 fb481a15 acb2d3c9 382027c2     .>....H......' 8
   2898c:	3dee08d6 13eb2131 25cf0eaf b4f9d149     ...=1!.....%I...
   2899c:	20ff28e9 2db9c7f4 af90aec4 d1c4e4b9     .(. ...-........
   289ac:	030213a6 eee529b6 f72215ad 1249cd2e     .....)...."...I.
   289bc:	239ccc05 8806e33e 05131822 b10141fc     ...#>..."....A..
   289cc:	1e0ebdab f0e7fa95 d416e8d4 1bbfaf13     ................
   289dc:	c404d2ca c8b5cda9 c9072ae8 471b2d53     .........*..S-.G
   289ec:	e009d8e1 af42adca cd313035 faeadfa6     ......B.501.....
   289fc:	0ea7319e e6f4e102 ddf5bd0c c8fce3a0     .1..............
   28a0c:	3704afc4 bdc0baab 00fdc4f1 fdcab3b7     ...7............
   28a1c:	05f4f120 c53bed3b 08c535be e603eae4      ...;.;..5......
   28a2c:	d205d628 60fe06d3 35bac0c8 41c54b12     (......`...5.K.A
   28a3c:	003bb1f3 9492e7ff f3b9d1cb acc22fac     ..;........../..
   28a4c:	3d92b20d bd02d0bf c6e2fdca df9596b3     ...=............
   28a5c:	baa5dfe9 c4dfbac6 9695b8a6 f4ddc722     ............"...
   28a6c:	ad0b051d f3c0cfea a2b58cda abd9ce1d     ................
   28a7c:	9cfd0ac0 e32a3705 b4b9f1cc c0af480b     .....7*......H..
   28a8c:	b53430e2 eff6b9b2 c230ebf1 143bf9b2     .04.......0...;.
   28a9c:	e703c616 1221c0cf 25d7abea d98b1935     ......!....%5...
   28aac:	e29803c0 29e0fcd9 c6299f0d d30db4a0     .......)..).....
   28abc:	19f91af8 afd7da9b 8b111fe8 c6d71638     ............8...
   28acc:	2310d8e8 f2dfe43b b79ac0c1 bec7950c     ...#;...........
   28adc:	cbaac5e9 0e0629eb a89d2499 d9eb2ae8     .....)...$...*..
   28aec:	13ba40d8 08ce1cea 1a170232 0dfe8803     .@......2.......
   28afc:	fceac102 1dd1f0c4 ecb72009 eef11298     ......... ......
   28b0c:	ea03b8bf 990bf2e8 07cdf21e bfdafd0f     ................
   28b1c:	3d15c5ef 2a23f1ad ce961786 e40ae623     ...=..#*....#...
   28b2c:	90e4bc23 fa0422f0 a517c6cc f1f3d4af     #...."..........
   28b3c:	ccced6d4 d810229f edb806e4 e6ebda2f     ....."....../...
   28b4c:	1daab949 dcf2f899 e7bfc314 a313b231     I...........1...
   28b5c:	16ee96cb 12c5ed15 d4cd02a0 b4cdffca     ................
   28b6c:	b13030bb e1c1d602 13fb18fb 1d16b80b     .00.............
   28b7c:	3ecbb5b3 bb09301c 0affabda efc429bf     ...>.0.......)..
   28b8c:	d9fc1f24 f3ed1bac 1dd9fcf2 c2df33ec     $............3..
   28b9c:	1486b1f3 bf23f2e3 1b13dca8 a737fb0f     ......#.......7.
   28bac:	b8fcddd1 e2e98cd0 b5aef1dd f8a519ca     ................
   28bbc:	11000be7 1f0ffa93 e1cff80a c8ebdafc     ................
   28bcc:	db95aed2 d1b2cd9f a999a1bf 98d5ecad     ................
   28bdc:	44efeb21 2eba1717 04e1dcc1 9b95d6f2     !..D............
   28bec:	9eabf1c8 d3fd26b4 d3ff19bd a3cbf0e9     .....&..........
   28bfc:	f19c070d f7a0d72c 95a4252d d397f1bb     ....,...-%......
   28c0c:	c3ca00c4 96a3d620 b6c9f8e5 0eb108ed     .... ...........
   28c1c:	d2a3c331 bd9fdb0f edc1caa9 d33006a6     1.............0.
   28c2c:	9a9fb1b5 a912c5ff e123a2aa 0d2ea0b9     ..........#.....
   28c3c:	1a9b27e4 4903beda ffefc2c9 2ff93919     .'.....I.....9./
   28c4c:	e2d5ee28 0dc60b31 199792d5 33a71afe     (...1..........3
   28c5c:	b6021b28 eb05fdd9 b0b036f0 0c18f94b     (........6..K...
   28c6c:	e3fa191e ed17f427 f4fe38b9 11ac1f2d     ....'....8..-...
   28c7c:	fedff1a5 9ef4d49d 030cca11 2f1ccb99     .............../
   28c8c:	1832a0c1 10149821 33f627e0 b7f3bcf5     ..2.!....'.3....
   28c9c:	dca4c5c8 f99e2899 28ef99c6 0303c3b5     .....(.....(....
   28cac:	490fb6d5 c19ae723 cab916d3 16c40ede     ...I#...........
   28cbc:	9eeb02a7 a7ccdb42 daffa3a4 ceb9d2d5     ....B...........
   28ccc:	f4bb8be0 acc3819c f81fccce eff3d0af     ................
   28cdc:	1431c9fc cfb1380f e9dff1b9 b2add189     ..1..8..........
   28cec:	ea0ce908 efbccc1f c40e23a3 1e2c19d3     .........#....,.
   28cfc:	be9b0c9a 0225e4e7 01dba1c3 37bad83d     ......%.....=..7
   28d0c:	a700deb1 c1e8b703 f6d11f9e ba06c92c     ............,...
   28d1c:	2ab9dae0 b8cbbdc9 e411f532 dbbd068a     ...*....2.......
   28d2c:	1720be09 dbbfb3ca 37ba9df2 093ffe1b     .. ........7..?.
   28d3c:	b3a4ead5 08db0b45 852741e7 2f142e10     ....E....A'..../
   28d4c:	e5d1ee8b 41fef30c 08d9a036 bb069b2c     .......A6...,...
   28d5c:	0637f3a0 1312da11 9eb9c70a 05cc23ef     ..7..........#..
   28d6c:	f82a0223 07d904b4 e315ac1d ff0fc9d6     #.*.............
   28d7c:	c90ebefd b934929a e5def102 d425cdd6     ......4.......%.
   28d8c:	340a1a03 cb22aa02 c5ebdbb1 ed0ed2c1     ...4..".........
   28d9c:	d5fb1736 1cc04414 1e0ce4bf acf324c8     6....D.......$..
   28dac:	ffedc1d8 f52c241c 24b6fbf9 b8f5cd99     .....$,....$....
   28dbc:	0bad1481 18b02c1e aee1d3a7 3cb4ad92     .....,.........<
   28dcc:	1803cbb1 d2cb192e 09cfee1a fbc3e90a     ................
   28ddc:	1cc1f418 dae8b504 d9d221f4 0c30ee16     .........!....0.
   28dec:	ecbd9a10 b7f41a16 08ded1c5 f596b7ec     ................
   28dfc:	e4ecb51a 3811efd9 2e0607d8 26fb2e0c     .......8.......&
   28e0c:	950afc3c d305d0d5 fcdbbff0 00e5effb     <...............
   28e1c:	bd01beaf e727068b d3a60eb0 a989a2cd     ......'.........
   28e2c:	f3dec29b 9d3c1ef2 d6e20ef8 b5de0f36     ......<.....6...
   28e3c:	d0d803b9 37c60011 c6cacd0e fa16e428     .......7....(...
   28e4c:	230c07ef ae9deb35 efe8b8f4 0cc005fe     ...#5...........
   28e5c:	0107bbea ebedae1f ef23ca2c a7d6cabe     ........,.#.....
   28e6c:	25ffccff fbca1424 23e31cce fb10aa05     ...%$......#....
   28e7c:	d41725e0 18c50ffa bfc707e0 b4b2310b     .%...........1..
   28e8c:	93bfadee b69529b3 e6bfb53e 35cc3dee     .....)..>....=.5
   28e9c:	e44df411 c7ac022d beeebfd0 adaade47     ..M.-.......G...
   28eac:	ee2bdbe1 ce48fafe faebcdf5 ab891292     ..+...H.........
   28ebc:	29dd1c07 c9c5f411 ede82cab e60225dd     ...).....,...%..
   28ecc:	f2f0dd09 aadc22c3 00bf12f2 b84b02e0     ....."........K.
   28edc:	e10c3a3a ec260fe5 98c0c807 2fe0bc00     ::....&......../
   28eec:	26a43cbd 1016a2cc feb1c9b1 00b3d7e2     .<.&............
   28efc:	d7f22ffc 1bbdefcd 1c16e4bc da05f4d7     ./..............
   28f0c:	1aba0d00 1c3e14ff e0d3e4c1 ae0207da     ......>.........
   28f1c:	acf3fdf0 0e3014af e915dd02 c315dd00     ......0.........
   28f2c:	e7cfdaef fd1ced93 f100c3e2 faabf211     ................
   28f3c:	ade700c1 b029b9c1 0ba0e626 2892a034     ......).&...4..(
   28f4c:	a5d4dac7 f716f709 0fd30e23 c0e9228a     ........#...."..
   28f5c:	12bd1ee0 33f3dbd8 f6bf02c8 c9001bef     .......3........
   28f6c:	03b1d3b7 c509b9c1 d3d2e2e1 1edfe20f     ................
   28f7c:	d11ee236 f236e0d1 3b38b1a1 decfcfc0     6.....6...8;....
   28f8c:	1f0629bb e31fe8e5 0be1dea4 d809b5cd     .)..............
   28f9c:	0ed510b1 2902891e eeb5c50c 3d14d6b1     .......).......=
   28fac:	abccc9ff db05bedf 1439ebd5 3d07e03d     ..........9.=..=
   28fbc:	11b4d2ae d7e4abf0 37be2d25 1e4ae641     ........%-.7A.J.
   28fcc:	3fd0f4dc a681bfd0 2004b020 14f11fda     ...?.... .. ....
   28fdc:	07cbf524 aab9bddf 15b43202 b102daec     $........2......
   28fec:	b18318cf db00fad8 f807dffb fadd049f     ................
   28ffc:	c2bfed27 dc38a9fb 35e9df1c c2b50236     '.....8....56...
   2900c:	e9e90307 2921d6dc d9052cf7 ccb00dab     ......!).,......
   2901c:	bb00fa10 9a1706a1 041bb81b 1fa80c01     ................
   2902c:	f3c0a5b2 f8ca24ac a69db934 f61a0ee8     .....$..4.......
   2903c:	2be4e6ea 221f17f6 ff283abf 13fb05ee     ...+...".:(.....
   2904c:	05f403d8 c312f516 a3ade4eb dd36c507     ..............6.
   2905c:	b2c835fe daaaf800 2439e02b e52a0a00     .5......+.9$..*.
   2906c:	3ba80525 1dc2fe37 f6e8cd21 28c6199c     %..;7...!......(
   2907c:	b2e6f701 07f5d231 dde9e53b edc8dd32     ....1...;...2...
   2908c:	f5cf1108 13faf7f9 fde6de39 ef7f37e9     ........9....7..
   2909c:	e300e6d2 0b02fd25 5cd10a0e ef29504b     ....%......\KP).
   290ac:	0542e4e9 090dd735 b62ee8e9 f424020e     ..B.5.........$.
   290bc:	e70b16db 0012fcd4 e1e3f010 18efe8db     ................
   290cc:	ebf7e94b ee12e319 f40ef307 263124fc     K............$1&
   290dc:	e912f4e5 df24091c 05f41201 fdfdb801     ......$.........
   290ec:	08eaf5e5 0dd7e80c e2f2ea0f 03c2fffd     ................
   290fc:	f11cd1fa 0513fcf6 e001f307 eaf911f6     ................
   2910c:	fed308f0 f7d7fcfc dd09eeea e0f2fef5     ................
   2911c:	f6ce1de3 dff4e5e7 cd040fe8 f6fae0ee     ................
   2912c:	daf4eddb ee02ef36 0deaeef0 f1f5d8f7     ....6...........
   2913c:	0a11f5de e5f2f2e4 07c80dda d0e82226     ............&"..
   2914c:	de462c19 dd34ce16 efeedcf2 d10315ed     .,F...4.........
   2915c:	f7da0640 19dcfdf9 0efd33f9 3eecfa23     @........3..#..>
   2916c:	2ec1f2d6 ea0f414a 034e04da 25f0f336     ....JA....N.6..%
   2917c:	090310eb 0013f2f4 00f7f90b ea0e0ae8     ................
   2918c:	e1f5d7f8 ebfcecda 0d06ccec e5fdee1a     ................
   2919c:	f5f60d0f 293e0ce6 e9f9f1db f3260137     ......>)....7.&.
   291ac:	19011af4 eff7e908 e9c9f9f1 0be9d3ef     ................
   291bc:	cc030214 efe5f9ec d0f8e0f0 d90a10fc     ................
   291cc:	f005f8f1 e4e603fb 00f1240a e2d1e7d4     .........$......
   291dc:	e204eb21 031723ff eed3f507 df07fccd     !....#..........
   291ec:	140c08ce 08f3ef0e f0fe09c1 dc06eb15     ................
   291fc:	fef2f6da 05fafeee 4209f1f8 f5fef519     ...........B....
   2920c:	ede6e2e3 e615210e eae204b0 d01810ee     .....!..........
   2921c:	0c07dbf4 e00506ff 080fffec 09f0dee5     ................
   2922c:	e9e40e01 cfe11be9 f4ccf5d6 fbdeee18     ................
   2923c:	04101a0e 200b01c6 eee710fe 1e21e4d2     ....... ......!.
   2924c:	ff0cd8ff d5f8030c e3dfeef5 e8100906     ................
   2925c:	dceeddff fef1eaf4 f511bce7 032800f4     ..............(.
   2926c:	eaf9f0e1 f913021e 18f902fa f0e2ebee     ................
   2927c:	dbf107ff f702f4f2 0712e107 0dfdd0e2     ................
   2928c:	dc1119e2 d915c40f cffdf9db f400fb07     ................
   2929c:	05eb0711 f0fff2d5 f7fce007 1709fd0d     ................
   292ac:	05ff0308 f1f201e6 0c110dd0 f8f20804     ................
   292bc:	f9fd02eb ee00fb06 feebd2f4 02f2f3f1     ................
   292cc:	f4edd3fa 23ff1bde 0410ffda eaf5ed01     .......#........
   292dc:	e208edf2 c50d07f5 0dfefaf7 17f318ec     ................
   292ec:	031bf3f2 f120fc10 fbd300df fe061603     ...... .........
   292fc:	f20e01fd d7fcea0a f5ea0316 f6fae8cd     ................
   2930c:	dfcef9fd 06f9fa19 db0fe6f3 0cffffe1     ................
   2931c:	e0f3e609 cce3f5f8 f80613f0 eae7e505     ................
   2932c:	131900fd e4be09fc 0bead8e8 efb90813     ................
   2933c:	10f1f4fb 02ffcfe5 e9f819f8 fccfcd0d     ................
   2934c:	f10df819 f8e8d0fd cf12c2db d10cda08     ................
   2935c:	0be8d4ee edf50c02 d1d0e3df e1071ce8     ................
   2936c:	dcf8e20f e5dbfe20 0510e6da eefdfbed     .... ...........
   2937c:	ec050ff1 e7db1dff f8ee0ebe d82d02f7     ..............-.
   2938c:	fccfdbed f3e1e6e4 c5d406f3 1000efc2     ................
   2939c:	e424e1f2 fb00f8ef dcf31105 f70447d3     ..$..........G..
   293ac:	f2252103 e20ee7f4 0914fad1 d8e8cf30     .!%.........0...
   293bc:	1d0218eb f91f1f15 e4250127 1feeda0a     ........'.%.....
   293cc:	0ba202da e4d727b2 2324e5eb 0fa1f6ef     .....'....$#....
   293dc:	250f3e09 fdc9ffd8 041ae1fe c20fe447     .>.%........G...
   293ec:	19182aea 1307f4d0 050c2d23 0c0cde33     .*......#-..3...
   293fc:	01100b0c 0b9300cb e6c3ede2 df0927f4     .............'..
   2940c:	e23af724 ff160302 07060504 1d072d1e     $.:..........-..
   2941c:	22f3310e 2be222ab 14eff915 27b70824     .1.".".+....$..'
   2942c:	02200919 fb2ed4a5 14d008d6 f5b40fe6     .. .............
   2943c:	f733d1fe 0202be19 f11e0dd6 fc0e32fd     ..3..........2..
   2944c:	29fd2de2 d008d737 e7eb240c f5f7fcff     .-.)7....$......
   2945c:	c8d31508 09f6e9e1 c92da726 fe09d01e     ........&.-.....
   2946c:	ff0cf616 14f837e8 013f220a e3ffe4fe     .....7..."?.....
   2947c:	114631db db12134f 4ee8080a 392be140     .1F.O......N@.+9
   2948c:	b337f823 1bf1f931 389e1ceb 251823eb     #.7.1......8.#.%
   2949c:	03f4f026 39b61de4 f5f32af6 d924fc1d     &......9.*....$.
   294ac:	2df5cbf3 c21bf043 02eeefd5 28ee0b9b     ...-C..........(
   294bc:	efe6190a 05dcbf10 38254b04 2d9e1fbf     .........K%8...-
   294cc:	a1dff413 fd08dffa 0a2019f6 f0460f03     .......... ...F.
   294dc:	810ef512 00f940f8 13bc3419 3e0d2edd     .....@...4.....>
   294ec:	e7f3e52f c8d2f2e7 221616e7 13bed1e7     /.........."....
   294fc:	2417e5a9 c5c5089d 050ff632 eafac501     ...$....2.......
   2950c:	ef180a27 0404f4f5 153a25ed c718d1c2     '........%:.....
   2951c:	d8132003 08f405f8 1001189a b9abe4de     . ..............
   2952c:	b7e9d9f3 021cd5e0 03eee6c8 e9f5de21     ............!...
   2953c:	08eb0afa 1f02ea1a f3e4eada ea2bf7e0     ..............+.
   2954c:	facbc932 01fff294 f016f509 f1c9dfff     2...............
   2955c:	c7e518f9 e7ed0410 0ae12257 fcfa24b4     ........W"...$..
   2956c:	f80f27dd 02f0f420 efb0e7ff e9dae928     .'.. .......(...
   2957c:	08c30b5a 289af9fe fdf0dcde caecb237     Z......(....7...
   2958c:	1f5423f1 05fbe0cc e3e7edf4 03c70081     .#T.............
   2959c:	f82bf5f4 030ed5fc c706d14e f70824b0     ..+.....N....$..
   295ac:	e6ef440e 03f20117 ddebe7a2 c2d9fda1     .D..............
   295bc:	fa01dbe1 e6e4cee4 1520bfee 0fcf3a1f     .......... ..:..
   295cc:	f00de5d9 e600bfe8 fa1ffee5 dde2d7f6     ................
   295dc:	f6f3ff0e b8e4bc03 21dfea1f efebe3e7     ...........!....
   295ec:	26f205fa c80eacd9 9a0de8da 2d06e002     ...&...........-
   295fc:	ff32d209 e2b72531 f4f51804 2600274b     ..2.1%......K'.&
   2960c:	e1ecef33 0849e8e1 f9f3bd0d c5fac607     3.....I.........
   2961c:	20310c57 f0e6bacc 0d1b0206 fdf41df4     W.1 ............
   2962c:	e334512f 22303400 320963cb 21fd02c8     /Q4..40".c.2...!
   2963c:	0e02faf7 cfe4fc1e efc52f5a 38f4fc35     ........Z/..5..8
   2964c:	f22edecf b0fc1924 ed4b0c18 080fff08     ....$.....K.....
   2965c:	0db3e9f2 f1edde11 e1efee2a fade31fd     ........*....1..
   2966c:	e503d113 fe033225 18f14109 2732ee06     ....%2...A....2'
   2967c:	ad09f9f2 31b901f7 fa1ed206 102c93c1     .......1......,.
   2968c:	00f5c509 266a6211 e621e2f1 2ef28de8     .....bj&..!.....
   2969c:	f8eefa9e 2c0020f3 cfe5eeff efe8af23     ..... .,....#...
   296ac:	fe133b25 f1fa03f6 dab63711 ea04fa16     %;.......7......
   296bc:	f422fad6 ddc6e90e fcb9cbe2 2a810dba     .."............*
   296cc:	b60e120a 24b2b7e3 08acb4e3 2cb6b5b2     .......$.......,
   296dc:	262fe7c4 f8250ed6 33e3e607 bed150e1     ../&..%....3.P..
   296ec:	0bb7a635 2c2b0634 14f402c8 fdf1cbc8     5...4.+,........
   296fc:	fab43d0e 2fefd0b2 060004ea 8acbacc5     .=...../........
   2970c:	aa27d545 e91028bd a4ebcbe7 1a522045     E.'..(......E R.
   2971c:	ce1f90b9 dee21ed3 9908f8a0 fcdf061c     ................
   2972c:	5216b328 d0f7bb57 ad15abb2 adeae01a     (..RW...........
   2973c:	a538baf1 cbd5c6a8 16a6d5b5 2f1428ce     ..8..........(./
   2974c:	c6bd14c8 9c11213b 8c1fd421 c6d09484     ....;!..!.......
   2975c:	b03f0cf1 2bddf21b 2c3355fa 12cb101d     ..?....+.U3,....
   2976c:	13f0313e fb9f3423 13e33adb 4598f6af     >1..#4...:.....E
   2977c:	b232d610 36addff3 fce4c6e0 ce20afe8     ..2....6...... .
   2978c:	bd1fcf14 cd1c0986 24cef9bb 20c1d5e0     ...........$... 
   2979c:	feaa4722 b545ca1c ce3b340c bea9fef3     "G....E..4;.....
   297ac:	1e031d06 b311b0e8 c9ddc6fe b6f20b94     ................
   297bc:	f20915bc a820d224 b5e5212d 0a4236c1     ....$. .-!...6B.
   297cc:	b1d6bef9 e0a0fa99 06aed517 233fd0d5     ..............?#
   297dc:	e400fc21 f5cac8af 03262ed0 bcc7ea23     !.........&.#...
   297ec:	9024cda8 15e3e1b2 38d1f39f dd0e44ca     ..$........8.D..
   297fc:	e1b6f4a8 0baf440d ada9c63e 1ce5e1e5     .....D..>.......
   2980c:	15df2401 a90cb9d1 e4ef3ad7 f3cdfd14     .$.......:......
   2981c:	ea992ca6 d2f32cf6 9b93243a dcd7d1f5     .,...,..:$......
   2982c:	ecc9acf3 ebd9fb56 f3b81019 bd22c6a9     ....V.........".
   2983c:	d2f1b3af 0327df15 03d1f801 2faf2296     ......'......"./
   2984c:	ea013d87 a1dcdab4 f444c2b5 28d6c817     .=........D....(
   2985c:	e73dd5e0 a43ac2f8 dcea3f24 06332605     ..=...:.$?...&3.
   2986c:	19d30318 ccbba3ba 0b0ac1b6 441b5f3e     ............>_.D
   2987c:	1718cea2 1aa8e0c8 3db28daf d1b2d4c6     ...........=....
   2988c:	b4482fe3 c6face28 b40b0fce 16db212c     ./H.(.......,!..
   2989c:	ba06330e abad202d bb0728c2 3c51c9a9     .3..- ...(....Q<
   298ac:	122bb510 0fc6fbfe 8b8df5ae ba2ad035     ..+.........5.*.
   298bc:	a6af39e8 b5af4302 2d1ef5df 481ab5b0     .9...C.....-...H
   298cc:	1b9ec934 31cfb69f c9b59cbe 13d52fee     4......1...../..
   298dc:	fa8addff 3911adb4 0b079f9c fcd82a33     .......9....3*..
   298ec:	33da08cb cbd6e312 08f1e4f6 d898230b     ...3.........#..
   298fc:	8fb026f6 edeeacd8 2bccae3e 21fc24fa     .&......>..+.$.!
   2990c:	353836ec 8fe19719 bbdb9daa fe34c625     .685........%.4.
   2991c:	fd9f3409 01eeadaa eb19f1da b83a2137     .4..........7!:.
   2992c:	f6dbd436 c99bfaf7 ebfdea14 d51618cd     6...............
   2993c:	ca37d5c9 c0c4aab7 f815eaf3 33b61cc6     ..7............3
   2994c:	09f9ec37 c8048fcc 38bc3543 c91e2914     7.......C5.8.)..
   2995c:	0fe50eab 1e07c909 952eefec be3229c1     .............)2.
   2996c:	39f3b813 ca231b34 aaad37b2 38b91fa9     ...94.#..7.....8
   2997c:	b995be9c 1cd6350b 07a51ad1 fffcdb4b     .....5......K...
   2998c:	a5330a3e dcdaad36 db111220 dfafa018     >.3.6... .......
   2999c:	3622f110 b7fb39ea 36db332b eaf19deb     .."6.9..+3.6....
   299ac:	b5ac2ebf ef99bba3 edd8f100 3fbce3f4     ...............?
   299bc:	33f10e19 0f23cd14 04d3cdc8 e529b040     ...3..#.....@.).
   299cc:	bfd99cdd 4694cd20 24d39fdc 18f6bc31     .... ..F...$1...
   299dc:	c5d2c0de 0914c936 f41fc4c0 dae024bc     ....6........$..
   299ec:	46060105 17c0f118 da2caefb cacbf8d3     ...F......,.....
   299fc:	d4ad03b0 18455a1c 1817fd25 b7ce19c4     .....ZE.%.......
   29a0c:	b7c1b1c8 e7050701 e89fcc37 e3d7129a     ........7.......
   29a1c:	342410cb b7e01def c9d7b6fa 00ef3ccc     ..$4.........<..
   29a2c:	d2071b87 dc2df4bf d90f2ded f7f8e5af     ......-..-......
   29a3c:	ed37071d 0592b604 14c81510 e4b33fc5     ..7..........?..
   29a4c:	0d1bf8bc eed01df2 36cde03f e7ccf117     ........?..6....
   29a5c:	ffeabfe0 fbf5f7b7 b8220705 ba3ad2bd     .........."...:.
   29a6c:	130bdef8 1b0b9af0 0bdabf9b eb21eadf     ..............!.
   29a7c:	ecfbb0f5 f8d9eafa c0fe252f 2a1ae5cf     ......../%.....*
   29a8c:	accec437 36fdb820 f8eb29f1 febcc5e5     7... ..6.)......
   29a9c:	e61721f1 af19dfe0 a8a9b2e8 bccf90ed     .!..............
   29aac:	ca2a32be bee712cd f6023bba b90ec9ca     .2*......;......
   29abc:	b9cb07b8 c51bc218 fc05e8af f8cf3214     .............2..
   29acc:	eee4f239 09b0f4d9 bed924f7 0e97ff19     9........$......
   29adc:	38d093ec c5f1d521 ebd5c400 d317dad6     ...8!...........
   29aec:	24cbe8bc 9b1af307 3301a89f 04b7df1c     ...$.......3....
   29afc:	d1ca30b9 e8ea2806 cb321220 33c5dd8a     .0...(.. .2....3
   29b0c:	d29e9e0a c2160513 2017f0c5 07bb0525     ........... %...
   29b1c:	c91730f4 46e02ae6 44b2ec17 d4f0b1ce     .0...*.F...D....
   29b2c:	edfeffd0 2034dd1a c3b5f00a 1481260c     ......4 .....&..
   29b3c:	05d02cff f5a9a2f3 f4a8c8e6 1c15c1e8     .,..............
   29b4c:	abbac9f8 f0e226e2 1d07183a c4e8fee5     .....&..:.......
   29b5c:	21c7203c 33b60f46 fe8426fa dee3bdf4     < .!F..3.&......
   29b6c:	ea0606ea ecc400aa f8440814 dbcbb6c1     ..........D.....
   29b7c:	f10c2a12 c1ee1948 1ade1811 16b32232     .*..H.......2"..
   29b8c:	d438e001 2ee5384e e20de3d6 15a6bc05     ..8.N8..........
   29b9c:	fad90ad1 e3233c3b 15131e2d 33433bb0     ....;<#.-....;C3
   29bac:	3bfc1af3 1bf336e4 26f5c51e 8be8d3c0     ...;.6.....&....
   29bbc:	f4ac103c 1fb800b9 18e6f622 3ecfd31d     <......."......>
   29bcc:	cad44cc8 3a212c0f ced747b3 a7dd10e9     .L...,!:.G......
   29bdc:	bfe00dce 0a272dc1 e1d5150a 51b83af9     .....-'......:.Q
   29bec:	aa1ee21c 16b5ecad 2828df18 e6d5252a     ..........((*%..
   29bfc:	d6cd3bc9 d1aedb01 49cb160b 11d21ab6     .;.........I....
   29c0c:	d319d5db 263a0ac7 fc30caaa acd236ba     ......:&..0..6..
   29c1c:	02d527f3 c6cee9da 4fcef902 ccc1a0df     .'.........O....
   29c2c:	f2dcef0a d4c4abf0 d8c4f28c fdd5fcbb     ................
   29c3c:	1b320db2 ea28d149 29adc5c2 0afdcef6     ..2.I.(....)....
   29c4c:	111bc624 09dfd9b5 1fbe26bd 14f4ce3b     $........&..;...
   29c5c:	10d1dbfd 02b0e1fb fcbfb1fb dc2e1423     ............#...
   29c6c:	311905ab de05d7d1 3ed41ae7 11da4602     ...1.......>.F..
   29c7c:	f00efa48 05dec443 08e8271a d408b7b5     H...C....'......
   29c8c:	1c1cc7b2 0ca8d7bd ecfdfa30 bd3c16b9     ........0.....<.
   29c9c:	a2f7333f ff27a5cc d233bf03 3d10dbfe     ?3....'...3....=
   29cac:	213de5d1 c142fe0e e034a502 d4d5aa98     ..=!..B...4.....
   29cbc:	271b3ad3 0fc6e820 c20ac2bd bac4a81d     .:.' ...........
   29ccc:	080ad2d9 d6d291e4 0fbce818 3745b8f9     ..............E7
   29cdc:	b63809d4 2aec3d3e 90ff0218 dda9b704     ..8.>=.*........
   29cec:	edf7d0d2 cbbbc82d c4ecb8d3 d4f2c10d     ....-...........
   29cfc:	d0e72baf e68ea0f9 cab9d11e b99cf5ba     .+..............
   29d0c:	4fa30fab 2919c9e3 c4b93b33 b112b7ff     ...O...)3;......
   29d1c:	b524be93 d8d634f9 d9074937 e4e1e2e8     ..$..4..7I......
   29d2c:	e906ebc6 d319c4ce c0e93026 a290d4b3     ........&0......
   29d3c:	141ad4cb bb09f8b8 2e2720cb b616299b     ......... '..)..
   29d4c:	fbfa4596 adf431ce 1ebefe98 dcf9f4e3     .E...1..........
   29d5c:	c7b4cdb7 949cd8a4 d783d5a1 b298dbd8     ................
   29d6c:	9ad50dd1 29b1e1fb efb7dcf6 eee1f80d     .......)........
   29d7c:	ce09cfb5 acc61a22 da20a4a1 03a3f901     ...."..... .....
   29d8c:	eebdbe10 1bc3031c f5c7e2aa 00a4c6c8     ................
   29d9c:	00a2f3e8 111eabbb 1226443e da0b143c     ........>D&.<...
   29dac:	d89ac803 b1de0691 dda99881 df12a4d2     ................
   29dbc:	f9b60ec8 c6fcf8c7 cef18c97 06b1f6c3     ................
   29dcc:	9a2dd0d1 1137c099 25ded8e9 29bd09c3     ..-...7....%...)
   29ddc:	02971d0f 23b0f347 acf726dd c3b6184a     ....G..#.&..J...
   29dec:	bf372686 aee821ac e99acfe9 ed89d8df     .&7..!..........
   29dfc:	8627ae93 85b4bfac 942f0da7 e6ee2df1     ..'......./..-..
   29e0c:	1bb98efb 951302be 103c47ba 13b6f0b4     .........G<.....
   29e1c:	54d9b4ea 18bc14ba 98c3c8ac ec9c0e0f     ...T............
   29e2c:	9cf4eb25 91e8b6c5 fc00e598 c5fcd1ee     %...............
   29e3c:	eb2dbdbb 40a0eae8 e7e2bced 9bb9938a     ..-....@........
   29e4c:	efb591c0 08e816c9 fa4c53ae e7321cfc     .........SL...2.
   29e5c:	c6b8e4c7 16f23498 b1d3e5c6 2e2e30e0     .....4.......0..
   29e6c:	f52cd491 d9f1e724 06b7d9b9 e7f901e8     ..,.$...........
   29e7c:	95b0a10b e80306da 29dcf2b8 89f79538     ...........)8...
   29e8c:	8333e3bc 30ee1514 baf8a19a b21bb08c     ..3....0........
   29e9c:	c7b31b50 341eb43c a63af912 e3aca1b9     P...<..4..:.....
   29eac:	42a1ee10 42edc3c1 dfc8c610 4543eccb     ...B...B......CE
   29ebc:	f3c7e813 2f181c22 fdb78df1 eadc17ce     ...."../........
   29ecc:	f6bdf72a b4a4bdf2 3188e4b1 feb1d2bc     *..........1....
   29edc:	d4adcfa2 bd1b3915 f7ba9bee 19d8d7a7     .....9..........
   29eec:	0a95a052 c2abd591 f2c4c0fe a43111ba     R.............1.
   29efc:	c322b5e7 d6c8ba48 0842889d d29d34f1     ..".H.....B..4..
   29f0c:	14dc0f23 20e7a383 01df9694 2b82e5db     #...... .......+
   29f1c:	992dc111 02970b92 f9a3bba1 dbd3c0a7     ..-.............
   29f2c:	99f5948f c80bac0d 1cd9cbd6 4aab8da6     ...............J
   29f3c:	9f00a8ea f7b2bf98 c1ab10d0 c3f4a28b     ................
   29f4c:	0a24a781 37f524f4 fdac0d1b 1cf4ad10     ..$..$.7........
   29f5c:	dcf0ab08 ccb110ec 45c8c454 a9a5d8c7     ........T..E....
   29f6c:	c13ff3bd e2f63de0 3f0abcce e9b9e00a     ..?..=.....?....
   29f7c:	32edf3d2 b1e522db 0337cbb9 eff2fd32     ...2."....7.2...
   29f8c:	b7fb00e0 f3ad0082 322ec1a1 baace588     ...........2....
   29f9c:	3ff52b29 92fad1f4 b9a6a513 acb428c2     )+.?.........(..
   29fac:	0ff9beae b2fbda1b 19abf1a5 c69494fa     ................
   29fbc:	2ed087a8 f89992e3 90e88cd4 3be1320c     .............2.;
   29fcc:	d20bbbfd a537c407 dec9f10f f2a20b21     ......7.....!...
   29fdc:	ac02ae9f dac63ff5 2abc0ff9 03ebe8e2     .....?.....*....
   29fec:	e4afd92d def7c68a 1e8ee604 37bffb2c     -...........,..7
   29ffc:	ca8cf0cc 0203cfe7 1994d731 f8f21123     ........1...#...
   2a00c:	c11c2fb0 051fee2e a7bb1b28 b90504a7     ./......(.......
   2a01c:	a1261dab f1fa2507 f4ca07f5 d4d70eed     ..&..%..........
   2a02c:	0923f7f8 ed02e104 ef19a104 c982adfc     ..#.............
   2a03c:	e0efeb04 fbe8f6d9 00eef9cf e302172a     ............*...
   2a04c:	2300d3e6 c81fe4fd f006d0d4 df19baea     ...#............
   2a05c:	1df7d202 ebeff71d fafb080b 2a21ee1e     ..............!*
   2a06c:	eb040099 e61118f3 06d8fdf1 0d1afe06     ................
   2a07c:	8fdba916 043337ef dbfbe61c e00f0df5     .....73.........
   2a08c:	a1f3ba0a f4a105f8 cf122aef dcf4a5ce     .........*......
   2a09c:	d0ad13bf 81122915 2012fd12 eeeefcbd     .....)..... ....
   2a0ac:	9cea0efb fbd9cd0e 0f27c12b 06d0f1eb     ........+.'.....
   2a0bc:	dc07fbff c70209f3 0bf80cfa dee8e300     ................
   2a0cc:	db11e412 cf0afaae 1ac3d7df 03eff5e2     ................
   2a0dc:	f6fde2e2 d917ea07 d9f8b4fc bb14c92a     ............*...
   2a0ec:	ea252e27 fdf70b11 f2171c10 35f14f0a     '.%..........O.5
   2a0fc:	100beb14 11180f2f f41b3d02 2626b72f     ..../....=../.&&
   2a10c:	e22b0110 ef0beeef 3a0cf215 ee1af41a     ..+........:....
   2a11c:	1e22c409 d8f9034b b3efe546 3029f9b8     ..".K...F.....)0
   2a12c:	1e07ac10 06ea1ae1 33f83f8f df4cfef1     .........?.3..L.
   2a13c:	f8e44f0d 15e0f331 ef23d919 edf52817     .O..1.....#..(..
   2a14c:	20ee0d09 1d10ef13 e8e2f411 f2fcf909     ... ............
   2a15c:	d8fabfeb f3c9a2e8 c8e981de be29d612     ..............).
   2a16c:	24b714ff fd09fb0a e0d7e7e6 b1011df9     ...$............
   2a17c:	ea22fa20 1c1a0113 2eaa3b0a e8fe5dc5      ."......;...]..
   2a18c:	14ef1129 14f1f30b b32ff71f 13d52aca     )........./..*..
   2a19c:	c80c0a16 0518fac3 18efec56 cf06e425     ........V...%...
   2a1ac:	1dd028e0 cffae7f8 ee2a08bf f510ba58     .(........*.X...
   2a1bc:	05f4fb01 250eef2b e9d6f725 12033bec     ....+..%%....;..
   2a1cc:	04f3f526 14301605 1db9000c e3fce8ec     &.....0.........
   2a1dc:	ce22f036 0eedb63f 1bcd0be8 f3ff0dcc     6.".?...........
   2a1ec:	fe11e7f6 ebe707ae c4a8bd0e e8dffe22     ............"...
   2a1fc:	dde7bed7 1ad2bb16 f227f4c2 1929dfd1     ..........'...).
   2a20c:	1b1dc5e9 0bfcd7e1 ac02f610 e4120308     ................
   2a21c:	16baf5dd ff09d1ee f5f7e1db f804b4c1     ................
   2a22c:	cfc5d8ee f3e3c01f 12951201 e60ef1fd     ................
   2a23c:	fcfef607 09f740ed f51b12fa 2932e741     .....@......A.2)
   2a24c:	36f73428 06f849e3 2bffff14 0bf21bfd     (4.6.I.....+....
   2a25c:	fffbf3fb ff07df29 0d22e804 f509221c     ....).....".."..
   2a26c:	b7b50438 1229fce6 50e713b7 391436d9     8.....)....P.6.9
   2a27c:	1f273cec fb11b310 00e80507 dcf7292d     .<'.........-)..
   2a28c:	f9e204fa 2111fce9 dc25e82e 18ef0105     .......!..%.....
   2a29c:	0a11ffe7 c302ccc2 c91fd219 edf5bcf3     ................
   2a2ac:	4f1600dc c1031929 160502c3 0afcf60f     ...O)...........
   2a2bc:	f2f705f8 e2c6fbfe ed0305f8 fcfea813     ................
   2a2cc:	0c31429f ddce150b dee7e5d1 b7f49f26     .B1.........&...
   2a2dc:	b608d3f7 f5253ae6 0dfad2d5 09f8ad05     .....:%.........
   2a2ec:	f6fa1bc8 06efe903 29f300ca eadc1a08     ...........)....
   2a2fc:	44b8ef13 df1cfa01 ccf7d204 e3e0fbf8     ...D............
   2a30c:	0ad9e4dc 1af82f41 15df2ef8 010f43e6     ....A/.......C..
   2a31c:	05110d11 efd22ff2 e614fef4 ec38db0c     ...../........8.
   2a32c:	1df1f526 faf126f7 a0cee717 2d1f02f3     &....&.........-
   2a33c:	00000ce9 13190cf5 fbfef416 1ed52d05     .............-..
   2a34c:	03403afe 040c11e4 f01500c5 01741729     .:@.........).t.
   2a35c:	f3240c01 100cf22b ec1e0541 0de6e7e7     ..$.+...A.......
   2a36c:	24ce060f ca0706e0 2012d5ff 0de1fb1f     ...$....... ....
   2a37c:	d5f410b1 0011f7d8 1c03daf4 abf4d914     ................
   2a38c:	ddecef18 0b2f0fae 07184c1a 1c050a1d     ....../..L......
   2a39c:	39c7ecf4 2fb91cb3 81de8701 d61624f9     ...9.../.....$..
   2a3ac:	0bd223ef f2ebe50f cdf3152d 0910ed2b     .#......-...+...
   2a3bc:	f7cfd221 229a2b9d 09cefaee 0bab01de     !....+."........
   2a3cc:	0c082318 f6d324af c0151eb7 2315bc95     .#...$.........#
   2a3dc:	15f9a014 13f8cc1c 100e01e0 40310903     ..............1@
   2a3ec:	0e3009f0 2ac20de8 fd1c5ccf fbc6141d     ..0....*.\......
   2a3fc:	291303aa ef93f91e e6c9f0f6 3121f9d2     ...)..........!1
   2a40c:	29d8fddc 0cfb2124 fd321afc 20f4d609     ...)$!....2.... 
   2a41c:	fbf3d9ee ed5615fc f207fa28 0dfff7bf     ......V.(.......
   2a42c:	16160e22 f1ced5d2 f5392d09 eb09fc1b     "........-9.....
   2a43c:	15da3c1c 30fa05f6 c910ebab 09f60b15     .<.....0........
   2a44c:	db08d6f3 ddece50f ddf7d22b 32c9ddc2     ........+......2
   2a45c:	13c80ede 3ff91a27 2af90cfc 15fbecdd     ....'..?...*....
   2a46c:	bde0d01b d50914d6 f7f037fd f647f105     .........7....G.
   2a47c:	e90517fe 1bdfde17 a8f43e18 feb8e2b4     .........>......
   2a48c:	f5d90ae5 0fe405d3 170b685a fcab24cf     ........Zh...$..
   2a49c:	033510f6 40dc11bd f9f1cc0b 1111dd2a     ..5....@....*...
   2a4ac:	111b0032 06f73c08 3a0b0fe5 26c5f9fe     2....<.....:...&
   2a4bc:	132d13ce 01be0c21 1f30d7d7 f2e6fafb     ..-.!.....0.....
   2a4cc:	eee6e6d7 1f24f512 0302b9fd eaad2f04     ......$....../..
   2a4dc:	f0feef07 140c0ef9 fc2d1019 223ee500     ..........-...>"
   2a4ec:	ef08c60c d8b5e6f0 f1281426 eb110aee     ........&.(.....
   2a4fc:	f914ff25 ae08fdf7 032aff1f 202bc4ed     %.........*...+ 
   2a50c:	f9f9eb96 0fd005d9 fb1bf0fa dafef13f     ............?...
   2a51c:	e4c0e638 e20601f7 09bd24cd e4ed1323     8........$..#...
   2a52c:	f30fd90a f81edfdd d2d8c0ee c3edfbdb     ................
   2a53c:	ecf1fffb fa02fa0b d307bcf3 0e23fa03     ..............#.
   2a54c:	01da0910 30d20fc9 e1e2e3f6 06e300de     .......0........
   2a55c:	e61fc4ea eee5dcfe 2828dfe4 15ed0abd     ..........((....
   2a56c:	cf3feade 2606e135 dbf50505 f1f411fe     ..?.5..&........
   2a57c:	2e110716 16d9df0f 0d3b2217 f1f2e0fc     .........";.....
   2a58c:	f3e421c8 b5f6f50c 9e15e8f7 1828c4dd     .!............(.
   2a59c:	102ddf0a 17bf2dff 06f307ef 170a30ff     ..-..-.......0..
   2a5ac:	e92b4209 254de401 2221e022 f008b31e     .B+...M%".!"....
   2a5bc:	fa31f822 00e50bcd 07092041 fd0410fd     ".1.....A ......
   2a5cc:	d9fa120a 150703fe 08fa2ae0 071a08c8     .........*......
   2a5dc:	1516f6f7 c5d40f11 d10c1a34 e9ed1b16     ........4.......
   2a5ec:	1403e1ed f9ef33fe 1c1401ef 281be912     .....3.........(
   2a5fc:	daeae4f1 e9cec9ea f70712da 11f21b02     ................
   2a60c:	040bdaf0 fd0e2c07 2af3d81f 0b1112cf     .....,.....*....
   2a61c:	c406e505 02e0fc18 000fdcf0 e6d309e9     ................
   2a62c:	0a16f0d2 d1bd05d5 f41ae509 07f9e23b     ............;...
   2a63c:	d4e706d2 33fecdf1 27fb0aff 19ea06a3     .......3...'....
   2a64c:	082a181c 0ddbff2c d1e3fa95 dbbd0efe     ..*.,...........
   2a65c:	e619171e 05dffac5 b4b602e2 d113adc0     ................
   2a66c:	f3d2da05 a612dded d734bbf0 b8eabdf4     ..........4.....
   2a67c:	bfdafdbf 0df820be d1e3e303 d01c2628     ..... ......(&..
   2a68c:	20f9e3f2 0e16e004 c8f8f9dc fd25c0ec     ... ..........%.
   2a69c:	b902e2f6 cec8dff2 1deec005 cfc8dec6     ................
   2a6ac:	ceb9c7d6 181ee2d9 2d0e03c8 bb06ea0e     ...........-....
   2a6bc:	ccc314bc c9d3fcc5 b3d1f9f8 e8201cdb     .............. .
   2a6cc:	b7c616bb e6a4e829 f80ff813 1c13100d     ....)...........
   2a6dc:	ec0b00ca fbe315ce e2f8f9dc ecf9e6db     ................
   2a6ec:	09c00ee7 bbb3bef7 d423dbcb 25cdcdc7     ..........#....%
   2a6fc:	d2d0cf1b cdf3ebea 1f1dd8b9 c8d2d124     ............$...
   2a70c:	ded5db45 d6e8cbf6 0e15eec0 30c1d7cd     E..............0
   2a71c:	3000b2c6 072a3104 caf9eacb fcff2eb6     ...0.1*.........
   2a72c:	e8cff6e7 c3c602d0 0814f4d3 f6fcfeda     ................
   2a73c:	dbd9b3e8 c70fbe22 f8ead7cf b41d12ca     ...."...........
   2a74c:	08ba1c18 dacd05f7 20d7c0cd c4a517c9     ........... ....
   2a75c:	d6caa306 f0c414f2 c02afabd ced915c6     ..........*.....
   2a76c:	dcf2ed10 d6f90b0b fcae04c3 c2d709ea     ................
   2a77c:	0ae5e812 1551f303 07f6be11 d4fc15f1     ......Q.........
   2a78c:	dbd0e7ea efd3f1dd eed6f7bd 2b9e03cf     ...............+
   2a79c:	c0e6f73c 15d3e012 f9d6fbba d7dd161a     <...............
   2a7ac:	f908ed12 fbf211ba 26caed30 f5faf4d4     ........0..&....
   2a7bc:	e9fe0dd2 06fdc4d0 2edfc114 aaeaf6ef     ................
   2a7cc:	d40cf5e8 ffc795f2 e7d6f71f f909c2c8     ................
   2a7dc:	ff0205f9 cf06b2d6 eb2000ff d81d4311     .......... ..C..
   2a7ec:	ccd7f9aa d6f0ffbd caeef7fe bf09a9b5     ................
   2a7fc:	e713ca21 d5e30404 06ebe6ec eee1eecb     !...............
   2a80c:	cdae06e6 e7cd0706 edbbf544 d5ea2c7f     ........D....,..
   2a81c:	dadddff8 cbd924eb ccb0faae e3cacc02     .....$..........
   2a82c:	a72e071c 00052401 f3f5c3fd e2f2fc33     .....$......3...
   2a83c:	dbd3c2b0 c9edbcdd 1fce0de1 3f6fd2b9     ..............o?
   2a84c:	03b3c815 ebd8f81b d011140b cb98e6f1     ................
   2a85c:	c310e1cc fdadbfd4 a9fce6fb e8d2e0c3     ................
   2a86c:	0811fa0d f4cbbdde f8c211df adbe17cc     ................
   2a87c:	cd0e1b47 d1f8d7e8 1cfbcbac 00f7ac02     G...............
   2a88c:	20efdfc5 c3ebbfea c424f713 19dcb2f1     ... ......$.....
   2a89c:	fb171ccf dacdc819 c4ec19cf 19e2aee3     ................
   2a8ac:	3ef0ce18 09c2e7f1 ddedc5d9 e2cfccf5     ...>............
   2a8bc:	e6d8d4f8 ebf8d636 12ebcb23 eef5ebe6     ....6...#.......
   2a8cc:	24b4ef16 d7dbf0c3 1a02e81c d61c00d4     ...$............
   2a8dc:	fdcb0cec b21a373a e807c0e7 f6d2ae30     ....:7......0...
   2a8ec:	eb0a2dce efe319c8 c51f1bfa eeb1dcdd     .-..............
   2a8fc:	c4d1d90c 03f207fc f6d6befd fceabfe4     ................
   2a90c:	dab5babc 4a67d0c6 caf4eb1d cffbdee0     ......gJ........
   2a91c:	07cfcafc e20bf7c1 da1cdb11 f9ea090a     ................
   2a92c:	05f104d5 d607b7bb 17e2bcda 0ceec10e     ................
   2a93c:	d0f4f8e6 c625e2e1 d8d501f3 d605d7bf     ......%.........
   2a94c:	ebaaf3e8 04eba8bd d8caebdf b8d8efc2     ................
   2a95c:	fa25de0d 11c4121a e4f10aef dec301e9     ..%.............
   2a96c:	a9bde413 0b0731d4 5103d7e0 f3e5ddf3     .....1.....Q....
   2a97c:	e8abf4bd d81be80a e11f10e6 f1072e06     ................
   2a98c:	fae40b0b fb0a254a 24f6edc8 d4241816     ....J%.....$..$.
   2a99c:	0cfb12d5 fa07e410 fe11fd04 2cf72527     ............'%.,
   2a9ac:	23f2443d 100920c5 e8e0def1 2c22f501     =D.#. ........",
   2a9bc:	2501fe08 073ffff0 0801fcf2 e609283a     ...%..?.....:(..
   2a9cc:	05d9fbf0 d4f42009 06e2d1f5 e4c704ee     ..... ..........
   2a9dc:	0b0e2df9 03d70a07 03e7fcfc fc0bcf07     .-..............
   2a9ec:	d2e03144 f52714f9 1bf7f157 f918f529     D1....'.W...)...
   2a9fc:	06160f20 1521b7f8 edc8ca09 22f4f531      .....!.....1.."
   2aa0c:	f0febd8d f632f00e ed2ef00f e8102005     ......2...... ..
   2aa1c:	1e211509 19fa18ea f34608f2 d80e29fc     ..!.......F..)..
   2aa2c:	fa01f2ef f1ec01ff f8f02e1d 0ff6cc1b     ................
   2aa3c:	fcca010e 040a45fc 24f12801 13040e0c     .....E...(.$....
   2aa4c:	eaeef1ea cc022313 0d15d8f8 1310fbd4     .....#..........
   2aa5c:	12bce7b8 a2761ff8 06ed111d 06faf10f     ......v.........
   2aa6c:	0403f3bf 04e22104 f0ec35f8 13fafafc     .....!...5......
   2aa7c:	21df0714 4fcafee5 d6f0c9d4 181df650     ...!...O....P...
   2aa8c:	0b08e501 f414fef1 dddaea49 dada0cd7     ........I.......
   2aa9c:	06aeeae6 baa2c93d 13381deb 27ae2dc4     ....=.....8..-.'
   2aaac:	f1eae401 cc1d06cf c7ec081b 00f10202     ................
   2aabc:	c1ef0b1e faf9dc21 f6f8ddff e5bfde03     ....!...........
   2aacc:	e118c2c7 04f9fac5 17d1ebe3 1526f1f2     ..............&.
   2aadc:	db0d0f1e 3ae94118 1811d81d 16fde20e     .....A.:........
   2aaec:	3314ee0b da081c02 f0cff5b8 0106ea31     ...3........1...
   2aafc:	0e010cf5 f6f0dc31 dd07f815 100715dd     ....1...........
   2ab0c:	0025120a d7d20022 dee5c7ff f5fcf44d     ..%.".......M...
   2ab1c:	003bf3f2 45f1df20 f8d9ef14 f7512a19     ..;. ..E.....*Q.
   2ab2c:	01d62111 df0eee0e 350e07eb df12d2ae     .!.........5....
   2ab3c:	e227f3c5 35c0c412 d0da351f 0d471dd7     ..'....5.5....G.
   2ab4c:	080be3e3 01cb0a56 06c61f02 3641f0ed     ....V.........A6
   2ab5c:	d940ab3c ebc7f431 15e7f619 b681fd25     <.@.1.......%...
   2ab6c:	1243f0c8 e228eee4 27140d07 e72108a7     ..C...(....'..!.
   2ab7c:	bde9440c 033e18fb c30c2f14 16000101     .D....>../......
   2ab8c:	d711db53 0cd4f9ce f31ff327 000d0600     S.......'.......
   2ab9c:	fce7cfd6 5b14161f f5433401 eee93fd7     .......[.4C..?..
   2abac:	c544e95a 0ff9df19 220608df f145e003     Z.D........"..E.
   2abbc:	e5f10909 f5cb123b f22e21ee ec0605f8     ....;....!......
   2abcc:	df1251e8 fff2c706 edf82642 b605f51d     .Q......B&......
   2abdc:	fb300ce8 0f1d18cb 0e16cefd e30e053d     ..0.........=...
   2abec:	ed0c3d2c fed33218 33b4fcc0 5006d44d     ,=...2.....3M..P
   2abfc:	fdfe0ef7 121eebf7 4900ffff 39151bbe     ...........I...9
   2ac0c:	a3c407d9 0753ee1f 0f0d140f dd6a0109     ......S.......j.
   2ac1c:	f8120bf5 fd56f3d6 fdf5f803 b8e2051b     ......V.........
   2ac2c:	0eeff6d6 dbbb1eff d5b60eca c726de2e     ..............&.
   2ac3c:	11de08d8 1bdde3f2 e6f01630 ef7f11fc     ........0.......
   2ac4c:	07f0e4fb 0be64dad d72c5766 e319fce7     .....M..fW,.....
   2ac5c:	053ef3d4 02330030 26dfd9d6 f8e5fa09     ..>.0.3....&....
   2ac6c:	24f4d31b eeff6e38 1bd6593e 2101faf5     ...$8n..>Y.....!
   2ac7c:	21f9fbf3 1ce1e6f0 e516f617 e0bc0a62     ...!........b...
   2ac8c:	f326e90f f41a4405 1507d3fd 0a34d6da     ..&..D........4.
   2ac9c:	10d11ded 461350eb 1f000716 00142511     .....P.F.....%..
   2acac:	0f2afe09 26070ad9 03fdeecc bd2f1f23     ..*....&....#./.
   2acbc:	ebfff9dd 0b122c01 e940fb09 d929e0dc     .....,....@...).
   2accc:	00ede51b f9d6dbf0 def8ea93 f1ccd818     ................
   2acdc:	f6fbfb13 dcf20c21 26eaebf4 3420102a     ....!......&*. 4
   2acec:	17affc1d d11710fd feff3bfb cddbe4fb     .........;......
   2acfc:	91e2e214 a6b8cede 09d3e6e9 ffddf3bf     ................
   2ad0c:	eee3eaf8 04e30704 efffefe8 fb15e7f6     ................
   2ad1c:	e8e5ecf5 e21313ef 12ededea 0deef9fd     ................
   2ad2c:	07fce701 cceff1b0 ee04c9f2 e8fb1ff6     ................
   2ad3c:	200ce232 f4f700fd 2c1201d4 fc3105fb     2.. .......,..1.
   2ad4c:	e6e80911 da10151e fd00eaf9 08eafbea     ................
   2ad5c:	00091d14 f8eb091e ef072028 0f04183b     ........( ..;...
   2ad6c:	d8150c23 fd0b1e3a 06140bf6 0efd1120     #...:....... ...
   2ad7c:	093e153e f0dd032d 31e3fba1 1d0d2726     >.>.-......1&'..
   2ad8c:	5a07f0f4 fd33fbf8 332c0902 f6fc21e8     ...Z..3...,3.!..
   2ad9c:	c0f9ba81 d934c2f3 2903d5f8 a3040cf8     ......4....)....
   2adac:	15f701f7 081d140f 0cb5dfe9 dc0c2b46     ............F+..
   2adbc:	0ceafc0e ed1e1b97 b3d70fde e0ba0e0c     ................
   2adcc:	a1afcee8 e4d3ef19 d7ef03c9 ffc6dffb     ................
   2addc:	e3f3c0f4 03efed02 1ad7e4e1 f40b01cc     ................
   2adec:	ed0ce806 e7b8050f faf30a06 d4cbe0db     ................
   2adfc:	decdddb4 3228fadf 0bfcc9fe 0403e8ed     ......(2........
   2ae0c:	060506dd ed0fff06 04fafafe ecefe6fe     ................
   2ae1c:	ecf3fcec 0fe0f6fe d7ed0b2f 120bfa0f     ......../.......
   2ae2c:	fefbf1f6 013ddc2e e622380d f5321813     ......=..8"...2.
   2ae3c:	0eda160e 04042626 e50c2144 24e90f1a     ....&&..D!.....$
   2ae4c:	2b1a0df2 18211517 3711f6cc f30cff10     ...+..!....7....
   2ae5c:	27142123 dc1e34ec e4eed4e3 e8fadf15     #!.'.4..........
   2ae6c:	1bf4fa1d 132301cb 0208ecfa e5f60c00     ......#.........
   2ae7c:	000af7d2 d1f5073b 10c4ef0f 0a0c23cc     ....;........#..
   2ae8c:	19e505f8 00ddf11e d6eef4e2 0ef2e203     ................
   2ae9c:	0af021fe 01f10507 040fee00 0902f4ea     .!..............
   2aeac:	19d9f5f2 d912d9f1 faf0d8d4 fe13fb01     ................
   2aebc:	fa030c1b e3ea1c02 ca08e4bf 11fdd9e0     ................
   2aecc:	2007bdfe f20c1016 e026fa02 2704fb0a     ... ......&....'
   2aedc:	0b3015ff 17e622c3 fe281ed4 f610320f     ..0.."....(..2..
   2aeec:	e4fff03c 11d82403 14d202ca 041ef31f     <....$..........
   2aefc:	f6181e14 d5171548 f1d223f7 01002224     ....H....#..$"..
   2af0c:	0926052e 0838192c 161bf5ec e51d1732     ..&.,.8.....2...
   2af1c:	3f1c0a00 fa1bf631 1d272e25 f8182733     ...?1...%.'.3'..
   2af2c:	eee6e315 1d361a2f 21fe002f 1b3102b7     ..../.6./..!..1.
   2af3c:	040f0df8 e1040e07 fb13e1f1 f1fe003e     ............>...
   2af4c:	02ccd120 261f2cf5 340ffaff 1efa06f9      ....,.&...4....
   2af5c:	e2182221 fa05e5dd 1aef42f1 f72d190a     !".......B....-.
   2af6c:	370b0543 00e50208 1fedd836 13e5f8ec     C..7....6.......
   2af7c:	c809d6cf 0606111d 420b1b13 1c0a1f21     ...........B!...
   2af8c:	0f112102 e0fcfdcc f4ef0be5 16ff171f     .!..............
   2af9c:	c622084e 34f11309 43421bdf 0b1bfece     N."....4..BC....
   2afac:	f2011208 1113f527 1923ee42 e5e23e14     ....'...B.#..>..
   2afbc:	f2fe12d6 d307a0ca e91d2ef6 c9c4b145     ............E...
   2afcc:	d3a24e29 ccfea4a6 f9502d02 ba123df5     )N.......-P..=..
   2afdc:	1f13f826 b63d4aa8 bc4a1204 2a2c6022     &....J=...J."`,*
   2afec:	09b19fa8 cdf1a564 20dd0fb0 fd323317     ....d...... .32.
   2affc:	b2e7b737 ed17ef30 b9f8d1fd 144dd041     7...0.......A.M.
   2b00c:	e7f0e4a8 a511bcb5 e12ef731 e01c193c     ........1...<...
   2b01c:	32c4d6e1 f61208d8 50cb9aab e0b14003     ...2.......P.@..
   2b02c:	f3e40ff5 ad151ec5 04eb31a8 d23a2fd4     .........1.../:.
   2b03c:	0eded1b7 10d00ad9 e1a7d535 300efe06     ........5......0
   2b04c:	44e9ade0 fd110742 0542e0e5 f23c222e     ...DB.....B.."<.
   2b05c:	244849d2 10f937b9 3511c33c 474045ae     .IH$.7..<..5.E@G
   2b06c:	bab54c3c df26e2c8 b1c551a3 5eb8a1b4     <L....&..Q.....^
   2b07c:	fd0114b8 fdf82ec4 b50faacb 18b7a49e     ................
   2b08c:	b41fe8b1 2417f3eb b7d2de22 4b1336ee     .......$"....6.K
   2b09c:	19e0dca2 f4262f2c e03ad70a 4e01a93d     ....,/&...:.=..N
   2b0ac:	fbaf29c7 422504fb 43a4b4fa bde51da8     .)....%B...C....
   2b0bc:	253111fe f6980651 22c6ab26 f5302aa3     ..1%Q...&..".*0.
   2b0cc:	fcc3e5e2 200929f6 b3cb3b02 ca9d0ab1     .....). .;......
   2b0dc:	39190839 6c5cae1b 4216fe18 bfd14e41     9..9..\l...BAN..
   2b0ec:	e9c314b5 bba4c42b 3c482018 ca08af1b     ....+.... H<....
   2b0fc:	2ca33df6 4030fde4 3f083831 0620f89f     .=.,..0@18.?.. .
   2b10c:	e5b633c7 c7e8e7eb 11fed146 d9af3143     .3......F...C1..
   2b11c:	dc311608 a71c2ea7 042a3bfe f4dc1853     ..1......;*.S...
   2b12c:	b5e5fbd3 bbe626ed 0e4402c4 4ddf02dd     .....&....D....M
   2b13c:	e707e0d3 41fa13d6 d9f9ad02 e3055700     .......A.....W..
   2b14c:	f990e61a e00136e5 3e111cdf d7e44c4a     .....6.....>JL..
   2b15c:	2ff90304 26dc32f6 05a116a1 d8e3bb4e     .../.2.&....N...
   2b16c:	ca519530 22c518ca c73e16e5 ed0bcdd4     0.Q...."..>.....
   2b17c:	bdad0002 36daeb51 a047b024 e43d2ab9     ....Q..6$.G..*=.
   2b18c:	b103d99d 36b231ec bf26ad41 a601ee24     .....1.6A.&.$...
   2b19c:	ed27cc01 c5cc29b5 acd9eef1 0329cebe     ..'..)........).
   2b1ac:	dbf8f0ac d7ccd728 3afd8c0e f3edb127     ....(......:'...
   2b1bc:	c6daf2d6 c0d2edd8 52373caa 16ef0bcd     .........<7R....
   2b1cc:	0b81a244 f0003321 1badaea3 e1a31398     D...!3..........
   2b1dc:	3fef37a8 abf6c6e8 99fae8a6 f82f38d0     .7.?.........8/.
   2b1ec:	13254ecc c643d5f1 f03fa854 1e3d3e3d     .N%...C.T.?.=>=.
   2b1fc:	b123d1ff a9244134 003ed8f0 e6d4b8cf     ..#.4A$...>.....
   2b20c:	e261f156 e640b005 20b71ec2 33221ccf     V.a...@.... .."3
   2b21c:	b1c70601 f333ec08 4d1ad7db f8a3b3cd     ......3....M....
   2b22c:	2c109eb9 fce629f8 b410c31d a4bcfe02     ...,.)..........
   2b23c:	312513de bbfb06d1 042b352f c1b59902     ..%1..../5+.....
   2b24c:	35fbc0b6 40e927a1 b30ad7d6 419fafdf     ...5.'.@.......A
   2b25c:	ead637e9 940c34dc c0322e4f 9f3a1903     .7...4..O.2...:.
   2b26c:	40d1f09d 1614bccd e8f4fb19 d2b43e61     ...@........a>..
   2b27c:	c4cd2f04 1326cffc b2a3c105 29d32c43     ./....&.....C,.)
   2b28c:	ccd42831 16524825 dd18c5e8 352ba33a     1(..%HR.....:.+5
   2b29c:	add62eb4 c4e25f13 30ff04d0 b8001244     ....._.....0D...
   2b2ac:	e7c507df 07f7df31 dd17eea8 d8cecbba     ....1...........
   2b2bc:	53c33616 f1464dda eb12d70e d743c13f     .6.S.MF.....?.C.
   2b2cc:	dea6bba9 d3a82349 21be0cbd fc3e3602     ....I#.....!.6>.
   2b2dc:	42d7d6c4 05123a6d 1c1ac3d8 210d6f00     ...Bm:.......o.!
   2b2ec:	f126eff2 f50d03fe e34be8da d71611fe     ..&.......K.....
   2b2fc:	d5230dcb 12f51b30 f8400608 f6d8f10e     ..#.0.....@.....
   2b30c:	42f0f449 073f01e3 f8c5e3d0 eb1ad9ca     I..B..?.........
   2b31c:	091119fa b21c141c ddca0efc 2724c3ea     ..............$'
   2b32c:	fe1cb8d9 cfe1e5f7 09daf718 b5d1dffe     ................
   2b33c:	e4dc27ea d9d2e0c0 f2f1ede4 d9eac78d     .'..............
   2b34c:	c415e50e f6e80cff 0c0b2044 eed1f7b8     ........D ......
   2b35c:	d5f517e0 e0f70604 b31fd3d2 bd15f9d0     ................
   2b36c:	3fc8a8b6 f5c21a0c 41df05de aca41603     ...?.......A....
   2b37c:	e9f4f7f1 d50cda26 f633fae8 ae06fcf0     ....&.....3.....
   2b38c:	a9d30d0f b8ffe61f 1dcbbfd1 ebda8df4     ................
   2b39c:	e8f0f315 26fe14fc fe09e504 e8d32700     .......&.....'..
   2b3ac:	2c07f4fe ca1cee2e 03371711 e909d9f5     ...,......7.....
   2b3bc:	0404e7bb d1fa042a 023933d2 2d2bf6ff     ....*....39...+-
   2b3cc:	f8faeac1 0ee1e1d1 cbc5c8d8 ffeeafab     ................
   2b3dc:	dddae8a6 eedccfea fb02e822 b70d0c3a     ........"...:...
   2b3ec:	0ebedd11 4a1608f2 1f0b03da e8ea19db     .......J........
   2b3fc:	09002b00 c8d4a0e5 e08d46ef 9fa895d2     .+.......F......
   2b40c:	482d2f9a 30abe1f4 f3f6e501 12f509fc     ./-H...0........
   2b41c:	0802c4ef f3e302cd ff3d12e9 e2629c1e     ..........=...b.
   2b42c:	ed120fc7 e60b07f2 05d8aaa0 81d1fb3c     ............<...
   2b43c:	21febced 041115f6 3d06ffd1 26ffe79f     ...!.......=...&
   2b44c:	1f14fb32 f20728f6 b21bf90b 91ca2037     2....(......7 ..
   2b45c:	edc0000d e61cb8c0 0ed32413 0813d821     .........$..!...
   2b46c:	c8c8eeea 3cce153e eb01c2dd bb03fc1d     ....>..<........
   2b47c:	0c24220c 2e0bf532 0301ce0c b7e3170e     ."$.2...........
   2b48c:	01f80316 c71704cf 11f510b0 f3e49eb3     ................
   2b49c:	e00bc6c3 eddaface 011c16d7 2730d7c1     ..............0'
   2b4ac:	3b0bd404 fed20923 0d141cf0 4441f625     ...;#.......%.AD
   2b4bc:	36090021 fccb1204 e8cedcfd de121e4c     !..6........L...
   2b4cc:	cd030113 ecfb0118 36ee2909 3dfbff3e     .........).6>..=
   2b4dc:	00e52e17 132a18fc 5e0dc319 dc0526f3     ......*....^.&..
   2b4ec:	3e7f3e3f 2d48b346 e2ccf4eb 1e220ee3     ?>.>F.H-......".
   2b4fc:	fb26e510 f622b502 e5d58d5a 1d3302e1     ..&...".Z.....3.
   2b50c:	0eebea1a 20011ccd 1327022f 4e2b2a13     ....... /.'..*+N
   2b51c:	1216f723 f1d5362d fffa26ef efdd3dfb     #...-6...&...=..
   2b52c:	dab7fd40 be36eb44 abcbd7fb 4a2cf522     @...D.6.....".,J
   2b53c:	e21b3907 defa450d f2f147fa 41054248     .9...E...G..HB.A
   2b54c:	0941041d e008e933 3308f7eb 1e133dff     ..A.3......3.=..
   2b55c:	fa2801e9 16feb8ce 270c1c15 cc2826de     ..(........'.&(.
   2b56c:	28461cc4 1f14a400 3e1312ff 0fee052a     ..F(.......>*...
   2b57c:	35304801 e7311338 fabb1012 edff350d     .H058.1......5..
   2b58c:	ecd2fced c3c24133 d02e1631 0dc01831     ....3A..1...1...
   2b59c:	26e2e90b e5ef286c 24f8eef7 0b0a16ff     ...&l(.....$....
   2b5ac:	67f9dce5 ef142e29 2b2d2619 054ef3f5     ...g)....&-+..N.
   2b5bc:	1ad914fe 2b4407f2 0056f8fc 0f52991c     ......D+..V...R.
   2b5cc:	051bf22a f257f2d4 0c25ca06 310411e9     *.....W...%....1
   2b5dc:	d731fe16 395bebf6 2342dd30 d7c213e9     ..1...[90.B#....
   2b5ec:	cd0e4608 09f1e401 b6da2923 a631f94a     .F......#)..J.1.
   2b5fc:	0ee8f316 f4c814f9 34ffc3dd e82c31be     ...........4.1,.
   2b60c:	0bceeeea 43f8b408 422ad702 a7c6f548     .......C..*BH...
   2b61c:	f1e624b5 2e9d982d ffee27e3 a80eef18     .$..-....'......
   2b62c:	232dd1bb 04c6b59c d923bcec d8e6c03c     ..-#......#.<...
   2b63c:	d3ac04d2 e4d7b71d b3ce1622 e83c18e0     ........".....<.
   2b64c:	46ea041e 061024e1 b3c50d2e badef2a2     ...F.$..........
   2b65c:	e7c21814 db0de0e5 bcd4342f cbc705d9     ......../4......
   2b66c:	da08f3c8 1814bf00 fafdb2a5 fbafe146     ............F...
   2b67c:	fecc3d36 be492aae 32bbab4e f3071c5a     6=...*I.N..2Z...
   2b68c:	35982d84 360bb04e 4cb346cf a118ad5c     .-.5N..6.F.L\...
   2b69c:	d1fd3f02 0e0ccba8 f7d9cf41 34b03aec     .?......A....:.4
   2b6ac:	e7a5dcc9 3f874c11 8ec429e5 d120a826     .....L.?.)..&. .
   2b6bc:	c1f5371a 14b8fc29 cd1afed3 abb7ddb0     .7..)...........
   2b6cc:	569f43c3 b1a2ecdf 21b2bec9 9dc70319     .C.V.......!....
   2b6dc:	3312414c 060de431 342b0019 a628f54b     LA.31.....+4K.(.
   2b6ec:	fb24e8eb f3091322 a5080548 9b100e1f     ..$."...H.......
   2b6fc:	c7e39e56 b2fc45ba 37c4c837 05b45841     V....E..7..7AX..
   2b70c:	46ac34de 0aeccbda eac4bae4 a2bcc634     .4.F........4...
   2b71c:	04d14bcb 1728c73c e8fcf0be cec5ba18     .K..<.(.........
   2b72c:	393bf5df 10ad13cb fd33c923 4807f6aa     ..;9....#.3....H
   2b73c:	aa3def2b d33cacb4 27b737a7 b235b3b1     +.=...<..7.'..5.
   2b74c:	3a18ba0d df074612 4a00c9da b8f1e1b0     ...:.F.....J....
   2b75c:	bceda5bd 0087092f dda5fc0a 0d4cf719     ..../.........L.
   2b76c:	19f94fb2 b99a0715 24301318 1b39c4d0     .O........0$..9.
   2b77c:	cc1e4dd6 f615ead7 93b940fa ececd1f1     .M.......@......
   2b78c:	0b8be2c1 024dff05 a8cd1046 81bbc10b     ......M.F.......
   2b79c:	16313ab0 c108d532 0ae4a79d d13fd61d     .:1.2.........?.
   2b7ac:	25d4fed7 e04ab7c9 b6d8aee9 bb1e0238     ...%..J.....8...
   2b7bc:	b8341af8 2d07d6e7 f5841d34 e52ff3ae     ..4....-4...../.
   2b7cc:	1eac29de a713be41 af369c10 cafeecd4     .)..A.....6.....
   2b7dc:	38e011ea 0a0aa0ad 0abbe840 49febfc8     ...8....@......I
   2b7ec:	432b39fb c9064b1a ee29e9bb 1de00343     .9+C.K....).C...
   2b7fc:	d0113b15 c5d6441a a7bd9e24 02063723     .;...D..$...#7..
   2b80c:	0bb4e302 45ffc5fb ae47af35 20f73ac7     .......E5.G..:. 
   2b81c:	f1c0edbc 26e0b950 f43814cc 19f8f9e6     ....P..&..8.....
   2b82c:	c014e2df 222fcac6 fae1c447 cabcfef8     ....../"G.......
   2b83c:	dab0a8f0 1f1330f2 38e8cc12 493038fd     .....0.....8.80I
   2b84c:	be13b01d e9bca2ca 0ac1a810 8a3f913d     ............=.?.
   2b85c:	c1ea40ce 9ff229ea 09952131 df13b64b     .@...)..1!..K...
   2b86c:	cfcdcdfa 35c43fd0 f5174ab8 c8b8ab3a     .....?.5.J..:...
   2b87c:	d1bff5cc d8e7bb08 cf9d43bd c4d548bb     .........C...H..
   2b88c:	f20fc0e5 b30a00a5 362b22fa 15094a1f     ........."+6.J..
   2b89c:	2d00f3c8 3cb03035 beabbc22 c810ae36     ...-50.<"...6...
   2b8ac:	2ae0f6b3 e333c91c e72045c3 a1de0cb0     ...*..3..E .....
   2b8bc:	a1deba0b ca03e902 a601aa2e e316f8db     ................
   2b8cc:	ccf90914 a2e3e92b a8bce1a9 a2d0e115     ....+...........
   2b8dc:	d4afc33e 263bcd03 bb2cb4e1 34d723f7     >.....;&..,..#.4
   2b8ec:	0a3607dd 2e640638 bbce07ed 425807ec     ..6.8.d.......XB
   2b8fc:	3f0552f7 06d2f50d edcb1602 f6dfa836     .R.?........6...
   2b90c:	280ff1e4 11bde225 c42703d9 f7a2ab0f     ...(%.....'.....
   2b91c:	10debbf6 ab038abf aaa5ac34 f6db29ac     ........4....)..
   2b92c:	2b23c040 edd90637 1da78f98 c5d4c9c3     @.#+7...........
   2b93c:	fdf00251 12d23ce5 08b61edf aac21cd2     Q....<..........
   2b94c:	8a34d7dc ec98f0e1 c4baa8ea 22ff20c0     ..4.......... ."
   2b95c:	f01d13fe eefdb305 b6ab0151 df173008     ........Q....0..
   2b96c:	bdbe32d8 2ae6b411 c8d9ffe7 3e29cb59     .2.....*....Y.)>
   2b97c:	f0c0192e 11c9acf7 010a190d d5244ee8     .............N$.
   2b98c:	e4d7a5bd feeea63e be2a0afa caed3bf7     ....>.....*..;..
   2b99c:	a22f250f 12122edc f9ba06e8 1145082b     .%/.........+.E.
   2b9ac:	aeadcbad e2acbe0a 20a7d2bd 27940227     ........... '..'
   2b9bc:	9ebf16dc 082fd621 acbce126 bdbfa8bb     ....!./.&.......
   2b9cc:	bf2038a0 f32116b8 ea0635e3 e610f8c8     .8 ...!..5......
   2b9dc:	2cdae5dd 1e0c08cf e922e5ef e3d80aef     ...,......".....
   2b9ec:	f12b2017 f2d81018 1ad113bf f33f08c8     . +...........?.
   2b9fc:	2d1cc1f8 08e9e7fb b7dae60d ecb4b4b8     ...-............
   2ba0c:	8a37d224 2fa300e1 fc031455 072d2caa     $.7..../U....,-.
   2ba1c:	afaebd00 3927fda5 d03f3cdf e5192522     ......'9.<?."%..
   2ba2c:	e43ba60e 30a04a2c 86b822d8 e6a197e3     ..;.,J.0."......
   2ba3c:	31a9ca93 214008ed 2b3adafd 370ff5f5     ...1..@!..:+...7
   2ba4c:	f3a2c7bd e9efc44d 3eccc2d8 48bfa907     ....M......>...H
   2ba5c:	c6edcb28 0603a2ca 0e47adeb 1739decd     (.........G...9.
   2ba6c:	a7b531ad 2b12d4d0 9910b6df f312f455     .1.....+....U...
   2ba7c:	04eeec5e 9f0f10d2 10d6d81b 9ddf3bf0     ^............;..
   2ba8c:	2fd921fc 8daac156 04ead83f ebb1e237     .!./V...?...7...
   2ba9c:	a7dc92bc ef2b9b31 cb11c725 23ea26f9     ....1.+.%....&.#
   2baac:	b432e4c4 b20bc820 0d21a6d4 56f9351b     ..2. .....!..5.V
   2babc:	bf44cbb0 3c3308e2 d638f3db ec1a899d     ..D...3<..8.....
   2bacc:	0d1cb810 24350913 01283f12 c829cc53     ......5$.?(.S.).
   2badc:	96f2cf23 b3d6aa30 f3a90aa8 bd09de9e     #...0...........
   2baec:	1a1004e8 b7d646b2 2f3302f9 10b5e447     .....F....3/G...
   2bafc:	97b9d3f5 c34d0226 00bfa53c d52422fd     ....&.M.<...."$.
   2bb0c:	10d4d3c4 0032e61f 1002def6 483b0edc     ......2.......;H
   2bb1c:	d8e6c9eb b9bc2801 16fa0e34 b33e14d6     .....(..4.....>.
   2bb2c:	140290fa acf327c3 bf03a9f5 d0c8bf8e     .....'..........
   2bb3c:	e41c39b1 bcd03cd2 d33cd8e2 f7bd33e0     .9...<....<..3..
   2bb4c:	d2104582 ffe13907 e012c4cc bf05e91d     .E...9..........
   2bb5c:	0fe741a5 dff9a127 cbe938f9 2435e502     .A..'....8....5$
   2bb6c:	2b09f010 e0fe9b06 cdd92a05 16f0939b     ...+.....*......
   2bb7c:	06dd250b bb27c22b 361ba24c 394fa82e     .%..+.'.L..6..O9
   2bb8c:	b63192ab 8d4218c4 af1a99f4 27a8f0fe     ..1...B........'
   2bb9c:	8ce93ea7 b1093e22 afd0d50f 963516fc     .>..">........5.
   2bbac:	96bbead5 ceb8ce0c cbd93518 ea28520d     .........5...R(.
   2bbbc:	cf07872c 9bef3e3e 81aecfea d7ad1104     ,...>>..........
   2bbcc:	419bb9a9 cb1ed4ca e0b8bba7 1bb7f3c8     ...A............
   2bbdc:	32d61b2d 1feb1af4 a7baa020 31f994ba     -..2.... ......1
   2bbec:	a5b5c0ce 25edb0d3 b6c79a0b 97a6a3a7     .......%........
   2bbfc:	c405e09c 1f369f18 da112a34 92f4a1fe     ......6.4*......
   2bc0c:	b2df01c3 ef29e627 21a1f0d2 08d84bb6     ....'.)....!.K..
   2bc1c:	fed9dcf1 a90f1b1d 3a194ba5 b2f5e91b     .........K.:....
   2bc2c:	b8b2bcc7 a7fe1303 36b0e13b c1e31406     ........;..6....
   2bc3c:	bf33b0e9 fee6f411 f2fcc9ee d8c89ce4     ..3.............
   2bc4c:	ef9ee2b6 d8b429ce 2525b2fe bef0b5e7     .....)....%%....
   2bc5c:	abb23d20 90312b2e 1202d19e d5243332      =...+1.....23$.
   2bc6c:	06f51ce4 2f973a51 00b0aff7 e30cc60b     ....Q:./........
   2bc7c:	fa2a9a4e e4fd1c29 04ed3a32 43fdae0c     N.*.)...2:.....C
   2bc8c:	1e10cd9e 3b273142 2b28ec3b be282ff5     ....B1';;.(+./(.
   2bc9c:	3331de96 3f1443b0 f2ac13d0 f2f72ff4     ..13.C.?...../..
   2bcac:	d89cd1ae 3298160f b94c4abf 5142c3df     .......2.JL...BQ
   2bcbc:	3020e6d2 99194997 3dce2dc3 13d82e11     .. 0.I...-.=....
   2bccc:	fbaa35fd 45122c0e c917f5ca e825ca10     .5...,.E......%.
   2bcdc:	c6f7d2e6 1d322c15 ef9631bb 0b9da30e     .....,2..1......
   2bcec:	2cc23ad0 9f11bf09 bbda994f fac3bd22     .:.,....O..."...
   2bcfc:	8c3b03a3 fee7bd49 1f3e1c3e 9233ceb5     ..;.I...>.>...3.
   2bd0c:	c69cc5e0 f9e8ddc8 c8dd36df 30374d4d     .........6..MM70
   2bd1c:	5b204f12 eca502b0 29afa6b4 98ff33a0     .O [.......).3..
   2bd2c:	0c10a842 9093fd14 0e203f83 4b27ace2     B........? ...'K
   2bd3c:	0c39fbe3 8dfe0437 24bed5d2 a712d7be     ..9.7......$....
   2bd4c:	25a44ac7 b8a84ccd 1c40fc0d fb1e0847     .J.%.L....@.G...
   2bd5c:	c6cd112e fd44dbd5 1f9e3ef6 4acbd5be     ......D..>.....J
   2bd6c:	0024e5a7 3d0049d6 eb0bfca7 d53234b4     ..$..I.=.....42.
   2bd7c:	b5b5a1d4 ffd79db1 b4decab2 9c004137     ............7A..
   2bd8c:	cab1ee3b eec6b2af c512e812 a436ceb8     ;.............6.
   2bd9c:	3026279d 9edbeedb fbe4cbe9 de44253a     .'&0........:%D.
   2bdac:	f9f6b101 b49f250f bbcb6016 32ba143b     .....%...`..;..2
   2bdbc:	fce74304 b5c445ff d146f91a bac42cf2     .C...E....F..,..
   2bdcc:	1fc6c5c5 c3feddac e1a9ec23 afe0d4d3     ........#.......
   2bddc:	bb18b3e7 112eaa16 fdc54be4 cae8b939     .........K..9...
   2bdec:	a21d4cb9 0dcf33ee 441a5322 b147b7fa     .L...3.."S.D..G.
   2bdfc:	48cd3a1b 9d3bfa27 cdebafd9 2acd29ff     .:.H'.;......).*
   2be0c:	e0b41907 a122ae1d eb0f430e a1405804     ......"..C...X@.
   2be1c:	b0e9a0c5 36d90adf 4d9fb7c0 fde4fc94     .......6...M....
   2be2c:	2edcecdb 95d2f5c6 fc39c5e1 173d480c     ..........9..H=.
   2be3c:	01b009e7 589cdc43 b3eb0441 d8262fb4     ....C..XA..../&.
   2be4c:	1adeb141 50fc4b04 1aa1293a 21032007     A....K.P:)... .!
   2be5c:	b0a83531 420e1ec5 c21bd4ef ec033315     15.....B.....3..
   2be6c:	a44ee12d ede031d5 a21d3b05 26b1e91d     -.N..1...;.....&
   2be7c:	2847d439 ef8dd3f2 4393f4b1 50e909bc     9.G(.......C...P
   2be8c:	4dec31a9 90bbde1e e93b3583 051a18ce     .1.M.....5;.....
   2be9c:	1f0efddd 9e43b028 22cb09a8 2c3e1ded     ....(.C...."..>,
   2beac:	bcfc452d abb32c27 e7cbac48 94a43410     -E..',..H....4..
   2bebc:	c28b22ac e00ebf11 2cacc345 d6d2919e     ."......E..,....
   2becc:	e4f50d87 364438c4 f2091533 d62ec322     .....8D63..."...
   2bedc:	228f2e1c 1231d60b a040bbed 12b716b9     ..."..1...@.....
   2beec:	3ce0f39b 3ee81ba5 16b4d29f 41b8a4e9     ...<...>.......A
   2befc:	3cabe234 102b34cd 14accdb4 1fd0c6dc     4..<.4+.........
   2bf0c:	aab9f4cb 11a33ae2 1eca8fed 02c2a2ec     .....:..........
   2bf1c:	b3b5d8e5 f11e30e8 d309d400 4953b5b9     .....0........SI
   2bf2c:	f243993e 3b175bb7 bbfc10df 1eb88e92     >.C..[.;........
   2bf3c:	3115b12c a7193bf5 f8d5e644 3cc6b32f     ,..1.;..D.../..<
   2bf4c:	2913cc3b a2d1a3a5 32bffa0e 318109e2     ;..).......2...1
   2bf5c:	2faed8c7 18bb0c1f f5b0c26d 1b091323     .../....m...#...
   2bf6c:	083c19f5 53ecb5d5 100101c5 04792c14     ..<....S.....,y.
   2bf7c:	d4fb15ce e037f92c 221dfd3e 0f3427ce     ....,.7.>..".'4.
   2bf8c:	c10dff0f 220bd2d0 f21810ba 1fecf9dc     ......."........
   2bf9c:	d9f910e7 fcc8fbe0 39d4dded 350fe430     ...........90..5
   2bfac:	e603d72e 1f19e709 feee35e9 0eccf50f     .........5......
   2bfbc:	05ee0ef4 ddc2fdc9 ce19c614 a50a290a     .............)..
   2bfcc:	d4bb2e21 ff08deef d21226fb f344110a     !........&....D.
   2bfdc:	fbfcd52b e1eb15bc 14d520e3 33cffdda     +........ .....3
   2bfec:	1f1d2cf1 e0043a0e e01c1bed 272a03fe     .,...:........*'
   2bffc:	f019163f 0aecf923 312af4c7 133e48f4     ?...#.....*1.H>.
   2c00c:	09d5e6fe 2bfef60f 030b3f25 15d12e1f     .......+%?......
   2c01c:	110d19ec 19123937 2d1ae615 faf21fae     ....79.....-....
   2c02c:	3142aa06 0ef82fc7 f43ef10f 070d0fd7     ..B1./....>.....
   2c03c:	eefa0e08 14690c2b 0901fdfe 44f2e5e7     ....+.i........D
   2c04c:	c4090838 e3d5eddc fe0c11f2 21dae7c1     8..............!
   2c05c:	fad32800 20fc0ef3 13f9d4cf ea0d02f5     .(..... ........
   2c06c:	db08bdee c630171a f0c3a3fa cee316ec     ......0.........
   2c07c:	1efe0ae1 ecd3dbe9 2bd112b2 c6d4dab8     ...........+....
   2c08c:	da03a1fc b908f7dc bdc92af4 0fd6e014     .........*......
   2c09c:	cfeff204 f41c072d e1970b00 20cee0b7     ....-.......... 
   2c0ac:	fef4ceca d205f581 2cdef4e4 cfaa33fa     ...........,.3..
   2c0bc:	f3f51cba 07cd19e5 ec20cae6 fcefd603     .......... .....
   2c0cc:	ee2d0e09 c81c2803 f2bce707 db06f6ec     ..-..(..........
   2c0dc:	e0d9cce0 16bdd6fa f1f6dbd9 3d073710     .............7.=
   2c0ec:	2015cedd 1513f811 1b3ebceb 049b395e     ... ......>.^9..
   2c0fc:	0d0bfd0b 18ef1f4c faffd823 e53bf20a     ....L...#.....;.
   2c10c:	f20bbdef c5d307d3 3911eb4d d9d70cf2     ........M..9....
   2c11c:	2942190f 9a271df0 ee031e25 3844a700     ..B)..'.%.....D8
   2c12c:	1a06c4ba 4d36011c cd4a0915 d3eef920     ......6M..J. ...
   2c13c:	c28ed963 b821f6f3 f7f3dbd3 1bf12d12     c.....!......-..
   2c14c:	261df5aa 1902270e f3f89d1d a9affb06     ...&.'..........
   2c15c:	a2e2400e 0fa2fff5 aaeae917 0ec6c2e8     .@..............
   2c16c:	b1efb5e6 02e3cdad daf7e1dd f9e0f496     ................
   2c17c:	e4ade302 fbad1d1f f74f02e2 eb04dcd3     ..........O.....
   2c18c:	34f7abf2 3801e807 b6e20b64 31152715     ...4...8d....'.1
   2c19c:	1258ed13 05f5f9f3 db4a47df 0ac8cbf5     ..X......GJ.....
   2c1ac:	00d60b2b e700f02c c9c928de 3e20e303     +...,....(.... >
   2c1bc:	173a20f6 eba1123b 13b72bff 3bef2403     . :.;....+...$.;
   2c1cc:	0816f72d 2949e1e4 102caf13 012b0027     -.....I)..,.'.+.
   2c1dc:	0c2ef71f 09d4fbc6 ef103309 aa251d27     .........3..'.%.
   2c1ec:	0ef6f40f 1e63c93f 2e15c5dc 4526f297     ....?.c.......&E
   2c1fc:	e2182410 e7b407e1 bbc30168 e107d408     .$......h.......
   2c20c:	17db0701 10ec4006 1a13d1c1 070beb2a     .....@......*...
   2c21c:	c901cd20 d519fb4b ead81f22 f5e624f1      ...K..."....$..
   2c22c:	e912ded4 13e4e1e9 dfd4e6ff f0210dc1     ..............!.
   2c23c:	fbfdf428 38ee1db1 f7fee026 05eb190d     (......8&.......
   2c24c:	ec07e4f6 2236ade1 0e0bdf2e 0ef82f47     ......6"....G/..
   2c25c:	1bcbf233 300a16ff 3e30ef0a 4fda5fa1     3......0..0>._.O
   2c26c:	fe732ddd 01d54f2c ec240c34 07e30b10     .-s.,O..4.$.....
   2c27c:	0bde31e9 eef4f32e eed2010c f6021de5     .1..............
   2c28c:	f71505ff 0f030206 01f0fcd8 e9081009     ................
   2c29c:	f6eb04ef e00811f4 e80a02c2 f0ec0c28     ............(...
   2c2ac:	22e7060f 013601ed 2510f4ff 34e2d923     ..."..6....%#..4
   2c2bc:	f7fac4e8 39fc0aff 001612ff f619fa04     .......9........
   2c2cc:	f508dbf0 f02e03e0 04d5100c f40af119     ................
   2c2dc:	f0e1ec07 2d0151f7 d0f8e62b cd2616fe     .....Q.-+.....&.
   2c2ec:	edfcfd0f 04defcff fc022612 f7080626     .........&..&...
   2c2fc:	260cecda f9f02be9 05e9e22e 1e160df3     ...&.+..........
   2c30c:	03f6fdfa 2f14ed15 1b0022fb f4edfb00     ......./."......
   2c31c:	d4011110 e8f5fc08 f00d09d3 ce00f70d     ................
   2c32c:	04e7f6fd 000ded09 fb05da12 ffd60fe1     ................
   2c33c:	fb0f19fc 050405e9 f10edc09 fbdd01ff     ................
   2c34c:	e4d9e8f5 f11cee2f 0318f6f9 1105d626     ..../.......&...
   2c35c:	feec0301 ee172a14 04e4f1dd ef20f8ec     .....*........ .
   2c36c:	130712e4 020103e3 b5f1fde0 01d3da15     ................
   2c37c:	27fc1710 fc1fdf28 f500ccf9 1cd603d2     ...'(...........
   2c38c:	f7e5f1f8 04edf40c fb18e4fa 332cdcb8     ..............,3
   2c39c:	09bd483b e8fef70f 23ffe3e8 0f31f2d4     ;H.........#..1.
   2c3ac:	0524feed e82a3cf4 e0ef0ef8 0bd3dc09     ..$..<*.........
   2c3bc:	bffe3edc fb01d718 07f6c6e4 f1e911ed     .>..............
   2c3cc:	3302271a 04ff04e4 ec011912 e924333f     .'.3........?3$.
   2c3dc:	0af50deb f50bd9e6 e8f9efee 0d0c0df1     ................
   2c3ec:	f71cf30c ca09fdf8 dc190300 eafae6fb     ................
   2c3fc:	f6eafb07 feeef0f5 1c1c1aec 0c171707     ................
   2c40c:	18f6fc09 10d42381 1a0db6cd 080ef5f8     .....#..........
   2c41c:	f412ec01 aef40714 f7d313f7 13cf0605     ................
   2c42c:	0417f4ef e3e7e1e1 edddfd2e 0fcfdae0     ................
   2c43c:	04f0f4e8 18d6eed7 d7051be5 fdf50ad1     ................
   2c44c:	f60af6eb be02fcff 14d6fef8 d8fc0bef     ................
   2c45c:	b6fbdbfd 15e11311 0f08e2cc dee7f4f0     ................
   2c46c:	03ddfbef ebf4d5c7 f7fee10b d6d20111     ................
   2c47c:	edf014e8 f60b19fc ff01f5cb f82435f4     .............5$.
   2c48c:	0112f31f 2eeef6e7 3c012928 f91c06f9     ........().<....
   2c49c:	1b23021a 0ee01303 dd00fddb 121fd4ef     ..#.............
   2c4ac:	fad4ec1c 020bf9fb f70dfd09 09090e07     ................
   2c4bc:	e21bf744 0ffdecf1 0c2f10f3 ffdf3e13     D........./..>..
   2c4cc:	272af730 dff5f213 ffdd24fb 34f92afc     0.*'.....$...*.4
   2c4dc:	1307bf01 09e71023 fe4126fd ddf60225     ....#....&A.%...
   2c4ec:	07eee5f3 f409fa09 0923e1f0 a8fdf5d3     ..........#.....
   2c4fc:	210d073f fcf5e8d4 2b20e218 ef0005f5     ?..!...... +....
   2c50c:	f22ff803 0e1b1df2 24fc29d2 e90afd3e     ../......).$>...
   2c51c:	e9ff20fd 0ee0ffee f023f73b e7edf820     . ......;.#. ...
   2c52c:	0f2de9e8 ffbc2a1a f0d6fbfe f113fa10     ..-..*..........
   2c53c:	e3e4ede6 d607180f 0af911f9 0414020a     ................
   2c54c:	04f9fed3 fb130f09 040efbfc 09dd0dda     ................
   2c55c:	3ee6ed04 0b3bfecd fc200df1 efefd813     ...>..;... .....
   2c56c:	fd10eaec 222409cd d6ebd308 0ef4fef8     ......$"........
   2c57c:	0ff0001f f9102002 03040211 f8e5d3eb     ..... ..........
   2c58c:	110d16c6 fdb63510 0a2d0ffc e3d3e81d     .....5....-.....
   2c59c:	defde3f3 33e6e811 d644e0d7 ede0e303     .......3..D.....
   2c5ac:	c84a2fe3 4a39c7a1 f142c1ea 10e0b5b0     ./J...9J..B.....
   2c5bc:	ef4a3c08 421c233b bf3746b2 b7e6cba9     .<J.;#.B.F7.....
   2c5cc:	0b8c32ec 011fcaff dddac1cb f7f9dec4     .2..............
   2c5dc:	c731aaf3 3b499b08 3a0bbbde b99561b8     ..1...I;...:.a..
   2c5ec:	1f9c0da7 f9dbeeae e7331eca b7ea0f03     ..........3.....
   2c5fc:	452536df 4764f9b4 f8f805c5 fa0bc2a7     .6%E..dG........
   2c60c:	e0aedea8 5403ca0b d030d117 cc15cd40     .......T..0.@...
   2c61c:	829edea4 2b399dff 0787ceaf f1cdfa8e     ......9+........
   2c62c:	ff3beebe 45381ffe 0ccdc509 c7df33d2     ..;...8E.....3..
   2c63c:	1cc1e131 f331d1f0 88cb08fe 35e6975d     1.....1.....]..5
   2c64c:	d6b3f5d8 dcec3343 dcbbb1a6 b095e0a1     ....C3..........
   2c65c:	c4bbf8ee 00541b10 d903299c 8407de8d     ......T..)......
   2c66c:	e2c7c29a 1538e449 1fbcc13c f15fa7b3     ....I.8.<....._.
   2c67c:	611688f3 e73bdd4a 83c02e27 99b4a685     ...aJ.;.'.......
   2c68c:	a18ec716 d4ca60e0 45e89028 a1484701     .....`..(..E.GH.
   2c69c:	119c0eee 1d31e1dc 27014ae1 a2b6dac7     ......1..J.'....
   2c6ac:	2086e335 0ff72c8d 31173f86 d3a504e0     5.. .,...?.1....
   2c6bc:	3e3ac8c1 30243316 3a21e23e fab10728     ..:>.3$0>.!:(...
   2c6cc:	10c29833 adfa87da 2c3203ce 0698a0d0     3.........2,....
   2c6dc:	ebf5b942 daf0f112 03eeb813 bf353f00     B............?5.
   2c6ec:	46a8efdb c5c509a3 b9b91440 3a0ba0e1     ...F....@......:
   2c6fc:	c693b6e5 fad8e7fa 44599cd4 e300c38c     ..........YD....
   2c70c:	33839bfc a9b6e965 48a957d7 0a1005b2     ...3e....W.H....
   2c71c:	b1d0d144 48f8f029 2952ab23 595fb549     D...)..H#.R)I._Y
   2c72c:	38bd07c8 0095111d dbe488d1 4d32c09e     ...8..........2M
   2c73c:	bbba0cc5 98ab9390 458cadd7 1002ccae     ...........E....
   2c74c:	a1b2ab10 46ab3adc 1936fcb5 fa231fb9     .....:.F..6...#.
   2c75c:	810d363f f1464712 9520a4d6 9a91834a     ?6...GF... .J...
   2c76c:	306190c0 9cad60f1 1c0f1642 2c4b140e     ..a0.`..B.....K,
   2c77c:	bf879a10 30f0c32e 40b084a9 bd569e09     .......0...@..V.
   2c78c:	999234d8 de53a1d6 8f25d3f4 98424ae2     .4....S...%..JB.
   2c79c:	e9aec81c 101af6be 11151f28 1c9829ca     ........(....)..
   2c7ac:	81e51b9a bb09bea9 9dccea33 bed807e9     ........3.......
   2c7bc:	4caecff6 a3d43a98 a7c42f34 af85eb9e     ...L.:..4/......
   2c7cc:	3f84d715 024f289c ba995010 e0c2dc0b     ...?.(O..P......
   2c7dc:	d61a4fa1 a3a0af51 a991fde8 0948aeed     .O..Q.........H.
   2c7ec:	2a23e53f 4b0f3dd0 fd1fbd20 0ef8a4cf     ?.#*.=.K .......
   2c7fc:	f189a1f3 249390d0 f2c49f2a d834c8d8     .......$*.....4.
   2c80c:	ada3ab25 46fbb29f 2a22cb2d f230a34b     %......F-."*K.0.
   2c81c:	9d461387 143af4b8 b98b8a18 c53ed423     ..F...:.....#.>.
   2c82c:	258ae6ea 02018999 8fcc9f33 9c0ec4de     ...%....3.......
   2c83c:	94f9e4e6 18c147eb a1a63bec dcbd4647     .....G...;..GF..
   2c84c:	2a1ce789 03e214b4 b611a8ca f9f12d3a     ...*........:-..
   2c85c:	4d94841c c517892a 3238cb8e 503fd652     ...M*.....82R.?P
   2c86c:	3a46c6d3 cbf5c0f6 32478307 b2ef0bc3     ..F:......G2....
   2c87c:	3894c2d3 fb2213a3 39924ff6 f4da98da     ...8.."..O.9....
   2c88c:	f0e2c8ee c55103a8 a4c13db0 a2e619e4     ......Q..=......
   2c89c:	3984b806 3de021cf c83b65bb 92ea31c3     ...9.!.=.e;..1..
   2c8ac:	a28cc138 189121f2 e7c3a2b2 1ca5e749     8....!......I...
   2c8bc:	cb408229 f23b0a0c f8e5dde1 b5e9450d     ).@...;......E..
   2c8cc:	f7d70a02 d6f00100 1808e5fb cdc1d735     ............5...
   2c8dc:	0205e4de b8fa00c5 f7f210e9 1ae1e508     ................
   2c8ec:	0bdd03f6 cfe40fd3 e10bfbf2 e9e681e7     ................
   2c8fc:	16fc8706 e1fdefdb 3a061706 fef70719     ...........:....
   2c90c:	f60e0abc fb064cd7 f9ccff2f dde5e3c6     .....L../.......
   2c91c:	161aed1e 0712020b 0f25e4d3 f32003f4     ..........%... .
   2c92c:	ddfe13fd f3db1208 f40f19cc 19ddf212     ................
   2c93c:	0b2b1d0f 11393005 06f71600 0f0aff02     ..+..09.........
   2c94c:	f6d6e4f7 feef1e2b ffee1628 2feef004     ....+...(....../
   2c95c:	35eff81a fafa0bfb 10aa1006 112b0c11     ...5..........+.
   2c96c:	f03312fa e6ea2246 1817f8f4 0efd41e6     ..3.F".......A..
   2c97c:	e8fb132d 0602d624 18ee1af5 3c47dedf     -...$.........G<
   2c98c:	ede729c6 e1d031f9 f414ef12 f7ef2ff2     .)...1......./..
   2c99c:	f61a38f7 f516ed40 0e0d16f5 f70318d2     .8..@...........
   2c9ac:	9b3c09cd f4dbc6cc 1ed63655 e8cd1623     ..<.....U6..#...
   2c9bc:	ecb8172d 1206cbdf de11b0f9 fce40ef6     -...............
   2c9cc:	2908cc0f ef0c220e 043c0bfd fe052ebe     ...)."....<.....
   2c9dc:	fbd114fa cedd0df4 0d07eeef 03193213     .............2..
   2c9ec:	2ffc07c5 fae8da0d f7ed1418 083315f6     .../..........3.
   2c9fc:	2e14da11 1dd3f5e7 db43eb1a 0829ecf2     ..........C...).
   2ca0c:	acbc1fcb 22ff1216 07e6c4ef dff109f5     ......."........
   2ca1c:	e315f02b e91cfaee 0de6e412 0210edfe     +...............
   2ca2c:	0823f606 2e1821f0 05261416 0fc7d12e     ..#..!....&.....
   2ca3c:	fa262bd5 fff5f4ef f0e50b58 ea09f83b     .+&.....X...;...
   2ca4c:	fbde23ed 39301dc0 19cce4ea f7c71e48     .#....09....H...
   2ca5c:	f500d10d 1df3f6fe 06ce1dee 064714d2     ..............G.
   2ca6c:	d6241e26 f1da2aaf 262617d6 f6d6e7d2     &.$..*....&&....
   2ca7c:	0ada3135 05f2e24a e5070639 470b1ae0     51..J...9......G
   2ca8c:	d9f5e5d0 14e7f322 1ff9effa f3190816     ...."...........
   2ca9c:	1010f434 00ec11ff fedbe503 f6c52535     4...........5%..
   2caac:	211cf40d 10f714d6 b9d8c2dd d02df80a     ...!..........-.
   2cabc:	fd22fffa fe24fe06 0413f8e0 00eb3d1e     .."...$......=..
   2cacc:	f8c33522 25dd35fd 2c2bc233 1e2a0604     "5...5.%3.+,..*.
   2cadc:	0f212dd9 0802d8cc f1ccf0e6 38fa0211     .-!............8
   2caec:	d5f7e118 f903e419 f9eef2db f70803fa     ................
   2cafc:	07d516d1 18ffddfe f702dce5 11d74009     .............@..
   2cb0c:	1fc6fef2 ff02f3f2 e1d79dfb 2412eee4     ...............$
   2cb1c:	20f5ba16 00d80829 03e1e8f2 fbfaeb06     ... )...........
   2cb2c:	07c3f1ed 063ffdde f930f23e d0ca11e6     ......?.>.0.....
   2cb3c:	15120800 06ec1200 0715090d f8efe92c     ............,...
   2cb4c:	edf40a26 3df30f0b fdfb46ed f718fd36     &......=.F..6...
   2cb5c:	16f42113 303404d2 200d0750 e5dd2ddb     .!....40P.. .-..
   2cb6c:	17e8cef1 14d6ce49 2e241ef7 1d0dfcd5     ....I.....$.....
   2cb7c:	09dc20e9 de0effe7 e02e15ea 130afa12     . ..............
   2cb8c:	b0ff0aef fdef3ff8 e1e81d35 11980505     .....?..5.......
   2cb9c:	f102ff0f bc1b00e9 12043926 1cccfdce     ........&9......
   2cbac:	fb33fff5 babc2b2b 351adc07 f903b005     ..3.++.....5....
   2cbbc:	f5160af5 0b10b1f2 09310cd7 ecd0d7cb     ..........1.....
   2cbcc:	0e0b1dae 0dc4bbfa 30e6ebc7 150145f3     ...........0.E..
   2cbdc:	15fb2cf0 1332da35 0b45ffe7 3b981e13     .,..5.2...E....;
   2cbec:	0b99a700 d411a409 ea074c4c e38f4da6     ........LL...M..
   2cbfc:	46d83429 f2e722c9 ffe7c5cb 25dbe52e     )4.F.".........%
   2cc0c:	3ebf0a22 0d0fd0f9 1a460e3f 93ebee56     "..>....?.F.V...
   2cc1c:	fbbcc6a3 0c1db698 448b50a5 0130f7fd     .........P.D..0.
   2cc2c:	3e25c2b7 5b849b2d 5017f9df 32ec9b9f     ..%>-..[...P...2
   2cc3c:	0fb5a434 8c0834f7 483413b6 d50d1abd     4....4....4H....
   2cc4c:	1c0d4406 d13ca401 99043cfe 24519408     .D....<..<....Q$
   2cc5c:	b5eab0d7 ff07b53b 1ea12c11 ed28df03     ....;....,....(.
   2cc6c:	cead21b8 2d4108bb 96443612 c5becde9     .!....A-.6D.....
   2cc7c:	340737ba 25afb248 b1b21dcb 33afa0ea     .7.4H..%.......3
   2cc8c:	86f3ec06 d9abcf8f be0d259c b1e1b337     .........%..7...
   2cc9c:	c1c8cfde 9352e433 9fa8ef52 07ceaeb8     ....3.R.R.......
   2ccac:	c9a80b2c 4c531f02 408f52cb 3ff1060a     ,.....SL.R.@...?
   2ccbc:	37a719b6 cf02cdff e6acbbc2 44b02af7     ...7.........*.D
   2cccc:	48ecbe33 c3d744b7 b5cf2909 fa3c4e25     3..H.D...)..%N<.
   2ccdc:	c2f31aeb c20d3104 a636042a 2ab2c14f     .....1..*.6.O..*
   2ccec:	e43b330a f395d31b a196c227 9c2e4911     .3;.....'....I..
   2ccfc:	3914afe0 03b1bbd6 1112ffc4 aadc353e     ...9........>5..
   2cd0c:	d10a18c1 9ea238c5 a7ed00cc a5d1d251     .....8......Q...
   2cd1c:	37c5c3cd 28eebdeb c5a6f632 c7d34e03     ...7...(2....N..
   2cd2c:	4e50b4db 20c5f431 2b2c3e5f 3ff0ef38     ..PN1.. _>,+8..?
   2cd3c:	97abd507 a6318cd0 2927bdfe 9fe4b12c     ......1...'),...
   2cd4c:	503648b2 b8c29a34 920ef0fe 34610181     .H6P4.........a4
   2cd5c:	34f623bf d0338f99 2d25d993 ac948cdd     .#.4..3...%-....
   2cd6c:	c61232e5 1cb92d02 33d3e020 e19bb8d6     .2...-.. ..3....
   2cd7c:	dc2300f6 c03bdcca e0e24ffa 01f6f12a     ..#...;..O..*...
   2cd8c:	1bcef4ec 390fa4c1 c70910ca 53449e24     .......9....$.DS
   2cd9c:	14b81f21 43f43cc5 9d5d15db 922fed8c     !....<.C..].../.
   2cdac:	434e8a05 9edc4f39 51edcdfa ecdf1254     ..NC9O.....QT...
   2cdbc:	2ea51c8b 49d29f24 0df7e61b b4c836bf     ....$..I.....6..
   2cdcc:	3b25fc0e a34f0628 c9ee1e30 aaaf4139     ..%;(.O.0...9A..
   2cddc:	49a1b505 c7991c41 8dfa2241 191e280c     ...IA...A"...(..
   2cdec:	cb4504c6 d558db41 ff9c9aa0 ece638f8     ..E.A.X......8..
   2cdfc:	1f1f2aea d1522943 9e0f3ba8 ac4897d5     .*..C)R..;....H.
   2ce0c:	50f032ed 172d39e0 4cf8ae19 cc465326     .2.P.9-....L&SF.
   2ce1c:	c8f2d02e aa37c6ff 1c52fa20 db350b1e     ......7. .R...5.
   2ce2c:	3df1333a 18dbfa1b 2c0591e6 95a024e8     :3.=.......,.$..
   2ce3c:	404cc696 4517e116 62fd991a 0c0592cf     ..L@...E...b....
   2ce4c:	3d9ae6c4 08da5900 8fa14748 8e15f5e0     ...=.Y..HG......
   2ce5c:	ce0c0595 0d05b505 cacba0a1 813190c0     ..............1.
   2ce6c:	9fd02c12 a4cf36df 3cd7999a 02d34693     .,...6.....<.F..
   2ce7c:	0aacf654 d12714a6 bdd02d23 fe62ca2e     T.....'.#-....b.
   2ce8c:	51dc3fc6 12541e97 080403a2 38e9e1a1     .?.Q..T........8
   2ce9c:	0bdbfde3 3bb2b4b4 09f03ca5 ba36ba12     .......;.<....6.
   2ceac:	fd4692f6 92be07c5 d548f7f4 3853fb63     ..F.......H.c.S8
   2cebc:	9607de55 36adbf05 c809445b faa2324c     U......6[D..L2..
   2cecc:	fee297c9 d012f5e3 2e1f2eff 00d93ad2     .............:..
   2cedc:	443dd629 9705cbe2 101b43ea ebbe45eb     ).=D.....C...E..
   2ceec:	b655a619 4acab591 ab143608 df41ff09     ..U....J.6....A.
   2cefc:	a78fc3a2 2b0816cf ea1c1604 b3e1fcfc     .......+........
   2cf0c:	efea46f2 f80338f3 0b4be9eb 031ee00e     .F...8....K.....
   2cf1c:	fb39cce6 081f20e5 f7fb0d02 c1d3c7bd     ..9.. ..........
   2cf2c:	f8d3e70b eee8e2d2 091104d8 ff02bd22     ............"...
   2cf3c:	ebf3d6d8 34f5f4b9 3132aff2 ba052c15     .......4..21.,..
   2cf4c:	0be255c8 020c09fc 07f817b2 f0ec3ddd     .U...........=..
   2cf5c:	cce0b81a eed8e82b 38f3b517 def61c34     ....+......84...
   2cf6c:	00dcd8f5 fbb9d7f2 fc13cdc0 13080a22     ............"...
   2cf7c:	cc03fc07 25e7fae6 27971e3d 29f704db     .......%=..'...)
   2cf8c:	bb12e0fb d1de03d3 b250bf0c 1510e3f9     ..........P.....
   2cf9c:	ea1eeb12 1dee0dfb c5e909e4 021d3dfd     .............=..
   2cfac:	1bfa1eed fa0ef3fe 2a1920c9 f9fa1e18     ......... .*....
   2cfbc:	daf03433 04e50b20 f82ba8f5 270af9cb     34.. .....+....'
   2cfcc:	13d9dc08 f9c70bf9 00f8330e 05fee418     .........3......
   2cfdc:	fb1f0be1 d5feb6f3 002dc143 e112cde0     ........C.-.....
   2cfec:	feeb0424 2dccb9c7 f92705dc d7030d1d     $......-..'.....
   2cffc:	e2e7e438 23a40523 1508130d 0f15f303     8...#..#........
   2d00c:	251bb0fb b8200b2a 1cc547f0 9ff4f7fb     ...%*. ..G......
   2d01c:	052ce5f5 3707341e 123222f2 29a10e25     ..,..4.7."2.%..)
   2d02c:	1dd02e14 27e7e529 2e1d0a04 07db0105     ....)..'........
   2d03c:	0b03adea 01fef8f7 de10cbea d838fc0d     ..............8.
   2d04c:	2c18d3f9 1cbdff51 fffd1df5 e9f8f298     ...,Q...........
   2d05c:	f6cfe1e0 0d24f1f3 fbe01114 e10d391b     ......$......9..
   2d06c:	e3ed0006 fef40af7 13fe2220 0501010f     ........ "......
   2d07c:	f701e8f3 fa3e2c18 fee2ea15 e5ccfefb     .....,>.........
   2d08c:	d9e0ecdc 17f8ce04 0bc3daaa 02f8e8fb     ................
   2d09c:	09090a0e 2e0ccd28 14e1e1e3 da071b0a     ....(...........
   2d0ac:	e40cfe2d c31af0a9 faf9041a 13fcdf09     -...............
   2d0bc:	d02814d6 e8bee34b 1ab0192f 2be147f7     ..(.K.../....G.+
   2d0cc:	fefa1f04 3cfa0fee 0eae2bfc ee1ef9f4     .......<.+......
   2d0dc:	18e8ed29 e8d9e41f f310fc24 fe2ccd20     ).......$... .,.
   2d0ec:	234309bf 171112d1 ca0c2607 5d5102e0     ..C#.....&....Q]
   2d0fc:	631c35b9 0116cc00 cb0d274a f2fd120b     .5.c....J'......
   2d10c:	f406c8f4 0801efd1 27e7d024 d833fb2a     ........$..'*.3.
   2d11c:	fdf2eb12 1d03fb01 0e0320ae c3eed0a8     ......... ......
   2d12c:	26052b14 040d380b e61efffc e1100cfc     .+.&.8..........
   2d13c:	0410fc00 0fd9e0eb a4111114 003903da     ..............9.
   2d14c:	b0c701c4 c8bbfd18 14daf7f7 c9dbb9f3     ................
   2d15c:	ea19fde6 d624ef07 fc81eefa e10be8fd     ......$.........
   2d16c:	11091b23 25d71902 15f31fdf 2c03af20     #......%.... ..,
   2d17c:	13ee08cd 08e90c28 1c0cf20b 1c3408f6     ....(.........4.
   2d18c:	d3d814ff 25fe06f2 fdfbe20b e221050b     .......%......!.
   2d19c:	d618440b 00080511 ce0baf1b ede61ce3     .D..............
   2d1ac:	fcfce5f6 06100105 24ea2a1d 210e13fd     .........*.$...!
   2d1bc:	272df634 19fb0600 3ef90f2f fa3014fc     4.-'..../..>..0.
   2d1cc:	2b100c1f 201ceb0b da6b1400 f8fc0e0a     ...+... ..k.....
   2d1dc:	0022e010 1853f5f1 1cf61415 12e73a32     .."...S.....2:..
   2d1ec:	df12130c 0acaef11 16ec0d27 effc190a     ........'.......
   2d1fc:	3100f004 f7e0cdfe f60b0719 1dcfdd00     ...1............
   2d20c:	ce131ebb 05fb1316 daf8ed25 14060fec     ........%.......
   2d21c:	30ad44c2 e644d802 09110216 d6ee2fc1     .D.0..D....../..
   2d22c:	f919ea00 dc03f4f2 fefe26ff 19d6ef1c     .........&......
   2d23c:	2fe2210b fe0ef2f8 de0cffe8 2e0d1c42     .!./........B...
   2d24c:	27e61ef7 ebd02af6 e4fcdf25 17d20be5     ...'.*..%.......
   2d25c:	27fc0204 fffd0ec4 23011ef2 f4ef1fe0     ...'.......#....
   2d26c:	05163afd ede82b34 09f6dd00 2d42cec9     .:..4+........B-
   2d27c:	1b151e0f 17f11209 e202f6e7 dee8e0f7     ................
   2d28c:	d3060d95 0c0be900 cef6e4e3 0ae839ea     .............9..
   2d29c:	07d80710 14041fd2 0118eefe acfeff0d     ................
   2d2ac:	0fc90606 2cc008e4 03e2fade 04f1fced     .......,........
   2d2bc:	f9d7f9fb e30eecf2 d5fbf4de e1edcff1     ................
   2d2cc:	c5c9f6df caf70ccc 1ee0d6d4 fdee14d1     ................
   2d2dc:	f0ffffd0 f2c3daf4 dcd2d3e7 223cf2f2     ..............<"
   2d2ec:	d5bcf30c d3fc28d1 f5fae40e fdfe08df     .....(..........
   2d2fc:	de0404e9 ffdc0918 03c0301a e912fcef     .........0......
   2d30c:	db0d04c9 1b162337 10f53217 fefa4014     ....7#...2...@..
   2d31c:	c2000e2f 15161113 e4f50b29 0aecf8d9     /.......).......
   2d32c:	1ffcfffe 07c60ec2 172d1811 09041d02     ..........-.....
   2d33c:	00c0e800 2409fefd 1f39e00d 2e3b0235     .......$..9.5.;.
   2d34c:	0b0f0bea 30bebaf3 f2f61ce3 09dfc50a     .......0........
   2d35c:	d70602ef 16c4bc81 bdfbc0d3 941aee2a     ............*...
   2d36c:	a5df12af 08f5fcf0 c8df1e01 fbd92d0b     .............-..
   2d37c:	0a4e0bfd d13b011c 5be3fb12 01001ab8     ..N...;....[....
   2d38c:	03fe063f 15330404 d03bf800 e4de16ec     ?.....3...;.....
   2d39c:	f9040cf1 0920f492 0cea493c 04fad91c     ...... .<I......
   2d3ac:	19c923dc 0611f602 cde117fc cc0cff23     .#..........#...
   2d3bc:	f2d0c900 140b09ea 00ef0df4 172f16fd     ............../.
   2d3cc:	0ff2ffff 051d2f16 f91505db 10090108     ...../..........
   2d3dc:	ff052305 22d10526 e9e6fbf5 1126ede9     .#..&.."......&.
   2d3ec:	b4fcf21e c7c408d4 07e5e2fb fbef09aa     ................
   2d3fc:	eb10fe1d 3bf5e804 02b90e1a eef203d0     .......;........
   2d40c:	392b00d9 d413c003 2dfcfed9 24c60820     ..+9.......- ..$
   2d41c:	18e103e3 fc25ddf6 3effacde 1ae907cf     ......%....>....
   2d42c:	e235ea29 040cd138 eccf32ef f220f5fb     ).5.8....2.... .
   2d43c:	f71311fc ced33704 e3e5d30f 4a42eb1b     .....7........BJ
   2d44c:	28bf0230 f4f816e5 3cfefe76 49eb3bf9     0..(....v..<.;.I
   2d45c:	1e6e19de 16053423 ed270cdd faed4408     ..n.#4....'..D..
   2d46c:	221ac653 0a0e4c11 08f429be 0dfdfcec     S..".L...)......
   2d47c:	21d6e9f5 f2fc1201 f6d8e905 1712e2e7     ...!............
   2d48c:	fdd1f1f0 0b2401f0 d020ddf4 defdfbdf     ......$... .....
   2d49c:	f50713fe 020b0a0c eafe071e 3213f10c     ...............2
   2d4ac:	03120af9 3ee101fb cf0b08f9 ec120d30     .......>....0...
   2d4bc:	200e35fc f830fb16 1fd1fc0e df0c010f     .5. ..0.........
   2d4cc:	f512fdf5 f21c0239 e203f512 04e70fe9     ....9...........
   2d4dc:	e6c0c110 e20ff93b f3ff0704 f4ffff05     ....;...........
   2d4ec:	42faff2c 1c1e36fe 143a0f14 18d50d0f     ,..B.6....:.....
   2d4fc:	34f1d318 1431f326 0d1d2e16 10d6b0c2     ...4&.1.........
   2d50c:	da1be8e7 ff2ce9f7 cde3eced d70ff714     ......,.........
   2d51c:	ec2b1014 1d131e0e 1c201fd0 27f401f9     ..+....... ....'
   2d52c:	102509b8 02a70121 403af30b e9f92e1d     ..%.!.....:@....
   2d53c:	e7fe06ca 041027d4 1416c815 fa320ed7     .....'........2.
   2d54c:	f42f1812 eaefe318 ee0915ea fd09222c     ../.........,"..
   2d55c:	2cea0efa 1a18e519 d11e195c 3cf1d7aa     ...,....\......<
   2d56c:	08a71104 2e0f1cbc 0dfbea1b 18c41519     ................
   2d57c:	2ff5231b f6e100cf 311dc300 d0fbf73c     .#./.......1<...
   2d58c:	20d02ff5 f808030d 13fdedf2 00d80ef8     ./. ............
   2d59c:	1a041f15 06a9f4fa 31ee320e f7151009     .........2.1....
   2d5ac:	e8341435 05eafbff 1013dbf1 f52e4525     5.4.........%E..
   2d5bc:	2624f7f5 1ddb0101 40042218 0dee020d     ..$&.....".@....
   2d5cc:	ed12fcd9 ee0234f2 d01ef80f 4af31904     .....4.........J
   2d5dc:	01061019 030a0307 0702f2b1 cb080bfe     ................
   2d5ec:	efd2fcdd f8f1f40c 400cd904 0dd4430a     ...........@.C..
   2d5fc:	c4ec05ee 0821e2e8 eff90b0d 2d271bdf     ......!.......'-
   2d60c:	14b5e2cd f7f80fc9 f5390bfd 17fbe3fd     ..........9.....
   2d61c:	f6b306db 0300f613 0601fd21 e800d688     ........!.......
   2d62c:	ce1bfb5b f8081ff8 0126f7f2 00c7ebea     [.........&.....
   2d63c:	12bd4227 39e22c1f fbfe1dff 22e30018     'B...,.9......."
   2d64c:	fac0fe10 e328e5d7 11e4cbf1 c1d0fd09     ......(.........
   2d65c:	0afde005 1d19a41a 331c08c1 25f015aa     ...........3...%
   2d66c:	e507211e 261bceb9 251031b1 eee2e0f9     .!.....&.1.%....
   2d67c:	d5fa0530 06f5ff3a ddd58df8 17dcecc4     0...:...........
   2d68c:	e304bff2 df01f7f4 f5c3171a 24eeefd6     ...............$
   2d69c:	f24648ab d1e71bf2 1f35340b 270e17d6     .HF......45....'
   2d6ac:	e2f810d3 cb300ff8 ae00f61a b5d8c41a     ......0.........
   2d6bc:	db1a0d25 f14af0f7 e0013ce9 d2afe9f9     %.....J..<......
   2d6cc:	0fd81d0f 2713e1fa ea0602dc f1f61f26     .......'....&...
   2d6dc:	fddcdff3 15010f17 ebf80e2c 1af6f915     ........,.......
   2d6ec:	02d307c1 f4e8d50d 101cfa14 f6ece5b2     ................
   2d6fc:	ddf4141f f80106ef f8951c01 1e0ce7cd     ................
   2d70c:	d607cb0a d91d0702 e41a060b 1307e8cd     ................
   2d71c:	bbfc92c7 11e003ec fce80d3e d8d025d4     ........>....%..
   2d72c:	06d90d07 fd1cc2d6 4410f307 260840c2     ...........D.@.&
   2d73c:	26de00f7 046cf1fa 4bed42ea 0ee8bab6     ...&..l..B.K....
   2d74c:	a1371f0c e6e0f7e5 c630fbf2 1434ede9     ..7.......0...4.
   2d75c:	10dde1fc 18b2250a 161dfdfa 2ad5d7d6     .....%.........*
   2d76c:	f5084e74 d9f937e3 582df916 050c010b     tN...7....-X....
   2d77c:	10f5f3df 06f0f12e a148f81a f6464912     ..........H..IF.
   2d78c:	ee14df21 dfc5fde3 0fdc2fca 0604020c     !......../......
   2d79c:	0608ebef fae61cc2 f1e4f0fd 06121016     ................
   2d7ac:	02f118da 071ec61e 0708f2e9 12f0d906     ................
   2d7bc:	a8310af1 17ede315 0bc3041f f4321afe     ..1...........2.
   2d7cc:	0de9dccb 2bc0b4f7 baf28ef4 0c2204cd     .......+......".
   2d7dc:	0afdbc0a cff6ff17 fa8bc9ae d5331197     ..............3.
   2d7ec:	fdab1d05 bdf7ecdc d8e5fd08 02af25d5     .............%..
   2d7fc:	cb88e066 c810fe0b ddf4f033 f523d70e     f.......3.....#.
   2d80c:	3af6f12c ecebf113 de0920e5 35a10288     ,..:..... .....5
   2d81c:	1017ff33 3c8e06ba 1438dadb 17179481     3......<..8.....
   2d82c:	0d65ecdf 0ebfe99c af5307fe 09ffc80a     ..e.......S.....
   2d83c:	e50c0ab8 90f11b0b 51c90dd8 fac6b60a     ...........Q....
   2d84c:	0c17f2d6 12cc2148 1c1123c5 9fd70004     ....H!...#......
   2d85c:	acd3ecef eeb64f22 90c5fa25 334141e1     ...."O..%....AA3
   2d86c:	2b13c003 205d96a8 d9459819 49f4c096     ...+..] ..E....I
   2d87c:	c4cb221b 519fa93e bee86743 96a71f4f     ."..>..QCg..O...
   2d88c:	b802f720 ca140de4 ccc88bb3 be0bd5fc      ...............
   2d89c:	34ac42dd d28e0ec5 d9f8c012 e35beb5a     .B.4........Z.[.
   2d8ac:	3053d4b7 bb8cc0d7 bf101bd5 d4db1dc1     ..S0............
   2d8bc:	903ff3f6 9de85c25 91bae8f2 bda5f10c     ..?.%\..........
   2d8cc:	4d41c90b cf1f23ae 073fc50e be0ad79f     ..AM.#....?.....
   2d8dc:	d2a33a5c e60b4e8f 2895d9d7 8e363341     \:...N.....(A36.
   2d8ec:	2deb03e2 a6cb900a 488e2d3d 02d02ebb     ...-....=-.H....
   2d8fc:	c4f6f94b 3519bc15 fd236149 9ca6c75d     K......5Ia#.]...
   2d90c:	219d550b a82bf498 415ae629 ea39512c     .U.!..+.).ZA,Q9.
   2d91c:	ecd6cc47 aa245df4 3396399c efcffa45     G....]$..9.3E...
   2d92c:	5c33a18e b550d341 e3272bf5 192fee4d     ..3\A.P..+'.M./.
   2d93c:	8f34c2cf c11427c7 ab44af43 a805eade     ..4..'..C.D.....
   2d94c:	512c4108 a5f5d8de bacc0858 23de5341     .A,Q....X...AS.#
   2d95c:	a6f594aa ed362325 52b1af95 0e50d0bf     ....%#6....R..P.
   2d96c:	46c392cd b38ce0ed 9252cca8 a3d245e0     ...F......R..E..
   2d97c:	f0d7facf 983fe391 b6cd0224 4fcdf6df     ......?.$......O
   2d98c:	2abfa336 fcfba78f d53b15a9 c6f8cb49     6..*......;.I...
   2d99c:	55334b57 3718460c d795eaf6 e1354a4e     WK3U.F.7....NJ5.
   2d9ac:	4224e216 ffcfe40d f093f361 9c2b2396     ..$B....a....#+.
   2d9bc:	98edda14 a000d10e 319eb039 1b440b02     ........9..1..D.
   2d9cc:	ba08ee8d df504c64 4ceed9bd 1425b8c7     ....dLP....L..%.
   2d9dc:	0631e811 25194bb9 afcd3136 feddfe15     ..1..K.%61......
   2d9ec:	089830fa 1b2b578e 4a108845 0e9fef5b     .0...W+.E..J[...
   2d9fc:	5c8fa92d 1f1c4dd9 b63ce3c7 463cf005     -..\.M....<...<F
   2da0c:	b2cad3bf 840f304a 9e2eb8b1 e5c09e60     ....J0......`...
   2da1c:	2b1df2b9 c88d0c95 02d00813 97844cf6     ...+.........L..
   2da2c:	a8d6fca8 ed27462f 0cf1ed46 3cde1f8f     ..../F'.F......<
   2da3c:	f4d90016 320bf3fb ad42efc6 b0b08af1     .......2..B.....
   2da4c:	b7cfed94 e12845ce 0d24a03a 482bd23d     .....E(.:.$.=.+H
   2da5c:	c4b4021c 97a7dabb 14a5f5d7 8cb4d712     ................
   2da6c:	aa1109d6 d91fd49b b0f7e40b a228c398     ..............(.
   2da7c:	dd8feceb cf1c3a4c 2d2de345 28f0d2e6     ....L:..E.--...(
   2da8c:	d0d6cb20 f3fc67d2 88b74cf5 16ba95df      ....g...L......
   2da9c:	c31706d4 2efe51e7 b22fa7a3 9bbe4312     .....Q..../..C..
   2daac:	27fc3797 02e1fa4e dc442c1f c7b4f7be     .7.'N....,D.....
   2dabc:	a2d2b0c2 321d14f6 bf42b5d1 0d1fc5d4     .......2..B.....
   2dacc:	d6555dfb 04c481e7 48bea63d d897953e     .]U.....=..H>...
   2dadc:	fd16a208 2795d59a eff2fdc2 c294a815     .......'........
   2daec:	c3b145b3 d0974ec0 b5d503d3 a0d522c9     .E...N......."..
   2dafc:	3a0bf715 d1029b51 e7e9190b b319fb94     ...:Q...........
   2db0c:	4e2a4a08 1aebbd90 ce180a21 5bfa43ad     .J*N....!....C.[
   2db1c:	0cc93b01 ed2aa7e4 9bdeb8da bf0fa8e6     .;....*.........
   2db2c:	57315002 24a6be19 eec68852 ddb5b8ca     .P1W...$R.......
   2db3c:	e4e346eb eb54623c 9804a4ef b08c99f0     .F..<bT.........
   2db4c:	95bd23fa b5f19c17 b4051d62 48113544     .#......b...D5.H
   2db5c:	b2cff7b6 fb06e92d 93da0e41 f32ac0a6     ....-...A.....*.
   2db6c:	15b10efb 000505e2 de2037f3 d5c73f13     .........7 ..?..
   2db7c:	16064254 04cc2cf0 e281f200 a2fd19cb     TB...,..........
   2db8c:	f901fcff e50eb6cd fc1ad8c3 bca2dcee     ................
   2db9c:	01dc0bd9 eeef12d8 aff4faae ed0df6ee     ................
   2dbac:	129ae4cf 02f8e8cd 0315f6e5 57c7f8e3     ...............W
   2dbbc:	1d031dd8 0612051e 07052fff d72e022d     ........./..-...
   2dbcc:	12def70e f2122ce1 f9241af8 f8edde14     .....,....$.....
   2dbdc:	e8d3f916 17d924f6 cee4d4fa e6f3ec0d     .....$..........
   2dbec:	de13f703 0ef01700 0801ef10 f00bf431     ............1...
   2dbfc:	330004f9 230bf50d f9c1d1fc fb13f4e8     ...3...#........
   2dc0c:	eb1cd8ca 3509e10d e7040a08 e7d4182b     .......5....+...
   2dc1c:	0d0508eb f4efc40a ee2108ea f8191709     ..........!.....
   2dc2c:	ec0905e5 edfbe803 e6f01a05 eeece6fc     ................
   2dc3c:	b7e91c11 1824f7e1 2624321b 1321f32a     ......$..2$&*.!.
   2dc4c:	d7db03f9 e9141a10 fa26250c 0ff0fa17     .........%&.....
   2dc5c:	f331060d eae91823 2fe8e7dd c40af1f7     ..1.#....../....
   2dc6c:	2f0700f3 1d3c120a 25edf90d 04ee1efc     .../..<....%....
   2dc7c:	ec2ad313 0f3fecfc 200d190f 0e030402     ..*...?.... ....
   2dc8c:	080c2e0e 3822f224 f2022823 1919421d     ....$."8#(...B..
   2dc9c:	f1ee2736 1317fb1e 01412707 1f272913     6'.......'A..)'.
   2dcac:	db24f003 e4262120 cbeefedd f2b1f80b     ..$. !&.........
   2dcbc:	daf614f6 1116131a 18b2a4f1 24fb26f5     .............&.$
   2dccc:	1afd1c25 fffc04c7 e5fa024f 3cf30819     %.......O......<
   2dcdc:	e00f1b05 0be4fcef e41ffa26 0bf6d811     ........&.......
   2dcec:	1c010cea 140600f5 d209fc03 02f4e50c     ................
   2dcfc:	f51c0c08 f8fa08e6 ed0c2b03 19e0e7e0     .........+......
   2dd0c:	0100051c 040bd9e8 ea220e18 0f3b0b04     .........."...;.
   2dd1c:	114318f3 ea0e1ff4 040b5f2a 4eec2878     ..C.....*_..x(.N
   2dd2c:	73e859f7 2e32f541 fe08f126 431637ec     .Y.sA.2.&....7.C
   2dd3c:	51f5080e 3cc231f4 daee1ae8 f2fa330f     ...Q.1.<.....3..
   2dd4c:	17ff000e ef14f4fc 29ecd7fa f2f3e511     ...........)....
   2dd5c:	ed2414f3 1e0f2f1d f7ef18e8 18eae5f2     ..$../..........
   2dd6c:	152318d6 eef40615 140de005 ddfa15ec     ..#.............
   2dd7c:	c9e9efe0 0eec2bfd fd0c04ef 1d110922     .....+......"...
   2dd8c:	1df19501 e0e00bd2 05dd2928 12ed06f4     ........()......
   2dd9c:	0410250f f8fd02ee dff4f5de d9f5d2e5     .%..............
   2ddac:	d4f7d926 0e09f2eb 02f605b0 f22a17f1     &.............*.
   2ddbc:	cdd9fe17 e1effcdc 11e5ddf1 00f7f9fb     ................
   2ddcc:	ff0d23e8 f819e3d4 f6e4ce14 2e204704     .#...........G .
   2dddc:	07f2e419 004bf8e1 042aee03 e3f8efff     ......K...*.....
   2ddec:	fea910c6 0f151e17 23214119 275d1510     .........A!#..]'
   2ddfc:	ba09fb18 25c020fe 3ad60c1b 37201cdb     ..... .%...:.. 7
   2de0c:	f8f71f2c 03db2aef 11fa0214 e727f42e     ,....*........'.
   2de1c:	f5d5cff2 ae011007 0430b7fd 33daf9fd     ..........0....3
   2de2c:	feffad19 e6eaeee4 26e529e5 05f615da     .........).&....
   2de3c:	e2f0cf1f de1a15fa edd6f90d 030e2310     .............#..
   2de4c:	fa030b16 2319f20a 1c03e9f0 0f06c4f4     .......#........
   2de5c:	ddf11708 f9ee0505 11fef1fb f4fcf6ff     ................
   2de6c:	f2220fd9 f306dc00 0b14ef00 4a0fe3da     .."............J
   2de7c:	1b2506e4 ef13290c d7e2003a e0d8daf8     ..%..)..:.......
   2de8c:	d501150d 0ddfe011 cdd10ed4 f229fff6     ..............).
   2de9c:	170c3e00 f4e2f5e0 c48fb0eb bec8c807     .>..............
   2deac:	3a021130 c400a5c0 d0e8ea9f b7d00cdc     0..:............
   2debc:	17eda7b2 ddd1bca8 efbc14a9 15f1a7d6     ................
   2decc:	08aae0c5 2be1d4a2 c3f408c6 0813b8b1     .......+........
   2dedc:	d6060cef f3191af0 fdfafc32 18c1e9b0     ........2.......
   2deec:	c5e6b3d8 b7bab003 c20506f2 e1ae0aa6     ................
   2defc:	f1f92cb4 30e525f9 1b1227fa c3b50dcc     .,...%.0.'......
   2df0c:	be0db9d0 24921cf0 d8fdfbf6 2bbef9a8     .......$.......+
   2df1c:	21d4fffe b703c5d0 dbdc11fb bba1f609     ...!............
   2df2c:	f9d2b787 c7a21ff7 ce06e2eb 1500ad94     ................
   2df3c:	bf2710cd 142aadc3 f8e5c6aa d9e793e2     ..'...*.........
   2df4c:	202c0fe5 14a7c9dc 141403ee 03151fc3     .., ............
   2df5c:	d691e690 0ece2694 9caea306 c29fada1     .....&..........
   2df6c:	effadbe1 a7dfae01 3008b6d7 afc505f3     ...........0....
   2df7c:	0327d3c9 db13bffc 0fd40eee e910f7d9     ..'.............
   2df8c:	b08ff9f3 d99801c6 db1df7f9 d39b94eb     ................
   2df9c:	ecd9f498 0befd8d2 cecefcd6 8631f7e1     ..............1.
   2dfac:	ccaef6cc 10f9c710 d6f6dc01 111ae106     ................
   2dfbc:	d6ef9013 fc088a8a e90036dc d5d593e3     .........6......
   2dfcc:	c527ef0b 050ee9d9 b5eeb5ad c10defd6     ..'.............
   2dfdc:	a902b80c fafba7d6 ccd2a6d1 ebedeee8     ................
   2dfec:	932ac695 b9bdf1a1 c4c9cbb3 ffb8f3b7     ..*.............
   2dffc:	9ab6eae7 07afa2ff dd9ed7a2 0405abea     ................
   2e00c:	eb16ff0d 0199b21d f5fbd4e5 efb304db     ................
   2e01c:	fa90f6a5 cefbe9a9 e700c8de 12bceedb     ................
   2e02c:	cbd3dc92 19c8a8e8 01d1a7dc a4acddc3     ................
   2e03c:	f5ad2112 97c605cd 2c102000 be0fd0d0     .!....... .,....
   2e04c:	1c0bcdbd c705b28e c5ee16ee 0ef5d8f7     ................
   2e05c:	e3beb3b0 9cc1d2c0 badfb0e1 b4c9f6d7     ................
   2e06c:	f9df0f12 c7e10db9 b8fac93f 0919c8d9     ........?.......
   2e07c:	bbd69dcf eea207d3 c9c7d9e1 f5a0d6df     ................
   2e08c:	fc9c22fc 02f199b5 deeac3f7 e909e0e4     ."..............
   2e09c:	f5a713b1 05a0180e 04189cc9 24121fcc     ...............$
   2e0ac:	9f02d0fa fe1da7f6 a40dfd94 d324df1c     ..............$.
   2e0bc:	d9aaceef 9bbffed7 9b81ea1b 16b9c6c5     ................
   2e0cc:	ca0f05fe f52edbc7 97d6d4d8 bfafc3d8     ................
   2e0dc:	b0f1be31 c50813d5 10c41dd3 f7fdc51b     1...............
   2e0ec:	27dec5dd 1692ac24 d8dbf8e3 fee0eabd     ...'$...........
   2e0fc:	d692cd04 12b20738 0d981b00 b5c912c9     ....8...........
   2e10c:	e2ee09dc f4eb35e3 22f5d6f8 fff0debd     .....5....."....
   2e11c:	efcbf6af 11cbfde4 ef1d17be d8cef33f     ............?...
   2e12c:	09e7f4f0 a20fb7ff 1af0c9dc e3daced8     ................
   2e13c:	f2a5be05 aed9bcd5 dcd620ba f9a8dad6     ......... ......
   2e14c:	200fc9f4 d9fdd6eb b0ea0dcf c4b2d6c9     ... ............
   2e15c:	9d00d1cb c2b71e55 ddc51d10 07d5bb11     ....U...........
   2e16c:	03f5eab6 f024bb1f d7bbe7c4 28b40e1c     ......$........(
   2e17c:	ccf4e3f3 f20a2011 0dfac6df c71de1f7     ..... ..........
   2e18c:	f5dcf2fb d435c83c 36eef8c8 250afcb7     ....<.5....6...%
   2e19c:	160e3918 b3bbd1d8 f115b9fa fa048dc1     .9..............
   2e1ac:	aabd20da 1c97b510 f8d9e0b8 13eca4bc     . ..............
   2e1bc:	36cc269a 35d532d5 cf03fad2 b32dfde4     .&.6.2.5......-.
   2e1cc:	fad9cc03 de05dbd1 113af3df eefc170c     ..........:.....
   2e1dc:	04d5faeb 30313b04 b5dbece7 ecedb9da     .....;10........
   2e1ec:	11d61bd2 23bfc7e2 e5d53a00 193524fd     .......#.:...$5.
   2e1fc:	1cf2e0d6 cf1503fb dd071c06 efbf0512     ................
   2e20c:	afdef054 25d1bf2a 0523cdc2 d9d6fbd5     T...*..%..#.....
   2e21c:	25fad2e1 d906def8 faeee7d0 3ff5b604     ...%...........?
   2e22c:	01b2f726 f7c31ffe 23f3df2a 08e8c1ff     &.......*..#....
   2e23c:	ef2fe1c7 9f518106 bad313ad e9fef620     ../...Q..... ...
   2e24c:	05dcdddc f3f5fb10 da07ce08 d2220d00     ..............".
   2e25c:	0806250e 19000fb3 0b2affed ed1130f3     .%........*..0..
   2e26c:	e0240110 b501d13e e304f92a 01d9b2e4     ..$.>...*.......
   2e27c:	e7d0011d ff22f1fd f904f4dc 1bcafe10     ......".........
   2e28c:	c4def117 f4f900e2 0f2436f0 07f3eeaa     .........6$.....
   2e29c:	13451aee 1d30d33f 05f9ecbb e6eb0aff     ..E.?.0.........
   2e2ac:	1bfe1135 021dfde4 f1d6f7d5 e7fdcbcf     5...............
   2e2bc:	c831edcb f40e3d1c 0cf850d8 da10fd1a     ..1..=...P......
   2e2cc:	010c310a 0815050d 02053d65 e524d650     .1......e=..P.$.
   2e2dc:	0a3509f1 291411f5 d6f2cef0 9df0d10b     ..5....)........
   2e2ec:	0d04c417 3617f837 1ad32410 f3ef15fc     ....7..6.$......
   2e2fc:	fe04fe1e f7e20b1d 263f05ef f635291c     ..........?&.)5.
   2e30c:	26c6ce43 2b07082a de060c31 17eeccf5     C..&*..+1.......
   2e31c:	da1be007 1331fc1d 1efdf845 1f07f7e4     ......1.E.......
   2e32c:	063102cd 08f6ff02 ed0a10ec 1ff6d122     ..1........."...
   2e33c:	e82320e6 fbec5106 06220efa 060314ee     . #..Q....".....
   2e34c:	070713e4 fcd6f00f e9f2e11f 10f0fafe     ................
   2e35c:	001e1df1 ff0cf9e6 10322d04 5f172d30     .........-2.0-._
   2e36c:	1c25380a 2a1ce0fe 12f3f138 052418cd     .8%....*8.....$.
   2e37c:	f7f0d40f 0d0ecbf2 fe1b1810 fce45406     .............T..
   2e38c:	dff74ccb 062201c8 0102f5f7 15be030a     .L....".........
   2e39c:	10421b18 df2aca51 0d3e21fb 0706ebeb     ..B.Q.*..!>.....
   2e3ac:	0701d410 ee2405f8 2c31eb27 3f172615     ......$.'.1,.&.?
   2e3bc:	15f42f12 04cece0c c1f21a1f e0c62521     ./..........!%..
   2e3cc:	292718bf f60a1efe 2dbe2f20 18e2f10a     ..').... /.-....
   2e3dc:	d30a2aff f3fe0cdf fe26f602 15f00b1a     .*........&.....
   2e3ec:	43f80011 f3f2f60b fdf8f4c5 f609c903     ...C............
   2e3fc:	fb1bf6ad 0bf6d42a 0cfcfee4 f3b70f25     ....*.......%...
   2e40c:	fee618e0 23fb18f2 10e7eeeb 2def05fe     .......#.......-
   2e41c:	eb07fff7 0025da23 f414e204 d7f2f028     ....#.%.....(...
   2e42c:	081c09ec 2a0b3515 11094626 221fc217     .....5.*&F....."
   2e43c:	f0fb0811 0aeebfeb ebefca05 0f15eaff     ................
   2e44c:	02c6492b ff1f3beb c70c24f1 070107ee     +I...;...$......
   2e45c:	f7d60eff 11b51700 21220631 24f8c82a     ........1."!*..$
   2e46c:	f31df8cc e4ea16e5 070d09d2 d125f8fb     ..............%.
   2e47c:	3d16fa1a f7202293 c70cf911 05baaa0a     ...=." .........
   2e48c:	d1074830 0ad2c7ef f2410ac0 c5bf19dd     0H........A.....
   2e49c:	05e21901 f2d4fbea f8c2dd04 eaf02236     ............6"..
   2e4ac:	eb01e4ff fe901d08 4029e304 de07bffd     ..........)@....
   2e4bc:	181f1091 96cef405 cdb7e617 e6d6c353     ............S...
   2e4cc:	11b3c7de 02cf0f08 9cdde7de 12071396     ................
   2e4dc:	fbe3cac7 c8c08b21 cd0828f6 0910a4dd     ....!....(......
   2e4ec:	e91f2af8 2f1e18ba 02cae7f0 fef49dcf     .*...../........
   2e4fc:	11e4b129 01ea2b9c 26a90ac5 cbdcd4be     )....+.....&....
   2e50c:	09d3a3ef ed1ac33b 26f9eac2 2b9bd618     ....;......&...+
   2e51c:	d9100529 0314450a c1beb6d7 2a1629f6     )....E.......).*
   2e52c:	df15b0b8 0dbeb1ad f330122d eac6222b     ........-.0.+"..
   2e53c:	03b00c00 cf8fd6b9 e6bdbae6 020835fc     .............5..
   2e54c:	ff061729 d7e2b805 3be5e6cc 000105a1     )..........;....
   2e55c:	2ab82ba8 250da5b9 9abfefd1 b4db553c     .+.*...%....<U..
   2e56c:	b428ea1a 14044b9e f496e288 1b18a608     ..(..K..........
   2e57c:	1b0f1916 26ba26f5 c92837b4 a2b51b0e     .....&.&.7(.....
   2e58c:	9b2ffcbb 0f241024 c502fc37 c2d4a2dd     ../.$.$.7.......
   2e59c:	27dad2c1 c8d6ebd4 11ed0405 941df0e8     ...'............
   2e5ac:	e732dc02 3718bff7 cac2203a 17f51526     ..2....7: ..&...
   2e5bc:	f1f9111c 11bbdcfa c7181734 c92abd9e     ........4.....*.
   2e5cc:	d3f20efb 0cd23012 ecf90a31 3712f0dc     .....0..1......7
   2e5dc:	0bcaaeb5 9bc802a3 07f0acb9 ecfa10e6     ................
   2e5ec:	d5dbc8b4 fdeb29ac 9effb9af c83dfbec     .....)........=.
   2e5fc:	abfcd2b4 c3ede8cb 16d7ab3b a5d8f2d3     ........;.......
   2e60c:	26e8c8da a9b2ca09 bbd7aa1e 33a31931     ...&........1..3
   2e61c:	d1ef12e8 3dc91815 edf4f20b fadd34ce     .......=.....4..
   2e62c:	01368db8 3dea2eff b034dcb9 a3310ff1     ..6....=..4...1.
   2e63c:	12ebe5bc f0e70fca a5a7281d 00d2b425     .........(..%...
   2e64c:	ff30d022 18bbe9fd cee909ca 12d72f32     ".0.........2/..
   2e65c:	26812140 c811fe0c 13c4d009 c8ecdd1e     @!.&............
   2e66c:	e90c26de dfba1dd0 b1bac116 b81dcbfd     .&..............
   2e67c:	cf9d3a11 e4071adc f0ffb8b7 0005ddbb     .:..............
   2e68c:	2c9fb228 0227f2ff 2a153900 ae49321b     (..,..'..9.*.2I.
   2e69c:	ccc5ab43 f31f1d19 fbd21c1f 06e223cf     C............#..
   2e6ac:	2a320f14 9bf33a1f ecc5ad40 dfd02f1f     ..2*.:..@..../..
   2e6bc:	cdf2c4c0 cfbbde44 dc3babc6 41b844c2     ....D.....;..D.A
   2e6cc:	1df22ebf c413c4c1 1c3537fd ed29fced     .........75...).
   2e6dc:	c7c4b505 e8dde7ec 2144d4bf c4fc2dbd     ..........D!.-..
   2e6ec:	96dcd601 f93ee6dc 2728f2c2 dbe5bfe2     ......>...('....
   2e6fc:	a52bec04 27fb08bc 122cdcd3 25ce1014     ..+....'..,....%
   2e70c:	aec4d7b4 c206be1c 2c050643 d3f61ef3     ........C..,....
   2e71c:	f732c8cd ba0cd7ef a808d407 3ee6eb05     ..2............>
   2e72c:	4bfded38 12ba041a 31f30e45 b0b801c2     8..K....E..1....
   2e73c:	1f37d1e4 2fdfdd14 33d0c0f4 19340ae6     ..7..../...3..4.
   2e74c:	2fb3ead6 21d404e9 45febc34 b4dc1de7     .../...!4..E....
   2e75c:	11fcb21c 0649d312 32d3b5f5 ad88d3ad     ......I....2....
   2e76c:	0cd72dae beddd7f6 b540eafd dfb3ddc8     .-........@.....
   2e77c:	bd2de5b7 3d17bd0d 012bb9b8 09dce229     ..-....=..+.)...
   2e78c:	4c06ffad df0ffdd5 0ba4ad0e b9ed01c9     ...L............
   2e79c:	17b10f0d b2ff28ff 270dd3fb 1cced4f1     .....(.....'....
   2e7ac:	d7edf7c0 0f08cb02 302105d8 c80402f8     ..........!0....
   2e7bc:	1aacb21c f0053a38 28b1dac2 2e203130     ....8:.....(01 .
   2e7cc:	b6f7c192 eeb5143f b8edbb0e 25c8b210     ....?..........%
   2e7dc:	c00bd3d1 3abc2f06 d5dac7e4 1cb142d3     ...../.:.....B..
   2e7ec:	9cdcbf0a b53735b9 ef1fe02e 19d83bcc     .....57......;..
   2e7fc:	f12905a8 23a59e4a 39d104d1 e4d03b20     ..).J..#...9 ;..
   2e80c:	4df64a2b 24e83ef1 cb513926 424d0d0e     +J.M.>.$&9Q...MB
   2e81c:	1124f4fe 324e4ac0 f1ca3548 bb3252ee     ..$..JN2H5...R2.
   2e82c:	3130ae48 2ae9b6bc c0f18dcc d8bc0694     H.01...*........
   2e83c:	295adfe2 4b3f241e d2db9d47 31dfa0d3     ..Z).$?KG......1
   2e84c:	e2b436cd ff09a02c e2b613e2 19390e97     .6..,.........9.
   2e85c:	fc1f1139 ca0a10f6 b6171cd3 ed20f542     9...........B. .
   2e86c:	9bc72015 2aa9b933 da26be01 f9a9f713     . ..3..*..&.....
   2e87c:	f4da2ffb d6dad1a2 dd93930c a6ccebe3     ./..............
   2e88c:	969cb939 d042c70e 1f45050b 45dcd1f6     9.....B...E....E
   2e89c:	eb1ee2c7 18defdf1 2908e736 970834f5     ........6..).4..
   2e8ac:	972a31f8 2ce9239a 1e06ad35 19c69cf8     .1*..#.,5.......
   2e8bc:	460cb7b9 430d91cc c2dfe50e 5728f020     ...F...C.... .(W
   2e8cc:	cef2253f e202a526 c600d304 a24208aa     ?%..&.........B.
   2e8dc:	28da90ec 90afd730 22412d03 db06198f     ...(0....-A"....
   2e8ec:	bcb8439c 3b27c50c 2a14fdd2 db3bd118     .C....';...*..;.
   2e8fc:	d31ba489 15cf033a 0c0af8fa b9494e1d     ....:........NI.
   2e90c:	d12139f4 0eb8daf8 d93125dc a29ad7c7     .9!......%1.....
   2e91c:	d4b9300e be37e218 b9e0a820 040917f3     .0....7. .......
   2e92c:	24a450ca 85204335 31e92cfd 3ab2caed     .P.$5C ..,.1...:
   2e93c:	b253a3f7 c0c112a2 f3f5be28 b5ad118e     ..S.....(.......
   2e94c:	d20731f1 21a6e238 ecda5522 c98f43db     .1..8..!"U...C..
   2e95c:	e7c41481 a727b5d5 ead5a4dc f3e42a93     ......'......*..
   2e96c:	e3d7a441 92eec5d1 909e0802 eedfffb2     A...............
   2e97c:	b5bd3f39 2e39ae33 0a34a5c3 f2ebe6a8     9?..3.9...4.....
   2e98c:	be2037ef 481605db e496cd2e 18a80f49     .7 ....H....I...
   2e99c:	390ce4a9 9b0daff8 fa2898d6 f00513ab     ...9......(.....
   2e9ac:	c3352b33 46eb3b4a b934ad3c 8fa14433     3+5.J;.F<.4.3D..
   2e9bc:	1ebc1714 cc082f18 f12e3e25 d3e48c03     ...../..%>......
   2e9cc:	2ed131d8 c101db12 34132f2f ac28b2f1     .1......//.4..(.
   2e9dc:	091bca36 07ebcaec 52ae47d2 fde2c93e     6........G.R>...
   2e9ec:	81323b2d e2a50cb1 1aa6d6f6 08162e1d     -;2.............
   2e9fc:	8d098ed9 d41e3fff ca5dede7 25f732fb     .....?....]..2.%
   2ea0c:	26bf1faf e2dba097 c2c609db 00e33e1e     ...&.........>..
   2ea1c:	f99b21e6 f8dbd42b adb609b9 31c745aa     .!..+........E.1
   2ea2c:	f499b68a 2fe2f0ad 2ab5d891 c304d3ce     ......./...*....
   2ea3c:	2a93ea2c 1e13cc49 acb7053c 1ec400ef     ,..*I...<.......
   2ea4c:	2df842aa f411020b 9f28331a 9a191bc2     .B.-.....3(.....
   2ea5c:	428fd51e 0404adb3 b40fb94e 38f6f826     ...B....N...&..8
   2ea6c:	aca3cf9a f130f1d0 26eb329a f5e4fab0     ......0..2.&....
   2ea7c:	f33ebd1f 2697aa28 26f88208 3faba086     ..>.(..&...&...?
   2ea8c:	16a9acbf f72c2e00 1fdca6a6 979e43b0     ......,......C..
   2ea9c:	c24c06ed ba46ccb2 14d591a0 2524dfa7     ..L...F.......$%
   2eaac:	ce1fd438 ff00ce19 9cfa03e1 c735d9f7     8.............5.
   2eabc:	b8a58530 d12ad4ee 3ec8b928 3404e552     0.....*.(..>R..4
   2eacc:	08081630 1ed613d4 cd8aa7e9 b69bebe4     0...............
   2eadc:	9bfc8dc1 a2c7cd3b bf42b95b cee82592     ....;...[.B..%..
   2eaec:	3f1fe30c 3b6c07e2 86fccde5 3bb89b2e     ...?..l;.......;
   2eafc:	93f71de4 a5fea0f5 85f9931d 9a29f493     ..............).
   2eb0c:	042029d7 0cc70acf 53ea0330 90ea3d0b     .) .....0..S.=..
   2eb1c:	c39c8e1b 32e5cae2 08cbb7eb c11ba324     .......2....$...
   2eb2c:	c438bc1b 2334bdd6 5742cbb7 a5faffc6     ..8...4#..BW....
   2eb3c:	d8411fe9 162ddc1e d725af29 cb9fca35     ..A...-.).%.5...
   2eb4c:	c9d74e90 2935a8b9 c52219f1 403939a2     .N....5).."..99@
   2eb5c:	caeee293 e7172bcb 0fc0bc13 400f1ef4     .....+.........@
   2eb6c:	262510f1 142a48e6 dd18e8d6 e5b3d0fb     ..%&.H*.........
   2eb7c:	e508209b f4a0410f d40213c7 3213101e     . ...A.........2
   2eb8c:	32b0bf42 0e09ba14 b9b1befd b9d1b83a     B..2........:...
   2eb9c:	d4d35500 b905c1ee f9bd0ebd f4c9c198     .U..............
   2ebac:	ca42c008 fac6d838 c106d724 02b53ffb     ..B.8...$....?..
   2ebbc:	565d17fc 5131c4d4 c62db6dd 22eefb13     ..]V..1Q..-...."
   2ebcc:	0e25f85a 24d1082a b80d5739 fafae0b9     Z.%.*..$9W......
   2ebdc:	cafd07fd 15b751e9 0e2c0a04 c5939f2c     .....Q....,.,...
   2ebec:	fd1b95ca f3812d0f de09acaf d14a2603     .....-.......&J.
   2ebfc:	dea511d6 1dcc29b8 b6e41136 03b3a18c     .....)..6.......
   2ec0c:	cc28b11e affdfd4b bfc2e5db faa61bd1     ..(.K...........
   2ec1c:	e339f90e d4282af1 d453a113 d89b3523     ..9..*(...S.#5..
   2ec2c:	c52da5d8 a9d0d0cd 369dc250 afc3a7f5     ..-.....P..6....
   2ec3c:	3df2b2c6 14b122ca 3cac38c9 f5a618d3     ...=."...8.<....
   2ec4c:	1bbcbcea e9c3fccb bcb9a5a3 c2063ed2     .............>..
   2ec5c:	9c2ab5b0 c4a0edca ed2121af fdc8fbe2     ..*......!!.....
   2ec6c:	0bef088d 2db5e42c 26314c04 e5bc0cb3     ....,..-.L1&....
   2ec7c:	f43bc627 13d337ae 491e2ff4 4e4e363d     '.;..7.../.I=6NN
   2ec8c:	ee3fe825 0537b72e f7b2adcb a5ca03e5     %.?...7.........
   2ec9c:	edef4b10 019827c4 55093dd0 d4310a0c     .K...'...=.U..1.
   2ecac:	1af4ffc3 afdac4c2 26f9fe13 08b69da8     ...........&....
   2ecbc:	d7fde61c dcfef3f0 e00bacef e52ad0d3     ..............*.
   2eccc:	ecb0d9f9 cc368fa3 ab12dca7 a1cab318     ......6.........
   2ecdc:	261e1323 d1ea040c 0bcee8ab 292ddbde     #..&..........-)
   2ecec:	a930eeca 9ccec3e2 efe211ee e4340601     ..0...........4.
   2ecfc:	f92d1705 c0cadcce 50989fdf 1222f8a9     ..-........P..".
   2ed0c:	0d002507 a3a438e1 b296f505 141cfc90     .%...8..........
   2ed1c:	e327ded3 1abcf7d3 a62ae52b f7a1bfa5     ..'.....+.*.....
   2ed2c:	dcbf37c5 1bc2b694 0706119c 20cb1a23     .7..........#.. 
   2ed3c:	0e28e813 c408ffe7 20dd09b7 fbbfed42     ..(........ B...
   2ed4c:	b0ccff1e b21d2bfe d8e5c7e7 bdb0b43c     .....+......<...
   2ed5c:	2a1705c9 14ee1152 32352fbf 5095bba4     ...*R..../52...P
   2ed6c:	1dc12bfb 01e45095 1523b9a9 4c0ba3ba     .+...P....#....L
   2ed7c:	d73a1920 c9cf13f7 50f81353 0a1faaab      .:.....S..P....
   2ed8c:	f8253640 0ce91fdc c4a40294 23ebdd07     @6%............#
   2ed9c:	19da03c3 991818af 0e4312cb 4cc62c10     ..........C..,.L
   2edac:	ce3abf19 a0c10814 35de950d 27f94296     ..:........5.B.'
   2edbc:	bc0733e2 e5b5e9c7 b7d4bba9 05dde29c     .3..............
   2edcc:	b706a61b c7f0c0fb 3bb8f607 e3200227     ...........;'. .
   2eddc:	1f3bd3cd 1de6c0a8 2526b1d0 e51b2009     ..;.......&%. ..
   2edec:	2410ce25 3d3947b7 a04c21d2 35dff7f3     %..$.G9=.!L....5
   2edfc:	25d730fa 010828b1 f4fbd84a e0fecb12     .0.%.(..J.......
   2ee0c:	b7f152c0 a60bdcaf b0f02c24 00dbfd90     .R......$,......
   2ee1c:	b8e619d5 c5fea947 2339b5ab a741b7f5     ....G.....9#..A.
   2ee2c:	e9fb4024 cad4fde5 dae13ae2 b8261a22     $@.......:..".&.
   2ee3c:	07d90fe7 0583c174 fca43f49 9c15c03f     ....t...I?..?...
   2ee4c:	14d321c8 b2ea5edd c5fda38c db13b10a     .!...^..........
   2ee5c:	5604b1c3 3910f214 a95314bc c918d6a0     ...V...9..S.....
   2ee6c:	35fdef0c 2c9cf98e 1bba3950 28134fd1     ...5...,P9...O.(
   2ee7c:	2ee85d2d e5e2c50c 85d3c6f3 0bcf9487     -]..............
   2ee8c:	d5c409e3 8d20d75e e9f99eeb d4c19abb     ....^. .........
   2ee9c:	f065da9b 97979ad7 62569896 ffe36537     ..e.......Vb7e..
   2eeac:	4743f208 eb0c3c5d ad4fd2e5 445251b7     ..CG]<....O..QRD
   2eebc:	d0ed5f03 04ba98e9 84bea18b eff7f277     ._..........w...
   2eecc:	0ebc44bc d0a7b40b be17eade dc46914f     .D..........O.F.
   2eedc:	eeea1672 04ed3ca8 d75afede 44f6a76c     r....<....Z.l..D
   2eeec:	1db73547 4f08b12c e1fe9289 2e612ce2     G5..,..O.....,a.
   2eefc:	70d5addf afca29bf 89f2579c 0a5a0037     ...p.)...W..7.Z.
   2ef0c:	4cd98be9 64ed5964 a9060362 f9e73b51     ...LdY.db...Q;..
   2ef1c:	3ba8d2ca 3e569ff9 10d240dd b4013c25     ...;..V>.@..%<..
   2ef2c:	c3988aec 3dd63dff 47f6f791 5fd6b6f9     .....=.=...G..._
   2ef3c:	9842ddec 1561dd1a 034c2a99 95f34952     ..B...a..*L.RI..
   2ef4c:	9234c594 d713f787 e343324b 920dc3cf     ..4.....K2C.....
   2ef5c:	dffd4d59 184231a1 2baa1a3b 3ef9c69e     YM...1B.;..+...>
   2ef6c:	51a44dda 2c368504 9031fbfb ab1c2668     .M.Q..6,..1.h&..
   2ef7c:	d9960117 3fd835bb 15d5caa1 844b880d     .....5.?......K.
   2ef8c:	855dd352 4190341c 5d27ebea c150929e     R.]..4.A..']..P.
   2ef9c:	c849c8d9 6396ef2c 2e91bdeb 9069f958     ..I.,..c....X.i.
   2efac:	1c272989 1dcfada1 35d310dc 0628ddfe     .)'........5..(.
   2efbc:	ded846bf ec605fa1 6f258b1b 6c20c92c     .F..._`...%o,. l
   2efcc:	3a2f0f6a b7200897 15e3460e ca826254     j./:.. ..F..Tb..
   2efdc:	494fdb50 da0bb698 471458f2 3eea11eb     P.OI.....X.G...>
   2efec:	1f10173d c911febe e5adc332 b52011a6     =.......2..... .
   2effc:	3df34295 e764d8a6 4e1a158f d08e13de     .B.=..d....N....
   2f00c:	5b4f30af 9f47efc2 85bb234a 4fe7e481     .0O[..G.J#.....O
   2f01c:	839f99bc f6aff689 98d4209c 0b418484     ......... ....A.
   2f02c:	3baa8e96 cd1788ac 5c28fe13 c158223a     ...;......(\:"X.
   2f03c:	67044b59 bcd3f029 afa4b122 e2503500     YK.g)..."....5P.
   2f04c:	1f9afbc2 044e2ef8 551518b2 3c0c2fc7     ......N....U./.<
   2f05c:	f2da3859 4b3e02c2 a7d436a7 f8f84982     Y8....>K.6...I..
   2f06c:	86f67062 e94596c4 f5c269f1 5bed158d     bp....E..i.....[
   2f07c:	b84e2d5e 98c3b171 e10415e2 3690da33     ^-N.q.......3..6
   2f08c:	5938240a 23bfd648 cb3a9d5a 2d85e52c     .$8YH..#Z.:.,..-
   2f09c:	4ba733f4 fbcd9d81 9ec85df0 9d0b882f     .3.K.....]../...
   2f0ac:	3cb69aea 08c8a8d9 9ec2baa6 9b450444     ...<........D.E.
   2f0bc:	ea165d00 441110c0 ef9f4d3e 51d303ba     .].....D>M.....Q
   2f0cc:	26920b0a 8b43a2d2 847212fc c657eaaf     ...&..C...r...W.
   2f0dc:	85f49700 bd4e3c5f fcf4a6f8 bbe7d9ea     ...._<N.........
   2f0ec:	af4d9be8 c82ae298 290afc63 f84ba653     ..M...*.c..)S.K.
   2f0fc:	94bc59ac 5595e946 bd01a5b0 5ba6e072     .Y..F..U....r..[
   2f10c:	e482f32e 828ad8a0 8ac8b7dd f2ad5b02     .............[..
   2f11c:	f4b92ce8 07e03db8 afc72c00 ab94a0c3     .,...=...,......
   2f12c:	074e8b4f fe82f3fa 3bb61d56 f8e96542     O.N.....V..;Be..
   2f13c:	8509b4d2 ae0a5547 2e61040f 901f0719     ....GU....a.....
   2f14c:	57ff0a0a 341ed9ad 32fe96a4 aeb51e8f     ...W...4...2....
   2f15c:	c598fa91 38e421fa 4c984943 4224b720     .....!.8CI.L .$B
   2f16c:	429434ea e355b402 3a00bcb0 ad37d68c     .4.B..U....:..7.
   2f17c:	94139ca3 b2c03bf3 aa2e9998 dcbf0a45     .....;......E...
   2f18c:	e6108fa3 3e994810 f8d8af42 2622ad16     .....H.>B....."&
   2f19c:	0ffb85e4 f90f12ed dba60215 9925deb7     ..............%.
   2f1ac:	a7d31ac1 d145e183 e946adb0 fd65f312     ......E...F...e.
   2f1bc:	eb179ce0 e83cdad5 4883d5e4 a629fbf0     ......<....H..).
   2f1cc:	d4eb20b3 9e34eb4e b9efd4ea 3e013144     . ..N.4.....D1.>
   2f1dc:	ad26eefd 26edfecf bf49acb6 c925ffd4     ..&....&..I...%.
   2f1ec:	27a7bd55 83ccede9 3f33fbfb ca9dd1a0     U..'......3?....
   2f1fc:	ace540dc d72bab4d 41952da3 ced632a3     .@..M.+..-.A.2..
   2f20c:	92af9e2c 0aea30cd b4828c87 e0aa4bea     ,....0.......K..
   2f21c:	ee278bde b208e601 014fa8c8 31ba8aec     ..'.......O....1
   2f22c:	828f8e98 f4e948da a0978639 ecb49da4     .....H..9.......
   2f23c:	049b8706 27c8a322 da10ef9c abb7330c     ...."..'.....3..
   2f24c:	869bc713 088be8ab e908f5a3 dd28adbb     ..............(.
   2f25c:	ba3189c2 ede692db f5ea2239 d32e3199     ..1.....9"...1..
   2f26c:	94a24bbd a1d6f2bd a5128cce 18072fe3     .K.........../..
   2f27c:	e8eade3a 2eaf9ad3 0f258293 87bed988     :.........%.....
   2f28c:	fb43b2ee 0ef22402 aaa2202b 059c20be     ..C..$..+ ... ..
   2f29c:	f6f792ea 5be9aea9 06842fa4 12d8418d     .......[./...A..
   2f2ac:	142c2747 a2ef4fa5 0196c7d9 ebc7a119     G',..O..........
   2f2bc:	d499e010 87ab89a5 a5d79317 1b0cdfdb     ................
   2f2cc:	9bf5acb9 cfedcb9e dbcd9dd1 96bce49c     ................
   2f2dc:	39b1a1d6 03d33cd0 da5e1941 8b8c3ded     ...9.<..A.^..=..
   2f2ec:	b5baeae1 04a233de ada10cd4 270ab500     .....3.........'
   2f2fc:	f1134504 2e48a504 47ec3e44 1d30d0b8     .E....H.D>.G..0.
   2f30c:	c2e8c7fe 1a01abae a60f3f99 c00f410f     .........?...A..
   2f31c:	9ac94da9 8abb453d 32c02d8e 1a9fa393     .M..=E...-.2....
   2f32c:	2163d1ea dde85282 16e50751 87b2d823     ..c!.R..Q...#...
   2f33c:	aee39e4b 910d150a 11a4ecae cf669cd1     K.............f.
   2f34c:	1fb69abc bd27ee99 e20d0020 3dea3401     ......'. ....4.=
   2f35c:	e5db1af8 4d810a1a b3bfc586 efb82d12     .......M.....-..
   2f36c:	bef33196 9e3e9443 ba0b0b46 2c34c4f1     .1..C.>.F.....4,
   2f37c:	8f224ccb 25f59020 0cea9836 ffa08227     .L". ..%6...'...
   2f38c:	97c71d1b cbcef6c7 b9aaeb8f d20881cc     ................
   2f39c:	12014c03 a4e38d11 198c3606 f2a6bcb4     .L.......6......
   2f3ac:	040e81d0 41110a94 4592ed8a cf353118     .......A...E.15.
   2f3bc:	160e9b18 45d3e04e e8c0d6db 0d524587     ....N..E.....ER.
   2f3cc:	c5d29ebd f9da40d5 e5f8a1a0 aebfea24     .....@......$...
   2f3dc:	20dbf6ee 2f072c57 bcf2221f c0219ba3     ... W,./."....!.
   2f3ec:	feb4af1c 2729bb90 9a4af74d aa023da8     ......)'M.J..=..
   2f3fc:	97eebedb a7180b28 4be3a235 2798c4bb     ....(...5..K...'
   2f40c:	5317d015 63c69ac4 33bcdaaf 121bc8fa     ...S...c...3....
   2f41c:	853bc6dc 0a251eba af0da918 e6c68b36     ..;...%.....6...
   2f42c:	c75fddc8 c610abcb 8afed223 212d00e4     .._.....#.....-!
   2f43c:	fba39837 1de8182e dccaead7 121703d1     7...............
   2f44c:	14ae1b2d 34a6fb93 1ae7c418 d061f73a     -......4....:.a.
   2f45c:	f0d7ebfc abb34b5f b8ec35a4 4a9305db     ...._K...5.....J
   2f46c:	da02fe3f 33c0ffe6 3c0a964b 2926cb8f     ?......3K..<..&)
   2f47c:	39c2d2dd 0cb4a5de a6bd16a5 0526dca7     ...9..........&.
   2f48c:	19373a2c 20b2d6ce 4aae09b9 c5bfa310     ,:7.... ...J....
   2f49c:	fbf0be02 e331b902 e440ff0f 9cd1df1a     ......1...@.....
   2f4ac:	100808ff 99aa32e4 d4fa91fa c198cca9     .....2..........
   2f4bc:	f9c10bc6 b105f5ce fe17f1c4 0fa01920     ............ ...
   2f4cc:	fe0d231f 1f2f0414 fe95f2cb b9d8a83d     .#..../.....=...
   2f4dc:	001e11d9 cc2692c0 ded61a19 c93a1037     ......&.....7.:.
   2f4ec:	1ced1cc2 2ec3aa15 c2f0d9bf 1af82ed7     ................
   2f4fc:	2227ed9f 30fe0be9 0c0aded2 e28d35e9     ..'"...0.....5..
   2f50c:	ed1fdf1f b30034e0 1fa119ba 170a8a1c     .....4..........
   2f51c:	ca44e81e 4b25fed1 21be4b0f 9bb3ce04     ..D...%K.K.!....
   2f52c:	b2310ccc 4baca994 fdd0b29f 1f05cabd     ..1....K........
   2f53c:	c4f5aaf8 0ed1f9d4 afb3b2bd dcc797cd     ................
   2f54c:	100a9922 8ec1df93 45810bcf 20fa9d45     "..........EE.. 
   2f55c:	a5143ab9 cec8d2b5 2de51391 d11117eb     .:.........-....
   2f56c:	a428e7d1 35e8e5aa 91e3d5d7 a9c6feca     ..(....5........
   2f57c:	0e33f990 d6a5e131 ccbfa8e7 e3351596     ..3.1.........5.
   2f58c:	d8d91d5a 35b92f2e 46e09b06 20a4a7ca     Z..../.5...F... 
   2f59c:	cb1b0b16 29d7cfaf f197aeef 2e46a3b1     .......)......F.
   2f5ac:	ecd4ffd5 99e5d9ed 242cf785 0f32a13e     ..........,$>.2.
   2f5bc:	ae22d9c7 0b48cdfb ae17f209 1dcce7cb     .."...H.........
   2f5cc:	c0230696 2f05fb27 4329f81c 451ab42c     ..#.'../..)C,..E
   2f5dc:	def0a486 2b32a901 b7c49b92 29e121bd     ......2+.....!.)
   2f5ec:	fbd8dd03 f710a4d4 372c2024 bbf8d638     ........$ ,78...
   2f5fc:	99a42996 4a1611b7 08b402aa 192dc9b9     .).....J......-.
   2f60c:	a0dca287 bc2d3198 500638f9 e112a8d3     .....1-..8.P....
   2f61c:	b8bad1b5 004b1fb0 fdb9e30d aabb8dd9     ......K.........
   2f62c:	3cf29b13 112121c2 4240b312 06a6d5bf     ...<.!!...@B....
   2f63c:	bf0f921b d2f93dd1 bac4fd00 b5d036ed     .....=.......6..
   2f64c:	06b4ca24 e03c59ee cde00b23 36c0d2cb     $....Y<.#......6
   2f65c:	f0b8fd0f f3b60d1a cdadffe2 cefb40fc     .............@..
   2f66c:	2fb9b34f b9313954 a9eb041e 4901f7b5     O../T91........I
   2f67c:	9b9bccbd 5203a72c a715d11c 112344e5     ....,..R.....D#.
   2f68c:	14d2d91e cbf5a825 1ed3d0b3 1719ee32     ....%.......2...
   2f69c:	0b8ecfdc 15e6c6ce ceabd4b2 f09f344c     ............L4..
   2f6ac:	e99ef31b 9db308ca bb9b2b8a f3eba21a     .........+......
   2f6bc:	f8f0b0c1 1be0ea05 e426b60a f1240ae1     ..........&...$.
   2f6cc:	a8b9f9b3 e01522d7 29ca2f07 2db6a8d9     .....".../.)...-
   2f6dc:	4312f0ba 2134e29c b10da2f8 361e573b     ...C..4!....;W.6
   2f6ec:	e5d4a3af 06d8ed0a bc9e06d2 d9f9d908     ................
   2f6fc:	12b541ed f9f11812 b0c5f1bf eea329b3     .A...........)..
   2f70c:	fc0d10ea c30385cd 9bcd37e2 dd09553a     .........7..:U..
   2f71c:	a226c1d7 b6b6081b 4ec6c809 03cc3f3c     ..&........N<?..
   2f72c:	0bb4bf3c c9b2a9c6 9c36a488 d1b2a21c     <.........6.....
   2f73c:	adeba8a9 1f13d528 adccfa95 c297f804     ....(...........
   2f74c:	87dde7c9 351e1a1c 21002bcb deaae8ff     .......5.+.!....
   2f75c:	331032e0 c7b3228e 272ecde1 989421fc     .2.3.".....'.!..
   2f76c:	a1b0ade8 96bd22dc e1db9233 0ce63908     ....."..3....9..
   2f77c:	e5efd0d8 3228d73a 8d3a46f9 983eebd1     ....:.(2.F:...>.
   2f78c:	35bd8fc2 1a37cbb5 244cbeee fddc89c2     ...5..7...L$....
   2f79c:	219b1d35 1ce900df 0be8efc5 0cf9fc1e     5..!............
   2f7ac:	0e2c270c fbf019f4 fb1ac3cd d55910ff     .',...........Y.
   2f7bc:	b810deff 03fe020b e3150644 d7cdd7bf     ........D.......
   2f7cc:	f91de6f7 f10cd611 15ce0c09 33191530     ............0..3
   2f7dc:	f80bf8e5 2b14f1fb 01f3c50d e501de1a     .......+........
   2f7ec:	1cee0822 dd08ca37 f10819f8 d5e81e09     "...7...........
   2f7fc:	fe30e9a6 20dd5700 0124ba29 08232dee     ..0..W. ).$..-#.
   2f80c:	19b133fd f80cdbff bdf53052 e806090f     .3......R0......
   2f81c:	e408c908 190e04e6 1df1d707 051400bf     ................
   2f82c:	18c3ccf9 62d10f06 c94e26e1 1ae2cce7     .......b.&N.....
   2f83c:	2026c52f 1a10f302 2a7ff1bd 172ae003     /.& .......*..*.
   2f84c:	0b0d09f1 f1e905d9 c1172faf 04e5eafb     ........./......
   2f85c:	d0e212f8 dfed110a 20fc2f27 fddeeff6     ........'/. ....
   2f86c:	1f03c4c3 f4cce434 fd0e1709 47f7f714     ....4..........G
   2f87c:	f8e1c828 0e5510e6 d322b3f9 96d2f4a6     (.....U...".....
   2f88c:	4cdff440 dcdeccb1 e268c7e3 f834b50d     @..L......h...4.
   2f89c:	0a001cef df180ae9 03fbe8dc e61dfe20     ............ ...
   2f8ac:	c5261a10 0fd1fdfa fbe6e84c 04d0d926     ..&.....L...&...
   2f8bc:	08f8c300 05044728 f72205f2 e114da12     ....(G....".....
   2f8cc:	10fede29 e80236f1 fce1f93a 032fe5f0     )....6..:...../.
   2f8dc:	eafa0cfe fab6d4e2 c64c32d7 f6eae6fe     .........2L.....
   2f8ec:	ed0721f6 462a099b 11fe0130 ede8f3f3     .!....*F0.......
   2f8fc:	fce60f1d 44a0281b 23f4e828 f0f3ffdd     .....(.D(..#....
   2f90c:	530d1014 ded601f3 44fcdcce ee120815     ...S.......D....
   2f91c:	07dbfdd6 03e2f631 dcf3b3e9 071af79e     ....1...........
   2f92c:	f70e13d5 04f6cd03 f44eec06 03e2f806     ..........N.....
   2f93c:	fabc27f4 25062e0a f725074c 4935c3d7     .'.....%L.%...5I
   2f94c:	101fd2f6 29f6e52a 260efb33 daf4fc0d     ....*..)3..&....
   2f95c:	dc45d013 bfeadcfd 2c1de5ca f813c51b     ..E........,....
   2f96c:	1506ead2 25d4f8a5 ce28e103 d1e21141     .......%..(.A...
   2f97c:	f4f227f3 b812cd18 08d144eb 012328fb     .'.......D...(#.
   2f98c:	a1edced3 bb36a31a 01c5f5fc 031b2e17     ......6.........
   2f99c:	f4c72222 f7d3acf4 e20549e0 e5002a00     "".......I...*..
   2f9ac:	29edfcdc f30017fa 21f80819 27ac02dd     ...).......!...'
   2f9bc:	a434fef9 c729d6b3 18ecda07 edec0901     ..4...).........
   2f9cc:	ed46fde0 d8f2e6e8 d0f4fb12 f70aecfe     ..F.............
   2f9dc:	3909dbf0 0f0c0e0c 08ec020c e614d8db     ...9............
   2f9ec:	ece12fcd d91bfd0b ca34e916 1a2e0320     ./........4. ...
   2f9fc:	1b33f4db 24f9fe07 efc70ef2 fdf1321f     ..3....$.....2..
   2fa0c:	f93b070c 0035aaec f52ae7eb 012bf216     ..;...5...*...+.
   2fa1c:	ee20ff18 15ce12fa 01fcf828 f42c11ff     .. .....(.....,.
   2fa2c:	c8efd3ef 04360bf0 220326e2 f00a10a9     ......6..&."....
   2fa3c:	ee180611 9fe5f31b d7040722 d4f2fc12     ........".......
   2fa4c:	0718dfef f9c63ed5 cdf8fee3 1417fd30     .....>......0...
   2fa5c:	fa0ffb02 02ede116 2cebfd38 0af10700     ........8..,....
   2fa6c:	f2f2f9e0 020b04f4 2d19fb0b f52a2433     ...........-3$*.
   2fa7c:	001501fa 10f10211 06fac4d4 0008e905     ................
   2fa8c:	1eedff41 d9c215e4 022713fa e7ee2214     A.........'.."..
   2fa9c:	d7f70ed6 190ca1f3 1f32e0f8 03c827ca     ..........2..'..
   2faac:	df07081c 03050b01 ece413ae c3420ae3     ..............B.
   2fabc:	c5e7e419 f80410f7 fb0ff9f9 f8200ae6     .............. .
   2facc:	050f1aff fdf81af8 ec1beee8 0403090f     ................
   2fadc:	fc0c09ce ea0e060e ef07fb0a fcf4d0c4     ................
   2faec:	0cccf40e 031405e1 fd1602e2 09e5e90b     ................
   2fafc:	fb08eefc f701fef7 0604f4f8 d915f816     ................
   2fb0c:	ebc7f4fd ff0f02f1 f5090e0c f8ed0003     ................
   2fb1c:	e3e010fa 09a50cd9 e8d9e707 d6fcfd13     ................
   2fb2c:	0205fff5 ffef2eff 11f90017 f223fd07     ..............#.
   2fb3c:	02e8de13 fd09ff09 1113fc15 04fd0821     ............!...
   2fb4c:	26fbede3 feecf8da f904f1ee 0c08eefd     ...&............
   2fb5c:	fcfc0225 09fe292c 0d21f7fb 161e2b02     %...,)....!..+..
   2fb6c:	0300f526 1c191fea 15201ffa 03f2241e     &......... ..$..
   2fb7c:	e9dffa04 ff08220f 0109f1fd 0c03ffe2     ....."..........
   2fb8c:	f2eef2ff 0b0c06f9 07121e04 14f9fceb     ................
   2fb9c:	feff1601 160d030d 05eb0709 fa11f10e     ................
   2fbac:	e60b041b faf9dfcf 0705050c fedefdf4     ................
   2fbbc:	08f7141f 2bd40308 0bfbe5fd 08e50625     .......+....%...
   2fbcc:	01fbe2f8 ea13001b f7f4e6f5 e90b0500     ................
   2fbdc:	14061e13 06d0cd02 1701fee3 11f600db     ................
   2fbec:	e91dfc00 090801e2 27f424cc 091afafd     .........$.'....
   2fbfc:	d5fd0321 ff16f9f3 f1cad609 07f2f8f5     !...............
   2fc0c:	00e8fcfc efdff4fe 10f90de7 eed013f1     ................
   2fc1c:	050615d2 00e5f6fe 1eed2101 1f001403     .........!......
   2fc2c:	f220f622 16effaf5 fa12050a f1f4e1e5     ". .............
   2fc3c:	ea062600 f61af723 e8f3d606 03e406ed     .&..#...........
   2fc4c:	0ad3fad2 140efe12 0802d6e7 fb1fef01     ................
   2fc5c:	0b03ecf6 000dea1b 17e4e000 10f60fe7     ................
   2fc6c:	edf2fc07 02f208d2 0702f70d f4f2f2f0     ................
   2fc7c:	fe180702 fbfae119 f7a63b34 1c2718c9     ........4;....'.
   2fc8c:	fbf8f50c e7fefb0e e3d5f406 221afc02     ..............."
   2fc9c:	bf12c21b 05b5ec01 0bf3d40f e1fe1013     ................
   2fcac:	2d2bf4e1 0533080e 2a3011e2 19e0fd81     ..+-..3...0*....
   2fcbc:	15f01dfd 082ec0fe d60311fb fc02f6c9     ................
   2fccc:	f1050c05 06eff2f9 cafffdbb bff908d1     ................
   2fcdc:	f9fff4ec 18be2d29 0ad40a03 12c011f1     ....)-..........
   2fcec:	04ff1cfb 0e030c0d 0a05f755 f9c23302     ........U....3..
   2fcfc:	1c10f8d0 f21dce21 07dd0006 f80ddaf0     ....!...........
   2fd0c:	ea05b907 09f8e7df e214e4df 2200ea10     ..............."
   2fd1c:	f32406fa fbf41c1c 07d90cfd 1f061e17     ..$.............
   2fd2c:	fc06031e 29faf3f3 e80ef6e4 f9e9e80c     .......)........
   2fd3c:	f400051a 00fdfb09 1b11ef20 ef21fa11     ........ .....!.
   2fd4c:	03fb04fd 092ced06 f6f7d4f0 f61703d6     ......,.........
   2fd5c:	ed26fb07 fefc02dc e903fd11 010208f9     ..&.............
   2fd6c:	06f0f6e4 f8302c0a 090dfff0 fd3f0321     .....,0.....!.?.
   2fd7c:	2316f700 fee5f411 fae11112 0af5eefe     ...#............
   2fd8c:	f308f305 fcf6feeb ec12fce9 fbf6f7ec     ................
   2fd9c:	d7fe19fd 110d00fc f9171938 1ae6fc12     ........8.......
   2fdac:	2a1df803 c802f6ce e41d2e04 f9000e04     ...*............
   2fdbc:	d0040724 0d0c1f0a 19fbfbed dcd60119     $...............
   2fdcc:	f90a0e13 030bd0f5 19181af5 c5e6e918     ................
   2fddc:	cee7ee02 bdc188df a8be5042 d909e305     ........BP......
   2fdec:	f9f74bde cc2a9b23 f212eb9d d5c1bffc     .K..#.*.........
   2fdfc:	3bb60428 912aa292 b1aaf010 fec8bb30     (..;..*.....0...
   2fe0c:	ce282df0 32c5b306 10f0edfd 8e040bf7     .-(....2........
   2fe1c:	c037398a def8bffc bf4292e0 b3b5b4ab     .97.......B.....
   2fe2c:	aa39aac2 eac505ce c9c8d6c4 fe4d198e     ..9...........M.
   2fe3c:	afd030bf 1eb24508 e9262318 0aa5c2bd     .0...E...#&.....
   2fe4c:	9da4acd6 cdac03a9 f6cbcb1b 2fd2c7a5     .............../
   2fe5c:	2da338e6 b8afbd24 af9108c6 ebd1ecda     .8.-$...........
   2fe6c:	a22e2a07 c533952d 2f298525 05e02bbe     .*..-.3.%.)/.+..
   2fe7c:	ba0da231 b93df005 0cb4e70d 46fd2ce5     1.....=......,.F
   2fe8c:	26c2e0aa 0108cbb6 a5ff111d 312bb9c8     ...&..........+1
   2fe9c:	0aa9ffdf c2013891 109c5136 a60511e5     .....8..6Q......
   2feac:	f5dc851a 35bc0fda 1e2e260c a6dc811f     .......5.&......
   2febc:	4d2b02c2 ecd709fb b6190fe0 253ad7cf     ..+M..........:%
   2fecc:	1307d283 3e21a8ed eb19e802 c29ca4b2     ......!>........
   2fedc:	f0c7ef37 18288d0d a34f39c4 b8222b90     7.....(..9O..+".
   2feec:	31214117 dbacc1b7 240dda90 2d0a4df9     .A!1.......$.M.-
   2fefc:	bfe3873e 4334cff7 e69ad696 f6f7f81a     >.....4C........
   2ff0c:	e196bec1 fa8a26d6 a0c4cf09 f9a6b0dc     .....&..........
   2ff1c:	aafbd4f8 2ef99904 11f7c5b2 fe8baae2     ................
   2ff2c:	0b370e0f fac441fa ce02f4db c11c1ff7     ..7..A..........
   2ff3c:	d4faaedf e8b791bb e4d9ff04 dc05b383     ................
   2ff4c:	bba5562d f99922cd f8a34815 32f2bba7     -V..."...H.....2
   2ff5c:	352fe106 d8e2b7b3 dad9d9ef 29e11f92     ../5...........)
   2ff6c:	36bae506 0edbf91b facfceda a2a416d7     ...6............
   2ff7c:	edbdc551 863db341 a84341be d89e85c2     Q...A.=..AC.....
   2ff8c:	2dd792f8 eed934df 090be014 37a053ae     ...-.4.......S.7
   2ff9c:	d7e204d3 ac14c8f3 84eb9726 e7ce9833     ........&...3...
   2ffac:	eb3df70a 3218dca7 cefdc4d8 83d24ad9     ..=....2.....J..
   2ffbc:	ecb50f2f d5ad1cfc 9b1e22f0 21200201     /........".... !
   2ffcc:	2212dc0b f2c1a1fe aff2e7ac a036cfd1     ..."..........6.
   2ffdc:	ddffd9b4 22862ef4 dfb1c98c 0038f719     ......."......8.
   2ffec:	24bd9000 bdac2cff 503013ed a1dbc49f     ...$.,....0P....
   2fffc:	96c549da cf19052b 111aa1da 1ed6ad0c     .I..+...........
   3000c:	aa0eeaa1 8a1cf2f5 03d0c1d2 bfb6dece     ................
   3001c:	c316acd7 fdab1ff7 039d2de4 3c00a51b     .........-.....<
   3002c:	fee7fcd1 35efdbd7 d8abe19a ae03be1d     .......5........
   3003c:	b8362838 44ecd1e7 4736f6a6 ba09d7b2     8(6....D..6G....
   3004c:	b811eaf9 b2cad1f7 ff14bfb4 29e130e4     .............0.)
   3005c:	1f1f39ac bb1cbd1b f98df357 a60339e7     .9......W....9..
   3006c:	e4f90711 b6fd9212 2bee9eef 003e3615     ...........+.6>.
   3007c:	04dba549 36f9f843 3caedd93 231b1602     I...C..6...<...#
   3008c:	5614b0f7 2c51f7f9 bb23a6d2 41d1b0de     ...V..Q,..#....A
   3009c:	fb17f407 98bd17af 0394068e b53b91b4     ..............;.
   300ac:	14d693f7 3dc32af6 9136b98b 34ca02ec     .....*.=..6....4
   300bc:	e643b5f2 c33628d1 0ea848f7 8f103ad2     ..C..(6..H...:..
   300cc:	c20fdd15 f90916ce c6c90b15 a0149eb5     ................
   300dc:	95142415 21962ad8 18d9389d cccd21d1     .$...*.!.8...!..
   300ec:	30ff83a7 511bb1e9 322ab8f8 b79823fa     ...0...Q..*2.#..
   300fc:	aeeea2f9 0bee0afd 3522dc34 3cf847fe     ........4."5.G.<
   3010c:	0139c2fd 05f6f5ce fb042b1f 060d2005     ..9......+... ..
   3011c:	0212fefc 11d72515 0e0d043c ee112d44     .....%..<...D-..
   3012c:	09370f27 29ea2606 d712ff0d 1dde38f3     '.7..&.).....8..
   3013c:	1ef659f9 e124f923 19e7e5ed f705f207     .Y..#.$.........
   3014c:	fcefe60f 03f03e0f 005102e0 0408ca16     .....>....Q.....
   3015c:	0bf312de 02e9fbca 16defad5 07c0d7e2     ................
   3016c:	41efe5f1 fd3f4b0a 1bfcb90f 1de345fa     ...A.K?......E..
   3017c:	2a210212 2f18041c dd0c03c1 dd1efa37     ..!*.../....7...
   3018c:	440a0907 c8f7f2ff 2fcfe0e4 190a1205     ...D......./....
   3019c:	1dced0fc bf02e2fc 1ff20418 16fbfc09     ................
   301ac:	080f0ee9 e7f7eefe 09dce9d5 0ded13ec     ................
   301bc:	1b1bf11a 20fc1f11 07e4e4fd f813e523     ....... ....#...
   301cc:	ed12071b eff217fc 02f0bc10 cc0127e8     .............'..
   301dc:	170ddd2a 0127ebc8 f9e01306 26fff01e     *.....'........&
   301ec:	191a0fe2 01e91ee3 2d1c2f28 e62f1de1     ........(/.-../.
   301fc:	4811ea28 3ae3dd1b 09f3dbf2 2a1ef309     (..H...:.......*
   3020c:	e2fa110f 85f8fded 28f6d0f1 dd3602f2     ...........(..6.
   3021c:	f6b911ec e6f2f223 1ffbffd9 4eeb58ec     ....#........X.N
   3022c:	d118c350 ba3b1a10 e618210e 0e08fff6     P.....;..!......
   3023c:	e00c2e50 e0e6fa18 27bac50d 1d9e16fb     P..........'....
   3024c:	01fbd81a 0d2a0cb3 360a029d 32141217     ......*....6...2
   3025c:	103d2dba 25050df1 3c36eb0f 1e06bbe5     .-=....%..6<....
   3026c:	2417050f e70ce4fe 02ecfb08 d0e8fdfb     ...$............
   3027c:	fb17ec05 ff00d609 f3e322dd 17dd0411     ........."......
   3028c:	350cfc1b fbfe21e5 fdda02f0 d1f0002c     ...5.!......,...
   3029c:	08d9ecef 080720e0 faeec4c2 be34eba7     ..... ........4.
   302ac:	aed6d0f7 c8d00ca5 f1090cd5 ddbd0dd9     ................
   302bc:	c6eb1a23 dc7af220 30f409ff f731a5e3     #... .z....0..1.
   302cc:	ccfbb5dc ee190f11 cdd34bed 09d80ccf     .........K......
   302dc:	d205de32 6023e981 fc910afe b2f12304     2.....#`.....#..
   302ec:	200bde01 e12ebbbc 0ae8ce60 c90c53c2     ... ....`....S..
   302fc:	fcf8fe31 04e6e502 27f042e9 ffdce795     1........B.'....
   3030c:	ba4518c8 e9b9e221 5c0c4f1f 0c13fdad     ..E.!....O.\....
   3031c:	bdf0a2b8 dc8a0e02 ee22e039 75af0d1f     ........9."....u
   3032c:	df0a0f46 060d00d5 500cf81c e0191902     F..........P....
   3033c:	f8ebd3d5 f019282b 2d1adff3 08f84522     ....+(.....-"E..
   3034c:	99b110fd 2a1e11e0 0015f32c eac219d5     .......*,.......
   3035c:	d1f5b4ef 14d9fb34 fde1fd09 2c0eca0c     ....4..........,
   3036c:	130dd9f8 cb25061a 09f4c7c6 f300fad5     ......%.........
   3037c:	23cf132a 12baf709 d3e301e2 ddcde8f1     *..#............
   3038c:	151bb2d3 05f7e0eb 0afff7d3 e4b90fed     ................
   3039c:	22e5f1ff e0310a32 08b7ec17 f1eef225     ..."2.1.....%...
   303ac:	0c0bfb03 c6c30d18 dfe3ece2 e0daddd6     ................
   303bc:	dad7f403 10301626 0eddf614 0dc71711     ....&.0.........
   303cc:	05091116 0c29e71a e903a409 30e8f5c9     ......)........0
   303dc:	29d61f18 34fcf652 b7268db7 f3e6ddc5     ...)R..4..&.....
   303ec:	f529ebe7 042b05ef 0720fd26 470807fa     ..)...+.&. ....G
   303fc:	f7020cbb 1e4035fe bd25e84a 2af42e0d     .....5@.J.%....*
   3040c:	221e3c36 ff1c09d2 a6a73def ee0cfd49     6<.".....=..I...
   3041c:	db231014 39a6cacc 200784b3 9c98b4a8     ..#....9... ....
   3042c:	4cd63dde 3dbf13ab 0d1bd0fc c7a63235     .=.L...=....52..
   3043c:	c9f2d5f8 1aa945f6 33b20096 a80946e3     .....E.....3.F..
   3044c:	ffd7e0f5 d7ba5023 f638d4f8 01fc8e0c     ....#P....8.....
   3045c:	14bd08b4 420810c9 f824c531 f4095f8a     .......B1.$.._..
   3046c:	1b0ea246 5e878bb6 9f4bf115 2cd8a7eb     F......^..K....,
   3047c:	f4a4c504 d3b7e6a9 9a4b481f 3ba09114     .........HK....;
   3048c:	f9d9b41f 38930951 e4bdff22 e6b8188c     ....Q..8".......
   3049c:	1148cd0f 1e41022c aa0c38d7 2fa7efaf     ..H.,.A..8...../
   304ac:	8ce9d85a ee975633 f291c70f fbf0dfc0     Z...3V..........
   304bc:	df9d87a4 0d28d4e9 d0bab2cb 898bbba2     ......(.........
   304cc:	c09d14cc a71f9a32 0d87da36 67c640ff     ....2...6....@.g
   304dc:	c9bc1fc7 13278bcf 30a7a617 39d93fd5     ......'....0.?.9
   304ec:	aac0ca17 99cd95a5 f79a99ed 84af94ca     ................
   304fc:	a79308de bf5392cd ca31fcde a4f9eab2     ......S...1.....
   3050c:	95fa38ab 3f8d9c27 fe1d1017 b0b330ae     .8..'..?.....0..
   3051c:	2688a4bd 89e7309f e9bfd0ea f19fe2e8     ...&.0..........
   3052c:	b68dff14 c9f8ec36 a18d9ced f7839191     ....6...........
   3053c:	b2c7db01 0f01c925 41c9ab83 dbbb9812     ....%......A....
   3054c:	bb0f87d4 9e2a1148 bf0d22a6 b4b30ab5     ....H.*.."......
   3055c:	0ad2adfa 18e6d8d4 d14cb490 e717c5f2     ..........L.....
   3056c:	2f184b0e 360d9e2c aebe4627 aed9dff3     .K./,..6'F......
   3057c:	f1d24729 3bf823d1 d2f0b327 fcc446a2     )G...#.;'....F..
   3058c:	47d7fdd7 fec808a5 daeed8cc 11104057     ...G........W@..
   3059c:	3992f642 49b8e187 e8ab9fd1 8938c5cf     B..9...I......8.
   305ac:	fe563b49 144c3642 d1913df6 b49133dd     I;V.B6L..=...3..
   305bc:	5e8a144e 2f27df3e 2922ee1f 4210040e     N..^>.'/..")...B
   305cc:	0c459bf6 47ea01ab 880bf28c 4015dc5e     ..E....G....^..@
   305dc:	3f828e28 c21ea2ac b10bd736 cc060184     (..?....6.......
   305ec:	f8159c46 afe14f17 1fa64bb7 1212b336     F....O...K..6...
   305fc:	06d49915 9a0f2cea 50b3c7c1 cacac892     .....,.....P....
   3060c:	d92ee5d6 0ab387d1 b31c23ba c30822b5     .........#..."..
   3061c:	ccee44fb 378fa0db 9f2648b3 041e03f6     .D.....7.H&.....
   3062c:	8a8d8e08 f5b38106 bc083846 0c9d0ead     ........F8......
   3063c:	b1ef3ef9 b2d2f718 30930347 91e2e941     .>......G..0A...
   3064c:	e507ffcc ff9cdd0c c1e3fd15 370e9418     ...............7
   3065c:	dba6dd9d aeea9f89 0a2040fe e415209f     .........@ .. ..
   3066c:	11a5f0e8 84a1c7ca 1f9d9c87 83e52bc4     .............+..
   3067c:	27e94218 d2b61ac5 a4912252 cab4a2aa     .B.'....R"......
   3068c:	50acb288 fca02208 2041cbfd bb29243a     ...P."....A :$).
   3069c:	910a06ea a2c942b2 f5c911f0 1d87b790     .....B..........
   306ac:	2ce50012 25bc343a aff2efee 1b933411     ...,:4.%.....4..
   306bc:	d48fc925 4af8a787 81e9ae2a c515939b     %......J*.......
   306cc:	ba81e4a4 d3172488 ab8e12a4 9f02314c     .....$......L1..
   306dc:	98a20640 fbca2703 8e14fcb0 b6d3d30d     @....'..........
   306ec:	8c10af46 3c97bccd 91b7caa9 fc2c90ad     F......<......,.
   306fc:	fe042e20 acf0d0dc ec15c11b 343babd4      .............;4
   3070c:	1ea6f4ee 8dc4cd21 19d2b714 1dd339f4     ....!........9..
   3071c:	2bb56332 a24044e1 d0bb60c5 0fe0cda4     2c.+.D@..`......
   3072c:	520908ab 49c7fe8b 38c73128 b342ebe1     ...R...I(1.8..B.
   3073c:	360cfca1 ec1401f5 9415fdb2 b52601ca     ...6..........&.
   3074c:	be97093d d156df3d b41d0916 d4229da3     =...=.V.......".
   3075c:	16da24df 45e104c1 05394231 10e7c5f4     .$.....E1B9.....
   3076c:	cd25f2aa 04da0418 ff4b09c4 c8bcebc7     ..%.......K.....
   3077c:	e230e3a8 c1f6b01c f5cdf342 ee18babe     ..0.....B.......
   3078c:	00abb8f3 a4e62c39 0faba8ce fbe1dee9     ....9,..........
   3079c:	88b5ff14 a7cef1b8 d0d835d4 b3e03eb5     .........5...>..
   307ac:	b22536c4 cd2d11fd c2d519b0 2b16bfe3     .6%...-........+
   307bc:	1ac422a9 0ed9cfbb c8eedab5 3714edc0     .".............7
   307cc:	0696bf95 e3f1d3a6 1dd83310 2525e9ca     .........3....%%
   307dc:	3aa520c0 eb3ad1d4 ce07c3c7 c816a3a6     . .:..:.........
   307ec:	b43741f6 eeeafe82 d81622ad b5e7cadb     .A7......"......
   307fc:	0ebaaf32 1da3ade5 fd00bd1b 0ea12010     2............ ..
   3080c:	cbf9e026 12bdc1a2 2eeb3cce 0c2f23bb     &........<...#/.
   3081c:	e32632b7 dcadcda9 0bdedcd7 ceb3bf45     .2&.........E...
   3082c:	371c51c7 d3e0c3db 0c0f82bd e6ecc7f4     .Q.7............
   3083c:	df9cc103 e8812487 a812dc1d 9e07460e     .....$.......F..
   3084c:	40b9d1c0 d7b3e717 dffaf6ce 04e0bf09     ...@............
   3085c:	0d2dcfde d7e5b920 c9d50206 0fe22af6     ..-. ........*..
   3086c:	35bdca82 b0a2c90f 0ad1d2d8 32ddb416     ...5...........2
   3087c:	c6b0e719 e6afda1f 09a2dc02 edd2db03     ................
   3088c:	28fd25ca d1fccbd1 09a6e0aa 219fcdd1     .%.(...........!
   3089c:	20ea3502 17ed03be a6df10b4 1550ea1c     .5. ..........P.
   308ac:	d3a34f33 ff28a2ec cb1b22de b00d2209     3O....(.."..."..
   308bc:	0bff012c d9f72b2e c128c69f e6d7420e     ,....+....(..B..
   308cc:	b1c1ae13 88ed94dd 08bfc2ee 2cd7c4d9     ...............,
   308dc:	ee2238d2 33022a25 acb6e0a7 4318d829     .8".%*.3....)..C
   308ec:	f1f7a520 11ceb412 09c2efc1 d92d9aea      .............-.
   308fc:	fef9f2da b331e6c6 b9f88a19 3697f096     ......1........6
   3090c:	1e2e1936 c2d4e5a0 22f91de7 032ee723     6.........."#...
   3091c:	f8b13112 a2a632ac 14d1a611 1a3cc9dc     .1...2........<.
   3092c:	f60c3394 291735be b2eef7e7 27fe2dd6     .3...5.).....-.'
   3093c:	da001901 27c2f127 17e3c6ef a50d01ec     ....'..'........
   3094c:	a4bc8bce a7bbcaae dfb9cf83 0fcfdaa5     ................
   3095c:	b5a9c347 f2fe9618 f6c596ad 3dabbbed     G..............=
   3096c:	09cc1a15 f4fed20b 08d85119 adb334f5     .........Q...4..
   3097c:	04f34613 1cf21d26 d90ac410 3d05cbf0     .F..&..........=
   3098c:	3240a3b7 1bc5e6a9 dbd72fa1 00311da7     ..@2...../....1.
   3099c:	1da1c51b bfe0eb13 3abae7af 2bda34f2     ...........:.4.+
   309ac:	3436fe12 11d9dada f0cefd0c cfc60ee2     ..64............
   309bc:	dd3802e4 3d89021a 1fbd03a8 b104018d     ..8....=........
   309cc:	de1c13fc 1b90c803 e0d0ca25 c2c136c5     ........%....6..
   309dc:	a333a30a c2a544e9 08f3ca05 b6c9ab10     ..3..D..........
   309ec:	dfdc1ca4 9820f42e bb28d8be 0afedadb     ...... ...(.....
   309fc:	1bba10f6 cafe36a7 a70fd6c1 fc18d6ca     .....6..........
   30a0c:	3d342ad1 e113313e f494bce7 0b3d26dd     .*4=>1.......&=.
   30a1c:	be0c0ef5 af203304 10bb41c2 25fd250a     .....3 ..A...%.%
   30a2c:	d202fc28 1e2b2ac9 3ba226f1 24c0223c     (....*+..&.;<".$
   30a3c:	34be400f dafdae22 1ad21bfb 10b225e2     .@.4"........%..
   30a4c:	f2c1b83f e0d2a6c9 cc3917af c69c03ba     ?.........9.....
   30a5c:	a1a3d225 0bd18c14 2e94aef8 5124a9d7     %.............$Q
   30a6c:	1af9040d b9d62817 103aa4e5 17ce9b31     .....(....:.1...
   30a7c:	1f36fad6 d7e7d8f8 b617d5c1 27fa0ac3     ..6............'
   30a8c:	ddebbc07 abd322bf cdfb28fc d2d72013     ....."...(... ..
   30a9c:	b4d5bac6 16ccdc44 0ba8d427 c3e71f3f     ....D...'...?...
   30aac:	d61a1de7 a78dd7e5 32e8b7ea 0d1cf9c6     ...........2....
   30abc:	e9ecceb8 c59b382b 1a15e3ec bbc426a3     ....+8.......&..
   30acc:	0b0ded2e 3e36c43e 22d9c1ee abadcac9     ....>.6>..."....
   30adc:	98f1d7f4 06c226d8 f7e6b016 0d1f0416     .....&..........
   30aec:	d70ed4dd 02c6ce16 c6d31623 0419b118     ........#.......
   30afc:	0ffb3ff4 ffc667f7 d42cf8fd 2c9adbe2     .?...g....,....,
   30b0c:	f32ba9f6 ff4133f0 ac2503bb 15a3c6e6     ..+..3A...%.....
   30b1c:	fc178fd4 cf28f6d3 d91208a8 caf4160c     ......(.........
   30b2c:	c39a1a06 e93f2544 f3c6a544 cc4195f0     ....D%?.D.....A.
   30b3c:	fce9b727 f8ccc62a 2bb6a3d2 fceaf0f7     '...*......+....
   30b4c:	de44cea1 dad240ef 41ce1814 ce2df1fa     ..D..@.....A..-.
   30b5c:	1dbb9cbb a6c6faf0 b7e400af a4240e20     ............ .$.
   30b6c:	2b8994f3 b9e5e7b6 26d01125 ba25c522     ...+....%..&".%.
   30b7c:	e2b4d83f b7b0b038 ef1faaa8 06023a11     ?...8........:..
   30b8c:	25d94a07 ae02c227 ef0b28cc 4fba3530     .J.%'....(..05.O
   30b9c:	a7d7adac fd3b3bf6 a227cacf f8f20ee8     .....;;...'.....
   30bac:	c23504ed bca82c3c 009a9318 0007d5ef     ..5.<,..........
   30bbc:	c49fc30c eaa7d340 d89126ae beb49aab     ....@....&......
   30bcc:	f30627b7 ecd80bcd beb8bec4 f42113a4     .'............!.
   30bdc:	e2eecb19 3d1ee31f fcf6c1d0 c8eef4a0     .......=........
   30bec:	e9b5fca7 17031a14 07c837fa 5b30241c     .........7...$0[
   30bfc:	ed1c31f2 dad535db cb0a1ee4 0f07bceb     .1...5..........
   30c0c:	0ecb0fa4 2c17ce36 b5cf26b5 24c91b9e     ....6..,.&.....$
   30c1c:	3a972e05 fbab34e8 258765c8 43c232c4     ...:.4...e.%.2.C
   30c2c:	af0bf440 17bc2405 f614920b bfb5e0de     @....$..........
   30c3c:	d4c724a3 03efd30d eac3050e fa28e0d4     .$............(.
   30c4c:	10e3d6c7 e788f3ac e05eee0e 0ae935ea     ..........^..5..
   30c5c:	dee7fecb 30ffeb50 97e9ffe7 e438fef7     ....P..0......8.
   30c6c:	aba3adcd fcfbe3c1 37a93127 a9a7aa1f     ........'1.7....
   30c7c:	1e0403be ad192a47 951ef09a f2e9ac2f     ....G*....../...
   30c8c:	b400e499 cfe2d7a7 fdc8f9f0 33359e0f     ..............53
   30c9c:	f4df29ab bfd233c2 27eedac7 da0f21a6     .)...3.....'.!..
   30cac:	8c23f0af eeefc723 11951aaa ef3430d4     ..#.#........04.
   30cbc:	14b92388 dd17009b e3009705 28c2cc04     .#.............(
   30ccc:	cfc4f7b5 dad1bb06 9c22f4b2 f3f74fca     .........."..O..
   30cdc:	13c50b31 13cfc1f5 1890e2ac dca6bbf9     1...............
   30cec:	16bb3c12 09193300 fd10c0c6 20f62e04     .<...3......... 
   30cfc:	d2e9a742 e2dcaba5 81b3b242 459212e7     B.......B......E
   30d0c:	293ce797 0f3608e8 10a7972e cfb90fa1     ..<)..6.........
   30d1c:	0b141809 2a2eef91 54ba0d10 2127d2f9     .......*...T..'!
   30d2c:	c1cee608 e0afef9b c304d20c 04328525     ............%.2.
   30d3c:	07be3b1e d433fb43 bc22e907 0d17ed28     .;..C.3...".(...
   30d4c:	d0c02092 ba10fa20 3730c793 0a23d40d     . .. .....07..#.
   30d5c:	27e941ee f2b20f30 8dd6c6d0 bd3eefd3     .A.'0.........>.
   30d6c:	01e2390a 391cd810 f6feaff3 f9febeae     .9.....9........
   30d7c:	ee2a0798 eef20e16 fdf2d7cc 1af70311     ..*.............
   30d8c:	0c21ae02 e90d1cf0 0d11d60e f6c9d2cf     ..!.............
   30d9c:	d8efbbfb e5d211e9 1ce31020 c6e4e6e1     ........ .......
   30dac:	241ef502 e6fb36f5 dfefd60d f018fad8     ...$.6..........
   30dbc:	f90316e2 cdc20504 dcdceae7 e20c1020     ............ ...
   30dcc:	fa27f0eb d8e1e4e0 f219f2dc d9e000f2     ..'.............
   30ddc:	f60e0c0e fbe5ea05 dad5caf9 08b2d507     ................
   30dec:	2f26e3ca ea1cfc07 210feafc ff15ee13     ..&/.......!....
   30dfc:	2ec212df d5fa0cde e3e5d8fd 2105e810     ...............!
   30e0c:	010beccc e7eff30e 070502fb debae8f6     ................
   30e1c:	e72204b2 b5f11e22 d915ebee dfebe70f     .."."...........
   30e2c:	31df05e7 d83120b7 e2e8cfc6 0d3df8bf     ...1. 1.......=.
   30e3c:	f2f5fedb fae703e9 dd04e71c b0ff14ff     ................
   30e4c:	f22b0fd7 33ed05ee 0b19d9ee fc0a094d     ..+....3....M...
   30e5c:	e6fb27ed 09ebf713 12e1c2f9 05f709ef     .'..............
   30e6c:	da03f9de 0aef0919 13cf261e 09e71ae2     .........&......
   30e7c:	26e3d607 bee21cf9 dbf6f710 d6effb07     ...&............
   30e8c:	fef8e804 03f5fef6 ff14e0f9 dcec0815     ................
   30e9c:	0215fdee e4e0e417 cff0eeeb 0de8d0f5     ................
   30eac:	e6fbea07 f3d1d6d5 280be1d4 0531f5f3     ...........(..1.
   30ebc:	d40feaf2 f2f0f5df 04dc0308 04f1ebbb     ................
   30ecc:	d4e3b9a5 e4d30527 120ef0bc f1fdf3f7     ....'...........
   30edc:	1debebbb c2aae1ea e5f608c9 c2fc0df8     ................
   30eec:	e0e5ffde fafbd505 09a4fa14 a6e417bf     ................
   30efc:	c5c0bae6 13fdc4db fa2719d7 f9dd0f08     ..........'.....
   30f0c:	d5ebc903 bd20f009 dbd7d2e5 1cdf29f9     ...... ......)..
   30f1c:	1103f610 13f5e22e 09370aef 01dc0721     ..........7.!...
   30f2c:	09e9d2ef d8f817ec f51f0cf3 1504f9e5     ................
   30f3c:	23e81f16 f5c82dd0 defad704 cf1320a1     ...#.-....... ..
   30f4c:	f215fe04 d5eeea14 1d060511 fe010d03     ................
   30f5c:	e30a1001 eccc0413 e705d7f1 ff10ec09     ................
   30f6c:	f4e812e3 f80df913 da03e7ba e3e1edca     ................
   30f7c:	1204e604 0bf7f6f1 eef900b9 11f1fdc5     ................
   30f8c:	e7cafac9 f3fdddfa c4f3e6ca de06000e     ................
   30f9c:	f1b9edf9 e3ec0528 16bfe115 e7a9e9fd     ....(...........
   30fac:	febc18de e1171ff8 f4e7f21a d6e3d612     ................
   30fbc:	d5d00301 ce0afeb3 e9cfb1f8 fef4fac6     ................
   30fcc:	d3cfd9de d2edbd29 d3bce10f b30fe418     ....)...........
   30fdc:	ef3c0bf5 0a0d22f1 fe1d1c10 e3fd213f     ..<.."......?!..
   30fec:	e80936ec 09a9f737 2ef5f9c2 fc3dd043     .6..7.......C.=.
   30ffc:	c119fd37 30eb02e4 18011203 17091596     7......0........
   3100c:	dce3f9f1 0600202b ffee211e 284f09dd     ....+ ...!....O(
   3101c:	f42a0717 cbc4ecf4 0f05e1e8 d2102231     ..*.........1"..
   3102c:	e837e718 14f825de f0d626fc 33002325     ..7..%...&..%#.3
   3103c:	e4be1017 f3e39bdb 1ad4f23e 07012707     ........>....'..
   3104c:	ec12cf27 eff8d11f f8d1ddc9 fd1ea7dc     '...............
   3105c:	9df9d8e2 1ded162a 16e5f2f6 190cd7fe     ....*...........
   3106c:	0121001c bae1ecda 32ff059f 280a31c6     ..!........2.1.(
   3107c:	aefcfa1a 04f7f315 e7270017 bdd4eff5     ..........'.....
   3108c:	d5f41411 14fc81fe 1d290104 d41b27fb     ..........)..'..
   3109c:	fbfe01fc 38d215de 16132dc8 ac02c5a8     .......8.-......
   310ac:	36fdafab a8b7d251 242c5262 22e2c208     ...6Q...bR,$..."
   310bc:	c73738ff 34e4150e 39c101d7 2e0ecde8     .87....4...9....
   310cc:	f7c80315 7567a725 9f272c9c a3001e9d     ....%.gu.,'.....
   310dc:	efba2510 2926dcaa d5a6ffaa afdcd13e     .%....&)....>...
   310ec:	8d6c3f50 c38988b2 be438d83 e3b4c302     P?l.......C.....
   310fc:	2cbb2ae7 a4684bf8 21c5b8e5 8ed3d9a0     .*.,.Kh....!....
   3110c:	a3b5b666 2ac43af4 b2ebd913 9c11be81     f....:.*........
   3111c:	540ccb43 ff2d1c68 89c51dbd f78fb19b     C..Th.-.........
   3112c:	e53bb23d 37aa482b 0d055ff5 fe16408d     =.;.+H.7._...@..
   3113c:	41d22bbb 93494145 16972b42 e84fe4f5     .+.AEAI.B+....O.
   3114c:	e992f8c6 adce20af d5915639 e81c03d8     ..... ..9V......
   3115c:	593e85ce ebfd281c a9ce519e 2e593d35     ..>Y.(...Q..5=Y.
   3116c:	08cb26d8 4555adfd 2e9bc015 83e3c8e6     .&....UE........
   3117c:	de26b423 88c09916 e70a0854 07373609     #.&.....T....67.
   3118c:	99a45800 2f5edfb0 5bdefc97 a0960207     .X....^/...[....
   3119c:	e7751ef8 f8b5b39a 8fe7e4b8 9cb666be     ..u..........f..
   311ac:	a3c3d521 a729053d 9b5b17fe d656af0d     !...=.)...[...V.
   311bc:	d34a8993 dc428c63 c5a90d1d 162012dc     ..J.c.B....... .
   311cc:	ffa505b3 49f2c410 0f989cac d855a3b5     .......I......U.
   311dc:	0b552be7 229451a5 e92c33eb d6110500     .+U..Q.".3,.....
   311ec:	d25bc447 8e724dd0 aa6524d1 f2fd0b8c     G.[..Mr..$e.....
   311fc:	9234f875 af0252ca a5ed8d22 8bd8f12d     u.4..R.."...-...
   3120c:	cad80604 42399461 a0bbe0c1 1abae361     ....a.9B....a...
   3121c:	d63f3ac6 a1b4af94 0a9eb6b4 e750ce06     .:?...........P.
   3122c:	054b3b4d bbe52dbd fd3bd6c8 b4fbb18c     M;K..-....;.....
   3123c:	1eb1dcf1 ca4db03b 1dc4fd4e ec9745e6     ....;.M.N....E..
   3124c:	bb589729 d7bcf535 bef28c55 fa2d63d0     ).X.5...U....c-.
   3125c:	c7a401d7 d544ed51 30c4cfac 26da4721     ....Q.D....0!G.&
   3126c:	cc4736fa 86f453cd b938cf35 5f24d40f     .6G..S..5.8...$_
   3127c:	fe86c45c acf9272d 18023ef2 adf24d53     \...-'...>..SM..
   3128c:	5ada99e7 274920e1 c4b8d0fb ca3d872d     ...Z. I'....-.=.
   3129c:	06e2022e b79af3e1 27fa44d9 e44eaa4c     .........D.'L.N.
   312ac:	d14e5c11 becfbe53 afa43962 a5ede33a     .\N.S...b9..:...
   312bc:	42a8fcc7 9f353ed5 aed6dda4 50f3c9de     ...B.>5........P
   312cc:	20af08a3 d4660e83 e43b6b94 dfc8e1ba     ... ..f..k;.....
   312dc:	bbae01ce 352e1bb5 38db4be9 5313195c     .......5.K.8\..S
   312ec:	68568adf a5e3ce0a a2e5065b 9db2fb8e     ..Vh....[.......
   312fc:	1b108bad a1419826 62882713 06dff7e5     ....&.A..'.b....
   3130c:	ad3193d9 d35cfa18 f43a93c1 5debb302     ..1...\...:....]
   3131c:	effdba23 331dfd00 a114fa3d 9e1b6094     #......3=....`..
   3132c:	f5a30333 1295fcb6 1c63ae8d e6c0be1d     3.........c.....
   3133c:	55c3b208 dee50049 1c94b058 e55445f2     ...UI...X....ET.
   3134c:	cece0b61 3cee3a9b 3e1a1ec1 479726c8     a....:.<...>.&.G
   3135c:	186149ab 3db10ca9 e43a3ec8 e1219a3f     .Ia....=.>:.?.!.
   3136c:	b6fedfd6 3933b8f2 e50a93ff d2eea49f     ......39........
   3137c:	afa2cf23 dcc5cad8 1c9a09ff 0f9820ad     #............ ..
   3138c:	4139c707 f740f39a 182b1cff 96adda35     ..9A..@...+.5...
   3139c:	fc11469e 1135e8a9 5130311d 9fadf935     .F....5..10Q5...
   313ac:	1baef3c5 17f503e3 2a2bee0b d7463551     ..........+*Q5F.
   313bc:	6cfbbc2d d6b937b3 b3a8b2aa f2e4d9c3     -..l.7..........
   313cc:	5925bad6 de3d02f8 0507b92d cce2b0bb     ..%Y..=.-.......
   313dc:	34f0288b c7b7b62b 97c9b313 bd06a3f5     .(.4+...........
   313ec:	97c3ff2c d1f22113 4bceb181 2aaad6d3     ,....!.....K...*
   313fc:	a80ca296 16253b90 9c412ac0 073d11c1     .....;%..*A...=.
   3140c:	0ceb1abc d415f0b8 40ac3808 2527bd2e     .........8.@..'%
   3141c:	f141e522 edd6e042 e4b8a496 2de19d33     ".A.B.......3..-
   3142c:	dd07cd87 391d33e0 1fa32bde 1c0c0cce     .....3.9.+......
   3143c:	bbe5299d a80cdffc 3e12b49f a8f049c1     .).........>.I..
   3144c:	20f73fe4 969e0a0b db12e71d 1437d4a8     .?. ..........7.
   3145c:	cd3ac11b 9d2cfbdd 86a923ad 0c9c00eb     ..:...,..#......
   3146c:	5cccabb8 f2162eef bc07d34a 20a0cb0b     ...\....J...... 
   3147c:	ece4fbf2 e91eaeae 0be8c3a9 b8112d06     .............-..
   3148c:	bc3aabf3 161c8d23 e4052628 240c073d     ..:.#...(&..=..$
   3149c:	40f21aa8 22dc0b08 adb73592 c0122046     ...@...".5..F ..
   314ac:	12eec633 fe0fa9cf 92b70a23 b114c8b0     3.......#.......
   314bc:	9d00d31e be281bdb ee49d3df 0f19e72b     ......(...I.+...
   314cc:	efeeec0b 35f1c6f2 231abfc0 03eba1fe     .......5...#....
   314dc:	3632112c 56fd2efa 00ac951b b71fc588     ,.26...V........
   314ec:	e300d1b1 249cf420 35c7e934 acdf31b2     .... ..$4..5.1..
   314fc:	ef00059d 4ef8eff9 24d7e741 ba1c16b5     .......NA..$....
   3150c:	9907a7ac 09f1419e cbb9c943 1a9ad0ae     .....A..C.......
   3151c:	110d36bf d0c4c7ea d0e416c9 093ba6a8     .6............;.
   3152c:	cf252126 33b5cf33 e8b9d105 da2f849c     &!%.3..3....../.
   3153c:	3f2fe725 231fc5e3 f44aa71f f313145a     %./?...#..J.Z...
   3154c:	fe99371f 08f293fd 01c4b0e7 b30190d8     .7..............
   3155c:	e5f5a7c2 e933c7f0 45a7cd34 cfffc024     ......3.4..E$...
   3156c:	c5c1c5ca 9be69dcb 1b144b37 dc0b101e     ........7K......
   3157c:	32c5c91b aefbe3c5 c3bedcf7 182ae3c4     ...2..........*.
   3158c:	afcf1510 04fff903 2dff11ca b8e2f3e2     ...........-....
   3159c:	bcdcb98f ae08ea36 0dfebad5 d8162e25     ....6.......%...
   315ac:	390813b7 afdafa02 b00bac23 c9b30a0b     ...9....#.......
   315bc:	b3b7a9c9 dcf7c849 b41c0e26 13b0c4c2     ....I...&.......
   315cc:	a3dcf9b3 d523a6b4 f4f09bae c6bfe0e5     ......#.........
   315dc:	1f2e484c d6f9aeda 27d52a08 36b4bedc     LH.......*.'...6
   315ec:	def0d430 43cd27d6 a59aa7a6 072611ed     0....'.C......&.
   315fc:	fac405e5 47cbd6d6 ba20f68d fdbdaee6     .......G.. .....
   3160c:	26fdf2de 1df5dae5 0124ccf9 0d251124     ...&......$.$.%.
   3161c:	beaed3e9 3728c5f3 5a16ad37 18581fb0     ......(77..Z..X.
   3162c:	1946e8d1 c9ecdc18 2fd5c4ad 0500c1af     ..F......../....
   3163c:	8efba5c5 e604ce38 dd24b0ac c540f439     ....8.....$.9.@.
   3164c:	d7cc2fbb 89f0e4ce c7b1ef15 06ac0934     ./..........4...
   3165c:	3dc8ccce a6eaba3c 8d33ff3d 2cbe08d9     ...=<...=.3....,
   3166c:	1af6c1ca c92b0fba e9c8c73f 26fe2416     ......+.?....$.&
   3167c:	b1f51c9d aa9723c5 2802bc8f 3ebe9dc7     .....#.....(...>
   3168c:	9b1888bf 3026cdcf f9bd012f 198abfcd     ......&0/.......
   3169c:	e8a7258e f419f5ec 99a0bb38 c9a81634     .%......8...4...
   316ac:	fe0bada8 ebee1cf0 890b08d1 e038dde6     ..............8.
   316bc:	07080798 9931fee6 ea2fb9da 16e9ec18     ......1.../.....
   316cc:	2824262c 37d4ccda f4d996ce 06cd0ae5     ,&$(...7........
   316dc:	a9fc310c 17d4fc16 e8e2c9c4 fdaaece5     .1..............
   316ec:	ed31d736 b7dbdbc1 d621d5b7 debbe0fd     6.1.......!.....
   316fc:	c2a7cfd1 0a32fcda 13f110b7 dbc0e1ce     ......2.........
   3170c:	21cdce0d 17aef5ff 9fbbd6fa 02d3f8d6     ...!............
   3171c:	b3d3babe c2241eec 99fcd7ee d1db281c     ......$......(..
   3172c:	cb07baf9 01f90011 e712beaf f7e0aadd     ................
   3173c:	cbe9f508 a61bbee9 df101afa 01b8b79a     ................
   3174c:	b79cd71e e1f0d412 2635c6eb 0de6ceb8     ..........5&....
   3175c:	ee0e02bd dcf9f93c 9f1eeeec 9ced11e4     ....<...........
   3176c:	291381c7 cbae37b7 bd0f2bec c8d2a136     ...).7...+..6...
   3177c:	a9fbabb8 fe38f4a9 bc2311b9 ecb3d6e2     ......8...#.....
   3178c:	23022d04 f293fdf7 e4dcbad4 d1d0020b     .-.#............
   3179c:	84afa309 e71baebc 1bdecac0 e603fcd7     ................
   317ac:	05ead6e3 c3fdabee 38b8d108 0500c8d1     ...........8....
   317bc:	eed7def9 010cb9c8 e1fbb4be a4ebc0b6     ................
   317cc:	1ce035b2 aac3e604 ca31fcb1 b3cbe0b9     .5........1.....
   317dc:	f904d8d5 ed310efa 0a11d4d9 d6bfe5f9     ......1.........
   317ec:	fcd2d209 e4c12f03 edca11c5 eca6de10     ...../..........
   317fc:	32ee1c0d 11c9380a 92caef0a dafda5a6     ...2.8..........
   3180c:	ccd4b0e5 e3ceb3f0 aaeedb12 0de89726     ............&...
   3181c:	e433ab08 f09fc101 ec090fa4 a8e0d8ee     ..3.............
   3182c:	02b012cf 13c7f6c9 ca940521 d0c03ec7     ........!....>..
   3183c:	da8bcc01 0bc7b615 b39fd0b8 ade39ae9     ................
   3184c:	01fa1be3 f5d60320 f1a21fbf d9e0f3d2     .... ...........
   3185c:	40a1a59e ef19d8d0 3fe5a616 c916c3bb     ...@.......?....
   3186c:	37e6e0bf 08c4d69c bed6ce37 bfcc9ab4     ...7....7.......
   3187c:	d3c3d120 ce19dac8 281db808 471412a4      ..........(...G
   3188c:	d5b80ab1 e6dca3d4 9314e108 d9e83a15     .............:..
   3189c:	9ae7babe 0d8cbb09 f4ddf9f3 dec4b003     ................
   318ac:	d7290dc5 ec011b16 eee4b6e3 b6abe9ca     ..).............
   318bc:	ec34bc13 cdf7acd0 f1b5100d df77e417     ..4...........w.
   318cc:	efeac3ba c516dcd1 d51205b7 a5d745fd     .............E..
   318dc:	f3cfceca 14e2f5ed bddaebe5 ce0a19f5     ................
   318ec:	d9d2f410 a8dccae9 06e1ba20 dff10ac1     ........ .......
   318fc:	b58ef4c8 cea6b405 d794bc0e 15350ac9     ..............5.
   3190c:	f7a8cafd b3f3e9a5 af0c07bb bc9ef1c8     ................
   3191c:	ada5f6e0 b5b9aee8 cfccc6b3 1cf5b7fd     ................
   3192c:	600a9e2c bca49658 c8cc020b f79507e5     ,..`X...........
   3193c:	a3e2cc4d 09fda53a 2c0616ce ddd903ce     M...:......,....
   3194c:	3ae900a3 f0f6e8cd d41de721 e04999c6     ...:....!.....I.
   3195c:	d3ff1cbb f69b2f20 c33c98bf eabbeb3a     .... /....<.:...
   3196c:	b4d6feda c0e3dbab d301f5a5 a5b632ec     .............2..
   3197c:	cae301e5 f494f0c6 a6b4d7f8 94f6989e     ................
   3198c:	3cd1f9da 014eeedc ebf4ff04 c31ec6e7     ...<..N.........
   3199c:	faf2e6b2 c300d638 ad02e5e6 feb8cde8     ....8...........
   319ac:	21e1d8ac c39ef1a2 ab0c87d7 ae390334     ...!........4.9.
   319bc:	37bcc2e3 aef7f64c ad0f6bad 080ae4c1     ...7L....k......
   319cc:	ea35c322 d5300340 e1dad0c4 bff300d1     ".5.@.0.........
   319dc:	bd94f127 1ed3ed2a eafee895 09aaeaa1     '...*...........
   319ec:	8a0fd5dd e4cce6a2 1ee6bc32 f7071d23     ........2...#...
   319fc:	35d734ed 15c8d548 39abe6e5 a5062bfe     .4.5H......9.+..
   31a0c:	c61d3831 fd1f9eb6 1bd1cd45 b7bff71a     18......E.......
   31a1c:	2227a4c2 151094b3 a606f0e0 e5edc846     ..'"........F...
   31a2c:	29b6d816 ccfae807 320cad93 2b15e6df     ...).......2...+
   31a3c:	ccbb351a 2b1047a7 be2416d8 cdedafd7     .5...G.+..$.....
   31a4c:	b6b0c6d8 e922b121 d2e7efb7 054bf3cc     ....!.".......K.
   31a5c:	d6c847b7 ebe4141c e09bdbb7 c5022e37     .G..........7...
   31a6c:	0dc72b48 1b11f8e7 acf9b0fd a916d044     H+..........D...
   31a7c:	d6ed990f 00baa9c4 e5f6a3b5 1ec8f6c4     ................
   31a8c:	2cf109e6 19f0fab5 cbe5e307 c4eed1e5     ...,............
   31a9c:	dee88dc0 04be2408 daa7afcb 0932dbff     .....$........2.
   31aac:	06e4c6e2 b6f81ba3 acf6d0aa 121fa9ca     ................
   31abc:	e40b0d1b ff12e7d9 85130b93 c6101f25     ............%...
   31acc:	22bef616 aff1eedc 020424ca 0c0035f1     ...".....$...5..
   31adc:	0fecb5dd ca23040d e320da3e c1c0f0b9     ......#.>. .....
   31aec:	c3b42244 c435f8cc 13392230 d6e2ccb9     D"....5.0"9.....
   31afc:	2c19bcf6 16d5a144 f4031ae4 d22d07e6     ...,D.........-.
   31b0c:	45be353f f40d33d8 b7cda7d9 92b7cfe6     ?5.E.3..........
   31b1c:	3e04d232 d7d819b4 a45046a9 ad30cc10     2..>.....FP...0.
   31b2c:	f8c6df16 b23cb809 14b50ade 06f6adc4     ......<.........
   31b3c:	4b42bdf1 d73649a9 fb0fb7ed d2fa25ca     ..BK.I6......%..
   31b4c:	2af9d0f0 18eab7ee a11aec50 a9d1cbd5     ...*....P.......
   31b5c:	01c3b796 e8c1fc0d af292ff8 d9cfbf08     ........./).....
   31b6c:	e59cd6e7 dbb7be31 e0b759b4 3cea37bb     ....1....Y...7.<
   31b7c:	113e14f1 be96010d 06d1be94 8be1199b     ..>.............
   31b8c:	299cc312 f732b5e8 26b8e0f0 cd313a33     ...)..2....&3:1.
   31b9c:	dd04dd0e d13ef2b6 22f6cf15 caf4b409     ......>...."....
   31bac:	11aad3bc d4e82419 2dd3451a 210923e6     .....$...E.-.#.!
   31bbc:	b2b6e522 baa40e24 afece401 cf09af52     "...$.......R...
   31bcc:	d8ba3ab1 12d034a6 d91cc239 8103ead4     .:...4..9.......
   31bdc:	44efd134 10d7f51a 20113aaf fe1bb307     4..D.....:. ....
   31bec:	b3fbf8dc c72e9f10 9b07e0a0 24eebce6     ...............$
   31bfc:	3c3f139f cec01baf c626eb25 fb01fdb7     ..?<....%.&.....
   31c0c:	d0912ed2 ea33f8e1 b2afdfba 22cf1908     ......3........"
   31c1c:	efc806e7 b5e515a9 b53eed9a 02b327e6     ..........>..'..
   31c2c:	cefb2bf2 e802b231 2930efb6 35090b49     .+..1.....0)I..5
   31c3c:	f6e7e3cf c8bf3e2f f344cfc2 c8afd307     ..../>....D.....
   31c4c:	efb6b0fc eb0bff2c 1ac4dfb0 f99dc2d6     ....,...........
   31c5c:	05b4fbbc 0dfbd8de 0c8ffc13 a7cfe926     ............&...
   31c6c:	0746d726 fc34aef4 3529cf15 cdd202b1     &.F...4...)5....
   31c7c:	2c9826f6 cebdc22a f9c7feeb c4a4a3be     .&.,*...........
   31c8c:	e1a8f6c4 3adb26a2 32c4e3b3 1aa9e509     .....&.:...2....
   31c9c:	b21da64b 33adf0ac e704ee26 0da7b32a     K......3&...*...
   31cac:	43a7ee11 f734bac8 dff10b26 c2d4d4b1     ...C..4.&.......
   31cbc:	b7112c39 efe32d05 1cf4dd20 17f120f4     9,...-.. .... ..
   31ccc:	ddc6f022 c722e217 ebd9f5db aaa1cdc9     ".....".........
   31cdc:	92d8b9ed 2bf6b30a d4bebbe0 c7c4c3b6     .......+........
   31cec:	e8390e1a 1e21cbde 41cca9e2 c5311e00     ..9...!....A..1.
   31cfc:	3fef4adc fbb932ec f6b4f6d7 07d842b9     .J.?.2.......B..
   31d0c:	b6cdeeb1 d6d719c9 b3caab18 15e62117     .............!..
   31d1c:	23ad02ab 05130ff0 0ff216f1 edf8faf7     ...#............
   31d2c:	f701ec00 0607170a 0ce9c2c8 c52f0eea     ............../.
   31d3c:	c9fc0500 ef1a00f5 e0080101 04f10df9     ................
   31d4c:	06f806f4 0c12f906 30ec000a 0316fe18     ...........0....
   31d5c:	07f5edf7 2f0506e9 cdf1110a d1ec02e2     ......./........
   31d6c:	f1f1e6fb 1cedc1f2 0cf4110e 01f9eb01     ................
   31d7c:	eedde0f9 ed1e1604 feefd810 e14f2d13     .............-O.
   31d8c:	f5dbfe01 feee0108 26004a1a 1e150124     .........J.&$...
   31d9c:	161ee9e0 eefde9ec 15cd0a1f 1ae20afe     ................
   31dac:	cd120324 e81de0e0 1b08de0f 3c273905     $............9'<
   31dbc:	fd111932 08011403 271cfee3 c82726fb     2..........'.&'.
   31dcc:	f3daf8fe 24fb021b 2fefd82e fecc1d0d     .......$.../....
   31ddc:	1f2122f1 ef2a1f21 fe1e0431 29060fbf     ."!.!.*.1......)
   31dec:	19d3d2e8 1bf8fd10 f518f606 3608d1ec     ...............6
   31dfc:	f90ac006 c338ddfd e217b30c d0fefda9     ......8.........
   31e0c:	15130938 e5f6ccc7 b62cf313 fdc3d907     8.........,.....
   31e1c:	df070507 2109ea07 d90416d7 0addf7fd     .......!........
   31e2c:	1202e1f8 cc10011c caeaeb05 02eb0305     ................
   31e3c:	08eb00ea b7a61c0c 141febef f1e3d1d5     ................
   31e4c:	bfedd3e8 e8210608 05dcfc05 fccbff0f     ......!.........
   31e5c:	d60413eb fb3ffb1e e8ccc9e5 1ed6e5cf     ......?.........
   31e6c:	fbdfff01 12d1f100 fb04dabd cde52003     ............. ..
   31e7c:	eafc0db6 0c1205f1 1307dafe 16f1efe6     ................
   31e8c:	1c1c07e4 0f182b0c effa0b14 f3efded9     .....+..........
   31e9c:	200f1eeb 04f7f3ec ed0511df 07e63020     ... ........ 0..
   31eac:	0af9e705 f80dcb3c 0526c4fc 0d141926     ....<.....&.&...
   31ebc:	0d030301 3307fa30 f4fee338 23fe05fa     ....0..38......#
   31ecc:	170cdcce d5f0d024 21e8ff38 ec11dbd3     ....$...8..!....
   31edc:	1a39e0f0 cf0d0f04 a1d005e4 fa1ffeb0     ..9.............
   31eec:	1ff12521 912708ec 12e0faf7 0d2206fc     !%....'.......".
   31efc:	beeee5f8 c3ba0339 0a16c12c d9f20806     ....9...,.......
   31f0c:	eaef12cb dcfacaf8 0235e8d4 1d90f6b4     ..........5.....
   31f1c:	17d722b9 f8f6fef6 d9f2ede6 f1f417c9     ."..............
   31f2c:	daabd913 15f9d2f7 ce14d2c7 81ed01f1     ................
   31f3c:	21f4dbe7 098a3212 db0e13d3 03e5c7fb     ...!.2..........
   31f4c:	43c7dff7 e7ff0613 1312fd20 2209f503     ...C.... ......"
   31f5c:	fe2b2cdd f6c001af fb0a20a7 0aeef722     .,+...... .."...
   31f6c:	f71ce62b 16fb222a 25b51ce2 0532d703     +...*".....%..2.
   31f7c:	1c341cf4 350d09fe 08f0010c fdf91a14     ..4....5........
   31f8c:	f801131f 34feec13 f81b18e5 2efce71e     .......4........
   31f9c:	fd1f073c e9030bfa 2d092021 f3182cf7     <.......! .-.,..
   31fac:	fb00fff3 f7260322 1209121c 041d01d7     ....".&.........
   31fbc:	0411fe02 d712070d ed01fc16 d514042b     ............+...
   31fcc:	10fdfbe4 06361704 11ddf90b 12260228     ......6.....(.&.
   31fdc:	0b1af511 0dc7ef12 0e042cf8 0a40f70a     .........,....@.
   31fec:	0af8e202 18092cc5 e5ee1b1c 01120b09     .....,..........
   31ffc:	dff9e5f1 033ef9e2 23f6f514 0fdd2304     ......>....#.#..
   3200c:	2404150e ef0cf81b 36d01411 f7011e36     ...$.......66...
   3201c:	0fd6fa2e 3dcdf3fa 0b2b1503 2305ebe2     .......=..+....#
   3202c:	fe1d1bd6 05f22135 272cbd31 3f09201d     ....5!..1.,'. .?
   3203c:	28c434b3 1308251e f020192e 1a084337     .4.(.%.... .7C..
   3204c:	f519fc08 43f314dc 0a1f070c 211f150a     .......C.......!
   3205c:	e3e900f5 14f82119 1f540414 f91f1d13     .....!....T.....
   3206c:	02170432 0fea0a22 090b13e4 f0fe170c     2..."...........
   3207c:	1df21efd ed02f806 0fde130c e10af0f2     ................
   3208c:	e7d9e814 ef18f12a f12f2df1 e4f90015     ....*....-/.....
   3209c:	f702d1be dffbf502 faf1d506 f115f6e8     ................
   320ac:	2ff8c900 06ff1cfd 3c05004c 02cff406     .../....L..<....
   320bc:	0c43dfee e7f41a0b f8f8cb0a e80b000b     ..C.............
   320cc:	1ae4d4c9 f80afb0b 18fdeaf2 c9c0f90b     ................
   320dc:	ed192d1f ff0bfa38 131507f4 142201f5     .-..8.........".
   320ec:	1eeafcb5 2af30428 e517f10e 020bea10     ....(..*........
   320fc:	d40308f1 080a1ce4 07010117 f4d9210f     .............!..
   3210c:	f416e1ff 0405e81d f406ea02 1e0df204     ................
   3211c:	0ef41708 1df51809 fee805ea 3b0400ec     ...............;
   3212c:	03fdf602 1310c9d6 1002db11 22f9e7d7     ..............."
   3213c:	d4f2daa6 eb1e15e5 27fb1bea 9cf10b45     ...........'E...
   3214c:	03a6e70e 192af3dc eff3f5ff ec0ae81a     ......*.........
   3215c:	f73ef42a 91bad6a7 df9f26f8 b1e1d9dc     *.>......&......
   3216c:	f7fa1fe6 0f0603ea 1518ecdb 01fffe0f     ................
   3217c:	e90a03f4 f7e7e0ce fbf91610 e00b050a     ................
   3218c:	ff0d1613 b2d405ed 02eec9ae f0d1fe00     ................
   3219c:	13dbdfeb d4e21110 17dee903 d408b5fe     ................
   321ac:	06ef0205 f914eefe 03060115 ecdafe1f     ................
   321bc:	1ecfcdf2 f9c8e7e9 200feef1 fa08d518     ........... ....
   321cc:	e3e5c715 33f311ea f50ecbf4 1e06fddf     .......3........
   321dc:	fc08f902 e7f1e400 f70e0efd 22e2fc02     ..............."
   321ec:	12f615ea 24cdf9e0 e7fbfb14 f8ffc7ca     .......$........
   321fc:	f10dfd08 12b2fdc9 b3caf6db fdfd08d1     ................
   3220c:	de090f01 bfcd082e 28d8c902 3f21de01     ...........(..!?
   3221c:	5a202e01 e5fbf30e fc18ecd9 f1fcd8d2     .. Z............
   3222c:	e6b6fd0d cde9ed0e 513d32b6 21a3dc12     .........2=Q...!
   3223c:	e5f515df 0dc3eaff aff7d9c3 0efa1de6     ................
   3224c:	1c04eaeb 0126f032 fac021b4 d2f002c4     ....2.&..!......
   3225c:	03f912e8 cadf26fd e5dccae9 d4272f02     .....&......./'.
   3226c:	3de8a1d3 0bfcb502 e3daf318 45272b0b     ...=.........+'E
   3227c:	001f0927 dcc41541 1dd713e6 f2959bce     '...A...........
   3228c:	42f6fa08 0705cf32 ebddfc1c 1104f142     ...B2.......B...
   3229c:	e038f905 120623ff 030f3008 130d1c45     ..8..#...0..E...
   322ac:	19231e36 02eaf21b 37e517c3 cc0dfa30     6.#........70...
   322bc:	0007f713 1009b6bc 5121fd0f 0c0829d2     ..........!Q.)..
   322cc:	d9f63ccd f7350014 0af90811 f20df3e6     .<....5.........
   322dc:	2411bf07 52ebffeb 1f131109 300f0243     ...$...R....C..0
   322ec:	fd21de13 f2d741ed cbd4e414 ec14181b     ..!..A..........
   322fc:	354413ee 0bf41855 f4c159f1 fbd12cf6     ..D5U....Y...,..
   3230c:	af0b04e0 00210adc 140b811a dc32e411     ......!.......2.
   3231c:	02c23206 0351f81a ef0d1e00 15dc1a3c     .2....Q.....<...
   3232c:	bc0cf9fd 092abded 40fa942d 09f5f700     ......*.-..@....
   3233c:	1911f900 68673507 fa1e0d1f f6984adb     .....5gh.....J..
   3234c:	ab2120c1 ecd30bf1 290e113c f1230f39     . !.....<..)9.#.
   3235c:	1cc61837 0735fb2f 1625fee9 afce2d28     7.../.5...%.(-..
   3236c:	f5ce30f8 0df93a29 f326bb1b d521cadf     .0..):....&...!.
   3237c:	dcfe97cc afe4dcf7 2cf7050a e4f0f3ff     ...........,....
   3238c:	1e2e011b 9b3519f7 17defeee 153fb72a     ......5.....*.?.
   3239c:	0afe04c9 2c1f0ac4 d41729f1 edd8080a     .......,.)......
   323ac:	08beee39 eede01fc 03bdf4ee f2f924fd     9............$..
   323bc:	e70fdeef 071adc15 d8a9e6f0 f60e14f7     ................
   323cc:	28fe0d18 07e91807 f1fb06e9 f6ec37e4     ...(.........7..
   323dc:	0347040d 0ffe2bc0 180cfffd 050b022c     ..G..+......,...
   323ec:	f8e2f5f8 ecdbef02 05c1d6d2 22fe0095     ..............."
   323fc:	e6d8060f 16fff800 f7d80c22 2211f004     ........"......"
   3240c:	ea1c22fa 1f0c2410 f10c0b00 030c42e9     ."...$.......B..
   3241c:	f7eecec6 03c001f3 9cdac3eb 3e2dcde1     ..............->
   3242c:	f21a09c0 b8aa041f fec3f202 ff0447d9     .............G..
   3243c:	00150a1a e74fece9 fafca52f edf527fd     ......O./....'..
   3244c:	0912eec2 03e7e701 eeec3349 81fc124c     ........I3..L...
   3245c:	02d4011a 3317bf19 f3f5dfe9 2afe021f     .......3.......*
   3246c:	f93902f3 3608040b f8c5013d d20113fa     ..9....6=.......
   3247c:	ffacf2f9 dbf82df5 1430f1f6 06030801     .....-....0.....
   3248c:	d7bb2ce7 0913d0f1 23161215 0518fb0e     .,.........#....
   3249c:	f3f6f922 ffc9200f 08182c36 2ef01cc4     ".... ..6,......
   324ac:	f43ac5ff 07bf0020 0ededfff 01fccfe5     ..:. ...........
   324bc:	26cff2e4 850dde8c cbd521db 1b012019     ...&.....!... ..
   324cc:	9b0d0425 ecdad5f9 251506be 12d0fe29     %..........%)...
   324dc:	0be91216 f045b118 07ffe4f8 bb9d370f     ......E......7..
   324ec:	86cfcbd8 1536dc25 ebfffc1d bbf41a28     ....%.6.....(...
   324fc:	02ea1608 f9fffe0a f606f81c 101bdf0a     ................
   3250c:	f318f528 de04140d 1027f4ac 130ddddf     (.........'.....
   3251c:	22042120 e7251829 f3de0d18 0e2afb16      !.").%.......*.
   3252c:	1ef2f9f5 231f0104 0d09140c 34020009     .......#.......4
   3253c:	edf30c71 05d60e28 02ecd01d ea20ff05     q...(......... .
   3254c:	25251700 24341607 f1f311e5 0008dcd2     ..%%..4$........
   3255c:	250526f4 f61b0000 0bfcff0a 0e0701fc     .&.%............
   3256c:	ed1e183a 2c14ebf3 af11eac1 efea0c1d     :......,........
   3257c:	1a07e9fa 00f30116 fddef8bd f628f8ff     ..............(.
   3258c:	58c90aff 180f36f5 0017002e 25f20bf4     ...X.6.........%
   3259c:	0a49fc03 0524faff b0131f0a ff34f2f1     ..I...$.......4.
   325ac:	fdcec839 e5f50321 30ae2fd6 1c03c7e1     9...!..../.0....
   325bc:	1df1231c f2def5f3 f70d07f9 fa0303f8     .#..............
   325cc:	1009d2d0 094bebd0 ec130e2f 1cf513ea     ......K./.......
   325dc:	d1150600 f1e9d514 f3f51b08 fe06ea27     ............'...
   325ec:	1907162f 07061101 13fe06ef 181ff406     /...............
   325fc:	e9fc16f8 ebeb16dd e9feea56 e3f90306     ........V.......
   3260c:	ff0c05f3 d807e305 1b1602da 13f6f0fa     ................
   3261c:	cbfcd015 fced00e2 fa0c28b0 01150e00     .........(......
   3262c:	d1f900fa 18f911ee f302f32d 30ee0be4     ........-......0
   3263c:	e405dc02 be09f3da 16fc07dc 13da0e18     ................
   3264c:	fb020699 2affff27 25d6d105 12fd021a     ....'..*...%....
   3265c:	0bfdff50 2df804f2 eb2818fe 121ef1da     P......-..(.....
   3266c:	ec212cbd 0feb1f18 01e9cc29 29f7351d     .,!.....)....5.)
   3267c:	26ee2cdd 00000000 ffffa0ca 00000004     .,.&............
   3268c:	00001f40 0e059f0f 0ce7f9fe b2300511     @.............0.
   3269c:	f3fd1403 001135d5 c50dd035 68d22e11     .....5..5......h
   326ac:	d22903f2 4815ccf1 070b54ff 1be0cee4     ..)....H.T......
   326bc:	ea2000e6 fe8f04eb dab53ff5 def2d72c     .. ......?..,...
   326cc:	22f9d28c d214bbd9 e7c2ca13 ddce2adf     ...".........*..
   326dc:	cf14e711 f5c72910 ee0e04fc 4a0300e4     .....).........J
   326ec:	09111498 04e0dd22 3fd42109 b01becfd     ...."....!.?....
   326fc:	fdedfd03 05d645f3 0cf0cdfb b3f0183a     .....E......:...
   3270c:	0cc30801 e748fbee 0e148edc e8fe21c5     ......H......!..
   3271c:	81d0c65d 45b52ef7 ca4106f3 46febbeb     ]......E..A....F
   3272c:	15de58d4 0fc414ec 0cf81913 1cf7e214     .X..............
   3273c:	17034133 13ebd8df e616f1fd 2f01501f     3A...........P./
   3274c:	ca1119f3 32efd1e7 f1fb04ff 1d34e721     .......2....!.4.
   3275c:	b9fb08d7 d40f2014 06dafd78 33033d0a     ..... ..x....=.3
   3276c:	b7c1d8e6 332d3dfc 0bdd05fb fec62dea     .....=-3.....-..
   3277c:	d9ebb728 2a37a407 192afbd6 812032f8     (.....7*..*..2 .
   3278c:	0f05d844 32e96a10 e392e1ae fd053216     D....j.2.....2..
   3279c:	02d1c4f2 dddc160c f7dc82e7 29fcc72a     ............*..)
   327ac:	40271de8 a8032ef7 2e1525f3 f30545da     ..'@.....%...E..
   327bc:	e7ddc1d3 9b1803e6 e6f4ed06 dce0fa22     ............"...
   327cc:	1be0e2eb 003af50b f5e8dc1a f000ecf0     ......:.........
   327dc:	252db8fe e4ec0ce8 c09febe3 dcf12e33     ..-%........3...
   327ec:	fbe8e913 edd2eeb9 f41bab13 185b0e22     ............".[.
   327fc:	14ddca13 fc12090e 20388b1e f0021bbc     ..........8 ....
   3280c:	8393dc02 faef4136 ebfff90c 15f1d3c0     ....6A..........
   3281c:	0e10dd05 2440ec0c 2af5e2e6 bf201f0d     ......@$...*.. .
   3282c:	eb29033d caff1bc3 81dbcd18 f7f4383c     =.).........<8..
   3283c:	ef12dfef 3501b5b2 19fbf403 2233c2f6     .......5......3"
   3284c:	2cebe5d4 d2fd0de2 e1210a35 deea12c2     ...,....5.!.....
   3285c:	b102e40b d9eb1841 05fed0fa 1923a2b4     ....A.........#.
   3286c:	e4ef06e9 5468e8e2 d3d9bee2 be0d12f8     ......hT........
   3287c:	341ad506 ffedf6da ccf5e001 17fd21fc     ...4.........!..
   3288c:	01f202f8 3c0b02c0 09e5f811 5360a5fc     .......<......`S
   3289c:	1bf9d19b b22c1af7 02200a16 f5e126fe     ......,... ..&..
   328ac:	b7eebc15 34f33714 f0d9d3f1 4221e18c     .....7.4......!B
   328bc:	e5dbd42c 39538cfc 3608e981 c0d410db     ,.....S9...6....
   328cc:	17e8110b e9df12ed de26b5c0 03bf011d     ..........&.....
   328dc:	b7c4e5fc 5122bfc3 e6cfc21c 183db0c2     ......"Q......=.
   328ec:	2420f8a8 f1a323dc 16ec1ae9 ffe1d626     .. $.#......&...
   328fc:	5326f0c5 850fcaf4 e3cbb7ff 1f1209d9     ..&S............
   3290c:	cddda714 522bd2de 3402ebb8 db90fde4     ......+R...4....
   3291c:	f0fe230d b1dcf102 29f2fb86 eb0c0110     .#.........)....
   3292c:	ef87b0e8 ddeb2ac5 b311d61c 3d0814b9     .....*.........=
   3293c:	121807ea 3699eadd cbf85707 b2eda6f9     .......6.W......
   3294c:	19d60fa8 8104f52b 0dc0b9ff f92c2da3     ....+........-,.
   3295c:	f4028e0a 2ae838e4 10180df6 13ebeffa     .....8.*........
   3296c:	c50f4331 ec1aebd7 f3090efc f0eaff42     1C..........B...
   3297c:	0b2ff515 254df7d8 2b2cedf3 05ca1ff2     ../...M%..,+....
   3298c:	f62702fc e7fff114 05081d22 222ffe0b     ..'....."...../"
   3299c:	eb2fd903 020c122a ce1d0b2b 3451dbe9     ../.*...+.....Q4
   329ac:	322b11fa 14f8e3ee 1602ef01 ded6f200     ..+2............
   329bc:	d5df11ae d709ee10 2fc0e0b3 9d03dbd7     .........../....
   329cc:	d7b7fcfe e4d53fca e7098d04 ed090230     .....?......0...
   329dc:	14cc0a1c 054af50d 130dd1c4 0a171ec9     ......J.........
   329ec:	de960933 f9f80f1f ed2f0907 2e24f2a2     3........./...$.
   329fc:	fb0c190c cd1ad02d 35ca2113 c9121306     ....-....!.5....
   32a0c:	0b1aabe5 ff1d45b3 88edde32 27c6140b     .....E..2......'
   32a1c:	db1c161d 1a1381dd 171b3cec 17252ada     .........<...*%.
   32a2c:	f827ecf0 3fd3ed10 01e02bd7 d7f9cf33     ..'....?.+..3...
   32a3c:	3fe53fcf dd29ddd1 43f4ca14 c9f30412     .?.?..)....C....
   32a4c:	d103e20a 0302cfe1 071b1c18 c381f3fb     ................
   32a5c:	fabe4701 e6eca719 3553d098 a5019de4     .G........S5....
   32a6c:	d1cfe909 131213e7 f9f0a61f caf9ecf9     ................
   32a7c:	fb060c2e fc0908f2 201611b3 13e9d616     ........... ....
   32a8c:	3922f3ee e8f010ef eae2f6fe 001513fa     .."9............
   32a9c:	fbf0b207 d711d914 09cffa11 dd31e10d     ..............1.
   32aac:	1e0995d8 100222eb dff4c414 2de82a1a     .....".......*.-
   32abc:	cafa0cec 23fdfce3 faf0f31c 1a244509     .......#.....E$.
   32acc:	e7fdecf1 1f13f1f4 0704f1ea f90a0bf6     ................
   32adc:	ccf401f9 0bfb1306 eee6f5ed 2cedffc5     ...............,
   32aec:	fefcf120 06d00cf1 f12331eb d9f7f9ff      ........1#.....
   32afc:	cd0afb75 0ff7dbbe d5e8edf2 e9153f41     u...........A?..
   32b0c:	cae2190a e1c90a19 ea04eaee 04d8dfde     ................
   32b1c:	023655fc bf0afcea c9000a7f 19ec17cb     .U6.............
   32b2c:	b2fdc9e5 e0046247 d3cbf000 0eb8fe07     ....Gb..........
   32b3c:	f1fcd101 01b5af0e d8344633 cd0409fe     ........3F4.....
   32b4c:	b9f31e7d f00f2bd6 db0fc5ee fa184159     }....+......YA..
   32b5c:	cdd9d807 2af006ff e9f4ccf2 0db0d7eb     .......*........
   32b6c:	f92c3612 e7060ce4 edbd1659 0a0653bc     .6,.....Y....S..
   32b7c:	d614f1d5 0b07ff47 ece8d30f 1cf608d5     ....G...........
   32b8c:	f7e7d7f4 3e3ea1fd 26d4c1d1 8d0f0014     ......>>...&....
   32b9c:	0729e20d 04142bd2 8ed1c024 1ff04d0c     ..)..+..$....M..
   32bac:	d2152a06 08e9a3e1 f4f735d9 69fbe69a     .*.......5.....i
   32bbc:	c22dde98 e9b7f8f8 b9c5582b d4209af9     ..-.....+X.... .
   32bcc:	2b0bbad5 dbec03f1 ba05dd10 0afbdcd8     ...+............
   32bdc:	faf43cd3 32bed7da 081033ed dbb2fffa     .<.....2.3......
   32bec:	f89b62fa 0ff2ab09 4c4ce6b7 90f3baca     .b........LL....
   32bfc:	dcd9fffc f6180e2b cdedb0d6 aab88947     ....+.......G...
   32c0c:	0ff13a22 811b121c 5ff824cc 25ec0c17     ":.......$._...%
   32c1c:	2444affe 19ee02dd b8f0030f e40df33e     ..D$........>...
   32c2c:	def7deca f81ad510 e1051811 e6eb1201     ................
   32c3c:	130ada31 e7f91908 ffde11d9 f8163609     1............6..
   32c4c:	1da9e8eb 2dd53fdd ddd7e72e f647ee0d     .....?.-......G.
   32c5c:	52d8380b f5eb13e3 280dbd1c e5f724f9     .8.R.......(.$..
   32c6c:	0dd11fcb ed0f0812 18c8d6ef 10d410f6     ................
   32c7c:	e8f1bcfd e8482513 45af2718 ddeff6de     .....%H..'.E....
   32c8c:	1f1d81c8 c3000eda efd91af5 b9ed0efe     ................
   32c9c:	2117d012 04e1e909 f108cb15 cf08d6fc     ...!............
   32cac:	45aa2314 99f5ca05 161d81dc aeffe2ae     .#.E............
   32cbc:	9bf7dd23 0dfd0f02 df0ee9f0 fefbb0fb     #...............
   32ccc:	e6ff2ed4 02a3d8dd d8f7d2f5 ef0cf419     ................
   32cdc:	c802119a 020ecc12 0df89d2d e81ce2d3     ........-.......
   32cec:	9e4c0018 24fc2958 29e1f3e8 ef824320     ..L.X).$...) C..
   32cfc:	b5e8f210 ec2f06f0 fbfc0cd7 2aecf5f2     ....../........*
   32d0c:	210fd041 250c25d4 813d1b0c 2cbfe367     A..!.%.%..=.g..,
   32d1c:	07ff28fe e2be6211 d8e818fb f345070a     .(...b........E.
   32d2c:	0fc7ea07 3302f8f4 cb21af26 512831be     .......3&.!..1(Q
   32d3c:	c92b23d9 21a4f056 f1d572d4 01d3200e     .#+.V..!.r... ..
   32d4c:	e9030bfa cf100601 efd7dc1b fe052213     ............."..
   32d5c:	d2efd302 2f033ad0 e4ff17ba f8bf1930     .....:./....0...
   32d6c:	eeca51d4 00e507ed 081f23fd 0cdeeef2     .Q.......#......
   32d7c:	d2020666 efe8fce1 dde2efc8 f401223e     f...........>"..
   32d8c:	ebcaeb0a e3d20724 fafede02 0de70be8     ....$...........
   32d9c:	ed231e10 0cee1009 c813f87f f10e0fc6     ..#.............
   32dac:	aba7f4de d70e3e51 eeffeb04 efda1437     ....Q>......7...
   32dbc:	100ef2e3 0fe4f2e1 d73c2118 f4e3f8f5     .........!<.....
   32dcc:	c4120974 e9fa33d3 ceb5ddc5 e5263c31     t....3......1<&.
   32ddc:	e9f0e1f5 dbb50a56 1a0ef6f3 15d1e6fd     ....V...........
   32dec:	082b1810 e10418ed e315fd54 0c0b40cd     ..+.....T....@..
   32dfc:	e5c6cdef ef2b251e e3fd13fe d2b21242     .....%+.....B...
   32e0c:	080302ec 429f3eab 071752d2 b0e80a8c     .....>.B.R......
   32e1c:	2f3518dd 81fb4fcd e24ce8d3 30dc910b     ..5/.O....L....0
   32e2c:	3933f31d 9cf12ffd 8efd96aa 064e0db1     ..39./........N.
   32e3c:	97942ebe dff33244 0193a8c9 02ff04b3     ....D2..........
   32e4c:	ac189a5d 2b99e32e f44093d4 89b71ee3     ]......+..@.....
   32e5c:	27acf055 a8e2c2cd 5d241803 f71000a4     U..'......$]....
   32e6c:	0e9b2c18 4e9422a7 2e31c9d0 4a8faa98     .,...".N..1....J
   32e7c:	2a2913f7 c2fb3402 cfce1a5b 519306d8     ..)*.4..[......Q
   32e8c:	8caaa3bb 3750e84d 78e8c999 59f55daa     ....M.P7...x.].Y
   32e9c:	0ec3b79c b51ca80b 8db3ddf0 150b18b2     ................
   32eac:	8b0e9fc7 3624d408 06eefcdc fa11e316     ......$6........
   32ebc:	06f5f3e6 0300f8ff 019feff2 0c2124e6     .............$!.
   32ecc:	01a5f2e4 e8a629c1 ee05e621 2bfdeefd     .....)..!......+
   32edc:	0af503d6 e8f4fbfb fdfe0ff9 f114cfd5     ................
   32eec:	e6d7efe6 f2eb2b09 06dbf5f7 2b03f581     .....+.........+
   32efc:	23f1c112 04f8d0e0 120c33fc ddaeee16     ...#.....3......
   32f0c:	fcc02e0c fc10cf0a 0538cbee add8c3ef     ..........8.....
   32f1c:	0bf3d71f 3e25b6c2 14ece01f a4c5cc24     ......%>....$...
   32f2c:	15030408 fb1502fc 220d16d4 1f04d636     ..........."6...
   32f3c:	2f23da11 e5f6e6d8 cd280611 1729ed12     ..#/......(...).
   32f4c:	0d13d60d 0132f303 18e0f3e1 e3e60f02     ......2.........
   32f5c:	f9fdcf4b 030537be 9dc6d2ac e903fe12     K....7..........
   32f6c:	d3c3c711 fcfae9e6 ec0d9402 f4520826     ............&.R.
   32f7c:	52f2080f d0c91ee3 1922a6d7 ed164bdb     ...R......"..K..
   32f8c:	eef7e6ca 9102e715 f534c40f f20ff638     ..........4.8...
   32f9c:	200ac5f8 cc13e011 7fd9061f cdb50703     ... ............
   32fac:	131deda2 c7fff3fb 2d3ad8fc c516f1f8     ..........:-....
   32fbc:	e0310b16 0614f656 35f753f1 e5a5e0cc     ..1.V....S.5....
   32fcc:	3b17e908 f2d8d2ff e0e834db e3138c2b     ...;.....4..+...
   32fdc:	4e2ef70b 1d28d6bd f1202811 faf82a2f     ...N..(..( ./*..
   32fec:	21025d17 ed2f673f 3506efed 9edc9c20     .].!?g/....5 ...
   32ffc:	c2595a89 4c26a091 f5cee195 5186be8a     .ZY...&L.......Q
   3300c:	0555cc82 cbcf0ec3 d1cd52f8 c5e0b7a9     ..U......R......
   3301c:	b553a2c4 022e13e6 2eb0b7f2 8152580a     ..S..........XR.
   3302c:	afc86612 9200e749 1342acfd 22b0e143     .f..I.....B.C.."
   3303c:	c79a3fba 998565f3 0a3651f4 c727b4a1     .?...e...Q6...'.
   3304c:	529bb6da 0796a600 d835c154 b6ebdfd1     ...R....T.5.....
   3305c:	1102e0d8 4ab33cb9 bbd2139c 048a4c41     .....<.J....AL..
   3306c:	bf1f2b23 a5059c83 c0a1ff22 cd33b290     #+......".....3.
   3307c:	cecfef48 f4a0f1e8 5033f7a6 50be145a     H.........3PZ..P
   3308c:	5ce5373b 0ccdd6bc cb18200c b6daec08     ;7.\..... ......
   3309c:	ecea293e ef04ebff f82bacfd 12eb1927     >)........+.'...
   330ac:	ad1dfa00 1b04e8f5 fdf40af8 fac6b0f5     ................
   330bc:	c4112724 a7d40907 0ce82926 0b0600f3     $'......&)......
   330cc:	202187c4 d1080108 81f30904 f8ec1315     ..! ............
   330dc:	f708cefa cbe5a405 06fa1b22 b2130ef3     ........".......
   330ec:	0a02fae3 17ea1a09 12e7c6fb e81808f6     ................
   330fc:	fdee02f1 0be7301f f8f6c8fe f5dedd0f     .....0..........
   3310c:	e4fcf40e c70dea0a f904d9e4 ebfa09cb     ................
   3311c:	b1d5c811 13e71cfc e809ffe4 19ffd601     ................
   3312c:	0cf621e0 fbfcdcf9 080913fd e0d2fd03     .!..............
   3313c:	19f818cd 07f4e522 24fcdebe ce1aecba     ...."......$....
   3314c:	dfcc0201 dade2404 07f9d11a ce08e624     .....$......$...
   3315c:	1bdb0c19 ff0f0300 1922d6bc 07fbfe11     ..........".....
   3316c:	07e5f505 f6111202 01e10e04 00e010f1     ................
   3317c:	02f5e806 ef1ae61e 18d7040d e720ef03     .............. .
   3318c:	0f1d8104 09fd0fe5 94d8dc03 0bfb2319     .............#..
   3319c:	fcfd0408 1b0de6d6 f5f8fef6 31060cf2     ...............1
   331ac:	e715f1f1 0dfce80a e9fb16fc df02ea07     ................
   331bc:	e5ff0004 f7ebf400 ff07e807 0d02d4ec     ................
   331cc:	f50b02ee b5c91cd7 b9f82d39 42bff2ba     ........9-.....B
   331dc:	8eccb94c d7ea4a90 a549eb5c ebcc488b     L....J..\.I..H..
   331ec:	e51d48d2 8905caa1 37d88d42 fdb64f50     .H......B..7PO..
   331fc:	39c50c96 bd9c12d8 515b8e3e 55c7beb8     ...9....>.[Q...U
   3320c:	eef44442 b7960de8 ac2fc4f3 8ae74995     BD......../..I..
   3321c:	e116a3a7 b3d430f7 44d6f7c2 2bb14990     .....0.....D.I.+
   3322c:	d31990b7 04969b43 da2f8150 17c8f1ac     ....C...P./.....
   3323c:	8c9f5b86 43bb17e2 ea3e8649 2eaa238a     .[.....CI.>..#..
   3324c:	0cfb418f c4f3b0cd 001d942f c70c4c0b     .A....../....L..
   3325c:	a2e12588 dc5ea1a1 13f84c3e 17ed9862     .%....^.>L..b...
   3326c:	ddfd0456 1519f503 4009f70c ead8f5f5     V..........@....
   3327c:	061a091b d9f41505 ce20efd4 f910364b     .......... .K6..
   3328c:	e9b6dffe 4f2d0298 0304b431 3af32796     ......-O1....'.:
   3329c:	eff5f8fd f4b3d1fa f1fa3303 b1fed2e9     .........3......
   332ac:	f01dfae7 efe2024d db16d605 5742b8aa     ....M.........BW
   332bc:	1011e832 ffc7fbb1 fdfa000b ff81ed04     2...............
   332cc:	04e125e2 fe1bba24 3114dae7 dde4cc05     .%..$......1....
   332dc:	d40ed72f 1d32f6cf 0629ef30 deced1c0     /.....2.0.).....
   332ec:	01f9d0fd eaaded0f ff021ca4 0009cd27     ............'...
   332fc:	4301f6ee c60ff5d6 01ff132b fbee3ffa     ...C....+....?..
   3330c:	1925a533 1eebc7b6 1e2c0deb d4810408     3.%.......,.....
   3331c:	d1ba2c10 eff6e618 2a0dcfb9 e820d0d9     .,.........*.. .
   3332c:	c3ebf208 03fe1708 e812f003 05c9dfe5     ................
   3333c:	f704201e f0c40b0a ffd725e4 f6f6e80e     . .......%......
   3334c:	2ef7f2b4 c006fada e8d605f9 eafc2f1b     ............./..
   3335c:	f301d607 cad2f90c e4071e11 eff0ef09     ................
   3336c:	0904f1c1 0c11fdfa 03e3fdda fafa14e5     ................
   3337c:	e5de13fb 03d01917 1506f210 f7f1161a     ................
   3338c:	f0f91f12 e9010019 1912e2d8 000bed04     ................
   3339c:	f4c0fe01 ec1d1e0b 0bf5f705 15e918de     ................
   333ac:	fa0ef217 0016e5c5 3502082f f19fc5e0     ......../..5....
   333bc:	ff1018a7 dfdfca0b 3fc9f598 ac1fd6cf     ...........?....
   333cc:	09d706f3 d7f054eb dcfb8120 d11dddbc     .....T.. .......
   333dc:	0bcd242a dcc7bd09 0516e491 e414a803     *$..............
   333ec:	04d9d8eb cef4d6d6 e929fc1b 22f4142b     ..........).+.."
   333fc:	230bf2df c0f5d1ab cbfff920 d5c3e410     ...#.... .......
   3340c:	e602e8bc fb188909 2237d7f3 d703ecb3     ..........7"....
   3341c:	e422030e 27fae860 19052104 a5d3d3fe     ..".`..'.!......
   3342c:	daf12b24 adffd704 2c1dead3 1507be03     $+.........,....
   3343c:	0550ce1b 2404fdd8 ef0326f0 2809f03e     ..P....$.&..>..(
   3344c:	06ef4002 d312b238 57f34318 d2f94120     .@..8....C.W A..
   3345c:	38f3fcea 102b45fb 18f1dac8 26320cb5     ...8.E+.......2&
   3346c:	dfd61014 cba42df7 e02e031f 01dfffcb     .....-..........
   3347c:	3029f102 25d82423 dbf80dc4 0c0bfb10     ..)0#$.%........
   3348c:	358124c8 af20f209 17a9f2f2 eed148f0     .$.5.. ......H..
   3349c:	0e12c106 e7bee4c3 e7f1fe04 c9ccea16     ................
   334ac:	e7ecdbf7 0531b7c1 eac0d0f0 d7dd041f     ......1.........
   334bc:	e2d4f828 0fdeefe3 0124dfce 16edb026     (.........$.&...
   334cc:	ea0f4708 970d0701 00dfe913 2005e2dd     .G............. 
   334dc:	b7d88ae6 da15f41e a4e60b20 e9f8d9ce     ........ .......
   334ec:	dc20d5f3 03d92632 eb9b0c14 f4c2ad0c     .. .2&..........
   334fc:	e12781db e8a306ee a3204d47 29ed0d0c     ..'.....GM ....)
   3350c:	7c3429e8 fd1ebda9 1aa02e03 d0cffdeb     .)4|............
   3351c:	ede3bf09 fad902b2 9ed89f10 08d09110     ................
   3352c:	8cc54705 27e62d32 fe59f5d5 e0e6091e     .G..2-.'..Y.....
   3353c:	c5f413e8 90d702ab 83edc0ef f917d2c6     ................
   3354c:	e6a2f2a8 f904bef5 e805bef4 919f02be     ................
   3355c:	e2ddf7f7 90f999f7 b11218ae c7db37cf     .............7..
   3356c:	f7d3f4ae d1cadbbb 192af5b9 caffa2f4     ..........*.....
   3357c:	b5a8e124 1ee822b1 162bfba7 cf9cf9eb     $...."....+.....
   3358c:	eaca2cc9 442f120c fafb1704 06df0505     .,..../D........
   3359c:	fd0e0f22 01f91afa fdc101c2 f41bf7fa     "...............
   335ac:	f19dddff 08f62bd3 df13a10e 2137c3fc     .....+........7!
   335bc:	3de82403 e0c70d08 21fbe4f8 f90928dc     .$.=.......!.(..
   335cc:	e496e5ac cc08e208 c7f7d911 13f406d6     ................
   335dc:	fd0aa000 f334ccdb 2ed72708 b2b1ebf1     ......4..'......
   335ec:	0a07f0b9 e514e2ff 0edeb5e8 8100c8de     ................
   335fc:	b625f018 18eceb18 1906f516 edecd2ee     ..%.............
   3360c:	05e8f415 ccebdc16 f8f6f9b0 fd08a300     ................
   3361c:	140bbf25 f4f5fed1 de2f1b0c 25f8e526     %........./.&..%
   3362c:	1eed4c21 d5f70207 2aeb0a28 03faebed     !L......(..*....
   3363c:	1c12dbda f8020800 14f2f2fb fef6f8ea     ................
   3364c:	f624fe05 fbf20216 18fcfbe0 f8e302dc     ..$.............
   3365c:	13f9fe0d d3edd7f5 e9fd0ad7 e809e6f9     ................
   3366c:	150fb71d 19edd9d7 cb490b08 2204e126     ..........I.&.."
   3367c:	15fe50c4 08b509af c62cf4fe e4c6ed0d     .P........,.....
   3368c:	d4c052f6 f1098121 4439cb07 0706e7b4     .R..!.....9D....
   3369c:	d4221df7 01dff724 05f635d6 f9bafd0f     ..".$....5......
   336ac:	bf0dfefc e510f711 fabf2d0f 2efcfb12     .........-......
   336bc:	1531e119 20fef9b5 e40639ed 0cf2fc13     ..1.... .9......
   336cc:	f8e41bdb ea56a713 53b329ed b6dbcfcd     ......V..).S....
   336dc:	2045ac12 c8da28bc c6bfd5d8 000d343e     ..E .(......>4..
   336ec:	f5d1afdd 08031ee3 bad2c905 f919c0f3     ................
   336fc:	47e444e0 b9f5d2c8 e31af941 8ecd1c96     .D.G....A.......
   3370c:	9e27b3e5 ecce734d c712bacd 6024cbd1     ..'.Ms........$`
   3371c:	c9edf7e5 44e2ec88 100754f8 f1aea8c8     .......D.T......
   3372c:	fbde5e66 99fdc7eb 255bf2ca d0f34434     f^........[%4D..
   3373c:	04dea1f6 4d0c03ab e6cbe614 39bec6cb     .......M.......9
   3374c:	ff3f3e3b f281bdce 07a97022 c7f1b017     ;>?....."p......
   3375c:	4e7bf5b8 a5ffb617 33dca9fe 22212db4     ..{N.......3.-!"
   3376c:	e2cccb25 09dec0ef 26070902 caba01ea     %..........&....
   3377c:	0eec28bf daf3c725 3cf3d3b9 9230b0bb     .(..%......<..0.
   3378c:	edf4e0f9 a8e34205 edf8bb08 ee16f6ed     .....B..........
   3379c:	fbf6dd0a f704d60b 2f29dd81 faf3bf13     ..........)/....
   337ac:	39e8f6f1 d00422c5 d127f7f7 dd01393d     ...9."....'.=9..
   337bc:	1a0eefea 085b1ee0 fabed01b 0cfee105     ......[.........
   337cc:	363badc2 f90ac712 10e5d507 e4194bdb     ..;6.........K..
   337dc:	b3f4190d ebc10872 261325ce 166d1f08     ....r....%.&..m.
   337ec:	07e6d000 f1f10c0b 343db2fe f6f9dc29     ..........=4)...
   337fc:	0dc6eccf e92d4ee2 fdd606f5 e1bf5069     .....N-.....iP..
   3380c:	1c00eff7 fbe804f8 fbf812f6 08f3130a     ................
   3381c:	dfed3b34 f0fcf1e0 0b4ee817 f6b7f42d     4;........N.-...
   3382c:	cfeadf0e 2435a8c4 f301d8df e5b230f2     ......5$.....0..
   3383c:	f5260708 1b1fffec dbc23b2f 09f0fcf3     ..&...../;......
   3384c:	f74ce72b 24b1d42e c125fc0f 205e85ba     +.L....$..%...^ 
   3385c:	fc0eecf8 e2810e03 d6322807 d81aee07     .........(2.....
   3386c:	02b13c3c 08000317 2461ee17 29aced0a     <<........a$...)
   3387c:	cf07fd01 13518dd6 c9fefdbd 02c5b40f     ......Q.........
   3388c:	ec0f04f1 b804f10f edda1322 29de2517     ........"....%.)
   3389c:	1d49dbf5 40f7cc12 dfeffdf3 053aebfd     ..I....@......:.
   338ac:	c50fc9de 4848e6ce 20e6cce4 e1cae8e1     ......HH... ....
   338bc:	db0cfef6 b3efc2ed 1487dcf2 8117d8fc     ................
   338cc:	d538e60c eccf2f0f 18f5bf20 202bf5f8     ..8../.. .....+ 
   338dc:	15e9ebed f716f301 fa23ece1 db13dad4     ..........#.....
   338ec:	f7a8df29 dbf206fc cf4e0508 15c4f53a     ).........N.:...
   338fc:	3ae41ceb e31df108 40d500fd 1f14070c     ...:.......@....
   3390c:	0b1ca6cc 0000f1ee bed8d934 fafa19e9     ........4.......
   3391c:	c254fbf3 16cdf63a 1df462e1 13fb46f4     ..T.:....b...F..
   3392c:	2ef20cde 1af2f2f7 1bfef5e1 dcf9e908     ................
   3393c:	e1f0c0fc 0d1a21b1 d400f5db 05d0f24d     .....!......M...
   3394c:	eed95bf4 1a14d2fa 1d1d0bea faf41305     .[..............
   3395c:	02e3141e 1af2f90b e7e7eef7 f11330fc     .............0..
   3396c:	00c21eee f2b40019 ff05dc00 27dfc6d4     ...............'
   3397c:	f42209c4 e1e30f13 c0f42e56 ee06efdb     ..".....V.......
   3398c:	e90ff0ee dc054237 f6cb17e9 23ef06eb     ....7B.........#
   3399c:	e6f0d6f6 28aab7da ff384bf3 dde90e0b     .......(.K8.....
   339ac:	9ac33370 130afae6 dc46dae6 e9091845     p3........F.E...
   339bc:	d3d7f1ff 231ad9c4 fef6e5f9 fc81bf08     .......#........
   339cc:	fe374510 b4fb2bf8 02bc2d48 1f1928ef     .E7..+..H-...(..
   339dc:	144ab902 f6fde12f da000918 1e1ec9c7     ..J./...........
   339ec:	f30ee8f2 381f29e0 4bf506f5 04aafc02     .....).8...K....
   339fc:	e3ef39e3 e001dc06 11ef0aab d416ddef     .9..............
   33a0c:	fddef91d f21911fa f219ab0d f301c0ca     ................
   33a1c:	40d40400 c2a8f91a ebd4e5bf f30ad7db     ...@............
   33a2c:	06cfb7cf c6e8d2da bbf8f503 0ffc0f1e     ................
   33a3c:	1517eaf0 e3d481e4 f2ea290a 98eedef7     .........)......
   33a4c:	e3d7f0a7 041da3e8 efe8b4f1 c6f2cdd5     ................
   33a5c:	b6fb0d15 01f71821 0f07e829 bac08e19     ....!...).......
   33a6c:	eac5272a ec30ea0e 0dffd5c9 0004f6e9     *'....0.........
   33a7c:	e8efae47 26fcf8ed 9e292206 21eddef9     G......&.")....!
   33a8c:	13062910 fd07d5e9 2b151bfe cbab01e9     .).........+....
   33a9c:	fdbc1825 fdee1618 1209cd9b 051ed6d5     %...............
   33aac:	c0d9cf17 def92a07 d71fad11 fdd4f5c6     .....*..........
   33abc:	cd23f0fa ffc5d6ed c2f717d2 e0f6a115     ..#.............
   33acc:	33d4ebda 810edb00 de01edf4 0fee3c03     ...3.........<..
   33adc:	f3f78f0b e8d81ce4 d3e8fd0d f728f00a     ..............(.
   33aec:	f402ea0a 0114f0bd e70fe13a 07d11b20     ........:... ...
   33afc:	d241010b 4b0ed509 13f438f4 03fb3712     ..A....K.8...7..
   33b0c:	ece40907 fb25f818 09dcf31c 14fc0cc6     ......%.........
   33b1c:	b731fc2c 2eda210b 0f2214f7 2aeea7f6     ,.1..!...."....*
   33b2c:	f3e2390f d4210736 17e5fd01 092b1d04     .9..6.!.......+.
   33b3c:	0e22c4f6 160f29ea b8f13227 fae62a2d     .."..)..'2..-*..
   33b4c:	f93907ff 2700deeb 19fc11f1 e30de040     ..9....'....@...
   33b5c:	26fb0aef df3a0814 0a0cdf05 091126cf     ...&..:......&..
   33b6c:	b705db20 1bdc2116 d51bfaf3 31fcba01      ....!.........1
   33b7c:	000435e9 11ee1ff5 130ae9cc 1bef05ef     .5..............
   33b8c:	f4051c0b e6fd07ed fff30fd5 e51a07fb     ................
   33b9c:	ffccd0ea f3d722ea d7f8e405 f4160bd6     ....."..........
   33bac:	06fbe9f3 27cef7f3 ec13ff24 e9de04f1     .......'$.......
   33bbc:	f2d10dc3 db09161a 21b2d8e5 dfe63ad3     ...........!.:..
   33bcc:	ea0b8119 c8dae7fb 2ce6fe0c f6fdeae9     ...........,....
   33bdc:	000eebaf eb06d2ed f1e9d4e8 eefc02e2     ................
   33bec:	c5d90509 2ae910eb 0e11c923 1eecd5bf     .......*#.......
   33bfc:	f1f2d003 b4ece410 f9f9e4d6 ee17d4f0     ................
   33c0c:	c6ef811f 34dcced8 b3191bed 5312c6d7     .......4.......S
   33c1c:	1000f135 3d113fff c20accf8 27000208     5....?.=.......'
   33c2c:	02e723f0 180ee10e 010ac01b 2ccff0c3     .#.............,
   33c3c:	bd2bf616 41fdc90f 16f2211f e61ae73a     ..+....A.!..:...
   33c4c:	11c216dc ef1302fe 43ebdee2 1aec1de5     ...........C....
   33c5c:	0b2bcb21 4afb04da fe02190b 2e04f447     !.+....J....G...
   33c6c:	efe61a17 170de9b8 240cf7eb e386e5ef     ...........$....
   33c7c:	c1e326ee d2fdd20d 1cefeea5 8116b7f6     .&..............
   33c8c:	c9f9d306 e90e25f2 ec0dacfa 11cb0ce3     .....%..........
   33c9c:	e4fa0104 160be8f5 e30e1bef fe06c303     ................
   33cac:	18f10c2b f8f0fc0e ed21ff07 1d100df5     +.........!.....
   33cbc:	1310fffb e808fe0f f1d51216 042ffe10     ............../.
   33ccc:	0502d719 140a2dd3 c518ef20 34ed190d     .....-.. ......4
   33cdc:	fb2413f9 260bdaf3 fe0f2df1 0a1fe0f7     ..$....&.-......
   33cec:	e90a09ef d5f90a0b 0de3f51e fa021606     ................
   33cfc:	f10907e7 171000fa 13d2fcff fff5f9fa     ................
   33d0c:	e502ed0e 0a5813f8 f900e7da e1e319fb     ......X.........
   33d1c:	3002edbd 000dfe0a 051cf2d6 010becc7     ...0............
   33d2c:	f6e115ec 0d10eee0 fbfef413 0f7ffaf2     ................
   33d3c:	23f6d400 e8c6f9fc 3a110992 ecfed737     ...#.......:7...
   33d4c:	2465facf f1e8a7e8 cdecde02 1d4ad912     ..e$..........J.
   33d5c:	f8fbcc06 f275dde7 4cf7c511 c3d5e903     ......u....L....
   33d6c:	5031fcb9 0f13b440 2f7fd5e7 19ecb4cd     ..1P@....../....
   33d7c:	dad50e16 2e59ce01 f9fcf425 e24bcbf1     ......Y.%.....K.
   33d8c:	38dbec05 d6e5e808 552eeeb6 fefa9c52     ...8.......UR...
   33d9c:	1674e90f 49e9e0da ecf014fe 234cd2ff     ..t....I......L#
   33dac:	02f9f00a 8324c933 14c7a3b0 294aaeda     ....3.$.......J)
   33dbc:	a34902d4 de9feea5 5ed387be 230596c8     ..I........^...#
   33dcc:	d60fe4e8 3cc2e69a 98103813 09e6e9ce     .......<.8......
   33ddc:	ee18261e d90e291b 890fbc1f 9011dd1b     .&...)..........
   33dec:	f40cac4e 2fcfe2a3 06e94522 b53bdda3     N....../"E....;.
   33dfc:	1b14f5bc 3ae5c823 a6fa8caf 51313fb7     ....#..:.....?1Q
   33e0c:	30c31d1e 068f30da bb3256f3 e4864e3c     ...0.0...V2.<N..
   33e1c:	a8d809f9 e462e29f ad8c2bde 960ff6a9     ......b..+......
   33e2c:	e43b2a27 9002a6e9 aac8d247 bbc7f381     '*;.....G.......
   33e3c:	382cb748 22a506bd 1d3d0222 dabcd8b2     H.,8..."".=.....
   33e4c:	e602e437 f062df0f 30cfdbf7 d3daf5ed     7.....b....0....
   33e5c:	2732a41a d1f113fa d7b9eda1 fc280e2e     ..2'..........(.
   33e6c:	f981feed f50146de e61fcf2b 062d24dc     .....F..+....$-.
   33e7c:	52d6cbf8 07c5e7e9 113fadfa c6f807e6     ...R......?.....
   33e8c:	d6940bb6 8e16052f 2df1d919 ea22f8d6     ..../......-..".
   33e9c:	1b0fbe13 2d2912a1 fbe7dc06 fce0d3f5     ......)-........
   33eac:	0e1bd0f9 c122acd1 c8e4140b dcef0c12     ......".........
   33ebc:	33381414 1516cf1a 032638fe 2de7fea1     ..83.....8&....-
   33ecc:	08f6e9d1 ead6e625 dd011913 d5068be9     ....%...........
   33edc:	fa2b0c07 19dd081c 3009ff2a 041dd904     ..+.....*..0....
   33eec:	f82c5afc 322fb7e7 251cf7b9 a4ed0e14     .Z,.../2...%....
   33efc:	ebed0f17 ed0d1cf9 ed09c602 2ffd0cf2     .............../
   33f0c:	ac0af502 030df21b e6f429de 501aeac2     .........).....P
   33f1c:	fa2303ce f6810809 c2c53a07 ebf7a320     ..#......:.. ...
   33f2c:	450907a9 a114c7e6 10d6daf4 f6041917     ...E............
   33f3c:	df02fd02 13dbf504 1a012600 10c31006     .........&......
   33f4c:	0ce931f1 f103ee09 1f1f1b9d d60adee3     .1..............
   33f5c:	18b7f204 e402290a f601c503 ccfab913     .....)..........
   33f6c:	07df1a1f bafe150b 2e09edb7 0c09feff     ................
   33f7c:	0fecc9fd edfb0ce7 ebe8fe0c fefd1d14     ................
   33f8c:	f614d504 1cfe2fdc cc19bbdd 1ff8f6c4     ...../..........
   33f9c:	cdfd3400 eedcebf1 28df34eb daf6def0     .4.......4.(....
   33fac:	540ac6e2 c2d604f1 ddc9f6ec 0d0a3522     ...T........"5..
   33fbc:	d923d4e2 3d07fb04 e41620e8 e1dc0cf6     ..#....=. ......
   33fcc:	e5040826 080411fd 063df7d3 06fce2f9     &.........=.....
   33fdc:	edca3abb 21f63df3 f10ee7b1 48d920e2     .:...=.!..... .H
   33fec:	f6df4c13 fdf9f62c 49f23ff7 d23cd2d4     .L..,....?.I..<.
   33ffc:	3e1ce6dd c2dc2f44 d6fe3307 38e338fc     ...>D/...3...8.8
   3400c:	e735f6cc 70eeefec d4d72eef f0d5fd28     ..5....p....(...
   3401c:	55f26ad2 cc47eeab 72e6ebfe 8e81571c     .j.U..G....r.W..
   3402c:	dbf6e02b fcc51a04 0102eff6 3214bfb6     +..............2
   3403c:	13ca0ad0 b4b50709 13f64cda effa0fb3     .........L......
   3404c:	29bac3bc c0b42ae7 b79deb0f 26b352ff     ...).*.......R.&
   3405c:	b8fa030d 52e0a4d0 d8ef1eb0 d4d0bc06     .......R........
   3406c:	21fb7ad2 de2ae6c5 539ddbd7 cce43eed     .z.!..*....S.>..
   3407c:	e9a9e926 28ba79e0 cc2ef80e 77ead0d3     &....y.(.......w
   3408c:	e90132e3 efd5d32e 39034de2 1908f0c8     .2.......M.9....
   3409c:	63f3fcec ced116fc d4c2ed11 3ce87f12     ...c...........<
   340ac:	de1d02e5 722cd9e1 fd023aad e1eeebfe     ......,r.:......
   340bc:	45de690e eb13f4f0 5af3ffe5 e6ff2e0f     .i.E.......Z....
   340cc:	fe09e710 21151f0a 36fc2206 081bd2f9     .......!.".6....
   340dc:	161a0b0b e0e625f4 300504f8 3605290e     .....%.....0.).6
   340ec:	150ff6f0 16302d2b 06012e21 101422fa     ....+-0.!...."..
   340fc:	1cee080b 2dd8cae7 0cfa05f1 c506ee11     .......-........
   3410c:	36da2ade dd38d3ef 0906d503 e3174616     .*.6..8......F..
   3411c:	f313ed15 ebfa2cd4 15de0203 23cec0f6     .....,.........#
   3412c:	d0f20081 db04d710 33c208f2 c211f3eb     ...........3....
   3413c:	eff30e1b fee14314 1614de15 d4b108ce     .....C..........
   3414c:	c7d7e111 1cecc60d d40cfc9a f720a3f8     .............. .
   3415c:	0bc604fe e92a06ea f5021207 15dd1507     ......*.........
   3416c:	2df8ed15 2553c3e3 5ccacae8 e103eefa     ...-..S%...\....
   3417c:	df21e3dc bf1fe9bc aebcdd01 22ed0bed     ..!............"
   3418c:	04210113 2a10cec8 2e003820 284889d0     ..!....* 8....H(
   3419c:	13cfd7f2 a2c9f2f2 f1e50af0 e8fcd9f8     ................
   341ac:	d7dc8f0b caf0dcec 8137d41c 0decb11f     ..........7.....
   341bc:	e62624ed ff19ba20 5ff6f5e4 b0ecf5f0     .$&. ......_....
   341cc:	0905c9cf f403cff4 e8d38800 e3d9f9e4     ................
   341dc:	820f010d d1d8ff4b 07fb05d9 e1dfd717     ....K...........
   341ec:	1af70f0c df320beb ffebb1ca fcea07cc     ......2.........
   341fc:	c6d8823f 340c30f9 b73319f7 d9bbcb2c     ?....0.4..3.,...
   3420c:	0a0b71ee c115f22b 29d41532 fe0be604     .q..+...2..)....
   3421c:	4726a9b6 e10ce8f2 ebb2e2f4 f31411f5     ..&G............
   3422c:	eff80907 debf11f6 120b1a12 182ef710     ................
   3423c:	0dcdd310 f605f41a 201681e3 ea12e8f1     ........... ....
   3424c:	b09d0b12 020b39ff 05ec0407 fbc50811     .....9..........
   3425c:	130dff02 5c37e6d8 daf2c5e5 c003d416     ......7\........
   3426c:	f716151b d8ffb3de 8eaedff2 000b2503     .............%..
   3427c:	e6e6070b feccf8eb f60e15f3 2b23b2fd     ..............#+
   3428c:	06f0fce3 9e04080b d20b1f4c fb07d7cb     ........L.......
   3429c:	9bd8ad0d c9011f32 e601f906 0fe7d3ce     ....2...........
   342ac:	e6160bfa d4f8e405 fec2031b d9210113     ..............!.
   342bc:	2121b2ff fe1317bf bfcbf613 09eb3a2e     ..!!.........:..
   342cc:	e607f717 160ccfda 00190108 dc13cf25     ............%...
   342dc:	16cd180a cb1e12ee 040da712 04fd07c8     ................
   342ec:	8edcce02 19ed3728 0112fc0a 1c12c3f7     ....(7..........
   342fc:	05090a06 f6018104 05ed1808 931ffce2     ................
   3430c:	0a19ce1d d0ee20bd adf8c7fe 01db112f     ..... ....../...
   3431c:	e90edffc 1a209a0c ec0410fc f011a4ff     ...... .........
   3432c:	ff020df8 bd02dad9 0b08ec09 dae2f3f1     ................
   3433c:	cd0ae3e2 dce1010c d3edcdfd 0409e316     ................
   3434c:	d3f0f4e9 09e5f3f6 1f2015c3 fbe3120a     .......... .....
   3435c:	cfad452c f506011d 384f09f0 fae2e104     ,E........O8....
   3436c:	f9df10ee 262aefee e5e9f7f9 15b5f4f0     ......*&........
   3437c:	f62726f6 f2d211ea 22b55419 19f4c41e     .&'......T."....
   3438c:	5253f8d4 d9fe9fcc edf2f903 18240622     ..SR........".$.
   3439c:	f7e5eb07 b7c5e612 0005fe15 f1f710f7     ................
   343ac:	33fa2f9f 25040324 3b3d03de 09fafaa7     ./.3$..%..=;....
   343bc:	ddd61904 c8213841 f0f4cd04 c6f7d314     ....A8!.........
   343cc:	f6eaf01a cf02020d 2020c881 28f20423     ..........  #..(
   343dc:	24e3eef5 061320e4 d1d92d0b fae02715     ...$. ...-...'..
   343ec:	0104dc09 d6449b28 3bc31aff 9fc80be9     ....(.D....;....
   343fc:	f819bcfe e7fe20db 19aea799 d51f1b03     ..... ..........
   3440c:	adc2eaf1 edf34624 ff01a5fe d629c4e7     ....$F........).
   3441c:	51df05f8 d3a4fdef e803b1e0 b8f60fd5     ...Q............
   3442c:	e7c5afb8 93050dfb b7e3ebfb 0ac50f1f     ................
   3443c:	23f5d918 e117cdf8 34ccf927 c513dc04     ...#....'..4....
   3444c:	f21992c5 e2eac6e1 c0bfd941 e02119fa     ........A.....!.
   3445c:	e42f1805 14fdf00a 0ff21d1f d9e2f92b     ../.........+...
   3446c:	3bc2190e d33bf0fe 0f1792d3 e5ea0aae     ...;..;.........
   3447c:	81efdc64 54c920fd cd3d0dfc 2a0787e7     d.... .T..=....*
   3448c:	06e26dd1 32211dff e6f9d1e5 321a08fa     .m....!2.......2
   3449c:	d72f1c2b fc0508d8 c5bc4322 03e63f42     +./....."C..B?..
   344ac:	3c18f607 3211bba2 e5fbd2e8 52ec18f7     ...<...2.......R
   344bc:	d523f6b0 ee1505fd ccfe3a28 f51608e1     ..#.....(:......
   344cc:	0118041a fbcb172a ee45eafc 3d3381ef     ....*.....E...3=
   344dc:	f40c2fd2 19c9eece e628f5a9 03d220eb     ./........(.. ..
   344ec:	f5b24d1b 12fbec22 494a00ef bff3c10b     .M..".....JI....
   344fc:	0606e207 2927ee1d cfeefdf2 03c9d906     ......')........
   3450c:	fb010ada e4e71610 1ac628db 1bedfc29     .........(..)...
   3451c:	3d43f7d5 f205e7e2 f5ef11f1 dd1e1315     ..C=............
   3452c:	caf3dfe0 deeef512 0def1b14 ebfa06f2     ................
   3453c:	fd0c00df 00f80aec 0ddfe5f5 defdeb12     ................
   3454c:	f308f309 f4fe05d8 0606e6ff c318e210     ................
   3455c:	1adc1120 ec00f801 02fdb5f2 050911d1      ...............
   3456c:	d0daecf8 f7fa0707 e1fd0a06 fffdecde     ................
   3457c:	1417dcf9 db16e603 20f0051d e40004f9     ........... ....
   3458c:	0f1d81e7 e00308d3 9fe30311 ef050a0a     ................
   3459c:	18110410 1005f0df 08f7e708 f40bc205     ................
   345ac:	15eefc06 bd0ce301 0803c9fc e000f1d2     ................
   345bc:	9c010224 16d30f1b 2718f80d 210d98de     $..........'...!
   345cc:	fb071ef4 00000000 ffffc01a 00000004     ................
   345dc:	000001ea 64522632 2402261a 393b3425     ....2&Rd.&.$%4;9
   345ec:	5a48f7fa 2a2b183d 3931422c 2906172c     ..HZ=.+*,B19,..)
   345fc:	d9f915f3 c20bd2d8 bcb498d7 9bc4d0c7     ................
   3460c:	d0c98281 a4c2c7ed 94a2b981 aec5aedf     ................
   3461c:	189986a2 a6f1bdc7 1c280bbd edf71a35     ..........(.5...
   3462c:	335a64f6 5b343962 14533265 3f365b47     .dZ3b94[e2S.G[6?
   3463c:	12512212 e4f93113 352a0cdb f8370f0f     ."Q..1....*5..7.
   3464c:	04f1daf2 c306470d 2425e4ce ae972632     .....G....%$2&..
   3465c:	6054320c 1ca181e0 db2b3f22 2e0ead9f     .2T`...."?+.....
   3466c:	c72e523e ec32f4d0 b7d2dcda adc9220c     >R....2......"..
   3467c:	e9a9d09a ee1cdf0a e8a4acaf 152d1f56     ............V.-.
   3468c:	6bd5a7d6 d6245558 7f7ce8de d3012a4c     ...kXU$...|.L*..
   3469c:	416342e4 1ef41825 1b08ebd0 ef070931     .BcA%.......1...
   346ac:	4f0cd8c4 bafc1238 195227f3 cedfd326     ...O8....'R.&...
   346bc:	235e612d 359ba809 de283156 30ca81a2     -a^#...5V1(....0
   346cc:	a21f0548 180bb789 132b17fa d50e190a     H.........+.....
   346dc:	1b4afc18 0fe6e32d 16444aeb ce13efec     ..J.-....JD.....
   346ec:	df403241 f6d6e9b3 c1ef3d58 13b481af     A2@.....X=......
   346fc:	eece0445 2129a8ab d531182b ec153415     E.....)!+.1..4..
   3470c:	1dc12bb8 bacaf801 ffd601e3 da818bcf     .+..............
   3471c:	3121e10f 102ea5e0 1a646429 4ff719b5     ..!1....)dd....O
   3472c:	f4f6603c 4d08072b 7cb7033a bf26345d     <`..+..M:..|]4&.
   3473c:	7f5d0dc4 f5dcd220 3c5f7a0b 2a2ac3c1     ..]. ....z_<..**
   3474c:	e1fef618 f8472309 d4889bc3 90cd0508     .....#G.........
   3475c:	f7f1b39d f9edd026 5b16f104 f634feb1     ....&......[..4.
   3476c:	f7745448 1c62d20b c2237f77 4425d5d7     HTt...b.w.#...%D
   3477c:	09ca0d72 e706163b e5cc3632 b816cdd2     r...;...26......
   3478c:	274060eb 54129ba9 c009b147 1c0605a5     .`@'...TG.......
   3479c:	e8d4e627 4d4e5271 75eca4e3 db16657f     '...qRNM...u.e..
   347ac:	296e92bf ebebf945 26ef17bb c510eeff     ..n)E......&....
   347bc:	b705d634 23df0416 afcef9c2 0000ba04     4......#........
	...
   347d4:	ffffc21a 00000004 000010cc 19f507ea     ................
   347e4:	eeefe9b4 090bd317 1109dbfd 0007d5ad     ................
   347f4:	e1c1ea1f f3e0f801 0516d117 06c609d8     ................
   34804:	2715b7f9 10e6f7d7 0ce703db db020608     ...'............
   34814:	ffbc24d2 e128a8fd e3f6e805 e1d6f3e8     .$....(.........
   34824:	11e9d4e9 1906f9cb dfc8f4f4 15d813f4     ................
   34834:	1e0818fb 0fce1af2 edeb1c0c f002cded     ................
   34844:	11f4e6ca 110cecca ef1cd916 0d0501f9     ................
   34854:	eaddd6b7 e6ec1810 def91003 0207d2ed     ................
   34864:	17e5ffeb fb0aebf6 0ae0ef0c 141915eb     ................
   34874:	d20c1a0d 08e104e1 0d1fd213 c31206dd     ................
   34884:	01e20c06 01fed7f1 fbe4f313 beca0b09     ................
   34894:	22da1af0 1b041611 131208ea f7fc18ef     ..."............
   348a4:	bc0ad8e2 e2cfc6fc 0f1920d7 e820e2ee     ......... .... .
   348b4:	d3f90d01 bbd9d486 f4ce0a05 c3050ff9     ................
   348c4:	0aefb9e2 1320170f dcf40f17 f3e9f6fd     ...... .........
   348d4:	ec281f0f ad170fec 0cfa0c01 150de818     ..(.............
   348e4:	fee315d7 e91d13f3 f508e009 bb02aa19     ................
   348f4:	e9eafbec 17f40ddd e0eb15e3 151d06c1     ................
   34904:	12ff00f8 c713dd03 d5d2d51b 110dee14     ................
   34914:	f5050ea4 e0f927fb 24f7edd0 f1e9c417     .....'.....$....
   34924:	f0cb0d01 fbff0506 22080ce0 f3030710     ..........."....
   34934:	14e50fb2 fe1a231c c3f6fabf e1f3e9e3     .....#..........
   34944:	19d4e203 f30d1bf6 0c0c1701 10c915e2     ................
   34954:	f60cfbf6 c7faeaf2 f9bf01f9 c5f81e22     ............"...
   34964:	0fe903fd d003dd2c eeeaf00c 11bf16aa     ....,...........
   34974:	210200b1 da0de117 080fe8f5 f9deb7c6     ...!............
   34984:	0ca90d18 d203d5f1 07f2efe9 c9dae917     ................
   34994:	fd13db09 14fac8b6 ebfff5e5 e415fb04     ................
   349a4:	e8df1bee d91beb01 01f217e2 00c90717     ................
   349b4:	eb15e6f0 f020e31c e2d5b60e fd24d1db     ...... .......$.
   349c4:	1ecf0b09 0a181606 1ff71dde f416f2c2     ................
   349d4:	f7dff4fc 2111dcec cf0b03f9 fbfb140e     .......!........
   349e4:	f007fcca e2b7fd07 e513def9 0dda08db     ................
   349f4:	230cf1f7 e4ffdd09 1ae3dddd 0810151d     ...#............
   34a04:	cde405d9 fb1504ef 1bface16 e1f41402     ................
   34a14:	12f80f29 ec0ab0e4 06faf4f0 f8f70fed     )...............
   34a24:	f00fd105 f326241f 18ec190b 10f4f9df     .....$&.........
   34a34:	0314f9d5 d4bdb7f7 d5c3fa8d a929e4e5     ..............).
   34a44:	14fed9fa 0b29e295 b6d4c005 a7fb0101     ......).........
   34a54:	f30e1ed5 f81001c7 dfcddbbc 222715e4     ..............'"
   34a64:	0bf91b14 dde40809 981b0cf9 2dfbf112     ...............-
   34a74:	b2fa12ea e20ef5e7 fff701f5 08bd1ee1     ................
   34a84:	f2f2f4f9 09e7cde8 f6e40a2a f2fefa1c     ........*.......
   34a94:	1e0f0bf2 14eaeef4 29b7c9c3 0c1affc1     ...........)....
   34aa4:	f0e81a17 ffd8e30c daf41111 18c617d7     ................
   34ab4:	deeee40f 0416f6be 00100a09 e2170426     ............&...
   34ac4:	1df2f505 f3091e1b 1009f1a9 fc05f7e5     ................
   34ad4:	18f6e210 10e4fecd e6f608f6 f30ed0eb     ................
   34ae4:	ceecc4e9 dbf6f7ed f7e0e9fe 1bee1bd4     ................
   34af4:	fc0d0626 2ad4ede4 ff0ddcbe 23d6cddd     &......*.......#
   34b04:	ecfff3d6 af03bede b724dfdf 28e5d401     ..........$....(
   34b14:	2caa210a e2f80907 f21bc7d6 e0082312     .!.,.........#..
   34b24:	f206f70f 30efffce 06061c1b f516f002     .......0........
   34b34:	ede314e5 0e1cc208 200af6c4 1920e7f9     ........... .. .
   34b44:	fab0a3fd f31ef9c8 c8d2feef fd29d6c5     ..............).
   34b54:	1ce9e3e6 21fce91c 28e4e1fa 0503f6dd     .......!...(....
   34b64:	f4f1e721 001df810 f6f30005 95c900f0     !...............
   34b74:	f505fa0d f6e209b1 faefddfa e9061fdf     ................
   34b84:	07f3131a dcbe1720 c9e30405 f5fb1d01     .... ...........
   34b94:	d5ffb6a1 eecbe1ff 090413d2 17f412ec     ................
   34ba4:	e82202dd 02c90616 d61fb915 f01be004     ..".............
   34bb4:	b0ff1b13 dbeccfd1 121de903 eef9adda     ................
   34bc4:	10dc1909 e5f0db1f 1c24f70c 0af61701     ..........$.....
   34bd4:	f3ce1be4 d0c80df4 200a07fd dff6e8d0     ........... ....
   34be4:	21c71be5 1b2017e7 f5e60cf7 051cf2fc     ...!.. .........
   34bf4:	fd1ad51e d3fdf1c8 1217b3ca eaf7dcea     ................
   34c04:	270cf502 16fce8d2 e31de808 f4d8ca00     ...'............
   34c14:	121edf15 a905e02a d2d700bc 030aeee1     ....*...........
   34c24:	fb1ea2d3 0b1ef1c9 dd0fd5e7 ebf2fbfe     ................
   34c34:	edbcf7dd 11d0e8ec f40623fb ea08c9db     .........#......
   34c44:	ed1dce14 0cfa08e1 12f4fdcf f8f91e15     ................
   34c54:	ffdee7ff f7e0fbb2 edf3d3fa 0312d322     ............"...
   34c64:	eac0fc14 e902e9d2 07d910e7 e9fe1fec     ................
   34c74:	f5110dfb d9ebf3fc 10c01403 0efb06e2     ................
   34c84:	e7ffed0a 0ddd1607 e124180c 02f4d9f7     ..........$.....
   34c94:	1efef3c2 e6e320e2 d5060be1 c9fe0319     ..... ..........
   34ca4:	f70d22c0 c223f716 ddd70e36 d6240b16     ."....#.6.....$.
   34cb4:	e9c21f17 b2d9fbe4 fe02c515 daf80dc6     ................
   34cc4:	0a08141f 27ef02c5 d4e606c8 f60fe816     .......'........
   34cd4:	fadc10ef cefc11fe 01111bf9 1f11ebfe     ................
   34ce4:	fae7ffe4 cafcfe03 0012fce3 ce08f8e2     ................
   34cf4:	0ee9f2fa 1c27f5cb dc000020 da170fea     ......'. .......
   34d04:	ebc505ec 0ff311f6 a417e1f6 d6f3d7fb     ................
   34d14:	f617dbe1 1cc816e9 c7fd0601 fb11171a     ................
   34d24:	081305c7 1cd9d21f 1fe9eddb 1f050fe5     ................
   34d34:	ec04be09 defe0a0e a325d020 ce0dcc12     ........ .%.....
   34d44:	09ef14f8 1aeaca02 d129fdcc 07f10ff1     ..........).....
   34d54:	081bc8f7 270822e9 f20403e2 a5dc08f5     .....".'........
   34d64:	f60f2508 cf9ee2e3 e301efd6 c8fb0f02     .%..............
   34d74:	ba1f28e4 d2081a0c 02c017cd f1f0f5cd     .(..............
   34d84:	f41d2c1e df15caf8 0211d6f5 0d18d41a     .,..............
   34d94:	d813fcfd e922dffe 06d2cdf8 1a0adc1e     ......".........
   34da4:	da05d01c e91fcbd4 eb11b534 1707e411     ........4.......
   34db4:	d82005e3 d81fdf0b 1809f529 1a06def4     .. .....).......
   34dc4:	fff018eb b2fcf80d ff0fe7e6 1ec928cd     .............(..
   34dd4:	c3eff0eb b50ce6df ced5c919 15f11d06     ................
   34de4:	cb120de9 1cee0112 f6f214ed f8d400ee     ................
   34df4:	da21fdd4 f5030dff 00f6121e 1cdaf4e9     ..!.............
   34e04:	e102c9ed 0214f704 fb1816d7 eb13fee7     ................
   34e14:	001ef112 d6c6da04 140508e9 e805ca0b     ................
   34e24:	f9d70708 b8df0011 12badf05 08210d18     ..............!.
   34e34:	dadb0bec 09ecb913 082222f7 14df0d0a     ........."".....
   34e44:	dbcce2f0 05e8d8ea 11071b12 bee6bff1     ................
   34e54:	b0d9f704 a909bdff 0b0a18f9 14e5f2db     ................
   34e64:	f2e5f0eb 0bb5f0de c81213f1 d2f0e8f7     ................
   34e74:	f8ec26c6 090deb06 c887c4e6 19dc1009     .&..............
   34e84:	d116e60f 19ddfb1d d5cf0af3 e80825da     .............%..
   34e94:	1206e31a da11f2d7 2503ef09 fbda2b26     ...........%&+..
   34ea4:	16f00e07 f4dd11e9 e4cb23d5 e3041213     .........#......
   34eb4:	27f4c1e5 f405a914 eedbfbd9 ed01e6fc     ...'............
   34ec4:	ef262005 de0edcf0 eeeace07 09fbd60d     . &.............
   34ed4:	c7ffebc4 f503cee1 16dde60e f3e4b10d     ................
   34ee4:	d9e412d0 14f911f6 d11310c2 d6c3e71c     ................
   34ef4:	fee40bf9 06e00eda f613ef00 f1d12313     .............#..
   34f04:	ed110623 d1dedfb4 f515dda6 07dbfb05     #...............
   34f14:	13e9dfd9 ca150813 022ef214 f1cdfcf8     ................
   34f24:	0ee9c3e7 fd17e7d3 e8fd1bea 0bf9121f     ................
   34f34:	09ebebe6 051df813 0fe5c80d e204161e     ................
   34f44:	11fe10ff 16e3f7da b4faced3 cc09dcf8     ................
   34f54:	0b18fc11 f6d1fa14 fe03dcf3 dbf4d7da     ................
   34f64:	ee0ab810 1beafec4 0fc61d1d cd132607     .............&..
   34f74:	e3ba16f6 0bbfb2be d60ad516 1efdf902     ................
   34f84:	fa1e00f7 28ea02ff 11f6edde f2d620fc     .......(..... ..
   34f94:	f621ccd9 faf1bd04 ed051bf5 03ddd4d3     ..!.............
   34fa4:	1bf8eef8 f7e4fcff 05a4fe06 ca15e2f1     ................
   34fb4:	f3d727f7 ecbbcb08 fe00c0de f70dc013     .'..............
   34fc4:	2f07e920 e41601f5 04e8fbda 0aead519      ../............
   34fd4:	d1ebe5d9 2723db24 f8cee2d4 b81cee21     ....$.#'....!...
   34fe4:	06040ee9 d9000297 fa01e10a f718e0f4     ................
   34ff4:	05ea07ed 0f0613ec fc081cff fb13f5f0     ................
   35004:	08e6a2c5 02efeafa fcea06e9 0b0e0bfd     ................
   35014:	cc13aec7 e70300ee 041ed802 1de5e102     ................
   35024:	ca18ecd6 cc0edce8 e9ef0d11 13b5e6dc     ................
   35034:	0fd1f8de fc12e818 cf01090d 1ad314e7     ................
   35044:	b3e20416 1e02ed12 11f6fe1b 06e2efbd     ................
   35054:	f20514e0 0a2508f5 f8e4de08 efa2f1e6     ......%.........
   35064:	09f60cd5 fbecf4e5 02df0cc0 1b0b01f6     ................
   35074:	ceebf217 f82de40b f1edb609 0bf1e1f8     ......-.........
   35084:	0a1211f3 c2c0e0fb d9ffe3dd c80a13ba     ................
   35094:	05b5f0bf 07ccd5b2 f40ef9b9 d1d9f0fa     ................
   350a4:	12fbd2ee c00f050f 25f01bd3 0f03f703     ...........%....
   350b4:	0f16d31b e4e8e7d1 f122f20b 200f11fe     ..........".... 
   350c4:	17d0dcf7 d81b180a 18fec5de e2f305f1     ................
   350d4:	dc1fe5ce db19fae8 c0fcc219 dfedf202     ................
   350e4:	1412cd2a 05c2d7f8 fc0ff015 1104ee19     *...............
   350f4:	06fbfa0d 0cdaffdd 0dc71ff9 e516bd16     ................
   35104:	06ea04db 0eeae7bc f614b909 db0defff     ................
   35114:	d80df7f1 1912f415 f905f4d6 e60f08f9     ................
   35124:	07ef12d6 fdf3fe10 e5f4e8f7 ecdad7d1     ................
   35134:	27f0ecf9 a803e9f3 00010a05 00f917a2     ...'............
   35144:	e4c5f0ef 2706e502 f60dc4f6 010aaba6     .......'........
   35154:	c6e7ee21 cfdde0f4 0ce5bec7 c2b0cbe5     !...............
   35164:	cb0be41c 19f0f6e8 effbf0b1 c80df317     ................
   35174:	f5f927ee c30abdfe fbe4cbee e9de1dd5     .'..............
   35184:	e1d31f15 f81bfa18 1f96df00 10fff281     ................
   35194:	14cfd2e2 0a001602 0df50ce4 04c3141b     ................
   351a4:	ca1114fd 11f9f0da 0417d217 1c1ef0e6     ................
   351b4:	e9e913f7 e9f7e210 f4310bd3 05ceece8     ..........1.....
   351c4:	ffedc6ff e1f2cdfe 0a00dff7 15fcddca     ................
   351d4:	d6ea230c e7fa0aeb 2df5e8da f9e31fda     .#.........-....
   351e4:	0ad91cdd 081811fb f5e1ff0e f3bfe116     ................
   351f4:	0a1adbfe f6e6e9e7 d51afbd0 263003e2     ..............0&
   35204:	ca2ded12 021e0ee4 fbdf0301 15fcd1e8     ..-.............
   35214:	f811def2 14e3cbe3 1d11dfe1 f9040a11     ................
   35224:	b909dee4 cfcabf21 ecf304f7 d8eae113     ....!...........
   35234:	07e6dad4 df03ff0b 05ee20ed f0d70ec4     ......... ......
   35244:	faf7e7fe 12eaf0da 07e417f3 1f030022     ............"...
   35254:	ffb6c5e9 182c09fa 06fef7f3 dff0020d     ......,.........
   35264:	dfeeffd0 150e22d8 ccf010ad e9ece907     ....."..........
   35274:	e4b6deeb 09ccc008 0e17fec8 b818dfd9     ................
   35284:	f3bafe10 0cefcfd7 11b5e2d8 e711d51e     ................
   35294:	01c515ea efd5cce4 af10f70d 021d0127     ............'...
   352a4:	d6d7d20c c013cced f1d60fed 05dd2204     ............."..
   352b4:	0fd21501 ffaacf06 fc06119f 17f9dda2     ................
   352c4:	ebf90d12 02c108dd 14df0d0f fdfb0b1b     ................
   352d4:	e203fbfd fef2da1b 0418cbf4 f31fd3c3     ................
   352e4:	0304d2c9 d7e20801 0afd00ba 19d4f5d4     ................
   352f4:	f8fc0cdc 0a112a0b 0ef61ad1 c7e5e613     .....*..........
   35304:	e5c8dfd8 d6e4deff fcf5d5db f424dbfa     ..............$.
   35314:	f8d005e6 1412faf6 f6ed1919 f5d81a1f     ................
   35324:	05e4f8ed 20e114f9 e5c902da 0edc051c     ....... ........
   35334:	d823e408 efede601 0d0ac9f4 ce19e8fc     ..#.............
   35344:	edda04ae 06d1fb06 bbe010de 08ecedc9     ................
   35354:	04f7f503 e80ef7f6 f2ea12df f8d4fb05     ................
   35364:	c1f41409 eee90df1 cc110318 0aef010c     ................
   35374:	1a021feb f002f409 19fbf61a 1dee1c0f     ................
   35384:	fc0a13de fff30d0f 182001e3 bafcdae1     .......... .....
   35394:	f90d100a e605ecdc efd9d00d 0f00e0d1     ................
   353a4:	ffdedee2 eb210b03 fc031bf3 ca2bcf0d     ......!.......+.
   353b4:	06b507c9 fbb001e2 ede00a1d 10f3c913     ................
   353c4:	e8fbc7d8 cd03fdf6 f5ea1103 eed7efd1     ................
   353d4:	0d0fdcd2 ebaf19d4 18131508 f5d5fed6     ................
   353e4:	fd091413 0edbf4f5 0834f8dd 25ef05fa     ..........4....%
   353f4:	04f6ffd7 0d031509 c605ea02 061f00f8     ................
   35404:	f81b01e9 11d50b03 13eadfcf fd0ae015     ................
   35414:	17dd1304 09b9c6e0 07d804eb d31fd120     ............ ...
   35424:	09ebebd9 02f8edbb c00e080d 11100ce4     ................
   35434:	d51a1aff 10eebddb 10fa0bcb 0127f90a     ..............'.
   35444:	07e5f7d5 b49b00ef 1209f6fd c6f209de     ................
   35454:	10f0f9c4 1d37cc01 bcfe0907 0df2eefe     ......7.........
   35464:	f8edf5eb 8cea0f02 f40fed12 2713c6ee     ...............'
   35474:	d90c02de 95f72d13 932dfff5 eee3f40f     .....-....-.....
   35484:	bdbf00ec fd17e0d3 15f30316 9a0ff714     ................
   35494:	b606f903 0ffbc0d1 c50f0507 0020cc16     .............. .
   354a4:	e1e2ed0d 1dcb18ea ce09eb15 06f1effb     ................
   354b4:	df060034 dae5e61b a2d20aea 00af14d8     4...............
   354c4:	0c2519f2 0b1de8fd bdeb0ec9 fe1a06f4     ..%.............
   354d4:	f8c11c1d e809f9dd d1ffb3e9 f709ebeb     ................
   354e4:	02f6c8fc eb9a06fe 00e0e1f6 08df2409     .............$..
   354f4:	eb0bd2fd 2ff8fdba f59cdf1c 25e2dceb     ......./.......%
   35504:	e9e7e0d9 d703fe13 2705d01a e90912e9     ...........'....
   35514:	cefff812 09ee0706 d3edfdef da04bfdf     ................
   35524:	e92c1af6 1f07db04 0bd4f7f5 05c9f501     ..,.............
   35534:	fecf0d05 0af9eff2 0ff41d14 131025fc     .............%..
   35544:	d7f22fcd 0ce8e6d4 c3011bc4 b7fbdc08     ./..............
   35554:	e7fafc0a d10afbfc ffccb92d f40be114     ........-.......
   35564:	fb0a2212 15e5defb 0dd9d806 0cf7fc0b     ."..............
   35574:	dd1ae0f3 dfed1d03 f50dfefd 07fdf0ba     ................
   35584:	1bfd16f9 01fee500 181cf8d9 f112ff02     ................
   35594:	f8aa1908 ffe7ed0a 0cd1fc0e fae8f0dd     ................
   355a4:	d5eed4c7 a720f1fa 0c02bfd9 d8dc0fff     ...... .........
   355b4:	0be503e8 1b020817 f303e2dd 15d6c60b     ................
   355c4:	16d7fbe1 1706122a 0eb8bdf6 0ffc2412     ....*........$..
   355d4:	e80003ee 1814e706 ede61aff d3de1d1e     ................
   355e4:	f102ebe4 ece5f2b1 120ce529 1a001eee     ........).......
   355f4:	e9fbddcf ba9d1128 0cf12012 18e9e9d4     ....(.... ......
   35604:	29f9ed0f c20ae7d4 cd06e4bf 0d10cfa6     ...)............
   35614:	e22401f9 f500d10e f7f6ad15 d212fa0a     ..$.............
   35624:	fe28c8d2 fbc7dee7 e31107f9 0b10ceec     ..(.............
   35634:	00fbff0e 061a1be8 1204f5e2 c81d12e6     ................
   35644:	01f70806 f1050fe0 b8a7ee07 1af6fdea     ................
   35654:	230616e0 da1bdc0f b0e41122 1fcc08ed     ...#....".......
   35664:	8bb3bae9 d1fae4ee 09a216f4 ff0409fa     ................
   35674:	18e3facf e52101c1 03b1f1d8 07dc17d6     ......!.........
   35684:	c3e3cdfb 13fbc913 eeebd211 24e0d82c     ............,..$
   35694:	150adcd3 ffe817f0 f5e6e7ff 0b21ae00     ..............!.
   356a4:	bcc506eb e4ecd7a7 d4eaeb02 f2e919d9     ................
   356b4:	04f60f1a 17e1e6f5 16e4f8e1 10d720f6     ............. ..
   356c4:	01fc12ec e516f2c6 2eee0921 ebef1504     ........!.......
   356d4:	05ea2507 d416f1d6 e91a1102 b8dddbf3     .%..............
   356e4:	080dd4cc cc1924f4 0822e40b f525e6d9     .....$...."...%.
   356f4:	f1f2e0d6 edfef019 f72dd016 eeea0e1c     ..........-.....
   35704:	cc11e2e5 081feb09 2bf2c1f2 160ce8d5     ...........+....
   35714:	fbbffd26 06dde4ea f5092692 2206ff06     &........&....."
   35724:	b031c417 122d08e7 e7ceb209 090fe3fa     ..1...-.........
   35734:	bdf3d116 def9e4bb d0d909fd 010200f1     ................
   35744:	bb05e5dc 0fd221f0 9eebfa03 20f9ef17     .....!......... 
   35754:	e7fdc2ee 1af6f9c2 f11a0bd4 e4e30207     ................
   35764:	f621be02 b107dcf1 d901f0e7 e5e9e101     ..!.............
   35774:	0423edb9 150204ef f60d21fe fe06f8c6     ..#......!......
   35784:	e4f4e214 cafa0a11 f2dc04dd aee2e70e     ................
   35794:	0a0a27ef 05e12d1e f1120ed4 f71c1e0c     .'...-..........
   357a4:	d8ec0701 13dedde0 f91308e9 a8e50bf3     ................
   357b4:	0af40914 090bd1e9 f60cdd12 e6f2f8ba     ................
   357c4:	e2e503f9 1eb704fc bd0d1b15 0f06e0cc     ................
   357d4:	f0dc1dce f9f71315 16caecec f6eeede6     ................
   357e4:	cff4e615 1ce6d3fa bd2d1523 01b3e508     ........#.-.....
   357f4:	f81ce6fb da0bf5c1 c011141b 002523f4     .............#%.
   35804:	12e0f2f3 f8c127d0 dfdcd419 e7eaec19     .....'..........
   35814:	8218dc0b b8f4ce0f 0d02bbf3 c9e2eb0b     ................
   35824:	f021bf00 e2db09de f2f9fd10 dd080504     ..!.............
   35834:	faf102de befed1f9 dbf0effd c6c5ed08     ................
   35844:	15de0af0 ebcc9907 f3dd01be cb042023     ............# ..
   35854:	1fd606ea b5f904e6 d4f502fa c0d10000     ................
   35864:	150e1812 210df8c8 d9f114d3 24c6dad7     .......!.......$
   35874:	0c04ed28 a2f21fd2 a100d001 13c3e1f1     (...............
   35884:	e4e5ff11 19fee7ed f110de06 c9e50ce1     ................
   35894:	bf1be3ec fdb9fbd5 c9101721 dcdcef06     ........!.......
   358a4:	01a1fb08 0f07f9de 00000000 00000000     ................
   358b4:	ffffd2fa 00000004 00002710 b732e11e     .........'....2.
   358c4:	1fc9eb02 23f2850b 2b1911e6 ba15e53e     .......#...+>...
   358d4:	12c7dc30 042dc903 20e10402 24560b09     0.....-.... ..V$
   358e4:	26221902 e603dafa 0201ce05 eae5dad3     .."&............
   358f4:	fc05f333 1419c4e0 db24dc07 29fad8ec     3.........$....)
   35904:	17102300 ea4c40f8 2617f2f0 f7f8e501     .#...@L....&....
   35914:	ea0ee81c d5032127 f0fad513 16c111f6     ....'!..........
   35924:	33c608e2 17f8d4e6 172516d2 02f0f2e5     ...3......%.....
   35934:	e2ede32f 2819d4b4 0a2922fc d8fc13e8     /......(.").....
   35944:	0ae3def0 14130f3a 1d003c0a 38df2a22     ....:....<.."*.8
   35954:	f2e6fb07 00eb33d7 eefdf91e f8e00cfd     .....3..........
   35964:	c205e9d6 fdfdf712 1cd60a18 166e1dd8     ..............n.
   35974:	171ae7fa d8d210d7 ecf9ea82 ed032607     .............&..
   35984:	fe4ae61c e7d8e62d fc25c6e8 11f2dae9     ..J.-.....%.....
   35994:	f0e92bdc dddfeb1c feee2af2 1a052be0     .+.......*...+..
   359a4:	e045275c 240a0edc 0c0eab46 f0e30046     \'E....$F...F...
   359b4:	02fdcce2 24141e2e f5f9e234 15083cfd     .......$4....<..
   359c4:	10e3e51b 120e2dee 25ee03fe ecce18ad     .....-.....%....
   359d4:	ec23f720 06251721 0731220f 221f25df      .#.!.%.."1..%."
   359e4:	20280518 91002b1a 5a12f000 0b0c05ff     ..( .+.....Z....
   359f4:	24e1e229 14feaafd 1e0f0af1 cf3bdfb3     )..$..........;.
   35a04:	27e7be53 d616eaac eecb0dd2 df451de6     S..'..........E.
   35a14:	070c431f 22dd42c7 e7dfdd19 26de2dec     .C...B.".....-.&
   35a24:	f9f5fd21 08de1dc6 10ec10ed 0f1c141f     !...............
   35a34:	1fd0e0eb eb190824 e0ead622 faea2e26     ....$..."...&...
   35a44:	16f612aa e5041a0b 3df72e17 bef9f640     ...........=@...
   35a54:	32c6d4cd ff1fb813 e82940d4 e905e012     ...2.....@).....
   35a64:	f1f61600 ad0b0ac7 0d46e732 165721d6     ........2.F..!W.
   35a74:	2c2e0a2e 16140f1c fa1ec335 e513d91f     ...,....5.......
   35a84:	e82e2adc 02130e01 f92af80f 2c26e4dc     .*........*...&,
   35a94:	05ef05da 1b11da1d dd10130b 2a241a21     ............!.$*
   35aa4:	fa0e2300 0af8e9db fefdef03 cbedc10b     .#..............
   35ab4:	ea05fce7 d3d72822 0e07f302 05d41ad5     ...."(..........
   35ac4:	fe00f619 f721d60b ecfd18ef f9c818e9     ......!.........
   35ad4:	ff031b28 151bd5f0 f1eedeca 02fcf42d     (...........-...
   35ae4:	e5fcd904 24dcf3db 03da19f1 0800ce1b     .......$........
   35af4:	05d60d25 f51ed9bf e700d409 e1fe10ea     %...............
   35b04:	e6111f19 11f10bf7 ecf8d8d9 e11411eb     ................
   35b14:	090f27d8 f220ef16 1a0c4214 21daf6fc     .'.... ..B.....!
   35b24:	101c11fb 2131091d ed24d4ed 1effd8e2     ......1!..$.....
   35b34:	16e710d3 ecd926e7 07faebf6 d9ecb519     .....&..........
   35b44:	2c1d1d2f 06e7dfd8 11e968f0 0b50f7e5     /..,.....h....P.
   35b54:	0a21c42d 31041ee1 e108dac5 135d9b17     -.!....1......].
   35b64:	fc26ee01 1ce6fbfe 06302a01 19f318e1     ..&......*0.....
   35b74:	f1e1f018 350ef220 00f5f20b 03e02ef7     .... ..5........
   35b84:	112a0621 ea1bfaef 1fdff81c d506f510     !.*.............
   35b94:	4acd391a fad52024 260bdc15 300fdf11     .9.J$ .....&...0
   35ba4:	ecfcfa27 00120f13 f1e508b0 1de8e1fd     '...............
   35bb4:	0d15d6ea f4274439 f2f2dd13 20352407     ....9D'......$5 
   35bc4:	d627ce48 19fcfd06 f30a2c0c edfcc0f7     H.'......,......
   35bd4:	0ddcf0d8 0524e414 31af27e7 4b1d02df     ......$..'.1...K
   35be4:	1313f2c8 070733fa 09ec22fb da32f711     .....3..."....2.
   35bf4:	22e215ec 25d20004 24e7e9d4 dadd251f     ..."...%...$.%..
   35c04:	09ea2aeb 0c063ad0 49f2e3f3 e90f1efd     .*...:.....I....
   35c14:	1eecf9e6 0c37202c f71f0afe bf12150f     ...., 7.........
   35c24:	243f0a3d 0ee027fc 0bf5f826 d5f4dfdc     =.?$.'..&.......
   35c34:	e9ea1aeb 1ef32031 e9e1d613 3eeb0c0f     ....1 .........>
   35c44:	16052649 2b083afe f02a0324 19f32ee9     I&...:.+$.*.....
   35c54:	2cd31f24 22fb1ffe efe4df24 ddcf25d1     $..,..."$....%..
   35c64:	0c142a18 0bc6f402 1804da1b d323f9e4     .*............#.
   35c74:	230402db eddf54d9 21f60a0b 53fb21ce     ...#.T.....!.!.S
   35c84:	351615de 0a31e11a d81cd5d6 e625dc0a     ...5..1.......%.
   35c94:	131c28dc 235a2bfc dad80704 f61f0101     .(...+Z#........
   35ca4:	051f17e6 0d2c13e1 2bd140f8 11f81cb9     ......,..@.+....
   35cb4:	0efa182f ca1d21fa f213250b fee21ccf     /....!...%......
   35cc4:	22060bd5 ff3514fe 1ee82641 bbe91ae4     ..."..5.A&......
   35cd4:	2b071710 f2091426 0f14d0ea f5e7e21b     ...+&...........
   35ce4:	051bfe2e c6f3e708 0e2ceccf f45c2642     ..........,.B&\.
   35cf4:	1f0308cd 1410d4e3 24e1f60d dcec133a     ...........$:...
   35d04:	d5202202 e3f905d9 d8ded6e5 03e6d6ec     ." .............
   35d14:	e3db37fa e220f214 cae0f205 29d8e5dd     .7.... ........)
   35d24:	b71d1a0b 211a1418 fb2dd60a 302ce906     .......!..-...,0
   35d34:	cf2ff2da e103dcc6 24f0f330 010f0c3e     ../.....0..$>...
   35d44:	d0fd080c 9ee6f851 c810ec25 f6131aea     ....Q...%.......
   35d54:	de26fd1a e6d51e24 f2df2620 f40c0919     ..&.$... &......
   35d64:	26172347 06d4e908 1aea410c de00dc26     G#.&.....A..&...
   35d74:	28bddb2e dcdedbe8 0e29f5f3 ea2e10dd     ...(......).....
   35d84:	f60101de 12e7b4f4 27f913e5 eec3fad8     ...........'....
   35d94:	2415c307 0adfd217 e3e111cd daf11ad4     ...$............
   35da4:	1cdce415 fa2424e3 cc08c20d eae90b10     .....$$.........
   35db4:	2ab9e90e 28d0f0f6 f8fee8c7 0ee915eb     ...*...(........
   35dc4:	dce51521 e0ebf102 deee261c 0ecf1611     !........&......
   35dd4:	0c111ffc fb0e03e7 fd20dd42 2a283a18     ........B. ..:(*
   35de4:	09e11f3d dc0d1ae7 a6d5234a e8f0e8e7     =.......J#......
   35df4:	fee7df1f 0afcdc10 2801d739 0223f523     ........9..(#.#.
   35e04:	00efe1e5 eedd04ba d60e15db ed2c091d     ..............,.
   35e14:	1aec29ee 11ea16ee dc402b4d d54cfee0     .)......M+@...L.
   35e24:	2ce6f100 fa3a36d5 0a26e5e9 0603fee5     ...,.6:...&.....
   35e34:	f1c6cbe4 cadddb0c 05f4cf2c df0ff3d8     ........,.......
   35e44:	1debbfff d42c0b30 001509e3 444739dc     ....0.,......9GD
   35e54:	d933ddd8 eacfe40c 4af3e347 edd6ff1f     ..3.....G..J....
   35e64:	50f82ae0 f3f2f81f 0aeec829 fbd9ee16     .*.P....).......
   35e74:	ceea2723 0d051d00 06271610 e2e324ec     #'........'..$..
   35e84:	16fc04eb f2db2024 ebd2c51e f4e506cc     ....$ ..........
   35e94:	faeb19d2 26eb1bf4 54c3e5fa f81b0eae     .......&...T....
   35ea4:	ea073409 f0e40302 0c27f83a 02e50741     .4......:.'.A...
   35eb4:	04fc15f6 f12007f3 01e11ae8 17e7e504     ...... .........
   35ec4:	1b1443f3 1df8e0ff e711dd06 0eddfade     .C..............
   35ed4:	25e43c18 0de1fd07 aefafedd f34e173c     .<.%........<.N.
   35ee4:	e5e4e41a 13220f33 1a2b1209 e51bf601     ....3."...+.....
   35ef4:	29edf4ef 18fce7e8 df16da1e dbbe0e31     ...)........1...
   35f04:	00ebf939 07d4e429 0715fbc0 deebe0eb     9...)...........
   35f14:	0e04f22e 20e334af f249deed f8e6eff9     .....4. ..I.....
   35f24:	d1d6e110 26003df0 e9150bee 082204fa     .....=.&......".
   35f34:	250a18e1 0919d2de e8d82e14 4ed809ee     ...%...........N
   35f44:	22ee2144 21c5bcb9 dc24113a 1818e6df     D!."...!:.$.....
   35f54:	f92e2502 fb1f1f41 191e0929 dc10dbfb     .%..A...).......
   35f64:	06bdf20f 0efd2506 f2f4110b 11ecf6fc     .....%..........
   35f74:	49f2fd24 fc200416 58f4dbef 2515221e     $..I.. ....X.".%
   35f84:	e92ee6f4 dbe910db 14ef07da ed0ae1d3     ................
   35f94:	23f1e0df f1142d42 02080c00 15f6b5f1     ...#B-..........
   35fa4:	0a0a10d5 ebff20ff e2daf5fa e92ad5ea     ..... ........*.
   35fb4:	fc10e325 1733c5e1 21f4e9fa 09131ecf     %.....3....!....
   35fc4:	2a2f0f29 28f01efc ec1be615 14ef40f8     )./*...(.....@..
   35fd4:	ff1d2021 ecede7cc f502053b 181916f0     ! ......;.......
   35fe4:	db2ef6d7 d9370307 420c49e6 f8ff3eef     ......7..I.B.>..
   35ff4:	ce18a7fc dce2ffe8 df06d629 eaba1cee     ........).......
   36004:	2503ec10 3f08eef4 e011fdef f3e3f9ff     ...%...?........
   36014:	10dc01e0 011904f4 ee09baf6 052803fb     ..............(.
   36024:	eaf009f8 2f00ed15 c902063b cfb8da07     ......./;.......
   36034:	eb0da90b d7e0dd19 ee001800 0518f928     ............(...
   36044:	fe3130fd 090a19e0 e608200f f23cefe7     .01...... ....<.
   36054:	d7e13400 c7dc2718 eaf50e12 e4dc2f18     .4...'......./..
   36064:	f113f010 2d14e2f4 0e03fb20 e40522df     .......- ...."..
   36074:	080438fc 1474ea03 0016250a efaed5f4     .8....t..%......
   36084:	0c29d612 fef6d8f1 0c32a9fa 22d7ea0c     ..).......2...."
   36094:	04ec03e6 1de0e71e f600f249 b5efe118     ........I.......
   360a4:	12f4f118 fa21210e 2bdb2705 e1161901     .....!!..'.+....
   360b4:	1a50ccff e1f02cba 0229270c 18ec15fa     ..P..,...').....
   360c4:	f5efd503 f2d2122b be01e407 f4f5f1db     ....+...........
   360d4:	f1390c33 19232f5c 1503f0f9 16000619     3.9.\/#.........
   360e4:	f5c321e8 efde240b 12fc2323 26e3c4ff     .!...$..##.....&
   360f4:	0c2524cb d70b3224 ee012722 fdefb7db     .$%.$2.."'......
   36104:	34e2efd9 e0e3d6da 34d8f9ed 1f20170d     ...4.......4.. .
   36114:	de23220f f3242001 da012af8 e1170cd3     ."#.. $..*......
   36124:	f8f0f4ff 02ecef19 35020e0d d1d647f2     ...........5.G..
   36134:	44fc1e19 ecf2d41a e31900d3 23cbebf7     ...D...........#
   36144:	1ce0f90b f4174113 f4e0d821 dbdb21ec     .....A..!....!..
   36154:	31e63df4 d9f3f3ce bc0601d4 2919261f     .=.1.........&.)
   36164:	1d0919e1 02372317 e41edb45 cb0143f1     .....#7.E....C..
   36174:	130c12db 00f7f8df b5e8d83f 4fe2d131     ........?...1..O
   36184:	1cf6c1f0 e70ff4ff efe517de 13f22209     ............."..
   36194:	40e9320d 06dd1f1e 0bef2402 12ee0205     .2.@.....$......
   361a4:	e429f22e ecde1b1c 1f291c21 def2012d     ..).....!.).-...
   361b4:	24f32730 0f3a0bfd 21d121e0 de0ff72d     0'.$..:..!.!-...
   361c4:	f70001ff 1ff3c5e4 d92b0dd4 f90c20a6     ..........+.. ..
   361d4:	2222e72c e211e019 ef14db09 0628d1fc     ,.""..........(.
   361e4:	f42519f7 bd0a1f10 dcf3f4d3 dbef0b1f     ..%.............
   361f4:	d832d6f8 07e0f8f8 221726e9 2b0ced2f     ..2......&."/..+
   36204:	d5bfe8ee 1bdad9d5 ebfdeaf0 17eb5129     ............)Q..
   36214:	17ebfd3d e9fdfb0e 591d11d6 e121070c     =..........Y..!.
   36224:	02a60805 0ade13ff da291e15 1423eef9     ..........)...#.
   36234:	e9e1261f e9010b0d f12bfe07 effce71d     .&........+.....
   36244:	ddea29d8 2b0430d6 d11af411 2720e500     .)...0.+...... '
   36254:	e4d1cee8 20ba3eec 4ce12edb 2a13051c     .....>. ...L...*
   36264:	f2e02216 2307ead3 182f14f4 d7de0524     .".....#../.$...
   36274:	1c0ff21e e9d6e729 020b1115 0446f3f5     ....).........F.
   36284:	fe6be4f7 f9d71620 05e8e5f7 dcfce510     ..k. ...........
   36294:	c24bfa09 0312d905 9118f868 0ee5f8ff     ..K.....h.......
   362a4:	ea182e21 b12fcb03 34d9c813 1ae4c4cb     !...../....4....
   362b4:	1827e4fe f806d2d7 16e04328 231a371f     ..'.....(C...7.#
   362c4:	cfe90425 12e707f9 1b2930f4 f9f5f016     %........0).....
   362d4:	f017e3d4 14f72ee4 d3290d26 0a0ceff6     ........&.).....
   362e4:	0fd2e70c dd00effb c227f8fb 1b211845     ..........'.E.!.
   362f4:	0905d0f7 f59ff834 d5d2ef00 2be33ec7     ....4........>.+
   36304:	054afc2b 0a071d09 c0bbf3f5 15e8f824     +.J.........$...
   36314:	ea170a23 d6e90dd2 0fdefe2a 0bb7c9e5     #.......*.......
   36324:	f2eb044f 1b0be40a d834142a 2016d908     O.......*.4.... 
   36334:	20e8f9e6 f3f7dc08 fcfefad8 19eb2300     ... .........#..
   36344:	e3db1efd 1a282e1e 16cff041 27b81dfb     ......(.A......'
   36354:	0affd445 01d83cde de2b073d f300021a     E....<..=.+.....
   36364:	e7dcf5df 060cdff2 fd0ce5df ec02e800     ................
   36374:	1cf223e0 bc22fbff 26ea2906 0b04cd10     .#...."..).&....
   36384:	0bc34014 20f4ffed 07d6e0f5 18d2eebb     .@..... ........
   36394:	dcecd30f 26511d2a db1d1621 24013028     ....*.Q&!...(0.$
   363a4:	14d5f10e 01fbe913 03d39a22 39afd61a     ........"......9
   363b4:	02d0fe1e 23230112 16fd1eb6 3000180c     ......##.......0
   363c4:	290cd733 b4cdeeef 060526ea fa0be4f7     3..).....&......
   363d4:	d4b3d60d 381509df b5e4f1fd 0f2927b7     .......8.....').
   363e4:	db25c31b 0bedc702 18fce90c 02040d22     ..%........."...
   363f4:	edcc2a18 1ec2330e 1438f6d7 252afb25     .*...3....8.%.*%
   36404:	072de0d8 2224f342 f317db29 0cff08da     ..-.B.$").......
   36414:	25f60248 32d8f5fe 28ff2739 e7223e01     H..%...29'.(.>".
   36424:	10c323f8 e12bfc25 dd16e930 f12bdff4     .#..%.+.0.....+.
   36434:	f544f00c 2ab8f7fa 2f0b740d e2edc5bd     ..D....*.t./....
   36444:	1d06ecba e816ddbf ee030603 041c23f2     .............#..
   36454:	1204f22b 10062514 f4ecfc05 170e10de     +....%..........
   36464:	dfea280d f42c230f e700de0f d6ed1407     .(...#,.........
   36474:	e3e4db15 e4350733 08dff6f4 030ddfed     ....3.5.........
   36484:	ddf7e824 e80bed07 ff0313e1 e7f7cc06     $...............
   36494:	012d18e0 fd0de516 bb08eb06 0dec490a     ..-..........I..
   364a4:	10fd21eb 1f1a0000 012432d1 160d14f8     .!.......2$.....
   364b4:	45f80ec2 121a1b20 e9011dea dbbe0cbd     ...E ...........
   364c4:	f214da23 e2f5f906 e3000524 1df3db0b     #.......$.......
   364d4:	f8fde714 f14afa1f 120dfdd6 d30f45d1     ......J......E..
   364e4:	f2002b11 fe2b430b 01080b26 fcee233d     .+...C+.&...=#..
   364f4:	2b19b817 2df2e82a 0f40df16 53cd19fe     ...+*..-..@....S
   36504:	2cfb07c0 e819e614 13f92037 e6eef6ff     ...,....7 ......
   36514:	13061e08 d500b23a f0ff120c 0b001e32     ....:.......2...
   36524:	f046ddfa f6e7dbe2 f7111aec 2426f0ea     ..F...........&$
   36534:	eaf2dc07 ebd814fd 16dbce11 e9f3e208     ................
   36544:	26ca034b fffdcdcc e30eecef aecd1436     K..&........6...
   36554:	25dd0fd5 47192cc9 e80ffdfe f6fc2228     ...%.,.G....("..
   36564:	060920fb dffc32f8 e2ffed30 d82ada1b     . ...2..0.....*.
   36574:	e20cc10a 0425d526 0f1d3afe 30fb0f15     ....&.%..:.....0
   36584:	21ee07fe f213e1eb fb0c19e8 e907fff9     ...!............
   36594:	eae83501 eedf0950 ea0aec1c c8074c12     .5..P........L..
   365a4:	b318e917 b6cd12f7 06e2000a f7200727     ............'. .
   365b4:	fd3d2211 fdcbfb1e c02b1fdc fc2620d6     ."=.......+.. &.
   365c4:	0a470011 cfdf251e 07f619e3 c324fcff     ..G..%........$.
   365d4:	fb12e8f9 fa0fdc08 081ef0e4 fe1f29d9     .............)..
   365e4:	26121c29 daca0ef1 db20b7e9 e0fa0fcd     )..&...... .....
   365f4:	0cfbf024 e0fc521d fb060762 1b281cda     $....R..b.....(.
   36604:	f7c8d3d9 d904001c ecf94b3b f31ff328     ........;K..(...
   36614:	28f3ffec 22231b1f 16f1d4e6 1326201c     ...(..#"..... &.
   36624:	fbcc2102 ee0ee5df d7bfcdeb 22f8d20f     .!............."
   36634:	1ceee7cd 19e02acc e1e9f0bd 0af1071d     .....*..........
   36644:	371ef7ef 34dd0810 f0e5e94d 0b13d508     ...7...4M.......
   36654:	eac207b0 e6fd1e04 dc4645d7 dcf2ecf7     .........EF.....
   36664:	2310d914 0f1a1409 fe05e340 e6310fef     ...#....@.....1.
   36674:	0725e815 19dd6218 362fe833 051e1822     ..%..b..3./6"...
   36684:	dfe4bf18 27e7000b dc3f2612 fdfa1ad0     .......'.&?.....
   36694:	0dfa03ed 27f2c813 f4fcf4f9 1bf02217     .......'....."..
   366a4:	d5e617e0 d51eb301 03241ad9 22ff1d0e     ..........$...."
   366b4:	e3202b1c 06f8ff29 22fb14e5 24f2e300     .+ .)......"...$
   366c4:	1be6ebfa 200af327 bff5dbed 00e40bca     ....'.. ........
   366d4:	22c4234b d91327f0 29e40a1c f2c3e612     K#.".'.....)....
   366e4:	e8101419 fb1043e4 e6fae01a f83c1c25     .....C......%.<.
   366f4:	dbfd18d2 ccf0d3c3 a9e51a2a 1ddcdf17     ........*.......
   36704:	f8223833 090ce827 f225f840 49d9f7fc     38".'...@.%....I
   36714:	26c61e0e f61ca71e 0e1ee8fb fc0be1f7     ...&............
   36724:	2deff5db e123ed1d eef70ceb 071318e2     ...-..#.........
   36734:	bf2dff3b 190c2d3b ea21372b f0ef21cd     ;.-.;-..+7!..!..
   36744:	1bfddff3 dbf20df3 ee11edf9 1a5a15fa     ..............Z.
   36754:	daed091a efef2306 13dcb23b d7eb0df3     .....#..;.......
   36764:	0df10ce7 e0ed2dea 024ee401 2a2a2309     .....-....N..#**
   36774:	fe2916f5 2bfbfbb9 dae413e8 08db04ba     ..)....+........
   36784:	26e40b10 f33e0ce5 f710f717 eafe1627     ...&..>.....'...
   36794:	fbec27e7 50c6fcf0 c1dfeac9 22ee201e     .'.....P..... ."
   367a4:	2cd7222a 2f29edee ddecf4f7 01080b58     *".,..)/....X...
   367b4:	07eae5cc f1ec0ed9 092dfae3 f41ef0b2     ..........-.....
   367c4:	fb031023 0700f22c 04171df5 e5022ade     #...,........*..
   367d4:	1d1e0309 e5061a22 e5001916 d820e81c     ...."......... .
   367e4:	1d1bf530 07013004 13cc2005 00081110     0....0... ......
   367f4:	fbe7ea06 28c3dd0d c6ef26df 270104d4     .......(.&.....'
   36804:	f207ecdb e8f8f4cf dc0eecde d61d14e7     ................
   36814:	f2e401cf 18bce021 fee2161d 08dcebe7     ....!...........
   36824:	e1211003 e5011725 16fc0707 fdd9cf35     ..!.%.......5...
   36834:	eb102cdf cb1135bb fee70ce8 efdb0412     .,...5..........
   36844:	ddca06cb 090d21fd f011d8e4 25ff1e23     .....!......#..%
   36854:	fdf51a4a 1f292bf8 08c5ee23 ea3c2002     J....+).#.... <.
   36864:	343af1cd 06ece330 f328f2f2 b4101fd0     ..:40.....(.....
   36874:	2afe26ed d8f8fa04 270ff315 20e108f4     .&.*.......'... 
   36884:	e2f127f6 05090fe6 e7fbbd22 e7ea12f8     .'......".......
   36894:	0a0c2cf0 1ad90aeb 07f9cb2f 31250f22     .,....../...".%1
   368a4:	ea390ce9 1fd221be 13f00adf f1dc03d6     ..9..!..........
   368b4:	fb3bf005 0d27e518 ef1df5ec 34333c0c     ..;...'......<34
   368c4:	c025ed13 1d1da633 03170ae0 db051d13     ..%.3...........
   368d4:	0237fffd 0ffa1b25 d51f192a feec1a0c     ..7.%...*.......
   368e4:	fee109ed 520017f7 e9edcdfa ffdebfe7     .......R........
   368f4:	f4d50904 fffed0cc 2c0b0aee 07fdd922     ...........,"...
   36904:	1ae726f1 fcc2fae5 2603edfe 27fcfed3     .&.........&...'
   36914:	120f0d13 13f5e623 1ff0da39 1f1a192d     ....#...9...-...
   36924:	051cb3e0 0e410f02 0139cef3 0debf0ec     ......A...9.....
   36934:	e8ddaa0f baee1af9 0c30ddef 2710e9cc     ..........0....'
   36944:	17d9f7d7 f9f429df 3b26f21c e2e24ada     .....)....&;.J..
   36954:	e005f100 06290be7 23e5f8f8 fff6caeb     ......)....#....
   36964:	13f1081f 2803ef03 db291415 041b3108     .......(..)..1..
   36974:	1ef2dcf6 fcee0df9 d7e3eee7 dc13d921     ............!...
   36984:	f5d9dddf 0955f813 53d92403 f81a3921     ......U..$.S!9..
   36994:	12e8d6eb e828dd3a 283114ea 0ff0e1f8     ....:.(...1(....
   369a4:	2c53e7c2 2de324e7 0404e719 f411d0fe     ..S,.$.-........
   369b4:	25ef56d0 082509f1 ddf0d7fb d827f533     .V.%..%.....3.'.
   369c4:	ed1ffbdc cf24d61e e1df1bfb ecf8e426     ......$.....&...
   369d4:	0b110adc 0308082e 0ff8e7ea 07c7e720     ............ ...
   369e4:	1423fdf8 d4210324 ef0ab120 dd401a57     ..#.$.!. ...W.@.
   369f4:	dbe1ff5d d60fc813 e7030bfc 0b1bf624     ]...........$...
   36a04:	d3ac040e 5c1222ff 01c527c5 12ecee1a     .....".\.'......
   36a14:	07b9f0e4 23e9fd2f ffe9fcde 02fef6bf     ..../..#........
   36a24:	fb142312 183fd8f2 0a00e5ac 58e4e726     .#....?.....&..X
   36a34:	20f3f04f 173b3912 1527f0bc def1e701     O.. .9;...'.....
   36a44:	2456c22c 04131fe1 040fec0b d5defafa     ,.V$............
   36a54:	0d55e632 4110de36 1fffc2ca 25f62338     2.U.6..A....8#.%
   36a64:	f048ed0b d61f0e31 251808e7 25411bdd     ..H.1......%..A%
   36a74:	fb0d1e1c ee2ff6b3 d8dbd925 310547e3     ....../.%....G.1
   36a84:	1dee14df 1ae610fb 00f2f8e9 e102ccd4     ................
   36a94:	2520fce0 02c1e4ce dcf8ee32 e749e6fe     .. %....2.....I.
   36aa4:	dcd52d1a f3301bf9 fd011eb7 cd10dae9     .-....0.........
   36ab4:	e41818e6 023cda2c c0e33b05 fc0d1a19     ....,.<..;......
   36ac4:	1d10ecf5 2b202237 16ed10e9 e2200c13     ....7" +...... .
   36ad4:	1ee312f2 2740f327 b6ede9de 15e0cdf9     ....'.@'........
   36ae4:	f60e261c 0c10dbc8 0d07e216 2006231e     .&...........#. 
   36af4:	e0f1f1f6 0ae6f30e dfeef414 ea3c0638     ............8.<.
   36b04:	15fbfecb d90eec09 fa2d2afa 2b1018fb     .........*-....+
   36b14:	0200f9f2 dec02a21 20171ffd e0d8e9e4     ....!*..... ....
   36b24:	e41612e8 de06e30c 1dd40df6 29fb250d     .............%.)
   36b34:	dcebf1ec 24f4e3fd ebdee0f4 dc082302     .......$.....#..
   36b44:	11150c28 db17dbe6 1329ded5 e30df21c     (.........).....
   36b54:	e0e6e9f5 dbe0ede0 0ad62721 f0f8fa07     ........!'......
   36b64:	f6dfe61f 10eee0f4 fdfa091f 15fed6e6     ................
   36b74:	fed7ffdb f12703f0 1cdad806 1e2711d5     ......'.......'.
   36b84:	2816dfbf e8e0e5d5 16fdd635 ba4d120a     ...(....5.....M.
   36b94:	0cfcf20c 2047e103 1ee6ed21 0ee10d23     ......G !...#...
   36ba4:	ef303353 42f91cf5 27eae315 ed27f03c     S30....B...'<.'.
   36bb4:	1bf9d6dd 3ac80a1b 1be71526 b7ec0ade     .......:&.......
   36bc4:	fd33ef02 27e149cd e9f30413 d907f0ec     ..3..I.'........
   36bd4:	eed50d12 efeaf416 2108face dbedf2fe     ...........!....
   36be4:	010a03d3 d20f4a13 171420e0 0cdecbe5     .....J... ......
   36bf4:	40ef0df1 0f0914e4 d8fe1a37 17f5da10     ...@....7.......
   36c04:	1a1df324 0239c525 05d4d0d6 291bd9cf     $...%.9........)
   36c14:	fff40413 1303dc16 f0e54e11 140b1037     .........N..7...
   36c24:	24f0221c 1b431bf1 1d405f0e debe04dd     .".$..C.._@.....
   36c34:	f41cdd23 1515da09 01dce2ca f31611e6     #...............
   36c44:	2fdc220f 0113d813 e203eb0d d5f8e50a     ."./............
   36c54:	0926ed1b ffebf4e9 0cf11606 f9cbfd05     ..&.............
   36c64:	ed0721db 2113240e d5dc18c7 edd70b07     .!...$.!........
   36c74:	eaf2d0da d9e9f7db db24e40f f007f6e9     ..........$.....
   36c84:	f1eafbed def5d60a e3d8e7ee 20d201d9     ............... 
   36c94:	241d0cd4 db21e50f 15d8eb0b 18f91ae2     ...$..!.........
   36ca4:	f611e221 cfe4fe01 15d20421 16d8adf4     !.......!.......
   36cb4:	d8e8da20 1adf2af0 fdfbe222 e1eafef4      ....*..".......
   36cc4:	c5102409 19eee4ff ffff0deb 23d92802     .$...........(.#
   36cd4:	f6e20c1a c7df140f ff0b2903 fc0dd4fc     .........)......
   36ce4:	27f9160e bff41df7 33f0f9ed 12c0faf4     ...'.......3....
   36cf4:	dcc1f890 043f1906 05ebe1df eaf605e1     ......?.........
   36d04:	ffdbeb49 03e0ffff d7c3ecfd df1e053a     I...........:...
   36d14:	0205f908 e6f54835 ffda18f4 e8e3ebef     ....5H..........
   36d24:	16e4e818 f1e73a31 01260f38 e41011ef     ....1:..8.&.....
   36d34:	c2ef14ba 2ce1f103 ff2926e7 2bfdf302     .......,.&)....+
   36d44:	24d7c9f2 e8f8e417 30f207d4 ebe1f101     ...$.......0....
   36d54:	12ec03fa fbdb0a46 e2021dc6 0408f7e8     ....F...........
   36d64:	1b0c1715 f9082d31 ef07f933 2031e32d     ....1-..3...-.1 
   36d74:	130b08d8 fce34b16 f5fdf7da 0710cb21     .....K......!...
   36d84:	cdc2db16 e2d4dbb1 482133e4 f40820e9     .........3!H. ..
   36d94:	25141df0 f40c0935 d51942e4 eb28f02d     ...%5....B..-.(.
   36da4:	d61c1e2b 0201bb04 cdde0320 0808f638     +....... ...8...
   36db4:	0be70815 23f01ef9 2824d6f0 ebe72b1c     .......#..$(.+..
   36dc4:	18e220d9 e908ee03 111bf1d0 faf4f807     . ..............
   36dd4:	f6f42ae2 37bedffb 11e93019 23130225     .*.....7.0..%..#
   36de4:	0f001805 2bff13f1 f6201320 fb02f652     .......+ . .R...
   36df4:	fcc0041b f4dff610 11fef336 3fe004ea     ........6......?
   36e04:	ede8cff5 0f25ead1 26ea21c7 1c260d20     ......%..!.& .&.
   36e14:	3deac7e6 01f0e4e9 1ff9f945 f224d829     ...=....E...).$.
   36e24:	010f12c8 18dd200d 03cafafc ddf1f9fb     ..... ..........
   36e34:	08f5dfec e1f415df f0091006 e03838e1     .............88.
   36e44:	1d28f6ff 04ec06de 22001bd2 280205fa     ..(........"...(
   36e54:	fede182c 0618ff13 ebe5d90c f1e6cd11     ,...............
   36e64:	0b00cb20 f3171f10 202af42d eb250fd5      .......-.* ..%.
   36e74:	f0132ef8 500ab518 101e1f22 daea11f1     .......P".......
   36e84:	2100e0f0 f22121f9 da00e7df ed424500     ...!.!!......EB.
   36e94:	05201de1 291df620 0bf82516 333e2002     .. . ..).%... >3
   36ea4:	f1fa2dea 20db002d d900f83c 4a28da27     .-..-.. <...'.(J
   36eb4:	06f3ec2d 512dd229 f7e01f0a e50f03d6     -...).-Q........
   36ec4:	100827ca e1e0c714 25240cdd 1bffe636     .'........$%6...
   36ed4:	dbed0408 eec00b2a 19e3cad0 cc102009     ....*........ ..
   36ee4:	f0e5e3f5 0e34f413 053b0ddb e129fd1c     ......4...;...).
   36ef4:	e12b0523 f91320df 2ae1fdda d1f2051c     #.+.. .....*....
   36f04:	f0f80204 36040af7 0615bc1f 082407cb     .......6......$.
   36f14:	ffdaf729 f72e08fd bc0efa17 e7eddd07     )...............
   36f24:	f42ef61d fdf1071c f0d8d3df dff2f7e2     ................
   36f34:	f5dd0205 222529c1 f9143022 eef91419     .....)%""0......
   36f44:	1226d9f2 20f909b5 ecf7f1ee e7310332     ..&.... ....2.1.
   36f54:	201a0320 1aee0729 d6dff115 2de5190e      .. )..........-
   36f64:	0ac6fbef 05f9da0b 2c1629f9 f6f910dd     .........).,....
   36f74:	dd25cd2c d7260ce1 e4110201 35d9dd1a     ,.%...&........5
   36f84:	1014e1f3 163f060b eb262711 f6074af1     ......?..'&..J..
   36f94:	fafb2a04 e8fcf506 de17aa01 05df2f29     .*..........)/..
   36fa4:	f90f2f17 ba041611 1adcd900 d537050a     ./............7.
   36fb4:	23e9e603 eef5ef0c d99a54fa 0f08283f     ...#.....T..?(..
   36fc4:	e600e4e3 12c3fcf2 1d30222d d6143c63     ........-"0.c<..
   36fd4:	ea16d301 e529da21 1afb0811 0cef23fd     ....!.)......#..
   36fe4:	09f73ff1 de19ddc6 201023f4 c4e2c5fc     .?.......#. ....
   36ff4:	0afdc2e1 53e00fd1 fe2d27ce 0122060e     .......S.'-...".
   37004:	d4dc0026 5be5f731 01f1dd0e 2b06f11b     &...1..[.......+
   37014:	024723e1 e8c816d3 1f29ea1f e732c5f5     .#G.......)...2.
   37024:	ea07e0fc e81c1fd2 e3e818eb 3f14eb47     ............G..?
   37034:	f2fdd8de 270cdde9 1a2729ff c5d813fb     .......'.)'.....
   37044:	fe08f8e0 f1dbdff6 1d0de92a e1101c0e     ........*.......
   37054:	2356def3 24275312 0b24d3fd e8f3f8e7     ..V#.S'$..$.....
   37064:	24fa0f13 21fe00ff f70cf1de d918fcf7     ...$...!........
   37074:	1611f70f dd2b0bfc 17d20825 e0d51810     ......+.%.......
   37084:	08ea52e2 ef191a2b 171b06ff b4d7faec     .R..+...........
   37094:	fa34d936 f71c0538 de2a1f2c 140e0b2b     6.4.8...,.*.+...
   370a4:	dda4e836 d30a1ce8 3a1d36e4 e5f10214     6........6.:....
   370b4:	e81321de e518f0c6 c22f1fea 18f50c13     .!......../.....
   370c4:	e8de27da fc1e0a1f 1335a4fa ede033fc     .'........5..3..
   370d4:	e315ea26 fa4320fc 21391743 1c0b0fdd     &.... C.C.9!....
   370e4:	1a13f6f0 06f5fade 032326e9 ec12d809     .........&#.....
   370f4:	cfd90621 efe212db f2fcd3db 0d1912eb     !...............
   37104:	08eccdf1 d40e0619 2418071f fb19ffff     ...........$....
   37114:	0107de03 07f720ff fbf2d8ce f602e6d6     ..... ..........
   37124:	fed90cdf 0fd8e4e2 1be2e8fe 2110fb1a     ...............!
   37134:	05eb11f0 f51700fa 18dff810 23da1104     ...............#
   37144:	fbee28e1 0ff4fb04 edd6e4ea 1717d6f3     .(..............
   37154:	04efe41f f5ccd3f1 0db91605 0fcd10ff     ................
   37164:	e0de0112 0f2629fc c522fcde dcce10f4     .....)&...".....
   37174:	140df4d2 011d2ced 15ede9e4 fb0b1730     .....,......0...
   37184:	a8e8f4ee 03e02319 ed150314 e02f0df3     .....#......../.
   37194:	005fd804 f1dbbb36 18dc1ff4 d7f3e0e9     .._.6...........
   371a4:	24f2caba 0528f3ea fbf2f4fb 0f3156dc     ...$..(......V1.
   371b4:	090b24f5 fd26f5fc 20c8e517 3bdef231     .$....&.... 1..;
   371c4:	2d082734 f3ea17f9 f40cdc10 17bed818     4'.-............
   371d4:	fa011f03 470a081d e7d7efd5 f2130109     .......G........
   371e4:	3f24d101 11eb0322 f5d9d9fc e5251bd9     ..$?".........%.
   371f4:	1225bd20 04e3fcef fae838ef 2b260d28      .%......8..(.&+
   37204:	12fe0816 1feaea35 0805d4da ebe2220e     ....5........"..
   37214:	ebcfc0e0 dadfffc5 23071530 46bb0ff3     ........0..#...F
   37224:	17f81be2 45dbfd10 03de0014 05e8311c     .......E.....1..
   37234:	21da0b2d eed30b26 df41340c e1c5f44a     -..!&....4A.J...
   37244:	2a2328f5 3c21fef4 d311d7da f4fd2cf2     .(#*..!<.....,..
   37254:	e51bf7fc ec07d105 ebf9f820 baf3f715     ........ .......
   37264:	270eefe6 f02004bb 284c1232 1c0bedee     ...'.. .2.L(....
   37274:	1ff2030b deeddf06 1ff900e1 f104e8e0     ................
   37284:	b2090326 b53fdcf7 0c05cf51 0e04c013     &.....?.Q.......
   37294:	ee112d28 b14ae3df d4f42512 e5221a25     (-....J..%..%.".
   372a4:	ddfc27a2 14031afd 1cc62e1d 29def310     .'.............)
   372b4:	32e2011d dbdc0cb7 effe03be 0cf7c421     ...2........!...
   372c4:	36090cf3 320d1bde d9e00bdd fe230201     ...6...2......#.
   372d4:	faeeffd3 f0f3ec0d 0fe709f5 0608fb33     ............3...
   372e4:	1926ddfd 02fb05f8 e41f1a06 f2100e20     ..&......... ...
   372f4:	ef201bd9 011b13dc 13d1e3e5 ecf8fb00     .. .............
   37304:	08f9e413 d60e11e3 f3f20713 15ded80b     ................
   37314:	f1f5e1da 150dffe2 0b0e2810 07fde2f8     .........(......
   37324:	0ffbd72a 0c07deee e7f314f2 f6d4dce9     *...............
   37334:	dd1ce6f2 f9ea01e4 dc2afb1d efd713de     ..........*.....
   37344:	1d0323ff f8e1def9 e5f8f602 eaec20ee     .#........... ..
   37354:	03f1d6f6 20d812f0 de1f0fd9 14ded6df     ....... ........
   37364:	db04f9fc 16dcd6fc e4ce05d5 ec101c07     ................
   37374:	ea13f0d9 fae3f4f1 f8daddf7 d70a0ad5     ................
   37384:	eaf1f5ef d7f00c03 14f7d2eb 0622fde6     ..............".
   37394:	1106ea06 dd010d1c 23dd15f0 00ecf9f8     ...........#....
   373a4:	241ce805 e5f01714 f6291afe dce7d61c     ...$......).....
   373b4:	00b7e817 faefc941 f30c30d5 edf80ffa     ....A....0......
   373c4:	0cd4072e 2b04e21f 891b3bdc 26fae74b     .......+.;..K..&
   373d4:	19c6eedf d2fa31ef 1de0f9ed 1ef701c7     .....1..........
   373e4:	2920ec28 fd03720e f326d7fc 481af134     (. ).r....&.4..H
   373f4:	e5fd12ea 1f27debf f005e5f6 24072203     ......'......".$
   37404:	fbf3dc26 f64201d5 02ed0c2b 0015f642     &.....B.+...B...
   37414:	094bc526 22b6f7db 20ec17d8 f1ef3637     &.K...."... 76..
   37424:	0ee00a03 450ef53b 10491940 0ad4f736     ....;..E@.I.6...
   37434:	d9c2ed2c 010ff600 1aedd45b dd1ef2d1     ,.......[.......
   37444:	f6f0da19 0ff90acc 2ae4ccdb f6e00ad8     ...........*....
   37454:	c328e951 f5121104 02171b43 d90aeefa     Q.(.....C.......
   37464:	ec37f00e e929edf0 db1b12eb e20aecfa     ..7...).........
   37474:	fdf625f2 0ac02e29 1800eb09 e8ce100b     .%..)...........
   37484:	00e6fec9 07dc1012 d5e1d9f2 0208e0f7     ................
   37494:	0ed2bf0c e5f9e602 28cc1f12 1ddce2f3     ...........(....
   374a4:	eaf0d7f4 cf2003fd d61224f6 e7080e2d     ...... ..$..-...
   374b4:	06fa03da 0226d7f6 1bfaea20 23e5dc08     ......&. ......#
   374c4:	2ac40ee3 28181bfa 1d1bfef7 fee3dd24     ...*...(....$...
   374d4:	f302ec17 f4fae8fc 150ce119 1f170dbd     ................
   374e4:	ed27ee18 daff4aef 1002280d 1ae90527     ..'..J...(..'...
   374f4:	0b3b1bd1 08120f1c 21bff033 ecc1ffde     ..;.....3..!....
   37504:	02f3fd34 22e4e020 3f1c0e19 0d2a1006     4... .."...?..*.
   37514:	0707b6c3 0a0ae814 ebf61a15 b017e8d5     ................
   37524:	0ed714c0 12d5fd31 182f24c6 f6eeec10     ....1....$/.....
   37534:	dd42121f e00a27b7 10d71f28 562f59ed     ..B..'..(....Y/V
   37544:	19dc2621 b015ec27 e6f2cc20 130cbc2a     !&..'... ...*...
   37554:	ffe7e8f9 dcfb2929 fa3c2018 08ed14eb     ....))... <.....
   37564:	1d2b11de ea30d60f 4d19fce1 06ffb7d5     ..+...0....M....
   37574:	1919dcf9 05eb160e 25cb021a 4fef17ea     ...........%...O
   37584:	e2040001 10050d5f ec043321 f1d21736     ...._...!3..6...
   37594:	27051321 25c8d905 f512f006 22def9e5     !..'...%......."
   375a4:	0323cde8 e01f18e8 15230419 ede20017     ..#.......#.....
   375b4:	28ff0b0d dadc18cc 05da1ce1 033515e0     ...(..........5.
   375c4:	21302bcc dec428ea 23d616f5 c42629f8     .+0!.(.....#.)&.
   375d4:	1ffc3e3d eafa0d22 09073df9 ef40b105     =>.."....=....@.
   375e4:	01e10204 fc291119 d6f027d7 f9f1e20a     ......)..'......
   375f4:	fe280ce3 18f20801 0af9f31c 1a15140f     ..(.............
   37604:	04de0002 3ff2d9e6 ea14ea1f d4e8e4df     .......?........
   37614:	ee07b0e8 d2f6f32d df2df119 12041af3     ....-.....-.....
   37624:	0030de05 f5230d0e f51c0224 0b00cd42     ..0...#.$...B...
   37634:	f2f23544 f9eabde0 ebf4121f fb1ed416     D5..............
   37644:	ecb726ec 16d905f3 d0fad9d8 211f1d29     .&..........)..!
   37654:	250ed8e4 1e53213c 0007da18 ec0200e9     ...%<!S.........
   37664:	fedc28b9 18ede606 dc22f82a e81b0dee     .(......*.".....
   37674:	27e115e3 1726f4e2 201304f4 08e0e0f9     ...'..&.... ....
   37684:	1e07ebdb 0aeccb01 0a190fea 19f7e015     ................
   37694:	ea0c1a05 dd0cf3e1 11f30eda ea1c29ea     .............)..
   376a4:	20d90610 130f06f0 140f06ea e2fff60c     ... ............
   376b4:	dbf106d8 29f00dff 14e61504 2209faee     .......)......."
   376c4:	0c061102 fbe80eee e512edf0 e0c40308     ................
   376d4:	d8f8ecf6 c7f42c20 e627e1c1 122009c5     .... ,....'... .
   376e4:	f8fa16c2 01060a0b 2028fbda 2334e6f5     ..........( ..4#
   376f4:	d42dfa1d d41f12fa 01f53bdd e904dfc8     ..-......;......
   37704:	e5eb2801 1bf0dcf6 18c5360d e2fe1103     .(.......6......
   37714:	4bd523d6 2720ea1d 15ba12b3 e8041ae0     .#.K.. '........
   37724:	d9daf5f9 0d09f428 0b22deee 241d190d     ....(....."....$
   37734:	cedc34fb f5dce529 fa03151c 19e40d2a     .4..).......*...
   37744:	e10b0ab4 f4e5efce 12e5e8e9 badce1e3     ................
   37754:	0d23e8fb 2929f714 2f15320a 21e83a37     ..#...)).2./7:.!
   37764:	f3f7a6e3 1e25fad0 e90f55f1 023cd30b     ......%..U....<.
   37774:	f62111d8 1fe0d616 f304003b 1bfa191a     ..!.....;.......
   37784:	e6cb1dde 24dee0d7 22313bf2 03de06f1     .......$.;1"....
   37794:	1903f4fb 1d192a23 f3b5082a 18ebb904     ....#*..*.......
   377a4:	da152e1b f5e9fe0c d7e00fec fddddbca     ................
   377b4:	fe0c1221 19e1f10b f0f8f02a 591f0c31     !.......*...1..Y
   377c4:	19100e10 4412e1ec 0be2e12c 080d3d3d     .......D,...==..
   377d4:	0129e420 cc02e332 17160d16 09e5fc03      .).2...........
   377e4:	f70acacb 1dcde313 f30ddcea fc02f9da     ................
   377f4:	180cef2f 0826dd0f c9e5180a f1c0f62c     /.....&.....,...
   37804:	e3f40bf2 2814e72d ff2300d0 27282320     ....-..(..#. #('
   37814:	0c0c29fd 3517caee 1eea201a e32ee4db     .).....5. ......
   37824:	e6d0f1fd 05f11f07 d116caeb f30a15e5     ................
   37834:	0effd90d d43bc9f4 30ecd824 f0d70623     ......;.$..0#...
   37844:	270efced 17f3f8e0 eb08d9bf 021703d9     ...'............
   37854:	06fa04f0 dee720ec ddf8f9fc 3204ffee     ..... .........2
   37864:	022fdb29 223dd6fb f61a2c10 fd1df2fb     )./...=".,......
   37874:	3932dbf1 f4ee22de b7f90816 1130e625     ..29."......%.0.
   37884:	f6e3fbf9 ce2423b0 cd0fd3fe 07efdd22     .....#$....."...
   37894:	08f00e23 fce95d13 f00502e1 eb07080e     #....]..........
   378a4:	fcf11dda 1804e1ba 2a2445f4 f5e5ff21     .........E$*!...
   378b4:	f3141deb 2619edf2 2af3ea01 19f017e2     .......&...*....
   378c4:	f9f7ef03 f3bd0100 1efbf703 f809d901     ................
   378d4:	0614ea39 d6dcddea f92417bb 391f2736     9.........$.6'.9
   378e4:	f4a70cda ffe915fe e603db59 212237f7     ........Y....7"!
   378f4:	c803e531 3129e61d 1b18daf3 fb27bb1c     1.....)1......'.
   37904:	190bfd23 0a26f00f def7f635 e402e502     #.....&.5.......
   37914:	e2e9e6ec 1621f207 fcab1df2 fcf30dca     ......!.........
   37924:	23021a20 1215180b 0b14fcb9 d8093929      ..#........)9..
   37934:	020a00ca 1d02eb0d 1f080116 05fbde0e     ................
   37944:	d40d36f8 26161c08 e81ada0d c0f7d3df     .6.....&........
   37954:	291ae0ef e70a18db ef18df28 19f7a92a     ...)....(...*...
   37964:	2ab339ed 300b332a 0c1ffffc de18d6f8     .9.**3.0........
   37974:	212c1fe6 08daeedd 19f51ff5 20e4e8dc     ..,!........... 
   37984:	f8fe04fe 07f0171a 281e52f3 1d2bd650     .........R.(P.+.
   37994:	ee18f005 ecd8d4c3 e9eee444 3ce91818     ........D......<
   379a4:	e7f02119 0d24f6fc e3f51fc3 edd107fe     .!....$.........
   379b4:	2ee2a20f 2d0b3a27 fd0609bb fe2608f6     ....':.-......&.
   379c4:	1300f5bf f7ddc602 21f1f9bd c8281efe     ...........!..(.
   379d4:	e13016e2 e128373d ee56db0a e11fdefe     ..0.=7(...V.....
   379e4:	eaf7b0df 24e9e7b6 dae818e7 01fadfde     .......$........
   379f4:	38270d19 dad822dc ea0b00f0 22f81423     ..'8."......#.."
   37a04:	47e4dd6a e333edf6 f3121cee 14e0dbe1     j..G..3.........
   37a14:	f73bf2ee 1224d3be c90909d0 ec2bd4d8     ..;...$.......+.
   37a24:	1218dd1f 0514320f eff822f3 092418ee     .....2..."....$.
   37a34:	2223fd0c 1c34e732 fb40f13b f5042535     ..#"2.4.;.@.5%..
   37a44:	26d8fc26 e706c8e8 d7ff1ea5 1cf8df08     &..&............
   37a54:	addd2f11 3133fbd9 08eed9e4 0deac419     ./....31........
   37a64:	11f4c71b 15eb25da fe2310ef cbccda27     .....%....#.'...
   37a74:	01fbee09 26062313 e8f3e002 c0231017     .....#.&......#.
   37a84:	fa1435f0 1ad62409 f51f2b30 0d28310d     .5...$..0+...1(.
   37a94:	da0b210b 0f1c1108 230725f7 000c0f0d     .!.......%.#....
   37aa4:	f40fd7fc 2608fc1c 18efe917 fcf92832     .......&....2(..
   37ab4:	da061d22 ec080114 54f0e4df f507ebdd     "..........T....
   37ac4:	d8202824 e5dfb612 64210b06 21f41cda     $( .......!d...!
   37ad4:	fc09d817 d61605e1 f9c422d6 32ea39ee     ........."...9.2
   37ae4:	2d0e27f5 d4fe3a1c ea15d832 e8f9d907     .'.-.:..2.......
   37af4:	09e302f7 1a1fef29 ebe50eee e1e00640     ....).......@...
   37b04:	dcdab5ec 08d81417 2ce9f52a 0dd3dfef     ........*..,....
   37b14:	de240a18 0e10e016 6e191edf 3deaf614     ..$........n...=
   37b24:	13b9e341 15ffb60f efe4fb28 4004d804     A.......(......@
   37b34:	e4fc28e7 3e09d9fe 07eeefdd d8f40ae8     .(.....>........
   37b44:	281ae9fb 3ee162df de071ccb 1cfed3f9     ...(.b.>........
   37b54:	19040d2c 22ec23fc 4cf802ce 331915e9     ,....#."...L...3
   37b64:	13b92206 1b05d5cc e217da36 e1d5f81a     ."......6.......
   37b74:	d9f6ee13 f7010f17 0ad5ed24 013611f4     ........$.....6.
   37b84:	dfd5e405 1802ecee de2615f1 f7282af8     ..........&..*(.
   37b94:	e2e00ec3 e31602f7 13d10bd8 fbce0fd2     ................
   37ba4:	e001f4f9 13e91817 eb15eae7 eaf51b01     ................
   37bb4:	0ae213cb ebfa0622 e5da1314 21deebcf     ...."..........!
   37bc4:	e2270ceb f5fe211a 11eafdd4 e61224d9     ..'..!.......$..
   37bd4:	e411f71b 08e90701 e2e829d3 f3211107     .........)....!.
   37be4:	e0df0ce5 07ecdad7 0b3de402 ebf24bd3     ..........=..K..
   37bf4:	f015010d 40341321 1622dbdf 28dff0fa     ....!.4@.."....(
   37c04:	fcebff05 05d60025 d7f013ef f32ace34     ....%.......4.*.
   37c14:	2e152e0c ddeaefe2 e20fddf8 e258bce9     ..............X.
   37c24:	ea260e20 342f0ffc f545efb6 1c112428      .&.../4..E.($..
   37c34:	fcd814d6 252500ff 19dd2f09 0efd0bc6     ......%%./......
   37c44:	16e6e4e3 26e33923 e828f5e0 190109fe     ....#9.&..(.....
   37c54:	250b2b10 dedf1e37 f62c2603 2124e6fd     .+.%7....&,...$!
   37c64:	f639e9ef e417e0d2 034ce003 331f4003     ..9.......L..@.3
   37c74:	ec1347ef bbd7e800 0f0fe906 e70c07d3     .G..............
   37c84:	11d547f1 9df7d8fe eddc1b18 09c524f2     .G...........$..
   37c94:	0b2be14b 111d0ddd 0ff417f8 0cba17e2     K.+.............
   37ca4:	14fb2332 0ffe1fcf 13b92301 29ec0dcb     2#.......#.....)
   37cb4:	250526e5 fb201710 f4224012 1ce7d7f2     .&.%.. ..@".....
   37cc4:	2634dde0 d5e81318 daff23d5 25f402e1     ..4&.....#.....%
   37cd4:	221e04e3 3c0ce1f3 ca230a14 0d12f9de     ..."...<..#.....
   37ce4:	dbead013 1a18fde6 0ade08d9 f41cd41b     ................
   37cf4:	070a03ba f3adead5 fa202204 f31f1505     ........." .....
   37d04:	d9e2ec09 0d0fff22 02d7f41d fbe0e503     ...."...........
   37d14:	452204ec cb22dfb8 091b441a f50bf21f     .."E.."..D......
   37d24:	05cfd940 07f21629 f422fb09 f303260b     @...)....."..&..
   37d34:	efbd0c17 dc09ffc6 2822fcdf 471d33de     .........."(.3.G
   37d44:	d715192f 1b1ae2fa 26e8fe0a 070b46fe     /..........&.F..
   37d54:	ade0e0e6 f00ef2f8 f0d2f21c e8e2d7e7     ................
   37d64:	0dd6d6da f617fc23 e51bde1a f52be915     ....#.........+.
   37d74:	38020a1f c21e04ed e7e03afc 28e1f32f     ...8.....:../..(
   37d84:	e22501f2 bfd1f820 dbf3f603 1c0f28d3     ..%. ........(..
   37d94:	f2fdd7e3 13e7e9d2 d112b739 d40adcf0     ........9.......
   37da4:	202715e2 e1170204 e9e1dc03 eabbe00f     ..' ............
   37db4:	31e0114d fd1ff7f8 23e7e7fa 0160163f     M..1.......#?.`.
   37dc4:	013ae410 ed1eee0c 1bfd0bfa 170ff8f1     ..:.............
   37dd4:	e4000ffe 9fd3f50b 13ddfad4 ebe95632     ............2V..
   37de4:	fbfa1531 01df1120 26fa04e0 06f9f7f7     1... ......&....
   37df4:	5afe27ea 05b51e18 2af9f828 e8ffed09     .'.Z....(..*....
   37e04:	0e0d11ca 400835e5 e0ebe804 dc04cf1b     .....5.@........
   37e14:	e82b011b 4305df3b 0d2a0816 1af0edf9     ..+.;..C..*.....
   37e24:	e803f7d8 0f10e0e8 1eebdeea 13d913f0     ................
   37e34:	1a22d8e1 22021ddb 1111ded8 e4e5fe1d     .."...."........
   37e44:	0e15f735 26f746f8 f3da3401 c61e0702     5....F.&.4......
   37e54:	dbcb1d0d ad381ea3 ea28072f ec2f0016     ......8./.(.../.
   37e64:	062027ad d917d3fd 2debcec4 08241723     .' ........-#.$.
   37e74:	f7092845 e1e8db2a 0418c937 f2d31503     E(..*...7.......
   37e84:	13e3fcc2 e8e8fe2e eee826ef 130ef31a     .........&......
   37e94:	00f217f9 fa1b1fe6 ebd426e0 be20dbe4     .........&.... .
   37ea4:	e7c0e013 59cabbf3 f0dcccf4 e1f702e1     .......Y........
   37eb4:	b8f3edf2 f6020343 0839fab3 1832f932     ....C.....9.2.2.
   37ec4:	071f0900 2d072826 0ff427fa e600d143     ....&(.-.'..C...
   37ed4:	e01cfcf4 0d03012c 132bd801 18e72dd6     ....,.....+..-..
   37ee4:	fb09e6f1 fe1cefdc fc24fdd5 f4310f04     ..........$...1.
   37ef4:	2af3f41b dff6ef15 db2819d5 db1423f2     ...*......(..#..
   37f04:	f33f0c0d efd50cd3 0212011b fbedf01e     ..?.............
   37f14:	282cebe1 08e1e25a 18bb070c 7f1cf4f3     ..,(Z...........
   37f24:	f301d447 f2dc22f0 cb08c405 def7eb3c     G...."......<...
   37f34:	1ff2330e e50703e3 e7290024 fff50326     .3......$.).&...
   37f44:	d8e5e421 f7f0e118 2c18e93a f31ef708     !.......:..,....
   37f54:	0e0d0d16 dffe0106 dc2c2a17 d72010e2     .........*,... .
   37f64:	e0f9e2f5 da312425 26f2de13 fcf2cd18     ....%$1....&....
   37f74:	fbe4e8fd fcf0092f d7eef7c9 ded9ecd0     ..../...........
   37f84:	1f11d921 020005e3 0325040e 372f3b1c     !.........%..;/7
   37f94:	e5247bf2 d921c5f4 0ceeda0b e2d34725     .{$...!.....%G..
   37fa4:	da530dd6 26d6d2ec 0324daf9 082d2c0d     ..S....&..$..,-.
   37fb4:	0dcd08d6 02d7e7d8 1b081ef8 25fcf30c     ...............%
   37fc4:	12ea05ea def3fedf 512feb21 00000000     ........!./Q....
   37fd4:	fffffa1a 00000004 00000008 ffffffff     ................
   37fe4:	00000064 00000000 00000000 00000000     d...............
   37ff4:	fffffa3a 00000004 000000ac ffffff95     :...............
   38004:	fffffffb ffffffd9 0000005d 00000001     ........].......
   38014:	fffffff4 00000007 00000011 00000048     ............H...
   38024:	00000029 0000002c fffffff7 00000045     )...,.......E...
   38034:	ffffffff fffffff8 00000000 ffffff92     ................
   38044:	0000000f 0000002b ffffffcf 00000055     ....+.......U...
   38054:	ffffffb3 ffffffa3 ffffffd5 ffffffd5     ................
   38064:	ffffffee 0000002a ffffffc3 ffffffae     ....*...........
   38074:	ffffffae 0000003c 0000007a 00000042     ....<...z...B...
   38084:	00000009 ffffffb6 ffffffcd fffffffe     ................
   38094:	ffffffb2 00000004 fffffffc ffffffcd     ................
   380a4:	ffffff8f fffffff8 00000000 00000000     ................
   380b4:	fffffafa 00000004 00000190 000000b1     ................
   380c4:	00000010 00000005 0000007d 000000bd     ........}.......
   380d4:	00000064 0000009b 00000043 ffffff2f     d.......C.../...
   380e4:	000000f6 00000024 00000011 ffffffe8     ....$...........
   380f4:	000000f1 00000098 ffffff88 0000011c     ................
   38104:	00000007 0000005c 000001ca 00000092     ....\...........
   38114:	000000a9 00000129 000000dc 000000a4     ....)...........
   38124:	000000d2 00000088 000000a4 00000045     ............E...
   38134:	00000030 000000e9 ffffffb2 000000f2     0...............
   38144:	000000e4 000000bd 00000029 000000cd     ........).......
   38154:	00000052 00000096 00000080 00000046     R...........F...
   38164:	ffffffe2 0000002e 000000df 000000d2     ................
   38174:	fffffffb 000000ac fffffff6 00000076     ............v...
   38184:	000000bf ffffffbd 0000008a 00000034     ............4...
   38194:	0000009c 000000b8 00000031 ffffff80     ........1.......
   381a4:	000000b6 00000014 000000ee ffffff93     ................
   381b4:	00000050 ffffffa7 0000005c 000000a6     P.......\.......
   381c4:	0000005f 0000014c ffffffed ffffffa5     _...L...........
   381d4:	000000d6 0000006b 00000006 fffffff8     ....k...........
   381e4:	0000009f 00000070 00000066 ffffffc9     ....p...f.......
   381f4:	0000009a 00000088 ffffffed 000000bb     ................
   38204:	ffffffa8 000000f7 00000113 000000d8     ................
   38214:	00000028 0000008e fffffff6 000000b3     (...............
   38224:	00000016 ffffffc3 0000007d 000000b8     ........}.......
   38234:	00000042 0000010b 00000073 0000006b     B.......s...k...
   38244:	000000f2 00000007 00000093 00000000     ................
   38254:	fffffc9a 00000004 00000190 000003d1     ................
   38264:	fffffff2 000002a6 ffffffc0 00000776     ............v...
   38274:	00000413 fffffe1d ffffffc0 000004aa     ................
   38284:	ffffff7a 00000030 fffffe66 00000217     z...0...f.......
   38294:	000000ce fffffeda 00000020 00000250     ........ ...P...
   382a4:	fffffe24 0000005d 00000179 000001a3     $...]...y.......
   382b4:	ffffffc4 fffffce1 fffffd2f 00000193     ......../.......
   382c4:	000007cd 0000058d 000001cd fffffea1     ................
   382d4:	fffffdfa 00000067 fffffe40 fffffb7c     ....g...@...|...
   382e4:	fffffe71 00000362 ffffff67 000001fd     q...b...g.......
   382f4:	fffffc76 000002fd fffffd77 000002b9     v.......w.......
   38304:	000001b2 fffffe90 0000044c 000000e7     ........L.......
   38314:	00000097 0000001b fffffe27 fffffd02     ........'.......
   38324:	fffffeda fffffd52 ffffff7d ffffff93     ....R...}.......
   38334:	000001f5 fffffe79 fffffd13 fffffd25     ....y.......%...
   38344:	fffffcca 00000236 fffffd4a 00000142     ....6...J...B...
   38354:	00000377 000001a4 000005c3 ffffff20     w........... ...
   38364:	ffffff50 fffffdd4 0000080c 00000170     P...........p...
   38374:	fffffdc6 00000061 fffffec2 00000159     ....a.......Y...
   38384:	00000186 0000037d fffffef5 fffffe3b     ....}.......;...
   38394:	fffffed0 0000046b fffffed4 fffffe90     ....k...........
   383a4:	00000028 fffffeca fffffde7 fffffe84     (...............
   383b4:	000001bd 000000c3 fffffe93 0000009f     ................
   383c4:	fffffdc8 fffffec6 fffffe8e fffffe2d     ............-...
   383d4:	fffffe04 ffffff23 fffffd73 fffffef1     ....#...s.......
   383e4:	00000156 0000013f 0000018b 00000000     V...?...........
   383f4:	fffffe3a 00000004 000000c8 00000bd3     :...............
   38404:	fffff97c 000000e5 00000cc1 0000074a     |...........J...
   38414:	00000d85 00000998 fffffd8d 00000fbf     ................
   38424:	00001a36 000000bf 00000545 fffffd8c     6.......E.......
   38434:	00000d08 00000550 fffffa2a 0000086e     ....P...*...n...
   38444:	000008e4 fffffd08 00000953 00000e66     ........S...f...
   38454:	0000109f 00000db9 fffff2e6 00000e9e     ................
   38464:	0000069e 000016f3 00000676 fffffbe6     ........v.......
   38474:	00000b5d 0000047b 00001337 00000f1c     ]...{...7.......
   38484:	ffffffc2 000009b5 00000994 000001ad     ................
   38494:	fffff898 0000129f 00000d0c fffffa91     ................
   384a4:	fffffd42 000004a0 00001463 00000b0f     B.......c.......
   384b4:	00000b67 ffffff0a 00000fe5 ffffff8d     g...............
   384c4:	00000793 00000000 00000000 00000000     ................
   384d4:	ffffff1a 00000004 00000028 00000d73     ........(...s...
   384e4:	fffff2af 00000cde 00001c50 000021aa     ........P....!..
   384f4:	00002cd4 00000658 00001430 ffffd9dc     .,..X...0.......
   38504:	fffff4e3 00000000 ffffe654 00000000     ........T.......
	...
   3851c:	ffffe664 00000000 0000000f 52494c4d     d...........MLIR
   3852c:	6e6f4320 74726576 002e6465 00000001      Converted......
   3853c:	00000014 000e0000 00040018 000c0008     ................
   3854c:	00140010 0000000e 000002f8 000002ec     ................
   3855c:	000002e0 00000014 00000004 00000004     ................
   3856c:	6e69616d 00000000 0000000a 0000027c     main........|...
   3857c:	00000218 000001c8 00000184 00000134     ............4...
   3858c:	000000f0 000000c8 00000078 00000040     ........x...@...
   3859c:	00000004 fffffe1a 09000000 00000004     ................
   385ac:	00000024 00000018 0000000c 00060000     $...............
   385bc:	00040008 00000006 3f800000 00000001     ...........?....
   385cc:	00000015 00000001 00000014 fffffede     ................
   385dc:	08000000 00000003 00000018 0000000c     ................
   385ec:	00000004 ffffe738 00000001 00000014     ....8...........
   385fc:	00000003 00000013 00000008 00000005     ................
   3860c:	fffffe86 08000000 00000003 00000024     ............$...
   3861c:	00000018 0000000c 00060000 00070008     ................
   3862c:	00000006 01000000 00000001 00000013     ................
   3863c:	00000003 00000012 00000007 00000004     ................
   3864c:	000a0000 00040010 000c0008 0000000a     ................
   3865c:	00000002 00000010 00000004 00000001     ................
   3866c:	00000012 00000002 00000011 00000006     ................
   3867c:	ffffff82 05000000 00000001 0000002c     ............,...
   3868c:	00000020 00000004 fffffee6 01000000      ...............
   3869c:	00000002 00000002 00000002 00000002     ................
   386ac:	00000001 00000011 00000001 00000010     ................
   386bc:	fffffed6 01000000 00000024 00000018     ........$.......
   386cc:	00000004 fffffec8 01010000 00000001     ................
   386dc:	00000001 00000001 00000010 00000003     ................
   386ec:	0000000f 0000000b 00000003 000e0000     ................
   386fc:	00080018 0010000c 00140007 0000000e     ................
   3870c:	05000000 00000001 0000002c 00000020     ........,... ...
   3871c:	00000004 ffffff72 01000000 00000002     ....r...........
   3872c:	00000002 00000002 00000002 00000001     ................
   3873c:	0000000f 00000001 0000000e ffffff62     ............b...
   3874c:	01000000 00000024 00000018 00000004     ....$...........
   3875c:	ffffff54 01010000 00000001 00000001     T...............
   3876c:	00000001 0000000e 00000003 0000000d     ................
   3877c:	0000000a 00000002 000e0000 0008001a     ................
   3878c:	0010000c 00140007 0000000e 05000000     ................
   3879c:	00000001 0000003c 00000030 00000014     ....<...0.......
   387ac:	000e0000 00070018 000c0008 00140010     ................
   387bc:	0000000e 01000000 00000002 00000002     ................
   387cc:	00000002 00000002 00000001 0000000d     ................
   387dc:	00000001 0000000c 000e0000 00000014     ................
   387ec:	000c0008 00100007 0000000e 01000000     ................
   387fc:	00000030 00000024 00000010 0010000c     0...$...........
   3880c:	00080006 0007000c 0000000c 01010000     ................
   3881c:	00000001 00000001 00000001 0000000c     ................
   3882c:	00000003 00000000 00000009 00000001     ................
   3883c:	00000001 00000015 00000001 00000000     ................
   3884c:	00000016 00002084 00001f78 00001ca0     ..... ..x.......
   3885c:	0000177c 00001700 00001684 00001638     |...........8...
   3886c:	000015bc 00001538 000013fc 00000fa0     ....8...........
   3887c:	0000075c 00000658 000005ac 000004a0     \...X...........
   3888c:	000003f4 000002e8 0000023c 000001a8     ........<.......
   3889c:	00000104 00000070 00000004 ffffdfe8     ....p...........
   388ac:	09000000 00000054 00000016 0000003c     ....T.......<...
   388bc:	00000014 00000004 00000002 ffffffff     ................
   388cc:	0000002b ffffe0ec 00000018 00000004     +...............
   388dc:	00000001 ffffff80 ffffffff 00000000     ................
   388ec:	00000001 3b800000 00000008 6e656449     .......;....Iden
   388fc:	79746974 00000000 00000002 00000001     tity............
   3890c:	0000002b ffffe050 09000000 0000007c     +...P.......|...
   3891c:	00000015 00000054 00000014 00000004     ....T...........
   3892c:	00000002 ffffffff 0000002b ffffe034     ........+...4...
   3893c:	00000030 00000024 00000018 00000004     0...$...........
   3894c:	00000001 0000001b 00000000 00000000     ................
   3895c:	00000001 3f8833ef 00000001 42d48fcd     .....3.?.......B
   3896c:	00000001 c3250f8f 0000001a 75716573     ......%.....sequ
   3897c:	69746e65 642f6c61 65736e65 422f315f     ential/dense_1/B
   3898c:	41736169 00006464 00000002 00000001     iasAdd..........
   3899c:	0000002b ffffe0e0 09000000 0000008c     +...............
   389ac:	00000014 00000050 00000014 00000004     ....P...........
   389bc:	00000002 ffffffff 00000064 ffffe0c4     ........d.......
   389cc:	0000002c 00000020 00000014 00000004     ,... ...........
   389dc:	00000001 ffffff80 ffffffff 00000001     ................
   389ec:	3e5be2d3 00000001 425b06f0 00000001     ..[>......[B....
   389fc:	00000000 0000002e 75716573 69746e65     ........sequenti
   38a0c:	642f6c61 65736e65 6c65522f 65733b75     al/dense/Relu;se
   38a1c:	6e657571 6c616974 6e65642f 422f6573     quential/dense/B
   38a2c:	41736169 00006464 00000002 00000001     iasAdd..........
   38a3c:	00000064 ffffe180 09000000 0000007c     d...........|...
   38a4c:	00000013 00000054 00000014 00000004     ....T...........
   38a5c:	00000002 ffffffff 00000064 ffffe164     ........d...d...
   38a6c:	00000030 00000024 00000018 00000004     0...$...........
   38a7c:	00000001 ffffff80 ffffffff 00000000     ................
   38a8c:	00000001 3e130207 00000001 42126f05     .......>.....o.B
   38a9c:	00000001 00000000 0000001a 75716573     ............sequ
   38aac:	69746e65 662f6c61 7474616c 522f6e65     ential/flatten/R
   38abc:	61687365 00006570 00000002 00000001     eshape..........
   38acc:	00000064 ffffe210 09000000 0000008c     d...............
   38adc:	00000012 0000005c 0000001c 00000004     ....\...........
   38aec:	00000004 ffffffff 00000001 00000001     ................
   38afc:	00000064 ffffe1fc 00000030 00000024     d.......0...$...
   38b0c:	00000018 00000004 00000001 ffffff80     ................
   38b1c:	ffffffff 00000000 00000001 3e130207     ...............>
   38b2c:	00000001 42126f05 00000001 00000000     .....o.B........
   38b3c:	00000022 75716573 69746e65 6d2f6c61     "...sequential/m
   38b4c:	705f7861 696c6f6f 6432676e 4d2f325f     ax_pooling2d_2/M
   38b5c:	6f507861 00006c6f 00000004 00000001     axPool..........
   38b6c:	00000001 00000001 00000064 ffffe2b8     ........d.......
   38b7c:	09000000 000000ec 00000011 0000005c     ............\...
   38b8c:	0000001c 00000004 00000004 ffffffff     ................
   38b9c:	00000002 00000002 00000064 ffffe2a4     ........d.......
   38bac:	00000030 00000024 00000018 00000004     0...$...........
   38bbc:	00000001 ffffff80 ffffffff 00000000     ................
   38bcc:	00000001 3e130207 00000001 42126f05     .......>.....o.B
   38bdc:	00000001 00000000 00000083 75716573     ............sequ
   38bec:	69746e65 632f6c61 32766e6f 2f325f64     ential/conv2d_2/
   38bfc:	756c6552 7165733b 746e6575 2f6c6169     Relu;sequential/
   38c0c:	766e6f63 325f6432 6169422f 64644173     conv2d_2/BiasAdd
   38c1c:	7165733b 746e6575 2f6c6169 766e6f63     ;sequential/conv
   38c2c:	325f6432 6e6f432f 3b443276 75716573     2d_2/Conv2D;sequ
   38c3c:	69746e65 632f6c61 32766e6f 2f325f64     ential/conv2d_2/
   38c4c:	73616942 2f646441 64616552 69726156     BiasAdd/ReadVari
   38c5c:	656c6261 722f704f 756f7365 00656372     ableOp/resource.
   38c6c:	00000004 00000001 00000002 00000002     ................
   38c7c:	00000064 ffffe3c0 09000000 0000008c     d...............
   38c8c:	00000010 0000005c 0000001c 00000004     ....\...........
   38c9c:	00000004 ffffffff 00000005 00000005     ................
   38cac:	00000032 ffffe3ac 00000030 00000024     2.......0...$...
   38cbc:	00000018 00000004 00000001 ffffff80     ................
   38ccc:	ffffffff 00000000 00000001 3d366140     ............@a6=
   38cdc:	00000001 4135aadf 00000001 00000000     ......5A........
   38cec:	00000022 75716573 69746e65 6d2f6c61     "...sequential/m
   38cfc:	705f7861 696c6f6f 6432676e 4d2f315f     ax_pooling2d_1/M
   38d0c:	6f507861 00006c6f 00000004 00000001     axPool..........
   38d1c:	00000005 00000005 00000032 ffffe468     ........2...h...
   38d2c:	09000000 000000ec 0000000f 0000005c     ............\...
   38d3c:	0000001c 00000004 00000004 ffffffff     ................
   38d4c:	0000000a 0000000a 00000032 ffffe454     ........2...T...
   38d5c:	00000030 00000024 00000018 00000004     0...$...........
   38d6c:	00000001 ffffff80 ffffffff 00000000     ................
   38d7c:	00000001 3d366140 00000001 4135aadf     ....@a6=......5A
   38d8c:	00000001 00000000 00000083 75716573     ............sequ
   38d9c:	69746e65 632f6c61 32766e6f 2f315f64     ential/conv2d_1/
   38dac:	756c6552 7165733b 746e6575 2f6c6169     Relu;sequential/
   38dbc:	766e6f63 315f6432 6169422f 64644173     conv2d_1/BiasAdd
   38dcc:	7165733b 746e6575 2f6c6169 766e6f63     ;sequential/conv
   38ddc:	315f6432 6e6f432f 3b443276 75716573     2d_1/Conv2D;sequ
   38dec:	69746e65 632f6c61 32766e6f 2f315f64     ential/conv2d_1/
   38dfc:	73616942 2f646441 64616552 69726156     BiasAdd/ReadVari
   38e0c:	656c6261 722f704f 756f7365 00656372     ableOp/resource.
   38e1c:	00000004 00000001 0000000a 0000000a     ................
   38e2c:	00000032 ffffe570 09000000 0000008c     2...p...........
   38e3c:	0000000e 0000005c 0000001c 00000004     ....\...........
   38e4c:	00000004 ffffffff 0000000d 0000000d     ................
   38e5c:	0000000a ffffe55c 00000030 00000024     ....\...0...$...
   38e6c:	00000018 00000004 00000001 ffffff80     ................
   38e7c:	ffffffff 00000000 00000001 3c5435e0     .............5T<
   38e8c:	00000001 405361aa 00000001 00000000     .....aS@........
   38e9c:	00000020 75716573 69746e65 6d2f6c61      ...sequential/m
   38eac:	705f7861 696c6f6f 6432676e 78614d2f     ax_pooling2d/Max
   38ebc:	6c6f6f50 00000000 00000004 00000001     Pool............
   38ecc:	0000000d 0000000d 0000000a ffffe618     ................
   38edc:	09000000 000000e4 0000000d 0000005c     ............\...
   38eec:	0000001c 00000004 00000004 ffffffff     ................
   38efc:	0000001a 0000001a 0000000a ffffe604     ................
   38f0c:	00000030 00000024 00000018 00000004     0...$...........
   38f1c:	00000001 ffffff80 ffffffff 00000000     ................
   38f2c:	00000001 3c5435e0 00000001 405361aa     .....5T<.....aS@
   38f3c:	00000001 00000000 0000007b 75716573     ........{...sequ
   38f4c:	69746e65 632f6c61 32766e6f 65522f64     ential/conv2d/Re
   38f5c:	733b756c 65757165 6169746e 6f632f6c     lu;sequential/co
   38f6c:	6432766e 6169422f 64644173 7165733b     nv2d/BiasAdd;seq
   38f7c:	746e6575 2f6c6169 766e6f63 432f6432     uential/conv2d/C
   38f8c:	32766e6f 65733b44 6e657571 6c616974     onv2D;sequential
   38f9c:	6e6f632f 2f643276 73616942 2f646441     /conv2d/BiasAdd/
   38fac:	64616552 69726156 656c6261 722f704f     ReadVariableOp/r
   38fbc:	756f7365 00656372 00000004 00000001     esource.........
   38fcc:	0000001a 0000001a 0000000a ffffe81a     ................
   38fdc:	09000000 00000824 0000000c 000007fc     ....$...........
   38fec:	00000004 ffffe6ec 0000065c 000004c4     ........\.......
   38ffc:	0000032c 00000004 00000064 00000000     ,.......d.......
	...
   39328:	00000064 3b537a50 3a1bc5c5 3b3441a1     d...PzS;...:.A4;
   39338:	3b8e572d 3b299e50 3b503f6c 3b3dac0d     -W.;P.);l?P;..=;
   39348:	3b13ed49 3b35c998 3b524325 3a3c066d     I..;..5;%CR;m.<:
   39358:	3a12a44c 3b700fa6 3b835791 3a0ffda8     L..:..p;.W.;...:
   39368:	3a176362 3b5bc5b8 3a0be9a2 3b8bb546     bc.:..[;...:F..;
   39378:	3b663616 3b4e6c82 3a045a5b 3ac65b9b     .6f;.lN;[Z.:.[.:
   39388:	3a2fc28f 3b5e3473 3b16ceca 3b3c0b35     ../:s4^;...;5.<;
   39398:	3b681c44 3b363573 3a10f1e7 3b76dff0     D.h;s56;...:..v;
   393a8:	3a12f7a4 3a4e7ba2 3a13cc6f 3b3ab6d9     ...:.{N:o..:..:;
   393b8:	3a0f3d43 3b35efcd 3b2d32f6 3b24f814     C=.:..5;.2-;..$;
   393c8:	3b18a574 3b118473 3b79b800 3a3a789e     t..;s..;..y;.x::
   393d8:	3b29c616 3b5e4520 3b4fb726 3a10c918     ..); E^;&.O;...:
   393e8:	3b153b8d 3b482c1b 3a191f3d 3a2e55a7     .;.;.,H;=..:.U.:
   393f8:	3a2d5742 3b3f83b9 3b350967 3a172291     BW-:..?;g.5;.".:
   39408:	3a2c5e2a 3a199084 3b314705 3b3a9f30     *^,:...:.G1;0.:;
   39418:	3a7d27b8 3b39946f 3b514f7a 3a11adf4     .'}:o.9;zOQ;...:
   39428:	3b1b7779 3a13785e 3a1aedda 3a0b9709     yw.;^x.:...:...:
   39438:	3b1787ab 3b8215e8 3a0006d7 3b2bfa84     ...;...;...:..+;
   39448:	3a0357dc 3b42220c 3b46e72e 3b35f07d     .W.:."B;..F;}.5;
   39458:	39f84bdf 3b44e59b 3a438d43 3b46f86b     .K.9..D;C.C:k.F;
   39468:	3a2d0ddc 3a0bbc13 3a1a9a98 39e3ee31     ..-:...:...:1..9
   39478:	39fea24c 3a110d18 3b329b11 3b8a0be1     L..9...:..2;...;
   39488:	3a11276f 3b39a0ee 39fefdd5 3a20ee52     o'.:..9;...9R. :
   39498:	3a23dad4 3b0aa26d 39f294bd 3a11355d     ..#:m..;...9]5.:
   394a8:	3a5722c4 3a1d93cf 3b51c248 3b4ef613     ."W:...:H.Q;..N;
   394b8:	3b567799 00000064 3e86354e 3d58b7df     .wV;d...N5.>..X=
   394c8:	3eb2d91e 3ed408f1 3e9c7eb9 3e9e1ff2     ...>...>.~.>...>
   394d8:	3e85b33f 3e63eb7d 3e82884c 3e975e2e     ?..>}.c>L..>.^.>
   394e8:	3d5128a6 3d570290 3eee2f87 3e97207e     .(Q=..W=./.>~ .>
   394f8:	3d5bbaf6 3d495003 3e8ef023 3d495de9     ..[=.PI=#..>.]I=
   39508:	3f0a9ddb 3e8096a6 3ecae2a5 3d515a22     ...?...>...>"ZQ=
   39518:	3e1aad57 3d8f2e77 3edc780a 3e95a12c     W..>w..=.x.>,..>
   39528:	3eba931f 3eb1f6e5 3e90aa68 3d493279     ...>...>h..>y2I=
   39538:	3e985ad1 3d4c3f9d 3daf874f 3d544a00     .Z.>.?L=O..=.JT=
   39548:	3eaa29ca 3d4e9968 3e9e9cf5 3eaa83f7     .).>h.N=...>...>
   39558:	3e8469dc 3e977429 3e8d1a21 3ec6ad04     .i.>)t.>!..>...>
   39568:	3d8731f2 3e977c8b 3ead73c0 3e8fe410     .1.=.|.>.s.>...>
   39578:	3d7462e8 3e941116 3ec69bc3 3d664822     .bt=...>...>"Hf=
   39588:	3d4d14c9 3d51e140 3ebe04b2 3e9637ea     ..M=@.Q=...>.7.>
   39598:	3d5f9ff3 3d72d660 3d4ab2e9 3e80c7f4     .._=`.r=..J=...>
   395a8:	3ea9584c 3dfb2d69 3eb82146 3e926edf     LX.>i-.=F!.>.n.>
   395b8:	3d76f2fe 3e9a3349 3d66dc7f 3d64a01d     ..v=I3.>..f=..d=
   395c8:	3d50a6a0 3e8f4307 3ea55c1b 3d49b373     ..P=.C.>.\.>s.I=
   395d8:	3e6c095b 3d4af2c8 3ea1a1ae 3eb6c13a     [.l>..J=...>:..>
   395e8:	3ea57f4b 3d48b237 3eb92685 3d81207e     K..>7.H=.&.>~ .=
   395f8:	3e9d7614 3d651c8f 3d6b8c51 3d60b99c     .v.>..e=Q.k=..`=
   39608:	3d544dc7 3d4b2e53 3d4d051b 3eb135db     .MT=S.K=..M=.5.>
   39618:	3eb67dd3 3d4556a9 3eb0609a 3d4c96d3     .}.>.VE=.`.>..L=
   39628:	3d571b2e 3d8395c3 3e2b1853 3d5e6b62     ..W=...=S.+>bk^=
   39638:	3d513497 3dc7680f 3d5c14db 3e810afb     .4Q=.h.=..\=...>
   39648:	3ea8b044 3ebdbc8e 00000064 bed1d35b     D..>...>d...[...
   39658:	bd9a8e39 beb07385 bf0d3a7f bea84b13     9....s...:...K..
   39668:	bece9eed bebc30b5 be92c56e beb45e05     .....0..n....^..
   39678:	bed09e9f bdba8e60 bd917f03 beacf987     ....`...........
   39688:	bf0250e2 bd8eddad bd96349b beda0e2d     .P.......4..-...
   39698:	bd8ad1cf bedd35d3 bee469aa becccfa9     .....5...i......
   396a8:	bd8351a6 be44cee4 bdae630a bea5c211     .Q....D..c......
   396b8:	be954fe9 bea40d13 bee64c0b beb4c908     .O.......L......
   396c8:	bd8fd003 bef4f230 bd91d1b5 bdccdeab     ....0...........
   396d8:	bd92a4d6 beb9416b bd8e1ec8 beb483ed     ....kA..........
   396e8:	beabd890 bea3ae24 be9621d9 be90616a     ....$....!..ja..
   396f8:	bef7c490 bdb903ad bea8728a bedc8896     .........r......
   39708:	bece17b8 bd8fa786 be905e75 be9b31e6     ........u^...1..
   39718:	bd97ecff bdacf8fc bdabfc93 be7026d1     .............&p.
   39728:	beb39f54 bd95f44c bdab056e bd985d63     T...L...n...c]..
   39738:	beafe477 beb929f2 bdd36ac4 beb77df6     w....)...j...}..
   39748:	becfacdb bd908a98 be9a408a bd92516d     .........@..mQ..
   39758:	bd99b7fe bd8a7fdb be96589c bf0111bc     .........X......
   39768:	bd7e0d93 beaaa28f bd82512c bec09dc8     ..~.....,Q......
   39778:	bec55960 beb4849c bd765b47 bec35bd0     `Y......G[v..[..
   39788:	bdc20628 bec56a7a bdabb3c0 bd8aa49b     (...zj..........
   39798:	bd996563 bd622655 bd7ca507 bd8feafe     ce..U&b...|.....
   397a8:	be93b1ed bf08f7c9 bd900520 beb82dac     ........ ....-..
   397b8:	bd7cffd9 bd9fac75 bda2931e be898d28     ..|.u.......(...
   397c8:	bd70af94 bd9012f2 bdd5747e bd9c58a7     ..p.....~t...X..
   397d8:	bed01ec3 becd5827 bed4caaa 0000001a     ....'X..........
   397e8:	75716573 69746e65 632f6c61 32766e6f     sequential/conv2
   397f8:	2f325f64 766e6f43 00004432 00000004     d_2/Conv2D......
   39808:	00000064 00000004 00000004 00000032     d...........2...
   39818:	fffff05a 09000000 0000043c 0000000b     Z.......<.......
   39828:	00000414 00000004 ffffef2c 0000033c     ........,...<...
   39838:	0000026c 0000019c 00000004 00000032     l...........2...
	...
   399d8:	00000032 3b6ac8ea 3b3c20fd 3bae6c9d     2.....j;. <;.l.;
   399e8:	3b7da51d 3b7f6a8f 3b947c56 3bb7fd83     ..};.j.;V|.;...;
   399f8:	3b5642a5 3b6e20b6 3b4bbc38 3b330c7b     .BV;. n;8.K;{.3;
   39a08:	3b729537 3a3a2dee 3b78e153 3bacb5b3     7.r;.-::S.x;...;
   39a18:	3a3e192b 3b9dd539 3bdc5826 3a383cba     +.>:9..;&X.;.<8:
   39a28:	3b86efd2 3ba29113 3ba61931 3b3c6f33     ...;...;1..;3o<;
   39a38:	3a95817f 3b8af5bc 3bb1abf4 3b5c3f1d     ...:...;...;.?\;
   39a48:	3b8c885f 3b6cb7dc 3b867dda 3b94b909     _..;..l;.}.;...;
   39a58:	3b78c19e 3b9d6d64 3b99d007 3b76762f     ..x;dm.;...;/vv;
   39a68:	3be85104 3b67b156 3a4f7e4c 3b6c9680     .Q.;V.g;L~O:..l;
   39a78:	3b965654 3b48672a 3b3d70bb 3b8e1978     TV.;*gH;.p=;x..;
   39a88:	3b37e062 3b94f564 3b911192 3b99a68c     b.7;d..;...;...;
   39a98:	3b8b40a8 3b925f61 3bbbbf84 00000032     .@.;a_.;...;2...
   39aa8:	3ebea228 3eb04c8e 3ef8e4ad 3ecd4fd3     (..>.L.>...>.O.>
   39ab8:	3eae8fdc 3eab9795 3eee303d 3ed49620     ...>...>=0.> ..>
   39ac8:	3ec2ec6f 3e8338e8 3e9f3273 3ef0b00d     o..>.8.>s2.>...>
   39ad8:	3daed917 3e70ba07 3f2b5c48 3d986d63     ...=..p>H\+?cm.=
   39ae8:	3e980083 3ea70148 3d8d1f95 3eb67f92     ...>H..>...=...>
   39af8:	3e6cab7b 3ef8ca0b 3e803246 3e10b3ea     {.l>...>F2.>...>
   39b08:	3ea5e500 3ee28609 3ed33b3d 3ef9bd8d     ...>...>=;.>...>
   39b18:	3eb3859b 3eceaa23 3f0228d3 3e90e23f     ...>#..>.(.??..>
   39b28:	3eb7fd6c 3e9a5cfb 3ea04161 3ebda1f5     l..>.\.>aA.>...>
   39b38:	3ee5e1f3 3d9e2fef 3eb58332 3ebb1e1d     ...>./.=2..>...>
   39b48:	3eb2ed29 3ebbf5da 3e9b3af8 3ea2115c     )..>...>.:.>\..>
   39b58:	3ed5f198 3e840e07 3ec91f90 3eedcf3b     ...>...>...>;..>
   39b68:	3ebb325a 3e664294 00000032 bee8f358     Z2.>.Bf>2...X...
   39b78:	bebaa8bb bf2d0fc4 befba9d3 befd6bba     ......-......k..
   39b88:	bf13535d bf368d88 be86cd8e beec4475     ]S....6.....uD..
   39b98:	beca24c0 beb1a662 bea96ded bdb8b992     .$..b....m......
   39ba8:	bef6ef90 bf1c1ec2 bdbc9cf9 bf1c998f     ................
   39bb8:	bf5a9f76 bdb6cc41 bf05e1f2 bf214bf1     v.Z.A........K!.
   39bc8:	bf24ccff bebaf655 be14567c bf09dfd1     ..$.U...|V......
   39bd8:	bf30489c beda869f bf0b6f4e beeade6c     .H0.....No..l...
   39be8:	bf0570de bf138f97 bef6d01b bf1c3289     .p...........2..
   39bf8:	bf189c67 bef48943 bf668062 bec79790     g...C...b.f.....
   39c08:	bdcddf4f beeabd53 bf1529a7 bec6d65c     O...S....)..\...
   39c18:	be92b9b3 bf0cfd45 beb670a1 bf13cb79     ....E....p..y...
   39c28:	bf0fef6f bf18733f bf0a2a27 bf113aa2     o...?s..'*...:..
   39c38:	bf3a4805 0000001a 75716573 69746e65     .H:.....sequenti
   39c48:	632f6c61 32766e6f 2f315f64 766e6f43     al/conv2d_1/Conv
   39c58:	00004432 00000004 00000032 00000004     2D......2.......
   39c68:	00000004 0000000a fffff4b2 09000000     ................
   39c78:	0000011c 0000000a 000000f4 00000004     ................
   39c88:	fffff384 000000bc 0000008c 0000005c     ............\...
   39c98:	00000004 0000000a 00000000 00000000     ................
	...
   39cf0:	0000000a 3b2f3ac4 3b1608c3 3b2cd5e8     .....:/;...;..,;
   39d00:	3b1e1e30 3b3b586c 3b307b0f 3b0cff63     0..;lX;;.{0;c..;
   39d10:	3b2e51c3 3aba31fe 3b030a52 0000000a     .Q.;.1.:R..;....
   39d20:	3e88c287 3e6d0fd3 3e80f854 3e9ce1f4     ...>..m>T..>...>
   39d30:	3e8dce0b 3e71c832 3e5c5bf6 3eacf51f     ...>2.q>.[\>...>
   39d40:	3e38bd9a 3e82043d 0000000a beaddc4e     ..8>=..>....N...
   39d50:	be94dcb1 beab7c3c be7c2cf9 beb9e1bb     ....<|...,|.....
   39d60:	beaf1a19 be8be564 bea388b4 be12fa0e     ....d...........
   39d70:	be60679a 00000018 75716573 69746e65     .g`.....sequenti
   39d80:	632f6c61 32766e6f 6f432f64 4432766e     al/conv2d/Conv2D
   39d90:	00000000 00000004 0000000a 00000007     ................
   39da0:	00000007 00000001 fffff5ea 09000000     ................
   39db0:	0000006c 00000009 00000044 00000004     l.......D.......
   39dc0:	fffff4bc 00000030 00000024 00000018     ....0...$.......
   39dd0:	00000004 00000001 00000000 00000000     ................
   39de0:	00000000 00000001 3be5e1b3 00000001     ...........;....
   39df0:	3ec6e3e2 00000001 bf6415f0 00000019     ...>......d.....
   39e00:	75716573 69746e65 642f6c61 65736e65     sequential/dense
   39e10:	4d2f315f 754d7461 0000006c 00000002     _1/MatMul.......
   39e20:	0000002b 00000064 fffff66a 09000000     +...d...j.......
   39e30:	00000064 00000008 00000040 00000004     d.......@.......
   39e40:	fffff53c 0000002c 00000020 00000014     <...,... .......
   39e50:	00000004 00000001 00000000 00000000     ................
   39e60:	00000001 3b84d9f7 00000001 3f03d043     .......;....C..?
   39e70:	00000001 bf02687b 00000017 75716573     ....{h......sequ
   39e80:	69746e65 642f6c61 65736e65 74614d2f     ential/dense/Mat
   39e90:	006c754d 00000002 00000064 00000064     Mul.....d...d...
   39ea0:	fffff6e2 02000000 00000038 00000007     ........8.......
   39eb0:	00000010 00000008 00040004 00000004     ................
   39ec0:	00000018 75716573 69746e65 662f6c61     ....sequential/f
   39ed0:	7474616c 432f6e65 74736e6f 00000000     latten/Const....
   39ee0:	00000001 00000002 fffff72a 02000000     ........*.......
   39ef0:	00000068 00000006 00000028 00000004     h.......(.......
   39f00:	fffff71c 00000014 00000004 00000001     ................
	...
   39f18:	00000001 3ac573c3 00000032 75716573     .....s.:2...sequ
   39f28:	69746e65 642f6c61 65736e65 422f315f     ential/dense_1/B
   39f38:	41736169 522f6464 56646165 61697261     iasAdd/ReadVaria
   39f48:	4f656c62 65722f70 72756f73 00006563     bleOp/resource..
   39f58:	00000001 0000002b fffff7a2 02000000     ....+...........
   39f68:	00000068 00000005 00000028 00000004     h.......(.......
   39f78:	fffff794 00000014 00000004 00000001     ................
	...
   39f90:	00000001 3a18946c 00000030 75716573     ....l..:0...sequ
   39fa0:	69746e65 642f6c61 65736e65 6169422f     ential/dense/Bia
   39fb0:	64644173 6165522f 72615664 6c626169     sAdd/ReadVariabl
   39fc0:	2f704f65 6f736572 65637275 00000000     eOp/resource....
   39fd0:	00000001 00000064 fffff81a 02000000     ....d...........
   39fe0:	00000510 00000004 000004d0 00000004     ................
   39ff0:	fffff80c 00000330 00000004 00000064     ....0.......d...
	...
   3a324:	00000064 3916a94b 37ddf38e 39006b22     d...K..9...7"k.9
   3a334:	394ad019 38f1adf9 39145c33 3907205f     ..J9...83\.9_ .9
   3a344:	38d2c5c8 39018261 3915cb9c 3805f3ff     ...8a..9...9...8
   3a354:	37d0f106 392b0652 393b244c 37cd2a11     ...7R.+9L$;9.*.7
   3a364:	37d7b454 391c920e 37c75a7f 39470fe5     T..7...9.Z.7..G9
   3a374:	392401e8 39130f8f 37bc9508 388d507a     ..$9...9...7zP.8
   3a384:	37fa6e2d 391e4db3 38d6e09b 3905f767     -n.7.M.9...8g..9
   3a394:	39255c45 3901cf38 37ce8614 392fe0fd     E\%98..9...7../9
   3a3a4:	37d167c6 38131a56 37d296f9 390504ec     .g.7V..8...7...9
   3a3b4:	37cc17ef 39019d99 38f6c80d 38eb0e13     ...7...9...8...8
   3a3c4:	38d97f3b 38cf56e3 3931e7ad 3804d897     ;..8.V.8..19...8
   3a3d4:	38f1e6a4 391e5995 3913fb1d 37ce4bef     ...8.Y.9...9.K.7
   3a3e4:	38d4a20e 390e9b66 37da2cc1 37f8663e     ...8f..9.,.7>f.7
   3a3f4:	37f6fbc5 39087066 3900f975 37d757fa     ...7fp.9u..9.W.7
   3a404:	37f598d9 37dace28 38fc97ac 3904f411     ...7(..7...8...9
   3a414:	38345a68 39043607 39151e04 37cf9206     hZ48.6.9...9...7
   3a424:	38dd83fe 37d21f31 37dcbfe8 37c6e4cf     ...81..7...7...7
   3a434:	38d7e808 393959fc 37b66aff 38f50ade     ...8.Y99.j.7...8
   3a444:	37bb24b7 390a4df4 390db3ea 39019e16     .$.7.M.9...9...9
   3a454:	37b0e443 390c4608 380b50b7 390dc032     C..7.F.9.P.82..9
   3a464:	37f69330 37c71995 37dc4947 37a261ed     0..7...7GI.7.a.7
   3a474:	37b5681d 37ceacd3 38fe7c2f 3944b1c6     .h.7...7/|.8..D9
   3a484:	37ced25a 39043eee 37b5a953 37e54d22     Z..7.>.9S..7"M.7
   3a494:	37e977a3 38c58847 37acd1e5 37cee633     .w.7G..8...73..7
   3a4a4:	38194471 37e085e3 39156fce 39137190     qD.8...7.o.9.q.9
   3a4b4:	3918ca80 00000033 75716573 69746e65     ...93...sequenti
   3a4c4:	632f6c61 32766e6f 2f325f64 73616942     al/conv2d_2/Bias
   3a4d4:	2f646441 64616552 69726156 656c6261     Add/ReadVariable
   3a4e4:	722f704f 756f7365 00656372 00000001     Op/resource.....
   3a4f4:	00000064 fffffd3a 02000000 000002b4     d...:...........
   3a504:	00000003 00000274 00000004 fffffd2c     ....t.......,...
   3a514:	0000019c 00000004 00000032 00000000     ........2.......
	...
   3a6b0:	00000032 38429fcb 381bf2e9 389096a7     2.....B8...8...8
   3a6c0:	3852421d 3853b9ff 38762c6e 389884a9     .BR8..S8n,v8...8
   3a6d0:	38319c48 38456534 3828e2bf 38146c04     H.184eE8..(8.l.8
   3a6e0:	3849169f 371a5538 384e4ef9 388f2ad1     ..I88U.7.NN8.*.8
   3a6f0:	371d94d9 3882d5ca 38b6a75f 3718b910     ...7...8_..8...7
   3a700:	385fb5ff 3886c25a 3889afd1 381c33be     .._8Z..8...8.3.8
   3a710:	3777dd68 3866617c 389347ca 3836929e     h.w7|af8.G.8..68
   3a720:	3868fd04 38443a13 385ef90d 38769110     ..h8.:D8..^8..v8
   3a730:	384e34b1 38827fb8 387f0149 384c4dbd     .4N8...8I..8.ML8
   3a740:	38c093fb 38400f9e 372c0042 38441e6c     ...8..@8B.,7l.D8
   3a750:	38793e42 38261f9b 381d0939 386b95fe     B>y8..&89..8..k8
   3a760:	38186c84 3876f520 38708229 387ebc84     .l.8 .v8).p8..~8
   3a770:	3866ddb3 3872ab94 389ba21c 00000033     ..f8..r8...83...
   3a780:	75716573 69746e65 632f6c61 32766e6f     sequential/conv2
   3a790:	2f315f64 73616942 2f646441 64616552     d_1/BiasAdd/Read
   3a7a0:	69726156 656c6261 722f704f 756f7365     VariableOp/resou
   3a7b0:	00656372 00000001 00000032 000e0000     rce.....2.......
   3a7c0:	00080018 000c0007 00140010 0000000e     ................
   3a7d0:	02000000 000000e4 00000002 000000a4     ................
   3a7e0:	00000010 000c000c 00000000 00080004     ................
   3a7f0:	0000000c 00000060 00000004 0000000a     ....`...........
	...
   3a854:	0000000a 372fe62f 37169b88 372d7efb     ...././7...7.~-7
   3a864:	371eb8dd 373c0fb1 373127b3 370d8951     ...7..<7.'17Q..7
   3a874:	372efc4a 36bae823 37038a82 00000031     J..7#..6...71...
   3a884:	75716573 69746e65 632f6c61 32766e6f     sequential/conv2
   3a894:	69422f64 64417361 65522f64 61566461     d/BiasAdd/ReadVa
   3a8a4:	62616972 704f656c 7365722f 6372756f     riableOp/resourc
   3a8b4:	00000065 00000001 0000000a 001c0014     e...............
   3a8c4:	00070008 0010000c 00000014 00180000     ................
   3a8d4:	00000014 09000000 00000084 00000001     ................
   3a8e4:	00000068 00000028 00000004 00000004     h...(...........
   3a8f4:	ffffffff 00000020 00000020 00000001     .... ... .......
   3a904:	0014000c 00080004 0010000c 0000000c     ................
   3a914:	00000030 00000024 00000018 00000004     0...$...........
   3a924:	00000001 ffffff80 ffffffff 00000000     ................
   3a934:	00000001 3b807d37 00000001 3f7ff974     ....7}.;....t..?
   3a944:	00000001 00000000 0000000c 766e6f63     ............conv
   3a954:	695f6432 7475706e 00000000 00000004     2d_input........
   3a964:	00000001 00000020 00000020 00000001     .... ... .......
   3a974:	00000005 0000005c 00000040 0000002c     ....\...@...,...
   3a984:	00000014 00000004 ffffffc2 19000000     ................
   3a994:	00000002 ffffffe6 09000000 00000004     ................
   3a9a4:	00060000 00050006 00000006 000a1600     ................
   3a9b4:	0007000e 00080000 0000000a 11000000     ................
   3a9c4:	00000002 000a0000 0007000c 00080000     ................
   3a9d4:	0000000a 03000000 00000003 6c6c6548     ............Hell
   3a9e4:	0000006f 74616c46 66667542 20737265     o...FlatBuffers 
   3a9f4:	32312e31 0000302e                       1.12.0..

0003a9fc <_ZTVN6tflite22MicroMutableOpResolverILj5EEE>:
	...
   3aa04:	00000d37 00000d41 00000d8b 00000e19     7...A...........
   3aa14:	00000d4b 00000dd1 00000d8d 65646f4d     K...........Mode
   3aa24:	7270206c 6469766f 69206465 63732073     l provided is sc
   3aa34:	616d6568 72657620 6e6f6973 20642520     hema version %d 
   3aa44:	20746f6e 61757165 6f74206c 70757320     not equal to sup
   3aa54:	74726f70 76206465 69737265 25206e6f     ported version %
   3aa64:	00002e64 6c6c6143 20676e69 42646441     d...Calling AddB
   3aa74:	746c6975 77206e69 20687469 20656874     uiltin with the 
   3aa84:	656d6173 20706f20 65726f6d 61687420     same op more tha
   3aa94:	6e6f206e 69206563 6f6e2073 75732074     n once is not su
   3aaa4:	726f7070 20646574 3a704f28 64252320     pported (Op: #%d
   3aab4:	00002e29 6c756f43 74276e64 67657220     )...Couldn't reg
   3aac4:	65747369 75622072 69746c69 706f206e     ister builtin op
   3aad4:	64252320 6572202c 766c6f73 73207265      #%d, resolver s
   3aae4:	20657a69 74207369 73206f6f 6c6c616d     ize is too small
   3aaf4:	64252820 00002e29 6f766e49 6620656b      (%d)...Invoke f
   3ab04:	656c6961 6e6f2064 646e6920 203a7865     ailed on index: 
   3ab14:	000a6425                                %d..

0003ab18 <_ZZNK11flatbuffers6VectorIlE3GetEmE19__PRETTY_FUNCTION__>:
   3ab18:	74616c66 66667562 3a737265 6365563a     flatbuffers::Vec
   3ab28:	3c726f74 3a3a3e54 75746572 745f6e72     tor<T>::return_t
   3ab38:	20657079 74616c66 66667562 3a737265     ype flatbuffers:
   3ab48:	6365563a 3c726f74 3a3a3e54 28746547     :Vector<T>::Get(
   3ab58:	74616c66 66667562 3a737265 666f753a     flatbuffers::uof
   3ab68:	74657366 2029745f 736e6f63 775b2074     fset_t) const [w
   3ab78:	20687469 203d2054 676e6f6c 746e6920     ith T = long int
   3ab88:	6c66203b 75627461 72656666 563a3a73     ; flatbuffers::V
   3ab98:	6f746365 3e543c72 65723a3a 6e727574     ector<T>::return
   3aba8:	7079745f 203d2065 676e6f6c 746e6920     _type = long int
   3abb8:	6c66203b 75627461 72656666 753a3a73     ; flatbuffers::u
   3abc8:	7366666f 745f7465 6c203d20 20676e6f     offset_t = long 
   3abd8:	69736e75 64656e67 746e6920 0000005d     unsigned int]...
   3abe8:	75706e49 72612074 20796172 20746f6e     Input array not 
   3abf8:	766f7270 64656469 726f6620 65706f20     provided for ope
   3ac08:	69746172 27206e6f 2e277325 0000000a     ration '%s'.....
   3ac18:	6e756f46 6f742064 616d206f 6420796e     Found too many d
   3ac28:	6e656d69 6e6f6973 6e692073 65687420     imensions in the
   3ac38:	706e6920 61207475 79617272 20666f20      input array of 
   3ac48:	7265706f 6f697461 2527206e 0a2e2773     operation '%s'..
   3ac58:	00000000 203c2069 657a6973 00002928     ....i < size()..
   3ac68:	542f2e2e 68742f46 5f647269 74726170     ../TF/third_part
   3ac78:	6c662f79 75627461 72656666 6e692f73     y/flatbuffers/in
   3ac88:	64756c63 6c662f65 75627461 72656666     clude/flatbuffer
   3ac98:	6c662f73 75627461 72656666 00682e73     s/flatbuffers.h.
   3aca8:	75736e55 726f7070 20646574 61746164     Unsupported data
   3acb8:	70797420 64252065 206e6920 736e6574      type %d in tens
   3acc8:	000a726f 542f2e2e 65742f46 726f736e     or..../TF/tensor
   3acd8:	776f6c66 74696c2f 6f632f65 612f6572     flow/lite/core/a
   3ace8:	662f6970 6274616c 65666675 6f635f72     pi/flatbuffer_co
   3acf8:	7265766e 6e6f6973 63632e73 00000000     nversions.cc....
   3ad08:	253a7325 73252064 73617720 746f6e20     %s:%d %s was not
   3ad18:	75727420 00002e65 61726170 2120736d      true...params !
   3ad28:	756e203d 74706c6c 00000072 61686e55     = nullptr...Unha
   3ad38:	656c646e 75662064 2d796c6c 6e6e6f63     ndled fully-conn
   3ad48:	65746365 65772064 74686769 6f662073     ected weights fo
   3ad58:	74616d72 0000002e 68736572 00657061     rmat....reshape.
   3ad68:	61686e55 656c646e 534c2064 6b204d54     Unhandled LSTM k
   3ad78:	656e7265 7974206c 203a6570 00006425     ernel type: %d..
   3ad88:	76206f4e 64696c61 54534c20 7562204d     No valid LSTM bu
   3ad98:	69746c69 706f206e 6e6f6974 78652073     iltin options ex
   3ada8:	00747369 65757173 00657a65 454c4544     ist.squeeze.DELE
   3adb8:	45544147 20706f20 756f6873 276e646c     GATE op shouldn'
   3adc8:	78652074 20747369 6d206e69 6c65646f     t exist in model
   3add8:	0000002e                                ....

0003addc <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names>:
   3addc:	0003b0a0 0003b0a4 0003b0b4 0003b0c4     ................
   3adec:	0003b0cc 0003b0e0 0003b0f0 0003b0fc     ................
   3adfc:	0003b110 0003b118 0003b128 0003b13c     ........(...<...
   3ae0c:	0003b150 0003b15c 0003b17c 0003b188     P...\...|.......
   3ae1c:	0003b2d4 0003b198 0003b1a4 0003b1a8     ................
   3ae2c:	0003b1b0 0003b1c0 0003b1c8 0003b1d0     ................
   3ae3c:	0003b264 0003b320 0003b1e0 0003b1f0     d... ...........
   3ae4c:	0003b1f8 0003b200 0003b214 0003b220     ............ ...
   3ae5c:	0003b228 0003b230 0003b248 0003b24c     (...0...H...L...
   3ae6c:	0003b268 0003b270 0003b284 0003b298     h...p...........
   3ae7c:	0003b2a4 0003b2ac 0003b2b0 0003b2b4     ................
   3ae8c:	0003b2bc 0003b2dc 0003b2ec 0003b308     ................
   3ae9c:	0003b30c 0003b314 0003b31c 0003b328     ............(...
   3aeac:	0003b334 0003b350 0003b358 0003b360     4...P...X...`...
   3aebc:	0003b368 0003b370 0003b378 0003b380     h...p...x.......
   3aecc:	0003b384 0003b38c 0003b394 0003b3a4     ................
   3aedc:	0003b3b0 0003b2e4 0003b3b8 0003b3bc     ................
   3aeec:	0003b3cc 0003b3dc 0003b3e4 0003b39c     ................
   3aefc:	0003b3f0 0003b3fc 0003b624 0003b400     ........$.......
   3af0c:	0003b408 0003b410 0003b418 0003b41c     ................
   3af1c:	0003b424 0003b430 0003b43c 0003b448     $...0...<...H...
   3af2c:	0003b450 0003b45c 0003b464 0003b470     P...\...d...p...
   3af3c:	0003b47c 0003b484 0003b490 0003b49c     |...............
   3af4c:	0003b4a8 0003b4b0 0003b4bc 0003b4c4     ................
   3af5c:	0003b4d0 0003b4d8 0003b4f0 0003b4fc     ................
   3af6c:	0003b510 0003b51c 0003b520 0003b528     ........ ...(...
   3af7c:	0003b530 0003b538 0003b544 0003b54c     0...8...D...L...
   3af8c:	0003b558 0003b55c 0003b564 0003b56c     X...\...d...l...
   3af9c:	0003b570 0003b584 0003b590 0003b59c     p...............
   3afac:	0003b5ac 0003b5b4 0003b5c0 0003b5c4     ................
   3afbc:	0003b5cc 0003b5e4 0003b5fc 0003b608     ................
   3afcc:	0003b614 0003b61c 0003b628 00000000     ........(.......
   3afdc:	6220704f 746c6975 635f6e69 2065646f     Op builtin_code 
   3afec:	2074756f 7220666f 65676e61 6425203a     out of range: %d
   3affc:	7241202e 6f792065 73752075 20676e69     . Are you using 
   3b00c:	20646c6f 694c4654 62206574 72616e69     old TFLite binar
   3b01c:	69772079 6e206874 72657765 646f6d20     y with newer mod
   3b02c:	003f6c65 6e646944 66207427 20646e69     el?.Didn't find 
   3b03c:	6620706f 6220726f 746c6975 6f206e69     op for builtin o
   3b04c:	646f6370 25272065 76202773 69737265     pcode '%s' versi
   3b05c:	27206e6f 0a276425 00000000 7265704f     on '%d'.....Oper
   3b06c:	726f7461 74697720 55432068 4d4f5453     ator with CUSTOM
   3b07c:	69756220 6e69746c 646f635f 61682065      builtin_code ha
   3b08c:	6f6e2073 73756320 5f6d6f74 65646f63     s no custom_code
   3b09c:	00000a2e 00444441 52455641 5f454741     ....ADD.AVERAGE_
   3b0ac:	4c4f4f50 0044325f 434e4f43 4e455441     POOL_2D.CONCATEN
   3b0bc:	4f495441 0000004e 564e4f43 0044325f     ATION...CONV_2D.
   3b0cc:	54504544 53495748 4f435f45 325f564e     DEPTHWISE_CONV_2
   3b0dc:	00000044 54504544 4f545f48 4150535f     D...DEPTH_TO_SPA
   3b0ec:	00004543 55514544 49544e41 0000455a     CE..DEQUANTIZE..
   3b0fc:	45424d45 4e494444 4f4c5f47 50554b4f     EMBEDDING_LOOKUP
   3b10c:	00000000 4f4f4c46 00000052 4c4c5546     ....FLOOR...FULL
   3b11c:	4f435f59 43454e4e 00444554 48534148     Y_CONNECTED.HASH
   3b12c:	4c424154 4f4c5f45 50554b4f 00000000     TABLE_LOOKUP....
   3b13c:	4e5f324c 414d524f 415a494c 4e4f4954     L2_NORMALIZATION
   3b14c:	00000000 505f324c 5f4c4f4f 00004432     ....L2_POOL_2D..
   3b15c:	41434f4c 45525f4c 4e4f5053 4e5f4553     LOCAL_RESPONSE_N
   3b16c:	414d524f 415a494c 4e4f4954 00000000     ORMALIZATION....
   3b17c:	49474f4c 43495453 00000000 5f48534c     LOGISTIC....LSH_
   3b18c:	4a4f5250 49544345 00004e4f 5f58414d     PROJECTION..MAX_
   3b19c:	4c4f4f50 0044325f 004c554d 554c4552     POOL_2D.MUL.RELU
   3b1ac:	00000000 554c4552 5f314e5f 315f4f54     ....RELU_N1_TO_1
   3b1bc:	00000000 554c4552 00000036 48534552     ....RELU6...RESH
   3b1cc:	00455041 49534552 425f455a 4e494c49     APE.RESIZE_BILIN
   3b1dc:	00524145 43415053 4f545f45 5045445f     EAR.SPACE_TO_DEP
   3b1ec:	00004854 46445653 00000000 484e4154     TH..SVDF....TANH
   3b1fc:	00000000 434e4f43 455f5441 4445424d     ....CONCAT_EMBED
   3b20c:	474e4944 00000053 50494b53 4152475f     DINGS...SKIP_GRA
   3b21c:	0000004d 4c4c4143 00000000 54535543     M...CALL....CUST
   3b22c:	00004d4f 45424d45 4e494444 4f4c5f47     OM..EMBEDDING_LO
   3b23c:	50554b4f 4150535f 00455352 00444150     OKUP_SPARSE.PAD.
   3b24c:	44494e55 43455249 4e4f4954 535f4c41     UNIDIRECTIONAL_S
   3b25c:	45555145 5f45434e 004e4e52 48544147     EQUENCE_RNN.GATH
   3b26c:	00005245 43544142 4f545f48 4150535f     ER..BATCH_TO_SPA
   3b27c:	4e5f4543 00000044 43415053 4f545f45     CE_ND...SPACE_TO
   3b28c:	5441425f 4e5f4843 00000044 4e415254     _BATCH_ND...TRAN
   3b29c:	534f5053 00000045 4e41454d 00000000     SPOSE...MEAN....
   3b2ac:	00425553 00564944 45555153 00455a45     SUB.DIV.SQUEEZE.
   3b2bc:	44494e55 43455249 4e4f4954 535f4c41     UNIDIRECTIONAL_S
   3b2cc:	45555145 5f45434e 4d54534c 00000000     EQUENCE_LSTM....
   3b2dc:	49525453 5f444544 43494c53 00000045     STRIDED_SLICE...
   3b2ec:	49444942 54434552 414e4f49 45535f4c     BIDIRECTIONAL_SE
   3b2fc:	4e455551 525f4543 00004e4e 00505845     QUENCE_RNN..EXP.
   3b30c:	4b504f54 0032565f 494c5053 00000054     TOPK_V2.SPLIT...
   3b31c:	5f474f4c 54464f53 0058414d 454c4544     LOG_SOFTMAX.DELE
   3b32c:	45544147 00000000 49444942 54434552     GATE....BIDIRECT
   3b33c:	414e4f49 45535f4c 4e455551 4c5f4543     IONAL_SEQUENCE_L
   3b34c:	004d5453 54534143 00000000 4c455250     STM.CAST....PREL
   3b35c:	00000055 4958414d 004d554d 5f475241     U...MAXIMUM.ARG_
   3b36c:	0058414d 494e494d 004d554d 5353454c     MAX.MINIMUM.LESS
   3b37c:	00000000 0047454e 56444150 00000032     ....NEG.PADV2...
   3b38c:	41455247 00524554 41455247 5f524554     GREATER.GREATER_
   3b39c:	41555145 0000004c 5353454c 5551455f     EQUAL...LESS_EQU
   3b3ac:	00004c41 454c4553 00005443 004e4953     AL..SELECT..SIN.
   3b3bc:	4e415254 534f5053 4f435f45 0000564e     TRANSPOSE_CONV..
   3b3cc:	52415053 545f4553 45445f4f 0045534e     SPARSE_TO_DENSE.
   3b3dc:	454c4954 00000000 41505845 445f444e     TILE....EXPAND_D
   3b3ec:	00534d49 5f544f4e 41555145 0000004c     IMS.NOT_EQUAL...
   3b3fc:	00474f4c 54525153 00000000 52515352     LOG.SQRT....RSQR
   3b40c:	00000054 50414853 00000045 00574f50     T...SHAPE...POW.
   3b41c:	5f475241 004e494d 454b4146 4155515f     ARG_MIN.FAKE_QUA
   3b42c:	0000544e 55444552 505f4543 00444f52     NT..REDUCE_PROD.
   3b43c:	55444552 4d5f4543 00005841 4b434150     REDUCE_MAX..PACK
   3b44c:	00000000 49474f4c 5f4c4143 0000524f     ....LOGICAL_OR..
   3b45c:	5f454e4f 00544f48 49474f4c 5f4c4143     ONE_HOT.LOGICAL_
   3b46c:	00444e41 49474f4c 5f4c4143 00544f4e     AND.LOGICAL_NOT.
   3b47c:	41504e55 00004b43 55444552 4d5f4543     UNPACK..REDUCE_M
   3b48c:	00004e49 4f4f4c46 49445f52 00000056     IN..FLOOR_DIV...
   3b49c:	55444552 415f4543 0000594e 41555153     REDUCE_ANY..SQUA
   3b4ac:	00004552 4f52455a 494c5f53 0000454b     RE..ZEROS_LIKE..
   3b4bc:	4c4c4946 00000000 4f4f4c46 4f4d5f52     FILL....FLOOR_MO
   3b4cc:	00000044 474e4152 00000045 49534552     D...RANGE...RESI
   3b4dc:	4e5f455a 45524145 4e5f5453 48474945     ZE_NEAREST_NEIGH
   3b4ec:	00524f42 4b41454c 45525f59 0000554c     BOR.LEAKY_RELU..
   3b4fc:	41555153 5f444552 46464944 4e455245     SQUARED_DIFFEREN
   3b50c:	00004543 5252494d 505f524f 00004441     CE..MIRROR_PAD..
   3b51c:	00534241 494c5053 00565f54 51494e55     ABS.SPLIT_V.UNIQ
   3b52c:	00004555 4c494543 00000000 45564552     UE..CEIL....REVE
   3b53c:	5f455352 00003256 5f444441 0000004e     RSE_V2..ADD_N...
   3b54c:	48544147 4e5f5245 00000044 00534f43     GATHER_ND...COS.
   3b55c:	52454857 00000045 4b4e4152 00000000     WHERE...RANK....
   3b56c:	00554c45 45564552 5f455352 55514553     ELU.REVERSE_SEQU
   3b57c:	45434e45 00000000 5254414d 445f5849     ENCE....MATRIX_D
   3b58c:	00474149 4e415551 455a4954 00000000     IAG.QUANTIZE....
   3b59c:	5254414d 535f5849 445f5445 00474149     MATRIX_SET_DIAG.
   3b5ac:	4e554f52 00000044 44524148 4957535f     ROUND...HARD_SWI
   3b5bc:	00004853 00004649 4c494857 00000045     SH..IF..WHILE...
   3b5cc:	5f4e4f4e 5f58414d 50505553 53534552     NON_MAX_SUPPRESS
   3b5dc:	5f4e4f49 00003456 5f4e4f4e 5f58414d     ION_V4..NON_MAX_
   3b5ec:	50505553 53534552 5f4e4f49 00003556     SUPPRESSION_V5..
   3b5fc:	54414353 5f524554 0000444e 454c4553     SCATTER_ND..SELE
   3b60c:	565f5443 00000032 534e4544 00594649     CT_V2...DENSIFY.
   3b61c:	4d474553 5f544e45 004d5553 43544142     SEGMENT_SUM.BATC
   3b62c:	414d5f48 4c554d54 00000000 59544f4e     H_MATMUL....NOTY
   3b63c:	00004550 414f4c46 00323354 31544e49     PE..FLOAT32.INT1
   3b64c:	00000036 33544e49 00000032 544e4955     6...INT32...UINT
   3b65c:	00000038 38544e49 00000000 36544e49     8...INT8....INT6
   3b66c:	00000034 4c4f4f42 00000000 504d4f43     4...BOOL....COMP
   3b67c:	3658454c 00000034 49525453 0000474e     LEX64...STRING..
   3b68c:	414f4c46 00363154 414f4c46 00343654     FLOAT16.FLOAT64.
   3b69c:	6e6b6e55 206e776f 65707974 00000000     Unknown type....
   3b6ac:	542f2e2e 65742f46 726f736e 776f6c66     ../TF/tensorflow
   3b6bc:	74696c2f 656b2f65 6c656e72 656b2f73     /lite/kernels/ke
   3b6cc:	6c656e72 6974755f 63632e6c 00000000     rnel_util.cc....
   3b6dc:	75706e69 72705f74 6375646f 63735f74     input_product_sc
   3b6ec:	20656c61 30203d3e 00000000 6c616373     ale >= 0....scal
   3b6fc:	69645f65 2f206666 74756f20 5f747570     e_diff / output_
   3b70c:	6c616373 3d3c2065 302e3020 00000032     scale <= 0.02...
   3b71c:	736c6166 00000065 253a7325 73252064     false...%s:%d %s
   3b72c:	203d2120 28207325 21206425 6425203d      != %s (%d != %d
   3b73c:	00000029 4c66546b 41657469 6e696666     )...kTfLiteAffin
   3b74c:	61755165 7a69746e 6f697461 0000006e     eQuantization...
   3b75c:	75706e69 713e2d74 746e6175 74617a69     input->quantizat
   3b76c:	2e6e6f69 65707974 00000000 746c6966     ion.type....filt
   3b77c:	3e2d7265 6e617571 617a6974 6e6f6974     er->quantization
   3b78c:	7079742e 00000065 69666661 715f656e     .type...affine_q
   3b79c:	746e6175 74617a69 006e6f69 69666661     uantization.affi
   3b7ac:	715f656e 746e6175 74617a69 2d6e6f69     ne_quantization-
   3b7bc:	6163733e 0000656c 75706e69 743e2d74     >scale..input->t
   3b7cc:	20657079 6b203d3d 694c6654 6e496574     ype == kTfLiteIn
   3b7dc:	7c203874 6e69207c 2d747570 7079743e     t8 || input->typ
   3b7ec:	3d3d2065 66546b20 6574694c 31746e49     e == kTfLiteInt1
   3b7fc:	00000036 4c66546b 49657469 0038746e     6...kTfLiteInt8.
   3b80c:	746c6966 3e2d7265 65707974 00000000     filter->type....
   3b81c:	5f6d756e 6e616863 736c656e 00000000     num_channels....
   3b82c:	69666661 715f656e 746e6175 74617a69     affine_quantizat
   3b83c:	2d6e6f69 6163733e 3e2d656c 657a6973     ion->scale->size
   3b84c:	00000000 746c6966 3e2d7265 736d6964     ....filter->dims
   3b85c:	61643e2d 615b6174 6e696666 75715f65     ->data[affine_qu
   3b86c:	69746e61 6974617a 3e2d6e6f 6e617571     antization->quan
   3b87c:	657a6974 69645f64 736e656d 5d6e6f69     tized_dimension]
   3b88c:	00000000 3d203164 3264203d 207c7c20     ....d1 == d2 || 
   3b89c:	3d203164 2031203d 64207c7c 3d3d2032     d1 == 1 || d2 ==
   3b8ac:	00003120 3d203164 2031203d 64207c7c      1..d1 == 1 || d
   3b8bc:	3d3d2031 78616d20 6c61765f 00006575     1 == max_value..
   3b8cc:	3d203264 2031203d 64207c7c 3d3d2032     d2 == 1 || d2 ==
   3b8dc:	78616d20 6c61765f 00006575 3d203364      max_value..d3 =
   3b8ec:	2031203d 64207c7c 3d3d2033 78616d20     = 1 || d3 == max
   3b8fc:	6c61765f 00006575                       _value..

0003b904 <_ZZN8gemmlowp19RoundingDivideByPOTIlEET_S1_iE19__PRETTY_FUNCTION__>:
   3b904:	65746e49 54726567 20657079 6d6d6567     IntegerType gemm
   3b914:	70776f6c 6f523a3a 69646e75 6944676e     lowp::RoundingDi
   3b924:	65646976 4f507942 6e492854 65676574     videByPOT(Intege
   3b934:	70795472 69202c65 2029746e 7469775b     rType, int) [wit
   3b944:	6e492068 65676574 70795472 203d2065     h IntegerType = 
   3b954:	676e6f6c 746e6920 0000005d 00002209     long int]...."..
   3b964:	00000000 000023cd 00003501 00000000     .....#...5......
	...
   3b980:	542f2e2e 65742f46 726f736e 776f6c66     ../TF/tensorflow
   3b990:	74696c2f 696d2f65 2f6f7263 6e72656b     /lite/micro/kern
   3b9a0:	2f736c65 69736d63 6e6e2d73 6e6f632f     els/cmsis-nn/con
   3b9b0:	63632e76 00000000 5f736168 73616962     v.cc....has_bias
   3b9c0:	207c7c20 65646f6e 6e693e2d 73747570      || node->inputs
   3b9d0:	69733e2d 3d20657a 0032203d 65646f6e     ->size == 2.node
   3b9e0:	756f3e2d 74757074 733e2d73 00657a69     ->outputs->size.
   3b9f0:	6f707865 746e656e 203d3e20 00000030     exponent >= 0...
   3ba00:	542f2e2e 68742f46 5f647269 74726170     ../TF/third_part
   3ba10:	65672f79 6f6c6d6d 662f7077 64657869     y/gemmlowp/fixed
   3ba20:	6e696f70 69662f74 70646578 746e696f     point/fixedpoint
   3ba30:	0000682e 6f707865 746e656e 203d3c20     .h..exponent <= 
   3ba40:	00003133 69666661 715f656e 746e6175     31..affine_quant
   3ba50:	74617a69 2d6e6f69 72657a3e 6f705f6f     ization->zero_po
   3ba60:	00746e69 69666661 715f656e 746e6175     int.affine_quant
   3ba70:	74617a69 2d6e6f69 6163733e 3e2d656c     ization->scale->
   3ba80:	657a6973 203d3d20 7c7c2031 66666120     size == 1 || aff
   3ba90:	5f656e69 6e617571 617a6974 6e6f6974     ine_quantization
   3baa0:	63733e2d 2d656c61 7a69733e 3d3d2065     ->scale->size ==
   3bab0:	6c696620 2d726574 6d69643e 643e2d73      filter->dims->d
   3bac0:	5b617461 6e6f436b 61755176 7a69746e     ata[kConvQuantiz
   3bad0:	69446465 736e656d 5d6e6f69 00000000     edDimension]....
   3bae0:	69666661 715f656e 746e6175 74617a69     affine_quantizat
   3baf0:	2d6e6f69 72657a3e 6f705f6f 2d746e69     ion->zero_point-
   3bb00:	7a69733e 00000065 65707954 20732520     >size...Type %s 
   3bb10:	29642528 746f6e20 70757320 74726f70     (%d) not support
   3bb20:	002e6465                                ed..

0003bb24 <_ZZN8gemmlowp19RoundingDivideByPOTIlEET_S1_iE19__PRETTY_FUNCTION__>:
   3bb24:	65746e49 54726567 20657079 6d6d6567     IntegerType gemm
   3bb34:	70776f6c 6f523a3a 69646e75 6944676e     lowp::RoundingDi
   3bb44:	65646976 4f507942 6e492854 65676574     videByPOT(Intege
   3bb54:	70795472 69202c65 2029746e 7469775b     rType, int) [wit
   3bb64:	6e492068 65676574 70795472 203d2065     h IntegerType = 
   3bb74:	676e6f6c 746e6920 0000005d 00003765     long int]...e7..
   3bb84:	00000000 00003791 00004329 00000000     .....7..)C......
	...
   3bba0:	542f2e2e 65742f46 726f736e 776f6c66     ../TF/tensorflow
   3bbb0:	74696c2f 696d2f65 2f6f7263 6e72656b     /lite/micro/kern
   3bbc0:	2f736c65 69736d63 6e6e2d73 6c75662f     els/cmsis-nn/ful
   3bbd0:	635f796c 656e6e6f 64657463 0063632e     ly_connected.cc.
   3bbe0:	253a7325 73252064 203d2120 28207325     %s:%d %s != %s (
   3bbf0:	21207325 7325203d 00000029 7074756f     %s != %s)...outp
   3bc00:	3e2d7475 65707974 00000000 75706e69     ut->type....inpu
   3bc10:	743e2d74 00657079 542f2e2e 65742f46     t->type.../TF/te
   3bc20:	726f736e 776f6c66 74696c2f 696d2f65     nsorflow/lite/mi
   3bc30:	2f6f7263 6e72656b 2f736c65 69736d63     cro/kernels/cmsi
   3bc40:	6e6e2d73 6c75662f 635f796c 656e6e6f     s-nn/fully_conne
   3bc50:	64657463 2063632e 72627948 6d206469     cted.cc Hybrid m
   3bc60:	6c65646f 72612073 6f6e2065 75732074     odels are not su
   3bc70:	726f7070 20646574 54206e6f 74694c46     pported on TFLit
   3bc80:	694d2065 2e6f7263 00000000 5f4d5241     e Micro.....ARM_
   3bc90:	4854414d 4355535f 53534543 00000000     MATH_SUCCESS....
   3bca0:	5f6d7261 6c6c7566 6f635f79 63656e6e     arm_fully_connec
   3bcb0:	5f646574 26283873 2c787463 63662620     ted_s8(&ctx, &fc
   3bcc0:	7261705f 2c736d61 75712620 5f746e61     _params, &quant_
   3bcd0:	61726170 202c736d 706e6926 645f7475     params, &input_d
   3bce0:	2c736d69 74654720 736e6554 6144726f     ims, GetTensorDa
   3bcf0:	693c6174 5f38746e 69283e74 7475706e     ta<int8_t>(input
   3bd00:	26202c29 746c6966 645f7265 2c736d69     ), &filter_dims,
   3bd10:	74654720 736e6554 6144726f 693c6174      GetTensorData<i
   3bd20:	5f38746e 66283e74 65746c69 202c2972     nt8_t>(filter), 
   3bd30:	61696226 69645f73 202c736d 54746547     &bias_dims, GetT
   3bd40:	6f736e65 74614472 6e693c61 3e323374     ensorData<int32>
   3bd50:	61696228 202c2973 74756f26 5f747570     (bias), &output_
   3bd60:	736d6964 6547202c 6e655474 44726f73     dims, GetTensorD
   3bd70:	3c617461 38746e69 283e745f 7074756f     ata<int8_t>(outp
   3bd80:	29297475 00000000 00004c31 00000000     ut))....1L......
   3bd90:	00004d7d 00004e89 00000000 00000000     }M...N..........
	...
   3bda8:	00004c31 00000000 00004d41 0000578d     1L......AM...W..
	...
   3bdc8:	75706e49 79742074 25206570 73692073     Input type %s is
   3bdd8:	746f6e20 72756320 746e6572 7320796c      not currently s
   3bde8:	6f707075 64657472 00000000 65707954     upported....Type
   3bdf8:	20732520 20746f6e 72727563 6c746e65      %s not currentl
   3be08:	75732079 726f7070 2e646574 00000000     y supported.....
	...
   3be20:	00006119 000072d5 00000000 00000000     .a...r..........
	...

0003be38 <_ZZN8gemmlowp19RoundingDivideByPOTIlEET_S1_iE19__PRETTY_FUNCTION__>:
   3be38:	65746e49 54726567 20657079 6d6d6567     IntegerType gemm
   3be48:	70776f6c 6f523a3a 69646e75 6944676e     lowp::RoundingDi
   3be58:	65646976 4f507942 6e492854 65676574     videByPOT(Intege
   3be68:	70795472 69202c65 2029746e 7469775b     rType, int) [wit
   3be78:	6e492068 65676574 70795472 203d2065     h IntegerType = 
   3be88:	676e6f6c 746e6920 0000005d 542f2e2e     long int]...../T
   3be98:	65742f46 726f736e 776f6c66 74696c2f     F/tensorflow/lit
   3bea8:	696d2f65 2f6f7263 6e72656b 2f736c65     e/micro/kernels/
   3beb8:	69736d63 6e6e2d73 666f732f 78616d74     cmsis-nn/softmax
   3bec8:	0063632e 496d754e 7475706e 6f6e2873     .cc.NumInputs(no
   3bed8:	00296564 4f6d754e 75707475 6e287374     de).NumOutputs(n
   3bee8:	2965646f 00000000 446d754e 6e656d69     ode)....NumDimen
   3bef8:	6e6f6973 6e692873 29747570 203d3e20     sions(input) >= 
   3bf08:	00000031 4c66546b 55657469 38746e49     1...kTfLiteUInt8
   3bf18:	00000000 7074756f 3e2d7475 61726170     ....output->para
   3bf28:	7a2e736d 5f6f7265 6e696f70 00000074     ms.zero_point...
   3bf38:	3732332d 00003836 3832312d 00000000     -32768..-128....
   3bf48:	7074756f 3e2d7475 61726170 732e736d     output->params.s
   3bf58:	656c6163 203d3d20 20662e31 3532202f     cale == 1.f / 25
   3bf68:	00000036 74756f28 2d747570 7261703e     6...(output->par
   3bf78:	2e736d61 6c616373 3d3d2065 662e3120     ams.scale == 1.f
   3bf88:	32202f20 20293635 28207c7c 7074756f      / 256) || (outp
   3bf98:	3e2d7475 61726170 732e736d 656c6163     ut->params.scale
   3bfa8:	203d3d20 20662e31 3532202f 00002935      == 1.f / 255)..
   3bfb8:	4c66546b 46657469 74616f6c 00003233     kTfLiteFloat32..
	...
   3bfd0:	00007725 00007575 00000000 00000000     %w..uu..........
	...
   3bfe8:	542f2e2e 65742f46 726f736e 776f6c66     ../TF/tensorflow
   3bff8:	74696c2f 696d2f65 2f6f7263 6e72656b     /lite/micro/kern
   3c008:	2f736c65 68736572 2e657061 00006363     els/reshape.cc..
   3c018:	0000312d 65727473 5f686374 006d6964     -1..stretch_dim.
   3c028:	5f6d756e 7074756f 655f7475 656d656c     num_output_eleme
   3c038:	0073746e 5f6d756e 75706e69 6c655f74     nts.num_input_el
   3c048:	6e656d65 00007374 496d754e 7475706e     ements..NumInput
   3c058:	6f6e2873 20296564 31203d3d 207c7c20     s(node) == 1 || 
   3c068:	496d754e 7475706e 6f6e2873 20296564     NumInputs(node) 
   3c078:	32203d3d 00000000 4c66546b 4f657469     == 2....kTfLiteO
   3c088:	0000006b 68736552 4f657061 75707475     k...ReshapeOutpu
   3c098:	6f632874 7865746e 6e202c74 2965646f     t(context, node)
   3c0a8:	00000000                                ....

0003c0ac <_ZTVN6tflite19GreedyMemoryPlannerE>:
	...
   3c0b4:	00007901 0000794d 00007909 00007c55     .y..My...y..U|..
   3c0c4:	00007903 00007cc1 206f6f54 796e616d     .y...|..Too many
   3c0d4:	66756220 73726566 616d2820 73692078      buffers (max is
   3c0e4:	29642520 00000000 66667562 69207265      %d)....buffer i
   3c0f4:	7865646e 20642520 6f207369 69737475     ndex %d is outsi
   3c104:	72206564 65676e61 74203020 6425206f     de range 0 to %d
   3c114:	00000000 6e616c50 2072656e 66667562     ....Planner buff
   3c124:	49207265 25203a44 63202c64 75636c61     er ID: %d, calcu
   3c134:	6574616c 666f2064 74657366 6425203a     lated offset: %d
   3c144:	6973202c 7220657a 69757165 3a646572     , size required:
   3c154:	2c642520 72696620 745f7473 5f656d69      %d, first_time_
   3c164:	61657263 3a646574 2c642520 73616c20     created: %d, las
   3c174:	69745f74 755f656d 3a646573 00642520     t_time_used: %d.
   3c184:	00007325 7265764f 3a70616c 20642520     %s..Overlap: %d 
   3c194:	3d642528 2c64253e 2d642520 2964253e     (%d=>%d, %d->%d)
   3c1a4:	20737620 28206425 3e3d6425 202c6425      vs %d (%d=>%d, 
   3c1b4:	3e2d6425 00296425                       %d->%d).

0003c1bc <_ZZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEmE19__PRETTY_FUNCTION__>:
   3c1bc:	74616c66 66667562 3a737265 6365563a     flatbuffers::Vec
   3c1cc:	3c726f74 3a3a3e54 75746572 745f6e72     tor<T>::return_t
   3c1dc:	20657079 74616c66 66667562 3a737265     ype flatbuffers:
   3c1ec:	6365563a 3c726f74 3a3a3e54 28746547     :Vector<T>::Get(
   3c1fc:	74616c66 66667562 3a737265 666f753a     flatbuffers::uof
   3c20c:	74657366 2029745f 736e6f63 775b2074     fset_t) const [w
   3c21c:	20687469 203d2054 74616c66 66667562     ith T = flatbuff
   3c22c:	3a737265 66664f3a 3c746573 696c6674     ers::Offset<tfli
   3c23c:	3a3a6574 736e6554 3b3e726f 616c6620     te::Tensor>; fla
   3c24c:	66756274 73726566 65563a3a 726f7463     tbuffers::Vector
   3c25c:	3a3e543c 7465723a 5f6e7275 65707974     <T>::return_type
   3c26c:	63203d20 74736e6f 6c667420 3a657469      = const tflite:
   3c27c:	6e65543a 2a726f73 6c66203b 75627461     :Tensor*; flatbu
   3c28c:	72656666 753a3a73 7366666f 745f7465     ffers::uoffset_t
   3c29c:	6c203d20 20676e6f 69736e75 64656e67      = long unsigned
   3c2ac:	746e6920 0000005d                        int]...

0003c2b4 <_ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE>:
	...
   3c2bc:	00007d01 00007d0d 00007d11 00007d15     .}...}...}...}..

0003c2cc <_ZZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEmE19__PRETTY_FUNCTION__>:
   3c2cc:	74616c66 66667562 3a737265 6365563a     flatbuffers::Vec
   3c2dc:	3c726f74 3a3a3e54 75746572 745f6e72     tor<T>::return_t
   3c2ec:	20657079 74616c66 66667562 3a737265     ype flatbuffers:
   3c2fc:	6365563a 3c726f74 3a3a3e54 28746547     :Vector<T>::Get(
   3c30c:	74616c66 66667562 3a737265 666f753a     flatbuffers::uof
   3c31c:	74657366 2029745f 736e6f63 775b2074     fset_t) const [w
   3c32c:	20687469 203d2054 74616c66 66667562     ith T = flatbuff
   3c33c:	3a737265 66664f3a 3c746573 696c6674     ers::Offset<tfli
   3c34c:	3a3a6574 66667542 3b3e7265 616c6620     te::Buffer>; fla
   3c35c:	66756274 73726566 65563a3a 726f7463     tbuffers::Vector
   3c36c:	3a3e543c 7465723a 5f6e7275 65707974     <T>::return_type
   3c37c:	63203d20 74736e6f 6c667420 3a657469      = const tflite:
   3c38c:	6675423a 2a726566 6c66203b 75627461     :Buffer*; flatbu
   3c39c:	72656666 753a3a73 7366666f 745f7465     ffers::uoffset_t
   3c3ac:	6c203d20 20676e6f 69736e75 64656e67      = long unsigned
   3c3bc:	746e6920 0000005d                        int]...

0003c3c4 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE>:
   3c3c4:	00000000                                ....

0003c3c8 <_ZZNK11flatbuffers6VectorIfE3GetEmE19__PRETTY_FUNCTION__>:
   3c3c8:	74616c66 66667562 3a737265 6365563a     flatbuffers::Vec
   3c3d8:	3c726f74 3a3a3e54 75746572 745f6e72     tor<T>::return_t
   3c3e8:	20657079 74616c66 66667562 3a737265     ype flatbuffers:
   3c3f8:	6365563a 3c726f74 3a3a3e54 28746547     :Vector<T>::Get(
   3c408:	74616c66 66667562 3a737265 666f753a     flatbuffers::uof
   3c418:	74657366 2029745f 736e6f63 775b2074     fset_t) const [w
   3c428:	20687469 203d2054 616f6c66 66203b74     ith T = float; f
   3c438:	6274616c 65666675 3a3a7372 74636556     latbuffers::Vect
   3c448:	543c726f 723a3a3e 72757465 79745f6e     or<T>::return_ty
   3c458:	3d206570 6f6c6620 203b7461 74616c66     pe = float; flat
   3c468:	66667562 3a737265 666f753a 74657366     buffers::uoffset
   3c478:	3d20745f 6e6f6c20 6e752067 6e676973     _t = long unsign
   3c488:	69206465 005d746e                       ed int].

0003c490 <_ZZNK11flatbuffers6VectorIxE3GetEmE19__PRETTY_FUNCTION__>:
   3c490:	74616c66 66667562 3a737265 6365563a     flatbuffers::Vec
   3c4a0:	3c726f74 3a3a3e54 75746572 745f6e72     tor<T>::return_t
   3c4b0:	20657079 74616c66 66667562 3a737265     ype flatbuffers:
   3c4c0:	6365563a 3c726f74 3a3a3e54 28746547     :Vector<T>::Get(
   3c4d0:	74616c66 66667562 3a737265 666f753a     flatbuffers::uof
   3c4e0:	74657366 2029745f 736e6f63 775b2074     fset_t) const [w
   3c4f0:	20687469 203d2054 676e6f6c 6e6f6c20     ith T = long lon
   3c500:	6e692067 66203b74 6274616c 65666675     g int; flatbuffe
   3c510:	3a3a7372 74636556 543c726f 723a3a3e     rs::Vector<T>::r
   3c520:	72757465 79745f6e 3d206570 6e6f6c20     eturn_type = lon
   3c530:	6f6c2067 6920676e 203b746e 74616c66     g long int; flat
   3c540:	66667562 3a737265 666f753a 74657366     buffers::uoffset
   3c550:	3d20745f 6e6f6c20 6e752067 6e676973     _t = long unsign
   3c560:	69206465 005d746e                       ed int].

0003c568 <_ZTVN6tflite14MicroAllocatorE>:
	...
   3c570:	00007d0f 00007d25 00007d35 00008541     .}..%}..5}..A...
   3c580:	00007d89 00007eb9 00007dd9 00008879     .}...~...}..y...

0003c590 <_ZN6tflite12_GLOBAL__N_1L24kOfflineMemAllocMetadataE>:
   3c590:	6c66664f 4d656e69 726f6d65 6c6c4179     OfflineMemoryAll
   3c5a0:	7461636f 006e6f69                       ocation.

0003c5a8 <_ZZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEmE19__PRETTY_FUNCTION__>:
   3c5a8:	74616c66 66667562 3a737265 6365563a     flatbuffers::Vec
   3c5b8:	3c726f74 3a3a3e54 75746572 745f6e72     tor<T>::return_t
   3c5c8:	20657079 74616c66 66667562 3a737265     ype flatbuffers:
   3c5d8:	6365563a 3c726f74 3a3a3e54 28746547     :Vector<T>::Get(
   3c5e8:	74616c66 66667562 3a737265 666f753a     flatbuffers::uof
   3c5f8:	74657366 2029745f 736e6f63 775b2074     fset_t) const [w
   3c608:	20687469 203d2054 74616c66 66667562     ith T = flatbuff
   3c618:	3a737265 66664f3a 3c746573 696c6674     ers::Offset<tfli
   3c628:	3a3a6574 7265704f 726f7461 66203b3e     te::Operator>; f
   3c638:	6274616c 65666675 3a3a7372 74636556     latbuffers::Vect
   3c648:	543c726f 723a3a3e 72757465 79745f6e     or<T>::return_ty
   3c658:	3d206570 6e6f6320 74207473 74696c66     pe = const tflit
   3c668:	4f3a3a65 61726570 2a726f74 6c66203b     e::Operator*; fl
   3c678:	75627461 72656666 753a3a73 7366666f     atbuffers::uoffs
   3c688:	745f7465 6c203d20 20676e6f 69736e75     et_t = long unsi
   3c698:	64656e67 746e6920 0000005d 6c696146     gned int]...Fail
   3c6a8:	74206465 6c61206f 61636f6c 6d206574     ed to allocate m
   3c6b8:	726f6d65 6f662079 6f632072 7865746e     emory for contex
   3c6c8:	743e2d74 6f736e65 202c7372 62206425     t->tensors, %d b
   3c6d8:	73657479 71657220 65726975 00000064     ytes required...
   3c6e8:	6c696146 74206465 6c61206f 61636f6c     Failed to alloca
   3c6f8:	6d206574 726f6d65 6f662079 6f6e2072     te memory for no
   3c708:	615f6564 725f646e 73696765 74617274     de_and_registrat
   3c718:	736e6f69 0000002e 6c696146 74206465     ions....Failed t
   3c728:	6c61206f 61636f6c 76206574 61697261     o allocate varia
   3c738:	20656c62 736e6574 6f20726f 69732066     ble tensor of si
   3c748:	2520657a 00000064 7373694d 20676e69     ze %d...Missing 
   3c758:	69676572 61727473 6e6f6974 726f6620     registration for
   3c768:	63706f20 5f65646f 65646e69 64252078      opcode_index %d
   3c778:	0000000a 6c696146 74206465 6567206f     ....Failed to ge
   3c788:	65722074 74736967 69746172 66206e6f     t registration f
   3c798:	206d6f72 6320706f 2065646f 200a7325     rom op code %s. 
   3c7a8:	00000000 70696b53 676e6970 20706f20     ....Skipping op 
   3c7b8:	20726f66 6f63706f 695f6564 7865646e     for opcode_index
   3c7c8:	0a642520 00000000 75736e55 726f7070      %d.....Unsuppor
   3c7d8:	20646574 61686562 726f6976 6f66203a     ted behavior: fo
   3c7e8:	20646e75 6c697562 206e6974 7265706f     und builtin oper
   3c7f8:	726f7461 20732520 68746977 73756320     ator %s with cus
   3c808:	206d6f74 6974706f 2e736e6f 0000000a     tom options.....
   3c818:	20646944 20746f6e 646e6966 70206120     Did not find a p
   3c828:	65737261 6f662072 73252072 00000000     arser for %s....
   3c838:	62616e55 7420656c 6c61206f 61636f6c     Unable to alloca
   3c848:	54206574 74694c66 66664165 51656e69     te TfLiteAffineQ
   3c858:	746e6175 74617a69 2e6e6f69 0000000a     uantization.....
   3c868:	62616e55 7420656c 6c61206f 61636f6c     Unable to alloca
   3c878:	71206574 746e6175 74617a69 2d6e6f69     te quantization-
   3c888:	72657a3e 6f705f6f 2e746e69 0000000a     >zero_point.....
   3c898:	6c696146 74206465 6e69206f 61697469     Failed to initia
   3c8a8:	657a696c 6e657420 20726f73 00006425     lize tensor %d..
   3c8b8:	62206425 73657479 736f6c20 75642074     %d bytes lost du
   3c8c8:	6f742065 696c6120 656d6e67 202e746e     e to alignment. 
   3c8d8:	61206f54 64696f76 69687420 6f6c2073     To avoid this lo
   3c8e8:	202c7373 61656c70 6d206573 20656b61     ss, please make 
   3c8f8:	65727573 65687420 6e657420 5f726f73     sure the tensor_
   3c908:	6e657261 73692061 20363120 65747962     arena is 16 byte
   3c918:	6c612073 656e6769 00002e64 6c696146     s aligned...Fail
   3c928:	74206465 6c61206f 61636f6c 70206574     ed to allocate p
   3c938:	69737265 6e657473 75622074 72656666     ersistent buffer
   3c948:	20666f20 657a6973 00642520 65746e49      of size %d.Inte
   3c958:	6c616e72 72726520 203a726f 6f6c6c41     rnal error: Allo
   3c968:	65746163 6d6f7246 6c696154 6e616320     cateFromTail can
   3c978:	746f6e20 20656220 6c6c6163 62206465      not be called b
   3c988:	65777465 74206e65 52206f77 65757165     etween two Reque
   3c998:	63537473 63746172 66754268 49726566     stScratchBufferI
   3c9a8:	6572416e 6320616e 736c6c61 0000002e     nArena calls....
   3c9b8:	6c696146 74206465 6572206f 74736967     Failed to regist
   3c9c8:	73207265 74617263 62206863 65666675     er scratch buffe
   3c9d8:	61682072 656c646e 726f6620 646f6e20     r handle for nod
   3c9e8:	73252065 00000000 66667542 25207265     e %s....Buffer %
   3c9f8:	6f6e2064 6f662074 2e646e75 20642520     d not found. %d 
   3ca08:	66667562 20737265 69617661 6c62616c     buffers availabl
   3ca18:	00002e65 796c6e4f 73203120 72676275     e...Only 1 subgr
   3ca28:	20687061 63207369 65727275 796c746e     aph is currently
   3ca38:	70757320 74726f70 0a2e6465 00000000      supported......
   3ca48:	7263694d 6c6c416f 7461636f 203a726f     MicroAllocator: 
   3ca58:	65646f4d 6c61206c 61636f6c 6e6f6974     Model allocation
   3ca68:	61747320 64657472 66656220 2065726f      started before 
   3ca78:	696e6966 6e696873 72702067 6f697665     finishing previo
   3ca88:	796c7375 6c6c6120 7461636f 6d206465     usly allocated m
   3ca98:	6c65646f 00000000 7263694d 6c6c416f     odel....MicroAll
   3caa8:	7461636f 203a726f 65646f4d 6c61206c     ocator: Model al
   3cab8:	61636f6c 6e6f6974 6e696620 65687369     location finishe
   3cac8:	65622064 65726f66 61747320 6e697472     d before startin
   3cad8:	6c612067 61636f6c 676e6974 646f6d20     g allocating mod
   3cae8:	00006c65 6c696146 74206465 6c61206f     el..Failed to al
   3caf8:	61636f6c 6d206574 726f6d65 6f662079     locate memory fo
   3cb08:	6c612072 61636f6c 6e6f6974 666e695f     r allocation_inf
   3cb18:	25202c6f 79622064 20736574 75716572     o, %d bytes requ
   3cb28:	64657269 00000000 2072624e 6f20666f     ired....Nbr of o
   3cb38:	696c6666 6220656e 65666675 666f2072     ffline buffer of
   3cb48:	74657366 25282073 69202964 656d206e     fsets (%d) in me
   3cb58:	61646174 6e206174 6520746f 6c617571     tadata not equal
   3cb68:	72626e20 6e657420 73726f73 64252820      nbr tensors (%d
   3cb78:	00000a29 69676f4c 72652063 20726f72     )...Logic error 
   3cb88:	6d206e69 726f6d65 6c702079 656e6e61     in memory planne
   3cb98:	74202c72 6f736e65 64252072 73616820     r, tensor %d has
   3cba8:	206e6120 61766e69 2064696c 6566696c      an invalid life
   3cbb8:	656d6974 6966203a 5f747372 61657263     time: first_crea
   3cbc8:	3a646574 2c642520 73616c20 73755f74     ted: %d, last_us
   3cbd8:	203a6465 00006425 542f2e2e 65742f46     ed: %d..../TF/te
   3cbe8:	726f736e 776f6c66 74696c2f 696d2f65     nsorflow/lite/mi
   3cbf8:	2f6f7263 7263696d 6c615f6f 61636f6c     cro/micro_alloca
   3cc08:	2e726f74 00006363 6e616c70 5f72656e     tor.cc..planner_
   3cc18:	6e657261 3d212061 6c756e20 7274706c     arena != nullptr
   3cc28:	00000000 6e657241 69732061 6920657a     ....Arena size i
   3cc38:	6f742073 6d73206f 206c6c61 20726f66     s too small for 
   3cc48:	69746361 69746176 62206e6f 65666675     activation buffe
   3cc58:	202e7372 6465654e 25206465 75622064     rs. Needed %d bu
   3cc68:	6e6f2074 2520796c 61772064 76612073     t only %d was av
   3cc78:	616c6961 2e656c62 00000000 6f6c6c61     ailable.....allo
   3cc88:	65746163 65745f64 726f736e 6d656d5f     cated_tensor_mem
   3cc98:	2079726f 6e203d21 706c6c75 00007274     ory != nullptr..

0003cca8 <_ZTVN6tflite18MicroErrorReporterE>:
	...
   3ccb0:	00000d35 00000e29 00008f91 00000a0d     5...)...........
   3ccc0:	6c696146 73206465 74726174 20676e69     Failed starting 
   3ccd0:	65646f6d 6c61206c 61636f6c 6e6f6974     model allocation
   3cce0:	00000a2e 65646f4e 20732520 6d756e28     ....Node %s (num
   3ccf0:	20726562 29666425 69616620 2064656c     ber %df) failed 
   3cd00:	70206f74 61706572 77206572 20687469     to prepare with 
   3cd10:	74617473 25207375 00000064 6f766e49     status %d...Invo
   3cd20:	2928656b 6c616320 2064656c 65746661     ke() called afte
   3cd30:	6e692072 61697469 617a696c 6e6f6974     r initialization
   3cd40:	69616620 0a64656c 00000000 65646f4e      failed.....Node
   3cd50:	20732520 6d756e28 20726562 20296425      %s (number %d) 
   3cd60:	6c696166 74206465 6e69206f 656b6f76     failed to invoke
   3cd70:	74697720 74732068 73757461 00642520      with status %d.
   3cd80:	75706e49 6e692074 20786564 6f206425     Input index %d o
   3cd90:	6f207475 61722066 2065676e 6e656c28     ut of range (len
   3cda0:	20687467 25207369 00002964 7074754f     gth is %d)..Outp
   3cdb0:	69207475 7865646e 20642520 2074756f     ut index %d out 
   3cdc0:	7220666f 65676e61 656c2820 6874676e     of range (length
   3cdd0:	20736920 00296425 736e6554 6920726f      is %d).Tensor i
   3cde0:	7865646e 20642520 2074756f 7220666f     ndex %d out of r
   3cdf0:	65676e61 656c2820 6874676e 20736920     ange (length is 
   3ce00:	00296425 6c696146 74206465 6572206f     %d).Failed to re
   3ce10:	20746573 69726176 656c6261 6e657420     set variable ten
   3ce20:	20726f73 69207461 7865646e 6425203a     sor at index: %d
   3ce30:	00000000 0b080403 12110e0d 16151413     ................
   3ce40:	00000017 00666e49 004e614e 005e322a     ....Inf.NaN.*2^.

0003ce50 <_ZTVN6tflite21SimpleMemoryAllocatorE>:
	...
   3ce58:	000097e9 0000986d 000097ed 0000982d     ....m.......-...
   3ce68:	6c696146 74206465 6c61206f 61636f6c     Failed to alloca
   3ce78:	6d206574 726f6d65 52202e79 65757165     te memory. Reque
   3ce88:	64657473 7525203a 7661202c 616c6961     sted: %u, availa
   3ce98:	20656c62 202c7525 7373696d 3a676e69     ble %u, missing:
   3cea8:	00752520                                 %u.

0003ceac <_ZTIN9__gnu_cxx20recursive_init_errorE>:
   3ceac:	0003cf2c 0003ceb8 0003d1c0              ,...........

0003ceb8 <_ZTSN9__gnu_cxx20recursive_init_errorE>:
   3ceb8:	5f5f394e 5f756e67 32787863 63657230     N9__gnu_cxx20rec
   3cec8:	69737275 695f6576 5f74696e 6f727265     ursive_init_erro
   3ced8:	00004572                                rE..

0003cedc <_ZTVN9__gnu_cxx20recursive_init_errorE>:
   3cedc:	00000000 0003ceac 0000cd01 0000cd15     ................
   3ceec:	0000d80d                                ....

0003cef0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   3cef0:	0003cf2c 0003cefc 0003d124              ,.......$...

0003cefc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   3cefc:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   3cf0c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   3cf1c:	456f666e 00000000                       nfoE....

0003cf24 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   3cf24:	00000000 0003cef0 0000cd71 0000cd85     ........q.......
   3cf34:	0000ce9d 0000ce9d 0000d3a1 0000d315     ................
   3cf44:	0000ce6d 0000cddd 0000cda1              m...........

0003cf50 <_ZTISt9type_info>:
   3cf50:	0003d15c 0003cf58                       \...X...

0003cf58 <_ZTSSt9type_info>:
   3cf58:	74397453 5f657079 6f666e69 00000000     St9type_info....
   3cf68:	74737973 00006d65 656e6567 00636972     system..generic.
   3cf78:	69736162 74735f63 676e6972 4d5f3a3a     basic_string::_M
   3cf88:	6e6f635f 75727473 6e207463 206c6c75     _construct null 
   3cf98:	20746f6e 696c6176 00000064              not valid...

0003cfa4 <_ZTIN12_GLOBAL__N_121system_error_categoryE>:
   3cfa4:	0003cf2c 0003cfc4 0003cfbc              ,...........

0003cfb0 <_ZTIN12_GLOBAL__N_122generic_error_categoryE>:
   3cfb0:	0003cf2c 0003cff0 0003cfbc              ,...........

0003cfbc <_ZTINSt3_V214error_categoryE>:
   3cfbc:	0003d15c 0003d01c                       \.......

0003cfc4 <_ZTSN12_GLOBAL__N_121system_error_categoryE>:
   3cfc4:	32314e2a 4f4c475f 5f4c4142 315f4e5f     *N12_GLOBAL__N_1
   3cfd4:	79733132 6d657473 7272655f 635f726f     21system_error_c
   3cfe4:	67657461 4579726f 00000000              ategoryE....

0003cff0 <_ZTSN12_GLOBAL__N_122generic_error_categoryE>:
   3cff0:	32314e2a 4f4c475f 5f4c4142 315f4e5f     *N12_GLOBAL__N_1
   3d000:	65673232 6972656e 72655f63 5f726f72     22generic_error_
   3d010:	65746163 79726f67 00000045              categoryE...

0003d01c <_ZTSNSt3_V214error_categoryE>:
   3d01c:	3374534e 3132565f 72726534 635f726f     NSt3_V214error_c
   3d02c:	67657461 4579726f 00000000              ategoryE....

0003d038 <_ZTVN12_GLOBAL__N_121system_error_categoryE>:
   3d038:	00000000 0003cfa4 0000cf5d 0000cf65     ........]...e...
   3d048:	0000cf35 0000cf7d 0000d015 0000cf3d     5...}.......=...
   3d058:	0000d04d 0000cf45                       M...E...

0003d060 <_ZTVN12_GLOBAL__N_122generic_error_categoryE>:
   3d060:	00000000 0003cfb0 0000cf61 0000cf71     ........a...q...
   3d070:	0000cf2d 0000cf7d 0000d015 0000cf3d     -...}.......=...
   3d080:	0000d04d 0000cf45 69736162 74735f63     M...E...basic_st
   3d090:	676e6972 535f3a3a 6e6f635f 75727473     ring::_S_constru
   3d0a0:	6e207463 206c6c75 20746f6e 696c6176     ct null not vali
   3d0b0:	00000064 69736162 74735f63 676e6972     d...basic_string
   3d0c0:	535f3a3a 6572635f 00657461 69736162     ::_S_create.basi
   3d0d0:	74735f63 676e6972 4d5f3a3a 6572635f     c_string::_M_cre
   3d0e0:	00657461 3a647473 6461623a 6c6c615f     ate.std::bad_all
   3d0f0:	0000636f                                oc..

0003d0f4 <_ZTISt9bad_alloc>:
   3d0f4:	0003cf2c 0003d100 0003d1c0              ,...........

0003d100 <_ZTSSt9bad_alloc>:
   3d100:	62397453 615f6461 636f6c6c 00000000     St9bad_alloc....

0003d110 <_ZTVSt9bad_alloc>:
   3d110:	00000000 0003d0f4 0000d2e5 0000d2f9     ................
   3d120:	0000d2dd                                ....

0003d124 <_ZTIN10__cxxabiv117__class_type_infoE>:
   3d124:	0003cf2c 0003d130 0003cf50              ,...0...P...

0003d130 <_ZTSN10__cxxabiv117__class_type_infoE>:
   3d130:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   3d140:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   3d150:	00000045                                E...

0003d154 <_ZTVN10__cxxabiv117__class_type_infoE>:
   3d154:	00000000 0003d124 0000d359 0000d36d     ....$...Y...m...
   3d164:	0000ce9d 0000ce9d 0000d3a1 0000d315     ................
   3d174:	0000d389 0000d3cd 0000d34d 3a647473     ........M...std:
   3d184:	6461623a 6378655f 69747065 00006e6f     :bad_exception..
   3d194:	3a647473 6378653a 69747065 00006e6f     std::exception..

0003d1a4 <_ZTIN10__cxxabiv115__forced_unwindE>:
   3d1a4:	0003d15c 0003d1c8                       \.......

0003d1ac <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   3d1ac:	0003d15c 0003d1e8                       \.......

0003d1b4 <_ZTISt13bad_exception>:
   3d1b4:	0003cf2c 0003d20c 0003d1c0              ,...........

0003d1c0 <_ZTISt9exception>:
   3d1c0:	0003d15c 0003d220                       \... ...

0003d1c8 <_ZTSN10__cxxabiv115__forced_unwindE>:
   3d1c8:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   3d1d8:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

0003d1e8 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   3d1e8:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   3d1f8:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   3d208:	00456e6f                                onE.

0003d20c <_ZTSSt13bad_exception>:
   3d20c:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   3d21c:	0000006e                                n...

0003d220 <_ZTSSt9exception>:
   3d220:	65397453 70656378 6e6f6974 00000000     St9exception....

0003d230 <_ZTVSt13bad_exception>:
   3d230:	00000000 0003d1b4 0000d809 0000d81d     ................
   3d240:	0000d815                                ....

0003d244 <_ZTISt11logic_error>:
   3d244:	0003cf2c 0003d25c 0003d1c0              ,...\.......

0003d250 <_ZTISt12length_error>:
   3d250:	0003cf2c 0003d26c 0003d244              ,...l...D...

0003d25c <_ZTSSt11logic_error>:
   3d25c:	31317453 69676f6c 72655f63 00726f72     St11logic_error.

0003d26c <_ZTSSt12length_error>:
   3d26c:	32317453 676e656c 655f6874 726f7272     St12length_error
   3d27c:	00000000                                ....

0003d280 <_ZTVSt11logic_error>:
   3d280:	00000000 0003d244 0000e049 0000e089     ....D...I.......
   3d290:	0000e045                                E...

0003d294 <_ZTVSt12length_error>:
   3d294:	00000000 0003d250 0000e09d 0000e0b1     ....P...........
   3d2a4:	0000e045 6d726574 74616e69 61632065     E...terminate ca
   3d2b4:	64656c6c 63657220 69737275 796c6576     lled recursively
   3d2c4:	0000000a 6d726574 74616e69 61632065     ....terminate ca
   3d2d4:	64656c6c 74666120 74207265 776f7268     lled after throw
   3d2e4:	20676e69 69206e61 6174736e 2065636e     ing an instance 
   3d2f4:	2720666f 00000000 00000a27 6d726574     of '....'...term
   3d304:	74616e69 61632065 64656c6c 74697720     inate called wit
   3d314:	74756f68 206e6120 69746361 65206576     hout an active e
   3d324:	70656378 6e6f6974 0000000a 68772020     xception....  wh
   3d334:	29287461 0020203a                       at():  .

0003d33c <standard_subs>:
   3d33c:	00000074 0003db1c 00000003 0003db1c     t...............
   3d34c:	00000003 00000000 00000000 00000061     ............a...
   3d35c:	0003de2c 0000000e 0003de2c 0000000e     ,.......,.......
   3d36c:	0003de3c 00000009 00000062 0003de48     <.......b...H...
   3d37c:	00000011 0003de48 00000011 0003de5c     ....H.......\...
   3d38c:	0000000c 00000073 0003de6c 0000000b     ....s...l.......
   3d39c:	0003de78 00000046 0003de5c 0000000c     x...F...\.......
   3d3ac:	00000069 0003dec0 0000000c 0003ded0     i...............
   3d3bc:	00000031 0003df04 0000000d 0000006f     1...........o...
   3d3cc:	0003df14 0000000c 0003df24 00000031     ........$...1...
   3d3dc:	0003df58 0000000d 00000064 0003df68     X.......d...h...
   3d3ec:	0000000d 0003df78 00000032 0003dfac     ....x...2.......
   3d3fc:	0000000e                                ....

0003d400 <cplus_demangle_builtin_types>:
   3d400:	0003e1ac 0000000b 0003e1ac 0000000b     ................
   3d410:	00000000 0003e1b8 00000004 0003e1c0     ................
   3d420:	00000007 00000007 0003e1c8 00000004     ................
   3d430:	0003e1d0 00000004 00000000 0003e1d8     ................
   3d440:	00000006 0003e1d8 00000006 00000008     ................
   3d450:	0003e1e0 0000000b 0003e1e0 0000000b     ................
   3d460:	00000008 0003e1ec 00000005 0003e1ec     ................
   3d470:	00000005 00000008 0003e1f4 0000000a     ................
   3d480:	0003e1f4 0000000a 00000008 0003e200     ................
   3d490:	0000000d 0003e200 0000000d 00000000     ................
   3d4a0:	0003ba60 00000003 0003ba60 00000003     `.......`.......
   3d4b0:	00000001 0003e210 0000000c 0003e220     ............ ...
   3d4c0:	00000008 00000002 00000000 00000000     ................
	...
   3d4dc:	0003eb50 00000004 0003eb50 00000004     P.......P.......
   3d4ec:	00000003 0003e22c 0000000d 0003e22c     ....,.......,...
   3d4fc:	0000000d 00000004 0003e23c 00000008     ........<.......
   3d50c:	0003e23c 00000008 00000000 0003e248     <...........H...
   3d51c:	00000011 0003e248 00000011 00000000     ....H...........
	...
   3d568:	0003e25c 00000005 0003e25c 00000005     \.......\.......
   3d578:	00000000 0003e264 0000000e 0003e264     ....d.......d...
   3d588:	0000000e 00000000 00000000 00000000     ................
	...
   3d5a4:	0003e274 00000004 0003e274 00000004     t.......t.......
   3d5b4:	00000009 0003e27c 00000007 0003e1c8     ....|...........
   3d5c4:	00000004 00000000 0003e284 00000009     ................
   3d5d4:	0003eb50 00000004 00000005 0003e290     P...............
   3d5e4:	00000012 0003e290 00000012 00000006     ................
   3d5f4:	0003dd38 00000003 0003dd38 00000003     8.......8.......
   3d604:	00000000 0003e2a4 00000009 0003e2a4     ................
   3d614:	00000009 00000000 0003e2b0 00000009     ................
   3d624:	0003e2b0 00000009 00000000 0003e2bc     ................
   3d634:	0000000a 0003e2bc 0000000a 00000000     ................
   3d644:	0003e2c8 00000004 0003e2c8 00000004     ................
   3d654:	00000008 0003e2d0 00000008 0003e2d0     ................
   3d664:	00000008 00000000 0003e2dc 00000008     ................
   3d674:	0003e2dc 00000008 00000000 0003e2e8     ................
   3d684:	00000011 0003e2e8 00000011 00000000     ................

0003d694 <cplus_demangle_operators>:
   3d694:	0003dfbc 0003dfc0 00000002 00000002     ................
   3d6a4:	0003dfc4 0003dfc8 00000001 00000002     ................
   3d6b4:	0003dfcc 0003ddf0 00000002 00000002     ................
   3d6c4:	0003dcec 0003dfd0 00000001 00000001     ................
   3d6d4:	0003dfd4 0003dfd0 00000001 00000002     ................
   3d6e4:	0003dfd8 0003dfdc 00000008 00000001     ................
   3d6f4:	0003dfe8 0003dfdc 00000008 00000001     ................
   3d704:	0003c014 0003dfec 0000000a 00000002     ................
   3d714:	0003dafc 0003ac64 00000002 00000002     ....d...........
   3d724:	0003dff8 0003dffc 00000001 00000002     ................
   3d734:	0003e000 0003e004 00000001 00000001     ................
   3d744:	0003e008 0003e00c 00000002 00000002     ................
   3d754:	0003e010 0003e014 00000009 00000001     ................
   3d764:	0003e020 0003e024 0000000c 00000002      ...$...........
   3d774:	0003e034 0003e038 00000001 00000001     4...8...........
   3d784:	0003e03c 0003e040 00000007 00000001     <...@...........
   3d794:	0003e048 0003e04c 00000002 00000002     H...L...........
   3d7a4:	0003db00 0003e178 00000001 00000002     ....x...........
   3d7b4:	0003e050 0003e054 00000001 00000002     P...T...........
   3d7c4:	0003e058 0003e05c 00000002 00000002     X...\...........
   3d7d4:	0003e060 0003e064 00000001 00000002     `...d...........
   3d7e4:	0003e068 0003e06c 00000002 00000002     h...l...........
   3d7f4:	0003e070 0003dd38 00000003 00000003     p...8...........
   3d804:	0003e074 0003dd38 00000003 00000003     t...8...........
   3d814:	0003e078 0003dd38 00000003 00000002     x...8...........
   3d824:	0003e07c 0003dd38 00000003 00000002     |...8...........
   3d834:	0003e71c 0003e080 00000002 00000002     ................
   3d844:	0003dcf0 0003db44 00000002 00000001     ....D...........
   3d854:	0003e084 0003df00 00000001 00000002     ................
   3d864:	0003dcf8 0003db64 00000002 00000002     ....d...........
   3d874:	0003e088 0003e08c 00000003 00000002     ................
   3d884:	0003b7c0 0003e090 00000002 00000002     ................
   3d894:	0003db38 0003e094 0000000b 00000001     8...............
   3d8a4:	0003e0a0 0003e0a4 00000002 00000002     ................
   3d8b4:	0003e0a8 0003e0ac 00000001 00000002     ................
   3d8c4:	0003e0b0 0003e0b4 00000002 00000002     ................
   3d8d4:	0003e0b8 0003e0bc 00000002 00000002     ................
   3d8e4:	0003e0c0 0003e0c4 00000001 00000002     ................
   3d8f4:	0003e0c8 0003e038 00000001 00000002     ....8...........
   3d904:	0003e0cc 0003e0d0 00000002 00000001     ................
   3d914:	0003e0d4 0003e0d8 00000005 00000003     ................
   3d924:	0003e0e0 0003e0e4 00000002 00000002     ................
   3d934:	0003e2a0 0003e0c4 00000001 00000001     ................
   3d944:	0003e0e8 0003e0ec 00000001 00000001     ................
   3d954:	0003e0f0 0003e0f4 00000003 00000003     ................
   3d964:	0003e0f8 0003e0fc 00000002 00000002     ................
   3d974:	0003e100 0003e104 00000002 00000002     ................
   3d984:	0003e8b8 0003e108 00000001 00000002     ................
   3d994:	0003e10c 0003e110 00000002 00000002     ................
   3d9a4:	0003e114 0003e118 00000001 00000002     ................
   3d9b4:	0003e11c 0003e120 00000003 00000002     .... ...........
   3d9c4:	0003e124 0003e128 00000002 00000001     $...(...........
   3d9d4:	0003e12c 0003e118 00000001 00000001     ,...............
   3d9e4:	0003db04 0003e130 00000002 00000002     ....0...........
   3d9f4:	0003db08 0003e134 00000001 00000003     ....4...........
   3da04:	0003e138 0003e13c 00000002 00000002     8...<...........
   3da14:	0003e140 0003e144 00000003 00000002     @...D...........
   3da24:	0003e148 0003e14c 00000010 00000002     H...L...........
   3da34:	0003e160 0003e164 00000001 00000002     `...d...........
   3da44:	0003e168 0003e16c 00000002 00000002     h...l...........
   3da54:	0003daf8 0003e170 00000009 00000001     ....p...........
   3da64:	0003ddb8 0003e170 00000009 00000001     ....p...........
   3da74:	0003e17c 0003e180 0000000b 00000002     |...............
   3da84:	0003dff4 0003e18c 00000007 00000001     ................
   3da94:	0003e194 0003e18c 00000007 00000001     ................
   3daa4:	0003cca4 0003e198 00000005 00000000     ................
   3dab4:	0003e1a0 0003e1a4 00000006 00000001     ................
	...
   3dad4:	4f4c475f 5f4c4142 00000000 6f6e6128     _GLOBAL_....(ano
   3dae4:	6f6d796e 6e207375 73656d61 65636170     nymous namespace
   3daf4:	00000029 00005073 00006c63 00007464     )...sP..cl..dt..
   3db04:	00007470 00007571 69727473 6c20676e     pt..qu..string l
   3db14:	72657469 00006c61 00647473 6f747561     iteral..std.auto
   3db24:	00000000 6c636564 65707974 74756128     ....decltype(aut
   3db34:	0000296f 0000696c 6962615b 0000003a     o)..li..[abi:...
   3db44:	00003a3a 6665647b 746c7561 67726120     ::..{default arg
   3db54:	00000023 003a3a7d 7272414a 00007961     #...}::.JArray..
   3db64:	00005d5b 6f747561 0000003a 62617476     []..auto:...vtab
   3db74:	6620656c 0020726f 20545456 20726f66     le for .VTT for 
   3db84:	00000000 736e6f63 63757274 6e6f6974     ....construction
   3db94:	61747620 20656c62 20726f66 00000000      vtable for ....
   3dba4:	2d6e692d 00000000 65707974 6f666e69     -in-....typeinfo
   3dbb4:	726f6620 00000020 65707974 6f666e69      for ...typeinfo
   3dbc4:	6d616e20 6f662065 00002072 65707974      name for ..type
   3dbd4:	6f666e69 206e6620 20726f66 00000000     info fn for ....
   3dbe4:	2d6e6f6e 74726976 206c6175 6e756874     non-virtual thun
   3dbf4:	6f74206b 00000020 61766f63 6e616972     k to ...covarian
   3dc04:	65722074 6e727574 75687420 74206b6e     t return thunk t
   3dc14:	0000206f 6176616a 616c4320 66207373     o ..java Class f
   3dc24:	0020726f 72617567 61762064 62616972     or .guard variab
   3dc34:	6620656c 0020726f 20534c54 74696e69     le for .TLS init
   3dc44:	6e756620 6f697463 6f66206e 00002072      function for ..
   3dc54:	20534c54 70617277 20726570 636e7566     TLS wrapper func
   3dc64:	6e6f6974 726f6620 00000020 65666572     tion for ...refe
   3dc74:	636e6572 65742065 726f706d 20797261     rence temporary 
   3dc84:	00000023 64646968 61206e65 7361696c     #...hidden alias
   3dc94:	726f6620 00000020 2d6e6f6e 6e617274      for ...non-tran
   3dca4:	74636173 206e6f69 6e6f6c63 6f662065     saction clone fo
   3dcb4:	00002072 7461535f 00000020 6363415f     r .._Sat ..._Acc
   3dcc4:	00006d75 6172465f 00007463 0000202c     um.._Fract.., ..
   3dcd4:	7265706f 726f7461 00000000 7265706f     operator....oper
   3dce4:	726f7461 00000020 00006461 00007367     ator ...ad..gs..
   3dcf4:	0000283e 00007869 00203a20 2077656e     >(..ix.. : .new 
   3dd04:	00000000 00006c75 00006c6c 006c6c75     ....ul..ll..ull.
   3dd14:	65757274 00000000 6176616a 73657220     true....java res
   3dd24:	6372756f 00002065 6c636564 65707974     ource ..decltype
   3dd34:	00002820 002e2e2e 73696874 00000000      (......this....
   3dd44:	7261707b 0000236d 626f6c67 63206c61     {parm#..global c
   3dd54:	74736e6f 74637572 2073726f 6579656b     onstructors keye
   3dd64:	6f742064 00000020 626f6c67 64206c61     d to ...global d
   3dd74:	72747365 6f746375 6b207372 64657965     estructors keyed
   3dd84:	206f7420 00000000 6d616c7b 28616462      to ....{lambda(
   3dd94:	00000000 00002329 6e6e757b 64656d61     ....)#..{unnamed
   3dda4:	70797420 00002365 6c635b20 20656e6f      type#.. [clone 
   3ddb4:	00000000 00005a73 73657220 63697274     ....sZ.. restric
   3ddc4:	00000074 6c6f7620 6c697461 00000065     t... volatile...
   3ddd4:	6e6f6320 00007473 61727420 6361736e      const.. transac
   3dde4:	6e6f6974 6661735f 00000065 00002626     tion_safe...&&..
   3ddf4:	706d6f63 2078656c 00000000 67616d69     complex ....imag
   3de04:	72616e69 00002079 002a3a3a 765f5f20     inary ..::*. __v
   3de14:	6f746365 00002872 2e2e2e28 00000000     ector(..(.......
   3de24:	292e2e2e 00000000 3a647473 6c6c613a     ...)....std::all
   3de34:	7461636f 0000726f 6f6c6c61 6f746163     ocator..allocato
   3de44:	00000072 3a647473 7361623a 735f6369     r...std::basic_s
   3de54:	6e697274 00000067 69736162 74735f63     tring...basic_st
   3de64:	676e6972 00000000 3a647473 7274733a     ring....std::str
   3de74:	00676e69 3a647473 7361623a 735f6369     ing.std::basic_s
   3de84:	6e697274 68633c67 202c7261 3a647473     tring<char, std:
   3de94:	6168633a 72745f72 73746961 6168633c     :char_traits<cha
   3dea4:	202c3e72 3a647473 6c6c613a 7461636f     r>, std::allocat
   3deb4:	633c726f 3e726168 00003e20 3a647473     or<char> >..std:
   3dec4:	7473693a 6d616572 00000000 3a647473     :istream....std:
   3ded4:	7361623a 695f6369 65727473 633c6d61     :basic_istream<c
   3dee4:	2c726168 64747320 68633a3a 745f7261     har, std::char_t
   3def4:	74696172 68633c73 203e7261 0000003e     raits<char> >...
   3df04:	69736162 73695f63 61657274 0000006d     basic_istream...
   3df14:	3a647473 74736f3a 6d616572 00000000     std::ostream....
   3df24:	3a647473 7361623a 6f5f6369 65727473     std::basic_ostre
   3df34:	633c6d61 2c726168 64747320 68633a3a     am<char, std::ch
   3df44:	745f7261 74696172 68633c73 203e7261     ar_traits<char> 
   3df54:	0000003e 69736162 736f5f63 61657274     >...basic_ostrea
   3df64:	0000006d 3a647473 736f693a 61657274     m...std::iostrea
   3df74:	0000006d 3a647473 7361623a 695f6369     m...std::basic_i
   3df84:	7274736f 3c6d6165 72616863 7473202c     ostream<char, st
   3df94:	633a3a64 5f726168 69617274 633c7374     d::char_traits<c
   3dfa4:	3e726168 00003e20 69736162 6f695f63     har> >..basic_io
   3dfb4:	65727473 00006d61 00004e61 00003d26     stream..aN..&=..
   3dfc4:	00005361 0000003d 00006161 00000026     aS..=...aa..&...
   3dfd4:	00006e61 00007461 67696c61 20666f6e     an..at..alignof 
   3dfe4:	00000000 00007a61 736e6f63 61635f74     ....az..const_ca
   3dff4:	00007473 00006d63 0000002c 00006f63     st..cm..,...co..
   3e004:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
   3e014:	656c6564 5d5b6574 00000020 00006364     delete[] ...dc..
   3e024:	616e7964 5f63696d 74736163 00000000     dynamic_cast....
   3e034:	00006564 0000002a 00006c64 656c6564     de..*...dl..dele
   3e044:	00206574 00007364 00002a2e 00007664     te .ds...*..dv..
   3e054:	0000002f 00004f65 00003d5e 00006f65     /...eO..^=..eo..
   3e064:	0000005e 00007165 00003d3d 00004c66     ^...eq..==..fL..
   3e074:	00005266 00006c66 00007266 00003d3e     fR..fl..fr..>=..
   3e084:	00007467 0000536c 003d3c3c 00003d3c     gt..lS..<<=.<=..
   3e094:	7265706f 726f7461 00202222 0000736c     operator"" .ls..
   3e0a4:	00003c3c 0000746c 0000003c 0000496d     <<..lt..<...mI..
   3e0b4:	00003d2d 00004c6d 00003d2a 0000696d     -=..mL..*=..mi..
   3e0c4:	0000002d 00006c6d 00006d6d 00002d2d     -...ml..mm..--..
   3e0d4:	0000616e 5b77656e 0000005d 0000656e     na..new[]...ne..
   3e0e4:	00003d21 0000746e 00000021 0000776e     !=..nt..!...nw..
   3e0f4:	0077656e 0000526f 00003d7c 00006f6f     new.oR..|=..oo..
   3e104:	00007c7c 0000007c 00004c70 00003d2b     ||..|...pL..+=..
   3e114:	00006c70 0000002b 00006d70 002a3e2d     pl..+...pm..->*.
   3e124:	00007070 00002b2b 00007370 00003e2d     pp..++..ps..->..
   3e134:	0000003f 00004d72 00003d25 00005372     ?...rM..%=..rS..
   3e144:	003d3e3e 00006372 6e696572 70726574     >>=.rc..reinterp
   3e154:	5f746572 74736163 00000000 00006d72     ret_cast....rm..
   3e164:	00000025 00007372 00003e3e 657a6973     %...rs..>>..size
   3e174:	2e2e666f 0000002e 00006373 74617473     of......sc..stat
   3e184:	635f6369 00747361 657a6973 0020666f     ic_cast.sizeof .
   3e194:	00007a73 6f726874 00000077 00007774     sz..throw...tw..
   3e1a4:	6f726874 00002077 6e676973 63206465     throw ..signed c
   3e1b4:	00726168 6c6f6f62 00000000 6c6f6f62     har.bool....bool
   3e1c4:	006e6165 72616863 00000000 65747962     ean.char....byte
   3e1d4:	00000000 62756f64 0000656c 676e6f6c     ....double..long
   3e1e4:	756f6420 00656c62 616f6c66 00000074      double.float...
   3e1f4:	6c665f5f 3174616f 00003832 69736e75     __float128..unsi
   3e204:	64656e67 61686320 00000072 69736e75     gned char...unsi
   3e214:	64656e67 746e6920 00000000 69736e75     gned int....unsi
   3e224:	64656e67 00000000 69736e75 64656e67     gned....unsigned
   3e234:	6e6f6c20 00000067 6e695f5f 38323174      long...__int128
   3e244:	00000000 69736e75 64656e67 695f5f20     ....unsigned __i
   3e254:	3231746e 00000038 726f6873 00000074     nt128...short...
   3e264:	69736e75 64656e67 6f687320 00007472     unsigned short..
   3e274:	64696f76 00000000 61686377 00745f72     void....wchar_t.
   3e284:	676e6f6c 6e6f6c20 00000067 69736e75     long long...unsi
   3e294:	64656e67 6e6f6c20 6f6c2067 0000676e     gned long long..
   3e2a4:	69636564 336c616d 00000032 69636564     decimal32...deci
   3e2b4:	366c616d 00000034 69636564 316c616d     mal64...decimal1
   3e2c4:	00003832 666c6168 00000000 72616863     28..half....char
   3e2d4:	745f3631 00000000 72616863 745f3233     16_t....char32_t
   3e2e4:	00000000 6c636564 65707974 6c756e28     ....decltype(nul
   3e2f4:	7274706c 00000029 66707865 00000000     lptr)...expf....

0003e304 <halF>:
   3e304:	3f000000 bf000000                       ...?....

0003e30c <ln2HI>:
   3e30c:	3f317180 bf317180                       .q1?.q1.

0003e314 <ln2LO>:
   3e314:	3717f7d1 b717f7d1 7566202c 6974636e     ...7...., functi
   3e324:	203a6e6f 00000000 65737361 6f697472     on: ....assertio
   3e334:	2522206e 66202273 656c6961 66203a64     n "%s" failed: f
   3e344:	20656c69 22732522 696c202c 2520656e     ile "%s", line %
   3e354:	25732564 00000a73                       d%s%s...

0003e35c <_ctype_>:
   3e35c:	20202000 20202020 28282020 20282828     .         ((((( 
   3e36c:	20202020 20202020 20202020 20202020                     
   3e37c:	10108820 10101010 10101010 10101010      ...............
   3e38c:	04040410 04040404 10040404 10101010     ................
   3e39c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   3e3ac:	01010101 01010101 01010101 10101010     ................
   3e3bc:	42421010 42424242 02020202 02020202     ..BBBBBB........
   3e3cc:	02020202 02020202 02020202 10101010     ................
   3e3dc:	00000020 00000000 00000000 00000000      ...............
	...

0003e460 <_global_impure_ptr>:
   3e460:	20000028 00000043 49534f50 00000058     (.. C...POSIX...
   3e470:	63637553 00737365 20746f4e 656e776f     Success.Not owne
   3e480:	00000072 73206f4e 20686375 656c6966     r...No such file
   3e490:	20726f20 65726964 726f7463 00000079      or directory...
   3e4a0:	73206f4e 20686375 636f7270 00737365     No such process.
   3e4b0:	65746e49 70757272 20646574 74737973     Interrupted syst
   3e4c0:	63206d65 006c6c61 204f2f49 6f727265     em call.I/O erro
   3e4d0:	00000072 73206f4e 20686375 69766564     r...No such devi
   3e4e0:	6f206563 64612072 73657264 00000073     ce or address...
   3e4f0:	20677241 7473696c 6f6f7420 6e6f6c20     Arg list too lon
   3e500:	00000067 63657845 726f6620 2074616d     g...Exec format 
   3e510:	6f727265 00000072 6b636f53 61207465     error...Socket a
   3e520:	6165726c 63207964 656e6e6f 64657463     lready connected
   3e530:	00000000 20646142 656c6966 6d756e20     ....Bad file num
   3e540:	00726562 63206f4e 646c6968 006e6572     ber.No children.
   3e550:	74736544 74616e69 206e6f69 72646461     Destination addr
   3e560:	20737365 75716572 64657269 00000000     ess required....
   3e570:	6d206f4e 2065726f 636f7270 65737365     No more processe
   3e580:	00000073 20746f4e 756f6e65 73206867     s...Not enough s
   3e590:	65636170 00000000 6d726550 69737369     pace....Permissi
   3e5a0:	64206e6f 65696e65 00000064 20646142     on denied...Bad 
   3e5b0:	72646461 00737365 69766544 6f206563     address.Device o
   3e5c0:	65722072 72756f73 62206563 00797375     r resource busy.
   3e5d0:	656c6946 69786520 00737473 736f7243     File exists.Cros
   3e5e0:	65642d73 65636976 6e696c20 0000006b     s-device link...
   3e5f0:	73206f4e 20686375 69766564 00006563     No such device..
   3e600:	20746f4e 69642061 74636572 0079726f     Not a directory.
   3e610:	74736f48 20736920 6e776f64 00000000     Host is down....
   3e620:	6e6e6f43 69746365 61206e6f 6165726c     Connection alrea
   3e630:	69207964 7270206e 6572676f 00007373     dy in progress..
   3e640:	61207349 72696420 6f746365 00007972     Is a directory..
   3e650:	61766e49 2064696c 75677261 746e656d     Invalid argument
   3e660:	00000000 7774654e 206b726f 65746e69     ....Network inte
   3e670:	63616672 73692065 746f6e20 6e6f6320     rface is not con
   3e680:	75676966 00646572 6e6e6f43 69746365     figured.Connecti
   3e690:	61206e6f 74726f62 62206465 656e2079     on aborted by ne
   3e6a0:	726f7774 0000006b 206f6f54 796e616d     twork...Too many
   3e6b0:	65706f20 6966206e 2073656c 73206e69      open files in s
   3e6c0:	65747379 0000006d 656c6946 73656420     ystem...File des
   3e6d0:	70697263 20726f74 756c6176 6f742065     criptor value to
   3e6e0:	616c206f 00656772 20746f4e 68632061     o large.Not a ch
   3e6f0:	63617261 20726574 69766564 00006563     aracter device..
   3e700:	74786554 6c696620 75622065 00007973     Text file busy..
   3e710:	656c6946 6f6f7420 72616c20 00006567     File too large..
   3e720:	74736f48 20736920 65726e75 61686361     Host is unreacha
   3e730:	00656c62 73206f4e 65636170 66656c20     ble.No space lef
   3e740:	6e6f2074 76656420 00656369 20746f4e     t on device.Not 
   3e750:	70707573 6574726f 00000064 656c6c49     supported...Ille
   3e760:	206c6167 6b656573 00000000 64616552     gal seek....Read
   3e770:	6c6e6f2d 69662079 7320656c 65747379     -only file syste
   3e780:	0000006d 206f6f54 796e616d 6e696c20     m...Too many lin
   3e790:	0000736b 6b6f7242 70206e65 00657069     ks..Broken pipe.
   3e7a0:	6874614d 74616d65 20736369 75677261     Mathematics argu
   3e7b0:	746e656d 74756f20 20666f20 616d6f64     ment out of doma
   3e7c0:	6f206e69 75662066 6974636e 00006e6f     in of function..
   3e7d0:	75736552 7420746c 6c206f6f 65677261     Result too large
   3e7e0:	00000000 6d206f4e 61737365 6f206567     ....No message o
   3e7f0:	65642066 65726973 79742064 00006570     f desired type..
   3e800:	6e656449 69666974 72207265 766f6d65     Identifier remov
   3e810:	00006465 656c6c49 206c6167 65747962     ed..Illegal byte
   3e820:	71657320 636e6575 00000065 64616544      sequence...Dead
   3e830:	6b636f6c 00000000 7774654e 206b726f     lock....Network 
   3e840:	75207369 6165726e 62616863 0000656c     is unreachable..
   3e850:	6c206f4e 006b636f 20746f4e 74732061     No lock.Not a st
   3e860:	6d616572 00000000 65727453 69206d61     ream....Stream i
   3e870:	6c74636f 6d697420 74756f65 00000000     octl timeout....
   3e880:	73206f4e 61657274 6572206d 72756f73     No stream resour
   3e890:	00736563 74726956 206c6175 63726963     ces.Virtual circ
   3e8a0:	20746975 67207369 00656e6f 746f7250     uit is gone.Prot
   3e8b0:	6c6f636f 72726520 0000726f 6e6b6e55     ocol error..Unkn
   3e8c0:	206e776f 746f7270 6c6f636f 00000000     own protocol....
   3e8d0:	746c754d 706f6869 74746120 74706d65     Multihop attempt
   3e8e0:	00006465 20646142 7373656d 00656761     ed..Bad message.
   3e8f0:	636e7546 6e6f6974 746f6e20 706d6920     Function not imp
   3e900:	656d656c 6465746e 00000000 65726944     lemented....Dire
   3e910:	726f7463 6f6e2079 6d652074 00797470     ctory not empty.
   3e920:	656c6946 20726f20 68746170 6d616e20     File or path nam
   3e930:	6f742065 6f6c206f 0000676e 206f6f54     e too long..Too 
   3e940:	796e616d 6d797320 696c6f62 696c2063     many symbolic li
   3e950:	00736b6e 62206f4e 65666675 70732072     nks.No buffer sp
   3e960:	20656361 69617661 6c62616c 00000065     ace available...
   3e970:	64206f4e 00617461 72646441 20737365     No data.Address 
   3e980:	696d6166 6e20796c 7320746f 6f707075     family not suppo
   3e990:	64657472 20796220 746f7270 6c6f636f     rted by protocol
   3e9a0:	6d616620 00796c69 746f7250 6c6f636f      family.Protocol
   3e9b0:	6f727720 7420676e 20657079 20726f66      wrong type for 
   3e9c0:	6b636f73 00007465 6b636f53 6f207465     socket..Socket o
   3e9d0:	61726570 6e6f6974 206e6f20 2d6e6f6e     peration on non-
   3e9e0:	6b636f73 00007465 746f7250 6c6f636f     socket..Protocol
   3e9f0:	746f6e20 61766120 62616c69 0000656c      not available..
   3ea00:	6e6e6f43 69746365 72206e6f 73756665     Connection refus
   3ea10:	00006465 6e6e6f43 69746365 72206e6f     ed..Connection r
   3ea20:	74657365 20796220 72656570 00000000     eset by peer....
   3ea30:	72646441 20737365 65726c61 20796461     Address already 
   3ea40:	75206e69 00006573 72646441 20737365     in use..Address 
   3ea50:	20746f6e 69617661 6c62616c 00000065     not available...
   3ea60:	74666f53 65726177 75616320 20646573     Software caused 
   3ea70:	6e6e6f63 69746365 61206e6f 74726f62     connection abort
   3ea80:	00000000 6b636f53 69207465 6f6e2073     ....Socket is no
   3ea90:	6f632074 63656e6e 00646574 6b636f53     t connected.Sock
   3eaa0:	69207465 6c612073 64616572 6f632079     et is already co
   3eab0:	63656e6e 00646574 7265704f 6f697461     nnected.Operatio
   3eac0:	6163206e 6c65636e 00006465 74617453     n canceled..Stat
   3ead0:	6f6e2065 65722074 65766f63 6c626172     e not recoverabl
   3eae0:	00000065 76657250 73756f69 6e776f20     e...Previous own
   3eaf0:	64207265 00646569 7265704f 6f697461     er died.Operatio
   3eb00:	6f6e206e 75732074 726f7070 20646574     n not supported 
   3eb10:	73206e6f 656b636f 00000074 756c6156     on socket...Valu
   3eb20:	6f742065 616c206f 20656772 20726f66     e too large for 
   3eb30:	69666564 2064656e 61746164 70797420     defined data typ
   3eb40:	00000065 7373654d 20656761 206f6f74     e...Message too 
   3eb50:	676e6f6c 00000000 6e6e6f43 69746365     long....Connecti
   3eb60:	74206e6f 64656d69 74756f20 00000000     on timed out....
   3eb70:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   3eb80:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   3eb90:	00000000 33323130 37363534 62613938     ....0123456789ab
   3eba0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

0003ebb0 <blanks.7223>:
   3ebb0:	20202020 20202020 20202020 20202020                     

0003ebc0 <zeroes.7224>:
   3ebc0:	30303030 30303030 30303030 30303030     0000000000000000

0003ebd0 <blanks.7217>:
   3ebd0:	20202020 20202020 20202020 20202020                     

0003ebe0 <zeroes.7218>:
   3ebe0:	30303030 30303030 30303030 30303030     0000000000000000

0003ebf0 <blanks.7238>:
   3ebf0:	20202020 20202020 20202020 20202020                     

0003ec00 <zeroes.7239>:
   3ec00:	30303030 30303030 30303030 30303030     0000000000000000
   3ec10:	69666e49 7974696e 00000000 00000000     Infinity........

0003ec20 <__mprec_bigtens>:
   3ec20:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   3ec30:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   3ec40:	7f73bf3c 75154fdd                       <.s..O.u

0003ec48 <__mprec_tens>:
   3ec48:	00000000 3ff00000 00000000 40240000     .......?......$@
   3ec58:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   3ec68:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   3ec78:	00000000 412e8480 00000000 416312d0     .......A......cA
   3ec88:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   3ec98:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   3eca8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   3ecb8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   3ecc8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   3ecd8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   3ece8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   3ecf8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   3ed08:	79d99db4 44ea7843                       ...yCx.D

0003ed10 <p05.6055>:
   3ed10:	00000005 00000019 0000007d 8101b108     ........}.......
   3ed20:	8400b0b0 00000000 7ffcecad 00b108a9     ................
   3ed30:	0801ffff 001c040e 00000e18 7ffcec99     ................
   3ed40:	00b108a9 0801ffff 001c040e 00000e18     ................
   3ed50:	7ffcec85 0005a8b0 0c01ffff 0000020c     ................
   3ed60:	002a0414 00000436 8101b108 8400b0b0     ..*.6...........
   3ed70:	00000000 8101b108 8400b0b0 00000000     ................
   3ed80:	7ffcec55 00b108a9 0001ffff 8101b108     U...............
   3ed90:	8400b0b0 00000000 7ffcec3d 0016afb0     ........=.......
   3eda0:	011510ff 08ca200b 09a60000 0109b004     ..... ..........
   3edb0:	00000001 00000000 7ffcec1d 01b10884     ................
   3edc0:	00b0b0b0 011910ff 0806020c 10040c01     ................
   3edd0:	000a1c05 7f000100 007d0000 00000000     ..........}.....
   3ede0:	00000000 8101b108 8400b0b0 00000000     ................
   3edf0:	8101b108 8400b0b0 00000000 7ffcebd9     ................
   3ee00:	0001a8b0 0801ffff 0018040e 0000041e     ................
   3ee10:	7ffcebc5 0004afb0 011d10ff 3a042412     .............$.:
   3ee20:	32042e01 c8507801 01d00001 01000004     ...2.xP.........
	...
   3ee38:	7ffceb9d 0001aab0 012910ff 00303418     ..........)..40.
   3ee48:	94046800 1a720301 01b00000 0001e218     .h....r.........
   3ee58:	002601cc 01000200 0000007d 00000000     ..&.....}.......
   3ee68:	ffffe358 8101b108 8400b0b0 00000000     X...............
   3ee78:	8101b108 8400b0b0 00000000              ............

0003ee84 <_init>:
   3ee84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ee86:	bf00      	nop
   3ee88:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3ee8a:	bc08      	pop	{r3}
   3ee8c:	469e      	mov	lr, r3
   3ee8e:	4770      	bx	lr

0003ee90 <__init_array_start>:
   3ee90:	0001cc7d 	.word	0x0001cc7d

0003ee94 <__frame_dummy_init_array_entry>:
   3ee94:	00000289 0000d089 0000d1d1 0000d53d     ............=...
   3eea4:	0000e11d 0000e1a1 0000e225              ........%...

0003eeb0 <_fini>:
   3eeb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3eeb2:	bf00      	nop
   3eeb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3eeb6:	bc08      	pop	{r3}
   3eeb8:	469e      	mov	lr, r3
   3eeba:	4770      	bx	lr

0003eebc <__fini_array_start>:
   3eebc:	00000265 	.word	0x00000265
