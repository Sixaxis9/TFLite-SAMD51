
TFLite_SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000253e0  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000238  000253e0  000253e0  000353e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20000000  00025618  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  000409d0  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  000409d0  2**0
                  CONTENTS
  5 .bss          0000f2f8  200009d0  00025fe8  000409d0  2**2
                  ALLOC
  6 .stack        00010000  2000fcc8  000352e0  000409d0  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  000409d0  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  000409fe  2**0
                  CONTENTS, READONLY
  9 .debug_info   001ba4c1  00000000  00000000  00040a57  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000e7a4  00000000  00000000  001faf18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0004b06f  00000000  00000000  002096bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001360  00000000  00000000  0025472b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000088a0  00000000  00000000  00255a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000368b4  00000000  00000000  0025e32b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00027ba6  00000000  00000000  00294bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00195611  00000000  00000000  002bc785  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00010c28  00000000  00000000  00451d98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 fc 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	89 09 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      7c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      8c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d9 08 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 00 00 00 00 00 00 00 00 d1 02 00 00     ................
     184:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     204:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200009d0 	.word	0x200009d0
     280:	00000000 	.word	0x00000000
     284:	00025618 	.word	0x00025618

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00025618 	.word	0x00025618
     2c4:	200009d4 	.word	0x200009d4
     2c8:	00025618 	.word	0x00025618
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b1c      	ldr	r3, [pc, #112]	; (348 <Reset_Handler+0x74>)
     2d8:	4a1c      	ldr	r2, [pc, #112]	; (34c <Reset_Handler+0x78>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b1c      	ldr	r3, [pc, #112]	; (350 <Reset_Handler+0x7c>)
     2e0:	4a19      	ldr	r2, [pc, #100]	; (348 <Reset_Handler+0x74>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4916      	ldr	r1, [pc, #88]	; (34c <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b14      	ldr	r3, [pc, #80]	; (354 <Reset_Handler+0x80>)
     302:	4a15      	ldr	r2, [pc, #84]	; (358 <Reset_Handler+0x84>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4b0f      	ldr	r3, [pc, #60]	; (35c <Reset_Handler+0x88>)
     320:	4a0f      	ldr	r2, [pc, #60]	; (360 <Reset_Handler+0x8c>)
     322:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     326:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     328:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     32c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     334:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     338:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     33c:	4b09      	ldr	r3, [pc, #36]	; (364 <Reset_Handler+0x90>)
     33e:	4798      	blx	r3
        main();
     340:	4b09      	ldr	r3, [pc, #36]	; (368 <Reset_Handler+0x94>)
     342:	4798      	blx	r3
     344:	e7fe      	b.n	344 <Reset_Handler+0x70>
     346:	bf00      	nop
     348:	20000000 	.word	0x20000000
     34c:	00025618 	.word	0x00025618
     350:	200009d0 	.word	0x200009d0
     354:	2000fcc8 	.word	0x2000fcc8
     358:	200009d0 	.word	0x200009d0
     35c:	e000ed00 	.word	0xe000ed00
     360:	00000000 	.word	0x00000000
     364:	0001509d 	.word	0x0001509d
     368:	00000c31 	.word	0x00000c31

0000036c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     36c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     36e:	4b04      	ldr	r3, [pc, #16]	; (380 <delay_ms+0x14>)
     370:	681c      	ldr	r4, [r3, #0]
     372:	4b04      	ldr	r3, [pc, #16]	; (384 <delay_ms+0x18>)
     374:	4798      	blx	r3
     376:	4601      	mov	r1, r0
     378:	4620      	mov	r0, r4
     37a:	4b03      	ldr	r3, [pc, #12]	; (388 <delay_ms+0x1c>)
     37c:	4798      	blx	r3
     37e:	bd10      	pop	{r4, pc}
     380:	200009ec 	.word	0x200009ec
     384:	0000071d 	.word	0x0000071d
     388:	00000739 	.word	0x00000739

0000038c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     38c:	b570      	push	{r4, r5, r6, lr}
     38e:	460d      	mov	r5, r1
     390:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     392:	4604      	mov	r4, r0
     394:	b160      	cbz	r0, 3b0 <io_write+0x24>
     396:	1c08      	adds	r0, r1, #0
     398:	bf18      	it	ne
     39a:	2001      	movne	r0, #1
     39c:	2234      	movs	r2, #52	; 0x34
     39e:	4905      	ldr	r1, [pc, #20]	; (3b4 <io_write+0x28>)
     3a0:	4b05      	ldr	r3, [pc, #20]	; (3b8 <io_write+0x2c>)
     3a2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     3a4:	6823      	ldr	r3, [r4, #0]
     3a6:	4632      	mov	r2, r6
     3a8:	4629      	mov	r1, r5
     3aa:	4620      	mov	r0, r4
     3ac:	4798      	blx	r3
}
     3ae:	bd70      	pop	{r4, r5, r6, pc}
     3b0:	2000      	movs	r0, #0
     3b2:	e7f3      	b.n	39c <io_write+0x10>
     3b4:	0001c2f0 	.word	0x0001c2f0
     3b8:	00000641 	.word	0x00000641

000003bc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3be:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     3c0:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     3c2:	b12f      	cbz	r7, 3d0 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     3c4:	688d      	ldr	r5, [r1, #8]
     3c6:	463c      	mov	r4, r7
     3c8:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     3ca:	f1c2 0e01 	rsb	lr, r2, #1
     3ce:	e00b      	b.n	3e8 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
     3d0:	4b0e      	ldr	r3, [pc, #56]	; (40c <timer_add_timer_task+0x50>)
     3d2:	4798      	blx	r3
		return;
     3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     3d6:	4473      	add	r3, lr
     3d8:	68a0      	ldr	r0, [r4, #8]
     3da:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
     3dc:	42ab      	cmp	r3, r5
     3de:	d20a      	bcs.n	3f6 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     3e0:	6823      	ldr	r3, [r4, #0]
     3e2:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     3e4:	b153      	cbz	r3, 3fc <timer_add_timer_task+0x40>
     3e6:	461c      	mov	r4, r3
		if (it->time_label <= time) {
     3e8:	6863      	ldr	r3, [r4, #4]
     3ea:	4293      	cmp	r3, r2
     3ec:	d8f3      	bhi.n	3d6 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
     3ee:	68a0      	ldr	r0, [r4, #8]
     3f0:	4403      	add	r3, r0
     3f2:	1a9b      	subs	r3, r3, r2
     3f4:	e7f2      	b.n	3dc <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
     3f6:	42a7      	cmp	r7, r4
     3f8:	d004      	beq.n	404 <timer_add_timer_task+0x48>
     3fa:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     3fc:	4620      	mov	r0, r4
     3fe:	4b04      	ldr	r3, [pc, #16]	; (410 <timer_add_timer_task+0x54>)
     400:	4798      	blx	r3
     402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     404:	4660      	mov	r0, ip
     406:	4b01      	ldr	r3, [pc, #4]	; (40c <timer_add_timer_task+0x50>)
     408:	4798      	blx	r3
     40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     40c:	00000669 	.word	0x00000669
     410:	00000695 	.word	0x00000695

00000414 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
     418:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     41a:	6907      	ldr	r7, [r0, #16]
     41c:	3701      	adds	r7, #1
     41e:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     420:	7e03      	ldrb	r3, [r0, #24]
     422:	f013 0f01 	tst.w	r3, #1
     426:	d113      	bne.n	450 <timer_process_counted+0x3c>
     428:	7e03      	ldrb	r3, [r0, #24]
     42a:	f013 0f02 	tst.w	r3, #2
     42e:	d10f      	bne.n	450 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     430:	b354      	cbz	r4, 488 <timer_process_counted+0x74>
     432:	6863      	ldr	r3, [r4, #4]
     434:	1afb      	subs	r3, r7, r3
     436:	68a2      	ldr	r2, [r4, #8]
     438:	4293      	cmp	r3, r2
     43a:	d307      	bcc.n	44c <timer_process_counted+0x38>
     43c:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     43e:	f100 0814 	add.w	r8, r0, #20
     442:	f8df 9048 	ldr.w	r9, [pc, #72]	; 48c <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     446:	f8df a048 	ldr.w	sl, [pc, #72]	; 490 <timer_process_counted+0x7c>
     44a:	e012      	b.n	472 <timer_process_counted+0x5e>
     44c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     450:	7e03      	ldrb	r3, [r0, #24]
     452:	f043 0302 	orr.w	r3, r3, #2
     456:	7603      	strb	r3, [r0, #24]
		return;
     458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     45c:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     45e:	68e3      	ldr	r3, [r4, #12]
     460:	4620      	mov	r0, r4
     462:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     464:	b185      	cbz	r5, 488 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     466:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     468:	686b      	ldr	r3, [r5, #4]
     46a:	1afb      	subs	r3, r7, r3
     46c:	68aa      	ldr	r2, [r5, #8]
     46e:	4293      	cmp	r3, r2
     470:	d30a      	bcc.n	488 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
     472:	4640      	mov	r0, r8
     474:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
     476:	7c23      	ldrb	r3, [r4, #16]
     478:	2b01      	cmp	r3, #1
     47a:	d1ef      	bne.n	45c <timer_process_counted+0x48>
			tmp->time_label = time;
     47c:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     47e:	463a      	mov	r2, r7
     480:	4621      	mov	r1, r4
     482:	4640      	mov	r0, r8
     484:	47d0      	blx	sl
     486:	e7e9      	b.n	45c <timer_process_counted+0x48>
     488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     48c:	0000069d 	.word	0x0000069d
     490:	000003bd 	.word	0x000003bd

00000494 <timer_init>:
{
     494:	b538      	push	{r3, r4, r5, lr}
     496:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     498:	4604      	mov	r4, r0
     49a:	b178      	cbz	r0, 4bc <timer_init+0x28>
     49c:	1c08      	adds	r0, r1, #0
     49e:	bf18      	it	ne
     4a0:	2001      	movne	r0, #1
     4a2:	223b      	movs	r2, #59	; 0x3b
     4a4:	4906      	ldr	r1, [pc, #24]	; (4c0 <timer_init+0x2c>)
     4a6:	4b07      	ldr	r3, [pc, #28]	; (4c4 <timer_init+0x30>)
     4a8:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     4aa:	4629      	mov	r1, r5
     4ac:	4620      	mov	r0, r4
     4ae:	4b06      	ldr	r3, [pc, #24]	; (4c8 <timer_init+0x34>)
     4b0:	4798      	blx	r3
	descr->time                           = 0;
     4b2:	2000      	movs	r0, #0
     4b4:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     4b6:	4b05      	ldr	r3, [pc, #20]	; (4cc <timer_init+0x38>)
     4b8:	6023      	str	r3, [r4, #0]
}
     4ba:	bd38      	pop	{r3, r4, r5, pc}
     4bc:	2000      	movs	r0, #0
     4be:	e7f0      	b.n	4a2 <timer_init+0xe>
     4c0:	0001c304 	.word	0x0001c304
     4c4:	00000641 	.word	0x00000641
     4c8:	0000091d 	.word	0x0000091d
     4cc:	00000415 	.word	0x00000415

000004d0 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     4d4:	460f      	mov	r7, r1
     4d6:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     4d8:	4604      	mov	r4, r0
     4da:	b328      	cbz	r0, 528 <usart_sync_write+0x58>
     4dc:	b331      	cbz	r1, 52c <usart_sync_write+0x5c>
     4de:	1c10      	adds	r0, r2, #0
     4e0:	bf18      	it	ne
     4e2:	2001      	movne	r0, #1
     4e4:	22f1      	movs	r2, #241	; 0xf1
     4e6:	4912      	ldr	r1, [pc, #72]	; (530 <usart_sync_write+0x60>)
     4e8:	4b12      	ldr	r3, [pc, #72]	; (534 <usart_sync_write+0x64>)
     4ea:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     4ec:	3408      	adds	r4, #8
     4ee:	4d12      	ldr	r5, [pc, #72]	; (538 <usart_sync_write+0x68>)
     4f0:	4620      	mov	r0, r4
     4f2:	47a8      	blx	r5
     4f4:	2800      	cmp	r0, #0
     4f6:	d0fb      	beq.n	4f0 <usart_sync_write+0x20>
     4f8:	3f01      	subs	r7, #1
     4fa:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     4fc:	f8df 9040 	ldr.w	r9, [pc, #64]	; 540 <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     500:	4d0d      	ldr	r5, [pc, #52]	; (538 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     502:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     506:	4620      	mov	r0, r4
     508:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     50a:	4620      	mov	r0, r4
     50c:	47a8      	blx	r5
     50e:	2800      	cmp	r0, #0
     510:	d0fb      	beq.n	50a <usart_sync_write+0x3a>
			;
	} while (++offset < length);
     512:	3601      	adds	r6, #1
     514:	4546      	cmp	r6, r8
     516:	d3f4      	bcc.n	502 <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
     518:	4d08      	ldr	r5, [pc, #32]	; (53c <usart_sync_write+0x6c>)
     51a:	4620      	mov	r0, r4
     51c:	47a8      	blx	r5
     51e:	2800      	cmp	r0, #0
     520:	d0fb      	beq.n	51a <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
     522:	4630      	mov	r0, r6
     524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     528:	2000      	movs	r0, #0
     52a:	e7db      	b.n	4e4 <usart_sync_write+0x14>
     52c:	2000      	movs	r0, #0
     52e:	e7d9      	b.n	4e4 <usart_sync_write+0x14>
     530:	0001c31c 	.word	0x0001c31c
     534:	00000641 	.word	0x00000641
     538:	00000ae3 	.word	0x00000ae3
     53c:	00000aed 	.word	0x00000aed
     540:	00000ad5 	.word	0x00000ad5

00000544 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     548:	460f      	mov	r7, r1
     54a:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     54c:	4604      	mov	r4, r0
     54e:	b1e0      	cbz	r0, 58a <usart_sync_read+0x46>
     550:	b1e9      	cbz	r1, 58e <usart_sync_read+0x4a>
     552:	1c10      	adds	r0, r2, #0
     554:	bf18      	it	ne
     556:	2001      	movne	r0, #1
     558:	f44f 7286 	mov.w	r2, #268	; 0x10c
     55c:	490d      	ldr	r1, [pc, #52]	; (594 <usart_sync_read+0x50>)
     55e:	4b0e      	ldr	r3, [pc, #56]	; (598 <usart_sync_read+0x54>)
     560:	4798      	blx	r3
     562:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
     564:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     566:	3408      	adds	r4, #8
     568:	4d0c      	ldr	r5, [pc, #48]	; (59c <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     56a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 5a0 <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
     56e:	4620      	mov	r0, r4
     570:	47a8      	blx	r5
     572:	2800      	cmp	r0, #0
     574:	d0fb      	beq.n	56e <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     576:	4620      	mov	r0, r4
     578:	47c8      	blx	r9
     57a:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     57e:	3601      	adds	r6, #1
     580:	4546      	cmp	r6, r8
     582:	d3f4      	bcc.n	56e <usart_sync_read+0x2a>

	return (int32_t)offset;
}
     584:	4630      	mov	r0, r6
     586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     58a:	2000      	movs	r0, #0
     58c:	e7e4      	b.n	558 <usart_sync_read+0x14>
     58e:	2000      	movs	r0, #0
     590:	e7e2      	b.n	558 <usart_sync_read+0x14>
     592:	bf00      	nop
     594:	0001c31c 	.word	0x0001c31c
     598:	00000641 	.word	0x00000641
     59c:	00000af7 	.word	0x00000af7
     5a0:	00000adb 	.word	0x00000adb

000005a4 <usart_sync_init>:
{
     5a4:	b538      	push	{r3, r4, r5, lr}
     5a6:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     5a8:	4604      	mov	r4, r0
     5aa:	b198      	cbz	r0, 5d4 <usart_sync_init+0x30>
     5ac:	1c08      	adds	r0, r1, #0
     5ae:	bf18      	it	ne
     5b0:	2001      	movne	r0, #1
     5b2:	2234      	movs	r2, #52	; 0x34
     5b4:	4908      	ldr	r1, [pc, #32]	; (5d8 <usart_sync_init+0x34>)
     5b6:	4b09      	ldr	r3, [pc, #36]	; (5dc <usart_sync_init+0x38>)
     5b8:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     5ba:	4629      	mov	r1, r5
     5bc:	f104 0008 	add.w	r0, r4, #8
     5c0:	4b07      	ldr	r3, [pc, #28]	; (5e0 <usart_sync_init+0x3c>)
     5c2:	4798      	blx	r3
	if (init_status) {
     5c4:	4603      	mov	r3, r0
     5c6:	b918      	cbnz	r0, 5d0 <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
     5c8:	4a06      	ldr	r2, [pc, #24]	; (5e4 <usart_sync_init+0x40>)
     5ca:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     5cc:	4a06      	ldr	r2, [pc, #24]	; (5e8 <usart_sync_init+0x44>)
     5ce:	6022      	str	r2, [r4, #0]
}
     5d0:	4618      	mov	r0, r3
     5d2:	bd38      	pop	{r3, r4, r5, pc}
     5d4:	2000      	movs	r0, #0
     5d6:	e7ec      	b.n	5b2 <usart_sync_init+0xe>
     5d8:	0001c31c 	.word	0x0001c31c
     5dc:	00000641 	.word	0x00000641
     5e0:	00000a95 	.word	0x00000a95
     5e4:	00000545 	.word	0x00000545
     5e8:	000004d1 	.word	0x000004d1

000005ec <usart_sync_enable>:
{
     5ec:	b510      	push	{r4, lr}
	ASSERT(descr);
     5ee:	4604      	mov	r4, r0
     5f0:	2253      	movs	r2, #83	; 0x53
     5f2:	4906      	ldr	r1, [pc, #24]	; (60c <usart_sync_enable+0x20>)
     5f4:	3000      	adds	r0, #0
     5f6:	bf18      	it	ne
     5f8:	2001      	movne	r0, #1
     5fa:	4b05      	ldr	r3, [pc, #20]	; (610 <usart_sync_enable+0x24>)
     5fc:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     5fe:	f104 0008 	add.w	r0, r4, #8
     602:	4b04      	ldr	r3, [pc, #16]	; (614 <usart_sync_enable+0x28>)
     604:	4798      	blx	r3
}
     606:	2000      	movs	r0, #0
     608:	bd10      	pop	{r4, pc}
     60a:	bf00      	nop
     60c:	0001c31c 	.word	0x0001c31c
     610:	00000641 	.word	0x00000641
     614:	00000ac1 	.word	0x00000ac1

00000618 <usart_sync_get_io_descriptor>:
{
     618:	b538      	push	{r3, r4, r5, lr}
     61a:	460c      	mov	r4, r1
	ASSERT(descr && io);
     61c:	4605      	mov	r5, r0
     61e:	b148      	cbz	r0, 634 <usart_sync_get_io_descriptor+0x1c>
     620:	1c08      	adds	r0, r1, #0
     622:	bf18      	it	ne
     624:	2001      	movne	r0, #1
     626:	2269      	movs	r2, #105	; 0x69
     628:	4903      	ldr	r1, [pc, #12]	; (638 <usart_sync_get_io_descriptor+0x20>)
     62a:	4b04      	ldr	r3, [pc, #16]	; (63c <usart_sync_get_io_descriptor+0x24>)
     62c:	4798      	blx	r3
	*io = &descr->io;
     62e:	6025      	str	r5, [r4, #0]
}
     630:	2000      	movs	r0, #0
     632:	bd38      	pop	{r3, r4, r5, pc}
     634:	2000      	movs	r0, #0
     636:	e7f6      	b.n	626 <usart_sync_get_io_descriptor+0xe>
     638:	0001c31c 	.word	0x0001c31c
     63c:	00000641 	.word	0x00000641

00000640 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     640:	b900      	cbnz	r0, 644 <assert+0x4>
		__asm("BKPT #0");
     642:	be00      	bkpt	0x0000
     644:	4770      	bx	lr

00000646 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     646:	6803      	ldr	r3, [r0, #0]
     648:	b14b      	cbz	r3, 65e <is_list_element+0x18>
		if (it == element) {
     64a:	428b      	cmp	r3, r1
     64c:	d009      	beq.n	662 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
     64e:	681b      	ldr	r3, [r3, #0]
     650:	b11b      	cbz	r3, 65a <is_list_element+0x14>
		if (it == element) {
     652:	4299      	cmp	r1, r3
     654:	d1fb      	bne.n	64e <is_list_element+0x8>
			return true;
     656:	2001      	movs	r0, #1
		}
	}

	return false;
}
     658:	4770      	bx	lr
	return false;
     65a:	2000      	movs	r0, #0
     65c:	4770      	bx	lr
     65e:	2000      	movs	r0, #0
     660:	4770      	bx	lr
			return true;
     662:	2001      	movs	r0, #1
     664:	4770      	bx	lr
	...

00000668 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     668:	b538      	push	{r3, r4, r5, lr}
     66a:	4604      	mov	r4, r0
     66c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
     66e:	4b06      	ldr	r3, [pc, #24]	; (688 <list_insert_as_head+0x20>)
     670:	4798      	blx	r3
     672:	f080 0001 	eor.w	r0, r0, #1
     676:	2239      	movs	r2, #57	; 0x39
     678:	4904      	ldr	r1, [pc, #16]	; (68c <list_insert_as_head+0x24>)
     67a:	b2c0      	uxtb	r0, r0
     67c:	4b04      	ldr	r3, [pc, #16]	; (690 <list_insert_as_head+0x28>)
     67e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     680:	6823      	ldr	r3, [r4, #0]
     682:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     684:	6025      	str	r5, [r4, #0]
     686:	bd38      	pop	{r3, r4, r5, pc}
     688:	00000647 	.word	0x00000647
     68c:	0001c338 	.word	0x0001c338
     690:	00000641 	.word	0x00000641

00000694 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     694:	6803      	ldr	r3, [r0, #0]
     696:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     698:	6001      	str	r1, [r0, #0]
     69a:	4770      	bx	lr

0000069c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     69c:	6803      	ldr	r3, [r0, #0]
     69e:	b10b      	cbz	r3, 6a4 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     6a0:	681a      	ldr	r2, [r3, #0]
     6a2:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     6a4:	4618      	mov	r0, r3
     6a6:	4770      	bx	lr

000006a8 <_write>:

// Added
int _write(int __fd, const void *__buf, size_t __nbyte );
int _read(int __fd, void *__buf, size_t __nbyte );

int _write(int __fd, const void *__buf, size_t __nbyte ){
     6a8:	b508      	push	{r3, lr}
	io_write(io, __buf, __nbyte);
     6aa:	4b03      	ldr	r3, [pc, #12]	; (6b8 <_write+0x10>)
     6ac:	6818      	ldr	r0, [r3, #0]
     6ae:	4b03      	ldr	r3, [pc, #12]	; (6bc <_write+0x14>)
     6b0:	4798      	blx	r3
	return 0;
}
     6b2:	2000      	movs	r0, #0
     6b4:	bd08      	pop	{r3, pc}
     6b6:	bf00      	nop
     6b8:	200009f8 	.word	0x200009f8
     6bc:	0000038d 	.word	0x0000038d

000006c0 <_read>:

int _read(int __fd, void *__buf, size_t __nbyte ){
	return 0;
}
     6c0:	2000      	movs	r0, #0
     6c2:	4770      	bx	lr

000006c4 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     6c4:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     6c6:	4a06      	ldr	r2, [pc, #24]	; (6e0 <_sbrk+0x1c>)
     6c8:	6812      	ldr	r2, [r2, #0]
     6ca:	b122      	cbz	r2, 6d6 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     6cc:	4a04      	ldr	r2, [pc, #16]	; (6e0 <_sbrk+0x1c>)
     6ce:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     6d0:	4403      	add	r3, r0
     6d2:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     6d4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     6d6:	4903      	ldr	r1, [pc, #12]	; (6e4 <_sbrk+0x20>)
     6d8:	4a01      	ldr	r2, [pc, #4]	; (6e0 <_sbrk+0x1c>)
     6da:	6011      	str	r1, [r2, #0]
     6dc:	e7f6      	b.n	6cc <_sbrk+0x8>
     6de:	bf00      	nop
     6e0:	200009f0 	.word	0x200009f0
     6e4:	2001fcc8 	.word	0x2001fcc8

000006e8 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     6e8:	f04f 30ff 	mov.w	r0, #4294967295
     6ec:	4770      	bx	lr

000006ee <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     6ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     6f2:	604b      	str	r3, [r1, #4]

	return 0;
}
     6f4:	2000      	movs	r0, #0
     6f6:	4770      	bx	lr

000006f8 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     6f8:	2001      	movs	r0, #1
     6fa:	4770      	bx	lr

000006fc <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     6fc:	2000      	movs	r0, #0
     6fe:	4770      	bx	lr

00000700 <_exit>:

/**
 * \brief Replacement of C library of _exit
 */
extern void _exit(int status)
{
     700:	b508      	push	{r3, lr}
	printf("Exiting with status %d.\n", status);
     702:	4601      	mov	r1, r0
     704:	4801      	ldr	r0, [pc, #4]	; (70c <_exit+0xc>)
     706:	4b02      	ldr	r3, [pc, #8]	; (710 <_exit+0x10>)
     708:	4798      	blx	r3
     70a:	e7fe      	b.n	70a <_exit+0xa>
     70c:	0001c358 	.word	0x0001c358
     710:	00015b71 	.word	0x00015b71

00000714 <_kill>:

/**
 * \brief Replacement of C library of _kill
 */
extern void _kill(int pid, int sig)
{
     714:	4770      	bx	lr

00000716 <_getpid>:
 * \brief Replacement of C library of _getpid
 */
extern int _getpid(void)
{
	return -1;
}
     716:	f04f 30ff 	mov.w	r0, #4294967295
     71a:	4770      	bx	lr

0000071c <_get_cycles_for_ms>:
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
     71c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
     720:	0143      	lsls	r3, r0, #5
     722:	3302      	adds	r3, #2
     724:	4803      	ldr	r0, [pc, #12]	; (734 <_get_cycles_for_ms+0x18>)
     726:	fba0 2303 	umull	r2, r3, r0, r3
     72a:	085b      	lsrs	r3, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     72c:	2064      	movs	r0, #100	; 0x64
     72e:	fb00 f003 	mul.w	r0, r0, r3
     732:	4770      	bx	lr
     734:	aaaaaaab 	.word	0xaaaaaaab

00000738 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
     738:	3901      	subs	r1, #1
     73a:	d8fd      	bhi.n	738 <_delay_cycles>
     73c:	4770      	bx	lr
     73e:	bf00      	nop

00000740 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     740:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     742:	4a09      	ldr	r2, [pc, #36]	; (768 <_init_chip+0x28>)
     744:	8813      	ldrh	r3, [r2, #0]
     746:	b29b      	uxth	r3, r3
     748:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     74a:	4b08      	ldr	r3, [pc, #32]	; (76c <_init_chip+0x2c>)
     74c:	4798      	blx	r3
	_oscctrl_init_sources();
     74e:	4b08      	ldr	r3, [pc, #32]	; (770 <_init_chip+0x30>)
     750:	4798      	blx	r3
	_mclk_init();
     752:	4b08      	ldr	r3, [pc, #32]	; (774 <_init_chip+0x34>)
     754:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     756:	2008      	movs	r0, #8
     758:	4c07      	ldr	r4, [pc, #28]	; (778 <_init_chip+0x38>)
     75a:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
     75c:	4b07      	ldr	r3, [pc, #28]	; (77c <_init_chip+0x3c>)
     75e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     760:	f640 70f7 	movw	r0, #4087	; 0xff7
     764:	47a0      	blx	r4
     766:	bd10      	pop	{r4, pc}
     768:	41004000 	.word	0x41004000
     76c:	000007cd 	.word	0x000007cd
     770:	000007ed 	.word	0x000007ed
     774:	000007c1 	.word	0x000007c1
     778:	00000781 	.word	0x00000781
     77c:	000007f1 	.word	0x000007f1

00000780 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     780:	f010 0f01 	tst.w	r0, #1
     784:	d008      	beq.n	798 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL[index].reg = data;
     786:	4a0b      	ldr	r2, [pc, #44]	; (7b4 <_gclk_init_generators_by_fref+0x34>)
     788:	4b0b      	ldr	r3, [pc, #44]	; (7b8 <_gclk_init_generators_by_fref+0x38>)
     78a:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     78c:	4619      	mov	r1, r3
     78e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     792:	684b      	ldr	r3, [r1, #4]
     794:	4213      	tst	r3, r2
     796:	d1fc      	bne.n	792 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     798:	f010 0f08 	tst.w	r0, #8
     79c:	d008      	beq.n	7b0 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     79e:	4a07      	ldr	r2, [pc, #28]	; (7bc <_gclk_init_generators_by_fref+0x3c>)
     7a0:	4b05      	ldr	r3, [pc, #20]	; (7b8 <_gclk_init_generators_by_fref+0x38>)
     7a2:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     7a4:	4619      	mov	r1, r3
     7a6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     7aa:	684b      	ldr	r3, [r1, #4]
     7ac:	4213      	tst	r3, r2
     7ae:	d1fc      	bne.n	7aa <_gclk_init_generators_by_fref+0x2a>
     7b0:	4770      	bx	lr
     7b2:	bf00      	nop
     7b4:	00010906 	.word	0x00010906
     7b8:	40001c00 	.word	0x40001c00
     7bc:	00010905 	.word	0x00010905

000007c0 <_mclk_init>:
}

static inline void hri_mclk_write_CPUDIV_reg(const void *const hw, hri_mclk_cpudiv_reg_t data)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->CPUDIV.reg = data;
     7c0:	2201      	movs	r2, #1
     7c2:	4b01      	ldr	r3, [pc, #4]	; (7c8 <_mclk_init+0x8>)
     7c4:	715a      	strb	r2, [r3, #5]
     7c6:	4770      	bx	lr
     7c8:	40000800 	.word	0x40000800

000007cc <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
     7cc:	4b06      	ldr	r3, [pc, #24]	; (7e8 <_osc32kctrl_init_sources+0x1c>)
     7ce:	f242 028e 	movw	r2, #8334	; 0x208e
     7d2:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
     7d4:	2200      	movs	r2, #0
     7d6:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
     7d8:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     7da:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     7dc:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     7e0:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     7e2:	2201      	movs	r2, #1
     7e4:	741a      	strb	r2, [r3, #16]
     7e6:	4770      	bx	lr
     7e8:	40001400 	.word	0x40001400

000007ec <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
     7ec:	4770      	bx	lr
	...

000007f0 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     7f0:	4a36      	ldr	r2, [pc, #216]	; (8cc <_oscctrl_init_referenced_generators+0xdc>)
     7f2:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     7f4:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     7f8:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     7fc:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     7fe:	4611      	mov	r1, r2
     800:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     804:	684b      	ldr	r3, [r1, #4]
     806:	4213      	tst	r3, r2
     808:	d1fc      	bne.n	804 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     80a:	4a30      	ldr	r2, [pc, #192]	; (8cc <_oscctrl_init_referenced_generators+0xdc>)
     80c:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     80e:	f013 0f04 	tst.w	r3, #4
     812:	d1fb      	bne.n	80c <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     814:	4b2e      	ldr	r3, [pc, #184]	; (8d0 <_oscctrl_init_referenced_generators+0xe0>)
     816:	2200      	movs	r2, #0
     818:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
     81a:	4a2e      	ldr	r2, [pc, #184]	; (8d4 <_oscctrl_init_referenced_generators+0xe4>)
     81c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     81e:	461a      	mov	r2, r3
     820:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
     824:	f013 0f10 	tst.w	r3, #16
     828:	d1fa      	bne.n	820 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     82a:	2200      	movs	r2, #0
     82c:	4b28      	ldr	r3, [pc, #160]	; (8d0 <_oscctrl_init_referenced_generators+0xe0>)
     82e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     832:	461a      	mov	r2, r3
     834:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     838:	f013 0f04 	tst.w	r3, #4
     83c:	d1fa      	bne.n	834 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     83e:	2202      	movs	r2, #2
     840:	4b23      	ldr	r3, [pc, #140]	; (8d0 <_oscctrl_init_referenced_generators+0xe0>)
     842:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     844:	461a      	mov	r2, r3
     846:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
     84a:	f013 0f02 	tst.w	r3, #2
     84e:	d1fa      	bne.n	846 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
     850:	4b1f      	ldr	r3, [pc, #124]	; (8d0 <_oscctrl_init_referenced_generators+0xe0>)
     852:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
     854:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     856:	461a      	mov	r2, r3
     858:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
     85c:	f013 0f08 	tst.w	r3, #8
     860:	d1fa      	bne.n	858 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     862:	2280      	movs	r2, #128	; 0x80
     864:	4b1a      	ldr	r3, [pc, #104]	; (8d0 <_oscctrl_init_referenced_generators+0xe0>)
     866:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     86a:	461a      	mov	r2, r3
     86c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     870:	f013 0f04 	tst.w	r3, #4
     874:	d1fa      	bne.n	86c <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
     876:	4b16      	ldr	r3, [pc, #88]	; (8d0 <_oscctrl_init_referenced_generators+0xe0>)
     878:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
     87c:	f013 0f01 	tst.w	r3, #1
     880:	d01d      	beq.n	8be <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
     882:	4a13      	ldr	r2, [pc, #76]	; (8d0 <_oscctrl_init_referenced_generators+0xe0>)
     884:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
     886:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
     88a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
     88e:	d1f9      	bne.n	884 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
     890:	4a0e      	ldr	r2, [pc, #56]	; (8cc <_oscctrl_init_referenced_generators+0xdc>)
     892:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
     894:	2b00      	cmp	r3, #0
     896:	d1fc      	bne.n	892 <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     898:	4a0c      	ldr	r2, [pc, #48]	; (8cc <_oscctrl_init_referenced_generators+0xdc>)
     89a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     89c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     8a0:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     8a4:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     8a6:	4611      	mov	r1, r2
     8a8:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     8ac:	684b      	ldr	r3, [r1, #4]
     8ae:	4213      	tst	r3, r2
     8b0:	d1fc      	bne.n	8ac <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     8b2:	4a06      	ldr	r2, [pc, #24]	; (8cc <_oscctrl_init_referenced_generators+0xdc>)
     8b4:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     8b6:	f013 0f04 	tst.w	r3, #4
     8ba:	d1fb      	bne.n	8b4 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
     8bc:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
     8be:	4a04      	ldr	r2, [pc, #16]	; (8d0 <_oscctrl_init_referenced_generators+0xe0>)
     8c0:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
     8c2:	f413 7f80 	tst.w	r3, #256	; 0x100
     8c6:	d0fb      	beq.n	8c0 <_oscctrl_init_referenced_generators+0xd0>
     8c8:	e7e2      	b.n	890 <_oscctrl_init_referenced_generators+0xa0>
     8ca:	bf00      	nop
     8cc:	40001c00 	.word	0x40001c00
     8d0:	40001000 	.word	0x40001000
     8d4:	04010000 	.word	0x04010000

000008d8 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     8d8:	b500      	push	{lr}
     8da:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     8dc:	4b0d      	ldr	r3, [pc, #52]	; (914 <RAMECC_Handler+0x3c>)
     8de:	789b      	ldrb	r3, [r3, #2]
     8e0:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     8e2:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     8e4:	9b01      	ldr	r3, [sp, #4]
     8e6:	f013 0f02 	tst.w	r3, #2
     8ea:	d006      	beq.n	8fa <RAMECC_Handler+0x22>
     8ec:	4b0a      	ldr	r3, [pc, #40]	; (918 <RAMECC_Handler+0x40>)
     8ee:	681b      	ldr	r3, [r3, #0]
     8f0:	b11b      	cbz	r3, 8fa <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     8f2:	4a08      	ldr	r2, [pc, #32]	; (914 <RAMECC_Handler+0x3c>)
     8f4:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     8f6:	4798      	blx	r3
     8f8:	e009      	b.n	90e <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     8fa:	9b01      	ldr	r3, [sp, #4]
     8fc:	f013 0f01 	tst.w	r3, #1
     900:	d005      	beq.n	90e <RAMECC_Handler+0x36>
     902:	4b05      	ldr	r3, [pc, #20]	; (918 <RAMECC_Handler+0x40>)
     904:	685b      	ldr	r3, [r3, #4]
     906:	b113      	cbz	r3, 90e <RAMECC_Handler+0x36>
     908:	4a02      	ldr	r2, [pc, #8]	; (914 <RAMECC_Handler+0x3c>)
     90a:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     90c:	4798      	blx	r3
	} else {
		return;
	}
}
     90e:	b003      	add	sp, #12
     910:	f85d fb04 	ldr.w	pc, [sp], #4
     914:	41020000 	.word	0x41020000
     918:	2000fc68 	.word	0x2000fc68

0000091c <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
     91c:	b538      	push	{r3, r4, r5, lr}
     91e:	460c      	mov	r4, r1
	ASSERT(dev);
     920:	4605      	mov	r5, r0
     922:	2230      	movs	r2, #48	; 0x30
     924:	4914      	ldr	r1, [pc, #80]	; (978 <_timer_init+0x5c>)
     926:	3000      	adds	r0, #0
     928:	bf18      	it	ne
     92a:	2001      	movne	r0, #1
     92c:	4b13      	ldr	r3, [pc, #76]	; (97c <_timer_init+0x60>)
     92e:	4798      	blx	r3

	dev->hw = hw;
     930:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
     932:	2301      	movs	r3, #1
     934:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     936:	f248 0203 	movw	r2, #32771	; 0x8003
     93a:	6923      	ldr	r3, [r4, #16]
     93c:	4213      	tst	r3, r2
     93e:	d1fc      	bne.n	93a <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
     940:	68eb      	ldr	r3, [r5, #12]
     942:	691a      	ldr	r2, [r3, #16]
     944:	f012 0f01 	tst.w	r2, #1
     948:	d1fb      	bne.n	942 <_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
     94a:	f248 0280 	movw	r2, #32896	; 0x8080
     94e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     950:	f248 0103 	movw	r1, #32771	; 0x8003
     954:	691a      	ldr	r2, [r3, #16]
     956:	420a      	tst	r2, r1
     958:	d1fc      	bne.n	954 <_timer_init+0x38>
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
     95a:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
     95c:	2320      	movs	r3, #32
     95e:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     960:	6913      	ldr	r3, [r2, #16]
     962:	f013 0f60 	tst.w	r3, #96	; 0x60
     966:	d1fb      	bne.n	960 <_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
     968:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     96a:	f44f 7280 	mov.w	r2, #256	; 0x100
     96e:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
     970:	4b03      	ldr	r3, [pc, #12]	; (980 <_timer_init+0x64>)
     972:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
     974:	2000      	movs	r0, #0
     976:	bd38      	pop	{r3, r4, r5, pc}
     978:	0001c374 	.word	0x0001c374
     97c:	00000641 	.word	0x00000641
     980:	200009f4 	.word	0x200009f4

00000984 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
     984:	2000      	movs	r0, #0
     986:	4770      	bx	lr

00000988 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     988:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
     98a:	4b08      	ldr	r3, [pc, #32]	; (9ac <RTC_Handler+0x24>)
     98c:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
     98e:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     990:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
     992:	f413 7f80 	tst.w	r3, #256	; 0x100
     996:	d007      	beq.n	9a8 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
     998:	6823      	ldr	r3, [r4, #0]
     99a:	b10b      	cbz	r3, 9a0 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
     99c:	4620      	mov	r0, r4
     99e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     9a0:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     9a2:	f44f 7280 	mov.w	r2, #256	; 0x100
     9a6:	819a      	strh	r2, [r3, #12]
     9a8:	bd10      	pop	{r4, pc}
     9aa:	bf00      	nop
     9ac:	200009f4 	.word	0x200009f4

000009b0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     9b0:	b470      	push	{r4, r5, r6}
     9b2:	b089      	sub	sp, #36	; 0x24
     9b4:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     9b6:	466c      	mov	r4, sp
     9b8:	4d0d      	ldr	r5, [pc, #52]	; (9f0 <_sercom_get_hardware_index+0x40>)
     9ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     9bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     9be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     9c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     9c6:	9b00      	ldr	r3, [sp, #0]
     9c8:	42b3      	cmp	r3, r6
     9ca:	d00d      	beq.n	9e8 <_sercom_get_hardware_index+0x38>
     9cc:	4631      	mov	r1, r6
     9ce:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9d0:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     9d2:	f853 2b04 	ldr.w	r2, [r3], #4
     9d6:	428a      	cmp	r2, r1
     9d8:	d007      	beq.n	9ea <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9da:	3001      	adds	r0, #1
     9dc:	2808      	cmp	r0, #8
     9de:	d1f8      	bne.n	9d2 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
     9e0:	2000      	movs	r0, #0
}
     9e2:	b009      	add	sp, #36	; 0x24
     9e4:	bc70      	pop	{r4, r5, r6}
     9e6:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9e8:	2000      	movs	r0, #0
			return i;
     9ea:	b2c0      	uxtb	r0, r0
     9ec:	e7f9      	b.n	9e2 <_sercom_get_hardware_index+0x32>
     9ee:	bf00      	nop
     9f0:	0001c38c 	.word	0x0001c38c

000009f4 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     9f4:	b510      	push	{r4, lr}
     9f6:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     9f8:	4b21      	ldr	r3, [pc, #132]	; (a80 <_usart_init+0x8c>)
     9fa:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
     9fc:	2804      	cmp	r0, #4
     9fe:	d005      	beq.n	a0c <_usart_init+0x18>
	ASSERT(false);
     a00:	f240 2247 	movw	r2, #583	; 0x247
     a04:	491f      	ldr	r1, [pc, #124]	; (a84 <_usart_init+0x90>)
     a06:	2000      	movs	r0, #0
     a08:	4b1f      	ldr	r3, [pc, #124]	; (a88 <_usart_init+0x94>)
     a0a:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     a0c:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     a0e:	f013 0f01 	tst.w	r3, #1
     a12:	d119      	bne.n	a48 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a14:	69e3      	ldr	r3, [r4, #28]
     a16:	f013 0f03 	tst.w	r3, #3
     a1a:	d1fb      	bne.n	a14 <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     a1c:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     a1e:	f013 0f02 	tst.w	r3, #2
     a22:	d00b      	beq.n	a3c <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     a24:	6823      	ldr	r3, [r4, #0]
     a26:	f023 0302 	bic.w	r3, r3, #2
     a2a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a2c:	69e3      	ldr	r3, [r4, #28]
     a2e:	f013 0f03 	tst.w	r3, #3
     a32:	d1fb      	bne.n	a2c <_usart_init+0x38>
     a34:	69e3      	ldr	r3, [r4, #28]
     a36:	f013 0f02 	tst.w	r3, #2
     a3a:	d1fb      	bne.n	a34 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     a3c:	2305      	movs	r3, #5
     a3e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a40:	69e3      	ldr	r3, [r4, #28]
     a42:	f013 0f03 	tst.w	r3, #3
     a46:	d1fb      	bne.n	a40 <_usart_init+0x4c>
     a48:	69e3      	ldr	r3, [r4, #28]
     a4a:	f013 0f01 	tst.w	r3, #1
     a4e:	d1fb      	bne.n	a48 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     a50:	4b0e      	ldr	r3, [pc, #56]	; (a8c <_usart_init+0x98>)
     a52:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a54:	69e3      	ldr	r3, [r4, #28]
     a56:	f013 0f03 	tst.w	r3, #3
     a5a:	d1fb      	bne.n	a54 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     a5c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
     a60:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a62:	69e3      	ldr	r3, [r4, #28]
     a64:	f013 0f1f 	tst.w	r3, #31
     a68:	d1fb      	bne.n	a62 <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
     a6a:	4b09      	ldr	r3, [pc, #36]	; (a90 <_usart_init+0x9c>)
     a6c:	60a3      	str	r3, [r4, #8]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     a6e:	f24f 632b 	movw	r3, #63019	; 0xf62b
     a72:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     a74:	2000      	movs	r0, #0
     a76:	73a0      	strb	r0, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     a78:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
     a7c:	bd10      	pop	{r4, pc}
     a7e:	bf00      	nop
     a80:	000009b1 	.word	0x000009b1
     a84:	0001c3c4 	.word	0x0001c3c4
     a88:	00000641 	.word	0x00000641
     a8c:	40100004 	.word	0x40100004
     a90:	00700002 	.word	0x00700002

00000a94 <_usart_sync_init>:
{
     a94:	b538      	push	{r3, r4, r5, lr}
     a96:	460c      	mov	r4, r1
	ASSERT(device);
     a98:	4605      	mov	r5, r0
     a9a:	22bb      	movs	r2, #187	; 0xbb
     a9c:	4905      	ldr	r1, [pc, #20]	; (ab4 <_usart_sync_init+0x20>)
     a9e:	3000      	adds	r0, #0
     aa0:	bf18      	it	ne
     aa2:	2001      	movne	r0, #1
     aa4:	4b04      	ldr	r3, [pc, #16]	; (ab8 <_usart_sync_init+0x24>)
     aa6:	4798      	blx	r3
	device->hw = hw;
     aa8:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     aaa:	4620      	mov	r0, r4
     aac:	4b03      	ldr	r3, [pc, #12]	; (abc <_usart_sync_init+0x28>)
     aae:	4798      	blx	r3
}
     ab0:	bd38      	pop	{r3, r4, r5, pc}
     ab2:	bf00      	nop
     ab4:	0001c3c4 	.word	0x0001c3c4
     ab8:	00000641 	.word	0x00000641
     abc:	000009f5 	.word	0x000009f5

00000ac0 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     ac0:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     ac2:	6813      	ldr	r3, [r2, #0]
     ac4:	f043 0302 	orr.w	r3, r3, #2
     ac8:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     aca:	69d3      	ldr	r3, [r2, #28]
     acc:	f013 0f03 	tst.w	r3, #3
     ad0:	d1fb      	bne.n	aca <_usart_sync_enable+0xa>
}
     ad2:	4770      	bx	lr

00000ad4 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     ad4:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
     ad6:	6299      	str	r1, [r3, #40]	; 0x28
     ad8:	4770      	bx	lr

00000ada <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     ada:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     adc:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
     ade:	b2c0      	uxtb	r0, r0
     ae0:	4770      	bx	lr

00000ae2 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     ae2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     ae4:	7e18      	ldrb	r0, [r3, #24]
}
     ae6:	f000 0001 	and.w	r0, r0, #1
     aea:	4770      	bx	lr

00000aec <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     aec:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     aee:	7e18      	ldrb	r0, [r3, #24]
}
     af0:	f3c0 0040 	ubfx	r0, r0, #1, #1
     af4:	4770      	bx	lr

00000af6 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     af6:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     af8:	7e18      	ldrb	r0, [r3, #24]
}
     afa:	f3c0 0080 	ubfx	r0, r0, #2, #1
     afe:	4770      	bx	lr

00000b00 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     b00:	b508      	push	{r3, lr}
	system_init();
     b02:	4b01      	ldr	r3, [pc, #4]	; (b08 <atmel_start_init+0x8>)
     b04:	4798      	blx	r3
     b06:	bd08      	pop	{r3, pc}
     b08:	00000ba1 	.word	0x00000ba1

00000b0c <USART_0_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b0c:	4b10      	ldr	r3, [pc, #64]	; (b50 <USART_0_PORT_init+0x44>)
     b0e:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     b12:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b16:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b1a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b1e:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b22:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b26:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b2a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b2e:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     b32:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b36:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b3a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b3e:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b42:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b46:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b4a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     b4e:	4770      	bx	lr
     b50:	41008000 	.word	0x41008000

00000b54 <USART_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     b54:	4b06      	ldr	r3, [pc, #24]	; (b70 <USART_0_CLOCK_init+0x1c>)
     b56:	2240      	movs	r2, #64	; 0x40
     b58:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     b5c:	2243      	movs	r2, #67	; 0x43
     b5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     b62:	4a04      	ldr	r2, [pc, #16]	; (b74 <USART_0_CLOCK_init+0x20>)
     b64:	6a13      	ldr	r3, [r2, #32]
     b66:	f043 0301 	orr.w	r3, r3, #1
     b6a:	6213      	str	r3, [r2, #32]
     b6c:	4770      	bx	lr
     b6e:	bf00      	nop
     b70:	40001c00 	.word	0x40001c00
     b74:	40000800 	.word	0x40000800

00000b78 <USART_0_init>:

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}

void USART_0_init(void)
{
     b78:	b508      	push	{r3, lr}
	USART_0_CLOCK_init();
     b7a:	4b05      	ldr	r3, [pc, #20]	; (b90 <USART_0_init+0x18>)
     b7c:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM4, (void *)NULL);
     b7e:	2200      	movs	r2, #0
     b80:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     b84:	4803      	ldr	r0, [pc, #12]	; (b94 <USART_0_init+0x1c>)
     b86:	4b04      	ldr	r3, [pc, #16]	; (b98 <USART_0_init+0x20>)
     b88:	4798      	blx	r3
	USART_0_PORT_init();
     b8a:	4b04      	ldr	r3, [pc, #16]	; (b9c <USART_0_init+0x24>)
     b8c:	4798      	blx	r3
     b8e:	bd08      	pop	{r3, pc}
     b90:	00000b55 	.word	0x00000b55
     b94:	2000fc94 	.word	0x2000fc94
     b98:	000005a5 	.word	0x000005a5
     b9c:	00000b0d 	.word	0x00000b0d

00000ba0 <system_init>:
}

void system_init(void)
{
     ba0:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     ba2:	4b12      	ldr	r3, [pc, #72]	; (bec <system_init+0x4c>)
     ba4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ba6:	4b12      	ldr	r3, [pc, #72]	; (bf0 <system_init+0x50>)
     ba8:	2202      	movs	r2, #2
     baa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bb2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     bb6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     bba:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     bbe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bc2:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     bc6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bca:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     bce:	4a09      	ldr	r2, [pc, #36]	; (bf4 <system_init+0x54>)
     bd0:	6953      	ldr	r3, [r2, #20]
     bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     bd6:	6153      	str	r3, [r2, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     bd8:	4b07      	ldr	r3, [pc, #28]	; (bf8 <system_init+0x58>)
     bda:	4798      	blx	r3
     bdc:	4602      	mov	r2, r0
     bde:	4907      	ldr	r1, [pc, #28]	; (bfc <system_init+0x5c>)
     be0:	4807      	ldr	r0, [pc, #28]	; (c00 <system_init+0x60>)
     be2:	4b08      	ldr	r3, [pc, #32]	; (c04 <system_init+0x64>)
     be4:	4798      	blx	r3

	gpio_set_pin_function(LED, GPIO_PIN_FUNCTION_OFF);

	TIMER_0_init();

	USART_0_init();
     be6:	4b08      	ldr	r3, [pc, #32]	; (c08 <system_init+0x68>)
     be8:	4798      	blx	r3
     bea:	bd08      	pop	{r3, pc}
     bec:	00000741 	.word	0x00000741
     bf0:	41008000 	.word	0x41008000
     bf4:	40000800 	.word	0x40000800
     bf8:	00000985 	.word	0x00000985
     bfc:	40002400 	.word	0x40002400
     c00:	2000fc78 	.word	0x2000fc78
     c04:	00000495 	.word	0x00000495
     c08:	00000b79 	.word	0x00000b79

00000c0c <_Z8USART_0_v>:
		delay_ms(100);
	}
}

void USART_0_(void)
{
     c0c:	b510      	push	{r4, lr}
	usart_sync_get_io_descriptor(&USART_0, &io);
     c0e:	4c04      	ldr	r4, [pc, #16]	; (c20 <_Z8USART_0_v+0x14>)
     c10:	4904      	ldr	r1, [pc, #16]	; (c24 <_Z8USART_0_v+0x18>)
     c12:	4620      	mov	r0, r4
     c14:	4b04      	ldr	r3, [pc, #16]	; (c28 <_Z8USART_0_v+0x1c>)
     c16:	4798      	blx	r3
	usart_sync_enable(&USART_0);
     c18:	4620      	mov	r0, r4
     c1a:	4b04      	ldr	r3, [pc, #16]	; (c2c <_Z8USART_0_v+0x20>)
     c1c:	4798      	blx	r3
     c1e:	bd10      	pop	{r4, pc}
     c20:	2000fc94 	.word	0x2000fc94
     c24:	200009f8 	.word	0x200009f8
     c28:	00000619 	.word	0x00000619
     c2c:	000005ed 	.word	0x000005ed

00000c30 <main>:
{
     c30:	b508      	push	{r3, lr}
	atmel_start_init();
     c32:	4b0b      	ldr	r3, [pc, #44]	; (c60 <main+0x30>)
     c34:	4798      	blx	r3
	USART_0_();
     c36:	4b0b      	ldr	r3, [pc, #44]	; (c64 <main+0x34>)
     c38:	4798      	blx	r3
	setup_inference();
     c3a:	4b0b      	ldr	r3, [pc, #44]	; (c68 <main+0x38>)
     c3c:	4798      	blx	r3
		run_inference();
     c3e:	4e0b      	ldr	r6, [pc, #44]	; (c6c <main+0x3c>)
		io_write(io, (uint8_t *)"Toggle LED!\n", 12);
     c40:	4d0b      	ldr	r5, [pc, #44]	; (c70 <main+0x40>)
     c42:	4c0c      	ldr	r4, [pc, #48]	; (c74 <main+0x44>)
		run_inference();
     c44:	47b0      	blx	r6
		io_write(io, (uint8_t *)"Toggle LED!\n", 12);
     c46:	220c      	movs	r2, #12
     c48:	4629      	mov	r1, r5
     c4a:	6820      	ldr	r0, [r4, #0]
     c4c:	4b0a      	ldr	r3, [pc, #40]	; (c78 <main+0x48>)
     c4e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     c50:	2202      	movs	r2, #2
     c52:	4b0a      	ldr	r3, [pc, #40]	; (c7c <main+0x4c>)
     c54:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		delay_ms(100);
     c58:	2064      	movs	r0, #100	; 0x64
     c5a:	4b09      	ldr	r3, [pc, #36]	; (c80 <main+0x50>)
     c5c:	4798      	blx	r3
     c5e:	e7f1      	b.n	c44 <main+0x14>
     c60:	00000b01 	.word	0x00000b01
     c64:	00000c0d 	.word	0x00000c0d
     c68:	00000d91 	.word	0x00000d91
     c6c:	00001231 	.word	0x00001231
     c70:	00021080 	.word	0x00021080
     c74:	200009f8 	.word	0x200009f8
     c78:	0000038d 	.word	0x0000038d
     c7c:	41008000 	.word	0x41008000
     c80:	0000036d 	.word	0x0000036d

00000c84 <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
     c84:	4770      	bx	lr

00000c86 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
     c86:	b508      	push	{r3, lr}
                                   int version) const final {
    return FindOp(op);
     c88:	6803      	ldr	r3, [r0, #0]
     c8a:	691b      	ldr	r3, [r3, #16]
     c8c:	4798      	blx	r3
  }
     c8e:	bd08      	pop	{r3, pc}

00000c90 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
     c90:	b508      	push	{r3, lr}
    return FindOp(op);
     c92:	6803      	ldr	r3, [r0, #0]
     c94:	695b      	ldr	r3, [r3, #20]
     c96:	4798      	blx	r3
  }
     c98:	bd08      	pop	{r3, pc}

00000c9a <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE>:
 public:
  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
      : error_reporter_(error_reporter) {}

  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
    if (op == BuiltinOperator_CUSTOM) return nullptr;
     c9a:	2920      	cmp	r1, #32
     c9c:	d019      	beq.n	cd2 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x38>
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
     c9e:	b430      	push	{r4, r5}

    for (unsigned int i = 0; i < registrations_len_; ++i) {
     ca0:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
     ca4:	b1bc      	cbz	r4, cd6 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x3c>
      const TfLiteRegistration& registration = registrations_[i];
      if (registration.builtin_code == op) {
     ca6:	460d      	mov	r5, r1
     ca8:	6983      	ldr	r3, [r0, #24]
     caa:	428b      	cmp	r3, r1
     cac:	d00c      	beq.n	cc8 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x2e>
     cae:	4602      	mov	r2, r0
     cb0:	2300      	movs	r3, #0
    for (unsigned int i = 0; i < registrations_len_; ++i) {
     cb2:	3301      	adds	r3, #1
     cb4:	42a3      	cmp	r3, r4
     cb6:	d009      	beq.n	ccc <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x32>
     cb8:	3220      	adds	r2, #32
      if (registration.builtin_code == op) {
     cba:	6991      	ldr	r1, [r2, #24]
     cbc:	42a9      	cmp	r1, r5
     cbe:	d1f8      	bne.n	cb2 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x18>
      const TfLiteRegistration& registration = registrations_[i];
     cc0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
     cc4:	3004      	adds	r0, #4
     cc6:	e002      	b.n	cce <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x34>
     cc8:	3004      	adds	r0, #4
     cca:	e000      	b.n	cce <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x34>
        return &registration;
      }
    }
    return nullptr;
     ccc:	2000      	movs	r0, #0
  }
     cce:	bc30      	pop	{r4, r5}
     cd0:	4770      	bx	lr
    if (op == BuiltinOperator_CUSTOM) return nullptr;
     cd2:	2000      	movs	r0, #0
     cd4:	4770      	bx	lr
    return nullptr;
     cd6:	2000      	movs	r0, #0
     cd8:	e7f9      	b.n	cce <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x34>

00000cda <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
     cda:	4770      	bx	lr

00000cdc <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE>:
      }
    }
    return nullptr;
  }

  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
     cdc:	b538      	push	{r3, r4, r5, lr}
      BuiltinOperator op) const override {
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
     cde:	f8d0 50c4 	ldr.w	r5, [r0, #196]	; 0xc4
     ce2:	2d05      	cmp	r5, #5
     ce4:	d812      	bhi.n	d0c <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x30>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
     ce6:	b1bd      	cbz	r5, d18 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x3c>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
     ce8:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
     cec:	428b      	cmp	r3, r1
     cee:	d00f      	beq.n	d10 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x34>
     cf0:	f100 02a9 	add.w	r2, r0, #169	; 0xa9
     cf4:	2300      	movs	r3, #0
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
     cf6:	3301      	adds	r3, #1
     cf8:	429d      	cmp	r5, r3
     cfa:	d00b      	beq.n	d14 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x38>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
     cfc:	f812 4b01 	ldrb.w	r4, [r2], #1
     d00:	428c      	cmp	r4, r1
     d02:	d1f8      	bne.n	cf6 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x1a>
     d04:	332c      	adds	r3, #44	; 0x2c
     d06:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
     d0a:	bd38      	pop	{r3, r4, r5, pc}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
     d0c:	4b03      	ldr	r3, [pc, #12]	; (d1c <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x40>)
     d0e:	4798      	blx	r3
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
     d10:	2300      	movs	r3, #0
     d12:	e7f7      	b.n	d04 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x28>
    }
    return nullptr;
     d14:	2000      	movs	r0, #0
     d16:	bd38      	pop	{r3, r4, r5, pc}
     d18:	2000      	movs	r0, #0
  }
     d1a:	bd38      	pop	{r3, r4, r5, pc}
     d1c:	00014b3d 	.word	0x00014b3d

00000d20 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
     d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
     d24:	f8d0 60a4 	ldr.w	r6, [r0, #164]	; 0xa4
     d28:	b1ce      	cbz	r6, d5e <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x3e>
     d2a:	4689      	mov	r9, r1
     d2c:	4680      	mov	r8, r0
     d2e:	4604      	mov	r4, r0
     d30:	2500      	movs	r5, #0
          (strcmp(registration.custom_name, op) == 0)) {
     d32:	4f0c      	ldr	r7, [pc, #48]	; (d64 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x44>)
     d34:	e003      	b.n	d3e <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x1e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
     d36:	3501      	adds	r5, #1
     d38:	3420      	adds	r4, #32
     d3a:	42b5      	cmp	r5, r6
     d3c:	d00c      	beq.n	d58 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x38>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
     d3e:	69a3      	ldr	r3, [r4, #24]
     d40:	2b20      	cmp	r3, #32
     d42:	d1f8      	bne.n	d36 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x16>
          (strcmp(registration.custom_name, op) == 0)) {
     d44:	4649      	mov	r1, r9
     d46:	69e0      	ldr	r0, [r4, #28]
     d48:	47b8      	blx	r7
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
     d4a:	2800      	cmp	r0, #0
     d4c:	d1f3      	bne.n	d36 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x16>
      const TfLiteRegistration& registration = registrations_[i];
     d4e:	eb08 1045 	add.w	r0, r8, r5, lsl #5
     d52:	3004      	adds	r0, #4
     d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return nullptr;
     d58:	2000      	movs	r0, #0
     d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     d5e:	2000      	movs	r0, #0
  }
     d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     d64:	00016109 	.word	0x00016109

00000d68 <_ZN6tflite22MicroMutableOpResolverILj5EED0Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
     d68:	b510      	push	{r4, lr}
     d6a:	4604      	mov	r4, r0
     d6c:	21cc      	movs	r1, #204	; 0xcc
     d6e:	4b02      	ldr	r3, [pc, #8]	; (d78 <_ZN6tflite22MicroMutableOpResolverILj5EED0Ev+0x10>)
     d70:	4798      	blx	r3
     d72:	4620      	mov	r0, r4
     d74:	bd10      	pop	{r4, pc}
     d76:	bf00      	nop
     d78:	0000a45d 	.word	0x0000a45d

00000d7c <_ZN6tflite18MicroErrorReporterD0Ev>:
     d7c:	b510      	push	{r4, lr}
     d7e:	4604      	mov	r4, r0
     d80:	2104      	movs	r1, #4
     d82:	4b02      	ldr	r3, [pc, #8]	; (d8c <_ZN6tflite18MicroErrorReporterD0Ev+0x10>)
     d84:	4798      	blx	r3
     d86:	4620      	mov	r0, r4
     d88:	bd10      	pop	{r4, pc}
     d8a:	bf00      	nop
     d8c:	0000a45d 	.word	0x0000a45d

00000d90 <_Z15setup_inferencev>:
constexpr int kTensorArenaSize = 60 * 1024;
uint8_t tensor_arena[kTensorArenaSize];
}  // namespace

// The name of this function is important for Arduino compatibility.
void setup_inference() {
     d90:	b5f0      	push	{r4, r5, r6, r7, lr}
     d92:	b08d      	sub	sp, #52	; 0x34
  // Set up logging. Google style is to avoid globals or statics because of
  // lifetime uncertainty, but since this has a trivial destructor it's okay.
  static tflite::MicroErrorReporter micro_error_reporter;  // NOLINT
     d94:	4ba7      	ldr	r3, [pc, #668]	; (1034 <_Z15setup_inferencev+0x2a4>)
     d96:	781b      	ldrb	r3, [r3, #0]
     d98:	f3bf 8f5b 	dmb	ish
     d9c:	f013 0f01 	tst.w	r3, #1
     da0:	f000 80a4 	beq.w	eec <_Z15setup_inferencev+0x15c>
  error_reporter = &micro_error_reporter;
     da4:	48a3      	ldr	r0, [pc, #652]	; (1034 <_Z15setup_inferencev+0x2a4>)
     da6:	4ba4      	ldr	r3, [pc, #656]	; (1038 <_Z15setup_inferencev+0x2a8>)
     da8:	6043      	str	r3, [r0, #4]
// Helpers to get a typed pointer to the root object contained in the buffer.
template<typename T> T *GetMutableRoot(void *buf) {
  EndianCheck();
  return reinterpret_cast<T *>(
      reinterpret_cast<uint8_t *>(buf) +
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
     daa:	4ba4      	ldr	r3, [pc, #656]	; (103c <_Z15setup_inferencev+0x2ac>)
     dac:	6819      	ldr	r1, [r3, #0]
     dae:	18ca      	adds	r2, r1, r3

  // Map the model into a usable data structure. This doesn't involve any
  // copying or parsing, it's a very lightweight operation.
  model = tflite::GetModel(g_magic_wand_model_data);
     db0:	6082      	str	r2, [r0, #8]
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
     db2:	58cb      	ldr	r3, [r1, r3]
     db4:	1ad3      	subs	r3, r2, r3
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
     db6:	8819      	ldrh	r1, [r3, #0]
     db8:	2904      	cmp	r1, #4
     dba:	f340 80a6 	ble.w	f0a <_Z15setup_inferencev+0x17a>

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
  return EndianScalar(*reinterpret_cast<const T *>(p));
     dbe:	889b      	ldrh	r3, [r3, #4]
  }

  template<typename T> T GetField(voffset_t field, T defaultval) const {
    auto field_offset = GetOptionalFieldOffset(field);
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
     dc0:	2b00      	cmp	r3, #0
     dc2:	f000 80aa 	beq.w	f1a <_Z15setup_inferencev+0x18a>
     dc6:	58d2      	ldr	r2, [r2, r3]
  if (model->version() != TFLITE_SCHEMA_VERSION) {
     dc8:	2a03      	cmp	r2, #3
     dca:	f040 809f 	bne.w	f0c <_Z15setup_inferencev+0x17c>
  // Pull in only the operation implementations we need.
  // This relies on a complete list of all the ops needed by this graph.
  // An easier approach is to just use the AllOpsResolver, but this will
  // incur some penalty in code space for op implementations that are not
  // needed by this graph.
  static tflite::MicroMutableOpResolver<5> micro_op_resolver;  // NOLINT
     dce:	4b99      	ldr	r3, [pc, #612]	; (1034 <_Z15setup_inferencev+0x2a4>)
     dd0:	7b1b      	ldrb	r3, [r3, #12]
     dd2:	f3bf 8f5b 	dmb	ish
     dd6:	f013 0f01 	tst.w	r3, #1
     dda:	f000 80a0 	beq.w	f1e <_Z15setup_inferencev+0x18e>
                      ParseConcatenation);
  }

  TfLiteStatus AddConv2D() {
    return AddBuiltin(BuiltinOperator_CONV_2D,
                      tflite::ops::micro::Register_CONV_2D(), ParseConv2D);
     dde:	a804      	add	r0, sp, #16
     de0:	4b97      	ldr	r3, [pc, #604]	; (1040 <_Z15setup_inferencev+0x2b0>)
     de2:	4798      	blx	r3
                             "AddBuiltin function.");
      }
      return kTfLiteError;
    }

    if (FindOp(op) != nullptr) {
     de4:	4893      	ldr	r0, [pc, #588]	; (1034 <_Z15setup_inferencev+0x2a4>)
     de6:	6903      	ldr	r3, [r0, #16]
     de8:	691b      	ldr	r3, [r3, #16]
     dea:	2103      	movs	r1, #3
     dec:	3010      	adds	r0, #16
     dee:	4798      	blx	r3
     df0:	2800      	cmp	r0, #0
     df2:	f000 80af 	beq.w	f54 <_Z15setup_inferencev+0x1c4>
      if (error_reporter_ != nullptr) {
     df6:	4b8f      	ldr	r3, [pc, #572]	; (1034 <_Z15setup_inferencev+0x2a4>)
     df8:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
     dfc:	b118      	cbz	r0, e06 <_Z15setup_inferencev+0x76>
        TF_LITE_REPORT_ERROR(error_reporter_,
     dfe:	2203      	movs	r2, #3
     e00:	4990      	ldr	r1, [pc, #576]	; (1044 <_Z15setup_inferencev+0x2b4>)
     e02:	4b91      	ldr	r3, [pc, #580]	; (1048 <_Z15setup_inferencev+0x2b8>)
     e04:	4798      	blx	r3
                      tflite::ops::micro::Register_DEPTHWISE_CONV_2D(),
     e06:	a804      	add	r0, sp, #16
     e08:	4b90      	ldr	r3, [pc, #576]	; (104c <_Z15setup_inferencev+0x2bc>)
     e0a:	4798      	blx	r3
    if (FindOp(op) != nullptr) {
     e0c:	4889      	ldr	r0, [pc, #548]	; (1034 <_Z15setup_inferencev+0x2a4>)
     e0e:	6903      	ldr	r3, [r0, #16]
     e10:	691b      	ldr	r3, [r3, #16]
     e12:	2104      	movs	r1, #4
     e14:	3010      	adds	r0, #16
     e16:	4798      	blx	r3
     e18:	2800      	cmp	r0, #0
     e1a:	f000 80cb 	beq.w	fb4 <_Z15setup_inferencev+0x224>
      if (error_reporter_ != nullptr) {
     e1e:	4b85      	ldr	r3, [pc, #532]	; (1034 <_Z15setup_inferencev+0x2a4>)
     e20:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
     e24:	b118      	cbz	r0, e2e <_Z15setup_inferencev+0x9e>
        TF_LITE_REPORT_ERROR(error_reporter_,
     e26:	2204      	movs	r2, #4
     e28:	4986      	ldr	r1, [pc, #536]	; (1044 <_Z15setup_inferencev+0x2b4>)
     e2a:	4b87      	ldr	r3, [pc, #540]	; (1048 <_Z15setup_inferencev+0x2b8>)
     e2c:	4798      	blx	r3
                      tflite::ops::micro::Register_FULLY_CONNECTED(),
     e2e:	a804      	add	r0, sp, #16
     e30:	4b87      	ldr	r3, [pc, #540]	; (1050 <_Z15setup_inferencev+0x2c0>)
     e32:	4798      	blx	r3
    if (FindOp(op) != nullptr) {
     e34:	487f      	ldr	r0, [pc, #508]	; (1034 <_Z15setup_inferencev+0x2a4>)
     e36:	6903      	ldr	r3, [r0, #16]
     e38:	691b      	ldr	r3, [r3, #16]
     e3a:	2109      	movs	r1, #9
     e3c:	3010      	adds	r0, #16
     e3e:	4798      	blx	r3
     e40:	2800      	cmp	r0, #0
     e42:	f000 80e7 	beq.w	1014 <_Z15setup_inferencev+0x284>
      if (error_reporter_ != nullptr) {
     e46:	4b7b      	ldr	r3, [pc, #492]	; (1034 <_Z15setup_inferencev+0x2a4>)
     e48:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
     e4c:	b118      	cbz	r0, e56 <_Z15setup_inferencev+0xc6>
        TF_LITE_REPORT_ERROR(error_reporter_,
     e4e:	2209      	movs	r2, #9
     e50:	497c      	ldr	r1, [pc, #496]	; (1044 <_Z15setup_inferencev+0x2b4>)
     e52:	4b7d      	ldr	r3, [pc, #500]	; (1048 <_Z15setup_inferencev+0x2b8>)
     e54:	4798      	blx	r3
                      tflite::ops::micro::Register_MAX_POOL_2D(), ParsePool);
     e56:	a804      	add	r0, sp, #16
     e58:	4b7e      	ldr	r3, [pc, #504]	; (1054 <_Z15setup_inferencev+0x2c4>)
     e5a:	4798      	blx	r3
    if (FindOp(op) != nullptr) {
     e5c:	4875      	ldr	r0, [pc, #468]	; (1034 <_Z15setup_inferencev+0x2a4>)
     e5e:	6903      	ldr	r3, [r0, #16]
     e60:	691b      	ldr	r3, [r3, #16]
     e62:	2111      	movs	r1, #17
     e64:	3010      	adds	r0, #16
     e66:	4798      	blx	r3
     e68:	2800      	cmp	r0, #0
     e6a:	f000 8137 	beq.w	10dc <_Z15setup_inferencev+0x34c>
      if (error_reporter_ != nullptr) {
     e6e:	4b71      	ldr	r3, [pc, #452]	; (1034 <_Z15setup_inferencev+0x2a4>)
     e70:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
     e74:	b118      	cbz	r0, e7e <_Z15setup_inferencev+0xee>
        TF_LITE_REPORT_ERROR(error_reporter_,
     e76:	2211      	movs	r2, #17
     e78:	4972      	ldr	r1, [pc, #456]	; (1044 <_Z15setup_inferencev+0x2b4>)
     e7a:	4b73      	ldr	r3, [pc, #460]	; (1048 <_Z15setup_inferencev+0x2b8>)
     e7c:	4798      	blx	r3
                      tflite::ops::micro::Register_SOFTMAX(), ParseSoftmax);
     e7e:	a804      	add	r0, sp, #16
     e80:	4b75      	ldr	r3, [pc, #468]	; (1058 <_Z15setup_inferencev+0x2c8>)
     e82:	4798      	blx	r3
    if (FindOp(op) != nullptr) {
     e84:	486b      	ldr	r0, [pc, #428]	; (1034 <_Z15setup_inferencev+0x2a4>)
     e86:	6903      	ldr	r3, [r0, #16]
     e88:	691b      	ldr	r3, [r3, #16]
     e8a:	2119      	movs	r1, #25
     e8c:	3010      	adds	r0, #16
     e8e:	4798      	blx	r3
     e90:	2800      	cmp	r0, #0
     e92:	f000 8153 	beq.w	113c <_Z15setup_inferencev+0x3ac>
      if (error_reporter_ != nullptr) {
     e96:	4b67      	ldr	r3, [pc, #412]	; (1034 <_Z15setup_inferencev+0x2a4>)
     e98:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
     e9c:	b118      	cbz	r0, ea6 <_Z15setup_inferencev+0x116>
        TF_LITE_REPORT_ERROR(error_reporter_,
     e9e:	2219      	movs	r2, #25
     ea0:	4968      	ldr	r1, [pc, #416]	; (1044 <_Z15setup_inferencev+0x2b4>)
     ea2:	4b69      	ldr	r3, [pc, #420]	; (1048 <_Z15setup_inferencev+0x2b8>)
     ea4:	4798      	blx	r3
  micro_op_resolver.AddMaxPool2D();
  micro_op_resolver.AddSoftmax();

  // Build an interpreter to run the model with.
  static tflite::MicroInterpreter static_interpreter(
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
     ea6:	4b63      	ldr	r3, [pc, #396]	; (1034 <_Z15setup_inferencev+0x2a4>)
     ea8:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
     eac:	f3bf 8f5b 	dmb	ish
     eb0:	f013 0f01 	tst.w	r3, #1
     eb4:	f000 8172 	beq.w	119c <_Z15setup_inferencev+0x40c>
  interpreter = &static_interpreter;
     eb8:	4c68      	ldr	r4, [pc, #416]	; (105c <_Z15setup_inferencev+0x2cc>)
     eba:	f504 7054 	add.w	r0, r4, #848	; 0x350
     ebe:	f8c4 03d0 	str.w	r0, [r4, #976]	; 0x3d0

  // Allocate memory from the tensor_arena for the model's tensors.
  interpreter->AllocateTensors();
     ec2:	4b67      	ldr	r3, [pc, #412]	; (1060 <_Z15setup_inferencev+0x2d0>)
     ec4:	4798      	blx	r3

  // Obtain pointer to the model's input tensor.
  model_input = interpreter->input(0);
     ec6:	2100      	movs	r1, #0
     ec8:	f8d4 03d0 	ldr.w	r0, [r4, #976]	; 0x3d0
     ecc:	4b65      	ldr	r3, [pc, #404]	; (1064 <_Z15setup_inferencev+0x2d4>)
     ece:	4798      	blx	r3
  if ((model_input->dims->size != 4) || (model_input->dims->data[0] != 1) ||
     ed0:	6883      	ldr	r3, [r0, #8]
     ed2:	681a      	ldr	r2, [r3, #0]
     ed4:	2a04      	cmp	r2, #4
     ed6:	d103      	bne.n	ee0 <_Z15setup_inferencev+0x150>
     ed8:	685a      	ldr	r2, [r3, #4]
     eda:	2a01      	cmp	r2, #1
     edc:	f000 817f 	beq.w	11de <_Z15setup_inferencev+0x44e>
      (model_input->dims->data[1] != 128) ||
      (model_input->dims->data[2] != 3) || //kChannelNumber
      (model_input->type != kTfLiteFloat32)) {
    TF_LITE_REPORT_ERROR(error_reporter,
     ee0:	4961      	ldr	r1, [pc, #388]	; (1068 <_Z15setup_inferencev+0x2d8>)
     ee2:	4b54      	ldr	r3, [pc, #336]	; (1034 <_Z15setup_inferencev+0x2a4>)
     ee4:	6858      	ldr	r0, [r3, #4]
     ee6:	4b58      	ldr	r3, [pc, #352]	; (1048 <_Z15setup_inferencev+0x2b8>)
     ee8:	4798      	blx	r3
                         "Bad input tensor parameters in model");
    return;
     eea:	e014      	b.n	f16 <_Z15setup_inferencev+0x186>
  static tflite::MicroErrorReporter micro_error_reporter;  // NOLINT
     eec:	4851      	ldr	r0, [pc, #324]	; (1034 <_Z15setup_inferencev+0x2a4>)
     eee:	4b5f      	ldr	r3, [pc, #380]	; (106c <_Z15setup_inferencev+0x2dc>)
     ef0:	4798      	blx	r3
     ef2:	2800      	cmp	r0, #0
     ef4:	f43f af56 	beq.w	da4 <_Z15setup_inferencev+0x14>
     ef8:	484e      	ldr	r0, [pc, #312]	; (1034 <_Z15setup_inferencev+0x2a4>)
     efa:	4b5d      	ldr	r3, [pc, #372]	; (1070 <_Z15setup_inferencev+0x2e0>)
     efc:	4798      	blx	r3
     efe:	4a5d      	ldr	r2, [pc, #372]	; (1074 <_Z15setup_inferencev+0x2e4>)
     f00:	495d      	ldr	r1, [pc, #372]	; (1078 <_Z15setup_inferencev+0x2e8>)
     f02:	484d      	ldr	r0, [pc, #308]	; (1038 <_Z15setup_inferencev+0x2a8>)
     f04:	4b5d      	ldr	r3, [pc, #372]	; (107c <_Z15setup_inferencev+0x2ec>)
     f06:	4798      	blx	r3
     f08:	e74c      	b.n	da4 <_Z15setup_inferencev+0x14>
     f0a:	2200      	movs	r2, #0
    TF_LITE_REPORT_ERROR(error_reporter,
     f0c:	2303      	movs	r3, #3
     f0e:	495c      	ldr	r1, [pc, #368]	; (1080 <_Z15setup_inferencev+0x2f0>)
     f10:	4849      	ldr	r0, [pc, #292]	; (1038 <_Z15setup_inferencev+0x2a8>)
     f12:	4c4d      	ldr	r4, [pc, #308]	; (1048 <_Z15setup_inferencev+0x2b8>)
     f14:	47a0      	blx	r4

  /*TfLiteStatus setup_status = SetupAccelerometer(error_reporter);
  if (setup_status != kTfLiteOk) {
    TF_LITE_REPORT_ERROR(error_reporter, "Set up failed\n");
  }*/
}
     f16:	b00d      	add	sp, #52	; 0x34
     f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f1a:	2200      	movs	r2, #0
     f1c:	e7f6      	b.n	f0c <_Z15setup_inferencev+0x17c>
  static tflite::MicroMutableOpResolver<5> micro_op_resolver;  // NOLINT
     f1e:	4859      	ldr	r0, [pc, #356]	; (1084 <_Z15setup_inferencev+0x2f4>)
     f20:	4b52      	ldr	r3, [pc, #328]	; (106c <_Z15setup_inferencev+0x2dc>)
     f22:	4798      	blx	r3
     f24:	2800      	cmp	r0, #0
     f26:	f43f af5a 	beq.w	dde <_Z15setup_inferencev+0x4e>
      : error_reporter_(error_reporter) {}
     f2a:	4c42      	ldr	r4, [pc, #264]	; (1034 <_Z15setup_inferencev+0x2a4>)
     f2c:	4b56      	ldr	r3, [pc, #344]	; (1088 <_Z15setup_inferencev+0x2f8>)
     f2e:	6123      	str	r3, [r4, #16]
     f30:	2300      	movs	r3, #0
     f32:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
     f36:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
     f3a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
     f3e:	f104 000c 	add.w	r0, r4, #12
     f42:	4b4b      	ldr	r3, [pc, #300]	; (1070 <_Z15setup_inferencev+0x2e0>)
     f44:	4798      	blx	r3
     f46:	4a4b      	ldr	r2, [pc, #300]	; (1074 <_Z15setup_inferencev+0x2e4>)
     f48:	4950      	ldr	r1, [pc, #320]	; (108c <_Z15setup_inferencev+0x2fc>)
     f4a:	f104 0010 	add.w	r0, r4, #16
     f4e:	4b4b      	ldr	r3, [pc, #300]	; (107c <_Z15setup_inferencev+0x2ec>)
     f50:	4798      	blx	r3
     f52:	e744      	b.n	dde <_Z15setup_inferencev+0x4e>
                             op);
      }
      return kTfLiteError;
    }

    if (registrations_len_ >= tOpCount) {
     f54:	4b37      	ldr	r3, [pc, #220]	; (1034 <_Z15setup_inferencev+0x2a4>)
     f56:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
     f5a:	2e04      	cmp	r6, #4
     f5c:	d90a      	bls.n	f74 <_Z15setup_inferencev+0x1e4>
      if (error_reporter_) {
     f5e:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
     f62:	2800      	cmp	r0, #0
     f64:	f43f af4f 	beq.w	e06 <_Z15setup_inferencev+0x76>
        TF_LITE_REPORT_ERROR(error_reporter_,
     f68:	2305      	movs	r3, #5
     f6a:	2203      	movs	r2, #3
     f6c:	4948      	ldr	r1, [pc, #288]	; (1090 <_Z15setup_inferencev+0x300>)
     f6e:	4c36      	ldr	r4, [pc, #216]	; (1048 <_Z15setup_inferencev+0x2b8>)
     f70:	47a0      	blx	r4
     f72:	e748      	b.n	e06 <_Z15setup_inferencev+0x76>
                             op, tOpCount);
      }
      return kTfLiteError;
    }

    registrations_[registrations_len_] = registration;
     f74:	4f2f      	ldr	r7, [pc, #188]	; (1034 <_Z15setup_inferencev+0x2a4>)
     f76:	eb07 1e46 	add.w	lr, r7, r6, lsl #5
     f7a:	f10e 0414 	add.w	r4, lr, #20
     f7e:	ad04      	add	r5, sp, #16
     f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     f84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     f88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
     f8c:	2203      	movs	r2, #3
     f8e:	f8ce 2028 	str.w	r2, [lr, #40]	; 0x28
    registrations_len_++;
     f92:	3601      	adds	r6, #1
     f94:	f8c7 60b4 	str.w	r6, [r7, #180]	; 0xb4

    builtin_codes_[num_buitin_ops_] = op;
     f98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
     f9c:	18f9      	adds	r1, r7, r3
     f9e:	f881 20b8 	strb.w	r2, [r1, #184]	; 0xb8
    builtin_parsers_[num_buitin_ops_] = parser;
     fa2:	eb07 0283 	add.w	r2, r7, r3, lsl #2
     fa6:	493b      	ldr	r1, [pc, #236]	; (1094 <_Z15setup_inferencev+0x304>)
     fa8:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    num_buitin_ops_++;
     fac:	3301      	adds	r3, #1
     fae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
     fb2:	e728      	b.n	e06 <_Z15setup_inferencev+0x76>
    if (registrations_len_ >= tOpCount) {
     fb4:	4b1f      	ldr	r3, [pc, #124]	; (1034 <_Z15setup_inferencev+0x2a4>)
     fb6:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
     fba:	2e04      	cmp	r6, #4
     fbc:	d90a      	bls.n	fd4 <_Z15setup_inferencev+0x244>
      if (error_reporter_) {
     fbe:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
     fc2:	2800      	cmp	r0, #0
     fc4:	f43f af33 	beq.w	e2e <_Z15setup_inferencev+0x9e>
        TF_LITE_REPORT_ERROR(error_reporter_,
     fc8:	2305      	movs	r3, #5
     fca:	2204      	movs	r2, #4
     fcc:	4930      	ldr	r1, [pc, #192]	; (1090 <_Z15setup_inferencev+0x300>)
     fce:	4c1e      	ldr	r4, [pc, #120]	; (1048 <_Z15setup_inferencev+0x2b8>)
     fd0:	47a0      	blx	r4
     fd2:	e72c      	b.n	e2e <_Z15setup_inferencev+0x9e>
    registrations_[registrations_len_] = registration;
     fd4:	4f17      	ldr	r7, [pc, #92]	; (1034 <_Z15setup_inferencev+0x2a4>)
     fd6:	eb07 1e46 	add.w	lr, r7, r6, lsl #5
     fda:	f10e 0414 	add.w	r4, lr, #20
     fde:	ad04      	add	r5, sp, #16
     fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     fe4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     fe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
     fec:	2204      	movs	r2, #4
     fee:	f8ce 2028 	str.w	r2, [lr, #40]	; 0x28
    registrations_len_++;
     ff2:	3601      	adds	r6, #1
     ff4:	f8c7 60b4 	str.w	r6, [r7, #180]	; 0xb4
    builtin_codes_[num_buitin_ops_] = op;
     ff8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
     ffc:	18f9      	adds	r1, r7, r3
     ffe:	f881 20b8 	strb.w	r2, [r1, #184]	; 0xb8
    builtin_parsers_[num_buitin_ops_] = parser;
    1002:	eb07 0283 	add.w	r2, r7, r3, lsl #2
    1006:	4924      	ldr	r1, [pc, #144]	; (1098 <_Z15setup_inferencev+0x308>)
    1008:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    num_buitin_ops_++;
    100c:	3301      	adds	r3, #1
    100e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    1012:	e70c      	b.n	e2e <_Z15setup_inferencev+0x9e>
    if (registrations_len_ >= tOpCount) {
    1014:	4b07      	ldr	r3, [pc, #28]	; (1034 <_Z15setup_inferencev+0x2a4>)
    1016:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
    101a:	2e04      	cmp	r6, #4
    101c:	d93e      	bls.n	109c <_Z15setup_inferencev+0x30c>
      if (error_reporter_) {
    101e:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
    1022:	2800      	cmp	r0, #0
    1024:	f43f af17 	beq.w	e56 <_Z15setup_inferencev+0xc6>
        TF_LITE_REPORT_ERROR(error_reporter_,
    1028:	2305      	movs	r3, #5
    102a:	2209      	movs	r2, #9
    102c:	4918      	ldr	r1, [pc, #96]	; (1090 <_Z15setup_inferencev+0x300>)
    102e:	4c06      	ldr	r4, [pc, #24]	; (1048 <_Z15setup_inferencev+0x2b8>)
    1030:	47a0      	blx	r4
    1032:	e710      	b.n	e56 <_Z15setup_inferencev+0xc6>
    1034:	200009fc 	.word	0x200009fc
    1038:	20000004 	.word	0x20000004
    103c:	0001c3e0 	.word	0x0001c3e0
    1040:	00003761 	.word	0x00003761
    1044:	00021110 	.word	0x00021110
    1048:	00001265 	.word	0x00001265
    104c:	00004d55 	.word	0x00004d55
    1050:	00005e71 	.word	0x00005e71
    1054:	00006d45 	.word	0x00006d45
    1058:	000072f5 	.word	0x000072f5
    105c:	2000f78c 	.word	0x2000f78c
    1060:	00009c19 	.word	0x00009c19
    1064:	00009e71 	.word	0x00009e71
    1068:	000211a4 	.word	0x000211a4
    106c:	0000a465 	.word	0x0000a465
    1070:	0000a49d 	.word	0x0000a49d
    1074:	20000000 	.word	0x20000000
    1078:	00000c85 	.word	0x00000c85
    107c:	0000a44d 	.word	0x0000a44d
    1080:	000210c8 	.word	0x000210c8
    1084:	20000a08 	.word	0x20000a08
    1088:	000210ac 	.word	0x000210ac
    108c:	00000cdb 	.word	0x00000cdb
    1090:	00021160 	.word	0x00021160
    1094:	0000138d 	.word	0x0000138d
    1098:	000014cd 	.word	0x000014cd
    registrations_[registrations_len_] = registration;
    109c:	4f56      	ldr	r7, [pc, #344]	; (11f8 <_Z15setup_inferencev+0x468>)
    109e:	eb07 1e46 	add.w	lr, r7, r6, lsl #5
    10a2:	f10e 0414 	add.w	r4, lr, #20
    10a6:	ad04      	add	r5, sp, #16
    10a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    10aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    10ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    10b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    10b4:	2209      	movs	r2, #9
    10b6:	f8ce 2028 	str.w	r2, [lr, #40]	; 0x28
    registrations_len_++;
    10ba:	3601      	adds	r6, #1
    10bc:	f8c7 60b4 	str.w	r6, [r7, #180]	; 0xb4
    builtin_codes_[num_buitin_ops_] = op;
    10c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    10c4:	18f9      	adds	r1, r7, r3
    10c6:	f881 20b8 	strb.w	r2, [r1, #184]	; 0xb8
    builtin_parsers_[num_buitin_ops_] = parser;
    10ca:	eb07 0283 	add.w	r2, r7, r3, lsl #2
    10ce:	494b      	ldr	r1, [pc, #300]	; (11fc <_Z15setup_inferencev+0x46c>)
    10d0:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    num_buitin_ops_++;
    10d4:	3301      	adds	r3, #1
    10d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    10da:	e6bc      	b.n	e56 <_Z15setup_inferencev+0xc6>
    if (registrations_len_ >= tOpCount) {
    10dc:	4b46      	ldr	r3, [pc, #280]	; (11f8 <_Z15setup_inferencev+0x468>)
    10de:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
    10e2:	2e04      	cmp	r6, #4
    10e4:	d90a      	bls.n	10fc <_Z15setup_inferencev+0x36c>
      if (error_reporter_) {
    10e6:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
    10ea:	2800      	cmp	r0, #0
    10ec:	f43f aec7 	beq.w	e7e <_Z15setup_inferencev+0xee>
        TF_LITE_REPORT_ERROR(error_reporter_,
    10f0:	2305      	movs	r3, #5
    10f2:	2211      	movs	r2, #17
    10f4:	4942      	ldr	r1, [pc, #264]	; (1200 <_Z15setup_inferencev+0x470>)
    10f6:	4c43      	ldr	r4, [pc, #268]	; (1204 <_Z15setup_inferencev+0x474>)
    10f8:	47a0      	blx	r4
    10fa:	e6c0      	b.n	e7e <_Z15setup_inferencev+0xee>
    registrations_[registrations_len_] = registration;
    10fc:	4f3e      	ldr	r7, [pc, #248]	; (11f8 <_Z15setup_inferencev+0x468>)
    10fe:	eb07 1e46 	add.w	lr, r7, r6, lsl #5
    1102:	f10e 0414 	add.w	r4, lr, #20
    1106:	ad04      	add	r5, sp, #16
    1108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    110a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    110c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1110:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    1114:	2211      	movs	r2, #17
    1116:	f8ce 2028 	str.w	r2, [lr, #40]	; 0x28
    registrations_len_++;
    111a:	3601      	adds	r6, #1
    111c:	f8c7 60b4 	str.w	r6, [r7, #180]	; 0xb4
    builtin_codes_[num_buitin_ops_] = op;
    1120:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    1124:	18f9      	adds	r1, r7, r3
    1126:	f881 20b8 	strb.w	r2, [r1, #184]	; 0xb8
    builtin_parsers_[num_buitin_ops_] = parser;
    112a:	eb07 0283 	add.w	r2, r7, r3, lsl #2
    112e:	4936      	ldr	r1, [pc, #216]	; (1208 <_Z15setup_inferencev+0x478>)
    1130:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    num_buitin_ops_++;
    1134:	3301      	adds	r3, #1
    1136:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    113a:	e6a0      	b.n	e7e <_Z15setup_inferencev+0xee>
    if (registrations_len_ >= tOpCount) {
    113c:	4b2e      	ldr	r3, [pc, #184]	; (11f8 <_Z15setup_inferencev+0x468>)
    113e:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
    1142:	2e04      	cmp	r6, #4
    1144:	d90a      	bls.n	115c <_Z15setup_inferencev+0x3cc>
      if (error_reporter_) {
    1146:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
    114a:	2800      	cmp	r0, #0
    114c:	f43f aeab 	beq.w	ea6 <_Z15setup_inferencev+0x116>
        TF_LITE_REPORT_ERROR(error_reporter_,
    1150:	2305      	movs	r3, #5
    1152:	2219      	movs	r2, #25
    1154:	492a      	ldr	r1, [pc, #168]	; (1200 <_Z15setup_inferencev+0x470>)
    1156:	4c2b      	ldr	r4, [pc, #172]	; (1204 <_Z15setup_inferencev+0x474>)
    1158:	47a0      	blx	r4
    115a:	e6a4      	b.n	ea6 <_Z15setup_inferencev+0x116>
    registrations_[registrations_len_] = registration;
    115c:	4f26      	ldr	r7, [pc, #152]	; (11f8 <_Z15setup_inferencev+0x468>)
    115e:	eb07 1e46 	add.w	lr, r7, r6, lsl #5
    1162:	f10e 0414 	add.w	r4, lr, #20
    1166:	ad04      	add	r5, sp, #16
    1168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    116a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    116c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1170:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    1174:	2219      	movs	r2, #25
    1176:	f8ce 2028 	str.w	r2, [lr, #40]	; 0x28
    registrations_len_++;
    117a:	3601      	adds	r6, #1
    117c:	f8c7 60b4 	str.w	r6, [r7, #180]	; 0xb4
    builtin_codes_[num_buitin_ops_] = op;
    1180:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    1184:	18f9      	adds	r1, r7, r3
    1186:	f881 20b8 	strb.w	r2, [r1, #184]	; 0xb8
    builtin_parsers_[num_buitin_ops_] = parser;
    118a:	eb07 0283 	add.w	r2, r7, r3, lsl #2
    118e:	491f      	ldr	r1, [pc, #124]	; (120c <_Z15setup_inferencev+0x47c>)
    1190:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    num_buitin_ops_++;
    1194:	3301      	adds	r3, #1
    1196:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    119a:	e684      	b.n	ea6 <_Z15setup_inferencev+0x116>
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
    119c:	481c      	ldr	r0, [pc, #112]	; (1210 <_Z15setup_inferencev+0x480>)
    119e:	4b1d      	ldr	r3, [pc, #116]	; (1214 <_Z15setup_inferencev+0x484>)
    11a0:	4798      	blx	r3
    11a2:	2800      	cmp	r0, #0
    11a4:	f43f ae88 	beq.w	eb8 <_Z15setup_inferencev+0x128>
    11a8:	4c13      	ldr	r4, [pc, #76]	; (11f8 <_Z15setup_inferencev+0x468>)
    11aa:	4d1b      	ldr	r5, [pc, #108]	; (1218 <_Z15setup_inferencev+0x488>)
    11ac:	2300      	movs	r3, #0
    11ae:	9302      	str	r3, [sp, #8]
    11b0:	6863      	ldr	r3, [r4, #4]
    11b2:	9301      	str	r3, [sp, #4]
    11b4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
    11b8:	9300      	str	r3, [sp, #0]
    11ba:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
    11be:	f104 0210 	add.w	r2, r4, #16
    11c2:	68a1      	ldr	r1, [r4, #8]
    11c4:	4628      	mov	r0, r5
    11c6:	4e15      	ldr	r6, [pc, #84]	; (121c <_Z15setup_inferencev+0x48c>)
    11c8:	47b0      	blx	r6
    11ca:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
    11ce:	4b14      	ldr	r3, [pc, #80]	; (1220 <_Z15setup_inferencev+0x490>)
    11d0:	4798      	blx	r3
    11d2:	4a14      	ldr	r2, [pc, #80]	; (1224 <_Z15setup_inferencev+0x494>)
    11d4:	4914      	ldr	r1, [pc, #80]	; (1228 <_Z15setup_inferencev+0x498>)
    11d6:	4628      	mov	r0, r5
    11d8:	4b14      	ldr	r3, [pc, #80]	; (122c <_Z15setup_inferencev+0x49c>)
    11da:	4798      	blx	r3
    11dc:	e66c      	b.n	eb8 <_Z15setup_inferencev+0x128>
  if ((model_input->dims->size != 4) || (model_input->dims->data[0] != 1) ||
    11de:	689a      	ldr	r2, [r3, #8]
    11e0:	2a80      	cmp	r2, #128	; 0x80
    11e2:	f47f ae7d 	bne.w	ee0 <_Z15setup_inferencev+0x150>
      (model_input->dims->data[1] != 128) ||
    11e6:	68db      	ldr	r3, [r3, #12]
    11e8:	2b03      	cmp	r3, #3
    11ea:	f47f ae79 	bne.w	ee0 <_Z15setup_inferencev+0x150>
      (model_input->dims->data[2] != 3) || //kChannelNumber
    11ee:	7803      	ldrb	r3, [r0, #0]
    11f0:	2b01      	cmp	r3, #1
    11f2:	f47f ae75 	bne.w	ee0 <_Z15setup_inferencev+0x150>
    11f6:	e68e      	b.n	f16 <_Z15setup_inferencev+0x186>
    11f8:	200009fc 	.word	0x200009fc
    11fc:	00001629 	.word	0x00001629
    1200:	00021160 	.word	0x00021160
    1204:	00001265 	.word	0x00001265
    1208:	0000175d 	.word	0x0000175d
    120c:	0000189d 	.word	0x0000189d
    1210:	20000ad8 	.word	0x20000ad8
    1214:	0000a465 	.word	0x0000a465
    1218:	2000fadc 	.word	0x2000fadc
    121c:	00009bc1 	.word	0x00009bc1
    1220:	0000a49d 	.word	0x0000a49d
    1224:	20000000 	.word	0x20000000
    1228:	00009aff 	.word	0x00009aff
    122c:	0000a44d 	.word	0x0000a44d

00001230 <_Z13run_inferencev>:

void run_inference() {
    1230:	b508      	push	{r3, lr}
      //ReadAccelerometer(error_reporter, model_input->data.f, input_length);
  // If there was no new data, wait until next time.
  //if (!got_data) return;

  // Run inference, and report any error.
  TfLiteStatus invoke_status = interpreter->Invoke();
    1232:	4b07      	ldr	r3, [pc, #28]	; (1250 <_Z13run_inferencev+0x20>)
    1234:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
    1238:	4b06      	ldr	r3, [pc, #24]	; (1254 <_Z13run_inferencev+0x24>)
    123a:	4798      	blx	r3
  if (invoke_status != kTfLiteOk) {
    123c:	b900      	cbnz	r0, 1240 <_Z13run_inferencev+0x10>
    123e:	bd08      	pop	{r3, pc}
    TF_LITE_REPORT_ERROR(error_reporter, "Invoke failed on index: %d\n",
    1240:	2200      	movs	r2, #0
    1242:	4905      	ldr	r1, [pc, #20]	; (1258 <_Z13run_inferencev+0x28>)
    1244:	4b05      	ldr	r3, [pc, #20]	; (125c <_Z13run_inferencev+0x2c>)
    1246:	6858      	ldr	r0, [r3, #4]
    1248:	4b05      	ldr	r3, [pc, #20]	; (1260 <_Z13run_inferencev+0x30>)
    124a:	4798      	blx	r3
                         0); //begin_index
    return;
    124c:	e7f7      	b.n	123e <_Z13run_inferencev+0xe>
    124e:	bf00      	nop
    1250:	2000f78c 	.word	0x2000f78c
    1254:	00009d65 	.word	0x00009d65
    1258:	000211cc 	.word	0x000211cc
    125c:	200009fc 	.word	0x200009fc
    1260:	00001265 	.word	0x00001265

00001264 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
    1264:	b40e      	push	{r1, r2, r3}
    1266:	b500      	push	{lr}
    1268:	b082      	sub	sp, #8
    126a:	aa03      	add	r2, sp, #12
    126c:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
    1270:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
    1272:	6803      	ldr	r3, [r0, #0]
    1274:	689b      	ldr	r3, [r3, #8]
    1276:	4798      	blx	r3
  va_end(args);
  return code;
}
    1278:	b002      	add	sp, #8
    127a:	f85d eb04 	ldr.w	lr, [sp], #4
    127e:	b003      	add	sp, #12
    1280:	4770      	bx	lr

00001282 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
    1282:	b40c      	push	{r2, r3}
    1284:	b500      	push	{lr}
    1286:	b083      	sub	sp, #12
    1288:	aa04      	add	r2, sp, #16
    128a:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
    128e:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
    1290:	6803      	ldr	r3, [r0, #0]
    1292:	689b      	ldr	r3, [r3, #8]
    1294:	4798      	blx	r3
  va_end(args);
  return code;
}
    1296:	b003      	add	sp, #12
    1298:	f85d eb04 	ldr.w	lr, [sp], #4
    129c:	b002      	add	sp, #8
    129e:	4770      	bx	lr

000012a0 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
  }

  template<typename T> T GetField(voffset_t field, T defaultval) const {
    auto field_offset = GetOptionalFieldOffset(field);
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    12a0:	3801      	subs	r0, #1
    12a2:	2804      	cmp	r0, #4
    12a4:	d80e      	bhi.n	12c4 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x24>
    12a6:	e8df f000 	tbb	[pc, r0]
    12aa:	0503      	.short	0x0503
    12ac:	0907      	.short	0x0907
    12ae:	0b          	.byte	0x0b
    12af:	00          	.byte	0x00
    12b0:	2001      	movs	r0, #1
    12b2:	4770      	bx	lr
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    12b4:	2002      	movs	r0, #2
    12b6:	4770      	bx	lr
    12b8:	2003      	movs	r0, #3
    12ba:	4770      	bx	lr
    12bc:	2004      	movs	r0, #4
    12be:	4770      	bx	lr
      *builtin_data = params.release();
      return kTfLiteOk;
    }
    case BuiltinOperator_ONE_HOT: {
      auto params = safe_allocator.Allocate<TfLiteOneHotParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    12c0:	2005      	movs	r0, #5
    12c2:	4770      	bx	lr
    return data_ - ReadScalar<soffset_t>(data_);
    12c4:	2000      	movs	r0, #0
    12c6:	4770      	bx	lr

000012c8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    12c8:	b120      	cbz	r0, 12d4 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0xc>
    12ca:	2801      	cmp	r0, #1
    12cc:	bf0c      	ite	eq

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
  return EndianScalar(*reinterpret_cast<const T *>(p));
    12ce:	2002      	moveq	r0, #2
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    12d0:	2000      	movne	r0, #0
  }
  const tflite::LogicalOrOptions *builtin_options_as_LogicalOrOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_LogicalOrOptions ? static_cast<const tflite::LogicalOrOptions *>(builtin_options()) : nullptr;
  }
  const tflite::OneHotOptions *builtin_options_as_OneHotOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_OneHotOptions ? static_cast<const tflite::OneHotOptions *>(builtin_options()) : nullptr;
    12d2:	4770      	bx	lr
    12d4:	2001      	movs	r0, #1
    12d6:	4770      	bx	lr

000012d8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
    return const_cast<Table *>(this)->GetPointer<P>(field);
    12d8:	b508      	push	{r3, lr}
    12da:	b118      	cbz	r0, 12e4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc>
    12dc:	b121      	cbz	r1, 12e8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10>
    12de:	b12a      	cbz	r2, 12ec <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14>
      if (const auto* schema_params = op->builtin_options_as_OneHotOptions()) {
    12e0:	b133      	cbz	r3, 12f0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
    return data_ - ReadScalar<soffset_t>(data_);
    12e2:	bd08      	pop	{r3, pc}
    12e4:	4b03      	ldr	r3, [pc, #12]	; (12f4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c>)
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    12e6:	4798      	blx	r3
    12e8:	4b02      	ldr	r3, [pc, #8]	; (12f4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c>)
    12ea:	4798      	blx	r3
    12ec:	4b01      	ldr	r3, [pc, #4]	; (12f4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c>)
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    12ee:	4798      	blx	r3
    12f0:	4b00      	ldr	r3, [pc, #0]	; (12f4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c>)
        params->axis = schema_params->axis();
    12f2:	4798      	blx	r3
      }
      *builtin_data = params.release();
    12f4:	00014b3d 	.word	0x00014b3d

000012f8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
      return kTfLiteOk;
    12f8:	b508      	push	{r3, lr}
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    12fa:	280b      	cmp	r0, #11
    12fc:	d837      	bhi.n	136e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x76>
    12fe:	e8df f000 	tbb	[pc, r0]
    1302:	060a      	.short	0x060a
    1304:	26221a16 	.word	0x26221a16
    1308:	1e2e122a 	.word	0x1e2e122a
    130c:	320e      	.short	0x320e
    130e:	230a      	movs	r3, #10
    1310:	700b      	strb	r3, [r1, #0]
    1312:	2000      	movs	r0, #0
    1314:	bd08      	pop	{r3, pc}
    1316:	2301      	movs	r3, #1
    1318:	700b      	strb	r3, [r1, #0]
    131a:	2000      	movs	r0, #0
    131c:	bd08      	pop	{r3, pc}
    131e:	230b      	movs	r3, #11
    1320:	700b      	strb	r3, [r1, #0]
    1322:	2000      	movs	r0, #0
    1324:	bd08      	pop	{r3, pc}
    1326:	2307      	movs	r3, #7
    }
    case BuiltinOperator_LEAKY_RELU: {
      auto params = safe_allocator.Allocate<TfLiteLeakyReluParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    1328:	700b      	strb	r3, [r1, #0]
    132a:	2000      	movs	r0, #0
    return data_ - ReadScalar<soffset_t>(data_);
    132c:	bd08      	pop	{r3, pc}
    132e:	2302      	movs	r3, #2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1330:	700b      	strb	r3, [r1, #0]
    1332:	2000      	movs	r0, #0
    1334:	bd08      	pop	{r3, pc}
    1336:	2303      	movs	r3, #3
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1338:	700b      	strb	r3, [r1, #0]
  }
  const tflite::ResizeNearestNeighborOptions *builtin_options_as_ResizeNearestNeighborOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_ResizeNearestNeighborOptions ? static_cast<const tflite::ResizeNearestNeighborOptions *>(builtin_options()) : nullptr;
  }
  const tflite::LeakyReluOptions *builtin_options_as_LeakyReluOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_LeakyReluOptions ? static_cast<const tflite::LeakyReluOptions *>(builtin_options()) : nullptr;
    133a:	2000      	movs	r0, #0
    133c:	bd08      	pop	{r3, pc}
    133e:	2309      	movs	r3, #9
    return const_cast<Table *>(this)->GetPointer<P>(field);
    1340:	700b      	strb	r3, [r1, #0]
    1342:	2000      	movs	r0, #0
    1344:	bd08      	pop	{r3, pc}
    1346:	2304      	movs	r3, #4
      if (const auto* leaky_relu_params =
    1348:	700b      	strb	r3, [r1, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    134a:	2000      	movs	r0, #0
    134c:	bd08      	pop	{r3, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    134e:	2305      	movs	r3, #5
    1350:	700b      	strb	r3, [r1, #0]
    1352:	2000      	movs	r0, #0
    1354:	bd08      	pop	{r3, pc}
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1356:	2306      	movs	r3, #6
    1358:	700b      	strb	r3, [r1, #0]
              op->builtin_options_as_LeakyReluOptions()) {
        params->alpha = leaky_relu_params->alpha();
    135a:	2000      	movs	r0, #0
      }
      *builtin_data = params.release();
    135c:	bd08      	pop	{r3, pc}
      return kTfLiteOk;
    135e:	2308      	movs	r3, #8
    1360:	700b      	strb	r3, [r1, #0]
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    1362:	2000      	movs	r0, #0
    1364:	bd08      	pop	{r3, pc}
    1366:	230c      	movs	r3, #12
    1368:	700b      	strb	r3, [r1, #0]
    136a:	2000      	movs	r0, #0
    136c:	bd08      	pop	{r3, pc}
    136e:	4613      	mov	r3, r2
    1370:	4602      	mov	r2, r0
    1372:	2000      	movs	r0, #0
    1374:	7008      	strb	r0, [r1, #0]
    1376:	4903      	ldr	r1, [pc, #12]	; (1384 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x8c>)
    1378:	4618      	mov	r0, r3
    137a:	4b03      	ldr	r3, [pc, #12]	; (1388 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x90>)
    137c:	4798      	blx	r3
    137e:	2001      	movs	r0, #1
    1380:	bd08      	pop	{r3, pc}
    1382:	bf00      	nop
    1384:	000212a8 	.word	0x000212a8
    1388:	00001265 	.word	0x00001265

0000138c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
    138c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    }
    case BuiltinOperator_MIRROR_PAD: {
      auto params = safe_allocator.Allocate<TfLiteMirrorPaddingParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    1390:	b082      	sub	sp, #8
    1392:	4604      	mov	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    1394:	460f      	mov	r7, r1
    1396:	4615      	mov	r5, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1398:	4698      	mov	r8, r3
    139a:	4e45      	ldr	r6, [pc, #276]	; (14b0 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>)
    139c:	47b0      	blx	r6
    139e:	682b      	ldr	r3, [r5, #0]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    13a0:	681b      	ldr	r3, [r3, #0]
  }
  const tflite::SquaredDifferenceOptions *builtin_options_as_SquaredDifferenceOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_SquaredDifferenceOptions ? static_cast<const tflite::SquaredDifferenceOptions *>(builtin_options()) : nullptr;
  }
  const tflite::MirrorPadOptions *builtin_options_as_MirrorPadOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_MirrorPadOptions ? static_cast<const tflite::MirrorPadOptions *>(builtin_options()) : nullptr;
    13a2:	2204      	movs	r2, #4
    13a4:	2118      	movs	r1, #24
    13a6:	4628      	mov	r0, r5
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    13a8:	4798      	blx	r3
    13aa:	2800      	cmp	r0, #0
    13ac:	d05a      	beq.n	1464 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
    auto p = data_ + field_offset;
    13ae:	4606      	mov	r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    13b0:	6823      	ldr	r3, [r4, #0]
    13b2:	1ae3      	subs	r3, r4, r3
      const auto* mirror_pad_params = op->builtin_options_as_MirrorPadOptions();
      if (mirror_pad_params != nullptr) {
    13b4:	881a      	ldrh	r2, [r3, #0]
    13b6:	2a0a      	cmp	r2, #10
    return data_ - ReadScalar<soffset_t>(data_);
    13b8:	dd4e      	ble.n	1458 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
    13ba:	8959      	ldrh	r1, [r3, #10]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    13bc:	2900      	cmp	r1, #0
    13be:	d04b      	beq.n	1458 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
    13c0:	5c61      	ldrb	r1, [r4, r1]
    13c2:	2901      	cmp	r1, #1
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    13c4:	d148      	bne.n	1458 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
        params->mode =
            mirror_pad_params->mode() == tflite::MirrorPadMode_REFLECT
                ? TfLiteMirrorPaddingMode::kTfLiteMirrorPaddingReflect
    13c6:	2a0c      	cmp	r2, #12
    13c8:	dd46      	ble.n	1458 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
    13ca:	899b      	ldrh	r3, [r3, #12]
    13cc:	18e7      	adds	r7, r4, r3
    13ce:	2b00      	cmp	r3, #0
        params->mode =
    13d0:	d042      	beq.n	1458 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
                : TfLiteMirrorPaddingMode::kTfLiteMirrorPaddingSymmetric;
      }
      *builtin_data = params.release();
    13d2:	58e5      	ldr	r5, [r4, r3]
      return kTfLiteOk;
    13d4:	197c      	adds	r4, r7, r5
    13d6:	d03f      	beq.n	1458 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    13d8:	597b      	ldr	r3, [r7, r5]
    13da:	1ae3      	subs	r3, r4, r3
    13dc:	881a      	ldrh	r2, [r3, #0]
    13de:	2a04      	cmp	r2, #4
    13e0:	dd4d      	ble.n	147e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf2>
    13e2:	889b      	ldrh	r3, [r3, #4]
    13e4:	2b00      	cmp	r3, #0
    13e6:	d04c      	beq.n	1482 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf6>
    13e8:	56e0      	ldrsb	r0, [r4, r3]
    13ea:	b2c0      	uxtb	r0, r0
    13ec:	4b31      	ldr	r3, [pc, #196]	; (14b4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x128>)
    13ee:	4798      	blx	r3
    13f0:	7030      	strb	r0, [r6, #0]
                ? TfLiteMirrorPaddingMode::kTfLiteMirrorPaddingReflect
    13f2:	597b      	ldr	r3, [r7, r5]
    13f4:	1ae3      	subs	r3, r4, r3
    13f6:	881a      	ldrh	r2, [r3, #0]
    13f8:	2a06      	cmp	r2, #6
    13fa:	dd44      	ble.n	1486 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    13fc:	88db      	ldrh	r3, [r3, #6]
    13fe:	2b00      	cmp	r3, #0
    1400:	d043      	beq.n	148a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfe>
    1402:	58e3      	ldr	r3, [r4, r3]
    1404:	6073      	str	r3, [r6, #4]
    1406:	597b      	ldr	r3, [r7, r5]
    1408:	1ae3      	subs	r3, r4, r3
    140a:	881a      	ldrh	r2, [r3, #0]
    140c:	2a08      	cmp	r2, #8
    140e:	dd3e      	ble.n	148e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x102>
    1410:	891b      	ldrh	r3, [r3, #8]
    1412:	2b00      	cmp	r3, #0
    1414:	d03d      	beq.n	1492 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
    1416:	58e3      	ldr	r3, [r4, r3]
    1418:	60b3      	str	r3, [r6, #8]
    141a:	597b      	ldr	r3, [r7, r5]
    141c:	1ae3      	subs	r3, r4, r3
    141e:	881a      	ldrh	r2, [r3, #0]
    1420:	2a0a      	cmp	r2, #10
    1422:	dd38      	ble.n	1496 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10a>
    }
    case BuiltinOperator_UNIQUE: {
      auto params = safe_allocator.Allocate<TfLiteUniqueParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    1424:	895b      	ldrh	r3, [r3, #10]
    1426:	2b00      	cmp	r3, #0
    return data_ - ReadScalar<soffset_t>(data_);
    1428:	d037      	beq.n	149a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    142a:	56e0      	ldrsb	r0, [r4, r3]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    142c:	b2c0      	uxtb	r0, r0
    142e:	4b22      	ldr	r3, [pc, #136]	; (14b8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
    1430:	4798      	blx	r3
    1432:	7330      	strb	r0, [r6, #12]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1434:	597b      	ldr	r3, [r7, r5]
  }
  const tflite::SplitVOptions *builtin_options_as_SplitVOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_SplitVOptions ? static_cast<const tflite::SplitVOptions *>(builtin_options()) : nullptr;
  }
  const tflite::UniqueOptions *builtin_options_as_UniqueOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_UniqueOptions ? static_cast<const tflite::UniqueOptions *>(builtin_options()) : nullptr;
    1436:	1ae3      	subs	r3, r4, r3
    1438:	881a      	ldrh	r2, [r3, #0]
    143a:	2a0c      	cmp	r2, #12
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    143c:	dd2f      	ble.n	149e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x112>
    143e:	899b      	ldrh	r3, [r3, #12]
    1440:	b37b      	cbz	r3, 14a2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>
    auto p = data_ + field_offset;
    1442:	58e3      	ldr	r3, [r4, r3]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    1444:	6133      	str	r3, [r6, #16]
    1446:	597b      	ldr	r3, [r7, r5]
      const auto* unique_params = op->builtin_options_as_UniqueOptions();
      if (unique_params != nullptr) {
    1448:	1ae3      	subs	r3, r4, r3
    144a:	881a      	ldrh	r2, [r3, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    144c:	2a0e      	cmp	r2, #14
    144e:	dd2a      	ble.n	14a6 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1450:	89db      	ldrh	r3, [r3, #14]
    1452:	b353      	cbz	r3, 14aa <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11e>
    1454:	58e3      	ldr	r3, [r4, r3]
    1456:	6173      	str	r3, [r6, #20]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1458:	f8c8 6000 	str.w	r6, [r8]
        params->index_out_type =
            unique_params->idx_out_type() == tflite::TensorType_INT64
                ? TfLiteType::kTfLiteInt64
    145c:	2000      	movs	r0, #0
    145e:	b002      	add	sp, #8
    1460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        params->index_out_type =
    1464:	4b15      	ldr	r3, [pc, #84]	; (14bc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
                : TfLiteType::kTfLiteInt32;
      }
      *builtin_data = params.release();
    1466:	9301      	str	r3, [sp, #4]
      return kTfLiteOk;
    1468:	f44f 737b 	mov.w	r3, #1004	; 0x3ec
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    146c:	9300      	str	r3, [sp, #0]
    146e:	4b14      	ldr	r3, [pc, #80]	; (14c0 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
    1470:	4a14      	ldr	r2, [pc, #80]	; (14c4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
    1472:	4639      	mov	r1, r7
    1474:	4638      	mov	r0, r7
    1476:	4c14      	ldr	r4, [pc, #80]	; (14c8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
    1478:	47a0      	blx	r4
    147a:	2001      	movs	r0, #1
    147c:	e7ef      	b.n	145e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    147e:	2000      	movs	r0, #0
    1480:	e7b3      	b.n	13ea <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
    1482:	2000      	movs	r0, #0
    1484:	e7b1      	b.n	13ea <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
                ? TfLiteType::kTfLiteInt64
    1486:	2300      	movs	r3, #0
    1488:	e7bc      	b.n	1404 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>
    148a:	2300      	movs	r3, #0
    148c:	e7ba      	b.n	1404 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>
    148e:	2300      	movs	r3, #0
    1490:	e7c2      	b.n	1418 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    1492:	2300      	movs	r3, #0
    1494:	e7c0      	b.n	1418 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    1496:	2000      	movs	r0, #0
    1498:	e7c8      	b.n	142c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    }
    case BuiltinOperator_REVERSE_SEQUENCE: {
      auto params = safe_allocator.Allocate<TfLiteReverseSequenceParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    149a:	2000      	movs	r0, #0
    149c:	e7c6      	b.n	142c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    return data_ - ReadScalar<soffset_t>(data_);
    149e:	2301      	movs	r3, #1
    14a0:	e7d0      	b.n	1444 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    14a2:	2301      	movs	r3, #1
    14a4:	e7ce      	b.n	1444 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
    14a6:	2301      	movs	r3, #1
    14a8:	e7d5      	b.n	1456 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    14aa:	2301      	movs	r3, #1
  }
  const tflite::RankOptions *builtin_options_as_RankOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_RankOptions ? static_cast<const tflite::RankOptions *>(builtin_options()) : nullptr;
  }
  const tflite::ReverseSequenceOptions *builtin_options_as_ReverseSequenceOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_ReverseSequenceOptions ? static_cast<const tflite::ReverseSequenceOptions *>(builtin_options()) : nullptr;
    14ac:	e7d3      	b.n	1456 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
    14ae:	bf00      	nop
    14b0:	000012d9 	.word	0x000012d9
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    14b4:	000012c9 	.word	0x000012c9
    auto p = data_ + field_offset;
    14b8:	000012a1 	.word	0x000012a1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    14bc:	0002131c 	.word	0x0002131c
      if (const auto* reverse_seq_params =
    14c0:	000212cc 	.word	0x000212cc
    return data_ - ReadScalar<soffset_t>(data_);
    14c4:	00021304 	.word	0x00021304
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    14c8:	00001283 	.word	0x00001283

000014cc <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
    14cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    14d0:	b082      	sub	sp, #8
              op->builtin_options_as_ReverseSequenceOptions()) {
        params->seq_dim = reverse_seq_params->seq_dim();
    14d2:	4604      	mov	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    14d4:	460f      	mov	r7, r1
    14d6:	4615      	mov	r5, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    14d8:	4698      	mov	r8, r3
    14da:	4e4c      	ldr	r6, [pc, #304]	; (160c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x140>)
    14dc:	47b0      	blx	r6
    14de:	682b      	ldr	r3, [r5, #0]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    14e0:	681b      	ldr	r3, [r3, #0]
    14e2:	2204      	movs	r2, #4
        params->batch_dim = reverse_seq_params->batch_dim();
    14e4:	211c      	movs	r1, #28
      }
      *builtin_data = params.release();
    14e6:	4628      	mov	r0, r5
      return kTfLiteOk;
    14e8:	4798      	blx	r3
    14ea:	2800      	cmp	r0, #0
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    14ec:	d065      	beq.n	15ba <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xee>
    14ee:	4606      	mov	r6, r0
    14f0:	6823      	ldr	r3, [r4, #0]
    14f2:	1ae3      	subs	r3, r4, r3
    14f4:	881a      	ldrh	r2, [r3, #0]
    14f6:	2a0a      	cmp	r2, #10
    14f8:	dd59      	ble.n	15ae <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe2>
    14fa:	8959      	ldrh	r1, [r3, #10]
    14fc:	2900      	cmp	r1, #0
    14fe:	d056      	beq.n	15ae <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe2>
    1500:	5c61      	ldrb	r1, [r4, r1]
    1502:	2902      	cmp	r1, #2
    1504:	d153      	bne.n	15ae <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe2>
    1506:	2a0c      	cmp	r2, #12
    1508:	dd51      	ble.n	15ae <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe2>
    150a:	899b      	ldrh	r3, [r3, #12]
    150c:	18e7      	adds	r7, r4, r3
    150e:	2b00      	cmp	r3, #0
    1510:	d04d      	beq.n	15ae <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe2>
    1512:	58e5      	ldr	r5, [r4, r3]
    1514:	197c      	adds	r4, r7, r5
    1516:	d04a      	beq.n	15ae <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe2>
    1518:	597b      	ldr	r3, [r7, r5]
    151a:	1ae3      	subs	r3, r4, r3
    151c:	881a      	ldrh	r2, [r3, #0]
    151e:	2a04      	cmp	r2, #4
    1520:	dd58      	ble.n	15d4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x108>
    }
    case BuiltinOperator_IF: {
      auto params = safe_allocator.Allocate<TfLiteIfParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    1522:	889b      	ldrh	r3, [r3, #4]
    1524:	2b00      	cmp	r3, #0
    return data_ - ReadScalar<soffset_t>(data_);
    1526:	d057      	beq.n	15d8 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10c>
    1528:	56e0      	ldrsb	r0, [r4, r3]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    152a:	b2c0      	uxtb	r0, r0
    152c:	4b38      	ldr	r3, [pc, #224]	; (1610 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x144>)
    152e:	4798      	blx	r3
    1530:	7030      	strb	r0, [r6, #0]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1532:	597b      	ldr	r3, [r7, r5]
  }
  const tflite::HardSwishOptions *builtin_options_as_HardSwishOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_HardSwishOptions ? static_cast<const tflite::HardSwishOptions *>(builtin_options()) : nullptr;
  }
  const tflite::IfOptions *builtin_options_as_IfOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_IfOptions ? static_cast<const tflite::IfOptions *>(builtin_options()) : nullptr;
    1534:	1ae3      	subs	r3, r4, r3
    1536:	881a      	ldrh	r2, [r3, #0]
    1538:	2a06      	cmp	r2, #6
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    153a:	dd4f      	ble.n	15dc <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x110>
    153c:	88db      	ldrh	r3, [r3, #6]
    153e:	2b00      	cmp	r3, #0
    auto p = data_ + field_offset;
    1540:	d04e      	beq.n	15e0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x114>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    1542:	58e3      	ldr	r3, [r4, r3]
    1544:	6073      	str	r3, [r6, #4]
      if (const auto* if_params = op->builtin_options_as_IfOptions()) {
    1546:	597b      	ldr	r3, [r7, r5]
    1548:	1ae3      	subs	r3, r4, r3
    return data_ - ReadScalar<soffset_t>(data_);
    154a:	881a      	ldrh	r2, [r3, #0]
    154c:	2a08      	cmp	r2, #8
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    154e:	dd49      	ble.n	15e4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>
    1550:	891b      	ldrh	r3, [r3, #8]
    1552:	2b00      	cmp	r3, #0
    1554:	d048      	beq.n	15e8 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1556:	58e3      	ldr	r3, [r4, r3]
    1558:	60b3      	str	r3, [r6, #8]
        params->then_subgraph_index = if_params->then_subgraph_index();
    155a:	597b      	ldr	r3, [r7, r5]
    return data_ - ReadScalar<soffset_t>(data_);
    155c:	1ae3      	subs	r3, r4, r3
    155e:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1560:	2a0a      	cmp	r2, #10
    1562:	dd43      	ble.n	15ec <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>
    1564:	895b      	ldrh	r3, [r3, #10]
    1566:	2b00      	cmp	r3, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1568:	d042      	beq.n	15f0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>
    156a:	58e3      	ldr	r3, [r4, r3]
        params->else_subgraph_index = if_params->else_subgraph_index();
    156c:	60f3      	str	r3, [r6, #12]
      }
      *builtin_data = params.release();
    156e:	597b      	ldr	r3, [r7, r5]
      return kTfLiteOk;
    1570:	1ae3      	subs	r3, r4, r3
    1572:	881a      	ldrh	r2, [r3, #0]
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    1574:	2a0c      	cmp	r2, #12
    1576:	dd3d      	ble.n	15f4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x128>
    1578:	899b      	ldrh	r3, [r3, #12]
    157a:	2b00      	cmp	r3, #0
    157c:	d03c      	beq.n	15f8 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>
    157e:	56e0      	ldrsb	r0, [r4, r3]
    1580:	b2c0      	uxtb	r0, r0
    1582:	4b24      	ldr	r3, [pc, #144]	; (1614 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x148>)
    1584:	4798      	blx	r3
    1586:	7430      	strb	r0, [r6, #16]
    1588:	597b      	ldr	r3, [r7, r5]
    158a:	1ae3      	subs	r3, r4, r3
    158c:	881a      	ldrh	r2, [r3, #0]
    158e:	2a0e      	cmp	r2, #14
    1590:	dd34      	ble.n	15fc <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>
    1592:	89db      	ldrh	r3, [r3, #14]
    1594:	2b00      	cmp	r3, #0
    1596:	d033      	beq.n	1600 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>
    1598:	58e3      	ldr	r3, [r4, r3]
    159a:	6173      	str	r3, [r6, #20]
    159c:	597b      	ldr	r3, [r7, r5]
    159e:	1ae3      	subs	r3, r4, r3
    15a0:	881a      	ldrh	r2, [r3, #0]
    15a2:	2a10      	cmp	r2, #16
    15a4:	dd2e      	ble.n	1604 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>
    15a6:	8a1b      	ldrh	r3, [r3, #16]
    15a8:	b373      	cbz	r3, 1608 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>
    }
    case BuiltinOperator_WHILE: {
      auto params = safe_allocator.Allocate<TfLiteWhileParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    15aa:	58e3      	ldr	r3, [r4, r3]
    15ac:	61b3      	str	r3, [r6, #24]
    return data_ - ReadScalar<soffset_t>(data_);
    15ae:	f8c8 6000 	str.w	r6, [r8]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    15b2:	2000      	movs	r0, #0
    15b4:	b002      	add	sp, #8
    15b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    15ba:	4b17      	ldr	r3, [pc, #92]	; (1618 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>)
  }
  const tflite::WhileOptions *builtin_options_as_WhileOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_WhileOptions ? static_cast<const tflite::WhileOptions *>(builtin_options()) : nullptr;
    15bc:	9301      	str	r3, [sp, #4]
    15be:	f240 4316 	movw	r3, #1046	; 0x416
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    15c2:	9300      	str	r3, [sp, #0]
    15c4:	4b15      	ldr	r3, [pc, #84]	; (161c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x150>)
    15c6:	4a16      	ldr	r2, [pc, #88]	; (1620 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x154>)
    auto p = data_ + field_offset;
    15c8:	4639      	mov	r1, r7
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    15ca:	4638      	mov	r0, r7
    15cc:	4c15      	ldr	r4, [pc, #84]	; (1624 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x158>)
      if (const auto* while_params = op->builtin_options_as_WhileOptions()) {
    15ce:	47a0      	blx	r4
    15d0:	2001      	movs	r0, #1
    return data_ - ReadScalar<soffset_t>(data_);
    15d2:	e7ef      	b.n	15b4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe8>
    15d4:	2000      	movs	r0, #0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    15d6:	e7a8      	b.n	152a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
    15d8:	2000      	movs	r0, #0
    15da:	e7a6      	b.n	152a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
    15dc:	2300      	movs	r3, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    15de:	e7b1      	b.n	1544 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>
    15e0:	2300      	movs	r3, #0
        params->cond_subgraph_index = while_params->cond_subgraph_index();
    15e2:	e7af      	b.n	1544 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>
    return data_ - ReadScalar<soffset_t>(data_);
    15e4:	2300      	movs	r3, #0
    15e6:	e7b7      	b.n	1558 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    15e8:	2300      	movs	r3, #0
    15ea:	e7b5      	b.n	1558 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    15ec:	2300      	movs	r3, #0
    15ee:	e7bd      	b.n	156c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    15f0:	2300      	movs	r3, #0
    15f2:	e7bb      	b.n	156c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
        params->body_subgraph_index = while_params->body_subgraph_index();
    15f4:	2000      	movs	r0, #0
      }
      *builtin_data = params.release();
    15f6:	e7c3      	b.n	1580 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb4>
      return kTfLiteOk;
    15f8:	2000      	movs	r0, #0
    15fa:	e7c1      	b.n	1580 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb4>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    15fc:	2301      	movs	r3, #1
    15fe:	e7cc      	b.n	159a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    1600:	2301      	movs	r3, #1
    1602:	e7ca      	b.n	159a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    1604:	2301      	movs	r3, #1
    1606:	e7d1      	b.n	15ac <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe0>
    1608:	2301      	movs	r3, #1
    160a:	e7cf      	b.n	15ac <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe0>
    160c:	000012d9 	.word	0x000012d9
    1610:	000012c9 	.word	0x000012c9
    1614:	000012a1 	.word	0x000012a1
    1618:	0002131c 	.word	0x0002131c
    161c:	000212cc 	.word	0x000212cc
    1620:	00021304 	.word	0x00021304
    1624:	00001283 	.word	0x00001283

00001628 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
    1628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    162c:	b082      	sub	sp, #8
    162e:	4604      	mov	r4, r0
    1630:	4689      	mov	r9, r1
    }
    case BuiltinOperator_BATCH_MATMUL: {
      auto params = safe_allocator.Allocate<TfLiteBatchMatMulParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    1632:	4690      	mov	r8, r2
    1634:	469a      	mov	sl, r3
    1636:	4d41      	ldr	r5, [pc, #260]	; (173c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x114>)
    return data_ - ReadScalar<soffset_t>(data_);
    1638:	47a8      	blx	r5
    163a:	f8d8 3000 	ldr.w	r3, [r8]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    163e:	681b      	ldr	r3, [r3, #0]
    1640:	2201      	movs	r2, #1
    1642:	2104      	movs	r1, #4
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1644:	4640      	mov	r0, r8
  }
  const tflite::SegmentSumOptions *builtin_options_as_SegmentSumOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_SegmentSumOptions ? static_cast<const tflite::SegmentSumOptions *>(builtin_options()) : nullptr;
  }
  const tflite::BatchMatMulOptions *builtin_options_as_BatchMatMulOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_BatchMatMulOptions ? static_cast<const tflite::BatchMatMulOptions *>(builtin_options()) : nullptr;
    1646:	4798      	blx	r3
    1648:	2800      	cmp	r0, #0
    164a:	d054      	beq.n	16f6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    164c:	4605      	mov	r5, r0
    164e:	6823      	ldr	r3, [r4, #0]
    1650:	1ae3      	subs	r3, r4, r3
    auto p = data_ + field_offset;
    1652:	881a      	ldrh	r2, [r3, #0]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    1654:	2a0a      	cmp	r2, #10
    1656:	dd69      	ble.n	172c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
      if (const auto* bmm_params =
    1658:	8959      	ldrh	r1, [r3, #10]
    165a:	2900      	cmp	r1, #0
    return data_ - ReadScalar<soffset_t>(data_);
    165c:	d066      	beq.n	172c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    165e:	5c61      	ldrb	r1, [r4, r1]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1660:	2908      	cmp	r1, #8
    1662:	d163      	bne.n	172c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    1664:	2a0c      	cmp	r2, #12
    1666:	dd61      	ble.n	172c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1668:	899b      	ldrh	r3, [r3, #12]
    166a:	18e7      	adds	r7, r4, r3
    return GetField<uint8_t>(VT_ADJ_X, 0) != 0;
    166c:	2b00      	cmp	r3, #0
    166e:	d05d      	beq.n	172c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    1670:	58e6      	ldr	r6, [r4, r3]
    1672:	19bc      	adds	r4, r7, r6
    return data_ - ReadScalar<soffset_t>(data_);
    1674:	d05a      	beq.n	172c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    1676:	59bb      	ldr	r3, [r7, r6]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1678:	1ae3      	subs	r3, r4, r3
    167a:	881a      	ldrh	r2, [r3, #0]
    167c:	2a04      	cmp	r2, #4
    167e:	dd47      	ble.n	1710 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe8>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1680:	889b      	ldrh	r3, [r3, #4]
    1682:	2b00      	cmp	r3, #0
    return GetField<uint8_t>(VT_ADJ_Y, 0) != 0;
    1684:	d046      	beq.n	1714 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xec>
    1686:	56e0      	ldrsb	r0, [r4, r3]
    1688:	b2c0      	uxtb	r0, r0
    168a:	4b2d      	ldr	r3, [pc, #180]	; (1740 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>)
              op->builtin_options_as_BatchMatMulOptions()) {
        params->adj_x = bmm_params->adj_x();
        params->adj_y = bmm_params->adj_y();
      }
      *builtin_data = params.release();
    168c:	4798      	blx	r3
      return kTfLiteOk;
    168e:	7028      	strb	r0, [r5, #0]
    1690:	59bb      	ldr	r3, [r7, r6]
    1692:	1ae3      	subs	r3, r4, r3
    1694:	881a      	ldrh	r2, [r3, #0]
    1696:	2a08      	cmp	r2, #8
    1698:	dd3e      	ble.n	1718 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>
    169a:	891b      	ldrh	r3, [r3, #8]
    169c:	2b00      	cmp	r3, #0
    169e:	d03d      	beq.n	171c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>
    16a0:	5ce3      	ldrb	r3, [r4, r3]
    16a2:	3300      	adds	r3, #0
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    16a4:	bf18      	it	ne
    16a6:	2301      	movne	r3, #1
    16a8:	70ab      	strb	r3, [r5, #2]
    16aa:	59bb      	ldr	r3, [r7, r6]
    16ac:	1ae3      	subs	r3, r4, r3
    16ae:	881a      	ldrh	r2, [r3, #0]
    16b0:	2a0a      	cmp	r2, #10
    16b2:	dd35      	ble.n	1720 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
    16b4:	895b      	ldrh	r3, [r3, #10]
    16b6:	2b00      	cmp	r3, #0
    16b8:	d034      	beq.n	1724 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfc>
    16ba:	5ce3      	ldrb	r3, [r4, r3]
    16bc:	3300      	adds	r3, #0
    16be:	bf18      	it	ne
    16c0:	2301      	movne	r3, #1
    16c2:	70eb      	strb	r3, [r5, #3]
    16c4:	59bb      	ldr	r3, [r7, r6]
    16c6:	1ae3      	subs	r3, r4, r3
    16c8:	881a      	ldrh	r2, [r3, #0]
    16ca:	2a06      	cmp	r2, #6
    16cc:	dd2c      	ble.n	1728 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x100>
      return kTfLiteOk;
    16ce:	88db      	ldrh	r3, [r3, #6]
  return kTfLiteError;
#else
  return ParseOpDataTfLite(op, op_type, error_reporter, allocator,
                           builtin_data);
#endif
}
    16d0:	b353      	cbz	r3, 1728 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x100>
    16d2:	56e3      	ldrsb	r3, [r4, r3]
    16d4:	b343      	cbz	r3, 1728 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x100>
    16d6:	2b01      	cmp	r3, #1
    void operator()(void* data) { allocator_->Deallocate(data); }
    16d8:	d02c      	beq.n	1734 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10c>
    16da:	491a      	ldr	r1, [pc, #104]	; (1744 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>)
    16dc:	4648      	mov	r0, r9
    16de:	4b1a      	ldr	r3, [pc, #104]	; (1748 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>)
    16e0:	4798      	blx	r3
    16e2:	f8d8 3000 	ldr.w	r3, [r8]
    16e6:	685b      	ldr	r3, [r3, #4]
    16e8:	4629      	mov	r1, r5
    16ea:	4640      	mov	r0, r8
    16ec:	4798      	blx	r3
                           builtin_data);
    16ee:	2001      	movs	r0, #1
    16f0:	b002      	add	sp, #8
    16f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    16f6:	4b15      	ldr	r3, [pc, #84]	; (174c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>)
    16f8:	9301      	str	r3, [sp, #4]
    16fa:	f240 4352 	movw	r3, #1106	; 0x452
    16fe:	9300      	str	r3, [sp, #0]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    1700:	4b13      	ldr	r3, [pc, #76]	; (1750 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x128>)
    1702:	4a14      	ldr	r2, [pc, #80]	; (1754 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
    1704:	4649      	mov	r1, r9
    1706:	4648      	mov	r0, r9
    1708:	4c13      	ldr	r4, [pc, #76]	; (1758 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
    170a:	47a0      	blx	r4
    170c:	2001      	movs	r0, #1
    170e:	e7ef      	b.n	16f0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
    1710:	2000      	movs	r0, #0
    1712:	e7b9      	b.n	1688 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
    1714:	2000      	movs	r0, #0
    1716:	e7b7      	b.n	1688 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
    1718:	2300      	movs	r3, #0
    171a:	e7c2      	b.n	16a2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7a>
    171c:	2300      	movs	r3, #0
    171e:	e7c0      	b.n	16a2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7a>
    1720:	2300      	movs	r3, #0
    1722:	e7cb      	b.n	16bc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>
    1724:	2300      	movs	r3, #0
    1726:	e7c9      	b.n	16bc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
    1728:	2300      	movs	r3, #0
    172a:	706b      	strb	r3, [r5, #1]
  *builtin_data = params.release();
    172c:	f8ca 5000 	str.w	r5, [sl]
  return kTfLiteOk;
    1730:	2000      	movs	r0, #0
    1732:	e7dd      	b.n	16f0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
        params->weights_format =
    1734:	2301      	movs	r3, #1
    1736:	706b      	strb	r3, [r5, #1]
        break;
    1738:	e7f8      	b.n	172c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    173a:	bf00      	nop
    173c:	000012d9 	.word	0x000012d9
    1740:	000012a1 	.word	0x000012a1
    1744:	00021330 	.word	0x00021330
    1748:	00001265 	.word	0x00001265
    174c:	0002131c 	.word	0x0002131c
    1750:	000212cc 	.word	0x000212cc
    1754:	00021304 	.word	0x00021304
    1758:	00001283 	.word	0x00001283

0000175c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                       BuiltinDataAllocator* allocator, void** builtin_data) {
    175c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1760:	b082      	sub	sp, #8
    1762:	4604      	mov	r4, r0
    1764:	460f      	mov	r7, r1
    1766:	4615      	mov	r5, r2
    1768:	4698      	mov	r8, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    176a:	4e45      	ldr	r6, [pc, #276]	; (1880 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>)
    176c:	47b0      	blx	r6
    176e:	682b      	ldr	r3, [r5, #0]
    1770:	681b      	ldr	r3, [r3, #0]
    1772:	2204      	movs	r2, #4
    1774:	2128      	movs	r1, #40	; 0x28
    1776:	4628      	mov	r0, r5
    1778:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    177a:	2800      	cmp	r0, #0
    177c:	d05b      	beq.n	1836 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xda>
    177e:	4606      	mov	r6, r0
    return data_ - ReadScalar<soffset_t>(data_);
    1780:	6823      	ldr	r3, [r4, #0]
    1782:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1784:	881a      	ldrh	r2, [r3, #0]
    1786:	2a0a      	cmp	r2, #10
    1788:	dd4f      	ble.n	182a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    178a:	8959      	ldrh	r1, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    178c:	2900      	cmp	r1, #0
    178e:	d04c      	beq.n	182a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
    1790:	5c61      	ldrb	r1, [r4, r1]
    1792:	2905      	cmp	r1, #5
    1794:	d149      	bne.n	182a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1796:	2a0c      	cmp	r2, #12
    1798:	dd47      	ble.n	182a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    179a:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
    179c:	18e7      	adds	r7, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    179e:	2b00      	cmp	r3, #0
    17a0:	d043      	beq.n	182a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    17a2:	58e5      	ldr	r5, [r4, r3]
  if (schema_params != nullptr) {
    17a4:	197c      	adds	r4, r7, r5
    17a6:	d040      	beq.n	182a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    return data_ - ReadScalar<soffset_t>(data_);
    17a8:	597b      	ldr	r3, [r7, r5]
    17aa:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    17ac:	881a      	ldrh	r2, [r3, #0]
    17ae:	2a04      	cmp	r2, #4
    17b0:	dd4e      	ble.n	1850 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>
    17b2:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    17b4:	2b00      	cmp	r3, #0
    17b6:	d04d      	beq.n	1854 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
    17b8:	56e0      	ldrsb	r0, [r4, r3]
    params->padding = ConvertPadding(schema_params->padding());
    17ba:	b2c0      	uxtb	r0, r0
    17bc:	4b31      	ldr	r3, [pc, #196]	; (1884 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x128>)
    17be:	4798      	blx	r3
    17c0:	7030      	strb	r0, [r6, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    17c2:	597b      	ldr	r3, [r7, r5]
    17c4:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    17c6:	881a      	ldrh	r2, [r3, #0]
    17c8:	2a06      	cmp	r2, #6
    17ca:	dd45      	ble.n	1858 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfc>
    17cc:	88db      	ldrh	r3, [r3, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    17ce:	2b00      	cmp	r3, #0
    17d0:	d044      	beq.n	185c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x100>
    17d2:	58e3      	ldr	r3, [r4, r3]
    params->stride_width = schema_params->stride_w();
    17d4:	6073      	str	r3, [r6, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    17d6:	597b      	ldr	r3, [r7, r5]
    17d8:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    17da:	881a      	ldrh	r2, [r3, #0]
    17dc:	2a08      	cmp	r2, #8
    17de:	dd3f      	ble.n	1860 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    17e0:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    17e2:	2b00      	cmp	r3, #0
    17e4:	d03e      	beq.n	1864 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x108>
    17e6:	58e3      	ldr	r3, [r4, r3]
    params->stride_height = schema_params->stride_h();
    17e8:	60b3      	str	r3, [r6, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    17ea:	597b      	ldr	r3, [r7, r5]
    17ec:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    17ee:	881a      	ldrh	r2, [r3, #0]
    17f0:	2a0a      	cmp	r2, #10
    17f2:	dd39      	ble.n	1868 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10c>
    17f4:	895b      	ldrh	r3, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    17f6:	2b00      	cmp	r3, #0
    17f8:	d038      	beq.n	186c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x110>
    17fa:	58e3      	ldr	r3, [r4, r3]
    params->filter_width = schema_params->filter_width();
    17fc:	60f3      	str	r3, [r6, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    17fe:	597b      	ldr	r3, [r7, r5]
    1800:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1802:	881a      	ldrh	r2, [r3, #0]
    1804:	2a0c      	cmp	r2, #12
    1806:	dd33      	ble.n	1870 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x114>
    1808:	899b      	ldrh	r3, [r3, #12]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    180a:	2b00      	cmp	r3, #0
    180c:	d032      	beq.n	1874 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>
    180e:	58e3      	ldr	r3, [r4, r3]
    params->filter_height = schema_params->filter_height();
    1810:	6133      	str	r3, [r6, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    1812:	597b      	ldr	r3, [r7, r5]
    1814:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1816:	881a      	ldrh	r2, [r3, #0]
    1818:	2a0e      	cmp	r2, #14
    181a:	dd2d      	ble.n	1878 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>
    181c:	89db      	ldrh	r3, [r3, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    181e:	b36b      	cbz	r3, 187c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>
    1820:	56e0      	ldrsb	r0, [r4, r3]
        ConvertActivation(schema_params->fused_activation_function());
    1822:	b2c0      	uxtb	r0, r0
    1824:	4b18      	ldr	r3, [pc, #96]	; (1888 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
    1826:	4798      	blx	r3
    params->activation =
    1828:	7530      	strb	r0, [r6, #20]
  *builtin_data = params.release();
    182a:	f8c8 6000 	str.w	r6, [r8]
  return kTfLiteOk;
    182e:	2000      	movs	r0, #0
}
    1830:	b002      	add	sp, #8
    1832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    1836:	4b15      	ldr	r3, [pc, #84]	; (188c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
    1838:	9301      	str	r3, [sp, #4]
    183a:	f240 5349 	movw	r3, #1353	; 0x549
    183e:	9300      	str	r3, [sp, #0]
    1840:	4b13      	ldr	r3, [pc, #76]	; (1890 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
    1842:	4a14      	ldr	r2, [pc, #80]	; (1894 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
    1844:	4639      	mov	r1, r7
    1846:	4638      	mov	r0, r7
    1848:	4c13      	ldr	r4, [pc, #76]	; (1898 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
    184a:	47a0      	blx	r4
    184c:	2001      	movs	r0, #1
    184e:	e7ef      	b.n	1830 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
    1850:	2000      	movs	r0, #0
    1852:	e7b2      	b.n	17ba <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
    1854:	2000      	movs	r0, #0
    1856:	e7b0      	b.n	17ba <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
    1858:	2300      	movs	r3, #0
    185a:	e7bb      	b.n	17d4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>
    185c:	2300      	movs	r3, #0
    185e:	e7b9      	b.n	17d4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>
    1860:	2300      	movs	r3, #0
    1862:	e7c1      	b.n	17e8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    1864:	2300      	movs	r3, #0
    1866:	e7bf      	b.n	17e8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    1868:	2300      	movs	r3, #0
    186a:	e7c7      	b.n	17fc <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    186c:	2300      	movs	r3, #0
    186e:	e7c5      	b.n	17fc <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    1870:	2300      	movs	r3, #0
    1872:	e7cd      	b.n	1810 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb4>
    1874:	2300      	movs	r3, #0
    1876:	e7cb      	b.n	1810 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb4>
    1878:	2000      	movs	r0, #0
    187a:	e7d2      	b.n	1822 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    187c:	2000      	movs	r0, #0
    187e:	e7d0      	b.n	1822 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    1880:	000012d9 	.word	0x000012d9
    1884:	000012c9 	.word	0x000012c9
    1888:	000012a1 	.word	0x000012a1
    188c:	0002131c 	.word	0x0002131c
    1890:	000212cc 	.word	0x000212cc
    1894:	00021304 	.word	0x00021304
    1898:	00001283 	.word	0x00001283

0000189c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                          void** builtin_data) {
    189c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    18a0:	b082      	sub	sp, #8
    18a2:	4604      	mov	r4, r0
    18a4:	4688      	mov	r8, r1
    18a6:	4615      	mov	r5, r2
    18a8:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    18aa:	4f1d      	ldr	r7, [pc, #116]	; (1920 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>)
    18ac:	47b8      	blx	r7
    18ae:	682b      	ldr	r3, [r5, #0]
    18b0:	681b      	ldr	r3, [r3, #0]
    18b2:	2204      	movs	r2, #4
    18b4:	4611      	mov	r1, r2
    18b6:	4628      	mov	r0, r5
    18b8:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    18ba:	b300      	cbz	r0, 18fe <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x62>
    18bc:	4602      	mov	r2, r0
    return data_ - ReadScalar<soffset_t>(data_);
    18be:	6823      	ldr	r3, [r4, #0]
    18c0:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    18c2:	8819      	ldrh	r1, [r3, #0]
    18c4:	290a      	cmp	r1, #10
    18c6:	dd15      	ble.n	18f4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    18c8:	8958      	ldrh	r0, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    18ca:	b198      	cbz	r0, 18f4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
    18cc:	5c20      	ldrb	r0, [r4, r0]
    18ce:	2809      	cmp	r0, #9
    18d0:	d110      	bne.n	18f4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    18d2:	290c      	cmp	r1, #12
    18d4:	dd0e      	ble.n	18f4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    18d6:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
    18d8:	18e1      	adds	r1, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    18da:	b15b      	cbz	r3, 18f4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    18dc:	58e3      	ldr	r3, [r4, r3]
  if (schema_params != nullptr) {
    18de:	18c8      	adds	r0, r1, r3
    18e0:	d008      	beq.n	18f4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    return data_ - ReadScalar<soffset_t>(data_);
    18e2:	58cb      	ldr	r3, [r1, r3]
    18e4:	1ac3      	subs	r3, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    18e6:	8819      	ldrh	r1, [r3, #0]
    18e8:	2904      	cmp	r1, #4
    18ea:	dd15      	ble.n	1918 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7c>
    18ec:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    18ee:	b1ab      	cbz	r3, 191c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x80>
    18f0:	58c3      	ldr	r3, [r0, r3]
    params->beta = schema_params->beta();
    18f2:	6013      	str	r3, [r2, #0]
  *builtin_data = params.release();
    18f4:	6032      	str	r2, [r6, #0]
  return kTfLiteOk;
    18f6:	2000      	movs	r0, #0
}
    18f8:	b002      	add	sp, #8
    18fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    18fe:	4b09      	ldr	r3, [pc, #36]	; (1924 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>)
    1900:	9301      	str	r3, [sp, #4]
    1902:	f240 53fd 	movw	r3, #1533	; 0x5fd
    1906:	9300      	str	r3, [sp, #0]
    1908:	4b07      	ldr	r3, [pc, #28]	; (1928 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>)
    190a:	4a08      	ldr	r2, [pc, #32]	; (192c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>)
    190c:	4641      	mov	r1, r8
    190e:	4640      	mov	r0, r8
    1910:	4c07      	ldr	r4, [pc, #28]	; (1930 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>)
    1912:	47a0      	blx	r4
    1914:	2001      	movs	r0, #1
    1916:	e7ef      	b.n	18f8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>
    1918:	2300      	movs	r3, #0
    191a:	e7ea      	b.n	18f2 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x56>
    191c:	2300      	movs	r3, #0
    191e:	e7e8      	b.n	18f2 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x56>
    1920:	000012d9 	.word	0x000012d9
    1924:	0002131c 	.word	0x0002131c
    1928:	000212cc 	.word	0x000212cc
    192c:	00021304 	.word	0x00021304
    1930:	00001283 	.word	0x00001283

00001934 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
    1934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1938:	460e      	mov	r6, r1
    193a:	4617      	mov	r7, r2
    193c:	461d      	mov	r5, r3
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
    193e:	2300      	movs	r3, #0
    1940:	602b      	str	r3, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    1942:	6803      	ldr	r3, [r0, #0]
    1944:	1ac3      	subs	r3, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1946:	881a      	ldrh	r2, [r3, #0]
    1948:	2a04      	cmp	r2, #4
    194a:	dd41      	ble.n	19d0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9c>
    194c:	8899      	ldrh	r1, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    194e:	2900      	cmp	r1, #0
    1950:	d03e      	beq.n	19d0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9c>
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
    1952:	5c44      	ldrb	r4, [r0, r1]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1954:	2a08      	cmp	r2, #8
    1956:	dd1b      	ble.n	1990 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5c>
    1958:	8919      	ldrh	r1, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    195a:	b1e1      	cbz	r1, 1996 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x62>
    195c:	f850 8001 	ldr.w	r8, [r0, r1]
  auto builtin_code = opcode->builtin_code();
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX ||
    1960:	2c7e      	cmp	r4, #126	; 0x7e
    1962:	dc1b      	bgt.n	199c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x68>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
    1964:	2c20      	cmp	r4, #32
    1966:	d13a      	bne.n	19de <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xaa>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1968:	2a06      	cmp	r2, #6
    196a:	dd2a      	ble.n	19c2 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x8e>
    196c:	88db      	ldrh	r3, [r3, #6]
    auto p = data_ + field_offset;
    196e:	18c1      	adds	r1, r0, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    1970:	b33b      	cbz	r3, 19c2 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x8e>
    1972:	58c3      	ldr	r3, [r0, r3]
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
    }
  } else if (!opcode->custom_code()) {
    1974:	18c9      	adds	r1, r1, r3
    1976:	d024      	beq.n	19c2 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x8e>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
  } else {
    const char* name = opcode->custom_code()->c_str();
    *registration = op_resolver.FindOp(name, version);
    1978:	6833      	ldr	r3, [r6, #0]
    197a:	685b      	ldr	r3, [r3, #4]
    197c:	4642      	mov	r2, r8
    197e:	3104      	adds	r1, #4
    1980:	4630      	mov	r0, r6
    1982:	4798      	blx	r3
    1984:	6028      	str	r0, [r5, #0]
    status = kTfLiteError;
    1986:	fab0 f080 	clz	r0, r0
    198a:	0940      	lsrs	r0, r0, #5
    198c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1990:	f04f 0801 	mov.w	r8, #1
    1994:	e7e4      	b.n	1960 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x2c>
    1996:	f04f 0801 	mov.w	r8, #1
    199a:	e7e1      	b.n	1960 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x2c>
    TF_LITE_REPORT_ERROR(
    199c:	4622      	mov	r2, r4
    199e:	4916      	ldr	r1, [pc, #88]	; (19f8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc4>)
    19a0:	4638      	mov	r0, r7
    19a2:	4b16      	ldr	r3, [pc, #88]	; (19fc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc8>)
    19a4:	4798      	blx	r3
    status = kTfLiteError;
    19a6:	2001      	movs	r0, #1
    19a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      TF_LITE_REPORT_ERROR(
    19ac:	4643      	mov	r3, r8
    19ae:	4a14      	ldr	r2, [pc, #80]	; (1a00 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xcc>)
    19b0:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    19b4:	4913      	ldr	r1, [pc, #76]	; (1a04 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd0>)
    19b6:	4638      	mov	r0, r7
    19b8:	4c10      	ldr	r4, [pc, #64]	; (19fc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc8>)
    19ba:	47a0      	blx	r4
      status = kTfLiteError;
    19bc:	2001      	movs	r0, #1
    19be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TF_LITE_REPORT_ERROR(
    19c2:	4911      	ldr	r1, [pc, #68]	; (1a08 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>)
    19c4:	4638      	mov	r0, r7
    19c6:	4b0d      	ldr	r3, [pc, #52]	; (19fc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc8>)
    19c8:	4798      	blx	r3
    status = kTfLiteError;
    19ca:	2001      	movs	r0, #1
    19cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    19d0:	2a08      	cmp	r2, #8
    19d2:	dd01      	ble.n	19d8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa4>
    19d4:	2400      	movs	r4, #0
    19d6:	e7bf      	b.n	1958 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x24>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    19d8:	f04f 0801 	mov.w	r8, #1
    19dc:	2400      	movs	r4, #0
    *registration = op_resolver.FindOp(builtin_code, version);
    19de:	6833      	ldr	r3, [r6, #0]
    19e0:	681b      	ldr	r3, [r3, #0]
    19e2:	4642      	mov	r2, r8
    19e4:	4621      	mov	r1, r4
    19e6:	4630      	mov	r0, r6
    19e8:	4798      	blx	r3
    19ea:	6028      	str	r0, [r5, #0]
    if (*registration == nullptr) {
    19ec:	2800      	cmp	r0, #0
    19ee:	d0dd      	beq.n	19ac <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x78>
  TfLiteStatus status = kTfLiteOk;
    19f0:	2000      	movs	r0, #0
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
    19f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    19f6:	bf00      	nop
    19f8:	000215d8 	.word	0x000215d8
    19fc:	00001265 	.word	0x00001265
    1a00:	000213d8 	.word	0x000213d8
    1a04:	0002162c 	.word	0x0002162c
    1a08:	00021664 	.word	0x00021664

00001a0c <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>:
#include "tensorflow_c_files/common.h"

namespace tflite {

TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
  if (!tensor->is_variable) {
    1a0c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    1a10:	b193      	cbz	r3, 1a38 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x2c>
TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
    1a12:	b430      	push	{r4, r5}
    return kTfLiteOk;
  }
  // TODO(b/115961645): Implement - If a variable tensor has a buffer, reset it
  // to the value of the buffer.
  int value = 0;
  if (tensor->type == kTfLiteInt8) {
    1a14:	7803      	ldrb	r3, [r0, #0]
    1a16:	2b09      	cmp	r3, #9
    value = tensor->params.zero_point;
    1a18:	bf0c      	ite	eq
    1a1a:	6905      	ldreq	r5, [r0, #16]
  int value = 0;
    1a1c:	2500      	movne	r5, #0
#if __ANDROID__ || defined(__x86_64__) || defined(__i386__) || \
    defined(__i386) || defined(__x86__) || defined(__X86__) || \
    defined(_X86_) || defined(_M_IX86) || defined(_M_X64)
  memset(tensor->data.raw, value, tensor->bytes);
#else
  char* raw_ptr = tensor->data.raw;
    1a1e:	6844      	ldr	r4, [r0, #4]
  for (size_t i = 0; i < tensor->bytes; ++i) {
    1a20:	6983      	ldr	r3, [r0, #24]
    1a22:	b133      	cbz	r3, 1a32 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x26>
    1a24:	4623      	mov	r3, r4
    *raw_ptr = value;
    1a26:	f803 5b01 	strb.w	r5, [r3], #1
  for (size_t i = 0; i < tensor->bytes; ++i) {
    1a2a:	1b1a      	subs	r2, r3, r4
    1a2c:	6981      	ldr	r1, [r0, #24]
    1a2e:	4291      	cmp	r1, r2
    1a30:	d8f9      	bhi.n	1a26 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x1a>
    raw_ptr++;
  }
#endif
  return kTfLiteOk;
}
    1a32:	2000      	movs	r0, #0
    1a34:	bc30      	pop	{r4, r5}
    1a36:	4770      	bx	lr
    1a38:	2000      	movs	r0, #0
    1a3a:	4770      	bx	lr

00001a3c <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
    1a3c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    1a40:	4680      	mov	r8, r0
    1a42:	4689      	mov	r9, r1
    1a44:	4616      	mov	r6, r2
    1a46:	461c      	mov	r4, r3
  if (double_multiplier == 0.) {
    1a48:	2200      	movs	r2, #0
    1a4a:	2300      	movs	r3, #0
    1a4c:	4d1c      	ldr	r5, [pc, #112]	; (1ac0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x84>)
    1a4e:	47a8      	blx	r5
    1a50:	b120      	cbz	r0, 1a5c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x20>
    *quantized_multiplier = 0;
    1a52:	2300      	movs	r3, #0
    1a54:	6033      	str	r3, [r6, #0]
    *shift = 0;
    1a56:	6023      	str	r3, [r4, #0]
    1a58:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
    1a5c:	4622      	mov	r2, r4
    1a5e:	4640      	mov	r0, r8
    1a60:	4649      	mov	r1, r9
    1a62:	4b18      	ldr	r3, [pc, #96]	; (1ac4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x88>)
    1a64:	4798      	blx	r3
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    1a66:	2200      	movs	r2, #0
    1a68:	4b17      	ldr	r3, [pc, #92]	; (1ac8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8c>)
    1a6a:	4d18      	ldr	r5, [pc, #96]	; (1acc <_ZN6tflite18QuantizeMultiplierEdPlPi+0x90>)
    1a6c:	47a8      	blx	r5
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
    1a6e:	4b18      	ldr	r3, [pc, #96]	; (1ad0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x94>)
    1a70:	4798      	blx	r3
    1a72:	4b18      	ldr	r3, [pc, #96]	; (1ad4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x98>)
    1a74:	4798      	blx	r3
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    1a76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1a7a:	2300      	movs	r3, #0
    1a7c:	4282      	cmp	r2, r0
    1a7e:	418b      	sbcs	r3, r1
    1a80:	db13      	blt.n	1aaa <_ZN6tflite18QuantizeMultiplierEdPlPi+0x6e>
  if (q_fixed == (1ll << 31)) {
    1a82:	2900      	cmp	r1, #0
    1a84:	bf08      	it	eq
    1a86:	f1b0 4f00 	cmpeq.w	r0, #2147483648	; 0x80000000
    1a8a:	d010      	beq.n	1aae <_ZN6tflite18QuantizeMultiplierEdPlPi+0x72>
    q_fixed /= 2;
    ++*shift;
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
    1a8c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    1a90:	f171 0300 	sbcs.w	r3, r1, #0
    1a94:	da11      	bge.n	1aba <_ZN6tflite18QuantizeMultiplierEdPlPi+0x7e>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
    1a96:	6823      	ldr	r3, [r4, #0]
    1a98:	f113 0f1f 	cmn.w	r3, #31
    1a9c:	da02      	bge.n	1aa4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x68>
    *shift = 0;
    1a9e:	2300      	movs	r3, #0
    1aa0:	6023      	str	r3, [r4, #0]
    q_fixed = 0;
    1aa2:	2000      	movs	r0, #0
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
    1aa4:	6030      	str	r0, [r6, #0]
    1aa6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    1aaa:	4b0b      	ldr	r3, [pc, #44]	; (1ad8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x9c>)
    1aac:	4798      	blx	r3
    ++*shift;
    1aae:	6823      	ldr	r3, [r4, #0]
    1ab0:	3301      	adds	r3, #1
    1ab2:	6023      	str	r3, [r4, #0]
    q_fixed /= 2;
    1ab4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    1ab8:	e7ed      	b.n	1a96 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x5a>
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
    1aba:	4b07      	ldr	r3, [pc, #28]	; (1ad8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x9c>)
    1abc:	4798      	blx	r3
    1abe:	bf00      	nop
    1ac0:	00013131 	.word	0x00013131
    1ac4:	000124b1 	.word	0x000124b1
    1ac8:	41e00000 	.word	0x41e00000
    1acc:	00012c61 	.word	0x00012c61
    1ad0:	00012515 	.word	0x00012515
    1ad4:	000138e9 	.word	0x000138e9
    1ad8:	00014b3d 	.word	0x00014b3d

00001adc <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:
}

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
    1adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ae0:	4606      	mov	r6, r0
    1ae2:	460f      	mov	r7, r1
    1ae4:	4690      	mov	r8, r2
    1ae6:	461c      	mov	r4, r3
  TFLITE_CHECK_GT(double_multiplier, 1.);
    1ae8:	2200      	movs	r2, #0
    1aea:	4b09      	ldr	r3, [pc, #36]	; (1b10 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x34>)
    1aec:	4d09      	ldr	r5, [pc, #36]	; (1b14 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x38>)
    1aee:	47a8      	blx	r5
    1af0:	b150      	cbz	r0, 1b08 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x2c>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
    1af2:	4623      	mov	r3, r4
    1af4:	4642      	mov	r2, r8
    1af6:	4630      	mov	r0, r6
    1af8:	4639      	mov	r1, r7
    1afa:	4d07      	ldr	r5, [pc, #28]	; (1b18 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3c>)
    1afc:	47a8      	blx	r5
  TFLITE_CHECK_GE(*left_shift, 0);
    1afe:	6823      	ldr	r3, [r4, #0]
    1b00:	2b00      	cmp	r3, #0
    1b02:	db03      	blt.n	1b0c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x30>
    1b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_CHECK_GT(double_multiplier, 1.);
    1b08:	4b04      	ldr	r3, [pc, #16]	; (1b1c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x40>)
    1b0a:	4798      	blx	r3
  TFLITE_CHECK_GE(*left_shift, 0);
    1b0c:	4b03      	ldr	r3, [pc, #12]	; (1b1c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x40>)
    1b0e:	4798      	blx	r3
    1b10:	3ff00000 	.word	0x3ff00000
    1b14:	00013181 	.word	0x00013181
    1b18:	00001a3d 	.word	0x00001a3d
    1b1c:	00014b3d 	.word	0x00014b3d

00001b20 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
    1b20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b24:	4682      	mov	sl, r0
    1b26:	468b      	mov	fp, r1
    1b28:	4616      	mov	r6, r2
    1b2a:	461f      	mov	r7, r3
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    1b2c:	980a      	ldr	r0, [sp, #40]	; 0x28
    1b2e:	f1c0 001f 	rsb	r0, r0, #31
    1b32:	2301      	movs	r3, #1
    1b34:	fa03 f000 	lsl.w	r0, r3, r0
    1b38:	4b13      	ldr	r3, [pc, #76]	; (1b88 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x68>)
    1b3a:	4798      	blx	r3
    1b3c:	4680      	mov	r8, r0
    1b3e:	4689      	mov	r9, r1
    1b40:	4c12      	ldr	r4, [pc, #72]	; (1b8c <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x6c>)
    1b42:	4632      	mov	r2, r6
    1b44:	463b      	mov	r3, r7
    1b46:	4650      	mov	r0, sl
    1b48:	4659      	mov	r1, fp
    1b4a:	47a0      	blx	r4
    1b4c:	4602      	mov	r2, r0
    1b4e:	460b      	mov	r3, r1
    1b50:	4640      	mov	r0, r8
    1b52:	4649      	mov	r1, r9
    1b54:	47a0      	blx	r4
    1b56:	4604      	mov	r4, r0
    1b58:	460d      	mov	r5, r1
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    1b5a:	a309      	add	r3, pc, #36	; (adr r3, 1b80 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x60>)
    1b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b60:	4e0b      	ldr	r6, [pc, #44]	; (1b90 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x70>)
    1b62:	47b0      	blx	r6
    1b64:	b938      	cbnz	r0, 1b76 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x56>
	return __b;
      return __a;
    1b66:	4620      	mov	r0, r4
    1b68:	4629      	mov	r1, r5
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
                                   quantized_multiplier, left_shift);
    1b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1b6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1b6e:	4c09      	ldr	r4, [pc, #36]	; (1b94 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x74>)
    1b70:	47a0      	blx	r4
    1b72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return __b;
    1b76:	a102      	add	r1, pc, #8	; (adr r1, 1b80 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x60>)
    1b78:	e9d1 0100 	ldrd	r0, r1, [r1]
    1b7c:	e7f5      	b.n	1b6a <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x4a>
    1b7e:	bf00      	nop
    1b80:	ffc00000 	.word	0xffc00000
    1b84:	41dfffff 	.word	0x41dfffff
    1b88:	00012b95 	.word	0x00012b95
    1b8c:	00012c61 	.word	0x00012c61
    1b90:	00013181 	.word	0x00013181
    1b94:	00001add 	.word	0x00001add

00001b98 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
    1b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1b9c:	4681      	mov	r9, r0
    1b9e:	4688      	mov	r8, r1
    1ba0:	4615      	mov	r5, r2
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
    1ba2:	2401      	movs	r4, #1
    1ba4:	fa04 f000 	lsl.w	r0, r4, r0
    1ba8:	3801      	subs	r0, #1
    1baa:	4b19      	ldr	r3, [pc, #100]	; (1c10 <_ZN6tflite20CalculateInputRadiusEiii+0x78>)
    1bac:	4798      	blx	r3
    1bae:	4606      	mov	r6, r0
    1bb0:	460f      	mov	r7, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
    1bb2:	eba5 0009 	sub.w	r0, r5, r9
    1bb6:	f1a0 0120 	sub.w	r1, r0, #32
    1bba:	f1c0 0320 	rsb	r3, r0, #32
    1bbe:	fa04 f101 	lsl.w	r1, r4, r1
    1bc2:	fa24 f303 	lsr.w	r3, r4, r3
      1.0 * ((1 << input_integer_bits) - 1) *
    1bc6:	4d13      	ldr	r5, [pc, #76]	; (1c14 <_ZN6tflite20CalculateInputRadiusEiii+0x7c>)
    1bc8:	fa04 f000 	lsl.w	r0, r4, r0
    1bcc:	4319      	orrs	r1, r3
    1bce:	47a8      	blx	r5
    1bd0:	4602      	mov	r2, r0
    1bd2:	460b      	mov	r3, r1
    1bd4:	4630      	mov	r0, r6
    1bd6:	4639      	mov	r1, r7
    1bd8:	4e0f      	ldr	r6, [pc, #60]	; (1c18 <_ZN6tflite20CalculateInputRadiusEiii+0x80>)
    1bda:	47b0      	blx	r6
    1bdc:	4606      	mov	r6, r0
    1bde:	460f      	mov	r7, r1
      (1ll << input_left_shift);
    1be0:	f1a8 0120 	sub.w	r1, r8, #32
    1be4:	f1c8 0320 	rsb	r3, r8, #32
    1be8:	fa04 f101 	lsl.w	r1, r4, r1
    1bec:	fa24 f303 	lsr.w	r3, r4, r3
      (1ll << (total_signed_bits - input_integer_bits)) /
    1bf0:	fa04 f008 	lsl.w	r0, r4, r8
    1bf4:	4319      	orrs	r1, r3
    1bf6:	47a8      	blx	r5
      (1ll << input_left_shift);
    1bf8:	4602      	mov	r2, r0
    1bfa:	460b      	mov	r3, r1
    1bfc:	4630      	mov	r0, r6
    1bfe:	4639      	mov	r1, r7
    1c00:	4c06      	ldr	r4, [pc, #24]	; (1c1c <_ZN6tflite20CalculateInputRadiusEiii+0x84>)
    1c02:	47a0      	blx	r4
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
    1c04:	4b06      	ldr	r3, [pc, #24]	; (1c20 <_ZN6tflite20CalculateInputRadiusEiii+0x88>)
    1c06:	4798      	blx	r3
    1c08:	4b06      	ldr	r3, [pc, #24]	; (1c24 <_ZN6tflite20CalculateInputRadiusEiii+0x8c>)
    1c0a:	4798      	blx	r3
#endif  // TFLITE_EMULATE_FLOAT
}
    1c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1c10:	00012b95 	.word	0x00012b95
    1c14:	00012c05 	.word	0x00012c05
    1c18:	00012c61 	.word	0x00012c61
    1c1c:	00012eb5 	.word	0x00012eb5
    1c20:	00012399 	.word	0x00012399
    1c24:	00013195 	.word	0x00013195

00001c28 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
    1c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c2c:	b082      	sub	sp, #8
    1c2e:	4680      	mov	r8, r0
    1c30:	4608      	mov	r0, r1
    1c32:	461d      	mov	r5, r3
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
    1c34:	68d1      	ldr	r1, [r2, #12]
    1c36:	68c0      	ldr	r0, [r0, #12]
    1c38:	4b13      	ldr	r3, [pc, #76]	; (1c88 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
    1c3a:	4798      	blx	r3
    1c3c:	4604      	mov	r4, r0
    1c3e:	4b13      	ldr	r3, [pc, #76]	; (1c8c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x64>)
    1c40:	4798      	blx	r3
    1c42:	4606      	mov	r6, r0
    1c44:	460f      	mov	r7, r1
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    1c46:	2100      	movs	r1, #0
    1c48:	4620      	mov	r0, r4
    1c4a:	4b11      	ldr	r3, [pc, #68]	; (1c90 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x68>)
    1c4c:	4798      	blx	r3
    1c4e:	b178      	cbz	r0, 1c70 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x48>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
    1c50:	68e8      	ldr	r0, [r5, #12]
    1c52:	4b0e      	ldr	r3, [pc, #56]	; (1c8c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x64>)
    1c54:	4798      	blx	r3
    1c56:	4602      	mov	r2, r0
    1c58:	460b      	mov	r3, r1
    1c5a:	4630      	mov	r0, r6
    1c5c:	4639      	mov	r1, r7
    1c5e:	4c0d      	ldr	r4, [pc, #52]	; (1c94 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x6c>)
    1c60:	47a0      	blx	r4
    1c62:	9b08      	ldr	r3, [sp, #32]
    1c64:	e9c3 0100 	strd	r0, r1, [r3]

  return kTfLiteOk;
    1c68:	2000      	movs	r0, #0
}
    1c6a:	b002      	add	sp, #8
    1c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    1c70:	4b09      	ldr	r3, [pc, #36]	; (1c98 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>)
    1c72:	9300      	str	r3, [sp, #0]
    1c74:	f8d8 4014 	ldr.w	r4, [r8, #20]
    1c78:	23a7      	movs	r3, #167	; 0xa7
    1c7a:	4a08      	ldr	r2, [pc, #32]	; (1c9c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x74>)
    1c7c:	4908      	ldr	r1, [pc, #32]	; (1ca0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x78>)
    1c7e:	4640      	mov	r0, r8
    1c80:	47a0      	blx	r4
    1c82:	2001      	movs	r0, #1
    1c84:	e7f1      	b.n	1c6a <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x42>
    1c86:	bf00      	nop
    1c88:	000134e1 	.word	0x000134e1
    1c8c:	00012bb9 	.word	0x00012bb9
    1c90:	00013845 	.word	0x00013845
    1c94:	00012eb5 	.word	0x00012eb5
    1c98:	00021c60 	.word	0x00021c60
    1c9c:	00021c34 	.word	0x00021c34
    1ca0:	00021304 	.word	0x00021304
    1ca4:	00000000 	.word	0x00000000

00001ca8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
                                              double* multiplier) {
    1ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1cac:	b082      	sub	sp, #8
    1cae:	4682      	mov	sl, r0
    1cb0:	460d      	mov	r5, r1
    1cb2:	4617      	mov	r7, r2
    1cb4:	461c      	mov	r4, r3
  const double input_product_scale = static_cast<double>(input->params.scale) *
    1cb6:	4e22      	ldr	r6, [pc, #136]	; (1d40 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
    1cb8:	68c8      	ldr	r0, [r1, #12]
    1cba:	47b0      	blx	r6
    1cbc:	4680      	mov	r8, r0
    1cbe:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
    1cc0:	68f8      	ldr	r0, [r7, #12]
    1cc2:	47b0      	blx	r6
    1cc4:	4602      	mov	r2, r0
    1cc6:	460b      	mov	r3, r1
    1cc8:	4640      	mov	r0, r8
    1cca:	4649      	mov	r1, r9
    1ccc:	4e1d      	ldr	r6, [pc, #116]	; (1d44 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x9c>)
    1cce:	47b0      	blx	r6
  if (bias) {
    1cd0:	b1e4      	cbz	r4, 1d0c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x64>
    1cd2:	4680      	mov	r8, r0
    1cd4:	4689      	mov	r9, r1
    const double bias_scale = static_cast<double>(bias->params.scale);
    1cd6:	4e1a      	ldr	r6, [pc, #104]	; (1d40 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
    1cd8:	68e0      	ldr	r0, [r4, #12]
    1cda:	47b0      	blx	r6
    const double scale_diff = std::abs(input_product_scale - bias_scale);
    1cdc:	4602      	mov	r2, r0
    1cde:	460b      	mov	r3, r1
    1ce0:	4640      	mov	r0, r8
    1ce2:	4649      	mov	r1, r9
    1ce4:	4c18      	ldr	r4, [pc, #96]	; (1d48 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
    1ce6:	47a0      	blx	r4
    1ce8:	4680      	mov	r8, r0
_GLIBCXX_BEGIN_NAMESPACE_VERSION

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    1cea:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    const double output_scale = static_cast<double>(output->params.scale);
    1cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1cf0:	68d8      	ldr	r0, [r3, #12]
    1cf2:	47b0      	blx	r6
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    1cf4:	4602      	mov	r2, r0
    1cf6:	460b      	mov	r3, r1
    1cf8:	4640      	mov	r0, r8
    1cfa:	4621      	mov	r1, r4
    1cfc:	4c13      	ldr	r4, [pc, #76]	; (1d4c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
    1cfe:	47a0      	blx	r4
    1d00:	a30d      	add	r3, pc, #52	; (adr r3, 1d38 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x90>)
    1d02:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d06:	4c12      	ldr	r4, [pc, #72]	; (1d50 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa8>)
    1d08:	47a0      	blx	r4
    1d0a:	b150      	cbz	r0, 1d22 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7a>
                                          multiplier);
    1d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d0e:	9300      	str	r3, [sp, #0]
    1d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d12:	463a      	mov	r2, r7
    1d14:	4629      	mov	r1, r5
    1d16:	4650      	mov	r0, sl
    1d18:	4c0e      	ldr	r4, [pc, #56]	; (1d54 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xac>)
    1d1a:	47a0      	blx	r4
}
    1d1c:	b002      	add	sp, #8
    1d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    1d22:	4b0d      	ldr	r3, [pc, #52]	; (1d58 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb0>)
    1d24:	9300      	str	r3, [sp, #0]
    1d26:	f8da 4014 	ldr.w	r4, [sl, #20]
    1d2a:	239a      	movs	r3, #154	; 0x9a
    1d2c:	4a0b      	ldr	r2, [pc, #44]	; (1d5c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>)
    1d2e:	490c      	ldr	r1, [pc, #48]	; (1d60 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb8>)
    1d30:	4650      	mov	r0, sl
    1d32:	47a0      	blx	r4
    1d34:	2001      	movs	r0, #1
    1d36:	e7f1      	b.n	1d1c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x74>
    1d38:	47ae147b 	.word	0x47ae147b
    1d3c:	3f947ae1 	.word	0x3f947ae1
    1d40:	00012bb9 	.word	0x00012bb9
    1d44:	00012c61 	.word	0x00012c61
    1d48:	000128f9 	.word	0x000128f9
    1d4c:	00012eb5 	.word	0x00012eb5
    1d50:	00013159 	.word	0x00013159
    1d54:	00001c29 	.word	0x00001c29
    1d58:	00021c7c 	.word	0x00021c7c
    1d5c:	00021c34 	.word	0x00021c34
    1d60:	00021304 	.word	0x00021304

00001d64 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
    1d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d68:	b083      	sub	sp, #12
    1d6a:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
    1d6c:	7813      	ldrb	r3, [r2, #0]
    1d6e:	2b03      	cmp	r3, #3
    1d70:	d01f      	beq.n	1db2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4e>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
    1d72:	2b09      	cmp	r3, #9
    1d74:	d020      	beq.n	1db8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x54>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
    1d76:	2b07      	cmp	r3, #7
    1d78:	d112      	bne.n	1da0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x3c>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
    1d7a:	f647 76ff 	movw	r6, #32767	; 0x7fff
    qmin = std::numeric_limits<int16_t>::min();
    1d7e:	4f36      	ldr	r7, [pc, #216]	; (1e58 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xf4>)
  const auto scale = output->params.scale;
    1d80:	f8d2 800c 	ldr.w	r8, [r2, #12]
  const auto zero_point = output->params.zero_point;
    1d84:	6914      	ldr	r4, [r2, #16]
  if (activation == kTfLiteActRelu) {
    1d86:	2901      	cmp	r1, #1
    1d88:	d01a      	beq.n	1dc0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x5c>
  } else if (activation == kTfLiteActRelu6) {
    1d8a:	2903      	cmp	r1, #3
    1d8c:	d029      	beq.n	1de2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (activation == kTfLiteActReluN1To1) {
    1d8e:	2902      	cmp	r1, #2
    1d90:	d044      	beq.n	1e1c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb8>
    *act_min = qmin;
    1d92:	602f      	str	r7, [r5, #0]
    *act_max = qmax;
    1d94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d96:	601e      	str	r6, [r3, #0]
    TF_LITE_ENSURE(context, false);
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
                                        act_max);
  return kTfLiteOk;
    1d98:	2000      	movs	r0, #0
}
    1d9a:	b003      	add	sp, #12
    1d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE(context, false);
    1da0:	4b2e      	ldr	r3, [pc, #184]	; (1e5c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xf8>)
    1da2:	9300      	str	r3, [sp, #0]
    1da4:	6944      	ldr	r4, [r0, #20]
    1da6:	23da      	movs	r3, #218	; 0xda
    1da8:	4a2d      	ldr	r2, [pc, #180]	; (1e60 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xfc>)
    1daa:	492e      	ldr	r1, [pc, #184]	; (1e64 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x100>)
    1dac:	47a0      	blx	r4
    1dae:	2001      	movs	r0, #1
    1db0:	e7f3      	b.n	1d9a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x36>
    qmax = std::numeric_limits<uint8_t>::max();
    1db2:	26ff      	movs	r6, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
    1db4:	2700      	movs	r7, #0
    1db6:	e7e3      	b.n	1d80 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1c>
    qmax = std::numeric_limits<int8_t>::max();
    1db8:	267f      	movs	r6, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
    1dba:	f06f 077f 	mvn.w	r7, #127	; 0x7f
    1dbe:	e7df      	b.n	1d80 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1c>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
    1dc0:	4641      	mov	r1, r8
    1dc2:	2000      	movs	r0, #0
    1dc4:	4b28      	ldr	r3, [pc, #160]	; (1e68 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x104>)
    1dc6:	4798      	blx	r3
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
    1dc8:	4b28      	ldr	r3, [pc, #160]	; (1e6c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x108>)
    1dca:	4798      	blx	r3
    1dcc:	4b28      	ldr	r3, [pc, #160]	; (1e70 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x10c>)
    1dce:	4798      	blx	r3
  };
    1dd0:	4420      	add	r0, r4
    *act_min = std::max(qmin, quantize(0.0));
    1dd2:	42b8      	cmp	r0, r7
    1dd4:	bfb8      	it	lt
    1dd6:	4638      	movlt	r0, r7
    1dd8:	6028      	str	r0, [r5, #0]
    *act_max = qmax;
    1dda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1ddc:	601e      	str	r6, [r3, #0]
  return kTfLiteOk;
    1dde:	2000      	movs	r0, #0
    1de0:	e7db      	b.n	1d9a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x36>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
    1de2:	f8df b084 	ldr.w	fp, [pc, #132]	; 1e68 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x104>
    1de6:	4641      	mov	r1, r8
    1de8:	2000      	movs	r0, #0
    1dea:	47d8      	blx	fp
    1dec:	f8df a07c 	ldr.w	sl, [pc, #124]	; 1e6c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x108>
    1df0:	47d0      	blx	sl
    1df2:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1e70 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x10c>
    1df6:	47c8      	blx	r9
  };
    1df8:	4420      	add	r0, r4
    *act_min = std::max(qmin, quantize(0.0));
    1dfa:	42b8      	cmp	r0, r7
    1dfc:	bfb8      	it	lt
    1dfe:	4638      	movlt	r0, r7
    1e00:	6028      	str	r0, [r5, #0]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
    1e02:	4641      	mov	r1, r8
    1e04:	481b      	ldr	r0, [pc, #108]	; (1e74 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x110>)
    1e06:	47d8      	blx	fp
    1e08:	47d0      	blx	sl
    1e0a:	47c8      	blx	r9
  };
    1e0c:	4420      	add	r0, r4
    *act_max = std::min(qmax, quantize(6.0));
    1e0e:	42b0      	cmp	r0, r6
    1e10:	bfa8      	it	ge
    1e12:	4630      	movge	r0, r6
    1e14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1e16:	6018      	str	r0, [r3, #0]
  return kTfLiteOk;
    1e18:	2000      	movs	r0, #0
    1e1a:	e7be      	b.n	1d9a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x36>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
    1e1c:	f8df b048 	ldr.w	fp, [pc, #72]	; 1e68 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x104>
    1e20:	4641      	mov	r1, r8
    1e22:	4815      	ldr	r0, [pc, #84]	; (1e78 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x114>)
    1e24:	47d8      	blx	fp
    1e26:	f8df a044 	ldr.w	sl, [pc, #68]	; 1e6c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x108>
    1e2a:	47d0      	blx	sl
    1e2c:	f8df 9040 	ldr.w	r9, [pc, #64]	; 1e70 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x10c>
    1e30:	47c8      	blx	r9
  };
    1e32:	4420      	add	r0, r4
    *act_min = std::max(qmin, quantize(-1.0));
    1e34:	42b8      	cmp	r0, r7
    1e36:	bfb8      	it	lt
    1e38:	4638      	movlt	r0, r7
    1e3a:	6028      	str	r0, [r5, #0]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
    1e3c:	4641      	mov	r1, r8
    1e3e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    1e42:	47d8      	blx	fp
    1e44:	47d0      	blx	sl
    1e46:	47c8      	blx	r9
  };
    1e48:	4420      	add	r0, r4
    *act_max = std::min(qmax, quantize(1.0));
    1e4a:	42b0      	cmp	r0, r6
    1e4c:	bfa8      	it	ge
    1e4e:	4630      	movge	r0, r6
    1e50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1e52:	6018      	str	r0, [r3, #0]
  return kTfLiteOk;
    1e54:	2000      	movs	r0, #0
    1e56:	e7a0      	b.n	1d9a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x36>
    1e58:	ffff8000 	.word	0xffff8000
    1e5c:	00021ca0 	.word	0x00021ca0
    1e60:	00021c34 	.word	0x00021c34
    1e64:	00021304 	.word	0x00021304
    1e68:	00013649 	.word	0x00013649
    1e6c:	000125b5 	.word	0x000125b5
    1e70:	0001386d 	.word	0x0001386d
    1e74:	40c00000 	.word	0x40c00000
    1e78:	bf800000 	.word	0xbf800000

00001e7c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
    1e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e80:	b091      	sub	sp, #68	; 0x44
    1e82:	9005      	str	r0, [sp, #20]
    1e84:	9309      	str	r3, [sp, #36]	; 0x24
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    1e86:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
    1e8a:	2b01      	cmp	r3, #1
    1e8c:	f040 8084 	bne.w	1f98 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x11c>
    1e90:	468b      	mov	fp, r1
    1e92:	4691      	mov	r9, r2
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    1e94:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    1e98:	2b01      	cmp	r3, #1
    1e9a:	f040 808d 	bne.w	1fb8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x13c>
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
    1e9e:	6b53      	ldr	r3, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	f000 8098 	beq.w	1fd6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x15a>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    1ea6:	681a      	ldr	r2, [r3, #0]
    1ea8:	9208      	str	r2, [sp, #32]
    1eaa:	2a00      	cmp	r2, #0
    1eac:	f000 809d 	beq.w	1fea <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x16e>
  const bool is_per_channel = affine_quantization->scale->size > 1;
    1eb0:	9a08      	ldr	r2, [sp, #32]
    1eb2:	f8d2 a000 	ldr.w	sl, [r2]
  if (is_per_channel) {
    1eb6:	f1ba 0f01 	cmp.w	sl, #1
    1eba:	dd18      	ble.n	1eee <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x72>
    TF_LITE_ENSURE(context,
    1ebc:	780a      	ldrb	r2, [r1, #0]
    1ebe:	2a09      	cmp	r2, #9
    1ec0:	d002      	beq.n	1ec8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x4c>
    1ec2:	2a07      	cmp	r2, #7
    1ec4:	f040 809b 	bne.w	1ffe <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x182>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
    1ec8:	f899 2000 	ldrb.w	r2, [r9]
    1ecc:	2a09      	cmp	r2, #9
    1ece:	f040 80a0 	bne.w	2012 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x196>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
    1ed2:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1ed4:	4592      	cmp	sl, r2
    1ed6:	f040 80ab 	bne.w	2030 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1b4>
    TF_LITE_ENSURE_EQ(
    1eda:	f8d9 2008 	ldr.w	r2, [r9, #8]
    1ede:	689b      	ldr	r3, [r3, #8]
    1ee0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    1ee4:	6853      	ldr	r3, [r2, #4]
    1ee6:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1ee8:	4293      	cmp	r3, r2
    1eea:	f040 80b0 	bne.w	204e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d2>
  const float input_scale = input->params.scale;
    1eee:	f8db 300c 	ldr.w	r3, [fp, #12]
    1ef2:	9306      	str	r3, [sp, #24]
  const float output_scale = output->params.scale;
    1ef4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    1ef6:	68db      	ldr	r3, [r3, #12]
    1ef8:	9307      	str	r3, [sp, #28]
  const float* filter_scales = affine_quantization->scale->data;
    1efa:	9b08      	ldr	r3, [sp, #32]
    1efc:	3304      	adds	r3, #4
    1efe:	461a      	mov	r2, r3
  for (int i = 0; i < num_channels; ++i) {
    1f00:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1f02:	2b00      	cmp	r3, #0
    1f04:	dd3c      	ble.n	1f80 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x104>
    1f06:	9f20      	ldr	r7, [sp, #128]	; 0x80
    1f08:	3f04      	subs	r7, #4
    1f0a:	9e21      	ldr	r6, [sp, #132]	; 0x84
    1f0c:	3e04      	subs	r6, #4
    1f0e:	2400      	movs	r4, #0
    const double filter_scale = static_cast<double>(scale);
    1f10:	4d6b      	ldr	r5, [pc, #428]	; (20c0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x244>)
                                          static_cast<double>(output_scale);
    1f12:	9704      	str	r7, [sp, #16]
    1f14:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    1f18:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    1f1c:	4691      	mov	r9, r2
    1f1e:	469b      	mov	fp, r3
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
    1f20:	f1ba 0f01 	cmp.w	sl, #1
    1f24:	bfce      	itee	gt
    1f26:	f859 0024 	ldrgt.w	r0, [r9, r4, lsl #2]
    1f2a:	9b08      	ldrle	r3, [sp, #32]
    1f2c:	6858      	ldrle	r0, [r3, #4]
    const double filter_scale = static_cast<double>(scale);
    1f2e:	47a8      	blx	r5
    1f30:	4607      	mov	r7, r0
    1f32:	4688      	mov	r8, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
    1f34:	9806      	ldr	r0, [sp, #24]
    1f36:	47a8      	blx	r5
    1f38:	4602      	mov	r2, r0
    1f3a:	460b      	mov	r3, r1
    1f3c:	4638      	mov	r0, r7
    1f3e:	4641      	mov	r1, r8
    1f40:	4f60      	ldr	r7, [pc, #384]	; (20c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x248>)
    1f42:	47b8      	blx	r7
    1f44:	4607      	mov	r7, r0
    1f46:	4688      	mov	r8, r1
                                          static_cast<double>(output_scale);
    1f48:	9807      	ldr	r0, [sp, #28]
    1f4a:	47a8      	blx	r5
    1f4c:	4602      	mov	r2, r0
    1f4e:	460b      	mov	r3, r1
    1f50:	4638      	mov	r0, r7
    1f52:	4641      	mov	r1, r8
    1f54:	4f5c      	ldr	r7, [pc, #368]	; (20c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24c>)
    1f56:	47b8      	blx	r7
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
    1f58:	ab0e      	add	r3, sp, #56	; 0x38
    1f5a:	aa0d      	add	r2, sp, #52	; 0x34
    1f5c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 2108 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>
    1f60:	47c0      	blx	r8
    per_channel_multiplier[i] = significand;
    1f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1f64:	9a04      	ldr	r2, [sp, #16]
    1f66:	f842 3f04 	str.w	r3, [r2, #4]!
    1f6a:	9204      	str	r2, [sp, #16]
    per_channel_shift[i] = channel_shift;
    1f6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1f6e:	f846 3f04 	str.w	r3, [r6, #4]!
  for (int i = 0; i < num_channels; ++i) {
    1f72:	3401      	adds	r4, #1
    1f74:	455c      	cmp	r4, fp
    1f76:	d1d3      	bne.n	1f20 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xa4>
    1f78:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    1f7c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  if (input->type == kTfLiteUInt8) {
    1f80:	f89b 3000 	ldrb.w	r3, [fp]
    1f84:	2b03      	cmp	r3, #3
    1f86:	d070      	beq.n	206a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1ee>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
    1f88:	2b09      	cmp	r3, #9
    1f8a:	f000 808f 	beq.w	20ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x230>
    1f8e:	2b07      	cmp	r3, #7
    1f90:	f000 808c 	beq.w	20ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x230>
  return kTfLiteOk;
    1f94:	2000      	movs	r0, #0
    1f96:	e00c      	b.n	1fb2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    1f98:	2401      	movs	r4, #1
    1f9a:	9403      	str	r4, [sp, #12]
    1f9c:	9302      	str	r3, [sp, #8]
    1f9e:	4b4b      	ldr	r3, [pc, #300]	; (20cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x250>)
    1fa0:	9301      	str	r3, [sp, #4]
    1fa2:	4b4b      	ldr	r3, [pc, #300]	; (20d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x254>)
    1fa4:	9300      	str	r3, [sp, #0]
    1fa6:	6945      	ldr	r5, [r0, #20]
    1fa8:	2336      	movs	r3, #54	; 0x36
    1faa:	4a4a      	ldr	r2, [pc, #296]	; (20d4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    1fac:	494a      	ldr	r1, [pc, #296]	; (20d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x25c>)
    1fae:	47a8      	blx	r5
    1fb0:	4620      	mov	r0, r4
}
    1fb2:	b011      	add	sp, #68	; 0x44
    1fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    1fb8:	2401      	movs	r4, #1
    1fba:	9403      	str	r4, [sp, #12]
    1fbc:	9302      	str	r3, [sp, #8]
    1fbe:	4b43      	ldr	r3, [pc, #268]	; (20cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x250>)
    1fc0:	9301      	str	r3, [sp, #4]
    1fc2:	4b46      	ldr	r3, [pc, #280]	; (20dc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x260>)
    1fc4:	9300      	str	r3, [sp, #0]
    1fc6:	9805      	ldr	r0, [sp, #20]
    1fc8:	6945      	ldr	r5, [r0, #20]
    1fca:	2338      	movs	r3, #56	; 0x38
    1fcc:	4a41      	ldr	r2, [pc, #260]	; (20d4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    1fce:	4942      	ldr	r1, [pc, #264]	; (20d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x25c>)
    1fd0:	47a8      	blx	r5
    1fd2:	4620      	mov	r0, r4
    1fd4:	e7ed      	b.n	1fb2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
  TF_LITE_ENSURE(context, affine_quantization);
    1fd6:	4b42      	ldr	r3, [pc, #264]	; (20e0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x264>)
    1fd8:	9300      	str	r3, [sp, #0]
    1fda:	9805      	ldr	r0, [sp, #20]
    1fdc:	6944      	ldr	r4, [r0, #20]
    1fde:	2342      	movs	r3, #66	; 0x42
    1fe0:	4a3c      	ldr	r2, [pc, #240]	; (20d4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    1fe2:	4940      	ldr	r1, [pc, #256]	; (20e4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x268>)
    1fe4:	47a0      	blx	r4
    1fe6:	2001      	movs	r0, #1
    1fe8:	e7e3      	b.n	1fb2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    1fea:	4b3f      	ldr	r3, [pc, #252]	; (20e8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x26c>)
    1fec:	9300      	str	r3, [sp, #0]
    1fee:	9805      	ldr	r0, [sp, #20]
    1ff0:	6944      	ldr	r4, [r0, #20]
    1ff2:	2343      	movs	r3, #67	; 0x43
    1ff4:	4a37      	ldr	r2, [pc, #220]	; (20d4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    1ff6:	493b      	ldr	r1, [pc, #236]	; (20e4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x268>)
    1ff8:	47a0      	blx	r4
    1ffa:	2001      	movs	r0, #1
    1ffc:	e7d9      	b.n	1fb2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
    TF_LITE_ENSURE(context,
    1ffe:	4b3b      	ldr	r3, [pc, #236]	; (20ec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x270>)
    2000:	9300      	str	r3, [sp, #0]
    2002:	9805      	ldr	r0, [sp, #20]
    2004:	6944      	ldr	r4, [r0, #20]
    2006:	2348      	movs	r3, #72	; 0x48
    2008:	4a32      	ldr	r2, [pc, #200]	; (20d4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    200a:	4936      	ldr	r1, [pc, #216]	; (20e4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x268>)
    200c:	47a0      	blx	r4
    200e:	2001      	movs	r0, #1
    2010:	e7cf      	b.n	1fb2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
    2012:	2309      	movs	r3, #9
    2014:	9303      	str	r3, [sp, #12]
    2016:	9202      	str	r2, [sp, #8]
    2018:	4b35      	ldr	r3, [pc, #212]	; (20f0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x274>)
    201a:	9301      	str	r3, [sp, #4]
    201c:	4b35      	ldr	r3, [pc, #212]	; (20f4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x278>)
    201e:	9300      	str	r3, [sp, #0]
    2020:	9805      	ldr	r0, [sp, #20]
    2022:	6944      	ldr	r4, [r0, #20]
    2024:	2349      	movs	r3, #73	; 0x49
    2026:	4a2b      	ldr	r2, [pc, #172]	; (20d4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    2028:	492b      	ldr	r1, [pc, #172]	; (20d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x25c>)
    202a:	47a0      	blx	r4
    202c:	2001      	movs	r0, #1
    202e:	e7c0      	b.n	1fb2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
    2030:	9203      	str	r2, [sp, #12]
    2032:	f8cd a008 	str.w	sl, [sp, #8]
    2036:	4b30      	ldr	r3, [pc, #192]	; (20f8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x27c>)
    2038:	9301      	str	r3, [sp, #4]
    203a:	4b30      	ldr	r3, [pc, #192]	; (20fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x280>)
    203c:	9300      	str	r3, [sp, #0]
    203e:	9805      	ldr	r0, [sp, #20]
    2040:	6944      	ldr	r4, [r0, #20]
    2042:	234a      	movs	r3, #74	; 0x4a
    2044:	4a23      	ldr	r2, [pc, #140]	; (20d4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    2046:	4924      	ldr	r1, [pc, #144]	; (20d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x25c>)
    2048:	47a0      	blx	r4
    204a:	2001      	movs	r0, #1
    204c:	e7b1      	b.n	1fb2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
    TF_LITE_ENSURE_EQ(
    204e:	9303      	str	r3, [sp, #12]
    2050:	9202      	str	r2, [sp, #8]
    2052:	4b2b      	ldr	r3, [pc, #172]	; (2100 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x284>)
    2054:	9301      	str	r3, [sp, #4]
    2056:	4b28      	ldr	r3, [pc, #160]	; (20f8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x27c>)
    2058:	9300      	str	r3, [sp, #0]
    205a:	9805      	ldr	r0, [sp, #20]
    205c:	6944      	ldr	r4, [r0, #20]
    205e:	234d      	movs	r3, #77	; 0x4d
    2060:	4a1c      	ldr	r2, [pc, #112]	; (20d4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    2062:	491d      	ldr	r1, [pc, #116]	; (20d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x25c>)
    2064:	47a0      	blx	r4
    2066:	2001      	movs	r0, #1
    2068:	e7a3      	b.n	1fb2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
    double real_multiplier = 0.0;
    206a:	ab10      	add	r3, sp, #64	; 0x40
    206c:	2000      	movs	r0, #0
    206e:	2100      	movs	r1, #0
    2070:	e963 0102 	strd	r0, r1, [r3, #-8]!
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    2074:	9301      	str	r3, [sp, #4]
    2076:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    2078:	9300      	str	r3, [sp, #0]
    207a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    207c:	464a      	mov	r2, r9
    207e:	4659      	mov	r1, fp
    2080:	9805      	ldr	r0, [sp, #20]
    2082:	4c20      	ldr	r4, [pc, #128]	; (2104 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x288>)
    2084:	47a0      	blx	r4
    2086:	2800      	cmp	r0, #0
    2088:	d193      	bne.n	1fb2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
    208a:	ab0d      	add	r3, sp, #52	; 0x34
    208c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    208e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    2092:	4c1d      	ldr	r4, [pc, #116]	; (2108 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
    2094:	47a0      	blx	r4
    *shift = -exponent;
    2096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2098:	425b      	negs	r3, r3
    209a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    209c:	6013      	str	r3, [r2, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
    209e:	f89b 3000 	ldrb.w	r3, [fp]
    20a2:	2b09      	cmp	r3, #9
    20a4:	d002      	beq.n	20ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x230>
    20a6:	2b03      	cmp	r3, #3
    20a8:	f47f af71 	bne.w	1f8e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x112>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    20ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    20ae:	7819      	ldrb	r1, [r3, #0]
    20b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    20b2:	9300      	str	r3, [sp, #0]
    20b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    20b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    20b8:	9805      	ldr	r0, [sp, #20]
    20ba:	4c14      	ldr	r4, [pc, #80]	; (210c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x290>)
    20bc:	47a0      	blx	r4
    20be:	e778      	b.n	1fb2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
    20c0:	00012bb9 	.word	0x00012bb9
    20c4:	00012c61 	.word	0x00012c61
    20c8:	00012eb5 	.word	0x00012eb5
    20cc:	00021cc4 	.word	0x00021cc4
    20d0:	00021ce0 	.word	0x00021ce0
    20d4:	00021c34 	.word	0x00021c34
    20d8:	00021ca8 	.word	0x00021ca8
    20dc:	00021cfc 	.word	0x00021cfc
    20e0:	00021d18 	.word	0x00021d18
    20e4:	00021304 	.word	0x00021304
    20e8:	00021d2c 	.word	0x00021d2c
    20ec:	00021d48 	.word	0x00021d48
    20f0:	00021d84 	.word	0x00021d84
    20f4:	00021d90 	.word	0x00021d90
    20f8:	00021da0 	.word	0x00021da0
    20fc:	00021db0 	.word	0x00021db0
    2100:	00021dd4 	.word	0x00021dd4
    2104:	00001ca9 	.word	0x00001ca9
    2108:	00001a3d 	.word	0x00001a3d
    210c:	00001d65 	.word	0x00001d65

00002110 <DebugLog>:

#include "tensorflow/lite/micro/debug_log.h"

#include <cstdio>

extern "C" void DebugLog(const char* s) { fprintf(stderr, "%s", s); }
    2110:	b508      	push	{r3, lr}
    2112:	4b03      	ldr	r3, [pc, #12]	; (2120 <DebugLog+0x10>)
    2114:	681b      	ldr	r3, [r3, #0]
    2116:	68d9      	ldr	r1, [r3, #12]
    2118:	4b02      	ldr	r3, [pc, #8]	; (2124 <DebugLog+0x14>)
    211a:	4798      	blx	r3
    211c:	bd08      	pop	{r3, pc}
    211e:	bf00      	nop
    2120:	20000020 	.word	0x20000020
    2124:	00014ca9 	.word	0x00014ca9

00002128 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj>:
        output_channels));
  }
  return kTfLiteOk;
}

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
    2128:	b500      	push	{lr}
    212a:	b083      	sub	sp, #12
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    212c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    212e:	b163      	cbz	r3, 214a <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0x22>
  void* data = nullptr;
    2130:	aa02      	add	r2, sp, #8
    2132:	2100      	movs	r1, #0
    2134:	f842 1d04 	str.w	r1, [r2, #-4]!
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
    2138:	2128      	movs	r1, #40	; 0x28
    213a:	4798      	blx	r3
    213c:	2801      	cmp	r0, #1
      kTfLiteError) {
    return nullptr;
  }
  return data;
    213e:	bf14      	ite	ne
    2140:	9801      	ldrne	r0, [sp, #4]
    return nullptr;
    2142:	2000      	moveq	r0, #0
}
    2144:	b003      	add	sp, #12
    2146:	f85d fb04 	ldr.w	pc, [sp], #4
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    214a:	4b01      	ldr	r3, [pc, #4]	; (2150 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0x28>)
    214c:	4798      	blx	r3
    214e:	bf00      	nop
    2150:	00014b3d 	.word	0x00014b3d

00002154 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>:
                             const TfLiteType data_type, OpData* data) {
    2154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2158:	b08a      	sub	sp, #40	; 0x28
    215a:	9e18      	ldr	r6, [sp, #96]	; 0x60
  bool has_bias = node->inputs->size == 3;
    215c:	680c      	ldr	r4, [r1, #0]
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    215e:	6824      	ldr	r4, [r4, #0]
    2160:	3c02      	subs	r4, #2
    2162:	2c01      	cmp	r4, #1
    2164:	d813      	bhi.n	218e <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x3a>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    2166:	684c      	ldr	r4, [r1, #4]
    2168:	6825      	ldr	r5, [r4, #0]
    216a:	2d01      	cmp	r5, #1
    216c:	d018      	beq.n	21a0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x4c>
    216e:	2401      	movs	r4, #1
    2170:	9403      	str	r4, [sp, #12]
    2172:	9502      	str	r5, [sp, #8]
    2174:	4b5b      	ldr	r3, [pc, #364]	; (22e4 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x190>)
    2176:	9301      	str	r3, [sp, #4]
    2178:	4b5b      	ldr	r3, [pc, #364]	; (22e8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x194>)
    217a:	9300      	str	r3, [sp, #0]
    217c:	6945      	ldr	r5, [r0, #20]
    217e:	2350      	movs	r3, #80	; 0x50
    2180:	4a5a      	ldr	r2, [pc, #360]	; (22ec <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x198>)
    2182:	495b      	ldr	r1, [pc, #364]	; (22f0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x19c>)
    2184:	47a8      	blx	r5
    2186:	4620      	mov	r0, r4
}
    2188:	b00a      	add	sp, #40	; 0x28
    218a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    218e:	4b59      	ldr	r3, [pc, #356]	; (22f4 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x1a0>)
    2190:	9300      	str	r3, [sp, #0]
    2192:	6944      	ldr	r4, [r0, #20]
    2194:	234f      	movs	r3, #79	; 0x4f
    2196:	4a55      	ldr	r2, [pc, #340]	; (22ec <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x198>)
    2198:	4957      	ldr	r1, [pc, #348]	; (22f8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x1a4>)
    219a:	47a0      	blx	r4
    219c:	2001      	movs	r0, #1
    219e:	e7f3      	b.n	2188 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x34>
  auto padding = params->padding;
    21a0:	f892 c000 	ldrb.w	ip, [r2]
      params->stride_height, params->stride_width,
    21a4:	f8d2 9008 	ldr.w	r9, [r2, #8]
    21a8:	f8d2 e004 	ldr.w	lr, [r2, #4]
      params->dilation_height_factor, params->dilation_width_factor, height,
    21ac:	6954      	ldr	r4, [r2, #20]
}

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    21ae:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    21b0:	1e7d      	subs	r5, r7, #1
    21b2:	6917      	ldr	r7, [r2, #16]
    21b4:	fb07 f705 	mul.w	r7, r7, r5
    21b8:	f107 0a01 	add.w	sl, r7, #1
  switch (padding) {
    21bc:	f1bc 0f01 	cmp.w	ip, #1
    21c0:	d011      	beq.n	21e6 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x92>
    21c2:	f1bc 0f02 	cmp.w	ip, #2
    21c6:	d050      	beq.n	226a <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x116>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    21c8:	9d14      	ldr	r5, [sp, #80]	; 0x50
    21ca:	3d01      	subs	r5, #1
    21cc:	fb04 f405 	mul.w	r4, r4, r5
    21d0:	f104 0801 	add.w	r8, r4, #1
  switch (padding) {
    21d4:	f1bc 0f01 	cmp.w	ip, #1
    21d8:	d05c      	beq.n	2294 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x140>
    21da:	f1bc 0f02 	cmp.w	ip, #2
    21de:	d05b      	beq.n	2298 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x144>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    default:
      return 0;
    21e0:	2500      	movs	r5, #0
    21e2:	462c      	mov	r4, r5
    21e4:	e010      	b.n	2208 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0xb4>
      return (image_size + stride - 1) / stride;
    21e6:	eb0e 0503 	add.w	r5, lr, r3
    21ea:	3d01      	subs	r5, #1
    21ec:	fb95 f5fe 	sdiv	r5, r5, lr
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    21f0:	9f14      	ldr	r7, [sp, #80]	; 0x50
    21f2:	f107 38ff 	add.w	r8, r7, #4294967295
    21f6:	fb04 f408 	mul.w	r4, r4, r8
    21fa:	f104 0801 	add.w	r8, r4, #1
      return (image_size + stride - 1) / stride;
    21fe:	9c12      	ldr	r4, [sp, #72]	; 0x48
    2200:	444c      	add	r4, r9
    2202:	3c01      	subs	r4, #1
    2204:	fb94 f4f9 	sdiv	r4, r4, r9
      ((out_size - 1) * stride + effective_filter_size - in_size);
    2208:	3c01      	subs	r4, #1
    220a:	fb09 8404 	mla	r4, r9, r4, r8
    220e:	9f12      	ldr	r7, [sp, #72]	; 0x48
    2210:	1be4      	subs	r4, r4, r7
  total_padding = total_padding > 0 ? total_padding : 0;
    2212:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
      ((out_size - 1) * stride + effective_filter_size - in_size);
    2216:	3d01      	subs	r5, #1
    2218:	fb0e a505 	mla	r5, lr, r5, sl
    221c:	1aeb      	subs	r3, r5, r3
  total_padding = total_padding > 0 ? total_padding : 0;
    221e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  return total_padding / 2;
    2222:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
    2226:	106d      	asrs	r5, r5, #1
      width, filter_height, filter_width, padding, &out_height, &out_width);
    2228:	6035      	str	r5, [r6, #0]
    222a:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
    222e:	106d      	asrs	r5, r5, #1
    2230:	6075      	str	r5, [r6, #4]
  *offset = total_padding % 2;
    2232:	f003 0301 	and.w	r3, r3, #1
    2236:	60b3      	str	r3, [r6, #8]
    2238:	f004 0401 	and.w	r4, r4, #1
    223c:	60f4      	str	r4, [r6, #12]
  if (data_type != kTfLiteFloat32) {
    223e:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    2242:	2b01      	cmp	r3, #1
    2244:	d04b      	beq.n	22de <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x18a>
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}
inline const TfLiteTensor* GetInput(const TfLiteContext* context,
                                    const TfLiteNode* node, int index) {
  return &context->tensors[node->inputs->data[index]];
    2246:	6885      	ldr	r5, [r0, #8]
    2248:	680b      	ldr	r3, [r1, #0]
    224a:	685c      	ldr	r4, [r3, #4]
    224c:	eb05 1e84 	add.w	lr, r5, r4, lsl #6
    2250:	689c      	ldr	r4, [r3, #8]
    2252:	eb05 1484 	add.w	r4, r5, r4, lsl #6
}

inline const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                                  const TfLiteNode* node,
                                                  int index) {
  const bool use_tensor = index < node->inputs->size &&
    2256:	681f      	ldr	r7, [r3, #0]
    2258:	2f02      	cmp	r7, #2
    225a:	dd21      	ble.n	22a0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x14c>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    225c:	68db      	ldr	r3, [r3, #12]
  const bool use_tensor = index < node->inputs->size &&
    225e:	f1b3 3fff 	cmp.w	r3, #4294967295
    2262:	d01b      	beq.n	229c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x148>
  if (use_tensor) {
    return &context->tensors[node->inputs->data[index]];
    2264:	eb05 1383 	add.w	r3, r5, r3, lsl #6
    2268:	e01b      	b.n	22a2 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x14e>
      return (image_size + stride - effective_filter_size) / stride;
    226a:	eb0e 0503 	add.w	r5, lr, r3
    226e:	eba5 050a 	sub.w	r5, r5, sl
    2272:	fb95 f5fe 	sdiv	r5, r5, lr
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    2276:	9f14      	ldr	r7, [sp, #80]	; 0x50
    2278:	f107 38ff 	add.w	r8, r7, #4294967295
    227c:	fb04 f408 	mul.w	r4, r4, r8
    2280:	f104 0801 	add.w	r8, r4, #1
      return (image_size + stride - effective_filter_size) / stride;
    2284:	9c12      	ldr	r4, [sp, #72]	; 0x48
    2286:	eb09 0c04 	add.w	ip, r9, r4
    228a:	ebac 0c08 	sub.w	ip, ip, r8
    228e:	fb9c f4f9 	sdiv	r4, ip, r9
    2292:	e7b9      	b.n	2208 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0xb4>
      return 0;
    2294:	2500      	movs	r5, #0
    2296:	e7b2      	b.n	21fe <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0xaa>
    2298:	2500      	movs	r5, #0
    229a:	e7f3      	b.n	2284 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x130>
  }
  return nullptr;
    229c:	2300      	movs	r3, #0
    229e:	e000      	b.n	22a2 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x14e>
    22a0:	2300      	movs	r3, #0
    int output_channels = filter->dims->data[kConvQuantizedDimension];
    22a2:	68a7      	ldr	r7, [r4, #8]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    22a4:	687f      	ldr	r7, [r7, #4]
    22a6:	9708      	str	r7, [sp, #32]
    22a8:	69f7      	ldr	r7, [r6, #28]
    22aa:	9707      	str	r7, [sp, #28]
    22ac:	69b7      	ldr	r7, [r6, #24]
    22ae:	9706      	str	r7, [sp, #24]
    22b0:	f106 0724 	add.w	r7, r6, #36	; 0x24
    22b4:	9705      	str	r7, [sp, #20]
    22b6:	f106 0720 	add.w	r7, r6, #32
    22ba:	9704      	str	r7, [sp, #16]
    22bc:	f106 0714 	add.w	r7, r6, #20
    22c0:	9703      	str	r7, [sp, #12]
    22c2:	3610      	adds	r6, #16
    22c4:	9602      	str	r6, [sp, #8]
    22c6:	320c      	adds	r2, #12
    22c8:	9201      	str	r2, [sp, #4]
  return &context->tensors[node->outputs->data[index]];
    22ca:	684a      	ldr	r2, [r1, #4]
    22cc:	6852      	ldr	r2, [r2, #4]
    22ce:	eb05 1582 	add.w	r5, r5, r2, lsl #6
    22d2:	9500      	str	r5, [sp, #0]
    22d4:	4622      	mov	r2, r4
    22d6:	4671      	mov	r1, lr
    22d8:	4c08      	ldr	r4, [pc, #32]	; (22fc <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x1a8>)
    22da:	47a0      	blx	r4
    22dc:	e754      	b.n	2188 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x34>
  return kTfLiteOk;
    22de:	2000      	movs	r0, #0
    22e0:	e752      	b.n	2188 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x34>
    22e2:	bf00      	nop
    22e4:	00022458 	.word	0x00022458
    22e8:	00021f54 	.word	0x00021f54
    22ec:	00021f04 	.word	0x00021f04
    22f0:	00021ca8 	.word	0x00021ca8
    22f4:	00021f30 	.word	0x00021f30
    22f8:	00021304 	.word	0x00021304
    22fc:	00001e7d 	.word	0x00001e7d

00002300 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    2300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2304:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
    2306:	f8d1 a010 	ldr.w	sl, [r1, #16]
    230a:	f1ba 0f00 	cmp.w	sl, #0
    230e:	d02f      	beq.n	2370 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x70>
    2310:	4605      	mov	r5, r0
    2312:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    2314:	f8d1 b014 	ldr.w	fp, [r1, #20]
    2318:	f1bb 0f00 	cmp.w	fp, #0
    231c:	d02a      	beq.n	2374 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x74>
    231e:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    2322:	680b      	ldr	r3, [r1, #0]
    2324:	685f      	ldr	r7, [r3, #4]
    2326:	01bf      	lsls	r7, r7, #6
    2328:	eb08 0207 	add.w	r2, r8, r7
    232c:	689b      	ldr	r3, [r3, #8]
    232e:	eb08 1983 	add.w	r9, r8, r3, lsl #6

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);

  int input_width = input->dims->data[2];
    2332:	6893      	ldr	r3, [r2, #8]
    2334:	68da      	ldr	r2, [r3, #12]
    2336:	9208      	str	r2, [sp, #32]
  int input_height = input->dims->data[1];
    2338:	689b      	ldr	r3, [r3, #8]
    233a:	9309      	str	r3, [sp, #36]	; 0x24
  int filter_width = filter->dims->data[2];
    233c:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2340:	68da      	ldr	r2, [r3, #12]
    2342:	920a      	str	r2, [sp, #40]	; 0x28
  int filter_height = filter->dims->data[1];
    2344:	689a      	ldr	r2, [r3, #8]
    2346:	920b      	str	r2, [sp, #44]	; 0x2c
  return &context->tensors[node->outputs->data[index]];
    2348:	684a      	ldr	r2, [r1, #4]
    234a:	6852      	ldr	r2, [r2, #4]
  int output_width = output->dims->data[2];
    234c:	eb08 1282 	add.w	r2, r8, r2, lsl #6
    2350:	6892      	ldr	r2, [r2, #8]
    2352:	68d1      	ldr	r1, [r2, #12]
    2354:	910c      	str	r1, [sp, #48]	; 0x30
  int output_height = output->dims->data[1];
    2356:	6892      	ldr	r2, [r2, #8]
    2358:	920d      	str	r2, [sp, #52]	; 0x34

  // Dynimically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
    235a:	685e      	ldr	r6, [r3, #4]
    235c:	00b6      	lsls	r6, r6, #2
    235e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    2360:	f10a 0218 	add.w	r2, sl, #24
    2364:	4631      	mov	r1, r6
    2366:	4798      	blx	r3
    2368:	b130      	cbz	r0, 2378 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
  }

  return CalculateOpData(context, node, params, input_width, input_height,
                         filter_width, filter_height, output_width,
                         output_height, input->type, data);
}  // namespace conv
    236a:	b00f      	add	sp, #60	; 0x3c
    236c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
    2370:	4b40      	ldr	r3, [pc, #256]	; (2474 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
    2372:	4798      	blx	r3
  TFLITE_DCHECK(node->builtin_data != nullptr);
    2374:	4b3f      	ldr	r3, [pc, #252]	; (2474 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
    2376:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
    2378:	6bab      	ldr	r3, [r5, #56]	; 0x38
    237a:	f10a 021c 	add.w	r2, sl, #28
    237e:	4631      	mov	r1, r6
    2380:	4628      	mov	r0, r5
    2382:	4798      	blx	r3
    2384:	2800      	cmp	r0, #0
    2386:	d1f0      	bne.n	236a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
  if (input->type == kTfLiteInt8) {
    2388:	f818 3007 	ldrb.w	r3, [r8, r7]
    238c:	2b09      	cmp	r3, #9
    238e:	d013      	beq.n	23b8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xb8>
                         output_height, input->type, data);
    2390:	f8cd a018 	str.w	sl, [sp, #24]
    2394:	9305      	str	r3, [sp, #20]
    2396:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2398:	9304      	str	r3, [sp, #16]
    239a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    239c:	9303      	str	r3, [sp, #12]
    239e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    23a0:	9302      	str	r3, [sp, #8]
    23a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    23a4:	9301      	str	r3, [sp, #4]
    23a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    23a8:	9300      	str	r3, [sp, #0]
    23aa:	9b08      	ldr	r3, [sp, #32]
    23ac:	465a      	mov	r2, fp
    23ae:	4621      	mov	r1, r4
    23b0:	4628      	mov	r0, r5
    23b2:	4c31      	ldr	r4, [pc, #196]	; (2478 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x178>)
    23b4:	47a0      	blx	r4
    23b6:	e7d8      	b.n	236a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    23b8:	f899 2030 	ldrb.w	r2, [r9, #48]	; 0x30
    23bc:	2a01      	cmp	r2, #1
    23be:	d122      	bne.n	2406 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x106>
        static_cast<TfLiteAffineQuantization*>(filter->quantization.params);
    23c0:	f8d9 2034 	ldr.w	r2, [r9, #52]	; 0x34
    TF_LITE_ENSURE(context, affine_quantization);
    23c4:	2a00      	cmp	r2, #0
    23c6:	d02d      	beq.n	2424 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x124>
    TF_LITE_ENSURE(context, affine_quantization->scale);
    23c8:	6811      	ldr	r1, [r2, #0]
    23ca:	2900      	cmp	r1, #0
    23cc:	d034      	beq.n	2438 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x138>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
    23ce:	6850      	ldr	r0, [r2, #4]
    23d0:	2800      	cmp	r0, #0
    23d2:	d03b      	beq.n	244c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>
    TF_LITE_ENSURE(context,
    23d4:	680a      	ldr	r2, [r1, #0]
    23d6:	2a01      	cmp	r2, #1
    23d8:	d004      	beq.n	23e4 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>
    23da:	f8d9 1008 	ldr.w	r1, [r9, #8]
    23de:	6849      	ldr	r1, [r1, #4]
    23e0:	428a      	cmp	r2, r1
    23e2:	d13d      	bne.n	2460 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x160>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    23e4:	6801      	ldr	r1, [r0, #0]
    23e6:	428a      	cmp	r2, r1
    23e8:	d0d2      	beq.n	2390 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x90>
    23ea:	9103      	str	r1, [sp, #12]
    23ec:	9202      	str	r2, [sp, #8]
    23ee:	4b23      	ldr	r3, [pc, #140]	; (247c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
    23f0:	9301      	str	r3, [sp, #4]
    23f2:	4b23      	ldr	r3, [pc, #140]	; (2480 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x180>)
    23f4:	9300      	str	r3, [sp, #0]
    23f6:	696c      	ldr	r4, [r5, #20]
    23f8:	23a3      	movs	r3, #163	; 0xa3
    23fa:	4a22      	ldr	r2, [pc, #136]	; (2484 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    23fc:	4922      	ldr	r1, [pc, #136]	; (2488 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x188>)
    23fe:	4628      	mov	r0, r5
    2400:	47a0      	blx	r4
    2402:	2001      	movs	r0, #1
    2404:	e7b1      	b.n	236a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    2406:	2401      	movs	r4, #1
    2408:	9403      	str	r4, [sp, #12]
    240a:	9202      	str	r2, [sp, #8]
    240c:	4b1f      	ldr	r3, [pc, #124]	; (248c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    240e:	9301      	str	r3, [sp, #4]
    2410:	4b1f      	ldr	r3, [pc, #124]	; (2490 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    2412:	9300      	str	r3, [sp, #0]
    2414:	696e      	ldr	r6, [r5, #20]
    2416:	2396      	movs	r3, #150	; 0x96
    2418:	4a1a      	ldr	r2, [pc, #104]	; (2484 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    241a:	491b      	ldr	r1, [pc, #108]	; (2488 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x188>)
    241c:	4628      	mov	r0, r5
    241e:	47b0      	blx	r6
    2420:	4620      	mov	r0, r4
    2422:	e7a2      	b.n	236a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    TF_LITE_ENSURE(context, affine_quantization);
    2424:	4b1b      	ldr	r3, [pc, #108]	; (2494 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x194>)
    2426:	9300      	str	r3, [sp, #0]
    2428:	696c      	ldr	r4, [r5, #20]
    242a:	239a      	movs	r3, #154	; 0x9a
    242c:	4a15      	ldr	r2, [pc, #84]	; (2484 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    242e:	491a      	ldr	r1, [pc, #104]	; (2498 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    2430:	4628      	mov	r0, r5
    2432:	47a0      	blx	r4
    2434:	2001      	movs	r0, #1
    2436:	e798      	b.n	236a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    TF_LITE_ENSURE(context, affine_quantization->scale);
    2438:	4b18      	ldr	r3, [pc, #96]	; (249c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
    243a:	9300      	str	r3, [sp, #0]
    243c:	696c      	ldr	r4, [r5, #20]
    243e:	239b      	movs	r3, #155	; 0x9b
    2440:	4a10      	ldr	r2, [pc, #64]	; (2484 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    2442:	4915      	ldr	r1, [pc, #84]	; (2498 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    2444:	4628      	mov	r0, r5
    2446:	47a0      	blx	r4
    2448:	2001      	movs	r0, #1
    244a:	e78e      	b.n	236a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
    244c:	4b14      	ldr	r3, [pc, #80]	; (24a0 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
    244e:	9300      	str	r3, [sp, #0]
    2450:	696c      	ldr	r4, [r5, #20]
    2452:	239c      	movs	r3, #156	; 0x9c
    2454:	4a0b      	ldr	r2, [pc, #44]	; (2484 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    2456:	4910      	ldr	r1, [pc, #64]	; (2498 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    2458:	4628      	mov	r0, r5
    245a:	47a0      	blx	r4
    245c:	2001      	movs	r0, #1
    245e:	e784      	b.n	236a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    TF_LITE_ENSURE(context,
    2460:	4b10      	ldr	r3, [pc, #64]	; (24a4 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    2462:	9300      	str	r3, [sp, #0]
    2464:	696c      	ldr	r4, [r5, #20]
    2466:	23a1      	movs	r3, #161	; 0xa1
    2468:	4a06      	ldr	r2, [pc, #24]	; (2484 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    246a:	490b      	ldr	r1, [pc, #44]	; (2498 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    246c:	4628      	mov	r0, r5
    246e:	47a0      	blx	r4
    2470:	2001      	movs	r0, #1
    2472:	e77a      	b.n	236a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    2474:	00014b3d 	.word	0x00014b3d
    2478:	00002155 	.word	0x00002155
    247c:	00022004 	.word	0x00022004
    2480:	00021db0 	.word	0x00021db0
    2484:	00021f04 	.word	0x00021f04
    2488:	00021ca8 	.word	0x00021ca8
    248c:	00021cc4 	.word	0x00021cc4
    2490:	00021cfc 	.word	0x00021cfc
    2494:	00021d18 	.word	0x00021d18
    2498:	00021304 	.word	0x00021304
    249c:	00021d2c 	.word	0x00021d2c
    24a0:	00021f68 	.word	0x00021f68
    24a4:	00021f88 	.word	0x00021f88

000024a8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>:

void EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                   TfLiteConvParams* params, const OpData& data,
                   const TfLiteTensor* input, const TfLiteTensor* filter,
                   const TfLiteTensor* bias, TfLiteTensor* im2col,
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
    24a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24ac:	b0d7      	sub	sp, #348	; 0x15c
    24ae:	9d60      	ldr	r5, [sp, #384]	; 0x180
    24b0:	f8dd 9184 	ldr.w	r9, [sp, #388]	; 0x184
    24b4:	f8dd a188 	ldr.w	sl, [sp, #392]	; 0x188
    24b8:	9c65      	ldr	r4, [sp, #404]	; 0x194
  const int32_t input_offset = -input->params.zero_point;
    24ba:	6929      	ldr	r1, [r5, #16]
    24bc:	9108      	str	r1, [sp, #32]
  const int32_t filter_offset = -filter->params.zero_point;
    24be:	f8d9 1010 	ldr.w	r1, [r9, #16]
    24c2:	9109      	str	r1, [sp, #36]	; 0x24
  const int32_t output_offset = output->params.zero_point;
    24c4:	6921      	ldr	r1, [r4, #16]
    24c6:	9125      	str	r1, [sp, #148]	; 0x94

  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
  op_params.padding_values.width = data.padding.width;
    24c8:	6819      	ldr	r1, [r3, #0]
    24ca:	9100      	str	r1, [sp, #0]
  op_params.padding_values.height = data.padding.height;
    24cc:	6859      	ldr	r1, [r3, #4]
    24ce:	9101      	str	r1, [sp, #4]
  op_params.stride_width = params->stride_width;
    24d0:	f8d2 b004 	ldr.w	fp, [r2, #4]
  op_params.stride_height = params->stride_height;
    24d4:	6891      	ldr	r1, [r2, #8]
    24d6:	9102      	str	r1, [sp, #8]
  op_params.dilation_width_factor = params->dilation_width_factor;
    24d8:	6911      	ldr	r1, [r2, #16]
    24da:	9103      	str	r1, [sp, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
    24dc:	6952      	ldr	r2, [r2, #20]
    24de:	9204      	str	r2, [sp, #16]
  op_params.input_offset = input_offset;
  op_params.weights_offset = filter_offset;
  op_params.output_offset = output_offset;
  op_params.output_multiplier = data.output_multiplier;
    24e0:	691a      	ldr	r2, [r3, #16]
    24e2:	9213      	str	r2, [sp, #76]	; 0x4c
  op_params.output_shift = -data.output_shift;
    24e4:	695f      	ldr	r7, [r3, #20]
  op_params.quantized_activation_min = data.output_activation_min;
    24e6:	6a1a      	ldr	r2, [r3, #32]
    24e8:	9217      	str	r2, [sp, #92]	; 0x5c
  op_params.quantized_activation_max = data.output_activation_max;
    24ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    24ec:	9318      	str	r3, [sp, #96]	; 0x60
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
  if (tensor == nullptr) {
    24ee:	2d00      	cmp	r5, #0
    24f0:	f000 815f 	beq.w	27b2 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x30a>
    return RuntimeShape();
  }

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
    24f4:	f8d5 8008 	ldr.w	r8, [r5, #8]
    24f8:	f858 6b04 	ldr.w	r6, [r8], #4
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
    24fc:	9638      	str	r6, [sp, #224]	; 0xe0
    if (dimensions_count > kMaxSmallSize) {
    24fe:	2e05      	cmp	r6, #5
    2500:	f340 815b 	ble.w	27ba <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x312>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32[dimensions_count];
    2504:	4bb0      	ldr	r3, [pc, #704]	; (27c8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x320>)
    2506:	429e      	cmp	r6, r3
    2508:	bf94      	ite	ls
    250a:	00b0      	lslls	r0, r6, #2
    250c:	f04f 30ff 	movhi.w	r0, #4294967295
    2510:	4bae      	ldr	r3, [pc, #696]	; (27cc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x324>)
    2512:	4798      	blx	r3
    2514:	9039      	str	r0, [sp, #228]	; 0xe4
  }

  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
    Resize(dimensions_count);
    int32* dst_dims = DimsData();
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2516:	00b2      	lsls	r2, r6, #2
    2518:	4641      	mov	r1, r8
    251a:	4bad      	ldr	r3, [pc, #692]	; (27d0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x328>)
    251c:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    251e:	686b      	ldr	r3, [r5, #4]
    2520:	930c      	str	r3, [sp, #48]	; 0x30
  if (tensor == nullptr) {
    2522:	f1b9 0f00 	cmp.w	r9, #0
    2526:	f000 814a 	beq.w	27be <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x316>
  const int dims_size = dims->size;
    252a:	f8d9 6008 	ldr.w	r6, [r9, #8]
    252e:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    2532:	953e      	str	r5, [sp, #248]	; 0xf8
    if (dimensions_count > kMaxSmallSize) {
    2534:	2d05      	cmp	r5, #5
    2536:	f340 814d 	ble.w	27d4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x32c>
      dims_pointer_ = new int32[dimensions_count];
    253a:	4ba3      	ldr	r3, [pc, #652]	; (27c8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x320>)
    253c:	429d      	cmp	r5, r3
    253e:	bf94      	ite	ls
    2540:	00a8      	lslls	r0, r5, #2
    2542:	f04f 30ff 	movhi.w	r0, #4294967295
    2546:	4ba1      	ldr	r3, [pc, #644]	; (27cc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x324>)
    2548:	4798      	blx	r3
    254a:	903f      	str	r0, [sp, #252]	; 0xfc
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    254c:	00aa      	lsls	r2, r5, #2
    254e:	4631      	mov	r1, r6
    2550:	4b9f      	ldr	r3, [pc, #636]	; (27d0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x328>)
    2552:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    2554:	f8d9 3004 	ldr.w	r3, [r9, #4]
    2558:	9326      	str	r3, [sp, #152]	; 0x98
  if (tensor == nullptr) {
    255a:	f1ba 0f00 	cmp.w	sl, #0
    255e:	f000 813b 	beq.w	27d8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x330>
  const int dims_size = dims->size;
    2562:	f8da 6008 	ldr.w	r6, [sl, #8]
    2566:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    256a:	9544      	str	r5, [sp, #272]	; 0x110
    if (dimensions_count > kMaxSmallSize) {
    256c:	2d05      	cmp	r5, #5
    256e:	f340 8137 	ble.w	27e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x338>
      dims_pointer_ = new int32[dimensions_count];
    2572:	4b95      	ldr	r3, [pc, #596]	; (27c8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x320>)
    2574:	429d      	cmp	r5, r3
    2576:	bf94      	ite	ls
    2578:	00a8      	lslls	r0, r5, #2
    257a:	f04f 30ff 	movhi.w	r0, #4294967295
    257e:	4b93      	ldr	r3, [pc, #588]	; (27cc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x324>)
    2580:	4798      	blx	r3
    2582:	9045      	str	r0, [sp, #276]	; 0x114
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2584:	00aa      	lsls	r2, r5, #2
    2586:	4631      	mov	r1, r6
    2588:	4b91      	ldr	r3, [pc, #580]	; (27d0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x328>)
    258a:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    258c:	f8da 3004 	ldr.w	r3, [sl, #4]
    2590:	931a      	str	r3, [sp, #104]	; 0x68
  if (tensor == nullptr) {
    2592:	2c00      	cmp	r4, #0
    2594:	f000 8126 	beq.w	27e4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x33c>
  const int dims_size = dims->size;
    2598:	68a6      	ldr	r6, [r4, #8]
    259a:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    259e:	954a      	str	r5, [sp, #296]	; 0x128
    if (dimensions_count > kMaxSmallSize) {
    25a0:	2d05      	cmp	r5, #5
    25a2:	f340 8123 	ble.w	27ec <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x344>
      dims_pointer_ = new int32[dimensions_count];
    25a6:	4b88      	ldr	r3, [pc, #544]	; (27c8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x320>)
    25a8:	429d      	cmp	r5, r3
    25aa:	bf94      	ite	ls
    25ac:	00a8      	lslls	r0, r5, #2
    25ae:	f04f 30ff 	movhi.w	r0, #4294967295
    25b2:	4b86      	ldr	r3, [pc, #536]	; (27cc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x324>)
    25b4:	4798      	blx	r3
    25b6:	904b      	str	r0, [sp, #300]	; 0x12c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    25b8:	00aa      	lsls	r2, r5, #2
    25ba:	4631      	mov	r1, r6
    25bc:	4b84      	ldr	r3, [pc, #528]	; (27d0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x328>)
    25be:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    25c0:	6863      	ldr	r3, [r4, #4]
    25c2:	9306      	str	r3, [sp, #24]
  if (tensor == nullptr) {
    25c4:	9b63      	ldr	r3, [sp, #396]	; 0x18c
    25c6:	2b00      	cmp	r3, #0
    25c8:	f000 8112 	beq.w	27f0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x348>
  TfLiteIntArray* dims = tensor->dims;
    25cc:	9b63      	ldr	r3, [sp, #396]	; 0x18c
    25ce:	689d      	ldr	r5, [r3, #8]
  const int dims_size = dims->size;
    25d0:	682c      	ldr	r4, [r5, #0]
    size_ = dimensions_count;
    25d2:	9450      	str	r4, [sp, #320]	; 0x140
    if (dimensions_count > kMaxSmallSize) {
    25d4:	2c05      	cmp	r4, #5
    25d6:	f340 810d 	ble.w	27f4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x34c>
      dims_pointer_ = new int32[dimensions_count];
    25da:	4b7b      	ldr	r3, [pc, #492]	; (27c8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x320>)
    25dc:	429c      	cmp	r4, r3
    25de:	bf94      	ite	ls
    25e0:	00a0      	lslls	r0, r4, #2
    25e2:	f04f 30ff 	movhi.w	r0, #4294967295
    25e6:	4b79      	ldr	r3, [pc, #484]	; (27cc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x324>)
    25e8:	4798      	blx	r3
    25ea:	9051      	str	r0, [sp, #324]	; 0x144
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    25ec:	00a2      	lsls	r2, r4, #2
    25ee:	1d29      	adds	r1, r5, #4
    25f0:	4b77      	ldr	r3, [pc, #476]	; (27d0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x328>)
    25f2:	4798      	blx	r3
  op_params.stride_width = params->stride_width;
    25f4:	fa0f f38b 	sxth.w	r3, fp
    25f8:	930d      	str	r3, [sp, #52]	; 0x34
  op_params.stride_height = params->stride_height;
    25fa:	f9bd 5008 	ldrsh.w	r5, [sp, #8]
  op_params.dilation_width_factor = params->dilation_width_factor;
    25fe:	f9bd e00c 	ldrsh.w	lr, [sp, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
    2602:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
  op_params.padding_values.width = data.padding.width;
    2606:	f9bd 4000 	ldrsh.w	r4, [sp]
  op_params.padding_values.height = data.padding.height;
    260a:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    260e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    2610:	9a18      	ldr	r2, [sp, #96]	; 0x60
    2612:	4293      	cmp	r3, r2
    2614:	f300 80f0 	bgt.w	27f8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x350>

  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    2618:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    261a:	2b04      	cmp	r3, #4
    261c:	f040 80ee 	bne.w	27fc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x354>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    2620:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    2622:	2b04      	cmp	r3, #4
    2624:	f040 80ec 	bne.w	2800 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x358>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    2628:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    262a:	2b04      	cmp	r3, #4
    262c:	f040 80ea 	bne.w	2804 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x35c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2630:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    2632:	930a      	str	r3, [sp, #40]	; 0x28
    2634:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
    2636:	921e      	str	r2, [sp, #120]	; 0x78
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    2638:	429a      	cmp	r2, r3
    263a:	f040 80e5 	bne.w	2808 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x360>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    263e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    2640:	9307      	str	r3, [sp, #28]
    2642:	f8dd 9108 	ldr.w	r9, [sp, #264]	; 0x108
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    2646:	4599      	cmp	r9, r3
    2648:	f040 80e0 	bne.w	280c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x364>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    264c:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    264e:	930b      	str	r3, [sp, #44]	; 0x2c
    2650:	9a4e      	ldr	r2, [sp, #312]	; 0x138
    2652:	9212      	str	r2, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    2654:	429a      	cmp	r2, r3
    2656:	f040 80db 	bne.w	2810 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x368>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (bias_data) {
    265a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    265c:	b1ab      	cbz	r3, 268a <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x1e2>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    265e:	9a44      	ldr	r2, [sp, #272]	; 0x110
    2660:	2a05      	cmp	r2, #5
    2662:	bfcc      	ite	gt
    2664:	9945      	ldrgt	r1, [sp, #276]	; 0x114
    2666:	a945      	addle	r1, sp, #276	; 0x114
    for (int i = 0; i < size_; i++) {
    2668:	2a00      	cmp	r2, #0
    266a:	f340 80d3 	ble.w	2814 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x36c>
    266e:	460b      	mov	r3, r1
    2670:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    2674:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
    2676:	f853 0b04 	ldr.w	r0, [r3], #4
    267a:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
    267e:	4299      	cmp	r1, r3
    2680:	d1f9      	bne.n	2676 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x1ce>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    2682:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2684:	429a      	cmp	r2, r3
    2686:	f040 80c7 	bne.w	2818 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x370>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    268a:	f8dd b0e8 	ldr.w	fp, [sp, #232]	; 0xe8
    268e:	f8dd c0ec 	ldr.w	ip, [sp, #236]	; 0xec
    2692:	9b40      	ldr	r3, [sp, #256]	; 0x100
    2694:	9305      	str	r3, [sp, #20]
    2696:	f8dd a104 	ldr.w	sl, [sp, #260]	; 0x104
    269a:	994c      	ldr	r1, [sp, #304]	; 0x130
    269c:	9114      	str	r1, [sp, #80]	; 0x50
    269e:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    26a0:	461a      	mov	r2, r3
    26a2:	9322      	str	r3, [sp, #136]	; 0x88
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
    26a4:	981e      	ldr	r0, [sp, #120]	; 0x78
    26a6:	2800      	cmp	r0, #0
    26a8:	f340 81f8 	ble.w	2a9c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x5f4>
  op_params.output_shift = -data.output_shift;
    26ac:	4279      	negs	r1, r7
    26ae:	2900      	cmp	r1, #0
    26b0:	bfd4      	ite	le
    26b2:	4638      	movle	r0, r7
    26b4:	2000      	movgt	r0, #0
    26b6:	9024      	str	r0, [sp, #144]	; 0x90
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
  assert(exponent <= 31);
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    26b8:	2301      	movs	r3, #1
    26ba:	4083      	lsls	r3, r0
    26bc:	1e58      	subs	r0, r3, #1
    26be:	9032      	str	r0, [sp, #200]	; 0xc8
  return a >> offset;
    26c0:	1040      	asrs	r0, r0, #1
    26c2:	9033      	str	r0, [sp, #204]	; 0xcc
    26c4:	9812      	ldr	r0, [sp, #72]	; 0x48
    26c6:	902f      	str	r0, [sp, #188]	; 0xbc
    26c8:	4617      	mov	r7, r2
    26ca:	4613      	mov	r3, r2
    26cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
    26ce:	fb03 f302 	mul.w	r3, r3, r2
    26d2:	fb00 f003 	mul.w	r0, r0, r3
    26d6:	9030      	str	r0, [sp, #192]	; 0xc0
    26d8:	9806      	ldr	r0, [sp, #24]
    26da:	9020      	str	r0, [sp, #128]	; 0x80
    26dc:	fb0c f30b 	mul.w	r3, ip, fp
    26e0:	9807      	ldr	r0, [sp, #28]
    26e2:	fb00 f203 	mul.w	r2, r0, r3
    26e6:	922e      	str	r2, [sp, #184]	; 0xb8
    26e8:	f1c8 0800 	rsb	r8, r8, #0
    26ec:	f8cd 80c4 	str.w	r8, [sp, #196]	; 0xc4
    26f0:	4263      	negs	r3, r4
    26f2:	932c      	str	r3, [sp, #176]	; 0xb0
    26f4:	fb08 f30c 	mul.w	r3, r8, ip
    26f8:	1b1b      	subs	r3, r3, r4
    26fa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    26fc:	fb00 4403 	mla	r4, r0, r3, r4
    2700:	941d      	str	r4, [sp, #116]	; 0x74
    2702:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2704:	461a      	mov	r2, r3
    2706:	fb02 f407 	mul.w	r4, r2, r7
    270a:	942b      	str	r4, [sp, #172]	; 0xac
    270c:	952a      	str	r5, [sp, #168]	; 0xa8
    270e:	4602      	mov	r2, r0
    2710:	fb00 f30c 	mul.w	r3, r0, ip
    2714:	fb03 f005 	mul.w	r0, r3, r5
    2718:	9036      	str	r0, [sp, #216]	; 0xd8
    271a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    271c:	9428      	str	r4, [sp, #160]	; 0xa0
    271e:	4610      	mov	r0, r2
    2720:	fb02 f404 	mul.w	r4, r2, r4
    2724:	9429      	str	r4, [sp, #164]	; 0xa4
    2726:	f8cd 9010 	str.w	r9, [sp, #16]
    272a:	9a05      	ldr	r2, [sp, #20]
    272c:	fb0a f202 	mul.w	r2, sl, r2
    2730:	fb09 f202 	mul.w	r2, r9, r2
    2734:	922d      	str	r2, [sp, #180]	; 0xb4
    2736:	fb09 f20a 	mul.w	r2, r9, sl
    273a:	9211      	str	r2, [sp, #68]	; 0x44
    273c:	9610      	str	r6, [sp, #64]	; 0x40
    273e:	fb03 f306 	mul.w	r3, r3, r6
    2742:	930f      	str	r3, [sp, #60]	; 0x3c
    2744:	f8cd e008 	str.w	lr, [sp, #8]
    2748:	fb00 f30e 	mul.w	r3, r0, lr
    274c:	9303      	str	r3, [sp, #12]
    274e:	2300      	movs	r3, #0
    2750:	9306      	str	r3, [sp, #24]
  std::int64_t b_64(b);
    2752:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2754:	461c      	mov	r4, r3
    2756:	17dd      	asrs	r5, r3, #31
    2758:	e9cd 4534 	strd	r4, r5, [sp, #208]	; 0xd0

inline int32 MultiplyByQuantizedMultiplier(int32 x, int32 quantized_multiplier,
                                           int shift) {
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
    275c:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
    2760:	9337      	str	r3, [sp, #220]	; 0xdc
    for (int out_y = 0; out_y < output_height; ++out_y) {
    2762:	9b14      	ldr	r3, [sp, #80]	; 0x50
    2764:	2b00      	cmp	r3, #0
    2766:	f340 818a 	ble.w	2a7e <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x5d6>
    276a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    276c:	9323      	str	r3, [sp, #140]	; 0x8c
    276e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2770:	9319      	str	r3, [sp, #100]	; 0x64
    2772:	9b20      	ldr	r3, [sp, #128]	; 0x80
    2774:	931f      	str	r3, [sp, #124]	; 0x7c
    2776:	2300      	movs	r3, #0
    2778:	931c      	str	r3, [sp, #112]	; 0x70
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    277a:	465b      	mov	r3, fp
    277c:	46d3      	mov	fp, sl
    277e:	46e2      	mov	sl, ip
    2780:	469c      	mov	ip, r3
      for (int out_x = 0; out_x < output_width; ++out_x) {
    2782:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2784:	2b00      	cmp	r3, #0
    2786:	f340 8163 	ble.w	2a50 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x5a8>
    278a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    278c:	930e      	str	r3, [sp, #56]	; 0x38
    278e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    2790:	9316      	str	r3, [sp, #88]	; 0x58
    2792:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    2794:	9315      	str	r3, [sp, #84]	; 0x54
    2796:	2300      	movs	r3, #0
    2798:	931b      	str	r3, [sp, #108]	; 0x6c
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    279a:	46e0      	mov	r8, ip
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    279c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    279e:	2b00      	cmp	r3, #0
    27a0:	f340 8142 	ble.w	2a28 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x580>
    27a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    27a6:	9321      	str	r3, [sp, #132]	; 0x84
    27a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    27aa:	9327      	str	r3, [sp, #156]	; 0x9c
    27ac:	f04f 0c00 	mov.w	ip, #0
    27b0:	e106      	b.n	29c0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x518>
  RuntimeShape() : size_(0) {}
    27b2:	2300      	movs	r3, #0
    27b4:	9338      	str	r3, [sp, #224]	; 0xe0
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    27b6:	930c      	str	r3, [sp, #48]	; 0x30
    27b8:	e6b3      	b.n	2522 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x7a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    27ba:	a839      	add	r0, sp, #228	; 0xe4
    27bc:	e6ab      	b.n	2516 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x6e>
  RuntimeShape() : size_(0) {}
    27be:	2300      	movs	r3, #0
    27c0:	933e      	str	r3, [sp, #248]	; 0xf8
    27c2:	9326      	str	r3, [sp, #152]	; 0x98
    27c4:	e6c9      	b.n	255a <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xb2>
    27c6:	bf00      	nop
    27c8:	1ffffffe 	.word	0x1ffffffe
    27cc:	0000a511 	.word	0x0000a511
    27d0:	000158c1 	.word	0x000158c1
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    27d4:	a83f      	add	r0, sp, #252	; 0xfc
    27d6:	e6b9      	b.n	254c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xa4>
  RuntimeShape() : size_(0) {}
    27d8:	2300      	movs	r3, #0
    27da:	9344      	str	r3, [sp, #272]	; 0x110
    27dc:	931a      	str	r3, [sp, #104]	; 0x68
    27de:	e6d8      	b.n	2592 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xea>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    27e0:	a845      	add	r0, sp, #276	; 0x114
    27e2:	e6cf      	b.n	2584 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xdc>
  RuntimeShape() : size_(0) {}
    27e4:	2300      	movs	r3, #0
    27e6:	934a      	str	r3, [sp, #296]	; 0x128
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    27e8:	9306      	str	r3, [sp, #24]
    27ea:	e6eb      	b.n	25c4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x11c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    27ec:	a84b      	add	r0, sp, #300	; 0x12c
    27ee:	e6e3      	b.n	25b8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x110>
  RuntimeShape() : size_(0) {}
    27f0:	9350      	str	r3, [sp, #320]	; 0x140
    27f2:	e6ff      	b.n	25f4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x14c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    27f4:	a851      	add	r0, sp, #324	; 0x144
    27f6:	e6f9      	b.n	25ec <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x144>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    27f8:	4b85      	ldr	r3, [pc, #532]	; (2a10 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    27fa:	4798      	blx	r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    27fc:	4b84      	ldr	r3, [pc, #528]	; (2a10 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    27fe:	4798      	blx	r3
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    2800:	4b83      	ldr	r3, [pc, #524]	; (2a10 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2802:	4798      	blx	r3
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    2804:	4b82      	ldr	r3, [pc, #520]	; (2a10 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2806:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    2808:	4b81      	ldr	r3, [pc, #516]	; (2a10 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    280a:	4798      	blx	r3
    280c:	4b80      	ldr	r3, [pc, #512]	; (2a10 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    280e:	4798      	blx	r3
    2810:	4b7f      	ldr	r3, [pc, #508]	; (2a10 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2812:	4798      	blx	r3
    int buffer_size = 1;
    2814:	2201      	movs	r2, #1
    2816:	e734      	b.n	2682 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x1da>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    2818:	4b7d      	ldr	r3, [pc, #500]	; (2a10 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    281a:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    281c:	4b7c      	ldr	r3, [pc, #496]	; (2a10 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    281e:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    2820:	4b7b      	ldr	r3, [pc, #492]	; (2a10 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2822:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    2824:	4b7a      	ldr	r3, [pc, #488]	; (2a10 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2826:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    2828:	4b79      	ldr	r3, [pc, #484]	; (2a10 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    282a:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    282c:	4b78      	ldr	r3, [pc, #480]	; (2a10 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    282e:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    2830:	4b77      	ldr	r3, [pc, #476]	; (2a10 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2832:	4798      	blx	r3
          const int in_x_origin = (out_x * stride_width) - pad_width;
          const int in_y_origin = (out_y * stride_height) - pad_height;
          int32 acc = 0;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    2834:	3301      	adds	r3, #1
    2836:	454b      	cmp	r3, r9
    2838:	d030      	beq.n	289c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x3f4>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    283a:	2a00      	cmp	r2, #0
    283c:	dbfa      	blt.n	2834 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x38c>
    283e:	4552      	cmp	r2, sl
    2840:	daf8      	bge.n	2834 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x38c>
    2842:	2900      	cmp	r1, #0
    2844:	dbf6      	blt.n	2834 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x38c>
    2846:	4541      	cmp	r1, r8
    2848:	daf4      	bge.n	2834 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x38c>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    284a:	9c06      	ldr	r4, [sp, #24]
    284c:	2c00      	cmp	r4, #0
    284e:	dbe5      	blt.n	281c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x374>
    2850:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    2852:	42a5      	cmp	r5, r4
    2854:	dde2      	ble.n	281c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x374>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    2856:	2b00      	cmp	r3, #0
    2858:	dbe2      	blt.n	2820 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x378>
    285a:	9c07      	ldr	r4, [sp, #28]
    285c:	429c      	cmp	r4, r3
    285e:	dddf      	ble.n	2820 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x378>
                    (in_y < input_height)) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
                                                      in_x, in_channel)];
    2860:	5cf4      	ldrb	r4, [r6, r3]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    2862:	f1bc 0f00 	cmp.w	ip, #0
    2866:	dbdd      	blt.n	2824 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x37c>
    2868:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    286a:	45bc      	cmp	ip, r7
    286c:	dada      	bge.n	2824 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x37c>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    286e:	f1be 0f00 	cmp.w	lr, #0
    2872:	dbd9      	blt.n	2828 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x380>
    2874:	9f05      	ldr	r7, [sp, #20]
    2876:	4577      	cmp	r7, lr
    2878:	ddd6      	ble.n	2828 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x380>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    287a:	2800      	cmp	r0, #0
    287c:	dbd6      	blt.n	282c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x384>
    287e:	4583      	cmp	fp, r0
    2880:	ddd4      	ble.n	282c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x384>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    2882:	4599      	cmp	r9, r3
    2884:	ddd4      	ble.n	2830 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x388>
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
                                         filter_x, in_channel)];
    2886:	9f00      	ldr	r7, [sp, #0]
    2888:	5cfd      	ldrb	r5, [r7, r3]
                  acc +=
                      (filter_val + filter_offset) * (input_val + input_offset);
    288a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    288c:	1bed      	subs	r5, r5, r7
    288e:	9f08      	ldr	r7, [sp, #32]
    2890:	1be4      	subs	r4, r4, r7
    2892:	9f01      	ldr	r7, [sp, #4]
    2894:	fb04 7405 	mla	r4, r4, r5, r7
    2898:	9401      	str	r4, [sp, #4]
    289a:	e7cb      	b.n	2834 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x38c>
    289c:	9f00      	ldr	r7, [sp, #0]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    289e:	3001      	adds	r0, #1
    28a0:	9b02      	ldr	r3, [sp, #8]
    28a2:	441a      	add	r2, r3
    28a4:	9b04      	ldr	r3, [sp, #16]
    28a6:	441f      	add	r7, r3
    28a8:	9b03      	ldr	r3, [sp, #12]
    28aa:	441e      	add	r6, r3
    28ac:	4558      	cmp	r0, fp
    28ae:	d005      	beq.n	28bc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x414>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    28b0:	f1b9 0f00 	cmp.w	r9, #0
    28b4:	ddf3      	ble.n	289e <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x3f6>
    28b6:	2300      	movs	r3, #0
    28b8:	9700      	str	r7, [sp, #0]
    28ba:	e7be      	b.n	283a <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x392>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    28bc:	f10e 0e01 	add.w	lr, lr, #1
    28c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    28c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    28c4:	4413      	add	r3, r2
    28c6:	930d      	str	r3, [sp, #52]	; 0x34
    28c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    28ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    28cc:	4413      	add	r3, r2
    28ce:	930c      	str	r3, [sp, #48]	; 0x30
    28d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    28d2:	4419      	add	r1, r3
    28d4:	9b05      	ldr	r3, [sp, #20]
    28d6:	459e      	cmp	lr, r3
    28d8:	d009      	beq.n	28ee <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x446>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    28da:	f1bb 0f00 	cmp.w	fp, #0
    28de:	dded      	ble.n	28bc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x414>
    28e0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    28e2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    28e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    28e6:	2000      	movs	r0, #0
    28e8:	e7e2      	b.n	28b0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x408>
          int32 acc = 0;
    28ea:	2300      	movs	r3, #0
    28ec:	9301      	str	r3, [sp, #4]
                }
              }
            }
          }
          if (bias_data) {
    28ee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    28f0:	b123      	cbz	r3, 28fc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x454>
            acc += bias_data[out_channel];
    28f2:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
    28f6:	9a01      	ldr	r2, [sp, #4]
    28f8:	441a      	add	r2, r3
    28fa:	9201      	str	r2, [sp, #4]
  int right_shift = shift > 0 ? 0 : -shift;
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    28fc:	9a01      	ldr	r2, [sp, #4]
    28fe:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    2900:	409a      	lsls	r2, r3
    2902:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2904:	4293      	cmp	r3, r2
    2906:	d067      	beq.n	29d8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x530>
  std::int64_t a_64(a);
    2908:	17d5      	asrs	r5, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    290a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    290c:	fb02 f103 	mul.w	r1, r2, r3
    2910:	9813      	ldr	r0, [sp, #76]	; 0x4c
    2912:	fb00 1105 	mla	r1, r0, r5, r1
    2916:	fba2 2300 	umull	r2, r3, r2, r0
    291a:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    291c:	2a00      	cmp	r2, #0
    291e:	f173 0100 	sbcs.w	r1, r3, #0
    2922:	f2c0 80cc 	blt.w	2abe <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x616>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    2926:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    292a:	f143 0300 	adc.w	r3, r3, #0
    292e:	4610      	mov	r0, r2
    2930:	4619      	mov	r1, r3
    2932:	2a00      	cmp	r2, #0
    2934:	f173 0400 	sbcs.w	r4, r3, #0
    2938:	f2c0 80d6 	blt.w	2ae8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x640>
    293c:	0fc3      	lsrs	r3, r0, #31
    293e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  assert(exponent >= 0);
    2942:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2944:	2a00      	cmp	r2, #0
    2946:	db4d      	blt.n	29e4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x53c>
  assert(exponent <= 31);
    2948:	9a24      	ldr	r2, [sp, #144]	; 0x90
    294a:	2a1f      	cmp	r2, #31
    294c:	dc51      	bgt.n	29f2 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x54a>
  return a + b;
    294e:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    2950:	eb02 71d3 	add.w	r1, r2, r3, lsr #31
  return a & b;
    2954:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    2956:	401a      	ands	r2, r3
  return a >> offset;
    2958:	9824      	ldr	r0, [sp, #144]	; 0x90
    295a:	4103      	asrs	r3, r0
  return a + b;
    295c:	4291      	cmp	r1, r2
    295e:	bfb8      	it	lt
    2960:	3301      	addlt	r3, #1
          }
          acc = MultiplyByQuantizedMultiplier(acc, output_multiplier,
                                              output_shift);
          acc += output_offset;
    2962:	9a25      	ldr	r2, [sp, #148]	; 0x94
    2964:	4413      	add	r3, r2
    2966:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    2968:	4293      	cmp	r3, r2
    296a:	bfb8      	it	lt
    296c:	4613      	movlt	r3, r2
    296e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    2970:	4293      	cmp	r3, r2
    2972:	bfa8      	it	ge
    2974:	4613      	movge	r3, r2
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    2976:	9a06      	ldr	r2, [sp, #24]
    2978:	2a00      	cmp	r2, #0
    297a:	db41      	blt.n	2a00 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x558>
    297c:	991e      	ldr	r1, [sp, #120]	; 0x78
    297e:	4291      	cmp	r1, r2
    2980:	dd3e      	ble.n	2a00 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x558>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    2982:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    2984:	2a00      	cmp	r2, #0
    2986:	db3d      	blt.n	2a04 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x55c>
    2988:	9914      	ldr	r1, [sp, #80]	; 0x50
    298a:	428a      	cmp	r2, r1
    298c:	da3a      	bge.n	2a04 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x55c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    298e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    2990:	2a00      	cmp	r2, #0
    2992:	db39      	blt.n	2a08 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x560>
    2994:	9922      	ldr	r1, [sp, #136]	; 0x88
    2996:	428a      	cmp	r2, r1
    2998:	da36      	bge.n	2a08 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x560>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    299a:	f1bc 0f00 	cmp.w	ip, #0
    299e:	db35      	blt.n	2a0c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x564>
    29a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    29a2:	4594      	cmp	ip, r2
    29a4:	da32      	bge.n	2a0c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x564>
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              static_cast<uint8>(acc);
    29a6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    29a8:	f802 3b01 	strb.w	r3, [r2], #1
    29ac:	9227      	str	r2, [sp, #156]	; 0x9c
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    29ae:	f10c 0c01 	add.w	ip, ip, #1
    29b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
    29b4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    29b6:	4413      	add	r3, r2
    29b8:	9321      	str	r3, [sp, #132]	; 0x84
    29ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
    29bc:	459c      	cmp	ip, r3
    29be:	d033      	beq.n	2a28 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x580>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    29c0:	9b05      	ldr	r3, [sp, #20]
    29c2:	2b00      	cmp	r3, #0
    29c4:	dd91      	ble.n	28ea <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x442>
    29c6:	9923      	ldr	r1, [sp, #140]	; 0x8c
    29c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    29ca:	930c      	str	r3, [sp, #48]	; 0x30
    29cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
    29ce:	930d      	str	r3, [sp, #52]	; 0x34
    29d0:	2300      	movs	r3, #0
    29d2:	9301      	str	r3, [sp, #4]
    29d4:	469e      	mov	lr, r3
    29d6:	e780      	b.n	28da <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x432>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    29d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    29dc:	d194      	bne.n	2908 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x460>
    29de:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    29e2:	e7ae      	b.n	2942 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x49a>
  assert(exponent >= 0);
    29e4:	4b0b      	ldr	r3, [pc, #44]	; (2a14 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x56c>)
    29e6:	4a0c      	ldr	r2, [pc, #48]	; (2a18 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x570>)
    29e8:	f44f 71b3 	mov.w	r1, #358	; 0x166
    29ec:	480b      	ldr	r0, [pc, #44]	; (2a1c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x574>)
    29ee:	4c0c      	ldr	r4, [pc, #48]	; (2a20 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x578>)
    29f0:	47a0      	blx	r4
  assert(exponent <= 31);
    29f2:	4b0c      	ldr	r3, [pc, #48]	; (2a24 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x57c>)
    29f4:	4a08      	ldr	r2, [pc, #32]	; (2a18 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x570>)
    29f6:	f240 1167 	movw	r1, #359	; 0x167
    29fa:	4808      	ldr	r0, [pc, #32]	; (2a1c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x574>)
    29fc:	4c08      	ldr	r4, [pc, #32]	; (2a20 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x578>)
    29fe:	47a0      	blx	r4
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    2a00:	4b03      	ldr	r3, [pc, #12]	; (2a10 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2a02:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    2a04:	4b02      	ldr	r3, [pc, #8]	; (2a10 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2a06:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    2a08:	4b01      	ldr	r3, [pc, #4]	; (2a10 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2a0a:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    2a0c:	4b00      	ldr	r3, [pc, #0]	; (2a10 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2a0e:	4798      	blx	r3
    2a10:	00014b3d 	.word	0x00014b3d
    2a14:	0002202c 	.word	0x0002202c
    2a18:	00021e88 	.word	0x00021e88
    2a1c:	0002203c 	.word	0x0002203c
    2a20:	00014b4d 	.word	0x00014b4d
    2a24:	0002206c 	.word	0x0002206c
      for (int out_x = 0; out_x < output_width; ++out_x) {
    2a28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    2a2a:	3301      	adds	r3, #1
    2a2c:	931b      	str	r3, [sp, #108]	; 0x6c
    2a2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    2a30:	992f      	ldr	r1, [sp, #188]	; 0xbc
    2a32:	440a      	add	r2, r1
    2a34:	9215      	str	r2, [sp, #84]	; 0x54
    2a36:	9a16      	ldr	r2, [sp, #88]	; 0x58
    2a38:	9929      	ldr	r1, [sp, #164]	; 0xa4
    2a3a:	440a      	add	r2, r1
    2a3c:	9216      	str	r2, [sp, #88]	; 0x58
    2a3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2a40:	9928      	ldr	r1, [sp, #160]	; 0xa0
    2a42:	440a      	add	r2, r1
    2a44:	920e      	str	r2, [sp, #56]	; 0x38
    2a46:	9a22      	ldr	r2, [sp, #136]	; 0x88
    2a48:	4293      	cmp	r3, r2
    2a4a:	f47f aea7 	bne.w	279c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2f4>
    2a4e:	46c4      	mov	ip, r8
    for (int out_y = 0; out_y < output_height; ++out_y) {
    2a50:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    2a52:	3301      	adds	r3, #1
    2a54:	931c      	str	r3, [sp, #112]	; 0x70
    2a56:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    2a58:	992b      	ldr	r1, [sp, #172]	; 0xac
    2a5a:	440a      	add	r2, r1
    2a5c:	921f      	str	r2, [sp, #124]	; 0x7c
    2a5e:	9a19      	ldr	r2, [sp, #100]	; 0x64
    2a60:	9936      	ldr	r1, [sp, #216]	; 0xd8
    2a62:	440a      	add	r2, r1
    2a64:	9219      	str	r2, [sp, #100]	; 0x64
    2a66:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    2a68:	992a      	ldr	r1, [sp, #168]	; 0xa8
    2a6a:	440a      	add	r2, r1
    2a6c:	9223      	str	r2, [sp, #140]	; 0x8c
    2a6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    2a70:	4293      	cmp	r3, r2
    2a72:	f47f ae86 	bne.w	2782 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2da>
    2a76:	4663      	mov	r3, ip
    2a78:	46d4      	mov	ip, sl
    2a7a:	46da      	mov	sl, fp
    2a7c:	469b      	mov	fp, r3
  for (int batch = 0; batch < batches; ++batch) {
    2a7e:	9b06      	ldr	r3, [sp, #24]
    2a80:	3301      	adds	r3, #1
    2a82:	9306      	str	r3, [sp, #24]
    2a84:	9a20      	ldr	r2, [sp, #128]	; 0x80
    2a86:	9930      	ldr	r1, [sp, #192]	; 0xc0
    2a88:	440a      	add	r2, r1
    2a8a:	9220      	str	r2, [sp, #128]	; 0x80
    2a8c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    2a8e:	992e      	ldr	r1, [sp, #184]	; 0xb8
    2a90:	440a      	add	r2, r1
    2a92:	921d      	str	r2, [sp, #116]	; 0x74
    2a94:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    2a96:	4293      	cmp	r3, r2
    2a98:	f47f ae63 	bne.w	2762 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2ba>
    if (size_ > kMaxSmallSize) {
    2a9c:	9b50      	ldr	r3, [sp, #320]	; 0x140
    2a9e:	2b05      	cmp	r3, #5
    2aa0:	dd03      	ble.n	2aaa <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x602>
      delete[] dims_pointer_;
    2aa2:	9851      	ldr	r0, [sp, #324]	; 0x144
    2aa4:	b108      	cbz	r0, 2aaa <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x602>
    2aa6:	4b13      	ldr	r3, [pc, #76]	; (2af4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x64c>)
    2aa8:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    2aaa:	9b44      	ldr	r3, [sp, #272]	; 0x110
    2aac:	2b05      	cmp	r3, #5
    2aae:	dd03      	ble.n	2ab8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x610>
      delete[] dims_pointer_;
    2ab0:	9845      	ldr	r0, [sp, #276]	; 0x114
    2ab2:	b108      	cbz	r0, 2ab8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x610>
    2ab4:	4b0f      	ldr	r3, [pc, #60]	; (2af4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x64c>)
    2ab6:	4798      	blx	r3
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
                      GetTensorData<uint8_t>(im2col), nullptr);
}
    2ab8:	b057      	add	sp, #348	; 0x15c
    2aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    2abe:	480e      	ldr	r0, [pc, #56]	; (2af8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x650>)
    2ac0:	f04f 31ff 	mov.w	r1, #4294967295
    2ac4:	1880      	adds	r0, r0, r2
    2ac6:	4159      	adcs	r1, r3
    2ac8:	4602      	mov	r2, r0
    2aca:	460b      	mov	r3, r1
    2acc:	2800      	cmp	r0, #0
    2ace:	f171 0400 	sbcs.w	r4, r1, #0
    2ad2:	db03      	blt.n	2adc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x634>
    2ad4:	0fc3      	lsrs	r3, r0, #31
    2ad6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    2ada:	e732      	b.n	2942 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x49a>
    2adc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2ae0:	2100      	movs	r1, #0
    2ae2:	1880      	adds	r0, r0, r2
    2ae4:	4159      	adcs	r1, r3
    2ae6:	e7f5      	b.n	2ad4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x62c>
    2ae8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2aec:	2100      	movs	r1, #0
    2aee:	1880      	adds	r0, r0, r2
    2af0:	4159      	adcs	r1, r3
    2af2:	e723      	b.n	293c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x494>
    2af4:	0000a461 	.word	0x0000a461
    2af8:	c0000001 	.word	0xc0000001

00002afc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_>:
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
                             TfLiteConvParams* params, const OpData& data,
                             const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             TfLiteTensor* im2col) {
    2afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b00:	b0cd      	sub	sp, #308	; 0x134
    2b02:	9d56      	ldr	r5, [sp, #344]	; 0x158
    2b04:	9c57      	ldr	r4, [sp, #348]	; 0x15c
  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.input_offset = -input->params.zero_point;
    2b06:	6929      	ldr	r1, [r5, #16]
    2b08:	9103      	str	r1, [sp, #12]
  op_params.output_offset = output->params.zero_point;
    2b0a:	9959      	ldr	r1, [sp, #356]	; 0x164
    2b0c:	6909      	ldr	r1, [r1, #16]
    2b0e:	9116      	str	r1, [sp, #88]	; 0x58
  op_params.stride_height = params->stride_height;
    2b10:	f8d2 9008 	ldr.w	r9, [r2, #8]
  op_params.stride_width = params->stride_width;
    2b14:	f8d2 8004 	ldr.w	r8, [r2, #4]
  op_params.dilation_height_factor = params->dilation_height_factor;
    2b18:	f8d2 b014 	ldr.w	fp, [r2, #20]
  op_params.dilation_width_factor = params->dilation_width_factor;
    2b1c:	f8d2 a010 	ldr.w	sl, [r2, #16]
  op_params.padding_values.height = data.padding.height;
    2b20:	685a      	ldr	r2, [r3, #4]
    2b22:	9200      	str	r2, [sp, #0]
  op_params.padding_values.width = data.padding.width;
    2b24:	681a      	ldr	r2, [r3, #0]
    2b26:	9201      	str	r2, [sp, #4]
  op_params.quantized_activation_min = data.output_activation_min;
    2b28:	6a1a      	ldr	r2, [r3, #32]
    2b2a:	9212      	str	r2, [sp, #72]	; 0x48
  op_params.quantized_activation_max = data.output_activation_max;
    2b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2b2e:	9213      	str	r2, [sp, #76]	; 0x4c

  reference_integer_ops::ConvPerChannel(
      op_params, data.per_channel_output_multiplier,
    2b30:	699a      	ldr	r2, [r3, #24]
    2b32:	9214      	str	r2, [sp, #80]	; 0x50
      data.per_channel_output_shift, GetTensorShape(input),
    2b34:	69db      	ldr	r3, [r3, #28]
    2b36:	9315      	str	r3, [sp, #84]	; 0x54
  if (tensor == nullptr) {
    2b38:	2d00      	cmp	r5, #0
    2b3a:	f000 8139 	beq.w	2db0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2b4>
  const int dims_size = dims->size;
    2b3e:	68af      	ldr	r7, [r5, #8]
    2b40:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    2b44:	9634      	str	r6, [sp, #208]	; 0xd0
    if (dimensions_count > kMaxSmallSize) {
    2b46:	2e05      	cmp	r6, #5
    2b48:	f340 8135 	ble.w	2db6 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2ba>
      dims_pointer_ = new int32[dimensions_count];
    2b4c:	4ba8      	ldr	r3, [pc, #672]	; (2df0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2f4>)
    2b4e:	429e      	cmp	r6, r3
    2b50:	bf94      	ite	ls
    2b52:	00b0      	lslls	r0, r6, #2
    2b54:	f04f 30ff 	movhi.w	r0, #4294967295
    2b58:	4ba6      	ldr	r3, [pc, #664]	; (2df4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2f8>)
    2b5a:	4798      	blx	r3
    2b5c:	9035      	str	r0, [sp, #212]	; 0xd4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2b5e:	00b2      	lsls	r2, r6, #2
    2b60:	4639      	mov	r1, r7
    2b62:	4ba5      	ldr	r3, [pc, #660]	; (2df8 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2fc>)
    2b64:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    2b66:	686f      	ldr	r7, [r5, #4]
  if (tensor == nullptr) {
    2b68:	2c00      	cmp	r4, #0
    2b6a:	f000 8126 	beq.w	2dba <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2be>
  const int dims_size = dims->size;
    2b6e:	68a6      	ldr	r6, [r4, #8]
    2b70:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    2b74:	953a      	str	r5, [sp, #232]	; 0xe8
    if (dimensions_count > kMaxSmallSize) {
    2b76:	2d05      	cmp	r5, #5
    2b78:	f340 8123 	ble.w	2dc2 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2c6>
      dims_pointer_ = new int32[dimensions_count];
    2b7c:	4b9c      	ldr	r3, [pc, #624]	; (2df0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2f4>)
    2b7e:	429d      	cmp	r5, r3
    2b80:	bf94      	ite	ls
    2b82:	00a8      	lslls	r0, r5, #2
    2b84:	f04f 30ff 	movhi.w	r0, #4294967295
    2b88:	4b9a      	ldr	r3, [pc, #616]	; (2df4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2f8>)
    2b8a:	4798      	blx	r3
    2b8c:	903b      	str	r0, [sp, #236]	; 0xec
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2b8e:	00aa      	lsls	r2, r5, #2
    2b90:	4631      	mov	r1, r6
    2b92:	4b99      	ldr	r3, [pc, #612]	; (2df8 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2fc>)
    2b94:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    2b96:	6863      	ldr	r3, [r4, #4]
    2b98:	931a      	str	r3, [sp, #104]	; 0x68
  if (tensor == nullptr) {
    2b9a:	9b58      	ldr	r3, [sp, #352]	; 0x160
    2b9c:	2b00      	cmp	r3, #0
    2b9e:	f000 8112 	beq.w	2dc6 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2ca>
  const int dims_size = dims->size;
    2ba2:	9b58      	ldr	r3, [sp, #352]	; 0x160
    2ba4:	689e      	ldr	r6, [r3, #8]
    2ba6:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    2baa:	9540      	str	r5, [sp, #256]	; 0x100
    if (dimensions_count > kMaxSmallSize) {
    2bac:	2d05      	cmp	r5, #5
    2bae:	f340 810d 	ble.w	2dcc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2d0>
      dims_pointer_ = new int32[dimensions_count];
    2bb2:	4b8f      	ldr	r3, [pc, #572]	; (2df0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2f4>)
    2bb4:	429d      	cmp	r5, r3
    2bb6:	bf94      	ite	ls
    2bb8:	00a8      	lslls	r0, r5, #2
    2bba:	f04f 30ff 	movhi.w	r0, #4294967295
    2bbe:	4b8d      	ldr	r3, [pc, #564]	; (2df4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2f8>)
    2bc0:	4798      	blx	r3
    2bc2:	9041      	str	r0, [sp, #260]	; 0x104
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2bc4:	00aa      	lsls	r2, r5, #2
    2bc6:	4631      	mov	r1, r6
    2bc8:	4b8b      	ldr	r3, [pc, #556]	; (2df8 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2fc>)
    2bca:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    2bcc:	9b58      	ldr	r3, [sp, #352]	; 0x160
    2bce:	685b      	ldr	r3, [r3, #4]
    2bd0:	9319      	str	r3, [sp, #100]	; 0x64
  if (tensor == nullptr) {
    2bd2:	9b59      	ldr	r3, [sp, #356]	; 0x164
    2bd4:	2b00      	cmp	r3, #0
    2bd6:	f000 80fb 	beq.w	2dd0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2d4>
  const int dims_size = dims->size;
    2bda:	9b59      	ldr	r3, [sp, #356]	; 0x164
    2bdc:	689d      	ldr	r5, [r3, #8]
    2bde:	f855 4b04 	ldr.w	r4, [r5], #4
    size_ = dimensions_count;
    2be2:	9446      	str	r4, [sp, #280]	; 0x118
    if (dimensions_count > kMaxSmallSize) {
    2be4:	2c05      	cmp	r4, #5
    2be6:	f340 80f6 	ble.w	2dd6 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2da>
      dims_pointer_ = new int32[dimensions_count];
    2bea:	4b81      	ldr	r3, [pc, #516]	; (2df0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2f4>)
    2bec:	429c      	cmp	r4, r3
    2bee:	bf94      	ite	ls
    2bf0:	00a0      	lslls	r0, r4, #2
    2bf2:	f04f 30ff 	movhi.w	r0, #4294967295
    2bf6:	4b7f      	ldr	r3, [pc, #508]	; (2df4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2f8>)
    2bf8:	4798      	blx	r3
    2bfa:	9047      	str	r0, [sp, #284]	; 0x11c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2bfc:	00a2      	lsls	r2, r4, #2
    2bfe:	4629      	mov	r1, r5
    2c00:	4b7d      	ldr	r3, [pc, #500]	; (2df8 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2fc>)
    2c02:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    2c04:	9b59      	ldr	r3, [sp, #356]	; 0x164
    2c06:	685e      	ldr	r6, [r3, #4]
  op_params.stride_width = params->stride_width;
    2c08:	fa0f f888 	sxth.w	r8, r8
  op_params.stride_height = params->stride_height;
    2c0c:	fa0f fe89 	sxth.w	lr, r9
  op_params.dilation_width_factor = params->dilation_width_factor;
    2c10:	fa0f fc8a 	sxth.w	ip, sl
  op_params.dilation_height_factor = params->dilation_height_factor;
    2c14:	fa0f fb8b 	sxth.w	fp, fp
  op_params.padding_values.width = data.padding.width;
    2c18:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
  op_params.padding_values.height = data.padding.height;
    2c1c:	f9bd 5000 	ldrsh.w	r5, [sp]
  // Set min and max value of the output.
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    2c20:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2c22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    2c24:	4293      	cmp	r3, r2
    2c26:	f300 80d8 	bgt.w	2dda <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2de>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    2c2a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    2c2c:	2b04      	cmp	r3, #4
    2c2e:	f040 80d6 	bne.w	2dde <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2e2>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    2c32:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    2c34:	2b04      	cmp	r3, #4
    2c36:	f040 80d4 	bne.w	2de2 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2e6>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    2c3a:	9b46      	ldr	r3, [sp, #280]	; 0x118
    2c3c:	2b04      	cmp	r3, #4
    2c3e:	f040 80d2 	bne.w	2de6 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2ea>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2c42:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    2c44:	9305      	str	r3, [sp, #20]
    2c46:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    2c48:	921b      	str	r2, [sp, #108]	; 0x6c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    2c4a:	429a      	cmp	r2, r3
    2c4c:	f040 80cd 	bne.w	2dea <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2ee>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2c50:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    2c52:	9304      	str	r3, [sp, #16]
    2c54:	f8dd 90f8 	ldr.w	r9, [sp, #248]	; 0xf8
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    2c58:	4599      	cmp	r9, r3
    2c5a:	f040 80d1 	bne.w	2e00 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x304>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2c5e:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    2c60:	9306      	str	r3, [sp, #24]
    2c62:	9a4a      	ldr	r2, [sp, #296]	; 0x128
    2c64:	920e      	str	r2, [sp, #56]	; 0x38
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    2c66:	429a      	cmp	r2, r3
    2c68:	f040 80cc 	bne.w	2e04 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x308>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (bias_data) {
    2c6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    2c6e:	b1ab      	cbz	r3, 2c9c <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x1a0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2c70:	9a40      	ldr	r2, [sp, #256]	; 0x100
    2c72:	2a05      	cmp	r2, #5
    2c74:	bfcc      	ite	gt
    2c76:	9841      	ldrgt	r0, [sp, #260]	; 0x104
    2c78:	a841      	addle	r0, sp, #260	; 0x104
    for (int i = 0; i < size_; i++) {
    2c7a:	2a00      	cmp	r2, #0
    2c7c:	f340 80c4 	ble.w	2e08 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x30c>
    2c80:	4603      	mov	r3, r0
    2c82:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    2c86:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
    2c88:	f853 1b04 	ldr.w	r1, [r3], #4
    2c8c:	fb01 f202 	mul.w	r2, r1, r2
    for (int i = 0; i < size_; i++) {
    2c90:	4298      	cmp	r0, r3
    2c92:	d1f9      	bne.n	2c88 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x18c>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    2c94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2c96:	4293      	cmp	r3, r2
    2c98:	f040 80b8 	bne.w	2e0c <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x310>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2c9c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    2c9e:	9307      	str	r3, [sp, #28]
    2ca0:	f8dd a0dc 	ldr.w	sl, [sp, #220]	; 0xdc
    2ca4:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    2ca6:	9302      	str	r3, [sp, #8]
    2ca8:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    2caa:	461a      	mov	r2, r3
    2cac:	9301      	str	r3, [sp, #4]
    2cae:	9948      	ldr	r1, [sp, #288]	; 0x120
    2cb0:	9117      	str	r1, [sp, #92]	; 0x5c
    2cb2:	9b49      	ldr	r3, [sp, #292]	; 0x124
    2cb4:	931c      	str	r3, [sp, #112]	; 0x70
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
    2cb6:	991b      	ldr	r1, [sp, #108]	; 0x6c
    2cb8:	2900      	cmp	r1, #0
    2cba:	f340 818a 	ble.w	2fd2 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x4d6>
    2cbe:	980e      	ldr	r0, [sp, #56]	; 0x38
    2cc0:	9032      	str	r0, [sp, #200]	; 0xc8
    2cc2:	4619      	mov	r1, r3
    2cc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    2cc6:	fb01 f303 	mul.w	r3, r1, r3
    2cca:	fb00 f003 	mul.w	r0, r0, r3
    2cce:	9029      	str	r0, [sp, #164]	; 0xa4
    2cd0:	9626      	str	r6, [sp, #152]	; 0x98
    2cd2:	9b07      	ldr	r3, [sp, #28]
    2cd4:	fb0a f303 	mul.w	r3, sl, r3
    2cd8:	9e04      	ldr	r6, [sp, #16]
    2cda:	fb06 f303 	mul.w	r3, r6, r3
    2cde:	932a      	str	r3, [sp, #168]	; 0xa8
    2ce0:	426d      	negs	r5, r5
    2ce2:	952b      	str	r5, [sp, #172]	; 0xac
    2ce4:	4263      	negs	r3, r4
    2ce6:	9330      	str	r3, [sp, #192]	; 0xc0
    2ce8:	fb0a f305 	mul.w	r3, sl, r5
    2cec:	1b1b      	subs	r3, r3, r4
    2cee:	fb06 7503 	mla	r5, r6, r3, r7
    2cf2:	9525      	str	r5, [sp, #148]	; 0x94
    2cf4:	980e      	ldr	r0, [sp, #56]	; 0x38
    2cf6:	fb00 f101 	mul.w	r1, r0, r1
    2cfa:	9133      	str	r1, [sp, #204]	; 0xcc
    2cfc:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
    2d00:	fb06 f30a 	mul.w	r3, r6, sl
    2d04:	fb0e f103 	mul.w	r1, lr, r3
    2d08:	912e      	str	r1, [sp, #184]	; 0xb8
    2d0a:	f8cd 80bc 	str.w	r8, [sp, #188]	; 0xbc
    2d0e:	fb06 f108 	mul.w	r1, r6, r8
    2d12:	912d      	str	r1, [sp, #180]	; 0xb4
    2d14:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    2d18:	4611      	mov	r1, r2
    2d1a:	9c02      	ldr	r4, [sp, #8]
    2d1c:	fb02 f204 	mul.w	r2, r2, r4
    2d20:	fb09 f202 	mul.w	r2, r9, r2
    2d24:	9231      	str	r2, [sp, #196]	; 0xc4
    2d26:	fb09 f201 	mul.w	r2, r9, r1
    2d2a:	9210      	str	r2, [sp, #64]	; 0x40
    2d2c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
    2d30:	fb0b f303 	mul.w	r3, fp, r3
    2d34:	930f      	str	r3, [sp, #60]	; 0x3c
    2d36:	f8cd c020 	str.w	ip, [sp, #32]
    2d3a:	fb06 f30c 	mul.w	r3, r6, ip
    2d3e:	930a      	str	r3, [sp, #40]	; 0x28
    2d40:	f04f 0b00 	mov.w	fp, #0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    2d44:	464b      	mov	r3, r9
    2d46:	46d9      	mov	r9, fp
    2d48:	469b      	mov	fp, r3
    for (int out_y = 0; out_y < output_height; ++out_y) {
    2d4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    2d4c:	2b00      	cmp	r3, #0
    2d4e:	f340 8132 	ble.w	2fb6 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x4ba>
    2d52:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    2d54:	931d      	str	r3, [sp, #116]	; 0x74
    2d56:	9b25      	ldr	r3, [sp, #148]	; 0x94
    2d58:	9328      	str	r3, [sp, #160]	; 0xa0
    2d5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2d5c:	9327      	str	r3, [sp, #156]	; 0x9c
    2d5e:	2300      	movs	r3, #0
    2d60:	9324      	str	r3, [sp, #144]	; 0x90
      for (int out_x = 0; out_x < output_width; ++out_x) {
    2d62:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    2d64:	2b00      	cmp	r3, #0
    2d66:	f340 8113 	ble.w	2f90 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x494>
    2d6a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    2d6c:	930d      	str	r3, [sp, #52]	; 0x34
    2d6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2d70:	931f      	str	r3, [sp, #124]	; 0x7c
    2d72:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    2d74:	931e      	str	r3, [sp, #120]	; 0x78
    2d76:	2300      	movs	r3, #0
    2d78:	9323      	str	r3, [sp, #140]	; 0x8c
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    2d7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2d7c:	2b00      	cmp	r3, #0
    2d7e:	f340 80f4 	ble.w	2f6a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x46e>
    2d82:	9b14      	ldr	r3, [sp, #80]	; 0x50
    2d84:	3b04      	subs	r3, #4
    2d86:	9320      	str	r3, [sp, #128]	; 0x80
    2d88:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2d8a:	3b04      	subs	r3, #4
    2d8c:	9321      	str	r3, [sp, #132]	; 0x84
    2d8e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    2d90:	9318      	str	r3, [sp, #96]	; 0x60
    2d92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2d94:	9322      	str	r3, [sp, #136]	; 0x88
    2d96:	f04f 0800 	mov.w	r8, #0
          const int in_x_origin = (out_x * stride_width) - pad_width;
          const int in_y_origin = (out_y * stride_height) - pad_height;
          int32 acc = 0;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    2d9a:	9b02      	ldr	r3, [sp, #8]
    2d9c:	2b00      	cmp	r3, #0
    2d9e:	dd6c      	ble.n	2e7a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x37e>
    2da0:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    2da2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    2da4:	930b      	str	r3, [sp, #44]	; 0x2c
    2da6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    2da8:	930c      	str	r3, [sp, #48]	; 0x30
    2daa:	2600      	movs	r6, #0
    2dac:	4635      	mov	r5, r6
    2dae:	e05a      	b.n	2e66 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x36a>
  RuntimeShape() : size_(0) {}
    2db0:	2700      	movs	r7, #0
    2db2:	9734      	str	r7, [sp, #208]	; 0xd0
    2db4:	e6d8      	b.n	2b68 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x6c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2db6:	a835      	add	r0, sp, #212	; 0xd4
    2db8:	e6d1      	b.n	2b5e <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x62>
  RuntimeShape() : size_(0) {}
    2dba:	2300      	movs	r3, #0
    2dbc:	933a      	str	r3, [sp, #232]	; 0xe8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    2dbe:	931a      	str	r3, [sp, #104]	; 0x68
    2dc0:	e6eb      	b.n	2b9a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x9e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2dc2:	a83b      	add	r0, sp, #236	; 0xec
    2dc4:	e6e3      	b.n	2b8e <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x92>
  RuntimeShape() : size_(0) {}
    2dc6:	9340      	str	r3, [sp, #256]	; 0x100
    2dc8:	9319      	str	r3, [sp, #100]	; 0x64
    2dca:	e702      	b.n	2bd2 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0xd6>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2dcc:	a841      	add	r0, sp, #260	; 0x104
    2dce:	e6f9      	b.n	2bc4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0xc8>
  RuntimeShape() : size_(0) {}
    2dd0:	2600      	movs	r6, #0
    2dd2:	9646      	str	r6, [sp, #280]	; 0x118
    2dd4:	e718      	b.n	2c08 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x10c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2dd6:	a847      	add	r0, sp, #284	; 0x11c
    2dd8:	e710      	b.n	2bfc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x100>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    2dda:	4b08      	ldr	r3, [pc, #32]	; (2dfc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x300>)
    2ddc:	4798      	blx	r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    2dde:	4b07      	ldr	r3, [pc, #28]	; (2dfc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x300>)
    2de0:	4798      	blx	r3
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    2de2:	4b06      	ldr	r3, [pc, #24]	; (2dfc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x300>)
    2de4:	4798      	blx	r3
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    2de6:	4b05      	ldr	r3, [pc, #20]	; (2dfc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x300>)
    2de8:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    2dea:	4b04      	ldr	r3, [pc, #16]	; (2dfc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x300>)
    2dec:	4798      	blx	r3
    2dee:	bf00      	nop
    2df0:	1ffffffe 	.word	0x1ffffffe
    2df4:	0000a511 	.word	0x0000a511
    2df8:	000158c1 	.word	0x000158c1
    2dfc:	00014b3d 	.word	0x00014b3d
    2e00:	4baf      	ldr	r3, [pc, #700]	; (30c0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    2e02:	4798      	blx	r3
    2e04:	4bae      	ldr	r3, [pc, #696]	; (30c0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    2e06:	4798      	blx	r3
    int buffer_size = 1;
    2e08:	2201      	movs	r2, #1
    2e0a:	e743      	b.n	2c94 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x198>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    2e0c:	4bac      	ldr	r3, [pc, #688]	; (30c0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    2e0e:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    2e10:	4bab      	ldr	r3, [pc, #684]	; (30c0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    2e12:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    2e14:	4baa      	ldr	r3, [pc, #680]	; (30c0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    2e16:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    2e18:	4ba9      	ldr	r3, [pc, #676]	; (30c0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    2e1a:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    2e1c:	4ba8      	ldr	r3, [pc, #672]	; (30c0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    2e1e:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    2e20:	4ba7      	ldr	r3, [pc, #668]	; (30c0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    2e22:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    2e24:	4ba6      	ldr	r3, [pc, #664]	; (30c0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    2e26:	4798      	blx	r3
    2e28:	9e00      	ldr	r6, [sp, #0]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    2e2a:	3001      	adds	r0, #1
    2e2c:	9b08      	ldr	r3, [sp, #32]
    2e2e:	441a      	add	r2, r3
    2e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2e32:	449c      	add	ip, r3
    2e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2e36:	449e      	add	lr, r3
    2e38:	9b01      	ldr	r3, [sp, #4]
    2e3a:	4298      	cmp	r0, r3
    2e3c:	d005      	beq.n	2e4a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x34e>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    2e3e:	f1bb 0f00 	cmp.w	fp, #0
    2e42:	ddf2      	ble.n	2e2a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x32e>
    2e44:	2300      	movs	r3, #0
    2e46:	9600      	str	r6, [sp, #0]
    2e48:	e120      	b.n	308c <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x590>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    2e4a:	3501      	adds	r5, #1
    2e4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2e4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2e50:	4413      	add	r3, r2
    2e52:	930c      	str	r3, [sp, #48]	; 0x30
    2e54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2e56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2e58:	4413      	add	r3, r2
    2e5a:	930b      	str	r3, [sp, #44]	; 0x2c
    2e5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2e5e:	441c      	add	r4, r3
    2e60:	9b02      	ldr	r3, [sp, #8]
    2e62:	429d      	cmp	r5, r3
    2e64:	d00a      	beq.n	2e7c <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x380>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    2e66:	9b01      	ldr	r3, [sp, #4]
    2e68:	2b00      	cmp	r3, #0
    2e6a:	ddee      	ble.n	2e4a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x34e>
    2e6c:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
    2e70:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    2e74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    2e76:	2000      	movs	r0, #0
    2e78:	e7e1      	b.n	2e3e <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x342>
          int32 acc = 0;
    2e7a:	2600      	movs	r6, #0
                }
              }
            }
          }

          if (bias_data) {
    2e7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    2e7e:	b113      	cbz	r3, 2e86 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x38a>
            acc += bias_data[out_channel];
    2e80:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
    2e84:	441e      	add	r6, r3
          }
          acc = MultiplyByQuantizedMultiplier(
    2e86:	9b20      	ldr	r3, [sp, #128]	; 0x80
    2e88:	f853 0f04 	ldr.w	r0, [r3, #4]!
    2e8c:	9320      	str	r3, [sp, #128]	; 0x80
    2e8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    2e90:	f853 7f04 	ldr.w	r7, [r3, #4]!
    2e94:	9321      	str	r3, [sp, #132]	; 0x84
  int left_shift = shift > 0 ? shift : 0;
    2e96:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    2e9a:	2f00      	cmp	r7, #0
    2e9c:	bfd4      	ite	le
    2e9e:	427f      	negle	r7, r7
    2ea0:	2700      	movgt	r7, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    2ea2:	4096      	lsls	r6, r2
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    2ea4:	42b0      	cmp	r0, r6
    2ea6:	f000 809e 	beq.w	2fe6 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x4ea>
  std::int64_t a_64(a);
    2eaa:	17f5      	asrs	r5, r6, #31
  std::int64_t b_64(b);
    2eac:	17c3      	asrs	r3, r0, #31
  std::int64_t ab_64 = a_64 * b_64;
    2eae:	fb06 f103 	mul.w	r1, r6, r3
    2eb2:	fb00 1105 	mla	r1, r0, r5, r1
    2eb6:	fba6 2300 	umull	r2, r3, r6, r0
    2eba:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    2ebc:	2a00      	cmp	r2, #0
    2ebe:	f173 0100 	sbcs.w	r1, r3, #0
    2ec2:	f2c0 80ed 	blt.w	30a0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5a4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    2ec6:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    2eca:	f143 0300 	adc.w	r3, r3, #0
    2ece:	4610      	mov	r0, r2
    2ed0:	4619      	mov	r1, r3
    2ed2:	2a00      	cmp	r2, #0
    2ed4:	f173 0400 	sbcs.w	r4, r3, #0
    2ed8:	f2c0 8108 	blt.w	30ec <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5f0>
    2edc:	0fc3      	lsrs	r3, r0, #31
    2ede:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    2ee2:	4618      	mov	r0, r3
  assert(exponent >= 0);
    2ee4:	2f00      	cmp	r7, #0
    2ee6:	f2c0 8085 	blt.w	2ff4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x4f8>
  assert(exponent <= 31);
    2eea:	2f1f      	cmp	r7, #31
    2eec:	f300 8089 	bgt.w	3002 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x506>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    2ef0:	2301      	movs	r3, #1
    2ef2:	40bb      	lsls	r3, r7
    2ef4:	3b01      	subs	r3, #1
  return a >> offset;
    2ef6:	105a      	asrs	r2, r3, #1
  return a + b;
    2ef8:	eb02 71d0 	add.w	r1, r2, r0, lsr #31
  return a & b;
    2efc:	ea00 0203 	and.w	r2, r0, r3
  return a >> offset;
    2f00:	fa40 f307 	asr.w	r3, r0, r7
  return a + b;
    2f04:	4291      	cmp	r1, r2
    2f06:	bfb8      	it	lt
    2f08:	3301      	addlt	r3, #1
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          acc += output_offset;
    2f0a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    2f0c:	4413      	add	r3, r2
    2f0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    2f10:	4293      	cmp	r3, r2
    2f12:	bfb8      	it	lt
    2f14:	4613      	movlt	r3, r2
    2f16:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    2f18:	4293      	cmp	r3, r2
    2f1a:	bfa8      	it	ge
    2f1c:	4613      	movge	r3, r2
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    2f1e:	f1b9 0f00 	cmp.w	r9, #0
    2f22:	db75      	blt.n	3010 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x514>
    2f24:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    2f26:	454a      	cmp	r2, r9
    2f28:	dd72      	ble.n	3010 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x514>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    2f2a:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2f2c:	2a00      	cmp	r2, #0
    2f2e:	db71      	blt.n	3014 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x518>
    2f30:	9917      	ldr	r1, [sp, #92]	; 0x5c
    2f32:	428a      	cmp	r2, r1
    2f34:	da6e      	bge.n	3014 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x518>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    2f36:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    2f38:	2a00      	cmp	r2, #0
    2f3a:	db6d      	blt.n	3018 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x51c>
    2f3c:	991c      	ldr	r1, [sp, #112]	; 0x70
    2f3e:	428a      	cmp	r2, r1
    2f40:	da6a      	bge.n	3018 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x51c>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    2f42:	f1b8 0f00 	cmp.w	r8, #0
    2f46:	db69      	blt.n	301c <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x520>
    2f48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2f4a:	4542      	cmp	r2, r8
    2f4c:	dd66      	ble.n	301c <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x520>
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              static_cast<int8_t>(acc);
    2f4e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    2f50:	f802 3b01 	strb.w	r3, [r2], #1
    2f54:	9222      	str	r2, [sp, #136]	; 0x88
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    2f56:	f108 0801 	add.w	r8, r8, #1
    2f5a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    2f5c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    2f5e:	4413      	add	r3, r2
    2f60:	9318      	str	r3, [sp, #96]	; 0x60
    2f62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2f64:	4598      	cmp	r8, r3
    2f66:	f47f af18 	bne.w	2d9a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x29e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    2f6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2f6c:	3301      	adds	r3, #1
    2f6e:	9323      	str	r3, [sp, #140]	; 0x8c
    2f70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    2f72:	9932      	ldr	r1, [sp, #200]	; 0xc8
    2f74:	440a      	add	r2, r1
    2f76:	921e      	str	r2, [sp, #120]	; 0x78
    2f78:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    2f7a:	992d      	ldr	r1, [sp, #180]	; 0xb4
    2f7c:	440a      	add	r2, r1
    2f7e:	921f      	str	r2, [sp, #124]	; 0x7c
    2f80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    2f82:	992f      	ldr	r1, [sp, #188]	; 0xbc
    2f84:	440a      	add	r2, r1
    2f86:	920d      	str	r2, [sp, #52]	; 0x34
    2f88:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    2f8a:	4293      	cmp	r3, r2
    2f8c:	f47f aef5 	bne.w	2d7a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x27e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    2f90:	9b24      	ldr	r3, [sp, #144]	; 0x90
    2f92:	3301      	adds	r3, #1
    2f94:	9324      	str	r3, [sp, #144]	; 0x90
    2f96:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    2f98:	9933      	ldr	r1, [sp, #204]	; 0xcc
    2f9a:	440a      	add	r2, r1
    2f9c:	9227      	str	r2, [sp, #156]	; 0x9c
    2f9e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    2fa0:	992e      	ldr	r1, [sp, #184]	; 0xb8
    2fa2:	440a      	add	r2, r1
    2fa4:	9228      	str	r2, [sp, #160]	; 0xa0
    2fa6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    2fa8:	992c      	ldr	r1, [sp, #176]	; 0xb0
    2faa:	440a      	add	r2, r1
    2fac:	921d      	str	r2, [sp, #116]	; 0x74
    2fae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    2fb0:	4293      	cmp	r3, r2
    2fb2:	f47f aed6 	bne.w	2d62 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x266>
  for (int batch = 0; batch < batches; ++batch) {
    2fb6:	f109 0901 	add.w	r9, r9, #1
    2fba:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2fbc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    2fbe:	4413      	add	r3, r2
    2fc0:	9326      	str	r3, [sp, #152]	; 0x98
    2fc2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    2fc4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    2fc6:	4413      	add	r3, r2
    2fc8:	9325      	str	r3, [sp, #148]	; 0x94
    2fca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    2fcc:	4599      	cmp	r9, r3
    2fce:	f47f aebc 	bne.w	2d4a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x24e>
    if (size_ > kMaxSmallSize) {
    2fd2:	9b40      	ldr	r3, [sp, #256]	; 0x100
    2fd4:	2b05      	cmp	r3, #5
    2fd6:	dd03      	ble.n	2fe0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x4e4>
      delete[] dims_pointer_;
    2fd8:	9841      	ldr	r0, [sp, #260]	; 0x104
    2fda:	b108      	cbz	r0, 2fe0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x4e4>
    2fdc:	4b39      	ldr	r3, [pc, #228]	; (30c4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c8>)
    2fde:	4798      	blx	r3
      GetTensorData<int8>(input), GetTensorShape(filter),
      GetTensorData<int8>(filter), GetTensorShape(bias),
      GetTensorData<int32>(bias), GetTensorShape(output),
      GetTensorData<int8>(output));
}
    2fe0:	b04d      	add	sp, #308	; 0x134
    2fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    2fe6:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
    2fea:	f47f af5e 	bne.w	2eaa <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x3ae>
    2fee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    2ff2:	e776      	b.n	2ee2 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x3e6>
  assert(exponent >= 0);
    2ff4:	4b34      	ldr	r3, [pc, #208]	; (30c8 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5cc>)
    2ff6:	4a35      	ldr	r2, [pc, #212]	; (30cc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5d0>)
    2ff8:	f44f 71b3 	mov.w	r1, #358	; 0x166
    2ffc:	4834      	ldr	r0, [pc, #208]	; (30d0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5d4>)
    2ffe:	4c35      	ldr	r4, [pc, #212]	; (30d4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5d8>)
    3000:	47a0      	blx	r4
  assert(exponent <= 31);
    3002:	4b35      	ldr	r3, [pc, #212]	; (30d8 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5dc>)
    3004:	4a31      	ldr	r2, [pc, #196]	; (30cc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5d0>)
    3006:	f240 1167 	movw	r1, #359	; 0x167
    300a:	4831      	ldr	r0, [pc, #196]	; (30d0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5d4>)
    300c:	4c31      	ldr	r4, [pc, #196]	; (30d4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5d8>)
    300e:	47a0      	blx	r4
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    3010:	4b2b      	ldr	r3, [pc, #172]	; (30c0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    3012:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    3014:	4b2a      	ldr	r3, [pc, #168]	; (30c0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    3016:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    3018:	4b29      	ldr	r3, [pc, #164]	; (30c0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    301a:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    301c:	4b28      	ldr	r3, [pc, #160]	; (30c0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    301e:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    3020:	f1b9 0f00 	cmp.w	r9, #0
    3024:	f6ff aef4 	blt.w	2e10 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x314>
    3028:	9905      	ldr	r1, [sp, #20]
    302a:	4549      	cmp	r1, r9
    302c:	f77f aef0 	ble.w	2e10 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x314>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    3030:	2b00      	cmp	r3, #0
    3032:	f6ff aeef 	blt.w	2e14 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x318>
    3036:	9904      	ldr	r1, [sp, #16]
    3038:	4299      	cmp	r1, r3
    303a:	f77f aeeb 	ble.w	2e14 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x318>
                                                      in_x, in_channel)];
    303e:	f91e 1003 	ldrsb.w	r1, [lr, r3]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    3042:	f1b8 0f00 	cmp.w	r8, #0
    3046:	f6ff aee7 	blt.w	2e18 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x31c>
    304a:	9e06      	ldr	r6, [sp, #24]
    304c:	4546      	cmp	r6, r8
    304e:	f77f aee3 	ble.w	2e18 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x31c>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    3052:	2d00      	cmp	r5, #0
    3054:	f6ff aee2 	blt.w	2e1c <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x320>
    3058:	9e02      	ldr	r6, [sp, #8]
    305a:	42ae      	cmp	r6, r5
    305c:	f77f aede 	ble.w	2e1c <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x320>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    3060:	2800      	cmp	r0, #0
    3062:	f6ff aedd 	blt.w	2e20 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x324>
    3066:	9e01      	ldr	r6, [sp, #4]
    3068:	4286      	cmp	r6, r0
    306a:	f77f aed9 	ble.w	2e20 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x324>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    306e:	459b      	cmp	fp, r3
    3070:	f77f aed8 	ble.w	2e24 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x328>
                                         filter_x, in_channel)];
    3074:	f91c 7003 	ldrsb.w	r7, [ip, r3]
                  acc += filter_val * (input_val + input_offset);
    3078:	9e03      	ldr	r6, [sp, #12]
    307a:	1b89      	subs	r1, r1, r6
    307c:	9e00      	ldr	r6, [sp, #0]
    307e:	fb01 6107 	mla	r1, r1, r7, r6
    3082:	9100      	str	r1, [sp, #0]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    3084:	3301      	adds	r3, #1
    3086:	455b      	cmp	r3, fp
    3088:	f43f aece 	beq.w	2e28 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x32c>
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    308c:	2a00      	cmp	r2, #0
    308e:	dbf9      	blt.n	3084 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x588>
    3090:	4552      	cmp	r2, sl
    3092:	daf7      	bge.n	3084 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x588>
    3094:	2c00      	cmp	r4, #0
    3096:	dbf5      	blt.n	3084 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x588>
    3098:	9907      	ldr	r1, [sp, #28]
    309a:	428c      	cmp	r4, r1
    309c:	dbc0      	blt.n	3020 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x524>
    309e:	e7f1      	b.n	3084 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x588>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    30a0:	480e      	ldr	r0, [pc, #56]	; (30dc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5e0>)
    30a2:	f04f 31ff 	mov.w	r1, #4294967295
    30a6:	1880      	adds	r0, r0, r2
    30a8:	4159      	adcs	r1, r3
    30aa:	4602      	mov	r2, r0
    30ac:	460b      	mov	r3, r1
    30ae:	2800      	cmp	r0, #0
    30b0:	f171 0400 	sbcs.w	r4, r1, #0
    30b4:	db14      	blt.n	30e0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5e4>
    30b6:	0fc3      	lsrs	r3, r0, #31
    30b8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    30bc:	e711      	b.n	2ee2 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x3e6>
    30be:	bf00      	nop
    30c0:	00014b3d 	.word	0x00014b3d
    30c4:	0000a461 	.word	0x0000a461
    30c8:	0002202c 	.word	0x0002202c
    30cc:	00021e88 	.word	0x00021e88
    30d0:	0002203c 	.word	0x0002203c
    30d4:	00014b4d 	.word	0x00014b4d
    30d8:	0002206c 	.word	0x0002206c
    30dc:	c0000001 	.word	0xc0000001
    30e0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    30e4:	2100      	movs	r1, #0
    30e6:	1880      	adds	r0, r0, r2
    30e8:	4159      	adcs	r1, r3
    30ea:	e7e4      	b.n	30b6 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5ba>
    30ec:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    30f0:	2100      	movs	r1, #0
    30f2:	1880      	adds	r0, r0, r2
    30f4:	4159      	adcs	r1, r3
    30f6:	e6f1      	b.n	2edc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x3e0>

000030f8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>:

void EvalFloat(TfLiteContext* context, TfLiteNode* node,
               TfLiteConvParams* params, const OpData& data,
               const TfLiteTensor* input, const TfLiteTensor* filter,
               const TfLiteTensor* bias, TfLiteTensor* im2col,
               TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
    30f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30fc:	b0d1      	sub	sp, #324	; 0x144
    30fe:	9c5a      	ldr	r4, [sp, #360]	; 0x168
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
    3100:	7b11      	ldrb	r1, [r2, #12]
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
    3102:	2901      	cmp	r1, #1
    3104:	f000 816a 	beq.w	33dc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2e4>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
    3108:	2903      	cmp	r1, #3
    310a:	f000 816c 	beq.w	33e6 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2ee>
    *activation_min = 0;
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    310e:	2902      	cmp	r1, #2
    3110:	f000 816e 	beq.w	33f0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2f8>
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
    3114:	49ad      	ldr	r1, [pc, #692]	; (33cc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2d4>)
    3116:	9116      	str	r1, [sp, #88]	; 0x58
    *activation_min = std::numeric_limits<T>::lowest();
    3118:	f46f 0100 	mvn.w	r1, #8388608	; 0x800000
    311c:	9115      	str	r1, [sp, #84]	; 0x54
                           &output_activation_max);
  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
  op_params.padding_values.width = data.padding.width;
    311e:	f8d3 b000 	ldr.w	fp, [r3]
  op_params.padding_values.height = data.padding.height;
    3122:	685b      	ldr	r3, [r3, #4]
    3124:	9301      	str	r3, [sp, #4]
  op_params.stride_width = params->stride_width;
    3126:	f8d2 8004 	ldr.w	r8, [r2, #4]
  op_params.stride_height = params->stride_height;
    312a:	6895      	ldr	r5, [r2, #8]
  op_params.dilation_width_factor = params->dilation_width_factor;
    312c:	f8d2 9010 	ldr.w	r9, [r2, #16]
  op_params.dilation_height_factor = params->dilation_height_factor;
    3130:	f8d2 a014 	ldr.w	sl, [r2, #20]
  if (tensor == nullptr) {
    3134:	2c00      	cmp	r4, #0
    3136:	f000 8161 	beq.w	33fc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x304>
  const int dims_size = dims->size;
    313a:	68a7      	ldr	r7, [r4, #8]
    313c:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    3140:	9632      	str	r6, [sp, #200]	; 0xc8
    if (dimensions_count > kMaxSmallSize) {
    3142:	2e05      	cmp	r6, #5
    3144:	f340 815e 	ble.w	3404 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x30c>
      dims_pointer_ = new int32[dimensions_count];
    3148:	4ba1      	ldr	r3, [pc, #644]	; (33d0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2d8>)
    314a:	429e      	cmp	r6, r3
    314c:	bf94      	ite	ls
    314e:	00b0      	lslls	r0, r6, #2
    3150:	f04f 30ff 	movhi.w	r0, #4294967295
    3154:	4b9f      	ldr	r3, [pc, #636]	; (33d4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2dc>)
    3156:	4798      	blx	r3
    3158:	9033      	str	r0, [sp, #204]	; 0xcc
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    315a:	00b2      	lsls	r2, r6, #2
    315c:	4639      	mov	r1, r7
    315e:	4b9e      	ldr	r3, [pc, #632]	; (33d8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2e0>)
    3160:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    3162:	6863      	ldr	r3, [r4, #4]
    3164:	9303      	str	r3, [sp, #12]
  if (tensor == nullptr) {
    3166:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    3168:	2b00      	cmp	r3, #0
    316a:	f000 814d 	beq.w	3408 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x310>
  const int dims_size = dims->size;
    316e:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    3170:	689f      	ldr	r7, [r3, #8]
    3172:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    3176:	9638      	str	r6, [sp, #224]	; 0xe0
    if (dimensions_count > kMaxSmallSize) {
    3178:	2e05      	cmp	r6, #5
    317a:	f340 8148 	ble.w	340e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x316>
      dims_pointer_ = new int32[dimensions_count];
    317e:	4b94      	ldr	r3, [pc, #592]	; (33d0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2d8>)
    3180:	429e      	cmp	r6, r3
    3182:	bf94      	ite	ls
    3184:	00b0      	lslls	r0, r6, #2
    3186:	f04f 30ff 	movhi.w	r0, #4294967295
    318a:	4b92      	ldr	r3, [pc, #584]	; (33d4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2dc>)
    318c:	4798      	blx	r3
    318e:	9039      	str	r0, [sp, #228]	; 0xe4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    3190:	00b2      	lsls	r2, r6, #2
    3192:	4639      	mov	r1, r7
    3194:	4b90      	ldr	r3, [pc, #576]	; (33d8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2e0>)
    3196:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    3198:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    319a:	685b      	ldr	r3, [r3, #4]
    319c:	9325      	str	r3, [sp, #148]	; 0x94
  if (tensor == nullptr) {
    319e:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    31a0:	2b00      	cmp	r3, #0
    31a2:	f000 8136 	beq.w	3412 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x31a>
  const int dims_size = dims->size;
    31a6:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    31a8:	689f      	ldr	r7, [r3, #8]
    31aa:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    31ae:	963e      	str	r6, [sp, #248]	; 0xf8
    if (dimensions_count > kMaxSmallSize) {
    31b0:	2e05      	cmp	r6, #5
    31b2:	f340 8131 	ble.w	3418 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x320>
      dims_pointer_ = new int32[dimensions_count];
    31b6:	4b86      	ldr	r3, [pc, #536]	; (33d0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2d8>)
    31b8:	429e      	cmp	r6, r3
    31ba:	bf94      	ite	ls
    31bc:	00b0      	lslls	r0, r6, #2
    31be:	f04f 30ff 	movhi.w	r0, #4294967295
    31c2:	4b84      	ldr	r3, [pc, #528]	; (33d4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2dc>)
    31c4:	4798      	blx	r3
    31c6:	903f      	str	r0, [sp, #252]	; 0xfc
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    31c8:	00b2      	lsls	r2, r6, #2
    31ca:	4639      	mov	r1, r7
    31cc:	4b82      	ldr	r3, [pc, #520]	; (33d8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2e0>)
    31ce:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    31d0:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    31d2:	685b      	ldr	r3, [r3, #4]
    31d4:	9317      	str	r3, [sp, #92]	; 0x5c
  if (tensor == nullptr) {
    31d6:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
    31d8:	2b00      	cmp	r3, #0
    31da:	f000 811f 	beq.w	341c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x324>
  const int dims_size = dims->size;
    31de:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
    31e0:	689f      	ldr	r7, [r3, #8]
    31e2:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    31e6:	9644      	str	r6, [sp, #272]	; 0x110
    if (dimensions_count > kMaxSmallSize) {
    31e8:	2e05      	cmp	r6, #5
    31ea:	f340 811a 	ble.w	3422 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x32a>
      dims_pointer_ = new int32[dimensions_count];
    31ee:	4b78      	ldr	r3, [pc, #480]	; (33d0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2d8>)
    31f0:	429e      	cmp	r6, r3
    31f2:	bf94      	ite	ls
    31f4:	00b0      	lslls	r0, r6, #2
    31f6:	f04f 30ff 	movhi.w	r0, #4294967295
    31fa:	4b76      	ldr	r3, [pc, #472]	; (33d4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2dc>)
    31fc:	4798      	blx	r3
    31fe:	9045      	str	r0, [sp, #276]	; 0x114
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    3200:	00b2      	lsls	r2, r6, #2
    3202:	4639      	mov	r1, r7
    3204:	4b74      	ldr	r3, [pc, #464]	; (33d8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2e0>)
    3206:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    3208:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
    320a:	685f      	ldr	r7, [r3, #4]
  if (tensor == nullptr) {
    320c:	9b5d      	ldr	r3, [sp, #372]	; 0x174
    320e:	2b00      	cmp	r3, #0
    3210:	f000 8109 	beq.w	3426 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x32e>
  TfLiteIntArray* dims = tensor->dims;
    3214:	9b5d      	ldr	r3, [sp, #372]	; 0x174
    3216:	689e      	ldr	r6, [r3, #8]
  const int dims_size = dims->size;
    3218:	6834      	ldr	r4, [r6, #0]
    size_ = dimensions_count;
    321a:	944a      	str	r4, [sp, #296]	; 0x128
    if (dimensions_count > kMaxSmallSize) {
    321c:	2c05      	cmp	r4, #5
    321e:	f340 8104 	ble.w	342a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x332>
      dims_pointer_ = new int32[dimensions_count];
    3222:	4b6b      	ldr	r3, [pc, #428]	; (33d0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2d8>)
    3224:	429c      	cmp	r4, r3
    3226:	bf94      	ite	ls
    3228:	00a0      	lslls	r0, r4, #2
    322a:	f04f 30ff 	movhi.w	r0, #4294967295
    322e:	4b69      	ldr	r3, [pc, #420]	; (33d4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2dc>)
    3230:	4798      	blx	r3
    3232:	904b      	str	r0, [sp, #300]	; 0x12c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    3234:	00a2      	lsls	r2, r4, #2
    3236:	1d31      	adds	r1, r6, #4
    3238:	4b67      	ldr	r3, [pc, #412]	; (33d8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2e0>)
    323a:	4798      	blx	r3
  op_params.stride_width = params->stride_width;
    323c:	fa0f f888 	sxth.w	r8, r8
  op_params.stride_height = params->stride_height;
    3240:	b22d      	sxth	r5, r5
  op_params.dilation_width_factor = params->dilation_width_factor;
    3242:	fa0f f989 	sxth.w	r9, r9
  op_params.dilation_height_factor = params->dilation_height_factor;
    3246:	fa0f fe8a 	sxth.w	lr, sl
  op_params.padding_values.width = data.padding.width;
    324a:	fa0f f68b 	sxth.w	r6, fp
  op_params.padding_values.height = data.padding.height;
    324e:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    3252:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    3254:	2b04      	cmp	r3, #4
    3256:	f040 80ea 	bne.w	342e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x336>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    325a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    325c:	2b04      	cmp	r3, #4
    325e:	f040 80e8 	bne.w	3432 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x33a>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    3262:	9b44      	ldr	r3, [sp, #272]	; 0x110
    3264:	2b04      	cmp	r3, #4
    3266:	f040 80e6 	bne.w	3436 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x33e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    326a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    326c:	930c      	str	r3, [sp, #48]	; 0x30
    326e:	9a45      	ldr	r2, [sp, #276]	; 0x114
    3270:	921e      	str	r2, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    3272:	429a      	cmp	r2, r3
    3274:	f040 80e1 	bne.w	343a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x342>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    3278:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    327a:	930b      	str	r3, [sp, #44]	; 0x2c
    327c:	f8dd b0f0 	ldr.w	fp, [sp, #240]	; 0xf0
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    3280:	459b      	cmp	fp, r3
    3282:	f040 80dc 	bne.w	343e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x346>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    3286:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    3288:	930d      	str	r3, [sp, #52]	; 0x34
    328a:	9a48      	ldr	r2, [sp, #288]	; 0x120
    328c:	9214      	str	r2, [sp, #80]	; 0x50
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    328e:	429a      	cmp	r2, r3
    3290:	f040 80d7 	bne.w	3442 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x34a>
  if (bias_data) {
    3294:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    3296:	b1ab      	cbz	r3, 32c4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x1cc>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3298:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    329a:	2a05      	cmp	r2, #5
    329c:	bfcc      	ite	gt
    329e:	993f      	ldrgt	r1, [sp, #252]	; 0xfc
    32a0:	a93f      	addle	r1, sp, #252	; 0xfc
    for (int i = 0; i < size_; i++) {
    32a2:	2a00      	cmp	r2, #0
    32a4:	f340 80cf 	ble.w	3446 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x34e>
    32a8:	460b      	mov	r3, r1
    32aa:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    32ae:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
    32b0:	f853 0b04 	ldr.w	r0, [r3], #4
    32b4:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
    32b8:	428b      	cmp	r3, r1
    32ba:	d1f9      	bne.n	32b0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x1b8>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    32bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    32be:	429a      	cmp	r2, r3
    32c0:	f040 80c3 	bne.w	344a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x352>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    32c4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    32c6:	9301      	str	r3, [sp, #4]
    32c8:	f8dd a0d4 	ldr.w	sl, [sp, #212]	; 0xd4
    32cc:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    32ce:	9208      	str	r2, [sp, #32]
    32d0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    32d2:	4619      	mov	r1, r3
    32d4:	9302      	str	r3, [sp, #8]
    32d6:	9846      	ldr	r0, [sp, #280]	; 0x118
    32d8:	4602      	mov	r2, r0
    32da:	9023      	str	r0, [sp, #140]	; 0x8c
    32dc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    32de:	9321      	str	r3, [sp, #132]	; 0x84
  for (int batch = 0; batch < batches; ++batch) {
    32e0:	981e      	ldr	r0, [sp, #120]	; 0x78
    32e2:	2800      	cmp	r0, #0
    32e4:	f340 81b9 	ble.w	365a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x562>
    32e8:	4618      	mov	r0, r3
    32ea:	fb03 f302 	mul.w	r3, r3, r2
    32ee:	009b      	lsls	r3, r3, #2
    32f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    32f2:	fb02 fc03 	mul.w	ip, r2, r3
    32f6:	f8cd c0b8 	str.w	ip, [sp, #184]	; 0xb8
    32fa:	971a      	str	r7, [sp, #104]	; 0x68
    32fc:	9b01      	ldr	r3, [sp, #4]
    32fe:	fb0a f303 	mul.w	r3, sl, r3
    3302:	009b      	lsls	r3, r3, #2
    3304:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3306:	4617      	mov	r7, r2
    3308:	fb02 f303 	mul.w	r3, r2, r3
    330c:	932a      	str	r3, [sp, #168]	; 0xa8
    330e:	4263      	negs	r3, r4
    3310:	461c      	mov	r4, r3
    3312:	932b      	str	r3, [sp, #172]	; 0xac
    3314:	4273      	negs	r3, r6
    3316:	9328      	str	r3, [sp, #160]	; 0xa0
    3318:	0093      	lsls	r3, r2, #2
    331a:	fb04 f20a 	mul.w	r2, r4, sl
    331e:	1b92      	subs	r2, r2, r6
    3320:	9e03      	ldr	r6, [sp, #12]
    3322:	fb03 6602 	mla	r6, r3, r2, r6
    3326:	9620      	str	r6, [sp, #128]	; 0x80
    3328:	4602      	mov	r2, r0
    332a:	9c14      	ldr	r4, [sp, #80]	; 0x50
    332c:	fb02 f204 	mul.w	r2, r2, r4
    3330:	0090      	lsls	r0, r2, #2
    3332:	902c      	str	r0, [sp, #176]	; 0xb0
    3334:	9529      	str	r5, [sp, #164]	; 0xa4
    3336:	fb07 f20a 	mul.w	r2, r7, sl
    333a:	0092      	lsls	r2, r2, #2
    333c:	fb02 f005 	mul.w	r0, r2, r5
    3340:	902d      	str	r0, [sp, #180]	; 0xb4
    3342:	00a0      	lsls	r0, r4, #2
    3344:	902f      	str	r0, [sp, #188]	; 0xbc
    3346:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
    334a:	fb08 f003 	mul.w	r0, r8, r3
    334e:	9031      	str	r0, [sp, #196]	; 0xc4
    3350:	4608      	mov	r0, r1
    3352:	9c08      	ldr	r4, [sp, #32]
    3354:	fb01 f104 	mul.w	r1, r1, r4
    3358:	0089      	lsls	r1, r1, #2
    335a:	fb0b f101 	mul.w	r1, fp, r1
    335e:	9127      	str	r1, [sp, #156]	; 0x9c
    3360:	fb00 f10b 	mul.w	r1, r0, fp
    3364:	0089      	lsls	r1, r1, #2
    3366:	9113      	str	r1, [sp, #76]	; 0x4c
    3368:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
    336c:	fb02 f20e 	mul.w	r2, r2, lr
    3370:	9212      	str	r2, [sp, #72]	; 0x48
    3372:	ea4f 028b 	mov.w	r2, fp, lsl #2
    3376:	9206      	str	r2, [sp, #24]
    3378:	f8cd 9014 	str.w	r9, [sp, #20]
    337c:	fb09 f303 	mul.w	r3, r9, r3
    3380:	9304      	str	r3, [sp, #16]
    3382:	2300      	movs	r3, #0
    3384:	930a      	str	r3, [sp, #40]	; 0x28
    for (int out_y = 0; out_y < output_height; ++out_y) {
    3386:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    3388:	2b00      	cmp	r3, #0
    338a:	f340 8157 	ble.w	363c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x544>
    338e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    3390:	9319      	str	r3, [sp, #100]	; 0x64
    3392:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3394:	931d      	str	r3, [sp, #116]	; 0x74
    3396:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    3398:	9318      	str	r3, [sp, #96]	; 0x60
    339a:	2300      	movs	r3, #0
    339c:	931c      	str	r3, [sp, #112]	; 0x70
      for (int out_x = 0; out_x < output_width; ++out_x) {
    339e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    33a0:	2b00      	cmp	r3, #0
    33a2:	f340 8138 	ble.w	3616 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x51e>
    33a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    33a8:	9310      	str	r3, [sp, #64]	; 0x40
    33aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    33ac:	9324      	str	r3, [sp, #144]	; 0x90
    33ae:	9b18      	ldr	r3, [sp, #96]	; 0x60
    33b0:	9322      	str	r3, [sp, #136]	; 0x88
    33b2:	2300      	movs	r3, #0
    33b4:	931b      	str	r3, [sp, #108]	; 0x6c
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    33b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    33b8:	2b00      	cmp	r3, #0
    33ba:	f340 8119 	ble.w	35f0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4f8>
    33be:	9b25      	ldr	r3, [sp, #148]	; 0x94
    33c0:	931f      	str	r3, [sp, #124]	; 0x7c
    33c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    33c4:	9326      	str	r3, [sp, #152]	; 0x98
    33c6:	2300      	movs	r3, #0
    33c8:	9309      	str	r3, [sp, #36]	; 0x24
    33ca:	e0ea      	b.n	35a2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4aa>
    33cc:	7f7fffff 	.word	0x7f7fffff
    33d0:	1ffffffe 	.word	0x1ffffffe
    33d4:	0000a511 	.word	0x0000a511
    33d8:	000158c1 	.word	0x000158c1
    *activation_max = std::numeric_limits<T>::max();
    33dc:	497c      	ldr	r1, [pc, #496]	; (35d0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4d8>)
    33de:	9116      	str	r1, [sp, #88]	; 0x58
    *activation_min = 0;
    33e0:	2100      	movs	r1, #0
    33e2:	9115      	str	r1, [sp, #84]	; 0x54
    33e4:	e69b      	b.n	311e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x26>
    *activation_max = 6;
    33e6:	497b      	ldr	r1, [pc, #492]	; (35d4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4dc>)
    33e8:	9116      	str	r1, [sp, #88]	; 0x58
    *activation_min = 0;
    33ea:	2100      	movs	r1, #0
    33ec:	9115      	str	r1, [sp, #84]	; 0x54
    33ee:	e696      	b.n	311e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x26>
    *activation_max = 1;
    33f0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    33f4:	9116      	str	r1, [sp, #88]	; 0x58
    *activation_min = -1;
    33f6:	4978      	ldr	r1, [pc, #480]	; (35d8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e0>)
    33f8:	9115      	str	r1, [sp, #84]	; 0x54
    33fa:	e690      	b.n	311e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x26>
  RuntimeShape() : size_(0) {}
    33fc:	2300      	movs	r3, #0
    33fe:	9332      	str	r3, [sp, #200]	; 0xc8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    3400:	9303      	str	r3, [sp, #12]
    3402:	e6b0      	b.n	3166 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x6e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3404:	a833      	add	r0, sp, #204	; 0xcc
    3406:	e6a8      	b.n	315a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x62>
  RuntimeShape() : size_(0) {}
    3408:	9338      	str	r3, [sp, #224]	; 0xe0
    340a:	9325      	str	r3, [sp, #148]	; 0x94
    340c:	e6c7      	b.n	319e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xa6>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    340e:	a839      	add	r0, sp, #228	; 0xe4
    3410:	e6be      	b.n	3190 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x98>
  RuntimeShape() : size_(0) {}
    3412:	933e      	str	r3, [sp, #248]	; 0xf8
    3414:	9317      	str	r3, [sp, #92]	; 0x5c
    3416:	e6de      	b.n	31d6 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xde>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3418:	a83f      	add	r0, sp, #252	; 0xfc
    341a:	e6d5      	b.n	31c8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xd0>
  RuntimeShape() : size_(0) {}
    341c:	2700      	movs	r7, #0
    341e:	9744      	str	r7, [sp, #272]	; 0x110
    3420:	e6f4      	b.n	320c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x114>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3422:	a845      	add	r0, sp, #276	; 0x114
    3424:	e6ec      	b.n	3200 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x108>
  RuntimeShape() : size_(0) {}
    3426:	934a      	str	r3, [sp, #296]	; 0x128
    3428:	e708      	b.n	323c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x144>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    342a:	a84b      	add	r0, sp, #300	; 0x12c
    342c:	e702      	b.n	3234 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x13c>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    342e:	4b6b      	ldr	r3, [pc, #428]	; (35dc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3430:	4798      	blx	r3
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    3432:	4b6a      	ldr	r3, [pc, #424]	; (35dc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3434:	4798      	blx	r3
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    3436:	4b69      	ldr	r3, [pc, #420]	; (35dc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3438:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    343a:	4b68      	ldr	r3, [pc, #416]	; (35dc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    343c:	4798      	blx	r3
    343e:	4b67      	ldr	r3, [pc, #412]	; (35dc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3440:	4798      	blx	r3
    3442:	4b66      	ldr	r3, [pc, #408]	; (35dc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3444:	4798      	blx	r3
    int buffer_size = 1;
    3446:	2201      	movs	r2, #1
    3448:	e738      	b.n	32bc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x1c4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    344a:	4b64      	ldr	r3, [pc, #400]	; (35dc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    344c:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    344e:	4b63      	ldr	r3, [pc, #396]	; (35dc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3450:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    3452:	4b62      	ldr	r3, [pc, #392]	; (35dc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3454:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    3456:	4b61      	ldr	r3, [pc, #388]	; (35dc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3458:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    345a:	4b60      	ldr	r3, [pc, #384]	; (35dc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    345c:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    345e:	4b5f      	ldr	r3, [pc, #380]	; (35dc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3460:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    3462:	4b5e      	ldr	r3, [pc, #376]	; (35dc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3464:	4798      	blx	r3
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    3466:	3401      	adds	r4, #1
    3468:	455c      	cmp	r4, fp
    346a:	d032      	beq.n	34d2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x3da>
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    346c:	2d00      	cmp	r5, #0
    346e:	dbfa      	blt.n	3466 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x36e>
    3470:	4555      	cmp	r5, sl
    3472:	daf8      	bge.n	3466 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x36e>
    3474:	2e00      	cmp	r6, #0
    3476:	dbf6      	blt.n	3466 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x36e>
    3478:	9b01      	ldr	r3, [sp, #4]
    347a:	429e      	cmp	r6, r3
    347c:	daf3      	bge.n	3466 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x36e>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    347e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3480:	2b00      	cmp	r3, #0
    3482:	dbe4      	blt.n	344e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x356>
    3484:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3486:	4293      	cmp	r3, r2
    3488:	dae1      	bge.n	344e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x356>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    348a:	2c00      	cmp	r4, #0
    348c:	dbe1      	blt.n	3452 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x35a>
    348e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3490:	42a3      	cmp	r3, r4
    3492:	ddde      	ble.n	3452 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x35a>
                      input_shape, batch, in_y, in_x, in_channel)];
    3494:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    3498:	9a09      	ldr	r2, [sp, #36]	; 0x24
    349a:	2a00      	cmp	r2, #0
    349c:	dbdb      	blt.n	3456 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x35e>
    349e:	990d      	ldr	r1, [sp, #52]	; 0x34
    34a0:	428a      	cmp	r2, r1
    34a2:	dad8      	bge.n	3456 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x35e>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    34a4:	9a07      	ldr	r2, [sp, #28]
    34a6:	2a00      	cmp	r2, #0
    34a8:	dbd7      	blt.n	345a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x362>
    34aa:	9908      	ldr	r1, [sp, #32]
    34ac:	428a      	cmp	r2, r1
    34ae:	dad4      	bge.n	345a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x362>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    34b0:	2f00      	cmp	r7, #0
    34b2:	dbd4      	blt.n	345e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x366>
    34b4:	9a02      	ldr	r2, [sp, #8]
    34b6:	42ba      	cmp	r2, r7
    34b8:	ddd1      	ble.n	345e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x366>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    34ba:	45a3      	cmp	fp, r4
    34bc:	ddd1      	ble.n	3462 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x36a>
                  total += (input_value * filter_value);
    34be:	f859 1024 	ldr.w	r1, [r9, r4, lsl #2]
    34c2:	4b47      	ldr	r3, [pc, #284]	; (35e0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e8>)
    34c4:	4798      	blx	r3
    34c6:	4601      	mov	r1, r0
    34c8:	9803      	ldr	r0, [sp, #12]
    34ca:	4b46      	ldr	r3, [pc, #280]	; (35e4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4ec>)
    34cc:	4798      	blx	r3
    34ce:	9003      	str	r0, [sp, #12]
    34d0:	e7c9      	b.n	3466 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x36e>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    34d2:	3701      	adds	r7, #1
    34d4:	9b05      	ldr	r3, [sp, #20]
    34d6:	441d      	add	r5, r3
    34d8:	9b06      	ldr	r3, [sp, #24]
    34da:	4499      	add	r9, r3
    34dc:	9b04      	ldr	r3, [sp, #16]
    34de:	4498      	add	r8, r3
    34e0:	9b02      	ldr	r3, [sp, #8]
    34e2:	429f      	cmp	r7, r3
    34e4:	d004      	beq.n	34f0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x3f8>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    34e6:	f1bb 0f00 	cmp.w	fp, #0
    34ea:	ddf2      	ble.n	34d2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x3da>
    34ec:	2400      	movs	r4, #0
    34ee:	e7bd      	b.n	346c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x374>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    34f0:	9b07      	ldr	r3, [sp, #28]
    34f2:	3301      	adds	r3, #1
    34f4:	9307      	str	r3, [sp, #28]
    34f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    34f8:	9913      	ldr	r1, [sp, #76]	; 0x4c
    34fa:	440a      	add	r2, r1
    34fc:	920f      	str	r2, [sp, #60]	; 0x3c
    34fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3500:	9912      	ldr	r1, [sp, #72]	; 0x48
    3502:	440a      	add	r2, r1
    3504:	920e      	str	r2, [sp, #56]	; 0x38
    3506:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3508:	4416      	add	r6, r2
    350a:	9a08      	ldr	r2, [sp, #32]
    350c:	4293      	cmp	r3, r2
    350e:	d00b      	beq.n	3528 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x430>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    3510:	9b02      	ldr	r3, [sp, #8]
    3512:	2b00      	cmp	r3, #0
    3514:	ddec      	ble.n	34f0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x3f8>
    3516:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    351a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    351e:	9d10      	ldr	r5, [sp, #64]	; 0x40
    3520:	2700      	movs	r7, #0
    3522:	e7e0      	b.n	34e6 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x3ee>
          float total = 0.f;
    3524:	2300      	movs	r3, #0
    3526:	9303      	str	r3, [sp, #12]
          if (bias_data) {
    3528:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    352a:	2b00      	cmp	r3, #0
    352c:	d046      	beq.n	35bc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4c4>
            bias_value = bias_data[out_channel];
    352e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3530:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    3534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3536:	2b00      	cmp	r3, #0
    3538:	db42      	blt.n	35c0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4c8>
    353a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    353c:	4293      	cmp	r3, r2
    353e:	da3f      	bge.n	35c0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4c8>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    3540:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    3542:	2b00      	cmp	r3, #0
    3544:	db3e      	blt.n	35c4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4cc>
    3546:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    3548:	4293      	cmp	r3, r2
    354a:	da3b      	bge.n	35c4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4cc>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    354c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    354e:	2b00      	cmp	r3, #0
    3550:	db3a      	blt.n	35c8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4d0>
    3552:	9a21      	ldr	r2, [sp, #132]	; 0x84
    3554:	4293      	cmp	r3, r2
    3556:	da37      	bge.n	35c8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4d0>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    3558:	9b09      	ldr	r3, [sp, #36]	; 0x24
    355a:	2b00      	cmp	r3, #0
    355c:	db36      	blt.n	35cc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4d4>
    355e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    3560:	429a      	cmp	r2, r3
    3562:	dd33      	ble.n	35cc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4d4>
              ActivationFunctionWithMinMax(total + bias_value,
    3564:	9903      	ldr	r1, [sp, #12]
    3566:	4b1f      	ldr	r3, [pc, #124]	; (35e4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4ec>)
    3568:	4798      	blx	r3
    356a:	4604      	mov	r4, r0
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    356c:	9d15      	ldr	r5, [sp, #84]	; 0x54
    356e:	4629      	mov	r1, r5
    3570:	4b1d      	ldr	r3, [pc, #116]	; (35e8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4f0>)
    3572:	4798      	blx	r3
    3574:	b100      	cbz	r0, 3578 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x480>
	return __b;
    3576:	462c      	mov	r4, r5
      if (__b < __a)
    3578:	9d16      	ldr	r5, [sp, #88]	; 0x58
    357a:	4629      	mov	r1, r5
    357c:	4620      	mov	r0, r4
    357e:	4b1b      	ldr	r3, [pc, #108]	; (35ec <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4f4>)
    3580:	4798      	blx	r3
    3582:	b100      	cbz	r0, 3586 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x48e>
	return __b;
    3584:	462c      	mov	r4, r5
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    3586:	9b26      	ldr	r3, [sp, #152]	; 0x98
    3588:	f843 4b04 	str.w	r4, [r3], #4
    358c:	9326      	str	r3, [sp, #152]	; 0x98
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    358e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3590:	3301      	adds	r3, #1
    3592:	9309      	str	r3, [sp, #36]	; 0x24
    3594:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    3596:	9927      	ldr	r1, [sp, #156]	; 0x9c
    3598:	440a      	add	r2, r1
    359a:	921f      	str	r2, [sp, #124]	; 0x7c
    359c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    359e:	4293      	cmp	r3, r2
    35a0:	d026      	beq.n	35f0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4f8>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    35a2:	9b08      	ldr	r3, [sp, #32]
    35a4:	2b00      	cmp	r3, #0
    35a6:	ddbd      	ble.n	3524 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x42c>
    35a8:	9e19      	ldr	r6, [sp, #100]	; 0x64
    35aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
    35ac:	930e      	str	r3, [sp, #56]	; 0x38
    35ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    35b0:	930f      	str	r3, [sp, #60]	; 0x3c
    35b2:	2300      	movs	r3, #0
    35b4:	9307      	str	r3, [sp, #28]
    35b6:	2300      	movs	r3, #0
    35b8:	9303      	str	r3, [sp, #12]
    35ba:	e7a9      	b.n	3510 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x418>
          float bias_value = 0.0f;
    35bc:	2000      	movs	r0, #0
    35be:	e7b9      	b.n	3534 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x43c>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    35c0:	4b06      	ldr	r3, [pc, #24]	; (35dc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    35c2:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    35c4:	4b05      	ldr	r3, [pc, #20]	; (35dc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    35c6:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    35c8:	4b04      	ldr	r3, [pc, #16]	; (35dc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    35ca:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    35cc:	4b03      	ldr	r3, [pc, #12]	; (35dc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    35ce:	4798      	blx	r3
    35d0:	7f7fffff 	.word	0x7f7fffff
    35d4:	40c00000 	.word	0x40c00000
    35d8:	bf800000 	.word	0xbf800000
    35dc:	00014b3d 	.word	0x00014b3d
    35e0:	000134e1 	.word	0x000134e1
    35e4:	000132d1 	.word	0x000132d1
    35e8:	0001381d 	.word	0x0001381d
    35ec:	00013859 	.word	0x00013859
      for (int out_x = 0; out_x < output_width; ++out_x) {
    35f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    35f2:	3301      	adds	r3, #1
    35f4:	931b      	str	r3, [sp, #108]	; 0x6c
    35f6:	9a22      	ldr	r2, [sp, #136]	; 0x88
    35f8:	992f      	ldr	r1, [sp, #188]	; 0xbc
    35fa:	440a      	add	r2, r1
    35fc:	9222      	str	r2, [sp, #136]	; 0x88
    35fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
    3600:	9931      	ldr	r1, [sp, #196]	; 0xc4
    3602:	440a      	add	r2, r1
    3604:	9224      	str	r2, [sp, #144]	; 0x90
    3606:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3608:	9930      	ldr	r1, [sp, #192]	; 0xc0
    360a:	440a      	add	r2, r1
    360c:	9210      	str	r2, [sp, #64]	; 0x40
    360e:	9a21      	ldr	r2, [sp, #132]	; 0x84
    3610:	4293      	cmp	r3, r2
    3612:	f47f aed0 	bne.w	33b6 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2be>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    3616:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    3618:	3301      	adds	r3, #1
    361a:	931c      	str	r3, [sp, #112]	; 0x70
    361c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    361e:	992c      	ldr	r1, [sp, #176]	; 0xb0
    3620:	440a      	add	r2, r1
    3622:	9218      	str	r2, [sp, #96]	; 0x60
    3624:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    3626:	992d      	ldr	r1, [sp, #180]	; 0xb4
    3628:	440a      	add	r2, r1
    362a:	921d      	str	r2, [sp, #116]	; 0x74
    362c:	9a19      	ldr	r2, [sp, #100]	; 0x64
    362e:	9929      	ldr	r1, [sp, #164]	; 0xa4
    3630:	440a      	add	r2, r1
    3632:	9219      	str	r2, [sp, #100]	; 0x64
    3634:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    3636:	4293      	cmp	r3, r2
    3638:	f47f aeb1 	bne.w	339e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2a6>
  for (int batch = 0; batch < batches; ++batch) {
    363c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    363e:	3301      	adds	r3, #1
    3640:	930a      	str	r3, [sp, #40]	; 0x28
    3642:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    3644:	992e      	ldr	r1, [sp, #184]	; 0xb8
    3646:	440a      	add	r2, r1
    3648:	921a      	str	r2, [sp, #104]	; 0x68
    364a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    364c:	992a      	ldr	r1, [sp, #168]	; 0xa8
    364e:	440a      	add	r2, r1
    3650:	9220      	str	r2, [sp, #128]	; 0x80
    3652:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    3654:	4293      	cmp	r3, r2
    3656:	f47f ae96 	bne.w	3386 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x28e>
    if (size_ > kMaxSmallSize) {
    365a:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    365c:	2b05      	cmp	r3, #5
    365e:	dd03      	ble.n	3668 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x570>
      delete[] dims_pointer_;
    3660:	984b      	ldr	r0, [sp, #300]	; 0x12c
    3662:	b108      	cbz	r0, 3668 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x570>
    3664:	4b05      	ldr	r3, [pc, #20]	; (367c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x584>)
    3666:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    3668:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    366a:	2b05      	cmp	r3, #5
    366c:	dd03      	ble.n	3676 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x57e>
      delete[] dims_pointer_;
    366e:	983f      	ldr	r0, [sp, #252]	; 0xfc
    3670:	b108      	cbz	r0, 3676 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x57e>
    3672:	4b02      	ldr	r3, [pc, #8]	; (367c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x584>)
    3674:	4798      	blx	r3
                      GetTensorData<float>(input), GetTensorShape(filter),
                      GetTensorData<float>(filter), GetTensorShape(bias),
                      GetTensorData<float>(bias), GetTensorShape(output),
                      GetTensorData<float>(output), GetTensorShape(im2col),
                      GetTensorData<float>(im2col));
}
    3676:	b051      	add	sp, #324	; 0x144
    3678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    367c:	0000a461 	.word	0x0000a461

00003680 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    3680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3684:	b086      	sub	sp, #24
    3686:	4606      	mov	r6, r0
  auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);
    3688:	694a      	ldr	r2, [r1, #20]
  return &context->tensors[node->outputs->data[index]];
    368a:	6884      	ldr	r4, [r0, #8]
    368c:	684b      	ldr	r3, [r1, #4]
    368e:	685f      	ldr	r7, [r3, #4]
    3690:	eb04 1787 	add.w	r7, r4, r7, lsl #6
  return &context->tensors[node->inputs->data[index]];
    3694:	680b      	ldr	r3, [r1, #0]
    3696:	685d      	ldr	r5, [r3, #4]
    3698:	01ad      	lsls	r5, r5, #6
    369a:	eb04 0e05 	add.w	lr, r4, r5
    369e:	6898      	ldr	r0, [r3, #8]
    36a0:	eb04 1c80 	add.w	ip, r4, r0, lsl #6
  const bool use_tensor = index < node->inputs->size &&
    36a4:	6818      	ldr	r0, [r3, #0]
    36a6:	2802      	cmp	r0, #2
    36a8:	dd09      	ble.n	36be <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3e>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    36aa:	68db      	ldr	r3, [r3, #12]
  const bool use_tensor = index < node->inputs->size &&
    36ac:	f1b3 3fff 	cmp.w	r3, #4294967295
    36b0:	d002      	beq.n	36b8 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x38>
    return &context->tensors[node->inputs->data[index]];
    36b2:	eb04 1883 	add.w	r8, r4, r3, lsl #6
    36b6:	e004      	b.n	36c2 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x42>
  return nullptr;
    36b8:	f04f 0800 	mov.w	r8, #0
    36bc:	e001      	b.n	36c2 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x42>
    36be:	f04f 0800 	mov.w	r8, #0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
    36c2:	690b      	ldr	r3, [r1, #16]
    36c4:	b183      	cbz	r3, 36e8 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x68>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  switch (input->type) {  // Already know in/out types are same.
    36c6:	5d60      	ldrb	r0, [r4, r5]
    36c8:	2803      	cmp	r0, #3
    36ca:	d02e      	beq.n	372a <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xaa>
    36cc:	2809      	cmp	r0, #9
    36ce:	d01e      	beq.n	370e <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x8e>
    36d0:	2801      	cmp	r0, #1
    36d2:	d00b      	beq.n	36ec <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x6c>
    case kTfLiteUInt8:
      EvalQuantized(context, node, params, data, input, filter, bias, nullptr,
                    nullptr, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    36d4:	6977      	ldr	r7, [r6, #20]
    36d6:	4b1c      	ldr	r3, [pc, #112]	; (3748 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xc8>)
    36d8:	4798      	blx	r3
    36da:	5d63      	ldrb	r3, [r4, r5]
    36dc:	4602      	mov	r2, r0
    36de:	491b      	ldr	r1, [pc, #108]	; (374c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xcc>)
    36e0:	4630      	mov	r0, r6
    36e2:	47b8      	blx	r7
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    36e4:	2001      	movs	r0, #1
    36e6:	e00f      	b.n	3708 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x88>
  TFLITE_DCHECK(node->user_data != nullptr);
    36e8:	4b19      	ldr	r3, [pc, #100]	; (3750 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xd0>)
    36ea:	4798      	blx	r3
                nullptr, output);
    36ec:	9705      	str	r7, [sp, #20]
    36ee:	2400      	movs	r4, #0
    36f0:	9404      	str	r4, [sp, #16]
    36f2:	9403      	str	r4, [sp, #12]
    36f4:	f8cd 8008 	str.w	r8, [sp, #8]
    36f8:	f8cd c004 	str.w	ip, [sp, #4]
    36fc:	f8cd e000 	str.w	lr, [sp]
    3700:	4630      	mov	r0, r6
    3702:	4d14      	ldr	r5, [pc, #80]	; (3754 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xd4>)
    3704:	47a8      	blx	r5
  }
  return kTfLiteOk;
    3706:	4620      	mov	r0, r4
}
    3708:	b006      	add	sp, #24
    370a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                              output, nullptr);
    370e:	2400      	movs	r4, #0
    3710:	9404      	str	r4, [sp, #16]
    3712:	9703      	str	r7, [sp, #12]
    3714:	f8cd 8008 	str.w	r8, [sp, #8]
    3718:	f8cd c004 	str.w	ip, [sp, #4]
    371c:	f8cd e000 	str.w	lr, [sp]
    3720:	4630      	mov	r0, r6
    3722:	4d0d      	ldr	r5, [pc, #52]	; (3758 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xd8>)
    3724:	47a8      	blx	r5
  return kTfLiteOk;
    3726:	4620      	mov	r0, r4
      break;
    3728:	e7ee      	b.n	3708 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x88>
                    nullptr, output);
    372a:	9705      	str	r7, [sp, #20]
    372c:	2400      	movs	r4, #0
    372e:	9404      	str	r4, [sp, #16]
    3730:	9403      	str	r4, [sp, #12]
    3732:	f8cd 8008 	str.w	r8, [sp, #8]
    3736:	f8cd c004 	str.w	ip, [sp, #4]
    373a:	f8cd e000 	str.w	lr, [sp]
    373e:	4630      	mov	r0, r6
    3740:	4d06      	ldr	r5, [pc, #24]	; (375c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xdc>)
    3742:	47a8      	blx	r5
  return kTfLiteOk;
    3744:	4620      	mov	r0, r4
      break;
    3746:	e7df      	b.n	3708 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    3748:	0000a3c5 	.word	0x0000a3c5
    374c:	0002207c 	.word	0x0002207c
    3750:	00014b3d 	.word	0x00014b3d
    3754:	000030f9 	.word	0x000030f9
    3758:	00002afd 	.word	0x00002afd
    375c:	000024a9 	.word	0x000024a9

00003760 <_ZN6tflite3ops5micro16Register_CONV_2DEv>:

}  // namespace conv

TfLiteRegistration Register_CONV_2D() {
    3760:	b470      	push	{r4, r5, r6}
    3762:	4606      	mov	r6, r0
          /*prepare=*/conv::Prepare,
          /*invoke=*/conv::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    3764:	4604      	mov	r4, r0
    3766:	4d05      	ldr	r5, [pc, #20]	; (377c <_ZN6tflite3ops5micro16Register_CONV_2DEv+0x1c>)
    3768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    376a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    376c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3770:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    3774:	4630      	mov	r0, r6
    3776:	bc70      	pop	{r4, r5, r6}
    3778:	4770      	bx	lr
    377a:	bf00      	nop
    377c:	00021ee4 	.word	0x00021ee4

00003780 <_ZN6tflite3ops5micro14depthwise_conv4InitEP13TfLiteContextPKcj>:
  return kTfLiteOk;
}

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
    3780:	b500      	push	{lr}
    3782:	b083      	sub	sp, #12
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    3784:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3786:	b163      	cbz	r3, 37a2 <_ZN6tflite3ops5micro14depthwise_conv4InitEP13TfLiteContextPKcj+0x22>
  void* data = nullptr;
    3788:	aa02      	add	r2, sp, #8
    378a:	2100      	movs	r1, #0
    378c:	f842 1d04 	str.w	r1, [r2, #-4]!
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
    3790:	2128      	movs	r1, #40	; 0x28
    3792:	4798      	blx	r3
    3794:	2801      	cmp	r0, #1
      kTfLiteError) {
    return nullptr;
  }
  return data;
    3796:	bf14      	ite	ne
    3798:	9801      	ldrne	r0, [sp, #4]
    return nullptr;
    379a:	2000      	moveq	r0, #0
}
    379c:	b003      	add	sp, #12
    379e:	f85d fb04 	ldr.w	pc, [sp], #4
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    37a2:	4b01      	ldr	r3, [pc, #4]	; (37a8 <_ZN6tflite3ops5micro14depthwise_conv4InitEP13TfLiteContextPKcj+0x28>)
    37a4:	4798      	blx	r3
    37a6:	bf00      	nop
    37a8:	00014b3d 	.word	0x00014b3d

000037ac <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    37ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37b0:	b091      	sub	sp, #68	; 0x44
  TFLITE_DCHECK(node->user_data != nullptr);
    37b2:	f8d1 a010 	ldr.w	sl, [r1, #16]
    37b6:	f1ba 0f00 	cmp.w	sl, #0
    37ba:	d029      	beq.n	3810 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x64>
    37bc:	4605      	mov	r5, r0
    37be:	460f      	mov	r7, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    37c0:	f8d1 b014 	ldr.w	fp, [r1, #20]
    37c4:	f1bb 0f00 	cmp.w	fp, #0
    37c8:	d024      	beq.n	3814 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x68>
  return &context->tensors[node->inputs->data[index]];
    37ca:	f8d0 8008 	ldr.w	r8, [r0, #8]
    37ce:	680b      	ldr	r3, [r1, #0]
    37d0:	685c      	ldr	r4, [r3, #4]
    37d2:	01a4      	lsls	r4, r4, #6
    37d4:	eb08 0204 	add.w	r2, r8, r4
    37d8:	689b      	ldr	r3, [r3, #8]
    37da:	eb08 1983 	add.w	r9, r8, r3, lsl #6
  OpData* data = static_cast<OpData*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);

  const TfLiteType data_type = input->type;
    37de:	f818 3004 	ldrb.w	r3, [r8, r4]
    37e2:	930f      	str	r3, [sp, #60]	; 0x3c
  return t->dims->data[dim];
    37e4:	6893      	ldr	r3, [r2, #8]
    37e6:	68da      	ldr	r2, [r3, #12]
    37e8:	920c      	str	r2, [sp, #48]	; 0x30
    37ea:	689b      	ldr	r3, [r3, #8]
    37ec:	930b      	str	r3, [sp, #44]	; 0x2c
    37ee:	f8d9 3008 	ldr.w	r3, [r9, #8]
    37f2:	68da      	ldr	r2, [r3, #12]
    37f4:	920d      	str	r2, [sp, #52]	; 0x34
    37f6:	689a      	ldr	r2, [r3, #8]
    37f8:	920e      	str	r2, [sp, #56]	; 0x38

  // Per channel quantization is only needed for int8 inference. For other
  // quantized types, only a single scale and zero point is needed.
  const int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
  // Dynimically allocate per-channel quantization parameters.
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
    37fa:	691e      	ldr	r6, [r3, #16]
    37fc:	00b6      	lsls	r6, r6, #2
    37fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3800:	f10a 0218 	add.w	r2, sl, #24
    3804:	4631      	mov	r1, r6
    3806:	4798      	blx	r3
    3808:	b130      	cbz	r0, 3818 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x6c>
                      affine_quantization->zero_point->size);
  }

  return CalculateOpData(context, node, params, width, height, filter_width,
                         filter_height, data_type, data);
}
    380a:	b011      	add	sp, #68	; 0x44
    380c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
    3810:	4b8c      	ldr	r3, [pc, #560]	; (3a44 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x298>)
    3812:	4798      	blx	r3
  TFLITE_DCHECK(node->builtin_data != nullptr);
    3814:	4b8b      	ldr	r3, [pc, #556]	; (3a44 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x298>)
    3816:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
    3818:	6bab      	ldr	r3, [r5, #56]	; 0x38
    381a:	f10a 021c 	add.w	r2, sl, #28
    381e:	4631      	mov	r1, r6
    3820:	4628      	mov	r0, r5
    3822:	4798      	blx	r3
    3824:	2800      	cmp	r0, #0
    3826:	d1f0      	bne.n	380a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
  if (input->type == kTfLiteInt8) {
    3828:	f818 3004 	ldrb.w	r3, [r8, r4]
    382c:	2b09      	cmp	r3, #9
    382e:	d017      	beq.n	3860 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xb4>
  bool has_bias = node->inputs->size == 3;
    3830:	683b      	ldr	r3, [r7, #0]
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    3832:	681b      	ldr	r3, [r3, #0]
    3834:	3b02      	subs	r3, #2
    3836:	2b01      	cmp	r3, #1
    3838:	d870      	bhi.n	391c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x170>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    383a:	687b      	ldr	r3, [r7, #4]
    383c:	681b      	ldr	r3, [r3, #0]
    383e:	2b01      	cmp	r3, #1
    3840:	d076      	beq.n	3930 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x184>
    3842:	2401      	movs	r4, #1
    3844:	9403      	str	r4, [sp, #12]
    3846:	9302      	str	r3, [sp, #8]
    3848:	4b7f      	ldr	r3, [pc, #508]	; (3a48 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
    384a:	9301      	str	r3, [sp, #4]
    384c:	4b7f      	ldr	r3, [pc, #508]	; (3a4c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
    384e:	9300      	str	r3, [sp, #0]
    3850:	696e      	ldr	r6, [r5, #20]
    3852:	2342      	movs	r3, #66	; 0x42
    3854:	4a7e      	ldr	r2, [pc, #504]	; (3a50 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
    3856:	497f      	ldr	r1, [pc, #508]	; (3a54 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2a8>)
    3858:	4628      	mov	r0, r5
    385a:	47b0      	blx	r6
    385c:	4620      	mov	r0, r4
    385e:	e7d4      	b.n	380a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    3860:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
    3864:	2b01      	cmp	r3, #1
    3866:	d122      	bne.n	38ae <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x102>
            filter->quantization.params);
    3868:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    TF_LITE_ENSURE(context, affine_quantization);
    386c:	2b00      	cmp	r3, #0
    386e:	d02d      	beq.n	38cc <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x120>
    TF_LITE_ENSURE(context, affine_quantization->scale);
    3870:	681a      	ldr	r2, [r3, #0]
    3872:	2a00      	cmp	r2, #0
    3874:	d034      	beq.n	38e0 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x134>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
    3876:	6859      	ldr	r1, [r3, #4]
    3878:	2900      	cmp	r1, #0
    387a:	d03b      	beq.n	38f4 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x148>
    TF_LITE_ENSURE(
    387c:	6813      	ldr	r3, [r2, #0]
    387e:	2b01      	cmp	r3, #1
    3880:	d004      	beq.n	388c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>
    3882:	f8d9 2008 	ldr.w	r2, [r9, #8]
    3886:	6912      	ldr	r2, [r2, #16]
    3888:	4293      	cmp	r3, r2
    388a:	d13d      	bne.n	3908 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x15c>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    388c:	680a      	ldr	r2, [r1, #0]
    388e:	4293      	cmp	r3, r2
    3890:	d0ce      	beq.n	3830 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x84>
    3892:	9203      	str	r2, [sp, #12]
    3894:	9302      	str	r3, [sp, #8]
    3896:	4b70      	ldr	r3, [pc, #448]	; (3a58 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2ac>)
    3898:	9301      	str	r3, [sp, #4]
    389a:	4b70      	ldr	r3, [pc, #448]	; (3a5c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
    389c:	9300      	str	r3, [sp, #0]
    389e:	696c      	ldr	r4, [r5, #20]
    38a0:	2396      	movs	r3, #150	; 0x96
    38a2:	4a6b      	ldr	r2, [pc, #428]	; (3a50 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
    38a4:	496b      	ldr	r1, [pc, #428]	; (3a54 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2a8>)
    38a6:	4628      	mov	r0, r5
    38a8:	47a0      	blx	r4
    38aa:	2001      	movs	r0, #1
    38ac:	e7ad      	b.n	380a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    38ae:	2401      	movs	r4, #1
    38b0:	9403      	str	r4, [sp, #12]
    38b2:	9302      	str	r3, [sp, #8]
    38b4:	4b6a      	ldr	r3, [pc, #424]	; (3a60 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2b4>)
    38b6:	9301      	str	r3, [sp, #4]
    38b8:	4b6a      	ldr	r3, [pc, #424]	; (3a64 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2b8>)
    38ba:	9300      	str	r3, [sp, #0]
    38bc:	696e      	ldr	r6, [r5, #20]
    38be:	2389      	movs	r3, #137	; 0x89
    38c0:	4a63      	ldr	r2, [pc, #396]	; (3a50 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
    38c2:	4964      	ldr	r1, [pc, #400]	; (3a54 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2a8>)
    38c4:	4628      	mov	r0, r5
    38c6:	47b0      	blx	r6
    38c8:	4620      	mov	r0, r4
    38ca:	e79e      	b.n	380a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
    TF_LITE_ENSURE(context, affine_quantization);
    38cc:	4b66      	ldr	r3, [pc, #408]	; (3a68 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2bc>)
    38ce:	9300      	str	r3, [sp, #0]
    38d0:	696c      	ldr	r4, [r5, #20]
    38d2:	238e      	movs	r3, #142	; 0x8e
    38d4:	4a5e      	ldr	r2, [pc, #376]	; (3a50 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
    38d6:	4965      	ldr	r1, [pc, #404]	; (3a6c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
    38d8:	4628      	mov	r0, r5
    38da:	47a0      	blx	r4
    38dc:	2001      	movs	r0, #1
    38de:	e794      	b.n	380a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
    TF_LITE_ENSURE(context, affine_quantization->scale);
    38e0:	4b63      	ldr	r3, [pc, #396]	; (3a70 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
    38e2:	9300      	str	r3, [sp, #0]
    38e4:	696c      	ldr	r4, [r5, #20]
    38e6:	238f      	movs	r3, #143	; 0x8f
    38e8:	4a59      	ldr	r2, [pc, #356]	; (3a50 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
    38ea:	4960      	ldr	r1, [pc, #384]	; (3a6c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
    38ec:	4628      	mov	r0, r5
    38ee:	47a0      	blx	r4
    38f0:	2001      	movs	r0, #1
    38f2:	e78a      	b.n	380a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
    38f4:	4b5f      	ldr	r3, [pc, #380]	; (3a74 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    38f6:	9300      	str	r3, [sp, #0]
    38f8:	696c      	ldr	r4, [r5, #20]
    38fa:	2390      	movs	r3, #144	; 0x90
    38fc:	4a54      	ldr	r2, [pc, #336]	; (3a50 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
    38fe:	495b      	ldr	r1, [pc, #364]	; (3a6c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
    3900:	4628      	mov	r0, r5
    3902:	47a0      	blx	r4
    3904:	2001      	movs	r0, #1
    3906:	e780      	b.n	380a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
    TF_LITE_ENSURE(
    3908:	4b5b      	ldr	r3, [pc, #364]	; (3a78 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    390a:	9300      	str	r3, [sp, #0]
    390c:	696c      	ldr	r4, [r5, #20]
    390e:	2394      	movs	r3, #148	; 0x94
    3910:	4a4f      	ldr	r2, [pc, #316]	; (3a50 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
    3912:	4956      	ldr	r1, [pc, #344]	; (3a6c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
    3914:	4628      	mov	r0, r5
    3916:	47a0      	blx	r4
    3918:	2001      	movs	r0, #1
    391a:	e776      	b.n	380a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    391c:	4b57      	ldr	r3, [pc, #348]	; (3a7c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
    391e:	9300      	str	r3, [sp, #0]
    3920:	696c      	ldr	r4, [r5, #20]
    3922:	2341      	movs	r3, #65	; 0x41
    3924:	4a4a      	ldr	r2, [pc, #296]	; (3a50 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
    3926:	4951      	ldr	r1, [pc, #324]	; (3a6c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
    3928:	4628      	mov	r0, r5
    392a:	47a0      	blx	r4
    392c:	2001      	movs	r0, #1
    392e:	e76c      	b.n	380a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
      &unused_output_width);
    3930:	f8db 0008 	ldr.w	r0, [fp, #8]
    3934:	f8db 1004 	ldr.w	r1, [fp, #4]
    3938:	f89b 3000 	ldrb.w	r3, [fp]
  switch (padding) {
    393c:	2b01      	cmp	r3, #1
    393e:	d008      	beq.n	3952 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1a6>
    3940:	2b02      	cmp	r3, #2
    3942:	d047      	beq.n	39d4 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>
    3944:	2b01      	cmp	r3, #1
    3946:	d052      	beq.n	39ee <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x242>
    3948:	2b02      	cmp	r3, #2
    394a:	d052      	beq.n	39f2 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x246>
      return 0;
    394c:	2300      	movs	r3, #0
    394e:	461a      	mov	r2, r3
    3950:	e009      	b.n	3966 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1ba>
      return (image_size + stride - 1) / stride;
    3952:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3954:	440b      	add	r3, r1
    3956:	3b01      	subs	r3, #1
    3958:	fb93 f3f1 	sdiv	r3, r3, r1
    395c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    395e:	4402      	add	r2, r0
    3960:	3a01      	subs	r2, #1
    3962:	fb92 f2f0 	sdiv	r2, r2, r0
      ((out_size - 1) * stride + effective_filter_size - in_size);
    3966:	3a01      	subs	r2, #1
    3968:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    396a:	fb00 4202 	mla	r2, r0, r2, r4
    396e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3970:	1a12      	subs	r2, r2, r0
  total_padding = total_padding > 0 ? total_padding : 0;
    3972:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
      ((out_size - 1) * stride + effective_filter_size - in_size);
    3976:	3b01      	subs	r3, #1
    3978:	980d      	ldr	r0, [sp, #52]	; 0x34
    397a:	fb01 0303 	mla	r3, r1, r3, r0
    397e:	990c      	ldr	r1, [sp, #48]	; 0x30
    3980:	1a5b      	subs	r3, r3, r1
  total_padding = total_padding > 0 ? total_padding : 0;
    3982:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  return total_padding / 2;
    3986:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
    398a:	1049      	asrs	r1, r1, #1
    398c:	f8ca 1000 	str.w	r1, [sl]
    3990:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
    3994:	1049      	asrs	r1, r1, #1
    3996:	f8ca 1004 	str.w	r1, [sl, #4]
  *offset = total_padding % 2;
    399a:	f003 0301 	and.w	r3, r3, #1
    399e:	f8ca 3008 	str.w	r3, [sl, #8]
    39a2:	f002 0201 	and.w	r2, r2, #1
    39a6:	f8ca 200c 	str.w	r2, [sl, #12]
  if (data_type != kTfLiteFloat32) {
    39aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    39ac:	2b01      	cmp	r3, #1
    39ae:	d046      	beq.n	3a3e <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x292>
  return &context->tensors[node->inputs->data[index]];
    39b0:	68a8      	ldr	r0, [r5, #8]
    39b2:	683b      	ldr	r3, [r7, #0]
    39b4:	6859      	ldr	r1, [r3, #4]
    39b6:	eb00 1181 	add.w	r1, r0, r1, lsl #6
    39ba:	689a      	ldr	r2, [r3, #8]
    39bc:	eb00 1282 	add.w	r2, r0, r2, lsl #6
  const bool use_tensor = index < node->inputs->size &&
    39c0:	681c      	ldr	r4, [r3, #0]
    39c2:	2c02      	cmp	r4, #2
    39c4:	dd19      	ble.n	39fa <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x24e>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    39c6:	68db      	ldr	r3, [r3, #12]
  const bool use_tensor = index < node->inputs->size &&
    39c8:	f1b3 3fff 	cmp.w	r3, #4294967295
    39cc:	d013      	beq.n	39f6 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x24a>
    return &context->tensors[node->inputs->data[index]];
    39ce:	eb00 1383 	add.w	r3, r0, r3, lsl #6
    39d2:	e013      	b.n	39fc <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x250>
      return (image_size + stride - effective_filter_size) / stride;
    39d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    39d6:	440b      	add	r3, r1
    39d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    39da:	1a9b      	subs	r3, r3, r2
    39dc:	fb93 f3f1 	sdiv	r3, r3, r1
    39e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    39e2:	4402      	add	r2, r0
    39e4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    39e6:	1b12      	subs	r2, r2, r4
    39e8:	fb92 f2f0 	sdiv	r2, r2, r0
    39ec:	e7bb      	b.n	3966 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1ba>
      return 0;
    39ee:	2300      	movs	r3, #0
    39f0:	e7b4      	b.n	395c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1b0>
    39f2:	2300      	movs	r3, #0
    39f4:	e7f4      	b.n	39e0 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x234>
  return nullptr;
    39f6:	2300      	movs	r3, #0
    39f8:	e000      	b.n	39fc <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x250>
    39fa:	2300      	movs	r3, #0
    int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
    39fc:	6894      	ldr	r4, [r2, #8]
        reinterpret_cast<int*>(data->per_channel_output_shift), num_channels);
    39fe:	6924      	ldr	r4, [r4, #16]
    3a00:	9408      	str	r4, [sp, #32]
    3a02:	f8da 401c 	ldr.w	r4, [sl, #28]
    3a06:	9407      	str	r4, [sp, #28]
    3a08:	f8da 4018 	ldr.w	r4, [sl, #24]
    3a0c:	9406      	str	r4, [sp, #24]
    return tflite::PopulateConvolutionQuantizationParams(
    3a0e:	f10a 0424 	add.w	r4, sl, #36	; 0x24
        reinterpret_cast<int*>(data->per_channel_output_shift), num_channels);
    3a12:	9405      	str	r4, [sp, #20]
    return tflite::PopulateConvolutionQuantizationParams(
    3a14:	f10a 0420 	add.w	r4, sl, #32
        reinterpret_cast<int*>(data->per_channel_output_shift), num_channels);
    3a18:	9404      	str	r4, [sp, #16]
    return tflite::PopulateConvolutionQuantizationParams(
    3a1a:	f10a 0414 	add.w	r4, sl, #20
        reinterpret_cast<int*>(data->per_channel_output_shift), num_channels);
    3a1e:	9403      	str	r4, [sp, #12]
    return tflite::PopulateConvolutionQuantizationParams(
    3a20:	f10a 0410 	add.w	r4, sl, #16
        reinterpret_cast<int*>(data->per_channel_output_shift), num_channels);
    3a24:	9402      	str	r4, [sp, #8]
    return tflite::PopulateConvolutionQuantizationParams(
    3a26:	f10b 0410 	add.w	r4, fp, #16
        reinterpret_cast<int*>(data->per_channel_output_shift), num_channels);
    3a2a:	9401      	str	r4, [sp, #4]
  return &context->tensors[node->outputs->data[index]];
    3a2c:	687c      	ldr	r4, [r7, #4]
    3a2e:	6864      	ldr	r4, [r4, #4]
    3a30:	eb00 1084 	add.w	r0, r0, r4, lsl #6
    3a34:	9000      	str	r0, [sp, #0]
    3a36:	4628      	mov	r0, r5
    3a38:	4c11      	ldr	r4, [pc, #68]	; (3a80 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
    3a3a:	47a0      	blx	r4
    3a3c:	e6e5      	b.n	380a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
  return kTfLiteOk;
    3a3e:	2000      	movs	r0, #0
    3a40:	e6e3      	b.n	380a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
    3a42:	bf00      	nop
    3a44:	00014b3d 	.word	0x00014b3d
    3a48:	00022458 	.word	0x00022458
    3a4c:	00021f54 	.word	0x00021f54
    3a50:	00022114 	.word	0x00022114
    3a54:	00021ca8 	.word	0x00021ca8
    3a58:	00022004 	.word	0x00022004
    3a5c:	00021db0 	.word	0x00021db0
    3a60:	00021cc4 	.word	0x00021cc4
    3a64:	00021cfc 	.word	0x00021cfc
    3a68:	00021d18 	.word	0x00021d18
    3a6c:	00021304 	.word	0x00021304
    3a70:	00021d2c 	.word	0x00021d2c
    3a74:	00021f68 	.word	0x00021f68
    3a78:	00022148 	.word	0x00022148
    3a7c:	00021f30 	.word	0x00021f30
    3a80:	00001e7d 	.word	0x00001e7d

00003a84 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode>:
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
      GetTensorShape(output), GetTensorData<uint8_t>(output));
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    3a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a88:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
    3a8c:	4682      	mov	sl, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    3a8e:	6908      	ldr	r0, [r1, #16]
    3a90:	2800      	cmp	r0, #0
    3a92:	d032      	beq.n	3afa <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x76>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    3a94:	694b      	ldr	r3, [r1, #20]
    3a96:	2b00      	cmp	r3, #0
    3a98:	d031      	beq.n	3afe <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x7a>
    3a9a:	f8da 8008 	ldr.w	r8, [sl, #8]
    3a9e:	684a      	ldr	r2, [r1, #4]
    3aa0:	6854      	ldr	r4, [r2, #4]
    3aa2:	eb08 1484 	add.w	r4, r8, r4, lsl #6
  return &context->tensors[node->inputs->data[index]];
    3aa6:	680a      	ldr	r2, [r1, #0]
    3aa8:	6851      	ldr	r1, [r2, #4]
    3aaa:	ea4f 1981 	mov.w	r9, r1, lsl #6
    3aae:	eb08 0609 	add.w	r6, r8, r9
    3ab2:	6895      	ldr	r5, [r2, #8]
    3ab4:	eb08 1585 	add.w	r5, r8, r5, lsl #6

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
  const TfLiteTensor* bias =
      (NumInputs(node) == 3) ? GetInput(context, node, kBiasTensor) : nullptr;
    3ab8:	6811      	ldr	r1, [r2, #0]
    3aba:	2903      	cmp	r1, #3
    3abc:	bf06      	itte	eq
    3abe:	68d7      	ldreq	r7, [r2, #12]
    3ac0:	eb08 1787 	addeq.w	r7, r8, r7, lsl #6
    3ac4:	2700      	movne	r7, #0

  // TODO(aselle): Consider whether float conv and quantized conv should be
  // separate ops to avoid dispatch overhead here.
  switch (input->type) {  // Already know in/out types are same.
    3ac6:	f818 2009 	ldrb.w	r2, [r8, r9]
    3aca:	2a03      	cmp	r2, #3
    3acc:	f000 85b8 	beq.w	4640 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xbbc>
    3ad0:	2a09      	cmp	r2, #9
    3ad2:	f000 82e7 	beq.w	40a4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x620>
    3ad6:	2a01      	cmp	r2, #1
    3ad8:	d01a      	beq.n	3b10 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x8c>
      break;
    case kTfLiteUInt8:
      EvalQuantized(context, node, params, &data, input, filter, bias, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    3ada:	f8da 4014 	ldr.w	r4, [sl, #20]
    3ade:	4610      	mov	r0, r2
    3ae0:	4b08      	ldr	r3, [pc, #32]	; (3b04 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x80>)
    3ae2:	4798      	blx	r3
    3ae4:	f818 3009 	ldrb.w	r3, [r8, r9]
    3ae8:	4602      	mov	r2, r0
    3aea:	4907      	ldr	r1, [pc, #28]	; (3b08 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x84>)
    3aec:	4650      	mov	r0, sl
    3aee:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    3af0:	2001      	movs	r0, #1
  }
  return kTfLiteOk;
}
    3af2:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
    3af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
    3afa:	4b04      	ldr	r3, [pc, #16]	; (3b0c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x88>)
    3afc:	4798      	blx	r3
  TFLITE_DCHECK(node->builtin_data != nullptr);
    3afe:	4b03      	ldr	r3, [pc, #12]	; (3b0c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x88>)
    3b00:	4798      	blx	r3
    3b02:	bf00      	nop
    3b04:	0000a3c5 	.word	0x0000a3c5
    3b08:	0002207c 	.word	0x0002207c
    3b0c:	00014b3d 	.word	0x00014b3d
  CalculateActivationRange(params->activation, &output_activation_min,
    3b10:	7c1a      	ldrb	r2, [r3, #16]
  if (activation == kTfLiteActRelu) {
    3b12:	2a01      	cmp	r2, #1
    3b14:	f000 815e 	beq.w	3dd4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x350>
  } else if (activation == kTfLiteActRelu6) {
    3b18:	2a03      	cmp	r2, #3
    3b1a:	f000 8169 	beq.w	3df0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x36c>
  } else if (activation == kTfLiteActReluN1To1) {
    3b1e:	2a02      	cmp	r2, #2
    3b20:	f000 816b 	beq.w	3dfa <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x376>
    *activation_max = std::numeric_limits<T>::max();
    3b24:	4aae      	ldr	r2, [pc, #696]	; (3de0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x35c>)
    3b26:	921a      	str	r2, [sp, #104]	; 0x68
    *activation_min = std::numeric_limits<T>::lowest();
    3b28:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
    3b2c:	9219      	str	r2, [sp, #100]	; 0x64
  op_params.padding_values.width = data->padding.width;
    3b2e:	6802      	ldr	r2, [r0, #0]
    3b30:	9201      	str	r2, [sp, #4]
  op_params.padding_values.height = data->padding.height;
    3b32:	6842      	ldr	r2, [r0, #4]
    3b34:	9202      	str	r2, [sp, #8]
  op_params.stride_width = params->stride_width;
    3b36:	f8d3 a004 	ldr.w	sl, [r3, #4]
  op_params.stride_height = params->stride_height;
    3b3a:	f8d3 b008 	ldr.w	fp, [r3, #8]
  op_params.dilation_width_factor = params->dilation_width_factor;
    3b3e:	695a      	ldr	r2, [r3, #20]
    3b40:	9203      	str	r2, [sp, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
    3b42:	699a      	ldr	r2, [r3, #24]
    3b44:	9204      	str	r2, [sp, #16]
  op_params.depth_multiplier = params->depth_multiplier;
    3b46:	68db      	ldr	r3, [r3, #12]
    3b48:	9305      	str	r3, [sp, #20]
  if (tensor == nullptr) {
    3b4a:	2e00      	cmp	r6, #0
    3b4c:	f000 815b 	beq.w	3e06 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x382>
  const int dims_size = dims->size;
    3b50:	f8d6 9008 	ldr.w	r9, [r6, #8]
    3b54:	f859 8b04 	ldr.w	r8, [r9], #4
    size_ = dimensions_count;
    3b58:	f8cd 8150 	str.w	r8, [sp, #336]	; 0x150
    if (dimensions_count > kMaxSmallSize) {
    3b5c:	f1b8 0f05 	cmp.w	r8, #5
    3b60:	f340 8153 	ble.w	3e0a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x386>
      dims_pointer_ = new int32[dimensions_count];
    3b64:	4b9f      	ldr	r3, [pc, #636]	; (3de4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x360>)
    3b66:	4598      	cmp	r8, r3
    3b68:	bf94      	ite	ls
    3b6a:	ea4f 0088 	movls.w	r0, r8, lsl #2
    3b6e:	f04f 30ff 	movhi.w	r0, #4294967295
    3b72:	4b9d      	ldr	r3, [pc, #628]	; (3de8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x364>)
    3b74:	4798      	blx	r3
    3b76:	9055      	str	r0, [sp, #340]	; 0x154
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    3b78:	ea4f 0288 	mov.w	r2, r8, lsl #2
    3b7c:	4649      	mov	r1, r9
    3b7e:	4b9b      	ldr	r3, [pc, #620]	; (3dec <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x368>)
    3b80:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    3b82:	6876      	ldr	r6, [r6, #4]
  if (tensor == nullptr) {
    3b84:	2d00      	cmp	r5, #0
    3b86:	f000 8142 	beq.w	3e0e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x38a>
  const int dims_size = dims->size;
    3b8a:	f8d5 9008 	ldr.w	r9, [r5, #8]
    3b8e:	f859 8b04 	ldr.w	r8, [r9], #4
    size_ = dimensions_count;
    3b92:	f8cd 8138 	str.w	r8, [sp, #312]	; 0x138
    if (dimensions_count > kMaxSmallSize) {
    3b96:	f1b8 0f05 	cmp.w	r8, #5
    3b9a:	f340 813c 	ble.w	3e16 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x392>
      dims_pointer_ = new int32[dimensions_count];
    3b9e:	4b91      	ldr	r3, [pc, #580]	; (3de4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x360>)
    3ba0:	4598      	cmp	r8, r3
    3ba2:	bf94      	ite	ls
    3ba4:	ea4f 0088 	movls.w	r0, r8, lsl #2
    3ba8:	f04f 30ff 	movhi.w	r0, #4294967295
    3bac:	4b8e      	ldr	r3, [pc, #568]	; (3de8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x364>)
    3bae:	4798      	blx	r3
    3bb0:	904f      	str	r0, [sp, #316]	; 0x13c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    3bb2:	ea4f 0288 	mov.w	r2, r8, lsl #2
    3bb6:	4649      	mov	r1, r9
    3bb8:	4b8c      	ldr	r3, [pc, #560]	; (3dec <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x368>)
    3bba:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    3bbc:	686b      	ldr	r3, [r5, #4]
    3bbe:	932d      	str	r3, [sp, #180]	; 0xb4
  if (tensor == nullptr) {
    3bc0:	2f00      	cmp	r7, #0
    3bc2:	f000 812a 	beq.w	3e1a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x396>
  const int dims_size = dims->size;
    3bc6:	f8d7 8008 	ldr.w	r8, [r7, #8]
    3bca:	f858 5b04 	ldr.w	r5, [r8], #4
    size_ = dimensions_count;
    3bce:	9548      	str	r5, [sp, #288]	; 0x120
    if (dimensions_count > kMaxSmallSize) {
    3bd0:	2d05      	cmp	r5, #5
    3bd2:	f340 8126 	ble.w	3e22 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x39e>
      dims_pointer_ = new int32[dimensions_count];
    3bd6:	4b83      	ldr	r3, [pc, #524]	; (3de4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x360>)
    3bd8:	429d      	cmp	r5, r3
    3bda:	bf94      	ite	ls
    3bdc:	00a8      	lslls	r0, r5, #2
    3bde:	f04f 30ff 	movhi.w	r0, #4294967295
    3be2:	4b81      	ldr	r3, [pc, #516]	; (3de8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x364>)
    3be4:	4798      	blx	r3
    3be6:	9049      	str	r0, [sp, #292]	; 0x124
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    3be8:	00aa      	lsls	r2, r5, #2
    3bea:	4641      	mov	r1, r8
    3bec:	4b7f      	ldr	r3, [pc, #508]	; (3dec <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x368>)
    3bee:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    3bf0:	687b      	ldr	r3, [r7, #4]
    3bf2:	9320      	str	r3, [sp, #128]	; 0x80
  if (tensor == nullptr) {
    3bf4:	2c00      	cmp	r4, #0
    3bf6:	f000 8116 	beq.w	3e26 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3a2>
  const int dims_size = dims->size;
    3bfa:	68a7      	ldr	r7, [r4, #8]
    3bfc:	f857 5b04 	ldr.w	r5, [r7], #4
    size_ = dimensions_count;
    3c00:	9542      	str	r5, [sp, #264]	; 0x108
    if (dimensions_count > kMaxSmallSize) {
    3c02:	2d05      	cmp	r5, #5
    3c04:	f340 8113 	ble.w	3e2e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3aa>
      dims_pointer_ = new int32[dimensions_count];
    3c08:	4b76      	ldr	r3, [pc, #472]	; (3de4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x360>)
    3c0a:	429d      	cmp	r5, r3
    3c0c:	bf94      	ite	ls
    3c0e:	00a8      	lslls	r0, r5, #2
    3c10:	f04f 30ff 	movhi.w	r0, #4294967295
    3c14:	4b74      	ldr	r3, [pc, #464]	; (3de8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x364>)
    3c16:	4798      	blx	r3
    3c18:	9043      	str	r0, [sp, #268]	; 0x10c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    3c1a:	00aa      	lsls	r2, r5, #2
    3c1c:	4639      	mov	r1, r7
    3c1e:	4b73      	ldr	r3, [pc, #460]	; (3dec <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x368>)
    3c20:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    3c22:	f8d4 9004 	ldr.w	r9, [r4, #4]
  op_params.stride_width = params->stride_width;
    3c26:	fa0f f08a 	sxth.w	r0, sl
  op_params.stride_height = params->stride_height;
    3c2a:	fa0f f48b 	sxth.w	r4, fp
  op_params.dilation_width_factor = params->dilation_width_factor;
    3c2e:	f9bd e00c 	ldrsh.w	lr, [sp, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
    3c32:	f9bd 7010 	ldrsh.w	r7, [sp, #16]
  op_params.padding_values.width = data->padding.width;
    3c36:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
  op_params.padding_values.height = data->padding.height;
    3c3a:	f9bd c008 	ldrsh.w	ip, [sp, #8]
  op_params.depth_multiplier = params->depth_multiplier;
    3c3e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
    3c42:	9322      	str	r3, [sp, #136]	; 0x88
  const int stride_height = params.stride_height;
  const int dilation_width_factor = params.dilation_width_factor;
  const int dilation_height_factor = params.dilation_height_factor;
  const int pad_width = params.padding_values.width;
  const int pad_height = params.padding_values.height;
  const int depth_multiplier = params.depth_multiplier;
    3c44:	9331      	str	r3, [sp, #196]	; 0xc4
  const float output_activation_min = params.float_activation_min;
  const float output_activation_max = params.float_activation_max;
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    3c46:	9b54      	ldr	r3, [sp, #336]	; 0x150
    3c48:	2b04      	cmp	r3, #4
    3c4a:	f040 80f2 	bne.w	3e32 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3ae>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    3c4e:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    3c50:	2b04      	cmp	r3, #4
    3c52:	f040 80f0 	bne.w	3e36 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3b2>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    3c56:	9b42      	ldr	r3, [sp, #264]	; 0x108
    3c58:	2b04      	cmp	r3, #4
    3c5a:	f040 80ee 	bne.w	3e3a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3b6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    3c5e:	9b55      	ldr	r3, [sp, #340]	; 0x154
    3c60:	9312      	str	r3, [sp, #72]	; 0x48
    3c62:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    3c64:	921d      	str	r2, [sp, #116]	; 0x74
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    3c66:	429a      	cmp	r2, r3
    3c68:	f040 80e9 	bne.w	3e3e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3ba>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    3c6c:	9b46      	ldr	r3, [sp, #280]	; 0x118
    3c6e:	461a      	mov	r2, r3
    3c70:	9318      	str	r3, [sp, #96]	; 0x60
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    3c72:	9b52      	ldr	r3, [sp, #328]	; 0x148
    3c74:	429a      	cmp	r2, r3
    3c76:	f040 80e4 	bne.w	3e42 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3be>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    3c7a:	9b56      	ldr	r3, [sp, #344]	; 0x158
    3c7c:	9306      	str	r3, [sp, #24]
    3c7e:	9b57      	ldr	r3, [sp, #348]	; 0x15c
    3c80:	9301      	str	r3, [sp, #4]
    3c82:	9b58      	ldr	r3, [sp, #352]	; 0x160
    3c84:	930f      	str	r3, [sp, #60]	; 0x3c
    3c86:	9a50      	ldr	r2, [sp, #320]	; 0x140
    3c88:	9207      	str	r2, [sp, #28]
    3c8a:	f8dd 8144 	ldr.w	r8, [sp, #324]	; 0x144
    3c8e:	9a44      	ldr	r2, [sp, #272]	; 0x110
    3c90:	9217      	str	r2, [sp, #92]	; 0x5c
    3c92:	9a45      	ldr	r2, [sp, #276]	; 0x114
    3c94:	9216      	str	r2, [sp, #88]	; 0x58
  const int input_depth = input_shape.Dims(3);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    3c96:	9a22      	ldr	r2, [sp, #136]	; 0x88
    3c98:	fb03 f302 	mul.w	r3, r3, r2
    3c9c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    3c9e:	4293      	cmp	r3, r2
    3ca0:	f040 80d1 	bne.w	3e46 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3c2>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3ca4:	9b48      	ldr	r3, [sp, #288]	; 0x120
    3ca6:	932f      	str	r3, [sp, #188]	; 0xbc
    3ca8:	2b05      	cmp	r3, #5
    3caa:	bfcc      	ite	gt
    3cac:	9a49      	ldrgt	r2, [sp, #292]	; 0x124
    3cae:	aa49      	addle	r2, sp, #292	; 0x124
    for (int i = 0; i < size_; i++) {
    3cb0:	992f      	ldr	r1, [sp, #188]	; 0xbc
    3cb2:	2900      	cmp	r1, #0
    3cb4:	f340 80c9 	ble.w	3e4a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3c6>
    3cb8:	4613      	mov	r3, r2
    3cba:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3cbe:	2101      	movs	r1, #1
    3cc0:	4692      	mov	sl, r2
      buffer_size *= dims_data[i];
    3cc2:	f853 2b04 	ldr.w	r2, [r3], #4
    3cc6:	fb02 f101 	mul.w	r1, r2, r1
    for (int i = 0; i < size_; i++) {
    3cca:	4553      	cmp	r3, sl
    3ccc:	d1f9      	bne.n	3cc2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x23e>
    3cce:	9110      	str	r1, [sp, #64]	; 0x40
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    3cd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3cd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    3cd4:	4293      	cmp	r3, r2
    3cd6:	f040 80bb 	bne.w	3e50 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3cc>

  for (int b = 0; b < batches; ++b) {
    3cda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    3cdc:	2b00      	cmp	r3, #0
    3cde:	f340 81d6 	ble.w	408e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x60a>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    3ce2:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    3ce4:	9313      	str	r3, [sp, #76]	; 0x4c
    3ce6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3ce8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    3cea:	fb03 f302 	mul.w	r3, r3, r2
    3cee:	009b      	lsls	r3, r3, #2
    3cf0:	9918      	ldr	r1, [sp, #96]	; 0x60
    3cf2:	460a      	mov	r2, r1
    3cf4:	fb02 f203 	mul.w	r2, r2, r3
    3cf8:	9234      	str	r2, [sp, #208]	; 0xd0
    3cfa:	f8cd 909c 	str.w	r9, [sp, #156]	; 0x9c
    3cfe:	9a01      	ldr	r2, [sp, #4]
    3d00:	9b06      	ldr	r3, [sp, #24]
    3d02:	fb02 f303 	mul.w	r3, r2, r3
    3d06:	ea4f 0983 	mov.w	r9, r3, lsl #2
    3d0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3d0c:	fb03 f909 	mul.w	r9, r3, r9
    3d10:	f8cd 90c0 	str.w	r9, [sp, #192]	; 0xc0
    3d14:	f1cc 0c00 	rsb	ip, ip, #0
    3d18:	f8cd c0b8 	str.w	ip, [sp, #184]	; 0xb8
    3d1c:	426b      	negs	r3, r5
    3d1e:	9335      	str	r3, [sp, #212]	; 0xd4
    3d20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3d22:	009b      	lsls	r3, r3, #2
    3d24:	4694      	mov	ip, r2
    3d26:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    3d28:	fb0c f202 	mul.w	r2, ip, r2
    3d2c:	1b52      	subs	r2, r2, r5
    3d2e:	fb03 6502 	mla	r5, r3, r2, r6
    3d32:	9523      	str	r5, [sp, #140]	; 0x8c
    3d34:	9e16      	ldr	r6, [sp, #88]	; 0x58
    3d36:	fb06 f201 	mul.w	r2, r6, r1
    3d3a:	0096      	lsls	r6, r2, #2
    3d3c:	9633      	str	r6, [sp, #204]	; 0xcc
    3d3e:	9436      	str	r4, [sp, #216]	; 0xd8
    3d40:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    3d42:	4662      	mov	r2, ip
    3d44:	fb05 f202 	mul.w	r2, r5, r2
    3d48:	0092      	lsls	r2, r2, #2
    3d4a:	fb02 f404 	mul.w	r4, r2, r4
    3d4e:	9432      	str	r4, [sp, #200]	; 0xc8
    3d50:	0089      	lsls	r1, r1, #2
    3d52:	913a      	str	r1, [sp, #232]	; 0xe8
    3d54:	9038      	str	r0, [sp, #224]	; 0xe0
    3d56:	fb00 f103 	mul.w	r1, r0, r3
    3d5a:	913b      	str	r1, [sp, #236]	; 0xec
    3d5c:	9922      	ldr	r1, [sp, #136]	; 0x88
    3d5e:	9139      	str	r1, [sp, #228]	; 0xe4
    3d60:	0089      	lsls	r1, r1, #2
    3d62:	9137      	str	r1, [sp, #220]	; 0xdc
    3d64:	9810      	ldr	r0, [sp, #64]	; 0x40
    3d66:	fb00 f108 	mul.w	r1, r0, r8
    3d6a:	0089      	lsls	r1, r1, #2
    3d6c:	910c      	str	r1, [sp, #48]	; 0x30
    3d6e:	970a      	str	r7, [sp, #40]	; 0x28
    3d70:	fb02 f207 	mul.w	r2, r2, r7
    3d74:	920b      	str	r2, [sp, #44]	; 0x2c
    3d76:	ea4f 0980 	mov.w	r9, r0, lsl #2
    3d7a:	fb0e fa03 	mul.w	sl, lr, r3
    3d7e:	2300      	movs	r3, #0
    3d80:	930e      	str	r3, [sp, #56]	; 0x38
                      filter_shape, 0, filter_y, filter_x, oc)];
                  total += (input_value * filter_value);
                }
              }
            }
            float bias_value = 0.0f;
    3d82:	46d3      	mov	fp, sl
    3d84:	46c2      	mov	sl, r8
    3d86:	46f0      	mov	r8, lr
    for (int out_y = 0; out_y < output_height; ++out_y) {
    3d88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    3d8a:	2b00      	cmp	r3, #0
    3d8c:	f340 8170 	ble.w	4070 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x5ec>
    3d90:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    3d92:	931e      	str	r3, [sp, #120]	; 0x78
    3d94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    3d96:	932a      	str	r3, [sp, #168]	; 0xa8
    3d98:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    3d9a:	9324      	str	r3, [sp, #144]	; 0x90
    3d9c:	2300      	movs	r3, #0
    3d9e:	931c      	str	r3, [sp, #112]	; 0x70
      for (int out_x = 0; out_x < output_width; ++out_x) {
    3da0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3da2:	2b00      	cmp	r3, #0
    3da4:	f340 8151 	ble.w	404a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x5c6>
    3da8:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    3daa:	930d      	str	r3, [sp, #52]	; 0x34
    3dac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    3dae:	932c      	str	r3, [sp, #176]	; 0xb0
    3db0:	9b24      	ldr	r3, [sp, #144]	; 0x90
    3db2:	9328      	str	r3, [sp, #160]	; 0xa0
    3db4:	2300      	movs	r3, #0
    3db6:	931b      	str	r3, [sp, #108]	; 0x6c
        for (int ic = 0; ic < input_depth; ++ic) {
    3db8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3dba:	2b00      	cmp	r3, #0
    3dbc:	f340 8132 	ble.w	4024 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x5a0>
    3dc0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    3dc2:	9325      	str	r3, [sp, #148]	; 0x94
    3dc4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    3dc6:	931f      	str	r3, [sp, #124]	; 0x7c
    3dc8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3dca:	932b      	str	r3, [sp, #172]	; 0xac
    3dcc:	2300      	movs	r3, #0
    3dce:	9326      	str	r3, [sp, #152]	; 0x98
    3dd0:	9311      	str	r3, [sp, #68]	; 0x44
    3dd2:	e10b      	b.n	3fec <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x568>
    *activation_max = std::numeric_limits<T>::max();
    3dd4:	4a02      	ldr	r2, [pc, #8]	; (3de0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x35c>)
    3dd6:	921a      	str	r2, [sp, #104]	; 0x68
    *activation_min = 0;
    3dd8:	2200      	movs	r2, #0
    3dda:	9219      	str	r2, [sp, #100]	; 0x64
    3ddc:	e6a7      	b.n	3b2e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xaa>
    3dde:	bf00      	nop
    3de0:	7f7fffff 	.word	0x7f7fffff
    3de4:	1ffffffe 	.word	0x1ffffffe
    3de8:	0000a511 	.word	0x0000a511
    3dec:	000158c1 	.word	0x000158c1
    *activation_max = 6;
    3df0:	4a85      	ldr	r2, [pc, #532]	; (4008 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x584>)
    3df2:	921a      	str	r2, [sp, #104]	; 0x68
    *activation_min = 0;
    3df4:	2200      	movs	r2, #0
    3df6:	9219      	str	r2, [sp, #100]	; 0x64
    3df8:	e699      	b.n	3b2e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xaa>
    *activation_max = 1;
    3dfa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    3dfe:	921a      	str	r2, [sp, #104]	; 0x68
    *activation_min = -1;
    3e00:	4a82      	ldr	r2, [pc, #520]	; (400c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x588>)
    3e02:	9219      	str	r2, [sp, #100]	; 0x64
    3e04:	e693      	b.n	3b2e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xaa>
  RuntimeShape() : size_(0) {}
    3e06:	9654      	str	r6, [sp, #336]	; 0x150
    3e08:	e6bc      	b.n	3b84 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x100>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3e0a:	a855      	add	r0, sp, #340	; 0x154
    3e0c:	e6b4      	b.n	3b78 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xf4>
  RuntimeShape() : size_(0) {}
    3e0e:	2300      	movs	r3, #0
    3e10:	934e      	str	r3, [sp, #312]	; 0x138
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    3e12:	932d      	str	r3, [sp, #180]	; 0xb4
    3e14:	e6d4      	b.n	3bc0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x13c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3e16:	a84f      	add	r0, sp, #316	; 0x13c
    3e18:	e6cb      	b.n	3bb2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x12e>
  RuntimeShape() : size_(0) {}
    3e1a:	2300      	movs	r3, #0
    3e1c:	9348      	str	r3, [sp, #288]	; 0x120
    3e1e:	9320      	str	r3, [sp, #128]	; 0x80
    3e20:	e6e8      	b.n	3bf4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x170>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3e22:	a849      	add	r0, sp, #292	; 0x124
    3e24:	e6e0      	b.n	3be8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x164>
  RuntimeShape() : size_(0) {}
    3e26:	2300      	movs	r3, #0
    3e28:	9342      	str	r3, [sp, #264]	; 0x108
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    3e2a:	4699      	mov	r9, r3
    3e2c:	e6fb      	b.n	3c26 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1a2>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3e2e:	a843      	add	r0, sp, #268	; 0x10c
    3e30:	e6f3      	b.n	3c1a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x196>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    3e32:	4b77      	ldr	r3, [pc, #476]	; (4010 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    3e34:	4798      	blx	r3
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    3e36:	4b76      	ldr	r3, [pc, #472]	; (4010 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    3e38:	4798      	blx	r3
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    3e3a:	4b75      	ldr	r3, [pc, #468]	; (4010 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    3e3c:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    3e3e:	4b74      	ldr	r3, [pc, #464]	; (4010 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    3e40:	4798      	blx	r3
    3e42:	4b73      	ldr	r3, [pc, #460]	; (4010 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    3e44:	4798      	blx	r3
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    3e46:	4b72      	ldr	r3, [pc, #456]	; (4010 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    3e48:	4798      	blx	r3
    int buffer_size = 1;
    3e4a:	2301      	movs	r3, #1
    3e4c:	9310      	str	r3, [sp, #64]	; 0x40
    3e4e:	e73f      	b.n	3cd0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x24c>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    3e50:	4b6f      	ldr	r3, [pc, #444]	; (4010 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    3e52:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    3e54:	4b6e      	ldr	r3, [pc, #440]	; (4010 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    3e56:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    3e58:	4b6d      	ldr	r3, [pc, #436]	; (4010 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    3e5a:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    3e5c:	4b6c      	ldr	r3, [pc, #432]	; (4010 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    3e5e:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    3e60:	4b6b      	ldr	r3, [pc, #428]	; (4010 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    3e62:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    3e64:	4b6a      	ldr	r3, [pc, #424]	; (4010 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    3e66:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    3e68:	4b69      	ldr	r3, [pc, #420]	; (4010 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    3e6a:	4798      	blx	r3
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    3e6c:	3501      	adds	r5, #1
    3e6e:	4444      	add	r4, r8
    3e70:	444f      	add	r7, r9
    3e72:	445e      	add	r6, fp
    3e74:	4555      	cmp	r5, sl
    3e76:	d033      	beq.n	3ee0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x45c>
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    3e78:	2c00      	cmp	r4, #0
    3e7a:	dbf7      	blt.n	3e6c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3e8>
    3e7c:	9b01      	ldr	r3, [sp, #4]
    3e7e:	42a3      	cmp	r3, r4
    3e80:	ddf4      	ble.n	3e6c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3e8>
    3e82:	9b02      	ldr	r3, [sp, #8]
    3e84:	2b00      	cmp	r3, #0
    3e86:	dbf1      	blt.n	3e6c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3e8>
    3e88:	9a06      	ldr	r2, [sp, #24]
    3e8a:	429a      	cmp	r2, r3
    3e8c:	ddee      	ble.n	3e6c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3e8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    3e8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3e90:	2b00      	cmp	r3, #0
    3e92:	dbdf      	blt.n	3e54 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3d0>
    3e94:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3e96:	4293      	cmp	r3, r2
    3e98:	dadc      	bge.n	3e54 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3d0>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    3e9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3e9c:	2b00      	cmp	r3, #0
    3e9e:	dbdb      	blt.n	3e58 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3d4>
    3ea0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    3ea2:	4293      	cmp	r3, r2
    3ea4:	dad8      	bge.n	3e58 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3d4>
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
    3ea6:	6830      	ldr	r0, [r6, #0]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    3ea8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3eaa:	2b00      	cmp	r3, #0
    3eac:	ddd6      	ble.n	3e5c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3d8>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    3eae:	9b05      	ldr	r3, [sp, #20]
    3eb0:	2b00      	cmp	r3, #0
    3eb2:	dbd5      	blt.n	3e60 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3dc>
    3eb4:	9a07      	ldr	r2, [sp, #28]
    3eb6:	4293      	cmp	r3, r2
    3eb8:	dad2      	bge.n	3e60 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3dc>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    3eba:	2d00      	cmp	r5, #0
    3ebc:	dbd2      	blt.n	3e64 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3e0>
    3ebe:	4555      	cmp	r5, sl
    3ec0:	dad0      	bge.n	3e64 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3e0>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    3ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3ec4:	2b00      	cmp	r3, #0
    3ec6:	dbcf      	blt.n	3e68 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3e4>
    3ec8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3eca:	429a      	cmp	r2, r3
    3ecc:	ddcc      	ble.n	3e68 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3e4>
                  total += (input_value * filter_value);
    3ece:	6839      	ldr	r1, [r7, #0]
    3ed0:	4b50      	ldr	r3, [pc, #320]	; (4014 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x590>)
    3ed2:	4798      	blx	r3
    3ed4:	4601      	mov	r1, r0
    3ed6:	9808      	ldr	r0, [sp, #32]
    3ed8:	4b4f      	ldr	r3, [pc, #316]	; (4018 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x594>)
    3eda:	4798      	blx	r3
    3edc:	9008      	str	r0, [sp, #32]
    3ede:	e7c5      	b.n	3e6c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3e8>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    3ee0:	9b05      	ldr	r3, [sp, #20]
    3ee2:	3301      	adds	r3, #1
    3ee4:	9305      	str	r3, [sp, #20]
    3ee6:	9a04      	ldr	r2, [sp, #16]
    3ee8:	990c      	ldr	r1, [sp, #48]	; 0x30
    3eea:	440a      	add	r2, r1
    3eec:	9204      	str	r2, [sp, #16]
    3eee:	9a03      	ldr	r2, [sp, #12]
    3ef0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3ef2:	440a      	add	r2, r1
    3ef4:	9203      	str	r2, [sp, #12]
    3ef6:	9a02      	ldr	r2, [sp, #8]
    3ef8:	990a      	ldr	r1, [sp, #40]	; 0x28
    3efa:	440a      	add	r2, r1
    3efc:	9202      	str	r2, [sp, #8]
    3efe:	9a07      	ldr	r2, [sp, #28]
    3f00:	4293      	cmp	r3, r2
    3f02:	d009      	beq.n	3f18 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x494>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    3f04:	f1ba 0f00 	cmp.w	sl, #0
    3f08:	ddea      	ble.n	3ee0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x45c>
    3f0a:	9e03      	ldr	r6, [sp, #12]
    3f0c:	9f04      	ldr	r7, [sp, #16]
    3f0e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    3f10:	2500      	movs	r5, #0
    3f12:	e7b1      	b.n	3e78 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x3f4>
            float total = 0.f;
    3f14:	2300      	movs	r3, #0
    3f16:	9308      	str	r3, [sp, #32]
            if (bias_data) {
    3f18:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3f1a:	2b00      	cmp	r3, #0
    3f1c:	d046      	beq.n	3fac <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x528>
              bias_value = bias_data[oc];
    3f1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3f20:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    3f24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3f26:	2b00      	cmp	r3, #0
    3f28:	db42      	blt.n	3fb0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x52c>
    3f2a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    3f2c:	4293      	cmp	r3, r2
    3f2e:	da3f      	bge.n	3fb0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x52c>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    3f30:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    3f32:	2b00      	cmp	r3, #0
    3f34:	db3e      	blt.n	3fb4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x530>
    3f36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    3f38:	429a      	cmp	r2, r3
    3f3a:	dd3b      	ble.n	3fb4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x530>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    3f3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    3f3e:	2b00      	cmp	r3, #0
    3f40:	db3a      	blt.n	3fb8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x534>
    3f42:	9a16      	ldr	r2, [sp, #88]	; 0x58
    3f44:	429a      	cmp	r2, r3
    3f46:	dd37      	ble.n	3fb8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x534>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    3f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3f4a:	2b00      	cmp	r3, #0
    3f4c:	db36      	blt.n	3fbc <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x538>
    3f4e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    3f50:	429a      	cmp	r2, r3
    3f52:	dd33      	ble.n	3fbc <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x538>
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
                ActivationFunctionWithMinMax(total + bias_value,
    3f54:	9908      	ldr	r1, [sp, #32]
    3f56:	4b30      	ldr	r3, [pc, #192]	; (4018 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x594>)
    3f58:	4798      	blx	r3
    3f5a:	4604      	mov	r4, r0
      if (__a < __b)
    3f5c:	9d19      	ldr	r5, [sp, #100]	; 0x64
    3f5e:	4629      	mov	r1, r5
    3f60:	4b2e      	ldr	r3, [pc, #184]	; (401c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x598>)
    3f62:	4798      	blx	r3
    3f64:	b100      	cbz	r0, 3f68 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x4e4>
	return __b;
    3f66:	462c      	mov	r4, r5
      if (__b < __a)
    3f68:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    3f6a:	4629      	mov	r1, r5
    3f6c:	4620      	mov	r0, r4
    3f6e:	4b2c      	ldr	r3, [pc, #176]	; (4020 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x59c>)
    3f70:	4798      	blx	r3
    3f72:	b100      	cbz	r0, 3f76 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x4f2>
	return __b;
    3f74:	462c      	mov	r4, r5
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
    3f76:	9b15      	ldr	r3, [sp, #84]	; 0x54
    3f78:	f843 4b04 	str.w	r4, [r3], #4
    3f7c:	9315      	str	r3, [sp, #84]	; 0x54
    3f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3f80:	3301      	adds	r3, #1
    3f82:	9309      	str	r3, [sp, #36]	; 0x24
    3f84:	9a14      	ldr	r2, [sp, #80]	; 0x50
    3f86:	3204      	adds	r2, #4
    3f88:	9214      	str	r2, [sp, #80]	; 0x50
          for (int m = 0; m < depth_multiplier; m++) {
    3f8a:	9a21      	ldr	r2, [sp, #132]	; 0x84
    3f8c:	4293      	cmp	r3, r2
    3f8e:	d017      	beq.n	3fc0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x53c>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    3f90:	9b07      	ldr	r3, [sp, #28]
    3f92:	2b00      	cmp	r3, #0
    3f94:	ddbe      	ble.n	3f14 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x490>
    3f96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    3f98:	9302      	str	r3, [sp, #8]
    3f9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    3f9c:	9303      	str	r3, [sp, #12]
    3f9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3fa0:	9304      	str	r3, [sp, #16]
    3fa2:	2300      	movs	r3, #0
    3fa4:	9305      	str	r3, [sp, #20]
    3fa6:	2300      	movs	r3, #0
    3fa8:	9308      	str	r3, [sp, #32]
    3faa:	e7ab      	b.n	3f04 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x480>
            float bias_value = 0.0f;
    3fac:	2000      	movs	r0, #0
    3fae:	e7b9      	b.n	3f24 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x4a0>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    3fb0:	4b17      	ldr	r3, [pc, #92]	; (4010 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    3fb2:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    3fb4:	4b16      	ldr	r3, [pc, #88]	; (4010 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    3fb6:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    3fb8:	4b15      	ldr	r3, [pc, #84]	; (4010 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    3fba:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    3fbc:	4b14      	ldr	r3, [pc, #80]	; (4010 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    3fbe:	4798      	blx	r3
        for (int ic = 0; ic < input_depth; ++ic) {
    3fc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3fc2:	3301      	adds	r3, #1
    3fc4:	9311      	str	r3, [sp, #68]	; 0x44
    3fc6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    3fc8:	4610      	mov	r0, r2
    3fca:	9937      	ldr	r1, [sp, #220]	; 0xdc
    3fcc:	4408      	add	r0, r1
    3fce:	902b      	str	r0, [sp, #172]	; 0xac
    3fd0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    3fd2:	9839      	ldr	r0, [sp, #228]	; 0xe4
    3fd4:	4402      	add	r2, r0
    3fd6:	9226      	str	r2, [sp, #152]	; 0x98
    3fd8:	9a25      	ldr	r2, [sp, #148]	; 0x94
    3fda:	4610      	mov	r0, r2
    3fdc:	4408      	add	r0, r1
    3fde:	9025      	str	r0, [sp, #148]	; 0x94
    3fe0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    3fe2:	3204      	adds	r2, #4
    3fe4:	921f      	str	r2, [sp, #124]	; 0x7c
    3fe6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    3fe8:	4293      	cmp	r3, r2
    3fea:	d01b      	beq.n	4024 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x5a0>
          for (int m = 0; m < depth_multiplier; m++) {
    3fec:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    3fee:	2b00      	cmp	r3, #0
    3ff0:	dde6      	ble.n	3fc0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x53c>
    3ff2:	9a22      	ldr	r2, [sp, #136]	; 0x88
    3ff4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    3ff6:	441a      	add	r2, r3
    3ff8:	9221      	str	r2, [sp, #132]	; 0x84
    3ffa:	9a25      	ldr	r2, [sp, #148]	; 0x94
    3ffc:	9214      	str	r2, [sp, #80]	; 0x50
    3ffe:	9309      	str	r3, [sp, #36]	; 0x24
    4000:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    4002:	9315      	str	r3, [sp, #84]	; 0x54
    4004:	e7c4      	b.n	3f90 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x50c>
    4006:	bf00      	nop
    4008:	40c00000 	.word	0x40c00000
    400c:	bf800000 	.word	0xbf800000
    4010:	00014b3d 	.word	0x00014b3d
    4014:	000134e1 	.word	0x000134e1
    4018:	000132d1 	.word	0x000132d1
    401c:	0001381d 	.word	0x0001381d
    4020:	00013859 	.word	0x00013859
      for (int out_x = 0; out_x < output_width; ++out_x) {
    4024:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    4026:	3301      	adds	r3, #1
    4028:	931b      	str	r3, [sp, #108]	; 0x6c
    402a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    402c:	993a      	ldr	r1, [sp, #232]	; 0xe8
    402e:	440a      	add	r2, r1
    4030:	9228      	str	r2, [sp, #160]	; 0xa0
    4032:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    4034:	993b      	ldr	r1, [sp, #236]	; 0xec
    4036:	440a      	add	r2, r1
    4038:	922c      	str	r2, [sp, #176]	; 0xb0
    403a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    403c:	9938      	ldr	r1, [sp, #224]	; 0xe0
    403e:	440a      	add	r2, r1
    4040:	920d      	str	r2, [sp, #52]	; 0x34
    4042:	9a16      	ldr	r2, [sp, #88]	; 0x58
    4044:	4293      	cmp	r3, r2
    4046:	f47f aeb7 	bne.w	3db8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x334>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    404a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    404c:	3301      	adds	r3, #1
    404e:	931c      	str	r3, [sp, #112]	; 0x70
    4050:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4052:	9933      	ldr	r1, [sp, #204]	; 0xcc
    4054:	440a      	add	r2, r1
    4056:	9224      	str	r2, [sp, #144]	; 0x90
    4058:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    405a:	9932      	ldr	r1, [sp, #200]	; 0xc8
    405c:	440a      	add	r2, r1
    405e:	922a      	str	r2, [sp, #168]	; 0xa8
    4060:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    4062:	9936      	ldr	r1, [sp, #216]	; 0xd8
    4064:	440a      	add	r2, r1
    4066:	921e      	str	r2, [sp, #120]	; 0x78
    4068:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    406a:	4293      	cmp	r3, r2
    406c:	f47f ae98 	bne.w	3da0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x31c>
  for (int b = 0; b < batches; ++b) {
    4070:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4072:	3301      	adds	r3, #1
    4074:	930e      	str	r3, [sp, #56]	; 0x38
    4076:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    4078:	9934      	ldr	r1, [sp, #208]	; 0xd0
    407a:	440a      	add	r2, r1
    407c:	9227      	str	r2, [sp, #156]	; 0x9c
    407e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    4080:	9930      	ldr	r1, [sp, #192]	; 0xc0
    4082:	440a      	add	r2, r1
    4084:	9223      	str	r2, [sp, #140]	; 0x8c
    4086:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    4088:	4293      	cmp	r3, r2
    408a:	f47f ae7d 	bne.w	3d88 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x304>
    if (size_ > kMaxSmallSize) {
    408e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    4090:	2b05      	cmp	r3, #5
    4092:	dd03      	ble.n	409c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x618>
      delete[] dims_pointer_;
    4094:	9849      	ldr	r0, [sp, #292]	; 0x124
    4096:	b108      	cbz	r0, 409c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x618>
    4098:	4b01      	ldr	r3, [pc, #4]	; (40a0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x61c>)
    409a:	4798      	blx	r3
  return kTfLiteOk;
    409c:	2000      	movs	r0, #0
    409e:	e528      	b.n	3af2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
    40a0:	0000a461 	.word	0x0000a461
  op_params.padding_values.width = data->padding.width;
    40a4:	6802      	ldr	r2, [r0, #0]
    40a6:	9201      	str	r2, [sp, #4]
  op_params.padding_values.height = data->padding.height;
    40a8:	6842      	ldr	r2, [r0, #4]
    40aa:	9202      	str	r2, [sp, #8]
  op_params.stride_width = params->stride_width;
    40ac:	f8d3 a004 	ldr.w	sl, [r3, #4]
  op_params.stride_height = params->stride_height;
    40b0:	f8d3 b008 	ldr.w	fp, [r3, #8]
  op_params.dilation_width_factor = params->dilation_width_factor;
    40b4:	695a      	ldr	r2, [r3, #20]
    40b6:	9203      	str	r2, [sp, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
    40b8:	699a      	ldr	r2, [r3, #24]
    40ba:	9204      	str	r2, [sp, #16]
  op_params.depth_multiplier = params->depth_multiplier;
    40bc:	68db      	ldr	r3, [r3, #12]
    40be:	9305      	str	r3, [sp, #20]
  op_params.input_offset = -input->params.zero_point;
    40c0:	6933      	ldr	r3, [r6, #16]
    40c2:	930c      	str	r3, [sp, #48]	; 0x30
  op_params.output_offset = output->params.zero_point;
    40c4:	6923      	ldr	r3, [r4, #16]
    40c6:	9328      	str	r3, [sp, #160]	; 0xa0
      op_params, data->per_channel_output_multiplier,
    40c8:	6983      	ldr	r3, [r0, #24]
    40ca:	932f      	str	r3, [sp, #188]	; 0xbc
      data->per_channel_output_shift, GetTensorShape(input),
    40cc:	69c3      	ldr	r3, [r0, #28]
    40ce:	9330      	str	r3, [sp, #192]	; 0xc0
  if (tensor == nullptr) {
    40d0:	2e00      	cmp	r6, #0
    40d2:	f000 8159 	beq.w	4388 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x904>
  const int dims_size = dims->size;
    40d6:	f8d6 9008 	ldr.w	r9, [r6, #8]
    40da:	f859 8b04 	ldr.w	r8, [r9], #4
    size_ = dimensions_count;
    40de:	f8cd 81b0 	str.w	r8, [sp, #432]	; 0x1b0
    if (dimensions_count > kMaxSmallSize) {
    40e2:	f1b8 0f05 	cmp.w	r8, #5
    40e6:	f340 8153 	ble.w	4390 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x90c>
      dims_pointer_ = new int32[dimensions_count];
    40ea:	4bad      	ldr	r3, [pc, #692]	; (43a0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x91c>)
    40ec:	4598      	cmp	r8, r3
    40ee:	bf94      	ite	ls
    40f0:	ea4f 0088 	movls.w	r0, r8, lsl #2
    40f4:	f04f 30ff 	movhi.w	r0, #4294967295
    40f8:	4baa      	ldr	r3, [pc, #680]	; (43a4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x920>)
    40fa:	4798      	blx	r3
    40fc:	906d      	str	r0, [sp, #436]	; 0x1b4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    40fe:	ea4f 0288 	mov.w	r2, r8, lsl #2
    4102:	4649      	mov	r1, r9
    4104:	4ba8      	ldr	r3, [pc, #672]	; (43a8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x924>)
    4106:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    4108:	6873      	ldr	r3, [r6, #4]
    410a:	931f      	str	r3, [sp, #124]	; 0x7c
  if (tensor == nullptr) {
    410c:	2d00      	cmp	r5, #0
    410e:	f000 8141 	beq.w	4394 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x910>
  const int dims_size = dims->size;
    4112:	f8d5 8008 	ldr.w	r8, [r5, #8]
    4116:	f858 6b04 	ldr.w	r6, [r8], #4
    size_ = dimensions_count;
    411a:	9666      	str	r6, [sp, #408]	; 0x198
    if (dimensions_count > kMaxSmallSize) {
    411c:	2e05      	cmp	r6, #5
    411e:	f340 813d 	ble.w	439c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x918>
      dims_pointer_ = new int32[dimensions_count];
    4122:	4b9f      	ldr	r3, [pc, #636]	; (43a0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x91c>)
    4124:	429e      	cmp	r6, r3
    4126:	bf94      	ite	ls
    4128:	00b0      	lslls	r0, r6, #2
    412a:	f04f 30ff 	movhi.w	r0, #4294967295
    412e:	4b9d      	ldr	r3, [pc, #628]	; (43a4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x920>)
    4130:	4798      	blx	r3
    4132:	9067      	str	r0, [sp, #412]	; 0x19c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4134:	00b2      	lsls	r2, r6, #2
    4136:	4641      	mov	r1, r8
    4138:	4b9b      	ldr	r3, [pc, #620]	; (43a8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x924>)
    413a:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    413c:	686b      	ldr	r3, [r5, #4]
    413e:	9320      	str	r3, [sp, #128]	; 0x80
  if (tensor == nullptr) {
    4140:	2f00      	cmp	r7, #0
    4142:	f000 8133 	beq.w	43ac <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x928>
  const int dims_size = dims->size;
    4146:	68be      	ldr	r6, [r7, #8]
    4148:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    414c:	9560      	str	r5, [sp, #384]	; 0x180
    if (dimensions_count > kMaxSmallSize) {
    414e:	2d05      	cmp	r5, #5
    4150:	f340 8130 	ble.w	43b4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x930>
      dims_pointer_ = new int32[dimensions_count];
    4154:	4b92      	ldr	r3, [pc, #584]	; (43a0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x91c>)
    4156:	429d      	cmp	r5, r3
    4158:	bf94      	ite	ls
    415a:	00a8      	lslls	r0, r5, #2
    415c:	f04f 30ff 	movhi.w	r0, #4294967295
    4160:	4b90      	ldr	r3, [pc, #576]	; (43a4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x920>)
    4162:	4798      	blx	r3
    4164:	9061      	str	r0, [sp, #388]	; 0x184
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4166:	00aa      	lsls	r2, r5, #2
    4168:	4631      	mov	r1, r6
    416a:	4b8f      	ldr	r3, [pc, #572]	; (43a8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x924>)
    416c:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    416e:	687b      	ldr	r3, [r7, #4]
    4170:	9321      	str	r3, [sp, #132]	; 0x84
  if (tensor == nullptr) {
    4172:	2c00      	cmp	r4, #0
    4174:	f000 8120 	beq.w	43b8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x934>
  const int dims_size = dims->size;
    4178:	68a6      	ldr	r6, [r4, #8]
    417a:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    417e:	955a      	str	r5, [sp, #360]	; 0x168
    if (dimensions_count > kMaxSmallSize) {
    4180:	2d05      	cmp	r5, #5
    4182:	f340 811d 	ble.w	43c0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x93c>
      dims_pointer_ = new int32[dimensions_count];
    4186:	4b86      	ldr	r3, [pc, #536]	; (43a0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x91c>)
    4188:	429d      	cmp	r5, r3
    418a:	bf94      	ite	ls
    418c:	00a8      	lslls	r0, r5, #2
    418e:	f04f 30ff 	movhi.w	r0, #4294967295
    4192:	4b84      	ldr	r3, [pc, #528]	; (43a4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x920>)
    4194:	4798      	blx	r3
    4196:	905b      	str	r0, [sp, #364]	; 0x16c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4198:	00aa      	lsls	r2, r5, #2
    419a:	4631      	mov	r1, r6
    419c:	4b82      	ldr	r3, [pc, #520]	; (43a8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x924>)
    419e:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    41a0:	6863      	ldr	r3, [r4, #4]
    41a2:	932b      	str	r3, [sp, #172]	; 0xac
  op_params.stride_width = params->stride_width;
    41a4:	fa0f f58a 	sxth.w	r5, sl
  op_params.stride_height = params->stride_height;
    41a8:	fa0f f48b 	sxth.w	r4, fp
  op_params.dilation_width_factor = params->dilation_width_factor;
    41ac:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
    41b0:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
  op_params.padding_values.width = data->padding.width;
    41b4:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
  op_params.padding_values.height = data->padding.height;
    41b8:	f9bd e008 	ldrsh.w	lr, [sp, #8]
  op_params.depth_multiplier = params->depth_multiplier;
    41bc:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
    41c0:	931e      	str	r3, [sp, #120]	; 0x78
  const int stride_height = params.stride_height;
  const int dilation_width_factor = params.dilation_width_factor;
  const int dilation_height_factor = params.dilation_height_factor;
  const int pad_width = params.padding_values.width;
  const int pad_height = params.padding_values.height;
  const int depth_multiplier = params.depth_multiplier;
    41c2:	9331      	str	r3, [sp, #196]	; 0xc4
  const int32 output_offset = params.output_offset;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    41c4:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
    41c6:	2b04      	cmp	r3, #4
    41c8:	f040 80fc 	bne.w	43c4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x940>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    41cc:	9b66      	ldr	r3, [sp, #408]	; 0x198
    41ce:	2b04      	cmp	r3, #4
    41d0:	f040 80fa 	bne.w	43c8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x944>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    41d4:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    41d6:	2b04      	cmp	r3, #4
    41d8:	f040 80f8 	bne.w	43cc <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x948>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    41dc:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
    41de:	930a      	str	r3, [sp, #40]	; 0x28
    41e0:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
    41e2:	921a      	str	r2, [sp, #104]	; 0x68
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    41e4:	429a      	cmp	r2, r3
    41e6:	f040 80f3 	bne.w	43d0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x94c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    41ea:	9b5e      	ldr	r3, [sp, #376]	; 0x178
    41ec:	461a      	mov	r2, r3
    41ee:	9312      	str	r3, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    41f0:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
    41f2:	429a      	cmp	r2, r3
    41f4:	f040 80ee 	bne.w	43d4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x950>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    41f8:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
    41fa:	930d      	str	r3, [sp, #52]	; 0x34
    41fc:	f8dd b1bc 	ldr.w	fp, [sp, #444]	; 0x1bc
    4200:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
    4202:	9306      	str	r3, [sp, #24]
    4204:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
    4206:	9204      	str	r2, [sp, #16]
    4208:	f8dd 81a4 	ldr.w	r8, [sp, #420]	; 0x1a4
    420c:	9a5c      	ldr	r2, [sp, #368]	; 0x170
    420e:	9214      	str	r2, [sp, #80]	; 0x50
    4210:	9a5d      	ldr	r2, [sp, #372]	; 0x174
    4212:	9213      	str	r2, [sp, #76]	; 0x4c
  const int input_depth = input_shape.Dims(3);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    4214:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    4216:	fb03 f302 	mul.w	r3, r3, r2
    421a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    421c:	4293      	cmp	r3, r2
    421e:	f040 80db 	bne.w	43d8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x954>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4222:	9b60      	ldr	r3, [sp, #384]	; 0x180
    4224:	932c      	str	r3, [sp, #176]	; 0xb0
    4226:	2b05      	cmp	r3, #5
    4228:	bfcc      	ite	gt
    422a:	9a61      	ldrgt	r2, [sp, #388]	; 0x184
    422c:	aa61      	addle	r2, sp, #388	; 0x184
    for (int i = 0; i < size_; i++) {
    422e:	992c      	ldr	r1, [sp, #176]	; 0xb0
    4230:	2900      	cmp	r1, #0
    4232:	f340 80d3 	ble.w	43dc <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x958>
    4236:	4613      	mov	r3, r2
    4238:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    423c:	2101      	movs	r1, #1
    423e:	4694      	mov	ip, r2
      buffer_size *= dims_data[i];
    4240:	f853 2b04 	ldr.w	r2, [r3], #4
    4244:	fb02 f101 	mul.w	r1, r2, r1
    for (int i = 0; i < size_; i++) {
    4248:	4563      	cmp	r3, ip
    424a:	d1f9      	bne.n	4240 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x7bc>
    424c:	9107      	str	r1, [sp, #28]
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    424e:	9b07      	ldr	r3, [sp, #28]
    4250:	9a12      	ldr	r2, [sp, #72]	; 0x48
    4252:	4293      	cmp	r3, r2
    4254:	f040 80c5 	bne.w	43e2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x95e>

  for (int batch = 0; batch < batches; ++batch) {
    4258:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    425a:	2b00      	cmp	r3, #0
    425c:	f340 81d7 	ble.w	460e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xb8a>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    4260:	9b67      	ldr	r3, [sp, #412]	; 0x19c
    4262:	930b      	str	r3, [sp, #44]	; 0x2c
    4264:	9a12      	ldr	r2, [sp, #72]	; 0x48
    4266:	923a      	str	r2, [sp, #232]	; 0xe8
    4268:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    426a:	9914      	ldr	r1, [sp, #80]	; 0x50
    426c:	fb03 f301 	mul.w	r3, r3, r1
    4270:	fb02 f103 	mul.w	r1, r2, r3
    4274:	913b      	str	r1, [sp, #236]	; 0xec
    4276:	990d      	ldr	r1, [sp, #52]	; 0x34
    4278:	fb0b f301 	mul.w	r3, fp, r1
    427c:	9906      	ldr	r1, [sp, #24]
    427e:	fb01 fc03 	mul.w	ip, r1, r3
    4282:	f8cd c0f0 	str.w	ip, [sp, #240]	; 0xf0
    4286:	f1ce 0e00 	rsb	lr, lr, #0
    428a:	f8cd e0f4 	str.w	lr, [sp, #244]	; 0xf4
    428e:	4243      	negs	r3, r0
    4290:	9332      	str	r3, [sp, #200]	; 0xc8
    4292:	fb0e f30b 	mul.w	r3, lr, fp
    4296:	1a1b      	subs	r3, r3, r0
    4298:	fb01 f003 	mul.w	r0, r1, r3
    429c:	902a      	str	r0, [sp, #168]	; 0xa8
    429e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    42a0:	461a      	mov	r2, r3
    42a2:	9813      	ldr	r0, [sp, #76]	; 0x4c
    42a4:	4603      	mov	r3, r0
    42a6:	fb02 f303 	mul.w	r3, r2, r3
    42aa:	9336      	str	r3, [sp, #216]	; 0xd8
    42ac:	9438      	str	r4, [sp, #224]	; 0xe0
    42ae:	460a      	mov	r2, r1
    42b0:	fb01 f30b 	mul.w	r3, r1, fp
    42b4:	fb04 f103 	mul.w	r1, r4, r3
    42b8:	9139      	str	r1, [sp, #228]	; 0xe4
    42ba:	9533      	str	r5, [sp, #204]	; 0xcc
    42bc:	4611      	mov	r1, r2
    42be:	fb02 f205 	mul.w	r2, r2, r5
    42c2:	9237      	str	r2, [sp, #220]	; 0xdc
    42c4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    42c6:	9234      	str	r2, [sp, #208]	; 0xd0
    42c8:	0092      	lsls	r2, r2, #2
    42ca:	9235      	str	r2, [sp, #212]	; 0xd4
    42cc:	9a07      	ldr	r2, [sp, #28]
    42ce:	4694      	mov	ip, r2
    42d0:	fb02 f208 	mul.w	r2, r2, r8
    42d4:	9210      	str	r2, [sp, #64]	; 0x40
    42d6:	960e      	str	r6, [sp, #56]	; 0x38
    42d8:	fb03 f306 	mul.w	r3, r3, r6
    42dc:	9311      	str	r3, [sp, #68]	; 0x44
    42de:	fb01 f907 	mul.w	r9, r1, r7
    42e2:	2300      	movs	r3, #0
    42e4:	931d      	str	r3, [sp, #116]	; 0x74
    42e6:	9302      	str	r3, [sp, #8]
    42e8:	464b      	mov	r3, r9
    42ea:	46e1      	mov	r9, ip
    42ec:	46bc      	mov	ip, r7
    42ee:	46c2      	mov	sl, r8
    42f0:	46d8      	mov	r8, fp
    42f2:	469b      	mov	fp, r3
    for (int out_y = 0; out_y < output_height; ++out_y) {
    42f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    42f6:	2b00      	cmp	r3, #0
    42f8:	f340 817a 	ble.w	45f0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xb6c>
    42fc:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    42fe:	931c      	str	r3, [sp, #112]	; 0x70
    4300:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    4302:	9326      	str	r3, [sp, #152]	; 0x98
    4304:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    4306:	9327      	str	r3, [sp, #156]	; 0x9c
    4308:	2300      	movs	r3, #0
    430a:	9315      	str	r3, [sp, #84]	; 0x54
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    430c:	465b      	mov	r3, fp
    430e:	46e3      	mov	fp, ip
    4310:	469c      	mov	ip, r3
      for (int out_x = 0; out_x < output_width; ++out_x) {
    4312:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4314:	2b00      	cmp	r3, #0
    4316:	f340 8155 	ble.w	45c4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xb40>
    431a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    431c:	930f      	str	r3, [sp, #60]	; 0x3c
    431e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    4320:	9323      	str	r3, [sp, #140]	; 0x8c
    4322:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    4324:	931b      	str	r3, [sp, #108]	; 0x6c
    4326:	2300      	movs	r3, #0
    4328:	9316      	str	r3, [sp, #88]	; 0x58
    432a:	4642      	mov	r2, r8
    432c:	46d0      	mov	r8, sl
    432e:	46ca      	mov	sl, r9
    4330:	4663      	mov	r3, ip
    4332:	46dc      	mov	ip, fp
    4334:	469b      	mov	fp, r3
    4336:	4691      	mov	r9, r2
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    4338:	9b06      	ldr	r3, [sp, #24]
    433a:	2b00      	cmp	r3, #0
    433c:	f340 8128 	ble.w	4590 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xb0c>
    4340:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    4342:	9325      	str	r3, [sp, #148]	; 0x94
    4344:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    4346:	9324      	str	r3, [sp, #144]	; 0x90
    4348:	2300      	movs	r3, #0
    434a:	9322      	str	r3, [sp, #136]	; 0x88
    434c:	9305      	str	r3, [sp, #20]
    434e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    4350:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    4352:	4413      	add	r3, r2
    4354:	933e      	str	r3, [sp, #248]	; 0xf8
    4356:	46d6      	mov	lr, sl
          for (int m = 0; m < depth_multiplier; ++m) {
    4358:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    435a:	2b00      	cmp	r3, #0
    435c:	f340 8103 	ble.w	4566 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xae2>
    4360:	991b      	ldr	r1, [sp, #108]	; 0x6c
    4362:	9a22      	ldr	r2, [sp, #136]	; 0x88
    4364:	188b      	adds	r3, r1, r2
    4366:	992b      	ldr	r1, [sp, #172]	; 0xac
    4368:	18cb      	adds	r3, r1, r3
    436a:	9319      	str	r3, [sp, #100]	; 0x64
    436c:	983e      	ldr	r0, [sp, #248]	; 0xf8
    436e:	1883      	adds	r3, r0, r2
    4370:	18cb      	adds	r3, r1, r3
    4372:	932d      	str	r3, [sp, #180]	; 0xb4
    4374:	9b24      	ldr	r3, [sp, #144]	; 0x90
    4376:	9318      	str	r3, [sp, #96]	; 0x60
    4378:	9b25      	ldr	r3, [sp, #148]	; 0x94
    437a:	9317      	str	r3, [sp, #92]	; 0x5c
    437c:	4692      	mov	sl, r2
    437e:	9b05      	ldr	r3, [sp, #20]
    4380:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    4382:	4413      	add	r3, r2
    4384:	932e      	str	r3, [sp, #184]	; 0xb8
    4386:	e0c4      	b.n	4512 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xa8e>
  RuntimeShape() : size_(0) {}
    4388:	2300      	movs	r3, #0
    438a:	936c      	str	r3, [sp, #432]	; 0x1b0
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    438c:	931f      	str	r3, [sp, #124]	; 0x7c
    438e:	e6bd      	b.n	410c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x688>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4390:	a86d      	add	r0, sp, #436	; 0x1b4
    4392:	e6b4      	b.n	40fe <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x67a>
  RuntimeShape() : size_(0) {}
    4394:	2300      	movs	r3, #0
    4396:	9366      	str	r3, [sp, #408]	; 0x198
    4398:	9320      	str	r3, [sp, #128]	; 0x80
    439a:	e6d1      	b.n	4140 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x6bc>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    439c:	a867      	add	r0, sp, #412	; 0x19c
    439e:	e6c9      	b.n	4134 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x6b0>
    43a0:	1ffffffe 	.word	0x1ffffffe
    43a4:	0000a511 	.word	0x0000a511
    43a8:	000158c1 	.word	0x000158c1
  RuntimeShape() : size_(0) {}
    43ac:	2300      	movs	r3, #0
    43ae:	9360      	str	r3, [sp, #384]	; 0x180
    43b0:	9321      	str	r3, [sp, #132]	; 0x84
    43b2:	e6de      	b.n	4172 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x6ee>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    43b4:	a861      	add	r0, sp, #388	; 0x184
    43b6:	e6d6      	b.n	4166 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x6e2>
  RuntimeShape() : size_(0) {}
    43b8:	2300      	movs	r3, #0
    43ba:	935a      	str	r3, [sp, #360]	; 0x168
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    43bc:	932b      	str	r3, [sp, #172]	; 0xac
    43be:	e6f1      	b.n	41a4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x720>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    43c0:	a85b      	add	r0, sp, #364	; 0x16c
    43c2:	e6e9      	b.n	4198 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x714>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    43c4:	4b97      	ldr	r3, [pc, #604]	; (4624 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xba0>)
    43c6:	4798      	blx	r3
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    43c8:	4b96      	ldr	r3, [pc, #600]	; (4624 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xba0>)
    43ca:	4798      	blx	r3
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    43cc:	4b95      	ldr	r3, [pc, #596]	; (4624 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xba0>)
    43ce:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    43d0:	4b94      	ldr	r3, [pc, #592]	; (4624 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xba0>)
    43d2:	4798      	blx	r3
    43d4:	4b93      	ldr	r3, [pc, #588]	; (4624 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xba0>)
    43d6:	4798      	blx	r3
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    43d8:	4b92      	ldr	r3, [pc, #584]	; (4624 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xba0>)
    43da:	4798      	blx	r3
    int buffer_size = 1;
    43dc:	2301      	movs	r3, #1
    43de:	9307      	str	r3, [sp, #28]
    43e0:	e735      	b.n	424e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x7ca>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    43e2:	4b90      	ldr	r3, [pc, #576]	; (4624 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xba0>)
    43e4:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    43e6:	4b8f      	ldr	r3, [pc, #572]	; (4624 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xba0>)
    43e8:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    43ea:	4b8e      	ldr	r3, [pc, #568]	; (4624 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xba0>)
    43ec:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    43ee:	4b8d      	ldr	r3, [pc, #564]	; (4624 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xba0>)
    43f0:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    43f2:	4b8c      	ldr	r3, [pc, #560]	; (4624 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xba0>)
    43f4:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    43f6:	4b8b      	ldr	r3, [pc, #556]	; (4624 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xba0>)
    43f8:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    43fa:	4b8a      	ldr	r3, [pc, #552]	; (4624 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xba0>)
    43fc:	4798      	blx	r3
    43fe:	9d03      	ldr	r5, [sp, #12]
    4400:	9f01      	ldr	r7, [sp, #4]
            const int output_channel = m + in_channel * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            int32 acc = 0;
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    4402:	3501      	adds	r5, #1
    4404:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4406:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4408:	4413      	add	r3, r2
    440a:	9309      	str	r3, [sp, #36]	; 0x24
    440c:	9b08      	ldr	r3, [sp, #32]
    440e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    4410:	4413      	add	r3, r2
    4412:	9308      	str	r3, [sp, #32]
    4414:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4416:	441e      	add	r6, r3
    4418:	9b04      	ldr	r3, [sp, #16]
    441a:	429d      	cmp	r5, r3
    441c:	d00b      	beq.n	4436 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x9b2>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    441e:	f1b8 0f00 	cmp.w	r8, #0
    4422:	ddee      	ble.n	4402 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x97e>
    4424:	9908      	ldr	r1, [sp, #32]
    4426:	9809      	ldr	r0, [sp, #36]	; 0x24
    4428:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    442a:	2200      	movs	r2, #0
    442c:	9503      	str	r5, [sp, #12]
    442e:	9701      	str	r7, [sp, #4]
    4430:	f000 bc49 	b.w	4cc6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1242>
            int32 acc = 0;
    4434:	2700      	movs	r7, #0
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
                }
              }
            }
            if (bias_data) {
    4436:	9b21      	ldr	r3, [sp, #132]	; 0x84
    4438:	b113      	cbz	r3, 4440 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x9bc>
              acc += bias_data[output_channel];
    443a:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
    443e:	441f      	add	r7, r3
            }
            acc = MultiplyByQuantizedMultiplier(
    4440:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    4442:	f853 4b04 	ldr.w	r4, [r3], #4
    4446:	9317      	str	r3, [sp, #92]	; 0x5c
    4448:	9b18      	ldr	r3, [sp, #96]	; 0x60
    444a:	f853 5b04 	ldr.w	r5, [r3], #4
    444e:	9318      	str	r3, [sp, #96]	; 0x60
  int left_shift = shift > 0 ? shift : 0;
    4450:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    4454:	2d00      	cmp	r5, #0
    4456:	bfd4      	ite	le
    4458:	426d      	negle	r5, r5
    445a:	2500      	movgt	r5, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    445c:	fa07 f202 	lsl.w	r2, r7, r2
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    4460:	4294      	cmp	r4, r2
    4462:	d064      	beq.n	452e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xaaa>
  std::int64_t b_64(b);
    4464:	17e7      	asrs	r7, r4, #31
  std::int64_t a_64(a);
    4466:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    4468:	fb04 f101 	mul.w	r1, r4, r1
    446c:	fb02 1107 	mla	r1, r2, r7, r1
    4470:	fba4 2302 	umull	r2, r3, r4, r2
    4474:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    4476:	2a00      	cmp	r2, #0
    4478:	f173 0100 	sbcs.w	r1, r3, #0
    447c:	f2c0 8449 	blt.w	4d12 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x128e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    4480:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    4484:	f143 0300 	adc.w	r3, r3, #0
    4488:	4610      	mov	r0, r2
    448a:	4619      	mov	r1, r3
    448c:	2a00      	cmp	r2, #0
    448e:	f173 0400 	sbcs.w	r4, r3, #0
    4492:	f2c0 8422 	blt.w	4cda <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1256>
    4496:	0fc3      	lsrs	r3, r0, #31
    4498:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  assert(exponent >= 0);
    449c:	2d00      	cmp	r5, #0
    449e:	db4c      	blt.n	453a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xab6>
  assert(exponent <= 31);
    44a0:	2d1f      	cmp	r5, #31
    44a2:	dc51      	bgt.n	4548 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xac4>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    44a4:	2201      	movs	r2, #1
    44a6:	40aa      	lsls	r2, r5
    44a8:	3a01      	subs	r2, #1
  return a >> offset;
    44aa:	1051      	asrs	r1, r2, #1
  return a + b;
    44ac:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
  return a & b;
    44b0:	401a      	ands	r2, r3
  return a >> offset;
    44b2:	412b      	asrs	r3, r5
  return a + b;
    44b4:	4291      	cmp	r1, r2
    44b6:	bfb8      	it	lt
    44b8:	3301      	addlt	r3, #1
                acc, output_multiplier[output_channel],
                output_shift[output_channel]);
            acc += output_offset;
    44ba:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    44bc:	4413      	add	r3, r2
    44be:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    44c2:	4293      	cmp	r3, r2
    44c4:	bfb8      	it	lt
    44c6:	4613      	movlt	r3, r2
    44c8:	2b7f      	cmp	r3, #127	; 0x7f
    44ca:	bfa8      	it	ge
    44cc:	237f      	movge	r3, #127	; 0x7f
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    44ce:	9a02      	ldr	r2, [sp, #8]
    44d0:	2a00      	cmp	r2, #0
    44d2:	db40      	blt.n	4556 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xad2>
    44d4:	991a      	ldr	r1, [sp, #104]	; 0x68
    44d6:	428a      	cmp	r2, r1
    44d8:	da3d      	bge.n	4556 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xad2>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    44da:	9a15      	ldr	r2, [sp, #84]	; 0x54
    44dc:	2a00      	cmp	r2, #0
    44de:	db3c      	blt.n	455a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xad6>
    44e0:	9914      	ldr	r1, [sp, #80]	; 0x50
    44e2:	428a      	cmp	r2, r1
    44e4:	da39      	bge.n	455a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xad6>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    44e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    44e8:	2a00      	cmp	r2, #0
    44ea:	db38      	blt.n	455e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xada>
    44ec:	9913      	ldr	r1, [sp, #76]	; 0x4c
    44ee:	428a      	cmp	r2, r1
    44f0:	da35      	bge.n	455e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xada>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    44f2:	f1ba 0f00 	cmp.w	sl, #0
    44f6:	db34      	blt.n	4562 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xade>
    44f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    44fa:	4552      	cmp	r2, sl
    44fc:	dd31      	ble.n	4562 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xade>
            acc = std::max(acc, output_activation_min);
            acc = std::min(acc, output_activation_max);
            output_data[Offset(output_shape, batch, out_y, out_x,
                               output_channel)] = static_cast<int8_t>(acc);
    44fe:	9a19      	ldr	r2, [sp, #100]	; 0x64
    4500:	f802 3b01 	strb.w	r3, [r2], #1
    4504:	4613      	mov	r3, r2
    4506:	9219      	str	r2, [sp, #100]	; 0x64
    4508:	f10a 0a01 	add.w	sl, sl, #1
          for (int m = 0; m < depth_multiplier; ++m) {
    450c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    450e:	4293      	cmp	r3, r2
    4510:	d029      	beq.n	4566 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xae2>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    4512:	9b04      	ldr	r3, [sp, #16]
    4514:	2b00      	cmp	r3, #0
    4516:	dd8d      	ble.n	4434 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x9b0>
    4518:	9b20      	ldr	r3, [sp, #128]	; 0x80
    451a:	4453      	add	r3, sl
    451c:	9309      	str	r3, [sp, #36]	; 0x24
    451e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    4520:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    4522:	4413      	add	r3, r2
    4524:	9308      	str	r3, [sp, #32]
    4526:	9e1c      	ldr	r6, [sp, #112]	; 0x70
    4528:	2700      	movs	r7, #0
    452a:	463d      	mov	r5, r7
    452c:	e777      	b.n	441e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x99a>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    452e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    4532:	d197      	bne.n	4464 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x9e0>
    4534:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    4538:	e7b0      	b.n	449c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xa18>
  assert(exponent >= 0);
    453a:	4b3b      	ldr	r3, [pc, #236]	; (4628 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xba4>)
    453c:	4a3b      	ldr	r2, [pc, #236]	; (462c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xba8>)
    453e:	f44f 71b3 	mov.w	r1, #358	; 0x166
    4542:	483b      	ldr	r0, [pc, #236]	; (4630 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xbac>)
    4544:	4c3b      	ldr	r4, [pc, #236]	; (4634 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xbb0>)
    4546:	47a0      	blx	r4
  assert(exponent <= 31);
    4548:	4b3b      	ldr	r3, [pc, #236]	; (4638 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xbb4>)
    454a:	4a38      	ldr	r2, [pc, #224]	; (462c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xba8>)
    454c:	f240 1167 	movw	r1, #359	; 0x167
    4550:	4837      	ldr	r0, [pc, #220]	; (4630 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xbac>)
    4552:	4c38      	ldr	r4, [pc, #224]	; (4634 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xbb0>)
    4554:	47a0      	blx	r4
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    4556:	4b33      	ldr	r3, [pc, #204]	; (4624 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xba0>)
    4558:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    455a:	4b32      	ldr	r3, [pc, #200]	; (4624 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xba0>)
    455c:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    455e:	4b31      	ldr	r3, [pc, #196]	; (4624 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xba0>)
    4560:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    4562:	4b30      	ldr	r3, [pc, #192]	; (4624 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xba0>)
    4564:	4798      	blx	r3
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    4566:	9b05      	ldr	r3, [sp, #20]
    4568:	3301      	adds	r3, #1
    456a:	9305      	str	r3, [sp, #20]
    456c:	9a22      	ldr	r2, [sp, #136]	; 0x88
    456e:	9934      	ldr	r1, [sp, #208]	; 0xd0
    4570:	440a      	add	r2, r1
    4572:	9222      	str	r2, [sp, #136]	; 0x88
    4574:	9a25      	ldr	r2, [sp, #148]	; 0x94
    4576:	4610      	mov	r0, r2
    4578:	9935      	ldr	r1, [sp, #212]	; 0xd4
    457a:	4408      	add	r0, r1
    457c:	9025      	str	r0, [sp, #148]	; 0x94
    457e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4580:	4610      	mov	r0, r2
    4582:	4408      	add	r0, r1
    4584:	9024      	str	r0, [sp, #144]	; 0x90
    4586:	9a06      	ldr	r2, [sp, #24]
    4588:	4293      	cmp	r3, r2
    458a:	f47f aee5 	bne.w	4358 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x8d4>
    458e:	46f2      	mov	sl, lr
      for (int out_x = 0; out_x < output_width; ++out_x) {
    4590:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4592:	3301      	adds	r3, #1
    4594:	9316      	str	r3, [sp, #88]	; 0x58
    4596:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    4598:	993a      	ldr	r1, [sp, #232]	; 0xe8
    459a:	440a      	add	r2, r1
    459c:	921b      	str	r2, [sp, #108]	; 0x6c
    459e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    45a0:	9937      	ldr	r1, [sp, #220]	; 0xdc
    45a2:	440a      	add	r2, r1
    45a4:	9223      	str	r2, [sp, #140]	; 0x8c
    45a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    45a8:	9933      	ldr	r1, [sp, #204]	; 0xcc
    45aa:	440a      	add	r2, r1
    45ac:	920f      	str	r2, [sp, #60]	; 0x3c
    45ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    45b0:	4293      	cmp	r3, r2
    45b2:	f47f aec1 	bne.w	4338 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x8b4>
    45b6:	464a      	mov	r2, r9
    45b8:	46d1      	mov	r9, sl
    45ba:	46c2      	mov	sl, r8
    45bc:	465b      	mov	r3, fp
    45be:	46e3      	mov	fp, ip
    45c0:	469c      	mov	ip, r3
    45c2:	4690      	mov	r8, r2
    for (int out_y = 0; out_y < output_height; ++out_y) {
    45c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    45c6:	3301      	adds	r3, #1
    45c8:	9315      	str	r3, [sp, #84]	; 0x54
    45ca:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    45cc:	9936      	ldr	r1, [sp, #216]	; 0xd8
    45ce:	440a      	add	r2, r1
    45d0:	9227      	str	r2, [sp, #156]	; 0x9c
    45d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    45d4:	9939      	ldr	r1, [sp, #228]	; 0xe4
    45d6:	440a      	add	r2, r1
    45d8:	9226      	str	r2, [sp, #152]	; 0x98
    45da:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    45dc:	9938      	ldr	r1, [sp, #224]	; 0xe0
    45de:	440a      	add	r2, r1
    45e0:	921c      	str	r2, [sp, #112]	; 0x70
    45e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
    45e4:	4293      	cmp	r3, r2
    45e6:	f47f ae94 	bne.w	4312 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x88e>
    45ea:	4663      	mov	r3, ip
    45ec:	46dc      	mov	ip, fp
    45ee:	469b      	mov	fp, r3
  for (int batch = 0; batch < batches; ++batch) {
    45f0:	9b02      	ldr	r3, [sp, #8]
    45f2:	3301      	adds	r3, #1
    45f4:	9302      	str	r3, [sp, #8]
    45f6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    45f8:	993b      	ldr	r1, [sp, #236]	; 0xec
    45fa:	440a      	add	r2, r1
    45fc:	921d      	str	r2, [sp, #116]	; 0x74
    45fe:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    4600:	993c      	ldr	r1, [sp, #240]	; 0xf0
    4602:	440a      	add	r2, r1
    4604:	922a      	str	r2, [sp, #168]	; 0xa8
    4606:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    4608:	4293      	cmp	r3, r2
    460a:	f47f ae73 	bne.w	42f4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x870>
    if (size_ > kMaxSmallSize) {
    460e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    4610:	2b05      	cmp	r3, #5
    4612:	dd03      	ble.n	461c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xb98>
      delete[] dims_pointer_;
    4614:	9861      	ldr	r0, [sp, #388]	; 0x184
    4616:	b108      	cbz	r0, 461c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xb98>
    4618:	4b08      	ldr	r3, [pc, #32]	; (463c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xbb8>)
    461a:	4798      	blx	r3
  return kTfLiteOk;
    461c:	2000      	movs	r0, #0
    461e:	f7ff ba68 	b.w	3af2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
    4622:	bf00      	nop
    4624:	00014b3d 	.word	0x00014b3d
    4628:	0002202c 	.word	0x0002202c
    462c:	00022098 	.word	0x00022098
    4630:	0002203c 	.word	0x0002203c
    4634:	00014b4d 	.word	0x00014b4d
    4638:	0002206c 	.word	0x0002206c
    463c:	0000a461 	.word	0x0000a461
  const int32_t input_offset = -input->params.zero_point;
    4640:	6932      	ldr	r2, [r6, #16]
    4642:	9212      	str	r2, [sp, #72]	; 0x48
  const int32_t filter_offset = -filter->params.zero_point;
    4644:	692a      	ldr	r2, [r5, #16]
    4646:	9213      	str	r2, [sp, #76]	; 0x4c
  const int32_t output_offset = output->params.zero_point;
    4648:	6922      	ldr	r2, [r4, #16]
    464a:	9223      	str	r2, [sp, #140]	; 0x8c
  op_params.padding_values.width = data->padding.width;
    464c:	6802      	ldr	r2, [r0, #0]
    464e:	9201      	str	r2, [sp, #4]
  op_params.padding_values.height = data->padding.height;
    4650:	6842      	ldr	r2, [r0, #4]
    4652:	9202      	str	r2, [sp, #8]
  op_params.stride_width = params->stride_width;
    4654:	685a      	ldr	r2, [r3, #4]
    4656:	9203      	str	r2, [sp, #12]
  op_params.stride_height = params->stride_height;
    4658:	689a      	ldr	r2, [r3, #8]
    465a:	9204      	str	r2, [sp, #16]
  op_params.dilation_width_factor = params->dilation_width_factor;
    465c:	695a      	ldr	r2, [r3, #20]
    465e:	9205      	str	r2, [sp, #20]
  op_params.dilation_height_factor = params->dilation_height_factor;
    4660:	699a      	ldr	r2, [r3, #24]
    4662:	9206      	str	r2, [sp, #24]
  op_params.depth_multiplier = params->depth_multiplier;
    4664:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  op_params.quantized_activation_min = data->output_activation_min;
    4668:	6a03      	ldr	r3, [r0, #32]
    466a:	931e      	str	r3, [sp, #120]	; 0x78
  op_params.quantized_activation_max = data->output_activation_max;
    466c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    466e:	931f      	str	r3, [sp, #124]	; 0x7c
  op_params.output_multiplier = data->output_multiplier;
    4670:	6903      	ldr	r3, [r0, #16]
    4672:	9315      	str	r3, [sp, #84]	; 0x54
  op_params.output_shift = -data->output_shift;
    4674:	f8d0 a014 	ldr.w	sl, [r0, #20]
  if (tensor == nullptr) {
    4678:	2e00      	cmp	r6, #0
    467a:	f000 8150 	beq.w	491e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xe9a>
  const int dims_size = dims->size;
    467e:	f8d6 9008 	ldr.w	r9, [r6, #8]
    4682:	f859 8b04 	ldr.w	r8, [r9], #4
    size_ = dimensions_count;
    4686:	f8cd 8210 	str.w	r8, [sp, #528]	; 0x210
    if (dimensions_count > kMaxSmallSize) {
    468a:	f1b8 0f05 	cmp.w	r8, #5
    468e:	f340 814a 	ble.w	4926 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xea2>
      dims_pointer_ = new int32[dimensions_count];
    4692:	4bae      	ldr	r3, [pc, #696]	; (494c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xec8>)
    4694:	4598      	cmp	r8, r3
    4696:	bf94      	ite	ls
    4698:	ea4f 0088 	movls.w	r0, r8, lsl #2
    469c:	f04f 30ff 	movhi.w	r0, #4294967295
    46a0:	4bab      	ldr	r3, [pc, #684]	; (4950 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xecc>)
    46a2:	4798      	blx	r3
    46a4:	9085      	str	r0, [sp, #532]	; 0x214
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    46a6:	ea4f 0288 	mov.w	r2, r8, lsl #2
    46aa:	4649      	mov	r1, r9
    46ac:	4ba9      	ldr	r3, [pc, #676]	; (4954 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xed0>)
    46ae:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    46b0:	6873      	ldr	r3, [r6, #4]
    46b2:	9320      	str	r3, [sp, #128]	; 0x80
  if (tensor == nullptr) {
    46b4:	2d00      	cmp	r5, #0
    46b6:	f000 8138 	beq.w	492a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xea6>
  const int dims_size = dims->size;
    46ba:	f8d5 8008 	ldr.w	r8, [r5, #8]
    46be:	f858 6b04 	ldr.w	r6, [r8], #4
    size_ = dimensions_count;
    46c2:	967e      	str	r6, [sp, #504]	; 0x1f8
    if (dimensions_count > kMaxSmallSize) {
    46c4:	2e05      	cmp	r6, #5
    46c6:	f340 8134 	ble.w	4932 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xeae>
      dims_pointer_ = new int32[dimensions_count];
    46ca:	4ba0      	ldr	r3, [pc, #640]	; (494c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xec8>)
    46cc:	429e      	cmp	r6, r3
    46ce:	bf94      	ite	ls
    46d0:	00b0      	lslls	r0, r6, #2
    46d2:	f04f 30ff 	movhi.w	r0, #4294967295
    46d6:	4b9e      	ldr	r3, [pc, #632]	; (4950 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xecc>)
    46d8:	4798      	blx	r3
    46da:	907f      	str	r0, [sp, #508]	; 0x1fc
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    46dc:	00b2      	lsls	r2, r6, #2
    46de:	4641      	mov	r1, r8
    46e0:	4b9c      	ldr	r3, [pc, #624]	; (4954 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xed0>)
    46e2:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    46e4:	686b      	ldr	r3, [r5, #4]
    46e6:	9321      	str	r3, [sp, #132]	; 0x84
  if (tensor == nullptr) {
    46e8:	2f00      	cmp	r7, #0
    46ea:	f000 8124 	beq.w	4936 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xeb2>
  const int dims_size = dims->size;
    46ee:	68be      	ldr	r6, [r7, #8]
    46f0:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    46f4:	9578      	str	r5, [sp, #480]	; 0x1e0
    if (dimensions_count > kMaxSmallSize) {
    46f6:	2d05      	cmp	r5, #5
    46f8:	f340 8121 	ble.w	493e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xeba>
      dims_pointer_ = new int32[dimensions_count];
    46fc:	4b93      	ldr	r3, [pc, #588]	; (494c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xec8>)
    46fe:	429d      	cmp	r5, r3
    4700:	bf94      	ite	ls
    4702:	00a8      	lslls	r0, r5, #2
    4704:	f04f 30ff 	movhi.w	r0, #4294967295
    4708:	4b91      	ldr	r3, [pc, #580]	; (4950 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xecc>)
    470a:	4798      	blx	r3
    470c:	9079      	str	r0, [sp, #484]	; 0x1e4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    470e:	00aa      	lsls	r2, r5, #2
    4710:	4631      	mov	r1, r6
    4712:	4b90      	ldr	r3, [pc, #576]	; (4954 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xed0>)
    4714:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    4716:	687b      	ldr	r3, [r7, #4]
    4718:	9322      	str	r3, [sp, #136]	; 0x88
  if (tensor == nullptr) {
    471a:	2c00      	cmp	r4, #0
    471c:	f000 8111 	beq.w	4942 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xebe>
  const int dims_size = dims->size;
    4720:	68a6      	ldr	r6, [r4, #8]
    4722:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    4726:	9572      	str	r5, [sp, #456]	; 0x1c8
    if (dimensions_count > kMaxSmallSize) {
    4728:	2d05      	cmp	r5, #5
    472a:	f340 8115 	ble.w	4958 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xed4>
      dims_pointer_ = new int32[dimensions_count];
    472e:	4b87      	ldr	r3, [pc, #540]	; (494c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xec8>)
    4730:	429d      	cmp	r5, r3
    4732:	bf94      	ite	ls
    4734:	00a8      	lslls	r0, r5, #2
    4736:	f04f 30ff 	movhi.w	r0, #4294967295
    473a:	4b85      	ldr	r3, [pc, #532]	; (4950 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xecc>)
    473c:	4798      	blx	r3
    473e:	9073      	str	r0, [sp, #460]	; 0x1cc
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4740:	00aa      	lsls	r2, r5, #2
    4742:	4631      	mov	r1, r6
    4744:	4b83      	ldr	r3, [pc, #524]	; (4954 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xed0>)
    4746:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    4748:	6863      	ldr	r3, [r4, #4]
    474a:	9333      	str	r3, [sp, #204]	; 0xcc
  op_params.stride_width = params->stride_width;
    474c:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
  op_params.stride_height = params->stride_height;
    4750:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
  op_params.dilation_width_factor = params->dilation_width_factor;
    4754:	f9bd 7014 	ldrsh.w	r7, [sp, #20]
  op_params.dilation_height_factor = params->dilation_height_factor;
    4758:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    475c:	9303      	str	r3, [sp, #12]
  op_params.padding_values.width = data->padding.width;
    475e:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
  op_params.padding_values.height = data->padding.height;
    4762:	f9bd e008 	ldrsh.w	lr, [sp, #8]
  op_params.depth_multiplier = params->depth_multiplier;
    4766:	fa0f f38b 	sxth.w	r3, fp
    476a:	932f      	str	r3, [sp, #188]	; 0xbc
    const int stride_height = params.stride_height;
    const int dilation_width_factor = params.dilation_width_factor;
    const int dilation_height_factor = params.dilation_height_factor;
    const int pad_width = params.padding_values.width;
    const int pad_height = params.padding_values.height;
    const int depth_multiplier = params.depth_multiplier;
    476c:	933c      	str	r3, [sp, #240]	; 0xf0
    const int32 input_offset = params.input_offset;
    const int32 filter_offset = params.weights_offset;
    const int32 output_offset = params.output_offset;
    const int32 output_multiplier = params.output_multiplier;
    const int output_shift = params.output_shift;
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    476e:	9b84      	ldr	r3, [sp, #528]	; 0x210
    4770:	2b04      	cmp	r3, #4
    4772:	f040 80f3 	bne.w	495c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xed8>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    4776:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
    4778:	2b04      	cmp	r3, #4
    477a:	f040 80f1 	bne.w	4960 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xedc>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    477e:	9b72      	ldr	r3, [sp, #456]	; 0x1c8
    4780:	2b04      	cmp	r3, #4
    4782:	f040 80ef 	bne.w	4964 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xee0>

    TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    4786:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    4788:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    478a:	4293      	cmp	r3, r2
    478c:	f300 80ec 	bgt.w	4968 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xee4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    4790:	9b85      	ldr	r3, [sp, #532]	; 0x214
    4792:	9310      	str	r3, [sp, #64]	; 0x40
    4794:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
    4796:	921d      	str	r2, [sp, #116]	; 0x74
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    4798:	429a      	cmp	r2, r3
    479a:	f040 80e7 	bne.w	496c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xee8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    479e:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
    47a0:	461a      	mov	r2, r3
    47a2:	9317      	str	r3, [sp, #92]	; 0x5c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    47a4:	9b82      	ldr	r3, [sp, #520]	; 0x208
    47a6:	429a      	cmp	r2, r3
    47a8:	f040 80e2 	bne.w	4970 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xeec>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    47ac:	f8dd 9218 	ldr.w	r9, [sp, #536]	; 0x218
    47b0:	f8dd 821c 	ldr.w	r8, [sp, #540]	; 0x21c
    47b4:	9b88      	ldr	r3, [sp, #544]	; 0x220
    47b6:	930e      	str	r3, [sp, #56]	; 0x38
    47b8:	9a80      	ldr	r2, [sp, #512]	; 0x200
    47ba:	9205      	str	r2, [sp, #20]
    47bc:	9e81      	ldr	r6, [sp, #516]	; 0x204
    47be:	9a74      	ldr	r2, [sp, #464]	; 0x1d0
    47c0:	9219      	str	r2, [sp, #100]	; 0x64
    47c2:	9a75      	ldr	r2, [sp, #468]	; 0x1d4
    47c4:	9218      	str	r2, [sp, #96]	; 0x60
    const int input_depth = input_shape.Dims(3);
    const int filter_height = filter_shape.Dims(1);
    const int filter_width = filter_shape.Dims(2);
    const int output_height = output_shape.Dims(1);
    const int output_width = output_shape.Dims(2);
    TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    47c6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
    47c8:	fb03 f302 	mul.w	r3, r3, r2
    47cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    47ce:	4293      	cmp	r3, r2
    47d0:	f040 80d0 	bne.w	4974 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xef0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    47d4:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
    47d6:	9334      	str	r3, [sp, #208]	; 0xd0
    47d8:	2b05      	cmp	r3, #5
    47da:	bfcc      	ite	gt
    47dc:	9a79      	ldrgt	r2, [sp, #484]	; 0x1e4
    47de:	aa79      	addle	r2, sp, #484	; 0x1e4
    for (int i = 0; i < size_; i++) {
    47e0:	9934      	ldr	r1, [sp, #208]	; 0xd0
    47e2:	2900      	cmp	r1, #0
    47e4:	f340 80c8 	ble.w	4978 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xef4>
    47e8:	4613      	mov	r3, r2
    47ea:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    47ee:	2101      	movs	r1, #1
    47f0:	4694      	mov	ip, r2
      buffer_size *= dims_data[i];
    47f2:	f853 2b04 	ldr.w	r2, [r3], #4
    47f6:	fb02 f101 	mul.w	r1, r2, r1
    for (int i = 0; i < size_; i++) {
    47fa:	4563      	cmp	r3, ip
    47fc:	d1f9      	bne.n	47f2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xd6e>
    47fe:	910f      	str	r1, [sp, #60]	; 0x3c
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    4800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4802:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    4804:	4293      	cmp	r3, r2
    4806:	f040 80ba 	bne.w	497e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xefa>

    for (int b = 0; b < batches; ++b) {
    480a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    480c:	2b00      	cmp	r3, #0
    480e:	f340 8212 	ble.w	4c36 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x11b2>
  op_params.output_shift = -data->output_shift;
    4812:	f1ca 0300 	rsb	r3, sl, #0
    4816:	933a      	str	r3, [sp, #232]	; 0xe8
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    4818:	9a7f      	ldr	r2, [sp, #508]	; 0x1fc
    481a:	9211      	str	r2, [sp, #68]	; 0x44
    481c:	2b00      	cmp	r3, #0
    481e:	bfd4      	ite	le
    4820:	4653      	movle	r3, sl
    4822:	2300      	movgt	r3, #0
    4824:	461a      	mov	r2, r3
    4826:	9314      	str	r3, [sp, #80]	; 0x50
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    4828:	2301      	movs	r3, #1
    482a:	4093      	lsls	r3, r2
    482c:	3b01      	subs	r3, #1
    482e:	9325      	str	r3, [sp, #148]	; 0x94
  return a >> offset;
    4830:	105b      	asrs	r3, r3, #1
    4832:	9326      	str	r3, [sp, #152]	; 0x98
    4834:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    4836:	9235      	str	r2, [sp, #212]	; 0xd4
    4838:	9b18      	ldr	r3, [sp, #96]	; 0x60
    483a:	9919      	ldr	r1, [sp, #100]	; 0x64
    483c:	fb03 f301 	mul.w	r3, r3, r1
    4840:	fb02 f103 	mul.w	r1, r2, r3
    4844:	9136      	str	r1, [sp, #216]	; 0xd8
    4846:	fb08 f309 	mul.w	r3, r8, r9
    484a:	990e      	ldr	r1, [sp, #56]	; 0x38
    484c:	fb01 fc03 	mul.w	ip, r1, r3
    4850:	f8cd c100 	str.w	ip, [sp, #256]	; 0x100
    4854:	f1ce 0e00 	rsb	lr, lr, #0
    4858:	f8cd e0dc 	str.w	lr, [sp, #220]	; 0xdc
    485c:	4243      	negs	r3, r0
    485e:	9339      	str	r3, [sp, #228]	; 0xe4
    4860:	fb08 f30e 	mul.w	r3, r8, lr
    4864:	1a1b      	subs	r3, r3, r0
    4866:	fb01 f003 	mul.w	r0, r1, r3
    486a:	902c      	str	r0, [sp, #176]	; 0xb0
    486c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    486e:	461a      	mov	r2, r3
    4870:	9818      	ldr	r0, [sp, #96]	; 0x60
    4872:	4603      	mov	r3, r0
    4874:	fb02 f303 	mul.w	r3, r2, r3
    4878:	933e      	str	r3, [sp, #248]	; 0xf8
    487a:	9438      	str	r4, [sp, #224]	; 0xe0
    487c:	460a      	mov	r2, r1
    487e:	fb08 f301 	mul.w	r3, r8, r1
    4882:	fb04 f103 	mul.w	r1, r4, r3
    4886:	913f      	str	r1, [sp, #252]	; 0xfc
    4888:	953d      	str	r5, [sp, #244]	; 0xf4
    488a:	4611      	mov	r1, r2
    488c:	fb05 f202 	mul.w	r2, r5, r2
    4890:	9241      	str	r2, [sp, #260]	; 0x104
    4892:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4894:	4694      	mov	ip, r2
    4896:	fb02 f206 	mul.w	r2, r2, r6
    489a:	920a      	str	r2, [sp, #40]	; 0x28
    489c:	9a03      	ldr	r2, [sp, #12]
    489e:	9208      	str	r2, [sp, #32]
    48a0:	fb02 f303 	mul.w	r3, r2, r3
    48a4:	9309      	str	r3, [sp, #36]	; 0x24
    48a6:	fb07 fa01 	mul.w	sl, r7, r1
    48aa:	2300      	movs	r3, #0
    48ac:	932b      	str	r3, [sp, #172]	; 0xac
    48ae:	930c      	str	r3, [sp, #48]	; 0x30
  std::int64_t b_64(b);
    48b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    48b2:	4619      	mov	r1, r3
    48b4:	17da      	asrs	r2, r3, #31
    48b6:	e9cd 1228 	strd	r1, r2, [sp, #160]	; 0xa0
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    48ba:	4652      	mov	r2, sl
    48bc:	46b2      	mov	sl, r6
    48be:	4646      	mov	r6, r8
    48c0:	46cb      	mov	fp, r9
    48c2:	46b9      	mov	r9, r7
    48c4:	4690      	mov	r8, r2
      for (int out_y = 0; out_y < output_height; ++out_y) {
    48c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    48c8:	2b00      	cmp	r3, #0
    48ca:	f340 81a5 	ble.w	4c18 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1194>
    48ce:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    48d0:	931a      	str	r3, [sp, #104]	; 0x68
    48d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    48d4:	932e      	str	r3, [sp, #184]	; 0xb8
    48d6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    48d8:	932d      	str	r3, [sp, #180]	; 0xb4
    48da:	2300      	movs	r3, #0
    48dc:	931b      	str	r3, [sp, #108]	; 0x6c
  int left_shift = shift > 0 ? shift : 0;
    48de:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    48e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    48e4:	932a      	str	r3, [sp, #168]	; 0xa8
        for (int out_x = 0; out_x < output_width; ++out_x) {
    48e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    48e8:	2b00      	cmp	r3, #0
    48ea:	f340 8182 	ble.w	4bf2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x116e>
    48ee:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    48f0:	930b      	str	r3, [sp, #44]	; 0x2c
    48f2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    48f4:	9332      	str	r3, [sp, #200]	; 0xc8
    48f6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    48f8:	9331      	str	r3, [sp, #196]	; 0xc4
    48fa:	2300      	movs	r3, #0
    48fc:	931c      	str	r3, [sp, #112]	; 0x70
    48fe:	465b      	mov	r3, fp
    4900:	46d3      	mov	fp, sl
    4902:	469a      	mov	sl, r3
          for (int ic = 0; ic < input_depth; ++ic) {
    4904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4906:	2b00      	cmp	r3, #0
    4908:	f340 815d 	ble.w	4bc6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1142>
    490c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    490e:	933b      	str	r3, [sp, #236]	; 0xec
    4910:	2300      	movs	r3, #0
    4912:	9330      	str	r3, [sp, #192]	; 0xc0
    4914:	930d      	str	r3, [sp, #52]	; 0x34
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    4916:	4663      	mov	r3, ip
    4918:	46d4      	mov	ip, sl
    491a:	469a      	mov	sl, r3
    491c:	e130      	b.n	4b80 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10fc>
  RuntimeShape() : size_(0) {}
    491e:	2300      	movs	r3, #0
    4920:	9384      	str	r3, [sp, #528]	; 0x210
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    4922:	9320      	str	r3, [sp, #128]	; 0x80
    4924:	e6c6      	b.n	46b4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xc30>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4926:	a885      	add	r0, sp, #532	; 0x214
    4928:	e6bd      	b.n	46a6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xc22>
  RuntimeShape() : size_(0) {}
    492a:	2300      	movs	r3, #0
    492c:	937e      	str	r3, [sp, #504]	; 0x1f8
    492e:	9321      	str	r3, [sp, #132]	; 0x84
    4930:	e6da      	b.n	46e8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xc64>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4932:	a87f      	add	r0, sp, #508	; 0x1fc
    4934:	e6d2      	b.n	46dc <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xc58>
  RuntimeShape() : size_(0) {}
    4936:	2300      	movs	r3, #0
    4938:	9378      	str	r3, [sp, #480]	; 0x1e0
    493a:	9322      	str	r3, [sp, #136]	; 0x88
    493c:	e6ed      	b.n	471a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xc96>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    493e:	a879      	add	r0, sp, #484	; 0x1e4
    4940:	e6e5      	b.n	470e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xc8a>
  RuntimeShape() : size_(0) {}
    4942:	2300      	movs	r3, #0
    4944:	9372      	str	r3, [sp, #456]	; 0x1c8
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    4946:	9333      	str	r3, [sp, #204]	; 0xcc
    4948:	e700      	b.n	474c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xcc8>
    494a:	bf00      	nop
    494c:	1ffffffe 	.word	0x1ffffffe
    4950:	0000a511 	.word	0x0000a511
    4954:	000158c1 	.word	0x000158c1
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4958:	a873      	add	r0, sp, #460	; 0x1cc
    495a:	e6f1      	b.n	4740 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xcbc>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    495c:	4b92      	ldr	r3, [pc, #584]	; (4ba8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1124>)
    495e:	4798      	blx	r3
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    4960:	4b91      	ldr	r3, [pc, #580]	; (4ba8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1124>)
    4962:	4798      	blx	r3
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    4964:	4b90      	ldr	r3, [pc, #576]	; (4ba8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1124>)
    4966:	4798      	blx	r3
    TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    4968:	4b8f      	ldr	r3, [pc, #572]	; (4ba8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1124>)
    496a:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    496c:	4b8e      	ldr	r3, [pc, #568]	; (4ba8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1124>)
    496e:	4798      	blx	r3
    4970:	4b8d      	ldr	r3, [pc, #564]	; (4ba8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1124>)
    4972:	4798      	blx	r3
    TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    4974:	4b8c      	ldr	r3, [pc, #560]	; (4ba8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1124>)
    4976:	4798      	blx	r3
    int buffer_size = 1;
    4978:	2301      	movs	r3, #1
    497a:	930f      	str	r3, [sp, #60]	; 0x3c
    497c:	e740      	b.n	4800 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xd7c>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    497e:	4b8a      	ldr	r3, [pc, #552]	; (4ba8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1124>)
    4980:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    4982:	4b89      	ldr	r3, [pc, #548]	; (4ba8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1124>)
    4984:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    4986:	4b88      	ldr	r3, [pc, #544]	; (4ba8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1124>)
    4988:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    498a:	4b87      	ldr	r3, [pc, #540]	; (4ba8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1124>)
    498c:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    498e:	4b86      	ldr	r3, [pc, #536]	; (4ba8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1124>)
    4990:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    4992:	4b85      	ldr	r3, [pc, #532]	; (4ba8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1124>)
    4994:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    4996:	4b84      	ldr	r3, [pc, #528]	; (4ba8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1124>)
    4998:	4798      	blx	r3
              const int oc = m + ic * depth_multiplier;
              const int in_x_origin = (out_x * stride_width) - pad_width;
              const int in_y_origin = (out_y * stride_height) - pad_height;
              int32 acc = 0;
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    499a:	3201      	adds	r2, #1
    499c:	444b      	add	r3, r9
    499e:	4450      	add	r0, sl
    49a0:	4441      	add	r1, r8
    49a2:	455a      	cmp	r2, fp
    49a4:	d035      	beq.n	4a12 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xf8e>
                      in_x_origin + dilation_width_factor * filter_x;
                  const int in_y =
                      in_y_origin + dilation_height_factor * filter_y;
                  // If the location is outside the bounds of the input image,
                  // use zero as a default value.
                  if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    49a6:	2b00      	cmp	r3, #0
    49a8:	dbf7      	blt.n	499a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xf16>
    49aa:	429e      	cmp	r6, r3
    49ac:	ddf5      	ble.n	499a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xf16>
    49ae:	2c00      	cmp	r4, #0
    49b0:	dbf3      	blt.n	499a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xf16>
    49b2:	4564      	cmp	r4, ip
    49b4:	daf1      	bge.n	499a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xf16>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    49b6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    49b8:	2f00      	cmp	r7, #0
    49ba:	dbe2      	blt.n	4982 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xefe>
    49bc:	9d10      	ldr	r5, [sp, #64]	; 0x40
    49be:	42af      	cmp	r7, r5
    49c0:	dadf      	bge.n	4982 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xefe>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    49c2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    49c4:	2f00      	cmp	r7, #0
    49c6:	dbde      	blt.n	4986 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xf02>
    49c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    49ca:	42bd      	cmp	r5, r7
    49cc:	dddb      	ble.n	4986 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xf02>
                      (in_y < input_height)) {
                    int32 input_val =
                        input_data[Offset(input_shape, b, in_y, in_x, ic)];
    49ce:	780d      	ldrb	r5, [r1, #0]
    49d0:	9506      	str	r5, [sp, #24]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    49d2:	9d11      	ldr	r5, [sp, #68]	; 0x44
    49d4:	2d00      	cmp	r5, #0
    49d6:	ddd8      	ble.n	498a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xf06>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    49d8:	9f03      	ldr	r7, [sp, #12]
    49da:	2f00      	cmp	r7, #0
    49dc:	dbd7      	blt.n	498e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xf0a>
    49de:	9d05      	ldr	r5, [sp, #20]
    49e0:	42bd      	cmp	r5, r7
    49e2:	ddd4      	ble.n	498e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xf0a>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    49e4:	2a00      	cmp	r2, #0
    49e6:	dbd4      	blt.n	4992 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xf0e>
    49e8:	4593      	cmp	fp, r2
    49ea:	ddd2      	ble.n	4992 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xf0e>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    49ec:	9d07      	ldr	r5, [sp, #28]
    49ee:	2d00      	cmp	r5, #0
    49f0:	dbd1      	blt.n	4996 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xf12>
    49f2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    49f4:	42af      	cmp	r7, r5
    49f6:	ddce      	ble.n	4996 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xf12>
                    int32 filter_val = filter_data[Offset(
                        filter_shape, 0, filter_y, filter_x, oc)];
    49f8:	f890 e000 	ldrb.w	lr, [r0]
                    acc += (filter_val + filter_offset) *
    49fc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    49fe:	ebae 0e05 	sub.w	lr, lr, r5
                           (input_val + input_offset);
    4a02:	9d12      	ldr	r5, [sp, #72]	; 0x48
    4a04:	9f06      	ldr	r7, [sp, #24]
    4a06:	1b7f      	subs	r7, r7, r5
                    acc += (filter_val + filter_offset) *
    4a08:	9d04      	ldr	r5, [sp, #16]
    4a0a:	fb07 550e 	mla	r5, r7, lr, r5
    4a0e:	9504      	str	r5, [sp, #16]
    4a10:	e7c3      	b.n	499a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xf16>
    4a12:	9d03      	ldr	r5, [sp, #12]
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    4a14:	3501      	adds	r5, #1
    4a16:	9b02      	ldr	r3, [sp, #8]
    4a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4a1a:	4413      	add	r3, r2
    4a1c:	9302      	str	r3, [sp, #8]
    4a1e:	9b01      	ldr	r3, [sp, #4]
    4a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4a22:	4413      	add	r3, r2
    4a24:	9301      	str	r3, [sp, #4]
    4a26:	9b08      	ldr	r3, [sp, #32]
    4a28:	441c      	add	r4, r3
    4a2a:	9b05      	ldr	r3, [sp, #20]
    4a2c:	429d      	cmp	r5, r3
    4a2e:	d00a      	beq.n	4a46 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xfc2>
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    4a30:	f1bb 0f00 	cmp.w	fp, #0
    4a34:	ddee      	ble.n	4a14 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xf90>
    4a36:	9901      	ldr	r1, [sp, #4]
    4a38:	9802      	ldr	r0, [sp, #8]
    4a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4a3c:	2200      	movs	r2, #0
    4a3e:	9503      	str	r5, [sp, #12]
    4a40:	e7b1      	b.n	49a6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xf22>
              int32 acc = 0;
    4a42:	2300      	movs	r3, #0
    4a44:	9304      	str	r3, [sp, #16]
                  }
                }
              }
              if (bias_data) {
    4a46:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4a48:	b12b      	cbz	r3, 4a56 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xfd2>
                acc += bias_data[oc];
    4a4a:	9a07      	ldr	r2, [sp, #28]
    4a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4a50:	9a04      	ldr	r2, [sp, #16]
    4a52:	441a      	add	r2, r3
    4a54:	9204      	str	r2, [sp, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    4a56:	9a04      	ldr	r2, [sp, #16]
    4a58:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    4a5a:	409a      	lsls	r2, r3
    4a5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    4a5e:	4293      	cmp	r3, r2
    4a60:	d068      	beq.n	4b34 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10b0>
  std::int64_t a_64(a);
    4a62:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    4a64:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    4a66:	fb02 f303 	mul.w	r3, r2, r3
    4a6a:	9d15      	ldr	r5, [sp, #84]	; 0x54
    4a6c:	fb05 3101 	mla	r1, r5, r1, r3
    4a70:	fba2 2305 	umull	r2, r3, r2, r5
    4a74:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    4a76:	2a00      	cmp	r2, #0
    4a78:	f173 0100 	sbcs.w	r1, r3, #0
    4a7c:	f2c0 8134 	blt.w	4ce8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1264>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    4a80:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    4a84:	f143 0300 	adc.w	r3, r3, #0
    4a88:	4610      	mov	r0, r2
    4a8a:	4619      	mov	r1, r3
    4a8c:	2a00      	cmp	r2, #0
    4a8e:	f173 0400 	sbcs.w	r4, r3, #0
    4a92:	f2c0 8154 	blt.w	4d3e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x12ba>
    4a96:	0fc3      	lsrs	r3, r0, #31
    4a98:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  assert(exponent >= 0);
    4a9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    4a9e:	2a00      	cmp	r2, #0
    4aa0:	db4e      	blt.n	4b40 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10bc>
  assert(exponent <= 31);
    4aa2:	9a14      	ldr	r2, [sp, #80]	; 0x50
    4aa4:	2a1f      	cmp	r2, #31
    4aa6:	dc52      	bgt.n	4b4e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10ca>
  return a + b;
    4aa8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4aaa:	eb02 71d3 	add.w	r1, r2, r3, lsr #31
  return a & b;
    4aae:	9a25      	ldr	r2, [sp, #148]	; 0x94
    4ab0:	401a      	ands	r2, r3
  return a >> offset;
    4ab2:	9814      	ldr	r0, [sp, #80]	; 0x50
    4ab4:	4103      	asrs	r3, r0
  return a + b;
    4ab6:	4291      	cmp	r1, r2
    4ab8:	bfb8      	it	lt
    4aba:	3301      	addlt	r3, #1
              }
              acc = DepthwiseConvRound<output_rounding>(acc, output_multiplier,
                                                        output_shift);
              acc += output_offset;
    4abc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    4abe:	4413      	add	r3, r2
    4ac0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    4ac2:	4293      	cmp	r3, r2
    4ac4:	bfb8      	it	lt
    4ac6:	4613      	movlt	r3, r2
    4ac8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    4aca:	4293      	cmp	r3, r2
    4acc:	bfa8      	it	ge
    4ace:	4613      	movge	r3, r2
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    4ad0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4ad2:	2a00      	cmp	r2, #0
    4ad4:	db42      	blt.n	4b5c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10d8>
    4ad6:	991d      	ldr	r1, [sp, #116]	; 0x74
    4ad8:	428a      	cmp	r2, r1
    4ada:	da3f      	bge.n	4b5c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10d8>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    4adc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    4ade:	2a00      	cmp	r2, #0
    4ae0:	db3e      	blt.n	4b60 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10dc>
    4ae2:	9919      	ldr	r1, [sp, #100]	; 0x64
    4ae4:	428a      	cmp	r2, r1
    4ae6:	da3b      	bge.n	4b60 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10dc>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    4ae8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    4aea:	2a00      	cmp	r2, #0
    4aec:	db3a      	blt.n	4b64 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10e0>
    4aee:	9918      	ldr	r1, [sp, #96]	; 0x60
    4af0:	4291      	cmp	r1, r2
    4af2:	dd37      	ble.n	4b64 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10e0>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    4af4:	9a07      	ldr	r2, [sp, #28]
    4af6:	2a00      	cmp	r2, #0
    4af8:	db36      	blt.n	4b68 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10e4>
    4afa:	9917      	ldr	r1, [sp, #92]	; 0x5c
    4afc:	428a      	cmp	r2, r1
    4afe:	da33      	bge.n	4b68 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10e4>
              acc = std::max(acc, output_activation_min);
              acc = std::min(acc, output_activation_max);
              output_data[Offset(output_shape, b, out_y, out_x, oc)] =
    4b00:	9a16      	ldr	r2, [sp, #88]	; 0x58
    4b02:	f802 3b01 	strb.w	r3, [r2], #1
    4b06:	9216      	str	r2, [sp, #88]	; 0x58
    4b08:	9b07      	ldr	r3, [sp, #28]
    4b0a:	3301      	adds	r3, #1
    4b0c:	9307      	str	r3, [sp, #28]
            for (int m = 0; m < depth_multiplier; m++) {
    4b0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4b10:	429a      	cmp	r2, r3
    4b12:	d02b      	beq.n	4b6c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10e8>
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    4b14:	9b05      	ldr	r3, [sp, #20]
    4b16:	2b00      	cmp	r3, #0
    4b18:	dd93      	ble.n	4a42 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xfbe>
    4b1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
    4b1c:	9a07      	ldr	r2, [sp, #28]
    4b1e:	4413      	add	r3, r2
    4b20:	9302      	str	r3, [sp, #8]
    4b22:	9b20      	ldr	r3, [sp, #128]	; 0x80
    4b24:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    4b26:	4413      	add	r3, r2
    4b28:	9301      	str	r3, [sp, #4]
    4b2a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    4b2c:	2300      	movs	r3, #0
    4b2e:	9304      	str	r3, [sp, #16]
    4b30:	461d      	mov	r5, r3
    4b32:	e77d      	b.n	4a30 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xfac>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    4b34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4b38:	d193      	bne.n	4a62 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xfde>
    4b3a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    4b3e:	e7ad      	b.n	4a9c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1018>
  assert(exponent >= 0);
    4b40:	4b1a      	ldr	r3, [pc, #104]	; (4bac <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1128>)
    4b42:	4a1b      	ldr	r2, [pc, #108]	; (4bb0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x112c>)
    4b44:	f44f 71b3 	mov.w	r1, #358	; 0x166
    4b48:	481a      	ldr	r0, [pc, #104]	; (4bb4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1130>)
    4b4a:	4c1b      	ldr	r4, [pc, #108]	; (4bb8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1134>)
    4b4c:	47a0      	blx	r4
  assert(exponent <= 31);
    4b4e:	4b1b      	ldr	r3, [pc, #108]	; (4bbc <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1138>)
    4b50:	4a17      	ldr	r2, [pc, #92]	; (4bb0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x112c>)
    4b52:	f240 1167 	movw	r1, #359	; 0x167
    4b56:	4817      	ldr	r0, [pc, #92]	; (4bb4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1130>)
    4b58:	4c17      	ldr	r4, [pc, #92]	; (4bb8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1134>)
    4b5a:	47a0      	blx	r4
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    4b5c:	4b12      	ldr	r3, [pc, #72]	; (4ba8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1124>)
    4b5e:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    4b60:	4b11      	ldr	r3, [pc, #68]	; (4ba8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1124>)
    4b62:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    4b64:	4b10      	ldr	r3, [pc, #64]	; (4ba8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1124>)
    4b66:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    4b68:	4b0f      	ldr	r3, [pc, #60]	; (4ba8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1124>)
    4b6a:	4798      	blx	r3
          for (int ic = 0; ic < input_depth; ++ic) {
    4b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4b6e:	3301      	adds	r3, #1
    4b70:	930d      	str	r3, [sp, #52]	; 0x34
    4b72:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    4b74:	993b      	ldr	r1, [sp, #236]	; 0xec
    4b76:	440a      	add	r2, r1
    4b78:	9230      	str	r2, [sp, #192]	; 0xc0
    4b7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4b7c:	4293      	cmp	r3, r2
    4b7e:	d01f      	beq.n	4bc0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x113c>
            for (int m = 0; m < depth_multiplier; m++) {
    4b80:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    4b82:	2b00      	cmp	r3, #0
    4b84:	ddf2      	ble.n	4b6c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10e8>
    4b86:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    4b88:	4613      	mov	r3, r2
    4b8a:	9931      	ldr	r1, [sp, #196]	; 0xc4
    4b8c:	440b      	add	r3, r1
    4b8e:	9933      	ldr	r1, [sp, #204]	; 0xcc
    4b90:	18cb      	adds	r3, r1, r3
    4b92:	9316      	str	r3, [sp, #88]	; 0x58
    4b94:	992f      	ldr	r1, [sp, #188]	; 0xbc
    4b96:	4613      	mov	r3, r2
    4b98:	188a      	adds	r2, r1, r2
    4b9a:	9224      	str	r2, [sp, #144]	; 0x90
    4b9c:	9307      	str	r3, [sp, #28]
    4b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4ba0:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    4ba2:	4413      	add	r3, r2
    4ba4:	9327      	str	r3, [sp, #156]	; 0x9c
    4ba6:	e7b5      	b.n	4b14 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1090>
    4ba8:	00014b3d 	.word	0x00014b3d
    4bac:	0002202c 	.word	0x0002202c
    4bb0:	00022098 	.word	0x00022098
    4bb4:	0002203c 	.word	0x0002203c
    4bb8:	00014b4d 	.word	0x00014b4d
    4bbc:	0002206c 	.word	0x0002206c
    4bc0:	4653      	mov	r3, sl
    4bc2:	46e2      	mov	sl, ip
    4bc4:	469c      	mov	ip, r3
        for (int out_x = 0; out_x < output_width; ++out_x) {
    4bc6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    4bc8:	3301      	adds	r3, #1
    4bca:	931c      	str	r3, [sp, #112]	; 0x70
    4bcc:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    4bce:	9935      	ldr	r1, [sp, #212]	; 0xd4
    4bd0:	440a      	add	r2, r1
    4bd2:	9231      	str	r2, [sp, #196]	; 0xc4
    4bd4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    4bd6:	9941      	ldr	r1, [sp, #260]	; 0x104
    4bd8:	440a      	add	r2, r1
    4bda:	9232      	str	r2, [sp, #200]	; 0xc8
    4bdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4bde:	993d      	ldr	r1, [sp, #244]	; 0xf4
    4be0:	440a      	add	r2, r1
    4be2:	920b      	str	r2, [sp, #44]	; 0x2c
    4be4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    4be6:	4293      	cmp	r3, r2
    4be8:	f47f ae8c 	bne.w	4904 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xe80>
    4bec:	4653      	mov	r3, sl
    4bee:	46da      	mov	sl, fp
    4bf0:	469b      	mov	fp, r3
      for (int out_y = 0; out_y < output_height; ++out_y) {
    4bf2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    4bf4:	3301      	adds	r3, #1
    4bf6:	931b      	str	r3, [sp, #108]	; 0x6c
    4bf8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    4bfa:	993e      	ldr	r1, [sp, #248]	; 0xf8
    4bfc:	440a      	add	r2, r1
    4bfe:	922d      	str	r2, [sp, #180]	; 0xb4
    4c00:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    4c02:	993f      	ldr	r1, [sp, #252]	; 0xfc
    4c04:	440a      	add	r2, r1
    4c06:	922e      	str	r2, [sp, #184]	; 0xb8
    4c08:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    4c0a:	9938      	ldr	r1, [sp, #224]	; 0xe0
    4c0c:	440a      	add	r2, r1
    4c0e:	921a      	str	r2, [sp, #104]	; 0x68
    4c10:	9a19      	ldr	r2, [sp, #100]	; 0x64
    4c12:	4293      	cmp	r3, r2
    4c14:	f47f ae67 	bne.w	48e6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xe62>
    for (int b = 0; b < batches; ++b) {
    4c18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4c1a:	3301      	adds	r3, #1
    4c1c:	930c      	str	r3, [sp, #48]	; 0x30
    4c1e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    4c20:	9936      	ldr	r1, [sp, #216]	; 0xd8
    4c22:	440a      	add	r2, r1
    4c24:	922b      	str	r2, [sp, #172]	; 0xac
    4c26:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    4c28:	9940      	ldr	r1, [sp, #256]	; 0x100
    4c2a:	440a      	add	r2, r1
    4c2c:	922c      	str	r2, [sp, #176]	; 0xb0
    4c2e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    4c30:	4293      	cmp	r3, r2
    4c32:	f47f ae48 	bne.w	48c6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xe42>
    if (size_ > kMaxSmallSize) {
    4c36:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    4c38:	2b05      	cmp	r3, #5
    4c3a:	dd03      	ble.n	4c44 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x11c0>
      delete[] dims_pointer_;
    4c3c:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    4c3e:	b108      	cbz	r0, 4c44 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x11c0>
    4c40:	4b42      	ldr	r3, [pc, #264]	; (4d4c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x12c8>)
    4c42:	4798      	blx	r3
  return kTfLiteOk;
    4c44:	2000      	movs	r0, #0
    4c46:	f7fe bf54 	b.w	3af2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    4c4a:	9c02      	ldr	r4, [sp, #8]
    4c4c:	2c00      	cmp	r4, #0
    4c4e:	f6ff abca 	blt.w	43e6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x962>
    4c52:	9c02      	ldr	r4, [sp, #8]
    4c54:	4625      	mov	r5, r4
    4c56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4c58:	42a5      	cmp	r5, r4
    4c5a:	f6bf abc4 	bge.w	43e6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x962>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    4c5e:	9c05      	ldr	r4, [sp, #20]
    4c60:	2c00      	cmp	r4, #0
    4c62:	f6ff abc2 	blt.w	43ea <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x966>
    4c66:	4625      	mov	r5, r4
    4c68:	9c06      	ldr	r4, [sp, #24]
    4c6a:	42a5      	cmp	r5, r4
    4c6c:	f6bf abbd 	bge.w	43ea <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x966>
                                                      in_x, in_channel)];
    4c70:	f991 4000 	ldrsb.w	r4, [r1]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    4c74:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    4c76:	2f00      	cmp	r7, #0
    4c78:	f77f abb9 	ble.w	43ee <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x96a>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    4c7c:	9d03      	ldr	r5, [sp, #12]
    4c7e:	2d00      	cmp	r5, #0
    4c80:	f6ff abb7 	blt.w	43f2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x96e>
    4c84:	9f04      	ldr	r7, [sp, #16]
    4c86:	42af      	cmp	r7, r5
    4c88:	f77f abb3 	ble.w	43f2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x96e>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    4c8c:	2a00      	cmp	r2, #0
    4c8e:	f6ff abb2 	blt.w	43f6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x972>
    4c92:	4590      	cmp	r8, r2
    4c94:	f77f abaf 	ble.w	43f6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x972>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    4c98:	f1ba 0f00 	cmp.w	sl, #0
    4c9c:	f6ff abad 	blt.w	43fa <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x976>
    4ca0:	9f07      	ldr	r7, [sp, #28]
    4ca2:	4557      	cmp	r7, sl
    4ca4:	f77f aba9 	ble.w	43fa <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x976>
                      filter_shape, 0, filter_y, filter_x, output_channel)];
    4ca8:	f990 7000 	ldrsb.w	r7, [r0]
                  acc += filter_val * (input_val + input_offset);
    4cac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    4cae:	1b64      	subs	r4, r4, r5
    4cb0:	9d01      	ldr	r5, [sp, #4]
    4cb2:	fb04 5407 	mla	r4, r4, r7, r5
    4cb6:	9401      	str	r4, [sp, #4]
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    4cb8:	3201      	adds	r2, #1
    4cba:	4463      	add	r3, ip
    4cbc:	4470      	add	r0, lr
    4cbe:	4459      	add	r1, fp
    4cc0:	4542      	cmp	r2, r8
    4cc2:	f43f ab9c 	beq.w	43fe <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x97a>
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    4cc6:	2b00      	cmp	r3, #0
    4cc8:	dbf6      	blt.n	4cb8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1234>
    4cca:	454b      	cmp	r3, r9
    4ccc:	daf4      	bge.n	4cb8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1234>
    4cce:	2e00      	cmp	r6, #0
    4cd0:	dbf2      	blt.n	4cb8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1234>
    4cd2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    4cd4:	42a6      	cmp	r6, r4
    4cd6:	dbb8      	blt.n	4c4a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x11c6>
    4cd8:	e7ee      	b.n	4cb8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1234>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    4cda:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4cde:	2100      	movs	r1, #0
    4ce0:	1880      	adds	r0, r0, r2
    4ce2:	4159      	adcs	r1, r3
    4ce4:	f7ff bbd7 	b.w	4496 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xa12>
    4ce8:	4819      	ldr	r0, [pc, #100]	; (4d50 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x12cc>)
    4cea:	f04f 31ff 	mov.w	r1, #4294967295
    4cee:	1880      	adds	r0, r0, r2
    4cf0:	4159      	adcs	r1, r3
    4cf2:	4602      	mov	r2, r0
    4cf4:	460b      	mov	r3, r1
    4cf6:	2800      	cmp	r0, #0
    4cf8:	f171 0400 	sbcs.w	r4, r1, #0
    4cfc:	db03      	blt.n	4d06 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1282>
    4cfe:	0fc3      	lsrs	r3, r0, #31
    4d00:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    4d04:	e6ca      	b.n	4a9c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1018>
    4d06:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4d0a:	2100      	movs	r1, #0
    4d0c:	1880      	adds	r0, r0, r2
    4d0e:	4159      	adcs	r1, r3
    4d10:	e7f5      	b.n	4cfe <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x127a>
    4d12:	480f      	ldr	r0, [pc, #60]	; (4d50 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x12cc>)
    4d14:	f04f 31ff 	mov.w	r1, #4294967295
    4d18:	1880      	adds	r0, r0, r2
    4d1a:	4159      	adcs	r1, r3
    4d1c:	4602      	mov	r2, r0
    4d1e:	460b      	mov	r3, r1
    4d20:	2800      	cmp	r0, #0
    4d22:	f171 0400 	sbcs.w	r4, r1, #0
    4d26:	db04      	blt.n	4d32 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x12ae>
    4d28:	0fc3      	lsrs	r3, r0, #31
    4d2a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    4d2e:	f7ff bbb5 	b.w	449c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xa18>
    4d32:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4d36:	2100      	movs	r1, #0
    4d38:	1880      	adds	r0, r0, r2
    4d3a:	4159      	adcs	r1, r3
    4d3c:	e7f4      	b.n	4d28 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x12a4>
    4d3e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4d42:	2100      	movs	r1, #0
    4d44:	1880      	adds	r0, r0, r2
    4d46:	4159      	adcs	r1, r3
    4d48:	e6a5      	b.n	4a96 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1012>
    4d4a:	bf00      	nop
    4d4c:	0000a461 	.word	0x0000a461
    4d50:	c0000001 	.word	0xc0000001

00004d54 <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv>:

}  // namespace depthwise_conv

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
    4d54:	b470      	push	{r4, r5, r6}
    4d56:	4606      	mov	r6, r0
          /*prepare=*/depthwise_conv::Prepare,
          /*invoke=*/depthwise_conv::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    4d58:	4604      	mov	r4, r0
    4d5a:	4d05      	ldr	r5, [pc, #20]	; (4d70 <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv+0x1c>)
    4d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4d60:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    4d64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    4d68:	4630      	mov	r0, r6
    4d6a:	bc70      	pop	{r4, r5, r6}
    4d6c:	4770      	bx	lr
    4d6e:	bf00      	nop
    4d70:	000220f4 	.word	0x000220f4

00004d74 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:
  return status;
}

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
    4d74:	b500      	push	{lr}
    4d76:	b083      	sub	sp, #12
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    4d78:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4d7a:	b163      	cbz	r3, 4d96 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x22>
  void* data = nullptr;
    4d7c:	aa02      	add	r2, sp, #8
    4d7e:	2100      	movs	r1, #0
    4d80:	f842 1d04 	str.w	r1, [r2, #-4]!
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
    4d84:	2114      	movs	r1, #20
    4d86:	4798      	blx	r3
    4d88:	2801      	cmp	r0, #1
      kTfLiteError) {
    return nullptr;
  }
  return data;
    4d8a:	bf14      	ite	ne
    4d8c:	9801      	ldrne	r0, [sp, #4]
    return nullptr;
    4d8e:	2000      	moveq	r0, #0
}
    4d90:	b003      	add	sp, #12
    4d92:	f85d fb04 	ldr.w	pc, [sp], #4
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    4d96:	4b01      	ldr	r3, [pc, #4]	; (4d9c <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x28>)
    4d98:	4798      	blx	r3
    4d9a:	bf00      	nop
    4d9c:	00014b3d 	.word	0x00014b3d

00004da0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    4da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4da4:	b089      	sub	sp, #36	; 0x24
  TFLITE_DCHECK(node->user_data != nullptr);
    4da6:	f8d1 8010 	ldr.w	r8, [r1, #16]
    4daa:	f1b8 0f00 	cmp.w	r8, #0
    4dae:	d015      	beq.n	4ddc <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x3c>
    4db0:	4607      	mov	r7, r0
  TFLITE_DCHECK(node->builtin_data != nullptr);
    4db2:	f8d1 c014 	ldr.w	ip, [r1, #20]
    4db6:	f1bc 0f00 	cmp.w	ip, #0
    4dba:	d011      	beq.n	4de0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x40>
  return &context->tensors[node->inputs->data[index]];
    4dbc:	6884      	ldr	r4, [r0, #8]
    4dbe:	680e      	ldr	r6, [r1, #0]
    4dc0:	6872      	ldr	r2, [r6, #4]
    4dc2:	0192      	lsls	r2, r2, #6
    4dc4:	eb04 0e02 	add.w	lr, r4, r2
  const bool use_tensor = index < node->inputs->size &&
    4dc8:	6833      	ldr	r3, [r6, #0]
    4dca:	2b02      	cmp	r3, #2
    4dcc:	dd0c      	ble.n	4de8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    4dce:	68f3      	ldr	r3, [r6, #12]
  const bool use_tensor = index < node->inputs->size &&
    4dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
    4dd4:	d006      	beq.n	4de4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x44>
    return &context->tensors[node->inputs->data[index]];
    4dd6:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    4dda:	e006      	b.n	4dea <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  TFLITE_DCHECK(node->user_data != nullptr);
    4ddc:	4b2d      	ldr	r3, [pc, #180]	; (4e94 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
    4dde:	4798      	blx	r3
  TFLITE_DCHECK(node->builtin_data != nullptr);
    4de0:	4b2c      	ldr	r3, [pc, #176]	; (4e94 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
    4de2:	4798      	blx	r3
  return nullptr;
    4de4:	2300      	movs	r3, #0
    4de6:	e000      	b.n	4dea <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    4de8:	2300      	movs	r3, #0
  return &context->tensors[node->outputs->data[index]];
    4dea:	6849      	ldr	r1, [r1, #4]
    4dec:	684d      	ldr	r5, [r1, #4]
    4dee:	01ad      	lsls	r5, r5, #6
    4df0:	eb04 0905 	add.w	r9, r4, r5
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    4df4:	5ca0      	ldrb	r0, [r4, r2]
    4df6:	5d62      	ldrb	r2, [r4, r5]
    4df8:	4282      	cmp	r2, r0
    4dfa:	d10b      	bne.n	4e14 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x74>
  return &context->tensors[node->inputs->data[index]];
    4dfc:	68b5      	ldr	r5, [r6, #8]
    4dfe:	01ad      	lsls	r5, r5, #6
    4e00:	1962      	adds	r2, r4, r5
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
    4e02:	5d61      	ldrb	r1, [r4, r5]
    4e04:	4281      	cmp	r1, r0
    4e06:	d01c      	beq.n	4e42 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa2>
    4e08:	697b      	ldr	r3, [r7, #20]
    4e0a:	4923      	ldr	r1, [pc, #140]	; (4e98 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
    4e0c:	4638      	mov	r0, r7
    4e0e:	4798      	blx	r3
    4e10:	2001      	movs	r0, #1
    4e12:	e013      	b.n	4e3c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x9c>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    4e14:	f8d7 8014 	ldr.w	r8, [r7, #20]
    4e18:	4e20      	ldr	r6, [pc, #128]	; (4e9c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
    4e1a:	47b0      	blx	r6
    4e1c:	4681      	mov	r9, r0
    4e1e:	5d60      	ldrb	r0, [r4, r5]
    4e20:	47b0      	blx	r6
    4e22:	9003      	str	r0, [sp, #12]
    4e24:	f8cd 9008 	str.w	r9, [sp, #8]
    4e28:	4b1d      	ldr	r3, [pc, #116]	; (4ea0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
    4e2a:	9301      	str	r3, [sp, #4]
    4e2c:	4b1d      	ldr	r3, [pc, #116]	; (4ea4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
    4e2e:	9300      	str	r3, [sp, #0]
    4e30:	2360      	movs	r3, #96	; 0x60
    4e32:	4a1d      	ldr	r2, [pc, #116]	; (4ea8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
    4e34:	491d      	ldr	r1, [pc, #116]	; (4eac <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    4e36:	4638      	mov	r0, r7
    4e38:	47c0      	blx	r8
    4e3a:	2001      	movs	r0, #1
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpData(context, params->activation, input->type, input,
                         filter, bias, output, data);
}
    4e3c:	b009      	add	sp, #36	; 0x24
    4e3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (data_type != kTfLiteFloat32) {
    4e42:	2801      	cmp	r0, #1
    4e44:	d024      	beq.n	4e90 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>
  return CalculateOpData(context, params->activation, input->type, input,
    4e46:	f89c 4000 	ldrb.w	r4, [ip]
    double real_multiplier = 0.0;
    4e4a:	ad08      	add	r5, sp, #32
    4e4c:	2000      	movs	r0, #0
    4e4e:	2100      	movs	r1, #0
    4e50:	e965 0102 	strd	r0, r1, [r5, #-8]!
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    4e54:	9501      	str	r5, [sp, #4]
    4e56:	f8cd 9000 	str.w	r9, [sp]
    4e5a:	4671      	mov	r1, lr
    4e5c:	4638      	mov	r0, r7
    4e5e:	4d14      	ldr	r5, [pc, #80]	; (4eb0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    4e60:	47a8      	blx	r5
    4e62:	2800      	cmp	r0, #0
    4e64:	d1ea      	bne.n	4e3c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x9c>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
    4e66:	ab05      	add	r3, sp, #20
    4e68:	4642      	mov	r2, r8
    4e6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    4e6e:	4d11      	ldr	r5, [pc, #68]	; (4eb4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x114>)
    4e70:	47a8      	blx	r5
    data->output_shift = -exponent;
    4e72:	9b05      	ldr	r3, [sp, #20]
    4e74:	425b      	negs	r3, r3
    4e76:	f8c8 3004 	str.w	r3, [r8, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    4e7a:	f108 030c 	add.w	r3, r8, #12
    4e7e:	9300      	str	r3, [sp, #0]
    4e80:	f108 0308 	add.w	r3, r8, #8
    4e84:	464a      	mov	r2, r9
    4e86:	4621      	mov	r1, r4
    4e88:	4638      	mov	r0, r7
    4e8a:	4c0b      	ldr	r4, [pc, #44]	; (4eb8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x118>)
    4e8c:	47a0      	blx	r4
    4e8e:	e7d5      	b.n	4e3c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x9c>
  return status;
    4e90:	2000      	movs	r0, #0
    4e92:	e7d3      	b.n	4e3c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x9c>
    4e94:	00014b3d 	.word	0x00014b3d
    4e98:	000222b8 	.word	0x000222b8
    4e9c:	0000a3c5 	.word	0x0000a3c5
    4ea0:	0002229c 	.word	0x0002229c
    4ea4:	000222ac 	.word	0x000222ac
    4ea8:	00022248 	.word	0x00022248
    4eac:	00022280 	.word	0x00022280
    4eb0:	00001ca9 	.word	0x00001ca9
    4eb4:	00001a3d 	.word	0x00001a3d
    4eb8:	00001d65 	.word	0x00001d65

00004ebc <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>:
}

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
    4ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ec0:	b0a9      	sub	sp, #164	; 0xa4
    4ec2:	461c      	mov	r4, r3
    4ec4:	9d32      	ldr	r5, [sp, #200]	; 0xc8
    4ec6:	9f33      	ldr	r7, [sp, #204]	; 0xcc
    4ec8:	9e34      	ldr	r6, [sp, #208]	; 0xd0
  if (activation == kTfLiteActRelu) {
    4eca:	2a01      	cmp	r2, #1
    4ecc:	f000 80d5 	beq.w	507a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1be>
  } else if (activation == kTfLiteActRelu6) {
    4ed0:	2a03      	cmp	r2, #3
    4ed2:	f000 80d7 	beq.w	5084 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1c8>
  } else if (activation == kTfLiteActReluN1To1) {
    4ed6:	2a02      	cmp	r2, #2
    4ed8:	f000 80d9 	beq.w	508e <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1d2>
    *activation_max = std::numeric_limits<T>::max();
    4edc:	4b88      	ldr	r3, [pc, #544]	; (5100 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x244>)
    4ede:	9305      	str	r3, [sp, #20]
    *activation_min = std::numeric_limits<T>::lowest();
    4ee0:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    4ee4:	9304      	str	r3, [sp, #16]
  if (tensor == nullptr) {
    4ee6:	2c00      	cmp	r4, #0
    4ee8:	f000 80d7 	beq.w	509a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1de>
  const int dims_size = dims->size;
    4eec:	f8d4 9008 	ldr.w	r9, [r4, #8]
    4ef0:	f859 8b04 	ldr.w	r8, [r9], #4
    size_ = dimensions_count;
    4ef4:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    if (dimensions_count > kMaxSmallSize) {
    4ef8:	f1b8 0f05 	cmp.w	r8, #5
    4efc:	f340 80cf 	ble.w	509e <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1e2>
      dims_pointer_ = new int32[dimensions_count];
    4f00:	4b80      	ldr	r3, [pc, #512]	; (5104 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x248>)
    4f02:	4598      	cmp	r8, r3
    4f04:	bf94      	ite	ls
    4f06:	ea4f 0088 	movls.w	r0, r8, lsl #2
    4f0a:	f04f 30ff 	movhi.w	r0, #4294967295
    4f0e:	4b7e      	ldr	r3, [pc, #504]	; (5108 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x24c>)
    4f10:	4798      	blx	r3
    4f12:	9011      	str	r0, [sp, #68]	; 0x44
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4f14:	ea4f 0288 	mov.w	r2, r8, lsl #2
    4f18:	4649      	mov	r1, r9
    4f1a:	4b7c      	ldr	r3, [pc, #496]	; (510c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x250>)
    4f1c:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    4f1e:	6864      	ldr	r4, [r4, #4]
  if (tensor == nullptr) {
    4f20:	2d00      	cmp	r5, #0
    4f22:	f000 80be 	beq.w	50a2 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1e6>
  const int dims_size = dims->size;
    4f26:	f8d5 9008 	ldr.w	r9, [r5, #8]
    4f2a:	f859 8b04 	ldr.w	r8, [r9], #4
    size_ = dimensions_count;
    4f2e:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
    if (dimensions_count > kMaxSmallSize) {
    4f32:	f1b8 0f05 	cmp.w	r8, #5
    4f36:	f340 80b8 	ble.w	50aa <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1ee>
      dims_pointer_ = new int32[dimensions_count];
    4f3a:	4b72      	ldr	r3, [pc, #456]	; (5104 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x248>)
    4f3c:	4598      	cmp	r8, r3
    4f3e:	bf94      	ite	ls
    4f40:	ea4f 0088 	movls.w	r0, r8, lsl #2
    4f44:	f04f 30ff 	movhi.w	r0, #4294967295
    4f48:	4b6f      	ldr	r3, [pc, #444]	; (5108 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x24c>)
    4f4a:	4798      	blx	r3
    4f4c:	9017      	str	r0, [sp, #92]	; 0x5c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4f4e:	ea4f 0288 	mov.w	r2, r8, lsl #2
    4f52:	4649      	mov	r1, r9
    4f54:	4b6d      	ldr	r3, [pc, #436]	; (510c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x250>)
    4f56:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    4f58:	686b      	ldr	r3, [r5, #4]
    4f5a:	930c      	str	r3, [sp, #48]	; 0x30
  if (tensor == nullptr) {
    4f5c:	2f00      	cmp	r7, #0
    4f5e:	f000 80a6 	beq.w	50ae <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1f2>
  const int dims_size = dims->size;
    4f62:	f8d7 8008 	ldr.w	r8, [r7, #8]
    4f66:	f858 5b04 	ldr.w	r5, [r8], #4
    size_ = dimensions_count;
    4f6a:	951c      	str	r5, [sp, #112]	; 0x70
    if (dimensions_count > kMaxSmallSize) {
    4f6c:	2d05      	cmp	r5, #5
    4f6e:	f340 80a2 	ble.w	50b6 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1fa>
      dims_pointer_ = new int32[dimensions_count];
    4f72:	4b64      	ldr	r3, [pc, #400]	; (5104 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x248>)
    4f74:	429d      	cmp	r5, r3
    4f76:	bf94      	ite	ls
    4f78:	00a8      	lslls	r0, r5, #2
    4f7a:	f04f 30ff 	movhi.w	r0, #4294967295
    4f7e:	4b62      	ldr	r3, [pc, #392]	; (5108 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x24c>)
    4f80:	4798      	blx	r3
    4f82:	901d      	str	r0, [sp, #116]	; 0x74
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4f84:	00aa      	lsls	r2, r5, #2
    4f86:	4641      	mov	r1, r8
    4f88:	4b60      	ldr	r3, [pc, #384]	; (510c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x250>)
    4f8a:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    4f8c:	687b      	ldr	r3, [r7, #4]
    4f8e:	9303      	str	r3, [sp, #12]
  if (tensor == nullptr) {
    4f90:	2e00      	cmp	r6, #0
    4f92:	f000 8094 	beq.w	50be <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x202>
  const int dims_size = dims->size;
    4f96:	68b7      	ldr	r7, [r6, #8]
    4f98:	f857 5b04 	ldr.w	r5, [r7], #4
    size_ = dimensions_count;
    4f9c:	9522      	str	r5, [sp, #136]	; 0x88
    if (dimensions_count > kMaxSmallSize) {
    4f9e:	2d05      	cmp	r5, #5
    4fa0:	f340 808b 	ble.w	50ba <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1fe>
      dims_pointer_ = new int32[dimensions_count];
    4fa4:	4b57      	ldr	r3, [pc, #348]	; (5104 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x248>)
    4fa6:	429d      	cmp	r5, r3
    4fa8:	bf94      	ite	ls
    4faa:	00a8      	lslls	r0, r5, #2
    4fac:	f04f 30ff 	movhi.w	r0, #4294967295
    4fb0:	4b55      	ldr	r3, [pc, #340]	; (5108 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x24c>)
    4fb2:	4798      	blx	r3
    4fb4:	9023      	str	r0, [sp, #140]	; 0x8c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4fb6:	00aa      	lsls	r2, r5, #2
    4fb8:	4639      	mov	r1, r7
    4fba:	4b54      	ldr	r3, [pc, #336]	; (510c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x250>)
    4fbc:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    4fbe:	6875      	ldr	r5, [r6, #4]
  inline int32 DimensionsCount() const { return size_; }
    4fc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4fc2:	930f      	str	r3, [sp, #60]	; 0x3c
    4fc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
    4fc6:	920e      	str	r2, [sp, #56]	; 0x38
// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
  const int dims_count = shape.DimensionsCount();
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    4fc8:	1e59      	subs	r1, r3, #1
    4fca:	d478      	bmi.n	50be <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x202>
    4fcc:	428b      	cmp	r3, r1
    4fce:	dd76      	ble.n	50be <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x202>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4fd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4fd2:	2b05      	cmp	r3, #5
    4fd4:	bfcc      	ite	gt
    4fd6:	9823      	ldrgt	r0, [sp, #140]	; 0x8c
    4fd8:	a823      	addle	r0, sp, #140	; 0x8c
  const auto* dims_data = shape.DimsData();
  int flat_size = 1;
  for (int i = 0; i < dims_count; ++i) {
    4fda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4fdc:	2a00      	cmp	r2, #0
    4fde:	dd70      	ble.n	50c2 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x206>
    4fe0:	2301      	movs	r3, #1
    4fe2:	461f      	mov	r7, r3
    4fe4:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    4fe6:	463e      	mov	r6, r7
    4fe8:	4696      	mov	lr, r2
    4fea:	4299      	cmp	r1, r3
    4fec:	bf14      	ite	ne
    4fee:	f850 2023 	ldrne.w	r2, [r0, r3, lsl #2]
    4ff2:	4632      	moveq	r2, r6
    4ff4:	fb02 f707 	mul.w	r7, r2, r7
  for (int i = 0; i < dims_count; ++i) {
    4ff8:	3301      	adds	r3, #1
    4ffa:	459e      	cmp	lr, r3
    4ffc:	d1f5      	bne.n	4fea <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x12e>
    4ffe:	970b      	str	r7, [sp, #44]	; 0x2c
    TFLITE_DCHECK_GE(i, 0);
    5000:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5002:	3b02      	subs	r3, #2
    5004:	d460      	bmi.n	50c8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x20c>
    TFLITE_DCHECK_LT(i, size_);
    5006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5008:	429a      	cmp	r2, r3
    500a:	dd5f      	ble.n	50cc <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x210>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    500c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    500e:	2a05      	cmp	r2, #5
    5010:	dc5e      	bgt.n	50d0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x214>
    5012:	aa28      	add	r2, sp, #160	; 0xa0
    5014:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5018:	f853 3c44 	ldr.w	r3, [r3, #-68]
    501c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    501e:	2a05      	cmp	r2, #5
    5020:	dc5a      	bgt.n	50d8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x21c>
    5022:	aa28      	add	r2, sp, #160	; 0xa0
    5024:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    5028:	f851 2c14 	ldr.w	r2, [r1, #-20]
    502c:	920a      	str	r2, [sp, #40]	; 0x28
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    502e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5030:	429a      	cmp	r2, r3
    5032:	d156      	bne.n	50e2 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x226>
    TFLITE_DCHECK_GE(i, 0);
    5034:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5036:	3b01      	subs	r3, #1
    5038:	d455      	bmi.n	50e6 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x22a>
    TFLITE_DCHECK_LT(i, size_);
    503a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    503c:	429a      	cmp	r2, r3
    503e:	dd54      	ble.n	50ea <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x22e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    5040:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5042:	2a05      	cmp	r2, #5
    5044:	dc53      	bgt.n	50ee <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x232>
    5046:	aa28      	add	r2, sp, #160	; 0xa0
    5048:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    504c:	f853 3c44 	ldr.w	r3, [r3, #-68]
    5050:	9306      	str	r3, [sp, #24]
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
  for (int b = 0; b < batches; ++b) {
    5052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5054:	2b00      	cmp	r3, #0
    5056:	f340 80b4 	ble.w	51c2 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x306>
    505a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    505c:	009b      	lsls	r3, r3, #2
    505e:	930d      	str	r3, [sp, #52]	; 0x34
    5060:	9508      	str	r5, [sp, #32]
    5062:	9a06      	ldr	r2, [sp, #24]
    5064:	0092      	lsls	r2, r2, #2
    5066:	9201      	str	r2, [sp, #4]
    5068:	9402      	str	r4, [sp, #8]
    506a:	9a03      	ldr	r2, [sp, #12]
    506c:	18d3      	adds	r3, r2, r3
    506e:	9307      	str	r3, [sp, #28]
    5070:	2300      	movs	r3, #0
    5072:	9309      	str	r3, [sp, #36]	; 0x24
    for (int out_c = 0; out_c < output_depth; ++out_c) {
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
    5074:	4d26      	ldr	r5, [pc, #152]	; (5110 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x254>)
    5076:	4f27      	ldr	r7, [pc, #156]	; (5114 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x258>)
    5078:	e095      	b.n	51a6 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2ea>
    *activation_max = std::numeric_limits<T>::max();
    507a:	4b21      	ldr	r3, [pc, #132]	; (5100 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x244>)
    507c:	9305      	str	r3, [sp, #20]
    *activation_min = 0;
    507e:	2300      	movs	r3, #0
    5080:	9304      	str	r3, [sp, #16]
    5082:	e730      	b.n	4ee6 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2a>
    *activation_max = 6;
    5084:	4b24      	ldr	r3, [pc, #144]	; (5118 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x25c>)
    5086:	9305      	str	r3, [sp, #20]
    *activation_min = 0;
    5088:	2300      	movs	r3, #0
    508a:	9304      	str	r3, [sp, #16]
    508c:	e72b      	b.n	4ee6 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2a>
    *activation_max = 1;
    508e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    5092:	9305      	str	r3, [sp, #20]
    *activation_min = -1;
    5094:	4b21      	ldr	r3, [pc, #132]	; (511c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x260>)
    5096:	9304      	str	r3, [sp, #16]
    5098:	e725      	b.n	4ee6 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2a>
  RuntimeShape() : size_(0) {}
    509a:	9410      	str	r4, [sp, #64]	; 0x40
    509c:	e740      	b.n	4f20 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x64>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    509e:	a811      	add	r0, sp, #68	; 0x44
    50a0:	e738      	b.n	4f14 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x58>
  RuntimeShape() : size_(0) {}
    50a2:	2300      	movs	r3, #0
    50a4:	9316      	str	r3, [sp, #88]	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    50a6:	930c      	str	r3, [sp, #48]	; 0x30
    50a8:	e758      	b.n	4f5c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xa0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    50aa:	a817      	add	r0, sp, #92	; 0x5c
    50ac:	e74f      	b.n	4f4e <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x92>
  RuntimeShape() : size_(0) {}
    50ae:	2300      	movs	r3, #0
    50b0:	931c      	str	r3, [sp, #112]	; 0x70
    50b2:	9303      	str	r3, [sp, #12]
    50b4:	e76c      	b.n	4f90 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xd4>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    50b6:	a81d      	add	r0, sp, #116	; 0x74
    50b8:	e764      	b.n	4f84 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xc8>
    50ba:	a823      	add	r0, sp, #140	; 0x8c
    50bc:	e77b      	b.n	4fb6 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xfa>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    50be:	4b18      	ldr	r3, [pc, #96]	; (5120 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x264>)
    50c0:	4798      	blx	r3
  int flat_size = 1;
    50c2:	2301      	movs	r3, #1
    50c4:	930b      	str	r3, [sp, #44]	; 0x2c
    50c6:	e79b      	b.n	5000 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x144>
    TFLITE_DCHECK_GE(i, 0);
    50c8:	4b15      	ldr	r3, [pc, #84]	; (5120 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x264>)
    50ca:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    50cc:	4b14      	ldr	r3, [pc, #80]	; (5120 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x264>)
    50ce:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    50d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    50d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    50d6:	e7a1      	b.n	501c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x160>
    50d8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    50da:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    50de:	920a      	str	r2, [sp, #40]	; 0x28
    50e0:	e7a5      	b.n	502e <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x172>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    50e2:	4b0f      	ldr	r3, [pc, #60]	; (5120 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x264>)
    50e4:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    50e6:	4b0e      	ldr	r3, [pc, #56]	; (5120 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x264>)
    50e8:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    50ea:	4b0d      	ldr	r3, [pc, #52]	; (5120 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x264>)
    50ec:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    50ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    50f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    50f4:	9306      	str	r3, [sp, #24]
    50f6:	e7ac      	b.n	5052 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x196>
      for (int d = 0; d < accum_depth; ++d) {
    50f8:	2600      	movs	r6, #0
    50fa:	e02f      	b.n	515c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2a0>
                 weights_data[out_c * accum_depth + d];
      }
      float bias_value = 0.0f;
    50fc:	2100      	movs	r1, #0
    50fe:	e032      	b.n	5166 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2aa>
    5100:	7f7fffff 	.word	0x7f7fffff
    5104:	1ffffffe 	.word	0x1ffffffe
    5108:	0000a511 	.word	0x0000a511
    510c:	000158c1 	.word	0x000158c1
    5110:	000134e1 	.word	0x000134e1
    5114:	000132d1 	.word	0x000132d1
    5118:	40c00000 	.word	0x40c00000
    511c:	bf800000 	.word	0xbf800000
    5120:	00014b3d 	.word	0x00014b3d
      if (bias_data) {
        bias_value = bias_data[out_c];
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    5124:	9b00      	ldr	r3, [sp, #0]
    5126:	f843 4b04 	str.w	r4, [r3], #4
    512a:	9300      	str	r3, [sp, #0]
    512c:	f10a 0a04 	add.w	sl, sl, #4
    5130:	9b01      	ldr	r3, [sp, #4]
    5132:	449b      	add	fp, r3
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    5134:	9b07      	ldr	r3, [sp, #28]
    5136:	4553      	cmp	r3, sl
    5138:	d027      	beq.n	518a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2ce>
      for (int d = 0; d < accum_depth; ++d) {
    513a:	9b06      	ldr	r3, [sp, #24]
    513c:	2b00      	cmp	r3, #0
    513e:	dddb      	ble.n	50f8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x23c>
    5140:	46d8      	mov	r8, fp
    5142:	9c02      	ldr	r4, [sp, #8]
    5144:	2600      	movs	r6, #0
        total += input_data[b * accum_depth + d] *
    5146:	f858 1b04 	ldr.w	r1, [r8], #4
    514a:	f854 0b04 	ldr.w	r0, [r4], #4
    514e:	47a8      	blx	r5
    5150:	4601      	mov	r1, r0
    5152:	4630      	mov	r0, r6
    5154:	47b8      	blx	r7
    5156:	4606      	mov	r6, r0
      for (int d = 0; d < accum_depth; ++d) {
    5158:	454c      	cmp	r4, r9
    515a:	d1f4      	bne.n	5146 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x28a>
      if (bias_data) {
    515c:	9b03      	ldr	r3, [sp, #12]
    515e:	2b00      	cmp	r3, #0
    5160:	d0cc      	beq.n	50fc <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x240>
        bias_value = bias_data[out_c];
    5162:	f8da 1000 	ldr.w	r1, [sl]
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    5166:	4630      	mov	r0, r6
    5168:	47b8      	blx	r7
    516a:	4604      	mov	r4, r0
      if (__a < __b)
    516c:	9e04      	ldr	r6, [sp, #16]
    516e:	4631      	mov	r1, r6
    5170:	4b24      	ldr	r3, [pc, #144]	; (5204 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x348>)
    5172:	4798      	blx	r3
    5174:	b100      	cbz	r0, 5178 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2bc>
	return __b;
    5176:	4634      	mov	r4, r6
      if (__b < __a)
    5178:	9e05      	ldr	r6, [sp, #20]
    517a:	4631      	mov	r1, r6
    517c:	4620      	mov	r0, r4
    517e:	4b22      	ldr	r3, [pc, #136]	; (5208 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x34c>)
    5180:	4798      	blx	r3
    5182:	2800      	cmp	r0, #0
    5184:	d0ce      	beq.n	5124 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x268>
	return __b;
    5186:	4634      	mov	r4, r6
    5188:	e7cc      	b.n	5124 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x268>
  for (int b = 0; b < batches; ++b) {
    518a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    518c:	3301      	adds	r3, #1
    518e:	9309      	str	r3, [sp, #36]	; 0x24
    5190:	9a08      	ldr	r2, [sp, #32]
    5192:	990d      	ldr	r1, [sp, #52]	; 0x34
    5194:	440a      	add	r2, r1
    5196:	9208      	str	r2, [sp, #32]
    5198:	9a02      	ldr	r2, [sp, #8]
    519a:	9901      	ldr	r1, [sp, #4]
    519c:	440a      	add	r2, r1
    519e:	9202      	str	r2, [sp, #8]
    51a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    51a2:	4293      	cmp	r3, r2
    51a4:	d00d      	beq.n	51c2 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x306>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    51a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    51a8:	2b00      	cmp	r3, #0
    51aa:	ddee      	ble.n	518a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2ce>
    51ac:	f8dd a00c 	ldr.w	sl, [sp, #12]
    51b0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    51b4:	9b02      	ldr	r3, [sp, #8]
    51b6:	9a01      	ldr	r2, [sp, #4]
    51b8:	eb03 0902 	add.w	r9, r3, r2
    51bc:	9b08      	ldr	r3, [sp, #32]
    51be:	9300      	str	r3, [sp, #0]
    51c0:	e7bb      	b.n	513a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x27e>
    if (size_ > kMaxSmallSize) {
    51c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    51c4:	2b05      	cmp	r3, #5
    51c6:	dd03      	ble.n	51d0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x314>
      delete[] dims_pointer_;
    51c8:	9823      	ldr	r0, [sp, #140]	; 0x8c
    51ca:	b108      	cbz	r0, 51d0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x314>
    51cc:	4b0f      	ldr	r3, [pc, #60]	; (520c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x350>)
    51ce:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    51d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    51d2:	2b05      	cmp	r3, #5
    51d4:	dd03      	ble.n	51de <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x322>
      delete[] dims_pointer_;
    51d6:	981d      	ldr	r0, [sp, #116]	; 0x74
    51d8:	b108      	cbz	r0, 51de <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x322>
    51da:	4b0c      	ldr	r3, [pc, #48]	; (520c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x350>)
    51dc:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    51de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    51e0:	2b05      	cmp	r3, #5
    51e2:	dd03      	ble.n	51ec <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x330>
      delete[] dims_pointer_;
    51e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    51e6:	b108      	cbz	r0, 51ec <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x330>
    51e8:	4b08      	ldr	r3, [pc, #32]	; (520c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x350>)
    51ea:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    51ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
    51ee:	2b05      	cmp	r3, #5
    51f0:	dd03      	ble.n	51fa <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x33e>
      delete[] dims_pointer_;
    51f2:	9811      	ldr	r0, [sp, #68]	; 0x44
    51f4:	b108      	cbz	r0, 51fa <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x33e>
    51f6:	4b05      	ldr	r3, [pc, #20]	; (520c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x350>)
    51f8:	4798      	blx	r3
      op_params, GetTensorShape(input), GetTensorData<float>(input),
      GetTensorShape(filter), GetTensorData<float>(filter),
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
      GetTensorData<float>(output));
  return kTfLiteOk;
}
    51fa:	2000      	movs	r0, #0
    51fc:	b029      	add	sp, #164	; 0xa4
    51fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5202:	bf00      	nop
    5204:	0001381d 	.word	0x0001381d
    5208:	00013859 	.word	0x00013859
    520c:	0000a461 	.word	0x0000a461

00005210 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    5210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5214:	b0e3      	sub	sp, #396	; 0x18c
  TFLITE_DCHECK(node->builtin_data != nullptr);
    5216:	694a      	ldr	r2, [r1, #20]
    5218:	b1aa      	cbz	r2, 5246 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x36>
    521a:	4606      	mov	r6, r0
  return &context->tensors[node->inputs->data[index]];
    521c:	6884      	ldr	r4, [r0, #8]
    521e:	680b      	ldr	r3, [r1, #0]
    5220:	6858      	ldr	r0, [r3, #4]
    5222:	ea4f 1880 	mov.w	r8, r0, lsl #6
    5226:	eb04 0708 	add.w	r7, r4, r8
    522a:	6898      	ldr	r0, [r3, #8]
    522c:	eb04 1b80 	add.w	fp, r4, r0, lsl #6
  const bool use_tensor = index < node->inputs->size &&
    5230:	6818      	ldr	r0, [r3, #0]
    5232:	2802      	cmp	r0, #2
    5234:	dd0c      	ble.n	5250 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x40>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    5236:	68db      	ldr	r3, [r3, #12]
  const bool use_tensor = index < node->inputs->size &&
    5238:	f1b3 3fff 	cmp.w	r3, #4294967295
    523c:	d005      	beq.n	524a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3a>
    return &context->tensors[node->inputs->data[index]];
    523e:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    5242:	9306      	str	r3, [sp, #24]
    5244:	e006      	b.n	5254 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x44>
    5246:	4b9d      	ldr	r3, [pc, #628]	; (54bc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    5248:	4798      	blx	r3
  return nullptr;
    524a:	2300      	movs	r3, #0
    524c:	9306      	str	r3, [sp, #24]
    524e:	e001      	b.n	5254 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x44>
    5250:	2300      	movs	r3, #0
    5252:	9306      	str	r3, [sp, #24]
  return &context->tensors[node->outputs->data[index]];
    5254:	684b      	ldr	r3, [r1, #4]
    5256:	685d      	ldr	r5, [r3, #4]
    5258:	01ab      	lsls	r3, r5, #6
    525a:	9308      	str	r3, [sp, #32]
    525c:	18e3      	adds	r3, r4, r3
    525e:	9307      	str	r3, [sp, #28]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
    5260:	690b      	ldr	r3, [r1, #16]
    5262:	b19b      	cbz	r3, 528c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x7c>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
    5264:	f814 0008 	ldrb.w	r0, [r4, r8]
    5268:	2803      	cmp	r0, #3
    526a:	f000 8174 	beq.w	5556 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x346>
    526e:	2809      	cmp	r0, #9
    5270:	d01c      	beq.n	52ac <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x9c>
    5272:	2801      	cmp	r0, #1
    5274:	d00c      	beq.n	5290 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x80>

    case kTfLiteUInt8:
      return EvalQuantized(context, node, data, input, filter, bias, output);

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    5276:	6975      	ldr	r5, [r6, #20]
    5278:	4b91      	ldr	r3, [pc, #580]	; (54c0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2b0>)
    527a:	4798      	blx	r3
    527c:	f814 3008 	ldrb.w	r3, [r4, r8]
    5280:	4602      	mov	r2, r0
    5282:	4990      	ldr	r1, [pc, #576]	; (54c4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2b4>)
    5284:	4630      	mov	r0, r6
    5286:	47a8      	blx	r5
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    5288:	2001      	movs	r0, #1
    528a:	e00c      	b.n	52a6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x96>
  TFLITE_DCHECK(node->user_data != nullptr);
    528c:	4b8b      	ldr	r3, [pc, #556]	; (54bc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    528e:	4798      	blx	r3
                       output);
    5290:	7812      	ldrb	r2, [r2, #0]
    5292:	9b07      	ldr	r3, [sp, #28]
    5294:	9302      	str	r3, [sp, #8]
    5296:	9b06      	ldr	r3, [sp, #24]
    5298:	9301      	str	r3, [sp, #4]
    529a:	f8cd b000 	str.w	fp, [sp]
    529e:	463b      	mov	r3, r7
    52a0:	4630      	mov	r0, r6
    52a2:	4c89      	ldr	r4, [pc, #548]	; (54c8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2b8>)
    52a4:	47a0      	blx	r4
  }
  return kTfLiteOk;
}
    52a6:	b063      	add	sp, #396	; 0x18c
    52a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  op_params.input_offset = -input->params.zero_point;
    52ac:	f8d7 8010 	ldr.w	r8, [r7, #16]
  op_params.weights_offset = -filter->params.zero_point;
    52b0:	f8db 4010 	ldr.w	r4, [fp, #16]
  op_params.output_offset = output->params.zero_point;
    52b4:	9a07      	ldr	r2, [sp, #28]
    52b6:	6912      	ldr	r2, [r2, #16]
    52b8:	920a      	str	r2, [sp, #40]	; 0x28
  op_params.output_multiplier = data.output_multiplier;
    52ba:	f8d3 9000 	ldr.w	r9, [r3]
  op_params.output_shift = -data.output_shift;
    52be:	f8d3 a004 	ldr.w	sl, [r3, #4]
  op_params.quantized_activation_min = data.output_activation_min;
    52c2:	689a      	ldr	r2, [r3, #8]
    52c4:	9208      	str	r2, [sp, #32]
  op_params.quantized_activation_max = data.output_activation_max;
    52c6:	68db      	ldr	r3, [r3, #12]
    52c8:	9309      	str	r3, [sp, #36]	; 0x24
  if (tensor == nullptr) {
    52ca:	2f00      	cmp	r7, #0
    52cc:	f000 80b8 	beq.w	5440 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x230>
  const int dims_size = dims->size;
    52d0:	68be      	ldr	r6, [r7, #8]
    52d2:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    52d6:	952c      	str	r5, [sp, #176]	; 0xb0
    if (dimensions_count > kMaxSmallSize) {
    52d8:	2d05      	cmp	r5, #5
    52da:	f340 80b3 	ble.w	5444 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x234>
      dims_pointer_ = new int32[dimensions_count];
    52de:	4b7b      	ldr	r3, [pc, #492]	; (54cc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
    52e0:	429d      	cmp	r5, r3
    52e2:	bf94      	ite	ls
    52e4:	00a8      	lslls	r0, r5, #2
    52e6:	f04f 30ff 	movhi.w	r0, #4294967295
    52ea:	4b79      	ldr	r3, [pc, #484]	; (54d0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2c0>)
    52ec:	4798      	blx	r3
    52ee:	902d      	str	r0, [sp, #180]	; 0xb4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    52f0:	00aa      	lsls	r2, r5, #2
    52f2:	4631      	mov	r1, r6
    52f4:	4b77      	ldr	r3, [pc, #476]	; (54d4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2c4>)
    52f6:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    52f8:	687f      	ldr	r7, [r7, #4]
  if (tensor == nullptr) {
    52fa:	f1bb 0f00 	cmp.w	fp, #0
    52fe:	f000 80a3 	beq.w	5448 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x238>
  const int dims_size = dims->size;
    5302:	f8db 6008 	ldr.w	r6, [fp, #8]
    5306:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    530a:	9526      	str	r5, [sp, #152]	; 0x98
    if (dimensions_count > kMaxSmallSize) {
    530c:	2d05      	cmp	r5, #5
    530e:	f340 809f 	ble.w	5450 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x240>
      dims_pointer_ = new int32[dimensions_count];
    5312:	4b6e      	ldr	r3, [pc, #440]	; (54cc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
    5314:	429d      	cmp	r5, r3
    5316:	bf94      	ite	ls
    5318:	00a8      	lslls	r0, r5, #2
    531a:	f04f 30ff 	movhi.w	r0, #4294967295
    531e:	4b6c      	ldr	r3, [pc, #432]	; (54d0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2c0>)
    5320:	4798      	blx	r3
    5322:	9027      	str	r0, [sp, #156]	; 0x9c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    5324:	00aa      	lsls	r2, r5, #2
    5326:	4631      	mov	r1, r6
    5328:	4b6a      	ldr	r3, [pc, #424]	; (54d4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2c4>)
    532a:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    532c:	f8db 3004 	ldr.w	r3, [fp, #4]
    5330:	9314      	str	r3, [sp, #80]	; 0x50
  if (tensor == nullptr) {
    5332:	9b06      	ldr	r3, [sp, #24]
    5334:	2b00      	cmp	r3, #0
    5336:	f000 808d 	beq.w	5454 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x244>
  const int dims_size = dims->size;
    533a:	9b06      	ldr	r3, [sp, #24]
    533c:	689e      	ldr	r6, [r3, #8]
    533e:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    5342:	9520      	str	r5, [sp, #128]	; 0x80
    if (dimensions_count > kMaxSmallSize) {
    5344:	2d05      	cmp	r5, #5
    5346:	f340 8088 	ble.w	545a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x24a>
      dims_pointer_ = new int32[dimensions_count];
    534a:	4b60      	ldr	r3, [pc, #384]	; (54cc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
    534c:	429d      	cmp	r5, r3
    534e:	bf94      	ite	ls
    5350:	00a8      	lslls	r0, r5, #2
    5352:	f04f 30ff 	movhi.w	r0, #4294967295
    5356:	4b5e      	ldr	r3, [pc, #376]	; (54d0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2c0>)
    5358:	4798      	blx	r3
    535a:	9021      	str	r0, [sp, #132]	; 0x84
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    535c:	00aa      	lsls	r2, r5, #2
    535e:	4631      	mov	r1, r6
    5360:	4b5c      	ldr	r3, [pc, #368]	; (54d4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2c4>)
    5362:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    5364:	9b06      	ldr	r3, [sp, #24]
    5366:	685b      	ldr	r3, [r3, #4]
    5368:	9306      	str	r3, [sp, #24]
  if (tensor == nullptr) {
    536a:	9b07      	ldr	r3, [sp, #28]
    536c:	2b00      	cmp	r3, #0
    536e:	d076      	beq.n	545e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x24e>
  const int dims_size = dims->size;
    5370:	9b07      	ldr	r3, [sp, #28]
    5372:	689e      	ldr	r6, [r3, #8]
    5374:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    5378:	951a      	str	r5, [sp, #104]	; 0x68
    if (dimensions_count > kMaxSmallSize) {
    537a:	2d05      	cmp	r5, #5
    537c:	dd75      	ble.n	546a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x25a>
      dims_pointer_ = new int32[dimensions_count];
    537e:	4b53      	ldr	r3, [pc, #332]	; (54cc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
    5380:	429d      	cmp	r5, r3
    5382:	bf94      	ite	ls
    5384:	00a8      	lslls	r0, r5, #2
    5386:	f04f 30ff 	movhi.w	r0, #4294967295
    538a:	4b51      	ldr	r3, [pc, #324]	; (54d0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2c0>)
    538c:	4798      	blx	r3
    538e:	901b      	str	r0, [sp, #108]	; 0x6c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    5390:	00aa      	lsls	r2, r5, #2
    5392:	4631      	mov	r1, r6
    5394:	4b4f      	ldr	r3, [pc, #316]	; (54d4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2c4>)
    5396:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    5398:	9b07      	ldr	r3, [sp, #28]
    539a:	6859      	ldr	r1, [r3, #4]
  inline int32 DimensionsCount() const { return size_; }
    539c:	9b26      	ldr	r3, [sp, #152]	; 0x98
    539e:	9316      	str	r3, [sp, #88]	; 0x58
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    53a0:	2b01      	cmp	r3, #1
    53a2:	dd60      	ble.n	5466 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x256>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    53a4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    53a6:	2b02      	cmp	r3, #2
    53a8:	d161      	bne.n	546e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x25e>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    53aa:	9b08      	ldr	r3, [sp, #32]
    53ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    53ae:	4293      	cmp	r3, r2
    53b0:	dc5f      	bgt.n	5472 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x262>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    53b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    53b4:	9315      	str	r3, [sp, #84]	; 0x54
    53b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    53b8:	9313      	str	r3, [sp, #76]	; 0x4c
    TFLITE_DCHECK_GE(i, 0);
    53ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
    53bc:	1e9a      	subs	r2, r3, #2
    53be:	d45a      	bmi.n	5476 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x266>
    TFLITE_DCHECK_LT(i, size_);
    53c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    53c2:	4293      	cmp	r3, r2
    53c4:	dd59      	ble.n	547a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x26a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    53c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    53c8:	2b05      	cmp	r3, #5
    53ca:	dc58      	bgt.n	547e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x26e>
    53cc:	ab62      	add	r3, sp, #392	; 0x188
    53ce:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    53d2:	f852 3cec 	ldr.w	r3, [r2, #-236]
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = output_shape.Dims(0);
  const int output_depth = output_shape.Dims(1);
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    53d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    53d8:	4293      	cmp	r3, r2
    53da:	db54      	blt.n	5486 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x276>
    TFLITE_DCHECK_GE(i, 0);
    53dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    53de:	1e5a      	subs	r2, r3, #1
    53e0:	d453      	bmi.n	548a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x27a>
    TFLITE_DCHECK_LT(i, size_);
    53e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    53e4:	4293      	cmp	r3, r2
    53e6:	dd52      	ble.n	548e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x27e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    53e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    53ea:	2b05      	cmp	r3, #5
    53ec:	dc51      	bgt.n	5492 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x282>
    53ee:	ab62      	add	r3, sp, #392	; 0x188
    53f0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    53f4:	f852 3cec 	ldr.w	r3, [r2, #-236]
    53f8:	9307      	str	r3, [sp, #28]
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
  for (int b = 0; b < batches; ++b) {
    53fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
    53fc:	2b00      	cmp	r3, #0
    53fe:	f340 8093 	ble.w	5528 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x318>
  op_params.output_shift = -data.output_shift;
    5402:	f1ca 0300 	rsb	r3, sl, #0
    5406:	2b00      	cmp	r3, #0
    5408:	bfd4      	ite	le
    540a:	46d4      	movle	ip, sl
    540c:	f04f 0c00 	movgt.w	ip, #0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    5410:	2201      	movs	r2, #1
    5412:	fa02 f20c 	lsl.w	r2, r2, ip
    5416:	3a01      	subs	r2, #1
    5418:	920c      	str	r2, [sp, #48]	; 0x30
  return a >> offset;
    541a:	1052      	asrs	r2, r2, #1
    541c:	9210      	str	r2, [sp, #64]	; 0x40
    541e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    5420:	9212      	str	r2, [sp, #72]	; 0x48
    5422:	eb01 0a02 	add.w	sl, r1, r2
    5426:	9a07      	ldr	r2, [sp, #28]
    5428:	9204      	str	r2, [sp, #16]
    542a:	9705      	str	r7, [sp, #20]
    542c:	2200      	movs	r2, #0
    542e:	9211      	str	r2, [sp, #68]	; 0x44
  int left_shift = shift > 0 ? shift : 0;
    5430:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5434:	930b      	str	r3, [sp, #44]	; 0x2c
  std::int64_t b_64(b);
    5436:	464a      	mov	r2, r9
    5438:	17d3      	asrs	r3, r2, #31
    543a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    543e:	e066      	b.n	550e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2fe>
  RuntimeShape() : size_(0) {}
    5440:	972c      	str	r7, [sp, #176]	; 0xb0
    5442:	e75a      	b.n	52fa <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xea>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    5444:	a82d      	add	r0, sp, #180	; 0xb4
    5446:	e753      	b.n	52f0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe0>
  RuntimeShape() : size_(0) {}
    5448:	2300      	movs	r3, #0
    544a:	9326      	str	r3, [sp, #152]	; 0x98
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    544c:	9314      	str	r3, [sp, #80]	; 0x50
    544e:	e770      	b.n	5332 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x122>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    5450:	a827      	add	r0, sp, #156	; 0x9c
    5452:	e767      	b.n	5324 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x114>
  RuntimeShape() : size_(0) {}
    5454:	9320      	str	r3, [sp, #128]	; 0x80
    5456:	9306      	str	r3, [sp, #24]
    5458:	e787      	b.n	536a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x15a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    545a:	a821      	add	r0, sp, #132	; 0x84
    545c:	e77e      	b.n	535c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x14c>
  RuntimeShape() : size_(0) {}
    545e:	931a      	str	r3, [sp, #104]	; 0x68
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    5460:	9b26      	ldr	r3, [sp, #152]	; 0x98
    5462:	2b01      	cmp	r3, #1
    5464:	dc03      	bgt.n	546e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x25e>
    5466:	4b15      	ldr	r3, [pc, #84]	; (54bc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    5468:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    546a:	a81b      	add	r0, sp, #108	; 0x6c
    546c:	e790      	b.n	5390 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x180>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    546e:	4b13      	ldr	r3, [pc, #76]	; (54bc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    5470:	4798      	blx	r3
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    5472:	4b12      	ldr	r3, [pc, #72]	; (54bc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    5474:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    5476:	4b11      	ldr	r3, [pc, #68]	; (54bc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    5478:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    547a:	4b10      	ldr	r3, [pc, #64]	; (54bc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    547c:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    547e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    5480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5484:	e7a7      	b.n	53d6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1c6>
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    5486:	4b0d      	ldr	r3, [pc, #52]	; (54bc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    5488:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    548a:	4b0c      	ldr	r3, [pc, #48]	; (54bc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    548c:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    548e:	4b0b      	ldr	r3, [pc, #44]	; (54bc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    5490:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    5492:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    5494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5498:	9307      	str	r3, [sp, #28]
    549a:	e7ae      	b.n	53fa <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
      int32 acc = 0;
    549c:	2200      	movs	r2, #0
    549e:	e3c9      	b.n	5c34 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xa24>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    54a0:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
    54a4:	f040 83cf 	bne.w	5c46 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xa36>
    54a8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    54ac:	e38c      	b.n	5bc8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x9b8>
  assert(exponent >= 0);
    54ae:	4b0a      	ldr	r3, [pc, #40]	; (54d8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2c8>)
    54b0:	4a0a      	ldr	r2, [pc, #40]	; (54dc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2cc>)
    54b2:	f44f 71b3 	mov.w	r1, #358	; 0x166
    54b6:	480a      	ldr	r0, [pc, #40]	; (54e0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2d0>)
    54b8:	4c0a      	ldr	r4, [pc, #40]	; (54e4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2d4>)
    54ba:	47a0      	blx	r4
    54bc:	00014b3d 	.word	0x00014b3d
    54c0:	0000a3c5 	.word	0x0000a3c5
    54c4:	0002207c 	.word	0x0002207c
    54c8:	00004ebd 	.word	0x00004ebd
    54cc:	1ffffffe 	.word	0x1ffffffe
    54d0:	0000a511 	.word	0x0000a511
    54d4:	000158c1 	.word	0x000158c1
    54d8:	0002202c 	.word	0x0002202c
    54dc:	000221cc 	.word	0x000221cc
    54e0:	0002203c 	.word	0x0002203c
    54e4:	00014b4d 	.word	0x00014b4d
  assert(exponent <= 31);
    54e8:	4ba4      	ldr	r3, [pc, #656]	; (577c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x56c>)
    54ea:	4aa5      	ldr	r2, [pc, #660]	; (5780 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x570>)
    54ec:	f240 1167 	movw	r1, #359	; 0x167
    54f0:	48a4      	ldr	r0, [pc, #656]	; (5784 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x574>)
    54f2:	4ca5      	ldr	r4, [pc, #660]	; (5788 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x578>)
    54f4:	47a0      	blx	r4
  for (int b = 0; b < batches; ++b) {
    54f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    54f8:	3301      	adds	r3, #1
    54fa:	9311      	str	r3, [sp, #68]	; 0x44
    54fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    54fe:	4492      	add	sl, r2
    5500:	9a05      	ldr	r2, [sp, #20]
    5502:	9904      	ldr	r1, [sp, #16]
    5504:	440a      	add	r2, r1
    5506:	9205      	str	r2, [sp, #20]
    5508:	9a15      	ldr	r2, [sp, #84]	; 0x54
    550a:	4293      	cmp	r3, r2
    550c:	d00c      	beq.n	5528 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x318>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    550e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    5510:	2b00      	cmp	r3, #0
    5512:	ddf0      	ble.n	54f6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2e6>
    5514:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5516:	ebaa 0503 	sub.w	r5, sl, r3
    551a:	9806      	ldr	r0, [sp, #24]
    551c:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
    5520:	9b04      	ldr	r3, [sp, #16]
    5522:	9a05      	ldr	r2, [sp, #20]
    5524:	1899      	adds	r1, r3, r2
    5526:	e373      	b.n	5c10 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xa00>
    if (size_ > kMaxSmallSize) {
    5528:	9b20      	ldr	r3, [sp, #128]	; 0x80
    552a:	2b05      	cmp	r3, #5
    552c:	dd03      	ble.n	5536 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x326>
      delete[] dims_pointer_;
    552e:	9821      	ldr	r0, [sp, #132]	; 0x84
    5530:	b108      	cbz	r0, 5536 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x326>
    5532:	4b96      	ldr	r3, [pc, #600]	; (578c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x57c>)
    5534:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    5536:	9b16      	ldr	r3, [sp, #88]	; 0x58
    5538:	2b05      	cmp	r3, #5
    553a:	dd03      	ble.n	5544 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x334>
      delete[] dims_pointer_;
    553c:	9827      	ldr	r0, [sp, #156]	; 0x9c
    553e:	b108      	cbz	r0, 5544 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x334>
    5540:	4b92      	ldr	r3, [pc, #584]	; (578c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x57c>)
    5542:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    5544:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    5546:	2b05      	cmp	r3, #5
    5548:	dd03      	ble.n	5552 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x342>
      delete[] dims_pointer_;
    554a:	982d      	ldr	r0, [sp, #180]	; 0xb4
    554c:	b108      	cbz	r0, 5552 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x342>
    554e:	4b8f      	ldr	r3, [pc, #572]	; (578c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x57c>)
    5550:	4798      	blx	r3
                               output);
    5552:	2000      	movs	r0, #0
    5554:	e6a7      	b.n	52a6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x96>
  const int32_t input_offset = -input->params.zero_point;
    5556:	693d      	ldr	r5, [r7, #16]
  const int32_t filter_offset = -filter->params.zero_point;
    5558:	f8db a010 	ldr.w	sl, [fp, #16]
  const int32_t output_offset = output->params.zero_point;
    555c:	9a07      	ldr	r2, [sp, #28]
    555e:	6912      	ldr	r2, [r2, #16]
    5560:	920a      	str	r2, [sp, #40]	; 0x28
  op_params.output_multiplier = data.output_multiplier;
    5562:	681a      	ldr	r2, [r3, #0]
    5564:	9216      	str	r2, [sp, #88]	; 0x58
  op_params.output_shift = -data.output_shift;
    5566:	f8d3 9004 	ldr.w	r9, [r3, #4]
    556a:	f1c9 0800 	rsb	r8, r9, #0
  op_params.quantized_activation_min = data.output_activation_min;
    556e:	689a      	ldr	r2, [r3, #8]
    5570:	9204      	str	r2, [sp, #16]
  op_params.quantized_activation_max = data.output_activation_max;
    5572:	68db      	ldr	r3, [r3, #12]
    5574:	9305      	str	r3, [sp, #20]
  switch (output->type) {
    5576:	9b08      	ldr	r3, [sp, #32]
    5578:	5ce0      	ldrb	r0, [r4, r3]
    557a:	2803      	cmp	r0, #3
    557c:	d00d      	beq.n	559a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x38a>
    557e:	2807      	cmp	r0, #7
    5580:	f000 8198 	beq.w	58b4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6a4>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    5584:	6977      	ldr	r7, [r6, #20]
    5586:	4b82      	ldr	r3, [pc, #520]	; (5790 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x580>)
    5588:	4798      	blx	r3
    558a:	9b08      	ldr	r3, [sp, #32]
    558c:	5ce3      	ldrb	r3, [r4, r3]
    558e:	4602      	mov	r2, r0
    5590:	4980      	ldr	r1, [pc, #512]	; (5794 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x584>)
    5592:	4630      	mov	r0, r6
    5594:	47b8      	blx	r7
      return kTfLiteError;
    5596:	2001      	movs	r0, #1
      return EvalQuantized(context, node, data, input, filter, bias, output);
    5598:	e685      	b.n	52a6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x96>
  if (tensor == nullptr) {
    559a:	2f00      	cmp	r7, #0
    559c:	f000 80e3 	beq.w	5766 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x556>
  const int dims_size = dims->size;
    55a0:	68be      	ldr	r6, [r7, #8]
    55a2:	f856 4b04 	ldr.w	r4, [r6], #4
    size_ = dimensions_count;
    55a6:	945c      	str	r4, [sp, #368]	; 0x170
    if (dimensions_count > kMaxSmallSize) {
    55a8:	2c05      	cmp	r4, #5
    55aa:	f340 80df 	ble.w	576c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x55c>
      dims_pointer_ = new int32[dimensions_count];
    55ae:	4b7a      	ldr	r3, [pc, #488]	; (5798 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x588>)
    55b0:	429c      	cmp	r4, r3
    55b2:	bf94      	ite	ls
    55b4:	00a0      	lslls	r0, r4, #2
    55b6:	f04f 30ff 	movhi.w	r0, #4294967295
    55ba:	4b78      	ldr	r3, [pc, #480]	; (579c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    55bc:	4798      	blx	r3
    55be:	905d      	str	r0, [sp, #372]	; 0x174
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    55c0:	00a2      	lsls	r2, r4, #2
    55c2:	4631      	mov	r1, r6
    55c4:	4b76      	ldr	r3, [pc, #472]	; (57a0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x590>)
    55c6:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    55c8:	687e      	ldr	r6, [r7, #4]
  if (tensor == nullptr) {
    55ca:	f1bb 0f00 	cmp.w	fp, #0
    55ce:	f000 80cf 	beq.w	5770 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x560>
  const int dims_size = dims->size;
    55d2:	f8db 7008 	ldr.w	r7, [fp, #8]
    55d6:	f857 4b04 	ldr.w	r4, [r7], #4
    size_ = dimensions_count;
    55da:	9456      	str	r4, [sp, #344]	; 0x158
    if (dimensions_count > kMaxSmallSize) {
    55dc:	2c05      	cmp	r4, #5
    55de:	f340 80cb 	ble.w	5778 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x568>
      dims_pointer_ = new int32[dimensions_count];
    55e2:	4b6d      	ldr	r3, [pc, #436]	; (5798 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x588>)
    55e4:	429c      	cmp	r4, r3
    55e6:	bf94      	ite	ls
    55e8:	00a0      	lslls	r0, r4, #2
    55ea:	f04f 30ff 	movhi.w	r0, #4294967295
    55ee:	4b6b      	ldr	r3, [pc, #428]	; (579c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    55f0:	4798      	blx	r3
    55f2:	9057      	str	r0, [sp, #348]	; 0x15c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    55f4:	00a2      	lsls	r2, r4, #2
    55f6:	4639      	mov	r1, r7
    55f8:	4b69      	ldr	r3, [pc, #420]	; (57a0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x590>)
    55fa:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    55fc:	f8db 3004 	ldr.w	r3, [fp, #4]
    5600:	9317      	str	r3, [sp, #92]	; 0x5c
  if (tensor == nullptr) {
    5602:	9b06      	ldr	r3, [sp, #24]
    5604:	2b00      	cmp	r3, #0
    5606:	f000 80cd 	beq.w	57a4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x594>
  const int dims_size = dims->size;
    560a:	9b06      	ldr	r3, [sp, #24]
    560c:	689f      	ldr	r7, [r3, #8]
    560e:	f857 4b04 	ldr.w	r4, [r7], #4
    size_ = dimensions_count;
    5612:	9450      	str	r4, [sp, #320]	; 0x140
    if (dimensions_count > kMaxSmallSize) {
    5614:	2c05      	cmp	r4, #5
    5616:	f340 80c8 	ble.w	57aa <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x59a>
      dims_pointer_ = new int32[dimensions_count];
    561a:	4b5f      	ldr	r3, [pc, #380]	; (5798 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x588>)
    561c:	429c      	cmp	r4, r3
    561e:	bf94      	ite	ls
    5620:	00a0      	lslls	r0, r4, #2
    5622:	f04f 30ff 	movhi.w	r0, #4294967295
    5626:	4b5d      	ldr	r3, [pc, #372]	; (579c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    5628:	4798      	blx	r3
    562a:	9051      	str	r0, [sp, #324]	; 0x144
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    562c:	00a2      	lsls	r2, r4, #2
    562e:	4639      	mov	r1, r7
    5630:	4b5b      	ldr	r3, [pc, #364]	; (57a0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x590>)
    5632:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    5634:	9b06      	ldr	r3, [sp, #24]
    5636:	685b      	ldr	r3, [r3, #4]
    5638:	9308      	str	r3, [sp, #32]
  if (tensor == nullptr) {
    563a:	9b07      	ldr	r3, [sp, #28]
    563c:	2b00      	cmp	r3, #0
    563e:	f000 80b6 	beq.w	57ae <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x59e>
  const int dims_size = dims->size;
    5642:	9b07      	ldr	r3, [sp, #28]
    5644:	689f      	ldr	r7, [r3, #8]
    5646:	f857 4b04 	ldr.w	r4, [r7], #4
    size_ = dimensions_count;
    564a:	944a      	str	r4, [sp, #296]	; 0x128
    if (dimensions_count > kMaxSmallSize) {
    564c:	2c05      	cmp	r4, #5
    564e:	f340 80b4 	ble.w	57ba <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5aa>
      dims_pointer_ = new int32[dimensions_count];
    5652:	4b51      	ldr	r3, [pc, #324]	; (5798 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x588>)
    5654:	429c      	cmp	r4, r3
    5656:	bf94      	ite	ls
    5658:	00a0      	lslls	r0, r4, #2
    565a:	f04f 30ff 	movhi.w	r0, #4294967295
    565e:	4b4f      	ldr	r3, [pc, #316]	; (579c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    5660:	4798      	blx	r3
    5662:	904b      	str	r0, [sp, #300]	; 0x12c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    5664:	00a2      	lsls	r2, r4, #2
    5666:	4639      	mov	r1, r7
    5668:	4b4d      	ldr	r3, [pc, #308]	; (57a0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x590>)
    566a:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    566c:	9b07      	ldr	r3, [sp, #28]
    566e:	685c      	ldr	r4, [r3, #4]
  inline int32 DimensionsCount() const { return size_; }
    5670:	9b56      	ldr	r3, [sp, #344]	; 0x158
    5672:	9311      	str	r3, [sp, #68]	; 0x44
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    5674:	2b01      	cmp	r3, #1
    5676:	f340 809e 	ble.w	57b6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5a6>
    567a:	9a4a      	ldr	r2, [sp, #296]	; 0x128
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
    567c:	2a00      	cmp	r2, #0
    567e:	f340 809e 	ble.w	57be <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5ae>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    5682:	9b04      	ldr	r3, [sp, #16]
    5684:	9905      	ldr	r1, [sp, #20]
    5686:	428b      	cmp	r3, r1
    5688:	f300 809b 	bgt.w	57c2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5b2>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    568c:	1e53      	subs	r3, r2, #1
    568e:	f100 809a 	bmi.w	57c6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5b6>
    5692:	429a      	cmp	r2, r3
    5694:	f340 8097 	ble.w	57c6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5b6>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    5698:	2a05      	cmp	r2, #5
    569a:	bfcc      	ite	gt
    569c:	984b      	ldrgt	r0, [sp, #300]	; 0x12c
    569e:	a84b      	addle	r0, sp, #300	; 0x12c
    56a0:	2101      	movs	r1, #1
    56a2:	9113      	str	r1, [sp, #76]	; 0x4c
    56a4:	2700      	movs	r7, #0
    56a6:	4639      	mov	r1, r7
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    56a8:	2701      	movs	r7, #1
    56aa:	469c      	mov	ip, r3
    56ac:	46be      	mov	lr, r7
    56ae:	4561      	cmp	r1, ip
    56b0:	bf14      	ite	ne
    56b2:	f850 3021 	ldrne.w	r3, [r0, r1, lsl #2]
    56b6:	463b      	moveq	r3, r7
    56b8:	fb03 fe0e 	mul.w	lr, r3, lr
  for (int i = 0; i < dims_count; ++i) {
    56bc:	3101      	adds	r1, #1
    56be:	428a      	cmp	r2, r1
    56c0:	d1f5      	bne.n	56ae <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x49e>
    56c2:	9118      	str	r1, [sp, #96]	; 0x60
    56c4:	4663      	mov	r3, ip
    56c6:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
    TFLITE_DCHECK_GE(i, 0);
    56ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
    56cc:	1e91      	subs	r1, r2, #2
    56ce:	d47c      	bmi.n	57ca <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5ba>
    TFLITE_DCHECK_LT(i, size_);
    56d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    56d2:	428a      	cmp	r2, r1
    56d4:	dd7b      	ble.n	57ce <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5be>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    56d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    56d8:	2a05      	cmp	r2, #5
    56da:	dc7a      	bgt.n	57d2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5c2>
    56dc:	aa62      	add	r2, sp, #392	; 0x188
    56de:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    56e2:	f851 1c2c 	ldr.w	r1, [r1, #-44]
    56e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    56e8:	2a05      	cmp	r2, #5
    56ea:	dc76      	bgt.n	57da <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5ca>
    56ec:	aa62      	add	r2, sp, #392	; 0x188
    56ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    56f2:	f853 3c5c 	ldr.w	r3, [r3, #-92]
    56f6:	9314      	str	r3, [sp, #80]	; 0x50
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    56f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    56fa:	428b      	cmp	r3, r1
    56fc:	d172      	bne.n	57e4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5d4>
    TFLITE_DCHECK_GE(i, 0);
    56fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5700:	1e5a      	subs	r2, r3, #1
    5702:	d471      	bmi.n	57e8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5d8>
    TFLITE_DCHECK_LT(i, size_);
    5704:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5706:	4293      	cmp	r3, r2
    5708:	dd70      	ble.n	57ec <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5dc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    570a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    570c:	2b05      	cmp	r3, #5
    570e:	dc6f      	bgt.n	57f0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5e0>
    5710:	ab62      	add	r3, sp, #392	; 0x188
    5712:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    5716:	f852 3c2c 	ldr.w	r3, [r2, #-44]
    571a:	9309      	str	r3, [sp, #36]	; 0x24
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
  for (int b = 0; b < batches; ++b) {
    571c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    571e:	2b00      	cmp	r3, #0
    5720:	f340 809b 	ble.w	585a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x64a>
    5724:	f1b8 0f00 	cmp.w	r8, #0
    5728:	bfd4      	ite	le
    572a:	4648      	movle	r0, r9
    572c:	2000      	movgt	r0, #0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    572e:	2301      	movs	r3, #1
    5730:	4083      	lsls	r3, r0
    5732:	3b01      	subs	r3, #1
    5734:	930c      	str	r3, [sp, #48]	; 0x30
  return a >> offset;
    5736:	105b      	asrs	r3, r3, #1
    5738:	9310      	str	r3, [sp, #64]	; 0x40
    573a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    573c:	9315      	str	r3, [sp, #84]	; 0x54
    573e:	eb04 0c03 	add.w	ip, r4, r3
    5742:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    5746:	9606      	str	r6, [sp, #24]
    5748:	2300      	movs	r3, #0
    574a:	9312      	str	r3, [sp, #72]	; 0x48
    574c:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
    5750:	930b      	str	r3, [sp, #44]	; 0x2c
  std::int64_t b_64(b);
    5752:	9a16      	ldr	r2, [sp, #88]	; 0x58
    5754:	4616      	mov	r6, r2
    5756:	17d7      	asrs	r7, r2, #31
    5758:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    575c:	f8cd 901c 	str.w	r9, [sp, #28]
    5760:	46e1      	mov	r9, ip
    5762:	4694      	mov	ip, r2
    5764:	e06c      	b.n	5840 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x630>
  RuntimeShape() : size_(0) {}
    5766:	2600      	movs	r6, #0
    5768:	965c      	str	r6, [sp, #368]	; 0x170
    576a:	e72e      	b.n	55ca <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3ba>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    576c:	a85d      	add	r0, sp, #372	; 0x174
    576e:	e727      	b.n	55c0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3b0>
  RuntimeShape() : size_(0) {}
    5770:	2300      	movs	r3, #0
    5772:	9356      	str	r3, [sp, #344]	; 0x158
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    5774:	9317      	str	r3, [sp, #92]	; 0x5c
    5776:	e744      	b.n	5602 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3f2>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    5778:	a857      	add	r0, sp, #348	; 0x15c
    577a:	e73b      	b.n	55f4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3e4>
    577c:	0002206c 	.word	0x0002206c
    5780:	000221cc 	.word	0x000221cc
    5784:	0002203c 	.word	0x0002203c
    5788:	00014b4d 	.word	0x00014b4d
    578c:	0000a461 	.word	0x0000a461
    5790:	0000a3c5 	.word	0x0000a3c5
    5794:	0002207c 	.word	0x0002207c
    5798:	1ffffffe 	.word	0x1ffffffe
    579c:	0000a511 	.word	0x0000a511
    57a0:	000158c1 	.word	0x000158c1
  RuntimeShape() : size_(0) {}
    57a4:	9350      	str	r3, [sp, #320]	; 0x140
    57a6:	9308      	str	r3, [sp, #32]
    57a8:	e747      	b.n	563a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x42a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    57aa:	a851      	add	r0, sp, #324	; 0x144
    57ac:	e73e      	b.n	562c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x41c>
  RuntimeShape() : size_(0) {}
    57ae:	934a      	str	r3, [sp, #296]	; 0x128
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    57b0:	9b56      	ldr	r3, [sp, #344]	; 0x158
    57b2:	2b01      	cmp	r3, #1
    57b4:	dc03      	bgt.n	57be <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5ae>
    57b6:	4b38      	ldr	r3, [pc, #224]	; (5898 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x688>)
    57b8:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    57ba:	a84b      	add	r0, sp, #300	; 0x12c
    57bc:	e752      	b.n	5664 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x454>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
    57be:	4b36      	ldr	r3, [pc, #216]	; (5898 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x688>)
    57c0:	4798      	blx	r3
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    57c2:	4b35      	ldr	r3, [pc, #212]	; (5898 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x688>)
    57c4:	4798      	blx	r3
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    57c6:	4b34      	ldr	r3, [pc, #208]	; (5898 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x688>)
    57c8:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    57ca:	4b33      	ldr	r3, [pc, #204]	; (5898 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x688>)
    57cc:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    57ce:	4b32      	ldr	r3, [pc, #200]	; (5898 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x688>)
    57d0:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    57d2:	9a57      	ldr	r2, [sp, #348]	; 0x15c
    57d4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    57d8:	e785      	b.n	56e6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x4d6>
    57da:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
    57dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    57e0:	9314      	str	r3, [sp, #80]	; 0x50
    57e2:	e789      	b.n	56f8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x4e8>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    57e4:	4b2c      	ldr	r3, [pc, #176]	; (5898 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x688>)
    57e6:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    57e8:	4b2b      	ldr	r3, [pc, #172]	; (5898 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x688>)
    57ea:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    57ec:	4b2a      	ldr	r3, [pc, #168]	; (5898 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x688>)
    57ee:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    57f0:	9b57      	ldr	r3, [sp, #348]	; 0x15c
    57f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    57f6:	9309      	str	r3, [sp, #36]	; 0x24
    57f8:	e790      	b.n	571c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x50c>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
      int32 acc = 0;
    57fa:	2200      	movs	r2, #0
    57fc:	e277      	b.n	5cee <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xade>
    57fe:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    5802:	f040 827d 	bne.w	5d00 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xaf0>
    5806:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    580a:	e23d      	b.n	5c88 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xa78>
  assert(exponent >= 0);
    580c:	4b23      	ldr	r3, [pc, #140]	; (589c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x68c>)
    580e:	4a24      	ldr	r2, [pc, #144]	; (58a0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x690>)
    5810:	f44f 71b3 	mov.w	r1, #358	; 0x166
    5814:	4823      	ldr	r0, [pc, #140]	; (58a4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x694>)
    5816:	4c24      	ldr	r4, [pc, #144]	; (58a8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x698>)
    5818:	47a0      	blx	r4
  assert(exponent <= 31);
    581a:	4b24      	ldr	r3, [pc, #144]	; (58ac <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x69c>)
    581c:	4a20      	ldr	r2, [pc, #128]	; (58a0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x690>)
    581e:	f240 1167 	movw	r1, #359	; 0x167
    5822:	4820      	ldr	r0, [pc, #128]	; (58a4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x694>)
    5824:	4c20      	ldr	r4, [pc, #128]	; (58a8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x698>)
    5826:	47a0      	blx	r4
  for (int b = 0; b < batches; ++b) {
    5828:	9b12      	ldr	r3, [sp, #72]	; 0x48
    582a:	3301      	adds	r3, #1
    582c:	9312      	str	r3, [sp, #72]	; 0x48
    582e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    5830:	4491      	add	r9, r2
    5832:	9a06      	ldr	r2, [sp, #24]
    5834:	9907      	ldr	r1, [sp, #28]
    5836:	440a      	add	r2, r1
    5838:	9206      	str	r2, [sp, #24]
    583a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    583c:	4293      	cmp	r3, r2
    583e:	d00c      	beq.n	585a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x64a>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    5840:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5842:	2b00      	cmp	r3, #0
    5844:	ddf0      	ble.n	5828 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x618>
    5846:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5848:	eba9 0e03 	sub.w	lr, r9, r3
    584c:	9c08      	ldr	r4, [sp, #32]
    584e:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    5852:	9b06      	ldr	r3, [sp, #24]
    5854:	9a07      	ldr	r2, [sp, #28]
    5856:	1899      	adds	r1, r3, r2
    5858:	e237      	b.n	5cca <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xaba>
    if (size_ > kMaxSmallSize) {
    585a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    585c:	2b05      	cmp	r3, #5
    585e:	dd03      	ble.n	5868 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x658>
      delete[] dims_pointer_;
    5860:	984b      	ldr	r0, [sp, #300]	; 0x12c
    5862:	b108      	cbz	r0, 5868 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x658>
    5864:	4b12      	ldr	r3, [pc, #72]	; (58b0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6a0>)
    5866:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    5868:	9b50      	ldr	r3, [sp, #320]	; 0x140
    586a:	2b05      	cmp	r3, #5
    586c:	dd03      	ble.n	5876 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x666>
      delete[] dims_pointer_;
    586e:	9851      	ldr	r0, [sp, #324]	; 0x144
    5870:	b108      	cbz	r0, 5876 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x666>
    5872:	4b0f      	ldr	r3, [pc, #60]	; (58b0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6a0>)
    5874:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    5876:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5878:	2b05      	cmp	r3, #5
    587a:	dd03      	ble.n	5884 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x674>
      delete[] dims_pointer_;
    587c:	9857      	ldr	r0, [sp, #348]	; 0x15c
    587e:	b108      	cbz	r0, 5884 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x674>
    5880:	4b0b      	ldr	r3, [pc, #44]	; (58b0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6a0>)
    5882:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    5884:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    5886:	2b05      	cmp	r3, #5
    5888:	dd03      	ble.n	5892 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x682>
      delete[] dims_pointer_;
    588a:	985d      	ldr	r0, [sp, #372]	; 0x174
    588c:	b108      	cbz	r0, 5892 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x682>
    588e:	4b08      	ldr	r3, [pc, #32]	; (58b0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6a0>)
    5890:	4798      	blx	r3
  return kTfLiteOk;
    5892:	2000      	movs	r0, #0
    5894:	e507      	b.n	52a6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x96>
    5896:	bf00      	nop
    5898:	00014b3d 	.word	0x00014b3d
    589c:	0002202c 	.word	0x0002202c
    58a0:	000221cc 	.word	0x000221cc
    58a4:	0002203c 	.word	0x0002203c
    58a8:	00014b4d 	.word	0x00014b4d
    58ac:	0002206c 	.word	0x0002206c
    58b0:	0000a461 	.word	0x0000a461
  if (tensor == nullptr) {
    58b4:	2f00      	cmp	r7, #0
    58b6:	f000 80e6 	beq.w	5a86 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x876>
  const int dims_size = dims->size;
    58ba:	68be      	ldr	r6, [r7, #8]
    58bc:	f856 4b04 	ldr.w	r4, [r6], #4
    size_ = dimensions_count;
    58c0:	9444      	str	r4, [sp, #272]	; 0x110
    if (dimensions_count > kMaxSmallSize) {
    58c2:	2c05      	cmp	r4, #5
    58c4:	f340 80e2 	ble.w	5a8c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x87c>
      dims_pointer_ = new int32[dimensions_count];
    58c8:	4b94      	ldr	r3, [pc, #592]	; (5b1c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x90c>)
    58ca:	429c      	cmp	r4, r3
    58cc:	bf94      	ite	ls
    58ce:	00a0      	lslls	r0, r4, #2
    58d0:	f04f 30ff 	movhi.w	r0, #4294967295
    58d4:	4b92      	ldr	r3, [pc, #584]	; (5b20 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x910>)
    58d6:	4798      	blx	r3
    58d8:	9045      	str	r0, [sp, #276]	; 0x114
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    58da:	00a2      	lsls	r2, r4, #2
    58dc:	4631      	mov	r1, r6
    58de:	4b91      	ldr	r3, [pc, #580]	; (5b24 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x914>)
    58e0:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    58e2:	687e      	ldr	r6, [r7, #4]
  if (tensor == nullptr) {
    58e4:	f1bb 0f00 	cmp.w	fp, #0
    58e8:	f000 80d2 	beq.w	5a90 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x880>
  const int dims_size = dims->size;
    58ec:	f8db 7008 	ldr.w	r7, [fp, #8]
    58f0:	f857 4b04 	ldr.w	r4, [r7], #4
    size_ = dimensions_count;
    58f4:	943e      	str	r4, [sp, #248]	; 0xf8
    if (dimensions_count > kMaxSmallSize) {
    58f6:	2c05      	cmp	r4, #5
    58f8:	f340 80ce 	ble.w	5a98 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x888>
      dims_pointer_ = new int32[dimensions_count];
    58fc:	4b87      	ldr	r3, [pc, #540]	; (5b1c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x90c>)
    58fe:	429c      	cmp	r4, r3
    5900:	bf94      	ite	ls
    5902:	00a0      	lslls	r0, r4, #2
    5904:	f04f 30ff 	movhi.w	r0, #4294967295
    5908:	4b85      	ldr	r3, [pc, #532]	; (5b20 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x910>)
    590a:	4798      	blx	r3
    590c:	903f      	str	r0, [sp, #252]	; 0xfc
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    590e:	00a2      	lsls	r2, r4, #2
    5910:	4639      	mov	r1, r7
    5912:	4b84      	ldr	r3, [pc, #528]	; (5b24 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x914>)
    5914:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    5916:	f8db 3004 	ldr.w	r3, [fp, #4]
    591a:	9317      	str	r3, [sp, #92]	; 0x5c
  if (tensor == nullptr) {
    591c:	9b06      	ldr	r3, [sp, #24]
    591e:	2b00      	cmp	r3, #0
    5920:	f000 80bc 	beq.w	5a9c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x88c>
  const int dims_size = dims->size;
    5924:	9b06      	ldr	r3, [sp, #24]
    5926:	689f      	ldr	r7, [r3, #8]
    5928:	f857 4b04 	ldr.w	r4, [r7], #4
    size_ = dimensions_count;
    592c:	9438      	str	r4, [sp, #224]	; 0xe0
    if (dimensions_count > kMaxSmallSize) {
    592e:	2c05      	cmp	r4, #5
    5930:	f340 80b7 	ble.w	5aa2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x892>
      dims_pointer_ = new int32[dimensions_count];
    5934:	4b79      	ldr	r3, [pc, #484]	; (5b1c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x90c>)
    5936:	429c      	cmp	r4, r3
    5938:	bf94      	ite	ls
    593a:	00a0      	lslls	r0, r4, #2
    593c:	f04f 30ff 	movhi.w	r0, #4294967295
    5940:	4b77      	ldr	r3, [pc, #476]	; (5b20 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x910>)
    5942:	4798      	blx	r3
    5944:	9039      	str	r0, [sp, #228]	; 0xe4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    5946:	00a2      	lsls	r2, r4, #2
    5948:	4639      	mov	r1, r7
    594a:	4b76      	ldr	r3, [pc, #472]	; (5b24 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x914>)
    594c:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    594e:	9b06      	ldr	r3, [sp, #24]
    5950:	685b      	ldr	r3, [r3, #4]
    5952:	9318      	str	r3, [sp, #96]	; 0x60
  if (tensor == nullptr) {
    5954:	9b07      	ldr	r3, [sp, #28]
    5956:	2b00      	cmp	r3, #0
    5958:	f000 80a5 	beq.w	5aa6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x896>
  const int dims_size = dims->size;
    595c:	9b07      	ldr	r3, [sp, #28]
    595e:	689f      	ldr	r7, [r3, #8]
    5960:	f857 4b04 	ldr.w	r4, [r7], #4
    size_ = dimensions_count;
    5964:	9432      	str	r4, [sp, #200]	; 0xc8
    if (dimensions_count > kMaxSmallSize) {
    5966:	2c05      	cmp	r4, #5
    5968:	f340 80a0 	ble.w	5aac <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x89c>
      dims_pointer_ = new int32[dimensions_count];
    596c:	4b6b      	ldr	r3, [pc, #428]	; (5b1c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x90c>)
    596e:	429c      	cmp	r4, r3
    5970:	bf94      	ite	ls
    5972:	00a0      	lslls	r0, r4, #2
    5974:	f04f 30ff 	movhi.w	r0, #4294967295
    5978:	4b69      	ldr	r3, [pc, #420]	; (5b20 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x910>)
    597a:	4798      	blx	r3
    597c:	9033      	str	r0, [sp, #204]	; 0xcc
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    597e:	00a2      	lsls	r2, r4, #2
    5980:	4639      	mov	r1, r7
    5982:	4b68      	ldr	r3, [pc, #416]	; (5b24 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x914>)
    5984:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    5986:	9b07      	ldr	r3, [sp, #28]
    5988:	685c      	ldr	r4, [r3, #4]
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    598a:	9b04      	ldr	r3, [sp, #16]
    598c:	9a05      	ldr	r2, [sp, #20]
    598e:	4293      	cmp	r3, r2
    5990:	f300 808e 	bgt.w	5ab0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8a0>
  TFLITE_DCHECK_EQ(output_offset, 0);
    5994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5996:	2b00      	cmp	r3, #0
    5998:	f040 808c 	bne.w	5ab4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8a4>
  inline int32 DimensionsCount() const { return size_; }
    599c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    599e:	9315      	str	r3, [sp, #84]	; 0x54
    59a0:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    59a2:	9211      	str	r2, [sp, #68]	; 0x44
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    59a4:	1e5a      	subs	r2, r3, #1
    59a6:	f100 8087 	bmi.w	5ab8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8a8>
    59aa:	4293      	cmp	r3, r2
    59ac:	f340 8084 	ble.w	5ab8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8a8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    59b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    59b2:	2b05      	cmp	r3, #5
    59b4:	bfcc      	ite	gt
    59b6:	9833      	ldrgt	r0, [sp, #204]	; 0xcc
    59b8:	a833      	addle	r0, sp, #204	; 0xcc
  for (int i = 0; i < dims_count; ++i) {
    59ba:	9915      	ldr	r1, [sp, #84]	; 0x54
    59bc:	2900      	cmp	r1, #0
    59be:	dd7d      	ble.n	5abc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8ac>
    59c0:	2301      	movs	r3, #1
    59c2:	930e      	str	r3, [sp, #56]	; 0x38
    59c4:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    59c6:	2701      	movs	r7, #1
    59c8:	46be      	mov	lr, r7
    59ca:	468c      	mov	ip, r1
    59cc:	4293      	cmp	r3, r2
    59ce:	bf14      	ite	ne
    59d0:	f850 1023 	ldrne.w	r1, [r0, r3, lsl #2]
    59d4:	4639      	moveq	r1, r7
    59d6:	fb01 fe0e 	mul.w	lr, r1, lr
  for (int i = 0; i < dims_count; ++i) {
    59da:	3301      	adds	r3, #1
    59dc:	459c      	cmp	ip, r3
    59de:	d1f5      	bne.n	59cc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x7bc>
    59e0:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    TFLITE_DCHECK_GE(i, 0);
    59e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    59e6:	1e99      	subs	r1, r3, #2
    59e8:	d46b      	bmi.n	5ac2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8b2>
    TFLITE_DCHECK_LT(i, size_);
    59ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    59ec:	428b      	cmp	r3, r1
    59ee:	dd6a      	ble.n	5ac6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8b6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    59f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    59f2:	2b05      	cmp	r3, #5
    59f4:	dc69      	bgt.n	5aca <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8ba>
    59f6:	ab62      	add	r3, sp, #392	; 0x188
    59f8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    59fc:	f851 1c8c 	ldr.w	r1, [r1, #-140]
    5a00:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5a02:	2b05      	cmp	r3, #5
    5a04:	dc65      	bgt.n	5ad2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8c2>
    5a06:	ab62      	add	r3, sp, #392	; 0x188
    5a08:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    5a0c:	f852 3cbc 	ldr.w	r3, [r2, #-188]
    5a10:	9313      	str	r3, [sp, #76]	; 0x4c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    5a12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    5a14:	428b      	cmp	r3, r1
    5a16:	d161      	bne.n	5adc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8cc>
    TFLITE_DCHECK_GE(i, 0);
    5a18:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5a1a:	1e5a      	subs	r2, r3, #1
    5a1c:	d460      	bmi.n	5ae0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8d0>
    TFLITE_DCHECK_LT(i, size_);
    5a1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5a20:	4293      	cmp	r3, r2
    5a22:	dd5f      	ble.n	5ae4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8d4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    5a24:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5a26:	2b05      	cmp	r3, #5
    5a28:	dc5e      	bgt.n	5ae8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8d8>
    5a2a:	ab62      	add	r3, sp, #392	; 0x188
    5a2c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    5a30:	f852 3c8c 	ldr.w	r3, [r2, #-140]
    5a34:	9307      	str	r3, [sp, #28]
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
  for (int b = 0; b < batches; ++b) {
    5a36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5a38:	2b00      	cmp	r3, #0
    5a3a:	f340 80a3 	ble.w	5b84 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x974>
    5a3e:	f1b8 0f00 	cmp.w	r8, #0
    5a42:	bfd4      	ite	le
    5a44:	46cc      	movle	ip, r9
    5a46:	f04f 0c00 	movgt.w	ip, #0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    5a4a:	2301      	movs	r3, #1
    5a4c:	fa03 f30c 	lsl.w	r3, r3, ip
    5a50:	3b01      	subs	r3, #1
    5a52:	9309      	str	r3, [sp, #36]	; 0x24
  return a >> offset;
    5a54:	105b      	asrs	r3, r3, #1
    5a56:	930a      	str	r3, [sp, #40]	; 0x28
    5a58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    5a5a:	005b      	lsls	r3, r3, #1
    5a5c:	9314      	str	r3, [sp, #80]	; 0x50
    5a5e:	9410      	str	r4, [sp, #64]	; 0x40
    5a60:	9b07      	ldr	r3, [sp, #28]
    5a62:	4619      	mov	r1, r3
    5a64:	9606      	str	r6, [sp, #24]
    5a66:	2300      	movs	r3, #0
    5a68:	9312      	str	r3, [sp, #72]	; 0x48
    5a6a:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
    5a6e:	930b      	str	r3, [sp, #44]	; 0x2c
  std::int64_t b_64(b);
    5a70:	9a16      	ldr	r2, [sp, #88]	; 0x58
    5a72:	4616      	mov	r6, r2
    5a74:	17d7      	asrs	r7, r2, #31
    5a76:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    5a7a:	9516      	str	r5, [sp, #88]	; 0x58
    5a7c:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
    5a80:	468a      	mov	sl, r1
    5a82:	4696      	mov	lr, r2
    5a84:	e069      	b.n	5b5a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x94a>
  RuntimeShape() : size_(0) {}
    5a86:	2600      	movs	r6, #0
    5a88:	9644      	str	r6, [sp, #272]	; 0x110
    5a8a:	e72b      	b.n	58e4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6d4>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    5a8c:	a845      	add	r0, sp, #276	; 0x114
    5a8e:	e724      	b.n	58da <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6ca>
  RuntimeShape() : size_(0) {}
    5a90:	2300      	movs	r3, #0
    5a92:	933e      	str	r3, [sp, #248]	; 0xf8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    5a94:	9317      	str	r3, [sp, #92]	; 0x5c
    5a96:	e741      	b.n	591c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x70c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    5a98:	a83f      	add	r0, sp, #252	; 0xfc
    5a9a:	e738      	b.n	590e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6fe>
  RuntimeShape() : size_(0) {}
    5a9c:	9338      	str	r3, [sp, #224]	; 0xe0
    5a9e:	9318      	str	r3, [sp, #96]	; 0x60
    5aa0:	e758      	b.n	5954 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x744>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    5aa2:	a839      	add	r0, sp, #228	; 0xe4
    5aa4:	e74f      	b.n	5946 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x736>
  RuntimeShape() : size_(0) {}
    5aa6:	2400      	movs	r4, #0
    5aa8:	9432      	str	r4, [sp, #200]	; 0xc8
    5aaa:	e76e      	b.n	598a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x77a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    5aac:	a833      	add	r0, sp, #204	; 0xcc
    5aae:	e766      	b.n	597e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x76e>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    5ab0:	4b1d      	ldr	r3, [pc, #116]	; (5b28 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x918>)
    5ab2:	4798      	blx	r3
  TFLITE_DCHECK_EQ(output_offset, 0);
    5ab4:	4b1c      	ldr	r3, [pc, #112]	; (5b28 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x918>)
    5ab6:	4798      	blx	r3
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    5ab8:	4b1b      	ldr	r3, [pc, #108]	; (5b28 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x918>)
    5aba:	4798      	blx	r3
  int flat_size = 1;
    5abc:	2301      	movs	r3, #1
    5abe:	930e      	str	r3, [sp, #56]	; 0x38
    5ac0:	e790      	b.n	59e4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x7d4>
    TFLITE_DCHECK_GE(i, 0);
    5ac2:	4b19      	ldr	r3, [pc, #100]	; (5b28 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x918>)
    5ac4:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    5ac6:	4b18      	ldr	r3, [pc, #96]	; (5b28 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x918>)
    5ac8:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    5aca:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    5acc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    5ad0:	e796      	b.n	5a00 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x7f0>
    5ad2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    5ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5ad8:	9313      	str	r3, [sp, #76]	; 0x4c
    5ada:	e79a      	b.n	5a12 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x802>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    5adc:	4b12      	ldr	r3, [pc, #72]	; (5b28 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x918>)
    5ade:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    5ae0:	4b11      	ldr	r3, [pc, #68]	; (5b28 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x918>)
    5ae2:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    5ae4:	4b10      	ldr	r3, [pc, #64]	; (5b28 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x918>)
    5ae6:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    5ae8:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    5aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5aee:	9307      	str	r3, [sp, #28]
    5af0:	e7a1      	b.n	5a36 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x826>
    5af2:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    5af6:	f040 8199 	bne.w	5e2c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc1c>
    5afa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    5afe:	e15e      	b.n	5dbe <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xbae>
  assert(exponent >= 0);
    5b00:	4b0a      	ldr	r3, [pc, #40]	; (5b2c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x91c>)
    5b02:	4a0b      	ldr	r2, [pc, #44]	; (5b30 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x920>)
    5b04:	f44f 71b3 	mov.w	r1, #358	; 0x166
    5b08:	480a      	ldr	r0, [pc, #40]	; (5b34 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x924>)
    5b0a:	4c0b      	ldr	r4, [pc, #44]	; (5b38 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x928>)
    5b0c:	47a0      	blx	r4
  assert(exponent <= 31);
    5b0e:	4b0b      	ldr	r3, [pc, #44]	; (5b3c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x92c>)
    5b10:	4a07      	ldr	r2, [pc, #28]	; (5b30 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x920>)
    5b12:	f240 1167 	movw	r1, #359	; 0x167
    5b16:	4807      	ldr	r0, [pc, #28]	; (5b34 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x924>)
    5b18:	4c07      	ldr	r4, [pc, #28]	; (5b38 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x928>)
    5b1a:	47a0      	blx	r4
    5b1c:	1ffffffe 	.word	0x1ffffffe
    5b20:	0000a511 	.word	0x0000a511
    5b24:	000158c1 	.word	0x000158c1
    5b28:	00014b3d 	.word	0x00014b3d
    5b2c:	0002202c 	.word	0x0002202c
    5b30:	000221cc 	.word	0x000221cc
    5b34:	0002203c 	.word	0x0002203c
    5b38:	00014b4d 	.word	0x00014b4d
    5b3c:	0002206c 	.word	0x0002206c
  for (int b = 0; b < batches; ++b) {
    5b40:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5b42:	3301      	adds	r3, #1
    5b44:	9312      	str	r3, [sp, #72]	; 0x48
    5b46:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5b48:	9914      	ldr	r1, [sp, #80]	; 0x50
    5b4a:	440a      	add	r2, r1
    5b4c:	9210      	str	r2, [sp, #64]	; 0x40
    5b4e:	9a06      	ldr	r2, [sp, #24]
    5b50:	4452      	add	r2, sl
    5b52:	9206      	str	r2, [sp, #24]
    5b54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5b56:	429a      	cmp	r2, r3
    5b58:	d014      	beq.n	5b84 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x974>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    5b5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    5b5c:	2b00      	cmp	r3, #0
    5b5e:	ddef      	ble.n	5b40 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x930>
    5b60:	9b18      	ldr	r3, [sp, #96]	; 0x60
    5b62:	f1a3 0904 	sub.w	r9, r3, #4
    5b66:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    5b6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    5b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5b6e:	441a      	add	r2, r3
    5b70:	9208      	str	r2, [sp, #32]
    5b72:	461d      	mov	r5, r3
    5b74:	9b06      	ldr	r3, [sp, #24]
    5b76:	eb0a 0403 	add.w	r4, sl, r3
  const int32_t filter_offset = -filter->params.zero_point;
    5b7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5b7c:	4258      	negs	r0, r3
  const int32_t input_offset = -input->params.zero_point;
    5b7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    5b80:	4259      	negs	r1, r3
    5b82:	e13d      	b.n	5e00 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xbf0>
    if (size_ > kMaxSmallSize) {
    5b84:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5b86:	2b05      	cmp	r3, #5
    5b88:	dd03      	ble.n	5b92 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x982>
      delete[] dims_pointer_;
    5b8a:	9833      	ldr	r0, [sp, #204]	; 0xcc
    5b8c:	b108      	cbz	r0, 5b92 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x982>
    5b8e:	4bb6      	ldr	r3, [pc, #728]	; (5e68 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc58>)
    5b90:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    5b92:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    5b94:	2b05      	cmp	r3, #5
    5b96:	dd03      	ble.n	5ba0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x990>
      delete[] dims_pointer_;
    5b98:	9839      	ldr	r0, [sp, #228]	; 0xe4
    5b9a:	b108      	cbz	r0, 5ba0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x990>
    5b9c:	4bb2      	ldr	r3, [pc, #712]	; (5e68 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc58>)
    5b9e:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    5ba0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5ba2:	2b05      	cmp	r3, #5
    5ba4:	dd03      	ble.n	5bae <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x99e>
      delete[] dims_pointer_;
    5ba6:	983f      	ldr	r0, [sp, #252]	; 0xfc
    5ba8:	b108      	cbz	r0, 5bae <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x99e>
    5baa:	4baf      	ldr	r3, [pc, #700]	; (5e68 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc58>)
    5bac:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    5bae:	9b44      	ldr	r3, [sp, #272]	; 0x110
    5bb0:	2b05      	cmp	r3, #5
    5bb2:	dd03      	ble.n	5bbc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x9ac>
      delete[] dims_pointer_;
    5bb4:	9845      	ldr	r0, [sp, #276]	; 0x114
    5bb6:	b108      	cbz	r0, 5bbc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x9ac>
    5bb8:	4bab      	ldr	r3, [pc, #684]	; (5e68 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc58>)
    5bba:	4798      	blx	r3
  return kTfLiteOk;
    5bbc:	2000      	movs	r0, #0
    5bbe:	f7ff bb72 	b.w	52a6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x96>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    5bc2:	0ff3      	lsrs	r3, r6, #31
    5bc4:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
  assert(exponent >= 0);
    5bc8:	f1bc 0f00 	cmp.w	ip, #0
    5bcc:	f6ff ac6f 	blt.w	54ae <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x29e>
  assert(exponent <= 31);
    5bd0:	f1bc 0f1f 	cmp.w	ip, #31
    5bd4:	f73f ac88 	bgt.w	54e8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2d8>
  return a + b;
    5bd8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5bda:	eb02 76d3 	add.w	r6, r2, r3, lsr #31
  return a & b;
    5bde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5be0:	401a      	ands	r2, r3
  return a >> offset;
    5be2:	fa43 f30c 	asr.w	r3, r3, ip
  return a + b;
    5be6:	4296      	cmp	r6, r2
    5be8:	bfb8      	it	lt
    5bea:	3301      	addlt	r3, #1
      }
      if (bias_data) {
        acc += bias_data[out_c];
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
      acc += output_offset;
    5bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5bee:	4413      	add	r3, r2
      acc = std::max(acc, output_activation_min);
      acc = std::min(acc, output_activation_max);
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
    5bf0:	9a08      	ldr	r2, [sp, #32]
    5bf2:	4293      	cmp	r3, r2
    5bf4:	bfb8      	it	lt
    5bf6:	4613      	movlt	r3, r2
    5bf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5bfa:	4293      	cmp	r3, r2
    5bfc:	bfa8      	it	ge
    5bfe:	4613      	movge	r3, r2
    5c00:	f805 3b01 	strb.w	r3, [r5], #1
    5c04:	3004      	adds	r0, #4
    5c06:	9b04      	ldr	r3, [sp, #16]
    5c08:	449e      	add	lr, r3
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    5c0a:	45aa      	cmp	sl, r5
    5c0c:	f43f ac73 	beq.w	54f6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2e6>
      for (int d = 0; d < accum_depth; ++d) {
    5c10:	9b07      	ldr	r3, [sp, #28]
    5c12:	2b00      	cmp	r3, #0
    5c14:	f77f ac42 	ble.w	549c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x28c>
    5c18:	46f3      	mov	fp, lr
    5c1a:	9f05      	ldr	r7, [sp, #20]
    5c1c:	2200      	movs	r2, #0
        int32 input_val = input_data[b * accum_depth + d];
    5c1e:	f917 6b01 	ldrsb.w	r6, [r7], #1
        int32 filter_val = filter_data[out_c * accum_depth + d];
    5c22:	f91b 3b01 	ldrsb.w	r3, [fp], #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
    5c26:	1b1b      	subs	r3, r3, r4
    5c28:	eba6 0608 	sub.w	r6, r6, r8
    5c2c:	fb06 2203 	mla	r2, r6, r3, r2
      for (int d = 0; d < accum_depth; ++d) {
    5c30:	428f      	cmp	r7, r1
    5c32:	d1f4      	bne.n	5c1e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xa0e>
      if (bias_data) {
    5c34:	9b06      	ldr	r3, [sp, #24]
    5c36:	b10b      	cbz	r3, 5c3c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xa2c>
        acc += bias_data[out_c];
    5c38:	6803      	ldr	r3, [r0, #0]
    5c3a:	441a      	add	r2, r3
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    5c3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5c3e:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    5c40:	4591      	cmp	r9, r2
    5c42:	f43f ac2d 	beq.w	54a0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x290>
  std::int64_t a_64(a);
    5c46:	17d7      	asrs	r7, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    5c48:	fb09 f607 	mul.w	r6, r9, r7
    5c4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5c4e:	fb02 6603 	mla	r6, r2, r3, r6
    5c52:	fba9 2302 	umull	r2, r3, r9, r2
    5c56:	4433      	add	r3, r6
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    5c58:	2a00      	cmp	r2, #0
    5c5a:	f173 0600 	sbcs.w	r6, r3, #0
    5c5e:	f2c0 8081 	blt.w	5d64 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb54>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    5c62:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    5c66:	f143 0300 	adc.w	r3, r3, #0
    5c6a:	4616      	mov	r6, r2
    5c6c:	461f      	mov	r7, r3
    5c6e:	2a00      	cmp	r2, #0
    5c70:	f173 0b00 	sbcs.w	fp, r3, #0
    5c74:	daa5      	bge.n	5bc2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x9b2>
    5c76:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    5c7a:	2700      	movs	r7, #0
    5c7c:	18b6      	adds	r6, r6, r2
    5c7e:	415f      	adcs	r7, r3
    5c80:	e79f      	b.n	5bc2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x9b2>
    5c82:	0ff3      	lsrs	r3, r6, #31
    5c84:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
  assert(exponent >= 0);
    5c88:	2800      	cmp	r0, #0
    5c8a:	f6ff adbf 	blt.w	580c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5fc>
  assert(exponent <= 31);
    5c8e:	281f      	cmp	r0, #31
    5c90:	f73f adc3 	bgt.w	581a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x60a>
  return a + b;
    5c94:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5c96:	eb02 76d3 	add.w	r6, r2, r3, lsr #31
  return a & b;
    5c9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5c9c:	401a      	ands	r2, r3
  return a >> offset;
    5c9e:	4103      	asrs	r3, r0
  return a + b;
    5ca0:	4296      	cmp	r6, r2
    5ca2:	bfb8      	it	lt
    5ca4:	3301      	addlt	r3, #1
      acc += output_offset;
    5ca6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5ca8:	4413      	add	r3, r2
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
    5caa:	9a04      	ldr	r2, [sp, #16]
    5cac:	4293      	cmp	r3, r2
    5cae:	bfb8      	it	lt
    5cb0:	4613      	movlt	r3, r2
    5cb2:	9a05      	ldr	r2, [sp, #20]
    5cb4:	4293      	cmp	r3, r2
    5cb6:	bfa8      	it	ge
    5cb8:	4613      	movge	r3, r2
    5cba:	f80e 3b01 	strb.w	r3, [lr], #1
    5cbe:	3404      	adds	r4, #4
    5cc0:	9b07      	ldr	r3, [sp, #28]
    5cc2:	4498      	add	r8, r3
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    5cc4:	45ce      	cmp	lr, r9
    5cc6:	f43f adaf 	beq.w	5828 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x618>
      for (int d = 0; d < accum_depth; ++d) {
    5cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5ccc:	2b00      	cmp	r3, #0
    5cce:	f77f ad94 	ble.w	57fa <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5ea>
    5cd2:	46c3      	mov	fp, r8
    5cd4:	9f06      	ldr	r7, [sp, #24]
    5cd6:	2200      	movs	r2, #0
        int32 input_val = input_data[b * accum_depth + d];
    5cd8:	f817 6b01 	ldrb.w	r6, [r7], #1
        int32 filter_val = filter_data[out_c * accum_depth + d];
    5cdc:	f81b 3b01 	ldrb.w	r3, [fp], #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
    5ce0:	eba3 030a 	sub.w	r3, r3, sl
    5ce4:	1b76      	subs	r6, r6, r5
    5ce6:	fb06 2203 	mla	r2, r6, r3, r2
      for (int d = 0; d < accum_depth; ++d) {
    5cea:	428f      	cmp	r7, r1
    5cec:	d1f4      	bne.n	5cd8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xac8>
      if (bias_data) {
    5cee:	9b08      	ldr	r3, [sp, #32]
    5cf0:	b10b      	cbz	r3, 5cf6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xae6>
        acc += bias_data[out_c];
    5cf2:	6823      	ldr	r3, [r4, #0]
    5cf4:	441a      	add	r2, r3
    5cf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5cf8:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    5cfa:	4594      	cmp	ip, r2
    5cfc:	f43f ad7f 	beq.w	57fe <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5ee>
  std::int64_t a_64(a);
    5d00:	17d7      	asrs	r7, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    5d02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5d04:	fb02 f603 	mul.w	r6, r2, r3
    5d08:	fb0c 6607 	mla	r6, ip, r7, r6
    5d0c:	fba2 230c 	umull	r2, r3, r2, ip
    5d10:	4433      	add	r3, r6
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    5d12:	2a00      	cmp	r2, #0
    5d14:	f173 0600 	sbcs.w	r6, r3, #0
    5d18:	db39      	blt.n	5d8e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb7e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    5d1a:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    5d1e:	f143 0300 	adc.w	r3, r3, #0
    5d22:	4616      	mov	r6, r2
    5d24:	461f      	mov	r7, r3
    5d26:	2a00      	cmp	r2, #0
    5d28:	f173 0b00 	sbcs.w	fp, r3, #0
    5d2c:	daa9      	bge.n	5c82 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xa72>
    5d2e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    5d32:	2700      	movs	r7, #0
    5d34:	18b6      	adds	r6, r6, r2
    5d36:	415f      	adcs	r7, r3
    5d38:	e7a3      	b.n	5c82 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xa72>
    5d3a:	4e4c      	ldr	r6, [pc, #304]	; (5e6c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc5c>)
    5d3c:	f04f 37ff 	mov.w	r7, #4294967295
    5d40:	18b6      	adds	r6, r6, r2
    5d42:	415f      	adcs	r7, r3
    5d44:	4632      	mov	r2, r6
    5d46:	463b      	mov	r3, r7
    5d48:	2e00      	cmp	r6, #0
    5d4a:	f177 0b00 	sbcs.w	fp, r7, #0
    5d4e:	db03      	blt.n	5d58 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb48>
    5d50:	0ff3      	lsrs	r3, r6, #31
    5d52:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
    5d56:	e032      	b.n	5dbe <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xbae>
    5d58:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    5d5c:	2700      	movs	r7, #0
    5d5e:	18b6      	adds	r6, r6, r2
    5d60:	415f      	adcs	r7, r3
    5d62:	e7f5      	b.n	5d50 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb40>
    5d64:	4e41      	ldr	r6, [pc, #260]	; (5e6c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc5c>)
    5d66:	f04f 37ff 	mov.w	r7, #4294967295
    5d6a:	18b6      	adds	r6, r6, r2
    5d6c:	415f      	adcs	r7, r3
    5d6e:	4632      	mov	r2, r6
    5d70:	463b      	mov	r3, r7
    5d72:	2e00      	cmp	r6, #0
    5d74:	f177 0b00 	sbcs.w	fp, r7, #0
    5d78:	db03      	blt.n	5d82 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb72>
    5d7a:	0ff3      	lsrs	r3, r6, #31
    5d7c:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
    5d80:	e722      	b.n	5bc8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x9b8>
    5d82:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    5d86:	2700      	movs	r7, #0
    5d88:	18b6      	adds	r6, r6, r2
    5d8a:	415f      	adcs	r7, r3
    5d8c:	e7f5      	b.n	5d7a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb6a>
    5d8e:	4e37      	ldr	r6, [pc, #220]	; (5e6c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc5c>)
    5d90:	f04f 37ff 	mov.w	r7, #4294967295
    5d94:	18b6      	adds	r6, r6, r2
    5d96:	415f      	adcs	r7, r3
    5d98:	4632      	mov	r2, r6
    5d9a:	463b      	mov	r3, r7
    5d9c:	2e00      	cmp	r6, #0
    5d9e:	f177 0b00 	sbcs.w	fp, r7, #0
    5da2:	db03      	blt.n	5dac <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb9c>
    5da4:	0ff3      	lsrs	r3, r6, #31
    5da6:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
    5daa:	e76d      	b.n	5c88 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xa78>
    5dac:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    5db0:	2700      	movs	r7, #0
    5db2:	18b6      	adds	r6, r6, r2
    5db4:	415f      	adcs	r7, r3
    5db6:	e7f5      	b.n	5da4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb94>
    5db8:	0ff3      	lsrs	r3, r6, #31
    5dba:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
  assert(exponent >= 0);
    5dbe:	f1bc 0f00 	cmp.w	ip, #0
    5dc2:	f6ff ae9d 	blt.w	5b00 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8f0>
  assert(exponent <= 31);
    5dc6:	f1bc 0f1f 	cmp.w	ip, #31
    5dca:	f73f aea0 	bgt.w	5b0e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8fe>
  return a + b;
    5dce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5dd0:	eb02 76d3 	add.w	r6, r2, r3, lsr #31
  return a & b;
    5dd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5dd6:	401a      	ands	r2, r3
  return a >> offset;
    5dd8:	fa43 f30c 	asr.w	r3, r3, ip
  return a + b;
    5ddc:	4296      	cmp	r6, r2
    5dde:	bfb8      	it	lt
    5de0:	3301      	addlt	r3, #1
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
      // Saturate, cast to int16, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
      accum = std::min(accum, output_activation_max - output_offset);
      accum += output_offset;
      output_data[out_c + output_depth * b] = accum;
    5de2:	9a04      	ldr	r2, [sp, #16]
    5de4:	4293      	cmp	r3, r2
    5de6:	bfb8      	it	lt
    5de8:	4613      	movlt	r3, r2
    5dea:	9a05      	ldr	r2, [sp, #20]
    5dec:	4293      	cmp	r3, r2
    5dee:	bfa8      	it	ge
    5df0:	4613      	movge	r3, r2
    5df2:	f825 3b02 	strh.w	r3, [r5], #2
    5df6:	44d0      	add	r8, sl
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    5df8:	9b08      	ldr	r3, [sp, #32]
    5dfa:	429d      	cmp	r5, r3
    5dfc:	f43f aea0 	beq.w	5b40 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x930>
      int32 accum = bias_data[out_c];
    5e00:	f859 2f04 	ldr.w	r2, [r9, #4]!
      for (int d = 0; d < accum_depth; ++d) {
    5e04:	9b07      	ldr	r3, [sp, #28]
    5e06:	2b00      	cmp	r3, #0
    5e08:	dd0b      	ble.n	5e22 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc12>
    5e0a:	46c3      	mov	fp, r8
    5e0c:	9f06      	ldr	r7, [sp, #24]
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
    5e0e:	f817 6b01 	ldrb.w	r6, [r7], #1
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
    5e12:	f81b 3b01 	ldrb.w	r3, [fp], #1
    5e16:	4403      	add	r3, r0
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
    5e18:	440e      	add	r6, r1
        accum += filter_val * input_val;
    5e1a:	fb16 2203 	smlabb	r2, r6, r3, r2
      for (int d = 0; d < accum_depth; ++d) {
    5e1e:	42a7      	cmp	r7, r4
    5e20:	d1f5      	bne.n	5e0e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xbfe>
    5e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5e24:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    5e26:	4596      	cmp	lr, r2
    5e28:	f43f ae63 	beq.w	5af2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8e2>
  std::int64_t a_64(a);
    5e2c:	17d7      	asrs	r7, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    5e2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5e30:	fb02 f603 	mul.w	r6, r2, r3
    5e34:	fb0e 6607 	mla	r6, lr, r7, r6
    5e38:	fba2 230e 	umull	r2, r3, r2, lr
    5e3c:	4433      	add	r3, r6
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    5e3e:	2a00      	cmp	r2, #0
    5e40:	f173 0600 	sbcs.w	r6, r3, #0
    5e44:	f6ff af79 	blt.w	5d3a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb2a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    5e48:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    5e4c:	f143 0300 	adc.w	r3, r3, #0
    5e50:	4616      	mov	r6, r2
    5e52:	461f      	mov	r7, r3
    5e54:	2a00      	cmp	r2, #0
    5e56:	f173 0b00 	sbcs.w	fp, r3, #0
    5e5a:	daad      	bge.n	5db8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xba8>
    5e5c:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    5e60:	2700      	movs	r7, #0
    5e62:	18b6      	adds	r6, r6, r2
    5e64:	415f      	adcs	r7, r3
    5e66:	e7a7      	b.n	5db8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xba8>
    5e68:	0000a461 	.word	0x0000a461
    5e6c:	c0000001 	.word	0xc0000001

00005e70 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:

}  // namespace fully_connected

TfLiteRegistration Register_FULLY_CONNECTED() {
    5e70:	b470      	push	{r4, r5, r6}
    5e72:	4606      	mov	r6, r0
          /*prepare=*/fully_connected::Prepare,
          /*invoke=*/fully_connected::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    5e74:	4604      	mov	r4, r0
    5e76:	4d05      	ldr	r5, [pc, #20]	; (5e8c <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x1c>)
    5e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5e7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5e80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    5e84:	4630      	mov	r0, r6
    5e86:	bc70      	pop	{r4, r5, r6}
    5e88:	4770      	bx	lr
    5e8a:	bf00      	nop
    5e8c:	00022228 	.word	0x00022228

00005e90 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    5e90:	4288      	cmp	r0, r1
    5e92:	d01c      	beq.n	5ece <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x3e>
// A FixedPoint multiplication is just a
// SaturatingRoundingDoublingHighMul operation on the underlying
// raw integer values. The IntegerBits simply add up, as is obvious
// from the fact that the range is [-2^IntegerBits, 2^IntegerBits).
template <typename tRawType, int tIntegerBits_a, int tIntegerBits_b>
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    5e94:	b430      	push	{r4, r5}
  std::int64_t a_64(a);
    5e96:	17c5      	asrs	r5, r0, #31
  std::int64_t b_64(b);
    5e98:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    5e9a:	fb00 f303 	mul.w	r3, r0, r3
    5e9e:	fb01 3305 	mla	r3, r1, r5, r3
    5ea2:	fba0 0101 	umull	r0, r1, r0, r1
    5ea6:	4419      	add	r1, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    5ea8:	2800      	cmp	r0, #0
    5eaa:	f171 0300 	sbcs.w	r3, r1, #0
    5eae:	db14      	blt.n	5eda <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    5eb0:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    5eb4:	f141 0100 	adc.w	r1, r1, #0
    5eb8:	4602      	mov	r2, r0
    5eba:	460b      	mov	r3, r1
    5ebc:	2800      	cmp	r0, #0
    5ebe:	f171 0400 	sbcs.w	r4, r1, #0
    5ec2:	db1f      	blt.n	5f04 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x74>
    5ec4:	0fd0      	lsrs	r0, r2, #31
    5ec6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    FixedPoint<tRawType, tIntegerBits_a> a,
    FixedPoint<tRawType, tIntegerBits_b> b) {
  FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> c;
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
  return c;
}
    5eca:	bc30      	pop	{r4, r5}
    5ecc:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    5ece:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    5ed2:	d1df      	bne.n	5e94 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4>
    5ed4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5ed8:	4770      	bx	lr
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    5eda:	4a0d      	ldr	r2, [pc, #52]	; (5f10 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x80>)
    5edc:	f04f 33ff 	mov.w	r3, #4294967295
    5ee0:	1880      	adds	r0, r0, r2
    5ee2:	4159      	adcs	r1, r3
    5ee4:	4602      	mov	r2, r0
    5ee6:	460b      	mov	r3, r1
    5ee8:	2800      	cmp	r0, #0
    5eea:	f171 0400 	sbcs.w	r4, r1, #0
    5eee:	db03      	blt.n	5ef8 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x68>
    5ef0:	0fd0      	lsrs	r0, r2, #31
    5ef2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    5ef6:	e7e8      	b.n	5eca <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x3a>
    5ef8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    5efc:	2300      	movs	r3, #0
    5efe:	1812      	adds	r2, r2, r0
    5f00:	414b      	adcs	r3, r1
    5f02:	e7f5      	b.n	5ef0 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x60>
    5f04:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    5f08:	2300      	movs	r3, #0
    5f0a:	1812      	adds	r2, r2, r0
    5f0c:	414b      	adcs	r3, r1
    5f0e:	e7d9      	b.n	5ec4 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x34>
    5f10:	c0000001 	.word	0xc0000001

00005f14 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
    5f14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  std::int64_t sum = a64 + b64;
    5f18:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    5f1c:	2300      	movs	r3, #0
    5f1e:	1814      	adds	r4, r2, r0
    5f20:	eb43 75e0 	adc.w	r5, r3, r0, asr #31
  std::int64_t sign = sum >= 0 ? 1 : -1;
    5f24:	2c00      	cmp	r4, #0
    5f26:	f175 0300 	sbcs.w	r3, r5, #0
    5f2a:	bfb9      	ittee	lt
    5f2c:	f04f 32ff 	movlt.w	r2, #4294967295
    5f30:	f04f 33ff 	movlt.w	r3, #4294967295
    5f34:	2201      	movge	r2, #1
    5f36:	2300      	movge	r3, #0
  return static_cast<std::int32_t>((sum + sign) / 2);
    5f38:	18a0      	adds	r0, r4, r2
    5f3a:	eb45 0103 	adc.w	r1, r5, r3
    5f3e:	0fcb      	lsrs	r3, r1, #31
    5f40:	18c0      	adds	r0, r0, r3
    5f42:	f141 0100 	adc.w	r1, r1, #0
    5f46:	1049      	asrs	r1, r1, #1
    5f48:	ea4f 0030 	mov.w	r0, r0, rrx
    5f4c:	4683      	mov	fp, r0
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
    5f4e:	4956      	ldr	r1, [pc, #344]	; (60a8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x194>)
    5f50:	4b56      	ldr	r3, [pc, #344]	; (60ac <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x198>)
    5f52:	4798      	blx	r3
  return a + b;
    5f54:	f100 345a 	add.w	r4, r0, #1515870810	; 0x5a5a5a5a
    5f58:	2503      	movs	r5, #3
  for (int i = 0; i < 3; i++) {
    F2 half_denominator_times_x = half_denominator * x;
    5f5a:	f8df a150 	ldr.w	sl, [pc, #336]	; 60ac <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x198>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    5f5e:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
    5f62:	f04f 0900 	mov.w	r9, #0
    5f66:	e068      	b.n	603a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x126>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    5f68:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    5f6c:	d16c      	bne.n	6048 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x134>
  return a ? BitNot(zero) : zero;
    5f6e:	f04f 3eff 	mov.w	lr, #4294967295
    5f72:	2000      	movs	r0, #0
             : wide_shifted > max ? max
    5f74:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    5f78:	e050      	b.n	601c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x108>
             ? min
    5f7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5f7e:	e04d      	b.n	601c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x108>
  return a ? BitNot(zero) : zero;
    5f80:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    5f84:	bfb4      	ite	lt
    5f86:	2300      	movlt	r3, #0
    5f88:	2301      	movge	r3, #1
    5f8a:	4258      	negs	r0, r3
    5f8c:	f1b4 4f40 	cmp.w	r4, #3221225472	; 0xc0000000
    5f90:	bfcc      	ite	gt
    5f92:	2200      	movgt	r2, #0
    5f94:	2201      	movle	r2, #1
    5f96:	4251      	negs	r1, r2
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
    5f98:	17e5      	asrs	r5, r4, #31
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    5f9a:	1924      	adds	r4, r4, r4
    5f9c:	416d      	adcs	r5, r5
             ? min
    5f9e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    5fa2:	f175 36ff 	sbcs.w	r6, r5, #4294967295
    5fa6:	db14      	blt.n	5fd2 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbe>
             : wide_shifted > max ? max
    5fa8:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    5fac:	2700      	movs	r7, #0
    5fae:	42a6      	cmp	r6, r4
    5fb0:	eb77 0605 	sbcs.w	r6, r7, r5
    5fb4:	bfb8      	it	lt
    5fb6:	f06f 4400 	mvnlt.w	r4, #2147483648	; 0x80000000
  return a & b;
    5fba:	3b01      	subs	r3, #1
    5fbc:	401c      	ands	r4, r3
    5fbe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  return a ^ b;
    5fc2:	4060      	eors	r0, r4
  return a & b;
    5fc4:	3a01      	subs	r2, #1
    5fc6:	4010      	ands	r0, r2
    5fc8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
  return a ^ b;
    5fcc:	4058      	eors	r0, r3
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
}
    5fce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
             ? min
    5fd2:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    5fd6:	e7f0      	b.n	5fba <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa6>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    5fd8:	0fd1      	lsrs	r1, r2, #31
    5fda:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
  return a ? BitNot(zero) : zero;
    5fde:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    5fe2:	f04f 3eff 	mov.w	lr, #4294967295
    5fe6:	bfb8      	it	lt
    5fe8:	f04f 0e00 	movlt.w	lr, #0
    5fec:	f1b1 4f60 	cmp.w	r1, #3758096384	; 0xe0000000
    5ff0:	f04f 30ff 	mov.w	r0, #4294967295
    5ff4:	bfc8      	it	gt
    5ff6:	2000      	movgt	r0, #0
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
    5ff8:	460a      	mov	r2, r1
    5ffa:	17cb      	asrs	r3, r1, #31
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    5ffc:	009f      	lsls	r7, r3, #2
    5ffe:	ea47 7791 	orr.w	r7, r7, r1, lsr #30
    6002:	008e      	lsls	r6, r1, #2
             ? min
    6004:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
    6008:	f177 33ff 	sbcs.w	r3, r7, #4294967295
    600c:	dbb5      	blt.n	5f7a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x66>
             : wide_shifted > max ? max
    600e:	45b0      	cmp	r8, r6
    6010:	eb79 0307 	sbcs.w	r3, r9, r7
    6014:	bfac      	ite	ge
    6016:	4632      	movge	r2, r6
    6018:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
    601c:	ea6f 030e 	mvn.w	r3, lr
  return a & b;
    6020:	4013      	ands	r3, r2
    6022:	f02e 4e00 	bic.w	lr, lr, #2147483648	; 0x80000000
  return a ^ b;
    6026:	ea83 030e 	eor.w	r3, r3, lr
  return ~a;
    602a:	43c2      	mvns	r2, r0
  return a & b;
    602c:	4013      	ands	r3, r2
    602e:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  return a ^ b;
    6032:	4043      	eors	r3, r0
  return a + b;
    6034:	441c      	add	r4, r3
  for (int i = 0; i < 3; i++) {
    6036:	3d01      	subs	r5, #1
    6038:	d0a2      	beq.n	5f80 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x6c>
    F2 half_denominator_times_x = half_denominator * x;
    603a:	4621      	mov	r1, r4
    603c:	4658      	mov	r0, fp
    603e:	47d0      	blx	sl
  return a - b;
    6040:	f1c0 5e00 	rsb	lr, r0, #536870912	; 0x20000000
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6044:	4574      	cmp	r4, lr
    6046:	d08f      	beq.n	5f68 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x54>
  std::int64_t b_64(b);
    6048:	4672      	mov	r2, lr
    604a:	17d3      	asrs	r3, r2, #31
  std::int64_t a_64(a);
    604c:	17e1      	asrs	r1, r4, #31
  std::int64_t ab_64 = a_64 * b_64;
    604e:	fb0e f201 	mul.w	r2, lr, r1
    6052:	fb04 2303 	mla	r3, r4, r3, r2
    6056:	fbae 0104 	umull	r0, r1, lr, r4
    605a:	4419      	add	r1, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    605c:	2800      	cmp	r0, #0
    605e:	f171 0300 	sbcs.w	r3, r1, #0
    6062:	db0e      	blt.n	6082 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x16e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    6064:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    6068:	f141 0100 	adc.w	r1, r1, #0
    606c:	4602      	mov	r2, r0
    606e:	460b      	mov	r3, r1
    6070:	2800      	cmp	r0, #0
    6072:	f171 0e00 	sbcs.w	lr, r1, #0
    6076:	daaf      	bge.n	5fd8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xc4>
    6078:	eb10 0208 	adds.w	r2, r0, r8
    607c:	eb41 0309 	adc.w	r3, r1, r9
    6080:	e7aa      	b.n	5fd8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xc4>
    6082:	4a0b      	ldr	r2, [pc, #44]	; (60b0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x19c>)
    6084:	f04f 33ff 	mov.w	r3, #4294967295
    6088:	1812      	adds	r2, r2, r0
    608a:	414b      	adcs	r3, r1
    608c:	4610      	mov	r0, r2
    608e:	4619      	mov	r1, r3
    6090:	2a00      	cmp	r2, #0
    6092:	f173 0e00 	sbcs.w	lr, r3, #0
    6096:	da03      	bge.n	60a0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x18c>
    6098:	eb12 0008 	adds.w	r0, r2, r8
    609c:	eb43 0109 	adc.w	r1, r3, r9
    60a0:	0fc3      	lsrs	r3, r0, #31
    60a2:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
    60a6:	e79a      	b.n	5fde <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xca>
    60a8:	c3c3c3c4 	.word	0xc3c3c3c4
    60ac:	00005e91 	.word	0x00005e91
    60b0:	c0000001 	.word	0xc0000001

000060b4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    60b4:	4288      	cmp	r0, r1
    60b6:	d01c      	beq.n	60f2 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x3e>
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    60b8:	b430      	push	{r4, r5}
  std::int64_t a_64(a);
    60ba:	17c5      	asrs	r5, r0, #31
  std::int64_t b_64(b);
    60bc:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    60be:	fb00 f303 	mul.w	r3, r0, r3
    60c2:	fb01 3305 	mla	r3, r1, r5, r3
    60c6:	fba0 0101 	umull	r0, r1, r0, r1
    60ca:	4419      	add	r1, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    60cc:	2800      	cmp	r0, #0
    60ce:	f171 0300 	sbcs.w	r3, r1, #0
    60d2:	db14      	blt.n	60fe <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    60d4:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    60d8:	f141 0100 	adc.w	r1, r1, #0
    60dc:	4602      	mov	r2, r0
    60de:	460b      	mov	r3, r1
    60e0:	2800      	cmp	r0, #0
    60e2:	f171 0400 	sbcs.w	r4, r1, #0
    60e6:	db1f      	blt.n	6128 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x74>
    60e8:	0fd0      	lsrs	r0, r2, #31
    60ea:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
}
    60ee:	bc30      	pop	{r4, r5}
    60f0:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    60f2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    60f6:	d1df      	bne.n	60b8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4>
    60f8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    60fc:	4770      	bx	lr
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    60fe:	4a0d      	ldr	r2, [pc, #52]	; (6134 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x80>)
    6100:	f04f 33ff 	mov.w	r3, #4294967295
    6104:	1880      	adds	r0, r0, r2
    6106:	4159      	adcs	r1, r3
    6108:	4602      	mov	r2, r0
    610a:	460b      	mov	r3, r1
    610c:	2800      	cmp	r0, #0
    610e:	f171 0400 	sbcs.w	r4, r1, #0
    6112:	db03      	blt.n	611c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x68>
    6114:	0fd0      	lsrs	r0, r2, #31
    6116:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    611a:	e7e8      	b.n	60ee <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x3a>
    611c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    6120:	2300      	movs	r3, #0
    6122:	1812      	adds	r2, r2, r0
    6124:	414b      	adcs	r3, r1
    6126:	e7f5      	b.n	6114 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x60>
    6128:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    612c:	2300      	movs	r3, #0
    612e:	1812      	adds	r2, r2, r0
    6130:	414b      	adcs	r3, r1
    6132:	e7d9      	b.n	60e8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x34>
    6134:	c0000001 	.word	0xc0000001

00006138 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
    6138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
    613c:	4f14      	ldr	r7, [pc, #80]	; (6190 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x58>)
  return a + b;
    613e:	f100 5680 	add.w	r6, r0, #268435456	; 0x10000000
  F x2 = x * x;
    6142:	4631      	mov	r1, r6
    6144:	4630      	mov	r0, r6
    6146:	4d13      	ldr	r5, [pc, #76]	; (6194 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x5c>)
    6148:	47a8      	blx	r5
    614a:	4604      	mov	r4, r0
  F x3 = x2 * x;
    614c:	4631      	mov	r1, r6
    614e:	47a8      	blx	r5
    6150:	4680      	mov	r8, r0
  F x4 = x2 * x2;
    6152:	4621      	mov	r1, r4
    6154:	4620      	mov	r0, r4
    6156:	47a8      	blx	r5
  return a & b;
    6158:	0fc3      	lsrs	r3, r0, #31
  return a + b;
    615a:	3301      	adds	r3, #1
  return a & b;
    615c:	f000 0203 	and.w	r2, r0, #3
  return a >> offset;
    6160:	1080      	asrs	r0, r0, #2
  return a + b;
    6162:	4293      	cmp	r3, r2
    6164:	bfb8      	it	lt
    6166:	3001      	addlt	r0, #1
      SaturatingRoundingMultiplyByPOT<-1>(
    6168:	490b      	ldr	r1, [pc, #44]	; (6198 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x60>)
    616a:	4440      	add	r0, r8
    616c:	47a8      	blx	r5
  return a + b;
    616e:	4420      	add	r0, r4
  return a & b;
    6170:	f000 0301 	and.w	r3, r0, #1
  return a ? BitNot(zero) : zero;
    6174:	ebb3 7fd0 	cmp.w	r3, r0, lsr #31
  return a & b;
    6178:	bfcc      	ite	gt
    617a:	2401      	movgt	r4, #1
    617c:	2400      	movle	r4, #0
  return a + b;
    617e:	eb04 0060 	add.w	r0, r4, r0, asr #1
  return AddSaturatingIf16Bit(
    6182:	1981      	adds	r1, r0, r6
    6184:	4638      	mov	r0, r7
    6186:	47a8      	blx	r5
}
    6188:	4438      	add	r0, r7
    618a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    618e:	bf00      	nop
    6190:	70f5a894 	.word	0x70f5a894
    6194:	000060b5 	.word	0x000060b5
    6198:	2aaaaaab 	.word	0x2aaaaaab

0000619c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE>:
};

TfLiteStatus CalculateOpData(const TfLiteContext* context,
                             const TfLitePoolParams* params,
                             const TfLiteTensor* input,
                             const TfLiteTensor* output, OpData* data) {
    619c:	b5f0      	push	{r4, r5, r6, r7, lr}
    619e:	9c05      	ldr	r4, [sp, #20]
  return t->dims->data[dim];
    61a0:	6893      	ldr	r3, [r2, #8]
    61a2:	f8d3 e008 	ldr.w	lr, [r3, #8]
    61a6:	68dd      	ldr	r5, [r3, #12]
  int width = SizeOfDimension(input, 2);

  int out_height, out_width;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
    61a8:	688f      	ldr	r7, [r1, #8]
    61aa:	684a      	ldr	r2, [r1, #4]
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
    61ac:	f8d1 c010 	ldr.w	ip, [r1, #16]
      params->filter_width, params->padding, &out_height, &out_width);
    61b0:	68ce      	ldr	r6, [r1, #12]
    61b2:	780b      	ldrb	r3, [r1, #0]
  switch (padding) {
    61b4:	2b01      	cmp	r3, #1
    61b6:	d008      	beq.n	61ca <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE+0x2e>
    61b8:	2b02      	cmp	r3, #2
    61ba:	d02c      	beq.n	6216 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE+0x7a>
    61bc:	2b01      	cmp	r3, #1
    61be:	d035      	beq.n	622c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE+0x90>
    61c0:	2b02      	cmp	r3, #2
    61c2:	d035      	beq.n	6230 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE+0x94>
      return 0;
    61c4:	2100      	movs	r1, #0
    61c6:	460b      	mov	r3, r1
    61c8:	e008      	b.n	61dc <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE+0x40>
      return (image_size + stride - 1) / stride;
    61ca:	18a9      	adds	r1, r5, r2
    61cc:	3901      	subs	r1, #1
    61ce:	fb91 f1f2 	sdiv	r1, r1, r2
    61d2:	eb07 000e 	add.w	r0, r7, lr
    61d6:	3801      	subs	r0, #1
    61d8:	fb90 f3f7 	sdiv	r3, r0, r7
      ((out_size - 1) * stride + effective_filter_size - in_size);
    61dc:	3b01      	subs	r3, #1
    61de:	fb07 c303 	mla	r3, r7, r3, ip
    61e2:	eba3 030e 	sub.w	r3, r3, lr
  total_padding = total_padding > 0 ? total_padding : 0;
    61e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
      ((out_size - 1) * stride + effective_filter_size - in_size);
    61ea:	3901      	subs	r1, #1
    61ec:	fb02 6201 	mla	r2, r2, r1, r6
    61f0:	1b52      	subs	r2, r2, r5
  total_padding = total_padding > 0 ? total_padding : 0;
    61f2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  return total_padding / 2;
    61f6:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
    61fa:	1049      	asrs	r1, r1, #1
    61fc:	6021      	str	r1, [r4, #0]
    61fe:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
    6202:	1049      	asrs	r1, r1, #1
    6204:	6061      	str	r1, [r4, #4]
  *offset = total_padding % 2;
    6206:	f002 0201 	and.w	r2, r2, #1
    620a:	60a2      	str	r2, [r4, #8]
    620c:	f003 0301 	and.w	r3, r3, #1
    6210:	60e3      	str	r3, [r4, #12]

  return kTfLiteOk;
}
    6212:	2000      	movs	r0, #0
    6214:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return (image_size + stride - effective_filter_size) / stride;
    6216:	18a9      	adds	r1, r5, r2
    6218:	1b89      	subs	r1, r1, r6
    621a:	fb91 f1f2 	sdiv	r1, r1, r2
    621e:	eb07 000e 	add.w	r0, r7, lr
    6222:	eba0 000c 	sub.w	r0, r0, ip
    6226:	fb90 f3f7 	sdiv	r3, r0, r7
    622a:	e7d7      	b.n	61dc <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE+0x40>
      return 0;
    622c:	2100      	movs	r1, #0
    622e:	e7d0      	b.n	61d2 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE+0x36>
    6230:	2100      	movs	r1, #0
    6232:	e7f4      	b.n	621e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE+0x82>

00006234 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:
      return kTfLiteError;
  }
  return kTfLiteOk;
}

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
    6234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6238:	b0db      	sub	sp, #364	; 0x16c
    623a:	4604      	mov	r4, r0
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
    623c:	f8d1 9014 	ldr.w	r9, [r1, #20]
  return &context->tensors[node->inputs->data[index]];
    6240:	6887      	ldr	r7, [r0, #8]
    6242:	680b      	ldr	r3, [r1, #0]
    6244:	685e      	ldr	r6, [r3, #4]
    6246:	01b6      	lsls	r6, r6, #6
    6248:	eb07 0806 	add.w	r8, r7, r6
  return &context->tensors[node->outputs->data[index]];
    624c:	684b      	ldr	r3, [r1, #4]
    624e:	685d      	ldr	r5, [r3, #4]
    6250:	eb07 1585 	add.w	r5, r7, r5, lsl #6
  OpData data;

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
    6254:	ab32      	add	r3, sp, #200	; 0xc8
    6256:	9300      	str	r3, [sp, #0]
    6258:	462b      	mov	r3, r5
    625a:	4642      	mov	r2, r8
    625c:	4649      	mov	r1, r9
    625e:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 653c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x308>
    6262:	47d0      	blx	sl
    6264:	b980      	cbnz	r0, 6288 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x54>

  switch (input->type) {
    6266:	5db8      	ldrb	r0, [r7, r6]
    6268:	2803      	cmp	r0, #3
    626a:	f000 81f3 	beq.w	6654 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x420>
    626e:	2809      	cmp	r0, #9
    6270:	f000 81f0 	beq.w	6654 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x420>
    6274:	2801      	cmp	r0, #1
    6276:	d00a      	beq.n	628e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5a>
    case kTfLiteUInt8:
    case kTfLiteInt8:
      MaxEvalQuantized(context, node, params, &data, input, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
    6278:	6965      	ldr	r5, [r4, #20]
    627a:	4ba6      	ldr	r3, [pc, #664]	; (6514 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e0>)
    627c:	4798      	blx	r3
    627e:	4602      	mov	r2, r0
    6280:	49a5      	ldr	r1, [pc, #660]	; (6518 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    6282:	4620      	mov	r0, r4
    6284:	47a8      	blx	r5
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
    6286:	2001      	movs	r0, #1
  }
  return kTfLiteOk;
}
    6288:	b05b      	add	sp, #364	; 0x16c
    628a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  CalculateActivationRange(params->activation, &activation_min,
    628e:	f899 3014 	ldrb.w	r3, [r9, #20]
  if (activation == kTfLiteActRelu) {
    6292:	2b01      	cmp	r3, #1
    6294:	f000 80d4 	beq.w	6440 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x20c>
  } else if (activation == kTfLiteActRelu6) {
    6298:	2b03      	cmp	r3, #3
    629a:	f000 80d6 	beq.w	644a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x216>
  } else if (activation == kTfLiteActReluN1To1) {
    629e:	2b02      	cmp	r3, #2
    62a0:	f000 80d8 	beq.w	6454 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x220>
    *activation_max = std::numeric_limits<T>::max();
    62a4:	4b9d      	ldr	r3, [pc, #628]	; (651c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e8>)
    62a6:	931b      	str	r3, [sp, #108]	; 0x6c
    *activation_min = std::numeric_limits<T>::lowest();
    62a8:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    62ac:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.stride_height = params->stride_height;
    62ae:	f8d9 3008 	ldr.w	r3, [r9, #8]
    62b2:	9322      	str	r3, [sp, #136]	; 0x88
  op_params.stride_width = params->stride_width;
    62b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
    62b8:	9323      	str	r3, [sp, #140]	; 0x8c
  op_params.filter_height = params->filter_height;
    62ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
    62be:	9324      	str	r3, [sp, #144]	; 0x90
  op_params.filter_width = params->filter_width;
    62c0:	f8d9 300c 	ldr.w	r3, [r9, #12]
    62c4:	9320      	str	r3, [sp, #128]	; 0x80
  op_params.padding_values.height = data->padding.height;
    62c6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    62c8:	9325      	str	r3, [sp, #148]	; 0x94
  op_params.padding_values.width = data->padding.width;
    62ca:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    62cc:	9326      	str	r3, [sp, #152]	; 0x98
  if (tensor == nullptr) {
    62ce:	f1b8 0f00 	cmp.w	r8, #0
    62d2:	f000 80c5 	beq.w	6460 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x22c>
  const int dims_size = dims->size;
    62d6:	f8d8 6008 	ldr.w	r6, [r8, #8]
    62da:	f856 4b04 	ldr.w	r4, [r6], #4
    size_ = dimensions_count;
    62de:	943c      	str	r4, [sp, #240]	; 0xf0
    if (dimensions_count > kMaxSmallSize) {
    62e0:	2c05      	cmp	r4, #5
    62e2:	f340 80c1 	ble.w	6468 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x234>
      dims_pointer_ = new int32[dimensions_count];
    62e6:	4b8e      	ldr	r3, [pc, #568]	; (6520 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2ec>)
    62e8:	429c      	cmp	r4, r3
    62ea:	bf94      	ite	ls
    62ec:	00a0      	lslls	r0, r4, #2
    62ee:	f04f 30ff 	movhi.w	r0, #4294967295
    62f2:	4b8c      	ldr	r3, [pc, #560]	; (6524 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2f0>)
    62f4:	4798      	blx	r3
    62f6:	903d      	str	r0, [sp, #244]	; 0xf4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    62f8:	00a2      	lsls	r2, r4, #2
    62fa:	4631      	mov	r1, r6
    62fc:	4b8a      	ldr	r3, [pc, #552]	; (6528 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2f4>)
    62fe:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    6300:	f8d8 3004 	ldr.w	r3, [r8, #4]
    6304:	9315      	str	r3, [sp, #84]	; 0x54
  if (tensor == nullptr) {
    6306:	2d00      	cmp	r5, #0
    6308:	f000 80b0 	beq.w	646c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x238>
  const int dims_size = dims->size;
    630c:	68ae      	ldr	r6, [r5, #8]
    630e:	f856 4b04 	ldr.w	r4, [r6], #4
    size_ = dimensions_count;
    6312:	9436      	str	r4, [sp, #216]	; 0xd8
    if (dimensions_count > kMaxSmallSize) {
    6314:	2c05      	cmp	r4, #5
    6316:	f340 80b0 	ble.w	647a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x246>
      dims_pointer_ = new int32[dimensions_count];
    631a:	4b81      	ldr	r3, [pc, #516]	; (6520 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2ec>)
    631c:	429c      	cmp	r4, r3
    631e:	bf94      	ite	ls
    6320:	00a0      	lslls	r0, r4, #2
    6322:	f04f 30ff 	movhi.w	r0, #4294967295
    6326:	4b7f      	ldr	r3, [pc, #508]	; (6524 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2f0>)
    6328:	4798      	blx	r3
    632a:	9037      	str	r0, [sp, #220]	; 0xdc
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    632c:	00a2      	lsls	r2, r4, #2
    632e:	4631      	mov	r1, r6
    6330:	4b7d      	ldr	r3, [pc, #500]	; (6528 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2f4>)
    6332:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6334:	686b      	ldr	r3, [r5, #4]
    6336:	931e      	str	r3, [sp, #120]	; 0x78
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    6338:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    633a:	2b04      	cmp	r3, #4
    633c:	f040 809b 	bne.w	6476 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x242>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    6340:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    6342:	2b04      	cmp	r3, #4
    6344:	f040 809b 	bne.w	647e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x24a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6348:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    634a:	930e      	str	r3, [sp, #56]	; 0x38
    634c:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    634e:	9217      	str	r2, [sp, #92]	; 0x5c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    6350:	429a      	cmp	r2, r3
    6352:	f040 8096 	bne.w	6482 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x24e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6356:	f8dd a100 	ldr.w	sl, [sp, #256]	; 0x100
    635a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    635c:	930f      	str	r3, [sp, #60]	; 0x3c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    635e:	4553      	cmp	r3, sl
    6360:	f040 8091 	bne.w	6486 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x252>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6364:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    6366:	930d      	str	r3, [sp, #52]	; 0x34
    6368:	f8dd b0fc 	ldr.w	fp, [sp, #252]	; 0xfc
    636c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    636e:	9312      	str	r3, [sp, #72]	; 0x48
    6370:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    6372:	9316      	str	r3, [sp, #88]	; 0x58
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
    6374:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    6376:	2b00      	cmp	r3, #0
    6378:	f340 816a 	ble.w	6650 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x41c>
    637c:	2300      	movs	r3, #0
    637e:	9309      	str	r3, [sp, #36]	; 0x24
    6380:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
    6384:	fb0a f30b 	mul.w	r3, sl, fp
    6388:	931d      	str	r3, [sp, #116]	; 0x74
    for (int out_y = 0; out_y < output_height; ++out_y) {
    638a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    638c:	2b00      	cmp	r3, #0
    638e:	f340 8158 	ble.w	6642 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x40e>
    6392:	9b22      	ldr	r3, [sp, #136]	; 0x88
    6394:	932c      	str	r3, [sp, #176]	; 0xb0
    6396:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
    639a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    639c:	922a      	str	r2, [sp, #168]	; 0xa8
    639e:	18d1      	adds	r1, r2, r3
    63a0:	9128      	str	r1, [sp, #160]	; 0xa0
    63a2:	425b      	negs	r3, r3
    63a4:	9313      	str	r3, [sp, #76]	; 0x4c
    63a6:	2300      	movs	r3, #0
    63a8:	9314      	str	r3, [sp, #80]	; 0x50
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    63aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    63ac:	fb03 f302 	mul.w	r3, r3, r2
    63b0:	932b      	str	r3, [sp, #172]	; 0xac
      for (int out_x = 0; out_x < output_width; ++out_x) {
    63b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    63b4:	2a00      	cmp	r2, #0
    63b6:	f340 8136 	ble.w	6626 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3f2>
    63ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    63bc:	992a      	ldr	r1, [sp, #168]	; 0xa8
    63be:	1a59      	subs	r1, r3, r1
    63c0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    63c4:	9119      	str	r1, [sp, #100]	; 0x64
    63c6:	9824      	ldr	r0, [sp, #144]	; 0x90
    63c8:	4298      	cmp	r0, r3
    63ca:	bfa8      	it	ge
    63cc:	4618      	movge	r0, r3
    63ce:	9008      	str	r0, [sp, #32]
    63d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    63d2:	932d      	str	r3, [sp, #180]	; 0xb4
    63d4:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
    63d8:	eb03 000b 	add.w	r0, r3, fp
    63dc:	9027      	str	r0, [sp, #156]	; 0x9c
    63de:	425b      	negs	r3, r3
    63e0:	9311      	str	r3, [sp, #68]	; 0x44
          const int filter_x_start = std::max(0, -in_x_origin);
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
    63e2:	2300      	movs	r3, #0
    63e4:	9310      	str	r3, [sp, #64]	; 0x40
    63e6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    63e8:	9813      	ldr	r0, [sp, #76]	; 0x4c
    63ea:	4403      	add	r3, r0
    63ec:	440b      	add	r3, r1
    63ee:	9921      	ldr	r1, [sp, #132]	; 0x84
    63f0:	fb01 f303 	mul.w	r3, r1, r3
    63f4:	9329      	str	r3, [sp, #164]	; 0xa4
    63f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    63f8:	9909      	ldr	r1, [sp, #36]	; 0x24
    63fa:	9814      	ldr	r0, [sp, #80]	; 0x50
    63fc:	fb01 0303 	mla	r3, r1, r3, r0
    6400:	fb02 f303 	mul.w	r3, r2, r3
    6404:	931f      	str	r3, [sp, #124]	; 0x7c
    6406:	4653      	mov	r3, sl
    6408:	46da      	mov	sl, fp
    640a:	469b      	mov	fp, r3
        for (int channel = 0; channel < depth; ++channel) {
    640c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    640e:	2b00      	cmp	r3, #0
    6410:	f340 80f8 	ble.w	6604 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3d0>
              (out_x * stride_width) - params.padding_values.width;
    6414:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6416:	9318      	str	r3, [sp, #96]	; 0x60
    6418:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    641a:	9921      	ldr	r1, [sp, #132]	; 0x84
    641c:	1a51      	subs	r1, r2, r1
    641e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    6422:	9106      	str	r1, [sp, #24]
    6424:	9820      	ldr	r0, [sp, #128]	; 0x80
    6426:	4290      	cmp	r0, r2
    6428:	bfa8      	it	ge
    642a:	4610      	movge	r0, r2
    642c:	9007      	str	r0, [sp, #28]
              std::min(params.filter_width, input_width - in_x_origin);
    642e:	f04f 0900 	mov.w	r9, #0
    6432:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    6434:	18d3      	adds	r3, r2, r3
    6436:	440b      	add	r3, r1
    6438:	fb0b f303 	mul.w	r3, fp, r3
    643c:	931c      	str	r3, [sp, #112]	; 0x70
    643e:	e0b4      	b.n	65aa <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x376>
    *activation_max = std::numeric_limits<T>::max();
    6440:	4b36      	ldr	r3, [pc, #216]	; (651c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e8>)
    6442:	931b      	str	r3, [sp, #108]	; 0x6c
    *activation_min = 0;
    6444:	2300      	movs	r3, #0
    6446:	931a      	str	r3, [sp, #104]	; 0x68
    6448:	e731      	b.n	62ae <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7a>
    *activation_max = 6;
    644a:	4b38      	ldr	r3, [pc, #224]	; (652c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2f8>)
    644c:	931b      	str	r3, [sp, #108]	; 0x6c
    *activation_min = 0;
    644e:	2300      	movs	r3, #0
    6450:	931a      	str	r3, [sp, #104]	; 0x68
    6452:	e72c      	b.n	62ae <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7a>
    *activation_max = 1;
    6454:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    6458:	931b      	str	r3, [sp, #108]	; 0x6c
    *activation_min = -1;
    645a:	4b35      	ldr	r3, [pc, #212]	; (6530 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2fc>)
    645c:	931a      	str	r3, [sp, #104]	; 0x68
    645e:	e726      	b.n	62ae <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7a>
  RuntimeShape() : size_(0) {}
    6460:	2300      	movs	r3, #0
    6462:	933c      	str	r3, [sp, #240]	; 0xf0
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    6464:	9315      	str	r3, [sp, #84]	; 0x54
    6466:	e74e      	b.n	6306 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xd2>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6468:	a83d      	add	r0, sp, #244	; 0xf4
    646a:	e745      	b.n	62f8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
  RuntimeShape() : size_(0) {}
    646c:	2300      	movs	r3, #0
    646e:	9336      	str	r3, [sp, #216]	; 0xd8
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    6470:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    6472:	2b04      	cmp	r3, #4
    6474:	d003      	beq.n	647e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x24a>
    6476:	4b2f      	ldr	r3, [pc, #188]	; (6534 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x300>)
    6478:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    647a:	a837      	add	r0, sp, #220	; 0xdc
    647c:	e756      	b.n	632c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xf8>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    647e:	4b2d      	ldr	r3, [pc, #180]	; (6534 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x300>)
    6480:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    6482:	4b2c      	ldr	r3, [pc, #176]	; (6534 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x300>)
    6484:	4798      	blx	r3
    6486:	4b2b      	ldr	r3, [pc, #172]	; (6534 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x300>)
    6488:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    648a:	4b2a      	ldr	r3, [pc, #168]	; (6534 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x300>)
    648c:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    648e:	4b29      	ldr	r3, [pc, #164]	; (6534 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x300>)
    6490:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    6492:	4b28      	ldr	r3, [pc, #160]	; (6534 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x300>)
    6494:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    6496:	4b27      	ldr	r3, [pc, #156]	; (6534 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x300>)
    6498:	4798      	blx	r3
          float max = std::numeric_limits<float>::lowest();
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    649a:	9b05      	ldr	r3, [sp, #20]
    649c:	3301      	adds	r3, #1
    649e:	9305      	str	r3, [sp, #20]
    64a0:	9a03      	ldr	r2, [sp, #12]
    64a2:	990a      	ldr	r1, [sp, #40]	; 0x28
    64a4:	440a      	add	r2, r1
    64a6:	9203      	str	r2, [sp, #12]
    64a8:	9a04      	ldr	r2, [sp, #16]
    64aa:	3201      	adds	r2, #1
    64ac:	9204      	str	r2, [sp, #16]
    64ae:	9a08      	ldr	r2, [sp, #32]
    64b0:	4293      	cmp	r3, r2
    64b2:	da45      	bge.n	6540 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x30c>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    64b4:	9b06      	ldr	r3, [sp, #24]
    64b6:	9a07      	ldr	r2, [sp, #28]
    64b8:	4293      	cmp	r3, r2
    64ba:	daee      	bge.n	649a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x266>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    64bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    64be:	2b00      	cmp	r3, #0
    64c0:	dbe3      	blt.n	648a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x256>
    64c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    64c4:	429a      	cmp	r2, r3
    64c6:	dde0      	ble.n	648a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x256>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    64c8:	9b04      	ldr	r3, [sp, #16]
    64ca:	2b00      	cmp	r3, #0
    64cc:	dbdf      	blt.n	648e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x25a>
    64ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    64d0:	429a      	cmp	r2, r3
    64d2:	dddc      	ble.n	648e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x25a>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    64d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    64d6:	2b00      	cmp	r3, #0
    64d8:	dbdb      	blt.n	6492 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    64da:	4553      	cmp	r3, sl
    64dc:	dad9      	bge.n	6492 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    64de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    64e0:	9d03      	ldr	r5, [sp, #12]
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    64e2:	f1b9 0f00 	cmp.w	r9, #0
    64e6:	dbd6      	blt.n	6496 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x262>
    64e8:	45cb      	cmp	fp, r9
    64ea:	ddd4      	ble.n	6496 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x262>
      if (__a < __b)
    64ec:	6829      	ldr	r1, [r5, #0]
    64ee:	9831      	ldr	r0, [sp, #196]	; 0xc4
    64f0:	4b11      	ldr	r3, [pc, #68]	; (6538 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x304>)
    64f2:	4798      	blx	r3
      return __a;
    64f4:	2800      	cmp	r0, #0
    64f6:	bf0c      	ite	eq
    64f8:	4633      	moveq	r3, r6
    64fa:	462b      	movne	r3, r5
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
    64fc:	681b      	ldr	r3, [r3, #0]
    64fe:	9331      	str	r3, [sp, #196]	; 0xc4
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    6500:	42a7      	cmp	r7, r4
    6502:	d0ca      	beq.n	649a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x266>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    6504:	2c00      	cmp	r4, #0
    6506:	dbc4      	blt.n	6492 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    6508:	1c63      	adds	r3, r4, #1
    650a:	4445      	add	r5, r8
    650c:	45a2      	cmp	sl, r4
    650e:	ddc0      	ble.n	6492 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    6510:	461c      	mov	r4, r3
    6512:	e7e6      	b.n	64e2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2ae>
    6514:	0000a3c5 	.word	0x0000a3c5
    6518:	0002234c 	.word	0x0002234c
    651c:	7f7fffff 	.word	0x7f7fffff
    6520:	1ffffffe 	.word	0x1ffffffe
    6524:	0000a511 	.word	0x0000a511
    6528:	000158c1 	.word	0x000158c1
    652c:	40c00000 	.word	0x40c00000
    6530:	bf800000 	.word	0xbf800000
    6534:	00014b3d 	.word	0x00014b3d
    6538:	0001381d 	.word	0x0001381d
    653c:	0000619d 	.word	0x0000619d
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    6540:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6542:	2b00      	cmp	r3, #0
    6544:	db56      	blt.n	65f4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3c0>
    6546:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    6548:	429a      	cmp	r2, r3
    654a:	dd53      	ble.n	65f4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3c0>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    654c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    654e:	2b00      	cmp	r3, #0
    6550:	db52      	blt.n	65f8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3c4>
    6552:	9a12      	ldr	r2, [sp, #72]	; 0x48
    6554:	429a      	cmp	r2, r3
    6556:	dd4f      	ble.n	65f8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3c4>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    6558:	9b10      	ldr	r3, [sp, #64]	; 0x40
    655a:	2b00      	cmp	r3, #0
    655c:	db4e      	blt.n	65fc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3c8>
    655e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    6560:	429a      	cmp	r2, r3
    6562:	dd4b      	ble.n	65fc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3c8>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    6564:	f1b9 0f00 	cmp.w	r9, #0
    6568:	db4a      	blt.n	6600 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3cc>
    656a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    656c:	454b      	cmp	r3, r9
    656e:	dd47      	ble.n	6600 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3cc>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    6570:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    6572:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6574:	189d      	adds	r5, r3, r2
    6576:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6578:	fb03 9505 	mla	r5, r3, r5, r9
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
    657c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
      if (__a < __b)
    657e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
    6580:	4631      	mov	r1, r6
    6582:	4620      	mov	r0, r4
    6584:	4ba9      	ldr	r3, [pc, #676]	; (682c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5f8>)
    6586:	4798      	blx	r3
    6588:	b100      	cbz	r0, 658c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x358>
	return __b;
    658a:	4634      	mov	r4, r6
      if (__b < __a)
    658c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
    658e:	4631      	mov	r1, r6
    6590:	4620      	mov	r0, r4
    6592:	4ba7      	ldr	r3, [pc, #668]	; (6830 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5fc>)
    6594:	4798      	blx	r3
    6596:	b100      	cbz	r0, 659a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x366>
	return __b;
    6598:	4634      	mov	r4, r6
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    659a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    659c:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
        for (int channel = 0; channel < depth; ++channel) {
    65a0:	f109 0901 	add.w	r9, r9, #1
    65a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    65a6:	4599      	cmp	r9, r3
    65a8:	d02c      	beq.n	6604 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3d0>
          float max = std::numeric_limits<float>::lowest();
    65aa:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    65ae:	9331      	str	r3, [sp, #196]	; 0xc4
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    65b0:	9b08      	ldr	r3, [sp, #32]
    65b2:	4619      	mov	r1, r3
    65b4:	9a19      	ldr	r2, [sp, #100]	; 0x64
    65b6:	4291      	cmp	r1, r2
    65b8:	ddc2      	ble.n	6540 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x30c>
    65ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    65bc:	009b      	lsls	r3, r3, #2
    65be:	930a      	str	r3, [sp, #40]	; 0x28
    65c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    65c2:	444b      	add	r3, r9
    65c4:	9915      	ldr	r1, [sp, #84]	; 0x54
    65c6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    65ca:	9303      	str	r3, [sp, #12]
    65cc:	4613      	mov	r3, r2
    65ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    65d0:	189a      	adds	r2, r3, r2
    65d2:	9204      	str	r2, [sp, #16]
    65d4:	ea4f 088b 	mov.w	r8, fp, lsl #2
    65d8:	9305      	str	r3, [sp, #20]
              const int in_x = in_x_origin + filter_x;
    65da:	9a18      	ldr	r2, [sp, #96]	; 0x60
    65dc:	4613      	mov	r3, r2
    65de:	9906      	ldr	r1, [sp, #24]
    65e0:	440b      	add	r3, r1
    65e2:	930b      	str	r3, [sp, #44]	; 0x2c
    65e4:	1c4b      	adds	r3, r1, #1
    65e6:	4413      	add	r3, r2
    65e8:	930c      	str	r3, [sp, #48]	; 0x30
    65ea:	9b07      	ldr	r3, [sp, #28]
    65ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
    65ee:	189f      	adds	r7, r3, r2
      return __a;
    65f0:	ae31      	add	r6, sp, #196	; 0xc4
    65f2:	e75f      	b.n	64b4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x280>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    65f4:	4b8f      	ldr	r3, [pc, #572]	; (6834 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x600>)
    65f6:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    65f8:	4b8e      	ldr	r3, [pc, #568]	; (6834 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x600>)
    65fa:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    65fc:	4b8d      	ldr	r3, [pc, #564]	; (6834 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x600>)
    65fe:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    6600:	4b8c      	ldr	r3, [pc, #560]	; (6834 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x600>)
    6602:	4798      	blx	r3
      for (int out_x = 0; out_x < output_width; ++out_x) {
    6604:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6606:	3301      	adds	r3, #1
    6608:	9310      	str	r3, [sp, #64]	; 0x40
    660a:	9927      	ldr	r1, [sp, #156]	; 0x9c
    660c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    660e:	1a89      	subs	r1, r1, r2
    6610:	9127      	str	r1, [sp, #156]	; 0x9c
    6612:	9911      	ldr	r1, [sp, #68]	; 0x44
    6614:	4411      	add	r1, r2
    6616:	9111      	str	r1, [sp, #68]	; 0x44
    6618:	9a16      	ldr	r2, [sp, #88]	; 0x58
    661a:	4293      	cmp	r3, r2
    661c:	f47f aef6 	bne.w	640c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x1d8>
    6620:	465b      	mov	r3, fp
    6622:	46d3      	mov	fp, sl
    6624:	469a      	mov	sl, r3
    for (int out_y = 0; out_y < output_height; ++out_y) {
    6626:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6628:	3301      	adds	r3, #1
    662a:	9314      	str	r3, [sp, #80]	; 0x50
    662c:	9928      	ldr	r1, [sp, #160]	; 0xa0
    662e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    6630:	1a89      	subs	r1, r1, r2
    6632:	9128      	str	r1, [sp, #160]	; 0xa0
    6634:	9913      	ldr	r1, [sp, #76]	; 0x4c
    6636:	4411      	add	r1, r2
    6638:	9113      	str	r1, [sp, #76]	; 0x4c
    663a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    663c:	4293      	cmp	r3, r2
    663e:	f47f aeb8 	bne.w	63b2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x17e>
  for (int batch = 0; batch < batches; ++batch) {
    6642:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6644:	3301      	adds	r3, #1
    6646:	9309      	str	r3, [sp, #36]	; 0x24
    6648:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    664a:	4293      	cmp	r3, r2
    664c:	f47f ae9d 	bne.w	638a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x156>
  return kTfLiteOk;
    6650:	2000      	movs	r0, #0
    6652:	e619      	b.n	6288 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x54>
  TFLITE_DCHECK(input->type == kTfLiteUInt8 || input->type == kTfLiteInt8);
    6654:	2803      	cmp	r0, #3
    6656:	d002      	beq.n	665e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x42a>
    6658:	2809      	cmp	r0, #9
    665a:	f040 80f5 	bne.w	6848 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x614>
                                          &activation_min, &activation_max);
    665e:	f899 1014 	ldrb.w	r1, [r9, #20]
    6662:	ab31      	add	r3, sp, #196	; 0xc4
    6664:	9300      	str	r3, [sp, #0]
    6666:	ab30      	add	r3, sp, #192	; 0xc0
    6668:	462a      	mov	r2, r5
    666a:	4620      	mov	r0, r4
    666c:	4c72      	ldr	r4, [pc, #456]	; (6838 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x604>)
    666e:	47a0      	blx	r4
  op_params.stride_height = params->stride_height;
    6670:	f8d9 4008 	ldr.w	r4, [r9, #8]
  op_params.stride_width = params->stride_width;
    6674:	f8d9 3004 	ldr.w	r3, [r9, #4]
    6678:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.filter_height = params->filter_height;
    667a:	f8d9 3010 	ldr.w	r3, [r9, #16]
    667e:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.filter_width = params->filter_width;
    6680:	f8d9 300c 	ldr.w	r3, [r9, #12]
    6684:	9319      	str	r3, [sp, #100]	; 0x64
  op_params.padding_values.height = data->padding.height;
    6686:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
    668a:	931c      	str	r3, [sp, #112]	; 0x70
  op_params.padding_values.width = data->padding.width;
    668c:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
    6690:	931d      	str	r3, [sp, #116]	; 0x74
  op_params.quantized_activation_min = activation_min;
    6692:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    6694:	930b      	str	r3, [sp, #44]	; 0x2c
  op_params.quantized_activation_max = activation_max;
    6696:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    6698:	930c      	str	r3, [sp, #48]	; 0x30
  if (input->type == kTfLiteUInt8) {
    669a:	5dbb      	ldrb	r3, [r7, r6]
    669c:	2b03      	cmp	r3, #3
    669e:	f000 80d5 	beq.w	684c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x618>
  if (tensor == nullptr) {
    66a2:	f1b8 0f00 	cmp.w	r8, #0
    66a6:	f000 8271 	beq.w	6b8c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x958>
  const int dims_size = dims->size;
    66aa:	f8d8 7008 	ldr.w	r7, [r8, #8]
    66ae:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    66b2:	9648      	str	r6, [sp, #288]	; 0x120
    if (dimensions_count > kMaxSmallSize) {
    66b4:	2e05      	cmp	r6, #5
    66b6:	f340 826d 	ble.w	6b94 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x960>
      dims_pointer_ = new int32[dimensions_count];
    66ba:	4b60      	ldr	r3, [pc, #384]	; (683c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x608>)
    66bc:	429e      	cmp	r6, r3
    66be:	bf94      	ite	ls
    66c0:	00b0      	lslls	r0, r6, #2
    66c2:	f04f 30ff 	movhi.w	r0, #4294967295
    66c6:	4b5e      	ldr	r3, [pc, #376]	; (6840 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x60c>)
    66c8:	4798      	blx	r3
    66ca:	9049      	str	r0, [sp, #292]	; 0x124
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    66cc:	00b2      	lsls	r2, r6, #2
    66ce:	4639      	mov	r1, r7
    66d0:	4b5c      	ldr	r3, [pc, #368]	; (6844 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x610>)
    66d2:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    66d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    66d8:	9311      	str	r3, [sp, #68]	; 0x44
  if (tensor == nullptr) {
    66da:	2d00      	cmp	r5, #0
    66dc:	f000 825c 	beq.w	6b98 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x964>
  const int dims_size = dims->size;
    66e0:	68af      	ldr	r7, [r5, #8]
    66e2:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    66e6:	9642      	str	r6, [sp, #264]	; 0x108
    if (dimensions_count > kMaxSmallSize) {
    66e8:	2e05      	cmp	r6, #5
    66ea:	f340 8259 	ble.w	6ba0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x96c>
      dims_pointer_ = new int32[dimensions_count];
    66ee:	4b53      	ldr	r3, [pc, #332]	; (683c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x608>)
    66f0:	429e      	cmp	r6, r3
    66f2:	bf94      	ite	ls
    66f4:	00b0      	lslls	r0, r6, #2
    66f6:	f04f 30ff 	movhi.w	r0, #4294967295
    66fa:	4b51      	ldr	r3, [pc, #324]	; (6840 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x60c>)
    66fc:	4798      	blx	r3
    66fe:	9043      	str	r0, [sp, #268]	; 0x10c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    6700:	00b2      	lsls	r2, r6, #2
    6702:	4639      	mov	r1, r7
    6704:	4b4f      	ldr	r3, [pc, #316]	; (6844 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x610>)
    6706:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6708:	686b      	ldr	r3, [r5, #4]
    670a:	931e      	str	r3, [sp, #120]	; 0x78

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const int8* input_data, const RuntimeShape& output_shape,
                    int8* output_data) {
  TFLITE_DCHECK_LE(params.quantized_activation_min,
                   params.quantized_activation_max);
    670c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    670e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6710:	4293      	cmp	r3, r2
    6712:	f300 8247 	bgt.w	6ba4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x970>
  TFLITE_DCHECK_GE(params.quantized_activation_min,
                   std::numeric_limits<int8_t>::min());
    6716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6718:	f113 0f80 	cmn.w	r3, #128	; 0x80
    671c:	f2c0 8244 	blt.w	6ba8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x974>
  TFLITE_DCHECK_LE(params.quantized_activation_max,
                   std::numeric_limits<int8_t>::max());
    6720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6722:	2b7f      	cmp	r3, #127	; 0x7f
    6724:	f300 8242 	bgt.w	6bac <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x978>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    6728:	9b48      	ldr	r3, [sp, #288]	; 0x120
    672a:	2b04      	cmp	r3, #4
    672c:	f040 8240 	bne.w	6bb0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x97c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    6730:	9b42      	ldr	r3, [sp, #264]	; 0x108
    6732:	2b04      	cmp	r3, #4
    6734:	f040 823e 	bne.w	6bb4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x980>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6738:	9b49      	ldr	r3, [sp, #292]	; 0x124
    673a:	930a      	str	r3, [sp, #40]	; 0x28
    673c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    673e:	9217      	str	r2, [sp, #92]	; 0x5c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    6740:	429a      	cmp	r2, r3
    6742:	f040 8239 	bne.w	6bb8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x984>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6746:	f8dd a130 	ldr.w	sl, [sp, #304]	; 0x130
    674a:	9b46      	ldr	r3, [sp, #280]	; 0x118
    674c:	930d      	str	r3, [sp, #52]	; 0x34
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    674e:	4553      	cmp	r3, sl
    6750:	f040 8234 	bne.w	6bbc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x988>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6754:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    6756:	9309      	str	r3, [sp, #36]	; 0x24
    6758:	f8dd 912c 	ldr.w	r9, [sp, #300]	; 0x12c
    675c:	9a44      	ldr	r2, [sp, #272]	; 0x110
    675e:	9216      	str	r2, [sp, #88]	; 0x58
    6760:	9a45      	ldr	r2, [sp, #276]	; 0x114
    6762:	9215      	str	r2, [sp, #84]	; 0x54
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
    6764:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    6766:	2a00      	cmp	r2, #0
    6768:	f340 820d 	ble.w	6b86 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x952>
    676c:	f04f 0800 	mov.w	r8, #0
    6770:	9428      	str	r4, [sp, #160]	; 0xa0
    6772:	9326      	str	r3, [sp, #152]	; 0x98
    6774:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
    6778:	fb0a f309 	mul.w	r3, sl, r9
    677c:	9308      	str	r3, [sp, #32]
    677e:	f10d 0bbf 	add.w	fp, sp, #191	; 0xbf
    6782:	4653      	mov	r3, sl
    6784:	46c2      	mov	sl, r8
    6786:	4698      	mov	r8, r3
    for (int out_y = 0; out_y < output_height; ++out_y) {
    6788:	9b16      	ldr	r3, [sp, #88]	; 0x58
    678a:	2b00      	cmp	r3, #0
    678c:	f340 82c7 	ble.w	6d1e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaea>
    6790:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6792:	991c      	ldr	r1, [sp, #112]	; 0x70
    6794:	1850      	adds	r0, r2, r1
    6796:	9022      	str	r0, [sp, #136]	; 0x88
    6798:	4249      	negs	r1, r1
    679a:	9110      	str	r1, [sp, #64]	; 0x40
    679c:	2100      	movs	r1, #0
    679e:	9112      	str	r1, [sp, #72]	; 0x48
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    67a0:	fb02 f20a 	mul.w	r2, r2, sl
    67a4:	9224      	str	r2, [sp, #144]	; 0x90
    67a6:	fb03 f30a 	mul.w	r3, r3, sl
    67aa:	9325      	str	r3, [sp, #148]	; 0x94
      for (int out_x = 0; out_x < output_width; ++out_x) {
    67ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
    67ae:	2a00      	cmp	r2, #0
    67b0:	f340 82a7 	ble.w	6d02 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xace>
    67b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    67b6:	9926      	ldr	r1, [sp, #152]	; 0x98
    67b8:	1a59      	subs	r1, r3, r1
    67ba:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    67be:	9113      	str	r1, [sp, #76]	; 0x4c
    67c0:	981b      	ldr	r0, [sp, #108]	; 0x6c
    67c2:	4298      	cmp	r0, r3
    67c4:	bfa8      	it	ge
    67c6:	4618      	movge	r0, r3
    67c8:	9005      	str	r0, [sp, #20]
    67ca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    67cc:	9327      	str	r3, [sp, #156]	; 0x9c
    67ce:	981d      	ldr	r0, [sp, #116]	; 0x74
    67d0:	eb09 0300 	add.w	r3, r9, r0
    67d4:	9320      	str	r3, [sp, #128]	; 0x80
    67d6:	4243      	negs	r3, r0
    67d8:	930f      	str	r3, [sp, #60]	; 0x3c
          const int filter_x_start = std::max(0, -in_x_origin);
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
    67da:	2300      	movs	r3, #0
    67dc:	930e      	str	r3, [sp, #56]	; 0x38
    67de:	9b24      	ldr	r3, [sp, #144]	; 0x90
    67e0:	9810      	ldr	r0, [sp, #64]	; 0x40
    67e2:	4403      	add	r3, r0
    67e4:	440b      	add	r3, r1
    67e6:	9921      	ldr	r1, [sp, #132]	; 0x84
    67e8:	fb01 f303 	mul.w	r3, r1, r3
    67ec:	9323      	str	r3, [sp, #140]	; 0x8c
    67ee:	9b25      	ldr	r3, [sp, #148]	; 0x94
    67f0:	9912      	ldr	r1, [sp, #72]	; 0x48
    67f2:	440b      	add	r3, r1
    67f4:	fb02 f303 	mul.w	r3, r2, r3
    67f8:	931f      	str	r3, [sp, #124]	; 0x7c
        for (int channel = 0; channel < depth; ++channel) {
    67fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    67fc:	2b00      	cmp	r3, #0
    67fe:	f340 8272 	ble.w	6ce6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xab2>
              (out_x * stride_width) - params.padding_values.width;
    6802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6804:	9314      	str	r3, [sp, #80]	; 0x50
    6806:	9a20      	ldr	r2, [sp, #128]	; 0x80
    6808:	9921      	ldr	r1, [sp, #132]	; 0x84
    680a:	1a51      	subs	r1, r2, r1
    680c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    6810:	9103      	str	r1, [sp, #12]
    6812:	9819      	ldr	r0, [sp, #100]	; 0x64
    6814:	4290      	cmp	r0, r2
    6816:	bfa8      	it	ge
    6818:	4610      	movge	r0, r2
    681a:	9004      	str	r0, [sp, #16]
              std::min(params.filter_width, input_width - in_x_origin);
    681c:	2400      	movs	r4, #0
    681e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    6820:	18d3      	adds	r3, r2, r3
    6822:	440b      	add	r3, r1
    6824:	fb08 f303 	mul.w	r3, r8, r3
    6828:	9318      	str	r3, [sp, #96]	; 0x60
    682a:	e239      	b.n	6ca0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xa6c>
    682c:	0001381d 	.word	0x0001381d
    6830:	00013859 	.word	0x00013859
    6834:	00014b3d 	.word	0x00014b3d
    6838:	00001d65 	.word	0x00001d65
    683c:	1ffffffe 	.word	0x1ffffffe
    6840:	0000a511 	.word	0x0000a511
    6844:	000158c1 	.word	0x000158c1
  TFLITE_DCHECK(input->type == kTfLiteUInt8 || input->type == kTfLiteInt8);
    6848:	4b8e      	ldr	r3, [pc, #568]	; (6a84 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    684a:	4798      	blx	r3
  if (tensor == nullptr) {
    684c:	f1b8 0f00 	cmp.w	r8, #0
    6850:	f000 80c0 	beq.w	69d4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7a0>
  const int dims_size = dims->size;
    6854:	f8d8 7008 	ldr.w	r7, [r8, #8]
    6858:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    685c:	9654      	str	r6, [sp, #336]	; 0x150
    if (dimensions_count > kMaxSmallSize) {
    685e:	2e05      	cmp	r6, #5
    6860:	f340 80bc 	ble.w	69dc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7a8>
      dims_pointer_ = new int32[dimensions_count];
    6864:	4b88      	ldr	r3, [pc, #544]	; (6a88 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x854>)
    6866:	429e      	cmp	r6, r3
    6868:	bf94      	ite	ls
    686a:	00b0      	lslls	r0, r6, #2
    686c:	f04f 30ff 	movhi.w	r0, #4294967295
    6870:	4b86      	ldr	r3, [pc, #536]	; (6a8c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x858>)
    6872:	4798      	blx	r3
    6874:	9055      	str	r0, [sp, #340]	; 0x154
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    6876:	00b2      	lsls	r2, r6, #2
    6878:	4639      	mov	r1, r7
    687a:	4b85      	ldr	r3, [pc, #532]	; (6a90 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x85c>)
    687c:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    687e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    6882:	9312      	str	r3, [sp, #72]	; 0x48
  if (tensor == nullptr) {
    6884:	2d00      	cmp	r5, #0
    6886:	f000 80ab 	beq.w	69e0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7ac>
  const int dims_size = dims->size;
    688a:	68af      	ldr	r7, [r5, #8]
    688c:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    6890:	964e      	str	r6, [sp, #312]	; 0x138
    if (dimensions_count > kMaxSmallSize) {
    6892:	2e05      	cmp	r6, #5
    6894:	f340 80a8 	ble.w	69e8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7b4>
      dims_pointer_ = new int32[dimensions_count];
    6898:	4b7b      	ldr	r3, [pc, #492]	; (6a88 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x854>)
    689a:	429e      	cmp	r6, r3
    689c:	bf94      	ite	ls
    689e:	00b0      	lslls	r0, r6, #2
    68a0:	f04f 30ff 	movhi.w	r0, #4294967295
    68a4:	4b79      	ldr	r3, [pc, #484]	; (6a8c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x858>)
    68a6:	4798      	blx	r3
    68a8:	904f      	str	r0, [sp, #316]	; 0x13c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    68aa:	00b2      	lsls	r2, r6, #2
    68ac:	4639      	mov	r1, r7
    68ae:	4b78      	ldr	r3, [pc, #480]	; (6a90 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x85c>)
    68b0:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    68b2:	686b      	ldr	r3, [r5, #4]
    68b4:	9317      	str	r3, [sp, #92]	; 0x5c

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8* input_data, const RuntimeShape& output_shape,
                    uint8* output_data) {
  TFLITE_DCHECK_LE(params.quantized_activation_min,
                   params.quantized_activation_max);
    68b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    68b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    68ba:	4293      	cmp	r3, r2
    68bc:	f300 8096 	bgt.w	69ec <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7b8>
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
    68c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    68c2:	2b00      	cmp	r3, #0
    68c4:	f2c0 8094 	blt.w	69f0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7bc>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
    68c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    68ca:	2bff      	cmp	r3, #255	; 0xff
    68cc:	f300 8092 	bgt.w	69f4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7c0>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    68d0:	9b54      	ldr	r3, [sp, #336]	; 0x150
    68d2:	2b04      	cmp	r3, #4
    68d4:	f040 8090 	bne.w	69f8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7c4>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    68d8:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    68da:	2b04      	cmp	r3, #4
    68dc:	f040 808e 	bne.w	69fc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7c8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    68e0:	9b55      	ldr	r3, [sp, #340]	; 0x154
    68e2:	930a      	str	r3, [sp, #40]	; 0x28
    68e4:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
    68e6:	9215      	str	r2, [sp, #84]	; 0x54
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    68e8:	429a      	cmp	r2, r3
    68ea:	f040 8089 	bne.w	6a00 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7cc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    68ee:	f8dd a160 	ldr.w	sl, [sp, #352]	; 0x160
    68f2:	9b52      	ldr	r3, [sp, #328]	; 0x148
    68f4:	9311      	str	r3, [sp, #68]	; 0x44
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    68f6:	4553      	cmp	r3, sl
    68f8:	f040 8084 	bne.w	6a04 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7d0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    68fc:	9b56      	ldr	r3, [sp, #344]	; 0x158
    68fe:	9309      	str	r3, [sp, #36]	; 0x24
    6900:	f8dd 915c 	ldr.w	r9, [sp, #348]	; 0x15c
    6904:	9a50      	ldr	r2, [sp, #320]	; 0x140
    6906:	9214      	str	r2, [sp, #80]	; 0x50
    6908:	9a51      	ldr	r2, [sp, #324]	; 0x144
    690a:	9213      	str	r2, [sp, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
    690c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    690e:	2a00      	cmp	r2, #0
    6910:	f340 8139 	ble.w	6b86 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x952>
    6914:	f04f 0800 	mov.w	r8, #0
    6918:	9427      	str	r4, [sp, #156]	; 0x9c
    691a:	9328      	str	r3, [sp, #160]	; 0xa0
    691c:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
    6920:	fb0a f309 	mul.w	r3, sl, r9
    6924:	9308      	str	r3, [sp, #32]
    6926:	f10d 0bbf 	add.w	fp, sp, #191	; 0xbf
    692a:	4653      	mov	r3, sl
    692c:	46c2      	mov	sl, r8
    692e:	4698      	mov	r8, r3
    for (int out_y = 0; out_y < output_height; ++out_y) {
    6930:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6932:	2b00      	cmp	r3, #0
    6934:	f340 8121 	ble.w	6b7a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x946>
    6938:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    693a:	9909      	ldr	r1, [sp, #36]	; 0x24
    693c:	1850      	adds	r0, r2, r1
    693e:	901e      	str	r0, [sp, #120]	; 0x78
    6940:	4252      	negs	r2, r2
    6942:	920d      	str	r2, [sp, #52]	; 0x34
    6944:	2200      	movs	r2, #0
    6946:	9210      	str	r2, [sp, #64]	; 0x40
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    6948:	fb01 f20a 	mul.w	r2, r1, sl
    694c:	9225      	str	r2, [sp, #148]	; 0x94
    694e:	fb03 f30a 	mul.w	r3, r3, sl
    6952:	9326      	str	r3, [sp, #152]	; 0x98
      for (int out_x = 0; out_x < output_width; ++out_x) {
    6954:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6956:	2a00      	cmp	r2, #0
    6958:	f340 8101 	ble.w	6b5e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x92a>
    695c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    695e:	9928      	ldr	r1, [sp, #160]	; 0xa0
    6960:	1a59      	subs	r1, r3, r1
    6962:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    6966:	9116      	str	r1, [sp, #88]	; 0x58
    6968:	981b      	ldr	r0, [sp, #108]	; 0x6c
    696a:	4298      	cmp	r0, r3
    696c:	bfa8      	it	ge
    696e:	4618      	movge	r0, r3
    6970:	9005      	str	r0, [sp, #20]
    6972:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    6974:	9323      	str	r3, [sp, #140]	; 0x8c
    6976:	981d      	ldr	r0, [sp, #116]	; 0x74
    6978:	eb09 0300 	add.w	r3, r9, r0
    697c:	931f      	str	r3, [sp, #124]	; 0x7c
    697e:	4243      	negs	r3, r0
    6980:	930f      	str	r3, [sp, #60]	; 0x3c
          const int filter_x_start = std::max(0, -in_x_origin);
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
    6982:	2300      	movs	r3, #0
    6984:	930e      	str	r3, [sp, #56]	; 0x38
    6986:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6988:	980d      	ldr	r0, [sp, #52]	; 0x34
    698a:	4403      	add	r3, r0
    698c:	440b      	add	r3, r1
    698e:	9922      	ldr	r1, [sp, #136]	; 0x88
    6990:	fb01 f303 	mul.w	r3, r1, r3
    6994:	9324      	str	r3, [sp, #144]	; 0x90
    6996:	9b26      	ldr	r3, [sp, #152]	; 0x98
    6998:	9910      	ldr	r1, [sp, #64]	; 0x40
    699a:	440b      	add	r3, r1
    699c:	fb02 f303 	mul.w	r3, r2, r3
    69a0:	9321      	str	r3, [sp, #132]	; 0x84
        for (int channel = 0; channel < depth; ++channel) {
    69a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    69a4:	2b00      	cmp	r3, #0
    69a6:	f340 80cc 	ble.w	6b42 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x90e>
              (out_x * stride_width) - params.padding_values.width;
    69aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69ac:	9318      	str	r3, [sp, #96]	; 0x60
    69ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    69b0:	9922      	ldr	r1, [sp, #136]	; 0x88
    69b2:	1a51      	subs	r1, r2, r1
    69b4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    69b8:	9104      	str	r1, [sp, #16]
    69ba:	9819      	ldr	r0, [sp, #100]	; 0x64
    69bc:	4290      	cmp	r0, r2
    69be:	bfa8      	it	ge
    69c0:	4610      	movge	r0, r2
    69c2:	9003      	str	r0, [sp, #12]
              std::min(params.filter_width, input_width - in_x_origin);
    69c4:	2400      	movs	r4, #0
    69c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
    69c8:	18d3      	adds	r3, r2, r3
    69ca:	440b      	add	r3, r1
    69cc:	fb08 f303 	mul.w	r3, r8, r3
    69d0:	9320      	str	r3, [sp, #128]	; 0x80
    69d2:	e090      	b.n	6af6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8c2>
  RuntimeShape() : size_(0) {}
    69d4:	2300      	movs	r3, #0
    69d6:	9354      	str	r3, [sp, #336]	; 0x150
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    69d8:	9312      	str	r3, [sp, #72]	; 0x48
    69da:	e753      	b.n	6884 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x650>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    69dc:	a855      	add	r0, sp, #340	; 0x154
    69de:	e74a      	b.n	6876 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x642>
  RuntimeShape() : size_(0) {}
    69e0:	2300      	movs	r3, #0
    69e2:	934e      	str	r3, [sp, #312]	; 0x138
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    69e4:	9317      	str	r3, [sp, #92]	; 0x5c
    69e6:	e766      	b.n	68b6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x682>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    69e8:	a84f      	add	r0, sp, #316	; 0x13c
    69ea:	e75e      	b.n	68aa <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x676>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    69ec:	4b25      	ldr	r3, [pc, #148]	; (6a84 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    69ee:	4798      	blx	r3
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
    69f0:	4b24      	ldr	r3, [pc, #144]	; (6a84 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    69f2:	4798      	blx	r3
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
    69f4:	4b23      	ldr	r3, [pc, #140]	; (6a84 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    69f6:	4798      	blx	r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    69f8:	4b22      	ldr	r3, [pc, #136]	; (6a84 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    69fa:	4798      	blx	r3
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    69fc:	4b21      	ldr	r3, [pc, #132]	; (6a84 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    69fe:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    6a00:	4b20      	ldr	r3, [pc, #128]	; (6a84 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    6a02:	4798      	blx	r3
    6a04:	4b1f      	ldr	r3, [pc, #124]	; (6a84 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    6a06:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    6a08:	4b1e      	ldr	r3, [pc, #120]	; (6a84 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    6a0a:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    6a0c:	4b1d      	ldr	r3, [pc, #116]	; (6a84 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    6a0e:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    6a10:	4b1c      	ldr	r3, [pc, #112]	; (6a84 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    6a12:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    6a14:	4b1b      	ldr	r3, [pc, #108]	; (6a84 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    6a16:	4798      	blx	r3
          uint8 max = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    6a18:	f10c 0c01 	add.w	ip, ip, #1
    6a1c:	9b08      	ldr	r3, [sp, #32]
    6a1e:	449e      	add	lr, r3
    6a20:	3701      	adds	r7, #1
    6a22:	9b05      	ldr	r3, [sp, #20]
    6a24:	4563      	cmp	r3, ip
    6a26:	dd35      	ble.n	6a94 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x860>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    6a28:	9b03      	ldr	r3, [sp, #12]
    6a2a:	9a04      	ldr	r2, [sp, #16]
    6a2c:	4293      	cmp	r3, r2
    6a2e:	ddf3      	ble.n	6a18 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7e4>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    6a30:	f1ba 0f00 	cmp.w	sl, #0
    6a34:	dbe8      	blt.n	6a08 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7d4>
    6a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6a38:	459a      	cmp	sl, r3
    6a3a:	dae5      	bge.n	6a08 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7d4>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    6a3c:	2f00      	cmp	r7, #0
    6a3e:	dbe5      	blt.n	6a0c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7d8>
    6a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6a42:	429f      	cmp	r7, r3
    6a44:	dae2      	bge.n	6a0c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7d8>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    6a46:	9b06      	ldr	r3, [sp, #24]
    6a48:	2b00      	cmp	r3, #0
    6a4a:	dbe1      	blt.n	6a10 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7dc>
    6a4c:	4599      	cmp	r9, r3
    6a4e:	dddf      	ble.n	6a10 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7dc>
    6a50:	9b07      	ldr	r3, [sp, #28]
    6a52:	4672      	mov	r2, lr
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    6a54:	2c00      	cmp	r4, #0
    6a56:	dbdd      	blt.n	6a14 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7e0>
    6a58:	45a0      	cmp	r8, r4
    6a5a:	dddb      	ble.n	6a14 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7e0>
      if (__a < __b)
    6a5c:	f89d 00bf 	ldrb.w	r0, [sp, #191]	; 0xbf
    6a60:	7811      	ldrb	r1, [r2, #0]
    6a62:	4288      	cmp	r0, r1
      return __a;
    6a64:	bfac      	ite	ge
    6a66:	4659      	movge	r1, fp
    6a68:	4611      	movlt	r1, r2
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
    6a6a:	7809      	ldrb	r1, [r1, #0]
    6a6c:	f88d 10bf 	strb.w	r1, [sp, #191]	; 0xbf
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    6a70:	42ab      	cmp	r3, r5
    6a72:	d0d1      	beq.n	6a18 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7e4>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    6a74:	2b00      	cmp	r3, #0
    6a76:	dbcb      	blt.n	6a10 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7dc>
    6a78:	1c59      	adds	r1, r3, #1
    6a7a:	4432      	add	r2, r6
    6a7c:	454b      	cmp	r3, r9
    6a7e:	dac7      	bge.n	6a10 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7dc>
    6a80:	460b      	mov	r3, r1
    6a82:	e7e7      	b.n	6a54 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x820>
    6a84:	00014b3d 	.word	0x00014b3d
    6a88:	1ffffffe 	.word	0x1ffffffe
    6a8c:	0000a511 	.word	0x0000a511
    6a90:	000158c1 	.word	0x000158c1
      if (__a < __b)
    6a94:	f89d 30bf 	ldrb.w	r3, [sp, #191]	; 0xbf
    6a98:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    6a9c:	429a      	cmp	r2, r3
    6a9e:	dd01      	ble.n	6aa4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x870>
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
            }
          }
          max = std::max<uint8>(max, params.quantized_activation_min);
    6aa0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    6aa4:	f88d 30bf 	strb.w	r3, [sp, #191]	; 0xbf
      if (__b < __a)
    6aa8:	990c      	ldr	r1, [sp, #48]	; 0x30
    6aaa:	b2ca      	uxtb	r2, r1
    6aac:	4293      	cmp	r3, r2
          max = std::min<uint8>(max, params.quantized_activation_max);
    6aae:	bfc8      	it	gt
    6ab0:	4613      	movgt	r3, r2
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    6ab2:	f1ba 0f00 	cmp.w	sl, #0
    6ab6:	db3c      	blt.n	6b32 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8fe>
    6ab8:	9a15      	ldr	r2, [sp, #84]	; 0x54
    6aba:	4592      	cmp	sl, r2
    6abc:	da39      	bge.n	6b32 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8fe>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    6abe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6ac0:	2a00      	cmp	r2, #0
    6ac2:	db38      	blt.n	6b36 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x902>
    6ac4:	9914      	ldr	r1, [sp, #80]	; 0x50
    6ac6:	4291      	cmp	r1, r2
    6ac8:	dd35      	ble.n	6b36 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x902>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    6aca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6acc:	2a00      	cmp	r2, #0
    6ace:	db34      	blt.n	6b3a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x906>
    6ad0:	9913      	ldr	r1, [sp, #76]	; 0x4c
    6ad2:	4291      	cmp	r1, r2
    6ad4:	dd31      	ble.n	6b3a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x906>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    6ad6:	2c00      	cmp	r4, #0
    6ad8:	db31      	blt.n	6b3e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x90a>
    6ada:	9a11      	ldr	r2, [sp, #68]	; 0x44
    6adc:	42a2      	cmp	r2, r4
    6ade:	dd2e      	ble.n	6b3e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x90a>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    6ae0:	9a21      	ldr	r2, [sp, #132]	; 0x84
    6ae2:	990e      	ldr	r1, [sp, #56]	; 0x38
    6ae4:	440a      	add	r2, r1
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    6ae6:	9811      	ldr	r0, [sp, #68]	; 0x44
    6ae8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    6aea:	fb00 5202 	mla	r2, r0, r2, r5
    6aee:	5513      	strb	r3, [r2, r4]
        for (int channel = 0; channel < depth; ++channel) {
    6af0:	3401      	adds	r4, #1
    6af2:	4284      	cmp	r4, r0
    6af4:	d025      	beq.n	6b42 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x90e>
          uint8 max = 0;
    6af6:	2300      	movs	r3, #0
    6af8:	f88d 30bf 	strb.w	r3, [sp, #191]	; 0xbf
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    6afc:	9a16      	ldr	r2, [sp, #88]	; 0x58
    6afe:	9905      	ldr	r1, [sp, #20]
    6b00:	428a      	cmp	r2, r1
    6b02:	f280 8113 	bge.w	6d2c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaf8>
    6b06:	4646      	mov	r6, r8
    6b08:	9b20      	ldr	r3, [sp, #128]	; 0x80
    6b0a:	eb03 0e04 	add.w	lr, r3, r4
    6b0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6b10:	449e      	add	lr, r3
    6b12:	4613      	mov	r3, r2
    6b14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6b16:	189f      	adds	r7, r3, r2
    6b18:	469c      	mov	ip, r3
              const int in_x = in_x_origin + filter_x;
    6b1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    6b1c:	4613      	mov	r3, r2
    6b1e:	9904      	ldr	r1, [sp, #16]
    6b20:	440b      	add	r3, r1
    6b22:	9306      	str	r3, [sp, #24]
    6b24:	1c4b      	adds	r3, r1, #1
    6b26:	4413      	add	r3, r2
    6b28:	9307      	str	r3, [sp, #28]
    6b2a:	9b03      	ldr	r3, [sp, #12]
    6b2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6b2e:	189d      	adds	r5, r3, r2
    6b30:	e77a      	b.n	6a28 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7f4>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    6b32:	4b83      	ldr	r3, [pc, #524]	; (6d40 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    6b34:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    6b36:	4b82      	ldr	r3, [pc, #520]	; (6d40 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    6b38:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    6b3a:	4b81      	ldr	r3, [pc, #516]	; (6d40 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    6b3c:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    6b3e:	4b80      	ldr	r3, [pc, #512]	; (6d40 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    6b40:	4798      	blx	r3
      for (int out_x = 0; out_x < output_width; ++out_x) {
    6b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6b44:	3301      	adds	r3, #1
    6b46:	930e      	str	r3, [sp, #56]	; 0x38
    6b48:	991f      	ldr	r1, [sp, #124]	; 0x7c
    6b4a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    6b4c:	1a89      	subs	r1, r1, r2
    6b4e:	911f      	str	r1, [sp, #124]	; 0x7c
    6b50:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6b52:	4411      	add	r1, r2
    6b54:	910f      	str	r1, [sp, #60]	; 0x3c
    6b56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6b58:	4293      	cmp	r3, r2
    6b5a:	f47f af22 	bne.w	69a2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x76e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    6b5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6b60:	3301      	adds	r3, #1
    6b62:	9310      	str	r3, [sp, #64]	; 0x40
    6b64:	991e      	ldr	r1, [sp, #120]	; 0x78
    6b66:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    6b68:	1a89      	subs	r1, r1, r2
    6b6a:	911e      	str	r1, [sp, #120]	; 0x78
    6b6c:	990d      	ldr	r1, [sp, #52]	; 0x34
    6b6e:	4411      	add	r1, r2
    6b70:	910d      	str	r1, [sp, #52]	; 0x34
    6b72:	9a14      	ldr	r2, [sp, #80]	; 0x50
    6b74:	4293      	cmp	r3, r2
    6b76:	f47f aeed 	bne.w	6954 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x720>
  for (int batch = 0; batch < batches; ++batch) {
    6b7a:	f10a 0a01 	add.w	sl, sl, #1
    6b7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6b80:	459a      	cmp	sl, r3
    6b82:	f47f aed5 	bne.w	6930 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6fc>
  return kTfLiteOk;
    6b86:	2000      	movs	r0, #0
    6b88:	f7ff bb7e 	b.w	6288 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x54>
  RuntimeShape() : size_(0) {}
    6b8c:	2300      	movs	r3, #0
    6b8e:	9348      	str	r3, [sp, #288]	; 0x120
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    6b90:	9311      	str	r3, [sp, #68]	; 0x44
    6b92:	e5a2      	b.n	66da <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x4a6>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6b94:	a849      	add	r0, sp, #292	; 0x124
    6b96:	e599      	b.n	66cc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x498>
  RuntimeShape() : size_(0) {}
    6b98:	2300      	movs	r3, #0
    6b9a:	9342      	str	r3, [sp, #264]	; 0x108
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6b9c:	931e      	str	r3, [sp, #120]	; 0x78
    6b9e:	e5b5      	b.n	670c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x4d8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6ba0:	a843      	add	r0, sp, #268	; 0x10c
    6ba2:	e5ad      	b.n	6700 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x4cc>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    6ba4:	4b66      	ldr	r3, [pc, #408]	; (6d40 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    6ba6:	4798      	blx	r3
  TFLITE_DCHECK_GE(params.quantized_activation_min,
    6ba8:	4b65      	ldr	r3, [pc, #404]	; (6d40 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    6baa:	4798      	blx	r3
  TFLITE_DCHECK_LE(params.quantized_activation_max,
    6bac:	4b64      	ldr	r3, [pc, #400]	; (6d40 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    6bae:	4798      	blx	r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    6bb0:	4b63      	ldr	r3, [pc, #396]	; (6d40 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    6bb2:	4798      	blx	r3
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    6bb4:	4b62      	ldr	r3, [pc, #392]	; (6d40 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    6bb6:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    6bb8:	4b61      	ldr	r3, [pc, #388]	; (6d40 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    6bba:	4798      	blx	r3
    6bbc:	4b60      	ldr	r3, [pc, #384]	; (6d40 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    6bbe:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    6bc0:	4b5f      	ldr	r3, [pc, #380]	; (6d40 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    6bc2:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    6bc4:	4b5e      	ldr	r3, [pc, #376]	; (6d40 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    6bc6:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    6bc8:	4b5d      	ldr	r3, [pc, #372]	; (6d40 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    6bca:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    6bcc:	4b5c      	ldr	r3, [pc, #368]	; (6d40 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    6bce:	4798      	blx	r3
          int8_t max = std::numeric_limits<int8_t>::lowest();
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    6bd0:	f10c 0c01 	add.w	ip, ip, #1
    6bd4:	9b08      	ldr	r3, [sp, #32]
    6bd6:	449e      	add	lr, r3
    6bd8:	3701      	adds	r7, #1
    6bda:	9b05      	ldr	r3, [sp, #20]
    6bdc:	4563      	cmp	r3, ip
    6bde:	dd2f      	ble.n	6c40 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xa0c>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    6be0:	9b03      	ldr	r3, [sp, #12]
    6be2:	9a04      	ldr	r2, [sp, #16]
    6be4:	4293      	cmp	r3, r2
    6be6:	daf3      	bge.n	6bd0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x99c>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    6be8:	f1ba 0f00 	cmp.w	sl, #0
    6bec:	dbe8      	blt.n	6bc0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x98c>
    6bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6bf0:	459a      	cmp	sl, r3
    6bf2:	dae5      	bge.n	6bc0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x98c>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    6bf4:	2f00      	cmp	r7, #0
    6bf6:	dbe5      	blt.n	6bc4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x990>
    6bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6bfa:	429f      	cmp	r7, r3
    6bfc:	dae2      	bge.n	6bc4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x990>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    6bfe:	9b06      	ldr	r3, [sp, #24]
    6c00:	2b00      	cmp	r3, #0
    6c02:	dbe1      	blt.n	6bc8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x994>
    6c04:	454b      	cmp	r3, r9
    6c06:	dadf      	bge.n	6bc8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x994>
    6c08:	9b07      	ldr	r3, [sp, #28]
    6c0a:	4672      	mov	r2, lr
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    6c0c:	2c00      	cmp	r4, #0
    6c0e:	dbdd      	blt.n	6bcc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x998>
    6c10:	4544      	cmp	r4, r8
    6c12:	dadb      	bge.n	6bcc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x998>
      if (__a < __b)
    6c14:	f99d 00bf 	ldrsb.w	r0, [sp, #191]	; 0xbf
    6c18:	f992 1000 	ldrsb.w	r1, [r2]
    6c1c:	4288      	cmp	r0, r1
      return __a;
    6c1e:	bfac      	ite	ge
    6c20:	4659      	movge	r1, fp
    6c22:	4611      	movlt	r1, r2
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
    6c24:	f991 1000 	ldrsb.w	r1, [r1]
    6c28:	f88d 10bf 	strb.w	r1, [sp, #191]	; 0xbf
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    6c2c:	42ab      	cmp	r3, r5
    6c2e:	d0cf      	beq.n	6bd0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x99c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    6c30:	2b00      	cmp	r3, #0
    6c32:	dbc9      	blt.n	6bc8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x994>
    6c34:	1c59      	adds	r1, r3, #1
    6c36:	4432      	add	r2, r6
    6c38:	4599      	cmp	r9, r3
    6c3a:	ddc5      	ble.n	6bc8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x994>
    6c3c:	460b      	mov	r3, r1
    6c3e:	e7e5      	b.n	6c0c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9d8>
    6c40:	f99d 20bf 	ldrsb.w	r2, [sp, #191]	; 0xbf
    6c44:	f99d 302c 	ldrsb.w	r3, [sp, #44]	; 0x2c
    6c48:	4293      	cmp	r3, r2
    6c4a:	bfb8      	it	lt
    6c4c:	4613      	movlt	r3, r2
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
            }
          }
          max = std::max<int8_t>(max, params.quantized_activation_min);
    6c4e:	f88d 30bf 	strb.w	r3, [sp, #191]	; 0xbf
    6c52:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    6c56:	4293      	cmp	r3, r2
    6c58:	bfa8      	it	ge
    6c5a:	4613      	movge	r3, r2
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    6c5c:	f1ba 0f00 	cmp.w	sl, #0
    6c60:	db39      	blt.n	6cd6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaa2>
    6c62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    6c64:	4592      	cmp	sl, r2
    6c66:	da36      	bge.n	6cd6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaa2>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    6c68:	9a12      	ldr	r2, [sp, #72]	; 0x48
    6c6a:	2a00      	cmp	r2, #0
    6c6c:	db35      	blt.n	6cda <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaa6>
    6c6e:	9916      	ldr	r1, [sp, #88]	; 0x58
    6c70:	428a      	cmp	r2, r1
    6c72:	da32      	bge.n	6cda <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaa6>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    6c74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6c76:	2a00      	cmp	r2, #0
    6c78:	db31      	blt.n	6cde <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaaa>
    6c7a:	9915      	ldr	r1, [sp, #84]	; 0x54
    6c7c:	4291      	cmp	r1, r2
    6c7e:	dd2e      	ble.n	6cde <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaaa>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    6c80:	2c00      	cmp	r4, #0
    6c82:	db2e      	blt.n	6ce2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaae>
    6c84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6c86:	4294      	cmp	r4, r2
    6c88:	da2b      	bge.n	6ce2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaae>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    6c8a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    6c8c:	990e      	ldr	r1, [sp, #56]	; 0x38
    6c8e:	440a      	add	r2, r1
          max = std::min<int8_t>(max, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    6c90:	980d      	ldr	r0, [sp, #52]	; 0x34
    6c92:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    6c94:	fb00 5202 	mla	r2, r0, r2, r5
    6c98:	5513      	strb	r3, [r2, r4]
        for (int channel = 0; channel < depth; ++channel) {
    6c9a:	3401      	adds	r4, #1
    6c9c:	4284      	cmp	r4, r0
    6c9e:	d022      	beq.n	6ce6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xab2>
          int8_t max = std::numeric_limits<int8_t>::lowest();
    6ca0:	2380      	movs	r3, #128	; 0x80
    6ca2:	f88d 30bf 	strb.w	r3, [sp, #191]	; 0xbf
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    6ca6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6ca8:	9905      	ldr	r1, [sp, #20]
    6caa:	428a      	cmp	r2, r1
    6cac:	dac8      	bge.n	6c40 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xa0c>
    6cae:	4646      	mov	r6, r8
    6cb0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    6cb2:	eb03 0e04 	add.w	lr, r3, r4
    6cb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6cb8:	449e      	add	lr, r3
    6cba:	9910      	ldr	r1, [sp, #64]	; 0x40
    6cbc:	188f      	adds	r7, r1, r2
    6cbe:	4694      	mov	ip, r2
              const int in_x = in_x_origin + filter_x;
    6cc0:	9b03      	ldr	r3, [sp, #12]
    6cc2:	9a14      	ldr	r2, [sp, #80]	; 0x50
    6cc4:	1899      	adds	r1, r3, r2
    6cc6:	9106      	str	r1, [sp, #24]
    6cc8:	3301      	adds	r3, #1
    6cca:	4413      	add	r3, r2
    6ccc:	9307      	str	r3, [sp, #28]
    6cce:	9b04      	ldr	r3, [sp, #16]
    6cd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6cd2:	189d      	adds	r5, r3, r2
    6cd4:	e784      	b.n	6be0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9ac>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    6cd6:	4b1a      	ldr	r3, [pc, #104]	; (6d40 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    6cd8:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    6cda:	4b19      	ldr	r3, [pc, #100]	; (6d40 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    6cdc:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    6cde:	4b18      	ldr	r3, [pc, #96]	; (6d40 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    6ce0:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    6ce2:	4b17      	ldr	r3, [pc, #92]	; (6d40 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    6ce4:	4798      	blx	r3
      for (int out_x = 0; out_x < output_width; ++out_x) {
    6ce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6ce8:	3301      	adds	r3, #1
    6cea:	930e      	str	r3, [sp, #56]	; 0x38
    6cec:	9920      	ldr	r1, [sp, #128]	; 0x80
    6cee:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    6cf0:	1a89      	subs	r1, r1, r2
    6cf2:	9120      	str	r1, [sp, #128]	; 0x80
    6cf4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6cf6:	4411      	add	r1, r2
    6cf8:	910f      	str	r1, [sp, #60]	; 0x3c
    6cfa:	9a15      	ldr	r2, [sp, #84]	; 0x54
    6cfc:	4293      	cmp	r3, r2
    6cfe:	f47f ad7c 	bne.w	67fa <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5c6>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    6d02:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6d04:	3301      	adds	r3, #1
    6d06:	9312      	str	r3, [sp, #72]	; 0x48
    6d08:	9922      	ldr	r1, [sp, #136]	; 0x88
    6d0a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    6d0c:	1a89      	subs	r1, r1, r2
    6d0e:	9122      	str	r1, [sp, #136]	; 0x88
    6d10:	9910      	ldr	r1, [sp, #64]	; 0x40
    6d12:	4411      	add	r1, r2
    6d14:	9110      	str	r1, [sp, #64]	; 0x40
    6d16:	9a16      	ldr	r2, [sp, #88]	; 0x58
    6d18:	4293      	cmp	r3, r2
    6d1a:	f47f ad47 	bne.w	67ac <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x578>
  for (int batch = 0; batch < batches; ++batch) {
    6d1e:	f10a 0a01 	add.w	sl, sl, #1
    6d22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    6d24:	459a      	cmp	sl, r3
    6d26:	f47f ad2f 	bne.w	6788 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x554>
    6d2a:	e72c      	b.n	6b86 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x952>
      if (__a < __b)
    6d2c:	f89d 30bf 	ldrb.w	r3, [sp, #191]	; 0xbf
    6d30:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    6d34:	429a      	cmp	r2, r3
    6d36:	f73f aeb3 	bgt.w	6aa0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x86c>
          max = std::max<uint8>(max, params.quantized_activation_min);
    6d3a:	f88d 30bf 	strb.w	r3, [sp, #191]	; 0xbf
    6d3e:	e6b8      	b.n	6ab2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x87e>
    6d40:	00014b3d 	.word	0x00014b3d

00006d44 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
}

TfLiteRegistration Register_MAX_POOL_2D() {
    6d44:	b510      	push	{r4, lr}
    6d46:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/pooling::MaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    6d48:	2220      	movs	r2, #32
    6d4a:	2100      	movs	r1, #0
    6d4c:	4b02      	ldr	r3, [pc, #8]	; (6d58 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x14>)
    6d4e:	4798      	blx	r3
    6d50:	4b02      	ldr	r3, [pc, #8]	; (6d5c <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x18>)
    6d52:	60e3      	str	r3, [r4, #12]
}
    6d54:	4620      	mov	r0, r4
    6d56:	bd10      	pop	{r4, pc}
    6d58:	00015abd 	.word	0x00015abd
    6d5c:	00006235 	.word	0x00006235

00006d60 <_ZN6tflite3ops5micro11activations11SoftmaxInitEP13TfLiteContextPKcj>:
          GetTensorShape(output), GetTensorData<int8_t>(output));
    }
  }
}

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
    6d60:	b500      	push	{lr}
    6d62:	b083      	sub	sp, #12
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    6d64:	6b83      	ldr	r3, [r0, #56]	; 0x38
    6d66:	b163      	cbz	r3, 6d82 <_ZN6tflite3ops5micro11activations11SoftmaxInitEP13TfLiteContextPKcj+0x22>
  void* data = nullptr;
    6d68:	aa02      	add	r2, sp, #8
    6d6a:	2100      	movs	r1, #0
    6d6c:	f842 1d04 	str.w	r1, [r2, #-4]!
  if (context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams),
    6d70:	2138      	movs	r1, #56	; 0x38
    6d72:	4798      	blx	r3
    6d74:	2801      	cmp	r0, #1
                                        &data) == kTfLiteError) {
    return nullptr;
  }
  return data;
    6d76:	bf14      	ite	ne
    6d78:	9801      	ldrne	r0, [sp, #4]
    return nullptr;
    6d7a:	2000      	moveq	r0, #0
}
    6d7c:	b003      	add	sp, #12
    6d7e:	f85d fb04 	ldr.w	pc, [sp], #4
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    6d82:	4b01      	ldr	r3, [pc, #4]	; (6d88 <_ZN6tflite3ops5micro11activations11SoftmaxInitEP13TfLiteContextPKcj+0x28>)
    6d84:	4798      	blx	r3
    6d86:	bf00      	nop
    6d88:	00014b3d 	.word	0x00014b3d

00006d8c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    6d8c:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
    6d90:	b086      	sub	sp, #24
    6d92:	4605      	mov	r5, r0
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    6d94:	680a      	ldr	r2, [r1, #0]
    6d96:	6813      	ldr	r3, [r2, #0]
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    6d98:	2b01      	cmp	r3, #1
    6d9a:	d129      	bne.n	6df0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x64>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    6d9c:	6848      	ldr	r0, [r1, #4]
    6d9e:	6803      	ldr	r3, [r0, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    6da0:	2b01      	cmp	r3, #1
    6da2:	d135      	bne.n	6e10 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x84>
  return &context->tensors[node->inputs->data[index]];
    6da4:	68ac      	ldr	r4, [r5, #8]
    6da6:	6853      	ldr	r3, [r2, #4]
    6da8:	019b      	lsls	r3, r3, #6
    6daa:	18e6      	adds	r6, r4, r3
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    6dac:	68b2      	ldr	r2, [r6, #8]
  const TfLiteTensor* input = GetInput(context, node, 0);
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
    6dae:	6812      	ldr	r2, [r2, #0]
    6db0:	2a00      	cmp	r2, #0
    6db2:	dd3c      	ble.n	6e2e <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>
  return &context->tensors[node->outputs->data[index]];
    6db4:	6842      	ldr	r2, [r0, #4]
    6db6:	0192      	lsls	r2, r2, #6
    6db8:	eb04 0e02 	add.w	lr, r4, r2

  TfLiteTensor* output = GetOutput(context, node, 0);

  TFLITE_DCHECK(node->user_data != nullptr);
    6dbc:	690f      	ldr	r7, [r1, #16]
    6dbe:	2f00      	cmp	r7, #0
    6dc0:	d03f      	beq.n	6e42 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb6>
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
    6dc2:	f8d1 8014 	ldr.w	r8, [r1, #20]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
    6dc6:	5ce0      	ldrb	r0, [r4, r3]
    6dc8:	2803      	cmp	r0, #3
    6dca:	d03c      	beq.n	6e46 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xba>
    6dcc:	2809      	cmp	r0, #9
    6dce:	f000 8084 	beq.w	6eda <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x14e>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    6dd2:	2801      	cmp	r0, #1
    6dd4:	f040 80d0 	bne.w	6f78 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1ec>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    6dd8:	5ca0      	ldrb	r0, [r4, r2]
    6dda:	2801      	cmp	r0, #1
    6ddc:	f040 80df 	bne.w	6f9e <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x212>
    op_data->beta = static_cast<double>(params->beta);
    6de0:	f8d8 0000 	ldr.w	r0, [r8]
    6de4:	4b77      	ldr	r3, [pc, #476]	; (6fc4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
    6de6:	4798      	blx	r3
    6de8:	e9c7 0100 	strd	r0, r1, [r7]
  return kTfLiteOk;
    6dec:	2000      	movs	r0, #0
    6dee:	e00c      	b.n	6e0a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7e>
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    6df0:	2401      	movs	r4, #1
    6df2:	9403      	str	r4, [sp, #12]
    6df4:	9302      	str	r3, [sp, #8]
    6df6:	4b74      	ldr	r3, [pc, #464]	; (6fc8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
    6df8:	9301      	str	r3, [sp, #4]
    6dfa:	4b74      	ldr	r3, [pc, #464]	; (6fcc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
    6dfc:	9300      	str	r3, [sp, #0]
    6dfe:	6946      	ldr	r6, [r0, #20]
    6e00:	2373      	movs	r3, #115	; 0x73
    6e02:	4a73      	ldr	r2, [pc, #460]	; (6fd0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    6e04:	4973      	ldr	r1, [pc, #460]	; (6fd4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
    6e06:	47b0      	blx	r6
    6e08:	4620      	mov	r0, r4
  SoftmaxParams* data = static_cast<SoftmaxParams*>(node->user_data);
  return CalculateSoftmaxParams(context, input, output, params, data);
}
    6e0a:	b006      	add	sp, #24
    6e0c:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    6e10:	2401      	movs	r4, #1
    6e12:	9403      	str	r4, [sp, #12]
    6e14:	9302      	str	r3, [sp, #8]
    6e16:	4b6c      	ldr	r3, [pc, #432]	; (6fc8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
    6e18:	9301      	str	r3, [sp, #4]
    6e1a:	4b6f      	ldr	r3, [pc, #444]	; (6fd8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
    6e1c:	9300      	str	r3, [sp, #0]
    6e1e:	696e      	ldr	r6, [r5, #20]
    6e20:	2374      	movs	r3, #116	; 0x74
    6e22:	4a6b      	ldr	r2, [pc, #428]	; (6fd0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    6e24:	496b      	ldr	r1, [pc, #428]	; (6fd4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
    6e26:	4628      	mov	r0, r5
    6e28:	47b0      	blx	r6
    6e2a:	4620      	mov	r0, r4
    6e2c:	e7ed      	b.n	6e0a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7e>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
    6e2e:	4b6b      	ldr	r3, [pc, #428]	; (6fdc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
    6e30:	9300      	str	r3, [sp, #0]
    6e32:	696c      	ldr	r4, [r5, #20]
    6e34:	2376      	movs	r3, #118	; 0x76
    6e36:	4a66      	ldr	r2, [pc, #408]	; (6fd0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    6e38:	4969      	ldr	r1, [pc, #420]	; (6fe0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
    6e3a:	4628      	mov	r0, r5
    6e3c:	47a0      	blx	r4
    6e3e:	2001      	movs	r0, #1
    6e40:	e7e3      	b.n	6e0a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7e>
  TFLITE_DCHECK(node->user_data != nullptr);
    6e42:	4b68      	ldr	r3, [pc, #416]	; (6fe4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
    6e44:	4798      	blx	r3
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
    6e46:	5ca0      	ldrb	r0, [r4, r2]
    6e48:	2803      	cmp	r0, #3
    6e4a:	d012      	beq.n	6e72 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe6>
    6e4c:	696e      	ldr	r6, [r5, #20]
    6e4e:	4c66      	ldr	r4, [pc, #408]	; (6fe8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
    6e50:	47a0      	blx	r4
    6e52:	4607      	mov	r7, r0
    6e54:	2003      	movs	r0, #3
    6e56:	47a0      	blx	r4
    6e58:	9003      	str	r0, [sp, #12]
    6e5a:	9702      	str	r7, [sp, #8]
    6e5c:	4b63      	ldr	r3, [pc, #396]	; (6fec <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
    6e5e:	9301      	str	r3, [sp, #4]
    6e60:	4b63      	ldr	r3, [pc, #396]	; (6ff0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
    6e62:	9300      	str	r3, [sp, #0]
    6e64:	2327      	movs	r3, #39	; 0x27
    6e66:	4a5a      	ldr	r2, [pc, #360]	; (6fd0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    6e68:	4962      	ldr	r1, [pc, #392]	; (6ff4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>)
    6e6a:	4628      	mov	r0, r5
    6e6c:	47b0      	blx	r6
    6e6e:	2001      	movs	r0, #1
    6e70:	e7cb      	b.n	6e0a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7e>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    6e72:	f8de 3010 	ldr.w	r3, [lr, #16]
    6e76:	bb13      	cbnz	r3, 6ebe <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x132>
    tflite::PreprocessSoftmaxScaling(
    6e78:	4c52      	ldr	r4, [pc, #328]	; (6fc4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
    6e7a:	68f0      	ldr	r0, [r6, #12]
    6e7c:	47a0      	blx	r4
    6e7e:	4682      	mov	sl, r0
    6e80:	468b      	mov	fp, r1
    6e82:	f8d8 0000 	ldr.w	r0, [r8]
    6e86:	47a0      	blx	r4
        &op_data->input_multiplier, &input_left_shift);
    6e88:	ab05      	add	r3, sp, #20
    6e8a:	9302      	str	r3, [sp, #8]
    tflite::PreprocessSoftmaxScaling(
    6e8c:	f107 0308 	add.w	r3, r7, #8
        &op_data->input_multiplier, &input_left_shift);
    6e90:	9301      	str	r3, [sp, #4]
    6e92:	2405      	movs	r4, #5
    6e94:	9400      	str	r4, [sp, #0]
    6e96:	4652      	mov	r2, sl
    6e98:	465b      	mov	r3, fp
    6e9a:	4d57      	ldr	r5, [pc, #348]	; (6ff8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>)
    6e9c:	47a8      	blx	r5
    op_data->input_left_shift = input_left_shift;
    6e9e:	9905      	ldr	r1, [sp, #20]
    6ea0:	60f9      	str	r1, [r7, #12]
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
    6ea2:	221f      	movs	r2, #31
    6ea4:	4620      	mov	r0, r4
    6ea6:	4b55      	ldr	r3, [pc, #340]	; (6ffc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
    6ea8:	4798      	blx	r3
    6eaa:	4b55      	ldr	r3, [pc, #340]	; (7000 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x274>)
    6eac:	4798      	blx	r3
                                            op_data->input_left_shift);
    6eae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    6eb2:	4619      	mov	r1, r3
    6eb4:	4b53      	ldr	r3, [pc, #332]	; (7004 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x278>)
    6eb6:	4798      	blx	r3
    6eb8:	61b8      	str	r0, [r7, #24]
  return kTfLiteOk;
    6eba:	2000      	movs	r0, #0
    6ebc:	e7a5      	b.n	6e0a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7e>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    6ebe:	2200      	movs	r2, #0
    6ec0:	9203      	str	r2, [sp, #12]
    6ec2:	9302      	str	r3, [sp, #8]
    6ec4:	4b50      	ldr	r3, [pc, #320]	; (7008 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
    6ec6:	9301      	str	r3, [sp, #4]
    6ec8:	4b50      	ldr	r3, [pc, #320]	; (700c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x280>)
    6eca:	9300      	str	r3, [sp, #0]
    6ecc:	696c      	ldr	r4, [r5, #20]
    6ece:	2328      	movs	r3, #40	; 0x28
    6ed0:	4a3f      	ldr	r2, [pc, #252]	; (6fd0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    6ed2:	4940      	ldr	r1, [pc, #256]	; (6fd4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
    6ed4:	4628      	mov	r0, r5
    6ed6:	47a0      	blx	r4
    6ed8:	e7c9      	b.n	6e6e <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe2>
      if (output->type == kTfLiteInt16) {
    6eda:	5ca0      	ldrb	r0, [r4, r2]
    6edc:	2807      	cmp	r0, #7
    6ede:	d013      	beq.n	6f08 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x17c>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    6ee0:	2809      	cmp	r0, #9
    6ee2:	d024      	beq.n	6f2e <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1a2>
    6ee4:	696e      	ldr	r6, [r5, #20]
    6ee6:	4c40      	ldr	r4, [pc, #256]	; (6fe8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
    6ee8:	47a0      	blx	r4
    6eea:	4607      	mov	r7, r0
    6eec:	2009      	movs	r0, #9
    6eee:	47a0      	blx	r4
    6ef0:	9003      	str	r0, [sp, #12]
    6ef2:	9702      	str	r7, [sp, #8]
    6ef4:	4b46      	ldr	r3, [pc, #280]	; (7010 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x284>)
    6ef6:	9301      	str	r3, [sp, #4]
    6ef8:	4b3d      	ldr	r3, [pc, #244]	; (6ff0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
    6efa:	9300      	str	r3, [sp, #0]
    6efc:	2330      	movs	r3, #48	; 0x30
    6efe:	4a34      	ldr	r2, [pc, #208]	; (6fd0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    6f00:	493c      	ldr	r1, [pc, #240]	; (6ff4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>)
    6f02:	4628      	mov	r0, r5
    6f04:	47b0      	blx	r6
    6f06:	e7b2      	b.n	6e6e <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe2>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
    6f08:	f8de 3010 	ldr.w	r3, [lr, #16]
    6f0c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    6f10:	d0b2      	beq.n	6e78 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xec>
    6f12:	4a40      	ldr	r2, [pc, #256]	; (7014 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x288>)
    6f14:	9203      	str	r2, [sp, #12]
    6f16:	9302      	str	r3, [sp, #8]
    6f18:	4b3f      	ldr	r3, [pc, #252]	; (7018 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
    6f1a:	9301      	str	r3, [sp, #4]
    6f1c:	4b3b      	ldr	r3, [pc, #236]	; (700c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x280>)
    6f1e:	9300      	str	r3, [sp, #0]
    6f20:	696c      	ldr	r4, [r5, #20]
    6f22:	232c      	movs	r3, #44	; 0x2c
    6f24:	4a2a      	ldr	r2, [pc, #168]	; (6fd0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    6f26:	492b      	ldr	r1, [pc, #172]	; (6fd4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
    6f28:	4628      	mov	r0, r5
    6f2a:	47a0      	blx	r4
    6f2c:	e79f      	b.n	6e6e <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe2>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    6f2e:	f8de 3010 	ldr.w	r3, [lr, #16]
    6f32:	f113 0f80 	cmn.w	r3, #128	; 0x80
    6f36:	d00e      	beq.n	6f56 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1ca>
    6f38:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    6f3c:	9203      	str	r2, [sp, #12]
    6f3e:	9302      	str	r3, [sp, #8]
    6f40:	4b36      	ldr	r3, [pc, #216]	; (701c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x290>)
    6f42:	9301      	str	r3, [sp, #4]
    6f44:	4b31      	ldr	r3, [pc, #196]	; (700c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x280>)
    6f46:	9300      	str	r3, [sp, #0]
    6f48:	696c      	ldr	r4, [r5, #20]
    6f4a:	2331      	movs	r3, #49	; 0x31
    6f4c:	4a20      	ldr	r2, [pc, #128]	; (6fd0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    6f4e:	4921      	ldr	r1, [pc, #132]	; (6fd4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
    6f50:	4628      	mov	r0, r5
    6f52:	47a0      	blx	r4
    6f54:	e78b      	b.n	6e6e <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe2>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
    6f56:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
    6f5a:	f8de 000c 	ldr.w	r0, [lr, #12]
    6f5e:	4b30      	ldr	r3, [pc, #192]	; (7020 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    6f60:	4798      	blx	r3
    6f62:	2800      	cmp	r0, #0
    6f64:	d188      	bne.n	6e78 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xec>
    6f66:	4b2f      	ldr	r3, [pc, #188]	; (7024 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
    6f68:	9300      	str	r3, [sp, #0]
    6f6a:	696c      	ldr	r4, [r5, #20]
    6f6c:	2332      	movs	r3, #50	; 0x32
    6f6e:	4a18      	ldr	r2, [pc, #96]	; (6fd0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    6f70:	491b      	ldr	r1, [pc, #108]	; (6fe0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
    6f72:	4628      	mov	r0, r5
    6f74:	47a0      	blx	r4
    6f76:	e77a      	b.n	6e6e <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe2>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    6f78:	696e      	ldr	r6, [r5, #20]
    6f7a:	4c1b      	ldr	r4, [pc, #108]	; (6fe8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
    6f7c:	47a0      	blx	r4
    6f7e:	4607      	mov	r7, r0
    6f80:	2001      	movs	r0, #1
    6f82:	47a0      	blx	r4
    6f84:	9003      	str	r0, [sp, #12]
    6f86:	9702      	str	r7, [sp, #8]
    6f88:	4b27      	ldr	r3, [pc, #156]	; (7028 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
    6f8a:	9301      	str	r3, [sp, #4]
    6f8c:	4b27      	ldr	r3, [pc, #156]	; (702c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
    6f8e:	9300      	str	r3, [sp, #0]
    6f90:	2342      	movs	r3, #66	; 0x42
    6f92:	4a0f      	ldr	r2, [pc, #60]	; (6fd0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    6f94:	4917      	ldr	r1, [pc, #92]	; (6ff4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>)
    6f96:	4628      	mov	r0, r5
    6f98:	47b0      	blx	r6
    6f9a:	2001      	movs	r0, #1
    6f9c:	e735      	b.n	6e0a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7e>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    6f9e:	696e      	ldr	r6, [r5, #20]
    6fa0:	4c11      	ldr	r4, [pc, #68]	; (6fe8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
    6fa2:	47a0      	blx	r4
    6fa4:	4607      	mov	r7, r0
    6fa6:	2001      	movs	r0, #1
    6fa8:	47a0      	blx	r4
    6faa:	9003      	str	r0, [sp, #12]
    6fac:	9702      	str	r7, [sp, #8]
    6fae:	4b1e      	ldr	r3, [pc, #120]	; (7028 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
    6fb0:	9301      	str	r3, [sp, #4]
    6fb2:	4b0f      	ldr	r3, [pc, #60]	; (6ff0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
    6fb4:	9300      	str	r3, [sp, #0]
    6fb6:	2343      	movs	r3, #67	; 0x43
    6fb8:	4a05      	ldr	r2, [pc, #20]	; (6fd0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    6fba:	490e      	ldr	r1, [pc, #56]	; (6ff4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>)
    6fbc:	4628      	mov	r0, r5
    6fbe:	47b0      	blx	r6
    6fc0:	2001      	movs	r0, #1
    6fc2:	e722      	b.n	6e0a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7e>
    6fc4:	00012bb9 	.word	0x00012bb9
    6fc8:	00022458 	.word	0x00022458
    6fcc:	0002241c 	.word	0x0002241c
    6fd0:	000223ec 	.word	0x000223ec
    6fd4:	00021ca8 	.word	0x00021ca8
    6fd8:	0002242c 	.word	0x0002242c
    6fdc:	00022440 	.word	0x00022440
    6fe0:	00021304 	.word	0x00021304
    6fe4:	00014b3d 	.word	0x00014b3d
    6fe8:	0000a3c5 	.word	0x0000a3c5
    6fec:	0002245c 	.word	0x0002245c
    6ff0:	0002229c 	.word	0x0002229c
    6ff4:	00022280 	.word	0x00022280
    6ff8:	00001b21 	.word	0x00001b21
    6ffc:	00001b99 	.word	0x00001b99
    7000:	00012b95 	.word	0x00012b95
    7004:	00013195 	.word	0x00013195
    7008:	00022038 	.word	0x00022038
    700c:	0002246c 	.word	0x0002246c
    7010:	00021d84 	.word	0x00021d84
    7014:	ffff8000 	.word	0xffff8000
    7018:	00022488 	.word	0x00022488
    701c:	00022490 	.word	0x00022490
    7020:	00013809 	.word	0x00013809
    7024:	00022498 	.word	0x00022498
    7028:	000224bc 	.word	0x000224bc
    702c:	000222ac 	.word	0x000222ac

00007030 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:
                  const SoftmaxParams& op_data) {
    7030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7034:	b099      	sub	sp, #100	; 0x64
    7036:	460d      	mov	r5, r1
    7038:	4693      	mov	fp, r2
  if (tensor == nullptr) {
    703a:	2800      	cmp	r0, #0
    703c:	f000 811a 	beq.w	7274 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x244>
    7040:	4607      	mov	r7, r0
  const int dims_size = dims->size;
    7042:	6886      	ldr	r6, [r0, #8]
    7044:	f856 4b04 	ldr.w	r4, [r6], #4
    size_ = dimensions_count;
    7048:	940c      	str	r4, [sp, #48]	; 0x30
    if (dimensions_count > kMaxSmallSize) {
    704a:	2c05      	cmp	r4, #5
    704c:	f340 8115 	ble.w	727a <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x24a>
      dims_pointer_ = new int32[dimensions_count];
    7050:	4b9c      	ldr	r3, [pc, #624]	; (72c4 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x294>)
    7052:	429c      	cmp	r4, r3
    7054:	bf94      	ite	ls
    7056:	00a0      	lslls	r0, r4, #2
    7058:	f04f 30ff 	movhi.w	r0, #4294967295
    705c:	4b9a      	ldr	r3, [pc, #616]	; (72c8 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x298>)
    705e:	4798      	blx	r3
    7060:	900d      	str	r0, [sp, #52]	; 0x34
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    7062:	00a2      	lsls	r2, r4, #2
    7064:	4631      	mov	r1, r6
    7066:	4b99      	ldr	r3, [pc, #612]	; (72cc <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x29c>)
    7068:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    706a:	687c      	ldr	r4, [r7, #4]
  if (tensor == nullptr) {
    706c:	2d00      	cmp	r5, #0
    706e:	f000 8106 	beq.w	727e <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x24e>
  const int dims_size = dims->size;
    7072:	68af      	ldr	r7, [r5, #8]
    7074:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    7078:	9612      	str	r6, [sp, #72]	; 0x48
    if (dimensions_count > kMaxSmallSize) {
    707a:	2e05      	cmp	r6, #5
    707c:	f340 8101 	ble.w	7282 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x252>
      dims_pointer_ = new int32[dimensions_count];
    7080:	4b90      	ldr	r3, [pc, #576]	; (72c4 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x294>)
    7082:	429e      	cmp	r6, r3
    7084:	bf94      	ite	ls
    7086:	00b0      	lslls	r0, r6, #2
    7088:	f04f 30ff 	movhi.w	r0, #4294967295
    708c:	4b8e      	ldr	r3, [pc, #568]	; (72c8 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x298>)
    708e:	4798      	blx	r3
    7090:	9013      	str	r0, [sp, #76]	; 0x4c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    7092:	00b2      	lsls	r2, r6, #2
    7094:	4639      	mov	r1, r7
    7096:	4b8d      	ldr	r3, [pc, #564]	; (72cc <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x29c>)
    7098:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    709a:	686d      	ldr	r5, [r5, #4]
  inline int32 DimensionsCount() const { return size_; }
    709c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    709e:	4618      	mov	r0, r3
    70a0:	9308      	str	r3, [sp, #32]
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    70a2:	461a      	mov	r2, r3
    70a4:	1e5f      	subs	r7, r3, #1

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
    70a6:	2b00      	cmp	r3, #0
    70a8:	dd27      	ble.n	70fa <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xca>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    70aa:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TFLITE_DCHECK_LT(i, size_);
    70ae:	9912      	ldr	r1, [sp, #72]	; 0x48
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    70b0:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    70b4:	2201      	movs	r2, #1
    70b6:	2300      	movs	r3, #0
    70b8:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    70bc:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
    70c0:	46a2      	mov	sl, r4
    if (i != skip_dim) {
    70c2:	429f      	cmp	r7, r3
    70c4:	d014      	beq.n	70f0 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc0>
    TFLITE_DCHECK_GE(i, 0);
    70c6:	2b00      	cmp	r3, #0
    70c8:	f2c0 80dd 	blt.w	7286 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x256>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    70cc:	2805      	cmp	r0, #5
    70ce:	bfcc      	ite	gt
    70d0:	f859 6023 	ldrgt.w	r6, [r9, r3, lsl #2]
    70d4:	f85e 6022 	ldrle.w	r6, [lr, r2, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    70d8:	428b      	cmp	r3, r1
    70da:	f280 80d6 	bge.w	728a <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x25a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    70de:	2905      	cmp	r1, #5
    70e0:	bfcc      	ite	gt
    70e2:	f858 4023 	ldrgt.w	r4, [r8, r3, lsl #2]
    70e6:	f85c 4022 	ldrle.w	r4, [ip, r2, lsl #2]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    70ea:	42b4      	cmp	r4, r6
    70ec:	f040 80cf 	bne.w	728e <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x25e>
  for (int i = 0; i < dims_count; ++i) {
    70f0:	3301      	adds	r3, #1
    70f2:	3201      	adds	r2, #1
    70f4:	4298      	cmp	r0, r3
    70f6:	d1e4      	bne.n	70c2 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x92>
    70f8:	4654      	mov	r4, sl
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    70fa:	2f00      	cmp	r7, #0
    70fc:	f2c0 80c9 	blt.w	7292 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x262>
    7100:	9b08      	ldr	r3, [sp, #32]
    7102:	42bb      	cmp	r3, r7
    7104:	f340 80c5 	ble.w	7292 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x262>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    7108:	9b08      	ldr	r3, [sp, #32]
    710a:	2b05      	cmp	r3, #5
    710c:	f340 80d4 	ble.w	72b8 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x288>
    7110:	990d      	ldr	r1, [sp, #52]	; 0x34
  for (int i = 0; i < dims_count; ++i) {
    7112:	2b00      	cmp	r3, #0
    7114:	f340 80bf 	ble.w	7296 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x266>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    7118:	2301      	movs	r3, #1
    711a:	461e      	mov	r6, r3
    711c:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    711e:	4630      	mov	r0, r6
    7120:	f8dd e020 	ldr.w	lr, [sp, #32]
    7124:	429f      	cmp	r7, r3
    7126:	bf14      	ite	ne
    7128:	f851 2023 	ldrne.w	r2, [r1, r3, lsl #2]
    712c:	4602      	moveq	r2, r0
    712e:	fb02 f606 	mul.w	r6, r2, r6
  for (int i = 0; i < dims_count; ++i) {
    7132:	3301      	adds	r3, #1
    7134:	459e      	cmp	lr, r3
    7136:	dcf5      	bgt.n	7124 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xf4>
    7138:	9607      	str	r6, [sp, #28]
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    713a:	9b08      	ldr	r3, [sp, #32]
    713c:	2b05      	cmp	r3, #5
    713e:	f300 80ac 	bgt.w	729a <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x26a>
    7142:	ab18      	add	r3, sp, #96	; 0x60
    7144:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    7148:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    TFLITE_DCHECK_LT(i, size_);
    714c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    714e:	9209      	str	r2, [sp, #36]	; 0x24
    7150:	4297      	cmp	r7, r2
    7152:	f280 80a9 	bge.w	72a8 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x278>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    7156:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7158:	2a05      	cmp	r2, #5
    715a:	f300 80a7 	bgt.w	72ac <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x27c>
    715e:	aa18      	add	r2, sp, #96	; 0x60
    7160:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    7164:	f857 7c14 	ldr.w	r7, [r7, #-20]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    7168:	429f      	cmp	r7, r3
    716a:	f040 80a3 	bne.w	72b4 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x284>
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
    716e:	9b07      	ldr	r3, [sp, #28]
    7170:	2b00      	cmp	r3, #0
    7172:	dd6e      	ble.n	7252 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x222>
    7174:	00bb      	lsls	r3, r7, #2
    7176:	9306      	str	r3, [sp, #24]
    7178:	9403      	str	r4, [sp, #12]
    717a:	9504      	str	r5, [sp, #16]
    717c:	2300      	movs	r3, #0
    717e:	9305      	str	r3, [sp, #20]
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
    for (int c = 0; c < depth; ++c) {
    7180:	465b      	mov	r3, fp
    7182:	46bb      	mov	fp, r7
    7184:	461f      	mov	r7, r3
    float max = std::numeric_limits<float>::lowest();
    7186:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    718a:	930b      	str	r3, [sp, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
    718c:	f1bb 0f00 	cmp.w	fp, #0
    7190:	dd50      	ble.n	7234 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x204>
    7192:	9b06      	ldr	r3, [sp, #24]
    7194:	461a      	mov	r2, r3
    7196:	9c03      	ldr	r4, [sp, #12]
    7198:	eb02 0804 	add.w	r8, r2, r4
      return __a;
    719c:	ae0b      	add	r6, sp, #44	; 0x2c
      max = std::max(max, input_data[i * depth + c]);
    719e:	4625      	mov	r5, r4
    71a0:	3404      	adds	r4, #4
      if (__a < __b)
    71a2:	6829      	ldr	r1, [r5, #0]
    71a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    71a6:	4b4a      	ldr	r3, [pc, #296]	; (72d0 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2a0>)
    71a8:	4798      	blx	r3
      return __a;
    71aa:	2800      	cmp	r0, #0
    71ac:	bf08      	it	eq
    71ae:	4635      	moveq	r5, r6
    71b0:	682d      	ldr	r5, [r5, #0]
    71b2:	950b      	str	r5, [sp, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
    71b4:	4544      	cmp	r4, r8
    71b6:	d1f2      	bne.n	719e <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x16e>
    71b8:	9e03      	ldr	r6, [sp, #12]
    71ba:	2300      	movs	r3, #0
    71bc:	9301      	str	r3, [sp, #4]
    71be:	2400      	movs	r4, #0
    }

    // Compute sum.
    float sum = 0.f;
    for (int c = 0; c < depth; ++c) {
      sum += std::exp((input_data[i * depth + c] - max) *
    71c0:	f8df a128 	ldr.w	sl, [pc, #296]	; 72ec <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2bc>
    71c4:	f8df 9128 	ldr.w	r9, [pc, #296]	; 72f0 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2c0>
    71c8:	9502      	str	r5, [sp, #8]
    71ca:	f856 8b04 	ldr.w	r8, [r6], #4
                      static_cast<float>(params.beta));
    71ce:	e9d7 0100 	ldrd	r0, r1, [r7]
    71d2:	4b40      	ldr	r3, [pc, #256]	; (72d4 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2a4>)
    71d4:	4798      	blx	r3
    71d6:	4605      	mov	r5, r0
      sum += std::exp((input_data[i * depth + c] - max) *
    71d8:	9902      	ldr	r1, [sp, #8]
    71da:	4640      	mov	r0, r8
    71dc:	47d0      	blx	sl
    71de:	4601      	mov	r1, r0
    71e0:	4628      	mov	r0, r5
    71e2:	47c8      	blx	r9
  { return __builtin_expf(__x); }
    71e4:	4b3c      	ldr	r3, [pc, #240]	; (72d8 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2a8>)
    71e6:	4798      	blx	r3
    71e8:	4601      	mov	r1, r0
    71ea:	9801      	ldr	r0, [sp, #4]
    71ec:	4b3b      	ldr	r3, [pc, #236]	; (72dc <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2ac>)
    71ee:	4798      	blx	r3
    71f0:	9001      	str	r0, [sp, #4]
    for (int c = 0; c < depth; ++c) {
    71f2:	3401      	adds	r4, #1
    71f4:	455c      	cmp	r4, fp
    71f6:	d1e8      	bne.n	71ca <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x19a>
    71f8:	9e04      	ldr	r6, [sp, #16]
    71fa:	9d03      	ldr	r5, [sp, #12]
    71fc:	2400      	movs	r4, #0
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
    71fe:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 72ec <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2bc>
                                            static_cast<float>(params.beta)) /
    7202:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 72d4 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2a4>
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
    7206:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 72f0 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2c0>
    720a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    720c:	f855 0b04 	ldr.w	r0, [r5], #4
    7210:	47d0      	blx	sl
    7212:	9002      	str	r0, [sp, #8]
                                            static_cast<float>(params.beta)) /
    7214:	e9d7 0100 	ldrd	r0, r1, [r7]
    7218:	47c8      	blx	r9
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
    721a:	4601      	mov	r1, r0
    721c:	9802      	ldr	r0, [sp, #8]
    721e:	47c0      	blx	r8
    7220:	4b2d      	ldr	r3, [pc, #180]	; (72d8 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2a8>)
    7222:	4798      	blx	r3
                                            static_cast<float>(params.beta)) /
    7224:	9901      	ldr	r1, [sp, #4]
    7226:	4b2e      	ldr	r3, [pc, #184]	; (72e0 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b0>)
    7228:	4798      	blx	r3
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
    722a:	f846 0b04 	str.w	r0, [r6], #4
    for (int c = 0; c < depth; ++c) {
    722e:	3401      	adds	r4, #1
    7230:	455c      	cmp	r4, fp
    7232:	d1ea      	bne.n	720a <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x1da>
  for (int i = 0; i < outer_size; ++i) {
    7234:	9b05      	ldr	r3, [sp, #20]
    7236:	3301      	adds	r3, #1
    7238:	9305      	str	r3, [sp, #20]
    723a:	9a03      	ldr	r2, [sp, #12]
    723c:	4610      	mov	r0, r2
    723e:	9906      	ldr	r1, [sp, #24]
    7240:	4408      	add	r0, r1
    7242:	9003      	str	r0, [sp, #12]
    7244:	9a04      	ldr	r2, [sp, #16]
    7246:	4610      	mov	r0, r2
    7248:	4408      	add	r0, r1
    724a:	9004      	str	r0, [sp, #16]
    724c:	9a07      	ldr	r2, [sp, #28]
    724e:	4293      	cmp	r3, r2
    7250:	d199      	bne.n	7186 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x156>
    if (size_ > kMaxSmallSize) {
    7252:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7254:	2b05      	cmp	r3, #5
    7256:	dd03      	ble.n	7260 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x230>
      delete[] dims_pointer_;
    7258:	9813      	ldr	r0, [sp, #76]	; 0x4c
    725a:	b108      	cbz	r0, 7260 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x230>
    725c:	4b21      	ldr	r3, [pc, #132]	; (72e4 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b4>)
    725e:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    7260:	9b08      	ldr	r3, [sp, #32]
    7262:	2b05      	cmp	r3, #5
    7264:	dd03      	ble.n	726e <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x23e>
      delete[] dims_pointer_;
    7266:	980d      	ldr	r0, [sp, #52]	; 0x34
    7268:	b108      	cbz	r0, 726e <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x23e>
    726a:	4b1e      	ldr	r3, [pc, #120]	; (72e4 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b4>)
    726c:	4798      	blx	r3
}
    726e:	b019      	add	sp, #100	; 0x64
    7270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  RuntimeShape() : size_(0) {}
    7274:	2400      	movs	r4, #0
    7276:	940c      	str	r4, [sp, #48]	; 0x30
    7278:	e6f8      	b.n	706c <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x3c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    727a:	a80d      	add	r0, sp, #52	; 0x34
    727c:	e6f1      	b.n	7062 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x32>
  RuntimeShape() : size_(0) {}
    727e:	9512      	str	r5, [sp, #72]	; 0x48
    7280:	e70c      	b.n	709c <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x6c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    7282:	a813      	add	r0, sp, #76	; 0x4c
    7284:	e705      	b.n	7092 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x62>
    TFLITE_DCHECK_GE(i, 0);
    7286:	4b18      	ldr	r3, [pc, #96]	; (72e8 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b8>)
    7288:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    728a:	4b17      	ldr	r3, [pc, #92]	; (72e8 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b8>)
    728c:	4798      	blx	r3
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    728e:	4b16      	ldr	r3, [pc, #88]	; (72e8 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b8>)
    7290:	4798      	blx	r3
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    7292:	4b15      	ldr	r3, [pc, #84]	; (72e8 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b8>)
    7294:	4798      	blx	r3
  int flat_size = 1;
    7296:	2301      	movs	r3, #1
    7298:	9307      	str	r3, [sp, #28]
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    729a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    729c:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    72a0:	e754      	b.n	714c <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x11c>
  int flat_size = 1;
    72a2:	2301      	movs	r3, #1
    72a4:	9307      	str	r3, [sp, #28]
    72a6:	e74c      	b.n	7142 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x112>
    TFLITE_DCHECK_LT(i, size_);
    72a8:	4b0f      	ldr	r3, [pc, #60]	; (72e8 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b8>)
    72aa:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    72ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    72ae:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    72b2:	e759      	b.n	7168 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x138>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    72b4:	4b0c      	ldr	r3, [pc, #48]	; (72e8 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b8>)
    72b6:	4798      	blx	r3
  for (int i = 0; i < dims_count; ++i) {
    72b8:	9b08      	ldr	r3, [sp, #32]
    72ba:	2b00      	cmp	r3, #0
    72bc:	ddf1      	ble.n	72a2 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x272>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    72be:	a90d      	add	r1, sp, #52	; 0x34
    72c0:	e72a      	b.n	7118 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xe8>
    72c2:	bf00      	nop
    72c4:	1ffffffe 	.word	0x1ffffffe
    72c8:	0000a511 	.word	0x0000a511
    72cc:	000158c1 	.word	0x000158c1
    72d0:	0001381d 	.word	0x0001381d
    72d4:	00013225 	.word	0x00013225
    72d8:	00012601 	.word	0x00012601
    72dc:	000132d1 	.word	0x000132d1
    72e0:	00013649 	.word	0x00013649
    72e4:	0000a461 	.word	0x0000a461
    72e8:	00014b3d 	.word	0x00014b3d
    72ec:	000132cd 	.word	0x000132cd
    72f0:	000134e1 	.word	0x000134e1

000072f4 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>:
      return kTfLiteError;
  }
}
}  // namespace activations

TfLiteRegistration Register_SOFTMAX() {
    72f4:	b470      	push	{r4, r5, r6}
    72f6:	4606      	mov	r6, r0
          /*prepare=*/activations::SoftmaxPrepare,
          /*invoke=*/activations::SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    72f8:	4604      	mov	r4, r0
    72fa:	4d05      	ldr	r5, [pc, #20]	; (7310 <_ZN6tflite3ops5micro16Register_SOFTMAXEv+0x1c>)
    72fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    72fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7300:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7304:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    7308:	4630      	mov	r0, r6
    730a:	bc70      	pop	{r4, r5, r6}
    730c:	4770      	bx	lr
    730e:	bf00      	nop
    7310:	00022370 	.word	0x00022370

00007314 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
    7314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7318:	4605      	mov	r5, r0
  return a - b;
    731a:	f040 447f 	orr.w	r4, r0, #4278190080	; 0xff000000
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
    731e:	17e3      	asrs	r3, r4, #31
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    7320:	0159      	lsls	r1, r3, #5
    7322:	ea41 61d4 	orr.w	r1, r1, r4, lsr #27
    7326:	0160      	lsls	r0, r4, #5
             ? min
    7328:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    732c:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    7330:	db78      	blt.n	7424 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x110>
             : wide_shifted > max ? max
    7332:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    7336:	2300      	movs	r3, #0
    7338:	4282      	cmp	r2, r0
    733a:	418b      	sbcs	r3, r1
    733c:	bfb8      	it	lt
    733e:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
      Rescale<0>(a_mod_quarter_minus_one_quarter));
    7342:	4b3a      	ldr	r3, [pc, #232]	; (742c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x118>)
    7344:	4798      	blx	r3
    7346:	4682      	mov	sl, r0
  return a - b;
    7348:	1b64      	subs	r4, r4, r5
  return a ? BitNot(zero) : zero;
    734a:	f3c4 6800 	ubfx	r8, r4, #24, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    734e:	4938      	ldr	r1, [pc, #224]	; (7430 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x11c>)
    7350:	4e38      	ldr	r6, [pc, #224]	; (7434 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x120>)
    7352:	47b0      	blx	r6
  return a ? BitNot(zero) : zero;
    7354:	f1c8 0900 	rsb	r9, r8, #0
  return a & b;
    7358:	ea00 0909 	and.w	r9, r0, r9
    735c:	f108 38ff 	add.w	r8, r8, #4294967295
    7360:	ea08 080a 	and.w	r8, r8, sl
  return a ^ b;
    7364:	ea89 0808 	eor.w	r8, r9, r8
  return a ? BitNot(zero) : zero;
    7368:	f3c4 6940 	ubfx	r9, r4, #25, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
    736c:	4932      	ldr	r1, [pc, #200]	; (7438 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x124>)
    736e:	4640      	mov	r0, r8
    7370:	47b0      	blx	r6
  return a ? BitNot(zero) : zero;
    7372:	f1c9 0a00 	rsb	sl, r9, #0
  return a & b;
    7376:	ea00 0a0a 	and.w	sl, r0, sl
    737a:	f109 39ff 	add.w	r9, r9, #4294967295
    737e:	ea09 0908 	and.w	r9, r9, r8
  return a ^ b;
    7382:	ea8a 0909 	eor.w	r9, sl, r9
  return a ? BitNot(zero) : zero;
    7386:	f3c4 6a80 	ubfx	sl, r4, #26, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
    738a:	492c      	ldr	r1, [pc, #176]	; (743c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x128>)
    738c:	4648      	mov	r0, r9
    738e:	47b0      	blx	r6
  return a ? BitNot(zero) : zero;
    7390:	f1ca 0800 	rsb	r8, sl, #0
  return a & b;
    7394:	ea00 0808 	and.w	r8, r0, r8
    7398:	f10a 3aff 	add.w	sl, sl, #4294967295
    739c:	ea0a 0a09 	and.w	sl, sl, r9
  return a ^ b;
    73a0:	ea88 0a0a 	eor.w	sl, r8, sl
  return a ? BitNot(zero) : zero;
    73a4:	f3c4 68c0 	ubfx	r8, r4, #27, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
    73a8:	4925      	ldr	r1, [pc, #148]	; (7440 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x12c>)
    73aa:	4650      	mov	r0, sl
    73ac:	47b0      	blx	r6
  return a ? BitNot(zero) : zero;
    73ae:	f1c8 0900 	rsb	r9, r8, #0
  return a & b;
    73b2:	ea00 0909 	and.w	r9, r0, r9
    73b6:	f108 38ff 	add.w	r8, r8, #4294967295
    73ba:	ea08 080a 	and.w	r8, r8, sl
  return a ^ b;
    73be:	ea89 0808 	eor.w	r8, r9, r8
  return a ? BitNot(zero) : zero;
    73c2:	f3c4 7700 	ubfx	r7, r4, #28, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
    73c6:	491f      	ldr	r1, [pc, #124]	; (7444 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x130>)
    73c8:	4640      	mov	r0, r8
    73ca:	47b0      	blx	r6
  return a ? BitNot(zero) : zero;
    73cc:	f1c7 0900 	rsb	r9, r7, #0
  return a & b;
    73d0:	ea00 0009 	and.w	r0, r0, r9
    73d4:	f107 39ff 	add.w	r9, r7, #4294967295
    73d8:	ea09 0908 	and.w	r9, r9, r8
  return a ^ b;
    73dc:	ea80 0909 	eor.w	r9, r0, r9
  return a ? BitNot(zero) : zero;
    73e0:	f3c4 7840 	ubfx	r8, r4, #29, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
    73e4:	4918      	ldr	r1, [pc, #96]	; (7448 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x134>)
    73e6:	4648      	mov	r0, r9
    73e8:	47b0      	blx	r6
  return a ? BitNot(zero) : zero;
    73ea:	f1c8 0700 	rsb	r7, r8, #0
  return a & b;
    73ee:	4007      	ands	r7, r0
    73f0:	f108 38ff 	add.w	r8, r8, #4294967295
    73f4:	ea08 0009 	and.w	r0, r8, r9
  return a ^ b;
    73f8:	4047      	eors	r7, r0
  return a ? BitNot(zero) : zero;
    73fa:	f3c4 7480 	ubfx	r4, r4, #30, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
    73fe:	21f2      	movs	r1, #242	; 0xf2
    7400:	4638      	mov	r0, r7
    7402:	47b0      	blx	r6
  return a ? BitNot(zero) : zero;
    7404:	4263      	negs	r3, r4
  return a & b;
    7406:	4018      	ands	r0, r3
    7408:	3c01      	subs	r4, #1
    740a:	403c      	ands	r4, r7
  return a ^ b;
    740c:	4044      	eors	r4, r0
  return a ? BitNot(zero) : zero;
    740e:	fab5 f385 	clz	r3, r5
    7412:	095b      	lsrs	r3, r3, #5
  return a & b;
    7414:	1e58      	subs	r0, r3, #1
    7416:	4020      	ands	r0, r4
  return a ? BitNot(zero) : zero;
    7418:	425b      	negs	r3, r3
  return a & b;
    741a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
    741e:	4058      	eors	r0, r3
    7420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
             ? min
    7424:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    7428:	e78b      	b.n	7342 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x2e>
    742a:	bf00      	nop
    742c:	00006139 	.word	0x00006139
    7430:	63afbe7b 	.word	0x63afbe7b
    7434:	000060b5 	.word	0x000060b5
    7438:	4da2cbf2 	.word	0x4da2cbf2
    743c:	2f16ac6c 	.word	0x2f16ac6c
    7440:	1152aaa4 	.word	0x1152aaa4
    7444:	02582ab7 	.word	0x02582ab7
    7448:	000afe11 	.word	0x000afe11

0000744c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
  return a & b;
    744c:	0fc3      	lsrs	r3, r0, #31
  return a + b;
    744e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
  return a & b;
    7452:	f3c0 020b 	ubfx	r2, r0, #0, #12
  return a >> offset;
    7456:	1300      	asrs	r0, r0, #12
}
    7458:	4293      	cmp	r3, r2
    745a:	bfb8      	it	lt
    745c:	3001      	addlt	r0, #1
    745e:	4770      	bx	lr

00007460 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:
                      const SoftmaxParams& op_data) {
    7460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7464:	b0b9      	sub	sp, #228	; 0xe4
    7466:	4605      	mov	r5, r0
    7468:	460e      	mov	r6, r1
    746a:	4614      	mov	r4, r2
  if (input->type == kTfLiteUInt8) {
    746c:	7803      	ldrb	r3, [r0, #0]
    746e:	2b03      	cmp	r3, #3
    7470:	f000 80b0 	beq.w	75d4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x174>
    if (output->type == kTfLiteInt16) {
    7474:	780b      	ldrb	r3, [r1, #0]
    7476:	2b07      	cmp	r3, #7
    7478:	f000 8251 	beq.w	791e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x4be>
  if (tensor == nullptr) {
    747c:	2800      	cmp	r0, #0
    747e:	f000 83cb 	beq.w	7c18 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7b8>
  const int dims_size = dims->size;
    7482:	f8d0 8008 	ldr.w	r8, [r0, #8]
    7486:	f858 7b04 	ldr.w	r7, [r8], #4
    size_ = dimensions_count;
    748a:	9726      	str	r7, [sp, #152]	; 0x98
    if (dimensions_count > kMaxSmallSize) {
    748c:	2f05      	cmp	r7, #5
    748e:	f340 83c7 	ble.w	7c20 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7c0>
      dims_pointer_ = new int32[dimensions_count];
    7492:	4bb8      	ldr	r3, [pc, #736]	; (7774 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x314>)
    7494:	429f      	cmp	r7, r3
    7496:	bf94      	ite	ls
    7498:	00b8      	lslls	r0, r7, #2
    749a:	f04f 30ff 	movhi.w	r0, #4294967295
    749e:	4bb6      	ldr	r3, [pc, #728]	; (7778 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x318>)
    74a0:	4798      	blx	r3
    74a2:	9027      	str	r0, [sp, #156]	; 0x9c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    74a4:	00ba      	lsls	r2, r7, #2
    74a6:	4641      	mov	r1, r8
    74a8:	4bb4      	ldr	r3, [pc, #720]	; (777c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x31c>)
    74aa:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    74ac:	686b      	ldr	r3, [r5, #4]
    74ae:	9300      	str	r3, [sp, #0]
  if (tensor == nullptr) {
    74b0:	2e00      	cmp	r6, #0
    74b2:	f000 83b7 	beq.w	7c24 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7c4>
  const int dims_size = dims->size;
    74b6:	68b7      	ldr	r7, [r6, #8]
    74b8:	f857 5b04 	ldr.w	r5, [r7], #4
    size_ = dimensions_count;
    74bc:	952c      	str	r5, [sp, #176]	; 0xb0
    if (dimensions_count > kMaxSmallSize) {
    74be:	2d05      	cmp	r5, #5
    74c0:	f340 83b4 	ble.w	7c2c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7cc>
      dims_pointer_ = new int32[dimensions_count];
    74c4:	4bab      	ldr	r3, [pc, #684]	; (7774 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x314>)
    74c6:	429d      	cmp	r5, r3
    74c8:	bf94      	ite	ls
    74ca:	00a8      	lslls	r0, r5, #2
    74cc:	f04f 30ff 	movhi.w	r0, #4294967295
    74d0:	4ba9      	ldr	r3, [pc, #676]	; (7778 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x318>)
    74d2:	4798      	blx	r3
    74d4:	902d      	str	r0, [sp, #180]	; 0xb4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    74d6:	00aa      	lsls	r2, r5, #2
    74d8:	4639      	mov	r1, r7
    74da:	4ba8      	ldr	r3, [pc, #672]	; (777c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x31c>)
    74dc:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    74de:	f8d6 b004 	ldr.w	fp, [r6, #4]
// Quantized softmax with int8/uint8 input and int8/uint8/int16 output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32 input_beta_multiplier = params.input_multiplier;
    74e2:	68a6      	ldr	r6, [r4, #8]
  const int32 input_beta_left_shift = params.input_left_shift;
    74e4:	68e3      	ldr	r3, [r4, #12]
    74e6:	9302      	str	r3, [sp, #8]
  const int diff_min = params.diff_min;
    74e8:	f8d4 a018 	ldr.w	sl, [r4, #24]
  inline int32 DimensionsCount() const { return size_; }
    74ec:	9926      	ldr	r1, [sp, #152]	; 0x98
  using FixedPointScaledDiff =
      gemmlowp::FixedPoint<int32, kScaledDiffIntegerBits>;
  using FixedPointAccum = gemmlowp::FixedPoint<int32, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
    74ee:	1e4f      	subs	r7, r1, #1
  for (int i = 0; i < dims_count; ++i) {
    74f0:	2900      	cmp	r1, #0
    74f2:	dd25      	ble.n	7540 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xe0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    74f4:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
    TFLITE_DCHECK_LT(i, size_);
    74f8:	982c      	ldr	r0, [sp, #176]	; 0xb0
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    74fa:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
    74fe:	2201      	movs	r2, #1
    7500:	2300      	movs	r3, #0
    7502:	f10d 0cb0 	add.w	ip, sp, #176	; 0xb0
    7506:	f10d 0e98 	add.w	lr, sp, #152	; 0x98
    if (i != skip_dim) {
    750a:	429f      	cmp	r7, r3
    750c:	d014      	beq.n	7538 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xd8>
    TFLITE_DCHECK_GE(i, 0);
    750e:	2b00      	cmp	r3, #0
    7510:	f2c0 838e 	blt.w	7c30 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7d0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    7514:	2905      	cmp	r1, #5
    7516:	bfcc      	ite	gt
    7518:	f859 4023 	ldrgt.w	r4, [r9, r3, lsl #2]
    751c:	f85e 4022 	ldrle.w	r4, [lr, r2, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    7520:	4298      	cmp	r0, r3
    7522:	f340 8387 	ble.w	7c34 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7d4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    7526:	2805      	cmp	r0, #5
    7528:	bfcc      	ite	gt
    752a:	f858 5023 	ldrgt.w	r5, [r8, r3, lsl #2]
    752e:	f85c 5022 	ldrle.w	r5, [ip, r2, lsl #2]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    7532:	42a5      	cmp	r5, r4
    7534:	f040 8380 	bne.w	7c38 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7d8>
  for (int i = 0; i < dims_count; ++i) {
    7538:	3301      	adds	r3, #1
    753a:	3201      	adds	r2, #1
    753c:	4299      	cmp	r1, r3
    753e:	d1e4      	bne.n	750a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xaa>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    7540:	2f00      	cmp	r7, #0
    7542:	f2c0 837b 	blt.w	7c3c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7dc>
    7546:	42b9      	cmp	r1, r7
    7548:	f340 8378 	ble.w	7c3c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7dc>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    754c:	2905      	cmp	r1, #5
    754e:	f340 8537 	ble.w	7fc0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xb60>
    7552:	9827      	ldr	r0, [sp, #156]	; 0x9c
  for (int i = 0; i < dims_count; ++i) {
    7554:	2900      	cmp	r1, #0
    7556:	f340 8373 	ble.w	7c40 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7e0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    755a:	2301      	movs	r3, #1
    755c:	461d      	mov	r5, r3
    755e:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    7560:	462c      	mov	r4, r5
    7562:	429f      	cmp	r7, r3
    7564:	bf14      	ite	ne
    7566:	f850 2023 	ldrne.w	r2, [r0, r3, lsl #2]
    756a:	4622      	moveq	r2, r4
    756c:	fb02 f505 	mul.w	r5, r2, r5
  for (int i = 0; i < dims_count; ++i) {
    7570:	3301      	adds	r3, #1
    7572:	4299      	cmp	r1, r3
    7574:	dcf5      	bgt.n	7562 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x102>
    7576:	950a      	str	r5, [sp, #40]	; 0x28
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    7578:	2905      	cmp	r1, #5
    757a:	f300 8363 	bgt.w	7c44 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7e4>
    757e:	ab38      	add	r3, sp, #224	; 0xe0
    7580:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    7584:	f853 2c44 	ldr.w	r2, [r3, #-68]
    TFLITE_DCHECK_LT(i, size_);
    7588:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    758a:	429f      	cmp	r7, r3
    758c:	f280 8361 	bge.w	7c52 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7f2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    7590:	2b05      	cmp	r3, #5
    7592:	f300 8360 	bgt.w	7c56 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7f6>
    7596:	ab38      	add	r3, sp, #224	; 0xe0
    7598:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    759c:	f857 3c2c 	ldr.w	r3, [r7, #-44]
    75a0:	9308      	str	r3, [sp, #32]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    75a2:	9b08      	ldr	r3, [sp, #32]
    75a4:	4293      	cmp	r3, r2
    75a6:	f040 835b 	bne.w	7c60 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x800>
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
    75aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    75ac:	2b00      	cmp	r3, #0
    75ae:	f340 843b 	ble.w	7e28 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9c8>
    75b2:	9b08      	ldr	r3, [sp, #32]
    75b4:	930b      	str	r3, [sp, #44]	; 0x2c
    75b6:	9a00      	ldr	r2, [sp, #0]
    75b8:	18d7      	adds	r7, r2, r3
    75ba:	9206      	str	r2, [sp, #24]
    75bc:	f8cd b01c 	str.w	fp, [sp, #28]
    75c0:	2300      	movs	r3, #0
    75c2:	9309      	str	r3, [sp, #36]	; 0x24
  std::int64_t b_64(b);
    75c4:	4633      	mov	r3, r6
    75c6:	17f4      	asrs	r4, r6, #31
    75c8:	e9cd 3400 	strd	r3, r4, [sp]
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    75cc:	f8dd b008 	ldr.w	fp, [sp, #8]
    75d0:	f000 bc0d 	b.w	7dee <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x98e>
  if (tensor == nullptr) {
    75d4:	2800      	cmp	r0, #0
    75d6:	f000 809f 	beq.w	7718 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b8>
  const int dims_size = dims->size;
    75da:	f8d0 8008 	ldr.w	r8, [r0, #8]
    75de:	f858 7b04 	ldr.w	r7, [r8], #4
    size_ = dimensions_count;
    75e2:	970e      	str	r7, [sp, #56]	; 0x38
    if (dimensions_count > kMaxSmallSize) {
    75e4:	2f05      	cmp	r7, #5
    75e6:	f340 809b 	ble.w	7720 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2c0>
      dims_pointer_ = new int32[dimensions_count];
    75ea:	4b62      	ldr	r3, [pc, #392]	; (7774 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x314>)
    75ec:	429f      	cmp	r7, r3
    75ee:	bf94      	ite	ls
    75f0:	00b8      	lslls	r0, r7, #2
    75f2:	f04f 30ff 	movhi.w	r0, #4294967295
    75f6:	4b60      	ldr	r3, [pc, #384]	; (7778 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x318>)
    75f8:	4798      	blx	r3
    75fa:	900f      	str	r0, [sp, #60]	; 0x3c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    75fc:	00ba      	lsls	r2, r7, #2
    75fe:	4641      	mov	r1, r8
    7600:	4b5e      	ldr	r3, [pc, #376]	; (777c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x31c>)
    7602:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7604:	f8d5 a004 	ldr.w	sl, [r5, #4]
  if (tensor == nullptr) {
    7608:	2e00      	cmp	r6, #0
    760a:	f000 808b 	beq.w	7724 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2c4>
  const int dims_size = dims->size;
    760e:	68b7      	ldr	r7, [r6, #8]
    7610:	f857 5b04 	ldr.w	r5, [r7], #4
    size_ = dimensions_count;
    7614:	9514      	str	r5, [sp, #80]	; 0x50
    if (dimensions_count > kMaxSmallSize) {
    7616:	2d05      	cmp	r5, #5
    7618:	f340 8088 	ble.w	772c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2cc>
      dims_pointer_ = new int32[dimensions_count];
    761c:	4b55      	ldr	r3, [pc, #340]	; (7774 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x314>)
    761e:	429d      	cmp	r5, r3
    7620:	bf94      	ite	ls
    7622:	00a8      	lslls	r0, r5, #2
    7624:	f04f 30ff 	movhi.w	r0, #4294967295
    7628:	4b53      	ldr	r3, [pc, #332]	; (7778 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x318>)
    762a:	4798      	blx	r3
    762c:	9015      	str	r0, [sp, #84]	; 0x54
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    762e:	00aa      	lsls	r2, r5, #2
    7630:	4639      	mov	r1, r7
    7632:	4b52      	ldr	r3, [pc, #328]	; (777c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x31c>)
    7634:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7636:	f8d6 b004 	ldr.w	fp, [r6, #4]
  const int32 input_beta_multiplier = params.input_multiplier;
    763a:	68a6      	ldr	r6, [r4, #8]
  const int32 input_beta_left_shift = params.input_left_shift;
    763c:	68e3      	ldr	r3, [r4, #12]
    763e:	9300      	str	r3, [sp, #0]
  const int diff_min = params.diff_min;
    7640:	69a3      	ldr	r3, [r4, #24]
    7642:	9304      	str	r3, [sp, #16]
  inline int32 DimensionsCount() const { return size_; }
    7644:	990e      	ldr	r1, [sp, #56]	; 0x38
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    7646:	1e4f      	subs	r7, r1, #1
  for (int i = 0; i < dims_count; ++i) {
    7648:	2900      	cmp	r1, #0
    764a:	dd22      	ble.n	7692 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x232>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    764c:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    TFLITE_DCHECK_LT(i, size_);
    7650:	9814      	ldr	r0, [sp, #80]	; 0x50
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    7652:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
    7656:	2201      	movs	r2, #1
    7658:	2300      	movs	r3, #0
    765a:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
    765e:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
    if (i != skip_dim) {
    7662:	429f      	cmp	r7, r3
    7664:	d011      	beq.n	768a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x22a>
    TFLITE_DCHECK_GE(i, 0);
    7666:	2b00      	cmp	r3, #0
    7668:	db62      	blt.n	7730 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2d0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    766a:	2905      	cmp	r1, #5
    766c:	bfcc      	ite	gt
    766e:	f859 4023 	ldrgt.w	r4, [r9, r3, lsl #2]
    7672:	f85e 4022 	ldrle.w	r4, [lr, r2, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    7676:	4298      	cmp	r0, r3
    7678:	dd5c      	ble.n	7734 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2d4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    767a:	2805      	cmp	r0, #5
    767c:	bfcc      	ite	gt
    767e:	f858 5023 	ldrgt.w	r5, [r8, r3, lsl #2]
    7682:	f85c 5022 	ldrle.w	r5, [ip, r2, lsl #2]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    7686:	42a5      	cmp	r5, r4
    7688:	d156      	bne.n	7738 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2d8>
  for (int i = 0; i < dims_count; ++i) {
    768a:	3301      	adds	r3, #1
    768c:	3201      	adds	r2, #1
    768e:	4299      	cmp	r1, r3
    7690:	d1e7      	bne.n	7662 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x202>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    7692:	2f00      	cmp	r7, #0
    7694:	db52      	blt.n	773c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2dc>
    7696:	42b9      	cmp	r1, r7
    7698:	dd50      	ble.n	773c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2dc>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    769a:	2905      	cmp	r1, #5
    769c:	f340 83d5 	ble.w	7e4a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9ea>
    76a0:	980f      	ldr	r0, [sp, #60]	; 0x3c
  for (int i = 0; i < dims_count; ++i) {
    76a2:	2900      	cmp	r1, #0
    76a4:	dd4c      	ble.n	7740 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2e0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    76a6:	2301      	movs	r3, #1
    76a8:	461d      	mov	r5, r3
    76aa:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    76ac:	462c      	mov	r4, r5
    76ae:	429f      	cmp	r7, r3
    76b0:	bf14      	ite	ne
    76b2:	f850 2023 	ldrne.w	r2, [r0, r3, lsl #2]
    76b6:	4622      	moveq	r2, r4
    76b8:	fb02 f505 	mul.w	r5, r2, r5
  for (int i = 0; i < dims_count; ++i) {
    76bc:	3301      	adds	r3, #1
    76be:	4299      	cmp	r1, r3
    76c0:	dcf5      	bgt.n	76ae <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x24e>
    76c2:	950a      	str	r5, [sp, #40]	; 0x28
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    76c4:	2905      	cmp	r1, #5
    76c6:	dc3d      	bgt.n	7744 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2e4>
    76c8:	ab38      	add	r3, sp, #224	; 0xe0
    76ca:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    76ce:	f853 2ca4 	ldr.w	r2, [r3, #-164]
    TFLITE_DCHECK_LT(i, size_);
    76d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    76d4:	429f      	cmp	r7, r3
    76d6:	da3c      	bge.n	7752 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2f2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    76d8:	2b05      	cmp	r3, #5
    76da:	dc3c      	bgt.n	7756 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2f6>
    76dc:	ab38      	add	r3, sp, #224	; 0xe0
    76de:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    76e2:	f857 3c8c 	ldr.w	r3, [r7, #-140]
    76e6:	9308      	str	r3, [sp, #32]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    76e8:	9b08      	ldr	r3, [sp, #32]
    76ea:	4293      	cmp	r3, r2
    76ec:	d138      	bne.n	7760 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x300>
  for (int i = 0; i < outer_size; ++i) {
    76ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    76f0:	2b00      	cmp	r3, #0
    76f2:	f340 8102 	ble.w	78fa <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x49a>
    76f6:	9b08      	ldr	r3, [sp, #32]
    76f8:	930b      	str	r3, [sp, #44]	; 0x2c
    76fa:	eb0a 0703 	add.w	r7, sl, r3
    76fe:	f8cd a018 	str.w	sl, [sp, #24]
    7702:	f8cd b01c 	str.w	fp, [sp, #28]
    7706:	2300      	movs	r3, #0
    7708:	9309      	str	r3, [sp, #36]	; 0x24
  std::int64_t b_64(b);
    770a:	4633      	mov	r3, r6
    770c:	17f4      	asrs	r4, r6, #31
    770e:	e9cd 3402 	strd	r3, r4, [sp, #8]
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    7712:	f8dd 8010 	ldr.w	r8, [sp, #16]
    7716:	e0d4      	b.n	78c2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x462>
  RuntimeShape() : size_(0) {}
    7718:	2300      	movs	r3, #0
    771a:	930e      	str	r3, [sp, #56]	; 0x38
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    771c:	469a      	mov	sl, r3
    771e:	e773      	b.n	7608 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x1a8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    7720:	a80f      	add	r0, sp, #60	; 0x3c
    7722:	e76b      	b.n	75fc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x19c>
  RuntimeShape() : size_(0) {}
    7724:	2300      	movs	r3, #0
    7726:	9314      	str	r3, [sp, #80]	; 0x50
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7728:	469b      	mov	fp, r3
    772a:	e786      	b.n	763a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x1da>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    772c:	a815      	add	r0, sp, #84	; 0x54
    772e:	e77e      	b.n	762e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x1ce>
    TFLITE_DCHECK_GE(i, 0);
    7730:	4b13      	ldr	r3, [pc, #76]	; (7780 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x320>)
    7732:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    7734:	4b12      	ldr	r3, [pc, #72]	; (7780 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x320>)
    7736:	4798      	blx	r3
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    7738:	4b11      	ldr	r3, [pc, #68]	; (7780 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x320>)
    773a:	4798      	blx	r3
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    773c:	4b10      	ldr	r3, [pc, #64]	; (7780 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x320>)
    773e:	4798      	blx	r3
  int flat_size = 1;
    7740:	2301      	movs	r3, #1
    7742:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    7744:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7746:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    774a:	e7c2      	b.n	76d2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x272>
  int flat_size = 1;
    774c:	2301      	movs	r3, #1
    774e:	930a      	str	r3, [sp, #40]	; 0x28
    7750:	e7ba      	b.n	76c8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x268>
    TFLITE_DCHECK_LT(i, size_);
    7752:	4b0b      	ldr	r3, [pc, #44]	; (7780 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x320>)
    7754:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    7756:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7758:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    775c:	9308      	str	r3, [sp, #32]
    775e:	e7c3      	b.n	76e8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x288>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    7760:	4b07      	ldr	r3, [pc, #28]	; (7780 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x320>)
    7762:	4798      	blx	r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    7764:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    7768:	f040 838a 	bne.w	7e80 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xa20>
    776c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7770:	e373      	b.n	7e5a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9fa>
    7772:	bf00      	nop
    7774:	1ffffffe 	.word	0x1ffffffe
    7778:	0000a511 	.word	0x0000a511
    777c:	000158c1 	.word	0x000158c1
    7780:	00014b3d 	.word	0x00014b3d
      input_val);
}

inline int32 GetReciprocal(int32 x, int x_integer_digits,
                           int* num_bits_over_unit) {
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
    7784:	4650      	mov	r0, sl
  return integer_input ? __builtin_clz(integer_input)
    7786:	f1ba 0f00 	cmp.w	sl, #0
    778a:	d11b      	bne.n	77c4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x364>
    778c:	f04f 0a20 	mov.w	sl, #32
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
    7790:	f1ca 090c 	rsb	r9, sl, #12
  const int32 shifted_sum_minus_one =
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
    7794:	fa00 f00a 	lsl.w	r0, r0, sl
                         (static_cast<uint32>(1) << 31));

  gemmlowp::FixedPoint<int32, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
    7798:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    779c:	4ba9      	ldr	r3, [pc, #676]	; (7a44 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5e4>)
    779e:	4798      	blx	r3
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
    77a0:	9004      	str	r0, [sp, #16]

    for (int c = 0; c < depth; ++c) {
    77a2:	9b08      	ldr	r3, [sp, #32]
    77a4:	2b00      	cmp	r3, #0
    77a6:	dd7b      	ble.n	78a0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x440>
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);

        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
            (shifted_scale * exp_in_0).raw(),
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
    77a8:	f109 0917 	add.w	r9, r9, #23
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    77ac:	f04f 0a01 	mov.w	sl, #1
    77b0:	fa0a fa09 	lsl.w	sl, sl, r9
    77b4:	f10a 3aff 	add.w	sl, sl, #4294967295
  return a >> offset;
    77b8:	ea4f 036a 	mov.w	r3, sl, asr #1
    77bc:	9305      	str	r3, [sp, #20]
    77be:	9d07      	ldr	r5, [sp, #28]
    77c0:	9c06      	ldr	r4, [sp, #24]
    77c2:	e01f      	b.n	7804 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x3a4>
  return integer_input ? __builtin_clz(integer_input)
    77c4:	faba fa8a 	clz	sl, sl
    77c8:	e7e2      	b.n	7790 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x330>
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
    77ca:	2000      	movs	r0, #0
  return integer_input ? __builtin_clz(integer_input)
    77cc:	f04f 0a20 	mov.w	sl, #32
    77d0:	e7de      	b.n	7790 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x330>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    77d2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    77d6:	d120      	bne.n	781a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x3ba>
    77d8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    77dc:	e03a      	b.n	7854 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x3f4>
  assert(exponent >= 0);
    77de:	4b9a      	ldr	r3, [pc, #616]	; (7a48 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5e8>)
    77e0:	4a9a      	ldr	r2, [pc, #616]	; (7a4c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5ec>)
    77e2:	f44f 71b3 	mov.w	r1, #358	; 0x166
    77e6:	489a      	ldr	r0, [pc, #616]	; (7a50 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5f0>)
    77e8:	4c9a      	ldr	r4, [pc, #616]	; (7a54 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5f4>)
    77ea:	47a0      	blx	r4
  assert(exponent <= 31);
    77ec:	4b9a      	ldr	r3, [pc, #616]	; (7a58 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5f8>)
    77ee:	4a97      	ldr	r2, [pc, #604]	; (7a4c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5ec>)
    77f0:	f240 1167 	movw	r1, #359	; 0x167
    77f4:	4896      	ldr	r0, [pc, #600]	; (7a50 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5f0>)
    77f6:	4c97      	ldr	r4, [pc, #604]	; (7a54 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5f4>)
    77f8:	47a0      	blx	r4
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    77fa:	2300      	movs	r3, #0
    77fc:	702b      	strb	r3, [r5, #0]
    77fe:	3501      	adds	r5, #1
    for (int c = 0; c < depth; ++c) {
    7800:	42bc      	cmp	r4, r7
    7802:	d04d      	beq.n	78a0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x440>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
    7804:	f814 2b01 	ldrb.w	r2, [r4], #1
    7808:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    780c:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    780e:	4590      	cmp	r8, r2
    7810:	dcf3      	bgt.n	77fa <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x39a>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    7812:	9b00      	ldr	r3, [sp, #0]
    7814:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    7816:	4296      	cmp	r6, r2
    7818:	d0db      	beq.n	77d2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x372>
  std::int64_t a_64(a);
    781a:	ea4f 7ce2 	mov.w	ip, r2, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    781e:	9b03      	ldr	r3, [sp, #12]
    7820:	fb02 f103 	mul.w	r1, r2, r3
    7824:	fb06 110c 	mla	r1, r6, ip, r1
    7828:	fba2 2306 	umull	r2, r3, r2, r6
    782c:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    782e:	2a00      	cmp	r2, #0
    7830:	f173 0100 	sbcs.w	r1, r3, #0
    7834:	f2c0 8414 	blt.w	8060 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc00>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    7838:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    783c:	f143 0300 	adc.w	r3, r3, #0
    7840:	4610      	mov	r0, r2
    7842:	4619      	mov	r1, r3
    7844:	2a00      	cmp	r2, #0
    7846:	f173 0e00 	sbcs.w	lr, r3, #0
    784a:	f2c0 8338 	blt.w	7ebe <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xa5e>
    784e:	0fc0      	lsrs	r0, r0, #31
    7850:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    7854:	4b81      	ldr	r3, [pc, #516]	; (7a5c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5fc>)
    7856:	4798      	blx	r3
            (shifted_scale * exp_in_0).raw(),
    7858:	4601      	mov	r1, r0
    785a:	9804      	ldr	r0, [sp, #16]
    785c:	4b80      	ldr	r3, [pc, #512]	; (7a60 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x600>)
    785e:	4798      	blx	r3
  assert(exponent >= 0);
    7860:	f1b9 0f00 	cmp.w	r9, #0
    7864:	dbbb      	blt.n	77de <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x37e>
  assert(exponent <= 31);
    7866:	f1b9 0f1f 	cmp.w	r9, #31
    786a:	dcbf      	bgt.n	77ec <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x38c>
  return a + b;
    786c:	9b05      	ldr	r3, [sp, #20]
    786e:	eb03 72d0 	add.w	r2, r3, r0, lsr #31
  return a & b;
    7872:	ea00 030a 	and.w	r3, r0, sl
  return a >> offset;
    7876:	fa40 f009 	asr.w	r0, r0, r9
  return a + b;
    787a:	429a      	cmp	r2, r3
    787c:	bfb8      	it	lt
    787e:	3001      	addlt	r0, #1
            static_cast<int32>(std::numeric_limits<OutputT>::min());
    7880:	900d      	str	r0, [sp, #52]	; 0x34
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
    7882:	23ff      	movs	r3, #255	; 0xff
    7884:	9333      	str	r3, [sp, #204]	; 0xcc
      if (__b < __a)
    7886:	4298      	cmp	r0, r3
      return __a;
    7888:	bfd4      	ite	le
    788a:	ab0d      	addle	r3, sp, #52	; 0x34
	return __b;
    788c:	ab33      	addgt	r3, sp, #204	; 0xcc
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
    788e:	2200      	movs	r2, #0
    7890:	9232      	str	r2, [sp, #200]	; 0xc8
      if (__a < __b)
    7892:	681a      	ldr	r2, [r3, #0]
    7894:	2a00      	cmp	r2, #0
	return __b;
    7896:	bfb8      	it	lt
    7898:	ab32      	addlt	r3, sp, #200	; 0xc8
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    789a:	681b      	ldr	r3, [r3, #0]
    789c:	702b      	strb	r3, [r5, #0]
    789e:	e7ae      	b.n	77fe <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x39e>
  for (int i = 0; i < outer_size; ++i) {
    78a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    78a2:	3301      	adds	r3, #1
    78a4:	9309      	str	r3, [sp, #36]	; 0x24
    78a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    78a8:	440f      	add	r7, r1
    78aa:	9a06      	ldr	r2, [sp, #24]
    78ac:	4610      	mov	r0, r2
    78ae:	460a      	mov	r2, r1
    78b0:	4408      	add	r0, r1
    78b2:	9006      	str	r0, [sp, #24]
    78b4:	9907      	ldr	r1, [sp, #28]
    78b6:	4608      	mov	r0, r1
    78b8:	4410      	add	r0, r2
    78ba:	9007      	str	r0, [sp, #28]
    78bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    78be:	4293      	cmp	r3, r2
    78c0:	d01b      	beq.n	78fa <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x49a>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    78c2:	2300      	movs	r3, #0
    78c4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    for (int c = 0; c < depth; ++c) {
    78c8:	9b08      	ldr	r3, [sp, #32]
    78ca:	2b00      	cmp	r3, #0
    78cc:	f77f af7d 	ble.w	77ca <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x36a>
    78d0:	9c06      	ldr	r4, [sp, #24]
      return __a;
    78d2:	f10d 0033 	add.w	r0, sp, #51	; 0x33
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    78d6:	4623      	mov	r3, r4
    78d8:	3401      	adds	r4, #1
      if (__a < __b)
    78da:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
    78de:	781a      	ldrb	r2, [r3, #0]
    78e0:	4291      	cmp	r1, r2
      return __a;
    78e2:	bfa8      	it	ge
    78e4:	4603      	movge	r3, r0
    78e6:	f893 9000 	ldrb.w	r9, [r3]
    78ea:	f88d 9033 	strb.w	r9, [sp, #51]	; 0x33
    for (int c = 0; c < depth; ++c) {
    78ee:	42bc      	cmp	r4, r7
    78f0:	d1f1      	bne.n	78d6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x476>
    78f2:	9d06      	ldr	r5, [sp, #24]
    78f4:	f04f 0a00 	mov.w	sl, #0
    78f8:	e2b7      	b.n	7e6a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xa0a>
    if (size_ > kMaxSmallSize) {
    78fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
    78fc:	2b05      	cmp	r3, #5
    78fe:	dd03      	ble.n	7908 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x4a8>
      delete[] dims_pointer_;
    7900:	9815      	ldr	r0, [sp, #84]	; 0x54
    7902:	b108      	cbz	r0, 7908 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x4a8>
    7904:	4b57      	ldr	r3, [pc, #348]	; (7a64 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x604>)
    7906:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    7908:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    790a:	2b05      	cmp	r3, #5
    790c:	f340 829a 	ble.w	7e44 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9e4>
      delete[] dims_pointer_;
    7910:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7912:	2800      	cmp	r0, #0
    7914:	f000 8296 	beq.w	7e44 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9e4>
    7918:	4b52      	ldr	r3, [pc, #328]	; (7a64 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x604>)
    791a:	4798      	blx	r3
    791c:	e292      	b.n	7e44 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9e4>
  if (tensor == nullptr) {
    791e:	2800      	cmp	r0, #0
    7920:	d069      	beq.n	79f6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x596>
  const int dims_size = dims->size;
    7922:	f8d0 8008 	ldr.w	r8, [r0, #8]
    7926:	f858 7b04 	ldr.w	r7, [r8], #4
    size_ = dimensions_count;
    792a:	971a      	str	r7, [sp, #104]	; 0x68
    if (dimensions_count > kMaxSmallSize) {
    792c:	2f05      	cmp	r7, #5
    792e:	dd66      	ble.n	79fe <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x59e>
      dims_pointer_ = new int32[dimensions_count];
    7930:	4b4d      	ldr	r3, [pc, #308]	; (7a68 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x608>)
    7932:	429f      	cmp	r7, r3
    7934:	bf94      	ite	ls
    7936:	00b8      	lslls	r0, r7, #2
    7938:	f04f 30ff 	movhi.w	r0, #4294967295
    793c:	4b4b      	ldr	r3, [pc, #300]	; (7a6c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x60c>)
    793e:	4798      	blx	r3
    7940:	901b      	str	r0, [sp, #108]	; 0x6c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    7942:	00ba      	lsls	r2, r7, #2
    7944:	4641      	mov	r1, r8
    7946:	4b4a      	ldr	r3, [pc, #296]	; (7a70 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x610>)
    7948:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    794a:	686b      	ldr	r3, [r5, #4]
    794c:	9300      	str	r3, [sp, #0]
  if (tensor == nullptr) {
    794e:	2e00      	cmp	r6, #0
    7950:	d057      	beq.n	7a02 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5a2>
  const int dims_size = dims->size;
    7952:	68b7      	ldr	r7, [r6, #8]
    7954:	f857 5b04 	ldr.w	r5, [r7], #4
    size_ = dimensions_count;
    7958:	9520      	str	r5, [sp, #128]	; 0x80
    if (dimensions_count > kMaxSmallSize) {
    795a:	2d05      	cmp	r5, #5
    795c:	dd55      	ble.n	7a0a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5aa>
      dims_pointer_ = new int32[dimensions_count];
    795e:	4b42      	ldr	r3, [pc, #264]	; (7a68 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x608>)
    7960:	429d      	cmp	r5, r3
    7962:	bf94      	ite	ls
    7964:	00a8      	lslls	r0, r5, #2
    7966:	f04f 30ff 	movhi.w	r0, #4294967295
    796a:	4b40      	ldr	r3, [pc, #256]	; (7a6c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x60c>)
    796c:	4798      	blx	r3
    796e:	9021      	str	r0, [sp, #132]	; 0x84
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    7970:	00aa      	lsls	r2, r5, #2
    7972:	4639      	mov	r1, r7
    7974:	4b3e      	ldr	r3, [pc, #248]	; (7a70 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x610>)
    7976:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7978:	f8d6 b004 	ldr.w	fp, [r6, #4]
  const int32 input_beta_multiplier = params.input_multiplier;
    797c:	68a6      	ldr	r6, [r4, #8]
  const int32 input_beta_left_shift = params.input_left_shift;
    797e:	68e3      	ldr	r3, [r4, #12]
    7980:	9302      	str	r3, [sp, #8]
  const int diff_min = params.diff_min;
    7982:	f8d4 a018 	ldr.w	sl, [r4, #24]
  inline int32 DimensionsCount() const { return size_; }
    7986:	991a      	ldr	r1, [sp, #104]	; 0x68
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    7988:	1e4f      	subs	r7, r1, #1
  for (int i = 0; i < dims_count; ++i) {
    798a:	2900      	cmp	r1, #0
    798c:	dd22      	ble.n	79d4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x574>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    798e:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
    TFLITE_DCHECK_LT(i, size_);
    7992:	9820      	ldr	r0, [sp, #128]	; 0x80
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    7994:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
    7998:	2201      	movs	r2, #1
    799a:	2300      	movs	r3, #0
    799c:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
    79a0:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
    if (i != skip_dim) {
    79a4:	429f      	cmp	r7, r3
    79a6:	d011      	beq.n	79cc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x56c>
    TFLITE_DCHECK_GE(i, 0);
    79a8:	2b00      	cmp	r3, #0
    79aa:	db30      	blt.n	7a0e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5ae>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    79ac:	2905      	cmp	r1, #5
    79ae:	bfcc      	ite	gt
    79b0:	f859 4023 	ldrgt.w	r4, [r9, r3, lsl #2]
    79b4:	f85e 4022 	ldrle.w	r4, [lr, r2, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    79b8:	4283      	cmp	r3, r0
    79ba:	da2a      	bge.n	7a12 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5b2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    79bc:	2805      	cmp	r0, #5
    79be:	bfcc      	ite	gt
    79c0:	f858 5023 	ldrgt.w	r5, [r8, r3, lsl #2]
    79c4:	f85c 5022 	ldrle.w	r5, [ip, r2, lsl #2]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    79c8:	42a5      	cmp	r5, r4
    79ca:	d124      	bne.n	7a16 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5b6>
  for (int i = 0; i < dims_count; ++i) {
    79cc:	3301      	adds	r3, #1
    79ce:	3201      	adds	r2, #1
    79d0:	4299      	cmp	r1, r3
    79d2:	d1e7      	bne.n	79a4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x544>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    79d4:	2f00      	cmp	r7, #0
    79d6:	db20      	blt.n	7a1a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5ba>
    79d8:	42b9      	cmp	r1, r7
    79da:	dd1e      	ble.n	7a1a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5ba>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    79dc:	2905      	cmp	r1, #5
    79de:	f340 8274 	ble.w	7eca <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xa6a>
    79e2:	981b      	ldr	r0, [sp, #108]	; 0x6c
  for (int i = 0; i < dims_count; ++i) {
    79e4:	2900      	cmp	r1, #0
    79e6:	f300 8274 	bgt.w	7ed2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xa72>
  int flat_size = 1;
    79ea:	2301      	movs	r3, #1
    79ec:	9309      	str	r3, [sp, #36]	; 0x24
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    79ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    79f0:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    79f4:	e284      	b.n	7f00 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xaa0>
  RuntimeShape() : size_(0) {}
    79f6:	2300      	movs	r3, #0
    79f8:	931a      	str	r3, [sp, #104]	; 0x68
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    79fa:	9300      	str	r3, [sp, #0]
    79fc:	e7a7      	b.n	794e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x4ee>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    79fe:	a81b      	add	r0, sp, #108	; 0x6c
    7a00:	e79f      	b.n	7942 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x4e2>
  RuntimeShape() : size_(0) {}
    7a02:	2300      	movs	r3, #0
    7a04:	9320      	str	r3, [sp, #128]	; 0x80
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7a06:	469b      	mov	fp, r3
    7a08:	e7b8      	b.n	797c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x51c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    7a0a:	a821      	add	r0, sp, #132	; 0x84
    7a0c:	e7b0      	b.n	7970 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x510>
    TFLITE_DCHECK_GE(i, 0);
    7a0e:	4b19      	ldr	r3, [pc, #100]	; (7a74 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x614>)
    7a10:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    7a12:	4b18      	ldr	r3, [pc, #96]	; (7a74 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x614>)
    7a14:	4798      	blx	r3
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    7a16:	4b17      	ldr	r3, [pc, #92]	; (7a74 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x614>)
    7a18:	4798      	blx	r3
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    7a1a:	4b16      	ldr	r3, [pc, #88]	; (7a74 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x614>)
    7a1c:	4798      	blx	r3
  int flat_size = 1;
    7a1e:	2301      	movs	r3, #1
    7a20:	9309      	str	r3, [sp, #36]	; 0x24
    7a22:	e268      	b.n	7ef6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xa96>
    TFLITE_DCHECK_LT(i, size_);
    7a24:	4b13      	ldr	r3, [pc, #76]	; (7a74 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x614>)
    7a26:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    7a28:	9b21      	ldr	r3, [sp, #132]	; 0x84
    7a2a:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    7a2e:	9307      	str	r3, [sp, #28]
    7a30:	e273      	b.n	7f1a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xaba>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    7a32:	4b10      	ldr	r3, [pc, #64]	; (7a74 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x614>)
    7a34:	4798      	blx	r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    7a36:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    7a3a:	f040 829e 	bne.w	7f7a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xb1a>
    7a3e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7a42:	e287      	b.n	7f54 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xaf4>
    7a44:	00005f15 	.word	0x00005f15
    7a48:	0002202c 	.word	0x0002202c
    7a4c:	00022390 	.word	0x00022390
    7a50:	0002203c 	.word	0x0002203c
    7a54:	00014b4d 	.word	0x00014b4d
    7a58:	0002206c 	.word	0x0002206c
    7a5c:	00007315 	.word	0x00007315
    7a60:	000060b5 	.word	0x000060b5
    7a64:	0000a461 	.word	0x0000a461
    7a68:	1ffffffe 	.word	0x1ffffffe
    7a6c:	0000a511 	.word	0x0000a511
    7a70:	000158c1 	.word	0x000158c1
    7a74:	00014b3d 	.word	0x00014b3d
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
    7a78:	464b      	mov	r3, r9
  return integer_input ? __builtin_clz(integer_input)
    7a7a:	f1b9 0f00 	cmp.w	r9, #0
    7a7e:	d11a      	bne.n	7ab6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x656>
    7a80:	2020      	movs	r0, #32
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
    7a82:	f1c0 080c 	rsb	r8, r0, #12
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
    7a86:	fa03 f000 	lsl.w	r0, r3, r0
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
    7a8a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    7a8e:	4b98      	ldr	r3, [pc, #608]	; (7cf0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x890>)
    7a90:	4798      	blx	r3
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
    7a92:	9002      	str	r0, [sp, #8]
    for (int c = 0; c < depth; ++c) {
    7a94:	9b07      	ldr	r3, [sp, #28]
    7a96:	2b00      	cmp	r3, #0
    7a98:	dd7f      	ble.n	7b9a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x73a>
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
    7a9a:	f108 080f 	add.w	r8, r8, #15
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    7a9e:	f04f 0901 	mov.w	r9, #1
    7aa2:	fa09 f908 	lsl.w	r9, r9, r8
    7aa6:	f109 39ff 	add.w	r9, r9, #4294967295
  return a >> offset;
    7aaa:	ea4f 0369 	mov.w	r3, r9, asr #1
    7aae:	9304      	str	r3, [sp, #16]
    7ab0:	9d06      	ldr	r5, [sp, #24]
    7ab2:	9c05      	ldr	r4, [sp, #20]
    7ab4:	e01f      	b.n	7af6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x696>
  return integer_input ? __builtin_clz(integer_input)
    7ab6:	fab9 f089 	clz	r0, r9
    7aba:	e7e2      	b.n	7a82 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x622>
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
    7abc:	2300      	movs	r3, #0
  return integer_input ? __builtin_clz(integer_input)
    7abe:	2020      	movs	r0, #32
    7ac0:	e7df      	b.n	7a82 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x622>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    7ac2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    7ac6:	d121      	bne.n	7b0c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x6ac>
    7ac8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7acc:	e03a      	b.n	7b44 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x6e4>
  assert(exponent >= 0);
    7ace:	4b89      	ldr	r3, [pc, #548]	; (7cf4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x894>)
    7ad0:	4a89      	ldr	r2, [pc, #548]	; (7cf8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x898>)
    7ad2:	f44f 71b3 	mov.w	r1, #358	; 0x166
    7ad6:	4889      	ldr	r0, [pc, #548]	; (7cfc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x89c>)
    7ad8:	4c89      	ldr	r4, [pc, #548]	; (7d00 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8a0>)
    7ada:	47a0      	blx	r4
  assert(exponent <= 31);
    7adc:	4b89      	ldr	r3, [pc, #548]	; (7d04 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8a4>)
    7ade:	4a86      	ldr	r2, [pc, #536]	; (7cf8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x898>)
    7ae0:	f240 1167 	movw	r1, #359	; 0x167
    7ae4:	4885      	ldr	r0, [pc, #532]	; (7cfc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x89c>)
    7ae6:	4c86      	ldr	r4, [pc, #536]	; (7d00 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8a0>)
    7ae8:	47a0      	blx	r4
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    7aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    7aee:	802b      	strh	r3, [r5, #0]
    7af0:	3502      	adds	r5, #2
    for (int c = 0; c < depth; ++c) {
    7af2:	42bc      	cmp	r4, r7
    7af4:	d051      	beq.n	7b9a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x73a>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
    7af6:	f914 2b01 	ldrsb.w	r2, [r4], #1
    7afa:	f99d 3033 	ldrsb.w	r3, [sp, #51]	; 0x33
    7afe:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    7b00:	4592      	cmp	sl, r2
    7b02:	dcf2      	bgt.n	7aea <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x68a>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    7b04:	fa02 f20b 	lsl.w	r2, r2, fp
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    7b08:	4296      	cmp	r6, r2
    7b0a:	d0da      	beq.n	7ac2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x662>
  std::int64_t a_64(a);
    7b0c:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    7b0e:	fb06 f101 	mul.w	r1, r6, r1
    7b12:	9b01      	ldr	r3, [sp, #4]
    7b14:	fb02 1103 	mla	r1, r2, r3, r1
    7b18:	fba6 2302 	umull	r2, r3, r6, r2
    7b1c:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    7b1e:	2a00      	cmp	r2, #0
    7b20:	f173 0100 	sbcs.w	r1, r3, #0
    7b24:	f2c0 82c7 	blt.w	80b6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc56>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    7b28:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    7b2c:	f143 0300 	adc.w	r3, r3, #0
    7b30:	4610      	mov	r0, r2
    7b32:	4619      	mov	r1, r3
    7b34:	2a00      	cmp	r2, #0
    7b36:	f173 0e00 	sbcs.w	lr, r3, #0
    7b3a:	f2c0 823b 	blt.w	7fb4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xb54>
    7b3e:	0fc0      	lsrs	r0, r0, #31
    7b40:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    7b44:	4b70      	ldr	r3, [pc, #448]	; (7d08 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8a8>)
    7b46:	4798      	blx	r3
            (shifted_scale * exp_in_0).raw(),
    7b48:	4601      	mov	r1, r0
    7b4a:	9802      	ldr	r0, [sp, #8]
    7b4c:	4b6f      	ldr	r3, [pc, #444]	; (7d0c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8ac>)
    7b4e:	4798      	blx	r3
  assert(exponent >= 0);
    7b50:	f1b8 0f00 	cmp.w	r8, #0
    7b54:	dbbb      	blt.n	7ace <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x66e>
  assert(exponent <= 31);
    7b56:	f1b8 0f1f 	cmp.w	r8, #31
    7b5a:	dcbf      	bgt.n	7adc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x67c>
  return a + b;
    7b5c:	9b04      	ldr	r3, [sp, #16]
    7b5e:	eb03 72d0 	add.w	r2, r3, r0, lsr #31
  return a & b;
    7b62:	ea00 0309 	and.w	r3, r0, r9
  return a >> offset;
    7b66:	fa40 f008 	asr.w	r0, r0, r8
  return a + b;
    7b6a:	429a      	cmp	r2, r3
    7b6c:	bfb8      	it	lt
    7b6e:	3001      	addlt	r0, #1
            unsat_output +
    7b70:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
            static_cast<int32>(std::numeric_limits<OutputT>::min());
    7b74:	900d      	str	r0, [sp, #52]	; 0x34
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
    7b76:	f647 73ff 	movw	r3, #32767	; 0x7fff
    7b7a:	9335      	str	r3, [sp, #212]	; 0xd4
      if (__b < __a)
    7b7c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
      return __a;
    7b80:	bfb4      	ite	lt
    7b82:	ab0d      	addlt	r3, sp, #52	; 0x34
	return __b;
    7b84:	ab35      	addge	r3, sp, #212	; 0xd4
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
    7b86:	4a62      	ldr	r2, [pc, #392]	; (7d10 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b0>)
    7b88:	9234      	str	r2, [sp, #208]	; 0xd0
      if (__a < __b)
    7b8a:	681a      	ldr	r2, [r3, #0]
    7b8c:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
	return __b;
    7b90:	bfb8      	it	lt
    7b92:	ab34      	addlt	r3, sp, #208	; 0xd0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    7b94:	681b      	ldr	r3, [r3, #0]
    7b96:	802b      	strh	r3, [r5, #0]
    7b98:	e7aa      	b.n	7af0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x690>
  for (int i = 0; i < outer_size; ++i) {
    7b9a:	9b08      	ldr	r3, [sp, #32]
    7b9c:	3301      	adds	r3, #1
    7b9e:	9308      	str	r3, [sp, #32]
    7ba0:	990a      	ldr	r1, [sp, #40]	; 0x28
    7ba2:	440f      	add	r7, r1
    7ba4:	9a05      	ldr	r2, [sp, #20]
    7ba6:	4610      	mov	r0, r2
    7ba8:	4408      	add	r0, r1
    7baa:	9005      	str	r0, [sp, #20]
    7bac:	9a06      	ldr	r2, [sp, #24]
    7bae:	990b      	ldr	r1, [sp, #44]	; 0x2c
    7bb0:	440a      	add	r2, r1
    7bb2:	9206      	str	r2, [sp, #24]
    7bb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7bb6:	4293      	cmp	r3, r2
    7bb8:	d01c      	beq.n	7bf4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x794>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    7bba:	2380      	movs	r3, #128	; 0x80
    7bbc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    for (int c = 0; c < depth; ++c) {
    7bc0:	9b07      	ldr	r3, [sp, #28]
    7bc2:	2b00      	cmp	r3, #0
    7bc4:	f77f af7a 	ble.w	7abc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x65c>
    7bc8:	9c05      	ldr	r4, [sp, #20]
      return __a;
    7bca:	f10d 0033 	add.w	r0, sp, #51	; 0x33
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    7bce:	4623      	mov	r3, r4
    7bd0:	3401      	adds	r4, #1
      if (__a < __b)
    7bd2:	f99d 1033 	ldrsb.w	r1, [sp, #51]	; 0x33
    7bd6:	f993 2000 	ldrsb.w	r2, [r3]
    7bda:	4291      	cmp	r1, r2
      return __a;
    7bdc:	bfa8      	it	ge
    7bde:	4603      	movge	r3, r0
    7be0:	f993 8000 	ldrsb.w	r8, [r3]
    7be4:	f88d 8033 	strb.w	r8, [sp, #51]	; 0x33
    for (int c = 0; c < depth; ++c) {
    7be8:	42bc      	cmp	r4, r7
    7bea:	d1f0      	bne.n	7bce <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x76e>
    7bec:	9d05      	ldr	r5, [sp, #20]
    7bee:	f04f 0900 	mov.w	r9, #0
    7bf2:	e1b7      	b.n	7f64 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xb04>
    if (size_ > kMaxSmallSize) {
    7bf4:	9b20      	ldr	r3, [sp, #128]	; 0x80
    7bf6:	2b05      	cmp	r3, #5
    7bf8:	dd03      	ble.n	7c02 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7a2>
      delete[] dims_pointer_;
    7bfa:	9821      	ldr	r0, [sp, #132]	; 0x84
    7bfc:	b108      	cbz	r0, 7c02 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7a2>
    7bfe:	4b45      	ldr	r3, [pc, #276]	; (7d14 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b4>)
    7c00:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    7c02:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    7c04:	2b05      	cmp	r3, #5
    7c06:	f340 811d 	ble.w	7e44 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9e4>
      delete[] dims_pointer_;
    7c0a:	981b      	ldr	r0, [sp, #108]	; 0x6c
    7c0c:	2800      	cmp	r0, #0
    7c0e:	f000 8119 	beq.w	7e44 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9e4>
    7c12:	4b40      	ldr	r3, [pc, #256]	; (7d14 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b4>)
    7c14:	4798      	blx	r3
    7c16:	e115      	b.n	7e44 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9e4>
  RuntimeShape() : size_(0) {}
    7c18:	2300      	movs	r3, #0
    7c1a:	9326      	str	r3, [sp, #152]	; 0x98
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    7c1c:	9300      	str	r3, [sp, #0]
    7c1e:	e447      	b.n	74b0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x50>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    7c20:	a827      	add	r0, sp, #156	; 0x9c
    7c22:	e43f      	b.n	74a4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x44>
  RuntimeShape() : size_(0) {}
    7c24:	2300      	movs	r3, #0
    7c26:	932c      	str	r3, [sp, #176]	; 0xb0
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7c28:	469b      	mov	fp, r3
    7c2a:	e45a      	b.n	74e2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x82>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    7c2c:	a82d      	add	r0, sp, #180	; 0xb4
    7c2e:	e452      	b.n	74d6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x76>
    TFLITE_DCHECK_GE(i, 0);
    7c30:	4b39      	ldr	r3, [pc, #228]	; (7d18 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b8>)
    7c32:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    7c34:	4b38      	ldr	r3, [pc, #224]	; (7d18 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b8>)
    7c36:	4798      	blx	r3
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    7c38:	4b37      	ldr	r3, [pc, #220]	; (7d18 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b8>)
    7c3a:	4798      	blx	r3
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    7c3c:	4b36      	ldr	r3, [pc, #216]	; (7d18 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b8>)
    7c3e:	4798      	blx	r3
  int flat_size = 1;
    7c40:	2301      	movs	r3, #1
    7c42:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    7c44:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    7c46:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    7c4a:	e49d      	b.n	7588 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x128>
  int flat_size = 1;
    7c4c:	2301      	movs	r3, #1
    7c4e:	930a      	str	r3, [sp, #40]	; 0x28
    7c50:	e495      	b.n	757e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x11e>
    TFLITE_DCHECK_LT(i, size_);
    7c52:	4b31      	ldr	r3, [pc, #196]	; (7d18 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b8>)
    7c54:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    7c56:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    7c58:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    7c5c:	9308      	str	r3, [sp, #32]
    7c5e:	e4a0      	b.n	75a2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x142>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    7c60:	4b2d      	ldr	r3, [pc, #180]	; (7d18 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b8>)
    7c62:	4798      	blx	r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    7c64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    7c68:	f040 8250 	bne.w	810c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xcac>
    7c6c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7c70:	e239      	b.n	80e6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc86>
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
    7c72:	4648      	mov	r0, r9
  return integer_input ? __builtin_clz(integer_input)
    7c74:	f1b9 0f00 	cmp.w	r9, #0
    7c78:	d11e      	bne.n	7cb8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x858>
    7c7a:	f04f 0920 	mov.w	r9, #32
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
    7c7e:	f1c9 080c 	rsb	r8, r9, #12
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
    7c82:	fa00 f009 	lsl.w	r0, r0, r9
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
    7c86:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    7c8a:	4b19      	ldr	r3, [pc, #100]	; (7cf0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x890>)
    7c8c:	4798      	blx	r3
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
    7c8e:	9004      	str	r0, [sp, #16]
    for (int c = 0; c < depth; ++c) {
    7c90:	9b08      	ldr	r3, [sp, #32]
    7c92:	2b00      	cmp	r3, #0
    7c94:	f340 809a 	ble.w	7dcc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x96c>
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
    7c98:	f108 0817 	add.w	r8, r8, #23
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    7c9c:	f04f 0901 	mov.w	r9, #1
    7ca0:	fa09 f908 	lsl.w	r9, r9, r8
    7ca4:	f109 39ff 	add.w	r9, r9, #4294967295
  return a >> offset;
    7ca8:	ea4f 0369 	mov.w	r3, r9, asr #1
    7cac:	9305      	str	r3, [sp, #20]
    7cae:	9d07      	ldr	r5, [sp, #28]
    7cb0:	9c06      	ldr	r4, [sp, #24]
    7cb2:	f8cd b008 	str.w	fp, [sp, #8]
    7cb6:	e036      	b.n	7d26 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8c6>
  return integer_input ? __builtin_clz(integer_input)
    7cb8:	fab9 f989 	clz	r9, r9
    7cbc:	e7df      	b.n	7c7e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x81e>
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
    7cbe:	2000      	movs	r0, #0
  return integer_input ? __builtin_clz(integer_input)
    7cc0:	f04f 0920 	mov.w	r9, #32
    7cc4:	e7db      	b.n	7c7e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x81e>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    7cc6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    7cca:	d137      	bne.n	7d3c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8dc>
    7ccc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7cd0:	e051      	b.n	7d76 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x916>
  assert(exponent >= 0);
    7cd2:	4b08      	ldr	r3, [pc, #32]	; (7cf4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x894>)
    7cd4:	4a08      	ldr	r2, [pc, #32]	; (7cf8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x898>)
    7cd6:	f44f 71b3 	mov.w	r1, #358	; 0x166
    7cda:	4808      	ldr	r0, [pc, #32]	; (7cfc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x89c>)
    7cdc:	4c08      	ldr	r4, [pc, #32]	; (7d00 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8a0>)
    7cde:	47a0      	blx	r4
  assert(exponent <= 31);
    7ce0:	4b08      	ldr	r3, [pc, #32]	; (7d04 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8a4>)
    7ce2:	4a05      	ldr	r2, [pc, #20]	; (7cf8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x898>)
    7ce4:	f240 1167 	movw	r1, #359	; 0x167
    7ce8:	4804      	ldr	r0, [pc, #16]	; (7cfc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x89c>)
    7cea:	4c05      	ldr	r4, [pc, #20]	; (7d00 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8a0>)
    7cec:	47a0      	blx	r4
    7cee:	bf00      	nop
    7cf0:	00005f15 	.word	0x00005f15
    7cf4:	0002202c 	.word	0x0002202c
    7cf8:	00022390 	.word	0x00022390
    7cfc:	0002203c 	.word	0x0002203c
    7d00:	00014b4d 	.word	0x00014b4d
    7d04:	0002206c 	.word	0x0002206c
    7d08:	00007315 	.word	0x00007315
    7d0c:	000060b5 	.word	0x000060b5
    7d10:	ffff8000 	.word	0xffff8000
    7d14:	0000a461 	.word	0x0000a461
    7d18:	00014b3d 	.word	0x00014b3d
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    7d1c:	2380      	movs	r3, #128	; 0x80
    7d1e:	702b      	strb	r3, [r5, #0]
    7d20:	3501      	adds	r5, #1
    for (int c = 0; c < depth; ++c) {
    7d22:	42a7      	cmp	r7, r4
    7d24:	d050      	beq.n	7dc8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x968>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
    7d26:	f914 2b01 	ldrsb.w	r2, [r4], #1
    7d2a:	f99d 3033 	ldrsb.w	r3, [sp, #51]	; 0x33
    7d2e:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    7d30:	4592      	cmp	sl, r2
    7d32:	dcf3      	bgt.n	7d1c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8bc>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    7d34:	9b02      	ldr	r3, [sp, #8]
    7d36:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    7d38:	4296      	cmp	r6, r2
    7d3a:	d0c4      	beq.n	7cc6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x866>
  std::int64_t a_64(a);
    7d3c:	ea4f 7ce2 	mov.w	ip, r2, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    7d40:	9b01      	ldr	r3, [sp, #4]
    7d42:	fb02 f103 	mul.w	r1, r2, r3
    7d46:	fb06 110c 	mla	r1, r6, ip, r1
    7d4a:	fba2 2306 	umull	r2, r3, r2, r6
    7d4e:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    7d50:	2a00      	cmp	r2, #0
    7d52:	f173 0100 	sbcs.w	r1, r3, #0
    7d56:	f2c0 814e 	blt.w	7ff6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xb96>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    7d5a:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    7d5e:	f143 0300 	adc.w	r3, r3, #0
    7d62:	4610      	mov	r0, r2
    7d64:	4619      	mov	r1, r3
    7d66:	2a00      	cmp	r2, #0
    7d68:	f173 0e00 	sbcs.w	lr, r3, #0
    7d6c:	f2c0 81ec 	blt.w	8148 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xce8>
    7d70:	0fc0      	lsrs	r0, r0, #31
    7d72:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    7d76:	4bb5      	ldr	r3, [pc, #724]	; (804c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbec>)
    7d78:	4798      	blx	r3
            (shifted_scale * exp_in_0).raw(),
    7d7a:	4601      	mov	r1, r0
    7d7c:	9804      	ldr	r0, [sp, #16]
    7d7e:	4bb4      	ldr	r3, [pc, #720]	; (8050 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbf0>)
    7d80:	4798      	blx	r3
  assert(exponent >= 0);
    7d82:	f1b8 0f00 	cmp.w	r8, #0
    7d86:	dba4      	blt.n	7cd2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x872>
  assert(exponent <= 31);
    7d88:	f1b8 0f1f 	cmp.w	r8, #31
    7d8c:	dca8      	bgt.n	7ce0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x880>
  return a + b;
    7d8e:	9b05      	ldr	r3, [sp, #20]
    7d90:	eb03 72d0 	add.w	r2, r3, r0, lsr #31
  return a & b;
    7d94:	ea00 0309 	and.w	r3, r0, r9
  return a >> offset;
    7d98:	fa40 f008 	asr.w	r0, r0, r8
  return a + b;
    7d9c:	429a      	cmp	r2, r3
    7d9e:	bfb8      	it	lt
    7da0:	3001      	addlt	r0, #1
            unsat_output +
    7da2:	3880      	subs	r0, #128	; 0x80
            static_cast<int32>(std::numeric_limits<OutputT>::min());
    7da4:	900d      	str	r0, [sp, #52]	; 0x34
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
    7da6:	237f      	movs	r3, #127	; 0x7f
    7da8:	9337      	str	r3, [sp, #220]	; 0xdc
      if (__b < __a)
    7daa:	4298      	cmp	r0, r3
      return __a;
    7dac:	bfd4      	ite	le
    7dae:	ab0d      	addle	r3, sp, #52	; 0x34
	return __b;
    7db0:	ab37      	addgt	r3, sp, #220	; 0xdc
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
    7db2:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    7db6:	9236      	str	r2, [sp, #216]	; 0xd8
      if (__a < __b)
    7db8:	681a      	ldr	r2, [r3, #0]
    7dba:	f112 0f80 	cmn.w	r2, #128	; 0x80
	return __b;
    7dbe:	bfb8      	it	lt
    7dc0:	ab36      	addlt	r3, sp, #216	; 0xd8
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    7dc2:	681b      	ldr	r3, [r3, #0]
    7dc4:	702b      	strb	r3, [r5, #0]
    7dc6:	e7ab      	b.n	7d20 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8c0>
    7dc8:	f8dd b008 	ldr.w	fp, [sp, #8]
  for (int i = 0; i < outer_size; ++i) {
    7dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7dce:	3301      	adds	r3, #1
    7dd0:	9309      	str	r3, [sp, #36]	; 0x24
    7dd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    7dd4:	440f      	add	r7, r1
    7dd6:	9a06      	ldr	r2, [sp, #24]
    7dd8:	4610      	mov	r0, r2
    7dda:	460a      	mov	r2, r1
    7ddc:	4408      	add	r0, r1
    7dde:	9006      	str	r0, [sp, #24]
    7de0:	9907      	ldr	r1, [sp, #28]
    7de2:	4608      	mov	r0, r1
    7de4:	4410      	add	r0, r2
    7de6:	9007      	str	r0, [sp, #28]
    7de8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7dea:	4293      	cmp	r3, r2
    7dec:	d01c      	beq.n	7e28 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9c8>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    7dee:	2380      	movs	r3, #128	; 0x80
    7df0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    for (int c = 0; c < depth; ++c) {
    7df4:	9b08      	ldr	r3, [sp, #32]
    7df6:	2b00      	cmp	r3, #0
    7df8:	f77f af61 	ble.w	7cbe <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x85e>
    7dfc:	9c06      	ldr	r4, [sp, #24]
      return __a;
    7dfe:	f10d 0033 	add.w	r0, sp, #51	; 0x33
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    7e02:	4623      	mov	r3, r4
    7e04:	3401      	adds	r4, #1
      if (__a < __b)
    7e06:	f99d 1033 	ldrsb.w	r1, [sp, #51]	; 0x33
    7e0a:	f993 2000 	ldrsb.w	r2, [r3]
    7e0e:	4291      	cmp	r1, r2
      return __a;
    7e10:	bfa8      	it	ge
    7e12:	4603      	movge	r3, r0
    7e14:	f993 8000 	ldrsb.w	r8, [r3]
    7e18:	f88d 8033 	strb.w	r8, [sp, #51]	; 0x33
    for (int c = 0; c < depth; ++c) {
    7e1c:	42a7      	cmp	r7, r4
    7e1e:	d1f0      	bne.n	7e02 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9a2>
    7e20:	9d06      	ldr	r5, [sp, #24]
    7e22:	f04f 0900 	mov.w	r9, #0
    7e26:	e166      	b.n	80f6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc96>
    if (size_ > kMaxSmallSize) {
    7e28:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    7e2a:	2b05      	cmp	r3, #5
    7e2c:	dd03      	ble.n	7e36 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9d6>
      delete[] dims_pointer_;
    7e2e:	982d      	ldr	r0, [sp, #180]	; 0xb4
    7e30:	b108      	cbz	r0, 7e36 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9d6>
    7e32:	4b88      	ldr	r3, [pc, #544]	; (8054 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbf4>)
    7e34:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    7e36:	9b26      	ldr	r3, [sp, #152]	; 0x98
    7e38:	2b05      	cmp	r3, #5
    7e3a:	dd03      	ble.n	7e44 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9e4>
      delete[] dims_pointer_;
    7e3c:	9827      	ldr	r0, [sp, #156]	; 0x9c
    7e3e:	b108      	cbz	r0, 7e44 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9e4>
    7e40:	4b84      	ldr	r3, [pc, #528]	; (8054 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbf4>)
    7e42:	4798      	blx	r3
}
    7e44:	b039      	add	sp, #228	; 0xe4
    7e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (int i = 0; i < dims_count; ++i) {
    7e4a:	2900      	cmp	r1, #0
    7e4c:	f77f ac7e 	ble.w	774c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2ec>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    7e50:	a80f      	add	r0, sp, #60	; 0x3c
    7e52:	e428      	b.n	76a6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x246>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    7e54:	0fc0      	lsrs	r0, r0, #31
    7e56:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    7e5a:	4b7c      	ldr	r3, [pc, #496]	; (804c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbec>)
    7e5c:	4798      	blx	r3
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
    7e5e:	4b7e      	ldr	r3, [pc, #504]	; (8058 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbf8>)
    7e60:	4798      	blx	r3
  return a + b;
    7e62:	4482      	add	sl, r0
    for (int c = 0; c < depth; ++c) {
    7e64:	42ac      	cmp	r4, r5
    7e66:	f43f ac8d 	beq.w	7784 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x324>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
    7e6a:	f815 2b01 	ldrb.w	r2, [r5], #1
    7e6e:	eba2 0209 	sub.w	r2, r2, r9
      if (input_diff >= diff_min) {
    7e72:	4590      	cmp	r8, r2
    7e74:	dcf6      	bgt.n	7e64 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xa04>
    7e76:	9b00      	ldr	r3, [sp, #0]
    7e78:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    7e7a:	4296      	cmp	r6, r2
    7e7c:	f43f ac72 	beq.w	7764 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x304>
  std::int64_t a_64(a);
    7e80:	ea4f 7ce2 	mov.w	ip, r2, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    7e84:	9b03      	ldr	r3, [sp, #12]
    7e86:	fb02 f103 	mul.w	r1, r2, r3
    7e8a:	fb06 110c 	mla	r1, r6, ip, r1
    7e8e:	fba2 2306 	umull	r2, r3, r2, r6
    7e92:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    7e94:	2a00      	cmp	r2, #0
    7e96:	f173 0100 	sbcs.w	r1, r3, #0
    7e9a:	f2c0 80c1 	blt.w	8020 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbc0>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    7e9e:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    7ea2:	f143 0300 	adc.w	r3, r3, #0
    7ea6:	4610      	mov	r0, r2
    7ea8:	4619      	mov	r1, r3
    7eaa:	2a00      	cmp	r2, #0
    7eac:	f173 0e00 	sbcs.w	lr, r3, #0
    7eb0:	dad0      	bge.n	7e54 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9f4>
    7eb2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7eb6:	2100      	movs	r1, #0
    7eb8:	1880      	adds	r0, r0, r2
    7eba:	4159      	adcs	r1, r3
    7ebc:	e7ca      	b.n	7e54 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9f4>
    7ebe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7ec2:	2100      	movs	r1, #0
    7ec4:	1880      	adds	r0, r0, r2
    7ec6:	4159      	adcs	r1, r3
    7ec8:	e4c1      	b.n	784e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x3ee>
  for (int i = 0; i < dims_count; ++i) {
    7eca:	2900      	cmp	r1, #0
    7ecc:	f77f ada7 	ble.w	7a1e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5be>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    7ed0:	a81b      	add	r0, sp, #108	; 0x6c
    7ed2:	2301      	movs	r3, #1
    7ed4:	461d      	mov	r5, r3
    7ed6:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    7ed8:	462c      	mov	r4, r5
    7eda:	429f      	cmp	r7, r3
    7edc:	bf14      	ite	ne
    7ede:	f850 2023 	ldrne.w	r2, [r0, r3, lsl #2]
    7ee2:	4622      	moveq	r2, r4
    7ee4:	fb02 f505 	mul.w	r5, r2, r5
  for (int i = 0; i < dims_count; ++i) {
    7ee8:	3301      	adds	r3, #1
    7eea:	4299      	cmp	r1, r3
    7eec:	dcf5      	bgt.n	7eda <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xa7a>
    7eee:	9509      	str	r5, [sp, #36]	; 0x24
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    7ef0:	2905      	cmp	r1, #5
    7ef2:	f73f ad7c 	bgt.w	79ee <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x58e>
    7ef6:	ab38      	add	r3, sp, #224	; 0xe0
    7ef8:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    7efc:	f853 2c74 	ldr.w	r2, [r3, #-116]
    TFLITE_DCHECK_LT(i, size_);
    7f00:	9b20      	ldr	r3, [sp, #128]	; 0x80
    7f02:	429f      	cmp	r7, r3
    7f04:	f6bf ad8e 	bge.w	7a24 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5c4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    7f08:	2b05      	cmp	r3, #5
    7f0a:	f73f ad8d 	bgt.w	7a28 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5c8>
    7f0e:	ab38      	add	r3, sp, #224	; 0xe0
    7f10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    7f14:	f857 3c5c 	ldr.w	r3, [r7, #-92]
    7f18:	9307      	str	r3, [sp, #28]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    7f1a:	9b07      	ldr	r3, [sp, #28]
    7f1c:	4293      	cmp	r3, r2
    7f1e:	f47f ad88 	bne.w	7a32 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5d2>
  for (int i = 0; i < outer_size; ++i) {
    7f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7f24:	2b00      	cmp	r3, #0
    7f26:	f77f ae65 	ble.w	7bf4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x794>
    7f2a:	9b07      	ldr	r3, [sp, #28]
    7f2c:	930a      	str	r3, [sp, #40]	; 0x28
    7f2e:	9a00      	ldr	r2, [sp, #0]
    7f30:	18d7      	adds	r7, r2, r3
    7f32:	9205      	str	r2, [sp, #20]
    7f34:	005b      	lsls	r3, r3, #1
    7f36:	930b      	str	r3, [sp, #44]	; 0x2c
    7f38:	f8cd b018 	str.w	fp, [sp, #24]
    7f3c:	2300      	movs	r3, #0
    7f3e:	9308      	str	r3, [sp, #32]
  std::int64_t b_64(b);
    7f40:	4633      	mov	r3, r6
    7f42:	17f4      	asrs	r4, r6, #31
    7f44:	e9cd 3400 	strd	r3, r4, [sp]
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    7f48:	f8dd b008 	ldr.w	fp, [sp, #8]
    7f4c:	e635      	b.n	7bba <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x75a>
    7f4e:	0fc0      	lsrs	r0, r0, #31
    7f50:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    7f54:	4b3d      	ldr	r3, [pc, #244]	; (804c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbec>)
    7f56:	4798      	blx	r3
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
    7f58:	4b3f      	ldr	r3, [pc, #252]	; (8058 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbf8>)
    7f5a:	4798      	blx	r3
  return a + b;
    7f5c:	4481      	add	r9, r0
    for (int c = 0; c < depth; ++c) {
    7f5e:	42ac      	cmp	r4, r5
    7f60:	f43f ad8a 	beq.w	7a78 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x618>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
    7f64:	f915 2b01 	ldrsb.w	r2, [r5], #1
    7f68:	eba2 0208 	sub.w	r2, r2, r8
      if (input_diff >= diff_min) {
    7f6c:	4592      	cmp	sl, r2
    7f6e:	dcf6      	bgt.n	7f5e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xafe>
    7f70:	fa02 f20b 	lsl.w	r2, r2, fp
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    7f74:	4296      	cmp	r6, r2
    7f76:	f43f ad5e 	beq.w	7a36 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5d6>
  std::int64_t a_64(a);
    7f7a:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    7f7c:	fb06 f101 	mul.w	r1, r6, r1
    7f80:	9b01      	ldr	r3, [sp, #4]
    7f82:	fb02 1103 	mla	r1, r2, r3, r1
    7f86:	fba6 2302 	umull	r2, r3, r6, r2
    7f8a:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    7f8c:	2a00      	cmp	r2, #0
    7f8e:	f173 0100 	sbcs.w	r1, r3, #0
    7f92:	db7b      	blt.n	808c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc2c>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    7f94:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    7f98:	f143 0300 	adc.w	r3, r3, #0
    7f9c:	4610      	mov	r0, r2
    7f9e:	4619      	mov	r1, r3
    7fa0:	2a00      	cmp	r2, #0
    7fa2:	f173 0e00 	sbcs.w	lr, r3, #0
    7fa6:	dad2      	bge.n	7f4e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xaee>
    7fa8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7fac:	2100      	movs	r1, #0
    7fae:	1880      	adds	r0, r0, r2
    7fb0:	4159      	adcs	r1, r3
    7fb2:	e7cc      	b.n	7f4e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xaee>
    7fb4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7fb8:	2100      	movs	r1, #0
    7fba:	1880      	adds	r0, r0, r2
    7fbc:	4159      	adcs	r1, r3
    7fbe:	e5be      	b.n	7b3e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x6de>
  for (int i = 0; i < dims_count; ++i) {
    7fc0:	2900      	cmp	r1, #0
    7fc2:	f77f ae43 	ble.w	7c4c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7ec>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    7fc6:	a827      	add	r0, sp, #156	; 0x9c
    7fc8:	f7ff bac7 	b.w	755a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xfa>
    7fcc:	4823      	ldr	r0, [pc, #140]	; (805c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbfc>)
    7fce:	f04f 31ff 	mov.w	r1, #4294967295
    7fd2:	1880      	adds	r0, r0, r2
    7fd4:	4159      	adcs	r1, r3
    7fd6:	4602      	mov	r2, r0
    7fd8:	460b      	mov	r3, r1
    7fda:	2800      	cmp	r0, #0
    7fdc:	f171 0e00 	sbcs.w	lr, r1, #0
    7fe0:	db03      	blt.n	7fea <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xb8a>
    7fe2:	0fc0      	lsrs	r0, r0, #31
    7fe4:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
    7fe8:	e07d      	b.n	80e6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc86>
    7fea:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7fee:	2100      	movs	r1, #0
    7ff0:	1880      	adds	r0, r0, r2
    7ff2:	4159      	adcs	r1, r3
    7ff4:	e7f5      	b.n	7fe2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xb82>
    7ff6:	4819      	ldr	r0, [pc, #100]	; (805c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbfc>)
    7ff8:	f04f 31ff 	mov.w	r1, #4294967295
    7ffc:	1880      	adds	r0, r0, r2
    7ffe:	4159      	adcs	r1, r3
    8000:	4602      	mov	r2, r0
    8002:	460b      	mov	r3, r1
    8004:	2800      	cmp	r0, #0
    8006:	f171 0e00 	sbcs.w	lr, r1, #0
    800a:	db03      	blt.n	8014 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbb4>
    800c:	0fc0      	lsrs	r0, r0, #31
    800e:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
    8012:	e6b0      	b.n	7d76 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x916>
    8014:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    8018:	2100      	movs	r1, #0
    801a:	1880      	adds	r0, r0, r2
    801c:	4159      	adcs	r1, r3
    801e:	e7f5      	b.n	800c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbac>
    8020:	480e      	ldr	r0, [pc, #56]	; (805c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbfc>)
    8022:	f04f 31ff 	mov.w	r1, #4294967295
    8026:	1880      	adds	r0, r0, r2
    8028:	4159      	adcs	r1, r3
    802a:	4602      	mov	r2, r0
    802c:	460b      	mov	r3, r1
    802e:	2800      	cmp	r0, #0
    8030:	f171 0e00 	sbcs.w	lr, r1, #0
    8034:	db03      	blt.n	803e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbde>
    8036:	0fc0      	lsrs	r0, r0, #31
    8038:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
    803c:	e70d      	b.n	7e5a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9fa>
    803e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    8042:	2100      	movs	r1, #0
    8044:	1880      	adds	r0, r0, r2
    8046:	4159      	adcs	r1, r3
    8048:	e7f5      	b.n	8036 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbd6>
    804a:	bf00      	nop
    804c:	00007315 	.word	0x00007315
    8050:	000060b5 	.word	0x000060b5
    8054:	0000a461 	.word	0x0000a461
    8058:	0000744d 	.word	0x0000744d
    805c:	c0000001 	.word	0xc0000001
    8060:	483c      	ldr	r0, [pc, #240]	; (8154 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xcf4>)
    8062:	f04f 31ff 	mov.w	r1, #4294967295
    8066:	1880      	adds	r0, r0, r2
    8068:	4159      	adcs	r1, r3
    806a:	4602      	mov	r2, r0
    806c:	460b      	mov	r3, r1
    806e:	2800      	cmp	r0, #0
    8070:	f171 0e00 	sbcs.w	lr, r1, #0
    8074:	db04      	blt.n	8080 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc20>
    8076:	0fc0      	lsrs	r0, r0, #31
    8078:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
    807c:	f7ff bbea 	b.w	7854 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x3f4>
    8080:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    8084:	2100      	movs	r1, #0
    8086:	1880      	adds	r0, r0, r2
    8088:	4159      	adcs	r1, r3
    808a:	e7f4      	b.n	8076 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc16>
    808c:	4831      	ldr	r0, [pc, #196]	; (8154 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xcf4>)
    808e:	f04f 31ff 	mov.w	r1, #4294967295
    8092:	1880      	adds	r0, r0, r2
    8094:	4159      	adcs	r1, r3
    8096:	4602      	mov	r2, r0
    8098:	460b      	mov	r3, r1
    809a:	2800      	cmp	r0, #0
    809c:	f171 0e00 	sbcs.w	lr, r1, #0
    80a0:	db03      	blt.n	80aa <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc4a>
    80a2:	0fc0      	lsrs	r0, r0, #31
    80a4:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
    80a8:	e754      	b.n	7f54 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xaf4>
    80aa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    80ae:	2100      	movs	r1, #0
    80b0:	1880      	adds	r0, r0, r2
    80b2:	4159      	adcs	r1, r3
    80b4:	e7f5      	b.n	80a2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc42>
    80b6:	4827      	ldr	r0, [pc, #156]	; (8154 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xcf4>)
    80b8:	f04f 31ff 	mov.w	r1, #4294967295
    80bc:	1880      	adds	r0, r0, r2
    80be:	4159      	adcs	r1, r3
    80c0:	4602      	mov	r2, r0
    80c2:	460b      	mov	r3, r1
    80c4:	2800      	cmp	r0, #0
    80c6:	f171 0e00 	sbcs.w	lr, r1, #0
    80ca:	db03      	blt.n	80d4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc74>
    80cc:	0fc0      	lsrs	r0, r0, #31
    80ce:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
    80d2:	e537      	b.n	7b44 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x6e4>
    80d4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    80d8:	2100      	movs	r1, #0
    80da:	1880      	adds	r0, r0, r2
    80dc:	4159      	adcs	r1, r3
    80de:	e7f5      	b.n	80cc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc6c>
    80e0:	0fc0      	lsrs	r0, r0, #31
    80e2:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    80e6:	4b1c      	ldr	r3, [pc, #112]	; (8158 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xcf8>)
    80e8:	4798      	blx	r3
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
    80ea:	4b1c      	ldr	r3, [pc, #112]	; (815c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xcfc>)
    80ec:	4798      	blx	r3
  return a + b;
    80ee:	4481      	add	r9, r0
    for (int c = 0; c < depth; ++c) {
    80f0:	42a5      	cmp	r5, r4
    80f2:	f43f adbe 	beq.w	7c72 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x812>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
    80f6:	f915 2b01 	ldrsb.w	r2, [r5], #1
    80fa:	eba2 0208 	sub.w	r2, r2, r8
      if (input_diff >= diff_min) {
    80fe:	4592      	cmp	sl, r2
    8100:	dcf6      	bgt.n	80f0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc90>
    8102:	fa02 f20b 	lsl.w	r2, r2, fp
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    8106:	4296      	cmp	r6, r2
    8108:	f43f adac 	beq.w	7c64 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x804>
  std::int64_t a_64(a);
    810c:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    810e:	fb06 f101 	mul.w	r1, r6, r1
    8112:	9b01      	ldr	r3, [sp, #4]
    8114:	fb02 1103 	mla	r1, r2, r3, r1
    8118:	fba6 2302 	umull	r2, r3, r6, r2
    811c:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    811e:	2a00      	cmp	r2, #0
    8120:	f173 0100 	sbcs.w	r1, r3, #0
    8124:	f6ff af52 	blt.w	7fcc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xb6c>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    8128:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    812c:	f143 0300 	adc.w	r3, r3, #0
    8130:	4610      	mov	r0, r2
    8132:	4619      	mov	r1, r3
    8134:	2a00      	cmp	r2, #0
    8136:	f173 0e00 	sbcs.w	lr, r3, #0
    813a:	dad1      	bge.n	80e0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc80>
    813c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    8140:	2100      	movs	r1, #0
    8142:	1880      	adds	r0, r0, r2
    8144:	4159      	adcs	r1, r3
    8146:	e7cb      	b.n	80e0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc80>
    8148:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    814c:	2100      	movs	r1, #0
    814e:	1880      	adds	r0, r0, r2
    8150:	4159      	adcs	r1, r3
    8152:	e60d      	b.n	7d70 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x910>
    8154:	c0000001 	.word	0xc0000001
    8158:	00007315 	.word	0x00007315
    815c:	0000744d 	.word	0x0000744d

00008160 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
    8160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8162:	4607      	mov	r7, r0
  return &context->tensors[node->inputs->data[index]];
    8164:	6885      	ldr	r5, [r0, #8]
    8166:	680b      	ldr	r3, [r1, #0]
    8168:	685c      	ldr	r4, [r3, #4]
    816a:	01a4      	lsls	r4, r4, #6
    816c:	1928      	adds	r0, r5, r4
  return &context->tensors[node->outputs->data[index]];
    816e:	684b      	ldr	r3, [r1, #4]
    8170:	685e      	ldr	r6, [r3, #4]
    8172:	eb05 1686 	add.w	r6, r5, r6, lsl #6
  TFLITE_DCHECK(node->user_data != nullptr);
    8176:	690a      	ldr	r2, [r1, #16]
    8178:	b18a      	cbz	r2, 819e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x3e>
  switch (input->type) {
    817a:	5d2b      	ldrb	r3, [r5, r4]
    817c:	2b03      	cmp	r3, #3
    817e:	d015      	beq.n	81ac <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4c>
    8180:	2b09      	cmp	r3, #9
    8182:	d013      	beq.n	81ac <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4c>
    8184:	2b01      	cmp	r3, #1
    8186:	d00c      	beq.n	81a2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x42>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    8188:	697e      	ldr	r6, [r7, #20]
    818a:	4618      	mov	r0, r3
    818c:	4b0a      	ldr	r3, [pc, #40]	; (81b8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x58>)
    818e:	4798      	blx	r3
    8190:	5d2b      	ldrb	r3, [r5, r4]
    8192:	4602      	mov	r2, r0
    8194:	4909      	ldr	r1, [pc, #36]	; (81bc <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
    8196:	4638      	mov	r0, r7
    8198:	47b0      	blx	r6
      return kTfLiteError;
    819a:	2001      	movs	r0, #1
}
    819c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
    819e:	4b08      	ldr	r3, [pc, #32]	; (81c0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x60>)
    81a0:	4798      	blx	r3
      SoftmaxFloat(input, output, *data);
    81a2:	4631      	mov	r1, r6
    81a4:	4b07      	ldr	r3, [pc, #28]	; (81c4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x64>)
    81a6:	4798      	blx	r3
      return kTfLiteOk;
    81a8:	2000      	movs	r0, #0
    81aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SoftmaxQuantized(input, output, *data);
    81ac:	4631      	mov	r1, r6
    81ae:	4b06      	ldr	r3, [pc, #24]	; (81c8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x68>)
    81b0:	4798      	blx	r3
      return kTfLiteOk;
    81b2:	2000      	movs	r0, #0
    81b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    81b6:	bf00      	nop
    81b8:	0000a3c5 	.word	0x0000a3c5
    81bc:	0002207c 	.word	0x0002207c
    81c0:	00014b3d 	.word	0x00014b3d
    81c4:	00007031 	.word	0x00007031
    81c8:	00007461 	.word	0x00007461

000081cc <_ZN6tflite14AlignPointerUpEPhj>:
namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
    81cc:	1e4b      	subs	r3, r1, #1
    81ce:	4418      	add	r0, r3
    81d0:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
    81d4:	fb01 f000 	mul.w	r0, r1, r0
    81d8:	4770      	bx	lr

000081da <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
    81da:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
    81de:	fb00 f001 	mul.w	r0, r0, r1
    81e2:	4770      	bx	lr

000081e4 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
    81e4:	3801      	subs	r0, #1
    81e6:	4408      	add	r0, r1
    81e8:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_size;
}
    81ec:	fb01 f000 	mul.w	r0, r1, r0
    81f0:	4770      	bx	lr

000081f2 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
  switch (type) {
    81f2:	3801      	subs	r0, #1
    81f4:	280b      	cmp	r0, #11
    81f6:	d82b      	bhi.n	8250 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x5e>
    81f8:	e8df f000 	tbb	[pc, r0]
    81fc:	1a120e06 	.word	0x1a120e06
    8200:	220a1e2a 	.word	0x220a1e2a
    8204:	262a2a16 	.word	0x262a2a16
    case kTfLiteFloat32:
      *size = sizeof(float);
    8208:	2304      	movs	r3, #4
    820a:	600b      	str	r3, [r1, #0]
      *size = sizeof(double) * 2;
      break;
    default:
      return kTfLiteError;
  }
  return kTfLiteOk;
    820c:	2000      	movs	r0, #0
      break;
    820e:	4770      	bx	lr
      *size = sizeof(int16_t);
    8210:	2302      	movs	r3, #2
    8212:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    8214:	2000      	movs	r0, #0
      break;
    8216:	4770      	bx	lr
      *size = sizeof(int32_t);
    8218:	2304      	movs	r3, #4
    821a:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    821c:	2000      	movs	r0, #0
      break;
    821e:	4770      	bx	lr
      *size = sizeof(uint8_t);
    8220:	2301      	movs	r3, #1
    8222:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    8224:	2000      	movs	r0, #0
      break;
    8226:	4770      	bx	lr
      *size = sizeof(int8_t);
    8228:	2301      	movs	r3, #1
    822a:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    822c:	2000      	movs	r0, #0
      break;
    822e:	4770      	bx	lr
      *size = sizeof(int64_t);
    8230:	2308      	movs	r3, #8
    8232:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    8234:	2000      	movs	r0, #0
      break;
    8236:	4770      	bx	lr
      *size = sizeof(bool);
    8238:	2301      	movs	r3, #1
    823a:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    823c:	2000      	movs	r0, #0
      break;
    823e:	4770      	bx	lr
      *size = sizeof(float) * 2;
    8240:	2308      	movs	r3, #8
    8242:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    8244:	2000      	movs	r0, #0
      break;
    8246:	4770      	bx	lr
      *size = sizeof(double) * 2;
    8248:	2310      	movs	r3, #16
    824a:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    824c:	2000      	movs	r0, #0
      break;
    824e:	4770      	bx	lr
      return kTfLiteError;
    8250:	2001      	movs	r0, #1
}
    8252:	4770      	bx	lr

00008254 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
    8254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8258:	b083      	sub	sp, #12
    825a:	4688      	mov	r8, r1
    825c:	4691      	mov	r9, r2
    return data_ - ReadScalar<soffset_t>(data_);
    825e:	6802      	ldr	r2, [r0, #0]
    8260:	eba0 0e02 	sub.w	lr, r0, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8264:	f8be c000 	ldrh.w	ip, [lr]
    8268:	f1bc 0f04 	cmp.w	ip, #4
    826c:	dd22      	ble.n	82b4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x60>
    826e:	f8be 2004 	ldrh.w	r2, [lr, #4]
    auto p = data_ + field_offset;
    8272:	1885      	adds	r5, r0, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8274:	b302      	cbz	r2, 82b8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x64>
    8276:	5881      	ldr	r1, [r0, r2]
  int element_count = 1;
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
    8278:	186c      	adds	r4, r5, r1
    827a:	d01f      	beq.n	82bc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x68>
  uoffset_t size() const { return EndianScalar(length_); }
    827c:	586f      	ldr	r7, [r5, r1]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    827e:	b1ff      	cbz	r7, 82c0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6c>
    8280:	2100      	movs	r1, #0
    8282:	2501      	movs	r5, #1
      element_count *= flatbuffer_tensor.shape()->Get(n);
    8284:	f854 6f04 	ldr.w	r6, [r4, #4]!
    8288:	fb06 f505 	mul.w	r5, r6, r5
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    828c:	3101      	adds	r1, #1
    828e:	42b9      	cmp	r1, r7
    8290:	d1f8      	bne.n	8284 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x30>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8292:	f1bc 0f06 	cmp.w	ip, #6
    8296:	dd15      	ble.n	82c4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x70>
    8298:	f8be 2006 	ldrh.w	r2, [lr, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    829c:	b1a2      	cbz	r2, 82c8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x74>
    829e:	5680      	ldrsb	r0, [r0, r2]
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    82a0:	461a      	mov	r2, r3
    82a2:	f10d 0107 	add.w	r1, sp, #7
    82a6:	b2c0      	uxtb	r0, r0
    82a8:	4b0f      	ldr	r3, [pc, #60]	; (82e8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x94>)
    82aa:	4798      	blx	r3
    82ac:	b170      	cbz	r0, 82cc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x78>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
  *bytes = element_count * (*type_size);
  return kTfLiteOk;
}
    82ae:	b003      	add	sp, #12
    82b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  int element_count = 1;
    82b4:	2501      	movs	r5, #1
    82b6:	e7ec      	b.n	8292 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
    82b8:	2501      	movs	r5, #1
    82ba:	e7ea      	b.n	8292 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
    82bc:	2501      	movs	r5, #1
    82be:	e7e8      	b.n	8292 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    82c0:	2501      	movs	r5, #1
    82c2:	e7e6      	b.n	8292 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
    82c4:	2000      	movs	r0, #0
    82c6:	e7eb      	b.n	82a0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4c>
    82c8:	2000      	movs	r0, #0
    82ca:	e7e9      	b.n	82a0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4c>
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
    82cc:	4649      	mov	r1, r9
    82ce:	f89d 0007 	ldrb.w	r0, [sp, #7]
    82d2:	4b06      	ldr	r3, [pc, #24]	; (82ec <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x98>)
    82d4:	4798      	blx	r3
    82d6:	2800      	cmp	r0, #0
    82d8:	d1e9      	bne.n	82ae <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x5a>
  *bytes = element_count * (*type_size);
    82da:	f8d9 2000 	ldr.w	r2, [r9]
    82de:	fb05 f502 	mul.w	r5, r5, r2
    82e2:	f8c8 5000 	str.w	r5, [r8]
  return kTfLiteOk;
    82e6:	e7e2      	b.n	82ae <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x5a>
    82e8:	000012f9 	.word	0x000012f9
    82ec:	000081f3 	.word	0x000081f3

000082f0 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
}

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
  // We don't own the scratch buffer, so don't deallocate anything.
}
    82f0:	4770      	bx	lr

000082f2 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    line[kLineWidth] = 0;
    TF_LITE_REPORT_ERROR(error_reporter, "%s", (const char*)line);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
    82f2:	6880      	ldr	r0, [r0, #8]
    82f4:	4770      	bx	lr
	...

000082f8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
    int last_time_used) {
    82f8:	b538      	push	{r3, r4, r5, lr}
  if (buffer_count_ >= max_buffer_count_) {
    82fa:	6884      	ldr	r4, [r0, #8]
    82fc:	6845      	ldr	r5, [r0, #4]
    82fe:	42ac      	cmp	r4, r5
    8300:	da11      	bge.n	8326 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2e>
  BufferRequirements* current = &requirements_[buffer_count_];
    8302:	0124      	lsls	r4, r4, #4
    8304:	68c5      	ldr	r5, [r0, #12]
    8306:	1929      	adds	r1, r5, r4
  current->size = size;
    8308:	512a      	str	r2, [r5, r4]
  current->first_time_used = first_time_used;
    830a:	608b      	str	r3, [r1, #8]
  current->last_time_used = last_time_used;
    830c:	9b04      	ldr	r3, [sp, #16]
    830e:	60cb      	str	r3, [r1, #12]
  current->offline_offset = kOnlinePlannedBuffer;
    8310:	f04f 33ff 	mov.w	r3, #4294967295
    8314:	604b      	str	r3, [r1, #4]
  ++buffer_count_;
    8316:	6883      	ldr	r3, [r0, #8]
    8318:	3301      	adds	r3, #1
    831a:	6083      	str	r3, [r0, #8]
  need_to_calculate_offsets_ = true;
    831c:	2301      	movs	r3, #1
    831e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  return kTfLiteOk;
    8322:	2000      	movs	r0, #0
}
    8324:	bd38      	pop	{r3, r4, r5, pc}
    8326:	4608      	mov	r0, r1
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
    8328:	462a      	mov	r2, r5
    832a:	4902      	ldr	r1, [pc, #8]	; (8334 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x3c>)
    832c:	4b02      	ldr	r3, [pc, #8]	; (8338 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x40>)
    832e:	4798      	blx	r3
    return kTfLiteError;
    8330:	2001      	movs	r0, #1
    8332:	bd38      	pop	{r3, r4, r5, pc}
    8334:	000224ec 	.word	0x000224ec
    8338:	00001265 	.word	0x00001265

0000833c <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
    833c:	b510      	push	{r4, lr}
    833e:	4604      	mov	r4, r0
}
    8340:	212c      	movs	r1, #44	; 0x2c
    8342:	4b02      	ldr	r3, [pc, #8]	; (834c <_ZN6tflite19GreedyMemoryPlannerD0Ev+0x10>)
    8344:	4798      	blx	r3
    8346:	4620      	mov	r0, r4
    8348:	bd10      	pop	{r4, pc}
    834a:	bf00      	nop
    834c:	0000a45d 	.word	0x0000a45d

00008350 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
void ReverseSortInPlace(int* values, int* ids, int size) {
    8350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8354:	4694      	mov	ip, r2
    8356:	f102 4780 	add.w	r7, r2, #1073741824	; 0x40000000
    835a:	3f01      	subs	r7, #1
    835c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
    for (int i = 1; i < size; ++i) {
    8360:	f04f 0800 	mov.w	r8, #0
        any_swapped = true;
    8364:	f04f 0e01 	mov.w	lr, #1
    8368:	e010      	b.n	838c <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x3c>
    836a:	3304      	adds	r3, #4
    836c:	3404      	adds	r4, #4
    for (int i = 1; i < size; ++i) {
    836e:	42bb      	cmp	r3, r7
    8370:	d00b      	beq.n	838a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x3a>
      if (values[i - 1] < values[i]) {
    8372:	681d      	ldr	r5, [r3, #0]
    8374:	685e      	ldr	r6, [r3, #4]
    8376:	42b5      	cmp	r5, r6
    8378:	daf7      	bge.n	836a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x1a>
        values[i - 1] = values[i];
    837a:	601e      	str	r6, [r3, #0]
        values[i] = value_temp;
    837c:	605d      	str	r5, [r3, #4]
        const int id_temp = ids[i - 1];
    837e:	6825      	ldr	r5, [r4, #0]
        ids[i - 1] = ids[i];
    8380:	6866      	ldr	r6, [r4, #4]
    8382:	6026      	str	r6, [r4, #0]
        ids[i] = id_temp;
    8384:	6065      	str	r5, [r4, #4]
        any_swapped = true;
    8386:	4672      	mov	r2, lr
    8388:	e7ef      	b.n	836a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x1a>
  do {
    838a:	b132      	cbz	r2, 839a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x4a>
    for (int i = 1; i < size; ++i) {
    838c:	f1bc 0f01 	cmp.w	ip, #1
    8390:	dd03      	ble.n	839a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x4a>
    8392:	4603      	mov	r3, r0
    8394:	460c      	mov	r4, r1
    8396:	4642      	mov	r2, r8
    8398:	e7eb      	b.n	8372 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x22>
    839a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000083a0 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
    83a0:	b410      	push	{r4}
    : buffer_count_(0), need_to_calculate_offsets_(true) {
    83a2:	4c0e      	ldr	r4, [pc, #56]	; (83dc <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0x3c>)
    83a4:	6004      	str	r4, [r0, #0]
    83a6:	2400      	movs	r4, #0
    83a8:	6084      	str	r4, [r0, #8]
    83aa:	2401      	movs	r4, #1
    83ac:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
    83b0:	f104 34cc 	add.w	r4, r4, #3435973836	; 0xcccccccc
    83b4:	fba4 4202 	umull	r4, r2, r4, r2
    83b8:	0952      	lsrs	r2, r2, #5
    83ba:	6042      	str	r2, [r0, #4]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
    83bc:	60c1      	str	r1, [r0, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
    83be:	eb01 1102 	add.w	r1, r1, r2, lsl #4
  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
    83c2:	6101      	str	r1, [r0, #16]
  next_free += sizeof(int) * max_buffer_count_;
    83c4:	0094      	lsls	r4, r2, #2
    83c6:	4421      	add	r1, r4
  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
    83c8:	6141      	str	r1, [r0, #20]
  next_free += sizeof(int) * max_buffer_count_;
    83ca:	4421      	add	r1, r4
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
    83cc:	6181      	str	r1, [r0, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
    83ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    83d2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
    83d6:	6241      	str	r1, [r0, #36]	; 0x24
}
    83d8:	bc10      	pop	{r4}
    83da:	4770      	bx	lr
    83dc:	000224d4 	.word	0x000224d4

000083e0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:
    int last_time_used, int offline_offset) {
    83e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    83e2:	b083      	sub	sp, #12
  BufferRequirements* current = &requirements_[buffer_count_];
    83e4:	68c5      	ldr	r5, [r0, #12]
    83e6:	6887      	ldr	r7, [r0, #8]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
    83e8:	6804      	ldr	r4, [r0, #0]
    83ea:	9e08      	ldr	r6, [sp, #32]
    83ec:	9600      	str	r6, [sp, #0]
    83ee:	68a4      	ldr	r4, [r4, #8]
    83f0:	47a0      	blx	r4
    83f2:	b928      	cbnz	r0, 8400 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x20>
  current->offline_offset = offline_offset;
    83f4:	eb05 1507 	add.w	r5, r5, r7, lsl #4
    83f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    83fa:	606b      	str	r3, [r5, #4]
}
    83fc:	b003      	add	sp, #12
    83fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return kTfLiteError;
    8400:	2001      	movs	r0, #1
    8402:	e7fb      	b.n	83fc <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1c>

00008404 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
    const int last_time_used) const {
    8404:	b410      	push	{r4}
      &requirements_[entry->requirements_index];
    8406:	684c      	ldr	r4, [r1, #4]
    8408:	68c1      	ldr	r1, [r0, #12]
    840a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
    840e:	6888      	ldr	r0, [r1, #8]
    8410:	4298      	cmp	r0, r3
    8412:	dc06      	bgt.n	8422 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1e>
  if (first_time_used > entry_requirements->last_time_used) {
    8414:	68c8      	ldr	r0, [r1, #12]
    8416:	4290      	cmp	r0, r2
    8418:	bfb4      	ite	lt
    841a:	2000      	movlt	r0, #0
    841c:	2001      	movge	r0, #1
}
    841e:	bc10      	pop	{r4}
    8420:	4770      	bx	lr
    return false;
    8422:	2000      	movs	r0, #0
    8424:	e7fb      	b.n	841e <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1a>
	...

00008428 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
    8428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (start == nullptr) {
    842c:	b1e1      	cbz	r1, 8468 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x40>
    if (start->next_entry_index == -1) {
    842e:	688c      	ldr	r4, [r1, #8]
    8430:	f1b4 3fff 	cmp.w	r4, #4294967295
    8434:	d01f      	beq.n	8476 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x4e>
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
    8436:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    843a:	6981      	ldr	r1, [r0, #24]
    843c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    8440:	461f      	mov	r7, r3
    8442:	4690      	mov	r8, r2
    8444:	4605      	mov	r5, r0
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
    8446:	4e0f      	ldr	r6, [pc, #60]	; (8484 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x5c>)
    8448:	463b      	mov	r3, r7
    844a:	4642      	mov	r2, r8
    844c:	4621      	mov	r1, r4
    844e:	4628      	mov	r0, r5
    8450:	47b0      	blx	r6
    8452:	b998      	cbnz	r0, 847c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
    if (candidate_next_entry->next_entry_index == -1) {
    8454:	68a1      	ldr	r1, [r4, #8]
    8456:	f1b1 3fff 	cmp.w	r1, #4294967295
    845a:	d00e      	beq.n	847a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x52>
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
    845c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    candidate_next_entry =
    8460:	69ac      	ldr	r4, [r5, #24]
    8462:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
    8466:	e7ef      	b.n	8448 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x20>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
    8468:	6a04      	ldr	r4, [r0, #32]
    846a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    846e:	6981      	ldr	r1, [r0, #24]
    8470:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    8474:	e7e4      	b.n	8440 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x18>
      return nullptr;
    8476:	2400      	movs	r4, #0
    8478:	e000      	b.n	847c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  ListEntry* result = nullptr;
    847a:	2400      	movs	r4, #0
}
    847c:	4620      	mov	r0, r4
    847e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8482:	bf00      	nop
    8484:	00008405 	.word	0x00008405

00008488 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
    8488:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    848c:	2b00      	cmp	r3, #0
    848e:	f000 80d6 	beq.w	863e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b6>
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
    8492:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8496:	b085      	sub	sp, #20
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
    8498:	6887      	ldr	r7, [r0, #8]
    849a:	2f00      	cmp	r7, #0
    849c:	f000 80cc 	beq.w	8638 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b0>
  need_to_calculate_offsets_ = false;
    84a0:	2300      	movs	r3, #0
    84a2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  for (int i = 0; i < buffer_count_; ++i) {
    84a6:	429f      	cmp	r7, r3
    84a8:	dd2a      	ble.n	8500 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x78>
    84aa:	461d      	mov	r5, r3
    84ac:	461c      	mov	r4, r3
    84ae:	461a      	mov	r2, r3
      buffer_offsets_[i] = -1;
    84b0:	f04f 3eff 	mov.w	lr, #4294967295
    84b4:	e00f      	b.n	84d6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x4e>
      idx_from_tail--;
    84b6:	3f01      	subs	r7, #1
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
    84b8:	58c9      	ldr	r1, [r1, r3]
    84ba:	6903      	ldr	r3, [r0, #16]
    84bc:	f843 1027 	str.w	r1, [r3, r7, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
    84c0:	6943      	ldr	r3, [r0, #20]
    84c2:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
      buffer_offsets_[i] = -1;
    84c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
    84c8:	f843 e005 	str.w	lr, [r3, r5]
  for (int i = 0; i < buffer_count_; ++i) {
    84cc:	3401      	adds	r4, #1
    84ce:	6883      	ldr	r3, [r0, #8]
    84d0:	3504      	adds	r5, #4
    84d2:	42a3      	cmp	r3, r4
    84d4:	dd16      	ble.n	8504 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x7c>
    84d6:	0123      	lsls	r3, r4, #4
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
    84d8:	68c1      	ldr	r1, [r0, #12]
    84da:	18ce      	adds	r6, r1, r3
    84dc:	6876      	ldr	r6, [r6, #4]
    84de:	f1b6 3fff 	cmp.w	r6, #4294967295
    84e2:	d0e8      	beq.n	84b6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2e>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
    84e4:	58ce      	ldr	r6, [r1, r3]
    84e6:	6901      	ldr	r1, [r0, #16]
    84e8:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
      buffer_ids_sorted_[idx_from_head] = i;
    84ec:	6941      	ldr	r1, [r0, #20]
    84ee:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
      buffer_offsets_[i] = requirements_[i].offline_offset;
    84f2:	68c1      	ldr	r1, [r0, #12]
    84f4:	440b      	add	r3, r1
    84f6:	6859      	ldr	r1, [r3, #4]
    84f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    84fa:	5159      	str	r1, [r3, r5]
      idx_from_head++;
    84fc:	3201      	adds	r2, #1
    84fe:	e7e5      	b.n	84cc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x44>
  for (int i = 0; i < buffer_count_; ++i) {
    8500:	463b      	mov	r3, r7
  int idx_from_head = 0;
    8502:	2200      	movs	r2, #0
    8504:	4604      	mov	r4, r0
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
    8506:	0090      	lsls	r0, r2, #2
    8508:	6961      	ldr	r1, [r4, #20]
    850a:	6925      	ldr	r5, [r4, #16]
                     buffer_count_ - idx_from_head);
    850c:	1a9a      	subs	r2, r3, r2
    850e:	4401      	add	r1, r0
    8510:	4428      	add	r0, r5
    8512:	4b4b      	ldr	r3, [pc, #300]	; (8640 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b8>)
    8514:	4798      	blx	r3
  first_entry_index_ = 0;
    8516:	2300      	movs	r3, #0
    8518:	6223      	str	r3, [r4, #32]
  next_free_entry_ = 1;
    851a:	2301      	movs	r3, #1
    851c:	61e3      	str	r3, [r4, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
    851e:	69a3      	ldr	r3, [r4, #24]
    8520:	4619      	mov	r1, r3
    8522:	9303      	str	r3, [sp, #12]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
    8524:	f04f 33ff 	mov.w	r3, #4294967295
    8528:	608b      	str	r3, [r1, #8]
  int buffer_id = buffer_ids_sorted_[0];
    852a:	6963      	ldr	r3, [r4, #20]
    852c:	681b      	ldr	r3, [r3, #0]
  first_entry->requirements_index = buffer_id;
    852e:	604b      	str	r3, [r1, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
    8530:	68e2      	ldr	r2, [r4, #12]
    8532:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    8536:	6852      	ldr	r2, [r2, #4]
    8538:	f1b2 3fff 	cmp.w	r2, #4294967295
    853c:	d00a      	beq.n	8554 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xcc>
  first_entry->offset = buffer_offsets_[buffer_id];
    853e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8544:	9a03      	ldr	r2, [sp, #12]
    8546:	6013      	str	r3, [r2, #0]
  for (int i = 1; i < buffer_count_; ++i) {
    8548:	68a3      	ldr	r3, [r4, #8]
    854a:	2b01      	cmp	r3, #1
    854c:	dd74      	ble.n	8638 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b0>
    854e:	f04f 0a01 	mov.w	sl, #1
    8552:	e03a      	b.n	85ca <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x142>
    buffer_offsets_[buffer_id] = 0;
    8554:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8556:	2100      	movs	r1, #0
    8558:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    855c:	e7ef      	b.n	853e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xb6>
            prior_entry, wanted_first_time_used, wanted_last_time_used);
    855e:	9b02      	ldr	r3, [sp, #8]
    8560:	9a01      	ldr	r2, [sp, #4]
    8562:	4639      	mov	r1, r7
    8564:	9800      	ldr	r0, [sp, #0]
    8566:	4c37      	ldr	r4, [pc, #220]	; (8644 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1bc>)
    8568:	47a0      	blx	r4
              &requirements_[prior_entry->requirements_index];
    856a:	687b      	ldr	r3, [r7, #4]
              prior_entry->offset + candidate_requirements->size;
    856c:	011b      	lsls	r3, r3, #4
    856e:	f858 3003 	ldr.w	r3, [r8, r3]
    8572:	441d      	add	r5, r3
    8574:	42ae      	cmp	r6, r5
    8576:	bfb8      	it	lt
    8578:	462e      	movlt	r6, r5
            prior_entry, wanted_first_time_used, wanted_last_time_used);
    857a:	4607      	mov	r7, r0
        if (next_entry == nullptr) {
    857c:	b12f      	cbz	r7, 858a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x102>
        const int gap = next_entry->offset - candidate_offset;
    857e:	683d      	ldr	r5, [r7, #0]
    8580:	1bab      	subs	r3, r5, r6
        if (gap >= wanted_size) {
    8582:	459b      	cmp	fp, r3
    8584:	dceb      	bgt.n	855e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd6>
    8586:	9c00      	ldr	r4, [sp, #0]
    8588:	e02c      	b.n	85e4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15c>
    858a:	9c00      	ldr	r4, [sp, #0]
    858c:	e02a      	b.n	85e4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15c>
    858e:	9803      	ldr	r0, [sp, #12]
    8590:	e000      	b.n	8594 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x10c>
        current_entry = next_entry;
    8592:	4628      	mov	r0, r5
        const int next_entry_index = current_entry->next_entry_index;
    8594:	6882      	ldr	r2, [r0, #8]
        if (next_entry_index == -1) {
    8596:	f1b2 3fff 	cmp.w	r2, #4294967295
    859a:	d00c      	beq.n	85b6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12e>
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
    859c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    85a0:	69a1      	ldr	r1, [r4, #24]
    85a2:	eb01 0583 	add.w	r5, r1, r3, lsl #2
        if (next_entry->offset > candidate_offset) {
    85a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    85aa:	429e      	cmp	r6, r3
    85ac:	daf1      	bge.n	8592 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x10a>
          new_entry->next_entry_index = current_entry->next_entry_index;
    85ae:	60ba      	str	r2, [r7, #8]
          current_entry->next_entry_index = new_entry_index;
    85b0:	f8c0 e008 	str.w	lr, [r0, #8]
          break;
    85b4:	e004      	b.n	85c0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x138>
          current_entry->next_entry_index = new_entry_index;
    85b6:	f8c0 e008 	str.w	lr, [r0, #8]
          new_entry->next_entry_index = -1;
    85ba:	f04f 33ff 	mov.w	r3, #4294967295
    85be:	60bb      	str	r3, [r7, #8]
  for (int i = 1; i < buffer_count_; ++i) {
    85c0:	f10a 0a01 	add.w	sl, sl, #1
    85c4:	68a3      	ldr	r3, [r4, #8]
    85c6:	4553      	cmp	r3, sl
    85c8:	dd36      	ble.n	8638 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b0>
    buffer_id = buffer_ids_sorted_[i];
    85ca:	6963      	ldr	r3, [r4, #20]
    85cc:	f853 902a 	ldr.w	r9, [r3, sl, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
    85d0:	f8d4 800c 	ldr.w	r8, [r4, #12]
    85d4:	ea4f 1209 	mov.w	r2, r9, lsl #4
    85d8:	eb08 0302 	add.w	r3, r8, r2
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
    85dc:	685e      	ldr	r6, [r3, #4]
    85de:	f1b6 3fff 	cmp.w	r6, #4294967295
    85e2:	d01b      	beq.n	861c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x194>
    buffer_offsets_[buffer_id] = candidate_offset;
    85e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    85e6:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
    85ea:	69e3      	ldr	r3, [r4, #28]
    85ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    85f0:	69a2      	ldr	r2, [r4, #24]
    85f2:	eb02 0783 	add.w	r7, r2, r3, lsl #2
    new_entry->offset = candidate_offset;
    85f6:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
    new_entry->requirements_index = buffer_id;
    85fa:	f8c7 9004 	str.w	r9, [r7, #4]
    const int new_entry_index = next_free_entry_;
    85fe:	f8d4 e01c 	ldr.w	lr, [r4, #28]
    ++next_free_entry_;
    8602:	f10e 0301 	add.w	r3, lr, #1
    8606:	61e3      	str	r3, [r4, #28]
    if (first_entry->offset > candidate_offset) {
    8608:	9b03      	ldr	r3, [sp, #12]
    860a:	681b      	ldr	r3, [r3, #0]
    860c:	429e      	cmp	r6, r3
    860e:	dabe      	bge.n	858e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x106>
      first_entry->next_entry_index = first_entry_index_;
    8610:	6a23      	ldr	r3, [r4, #32]
    8612:	60bb      	str	r3, [r7, #8]
      first_entry_index_ = new_entry_index;
    8614:	f8c4 e020 	str.w	lr, [r4, #32]
      first_entry = new_entry;
    8618:	9703      	str	r7, [sp, #12]
    861a:	e7d1      	b.n	85c0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x138>
    const int wanted_size = wanted_requirements->size;
    861c:	f858 b002 	ldr.w	fp, [r8, r2]
    const int wanted_first_time_used = wanted_requirements->first_time_used;
    8620:	689a      	ldr	r2, [r3, #8]
    8622:	9201      	str	r2, [sp, #4]
    const int wanted_last_time_used = wanted_requirements->last_time_used;
    8624:	68db      	ldr	r3, [r3, #12]
    8626:	9302      	str	r3, [sp, #8]
            prior_entry, wanted_first_time_used, wanted_last_time_used);
    8628:	2100      	movs	r1, #0
    862a:	4620      	mov	r0, r4
    862c:	4d05      	ldr	r5, [pc, #20]	; (8644 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1bc>)
    862e:	47a8      	blx	r5
    8630:	4607      	mov	r7, r0
    8632:	2600      	movs	r6, #0
    8634:	9400      	str	r4, [sp, #0]
    8636:	e7a1      	b.n	857c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xf4>
}
    8638:	b005      	add	sp, #20
    863a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    863e:	4770      	bx	lr
    8640:	00008351 	.word	0x00008351
    8644:	00008429 	.word	0x00008429

00008648 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
    8648:	b570      	push	{r4, r5, r6, lr}
    864a:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
    864c:	4b18      	ldr	r3, [pc, #96]	; (86b0 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x68>)
    864e:	4798      	blx	r3
  if (buffer_count_ == 0) {
    8650:	68a3      	ldr	r3, [r4, #8]
    8652:	b343      	cbz	r3, 86a6 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x5e>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
    8654:	69a1      	ldr	r1, [r4, #24]
    8656:	6a23      	ldr	r3, [r4, #32]
    8658:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    865c:	009b      	lsls	r3, r3, #2
  while (entry) {
    865e:	18ce      	adds	r6, r1, r3
    8660:	d023      	beq.n	86aa <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x62>
        &requirements_[entry->requirements_index];
    8662:	68e5      	ldr	r5, [r4, #12]
    8664:	6872      	ldr	r2, [r6, #4]
    const size_t current_size = entry->offset + requirements->size;
    8666:	0112      	lsls	r2, r2, #4
    8668:	58a8      	ldr	r0, [r5, r2]
    866a:	58cb      	ldr	r3, [r1, r3]
    866c:	4418      	add	r0, r3
    866e:	2800      	cmp	r0, #0
    8670:	bf38      	it	cc
    8672:	2000      	movcc	r0, #0
    if (entry->next_entry_index == -1) {
    8674:	68b3      	ldr	r3, [r6, #8]
    8676:	f1b3 3fff 	cmp.w	r3, #4294967295
    867a:	d012      	beq.n	86a2 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x5a>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
    867c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  while (entry) {
    8680:	eb11 0483 	adds.w	r4, r1, r3, lsl #2
    8684:	d00e      	beq.n	86a4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x5c>
        &requirements_[entry->requirements_index];
    8686:	6862      	ldr	r2, [r4, #4]
    const size_t current_size = entry->offset + requirements->size;
    8688:	0112      	lsls	r2, r2, #4
    868a:	58aa      	ldr	r2, [r5, r2]
    868c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    8690:	4413      	add	r3, r2
    8692:	4298      	cmp	r0, r3
    8694:	bf38      	it	cc
    8696:	4618      	movcc	r0, r3
    if (entry->next_entry_index == -1) {
    8698:	68a3      	ldr	r3, [r4, #8]
    869a:	f1b3 3fff 	cmp.w	r3, #4294967295
    869e:	d1ed      	bne.n	867c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
}
    86a0:	bd70      	pop	{r4, r5, r6, pc}
    86a2:	bd70      	pop	{r4, r5, r6, pc}
    86a4:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
    86a6:	2000      	movs	r0, #0
    86a8:	bd70      	pop	{r4, r5, r6, pc}
  size_t max_size = 0;
    86aa:	2000      	movs	r0, #0
    86ac:	e7f8      	b.n	86a0 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x58>
    86ae:	bf00      	nop
    86b0:	00008489 	.word	0x00008489

000086b4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
    86b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    86b6:	4605      	mov	r5, r0
    86b8:	460f      	mov	r7, r1
    86ba:	4614      	mov	r4, r2
    86bc:	461e      	mov	r6, r3
  CalculateOffsetsIfNeeded();
    86be:	4b0a      	ldr	r3, [pc, #40]	; (86e8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x34>)
    86c0:	4798      	blx	r3
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
    86c2:	2c00      	cmp	r4, #0
    86c4:	db08      	blt.n	86d8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    86c6:	68ab      	ldr	r3, [r5, #8]
    86c8:	429c      	cmp	r4, r3
    86ca:	da05      	bge.n	86d8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    TF_LITE_REPORT_ERROR(error_reporter,
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
    86cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    86ce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    86d2:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
    86d4:	2000      	movs	r0, #0
}
    86d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(error_reporter,
    86d8:	68ab      	ldr	r3, [r5, #8]
    86da:	4622      	mov	r2, r4
    86dc:	4903      	ldr	r1, [pc, #12]	; (86ec <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x38>)
    86de:	4638      	mov	r0, r7
    86e0:	4c03      	ldr	r4, [pc, #12]	; (86f0 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x3c>)
    86e2:	47a0      	blx	r4
    return kTfLiteError;
    86e4:	2001      	movs	r0, #1
    86e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    86e8:	00008489 	.word	0x00008489
    86ec:	0002250c 	.word	0x0002250c
    86f0:	00001265 	.word	0x00001265

000086f4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
      : memory_allocator_(memory_allocator) {}

  void* Allocate(size_t size, size_t alignment_hint) override {
    86f4:	b508      	push	{r3, lr}
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
    86f6:	6840      	ldr	r0, [r0, #4]
    86f8:	6803      	ldr	r3, [r0, #0]
    86fa:	68db      	ldr	r3, [r3, #12]
    86fc:	4798      	blx	r3
  }
    86fe:	bd08      	pop	{r3, pc}

00008700 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
    8700:	4770      	bx	lr

00008702 <_ZN6tflite14MicroAllocatorD1Ev>:
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}

MicroAllocator::~MicroAllocator() {}
    8702:	4770      	bx	lr

00008704 <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:
      memory_allocator_, *subgraph->tensors()->Get(subgraph_idx),
      model->buffers(), error_reporter_, tensor);
  return tensor;
}

void MicroAllocator::ResetTempAllocations() {
    8704:	b508      	push	{r3, lr}
  memory_allocator_->ResetTempAllocations();
    8706:	6840      	ldr	r0, [r0, #4]
    8708:	6803      	ldr	r3, [r0, #0]
    870a:	695b      	ldr	r3, [r3, #20]
    870c:	4798      	blx	r3
    870e:	bd08      	pop	{r3, pc}

00008710 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
    8710:	4770      	bx	lr
	...

00008714 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
    8714:	b510      	push	{r4, lr}
    8716:	4604      	mov	r4, r0
    8718:	2108      	movs	r1, #8
    871a:	4b02      	ldr	r3, [pc, #8]	; (8724 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev+0x10>)
    871c:	4798      	blx	r3
    871e:	4620      	mov	r0, r4
    8720:	bd10      	pop	{r4, pc}
    8722:	bf00      	nop
    8724:	0000a45d 	.word	0x0000a45d

00008728 <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
    8728:	b510      	push	{r4, lr}
    872a:	4604      	mov	r4, r0
    872c:	2118      	movs	r1, #24
    872e:	4b02      	ldr	r3, [pc, #8]	; (8738 <_ZN6tflite14MicroAllocatorD0Ev+0x10>)
    8730:	4798      	blx	r3
    8732:	4620      	mov	r0, r4
    8734:	bd10      	pop	{r4, pc}
    8736:	bf00      	nop
    8738:	0000a45d 	.word	0x0000a45d

0000873c <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE>:
    TfLiteContext* context, const SubGraph* subgraph) {
    873c:	b538      	push	{r3, r4, r5, lr}
    873e:	4605      	mov	r5, r0
    8740:	460c      	mov	r4, r1
    return data_ - ReadScalar<soffset_t>(data_);
    8742:	6813      	ldr	r3, [r2, #0]
    8744:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8746:	8819      	ldrh	r1, [r3, #0]
    8748:	2904      	cmp	r1, #4
    874a:	dd10      	ble.n	876e <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x32>
    874c:	8899      	ldrh	r1, [r3, #4]
    auto p = data_ + field_offset;
    874e:	1853      	adds	r3, r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8750:	b179      	cbz	r1, 8772 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x36>
    8752:	5852      	ldr	r2, [r2, r1]
    8754:	4413      	add	r3, r2
  uoffset_t size() const { return EndianScalar(length_); }
    8756:	6819      	ldr	r1, [r3, #0]
  context->tensors_size = subgraph->tensors()->size();
    8758:	6021      	str	r1, [r4, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
    875a:	6868      	ldr	r0, [r5, #4]
          sizeof(TfLiteTensor) * context->tensors_size, alignof(TfLiteTensor)));
    875c:	6803      	ldr	r3, [r0, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
    875e:	68db      	ldr	r3, [r3, #12]
    8760:	2204      	movs	r2, #4
    8762:	0189      	lsls	r1, r1, #6
    8764:	4798      	blx	r3
  context->tensors =
    8766:	60a0      	str	r0, [r4, #8]
  if (context->tensors == nullptr) {
    8768:	b128      	cbz	r0, 8776 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x3a>
  return kTfLiteOk;
    876a:	2000      	movs	r0, #0
}
    876c:	bd38      	pop	{r3, r4, r5, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    876e:	2300      	movs	r3, #0
    8770:	e7f1      	b.n	8756 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x1a>
    8772:	2300      	movs	r3, #0
    8774:	e7ef      	b.n	8756 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x1a>
    TF_LITE_REPORT_ERROR(
    8776:	6822      	ldr	r2, [r4, #0]
    8778:	0192      	lsls	r2, r2, #6
    877a:	4903      	ldr	r1, [pc, #12]	; (8788 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x4c>)
    877c:	68a8      	ldr	r0, [r5, #8]
    877e:	4b03      	ldr	r3, [pc, #12]	; (878c <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x50>)
    8780:	4798      	blx	r3
    return kTfLiteError;
    8782:	2001      	movs	r0, #1
    8784:	bd38      	pop	{r3, r4, r5, pc}
    8786:	bf00      	nop
    8788:	00022acc 	.word	0x00022acc
    878c:	00001265 	.word	0x00001265

00008790 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE>:
    const SubGraph* subgraph, NodeAndRegistration** node_and_registrations) {
    8790:	b570      	push	{r4, r5, r6, lr}
    8792:	4604      	mov	r4, r0
    8794:	4615      	mov	r5, r2
      memory_allocator_->AllocateFromTail(
    8796:	6840      	ldr	r0, [r0, #4]
          alignof(NodeAndRegistration)));
    8798:	6803      	ldr	r3, [r0, #0]
    879a:	68de      	ldr	r6, [r3, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    879c:	680b      	ldr	r3, [r1, #0]
    879e:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    87a0:	881a      	ldrh	r2, [r3, #0]
    87a2:	2a0a      	cmp	r2, #10
    87a4:	dd0e      	ble.n	87c4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x34>
    87a6:	895a      	ldrh	r2, [r3, #10]
    auto p = data_ + field_offset;
    87a8:	188b      	adds	r3, r1, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    87aa:	b16a      	cbz	r2, 87c8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x38>
    87ac:	588a      	ldr	r2, [r1, r2]
    87ae:	4413      	add	r3, r2
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
    87b0:	6819      	ldr	r1, [r3, #0]
    87b2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
          alignof(NodeAndRegistration)));
    87b6:	2204      	movs	r2, #4
    87b8:	00c9      	lsls	r1, r1, #3
    87ba:	47b0      	blx	r6
  if (output == nullptr) {
    87bc:	b130      	cbz	r0, 87cc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x3c>
  *node_and_registrations = output;
    87be:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
    87c0:	2000      	movs	r0, #0
}
    87c2:	bd70      	pop	{r4, r5, r6, pc}
    87c4:	2300      	movs	r3, #0
    87c6:	e7f3      	b.n	87b0 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x20>
    87c8:	2300      	movs	r3, #0
    87ca:	e7f1      	b.n	87b0 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x20>
    TF_LITE_REPORT_ERROR(
    87cc:	4902      	ldr	r1, [pc, #8]	; (87d8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x48>)
    87ce:	68a0      	ldr	r0, [r4, #8]
    87d0:	4b02      	ldr	r3, [pc, #8]	; (87dc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x4c>)
    87d2:	4798      	blx	r3
    return kTfLiteError;
    87d4:	2001      	movs	r0, #1
    87d6:	bd70      	pop	{r4, r5, r6, pc}
    87d8:	00022b10 	.word	0x00022b10
    87dc:	00001265 	.word	0x00001265

000087e0 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE>:
}

TfLiteStatus MicroAllocator::AllocateVariables(TfLiteContext* context,
                                               const SubGraph* subgraph) {
    87e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (size_t i = 0; i < context->tensors_size; ++i) {
    87e4:	680b      	ldr	r3, [r1, #0]
    87e6:	2b00      	cmp	r3, #0
    87e8:	d059      	beq.n	889e <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xbe>
    87ea:	4616      	mov	r6, r2
    87ec:	460f      	mov	r7, r1
    87ee:	4682      	mov	sl, r0
    87f0:	2500      	movs	r5, #0
    87f2:	462c      	mov	r4, r5
    if (subgraph->tensors()->Get(i)->is_variable()) {
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
    87f4:	f04f 0b10 	mov.w	fp, #16
                             "Failed to allocate variable tensor of size %d",
                             context->tensors[i].bytes);
        return kTfLiteError;
      }
    }
    tflite::ResetVariableTensor(&(context->tensors[i]));
    87f8:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 88bc <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xdc>
    87fc:	e012      	b.n	8824 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x44>
    87fe:	2300      	movs	r3, #0
    8800:	e01b      	b.n	883a <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x5a>
    8802:	2300      	movs	r3, #0
    8804:	e019      	b.n	883a <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x5a>
    FLATBUFFERS_ASSERT(i < size());
    8806:	4b27      	ldr	r3, [pc, #156]	; (88a4 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xc4>)
    8808:	4a27      	ldr	r2, [pc, #156]	; (88a8 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xc8>)
    880a:	f240 1101 	movw	r1, #257	; 0x101
    880e:	4827      	ldr	r0, [pc, #156]	; (88ac <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xcc>)
    8810:	4c27      	ldr	r4, [pc, #156]	; (88b0 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xd0>)
    8812:	47a0      	blx	r4
    8814:	68b8      	ldr	r0, [r7, #8]
    8816:	4428      	add	r0, r5
    8818:	47c8      	blx	r9
  for (size_t i = 0; i < context->tensors_size; ++i) {
    881a:	3401      	adds	r4, #1
    881c:	3540      	adds	r5, #64	; 0x40
    881e:	683b      	ldr	r3, [r7, #0]
    8820:	42a3      	cmp	r3, r4
    8822:	d939      	bls.n	8898 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xb8>
    return data_ - ReadScalar<soffset_t>(data_);
    8824:	6833      	ldr	r3, [r6, #0]
    8826:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8828:	881a      	ldrh	r2, [r3, #0]
    882a:	2a04      	cmp	r2, #4
    882c:	dde7      	ble.n	87fe <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x1e>
    882e:	889a      	ldrh	r2, [r3, #4]
    auto p = data_ + field_offset;
    8830:	18b3      	adds	r3, r6, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8832:	2a00      	cmp	r2, #0
    8834:	d0e5      	beq.n	8802 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x22>
    8836:	58b2      	ldr	r2, [r6, r2]
    8838:	4413      	add	r3, r2
    FLATBUFFERS_ASSERT(i < size());
    883a:	681a      	ldr	r2, [r3, #0]
    883c:	4294      	cmp	r4, r2
    883e:	d2e2      	bcs.n	8806 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x26>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8840:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    8842:	eb03 0284 	add.w	r2, r3, r4, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8846:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    884a:	18d1      	adds	r1, r2, r3
    return data_ - ReadScalar<soffset_t>(data_);
    884c:	58d3      	ldr	r3, [r2, r3]
    884e:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8850:	881a      	ldrh	r2, [r3, #0]
    8852:	2a0e      	cmp	r2, #14
    8854:	ddde      	ble.n	8814 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x34>
    8856:	89db      	ldrh	r3, [r3, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8858:	2b00      	cmp	r3, #0
    885a:	d0db      	beq.n	8814 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x34>
    if (subgraph->tensors()->Get(i)->is_variable()) {
    885c:	5ccb      	ldrb	r3, [r1, r3]
    885e:	2b00      	cmp	r3, #0
    8860:	d0d8      	beq.n	8814 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x34>
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
    8862:	68bb      	ldr	r3, [r7, #8]
    8864:	eb03 0805 	add.w	r8, r3, r5
    8868:	f8da 0004 	ldr.w	r0, [sl, #4]
          context->tensors[i].bytes, kBufferAlignment);
    886c:	6803      	ldr	r3, [r0, #0]
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
    886e:	68db      	ldr	r3, [r3, #12]
    8870:	465a      	mov	r2, fp
    8872:	f8d8 1018 	ldr.w	r1, [r8, #24]
    8876:	4798      	blx	r3
    8878:	f8c8 0004 	str.w	r0, [r8, #4]
      if (context->tensors[i].data.data == nullptr) {
    887c:	68bb      	ldr	r3, [r7, #8]
    887e:	442b      	add	r3, r5
    8880:	685a      	ldr	r2, [r3, #4]
    8882:	2a00      	cmp	r2, #0
    8884:	d1c6      	bne.n	8814 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x34>
        TF_LITE_REPORT_ERROR(error_reporter_,
    8886:	699a      	ldr	r2, [r3, #24]
    8888:	490a      	ldr	r1, [pc, #40]	; (88b4 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xd4>)
    888a:	f8da 0008 	ldr.w	r0, [sl, #8]
    888e:	4b0a      	ldr	r3, [pc, #40]	; (88b8 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xd8>)
    8890:	4798      	blx	r3
        return kTfLiteError;
    8892:	2001      	movs	r0, #1
    8894:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }

  return kTfLiteOk;
    8898:	2000      	movs	r0, #0
    889a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    889e:	2000      	movs	r0, #0
}
    88a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    88a4:	0002125c 	.word	0x0002125c
    88a8:	000225dc 	.word	0x000225dc
    88ac:	00021268 	.word	0x00021268
    88b0:	00014b4d 	.word	0x00014b4d
    88b4:	00022b48 	.word	0x00022b48
    88b8:	00001265 	.word	0x00001265
    88bc:	00001a0d 	.word	0x00001a0d

000088c0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>:
    NodeAndRegistration* node_and_registrations) {
    88c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    88c4:	b08b      	sub	sp, #44	; 0x2c
    88c6:	9002      	str	r0, [sp, #8]
    88c8:	4693      	mov	fp, r2
    88ca:	9305      	str	r3, [sp, #20]
    return data_ - ReadScalar<soffset_t>(data_);
    88cc:	680b      	ldr	r3, [r1, #0]
    88ce:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    88d0:	881a      	ldrh	r2, [r3, #0]
    88d2:	2a06      	cmp	r2, #6
    88d4:	dd0e      	ble.n	88f4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x34>
    88d6:	88db      	ldrh	r3, [r3, #6]
    auto p = data_ + field_offset;
    88d8:	18ca      	adds	r2, r1, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    88da:	b173      	cbz	r3, 88fa <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x3a>
    88dc:	58cb      	ldr	r3, [r1, r3]
    88de:	18d3      	adds	r3, r2, r3
    88e0:	9303      	str	r3, [sp, #12]
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
    88e2:	9b02      	ldr	r3, [sp, #8]
    88e4:	685b      	ldr	r3, [r3, #4]
      : memory_allocator_(memory_allocator) {}
    88e6:	4aa0      	ldr	r2, [pc, #640]	; (8b68 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2a8>)
    88e8:	9208      	str	r2, [sp, #32]
    88ea:	9309      	str	r3, [sp, #36]	; 0x24
    88ec:	9d14      	ldr	r5, [sp, #80]	; 0x50
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
    88ee:	f04f 0a00 	mov.w	sl, #0
    88f2:	e09f      	b.n	8a34 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x174>
    88f4:	2300      	movs	r3, #0
    88f6:	9303      	str	r3, [sp, #12]
    88f8:	e7f3      	b.n	88e2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22>
    88fa:	2300      	movs	r3, #0
    88fc:	9303      	str	r3, [sp, #12]
    88fe:	e7f0      	b.n	88e2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22>
    8900:	2300      	movs	r3, #0
    8902:	e0a8      	b.n	8a56 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x196>
    8904:	2300      	movs	r3, #0
    8906:	e0a6      	b.n	8a56 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x196>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8908:	2300      	movs	r3, #0
    890a:	9301      	str	r3, [sp, #4]
    890c:	e0ba      	b.n	8a84 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1c4>
    890e:	2300      	movs	r3, #0
    8910:	9301      	str	r3, [sp, #4]
    8912:	e0b7      	b.n	8a84 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1c4>
      TF_LITE_REPORT_ERROR(error_reporter_,
    8914:	4995      	ldr	r1, [pc, #596]	; (8b6c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ac>)
    8916:	9b02      	ldr	r3, [sp, #8]
    8918:	6898      	ldr	r0, [r3, #8]
    891a:	4b95      	ldr	r3, [pc, #596]	; (8b70 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b0>)
    891c:	4798      	blx	r3
      return kTfLiteError;
    891e:	2301      	movs	r3, #1
    8920:	461c      	mov	r4, r3
    8922:	e115      	b.n	8b50 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x290>
    8924:	464e      	mov	r6, r9
    8926:	4604      	mov	r4, r0
      TF_LITE_REPORT_ERROR(error_reporter_,
    8928:	9b02      	ldr	r3, [sp, #8]
    892a:	6898      	ldr	r0, [r3, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    892c:	f8d9 3000 	ldr.w	r3, [r9]
    8930:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8932:	881a      	ldrh	r2, [r3, #0]
    8934:	2a04      	cmp	r2, #4
    8936:	dd07      	ble.n	8948 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x88>
    8938:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    893a:	b16b      	cbz	r3, 8958 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x98>
    893c:	f819 3003 	ldrb.w	r3, [r9, r3]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    8940:	2b7e      	cmp	r3, #126	; 0x7e
    8942:	dd02      	ble.n	894a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x8a>
    8944:	4a8b      	ldr	r2, [pc, #556]	; (8b74 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>)
    8946:	e003      	b.n	8950 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x90>
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
    8948:	2300      	movs	r3, #0
  return EnumNamesBuiltinOperator()[index];
    894a:	4a8b      	ldr	r2, [pc, #556]	; (8b78 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b8>)
    894c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    8950:	498a      	ldr	r1, [pc, #552]	; (8b7c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2bc>)
    8952:	4b87      	ldr	r3, [pc, #540]	; (8b70 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b0>)
    8954:	4798      	blx	r3
      return status;
    8956:	e0fb      	b.n	8b50 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x290>
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
    8958:	2300      	movs	r3, #0
    895a:	e7f6      	b.n	894a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x8a>
    895c:	f8dd 9004 	ldr.w	r9, [sp, #4]
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
    8960:	464a      	mov	r2, r9
    8962:	4987      	ldr	r1, [pc, #540]	; (8b80 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2c0>)
    8964:	9b02      	ldr	r3, [sp, #8]
    8966:	6898      	ldr	r0, [r3, #8]
    8968:	4b81      	ldr	r3, [pc, #516]	; (8b70 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b0>)
    896a:	4798      	blx	r3
      return kTfLiteError;
    896c:	2301      	movs	r3, #1
    896e:	461c      	mov	r4, r3
    8970:	e0ee      	b.n	8b50 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x290>
    return data_ - ReadScalar<soffset_t>(data_);
    8972:	f858 3007 	ldr.w	r3, [r8, r7]
    8976:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8978:	881a      	ldrh	r2, [r3, #0]
    897a:	2a0e      	cmp	r2, #14
    897c:	f340 80d6 	ble.w	8b2c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x26c>
    8980:	89db      	ldrh	r3, [r3, #14]
    auto p = data_ + field_offset;
    8982:	18e2      	adds	r2, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8984:	2b00      	cmp	r3, #0
    8986:	f000 80d5 	beq.w	8b34 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x274>
    898a:	58e3      	ldr	r3, [r4, r3]
      if (op->custom_options() != nullptr) {
    898c:	18d6      	adds	r6, r2, r3
    898e:	f000 80d5 	beq.w	8b3c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x27c>
  uoffset_t size() const { return EndianScalar(length_); }
    8992:	f852 9003 	ldr.w	r9, [r2, r3]
            reinterpret_cast<const char*>(op->custom_options()->data());
    8996:	3604      	adds	r6, #4
    8998:	e017      	b.n	89ca <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x10a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    899a:	58e3      	ldr	r3, [r4, r3]
      if (op->custom_options() != nullptr) {
    899c:	42da      	cmn	r2, r3
    899e:	f040 80a3 	bne.w	8ae8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x228>
          op_resolver.GetOpDataParser(op_type);
    89a2:	9805      	ldr	r0, [sp, #20]
    89a4:	6803      	ldr	r3, [r0, #0]
    89a6:	699b      	ldr	r3, [r3, #24]
    89a8:	4798      	blx	r3
      if (parser == nullptr) {
    89aa:	4681      	mov	r9, r0
    89ac:	2800      	cmp	r0, #0
    89ae:	f000 80ac 	beq.w	8b0a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x24a>
      TF_LITE_ENSURE_STATUS(parser(op, error_reporter_, &builtin_data_allocator,
    89b2:	ab07      	add	r3, sp, #28
    89b4:	aa08      	add	r2, sp, #32
    89b6:	9902      	ldr	r1, [sp, #8]
    89b8:	6889      	ldr	r1, [r1, #8]
    89ba:	4620      	mov	r0, r4
    89bc:	47c8      	blx	r9
    89be:	2800      	cmp	r0, #0
    89c0:	f040 80c2 	bne.w	8b48 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x288>
    size_t custom_data_size = 0;
    89c4:	f04f 0900 	mov.w	r9, #0
    const char* custom_data = nullptr;
    89c8:	464e      	mov	r6, r9
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
    89ca:	9b02      	ldr	r3, [sp, #8]
    89cc:	6898      	ldr	r0, [r3, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    89ce:	f858 3007 	ldr.w	r3, [r8, r7]
    89d2:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    89d4:	881a      	ldrh	r2, [r3, #0]
    89d6:	2a06      	cmp	r2, #6
    89d8:	f340 80c1 	ble.w	8b5e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x29e>
    89dc:	88d9      	ldrh	r1, [r3, #6]
    auto p = data_ + field_offset;
    89de:	1867      	adds	r7, r4, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    89e0:	2900      	cmp	r1, #0
    89e2:	f000 80b9 	beq.w	8b58 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x298>
    89e6:	5861      	ldr	r1, [r4, r1]
    89e8:	440f      	add	r7, r1
  TFLITE_DCHECK(error_reporter != nullptr);
    89ea:	2800      	cmp	r0, #0
    89ec:	f000 80b9 	beq.w	8b62 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2a2>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    89f0:	2f00      	cmp	r7, #0
    89f2:	f000 80b2 	beq.w	8b5a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x29a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    89f6:	2a08      	cmp	r2, #8
    89f8:	f340 80a4 	ble.w	8b44 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x284>
    89fc:	891b      	ldrh	r3, [r3, #8]
    auto p = data_ + field_offset;
    89fe:	18e2      	adds	r2, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a00:	2b00      	cmp	r3, #0
    8a02:	f000 809f 	beq.w	8b44 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x284>
    8a06:	58e4      	ldr	r4, [r4, r3]
    8a08:	3528      	adds	r5, #40	; 0x28
    8a0a:	1914      	adds	r4, r2, r4
    8a0c:	f000 809a 	beq.w	8b44 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x284>
    *node = {};
    8a10:	2224      	movs	r2, #36	; 0x24
    8a12:	2100      	movs	r1, #0
    8a14:	9804      	ldr	r0, [sp, #16]
    8a16:	4b5b      	ldr	r3, [pc, #364]	; (8b84 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2c4>)
    8a18:	4798      	blx	r3
    node->inputs = inputs_array;
    8a1a:	f845 7c28 	str.w	r7, [r5, #-40]
    node->outputs = outputs_array;
    8a1e:	f845 4c24 	str.w	r4, [r5, #-36]
    node->builtin_data = reinterpret_cast<void*>(builtin_data);
    8a22:	9b07      	ldr	r3, [sp, #28]
    8a24:	f845 3c14 	str.w	r3, [r5, #-20]
    node->custom_initial_data = custom_data;
    8a28:	f845 6c10 	str.w	r6, [r5, #-16]
    node->custom_initial_data_size = custom_data_size;
    8a2c:	f845 9c0c 	str.w	r9, [r5, #-12]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
    8a30:	f10a 0a01 	add.w	sl, sl, #1
    return data_ - ReadScalar<soffset_t>(data_);
    8a34:	f8db 3000 	ldr.w	r3, [fp]
    8a38:	ebab 0303 	sub.w	r3, fp, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a3c:	881a      	ldrh	r2, [r3, #0]
    8a3e:	2a0a      	cmp	r2, #10
    8a40:	f77f af5e 	ble.w	8900 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x40>
    8a44:	895a      	ldrh	r2, [r3, #10]
    auto p = data_ + field_offset;
    8a46:	eb0b 0302 	add.w	r3, fp, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a4a:	2a00      	cmp	r2, #0
    8a4c:	f43f af5a 	beq.w	8904 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x44>
    8a50:	f85b 2002 	ldr.w	r2, [fp, r2]
    8a54:	4413      	add	r3, r2
    8a56:	681a      	ldr	r2, [r3, #0]
    8a58:	4592      	cmp	sl, r2
    8a5a:	d277      	bcs.n	8b4c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x28c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8a5c:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    8a5e:	eb03 088a 	add.w	r8, r3, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8a62:	f853 702a 	ldr.w	r7, [r3, sl, lsl #2]
    8a66:	eb08 0407 	add.w	r4, r8, r7
    return data_ - ReadScalar<soffset_t>(data_);
    8a6a:	f858 3007 	ldr.w	r3, [r8, r7]
    8a6e:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a70:	881a      	ldrh	r2, [r3, #0]
    8a72:	2a04      	cmp	r2, #4
    8a74:	f77f af48 	ble.w	8908 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x48>
    8a78:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8a7a:	2b00      	cmp	r3, #0
    8a7c:	f43f af47 	beq.w	890e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x4e>
    8a80:	58e3      	ldr	r3, [r4, r3]
    8a82:	9301      	str	r3, [sp, #4]
    if (index >= opcodes->size()) {
    8a84:	9b03      	ldr	r3, [sp, #12]
    8a86:	681b      	ldr	r3, [r3, #0]
    8a88:	9a01      	ldr	r2, [sp, #4]
    8a8a:	4293      	cmp	r3, r2
    8a8c:	f67f af42 	bls.w	8914 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x54>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8a90:	9b03      	ldr	r3, [sp, #12]
    8a92:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    8a94:	9a01      	ldr	r2, [sp, #4]
    8a96:	eb03 0982 	add.w	r9, r3, r2, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8a9e:	4499      	add	r9, r3
                                  &(node_and_registrations[i].registration));
    8aa0:	9504      	str	r5, [sp, #16]
    8aa2:	f105 0324 	add.w	r3, r5, #36	; 0x24
    8aa6:	9a02      	ldr	r2, [sp, #8]
    8aa8:	6892      	ldr	r2, [r2, #8]
    8aaa:	9905      	ldr	r1, [sp, #20]
    8aac:	4648      	mov	r0, r9
    8aae:	4e36      	ldr	r6, [pc, #216]	; (8b88 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2c8>)
    8ab0:	47b0      	blx	r6
    if (status != kTfLiteOk) {
    8ab2:	2800      	cmp	r0, #0
    8ab4:	f47f af36 	bne.w	8924 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x64>
    const auto* registration = node_and_registrations[i].registration;
    8ab8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    if (registration == nullptr) {
    8aba:	2b00      	cmp	r3, #0
    8abc:	f43f af4e 	beq.w	895c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x9c>
        static_cast<BuiltinOperator>(registration->builtin_code);
    8ac0:	695e      	ldr	r6, [r3, #20]
    8ac2:	b2f1      	uxtb	r1, r6
    unsigned char* builtin_data = nullptr;
    8ac4:	2300      	movs	r3, #0
    8ac6:	9307      	str	r3, [sp, #28]
    if (op_type == BuiltinOperator_CUSTOM) {
    8ac8:	2920      	cmp	r1, #32
    8aca:	f43f af52 	beq.w	8972 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xb2>
    return data_ - ReadScalar<soffset_t>(data_);
    8ace:	f858 3007 	ldr.w	r3, [r8, r7]
    8ad2:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8ad4:	881a      	ldrh	r2, [r3, #0]
    8ad6:	2a0e      	cmp	r2, #14
    8ad8:	f77f af63 	ble.w	89a2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xe2>
    8adc:	89db      	ldrh	r3, [r3, #14]
    auto p = data_ + field_offset;
    8ade:	18e2      	adds	r2, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8ae0:	2b00      	cmp	r3, #0
    8ae2:	f47f af5a 	bne.w	899a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xda>
    8ae6:	e75c      	b.n	89a2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xe2>
        TF_LITE_REPORT_ERROR(
    8ae8:	9b02      	ldr	r3, [sp, #8]
    8aea:	6898      	ldr	r0, [r3, #8]
    8aec:	fa5f f986 	uxtb.w	r9, r6
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    8af0:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
  return EnumNamesBuiltinOperator()[index];
    8af4:	bfda      	itte	le
    8af6:	4b20      	ldrle	r3, [pc, #128]	; (8b78 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b8>)
    8af8:	f853 2029 	ldrle.w	r2, [r3, r9, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    8afc:	4a1d      	ldrgt	r2, [pc, #116]	; (8b74 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>)
    8afe:	4923      	ldr	r1, [pc, #140]	; (8b8c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2cc>)
    8b00:	4b1b      	ldr	r3, [pc, #108]	; (8b70 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b0>)
    8b02:	4798      	blx	r3
        return kTfLiteError;
    8b04:	2301      	movs	r3, #1
    8b06:	461c      	mov	r4, r3
    8b08:	e022      	b.n	8b50 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x290>
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
    8b0a:	9b02      	ldr	r3, [sp, #8]
    8b0c:	6898      	ldr	r0, [r3, #8]
    8b0e:	fa5f f986 	uxtb.w	r9, r6
    8b12:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
  return EnumNamesBuiltinOperator()[index];
    8b16:	bfda      	itte	le
    8b18:	4b17      	ldrle	r3, [pc, #92]	; (8b78 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b8>)
    8b1a:	f853 2029 	ldrle.w	r2, [r3, r9, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    8b1e:	4a15      	ldrgt	r2, [pc, #84]	; (8b74 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>)
    8b20:	491b      	ldr	r1, [pc, #108]	; (8b90 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d0>)
    8b22:	4b13      	ldr	r3, [pc, #76]	; (8b70 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b0>)
    8b24:	4798      	blx	r3
        return kTfLiteError;
    8b26:	2301      	movs	r3, #1
    8b28:	461c      	mov	r4, r3
    8b2a:	e011      	b.n	8b50 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x290>
    size_t custom_data_size = 0;
    8b2c:	f04f 0900 	mov.w	r9, #0
    const char* custom_data = nullptr;
    8b30:	464e      	mov	r6, r9
    8b32:	e74a      	b.n	89ca <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x10a>
    size_t custom_data_size = 0;
    8b34:	f04f 0900 	mov.w	r9, #0
    const char* custom_data = nullptr;
    8b38:	464e      	mov	r6, r9
    8b3a:	e746      	b.n	89ca <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x10a>
    size_t custom_data_size = 0;
    8b3c:	f04f 0900 	mov.w	r9, #0
    const char* custom_data = nullptr;
    8b40:	464e      	mov	r6, r9
    8b42:	e742      	b.n	89ca <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x10a>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    8b44:	4b13      	ldr	r3, [pc, #76]	; (8b94 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>)
    8b46:	4798      	blx	r3
      TF_LITE_ENSURE_STATUS(parser(op, error_reporter_, &builtin_data_allocator,
    8b48:	4604      	mov	r4, r0
    8b4a:	e001      	b.n	8b50 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x290>
  return kTfLiteOk;
    8b4c:	2300      	movs	r3, #0
    8b4e:	461c      	mov	r4, r3
}
    8b50:	4620      	mov	r0, r4
    8b52:	b00b      	add	sp, #44	; 0x2c
    8b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
    8b58:	b118      	cbz	r0, 8b62 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2a2>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    8b5a:	4b0e      	ldr	r3, [pc, #56]	; (8b94 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>)
    8b5c:	4798      	blx	r3
  TFLITE_DCHECK(error_reporter != nullptr);
    8b5e:	2800      	cmp	r0, #0
    8b60:	d1fb      	bne.n	8b5a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x29a>
    8b62:	4b0c      	ldr	r3, [pc, #48]	; (8b94 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>)
    8b64:	4798      	blx	r3
    8b66:	bf00      	nop
    8b68:	000226dc 	.word	0x000226dc
    8b6c:	00022b78 	.word	0x00022b78
    8b70:	00001265 	.word	0x00001265
    8b74:	0002108c 	.word	0x0002108c
    8b78:	000213d8 	.word	0x000213d8
    8b7c:	00022ba4 	.word	0x00022ba4
    8b80:	00022bd4 	.word	0x00022bd4
    8b84:	00015abd 	.word	0x00015abd
    8b88:	00001935 	.word	0x00001935
    8b8c:	00022bf8 	.word	0x00022bf8
    8b90:	00022c40 	.word	0x00022c40
    8b94:	00014b3d 	.word	0x00014b3d

00008b98 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
    ErrorReporter* error_reporter, TfLiteTensor* result) {
    8b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b9c:	b085      	sub	sp, #20
    8b9e:	4607      	mov	r7, r0
    8ba0:	460e      	mov	r6, r1
    8ba2:	4690      	mov	r8, r2
    8ba4:	461d      	mov	r5, r3
    8ba6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  *result = {};
    8ba8:	2240      	movs	r2, #64	; 0x40
    8baa:	2100      	movs	r1, #0
    8bac:	4620      	mov	r0, r4
    8bae:	4ba6      	ldr	r3, [pc, #664]	; (8e48 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b0>)
    8bb0:	4798      	blx	r3
    return data_ - ReadScalar<soffset_t>(data_);
    8bb2:	6833      	ldr	r3, [r6, #0]
    8bb4:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8bb6:	881a      	ldrh	r2, [r3, #0]
    8bb8:	2a06      	cmp	r2, #6
    8bba:	dd0b      	ble.n	8bd4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3c>
    8bbc:	88db      	ldrh	r3, [r3, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8bbe:	b15b      	cbz	r3, 8bd8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x40>
    8bc0:	56f0      	ldrsb	r0, [r6, r3]
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    8bc2:	462a      	mov	r2, r5
    8bc4:	4621      	mov	r1, r4
    8bc6:	b2c0      	uxtb	r0, r0
    8bc8:	4ba0      	ldr	r3, [pc, #640]	; (8e4c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b4>)
    8bca:	4798      	blx	r3
    8bcc:	b130      	cbz	r0, 8bdc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x44>
}
    8bce:	b005      	add	sp, #20
    8bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8bd4:	2000      	movs	r0, #0
    8bd6:	e7f4      	b.n	8bc2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a>
    8bd8:	2000      	movs	r0, #0
    8bda:	e7f2      	b.n	8bc2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a>
    return data_ - ReadScalar<soffset_t>(data_);
    8bdc:	6833      	ldr	r3, [r6, #0]
    8bde:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8be0:	881a      	ldrh	r2, [r3, #0]
    8be2:	2a0e      	cmp	r2, #14
    8be4:	f340 80f2 	ble.w	8dcc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x234>
    8be8:	89db      	ldrh	r3, [r3, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8bea:	2b00      	cmp	r3, #0
    8bec:	f000 80f0 	beq.w	8dd0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x238>
    8bf0:	5cf3      	ldrb	r3, [r6, r3]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
    8bf2:	3300      	adds	r3, #0
    8bf4:	bf18      	it	ne
    8bf6:	2301      	movne	r3, #1
    8bf8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    return data_ - ReadScalar<soffset_t>(data_);
    8bfc:	6833      	ldr	r3, [r6, #0]
    8bfe:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c00:	881a      	ldrh	r2, [r3, #0]
    8c02:	2a08      	cmp	r2, #8
    8c04:	f340 80e6 	ble.w	8dd4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x23c>
    8c08:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8c0a:	2b00      	cmp	r3, #0
    8c0c:	f000 80e4 	beq.w	8dd8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x240>
    8c10:	58f3      	ldr	r3, [r6, r3]
    FLATBUFFERS_ASSERT(i < size());
    8c12:	f8d8 2000 	ldr.w	r2, [r8]
    8c16:	429a      	cmp	r2, r3
    8c18:	f240 80e0 	bls.w	8ddc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x244>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8c1c:	f108 0804 	add.w	r8, r8, #4
    p += i * sizeof(uoffset_t);
    8c20:	eb08 0283 	add.w	r2, r8, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8c24:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
    8c28:	18d1      	adds	r1, r2, r3
    8c2a:	d010      	beq.n	8c4e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb6>
    return data_ - ReadScalar<soffset_t>(data_);
    8c2c:	58d3      	ldr	r3, [r2, r3]
    8c2e:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c30:	881a      	ldrh	r2, [r3, #0]
    8c32:	2a04      	cmp	r2, #4
    8c34:	dd0b      	ble.n	8c4e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb6>
    8c36:	889b      	ldrh	r3, [r3, #4]
    auto p = data_ + field_offset;
    8c38:	18ca      	adds	r2, r1, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8c3a:	b143      	cbz	r3, 8c4e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb6>
    8c3c:	58cb      	ldr	r3, [r1, r3]
    if (auto* array = buffer->data()) {
    8c3e:	18d1      	adds	r1, r2, r3
    8c40:	d005      	beq.n	8c4e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb6>
      if (array->size()) {
    8c42:	58d3      	ldr	r3, [r2, r3]
    8c44:	b11b      	cbz	r3, 8c4e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb6>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8c46:	3104      	adds	r1, #4
        result->data.data =
    8c48:	6061      	str	r1, [r4, #4]
        result->allocation_type = kTfLiteMmapRo;
    8c4a:	2301      	movs	r3, #1
    8c4c:	7523      	strb	r3, [r4, #20]
  if (result->data.data == nullptr) {
    8c4e:	6863      	ldr	r3, [r4, #4]
    8c50:	2b00      	cmp	r3, #0
    8c52:	f000 80ca 	beq.w	8dea <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x252>
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
    8c56:	462b      	mov	r3, r5
    8c58:	aa03      	add	r2, sp, #12
    8c5a:	f104 0118 	add.w	r1, r4, #24
    8c5e:	4630      	mov	r0, r6
    8c60:	f8df 821c 	ldr.w	r8, [pc, #540]	; 8e80 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2e8>
    8c64:	47c0      	blx	r8
    8c66:	2800      	cmp	r0, #0
    8c68:	d1b1      	bne.n	8bce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    return data_ - ReadScalar<soffset_t>(data_);
    8c6a:	6833      	ldr	r3, [r6, #0]
    8c6c:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c6e:	881a      	ldrh	r2, [r3, #0]
    8c70:	2a04      	cmp	r2, #4
    8c72:	f340 80bd 	ble.w	8df0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x258>
    8c76:	889a      	ldrh	r2, [r3, #4]
    auto p = data_ + field_offset;
    8c78:	18b3      	adds	r3, r6, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8c7a:	2a00      	cmp	r2, #0
    8c7c:	f000 80b8 	beq.w	8df0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x258>
    8c80:	58b2      	ldr	r2, [r6, r2]
  if (flatbuffer_tensor.shape() == nullptr) {
    8c82:	189b      	adds	r3, r3, r2
    8c84:	f000 80b4 	beq.w	8df0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x258>
  TFLITE_DCHECK(error_reporter != nullptr);
    8c88:	2d00      	cmp	r5, #0
    8c8a:	f000 80b4 	beq.w	8df6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x25e>
    *result = const_cast<kTfLiteArrayType*>(
    8c8e:	60a3      	str	r3, [r4, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    8c90:	6833      	ldr	r3, [r6, #0]
    8c92:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c94:	881a      	ldrh	r2, [r3, #0]
    8c96:	2a0c      	cmp	r2, #12
    8c98:	f340 812e 	ble.w	8ef8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x360>
    8c9c:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
    8c9e:	eb06 0a03 	add.w	sl, r6, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8ca2:	2b00      	cmp	r3, #0
    8ca4:	f000 812a 	beq.w	8efc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x364>
    8ca8:	f856 9003 	ldr.w	r9, [r6, r3]
      src_quantization->zero_point() &&
    8cac:	eb1a 0609 	adds.w	r6, sl, r9
    8cb0:	f000 8126 	beq.w	8f00 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x368>
    return data_ - ReadScalar<soffset_t>(data_);
    8cb4:	f85a 3009 	ldr.w	r3, [sl, r9]
    8cb8:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8cba:	8819      	ldrh	r1, [r3, #0]
    8cbc:	2908      	cmp	r1, #8
    8cbe:	f340 8121 	ble.w	8f04 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36c>
    8cc2:	891a      	ldrh	r2, [r3, #8]
    auto p = data_ + field_offset;
    8cc4:	18b0      	adds	r0, r6, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8cc6:	2a00      	cmp	r2, #0
    8cc8:	f000 811e 	beq.w	8f08 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x370>
    8ccc:	58b2      	ldr	r2, [r6, r2]
  if (src_quantization && src_quantization->scale() &&
    8cce:	42d0      	cmn	r0, r2
    8cd0:	f000 811c 	beq.w	8f0c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x374>
    8cd4:	5882      	ldr	r2, [r0, r2]
    8cd6:	2a00      	cmp	r2, #0
    8cd8:	f000 811a 	beq.w	8f10 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x378>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8cdc:	290a      	cmp	r1, #10
    8cde:	f340 8119 	ble.w	8f14 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x37c>
    8ce2:	895b      	ldrh	r3, [r3, #10]
    auto p = data_ + field_offset;
    8ce4:	18f2      	adds	r2, r6, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8ce6:	2b00      	cmp	r3, #0
    8ce8:	f000 8116 	beq.w	8f18 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x380>
    8cec:	58f3      	ldr	r3, [r6, r3]
      (src_quantization->scale()->size() > 0) &&
    8cee:	42da      	cmn	r2, r3
    8cf0:	f000 8114 	beq.w	8f1c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x384>
  if (src_quantization && src_quantization->scale() &&
    8cf4:	58d3      	ldr	r3, [r2, r3]
    8cf6:	2b00      	cmp	r3, #0
    8cf8:	f000 8112 	beq.w	8f20 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x388>
    return data_ - ReadScalar<soffset_t>(data_);
    8cfc:	46b0      	mov	r8, r6
    8cfe:	f85a 3009 	ldr.w	r3, [sl, r9]
    8d02:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8d04:	2908      	cmp	r1, #8
    8d06:	dd78      	ble.n	8dfa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x262>
    8d08:	891a      	ldrh	r2, [r3, #8]
    auto p = data_ + field_offset;
    8d0a:	4603      	mov	r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8d0c:	2a00      	cmp	r2, #0
    8d0e:	d076      	beq.n	8dfe <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x266>
    8d10:	58b2      	ldr	r2, [r6, r2]
    8d12:	4413      	add	r3, r2
    FLATBUFFERS_ASSERT(i < size());
    8d14:	681a      	ldr	r2, [r3, #0]
    8d16:	2a00      	cmp	r2, #0
    8d18:	d073      	beq.n	8e02 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x26a>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8d1a:	685b      	ldr	r3, [r3, #4]
    result->params.scale = src_quantization->scale()->Get(0);
    8d1c:	60e3      	str	r3, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    8d1e:	f85a 3009 	ldr.w	r3, [sl, r9]
    8d22:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8d24:	881a      	ldrh	r2, [r3, #0]
    8d26:	2a0a      	cmp	r2, #10
    8d28:	dd72      	ble.n	8e10 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x278>
    8d2a:	895a      	ldrh	r2, [r3, #10]
    auto p = data_ + field_offset;
    8d2c:	18b3      	adds	r3, r6, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8d2e:	2a00      	cmp	r2, #0
    8d30:	d070      	beq.n	8e14 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x27c>
    8d32:	58b2      	ldr	r2, [r6, r2]
    8d34:	4413      	add	r3, r2
    FLATBUFFERS_ASSERT(i < size());
    8d36:	681a      	ldr	r2, [r3, #0]
    8d38:	2a00      	cmp	r2, #0
    8d3a:	d06d      	beq.n	8e18 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x280>
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
    8d3c:	685b      	ldr	r3, [r3, #4]
    8d3e:	6123      	str	r3, [r4, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    8d40:	f85a 3009 	ldr.w	r3, [sl, r9]
    8d44:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8d46:	881a      	ldrh	r2, [r3, #0]
    8d48:	2a08      	cmp	r2, #8
    8d4a:	dd6c      	ble.n	8e26 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x28e>
    8d4c:	891a      	ldrh	r2, [r3, #8]
    auto p = data_ + field_offset;
    8d4e:	18b3      	adds	r3, r6, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8d50:	2a00      	cmp	r2, #0
    8d52:	d06a      	beq.n	8e2a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x292>
    8d54:	58b2      	ldr	r2, [r6, r2]
    8d56:	4413      	add	r3, r2
    int channels = src_quantization->scale()->size();
    8d58:	f8d3 b000 	ldr.w	fp, [r3]
                                        alignof(TfLiteAffineQuantization)));
    8d5c:	683b      	ldr	r3, [r7, #0]
    8d5e:	68db      	ldr	r3, [r3, #12]
    8d60:	2204      	movs	r2, #4
    8d62:	210c      	movs	r1, #12
    8d64:	4638      	mov	r0, r7
    8d66:	4798      	blx	r3
    if (quantization == nullptr) {
    8d68:	9000      	str	r0, [sp, #0]
    8d6a:	2800      	cmp	r0, #0
    8d6c:	d05f      	beq.n	8e2e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x296>
            TfLiteIntArrayGetSizeInBytes(channels), alignof(TfLiteIntArray)));
    8d6e:	683b      	ldr	r3, [r7, #0]
    8d70:	68db      	ldr	r3, [r3, #12]
    8d72:	9301      	str	r3, [sp, #4]
    8d74:	4658      	mov	r0, fp
    8d76:	4b36      	ldr	r3, [pc, #216]	; (8e50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b8>)
    8d78:	4798      	blx	r3
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
    8d7a:	2204      	movs	r2, #4
    8d7c:	4601      	mov	r1, r0
    8d7e:	4638      	mov	r0, r7
    8d80:	9b01      	ldr	r3, [sp, #4]
    8d82:	4798      	blx	r3
    quantization->zero_point =
    8d84:	9b00      	ldr	r3, [sp, #0]
    8d86:	6058      	str	r0, [r3, #4]
    if (quantization->zero_point == nullptr) {
    8d88:	2800      	cmp	r0, #0
    8d8a:	d056      	beq.n	8e3a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
    return data_ - ReadScalar<soffset_t>(data_);
    8d8c:	f85a 3009 	ldr.w	r3, [sl, r9]
    8d90:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8d92:	881a      	ldrh	r2, [r3, #0]
    8d94:	2a08      	cmp	r2, #8
    8d96:	f340 80c8 	ble.w	8f2a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x392>
    8d9a:	891a      	ldrh	r2, [r3, #8]
    auto p = data_ + field_offset;
    8d9c:	18b3      	adds	r3, r6, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8d9e:	2a00      	cmp	r2, #0
    8da0:	f000 80c0 	beq.w	8f24 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x38c>
    8da4:	58b2      	ldr	r2, [r6, r2]
    8da6:	4413      	add	r3, r2
  TFLITE_DCHECK(error_reporter != nullptr);
    8da8:	2d00      	cmp	r5, #0
    8daa:	f000 80c0 	beq.w	8f2e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x396>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    8dae:	2b00      	cmp	r3, #0
    8db0:	f000 80b9 	beq.w	8f26 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x38e>
    *result = const_cast<kTfLiteArrayType*>(
    8db4:	9900      	ldr	r1, [sp, #0]
    8db6:	600b      	str	r3, [r1, #0]
    quantization->zero_point->size = channels;
    8db8:	f8c0 b000 	str.w	fp, [r0]
    int* zero_point_data = quantization->zero_point->data;
    8dbc:	6848      	ldr	r0, [r1, #4]
    for (int i = 0; i < channels; i++) {
    8dbe:	f1bb 0f00 	cmp.w	fp, #0
    8dc2:	f340 8084 	ble.w	8ece <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x336>
    8dc6:	2100      	movs	r1, #0
    8dc8:	460d      	mov	r5, r1
    8dca:	e069      	b.n	8ea0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x308>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8dcc:	2300      	movs	r3, #0
    8dce:	e710      	b.n	8bf2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5a>
    8dd0:	2300      	movs	r3, #0
    8dd2:	e70e      	b.n	8bf2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5a>
    8dd4:	2300      	movs	r3, #0
    8dd6:	e71c      	b.n	8c12 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7a>
    8dd8:	2300      	movs	r3, #0
    8dda:	e71a      	b.n	8c12 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7a>
    FLATBUFFERS_ASSERT(i < size());
    8ddc:	4b1d      	ldr	r3, [pc, #116]	; (8e54 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2bc>)
    8dde:	4a1e      	ldr	r2, [pc, #120]	; (8e58 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c0>)
    8de0:	f240 1101 	movw	r1, #257	; 0x101
    8de4:	481d      	ldr	r0, [pc, #116]	; (8e5c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c4>)
    8de6:	4c1e      	ldr	r4, [pc, #120]	; (8e60 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c8>)
    8de8:	47a0      	blx	r4
    result->allocation_type = kTfLiteArenaRw;
    8dea:	2302      	movs	r3, #2
    8dec:	7523      	strb	r3, [r4, #20]
    8dee:	e732      	b.n	8c56 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xbe>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    8df0:	4b1c      	ldr	r3, [pc, #112]	; (8e64 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2cc>)
    8df2:	60a3      	str	r3, [r4, #8]
    8df4:	e74c      	b.n	8c90 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
  TFLITE_DCHECK(error_reporter != nullptr);
    8df6:	4b1c      	ldr	r3, [pc, #112]	; (8e68 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2d0>)
    8df8:	4798      	blx	r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8dfa:	2300      	movs	r3, #0
    8dfc:	e78a      	b.n	8d14 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x17c>
    8dfe:	2300      	movs	r3, #0
    8e00:	e788      	b.n	8d14 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x17c>
    FLATBUFFERS_ASSERT(i < size());
    8e02:	4b14      	ldr	r3, [pc, #80]	; (8e54 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2bc>)
    8e04:	4a19      	ldr	r2, [pc, #100]	; (8e6c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2d4>)
    8e06:	f240 1101 	movw	r1, #257	; 0x101
    8e0a:	4814      	ldr	r0, [pc, #80]	; (8e5c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c4>)
    8e0c:	4c14      	ldr	r4, [pc, #80]	; (8e60 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c8>)
    8e0e:	47a0      	blx	r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8e10:	2300      	movs	r3, #0
    8e12:	e790      	b.n	8d36 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x19e>
    8e14:	2300      	movs	r3, #0
    8e16:	e78e      	b.n	8d36 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x19e>
    FLATBUFFERS_ASSERT(i < size());
    8e18:	4b0e      	ldr	r3, [pc, #56]	; (8e54 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2bc>)
    8e1a:	4a15      	ldr	r2, [pc, #84]	; (8e70 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2d8>)
    8e1c:	f240 1101 	movw	r1, #257	; 0x101
    8e20:	480e      	ldr	r0, [pc, #56]	; (8e5c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c4>)
    8e22:	4c0f      	ldr	r4, [pc, #60]	; (8e60 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c8>)
    8e24:	47a0      	blx	r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8e26:	2300      	movs	r3, #0
    8e28:	e796      	b.n	8d58 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1c0>
    8e2a:	2300      	movs	r3, #0
    8e2c:	e794      	b.n	8d58 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1c0>
      TF_LITE_REPORT_ERROR(error_reporter,
    8e2e:	4911      	ldr	r1, [pc, #68]	; (8e74 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2dc>)
    8e30:	4628      	mov	r0, r5
    8e32:	4b11      	ldr	r3, [pc, #68]	; (8e78 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2e0>)
    8e34:	4798      	blx	r3
      return kTfLiteError;
    8e36:	2001      	movs	r0, #1
    8e38:	e6c9      	b.n	8bce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
      TF_LITE_REPORT_ERROR(error_reporter,
    8e3a:	4910      	ldr	r1, [pc, #64]	; (8e7c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2e4>)
    8e3c:	4628      	mov	r0, r5
    8e3e:	4b0e      	ldr	r3, [pc, #56]	; (8e78 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2e0>)
    8e40:	4798      	blx	r3
      return kTfLiteError;
    8e42:	2001      	movs	r0, #1
    8e44:	e6c3      	b.n	8bce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    8e46:	bf00      	nop
    8e48:	00015abd 	.word	0x00015abd
    8e4c:	000012f9 	.word	0x000012f9
    8e50:	0000a3bd 	.word	0x0000a3bd
    8e54:	0002125c 	.word	0x0002125c
    8e58:	000226ec 	.word	0x000226ec
    8e5c:	00021268 	.word	0x00021268
    8e60:	00014b4d 	.word	0x00014b4d
    8e64:	000227e4 	.word	0x000227e4
    8e68:	00014b3d 	.word	0x00014b3d
    8e6c:	000227e8 	.word	0x000227e8
    8e70:	000228b0 	.word	0x000228b0
    8e74:	00022c60 	.word	0x00022c60
    8e78:	00001265 	.word	0x00001265
    8e7c:	00022c90 	.word	0x00022c90
    8e80:	00008255 	.word	0x00008255
    8e84:	f858 2002 	ldr.w	r2, [r8, r2]
    8e88:	4413      	add	r3, r2
    FLATBUFFERS_ASSERT(i < size());
    8e8a:	681a      	ldr	r2, [r3, #0]
    8e8c:	4297      	cmp	r7, r2
    8e8e:	d217      	bcs.n	8ec0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x328>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8e90:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
    8e94:	685b      	ldr	r3, [r3, #4]
    8e96:	f840 3f04 	str.w	r3, [r0, #4]!
    for (int i = 0; i < channels; i++) {
    8e9a:	3101      	adds	r1, #1
    8e9c:	458b      	cmp	fp, r1
    8e9e:	d016      	beq.n	8ece <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x336>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
    8ea0:	460f      	mov	r7, r1
    return data_ - ReadScalar<soffset_t>(data_);
    8ea2:	6832      	ldr	r2, [r6, #0]
    8ea4:	eba8 0202 	sub.w	r2, r8, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8ea8:	8813      	ldrh	r3, [r2, #0]
    8eaa:	2b0a      	cmp	r3, #10
    8eac:	dd06      	ble.n	8ebc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x324>
    8eae:	8952      	ldrh	r2, [r2, #10]
    auto p = data_ + field_offset;
    8eb0:	eb08 0302 	add.w	r3, r8, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8eb4:	2a00      	cmp	r2, #0
    8eb6:	d1e5      	bne.n	8e84 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2ec>
    8eb8:	462b      	mov	r3, r5
    8eba:	e7e6      	b.n	8e8a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2f2>
    8ebc:	462b      	mov	r3, r5
    8ebe:	e7e4      	b.n	8e8a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2f2>
    FLATBUFFERS_ASSERT(i < size());
    8ec0:	4b1c      	ldr	r3, [pc, #112]	; (8f34 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x39c>)
    8ec2:	4a1d      	ldr	r2, [pc, #116]	; (8f38 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3a0>)
    8ec4:	f240 1101 	movw	r1, #257	; 0x101
    8ec8:	481c      	ldr	r0, [pc, #112]	; (8f3c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3a4>)
    8eca:	4c1d      	ldr	r4, [pc, #116]	; (8f40 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3a8>)
    8ecc:	47a0      	blx	r4
    return data_ - ReadScalar<soffset_t>(data_);
    8ece:	f85a 3009 	ldr.w	r3, [sl, r9]
    8ed2:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8ed4:	881a      	ldrh	r2, [r3, #0]
    8ed6:	2a10      	cmp	r2, #16
    8ed8:	dd0a      	ble.n	8ef0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x358>
    8eda:	8a1b      	ldrh	r3, [r3, #16]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8edc:	b153      	cbz	r3, 8ef4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x35c>
    8ede:	58f3      	ldr	r3, [r6, r3]
    quantization->quantized_dimension = src_quantization->quantized_dimension();
    8ee0:	9900      	ldr	r1, [sp, #0]
    8ee2:	608b      	str	r3, [r1, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
    8ee4:	2301      	movs	r3, #1
    8ee6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    8eea:	6361      	str	r1, [r4, #52]	; 0x34
  return kTfLiteOk;
    8eec:	2000      	movs	r0, #0
    8eee:	e66e      	b.n	8bce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    8ef0:	2300      	movs	r3, #0
    8ef2:	e7f5      	b.n	8ee0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x348>
    8ef4:	2300      	movs	r3, #0
    8ef6:	e7f3      	b.n	8ee0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x348>
    8ef8:	2000      	movs	r0, #0
    8efa:	e668      	b.n	8bce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    8efc:	2000      	movs	r0, #0
    8efe:	e666      	b.n	8bce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    8f00:	2000      	movs	r0, #0
    8f02:	e664      	b.n	8bce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    8f04:	2000      	movs	r0, #0
    8f06:	e662      	b.n	8bce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    8f08:	2000      	movs	r0, #0
    8f0a:	e660      	b.n	8bce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    8f0c:	2000      	movs	r0, #0
    8f0e:	e65e      	b.n	8bce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    8f10:	2000      	movs	r0, #0
    8f12:	e65c      	b.n	8bce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    8f14:	2000      	movs	r0, #0
    8f16:	e65a      	b.n	8bce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    8f18:	2000      	movs	r0, #0
    8f1a:	e658      	b.n	8bce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    8f1c:	2000      	movs	r0, #0
    8f1e:	e656      	b.n	8bce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    8f20:	2000      	movs	r0, #0
    8f22:	e654      	b.n	8bce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
  TFLITE_DCHECK(error_reporter != nullptr);
    8f24:	b11d      	cbz	r5, 8f2e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x396>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    8f26:	4b07      	ldr	r3, [pc, #28]	; (8f44 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3ac>)
    8f28:	4798      	blx	r3
  TFLITE_DCHECK(error_reporter != nullptr);
    8f2a:	2d00      	cmp	r5, #0
    8f2c:	d1fb      	bne.n	8f26 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x38e>
    8f2e:	4b05      	ldr	r3, [pc, #20]	; (8f44 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3ac>)
    8f30:	4798      	blx	r3
    8f32:	bf00      	nop
    8f34:	0002125c 	.word	0x0002125c
    8f38:	000228b0 	.word	0x000228b0
    8f3c:	00021268 	.word	0x00021268
    8f40:	00014b4d 	.word	0x00014b4d
    8f44:	00014b3d 	.word	0x00014b3d

00008f48 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:
    const Model* model, TfLiteContext* context, const SubGraph* subgraph) {
    8f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8f4c:	b082      	sub	sp, #8
    8f4e:	4607      	mov	r7, r0
    8f50:	460e      	mov	r6, r1
    8f52:	4691      	mov	r9, r2
    8f54:	461d      	mov	r5, r3
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    8f56:	2400      	movs	r4, #0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8f58:	46a2      	mov	sl, r4
        error_reporter_, &context->tensors[i]);
    8f5a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8fe0 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x98>
    8f5e:	e00e      	b.n	8f7e <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x36>
    8f60:	4653      	mov	r3, sl
    8f62:	e017      	b.n	8f94 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4c>
    8f64:	4653      	mov	r3, sl
    8f66:	e015      	b.n	8f94 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4c>
    8f68:	58f3      	ldr	r3, [r6, r3]
    8f6a:	441a      	add	r2, r3
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
    8f6c:	f8d9 3008 	ldr.w	r3, [r9, #8]
    8f70:	eb03 1384 	add.w	r3, r3, r4, lsl #6
        error_reporter_, &context->tensors[i]);
    8f74:	9300      	str	r3, [sp, #0]
    8f76:	68bb      	ldr	r3, [r7, #8]
    8f78:	47c0      	blx	r8
    if (status != kTfLiteOk) {
    8f7a:	bb10      	cbnz	r0, 8fc2 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x7a>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    8f7c:	3401      	adds	r4, #1
    return data_ - ReadScalar<soffset_t>(data_);
    8f7e:	682b      	ldr	r3, [r5, #0]
    8f80:	1aeb      	subs	r3, r5, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8f82:	881a      	ldrh	r2, [r3, #0]
    8f84:	2a04      	cmp	r2, #4
    8f86:	ddeb      	ble.n	8f60 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x18>
    8f88:	889a      	ldrh	r2, [r3, #4]
    auto p = data_ + field_offset;
    8f8a:	18ab      	adds	r3, r5, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8f8c:	2a00      	cmp	r2, #0
    8f8e:	d0e9      	beq.n	8f64 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1c>
    8f90:	58aa      	ldr	r2, [r5, r2]
    8f92:	4413      	add	r3, r2
    8f94:	681a      	ldr	r2, [r3, #0]
    8f96:	4294      	cmp	r4, r2
    8f98:	d21a      	bcs.n	8fd0 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x88>
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
    8f9a:	6878      	ldr	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8f9c:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    8f9e:	eb03 0284 	add.w	r2, r3, r4, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8fa2:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
    8fa6:	4411      	add	r1, r2
    return data_ - ReadScalar<soffset_t>(data_);
    8fa8:	6833      	ldr	r3, [r6, #0]
    8faa:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8fac:	881a      	ldrh	r2, [r3, #0]
    8fae:	2a0c      	cmp	r2, #12
    8fb0:	dd05      	ble.n	8fbe <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x76>
    8fb2:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
    8fb4:	18f2      	adds	r2, r6, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8fb6:	2b00      	cmp	r3, #0
    8fb8:	d1d6      	bne.n	8f68 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x20>
    8fba:	4652      	mov	r2, sl
    8fbc:	e7d6      	b.n	8f6c <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x24>
    8fbe:	4652      	mov	r2, sl
    8fc0:	e7d4      	b.n	8f6c <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x24>
      TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
    8fc2:	4622      	mov	r2, r4
    8fc4:	4904      	ldr	r1, [pc, #16]	; (8fd8 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x90>)
    8fc6:	68b8      	ldr	r0, [r7, #8]
    8fc8:	4b04      	ldr	r3, [pc, #16]	; (8fdc <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x94>)
    8fca:	4798      	blx	r3
      return kTfLiteError;
    8fcc:	2001      	movs	r0, #1
    8fce:	e000      	b.n	8fd2 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x8a>
  return kTfLiteOk;
    8fd0:	2000      	movs	r0, #0
}
    8fd2:	b002      	add	sp, #8
    8fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8fd8:	00022cc0 	.word	0x00022cc0
    8fdc:	00001265 	.word	0x00001265
    8fe0:	00008b99 	.word	0x00008b99

00008fe4 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
    8fe4:	b538      	push	{r3, r4, r5, lr}
  TFLITE_DCHECK(memory_allocator != nullptr);
    8fe6:	b198      	cbz	r0, 9010 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x2c>
    8fe8:	460d      	mov	r5, r1
    8fea:	4604      	mov	r4, r0
  TFLITE_DCHECK(error_reporter != nullptr);
    8fec:	b191      	cbz	r1, 9014 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x30>
      sizeof(MicroAllocator), alignof(MicroAllocator));
    8fee:	6803      	ldr	r3, [r0, #0]
    8ff0:	68db      	ldr	r3, [r3, #12]
    8ff2:	2204      	movs	r2, #4
    8ff4:	2118      	movs	r1, #24
    8ff6:	4798      	blx	r3
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
    8ff8:	4603      	mov	r3, r0
    8ffa:	b138      	cbz	r0, 900c <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x28>
      model_is_allocating_(false) {}
    8ffc:	4a06      	ldr	r2, [pc, #24]	; (9018 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x34>)
    8ffe:	6002      	str	r2, [r0, #0]
    9000:	6044      	str	r4, [r0, #4]
    9002:	6085      	str	r5, [r0, #8]
    9004:	2200      	movs	r2, #0
    9006:	7302      	strb	r2, [r0, #12]
    9008:	6102      	str	r2, [r0, #16]
    900a:	6142      	str	r2, [r0, #20]
}
    900c:	4618      	mov	r0, r3
    900e:	bd38      	pop	{r3, r4, r5, pc}
  TFLITE_DCHECK(memory_allocator != nullptr);
    9010:	4b02      	ldr	r3, [pc, #8]	; (901c <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x38>)
    9012:	4798      	blx	r3
  TFLITE_DCHECK(error_reporter != nullptr);
    9014:	4b01      	ldr	r3, [pc, #4]	; (901c <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x38>)
    9016:	4798      	blx	r3
    9018:	00022990 	.word	0x00022990
    901c:	00014b3d 	.word	0x00014b3d

00009020 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
    9020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9022:	4604      	mov	r4, r0
    9024:	460f      	mov	r7, r1
    9026:	4616      	mov	r6, r2
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
    9028:	2110      	movs	r1, #16
    902a:	4b0a      	ldr	r3, [pc, #40]	; (9054 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x34>)
    902c:	4798      	blx	r3
    902e:	4605      	mov	r5, r0
  if (aligned_arena != tensor_arena) {
    9030:	4284      	cmp	r4, r0
    9032:	d004      	beq.n	903e <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x1e>
    TF_LITE_REPORT_ERROR(
    9034:	1b02      	subs	r2, r0, r4
    9036:	4908      	ldr	r1, [pc, #32]	; (9058 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x38>)
    9038:	4630      	mov	r0, r6
    903a:	4b08      	ldr	r3, [pc, #32]	; (905c <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x3c>)
    903c:	4798      	blx	r3
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
    903e:	19e2      	adds	r2, r4, r7
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
    9040:	1b52      	subs	r2, r2, r5
    9042:	4629      	mov	r1, r5
    9044:	4630      	mov	r0, r6
    9046:	4b06      	ldr	r3, [pc, #24]	; (9060 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x40>)
    9048:	4798      	blx	r3
                error_reporter);
    904a:	4631      	mov	r1, r6
    904c:	4b05      	ldr	r3, [pc, #20]	; (9064 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x44>)
    904e:	4798      	blx	r3
}
    9050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9052:	bf00      	nop
    9054:	000081cd 	.word	0x000081cd
    9058:	00022ce0 	.word	0x00022ce0
    905c:	00001265 	.word	0x00001265
    9060:	0000a349 	.word	0x0000a349
    9064:	00008fe5 	.word	0x00008fe5

00009068 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>:
                                                      void** ptr) {
    9068:	b570      	push	{r4, r5, r6, lr}
    906a:	4604      	mov	r4, r0
    906c:	460e      	mov	r6, r1
    906e:	4615      	mov	r5, r2
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
    9070:	6840      	ldr	r0, [r0, #4]
    9072:	6803      	ldr	r3, [r0, #0]
    9074:	68db      	ldr	r3, [r3, #12]
    9076:	2210      	movs	r2, #16
    9078:	4798      	blx	r3
  if (data == nullptr) {
    907a:	b110      	cbz	r0, 9082 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x1a>
  (*ptr) = data;
    907c:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
    907e:	2000      	movs	r0, #0
}
    9080:	bd70      	pop	{r4, r5, r6, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    9082:	4632      	mov	r2, r6
    9084:	4902      	ldr	r1, [pc, #8]	; (9090 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x28>)
    9086:	68a0      	ldr	r0, [r4, #8]
    9088:	4b02      	ldr	r3, [pc, #8]	; (9094 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x2c>)
    908a:	4798      	blx	r3
    return kTfLiteError;
    908c:	2001      	movs	r0, #1
    908e:	bd70      	pop	{r4, r5, r6, pc}
    9090:	00022d4c 	.word	0x00022d4c
    9094:	00001265 	.word	0x00001265

00009098 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>:
                                                         int* buffer_idx) {
    9098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    909c:	4604      	mov	r4, r0
    909e:	460e      	mov	r6, r1
    90a0:	4690      	mov	r8, r2
    90a2:	461f      	mov	r7, r3
  if (scratch_buffer_handles_ != nullptr &&
    90a4:	6905      	ldr	r5, [r0, #16]
    90a6:	b15d      	cbz	r5, 90c0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x28>
          memory_allocator_->GetTail()) {
    90a8:	6840      	ldr	r0, [r0, #4]
    90aa:	4b14      	ldr	r3, [pc, #80]	; (90fc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x64>)
    90ac:	4798      	blx	r3
  if (scratch_buffer_handles_ != nullptr &&
    90ae:	4285      	cmp	r5, r0
    90b0:	d006      	beq.n	90c0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x28>
    TF_LITE_REPORT_ERROR(error_reporter_,
    90b2:	4913      	ldr	r1, [pc, #76]	; (9100 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x68>)
    90b4:	68a0      	ldr	r0, [r4, #8]
    90b6:	4b13      	ldr	r3, [pc, #76]	; (9104 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x6c>)
    90b8:	4798      	blx	r3
    return kTfLiteError;
    90ba:	2001      	movs	r0, #1
    90bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          memory_allocator_->AllocateFromTail(
    90c0:	6860      	ldr	r0, [r4, #4]
              alignof(internal::ScratchBufferHandle)));
    90c2:	6803      	ldr	r3, [r0, #0]
    90c4:	68db      	ldr	r3, [r3, #12]
    90c6:	2204      	movs	r2, #4
    90c8:	210c      	movs	r1, #12
    90ca:	4798      	blx	r3
  if (handle == nullptr) {
    90cc:	4603      	mov	r3, r0
    90ce:	b160      	cbz	r0, 90ea <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x52>
  *handle = {};
    90d0:	2000      	movs	r0, #0
    90d2:	6018      	str	r0, [r3, #0]
  handle->bytes = bytes;
    90d4:	f8c3 8004 	str.w	r8, [r3, #4]
  handle->node_idx = node_id;
    90d8:	609e      	str	r6, [r3, #8]
  *buffer_idx = scratch_buffer_count_;
    90da:	6962      	ldr	r2, [r4, #20]
    90dc:	603a      	str	r2, [r7, #0]
  scratch_buffer_count_ += 1;
    90de:	6962      	ldr	r2, [r4, #20]
    90e0:	3201      	adds	r2, #1
    90e2:	6162      	str	r2, [r4, #20]
  scratch_buffer_handles_ = handle;
    90e4:	6123      	str	r3, [r4, #16]
}
    90e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    90ea:	4632      	mov	r2, r6
    90ec:	4906      	ldr	r1, [pc, #24]	; (9108 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x70>)
    90ee:	68a0      	ldr	r0, [r4, #8]
    90f0:	4b04      	ldr	r3, [pc, #16]	; (9104 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x6c>)
    90f2:	4798      	blx	r3
    return kTfLiteError;
    90f4:	2001      	movs	r0, #1
    90f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    90fa:	bf00      	nop
    90fc:	0000a3b1 	.word	0x0000a3b1
    9100:	00022d7c 	.word	0x00022d7c
    9104:	00001265 	.word	0x00001265
    9108:	00022de0 	.word	0x00022de0

0000910c <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>:
  if (static_cast<size_t>(buffer_idx) >= scratch_buffer_count_) {
    910c:	6943      	ldr	r3, [r0, #20]
    910e:	428b      	cmp	r3, r1
    9110:	d908      	bls.n	9124 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x18>
  return scratch_buffer_handles_[scratch_buffer_count_ - buffer_idx - 1].data;
    9112:	1a5b      	subs	r3, r3, r1
    9114:	6901      	ldr	r1, [r0, #16]
    9116:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    911a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    911e:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    9122:	4770      	bx	lr
void* MicroAllocator::GetScratchBuffer(int buffer_idx) const {
    9124:	b510      	push	{r4, lr}
    9126:	460a      	mov	r2, r1
    TF_LITE_REPORT_ERROR(error_reporter_,
    9128:	4902      	ldr	r1, [pc, #8]	; (9134 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x28>)
    912a:	6880      	ldr	r0, [r0, #8]
    912c:	4c02      	ldr	r4, [pc, #8]	; (9138 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x2c>)
    912e:	47a0      	blx	r4
    return nullptr;
    9130:	2000      	movs	r0, #0
    9132:	bd10      	pop	{r4, pc}
    9134:	00022e18 	.word	0x00022e18
    9138:	00001265 	.word	0x00001265

0000913c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>:

ErrorReporter* MicroAllocator::error_reporter() const {
  return error_reporter_;
}

const SubGraph* MicroAllocator::GetSubGraphFromModel(const Model* model) {
    913c:	b508      	push	{r3, lr}
    return data_ - ReadScalar<soffset_t>(data_);
    913e:	680b      	ldr	r3, [r1, #0]
    9140:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9142:	881a      	ldrh	r2, [r3, #0]
    9144:	2a08      	cmp	r2, #8
    9146:	dd0b      	ble.n	9160 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x24>
    9148:	891a      	ldrh	r2, [r3, #8]
    auto p = data_ + field_offset;
    914a:	188b      	adds	r3, r1, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    914c:	b152      	cbz	r2, 9164 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x28>
    914e:	588a      	ldr	r2, [r1, r2]
    9150:	4413      	add	r3, r2
  auto* subgraphs = model->subgraphs();
  if (subgraphs->size() != 1) {
    9152:	681a      	ldr	r2, [r3, #0]
    9154:	2a01      	cmp	r2, #1
    9156:	d107      	bne.n	9168 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x2c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    9158:	1d18      	adds	r0, r3, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    915a:	685b      	ldr	r3, [r3, #4]
    915c:	4418      	add	r0, r3
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Only 1 subgraph is currently supported.\n");
    return nullptr;
  }
  return (*subgraphs)[0];
}
    915e:	bd08      	pop	{r3, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9160:	2300      	movs	r3, #0
    9162:	e7f6      	b.n	9152 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x16>
    9164:	2300      	movs	r3, #0
    9166:	e7f4      	b.n	9152 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x16>
    TF_LITE_REPORT_ERROR(error_reporter_,
    9168:	4902      	ldr	r1, [pc, #8]	; (9174 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x38>)
    916a:	6880      	ldr	r0, [r0, #8]
    916c:	4b02      	ldr	r3, [pc, #8]	; (9178 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x3c>)
    916e:	4798      	blx	r3
    return nullptr;
    9170:	2000      	movs	r0, #0
    9172:	bd08      	pop	{r3, pc}
    9174:	00022e44 	.word	0x00022e44
    9178:	00001265 	.word	0x00001265

0000917c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>:
    NodeAndRegistration** node_and_registrations) {
    917c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9180:	b083      	sub	sp, #12
  TFLITE_DCHECK(model != nullptr);
    9182:	2900      	cmp	r1, #0
    9184:	d031      	beq.n	91ea <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x6e>
    9186:	4604      	mov	r4, r0
    9188:	4615      	mov	r5, r2
    918a:	461f      	mov	r7, r3
    918c:	460e      	mov	r6, r1
  TFLITE_DCHECK(context != nullptr);
    918e:	2a00      	cmp	r2, #0
    9190:	d02d      	beq.n	91ee <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x72>
  if (model_is_allocating_) {
    9192:	7b03      	ldrb	r3, [r0, #12]
    9194:	2b00      	cmp	r3, #0
    9196:	d12c      	bne.n	91f2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x76>
  const SubGraph* subgraph = GetSubGraphFromModel(model);
    9198:	4b1b      	ldr	r3, [pc, #108]	; (9208 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x8c>)
    919a:	4798      	blx	r3
  TFLITE_DCHECK(subgraph != nullptr);
    919c:	4680      	mov	r8, r0
    919e:	2800      	cmp	r0, #0
    91a0:	d02f      	beq.n	9202 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x86>
  model_is_allocating_ = true;
    91a2:	2301      	movs	r3, #1
    91a4:	7323      	strb	r3, [r4, #12]
  TF_LITE_ENSURE_STATUS(AllocateTfLiteTensorArray(context, subgraph));
    91a6:	6823      	ldr	r3, [r4, #0]
    91a8:	691b      	ldr	r3, [r3, #16]
    91aa:	4602      	mov	r2, r0
    91ac:	4629      	mov	r1, r5
    91ae:	4620      	mov	r0, r4
    91b0:	4798      	blx	r3
    91b2:	bb18      	cbnz	r0, 91fc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x80>
  TF_LITE_ENSURE_STATUS(
    91b4:	6823      	ldr	r3, [r4, #0]
    91b6:	f8d3 9014 	ldr.w	r9, [r3, #20]
    91ba:	4643      	mov	r3, r8
    91bc:	462a      	mov	r2, r5
    91be:	4631      	mov	r1, r6
    91c0:	4620      	mov	r0, r4
    91c2:	47c8      	blx	r9
    91c4:	b9d0      	cbnz	r0, 91fc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x80>
  TF_LITE_ENSURE_STATUS(
    91c6:	6823      	ldr	r3, [r4, #0]
    91c8:	699b      	ldr	r3, [r3, #24]
    91ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    91cc:	4641      	mov	r1, r8
    91ce:	4620      	mov	r0, r4
    91d0:	4798      	blx	r3
    91d2:	b998      	cbnz	r0, 91fc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x80>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
    91d4:	6823      	ldr	r3, [r4, #0]
    91d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    91d8:	6812      	ldr	r2, [r2, #0]
    91da:	9200      	str	r2, [sp, #0]
    91dc:	69dd      	ldr	r5, [r3, #28]
    91de:	463b      	mov	r3, r7
    91e0:	4642      	mov	r2, r8
    91e2:	4631      	mov	r1, r6
    91e4:	4620      	mov	r0, r4
    91e6:	47a8      	blx	r5
    91e8:	e008      	b.n	91fc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x80>
  TFLITE_DCHECK(model != nullptr);
    91ea:	4b08      	ldr	r3, [pc, #32]	; (920c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x90>)
    91ec:	4798      	blx	r3
  TFLITE_DCHECK(context != nullptr);
    91ee:	4b07      	ldr	r3, [pc, #28]	; (920c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x90>)
    91f0:	4798      	blx	r3
    TF_LITE_REPORT_ERROR(error_reporter_,
    91f2:	4907      	ldr	r1, [pc, #28]	; (9210 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x94>)
    91f4:	6880      	ldr	r0, [r0, #8]
    91f6:	4b07      	ldr	r3, [pc, #28]	; (9214 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x98>)
    91f8:	4798      	blx	r3
    return kTfLiteError;
    91fa:	2001      	movs	r0, #1
}
    91fc:	b003      	add	sp, #12
    91fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  TFLITE_DCHECK(subgraph != nullptr);
    9202:	4b02      	ldr	r3, [pc, #8]	; (920c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x90>)
    9204:	4798      	blx	r3
    9206:	bf00      	nop
    9208:	0000913d 	.word	0x0000913d
    920c:	00014b3d 	.word	0x00014b3d
    9210:	00022e70 	.word	0x00022e70
    9214:	00001265 	.word	0x00001265

00009218 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>:
                                                   TfLiteContext* context) {
    9218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    921c:	4604      	mov	r4, r0
  if (!model_is_allocating_) {
    921e:	7b03      	ldrb	r3, [r0, #12]
    9220:	b17b      	cbz	r3, 9242 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x2a>
    9222:	460d      	mov	r5, r1
    9224:	4616      	mov	r6, r2
  const SubGraph* subgraph = GetSubGraphFromModel(model);
    9226:	4b12      	ldr	r3, [pc, #72]	; (9270 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x58>)
    9228:	4798      	blx	r3
  TFLITE_DCHECK(subgraph != nullptr);
    922a:	4680      	mov	r8, r0
    922c:	b180      	cbz	r0, 9250 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x38>
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, context, subgraph));
    922e:	6823      	ldr	r3, [r4, #0]
    9230:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    9232:	4603      	mov	r3, r0
    9234:	4632      	mov	r2, r6
    9236:	4629      	mov	r1, r5
    9238:	4620      	mov	r0, r4
    923a:	47b8      	blx	r7
    923c:	b150      	cbz	r0, 9254 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x3c>
    923e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    9242:	490c      	ldr	r1, [pc, #48]	; (9274 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x5c>)
    9244:	6880      	ldr	r0, [r0, #8]
    9246:	4b0c      	ldr	r3, [pc, #48]	; (9278 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x60>)
    9248:	4798      	blx	r3
    return kTfLiteError;
    924a:	2001      	movs	r0, #1
    924c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_DCHECK(subgraph != nullptr);
    9250:	4b0a      	ldr	r3, [pc, #40]	; (927c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x64>)
    9252:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(AllocateVariables(context, subgraph));
    9254:	6823      	ldr	r3, [r4, #0]
    9256:	6a1b      	ldr	r3, [r3, #32]
    9258:	4642      	mov	r2, r8
    925a:	4631      	mov	r1, r6
    925c:	4620      	mov	r0, r4
    925e:	4798      	blx	r3
    9260:	b918      	cbnz	r0, 926a <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x52>
  model_is_allocating_ = false;
    9262:	2200      	movs	r2, #0
    9264:	7322      	strb	r2, [r4, #12]
  return kTfLiteOk;
    9266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
    926a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    926e:	bf00      	nop
    9270:	0000913d 	.word	0x0000913d
    9274:	00022ec8 	.word	0x00022ec8
    9278:	00001265 	.word	0x00001265
    927c:	00014b3d 	.word	0x00014b3d

00009280 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi>:
                                                   int subgraph_idx) {
    9280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9284:	b082      	sub	sp, #8
    9286:	4605      	mov	r5, r0
    9288:	460c      	mov	r4, r1
    928a:	4617      	mov	r7, r2
  const SubGraph* subgraph = GetSubGraphFromModel(model);
    928c:	4b23      	ldr	r3, [pc, #140]	; (931c <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0x9c>)
    928e:	4798      	blx	r3
  TFLITE_DCHECK(subgraph != nullptr);
    9290:	2800      	cmp	r0, #0
    9292:	d031      	beq.n	92f8 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0x78>
    9294:	4680      	mov	r8, r0
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    9296:	6868      	ldr	r0, [r5, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
    9298:	6803      	ldr	r3, [r0, #0]
    929a:	691b      	ldr	r3, [r3, #16]
    929c:	2204      	movs	r2, #4
    929e:	2140      	movs	r1, #64	; 0x40
    92a0:	4798      	blx	r3
    92a2:	4606      	mov	r6, r0
  internal::InitializeTfLiteTensorFromFlatbuffer(
    92a4:	6868      	ldr	r0, [r5, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    92a6:	f8d8 3000 	ldr.w	r3, [r8]
    92aa:	eba8 0303 	sub.w	r3, r8, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    92ae:	881a      	ldrh	r2, [r3, #0]
    92b0:	2a04      	cmp	r2, #4
    92b2:	dd23      	ble.n	92fc <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0x7c>
    92b4:	889a      	ldrh	r2, [r3, #4]
    auto p = data_ + field_offset;
    92b6:	eb08 0302 	add.w	r3, r8, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    92ba:	b30a      	cbz	r2, 9300 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0x80>
    92bc:	f858 2002 	ldr.w	r2, [r8, r2]
    92c0:	4413      	add	r3, r2
    FLATBUFFERS_ASSERT(i < size());
    92c2:	681a      	ldr	r2, [r3, #0]
    92c4:	4297      	cmp	r7, r2
    92c6:	d21d      	bcs.n	9304 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0x84>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    92c8:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    92ca:	eb03 0287 	add.w	r2, r3, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    92ce:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
    92d2:	4411      	add	r1, r2
    return data_ - ReadScalar<soffset_t>(data_);
    92d4:	6823      	ldr	r3, [r4, #0]
    92d6:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    92d8:	881a      	ldrh	r2, [r3, #0]
    92da:	2a0c      	cmp	r2, #12
    92dc:	dd19      	ble.n	9312 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0x92>
    92de:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
    92e0:	18e2      	adds	r2, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    92e2:	b1c3      	cbz	r3, 9316 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0x96>
    92e4:	58e3      	ldr	r3, [r4, r3]
    92e6:	441a      	add	r2, r3
      model->buffers(), error_reporter_, tensor);
    92e8:	68ab      	ldr	r3, [r5, #8]
    92ea:	9600      	str	r6, [sp, #0]
    92ec:	4c0c      	ldr	r4, [pc, #48]	; (9320 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0xa0>)
    92ee:	47a0      	blx	r4
}
    92f0:	4630      	mov	r0, r6
    92f2:	b002      	add	sp, #8
    92f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_DCHECK(subgraph != nullptr);
    92f8:	4b0a      	ldr	r3, [pc, #40]	; (9324 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0xa4>)
    92fa:	4798      	blx	r3
    92fc:	2300      	movs	r3, #0
    92fe:	e7e0      	b.n	92c2 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0x42>
    9300:	2300      	movs	r3, #0
    9302:	e7de      	b.n	92c2 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0x42>
    FLATBUFFERS_ASSERT(i < size());
    9304:	4b08      	ldr	r3, [pc, #32]	; (9328 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0xa8>)
    9306:	4a09      	ldr	r2, [pc, #36]	; (932c <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0xac>)
    9308:	f240 1101 	movw	r1, #257	; 0x101
    930c:	4808      	ldr	r0, [pc, #32]	; (9330 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0xb0>)
    930e:	4c09      	ldr	r4, [pc, #36]	; (9334 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0xb4>)
    9310:	47a0      	blx	r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9312:	2200      	movs	r2, #0
    9314:	e7e8      	b.n	92e8 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0x68>
    9316:	2200      	movs	r2, #0
    9318:	e7e6      	b.n	92e8 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0x68>
    931a:	bf00      	nop
    931c:	0000913d 	.word	0x0000913d
    9320:	00008b99 	.word	0x00008b99
    9324:	00014b3d 	.word	0x00014b3d
    9328:	0002125c 	.word	0x0002125c
    932c:	000225dc 	.word	0x000225dc
    9330:	00021268 	.word	0x00021268
    9334:	00014b4d 	.word	0x00014b4d

00009338 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(const Model* model,
                                                    TfLiteContext* context,
                                                    const SubGraph* subgraph) {
    9338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    933c:	b0a1      	sub	sp, #132	; 0x84
    933e:	4607      	mov	r7, r0
    9340:	9003      	str	r0, [sp, #12]
    9342:	460c      	mov	r4, r1
    9344:	9208      	str	r2, [sp, #32]
    9346:	469a      	mov	sl, r3
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // thrown away when the child allocator (tmp_allocator) goes out of scope.
  {
    SimpleMemoryAllocator tmp_allocator(error_reporter_,
                                        memory_allocator_->GetHead(),
                                        memory_allocator_->GetTail());
    9348:	6885      	ldr	r5, [r0, #8]
    934a:	6840      	ldr	r0, [r0, #4]
    934c:	4bab      	ldr	r3, [pc, #684]	; (95fc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2c4>)
    934e:	4798      	blx	r3
    9350:	4606      	mov	r6, r0
    9352:	6878      	ldr	r0, [r7, #4]
    9354:	4baa      	ldr	r3, [pc, #680]	; (9600 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2c8>)
    9356:	4798      	blx	r3
    9358:	4603      	mov	r3, r0
    935a:	4632      	mov	r2, r6
    935c:	4629      	mov	r1, r5
    935e:	a80e      	add	r0, sp, #56	; 0x38
    9360:	4da8      	ldr	r5, [pc, #672]	; (9604 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2cc>)
    9362:	47a8      	blx	r5

    AllocationInfoBuilder builder(error_reporter_, &tmp_allocator);
    9364:	68bb      	ldr	r3, [r7, #8]
    9366:	9305      	str	r3, [sp, #20]
    return data_ - ReadScalar<soffset_t>(data_);
    9368:	46d3      	mov	fp, sl
    936a:	f8da 3000 	ldr.w	r3, [sl]
    936e:	ebaa 0303 	sub.w	r3, sl, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9372:	881a      	ldrh	r2, [r3, #0]
    9374:	2a04      	cmp	r2, #4
    9376:	dd3a      	ble.n	93ee <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xb6>
    9378:	889a      	ldrh	r2, [r3, #4]
    auto p = data_ + field_offset;
    937a:	eb0a 0302 	add.w	r3, sl, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    937e:	2a00      	cmp	r2, #0
    9380:	d037      	beq.n	93f2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xba>
    9382:	f85a 2002 	ldr.w	r2, [sl, r2]
    9386:	4413      	add	r3, r2
  uoffset_t size() const { return EndianScalar(length_); }
    9388:	681b      	ldr	r3, [r3, #0]
    938a:	461a      	mov	r2, r3
    938c:	9304      	str	r3, [sp, #16]
  size_t Size() const { return tensor_count_ + buffer_count_; }
    938e:	9b03      	ldr	r3, [sp, #12]
    9390:	695b      	ldr	r3, [r3, #20]
    9392:	18d3      	adds	r3, r2, r3
    9394:	9307      	str	r3, [sp, #28]
  size_t bytes = sizeof(AllocationInfo) * Size();
    9396:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    939a:	00db      	lsls	r3, r3, #3
    939c:	4619      	mov	r1, r3
    939e:	9306      	str	r3, [sp, #24]
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
    93a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    93a2:	68db      	ldr	r3, [r3, #12]
    93a4:	2204      	movs	r2, #4
    93a6:	a80e      	add	r0, sp, #56	; 0x38
    93a8:	4798      	blx	r3
  if (info_ == nullptr) {
    93aa:	4606      	mov	r6, r0
    93ac:	b318      	cbz	r0, 93f6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xbe>
    return data_ - ReadScalar<soffset_t>(data_);
    93ae:	46a1      	mov	r9, r4
    93b0:	6823      	ldr	r3, [r4, #0]
    93b2:	1ae3      	subs	r3, r4, r3
    93b4:	461a      	mov	r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    93b6:	881b      	ldrh	r3, [r3, #0]
    93b8:	4618      	mov	r0, r3
    93ba:	2b10      	cmp	r3, #16
    93bc:	f340 8282 	ble.w	98c4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x58c>
    93c0:	4611      	mov	r1, r2
    93c2:	8a13      	ldrh	r3, [r2, #16]
    auto p = data_ + field_offset;
    93c4:	18e2      	adds	r2, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    93c6:	2b00      	cmp	r3, #0
    93c8:	f000 8094 	beq.w	94f4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1bc>
    93cc:	58e3      	ldr	r3, [r4, r3]
  if (model->metadata()) {
    93ce:	42da      	cmn	r2, r3
    93d0:	f000 828a 	beq.w	98e8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x5b0>
    93d4:	2300      	movs	r3, #0
    93d6:	9302      	str	r3, [sp, #8]
    93d8:	461c      	mov	r4, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
    93da:	9609      	str	r6, [sp, #36]	; 0x24
    93dc:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    93e0:	468b      	mov	fp, r1
    93e2:	4680      	mov	r8, r0
    93e4:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
    93e8:	f8dd a010 	ldr.w	sl, [sp, #16]
    93ec:	e01d      	b.n	942a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xf2>
    93ee:	2300      	movs	r3, #0
    93f0:	e7ca      	b.n	9388 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x50>
    93f2:	2300      	movs	r3, #0
    93f4:	e7c8      	b.n	9388 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x50>
    TF_LITE_REPORT_ERROR(
    93f6:	9a06      	ldr	r2, [sp, #24]
    93f8:	4983      	ldr	r1, [pc, #524]	; (9608 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2d0>)
    93fa:	9805      	ldr	r0, [sp, #20]
    93fc:	4b83      	ldr	r3, [pc, #524]	; (960c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2d4>)
    93fe:	4798      	blx	r3
    TF_LITE_ENSURE_STATUS(
    9400:	2401      	movs	r4, #1
    9402:	a80e      	add	r0, sp, #56	; 0x38
    9404:	4b82      	ldr	r3, [pc, #520]	; (9610 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2d8>)
    9406:	4798      	blx	r3
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
                                            /*alignment=*/1);
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
  }
  return kTfLiteOk;
}
    9408:	4620      	mov	r0, r4
    940a:	b021      	add	sp, #132	; 0x84
    940c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9410:	2300      	movs	r3, #0
    9412:	e016      	b.n	9442 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x10a>
    9414:	2300      	movs	r3, #0
    9416:	e014      	b.n	9442 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x10a>
    9418:	58f3      	ldr	r3, [r6, r3]
    941a:	4418      	add	r0, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
    941c:	2217      	movs	r2, #23
    941e:	497d      	ldr	r1, [pc, #500]	; (9614 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2dc>)
    9420:	3004      	adds	r0, #4
    9422:	4b7d      	ldr	r3, [pc, #500]	; (9618 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2e0>)
    9424:	4798      	blx	r3
    9426:	b310      	cbz	r0, 946e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x136>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    9428:	3401      	adds	r4, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    942a:	f1b8 0f10 	cmp.w	r8, #16
    942e:	ddef      	ble.n	9410 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xd8>
    9430:	f8bb 2010 	ldrh.w	r2, [fp, #16]
    auto p = data_ + field_offset;
    9434:	eb09 0302 	add.w	r3, r9, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9438:	2a00      	cmp	r2, #0
    943a:	d0eb      	beq.n	9414 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xdc>
    943c:	f859 2002 	ldr.w	r2, [r9, r2]
    9440:	4413      	add	r3, r2
    9442:	681a      	ldr	r2, [r3, #0]
    9444:	42a2      	cmp	r2, r4
    9446:	d958      	bls.n	94fa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1c2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    9448:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    944a:	eb03 0284 	add.w	r2, r3, r4, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    944e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    9452:	18d6      	adds	r6, r2, r3
    return data_ - ReadScalar<soffset_t>(data_);
    9454:	58d5      	ldr	r5, [r2, r3]
    9456:	1b75      	subs	r5, r6, r5
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9458:	882f      	ldrh	r7, [r5, #0]
    945a:	2f04      	cmp	r7, #4
    945c:	dd05      	ble.n	946a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x132>
    945e:	88ab      	ldrh	r3, [r5, #4]
    auto p = data_ + field_offset;
    9460:	18f0      	adds	r0, r6, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9462:	2b00      	cmp	r3, #0
    9464:	d1d8      	bne.n	9418 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xe0>
    9466:	2000      	movs	r0, #0
    9468:	e7d8      	b.n	941c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xe4>
    946a:	2000      	movs	r0, #0
    946c:	e7d6      	b.n	941c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xe4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    946e:	f1b8 0f0c 	cmp.w	r8, #12
    9472:	dd25      	ble.n	94c0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x188>
    9474:	f8bb 200c 	ldrh.w	r2, [fp, #12]
    auto p = data_ + field_offset;
    9478:	eb09 0302 	add.w	r3, r9, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    947c:	b312      	cbz	r2, 94c4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x18c>
    947e:	f859 2002 	ldr.w	r2, [r9, r2]
    9482:	4413      	add	r3, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9484:	2f06      	cmp	r7, #6
    9486:	dd1f      	ble.n	94c8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x190>
    9488:	88ea      	ldrh	r2, [r5, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    948a:	b1fa      	cbz	r2, 94cc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x194>
    948c:	58b2      	ldr	r2, [r6, r2]
    FLATBUFFERS_ASSERT(i < size());
    948e:	6819      	ldr	r1, [r3, #0]
    9490:	4291      	cmp	r1, r2
    9492:	d91d      	bls.n	94d0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x198>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    9494:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    9496:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    949a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    949e:	18ca      	adds	r2, r1, r3
    return data_ - ReadScalar<soffset_t>(data_);
    94a0:	58cb      	ldr	r3, [r1, r3]
    94a2:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    94a4:	8819      	ldrh	r1, [r3, #0]
    94a6:	2904      	cmp	r1, #4
    94a8:	dd19      	ble.n	94de <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1a6>
    94aa:	8899      	ldrh	r1, [r3, #4]
    auto p = data_ + field_offset;
    94ac:	1853      	adds	r3, r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    94ae:	b1c1      	cbz	r1, 94e2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1aa>
    94b0:	5852      	ldr	r2, [r2, r1]
    94b2:	4413      	add	r3, r2
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
    94b4:	68da      	ldr	r2, [r3, #12]
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
    94b6:	3310      	adds	r3, #16
        if (tensor_count_ != nbr_tensors) {
    94b8:	4592      	cmp	sl, r2
    94ba:	d114      	bne.n	94e6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1ae>
        *offline_planner_offsets =
    94bc:	9302      	str	r3, [sp, #8]
    94be:	e7b3      	b.n	9428 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xf0>
    94c0:	2300      	movs	r3, #0
    94c2:	e7df      	b.n	9484 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x14c>
    94c4:	2300      	movs	r3, #0
    94c6:	e7dd      	b.n	9484 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x14c>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    94c8:	2200      	movs	r2, #0
    94ca:	e7e0      	b.n	948e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x156>
    94cc:	2200      	movs	r2, #0
    94ce:	e7de      	b.n	948e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x156>
    FLATBUFFERS_ASSERT(i < size());
    94d0:	4b52      	ldr	r3, [pc, #328]	; (961c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2e4>)
    94d2:	4a53      	ldr	r2, [pc, #332]	; (9620 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2e8>)
    94d4:	f240 1101 	movw	r1, #257	; 0x101
    94d8:	4852      	ldr	r0, [pc, #328]	; (9624 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ec>)
    94da:	4c53      	ldr	r4, [pc, #332]	; (9628 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2f0>)
    94dc:	47a0      	blx	r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    94de:	2300      	movs	r3, #0
    94e0:	e7e8      	b.n	94b4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x17c>
    94e2:	2300      	movs	r3, #0
    94e4:	e7e6      	b.n	94b4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x17c>
          TF_LITE_REPORT_ERROR(reporter_,
    94e6:	9b04      	ldr	r3, [sp, #16]
    94e8:	4950      	ldr	r1, [pc, #320]	; (962c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2f4>)
    94ea:	9805      	ldr	r0, [sp, #20]
    94ec:	4c47      	ldr	r4, [pc, #284]	; (960c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2d4>)
    94ee:	47a0      	blx	r4
    TF_LITE_ENSURE_STATUS(
    94f0:	2401      	movs	r4, #1
    94f2:	e786      	b.n	9402 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xca>
    const int32_t* offline_planner_offsets = nullptr;
    94f4:	2300      	movs	r3, #0
    94f6:	9302      	str	r3, [sp, #8]
    94f8:	e1e6      	b.n	98c8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x590>
    94fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
    94fc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    9500:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    9504:	e1e0      	b.n	98c8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x590>
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
    9506:	2100      	movs	r1, #0
    9508:	4608      	mov	r0, r1
    950a:	e061      	b.n	95d0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x298>
    return data_ - ReadScalar<soffset_t>(data_);
    950c:	f8da 4000 	ldr.w	r4, [sl]
    9510:	ebab 0404 	sub.w	r4, fp, r4
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9514:	f8b4 8000 	ldrh.w	r8, [r4]
    9518:	f1b8 0f04 	cmp.w	r8, #4
    951c:	dd23      	ble.n	9566 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x22e>
    951e:	88a4      	ldrh	r4, [r4, #4]
    auto p = data_ + field_offset;
    9520:	eb0b 0804 	add.w	r8, fp, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9524:	b30c      	cbz	r4, 956a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x232>
    9526:	f85b 4004 	ldr.w	r4, [fp, r4]
    952a:	44a0      	add	r8, r4
    FLATBUFFERS_ASSERT(i < size());
    952c:	f8d8 4000 	ldr.w	r4, [r8]
    9530:	42a1      	cmp	r1, r4
    9532:	d21c      	bcs.n	956e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x236>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    9534:	f108 0804 	add.w	r8, r8, #4
    p += i * sizeof(uoffset_t);
    9538:	eb08 0481 	add.w	r4, r8, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    953c:	f858 9021 	ldr.w	r9, [r8, r1, lsl #2]
    9540:	eb04 0809 	add.w	r8, r4, r9
    return data_ - ReadScalar<soffset_t>(data_);
    9544:	f854 4009 	ldr.w	r4, [r4, r9]
    9548:	eba8 0404 	sub.w	r4, r8, r4
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    954c:	f8b4 9000 	ldrh.w	r9, [r4]
    9550:	f1b9 0f0e 	cmp.w	r9, #14
    9554:	dd12      	ble.n	957c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x244>
    9556:	89e4      	ldrh	r4, [r4, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9558:	b194      	cbz	r4, 9580 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x248>
    955a:	f818 4004 	ldrb.w	r4, [r8, r4]
    955e:	fab4 f484 	clz	r4, r4
    9562:	0964      	lsrs	r4, r4, #5
    9564:	e01e      	b.n	95a4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x26c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9566:	46e0      	mov	r8, ip
    9568:	e7e0      	b.n	952c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1f4>
    956a:	46e0      	mov	r8, ip
    956c:	e7de      	b.n	952c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1f4>
    FLATBUFFERS_ASSERT(i < size());
    956e:	4b2b      	ldr	r3, [pc, #172]	; (961c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2e4>)
    9570:	4a2f      	ldr	r2, [pc, #188]	; (9630 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2f8>)
    9572:	f240 1101 	movw	r1, #257	; 0x101
    9576:	482b      	ldr	r0, [pc, #172]	; (9624 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ec>)
    9578:	4c2b      	ldr	r4, [pc, #172]	; (9628 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2f0>)
    957a:	47a0      	blx	r4
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    957c:	4664      	mov	r4, ip
    957e:	e7ee      	b.n	955e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x226>
    9580:	4664      	mov	r4, ip
    9582:	e7ec      	b.n	955e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x226>
      current->offline_offset = kOnlinePlannedBuffer;
    9584:	6105      	str	r5, [r0, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
    9586:	3101      	adds	r1, #1
    9588:	3240      	adds	r2, #64	; 0x40
    958a:	3318      	adds	r3, #24
    958c:	458e      	cmp	lr, r1
    958e:	d0ba      	beq.n	9506 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1ce>
    9590:	4618      	mov	r0, r3
    current->output_ptr = &(runtime_tensors[i].data.data);
    9592:	605a      	str	r2, [r3, #4]
    current->bytes = runtime_tensors[i].bytes;
    9594:	6954      	ldr	r4, [r2, #20]
    9596:	601c      	str	r4, [r3, #0]
    current->first_created = -1;
    9598:	609d      	str	r5, [r3, #8]
    current->last_used = -1;
    959a:	60dd      	str	r5, [r3, #12]
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
    959c:	6814      	ldr	r4, [r2, #0]
    959e:	2c00      	cmp	r4, #0
    95a0:	d0b4      	beq.n	950c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1d4>
    95a2:	4664      	mov	r4, ip
    95a4:	7504      	strb	r4, [r0, #20]
    if (offline_offsets) {
    95a6:	2f00      	cmp	r7, #0
    95a8:	d0ec      	beq.n	9584 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x24c>
      current->offline_offset = offline_offsets[i];
    95aa:	f857 4021 	ldr.w	r4, [r7, r1, lsl #2]
    95ae:	6104      	str	r4, [r0, #16]
    95b0:	e7e9      	b.n	9586 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x24e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    95b2:	f85b 2002 	ldr.w	r2, [fp, r2]
    95b6:	4413      	add	r3, r2
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    95b8:	681a      	ldr	r2, [r3, #0]
    95ba:	428a      	cmp	r2, r1
    95bc:	d918      	bls.n	95f0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2b8>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    95be:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    AllocationInfo* current = &info_[tensor_index];
    95c2:	685b      	ldr	r3, [r3, #4]
    current->first_created = 0;
    95c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    95c8:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    95cc:	6098      	str	r0, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    95ce:	3101      	adds	r1, #1
    return data_ - ReadScalar<soffset_t>(data_);
    95d0:	f8da 3000 	ldr.w	r3, [sl]
    95d4:	ebab 0303 	sub.w	r3, fp, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    95d8:	881a      	ldrh	r2, [r3, #0]
    95da:	2a06      	cmp	r2, #6
    95dc:	dd06      	ble.n	95ec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2b4>
    95de:	88da      	ldrh	r2, [r3, #6]
    auto p = data_ + field_offset;
    95e0:	eb0b 0302 	add.w	r3, fp, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    95e4:	2a00      	cmp	r2, #0
    95e6:	d1e4      	bne.n	95b2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27a>
    95e8:	4603      	mov	r3, r0
    95ea:	e7e5      	b.n	95b8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x280>
    95ec:	4603      	mov	r3, r0
    95ee:	e7e3      	b.n	95b8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x280>
    95f0:	2100      	movs	r1, #0
    95f2:	460d      	mov	r5, r1
    95f4:	e027      	b.n	9646 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x30e>
    95f6:	462b      	mov	r3, r5
    95f8:	e034      	b.n	9664 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x32c>
    95fa:	bf00      	nop
    95fc:	0000a3ad 	.word	0x0000a3ad
    9600:	0000a3b1 	.word	0x0000a3b1
    9604:	0000a32d 	.word	0x0000a32d
    9608:	00022f14 	.word	0x00022f14
    960c:	00001265 	.word	0x00001265
    9610:	0000a261 	.word	0x0000a261
    9614:	000229b8 	.word	0x000229b8
    9618:	0001689d 	.word	0x0001689d
    961c:	0002125c 	.word	0x0002125c
    9620:	000226ec 	.word	0x000226ec
    9624:	00021268 	.word	0x00021268
    9628:	00014b4d 	.word	0x00014b4d
    962c:	00022f58 	.word	0x00022f58
    9630:	000225dc 	.word	0x000225dc
    9634:	462b      	mov	r3, r5
    9636:	e015      	b.n	9664 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x32c>
    9638:	f85b 0000 	ldr.w	r0, [fp, r0]
    963c:	4402      	add	r2, r0
    current->last_used = subgraph->operators()->size() - 1;
    963e:	6812      	ldr	r2, [r2, #0]
    9640:	3a01      	subs	r2, #1
    9642:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    9644:	3101      	adds	r1, #1
    return data_ - ReadScalar<soffset_t>(data_);
    9646:	f8da 2000 	ldr.w	r2, [sl]
    964a:	ebab 0202 	sub.w	r2, fp, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    964e:	8814      	ldrh	r4, [r2, #0]
    9650:	2c08      	cmp	r4, #8
    9652:	ddd0      	ble.n	95f6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2be>
    9654:	8910      	ldrh	r0, [r2, #8]
    auto p = data_ + field_offset;
    9656:	eb0b 0300 	add.w	r3, fp, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    965a:	2800      	cmp	r0, #0
    965c:	d0ea      	beq.n	9634 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2fc>
    965e:	f85b 0000 	ldr.w	r0, [fp, r0]
    9662:	4403      	add	r3, r0
    9664:	6818      	ldr	r0, [r3, #0]
    9666:	4288      	cmp	r0, r1
    9668:	d911      	bls.n	968e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x356>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    966a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    AllocationInfo* current = &info_[tensor_index];
    966e:	685b      	ldr	r3, [r3, #4]
    9670:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9674:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9678:	2c0a      	cmp	r4, #10
    967a:	dd06      	ble.n	968a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x352>
    967c:	8950      	ldrh	r0, [r2, #10]
    auto p = data_ + field_offset;
    967e:	eb0b 0200 	add.w	r2, fp, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9682:	2800      	cmp	r0, #0
    9684:	d1d8      	bne.n	9638 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x300>
    9686:	462a      	mov	r2, r5
    9688:	e7d9      	b.n	963e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x306>
    968a:	462a      	mov	r2, r5
    968c:	e7d7      	b.n	963e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x306>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    968e:	2c0a      	cmp	r4, #10
    9690:	dd11      	ble.n	96b6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x37e>
    9692:	8952      	ldrh	r2, [r2, #10]
    auto p = data_ + field_offset;
    9694:	eb0a 0302 	add.w	r3, sl, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9698:	b17a      	cbz	r2, 96ba <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x382>
    969a:	f85a 2002 	ldr.w	r2, [sl, r2]
    969e:	4413      	add	r3, r2
  uoffset_t size() const { return EndianScalar(length_); }
    96a0:	681b      	ldr	r3, [r3, #0]
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
    96a2:	1e59      	subs	r1, r3, #1
    96a4:	d40b      	bmi.n	96be <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x386>
    96a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    96aa:	3b01      	subs	r3, #1
    96ac:	009d      	lsls	r5, r3, #2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    96ae:	f04f 0c00 	mov.w	ip, #0
    96b2:	46e0      	mov	r8, ip
    96b4:	e060      	b.n	9778 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x440>
    96b6:	2300      	movs	r3, #0
    96b8:	e7f2      	b.n	96a0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x368>
    96ba:	2300      	movs	r3, #0
    96bc:	e7f0      	b.n	96a0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x368>
  for (size_t i = 0; i < tensor_count_; ++i) {
    96be:	9b04      	ldr	r3, [sp, #16]
    96c0:	2b00      	cmp	r3, #0
    96c2:	f000 8114 	beq.w	98ee <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x5b6>
    96c6:	4631      	mov	r1, r6
    96c8:	2200      	movs	r2, #0
      current->needs_allocating = false;
    96ca:	4615      	mov	r5, r2
    96cc:	9f04      	ldr	r7, [sp, #16]
    96ce:	e076      	b.n	97be <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x486>
    96d0:	4663      	mov	r3, ip
    96d2:	e060      	b.n	9796 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x45e>
    96d4:	4663      	mov	r3, ip
    96d6:	e05e      	b.n	9796 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x45e>
    FLATBUFFERS_ASSERT(i < size());
    96d8:	4ba4      	ldr	r3, [pc, #656]	; (996c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x634>)
    96da:	4aa5      	ldr	r2, [pc, #660]	; (9970 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x638>)
    96dc:	f240 1101 	movw	r1, #257	; 0x101
    96e0:	48a4      	ldr	r0, [pc, #656]	; (9974 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x63c>)
    96e2:	4ca5      	ldr	r4, [pc, #660]	; (9978 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x640>)
    96e4:	47a0      	blx	r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    96e6:	4644      	mov	r4, r8
    96e8:	e00e      	b.n	9708 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3d0>
    96ea:	4644      	mov	r4, r8
    96ec:	e00c      	b.n	9708 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3d0>
        current->last_used = i;
    96ee:	60d9      	str	r1, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    96f0:	3701      	adds	r7, #1
    return data_ - ReadScalar<soffset_t>(data_);
    96f2:	6813      	ldr	r3, [r2, #0]
    96f4:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    96f6:	881c      	ldrh	r4, [r3, #0]
    96f8:	2c06      	cmp	r4, #6
    96fa:	ddf4      	ble.n	96e6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3ae>
    96fc:	88db      	ldrh	r3, [r3, #6]
    auto p = data_ + field_offset;
    96fe:	18d4      	adds	r4, r2, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9700:	2b00      	cmp	r3, #0
    9702:	d0f2      	beq.n	96ea <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3b2>
    9704:	58d3      	ldr	r3, [r2, r3]
    9706:	441c      	add	r4, r3
    9708:	6823      	ldr	r3, [r4, #0]
    970a:	42bb      	cmp	r3, r7
    970c:	d90d      	bls.n	972a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3f2>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    970e:	eb04 0487 	add.w	r4, r4, r7, lsl #2
      AllocationInfo* current = &info_[tensor_index];
    9712:	6863      	ldr	r3, [r4, #4]
    9714:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9718:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
      if (((current->last_used == -1) || (current->last_used < i))) {
    971c:	68dc      	ldr	r4, [r3, #12]
    971e:	f1b4 3fff 	cmp.w	r4, #4294967295
    9722:	d0e4      	beq.n	96ee <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3b6>
    9724:	42a1      	cmp	r1, r4
    9726:	dde3      	ble.n	96f0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3b8>
    9728:	e7e1      	b.n	96ee <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3b6>
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    972a:	2700      	movs	r7, #0
    972c:	e005      	b.n	973a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x402>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    972e:	4644      	mov	r4, r8
    9730:	e00e      	b.n	9750 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x418>
    9732:	4644      	mov	r4, r8
    9734:	e00c      	b.n	9750 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x418>
        current->first_created = i;
    9736:	6099      	str	r1, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    9738:	3701      	adds	r7, #1
    return data_ - ReadScalar<soffset_t>(data_);
    973a:	6813      	ldr	r3, [r2, #0]
    973c:	1ac3      	subs	r3, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    973e:	881c      	ldrh	r4, [r3, #0]
    9740:	2c08      	cmp	r4, #8
    9742:	ddf4      	ble.n	972e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3f6>
    9744:	891b      	ldrh	r3, [r3, #8]
    auto p = data_ + field_offset;
    9746:	18c4      	adds	r4, r0, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9748:	2b00      	cmp	r3, #0
    974a:	d0f2      	beq.n	9732 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3fa>
    974c:	58c3      	ldr	r3, [r0, r3]
    974e:	441c      	add	r4, r3
    9750:	6823      	ldr	r3, [r4, #0]
    9752:	42bb      	cmp	r3, r7
    9754:	d90d      	bls.n	9772 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x43a>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    9756:	eb04 0487 	add.w	r4, r4, r7, lsl #2
      AllocationInfo* current = &info_[tensor_index];
    975a:	6863      	ldr	r3, [r4, #4]
    975c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9760:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
      if ((current->first_created == -1) || (current->first_created > i)) {
    9764:	689c      	ldr	r4, [r3, #8]
    9766:	f1b4 3fff 	cmp.w	r4, #4294967295
    976a:	d0e4      	beq.n	9736 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3fe>
    976c:	42a1      	cmp	r1, r4
    976e:	dae3      	bge.n	9738 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x400>
    9770:	e7e1      	b.n	9736 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3fe>
    9772:	3d04      	subs	r5, #4
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
    9774:	3901      	subs	r1, #1
    9776:	d4a2      	bmi.n	96be <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x386>
    return data_ - ReadScalar<soffset_t>(data_);
    9778:	f8da 3000 	ldr.w	r3, [sl]
    977c:	ebab 0303 	sub.w	r3, fp, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9780:	881a      	ldrh	r2, [r3, #0]
    9782:	2a0a      	cmp	r2, #10
    9784:	dda4      	ble.n	96d0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x398>
    9786:	895a      	ldrh	r2, [r3, #10]
    auto p = data_ + field_offset;
    9788:	eb0b 0302 	add.w	r3, fp, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    978c:	2a00      	cmp	r2, #0
    978e:	d0a1      	beq.n	96d4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x39c>
    9790:	f85b 2002 	ldr.w	r2, [fp, r2]
    9794:	4413      	add	r3, r2
    FLATBUFFERS_ASSERT(i < size());
    9796:	681a      	ldr	r2, [r3, #0]
    9798:	4291      	cmp	r1, r2
    979a:	d29d      	bcs.n	96d8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3a0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    979c:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    979e:	195a      	adds	r2, r3, r5
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    97a0:	595b      	ldr	r3, [r3, r5]
    97a2:	441a      	add	r2, r3
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    97a4:	2700      	movs	r7, #0
    return data_ - ReadScalar<soffset_t>(data_);
    97a6:	4610      	mov	r0, r2
    97a8:	e7a3      	b.n	96f2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3ba>
        (current->first_created == -1) && (current->last_used != -1);
    97aa:	68c8      	ldr	r0, [r1, #12]
    97ac:	f1b0 3fff 	cmp.w	r0, #4294967295
    97b0:	d00e      	beq.n	97d0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x498>
      current->needs_allocating = false;
    97b2:	750d      	strb	r5, [r1, #20]
  for (size_t i = 0; i < tensor_count_; ++i) {
    97b4:	3201      	adds	r2, #1
    97b6:	3118      	adds	r1, #24
    97b8:	4297      	cmp	r7, r2
    97ba:	f000 8098 	beq.w	98ee <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x5b6>
    AllocationInfo* current = &info_[i];
    97be:	460c      	mov	r4, r1
        (current->first_created == -1) && (current->last_used != -1);
    97c0:	688b      	ldr	r3, [r1, #8]
    97c2:	f1b3 3fff 	cmp.w	r3, #4294967295
    97c6:	d0f0      	beq.n	97aa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x472>
        ((current->first_created == -1) || (current->last_used == -1));
    97c8:	68c8      	ldr	r0, [r1, #12]
    97ca:	f1b0 3fff 	cmp.w	r0, #4294967295
    97ce:	d1f1      	bne.n	97b4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x47c>
    if (has_partial_lifetime && current->needs_allocating) {
    97d0:	7d20      	ldrb	r0, [r4, #20]
    97d2:	2800      	cmp	r0, #0
    97d4:	d0ee      	beq.n	97b4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x47c>
      TF_LITE_REPORT_ERROR(
    97d6:	68e1      	ldr	r1, [r4, #12]
    97d8:	9100      	str	r1, [sp, #0]
    97da:	4968      	ldr	r1, [pc, #416]	; (997c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x644>)
    97dc:	9805      	ldr	r0, [sp, #20]
    97de:	4c68      	ldr	r4, [pc, #416]	; (9980 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x648>)
    97e0:	47a0      	blx	r4
    TF_LITE_ENSURE_STATUS(builder.AddTensors(subgraph, offline_planner_offsets,
    97e2:	2401      	movs	r4, #1
    97e4:	e60d      	b.n	9402 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xca>
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    97e6:	9b03      	ldr	r3, [sp, #12]
    97e8:	6898      	ldr	r0, [r3, #8]
    97ea:	4b66      	ldr	r3, [pc, #408]	; (9984 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x64c>)
    97ec:	9301      	str	r3, [sp, #4]
    97ee:	f44f 7369 	mov.w	r3, #932	; 0x3a4
    97f2:	9300      	str	r3, [sp, #0]
    97f4:	4b64      	ldr	r3, [pc, #400]	; (9988 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x650>)
    97f6:	4a65      	ldr	r2, [pc, #404]	; (998c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x654>)
    97f8:	4601      	mov	r1, r0
    97fa:	4c65      	ldr	r4, [pc, #404]	; (9990 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x658>)
    97fc:	47a0      	blx	r4
    97fe:	2401      	movs	r4, #1
    9800:	e5ff      	b.n	9402 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xca>
        TF_LITE_ENSURE_STATUS(
    9802:	68a3      	ldr	r3, [r4, #8]
    9804:	68e1      	ldr	r1, [r4, #12]
    9806:	9100      	str	r1, [sp, #0]
    9808:	9915      	ldr	r1, [sp, #84]	; 0x54
    980a:	688e      	ldr	r6, [r1, #8]
    980c:	4651      	mov	r1, sl
    980e:	a815      	add	r0, sp, #84	; 0x54
    9810:	47b0      	blx	r6
    9812:	2800      	cmp	r0, #0
    9814:	f040 80d0 	bne.w	99b8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x680>
  for (size_t i = 0; i < allocation_info_size; ++i) {
    9818:	3501      	adds	r5, #1
    981a:	3418      	adds	r4, #24
    981c:	42af      	cmp	r7, r5
    981e:	f000 80cd 	beq.w	99bc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x684>
    if (current->needs_allocating) {
    9822:	7d23      	ldrb	r3, [r4, #20]
    9824:	2b00      	cmp	r3, #0
    9826:	d0f7      	beq.n	9818 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4e0>
          AlignSizeUp(current->bytes, kBufferAlignment);
    9828:	4659      	mov	r1, fp
    982a:	6820      	ldr	r0, [r4, #0]
    982c:	47c0      	blx	r8
    982e:	4602      	mov	r2, r0
      if (current->offline_offset == kOnlinePlannedBuffer) {
    9830:	6921      	ldr	r1, [r4, #16]
    9832:	f1b1 3fff 	cmp.w	r1, #4294967295
    9836:	d0e4      	beq.n	9802 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4ca>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
    9838:	68a3      	ldr	r3, [r4, #8]
    983a:	9101      	str	r1, [sp, #4]
    983c:	68e1      	ldr	r1, [r4, #12]
    983e:	9100      	str	r1, [sp, #0]
    9840:	4651      	mov	r1, sl
    9842:	a815      	add	r0, sp, #84	; 0x54
    9844:	47c8      	blx	r9
    9846:	2800      	cmp	r0, #0
    9848:	d0e6      	beq.n	9818 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4e0>
    984a:	4604      	mov	r4, r0
    984c:	e00b      	b.n	9866 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x52e>
      TF_LITE_REPORT_ERROR(
    984e:	9b03      	ldr	r3, [sp, #12]
    9850:	689d      	ldr	r5, [r3, #8]
    9852:	a815      	add	r0, sp, #84	; 0x54
    9854:	4b4f      	ldr	r3, [pc, #316]	; (9994 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x65c>)
    9856:	4798      	blx	r3
    9858:	4623      	mov	r3, r4
    985a:	4602      	mov	r2, r0
    985c:	494e      	ldr	r1, [pc, #312]	; (9998 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x660>)
    985e:	4628      	mov	r0, r5
    9860:	4c47      	ldr	r4, [pc, #284]	; (9980 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x648>)
    9862:	47a0      	blx	r4
      return kTfLiteError;
    9864:	2401      	movs	r4, #1
    TF_LITE_ENSURE_STATUS(
    9866:	a815      	add	r0, sp, #84	; 0x54
    9868:	4b4c      	ldr	r3, [pc, #304]	; (999c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x664>)
    986a:	4798      	blx	r3
    986c:	e5c9      	b.n	9402 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xca>
      TF_LITE_ENSURE_STATUS(
    986e:	4604      	mov	r4, r0
    9870:	e7f9      	b.n	9866 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x52e>
  for (size_t i = 0; i < allocation_info_size; ++i) {
    9872:	3401      	adds	r4, #1
    9874:	3618      	adds	r6, #24
    9876:	9b07      	ldr	r3, [sp, #28]
    9878:	42a3      	cmp	r3, r4
    987a:	f000 80c8 	beq.w	9a0e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x6d6>
    if (current->needs_allocating) {
    987e:	7d33      	ldrb	r3, [r6, #20]
    9880:	2b00      	cmp	r3, #0
    9882:	d0f6      	beq.n	9872 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x53a>
      int offset = -1;
    9884:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
      TF_LITE_ENSURE_STATUS(
    9888:	9b15      	ldr	r3, [sp, #84]	; 0x54
    988a:	f8d3 a014 	ldr.w	sl, [r3, #20]
    988e:	ab0d      	add	r3, sp, #52	; 0x34
    9890:	462a      	mov	r2, r5
    9892:	4659      	mov	r1, fp
    9894:	a815      	add	r0, sp, #84	; 0x54
    9896:	47d0      	blx	sl
    9898:	2800      	cmp	r0, #0
    989a:	d1e8      	bne.n	986e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x536>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
    989c:	6872      	ldr	r2, [r6, #4]
    989e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    98a0:	444b      	add	r3, r9
    98a2:	6013      	str	r3, [r2, #0]
      ++planner_index;
    98a4:	3501      	adds	r5, #1
    98a6:	e7e4      	b.n	9872 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x53a>
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
    98a8:	9b03      	ldr	r3, [sp, #12]
    98aa:	6898      	ldr	r0, [r3, #8]
    98ac:	4b3c      	ldr	r3, [pc, #240]	; (99a0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x668>)
    98ae:	9301      	str	r3, [sp, #4]
    98b0:	f240 33bd 	movw	r3, #957	; 0x3bd
    98b4:	9300      	str	r3, [sp, #0]
    98b6:	4b34      	ldr	r3, [pc, #208]	; (9988 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x650>)
    98b8:	4a34      	ldr	r2, [pc, #208]	; (998c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x654>)
    98ba:	4601      	mov	r1, r0
    98bc:	4c34      	ldr	r4, [pc, #208]	; (9990 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x658>)
    98be:	47a0      	blx	r4
    98c0:	2401      	movs	r4, #1
    98c2:	e7d0      	b.n	9866 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x52e>
    const int32_t* offline_planner_offsets = nullptr;
    98c4:	2300      	movs	r3, #0
    98c6:	9302      	str	r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(builder.AddTensors(subgraph, offline_planner_offsets,
    98c8:	9b08      	ldr	r3, [sp, #32]
    98ca:	689a      	ldr	r2, [r3, #8]
  for (size_t i = 0; i < tensor_count_; ++i) {
    98cc:	9b04      	ldr	r3, [sp, #16]
    98ce:	2b00      	cmp	r3, #0
    98d0:	f43f ae19 	beq.w	9506 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1ce>
    98d4:	3204      	adds	r2, #4
    98d6:	4633      	mov	r3, r6
    98d8:	2100      	movs	r1, #0
    current->first_created = -1;
    98da:	f04f 35ff 	mov.w	r5, #4294967295
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
    98de:	468c      	mov	ip, r1
    98e0:	f8dd e010 	ldr.w	lr, [sp, #16]
    98e4:	9f02      	ldr	r7, [sp, #8]
    98e6:	e653      	b.n	9590 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x258>
    const int32_t* offline_planner_offsets = nullptr;
    98e8:	2300      	movs	r3, #0
    98ea:	9302      	str	r3, [sp, #8]
    98ec:	e7ec      	b.n	98c8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x590>
    TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_handles_));
    98ee:	9b03      	ldr	r3, [sp, #12]
    98f0:	6919      	ldr	r1, [r3, #16]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    98f2:	9a04      	ldr	r2, [sp, #16]
    98f4:	9807      	ldr	r0, [sp, #28]
    98f6:	4282      	cmp	r2, r0
    98f8:	d215      	bcs.n	9926 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x5ee>
    98fa:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    98fe:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    9902:	9a06      	ldr	r2, [sp, #24]
    9904:	4432      	add	r2, r6
    current->needs_allocating = true;
    9906:	2501      	movs	r5, #1
    current->offline_offset = kOnlinePlannedBuffer;
    9908:	f04f 34ff 	mov.w	r4, #4294967295
    current->output_ptr = reinterpret_cast<void**>(&handle->data);
    990c:	6059      	str	r1, [r3, #4]
    current->bytes = handle->bytes;
    990e:	6848      	ldr	r0, [r1, #4]
    9910:	6018      	str	r0, [r3, #0]
    current->first_created = handle->node_idx;
    9912:	6888      	ldr	r0, [r1, #8]
    9914:	6098      	str	r0, [r3, #8]
    current->last_used = handle->node_idx;
    9916:	6888      	ldr	r0, [r1, #8]
    9918:	60d8      	str	r0, [r3, #12]
    current->needs_allocating = true;
    991a:	751d      	strb	r5, [r3, #20]
    current->offline_offset = kOnlinePlannedBuffer;
    991c:	611c      	str	r4, [r3, #16]
    991e:	310c      	adds	r1, #12
    9920:	3318      	adds	r3, #24
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    9922:	4293      	cmp	r3, r2
    9924:	d1f2      	bne.n	990c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x5d4>
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
    9926:	a80e      	add	r0, sp, #56	; 0x38
    9928:	4b1e      	ldr	r3, [pc, #120]	; (99a4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x66c>)
    992a:	4798      	blx	r3
    992c:	4604      	mov	r4, r0
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
    992e:	2201      	movs	r2, #1
    9930:	4601      	mov	r1, r0
    9932:	a80e      	add	r0, sp, #56	; 0x38
    9934:	4b1c      	ldr	r3, [pc, #112]	; (99a8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x670>)
    9936:	4798      	blx	r3
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    9938:	4601      	mov	r1, r0
    993a:	2800      	cmp	r0, #0
    993c:	f43f af53 	beq.w	97e6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4ae>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    9940:	4622      	mov	r2, r4
    9942:	a815      	add	r0, sp, #84	; 0x54
    9944:	4b19      	ldr	r3, [pc, #100]	; (99ac <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x674>)
    9946:	4798      	blx	r3
    TF_LITE_ENSURE_STATUS(
    9948:	9b03      	ldr	r3, [sp, #12]
    994a:	f8d3 a008 	ldr.w	sl, [r3, #8]
  for (size_t i = 0; i < allocation_info_size; ++i) {
    994e:	9b07      	ldr	r3, [sp, #28]
    9950:	2b00      	cmp	r3, #0
    9952:	d04d      	beq.n	99f0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x6b8>
    9954:	4634      	mov	r4, r6
    9956:	2500      	movs	r5, #0
          AlignSizeUp(current->bytes, kBufferAlignment);
    9958:	f04f 0b10 	mov.w	fp, #16
    995c:	f8df 8050 	ldr.w	r8, [pc, #80]	; 99b0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x678>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
    9960:	f8df 9050 	ldr.w	r9, [pc, #80]	; 99b4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x67c>
    9964:	461f      	mov	r7, r3
    9966:	9602      	str	r6, [sp, #8]
    9968:	e75b      	b.n	9822 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4ea>
    996a:	bf00      	nop
    996c:	0002125c 	.word	0x0002125c
    9970:	000229d0 	.word	0x000229d0
    9974:	00021268 	.word	0x00021268
    9978:	00014b4d 	.word	0x00014b4d
    997c:	00022fa4 	.word	0x00022fa4
    9980:	00001265 	.word	0x00001265
    9984:	00023038 	.word	0x00023038
    9988:	00023008 	.word	0x00023008
    998c:	00021304 	.word	0x00021304
    9990:	00001283 	.word	0x00001283
    9994:	00008649 	.word	0x00008649
    9998:	00023054 	.word	0x00023054
    999c:	000082f1 	.word	0x000082f1
    99a0:	000230ac 	.word	0x000230ac
    99a4:	0000a3b5 	.word	0x0000a3b5
    99a8:	0000a269 	.word	0x0000a269
    99ac:	000083a1 	.word	0x000083a1
    99b0:	000081e5 	.word	0x000081e5
    99b4:	000083e1 	.word	0x000083e1
        TF_LITE_ENSURE_STATUS(
    99b8:	4604      	mov	r4, r0
    99ba:	e754      	b.n	9866 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x52e>
    99bc:	9e02      	ldr	r6, [sp, #8]
        memory_allocator_->GetAvailableMemory();
    99be:	9b03      	ldr	r3, [sp, #12]
    99c0:	6858      	ldr	r0, [r3, #4]
    99c2:	4b1e      	ldr	r3, [pc, #120]	; (9a3c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x704>)
    99c4:	4798      	blx	r3
    99c6:	4604      	mov	r4, r0
    if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
    99c8:	a815      	add	r0, sp, #84	; 0x54
    99ca:	4b1d      	ldr	r3, [pc, #116]	; (9a40 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x708>)
    99cc:	4798      	blx	r3
    99ce:	4284      	cmp	r4, r0
    99d0:	f4ff af3d 	bcc.w	984e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x516>
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
    99d4:	9a03      	ldr	r2, [sp, #12]
    99d6:	f8d2 b008 	ldr.w	fp, [r2, #8]
    99da:	6850      	ldr	r0, [r2, #4]
    99dc:	4b19      	ldr	r3, [pc, #100]	; (9a44 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x70c>)
    99de:	4798      	blx	r3
    99e0:	4681      	mov	r9, r0
  for (size_t i = 0; i < allocation_info_size; ++i) {
    99e2:	9b07      	ldr	r3, [sp, #28]
    99e4:	b19b      	cbz	r3, 9a0e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x6d6>
    99e6:	2500      	movs	r5, #0
    99e8:	462c      	mov	r4, r5
      int offset = -1;
    99ea:	f04f 38ff 	mov.w	r8, #4294967295
    99ee:	e746      	b.n	987e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x546>
        memory_allocator_->GetAvailableMemory();
    99f0:	9b03      	ldr	r3, [sp, #12]
    99f2:	6858      	ldr	r0, [r3, #4]
    99f4:	4b11      	ldr	r3, [pc, #68]	; (9a3c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x704>)
    99f6:	4798      	blx	r3
    99f8:	4604      	mov	r4, r0
    if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
    99fa:	a815      	add	r0, sp, #84	; 0x54
    99fc:	4b10      	ldr	r3, [pc, #64]	; (9a40 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x708>)
    99fe:	4798      	blx	r3
    9a00:	4284      	cmp	r4, r0
    9a02:	f4ff af24 	bcc.w	984e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x516>
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
    9a06:	9b03      	ldr	r3, [sp, #12]
    9a08:	6858      	ldr	r0, [r3, #4]
    9a0a:	4b0e      	ldr	r3, [pc, #56]	; (9a44 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x70c>)
    9a0c:	4798      	blx	r3
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
    9a0e:	9b03      	ldr	r3, [sp, #12]
    9a10:	685c      	ldr	r4, [r3, #4]
                                            /*alignment=*/1);
    9a12:	6823      	ldr	r3, [r4, #0]
    9a14:	689d      	ldr	r5, [r3, #8]
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
    9a16:	a815      	add	r0, sp, #84	; 0x54
    9a18:	4b09      	ldr	r3, [pc, #36]	; (9a40 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x708>)
    9a1a:	4798      	blx	r3
                                            /*alignment=*/1);
    9a1c:	2201      	movs	r2, #1
    9a1e:	4601      	mov	r1, r0
    9a20:	4620      	mov	r0, r4
    9a22:	47a8      	blx	r5
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
    9a24:	2800      	cmp	r0, #0
    9a26:	f43f af3f 	beq.w	98a8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x570>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    9a2a:	a815      	add	r0, sp, #84	; 0x54
    9a2c:	4b06      	ldr	r3, [pc, #24]	; (9a48 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x710>)
    9a2e:	4798      	blx	r3
                                        memory_allocator_->GetTail());
    9a30:	a80e      	add	r0, sp, #56	; 0x38
    9a32:	4b06      	ldr	r3, [pc, #24]	; (9a4c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x714>)
    9a34:	4798      	blx	r3
  return kTfLiteOk;
    9a36:	2400      	movs	r4, #0
    9a38:	e4e6      	b.n	9408 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xd0>
    9a3a:	bf00      	nop
    9a3c:	0000a3b5 	.word	0x0000a3b5
    9a40:	00008649 	.word	0x00008649
    9a44:	0000a3ad 	.word	0x0000a3ad
    9a48:	000082f1 	.word	0x000082f1
    9a4c:	0000a261 	.word	0x0000a261

00009a50 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
#include "tensorflow/lite/micro/micro_string.h"
#endif

namespace tflite {

int MicroErrorReporter::Report(const char* format, va_list args) {
    9a50:	b510      	push	{r4, lr}
    9a52:	b0c0      	sub	sp, #256	; 0x100
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
    9a54:	4613      	mov	r3, r2
    9a56:	460a      	mov	r2, r1
    9a58:	f44f 7180 	mov.w	r1, #256	; 0x100
    9a5c:	4668      	mov	r0, sp
    9a5e:	4c05      	ldr	r4, [pc, #20]	; (9a74 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x24>)
    9a60:	47a0      	blx	r4
  DebugLog(log_buffer);
    9a62:	4668      	mov	r0, sp
    9a64:	4c04      	ldr	r4, [pc, #16]	; (9a78 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x28>)
    9a66:	47a0      	blx	r4
  DebugLog("\r\n");
    9a68:	4804      	ldr	r0, [pc, #16]	; (9a7c <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x2c>)
    9a6a:	47a0      	blx	r4
#endif
  return 0;
}
    9a6c:	2000      	movs	r0, #0
    9a6e:	b040      	add	sp, #256	; 0x100
    9a70:	bd10      	pop	{r4, pc}
    9a72:	bf00      	nop
    9a74:	00009f5d 	.word	0x00009f5d
    9a78:	00002111 	.word	0x00002111
    9a7c:	000230e4 	.word	0x000230e4

00009a80 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    9a80:	6943      	ldr	r3, [r0, #20]
    9a82:	2b20      	cmp	r3, #32
    9a84:	d007      	beq.n	9a96 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    9a86:	b2db      	uxtb	r3, r3
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    9a88:	2b7e      	cmp	r3, #126	; 0x7e
  return EnumNamesBuiltinOperator()[index];
    9a8a:	bfda      	itte	le
    9a8c:	4a03      	ldrle	r2, [pc, #12]	; (9a9c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x1c>)
    9a8e:	f852 0023 	ldrle.w	r0, [r2, r3, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    9a92:	4803      	ldrgt	r0, [pc, #12]	; (9aa0 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x20>)
    return registration->custom_name;
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
  }
}
    9a94:	4770      	bx	lr
    return registration->custom_name;
    9a96:	6980      	ldr	r0, [r0, #24]
    9a98:	4770      	bx	lr
    9a9a:	bf00      	nop
    9a9c:	000213d8 	.word	0x000213d8
    9aa0:	0002108c 	.word	0x0002108c

00009aa4 <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextjPPv>:
}  // namespace

namespace internal {

TfLiteStatus ContextHelper::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                     size_t bytes, void** ptr) {
    9aa4:	b508      	push	{r3, lr}
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
      ->allocator_->AllocatePersistentBuffer(bytes, ptr);
    9aa6:	68c3      	ldr	r3, [r0, #12]
    9aa8:	6818      	ldr	r0, [r3, #0]
    9aaa:	4b01      	ldr	r3, [pc, #4]	; (9ab0 <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextjPPv+0xc>)
    9aac:	4798      	blx	r3
}
    9aae:	bd08      	pop	{r3, pc}
    9ab0:	00009069 	.word	0x00009069

00009ab4 <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus ContextHelper::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                        size_t bytes,
                                                        int* buffer_idx) {
    9ab4:	b510      	push	{r4, lr}
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
    9ab6:	68c0      	ldr	r0, [r0, #12]
  return helper->allocator_->RequestScratchBufferInArena(
      helper->current_node_idx_, bytes, buffer_idx);
    9ab8:	4613      	mov	r3, r2
    9aba:	460a      	mov	r2, r1
    9abc:	6881      	ldr	r1, [r0, #8]
    9abe:	6800      	ldr	r0, [r0, #0]
    9ac0:	4c01      	ldr	r4, [pc, #4]	; (9ac8 <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x14>)
    9ac2:	47a0      	blx	r4
}
    9ac4:	bd10      	pop	{r4, pc}
    9ac6:	bf00      	nop
    9ac8:	00009099 	.word	0x00009099

00009acc <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti>:

void* ContextHelper::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
    9acc:	b508      	push	{r3, lr}
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
      ->allocator_->GetScratchBuffer(buffer_idx);
    9ace:	68c3      	ldr	r3, [r0, #12]
    9ad0:	6818      	ldr	r0, [r3, #0]
    9ad2:	4b01      	ldr	r3, [pc, #4]	; (9ad8 <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti+0xc>)
    9ad4:	4798      	blx	r3
}
    9ad6:	bd08      	pop	{r3, pc}
    9ad8:	0000910d 	.word	0x0000910d

00009adc <_ZN6tflite8internal13ContextHelper13ReportOpErrorEP13TfLiteContextPKcz>:

void ContextHelper::ReportOpError(struct TfLiteContext* context,
                                  const char* format, ...) {
    9adc:	b40e      	push	{r1, r2, r3}
    9ade:	b500      	push	{lr}
    9ae0:	b082      	sub	sp, #8
    9ae2:	aa03      	add	r2, sp, #12
    9ae4:	f852 1b04 	ldr.w	r1, [r2], #4
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
    9ae8:	68c3      	ldr	r3, [r0, #12]
  va_list args;
  va_start(args, format);
    9aea:	9201      	str	r2, [sp, #4]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
    9aec:	6858      	ldr	r0, [r3, #4]
    9aee:	6803      	ldr	r3, [r0, #0]
    9af0:	689b      	ldr	r3, [r3, #8]
    9af2:	4798      	blx	r3
  va_end(args);
}
    9af4:	b002      	add	sp, #8
    9af6:	f85d eb04 	ldr.w	lr, [sp], #4
    9afa:	b003      	add	sp, #12
    9afc:	4770      	bx	lr

00009afe <_ZN6tflite16MicroInterpreterD1Ev>:
      initialization_status_(kTfLiteError),
      context_helper_(error_reporter_, &allocator_) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
    9afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b02:	4606      	mov	r6, r0
  if (node_and_registrations_ != nullptr) {
    9b04:	6803      	ldr	r3, [r0, #0]
    9b06:	b333      	cbz	r3, 9b56 <_ZN6tflite16MicroInterpreterD1Ev+0x58>
    9b08:	2500      	movs	r5, #0
    9b0a:	462c      	mov	r4, r5
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9b0c:	46a8      	mov	r8, r5
      const TfLiteRegistration* registration =
          node_and_registrations_[i].registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
        registration->free(&context_, node->user_data);
    9b0e:	f100 0710 	add.w	r7, r0, #16
    9b12:	e005      	b.n	9b20 <_ZN6tflite16MicroInterpreterD1Ev+0x22>
    9b14:	4643      	mov	r3, r8
    9b16:	e00f      	b.n	9b38 <_ZN6tflite16MicroInterpreterD1Ev+0x3a>
    9b18:	4643      	mov	r3, r8
    9b1a:	e00d      	b.n	9b38 <_ZN6tflite16MicroInterpreterD1Ev+0x3a>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    9b1c:	3401      	adds	r4, #1
    9b1e:	3528      	adds	r5, #40	; 0x28
    9b20:	6f32      	ldr	r2, [r6, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    9b22:	6813      	ldr	r3, [r2, #0]
    9b24:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9b26:	8819      	ldrh	r1, [r3, #0]
    9b28:	290a      	cmp	r1, #10
    9b2a:	ddf3      	ble.n	9b14 <_ZN6tflite16MicroInterpreterD1Ev+0x16>
    9b2c:	8959      	ldrh	r1, [r3, #10]
    auto p = data_ + field_offset;
    9b2e:	1853      	adds	r3, r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9b30:	2900      	cmp	r1, #0
    9b32:	d0f1      	beq.n	9b18 <_ZN6tflite16MicroInterpreterD1Ev+0x1a>
    9b34:	5852      	ldr	r2, [r2, r1]
    9b36:	4413      	add	r3, r2
    9b38:	681b      	ldr	r3, [r3, #0]
    9b3a:	429c      	cmp	r4, r3
    9b3c:	d20b      	bcs.n	9b56 <_ZN6tflite16MicroInterpreterD1Ev+0x58>
      TfLiteNode* node = &(node_and_registrations_[i].node);
    9b3e:	6833      	ldr	r3, [r6, #0]
    9b40:	442b      	add	r3, r5
          node_and_registrations_[i].registration;
    9b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      if (registration != nullptr && registration->free != nullptr) {
    9b44:	2a00      	cmp	r2, #0
    9b46:	d0e9      	beq.n	9b1c <_ZN6tflite16MicroInterpreterD1Ev+0x1e>
    9b48:	6852      	ldr	r2, [r2, #4]
    9b4a:	2a00      	cmp	r2, #0
    9b4c:	d0e6      	beq.n	9b1c <_ZN6tflite16MicroInterpreterD1Ev+0x1e>
        registration->free(&context_, node->user_data);
    9b4e:	6919      	ldr	r1, [r3, #16]
    9b50:	4638      	mov	r0, r7
    9b52:	4790      	blx	r2
    9b54:	e7e2      	b.n	9b1c <_ZN6tflite16MicroInterpreterD1Ev+0x1e>
      }
    }
  }
}
    9b56:	4630      	mov	r0, r6
    9b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009b5c <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>:

void MicroInterpreter::Init(tflite::Profiler* profiler) {
    9b5c:	b510      	push	{r4, lr}
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs =
      model_->subgraphs();
    9b5e:	6842      	ldr	r2, [r0, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    9b60:	6813      	ldr	r3, [r2, #0]
    9b62:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9b64:	881c      	ldrh	r4, [r3, #0]
    9b66:	2c08      	cmp	r4, #8
    9b68:	dd10      	ble.n	9b8c <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x30>
    9b6a:	891c      	ldrh	r4, [r3, #8]
    auto p = data_ + field_offset;
    9b6c:	1913      	adds	r3, r2, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9b6e:	b17c      	cbz	r4, 9b90 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x34>
    9b70:	5912      	ldr	r2, [r2, r4]
    9b72:	4413      	add	r3, r2
  if (subgraphs->size() != 1) {
    9b74:	681a      	ldr	r2, [r3, #0]
    9b76:	2a01      	cmp	r2, #1
    9b78:	d00c      	beq.n	9b94 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x38>
    9b7a:	4604      	mov	r4, r0
    TF_LITE_REPORT_ERROR(error_reporter_,
    9b7c:	490d      	ldr	r1, [pc, #52]	; (9bb4 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x58>)
    9b7e:	68c0      	ldr	r0, [r0, #12]
    9b80:	4b0d      	ldr	r3, [pc, #52]	; (9bb8 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x5c>)
    9b82:	4798      	blx	r3
                         "Only 1 subgraph is currently supported.\n");
    initialization_status_ = kTfLiteError;
    9b84:	2301      	movs	r3, #1
    9b86:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
    return;
    9b8a:	bd10      	pop	{r4, pc}
    9b8c:	2300      	movs	r3, #0
    9b8e:	e7f1      	b.n	9b74 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x18>
    9b90:	2300      	movs	r3, #0
    9b92:	e7ef      	b.n	9b74 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x18>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    9b94:	1d1a      	adds	r2, r3, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    9b96:	685b      	ldr	r3, [r3, #4]
    9b98:	4413      	add	r3, r2
  }
  subgraph_ = (*subgraphs)[0];
    9b9a:	6703      	str	r3, [r0, #112]	; 0x70

  context_.impl_ = static_cast<void*>(&context_helper_);
    9b9c:	f100 0374 	add.w	r3, r0, #116	; 0x74
    9ba0:	61c3      	str	r3, [r0, #28]
  context_.ReportError = context_helper_.ReportOpError;
    9ba2:	4b06      	ldr	r3, [pc, #24]	; (9bbc <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x60>)
    9ba4:	6243      	str	r3, [r0, #36]	; 0x24
  context_.recommended_num_threads = 1;
    9ba6:	2301      	movs	r3, #1
    9ba8:	6343      	str	r3, [r0, #52]	; 0x34
  context_.profiler = profiler;
    9baa:	6441      	str	r1, [r0, #68]	; 0x44

  initialization_status_ = kTfLiteOk;
    9bac:	2300      	movs	r3, #0
    9bae:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
    9bb2:	bd10      	pop	{r4, pc}
    9bb4:	00022e44 	.word	0x00022e44
    9bb8:	00001265 	.word	0x00001265
    9bbc:	00009add 	.word	0x00009add

00009bc0 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>:
MicroInterpreter::MicroInterpreter(const Model* model,
    9bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9bc2:	4604      	mov	r4, r0
    9bc4:	461f      	mov	r7, r3
    9bc6:	9e07      	ldr	r6, [sp, #28]
      context_helper_(error_reporter_, &allocator_) {
    9bc8:	2500      	movs	r5, #0
    9bca:	6005      	str	r5, [r0, #0]
    9bcc:	6041      	str	r1, [r0, #4]
    9bce:	6082      	str	r2, [r0, #8]
    9bd0:	60c6      	str	r6, [r0, #12]
    9bd2:	2258      	movs	r2, #88	; 0x58
    9bd4:	4629      	mov	r1, r5
    9bd6:	3010      	adds	r0, #16
    9bd8:	4b0c      	ldr	r3, [pc, #48]	; (9c0c <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0x4c>)
    9bda:	4798      	blx	r3
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
    9bdc:	4632      	mov	r2, r6
    9bde:	9906      	ldr	r1, [sp, #24]
    9be0:	4638      	mov	r0, r7
    9be2:	4b0b      	ldr	r3, [pc, #44]	; (9c10 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0x50>)
    9be4:	4798      	blx	r3
      context_helper_(error_reporter_, &allocator_) {
    9be6:	66a0      	str	r0, [r4, #104]	; 0x68
    9be8:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
    9bec:	2301      	movs	r3, #1
    9bee:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
    9bf2:	68e3      	ldr	r3, [r4, #12]
// Check tensorflow_c_files/common.h for detailed descriptions.
class ContextHelper {
 public:
  explicit ContextHelper(ErrorReporter* error_reporter,
                         MicroAllocator* allocator)
      : allocator_(allocator), error_reporter_(error_reporter) {}
    9bf4:	6760      	str	r0, [r4, #116]	; 0x74
    9bf6:	67a3      	str	r3, [r4, #120]	; 0x78
    9bf8:	f04f 33ff 	mov.w	r3, #4294967295
    9bfc:	67e3      	str	r3, [r4, #124]	; 0x7c
  Init(profiler);
    9bfe:	9908      	ldr	r1, [sp, #32]
    9c00:	4620      	mov	r0, r4
    9c02:	4b04      	ldr	r3, [pc, #16]	; (9c14 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0x54>)
    9c04:	4798      	blx	r3
}
    9c06:	4620      	mov	r0, r4
    9c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9c0a:	bf00      	nop
    9c0c:	00015abd 	.word	0x00015abd
    9c10:	00009021 	.word	0x00009021
    9c14:	00009b5d 	.word	0x00009b5d

00009c18 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
  for (int32_t i = 0; i < size; ++i) {
    data[i] = flatbuffers::EndianScalar(data[i]);
  }
}

TfLiteStatus MicroInterpreter::AllocateTensors() {
    9c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9c1c:	b082      	sub	sp, #8
    9c1e:	4604      	mov	r4, r0
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
    9c20:	f100 0710 	add.w	r7, r0, #16
    9c24:	9000      	str	r0, [sp, #0]
    9c26:	6883      	ldr	r3, [r0, #8]
    9c28:	463a      	mov	r2, r7
    9c2a:	6841      	ldr	r1, [r0, #4]
    9c2c:	6e80      	ldr	r0, [r0, #104]	; 0x68
    9c2e:	4d44      	ldr	r5, [pc, #272]	; (9d40 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x128>)
    9c30:	47a8      	blx	r5
    9c32:	b938      	cbnz	r0, 9c44 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c>
        CorrectTensorEndianness(thisTensor);
    }
  }

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
    9c34:	4b43      	ldr	r3, [pc, #268]	; (9d44 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x12c>)
    9c36:	64a3      	str	r3, [r4, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
    9c38:	2600      	movs	r6, #0
    9c3a:	6526      	str	r6, [r4, #80]	; 0x50
  context_.GetScratchBuffer = nullptr;
    9c3c:	6566      	str	r6, [r4, #84]	; 0x54
    9c3e:	46b0      	mov	r8, r6
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9c40:	46b1      	mov	r9, r6
    9c42:	e01f      	b.n	9c84 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x6c>
    TF_LITE_REPORT_ERROR(error_reporter_,
    9c44:	4940      	ldr	r1, [pc, #256]	; (9d48 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x130>)
    9c46:	68e0      	ldr	r0, [r4, #12]
    9c48:	4b40      	ldr	r3, [pc, #256]	; (9d4c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x134>)
    9c4a:	4798      	blx	r3
    initialization_status_ = kTfLiteError;
    9c4c:	2301      	movs	r3, #1
    9c4e:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
    return kTfLiteError;
    9c52:	e05c      	b.n	9d0e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf6>
    9c54:	5852      	ldr	r2, [r2, r1]
    9c56:	4413      	add	r3, r2

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    9c58:	681b      	ldr	r3, [r3, #0]
    9c5a:	429e      	cmp	r6, r3
    9c5c:	d220      	bcs.n	9ca0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x88>
  static void* GetScratchBuffer(TfLiteContext* ctx, int buffer_idx);

  static void ReportOpError(struct TfLiteContext* context, const char* format,
                            ...);

  void SetNodeIndex(int idx) { current_node_idx_ = idx; }
    9c5e:	67e6      	str	r6, [r4, #124]	; 0x7c
    context_helper_.SetNodeIndex(i);
    auto* node = &(node_and_registrations_[i].node);
    9c60:	6825      	ldr	r5, [r4, #0]
    9c62:	4445      	add	r5, r8
    auto* registration = node_and_registrations_[i].registration;
    9c64:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    size_t init_data_size;
    const char* init_data;
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    9c66:	695a      	ldr	r2, [r3, #20]
    9c68:	2a20      	cmp	r2, #32
      init_data = reinterpret_cast<const char*>(node->custom_initial_data);
    9c6a:	bf07      	ittee	eq
    9c6c:	69a9      	ldreq	r1, [r5, #24]
      init_data_size = node->custom_initial_data_size;
    9c6e:	69ea      	ldreq	r2, [r5, #28]
    } else {
      init_data = reinterpret_cast<const char*>(node->builtin_data);
    9c70:	6969      	ldrne	r1, [r5, #20]
      init_data_size = 0;
    9c72:	464a      	movne	r2, r9
    }
    if (registration->init) {
    9c74:	681b      	ldr	r3, [r3, #0]
    9c76:	b113      	cbz	r3, 9c7e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x66>
      node->user_data =
          registration->init(&context_, init_data, init_data_size);
    9c78:	4638      	mov	r0, r7
    9c7a:	4798      	blx	r3
      node->user_data =
    9c7c:	6128      	str	r0, [r5, #16]
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    9c7e:	3601      	adds	r6, #1
    9c80:	f108 0828 	add.w	r8, r8, #40	; 0x28
    9c84:	6f22      	ldr	r2, [r4, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    9c86:	6813      	ldr	r3, [r2, #0]
    9c88:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c8a:	8819      	ldrh	r1, [r3, #0]
    9c8c:	290a      	cmp	r1, #10
    9c8e:	dd05      	ble.n	9c9c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x84>
    9c90:	8959      	ldrh	r1, [r3, #10]
    auto p = data_ + field_offset;
    9c92:	1853      	adds	r3, r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9c94:	2900      	cmp	r1, #0
    9c96:	d1dd      	bne.n	9c54 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3c>
    9c98:	464b      	mov	r3, r9
    9c9a:	e7dd      	b.n	9c58 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40>
    9c9c:	464b      	mov	r3, r9
    9c9e:	e7db      	b.n	9c58 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40>
    9ca0:	f04f 33ff 	mov.w	r3, #4294967295
    9ca4:	67e3      	str	r3, [r4, #124]	; 0x7c
  }
  context_helper_.SetNodeIndex(-1);

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is available
  // in Prepare stage.
  context_.RequestScratchBufferInArena =
    9ca6:	4b2a      	ldr	r3, [pc, #168]	; (9d50 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x138>)
    9ca8:	6523      	str	r3, [r4, #80]	; 0x50
    9caa:	2600      	movs	r6, #0
      context_helper_.RequestScratchBufferInArena;
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    9cac:	4635      	mov	r5, r6
    9cae:	46b0      	mov	r8, r6
    9cb0:	e012      	b.n	9cd8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xc0>
    9cb2:	5852      	ldr	r2, [r2, r1]
    9cb4:	4413      	add	r3, r2
    9cb6:	681b      	ldr	r3, [r3, #0]
    9cb8:	429d      	cmp	r5, r3
    9cba:	d22c      	bcs.n	9d16 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xfe>
    9cbc:	67e5      	str	r5, [r4, #124]	; 0x7c
    // Set node idx to annotate the lifetime for scratch buffers.
    context_helper_.SetNodeIndex(i);
    auto* node = &(node_and_registrations_[i].node);
    9cbe:	6821      	ldr	r1, [r4, #0]
    9cc0:	4431      	add	r1, r6
    auto* registration = node_and_registrations_[i].registration;
    9cc2:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
    if (registration->prepare) {
    9cc6:	f8d9 3008 	ldr.w	r3, [r9, #8]
    9cca:	b11b      	cbz	r3, 9cd4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xbc>
      TfLiteStatus prepare_status = registration->prepare(&context_, node);
    9ccc:	4638      	mov	r0, r7
    9cce:	4798      	blx	r3
      if (prepare_status != kTfLiteOk) {
    9cd0:	4682      	mov	sl, r0
    9cd2:	b978      	cbnz	r0, 9cf4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xdc>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    9cd4:	3501      	adds	r5, #1
    9cd6:	3628      	adds	r6, #40	; 0x28
    9cd8:	6f22      	ldr	r2, [r4, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    9cda:	6813      	ldr	r3, [r2, #0]
    9cdc:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9cde:	8819      	ldrh	r1, [r3, #0]
    9ce0:	290a      	cmp	r1, #10
    9ce2:	dd05      	ble.n	9cf0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xd8>
    9ce4:	8959      	ldrh	r1, [r3, #10]
    auto p = data_ + field_offset;
    9ce6:	1853      	adds	r3, r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9ce8:	2900      	cmp	r1, #0
    9cea:	d1e2      	bne.n	9cb2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x9a>
    9cec:	4643      	mov	r3, r8
    9cee:	e7e2      	b.n	9cb6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x9e>
    9cf0:	4643      	mov	r3, r8
    9cf2:	e7e0      	b.n	9cb6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x9e>
        TF_LITE_REPORT_ERROR(
    9cf4:	4648      	mov	r0, r9
    9cf6:	4b17      	ldr	r3, [pc, #92]	; (9d54 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x13c>)
    9cf8:	4798      	blx	r3
    9cfa:	68e4      	ldr	r4, [r4, #12]
    9cfc:	f8cd a000 	str.w	sl, [sp]
    9d00:	462b      	mov	r3, r5
    9d02:	4602      	mov	r2, r0
    9d04:	4914      	ldr	r1, [pc, #80]	; (9d58 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x140>)
    9d06:	4620      	mov	r0, r4
    9d08:	4c10      	ldr	r4, [pc, #64]	; (9d4c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x134>)
    9d0a:	47a0      	blx	r4
            error_reporter_,
            "Node %s (number %df) failed to prepare with status %d",
            OpNameFromRegistration(registration), i, prepare_status);
        return kTfLiteError;
    9d0c:	2301      	movs	r3, #1

  TF_LITE_ENSURE_OK(&context_,
                    allocator_.FinishModelAllocation(model_, &context_));
  tensors_allocated_ = true;
  return kTfLiteOk;
}
    9d0e:	4618      	mov	r0, r3
    9d10:	b002      	add	sp, #8
    9d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9d16:	f04f 33ff 	mov.w	r3, #4294967295
    9d1a:	67e3      	str	r3, [r4, #124]	; 0x7c
  context_.AllocatePersistentBuffer = nullptr;
    9d1c:	2300      	movs	r3, #0
    9d1e:	64a3      	str	r3, [r4, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
    9d20:	6523      	str	r3, [r4, #80]	; 0x50
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
    9d22:	4b0e      	ldr	r3, [pc, #56]	; (9d5c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x144>)
    9d24:	6563      	str	r3, [r4, #84]	; 0x54
  TF_LITE_ENSURE_OK(&context_,
    9d26:	463a      	mov	r2, r7
    9d28:	6861      	ldr	r1, [r4, #4]
    9d2a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    9d2c:	4b0c      	ldr	r3, [pc, #48]	; (9d60 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x148>)
    9d2e:	4798      	blx	r3
    9d30:	4603      	mov	r3, r0
    9d32:	2800      	cmp	r0, #0
    9d34:	d1eb      	bne.n	9d0e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf6>
  tensors_allocated_ = true;
    9d36:	2201      	movs	r2, #1
    9d38:	f884 206c 	strb.w	r2, [r4, #108]	; 0x6c
  return kTfLiteOk;
    9d3c:	e7e7      	b.n	9d0e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf6>
    9d3e:	bf00      	nop
    9d40:	0000917d 	.word	0x0000917d
    9d44:	00009aa5 	.word	0x00009aa5
    9d48:	000230e8 	.word	0x000230e8
    9d4c:	00001265 	.word	0x00001265
    9d50:	00009ab5 	.word	0x00009ab5
    9d54:	00009a81 	.word	0x00009a81
    9d58:	0002310c 	.word	0x0002310c
    9d5c:	00009acd 	.word	0x00009acd
    9d60:	00009219 	.word	0x00009219

00009d64 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
    9d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d68:	b087      	sub	sp, #28
    9d6a:	4606      	mov	r6, r0
  if (initialization_status_ != kTfLiteOk) {
    9d6c:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
    9d70:	b94b      	cbnz	r3, 9d86 <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
    return kTfLiteError;
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
    9d72:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    9d76:	b163      	cbz	r3, 9d92 <_ZN6tflite16MicroInterpreter6InvokeEv+0x2e>
TfLiteStatus MicroInterpreter::Invoke() {
    9d78:	f04f 0900 	mov.w	r9, #0
    9d7c:	46c8      	mov	r8, r9
    9d7e:	46ca      	mov	sl, r9
#ifndef NDEBUG  // Omit profiler overhead from release builds.
      // The case where profiler == nullptr is handled by ScopedOperatorProfile.
      tflite::Profiler* profiler =
          reinterpret_cast<tflite::Profiler*>(context_.profiler);
      ScopedOperatorProfile scoped_profiler(
          profiler, OpNameFromRegistration(registration), i);
    9d80:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 9e68 <_ZN6tflite16MicroInterpreter6InvokeEv+0x104>
    9d84:	e02e      	b.n	9de4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x80>
    TF_LITE_REPORT_ERROR(error_reporter_,
    9d86:	4935      	ldr	r1, [pc, #212]	; (9e5c <_ZN6tflite16MicroInterpreter6InvokeEv+0xf8>)
    9d88:	68c0      	ldr	r0, [r0, #12]
    9d8a:	4b35      	ldr	r3, [pc, #212]	; (9e60 <_ZN6tflite16MicroInterpreter6InvokeEv+0xfc>)
    9d8c:	4798      	blx	r3
    return kTfLiteError;
    9d8e:	2501      	movs	r5, #1
    9d90:	e01e      	b.n	9dd0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x6c>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
    9d92:	4b34      	ldr	r3, [pc, #208]	; (9e64 <_ZN6tflite16MicroInterpreter6InvokeEv+0x100>)
    9d94:	4798      	blx	r3
    9d96:	4605      	mov	r5, r0
    9d98:	2800      	cmp	r0, #0
    9d9a:	d0ed      	beq.n	9d78 <_ZN6tflite16MicroInterpreter6InvokeEv+0x14>
    9d9c:	e018      	b.n	9dd0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x6c>
    9d9e:	4653      	mov	r3, sl
    9da0:	e02c      	b.n	9dfc <_ZN6tflite16MicroInterpreter6InvokeEv+0x98>
    9da2:	4653      	mov	r3, sl
    9da4:	e02a      	b.n	9dfc <_ZN6tflite16MicroInterpreter6InvokeEv+0x98>
class ScopedProfile {
 public:
  ScopedProfile(Profiler* profiler, const char* tag,
                Profiler::EventType event_type = Profiler::EventType::DEFAULT,
                int64_t event_metadata = 0)
      : profiler_(profiler), event_handle_(0) {
    9da6:	f8cd a014 	str.w	sl, [sp, #20]
    9daa:	e044      	b.n	9e36 <_ZN6tflite16MicroInterpreter6InvokeEv+0xd2>
#endif
      invoke_status = registration->invoke(&context_, node);

      if (invoke_status == kTfLiteError) {
        TF_LITE_REPORT_ERROR(
    9dac:	4638      	mov	r0, r7
    9dae:	4b2e      	ldr	r3, [pc, #184]	; (9e68 <_ZN6tflite16MicroInterpreter6InvokeEv+0x104>)
    9db0:	4798      	blx	r3
    9db2:	68f6      	ldr	r6, [r6, #12]
    9db4:	2501      	movs	r5, #1
    9db6:	9500      	str	r5, [sp, #0]
    9db8:	4643      	mov	r3, r8
    9dba:	4602      	mov	r2, r0
    9dbc:	492b      	ldr	r1, [pc, #172]	; (9e6c <_ZN6tflite16MicroInterpreter6InvokeEv+0x108>)
    9dbe:	4630      	mov	r0, r6
    9dc0:	4e27      	ldr	r6, [pc, #156]	; (9e60 <_ZN6tflite16MicroInterpreter6InvokeEv+0xfc>)
    9dc2:	47b0      	blx	r6
      event_handle_ = profiler_->BeginEvent(tag, event_type, event_metadata);
    }
  }

  ~ScopedProfile() {
    if (profiler_) {
    9dc4:	b124      	cbz	r4, 9dd0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x6c>
      profiler_->EndEvent(event_handle_);
    9dc6:	6823      	ldr	r3, [r4, #0]
    9dc8:	691b      	ldr	r3, [r3, #16]
    9dca:	9905      	ldr	r1, [sp, #20]
    9dcc:	4620      	mov	r0, r4
    9dce:	4798      	blx	r3
        return invoke_status;
      }
    }
  }
  return kTfLiteOk;
}
    9dd0:	4628      	mov	r0, r5
    9dd2:	b007      	add	sp, #28
    9dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9dd8:	4605      	mov	r5, r0
    9dda:	e7f3      	b.n	9dc4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x60>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    9ddc:	f108 0801 	add.w	r8, r8, #1
    9de0:	f109 0928 	add.w	r9, r9, #40	; 0x28
    9de4:	6f32      	ldr	r2, [r6, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    9de6:	6813      	ldr	r3, [r2, #0]
    9de8:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9dea:	8819      	ldrh	r1, [r3, #0]
    9dec:	290a      	cmp	r1, #10
    9dee:	ddd6      	ble.n	9d9e <_ZN6tflite16MicroInterpreter6InvokeEv+0x3a>
    9df0:	8959      	ldrh	r1, [r3, #10]
    auto p = data_ + field_offset;
    9df2:	1853      	adds	r3, r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9df4:	2900      	cmp	r1, #0
    9df6:	d0d4      	beq.n	9da2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x3e>
    9df8:	5852      	ldr	r2, [r2, r1]
    9dfa:	4413      	add	r3, r2
    9dfc:	681b      	ldr	r3, [r3, #0]
    9dfe:	4598      	cmp	r8, r3
    9e00:	d22a      	bcs.n	9e58 <_ZN6tflite16MicroInterpreter6InvokeEv+0xf4>
    auto* node = &(node_and_registrations_[i].node);
    9e02:	6835      	ldr	r5, [r6, #0]
    9e04:	444d      	add	r5, r9
    auto* registration = node_and_registrations_[i].registration;
    9e06:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    if (registration->invoke) {
    9e08:	68fb      	ldr	r3, [r7, #12]
    9e0a:	2b00      	cmp	r3, #0
    9e0c:	d0e6      	beq.n	9ddc <_ZN6tflite16MicroInterpreter6InvokeEv+0x78>
          reinterpret_cast<tflite::Profiler*>(context_.profiler);
    9e0e:	6c74      	ldr	r4, [r6, #68]	; 0x44
          profiler, OpNameFromRegistration(registration), i);
    9e10:	4638      	mov	r0, r7
    9e12:	47d8      	blx	fp
    if (profiler) {
    9e14:	2c00      	cmp	r4, #0
    9e16:	d0c6      	beq.n	9da6 <_ZN6tflite16MicroInterpreter6InvokeEv+0x42>
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
    9e18:	6823      	ldr	r3, [r4, #0]
    9e1a:	2100      	movs	r1, #0
    9e1c:	2200      	movs	r2, #0
    9e1e:	e9cd 1202 	strd	r1, r2, [sp, #8]

class ScopedOperatorProfile : public ScopedProfile {
 public:
  ScopedOperatorProfile(Profiler* profiler, const char* tag, int node_index)
      : ScopedProfile(profiler, tag, Profiler::EventType::OPERATOR_INVOKE_EVENT,
                      static_cast<uint32_t>(node_index)) {}
    9e22:	f8cd 8000 	str.w	r8, [sp]
    9e26:	f8cd a004 	str.w	sl, [sp, #4]
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
    9e2a:	689b      	ldr	r3, [r3, #8]
    9e2c:	2202      	movs	r2, #2
    9e2e:	4601      	mov	r1, r0
    9e30:	4620      	mov	r0, r4
    9e32:	4798      	blx	r3
    9e34:	9005      	str	r0, [sp, #20]
      invoke_status = registration->invoke(&context_, node);
    9e36:	68fb      	ldr	r3, [r7, #12]
    9e38:	4629      	mov	r1, r5
    9e3a:	f106 0010 	add.w	r0, r6, #16
    9e3e:	4798      	blx	r3
      if (invoke_status == kTfLiteError) {
    9e40:	2801      	cmp	r0, #1
    9e42:	d0b3      	beq.n	9dac <_ZN6tflite16MicroInterpreter6InvokeEv+0x48>
      } else if (invoke_status != kTfLiteOk) {
    9e44:	2800      	cmp	r0, #0
    9e46:	d1c7      	bne.n	9dd8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x74>
    if (profiler_) {
    9e48:	2c00      	cmp	r4, #0
    9e4a:	d0c7      	beq.n	9ddc <_ZN6tflite16MicroInterpreter6InvokeEv+0x78>
      profiler_->EndEvent(event_handle_);
    9e4c:	6823      	ldr	r3, [r4, #0]
    9e4e:	691b      	ldr	r3, [r3, #16]
    9e50:	9905      	ldr	r1, [sp, #20]
    9e52:	4620      	mov	r0, r4
    9e54:	4798      	blx	r3
    9e56:	e7c1      	b.n	9ddc <_ZN6tflite16MicroInterpreter6InvokeEv+0x78>
  return kTfLiteOk;
    9e58:	2500      	movs	r5, #0
    9e5a:	e7b9      	b.n	9dd0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x6c>
    9e5c:	00023144 	.word	0x00023144
    9e60:	00001265 	.word	0x00001265
    9e64:	00009c19 	.word	0x00009c19
    9e68:	00009a81 	.word	0x00009a81
    9e6c:	00023174 	.word	0x00023174

00009e70 <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
    9e70:	b538      	push	{r3, r4, r5, lr}
    }
    return nullptr;
  }

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const { return subgraph_->inputs()->Length(); }
    9e72:	6f05      	ldr	r5, [r0, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    9e74:	682b      	ldr	r3, [r5, #0]
    9e76:	1aeb      	subs	r3, r5, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9e78:	881a      	ldrh	r2, [r3, #0]
    9e7a:	2a06      	cmp	r2, #6
    9e7c:	dd0e      	ble.n	9e9c <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    9e7e:	88db      	ldrh	r3, [r3, #6]
    auto p = data_ + field_offset;
    9e80:	18ec      	adds	r4, r5, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9e82:	b16b      	cbz	r3, 9ea0 <_ZN6tflite16MicroInterpreter5inputEj+0x30>
    9e84:	58ea      	ldr	r2, [r5, r3]
    9e86:	4414      	add	r4, r2
  uoffset_t size() const { return EndianScalar(length_); }
    9e88:	6823      	ldr	r3, [r4, #0]
  const size_t length = inputs_size();
  if ((index < 0) || (index >= length)) {
    9e8a:	4299      	cmp	r1, r3
    9e8c:	d20a      	bcs.n	9ea4 <_ZN6tflite16MicroInterpreter5inputEj+0x34>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    9e8e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
  }
  return &(context_.tensors[inputs().Get(index)]);
    9e92:	6863      	ldr	r3, [r4, #4]
    9e94:	6980      	ldr	r0, [r0, #24]
    9e96:	eb00 1083 	add.w	r0, r0, r3, lsl #6
}
    9e9a:	bd38      	pop	{r3, r4, r5, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9e9c:	2400      	movs	r4, #0
    9e9e:	e7f3      	b.n	9e88 <_ZN6tflite16MicroInterpreter5inputEj+0x18>
    9ea0:	2400      	movs	r4, #0
    9ea2:	e7f1      	b.n	9e88 <_ZN6tflite16MicroInterpreter5inputEj+0x18>
    9ea4:	460a      	mov	r2, r1
    TF_LITE_REPORT_ERROR(error_reporter_,
    9ea6:	4903      	ldr	r1, [pc, #12]	; (9eb4 <_ZN6tflite16MicroInterpreter5inputEj+0x44>)
    9ea8:	68c0      	ldr	r0, [r0, #12]
    9eaa:	4c03      	ldr	r4, [pc, #12]	; (9eb8 <_ZN6tflite16MicroInterpreter5inputEj+0x48>)
    9eac:	47a0      	blx	r4
    return nullptr;
    9eae:	2000      	movs	r0, #0
    9eb0:	bd38      	pop	{r3, r4, r5, pc}
    9eb2:	bf00      	nop
    9eb4:	000231a8 	.word	0x000231a8
    9eb8:	00001265 	.word	0x00001265

00009ebc <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
  char* current = main;
  while (*current != 0) {
    9ebc:	7803      	ldrb	r3, [r0, #0]
    9ebe:	b1bb      	cbz	r3, 9ef0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x34>
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
    9ec0:	b410      	push	{r4}
  while (*current != 0) {
    9ec2:	4603      	mov	r3, r0
    9ec4:	f813 4f01 	ldrb.w	r4, [r3, #1]!
    9ec8:	2c00      	cmp	r4, #0
    9eca:	d1fb      	bne.n	9ec4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x8>
    ++current;
  }
  char* current_end = main + (main_max_length - 1);
    9ecc:	3901      	subs	r1, #1
    9ece:	4408      	add	r0, r1
  while ((*to_append != 0) && (current < current_end)) {
    9ed0:	7811      	ldrb	r1, [r2, #0]
    9ed2:	b141      	cbz	r1, 9ee6 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
    9ed4:	4298      	cmp	r0, r3
    9ed6:	d906      	bls.n	9ee6 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
    *current = *to_append;
    9ed8:	f803 1b01 	strb.w	r1, [r3], #1
  while ((*to_append != 0) && (current < current_end)) {
    9edc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    9ee0:	b109      	cbz	r1, 9ee6 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
    9ee2:	4298      	cmp	r0, r3
    9ee4:	d1f8      	bne.n	9ed8 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x1c>
    ++current;
    ++to_append;
  }
  *current = 0;
    9ee6:	2200      	movs	r2, #0
    9ee8:	701a      	strb	r2, [r3, #0]
  return current;
}
    9eea:	4618      	mov	r0, r3
    9eec:	bc10      	pop	{r4}
    9eee:	4770      	bx	lr
  char* current = main;
    9ef0:	4603      	mov	r3, r0
  char* current_end = main + (main_max_length - 1);
    9ef2:	3901      	subs	r1, #1
    9ef4:	4408      	add	r0, r1
  while ((*to_append != 0) && (current < current_end)) {
    9ef6:	7811      	ldrb	r1, [r2, #0]
    9ef8:	b141      	cbz	r1, 9f0c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    9efa:	4298      	cmp	r0, r3
    9efc:	d906      	bls.n	9f0c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
    9efe:	f803 1b01 	strb.w	r1, [r3], #1
  while ((*to_append != 0) && (current < current_end)) {
    9f02:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    9f06:	b109      	cbz	r1, 9f0c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    9f08:	4298      	cmp	r0, r3
    9f0a:	d1f8      	bne.n	9efe <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x42>
  *current = 0;
    9f0c:	2200      	movs	r2, #0
    9f0e:	701a      	strb	r2, [r3, #0]
}
    9f10:	4618      	mov	r0, r3
    9f12:	4770      	bx	lr

00009f14 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
    9f14:	b430      	push	{r4, r5}
    9f16:	460c      	mov	r4, r1
    9f18:	e000      	b.n	9f1c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x8>
    if (digit < 10) {
      character = '0' + digit;
    } else {
      character = 'a' + (digit - 10);
    }
    *buffer++ = character;
    9f1a:	462c      	mov	r4, r5
    int32_t digit = i % base;
    9f1c:	fbb0 f3f2 	udiv	r3, r0, r2
    9f20:	fb02 0313 	mls	r3, r2, r3, r0
    if (digit < 10) {
    9f24:	2b09      	cmp	r3, #9
      character = '0' + digit;
    9f26:	bfd4      	ite	le
    9f28:	3330      	addle	r3, #48	; 0x30
      character = 'a' + (digit - 10);
    9f2a:	3357      	addgt	r3, #87	; 0x57
    9f2c:	b2db      	uxtb	r3, r3
    *buffer++ = character;
    9f2e:	4625      	mov	r5, r4
    9f30:	f805 3b01 	strb.w	r3, [r5], #1
    i /= base;
    9f34:	fbb0 f0f2 	udiv	r0, r0, r2
  } while (i > 0);
    9f38:	2800      	cmp	r0, #0
    9f3a:	d1ee      	bne.n	9f1a <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x6>
  *buffer = 0;
    9f3c:	2300      	movs	r3, #0
    9f3e:	702b      	strb	r3, [r5, #0]
  while (p1 < p2) {
    9f40:	428c      	cmp	r4, r1
    9f42:	d907      	bls.n	9f54 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x40>
    char tmp = *p1;
    9f44:	780b      	ldrb	r3, [r1, #0]
    *p1++ = *p2;
    9f46:	7822      	ldrb	r2, [r4, #0]
    9f48:	f801 2b01 	strb.w	r2, [r1], #1
    *p2-- = tmp;
    9f4c:	f804 3901 	strb.w	r3, [r4], #-1
  while (p1 < p2) {
    9f50:	42a1      	cmp	r1, r4
    9f52:	d3f7      	bcc.n	9f44 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
  ReverseStringInPlace(start, buffer);
  return buffer;
}
    9f54:	4628      	mov	r0, r5
    9f56:	bc30      	pop	{r4, r5}
    9f58:	4770      	bx	lr
	...

00009f5c <MicroVsnprintf>:
}

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
    9f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f60:	b097      	sub	sp, #92	; 0x5c
    9f62:	4680      	mov	r8, r0
    9f64:	9102      	str	r1, [sp, #8]
    9f66:	4691      	mov	r9, r2
    9f68:	469a      	mov	sl, r3
  int output_index = 0;
  const char* current = format;
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
    9f6a:	f101 3bff 	add.w	fp, r1, #4294967295
  int output_index = 0;
    9f6e:	2400      	movs	r4, #0
  while (*current != '\0' && output_index < usable_length) {
    9f70:	f899 3000 	ldrb.w	r3, [r9]
    9f74:	2b00      	cmp	r3, #0
    9f76:	f000 8158 	beq.w	a22a <MicroVsnprintf+0x2ce>
    9f7a:	455c      	cmp	r4, fp
    9f7c:	f280 8155 	bge.w	a22a <MicroVsnprintf+0x2ce>
    if (*current == '%') {
    9f80:	2b25      	cmp	r3, #37	; 0x25
    9f82:	d005      	beq.n	9f90 <MicroVsnprintf+0x34>
            output[output_index++] = string[string_idx++];
          }
          current++;
      }
    } else {
      output[output_index++] = *current++;
    9f84:	f109 0901 	add.w	r9, r9, #1
    9f88:	f808 3004 	strb.w	r3, [r8, r4]
    9f8c:	3401      	adds	r4, #1
    9f8e:	e7ef      	b.n	9f70 <MicroVsnprintf+0x14>
      switch (*current) {
    9f90:	f899 3001 	ldrb.w	r3, [r9, #1]
    9f94:	2b66      	cmp	r3, #102	; 0x66
    9f96:	d069      	beq.n	a06c <MicroVsnprintf+0x110>
    9f98:	d909      	bls.n	9fae <MicroVsnprintf+0x52>
    9f9a:	2b75      	cmp	r3, #117	; 0x75
    9f9c:	d02d      	beq.n	9ffa <MicroVsnprintf+0x9e>
    9f9e:	2b78      	cmp	r3, #120	; 0x78
    9fa0:	d044      	beq.n	a02c <MicroVsnprintf+0xd0>
    9fa2:	2b73      	cmp	r3, #115	; 0x73
    9fa4:	f000 8126 	beq.w	a1f4 <MicroVsnprintf+0x298>
      current++;
    9fa8:	f109 0901 	add.w	r9, r9, #1
    9fac:	e7e0      	b.n	9f70 <MicroVsnprintf+0x14>
      switch (*current) {
    9fae:	2b25      	cmp	r3, #37	; 0x25
    9fb0:	f000 8119 	beq.w	a1e6 <MicroVsnprintf+0x28a>
    9fb4:	2b64      	cmp	r3, #100	; 0x64
    9fb6:	d1f7      	bne.n	9fa8 <MicroVsnprintf+0x4c>
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    9fb8:	ebab 0304 	sub.w	r3, fp, r4
    9fbc:	2b0a      	cmp	r3, #10
    9fbe:	dd11      	ble.n	9fe4 <MicroVsnprintf+0x88>
              FormatInt32(&output[output_index], va_arg(args, int32_t));
    9fc0:	eb08 0504 	add.w	r5, r8, r4
    9fc4:	f10a 0604 	add.w	r6, sl, #4
    9fc8:	f8da 0000 	ldr.w	r0, [sl]
  if (i < 0) {
    9fcc:	2800      	cmp	r0, #0
    9fce:	db0e      	blt.n	9fee <MicroVsnprintf+0x92>
    9fd0:	4629      	mov	r1, r5
  return FastUInt32ToBufferLeft(u, buffer, 10);
    9fd2:	220a      	movs	r2, #10
    9fd4:	4b98      	ldr	r3, [pc, #608]	; (a238 <MicroVsnprintf+0x2dc>)
    9fd6:	4798      	blx	r3
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
    9fd8:	1b40      	subs	r0, r0, r5
          output_index +=
    9fda:	4404      	add	r4, r0
          current++;
    9fdc:	f109 0902 	add.w	r9, r9, #2
              FormatInt32(&output[output_index], va_arg(args, int32_t));
    9fe0:	46b2      	mov	sl, r6
          break;
    9fe2:	e7c5      	b.n	9f70 <MicroVsnprintf+0x14>
            output[output_index++] = '\0';
    9fe4:	1c60      	adds	r0, r4, #1
    9fe6:	2300      	movs	r3, #0
    9fe8:	f808 3004 	strb.w	r3, [r8, r4]
            return output_index;
    9fec:	e121      	b.n	a232 <MicroVsnprintf+0x2d6>
    *buffer++ = '-';
    9fee:	1c69      	adds	r1, r5, #1
    9ff0:	232d      	movs	r3, #45	; 0x2d
    9ff2:	f808 3004 	strb.w	r3, [r8, r4]
    u = -u;
    9ff6:	4240      	negs	r0, r0
    9ff8:	e7eb      	b.n	9fd2 <MicroVsnprintf+0x76>
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    9ffa:	ebab 0304 	sub.w	r3, fp, r4
    9ffe:	2b0a      	cmp	r3, #10
    a000:	dd0f      	ble.n	a022 <MicroVsnprintf+0xc6>
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
    a002:	eb08 0504 	add.w	r5, r8, r4
    a006:	f10a 0604 	add.w	r6, sl, #4
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
    a00a:	220a      	movs	r2, #10
    a00c:	4629      	mov	r1, r5
    a00e:	f8da 0000 	ldr.w	r0, [sl]
    a012:	4b89      	ldr	r3, [pc, #548]	; (a238 <MicroVsnprintf+0x2dc>)
    a014:	4798      	blx	r3
    a016:	1b40      	subs	r0, r0, r5
          output_index +=
    a018:	4404      	add	r4, r0
          current++;
    a01a:	f109 0902 	add.w	r9, r9, #2
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
    a01e:	46b2      	mov	sl, r6
          break;
    a020:	e7a6      	b.n	9f70 <MicroVsnprintf+0x14>
            output[output_index++] = '\0';
    a022:	1c60      	adds	r0, r4, #1
    a024:	2300      	movs	r3, #0
    a026:	f808 3004 	strb.w	r3, [r8, r4]
            return output_index;
    a02a:	e102      	b.n	a232 <MicroVsnprintf+0x2d6>
          if (usable_length - output_index < kMaxHexCharsNeeded) {
    a02c:	ebab 0304 	sub.w	r3, fp, r4
    a030:	2b09      	cmp	r3, #9
    a032:	dd16      	ble.n	a062 <MicroVsnprintf+0x106>
          output[output_index++] = '0';
    a034:	2330      	movs	r3, #48	; 0x30
    a036:	f808 3004 	strb.w	r3, [r8, r4]
          output[output_index++] = 'x';
    a03a:	1ca5      	adds	r5, r4, #2
    a03c:	4444      	add	r4, r8
    a03e:	2378      	movs	r3, #120	; 0x78
    a040:	7063      	strb	r3, [r4, #1]
              FormatHex(&output[output_index], va_arg(args, uint32_t));
    a042:	eb08 0405 	add.w	r4, r8, r5
    a046:	f10a 0604 	add.w	r6, sl, #4
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
    a04a:	2210      	movs	r2, #16
    a04c:	4621      	mov	r1, r4
    a04e:	f8da 0000 	ldr.w	r0, [sl]
    a052:	4b79      	ldr	r3, [pc, #484]	; (a238 <MicroVsnprintf+0x2dc>)
    a054:	4798      	blx	r3
    a056:	1b04      	subs	r4, r0, r4
          output_index +=
    a058:	442c      	add	r4, r5
          current++;
    a05a:	f109 0902 	add.w	r9, r9, #2
              FormatHex(&output[output_index], va_arg(args, uint32_t));
    a05e:	46b2      	mov	sl, r6
          break;
    a060:	e786      	b.n	9f70 <MicroVsnprintf+0x14>
            output[output_index++] = '\0';
    a062:	1c60      	adds	r0, r4, #1
    a064:	2300      	movs	r3, #0
    a066:	f808 3004 	strb.w	r3, [r8, r4]
            return output_index;
    a06a:	e0e2      	b.n	a232 <MicroVsnprintf+0x2d6>
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
    a06c:	ebab 0004 	sub.w	r0, fp, r4
    a070:	4b72      	ldr	r3, [pc, #456]	; (a23c <MicroVsnprintf+0x2e0>)
    a072:	4798      	blx	r3
    a074:	4972      	ldr	r1, [pc, #456]	; (a240 <MicroVsnprintf+0x2e4>)
    a076:	4b73      	ldr	r3, [pc, #460]	; (a244 <MicroVsnprintf+0x2e8>)
    a078:	4798      	blx	r3
    a07a:	2800      	cmp	r0, #0
    a07c:	d16c      	bne.n	a158 <MicroVsnprintf+0x1fc>
              FormatFloat(&output[output_index], va_arg(args, double));
    a07e:	eb08 0604 	add.w	r6, r8, r4
    a082:	f10a 0a07 	add.w	sl, sl, #7
    a086:	f02a 0307 	bic.w	r3, sl, #7
    a08a:	f103 0a08 	add.w	sl, r3, #8
  char* current_end = buffer + (kFastToBufferSize - 1);
    a08e:	f106 022f 	add.w	r2, r6, #47	; 0x2f
    a092:	9200      	str	r2, [sp, #0]
              FormatFloat(&output[output_index], va_arg(args, double));
    a094:	e9d3 0100 	ldrd	r0, r1, [r3]
    a098:	4b6b      	ldr	r3, [pc, #428]	; (a248 <MicroVsnprintf+0x2ec>)
    a09a:	4798      	blx	r3
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
    a09c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
    a0a0:	9304      	str	r3, [sp, #16]
    a0a2:	3b7f      	subs	r3, #127	; 0x7f
    a0a4:	9303      	str	r3, [sp, #12]
    a0a6:	9301      	str	r3, [sp, #4]
  const uint32_t fraction = (u & fraction_mask);
    a0a8:	f3c0 0516 	ubfx	r5, r0, #0, #23
  if (u & sign_mask) {
    a0ac:	2800      	cmp	r0, #0
    *current = '-';
    a0ae:	bfbd      	ittte	lt
    a0b0:	232d      	movlt	r3, #45	; 0x2d
    a0b2:	f808 3004 	strblt.w	r3, [r8, r4]
    current += 1;
    a0b6:	f106 0e01 	addlt.w	lr, r6, #1
  char* current = buffer;
    a0ba:	46b6      	movge	lr, r6
  *current = 0;
    a0bc:	2300      	movs	r3, #0
    a0be:	f88e 3000 	strb.w	r3, [lr]
  if (exponent == 128) {
    a0c2:	9b01      	ldr	r3, [sp, #4]
    a0c4:	2b80      	cmp	r3, #128	; 0x80
    a0c6:	d04c      	beq.n	a162 <MicroVsnprintf+0x206>
                                   18, 19, 20, 21, 22, 23};
    a0c8:	4b60      	ldr	r3, [pc, #384]	; (a24c <MicroVsnprintf+0x2f0>)
    a0ca:	af06      	add	r7, sp, #24
    a0cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    a0ce:	c707      	stmia	r7!, {r0, r1, r2}
    a0d0:	703b      	strb	r3, [r7, #0]
    a0d2:	aa06      	add	r2, sp, #24
    a0d4:	f10d 0125 	add.w	r1, sp, #37	; 0x25
  uint32_t scaled_fraction = fraction;
    a0d8:	4628      	mov	r0, r5
    scaled_fraction += (fraction >> scale_shifts[i]);
    a0da:	f912 3b01 	ldrsb.w	r3, [r2], #1
    a0de:	fa25 f303 	lsr.w	r3, r5, r3
    a0e2:	4418      	add	r0, r3
  for (int i = 0; i < scale_shifts_size; ++i) {
    a0e4:	428a      	cmp	r2, r1
    a0e6:	d1f8      	bne.n	a0da <MicroVsnprintf+0x17e>
  *current = '1';
    a0e8:	2331      	movs	r3, #49	; 0x31
    a0ea:	f88e 3000 	strb.w	r3, [lr]
  *current = '.';
    a0ee:	232e      	movs	r3, #46	; 0x2e
    a0f0:	f88e 3001 	strb.w	r3, [lr, #1]
  current += 1;
    a0f4:	f10e 0502 	add.w	r5, lr, #2
  *current = 0;
    a0f8:	2300      	movs	r3, #0
    a0fa:	f88e 3002 	strb.w	r3, [lr, #2]
  if (current_end - current <= kMaxFractionalDigits) {
    a0fe:	9505      	str	r5, [sp, #20]
    a100:	9b00      	ldr	r3, [sp, #0]
    a102:	1b5f      	subs	r7, r3, r5
    a104:	2f07      	cmp	r7, #7
    a106:	dd5f      	ble.n	a1c8 <MicroVsnprintf+0x26c>
    a108:	462b      	mov	r3, r5
    a10a:	f10e 0e08 	add.w	lr, lr, #8
    *(current + i) = '0';
    a10e:	2230      	movs	r2, #48	; 0x30
    a110:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (int i = 1; i < kMaxFractionalDigits; i++) {
    a114:	4573      	cmp	r3, lr
    a116:	d1fb      	bne.n	a110 <MicroVsnprintf+0x1b4>
  FastUInt32ToBufferLeft(number, number_string, base);
    a118:	220a      	movs	r2, #10
    a11a:	a90a      	add	r1, sp, #40	; 0x28
    a11c:	4b46      	ldr	r3, [pc, #280]	; (a238 <MicroVsnprintf+0x2dc>)
    a11e:	4798      	blx	r3
  return StrCatStr(main, main_max_length, number_string);
    a120:	aa0a      	add	r2, sp, #40	; 0x28
    a122:	4639      	mov	r1, r7
    a124:	4628      	mov	r0, r5
    a126:	4b4a      	ldr	r3, [pc, #296]	; (a250 <MicroVsnprintf+0x2f4>)
    a128:	4798      	blx	r3
  int fraction_digits = current - previous;
    a12a:	9b05      	ldr	r3, [sp, #20]
    a12c:	1ac1      	subs	r1, r0, r3
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
    a12e:	f1c1 0207 	rsb	r2, r1, #7
  *current = '0';
    a132:	2330      	movs	r3, #48	; 0x30
    a134:	7003      	strb	r3, [r0, #0]
  for (int i = 0; i < fraction_digits; i++) {
    a136:	2900      	cmp	r1, #0
    a138:	dd0c      	ble.n	a154 <MicroVsnprintf+0x1f8>
    a13a:	4603      	mov	r3, r0
    a13c:	4402      	add	r2, r0
    a13e:	1a40      	subs	r0, r0, r1
    a140:	4686      	mov	lr, r0
    *current = '0';
    a142:	2730      	movs	r7, #48	; 0x30
    *(current + leading_zeros) = *current;
    a144:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    a148:	f802 1d01 	strb.w	r1, [r2, #-1]!
    *current = '0';
    a14c:	f803 7d01 	strb.w	r7, [r3, #-1]!
  for (int i = 0; i < fraction_digits; i++) {
    a150:	4573      	cmp	r3, lr
    a152:	d1f7      	bne.n	a144 <MicroVsnprintf+0x1e8>
  current += kMaxFractionalDigits;
    a154:	1dc1      	adds	r1, r0, #7
    a156:	e018      	b.n	a18a <MicroVsnprintf+0x22e>
            output[output_index++] = '\0';
    a158:	1c60      	adds	r0, r4, #1
    a15a:	2300      	movs	r3, #0
    a15c:	f808 3004 	strb.w	r3, [r8, r4]
            return output_index;
    a160:	e067      	b.n	a232 <MicroVsnprintf+0x2d6>
    if (fraction == 0) {
    a162:	b945      	cbnz	r5, a176 <MicroVsnprintf+0x21a>
      current = StrCatStr(current, (current_end - current), "Inf");
    a164:	4a3b      	ldr	r2, [pc, #236]	; (a254 <MicroVsnprintf+0x2f8>)
    a166:	9b00      	ldr	r3, [sp, #0]
    a168:	eba3 010e 	sub.w	r1, r3, lr
    a16c:	4670      	mov	r0, lr
    a16e:	4b38      	ldr	r3, [pc, #224]	; (a250 <MicroVsnprintf+0x2f4>)
    a170:	4798      	blx	r3
    a172:	4605      	mov	r5, r0
    a174:	e028      	b.n	a1c8 <MicroVsnprintf+0x26c>
      current = StrCatStr(current, (current_end - current), "NaN");
    a176:	4a38      	ldr	r2, [pc, #224]	; (a258 <MicroVsnprintf+0x2fc>)
    a178:	9b00      	ldr	r3, [sp, #0]
    a17a:	eba3 010e 	sub.w	r1, r3, lr
    a17e:	4670      	mov	r0, lr
    a180:	4b33      	ldr	r3, [pc, #204]	; (a250 <MicroVsnprintf+0x2f4>)
    a182:	4798      	blx	r3
    a184:	4605      	mov	r5, r0
    a186:	e01f      	b.n	a1c8 <MicroVsnprintf+0x26c>
  while (*(current - 1) == '0' && (current - 1) > previous) {
    a188:	4619      	mov	r1, r3
    a18a:	4608      	mov	r0, r1
    a18c:	1e4b      	subs	r3, r1, #1
    a18e:	f811 2c01 	ldrb.w	r2, [r1, #-1]
    a192:	2a30      	cmp	r2, #48	; 0x30
    a194:	d101      	bne.n	a19a <MicroVsnprintf+0x23e>
    a196:	429d      	cmp	r5, r3
    a198:	d3f6      	bcc.n	a188 <MicroVsnprintf+0x22c>
  *current = 0;
    a19a:	2300      	movs	r3, #0
    a19c:	7003      	strb	r3, [r0, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
    a19e:	4a2f      	ldr	r2, [pc, #188]	; (a25c <MicroVsnprintf+0x300>)
    a1a0:	9f00      	ldr	r7, [sp, #0]
    a1a2:	1a79      	subs	r1, r7, r1
    a1a4:	4b2a      	ldr	r3, [pc, #168]	; (a250 <MicroVsnprintf+0x2f4>)
    a1a6:	4798      	blx	r3
    a1a8:	4605      	mov	r5, r0
  current = StrCatInt32(current, (current_end - current), exponent);
    a1aa:	1a3f      	subs	r7, r7, r0
  if (i < 0) {
    a1ac:	9b01      	ldr	r3, [sp, #4]
    a1ae:	2b00      	cmp	r3, #0
    a1b0:	db0f      	blt.n	a1d2 <MicroVsnprintf+0x276>
    a1b2:	a90a      	add	r1, sp, #40	; 0x28
  return FastUInt32ToBufferLeft(u, buffer, 10);
    a1b4:	220a      	movs	r2, #10
    a1b6:	9803      	ldr	r0, [sp, #12]
    a1b8:	4b1f      	ldr	r3, [pc, #124]	; (a238 <MicroVsnprintf+0x2dc>)
    a1ba:	4798      	blx	r3
  return StrCatStr(main, main_max_length, number_string);
    a1bc:	aa0a      	add	r2, sp, #40	; 0x28
    a1be:	4639      	mov	r1, r7
    a1c0:	4628      	mov	r0, r5
    a1c2:	4b23      	ldr	r3, [pc, #140]	; (a250 <MicroVsnprintf+0x2f4>)
    a1c4:	4798      	blx	r3
    a1c6:	4605      	mov	r5, r0
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
    a1c8:	1bad      	subs	r5, r5, r6
          output_index +=
    a1ca:	442c      	add	r4, r5
          current++;
    a1cc:	f109 0902 	add.w	r9, r9, #2
          break;
    a1d0:	e6ce      	b.n	9f70 <MicroVsnprintf+0x14>
    *buffer++ = '-';
    a1d2:	232d      	movs	r3, #45	; 0x2d
    a1d4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    u = -u;
    a1d8:	9b04      	ldr	r3, [sp, #16]
    a1da:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
    a1de:	9303      	str	r3, [sp, #12]
    *buffer++ = '-';
    a1e0:	f10d 0129 	add.w	r1, sp, #41	; 0x29
    a1e4:	e7e6      	b.n	a1b4 <MicroVsnprintf+0x258>
          output[output_index++] = *current++;
    a1e6:	f109 0902 	add.w	r9, r9, #2
    a1ea:	2325      	movs	r3, #37	; 0x25
    a1ec:	f808 3004 	strb.w	r3, [r8, r4]
    a1f0:	3401      	adds	r4, #1
          break;
    a1f2:	e6bd      	b.n	9f70 <MicroVsnprintf+0x14>
          char* string = va_arg(args, char*);
    a1f4:	f10a 0604 	add.w	r6, sl, #4
    a1f8:	f8da 2000 	ldr.w	r2, [sl]
                 string[string_idx] != '\0') {
    a1fc:	7813      	ldrb	r3, [r2, #0]
          while (string_idx + output_index < usable_length &&
    a1fe:	b183      	cbz	r3, a222 <MicroVsnprintf+0x2c6>
    a200:	eb08 0104 	add.w	r1, r8, r4
    a204:	9802      	ldr	r0, [sp, #8]
    a206:	3802      	subs	r0, #2
    a208:	1b05      	subs	r5, r0, r4
    a20a:	1c60      	adds	r0, r4, #1
    a20c:	eb00 0055 	add.w	r0, r0, r5, lsr #1
            output[output_index++] = string[string_idx++];
    a210:	3401      	adds	r4, #1
    a212:	f801 3b01 	strb.w	r3, [r1], #1
          while (string_idx + output_index < usable_length &&
    a216:	4284      	cmp	r4, r0
    a218:	d003      	beq.n	a222 <MicroVsnprintf+0x2c6>
                 string[string_idx] != '\0') {
    a21a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
          while (string_idx + output_index < usable_length &&
    a21e:	2b00      	cmp	r3, #0
    a220:	d1f6      	bne.n	a210 <MicroVsnprintf+0x2b4>
          current++;
    a222:	f109 0902 	add.w	r9, r9, #2
          char* string = va_arg(args, char*);
    a226:	46b2      	mov	sl, r6
    a228:	e6a2      	b.n	9f70 <MicroVsnprintf+0x14>
    }
  }
  output[output_index++] = '\0';
    a22a:	1c60      	adds	r0, r4, #1
    a22c:	2300      	movs	r3, #0
    a22e:	f808 3004 	strb.w	r3, [r8, r4]
  return output_index;
}
    a232:	b017      	add	sp, #92	; 0x5c
    a234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a238:	00009f15 	.word	0x00009f15
    a23c:	00013439 	.word	0x00013439
    a240:	41600000 	.word	0x41600000
    a244:	0001381d 	.word	0x0001381d
    a248:	00013225 	.word	0x00013225
    a24c:	0002325c 	.word	0x0002325c
    a250:	00009ebd 	.word	0x00009ebd
    a254:	0002326c 	.word	0x0002326c
    a258:	00023270 	.word	0x00023270
    a25c:	00023274 	.word	0x00023274

0000a260 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
}

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
    a260:	4770      	bx	lr

0000a262 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:
  }
  temp_ = aligned_result + size;
  return aligned_result;
}

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
    a262:	6903      	ldr	r3, [r0, #16]
    a264:	6183      	str	r3, [r0, #24]
    a266:	4770      	bx	lr

0000a268 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>:
                                                 size_t alignment) {
    a268:	b510      	push	{r4, lr}
    a26a:	4604      	mov	r4, r0
  if (head_ != temp_) {
    a26c:	6900      	ldr	r0, [r0, #16]
    a26e:	69a3      	ldr	r3, [r4, #24]
    a270:	4298      	cmp	r0, r3
    a272:	d106      	bne.n	a282 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x1a>
  uint8_t* ret = AllocateTemp(size, alignment);
    a274:	6823      	ldr	r3, [r4, #0]
    a276:	691b      	ldr	r3, [r3, #16]
    a278:	4620      	mov	r0, r4
    a27a:	4798      	blx	r3
  head_ = temp_;
    a27c:	69a3      	ldr	r3, [r4, #24]
    a27e:	6123      	str	r3, [r4, #16]
}
    a280:	bd10      	pop	{r4, pc}
    TF_LITE_REPORT_ERROR(
    a282:	4903      	ldr	r1, [pc, #12]	; (a290 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x28>)
    a284:	6860      	ldr	r0, [r4, #4]
    a286:	4b03      	ldr	r3, [pc, #12]	; (a294 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x2c>)
    a288:	4798      	blx	r3
    return nullptr;
    a28a:	2000      	movs	r0, #0
    a28c:	bd10      	pop	{r4, pc}
    a28e:	bf00      	nop
    a290:	00023298 	.word	0x00023298
    a294:	00001265 	.word	0x00001265

0000a298 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:
                                                 size_t alignment) {
    a298:	b530      	push	{r4, r5, lr}
    a29a:	b083      	sub	sp, #12
    a29c:	4604      	mov	r4, r0
    a29e:	460d      	mov	r5, r1
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
    a2a0:	6940      	ldr	r0, [r0, #20]
    a2a2:	4611      	mov	r1, r2
    a2a4:	1b40      	subs	r0, r0, r5
    a2a6:	4b09      	ldr	r3, [pc, #36]	; (a2cc <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x34>)
    a2a8:	4798      	blx	r3
  if (aligned_result < head_) {
    a2aa:	6923      	ldr	r3, [r4, #16]
    a2ac:	4298      	cmp	r0, r3
  tail_ = aligned_result;
    a2ae:	bf28      	it	cs
    a2b0:	6160      	strcs	r0, [r4, #20]
  if (aligned_result < head_) {
    a2b2:	d301      	bcc.n	a2b8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x20>
}
    a2b4:	b003      	add	sp, #12
    a2b6:	bd30      	pop	{r4, r5, pc}
    const size_t missing_memory = head_ - aligned_result;
    a2b8:	1a1b      	subs	r3, r3, r0
    TF_LITE_REPORT_ERROR(
    a2ba:	6860      	ldr	r0, [r4, #4]
    a2bc:	9300      	str	r3, [sp, #0]
    a2be:	1aeb      	subs	r3, r5, r3
    a2c0:	462a      	mov	r2, r5
    a2c2:	4903      	ldr	r1, [pc, #12]	; (a2d0 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x38>)
    a2c4:	4c03      	ldr	r4, [pc, #12]	; (a2d4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x3c>)
    a2c6:	47a0      	blx	r4
    return nullptr;
    a2c8:	2000      	movs	r0, #0
    a2ca:	e7f3      	b.n	a2b4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x1c>
    a2cc:	000081db 	.word	0x000081db
    a2d0:	00023308 	.word	0x00023308
    a2d4:	00001265 	.word	0x00001265

0000a2d8 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:
uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
    a2d8:	b530      	push	{r4, r5, lr}
    a2da:	b083      	sub	sp, #12
    a2dc:	4605      	mov	r5, r0
    a2de:	460c      	mov	r4, r1
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
    a2e0:	4611      	mov	r1, r2
    a2e2:	6980      	ldr	r0, [r0, #24]
    a2e4:	4b09      	ldr	r3, [pc, #36]	; (a30c <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x34>)
    a2e6:	4798      	blx	r3
  const size_t available_memory = tail_ - aligned_result;
    a2e8:	696b      	ldr	r3, [r5, #20]
    a2ea:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    a2ec:	42a3      	cmp	r3, r4
    a2ee:	d303      	bcc.n	a2f8 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x20>
  temp_ = aligned_result + size;
    a2f0:	4404      	add	r4, r0
    a2f2:	61ac      	str	r4, [r5, #24]
}
    a2f4:	b003      	add	sp, #12
    a2f6:	bd30      	pop	{r4, r5, pc}
    TF_LITE_REPORT_ERROR(
    a2f8:	6868      	ldr	r0, [r5, #4]
    a2fa:	1ae2      	subs	r2, r4, r3
    a2fc:	9200      	str	r2, [sp, #0]
    a2fe:	4622      	mov	r2, r4
    a300:	4903      	ldr	r1, [pc, #12]	; (a310 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x38>)
    a302:	4c04      	ldr	r4, [pc, #16]	; (a314 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x3c>)
    a304:	47a0      	blx	r4
    return nullptr;
    a306:	2000      	movs	r0, #0
    a308:	e7f4      	b.n	a2f4 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x1c>
    a30a:	bf00      	nop
    a30c:	000081cd 	.word	0x000081cd
    a310:	00023308 	.word	0x00023308
    a314:	00001265 	.word	0x00001265

0000a318 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
    a318:	b510      	push	{r4, lr}
    a31a:	4604      	mov	r4, r0
    a31c:	211c      	movs	r1, #28
    a31e:	4b02      	ldr	r3, [pc, #8]	; (a328 <_ZN6tflite21SimpleMemoryAllocatorD0Ev+0x10>)
    a320:	4798      	blx	r3
    a322:	4620      	mov	r0, r4
    a324:	bd10      	pop	{r4, pc}
    a326:	bf00      	nop
    a328:	0000a45d 	.word	0x0000a45d

0000a32c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
    a32c:	b430      	push	{r4, r5}
      temp_(buffer_head_) {}
    a32e:	4d05      	ldr	r5, [pc, #20]	; (a344 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x18>)
    a330:	6005      	str	r5, [r0, #0]
    a332:	6041      	str	r1, [r0, #4]
    a334:	6082      	str	r2, [r0, #8]
    a336:	60c3      	str	r3, [r0, #12]
    a338:	6102      	str	r2, [r0, #16]
    a33a:	6143      	str	r3, [r0, #20]
    a33c:	6182      	str	r2, [r0, #24]
    a33e:	bc30      	pop	{r4, r5}
    a340:	4770      	bx	lr
    a342:	bf00      	nop
    a344:	00023280 	.word	0x00023280

0000a348 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
    a348:	b500      	push	{lr}
    a34a:	b089      	sub	sp, #36	; 0x24
  TFLITE_DCHECK(error_reporter != nullptr);
    a34c:	b320      	cbz	r0, a398 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x50>
    a34e:	4603      	mov	r3, r0
  TFLITE_DCHECK(buffer_head != nullptr);
    a350:	b321      	cbz	r1, a39c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x54>
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
    a352:	440a      	add	r2, r1
      temp_(buffer_head_) {}
    a354:	4812      	ldr	r0, [pc, #72]	; (a3a0 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x58>)
    a356:	9001      	str	r0, [sp, #4]
    a358:	9302      	str	r3, [sp, #8]
    a35a:	9103      	str	r1, [sp, #12]
    a35c:	9204      	str	r2, [sp, #16]
    a35e:	9105      	str	r1, [sp, #20]
    a360:	9206      	str	r2, [sp, #24]
    a362:	9107      	str	r1, [sp, #28]
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
    a364:	2204      	movs	r2, #4
    a366:	211c      	movs	r1, #28
    a368:	eb0d 0002 	add.w	r0, sp, r2
    a36c:	4b0d      	ldr	r3, [pc, #52]	; (a3a4 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x5c>)
    a36e:	4798      	blx	r3
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
    a370:	4603      	mov	r3, r0
    a372:	b168      	cbz	r0, a390 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x48>
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
    a374:	4a0a      	ldr	r2, [pc, #40]	; (a3a0 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x58>)
    a376:	6002      	str	r2, [r0, #0]
    a378:	9a02      	ldr	r2, [sp, #8]
    a37a:	6042      	str	r2, [r0, #4]
    a37c:	9a03      	ldr	r2, [sp, #12]
    a37e:	6082      	str	r2, [r0, #8]
    a380:	9a04      	ldr	r2, [sp, #16]
    a382:	60c2      	str	r2, [r0, #12]
    a384:	9a05      	ldr	r2, [sp, #20]
    a386:	6102      	str	r2, [r0, #16]
    a388:	9a06      	ldr	r2, [sp, #24]
    a38a:	6142      	str	r2, [r0, #20]
    a38c:	9a07      	ldr	r2, [sp, #28]
    a38e:	6182      	str	r2, [r0, #24]
}
    a390:	4618      	mov	r0, r3
    a392:	b009      	add	sp, #36	; 0x24
    a394:	f85d fb04 	ldr.w	pc, [sp], #4
  TFLITE_DCHECK(error_reporter != nullptr);
    a398:	4b03      	ldr	r3, [pc, #12]	; (a3a8 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x60>)
    a39a:	4798      	blx	r3
  TFLITE_DCHECK(buffer_head != nullptr);
    a39c:	4b02      	ldr	r3, [pc, #8]	; (a3a8 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x60>)
    a39e:	4798      	blx	r3
    a3a0:	00023280 	.word	0x00023280
    a3a4:	0000a299 	.word	0x0000a299
    a3a8:	00014b3d 	.word	0x00014b3d

0000a3ac <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>:

uint8_t* SimpleMemoryAllocator::GetHead() const { return head_; }
    a3ac:	6900      	ldr	r0, [r0, #16]
    a3ae:	4770      	bx	lr

0000a3b0 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>:

uint8_t* SimpleMemoryAllocator::GetTail() const { return tail_; }
    a3b0:	6940      	ldr	r0, [r0, #20]
    a3b2:	4770      	bx	lr

0000a3b4 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>:
size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory() const {
  return tail_ - head_;
    a3b4:	6942      	ldr	r2, [r0, #20]
    a3b6:	6900      	ldr	r0, [r0, #16]
}
    a3b8:	1a10      	subs	r0, r2, r0
    a3ba:	4770      	bx	lr

0000a3bc <TfLiteIntArrayGetSizeInBytes>:
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
    a3bc:	3001      	adds	r0, #1
}
    a3be:	0080      	lsls	r0, r0, #2
    a3c0:	4770      	bx	lr
	...

0000a3c4 <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
    a3c4:	280c      	cmp	r0, #12
    a3c6:	d820      	bhi.n	a40a <TfLiteTypeGetName+0x46>
    a3c8:	e8df f000 	tbb	[pc, r0]
    a3cc:	0d0b0721 	.word	0x0d0b0721
    a3d0:	09131911 	.word	0x09131911
    a3d4:	1d1b0f15 	.word	0x1d1b0f15
    a3d8:	17          	.byte	0x17
    a3d9:	00          	.byte	0x00
    case kTfLiteNoType:
      return "NOTYPE";
    case kTfLiteFloat32:
      return "FLOAT32";
    a3da:	480e      	ldr	r0, [pc, #56]	; (a414 <TfLiteTypeGetName+0x50>)
    a3dc:	4770      	bx	lr
    case kTfLiteInt16:
      return "INT16";
    a3de:	480e      	ldr	r0, [pc, #56]	; (a418 <TfLiteTypeGetName+0x54>)
    a3e0:	4770      	bx	lr
    case kTfLiteInt32:
      return "INT32";
    a3e2:	480e      	ldr	r0, [pc, #56]	; (a41c <TfLiteTypeGetName+0x58>)
    a3e4:	4770      	bx	lr
    case kTfLiteUInt8:
      return "UINT8";
    a3e6:	480e      	ldr	r0, [pc, #56]	; (a420 <TfLiteTypeGetName+0x5c>)
    a3e8:	4770      	bx	lr
    case kTfLiteInt8:
      return "INT8";
    a3ea:	480e      	ldr	r0, [pc, #56]	; (a424 <TfLiteTypeGetName+0x60>)
    a3ec:	4770      	bx	lr
    case kTfLiteInt64:
      return "INT64";
    a3ee:	480e      	ldr	r0, [pc, #56]	; (a428 <TfLiteTypeGetName+0x64>)
    a3f0:	4770      	bx	lr
    case kTfLiteBool:
      return "BOOL";
    a3f2:	480e      	ldr	r0, [pc, #56]	; (a42c <TfLiteTypeGetName+0x68>)
    a3f4:	4770      	bx	lr
    case kTfLiteComplex64:
      return "COMPLEX64";
    a3f6:	480e      	ldr	r0, [pc, #56]	; (a430 <TfLiteTypeGetName+0x6c>)
    a3f8:	4770      	bx	lr
    case kTfLiteComplex128:
      return "COMPLEX128";
    a3fa:	480e      	ldr	r0, [pc, #56]	; (a434 <TfLiteTypeGetName+0x70>)
    a3fc:	4770      	bx	lr
    case kTfLiteString:
      return "STRING";
    a3fe:	480e      	ldr	r0, [pc, #56]	; (a438 <TfLiteTypeGetName+0x74>)
    a400:	4770      	bx	lr
    case kTfLiteFloat16:
      return "FLOAT16";
    a402:	480e      	ldr	r0, [pc, #56]	; (a43c <TfLiteTypeGetName+0x78>)
    a404:	4770      	bx	lr
    case kTfLiteFloat64:
      return "FLOAT64";
    a406:	480e      	ldr	r0, [pc, #56]	; (a440 <TfLiteTypeGetName+0x7c>)
    a408:	4770      	bx	lr
  }
  return "Unknown type";
    a40a:	480e      	ldr	r0, [pc, #56]	; (a444 <TfLiteTypeGetName+0x80>)
    a40c:	4770      	bx	lr
      return "NOTYPE";
    a40e:	480e      	ldr	r0, [pc, #56]	; (a448 <TfLiteTypeGetName+0x84>)
}
    a410:	4770      	bx	lr
    a412:	bf00      	nop
    a414:	00023354 	.word	0x00023354
    a418:	0002335c 	.word	0x0002335c
    a41c:	00023364 	.word	0x00023364
    a420:	0002336c 	.word	0x0002336c
    a424:	00023374 	.word	0x00023374
    a428:	0002337c 	.word	0x0002337c
    a42c:	00023384 	.word	0x00023384
    a430:	0002338c 	.word	0x0002338c
    a434:	00023398 	.word	0x00023398
    a438:	000233a4 	.word	0x000233a4
    a43c:	000233ac 	.word	0x000233ac
    a440:	000233b4 	.word	0x000233b4
    a444:	000233bc 	.word	0x000233bc
    a448:	0002334c 	.word	0x0002334c

0000a44c <__aeabi_atexit>:
    a44c:	460b      	mov	r3, r1
    a44e:	4601      	mov	r1, r0
    a450:	4618      	mov	r0, r3
    a452:	f00a bb99 	b.w	14b88 <__cxa_atexit>
    a456:	bf00      	nop

0000a458 <_ZdlPv>:
    a458:	f00a bede 	b.w	15218 <free>

0000a45c <_ZdlPvj>:
    a45c:	f7ff bffc 	b.w	a458 <_ZdlPv>

0000a460 <_ZdaPv>:
    a460:	f7ff bffa 	b.w	a458 <_ZdlPv>

0000a464 <__cxa_guard_acquire>:
    a464:	b508      	push	{r3, lr}
    a466:	6803      	ldr	r3, [r0, #0]
    a468:	07db      	lsls	r3, r3, #31
    a46a:	d405      	bmi.n	a478 <__cxa_guard_acquire+0x14>
    a46c:	7843      	ldrb	r3, [r0, #1]
    a46e:	b92b      	cbnz	r3, a47c <__cxa_guard_acquire+0x18>
    a470:	2301      	movs	r3, #1
    a472:	7043      	strb	r3, [r0, #1]
    a474:	4618      	mov	r0, r3
    a476:	bd08      	pop	{r3, pc}
    a478:	2000      	movs	r0, #0
    a47a:	bd08      	pop	{r3, pc}
    a47c:	2004      	movs	r0, #4
    a47e:	f000 fc05 	bl	ac8c <__cxa_allocate_exception>
    a482:	4b03      	ldr	r3, [pc, #12]	; (a490 <__cxa_guard_acquire+0x2c>)
    a484:	6003      	str	r3, [r0, #0]
    a486:	4a03      	ldr	r2, [pc, #12]	; (a494 <__cxa_guard_acquire+0x30>)
    a488:	4903      	ldr	r1, [pc, #12]	; (a498 <__cxa_guard_acquire+0x34>)
    a48a:	f001 f92d 	bl	b6e8 <__cxa_throw>
    a48e:	bf00      	nop
    a490:	00023404 	.word	0x00023404
    a494:	0000a4a5 	.word	0x0000a4a5
    a498:	000233cc 	.word	0x000233cc

0000a49c <__cxa_guard_release>:
    a49c:	2301      	movs	r3, #1
    a49e:	6003      	str	r3, [r0, #0]
    a4a0:	4770      	bx	lr
    a4a2:	bf00      	nop

0000a4a4 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>:
    a4a4:	b510      	push	{r4, lr}
    a4a6:	4b03      	ldr	r3, [pc, #12]	; (a4b4 <_ZN9__gnu_cxx20recursive_init_errorD1Ev+0x10>)
    a4a8:	6003      	str	r3, [r0, #0]
    a4aa:	4604      	mov	r4, r0
    a4ac:	f000 fd7a 	bl	afa4 <_ZNSt9exceptionD1Ev>
    a4b0:	4620      	mov	r0, r4
    a4b2:	bd10      	pop	{r4, pc}
    a4b4:	00023404 	.word	0x00023404

0000a4b8 <_ZN9__gnu_cxx20recursive_init_errorD0Ev>:
    a4b8:	b510      	push	{r4, lr}
    a4ba:	4b05      	ldr	r3, [pc, #20]	; (a4d0 <_ZN9__gnu_cxx20recursive_init_errorD0Ev+0x18>)
    a4bc:	6003      	str	r3, [r0, #0]
    a4be:	4604      	mov	r4, r0
    a4c0:	f000 fd70 	bl	afa4 <_ZNSt9exceptionD1Ev>
    a4c4:	4620      	mov	r0, r4
    a4c6:	2104      	movs	r1, #4
    a4c8:	f7ff ffc8 	bl	a45c <_ZdlPvj>
    a4cc:	4620      	mov	r0, r4
    a4ce:	bd10      	pop	{r4, pc}
    a4d0:	00023404 	.word	0x00023404

0000a4d4 <_Znwj>:
    a4d4:	b510      	push	{r4, lr}
    a4d6:	2800      	cmp	r0, #0
    a4d8:	bf14      	ite	ne
    a4da:	4604      	movne	r4, r0
    a4dc:	2401      	moveq	r4, #1
    a4de:	4620      	mov	r0, r4
    a4e0:	f00a fe92 	bl	15208 <malloc>
    a4e4:	b100      	cbz	r0, a4e8 <_Znwj+0x14>
    a4e6:	bd10      	pop	{r4, pc}
    a4e8:	f001 f974 	bl	b7d4 <_ZSt15get_new_handlerv>
    a4ec:	b108      	cbz	r0, a4f2 <_Znwj+0x1e>
    a4ee:	4780      	blx	r0
    a4f0:	e7f5      	b.n	a4de <_Znwj+0xa>
    a4f2:	2004      	movs	r0, #4
    a4f4:	f000 fbca 	bl	ac8c <__cxa_allocate_exception>
    a4f8:	4b02      	ldr	r3, [pc, #8]	; (a504 <_Znwj+0x30>)
    a4fa:	6003      	str	r3, [r0, #0]
    a4fc:	4a02      	ldr	r2, [pc, #8]	; (a508 <_Znwj+0x34>)
    a4fe:	4903      	ldr	r1, [pc, #12]	; (a50c <_Znwj+0x38>)
    a500:	f001 f8f2 	bl	b6e8 <__cxa_throw>
    a504:	00023638 	.word	0x00023638
    a508:	0000aa89 	.word	0x0000aa89
    a50c:	00023614 	.word	0x00023614

0000a510 <_Znaj>:
    a510:	f7ff bfe0 	b.w	a4d4 <_Znwj>

0000a514 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    a514:	b510      	push	{r4, lr}
    a516:	4b03      	ldr	r3, [pc, #12]	; (a524 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
    a518:	6003      	str	r3, [r0, #0]
    a51a:	4604      	mov	r4, r0
    a51c:	f000 faee 	bl	aafc <_ZN10__cxxabiv117__class_type_infoD1Ev>
    a520:	4620      	mov	r0, r4
    a522:	bd10      	pop	{r4, pc}
    a524:	0002344c 	.word	0x0002344c

0000a528 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    a528:	b510      	push	{r4, lr}
    a52a:	4b05      	ldr	r3, [pc, #20]	; (a540 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
    a52c:	6003      	str	r3, [r0, #0]
    a52e:	4604      	mov	r4, r0
    a530:	f000 fae4 	bl	aafc <_ZN10__cxxabiv117__class_type_infoD1Ev>
    a534:	4620      	mov	r0, r4
    a536:	210c      	movs	r1, #12
    a538:	f7ff ff90 	bl	a45c <_ZdlPvj>
    a53c:	4620      	mov	r0, r4
    a53e:	bd10      	pop	{r4, pc}
    a540:	0002344c 	.word	0x0002344c

0000a544 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    a544:	b570      	push	{r4, r5, r6, lr}
    a546:	b082      	sub	sp, #8
    a548:	460d      	mov	r5, r1
    a54a:	9c06      	ldr	r4, [sp, #24]
    a54c:	4294      	cmp	r4, r2
    a54e:	4606      	mov	r6, r0
    a550:	d009      	beq.n	a566 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
    a552:	68b0      	ldr	r0, [r6, #8]
    a554:	6806      	ldr	r6, [r0, #0]
    a556:	9406      	str	r4, [sp, #24]
    a558:	6a34      	ldr	r4, [r6, #32]
    a55a:	4629      	mov	r1, r5
    a55c:	46a4      	mov	ip, r4
    a55e:	b002      	add	sp, #8
    a560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a564:	4760      	bx	ip
    a566:	4619      	mov	r1, r3
    a568:	9201      	str	r2, [sp, #4]
    a56a:	9300      	str	r3, [sp, #0]
    a56c:	f000 f86a 	bl	a644 <_ZNKSt9type_infoeqERKS_>
    a570:	9b00      	ldr	r3, [sp, #0]
    a572:	9a01      	ldr	r2, [sp, #4]
    a574:	2800      	cmp	r0, #0
    a576:	d0ec      	beq.n	a552 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
    a578:	2006      	movs	r0, #6
    a57a:	b002      	add	sp, #8
    a57c:	bd70      	pop	{r4, r5, r6, pc}
    a57e:	bf00      	nop

0000a580 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    a580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a584:	b081      	sub	sp, #4
    a586:	460e      	mov	r6, r1
    a588:	4619      	mov	r1, r3
    a58a:	461f      	mov	r7, r3
    a58c:	4691      	mov	r9, r2
    a58e:	4683      	mov	fp, r0
    a590:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    a592:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    a596:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    a59a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    a59c:	f000 f852 	bl	a644 <_ZNKSt9type_infoeqERKS_>
    a5a0:	b170      	cbz	r0, a5c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
    a5a2:	2e00      	cmp	r6, #0
    a5a4:	602c      	str	r4, [r5, #0]
    a5a6:	f885 9004 	strb.w	r9, [r5, #4]
    a5aa:	db1f      	blt.n	a5ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
    a5ac:	4434      	add	r4, r6
    a5ae:	45a0      	cmp	r8, r4
    a5b0:	bf0c      	ite	eq
    a5b2:	2406      	moveq	r4, #6
    a5b4:	2401      	movne	r4, #1
    a5b6:	71ac      	strb	r4, [r5, #6]
    a5b8:	2000      	movs	r0, #0
    a5ba:	b001      	add	sp, #4
    a5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a5c0:	4544      	cmp	r4, r8
    a5c2:	d018      	beq.n	a5f6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
    a5c4:	f8db 0008 	ldr.w	r0, [fp, #8]
    a5c8:	f8d0 e000 	ldr.w	lr, [r0]
    a5cc:	950d      	str	r5, [sp, #52]	; 0x34
    a5ce:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    a5d2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
    a5d6:	940a      	str	r4, [sp, #40]	; 0x28
    a5d8:	f8de 401c 	ldr.w	r4, [lr, #28]
    a5dc:	463b      	mov	r3, r7
    a5de:	464a      	mov	r2, r9
    a5e0:	4631      	mov	r1, r6
    a5e2:	46a4      	mov	ip, r4
    a5e4:	b001      	add	sp, #4
    a5e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a5ea:	4760      	bx	ip
    a5ec:	3602      	adds	r6, #2
    a5ee:	d1e3      	bne.n	a5b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
    a5f0:	2301      	movs	r3, #1
    a5f2:	71ab      	strb	r3, [r5, #6]
    a5f4:	e7e0      	b.n	a5b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
    a5f6:	4651      	mov	r1, sl
    a5f8:	4658      	mov	r0, fp
    a5fa:	f000 f823 	bl	a644 <_ZNKSt9type_infoeqERKS_>
    a5fe:	2800      	cmp	r0, #0
    a600:	d0e0      	beq.n	a5c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
    a602:	2000      	movs	r0, #0
    a604:	f885 9005 	strb.w	r9, [r5, #5]
    a608:	b001      	add	sp, #4
    a60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a60e:	bf00      	nop

0000a610 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    a610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a614:	4607      	mov	r7, r0
    a616:	460c      	mov	r4, r1
    a618:	4615      	mov	r5, r2
    a61a:	461e      	mov	r6, r3
    a61c:	f000 fa86 	bl	ab2c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    a620:	b108      	cbz	r0, a626 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
    a622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a626:	68b8      	ldr	r0, [r7, #8]
    a628:	6807      	ldr	r7, [r0, #0]
    a62a:	4621      	mov	r1, r4
    a62c:	69bc      	ldr	r4, [r7, #24]
    a62e:	4633      	mov	r3, r6
    a630:	462a      	mov	r2, r5
    a632:	46a4      	mov	ip, r4
    a634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a638:	4760      	bx	ip
    a63a:	bf00      	nop

0000a63c <_ZNSt9type_infoD1Ev>:
    a63c:	4770      	bx	lr
    a63e:	bf00      	nop

0000a640 <_ZNKSt9type_info14__is_pointer_pEv>:
    a640:	2000      	movs	r0, #0
    a642:	4770      	bx	lr

0000a644 <_ZNKSt9type_infoeqERKS_>:
    a644:	4281      	cmp	r1, r0
    a646:	d011      	beq.n	a66c <_ZNKSt9type_infoeqERKS_+0x28>
    a648:	b508      	push	{r3, lr}
    a64a:	6840      	ldr	r0, [r0, #4]
    a64c:	7803      	ldrb	r3, [r0, #0]
    a64e:	2b2a      	cmp	r3, #42	; 0x2a
    a650:	d00a      	beq.n	a668 <_ZNKSt9type_infoeqERKS_+0x24>
    a652:	6849      	ldr	r1, [r1, #4]
    a654:	780b      	ldrb	r3, [r1, #0]
    a656:	2b2a      	cmp	r3, #42	; 0x2a
    a658:	bf08      	it	eq
    a65a:	3101      	addeq	r1, #1
    a65c:	f00b fd54 	bl	16108 <strcmp>
    a660:	fab0 f080 	clz	r0, r0
    a664:	0940      	lsrs	r0, r0, #5
    a666:	bd08      	pop	{r3, pc}
    a668:	2000      	movs	r0, #0
    a66a:	bd08      	pop	{r3, pc}
    a66c:	2001      	movs	r0, #1
    a66e:	4770      	bx	lr

0000a670 <_ZSt19__throw_logic_errorPKc>:
    a670:	b538      	push	{r3, r4, r5, lr}
    a672:	4605      	mov	r5, r0
    a674:	2008      	movs	r0, #8
    a676:	f000 fb09 	bl	ac8c <__cxa_allocate_exception>
    a67a:	4629      	mov	r1, r5
    a67c:	4604      	mov	r4, r0
    a67e:	f001 f8f5 	bl	b86c <_ZNSt11logic_errorC1EPKc>
    a682:	4620      	mov	r0, r4
    a684:	4a04      	ldr	r2, [pc, #16]	; (a698 <_ZSt19__throw_logic_errorPKc+0x28>)
    a686:	4905      	ldr	r1, [pc, #20]	; (a69c <_ZSt19__throw_logic_errorPKc+0x2c>)
    a688:	f001 f82e 	bl	b6e8 <__cxa_throw>
    a68c:	4620      	mov	r0, r4
    a68e:	f000 fb15 	bl	acbc <__cxa_free_exception>
    a692:	f000 fb37 	bl	ad04 <__cxa_end_cleanup>
    a696:	bf00      	nop
    a698:	0000b7e9 	.word	0x0000b7e9
    a69c:	00023764 	.word	0x00023764

0000a6a0 <_ZSt20__throw_length_errorPKc>:
    a6a0:	b538      	push	{r3, r4, r5, lr}
    a6a2:	4605      	mov	r5, r0
    a6a4:	2008      	movs	r0, #8
    a6a6:	f000 faf1 	bl	ac8c <__cxa_allocate_exception>
    a6aa:	4629      	mov	r1, r5
    a6ac:	4604      	mov	r4, r0
    a6ae:	f001 f8f1 	bl	b894 <_ZNSt12length_errorC1EPKc>
    a6b2:	4620      	mov	r0, r4
    a6b4:	4a04      	ldr	r2, [pc, #16]	; (a6c8 <_ZSt20__throw_length_errorPKc+0x28>)
    a6b6:	4905      	ldr	r1, [pc, #20]	; (a6cc <_ZSt20__throw_length_errorPKc+0x2c>)
    a6b8:	f001 f816 	bl	b6e8 <__cxa_throw>
    a6bc:	4620      	mov	r0, r4
    a6be:	f000 fafd 	bl	acbc <__cxa_free_exception>
    a6c2:	f000 fb1f 	bl	ad04 <__cxa_end_cleanup>
    a6c6:	bf00      	nop
    a6c8:	0000b83d 	.word	0x0000b83d
    a6cc:	00023770 	.word	0x00023770

0000a6d0 <_ZNK12_GLOBAL__N_122generic_error_category4nameEv>:
    a6d0:	4800      	ldr	r0, [pc, #0]	; (a6d4 <_ZNK12_GLOBAL__N_122generic_error_category4nameEv+0x4>)
    a6d2:	4770      	bx	lr
    a6d4:	00023490 	.word	0x00023490

0000a6d8 <_ZNK12_GLOBAL__N_121system_error_category4nameEv>:
    a6d8:	4800      	ldr	r0, [pc, #0]	; (a6dc <_ZNK12_GLOBAL__N_121system_error_category4nameEv+0x4>)
    a6da:	4770      	bx	lr
    a6dc:	00023488 	.word	0x00023488

0000a6e0 <_ZNKSt3_V214error_category23default_error_conditionEi>:
    a6e0:	6002      	str	r2, [r0, #0]
    a6e2:	6041      	str	r1, [r0, #4]
    a6e4:	4770      	bx	lr
    a6e6:	bf00      	nop

0000a6e8 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei>:
    a6e8:	684b      	ldr	r3, [r1, #4]
    a6ea:	4283      	cmp	r3, r0
    a6ec:	d001      	beq.n	a6f2 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei+0xa>
    a6ee:	2000      	movs	r0, #0
    a6f0:	4770      	bx	lr
    a6f2:	6808      	ldr	r0, [r1, #0]
    a6f4:	1a80      	subs	r0, r0, r2
    a6f6:	fab0 f080 	clz	r0, r0
    a6fa:	0940      	lsrs	r0, r0, #5
    a6fc:	4770      	bx	lr
    a6fe:	bf00      	nop

0000a700 <_ZN12_GLOBAL__N_121system_error_categoryD1Ev>:
    a700:	4770      	bx	lr
    a702:	bf00      	nop

0000a704 <_ZN12_GLOBAL__N_122generic_error_categoryD1Ev>:
    a704:	4770      	bx	lr
    a706:	bf00      	nop

0000a708 <_ZN12_GLOBAL__N_121system_error_categoryD0Ev>:
    a708:	b510      	push	{r4, lr}
    a70a:	4604      	mov	r4, r0
    a70c:	f7ff fea4 	bl	a458 <_ZdlPv>
    a710:	4620      	mov	r0, r4
    a712:	bd10      	pop	{r4, pc}

0000a714 <_ZN12_GLOBAL__N_122generic_error_categoryD0Ev>:
    a714:	b510      	push	{r4, lr}
    a716:	4604      	mov	r4, r0
    a718:	f7ff fe9e 	bl	a458 <_ZdlPv>
    a71c:	4620      	mov	r0, r4
    a71e:	bd10      	pop	{r4, pc}

0000a720 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei>:
    a720:	b510      	push	{r4, lr}
    a722:	680b      	ldr	r3, [r1, #0]
    a724:	b086      	sub	sp, #24
    a726:	4604      	mov	r4, r0
    a728:	691b      	ldr	r3, [r3, #16]
    a72a:	4668      	mov	r0, sp
    a72c:	4798      	blx	r3
    a72e:	4620      	mov	r0, r4
    a730:	e89d 0006 	ldmia.w	sp, {r1, r2}
    a734:	f001 f8b8 	bl	b8a8 <_ZNSt12__cow_stringC1EPKcj>
    a738:	9800      	ldr	r0, [sp, #0]
    a73a:	ab02      	add	r3, sp, #8
    a73c:	4298      	cmp	r0, r3
    a73e:	d001      	beq.n	a744 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei+0x24>
    a740:	f7ff fe8a 	bl	a458 <_ZdlPv>
    a744:	4620      	mov	r0, r4
    a746:	b006      	add	sp, #24
    a748:	bd10      	pop	{r4, pc}
    a74a:	9800      	ldr	r0, [sp, #0]
    a74c:	ab02      	add	r3, sp, #8
    a74e:	4298      	cmp	r0, r3
    a750:	d001      	beq.n	a756 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei+0x36>
    a752:	f7ff fe81 	bl	a458 <_ZdlPv>
    a756:	f000 fad5 	bl	ad04 <__cxa_end_cleanup>
    a75a:	bf00      	nop

0000a75c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27>:
    a75c:	b570      	push	{r4, r5, r6, lr}
    a75e:	4605      	mov	r5, r0
    a760:	b082      	sub	sp, #8
    a762:	b301      	cbz	r1, a7a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x4a>
    a764:	1a54      	subs	r4, r2, r1
    a766:	2c0f      	cmp	r4, #15
    a768:	460e      	mov	r6, r1
    a76a:	9401      	str	r4, [sp, #4]
    a76c:	d80a      	bhi.n	a784 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x28>
    a76e:	682b      	ldr	r3, [r5, #0]
    a770:	2c01      	cmp	r4, #1
    a772:	4618      	mov	r0, r3
    a774:	d013      	beq.n	a79e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x42>
    a776:	b964      	cbnz	r4, a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x36>
    a778:	9a01      	ldr	r2, [sp, #4]
    a77a:	606a      	str	r2, [r5, #4]
    a77c:	2100      	movs	r1, #0
    a77e:	5499      	strb	r1, [r3, r2]
    a780:	b002      	add	sp, #8
    a782:	bd70      	pop	{r4, r5, r6, pc}
    a784:	2200      	movs	r2, #0
    a786:	a901      	add	r1, sp, #4
    a788:	f000 f956 	bl	aa38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
    a78c:	9b01      	ldr	r3, [sp, #4]
    a78e:	6028      	str	r0, [r5, #0]
    a790:	60ab      	str	r3, [r5, #8]
    a792:	4622      	mov	r2, r4
    a794:	4631      	mov	r1, r6
    a796:	f00b f893 	bl	158c0 <memcpy>
    a79a:	682b      	ldr	r3, [r5, #0]
    a79c:	e7ec      	b.n	a778 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x1c>
    a79e:	7832      	ldrb	r2, [r6, #0]
    a7a0:	701a      	strb	r2, [r3, #0]
    a7a2:	682b      	ldr	r3, [r5, #0]
    a7a4:	e7e8      	b.n	a778 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x1c>
    a7a6:	b112      	cbz	r2, a7ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x52>
    a7a8:	4802      	ldr	r0, [pc, #8]	; (a7b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x58>)
    a7aa:	f7ff ff61 	bl	a670 <_ZSt19__throw_logic_errorPKc>
    a7ae:	9201      	str	r2, [sp, #4]
    a7b0:	6803      	ldr	r3, [r0, #0]
    a7b2:	e7e1      	b.n	a778 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x1c>
    a7b4:	00023498 	.word	0x00023498

0000a7b8 <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei>:
    a7b8:	b538      	push	{r3, r4, r5, lr}
    a7ba:	4604      	mov	r4, r0
    a7bc:	4610      	mov	r0, r2
    a7be:	f00b fff3 	bl	167a8 <strerror>
    a7c2:	f104 0308 	add.w	r3, r4, #8
    a7c6:	6023      	str	r3, [r4, #0]
    a7c8:	4605      	mov	r5, r0
    a7ca:	b140      	cbz	r0, a7de <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei+0x26>
    a7cc:	f00b fff8 	bl	167c0 <strlen>
    a7d0:	4629      	mov	r1, r5
    a7d2:	182a      	adds	r2, r5, r0
    a7d4:	4620      	mov	r0, r4
    a7d6:	f7ff ffc1 	bl	a75c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27>
    a7da:	4620      	mov	r0, r4
    a7dc:	bd38      	pop	{r3, r4, r5, pc}
    a7de:	4620      	mov	r0, r4
    a7e0:	f04f 32ff 	mov.w	r2, #4294967295
    a7e4:	4629      	mov	r1, r5
    a7e6:	f7ff ffb9 	bl	a75c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27>
    a7ea:	4620      	mov	r0, r4
    a7ec:	bd38      	pop	{r3, r4, r5, pc}
    a7ee:	bf00      	nop

0000a7f0 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition>:
    a7f0:	b530      	push	{r4, r5, lr}
    a7f2:	6803      	ldr	r3, [r0, #0]
    a7f4:	4d0c      	ldr	r5, [pc, #48]	; (a828 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x38>)
    a7f6:	695b      	ldr	r3, [r3, #20]
    a7f8:	42ab      	cmp	r3, r5
    a7fa:	b083      	sub	sp, #12
    a7fc:	4614      	mov	r4, r2
    a7fe:	d10c      	bne.n	a81a <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x2a>
    a800:	6863      	ldr	r3, [r4, #4]
    a802:	4283      	cmp	r3, r0
    a804:	d002      	beq.n	a80c <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x1c>
    a806:	2000      	movs	r0, #0
    a808:	b003      	add	sp, #12
    a80a:	bd30      	pop	{r4, r5, pc}
    a80c:	6820      	ldr	r0, [r4, #0]
    a80e:	1a40      	subs	r0, r0, r1
    a810:	fab0 f080 	clz	r0, r0
    a814:	0940      	lsrs	r0, r0, #5
    a816:	b003      	add	sp, #12
    a818:	bd30      	pop	{r4, r5, pc}
    a81a:	460a      	mov	r2, r1
    a81c:	4601      	mov	r1, r0
    a81e:	4668      	mov	r0, sp
    a820:	4798      	blx	r3
    a822:	9900      	ldr	r1, [sp, #0]
    a824:	9801      	ldr	r0, [sp, #4]
    a826:	e7eb      	b.n	a800 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x10>
    a828:	0000a6e1 	.word	0x0000a6e1

0000a82c <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev>:
    a82c:	b510      	push	{r4, lr}
    a82e:	4c06      	ldr	r4, [pc, #24]	; (a848 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x1c>)
    a830:	4906      	ldr	r1, [pc, #24]	; (a84c <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x20>)
    a832:	4807      	ldr	r0, [pc, #28]	; (a850 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x24>)
    a834:	4622      	mov	r2, r4
    a836:	f7ff fe09 	bl	a44c <__aeabi_atexit>
    a83a:	4622      	mov	r2, r4
    a83c:	4905      	ldr	r1, [pc, #20]	; (a854 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x28>)
    a83e:	4806      	ldr	r0, [pc, #24]	; (a858 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x2c>)
    a840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a844:	f7ff be02 	b.w	a44c <__aeabi_atexit>
    a848:	20000000 	.word	0x20000000
    a84c:	0000a705 	.word	0x0000a705
    a850:	20000010 	.word	0x20000010
    a854:	0000a701 	.word	0x0000a701
    a858:	2000000c 	.word	0x2000000c

0000a85c <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
    a85c:	4b13      	ldr	r3, [pc, #76]	; (a8ac <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x50>)
    a85e:	4298      	cmp	r0, r3
    a860:	b510      	push	{r4, lr}
    a862:	d81f      	bhi.n	a8a4 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x48>
    a864:	4288      	cmp	r0, r1
    a866:	4604      	mov	r4, r0
    a868:	d914      	bls.n	a894 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x38>
    a86a:	004a      	lsls	r2, r1, #1
    a86c:	4290      	cmp	r0, r2
    a86e:	bf38      	it	cc
    a870:	4614      	movcc	r4, r2
    a872:	f104 021d 	add.w	r2, r4, #29
    a876:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    a87a:	f104 000d 	add.w	r0, r4, #13
    a87e:	d90b      	bls.n	a898 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x3c>
    a880:	42a1      	cmp	r1, r4
    a882:	d209      	bcs.n	a898 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x3c>
    a884:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
    a888:	f3c2 020b 	ubfx	r2, r2, #0, #12
    a88c:	1aa4      	subs	r4, r4, r2
    a88e:	429c      	cmp	r4, r3
    a890:	bf28      	it	cs
    a892:	461c      	movcs	r4, r3
    a894:	f104 000d 	add.w	r0, r4, #13
    a898:	f7ff fe1c 	bl	a4d4 <_Znwj>
    a89c:	2200      	movs	r2, #0
    a89e:	6044      	str	r4, [r0, #4]
    a8a0:	6082      	str	r2, [r0, #8]
    a8a2:	bd10      	pop	{r4, pc}
    a8a4:	4802      	ldr	r0, [pc, #8]	; (a8b0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x54>)
    a8a6:	f7ff fefb 	bl	a6a0 <_ZSt20__throw_length_errorPKc>
    a8aa:	bf00      	nop
    a8ac:	3ffffffc 	.word	0x3ffffffc
    a8b0:	000235d4 	.word	0x000235d4

0000a8b4 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27>:
    a8b4:	b570      	push	{r4, r5, r6, lr}
    a8b6:	1a0c      	subs	r4, r1, r0
    a8b8:	4606      	mov	r6, r0
    a8ba:	2100      	movs	r1, #0
    a8bc:	4620      	mov	r0, r4
    a8be:	f7ff ffcd 	bl	a85c <_ZNSs4_Rep9_S_createEjjRKSaIcE>
    a8c2:	2c01      	cmp	r4, #1
    a8c4:	4605      	mov	r5, r0
    a8c6:	f100 030c 	add.w	r3, r0, #12
    a8ca:	d005      	beq.n	a8d8 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x24>
    a8cc:	b984      	cbnz	r4, a8f0 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x3c>
    a8ce:	4a0c      	ldr	r2, [pc, #48]	; (a900 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x4c>)
    a8d0:	4295      	cmp	r5, r2
    a8d2:	d106      	bne.n	a8e2 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x2e>
    a8d4:	4618      	mov	r0, r3
    a8d6:	bd70      	pop	{r4, r5, r6, pc}
    a8d8:	7832      	ldrb	r2, [r6, #0]
    a8da:	7302      	strb	r2, [r0, #12]
    a8dc:	4a08      	ldr	r2, [pc, #32]	; (a900 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x4c>)
    a8de:	4295      	cmp	r5, r2
    a8e0:	d0f8      	beq.n	a8d4 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x20>
    a8e2:	1929      	adds	r1, r5, r4
    a8e4:	2200      	movs	r2, #0
    a8e6:	602c      	str	r4, [r5, #0]
    a8e8:	60aa      	str	r2, [r5, #8]
    a8ea:	730a      	strb	r2, [r1, #12]
    a8ec:	4618      	mov	r0, r3
    a8ee:	bd70      	pop	{r4, r5, r6, pc}
    a8f0:	4618      	mov	r0, r3
    a8f2:	4631      	mov	r1, r6
    a8f4:	4622      	mov	r2, r4
    a8f6:	f00a ffe3 	bl	158c0 <memcpy>
    a8fa:	4603      	mov	r3, r0
    a8fc:	e7e7      	b.n	a8ce <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x1a>
    a8fe:	bf00      	nop
    a900:	2000fb60 	.word	0x2000fb60

0000a904 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
    a904:	f7ff bda8 	b.w	a458 <_ZdlPv>

0000a908 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>:
    a908:	4288      	cmp	r0, r1
    a90a:	d002      	beq.n	a912 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0xa>
    a90c:	b118      	cbz	r0, a916 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0xe>
    a90e:	f7ff bfd1 	b.w	a8b4 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27>
    a912:	4804      	ldr	r0, [pc, #16]	; (a924 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x1c>)
    a914:	4770      	bx	lr
    a916:	2900      	cmp	r1, #0
    a918:	d0f9      	beq.n	a90e <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x6>
    a91a:	b508      	push	{r3, lr}
    a91c:	4802      	ldr	r0, [pc, #8]	; (a928 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x20>)
    a91e:	f7ff fea7 	bl	a670 <_ZSt19__throw_logic_errorPKc>
    a922:	bf00      	nop
    a924:	2000fb6c 	.word	0x2000fb6c
    a928:	000235a8 	.word	0x000235a8

0000a92c <_ZNSsC1EPKcjRKSaIcE>:
    a92c:	b538      	push	{r3, r4, r5, lr}
    a92e:	460d      	mov	r5, r1
    a930:	4604      	mov	r4, r0
    a932:	4411      	add	r1, r2
    a934:	4628      	mov	r0, r5
    a936:	461a      	mov	r2, r3
    a938:	f04f 0300 	mov.w	r3, #0
    a93c:	f7ff ffe4 	bl	a908 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
    a940:	6020      	str	r0, [r4, #0]
    a942:	4620      	mov	r0, r4
    a944:	bd38      	pop	{r3, r4, r5, pc}
    a946:	bf00      	nop

0000a948 <_ZNSsC1EPKcRKSaIcE>:
    a948:	b570      	push	{r4, r5, r6, lr}
    a94a:	4605      	mov	r5, r0
    a94c:	4616      	mov	r6, r2
    a94e:	460c      	mov	r4, r1
    a950:	b161      	cbz	r1, a96c <_ZNSsC1EPKcRKSaIcE+0x24>
    a952:	4608      	mov	r0, r1
    a954:	f00b ff34 	bl	167c0 <strlen>
    a958:	1821      	adds	r1, r4, r0
    a95a:	4632      	mov	r2, r6
    a95c:	4620      	mov	r0, r4
    a95e:	f04f 0300 	mov.w	r3, #0
    a962:	f7ff ffd1 	bl	a908 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
    a966:	6028      	str	r0, [r5, #0]
    a968:	4628      	mov	r0, r5
    a96a:	bd70      	pop	{r4, r5, r6, pc}
    a96c:	f04f 31ff 	mov.w	r1, #4294967295
    a970:	e7f3      	b.n	a95a <_ZNSsC1EPKcRKSaIcE+0x12>
    a972:	bf00      	nop

0000a974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
    a974:	4b24      	ldr	r3, [pc, #144]	; (aa08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
    a976:	681a      	ldr	r2, [r3, #0]
    a978:	07d0      	lsls	r0, r2, #31
    a97a:	bf5c      	itt	pl
    a97c:	2201      	movpl	r2, #1
    a97e:	601a      	strpl	r2, [r3, #0]
    a980:	4b22      	ldr	r3, [pc, #136]	; (aa0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
    a982:	681a      	ldr	r2, [r3, #0]
    a984:	07d1      	lsls	r1, r2, #31
    a986:	bf5c      	itt	pl
    a988:	2201      	movpl	r2, #1
    a98a:	601a      	strpl	r2, [r3, #0]
    a98c:	4b20      	ldr	r3, [pc, #128]	; (aa10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
    a98e:	681a      	ldr	r2, [r3, #0]
    a990:	07d2      	lsls	r2, r2, #31
    a992:	bf5c      	itt	pl
    a994:	2201      	movpl	r2, #1
    a996:	601a      	strpl	r2, [r3, #0]
    a998:	4b1e      	ldr	r3, [pc, #120]	; (aa14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
    a99a:	681a      	ldr	r2, [r3, #0]
    a99c:	07d0      	lsls	r0, r2, #31
    a99e:	bf5c      	itt	pl
    a9a0:	2201      	movpl	r2, #1
    a9a2:	601a      	strpl	r2, [r3, #0]
    a9a4:	4b1c      	ldr	r3, [pc, #112]	; (aa18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
    a9a6:	681a      	ldr	r2, [r3, #0]
    a9a8:	07d1      	lsls	r1, r2, #31
    a9aa:	bf5c      	itt	pl
    a9ac:	2201      	movpl	r2, #1
    a9ae:	601a      	strpl	r2, [r3, #0]
    a9b0:	4b1a      	ldr	r3, [pc, #104]	; (aa1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
    a9b2:	681a      	ldr	r2, [r3, #0]
    a9b4:	07d2      	lsls	r2, r2, #31
    a9b6:	bf5c      	itt	pl
    a9b8:	2201      	movpl	r2, #1
    a9ba:	601a      	strpl	r2, [r3, #0]
    a9bc:	4b18      	ldr	r3, [pc, #96]	; (aa20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
    a9be:	681a      	ldr	r2, [r3, #0]
    a9c0:	07d0      	lsls	r0, r2, #31
    a9c2:	bf5c      	itt	pl
    a9c4:	2201      	movpl	r2, #1
    a9c6:	601a      	strpl	r2, [r3, #0]
    a9c8:	4b16      	ldr	r3, [pc, #88]	; (aa24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
    a9ca:	681a      	ldr	r2, [r3, #0]
    a9cc:	07d1      	lsls	r1, r2, #31
    a9ce:	bf5c      	itt	pl
    a9d0:	2201      	movpl	r2, #1
    a9d2:	601a      	strpl	r2, [r3, #0]
    a9d4:	4b14      	ldr	r3, [pc, #80]	; (aa28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
    a9d6:	681a      	ldr	r2, [r3, #0]
    a9d8:	07d2      	lsls	r2, r2, #31
    a9da:	bf5c      	itt	pl
    a9dc:	2201      	movpl	r2, #1
    a9de:	601a      	strpl	r2, [r3, #0]
    a9e0:	4b12      	ldr	r3, [pc, #72]	; (aa2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
    a9e2:	681a      	ldr	r2, [r3, #0]
    a9e4:	07d0      	lsls	r0, r2, #31
    a9e6:	bf5c      	itt	pl
    a9e8:	2201      	movpl	r2, #1
    a9ea:	601a      	strpl	r2, [r3, #0]
    a9ec:	4b10      	ldr	r3, [pc, #64]	; (aa30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
    a9ee:	681a      	ldr	r2, [r3, #0]
    a9f0:	07d1      	lsls	r1, r2, #31
    a9f2:	bf5c      	itt	pl
    a9f4:	2201      	movpl	r2, #1
    a9f6:	601a      	strpl	r2, [r3, #0]
    a9f8:	4b0e      	ldr	r3, [pc, #56]	; (aa34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
    a9fa:	681a      	ldr	r2, [r3, #0]
    a9fc:	07d2      	lsls	r2, r2, #31
    a9fe:	bf5c      	itt	pl
    aa00:	2201      	movpl	r2, #1
    aa02:	601a      	strpl	r2, [r3, #0]
    aa04:	4770      	bx	lr
    aa06:	bf00      	nop
    aa08:	2000fb9c 	.word	0x2000fb9c
    aa0c:	2000fb98 	.word	0x2000fb98
    aa10:	2000fb94 	.word	0x2000fb94
    aa14:	2000fb90 	.word	0x2000fb90
    aa18:	2000fb8c 	.word	0x2000fb8c
    aa1c:	2000fb88 	.word	0x2000fb88
    aa20:	2000fb84 	.word	0x2000fb84
    aa24:	2000fb80 	.word	0x2000fb80
    aa28:	2000fb7c 	.word	0x2000fb7c
    aa2c:	2000fb78 	.word	0x2000fb78
    aa30:	2000fb74 	.word	0x2000fb74
    aa34:	2000fb70 	.word	0x2000fb70

0000aa38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
    aa38:	6808      	ldr	r0, [r1, #0]
    aa3a:	2800      	cmp	r0, #0
    aa3c:	b508      	push	{r3, lr}
    aa3e:	db1a      	blt.n	aa76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x3e>
    aa40:	4290      	cmp	r0, r2
    aa42:	d90a      	bls.n	aa5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
    aa44:	0052      	lsls	r2, r2, #1
    aa46:	4290      	cmp	r0, r2
    aa48:	d207      	bcs.n	aa5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
    aa4a:	2a00      	cmp	r2, #0
    aa4c:	db0a      	blt.n	aa64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
    aa4e:	600a      	str	r2, [r1, #0]
    aa50:	1c50      	adds	r0, r2, #1
    aa52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aa56:	f7ff bd3d 	b.w	a4d4 <_Znwj>
    aa5a:	3001      	adds	r0, #1
    aa5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aa60:	f7ff bd38 	b.w	a4d4 <_Znwj>
    aa64:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    aa68:	600b      	str	r3, [r1, #0]
    aa6a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    aa6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aa72:	f7ff bd2f 	b.w	a4d4 <_Znwj>
    aa76:	4801      	ldr	r0, [pc, #4]	; (aa7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x44>)
    aa78:	f7ff fe12 	bl	a6a0 <_ZSt20__throw_length_errorPKc>
    aa7c:	000235ec 	.word	0x000235ec

0000aa80 <_ZNKSt9bad_alloc4whatEv>:
    aa80:	4800      	ldr	r0, [pc, #0]	; (aa84 <_ZNKSt9bad_alloc4whatEv+0x4>)
    aa82:	4770      	bx	lr
    aa84:	00023604 	.word	0x00023604

0000aa88 <_ZNSt9bad_allocD1Ev>:
    aa88:	b510      	push	{r4, lr}
    aa8a:	4b03      	ldr	r3, [pc, #12]	; (aa98 <_ZNSt9bad_allocD1Ev+0x10>)
    aa8c:	6003      	str	r3, [r0, #0]
    aa8e:	4604      	mov	r4, r0
    aa90:	f000 fa88 	bl	afa4 <_ZNSt9exceptionD1Ev>
    aa94:	4620      	mov	r0, r4
    aa96:	bd10      	pop	{r4, pc}
    aa98:	00023638 	.word	0x00023638

0000aa9c <_ZNSt9bad_allocD0Ev>:
    aa9c:	b510      	push	{r4, lr}
    aa9e:	4b05      	ldr	r3, [pc, #20]	; (aab4 <_ZNSt9bad_allocD0Ev+0x18>)
    aaa0:	6003      	str	r3, [r0, #0]
    aaa2:	4604      	mov	r4, r0
    aaa4:	f000 fa7e 	bl	afa4 <_ZNSt9exceptionD1Ev>
    aaa8:	4620      	mov	r0, r4
    aaaa:	2104      	movs	r1, #4
    aaac:	f7ff fcd6 	bl	a45c <_ZdlPvj>
    aab0:	4620      	mov	r0, r4
    aab2:	bd10      	pop	{r4, pc}
    aab4:	00023638 	.word	0x00023638

0000aab8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    aab8:	b570      	push	{r4, r5, r6, lr}
    aaba:	6803      	ldr	r3, [r0, #0]
    aabc:	b084      	sub	sp, #16
    aabe:	2400      	movs	r4, #0
    aac0:	699e      	ldr	r6, [r3, #24]
    aac2:	9400      	str	r4, [sp, #0]
    aac4:	2310      	movs	r3, #16
    aac6:	4615      	mov	r5, r2
    aac8:	9302      	str	r3, [sp, #8]
    aaca:	6812      	ldr	r2, [r2, #0]
    aacc:	f88d 4004 	strb.w	r4, [sp, #4]
    aad0:	466b      	mov	r3, sp
    aad2:	9403      	str	r4, [sp, #12]
    aad4:	47b0      	blx	r6
    aad6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    aada:	f003 0306 	and.w	r3, r3, #6
    aade:	2b06      	cmp	r3, #6
    aae0:	bf03      	ittte	eq
    aae2:	9b00      	ldreq	r3, [sp, #0]
    aae4:	602b      	streq	r3, [r5, #0]
    aae6:	2001      	moveq	r0, #1
    aae8:	4620      	movne	r0, r4
    aaea:	b004      	add	sp, #16
    aaec:	bd70      	pop	{r4, r5, r6, pc}
    aaee:	bf00      	nop

0000aaf0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    aaf0:	9800      	ldr	r0, [sp, #0]
    aaf2:	4290      	cmp	r0, r2
    aaf4:	bf0c      	ite	eq
    aaf6:	2006      	moveq	r0, #6
    aaf8:	2001      	movne	r0, #1
    aafa:	4770      	bx	lr

0000aafc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    aafc:	b510      	push	{r4, lr}
    aafe:	4b03      	ldr	r3, [pc, #12]	; (ab0c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
    ab00:	6003      	str	r3, [r0, #0]
    ab02:	4604      	mov	r4, r0
    ab04:	f7ff fd9a 	bl	a63c <_ZNSt9type_infoD1Ev>
    ab08:	4620      	mov	r0, r4
    ab0a:	bd10      	pop	{r4, pc}
    ab0c:	0002367c 	.word	0x0002367c

0000ab10 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    ab10:	b510      	push	{r4, lr}
    ab12:	4b05      	ldr	r3, [pc, #20]	; (ab28 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
    ab14:	6003      	str	r3, [r0, #0]
    ab16:	4604      	mov	r4, r0
    ab18:	f7ff fd90 	bl	a63c <_ZNSt9type_infoD1Ev>
    ab1c:	4620      	mov	r0, r4
    ab1e:	2108      	movs	r1, #8
    ab20:	f7ff fc9c 	bl	a45c <_ZdlPvj>
    ab24:	4620      	mov	r0, r4
    ab26:	bd10      	pop	{r4, pc}
    ab28:	0002367c 	.word	0x0002367c

0000ab2c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    ab2c:	b538      	push	{r3, r4, r5, lr}
    ab2e:	4615      	mov	r5, r2
    ab30:	461c      	mov	r4, r3
    ab32:	f7ff fd87 	bl	a644 <_ZNKSt9type_infoeqERKS_>
    ab36:	b120      	cbz	r0, ab42 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
    ab38:	2208      	movs	r2, #8
    ab3a:	2306      	movs	r3, #6
    ab3c:	6025      	str	r5, [r4, #0]
    ab3e:	60e2      	str	r2, [r4, #12]
    ab40:	7123      	strb	r3, [r4, #4]
    ab42:	bd38      	pop	{r3, r4, r5, pc}

0000ab44 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    ab44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab48:	4617      	mov	r7, r2
    ab4a:	461c      	mov	r4, r3
    ab4c:	4606      	mov	r6, r0
    ab4e:	460d      	mov	r5, r1
    ab50:	f7ff fd78 	bl	a644 <_ZNKSt9type_infoeqERKS_>
    ab54:	b908      	cbnz	r0, ab5a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
    ab56:	2c03      	cmp	r4, #3
    ab58:	d901      	bls.n	ab5e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
    ab5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ab5e:	682b      	ldr	r3, [r5, #0]
    ab60:	463a      	mov	r2, r7
    ab62:	4631      	mov	r1, r6
    ab64:	4628      	mov	r0, r5
    ab66:	695b      	ldr	r3, [r3, #20]
    ab68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ab6c:	4718      	bx	r3
    ab6e:	bf00      	nop

0000ab70 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    ab70:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab72:	b083      	sub	sp, #12
    ab74:	4617      	mov	r7, r2
    ab76:	9d08      	ldr	r5, [sp, #32]
    ab78:	990a      	ldr	r1, [sp, #40]	; 0x28
    ab7a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ab7c:	428d      	cmp	r5, r1
    ab7e:	4606      	mov	r6, r0
    ab80:	d00b      	beq.n	ab9a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
    ab82:	4619      	mov	r1, r3
    ab84:	4630      	mov	r0, r6
    ab86:	f7ff fd5d 	bl	a644 <_ZNKSt9type_infoeqERKS_>
    ab8a:	b118      	cbz	r0, ab94 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
    ab8c:	2301      	movs	r3, #1
    ab8e:	6025      	str	r5, [r4, #0]
    ab90:	7127      	strb	r7, [r4, #4]
    ab92:	71a3      	strb	r3, [r4, #6]
    ab94:	2000      	movs	r0, #0
    ab96:	b003      	add	sp, #12
    ab98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab9a:	9909      	ldr	r1, [sp, #36]	; 0x24
    ab9c:	9301      	str	r3, [sp, #4]
    ab9e:	f7ff fd51 	bl	a644 <_ZNKSt9type_infoeqERKS_>
    aba2:	b118      	cbz	r0, abac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
    aba4:	2000      	movs	r0, #0
    aba6:	7167      	strb	r7, [r4, #5]
    aba8:	b003      	add	sp, #12
    abaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    abac:	9b01      	ldr	r3, [sp, #4]
    abae:	e7e8      	b.n	ab82 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

0000abb0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
    abb0:	b4f0      	push	{r4, r5, r6, r7}
    abb2:	4c1b      	ldr	r4, [pc, #108]	; (ac20 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>)
    abb4:	f850 7c08 	ldr.w	r7, [r0, #-8]
    abb8:	6861      	ldr	r1, [r4, #4]
    abba:	f1a0 0608 	sub.w	r6, r0, #8
    abbe:	b1c9      	cbz	r1, abf4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
    abc0:	19f5      	adds	r5, r6, r7
    abc2:	42a9      	cmp	r1, r5
    abc4:	d01b      	beq.n	abfe <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
    abc6:	684a      	ldr	r2, [r1, #4]
    abc8:	b32a      	cbz	r2, ac16 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
    abca:	4295      	cmp	r5, r2
    abcc:	d303      	bcc.n	abd6 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x26>
    abce:	e022      	b.n	ac16 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
    abd0:	429d      	cmp	r5, r3
    abd2:	d205      	bcs.n	abe0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
    abd4:	461a      	mov	r2, r3
    abd6:	6853      	ldr	r3, [r2, #4]
    abd8:	1d0c      	adds	r4, r1, #4
    abda:	4611      	mov	r1, r2
    abdc:	2b00      	cmp	r3, #0
    abde:	d1f7      	bne.n	abd0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
    abe0:	6811      	ldr	r1, [r2, #0]
    abe2:	1855      	adds	r5, r2, r1
    abe4:	42ae      	cmp	r6, r5
    abe6:	d013      	beq.n	ac10 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
    abe8:	f840 3c04 	str.w	r3, [r0, #-4]
    abec:	6823      	ldr	r3, [r4, #0]
    abee:	605e      	str	r6, [r3, #4]
    abf0:	bcf0      	pop	{r4, r5, r6, r7}
    abf2:	4770      	bx	lr
    abf4:	f840 1c04 	str.w	r1, [r0, #-4]
    abf8:	6066      	str	r6, [r4, #4]
    abfa:	bcf0      	pop	{r4, r5, r6, r7}
    abfc:	4770      	bx	lr
    abfe:	680b      	ldr	r3, [r1, #0]
    ac00:	684a      	ldr	r2, [r1, #4]
    ac02:	f840 2c04 	str.w	r2, [r0, #-4]
    ac06:	441f      	add	r7, r3
    ac08:	f840 7c08 	str.w	r7, [r0, #-8]
    ac0c:	6066      	str	r6, [r4, #4]
    ac0e:	e7ef      	b.n	abf0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
    ac10:	440f      	add	r7, r1
    ac12:	6017      	str	r7, [r2, #0]
    ac14:	e7ec      	b.n	abf0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
    ac16:	4613      	mov	r3, r2
    ac18:	3404      	adds	r4, #4
    ac1a:	460a      	mov	r2, r1
    ac1c:	e7e0      	b.n	abe0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
    ac1e:	bf00      	nop
    ac20:	2000fba0 	.word	0x2000fba0

0000ac24 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
    ac24:	b430      	push	{r4, r5}
    ac26:	4c18      	ldr	r4, [pc, #96]	; (ac88 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x64>)
    ac28:	f100 0108 	add.w	r1, r0, #8
    ac2c:	6863      	ldr	r3, [r4, #4]
    ac2e:	2908      	cmp	r1, #8
    ac30:	bf38      	it	cc
    ac32:	2108      	movcc	r1, #8
    ac34:	b313      	cbz	r3, ac7c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
    ac36:	3107      	adds	r1, #7
    ac38:	681a      	ldr	r2, [r3, #0]
    ac3a:	f021 0107 	bic.w	r1, r1, #7
    ac3e:	4291      	cmp	r1, r2
    ac40:	d804      	bhi.n	ac4c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
    ac42:	e01d      	b.n	ac80 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5c>
    ac44:	6802      	ldr	r2, [r0, #0]
    ac46:	4291      	cmp	r1, r2
    ac48:	d905      	bls.n	ac56 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
    ac4a:	4603      	mov	r3, r0
    ac4c:	6858      	ldr	r0, [r3, #4]
    ac4e:	2800      	cmp	r0, #0
    ac50:	d1f8      	bne.n	ac44 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
    ac52:	bc30      	pop	{r4, r5}
    ac54:	4770      	bx	lr
    ac56:	3304      	adds	r3, #4
    ac58:	1a52      	subs	r2, r2, r1
    ac5a:	2a07      	cmp	r2, #7
    ac5c:	d90a      	bls.n	ac74 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
    ac5e:	1845      	adds	r5, r0, r1
    ac60:	6844      	ldr	r4, [r0, #4]
    ac62:	606c      	str	r4, [r5, #4]
    ac64:	681c      	ldr	r4, [r3, #0]
    ac66:	5042      	str	r2, [r0, r1]
    ac68:	6021      	str	r1, [r4, #0]
    ac6a:	601d      	str	r5, [r3, #0]
    ac6c:	f104 0008 	add.w	r0, r4, #8
    ac70:	bc30      	pop	{r4, r5}
    ac72:	4770      	bx	lr
    ac74:	6842      	ldr	r2, [r0, #4]
    ac76:	601a      	str	r2, [r3, #0]
    ac78:	4604      	mov	r4, r0
    ac7a:	e7f7      	b.n	ac6c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
    ac7c:	4618      	mov	r0, r3
    ac7e:	e7e8      	b.n	ac52 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
    ac80:	4618      	mov	r0, r3
    ac82:	1d23      	adds	r3, r4, #4
    ac84:	e7e8      	b.n	ac58 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
    ac86:	bf00      	nop
    ac88:	2000fba0 	.word	0x2000fba0

0000ac8c <__cxa_allocate_exception>:
    ac8c:	b538      	push	{r3, r4, r5, lr}
    ac8e:	f100 0580 	add.w	r5, r0, #128	; 0x80
    ac92:	4628      	mov	r0, r5
    ac94:	f00a fab8 	bl	15208 <malloc>
    ac98:	4604      	mov	r4, r0
    ac9a:	b138      	cbz	r0, acac <__cxa_allocate_exception+0x20>
    ac9c:	2280      	movs	r2, #128	; 0x80
    ac9e:	2100      	movs	r1, #0
    aca0:	4620      	mov	r0, r4
    aca2:	f00a ff0b 	bl	15abc <memset>
    aca6:	f104 0080 	add.w	r0, r4, #128	; 0x80
    acaa:	bd38      	pop	{r3, r4, r5, pc}
    acac:	4628      	mov	r0, r5
    acae:	f7ff ffb9 	bl	ac24 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    acb2:	4604      	mov	r4, r0
    acb4:	2800      	cmp	r0, #0
    acb6:	d1f1      	bne.n	ac9c <__cxa_allocate_exception+0x10>
    acb8:	f000 fccc 	bl	b654 <_ZSt9terminatev>

0000acbc <__cxa_free_exception>:
    acbc:	4a06      	ldr	r2, [pc, #24]	; (acd8 <__cxa_free_exception+0x1c>)
    acbe:	6893      	ldr	r3, [r2, #8]
    acc0:	3880      	subs	r0, #128	; 0x80
    acc2:	4298      	cmp	r0, r3
    acc4:	d905      	bls.n	acd2 <__cxa_free_exception+0x16>
    acc6:	68d2      	ldr	r2, [r2, #12]
    acc8:	4413      	add	r3, r2
    acca:	4298      	cmp	r0, r3
    accc:	d201      	bcs.n	acd2 <__cxa_free_exception+0x16>
    acce:	f7ff bf6f 	b.w	abb0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    acd2:	f00a baa1 	b.w	15218 <free>
    acd6:	bf00      	nop
    acd8:	2000fba0 	.word	0x2000fba0

0000acdc <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
    acdc:	b538      	push	{r3, r4, r5, lr}
    acde:	4c08      	ldr	r4, [pc, #32]	; (ad00 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
    ace0:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
    ace4:	4628      	mov	r0, r5
    ace6:	60e5      	str	r5, [r4, #12]
    ace8:	f00a fa8e 	bl	15208 <malloc>
    acec:	60a0      	str	r0, [r4, #8]
    acee:	b120      	cbz	r0, acfa <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
    acf0:	2300      	movs	r3, #0
    acf2:	6060      	str	r0, [r4, #4]
    acf4:	6005      	str	r5, [r0, #0]
    acf6:	6043      	str	r3, [r0, #4]
    acf8:	bd38      	pop	{r3, r4, r5, pc}
    acfa:	60e0      	str	r0, [r4, #12]
    acfc:	6060      	str	r0, [r4, #4]
    acfe:	bd38      	pop	{r3, r4, r5, pc}
    ad00:	2000fba0 	.word	0x2000fba0

0000ad04 <__cxa_end_cleanup>:
    ad04:	b41e      	push	{r1, r2, r3, r4}
    ad06:	f000 f891 	bl	ae2c <__gnu_end_cleanup>
    ad0a:	bc1e      	pop	{r1, r2, r3, r4}
    ad0c:	f009 fd0c 	bl	14728 <_Unwind_Resume>

0000ad10 <__cxa_type_match>:
    ad10:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad12:	7802      	ldrb	r2, [r0, #0]
    ad14:	2a47      	cmp	r2, #71	; 0x47
    ad16:	b083      	sub	sp, #12
    ad18:	460d      	mov	r5, r1
    ad1a:	461f      	mov	r7, r3
    ad1c:	d01e      	beq.n	ad5c <__cxa_type_match+0x4c>
    ad1e:	2300      	movs	r3, #0
    ad20:	4c27      	ldr	r4, [pc, #156]	; (adc0 <__cxa_type_match+0xb0>)
    ad22:	9301      	str	r3, [sp, #4]
    ad24:	6823      	ldr	r3, [r4, #0]
    ad26:	4620      	mov	r0, r4
    ad28:	689b      	ldr	r3, [r3, #8]
    ad2a:	4798      	blx	r3
    ad2c:	b180      	cbz	r0, ad50 <__cxa_type_match+0x40>
    ad2e:	9b01      	ldr	r3, [sp, #4]
    ad30:	681b      	ldr	r3, [r3, #0]
    ad32:	9301      	str	r3, [sp, #4]
    ad34:	2602      	movs	r6, #2
    ad36:	682b      	ldr	r3, [r5, #0]
    ad38:	4621      	mov	r1, r4
    ad3a:	4628      	mov	r0, r5
    ad3c:	691c      	ldr	r4, [r3, #16]
    ad3e:	aa01      	add	r2, sp, #4
    ad40:	2301      	movs	r3, #1
    ad42:	47a0      	blx	r4
    ad44:	b130      	cbz	r0, ad54 <__cxa_type_match+0x44>
    ad46:	9b01      	ldr	r3, [sp, #4]
    ad48:	603b      	str	r3, [r7, #0]
    ad4a:	4630      	mov	r0, r6
    ad4c:	b003      	add	sp, #12
    ad4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ad50:	2601      	movs	r6, #1
    ad52:	e7f0      	b.n	ad36 <__cxa_type_match+0x26>
    ad54:	4606      	mov	r6, r0
    ad56:	4630      	mov	r0, r6
    ad58:	b003      	add	sp, #12
    ad5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ad5c:	7843      	ldrb	r3, [r0, #1]
    ad5e:	2b4e      	cmp	r3, #78	; 0x4e
    ad60:	d1dd      	bne.n	ad1e <__cxa_type_match+0xe>
    ad62:	7883      	ldrb	r3, [r0, #2]
    ad64:	2b55      	cmp	r3, #85	; 0x55
    ad66:	d1da      	bne.n	ad1e <__cxa_type_match+0xe>
    ad68:	78c3      	ldrb	r3, [r0, #3]
    ad6a:	2b43      	cmp	r3, #67	; 0x43
    ad6c:	d019      	beq.n	ada2 <__cxa_type_match+0x92>
    ad6e:	78c3      	ldrb	r3, [r0, #3]
    ad70:	2b43      	cmp	r3, #67	; 0x43
    ad72:	d1d4      	bne.n	ad1e <__cxa_type_match+0xe>
    ad74:	7903      	ldrb	r3, [r0, #4]
    ad76:	2b43      	cmp	r3, #67	; 0x43
    ad78:	d1d1      	bne.n	ad1e <__cxa_type_match+0xe>
    ad7a:	7943      	ldrb	r3, [r0, #5]
    ad7c:	2b2b      	cmp	r3, #43	; 0x2b
    ad7e:	d1ce      	bne.n	ad1e <__cxa_type_match+0xe>
    ad80:	7983      	ldrb	r3, [r0, #6]
    ad82:	2b2b      	cmp	r3, #43	; 0x2b
    ad84:	d1cb      	bne.n	ad1e <__cxa_type_match+0xe>
    ad86:	79c3      	ldrb	r3, [r0, #7]
    ad88:	2b01      	cmp	r3, #1
    ad8a:	d8c8      	bhi.n	ad1e <__cxa_type_match+0xe>
    ad8c:	d004      	beq.n	ad98 <__cxa_type_match+0x88>
    ad8e:	f850 4c20 	ldr.w	r4, [r0, #-32]
    ad92:	3058      	adds	r0, #88	; 0x58
    ad94:	9001      	str	r0, [sp, #4]
    ad96:	e7c5      	b.n	ad24 <__cxa_type_match+0x14>
    ad98:	f850 0c20 	ldr.w	r0, [r0, #-32]
    ad9c:	f850 4c78 	ldr.w	r4, [r0, #-120]
    ada0:	e7f8      	b.n	ad94 <__cxa_type_match+0x84>
    ada2:	7903      	ldrb	r3, [r0, #4]
    ada4:	2b46      	cmp	r3, #70	; 0x46
    ada6:	d1e2      	bne.n	ad6e <__cxa_type_match+0x5e>
    ada8:	7943      	ldrb	r3, [r0, #5]
    adaa:	2b4f      	cmp	r3, #79	; 0x4f
    adac:	d1df      	bne.n	ad6e <__cxa_type_match+0x5e>
    adae:	7983      	ldrb	r3, [r0, #6]
    adb0:	2b52      	cmp	r3, #82	; 0x52
    adb2:	d1dc      	bne.n	ad6e <__cxa_type_match+0x5e>
    adb4:	79c3      	ldrb	r3, [r0, #7]
    adb6:	2b00      	cmp	r3, #0
    adb8:	d1d9      	bne.n	ad6e <__cxa_type_match+0x5e>
    adba:	9301      	str	r3, [sp, #4]
    adbc:	4c01      	ldr	r4, [pc, #4]	; (adc4 <__cxa_type_match+0xb4>)
    adbe:	e7b1      	b.n	ad24 <__cxa_type_match+0x14>
    adc0:	000236cc 	.word	0x000236cc
    adc4:	000236c4 	.word	0x000236c4

0000adc8 <__cxa_begin_cleanup>:
    adc8:	b510      	push	{r4, lr}
    adca:	4604      	mov	r4, r0
    adcc:	f000 f902 	bl	afd4 <__cxa_get_globals>
    add0:	7823      	ldrb	r3, [r4, #0]
    add2:	2b47      	cmp	r3, #71	; 0x47
    add4:	f1a4 0220 	sub.w	r2, r4, #32
    add8:	d004      	beq.n	ade4 <__cxa_begin_cleanup+0x1c>
    adda:	6883      	ldr	r3, [r0, #8]
    addc:	bb23      	cbnz	r3, ae28 <__cxa_begin_cleanup+0x60>
    adde:	6082      	str	r2, [r0, #8]
    ade0:	2001      	movs	r0, #1
    ade2:	bd10      	pop	{r4, pc}
    ade4:	7863      	ldrb	r3, [r4, #1]
    ade6:	2b4e      	cmp	r3, #78	; 0x4e
    ade8:	d1f7      	bne.n	adda <__cxa_begin_cleanup+0x12>
    adea:	78a3      	ldrb	r3, [r4, #2]
    adec:	2b55      	cmp	r3, #85	; 0x55
    adee:	d1f4      	bne.n	adda <__cxa_begin_cleanup+0x12>
    adf0:	78e3      	ldrb	r3, [r4, #3]
    adf2:	2b43      	cmp	r3, #67	; 0x43
    adf4:	d1f1      	bne.n	adda <__cxa_begin_cleanup+0x12>
    adf6:	7923      	ldrb	r3, [r4, #4]
    adf8:	2b43      	cmp	r3, #67	; 0x43
    adfa:	d1ee      	bne.n	adda <__cxa_begin_cleanup+0x12>
    adfc:	7963      	ldrb	r3, [r4, #5]
    adfe:	2b2b      	cmp	r3, #43	; 0x2b
    ae00:	d1eb      	bne.n	adda <__cxa_begin_cleanup+0x12>
    ae02:	79a3      	ldrb	r3, [r4, #6]
    ae04:	2b2b      	cmp	r3, #43	; 0x2b
    ae06:	d1e8      	bne.n	adda <__cxa_begin_cleanup+0x12>
    ae08:	79e3      	ldrb	r3, [r4, #7]
    ae0a:	2b01      	cmp	r3, #1
    ae0c:	d8e5      	bhi.n	adda <__cxa_begin_cleanup+0x12>
    ae0e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    ae12:	3301      	adds	r3, #1
    ae14:	2b01      	cmp	r3, #1
    ae16:	f844 3c04 	str.w	r3, [r4, #-4]
    ae1a:	d1e1      	bne.n	ade0 <__cxa_begin_cleanup+0x18>
    ae1c:	6883      	ldr	r3, [r0, #8]
    ae1e:	f844 3c08 	str.w	r3, [r4, #-8]
    ae22:	6082      	str	r2, [r0, #8]
    ae24:	2001      	movs	r0, #1
    ae26:	bd10      	pop	{r4, pc}
    ae28:	f000 fc14 	bl	b654 <_ZSt9terminatev>

0000ae2c <__gnu_end_cleanup>:
    ae2c:	b508      	push	{r3, lr}
    ae2e:	f000 f8d1 	bl	afd4 <__cxa_get_globals>
    ae32:	6883      	ldr	r3, [r0, #8]
    ae34:	b383      	cbz	r3, ae98 <__gnu_end_cleanup+0x6c>
    ae36:	f893 2020 	ldrb.w	r2, [r3, #32]
    ae3a:	2a47      	cmp	r2, #71	; 0x47
    ae3c:	d004      	beq.n	ae48 <__gnu_end_cleanup+0x1c>
    ae3e:	2200      	movs	r2, #0
    ae40:	6082      	str	r2, [r0, #8]
    ae42:	f103 0020 	add.w	r0, r3, #32
    ae46:	bd08      	pop	{r3, pc}
    ae48:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
    ae4c:	2a4e      	cmp	r2, #78	; 0x4e
    ae4e:	d1f6      	bne.n	ae3e <__gnu_end_cleanup+0x12>
    ae50:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    ae54:	2a55      	cmp	r2, #85	; 0x55
    ae56:	d1f2      	bne.n	ae3e <__gnu_end_cleanup+0x12>
    ae58:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
    ae5c:	2a43      	cmp	r2, #67	; 0x43
    ae5e:	d1ee      	bne.n	ae3e <__gnu_end_cleanup+0x12>
    ae60:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    ae64:	2a43      	cmp	r2, #67	; 0x43
    ae66:	d1ea      	bne.n	ae3e <__gnu_end_cleanup+0x12>
    ae68:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    ae6c:	2a2b      	cmp	r2, #43	; 0x2b
    ae6e:	d1e6      	bne.n	ae3e <__gnu_end_cleanup+0x12>
    ae70:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
    ae74:	2a2b      	cmp	r2, #43	; 0x2b
    ae76:	d1e2      	bne.n	ae3e <__gnu_end_cleanup+0x12>
    ae78:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    ae7c:	2a01      	cmp	r2, #1
    ae7e:	d8de      	bhi.n	ae3e <__gnu_end_cleanup+0x12>
    ae80:	69da      	ldr	r2, [r3, #28]
    ae82:	3a01      	subs	r2, #1
    ae84:	61da      	str	r2, [r3, #28]
    ae86:	2a00      	cmp	r2, #0
    ae88:	d1db      	bne.n	ae42 <__gnu_end_cleanup+0x16>
    ae8a:	699a      	ldr	r2, [r3, #24]
    ae8c:	6082      	str	r2, [r0, #8]
    ae8e:	2200      	movs	r2, #0
    ae90:	619a      	str	r2, [r3, #24]
    ae92:	f103 0020 	add.w	r0, r3, #32
    ae96:	bd08      	pop	{r3, pc}
    ae98:	f000 fbdc 	bl	b654 <_ZSt9terminatev>

0000ae9c <__cxa_begin_catch>:
    ae9c:	b538      	push	{r3, r4, r5, lr}
    ae9e:	4604      	mov	r4, r0
    aea0:	f000 f898 	bl	afd4 <__cxa_get_globals>
    aea4:	7822      	ldrb	r2, [r4, #0]
    aea6:	6803      	ldr	r3, [r0, #0]
    aea8:	2a47      	cmp	r2, #71	; 0x47
    aeaa:	f1a4 0120 	sub.w	r1, r4, #32
    aeae:	d004      	beq.n	aeba <__cxa_begin_catch+0x1e>
    aeb0:	bb83      	cbnz	r3, af14 <__cxa_begin_catch+0x78>
    aeb2:	461c      	mov	r4, r3
    aeb4:	6001      	str	r1, [r0, #0]
    aeb6:	4620      	mov	r0, r4
    aeb8:	bd38      	pop	{r3, r4, r5, pc}
    aeba:	7862      	ldrb	r2, [r4, #1]
    aebc:	2a4e      	cmp	r2, #78	; 0x4e
    aebe:	d1f7      	bne.n	aeb0 <__cxa_begin_catch+0x14>
    aec0:	78a2      	ldrb	r2, [r4, #2]
    aec2:	2a55      	cmp	r2, #85	; 0x55
    aec4:	d1f4      	bne.n	aeb0 <__cxa_begin_catch+0x14>
    aec6:	78e2      	ldrb	r2, [r4, #3]
    aec8:	2a43      	cmp	r2, #67	; 0x43
    aeca:	d1f1      	bne.n	aeb0 <__cxa_begin_catch+0x14>
    aecc:	7922      	ldrb	r2, [r4, #4]
    aece:	2a43      	cmp	r2, #67	; 0x43
    aed0:	d1ee      	bne.n	aeb0 <__cxa_begin_catch+0x14>
    aed2:	7962      	ldrb	r2, [r4, #5]
    aed4:	2a2b      	cmp	r2, #43	; 0x2b
    aed6:	d1eb      	bne.n	aeb0 <__cxa_begin_catch+0x14>
    aed8:	79a2      	ldrb	r2, [r4, #6]
    aeda:	2a2b      	cmp	r2, #43	; 0x2b
    aedc:	d1e8      	bne.n	aeb0 <__cxa_begin_catch+0x14>
    aede:	79e2      	ldrb	r2, [r4, #7]
    aee0:	2a01      	cmp	r2, #1
    aee2:	d8e5      	bhi.n	aeb0 <__cxa_begin_catch+0x14>
    aee4:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    aee8:	2a00      	cmp	r2, #0
    aeea:	db10      	blt.n	af0e <__cxa_begin_catch+0x72>
    aeec:	3201      	adds	r2, #1
    aeee:	6845      	ldr	r5, [r0, #4]
    aef0:	f844 2c0c 	str.w	r2, [r4, #-12]
    aef4:	3d01      	subs	r5, #1
    aef6:	6045      	str	r5, [r0, #4]
    aef8:	428b      	cmp	r3, r1
    aefa:	bf1c      	itt	ne
    aefc:	f844 3c10 	strne.w	r3, [r4, #-16]
    af00:	6001      	strne	r1, [r0, #0]
    af02:	4620      	mov	r0, r4
    af04:	6a64      	ldr	r4, [r4, #36]	; 0x24
    af06:	f009 f861 	bl	13fcc <_Unwind_Complete>
    af0a:	4620      	mov	r0, r4
    af0c:	bd38      	pop	{r3, r4, r5, pc}
    af0e:	f1c2 0201 	rsb	r2, r2, #1
    af12:	e7ec      	b.n	aeee <__cxa_begin_catch+0x52>
    af14:	f000 fb9e 	bl	b654 <_ZSt9terminatev>

0000af18 <__cxa_end_catch>:
    af18:	b508      	push	{r3, lr}
    af1a:	f000 f857 	bl	afcc <__cxa_get_globals_fast>
    af1e:	4602      	mov	r2, r0
    af20:	6800      	ldr	r0, [r0, #0]
    af22:	2800      	cmp	r0, #0
    af24:	d03d      	beq.n	afa2 <__cxa_end_catch+0x8a>
    af26:	f890 3020 	ldrb.w	r3, [r0, #32]
    af2a:	2b47      	cmp	r3, #71	; 0x47
    af2c:	d006      	beq.n	af3c <__cxa_end_catch+0x24>
    af2e:	2300      	movs	r3, #0
    af30:	6013      	str	r3, [r2, #0]
    af32:	3020      	adds	r0, #32
    af34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    af38:	f009 b84a 	b.w	13fd0 <_Unwind_DeleteException>
    af3c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    af40:	2b4e      	cmp	r3, #78	; 0x4e
    af42:	d1f4      	bne.n	af2e <__cxa_end_catch+0x16>
    af44:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    af48:	2b55      	cmp	r3, #85	; 0x55
    af4a:	d1f0      	bne.n	af2e <__cxa_end_catch+0x16>
    af4c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    af50:	2b43      	cmp	r3, #67	; 0x43
    af52:	d1ec      	bne.n	af2e <__cxa_end_catch+0x16>
    af54:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    af58:	2b43      	cmp	r3, #67	; 0x43
    af5a:	d1e8      	bne.n	af2e <__cxa_end_catch+0x16>
    af5c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
    af60:	2b2b      	cmp	r3, #43	; 0x2b
    af62:	d1e4      	bne.n	af2e <__cxa_end_catch+0x16>
    af64:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
    af68:	2b2b      	cmp	r3, #43	; 0x2b
    af6a:	d1e0      	bne.n	af2e <__cxa_end_catch+0x16>
    af6c:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
    af70:	2b01      	cmp	r3, #1
    af72:	d8dc      	bhi.n	af2e <__cxa_end_catch+0x16>
    af74:	6943      	ldr	r3, [r0, #20]
    af76:	2b00      	cmp	r3, #0
    af78:	db05      	blt.n	af86 <__cxa_end_catch+0x6e>
    af7a:	3b01      	subs	r3, #1
    af7c:	d008      	beq.n	af90 <__cxa_end_catch+0x78>
    af7e:	1c5a      	adds	r2, r3, #1
    af80:	d00d      	beq.n	af9e <__cxa_end_catch+0x86>
    af82:	6143      	str	r3, [r0, #20]
    af84:	bd08      	pop	{r3, pc}
    af86:	3301      	adds	r3, #1
    af88:	d1fb      	bne.n	af82 <__cxa_end_catch+0x6a>
    af8a:	6901      	ldr	r1, [r0, #16]
    af8c:	6011      	str	r1, [r2, #0]
    af8e:	e7f8      	b.n	af82 <__cxa_end_catch+0x6a>
    af90:	6903      	ldr	r3, [r0, #16]
    af92:	6013      	str	r3, [r2, #0]
    af94:	3020      	adds	r0, #32
    af96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    af9a:	f009 b819 	b.w	13fd0 <_Unwind_DeleteException>
    af9e:	f000 fb59 	bl	b654 <_ZSt9terminatev>
    afa2:	bd08      	pop	{r3, pc}

0000afa4 <_ZNSt9exceptionD1Ev>:
    afa4:	4770      	bx	lr
    afa6:	bf00      	nop

0000afa8 <_ZNSt13bad_exceptionD1Ev>:
    afa8:	4770      	bx	lr
    afaa:	bf00      	nop

0000afac <_ZGTtNKSt9exception4whatEv>:
    afac:	4800      	ldr	r0, [pc, #0]	; (afb0 <_ZGTtNKSt9exception4whatEv+0x4>)
    afae:	4770      	bx	lr
    afb0:	000236b4 	.word	0x000236b4

0000afb4 <_ZGTtNKSt13bad_exception4whatEv>:
    afb4:	4800      	ldr	r0, [pc, #0]	; (afb8 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
    afb6:	4770      	bx	lr
    afb8:	000236a0 	.word	0x000236a0

0000afbc <_ZNSt13bad_exceptionD0Ev>:
    afbc:	b510      	push	{r4, lr}
    afbe:	2104      	movs	r1, #4
    afc0:	4604      	mov	r4, r0
    afc2:	f7ff fa4b 	bl	a45c <_ZdlPvj>
    afc6:	4620      	mov	r0, r4
    afc8:	bd10      	pop	{r4, pc}
    afca:	bf00      	nop

0000afcc <__cxa_get_globals_fast>:
    afcc:	4800      	ldr	r0, [pc, #0]	; (afd0 <__cxa_get_globals_fast+0x4>)
    afce:	4770      	bx	lr
    afd0:	2000fbb0 	.word	0x2000fbb0

0000afd4 <__cxa_get_globals>:
    afd4:	4800      	ldr	r0, [pc, #0]	; (afd8 <__cxa_get_globals+0x4>)
    afd6:	4770      	bx	lr
    afd8:	2000fbb0 	.word	0x2000fbb0

0000afdc <_ZL28read_encoded_value_with_basehjPKhPj>:
    afdc:	2850      	cmp	r0, #80	; 0x50
    afde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    afe0:	d054      	beq.n	b08c <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
    afe2:	f000 040f 	and.w	r4, r0, #15
    afe6:	2c0c      	cmp	r4, #12
    afe8:	d84e      	bhi.n	b088 <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
    afea:	e8df f004 	tbb	[pc, r4]
    afee:	3907      	.short	0x3907
    aff0:	4d170749 	.word	0x4d170749
    aff4:	1f4d4d4d 	.word	0x1f4d4d4d
    aff8:	071b      	.short	0x071b
    affa:	17          	.byte	0x17
    affb:	00          	.byte	0x00
    affc:	4615      	mov	r5, r2
    affe:	f855 4b04 	ldr.w	r4, [r5], #4
    b002:	b144      	cbz	r4, b016 <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
    b004:	f000 0670 	and.w	r6, r0, #112	; 0x70
    b008:	2e10      	cmp	r6, #16
    b00a:	bf08      	it	eq
    b00c:	4611      	moveq	r1, r2
    b00e:	440c      	add	r4, r1
    b010:	0602      	lsls	r2, r0, #24
    b012:	bf48      	it	mi
    b014:	6824      	ldrmi	r4, [r4, #0]
    b016:	601c      	str	r4, [r3, #0]
    b018:	4628      	mov	r0, r5
    b01a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b01c:	4615      	mov	r5, r2
    b01e:	f855 4b08 	ldr.w	r4, [r5], #8
    b022:	e7ee      	b.n	b002 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
    b024:	4615      	mov	r5, r2
    b026:	f935 4b02 	ldrsh.w	r4, [r5], #2
    b02a:	e7ea      	b.n	b002 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
    b02c:	2400      	movs	r4, #0
    b02e:	4627      	mov	r7, r4
    b030:	4615      	mov	r5, r2
    b032:	f815 eb01 	ldrb.w	lr, [r5], #1
    b036:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
    b03a:	40be      	lsls	r6, r7
    b03c:	f01e 0f80 	tst.w	lr, #128	; 0x80
    b040:	ea44 0406 	orr.w	r4, r4, r6
    b044:	f107 0707 	add.w	r7, r7, #7
    b048:	d1f3      	bne.n	b032 <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
    b04a:	2f1f      	cmp	r7, #31
    b04c:	d8d9      	bhi.n	b002 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
    b04e:	f01e 0f40 	tst.w	lr, #64	; 0x40
    b052:	d0d6      	beq.n	b002 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
    b054:	f04f 36ff 	mov.w	r6, #4294967295
    b058:	fa06 f707 	lsl.w	r7, r6, r7
    b05c:	433c      	orrs	r4, r7
    b05e:	e7d1      	b.n	b004 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
    b060:	2400      	movs	r4, #0
    b062:	4627      	mov	r7, r4
    b064:	4615      	mov	r5, r2
    b066:	f815 eb01 	ldrb.w	lr, [r5], #1
    b06a:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
    b06e:	40be      	lsls	r6, r7
    b070:	f01e 0f80 	tst.w	lr, #128	; 0x80
    b074:	ea44 0406 	orr.w	r4, r4, r6
    b078:	f107 0707 	add.w	r7, r7, #7
    b07c:	d1f3      	bne.n	b066 <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
    b07e:	e7c0      	b.n	b002 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
    b080:	4615      	mov	r5, r2
    b082:	f835 4b02 	ldrh.w	r4, [r5], #2
    b086:	e7bc      	b.n	b002 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
    b088:	f009 fd58 	bl	14b3c <abort>
    b08c:	3203      	adds	r2, #3
    b08e:	f022 0503 	bic.w	r5, r2, #3
    b092:	f855 4b04 	ldr.w	r4, [r5], #4
    b096:	601c      	str	r4, [r3, #0]
    b098:	4628      	mov	r0, r5
    b09a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b09c <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    b09c:	28ff      	cmp	r0, #255	; 0xff
    b09e:	d00d      	beq.n	b0bc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
    b0a0:	f000 0070 	and.w	r0, r0, #112	; 0x70
    b0a4:	2820      	cmp	r0, #32
    b0a6:	d015      	beq.n	b0d4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
    b0a8:	d90a      	bls.n	b0c0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
    b0aa:	2840      	cmp	r0, #64	; 0x40
    b0ac:	d00f      	beq.n	b0ce <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
    b0ae:	2850      	cmp	r0, #80	; 0x50
    b0b0:	d004      	beq.n	b0bc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
    b0b2:	2830      	cmp	r0, #48	; 0x30
    b0b4:	d108      	bne.n	b0c8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
    b0b6:	4608      	mov	r0, r1
    b0b8:	f009 bd3a 	b.w	14b30 <_Unwind_GetDataRelBase>
    b0bc:	2000      	movs	r0, #0
    b0be:	4770      	bx	lr
    b0c0:	2800      	cmp	r0, #0
    b0c2:	d0fb      	beq.n	b0bc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
    b0c4:	2810      	cmp	r0, #16
    b0c6:	d0f9      	beq.n	b0bc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
    b0c8:	b508      	push	{r3, lr}
    b0ca:	f009 fd37 	bl	14b3c <abort>
    b0ce:	4608      	mov	r0, r1
    b0d0:	f009 bd1a 	b.w	14b08 <_Unwind_GetRegionStart>
    b0d4:	4608      	mov	r0, r1
    b0d6:	f009 bd27 	b.w	14b28 <_Unwind_GetTextRelBase>
    b0da:	bf00      	nop

0000b0dc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    b0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b0de:	460c      	mov	r4, r1
    b0e0:	4615      	mov	r5, r2
    b0e2:	4607      	mov	r7, r0
    b0e4:	2800      	cmp	r0, #0
    b0e6:	d044      	beq.n	b172 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x96>
    b0e8:	f009 fd0e 	bl	14b08 <_Unwind_GetRegionStart>
    b0ec:	6028      	str	r0, [r5, #0]
    b0ee:	7826      	ldrb	r6, [r4, #0]
    b0f0:	2eff      	cmp	r6, #255	; 0xff
    b0f2:	f104 0401 	add.w	r4, r4, #1
    b0f6:	d032      	beq.n	b15e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
    b0f8:	4639      	mov	r1, r7
    b0fa:	4630      	mov	r0, r6
    b0fc:	f7ff ffce 	bl	b09c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    b100:	4622      	mov	r2, r4
    b102:	4601      	mov	r1, r0
    b104:	1d2b      	adds	r3, r5, #4
    b106:	4630      	mov	r0, r6
    b108:	f7ff ff68 	bl	afdc <_ZL28read_encoded_value_with_basehjPKhPj>
    b10c:	4604      	mov	r4, r0
    b10e:	1c60      	adds	r0, r4, #1
    b110:	7823      	ldrb	r3, [r4, #0]
    b112:	752b      	strb	r3, [r5, #20]
    b114:	2bff      	cmp	r3, #255	; 0xff
    b116:	d029      	beq.n	b16c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
    b118:	2310      	movs	r3, #16
    b11a:	2400      	movs	r4, #0
    b11c:	752b      	strb	r3, [r5, #20]
    b11e:	4622      	mov	r2, r4
    b120:	f810 1b01 	ldrb.w	r1, [r0], #1
    b124:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    b128:	4093      	lsls	r3, r2
    b12a:	0609      	lsls	r1, r1, #24
    b12c:	ea44 0403 	orr.w	r4, r4, r3
    b130:	f102 0207 	add.w	r2, r2, #7
    b134:	d4f4      	bmi.n	b120 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
    b136:	4404      	add	r4, r0
    b138:	60ec      	str	r4, [r5, #12]
    b13a:	7803      	ldrb	r3, [r0, #0]
    b13c:	756b      	strb	r3, [r5, #21]
    b13e:	2400      	movs	r4, #0
    b140:	3001      	adds	r0, #1
    b142:	4622      	mov	r2, r4
    b144:	f810 1b01 	ldrb.w	r1, [r0], #1
    b148:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    b14c:	4093      	lsls	r3, r2
    b14e:	431c      	orrs	r4, r3
    b150:	060b      	lsls	r3, r1, #24
    b152:	f102 0207 	add.w	r2, r2, #7
    b156:	d4f5      	bmi.n	b144 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x68>
    b158:	4404      	add	r4, r0
    b15a:	612c      	str	r4, [r5, #16]
    b15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b15e:	6068      	str	r0, [r5, #4]
    b160:	7823      	ldrb	r3, [r4, #0]
    b162:	752b      	strb	r3, [r5, #20]
    b164:	2bff      	cmp	r3, #255	; 0xff
    b166:	f104 0001 	add.w	r0, r4, #1
    b16a:	d1d5      	bne.n	b118 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>
    b16c:	2300      	movs	r3, #0
    b16e:	60eb      	str	r3, [r5, #12]
    b170:	e7e3      	b.n	b13a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
    b172:	e7bb      	b.n	b0ec <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

0000b174 <__gxx_personality_v0>:
    b174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b178:	f000 0403 	and.w	r4, r0, #3
    b17c:	b097      	sub	sp, #92	; 0x5c
    b17e:	2300      	movs	r3, #0
    b180:	2c01      	cmp	r4, #1
    b182:	4689      	mov	r9, r1
    b184:	4617      	mov	r7, r2
    b186:	930a      	str	r3, [sp, #40]	; 0x28
    b188:	d01e      	beq.n	b1c8 <__gxx_personality_v0+0x54>
    b18a:	d30e      	bcc.n	b1aa <__gxx_personality_v0+0x36>
    b18c:	2c02      	cmp	r4, #2
    b18e:	d10a      	bne.n	b1a6 <__gxx_personality_v0+0x32>
    b190:	4639      	mov	r1, r7
    b192:	4648      	mov	r0, r9
    b194:	f009 fca4 	bl	14ae0 <__gnu_unwind_frame>
    b198:	2800      	cmp	r0, #0
    b19a:	f000 80a5 	beq.w	b2e8 <__gxx_personality_v0+0x174>
    b19e:	2009      	movs	r0, #9
    b1a0:	b017      	add	sp, #92	; 0x5c
    b1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1a6:	f009 fcc9 	bl	14b3c <abort>
    b1aa:	0700      	lsls	r0, r0, #28
    b1ac:	d4f0      	bmi.n	b190 <__gxx_personality_v0+0x1c>
    b1ae:	2301      	movs	r3, #1
    b1b0:	9303      	str	r3, [sp, #12]
    b1b2:	aa16      	add	r2, sp, #88	; 0x58
    b1b4:	2300      	movs	r3, #0
    b1b6:	f842 9d2c 	str.w	r9, [r2, #-44]!
    b1ba:	4619      	mov	r1, r3
    b1bc:	9200      	str	r2, [sp, #0]
    b1be:	4638      	mov	r0, r7
    b1c0:	220c      	movs	r2, #12
    b1c2:	f008 ff31 	bl	14028 <_Unwind_VRS_Set>
    b1c6:	e00f      	b.n	b1e8 <__gxx_personality_v0+0x74>
    b1c8:	f010 0408 	ands.w	r4, r0, #8
    b1cc:	f000 8090 	beq.w	b2f0 <__gxx_personality_v0+0x17c>
    b1d0:	aa16      	add	r2, sp, #88	; 0x58
    b1d2:	f044 0402 	orr.w	r4, r4, #2
    b1d6:	f842 1d2c 	str.w	r1, [r2, #-44]!
    b1da:	4638      	mov	r0, r7
    b1dc:	9200      	str	r2, [sp, #0]
    b1de:	4619      	mov	r1, r3
    b1e0:	220c      	movs	r2, #12
    b1e2:	9403      	str	r4, [sp, #12]
    b1e4:	f008 ff20 	bl	14028 <_Unwind_VRS_Set>
    b1e8:	4638      	mov	r0, r7
    b1ea:	f009 fc93 	bl	14b14 <_Unwind_GetLanguageSpecificData>
    b1ee:	9005      	str	r0, [sp, #20]
    b1f0:	2800      	cmp	r0, #0
    b1f2:	d0cd      	beq.n	b190 <__gxx_personality_v0+0x1c>
    b1f4:	ab10      	add	r3, sp, #64	; 0x40
    b1f6:	461a      	mov	r2, r3
    b1f8:	9905      	ldr	r1, [sp, #20]
    b1fa:	9306      	str	r3, [sp, #24]
    b1fc:	4638      	mov	r0, r7
    b1fe:	f7ff ff6d 	bl	b0dc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    b202:	4639      	mov	r1, r7
    b204:	4604      	mov	r4, r0
    b206:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    b20a:	f7ff ff47 	bl	b09c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    b20e:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
    b212:	2300      	movs	r3, #0
    b214:	9012      	str	r0, [sp, #72]	; 0x48
    b216:	4619      	mov	r1, r3
    b218:	220f      	movs	r2, #15
    b21a:	f8cd b000 	str.w	fp, [sp]
    b21e:	4638      	mov	r0, r7
    b220:	f008 fedc 	bl	13fdc <_Unwind_VRS_Get>
    b224:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b226:	9a14      	ldr	r2, [sp, #80]	; 0x50
    b228:	f023 0301 	bic.w	r3, r3, #1
    b22c:	42a2      	cmp	r2, r4
    b22e:	f103 36ff 	add.w	r6, r3, #4294967295
    b232:	d975      	bls.n	b320 <__gxx_personality_v0+0x1ac>
    b234:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
    b238:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    b23c:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
    b240:	2100      	movs	r1, #0
    b242:	4628      	mov	r0, r5
    b244:	f7ff ff2a 	bl	b09c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    b248:	4622      	mov	r2, r4
    b24a:	4653      	mov	r3, sl
    b24c:	4601      	mov	r1, r0
    b24e:	4628      	mov	r0, r5
    b250:	f7ff fec4 	bl	afdc <_ZL28read_encoded_value_with_basehjPKhPj>
    b254:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
    b258:	4605      	mov	r5, r0
    b25a:	2100      	movs	r1, #0
    b25c:	4620      	mov	r0, r4
    b25e:	f7ff ff1d 	bl	b09c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    b262:	462a      	mov	r2, r5
    b264:	4643      	mov	r3, r8
    b266:	4601      	mov	r1, r0
    b268:	4620      	mov	r0, r4
    b26a:	f7ff feb7 	bl	afdc <_ZL28read_encoded_value_with_basehjPKhPj>
    b26e:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
    b272:	4605      	mov	r5, r0
    b274:	2100      	movs	r1, #0
    b276:	4620      	mov	r0, r4
    b278:	f7ff ff10 	bl	b09c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    b27c:	462a      	mov	r2, r5
    b27e:	4601      	mov	r1, r0
    b280:	465b      	mov	r3, fp
    b282:	4620      	mov	r0, r4
    b284:	f7ff feaa 	bl	afdc <_ZL28read_encoded_value_with_basehjPKhPj>
    b288:	4604      	mov	r4, r0
    b28a:	2000      	movs	r0, #0
    b28c:	4602      	mov	r2, r0
    b28e:	f814 1b01 	ldrb.w	r1, [r4], #1
    b292:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    b296:	4093      	lsls	r3, r2
    b298:	0609      	lsls	r1, r1, #24
    b29a:	ea40 0003 	orr.w	r0, r0, r3
    b29e:	f102 0207 	add.w	r2, r2, #7
    b2a2:	d4f4      	bmi.n	b28e <__gxx_personality_v0+0x11a>
    b2a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b2a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b2a8:	4413      	add	r3, r2
    b2aa:	429e      	cmp	r6, r3
    b2ac:	d231      	bcs.n	b312 <__gxx_personality_v0+0x19e>
    b2ae:	9b03      	ldr	r3, [sp, #12]
    b2b0:	07db      	lsls	r3, r3, #31
    b2b2:	d539      	bpl.n	b328 <__gxx_personality_v0+0x1b4>
    b2b4:	2500      	movs	r5, #0
    b2b6:	9504      	str	r5, [sp, #16]
    b2b8:	2300      	movs	r3, #0
    b2ba:	4619      	mov	r1, r3
    b2bc:	220d      	movs	r2, #13
    b2be:	f8cd 8000 	str.w	r8, [sp]
    b2c2:	4638      	mov	r0, r7
    b2c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b2c6:	f008 fe89 	bl	13fdc <_Unwind_VRS_Get>
    b2ca:	9a05      	ldr	r2, [sp, #20]
    b2cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b2ce:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
    b2d2:	9a04      	ldr	r2, [sp, #16]
    b2d4:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
    b2d8:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
    b2dc:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
    b2e0:	f8c9 3020 	str.w	r3, [r9, #32]
    b2e4:	2006      	movs	r0, #6
    b2e6:	e75b      	b.n	b1a0 <__gxx_personality_v0+0x2c>
    b2e8:	2008      	movs	r0, #8
    b2ea:	b017      	add	sp, #92	; 0x5c
    b2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b2f0:	ab10      	add	r3, sp, #64	; 0x40
    b2f2:	9300      	str	r3, [sp, #0]
    b2f4:	9306      	str	r3, [sp, #24]
    b2f6:	220d      	movs	r2, #13
    b2f8:	4623      	mov	r3, r4
    b2fa:	4621      	mov	r1, r4
    b2fc:	4638      	mov	r0, r7
    b2fe:	f8d9 5020 	ldr.w	r5, [r9, #32]
    b302:	f008 fe6b 	bl	13fdc <_Unwind_VRS_Get>
    b306:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b308:	429d      	cmp	r5, r3
    b30a:	d012      	beq.n	b332 <__gxx_personality_v0+0x1be>
    b30c:	2302      	movs	r3, #2
    b30e:	9303      	str	r3, [sp, #12]
    b310:	e74f      	b.n	b1b2 <__gxx_personality_v0+0x3e>
    b312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b314:	4413      	add	r3, r2
    b316:	429e      	cmp	r6, r3
    b318:	d359      	bcc.n	b3ce <__gxx_personality_v0+0x25a>
    b31a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b31c:	42a3      	cmp	r3, r4
    b31e:	d88d      	bhi.n	b23c <__gxx_personality_v0+0xc8>
    b320:	2500      	movs	r5, #0
    b322:	9504      	str	r5, [sp, #16]
    b324:	2401      	movs	r4, #1
    b326:	e105      	b.n	b534 <__gxx_personality_v0+0x3c0>
    b328:	9b03      	ldr	r3, [sp, #12]
    b32a:	071b      	lsls	r3, r3, #28
    b32c:	d54c      	bpl.n	b3c8 <__gxx_personality_v0+0x254>
    b32e:	f000 f991 	bl	b654 <_ZSt9terminatev>
    b332:	aa16      	add	r2, sp, #88	; 0x58
    b334:	4623      	mov	r3, r4
    b336:	f842 9d2c 	str.w	r9, [r2, #-44]!
    b33a:	4621      	mov	r1, r4
    b33c:	9200      	str	r2, [sp, #0]
    b33e:	4638      	mov	r0, r7
    b340:	220c      	movs	r2, #12
    b342:	f008 fe71 	bl	14028 <_Unwind_VRS_Set>
    b346:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
    b34a:	9304      	str	r3, [sp, #16]
    b34c:	2b00      	cmp	r3, #0
    b34e:	d03b      	beq.n	b3c8 <__gxx_personality_v0+0x254>
    b350:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
    b354:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
    b358:	2403      	movs	r4, #3
    b35a:	2d00      	cmp	r5, #0
    b35c:	f2c0 8106 	blt.w	b56c <__gxx_personality_v0+0x3f8>
    b360:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
    b364:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    b368:	a916      	add	r1, sp, #88	; 0x58
    b36a:	2300      	movs	r3, #0
    b36c:	f841 9d28 	str.w	r9, [r1, #-40]!
    b370:	461a      	mov	r2, r3
    b372:	9100      	str	r1, [sp, #0]
    b374:	4638      	mov	r0, r7
    b376:	4619      	mov	r1, r3
    b378:	f008 fe56 	bl	14028 <_Unwind_VRS_Set>
    b37c:	2300      	movs	r3, #0
    b37e:	4619      	mov	r1, r3
    b380:	2201      	movs	r2, #1
    b382:	f8cd a000 	str.w	sl, [sp]
    b386:	4638      	mov	r0, r7
    b388:	950d      	str	r5, [sp, #52]	; 0x34
    b38a:	f008 fe4d 	bl	14028 <_Unwind_VRS_Set>
    b38e:	2300      	movs	r3, #0
    b390:	4619      	mov	r1, r3
    b392:	220f      	movs	r2, #15
    b394:	f8cd 8000 	str.w	r8, [sp]
    b398:	4638      	mov	r0, r7
    b39a:	f008 fe1f 	bl	13fdc <_Unwind_VRS_Get>
    b39e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b3a0:	9a04      	ldr	r2, [sp, #16]
    b3a2:	f8cd 8000 	str.w	r8, [sp]
    b3a6:	f003 0501 	and.w	r5, r3, #1
    b3aa:	2300      	movs	r3, #0
    b3ac:	4315      	orrs	r5, r2
    b3ae:	4638      	mov	r0, r7
    b3b0:	4619      	mov	r1, r3
    b3b2:	220f      	movs	r2, #15
    b3b4:	950e      	str	r5, [sp, #56]	; 0x38
    b3b6:	f008 fe37 	bl	14028 <_Unwind_VRS_Set>
    b3ba:	2c02      	cmp	r4, #2
    b3bc:	f000 8080 	beq.w	b4c0 <__gxx_personality_v0+0x34c>
    b3c0:	2007      	movs	r0, #7
    b3c2:	b017      	add	sp, #92	; 0x5c
    b3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b3c8:	4648      	mov	r0, r9
    b3ca:	f000 fb7b 	bl	bac4 <__cxa_call_terminate>
    b3ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b3d0:	9304      	str	r3, [sp, #16]
    b3d2:	461a      	mov	r2, r3
    b3d4:	2b00      	cmp	r3, #0
    b3d6:	d178      	bne.n	b4ca <__gxx_personality_v0+0x356>
    b3d8:	2800      	cmp	r0, #0
    b3da:	f43f aed9 	beq.w	b190 <__gxx_personality_v0+0x1c>
    b3de:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b3e0:	9a04      	ldr	r2, [sp, #16]
    b3e2:	3801      	subs	r0, #1
    b3e4:	4403      	add	r3, r0
    b3e6:	2a00      	cmp	r2, #0
    b3e8:	f43f aed2 	beq.w	b190 <__gxx_personality_v0+0x1c>
    b3ec:	2b00      	cmp	r3, #0
    b3ee:	d075      	beq.n	b4dc <__gxx_personality_v0+0x368>
    b3f0:	9a03      	ldr	r2, [sp, #12]
    b3f2:	f012 0208 	ands.w	r2, r2, #8
    b3f6:	9209      	str	r2, [sp, #36]	; 0x24
    b3f8:	f000 80f6 	beq.w	b5e8 <__gxx_personality_v0+0x474>
    b3fc:	2147      	movs	r1, #71	; 0x47
    b3fe:	224e      	movs	r2, #78	; 0x4e
    b400:	f889 1000 	strb.w	r1, [r9]
    b404:	f889 2001 	strb.w	r2, [r9, #1]
    b408:	2155      	movs	r1, #85	; 0x55
    b40a:	2243      	movs	r2, #67	; 0x43
    b40c:	f889 1002 	strb.w	r1, [r9, #2]
    b410:	f889 2003 	strb.w	r2, [r9, #3]
    b414:	2146      	movs	r1, #70	; 0x46
    b416:	224f      	movs	r2, #79	; 0x4f
    b418:	f889 1004 	strb.w	r1, [r9, #4]
    b41c:	f889 2005 	strb.w	r2, [r9, #5]
    b420:	2152      	movs	r1, #82	; 0x52
    b422:	2200      	movs	r2, #0
    b424:	f889 1006 	strb.w	r1, [r9, #6]
    b428:	f889 2007 	strb.w	r2, [r9, #7]
    b42c:	2200      	movs	r2, #0
    b42e:	9208      	str	r2, [sp, #32]
    b430:	9707      	str	r7, [sp, #28]
    b432:	2500      	movs	r5, #0
    b434:	4629      	mov	r1, r5
    b436:	e000      	b.n	b43a <__gxx_personality_v0+0x2c6>
    b438:	4623      	mov	r3, r4
    b43a:	461c      	mov	r4, r3
    b43c:	f814 0b01 	ldrb.w	r0, [r4], #1
    b440:	f000 027f 	and.w	r2, r0, #127	; 0x7f
    b444:	408a      	lsls	r2, r1
    b446:	0606      	lsls	r6, r0, #24
    b448:	ea45 0502 	orr.w	r5, r5, r2
    b44c:	f101 0107 	add.w	r1, r1, #7
    b450:	d4f2      	bmi.n	b438 <__gxx_personality_v0+0x2c4>
    b452:	291f      	cmp	r1, #31
    b454:	d805      	bhi.n	b462 <__gxx_personality_v0+0x2ee>
    b456:	0642      	lsls	r2, r0, #25
    b458:	d503      	bpl.n	b462 <__gxx_personality_v0+0x2ee>
    b45a:	2201      	movs	r2, #1
    b45c:	408a      	lsls	r2, r1
    b45e:	4252      	negs	r2, r2
    b460:	4315      	orrs	r5, r2
    b462:	2600      	movs	r6, #0
    b464:	4631      	mov	r1, r6
    b466:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    b46a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
    b46e:	408a      	lsls	r2, r1
    b470:	0607      	lsls	r7, r0, #24
    b472:	ea46 0602 	orr.w	r6, r6, r2
    b476:	f101 0107 	add.w	r1, r1, #7
    b47a:	d4f4      	bmi.n	b466 <__gxx_personality_v0+0x2f2>
    b47c:	291f      	cmp	r1, #31
    b47e:	d805      	bhi.n	b48c <__gxx_personality_v0+0x318>
    b480:	0640      	lsls	r0, r0, #25
    b482:	d503      	bpl.n	b48c <__gxx_personality_v0+0x318>
    b484:	2301      	movs	r3, #1
    b486:	408b      	lsls	r3, r1
    b488:	425b      	negs	r3, r3
    b48a:	431e      	orrs	r6, r3
    b48c:	2d00      	cmp	r5, #0
    b48e:	d05c      	beq.n	b54a <__gxx_personality_v0+0x3d6>
    b490:	dd5e      	ble.n	b550 <__gxx_personality_v0+0x3dc>
    b492:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    b496:	28ff      	cmp	r0, #255	; 0xff
    b498:	f000 80a4 	beq.w	b5e4 <__gxx_personality_v0+0x470>
    b49c:	f000 0307 	and.w	r3, r0, #7
    b4a0:	2b04      	cmp	r3, #4
    b4a2:	f63f ae80 	bhi.w	b1a6 <__gxx_personality_v0+0x32>
    b4a6:	a201      	add	r2, pc, #4	; (adr r2, b4ac <__gxx_personality_v0+0x338>)
    b4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b4ac:	0000b517 	.word	0x0000b517
    b4b0:	0000b1a7 	.word	0x0000b1a7
    b4b4:	0000b51d 	.word	0x0000b51d
    b4b8:	0000b517 	.word	0x0000b517
    b4bc:	0000b4f5 	.word	0x0000b4f5
    b4c0:	4648      	mov	r0, r9
    b4c2:	f7ff fc81 	bl	adc8 <__cxa_begin_cleanup>
    b4c6:	2007      	movs	r0, #7
    b4c8:	e66a      	b.n	b1a0 <__gxx_personality_v0+0x2c>
    b4ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b4cc:	441a      	add	r2, r3
    b4ce:	9204      	str	r2, [sp, #16]
    b4d0:	2800      	cmp	r0, #0
    b4d2:	d184      	bne.n	b3de <__gxx_personality_v0+0x26a>
    b4d4:	9b04      	ldr	r3, [sp, #16]
    b4d6:	2b00      	cmp	r3, #0
    b4d8:	f43f ae5a 	beq.w	b190 <__gxx_personality_v0+0x1c>
    b4dc:	9b03      	ldr	r3, [sp, #12]
    b4de:	f013 0301 	ands.w	r3, r3, #1
    b4e2:	f47f ae55 	bne.w	b190 <__gxx_personality_v0+0x1c>
    b4e6:	9a03      	ldr	r2, [sp, #12]
    b4e8:	f012 0508 	ands.w	r5, r2, #8
    b4ec:	f040 8097 	bne.w	b61e <__gxx_personality_v0+0x4aa>
    b4f0:	2402      	movs	r4, #2
    b4f2:	e739      	b.n	b368 <__gxx_personality_v0+0x1f4>
    b4f4:	00eb      	lsls	r3, r5, #3
    b4f6:	425b      	negs	r3, r3
    b4f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b4fa:	9912      	ldr	r1, [sp, #72]	; 0x48
    b4fc:	441a      	add	r2, r3
    b4fe:	4643      	mov	r3, r8
    b500:	f7ff fd6c 	bl	afdc <_ZL28read_encoded_value_with_basehjPKhPj>
    b504:	990e      	ldr	r1, [sp, #56]	; 0x38
    b506:	b199      	cbz	r1, b530 <__gxx_personality_v0+0x3bc>
    b508:	f1b9 0f00 	cmp.w	r9, #0
    b50c:	d109      	bne.n	b522 <__gxx_personality_v0+0x3ae>
    b50e:	2e00      	cmp	r6, #0
    b510:	d077      	beq.n	b602 <__gxx_personality_v0+0x48e>
    b512:	19a3      	adds	r3, r4, r6
    b514:	e78d      	b.n	b432 <__gxx_personality_v0+0x2be>
    b516:	00ab      	lsls	r3, r5, #2
    b518:	425b      	negs	r3, r3
    b51a:	e7ed      	b.n	b4f8 <__gxx_personality_v0+0x384>
    b51c:	006b      	lsls	r3, r5, #1
    b51e:	425b      	negs	r3, r3
    b520:	e7ea      	b.n	b4f8 <__gxx_personality_v0+0x384>
    b522:	ab0a      	add	r3, sp, #40	; 0x28
    b524:	2200      	movs	r2, #0
    b526:	4648      	mov	r0, r9
    b528:	f7ff fbf2 	bl	ad10 <__cxa_type_match>
    b52c:	2800      	cmp	r0, #0
    b52e:	d0ee      	beq.n	b50e <__gxx_personality_v0+0x39a>
    b530:	9f07      	ldr	r7, [sp, #28]
    b532:	2403      	movs	r4, #3
    b534:	9b03      	ldr	r3, [sp, #12]
    b536:	07da      	lsls	r2, r3, #31
    b538:	d460      	bmi.n	b5fc <__gxx_personality_v0+0x488>
    b53a:	9b03      	ldr	r3, [sp, #12]
    b53c:	0719      	lsls	r1, r3, #28
    b53e:	d466      	bmi.n	b60e <__gxx_personality_v0+0x49a>
    b540:	2c01      	cmp	r4, #1
    b542:	f43f af41 	beq.w	b3c8 <__gxx_personality_v0+0x254>
    b546:	9905      	ldr	r1, [sp, #20]
    b548:	e707      	b.n	b35a <__gxx_personality_v0+0x1e6>
    b54a:	2301      	movs	r3, #1
    b54c:	9308      	str	r3, [sp, #32]
    b54e:	e7de      	b.n	b50e <__gxx_personality_v0+0x39a>
    b550:	f1b9 0f00 	cmp.w	r9, #0
    b554:	d001      	beq.n	b55a <__gxx_personality_v0+0x3e6>
    b556:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b558:	b35b      	cbz	r3, b5b2 <__gxx_personality_v0+0x43e>
    b55a:	1c6b      	adds	r3, r5, #1
    b55c:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
    b560:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b566:	2b00      	cmp	r3, #0
    b568:	d1d1      	bne.n	b50e <__gxx_personality_v0+0x39a>
    b56a:	e7e1      	b.n	b530 <__gxx_personality_v0+0x3bc>
    b56c:	9a06      	ldr	r2, [sp, #24]
    b56e:	4638      	mov	r0, r7
    b570:	f7ff fdb4 	bl	b0dc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    b574:	4639      	mov	r1, r7
    b576:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    b57a:	f7ff fd8f 	bl	b09c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    b57e:	00aa      	lsls	r2, r5, #2
    b580:	f082 0203 	eor.w	r2, r2, #3
    b584:	43d2      	mvns	r2, r2
    b586:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    b588:	9012      	str	r0, [sp, #72]	; 0x48
    b58a:	58b3      	ldr	r3, [r6, r2]
    b58c:	4416      	add	r6, r2
    b58e:	b133      	cbz	r3, b59e <__gxx_personality_v0+0x42a>
    b590:	4632      	mov	r2, r6
    b592:	2300      	movs	r3, #0
    b594:	f852 1f04 	ldr.w	r1, [r2, #4]!
    b598:	3301      	adds	r3, #1
    b59a:	2900      	cmp	r1, #0
    b59c:	d1fa      	bne.n	b594 <__gxx_personality_v0+0x420>
    b59e:	2204      	movs	r2, #4
    b5a0:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
    b5a4:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
    b5a8:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
    b5ac:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
    b5b0:	e6d6      	b.n	b360 <__gxx_personality_v0+0x1ec>
    b5b2:	1c6f      	adds	r7, r5, #1
    b5b4:	ebc7 7387 	rsb	r3, r7, r7, lsl #30
    b5b8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    b5ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b5bc:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    b5c0:	920f      	str	r2, [sp, #60]	; 0x3c
    b5c2:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    b5c6:	b921      	cbnz	r1, b5d2 <__gxx_personality_v0+0x45e>
    b5c8:	e7b2      	b.n	b530 <__gxx_personality_v0+0x3bc>
    b5ca:	f857 1f04 	ldr.w	r1, [r7, #4]!
    b5ce:	2900      	cmp	r1, #0
    b5d0:	d0ae      	beq.n	b530 <__gxx_personality_v0+0x3bc>
    b5d2:	4439      	add	r1, r7
    b5d4:	465b      	mov	r3, fp
    b5d6:	2200      	movs	r2, #0
    b5d8:	4648      	mov	r0, r9
    b5da:	f7ff fb99 	bl	ad10 <__cxa_type_match>
    b5de:	2800      	cmp	r0, #0
    b5e0:	d0f3      	beq.n	b5ca <__gxx_personality_v0+0x456>
    b5e2:	e794      	b.n	b50e <__gxx_personality_v0+0x39a>
    b5e4:	2300      	movs	r3, #0
    b5e6:	e787      	b.n	b4f8 <__gxx_personality_v0+0x384>
    b5e8:	f899 2007 	ldrb.w	r2, [r9, #7]
    b5ec:	2a01      	cmp	r2, #1
    b5ee:	bf0c      	ite	eq
    b5f0:	f859 2c20 	ldreq.w	r2, [r9, #-32]
    b5f4:	f109 0258 	addne.w	r2, r9, #88	; 0x58
    b5f8:	920a      	str	r2, [sp, #40]	; 0x28
    b5fa:	e717      	b.n	b42c <__gxx_personality_v0+0x2b8>
    b5fc:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    b600:	e65a      	b.n	b2b8 <__gxx_personality_v0+0x144>
    b602:	9b08      	ldr	r3, [sp, #32]
    b604:	9f07      	ldr	r7, [sp, #28]
    b606:	2b00      	cmp	r3, #0
    b608:	f47f af68 	bne.w	b4dc <__gxx_personality_v0+0x368>
    b60c:	e5c0      	b.n	b190 <__gxx_personality_v0+0x1c>
    b60e:	2c01      	cmp	r4, #1
    b610:	f43f ae8d 	beq.w	b32e <__gxx_personality_v0+0x1ba>
    b614:	2d00      	cmp	r5, #0
    b616:	f6bf aea3 	bge.w	b360 <__gxx_personality_v0+0x1ec>
    b61a:	f000 f829 	bl	b670 <_ZSt10unexpectedv>
    b61e:	461d      	mov	r5, r3
    b620:	2402      	movs	r4, #2
    b622:	e6a1      	b.n	b368 <__gxx_personality_v0+0x1f4>
    b624:	f7ff fc3a 	bl	ae9c <__cxa_begin_catch>
    b628:	e681      	b.n	b32e <__gxx_personality_v0+0x1ba>
    b62a:	bf00      	nop

0000b62c <_ZN10__cxxabiv111__terminateEPFvvE>:
    b62c:	b508      	push	{r3, lr}
    b62e:	4780      	blx	r0
    b630:	f009 fa84 	bl	14b3c <abort>
    b634:	f7ff fc32 	bl	ae9c <__cxa_begin_catch>
    b638:	f009 fa80 	bl	14b3c <abort>
    b63c:	460d      	mov	r5, r1
    b63e:	4604      	mov	r4, r0
    b640:	f7ff fc6a 	bl	af18 <__cxa_end_catch>
    b644:	3501      	adds	r5, #1
    b646:	d001      	beq.n	b64c <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
    b648:	f7ff fb5c 	bl	ad04 <__cxa_end_cleanup>
    b64c:	4620      	mov	r0, r4
    b64e:	f000 fa49 	bl	bae4 <__cxa_call_unexpected>
    b652:	bf00      	nop

0000b654 <_ZSt9terminatev>:
    b654:	b508      	push	{r3, lr}
    b656:	4b03      	ldr	r3, [pc, #12]	; (b664 <_ZSt9terminatev+0x10>)
    b658:	6818      	ldr	r0, [r3, #0]
    b65a:	f3bf 8f5b 	dmb	ish
    b65e:	f7ff ffe5 	bl	b62c <_ZN10__cxxabiv111__terminateEPFvvE>
    b662:	bf00      	nop
    b664:	20000018 	.word	0x20000018

0000b668 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    b668:	b508      	push	{r3, lr}
    b66a:	4780      	blx	r0
    b66c:	f7ff fff2 	bl	b654 <_ZSt9terminatev>

0000b670 <_ZSt10unexpectedv>:
    b670:	b508      	push	{r3, lr}
    b672:	4b03      	ldr	r3, [pc, #12]	; (b680 <_ZSt10unexpectedv+0x10>)
    b674:	6818      	ldr	r0, [r3, #0]
    b676:	f3bf 8f5b 	dmb	ish
    b67a:	f7ff fff5 	bl	b668 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    b67e:	bf00      	nop
    b680:	20000014 	.word	0x20000014

0000b684 <_ZSt13get_terminatev>:
    b684:	4b02      	ldr	r3, [pc, #8]	; (b690 <_ZSt13get_terminatev+0xc>)
    b686:	6818      	ldr	r0, [r3, #0]
    b688:	f3bf 8f5b 	dmb	ish
    b68c:	4770      	bx	lr
    b68e:	bf00      	nop
    b690:	20000018 	.word	0x20000018

0000b694 <_ZSt14get_unexpectedv>:
    b694:	4b02      	ldr	r3, [pc, #8]	; (b6a0 <_ZSt14get_unexpectedv+0xc>)
    b696:	6818      	ldr	r0, [r3, #0]
    b698:	f3bf 8f5b 	dmb	ish
    b69c:	4770      	bx	lr
    b69e:	bf00      	nop
    b6a0:	20000014 	.word	0x20000014

0000b6a4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
    b6a4:	2801      	cmp	r0, #1
    b6a6:	b510      	push	{r4, lr}
    b6a8:	d81a      	bhi.n	b6e0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
    b6aa:	f3bf 8f5b 	dmb	ish
    b6ae:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
    b6b2:	e853 2f00 	ldrex	r2, [r3]
    b6b6:	3a01      	subs	r2, #1
    b6b8:	e843 2000 	strex	r0, r2, [r3]
    b6bc:	2800      	cmp	r0, #0
    b6be:	d1f8      	bne.n	b6b2 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
    b6c0:	f3bf 8f5b 	dmb	ish
    b6c4:	b95a      	cbnz	r2, b6de <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
    b6c6:	f851 3c1c 	ldr.w	r3, [r1, #-28]
    b6ca:	f101 0458 	add.w	r4, r1, #88	; 0x58
    b6ce:	b10b      	cbz	r3, b6d4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
    b6d0:	4620      	mov	r0, r4
    b6d2:	4798      	blx	r3
    b6d4:	4620      	mov	r0, r4
    b6d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b6da:	f7ff baef 	b.w	acbc <__cxa_free_exception>
    b6de:	bd10      	pop	{r4, pc}
    b6e0:	f851 0c14 	ldr.w	r0, [r1, #-20]
    b6e4:	f7ff ffa2 	bl	b62c <_ZN10__cxxabiv111__terminateEPFvvE>

0000b6e8 <__cxa_throw>:
    b6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b6ea:	4604      	mov	r4, r0
    b6ec:	460f      	mov	r7, r1
    b6ee:	4616      	mov	r6, r2
    b6f0:	f7ff fc70 	bl	afd4 <__cxa_get_globals>
    b6f4:	6843      	ldr	r3, [r0, #4]
    b6f6:	2501      	movs	r5, #1
    b6f8:	442b      	add	r3, r5
    b6fa:	6043      	str	r3, [r0, #4]
    b6fc:	f844 7c78 	str.w	r7, [r4, #-120]
    b700:	f844 6c74 	str.w	r6, [r4, #-116]
    b704:	f844 5c80 	str.w	r5, [r4, #-128]
    b708:	f7ff ffc4 	bl	b694 <_ZSt14get_unexpectedv>
    b70c:	f844 0c70 	str.w	r0, [r4, #-112]
    b710:	f7ff ffb8 	bl	b684 <_ZSt13get_terminatev>
    b714:	2347      	movs	r3, #71	; 0x47
    b716:	2243      	movs	r2, #67	; 0x43
    b718:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
    b71c:	4910      	ldr	r1, [pc, #64]	; (b760 <__cxa_throw+0x78>)
    b71e:	f804 3c58 	strb.w	r3, [r4, #-88]
    b722:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
    b726:	232b      	movs	r3, #43	; 0x2b
    b728:	2755      	movs	r7, #85	; 0x55
    b72a:	2600      	movs	r6, #0
    b72c:	f844 0c6c 	str.w	r0, [r4, #-108]
    b730:	f804 ec57 	strb.w	lr, [r4, #-87]
    b734:	f844 1c50 	str.w	r1, [r4, #-80]
    b738:	f804 2c55 	strb.w	r2, [r4, #-85]
    b73c:	f804 2c54 	strb.w	r2, [r4, #-84]
    b740:	f804 3c53 	strb.w	r3, [r4, #-83]
    b744:	f804 3c52 	strb.w	r3, [r4, #-82]
    b748:	f804 7c56 	strb.w	r7, [r4, #-86]
    b74c:	f804 6c51 	strb.w	r6, [r4, #-81]
    b750:	4628      	mov	r0, r5
    b752:	f008 ffd7 	bl	14704 <_Unwind_RaiseException>
    b756:	4628      	mov	r0, r5
    b758:	f7ff fba0 	bl	ae9c <__cxa_begin_catch>
    b75c:	f7ff ff7a 	bl	b654 <_ZSt9terminatev>
    b760:	0000b6a5 	.word	0x0000b6a5

0000b764 <__cxa_rethrow>:
    b764:	b510      	push	{r4, lr}
    b766:	f7ff fc35 	bl	afd4 <__cxa_get_globals>
    b76a:	6842      	ldr	r2, [r0, #4]
    b76c:	6804      	ldr	r4, [r0, #0]
    b76e:	3201      	adds	r2, #1
    b770:	6042      	str	r2, [r0, #4]
    b772:	b164      	cbz	r4, b78e <__cxa_rethrow+0x2a>
    b774:	f894 2020 	ldrb.w	r2, [r4, #32]
    b778:	2a47      	cmp	r2, #71	; 0x47
    b77a:	d00a      	beq.n	b792 <__cxa_rethrow+0x2e>
    b77c:	2200      	movs	r2, #0
    b77e:	6002      	str	r2, [r0, #0]
    b780:	3420      	adds	r4, #32
    b782:	4620      	mov	r0, r4
    b784:	f008 ffe2 	bl	1474c <_Unwind_Resume_or_Rethrow>
    b788:	4620      	mov	r0, r4
    b78a:	f7ff fb87 	bl	ae9c <__cxa_begin_catch>
    b78e:	f7ff ff61 	bl	b654 <_ZSt9terminatev>
    b792:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    b796:	2a4e      	cmp	r2, #78	; 0x4e
    b798:	d1f0      	bne.n	b77c <__cxa_rethrow+0x18>
    b79a:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    b79e:	2a55      	cmp	r2, #85	; 0x55
    b7a0:	d1ec      	bne.n	b77c <__cxa_rethrow+0x18>
    b7a2:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    b7a6:	2a43      	cmp	r2, #67	; 0x43
    b7a8:	d1e8      	bne.n	b77c <__cxa_rethrow+0x18>
    b7aa:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    b7ae:	2a43      	cmp	r2, #67	; 0x43
    b7b0:	d1e4      	bne.n	b77c <__cxa_rethrow+0x18>
    b7b2:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    b7b6:	2a2b      	cmp	r2, #43	; 0x2b
    b7b8:	d1e0      	bne.n	b77c <__cxa_rethrow+0x18>
    b7ba:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    b7be:	2a2b      	cmp	r2, #43	; 0x2b
    b7c0:	d1dc      	bne.n	b77c <__cxa_rethrow+0x18>
    b7c2:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
    b7c6:	2a01      	cmp	r2, #1
    b7c8:	d8d8      	bhi.n	b77c <__cxa_rethrow+0x18>
    b7ca:	6962      	ldr	r2, [r4, #20]
    b7cc:	4252      	negs	r2, r2
    b7ce:	6162      	str	r2, [r4, #20]
    b7d0:	e7d6      	b.n	b780 <__cxa_rethrow+0x1c>
    b7d2:	bf00      	nop

0000b7d4 <_ZSt15get_new_handlerv>:
    b7d4:	4b02      	ldr	r3, [pc, #8]	; (b7e0 <_ZSt15get_new_handlerv+0xc>)
    b7d6:	6818      	ldr	r0, [r3, #0]
    b7d8:	f3bf 8f5b 	dmb	ish
    b7dc:	4770      	bx	lr
    b7de:	bf00      	nop
    b7e0:	2000fbbc 	.word	0x2000fbbc

0000b7e4 <_ZNKSt11logic_error4whatEv>:
    b7e4:	6840      	ldr	r0, [r0, #4]
    b7e6:	4770      	bx	lr

0000b7e8 <_ZNSt11logic_errorD1Ev>:
    b7e8:	b510      	push	{r4, lr}
    b7ea:	6843      	ldr	r3, [r0, #4]
    b7ec:	4a0c      	ldr	r2, [pc, #48]	; (b820 <_ZNSt11logic_errorD1Ev+0x38>)
    b7ee:	490d      	ldr	r1, [pc, #52]	; (b824 <_ZNSt11logic_errorD1Ev+0x3c>)
    b7f0:	6001      	str	r1, [r0, #0]
    b7f2:	4604      	mov	r4, r0
    b7f4:	f1a3 000c 	sub.w	r0, r3, #12
    b7f8:	4290      	cmp	r0, r2
    b7fa:	b082      	sub	sp, #8
    b7fc:	d105      	bne.n	b80a <_ZNSt11logic_errorD1Ev+0x22>
    b7fe:	4620      	mov	r0, r4
    b800:	f7ff fbd0 	bl	afa4 <_ZNSt9exceptionD1Ev>
    b804:	4620      	mov	r0, r4
    b806:	b002      	add	sp, #8
    b808:	bd10      	pop	{r4, pc}
    b80a:	f853 2c04 	ldr.w	r2, [r3, #-4]
    b80e:	1e51      	subs	r1, r2, #1
    b810:	2a00      	cmp	r2, #0
    b812:	f843 1c04 	str.w	r1, [r3, #-4]
    b816:	dcf2      	bgt.n	b7fe <_ZNSt11logic_errorD1Ev+0x16>
    b818:	a901      	add	r1, sp, #4
    b81a:	f7ff f873 	bl	a904 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    b81e:	e7ee      	b.n	b7fe <_ZNSt11logic_errorD1Ev+0x16>
    b820:	2000fb60 	.word	0x2000fb60
    b824:	000237a8 	.word	0x000237a8

0000b828 <_ZNSt11logic_errorD0Ev>:
    b828:	b510      	push	{r4, lr}
    b82a:	4604      	mov	r4, r0
    b82c:	f7ff ffdc 	bl	b7e8 <_ZNSt11logic_errorD1Ev>
    b830:	4620      	mov	r0, r4
    b832:	f7fe fe11 	bl	a458 <_ZdlPv>
    b836:	4620      	mov	r0, r4
    b838:	bd10      	pop	{r4, pc}
    b83a:	bf00      	nop

0000b83c <_ZNSt12length_errorD1Ev>:
    b83c:	b510      	push	{r4, lr}
    b83e:	4b03      	ldr	r3, [pc, #12]	; (b84c <_ZNSt12length_errorD1Ev+0x10>)
    b840:	6003      	str	r3, [r0, #0]
    b842:	4604      	mov	r4, r0
    b844:	f7ff ffd0 	bl	b7e8 <_ZNSt11logic_errorD1Ev>
    b848:	4620      	mov	r0, r4
    b84a:	bd10      	pop	{r4, pc}
    b84c:	000237bc 	.word	0x000237bc

0000b850 <_ZNSt12length_errorD0Ev>:
    b850:	b510      	push	{r4, lr}
    b852:	4b05      	ldr	r3, [pc, #20]	; (b868 <_ZNSt12length_errorD0Ev+0x18>)
    b854:	6003      	str	r3, [r0, #0]
    b856:	4604      	mov	r4, r0
    b858:	f7ff ffc6 	bl	b7e8 <_ZNSt11logic_errorD1Ev>
    b85c:	4620      	mov	r0, r4
    b85e:	f7fe fdfb 	bl	a458 <_ZdlPv>
    b862:	4620      	mov	r0, r4
    b864:	bd10      	pop	{r4, pc}
    b866:	bf00      	nop
    b868:	000237bc 	.word	0x000237bc

0000b86c <_ZNSt11logic_errorC1EPKc>:
    b86c:	b510      	push	{r4, lr}
    b86e:	4b08      	ldr	r3, [pc, #32]	; (b890 <_ZNSt11logic_errorC1EPKc+0x24>)
    b870:	b082      	sub	sp, #8
    b872:	4604      	mov	r4, r0
    b874:	aa01      	add	r2, sp, #4
    b876:	f840 3b04 	str.w	r3, [r0], #4
    b87a:	f7ff f865 	bl	a948 <_ZNSsC1EPKcRKSaIcE>
    b87e:	4620      	mov	r0, r4
    b880:	b002      	add	sp, #8
    b882:	bd10      	pop	{r4, pc}
    b884:	4620      	mov	r0, r4
    b886:	f7ff fb8d 	bl	afa4 <_ZNSt9exceptionD1Ev>
    b88a:	f7ff fa3b 	bl	ad04 <__cxa_end_cleanup>
    b88e:	bf00      	nop
    b890:	000237a8 	.word	0x000237a8

0000b894 <_ZNSt12length_errorC1EPKc>:
    b894:	b510      	push	{r4, lr}
    b896:	4604      	mov	r4, r0
    b898:	f7ff ffe8 	bl	b86c <_ZNSt11logic_errorC1EPKc>
    b89c:	4b01      	ldr	r3, [pc, #4]	; (b8a4 <_ZNSt12length_errorC1EPKc+0x10>)
    b89e:	6023      	str	r3, [r4, #0]
    b8a0:	4620      	mov	r0, r4
    b8a2:	bd10      	pop	{r4, pc}
    b8a4:	000237bc 	.word	0x000237bc

0000b8a8 <_ZNSt12__cow_stringC1EPKcj>:
    b8a8:	b510      	push	{r4, lr}
    b8aa:	b082      	sub	sp, #8
    b8ac:	ab01      	add	r3, sp, #4
    b8ae:	4604      	mov	r4, r0
    b8b0:	f7ff f83c 	bl	a92c <_ZNSsC1EPKcjRKSaIcE>
    b8b4:	4620      	mov	r0, r4
    b8b6:	b002      	add	sp, #8
    b8b8:	bd10      	pop	{r4, pc}
    b8ba:	bf00      	nop

0000b8bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
    b8bc:	4b18      	ldr	r3, [pc, #96]	; (b920 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
    b8be:	681a      	ldr	r2, [r3, #0]
    b8c0:	07d1      	lsls	r1, r2, #31
    b8c2:	bf5c      	itt	pl
    b8c4:	2201      	movpl	r2, #1
    b8c6:	601a      	strpl	r2, [r3, #0]
    b8c8:	4b16      	ldr	r3, [pc, #88]	; (b924 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
    b8ca:	681a      	ldr	r2, [r3, #0]
    b8cc:	07d2      	lsls	r2, r2, #31
    b8ce:	bf5c      	itt	pl
    b8d0:	2201      	movpl	r2, #1
    b8d2:	601a      	strpl	r2, [r3, #0]
    b8d4:	4b14      	ldr	r3, [pc, #80]	; (b928 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
    b8d6:	681a      	ldr	r2, [r3, #0]
    b8d8:	07d0      	lsls	r0, r2, #31
    b8da:	bf5c      	itt	pl
    b8dc:	2201      	movpl	r2, #1
    b8de:	601a      	strpl	r2, [r3, #0]
    b8e0:	4b12      	ldr	r3, [pc, #72]	; (b92c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
    b8e2:	681a      	ldr	r2, [r3, #0]
    b8e4:	07d1      	lsls	r1, r2, #31
    b8e6:	bf5c      	itt	pl
    b8e8:	2201      	movpl	r2, #1
    b8ea:	601a      	strpl	r2, [r3, #0]
    b8ec:	4b10      	ldr	r3, [pc, #64]	; (b930 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
    b8ee:	681a      	ldr	r2, [r3, #0]
    b8f0:	07d2      	lsls	r2, r2, #31
    b8f2:	bf5c      	itt	pl
    b8f4:	2201      	movpl	r2, #1
    b8f6:	601a      	strpl	r2, [r3, #0]
    b8f8:	4b0e      	ldr	r3, [pc, #56]	; (b934 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
    b8fa:	681a      	ldr	r2, [r3, #0]
    b8fc:	07d0      	lsls	r0, r2, #31
    b8fe:	bf5c      	itt	pl
    b900:	2201      	movpl	r2, #1
    b902:	601a      	strpl	r2, [r3, #0]
    b904:	4b0c      	ldr	r3, [pc, #48]	; (b938 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
    b906:	681a      	ldr	r2, [r3, #0]
    b908:	07d1      	lsls	r1, r2, #31
    b90a:	bf5c      	itt	pl
    b90c:	2201      	movpl	r2, #1
    b90e:	601a      	strpl	r2, [r3, #0]
    b910:	4b0a      	ldr	r3, [pc, #40]	; (b93c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
    b912:	681a      	ldr	r2, [r3, #0]
    b914:	07d2      	lsls	r2, r2, #31
    b916:	bf5c      	itt	pl
    b918:	2201      	movpl	r2, #1
    b91a:	601a      	strpl	r2, [r3, #0]
    b91c:	4770      	bx	lr
    b91e:	bf00      	nop
    b920:	2000fbdc 	.word	0x2000fbdc
    b924:	2000fbd8 	.word	0x2000fbd8
    b928:	2000fbd4 	.word	0x2000fbd4
    b92c:	2000fbd0 	.word	0x2000fbd0
    b930:	2000fbcc 	.word	0x2000fbcc
    b934:	2000fbc8 	.word	0x2000fbc8
    b938:	2000fbc4 	.word	0x2000fbc4
    b93c:	2000fbc0 	.word	0x2000fbc0

0000b940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
    b940:	4b18      	ldr	r3, [pc, #96]	; (b9a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
    b942:	681a      	ldr	r2, [r3, #0]
    b944:	07d1      	lsls	r1, r2, #31
    b946:	bf5c      	itt	pl
    b948:	2201      	movpl	r2, #1
    b94a:	601a      	strpl	r2, [r3, #0]
    b94c:	4b16      	ldr	r3, [pc, #88]	; (b9a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
    b94e:	681a      	ldr	r2, [r3, #0]
    b950:	07d2      	lsls	r2, r2, #31
    b952:	bf5c      	itt	pl
    b954:	2201      	movpl	r2, #1
    b956:	601a      	strpl	r2, [r3, #0]
    b958:	4b14      	ldr	r3, [pc, #80]	; (b9ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
    b95a:	681a      	ldr	r2, [r3, #0]
    b95c:	07d0      	lsls	r0, r2, #31
    b95e:	bf5c      	itt	pl
    b960:	2201      	movpl	r2, #1
    b962:	601a      	strpl	r2, [r3, #0]
    b964:	4b12      	ldr	r3, [pc, #72]	; (b9b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
    b966:	681a      	ldr	r2, [r3, #0]
    b968:	07d1      	lsls	r1, r2, #31
    b96a:	bf5c      	itt	pl
    b96c:	2201      	movpl	r2, #1
    b96e:	601a      	strpl	r2, [r3, #0]
    b970:	4b10      	ldr	r3, [pc, #64]	; (b9b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
    b972:	681a      	ldr	r2, [r3, #0]
    b974:	07d2      	lsls	r2, r2, #31
    b976:	bf5c      	itt	pl
    b978:	2201      	movpl	r2, #1
    b97a:	601a      	strpl	r2, [r3, #0]
    b97c:	4b0e      	ldr	r3, [pc, #56]	; (b9b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
    b97e:	681a      	ldr	r2, [r3, #0]
    b980:	07d0      	lsls	r0, r2, #31
    b982:	bf5c      	itt	pl
    b984:	2201      	movpl	r2, #1
    b986:	601a      	strpl	r2, [r3, #0]
    b988:	4b0c      	ldr	r3, [pc, #48]	; (b9bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
    b98a:	681a      	ldr	r2, [r3, #0]
    b98c:	07d1      	lsls	r1, r2, #31
    b98e:	bf5c      	itt	pl
    b990:	2201      	movpl	r2, #1
    b992:	601a      	strpl	r2, [r3, #0]
    b994:	4b0a      	ldr	r3, [pc, #40]	; (b9c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
    b996:	681a      	ldr	r2, [r3, #0]
    b998:	07d2      	lsls	r2, r2, #31
    b99a:	bf5c      	itt	pl
    b99c:	2201      	movpl	r2, #1
    b99e:	601a      	strpl	r2, [r3, #0]
    b9a0:	4770      	bx	lr
    b9a2:	bf00      	nop
    b9a4:	2000fbfc 	.word	0x2000fbfc
    b9a8:	2000fbf8 	.word	0x2000fbf8
    b9ac:	2000fbf4 	.word	0x2000fbf4
    b9b0:	2000fbf0 	.word	0x2000fbf0
    b9b4:	2000fbec 	.word	0x2000fbec
    b9b8:	2000fbe8 	.word	0x2000fbe8
    b9bc:	2000fbe4 	.word	0x2000fbe4
    b9c0:	2000fbe0 	.word	0x2000fbe0

0000b9c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
    b9c4:	4b24      	ldr	r3, [pc, #144]	; (ba58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
    b9c6:	681a      	ldr	r2, [r3, #0]
    b9c8:	07d0      	lsls	r0, r2, #31
    b9ca:	bf5c      	itt	pl
    b9cc:	2201      	movpl	r2, #1
    b9ce:	601a      	strpl	r2, [r3, #0]
    b9d0:	4b22      	ldr	r3, [pc, #136]	; (ba5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
    b9d2:	681a      	ldr	r2, [r3, #0]
    b9d4:	07d1      	lsls	r1, r2, #31
    b9d6:	bf5c      	itt	pl
    b9d8:	2201      	movpl	r2, #1
    b9da:	601a      	strpl	r2, [r3, #0]
    b9dc:	4b20      	ldr	r3, [pc, #128]	; (ba60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
    b9de:	681a      	ldr	r2, [r3, #0]
    b9e0:	07d2      	lsls	r2, r2, #31
    b9e2:	bf5c      	itt	pl
    b9e4:	2201      	movpl	r2, #1
    b9e6:	601a      	strpl	r2, [r3, #0]
    b9e8:	4b1e      	ldr	r3, [pc, #120]	; (ba64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
    b9ea:	681a      	ldr	r2, [r3, #0]
    b9ec:	07d0      	lsls	r0, r2, #31
    b9ee:	bf5c      	itt	pl
    b9f0:	2201      	movpl	r2, #1
    b9f2:	601a      	strpl	r2, [r3, #0]
    b9f4:	4b1c      	ldr	r3, [pc, #112]	; (ba68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
    b9f6:	681a      	ldr	r2, [r3, #0]
    b9f8:	07d1      	lsls	r1, r2, #31
    b9fa:	bf5c      	itt	pl
    b9fc:	2201      	movpl	r2, #1
    b9fe:	601a      	strpl	r2, [r3, #0]
    ba00:	4b1a      	ldr	r3, [pc, #104]	; (ba6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
    ba02:	681a      	ldr	r2, [r3, #0]
    ba04:	07d2      	lsls	r2, r2, #31
    ba06:	bf5c      	itt	pl
    ba08:	2201      	movpl	r2, #1
    ba0a:	601a      	strpl	r2, [r3, #0]
    ba0c:	4b18      	ldr	r3, [pc, #96]	; (ba70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
    ba0e:	681a      	ldr	r2, [r3, #0]
    ba10:	07d0      	lsls	r0, r2, #31
    ba12:	bf5c      	itt	pl
    ba14:	2201      	movpl	r2, #1
    ba16:	601a      	strpl	r2, [r3, #0]
    ba18:	4b16      	ldr	r3, [pc, #88]	; (ba74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
    ba1a:	681a      	ldr	r2, [r3, #0]
    ba1c:	07d1      	lsls	r1, r2, #31
    ba1e:	bf5c      	itt	pl
    ba20:	2201      	movpl	r2, #1
    ba22:	601a      	strpl	r2, [r3, #0]
    ba24:	4b14      	ldr	r3, [pc, #80]	; (ba78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
    ba26:	681a      	ldr	r2, [r3, #0]
    ba28:	07d2      	lsls	r2, r2, #31
    ba2a:	bf5c      	itt	pl
    ba2c:	2201      	movpl	r2, #1
    ba2e:	601a      	strpl	r2, [r3, #0]
    ba30:	4b12      	ldr	r3, [pc, #72]	; (ba7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
    ba32:	681a      	ldr	r2, [r3, #0]
    ba34:	07d0      	lsls	r0, r2, #31
    ba36:	bf5c      	itt	pl
    ba38:	2201      	movpl	r2, #1
    ba3a:	601a      	strpl	r2, [r3, #0]
    ba3c:	4b10      	ldr	r3, [pc, #64]	; (ba80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
    ba3e:	681a      	ldr	r2, [r3, #0]
    ba40:	07d1      	lsls	r1, r2, #31
    ba42:	bf5c      	itt	pl
    ba44:	2201      	movpl	r2, #1
    ba46:	601a      	strpl	r2, [r3, #0]
    ba48:	4b0e      	ldr	r3, [pc, #56]	; (ba84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
    ba4a:	681a      	ldr	r2, [r3, #0]
    ba4c:	07d2      	lsls	r2, r2, #31
    ba4e:	bf5c      	itt	pl
    ba50:	2201      	movpl	r2, #1
    ba52:	601a      	strpl	r2, [r3, #0]
    ba54:	4770      	bx	lr
    ba56:	bf00      	nop
    ba58:	2000fc2c 	.word	0x2000fc2c
    ba5c:	2000fc28 	.word	0x2000fc28
    ba60:	2000fc24 	.word	0x2000fc24
    ba64:	2000fc20 	.word	0x2000fc20
    ba68:	2000fc1c 	.word	0x2000fc1c
    ba6c:	2000fc18 	.word	0x2000fc18
    ba70:	2000fc14 	.word	0x2000fc14
    ba74:	2000fc10 	.word	0x2000fc10
    ba78:	2000fc0c 	.word	0x2000fc0c
    ba7c:	2000fc08 	.word	0x2000fc08
    ba80:	2000fc04 	.word	0x2000fc04
    ba84:	2000fc00 	.word	0x2000fc00

0000ba88 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
    ba88:	7803      	ldrb	r3, [r0, #0]
    ba8a:	2b47      	cmp	r3, #71	; 0x47
    ba8c:	d001      	beq.n	ba92 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
    ba8e:	2000      	movs	r0, #0
    ba90:	4770      	bx	lr
    ba92:	7843      	ldrb	r3, [r0, #1]
    ba94:	2b4e      	cmp	r3, #78	; 0x4e
    ba96:	d1fa      	bne.n	ba8e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    ba98:	7883      	ldrb	r3, [r0, #2]
    ba9a:	2b55      	cmp	r3, #85	; 0x55
    ba9c:	d1f7      	bne.n	ba8e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    ba9e:	78c3      	ldrb	r3, [r0, #3]
    baa0:	2b43      	cmp	r3, #67	; 0x43
    baa2:	d1f4      	bne.n	ba8e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    baa4:	7903      	ldrb	r3, [r0, #4]
    baa6:	2b43      	cmp	r3, #67	; 0x43
    baa8:	d1f1      	bne.n	ba8e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    baaa:	7943      	ldrb	r3, [r0, #5]
    baac:	2b2b      	cmp	r3, #43	; 0x2b
    baae:	d1ee      	bne.n	ba8e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    bab0:	7983      	ldrb	r3, [r0, #6]
    bab2:	2b2b      	cmp	r3, #43	; 0x2b
    bab4:	d1eb      	bne.n	ba8e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    bab6:	79c0      	ldrb	r0, [r0, #7]
    bab8:	2801      	cmp	r0, #1
    baba:	bf8c      	ite	hi
    babc:	2000      	movhi	r0, #0
    babe:	2001      	movls	r0, #1
    bac0:	4770      	bx	lr
    bac2:	bf00      	nop

0000bac4 <__cxa_call_terminate>:
    bac4:	b510      	push	{r4, lr}
    bac6:	b130      	cbz	r0, bad6 <__cxa_call_terminate+0x12>
    bac8:	4604      	mov	r4, r0
    baca:	f7ff f9e7 	bl	ae9c <__cxa_begin_catch>
    bace:	4620      	mov	r0, r4
    bad0:	f7ff ffda 	bl	ba88 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
    bad4:	b908      	cbnz	r0, bada <__cxa_call_terminate+0x16>
    bad6:	f7ff fdbd 	bl	b654 <_ZSt9terminatev>
    bada:	f854 0c14 	ldr.w	r0, [r4, #-20]
    bade:	f7ff fda5 	bl	b62c <_ZN10__cxxabiv111__terminateEPFvvE>
    bae2:	bf00      	nop

0000bae4 <__cxa_call_unexpected>:
    bae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bae8:	b085      	sub	sp, #20
    baea:	4602      	mov	r2, r0
    baec:	f7ff ffcc 	bl	ba88 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
    baf0:	b160      	cbz	r0, bb0c <__cxa_call_unexpected+0x28>
    baf2:	f852 8c18 	ldr.w	r8, [r2, #-24]
    baf6:	f852 5c14 	ldr.w	r5, [r2, #-20]
    bafa:	6a96      	ldr	r6, [r2, #40]	; 0x28
    bafc:	6b17      	ldr	r7, [r2, #48]	; 0x30
    bafe:	6b54      	ldr	r4, [r2, #52]	; 0x34
    bb00:	4610      	mov	r0, r2
    bb02:	f7ff f9cb 	bl	ae9c <__cxa_begin_catch>
    bb06:	4640      	mov	r0, r8
    bb08:	f7ff fdae 	bl	b668 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    bb0c:	4610      	mov	r0, r2
    bb0e:	f7ff f9c5 	bl	ae9c <__cxa_begin_catch>
    bb12:	f7ff fdad 	bl	b670 <_ZSt10unexpectedv>
    bb16:	f7ff f9c1 	bl	ae9c <__cxa_begin_catch>
    bb1a:	f7ff fd9b 	bl	b654 <_ZSt9terminatev>
    bb1e:	f7ff f9bd 	bl	ae9c <__cxa_begin_catch>
    bb22:	f7ff fa53 	bl	afcc <__cxa_get_globals_fast>
    bb26:	6803      	ldr	r3, [r0, #0]
    bb28:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    bb2c:	2a01      	cmp	r2, #1
    bb2e:	d036      	beq.n	bb9e <__cxa_call_unexpected+0xba>
    bb30:	f103 0278 	add.w	r2, r3, #120	; 0x78
    bb34:	f10d 0a10 	add.w	sl, sp, #16
    bb38:	f04f 0800 	mov.w	r8, #0
    bb3c:	3320      	adds	r3, #32
    bb3e:	f84a 2d08 	str.w	r2, [sl, #-8]!
    bb42:	f027 0b03 	bic.w	fp, r7, #3
    bb46:	9301      	str	r3, [sp, #4]
    bb48:	46c1      	mov	r9, r8
    bb4a:	45b1      	cmp	r9, r6
    bb4c:	da1b      	bge.n	bb86 <__cxa_call_unexpected+0xa2>
    bb4e:	6827      	ldr	r7, [r4, #0]
    bb50:	b107      	cbz	r7, bb54 <__cxa_call_unexpected+0x70>
    bb52:	4427      	add	r7, r4
    bb54:	4653      	mov	r3, sl
    bb56:	2200      	movs	r2, #0
    bb58:	4639      	mov	r1, r7
    bb5a:	9801      	ldr	r0, [sp, #4]
    bb5c:	f7ff f8d8 	bl	ad10 <__cxa_type_match>
    bb60:	bb10      	cbnz	r0, bba8 <__cxa_call_unexpected+0xc4>
    bb62:	683b      	ldr	r3, [r7, #0]
    bb64:	4914      	ldr	r1, [pc, #80]	; (bbb8 <__cxa_call_unexpected+0xd4>)
    bb66:	691b      	ldr	r3, [r3, #16]
    bb68:	9300      	str	r3, [sp, #0]
    bb6a:	aa04      	add	r2, sp, #16
    bb6c:	2301      	movs	r3, #1
    bb6e:	f842 0d04 	str.w	r0, [r2, #-4]!
    bb72:	4638      	mov	r0, r7
    bb74:	9f00      	ldr	r7, [sp, #0]
    bb76:	47b8      	blx	r7
    bb78:	2800      	cmp	r0, #0
    bb7a:	bf18      	it	ne
    bb7c:	4680      	movne	r8, r0
    bb7e:	f109 0901 	add.w	r9, r9, #1
    bb82:	445c      	add	r4, fp
    bb84:	e7e1      	b.n	bb4a <__cxa_call_unexpected+0x66>
    bb86:	f1b8 0f00 	cmp.w	r8, #0
    bb8a:	d00a      	beq.n	bba2 <__cxa_call_unexpected+0xbe>
    bb8c:	2004      	movs	r0, #4
    bb8e:	f7ff f87d 	bl	ac8c <__cxa_allocate_exception>
    bb92:	4b0a      	ldr	r3, [pc, #40]	; (bbbc <__cxa_call_unexpected+0xd8>)
    bb94:	6003      	str	r3, [r0, #0]
    bb96:	4a0a      	ldr	r2, [pc, #40]	; (bbc0 <__cxa_call_unexpected+0xdc>)
    bb98:	4907      	ldr	r1, [pc, #28]	; (bbb8 <__cxa_call_unexpected+0xd4>)
    bb9a:	f7ff fda5 	bl	b6e8 <__cxa_throw>
    bb9e:	681a      	ldr	r2, [r3, #0]
    bba0:	e7c8      	b.n	bb34 <__cxa_call_unexpected+0x50>
    bba2:	4628      	mov	r0, r5
    bba4:	f7ff fd42 	bl	b62c <_ZN10__cxxabiv111__terminateEPFvvE>
    bba8:	f7ff fddc 	bl	b764 <__cxa_rethrow>
    bbac:	f7ff f9b4 	bl	af18 <__cxa_end_catch>
    bbb0:	f7ff f9b2 	bl	af18 <__cxa_end_catch>
    bbb4:	f7ff f8a6 	bl	ad04 <__cxa_end_cleanup>
    bbb8:	000236d4 	.word	0x000236d4
    bbbc:	00023758 	.word	0x00023758
    bbc0:	0000afa9 	.word	0x0000afa9

0000bbc4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
    bbc4:	b570      	push	{r4, r5, r6, lr}
    bbc6:	4b3c      	ldr	r3, [pc, #240]	; (bcb8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
    bbc8:	781a      	ldrb	r2, [r3, #0]
    bbca:	b082      	sub	sp, #8
    bbcc:	2a00      	cmp	r2, #0
    bbce:	d135      	bne.n	bc3c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
    bbd0:	2401      	movs	r4, #1
    bbd2:	701c      	strb	r4, [r3, #0]
    bbd4:	f006 fbd0 	bl	12378 <__cxa_current_exception_type>
    bbd8:	2800      	cmp	r0, #0
    bbda:	d05b      	beq.n	bc94 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>
    bbdc:	6844      	ldr	r4, [r0, #4]
    bbde:	4d37      	ldr	r5, [pc, #220]	; (bcbc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
    bbe0:	7823      	ldrb	r3, [r4, #0]
    bbe2:	2b2a      	cmp	r3, #42	; 0x2a
    bbe4:	ab02      	add	r3, sp, #8
    bbe6:	f04f 32ff 	mov.w	r2, #4294967295
    bbea:	bf08      	it	eq
    bbec:	3401      	addeq	r4, #1
    bbee:	f843 2d04 	str.w	r2, [r3, #-4]!
    bbf2:	2200      	movs	r2, #0
    bbf4:	4611      	mov	r1, r2
    bbf6:	4620      	mov	r0, r4
    bbf8:	f006 fb50 	bl	1229c <__cxa_demangle>
    bbfc:	682b      	ldr	r3, [r5, #0]
    bbfe:	4606      	mov	r6, r0
    bc00:	68db      	ldr	r3, [r3, #12]
    bc02:	482f      	ldr	r0, [pc, #188]	; (bcc0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
    bc04:	2230      	movs	r2, #48	; 0x30
    bc06:	2101      	movs	r1, #1
    bc08:	f009 fa38 	bl	1507c <fwrite>
    bc0c:	9b01      	ldr	r3, [sp, #4]
    bc0e:	b17b      	cbz	r3, bc30 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
    bc10:	682b      	ldr	r3, [r5, #0]
    bc12:	4620      	mov	r0, r4
    bc14:	68d9      	ldr	r1, [r3, #12]
    bc16:	f009 f847 	bl	14ca8 <fputs>
    bc1a:	682b      	ldr	r3, [r5, #0]
    bc1c:	4829      	ldr	r0, [pc, #164]	; (bcc4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
    bc1e:	68db      	ldr	r3, [r3, #12]
    bc20:	2202      	movs	r2, #2
    bc22:	2101      	movs	r1, #1
    bc24:	f009 fa2a 	bl	1507c <fwrite>
    bc28:	9b01      	ldr	r3, [sp, #4]
    bc2a:	b18b      	cbz	r3, bc50 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
    bc2c:	f7ff fd9a 	bl	b764 <__cxa_rethrow>
    bc30:	682b      	ldr	r3, [r5, #0]
    bc32:	4630      	mov	r0, r6
    bc34:	68d9      	ldr	r1, [r3, #12]
    bc36:	f009 f837 	bl	14ca8 <fputs>
    bc3a:	e7ee      	b.n	bc1a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
    bc3c:	4b1f      	ldr	r3, [pc, #124]	; (bcbc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
    bc3e:	4822      	ldr	r0, [pc, #136]	; (bcc8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
    bc40:	681b      	ldr	r3, [r3, #0]
    bc42:	221d      	movs	r2, #29
    bc44:	68db      	ldr	r3, [r3, #12]
    bc46:	2101      	movs	r1, #1
    bc48:	f009 fa18 	bl	1507c <fwrite>
    bc4c:	f008 ff76 	bl	14b3c <abort>
    bc50:	4630      	mov	r0, r6
    bc52:	f009 fae1 	bl	15218 <free>
    bc56:	e7e9      	b.n	bc2c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
    bc58:	2901      	cmp	r1, #1
    bc5a:	460c      	mov	r4, r1
    bc5c:	d127      	bne.n	bcae <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xea>
    bc5e:	f7ff f91d 	bl	ae9c <__cxa_begin_catch>
    bc62:	6803      	ldr	r3, [r0, #0]
    bc64:	689b      	ldr	r3, [r3, #8]
    bc66:	4798      	blx	r3
    bc68:	682b      	ldr	r3, [r5, #0]
    bc6a:	4606      	mov	r6, r0
    bc6c:	68db      	ldr	r3, [r3, #12]
    bc6e:	4817      	ldr	r0, [pc, #92]	; (bccc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
    bc70:	4621      	mov	r1, r4
    bc72:	220b      	movs	r2, #11
    bc74:	f009 fa02 	bl	1507c <fwrite>
    bc78:	682b      	ldr	r3, [r5, #0]
    bc7a:	4630      	mov	r0, r6
    bc7c:	68d9      	ldr	r1, [r3, #12]
    bc7e:	f009 f813 	bl	14ca8 <fputs>
    bc82:	682b      	ldr	r3, [r5, #0]
    bc84:	200a      	movs	r0, #10
    bc86:	68d9      	ldr	r1, [r3, #12]
    bc88:	f008 ff9e 	bl	14bc8 <fputc>
    bc8c:	f7ff f944 	bl	af18 <__cxa_end_catch>
    bc90:	f008 ff54 	bl	14b3c <abort>
    bc94:	4b09      	ldr	r3, [pc, #36]	; (bcbc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
    bc96:	480e      	ldr	r0, [pc, #56]	; (bcd0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
    bc98:	681b      	ldr	r3, [r3, #0]
    bc9a:	4621      	mov	r1, r4
    bc9c:	68db      	ldr	r3, [r3, #12]
    bc9e:	222d      	movs	r2, #45	; 0x2d
    bca0:	f009 f9ec 	bl	1507c <fwrite>
    bca4:	e7f4      	b.n	bc90 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
    bca6:	f7ff f937 	bl	af18 <__cxa_end_catch>
    bcaa:	f7ff f82b 	bl	ad04 <__cxa_end_cleanup>
    bcae:	f7ff f8f5 	bl	ae9c <__cxa_begin_catch>
    bcb2:	f7ff f931 	bl	af18 <__cxa_end_catch>
    bcb6:	e7eb      	b.n	bc90 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
    bcb8:	2000fc30 	.word	0x2000fc30
    bcbc:	20000020 	.word	0x20000020
    bcc0:	000237e8 	.word	0x000237e8
    bcc4:	0002381c 	.word	0x0002381c
    bcc8:	000237c8 	.word	0x000237c8
    bccc:	00023850 	.word	0x00023850
    bcd0:	00023820 	.word	0x00023820

0000bcd4 <d_make_comp>:
    bcd4:	b470      	push	{r4, r5, r6}
    bcd6:	1e4c      	subs	r4, r1, #1
    bcd8:	2c4c      	cmp	r4, #76	; 0x4c
    bcda:	d82d      	bhi.n	bd38 <d_make_comp+0x64>
    bcdc:	e8df f004 	tbb	[pc, r4]
    bce0:	3c3c3c3c 	.word	0x3c3c3c3c
    bce4:	2c2c2c2c 	.word	0x2c2c2c2c
    bce8:	273c2727 	.word	0x273c2727
    bcec:	27272727 	.word	0x27272727
    bcf0:	27272727 	.word	0x27272727
    bcf4:	2c272727 	.word	0x2c272727
    bcf8:	28282828 	.word	0x28282828
    bcfc:	28282828 	.word	0x28282828
    bd00:	2727273c 	.word	0x2727273c
    bd04:	272c2727 	.word	0x272c2727
    bd08:	2c3c3e28 	.word	0x2c3c3e28
    bd0c:	3e28283c 	.word	0x3e28283c
    bd10:	27272c2c 	.word	0x27272c2c
    bd14:	3c3c3c27 	.word	0x3c3c3c27
    bd18:	3c273c3c 	.word	0x3c273c3c
    bd1c:	2c3c273c 	.word	0x2c3c273c
    bd20:	2727272c 	.word	0x2727272c
    bd24:	272c2c2c 	.word	0x272c2c2c
    bd28:	283c2727 	.word	0x283c2727
    bd2c:	3c          	.byte	0x3c
    bd2d:	00          	.byte	0x00
    bd2e:	b11a      	cbz	r2, bd38 <d_make_comp+0x64>
    bd30:	6944      	ldr	r4, [r0, #20]
    bd32:	6985      	ldr	r5, [r0, #24]
    bd34:	42ac      	cmp	r4, r5
    bd36:	db02      	blt.n	bd3e <d_make_comp+0x6a>
    bd38:	2000      	movs	r0, #0
    bd3a:	bc70      	pop	{r4, r5, r6}
    bd3c:	4770      	bx	lr
    bd3e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    bd42:	6906      	ldr	r6, [r0, #16]
    bd44:	00ad      	lsls	r5, r5, #2
    bd46:	3401      	adds	r4, #1
    bd48:	6144      	str	r4, [r0, #20]
    bd4a:	1970      	adds	r0, r6, r5
    bd4c:	d0f5      	beq.n	bd3a <d_make_comp+0x66>
    bd4e:	5571      	strb	r1, [r6, r5]
    bd50:	6042      	str	r2, [r0, #4]
    bd52:	6083      	str	r3, [r0, #8]
    bd54:	bc70      	pop	{r4, r5, r6}
    bd56:	4770      	bx	lr
    bd58:	2a00      	cmp	r2, #0
    bd5a:	d0ed      	beq.n	bd38 <d_make_comp+0x64>
    bd5c:	2b00      	cmp	r3, #0
    bd5e:	d0eb      	beq.n	bd38 <d_make_comp+0x64>
    bd60:	6944      	ldr	r4, [r0, #20]
    bd62:	6985      	ldr	r5, [r0, #24]
    bd64:	42ac      	cmp	r4, r5
    bd66:	dae7      	bge.n	bd38 <d_make_comp+0x64>
    bd68:	e7e9      	b.n	bd3e <d_make_comp+0x6a>
    bd6a:	bf00      	nop

0000bd6c <d_cv_qualifiers>:
    bd6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bd70:	68c3      	ldr	r3, [r0, #12]
    bd72:	f1b2 0a00 	subs.w	sl, r2, #0
    bd76:	4604      	mov	r4, r0
    bd78:	460e      	mov	r6, r1
    bd7a:	781a      	ldrb	r2, [r3, #0]
    bd7c:	bf15      	itete	ne
    bd7e:	f04f 091e 	movne.w	r9, #30
    bd82:	f04f 091b 	moveq.w	r9, #27
    bd86:	f04f 081d 	movne.w	r8, #29
    bd8a:	f04f 081a 	moveq.w	r8, #26
    bd8e:	bf14      	ite	ne
    bd90:	271c      	movne	r7, #28
    bd92:	2719      	moveq	r7, #25
    bd94:	460d      	mov	r5, r1
    bd96:	e018      	b.n	bdca <d_cv_qualifiers+0x5e>
    bd98:	2a56      	cmp	r2, #86	; 0x56
    bd9a:	d01f      	beq.n	bddc <d_cv_qualifiers+0x70>
    bd9c:	2a4b      	cmp	r2, #75	; 0x4b
    bd9e:	d024      	beq.n	bdea <d_cv_qualifiers+0x7e>
    bda0:	2a44      	cmp	r2, #68	; 0x44
    bda2:	d12d      	bne.n	be00 <d_cv_qualifiers+0x94>
    bda4:	785a      	ldrb	r2, [r3, #1]
    bda6:	2a78      	cmp	r2, #120	; 0x78
    bda8:	d127      	bne.n	bdfa <d_cv_qualifiers+0x8e>
    bdaa:	6b22      	ldr	r2, [r4, #48]	; 0x30
    bdac:	3302      	adds	r3, #2
    bdae:	3211      	adds	r2, #17
    bdb0:	60e3      	str	r3, [r4, #12]
    bdb2:	6322      	str	r2, [r4, #48]	; 0x30
    bdb4:	214c      	movs	r1, #76	; 0x4c
    bdb6:	2300      	movs	r3, #0
    bdb8:	461a      	mov	r2, r3
    bdba:	4620      	mov	r0, r4
    bdbc:	f7ff ff8a 	bl	bcd4 <d_make_comp>
    bdc0:	6028      	str	r0, [r5, #0]
    bdc2:	b1c8      	cbz	r0, bdf8 <d_cv_qualifiers+0x8c>
    bdc4:	68e3      	ldr	r3, [r4, #12]
    bdc6:	781a      	ldrb	r2, [r3, #0]
    bdc8:	1d05      	adds	r5, r0, #4
    bdca:	2a72      	cmp	r2, #114	; 0x72
    bdcc:	d1e4      	bne.n	bd98 <d_cv_qualifiers+0x2c>
    bdce:	6b22      	ldr	r2, [r4, #48]	; 0x30
    bdd0:	3301      	adds	r3, #1
    bdd2:	3209      	adds	r2, #9
    bdd4:	60e3      	str	r3, [r4, #12]
    bdd6:	6322      	str	r2, [r4, #48]	; 0x30
    bdd8:	4639      	mov	r1, r7
    bdda:	e7ec      	b.n	bdb6 <d_cv_qualifiers+0x4a>
    bddc:	6b22      	ldr	r2, [r4, #48]	; 0x30
    bdde:	3301      	adds	r3, #1
    bde0:	3209      	adds	r2, #9
    bde2:	60e3      	str	r3, [r4, #12]
    bde4:	6322      	str	r2, [r4, #48]	; 0x30
    bde6:	4641      	mov	r1, r8
    bde8:	e7e5      	b.n	bdb6 <d_cv_qualifiers+0x4a>
    bdea:	6b22      	ldr	r2, [r4, #48]	; 0x30
    bdec:	3301      	adds	r3, #1
    bdee:	3206      	adds	r2, #6
    bdf0:	60e3      	str	r3, [r4, #12]
    bdf2:	6322      	str	r2, [r4, #48]	; 0x30
    bdf4:	4649      	mov	r1, r9
    bdf6:	e7de      	b.n	bdb6 <d_cv_qualifiers+0x4a>
    bdf8:	4605      	mov	r5, r0
    bdfa:	4628      	mov	r0, r5
    bdfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    be00:	f1ba 0f00 	cmp.w	sl, #0
    be04:	d1f9      	bne.n	bdfa <d_cv_qualifiers+0x8e>
    be06:	2a46      	cmp	r2, #70	; 0x46
    be08:	d1f7      	bne.n	bdfa <d_cv_qualifiers+0x8e>
    be0a:	42b5      	cmp	r5, r6
    be0c:	d0f5      	beq.n	bdfa <d_cv_qualifiers+0x8e>
    be0e:	201d      	movs	r0, #29
    be10:	211e      	movs	r1, #30
    be12:	221c      	movs	r2, #28
    be14:	e007      	b.n	be26 <d_cv_qualifiers+0xba>
    be16:	2b1b      	cmp	r3, #27
    be18:	d00b      	beq.n	be32 <d_cv_qualifiers+0xc6>
    be1a:	2b19      	cmp	r3, #25
    be1c:	d100      	bne.n	be20 <d_cv_qualifiers+0xb4>
    be1e:	7032      	strb	r2, [r6, #0]
    be20:	3604      	adds	r6, #4
    be22:	42b5      	cmp	r5, r6
    be24:	d0e9      	beq.n	bdfa <d_cv_qualifiers+0x8e>
    be26:	6836      	ldr	r6, [r6, #0]
    be28:	7833      	ldrb	r3, [r6, #0]
    be2a:	2b1a      	cmp	r3, #26
    be2c:	d1f3      	bne.n	be16 <d_cv_qualifiers+0xaa>
    be2e:	7030      	strb	r0, [r6, #0]
    be30:	e7f6      	b.n	be20 <d_cv_qualifiers+0xb4>
    be32:	7031      	strb	r1, [r6, #0]
    be34:	e7f4      	b.n	be20 <d_cv_qualifiers+0xb4>
    be36:	bf00      	nop

0000be38 <d_ref_qualifier>:
    be38:	b410      	push	{r4}
    be3a:	68c3      	ldr	r3, [r0, #12]
    be3c:	781c      	ldrb	r4, [r3, #0]
    be3e:	2c52      	cmp	r4, #82	; 0x52
    be40:	460a      	mov	r2, r1
    be42:	d00d      	beq.n	be60 <d_ref_qualifier+0x28>
    be44:	2c4f      	cmp	r4, #79	; 0x4f
    be46:	d002      	beq.n	be4e <d_ref_qualifier+0x16>
    be48:	4608      	mov	r0, r1
    be4a:	bc10      	pop	{r4}
    be4c:	4770      	bx	lr
    be4e:	6b01      	ldr	r1, [r0, #48]	; 0x30
    be50:	3103      	adds	r1, #3
    be52:	6301      	str	r1, [r0, #48]	; 0x30
    be54:	2120      	movs	r1, #32
    be56:	3301      	adds	r3, #1
    be58:	60c3      	str	r3, [r0, #12]
    be5a:	bc10      	pop	{r4}
    be5c:	2300      	movs	r3, #0
    be5e:	e739      	b.n	bcd4 <d_make_comp>
    be60:	6b01      	ldr	r1, [r0, #48]	; 0x30
    be62:	3102      	adds	r1, #2
    be64:	6301      	str	r1, [r0, #48]	; 0x30
    be66:	211f      	movs	r1, #31
    be68:	e7f5      	b.n	be56 <d_ref_qualifier+0x1e>
    be6a:	bf00      	nop

0000be6c <d_count_templates_scopes>:
    be6c:	2a00      	cmp	r2, #0
    be6e:	d04d      	beq.n	bf0c <d_count_templates_scopes+0xa0>
    be70:	b570      	push	{r4, r5, r6, lr}
    be72:	4605      	mov	r5, r0
    be74:	460e      	mov	r6, r1
    be76:	4614      	mov	r4, r2
    be78:	7823      	ldrb	r3, [r4, #0]
    be7a:	3b01      	subs	r3, #1
    be7c:	2b4c      	cmp	r3, #76	; 0x4c
    be7e:	d82b      	bhi.n	bed8 <d_count_templates_scopes+0x6c>
    be80:	e8df f003 	tbb	[pc, r3]
    be84:	3f363636 	.word	0x3f363636
    be88:	27272a2a 	.word	0x27272a2a
    be8c:	36363636 	.word	0x36363636
    be90:	36363636 	.word	0x36363636
    be94:	36363636 	.word	0x36363636
    be98:	2a363636 	.word	0x2a363636
    be9c:	36363636 	.word	0x36363636
    bea0:	36363636 	.word	0x36363636
    bea4:	2f2f3636 	.word	0x2f2f3636
    bea8:	362a3636 	.word	0x362a3636
    beac:	2b363636 	.word	0x2b363636
    beb0:	36363636 	.word	0x36363636
    beb4:	3636272a 	.word	0x3636272a
    beb8:	36363636 	.word	0x36363636
    bebc:	36363636 	.word	0x36363636
    bec0:	2a363636 	.word	0x2a363636
    bec4:	2b2b362a 	.word	0x2b2b362a
    bec8:	362a2b2b 	.word	0x362a2b2b
    becc:	36363636 	.word	0x36363636
    bed0:	36          	.byte	0x36
    bed1:	00          	.byte	0x00
    bed2:	68a4      	ldr	r4, [r4, #8]
    bed4:	2c00      	cmp	r4, #0
    bed6:	d1cf      	bne.n	be78 <d_count_templates_scopes+0xc>
    bed8:	bd70      	pop	{r4, r5, r6, pc}
    beda:	6864      	ldr	r4, [r4, #4]
    bedc:	2c00      	cmp	r4, #0
    bede:	d1cb      	bne.n	be78 <d_count_templates_scopes+0xc>
    bee0:	e7fa      	b.n	bed8 <d_count_templates_scopes+0x6c>
    bee2:	6862      	ldr	r2, [r4, #4]
    bee4:	7813      	ldrb	r3, [r2, #0]
    bee6:	2b05      	cmp	r3, #5
    bee8:	d103      	bne.n	bef2 <d_count_templates_scopes+0x86>
    beea:	6833      	ldr	r3, [r6, #0]
    beec:	3301      	adds	r3, #1
    beee:	6033      	str	r3, [r6, #0]
    bef0:	6862      	ldr	r2, [r4, #4]
    bef2:	4631      	mov	r1, r6
    bef4:	4628      	mov	r0, r5
    bef6:	f7ff ffb9 	bl	be6c <d_count_templates_scopes>
    befa:	68a4      	ldr	r4, [r4, #8]
    befc:	2c00      	cmp	r4, #0
    befe:	d1bb      	bne.n	be78 <d_count_templates_scopes+0xc>
    bf00:	e7ea      	b.n	bed8 <d_count_templates_scopes+0x6c>
    bf02:	682b      	ldr	r3, [r5, #0]
    bf04:	3301      	adds	r3, #1
    bf06:	602b      	str	r3, [r5, #0]
    bf08:	6862      	ldr	r2, [r4, #4]
    bf0a:	e7f2      	b.n	bef2 <d_count_templates_scopes+0x86>
    bf0c:	4770      	bx	lr
    bf0e:	bf00      	nop

0000bf10 <d_append_buffer>:
    bf10:	b37a      	cbz	r2, bf72 <d_append_buffer+0x62>
    bf12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf16:	460d      	mov	r5, r1
    bf18:	4604      	mov	r4, r0
    bf1a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    bf1e:	18af      	adds	r7, r5, r2
    bf20:	f04f 0800 	mov.w	r8, #0
    bf24:	e009      	b.n	bf3a <d_append_buffer+0x2a>
    bf26:	460b      	mov	r3, r1
    bf28:	42bd      	cmp	r5, r7
    bf2a:	f101 0101 	add.w	r1, r1, #1
    bf2e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    bf32:	54e6      	strb	r6, [r4, r3]
    bf34:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    bf38:	d019      	beq.n	bf6e <d_append_buffer+0x5e>
    bf3a:	29ff      	cmp	r1, #255	; 0xff
    bf3c:	f815 6b01 	ldrb.w	r6, [r5], #1
    bf40:	d1f1      	bne.n	bf26 <d_append_buffer+0x16>
    bf42:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    bf46:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    bf4a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    bf4e:	4620      	mov	r0, r4
    bf50:	4798      	blx	r3
    bf52:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    bf56:	3301      	adds	r3, #1
    bf58:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    bf5c:	2300      	movs	r3, #0
    bf5e:	2101      	movs	r1, #1
    bf60:	42bd      	cmp	r5, r7
    bf62:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    bf66:	54e6      	strb	r6, [r4, r3]
    bf68:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    bf6c:	d1e5      	bne.n	bf3a <d_append_buffer+0x2a>
    bf6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf72:	4770      	bx	lr

0000bf74 <d_number.isra.0>:
    bf74:	b470      	push	{r4, r5, r6}
    bf76:	6802      	ldr	r2, [r0, #0]
    bf78:	7811      	ldrb	r1, [r2, #0]
    bf7a:	296e      	cmp	r1, #110	; 0x6e
    bf7c:	d018      	beq.n	bfb0 <d_number.isra.0+0x3c>
    bf7e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    bf82:	2b09      	cmp	r3, #9
    bf84:	d81e      	bhi.n	bfc4 <d_number.isra.0+0x50>
    bf86:	2600      	movs	r6, #0
    bf88:	2300      	movs	r3, #0
    bf8a:	3201      	adds	r2, #1
    bf8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    bf90:	6002      	str	r2, [r0, #0]
    bf92:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    bf96:	7811      	ldrb	r1, [r2, #0]
    bf98:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
    bf9c:	2d09      	cmp	r5, #9
    bf9e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    bfa2:	d9f2      	bls.n	bf8a <d_number.isra.0+0x16>
    bfa4:	b10e      	cbz	r6, bfaa <d_number.isra.0+0x36>
    bfa6:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
    bfaa:	4618      	mov	r0, r3
    bfac:	bc70      	pop	{r4, r5, r6}
    bfae:	4770      	bx	lr
    bfb0:	1c53      	adds	r3, r2, #1
    bfb2:	6003      	str	r3, [r0, #0]
    bfb4:	7851      	ldrb	r1, [r2, #1]
    bfb6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    bfba:	2a09      	cmp	r2, #9
    bfbc:	d802      	bhi.n	bfc4 <d_number.isra.0+0x50>
    bfbe:	461a      	mov	r2, r3
    bfc0:	2601      	movs	r6, #1
    bfc2:	e7e1      	b.n	bf88 <d_number.isra.0+0x14>
    bfc4:	2300      	movs	r3, #0
    bfc6:	e7f0      	b.n	bfaa <d_number.isra.0+0x36>

0000bfc8 <d_number_component>:
    bfc8:	6943      	ldr	r3, [r0, #20]
    bfca:	6982      	ldr	r2, [r0, #24]
    bfcc:	4293      	cmp	r3, r2
    bfce:	b510      	push	{r4, lr}
    bfd0:	da0f      	bge.n	bff2 <d_number_component+0x2a>
    bfd2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    bfd6:	6901      	ldr	r1, [r0, #16]
    bfd8:	0092      	lsls	r2, r2, #2
    bfda:	3301      	adds	r3, #1
    bfdc:	188c      	adds	r4, r1, r2
    bfde:	6143      	str	r3, [r0, #20]
    bfe0:	d005      	beq.n	bfee <d_number_component+0x26>
    bfe2:	2341      	movs	r3, #65	; 0x41
    bfe4:	300c      	adds	r0, #12
    bfe6:	548b      	strb	r3, [r1, r2]
    bfe8:	f7ff ffc4 	bl	bf74 <d_number.isra.0>
    bfec:	6060      	str	r0, [r4, #4]
    bfee:	4620      	mov	r0, r4
    bff0:	bd10      	pop	{r4, pc}
    bff2:	2400      	movs	r4, #0
    bff4:	4620      	mov	r0, r4
    bff6:	bd10      	pop	{r4, pc}

0000bff8 <d_compact_number>:
    bff8:	b510      	push	{r4, lr}
    bffa:	68c3      	ldr	r3, [r0, #12]
    bffc:	781a      	ldrb	r2, [r3, #0]
    bffe:	2a5f      	cmp	r2, #95	; 0x5f
    c000:	4604      	mov	r4, r0
    c002:	d00d      	beq.n	c020 <d_compact_number+0x28>
    c004:	2a6e      	cmp	r2, #110	; 0x6e
    c006:	d00f      	beq.n	c028 <d_compact_number+0x30>
    c008:	300c      	adds	r0, #12
    c00a:	f7ff ffb3 	bl	bf74 <d_number.isra.0>
    c00e:	3001      	adds	r0, #1
    c010:	d40a      	bmi.n	c028 <d_compact_number+0x30>
    c012:	68e3      	ldr	r3, [r4, #12]
    c014:	781a      	ldrb	r2, [r3, #0]
    c016:	2a5f      	cmp	r2, #95	; 0x5f
    c018:	d106      	bne.n	c028 <d_compact_number+0x30>
    c01a:	3301      	adds	r3, #1
    c01c:	60e3      	str	r3, [r4, #12]
    c01e:	bd10      	pop	{r4, pc}
    c020:	3301      	adds	r3, #1
    c022:	2000      	movs	r0, #0
    c024:	60e3      	str	r3, [r4, #12]
    c026:	bd10      	pop	{r4, pc}
    c028:	f04f 30ff 	mov.w	r0, #4294967295
    c02c:	bd10      	pop	{r4, pc}
    c02e:	bf00      	nop

0000c030 <d_template_param>:
    c030:	b538      	push	{r3, r4, r5, lr}
    c032:	68c3      	ldr	r3, [r0, #12]
    c034:	781a      	ldrb	r2, [r3, #0]
    c036:	2a54      	cmp	r2, #84	; 0x54
    c038:	d001      	beq.n	c03e <d_template_param+0xe>
    c03a:	2000      	movs	r0, #0
    c03c:	bd38      	pop	{r3, r4, r5, pc}
    c03e:	3301      	adds	r3, #1
    c040:	60c3      	str	r3, [r0, #12]
    c042:	4604      	mov	r4, r0
    c044:	f7ff ffd8 	bl	bff8 <d_compact_number>
    c048:	1e05      	subs	r5, r0, #0
    c04a:	dbf6      	blt.n	c03a <d_template_param+0xa>
    c04c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    c04e:	6963      	ldr	r3, [r4, #20]
    c050:	69a1      	ldr	r1, [r4, #24]
    c052:	3201      	adds	r2, #1
    c054:	428b      	cmp	r3, r1
    c056:	62a2      	str	r2, [r4, #40]	; 0x28
    c058:	daef      	bge.n	c03a <d_template_param+0xa>
    c05a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    c05e:	6921      	ldr	r1, [r4, #16]
    c060:	0092      	lsls	r2, r2, #2
    c062:	3301      	adds	r3, #1
    c064:	1888      	adds	r0, r1, r2
    c066:	6163      	str	r3, [r4, #20]
    c068:	d002      	beq.n	c070 <d_template_param+0x40>
    c06a:	2305      	movs	r3, #5
    c06c:	548b      	strb	r3, [r1, r2]
    c06e:	6045      	str	r5, [r0, #4]
    c070:	bd38      	pop	{r3, r4, r5, pc}
    c072:	bf00      	nop

0000c074 <d_source_name>:
    c074:	b570      	push	{r4, r5, r6, lr}
    c076:	4604      	mov	r4, r0
    c078:	300c      	adds	r0, #12
    c07a:	f7ff ff7b 	bl	bf74 <d_number.isra.0>
    c07e:	1e06      	subs	r6, r0, #0
    c080:	dd4d      	ble.n	c11e <d_source_name+0xaa>
    c082:	68e5      	ldr	r5, [r4, #12]
    c084:	6863      	ldr	r3, [r4, #4]
    c086:	1b5b      	subs	r3, r3, r5
    c088:	429e      	cmp	r6, r3
    c08a:	dc2b      	bgt.n	c0e4 <d_source_name+0x70>
    c08c:	68a2      	ldr	r2, [r4, #8]
    c08e:	19ab      	adds	r3, r5, r6
    c090:	0752      	lsls	r2, r2, #29
    c092:	60e3      	str	r3, [r4, #12]
    c094:	d504      	bpl.n	c0a0 <d_source_name+0x2c>
    c096:	5daa      	ldrb	r2, [r5, r6]
    c098:	2a24      	cmp	r2, #36	; 0x24
    c09a:	bf04      	itt	eq
    c09c:	3301      	addeq	r3, #1
    c09e:	60e3      	streq	r3, [r4, #12]
    c0a0:	2e09      	cmp	r6, #9
    c0a2:	dd0c      	ble.n	c0be <d_source_name+0x4a>
    c0a4:	2208      	movs	r2, #8
    c0a6:	491f      	ldr	r1, [pc, #124]	; (c124 <d_source_name+0xb0>)
    c0a8:	4628      	mov	r0, r5
    c0aa:	f009 fbd9 	bl	15860 <memcmp>
    c0ae:	b930      	cbnz	r0, c0be <d_source_name+0x4a>
    c0b0:	7a2b      	ldrb	r3, [r5, #8]
    c0b2:	2b2e      	cmp	r3, #46	; 0x2e
    c0b4:	d019      	beq.n	c0ea <d_source_name+0x76>
    c0b6:	2b5f      	cmp	r3, #95	; 0x5f
    c0b8:	d017      	beq.n	c0ea <d_source_name+0x76>
    c0ba:	2b24      	cmp	r3, #36	; 0x24
    c0bc:	d015      	beq.n	c0ea <d_source_name+0x76>
    c0be:	6963      	ldr	r3, [r4, #20]
    c0c0:	69a2      	ldr	r2, [r4, #24]
    c0c2:	4293      	cmp	r3, r2
    c0c4:	da0e      	bge.n	c0e4 <d_source_name+0x70>
    c0c6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    c0ca:	6921      	ldr	r1, [r4, #16]
    c0cc:	0092      	lsls	r2, r2, #2
    c0ce:	3301      	adds	r3, #1
    c0d0:	1888      	adds	r0, r1, r2
    c0d2:	6163      	str	r3, [r4, #20]
    c0d4:	d006      	beq.n	c0e4 <d_source_name+0x70>
    c0d6:	b12d      	cbz	r5, c0e4 <d_source_name+0x70>
    c0d8:	2300      	movs	r3, #0
    c0da:	548b      	strb	r3, [r1, r2]
    c0dc:	6045      	str	r5, [r0, #4]
    c0de:	6086      	str	r6, [r0, #8]
    c0e0:	62e0      	str	r0, [r4, #44]	; 0x2c
    c0e2:	bd70      	pop	{r4, r5, r6, pc}
    c0e4:	2000      	movs	r0, #0
    c0e6:	62e0      	str	r0, [r4, #44]	; 0x2c
    c0e8:	bd70      	pop	{r4, r5, r6, pc}
    c0ea:	7a6b      	ldrb	r3, [r5, #9]
    c0ec:	2b4e      	cmp	r3, #78	; 0x4e
    c0ee:	d1e6      	bne.n	c0be <d_source_name+0x4a>
    c0f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c0f2:	6962      	ldr	r2, [r4, #20]
    c0f4:	69a1      	ldr	r1, [r4, #24]
    c0f6:	3316      	adds	r3, #22
    c0f8:	1b9e      	subs	r6, r3, r6
    c0fa:	428a      	cmp	r2, r1
    c0fc:	6326      	str	r6, [r4, #48]	; 0x30
    c0fe:	daf1      	bge.n	c0e4 <d_source_name+0x70>
    c100:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    c104:	6921      	ldr	r1, [r4, #16]
    c106:	009b      	lsls	r3, r3, #2
    c108:	3201      	adds	r2, #1
    c10a:	18c8      	adds	r0, r1, r3
    c10c:	6162      	str	r2, [r4, #20]
    c10e:	d0ea      	beq.n	c0e6 <d_source_name+0x72>
    c110:	2500      	movs	r5, #0
    c112:	54cd      	strb	r5, [r1, r3]
    c114:	4a04      	ldr	r2, [pc, #16]	; (c128 <d_source_name+0xb4>)
    c116:	6042      	str	r2, [r0, #4]
    c118:	2315      	movs	r3, #21
    c11a:	6083      	str	r3, [r0, #8]
    c11c:	e7e3      	b.n	c0e6 <d_source_name+0x72>
    c11e:	2000      	movs	r0, #0
    c120:	bd70      	pop	{r4, r5, r6, pc}
    c122:	bf00      	nop
    c124:	00023ff4 	.word	0x00023ff4
    c128:	00024000 	.word	0x00024000

0000c12c <d_abi_tags>:
    c12c:	b570      	push	{r4, r5, r6, lr}
    c12e:	68c3      	ldr	r3, [r0, #12]
    c130:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
    c132:	781a      	ldrb	r2, [r3, #0]
    c134:	2a42      	cmp	r2, #66	; 0x42
    c136:	4604      	mov	r4, r0
    c138:	460d      	mov	r5, r1
    c13a:	d10f      	bne.n	c15c <d_abi_tags+0x30>
    c13c:	3301      	adds	r3, #1
    c13e:	60e3      	str	r3, [r4, #12]
    c140:	4620      	mov	r0, r4
    c142:	f7ff ff97 	bl	c074 <d_source_name>
    c146:	462a      	mov	r2, r5
    c148:	4603      	mov	r3, r0
    c14a:	214b      	movs	r1, #75	; 0x4b
    c14c:	4620      	mov	r0, r4
    c14e:	f7ff fdc1 	bl	bcd4 <d_make_comp>
    c152:	68e3      	ldr	r3, [r4, #12]
    c154:	781a      	ldrb	r2, [r3, #0]
    c156:	2a42      	cmp	r2, #66	; 0x42
    c158:	4605      	mov	r5, r0
    c15a:	d0ef      	beq.n	c13c <d_abi_tags+0x10>
    c15c:	62e6      	str	r6, [r4, #44]	; 0x2c
    c15e:	4628      	mov	r0, r5
    c160:	bd70      	pop	{r4, r5, r6, pc}
    c162:	bf00      	nop

0000c164 <d_substitution>:
    c164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c168:	4605      	mov	r5, r0
    c16a:	68c0      	ldr	r0, [r0, #12]
    c16c:	7803      	ldrb	r3, [r0, #0]
    c16e:	2b53      	cmp	r3, #83	; 0x53
    c170:	d002      	beq.n	c178 <d_substitution+0x14>
    c172:	2000      	movs	r0, #0
    c174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c178:	1c43      	adds	r3, r0, #1
    c17a:	60eb      	str	r3, [r5, #12]
    c17c:	7842      	ldrb	r2, [r0, #1]
    c17e:	b1a2      	cbz	r2, c1aa <d_substitution+0x46>
    c180:	1c83      	adds	r3, r0, #2
    c182:	60eb      	str	r3, [r5, #12]
    c184:	7842      	ldrb	r2, [r0, #1]
    c186:	2a5f      	cmp	r2, #95	; 0x5f
    c188:	d15a      	bne.n	c240 <d_substitution+0xdc>
    c18a:	2300      	movs	r3, #0
    c18c:	6a2a      	ldr	r2, [r5, #32]
    c18e:	4293      	cmp	r3, r2
    c190:	d2ef      	bcs.n	c172 <d_substitution+0xe>
    c192:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    c194:	69e9      	ldr	r1, [r5, #28]
    c196:	3201      	adds	r2, #1
    c198:	62aa      	str	r2, [r5, #40]	; 0x28
    c19a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    c19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c1a2:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    c1a6:	2b19      	cmp	r3, #25
    c1a8:	d94f      	bls.n	c24a <d_substitution+0xe6>
    c1aa:	68ab      	ldr	r3, [r5, #8]
    c1ac:	f003 0308 	and.w	r3, r3, #8
    c1b0:	2b00      	cmp	r3, #0
    c1b2:	bf14      	ite	ne
    c1b4:	2401      	movne	r4, #1
    c1b6:	2400      	moveq	r4, #0
    c1b8:	d101      	bne.n	c1be <d_substitution+0x5a>
    c1ba:	2900      	cmp	r1, #0
    c1bc:	d169      	bne.n	c292 <d_substitution+0x12e>
    c1be:	4b46      	ldr	r3, [pc, #280]	; (c2d8 <d_substitution+0x174>)
    c1c0:	2174      	movs	r1, #116	; 0x74
    c1c2:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
    c1c6:	e003      	b.n	c1d0 <d_substitution+0x6c>
    c1c8:	331c      	adds	r3, #28
    c1ca:	4283      	cmp	r3, r0
    c1cc:	d2d1      	bcs.n	c172 <d_substitution+0xe>
    c1ce:	7819      	ldrb	r1, [r3, #0]
    c1d0:	428a      	cmp	r2, r1
    c1d2:	d1f9      	bne.n	c1c8 <d_substitution+0x64>
    c1d4:	695e      	ldr	r6, [r3, #20]
    c1d6:	2e00      	cmp	r6, #0
    c1d8:	d07b      	beq.n	c2d2 <d_substitution+0x16e>
    c1da:	696a      	ldr	r2, [r5, #20]
    c1dc:	69a9      	ldr	r1, [r5, #24]
    c1de:	428a      	cmp	r2, r1
    c1e0:	da63      	bge.n	c2aa <d_substitution+0x146>
    c1e2:	eb02 0742 	add.w	r7, r2, r2, lsl #1
    c1e6:	f8d5 e010 	ldr.w	lr, [r5, #16]
    c1ea:	f8d3 8018 	ldr.w	r8, [r3, #24]
    c1ee:	00bf      	lsls	r7, r7, #2
    c1f0:	3201      	adds	r2, #1
    c1f2:	eb1e 0007 	adds.w	r0, lr, r7
    c1f6:	616a      	str	r2, [r5, #20]
    c1f8:	d006      	beq.n	c208 <d_substitution+0xa4>
    c1fa:	f04f 0c18 	mov.w	ip, #24
    c1fe:	f80e c007 	strb.w	ip, [lr, r7]
    c202:	6046      	str	r6, [r0, #4]
    c204:	f8c0 8008 	str.w	r8, [r0, #8]
    c208:	62e8      	str	r0, [r5, #44]	; 0x2c
    c20a:	2c00      	cmp	r4, #0
    c20c:	d04a      	beq.n	c2a4 <d_substitution+0x140>
    c20e:	68de      	ldr	r6, [r3, #12]
    c210:	691c      	ldr	r4, [r3, #16]
    c212:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    c214:	4291      	cmp	r1, r2
    c216:	4423      	add	r3, r4
    c218:	632b      	str	r3, [r5, #48]	; 0x30
    c21a:	dd41      	ble.n	c2a0 <d_substitution+0x13c>
    c21c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    c220:	6929      	ldr	r1, [r5, #16]
    c222:	009b      	lsls	r3, r3, #2
    c224:	3201      	adds	r2, #1
    c226:	18c8      	adds	r0, r1, r3
    c228:	616a      	str	r2, [r5, #20]
    c22a:	d003      	beq.n	c234 <d_substitution+0xd0>
    c22c:	2218      	movs	r2, #24
    c22e:	54ca      	strb	r2, [r1, r3]
    c230:	6046      	str	r6, [r0, #4]
    c232:	6084      	str	r4, [r0, #8]
    c234:	68eb      	ldr	r3, [r5, #12]
    c236:	781b      	ldrb	r3, [r3, #0]
    c238:	2b42      	cmp	r3, #66	; 0x42
    c23a:	d038      	beq.n	c2ae <d_substitution+0x14a>
    c23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c240:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
    c244:	b2e3      	uxtb	r3, r4
    c246:	2b09      	cmp	r3, #9
    c248:	d8ab      	bhi.n	c1a2 <d_substitution+0x3e>
    c24a:	2100      	movs	r1, #0
    c24c:	e00d      	b.n	c26a <d_substitution+0x106>
    c24e:	3b30      	subs	r3, #48	; 0x30
    c250:	4299      	cmp	r1, r3
    c252:	d88e      	bhi.n	c172 <d_substitution+0xe>
    c254:	68e9      	ldr	r1, [r5, #12]
    c256:	780a      	ldrb	r2, [r1, #0]
    c258:	1c48      	adds	r0, r1, #1
    c25a:	b11a      	cbz	r2, c264 <d_substitution+0x100>
    c25c:	60e8      	str	r0, [r5, #12]
    c25e:	780a      	ldrb	r2, [r1, #0]
    c260:	2a5f      	cmp	r2, #95	; 0x5f
    c262:	d014      	beq.n	c28e <d_substitution+0x12a>
    c264:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
    c268:	4619      	mov	r1, r3
    c26a:	b2e4      	uxtb	r4, r4
    c26c:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    c270:	2c09      	cmp	r4, #9
    c272:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
    c276:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    c27a:	d9e8      	bls.n	c24e <d_substitution+0xea>
    c27c:	2819      	cmp	r0, #25
    c27e:	f63f af78 	bhi.w	c172 <d_substitution+0xe>
    c282:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    c286:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    c28a:	3b37      	subs	r3, #55	; 0x37
    c28c:	e7e0      	b.n	c250 <d_substitution+0xec>
    c28e:	3301      	adds	r3, #1
    c290:	e77c      	b.n	c18c <d_substitution+0x28>
    c292:	68eb      	ldr	r3, [r5, #12]
    c294:	781b      	ldrb	r3, [r3, #0]
    c296:	3b43      	subs	r3, #67	; 0x43
    c298:	2b01      	cmp	r3, #1
    c29a:	bf98      	it	ls
    c29c:	2401      	movls	r4, #1
    c29e:	e78e      	b.n	c1be <d_substitution+0x5a>
    c2a0:	2000      	movs	r0, #0
    c2a2:	e7c7      	b.n	c234 <d_substitution+0xd0>
    c2a4:	685e      	ldr	r6, [r3, #4]
    c2a6:	689c      	ldr	r4, [r3, #8]
    c2a8:	e7b3      	b.n	c212 <d_substitution+0xae>
    c2aa:	2000      	movs	r0, #0
    c2ac:	e7ac      	b.n	c208 <d_substitution+0xa4>
    c2ae:	4601      	mov	r1, r0
    c2b0:	4628      	mov	r0, r5
    c2b2:	f7ff ff3b 	bl	c12c <d_abi_tags>
    c2b6:	2800      	cmp	r0, #0
    c2b8:	f43f af5b 	beq.w	c172 <d_substitution+0xe>
    c2bc:	6a2b      	ldr	r3, [r5, #32]
    c2be:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    c2c0:	4293      	cmp	r3, r2
    c2c2:	dabb      	bge.n	c23c <d_substitution+0xd8>
    c2c4:	69e9      	ldr	r1, [r5, #28]
    c2c6:	1c5a      	adds	r2, r3, #1
    c2c8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    c2cc:	622a      	str	r2, [r5, #32]
    c2ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c2d2:	69a9      	ldr	r1, [r5, #24]
    c2d4:	696a      	ldr	r2, [r5, #20]
    c2d6:	e798      	b.n	c20a <d_substitution+0xa6>
    c2d8:	0002385c 	.word	0x0002385c

0000c2dc <d_call_offset>:
    c2dc:	b538      	push	{r3, r4, r5, lr}
    c2de:	4604      	mov	r4, r0
    c2e0:	b929      	cbnz	r1, c2ee <d_call_offset+0x12>
    c2e2:	68c3      	ldr	r3, [r0, #12]
    c2e4:	781a      	ldrb	r2, [r3, #0]
    c2e6:	b132      	cbz	r2, c2f6 <d_call_offset+0x1a>
    c2e8:	1c5a      	adds	r2, r3, #1
    c2ea:	60c2      	str	r2, [r0, #12]
    c2ec:	7819      	ldrb	r1, [r3, #0]
    c2ee:	2968      	cmp	r1, #104	; 0x68
    c2f0:	d019      	beq.n	c326 <d_call_offset+0x4a>
    c2f2:	2976      	cmp	r1, #118	; 0x76
    c2f4:	d001      	beq.n	c2fa <d_call_offset+0x1e>
    c2f6:	2000      	movs	r0, #0
    c2f8:	bd38      	pop	{r3, r4, r5, pc}
    c2fa:	f104 050c 	add.w	r5, r4, #12
    c2fe:	4628      	mov	r0, r5
    c300:	f7ff fe38 	bl	bf74 <d_number.isra.0>
    c304:	68e3      	ldr	r3, [r4, #12]
    c306:	781a      	ldrb	r2, [r3, #0]
    c308:	2a5f      	cmp	r2, #95	; 0x5f
    c30a:	d1f4      	bne.n	c2f6 <d_call_offset+0x1a>
    c30c:	3301      	adds	r3, #1
    c30e:	60e3      	str	r3, [r4, #12]
    c310:	4628      	mov	r0, r5
    c312:	f7ff fe2f 	bl	bf74 <d_number.isra.0>
    c316:	68e3      	ldr	r3, [r4, #12]
    c318:	781a      	ldrb	r2, [r3, #0]
    c31a:	2a5f      	cmp	r2, #95	; 0x5f
    c31c:	d1eb      	bne.n	c2f6 <d_call_offset+0x1a>
    c31e:	3301      	adds	r3, #1
    c320:	60e3      	str	r3, [r4, #12]
    c322:	2001      	movs	r0, #1
    c324:	bd38      	pop	{r3, r4, r5, pc}
    c326:	f104 000c 	add.w	r0, r4, #12
    c32a:	f7ff fe23 	bl	bf74 <d_number.isra.0>
    c32e:	e7f2      	b.n	c316 <d_call_offset+0x3a>

0000c330 <d_lookup_template_argument.isra.6>:
    c330:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    c334:	b19b      	cbz	r3, c35e <d_lookup_template_argument.isra.6+0x2e>
    c336:	680a      	ldr	r2, [r1, #0]
    c338:	685b      	ldr	r3, [r3, #4]
    c33a:	2a00      	cmp	r2, #0
    c33c:	689b      	ldr	r3, [r3, #8]
    c33e:	db09      	blt.n	c354 <d_lookup_template_argument.isra.6+0x24>
    c340:	b923      	cbnz	r3, c34c <d_lookup_template_argument.isra.6+0x1c>
    c342:	e007      	b.n	c354 <d_lookup_template_argument.isra.6+0x24>
    c344:	b142      	cbz	r2, c358 <d_lookup_template_argument.isra.6+0x28>
    c346:	689b      	ldr	r3, [r3, #8]
    c348:	3a01      	subs	r2, #1
    c34a:	b11b      	cbz	r3, c354 <d_lookup_template_argument.isra.6+0x24>
    c34c:	7819      	ldrb	r1, [r3, #0]
    c34e:	292f      	cmp	r1, #47	; 0x2f
    c350:	d0f8      	beq.n	c344 <d_lookup_template_argument.isra.6+0x14>
    c352:	2300      	movs	r3, #0
    c354:	4618      	mov	r0, r3
    c356:	4770      	bx	lr
    c358:	685b      	ldr	r3, [r3, #4]
    c35a:	4618      	mov	r0, r3
    c35c:	4770      	bx	lr
    c35e:	2201      	movs	r2, #1
    c360:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
    c364:	e7f6      	b.n	c354 <d_lookup_template_argument.isra.6+0x24>
    c366:	bf00      	nop

0000c368 <d_find_pack>:
    c368:	2900      	cmp	r1, #0
    c36a:	d041      	beq.n	c3f0 <d_find_pack+0x88>
    c36c:	b538      	push	{r3, r4, r5, lr}
    c36e:	4605      	mov	r5, r0
    c370:	460c      	mov	r4, r1
    c372:	7823      	ldrb	r3, [r4, #0]
    c374:	2b4b      	cmp	r3, #75	; 0x4b
    c376:	d827      	bhi.n	c3c8 <d_find_pack+0x60>
    c378:	e8df f003 	tbb	[pc, r3]
    c37c:	2626262e 	.word	0x2626262e
    c380:	2b2e3026 	.word	0x2b2e3026
    c384:	2626262b 	.word	0x2626262b
    c388:	26262626 	.word	0x26262626
    c38c:	26262626 	.word	0x26262626
    c390:	26262626 	.word	0x26262626
    c394:	2626262e 	.word	0x2626262e
    c398:	26262626 	.word	0x26262626
    c39c:	26262626 	.word	0x26262626
    c3a0:	2e262626 	.word	0x2e262626
    c3a4:	26262626 	.word	0x26262626
    c3a8:	2626262e 	.word	0x2626262e
    c3ac:	262b2e26 	.word	0x262b2e26
    c3b0:	26262626 	.word	0x26262626
    c3b4:	26262626 	.word	0x26262626
    c3b8:	26262626 	.word	0x26262626
    c3bc:	26262e2e 	.word	0x26262e2e
    c3c0:	2e2e2e26 	.word	0x2e2e2e26
    c3c4:	2e2e2626 	.word	0x2e2e2626
    c3c8:	6861      	ldr	r1, [r4, #4]
    c3ca:	4628      	mov	r0, r5
    c3cc:	f7ff ffcc 	bl	c368 <d_find_pack>
    c3d0:	b918      	cbnz	r0, c3da <d_find_pack+0x72>
    c3d2:	68a4      	ldr	r4, [r4, #8]
    c3d4:	2c00      	cmp	r4, #0
    c3d6:	d1cc      	bne.n	c372 <d_find_pack+0xa>
    c3d8:	2000      	movs	r0, #0
    c3da:	bd38      	pop	{r3, r4, r5, pc}
    c3dc:	1d21      	adds	r1, r4, #4
    c3de:	4628      	mov	r0, r5
    c3e0:	f7ff ffa6 	bl	c330 <d_lookup_template_argument.isra.6>
    c3e4:	2800      	cmp	r0, #0
    c3e6:	d0f7      	beq.n	c3d8 <d_find_pack+0x70>
    c3e8:	7803      	ldrb	r3, [r0, #0]
    c3ea:	2b2f      	cmp	r3, #47	; 0x2f
    c3ec:	d1f4      	bne.n	c3d8 <d_find_pack+0x70>
    c3ee:	bd38      	pop	{r3, r4, r5, pc}
    c3f0:	2000      	movs	r0, #0
    c3f2:	4770      	bx	lr

0000c3f4 <d_growable_string_callback_adapter>:
    c3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c3f6:	4615      	mov	r5, r2
    c3f8:	6852      	ldr	r2, [r2, #4]
    c3fa:	68ac      	ldr	r4, [r5, #8]
    c3fc:	1c4b      	adds	r3, r1, #1
    c3fe:	4413      	add	r3, r2
    c400:	42a3      	cmp	r3, r4
    c402:	b083      	sub	sp, #12
    c404:	460e      	mov	r6, r1
    c406:	4607      	mov	r7, r0
    c408:	d813      	bhi.n	c432 <d_growable_string_callback_adapter+0x3e>
    c40a:	68ec      	ldr	r4, [r5, #12]
    c40c:	b10c      	cbz	r4, c412 <d_growable_string_callback_adapter+0x1e>
    c40e:	b003      	add	sp, #12
    c410:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c412:	e895 0009 	ldmia.w	r5, {r0, r3}
    c416:	4632      	mov	r2, r6
    c418:	4639      	mov	r1, r7
    c41a:	4418      	add	r0, r3
    c41c:	f009 fa50 	bl	158c0 <memcpy>
    c420:	682b      	ldr	r3, [r5, #0]
    c422:	686a      	ldr	r2, [r5, #4]
    c424:	4433      	add	r3, r6
    c426:	549c      	strb	r4, [r3, r2]
    c428:	686b      	ldr	r3, [r5, #4]
    c42a:	441e      	add	r6, r3
    c42c:	606e      	str	r6, [r5, #4]
    c42e:	b003      	add	sp, #12
    c430:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c432:	68ea      	ldr	r2, [r5, #12]
    c434:	2a00      	cmp	r2, #0
    c436:	d1ea      	bne.n	c40e <d_growable_string_callback_adapter+0x1a>
    c438:	b91c      	cbnz	r4, c442 <d_growable_string_callback_adapter+0x4e>
    c43a:	2b02      	cmp	r3, #2
    c43c:	f04f 0402 	mov.w	r4, #2
    c440:	d902      	bls.n	c448 <d_growable_string_callback_adapter+0x54>
    c442:	0064      	lsls	r4, r4, #1
    c444:	42a3      	cmp	r3, r4
    c446:	d8fc      	bhi.n	c442 <d_growable_string_callback_adapter+0x4e>
    c448:	4621      	mov	r1, r4
    c44a:	6828      	ldr	r0, [r5, #0]
    c44c:	f009 fbdc 	bl	15c08 <realloc>
    c450:	b110      	cbz	r0, c458 <d_growable_string_callback_adapter+0x64>
    c452:	6028      	str	r0, [r5, #0]
    c454:	60ac      	str	r4, [r5, #8]
    c456:	e7d8      	b.n	c40a <d_growable_string_callback_adapter+0x16>
    c458:	9001      	str	r0, [sp, #4]
    c45a:	6828      	ldr	r0, [r5, #0]
    c45c:	f008 fedc 	bl	15218 <free>
    c460:	9b01      	ldr	r3, [sp, #4]
    c462:	602b      	str	r3, [r5, #0]
    c464:	2201      	movs	r2, #1
    c466:	606b      	str	r3, [r5, #4]
    c468:	60ab      	str	r3, [r5, #8]
    c46a:	60ea      	str	r2, [r5, #12]
    c46c:	e7cf      	b.n	c40e <d_growable_string_callback_adapter+0x1a>
    c46e:	bf00      	nop

0000c470 <d_append_num>:
    c470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c474:	b088      	sub	sp, #32
    c476:	460a      	mov	r2, r1
    c478:	4604      	mov	r4, r0
    c47a:	491b      	ldr	r1, [pc, #108]	; (c4e8 <d_append_num+0x78>)
    c47c:	a801      	add	r0, sp, #4
    c47e:	f009 fdd1 	bl	16024 <sprintf>
    c482:	a801      	add	r0, sp, #4
    c484:	f00a f99c 	bl	167c0 <strlen>
    c488:	b350      	cbz	r0, c4e0 <d_append_num+0x70>
    c48a:	ad01      	add	r5, sp, #4
    c48c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    c490:	182f      	adds	r7, r5, r0
    c492:	f04f 0800 	mov.w	r8, #0
    c496:	e009      	b.n	c4ac <d_append_num+0x3c>
    c498:	460b      	mov	r3, r1
    c49a:	42bd      	cmp	r5, r7
    c49c:	f101 0101 	add.w	r1, r1, #1
    c4a0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    c4a4:	54e6      	strb	r6, [r4, r3]
    c4a6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    c4aa:	d019      	beq.n	c4e0 <d_append_num+0x70>
    c4ac:	29ff      	cmp	r1, #255	; 0xff
    c4ae:	f815 6b01 	ldrb.w	r6, [r5], #1
    c4b2:	d1f1      	bne.n	c498 <d_append_num+0x28>
    c4b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    c4b8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    c4bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    c4c0:	4620      	mov	r0, r4
    c4c2:	4798      	blx	r3
    c4c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    c4c8:	3301      	adds	r3, #1
    c4ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    c4ce:	2300      	movs	r3, #0
    c4d0:	2101      	movs	r1, #1
    c4d2:	42bd      	cmp	r5, r7
    c4d4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    c4d8:	54e6      	strb	r6, [r4, r3]
    c4da:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    c4de:	d1e5      	bne.n	c4ac <d_append_num+0x3c>
    c4e0:	b008      	add	sp, #32
    c4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4e6:	bf00      	nop
    c4e8:	00023004 	.word	0x00023004

0000c4ec <d_exprlist>:
    c4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4f0:	68c3      	ldr	r3, [r0, #12]
    c4f2:	781d      	ldrb	r5, [r3, #0]
    c4f4:	b083      	sub	sp, #12
    c4f6:	2200      	movs	r2, #0
    c4f8:	428d      	cmp	r5, r1
    c4fa:	4604      	mov	r4, r0
    c4fc:	9201      	str	r2, [sp, #4]
    c4fe:	f000 81c6 	beq.w	c88e <d_exprlist+0x3a2>
    c502:	4688      	mov	r8, r1
    c504:	f8df 949c 	ldr.w	r9, [pc, #1180]	; c9a4 <d_exprlist+0x4b8>
    c508:	ae01      	add	r6, sp, #4
    c50a:	e023      	b.n	c554 <d_exprlist+0x68>
    c50c:	2a66      	cmp	r2, #102	; 0x66
    c50e:	d04c      	beq.n	c5aa <d_exprlist+0xbe>
    c510:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    c514:	2909      	cmp	r1, #9
    c516:	f200 8217 	bhi.w	c948 <d_exprlist+0x45c>
    c51a:	4620      	mov	r0, r4
    c51c:	f001 fb10 	bl	db40 <d_unqualified_name>
    c520:	4605      	mov	r5, r0
    c522:	2800      	cmp	r0, #0
    c524:	f000 8170 	beq.w	c808 <d_exprlist+0x31c>
    c528:	68e3      	ldr	r3, [r4, #12]
    c52a:	781b      	ldrb	r3, [r3, #0]
    c52c:	2b49      	cmp	r3, #73	; 0x49
    c52e:	f000 8092 	beq.w	c656 <d_exprlist+0x16a>
    c532:	6367      	str	r7, [r4, #52]	; 0x34
    c534:	462a      	mov	r2, r5
    c536:	2300      	movs	r3, #0
    c538:	212e      	movs	r1, #46	; 0x2e
    c53a:	4620      	mov	r0, r4
    c53c:	f7ff fbca 	bl	bcd4 <d_make_comp>
    c540:	6030      	str	r0, [r6, #0]
    c542:	2800      	cmp	r0, #0
    c544:	d05b      	beq.n	c5fe <d_exprlist+0x112>
    c546:	68e3      	ldr	r3, [r4, #12]
    c548:	781a      	ldrb	r2, [r3, #0]
    c54a:	4542      	cmp	r2, r8
    c54c:	f100 0608 	add.w	r6, r0, #8
    c550:	f000 8107 	beq.w	c762 <d_exprlist+0x276>
    c554:	2501      	movs	r5, #1
    c556:	6b67      	ldr	r7, [r4, #52]	; 0x34
    c558:	6365      	str	r5, [r4, #52]	; 0x34
    c55a:	781a      	ldrb	r2, [r3, #0]
    c55c:	2a4c      	cmp	r2, #76	; 0x4c
    c55e:	d047      	beq.n	c5f0 <d_exprlist+0x104>
    c560:	2a54      	cmp	r2, #84	; 0x54
    c562:	d051      	beq.n	c608 <d_exprlist+0x11c>
    c564:	2a73      	cmp	r2, #115	; 0x73
    c566:	d1d1      	bne.n	c50c <d_exprlist+0x20>
    c568:	785a      	ldrb	r2, [r3, #1]
    c56a:	2a72      	cmp	r2, #114	; 0x72
    c56c:	f000 80e2 	beq.w	c734 <d_exprlist+0x248>
    c570:	2a70      	cmp	r2, #112	; 0x70
    c572:	f000 80fd 	beq.w	c770 <d_exprlist+0x284>
    c576:	4620      	mov	r0, r4
    c578:	f001 fa22 	bl	d9c0 <d_operator_name>
    c57c:	4605      	mov	r5, r0
    c57e:	2800      	cmp	r0, #0
    c580:	f000 8142 	beq.w	c808 <d_exprlist+0x31c>
    c584:	782b      	ldrb	r3, [r5, #0]
    c586:	2b31      	cmp	r3, #49	; 0x31
    c588:	d043      	beq.n	c612 <d_exprlist+0x126>
    c58a:	2b32      	cmp	r3, #50	; 0x32
    c58c:	d05c      	beq.n	c648 <d_exprlist+0x15c>
    c58e:	2b33      	cmp	r3, #51	; 0x33
    c590:	d17b      	bne.n	c68a <d_exprlist+0x19e>
    c592:	68e3      	ldr	r3, [r4, #12]
    c594:	781a      	ldrb	r2, [r3, #0]
    c596:	2a5f      	cmp	r2, #95	; 0x5f
    c598:	f040 80c1 	bne.w	c71e <d_exprlist+0x232>
    c59c:	3301      	adds	r3, #1
    c59e:	60e3      	str	r3, [r4, #12]
    c5a0:	2145      	movs	r1, #69	; 0x45
    c5a2:	4620      	mov	r0, r4
    c5a4:	f7ff ffa2 	bl	c4ec <d_exprlist>
    c5a8:	e0bc      	b.n	c724 <d_exprlist+0x238>
    c5aa:	785a      	ldrb	r2, [r3, #1]
    c5ac:	2a70      	cmp	r2, #112	; 0x70
    c5ae:	d1e2      	bne.n	c576 <d_exprlist+0x8a>
    c5b0:	1c9a      	adds	r2, r3, #2
    c5b2:	60e2      	str	r2, [r4, #12]
    c5b4:	789a      	ldrb	r2, [r3, #2]
    c5b6:	2a54      	cmp	r2, #84	; 0x54
    c5b8:	d069      	beq.n	c68e <d_exprlist+0x1a2>
    c5ba:	4620      	mov	r0, r4
    c5bc:	f7ff fd1c 	bl	bff8 <d_compact_number>
    c5c0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    c5c4:	4298      	cmp	r0, r3
    c5c6:	d060      	beq.n	c68a <d_exprlist+0x19e>
    c5c8:	1c43      	adds	r3, r0, #1
    c5ca:	d05e      	beq.n	c68a <d_exprlist+0x19e>
    c5cc:	3001      	adds	r0, #1
    c5ce:	6963      	ldr	r3, [r4, #20]
    c5d0:	69a2      	ldr	r2, [r4, #24]
    c5d2:	4293      	cmp	r3, r2
    c5d4:	da59      	bge.n	c68a <d_exprlist+0x19e>
    c5d6:	6922      	ldr	r2, [r4, #16]
    c5d8:	1c59      	adds	r1, r3, #1
    c5da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c5de:	eb12 0583 	adds.w	r5, r2, r3, lsl #2
    c5e2:	6161      	str	r1, [r4, #20]
    c5e4:	d051      	beq.n	c68a <d_exprlist+0x19e>
    c5e6:	2106      	movs	r1, #6
    c5e8:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    c5ec:	6068      	str	r0, [r5, #4]
    c5ee:	e7a0      	b.n	c532 <d_exprlist+0x46>
    c5f0:	4620      	mov	r0, r4
    c5f2:	f001 fef3 	bl	e3dc <d_expr_primary>
    c5f6:	4605      	mov	r5, r0
    c5f8:	6367      	str	r7, [r4, #52]	; 0x34
    c5fa:	2d00      	cmp	r5, #0
    c5fc:	d19a      	bne.n	c534 <d_exprlist+0x48>
    c5fe:	2500      	movs	r5, #0
    c600:	4628      	mov	r0, r5
    c602:	b003      	add	sp, #12
    c604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c608:	4620      	mov	r0, r4
    c60a:	f7ff fd11 	bl	c030 <d_template_param>
    c60e:	4605      	mov	r5, r0
    c610:	e7f2      	b.n	c5f8 <d_exprlist+0x10c>
    c612:	f8d5 b004 	ldr.w	fp, [r5, #4]
    c616:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c618:	f8db 2008 	ldr.w	r2, [fp, #8]
    c61c:	f8db a000 	ldr.w	sl, [fp]
    c620:	3a02      	subs	r2, #2
    c622:	4413      	add	r3, r2
    c624:	6323      	str	r3, [r4, #48]	; 0x30
    c626:	4650      	mov	r0, sl
    c628:	4649      	mov	r1, r9
    c62a:	f009 fd6d 	bl	16108 <strcmp>
    c62e:	2800      	cmp	r0, #0
    c630:	f000 80e6 	beq.w	c800 <d_exprlist+0x314>
    c634:	f8db 300c 	ldr.w	r3, [fp, #12]
    c638:	2b03      	cmp	r3, #3
    c63a:	d826      	bhi.n	c68a <d_exprlist+0x19e>
    c63c:	e8df f013 	tbh	[pc, r3, lsl #1]
    c640:	0135002b 	.word	0x0135002b
    c644:	00a50033 	.word	0x00a50033
    c648:	686b      	ldr	r3, [r5, #4]
    c64a:	2b03      	cmp	r3, #3
    c64c:	d81d      	bhi.n	c68a <d_exprlist+0x19e>
    c64e:	e8df f003 	tbb	[pc, r3]
    c652:	6622      	.short	0x6622
    c654:	1c1c      	.short	0x1c1c
    c656:	4620      	mov	r0, r4
    c658:	f000 fc04 	bl	ce64 <d_template_args>
    c65c:	462a      	mov	r2, r5
    c65e:	4603      	mov	r3, r0
    c660:	2104      	movs	r1, #4
    c662:	4620      	mov	r0, r4
    c664:	f7ff fb36 	bl	bcd4 <d_make_comp>
    c668:	4605      	mov	r5, r0
    c66a:	e7c5      	b.n	c5f8 <d_exprlist+0x10c>
    c66c:	2a74      	cmp	r2, #116	; 0x74
    c66e:	d182      	bne.n	c576 <d_exprlist+0x8a>
    c670:	785b      	ldrb	r3, [r3, #1]
    c672:	2b6c      	cmp	r3, #108	; 0x6c
    c674:	f47f af7f 	bne.w	c576 <d_exprlist+0x8a>
    c678:	4620      	mov	r0, r4
    c67a:	f000 fdb9 	bl	d1f0 <d_type>
    c67e:	68e3      	ldr	r3, [r4, #12]
    c680:	785a      	ldrb	r2, [r3, #1]
    c682:	4605      	mov	r5, r0
    c684:	2a00      	cmp	r2, #0
    c686:	f040 8169 	bne.w	c95c <d_exprlist+0x470>
    c68a:	6367      	str	r7, [r4, #52]	; 0x34
    c68c:	e7b7      	b.n	c5fe <d_exprlist+0x112>
    c68e:	3303      	adds	r3, #3
    c690:	60e3      	str	r3, [r4, #12]
    c692:	2000      	movs	r0, #0
    c694:	e79b      	b.n	c5ce <d_exprlist+0xe2>
    c696:	462a      	mov	r2, r5
    c698:	2300      	movs	r3, #0
    c69a:	2135      	movs	r1, #53	; 0x35
    c69c:	4620      	mov	r0, r4
    c69e:	f7ff fb19 	bl	bcd4 <d_make_comp>
    c6a2:	4605      	mov	r5, r0
    c6a4:	e7a8      	b.n	c5f8 <d_exprlist+0x10c>
    c6a6:	f1ba 0f00 	cmp.w	sl, #0
    c6aa:	d0ee      	beq.n	c68a <d_exprlist+0x19e>
    c6ac:	686b      	ldr	r3, [r5, #4]
    c6ae:	681b      	ldr	r3, [r3, #0]
    c6b0:	785a      	ldrb	r2, [r3, #1]
    c6b2:	2a63      	cmp	r2, #99	; 0x63
    c6b4:	f000 80d2 	beq.w	c85c <d_exprlist+0x370>
    c6b8:	f89a 3000 	ldrb.w	r3, [sl]
    c6bc:	2b66      	cmp	r3, #102	; 0x66
    c6be:	f000 80ef 	beq.w	c8a0 <d_exprlist+0x3b4>
    c6c2:	4620      	mov	r0, r4
    c6c4:	f000 f970 	bl	c9a8 <d_expression_1>
    c6c8:	4683      	mov	fp, r0
    c6ca:	49b1      	ldr	r1, [pc, #708]	; (c990 <d_exprlist+0x4a4>)
    c6cc:	4650      	mov	r0, sl
    c6ce:	f009 fd1b 	bl	16108 <strcmp>
    c6d2:	2800      	cmp	r0, #0
    c6d4:	f000 809d 	beq.w	c812 <d_exprlist+0x326>
    c6d8:	49ae      	ldr	r1, [pc, #696]	; (c994 <d_exprlist+0x4a8>)
    c6da:	4650      	mov	r0, sl
    c6dc:	f009 fd14 	bl	16108 <strcmp>
    c6e0:	b130      	cbz	r0, c6f0 <d_exprlist+0x204>
    c6e2:	4650      	mov	r0, sl
    c6e4:	49ac      	ldr	r1, [pc, #688]	; (c998 <d_exprlist+0x4ac>)
    c6e6:	f009 fd0f 	bl	16108 <strcmp>
    c6ea:	2800      	cmp	r0, #0
    c6ec:	f040 8083 	bne.w	c7f6 <d_exprlist+0x30a>
    c6f0:	4620      	mov	r0, r4
    c6f2:	f001 fa25 	bl	db40 <d_unqualified_name>
    c6f6:	68e3      	ldr	r3, [r4, #12]
    c6f8:	781b      	ldrb	r3, [r3, #0]
    c6fa:	2b49      	cmp	r3, #73	; 0x49
    c6fc:	4682      	mov	sl, r0
    c6fe:	f000 80e9 	beq.w	c8d4 <d_exprlist+0x3e8>
    c702:	4653      	mov	r3, sl
    c704:	465a      	mov	r2, fp
    c706:	2138      	movs	r1, #56	; 0x38
    c708:	4620      	mov	r0, r4
    c70a:	f7ff fae3 	bl	bcd4 <d_make_comp>
    c70e:	462a      	mov	r2, r5
    c710:	4603      	mov	r3, r0
    c712:	2137      	movs	r1, #55	; 0x37
    c714:	4620      	mov	r0, r4
    c716:	f7ff fadd 	bl	bcd4 <d_make_comp>
    c71a:	4605      	mov	r5, r0
    c71c:	e76c      	b.n	c5f8 <d_exprlist+0x10c>
    c71e:	4620      	mov	r0, r4
    c720:	f000 f942 	bl	c9a8 <d_expression_1>
    c724:	4603      	mov	r3, r0
    c726:	462a      	mov	r2, r5
    c728:	2136      	movs	r1, #54	; 0x36
    c72a:	4620      	mov	r0, r4
    c72c:	f7ff fad2 	bl	bcd4 <d_make_comp>
    c730:	4605      	mov	r5, r0
    c732:	e761      	b.n	c5f8 <d_exprlist+0x10c>
    c734:	3302      	adds	r3, #2
    c736:	60e3      	str	r3, [r4, #12]
    c738:	4620      	mov	r0, r4
    c73a:	f000 fd59 	bl	d1f0 <d_type>
    c73e:	4682      	mov	sl, r0
    c740:	4620      	mov	r0, r4
    c742:	f001 f9fd 	bl	db40 <d_unqualified_name>
    c746:	68e3      	ldr	r3, [r4, #12]
    c748:	781b      	ldrb	r3, [r3, #0]
    c74a:	2b49      	cmp	r3, #73	; 0x49
    c74c:	4683      	mov	fp, r0
    c74e:	f000 8093 	beq.w	c878 <d_exprlist+0x38c>
    c752:	4603      	mov	r3, r0
    c754:	4629      	mov	r1, r5
    c756:	4652      	mov	r2, sl
    c758:	4620      	mov	r0, r4
    c75a:	f7ff fabb 	bl	bcd4 <d_make_comp>
    c75e:	4605      	mov	r5, r0
    c760:	e74a      	b.n	c5f8 <d_exprlist+0x10c>
    c762:	9d01      	ldr	r5, [sp, #4]
    c764:	3301      	adds	r3, #1
    c766:	4628      	mov	r0, r5
    c768:	60e3      	str	r3, [r4, #12]
    c76a:	b003      	add	sp, #12
    c76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c770:	3302      	adds	r3, #2
    c772:	60e3      	str	r3, [r4, #12]
    c774:	4620      	mov	r0, r4
    c776:	f000 f917 	bl	c9a8 <d_expression_1>
    c77a:	2300      	movs	r3, #0
    c77c:	4602      	mov	r2, r0
    c77e:	214a      	movs	r1, #74	; 0x4a
    c780:	4620      	mov	r0, r4
    c782:	f7ff faa7 	bl	bcd4 <d_make_comp>
    c786:	4605      	mov	r5, r0
    c788:	e736      	b.n	c5f8 <d_exprlist+0x10c>
    c78a:	f1ba 0f00 	cmp.w	sl, #0
    c78e:	f43f af7c 	beq.w	c68a <d_exprlist+0x19e>
    c792:	4982      	ldr	r1, [pc, #520]	; (c99c <d_exprlist+0x4b0>)
    c794:	4650      	mov	r0, sl
    c796:	f009 fcb7 	bl	16108 <strcmp>
    c79a:	2800      	cmp	r0, #0
    c79c:	d03f      	beq.n	c81e <d_exprlist+0x332>
    c79e:	f89a 3000 	ldrb.w	r3, [sl]
    c7a2:	2b66      	cmp	r3, #102	; 0x66
    c7a4:	f000 80bd 	beq.w	c922 <d_exprlist+0x436>
    c7a8:	2b6e      	cmp	r3, #110	; 0x6e
    c7aa:	f47f af6e 	bne.w	c68a <d_exprlist+0x19e>
    c7ae:	f89a 3001 	ldrb.w	r3, [sl, #1]
    c7b2:	2b77      	cmp	r3, #119	; 0x77
    c7b4:	d002      	beq.n	c7bc <d_exprlist+0x2d0>
    c7b6:	2b61      	cmp	r3, #97	; 0x61
    c7b8:	f47f af67 	bne.w	c68a <d_exprlist+0x19e>
    c7bc:	215f      	movs	r1, #95	; 0x5f
    c7be:	4620      	mov	r0, r4
    c7c0:	f7ff fe94 	bl	c4ec <d_exprlist>
    c7c4:	4682      	mov	sl, r0
    c7c6:	4620      	mov	r0, r4
    c7c8:	f000 fd12 	bl	d1f0 <d_type>
    c7cc:	68e3      	ldr	r3, [r4, #12]
    c7ce:	781a      	ldrb	r2, [r3, #0]
    c7d0:	2a45      	cmp	r2, #69	; 0x45
    c7d2:	4683      	mov	fp, r0
    c7d4:	f000 80a1 	beq.w	c91a <d_exprlist+0x42e>
    c7d8:	2a70      	cmp	r2, #112	; 0x70
    c7da:	f000 80a6 	beq.w	c92a <d_exprlist+0x43e>
    c7de:	2a69      	cmp	r2, #105	; 0x69
    c7e0:	f47f af53 	bne.w	c68a <d_exprlist+0x19e>
    c7e4:	785b      	ldrb	r3, [r3, #1]
    c7e6:	2b6c      	cmp	r3, #108	; 0x6c
    c7e8:	f47f af4f 	bne.w	c68a <d_exprlist+0x19e>
    c7ec:	4620      	mov	r0, r4
    c7ee:	f000 f8db 	bl	c9a8 <d_expression_1>
    c7f2:	4603      	mov	r3, r0
    c7f4:	e01f      	b.n	c836 <d_exprlist+0x34a>
    c7f6:	4620      	mov	r0, r4
    c7f8:	f000 f8d6 	bl	c9a8 <d_expression_1>
    c7fc:	4682      	mov	sl, r0
    c7fe:	e780      	b.n	c702 <d_exprlist+0x216>
    c800:	4620      	mov	r0, r4
    c802:	f000 fcf5 	bl	d1f0 <d_type>
    c806:	e78d      	b.n	c724 <d_exprlist+0x238>
    c808:	4628      	mov	r0, r5
    c80a:	6367      	str	r7, [r4, #52]	; 0x34
    c80c:	b003      	add	sp, #12
    c80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c812:	2145      	movs	r1, #69	; 0x45
    c814:	4620      	mov	r0, r4
    c816:	f7ff fe69 	bl	c4ec <d_exprlist>
    c81a:	4682      	mov	sl, r0
    c81c:	e771      	b.n	c702 <d_exprlist+0x216>
    c81e:	4620      	mov	r0, r4
    c820:	f000 f8c2 	bl	c9a8 <d_expression_1>
    c824:	4682      	mov	sl, r0
    c826:	4620      	mov	r0, r4
    c828:	f000 f8be 	bl	c9a8 <d_expression_1>
    c82c:	4683      	mov	fp, r0
    c82e:	4620      	mov	r0, r4
    c830:	f000 f8ba 	bl	c9a8 <d_expression_1>
    c834:	4603      	mov	r3, r0
    c836:	465a      	mov	r2, fp
    c838:	213b      	movs	r1, #59	; 0x3b
    c83a:	4620      	mov	r0, r4
    c83c:	f7ff fa4a 	bl	bcd4 <d_make_comp>
    c840:	4652      	mov	r2, sl
    c842:	4603      	mov	r3, r0
    c844:	213a      	movs	r1, #58	; 0x3a
    c846:	4620      	mov	r0, r4
    c848:	f7ff fa44 	bl	bcd4 <d_make_comp>
    c84c:	462a      	mov	r2, r5
    c84e:	4603      	mov	r3, r0
    c850:	2139      	movs	r1, #57	; 0x39
    c852:	4620      	mov	r0, r4
    c854:	f7ff fa3e 	bl	bcd4 <d_make_comp>
    c858:	4605      	mov	r5, r0
    c85a:	e6cd      	b.n	c5f8 <d_exprlist+0x10c>
    c85c:	781b      	ldrb	r3, [r3, #0]
    c85e:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
    c862:	2a01      	cmp	r2, #1
    c864:	d903      	bls.n	c86e <d_exprlist+0x382>
    c866:	3b72      	subs	r3, #114	; 0x72
    c868:	2b01      	cmp	r3, #1
    c86a:	f63f af25 	bhi.w	c6b8 <d_exprlist+0x1cc>
    c86e:	4620      	mov	r0, r4
    c870:	f000 fcbe 	bl	d1f0 <d_type>
    c874:	4683      	mov	fp, r0
    c876:	e728      	b.n	c6ca <d_exprlist+0x1de>
    c878:	4620      	mov	r0, r4
    c87a:	f000 faf3 	bl	ce64 <d_template_args>
    c87e:	465a      	mov	r2, fp
    c880:	4603      	mov	r3, r0
    c882:	2104      	movs	r1, #4
    c884:	4620      	mov	r0, r4
    c886:	f7ff fa25 	bl	bcd4 <d_make_comp>
    c88a:	4603      	mov	r3, r0
    c88c:	e762      	b.n	c754 <d_exprlist+0x268>
    c88e:	3301      	adds	r3, #1
    c890:	60c3      	str	r3, [r0, #12]
    c892:	212e      	movs	r1, #46	; 0x2e
    c894:	4613      	mov	r3, r2
    c896:	b003      	add	sp, #12
    c898:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c89c:	f7ff ba1a 	b.w	bcd4 <d_make_comp>
    c8a0:	4620      	mov	r0, r4
    c8a2:	f001 f88d 	bl	d9c0 <d_operator_name>
    c8a6:	4683      	mov	fp, r0
    c8a8:	e70f      	b.n	c6ca <d_exprlist+0x1de>
    c8aa:	f1ba 0f00 	cmp.w	sl, #0
    c8ae:	f43f af36 	beq.w	c71e <d_exprlist+0x232>
    c8b2:	f89a 3000 	ldrb.w	r3, [sl]
    c8b6:	2b70      	cmp	r3, #112	; 0x70
    c8b8:	d017      	beq.n	c8ea <d_exprlist+0x3fe>
    c8ba:	2b6d      	cmp	r3, #109	; 0x6d
    c8bc:	d015      	beq.n	c8ea <d_exprlist+0x3fe>
    c8be:	4650      	mov	r0, sl
    c8c0:	4937      	ldr	r1, [pc, #220]	; (c9a0 <d_exprlist+0x4b4>)
    c8c2:	f009 fc21 	bl	16108 <strcmp>
    c8c6:	2800      	cmp	r0, #0
    c8c8:	f47f af29 	bne.w	c71e <d_exprlist+0x232>
    c8cc:	4620      	mov	r0, r4
    c8ce:	f000 fa65 	bl	cd9c <d_template_args_1>
    c8d2:	e727      	b.n	c724 <d_exprlist+0x238>
    c8d4:	4620      	mov	r0, r4
    c8d6:	f000 fac5 	bl	ce64 <d_template_args>
    c8da:	4652      	mov	r2, sl
    c8dc:	4603      	mov	r3, r0
    c8de:	2104      	movs	r1, #4
    c8e0:	4620      	mov	r0, r4
    c8e2:	f7ff f9f7 	bl	bcd4 <d_make_comp>
    c8e6:	4682      	mov	sl, r0
    c8e8:	e70b      	b.n	c702 <d_exprlist+0x216>
    c8ea:	f89a 2001 	ldrb.w	r2, [sl, #1]
    c8ee:	429a      	cmp	r2, r3
    c8f0:	d1e5      	bne.n	c8be <d_exprlist+0x3d2>
    c8f2:	68e3      	ldr	r3, [r4, #12]
    c8f4:	781a      	ldrb	r2, [r3, #0]
    c8f6:	2a5f      	cmp	r2, #95	; 0x5f
    c8f8:	d023      	beq.n	c942 <d_exprlist+0x456>
    c8fa:	4650      	mov	r0, sl
    c8fc:	4928      	ldr	r1, [pc, #160]	; (c9a0 <d_exprlist+0x4b4>)
    c8fe:	f009 fc03 	bl	16108 <strcmp>
    c902:	2800      	cmp	r0, #0
    c904:	d03f      	beq.n	c986 <d_exprlist+0x49a>
    c906:	4620      	mov	r0, r4
    c908:	f000 f84e 	bl	c9a8 <d_expression_1>
    c90c:	4603      	mov	r3, r0
    c90e:	461a      	mov	r2, r3
    c910:	2138      	movs	r1, #56	; 0x38
    c912:	4620      	mov	r0, r4
    c914:	f7ff f9de 	bl	bcd4 <d_make_comp>
    c918:	e704      	b.n	c724 <d_exprlist+0x238>
    c91a:	3301      	adds	r3, #1
    c91c:	60e3      	str	r3, [r4, #12]
    c91e:	2300      	movs	r3, #0
    c920:	e789      	b.n	c836 <d_exprlist+0x34a>
    c922:	4620      	mov	r0, r4
    c924:	f001 f84c 	bl	d9c0 <d_operator_name>
    c928:	e77c      	b.n	c824 <d_exprlist+0x338>
    c92a:	785a      	ldrb	r2, [r3, #1]
    c92c:	2a69      	cmp	r2, #105	; 0x69
    c92e:	f47f aeac 	bne.w	c68a <d_exprlist+0x19e>
    c932:	3302      	adds	r3, #2
    c934:	60e3      	str	r3, [r4, #12]
    c936:	2145      	movs	r1, #69	; 0x45
    c938:	4620      	mov	r0, r4
    c93a:	f7ff fdd7 	bl	c4ec <d_exprlist>
    c93e:	4603      	mov	r3, r0
    c940:	e779      	b.n	c836 <d_exprlist+0x34a>
    c942:	3301      	adds	r3, #1
    c944:	60e3      	str	r3, [r4, #12]
    c946:	e7ba      	b.n	c8be <d_exprlist+0x3d2>
    c948:	2a6f      	cmp	r2, #111	; 0x6f
    c94a:	d015      	beq.n	c978 <d_exprlist+0x48c>
    c94c:	2a69      	cmp	r2, #105	; 0x69
    c94e:	f47f ae8d 	bne.w	c66c <d_exprlist+0x180>
    c952:	785a      	ldrb	r2, [r3, #1]
    c954:	2a6c      	cmp	r2, #108	; 0x6c
    c956:	f47f ae0e 	bne.w	c576 <d_exprlist+0x8a>
    c95a:	2500      	movs	r5, #0
    c95c:	3302      	adds	r3, #2
    c95e:	60e3      	str	r3, [r4, #12]
    c960:	2145      	movs	r1, #69	; 0x45
    c962:	4620      	mov	r0, r4
    c964:	f7ff fdc2 	bl	c4ec <d_exprlist>
    c968:	462a      	mov	r2, r5
    c96a:	4603      	mov	r3, r0
    c96c:	2130      	movs	r1, #48	; 0x30
    c96e:	4620      	mov	r0, r4
    c970:	f7ff f9b0 	bl	bcd4 <d_make_comp>
    c974:	4605      	mov	r5, r0
    c976:	e63f      	b.n	c5f8 <d_exprlist+0x10c>
    c978:	785a      	ldrb	r2, [r3, #1]
    c97a:	2a6e      	cmp	r2, #110	; 0x6e
    c97c:	f47f adfb 	bne.w	c576 <d_exprlist+0x8a>
    c980:	3302      	adds	r3, #2
    c982:	60e3      	str	r3, [r4, #12]
    c984:	e5c9      	b.n	c51a <d_exprlist+0x2e>
    c986:	4620      	mov	r0, r4
    c988:	f000 fa08 	bl	cd9c <d_template_args_1>
    c98c:	4603      	mov	r3, r0
    c98e:	e7be      	b.n	c90e <d_exprlist+0x422>
    c990:	0002401c 	.word	0x0002401c
    c994:	00024020 	.word	0x00024020
    c998:	00024024 	.word	0x00024024
    c99c:	00024028 	.word	0x00024028
    c9a0:	00024018 	.word	0x00024018
    c9a4:	00024518 	.word	0x00024518

0000c9a8 <d_expression_1>:
    c9a8:	68c1      	ldr	r1, [r0, #12]
    c9aa:	780b      	ldrb	r3, [r1, #0]
    c9ac:	2b4c      	cmp	r3, #76	; 0x4c
    c9ae:	f000 8087 	beq.w	cac0 <d_expression_1+0x118>
    c9b2:	2b54      	cmp	r3, #84	; 0x54
    c9b4:	f000 8086 	beq.w	cac4 <d_expression_1+0x11c>
    c9b8:	2b73      	cmp	r3, #115	; 0x73
    c9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9be:	4604      	mov	r4, r0
    c9c0:	d037      	beq.n	ca32 <d_expression_1+0x8a>
    c9c2:	2b66      	cmp	r3, #102	; 0x66
    c9c4:	d012      	beq.n	c9ec <d_expression_1+0x44>
    c9c6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    c9ca:	2a09      	cmp	r2, #9
    c9cc:	f200 81b8 	bhi.w	cd40 <d_expression_1+0x398>
    c9d0:	4620      	mov	r0, r4
    c9d2:	f001 f8b5 	bl	db40 <d_unqualified_name>
    c9d6:	4605      	mov	r5, r0
    c9d8:	2800      	cmp	r0, #0
    c9da:	d06d      	beq.n	cab8 <d_expression_1+0x110>
    c9dc:	68e3      	ldr	r3, [r4, #12]
    c9de:	781b      	ldrb	r3, [r3, #0]
    c9e0:	2b49      	cmp	r3, #73	; 0x49
    c9e2:	f000 8088 	beq.w	caf6 <d_expression_1+0x14e>
    c9e6:	4628      	mov	r0, r5
    c9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c9ec:	784b      	ldrb	r3, [r1, #1]
    c9ee:	2b70      	cmp	r3, #112	; 0x70
    c9f0:	d039      	beq.n	ca66 <d_expression_1+0xbe>
    c9f2:	4620      	mov	r0, r4
    c9f4:	f000 ffe4 	bl	d9c0 <d_operator_name>
    c9f8:	4605      	mov	r5, r0
    c9fa:	2800      	cmp	r0, #0
    c9fc:	d05c      	beq.n	cab8 <d_expression_1+0x110>
    c9fe:	7803      	ldrb	r3, [r0, #0]
    ca00:	2b31      	cmp	r3, #49	; 0x31
    ca02:	d061      	beq.n	cac8 <d_expression_1+0x120>
    ca04:	2b32      	cmp	r3, #50	; 0x32
    ca06:	d025      	beq.n	ca54 <d_expression_1+0xac>
    ca08:	2b33      	cmp	r3, #51	; 0x33
    ca0a:	d155      	bne.n	cab8 <d_expression_1+0x110>
    ca0c:	68e3      	ldr	r3, [r4, #12]
    ca0e:	781a      	ldrb	r2, [r3, #0]
    ca10:	2a5f      	cmp	r2, #95	; 0x5f
    ca12:	f040 81b4 	bne.w	cd7e <d_expression_1+0x3d6>
    ca16:	3301      	adds	r3, #1
    ca18:	60e3      	str	r3, [r4, #12]
    ca1a:	2145      	movs	r1, #69	; 0x45
    ca1c:	4620      	mov	r0, r4
    ca1e:	f7ff fd65 	bl	c4ec <d_exprlist>
    ca22:	4603      	mov	r3, r0
    ca24:	462a      	mov	r2, r5
    ca26:	4620      	mov	r0, r4
    ca28:	2136      	movs	r1, #54	; 0x36
    ca2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ca2e:	f7ff b951 	b.w	bcd4 <d_make_comp>
    ca32:	784b      	ldrb	r3, [r1, #1]
    ca34:	2b72      	cmp	r3, #114	; 0x72
    ca36:	d069      	beq.n	cb0c <d_expression_1+0x164>
    ca38:	2b70      	cmp	r3, #112	; 0x70
    ca3a:	d1da      	bne.n	c9f2 <d_expression_1+0x4a>
    ca3c:	3102      	adds	r1, #2
    ca3e:	60c1      	str	r1, [r0, #12]
    ca40:	f7ff ffb2 	bl	c9a8 <d_expression_1>
    ca44:	2300      	movs	r3, #0
    ca46:	4602      	mov	r2, r0
    ca48:	214a      	movs	r1, #74	; 0x4a
    ca4a:	4620      	mov	r0, r4
    ca4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ca50:	f7ff b940 	b.w	bcd4 <d_make_comp>
    ca54:	6843      	ldr	r3, [r0, #4]
    ca56:	2b03      	cmp	r3, #3
    ca58:	d82e      	bhi.n	cab8 <d_expression_1+0x110>
    ca5a:	e8df f013 	tbh	[pc, r3, lsl #1]
    ca5e:	0071      	.short	0x0071
    ca60:	002d0190 	.word	0x002d0190
    ca64:	002d      	.short	0x002d
    ca66:	1c8b      	adds	r3, r1, #2
    ca68:	60c3      	str	r3, [r0, #12]
    ca6a:	788b      	ldrb	r3, [r1, #2]
    ca6c:	2b54      	cmp	r3, #84	; 0x54
    ca6e:	d063      	beq.n	cb38 <d_expression_1+0x190>
    ca70:	f7ff fac2 	bl	bff8 <d_compact_number>
    ca74:	43c3      	mvns	r3, r0
    ca76:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
    ca7a:	d01d      	beq.n	cab8 <d_expression_1+0x110>
    ca7c:	3001      	adds	r0, #1
    ca7e:	6963      	ldr	r3, [r4, #20]
    ca80:	69a2      	ldr	r2, [r4, #24]
    ca82:	4293      	cmp	r3, r2
    ca84:	da18      	bge.n	cab8 <d_expression_1+0x110>
    ca86:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    ca8a:	6921      	ldr	r1, [r4, #16]
    ca8c:	0092      	lsls	r2, r2, #2
    ca8e:	3301      	adds	r3, #1
    ca90:	188d      	adds	r5, r1, r2
    ca92:	6163      	str	r3, [r4, #20]
    ca94:	d0a7      	beq.n	c9e6 <d_expression_1+0x3e>
    ca96:	2306      	movs	r3, #6
    ca98:	548b      	strb	r3, [r1, r2]
    ca9a:	6068      	str	r0, [r5, #4]
    ca9c:	e7a3      	b.n	c9e6 <d_expression_1+0x3e>
    ca9e:	2b74      	cmp	r3, #116	; 0x74
    caa0:	d1a7      	bne.n	c9f2 <d_expression_1+0x4a>
    caa2:	784b      	ldrb	r3, [r1, #1]
    caa4:	2b6c      	cmp	r3, #108	; 0x6c
    caa6:	d1a4      	bne.n	c9f2 <d_expression_1+0x4a>
    caa8:	f000 fba2 	bl	d1f0 <d_type>
    caac:	68e1      	ldr	r1, [r4, #12]
    caae:	784b      	ldrb	r3, [r1, #1]
    cab0:	4605      	mov	r5, r0
    cab2:	2b00      	cmp	r3, #0
    cab4:	f040 814e 	bne.w	cd54 <d_expression_1+0x3ac>
    cab8:	2500      	movs	r5, #0
    caba:	4628      	mov	r0, r5
    cabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cac0:	f001 bc8c 	b.w	e3dc <d_expr_primary>
    cac4:	f7ff bab4 	b.w	c030 <d_template_param>
    cac8:	6847      	ldr	r7, [r0, #4]
    caca:	6b23      	ldr	r3, [r4, #48]	; 0x30
    cacc:	68ba      	ldr	r2, [r7, #8]
    cace:	683e      	ldr	r6, [r7, #0]
    cad0:	49ac      	ldr	r1, [pc, #688]	; (cd84 <d_expression_1+0x3dc>)
    cad2:	3a02      	subs	r2, #2
    cad4:	4413      	add	r3, r2
    cad6:	6323      	str	r3, [r4, #48]	; 0x30
    cad8:	4630      	mov	r0, r6
    cada:	f009 fb15 	bl	16108 <strcmp>
    cade:	2800      	cmp	r0, #0
    cae0:	f000 80ab 	beq.w	cc3a <d_expression_1+0x292>
    cae4:	68ff      	ldr	r7, [r7, #12]
    cae6:	2f03      	cmp	r7, #3
    cae8:	d8e6      	bhi.n	cab8 <d_expression_1+0x110>
    caea:	e8df f017 	tbh	[pc, r7, lsl #1]
    caee:	0029      	.short	0x0029
    caf0:	007100ff 	.word	0x007100ff
    caf4:	0031      	.short	0x0031
    caf6:	4620      	mov	r0, r4
    caf8:	f000 f9b4 	bl	ce64 <d_template_args>
    cafc:	462a      	mov	r2, r5
    cafe:	4603      	mov	r3, r0
    cb00:	2104      	movs	r1, #4
    cb02:	4620      	mov	r0, r4
    cb04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cb08:	f7ff b8e4 	b.w	bcd4 <d_make_comp>
    cb0c:	3102      	adds	r1, #2
    cb0e:	60c1      	str	r1, [r0, #12]
    cb10:	f000 fb6e 	bl	d1f0 <d_type>
    cb14:	4605      	mov	r5, r0
    cb16:	4620      	mov	r0, r4
    cb18:	f001 f812 	bl	db40 <d_unqualified_name>
    cb1c:	68e3      	ldr	r3, [r4, #12]
    cb1e:	781b      	ldrb	r3, [r3, #0]
    cb20:	2b49      	cmp	r3, #73	; 0x49
    cb22:	4606      	mov	r6, r0
    cb24:	f000 80ae 	beq.w	cc84 <d_expression_1+0x2dc>
    cb28:	4603      	mov	r3, r0
    cb2a:	462a      	mov	r2, r5
    cb2c:	4620      	mov	r0, r4
    cb2e:	2101      	movs	r1, #1
    cb30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cb34:	f7ff b8ce 	b.w	bcd4 <d_make_comp>
    cb38:	3103      	adds	r1, #3
    cb3a:	60c1      	str	r1, [r0, #12]
    cb3c:	2000      	movs	r0, #0
    cb3e:	e79e      	b.n	ca7e <d_expression_1+0xd6>
    cb40:	462a      	mov	r2, r5
    cb42:	4620      	mov	r0, r4
    cb44:	2300      	movs	r3, #0
    cb46:	2135      	movs	r1, #53	; 0x35
    cb48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cb4c:	f7ff b8c2 	b.w	bcd4 <d_make_comp>
    cb50:	2e00      	cmp	r6, #0
    cb52:	d0b1      	beq.n	cab8 <d_expression_1+0x110>
    cb54:	498c      	ldr	r1, [pc, #560]	; (cd88 <d_expression_1+0x3e0>)
    cb56:	4630      	mov	r0, r6
    cb58:	f009 fad6 	bl	16108 <strcmp>
    cb5c:	2800      	cmp	r0, #0
    cb5e:	d071      	beq.n	cc44 <d_expression_1+0x29c>
    cb60:	7833      	ldrb	r3, [r6, #0]
    cb62:	2b66      	cmp	r3, #102	; 0x66
    cb64:	f000 80b2 	beq.w	cccc <d_expression_1+0x324>
    cb68:	2b6e      	cmp	r3, #110	; 0x6e
    cb6a:	d1a5      	bne.n	cab8 <d_expression_1+0x110>
    cb6c:	7873      	ldrb	r3, [r6, #1]
    cb6e:	2b77      	cmp	r3, #119	; 0x77
    cb70:	d001      	beq.n	cb76 <d_expression_1+0x1ce>
    cb72:	2b61      	cmp	r3, #97	; 0x61
    cb74:	d1a0      	bne.n	cab8 <d_expression_1+0x110>
    cb76:	215f      	movs	r1, #95	; 0x5f
    cb78:	4620      	mov	r0, r4
    cb7a:	f7ff fcb7 	bl	c4ec <d_exprlist>
    cb7e:	4606      	mov	r6, r0
    cb80:	4620      	mov	r0, r4
    cb82:	f000 fb35 	bl	d1f0 <d_type>
    cb86:	68e3      	ldr	r3, [r4, #12]
    cb88:	781a      	ldrb	r2, [r3, #0]
    cb8a:	2a45      	cmp	r2, #69	; 0x45
    cb8c:	4607      	mov	r7, r0
    cb8e:	f000 8099 	beq.w	ccc4 <d_expression_1+0x31c>
    cb92:	2a70      	cmp	r2, #112	; 0x70
    cb94:	f000 809e 	beq.w	ccd4 <d_expression_1+0x32c>
    cb98:	2a69      	cmp	r2, #105	; 0x69
    cb9a:	d18d      	bne.n	cab8 <d_expression_1+0x110>
    cb9c:	785b      	ldrb	r3, [r3, #1]
    cb9e:	2b6c      	cmp	r3, #108	; 0x6c
    cba0:	d18a      	bne.n	cab8 <d_expression_1+0x110>
    cba2:	4620      	mov	r0, r4
    cba4:	f7ff ff00 	bl	c9a8 <d_expression_1>
    cba8:	4603      	mov	r3, r0
    cbaa:	463a      	mov	r2, r7
    cbac:	213b      	movs	r1, #59	; 0x3b
    cbae:	4620      	mov	r0, r4
    cbb0:	f7ff f890 	bl	bcd4 <d_make_comp>
    cbb4:	4632      	mov	r2, r6
    cbb6:	4603      	mov	r3, r0
    cbb8:	213a      	movs	r1, #58	; 0x3a
    cbba:	4620      	mov	r0, r4
    cbbc:	f7ff f88a 	bl	bcd4 <d_make_comp>
    cbc0:	462a      	mov	r2, r5
    cbc2:	4603      	mov	r3, r0
    cbc4:	2139      	movs	r1, #57	; 0x39
    cbc6:	4620      	mov	r0, r4
    cbc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cbcc:	f7ff b882 	b.w	bcd4 <d_make_comp>
    cbd0:	2e00      	cmp	r6, #0
    cbd2:	f43f af71 	beq.w	cab8 <d_expression_1+0x110>
    cbd6:	686b      	ldr	r3, [r5, #4]
    cbd8:	681b      	ldr	r3, [r3, #0]
    cbda:	785a      	ldrb	r2, [r3, #1]
    cbdc:	2a63      	cmp	r2, #99	; 0x63
    cbde:	d044      	beq.n	cc6a <d_expression_1+0x2c2>
    cbe0:	7833      	ldrb	r3, [r6, #0]
    cbe2:	2b66      	cmp	r3, #102	; 0x66
    cbe4:	d059      	beq.n	cc9a <d_expression_1+0x2f2>
    cbe6:	4620      	mov	r0, r4
    cbe8:	f7ff fede 	bl	c9a8 <d_expression_1>
    cbec:	4607      	mov	r7, r0
    cbee:	4967      	ldr	r1, [pc, #412]	; (cd8c <d_expression_1+0x3e4>)
    cbf0:	4630      	mov	r0, r6
    cbf2:	f009 fa89 	bl	16108 <strcmp>
    cbf6:	b390      	cbz	r0, cc5e <d_expression_1+0x2b6>
    cbf8:	4965      	ldr	r1, [pc, #404]	; (cd90 <d_expression_1+0x3e8>)
    cbfa:	4630      	mov	r0, r6
    cbfc:	f009 fa84 	bl	16108 <strcmp>
    cc00:	b128      	cbz	r0, cc0e <d_expression_1+0x266>
    cc02:	4630      	mov	r0, r6
    cc04:	4963      	ldr	r1, [pc, #396]	; (cd94 <d_expression_1+0x3ec>)
    cc06:	f009 fa7f 	bl	16108 <strcmp>
    cc0a:	2800      	cmp	r0, #0
    cc0c:	d14a      	bne.n	cca4 <d_expression_1+0x2fc>
    cc0e:	4620      	mov	r0, r4
    cc10:	f000 ff96 	bl	db40 <d_unqualified_name>
    cc14:	68e3      	ldr	r3, [r4, #12]
    cc16:	781b      	ldrb	r3, [r3, #0]
    cc18:	2b49      	cmp	r3, #73	; 0x49
    cc1a:	4606      	mov	r6, r0
    cc1c:	d047      	beq.n	ccae <d_expression_1+0x306>
    cc1e:	4633      	mov	r3, r6
    cc20:	463a      	mov	r2, r7
    cc22:	2138      	movs	r1, #56	; 0x38
    cc24:	4620      	mov	r0, r4
    cc26:	f7ff f855 	bl	bcd4 <d_make_comp>
    cc2a:	462a      	mov	r2, r5
    cc2c:	4603      	mov	r3, r0
    cc2e:	2137      	movs	r1, #55	; 0x37
    cc30:	4620      	mov	r0, r4
    cc32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cc36:	f7ff b84d 	b.w	bcd4 <d_make_comp>
    cc3a:	4620      	mov	r0, r4
    cc3c:	f000 fad8 	bl	d1f0 <d_type>
    cc40:	4603      	mov	r3, r0
    cc42:	e6ef      	b.n	ca24 <d_expression_1+0x7c>
    cc44:	4620      	mov	r0, r4
    cc46:	f7ff feaf 	bl	c9a8 <d_expression_1>
    cc4a:	4606      	mov	r6, r0
    cc4c:	4620      	mov	r0, r4
    cc4e:	f7ff feab 	bl	c9a8 <d_expression_1>
    cc52:	4607      	mov	r7, r0
    cc54:	4620      	mov	r0, r4
    cc56:	f7ff fea7 	bl	c9a8 <d_expression_1>
    cc5a:	4603      	mov	r3, r0
    cc5c:	e7a5      	b.n	cbaa <d_expression_1+0x202>
    cc5e:	2145      	movs	r1, #69	; 0x45
    cc60:	4620      	mov	r0, r4
    cc62:	f7ff fc43 	bl	c4ec <d_exprlist>
    cc66:	4606      	mov	r6, r0
    cc68:	e7d9      	b.n	cc1e <d_expression_1+0x276>
    cc6a:	781b      	ldrb	r3, [r3, #0]
    cc6c:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
    cc70:	2a01      	cmp	r2, #1
    cc72:	d902      	bls.n	cc7a <d_expression_1+0x2d2>
    cc74:	3b72      	subs	r3, #114	; 0x72
    cc76:	2b01      	cmp	r3, #1
    cc78:	d8b2      	bhi.n	cbe0 <d_expression_1+0x238>
    cc7a:	4620      	mov	r0, r4
    cc7c:	f000 fab8 	bl	d1f0 <d_type>
    cc80:	4607      	mov	r7, r0
    cc82:	e7b4      	b.n	cbee <d_expression_1+0x246>
    cc84:	4620      	mov	r0, r4
    cc86:	f000 f8ed 	bl	ce64 <d_template_args>
    cc8a:	4632      	mov	r2, r6
    cc8c:	4603      	mov	r3, r0
    cc8e:	2104      	movs	r1, #4
    cc90:	4620      	mov	r0, r4
    cc92:	f7ff f81f 	bl	bcd4 <d_make_comp>
    cc96:	4603      	mov	r3, r0
    cc98:	e747      	b.n	cb2a <d_expression_1+0x182>
    cc9a:	4620      	mov	r0, r4
    cc9c:	f000 fe90 	bl	d9c0 <d_operator_name>
    cca0:	4607      	mov	r7, r0
    cca2:	e7a4      	b.n	cbee <d_expression_1+0x246>
    cca4:	4620      	mov	r0, r4
    cca6:	f7ff fe7f 	bl	c9a8 <d_expression_1>
    ccaa:	4606      	mov	r6, r0
    ccac:	e7b7      	b.n	cc1e <d_expression_1+0x276>
    ccae:	4620      	mov	r0, r4
    ccb0:	f000 f8d8 	bl	ce64 <d_template_args>
    ccb4:	4632      	mov	r2, r6
    ccb6:	4603      	mov	r3, r0
    ccb8:	2104      	movs	r1, #4
    ccba:	4620      	mov	r0, r4
    ccbc:	f7ff f80a 	bl	bcd4 <d_make_comp>
    ccc0:	4606      	mov	r6, r0
    ccc2:	e7ac      	b.n	cc1e <d_expression_1+0x276>
    ccc4:	3301      	adds	r3, #1
    ccc6:	60e3      	str	r3, [r4, #12]
    ccc8:	2300      	movs	r3, #0
    ccca:	e76e      	b.n	cbaa <d_expression_1+0x202>
    cccc:	4620      	mov	r0, r4
    ccce:	f000 fe77 	bl	d9c0 <d_operator_name>
    ccd2:	e7ba      	b.n	cc4a <d_expression_1+0x2a2>
    ccd4:	785a      	ldrb	r2, [r3, #1]
    ccd6:	2a69      	cmp	r2, #105	; 0x69
    ccd8:	f47f aeee 	bne.w	cab8 <d_expression_1+0x110>
    ccdc:	3302      	adds	r3, #2
    ccde:	60e3      	str	r3, [r4, #12]
    cce0:	2145      	movs	r1, #69	; 0x45
    cce2:	4620      	mov	r0, r4
    cce4:	f7ff fc02 	bl	c4ec <d_exprlist>
    cce8:	4603      	mov	r3, r0
    ccea:	e75e      	b.n	cbaa <d_expression_1+0x202>
    ccec:	2e00      	cmp	r6, #0
    ccee:	d046      	beq.n	cd7e <d_expression_1+0x3d6>
    ccf0:	7833      	ldrb	r3, [r6, #0]
    ccf2:	2b70      	cmp	r3, #112	; 0x70
    ccf4:	d015      	beq.n	cd22 <d_expression_1+0x37a>
    ccf6:	2b6d      	cmp	r3, #109	; 0x6d
    ccf8:	d013      	beq.n	cd22 <d_expression_1+0x37a>
    ccfa:	2700      	movs	r7, #0
    ccfc:	4630      	mov	r0, r6
    ccfe:	4926      	ldr	r1, [pc, #152]	; (cd98 <d_expression_1+0x3f0>)
    cd00:	f009 fa02 	bl	16108 <strcmp>
    cd04:	b1b8      	cbz	r0, cd36 <d_expression_1+0x38e>
    cd06:	4620      	mov	r0, r4
    cd08:	f7ff fe4e 	bl	c9a8 <d_expression_1>
    cd0c:	4603      	mov	r3, r0
    cd0e:	2f00      	cmp	r7, #0
    cd10:	f43f ae88 	beq.w	ca24 <d_expression_1+0x7c>
    cd14:	461a      	mov	r2, r3
    cd16:	2138      	movs	r1, #56	; 0x38
    cd18:	4620      	mov	r0, r4
    cd1a:	f7fe ffdb 	bl	bcd4 <d_make_comp>
    cd1e:	4603      	mov	r3, r0
    cd20:	e680      	b.n	ca24 <d_expression_1+0x7c>
    cd22:	7872      	ldrb	r2, [r6, #1]
    cd24:	429a      	cmp	r2, r3
    cd26:	d1e8      	bne.n	ccfa <d_expression_1+0x352>
    cd28:	68e3      	ldr	r3, [r4, #12]
    cd2a:	781a      	ldrb	r2, [r3, #0]
    cd2c:	2a5f      	cmp	r2, #95	; 0x5f
    cd2e:	d1e5      	bne.n	ccfc <d_expression_1+0x354>
    cd30:	3301      	adds	r3, #1
    cd32:	60e3      	str	r3, [r4, #12]
    cd34:	e7e1      	b.n	ccfa <d_expression_1+0x352>
    cd36:	4620      	mov	r0, r4
    cd38:	f000 f830 	bl	cd9c <d_template_args_1>
    cd3c:	4603      	mov	r3, r0
    cd3e:	e7e6      	b.n	cd0e <d_expression_1+0x366>
    cd40:	2b6f      	cmp	r3, #111	; 0x6f
    cd42:	d015      	beq.n	cd70 <d_expression_1+0x3c8>
    cd44:	2b69      	cmp	r3, #105	; 0x69
    cd46:	f47f aeaa 	bne.w	ca9e <d_expression_1+0xf6>
    cd4a:	784b      	ldrb	r3, [r1, #1]
    cd4c:	2b6c      	cmp	r3, #108	; 0x6c
    cd4e:	f47f ae50 	bne.w	c9f2 <d_expression_1+0x4a>
    cd52:	2500      	movs	r5, #0
    cd54:	3102      	adds	r1, #2
    cd56:	60e1      	str	r1, [r4, #12]
    cd58:	4620      	mov	r0, r4
    cd5a:	2145      	movs	r1, #69	; 0x45
    cd5c:	f7ff fbc6 	bl	c4ec <d_exprlist>
    cd60:	462a      	mov	r2, r5
    cd62:	4603      	mov	r3, r0
    cd64:	2130      	movs	r1, #48	; 0x30
    cd66:	4620      	mov	r0, r4
    cd68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cd6c:	f7fe bfb2 	b.w	bcd4 <d_make_comp>
    cd70:	784b      	ldrb	r3, [r1, #1]
    cd72:	2b6e      	cmp	r3, #110	; 0x6e
    cd74:	f47f ae3d 	bne.w	c9f2 <d_expression_1+0x4a>
    cd78:	3102      	adds	r1, #2
    cd7a:	60c1      	str	r1, [r0, #12]
    cd7c:	e628      	b.n	c9d0 <d_expression_1+0x28>
    cd7e:	2700      	movs	r7, #0
    cd80:	e7c1      	b.n	cd06 <d_expression_1+0x35e>
    cd82:	bf00      	nop
    cd84:	00024518 	.word	0x00024518
    cd88:	00024028 	.word	0x00024028
    cd8c:	0002401c 	.word	0x0002401c
    cd90:	00024020 	.word	0x00024020
    cd94:	00024024 	.word	0x00024024
    cd98:	00024018 	.word	0x00024018

0000cd9c <d_template_args_1>:
    cd9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cda0:	68c2      	ldr	r2, [r0, #12]
    cda2:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
    cda6:	7813      	ldrb	r3, [r2, #0]
    cda8:	2b45      	cmp	r3, #69	; 0x45
    cdaa:	b083      	sub	sp, #12
    cdac:	4604      	mov	r4, r0
    cdae:	d04e      	beq.n	ce4e <d_template_args_1+0xb2>
    cdb0:	ae02      	add	r6, sp, #8
    cdb2:	2100      	movs	r1, #0
    cdb4:	f846 1d04 	str.w	r1, [r6, #-4]!
    cdb8:	2701      	movs	r7, #1
    cdba:	3b49      	subs	r3, #73	; 0x49
    cdbc:	2b0f      	cmp	r3, #15
    cdbe:	d83e      	bhi.n	ce3e <d_template_args_1+0xa2>
    cdc0:	e8df f003 	tbb	[pc, r3]
    cdc4:	1b3d3838 	.word	0x1b3d3838
    cdc8:	3d3d3d3d 	.word	0x3d3d3d3d
    cdcc:	3d3d3d3d 	.word	0x3d3d3d3d
    cdd0:	083d3d3d 	.word	0x083d3d3d
    cdd4:	3201      	adds	r2, #1
    cdd6:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
    cdda:	60e2      	str	r2, [r4, #12]
    cddc:	6367      	str	r7, [r4, #52]	; 0x34
    cdde:	4620      	mov	r0, r4
    cde0:	f7ff fde2 	bl	c9a8 <d_expression_1>
    cde4:	68e3      	ldr	r3, [r4, #12]
    cde6:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    cdea:	781a      	ldrb	r2, [r3, #0]
    cdec:	2a45      	cmp	r2, #69	; 0x45
    cdee:	4605      	mov	r5, r0
    cdf0:	d02a      	beq.n	ce48 <d_template_args_1+0xac>
    cdf2:	2000      	movs	r0, #0
    cdf4:	b003      	add	sp, #12
    cdf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cdfa:	4620      	mov	r0, r4
    cdfc:	f001 faee 	bl	e3dc <d_expr_primary>
    ce00:	4605      	mov	r5, r0
    ce02:	2300      	movs	r3, #0
    ce04:	212f      	movs	r1, #47	; 0x2f
    ce06:	462a      	mov	r2, r5
    ce08:	4620      	mov	r0, r4
    ce0a:	2d00      	cmp	r5, #0
    ce0c:	d0f1      	beq.n	cdf2 <d_template_args_1+0x56>
    ce0e:	f7fe ff61 	bl	bcd4 <d_make_comp>
    ce12:	6030      	str	r0, [r6, #0]
    ce14:	f100 0608 	add.w	r6, r0, #8
    ce18:	2800      	cmp	r0, #0
    ce1a:	d0ea      	beq.n	cdf2 <d_template_args_1+0x56>
    ce1c:	68e2      	ldr	r2, [r4, #12]
    ce1e:	7813      	ldrb	r3, [r2, #0]
    ce20:	2b45      	cmp	r3, #69	; 0x45
    ce22:	d1ca      	bne.n	cdba <d_template_args_1+0x1e>
    ce24:	9801      	ldr	r0, [sp, #4]
    ce26:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    ce2a:	3201      	adds	r2, #1
    ce2c:	60e2      	str	r2, [r4, #12]
    ce2e:	b003      	add	sp, #12
    ce30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ce34:	4620      	mov	r0, r4
    ce36:	f000 f815 	bl	ce64 <d_template_args>
    ce3a:	4605      	mov	r5, r0
    ce3c:	e7e1      	b.n	ce02 <d_template_args_1+0x66>
    ce3e:	4620      	mov	r0, r4
    ce40:	f000 f9d6 	bl	d1f0 <d_type>
    ce44:	4605      	mov	r5, r0
    ce46:	e7dc      	b.n	ce02 <d_template_args_1+0x66>
    ce48:	3301      	adds	r3, #1
    ce4a:	60e3      	str	r3, [r4, #12]
    ce4c:	e7d9      	b.n	ce02 <d_template_args_1+0x66>
    ce4e:	3201      	adds	r2, #1
    ce50:	2300      	movs	r3, #0
    ce52:	60c2      	str	r2, [r0, #12]
    ce54:	212f      	movs	r1, #47	; 0x2f
    ce56:	461a      	mov	r2, r3
    ce58:	b003      	add	sp, #12
    ce5a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ce5e:	f7fe bf39 	b.w	bcd4 <d_make_comp>
    ce62:	bf00      	nop

0000ce64 <d_template_args>:
    ce64:	68c2      	ldr	r2, [r0, #12]
    ce66:	7813      	ldrb	r3, [r2, #0]
    ce68:	3b49      	subs	r3, #73	; 0x49
    ce6a:	2b01      	cmp	r3, #1
    ce6c:	d802      	bhi.n	ce74 <d_template_args+0x10>
    ce6e:	3201      	adds	r2, #1
    ce70:	60c2      	str	r2, [r0, #12]
    ce72:	e793      	b.n	cd9c <d_template_args_1>
    ce74:	2000      	movs	r0, #0
    ce76:	4770      	bx	lr

0000ce78 <d_name>:
    ce78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ce7c:	68c2      	ldr	r2, [r0, #12]
    ce7e:	7813      	ldrb	r3, [r2, #0]
    ce80:	3b4e      	subs	r3, #78	; 0x4e
    ce82:	b085      	sub	sp, #20
    ce84:	4605      	mov	r5, r0
    ce86:	2b0c      	cmp	r3, #12
    ce88:	d870      	bhi.n	cf6c <d_name+0xf4>
    ce8a:	e8df f003 	tbb	[pc, r3]
    ce8e:	6f1e      	.short	0x6f1e
    ce90:	5b6f6f6f 	.word	0x5b6f6f6f
    ce94:	6f6f176f 	.word	0x6f6f176f
    ce98:	6f6f      	.short	0x6f6f
    ce9a:	07          	.byte	0x07
    ce9b:	00          	.byte	0x00
    ce9c:	3201      	adds	r2, #1
    ce9e:	2100      	movs	r1, #0
    cea0:	60c2      	str	r2, [r0, #12]
    cea2:	f000 ffbd 	bl	de20 <d_encoding>
    cea6:	68eb      	ldr	r3, [r5, #12]
    cea8:	7819      	ldrb	r1, [r3, #0]
    ceaa:	2945      	cmp	r1, #69	; 0x45
    ceac:	4606      	mov	r6, r0
    ceae:	f000 8099 	beq.w	cfe4 <d_name+0x16c>
    ceb2:	2200      	movs	r2, #0
    ceb4:	4610      	mov	r0, r2
    ceb6:	b005      	add	sp, #20
    ceb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cebc:	f000 fe40 	bl	db40 <d_unqualified_name>
    cec0:	4602      	mov	r2, r0
    cec2:	4610      	mov	r0, r2
    cec4:	b005      	add	sp, #20
    cec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ceca:	3201      	adds	r2, #1
    cecc:	60c2      	str	r2, [r0, #12]
    cece:	a903      	add	r1, sp, #12
    ced0:	2201      	movs	r2, #1
    ced2:	f7fe ff4b 	bl	bd6c <d_cv_qualifiers>
    ced6:	4681      	mov	r9, r0
    ced8:	2800      	cmp	r0, #0
    ceda:	d0ea      	beq.n	ceb2 <d_name+0x3a>
    cedc:	2100      	movs	r1, #0
    cede:	4628      	mov	r0, r5
    cee0:	f7fe ffaa 	bl	be38 <d_ref_qualifier>
    cee4:	68ea      	ldr	r2, [r5, #12]
    cee6:	4eb4      	ldr	r6, [pc, #720]	; (d1b8 <d_name+0x340>)
    cee8:	7814      	ldrb	r4, [r2, #0]
    ceea:	4680      	mov	r8, r0
    ceec:	2700      	movs	r7, #0
    ceee:	2c00      	cmp	r4, #0
    cef0:	f000 80e8 	beq.w	d0c4 <d_name+0x24c>
    cef4:	2c44      	cmp	r4, #68	; 0x44
    cef6:	f000 80d1 	beq.w	d09c <d_name+0x224>
    cefa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    cefe:	b2db      	uxtb	r3, r3
    cf00:	2b1c      	cmp	r3, #28
    cf02:	f240 80a8 	bls.w	d056 <d_name+0x1de>
    cf06:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    cf0a:	2b19      	cmp	r3, #25
    cf0c:	f240 80a8 	bls.w	d060 <d_name+0x1e8>
    cf10:	2c55      	cmp	r4, #85	; 0x55
    cf12:	f000 80de 	beq.w	d0d2 <d_name+0x25a>
    cf16:	2c53      	cmp	r4, #83	; 0x53
    cf18:	f000 80f1 	beq.w	d0fe <d_name+0x286>
    cf1c:	2c49      	cmp	r4, #73	; 0x49
    cf1e:	f000 80da 	beq.w	d0d6 <d_name+0x25e>
    cf22:	2c54      	cmp	r4, #84	; 0x54
    cf24:	f000 811f 	beq.w	d166 <d_name+0x2ee>
    cf28:	2c45      	cmp	r4, #69	; 0x45
    cf2a:	f000 814b 	beq.w	d1c4 <d_name+0x34c>
    cf2e:	2c4d      	cmp	r4, #77	; 0x4d
    cf30:	f040 80c8 	bne.w	d0c4 <d_name+0x24c>
    cf34:	2f00      	cmp	r7, #0
    cf36:	f000 80c5 	beq.w	d0c4 <d_name+0x24c>
    cf3a:	1c53      	adds	r3, r2, #1
    cf3c:	60eb      	str	r3, [r5, #12]
    cf3e:	7854      	ldrb	r4, [r2, #1]
    cf40:	461a      	mov	r2, r3
    cf42:	e7d4      	b.n	ceee <d_name+0x76>
    cf44:	7853      	ldrb	r3, [r2, #1]
    cf46:	2b74      	cmp	r3, #116	; 0x74
    cf48:	d031      	beq.n	cfae <d_name+0x136>
    cf4a:	2100      	movs	r1, #0
    cf4c:	f7ff f90a 	bl	c164 <d_substitution>
    cf50:	68eb      	ldr	r3, [r5, #12]
    cf52:	7819      	ldrb	r1, [r3, #0]
    cf54:	2949      	cmp	r1, #73	; 0x49
    cf56:	4602      	mov	r2, r0
    cf58:	d1b3      	bne.n	cec2 <d_name+0x4a>
    cf5a:	3301      	adds	r3, #1
    cf5c:	60eb      	str	r3, [r5, #12]
    cf5e:	4628      	mov	r0, r5
    cf60:	9201      	str	r2, [sp, #4]
    cf62:	f7ff ff1b 	bl	cd9c <d_template_args_1>
    cf66:	9a01      	ldr	r2, [sp, #4]
    cf68:	4603      	mov	r3, r0
    cf6a:	e017      	b.n	cf9c <d_name+0x124>
    cf6c:	f000 fde8 	bl	db40 <d_unqualified_name>
    cf70:	68eb      	ldr	r3, [r5, #12]
    cf72:	7819      	ldrb	r1, [r3, #0]
    cf74:	2949      	cmp	r1, #73	; 0x49
    cf76:	4602      	mov	r2, r0
    cf78:	d1a3      	bne.n	cec2 <d_name+0x4a>
    cf7a:	2a00      	cmp	r2, #0
    cf7c:	d099      	beq.n	ceb2 <d_name+0x3a>
    cf7e:	6a29      	ldr	r1, [r5, #32]
    cf80:	6a68      	ldr	r0, [r5, #36]	; 0x24
    cf82:	4281      	cmp	r1, r0
    cf84:	da95      	bge.n	ceb2 <d_name+0x3a>
    cf86:	69ec      	ldr	r4, [r5, #28]
    cf88:	1c48      	adds	r0, r1, #1
    cf8a:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
    cf8e:	6228      	str	r0, [r5, #32]
    cf90:	7819      	ldrb	r1, [r3, #0]
    cf92:	3949      	subs	r1, #73	; 0x49
    cf94:	2901      	cmp	r1, #1
    cf96:	bf88      	it	hi
    cf98:	2300      	movhi	r3, #0
    cf9a:	d9de      	bls.n	cf5a <d_name+0xe2>
    cf9c:	4628      	mov	r0, r5
    cf9e:	2104      	movs	r1, #4
    cfa0:	f7fe fe98 	bl	bcd4 <d_make_comp>
    cfa4:	4602      	mov	r2, r0
    cfa6:	4610      	mov	r0, r2
    cfa8:	b005      	add	sp, #20
    cfaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cfae:	6943      	ldr	r3, [r0, #20]
    cfb0:	6981      	ldr	r1, [r0, #24]
    cfb2:	3202      	adds	r2, #2
    cfb4:	428b      	cmp	r3, r1
    cfb6:	60c2      	str	r2, [r0, #12]
    cfb8:	f2c0 80ab 	blt.w	d112 <d_name+0x29a>
    cfbc:	2400      	movs	r4, #0
    cfbe:	4628      	mov	r0, r5
    cfc0:	f000 fdbe 	bl	db40 <d_unqualified_name>
    cfc4:	4622      	mov	r2, r4
    cfc6:	4603      	mov	r3, r0
    cfc8:	2101      	movs	r1, #1
    cfca:	4628      	mov	r0, r5
    cfcc:	f7fe fe82 	bl	bcd4 <d_make_comp>
    cfd0:	6b29      	ldr	r1, [r5, #48]	; 0x30
    cfd2:	68eb      	ldr	r3, [r5, #12]
    cfd4:	3103      	adds	r1, #3
    cfd6:	6329      	str	r1, [r5, #48]	; 0x30
    cfd8:	7819      	ldrb	r1, [r3, #0]
    cfda:	2949      	cmp	r1, #73	; 0x49
    cfdc:	4602      	mov	r2, r0
    cfde:	f47f af70 	bne.w	cec2 <d_name+0x4a>
    cfe2:	e7ca      	b.n	cf7a <d_name+0x102>
    cfe4:	1c5a      	adds	r2, r3, #1
    cfe6:	60ea      	str	r2, [r5, #12]
    cfe8:	7859      	ldrb	r1, [r3, #1]
    cfea:	2973      	cmp	r1, #115	; 0x73
    cfec:	f000 80a3 	beq.w	d136 <d_name+0x2be>
    cff0:	2964      	cmp	r1, #100	; 0x64
    cff2:	f000 80bc 	beq.w	d16e <d_name+0x2f6>
    cff6:	4628      	mov	r0, r5
    cff8:	f7ff ff3e 	bl	ce78 <d_name>
    cffc:	4604      	mov	r4, r0
    cffe:	2800      	cmp	r0, #0
    d000:	d072      	beq.n	d0e8 <d_name+0x270>
    d002:	7803      	ldrb	r3, [r0, #0]
    d004:	2b45      	cmp	r3, #69	; 0x45
    d006:	f000 8094 	beq.w	d132 <d_name+0x2ba>
    d00a:	2b47      	cmp	r3, #71	; 0x47
    d00c:	f000 8091 	beq.w	d132 <d_name+0x2ba>
    d010:	68eb      	ldr	r3, [r5, #12]
    d012:	781a      	ldrb	r2, [r3, #0]
    d014:	2a5f      	cmp	r2, #95	; 0x5f
    d016:	f040 808c 	bne.w	d132 <d_name+0x2ba>
    d01a:	f04f 37ff 	mov.w	r7, #4294967295
    d01e:	4628      	mov	r0, r5
    d020:	3301      	adds	r3, #1
    d022:	f840 3f0c 	str.w	r3, [r0, #12]!
    d026:	f7fe ffa5 	bl	bf74 <d_number.isra.0>
    d02a:	2800      	cmp	r0, #0
    d02c:	f6ff af41 	blt.w	ceb2 <d_name+0x3a>
    d030:	1c7b      	adds	r3, r7, #1
    d032:	d07e      	beq.n	d132 <d_name+0x2ba>
    d034:	696b      	ldr	r3, [r5, #20]
    d036:	69aa      	ldr	r2, [r5, #24]
    d038:	4293      	cmp	r3, r2
    d03a:	da55      	bge.n	d0e8 <d_name+0x270>
    d03c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    d040:	6929      	ldr	r1, [r5, #16]
    d042:	3301      	adds	r3, #1
    d044:	0092      	lsls	r2, r2, #2
    d046:	616b      	str	r3, [r5, #20]
    d048:	188b      	adds	r3, r1, r2
    d04a:	d04e      	beq.n	d0ea <d_name+0x272>
    d04c:	2046      	movs	r0, #70	; 0x46
    d04e:	5488      	strb	r0, [r1, r2]
    d050:	609f      	str	r7, [r3, #8]
    d052:	605c      	str	r4, [r3, #4]
    d054:	e049      	b.n	d0ea <d_name+0x272>
    d056:	fa26 f303 	lsr.w	r3, r6, r3
    d05a:	07d9      	lsls	r1, r3, #31
    d05c:	f57f af53 	bpl.w	cf06 <d_name+0x8e>
    d060:	4628      	mov	r0, r5
    d062:	f000 fd6d 	bl	db40 <d_unqualified_name>
    d066:	b347      	cbz	r7, d0ba <d_name+0x242>
    d068:	2101      	movs	r1, #1
    d06a:	4603      	mov	r3, r0
    d06c:	463a      	mov	r2, r7
    d06e:	4628      	mov	r0, r5
    d070:	f7fe fe30 	bl	bcd4 <d_make_comp>
    d074:	4607      	mov	r7, r0
    d076:	2c53      	cmp	r4, #83	; 0x53
    d078:	d01c      	beq.n	d0b4 <d_name+0x23c>
    d07a:	68ea      	ldr	r2, [r5, #12]
    d07c:	7814      	ldrb	r4, [r2, #0]
    d07e:	2c45      	cmp	r4, #69	; 0x45
    d080:	f43f af3b 	beq.w	cefa <d_name+0x82>
    d084:	b1f7      	cbz	r7, d0c4 <d_name+0x24c>
    d086:	6a2b      	ldr	r3, [r5, #32]
    d088:	6a69      	ldr	r1, [r5, #36]	; 0x24
    d08a:	428b      	cmp	r3, r1
    d08c:	da1a      	bge.n	d0c4 <d_name+0x24c>
    d08e:	69e9      	ldr	r1, [r5, #28]
    d090:	1c58      	adds	r0, r3, #1
    d092:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    d096:	6228      	str	r0, [r5, #32]
    d098:	7814      	ldrb	r4, [r2, #0]
    d09a:	e728      	b.n	ceee <d_name+0x76>
    d09c:	7853      	ldrb	r3, [r2, #1]
    d09e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    d0a2:	2b54      	cmp	r3, #84	; 0x54
    d0a4:	4628      	mov	r0, r5
    d0a6:	d00a      	beq.n	d0be <d_name+0x246>
    d0a8:	f000 fd4a 	bl	db40 <d_unqualified_name>
    d0ac:	2f00      	cmp	r7, #0
    d0ae:	d1db      	bne.n	d068 <d_name+0x1f0>
    d0b0:	4607      	mov	r7, r0
    d0b2:	e7e2      	b.n	d07a <d_name+0x202>
    d0b4:	68ea      	ldr	r2, [r5, #12]
    d0b6:	7814      	ldrb	r4, [r2, #0]
    d0b8:	e719      	b.n	ceee <d_name+0x76>
    d0ba:	4607      	mov	r7, r0
    d0bc:	e7db      	b.n	d076 <d_name+0x1fe>
    d0be:	f000 f897 	bl	d1f0 <d_type>
    d0c2:	e7f3      	b.n	d0ac <d_name+0x234>
    d0c4:	2200      	movs	r2, #0
    d0c6:	4610      	mov	r0, r2
    d0c8:	f8c9 2000 	str.w	r2, [r9]
    d0cc:	b005      	add	sp, #20
    d0ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d0d2:	4628      	mov	r0, r5
    d0d4:	e7e8      	b.n	d0a8 <d_name+0x230>
    d0d6:	2f00      	cmp	r7, #0
    d0d8:	d0f4      	beq.n	d0c4 <d_name+0x24c>
    d0da:	3201      	adds	r2, #1
    d0dc:	60ea      	str	r2, [r5, #12]
    d0de:	4628      	mov	r0, r5
    d0e0:	f7ff fe5c 	bl	cd9c <d_template_args_1>
    d0e4:	2104      	movs	r1, #4
    d0e6:	e7c0      	b.n	d06a <d_name+0x1f2>
    d0e8:	2300      	movs	r3, #0
    d0ea:	4632      	mov	r2, r6
    d0ec:	4628      	mov	r0, r5
    d0ee:	2102      	movs	r1, #2
    d0f0:	f7fe fdf0 	bl	bcd4 <d_make_comp>
    d0f4:	4602      	mov	r2, r0
    d0f6:	4610      	mov	r0, r2
    d0f8:	b005      	add	sp, #20
    d0fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d0fe:	2101      	movs	r1, #1
    d100:	4628      	mov	r0, r5
    d102:	f7ff f82f 	bl	c164 <d_substitution>
    d106:	2f00      	cmp	r7, #0
    d108:	d1ae      	bne.n	d068 <d_name+0x1f0>
    d10a:	68ea      	ldr	r2, [r5, #12]
    d10c:	4607      	mov	r7, r0
    d10e:	7814      	ldrb	r4, [r2, #0]
    d110:	e6ed      	b.n	ceee <d_name+0x76>
    d112:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    d116:	6901      	ldr	r1, [r0, #16]
    d118:	0092      	lsls	r2, r2, #2
    d11a:	3301      	adds	r3, #1
    d11c:	188c      	adds	r4, r1, r2
    d11e:	6143      	str	r3, [r0, #20]
    d120:	f43f af4d 	beq.w	cfbe <d_name+0x146>
    d124:	2300      	movs	r3, #0
    d126:	548b      	strb	r3, [r1, r2]
    d128:	4824      	ldr	r0, [pc, #144]	; (d1bc <d_name+0x344>)
    d12a:	6060      	str	r0, [r4, #4]
    d12c:	2303      	movs	r3, #3
    d12e:	60a3      	str	r3, [r4, #8]
    d130:	e745      	b.n	cfbe <d_name+0x146>
    d132:	4623      	mov	r3, r4
    d134:	e7d9      	b.n	d0ea <d_name+0x272>
    d136:	1c9a      	adds	r2, r3, #2
    d138:	60ea      	str	r2, [r5, #12]
    d13a:	789a      	ldrb	r2, [r3, #2]
    d13c:	2a5f      	cmp	r2, #95	; 0x5f
    d13e:	d032      	beq.n	d1a6 <d_name+0x32e>
    d140:	696b      	ldr	r3, [r5, #20]
    d142:	69aa      	ldr	r2, [r5, #24]
    d144:	4293      	cmp	r3, r2
    d146:	dacf      	bge.n	d0e8 <d_name+0x270>
    d148:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    d14c:	6929      	ldr	r1, [r5, #16]
    d14e:	3301      	adds	r3, #1
    d150:	0092      	lsls	r2, r2, #2
    d152:	616b      	str	r3, [r5, #20]
    d154:	188b      	adds	r3, r1, r2
    d156:	d0c8      	beq.n	d0ea <d_name+0x272>
    d158:	2400      	movs	r4, #0
    d15a:	548c      	strb	r4, [r1, r2]
    d15c:	4818      	ldr	r0, [pc, #96]	; (d1c0 <d_name+0x348>)
    d15e:	6058      	str	r0, [r3, #4]
    d160:	220e      	movs	r2, #14
    d162:	609a      	str	r2, [r3, #8]
    d164:	e7c1      	b.n	d0ea <d_name+0x272>
    d166:	4628      	mov	r0, r5
    d168:	f7fe ff62 	bl	c030 <d_template_param>
    d16c:	e79e      	b.n	d0ac <d_name+0x234>
    d16e:	3302      	adds	r3, #2
    d170:	60eb      	str	r3, [r5, #12]
    d172:	4628      	mov	r0, r5
    d174:	f7fe ff40 	bl	bff8 <d_compact_number>
    d178:	1e07      	subs	r7, r0, #0
    d17a:	f6ff ae9a 	blt.w	ceb2 <d_name+0x3a>
    d17e:	4628      	mov	r0, r5
    d180:	f7ff fe7a 	bl	ce78 <d_name>
    d184:	4604      	mov	r4, r0
    d186:	2800      	cmp	r0, #0
    d188:	f43f af54 	beq.w	d034 <d_name+0x1bc>
    d18c:	7803      	ldrb	r3, [r0, #0]
    d18e:	2b45      	cmp	r3, #69	; 0x45
    d190:	f43f af50 	beq.w	d034 <d_name+0x1bc>
    d194:	2b47      	cmp	r3, #71	; 0x47
    d196:	f43f af4d 	beq.w	d034 <d_name+0x1bc>
    d19a:	68eb      	ldr	r3, [r5, #12]
    d19c:	781a      	ldrb	r2, [r3, #0]
    d19e:	2a5f      	cmp	r2, #95	; 0x5f
    d1a0:	f47f af48 	bne.w	d034 <d_name+0x1bc>
    d1a4:	e73b      	b.n	d01e <d_name+0x1a6>
    d1a6:	4628      	mov	r0, r5
    d1a8:	3303      	adds	r3, #3
    d1aa:	f840 3f0c 	str.w	r3, [r0, #12]!
    d1ae:	f7fe fee1 	bl	bf74 <d_number.isra.0>
    d1b2:	2800      	cmp	r0, #0
    d1b4:	dac4      	bge.n	d140 <d_name+0x2c8>
    d1b6:	e67c      	b.n	ceb2 <d_name+0x3a>
    d1b8:	100803ff 	.word	0x100803ff
    d1bc:	0002403c 	.word	0x0002403c
    d1c0:	0002402c 	.word	0x0002402c
    d1c4:	f8c9 7000 	str.w	r7, [r9]
    d1c8:	2f00      	cmp	r7, #0
    d1ca:	f43f ae72 	beq.w	ceb2 <d_name+0x3a>
    d1ce:	f1b8 0f00 	cmp.w	r8, #0
    d1d2:	d004      	beq.n	d1de <d_name+0x366>
    d1d4:	9b03      	ldr	r3, [sp, #12]
    d1d6:	f8c8 3004 	str.w	r3, [r8, #4]
    d1da:	f8cd 800c 	str.w	r8, [sp, #12]
    d1de:	7813      	ldrb	r3, [r2, #0]
    d1e0:	2b45      	cmp	r3, #69	; 0x45
    d1e2:	f47f ae66 	bne.w	ceb2 <d_name+0x3a>
    d1e6:	3201      	adds	r2, #1
    d1e8:	60ea      	str	r2, [r5, #12]
    d1ea:	9a03      	ldr	r2, [sp, #12]
    d1ec:	e669      	b.n	cec2 <d_name+0x4a>
    d1ee:	bf00      	nop

0000d1f0 <d_type>:
    d1f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d1f4:	68c2      	ldr	r2, [r0, #12]
    d1f6:	7813      	ldrb	r3, [r2, #0]
    d1f8:	2b72      	cmp	r3, #114	; 0x72
    d1fa:	b083      	sub	sp, #12
    d1fc:	4604      	mov	r4, r0
    d1fe:	d058      	beq.n	d2b2 <d_type+0xc2>
    d200:	2b56      	cmp	r3, #86	; 0x56
    d202:	d056      	beq.n	d2b2 <d_type+0xc2>
    d204:	2b4b      	cmp	r3, #75	; 0x4b
    d206:	d054      	beq.n	d2b2 <d_type+0xc2>
    d208:	2b44      	cmp	r3, #68	; 0x44
    d20a:	f000 809f 	beq.w	d34c <d_type+0x15c>
    d20e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    d212:	294a      	cmp	r1, #74	; 0x4a
    d214:	f200 808a 	bhi.w	d32c <d_type+0x13c>
    d218:	e8df f011 	tbh	[pc, r1, lsl #1]
    d21c:	012a012a 	.word	0x012a012a
    d220:	012a012a 	.word	0x012a012a
    d224:	012a012a 	.word	0x012a012a
    d228:	012a012a 	.word	0x012a012a
    d22c:	012a012a 	.word	0x012a012a
    d230:	00880088 	.word	0x00880088
    d234:	00880088 	.word	0x00880088
    d238:	00880088 	.word	0x00880088
    d23c:	020b0088 	.word	0x020b0088
    d240:	01520088 	.word	0x01520088
    d244:	00880088 	.word	0x00880088
    d248:	0160014c 	.word	0x0160014c
    d24c:	00880088 	.word	0x00880088
    d250:	00880088 	.word	0x00880088
    d254:	016e0088 	.word	0x016e0088
    d258:	0186012a 	.word	0x0186012a
    d25c:	008801c3 	.word	0x008801c3
    d260:	01a20194 	.word	0x01a20194
    d264:	01f301d1 	.word	0x01f301d1
    d268:	00880088 	.word	0x00880088
    d26c:	00880088 	.word	0x00880088
    d270:	0088012a 	.word	0x0088012a
    d274:	00880088 	.word	0x00880088
    d278:	00880088 	.word	0x00880088
    d27c:	010c0088 	.word	0x010c0088
    d280:	010c010c 	.word	0x010c010c
    d284:	010c010c 	.word	0x010c010c
    d288:	010c010c 	.word	0x010c010c
    d28c:	010c010c 	.word	0x010c010c
    d290:	0088010c 	.word	0x0088010c
    d294:	010c010c 	.word	0x010c010c
    d298:	010c010c 	.word	0x010c010c
    d29c:	00880088 	.word	0x00880088
    d2a0:	010c0088 	.word	0x010c0088
    d2a4:	013e010c 	.word	0x013e010c
    d2a8:	010c010c 	.word	0x010c010c
    d2ac:	010c010c 	.word	0x010c010c
    d2b0:	010c      	.short	0x010c
    d2b2:	2200      	movs	r2, #0
    d2b4:	a901      	add	r1, sp, #4
    d2b6:	4620      	mov	r0, r4
    d2b8:	f7fe fd58 	bl	bd6c <d_cv_qualifiers>
    d2bc:	4605      	mov	r5, r0
    d2be:	2800      	cmp	r0, #0
    d2c0:	d034      	beq.n	d32c <d_type+0x13c>
    d2c2:	68e3      	ldr	r3, [r4, #12]
    d2c4:	781b      	ldrb	r3, [r3, #0]
    d2c6:	2b46      	cmp	r3, #70	; 0x46
    d2c8:	4620      	mov	r0, r4
    d2ca:	d034      	beq.n	d336 <d_type+0x146>
    d2cc:	f7ff ff90 	bl	d1f0 <d_type>
    d2d0:	6028      	str	r0, [r5, #0]
    d2d2:	b358      	cbz	r0, d32c <d_type+0x13c>
    d2d4:	7803      	ldrb	r3, [r0, #0]
    d2d6:	3b1f      	subs	r3, #31
    d2d8:	2b01      	cmp	r3, #1
    d2da:	d930      	bls.n	d33e <d_type+0x14e>
    d2dc:	9a01      	ldr	r2, [sp, #4]
    d2de:	b32a      	cbz	r2, d32c <d_type+0x13c>
    d2e0:	6a23      	ldr	r3, [r4, #32]
    d2e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    d2e4:	428b      	cmp	r3, r1
    d2e6:	da21      	bge.n	d32c <d_type+0x13c>
    d2e8:	69e0      	ldr	r0, [r4, #28]
    d2ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    d2ee:	9d01      	ldr	r5, [sp, #4]
    d2f0:	1c59      	adds	r1, r3, #1
    d2f2:	4628      	mov	r0, r5
    d2f4:	6221      	str	r1, [r4, #32]
    d2f6:	b003      	add	sp, #12
    d2f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d2fc:	2301      	movs	r3, #1
    d2fe:	6b45      	ldr	r5, [r0, #52]	; 0x34
    d300:	6343      	str	r3, [r0, #52]	; 0x34
    d302:	f7ff fb51 	bl	c9a8 <d_expression_1>
    d306:	6365      	str	r5, [r4, #52]	; 0x34
    d308:	4602      	mov	r2, r0
    d30a:	2300      	movs	r3, #0
    d30c:	2142      	movs	r1, #66	; 0x42
    d30e:	4620      	mov	r0, r4
    d310:	f7fe fce0 	bl	bcd4 <d_make_comp>
    d314:	4605      	mov	r5, r0
    d316:	9001      	str	r0, [sp, #4]
    d318:	b140      	cbz	r0, d32c <d_type+0x13c>
    d31a:	68e3      	ldr	r3, [r4, #12]
    d31c:	781a      	ldrb	r2, [r3, #0]
    d31e:	b12a      	cbz	r2, d32c <d_type+0x13c>
    d320:	1c5a      	adds	r2, r3, #1
    d322:	60e2      	str	r2, [r4, #12]
    d324:	781b      	ldrb	r3, [r3, #0]
    d326:	2b45      	cmp	r3, #69	; 0x45
    d328:	f000 80aa 	beq.w	d480 <d_type+0x290>
    d32c:	2500      	movs	r5, #0
    d32e:	4628      	mov	r0, r5
    d330:	b003      	add	sp, #12
    d332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d336:	f000 fd53 	bl	dde0 <d_function_type>
    d33a:	6028      	str	r0, [r5, #0]
    d33c:	e7c9      	b.n	d2d2 <d_type+0xe2>
    d33e:	9a01      	ldr	r2, [sp, #4]
    d340:	6843      	ldr	r3, [r0, #4]
    d342:	6042      	str	r2, [r0, #4]
    d344:	682a      	ldr	r2, [r5, #0]
    d346:	9201      	str	r2, [sp, #4]
    d348:	602b      	str	r3, [r5, #0]
    d34a:	e7c7      	b.n	d2dc <d_type+0xec>
    d34c:	7853      	ldrb	r3, [r2, #1]
    d34e:	2b78      	cmp	r3, #120	; 0x78
    d350:	d0af      	beq.n	d2b2 <d_type+0xc2>
    d352:	1c53      	adds	r3, r2, #1
    d354:	60c3      	str	r3, [r0, #12]
    d356:	7853      	ldrb	r3, [r2, #1]
    d358:	2b00      	cmp	r3, #0
    d35a:	d0e7      	beq.n	d32c <d_type+0x13c>
    d35c:	1c93      	adds	r3, r2, #2
    d35e:	60c3      	str	r3, [r0, #12]
    d360:	7853      	ldrb	r3, [r2, #1]
    d362:	3b46      	subs	r3, #70	; 0x46
    d364:	2b30      	cmp	r3, #48	; 0x30
    d366:	d8e1      	bhi.n	d32c <d_type+0x13c>
    d368:	a101      	add	r1, pc, #4	; (adr r1, d370 <d_type+0x180>)
    d36a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    d36e:	bf00      	nop
    d370:	0000d85b 	.word	0x0000d85b
    d374:	0000d32d 	.word	0x0000d32d
    d378:	0000d32d 	.word	0x0000d32d
    d37c:	0000d32d 	.word	0x0000d32d
    d380:	0000d32d 	.word	0x0000d32d
    d384:	0000d32d 	.word	0x0000d32d
    d388:	0000d32d 	.word	0x0000d32d
    d38c:	0000d32d 	.word	0x0000d32d
    d390:	0000d32d 	.word	0x0000d32d
    d394:	0000d32d 	.word	0x0000d32d
    d398:	0000d32d 	.word	0x0000d32d
    d39c:	0000d32d 	.word	0x0000d32d
    d3a0:	0000d32d 	.word	0x0000d32d
    d3a4:	0000d32d 	.word	0x0000d32d
    d3a8:	0000d2fd 	.word	0x0000d2fd
    d3ac:	0000d32d 	.word	0x0000d32d
    d3b0:	0000d32d 	.word	0x0000d32d
    d3b4:	0000d32d 	.word	0x0000d32d
    d3b8:	0000d32d 	.word	0x0000d32d
    d3bc:	0000d32d 	.word	0x0000d32d
    d3c0:	0000d32d 	.word	0x0000d32d
    d3c4:	0000d32d 	.word	0x0000d32d
    d3c8:	0000d32d 	.word	0x0000d32d
    d3cc:	0000d32d 	.word	0x0000d32d
    d3d0:	0000d32d 	.word	0x0000d32d
    d3d4:	0000d32d 	.word	0x0000d32d
    d3d8:	0000d32d 	.word	0x0000d32d
    d3dc:	0000d82f 	.word	0x0000d82f
    d3e0:	0000d32d 	.word	0x0000d32d
    d3e4:	0000d803 	.word	0x0000d803
    d3e8:	0000d7e3 	.word	0x0000d7e3
    d3ec:	0000d7b9 	.word	0x0000d7b9
    d3f0:	0000d78b 	.word	0x0000d78b
    d3f4:	0000d32d 	.word	0x0000d32d
    d3f8:	0000d75d 	.word	0x0000d75d
    d3fc:	0000d739 	.word	0x0000d739
    d400:	0000d32d 	.word	0x0000d32d
    d404:	0000d32d 	.word	0x0000d32d
    d408:	0000d32d 	.word	0x0000d32d
    d40c:	0000d32d 	.word	0x0000d32d
    d410:	0000d6ff 	.word	0x0000d6ff
    d414:	0000d32d 	.word	0x0000d32d
    d418:	0000d6e9 	.word	0x0000d6e9
    d41c:	0000d32d 	.word	0x0000d32d
    d420:	0000d32d 	.word	0x0000d32d
    d424:	0000d6bb 	.word	0x0000d6bb
    d428:	0000d2fd 	.word	0x0000d2fd
    d42c:	0000d32d 	.word	0x0000d32d
    d430:	0000d685 	.word	0x0000d685
    d434:	6960      	ldr	r0, [r4, #20]
    d436:	69a5      	ldr	r5, [r4, #24]
    d438:	49bc      	ldr	r1, [pc, #752]	; (d72c <d_type+0x53c>)
    d43a:	3b61      	subs	r3, #97	; 0x61
    d43c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    d440:	42a8      	cmp	r0, r5
    d442:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    d446:	f280 823a 	bge.w	d8be <d_type+0x6ce>
    d44a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    d44e:	6926      	ldr	r6, [r4, #16]
    d450:	0089      	lsls	r1, r1, #2
    d452:	3001      	adds	r0, #1
    d454:	1875      	adds	r5, r6, r1
    d456:	6160      	str	r0, [r4, #20]
    d458:	f000 8231 	beq.w	d8be <d_type+0x6ce>
    d45c:	2027      	movs	r0, #39	; 0x27
    d45e:	5470      	strb	r0, [r6, r1]
    d460:	606b      	str	r3, [r5, #4]
    d462:	6859      	ldr	r1, [r3, #4]
    d464:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d466:	3201      	adds	r2, #1
    d468:	440b      	add	r3, r1
    d46a:	60e2      	str	r2, [r4, #12]
    d46c:	6323      	str	r3, [r4, #48]	; 0x30
    d46e:	e75e      	b.n	d32e <d_type+0x13e>
    d470:	4620      	mov	r0, r4
    d472:	f7ff fd01 	bl	ce78 <d_name>
    d476:	4605      	mov	r5, r0
    d478:	9001      	str	r0, [sp, #4]
    d47a:	2d00      	cmp	r5, #0
    d47c:	f43f af56 	beq.w	d32c <d_type+0x13c>
    d480:	6a23      	ldr	r3, [r4, #32]
    d482:	6a62      	ldr	r2, [r4, #36]	; 0x24
    d484:	4293      	cmp	r3, r2
    d486:	f6bf af51 	bge.w	d32c <d_type+0x13c>
    d48a:	69e1      	ldr	r1, [r4, #28]
    d48c:	1c5a      	adds	r2, r3, #1
    d48e:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
    d492:	9d01      	ldr	r5, [sp, #4]
    d494:	6222      	str	r2, [r4, #32]
    d496:	e74a      	b.n	d32e <d_type+0x13e>
    d498:	3201      	adds	r2, #1
    d49a:	60e2      	str	r2, [r4, #12]
    d49c:	4620      	mov	r0, r4
    d49e:	f7fe fde9 	bl	c074 <d_source_name>
    d4a2:	2300      	movs	r3, #0
    d4a4:	4602      	mov	r2, r0
    d4a6:	2128      	movs	r1, #40	; 0x28
    d4a8:	4620      	mov	r0, r4
    d4aa:	f7fe fc13 	bl	bcd4 <d_make_comp>
    d4ae:	4605      	mov	r5, r0
    d4b0:	9001      	str	r0, [sp, #4]
    d4b2:	e7e2      	b.n	d47a <d_type+0x28a>
    d4b4:	4620      	mov	r0, r4
    d4b6:	f000 fc93 	bl	dde0 <d_function_type>
    d4ba:	4605      	mov	r5, r0
    d4bc:	9001      	str	r0, [sp, #4]
    d4be:	e7dc      	b.n	d47a <d_type+0x28a>
    d4c0:	3201      	adds	r2, #1
    d4c2:	60e2      	str	r2, [r4, #12]
    d4c4:	4620      	mov	r0, r4
    d4c6:	f7ff fe93 	bl	d1f0 <d_type>
    d4ca:	2300      	movs	r3, #0
    d4cc:	4602      	mov	r2, r0
    d4ce:	2125      	movs	r1, #37	; 0x25
    d4d0:	4620      	mov	r0, r4
    d4d2:	f7fe fbff 	bl	bcd4 <d_make_comp>
    d4d6:	4605      	mov	r5, r0
    d4d8:	9001      	str	r0, [sp, #4]
    d4da:	e7ce      	b.n	d47a <d_type+0x28a>
    d4dc:	3201      	adds	r2, #1
    d4de:	60e2      	str	r2, [r4, #12]
    d4e0:	4620      	mov	r0, r4
    d4e2:	f7ff fe85 	bl	d1f0 <d_type>
    d4e6:	2300      	movs	r3, #0
    d4e8:	4602      	mov	r2, r0
    d4ea:	2126      	movs	r1, #38	; 0x26
    d4ec:	4620      	mov	r0, r4
    d4ee:	f7fe fbf1 	bl	bcd4 <d_make_comp>
    d4f2:	4605      	mov	r5, r0
    d4f4:	9001      	str	r0, [sp, #4]
    d4f6:	e7c0      	b.n	d47a <d_type+0x28a>
    d4f8:	3201      	adds	r2, #1
    d4fa:	60e2      	str	r2, [r4, #12]
    d4fc:	4620      	mov	r0, r4
    d4fe:	f7ff fe77 	bl	d1f0 <d_type>
    d502:	4605      	mov	r5, r0
    d504:	2800      	cmp	r0, #0
    d506:	f000 80bb 	beq.w	d680 <d_type+0x490>
    d50a:	4620      	mov	r0, r4
    d50c:	f7ff fe70 	bl	d1f0 <d_type>
    d510:	2800      	cmp	r0, #0
    d512:	f000 80b5 	beq.w	d680 <d_type+0x490>
    d516:	4603      	mov	r3, r0
    d518:	462a      	mov	r2, r5
    d51a:	212b      	movs	r1, #43	; 0x2b
    d51c:	4620      	mov	r0, r4
    d51e:	f7fe fbd9 	bl	bcd4 <d_make_comp>
    d522:	4605      	mov	r5, r0
    d524:	9501      	str	r5, [sp, #4]
    d526:	e7a8      	b.n	d47a <d_type+0x28a>
    d528:	3201      	adds	r2, #1
    d52a:	60e2      	str	r2, [r4, #12]
    d52c:	4620      	mov	r0, r4
    d52e:	f7ff fe5f 	bl	d1f0 <d_type>
    d532:	2300      	movs	r3, #0
    d534:	4602      	mov	r2, r0
    d536:	2124      	movs	r1, #36	; 0x24
    d538:	4620      	mov	r0, r4
    d53a:	f7fe fbcb 	bl	bcd4 <d_make_comp>
    d53e:	4605      	mov	r5, r0
    d540:	9001      	str	r0, [sp, #4]
    d542:	e79a      	b.n	d47a <d_type+0x28a>
    d544:	3201      	adds	r2, #1
    d546:	60e2      	str	r2, [r4, #12]
    d548:	4620      	mov	r0, r4
    d54a:	f7ff fe51 	bl	d1f0 <d_type>
    d54e:	2300      	movs	r3, #0
    d550:	4602      	mov	r2, r0
    d552:	2123      	movs	r1, #35	; 0x23
    d554:	4620      	mov	r0, r4
    d556:	f7fe fbbd 	bl	bcd4 <d_make_comp>
    d55a:	4605      	mov	r5, r0
    d55c:	9001      	str	r0, [sp, #4]
    d55e:	e78c      	b.n	d47a <d_type+0x28a>
    d560:	7853      	ldrb	r3, [r2, #1]
    d562:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d566:	2a09      	cmp	r2, #9
    d568:	d905      	bls.n	d576 <d_type+0x386>
    d56a:	2b5f      	cmp	r3, #95	; 0x5f
    d56c:	d003      	beq.n	d576 <d_type+0x386>
    d56e:	3b41      	subs	r3, #65	; 0x41
    d570:	2b19      	cmp	r3, #25
    d572:	f200 81c3 	bhi.w	d8fc <d_type+0x70c>
    d576:	2100      	movs	r1, #0
    d578:	4620      	mov	r0, r4
    d57a:	f7fe fdf3 	bl	c164 <d_substitution>
    d57e:	68e3      	ldr	r3, [r4, #12]
    d580:	9001      	str	r0, [sp, #4]
    d582:	781b      	ldrb	r3, [r3, #0]
    d584:	2b49      	cmp	r3, #73	; 0x49
    d586:	4605      	mov	r5, r0
    d588:	f47f aed1 	bne.w	d32e <d_type+0x13e>
    d58c:	4620      	mov	r0, r4
    d58e:	f7ff fc69 	bl	ce64 <d_template_args>
    d592:	462a      	mov	r2, r5
    d594:	4603      	mov	r3, r0
    d596:	2104      	movs	r1, #4
    d598:	4620      	mov	r0, r4
    d59a:	f7fe fb9b 	bl	bcd4 <d_make_comp>
    d59e:	4605      	mov	r5, r0
    d5a0:	e7c0      	b.n	d524 <d_type+0x334>
    d5a2:	3201      	adds	r2, #1
    d5a4:	60e2      	str	r2, [r4, #12]
    d5a6:	4620      	mov	r0, r4
    d5a8:	f7ff fe22 	bl	d1f0 <d_type>
    d5ac:	2300      	movs	r3, #0
    d5ae:	4602      	mov	r2, r0
    d5b0:	2122      	movs	r1, #34	; 0x22
    d5b2:	4620      	mov	r0, r4
    d5b4:	f7fe fb8e 	bl	bcd4 <d_make_comp>
    d5b8:	4605      	mov	r5, r0
    d5ba:	9001      	str	r0, [sp, #4]
    d5bc:	e75d      	b.n	d47a <d_type+0x28a>
    d5be:	4620      	mov	r0, r4
    d5c0:	f7fe fd36 	bl	c030 <d_template_param>
    d5c4:	68e6      	ldr	r6, [r4, #12]
    d5c6:	9001      	str	r0, [sp, #4]
    d5c8:	7833      	ldrb	r3, [r6, #0]
    d5ca:	2b49      	cmp	r3, #73	; 0x49
    d5cc:	4605      	mov	r5, r0
    d5ce:	f47f af54 	bne.w	d47a <d_type+0x28a>
    d5d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    d5d4:	2b00      	cmp	r3, #0
    d5d6:	f040 81a9 	bne.w	d92c <d_type+0x73c>
    d5da:	2800      	cmp	r0, #0
    d5dc:	f43f aea6 	beq.w	d32c <d_type+0x13c>
    d5e0:	6a23      	ldr	r3, [r4, #32]
    d5e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    d5e4:	4293      	cmp	r3, r2
    d5e6:	f6bf aea1 	bge.w	d32c <d_type+0x13c>
    d5ea:	69e1      	ldr	r1, [r4, #28]
    d5ec:	1c5a      	adds	r2, r3, #1
    d5ee:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    d5f2:	6222      	str	r2, [r4, #32]
    d5f4:	4620      	mov	r0, r4
    d5f6:	9d01      	ldr	r5, [sp, #4]
    d5f8:	f7ff fc34 	bl	ce64 <d_template_args>
    d5fc:	462a      	mov	r2, r5
    d5fe:	4603      	mov	r3, r0
    d600:	e7c9      	b.n	d596 <d_type+0x3a6>
    d602:	3201      	adds	r2, #1
    d604:	60e2      	str	r2, [r4, #12]
    d606:	4620      	mov	r0, r4
    d608:	f7fe fd34 	bl	c074 <d_source_name>
    d60c:	68e3      	ldr	r3, [r4, #12]
    d60e:	9001      	str	r0, [sp, #4]
    d610:	781b      	ldrb	r3, [r3, #0]
    d612:	2b49      	cmp	r3, #73	; 0x49
    d614:	4605      	mov	r5, r0
    d616:	f000 817e 	beq.w	d916 <d_type+0x726>
    d61a:	4620      	mov	r0, r4
    d61c:	f7ff fde8 	bl	d1f0 <d_type>
    d620:	9b01      	ldr	r3, [sp, #4]
    d622:	4602      	mov	r2, r0
    d624:	2121      	movs	r1, #33	; 0x21
    d626:	4620      	mov	r0, r4
    d628:	f7fe fb54 	bl	bcd4 <d_make_comp>
    d62c:	4605      	mov	r5, r0
    d62e:	9001      	str	r0, [sp, #4]
    d630:	e723      	b.n	d47a <d_type+0x28a>
    d632:	1c51      	adds	r1, r2, #1
    d634:	60e1      	str	r1, [r4, #12]
    d636:	7853      	ldrb	r3, [r2, #1]
    d638:	2b5f      	cmp	r3, #95	; 0x5f
    d63a:	f000 8144 	beq.w	d8c6 <d_type+0x6d6>
    d63e:	3b30      	subs	r3, #48	; 0x30
    d640:	2b09      	cmp	r3, #9
    d642:	f200 814e 	bhi.w	d8e2 <d_type+0x6f2>
    d646:	460b      	mov	r3, r1
    d648:	3301      	adds	r3, #1
    d64a:	60e3      	str	r3, [r4, #12]
    d64c:	781a      	ldrb	r2, [r3, #0]
    d64e:	3a30      	subs	r2, #48	; 0x30
    d650:	2a09      	cmp	r2, #9
    d652:	d9f9      	bls.n	d648 <d_type+0x458>
    d654:	6962      	ldr	r2, [r4, #20]
    d656:	69a0      	ldr	r0, [r4, #24]
    d658:	4282      	cmp	r2, r0
    d65a:	da11      	bge.n	d680 <d_type+0x490>
    d65c:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    d660:	6926      	ldr	r6, [r4, #16]
    d662:	0080      	lsls	r0, r0, #2
    d664:	3201      	adds	r2, #1
    d666:	1835      	adds	r5, r6, r0
    d668:	6162      	str	r2, [r4, #20]
    d66a:	d009      	beq.n	d680 <d_type+0x490>
    d66c:	1a5a      	subs	r2, r3, r1
    d66e:	d007      	beq.n	d680 <d_type+0x490>
    d670:	2700      	movs	r7, #0
    d672:	5437      	strb	r7, [r6, r0]
    d674:	6069      	str	r1, [r5, #4]
    d676:	60aa      	str	r2, [r5, #8]
    d678:	781a      	ldrb	r2, [r3, #0]
    d67a:	2a5f      	cmp	r2, #95	; 0x5f
    d67c:	f000 8190 	beq.w	d9a0 <d_type+0x7b0>
    d680:	2500      	movs	r5, #0
    d682:	e74f      	b.n	d524 <d_type+0x334>
    d684:	7893      	ldrb	r3, [r2, #2]
    d686:	2b5f      	cmp	r3, #95	; 0x5f
    d688:	f000 8180 	beq.w	d98c <d_type+0x79c>
    d68c:	f7fe fc9c 	bl	bfc8 <d_number_component>
    d690:	4605      	mov	r5, r0
    d692:	2d00      	cmp	r5, #0
    d694:	f43f af46 	beq.w	d524 <d_type+0x334>
    d698:	68e3      	ldr	r3, [r4, #12]
    d69a:	781a      	ldrb	r2, [r3, #0]
    d69c:	2a5f      	cmp	r2, #95	; 0x5f
    d69e:	d1ef      	bne.n	d680 <d_type+0x490>
    d6a0:	3301      	adds	r3, #1
    d6a2:	60e3      	str	r3, [r4, #12]
    d6a4:	4620      	mov	r0, r4
    d6a6:	f7ff fda3 	bl	d1f0 <d_type>
    d6aa:	462a      	mov	r2, r5
    d6ac:	4603      	mov	r3, r0
    d6ae:	212d      	movs	r1, #45	; 0x2d
    d6b0:	4620      	mov	r0, r4
    d6b2:	f7fe fb0f 	bl	bcd4 <d_make_comp>
    d6b6:	4605      	mov	r5, r0
    d6b8:	e734      	b.n	d524 <d_type+0x334>
    d6ba:	6942      	ldr	r2, [r0, #20]
    d6bc:	6983      	ldr	r3, [r0, #24]
    d6be:	429a      	cmp	r2, r3
    d6c0:	f280 80fd 	bge.w	d8be <d_type+0x6ce>
    d6c4:	230c      	movs	r3, #12
    d6c6:	6901      	ldr	r1, [r0, #16]
    d6c8:	fb03 f302 	mul.w	r3, r3, r2
    d6cc:	18cd      	adds	r5, r1, r3
    d6ce:	f102 0201 	add.w	r2, r2, #1
    d6d2:	6142      	str	r2, [r0, #20]
    d6d4:	f000 80f3 	beq.w	d8be <d_type+0x6ce>
    d6d8:	4a15      	ldr	r2, [pc, #84]	; (d730 <d_type+0x540>)
    d6da:	2027      	movs	r0, #39	; 0x27
    d6dc:	54c8      	strb	r0, [r1, r3]
    d6de:	606a      	str	r2, [r5, #4]
    d6e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d6e2:	3308      	adds	r3, #8
    d6e4:	6323      	str	r3, [r4, #48]	; 0x30
    d6e6:	e622      	b.n	d32e <d_type+0x13e>
    d6e8:	f7ff fd82 	bl	d1f0 <d_type>
    d6ec:	2300      	movs	r3, #0
    d6ee:	4602      	mov	r2, r0
    d6f0:	214a      	movs	r1, #74	; 0x4a
    d6f2:	4620      	mov	r0, r4
    d6f4:	f7fe faee 	bl	bcd4 <d_make_comp>
    d6f8:	4605      	mov	r5, r0
    d6fa:	9001      	str	r0, [sp, #4]
    d6fc:	e6bd      	b.n	d47a <d_type+0x28a>
    d6fe:	6942      	ldr	r2, [r0, #20]
    d700:	6983      	ldr	r3, [r0, #24]
    d702:	429a      	cmp	r2, r3
    d704:	f280 80db 	bge.w	d8be <d_type+0x6ce>
    d708:	230c      	movs	r3, #12
    d70a:	6901      	ldr	r1, [r0, #16]
    d70c:	fb03 f302 	mul.w	r3, r3, r2
    d710:	18cd      	adds	r5, r1, r3
    d712:	f102 0201 	add.w	r2, r2, #1
    d716:	6142      	str	r2, [r0, #20]
    d718:	f000 80d1 	beq.w	d8be <d_type+0x6ce>
    d71c:	2027      	movs	r0, #39	; 0x27
    d71e:	4a05      	ldr	r2, [pc, #20]	; (d734 <d_type+0x544>)
    d720:	54c8      	strb	r0, [r1, r3]
    d722:	606a      	str	r2, [r5, #4]
    d724:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d726:	3311      	adds	r3, #17
    d728:	6323      	str	r3, [r4, #48]	; 0x30
    d72a:	e600      	b.n	d32e <d_type+0x13e>
    d72c:	00023920 	.word	0x00023920
    d730:	00023b78 	.word	0x00023b78
    d734:	00023ba0 	.word	0x00023ba0
    d738:	6942      	ldr	r2, [r0, #20]
    d73a:	6983      	ldr	r3, [r0, #24]
    d73c:	429a      	cmp	r2, r3
    d73e:	f280 80be 	bge.w	d8be <d_type+0x6ce>
    d742:	230c      	movs	r3, #12
    d744:	6901      	ldr	r1, [r0, #16]
    d746:	fb03 f302 	mul.w	r3, r3, r2
    d74a:	18cd      	adds	r5, r1, r3
    d74c:	f102 0201 	add.w	r2, r2, #1
    d750:	6142      	str	r2, [r0, #20]
    d752:	f000 80b4 	beq.w	d8be <d_type+0x6ce>
    d756:	2027      	movs	r0, #39	; 0x27
    d758:	4a92      	ldr	r2, [pc, #584]	; (d9a4 <d_type+0x7b4>)
    d75a:	e7bf      	b.n	d6dc <d_type+0x4ec>
    d75c:	6942      	ldr	r2, [r0, #20]
    d75e:	6983      	ldr	r3, [r0, #24]
    d760:	429a      	cmp	r2, r3
    d762:	f280 80ac 	bge.w	d8be <d_type+0x6ce>
    d766:	230c      	movs	r3, #12
    d768:	6901      	ldr	r1, [r0, #16]
    d76a:	fb03 f302 	mul.w	r3, r3, r2
    d76e:	18cd      	adds	r5, r1, r3
    d770:	f102 0201 	add.w	r2, r2, #1
    d774:	6142      	str	r2, [r0, #20]
    d776:	f000 80a2 	beq.w	d8be <d_type+0x6ce>
    d77a:	2027      	movs	r0, #39	; 0x27
    d77c:	4a8a      	ldr	r2, [pc, #552]	; (d9a8 <d_type+0x7b8>)
    d77e:	54c8      	strb	r0, [r1, r3]
    d780:	606a      	str	r2, [r5, #4]
    d782:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d784:	3304      	adds	r3, #4
    d786:	6323      	str	r3, [r4, #48]	; 0x30
    d788:	e5d1      	b.n	d32e <d_type+0x13e>
    d78a:	6942      	ldr	r2, [r0, #20]
    d78c:	6983      	ldr	r3, [r0, #24]
    d78e:	429a      	cmp	r2, r3
    d790:	f280 8095 	bge.w	d8be <d_type+0x6ce>
    d794:	230c      	movs	r3, #12
    d796:	6901      	ldr	r1, [r0, #16]
    d798:	fb03 f302 	mul.w	r3, r3, r2
    d79c:	18cd      	adds	r5, r1, r3
    d79e:	f102 0201 	add.w	r2, r2, #1
    d7a2:	6142      	str	r2, [r0, #20]
    d7a4:	f000 808b 	beq.w	d8be <d_type+0x6ce>
    d7a8:	4a80      	ldr	r2, [pc, #512]	; (d9ac <d_type+0x7bc>)
    d7aa:	2027      	movs	r0, #39	; 0x27
    d7ac:	54c8      	strb	r0, [r1, r3]
    d7ae:	606a      	str	r2, [r5, #4]
    d7b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d7b2:	3309      	adds	r3, #9
    d7b4:	6323      	str	r3, [r4, #48]	; 0x30
    d7b6:	e5ba      	b.n	d32e <d_type+0x13e>
    d7b8:	6942      	ldr	r2, [r0, #20]
    d7ba:	6983      	ldr	r3, [r0, #24]
    d7bc:	429a      	cmp	r2, r3
    d7be:	da7e      	bge.n	d8be <d_type+0x6ce>
    d7c0:	230c      	movs	r3, #12
    d7c2:	6901      	ldr	r1, [r0, #16]
    d7c4:	fb03 f302 	mul.w	r3, r3, r2
    d7c8:	18cd      	adds	r5, r1, r3
    d7ca:	f102 0201 	add.w	r2, r2, #1
    d7ce:	6142      	str	r2, [r0, #20]
    d7d0:	d075      	beq.n	d8be <d_type+0x6ce>
    d7d2:	2027      	movs	r0, #39	; 0x27
    d7d4:	4a76      	ldr	r2, [pc, #472]	; (d9b0 <d_type+0x7c0>)
    d7d6:	54c8      	strb	r0, [r1, r3]
    d7d8:	606a      	str	r2, [r5, #4]
    d7da:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d7dc:	330a      	adds	r3, #10
    d7de:	6323      	str	r3, [r4, #48]	; 0x30
    d7e0:	e5a5      	b.n	d32e <d_type+0x13e>
    d7e2:	6942      	ldr	r2, [r0, #20]
    d7e4:	6983      	ldr	r3, [r0, #24]
    d7e6:	429a      	cmp	r2, r3
    d7e8:	da69      	bge.n	d8be <d_type+0x6ce>
    d7ea:	230c      	movs	r3, #12
    d7ec:	6901      	ldr	r1, [r0, #16]
    d7ee:	fb03 f302 	mul.w	r3, r3, r2
    d7f2:	18cd      	adds	r5, r1, r3
    d7f4:	f102 0201 	add.w	r2, r2, #1
    d7f8:	6142      	str	r2, [r0, #20]
    d7fa:	d060      	beq.n	d8be <d_type+0x6ce>
    d7fc:	2027      	movs	r0, #39	; 0x27
    d7fe:	4a6d      	ldr	r2, [pc, #436]	; (d9b4 <d_type+0x7c4>)
    d800:	e7d4      	b.n	d7ac <d_type+0x5bc>
    d802:	6942      	ldr	r2, [r0, #20]
    d804:	6983      	ldr	r3, [r0, #24]
    d806:	429a      	cmp	r2, r3
    d808:	f6bf ad90 	bge.w	d32c <d_type+0x13c>
    d80c:	230c      	movs	r3, #12
    d80e:	6901      	ldr	r1, [r0, #16]
    d810:	fb03 f302 	mul.w	r3, r3, r2
    d814:	18cd      	adds	r5, r1, r3
    d816:	f102 0201 	add.w	r2, r2, #1
    d81a:	6142      	str	r2, [r0, #20]
    d81c:	f43f ad87 	beq.w	d32e <d_type+0x13e>
    d820:	2000      	movs	r0, #0
    d822:	54c8      	strb	r0, [r1, r3]
    d824:	4a64      	ldr	r2, [pc, #400]	; (d9b8 <d_type+0x7c8>)
    d826:	606a      	str	r2, [r5, #4]
    d828:	230e      	movs	r3, #14
    d82a:	60ab      	str	r3, [r5, #8]
    d82c:	e57f      	b.n	d32e <d_type+0x13e>
    d82e:	6942      	ldr	r2, [r0, #20]
    d830:	6983      	ldr	r3, [r0, #24]
    d832:	429a      	cmp	r2, r3
    d834:	f6bf ad7a 	bge.w	d32c <d_type+0x13c>
    d838:	230c      	movs	r3, #12
    d83a:	6901      	ldr	r1, [r0, #16]
    d83c:	fb03 f302 	mul.w	r3, r3, r2
    d840:	18cd      	adds	r5, r1, r3
    d842:	f102 0201 	add.w	r2, r2, #1
    d846:	6142      	str	r2, [r0, #20]
    d848:	f43f ad71 	beq.w	d32e <d_type+0x13e>
    d84c:	2000      	movs	r0, #0
    d84e:	54c8      	strb	r0, [r1, r3]
    d850:	4a5a      	ldr	r2, [pc, #360]	; (d9bc <d_type+0x7cc>)
    d852:	606a      	str	r2, [r5, #4]
    d854:	2304      	movs	r3, #4
    d856:	60ab      	str	r3, [r5, #8]
    d858:	e569      	b.n	d32e <d_type+0x13e>
    d85a:	6943      	ldr	r3, [r0, #20]
    d85c:	6981      	ldr	r1, [r0, #24]
    d85e:	428b      	cmp	r3, r1
    d860:	da7a      	bge.n	d958 <d_type+0x768>
    d862:	6900      	ldr	r0, [r0, #16]
    d864:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    d868:	0089      	lsls	r1, r1, #2
    d86a:	3301      	adds	r3, #1
    d86c:	1845      	adds	r5, r0, r1
    d86e:	262c      	movs	r6, #44	; 0x2c
    d870:	6163      	str	r3, [r4, #20]
    d872:	9501      	str	r5, [sp, #4]
    d874:	5446      	strb	r6, [r0, r1]
    d876:	7893      	ldrb	r3, [r2, #2]
    d878:	3b30      	subs	r3, #48	; 0x30
    d87a:	b2db      	uxtb	r3, r3
    d87c:	2b09      	cmp	r3, #9
    d87e:	bf94      	ite	ls
    d880:	2301      	movls	r3, #1
    d882:	2300      	movhi	r3, #0
    d884:	812b      	strh	r3, [r5, #8]
    d886:	d97b      	bls.n	d980 <d_type+0x790>
    d888:	4620      	mov	r0, r4
    d88a:	f7ff fcb1 	bl	d1f0 <d_type>
    d88e:	9b01      	ldr	r3, [sp, #4]
    d890:	6068      	str	r0, [r5, #4]
    d892:	685b      	ldr	r3, [r3, #4]
    d894:	2b00      	cmp	r3, #0
    d896:	f43f ad49 	beq.w	d32c <d_type+0x13c>
    d89a:	f104 000c 	add.w	r0, r4, #12
    d89e:	f7fe fb69 	bl	bf74 <d_number.isra.0>
    d8a2:	68e2      	ldr	r2, [r4, #12]
    d8a4:	7813      	ldrb	r3, [r2, #0]
    d8a6:	b113      	cbz	r3, d8ae <d_type+0x6be>
    d8a8:	1c53      	adds	r3, r2, #1
    d8aa:	60e3      	str	r3, [r4, #12]
    d8ac:	7813      	ldrb	r3, [r2, #0]
    d8ae:	9d01      	ldr	r5, [sp, #4]
    d8b0:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
    d8b4:	fab3 f383 	clz	r3, r3
    d8b8:	095b      	lsrs	r3, r3, #5
    d8ba:	816b      	strh	r3, [r5, #10]
    d8bc:	e537      	b.n	d32e <d_type+0x13e>
    d8be:	2300      	movs	r3, #0
    d8c0:	9301      	str	r3, [sp, #4]
    d8c2:	685b      	ldr	r3, [r3, #4]
    d8c4:	deff      	udf	#255	; 0xff
    d8c6:	2500      	movs	r5, #0
    d8c8:	3101      	adds	r1, #1
    d8ca:	60e1      	str	r1, [r4, #12]
    d8cc:	4620      	mov	r0, r4
    d8ce:	f7ff fc8f 	bl	d1f0 <d_type>
    d8d2:	462a      	mov	r2, r5
    d8d4:	4603      	mov	r3, r0
    d8d6:	212a      	movs	r1, #42	; 0x2a
    d8d8:	4620      	mov	r0, r4
    d8da:	f7fe f9fb 	bl	bcd4 <d_make_comp>
    d8de:	4605      	mov	r5, r0
    d8e0:	e620      	b.n	d524 <d_type+0x334>
    d8e2:	2301      	movs	r3, #1
    d8e4:	6b65      	ldr	r5, [r4, #52]	; 0x34
    d8e6:	6363      	str	r3, [r4, #52]	; 0x34
    d8e8:	4620      	mov	r0, r4
    d8ea:	f7ff f85d 	bl	c9a8 <d_expression_1>
    d8ee:	6365      	str	r5, [r4, #52]	; 0x34
    d8f0:	4605      	mov	r5, r0
    d8f2:	2800      	cmp	r0, #0
    d8f4:	f43f aec4 	beq.w	d680 <d_type+0x490>
    d8f8:	68e3      	ldr	r3, [r4, #12]
    d8fa:	e6bd      	b.n	d678 <d_type+0x488>
    d8fc:	4620      	mov	r0, r4
    d8fe:	f7ff fabb 	bl	ce78 <d_name>
    d902:	4605      	mov	r5, r0
    d904:	9001      	str	r0, [sp, #4]
    d906:	2800      	cmp	r0, #0
    d908:	f43f ad10 	beq.w	d32c <d_type+0x13c>
    d90c:	7803      	ldrb	r3, [r0, #0]
    d90e:	2b18      	cmp	r3, #24
    d910:	f47f adb6 	bne.w	d480 <d_type+0x290>
    d914:	e50b      	b.n	d32e <d_type+0x13e>
    d916:	4620      	mov	r0, r4
    d918:	f7ff faa4 	bl	ce64 <d_template_args>
    d91c:	462a      	mov	r2, r5
    d91e:	4603      	mov	r3, r0
    d920:	2104      	movs	r1, #4
    d922:	4620      	mov	r0, r4
    d924:	f7fe f9d6 	bl	bcd4 <d_make_comp>
    d928:	9001      	str	r0, [sp, #4]
    d92a:	e676      	b.n	d61a <d_type+0x42a>
    d92c:	4620      	mov	r0, r4
    d92e:	f8d4 9014 	ldr.w	r9, [r4, #20]
    d932:	f8d4 8020 	ldr.w	r8, [r4, #32]
    d936:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    d938:	6b25      	ldr	r5, [r4, #48]	; 0x30
    d93a:	f7ff fa93 	bl	ce64 <d_template_args>
    d93e:	68e2      	ldr	r2, [r4, #12]
    d940:	7812      	ldrb	r2, [r2, #0]
    d942:	2a49      	cmp	r2, #73	; 0x49
    d944:	d00b      	beq.n	d95e <d_type+0x76e>
    d946:	6325      	str	r5, [r4, #48]	; 0x30
    d948:	60e6      	str	r6, [r4, #12]
    d94a:	f8c4 9014 	str.w	r9, [r4, #20]
    d94e:	f8c4 8020 	str.w	r8, [r4, #32]
    d952:	62a7      	str	r7, [r4, #40]	; 0x28
    d954:	9d01      	ldr	r5, [sp, #4]
    d956:	e590      	b.n	d47a <d_type+0x28a>
    d958:	2300      	movs	r3, #0
    d95a:	701b      	strb	r3, [r3, #0]
    d95c:	deff      	udf	#255	; 0xff
    d95e:	9b01      	ldr	r3, [sp, #4]
    d960:	2b00      	cmp	r3, #0
    d962:	f43f ace3 	beq.w	d32c <d_type+0x13c>
    d966:	6a22      	ldr	r2, [r4, #32]
    d968:	6a61      	ldr	r1, [r4, #36]	; 0x24
    d96a:	428a      	cmp	r2, r1
    d96c:	f6bf acde 	bge.w	d32c <d_type+0x13c>
    d970:	69e5      	ldr	r5, [r4, #28]
    d972:	1c51      	adds	r1, r2, #1
    d974:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    d978:	9a01      	ldr	r2, [sp, #4]
    d97a:	6221      	str	r1, [r4, #32]
    d97c:	4603      	mov	r3, r0
    d97e:	e60a      	b.n	d596 <d_type+0x3a6>
    d980:	f104 000c 	add.w	r0, r4, #12
    d984:	f7fe faf6 	bl	bf74 <d_number.isra.0>
    d988:	9d01      	ldr	r5, [sp, #4]
    d98a:	e77d      	b.n	d888 <d_type+0x698>
    d98c:	3203      	adds	r2, #3
    d98e:	2301      	movs	r3, #1
    d990:	6b46      	ldr	r6, [r0, #52]	; 0x34
    d992:	60c2      	str	r2, [r0, #12]
    d994:	6343      	str	r3, [r0, #52]	; 0x34
    d996:	f7ff f807 	bl	c9a8 <d_expression_1>
    d99a:	6366      	str	r6, [r4, #52]	; 0x34
    d99c:	4605      	mov	r5, r0
    d99e:	e678      	b.n	d692 <d_type+0x4a2>
    d9a0:	4619      	mov	r1, r3
    d9a2:	e791      	b.n	d8c8 <d_type+0x6d8>
    d9a4:	00023b8c 	.word	0x00023b8c
    d9a8:	00023b64 	.word	0x00023b64
    d9ac:	00023b28 	.word	0x00023b28
    d9b0:	00023b50 	.word	0x00023b50
    d9b4:	00023b3c 	.word	0x00023b3c
    d9b8:	00024048 	.word	0x00024048
    d9bc:	00024040 	.word	0x00024040

0000d9c0 <d_operator_name>:
    d9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d9c2:	68c3      	ldr	r3, [r0, #12]
    d9c4:	781e      	ldrb	r6, [r3, #0]
    d9c6:	4684      	mov	ip, r0
    d9c8:	b326      	cbz	r6, da14 <d_operator_name+0x54>
    d9ca:	1c5a      	adds	r2, r3, #1
    d9cc:	60c2      	str	r2, [r0, #12]
    d9ce:	785a      	ldrb	r2, [r3, #1]
    d9d0:	781e      	ldrb	r6, [r3, #0]
    d9d2:	2a00      	cmp	r2, #0
    d9d4:	d058      	beq.n	da88 <d_operator_name+0xc8>
    d9d6:	1c9a      	adds	r2, r3, #2
    d9d8:	60c2      	str	r2, [r0, #12]
    d9da:	2e76      	cmp	r6, #118	; 0x76
    d9dc:	4604      	mov	r4, r0
    d9de:	f893 e001 	ldrb.w	lr, [r3, #1]
    d9e2:	d043      	beq.n	da6c <d_operator_name+0xac>
    d9e4:	2e63      	cmp	r6, #99	; 0x63
    d9e6:	d116      	bne.n	da16 <d_operator_name+0x56>
    d9e8:	f1be 0f76 	cmp.w	lr, #118	; 0x76
    d9ec:	d113      	bne.n	da16 <d_operator_name+0x56>
    d9ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
    d9f0:	6b85      	ldr	r5, [r0, #56]	; 0x38
    d9f2:	fab3 f383 	clz	r3, r3
    d9f6:	095b      	lsrs	r3, r3, #5
    d9f8:	6383      	str	r3, [r0, #56]	; 0x38
    d9fa:	f7ff fbf9 	bl	d1f0 <d_type>
    d9fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    da00:	4602      	mov	r2, r0
    da02:	2b00      	cmp	r3, #0
    da04:	d052      	beq.n	daac <d_operator_name+0xec>
    da06:	2300      	movs	r3, #0
    da08:	2134      	movs	r1, #52	; 0x34
    da0a:	4620      	mov	r0, r4
    da0c:	f7fe f962 	bl	bcd4 <d_make_comp>
    da10:	63a5      	str	r5, [r4, #56]	; 0x38
    da12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    da14:	46b6      	mov	lr, r6
    da16:	4c28      	ldr	r4, [pc, #160]	; (dab8 <d_operator_name+0xf8>)
    da18:	2043      	movs	r0, #67	; 0x43
    da1a:	2200      	movs	r2, #0
    da1c:	e004      	b.n	da28 <d_operator_name+0x68>
    da1e:	bf94      	ite	ls
    da20:	1c5a      	addls	r2, r3, #1
    da22:	4618      	movhi	r0, r3
    da24:	4282      	cmp	r2, r0
    da26:	d02d      	beq.n	da84 <d_operator_name+0xc4>
    da28:	1a83      	subs	r3, r0, r2
    da2a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    da2e:	eb02 0363 	add.w	r3, r2, r3, asr #1
    da32:	0119      	lsls	r1, r3, #4
    da34:	1867      	adds	r7, r4, r1
    da36:	5861      	ldr	r1, [r4, r1]
    da38:	780d      	ldrb	r5, [r1, #0]
    da3a:	42b5      	cmp	r5, r6
    da3c:	d1ef      	bne.n	da1e <d_operator_name+0x5e>
    da3e:	7849      	ldrb	r1, [r1, #1]
    da40:	4571      	cmp	r1, lr
    da42:	d1ec      	bne.n	da1e <d_operator_name+0x5e>
    da44:	f8dc 3014 	ldr.w	r3, [ip, #20]
    da48:	f8dc 2018 	ldr.w	r2, [ip, #24]
    da4c:	4293      	cmp	r3, r2
    da4e:	da19      	bge.n	da84 <d_operator_name+0xc4>
    da50:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    da54:	f8dc 1010 	ldr.w	r1, [ip, #16]
    da58:	0092      	lsls	r2, r2, #2
    da5a:	3301      	adds	r3, #1
    da5c:	1888      	adds	r0, r1, r2
    da5e:	f8cc 3014 	str.w	r3, [ip, #20]
    da62:	d013      	beq.n	da8c <d_operator_name+0xcc>
    da64:	2331      	movs	r3, #49	; 0x31
    da66:	548b      	strb	r3, [r1, r2]
    da68:	6047      	str	r7, [r0, #4]
    da6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    da6c:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
    da70:	b2eb      	uxtb	r3, r5
    da72:	2b09      	cmp	r3, #9
    da74:	d8cf      	bhi.n	da16 <d_operator_name+0x56>
    da76:	f7fe fafd 	bl	c074 <d_source_name>
    da7a:	6963      	ldr	r3, [r4, #20]
    da7c:	69a2      	ldr	r2, [r4, #24]
    da7e:	4293      	cmp	r3, r2
    da80:	4601      	mov	r1, r0
    da82:	db04      	blt.n	da8e <d_operator_name+0xce>
    da84:	2000      	movs	r0, #0
    da86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    da88:	4696      	mov	lr, r2
    da8a:	e7c4      	b.n	da16 <d_operator_name+0x56>
    da8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    da8e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    da92:	6926      	ldr	r6, [r4, #16]
    da94:	0092      	lsls	r2, r2, #2
    da96:	3301      	adds	r3, #1
    da98:	18b0      	adds	r0, r6, r2
    da9a:	6163      	str	r3, [r4, #20]
    da9c:	d0f2      	beq.n	da84 <d_operator_name+0xc4>
    da9e:	2900      	cmp	r1, #0
    daa0:	d0f0      	beq.n	da84 <d_operator_name+0xc4>
    daa2:	2332      	movs	r3, #50	; 0x32
    daa4:	54b3      	strb	r3, [r6, r2]
    daa6:	6045      	str	r5, [r0, #4]
    daa8:	6081      	str	r1, [r0, #8]
    daaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    daac:	2133      	movs	r1, #51	; 0x33
    daae:	4620      	mov	r0, r4
    dab0:	f7fe f910 	bl	bcd4 <d_make_comp>
    dab4:	e7ac      	b.n	da10 <d_operator_name+0x50>
    dab6:	bf00      	nop
    dab8:	00023bb4 	.word	0x00023bb4

0000dabc <d_parmlist>:
    dabc:	b530      	push	{r4, r5, lr}
    dabe:	68c2      	ldr	r2, [r0, #12]
    dac0:	b083      	sub	sp, #12
    dac2:	2300      	movs	r3, #0
    dac4:	9301      	str	r3, [sp, #4]
    dac6:	7813      	ldrb	r3, [r2, #0]
    dac8:	b343      	cbz	r3, db1c <d_parmlist+0x60>
    daca:	2b45      	cmp	r3, #69	; 0x45
    dacc:	d026      	beq.n	db1c <d_parmlist+0x60>
    dace:	2b2e      	cmp	r3, #46	; 0x2e
    dad0:	d024      	beq.n	db1c <d_parmlist+0x60>
    dad2:	4604      	mov	r4, r0
    dad4:	ad01      	add	r5, sp, #4
    dad6:	e015      	b.n	db04 <d_parmlist+0x48>
    dad8:	2b4f      	cmp	r3, #79	; 0x4f
    dada:	d016      	beq.n	db0a <d_parmlist+0x4e>
    dadc:	f7ff fb88 	bl	d1f0 <d_type>
    dae0:	2300      	movs	r3, #0
    dae2:	4602      	mov	r2, r0
    dae4:	212e      	movs	r1, #46	; 0x2e
    dae6:	b1c8      	cbz	r0, db1c <d_parmlist+0x60>
    dae8:	4620      	mov	r0, r4
    daea:	f7fe f8f3 	bl	bcd4 <d_make_comp>
    daee:	6028      	str	r0, [r5, #0]
    daf0:	b1a0      	cbz	r0, db1c <d_parmlist+0x60>
    daf2:	68e2      	ldr	r2, [r4, #12]
    daf4:	7813      	ldrb	r3, [r2, #0]
    daf6:	f100 0508 	add.w	r5, r0, #8
    dafa:	b14b      	cbz	r3, db10 <d_parmlist+0x54>
    dafc:	2b45      	cmp	r3, #69	; 0x45
    dafe:	d007      	beq.n	db10 <d_parmlist+0x54>
    db00:	2b2e      	cmp	r3, #46	; 0x2e
    db02:	d005      	beq.n	db10 <d_parmlist+0x54>
    db04:	2b52      	cmp	r3, #82	; 0x52
    db06:	4620      	mov	r0, r4
    db08:	d1e6      	bne.n	dad8 <d_parmlist+0x1c>
    db0a:	7853      	ldrb	r3, [r2, #1]
    db0c:	2b45      	cmp	r3, #69	; 0x45
    db0e:	d1e5      	bne.n	dadc <d_parmlist+0x20>
    db10:	9801      	ldr	r0, [sp, #4]
    db12:	b118      	cbz	r0, db1c <d_parmlist+0x60>
    db14:	6883      	ldr	r3, [r0, #8]
    db16:	b123      	cbz	r3, db22 <d_parmlist+0x66>
    db18:	b003      	add	sp, #12
    db1a:	bd30      	pop	{r4, r5, pc}
    db1c:	2000      	movs	r0, #0
    db1e:	b003      	add	sp, #12
    db20:	bd30      	pop	{r4, r5, pc}
    db22:	6842      	ldr	r2, [r0, #4]
    db24:	7811      	ldrb	r1, [r2, #0]
    db26:	2927      	cmp	r1, #39	; 0x27
    db28:	d1f6      	bne.n	db18 <d_parmlist+0x5c>
    db2a:	6852      	ldr	r2, [r2, #4]
    db2c:	7c11      	ldrb	r1, [r2, #16]
    db2e:	2909      	cmp	r1, #9
    db30:	d1f2      	bne.n	db18 <d_parmlist+0x5c>
    db32:	6851      	ldr	r1, [r2, #4]
    db34:	6b22      	ldr	r2, [r4, #48]	; 0x30
    db36:	1a52      	subs	r2, r2, r1
    db38:	6322      	str	r2, [r4, #48]	; 0x30
    db3a:	6043      	str	r3, [r0, #4]
    db3c:	e7ec      	b.n	db18 <d_parmlist+0x5c>
    db3e:	bf00      	nop

0000db40 <d_unqualified_name>:
    db40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db42:	68c1      	ldr	r1, [r0, #12]
    db44:	780b      	ldrb	r3, [r1, #0]
    db46:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    db4a:	2a09      	cmp	r2, #9
    db4c:	4604      	mov	r4, r0
    db4e:	d920      	bls.n	db92 <d_unqualified_name+0x52>
    db50:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    db54:	2a19      	cmp	r2, #25
    db56:	d925      	bls.n	dba4 <d_unqualified_name+0x64>
    db58:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
    db5c:	2a01      	cmp	r2, #1
    db5e:	d92c      	bls.n	dbba <d_unqualified_name+0x7a>
    db60:	2b4c      	cmp	r3, #76	; 0x4c
    db62:	f000 8088 	beq.w	dc76 <d_unqualified_name+0x136>
    db66:	2b55      	cmp	r3, #85	; 0x55
    db68:	d133      	bne.n	dbd2 <d_unqualified_name+0x92>
    db6a:	784b      	ldrb	r3, [r1, #1]
    db6c:	2b6c      	cmp	r3, #108	; 0x6c
    db6e:	d033      	beq.n	dbd8 <d_unqualified_name+0x98>
    db70:	2b74      	cmp	r3, #116	; 0x74
    db72:	d12e      	bne.n	dbd2 <d_unqualified_name+0x92>
    db74:	1c4b      	adds	r3, r1, #1
    db76:	60c3      	str	r3, [r0, #12]
    db78:	784b      	ldrb	r3, [r1, #1]
    db7a:	2b74      	cmp	r3, #116	; 0x74
    db7c:	d05a      	beq.n	dc34 <d_unqualified_name+0xf4>
    db7e:	2b42      	cmp	r3, #66	; 0x42
    db80:	f04f 0500 	mov.w	r5, #0
    db84:	d10c      	bne.n	dba0 <d_unqualified_name+0x60>
    db86:	4629      	mov	r1, r5
    db88:	4620      	mov	r0, r4
    db8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    db8e:	f7fe bacd 	b.w	c12c <d_abi_tags>
    db92:	f7fe fa6f 	bl	c074 <d_source_name>
    db96:	68e3      	ldr	r3, [r4, #12]
    db98:	781b      	ldrb	r3, [r3, #0]
    db9a:	4605      	mov	r5, r0
    db9c:	2b42      	cmp	r3, #66	; 0x42
    db9e:	d0f2      	beq.n	db86 <d_unqualified_name+0x46>
    dba0:	4628      	mov	r0, r5
    dba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dba4:	f7ff ff0c 	bl	d9c0 <d_operator_name>
    dba8:	4605      	mov	r5, r0
    dbaa:	b118      	cbz	r0, dbb4 <d_unqualified_name+0x74>
    dbac:	7803      	ldrb	r3, [r0, #0]
    dbae:	2b31      	cmp	r3, #49	; 0x31
    dbb0:	f000 80b2 	beq.w	dd18 <d_unqualified_name+0x1d8>
    dbb4:	68e3      	ldr	r3, [r4, #12]
    dbb6:	781b      	ldrb	r3, [r3, #0]
    dbb8:	e7f0      	b.n	db9c <d_unqualified_name+0x5c>
    dbba:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
    dbbc:	b125      	cbz	r5, dbc8 <d_unqualified_name+0x88>
    dbbe:	782a      	ldrb	r2, [r5, #0]
    dbc0:	2a00      	cmp	r2, #0
    dbc2:	d06c      	beq.n	dc9e <d_unqualified_name+0x15e>
    dbc4:	2a18      	cmp	r2, #24
    dbc6:	d06a      	beq.n	dc9e <d_unqualified_name+0x15e>
    dbc8:	2b43      	cmp	r3, #67	; 0x43
    dbca:	f000 80bf 	beq.w	dd4c <d_unqualified_name+0x20c>
    dbce:	2b44      	cmp	r3, #68	; 0x44
    dbd0:	d06f      	beq.n	dcb2 <d_unqualified_name+0x172>
    dbd2:	2500      	movs	r5, #0
    dbd4:	4628      	mov	r0, r5
    dbd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dbd8:	1c4b      	adds	r3, r1, #1
    dbda:	60c3      	str	r3, [r0, #12]
    dbdc:	784b      	ldrb	r3, [r1, #1]
    dbde:	2b6c      	cmp	r3, #108	; 0x6c
    dbe0:	d1cd      	bne.n	db7e <d_unqualified_name+0x3e>
    dbe2:	3102      	adds	r1, #2
    dbe4:	60c1      	str	r1, [r0, #12]
    dbe6:	f7ff ff69 	bl	dabc <d_parmlist>
    dbea:	4606      	mov	r6, r0
    dbec:	b1f0      	cbz	r0, dc2c <d_unqualified_name+0xec>
    dbee:	68e2      	ldr	r2, [r4, #12]
    dbf0:	7813      	ldrb	r3, [r2, #0]
    dbf2:	2b45      	cmp	r3, #69	; 0x45
    dbf4:	d1c3      	bne.n	db7e <d_unqualified_name+0x3e>
    dbf6:	3201      	adds	r2, #1
    dbf8:	60e2      	str	r2, [r4, #12]
    dbfa:	4620      	mov	r0, r4
    dbfc:	f7fe f9fc 	bl	bff8 <d_compact_number>
    dc00:	2800      	cmp	r0, #0
    dc02:	db13      	blt.n	dc2c <d_unqualified_name+0xec>
    dc04:	6963      	ldr	r3, [r4, #20]
    dc06:	69a2      	ldr	r2, [r4, #24]
    dc08:	4293      	cmp	r3, r2
    dc0a:	da0f      	bge.n	dc2c <d_unqualified_name+0xec>
    dc0c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    dc10:	6921      	ldr	r1, [r4, #16]
    dc12:	0092      	lsls	r2, r2, #2
    dc14:	3301      	adds	r3, #1
    dc16:	188d      	adds	r5, r1, r2
    dc18:	6163      	str	r3, [r4, #20]
    dc1a:	d0cb      	beq.n	dbb4 <d_unqualified_name+0x74>
    dc1c:	2345      	movs	r3, #69	; 0x45
    dc1e:	548b      	strb	r3, [r1, r2]
    dc20:	606e      	str	r6, [r5, #4]
    dc22:	60a8      	str	r0, [r5, #8]
    dc24:	6a23      	ldr	r3, [r4, #32]
    dc26:	6a62      	ldr	r2, [r4, #36]	; 0x24
    dc28:	4293      	cmp	r3, r2
    dc2a:	db1c      	blt.n	dc66 <d_unqualified_name+0x126>
    dc2c:	68e3      	ldr	r3, [r4, #12]
    dc2e:	2500      	movs	r5, #0
    dc30:	781b      	ldrb	r3, [r3, #0]
    dc32:	e7b3      	b.n	db9c <d_unqualified_name+0x5c>
    dc34:	3102      	adds	r1, #2
    dc36:	60c1      	str	r1, [r0, #12]
    dc38:	f7fe f9de 	bl	bff8 <d_compact_number>
    dc3c:	2800      	cmp	r0, #0
    dc3e:	dbf5      	blt.n	dc2c <d_unqualified_name+0xec>
    dc40:	6963      	ldr	r3, [r4, #20]
    dc42:	69a2      	ldr	r2, [r4, #24]
    dc44:	4293      	cmp	r3, r2
    dc46:	daf1      	bge.n	dc2c <d_unqualified_name+0xec>
    dc48:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    dc4c:	6921      	ldr	r1, [r4, #16]
    dc4e:	0092      	lsls	r2, r2, #2
    dc50:	3301      	adds	r3, #1
    dc52:	188d      	adds	r5, r1, r2
    dc54:	6163      	str	r3, [r4, #20]
    dc56:	d0ad      	beq.n	dbb4 <d_unqualified_name+0x74>
    dc58:	2347      	movs	r3, #71	; 0x47
    dc5a:	548b      	strb	r3, [r1, r2]
    dc5c:	6068      	str	r0, [r5, #4]
    dc5e:	6a23      	ldr	r3, [r4, #32]
    dc60:	6a62      	ldr	r2, [r4, #36]	; 0x24
    dc62:	4293      	cmp	r3, r2
    dc64:	dae2      	bge.n	dc2c <d_unqualified_name+0xec>
    dc66:	69e1      	ldr	r1, [r4, #28]
    dc68:	68e2      	ldr	r2, [r4, #12]
    dc6a:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
    dc6e:	3301      	adds	r3, #1
    dc70:	6223      	str	r3, [r4, #32]
    dc72:	7813      	ldrb	r3, [r2, #0]
    dc74:	e792      	b.n	db9c <d_unqualified_name+0x5c>
    dc76:	3101      	adds	r1, #1
    dc78:	60c1      	str	r1, [r0, #12]
    dc7a:	f7fe f9fb 	bl	c074 <d_source_name>
    dc7e:	4605      	mov	r5, r0
    dc80:	2800      	cmp	r0, #0
    dc82:	d0a6      	beq.n	dbd2 <d_unqualified_name+0x92>
    dc84:	68e2      	ldr	r2, [r4, #12]
    dc86:	7813      	ldrb	r3, [r2, #0]
    dc88:	2b5f      	cmp	r3, #95	; 0x5f
    dc8a:	d187      	bne.n	db9c <d_unqualified_name+0x5c>
    dc8c:	4620      	mov	r0, r4
    dc8e:	3201      	adds	r2, #1
    dc90:	f840 2f0c 	str.w	r2, [r0, #12]!
    dc94:	f7fe f96e 	bl	bf74 <d_number.isra.0>
    dc98:	2800      	cmp	r0, #0
    dc9a:	da8b      	bge.n	dbb4 <d_unqualified_name+0x74>
    dc9c:	e799      	b.n	dbd2 <d_unqualified_name+0x92>
    dc9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    dca0:	68aa      	ldr	r2, [r5, #8]
    dca2:	4413      	add	r3, r2
    dca4:	6323      	str	r3, [r4, #48]	; 0x30
    dca6:	780b      	ldrb	r3, [r1, #0]
    dca8:	2b43      	cmp	r3, #67	; 0x43
    dcaa:	d04f      	beq.n	dd4c <d_unqualified_name+0x20c>
    dcac:	2b44      	cmp	r3, #68	; 0x44
    dcae:	f47f af66 	bne.w	db7e <d_unqualified_name+0x3e>
    dcb2:	784b      	ldrb	r3, [r1, #1]
    dcb4:	3b30      	subs	r3, #48	; 0x30
    dcb6:	2b05      	cmp	r3, #5
    dcb8:	d88b      	bhi.n	dbd2 <d_unqualified_name+0x92>
    dcba:	a201      	add	r2, pc, #4	; (adr r2, dcc0 <d_unqualified_name+0x180>)
    dcbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    dcc0:	0000dd15 	.word	0x0000dd15
    dcc4:	0000dcd9 	.word	0x0000dcd9
    dcc8:	0000dd11 	.word	0x0000dd11
    dccc:	0000dbd3 	.word	0x0000dbd3
    dcd0:	0000dd0d 	.word	0x0000dd0d
    dcd4:	0000dd09 	.word	0x0000dd09
    dcd8:	2702      	movs	r7, #2
    dcda:	6963      	ldr	r3, [r4, #20]
    dcdc:	69a2      	ldr	r2, [r4, #24]
    dcde:	1c88      	adds	r0, r1, #2
    dce0:	4293      	cmp	r3, r2
    dce2:	60e0      	str	r0, [r4, #12]
    dce4:	da56      	bge.n	dd94 <d_unqualified_name+0x254>
    dce6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    dcea:	6920      	ldr	r0, [r4, #16]
    dcec:	0092      	lsls	r2, r2, #2
    dcee:	3301      	adds	r3, #1
    dcf0:	1886      	adds	r6, r0, r2
    dcf2:	6163      	str	r3, [r4, #20]
    dcf4:	d005      	beq.n	dd02 <d_unqualified_name+0x1c2>
    dcf6:	2d00      	cmp	r5, #0
    dcf8:	d04f      	beq.n	dd9a <d_unqualified_name+0x25a>
    dcfa:	2308      	movs	r3, #8
    dcfc:	5483      	strb	r3, [r0, r2]
    dcfe:	7137      	strb	r7, [r6, #4]
    dd00:	60b5      	str	r5, [r6, #8]
    dd02:	788b      	ldrb	r3, [r1, #2]
    dd04:	4635      	mov	r5, r6
    dd06:	e749      	b.n	db9c <d_unqualified_name+0x5c>
    dd08:	2705      	movs	r7, #5
    dd0a:	e7e6      	b.n	dcda <d_unqualified_name+0x19a>
    dd0c:	2704      	movs	r7, #4
    dd0e:	e7e4      	b.n	dcda <d_unqualified_name+0x19a>
    dd10:	2703      	movs	r7, #3
    dd12:	e7e2      	b.n	dcda <d_unqualified_name+0x19a>
    dd14:	2701      	movs	r7, #1
    dd16:	e7e0      	b.n	dcda <d_unqualified_name+0x19a>
    dd18:	6842      	ldr	r2, [r0, #4]
    dd1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    dd1c:	6896      	ldr	r6, [r2, #8]
    dd1e:	6810      	ldr	r0, [r2, #0]
    dd20:	491f      	ldr	r1, [pc, #124]	; (dda0 <d_unqualified_name+0x260>)
    dd22:	3307      	adds	r3, #7
    dd24:	4433      	add	r3, r6
    dd26:	6323      	str	r3, [r4, #48]	; 0x30
    dd28:	f008 f9ee 	bl	16108 <strcmp>
    dd2c:	2800      	cmp	r0, #0
    dd2e:	f47f af41 	bne.w	dbb4 <d_unqualified_name+0x74>
    dd32:	4620      	mov	r0, r4
    dd34:	f7fe f99e 	bl	c074 <d_source_name>
    dd38:	462a      	mov	r2, r5
    dd3a:	4603      	mov	r3, r0
    dd3c:	2136      	movs	r1, #54	; 0x36
    dd3e:	4620      	mov	r0, r4
    dd40:	f7fd ffc8 	bl	bcd4 <d_make_comp>
    dd44:	68e3      	ldr	r3, [r4, #12]
    dd46:	4605      	mov	r5, r0
    dd48:	781b      	ldrb	r3, [r3, #0]
    dd4a:	e727      	b.n	db9c <d_unqualified_name+0x5c>
    dd4c:	784b      	ldrb	r3, [r1, #1]
    dd4e:	3b31      	subs	r3, #49	; 0x31
    dd50:	2b04      	cmp	r3, #4
    dd52:	f63f af3e 	bhi.w	dbd2 <d_unqualified_name+0x92>
    dd56:	e8df f003 	tbb	[pc, r3]
    dd5a:	0315      	.short	0x0315
    dd5c:	191b      	.short	0x191b
    dd5e:	17          	.byte	0x17
    dd5f:	00          	.byte	0x00
    dd60:	2702      	movs	r7, #2
    dd62:	6963      	ldr	r3, [r4, #20]
    dd64:	69a2      	ldr	r2, [r4, #24]
    dd66:	1c88      	adds	r0, r1, #2
    dd68:	4293      	cmp	r3, r2
    dd6a:	60e0      	str	r0, [r4, #12]
    dd6c:	da12      	bge.n	dd94 <d_unqualified_name+0x254>
    dd6e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    dd72:	6920      	ldr	r0, [r4, #16]
    dd74:	0092      	lsls	r2, r2, #2
    dd76:	3301      	adds	r3, #1
    dd78:	1886      	adds	r6, r0, r2
    dd7a:	6163      	str	r3, [r4, #20]
    dd7c:	d0c1      	beq.n	dd02 <d_unqualified_name+0x1c2>
    dd7e:	b165      	cbz	r5, dd9a <d_unqualified_name+0x25a>
    dd80:	2307      	movs	r3, #7
    dd82:	e7bb      	b.n	dcfc <d_unqualified_name+0x1bc>
    dd84:	2701      	movs	r7, #1
    dd86:	e7ec      	b.n	dd62 <d_unqualified_name+0x222>
    dd88:	2705      	movs	r7, #5
    dd8a:	e7ea      	b.n	dd62 <d_unqualified_name+0x222>
    dd8c:	2704      	movs	r7, #4
    dd8e:	e7e8      	b.n	dd62 <d_unqualified_name+0x222>
    dd90:	2703      	movs	r7, #3
    dd92:	e7e6      	b.n	dd62 <d_unqualified_name+0x222>
    dd94:	788b      	ldrb	r3, [r1, #2]
    dd96:	2500      	movs	r5, #0
    dd98:	e700      	b.n	db9c <d_unqualified_name+0x5c>
    dd9a:	788b      	ldrb	r3, [r1, #2]
    dd9c:	e6fe      	b.n	db9c <d_unqualified_name+0x5c>
    dd9e:	bf00      	nop
    dda0:	00024058 	.word	0x00024058

0000dda4 <d_bare_function_type>:
    dda4:	b570      	push	{r4, r5, r6, lr}
    dda6:	68c3      	ldr	r3, [r0, #12]
    dda8:	781a      	ldrb	r2, [r3, #0]
    ddaa:	2a4a      	cmp	r2, #74	; 0x4a
    ddac:	4604      	mov	r4, r0
    ddae:	d00d      	beq.n	ddcc <d_bare_function_type+0x28>
    ddb0:	b971      	cbnz	r1, ddd0 <d_bare_function_type+0x2c>
    ddb2:	460d      	mov	r5, r1
    ddb4:	4620      	mov	r0, r4
    ddb6:	f7ff fe81 	bl	dabc <d_parmlist>
    ddba:	b178      	cbz	r0, dddc <d_bare_function_type+0x38>
    ddbc:	4603      	mov	r3, r0
    ddbe:	462a      	mov	r2, r5
    ddc0:	4620      	mov	r0, r4
    ddc2:	2129      	movs	r1, #41	; 0x29
    ddc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ddc8:	f7fd bf84 	b.w	bcd4 <d_make_comp>
    ddcc:	3301      	adds	r3, #1
    ddce:	60c3      	str	r3, [r0, #12]
    ddd0:	4620      	mov	r0, r4
    ddd2:	f7ff fa0d 	bl	d1f0 <d_type>
    ddd6:	4605      	mov	r5, r0
    ddd8:	2800      	cmp	r0, #0
    ddda:	d1eb      	bne.n	ddb4 <d_bare_function_type+0x10>
    dddc:	2000      	movs	r0, #0
    ddde:	bd70      	pop	{r4, r5, r6, pc}

0000dde0 <d_function_type>:
    dde0:	68c3      	ldr	r3, [r0, #12]
    dde2:	781a      	ldrb	r2, [r3, #0]
    dde4:	2a46      	cmp	r2, #70	; 0x46
    dde6:	d001      	beq.n	ddec <d_function_type+0xc>
    dde8:	2000      	movs	r0, #0
    ddea:	4770      	bx	lr
    ddec:	b510      	push	{r4, lr}
    ddee:	1c5a      	adds	r2, r3, #1
    ddf0:	60c2      	str	r2, [r0, #12]
    ddf2:	785a      	ldrb	r2, [r3, #1]
    ddf4:	2a59      	cmp	r2, #89	; 0x59
    ddf6:	bf04      	itt	eq
    ddf8:	3302      	addeq	r3, #2
    ddfa:	60c3      	streq	r3, [r0, #12]
    ddfc:	2101      	movs	r1, #1
    ddfe:	4604      	mov	r4, r0
    de00:	f7ff ffd0 	bl	dda4 <d_bare_function_type>
    de04:	4601      	mov	r1, r0
    de06:	4620      	mov	r0, r4
    de08:	f7fe f816 	bl	be38 <d_ref_qualifier>
    de0c:	68e3      	ldr	r3, [r4, #12]
    de0e:	781a      	ldrb	r2, [r3, #0]
    de10:	2a45      	cmp	r2, #69	; 0x45
    de12:	d001      	beq.n	de18 <d_function_type+0x38>
    de14:	2000      	movs	r0, #0
    de16:	bd10      	pop	{r4, pc}
    de18:	3301      	adds	r3, #1
    de1a:	60e3      	str	r3, [r4, #12]
    de1c:	bd10      	pop	{r4, pc}
    de1e:	bf00      	nop

0000de20 <d_encoding>:
    de20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    de24:	68c3      	ldr	r3, [r0, #12]
    de26:	781a      	ldrb	r2, [r3, #0]
    de28:	2a47      	cmp	r2, #71	; 0x47
    de2a:	4605      	mov	r5, r0
    de2c:	d01f      	beq.n	de6e <d_encoding+0x4e>
    de2e:	2a54      	cmp	r2, #84	; 0x54
    de30:	d01d      	beq.n	de6e <d_encoding+0x4e>
    de32:	460e      	mov	r6, r1
    de34:	f7ff f820 	bl	ce78 <d_name>
    de38:	4604      	mov	r4, r0
    de3a:	b310      	cbz	r0, de82 <d_encoding+0x62>
    de3c:	b32e      	cbz	r6, de8a <d_encoding+0x6a>
    de3e:	68ab      	ldr	r3, [r5, #8]
    de40:	07db      	lsls	r3, r3, #31
    de42:	d422      	bmi.n	de8a <d_encoding+0x6a>
    de44:	7823      	ldrb	r3, [r4, #0]
    de46:	f1a3 021c 	sub.w	r2, r3, #28
    de4a:	2a04      	cmp	r2, #4
    de4c:	d940      	bls.n	ded0 <d_encoding+0xb0>
    de4e:	2b4c      	cmp	r3, #76	; 0x4c
    de50:	d03e      	beq.n	ded0 <d_encoding+0xb0>
    de52:	2b02      	cmp	r3, #2
    de54:	d116      	bne.n	de84 <d_encoding+0x64>
    de56:	68a3      	ldr	r3, [r4, #8]
    de58:	781a      	ldrb	r2, [r3, #0]
    de5a:	f1a2 011c 	sub.w	r1, r2, #28
    de5e:	2904      	cmp	r1, #4
    de60:	f240 8283 	bls.w	e36a <d_encoding+0x54a>
    de64:	2a4c      	cmp	r2, #76	; 0x4c
    de66:	f000 8280 	beq.w	e36a <d_encoding+0x54a>
    de6a:	60a3      	str	r3, [r4, #8]
    de6c:	e00a      	b.n	de84 <d_encoding+0x64>
    de6e:	6b29      	ldr	r1, [r5, #48]	; 0x30
    de70:	f101 0214 	add.w	r2, r1, #20
    de74:	632a      	str	r2, [r5, #48]	; 0x30
    de76:	781a      	ldrb	r2, [r3, #0]
    de78:	2a54      	cmp	r2, #84	; 0x54
    de7a:	d02b      	beq.n	ded4 <d_encoding+0xb4>
    de7c:	2a47      	cmp	r2, #71	; 0x47
    de7e:	f000 809f 	beq.w	dfc0 <d_encoding+0x1a0>
    de82:	2400      	movs	r4, #0
    de84:	4620      	mov	r0, r4
    de86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    de8a:	68eb      	ldr	r3, [r5, #12]
    de8c:	781b      	ldrb	r3, [r3, #0]
    de8e:	2b00      	cmp	r3, #0
    de90:	d0f8      	beq.n	de84 <d_encoding+0x64>
    de92:	2b45      	cmp	r3, #69	; 0x45
    de94:	d0f6      	beq.n	de84 <d_encoding+0x64>
    de96:	4621      	mov	r1, r4
    de98:	780a      	ldrb	r2, [r1, #0]
    de9a:	2a20      	cmp	r2, #32
    de9c:	f200 8113 	bhi.w	e0c6 <d_encoding+0x2a6>
    dea0:	2a1c      	cmp	r2, #28
    dea2:	f080 8112 	bcs.w	e0ca <d_encoding+0x2aa>
    dea6:	2a04      	cmp	r2, #4
    dea8:	f040 8101 	bne.w	e0ae <d_encoding+0x28e>
    deac:	684a      	ldr	r2, [r1, #4]
    deae:	b16a      	cbz	r2, decc <d_encoding+0xac>
    deb0:	7813      	ldrb	r3, [r2, #0]
    deb2:	2b08      	cmp	r3, #8
    deb4:	f103 31ff 	add.w	r1, r3, #4294967295
    deb8:	f200 80f6 	bhi.w	e0a8 <d_encoding+0x288>
    debc:	2b07      	cmp	r3, #7
    debe:	f080 80f6 	bcs.w	e0ae <d_encoding+0x28e>
    dec2:	2901      	cmp	r1, #1
    dec4:	d802      	bhi.n	decc <d_encoding+0xac>
    dec6:	6892      	ldr	r2, [r2, #8]
    dec8:	2a00      	cmp	r2, #0
    deca:	d1f1      	bne.n	deb0 <d_encoding+0x90>
    decc:	2101      	movs	r1, #1
    dece:	e0ef      	b.n	e0b0 <d_encoding+0x290>
    ded0:	6864      	ldr	r4, [r4, #4]
    ded2:	e7b7      	b.n	de44 <d_encoding+0x24>
    ded4:	1c5a      	adds	r2, r3, #1
    ded6:	60ea      	str	r2, [r5, #12]
    ded8:	785a      	ldrb	r2, [r3, #1]
    deda:	2a00      	cmp	r2, #0
    dedc:	d0d1      	beq.n	de82 <d_encoding+0x62>
    dede:	1c9a      	adds	r2, r3, #2
    dee0:	60ea      	str	r2, [r5, #12]
    dee2:	785b      	ldrb	r3, [r3, #1]
    dee4:	3b43      	subs	r3, #67	; 0x43
    dee6:	2b33      	cmp	r3, #51	; 0x33
    dee8:	d8cb      	bhi.n	de82 <d_encoding+0x62>
    deea:	a201      	add	r2, pc, #4	; (adr r2, def0 <d_encoding+0xd0>)
    deec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    def0:	0000e32b 	.word	0x0000e32b
    def4:	0000de83 	.word	0x0000de83
    def8:	0000de83 	.word	0x0000de83
    defc:	0000e315 	.word	0x0000e315
    df00:	0000de83 	.word	0x0000de83
    df04:	0000e2ff 	.word	0x0000e2ff
    df08:	0000e2e9 	.word	0x0000e2e9
    df0c:	0000e2d3 	.word	0x0000e2d3
    df10:	0000de83 	.word	0x0000de83
    df14:	0000de83 	.word	0x0000de83
    df18:	0000de83 	.word	0x0000de83
    df1c:	0000de83 	.word	0x0000de83
    df20:	0000de83 	.word	0x0000de83
    df24:	0000de83 	.word	0x0000de83
    df28:	0000de83 	.word	0x0000de83
    df2c:	0000de83 	.word	0x0000de83
    df30:	0000e2bd 	.word	0x0000e2bd
    df34:	0000e2a3 	.word	0x0000e2a3
    df38:	0000de83 	.word	0x0000de83
    df3c:	0000e289 	.word	0x0000e289
    df40:	0000e273 	.word	0x0000e273
    df44:	0000de83 	.word	0x0000de83
    df48:	0000de83 	.word	0x0000de83
    df4c:	0000de83 	.word	0x0000de83
    df50:	0000de83 	.word	0x0000de83
    df54:	0000de83 	.word	0x0000de83
    df58:	0000de83 	.word	0x0000de83
    df5c:	0000de83 	.word	0x0000de83
    df60:	0000de83 	.word	0x0000de83
    df64:	0000de83 	.word	0x0000de83
    df68:	0000de83 	.word	0x0000de83
    df6c:	0000de83 	.word	0x0000de83
    df70:	0000e23f 	.word	0x0000e23f
    df74:	0000de83 	.word	0x0000de83
    df78:	0000de83 	.word	0x0000de83
    df7c:	0000de83 	.word	0x0000de83
    df80:	0000de83 	.word	0x0000de83
    df84:	0000e219 	.word	0x0000e219
    df88:	0000de83 	.word	0x0000de83
    df8c:	0000de83 	.word	0x0000de83
    df90:	0000de83 	.word	0x0000de83
    df94:	0000de83 	.word	0x0000de83
    df98:	0000de83 	.word	0x0000de83
    df9c:	0000de83 	.word	0x0000de83
    dfa0:	0000de83 	.word	0x0000de83
    dfa4:	0000de83 	.word	0x0000de83
    dfa8:	0000de83 	.word	0x0000de83
    dfac:	0000de83 	.word	0x0000de83
    dfb0:	0000de83 	.word	0x0000de83
    dfb4:	0000de83 	.word	0x0000de83
    dfb8:	0000de83 	.word	0x0000de83
    dfbc:	0000e1f3 	.word	0x0000e1f3
    dfc0:	1c5a      	adds	r2, r3, #1
    dfc2:	60ea      	str	r2, [r5, #12]
    dfc4:	785a      	ldrb	r2, [r3, #1]
    dfc6:	2a00      	cmp	r2, #0
    dfc8:	f43f af5b 	beq.w	de82 <d_encoding+0x62>
    dfcc:	1c9a      	adds	r2, r3, #2
    dfce:	60ea      	str	r2, [r5, #12]
    dfd0:	785a      	ldrb	r2, [r3, #1]
    dfd2:	3a41      	subs	r2, #65	; 0x41
    dfd4:	2a31      	cmp	r2, #49	; 0x31
    dfd6:	f63f af54 	bhi.w	de82 <d_encoding+0x62>
    dfda:	a101      	add	r1, pc, #4	; (adr r1, dfe0 <d_encoding+0x1c0>)
    dfdc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    dfe0:	0000e0d5 	.word	0x0000e0d5
    dfe4:	0000de83 	.word	0x0000de83
    dfe8:	0000de83 	.word	0x0000de83
    dfec:	0000de83 	.word	0x0000de83
    dff0:	0000de83 	.word	0x0000de83
    dff4:	0000de83 	.word	0x0000de83
    dff8:	0000de83 	.word	0x0000de83
    dffc:	0000de83 	.word	0x0000de83
    e000:	0000de83 	.word	0x0000de83
    e004:	0000de83 	.word	0x0000de83
    e008:	0000de83 	.word	0x0000de83
    e00c:	0000de83 	.word	0x0000de83
    e010:	0000de83 	.word	0x0000de83
    e014:	0000de83 	.word	0x0000de83
    e018:	0000de83 	.word	0x0000de83
    e01c:	0000de83 	.word	0x0000de83
    e020:	0000de83 	.word	0x0000de83
    e024:	0000e1d5 	.word	0x0000e1d5
    e028:	0000de83 	.word	0x0000de83
    e02c:	0000e1a9 	.word	0x0000e1a9
    e030:	0000de83 	.word	0x0000de83
    e034:	0000e193 	.word	0x0000e193
    e038:	0000de83 	.word	0x0000de83
    e03c:	0000de83 	.word	0x0000de83
    e040:	0000de83 	.word	0x0000de83
    e044:	0000de83 	.word	0x0000de83
    e048:	0000de83 	.word	0x0000de83
    e04c:	0000de83 	.word	0x0000de83
    e050:	0000de83 	.word	0x0000de83
    e054:	0000de83 	.word	0x0000de83
    e058:	0000de83 	.word	0x0000de83
    e05c:	0000de83 	.word	0x0000de83
    e060:	0000de83 	.word	0x0000de83
    e064:	0000de83 	.word	0x0000de83
    e068:	0000de83 	.word	0x0000de83
    e06c:	0000de83 	.word	0x0000de83
    e070:	0000de83 	.word	0x0000de83
    e074:	0000de83 	.word	0x0000de83
    e078:	0000de83 	.word	0x0000de83
    e07c:	0000de83 	.word	0x0000de83
    e080:	0000de83 	.word	0x0000de83
    e084:	0000de83 	.word	0x0000de83
    e088:	0000de83 	.word	0x0000de83
    e08c:	0000de83 	.word	0x0000de83
    e090:	0000de83 	.word	0x0000de83
    e094:	0000de83 	.word	0x0000de83
    e098:	0000de83 	.word	0x0000de83
    e09c:	0000de83 	.word	0x0000de83
    e0a0:	0000de83 	.word	0x0000de83
    e0a4:	0000e0ed 	.word	0x0000e0ed
    e0a8:	2b34      	cmp	r3, #52	; 0x34
    e0aa:	f47f af0f 	bne.w	decc <d_encoding+0xac>
    e0ae:	2100      	movs	r1, #0
    e0b0:	4628      	mov	r0, r5
    e0b2:	f7ff fe77 	bl	dda4 <d_bare_function_type>
    e0b6:	4622      	mov	r2, r4
    e0b8:	4603      	mov	r3, r0
    e0ba:	2103      	movs	r1, #3
    e0bc:	4628      	mov	r0, r5
    e0be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e0c2:	f7fd be07 	b.w	bcd4 <d_make_comp>
    e0c6:	2a4c      	cmp	r2, #76	; 0x4c
    e0c8:	d1f1      	bne.n	e0ae <d_encoding+0x28e>
    e0ca:	6849      	ldr	r1, [r1, #4]
    e0cc:	2900      	cmp	r1, #0
    e0ce:	f47f aee3 	bne.w	de98 <d_encoding+0x78>
    e0d2:	e7ed      	b.n	e0b0 <d_encoding+0x290>
    e0d4:	2100      	movs	r1, #0
    e0d6:	4628      	mov	r0, r5
    e0d8:	f7ff fea2 	bl	de20 <d_encoding>
    e0dc:	2300      	movs	r3, #0
    e0de:	4602      	mov	r2, r0
    e0e0:	2117      	movs	r1, #23
    e0e2:	4628      	mov	r0, r5
    e0e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e0e8:	f7fd bdf4 	b.w	bcd4 <d_make_comp>
    e0ec:	f105 000c 	add.w	r0, r5, #12
    e0f0:	f7fd ff40 	bl	bf74 <d_number.isra.0>
    e0f4:	2801      	cmp	r0, #1
    e0f6:	f77f aec4 	ble.w	de82 <d_encoding+0x62>
    e0fa:	68eb      	ldr	r3, [r5, #12]
    e0fc:	781a      	ldrb	r2, [r3, #0]
    e0fe:	2a00      	cmp	r2, #0
    e100:	f43f aebf 	beq.w	de82 <d_encoding+0x62>
    e104:	1c5f      	adds	r7, r3, #1
    e106:	60ef      	str	r7, [r5, #12]
    e108:	781b      	ldrb	r3, [r3, #0]
    e10a:	2b5f      	cmp	r3, #95	; 0x5f
    e10c:	f47f aeb9 	bne.w	de82 <d_encoding+0x62>
    e110:	2200      	movs	r2, #0
    e112:	1e46      	subs	r6, r0, #1
    e114:	4690      	mov	r8, r2
    e116:	f04f 0940 	mov.w	r9, #64	; 0x40
    e11a:	783b      	ldrb	r3, [r7, #0]
    e11c:	2b00      	cmp	r3, #0
    e11e:	f43f aeb0 	beq.w	de82 <d_encoding+0x62>
    e122:	2b24      	cmp	r3, #36	; 0x24
    e124:	f000 8128 	beq.w	e378 <d_encoding+0x558>
    e128:	463c      	mov	r4, r7
    e12a:	2100      	movs	r1, #0
    e12c:	e004      	b.n	e138 <d_encoding+0x318>
    e12e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    e132:	b123      	cbz	r3, e13e <d_encoding+0x31e>
    e134:	2b24      	cmp	r3, #36	; 0x24
    e136:	d002      	beq.n	e13e <d_encoding+0x31e>
    e138:	3101      	adds	r1, #1
    e13a:	42b1      	cmp	r1, r6
    e13c:	dbf7      	blt.n	e12e <d_encoding+0x30e>
    e13e:	696c      	ldr	r4, [r5, #20]
    e140:	69a8      	ldr	r0, [r5, #24]
    e142:	4284      	cmp	r4, r0
    e144:	f280 8113 	bge.w	e36e <d_encoding+0x54e>
    e148:	6928      	ldr	r0, [r5, #16]
    e14a:	1c63      	adds	r3, r4, #1
    e14c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e150:	616b      	str	r3, [r5, #20]
    e152:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
    e156:	f000 810a 	beq.w	e36e <d_encoding+0x54e>
    e15a:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
    e15e:	605f      	str	r7, [r3, #4]
    e160:	6099      	str	r1, [r3, #8]
    e162:	68ef      	ldr	r7, [r5, #12]
    e164:	440f      	add	r7, r1
    e166:	1a76      	subs	r6, r6, r1
    e168:	60ef      	str	r7, [r5, #12]
    e16a:	2a00      	cmp	r2, #0
    e16c:	f000 8121 	beq.w	e3b2 <d_encoding+0x592>
    e170:	213f      	movs	r1, #63	; 0x3f
    e172:	4628      	mov	r0, r5
    e174:	f7fd fdae 	bl	bcd4 <d_make_comp>
    e178:	4602      	mov	r2, r0
    e17a:	2800      	cmp	r0, #0
    e17c:	f43f ae81 	beq.w	de82 <d_encoding+0x62>
    e180:	2e00      	cmp	r6, #0
    e182:	dcca      	bgt.n	e11a <d_encoding+0x2fa>
    e184:	4628      	mov	r0, r5
    e186:	2300      	movs	r3, #0
    e188:	213e      	movs	r1, #62	; 0x3e
    e18a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e18e:	f7fd bda1 	b.w	bcd4 <d_make_comp>
    e192:	4628      	mov	r0, r5
    e194:	f7fe fe70 	bl	ce78 <d_name>
    e198:	2300      	movs	r3, #0
    e19a:	4602      	mov	r2, r0
    e19c:	2113      	movs	r1, #19
    e19e:	4628      	mov	r0, r5
    e1a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e1a4:	f7fd bd96 	b.w	bcd4 <d_make_comp>
    e1a8:	789a      	ldrb	r2, [r3, #2]
    e1aa:	2100      	movs	r1, #0
    e1ac:	4628      	mov	r0, r5
    e1ae:	2a00      	cmp	r2, #0
    e1b0:	f000 8101 	beq.w	e3b6 <d_encoding+0x596>
    e1b4:	1cda      	adds	r2, r3, #3
    e1b6:	60ea      	str	r2, [r5, #12]
    e1b8:	789b      	ldrb	r3, [r3, #2]
    e1ba:	2b6e      	cmp	r3, #110	; 0x6e
    e1bc:	f040 80fb 	bne.w	e3b6 <d_encoding+0x596>
    e1c0:	f7ff fe2e 	bl	de20 <d_encoding>
    e1c4:	2300      	movs	r3, #0
    e1c6:	4602      	mov	r2, r0
    e1c8:	2149      	movs	r1, #73	; 0x49
    e1ca:	4628      	mov	r0, r5
    e1cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e1d0:	f7fd bd80 	b.w	bcd4 <d_make_comp>
    e1d4:	4628      	mov	r0, r5
    e1d6:	f7fe fe4f 	bl	ce78 <d_name>
    e1da:	4604      	mov	r4, r0
    e1dc:	4628      	mov	r0, r5
    e1de:	f7fd fef3 	bl	bfc8 <d_number_component>
    e1e2:	4622      	mov	r2, r4
    e1e4:	4603      	mov	r3, r0
    e1e6:	2116      	movs	r1, #22
    e1e8:	4628      	mov	r0, r5
    e1ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e1ee:	f7fd bd71 	b.w	bcd4 <d_make_comp>
    e1f2:	2176      	movs	r1, #118	; 0x76
    e1f4:	4628      	mov	r0, r5
    e1f6:	f7fe f871 	bl	c2dc <d_call_offset>
    e1fa:	2800      	cmp	r0, #0
    e1fc:	f43f ae41 	beq.w	de82 <d_encoding+0x62>
    e200:	2100      	movs	r1, #0
    e202:	4628      	mov	r0, r5
    e204:	f7ff fe0c 	bl	de20 <d_encoding>
    e208:	2300      	movs	r3, #0
    e20a:	4602      	mov	r2, r0
    e20c:	2110      	movs	r1, #16
    e20e:	4628      	mov	r0, r5
    e210:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e214:	f7fd bd5e 	b.w	bcd4 <d_make_comp>
    e218:	2168      	movs	r1, #104	; 0x68
    e21a:	4628      	mov	r0, r5
    e21c:	f7fe f85e 	bl	c2dc <d_call_offset>
    e220:	2800      	cmp	r0, #0
    e222:	f43f ae2e 	beq.w	de82 <d_encoding+0x62>
    e226:	2100      	movs	r1, #0
    e228:	4628      	mov	r0, r5
    e22a:	f7ff fdf9 	bl	de20 <d_encoding>
    e22e:	2300      	movs	r3, #0
    e230:	4602      	mov	r2, r0
    e232:	210f      	movs	r1, #15
    e234:	4628      	mov	r0, r5
    e236:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e23a:	f7fd bd4b 	b.w	bcd4 <d_make_comp>
    e23e:	2100      	movs	r1, #0
    e240:	4628      	mov	r0, r5
    e242:	f7fe f84b 	bl	c2dc <d_call_offset>
    e246:	2800      	cmp	r0, #0
    e248:	f43f ae1b 	beq.w	de82 <d_encoding+0x62>
    e24c:	2100      	movs	r1, #0
    e24e:	4628      	mov	r0, r5
    e250:	f7fe f844 	bl	c2dc <d_call_offset>
    e254:	2800      	cmp	r0, #0
    e256:	f43f ae14 	beq.w	de82 <d_encoding+0x62>
    e25a:	2100      	movs	r1, #0
    e25c:	4628      	mov	r0, r5
    e25e:	f7ff fddf 	bl	de20 <d_encoding>
    e262:	2300      	movs	r3, #0
    e264:	4602      	mov	r2, r0
    e266:	2111      	movs	r1, #17
    e268:	4628      	mov	r0, r5
    e26a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e26e:	f7fd bd31 	b.w	bcd4 <d_make_comp>
    e272:	4628      	mov	r0, r5
    e274:	f7fe fe00 	bl	ce78 <d_name>
    e278:	2300      	movs	r3, #0
    e27a:	4602      	mov	r2, r0
    e27c:	2115      	movs	r1, #21
    e27e:	4628      	mov	r0, r5
    e280:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e284:	f7fd bd26 	b.w	bcd4 <d_make_comp>
    e288:	310f      	adds	r1, #15
    e28a:	6329      	str	r1, [r5, #48]	; 0x30
    e28c:	4628      	mov	r0, r5
    e28e:	f7fe ffaf 	bl	d1f0 <d_type>
    e292:	2300      	movs	r3, #0
    e294:	4602      	mov	r2, r0
    e296:	2109      	movs	r1, #9
    e298:	4628      	mov	r0, r5
    e29a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e29e:	f7fd bd19 	b.w	bcd4 <d_make_comp>
    e2a2:	310a      	adds	r1, #10
    e2a4:	6329      	str	r1, [r5, #48]	; 0x30
    e2a6:	4628      	mov	r0, r5
    e2a8:	f7fe ffa2 	bl	d1f0 <d_type>
    e2ac:	2300      	movs	r3, #0
    e2ae:	4602      	mov	r2, r0
    e2b0:	210a      	movs	r1, #10
    e2b2:	4628      	mov	r0, r5
    e2b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e2b8:	f7fd bd0c 	b.w	bcd4 <d_make_comp>
    e2bc:	4628      	mov	r0, r5
    e2be:	f7fe ff97 	bl	d1f0 <d_type>
    e2c2:	2300      	movs	r3, #0
    e2c4:	4602      	mov	r2, r0
    e2c6:	210d      	movs	r1, #13
    e2c8:	4628      	mov	r0, r5
    e2ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e2ce:	f7fd bd01 	b.w	bcd4 <d_make_comp>
    e2d2:	4628      	mov	r0, r5
    e2d4:	f7fe ff8c 	bl	d1f0 <d_type>
    e2d8:	2300      	movs	r3, #0
    e2da:	4602      	mov	r2, r0
    e2dc:	2112      	movs	r1, #18
    e2de:	4628      	mov	r0, r5
    e2e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e2e4:	f7fd bcf6 	b.w	bcd4 <d_make_comp>
    e2e8:	4628      	mov	r0, r5
    e2ea:	f7fe ff81 	bl	d1f0 <d_type>
    e2ee:	2300      	movs	r3, #0
    e2f0:	4602      	mov	r2, r0
    e2f2:	210c      	movs	r1, #12
    e2f4:	4628      	mov	r0, r5
    e2f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e2fa:	f7fd bceb 	b.w	bcd4 <d_make_comp>
    e2fe:	4628      	mov	r0, r5
    e300:	f7fe fdba 	bl	ce78 <d_name>
    e304:	2300      	movs	r3, #0
    e306:	4602      	mov	r2, r0
    e308:	2114      	movs	r1, #20
    e30a:	4628      	mov	r0, r5
    e30c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e310:	f7fd bce0 	b.w	bcd4 <d_make_comp>
    e314:	4628      	mov	r0, r5
    e316:	f7fe ff6b 	bl	d1f0 <d_type>
    e31a:	2300      	movs	r3, #0
    e31c:	4602      	mov	r2, r0
    e31e:	210e      	movs	r1, #14
    e320:	4628      	mov	r0, r5
    e322:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e326:	f7fd bcd5 	b.w	bcd4 <d_make_comp>
    e32a:	4628      	mov	r0, r5
    e32c:	f7fe ff60 	bl	d1f0 <d_type>
    e330:	4604      	mov	r4, r0
    e332:	f105 000c 	add.w	r0, r5, #12
    e336:	f7fd fe1d 	bl	bf74 <d_number.isra.0>
    e33a:	2800      	cmp	r0, #0
    e33c:	f6ff ada1 	blt.w	de82 <d_encoding+0x62>
    e340:	68eb      	ldr	r3, [r5, #12]
    e342:	781a      	ldrb	r2, [r3, #0]
    e344:	2a5f      	cmp	r2, #95	; 0x5f
    e346:	f47f ad9c 	bne.w	de82 <d_encoding+0x62>
    e34a:	3301      	adds	r3, #1
    e34c:	60eb      	str	r3, [r5, #12]
    e34e:	4628      	mov	r0, r5
    e350:	f7fe ff4e 	bl	d1f0 <d_type>
    e354:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    e356:	1d59      	adds	r1, r3, #5
    e358:	6329      	str	r1, [r5, #48]	; 0x30
    e35a:	4602      	mov	r2, r0
    e35c:	4623      	mov	r3, r4
    e35e:	4628      	mov	r0, r5
    e360:	210b      	movs	r1, #11
    e362:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e366:	f7fd bcb5 	b.w	bcd4 <d_make_comp>
    e36a:	685b      	ldr	r3, [r3, #4]
    e36c:	e574      	b.n	de58 <d_encoding+0x38>
    e36e:	68eb      	ldr	r3, [r5, #12]
    e370:	440b      	add	r3, r1
    e372:	60eb      	str	r3, [r5, #12]
    e374:	2400      	movs	r4, #0
    e376:	e585      	b.n	de84 <d_encoding+0x64>
    e378:	787b      	ldrb	r3, [r7, #1]
    e37a:	2b53      	cmp	r3, #83	; 0x53
    e37c:	d027      	beq.n	e3ce <d_encoding+0x5ae>
    e37e:	2b5f      	cmp	r3, #95	; 0x5f
    e380:	d023      	beq.n	e3ca <d_encoding+0x5aa>
    e382:	2b24      	cmp	r3, #36	; 0x24
    e384:	f47f ad7d 	bne.w	de82 <d_encoding+0x62>
    e388:	4618      	mov	r0, r3
    e38a:	6969      	ldr	r1, [r5, #20]
    e38c:	69ab      	ldr	r3, [r5, #24]
    e38e:	4299      	cmp	r1, r3
    e390:	da1f      	bge.n	e3d2 <d_encoding+0x5b2>
    e392:	692c      	ldr	r4, [r5, #16]
    e394:	1c4f      	adds	r7, r1, #1
    e396:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e39a:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
    e39e:	616f      	str	r7, [r5, #20]
    e3a0:	d017      	beq.n	e3d2 <d_encoding+0x5b2>
    e3a2:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
    e3a6:	6058      	str	r0, [r3, #4]
    e3a8:	68ef      	ldr	r7, [r5, #12]
    e3aa:	3702      	adds	r7, #2
    e3ac:	3e02      	subs	r6, #2
    e3ae:	60ef      	str	r7, [r5, #12]
    e3b0:	e6db      	b.n	e16a <d_encoding+0x34a>
    e3b2:	461a      	mov	r2, r3
    e3b4:	e6e4      	b.n	e180 <d_encoding+0x360>
    e3b6:	f7ff fd33 	bl	de20 <d_encoding>
    e3ba:	2300      	movs	r3, #0
    e3bc:	4602      	mov	r2, r0
    e3be:	2148      	movs	r1, #72	; 0x48
    e3c0:	4628      	mov	r0, r5
    e3c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e3c6:	f7fd bc85 	b.w	bcd4 <d_make_comp>
    e3ca:	202e      	movs	r0, #46	; 0x2e
    e3cc:	e7dd      	b.n	e38a <d_encoding+0x56a>
    e3ce:	202f      	movs	r0, #47	; 0x2f
    e3d0:	e7db      	b.n	e38a <d_encoding+0x56a>
    e3d2:	68eb      	ldr	r3, [r5, #12]
    e3d4:	3302      	adds	r3, #2
    e3d6:	60eb      	str	r3, [r5, #12]
    e3d8:	2400      	movs	r4, #0
    e3da:	e553      	b.n	de84 <d_encoding+0x64>

0000e3dc <d_expr_primary>:
    e3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e3de:	68c2      	ldr	r2, [r0, #12]
    e3e0:	7813      	ldrb	r3, [r2, #0]
    e3e2:	2b4c      	cmp	r3, #76	; 0x4c
    e3e4:	d001      	beq.n	e3ea <d_expr_primary+0xe>
    e3e6:	2000      	movs	r0, #0
    e3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e3ea:	1c53      	adds	r3, r2, #1
    e3ec:	60c3      	str	r3, [r0, #12]
    e3ee:	7851      	ldrb	r1, [r2, #1]
    e3f0:	295f      	cmp	r1, #95	; 0x5f
    e3f2:	4605      	mov	r5, r0
    e3f4:	d03a      	beq.n	e46c <d_expr_primary+0x90>
    e3f6:	295a      	cmp	r1, #90	; 0x5a
    e3f8:	d03f      	beq.n	e47a <d_expr_primary+0x9e>
    e3fa:	f7fe fef9 	bl	d1f0 <d_type>
    e3fe:	2800      	cmp	r0, #0
    e400:	d0f1      	beq.n	e3e6 <d_expr_primary+0xa>
    e402:	7803      	ldrb	r3, [r0, #0]
    e404:	2b27      	cmp	r3, #39	; 0x27
    e406:	d046      	beq.n	e496 <d_expr_primary+0xba>
    e408:	68ee      	ldr	r6, [r5, #12]
    e40a:	7833      	ldrb	r3, [r6, #0]
    e40c:	2b6e      	cmp	r3, #110	; 0x6e
    e40e:	d04b      	beq.n	e4a8 <d_expr_primary+0xcc>
    e410:	213c      	movs	r1, #60	; 0x3c
    e412:	2b45      	cmp	r3, #69	; 0x45
    e414:	d04e      	beq.n	e4b4 <d_expr_primary+0xd8>
    e416:	2b00      	cmp	r3, #0
    e418:	d0e5      	beq.n	e3e6 <d_expr_primary+0xa>
    e41a:	4633      	mov	r3, r6
    e41c:	e001      	b.n	e422 <d_expr_primary+0x46>
    e41e:	2c00      	cmp	r4, #0
    e420:	d0e1      	beq.n	e3e6 <d_expr_primary+0xa>
    e422:	3301      	adds	r3, #1
    e424:	60eb      	str	r3, [r5, #12]
    e426:	781c      	ldrb	r4, [r3, #0]
    e428:	2c45      	cmp	r4, #69	; 0x45
    e42a:	d1f8      	bne.n	e41e <d_expr_primary+0x42>
    e42c:	1b9c      	subs	r4, r3, r6
    e42e:	696b      	ldr	r3, [r5, #20]
    e430:	69aa      	ldr	r2, [r5, #24]
    e432:	4293      	cmp	r3, r2
    e434:	da2d      	bge.n	e492 <d_expr_primary+0xb6>
    e436:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    e43a:	692f      	ldr	r7, [r5, #16]
    e43c:	3301      	adds	r3, #1
    e43e:	0092      	lsls	r2, r2, #2
    e440:	616b      	str	r3, [r5, #20]
    e442:	18bb      	adds	r3, r7, r2
    e444:	d025      	beq.n	e492 <d_expr_primary+0xb6>
    e446:	b326      	cbz	r6, e492 <d_expr_primary+0xb6>
    e448:	b31c      	cbz	r4, e492 <d_expr_primary+0xb6>
    e44a:	f04f 0e00 	mov.w	lr, #0
    e44e:	f807 e002 	strb.w	lr, [r7, r2]
    e452:	605e      	str	r6, [r3, #4]
    e454:	609c      	str	r4, [r3, #8]
    e456:	4602      	mov	r2, r0
    e458:	4628      	mov	r0, r5
    e45a:	f7fd fc3b 	bl	bcd4 <d_make_comp>
    e45e:	68eb      	ldr	r3, [r5, #12]
    e460:	781a      	ldrb	r2, [r3, #0]
    e462:	2a45      	cmp	r2, #69	; 0x45
    e464:	d1bf      	bne.n	e3e6 <d_expr_primary+0xa>
    e466:	3301      	adds	r3, #1
    e468:	60eb      	str	r3, [r5, #12]
    e46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e46c:	1c93      	adds	r3, r2, #2
    e46e:	60c3      	str	r3, [r0, #12]
    e470:	7892      	ldrb	r2, [r2, #2]
    e472:	2a5a      	cmp	r2, #90	; 0x5a
    e474:	bf18      	it	ne
    e476:	2000      	movne	r0, #0
    e478:	d107      	bne.n	e48a <d_expr_primary+0xae>
    e47a:	3301      	adds	r3, #1
    e47c:	60eb      	str	r3, [r5, #12]
    e47e:	2100      	movs	r1, #0
    e480:	4628      	mov	r0, r5
    e482:	f7ff fccd 	bl	de20 <d_encoding>
    e486:	68eb      	ldr	r3, [r5, #12]
    e488:	781a      	ldrb	r2, [r3, #0]
    e48a:	2a45      	cmp	r2, #69	; 0x45
    e48c:	d0eb      	beq.n	e466 <d_expr_primary+0x8a>
    e48e:	2000      	movs	r0, #0
    e490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e492:	2300      	movs	r3, #0
    e494:	e7df      	b.n	e456 <d_expr_primary+0x7a>
    e496:	6843      	ldr	r3, [r0, #4]
    e498:	7c1a      	ldrb	r2, [r3, #16]
    e49a:	2a00      	cmp	r2, #0
    e49c:	d0b4      	beq.n	e408 <d_expr_primary+0x2c>
    e49e:	685a      	ldr	r2, [r3, #4]
    e4a0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    e4a2:	1a9b      	subs	r3, r3, r2
    e4a4:	632b      	str	r3, [r5, #48]	; 0x30
    e4a6:	e7af      	b.n	e408 <d_expr_primary+0x2c>
    e4a8:	1c72      	adds	r2, r6, #1
    e4aa:	60ea      	str	r2, [r5, #12]
    e4ac:	7873      	ldrb	r3, [r6, #1]
    e4ae:	213d      	movs	r1, #61	; 0x3d
    e4b0:	4616      	mov	r6, r2
    e4b2:	e7ae      	b.n	e412 <d_expr_primary+0x36>
    e4b4:	2400      	movs	r4, #0
    e4b6:	e7ba      	b.n	e42e <d_expr_primary+0x52>

0000e4b8 <d_print_comp_inner>:
    e4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4bc:	4604      	mov	r4, r0
    e4be:	b095      	sub	sp, #84	; 0x54
    e4c0:	2a00      	cmp	r2, #0
    e4c2:	f000 80db 	beq.w	e67c <d_print_comp_inner+0x1c4>
    e4c6:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
    e4ca:	2f00      	cmp	r7, #0
    e4cc:	f040 80c2 	bne.w	e654 <d_print_comp_inner+0x19c>
    e4d0:	7813      	ldrb	r3, [r2, #0]
    e4d2:	4688      	mov	r8, r1
    e4d4:	4615      	mov	r5, r2
    e4d6:	2b4d      	cmp	r3, #77	; 0x4d
    e4d8:	f201 81e6 	bhi.w	f8a8 <d_print_comp_inner+0x13f0>
    e4dc:	e8df f013 	tbh	[pc, r3, lsl #1]
    e4e0:	043c045a 	.word	0x043c045a
    e4e4:	03a4043c 	.word	0x03a4043c
    e4e8:	048904a5 	.word	0x048904a5
    e4ec:	038e04ea 	.word	0x038e04ea
    e4f0:	0330037c 	.word	0x0330037c
    e4f4:	030a0356 	.word	0x030a0356
    e4f8:	029802e4 	.word	0x029802e4
    e4fc:	027202be 	.word	0x027202be
    e500:	01f0024c 	.word	0x01f0024c
    e504:	01ca0226 	.word	0x01ca0226
    e508:	015801a4 	.word	0x015801a4
    e50c:	0132017e 	.word	0x0132017e
    e510:	00f2010b 	.word	0x00f2010b
    e514:	00f200f2 	.word	0x00f200f2
    e518:	00d400d4 	.word	0x00d400d4
    e51c:	00d400d4 	.word	0x00d400d4
    e520:	00d400d4 	.word	0x00d400d4
    e524:	06d500d4 	.word	0x06d500d4
    e528:	00d406d5 	.word	0x00d406d5
    e52c:	06a900d4 	.word	0x06a900d4
    e530:	069306fc 	.word	0x069306fc
    e534:	0701071d 	.word	0x0701071d
    e538:	07010788 	.word	0x07010788
    e53c:	057b057b 	.word	0x057b057b
    e540:	06060630 	.word	0x06060630
    e544:	09e405e0 	.word	0x09e405e0
    e548:	068e05ad 	.word	0x068e05ad
    e54c:	004e0654 	.word	0x004e0654
    e550:	094c0485 	.word	0x094c0485
    e554:	08df08df 	.word	0x08df08df
    e558:	08ae08ae 	.word	0x08ae08ae
    e55c:	05480888 	.word	0x05480888
    e560:	08e4053a 	.word	0x08e4053a
    e564:	09be0514 	.word	0x09be0514
    e568:	09980914 	.word	0x09980914
    e56c:	07cb09e4 	.word	0x07cb09e4
    e570:	07f10862 	.word	0x07f10862
    e574:	04130817 	.word	0x04130817
    e578:	055200d4 	.word	0x055200d4
    e57c:	68ab      	ldr	r3, [r5, #8]
    e57e:	781b      	ldrb	r3, [r3, #0]
    e580:	2b38      	cmp	r3, #56	; 0x38
    e582:	d17b      	bne.n	e67c <d_print_comp_inner+0x1c4>
    e584:	686a      	ldr	r2, [r5, #4]
    e586:	6853      	ldr	r3, [r2, #4]
    e588:	681b      	ldr	r3, [r3, #0]
    e58a:	7859      	ldrb	r1, [r3, #1]
    e58c:	2963      	cmp	r1, #99	; 0x63
    e58e:	f002 814a 	beq.w	10826 <STACK_SIZE+0x826>
    e592:	f105 0308 	add.w	r3, r5, #8
    e596:	4641      	mov	r1, r8
    e598:	4620      	mov	r0, r4
    e59a:	f003 fbbb 	bl	11d14 <d_maybe_print_fold_expression.isra.15>
    e59e:	4606      	mov	r6, r0
    e5a0:	2800      	cmp	r0, #0
    e5a2:	d157      	bne.n	e654 <d_print_comp_inner+0x19c>
    e5a4:	686b      	ldr	r3, [r5, #4]
    e5a6:	781a      	ldrb	r2, [r3, #0]
    e5a8:	2a31      	cmp	r2, #49	; 0x31
    e5aa:	f002 836b 	beq.w	10c84 <STACK_SIZE+0xc84>
    e5ae:	685b      	ldr	r3, [r3, #4]
    e5b0:	49c7      	ldr	r1, [pc, #796]	; (e8d0 <d_print_comp_inner+0x418>)
    e5b2:	6818      	ldr	r0, [r3, #0]
    e5b4:	f007 fda8 	bl	16108 <strcmp>
    e5b8:	68ab      	ldr	r3, [r5, #8]
    e5ba:	b920      	cbnz	r0, e5c6 <d_print_comp_inner+0x10e>
    e5bc:	685a      	ldr	r2, [r3, #4]
    e5be:	7811      	ldrb	r1, [r2, #0]
    e5c0:	2903      	cmp	r1, #3
    e5c2:	f002 83a5 	beq.w	10d10 <STACK_SIZE+0xd10>
    e5c6:	685a      	ldr	r2, [r3, #4]
    e5c8:	4641      	mov	r1, r8
    e5ca:	4620      	mov	r0, r4
    e5cc:	f003 fb3e 	bl	11c4c <d_print_subexpr>
    e5d0:	686f      	ldr	r7, [r5, #4]
    e5d2:	49c0      	ldr	r1, [pc, #768]	; (e8d4 <d_print_comp_inner+0x41c>)
    e5d4:	687b      	ldr	r3, [r7, #4]
    e5d6:	f8d3 9000 	ldr.w	r9, [r3]
    e5da:	4648      	mov	r0, r9
    e5dc:	f007 fd94 	bl	16108 <strcmp>
    e5e0:	4606      	mov	r6, r0
    e5e2:	2800      	cmp	r0, #0
    e5e4:	f042 826f 	bne.w	10ac6 <STACK_SIZE+0xac6>
    e5e8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    e5ec:	29ff      	cmp	r1, #255	; 0xff
    e5ee:	f002 844a 	beq.w	10e86 <STACK_SIZE+0xe86>
    e5f2:	1c4a      	adds	r2, r1, #1
    e5f4:	235b      	movs	r3, #91	; 0x5b
    e5f6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    e5fa:	5463      	strb	r3, [r4, r1]
    e5fc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    e600:	68ab      	ldr	r3, [r5, #8]
    e602:	4641      	mov	r1, r8
    e604:	689a      	ldr	r2, [r3, #8]
    e606:	4620      	mov	r0, r4
    e608:	f002 fcfa 	bl	11000 <d_print_comp>
    e60c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    e610:	29ff      	cmp	r1, #255	; 0xff
    e612:	f002 8425 	beq.w	10e60 <STACK_SIZE+0xe60>
    e616:	235d      	movs	r3, #93	; 0x5d
    e618:	1c4a      	adds	r2, r1, #1
    e61a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    e61e:	5463      	strb	r3, [r4, r1]
    e620:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    e624:	686b      	ldr	r3, [r5, #4]
    e626:	781a      	ldrb	r2, [r3, #0]
    e628:	2a31      	cmp	r2, #49	; 0x31
    e62a:	d113      	bne.n	e654 <d_print_comp_inner+0x19c>
    e62c:	685b      	ldr	r3, [r3, #4]
    e62e:	689a      	ldr	r2, [r3, #8]
    e630:	2a01      	cmp	r2, #1
    e632:	d10f      	bne.n	e654 <d_print_comp_inner+0x19c>
    e634:	685b      	ldr	r3, [r3, #4]
    e636:	781b      	ldrb	r3, [r3, #0]
    e638:	2b3e      	cmp	r3, #62	; 0x3e
    e63a:	d10b      	bne.n	e654 <d_print_comp_inner+0x19c>
    e63c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    e640:	29ff      	cmp	r1, #255	; 0xff
    e642:	f002 8482 	beq.w	10f4a <STACK_SIZE+0xf4a>
    e646:	2329      	movs	r3, #41	; 0x29
    e648:	1c4a      	adds	r2, r1, #1
    e64a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    e64e:	5463      	strb	r3, [r4, r1]
    e650:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    e654:	b015      	add	sp, #84	; 0x54
    e656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e65a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    e65e:	2b00      	cmp	r3, #0
    e660:	f2c1 84a4 	blt.w	ffac <d_print_comp_inner+0x1af4>
    e664:	2b00      	cmp	r3, #0
    e666:	f002 8432 	beq.w	10ece <STACK_SIZE+0xece>
    e66a:	6880      	ldr	r0, [r0, #8]
    e66c:	3b01      	subs	r3, #1
    e66e:	b110      	cbz	r0, e676 <d_print_comp_inner+0x1be>
    e670:	7802      	ldrb	r2, [r0, #0]
    e672:	2a2f      	cmp	r2, #47	; 0x2f
    e674:	d0f6      	beq.n	e664 <d_print_comp_inner+0x1ac>
    e676:	b10f      	cbz	r7, e67c <d_print_comp_inner+0x1c4>
    e678:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    e67c:	2301      	movs	r3, #1
    e67e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    e682:	b015      	add	sp, #84	; 0x54
    e684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e688:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
    e68c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    e690:	9505      	str	r5, [sp, #20]
    e692:	ab14      	add	r3, sp, #80	; 0x50
    e694:	2100      	movs	r1, #0
    e696:	f843 cd40 	str.w	ip, [r3, #-64]!
    e69a:	9106      	str	r1, [sp, #24]
    e69c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    e6a0:	9207      	str	r2, [sp, #28]
    e6a2:	686a      	ldr	r2, [r5, #4]
    e6a4:	4641      	mov	r1, r8
    e6a6:	4620      	mov	r0, r4
    e6a8:	f002 fcaa 	bl	11000 <d_print_comp>
    e6ac:	9b06      	ldr	r3, [sp, #24]
    e6ae:	2b00      	cmp	r3, #0
    e6b0:	f001 8389 	beq.w	fdc6 <d_print_comp_inner+0x190e>
    e6b4:	9b04      	ldr	r3, [sp, #16]
    e6b6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    e6ba:	2f00      	cmp	r7, #0
    e6bc:	d0ca      	beq.n	e654 <d_print_comp_inner+0x19c>
    e6be:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    e6c2:	e7c7      	b.n	e654 <d_print_comp_inner+0x19c>
    e6c4:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
    e6c8:	f1bc 0f00 	cmp.w	ip, #0
    e6cc:	d0de      	beq.n	e68c <d_print_comp_inner+0x1d4>
    e6ce:	4662      	mov	r2, ip
    e6d0:	e005      	b.n	e6de <d_print_comp_inner+0x226>
    e6d2:	428b      	cmp	r3, r1
    e6d4:	f001 86b8 	beq.w	10448 <STACK_SIZE+0x448>
    e6d8:	6812      	ldr	r2, [r2, #0]
    e6da:	2a00      	cmp	r2, #0
    e6dc:	d0d6      	beq.n	e68c <d_print_comp_inner+0x1d4>
    e6de:	6890      	ldr	r0, [r2, #8]
    e6e0:	2800      	cmp	r0, #0
    e6e2:	d1f9      	bne.n	e6d8 <d_print_comp_inner+0x220>
    e6e4:	6851      	ldr	r1, [r2, #4]
    e6e6:	7809      	ldrb	r1, [r1, #0]
    e6e8:	f1a1 0e19 	sub.w	lr, r1, #25
    e6ec:	f1be 0f02 	cmp.w	lr, #2
    e6f0:	d9ef      	bls.n	e6d2 <d_print_comp_inner+0x21a>
    e6f2:	4607      	mov	r7, r0
    e6f4:	e7ca      	b.n	e68c <d_print_comp_inner+0x1d4>
    e6f6:	68af      	ldr	r7, [r5, #8]
    e6f8:	686d      	ldr	r5, [r5, #4]
    e6fa:	2f00      	cmp	r7, #0
    e6fc:	d0aa      	beq.n	e654 <d_print_comp_inner+0x19c>
    e6fe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    e702:	442f      	add	r7, r5
    e704:	f04f 0800 	mov.w	r8, #0
    e708:	e008      	b.n	e71c <d_print_comp_inner+0x264>
    e70a:	460b      	mov	r3, r1
    e70c:	3101      	adds	r1, #1
    e70e:	42bd      	cmp	r5, r7
    e710:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e714:	54e6      	strb	r6, [r4, r3]
    e716:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    e71a:	d09b      	beq.n	e654 <d_print_comp_inner+0x19c>
    e71c:	29ff      	cmp	r1, #255	; 0xff
    e71e:	f815 6b01 	ldrb.w	r6, [r5], #1
    e722:	d1f2      	bne.n	e70a <d_print_comp_inner+0x252>
    e724:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e728:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    e72c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e730:	4620      	mov	r0, r4
    e732:	4798      	blx	r3
    e734:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e738:	3301      	adds	r3, #1
    e73a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e73e:	2101      	movs	r1, #1
    e740:	2300      	movs	r3, #0
    e742:	e7e4      	b.n	e70e <d_print_comp_inner+0x256>
    e744:	4e64      	ldr	r6, [pc, #400]	; (e8d8 <d_print_comp_inner+0x420>)
    e746:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    e74a:	f106 0a11 	add.w	sl, r6, #17
    e74e:	f04f 0900 	mov.w	r9, #0
    e752:	e009      	b.n	e768 <d_print_comp_inner+0x2b0>
    e754:	460b      	mov	r3, r1
    e756:	3101      	adds	r1, #1
    e758:	4556      	cmp	r6, sl
    e75a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e75e:	54e7      	strb	r7, [r4, r3]
    e760:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    e764:	f001 8296 	beq.w	fc94 <d_print_comp_inner+0x17dc>
    e768:	29ff      	cmp	r1, #255	; 0xff
    e76a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    e76e:	d1f1      	bne.n	e754 <d_print_comp_inner+0x29c>
    e770:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e774:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    e778:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e77c:	4620      	mov	r0, r4
    e77e:	4798      	blx	r3
    e780:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e784:	3301      	adds	r3, #1
    e786:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e78a:	2101      	movs	r1, #1
    e78c:	2300      	movs	r3, #0
    e78e:	e7e3      	b.n	e758 <d_print_comp_inner+0x2a0>
    e790:	4e52      	ldr	r6, [pc, #328]	; (e8dc <d_print_comp_inner+0x424>)
    e792:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    e796:	f106 0a19 	add.w	sl, r6, #25
    e79a:	f04f 0900 	mov.w	r9, #0
    e79e:	e009      	b.n	e7b4 <d_print_comp_inner+0x2fc>
    e7a0:	460b      	mov	r3, r1
    e7a2:	3101      	adds	r1, #1
    e7a4:	4556      	cmp	r6, sl
    e7a6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e7aa:	54e7      	strb	r7, [r4, r3]
    e7ac:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    e7b0:	f001 82a8 	beq.w	fd04 <d_print_comp_inner+0x184c>
    e7b4:	29ff      	cmp	r1, #255	; 0xff
    e7b6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    e7ba:	d1f1      	bne.n	e7a0 <d_print_comp_inner+0x2e8>
    e7bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e7c0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    e7c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e7c8:	4620      	mov	r0, r4
    e7ca:	4798      	blx	r3
    e7cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e7d0:	3301      	adds	r3, #1
    e7d2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e7d6:	2101      	movs	r1, #1
    e7d8:	2300      	movs	r3, #0
    e7da:	e7e3      	b.n	e7a4 <d_print_comp_inner+0x2ec>
    e7dc:	4e40      	ldr	r6, [pc, #256]	; (e8e0 <d_print_comp_inner+0x428>)
    e7de:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    e7e2:	f106 0a15 	add.w	sl, r6, #21
    e7e6:	f04f 0900 	mov.w	r9, #0
    e7ea:	e009      	b.n	e800 <d_print_comp_inner+0x348>
    e7ec:	460b      	mov	r3, r1
    e7ee:	3101      	adds	r1, #1
    e7f0:	4556      	cmp	r6, sl
    e7f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e7f6:	54e7      	strb	r7, [r4, r3]
    e7f8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    e7fc:	f001 8251 	beq.w	fca2 <d_print_comp_inner+0x17ea>
    e800:	29ff      	cmp	r1, #255	; 0xff
    e802:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    e806:	d1f1      	bne.n	e7ec <d_print_comp_inner+0x334>
    e808:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e80c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    e810:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e814:	4620      	mov	r0, r4
    e816:	4798      	blx	r3
    e818:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e81c:	3301      	adds	r3, #1
    e81e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e822:	2101      	movs	r1, #1
    e824:	2300      	movs	r3, #0
    e826:	e7e3      	b.n	e7f0 <d_print_comp_inner+0x338>
    e828:	4e2e      	ldr	r6, [pc, #184]	; (e8e4 <d_print_comp_inner+0x42c>)
    e82a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    e82e:	f106 0a16 	add.w	sl, r6, #22
    e832:	f04f 0900 	mov.w	r9, #0
    e836:	e009      	b.n	e84c <d_print_comp_inner+0x394>
    e838:	460b      	mov	r3, r1
    e83a:	3101      	adds	r1, #1
    e83c:	4556      	cmp	r6, sl
    e83e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e842:	54e7      	strb	r7, [r4, r3]
    e844:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    e848:	f001 8263 	beq.w	fd12 <d_print_comp_inner+0x185a>
    e84c:	29ff      	cmp	r1, #255	; 0xff
    e84e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    e852:	d1f1      	bne.n	e838 <d_print_comp_inner+0x380>
    e854:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e858:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    e85c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e860:	4620      	mov	r0, r4
    e862:	4798      	blx	r3
    e864:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e868:	3301      	adds	r3, #1
    e86a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e86e:	2101      	movs	r1, #1
    e870:	2300      	movs	r3, #0
    e872:	e7e3      	b.n	e83c <d_print_comp_inner+0x384>
    e874:	4e1c      	ldr	r6, [pc, #112]	; (e8e8 <d_print_comp_inner+0x430>)
    e876:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    e87a:	f106 0a13 	add.w	sl, r6, #19
    e87e:	f04f 0900 	mov.w	r9, #0
    e882:	e009      	b.n	e898 <d_print_comp_inner+0x3e0>
    e884:	460b      	mov	r3, r1
    e886:	3101      	adds	r1, #1
    e888:	45b2      	cmp	sl, r6
    e88a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e88e:	54e7      	strb	r7, [r4, r3]
    e890:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    e894:	f001 8077 	beq.w	f986 <d_print_comp_inner+0x14ce>
    e898:	29ff      	cmp	r1, #255	; 0xff
    e89a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    e89e:	d1f1      	bne.n	e884 <d_print_comp_inner+0x3cc>
    e8a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e8a4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    e8a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e8ac:	4620      	mov	r0, r4
    e8ae:	4798      	blx	r3
    e8b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e8b4:	3301      	adds	r3, #1
    e8b6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e8ba:	2101      	movs	r1, #1
    e8bc:	2300      	movs	r3, #0
    e8be:	e7e3      	b.n	e888 <d_print_comp_inner+0x3d0>
    e8c0:	4e0a      	ldr	r6, [pc, #40]	; (e8ec <d_print_comp_inner+0x434>)
    e8c2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    e8c6:	f106 0a1a 	add.w	sl, r6, #26
    e8ca:	f04f 0900 	mov.w	r9, #0
    e8ce:	e019      	b.n	e904 <d_print_comp_inner+0x44c>
    e8d0:	0002401c 	.word	0x0002401c
    e8d4:	00024218 	.word	0x00024218
    e8d8:	000241a7 	.word	0x000241a7
    e8dc:	00024173 	.word	0x00024173
    e8e0:	0002418f 	.word	0x0002418f
    e8e4:	0002415b 	.word	0x0002415b
    e8e8:	00024147 	.word	0x00024147
    e8ec:	0002411b 	.word	0x0002411b
    e8f0:	460b      	mov	r3, r1
    e8f2:	3101      	adds	r1, #1
    e8f4:	4556      	cmp	r6, sl
    e8f6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e8fa:	54e7      	strb	r7, [r4, r3]
    e8fc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    e900:	f001 804f 	beq.w	f9a2 <d_print_comp_inner+0x14ea>
    e904:	29ff      	cmp	r1, #255	; 0xff
    e906:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    e90a:	d1f1      	bne.n	e8f0 <d_print_comp_inner+0x438>
    e90c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e910:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    e914:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e918:	4620      	mov	r0, r4
    e91a:	4798      	blx	r3
    e91c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e920:	3301      	adds	r3, #1
    e922:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e926:	2101      	movs	r1, #1
    e928:	2300      	movs	r3, #0
    e92a:	e7e3      	b.n	e8f4 <d_print_comp_inner+0x43c>
    e92c:	4eb5      	ldr	r6, [pc, #724]	; (ec04 <d_print_comp_inner+0x74c>)
    e92e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    e932:	f106 0a0f 	add.w	sl, r6, #15
    e936:	f04f 0900 	mov.w	r9, #0
    e93a:	e009      	b.n	e950 <d_print_comp_inner+0x498>
    e93c:	460b      	mov	r3, r1
    e93e:	3101      	adds	r1, #1
    e940:	4556      	cmp	r6, sl
    e942:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e946:	54e7      	strb	r7, [r4, r3]
    e948:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    e94c:	f001 8022 	beq.w	f994 <d_print_comp_inner+0x14dc>
    e950:	29ff      	cmp	r1, #255	; 0xff
    e952:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    e956:	d1f1      	bne.n	e93c <d_print_comp_inner+0x484>
    e958:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e95c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    e960:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e964:	4620      	mov	r0, r4
    e966:	4798      	blx	r3
    e968:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e96c:	3301      	adds	r3, #1
    e96e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e972:	2101      	movs	r1, #1
    e974:	2300      	movs	r3, #0
    e976:	e7e3      	b.n	e940 <d_print_comp_inner+0x488>
    e978:	4ea3      	ldr	r6, [pc, #652]	; (ec08 <d_print_comp_inner+0x750>)
    e97a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    e97e:	f106 0a11 	add.w	sl, r6, #17
    e982:	f04f 0900 	mov.w	r9, #0
    e986:	e009      	b.n	e99c <d_print_comp_inner+0x4e4>
    e988:	460b      	mov	r3, r1
    e98a:	3101      	adds	r1, #1
    e98c:	4556      	cmp	r6, sl
    e98e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e992:	54e7      	strb	r7, [r4, r3]
    e994:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    e998:	f001 800a 	beq.w	f9b0 <d_print_comp_inner+0x14f8>
    e99c:	29ff      	cmp	r1, #255	; 0xff
    e99e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    e9a2:	d1f1      	bne.n	e988 <d_print_comp_inner+0x4d0>
    e9a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e9a8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    e9ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e9b0:	4620      	mov	r0, r4
    e9b2:	4798      	blx	r3
    e9b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e9b8:	3301      	adds	r3, #1
    e9ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e9be:	2101      	movs	r1, #1
    e9c0:	2300      	movs	r3, #0
    e9c2:	e7e3      	b.n	e98c <d_print_comp_inner+0x4d4>
    e9c4:	4e91      	ldr	r6, [pc, #580]	; (ec0c <d_print_comp_inner+0x754>)
    e9c6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    e9ca:	f106 0a15 	add.w	sl, r6, #21
    e9ce:	f04f 0900 	mov.w	r9, #0
    e9d2:	e009      	b.n	e9e8 <d_print_comp_inner+0x530>
    e9d4:	460b      	mov	r3, r1
    e9d6:	3101      	adds	r1, #1
    e9d8:	4556      	cmp	r6, sl
    e9da:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e9de:	54e7      	strb	r7, [r4, r3]
    e9e0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    e9e4:	f000 87b3 	beq.w	f94e <d_print_comp_inner+0x1496>
    e9e8:	29ff      	cmp	r1, #255	; 0xff
    e9ea:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    e9ee:	d1f1      	bne.n	e9d4 <d_print_comp_inner+0x51c>
    e9f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e9f4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    e9f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e9fc:	4620      	mov	r0, r4
    e9fe:	4798      	blx	r3
    ea00:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    ea04:	3301      	adds	r3, #1
    ea06:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ea0a:	2101      	movs	r1, #1
    ea0c:	2300      	movs	r3, #0
    ea0e:	e7e3      	b.n	e9d8 <d_print_comp_inner+0x520>
    ea10:	4e7f      	ldr	r6, [pc, #508]	; (ec10 <d_print_comp_inner+0x758>)
    ea12:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ea16:	f106 0a12 	add.w	sl, r6, #18
    ea1a:	f04f 0900 	mov.w	r9, #0
    ea1e:	e009      	b.n	ea34 <d_print_comp_inner+0x57c>
    ea20:	460b      	mov	r3, r1
    ea22:	3101      	adds	r1, #1
    ea24:	45b2      	cmp	sl, r6
    ea26:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ea2a:	54e7      	strb	r7, [r4, r3]
    ea2c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    ea30:	f000 879b 	beq.w	f96a <d_print_comp_inner+0x14b2>
    ea34:	29ff      	cmp	r1, #255	; 0xff
    ea36:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    ea3a:	d1f1      	bne.n	ea20 <d_print_comp_inner+0x568>
    ea3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ea40:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    ea44:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ea48:	4620      	mov	r0, r4
    ea4a:	4798      	blx	r3
    ea4c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    ea50:	3301      	adds	r3, #1
    ea52:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ea56:	2101      	movs	r1, #1
    ea58:	2300      	movs	r3, #0
    ea5a:	e7e3      	b.n	ea24 <d_print_comp_inner+0x56c>
    ea5c:	4e6d      	ldr	r6, [pc, #436]	; (ec14 <d_print_comp_inner+0x75c>)
    ea5e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ea62:	f106 0a10 	add.w	sl, r6, #16
    ea66:	f04f 0900 	mov.w	r9, #0
    ea6a:	e009      	b.n	ea80 <d_print_comp_inner+0x5c8>
    ea6c:	460b      	mov	r3, r1
    ea6e:	3101      	adds	r1, #1
    ea70:	4556      	cmp	r6, sl
    ea72:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ea76:	54e7      	strb	r7, [r4, r3]
    ea78:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    ea7c:	f000 876e 	beq.w	f95c <d_print_comp_inner+0x14a4>
    ea80:	29ff      	cmp	r1, #255	; 0xff
    ea82:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    ea86:	d1f1      	bne.n	ea6c <d_print_comp_inner+0x5b4>
    ea88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ea8c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    ea90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ea94:	4620      	mov	r0, r4
    ea96:	4798      	blx	r3
    ea98:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    ea9c:	3301      	adds	r3, #1
    ea9e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    eaa2:	2101      	movs	r1, #1
    eaa4:	2300      	movs	r3, #0
    eaa6:	e7e3      	b.n	ea70 <d_print_comp_inner+0x5b8>
    eaa8:	4e5b      	ldr	r6, [pc, #364]	; (ec18 <d_print_comp_inner+0x760>)
    eaaa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    eaae:	f106 0a0d 	add.w	sl, r6, #13
    eab2:	f04f 0900 	mov.w	r9, #0
    eab6:	e009      	b.n	eacc <d_print_comp_inner+0x614>
    eab8:	460b      	mov	r3, r1
    eaba:	3101      	adds	r1, #1
    eabc:	4556      	cmp	r6, sl
    eabe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    eac2:	54e7      	strb	r7, [r4, r3]
    eac4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    eac8:	f000 8756 	beq.w	f978 <d_print_comp_inner+0x14c0>
    eacc:	29ff      	cmp	r1, #255	; 0xff
    eace:	f816 7b01 	ldrb.w	r7, [r6], #1
    ead2:	d1f1      	bne.n	eab8 <d_print_comp_inner+0x600>
    ead4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ead8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    eadc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    eae0:	4620      	mov	r0, r4
    eae2:	4798      	blx	r3
    eae4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    eae8:	3301      	adds	r3, #1
    eaea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    eaee:	2101      	movs	r1, #1
    eaf0:	2300      	movs	r3, #0
    eaf2:	e7e3      	b.n	eabc <d_print_comp_inner+0x604>
    eaf4:	4e49      	ldr	r6, [pc, #292]	; (ec1c <d_print_comp_inner+0x764>)
    eaf6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    eafa:	f106 0a18 	add.w	sl, r6, #24
    eafe:	f04f 0900 	mov.w	r9, #0
    eb02:	e009      	b.n	eb18 <d_print_comp_inner+0x660>
    eb04:	460b      	mov	r3, r1
    eb06:	3101      	adds	r1, #1
    eb08:	45b2      	cmp	sl, r6
    eb0a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    eb0e:	54e7      	strb	r7, [r4, r3]
    eb10:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    eb14:	f000 86e3 	beq.w	f8de <d_print_comp_inner+0x1426>
    eb18:	29ff      	cmp	r1, #255	; 0xff
    eb1a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    eb1e:	d1f1      	bne.n	eb04 <d_print_comp_inner+0x64c>
    eb20:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    eb24:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    eb28:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    eb2c:	4620      	mov	r0, r4
    eb2e:	4798      	blx	r3
    eb30:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    eb34:	3301      	adds	r3, #1
    eb36:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    eb3a:	2101      	movs	r1, #1
    eb3c:	2300      	movs	r3, #0
    eb3e:	e7e3      	b.n	eb08 <d_print_comp_inner+0x650>
    eb40:	4e37      	ldr	r6, [pc, #220]	; (ec20 <d_print_comp_inner+0x768>)
    eb42:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    eb46:	f106 0a0b 	add.w	sl, r6, #11
    eb4a:	f04f 0900 	mov.w	r9, #0
    eb4e:	e009      	b.n	eb64 <d_print_comp_inner+0x6ac>
    eb50:	460b      	mov	r3, r1
    eb52:	3101      	adds	r1, #1
    eb54:	45b2      	cmp	sl, r6
    eb56:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    eb5a:	54e7      	strb	r7, [r4, r3]
    eb5c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    eb60:	f000 87ca 	beq.w	faf8 <d_print_comp_inner+0x1640>
    eb64:	29ff      	cmp	r1, #255	; 0xff
    eb66:	f816 7b01 	ldrb.w	r7, [r6], #1
    eb6a:	d1f1      	bne.n	eb50 <d_print_comp_inner+0x698>
    eb6c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    eb70:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    eb74:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    eb78:	4620      	mov	r0, r4
    eb7a:	4798      	blx	r3
    eb7c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    eb80:	3301      	adds	r3, #1
    eb82:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    eb86:	2101      	movs	r1, #1
    eb88:	2300      	movs	r3, #0
    eb8a:	e7e3      	b.n	eb54 <d_print_comp_inner+0x69c>
    eb8c:	4e25      	ldr	r6, [pc, #148]	; (ec24 <d_print_comp_inner+0x76c>)
    eb8e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    eb92:	f106 0a08 	add.w	sl, r6, #8
    eb96:	f04f 0900 	mov.w	r9, #0
    eb9a:	e009      	b.n	ebb0 <d_print_comp_inner+0x6f8>
    eb9c:	460b      	mov	r3, r1
    eb9e:	3101      	adds	r1, #1
    eba0:	45b2      	cmp	sl, r6
    eba2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    eba6:	54e7      	strb	r7, [r4, r3]
    eba8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    ebac:	f000 86c8 	beq.w	f940 <d_print_comp_inner+0x1488>
    ebb0:	29ff      	cmp	r1, #255	; 0xff
    ebb2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    ebb6:	d1f1      	bne.n	eb9c <d_print_comp_inner+0x6e4>
    ebb8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ebbc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    ebc0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ebc4:	4620      	mov	r0, r4
    ebc6:	4798      	blx	r3
    ebc8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    ebcc:	3301      	adds	r3, #1
    ebce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ebd2:	2101      	movs	r1, #1
    ebd4:	2300      	movs	r3, #0
    ebd6:	e7e3      	b.n	eba0 <d_print_comp_inner+0x6e8>
    ebd8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ebdc:	29ff      	cmp	r1, #255	; 0xff
    ebde:	f001 847c 	beq.w	104da <STACK_SIZE+0x4da>
    ebe2:	1c4a      	adds	r2, r1, #1
    ebe4:	237e      	movs	r3, #126	; 0x7e
    ebe6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    ebea:	5463      	strb	r3, [r4, r1]
    ebec:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    ebf0:	4641      	mov	r1, r8
    ebf2:	68aa      	ldr	r2, [r5, #8]
    ebf4:	4620      	mov	r0, r4
    ebf6:	f002 fa03 	bl	11000 <d_print_comp>
    ebfa:	e52b      	b.n	e654 <d_print_comp_inner+0x19c>
    ebfc:	68aa      	ldr	r2, [r5, #8]
    ebfe:	f002 f9ff 	bl	11000 <d_print_comp>
    ec02:	e527      	b.n	e654 <d_print_comp_inner+0x19c>
    ec04:	00024137 	.word	0x00024137
    ec08:	00024107 	.word	0x00024107
    ec0c:	00024103 	.word	0x00024103
    ec10:	000240db 	.word	0x000240db
    ec14:	000240ef 	.word	0x000240ef
    ec18:	000240cc 	.word	0x000240cc
    ec1c:	000240a7 	.word	0x000240a7
    ec20:	00024090 	.word	0x00024090
    ec24:	0002409b 	.word	0x0002409b
    ec28:	2200      	movs	r2, #0
    ec2a:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
    ec2e:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
    ec32:	686e      	ldr	r6, [r5, #4]
    ec34:	9300      	str	r3, [sp, #0]
    ec36:	2e00      	cmp	r6, #0
    ec38:	f000 864c 	beq.w	f8d4 <d_print_comp_inner+0x141c>
    ec3c:	f10d 0910 	add.w	r9, sp, #16
    ec40:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
    ec44:	4617      	mov	r7, r2
    ec46:	4696      	mov	lr, r2
    ec48:	464b      	mov	r3, r9
    ec4a:	7831      	ldrb	r1, [r6, #0]
    ec4c:	601a      	str	r2, [r3, #0]
    ec4e:	f1a1 021c 	sub.w	r2, r1, #28
    ec52:	2a04      	cmp	r2, #4
    ec54:	605e      	str	r6, [r3, #4]
    ec56:	f8c3 e008 	str.w	lr, [r3, #8]
    ec5a:	f8c3 c00c 	str.w	ip, [r3, #12]
    ec5e:	f107 0701 	add.w	r7, r7, #1
    ec62:	4618      	mov	r0, r3
    ec64:	461a      	mov	r2, r3
    ec66:	f240 862a 	bls.w	f8be <d_print_comp_inner+0x1406>
    ec6a:	294c      	cmp	r1, #76	; 0x4c
    ec6c:	f000 8627 	beq.w	f8be <d_print_comp_inner+0x1406>
    ec70:	2904      	cmp	r1, #4
    ec72:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    ec76:	f001 87bb 	beq.w	10bf0 <STACK_SIZE+0xbf0>
    ec7a:	2902      	cmp	r1, #2
    ec7c:	d11a      	bne.n	ecb4 <d_print_comp_inner+0x7fc>
    ec7e:	f8d6 b008 	ldr.w	fp, [r6, #8]
    ec82:	f89b 3000 	ldrb.w	r3, [fp]
    ec86:	2b46      	cmp	r3, #70	; 0x46
    ec88:	f002 8035 	beq.w	10cf6 <STACK_SIZE+0xcf6>
    ec8c:	462b      	mov	r3, r5
    ec8e:	eb09 1e07 	add.w	lr, r9, r7, lsl #4
    ec92:	9601      	str	r6, [sp, #4]
    ec94:	465d      	mov	r5, fp
    ec96:	4676      	mov	r6, lr
    ec98:	46a2      	mov	sl, r4
    ec9a:	469b      	mov	fp, r3
    ec9c:	782b      	ldrb	r3, [r5, #0]
    ec9e:	f1a3 021c 	sub.w	r2, r3, #28
    eca2:	2a04      	cmp	r2, #4
    eca4:	f241 805d 	bls.w	fd62 <d_print_comp_inner+0x18aa>
    eca8:	2b4c      	cmp	r3, #76	; 0x4c
    ecaa:	f001 805a 	beq.w	fd62 <d_print_comp_inner+0x18aa>
    ecae:	9e01      	ldr	r6, [sp, #4]
    ecb0:	4654      	mov	r4, sl
    ecb2:	465d      	mov	r5, fp
    ecb4:	68aa      	ldr	r2, [r5, #8]
    ecb6:	4641      	mov	r1, r8
    ecb8:	4620      	mov	r0, r4
    ecba:	f002 f9a1 	bl	11000 <d_print_comp>
    ecbe:	7833      	ldrb	r3, [r6, #0]
    ecc0:	2b04      	cmp	r3, #4
    ecc2:	f002 8020 	beq.w	10d06 <STACK_SIZE+0xd06>
    ecc6:	eb09 1907 	add.w	r9, r9, r7, lsl #4
    ecca:	2620      	movs	r6, #32
    eccc:	f859 5c08 	ldr.w	r5, [r9, #-8]
    ecd0:	3f01      	subs	r7, #1
    ecd2:	b985      	cbnz	r5, ecf6 <d_print_comp_inner+0x83e>
    ecd4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    ecd8:	29ff      	cmp	r1, #255	; 0xff
    ecda:	f002 8043 	beq.w	10d64 <STACK_SIZE+0xd64>
    ecde:	1c4b      	adds	r3, r1, #1
    ece0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    ece4:	f859 2c0c 	ldr.w	r2, [r9, #-12]
    ece8:	5466      	strb	r6, [r4, r1]
    ecea:	4620      	mov	r0, r4
    ecec:	4641      	mov	r1, r8
    ecee:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    ecf2:	f002 f995 	bl	11020 <d_print_mod>
    ecf6:	f1a9 0910 	sub.w	r9, r9, #16
    ecfa:	2f00      	cmp	r7, #0
    ecfc:	d1e6      	bne.n	eccc <d_print_comp_inner+0x814>
    ecfe:	9b00      	ldr	r3, [sp, #0]
    ed00:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    ed04:	e4a6      	b.n	e654 <d_print_comp_inner+0x19c>
    ed06:	4ed1      	ldr	r6, [pc, #836]	; (f04c <d_print_comp_inner+0xb94>)
    ed08:	686a      	ldr	r2, [r5, #4]
    ed0a:	f002 f979 	bl	11000 <d_print_comp>
    ed0e:	f106 0a05 	add.w	sl, r6, #5
    ed12:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    ed16:	f04f 0900 	mov.w	r9, #0
    ed1a:	e009      	b.n	ed30 <d_print_comp_inner+0x878>
    ed1c:	460b      	mov	r3, r1
    ed1e:	3101      	adds	r1, #1
    ed20:	45b2      	cmp	sl, r6
    ed22:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ed26:	54e7      	strb	r7, [r4, r3]
    ed28:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    ed2c:	f000 86d1 	beq.w	fad2 <d_print_comp_inner+0x161a>
    ed30:	29ff      	cmp	r1, #255	; 0xff
    ed32:	f816 7b01 	ldrb.w	r7, [r6], #1
    ed36:	d1f1      	bne.n	ed1c <d_print_comp_inner+0x864>
    ed38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ed3c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    ed40:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ed44:	4620      	mov	r0, r4
    ed46:	4798      	blx	r3
    ed48:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    ed4c:	3301      	adds	r3, #1
    ed4e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ed52:	2101      	movs	r1, #1
    ed54:	2300      	movs	r3, #0
    ed56:	e7e3      	b.n	ed20 <d_print_comp_inner+0x868>
    ed58:	686a      	ldr	r2, [r5, #4]
    ed5a:	f002 f951 	bl	11000 <d_print_comp>
    ed5e:	f018 0904 	ands.w	r9, r8, #4
    ed62:	f001 82aa 	beq.w	102ba <STACK_SIZE+0x2ba>
    ed66:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    ed6a:	29ff      	cmp	r1, #255	; 0xff
    ed6c:	f001 859a 	beq.w	108a4 <STACK_SIZE+0x8a4>
    ed70:	1c4a      	adds	r2, r1, #1
    ed72:	232e      	movs	r3, #46	; 0x2e
    ed74:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    ed78:	5463      	strb	r3, [r4, r1]
    ed7a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    ed7e:	68ad      	ldr	r5, [r5, #8]
    ed80:	782b      	ldrb	r3, [r5, #0]
    ed82:	2b46      	cmp	r3, #70	; 0x46
    ed84:	f001 83cc 	beq.w	10520 <STACK_SIZE+0x520>
    ed88:	462a      	mov	r2, r5
    ed8a:	4641      	mov	r1, r8
    ed8c:	4620      	mov	r0, r4
    ed8e:	f002 f937 	bl	11000 <d_print_comp>
    ed92:	e45f      	b.n	e654 <d_print_comp_inner+0x19c>
    ed94:	f011 0804 	ands.w	r8, r1, #4
    ed98:	f041 808b 	bne.w	feb2 <d_print_comp_inner+0x19fa>
    ed9c:	68af      	ldr	r7, [r5, #8]
    ed9e:	686d      	ldr	r5, [r5, #4]
    eda0:	2f00      	cmp	r7, #0
    eda2:	f43f ac57 	beq.w	e654 <d_print_comp_inner+0x19c>
    eda6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    edaa:	442f      	add	r7, r5
    edac:	e009      	b.n	edc2 <d_print_comp_inner+0x90a>
    edae:	460b      	mov	r3, r1
    edb0:	3101      	adds	r1, #1
    edb2:	42bd      	cmp	r5, r7
    edb4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    edb8:	54e6      	strb	r6, [r4, r3]
    edba:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    edbe:	f43f ac49 	beq.w	e654 <d_print_comp_inner+0x19c>
    edc2:	29ff      	cmp	r1, #255	; 0xff
    edc4:	f815 6b01 	ldrb.w	r6, [r5], #1
    edc8:	d1f1      	bne.n	edae <d_print_comp_inner+0x8f6>
    edca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    edce:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    edd2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    edd6:	4620      	mov	r0, r4
    edd8:	4798      	blx	r3
    edda:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    edde:	3301      	adds	r3, #1
    ede0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ede4:	2101      	movs	r1, #1
    ede6:	2300      	movs	r3, #0
    ede8:	e7e3      	b.n	edb2 <d_print_comp_inner+0x8fa>
    edea:	2301      	movs	r3, #1
    edec:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    edf0:	e430      	b.n	e654 <d_print_comp_inner+0x19c>
    edf2:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
    edf6:	2b00      	cmp	r3, #0
    edf8:	f041 8106 	bne.w	10008 <STACK_SIZE+0x8>
    edfc:	1d29      	adds	r1, r5, #4
    edfe:	f7fd fa97 	bl	c330 <d_lookup_template_argument.isra.6>
    ee02:	2800      	cmp	r0, #0
    ee04:	f43f ac3a 	beq.w	e67c <d_print_comp_inner+0x1c4>
    ee08:	7803      	ldrb	r3, [r0, #0]
    ee0a:	2b2f      	cmp	r3, #47	; 0x2f
    ee0c:	f001 83fc 	beq.w	10608 <STACK_SIZE+0x608>
    ee10:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
    ee14:	682b      	ldr	r3, [r5, #0]
    ee16:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    ee1a:	4602      	mov	r2, r0
    ee1c:	4641      	mov	r1, r8
    ee1e:	4620      	mov	r0, r4
    ee20:	f002 f8ee 	bl	11000 <d_print_comp>
    ee24:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    ee28:	e414      	b.n	e654 <d_print_comp_inner+0x19c>
    ee2a:	2300      	movs	r3, #0
    ee2c:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
    ee30:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
    ee34:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    ee38:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
    ee3c:	f011 0f04 	tst.w	r1, #4
    ee40:	686e      	ldr	r6, [r5, #4]
    ee42:	d005      	beq.n	ee50 <d_print_comp_inner+0x998>
    ee44:	7833      	ldrb	r3, [r6, #0]
    ee46:	b91b      	cbnz	r3, ee50 <d_print_comp_inner+0x998>
    ee48:	68b2      	ldr	r2, [r6, #8]
    ee4a:	2a06      	cmp	r2, #6
    ee4c:	f001 853c 	beq.w	108c8 <STACK_SIZE+0x8c8>
    ee50:	4632      	mov	r2, r6
    ee52:	4641      	mov	r1, r8
    ee54:	4620      	mov	r0, r4
    ee56:	f002 f8d3 	bl	11000 <d_print_comp>
    ee5a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    ee5e:	2b3c      	cmp	r3, #60	; 0x3c
    ee60:	f001 8274 	beq.w	1034c <STACK_SIZE+0x34c>
    ee64:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    ee68:	2bff      	cmp	r3, #255	; 0xff
    ee6a:	f001 8489 	beq.w	10780 <STACK_SIZE+0x780>
    ee6e:	1c59      	adds	r1, r3, #1
    ee70:	223c      	movs	r2, #60	; 0x3c
    ee72:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ee76:	54e2      	strb	r2, [r4, r3]
    ee78:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    ee7c:	4641      	mov	r1, r8
    ee7e:	68aa      	ldr	r2, [r5, #8]
    ee80:	4620      	mov	r0, r4
    ee82:	f002 f8bd 	bl	11000 <d_print_comp>
    ee86:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    ee8a:	2b3e      	cmp	r3, #62	; 0x3e
    ee8c:	f001 8239 	beq.w	10302 <STACK_SIZE+0x302>
    ee90:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    ee94:	2bff      	cmp	r3, #255	; 0xff
    ee96:	f001 8460 	beq.w	1075a <STACK_SIZE+0x75a>
    ee9a:	1c59      	adds	r1, r3, #1
    ee9c:	223e      	movs	r2, #62	; 0x3e
    ee9e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    eea2:	54e2      	strb	r2, [r4, r3]
    eea4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    eea8:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
    eeac:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
    eeb0:	f7ff bbd0 	b.w	e654 <d_print_comp_inner+0x19c>
    eeb4:	686f      	ldr	r7, [r5, #4]
    eeb6:	2f00      	cmp	r7, #0
    eeb8:	f001 8082 	beq.w	ffc0 <d_print_comp_inner+0x1b08>
    eebc:	4d64      	ldr	r5, [pc, #400]	; (f050 <d_print_comp_inner+0xb98>)
    eebe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    eec2:	f105 0906 	add.w	r9, r5, #6
    eec6:	f04f 0800 	mov.w	r8, #0
    eeca:	e009      	b.n	eee0 <d_print_comp_inner+0xa28>
    eecc:	460b      	mov	r3, r1
    eece:	3101      	adds	r1, #1
    eed0:	45a9      	cmp	r9, r5
    eed2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    eed6:	54e6      	strb	r6, [r4, r3]
    eed8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    eedc:	f000 8782 	beq.w	fde4 <d_print_comp_inner+0x192c>
    eee0:	29ff      	cmp	r1, #255	; 0xff
    eee2:	f815 6b01 	ldrb.w	r6, [r5], #1
    eee6:	d1f1      	bne.n	eecc <d_print_comp_inner+0xa14>
    eee8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    eeec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    eef0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    eef4:	4620      	mov	r0, r4
    eef6:	4798      	blx	r3
    eef8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    eefc:	3301      	adds	r3, #1
    eefe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ef02:	2101      	movs	r1, #1
    ef04:	2300      	movs	r3, #0
    ef06:	e7e3      	b.n	eed0 <d_print_comp_inner+0xa18>
    ef08:	4e52      	ldr	r6, [pc, #328]	; (f054 <d_print_comp_inner+0xb9c>)
    ef0a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ef0e:	f106 0a0a 	add.w	sl, r6, #10
    ef12:	f04f 0900 	mov.w	r9, #0
    ef16:	e009      	b.n	ef2c <d_print_comp_inner+0xa74>
    ef18:	460b      	mov	r3, r1
    ef1a:	3101      	adds	r1, #1
    ef1c:	4556      	cmp	r6, sl
    ef1e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ef22:	54e7      	strb	r7, [r4, r3]
    ef24:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    ef28:	f000 8701 	beq.w	fd2e <d_print_comp_inner+0x1876>
    ef2c:	29ff      	cmp	r1, #255	; 0xff
    ef2e:	f816 7b01 	ldrb.w	r7, [r6], #1
    ef32:	d1f1      	bne.n	ef18 <d_print_comp_inner+0xa60>
    ef34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ef38:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    ef3c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ef40:	4620      	mov	r0, r4
    ef42:	4798      	blx	r3
    ef44:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    ef48:	3301      	adds	r3, #1
    ef4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ef4e:	2101      	movs	r1, #1
    ef50:	2300      	movs	r3, #0
    ef52:	e7e3      	b.n	ef1c <d_print_comp_inner+0xa64>
    ef54:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ef58:	792d      	ldrb	r5, [r5, #4]
    ef5a:	29ff      	cmp	r1, #255	; 0xff
    ef5c:	f001 82ab 	beq.w	104b6 <STACK_SIZE+0x4b6>
    ef60:	1c4b      	adds	r3, r1, #1
    ef62:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    ef66:	5465      	strb	r5, [r4, r1]
    ef68:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    ef6c:	f7ff bb72 	b.w	e654 <d_print_comp_inner+0x19c>
    ef70:	686a      	ldr	r2, [r5, #4]
    ef72:	f002 f845 	bl	11000 <d_print_comp>
    ef76:	68aa      	ldr	r2, [r5, #8]
    ef78:	4641      	mov	r1, r8
    ef7a:	4620      	mov	r0, r4
    ef7c:	f002 f840 	bl	11000 <d_print_comp>
    ef80:	f7ff bb68 	b.w	e654 <d_print_comp_inner+0x19c>
    ef84:	4e34      	ldr	r6, [pc, #208]	; (f058 <d_print_comp_inner+0xba0>)
    ef86:	686a      	ldr	r2, [r5, #4]
    ef88:	f002 f83a 	bl	11000 <d_print_comp>
    ef8c:	f106 0a08 	add.w	sl, r6, #8
    ef90:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    ef94:	f04f 0900 	mov.w	r9, #0
    ef98:	e009      	b.n	efae <d_print_comp_inner+0xaf6>
    ef9a:	460b      	mov	r3, r1
    ef9c:	3101      	adds	r1, #1
    ef9e:	4556      	cmp	r6, sl
    efa0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    efa4:	54e7      	strb	r7, [r4, r3]
    efa6:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    efaa:	f000 8508 	beq.w	f9be <d_print_comp_inner+0x1506>
    efae:	29ff      	cmp	r1, #255	; 0xff
    efb0:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    efb4:	d1f1      	bne.n	ef9a <d_print_comp_inner+0xae2>
    efb6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    efba:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    efbe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    efc2:	4620      	mov	r0, r4
    efc4:	4798      	blx	r3
    efc6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    efca:	3301      	adds	r3, #1
    efcc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    efd0:	2101      	movs	r1, #1
    efd2:	2300      	movs	r3, #0
    efd4:	e7e3      	b.n	ef9e <d_print_comp_inner+0xae6>
    efd6:	686a      	ldr	r2, [r5, #4]
    efd8:	b10a      	cbz	r2, efde <d_print_comp_inner+0xb26>
    efda:	f002 f811 	bl	11000 <d_print_comp>
    efde:	68ab      	ldr	r3, [r5, #8]
    efe0:	2b00      	cmp	r3, #0
    efe2:	f43f ab37 	beq.w	e654 <d_print_comp_inner+0x19c>
    efe6:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
    efea:	2efd      	cmp	r6, #253	; 0xfd
    efec:	f201 81bc 	bhi.w	10368 <STACK_SIZE+0x368>
    eff0:	4f1a      	ldr	r7, [pc, #104]	; (f05c <d_print_comp_inner+0xba4>)
    eff2:	f04f 0a00 	mov.w	sl, #0
    eff6:	f107 0b02 	add.w	fp, r7, #2
    effa:	4631      	mov	r1, r6
    effc:	e009      	b.n	f012 <d_print_comp_inner+0xb5a>
    effe:	460b      	mov	r3, r1
    f000:	3101      	adds	r1, #1
    f002:	455f      	cmp	r7, fp
    f004:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    f008:	54e6      	strb	r6, [r4, r3]
    f00a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    f00e:	f000 86c1 	beq.w	fd94 <d_print_comp_inner+0x18dc>
    f012:	29ff      	cmp	r1, #255	; 0xff
    f014:	f817 6b01 	ldrb.w	r6, [r7], #1
    f018:	d1f1      	bne.n	effe <d_print_comp_inner+0xb46>
    f01a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f01e:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
    f022:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f026:	4620      	mov	r0, r4
    f028:	4798      	blx	r3
    f02a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f02e:	3301      	adds	r3, #1
    f030:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f034:	2101      	movs	r1, #1
    f036:	2300      	movs	r3, #0
    f038:	e7e3      	b.n	f002 <d_print_comp_inner+0xb4a>
    f03a:	4e09      	ldr	r6, [pc, #36]	; (f060 <d_print_comp_inner+0xba8>)
    f03c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    f040:	f106 0a09 	add.w	sl, r6, #9
    f044:	f04f 0900 	mov.w	r9, #0
    f048:	e016      	b.n	f078 <d_print_comp_inner+0xbc0>
    f04a:	bf00      	nop
    f04c:	0002405c 	.word	0x0002405c
    f050:	00024264 	.word	0x00024264
    f054:	0002424c 	.word	0x0002424c
    f058:	000242cb 	.word	0x000242cb
    f05c:	000241f0 	.word	0x000241f0
    f060:	000241ff 	.word	0x000241ff
    f064:	460b      	mov	r3, r1
    f066:	3101      	adds	r1, #1
    f068:	4556      	cmp	r6, sl
    f06a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    f06e:	54e7      	strb	r7, [r4, r3]
    f070:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    f074:	f000 8594 	beq.w	fba0 <d_print_comp_inner+0x16e8>
    f078:	29ff      	cmp	r1, #255	; 0xff
    f07a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    f07e:	d1f1      	bne.n	f064 <d_print_comp_inner+0xbac>
    f080:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f084:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    f088:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f08c:	4620      	mov	r0, r4
    f08e:	4798      	blx	r3
    f090:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f094:	3301      	adds	r3, #1
    f096:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f09a:	2101      	movs	r1, #1
    f09c:	2300      	movs	r3, #0
    f09e:	e7e3      	b.n	f068 <d_print_comp_inner+0xbb0>
    f0a0:	4ed1      	ldr	r6, [pc, #836]	; (f3e8 <d_print_comp_inner+0xf30>)
    f0a2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    f0a6:	f106 0a09 	add.w	sl, r6, #9
    f0aa:	f04f 0900 	mov.w	r9, #0
    f0ae:	e009      	b.n	f0c4 <d_print_comp_inner+0xc0c>
    f0b0:	460b      	mov	r3, r1
    f0b2:	3101      	adds	r1, #1
    f0b4:	4556      	cmp	r6, sl
    f0b6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    f0ba:	54e7      	strb	r7, [r4, r3]
    f0bc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    f0c0:	f000 8597 	beq.w	fbf2 <d_print_comp_inner+0x173a>
    f0c4:	29ff      	cmp	r1, #255	; 0xff
    f0c6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    f0ca:	d1f1      	bne.n	f0b0 <d_print_comp_inner+0xbf8>
    f0cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f0d0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    f0d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f0d8:	4620      	mov	r0, r4
    f0da:	4798      	blx	r3
    f0dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f0e0:	3301      	adds	r3, #1
    f0e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f0e6:	2101      	movs	r1, #1
    f0e8:	2300      	movs	r3, #0
    f0ea:	e7e3      	b.n	f0b4 <d_print_comp_inner+0xbfc>
    f0ec:	f8d5 a004 	ldr.w	sl, [r5, #4]
    f0f0:	4dbe      	ldr	r5, [pc, #760]	; (f3ec <d_print_comp_inner+0xf34>)
    f0f2:	f8da 7008 	ldr.w	r7, [sl, #8]
    f0f6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    f0fa:	f105 0808 	add.w	r8, r5, #8
    f0fe:	f04f 0900 	mov.w	r9, #0
    f102:	e009      	b.n	f118 <d_print_comp_inner+0xc60>
    f104:	460b      	mov	r3, r1
    f106:	3101      	adds	r1, #1
    f108:	45a8      	cmp	r8, r5
    f10a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    f10e:	54e6      	strb	r6, [r4, r3]
    f110:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    f114:	f000 8506 	beq.w	fb24 <d_print_comp_inner+0x166c>
    f118:	29ff      	cmp	r1, #255	; 0xff
    f11a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    f11e:	d1f1      	bne.n	f104 <d_print_comp_inner+0xc4c>
    f120:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f124:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    f128:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f12c:	4620      	mov	r0, r4
    f12e:	4798      	blx	r3
    f130:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f134:	3301      	adds	r3, #1
    f136:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f13a:	2101      	movs	r1, #1
    f13c:	2300      	movs	r3, #0
    f13e:	e7e3      	b.n	f108 <d_print_comp_inner+0xc50>
    f140:	686a      	ldr	r2, [r5, #4]
    f142:	68ae      	ldr	r6, [r5, #8]
    f144:	b10a      	cbz	r2, f14a <d_print_comp_inner+0xc92>
    f146:	f001 ff5b 	bl	11000 <d_print_comp>
    f14a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    f14e:	2bff      	cmp	r3, #255	; 0xff
    f150:	f001 82b1 	beq.w	106b6 <STACK_SIZE+0x6b6>
    f154:	1c5a      	adds	r2, r3, #1
    f156:	257b      	movs	r5, #123	; 0x7b
    f158:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    f15c:	4641      	mov	r1, r8
    f15e:	54e5      	strb	r5, [r4, r3]
    f160:	4632      	mov	r2, r6
    f162:	4620      	mov	r0, r4
    f164:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    f168:	f001 ff4a 	bl	11000 <d_print_comp>
    f16c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    f170:	29ff      	cmp	r1, #255	; 0xff
    f172:	f001 81e7 	beq.w	10544 <STACK_SIZE+0x544>
    f176:	1c4a      	adds	r2, r1, #1
    f178:	237d      	movs	r3, #125	; 0x7d
    f17a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    f17e:	5463      	strb	r3, [r4, r1]
    f180:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    f184:	f7ff ba66 	b.w	e654 <d_print_comp_inner+0x19c>
    f188:	f8d5 9004 	ldr.w	r9, [r5, #4]
    f18c:	68ae      	ldr	r6, [r5, #8]
    f18e:	f899 3000 	ldrb.w	r3, [r9]
    f192:	2b31      	cmp	r3, #49	; 0x31
    f194:	f000 87cb 	beq.w	1012e <STACK_SIZE+0x12e>
    f198:	2b33      	cmp	r3, #51	; 0x33
    f19a:	f041 86d3 	bne.w	10f44 <STACK_SIZE+0xf44>
    f19e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    f1a2:	29ff      	cmp	r1, #255	; 0xff
    f1a4:	f001 84c3 	beq.w	10b2e <STACK_SIZE+0xb2e>
    f1a8:	1c4a      	adds	r2, r1, #1
    f1aa:	2328      	movs	r3, #40	; 0x28
    f1ac:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    f1b0:	5463      	strb	r3, [r4, r1]
    f1b2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    f1b6:	a904      	add	r1, sp, #16
    f1b8:	f8d9 2004 	ldr.w	r2, [r9, #4]
    f1bc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    f1c0:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
    f1c4:	4620      	mov	r0, r4
    f1c6:	4641      	mov	r1, r8
    f1c8:	9305      	str	r3, [sp, #20]
    f1ca:	9204      	str	r2, [sp, #16]
    f1cc:	f7ff f974 	bl	e4b8 <d_print_comp_inner>
    f1d0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    f1d4:	9b05      	ldr	r3, [sp, #20]
    f1d6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    f1da:	29ff      	cmp	r1, #255	; 0xff
    f1dc:	f001 8496 	beq.w	10b0c <STACK_SIZE+0xb0c>
    f1e0:	2329      	movs	r3, #41	; 0x29
    f1e2:	1c4a      	adds	r2, r1, #1
    f1e4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    f1e8:	5463      	strb	r3, [r4, r1]
    f1ea:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    f1ee:	4632      	mov	r2, r6
    f1f0:	4641      	mov	r1, r8
    f1f2:	4620      	mov	r0, r4
    f1f4:	f002 fd2a 	bl	11c4c <d_print_subexpr>
    f1f8:	f7ff ba2c 	b.w	e654 <d_print_comp_inner+0x19c>
    f1fc:	686a      	ldr	r2, [r5, #4]
    f1fe:	f002 fce7 	bl	11bd0 <d_print_expr_op>
    f202:	f7ff ba27 	b.w	e654 <d_print_comp_inner+0x19c>
    f206:	f011 0f20 	tst.w	r1, #32
    f20a:	f040 8753 	bne.w	100b4 <STACK_SIZE+0xb4>
    f20e:	686a      	ldr	r2, [r5, #4]
    f210:	b11a      	cbz	r2, f21a <d_print_comp_inner+0xd62>
    f212:	f018 0340 	ands.w	r3, r8, #64	; 0x40
    f216:	f001 81d0 	beq.w	105ba <STACK_SIZE+0x5ba>
    f21a:	f028 0860 	bic.w	r8, r8, #96	; 0x60
    f21e:	f105 0208 	add.w	r2, r5, #8
    f222:	4641      	mov	r1, r8
    f224:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f228:	4620      	mov	r0, r4
    f22a:	f002 fbdd 	bl	119e8 <d_print_function_type.isra.11>
    f22e:	f7ff ba11 	b.w	e654 <d_print_comp_inner+0x19c>
    f232:	f011 0804 	ands.w	r8, r1, #4
    f236:	686b      	ldr	r3, [r5, #4]
    f238:	f040 8612 	bne.w	fe60 <d_print_comp_inner+0x19a8>
    f23c:	e893 00a0 	ldmia.w	r3, {r5, r7}
    f240:	2f00      	cmp	r7, #0
    f242:	f43f aa07 	beq.w	e654 <d_print_comp_inner+0x19c>
    f246:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    f24a:	442f      	add	r7, r5
    f24c:	e009      	b.n	f262 <d_print_comp_inner+0xdaa>
    f24e:	460b      	mov	r3, r1
    f250:	3101      	adds	r1, #1
    f252:	42bd      	cmp	r5, r7
    f254:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    f258:	54e6      	strb	r6, [r4, r3]
    f25a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    f25e:	f43f a9f9 	beq.w	e654 <d_print_comp_inner+0x19c>
    f262:	29ff      	cmp	r1, #255	; 0xff
    f264:	f815 6b01 	ldrb.w	r6, [r5], #1
    f268:	d1f1      	bne.n	f24e <d_print_comp_inner+0xd96>
    f26a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f26e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    f272:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f276:	4620      	mov	r0, r4
    f278:	4798      	blx	r3
    f27a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f27e:	3301      	adds	r3, #1
    f280:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f284:	2101      	movs	r1, #1
    f286:	2300      	movs	r3, #0
    f288:	e7e3      	b.n	f252 <d_print_comp_inner+0xd9a>
    f28a:	6869      	ldr	r1, [r5, #4]
    f28c:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
    f290:	780b      	ldrb	r3, [r1, #0]
    f292:	2f00      	cmp	r7, #0
    f294:	f040 85e1 	bne.w	fe5a <d_print_comp_inner+0x19a2>
    f298:	2b05      	cmp	r3, #5
    f29a:	f001 81c7 	beq.w	1062c <STACK_SIZE+0x62c>
    f29e:	2b23      	cmp	r3, #35	; 0x23
    f2a0:	f000 8689 	beq.w	ffb6 <d_print_comp_inner+0x1afe>
    f2a4:	782a      	ldrb	r2, [r5, #0]
    f2a6:	429a      	cmp	r2, r3
    f2a8:	f000 8685 	beq.w	ffb6 <d_print_comp_inner+0x1afe>
    f2ac:	2b24      	cmp	r3, #36	; 0x24
    f2ae:	f47f a9eb 	bne.w	e688 <d_print_comp_inner+0x1d0>
    f2b2:	a814      	add	r0, sp, #80	; 0x50
    f2b4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f2b8:	684a      	ldr	r2, [r1, #4]
    f2ba:	f840 3d40 	str.w	r3, [r0, #-64]!
    f2be:	2100      	movs	r1, #0
    f2c0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    f2c4:	9505      	str	r5, [sp, #20]
    f2c6:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
    f2ca:	9106      	str	r1, [sp, #24]
    f2cc:	9307      	str	r3, [sp, #28]
    f2ce:	2a00      	cmp	r2, #0
    f2d0:	f47f a9e8 	bne.w	e6a4 <d_print_comp_inner+0x1ec>
    f2d4:	f7ff b9e5 	b.w	e6a2 <d_print_comp_inner+0x1ea>
    f2d8:	686a      	ldr	r2, [r5, #4]
    f2da:	f001 fe91 	bl	11000 <d_print_comp>
    f2de:	f7ff b9b9 	b.w	e654 <d_print_comp_inner+0x19c>
    f2e2:	ab14      	add	r3, sp, #80	; 0x50
    f2e4:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    f2e8:	f843 2d40 	str.w	r2, [r3, #-64]!
    f2ec:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    f2f0:	68aa      	ldr	r2, [r5, #8]
    f2f2:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    f2f6:	9307      	str	r3, [sp, #28]
    f2f8:	2600      	movs	r6, #0
    f2fa:	9505      	str	r5, [sp, #20]
    f2fc:	9606      	str	r6, [sp, #24]
    f2fe:	f001 fe7f 	bl	11000 <d_print_comp>
    f302:	9b06      	ldr	r3, [sp, #24]
    f304:	b923      	cbnz	r3, f310 <d_print_comp_inner+0xe58>
    f306:	462a      	mov	r2, r5
    f308:	4641      	mov	r1, r8
    f30a:	4620      	mov	r0, r4
    f30c:	f001 fe88 	bl	11020 <d_print_mod>
    f310:	9b04      	ldr	r3, [sp, #16]
    f312:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    f316:	f7ff b99d 	b.w	e654 <d_print_comp_inner+0x19c>
    f31a:	f10d 0950 	add.w	r9, sp, #80	; 0x50
    f31e:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
    f322:	f849 bd40 	str.w	fp, [r9, #-64]!
    f326:	2200      	movs	r2, #0
    f328:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    f32c:	f8cd b000 	str.w	fp, [sp]
    f330:	4659      	mov	r1, fp
    f332:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
    f336:	9505      	str	r5, [sp, #20]
    f338:	9206      	str	r2, [sp, #24]
    f33a:	9307      	str	r3, [sp, #28]
    f33c:	2900      	cmp	r1, #0
    f33e:	f001 83a0 	beq.w	10a82 <STACK_SIZE+0xa82>
    f342:	684b      	ldr	r3, [r1, #4]
    f344:	781b      	ldrb	r3, [r3, #0]
    f346:	3b19      	subs	r3, #25
    f348:	2b02      	cmp	r3, #2
    f34a:	f201 839a 	bhi.w	10a82 <STACK_SIZE+0xa82>
    f34e:	46ac      	mov	ip, r5
    f350:	2701      	movs	r7, #1
    f352:	460e      	mov	r6, r1
    f354:	464d      	mov	r5, r9
    f356:	e004      	b.n	f362 <d_print_comp_inner+0xeaa>
    f358:	6873      	ldr	r3, [r6, #4]
    f35a:	781b      	ldrb	r3, [r3, #0]
    f35c:	3b19      	subs	r3, #25
    f35e:	2b02      	cmp	r3, #2
    f360:	d81b      	bhi.n	f39a <d_print_comp_inner+0xee2>
    f362:	68b3      	ldr	r3, [r6, #8]
    f364:	ea4f 1e07 	mov.w	lr, r7, lsl #4
    f368:	aa14      	add	r2, sp, #80	; 0x50
    f36a:	eb02 0b0e 	add.w	fp, r2, lr
    f36e:	b98b      	cbnz	r3, f394 <d_print_comp_inner+0xedc>
    f370:	2f03      	cmp	r7, #3
    f372:	f201 80f9 	bhi.w	10568 <STACK_SIZE+0x568>
    f376:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    f37a:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
    f37e:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
    f382:	f84b 5c40 	str.w	r5, [fp, #-64]
    f386:	2301      	movs	r3, #1
    f388:	eb09 050e 	add.w	r5, r9, lr
    f38c:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    f390:	3701      	adds	r7, #1
    f392:	60b3      	str	r3, [r6, #8]
    f394:	6836      	ldr	r6, [r6, #0]
    f396:	2e00      	cmp	r6, #0
    f398:	d1de      	bne.n	f358 <d_print_comp_inner+0xea0>
    f39a:	f8dc 2008 	ldr.w	r2, [ip, #8]
    f39e:	4641      	mov	r1, r8
    f3a0:	4620      	mov	r0, r4
    f3a2:	4665      	mov	r5, ip
    f3a4:	f001 fe2c 	bl	11000 <d_print_comp>
    f3a8:	9b06      	ldr	r3, [sp, #24]
    f3aa:	9a00      	ldr	r2, [sp, #0]
    f3ac:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
    f3b0:	2b00      	cmp	r3, #0
    f3b2:	f47f a94f 	bne.w	e654 <d_print_comp_inner+0x19c>
    f3b6:	2f01      	cmp	r7, #1
    f3b8:	d00c      	beq.n	f3d4 <d_print_comp_inner+0xf1c>
    f3ba:	eb09 1907 	add.w	r9, r9, r7, lsl #4
    f3be:	f859 2c0c 	ldr.w	r2, [r9, #-12]
    f3c2:	3f01      	subs	r7, #1
    f3c4:	4641      	mov	r1, r8
    f3c6:	4620      	mov	r0, r4
    f3c8:	f001 fe2a 	bl	11020 <d_print_mod>
    f3cc:	2f01      	cmp	r7, #1
    f3ce:	f1a9 0910 	sub.w	r9, r9, #16
    f3d2:	d1f4      	bne.n	f3be <d_print_comp_inner+0xf06>
    f3d4:	1d2a      	adds	r2, r5, #4
    f3d6:	4641      	mov	r1, r8
    f3d8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f3dc:	4620      	mov	r0, r4
    f3de:	f002 fa27 	bl	11830 <d_print_array_type.isra.10>
    f3e2:	f7ff b937 	b.w	e654 <d_print_comp_inner+0x19c>
    f3e6:	bf00      	nop
    f3e8:	000241ff 	.word	0x000241ff
    f3ec:	000241f3 	.word	0x000241f3
    f3f0:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
    f3f4:	2b00      	cmp	r3, #0
    f3f6:	f040 8674 	bne.w	100e2 <STACK_SIZE+0xe2>
    f3fa:	686a      	ldr	r2, [r5, #4]
    f3fc:	4bd5      	ldr	r3, [pc, #852]	; (f754 <d_print_comp_inner+0x129c>)
    f3fe:	6851      	ldr	r1, [r2, #4]
    f400:	4299      	cmp	r1, r3
    f402:	f000 866a 	beq.w	100da <STACK_SIZE+0xda>
    f406:	4641      	mov	r1, r8
    f408:	4620      	mov	r0, r4
    f40a:	f001 fdf9 	bl	11000 <d_print_comp>
    f40e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    f412:	2bff      	cmp	r3, #255	; 0xff
    f414:	f001 82b2 	beq.w	1097c <STACK_SIZE+0x97c>
    f418:	1c59      	adds	r1, r3, #1
    f41a:	2220      	movs	r2, #32
    f41c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    f420:	54e2      	strb	r2, [r4, r3]
    f422:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    f426:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
    f42a:	2b00      	cmp	r3, #0
    f42c:	f000 8595 	beq.w	ff5a <d_print_comp_inner+0x1aa2>
    f430:	4dc9      	ldr	r5, [pc, #804]	; (f758 <d_print_comp_inner+0x12a0>)
    f432:	f04f 0800 	mov.w	r8, #0
    f436:	1daf      	adds	r7, r5, #6
    f438:	e009      	b.n	f44e <d_print_comp_inner+0xf96>
    f43a:	460b      	mov	r3, r1
    f43c:	3101      	adds	r1, #1
    f43e:	42bd      	cmp	r5, r7
    f440:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    f444:	54e6      	strb	r6, [r4, r3]
    f446:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    f44a:	f43f a903 	beq.w	e654 <d_print_comp_inner+0x19c>
    f44e:	29ff      	cmp	r1, #255	; 0xff
    f450:	f815 6b01 	ldrb.w	r6, [r5], #1
    f454:	d1f1      	bne.n	f43a <d_print_comp_inner+0xf82>
    f456:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f45a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    f45e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f462:	4620      	mov	r0, r4
    f464:	4798      	blx	r3
    f466:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f46a:	3301      	adds	r3, #1
    f46c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f470:	2101      	movs	r1, #1
    f472:	2300      	movs	r3, #0
    f474:	e7e3      	b.n	f43e <d_print_comp_inner+0xf86>
    f476:	4eb9      	ldr	r6, [pc, #740]	; (f75c <d_print_comp_inner+0x12a4>)
    f478:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    f47c:	f106 090e 	add.w	r9, r6, #14
    f480:	f04f 0800 	mov.w	r8, #0
    f484:	e009      	b.n	f49a <d_print_comp_inner+0xfe2>
    f486:	460b      	mov	r3, r1
    f488:	3101      	adds	r1, #1
    f48a:	45b1      	cmp	r9, r6
    f48c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    f490:	54e7      	strb	r7, [r4, r3]
    f492:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    f496:	f000 83b3 	beq.w	fc00 <d_print_comp_inner+0x1748>
    f49a:	29ff      	cmp	r1, #255	; 0xff
    f49c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    f4a0:	d1f1      	bne.n	f486 <d_print_comp_inner+0xfce>
    f4a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f4a6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    f4aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f4ae:	4620      	mov	r0, r4
    f4b0:	4798      	blx	r3
    f4b2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f4b6:	3301      	adds	r3, #1
    f4b8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f4bc:	2101      	movs	r1, #1
    f4be:	2300      	movs	r3, #0
    f4c0:	e7e3      	b.n	f48a <d_print_comp_inner+0xfd2>
    f4c2:	4ea7      	ldr	r6, [pc, #668]	; (f760 <d_print_comp_inner+0x12a8>)
    f4c4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    f4c8:	f106 0a1a 	add.w	sl, r6, #26
    f4cc:	f04f 0900 	mov.w	r9, #0
    f4d0:	e009      	b.n	f4e6 <d_print_comp_inner+0x102e>
    f4d2:	460b      	mov	r3, r1
    f4d4:	3101      	adds	r1, #1
    f4d6:	4556      	cmp	r6, sl
    f4d8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    f4dc:	54e7      	strb	r7, [r4, r3]
    f4de:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    f4e2:	f000 82ef 	beq.w	fac4 <d_print_comp_inner+0x160c>
    f4e6:	29ff      	cmp	r1, #255	; 0xff
    f4e8:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    f4ec:	d1f1      	bne.n	f4d2 <d_print_comp_inner+0x101a>
    f4ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f4f2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    f4f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f4fa:	4620      	mov	r0, r4
    f4fc:	4798      	blx	r3
    f4fe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f502:	3301      	adds	r3, #1
    f504:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f508:	2101      	movs	r1, #1
    f50a:	2300      	movs	r3, #0
    f50c:	e7e3      	b.n	f4d6 <d_print_comp_inner+0x101e>
    f50e:	6869      	ldr	r1, [r5, #4]
    f510:	f7fc ff2a 	bl	c368 <d_find_pack>
    f514:	f04f 0900 	mov.w	r9, #0
    f518:	2800      	cmp	r0, #0
    f51a:	f001 835d 	beq.w	10bd8 <STACK_SIZE+0xbd8>
    f51e:	7803      	ldrb	r3, [r0, #0]
    f520:	2b2f      	cmp	r3, #47	; 0x2f
    f522:	f040 8457 	bne.w	fdd4 <d_print_comp_inner+0x191c>
    f526:	6843      	ldr	r3, [r0, #4]
    f528:	2b00      	cmp	r3, #0
    f52a:	f000 8453 	beq.w	fdd4 <d_print_comp_inner+0x191c>
    f52e:	6880      	ldr	r0, [r0, #8]
    f530:	f109 0901 	add.w	r9, r9, #1
    f534:	2800      	cmp	r0, #0
    f536:	d1f2      	bne.n	f51e <d_print_comp_inner+0x1066>
    f538:	686b      	ldr	r3, [r5, #4]
    f53a:	9300      	str	r3, [sp, #0]
    f53c:	f109 33ff 	add.w	r3, r9, #4294967295
    f540:	9301      	str	r3, [sp, #4]
    f542:	f04f 0a00 	mov.w	sl, #0
    f546:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
    f54a:	9a00      	ldr	r2, [sp, #0]
    f54c:	4641      	mov	r1, r8
    f54e:	4620      	mov	r0, r4
    f550:	f001 fd56 	bl	11000 <d_print_comp>
    f554:	9b01      	ldr	r3, [sp, #4]
    f556:	42bb      	cmp	r3, r7
    f558:	f340 81ab 	ble.w	f8b2 <d_print_comp_inner+0x13fa>
    f55c:	4d81      	ldr	r5, [pc, #516]	; (f764 <d_print_comp_inner+0x12ac>)
    f55e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    f562:	f105 0b02 	add.w	fp, r5, #2
    f566:	e009      	b.n	f57c <d_print_comp_inner+0x10c4>
    f568:	460b      	mov	r3, r1
    f56a:	3101      	adds	r1, #1
    f56c:	45ab      	cmp	fp, r5
    f56e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    f572:	54e6      	strb	r6, [r4, r3]
    f574:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    f578:	f000 819b 	beq.w	f8b2 <d_print_comp_inner+0x13fa>
    f57c:	29ff      	cmp	r1, #255	; 0xff
    f57e:	f815 6b01 	ldrb.w	r6, [r5], #1
    f582:	d1f1      	bne.n	f568 <d_print_comp_inner+0x10b0>
    f584:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f588:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
    f58c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f590:	4620      	mov	r0, r4
    f592:	4798      	blx	r3
    f594:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f598:	3301      	adds	r3, #1
    f59a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f59e:	2101      	movs	r1, #1
    f5a0:	2300      	movs	r3, #0
    f5a2:	e7e3      	b.n	f56c <d_print_comp_inner+0x10b4>
    f5a4:	4e70      	ldr	r6, [pc, #448]	; (f768 <d_print_comp_inner+0x12b0>)
    f5a6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    f5aa:	f106 0a16 	add.w	sl, r6, #22
    f5ae:	f04f 0900 	mov.w	r9, #0
    f5b2:	e009      	b.n	f5c8 <d_print_comp_inner+0x1110>
    f5b4:	460b      	mov	r3, r1
    f5b6:	3101      	adds	r1, #1
    f5b8:	45b2      	cmp	sl, r6
    f5ba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    f5be:	54e7      	strb	r7, [r4, r3]
    f5c0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    f5c4:	f000 835f 	beq.w	fc86 <d_print_comp_inner+0x17ce>
    f5c8:	29ff      	cmp	r1, #255	; 0xff
    f5ca:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    f5ce:	d1f1      	bne.n	f5b4 <d_print_comp_inner+0x10fc>
    f5d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f5d4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    f5d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f5dc:	4620      	mov	r0, r4
    f5de:	4798      	blx	r3
    f5e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f5e4:	3301      	adds	r3, #1
    f5e6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f5ea:	2101      	movs	r1, #1
    f5ec:	2300      	movs	r3, #0
    f5ee:	e7e3      	b.n	f5b8 <d_print_comp_inner+0x1100>
    f5f0:	4e5e      	ldr	r6, [pc, #376]	; (f76c <d_print_comp_inner+0x12b4>)
    f5f2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    f5f6:	f106 0a0e 	add.w	sl, r6, #14
    f5fa:	f04f 0900 	mov.w	r9, #0
    f5fe:	e009      	b.n	f614 <d_print_comp_inner+0x115c>
    f600:	460b      	mov	r3, r1
    f602:	3101      	adds	r1, #1
    f604:	4556      	cmp	r6, sl
    f606:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    f60a:	54e7      	strb	r7, [r4, r3]
    f60c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    f610:	f000 83a0 	beq.w	fd54 <d_print_comp_inner+0x189c>
    f614:	29ff      	cmp	r1, #255	; 0xff
    f616:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    f61a:	d1f1      	bne.n	f600 <d_print_comp_inner+0x1148>
    f61c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f620:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    f624:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f628:	4620      	mov	r0, r4
    f62a:	4798      	blx	r3
    f62c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f630:	3301      	adds	r3, #1
    f632:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f636:	2101      	movs	r1, #1
    f638:	2300      	movs	r3, #0
    f63a:	e7e3      	b.n	f604 <d_print_comp_inner+0x114c>
    f63c:	686a      	ldr	r2, [r5, #4]
    f63e:	7811      	ldrb	r1, [r2, #0]
    f640:	2927      	cmp	r1, #39	; 0x27
    f642:	f000 8615 	beq.w	10270 <STACK_SIZE+0x270>
    f646:	2600      	movs	r6, #0
    f648:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    f64c:	29ff      	cmp	r1, #255	; 0xff
    f64e:	f001 80c5 	beq.w	107dc <STACK_SIZE+0x7dc>
    f652:	2328      	movs	r3, #40	; 0x28
    f654:	1c4a      	adds	r2, r1, #1
    f656:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    f65a:	5463      	strb	r3, [r4, r1]
    f65c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    f660:	686a      	ldr	r2, [r5, #4]
    f662:	4641      	mov	r1, r8
    f664:	4620      	mov	r0, r4
    f666:	f001 fccb 	bl	11000 <d_print_comp>
    f66a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    f66e:	2bff      	cmp	r3, #255	; 0xff
    f670:	f001 8099 	beq.w	107a6 <STACK_SIZE+0x7a6>
    f674:	1c59      	adds	r1, r3, #1
    f676:	2229      	movs	r2, #41	; 0x29
    f678:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    f67c:	54e2      	strb	r2, [r4, r3]
    f67e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    f682:	782b      	ldrb	r3, [r5, #0]
    f684:	2b3d      	cmp	r3, #61	; 0x3d
    f686:	f000 86e6 	beq.w	10456 <STACK_SIZE+0x456>
    f68a:	2e08      	cmp	r6, #8
    f68c:	f000 867f 	beq.w	1038e <STACK_SIZE+0x38e>
    f690:	68aa      	ldr	r2, [r5, #8]
    f692:	4641      	mov	r1, r8
    f694:	4620      	mov	r0, r4
    f696:	f001 fcb3 	bl	11000 <d_print_comp>
    f69a:	f7fe bfdb 	b.w	e654 <d_print_comp_inner+0x19c>
    f69e:	2301      	movs	r3, #1
    f6a0:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    f6a4:	f7fe bfd6 	b.w	e654 <d_print_comp_inner+0x19c>
    f6a8:	686a      	ldr	r2, [r5, #4]
    f6aa:	4931      	ldr	r1, [pc, #196]	; (f770 <d_print_comp_inner+0x12b8>)
    f6ac:	a804      	add	r0, sp, #16
    f6ae:	f006 fcb9 	bl	16024 <sprintf>
    f6b2:	a804      	add	r0, sp, #16
    f6b4:	f007 f884 	bl	167c0 <strlen>
    f6b8:	2800      	cmp	r0, #0
    f6ba:	f43e afcb 	beq.w	e654 <d_print_comp_inner+0x19c>
    f6be:	ad04      	add	r5, sp, #16
    f6c0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    f6c4:	182f      	adds	r7, r5, r0
    f6c6:	f04f 0800 	mov.w	r8, #0
    f6ca:	e009      	b.n	f6e0 <d_print_comp_inner+0x1228>
    f6cc:	460b      	mov	r3, r1
    f6ce:	3101      	adds	r1, #1
    f6d0:	42bd      	cmp	r5, r7
    f6d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    f6d6:	54e6      	strb	r6, [r4, r3]
    f6d8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    f6dc:	f43e afba 	beq.w	e654 <d_print_comp_inner+0x19c>
    f6e0:	29ff      	cmp	r1, #255	; 0xff
    f6e2:	f815 6b01 	ldrb.w	r6, [r5], #1
    f6e6:	d1f1      	bne.n	f6cc <d_print_comp_inner+0x1214>
    f6e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f6ec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    f6f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f6f4:	4620      	mov	r0, r4
    f6f6:	4798      	blx	r3
    f6f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f6fc:	3301      	adds	r3, #1
    f6fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f702:	2101      	movs	r1, #1
    f704:	2300      	movs	r3, #0
    f706:	e7e3      	b.n	f6d0 <d_print_comp_inner+0x1218>
    f708:	4e1a      	ldr	r6, [pc, #104]	; (f774 <d_print_comp_inner+0x12bc>)
    f70a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    f70e:	f106 0a1c 	add.w	sl, r6, #28
    f712:	f04f 0900 	mov.w	r9, #0
    f716:	e009      	b.n	f72c <d_print_comp_inner+0x1274>
    f718:	460b      	mov	r3, r1
    f71a:	3101      	adds	r1, #1
    f71c:	4556      	cmp	r6, sl
    f71e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    f722:	54e7      	strb	r7, [r4, r3]
    f724:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    f728:	f000 82fa 	beq.w	fd20 <d_print_comp_inner+0x1868>
    f72c:	29ff      	cmp	r1, #255	; 0xff
    f72e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    f732:	d1f1      	bne.n	f718 <d_print_comp_inner+0x1260>
    f734:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f738:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    f73c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f740:	4620      	mov	r0, r4
    f742:	4798      	blx	r3
    f744:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f748:	3301      	adds	r3, #1
    f74a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f74e:	2101      	movs	r1, #1
    f750:	2300      	movs	r3, #0
    f752:	e7e3      	b.n	f71c <d_print_comp_inner+0x1264>
    f754:	000239c0 	.word	0x000239c0
    f758:	000241e0 	.word	0x000241e0
    f75c:	000242bb 	.word	0x000242bb
    f760:	000241bb 	.word	0x000241bb
    f764:	000241f0 	.word	0x000241f0
    f768:	000241bf 	.word	0x000241bf
    f76c:	0002423b 	.word	0x0002423b
    f770:	00023004 	.word	0x00023004
    f774:	0002428b 	.word	0x0002428b
    f778:	68ab      	ldr	r3, [r5, #8]
    f77a:	781a      	ldrb	r2, [r3, #0]
    f77c:	2a3a      	cmp	r2, #58	; 0x3a
    f77e:	f47e af7d 	bne.w	e67c <d_print_comp_inner+0x1c4>
    f782:	689b      	ldr	r3, [r3, #8]
    f784:	781b      	ldrb	r3, [r3, #0]
    f786:	2b3b      	cmp	r3, #59	; 0x3b
    f788:	f47e af78 	bne.w	e67c <d_print_comp_inner+0x1c4>
    f78c:	f105 0308 	add.w	r3, r5, #8
    f790:	686a      	ldr	r2, [r5, #4]
    f792:	f002 fabf 	bl	11d14 <d_maybe_print_fold_expression.isra.15>
    f796:	4606      	mov	r6, r0
    f798:	2800      	cmp	r0, #0
    f79a:	f47e af5b 	bne.w	e654 <d_print_comp_inner+0x19c>
    f79e:	f8d5 a004 	ldr.w	sl, [r5, #4]
    f7a2:	68aa      	ldr	r2, [r5, #8]
    f7a4:	f8da 1004 	ldr.w	r1, [sl, #4]
    f7a8:	6893      	ldr	r3, [r2, #8]
    f7aa:	6808      	ldr	r0, [r1, #0]
    f7ac:	49d6      	ldr	r1, [pc, #856]	; (fb08 <d_print_comp_inner+0x1650>)
    f7ae:	f8d2 9004 	ldr.w	r9, [r2, #4]
    f7b2:	685f      	ldr	r7, [r3, #4]
    f7b4:	689d      	ldr	r5, [r3, #8]
    f7b6:	f006 fca7 	bl	16108 <strcmp>
    f7ba:	2800      	cmp	r0, #0
    f7bc:	f001 82e2 	beq.w	10d84 <STACK_SIZE+0xd84>
    f7c0:	2204      	movs	r2, #4
    f7c2:	49d2      	ldr	r1, [pc, #840]	; (fb0c <d_print_comp_inner+0x1654>)
    f7c4:	4620      	mov	r0, r4
    f7c6:	f7fc fba3 	bl	bf10 <d_append_buffer>
    f7ca:	f8d9 3004 	ldr.w	r3, [r9, #4]
    f7ce:	b183      	cbz	r3, f7f2 <d_print_comp_inner+0x133a>
    f7d0:	4641      	mov	r1, r8
    f7d2:	464a      	mov	r2, r9
    f7d4:	4620      	mov	r0, r4
    f7d6:	f002 fa39 	bl	11c4c <d_print_subexpr>
    f7da:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    f7de:	29ff      	cmp	r1, #255	; 0xff
    f7e0:	f001 83ec 	beq.w	10fbc <STACK_SIZE+0xfbc>
    f7e4:	2320      	movs	r3, #32
    f7e6:	1c4a      	adds	r2, r1, #1
    f7e8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    f7ec:	5463      	strb	r3, [r4, r1]
    f7ee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    f7f2:	463a      	mov	r2, r7
    f7f4:	4641      	mov	r1, r8
    f7f6:	4620      	mov	r0, r4
    f7f8:	f001 fc02 	bl	11000 <d_print_comp>
    f7fc:	2d00      	cmp	r5, #0
    f7fe:	f43e af29 	beq.w	e654 <d_print_comp_inner+0x19c>
    f802:	462a      	mov	r2, r5
    f804:	4641      	mov	r1, r8
    f806:	4620      	mov	r0, r4
    f808:	f002 fa20 	bl	11c4c <d_print_subexpr>
    f80c:	f7fe bf22 	b.w	e654 <d_print_comp_inner+0x19c>
    f810:	4ebf      	ldr	r6, [pc, #764]	; (fb10 <d_print_comp_inner+0x1658>)
    f812:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    f816:	f106 0a08 	add.w	sl, r6, #8
    f81a:	f04f 0900 	mov.w	r9, #0
    f81e:	e009      	b.n	f834 <d_print_comp_inner+0x137c>
    f820:	460b      	mov	r3, r1
    f822:	3101      	adds	r1, #1
    f824:	4556      	cmp	r6, sl
    f826:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    f82a:	54e7      	strb	r7, [r4, r3]
    f82c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    f830:	f000 80d8 	beq.w	f9e4 <d_print_comp_inner+0x152c>
    f834:	29ff      	cmp	r1, #255	; 0xff
    f836:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    f83a:	d1f1      	bne.n	f820 <d_print_comp_inner+0x1368>
    f83c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f840:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    f844:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f848:	4620      	mov	r0, r4
    f84a:	4798      	blx	r3
    f84c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f850:	3301      	adds	r3, #1
    f852:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f856:	2101      	movs	r1, #1
    f858:	2300      	movs	r3, #0
    f85a:	e7e3      	b.n	f824 <d_print_comp_inner+0x136c>
    f85c:	4ead      	ldr	r6, [pc, #692]	; (fb14 <d_print_comp_inner+0x165c>)
    f85e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    f862:	f106 0a1d 	add.w	sl, r6, #29
    f866:	f04f 0900 	mov.w	r9, #0
    f86a:	e009      	b.n	f880 <d_print_comp_inner+0x13c8>
    f86c:	460b      	mov	r3, r1
    f86e:	3101      	adds	r1, #1
    f870:	45b2      	cmp	sl, r6
    f872:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    f876:	54e7      	strb	r7, [r4, r3]
    f878:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    f87c:	f000 81fc 	beq.w	fc78 <d_print_comp_inner+0x17c0>
    f880:	29ff      	cmp	r1, #255	; 0xff
    f882:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    f886:	d1f1      	bne.n	f86c <d_print_comp_inner+0x13b4>
    f888:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f88c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    f890:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f894:	4620      	mov	r0, r4
    f896:	4798      	blx	r3
    f898:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f89c:	3301      	adds	r3, #1
    f89e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f8a2:	2101      	movs	r1, #1
    f8a4:	2300      	movs	r3, #0
    f8a6:	e7e3      	b.n	f870 <d_print_comp_inner+0x13b8>
    f8a8:	2301      	movs	r3, #1
    f8aa:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    f8ae:	f7fe bed1 	b.w	e654 <d_print_comp_inner+0x19c>
    f8b2:	3701      	adds	r7, #1
    f8b4:	454f      	cmp	r7, r9
    f8b6:	f47f ae46 	bne.w	f546 <d_print_comp_inner+0x108e>
    f8ba:	f7fe becb 	b.w	e654 <d_print_comp_inner+0x19c>
    f8be:	6876      	ldr	r6, [r6, #4]
    f8c0:	2e00      	cmp	r6, #0
    f8c2:	f001 806e 	beq.w	109a2 <STACK_SIZE+0x9a2>
    f8c6:	2f04      	cmp	r7, #4
    f8c8:	f103 0310 	add.w	r3, r3, #16
    f8cc:	f47f a9bd 	bne.w	ec4a <d_print_comp_inner+0x792>
    f8d0:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
    f8d4:	2301      	movs	r3, #1
    f8d6:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    f8da:	f7fe bebb 	b.w	e654 <d_print_comp_inner+0x19c>
    f8de:	4e8e      	ldr	r6, [pc, #568]	; (fb18 <d_print_comp_inner+0x1660>)
    f8e0:	686a      	ldr	r2, [r5, #4]
    f8e2:	4641      	mov	r1, r8
    f8e4:	4620      	mov	r0, r4
    f8e6:	f001 fb8b 	bl	11000 <d_print_comp>
    f8ea:	f106 0a04 	add.w	sl, r6, #4
    f8ee:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    f8f2:	f04f 0900 	mov.w	r9, #0
    f8f6:	e008      	b.n	f90a <d_print_comp_inner+0x1452>
    f8f8:	460b      	mov	r3, r1
    f8fa:	3101      	adds	r1, #1
    f8fc:	45b2      	cmp	sl, r6
    f8fe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    f902:	54e7      	strb	r7, [r4, r3]
    f904:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    f908:	d013      	beq.n	f932 <d_print_comp_inner+0x147a>
    f90a:	29ff      	cmp	r1, #255	; 0xff
    f90c:	f816 7b01 	ldrb.w	r7, [r6], #1
    f910:	d1f2      	bne.n	f8f8 <d_print_comp_inner+0x1440>
    f912:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f916:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    f91a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f91e:	4620      	mov	r0, r4
    f920:	4798      	blx	r3
    f922:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f926:	3301      	adds	r3, #1
    f928:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f92c:	2101      	movs	r1, #1
    f92e:	2300      	movs	r3, #0
    f930:	e7e4      	b.n	f8fc <d_print_comp_inner+0x1444>
    f932:	68aa      	ldr	r2, [r5, #8]
    f934:	4641      	mov	r1, r8
    f936:	4620      	mov	r0, r4
    f938:	f001 fb62 	bl	11000 <d_print_comp>
    f93c:	f7fe be8a 	b.w	e654 <d_print_comp_inner+0x19c>
    f940:	686a      	ldr	r2, [r5, #4]
    f942:	4641      	mov	r1, r8
    f944:	4620      	mov	r0, r4
    f946:	f001 fb5b 	bl	11000 <d_print_comp>
    f94a:	f7fe be83 	b.w	e654 <d_print_comp_inner+0x19c>
    f94e:	686a      	ldr	r2, [r5, #4]
    f950:	4641      	mov	r1, r8
    f952:	4620      	mov	r0, r4
    f954:	f001 fb54 	bl	11000 <d_print_comp>
    f958:	f7fe be7c 	b.w	e654 <d_print_comp_inner+0x19c>
    f95c:	686a      	ldr	r2, [r5, #4]
    f95e:	4641      	mov	r1, r8
    f960:	4620      	mov	r0, r4
    f962:	f001 fb4d 	bl	11000 <d_print_comp>
    f966:	f7fe be75 	b.w	e654 <d_print_comp_inner+0x19c>
    f96a:	686a      	ldr	r2, [r5, #4]
    f96c:	4641      	mov	r1, r8
    f96e:	4620      	mov	r0, r4
    f970:	f001 fb46 	bl	11000 <d_print_comp>
    f974:	f7fe be6e 	b.w	e654 <d_print_comp_inner+0x19c>
    f978:	686a      	ldr	r2, [r5, #4]
    f97a:	4641      	mov	r1, r8
    f97c:	4620      	mov	r0, r4
    f97e:	f001 fb3f 	bl	11000 <d_print_comp>
    f982:	f7fe be67 	b.w	e654 <d_print_comp_inner+0x19c>
    f986:	686a      	ldr	r2, [r5, #4]
    f988:	4641      	mov	r1, r8
    f98a:	4620      	mov	r0, r4
    f98c:	f001 fb38 	bl	11000 <d_print_comp>
    f990:	f7fe be60 	b.w	e654 <d_print_comp_inner+0x19c>
    f994:	686a      	ldr	r2, [r5, #4]
    f996:	4641      	mov	r1, r8
    f998:	4620      	mov	r0, r4
    f99a:	f001 fb31 	bl	11000 <d_print_comp>
    f99e:	f7fe be59 	b.w	e654 <d_print_comp_inner+0x19c>
    f9a2:	686a      	ldr	r2, [r5, #4]
    f9a4:	4641      	mov	r1, r8
    f9a6:	4620      	mov	r0, r4
    f9a8:	f001 fb2a 	bl	11000 <d_print_comp>
    f9ac:	f7fe be52 	b.w	e654 <d_print_comp_inner+0x19c>
    f9b0:	686a      	ldr	r2, [r5, #4]
    f9b2:	4641      	mov	r1, r8
    f9b4:	4620      	mov	r0, r4
    f9b6:	f001 fb23 	bl	11000 <d_print_comp>
    f9ba:	f7fe be4b 	b.w	e654 <d_print_comp_inner+0x19c>
    f9be:	4641      	mov	r1, r8
    f9c0:	68aa      	ldr	r2, [r5, #8]
    f9c2:	4620      	mov	r0, r4
    f9c4:	f001 fb1c 	bl	11000 <d_print_comp>
    f9c8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    f9cc:	29ff      	cmp	r1, #255	; 0xff
    f9ce:	f000 8560 	beq.w	10492 <STACK_SIZE+0x492>
    f9d2:	1c4a      	adds	r2, r1, #1
    f9d4:	235d      	movs	r3, #93	; 0x5d
    f9d6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    f9da:	5463      	strb	r3, [r4, r1]
    f9dc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    f9e0:	f7fe be38 	b.w	e654 <d_print_comp_inner+0x19c>
    f9e4:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    f9e8:	4e4c      	ldr	r6, [pc, #304]	; (fb1c <d_print_comp_inner+0x1664>)
    f9ea:	3301      	adds	r3, #1
    f9ec:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    f9f0:	4641      	mov	r1, r8
    f9f2:	686a      	ldr	r2, [r5, #4]
    f9f4:	4620      	mov	r0, r4
    f9f6:	f001 fb03 	bl	11000 <d_print_comp>
    f9fa:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    f9fe:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    fa02:	3b01      	subs	r3, #1
    fa04:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    fa08:	f106 0902 	add.w	r9, r6, #2
    fa0c:	f04f 0800 	mov.w	r8, #0
    fa10:	e008      	b.n	fa24 <d_print_comp_inner+0x156c>
    fa12:	460b      	mov	r3, r1
    fa14:	3101      	adds	r1, #1
    fa16:	454e      	cmp	r6, r9
    fa18:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    fa1c:	54e7      	strb	r7, [r4, r3]
    fa1e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    fa22:	d013      	beq.n	fa4c <d_print_comp_inner+0x1594>
    fa24:	29ff      	cmp	r1, #255	; 0xff
    fa26:	f816 7b01 	ldrb.w	r7, [r6], #1
    fa2a:	d1f2      	bne.n	fa12 <d_print_comp_inner+0x155a>
    fa2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fa30:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    fa34:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    fa38:	4620      	mov	r0, r4
    fa3a:	4798      	blx	r3
    fa3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fa40:	3301      	adds	r3, #1
    fa42:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    fa46:	2101      	movs	r1, #1
    fa48:	2300      	movs	r3, #0
    fa4a:	e7e4      	b.n	fa16 <d_print_comp_inner+0x155e>
    fa4c:	68aa      	ldr	r2, [r5, #8]
    fa4e:	4934      	ldr	r1, [pc, #208]	; (fb20 <d_print_comp_inner+0x1668>)
    fa50:	3201      	adds	r2, #1
    fa52:	a804      	add	r0, sp, #16
    fa54:	f006 fae6 	bl	16024 <sprintf>
    fa58:	a804      	add	r0, sp, #16
    fa5a:	f006 feb1 	bl	167c0 <strlen>
    fa5e:	b318      	cbz	r0, faa8 <d_print_comp_inner+0x15f0>
    fa60:	ad04      	add	r5, sp, #16
    fa62:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    fa66:	182f      	adds	r7, r5, r0
    fa68:	f04f 0800 	mov.w	r8, #0
    fa6c:	e008      	b.n	fa80 <d_print_comp_inner+0x15c8>
    fa6e:	460b      	mov	r3, r1
    fa70:	3101      	adds	r1, #1
    fa72:	42af      	cmp	r7, r5
    fa74:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    fa78:	54e6      	strb	r6, [r4, r3]
    fa7a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    fa7e:	d015      	beq.n	faac <d_print_comp_inner+0x15f4>
    fa80:	29ff      	cmp	r1, #255	; 0xff
    fa82:	f815 6b01 	ldrb.w	r6, [r5], #1
    fa86:	d1f2      	bne.n	fa6e <d_print_comp_inner+0x15b6>
    fa88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fa8c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    fa90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    fa94:	4620      	mov	r0, r4
    fa96:	4798      	blx	r3
    fa98:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fa9c:	3301      	adds	r3, #1
    fa9e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    faa2:	2101      	movs	r1, #1
    faa4:	2300      	movs	r3, #0
    faa6:	e7e4      	b.n	fa72 <d_print_comp_inner+0x15ba>
    faa8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    faac:	29ff      	cmp	r1, #255	; 0xff
    faae:	f000 8560 	beq.w	10572 <STACK_SIZE+0x572>
    fab2:	1c4a      	adds	r2, r1, #1
    fab4:	237d      	movs	r3, #125	; 0x7d
    fab6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    faba:	5463      	strb	r3, [r4, r1]
    fabc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    fac0:	f7fe bdc8 	b.w	e654 <d_print_comp_inner+0x19c>
    fac4:	686a      	ldr	r2, [r5, #4]
    fac6:	4641      	mov	r1, r8
    fac8:	4620      	mov	r0, r4
    faca:	f001 fa99 	bl	11000 <d_print_comp>
    face:	f7fe bdc1 	b.w	e654 <d_print_comp_inner+0x19c>
    fad2:	4641      	mov	r1, r8
    fad4:	68aa      	ldr	r2, [r5, #8]
    fad6:	4620      	mov	r0, r4
    fad8:	f001 fa92 	bl	11000 <d_print_comp>
    fadc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    fae0:	29ff      	cmp	r1, #255	; 0xff
    fae2:	f000 850b 	beq.w	104fc <STACK_SIZE+0x4fc>
    fae6:	1c4a      	adds	r2, r1, #1
    fae8:	235d      	movs	r3, #93	; 0x5d
    faea:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    faee:	5463      	strb	r3, [r4, r1]
    faf0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    faf4:	f7fe bdae 	b.w	e654 <d_print_comp_inner+0x19c>
    faf8:	686a      	ldr	r2, [r5, #4]
    fafa:	4641      	mov	r1, r8
    fafc:	4620      	mov	r0, r4
    fafe:	f001 fa7f 	bl	11000 <d_print_comp>
    fb02:	f7fe bda7 	b.w	e654 <d_print_comp_inner+0x19c>
    fb06:	bf00      	nop
    fb08:	00024028 	.word	0x00024028
    fb0c:	00024220 	.word	0x00024220
    fb10:	000242ab 	.word	0x000242ab
    fb14:	0002426b 	.word	0x0002426b
    fb18:	000240c4 	.word	0x000240c4
    fb1c:	000242b8 	.word	0x000242b8
    fb20:	00023004 	.word	0x00023004
    fb24:	f8da 5004 	ldr.w	r5, [sl, #4]
    fb28:	782b      	ldrb	r3, [r5, #0]
    fb2a:	3b61      	subs	r3, #97	; 0x61
    fb2c:	2b19      	cmp	r3, #25
    fb2e:	d809      	bhi.n	fb44 <d_print_comp_inner+0x168c>
    fb30:	29ff      	cmp	r1, #255	; 0xff
    fb32:	f000 8793 	beq.w	10a5c <STACK_SIZE+0xa5c>
    fb36:	2320      	movs	r3, #32
    fb38:	1c4a      	adds	r2, r1, #1
    fb3a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    fb3e:	5463      	strb	r3, [r4, r1]
    fb40:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    fb44:	19eb      	adds	r3, r5, r7
    fb46:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    fb4a:	2b20      	cmp	r3, #32
    fb4c:	bf08      	it	eq
    fb4e:	f107 37ff 	addeq.w	r7, r7, #4294967295
    fb52:	2f00      	cmp	r7, #0
    fb54:	f43e ad7e 	beq.w	e654 <d_print_comp_inner+0x19c>
    fb58:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    fb5c:	442f      	add	r7, r5
    fb5e:	f04f 0800 	mov.w	r8, #0
    fb62:	e009      	b.n	fb78 <d_print_comp_inner+0x16c0>
    fb64:	460b      	mov	r3, r1
    fb66:	3101      	adds	r1, #1
    fb68:	42af      	cmp	r7, r5
    fb6a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    fb6e:	54e6      	strb	r6, [r4, r3]
    fb70:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    fb74:	f43e ad6e 	beq.w	e654 <d_print_comp_inner+0x19c>
    fb78:	29ff      	cmp	r1, #255	; 0xff
    fb7a:	f815 6b01 	ldrb.w	r6, [r5], #1
    fb7e:	d1f1      	bne.n	fb64 <d_print_comp_inner+0x16ac>
    fb80:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fb84:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    fb88:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    fb8c:	4620      	mov	r0, r4
    fb8e:	4798      	blx	r3
    fb90:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fb94:	3301      	adds	r3, #1
    fb96:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    fb9a:	2101      	movs	r1, #1
    fb9c:	2300      	movs	r3, #0
    fb9e:	e7e3      	b.n	fb68 <d_print_comp_inner+0x16b0>
    fba0:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
    fba4:	b13a      	cbz	r2, fbb6 <d_print_comp_inner+0x16fe>
    fba6:	ab14      	add	r3, sp, #80	; 0x50
    fba8:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
    fbac:	f843 1d48 	str.w	r1, [r3, #-72]!
    fbb0:	9203      	str	r2, [sp, #12]
    fbb2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    fbb6:	686b      	ldr	r3, [r5, #4]
    fbb8:	781a      	ldrb	r2, [r3, #0]
    fbba:	2a04      	cmp	r2, #4
    fbbc:	f000 830e 	beq.w	101dc <STACK_SIZE+0x1dc>
    fbc0:	a804      	add	r0, sp, #16
    fbc2:	461a      	mov	r2, r3
    fbc4:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
    fbc8:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    fbcc:	4641      	mov	r1, r8
    fbce:	4620      	mov	r0, r4
    fbd0:	9304      	str	r3, [sp, #16]
    fbd2:	9505      	str	r5, [sp, #20]
    fbd4:	f7fe fc70 	bl	e4b8 <d_print_comp_inner>
    fbd8:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    fbdc:	9a05      	ldr	r2, [sp, #20]
    fbde:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
    fbe2:	2b00      	cmp	r3, #0
    fbe4:	f43e ad36 	beq.w	e654 <d_print_comp_inner+0x19c>
    fbe8:	9b02      	ldr	r3, [sp, #8]
    fbea:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    fbee:	f7fe bd31 	b.w	e654 <d_print_comp_inner+0x19c>
    fbf2:	68aa      	ldr	r2, [r5, #8]
    fbf4:	4641      	mov	r1, r8
    fbf6:	4620      	mov	r0, r4
    fbf8:	f001 fa02 	bl	11000 <d_print_comp>
    fbfc:	f7fe bd2a 	b.w	e654 <d_print_comp_inner+0x19c>
    fc00:	686a      	ldr	r2, [r5, #4]
    fc02:	49d8      	ldr	r1, [pc, #864]	; (ff64 <d_print_comp_inner+0x1aac>)
    fc04:	3201      	adds	r2, #1
    fc06:	a804      	add	r0, sp, #16
    fc08:	f006 fa0c 	bl	16024 <sprintf>
    fc0c:	a804      	add	r0, sp, #16
    fc0e:	f006 fdd7 	bl	167c0 <strlen>
    fc12:	b318      	cbz	r0, fc5c <d_print_comp_inner+0x17a4>
    fc14:	ad04      	add	r5, sp, #16
    fc16:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    fc1a:	182f      	adds	r7, r5, r0
    fc1c:	f04f 0800 	mov.w	r8, #0
    fc20:	e008      	b.n	fc34 <d_print_comp_inner+0x177c>
    fc22:	460b      	mov	r3, r1
    fc24:	3101      	adds	r1, #1
    fc26:	42bd      	cmp	r5, r7
    fc28:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    fc2c:	54e6      	strb	r6, [r4, r3]
    fc2e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    fc32:	d015      	beq.n	fc60 <d_print_comp_inner+0x17a8>
    fc34:	29ff      	cmp	r1, #255	; 0xff
    fc36:	f815 6b01 	ldrb.w	r6, [r5], #1
    fc3a:	d1f2      	bne.n	fc22 <d_print_comp_inner+0x176a>
    fc3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fc40:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    fc44:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    fc48:	4620      	mov	r0, r4
    fc4a:	4798      	blx	r3
    fc4c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fc50:	3301      	adds	r3, #1
    fc52:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    fc56:	2101      	movs	r1, #1
    fc58:	2300      	movs	r3, #0
    fc5a:	e7e4      	b.n	fc26 <d_print_comp_inner+0x176e>
    fc5c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    fc60:	29ff      	cmp	r1, #255	; 0xff
    fc62:	f000 8404 	beq.w	1046e <STACK_SIZE+0x46e>
    fc66:	1c4a      	adds	r2, r1, #1
    fc68:	237d      	movs	r3, #125	; 0x7d
    fc6a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    fc6e:	5463      	strb	r3, [r4, r1]
    fc70:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    fc74:	f7fe bcee 	b.w	e654 <d_print_comp_inner+0x19c>
    fc78:	686a      	ldr	r2, [r5, #4]
    fc7a:	4641      	mov	r1, r8
    fc7c:	4620      	mov	r0, r4
    fc7e:	f001 f9bf 	bl	11000 <d_print_comp>
    fc82:	f7fe bce7 	b.w	e654 <d_print_comp_inner+0x19c>
    fc86:	686a      	ldr	r2, [r5, #4]
    fc88:	4641      	mov	r1, r8
    fc8a:	4620      	mov	r0, r4
    fc8c:	f001 f9b8 	bl	11000 <d_print_comp>
    fc90:	f7fe bce0 	b.w	e654 <d_print_comp_inner+0x19c>
    fc94:	686a      	ldr	r2, [r5, #4]
    fc96:	4641      	mov	r1, r8
    fc98:	4620      	mov	r0, r4
    fc9a:	f001 f9b1 	bl	11000 <d_print_comp>
    fc9e:	f7fe bcd9 	b.w	e654 <d_print_comp_inner+0x19c>
    fca2:	4eb1      	ldr	r6, [pc, #708]	; (ff68 <d_print_comp_inner+0x1ab0>)
    fca4:	68aa      	ldr	r2, [r5, #8]
    fca6:	4641      	mov	r1, r8
    fca8:	4620      	mov	r0, r4
    fcaa:	f001 f9a9 	bl	11000 <d_print_comp>
    fcae:	f106 0a05 	add.w	sl, r6, #5
    fcb2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    fcb6:	f04f 0900 	mov.w	r9, #0
    fcba:	e008      	b.n	fcce <d_print_comp_inner+0x1816>
    fcbc:	460b      	mov	r3, r1
    fcbe:	3101      	adds	r1, #1
    fcc0:	4556      	cmp	r6, sl
    fcc2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    fcc6:	54e7      	strb	r7, [r4, r3]
    fcc8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    fccc:	d013      	beq.n	fcf6 <d_print_comp_inner+0x183e>
    fcce:	29ff      	cmp	r1, #255	; 0xff
    fcd0:	f816 7b01 	ldrb.w	r7, [r6], #1
    fcd4:	d1f2      	bne.n	fcbc <d_print_comp_inner+0x1804>
    fcd6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fcda:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    fcde:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    fce2:	4620      	mov	r0, r4
    fce4:	4798      	blx	r3
    fce6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fcea:	3301      	adds	r3, #1
    fcec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    fcf0:	2101      	movs	r1, #1
    fcf2:	2300      	movs	r3, #0
    fcf4:	e7e4      	b.n	fcc0 <d_print_comp_inner+0x1808>
    fcf6:	686a      	ldr	r2, [r5, #4]
    fcf8:	4641      	mov	r1, r8
    fcfa:	4620      	mov	r0, r4
    fcfc:	f001 f980 	bl	11000 <d_print_comp>
    fd00:	f7fe bca8 	b.w	e654 <d_print_comp_inner+0x19c>
    fd04:	686a      	ldr	r2, [r5, #4]
    fd06:	4641      	mov	r1, r8
    fd08:	4620      	mov	r0, r4
    fd0a:	f001 f979 	bl	11000 <d_print_comp>
    fd0e:	f7fe bca1 	b.w	e654 <d_print_comp_inner+0x19c>
    fd12:	686a      	ldr	r2, [r5, #4]
    fd14:	4641      	mov	r1, r8
    fd16:	4620      	mov	r0, r4
    fd18:	f001 f972 	bl	11000 <d_print_comp>
    fd1c:	f7fe bc9a 	b.w	e654 <d_print_comp_inner+0x19c>
    fd20:	686a      	ldr	r2, [r5, #4]
    fd22:	4641      	mov	r1, r8
    fd24:	4620      	mov	r0, r4
    fd26:	f001 f96b 	bl	11000 <d_print_comp>
    fd2a:	f7fe bc93 	b.w	e654 <d_print_comp_inner+0x19c>
    fd2e:	4641      	mov	r1, r8
    fd30:	686a      	ldr	r2, [r5, #4]
    fd32:	4620      	mov	r0, r4
    fd34:	f001 f964 	bl	11000 <d_print_comp>
    fd38:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    fd3c:	29ff      	cmp	r1, #255	; 0xff
    fd3e:	f000 842a 	beq.w	10596 <STACK_SIZE+0x596>
    fd42:	1c4a      	adds	r2, r1, #1
    fd44:	2329      	movs	r3, #41	; 0x29
    fd46:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    fd4a:	5463      	strb	r3, [r4, r1]
    fd4c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    fd50:	f7fe bc80 	b.w	e654 <d_print_comp_inner+0x19c>
    fd54:	686a      	ldr	r2, [r5, #4]
    fd56:	4641      	mov	r1, r8
    fd58:	4620      	mov	r0, r4
    fd5a:	f001 f951 	bl	11000 <d_print_comp>
    fd5e:	f7fe bc79 	b.w	e654 <d_print_comp_inner+0x19c>
    fd62:	2f04      	cmp	r7, #4
    fd64:	f1a6 0410 	sub.w	r4, r6, #16
    fd68:	f106 0e10 	add.w	lr, r6, #16
    fd6c:	f000 8722 	beq.w	10bb4 <STACK_SIZE+0xbb4>
    fd70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    fd74:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    fd78:	2300      	movs	r3, #0
    fd7a:	f84e 4c10 	str.w	r4, [lr, #-16]
    fd7e:	e906 1008 	stmdb	r6, {r3, ip}
    fd82:	f8ca 6114 	str.w	r6, [sl, #276]	; 0x114
    fd86:	f846 5c0c 	str.w	r5, [r6, #-12]
    fd8a:	686d      	ldr	r5, [r5, #4]
    fd8c:	3701      	adds	r7, #1
    fd8e:	4676      	mov	r6, lr
    fd90:	f7fe bf84 	b.w	ec9c <d_print_comp_inner+0x7e4>
    fd94:	68aa      	ldr	r2, [r5, #8]
    fd96:	9300      	str	r3, [sp, #0]
    fd98:	460e      	mov	r6, r1
    fd9a:	4620      	mov	r0, r4
    fd9c:	4641      	mov	r1, r8
    fd9e:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
    fda2:	f001 f92d 	bl	11000 <d_print_comp>
    fda6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    fdaa:	9b00      	ldr	r3, [sp, #0]
    fdac:	4295      	cmp	r5, r2
    fdae:	f47e ac51 	bne.w	e654 <d_print_comp_inner+0x19c>
    fdb2:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    fdb6:	42b2      	cmp	r2, r6
    fdb8:	f47e ac4c 	bne.w	e654 <d_print_comp_inner+0x19c>
    fdbc:	3b01      	subs	r3, #1
    fdbe:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    fdc2:	f7fe bc47 	b.w	e654 <d_print_comp_inner+0x19c>
    fdc6:	462a      	mov	r2, r5
    fdc8:	4641      	mov	r1, r8
    fdca:	4620      	mov	r0, r4
    fdcc:	f001 f928 	bl	11020 <d_print_mod>
    fdd0:	f7fe bc70 	b.w	e6b4 <d_print_comp_inner+0x1fc>
    fdd4:	686b      	ldr	r3, [r5, #4]
    fdd6:	9300      	str	r3, [sp, #0]
    fdd8:	f1b9 0f00 	cmp.w	r9, #0
    fddc:	f47f abae 	bne.w	f53c <d_print_comp_inner+0x1084>
    fde0:	f7fe bc38 	b.w	e654 <d_print_comp_inner+0x19c>
    fde4:	463a      	mov	r2, r7
    fde6:	a804      	add	r0, sp, #16
    fde8:	495e      	ldr	r1, [pc, #376]	; (ff64 <d_print_comp_inner+0x1aac>)
    fdea:	f006 f91b 	bl	16024 <sprintf>
    fdee:	a804      	add	r0, sp, #16
    fdf0:	f006 fce6 	bl	167c0 <strlen>
    fdf4:	b318      	cbz	r0, fe3e <d_print_comp_inner+0x1986>
    fdf6:	ad04      	add	r5, sp, #16
    fdf8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    fdfc:	182f      	adds	r7, r5, r0
    fdfe:	f04f 0800 	mov.w	r8, #0
    fe02:	e008      	b.n	fe16 <d_print_comp_inner+0x195e>
    fe04:	460b      	mov	r3, r1
    fe06:	3101      	adds	r1, #1
    fe08:	42af      	cmp	r7, r5
    fe0a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    fe0e:	54e6      	strb	r6, [r4, r3]
    fe10:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    fe14:	d015      	beq.n	fe42 <d_print_comp_inner+0x198a>
    fe16:	29ff      	cmp	r1, #255	; 0xff
    fe18:	f815 6b01 	ldrb.w	r6, [r5], #1
    fe1c:	d1f2      	bne.n	fe04 <d_print_comp_inner+0x194c>
    fe1e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fe22:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    fe26:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    fe2a:	4620      	mov	r0, r4
    fe2c:	4798      	blx	r3
    fe2e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fe32:	3301      	adds	r3, #1
    fe34:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    fe38:	2101      	movs	r1, #1
    fe3a:	2300      	movs	r3, #0
    fe3c:	e7e4      	b.n	fe08 <d_print_comp_inner+0x1950>
    fe3e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    fe42:	29ff      	cmp	r1, #255	; 0xff
    fe44:	f000 84dd 	beq.w	10802 <STACK_SIZE+0x802>
    fe48:	1c4a      	adds	r2, r1, #1
    fe4a:	237d      	movs	r3, #125	; 0x7d
    fe4c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    fe50:	5463      	strb	r3, [r4, r1]
    fe52:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    fe56:	f7fe bbfd 	b.w	e654 <d_print_comp_inner+0x19c>
    fe5a:	2700      	movs	r7, #0
    fe5c:	f7ff ba1f 	b.w	f29e <d_print_comp_inner+0xde6>
    fe60:	68df      	ldr	r7, [r3, #12]
    fe62:	689d      	ldr	r5, [r3, #8]
    fe64:	2f00      	cmp	r7, #0
    fe66:	f43e abf5 	beq.w	e654 <d_print_comp_inner+0x19c>
    fe6a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    fe6e:	442f      	add	r7, r5
    fe70:	f04f 0800 	mov.w	r8, #0
    fe74:	e009      	b.n	fe8a <d_print_comp_inner+0x19d2>
    fe76:	460b      	mov	r3, r1
    fe78:	3101      	adds	r1, #1
    fe7a:	42bd      	cmp	r5, r7
    fe7c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    fe80:	54e6      	strb	r6, [r4, r3]
    fe82:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    fe86:	f43e abe5 	beq.w	e654 <d_print_comp_inner+0x19c>
    fe8a:	29ff      	cmp	r1, #255	; 0xff
    fe8c:	f815 6b01 	ldrb.w	r6, [r5], #1
    fe90:	d1f1      	bne.n	fe76 <d_print_comp_inner+0x19be>
    fe92:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fe96:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    fe9a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    fe9e:	4620      	mov	r0, r4
    fea0:	4798      	blx	r3
    fea2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fea6:	3301      	adds	r3, #1
    fea8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    feac:	2101      	movs	r1, #1
    feae:	2300      	movs	r3, #0
    feb0:	e7e3      	b.n	fe7a <d_print_comp_inner+0x19c2>
    feb2:	686e      	ldr	r6, [r5, #4]
    feb4:	68af      	ldr	r7, [r5, #8]
    feb6:	4437      	add	r7, r6
    feb8:	42be      	cmp	r6, r7
    feba:	f4be abcb 	bcs.w	e654 <d_print_comp_inner+0x19c>
    febe:	f04f 0800 	mov.w	r8, #0
    fec2:	e00d      	b.n	fee0 <d_print_comp_inner+0x1a28>
    fec4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    fec8:	29ff      	cmp	r1, #255	; 0xff
    feca:	d036      	beq.n	ff3a <d_print_comp_inner+0x1a82>
    fecc:	1c4b      	adds	r3, r1, #1
    fece:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    fed2:	5465      	strb	r5, [r4, r1]
    fed4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    fed8:	3601      	adds	r6, #1
    feda:	42b7      	cmp	r7, r6
    fedc:	f67e abba 	bls.w	e654 <d_print_comp_inner+0x19c>
    fee0:	1bbb      	subs	r3, r7, r6
    fee2:	2b03      	cmp	r3, #3
    fee4:	7835      	ldrb	r5, [r6, #0]
    fee6:	dded      	ble.n	fec4 <d_print_comp_inner+0x1a0c>
    fee8:	2d5f      	cmp	r5, #95	; 0x5f
    feea:	d1eb      	bne.n	fec4 <d_print_comp_inner+0x1a0c>
    feec:	7873      	ldrb	r3, [r6, #1]
    feee:	2b5f      	cmp	r3, #95	; 0x5f
    fef0:	d1e8      	bne.n	fec4 <d_print_comp_inner+0x1a0c>
    fef2:	78b3      	ldrb	r3, [r6, #2]
    fef4:	2b55      	cmp	r3, #85	; 0x55
    fef6:	d1e5      	bne.n	fec4 <d_print_comp_inner+0x1a0c>
    fef8:	1cf3      	adds	r3, r6, #3
    fefa:	429f      	cmp	r7, r3
    fefc:	d9e2      	bls.n	fec4 <d_print_comp_inner+0x1a0c>
    fefe:	2000      	movs	r0, #0
    ff00:	e006      	b.n	ff10 <d_print_comp_inner+0x1a58>
    ff02:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
    ff06:	429f      	cmp	r7, r3
    ff08:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    ff0c:	f000 85c7 	beq.w	10a9e <STACK_SIZE+0xa9e>
    ff10:	4699      	mov	r9, r3
    ff12:	f813 5b01 	ldrb.w	r5, [r3], #1
    ff16:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
    ff1a:	b2d1      	uxtb	r1, r2
    ff1c:	2909      	cmp	r1, #9
    ff1e:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
    ff22:	d9f0      	bls.n	ff06 <d_print_comp_inner+0x1a4e>
    ff24:	f1be 0f05 	cmp.w	lr, #5
    ff28:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
    ff2c:	d9e9      	bls.n	ff02 <d_print_comp_inner+0x1a4a>
    ff2e:	2a05      	cmp	r2, #5
    ff30:	f200 8743 	bhi.w	10dba <STACK_SIZE+0xdba>
    ff34:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
    ff38:	e7e5      	b.n	ff06 <d_print_comp_inner+0x1a4e>
    ff3a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ff3e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    ff42:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ff46:	4620      	mov	r0, r4
    ff48:	4798      	blx	r3
    ff4a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    ff4e:	3301      	adds	r3, #1
    ff50:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ff54:	2100      	movs	r1, #0
    ff56:	2301      	movs	r3, #1
    ff58:	e7b9      	b.n	fece <d_print_comp_inner+0x1a16>
    ff5a:	4d04      	ldr	r5, [pc, #16]	; (ff6c <d_print_comp_inner+0x1ab4>)
    ff5c:	4698      	mov	r8, r3
    ff5e:	1daf      	adds	r7, r5, #6
    ff60:	e010      	b.n	ff84 <d_print_comp_inner+0x1acc>
    ff62:	bf00      	nop
    ff64:	00023004 	.word	0x00023004
    ff68:	00024188 	.word	0x00024188
    ff6c:	000241e8 	.word	0x000241e8
    ff70:	460b      	mov	r3, r1
    ff72:	3101      	adds	r1, #1
    ff74:	42bd      	cmp	r5, r7
    ff76:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ff7a:	54e6      	strb	r6, [r4, r3]
    ff7c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    ff80:	f43e ab68 	beq.w	e654 <d_print_comp_inner+0x19c>
    ff84:	29ff      	cmp	r1, #255	; 0xff
    ff86:	f815 6b01 	ldrb.w	r6, [r5], #1
    ff8a:	d1f1      	bne.n	ff70 <d_print_comp_inner+0x1ab8>
    ff8c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ff90:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    ff94:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ff98:	4620      	mov	r0, r4
    ff9a:	4798      	blx	r3
    ff9c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    ffa0:	3301      	adds	r3, #1
    ffa2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ffa6:	2101      	movs	r1, #1
    ffa8:	2300      	movs	r3, #0
    ffaa:	e7e3      	b.n	ff74 <d_print_comp_inner+0x1abc>
    ffac:	782b      	ldrb	r3, [r5, #0]
    ffae:	2b2f      	cmp	r3, #47	; 0x2f
    ffb0:	f47e ab6a 	bne.w	e688 <d_print_comp_inner+0x1d0>
    ffb4:	4601      	mov	r1, r0
    ffb6:	460d      	mov	r5, r1
    ffb8:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
    ffbc:	f7fe bb66 	b.w	e68c <d_print_comp_inner+0x1d4>
    ffc0:	4dd7      	ldr	r5, [pc, #860]	; (10320 <STACK_SIZE+0x320>)
    ffc2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ffc6:	f105 0804 	add.w	r8, r5, #4
    ffca:	e009      	b.n	ffe0 <d_print_comp_inner+0x1b28>
    ffcc:	460b      	mov	r3, r1
    ffce:	3101      	adds	r1, #1
    ffd0:	45a8      	cmp	r8, r5
    ffd2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ffd6:	54e6      	strb	r6, [r4, r3]
    ffd8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    ffdc:	f43e ab3a 	beq.w	e654 <d_print_comp_inner+0x19c>
    ffe0:	29ff      	cmp	r1, #255	; 0xff
    ffe2:	f815 6b01 	ldrb.w	r6, [r5], #1
    ffe6:	d1f1      	bne.n	ffcc <d_print_comp_inner+0x1b14>
    ffe8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ffec:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    fff0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    fff4:	4620      	mov	r0, r4
    fff6:	4798      	blx	r3
    fff8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fffc:	3301      	adds	r3, #1
    fffe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10002:	2101      	movs	r1, #1
   10004:	2300      	movs	r3, #0
   10006:	e7e3      	b.n	ffd0 <d_print_comp_inner+0x1b18>
   10008:	4ec6      	ldr	r6, [pc, #792]	; (10324 <STACK_SIZE+0x324>)
   1000a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1000e:	f106 0905 	add.w	r9, r6, #5
   10012:	f04f 0800 	mov.w	r8, #0
   10016:	e008      	b.n	1002a <STACK_SIZE+0x2a>
   10018:	460b      	mov	r3, r1
   1001a:	3101      	adds	r1, #1
   1001c:	45b1      	cmp	r9, r6
   1001e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   10022:	54e7      	strb	r7, [r4, r3]
   10024:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   10028:	d013      	beq.n	10052 <STACK_SIZE+0x52>
   1002a:	29ff      	cmp	r1, #255	; 0xff
   1002c:	f816 7b01 	ldrb.w	r7, [r6], #1
   10030:	d1f2      	bne.n	10018 <STACK_SIZE+0x18>
   10032:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10036:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1003a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1003e:	4620      	mov	r0, r4
   10040:	4798      	blx	r3
   10042:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10046:	3301      	adds	r3, #1
   10048:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1004c:	2101      	movs	r1, #1
   1004e:	2300      	movs	r3, #0
   10050:	e7e4      	b.n	1001c <STACK_SIZE+0x1c>
   10052:	686a      	ldr	r2, [r5, #4]
   10054:	49b4      	ldr	r1, [pc, #720]	; (10328 <STACK_SIZE+0x328>)
   10056:	3201      	adds	r2, #1
   10058:	a804      	add	r0, sp, #16
   1005a:	f005 ffe3 	bl	16024 <sprintf>
   1005e:	a804      	add	r0, sp, #16
   10060:	f006 fbae 	bl	167c0 <strlen>
   10064:	2800      	cmp	r0, #0
   10066:	f43e aaf5 	beq.w	e654 <d_print_comp_inner+0x19c>
   1006a:	ad04      	add	r5, sp, #16
   1006c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10070:	182f      	adds	r7, r5, r0
   10072:	f04f 0800 	mov.w	r8, #0
   10076:	e009      	b.n	1008c <STACK_SIZE+0x8c>
   10078:	460b      	mov	r3, r1
   1007a:	3101      	adds	r1, #1
   1007c:	42af      	cmp	r7, r5
   1007e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   10082:	54e6      	strb	r6, [r4, r3]
   10084:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   10088:	f43e aae4 	beq.w	e654 <d_print_comp_inner+0x19c>
   1008c:	29ff      	cmp	r1, #255	; 0xff
   1008e:	f815 6b01 	ldrb.w	r6, [r5], #1
   10092:	d1f1      	bne.n	10078 <STACK_SIZE+0x78>
   10094:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10098:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1009c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   100a0:	4620      	mov	r0, r4
   100a2:	4798      	blx	r3
   100a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   100a8:	3301      	adds	r3, #1
   100aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   100ae:	2101      	movs	r1, #1
   100b0:	2300      	movs	r3, #0
   100b2:	e7e3      	b.n	1007c <STACK_SIZE+0x7c>
   100b4:	f021 0860 	bic.w	r8, r1, #96	; 0x60
   100b8:	f105 0208 	add.w	r2, r5, #8
   100bc:	4641      	mov	r1, r8
   100be:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   100c2:	f001 fc91 	bl	119e8 <d_print_function_type.isra.11>
   100c6:	686a      	ldr	r2, [r5, #4]
   100c8:	2a00      	cmp	r2, #0
   100ca:	f43e aac3 	beq.w	e654 <d_print_comp_inner+0x19c>
   100ce:	4641      	mov	r1, r8
   100d0:	4620      	mov	r0, r4
   100d2:	f000 ff95 	bl	11000 <d_print_comp>
   100d6:	f7fe babd 	b.w	e654 <d_print_comp_inner+0x19c>
   100da:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   100de:	f7ff b9a2 	b.w	f426 <d_print_comp_inner+0xf6e>
   100e2:	4e92      	ldr	r6, [pc, #584]	; (1032c <STACK_SIZE+0x32c>)
   100e4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   100e8:	f106 0a05 	add.w	sl, r6, #5
   100ec:	f04f 0900 	mov.w	r9, #0
   100f0:	e009      	b.n	10106 <STACK_SIZE+0x106>
   100f2:	460b      	mov	r3, r1
   100f4:	3101      	adds	r1, #1
   100f6:	45b2      	cmp	sl, r6
   100f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   100fc:	54e7      	strb	r7, [r4, r3]
   100fe:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   10102:	f43f a97a 	beq.w	f3fa <d_print_comp_inner+0xf42>
   10106:	29ff      	cmp	r1, #255	; 0xff
   10108:	f816 7b01 	ldrb.w	r7, [r6], #1
   1010c:	d1f1      	bne.n	100f2 <STACK_SIZE+0xf2>
   1010e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10112:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   10116:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1011a:	4620      	mov	r0, r4
   1011c:	4798      	blx	r3
   1011e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10122:	3301      	adds	r3, #1
   10124:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10128:	2101      	movs	r1, #1
   1012a:	2300      	movs	r3, #0
   1012c:	e7e3      	b.n	100f6 <STACK_SIZE+0xf6>
   1012e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   10132:	497f      	ldr	r1, [pc, #508]	; (10330 <STACK_SIZE+0x330>)
   10134:	681f      	ldr	r7, [r3, #0]
   10136:	4638      	mov	r0, r7
   10138:	f005 ffe6 	bl	16108 <strcmp>
   1013c:	f896 a000 	ldrb.w	sl, [r6]
   10140:	b918      	cbnz	r0, 1014a <STACK_SIZE+0x14a>
   10142:	f1ba 0f03 	cmp.w	sl, #3
   10146:	f000 851b 	beq.w	10b80 <STACK_SIZE+0xb80>
   1014a:	f1ba 0f38 	cmp.w	sl, #56	; 0x38
   1014e:	f000 85fd 	beq.w	10d4c <STACK_SIZE+0xd4c>
   10152:	4978      	ldr	r1, [pc, #480]	; (10334 <STACK_SIZE+0x334>)
   10154:	4638      	mov	r0, r7
   10156:	f005 ffd7 	bl	16108 <strcmp>
   1015a:	4605      	mov	r5, r0
   1015c:	2800      	cmp	r0, #0
   1015e:	f000 8135 	beq.w	103cc <STACK_SIZE+0x3cc>
   10162:	4975      	ldr	r1, [pc, #468]	; (10338 <STACK_SIZE+0x338>)
   10164:	4638      	mov	r0, r7
   10166:	f005 ffcf 	bl	16108 <strcmp>
   1016a:	2800      	cmp	r0, #0
   1016c:	f000 82b6 	beq.w	106dc <STACK_SIZE+0x6dc>
   10170:	464a      	mov	r2, r9
   10172:	4641      	mov	r1, r8
   10174:	4620      	mov	r0, r4
   10176:	f001 fd2b 	bl	11bd0 <d_print_expr_op>
   1017a:	2f00      	cmp	r7, #0
   1017c:	f43f a837 	beq.w	f1ee <d_print_comp_inner+0xd36>
   10180:	496e      	ldr	r1, [pc, #440]	; (1033c <STACK_SIZE+0x33c>)
   10182:	4638      	mov	r0, r7
   10184:	f005 ffc0 	bl	16108 <strcmp>
   10188:	2800      	cmp	r0, #0
   1018a:	f000 8384 	beq.w	10896 <STACK_SIZE+0x896>
   1018e:	4638      	mov	r0, r7
   10190:	496b      	ldr	r1, [pc, #428]	; (10340 <STACK_SIZE+0x340>)
   10192:	f005 ffb9 	bl	16108 <strcmp>
   10196:	4605      	mov	r5, r0
   10198:	2800      	cmp	r0, #0
   1019a:	f47f a828 	bne.w	f1ee <d_print_comp_inner+0xd36>
   1019e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   101a2:	2bff      	cmp	r3, #255	; 0xff
   101a4:	f000 84db 	beq.w	10b5e <STACK_SIZE+0xb5e>
   101a8:	1c58      	adds	r0, r3, #1
   101aa:	2528      	movs	r5, #40	; 0x28
   101ac:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   101b0:	4641      	mov	r1, r8
   101b2:	54e5      	strb	r5, [r4, r3]
   101b4:	4632      	mov	r2, r6
   101b6:	4620      	mov	r0, r4
   101b8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   101bc:	f000 ff20 	bl	11000 <d_print_comp>
   101c0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   101c4:	29ff      	cmp	r1, #255	; 0xff
   101c6:	f000 846d 	beq.w	10aa4 <STACK_SIZE+0xaa4>
   101ca:	2329      	movs	r3, #41	; 0x29
   101cc:	1c4a      	adds	r2, r1, #1
   101ce:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   101d2:	5463      	strb	r3, [r4, r1]
   101d4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   101d8:	f7fe ba3c 	b.w	e654 <d_print_comp_inner+0x19c>
   101dc:	f10d 0910 	add.w	r9, sp, #16
   101e0:	685a      	ldr	r2, [r3, #4]
   101e2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   101e6:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   101ea:	4641      	mov	r1, r8
   101ec:	4620      	mov	r0, r4
   101ee:	9204      	str	r2, [sp, #16]
   101f0:	9305      	str	r3, [sp, #20]
   101f2:	f7fe f961 	bl	e4b8 <d_print_comp_inner>
   101f6:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   101fa:	9a05      	ldr	r2, [sp, #20]
   101fc:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   10200:	b113      	cbz	r3, 10208 <STACK_SIZE+0x208>
   10202:	9b02      	ldr	r3, [sp, #8]
   10204:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   10208:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1020c:	2b3c      	cmp	r3, #60	; 0x3c
   1020e:	f000 83d9 	beq.w	109c4 <STACK_SIZE+0x9c4>
   10212:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10216:	29ff      	cmp	r1, #255	; 0xff
   10218:	f000 8467 	beq.w	10aea <STACK_SIZE+0xaea>
   1021c:	1c4a      	adds	r2, r1, #1
   1021e:	233c      	movs	r3, #60	; 0x3c
   10220:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   10224:	5463      	strb	r3, [r4, r1]
   10226:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1022a:	686b      	ldr	r3, [r5, #4]
   1022c:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   10230:	689b      	ldr	r3, [r3, #8]
   10232:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   10236:	461a      	mov	r2, r3
   10238:	4641      	mov	r1, r8
   1023a:	4620      	mov	r0, r4
   1023c:	9304      	str	r3, [sp, #16]
   1023e:	9505      	str	r5, [sp, #20]
   10240:	f7fe f93a 	bl	e4b8 <d_print_comp_inner>
   10244:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   10248:	9a05      	ldr	r2, [sp, #20]
   1024a:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1024e:	2b3e      	cmp	r3, #62	; 0x3e
   10250:	f000 83ab 	beq.w	109aa <STACK_SIZE+0x9aa>
   10254:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10258:	29ff      	cmp	r1, #255	; 0xff
   1025a:	f000 849a 	beq.w	10b92 <STACK_SIZE+0xb92>
   1025e:	233e      	movs	r3, #62	; 0x3e
   10260:	1c4a      	adds	r2, r1, #1
   10262:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   10266:	5463      	strb	r3, [r4, r1]
   10268:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1026c:	f7fe b9f2 	b.w	e654 <d_print_comp_inner+0x19c>
   10270:	6852      	ldr	r2, [r2, #4]
   10272:	7c16      	ldrb	r6, [r2, #16]
   10274:	2e00      	cmp	r6, #0
   10276:	f43f a9e7 	beq.w	f648 <d_print_comp_inner+0x1190>
   1027a:	2e06      	cmp	r6, #6
   1027c:	f240 8337 	bls.w	108ee <STACK_SIZE+0x8ee>
   10280:	2e07      	cmp	r6, #7
   10282:	f47f a9e1 	bne.w	f648 <d_print_comp_inner+0x1190>
   10286:	68aa      	ldr	r2, [r5, #8]
   10288:	7811      	ldrb	r1, [r2, #0]
   1028a:	2900      	cmp	r1, #0
   1028c:	f47f a9dc 	bne.w	f648 <d_print_comp_inner+0x1190>
   10290:	6891      	ldr	r1, [r2, #8]
   10292:	2901      	cmp	r1, #1
   10294:	f47f a9d8 	bne.w	f648 <d_print_comp_inner+0x1190>
   10298:	2b3c      	cmp	r3, #60	; 0x3c
   1029a:	f47f a9d5 	bne.w	f648 <d_print_comp_inner+0x1190>
   1029e:	6853      	ldr	r3, [r2, #4]
   102a0:	781b      	ldrb	r3, [r3, #0]
   102a2:	2b30      	cmp	r3, #48	; 0x30
   102a4:	f000 8626 	beq.w	10ef4 <STACK_SIZE+0xef4>
   102a8:	2b31      	cmp	r3, #49	; 0x31
   102aa:	f47f a9cd 	bne.w	f648 <d_print_comp_inner+0x1190>
   102ae:	2204      	movs	r2, #4
   102b0:	4924      	ldr	r1, [pc, #144]	; (10344 <STACK_SIZE+0x344>)
   102b2:	f7fb fe2d 	bl	bf10 <d_append_buffer>
   102b6:	f7fe b9cd 	b.w	e654 <d_print_comp_inner+0x19c>
   102ba:	4e23      	ldr	r6, [pc, #140]	; (10348 <STACK_SIZE+0x348>)
   102bc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   102c0:	f106 0a02 	add.w	sl, r6, #2
   102c4:	e009      	b.n	102da <STACK_SIZE+0x2da>
   102c6:	460b      	mov	r3, r1
   102c8:	3101      	adds	r1, #1
   102ca:	45b2      	cmp	sl, r6
   102cc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   102d0:	54e7      	strb	r7, [r4, r3]
   102d2:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   102d6:	f43e ad52 	beq.w	ed7e <d_print_comp_inner+0x8c6>
   102da:	29ff      	cmp	r1, #255	; 0xff
   102dc:	f816 7b01 	ldrb.w	r7, [r6], #1
   102e0:	d1f1      	bne.n	102c6 <STACK_SIZE+0x2c6>
   102e2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   102e6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   102ea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   102ee:	4620      	mov	r0, r4
   102f0:	4798      	blx	r3
   102f2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   102f6:	3301      	adds	r3, #1
   102f8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   102fc:	2101      	movs	r1, #1
   102fe:	2300      	movs	r3, #0
   10300:	e7e3      	b.n	102ca <STACK_SIZE+0x2ca>
   10302:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10306:	29ff      	cmp	r1, #255	; 0xff
   10308:	f000 84e4 	beq.w	10cd4 <STACK_SIZE+0xcd4>
   1030c:	2220      	movs	r2, #32
   1030e:	1c4b      	adds	r3, r1, #1
   10310:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   10314:	5462      	strb	r2, [r4, r1]
   10316:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1031a:	f7fe bdbb 	b.w	ee94 <d_print_comp_inner+0x9dc>
   1031e:	bf00      	nop
   10320:	0002425c 	.word	0x0002425c
   10324:	00024088 	.word	0x00024088
   10328:	00023004 	.word	0x00023004
   1032c:	000241d8 	.word	0x000241d8
   10330:	0002420c 	.word	0x0002420c
   10334:	000242d8 	.word	0x000242d8
   10338:	00024018 	.word	0x00024018
   1033c:	00024210 	.word	0x00024210
   10340:	00024518 	.word	0x00024518
   10344:	00024234 	.word	0x00024234
   10348:	00024064 	.word	0x00024064
   1034c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10350:	29ff      	cmp	r1, #255	; 0xff
   10352:	f000 8465 	beq.w	10c20 <STACK_SIZE+0xc20>
   10356:	2220      	movs	r2, #32
   10358:	1c4b      	adds	r3, r1, #1
   1035a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1035e:	5462      	strb	r2, [r4, r1]
   10360:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   10364:	f7fe bd80 	b.w	ee68 <d_print_comp_inner+0x9b0>
   10368:	2700      	movs	r7, #0
   1036a:	55a7      	strb	r7, [r4, r6]
   1036c:	4631      	mov	r1, r6
   1036e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10372:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10376:	4620      	mov	r0, r4
   10378:	4798      	blx	r3
   1037a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1037e:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   10382:	3301      	adds	r3, #1
   10384:	463e      	mov	r6, r7
   10386:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1038a:	f7fe be31 	b.w	eff0 <d_print_comp_inner+0xb38>
   1038e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10392:	29ff      	cmp	r1, #255	; 0xff
   10394:	f000 8465 	beq.w	10c62 <STACK_SIZE+0xc62>
   10398:	1c4a      	adds	r2, r1, #1
   1039a:	235b      	movs	r3, #91	; 0x5b
   1039c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   103a0:	5463      	strb	r3, [r4, r1]
   103a2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   103a6:	4641      	mov	r1, r8
   103a8:	68aa      	ldr	r2, [r5, #8]
   103aa:	4620      	mov	r0, r4
   103ac:	f000 fe28 	bl	11000 <d_print_comp>
   103b0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   103b4:	29ff      	cmp	r1, #255	; 0xff
   103b6:	f000 8312 	beq.w	109de <STACK_SIZE+0x9de>
   103ba:	235d      	movs	r3, #93	; 0x5d
   103bc:	1c4a      	adds	r2, r1, #1
   103be:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   103c2:	5463      	strb	r3, [r4, r1]
   103c4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   103c8:	f7fe b944 	b.w	e654 <d_print_comp_inner+0x19c>
   103cc:	4631      	mov	r1, r6
   103ce:	4620      	mov	r0, r4
   103d0:	f7fb ffca 	bl	c368 <d_find_pack>
   103d4:	b928      	cbnz	r0, 103e2 <STACK_SIZE+0x3e2>
   103d6:	e007      	b.n	103e8 <STACK_SIZE+0x3e8>
   103d8:	6843      	ldr	r3, [r0, #4]
   103da:	b12b      	cbz	r3, 103e8 <STACK_SIZE+0x3e8>
   103dc:	6880      	ldr	r0, [r0, #8]
   103de:	3501      	adds	r5, #1
   103e0:	b110      	cbz	r0, 103e8 <STACK_SIZE+0x3e8>
   103e2:	7803      	ldrb	r3, [r0, #0]
   103e4:	2b2f      	cmp	r3, #47	; 0x2f
   103e6:	d0f7      	beq.n	103d8 <STACK_SIZE+0x3d8>
   103e8:	462a      	mov	r2, r5
   103ea:	a804      	add	r0, sp, #16
   103ec:	49d4      	ldr	r1, [pc, #848]	; (10740 <STACK_SIZE+0x740>)
   103ee:	f005 fe19 	bl	16024 <sprintf>
   103f2:	a804      	add	r0, sp, #16
   103f4:	f006 f9e4 	bl	167c0 <strlen>
   103f8:	2800      	cmp	r0, #0
   103fa:	f43e a92b 	beq.w	e654 <d_print_comp_inner+0x19c>
   103fe:	ad04      	add	r5, sp, #16
   10400:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10404:	182f      	adds	r7, r5, r0
   10406:	f04f 0800 	mov.w	r8, #0
   1040a:	e009      	b.n	10420 <STACK_SIZE+0x420>
   1040c:	460b      	mov	r3, r1
   1040e:	3101      	adds	r1, #1
   10410:	42bd      	cmp	r5, r7
   10412:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   10416:	54e6      	strb	r6, [r4, r3]
   10418:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1041c:	f43e a91a 	beq.w	e654 <d_print_comp_inner+0x19c>
   10420:	29ff      	cmp	r1, #255	; 0xff
   10422:	f815 6b01 	ldrb.w	r6, [r5], #1
   10426:	d1f1      	bne.n	1040c <STACK_SIZE+0x40c>
   10428:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1042c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   10430:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10434:	4620      	mov	r0, r4
   10436:	4798      	blx	r3
   10438:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1043c:	3301      	adds	r3, #1
   1043e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10442:	2101      	movs	r1, #1
   10444:	2300      	movs	r3, #0
   10446:	e7e3      	b.n	10410 <STACK_SIZE+0x410>
   10448:	686a      	ldr	r2, [r5, #4]
   1044a:	4641      	mov	r1, r8
   1044c:	4620      	mov	r0, r4
   1044e:	f000 fdd7 	bl	11000 <d_print_comp>
   10452:	f7fe b8ff 	b.w	e654 <d_print_comp_inner+0x19c>
   10456:	29ff      	cmp	r1, #255	; 0xff
   10458:	f000 83d2 	beq.w	10c00 <STACK_SIZE+0xc00>
   1045c:	232d      	movs	r3, #45	; 0x2d
   1045e:	1c4a      	adds	r2, r1, #1
   10460:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   10464:	5463      	strb	r3, [r4, r1]
   10466:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1046a:	f7ff b90e 	b.w	f68a <d_print_comp_inner+0x11d2>
   1046e:	2500      	movs	r5, #0
   10470:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10474:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10478:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1047c:	4620      	mov	r0, r4
   1047e:	4798      	blx	r3
   10480:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10484:	3301      	adds	r3, #1
   10486:	4629      	mov	r1, r5
   10488:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1048c:	2201      	movs	r2, #1
   1048e:	f7ff bbeb 	b.w	fc68 <d_print_comp_inner+0x17b0>
   10492:	2500      	movs	r5, #0
   10494:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10498:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1049c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   104a0:	4620      	mov	r0, r4
   104a2:	4798      	blx	r3
   104a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   104a8:	3301      	adds	r3, #1
   104aa:	4629      	mov	r1, r5
   104ac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   104b0:	2201      	movs	r2, #1
   104b2:	f7ff ba8f 	b.w	f9d4 <d_print_comp_inner+0x151c>
   104b6:	2600      	movs	r6, #0
   104b8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   104bc:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   104c0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   104c4:	4798      	blx	r3
   104c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   104ca:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   104ce:	3301      	adds	r3, #1
   104d0:	4631      	mov	r1, r6
   104d2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   104d6:	f7fe bd43 	b.w	ef60 <d_print_comp_inner+0xaa8>
   104da:	2600      	movs	r6, #0
   104dc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   104e0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   104e4:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   104e8:	4798      	blx	r3
   104ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   104ee:	3301      	adds	r3, #1
   104f0:	4631      	mov	r1, r6
   104f2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   104f6:	2201      	movs	r2, #1
   104f8:	f7fe bb74 	b.w	ebe4 <d_print_comp_inner+0x72c>
   104fc:	2500      	movs	r5, #0
   104fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10502:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10506:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1050a:	4620      	mov	r0, r4
   1050c:	4798      	blx	r3
   1050e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10512:	3301      	adds	r3, #1
   10514:	4629      	mov	r1, r5
   10516:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1051a:	2201      	movs	r2, #1
   1051c:	f7ff bae4 	b.w	fae8 <d_print_comp_inner+0x1630>
   10520:	220d      	movs	r2, #13
   10522:	4988      	ldr	r1, [pc, #544]	; (10744 <STACK_SIZE+0x744>)
   10524:	4620      	mov	r0, r4
   10526:	f7fb fcf3 	bl	bf10 <d_append_buffer>
   1052a:	68a9      	ldr	r1, [r5, #8]
   1052c:	4620      	mov	r0, r4
   1052e:	3101      	adds	r1, #1
   10530:	f7fb ff9e 	bl	c470 <d_append_num>
   10534:	2203      	movs	r2, #3
   10536:	4984      	ldr	r1, [pc, #528]	; (10748 <STACK_SIZE+0x748>)
   10538:	4620      	mov	r0, r4
   1053a:	f7fb fce9 	bl	bf10 <d_append_buffer>
   1053e:	686d      	ldr	r5, [r5, #4]
   10540:	f7fe bc22 	b.w	ed88 <d_print_comp_inner+0x8d0>
   10544:	2500      	movs	r5, #0
   10546:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1054a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1054e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   10552:	4620      	mov	r0, r4
   10554:	4798      	blx	r3
   10556:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1055a:	3301      	adds	r3, #1
   1055c:	4629      	mov	r1, r5
   1055e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10562:	2201      	movs	r2, #1
   10564:	f7fe be08 	b.w	f178 <d_print_comp_inner+0xcc0>
   10568:	2301      	movs	r3, #1
   1056a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   1056e:	f7fe b871 	b.w	e654 <d_print_comp_inner+0x19c>
   10572:	2500      	movs	r5, #0
   10574:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10578:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1057c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   10580:	4620      	mov	r0, r4
   10582:	4798      	blx	r3
   10584:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10588:	3301      	adds	r3, #1
   1058a:	4629      	mov	r1, r5
   1058c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10590:	2201      	movs	r2, #1
   10592:	f7ff ba8f 	b.w	fab4 <d_print_comp_inner+0x15fc>
   10596:	2500      	movs	r5, #0
   10598:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1059c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   105a0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   105a4:	4620      	mov	r0, r4
   105a6:	4798      	blx	r3
   105a8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   105ac:	3301      	adds	r3, #1
   105ae:	4629      	mov	r1, r5
   105b0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   105b4:	2201      	movs	r2, #1
   105b6:	f7ff bbc5 	b.w	fd44 <d_print_comp_inner+0x188c>
   105ba:	a914      	add	r1, sp, #80	; 0x50
   105bc:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   105c0:	f841 0d40 	str.w	r0, [r1, #-64]!
   105c4:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   105c8:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   105cc:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
   105d0:	4620      	mov	r0, r4
   105d2:	4641      	mov	r1, r8
   105d4:	9306      	str	r3, [sp, #24]
   105d6:	9607      	str	r6, [sp, #28]
   105d8:	9505      	str	r5, [sp, #20]
   105da:	f000 fd11 	bl	11000 <d_print_comp>
   105de:	9e06      	ldr	r6, [sp, #24]
   105e0:	9b04      	ldr	r3, [sp, #16]
   105e2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   105e6:	2e00      	cmp	r6, #0
   105e8:	f47e a834 	bne.w	e654 <d_print_comp_inner+0x19c>
   105ec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   105f0:	29ff      	cmp	r1, #255	; 0xff
   105f2:	f000 8409 	beq.w	10e08 <STACK_SIZE+0xe08>
   105f6:	2320      	movs	r3, #32
   105f8:	1c4a      	adds	r2, r1, #1
   105fa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   105fe:	5463      	strb	r3, [r4, r1]
   10600:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   10604:	f7fe be0b 	b.w	f21e <d_print_comp_inner+0xd66>
   10608:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1060c:	2b00      	cmp	r3, #0
   1060e:	f6fe abff 	blt.w	ee10 <d_print_comp_inner+0x958>
   10612:	2b00      	cmp	r3, #0
   10614:	f000 829d 	beq.w	10b52 <STACK_SIZE+0xb52>
   10618:	6880      	ldr	r0, [r0, #8]
   1061a:	3b01      	subs	r3, #1
   1061c:	2800      	cmp	r0, #0
   1061e:	f43e a82d 	beq.w	e67c <d_print_comp_inner+0x1c4>
   10622:	7802      	ldrb	r2, [r0, #0]
   10624:	2a2f      	cmp	r2, #47	; 0x2f
   10626:	d0f4      	beq.n	10612 <STACK_SIZE+0x612>
   10628:	f7fe b828 	b.w	e67c <d_print_comp_inner+0x1c4>
   1062c:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
   10630:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
   10634:	f1be 0f00 	cmp.w	lr, #0
   10638:	dd14      	ble.n	10664 <STACK_SIZE+0x664>
   1063a:	6813      	ldr	r3, [r2, #0]
   1063c:	4299      	cmp	r1, r3
   1063e:	f000 83f5 	beq.w	10e2c <STACK_SIZE+0xe2c>
   10642:	f102 0008 	add.w	r0, r2, #8
   10646:	463b      	mov	r3, r7
   10648:	46a4      	mov	ip, r4
   1064a:	e004      	b.n	10656 <STACK_SIZE+0x656>
   1064c:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   10650:	42a1      	cmp	r1, r4
   10652:	f000 81d4 	beq.w	109fe <STACK_SIZE+0x9fe>
   10656:	3301      	adds	r3, #1
   10658:	459e      	cmp	lr, r3
   1065a:	4681      	mov	r9, r0
   1065c:	f100 0008 	add.w	r0, r0, #8
   10660:	d1f4      	bne.n	1064c <STACK_SIZE+0x64c>
   10662:	4664      	mov	r4, ip
   10664:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   10668:	459e      	cmp	lr, r3
   1066a:	f280 84b9 	bge.w	10fe0 <STACK_SIZE+0xfe0>
   1066e:	f10e 0301 	add.w	r3, lr, #1
   10672:	eb02 00ce 	add.w	r0, r2, lr, lsl #3
   10676:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   1067a:	f842 103e 	str.w	r1, [r2, lr, lsl #3]
   1067e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   10682:	3004      	adds	r0, #4
   10684:	468e      	mov	lr, r1
   10686:	2a00      	cmp	r2, #0
   10688:	f000 848d 	beq.w	10fa6 <STACK_SIZE+0xfa6>
   1068c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   10690:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   10694:	428b      	cmp	r3, r1
   10696:	f103 0c01 	add.w	ip, r3, #1
   1069a:	f280 84a1 	bge.w	10fe0 <STACK_SIZE+0xfe0>
   1069e:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   106a2:	f8c4 c13c 	str.w	ip, [r4, #316]	; 0x13c
   106a6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   106aa:	6851      	ldr	r1, [r2, #4]
   106ac:	6059      	str	r1, [r3, #4]
   106ae:	6003      	str	r3, [r0, #0]
   106b0:	6812      	ldr	r2, [r2, #0]
   106b2:	4618      	mov	r0, r3
   106b4:	e7e7      	b.n	10686 <STACK_SIZE+0x686>
   106b6:	2500      	movs	r5, #0
   106b8:	4619      	mov	r1, r3
   106ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   106be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   106c2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   106c6:	4620      	mov	r0, r4
   106c8:	4798      	blx	r3
   106ca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   106ce:	1c5a      	adds	r2, r3, #1
   106d0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   106d4:	462b      	mov	r3, r5
   106d6:	2201      	movs	r2, #1
   106d8:	f7fe bd3d 	b.w	f156 <d_print_comp_inner+0xc9e>
   106dc:	2e00      	cmp	r6, #0
   106de:	f000 844d 	beq.w	10f7c <STACK_SIZE+0xf7c>
   106e2:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
   106e6:	f040 8488 	bne.w	10ffa <STACK_SIZE+0xffa>
   106ea:	6873      	ldr	r3, [r6, #4]
   106ec:	b373      	cbz	r3, 1074c <STACK_SIZE+0x74c>
   106ee:	4607      	mov	r7, r0
   106f0:	e007      	b.n	10702 <STACK_SIZE+0x702>
   106f2:	3701      	adds	r7, #1
   106f4:	68b6      	ldr	r6, [r6, #8]
   106f6:	b356      	cbz	r6, 1074e <STACK_SIZE+0x74e>
   106f8:	7833      	ldrb	r3, [r6, #0]
   106fa:	2b2f      	cmp	r3, #47	; 0x2f
   106fc:	d127      	bne.n	1074e <STACK_SIZE+0x74e>
   106fe:	6873      	ldr	r3, [r6, #4]
   10700:	b32b      	cbz	r3, 1074e <STACK_SIZE+0x74e>
   10702:	781a      	ldrb	r2, [r3, #0]
   10704:	2a4a      	cmp	r2, #74	; 0x4a
   10706:	d1f4      	bne.n	106f2 <STACK_SIZE+0x6f2>
   10708:	6859      	ldr	r1, [r3, #4]
   1070a:	4620      	mov	r0, r4
   1070c:	f7fb fe2c 	bl	c368 <d_find_pack>
   10710:	b198      	cbz	r0, 1073a <STACK_SIZE+0x73a>
   10712:	7803      	ldrb	r3, [r0, #0]
   10714:	2b2f      	cmp	r3, #47	; 0x2f
   10716:	f040 846c 	bne.w	10ff2 <STACK_SIZE+0xff2>
   1071a:	6843      	ldr	r3, [r0, #4]
   1071c:	2b00      	cmp	r3, #0
   1071e:	f000 8464 	beq.w	10fea <STACK_SIZE+0xfea>
   10722:	4603      	mov	r3, r0
   10724:	2000      	movs	r0, #0
   10726:	e004      	b.n	10732 <STACK_SIZE+0x732>
   10728:	781a      	ldrb	r2, [r3, #0]
   1072a:	2a2f      	cmp	r2, #47	; 0x2f
   1072c:	d105      	bne.n	1073a <STACK_SIZE+0x73a>
   1072e:	685a      	ldr	r2, [r3, #4]
   10730:	b11a      	cbz	r2, 1073a <STACK_SIZE+0x73a>
   10732:	689b      	ldr	r3, [r3, #8]
   10734:	3001      	adds	r0, #1
   10736:	2b00      	cmp	r3, #0
   10738:	d1f6      	bne.n	10728 <STACK_SIZE+0x728>
   1073a:	4407      	add	r7, r0
   1073c:	e7da      	b.n	106f4 <STACK_SIZE+0x6f4>
   1073e:	bf00      	nop
   10740:	00023004 	.word	0x00023004
   10744:	00024068 	.word	0x00024068
   10748:	00024078 	.word	0x00024078
   1074c:	461f      	mov	r7, r3
   1074e:	4639      	mov	r1, r7
   10750:	4620      	mov	r0, r4
   10752:	f7fb fe8d 	bl	c470 <d_append_num>
   10756:	f7fd bf7d 	b.w	e654 <d_print_comp_inner+0x19c>
   1075a:	2500      	movs	r5, #0
   1075c:	4619      	mov	r1, r3
   1075e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10762:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10766:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1076a:	4620      	mov	r0, r4
   1076c:	4798      	blx	r3
   1076e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10772:	1c5a      	adds	r2, r3, #1
   10774:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   10778:	462b      	mov	r3, r5
   1077a:	2101      	movs	r1, #1
   1077c:	f7fe bb8e 	b.w	ee9c <d_print_comp_inner+0x9e4>
   10780:	2600      	movs	r6, #0
   10782:	4619      	mov	r1, r3
   10784:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10788:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1078c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   10790:	4620      	mov	r0, r4
   10792:	4798      	blx	r3
   10794:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10798:	1c5a      	adds	r2, r3, #1
   1079a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1079e:	4633      	mov	r3, r6
   107a0:	2101      	movs	r1, #1
   107a2:	f7fe bb65 	b.w	ee70 <d_print_comp_inner+0x9b8>
   107a6:	2200      	movs	r2, #0
   107a8:	4619      	mov	r1, r3
   107aa:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   107ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   107b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   107b6:	4620      	mov	r0, r4
   107b8:	4798      	blx	r3
   107ba:	2329      	movs	r3, #41	; 0x29
   107bc:	7023      	strb	r3, [r4, #0]
   107be:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   107c2:	782a      	ldrb	r2, [r5, #0]
   107c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   107c8:	2101      	movs	r1, #1
   107ca:	3301      	adds	r3, #1
   107cc:	2a3d      	cmp	r2, #61	; 0x3d
   107ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   107d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   107d6:	f47e af58 	bne.w	f68a <d_print_comp_inner+0x11d2>
   107da:	e63f      	b.n	1045c <STACK_SIZE+0x45c>
   107dc:	2700      	movs	r7, #0
   107de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   107e2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   107e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   107ea:	4620      	mov	r0, r4
   107ec:	4798      	blx	r3
   107ee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   107f2:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   107f6:	3301      	adds	r3, #1
   107f8:	4639      	mov	r1, r7
   107fa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   107fe:	f7fe bf28 	b.w	f652 <d_print_comp_inner+0x119a>
   10802:	2500      	movs	r5, #0
   10804:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10808:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1080c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   10810:	4620      	mov	r0, r4
   10812:	4798      	blx	r3
   10814:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10818:	3301      	adds	r3, #1
   1081a:	4629      	mov	r1, r5
   1081c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10820:	2201      	movs	r2, #1
   10822:	f7ff bb12 	b.w	fe4a <d_print_comp_inner+0x1992>
   10826:	781b      	ldrb	r3, [r3, #0]
   10828:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
   1082c:	2901      	cmp	r1, #1
   1082e:	d903      	bls.n	10838 <STACK_SIZE+0x838>
   10830:	3b72      	subs	r3, #114	; 0x72
   10832:	2b01      	cmp	r3, #1
   10834:	f63d aead 	bhi.w	e592 <d_print_comp_inner+0xda>
   10838:	4641      	mov	r1, r8
   1083a:	4620      	mov	r0, r4
   1083c:	f001 f9c8 	bl	11bd0 <d_print_expr_op>
   10840:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10844:	29ff      	cmp	r1, #255	; 0xff
   10846:	f000 8271 	beq.w	10d2c <STACK_SIZE+0xd2c>
   1084a:	1c4a      	adds	r2, r1, #1
   1084c:	233c      	movs	r3, #60	; 0x3c
   1084e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   10852:	5463      	strb	r3, [r4, r1]
   10854:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   10858:	68ab      	ldr	r3, [r5, #8]
   1085a:	4641      	mov	r1, r8
   1085c:	685a      	ldr	r2, [r3, #4]
   1085e:	4620      	mov	r0, r4
   10860:	f000 fbce 	bl	11000 <d_print_comp>
   10864:	2202      	movs	r2, #2
   10866:	49d5      	ldr	r1, [pc, #852]	; (10bbc <STACK_SIZE+0xbbc>)
   10868:	4620      	mov	r0, r4
   1086a:	f7fb fb51 	bl	bf10 <d_append_buffer>
   1086e:	68ab      	ldr	r3, [r5, #8]
   10870:	4641      	mov	r1, r8
   10872:	689a      	ldr	r2, [r3, #8]
   10874:	4620      	mov	r0, r4
   10876:	f000 fbc3 	bl	11000 <d_print_comp>
   1087a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1087e:	29ff      	cmp	r1, #255	; 0xff
   10880:	f000 81df 	beq.w	10c42 <STACK_SIZE+0xc42>
   10884:	2329      	movs	r3, #41	; 0x29
   10886:	1c4a      	adds	r2, r1, #1
   10888:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1088c:	5463      	strb	r3, [r4, r1]
   1088e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   10892:	f7fd bedf 	b.w	e654 <d_print_comp_inner+0x19c>
   10896:	4632      	mov	r2, r6
   10898:	4641      	mov	r1, r8
   1089a:	4620      	mov	r0, r4
   1089c:	f000 fbb0 	bl	11000 <d_print_comp>
   108a0:	f7fd bed8 	b.w	e654 <d_print_comp_inner+0x19c>
   108a4:	2600      	movs	r6, #0
   108a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   108aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   108ae:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   108b2:	4620      	mov	r0, r4
   108b4:	4798      	blx	r3
   108b6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   108ba:	3301      	adds	r3, #1
   108bc:	4631      	mov	r1, r6
   108be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   108c2:	2201      	movs	r2, #1
   108c4:	f7fe ba55 	b.w	ed72 <d_print_comp_inner+0x8ba>
   108c8:	49bd      	ldr	r1, [pc, #756]	; (10bc0 <STACK_SIZE+0xbc0>)
   108ca:	6870      	ldr	r0, [r6, #4]
   108cc:	f005 ffe6 	bl	1689c <strncmp>
   108d0:	2800      	cmp	r0, #0
   108d2:	f47e aabd 	bne.w	ee50 <d_print_comp_inner+0x998>
   108d6:	68aa      	ldr	r2, [r5, #8]
   108d8:	4641      	mov	r1, r8
   108da:	4620      	mov	r0, r4
   108dc:	f000 fb90 	bl	11000 <d_print_comp>
   108e0:	2202      	movs	r2, #2
   108e2:	49b8      	ldr	r1, [pc, #736]	; (10bc4 <STACK_SIZE+0xbc4>)
   108e4:	4620      	mov	r0, r4
   108e6:	f7fb fb13 	bl	bf10 <d_append_buffer>
   108ea:	f7fe badd 	b.w	eea8 <d_print_comp_inner+0x9f0>
   108ee:	68aa      	ldr	r2, [r5, #8]
   108f0:	7817      	ldrb	r7, [r2, #0]
   108f2:	2f00      	cmp	r7, #0
   108f4:	f47e aea8 	bne.w	f648 <d_print_comp_inner+0x1190>
   108f8:	2b3d      	cmp	r3, #61	; 0x3d
   108fa:	f000 82ef 	beq.w	10edc <STACK_SIZE+0xedc>
   108fe:	68aa      	ldr	r2, [r5, #8]
   10900:	4641      	mov	r1, r8
   10902:	4620      	mov	r0, r4
   10904:	3e02      	subs	r6, #2
   10906:	f000 fb7b 	bl	11000 <d_print_comp>
   1090a:	2e04      	cmp	r6, #4
   1090c:	f63d aea2 	bhi.w	e654 <d_print_comp_inner+0x19c>
   10910:	e8df f006 	tbb	[pc, r6]
   10914:	0a111826 	.word	0x0a111826
   10918:	03          	.byte	0x03
   10919:	00          	.byte	0x00
   1091a:	4620      	mov	r0, r4
   1091c:	2203      	movs	r2, #3
   1091e:	49aa      	ldr	r1, [pc, #680]	; (10bc8 <STACK_SIZE+0xbc8>)
   10920:	f7fb faf6 	bl	bf10 <d_append_buffer>
   10924:	f7fd be96 	b.w	e654 <d_print_comp_inner+0x19c>
   10928:	4620      	mov	r0, r4
   1092a:	2202      	movs	r2, #2
   1092c:	49a7      	ldr	r1, [pc, #668]	; (10bcc <STACK_SIZE+0xbcc>)
   1092e:	f7fb faef 	bl	bf10 <d_append_buffer>
   10932:	f7fd be8f 	b.w	e654 <d_print_comp_inner+0x19c>
   10936:	4620      	mov	r0, r4
   10938:	2202      	movs	r2, #2
   1093a:	49a5      	ldr	r1, [pc, #660]	; (10bd0 <STACK_SIZE+0xbd0>)
   1093c:	f7fb fae8 	bl	bf10 <d_append_buffer>
   10940:	f7fd be88 	b.w	e654 <d_print_comp_inner+0x19c>
   10944:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10948:	29ff      	cmp	r1, #255	; 0xff
   1094a:	f000 831a 	beq.w	10f82 <STACK_SIZE+0xf82>
   1094e:	236c      	movs	r3, #108	; 0x6c
   10950:	1c4a      	adds	r2, r1, #1
   10952:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   10956:	5463      	strb	r3, [r4, r1]
   10958:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1095c:	f7fd be7a 	b.w	e654 <d_print_comp_inner+0x19c>
   10960:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10964:	29ff      	cmp	r1, #255	; 0xff
   10966:	f000 82db 	beq.w	10f20 <STACK_SIZE+0xf20>
   1096a:	2375      	movs	r3, #117	; 0x75
   1096c:	1c4a      	adds	r2, r1, #1
   1096e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   10972:	5463      	strb	r3, [r4, r1]
   10974:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   10978:	f7fd be6c 	b.w	e654 <d_print_comp_inner+0x19c>
   1097c:	2600      	movs	r6, #0
   1097e:	4619      	mov	r1, r3
   10980:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10984:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10988:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1098c:	4620      	mov	r0, r4
   1098e:	4798      	blx	r3
   10990:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10994:	1c5a      	adds	r2, r3, #1
   10996:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1099a:	4633      	mov	r3, r6
   1099c:	2101      	movs	r1, #1
   1099e:	f7fe bd3c 	b.w	f41a <d_print_comp_inner+0xf62>
   109a2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   109a6:	f7fe bf95 	b.w	f8d4 <d_print_comp_inner+0x141c>
   109aa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   109ae:	29ff      	cmp	r1, #255	; 0xff
   109b0:	f000 8244 	beq.w	10e3c <STACK_SIZE+0xe3c>
   109b4:	2320      	movs	r3, #32
   109b6:	1c4a      	adds	r2, r1, #1
   109b8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   109bc:	5463      	strb	r3, [r4, r1]
   109be:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   109c2:	e447      	b.n	10254 <STACK_SIZE+0x254>
   109c4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   109c8:	29ff      	cmp	r1, #255	; 0xff
   109ca:	f000 826e 	beq.w	10eaa <STACK_SIZE+0xeaa>
   109ce:	2320      	movs	r3, #32
   109d0:	1c4a      	adds	r2, r1, #1
   109d2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   109d6:	5463      	strb	r3, [r4, r1]
   109d8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   109dc:	e419      	b.n	10212 <STACK_SIZE+0x212>
   109de:	2500      	movs	r5, #0
   109e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   109e4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   109e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   109ec:	4620      	mov	r0, r4
   109ee:	4798      	blx	r3
   109f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   109f4:	3301      	adds	r3, #1
   109f6:	4629      	mov	r1, r5
   109f8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   109fc:	e4dd      	b.n	103ba <STACK_SIZE+0x3ba>
   109fe:	4664      	mov	r4, ip
   10a00:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
   10a04:	b1d8      	cbz	r0, 10a3e <STACK_SIZE+0xa3e>
   10a06:	6802      	ldr	r2, [r0, #0]
   10a08:	4291      	cmp	r1, r2
   10a0a:	d00a      	beq.n	10a22 <STACK_SIZE+0xa22>
   10a0c:	4603      	mov	r3, r0
   10a0e:	e004      	b.n	10a1a <STACK_SIZE+0xa1a>
   10a10:	685b      	ldr	r3, [r3, #4]
   10a12:	b1a3      	cbz	r3, 10a3e <STACK_SIZE+0xa3e>
   10a14:	681a      	ldr	r2, [r3, #0]
   10a16:	4291      	cmp	r1, r2
   10a18:	d003      	beq.n	10a22 <STACK_SIZE+0xa22>
   10a1a:	4295      	cmp	r5, r2
   10a1c:	d1f8      	bne.n	10a10 <STACK_SIZE+0xa10>
   10a1e:	4298      	cmp	r0, r3
   10a20:	d0f6      	beq.n	10a10 <STACK_SIZE+0xa10>
   10a22:	3104      	adds	r1, #4
   10a24:	4620      	mov	r0, r4
   10a26:	f7fb fc83 	bl	c330 <d_lookup_template_argument.isra.6>
   10a2a:	2800      	cmp	r0, #0
   10a2c:	f43d ae26 	beq.w	e67c <d_print_comp_inner+0x1c4>
   10a30:	7803      	ldrb	r3, [r0, #0]
   10a32:	2b2f      	cmp	r3, #47	; 0x2f
   10a34:	f43d ae11 	beq.w	e65a <d_print_comp_inner+0x1a2>
   10a38:	4601      	mov	r1, r0
   10a3a:	f7fe bc30 	b.w	f29e <d_print_comp_inner+0xde6>
   10a3e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   10a42:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   10a46:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   10a4a:	3104      	adds	r1, #4
   10a4c:	4620      	mov	r0, r4
   10a4e:	f7fb fc6f 	bl	c330 <d_lookup_template_argument.isra.6>
   10a52:	2800      	cmp	r0, #0
   10a54:	f43d ae10 	beq.w	e678 <d_print_comp_inner+0x1c0>
   10a58:	2701      	movs	r7, #1
   10a5a:	e7e9      	b.n	10a30 <STACK_SIZE+0xa30>
   10a5c:	2600      	movs	r6, #0
   10a5e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10a62:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   10a66:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10a6a:	4620      	mov	r0, r4
   10a6c:	4798      	blx	r3
   10a6e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10a72:	f8da 5004 	ldr.w	r5, [sl, #4]
   10a76:	3301      	adds	r3, #1
   10a78:	4631      	mov	r1, r6
   10a7a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10a7e:	f7ff b85a 	b.w	fb36 <d_print_comp_inner+0x167e>
   10a82:	68aa      	ldr	r2, [r5, #8]
   10a84:	4641      	mov	r1, r8
   10a86:	4620      	mov	r0, r4
   10a88:	f000 faba 	bl	11000 <d_print_comp>
   10a8c:	9b06      	ldr	r3, [sp, #24]
   10a8e:	9a00      	ldr	r2, [sp, #0]
   10a90:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   10a94:	2b00      	cmp	r3, #0
   10a96:	f43e ac9d 	beq.w	f3d4 <d_print_comp_inner+0xf1c>
   10a9a:	f7fd bddb 	b.w	e654 <d_print_comp_inner+0x19c>
   10a9e:	255f      	movs	r5, #95	; 0x5f
   10aa0:	f7ff ba10 	b.w	fec4 <d_print_comp_inner+0x1a0c>
   10aa4:	2500      	movs	r5, #0
   10aa6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10aaa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   10aae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10ab2:	4620      	mov	r0, r4
   10ab4:	4798      	blx	r3
   10ab6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10aba:	3301      	adds	r3, #1
   10abc:	4629      	mov	r1, r5
   10abe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10ac2:	f7ff bb82 	b.w	101ca <STACK_SIZE+0x1ca>
   10ac6:	4648      	mov	r0, r9
   10ac8:	4942      	ldr	r1, [pc, #264]	; (10bd4 <STACK_SIZE+0xbd4>)
   10aca:	f005 fb1d 	bl	16108 <strcmp>
   10ace:	b120      	cbz	r0, 10ada <STACK_SIZE+0xada>
   10ad0:	463a      	mov	r2, r7
   10ad2:	4641      	mov	r1, r8
   10ad4:	4620      	mov	r0, r4
   10ad6:	f001 f87b 	bl	11bd0 <d_print_expr_op>
   10ada:	68ab      	ldr	r3, [r5, #8]
   10adc:	4641      	mov	r1, r8
   10ade:	689a      	ldr	r2, [r3, #8]
   10ae0:	4620      	mov	r0, r4
   10ae2:	f001 f8b3 	bl	11c4c <d_print_subexpr>
   10ae6:	f7fd bd9d 	b.w	e624 <d_print_comp_inner+0x16c>
   10aea:	2600      	movs	r6, #0
   10aec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10af0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   10af4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10af8:	4620      	mov	r0, r4
   10afa:	4798      	blx	r3
   10afc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10b00:	3301      	adds	r3, #1
   10b02:	4631      	mov	r1, r6
   10b04:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10b08:	f7ff bb88 	b.w	1021c <STACK_SIZE+0x21c>
   10b0c:	2500      	movs	r5, #0
   10b0e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10b12:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   10b16:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10b1a:	4620      	mov	r0, r4
   10b1c:	4798      	blx	r3
   10b1e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10b22:	3301      	adds	r3, #1
   10b24:	4629      	mov	r1, r5
   10b26:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10b2a:	f7fe bb59 	b.w	f1e0 <d_print_comp_inner+0xd28>
   10b2e:	2500      	movs	r5, #0
   10b30:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   10b34:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   10b38:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   10b3c:	4798      	blx	r3
   10b3e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10b42:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   10b46:	3301      	adds	r3, #1
   10b48:	4629      	mov	r1, r5
   10b4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10b4e:	f7fe bb2b 	b.w	f1a8 <d_print_comp_inner+0xcf0>
   10b52:	6840      	ldr	r0, [r0, #4]
   10b54:	2800      	cmp	r0, #0
   10b56:	f43d ad91 	beq.w	e67c <d_print_comp_inner+0x1c4>
   10b5a:	f7fe b959 	b.w	ee10 <d_print_comp_inner+0x958>
   10b5e:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   10b62:	4619      	mov	r1, r3
   10b64:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10b68:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10b6c:	4620      	mov	r0, r4
   10b6e:	4798      	blx	r3
   10b70:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10b74:	1c5a      	adds	r2, r3, #1
   10b76:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   10b7a:	462b      	mov	r3, r5
   10b7c:	f7ff bb14 	b.w	101a8 <STACK_SIZE+0x1a8>
   10b80:	6873      	ldr	r3, [r6, #4]
   10b82:	781a      	ldrb	r2, [r3, #0]
   10b84:	2a01      	cmp	r2, #1
   10b86:	f000 8153 	beq.w	10e30 <STACK_SIZE+0xe30>
   10b8a:	f896 a000 	ldrb.w	sl, [r6]
   10b8e:	f7ff bae0 	b.w	10152 <STACK_SIZE+0x152>
   10b92:	2500      	movs	r5, #0
   10b94:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10b98:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   10b9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10ba0:	4620      	mov	r0, r4
   10ba2:	4798      	blx	r3
   10ba4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10ba8:	3301      	adds	r3, #1
   10baa:	4629      	mov	r1, r5
   10bac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10bb0:	f7ff bb55 	b.w	1025e <STACK_SIZE+0x25e>
   10bb4:	4654      	mov	r4, sl
   10bb6:	f7fe be8d 	b.w	f8d4 <d_print_comp_inner+0x141c>
   10bba:	bf00      	nop
   10bbc:	00024214 	.word	0x00024214
   10bc0:	0002407c 	.word	0x0002407c
   10bc4:	00024084 	.word	0x00024084
   10bc8:	00024230 	.word	0x00024230
   10bcc:	0002422c 	.word	0x0002422c
   10bd0:	00024228 	.word	0x00024228
   10bd4:	0002401c 	.word	0x0002401c
   10bd8:	686a      	ldr	r2, [r5, #4]
   10bda:	4641      	mov	r1, r8
   10bdc:	4620      	mov	r0, r4
   10bde:	f001 f835 	bl	11c4c <d_print_subexpr>
   10be2:	4620      	mov	r0, r4
   10be4:	2203      	movs	r2, #3
   10be6:	49e2      	ldr	r1, [pc, #904]	; (10f70 <STACK_SIZE+0xf70>)
   10be8:	f7fb f992 	bl	bf10 <d_append_buffer>
   10bec:	f7fd bd32 	b.w	e654 <d_print_comp_inner+0x19c>
   10bf0:	ab14      	add	r3, sp, #80	; 0x50
   10bf2:	9603      	str	r6, [sp, #12]
   10bf4:	f843 cd48 	str.w	ip, [r3, #-72]!
   10bf8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   10bfc:	f7fe b85a 	b.w	ecb4 <d_print_comp_inner+0x7fc>
   10c00:	2700      	movs	r7, #0
   10c02:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10c06:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   10c0a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10c0e:	4620      	mov	r0, r4
   10c10:	4798      	blx	r3
   10c12:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10c16:	3301      	adds	r3, #1
   10c18:	4639      	mov	r1, r7
   10c1a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10c1e:	e41d      	b.n	1045c <STACK_SIZE+0x45c>
   10c20:	2600      	movs	r6, #0
   10c22:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10c26:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   10c2a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10c2e:	4620      	mov	r0, r4
   10c30:	4798      	blx	r3
   10c32:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10c36:	3301      	adds	r3, #1
   10c38:	4631      	mov	r1, r6
   10c3a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10c3e:	f7ff bb8a 	b.w	10356 <STACK_SIZE+0x356>
   10c42:	2500      	movs	r5, #0
   10c44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10c48:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   10c4c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10c50:	4620      	mov	r0, r4
   10c52:	4798      	blx	r3
   10c54:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10c58:	3301      	adds	r3, #1
   10c5a:	4629      	mov	r1, r5
   10c5c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10c60:	e610      	b.n	10884 <STACK_SIZE+0x884>
   10c62:	2600      	movs	r6, #0
   10c64:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10c68:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   10c6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10c70:	4620      	mov	r0, r4
   10c72:	4798      	blx	r3
   10c74:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10c78:	3301      	adds	r3, #1
   10c7a:	4631      	mov	r1, r6
   10c7c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10c80:	f7ff bb8a 	b.w	10398 <STACK_SIZE+0x398>
   10c84:	685a      	ldr	r2, [r3, #4]
   10c86:	6891      	ldr	r1, [r2, #8]
   10c88:	2901      	cmp	r1, #1
   10c8a:	f47d ac90 	bne.w	e5ae <d_print_comp_inner+0xf6>
   10c8e:	6852      	ldr	r2, [r2, #4]
   10c90:	7812      	ldrb	r2, [r2, #0]
   10c92:	2a3e      	cmp	r2, #62	; 0x3e
   10c94:	f47d ac8b 	bne.w	e5ae <d_print_comp_inner+0xf6>
   10c98:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10c9c:	29ff      	cmp	r1, #255	; 0xff
   10c9e:	d10f      	bne.n	10cc0 <STACK_SIZE+0xcc0>
   10ca0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10ca4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   10ca8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10cac:	4620      	mov	r0, r4
   10cae:	4798      	blx	r3
   10cb0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10cb4:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   10cb8:	3301      	adds	r3, #1
   10cba:	4631      	mov	r1, r6
   10cbc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10cc0:	2328      	movs	r3, #40	; 0x28
   10cc2:	1c4a      	adds	r2, r1, #1
   10cc4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   10cc8:	5463      	strb	r3, [r4, r1]
   10cca:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   10cce:	686b      	ldr	r3, [r5, #4]
   10cd0:	f7fd bc6d 	b.w	e5ae <d_print_comp_inner+0xf6>
   10cd4:	2500      	movs	r5, #0
   10cd6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10cda:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   10cde:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10ce2:	4620      	mov	r0, r4
   10ce4:	4798      	blx	r3
   10ce6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10cea:	3301      	adds	r3, #1
   10cec:	4629      	mov	r1, r5
   10cee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10cf2:	f7ff bb0b 	b.w	1030c <STACK_SIZE+0x30c>
   10cf6:	f8db b004 	ldr.w	fp, [fp, #4]
   10cfa:	f1bb 0f00 	cmp.w	fp, #0
   10cfe:	f43e ade9 	beq.w	f8d4 <d_print_comp_inner+0x141c>
   10d02:	f7fd bfc3 	b.w	ec8c <d_print_comp_inner+0x7d4>
   10d06:	9b02      	ldr	r3, [sp, #8]
   10d08:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   10d0c:	f7fd bfdb 	b.w	ecc6 <d_print_comp_inner+0x80e>
   10d10:	6893      	ldr	r3, [r2, #8]
   10d12:	781b      	ldrb	r3, [r3, #0]
   10d14:	2b29      	cmp	r3, #41	; 0x29
   10d16:	bf1c      	itt	ne
   10d18:	2301      	movne	r3, #1
   10d1a:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
   10d1e:	6852      	ldr	r2, [r2, #4]
   10d20:	4641      	mov	r1, r8
   10d22:	4620      	mov	r0, r4
   10d24:	f000 ff92 	bl	11c4c <d_print_subexpr>
   10d28:	f7fd bc52 	b.w	e5d0 <d_print_comp_inner+0x118>
   10d2c:	2600      	movs	r6, #0
   10d2e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10d32:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   10d36:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10d3a:	4620      	mov	r0, r4
   10d3c:	4798      	blx	r3
   10d3e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10d42:	3301      	adds	r3, #1
   10d44:	4631      	mov	r1, r6
   10d46:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10d4a:	e57e      	b.n	1084a <STACK_SIZE+0x84a>
   10d4c:	6872      	ldr	r2, [r6, #4]
   10d4e:	4641      	mov	r1, r8
   10d50:	4620      	mov	r0, r4
   10d52:	f000 ff7b 	bl	11c4c <d_print_subexpr>
   10d56:	464a      	mov	r2, r9
   10d58:	4641      	mov	r1, r8
   10d5a:	4620      	mov	r0, r4
   10d5c:	f000 ff38 	bl	11bd0 <d_print_expr_op>
   10d60:	f7fd bc78 	b.w	e654 <d_print_comp_inner+0x19c>
   10d64:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10d68:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   10d6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10d70:	4620      	mov	r0, r4
   10d72:	4798      	blx	r3
   10d74:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10d78:	3301      	adds	r3, #1
   10d7a:	4629      	mov	r1, r5
   10d7c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10d80:	f7fd bfad 	b.w	ecde <d_print_comp_inner+0x826>
   10d84:	464a      	mov	r2, r9
   10d86:	4641      	mov	r1, r8
   10d88:	4620      	mov	r0, r4
   10d8a:	f000 ff5f 	bl	11c4c <d_print_subexpr>
   10d8e:	4652      	mov	r2, sl
   10d90:	4641      	mov	r1, r8
   10d92:	4620      	mov	r0, r4
   10d94:	f000 ff1c 	bl	11bd0 <d_print_expr_op>
   10d98:	463a      	mov	r2, r7
   10d9a:	4641      	mov	r1, r8
   10d9c:	4620      	mov	r0, r4
   10d9e:	f000 ff55 	bl	11c4c <d_print_subexpr>
   10da2:	4620      	mov	r0, r4
   10da4:	2203      	movs	r2, #3
   10da6:	4973      	ldr	r1, [pc, #460]	; (10f74 <STACK_SIZE+0xf74>)
   10da8:	f7fb f8b2 	bl	bf10 <d_append_buffer>
   10dac:	462a      	mov	r2, r5
   10dae:	4641      	mov	r1, r8
   10db0:	4620      	mov	r0, r4
   10db2:	f000 ff4b 	bl	11c4c <d_print_subexpr>
   10db6:	f7fd bc4d 	b.w	e654 <d_print_comp_inner+0x19c>
   10dba:	454f      	cmp	r7, r9
   10dbc:	f67f ae6f 	bls.w	10a9e <STACK_SIZE+0xa9e>
   10dc0:	2d5f      	cmp	r5, #95	; 0x5f
   10dc2:	f47f ae6c 	bne.w	10a9e <STACK_SIZE+0xa9e>
   10dc6:	28ff      	cmp	r0, #255	; 0xff
   10dc8:	f63f a87c 	bhi.w	fec4 <d_print_comp_inner+0x1a0c>
   10dcc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10dd0:	29ff      	cmp	r1, #255	; 0xff
   10dd2:	b2c5      	uxtb	r5, r0
   10dd4:	d10f      	bne.n	10df6 <STACK_SIZE+0xdf6>
   10dd6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10dda:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   10dde:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10de2:	4620      	mov	r0, r4
   10de4:	4798      	blx	r3
   10de6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10dea:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   10dee:	3301      	adds	r3, #1
   10df0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10df4:	2100      	movs	r1, #0
   10df6:	1c4b      	adds	r3, r1, #1
   10df8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   10dfc:	464e      	mov	r6, r9
   10dfe:	5465      	strb	r5, [r4, r1]
   10e00:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   10e04:	f7ff b868 	b.w	fed8 <d_print_comp_inner+0x1a20>
   10e08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10e0c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   10e10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10e14:	4620      	mov	r0, r4
   10e16:	4798      	blx	r3
   10e18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10e1c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   10e20:	3301      	adds	r3, #1
   10e22:	4631      	mov	r1, r6
   10e24:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10e28:	f7ff bbe5 	b.w	105f6 <STACK_SIZE+0x5f6>
   10e2c:	4691      	mov	r9, r2
   10e2e:	e5e7      	b.n	10a00 <STACK_SIZE+0xa00>
   10e30:	68b2      	ldr	r2, [r6, #8]
   10e32:	7812      	ldrb	r2, [r2, #0]
   10e34:	2a29      	cmp	r2, #41	; 0x29
   10e36:	bf08      	it	eq
   10e38:	461e      	moveq	r6, r3
   10e3a:	e6a6      	b.n	10b8a <STACK_SIZE+0xb8a>
   10e3c:	2500      	movs	r5, #0
   10e3e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10e42:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   10e46:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10e4a:	4620      	mov	r0, r4
   10e4c:	4798      	blx	r3
   10e4e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10e52:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   10e56:	3301      	adds	r3, #1
   10e58:	4629      	mov	r1, r5
   10e5a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10e5e:	e5a9      	b.n	109b4 <STACK_SIZE+0x9b4>
   10e60:	2600      	movs	r6, #0
   10e62:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10e66:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   10e6a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10e6e:	4620      	mov	r0, r4
   10e70:	4798      	blx	r3
   10e72:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10e76:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   10e7a:	3301      	adds	r3, #1
   10e7c:	4631      	mov	r1, r6
   10e7e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10e82:	f7fd bbc8 	b.w	e616 <d_print_comp_inner+0x15e>
   10e86:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   10e8a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10e8e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10e92:	4620      	mov	r0, r4
   10e94:	4798      	blx	r3
   10e96:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10e9a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   10e9e:	3301      	adds	r3, #1
   10ea0:	4631      	mov	r1, r6
   10ea2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10ea6:	f7fd bba4 	b.w	e5f2 <d_print_comp_inner+0x13a>
   10eaa:	2600      	movs	r6, #0
   10eac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10eb0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   10eb4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10eb8:	4620      	mov	r0, r4
   10eba:	4798      	blx	r3
   10ebc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10ec0:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   10ec4:	3301      	adds	r3, #1
   10ec6:	4631      	mov	r1, r6
   10ec8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10ecc:	e57f      	b.n	109ce <STACK_SIZE+0x9ce>
   10ece:	6841      	ldr	r1, [r0, #4]
   10ed0:	2900      	cmp	r1, #0
   10ed2:	f43d abd0 	beq.w	e676 <d_print_comp_inner+0x1be>
   10ed6:	780b      	ldrb	r3, [r1, #0]
   10ed8:	f7fe b9e1 	b.w	f29e <d_print_comp_inner+0xde6>
   10edc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   10ee0:	29ff      	cmp	r1, #255	; 0xff
   10ee2:	d00d      	beq.n	10f00 <STACK_SIZE+0xf00>
   10ee4:	232d      	movs	r3, #45	; 0x2d
   10ee6:	1c4a      	adds	r2, r1, #1
   10ee8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   10eec:	5463      	strb	r3, [r4, r1]
   10eee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   10ef2:	e504      	b.n	108fe <STACK_SIZE+0x8fe>
   10ef4:	2205      	movs	r2, #5
   10ef6:	4920      	ldr	r1, [pc, #128]	; (10f78 <STACK_SIZE+0xf78>)
   10ef8:	f7fb f80a 	bl	bf10 <d_append_buffer>
   10efc:	f7fd bbaa 	b.w	e654 <d_print_comp_inner+0x19c>
   10f00:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   10f04:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
   10f08:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   10f0c:	4798      	blx	r3
   10f0e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10f12:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   10f16:	3301      	adds	r3, #1
   10f18:	4639      	mov	r1, r7
   10f1a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10f1e:	e7e1      	b.n	10ee4 <STACK_SIZE+0xee4>
   10f20:	2500      	movs	r5, #0
   10f22:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10f26:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   10f2a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10f2e:	4620      	mov	r0, r4
   10f30:	4798      	blx	r3
   10f32:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10f36:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   10f3a:	3301      	adds	r3, #1
   10f3c:	4629      	mov	r1, r5
   10f3e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10f42:	e512      	b.n	1096a <STACK_SIZE+0x96a>
   10f44:	2700      	movs	r7, #0
   10f46:	f7ff b913 	b.w	10170 <STACK_SIZE+0x170>
   10f4a:	2500      	movs	r5, #0
   10f4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10f50:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   10f54:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10f58:	4620      	mov	r0, r4
   10f5a:	4798      	blx	r3
   10f5c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10f60:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   10f64:	3301      	adds	r3, #1
   10f66:	4629      	mov	r1, r5
   10f68:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10f6c:	f7fd bb6b 	b.w	e646 <d_print_comp_inner+0x18e>
   10f70:	00024258 	.word	0x00024258
   10f74:	0002421c 	.word	0x0002421c
   10f78:	00021ca0 	.word	0x00021ca0
   10f7c:	4637      	mov	r7, r6
   10f7e:	f7ff bbe6 	b.w	1074e <STACK_SIZE+0x74e>
   10f82:	2500      	movs	r5, #0
   10f84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10f88:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   10f8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10f90:	4620      	mov	r0, r4
   10f92:	4798      	blx	r3
   10f94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10f98:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   10f9c:	3301      	adds	r3, #1
   10f9e:	4629      	mov	r1, r5
   10fa0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10fa4:	e4d3      	b.n	1094e <STACK_SIZE+0x94e>
   10fa6:	4671      	mov	r1, lr
   10fa8:	6002      	str	r2, [r0, #0]
   10faa:	3104      	adds	r1, #4
   10fac:	4620      	mov	r0, r4
   10fae:	f7fb f9bf 	bl	c330 <d_lookup_template_argument.isra.6>
   10fb2:	2800      	cmp	r0, #0
   10fb4:	f47f ad3c 	bne.w	10a30 <STACK_SIZE+0xa30>
   10fb8:	f7fd bb60 	b.w	e67c <d_print_comp_inner+0x1c4>
   10fbc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10fc0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   10fc4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10fc8:	4620      	mov	r0, r4
   10fca:	4798      	blx	r3
   10fcc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10fd0:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   10fd4:	3301      	adds	r3, #1
   10fd6:	4631      	mov	r1, r6
   10fd8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10fdc:	f7fe bc02 	b.w	f7e4 <d_print_comp_inner+0x132c>
   10fe0:	2301      	movs	r3, #1
   10fe2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   10fe6:	f7fd bb35 	b.w	e654 <d_print_comp_inner+0x19c>
   10fea:	4618      	mov	r0, r3
   10fec:	4407      	add	r7, r0
   10fee:	f7ff bb81 	b.w	106f4 <STACK_SIZE+0x6f4>
   10ff2:	2000      	movs	r0, #0
   10ff4:	4407      	add	r7, r0
   10ff6:	f7ff bb7d 	b.w	106f4 <STACK_SIZE+0x6f4>
   10ffa:	4607      	mov	r7, r0
   10ffc:	f7ff bba7 	b.w	1074e <STACK_SIZE+0x74e>

00011000 <d_print_comp>:
   11000:	b510      	push	{r4, lr}
   11002:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   11006:	b082      	sub	sp, #8
   11008:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   1100c:	4604      	mov	r4, r0
   1100e:	e88d 000c 	stmia.w	sp, {r2, r3}
   11012:	f7fd fa51 	bl	e4b8 <d_print_comp_inner>
   11016:	9b01      	ldr	r3, [sp, #4]
   11018:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1101c:	b002      	add	sp, #8
   1101e:	bd10      	pop	{r4, pc}

00011020 <d_print_mod>:
   11020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11024:	7813      	ldrb	r3, [r2, #0]
   11026:	3b03      	subs	r3, #3
   11028:	b082      	sub	sp, #8
   1102a:	4615      	mov	r5, r2
   1102c:	4604      	mov	r4, r0
   1102e:	4688      	mov	r8, r1
   11030:	2b49      	cmp	r3, #73	; 0x49
   11032:	f200 8223 	bhi.w	1147c <d_print_mod+0x45c>
   11036:	e8df f013 	tbh	[pc, r3, lsl #1]
   1103a:	01e7      	.short	0x01e7
   1103c:	02210221 	.word	0x02210221
   11040:	02210221 	.word	0x02210221
   11044:	02210221 	.word	0x02210221
   11048:	02210221 	.word	0x02210221
   1104c:	02210221 	.word	0x02210221
   11050:	02210221 	.word	0x02210221
   11054:	02210221 	.word	0x02210221
   11058:	02210221 	.word	0x02210221
   1105c:	02210221 	.word	0x02210221
   11060:	02210221 	.word	0x02210221
   11064:	01e90221 	.word	0x01e90221
   11068:	01a80182 	.word	0x01a80182
   1106c:	018201e9 	.word	0x018201e9
   11070:	01cd01a8 	.word	0x01cd01a8
   11074:	006f01da 	.word	0x006f01da
   11078:	009c008c 	.word	0x009c008c
   1107c:	00cf00ab 	.word	0x00cf00ab
   11080:	022100f4 	.word	0x022100f4
   11084:	02210221 	.word	0x02210221
   11088:	01190221 	.word	0x01190221
   1108c:	015c0221 	.word	0x015c0221
   11090:	02210221 	.word	0x02210221
   11094:	02210221 	.word	0x02210221
   11098:	02210221 	.word	0x02210221
   1109c:	02210221 	.word	0x02210221
   110a0:	02210221 	.word	0x02210221
   110a4:	02210221 	.word	0x02210221
   110a8:	02210221 	.word	0x02210221
   110ac:	02210221 	.word	0x02210221
   110b0:	02210221 	.word	0x02210221
   110b4:	02210221 	.word	0x02210221
   110b8:	02210221 	.word	0x02210221
   110bc:	02210221 	.word	0x02210221
   110c0:	02210221 	.word	0x02210221
   110c4:	02210221 	.word	0x02210221
   110c8:	02210221 	.word	0x02210221
   110cc:	004a      	.short	0x004a
   110ce:	4dd3      	ldr	r5, [pc, #844]	; (1141c <d_print_mod+0x3fc>)
   110d0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   110d4:	f105 0711 	add.w	r7, r5, #17
   110d8:	f04f 0800 	mov.w	r8, #0
   110dc:	e008      	b.n	110f0 <d_print_mod+0xd0>
   110de:	460b      	mov	r3, r1
   110e0:	3101      	adds	r1, #1
   110e2:	42bd      	cmp	r5, r7
   110e4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   110e8:	54e6      	strb	r6, [r4, r3]
   110ea:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   110ee:	d02d      	beq.n	1114c <d_print_mod+0x12c>
   110f0:	29ff      	cmp	r1, #255	; 0xff
   110f2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   110f6:	d1f2      	bne.n	110de <d_print_mod+0xbe>
   110f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   110fc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   11100:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11104:	4620      	mov	r0, r4
   11106:	4798      	blx	r3
   11108:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1110c:	3301      	adds	r3, #1
   1110e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11112:	2101      	movs	r1, #1
   11114:	2300      	movs	r3, #0
   11116:	e7e4      	b.n	110e2 <d_print_mod+0xc2>
   11118:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1111c:	29ff      	cmp	r1, #255	; 0xff
   1111e:	f000 81f7 	beq.w	11510 <d_print_mod+0x4f0>
   11122:	1c4a      	adds	r2, r1, #1
   11124:	2320      	movs	r3, #32
   11126:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1112a:	5463      	strb	r3, [r4, r1]
   1112c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   11130:	68aa      	ldr	r2, [r5, #8]
   11132:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   11136:	9200      	str	r2, [sp, #0]
   11138:	4641      	mov	r1, r8
   1113a:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1113e:	4620      	mov	r0, r4
   11140:	9301      	str	r3, [sp, #4]
   11142:	f7fd f9b9 	bl	e4b8 <d_print_comp_inner>
   11146:	9b01      	ldr	r3, [sp, #4]
   11148:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1114c:	b002      	add	sp, #8
   1114e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11152:	f011 0504 	ands.w	r5, r1, #4
   11156:	d1f9      	bne.n	1114c <d_print_mod+0x12c>
   11158:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1115c:	2bff      	cmp	r3, #255	; 0xff
   1115e:	f000 821c 	beq.w	1159a <d_print_mod+0x57a>
   11162:	222a      	movs	r2, #42	; 0x2a
   11164:	1c59      	adds	r1, r3, #1
   11166:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1116a:	54e2      	strb	r2, [r4, r3]
   1116c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   11170:	e7ec      	b.n	1114c <d_print_mod+0x12c>
   11172:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11176:	29ff      	cmp	r1, #255	; 0xff
   11178:	f000 81b9 	beq.w	114ee <d_print_mod+0x4ce>
   1117c:	1c4a      	adds	r2, r1, #1
   1117e:	2326      	movs	r3, #38	; 0x26
   11180:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   11184:	5463      	strb	r3, [r4, r1]
   11186:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1118a:	b002      	add	sp, #8
   1118c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11190:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11194:	4da2      	ldr	r5, [pc, #648]	; (11420 <d_print_mod+0x400>)
   11196:	f04f 0800 	mov.w	r8, #0
   1119a:	1caf      	adds	r7, r5, #2
   1119c:	e008      	b.n	111b0 <d_print_mod+0x190>
   1119e:	460b      	mov	r3, r1
   111a0:	3101      	adds	r1, #1
   111a2:	42bd      	cmp	r5, r7
   111a4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   111a8:	54e6      	strb	r6, [r4, r3]
   111aa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   111ae:	d0cd      	beq.n	1114c <d_print_mod+0x12c>
   111b0:	29ff      	cmp	r1, #255	; 0xff
   111b2:	f815 6b01 	ldrb.w	r6, [r5], #1
   111b6:	d1f2      	bne.n	1119e <d_print_mod+0x17e>
   111b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   111bc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   111c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   111c4:	4620      	mov	r0, r4
   111c6:	4798      	blx	r3
   111c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   111cc:	3301      	adds	r3, #1
   111ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   111d2:	2101      	movs	r1, #1
   111d4:	2300      	movs	r3, #0
   111d6:	e7e4      	b.n	111a2 <d_print_mod+0x182>
   111d8:	4d92      	ldr	r5, [pc, #584]	; (11424 <d_print_mod+0x404>)
   111da:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   111de:	f105 0708 	add.w	r7, r5, #8
   111e2:	f04f 0800 	mov.w	r8, #0
   111e6:	e008      	b.n	111fa <d_print_mod+0x1da>
   111e8:	460b      	mov	r3, r1
   111ea:	3101      	adds	r1, #1
   111ec:	42bd      	cmp	r5, r7
   111ee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   111f2:	54e6      	strb	r6, [r4, r3]
   111f4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   111f8:	d0a8      	beq.n	1114c <d_print_mod+0x12c>
   111fa:	29ff      	cmp	r1, #255	; 0xff
   111fc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   11200:	d1f2      	bne.n	111e8 <d_print_mod+0x1c8>
   11202:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11206:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1120a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1120e:	4620      	mov	r0, r4
   11210:	4798      	blx	r3
   11212:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11216:	3301      	adds	r3, #1
   11218:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1121c:	2101      	movs	r1, #1
   1121e:	2300      	movs	r3, #0
   11220:	e7e4      	b.n	111ec <d_print_mod+0x1cc>
   11222:	4d81      	ldr	r5, [pc, #516]	; (11428 <d_print_mod+0x408>)
   11224:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11228:	f105 070a 	add.w	r7, r5, #10
   1122c:	f04f 0800 	mov.w	r8, #0
   11230:	e008      	b.n	11244 <d_print_mod+0x224>
   11232:	460b      	mov	r3, r1
   11234:	3101      	adds	r1, #1
   11236:	42bd      	cmp	r5, r7
   11238:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1123c:	54e6      	strb	r6, [r4, r3]
   1123e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   11242:	d083      	beq.n	1114c <d_print_mod+0x12c>
   11244:	29ff      	cmp	r1, #255	; 0xff
   11246:	f815 6b01 	ldrb.w	r6, [r5], #1
   1124a:	d1f2      	bne.n	11232 <d_print_mod+0x212>
   1124c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11250:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   11254:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11258:	4620      	mov	r0, r4
   1125a:	4798      	blx	r3
   1125c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11260:	3301      	adds	r3, #1
   11262:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11266:	2101      	movs	r1, #1
   11268:	2300      	movs	r3, #0
   1126a:	e7e4      	b.n	11236 <d_print_mod+0x216>
   1126c:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   11270:	2b28      	cmp	r3, #40	; 0x28
   11272:	d00b      	beq.n	1128c <d_print_mod+0x26c>
   11274:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   11278:	2bff      	cmp	r3, #255	; 0xff
   1127a:	f000 8126 	beq.w	114ca <d_print_mod+0x4aa>
   1127e:	2220      	movs	r2, #32
   11280:	1c59      	adds	r1, r3, #1
   11282:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11286:	54e2      	strb	r2, [r4, r3]
   11288:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1128c:	686a      	ldr	r2, [r5, #4]
   1128e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   11292:	4d66      	ldr	r5, [pc, #408]	; (1142c <d_print_mod+0x40c>)
   11294:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   11298:	4641      	mov	r1, r8
   1129a:	4620      	mov	r0, r4
   1129c:	9301      	str	r3, [sp, #4]
   1129e:	9200      	str	r2, [sp, #0]
   112a0:	f7fd f90a 	bl	e4b8 <d_print_comp_inner>
   112a4:	9b01      	ldr	r3, [sp, #4]
   112a6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   112aa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   112ae:	1cef      	adds	r7, r5, #3
   112b0:	f04f 0800 	mov.w	r8, #0
   112b4:	e009      	b.n	112ca <d_print_mod+0x2aa>
   112b6:	460b      	mov	r3, r1
   112b8:	3101      	adds	r1, #1
   112ba:	42bd      	cmp	r5, r7
   112bc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   112c0:	54e6      	strb	r6, [r4, r3]
   112c2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   112c6:	f43f af41 	beq.w	1114c <d_print_mod+0x12c>
   112ca:	29ff      	cmp	r1, #255	; 0xff
   112cc:	f815 6b01 	ldrb.w	r6, [r5], #1
   112d0:	d1f1      	bne.n	112b6 <d_print_mod+0x296>
   112d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   112d6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   112da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   112de:	4620      	mov	r0, r4
   112e0:	4798      	blx	r3
   112e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   112e6:	3301      	adds	r3, #1
   112e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   112ec:	2101      	movs	r1, #1
   112ee:	2300      	movs	r3, #0
   112f0:	e7e3      	b.n	112ba <d_print_mod+0x29a>
   112f2:	4e4f      	ldr	r6, [pc, #316]	; (11430 <d_print_mod+0x410>)
   112f4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   112f8:	f106 0a0a 	add.w	sl, r6, #10
   112fc:	f04f 0900 	mov.w	r9, #0
   11300:	e009      	b.n	11316 <d_print_mod+0x2f6>
   11302:	460b      	mov	r3, r1
   11304:	3101      	adds	r1, #1
   11306:	4556      	cmp	r6, sl
   11308:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1130c:	54e7      	strb	r7, [r4, r3]
   1130e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   11312:	f000 80c0 	beq.w	11496 <d_print_mod+0x476>
   11316:	29ff      	cmp	r1, #255	; 0xff
   11318:	f816 7b01 	ldrb.w	r7, [r6], #1
   1131c:	d1f1      	bne.n	11302 <d_print_mod+0x2e2>
   1131e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11322:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   11326:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1132a:	4620      	mov	r0, r4
   1132c:	4798      	blx	r3
   1132e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11332:	3301      	adds	r3, #1
   11334:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11338:	2101      	movs	r1, #1
   1133a:	2300      	movs	r3, #0
   1133c:	e7e3      	b.n	11306 <d_print_mod+0x2e6>
   1133e:	4d3d      	ldr	r5, [pc, #244]	; (11434 <d_print_mod+0x414>)
   11340:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11344:	f105 0709 	add.w	r7, r5, #9
   11348:	f04f 0800 	mov.w	r8, #0
   1134c:	e009      	b.n	11362 <d_print_mod+0x342>
   1134e:	460b      	mov	r3, r1
   11350:	3101      	adds	r1, #1
   11352:	42bd      	cmp	r5, r7
   11354:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11358:	54e6      	strb	r6, [r4, r3]
   1135a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1135e:	f43f aef5 	beq.w	1114c <d_print_mod+0x12c>
   11362:	29ff      	cmp	r1, #255	; 0xff
   11364:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   11368:	d1f1      	bne.n	1134e <d_print_mod+0x32e>
   1136a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1136e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   11372:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11376:	4620      	mov	r0, r4
   11378:	4798      	blx	r3
   1137a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1137e:	3301      	adds	r3, #1
   11380:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11384:	2101      	movs	r1, #1
   11386:	2300      	movs	r3, #0
   11388:	e7e3      	b.n	11352 <d_print_mod+0x332>
   1138a:	4d2b      	ldr	r5, [pc, #172]	; (11438 <d_print_mod+0x418>)
   1138c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11390:	1daf      	adds	r7, r5, #6
   11392:	f04f 0800 	mov.w	r8, #0
   11396:	e009      	b.n	113ac <d_print_mod+0x38c>
   11398:	460b      	mov	r3, r1
   1139a:	3101      	adds	r1, #1
   1139c:	42bd      	cmp	r5, r7
   1139e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   113a2:	54e6      	strb	r6, [r4, r3]
   113a4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   113a8:	f43f aed0 	beq.w	1114c <d_print_mod+0x12c>
   113ac:	29ff      	cmp	r1, #255	; 0xff
   113ae:	f815 6b01 	ldrb.w	r6, [r5], #1
   113b2:	d1f1      	bne.n	11398 <d_print_mod+0x378>
   113b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   113b8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   113bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   113c0:	4620      	mov	r0, r4
   113c2:	4798      	blx	r3
   113c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   113c8:	3301      	adds	r3, #1
   113ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   113ce:	2101      	movs	r1, #1
   113d0:	2300      	movs	r3, #0
   113d2:	e7e3      	b.n	1139c <d_print_mod+0x37c>
   113d4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   113d8:	2bff      	cmp	r3, #255	; 0xff
   113da:	f000 80cc 	beq.w	11576 <d_print_mod+0x556>
   113de:	2220      	movs	r2, #32
   113e0:	1c59      	adds	r1, r3, #1
   113e2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   113e6:	54e2      	strb	r2, [r4, r3]
   113e8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   113ec:	e6c3      	b.n	11176 <d_print_mod+0x156>
   113ee:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   113f2:	2bff      	cmp	r3, #255	; 0xff
   113f4:	f000 80ad 	beq.w	11552 <d_print_mod+0x532>
   113f8:	2220      	movs	r2, #32
   113fa:	1c59      	adds	r1, r3, #1
   113fc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11400:	54e2      	strb	r2, [r4, r3]
   11402:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   11406:	e6c5      	b.n	11194 <d_print_mod+0x174>
   11408:	686a      	ldr	r2, [r5, #4]
   1140a:	e692      	b.n	11132 <d_print_mod+0x112>
   1140c:	4d0b      	ldr	r5, [pc, #44]	; (1143c <d_print_mod+0x41c>)
   1140e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11412:	f105 0709 	add.w	r7, r5, #9
   11416:	f04f 0800 	mov.w	r8, #0
   1141a:	e01b      	b.n	11454 <d_print_mod+0x434>
   1141c:	000242fb 	.word	0x000242fb
   11420:	00024310 	.word	0x00024310
   11424:	00024313 	.word	0x00024313
   11428:	00024320 	.word	0x00024320
   1142c:	0002432c 	.word	0x0002432c
   11430:	00024330 	.word	0x00024330
   11434:	000242e7 	.word	0x000242e7
   11438:	000242f4 	.word	0x000242f4
   1143c:	000242db 	.word	0x000242db
   11440:	460b      	mov	r3, r1
   11442:	3101      	adds	r1, #1
   11444:	42af      	cmp	r7, r5
   11446:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1144a:	54e6      	strb	r6, [r4, r3]
   1144c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   11450:	f43f ae7c 	beq.w	1114c <d_print_mod+0x12c>
   11454:	29ff      	cmp	r1, #255	; 0xff
   11456:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1145a:	d1f1      	bne.n	11440 <d_print_mod+0x420>
   1145c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11460:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   11464:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11468:	4620      	mov	r0, r4
   1146a:	4798      	blx	r3
   1146c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11470:	3301      	adds	r3, #1
   11472:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11476:	2101      	movs	r1, #1
   11478:	2300      	movs	r3, #0
   1147a:	e7e3      	b.n	11444 <d_print_mod+0x424>
   1147c:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   11480:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   11484:	462a      	mov	r2, r5
   11486:	9301      	str	r3, [sp, #4]
   11488:	9500      	str	r5, [sp, #0]
   1148a:	f7fd f815 	bl	e4b8 <d_print_comp_inner>
   1148e:	9b01      	ldr	r3, [sp, #4]
   11490:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   11494:	e65a      	b.n	1114c <d_print_mod+0x12c>
   11496:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1149a:	686a      	ldr	r2, [r5, #4]
   1149c:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   114a0:	4641      	mov	r1, r8
   114a2:	4620      	mov	r0, r4
   114a4:	9301      	str	r3, [sp, #4]
   114a6:	9200      	str	r2, [sp, #0]
   114a8:	f7fd f806 	bl	e4b8 <d_print_comp_inner>
   114ac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   114b0:	9b01      	ldr	r3, [sp, #4]
   114b2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   114b6:	29ff      	cmp	r1, #255	; 0xff
   114b8:	d03a      	beq.n	11530 <d_print_mod+0x510>
   114ba:	1c4a      	adds	r2, r1, #1
   114bc:	2329      	movs	r3, #41	; 0x29
   114be:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   114c2:	5463      	strb	r3, [r4, r1]
   114c4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   114c8:	e640      	b.n	1114c <d_print_mod+0x12c>
   114ca:	2600      	movs	r6, #0
   114cc:	4619      	mov	r1, r3
   114ce:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   114d2:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   114d6:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   114da:	4798      	blx	r3
   114dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   114e0:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   114e4:	1c5a      	adds	r2, r3, #1
   114e6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   114ea:	4633      	mov	r3, r6
   114ec:	e6c7      	b.n	1127e <d_print_mod+0x25e>
   114ee:	2500      	movs	r5, #0
   114f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   114f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   114f8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   114fc:	4620      	mov	r0, r4
   114fe:	4798      	blx	r3
   11500:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11504:	3301      	adds	r3, #1
   11506:	4629      	mov	r1, r5
   11508:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1150c:	2201      	movs	r2, #1
   1150e:	e636      	b.n	1117e <d_print_mod+0x15e>
   11510:	2600      	movs	r6, #0
   11512:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   11516:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1151a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1151e:	4798      	blx	r3
   11520:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11524:	3301      	adds	r3, #1
   11526:	4631      	mov	r1, r6
   11528:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1152c:	2201      	movs	r2, #1
   1152e:	e5f9      	b.n	11124 <d_print_mod+0x104>
   11530:	2500      	movs	r5, #0
   11532:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11536:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1153a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1153e:	4620      	mov	r0, r4
   11540:	4798      	blx	r3
   11542:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11546:	3301      	adds	r3, #1
   11548:	4629      	mov	r1, r5
   1154a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1154e:	2201      	movs	r2, #1
   11550:	e7b4      	b.n	114bc <d_print_mod+0x49c>
   11552:	2500      	movs	r5, #0
   11554:	4619      	mov	r1, r3
   11556:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1155a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1155e:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   11562:	4798      	blx	r3
   11564:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11568:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   1156c:	1c5a      	adds	r2, r3, #1
   1156e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   11572:	462b      	mov	r3, r5
   11574:	e740      	b.n	113f8 <d_print_mod+0x3d8>
   11576:	2500      	movs	r5, #0
   11578:	4619      	mov	r1, r3
   1157a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1157e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   11582:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   11586:	4798      	blx	r3
   11588:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1158c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   11590:	1c5a      	adds	r2, r3, #1
   11592:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   11596:	462b      	mov	r3, r5
   11598:	e721      	b.n	113de <d_print_mod+0x3be>
   1159a:	4619      	mov	r1, r3
   1159c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   115a0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   115a4:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   115a8:	4798      	blx	r3
   115aa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   115ae:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   115b2:	1c5a      	adds	r2, r3, #1
   115b4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   115b8:	462b      	mov	r3, r5
   115ba:	e5d2      	b.n	11162 <d_print_mod+0x142>

000115bc <d_print_mod_list>:
   115bc:	2a00      	cmp	r2, #0
   115be:	f000 80a1 	beq.w	11704 <d_print_mod_list+0x148>
   115c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115c6:	461e      	mov	r6, r3
   115c8:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
   115cc:	b089      	sub	sp, #36	; 0x24
   115ce:	4605      	mov	r5, r0
   115d0:	bb43      	cbnz	r3, 11624 <d_print_mod_list+0x68>
   115d2:	460f      	mov	r7, r1
   115d4:	4614      	mov	r4, r2
   115d6:	f04f 0801 	mov.w	r8, #1
   115da:	e002      	b.n	115e2 <d_print_mod_list+0x26>
   115dc:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   115e0:	bb03      	cbnz	r3, 11624 <d_print_mod_list+0x68>
   115e2:	68a3      	ldr	r3, [r4, #8]
   115e4:	b9db      	cbnz	r3, 1161e <d_print_mod_list+0x62>
   115e6:	6862      	ldr	r2, [r4, #4]
   115e8:	7813      	ldrb	r3, [r2, #0]
   115ea:	b92e      	cbnz	r6, 115f8 <d_print_mod_list+0x3c>
   115ec:	f1a3 011c 	sub.w	r1, r3, #28
   115f0:	2904      	cmp	r1, #4
   115f2:	d914      	bls.n	1161e <d_print_mod_list+0x62>
   115f4:	2b4c      	cmp	r3, #76	; 0x4c
   115f6:	d012      	beq.n	1161e <d_print_mod_list+0x62>
   115f8:	68e1      	ldr	r1, [r4, #12]
   115fa:	f8c4 8008 	str.w	r8, [r4, #8]
   115fe:	2b29      	cmp	r3, #41	; 0x29
   11600:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
   11604:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
   11608:	d00f      	beq.n	1162a <d_print_mod_list+0x6e>
   1160a:	2b2a      	cmp	r3, #42	; 0x2a
   1160c:	d018      	beq.n	11640 <d_print_mod_list+0x84>
   1160e:	2b02      	cmp	r3, #2
   11610:	d021      	beq.n	11656 <d_print_mod_list+0x9a>
   11612:	4639      	mov	r1, r7
   11614:	4628      	mov	r0, r5
   11616:	f7ff fd03 	bl	11020 <d_print_mod>
   1161a:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   1161e:	6824      	ldr	r4, [r4, #0]
   11620:	2c00      	cmp	r4, #0
   11622:	d1db      	bne.n	115dc <d_print_mod_list+0x20>
   11624:	b009      	add	sp, #36	; 0x24
   11626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1162a:	6823      	ldr	r3, [r4, #0]
   1162c:	3208      	adds	r2, #8
   1162e:	4639      	mov	r1, r7
   11630:	4628      	mov	r0, r5
   11632:	f000 f9d9 	bl	119e8 <d_print_function_type.isra.11>
   11636:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   1163a:	b009      	add	sp, #36	; 0x24
   1163c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11640:	6823      	ldr	r3, [r4, #0]
   11642:	3204      	adds	r2, #4
   11644:	4639      	mov	r1, r7
   11646:	4628      	mov	r0, r5
   11648:	f000 f8f2 	bl	11830 <d_print_array_type.isra.10>
   1164c:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   11650:	b009      	add	sp, #36	; 0x24
   11652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11656:	2600      	movs	r6, #0
   11658:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
   1165c:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
   11660:	6852      	ldr	r2, [r2, #4]
   11662:	4639      	mov	r1, r7
   11664:	4628      	mov	r0, r5
   11666:	f7ff fccb 	bl	11000 <d_print_comp>
   1166a:	f017 0a04 	ands.w	sl, r7, #4
   1166e:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
   11672:	d023      	beq.n	116bc <d_print_mod_list+0x100>
   11674:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   11678:	29ff      	cmp	r1, #255	; 0xff
   1167a:	f000 80c1 	beq.w	11800 <d_print_mod_list+0x244>
   1167e:	1c4a      	adds	r2, r1, #1
   11680:	232e      	movs	r3, #46	; 0x2e
   11682:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
   11686:	546b      	strb	r3, [r5, r1]
   11688:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
   1168c:	6863      	ldr	r3, [r4, #4]
   1168e:	689c      	ldr	r4, [r3, #8]
   11690:	7823      	ldrb	r3, [r4, #0]
   11692:	2b46      	cmp	r3, #70	; 0x46
   11694:	d037      	beq.n	11706 <d_print_mod_list+0x14a>
   11696:	f1a3 021c 	sub.w	r2, r3, #28
   1169a:	2a04      	cmp	r2, #4
   1169c:	d90b      	bls.n	116b6 <d_print_mod_list+0xfa>
   1169e:	2b4c      	cmp	r3, #76	; 0x4c
   116a0:	d009      	beq.n	116b6 <d_print_mod_list+0xfa>
   116a2:	4622      	mov	r2, r4
   116a4:	4639      	mov	r1, r7
   116a6:	4628      	mov	r0, r5
   116a8:	f7ff fcaa 	bl	11000 <d_print_comp>
   116ac:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   116b0:	b009      	add	sp, #36	; 0x24
   116b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116b6:	6864      	ldr	r4, [r4, #4]
   116b8:	7823      	ldrb	r3, [r4, #0]
   116ba:	e7ec      	b.n	11696 <d_print_mod_list+0xda>
   116bc:	4e58      	ldr	r6, [pc, #352]	; (11820 <d_print_mod_list+0x264>)
   116be:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   116c2:	f106 0b02 	add.w	fp, r6, #2
   116c6:	e009      	b.n	116dc <d_print_mod_list+0x120>
   116c8:	460b      	mov	r3, r1
   116ca:	3101      	adds	r1, #1
   116cc:	455e      	cmp	r6, fp
   116ce:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   116d2:	f805 8003 	strb.w	r8, [r5, r3]
   116d6:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   116da:	d0d7      	beq.n	1168c <d_print_mod_list+0xd0>
   116dc:	29ff      	cmp	r1, #255	; 0xff
   116de:	f816 8b01 	ldrb.w	r8, [r6], #1
   116e2:	d1f1      	bne.n	116c8 <d_print_mod_list+0x10c>
   116e4:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   116e8:	f885 a0ff 	strb.w	sl, [r5, #255]	; 0xff
   116ec:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   116f0:	4628      	mov	r0, r5
   116f2:	4798      	blx	r3
   116f4:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   116f8:	3301      	adds	r3, #1
   116fa:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   116fe:	2101      	movs	r1, #1
   11700:	2300      	movs	r3, #0
   11702:	e7e3      	b.n	116cc <d_print_mod_list+0x110>
   11704:	4770      	bx	lr
   11706:	4e47      	ldr	r6, [pc, #284]	; (11824 <d_print_mod_list+0x268>)
   11708:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1170c:	f106 0a0d 	add.w	sl, r6, #13
   11710:	f04f 0b00 	mov.w	fp, #0
   11714:	e009      	b.n	1172a <d_print_mod_list+0x16e>
   11716:	460b      	mov	r3, r1
   11718:	3101      	adds	r1, #1
   1171a:	45b2      	cmp	sl, r6
   1171c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   11720:	f805 8003 	strb.w	r8, [r5, r3]
   11724:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   11728:	d013      	beq.n	11752 <d_print_mod_list+0x196>
   1172a:	29ff      	cmp	r1, #255	; 0xff
   1172c:	f816 8b01 	ldrb.w	r8, [r6], #1
   11730:	d1f1      	bne.n	11716 <d_print_mod_list+0x15a>
   11732:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   11736:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   1173a:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1173e:	4628      	mov	r0, r5
   11740:	4798      	blx	r3
   11742:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   11746:	3301      	adds	r3, #1
   11748:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1174c:	2101      	movs	r1, #1
   1174e:	2300      	movs	r3, #0
   11750:	e7e3      	b.n	1171a <d_print_mod_list+0x15e>
   11752:	68a2      	ldr	r2, [r4, #8]
   11754:	4934      	ldr	r1, [pc, #208]	; (11828 <d_print_mod_list+0x26c>)
   11756:	3201      	adds	r2, #1
   11758:	a801      	add	r0, sp, #4
   1175a:	f004 fc63 	bl	16024 <sprintf>
   1175e:	a801      	add	r0, sp, #4
   11760:	f005 f82e 	bl	167c0 <strlen>
   11764:	b328      	cbz	r0, 117b2 <d_print_mod_list+0x1f6>
   11766:	ae01      	add	r6, sp, #4
   11768:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1176c:	eb06 0a00 	add.w	sl, r6, r0
   11770:	f04f 0b00 	mov.w	fp, #0
   11774:	e009      	b.n	1178a <d_print_mod_list+0x1ce>
   11776:	460b      	mov	r3, r1
   11778:	3101      	adds	r1, #1
   1177a:	45b2      	cmp	sl, r6
   1177c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   11780:	f805 8003 	strb.w	r8, [r5, r3]
   11784:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   11788:	d015      	beq.n	117b6 <d_print_mod_list+0x1fa>
   1178a:	29ff      	cmp	r1, #255	; 0xff
   1178c:	f816 8b01 	ldrb.w	r8, [r6], #1
   11790:	d1f1      	bne.n	11776 <d_print_mod_list+0x1ba>
   11792:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   11796:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   1179a:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1179e:	4628      	mov	r0, r5
   117a0:	4798      	blx	r3
   117a2:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   117a6:	3301      	adds	r3, #1
   117a8:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   117ac:	2101      	movs	r1, #1
   117ae:	2300      	movs	r3, #0
   117b0:	e7e3      	b.n	1177a <d_print_mod_list+0x1be>
   117b2:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   117b6:	4e1d      	ldr	r6, [pc, #116]	; (1182c <d_print_mod_list+0x270>)
   117b8:	f04f 0b00 	mov.w	fp, #0
   117bc:	f106 0a03 	add.w	sl, r6, #3
   117c0:	e00a      	b.n	117d8 <d_print_mod_list+0x21c>
   117c2:	460b      	mov	r3, r1
   117c4:	3101      	adds	r1, #1
   117c6:	45b2      	cmp	sl, r6
   117c8:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   117cc:	f805 8003 	strb.w	r8, [r5, r3]
   117d0:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   117d4:	f43f af6f 	beq.w	116b6 <d_print_mod_list+0xfa>
   117d8:	29ff      	cmp	r1, #255	; 0xff
   117da:	f816 8b01 	ldrb.w	r8, [r6], #1
   117de:	d1f0      	bne.n	117c2 <d_print_mod_list+0x206>
   117e0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   117e4:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   117e8:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   117ec:	4628      	mov	r0, r5
   117ee:	4798      	blx	r3
   117f0:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   117f4:	3301      	adds	r3, #1
   117f6:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   117fa:	2101      	movs	r1, #1
   117fc:	2300      	movs	r3, #0
   117fe:	e7e2      	b.n	117c6 <d_print_mod_list+0x20a>
   11800:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   11804:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   11808:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
   1180c:	4628      	mov	r0, r5
   1180e:	4798      	blx	r3
   11810:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   11814:	3301      	adds	r3, #1
   11816:	4631      	mov	r1, r6
   11818:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1181c:	2201      	movs	r2, #1
   1181e:	e72f      	b.n	11680 <d_print_mod_list+0xc4>
   11820:	00024064 	.word	0x00024064
   11824:	00024068 	.word	0x00024068
   11828:	00023004 	.word	0x00023004
   1182c:	00024078 	.word	0x00024078

00011830 <d_print_array_type.isra.10>:
   11830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11834:	4604      	mov	r4, r0
   11836:	460f      	mov	r7, r1
   11838:	4690      	mov	r8, r2
   1183a:	b163      	cbz	r3, 11856 <d_print_array_type.isra.10+0x26>
   1183c:	461e      	mov	r6, r3
   1183e:	461a      	mov	r2, r3
   11840:	6893      	ldr	r3, [r2, #8]
   11842:	b393      	cbz	r3, 118aa <d_print_array_type.isra.10+0x7a>
   11844:	6812      	ldr	r2, [r2, #0]
   11846:	2a00      	cmp	r2, #0
   11848:	d1fa      	bne.n	11840 <d_print_array_type.isra.10+0x10>
   1184a:	4613      	mov	r3, r2
   1184c:	4639      	mov	r1, r7
   1184e:	4632      	mov	r2, r6
   11850:	4620      	mov	r0, r4
   11852:	f7ff feb3 	bl	115bc <d_print_mod_list>
   11856:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1185a:	29ff      	cmp	r1, #255	; 0xff
   1185c:	f000 808d 	beq.w	1197a <d_print_array_type.isra.10+0x14a>
   11860:	1c4b      	adds	r3, r1, #1
   11862:	2220      	movs	r2, #32
   11864:	2bff      	cmp	r3, #255	; 0xff
   11866:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1186a:	5462      	strb	r2, [r4, r1]
   1186c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   11870:	d068      	beq.n	11944 <d_print_array_type.isra.10+0x114>
   11872:	225b      	movs	r2, #91	; 0x5b
   11874:	1c59      	adds	r1, r3, #1
   11876:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1187a:	54e2      	strb	r2, [r4, r3]
   1187c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   11880:	f8d8 2000 	ldr.w	r2, [r8]
   11884:	b12a      	cbz	r2, 11892 <d_print_array_type.isra.10+0x62>
   11886:	4639      	mov	r1, r7
   11888:	4620      	mov	r0, r4
   1188a:	f7ff fbb9 	bl	11000 <d_print_comp>
   1188e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   11892:	29ff      	cmp	r1, #255	; 0xff
   11894:	f000 8082 	beq.w	1199c <d_print_array_type.isra.10+0x16c>
   11898:	1c4a      	adds	r2, r1, #1
   1189a:	235d      	movs	r3, #93	; 0x5d
   1189c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   118a0:	5463      	strb	r3, [r4, r1]
   118a2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   118a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118aa:	6852      	ldr	r2, [r2, #4]
   118ac:	7812      	ldrb	r2, [r2, #0]
   118ae:	2a2a      	cmp	r2, #42	; 0x2a
   118b0:	d03f      	beq.n	11932 <d_print_array_type.isra.10+0x102>
   118b2:	f8df 9130 	ldr.w	r9, [pc, #304]	; 119e4 <d_print_array_type.isra.10+0x1b4>
   118b6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   118ba:	461d      	mov	r5, r3
   118bc:	f109 0b02 	add.w	fp, r9, #2
   118c0:	e00a      	b.n	118d8 <d_print_array_type.isra.10+0xa8>
   118c2:	460b      	mov	r3, r1
   118c4:	45cb      	cmp	fp, r9
   118c6:	f101 0101 	add.w	r1, r1, #1
   118ca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   118ce:	f804 a003 	strb.w	sl, [r4, r3]
   118d2:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   118d6:	d01a      	beq.n	1190e <d_print_array_type.isra.10+0xde>
   118d8:	29ff      	cmp	r1, #255	; 0xff
   118da:	f819 ab01 	ldrb.w	sl, [r9], #1
   118de:	d1f0      	bne.n	118c2 <d_print_array_type.isra.10+0x92>
   118e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   118e4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   118e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   118ec:	4620      	mov	r0, r4
   118ee:	4798      	blx	r3
   118f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   118f4:	3301      	adds	r3, #1
   118f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   118fa:	2300      	movs	r3, #0
   118fc:	2101      	movs	r1, #1
   118fe:	45cb      	cmp	fp, r9
   11900:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11904:	f804 a003 	strb.w	sl, [r4, r3]
   11908:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1190c:	d1e4      	bne.n	118d8 <d_print_array_type.isra.10+0xa8>
   1190e:	2300      	movs	r3, #0
   11910:	4632      	mov	r2, r6
   11912:	4639      	mov	r1, r7
   11914:	4620      	mov	r0, r4
   11916:	f7ff fe51 	bl	115bc <d_print_mod_list>
   1191a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1191e:	2bff      	cmp	r3, #255	; 0xff
   11920:	d04d      	beq.n	119be <d_print_array_type.isra.10+0x18e>
   11922:	1c59      	adds	r1, r3, #1
   11924:	2229      	movs	r2, #41	; 0x29
   11926:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1192a:	54e2      	strb	r2, [r4, r3]
   1192c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   11930:	e793      	b.n	1185a <d_print_array_type.isra.10+0x2a>
   11932:	4632      	mov	r2, r6
   11934:	4639      	mov	r1, r7
   11936:	4620      	mov	r0, r4
   11938:	f7ff fe40 	bl	115bc <d_print_mod_list>
   1193c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   11940:	2bff      	cmp	r3, #255	; 0xff
   11942:	d196      	bne.n	11872 <d_print_array_type.isra.10+0x42>
   11944:	2200      	movs	r2, #0
   11946:	4619      	mov	r1, r3
   11948:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1194c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11950:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11954:	4620      	mov	r0, r4
   11956:	4798      	blx	r3
   11958:	235b      	movs	r3, #91	; 0x5b
   1195a:	7023      	strb	r3, [r4, #0]
   1195c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   11960:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11964:	f8d8 2000 	ldr.w	r2, [r8]
   11968:	3301      	adds	r3, #1
   1196a:	2101      	movs	r1, #1
   1196c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11970:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11974:	2a00      	cmp	r2, #0
   11976:	d186      	bne.n	11886 <d_print_array_type.isra.10+0x56>
   11978:	e78e      	b.n	11898 <d_print_array_type.isra.10+0x68>
   1197a:	2500      	movs	r5, #0
   1197c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11980:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   11984:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11988:	4620      	mov	r0, r4
   1198a:	4798      	blx	r3
   1198c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11990:	3301      	adds	r3, #1
   11992:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11996:	4629      	mov	r1, r5
   11998:	2301      	movs	r3, #1
   1199a:	e762      	b.n	11862 <d_print_array_type.isra.10+0x32>
   1199c:	2500      	movs	r5, #0
   1199e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   119a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   119a6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   119aa:	4620      	mov	r0, r4
   119ac:	4798      	blx	r3
   119ae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   119b2:	3301      	adds	r3, #1
   119b4:	4629      	mov	r1, r5
   119b6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   119ba:	2201      	movs	r2, #1
   119bc:	e76d      	b.n	1189a <d_print_array_type.isra.10+0x6a>
   119be:	2500      	movs	r5, #0
   119c0:	4619      	mov	r1, r3
   119c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   119c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   119ca:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   119ce:	4620      	mov	r0, r4
   119d0:	4798      	blx	r3
   119d2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   119d6:	1c5a      	adds	r2, r3, #1
   119d8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   119dc:	462b      	mov	r3, r5
   119de:	2101      	movs	r1, #1
   119e0:	e7a0      	b.n	11924 <d_print_array_type.isra.10+0xf4>
   119e2:	bf00      	nop
   119e4:	00024254 	.word	0x00024254

000119e8 <d_print_function_type.isra.11>:
   119e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   119ec:	4604      	mov	r4, r0
   119ee:	b083      	sub	sp, #12
   119f0:	460e      	mov	r6, r1
   119f2:	4617      	mov	r7, r2
   119f4:	461d      	mov	r5, r3
   119f6:	b34b      	cbz	r3, 11a4c <d_print_function_type.isra.11+0x64>
   119f8:	689b      	ldr	r3, [r3, #8]
   119fa:	bb3b      	cbnz	r3, 11a4c <d_print_function_type.isra.11+0x64>
   119fc:	462a      	mov	r2, r5
   119fe:	2001      	movs	r0, #1
   11a00:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 11bcc <d_print_function_type.isra.11+0x1e4>
   11a04:	e006      	b.n	11a14 <d_print_function_type.isra.11+0x2c>
   11a06:	f411 6f60 	tst.w	r1, #3584	; 0xe00
   11a0a:	d15a      	bne.n	11ac2 <d_print_function_type.isra.11+0xda>
   11a0c:	6812      	ldr	r2, [r2, #0]
   11a0e:	b1ea      	cbz	r2, 11a4c <d_print_function_type.isra.11+0x64>
   11a10:	6893      	ldr	r3, [r2, #8]
   11a12:	b9db      	cbnz	r3, 11a4c <d_print_function_type.isra.11+0x64>
   11a14:	6853      	ldr	r3, [r2, #4]
   11a16:	781b      	ldrb	r3, [r3, #0]
   11a18:	3b19      	subs	r3, #25
   11a1a:	b2db      	uxtb	r3, r3
   11a1c:	2b12      	cmp	r3, #18
   11a1e:	fa00 f103 	lsl.w	r1, r0, r3
   11a22:	d8f3      	bhi.n	11a0c <d_print_function_type.isra.11+0x24>
   11a24:	ea11 0f0e 	tst.w	r1, lr
   11a28:	d0ed      	beq.n	11a06 <d_print_function_type.isra.11+0x1e>
   11a2a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   11a2e:	2b20      	cmp	r3, #32
   11a30:	d04d      	beq.n	11ace <d_print_function_type.isra.11+0xe6>
   11a32:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   11a36:	2bff      	cmp	r3, #255	; 0xff
   11a38:	f000 80b4 	beq.w	11ba4 <d_print_function_type.isra.11+0x1bc>
   11a3c:	1c59      	adds	r1, r3, #1
   11a3e:	2220      	movs	r2, #32
   11a40:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11a44:	54e2      	strb	r2, [r4, r3]
   11a46:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   11a4a:	e042      	b.n	11ad2 <d_print_function_type.isra.11+0xea>
   11a4c:	2300      	movs	r3, #0
   11a4e:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   11a52:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   11a56:	4631      	mov	r1, r6
   11a58:	462a      	mov	r2, r5
   11a5a:	4620      	mov	r0, r4
   11a5c:	f7ff fdae 	bl	115bc <d_print_mod_list>
   11a60:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   11a64:	29ff      	cmp	r1, #255	; 0xff
   11a66:	d056      	beq.n	11b16 <d_print_function_type.isra.11+0x12e>
   11a68:	1c4b      	adds	r3, r1, #1
   11a6a:	2228      	movs	r2, #40	; 0x28
   11a6c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   11a70:	5462      	strb	r2, [r4, r1]
   11a72:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   11a76:	6838      	ldr	r0, [r7, #0]
   11a78:	b178      	cbz	r0, 11a9a <d_print_function_type.isra.11+0xb2>
   11a7a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   11a7e:	9000      	str	r0, [sp, #0]
   11a80:	4602      	mov	r2, r0
   11a82:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   11a86:	4631      	mov	r1, r6
   11a88:	4620      	mov	r0, r4
   11a8a:	9301      	str	r3, [sp, #4]
   11a8c:	f7fc fd14 	bl	e4b8 <d_print_comp_inner>
   11a90:	9a01      	ldr	r2, [sp, #4]
   11a92:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   11a96:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   11a9a:	2bff      	cmp	r3, #255	; 0xff
   11a9c:	d04d      	beq.n	11b3a <d_print_function_type.isra.11+0x152>
   11a9e:	1c5a      	adds	r2, r3, #1
   11aa0:	2029      	movs	r0, #41	; 0x29
   11aa2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   11aa6:	4631      	mov	r1, r6
   11aa8:	54e0      	strb	r0, [r4, r3]
   11aaa:	462a      	mov	r2, r5
   11aac:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
   11ab0:	2301      	movs	r3, #1
   11ab2:	4620      	mov	r0, r4
   11ab4:	f7ff fd82 	bl	115bc <d_print_mod_list>
   11ab8:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
   11abc:	b003      	add	sp, #12
   11abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11ac2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   11ac6:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
   11aca:	2a28      	cmp	r2, #40	; 0x28
   11acc:	d1af      	bne.n	11a2e <d_print_function_type.isra.11+0x46>
   11ace:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   11ad2:	29ff      	cmp	r1, #255	; 0xff
   11ad4:	d054      	beq.n	11b80 <d_print_function_type.isra.11+0x198>
   11ad6:	1c4a      	adds	r2, r1, #1
   11ad8:	2328      	movs	r3, #40	; 0x28
   11ada:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   11ade:	5463      	strb	r3, [r4, r1]
   11ae0:	f04f 0900 	mov.w	r9, #0
   11ae4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   11ae8:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   11aec:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   11af0:	464b      	mov	r3, r9
   11af2:	462a      	mov	r2, r5
   11af4:	4631      	mov	r1, r6
   11af6:	4620      	mov	r0, r4
   11af8:	f7ff fd60 	bl	115bc <d_print_mod_list>
   11afc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   11b00:	2bff      	cmp	r3, #255	; 0xff
   11b02:	d02c      	beq.n	11b5e <d_print_function_type.isra.11+0x176>
   11b04:	1c59      	adds	r1, r3, #1
   11b06:	2229      	movs	r2, #41	; 0x29
   11b08:	29ff      	cmp	r1, #255	; 0xff
   11b0a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11b0e:	54e2      	strb	r2, [r4, r3]
   11b10:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   11b14:	d1a8      	bne.n	11a68 <d_print_function_type.isra.11+0x80>
   11b16:	f04f 0900 	mov.w	r9, #0
   11b1a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11b1e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   11b22:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11b26:	4620      	mov	r0, r4
   11b28:	4798      	blx	r3
   11b2a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11b2e:	3301      	adds	r3, #1
   11b30:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11b34:	4649      	mov	r1, r9
   11b36:	2301      	movs	r3, #1
   11b38:	e797      	b.n	11a6a <d_print_function_type.isra.11+0x82>
   11b3a:	2700      	movs	r7, #0
   11b3c:	4619      	mov	r1, r3
   11b3e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11b42:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11b46:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   11b4a:	4620      	mov	r0, r4
   11b4c:	4798      	blx	r3
   11b4e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11b52:	1c5a      	adds	r2, r3, #1
   11b54:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   11b58:	463b      	mov	r3, r7
   11b5a:	2201      	movs	r2, #1
   11b5c:	e7a0      	b.n	11aa0 <d_print_function_type.isra.11+0xb8>
   11b5e:	4619      	mov	r1, r3
   11b60:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11b64:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11b68:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   11b6c:	4620      	mov	r0, r4
   11b6e:	4798      	blx	r3
   11b70:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11b74:	1c5a      	adds	r2, r3, #1
   11b76:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   11b7a:	464b      	mov	r3, r9
   11b7c:	2101      	movs	r1, #1
   11b7e:	e7c2      	b.n	11b06 <d_print_function_type.isra.11+0x11e>
   11b80:	f04f 0800 	mov.w	r8, #0
   11b84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11b88:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11b8c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   11b90:	4620      	mov	r0, r4
   11b92:	4798      	blx	r3
   11b94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11b98:	3301      	adds	r3, #1
   11b9a:	4641      	mov	r1, r8
   11b9c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11ba0:	2201      	movs	r2, #1
   11ba2:	e799      	b.n	11ad8 <d_print_function_type.isra.11+0xf0>
   11ba4:	f04f 0800 	mov.w	r8, #0
   11ba8:	4619      	mov	r1, r3
   11baa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11bae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11bb2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   11bb6:	4620      	mov	r0, r4
   11bb8:	4798      	blx	r3
   11bba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11bbe:	1c5a      	adds	r2, r3, #1
   11bc0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   11bc4:	4643      	mov	r3, r8
   11bc6:	2101      	movs	r1, #1
   11bc8:	e739      	b.n	11a3e <d_print_function_type.isra.11+0x56>
   11bca:	bf00      	nop
   11bcc:	00043107 	.word	0x00043107

00011bd0 <d_print_expr_op>:
   11bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11bd4:	7815      	ldrb	r5, [r2, #0]
   11bd6:	2d31      	cmp	r5, #49	; 0x31
   11bd8:	b082      	sub	sp, #8
   11bda:	4613      	mov	r3, r2
   11bdc:	4604      	mov	r4, r0
   11bde:	d00d      	beq.n	11bfc <d_print_expr_op+0x2c>
   11be0:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
   11be4:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   11be8:	e88d 0028 	stmia.w	sp, {r3, r5}
   11bec:	f7fc fc64 	bl	e4b8 <d_print_comp_inner>
   11bf0:	9b01      	ldr	r3, [sp, #4]
   11bf2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   11bf6:	b002      	add	sp, #8
   11bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11bfc:	6853      	ldr	r3, [r2, #4]
   11bfe:	689f      	ldr	r7, [r3, #8]
   11c00:	685d      	ldr	r5, [r3, #4]
   11c02:	2f00      	cmp	r7, #0
   11c04:	d0f7      	beq.n	11bf6 <d_print_expr_op+0x26>
   11c06:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11c0a:	442f      	add	r7, r5
   11c0c:	f04f 0800 	mov.w	r8, #0
   11c10:	e008      	b.n	11c24 <d_print_expr_op+0x54>
   11c12:	460b      	mov	r3, r1
   11c14:	3101      	adds	r1, #1
   11c16:	42bd      	cmp	r5, r7
   11c18:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11c1c:	54e6      	strb	r6, [r4, r3]
   11c1e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   11c22:	d0e8      	beq.n	11bf6 <d_print_expr_op+0x26>
   11c24:	29ff      	cmp	r1, #255	; 0xff
   11c26:	f815 6b01 	ldrb.w	r6, [r5], #1
   11c2a:	d1f2      	bne.n	11c12 <d_print_expr_op+0x42>
   11c2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11c30:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   11c34:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11c38:	4620      	mov	r0, r4
   11c3a:	4798      	blx	r3
   11c3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11c40:	3301      	adds	r3, #1
   11c42:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11c46:	2101      	movs	r1, #1
   11c48:	2300      	movs	r3, #0
   11c4a:	e7e4      	b.n	11c16 <d_print_expr_op+0x46>

00011c4c <d_print_subexpr>:
   11c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c4e:	7813      	ldrb	r3, [r2, #0]
   11c50:	2b01      	cmp	r3, #1
   11c52:	b083      	sub	sp, #12
   11c54:	4615      	mov	r5, r2
   11c56:	460e      	mov	r6, r1
   11c58:	4604      	mov	r4, r0
   11c5a:	d929      	bls.n	11cb0 <d_print_subexpr+0x64>
   11c5c:	2b30      	cmp	r3, #48	; 0x30
   11c5e:	d027      	beq.n	11cb0 <d_print_subexpr+0x64>
   11c60:	2b06      	cmp	r3, #6
   11c62:	d025      	beq.n	11cb0 <d_print_subexpr+0x64>
   11c64:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11c68:	29ff      	cmp	r1, #255	; 0xff
   11c6a:	d031      	beq.n	11cd0 <d_print_subexpr+0x84>
   11c6c:	1c4a      	adds	r2, r1, #1
   11c6e:	2328      	movs	r3, #40	; 0x28
   11c70:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   11c74:	5463      	strb	r3, [r4, r1]
   11c76:	462a      	mov	r2, r5
   11c78:	4631      	mov	r1, r6
   11c7a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   11c7e:	4620      	mov	r0, r4
   11c80:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   11c84:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   11c88:	9301      	str	r3, [sp, #4]
   11c8a:	9500      	str	r5, [sp, #0]
   11c8c:	f7fc fc14 	bl	e4b8 <d_print_comp_inner>
   11c90:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   11c94:	9b01      	ldr	r3, [sp, #4]
   11c96:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   11c9a:	29ff      	cmp	r1, #255	; 0xff
   11c9c:	d028      	beq.n	11cf0 <d_print_subexpr+0xa4>
   11c9e:	1c4a      	adds	r2, r1, #1
   11ca0:	2329      	movs	r3, #41	; 0x29
   11ca2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   11ca6:	5463      	strb	r3, [r4, r1]
   11ca8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   11cac:	b003      	add	sp, #12
   11cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11cb0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   11cb4:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   11cb8:	4631      	mov	r1, r6
   11cba:	462a      	mov	r2, r5
   11cbc:	4620      	mov	r0, r4
   11cbe:	9301      	str	r3, [sp, #4]
   11cc0:	9500      	str	r5, [sp, #0]
   11cc2:	f7fc fbf9 	bl	e4b8 <d_print_comp_inner>
   11cc6:	9b01      	ldr	r3, [sp, #4]
   11cc8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   11ccc:	b003      	add	sp, #12
   11cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11cd0:	2700      	movs	r7, #0
   11cd2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11cd6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11cda:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   11cde:	4798      	blx	r3
   11ce0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11ce4:	3301      	adds	r3, #1
   11ce6:	4639      	mov	r1, r7
   11ce8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11cec:	2201      	movs	r2, #1
   11cee:	e7be      	b.n	11c6e <d_print_subexpr+0x22>
   11cf0:	2500      	movs	r5, #0
   11cf2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11cf6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11cfa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   11cfe:	4620      	mov	r0, r4
   11d00:	4798      	blx	r3
   11d02:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11d06:	3301      	adds	r3, #1
   11d08:	4629      	mov	r1, r5
   11d0a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11d0e:	2201      	movs	r2, #1
   11d10:	e7c6      	b.n	11ca0 <d_print_subexpr+0x54>
   11d12:	bf00      	nop

00011d14 <d_maybe_print_fold_expression.isra.15>:
   11d14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d18:	6852      	ldr	r2, [r2, #4]
   11d1a:	6812      	ldr	r2, [r2, #0]
   11d1c:	7815      	ldrb	r5, [r2, #0]
   11d1e:	2d66      	cmp	r5, #102	; 0x66
   11d20:	d002      	beq.n	11d28 <d_maybe_print_fold_expression.isra.15+0x14>
   11d22:	2000      	movs	r0, #0
   11d24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d28:	681b      	ldr	r3, [r3, #0]
   11d2a:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
   11d2e:	f8d3 9008 	ldr.w	r9, [r3, #8]
   11d32:	f8d3 8004 	ldr.w	r8, [r3, #4]
   11d36:	f899 3000 	ldrb.w	r3, [r9]
   11d3a:	2b3b      	cmp	r3, #59	; 0x3b
   11d3c:	f04f 33ff 	mov.w	r3, #4294967295
   11d40:	bf04      	itt	eq
   11d42:	f8d9 5008 	ldreq.w	r5, [r9, #8]
   11d46:	f8d9 9004 	ldreq.w	r9, [r9, #4]
   11d4a:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   11d4e:	7853      	ldrb	r3, [r2, #1]
   11d50:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
   11d54:	bf18      	it	ne
   11d56:	2500      	movne	r5, #0
   11d58:	460e      	mov	r6, r1
   11d5a:	4604      	mov	r4, r0
   11d5c:	2b26      	cmp	r3, #38	; 0x26
   11d5e:	d82b      	bhi.n	11db8 <d_maybe_print_fold_expression.isra.15+0xa4>
   11d60:	e8df f003 	tbb	[pc, r3]
   11d64:	2a2a2a90 	.word	0x2a2a2a90
   11d68:	2a902a2a 	.word	0x2a902a2a
   11d6c:	2a2a2a2a 	.word	0x2a2a2a2a
   11d70:	2a2a2a2a 	.word	0x2a2a2a2a
   11d74:	2a2a2a2a 	.word	0x2a2a2a2a
   11d78:	2a2a2a2a 	.word	0x2a2a2a2a
   11d7c:	2a2a2a2a 	.word	0x2a2a2a2a
   11d80:	2a2a2a2a 	.word	0x2a2a2a2a
   11d84:	2a2a2a6a 	.word	0x2a2a2a6a
   11d88:	2a2a      	.short	0x2a2a
   11d8a:	2f          	.byte	0x2f
   11d8b:	00          	.byte	0x00
   11d8c:	4642      	mov	r2, r8
   11d8e:	4631      	mov	r1, r6
   11d90:	4620      	mov	r0, r4
   11d92:	f7ff ff1d 	bl	11bd0 <d_print_expr_op>
   11d96:	464a      	mov	r2, r9
   11d98:	4631      	mov	r1, r6
   11d9a:	4620      	mov	r0, r4
   11d9c:	f7ff ff56 	bl	11c4c <d_print_subexpr>
   11da0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   11da4:	29ff      	cmp	r1, #255	; 0xff
   11da6:	f000 80b2 	beq.w	11f0e <d_maybe_print_fold_expression.isra.15+0x1fa>
   11daa:	1c4a      	adds	r2, r1, #1
   11dac:	2329      	movs	r3, #41	; 0x29
   11dae:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   11db2:	5463      	strb	r3, [r4, r1]
   11db4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   11db8:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   11dbc:	2001      	movs	r0, #1
   11dbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11dc2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11dc6:	29ff      	cmp	r1, #255	; 0xff
   11dc8:	f000 80c5 	beq.w	11f56 <d_maybe_print_fold_expression.isra.15+0x242>
   11dcc:	1c4a      	adds	r2, r1, #1
   11dce:	2328      	movs	r3, #40	; 0x28
   11dd0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   11dd4:	4620      	mov	r0, r4
   11dd6:	5463      	strb	r3, [r4, r1]
   11dd8:	464a      	mov	r2, r9
   11dda:	4631      	mov	r1, r6
   11ddc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   11de0:	4d65      	ldr	r5, [pc, #404]	; (11f78 <d_maybe_print_fold_expression.isra.15+0x264>)
   11de2:	f7ff ff33 	bl	11c4c <d_print_subexpr>
   11de6:	4642      	mov	r2, r8
   11de8:	4631      	mov	r1, r6
   11dea:	4620      	mov	r0, r4
   11dec:	f7ff fef0 	bl	11bd0 <d_print_expr_op>
   11df0:	f105 0904 	add.w	r9, r5, #4
   11df4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   11df8:	f04f 0800 	mov.w	r8, #0
   11dfc:	e008      	b.n	11e10 <d_maybe_print_fold_expression.isra.15+0xfc>
   11dfe:	460b      	mov	r3, r1
   11e00:	3101      	adds	r1, #1
   11e02:	45a9      	cmp	r9, r5
   11e04:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11e08:	54e6      	strb	r6, [r4, r3]
   11e0a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   11e0e:	d0d3      	beq.n	11db8 <d_maybe_print_fold_expression.isra.15+0xa4>
   11e10:	29ff      	cmp	r1, #255	; 0xff
   11e12:	f815 6b01 	ldrb.w	r6, [r5], #1
   11e16:	d1f2      	bne.n	11dfe <d_maybe_print_fold_expression.isra.15+0xea>
   11e18:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11e1c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   11e20:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11e24:	4620      	mov	r0, r4
   11e26:	4798      	blx	r3
   11e28:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11e2c:	3301      	adds	r3, #1
   11e2e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11e32:	2101      	movs	r1, #1
   11e34:	2300      	movs	r3, #0
   11e36:	e7e4      	b.n	11e02 <d_maybe_print_fold_expression.isra.15+0xee>
   11e38:	4d50      	ldr	r5, [pc, #320]	; (11f7c <d_maybe_print_fold_expression.isra.15+0x268>)
   11e3a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   11e3e:	f105 0b04 	add.w	fp, r5, #4
   11e42:	e009      	b.n	11e58 <d_maybe_print_fold_expression.isra.15+0x144>
   11e44:	460b      	mov	r3, r1
   11e46:	3101      	adds	r1, #1
   11e48:	455d      	cmp	r5, fp
   11e4a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11e4e:	f804 a003 	strb.w	sl, [r4, r3]
   11e52:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   11e56:	d099      	beq.n	11d8c <d_maybe_print_fold_expression.isra.15+0x78>
   11e58:	29ff      	cmp	r1, #255	; 0xff
   11e5a:	f815 ab01 	ldrb.w	sl, [r5], #1
   11e5e:	d1f1      	bne.n	11e44 <d_maybe_print_fold_expression.isra.15+0x130>
   11e60:	f04f 0300 	mov.w	r3, #0
   11e64:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   11e68:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11e6c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11e70:	4620      	mov	r0, r4
   11e72:	4798      	blx	r3
   11e74:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11e78:	3301      	adds	r3, #1
   11e7a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11e7e:	2101      	movs	r1, #1
   11e80:	2300      	movs	r3, #0
   11e82:	e7e1      	b.n	11e48 <d_maybe_print_fold_expression.isra.15+0x134>
   11e84:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   11e88:	2bff      	cmp	r3, #255	; 0xff
   11e8a:	d051      	beq.n	11f30 <d_maybe_print_fold_expression.isra.15+0x21c>
   11e8c:	1c59      	adds	r1, r3, #1
   11e8e:	f04f 0e28 	mov.w	lr, #40	; 0x28
   11e92:	464a      	mov	r2, r9
   11e94:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11e98:	4620      	mov	r0, r4
   11e9a:	f804 e003 	strb.w	lr, [r4, r3]
   11e9e:	4631      	mov	r1, r6
   11ea0:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
   11ea4:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 11f80 <d_maybe_print_fold_expression.isra.15+0x26c>
   11ea8:	f7ff fed0 	bl	11c4c <d_print_subexpr>
   11eac:	4631      	mov	r1, r6
   11eae:	4642      	mov	r2, r8
   11eb0:	4620      	mov	r0, r4
   11eb2:	f7ff fe8d 	bl	11bd0 <d_print_expr_op>
   11eb6:	f109 0b03 	add.w	fp, r9, #3
   11eba:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   11ebe:	e009      	b.n	11ed4 <d_maybe_print_fold_expression.isra.15+0x1c0>
   11ec0:	460b      	mov	r3, r1
   11ec2:	3101      	adds	r1, #1
   11ec4:	45cb      	cmp	fp, r9
   11ec6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   11eca:	f804 a003 	strb.w	sl, [r4, r3]
   11ece:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   11ed2:	d015      	beq.n	11f00 <d_maybe_print_fold_expression.isra.15+0x1ec>
   11ed4:	29ff      	cmp	r1, #255	; 0xff
   11ed6:	f819 ab01 	ldrb.w	sl, [r9], #1
   11eda:	d1f1      	bne.n	11ec0 <d_maybe_print_fold_expression.isra.15+0x1ac>
   11edc:	f04f 0300 	mov.w	r3, #0
   11ee0:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   11ee4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11ee8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11eec:	4620      	mov	r0, r4
   11eee:	4798      	blx	r3
   11ef0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11ef4:	3301      	adds	r3, #1
   11ef6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11efa:	2101      	movs	r1, #1
   11efc:	2300      	movs	r3, #0
   11efe:	e7e1      	b.n	11ec4 <d_maybe_print_fold_expression.isra.15+0x1b0>
   11f00:	4642      	mov	r2, r8
   11f02:	4631      	mov	r1, r6
   11f04:	4620      	mov	r0, r4
   11f06:	f7ff fe63 	bl	11bd0 <d_print_expr_op>
   11f0a:	462a      	mov	r2, r5
   11f0c:	e744      	b.n	11d98 <d_maybe_print_fold_expression.isra.15+0x84>
   11f0e:	2500      	movs	r5, #0
   11f10:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   11f14:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   11f18:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   11f1c:	4620      	mov	r0, r4
   11f1e:	4798      	blx	r3
   11f20:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11f24:	3301      	adds	r3, #1
   11f26:	4629      	mov	r1, r5
   11f28:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11f2c:	2201      	movs	r2, #1
   11f2e:	e73d      	b.n	11dac <d_maybe_print_fold_expression.isra.15+0x98>
   11f30:	f04f 0a00 	mov.w	sl, #0
   11f34:	4619      	mov	r1, r3
   11f36:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   11f3a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   11f3e:	f880 a0ff 	strb.w	sl, [r0, #255]	; 0xff
   11f42:	4798      	blx	r3
   11f44:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11f48:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
   11f4c:	1c5a      	adds	r2, r3, #1
   11f4e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   11f52:	4653      	mov	r3, sl
   11f54:	e79a      	b.n	11e8c <d_maybe_print_fold_expression.isra.15+0x178>
   11f56:	2500      	movs	r5, #0
   11f58:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   11f5c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   11f60:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   11f64:	4798      	blx	r3
   11f66:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   11f6a:	3301      	adds	r3, #1
   11f6c:	4629      	mov	r1, r5
   11f6e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   11f72:	2201      	movs	r2, #1
   11f74:	e72b      	b.n	11dce <d_maybe_print_fold_expression.isra.15+0xba>
   11f76:	bf00      	nop
   11f78:	00024344 	.word	0x00024344
   11f7c:	0002433c 	.word	0x0002433c
   11f80:	00024258 	.word	0x00024258

00011f84 <d_demangle_callback.constprop.17>:
   11f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f88:	b0e7      	sub	sp, #412	; 0x19c
   11f8a:	f890 9000 	ldrb.w	r9, [r0]
   11f8e:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   11f92:	af00      	add	r7, sp, #0
   11f94:	4605      	mov	r5, r0
   11f96:	4688      	mov	r8, r1
   11f98:	4616      	mov	r6, r2
   11f9a:	f000 80f1 	beq.w	12180 <d_demangle_callback.constprop.17+0x1fc>
   11f9e:	2208      	movs	r2, #8
   11fa0:	49bd      	ldr	r1, [pc, #756]	; (12298 <d_demangle_callback.constprop.17+0x314>)
   11fa2:	4628      	mov	r0, r5
   11fa4:	f004 fc7a 	bl	1689c <strncmp>
   11fa8:	b948      	cbnz	r0, 11fbe <d_demangle_callback.constprop.17+0x3a>
   11faa:	7a2b      	ldrb	r3, [r5, #8]
   11fac:	2b2e      	cmp	r3, #46	; 0x2e
   11fae:	f000 80d6 	beq.w	1215e <d_demangle_callback.constprop.17+0x1da>
   11fb2:	2b5f      	cmp	r3, #95	; 0x5f
   11fb4:	f000 80d3 	beq.w	1215e <d_demangle_callback.constprop.17+0x1da>
   11fb8:	2b24      	cmp	r3, #36	; 0x24
   11fba:	f000 80d0 	beq.w	1215e <d_demangle_callback.constprop.17+0x1da>
   11fbe:	f04f 0a00 	mov.w	sl, #0
   11fc2:	4628      	mov	r0, r5
   11fc4:	f004 fbfc 	bl	167c0 <strlen>
   11fc8:	ea4f 0b40 	mov.w	fp, r0, lsl #1
   11fcc:	0083      	lsls	r3, r0, #2
   11fce:	eb03 020b 	add.w	r2, r3, fp
   11fd2:	0092      	lsls	r2, r2, #2
   11fd4:	3208      	adds	r2, #8
   11fd6:	330a      	adds	r3, #10
   11fd8:	ebad 0d02 	sub.w	sp, sp, r2
   11fdc:	f023 0307 	bic.w	r3, r3, #7
   11fe0:	2400      	movs	r4, #0
   11fe2:	466a      	mov	r2, sp
   11fe4:	1829      	adds	r1, r5, r0
   11fe6:	ebad 0d03 	sub.w	sp, sp, r3
   11fea:	f1ba 0f01 	cmp.w	sl, #1
   11fee:	f04f 0311 	mov.w	r3, #17
   11ff2:	627a      	str	r2, [r7, #36]	; 0x24
   11ff4:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
   11ff8:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
   11ffc:	617d      	str	r5, [r7, #20]
   11ffe:	623d      	str	r5, [r7, #32]
   12000:	63b8      	str	r0, [r7, #56]	; 0x38
   12002:	61b9      	str	r1, [r7, #24]
   12004:	61fb      	str	r3, [r7, #28]
   12006:	62bc      	str	r4, [r7, #40]	; 0x28
   12008:	637c      	str	r4, [r7, #52]	; 0x34
   1200a:	63fc      	str	r4, [r7, #60]	; 0x3c
   1200c:	643c      	str	r4, [r7, #64]	; 0x40
   1200e:	647c      	str	r4, [r7, #68]	; 0x44
   12010:	64bc      	str	r4, [r7, #72]	; 0x48
   12012:	64fc      	str	r4, [r7, #76]	; 0x4c
   12014:	f000 80bb 	beq.w	1218e <d_demangle_callback.constprop.17+0x20a>
   12018:	f0c0 80cf 	bcc.w	121ba <d_demangle_callback.constprop.17+0x236>
   1201c:	7aeb      	ldrb	r3, [r5, #11]
   1201e:	f1ba 0f02 	cmp.w	sl, #2
   12022:	bf18      	it	ne
   12024:	f04f 0944 	movne.w	r9, #68	; 0x44
   12028:	f105 0a0b 	add.w	sl, r5, #11
   1202c:	bf08      	it	eq
   1202e:	f04f 0943 	moveq.w	r9, #67	; 0x43
   12032:	2b5f      	cmp	r3, #95	; 0x5f
   12034:	f8c7 a020 	str.w	sl, [r7, #32]
   12038:	f000 80b2 	beq.w	121a0 <d_demangle_callback.constprop.17+0x21c>
   1203c:	4650      	mov	r0, sl
   1203e:	607a      	str	r2, [r7, #4]
   12040:	f004 fbbe 	bl	167c0 <strlen>
   12044:	f1bb 0f00 	cmp.w	fp, #0
   12048:	687a      	ldr	r2, [r7, #4]
   1204a:	f340 80bf 	ble.w	121cc <d_demangle_callback.constprop.17+0x248>
   1204e:	2301      	movs	r3, #1
   12050:	62bb      	str	r3, [r7, #40]	; 0x28
   12052:	2800      	cmp	r0, #0
   12054:	f000 80ba 	beq.w	121cc <d_demangle_callback.constprop.17+0x248>
   12058:	2300      	movs	r3, #0
   1205a:	f8c2 a004 	str.w	sl, [r2, #4]
   1205e:	6090      	str	r0, [r2, #8]
   12060:	7013      	strb	r3, [r2, #0]
   12062:	4649      	mov	r1, r9
   12064:	2300      	movs	r3, #0
   12066:	f107 0014 	add.w	r0, r7, #20
   1206a:	f7f9 fe33 	bl	bcd4 <d_make_comp>
   1206e:	6a3c      	ldr	r4, [r7, #32]
   12070:	4605      	mov	r5, r0
   12072:	4620      	mov	r0, r4
   12074:	f004 fba4 	bl	167c0 <strlen>
   12078:	1823      	adds	r3, r4, r0
   1207a:	623b      	str	r3, [r7, #32]
   1207c:	f814 9000 	ldrb.w	r9, [r4, r0]
   12080:	f1b9 0f00 	cmp.w	r9, #0
   12084:	f040 8086 	bne.w	12194 <d_demangle_callback.constprop.17+0x210>
   12088:	2d00      	cmp	r5, #0
   1208a:	f000 8083 	beq.w	12194 <d_demangle_callback.constprop.17+0x210>
   1208e:	f107 0450 	add.w	r4, r7, #80	; 0x50
   12092:	462a      	mov	r2, r5
   12094:	f507 71c2 	add.w	r1, r7, #388	; 0x184
   12098:	f507 70c8 	add.w	r0, r7, #400	; 0x190
   1209c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   120a0:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
   120a4:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
   120a8:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   120ac:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
   120b0:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   120b4:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
   120b8:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
   120bc:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
   120c0:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
   120c4:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   120c8:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   120cc:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
   120d0:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
   120d4:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
   120d8:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
   120dc:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   120e0:	f7f9 fec4 	bl	be6c <d_count_templates_scopes>
   120e4:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
   120e8:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   120ec:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   120f0:	613b      	str	r3, [r7, #16]
   120f2:	00d0      	lsls	r0, r2, #3
   120f4:	fb01 f102 	mul.w	r1, r1, r2
   120f8:	3008      	adds	r0, #8
   120fa:	46e8      	mov	r8, sp
   120fc:	00ca      	lsls	r2, r1, #3
   120fe:	ebad 0d00 	sub.w	sp, sp, r0
   12102:	4668      	mov	r0, sp
   12104:	3208      	adds	r2, #8
   12106:	ebad 0d02 	sub.w	sp, sp, r2
   1210a:	f107 060c 	add.w	r6, r7, #12
   1210e:	462a      	mov	r2, r5
   12110:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
   12114:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
   12118:	4620      	mov	r0, r4
   1211a:	2111      	movs	r1, #17
   1211c:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
   12120:	60fd      	str	r5, [r7, #12]
   12122:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
   12126:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
   1212a:	f7fc f9c5 	bl	e4b8 <d_print_comp_inner>
   1212e:	693b      	ldr	r3, [r7, #16]
   12130:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   12134:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   12138:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1213c:	f804 9001 	strb.w	r9, [r4, r1]
   12140:	4620      	mov	r0, r4
   12142:	46c5      	mov	sp, r8
   12144:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12148:	4798      	blx	r3
   1214a:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   1214e:	fab0 f080 	clz	r0, r0
   12152:	0940      	lsrs	r0, r0, #5
   12154:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   12158:	46bd      	mov	sp, r7
   1215a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1215e:	7a6b      	ldrb	r3, [r5, #9]
   12160:	2b44      	cmp	r3, #68	; 0x44
   12162:	d002      	beq.n	1216a <d_demangle_callback.constprop.17+0x1e6>
   12164:	2b49      	cmp	r3, #73	; 0x49
   12166:	f47f af2a 	bne.w	11fbe <d_demangle_callback.constprop.17+0x3a>
   1216a:	7aaa      	ldrb	r2, [r5, #10]
   1216c:	2a5f      	cmp	r2, #95	; 0x5f
   1216e:	f47f af26 	bne.w	11fbe <d_demangle_callback.constprop.17+0x3a>
   12172:	2b49      	cmp	r3, #73	; 0x49
   12174:	bf14      	ite	ne
   12176:	f04f 0a03 	movne.w	sl, #3
   1217a:	f04f 0a02 	moveq.w	sl, #2
   1217e:	e720      	b.n	11fc2 <d_demangle_callback.constprop.17+0x3e>
   12180:	7843      	ldrb	r3, [r0, #1]
   12182:	2b5a      	cmp	r3, #90	; 0x5a
   12184:	f47f af0b 	bne.w	11f9e <d_demangle_callback.constprop.17+0x1a>
   12188:	f04f 0a01 	mov.w	sl, #1
   1218c:	e719      	b.n	11fc2 <d_demangle_callback.constprop.17+0x3e>
   1218e:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   12192:	d01d      	beq.n	121d0 <d_demangle_callback.constprop.17+0x24c>
   12194:	2000      	movs	r0, #0
   12196:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1219a:	46bd      	mov	sp, r7
   1219c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121a0:	7b2b      	ldrb	r3, [r5, #12]
   121a2:	2b5a      	cmp	r3, #90	; 0x5a
   121a4:	f47f af4a 	bne.w	1203c <d_demangle_callback.constprop.17+0xb8>
   121a8:	350d      	adds	r5, #13
   121aa:	4621      	mov	r1, r4
   121ac:	f107 0014 	add.w	r0, r7, #20
   121b0:	623d      	str	r5, [r7, #32]
   121b2:	f7fb fe35 	bl	de20 <d_encoding>
   121b6:	4602      	mov	r2, r0
   121b8:	e753      	b.n	12062 <d_demangle_callback.constprop.17+0xde>
   121ba:	f107 0014 	add.w	r0, r7, #20
   121be:	f7fb f817 	bl	d1f0 <d_type>
   121c2:	6a3b      	ldr	r3, [r7, #32]
   121c4:	4605      	mov	r5, r0
   121c6:	f893 9000 	ldrb.w	r9, [r3]
   121ca:	e759      	b.n	12080 <d_demangle_callback.constprop.17+0xfc>
   121cc:	2200      	movs	r2, #0
   121ce:	e748      	b.n	12062 <d_demangle_callback.constprop.17+0xde>
   121d0:	786b      	ldrb	r3, [r5, #1]
   121d2:	2b5a      	cmp	r3, #90	; 0x5a
   121d4:	d1de      	bne.n	12194 <d_demangle_callback.constprop.17+0x210>
   121d6:	3502      	adds	r5, #2
   121d8:	4651      	mov	r1, sl
   121da:	f107 0014 	add.w	r0, r7, #20
   121de:	623d      	str	r5, [r7, #32]
   121e0:	f7fb fe1e 	bl	de20 <d_encoding>
   121e4:	69fb      	ldr	r3, [r7, #28]
   121e6:	07db      	lsls	r3, r3, #31
   121e8:	4605      	mov	r5, r0
   121ea:	d551      	bpl.n	12290 <d_demangle_callback.constprop.17+0x30c>
   121ec:	6a38      	ldr	r0, [r7, #32]
   121ee:	f890 9000 	ldrb.w	r9, [r0]
   121f2:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
   121f6:	f47f af43 	bne.w	12080 <d_demangle_callback.constprop.17+0xfc>
   121fa:	7843      	ldrb	r3, [r0, #1]
   121fc:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   12200:	2a19      	cmp	r2, #25
   12202:	d939      	bls.n	12278 <d_demangle_callback.constprop.17+0x2f4>
   12204:	2b5f      	cmp	r3, #95	; 0x5f
   12206:	d037      	beq.n	12278 <d_demangle_callback.constprop.17+0x2f4>
   12208:	3b30      	subs	r3, #48	; 0x30
   1220a:	2b09      	cmp	r3, #9
   1220c:	d840      	bhi.n	12290 <d_demangle_callback.constprop.17+0x30c>
   1220e:	7803      	ldrb	r3, [r0, #0]
   12210:	4602      	mov	r2, r0
   12212:	2b2e      	cmp	r3, #46	; 0x2e
   12214:	d112      	bne.n	1223c <d_demangle_callback.constprop.17+0x2b8>
   12216:	7853      	ldrb	r3, [r2, #1]
   12218:	3b30      	subs	r3, #48	; 0x30
   1221a:	2b09      	cmp	r3, #9
   1221c:	d80e      	bhi.n	1223c <d_demangle_callback.constprop.17+0x2b8>
   1221e:	7893      	ldrb	r3, [r2, #2]
   12220:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   12224:	2909      	cmp	r1, #9
   12226:	f102 0202 	add.w	r2, r2, #2
   1222a:	d8f2      	bhi.n	12212 <d_demangle_callback.constprop.17+0x28e>
   1222c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   12230:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   12234:	2909      	cmp	r1, #9
   12236:	d9f9      	bls.n	1222c <d_demangle_callback.constprop.17+0x2a8>
   12238:	2b2e      	cmp	r3, #46	; 0x2e
   1223a:	d0ec      	beq.n	12216 <d_demangle_callback.constprop.17+0x292>
   1223c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1223e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12240:	623a      	str	r2, [r7, #32]
   12242:	4299      	cmp	r1, r3
   12244:	da16      	bge.n	12274 <d_demangle_callback.constprop.17+0x2f0>
   12246:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
   1224a:	1c4b      	adds	r3, r1, #1
   1224c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   12250:	62bb      	str	r3, [r7, #40]	; 0x28
   12252:	eb1e 0381 	adds.w	r3, lr, r1, lsl #2
   12256:	d00d      	beq.n	12274 <d_demangle_callback.constprop.17+0x2f0>
   12258:	1a12      	subs	r2, r2, r0
   1225a:	d00b      	beq.n	12274 <d_demangle_callback.constprop.17+0x2f0>
   1225c:	f80e 4021 	strb.w	r4, [lr, r1, lsl #2]
   12260:	6058      	str	r0, [r3, #4]
   12262:	609a      	str	r2, [r3, #8]
   12264:	462a      	mov	r2, r5
   12266:	214d      	movs	r1, #77	; 0x4d
   12268:	f107 0014 	add.w	r0, r7, #20
   1226c:	f7f9 fd32 	bl	bcd4 <d_make_comp>
   12270:	4605      	mov	r5, r0
   12272:	e7bb      	b.n	121ec <d_demangle_callback.constprop.17+0x268>
   12274:	2300      	movs	r3, #0
   12276:	e7f5      	b.n	12264 <d_demangle_callback.constprop.17+0x2e0>
   12278:	1c81      	adds	r1, r0, #2
   1227a:	460a      	mov	r2, r1
   1227c:	f811 3b01 	ldrb.w	r3, [r1], #1
   12280:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
   12284:	f1be 0f19 	cmp.w	lr, #25
   12288:	d9f7      	bls.n	1227a <d_demangle_callback.constprop.17+0x2f6>
   1228a:	2b5f      	cmp	r3, #95	; 0x5f
   1228c:	d0f5      	beq.n	1227a <d_demangle_callback.constprop.17+0x2f6>
   1228e:	e7c0      	b.n	12212 <d_demangle_callback.constprop.17+0x28e>
   12290:	6a3b      	ldr	r3, [r7, #32]
   12292:	f893 9000 	ldrb.w	r9, [r3]
   12296:	e6f3      	b.n	12080 <d_demangle_callback.constprop.17+0xfc>
   12298:	00023ff4 	.word	0x00023ff4

0001229c <__cxa_demangle>:
   1229c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   122a0:	b084      	sub	sp, #16
   122a2:	b378      	cbz	r0, 12304 <__cxa_demangle+0x68>
   122a4:	b101      	cbz	r1, 122a8 <__cxa_demangle+0xc>
   122a6:	b36a      	cbz	r2, 12304 <__cxa_demangle+0x68>
   122a8:	2400      	movs	r4, #0
   122aa:	4616      	mov	r6, r2
   122ac:	460d      	mov	r5, r1
   122ae:	466a      	mov	r2, sp
   122b0:	4927      	ldr	r1, [pc, #156]	; (12350 <__cxa_demangle+0xb4>)
   122b2:	9400      	str	r4, [sp, #0]
   122b4:	461f      	mov	r7, r3
   122b6:	9401      	str	r4, [sp, #4]
   122b8:	9402      	str	r4, [sp, #8]
   122ba:	9403      	str	r4, [sp, #12]
   122bc:	f7ff fe62 	bl	11f84 <d_demangle_callback.constprop.17>
   122c0:	2800      	cmp	r0, #0
   122c2:	d03f      	beq.n	12344 <__cxa_demangle+0xa8>
   122c4:	9b03      	ldr	r3, [sp, #12]
   122c6:	b1d3      	cbz	r3, 122fe <__cxa_demangle+0x62>
   122c8:	f04f 0801 	mov.w	r8, #1
   122cc:	9c00      	ldr	r4, [sp, #0]
   122ce:	b35c      	cbz	r4, 12328 <__cxa_demangle+0x8c>
   122d0:	b33d      	cbz	r5, 12322 <__cxa_demangle+0x86>
   122d2:	4620      	mov	r0, r4
   122d4:	f004 fa74 	bl	167c0 <strlen>
   122d8:	6833      	ldr	r3, [r6, #0]
   122da:	4298      	cmp	r0, r3
   122dc:	d21b      	bcs.n	12316 <__cxa_demangle+0x7a>
   122de:	1c42      	adds	r2, r0, #1
   122e0:	4621      	mov	r1, r4
   122e2:	4628      	mov	r0, r5
   122e4:	f003 faec 	bl	158c0 <memcpy>
   122e8:	4620      	mov	r0, r4
   122ea:	f002 ff95 	bl	15218 <free>
   122ee:	462c      	mov	r4, r5
   122f0:	b10f      	cbz	r7, 122f6 <__cxa_demangle+0x5a>
   122f2:	2300      	movs	r3, #0
   122f4:	603b      	str	r3, [r7, #0]
   122f6:	4620      	mov	r0, r4
   122f8:	b004      	add	sp, #16
   122fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   122fe:	f8dd 8008 	ldr.w	r8, [sp, #8]
   12302:	e7e3      	b.n	122cc <__cxa_demangle+0x30>
   12304:	b113      	cbz	r3, 1230c <__cxa_demangle+0x70>
   12306:	f06f 0202 	mvn.w	r2, #2
   1230a:	601a      	str	r2, [r3, #0]
   1230c:	2400      	movs	r4, #0
   1230e:	4620      	mov	r0, r4
   12310:	b004      	add	sp, #16
   12312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12316:	4628      	mov	r0, r5
   12318:	f002 ff7e 	bl	15218 <free>
   1231c:	f8c6 8000 	str.w	r8, [r6]
   12320:	e7e6      	b.n	122f0 <__cxa_demangle+0x54>
   12322:	2e00      	cmp	r6, #0
   12324:	d1fa      	bne.n	1231c <__cxa_demangle+0x80>
   12326:	e7e3      	b.n	122f0 <__cxa_demangle+0x54>
   12328:	2f00      	cmp	r7, #0
   1232a:	d0ef      	beq.n	1230c <__cxa_demangle+0x70>
   1232c:	f1b8 0f01 	cmp.w	r8, #1
   12330:	d004      	beq.n	1233c <__cxa_demangle+0xa0>
   12332:	f06f 0301 	mvn.w	r3, #1
   12336:	603b      	str	r3, [r7, #0]
   12338:	2400      	movs	r4, #0
   1233a:	e7dc      	b.n	122f6 <__cxa_demangle+0x5a>
   1233c:	f04f 33ff 	mov.w	r3, #4294967295
   12340:	603b      	str	r3, [r7, #0]
   12342:	e7d8      	b.n	122f6 <__cxa_demangle+0x5a>
   12344:	9800      	ldr	r0, [sp, #0]
   12346:	f002 ff67 	bl	15218 <free>
   1234a:	2f00      	cmp	r7, #0
   1234c:	d1f1      	bne.n	12332 <__cxa_demangle+0x96>
   1234e:	e7dd      	b.n	1230c <__cxa_demangle+0x70>
   12350:	0000c3f5 	.word	0x0000c3f5

00012354 <__gcclibcxx_demangle_callback>:
   12354:	b160      	cbz	r0, 12370 <__gcclibcxx_demangle_callback+0x1c>
   12356:	b508      	push	{r3, lr}
   12358:	b139      	cbz	r1, 1236a <__gcclibcxx_demangle_callback+0x16>
   1235a:	f7ff fe13 	bl	11f84 <d_demangle_callback.constprop.17>
   1235e:	2800      	cmp	r0, #0
   12360:	bf0c      	ite	eq
   12362:	f06f 0001 	mvneq.w	r0, #1
   12366:	2000      	movne	r0, #0
   12368:	bd08      	pop	{r3, pc}
   1236a:	f06f 0002 	mvn.w	r0, #2
   1236e:	bd08      	pop	{r3, pc}
   12370:	f06f 0002 	mvn.w	r0, #2
   12374:	4770      	bx	lr
   12376:	bf00      	nop

00012378 <__cxa_current_exception_type>:
   12378:	b508      	push	{r3, lr}
   1237a:	f7f8 fe2b 	bl	afd4 <__cxa_get_globals>
   1237e:	6800      	ldr	r0, [r0, #0]
   12380:	b130      	cbz	r0, 12390 <__cxa_current_exception_type+0x18>
   12382:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   12386:	2b01      	cmp	r3, #1
   12388:	bf04      	itt	eq
   1238a:	6800      	ldreq	r0, [r0, #0]
   1238c:	3878      	subeq	r0, #120	; 0x78
   1238e:	6800      	ldr	r0, [r0, #0]
   12390:	bd08      	pop	{r3, pc}
   12392:	bf00      	nop
   12394:	0000      	movs	r0, r0
	...

00012398 <floor>:
   12398:	f3c1 520a 	ubfx	r2, r1, #20, #11
   1239c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   123a0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
   123a4:	2e13      	cmp	r6, #19
   123a6:	460b      	mov	r3, r1
   123a8:	460d      	mov	r5, r1
   123aa:	4604      	mov	r4, r0
   123ac:	4688      	mov	r8, r1
   123ae:	4607      	mov	r7, r0
   123b0:	dc1d      	bgt.n	123ee <floor+0x56>
   123b2:	2e00      	cmp	r6, #0
   123b4:	db40      	blt.n	12438 <floor+0xa0>
   123b6:	4a3c      	ldr	r2, [pc, #240]	; (124a8 <floor+0x110>)
   123b8:	fa42 f906 	asr.w	r9, r2, r6
   123bc:	ea01 0209 	and.w	r2, r1, r9
   123c0:	4302      	orrs	r2, r0
   123c2:	4686      	mov	lr, r0
   123c4:	d018      	beq.n	123f8 <floor+0x60>
   123c6:	a336      	add	r3, pc, #216	; (adr r3, 124a0 <floor+0x108>)
   123c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   123cc:	f000 fa96 	bl	128fc <__adddf3>
   123d0:	2200      	movs	r2, #0
   123d2:	2300      	movs	r3, #0
   123d4:	f000 fed4 	bl	13180 <__aeabi_dcmpgt>
   123d8:	b120      	cbz	r0, 123e4 <floor+0x4c>
   123da:	2d00      	cmp	r5, #0
   123dc:	db42      	blt.n	12464 <floor+0xcc>
   123de:	ea28 0509 	bic.w	r5, r8, r9
   123e2:	2700      	movs	r7, #0
   123e4:	463c      	mov	r4, r7
   123e6:	4629      	mov	r1, r5
   123e8:	4620      	mov	r0, r4
   123ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   123ee:	2e33      	cmp	r6, #51	; 0x33
   123f0:	dd06      	ble.n	12400 <floor+0x68>
   123f2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   123f6:	d02f      	beq.n	12458 <floor+0xc0>
   123f8:	4619      	mov	r1, r3
   123fa:	4620      	mov	r0, r4
   123fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12400:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   12404:	f04f 39ff 	mov.w	r9, #4294967295
   12408:	fa29 f902 	lsr.w	r9, r9, r2
   1240c:	ea10 0f09 	tst.w	r0, r9
   12410:	d0f2      	beq.n	123f8 <floor+0x60>
   12412:	a323      	add	r3, pc, #140	; (adr r3, 124a0 <floor+0x108>)
   12414:	e9d3 2300 	ldrd	r2, r3, [r3]
   12418:	f000 fa70 	bl	128fc <__adddf3>
   1241c:	2200      	movs	r2, #0
   1241e:	2300      	movs	r3, #0
   12420:	f000 feae 	bl	13180 <__aeabi_dcmpgt>
   12424:	2800      	cmp	r0, #0
   12426:	d0dd      	beq.n	123e4 <floor+0x4c>
   12428:	2d00      	cmp	r5, #0
   1242a:	db21      	blt.n	12470 <floor+0xd8>
   1242c:	4645      	mov	r5, r8
   1242e:	ea27 0709 	bic.w	r7, r7, r9
   12432:	463c      	mov	r4, r7
   12434:	4629      	mov	r1, r5
   12436:	e7d7      	b.n	123e8 <floor+0x50>
   12438:	a319      	add	r3, pc, #100	; (adr r3, 124a0 <floor+0x108>)
   1243a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1243e:	f000 fa5d 	bl	128fc <__adddf3>
   12442:	2200      	movs	r2, #0
   12444:	2300      	movs	r3, #0
   12446:	f000 fe9b 	bl	13180 <__aeabi_dcmpgt>
   1244a:	2800      	cmp	r0, #0
   1244c:	d0ca      	beq.n	123e4 <floor+0x4c>
   1244e:	2d00      	cmp	r5, #0
   12450:	db19      	blt.n	12486 <floor+0xee>
   12452:	2700      	movs	r7, #0
   12454:	463d      	mov	r5, r7
   12456:	e7c5      	b.n	123e4 <floor+0x4c>
   12458:	4602      	mov	r2, r0
   1245a:	460b      	mov	r3, r1
   1245c:	f000 fa4e 	bl	128fc <__adddf3>
   12460:	4604      	mov	r4, r0
   12462:	e7ca      	b.n	123fa <floor+0x62>
   12464:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   12468:	fa43 f606 	asr.w	r6, r3, r6
   1246c:	44b0      	add	r8, r6
   1246e:	e7b6      	b.n	123de <floor+0x46>
   12470:	2e14      	cmp	r6, #20
   12472:	d010      	beq.n	12496 <floor+0xfe>
   12474:	2301      	movs	r3, #1
   12476:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
   1247a:	fa03 f606 	lsl.w	r6, r3, r6
   1247e:	1937      	adds	r7, r6, r4
   12480:	bf28      	it	cs
   12482:	4498      	addcs	r8, r3
   12484:	e7d2      	b.n	1242c <floor+0x94>
   12486:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   1248a:	4b08      	ldr	r3, [pc, #32]	; (124ac <floor+0x114>)
   1248c:	4322      	orrs	r2, r4
   1248e:	bf18      	it	ne
   12490:	461d      	movne	r5, r3
   12492:	2700      	movs	r7, #0
   12494:	e7a6      	b.n	123e4 <floor+0x4c>
   12496:	f105 0801 	add.w	r8, r5, #1
   1249a:	e7c7      	b.n	1242c <floor+0x94>
   1249c:	f3af 8000 	nop.w
   124a0:	8800759c 	.word	0x8800759c
   124a4:	7e37e43c 	.word	0x7e37e43c
   124a8:	000fffff 	.word	0x000fffff
   124ac:	bff00000 	.word	0xbff00000

000124b0 <frexp>:
   124b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   124b2:	f8df e05c 	ldr.w	lr, [pc, #92]	; 12510 <frexp+0x60>
   124b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   124ba:	2700      	movs	r7, #0
   124bc:	4573      	cmp	r3, lr
   124be:	4604      	mov	r4, r0
   124c0:	460d      	mov	r5, r1
   124c2:	4616      	mov	r6, r2
   124c4:	6017      	str	r7, [r2, #0]
   124c6:	dc1d      	bgt.n	12504 <frexp+0x54>
   124c8:	ea50 0e03 	orrs.w	lr, r0, r3
   124cc:	d01a      	beq.n	12504 <frexp+0x54>
   124ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   124d2:	460a      	mov	r2, r1
   124d4:	da09      	bge.n	124ea <frexp+0x3a>
   124d6:	2200      	movs	r2, #0
   124d8:	4b0c      	ldr	r3, [pc, #48]	; (1250c <frexp+0x5c>)
   124da:	f000 fbc1 	bl	12c60 <__aeabi_dmul>
   124de:	f06f 0735 	mvn.w	r7, #53	; 0x35
   124e2:	4604      	mov	r4, r0
   124e4:	460a      	mov	r2, r1
   124e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   124ea:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   124ee:	151b      	asrs	r3, r3, #20
   124f0:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   124f4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   124f8:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   124fc:	443b      	add	r3, r7
   124fe:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   12502:	6033      	str	r3, [r6, #0]
   12504:	4620      	mov	r0, r4
   12506:	4629      	mov	r1, r5
   12508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1250a:	bf00      	nop
   1250c:	43500000 	.word	0x43500000
   12510:	7fefffff 	.word	0x7fefffff

00012514 <round>:
   12514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12516:	f3c1 560a 	ubfx	r6, r1, #20, #11
   1251a:	f2a6 35ff 	subw	r5, r6, #1023	; 0x3ff
   1251e:	2d13      	cmp	r5, #19
   12520:	460a      	mov	r2, r1
   12522:	460b      	mov	r3, r1
   12524:	4604      	mov	r4, r0
   12526:	dc11      	bgt.n	1254c <round+0x38>
   12528:	2d00      	cmp	r5, #0
   1252a:	db2e      	blt.n	1258a <round+0x76>
   1252c:	468e      	mov	lr, r1
   1252e:	4920      	ldr	r1, [pc, #128]	; (125b0 <round+0x9c>)
   12530:	4129      	asrs	r1, r5
   12532:	420a      	tst	r2, r1
   12534:	d025      	beq.n	12582 <round+0x6e>
   12536:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1253a:	412b      	asrs	r3, r5
   1253c:	4473      	add	r3, lr
   1253e:	ea23 0301 	bic.w	r3, r3, r1
   12542:	2600      	movs	r6, #0
   12544:	4619      	mov	r1, r3
   12546:	4634      	mov	r4, r6
   12548:	4620      	mov	r0, r4
   1254a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1254c:	2d33      	cmp	r5, #51	; 0x33
   1254e:	dd05      	ble.n	1255c <round+0x48>
   12550:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   12554:	d01f      	beq.n	12596 <round+0x82>
   12556:	4611      	mov	r1, r2
   12558:	4620      	mov	r0, r4
   1255a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1255c:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   12560:	f04f 31ff 	mov.w	r1, #4294967295
   12564:	fa21 f606 	lsr.w	r6, r1, r6
   12568:	4230      	tst	r0, r6
   1256a:	d0f4      	beq.n	12556 <round+0x42>
   1256c:	2201      	movs	r2, #1
   1256e:	f1c5 0533 	rsb	r5, r5, #51	; 0x33
   12572:	fa02 f505 	lsl.w	r5, r2, r5
   12576:	182d      	adds	r5, r5, r0
   12578:	bf28      	it	cs
   1257a:	189b      	addcs	r3, r3, r2
   1257c:	ea25 0606 	bic.w	r6, r5, r6
   12580:	e7e0      	b.n	12544 <round+0x30>
   12582:	2800      	cmp	r0, #0
   12584:	d1d7      	bne.n	12536 <round+0x22>
   12586:	4611      	mov	r1, r2
   12588:	e7e6      	b.n	12558 <round+0x44>
   1258a:	3501      	adds	r5, #1
   1258c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   12590:	d007      	beq.n	125a2 <round+0x8e>
   12592:	2600      	movs	r6, #0
   12594:	e7d6      	b.n	12544 <round+0x30>
   12596:	4602      	mov	r2, r0
   12598:	460b      	mov	r3, r1
   1259a:	f000 f9af 	bl	128fc <__adddf3>
   1259e:	4604      	mov	r4, r0
   125a0:	e7d2      	b.n	12548 <round+0x34>
   125a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
   125a6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   125aa:	2600      	movs	r6, #0
   125ac:	e7ca      	b.n	12544 <round+0x30>
   125ae:	bf00      	nop
   125b0:	000fffff 	.word	0x000fffff

000125b4 <roundf>:
   125b4:	b508      	push	{r3, lr}
   125b6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
   125ba:	3b7f      	subs	r3, #127	; 0x7f
   125bc:	2b16      	cmp	r3, #22
   125be:	4601      	mov	r1, r0
   125c0:	dc0e      	bgt.n	125e0 <roundf+0x2c>
   125c2:	2b00      	cmp	r3, #0
   125c4:	4602      	mov	r2, r0
   125c6:	db12      	blt.n	125ee <roundf+0x3a>
   125c8:	480c      	ldr	r0, [pc, #48]	; (125fc <roundf+0x48>)
   125ca:	4118      	asrs	r0, r3
   125cc:	4201      	tst	r1, r0
   125ce:	d005      	beq.n	125dc <roundf+0x28>
   125d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   125d4:	4119      	asrs	r1, r3
   125d6:	4411      	add	r1, r2
   125d8:	ea21 0100 	bic.w	r1, r1, r0
   125dc:	4608      	mov	r0, r1
   125de:	bd08      	pop	{r3, pc}
   125e0:	2b80      	cmp	r3, #128	; 0x80
   125e2:	d1fb      	bne.n	125dc <roundf+0x28>
   125e4:	f000 fe74 	bl	132d0 <__addsf3>
   125e8:	4601      	mov	r1, r0
   125ea:	4608      	mov	r0, r1
   125ec:	bd08      	pop	{r3, pc}
   125ee:	3301      	adds	r3, #1
   125f0:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
   125f4:	d1f2      	bne.n	125dc <roundf+0x28>
   125f6:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
   125fa:	e7ef      	b.n	125dc <roundf+0x28>
   125fc:	007fffff 	.word	0x007fffff

00012600 <expf>:
   12600:	b5f0      	push	{r4, r5, r6, r7, lr}
   12602:	4e31      	ldr	r6, [pc, #196]	; (126c8 <expf+0xc8>)
   12604:	b08b      	sub	sp, #44	; 0x2c
   12606:	4604      	mov	r4, r0
   12608:	f000 f86a 	bl	126e0 <__ieee754_expf>
   1260c:	f996 3000 	ldrsb.w	r3, [r6]
   12610:	3301      	adds	r3, #1
   12612:	4605      	mov	r5, r0
   12614:	d034      	beq.n	12680 <expf+0x80>
   12616:	4620      	mov	r0, r4
   12618:	f000 f962 	bl	128e0 <finitef>
   1261c:	2800      	cmp	r0, #0
   1261e:	d02f      	beq.n	12680 <expf+0x80>
   12620:	492a      	ldr	r1, [pc, #168]	; (126cc <expf+0xcc>)
   12622:	4620      	mov	r0, r4
   12624:	f001 f918 	bl	13858 <__aeabi_fcmpgt>
   12628:	4607      	mov	r7, r0
   1262a:	2800      	cmp	r0, #0
   1262c:	d12b      	bne.n	12686 <expf+0x86>
   1262e:	4928      	ldr	r1, [pc, #160]	; (126d0 <expf+0xd0>)
   12630:	4620      	mov	r0, r4
   12632:	f001 f8f3 	bl	1381c <__aeabi_fcmplt>
   12636:	b318      	cbz	r0, 12680 <expf+0x80>
   12638:	4b26      	ldr	r3, [pc, #152]	; (126d4 <expf+0xd4>)
   1263a:	9708      	str	r7, [sp, #32]
   1263c:	4620      	mov	r0, r4
   1263e:	2204      	movs	r2, #4
   12640:	e88d 000c 	stmia.w	sp, {r2, r3}
   12644:	f000 fab8 	bl	12bb8 <__aeabi_f2d>
   12648:	f996 3000 	ldrsb.w	r3, [r6]
   1264c:	2400      	movs	r4, #0
   1264e:	2500      	movs	r5, #0
   12650:	2b02      	cmp	r3, #2
   12652:	e9cd 0104 	strd	r0, r1, [sp, #16]
   12656:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1265a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1265e:	d02e      	beq.n	126be <expf+0xbe>
   12660:	4668      	mov	r0, sp
   12662:	f000 f93b 	bl	128dc <matherr>
   12666:	2800      	cmp	r0, #0
   12668:	d029      	beq.n	126be <expf+0xbe>
   1266a:	9b08      	ldr	r3, [sp, #32]
   1266c:	b11b      	cbz	r3, 12676 <expf+0x76>
   1266e:	f002 fa91 	bl	14b94 <__errno>
   12672:	9b08      	ldr	r3, [sp, #32]
   12674:	6003      	str	r3, [r0, #0]
   12676:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1267a:	f000 fdd3 	bl	13224 <__aeabi_d2f>
   1267e:	4605      	mov	r5, r0
   12680:	4628      	mov	r0, r5
   12682:	b00b      	add	sp, #44	; 0x2c
   12684:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12686:	2303      	movs	r3, #3
   12688:	4a12      	ldr	r2, [pc, #72]	; (126d4 <expf+0xd4>)
   1268a:	9300      	str	r3, [sp, #0]
   1268c:	4620      	mov	r0, r4
   1268e:	2300      	movs	r3, #0
   12690:	9308      	str	r3, [sp, #32]
   12692:	9201      	str	r2, [sp, #4]
   12694:	f000 fa90 	bl	12bb8 <__aeabi_f2d>
   12698:	f996 3000 	ldrsb.w	r3, [r6]
   1269c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   126a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   126a4:	b92b      	cbnz	r3, 126b2 <expf+0xb2>
   126a6:	4b0c      	ldr	r3, [pc, #48]	; (126d8 <expf+0xd8>)
   126a8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   126ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
   126b0:	e7d6      	b.n	12660 <expf+0x60>
   126b2:	490a      	ldr	r1, [pc, #40]	; (126dc <expf+0xdc>)
   126b4:	2000      	movs	r0, #0
   126b6:	2b02      	cmp	r3, #2
   126b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
   126bc:	d1d0      	bne.n	12660 <expf+0x60>
   126be:	f002 fa69 	bl	14b94 <__errno>
   126c2:	2322      	movs	r3, #34	; 0x22
   126c4:	6003      	str	r3, [r0, #0]
   126c6:	e7d0      	b.n	1266a <expf+0x6a>
   126c8:	2000001c 	.word	0x2000001c
   126cc:	42b17180 	.word	0x42b17180
   126d0:	c2cff1b5 	.word	0xc2cff1b5
   126d4:	0002481c 	.word	0x0002481c
   126d8:	47efffff 	.word	0x47efffff
   126dc:	7ff00000 	.word	0x7ff00000

000126e0 <__ieee754_expf>:
   126e0:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
   126e4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   126e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   126ec:	4604      	mov	r4, r0
   126ee:	d86f      	bhi.n	127d0 <__ieee754_expf+0xf0>
   126f0:	ea4f 75d0 	mov.w	r5, r0, lsr #31
   126f4:	d071      	beq.n	127da <__ieee754_expf+0xfa>
   126f6:	4969      	ldr	r1, [pc, #420]	; (1289c <__ieee754_expf+0x1bc>)
   126f8:	4288      	cmp	r0, r1
   126fa:	f300 808c 	bgt.w	12816 <__ieee754_expf+0x136>
   126fe:	2800      	cmp	r0, #0
   12700:	f2c0 8082 	blt.w	12808 <__ieee754_expf+0x128>
   12704:	4b66      	ldr	r3, [pc, #408]	; (128a0 <__ieee754_expf+0x1c0>)
   12706:	429a      	cmp	r2, r3
   12708:	d96a      	bls.n	127e0 <__ieee754_expf+0x100>
   1270a:	4b66      	ldr	r3, [pc, #408]	; (128a4 <__ieee754_expf+0x1c4>)
   1270c:	429a      	cmp	r2, r3
   1270e:	f200 80a2 	bhi.w	12856 <__ieee754_expf+0x176>
   12712:	4b65      	ldr	r3, [pc, #404]	; (128a8 <__ieee754_expf+0x1c8>)
   12714:	4620      	mov	r0, r4
   12716:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   1271a:	f000 fdd7 	bl	132cc <__aeabi_fsub>
   1271e:	4b63      	ldr	r3, [pc, #396]	; (128ac <__ieee754_expf+0x1cc>)
   12720:	4607      	mov	r7, r0
   12722:	f1c5 0001 	rsb	r0, r5, #1
   12726:	f853 8025 	ldr.w	r8, [r3, r5, lsl #2]
   1272a:	1b45      	subs	r5, r0, r5
   1272c:	4641      	mov	r1, r8
   1272e:	4638      	mov	r0, r7
   12730:	f000 fdcc 	bl	132cc <__aeabi_fsub>
   12734:	4604      	mov	r4, r0
   12736:	4621      	mov	r1, r4
   12738:	4620      	mov	r0, r4
   1273a:	f000 fed1 	bl	134e0 <__aeabi_fmul>
   1273e:	495c      	ldr	r1, [pc, #368]	; (128b0 <__ieee754_expf+0x1d0>)
   12740:	4606      	mov	r6, r0
   12742:	f000 fecd 	bl	134e0 <__aeabi_fmul>
   12746:	495b      	ldr	r1, [pc, #364]	; (128b4 <__ieee754_expf+0x1d4>)
   12748:	f000 fdc0 	bl	132cc <__aeabi_fsub>
   1274c:	4631      	mov	r1, r6
   1274e:	f000 fec7 	bl	134e0 <__aeabi_fmul>
   12752:	4959      	ldr	r1, [pc, #356]	; (128b8 <__ieee754_expf+0x1d8>)
   12754:	f000 fdbc 	bl	132d0 <__addsf3>
   12758:	4631      	mov	r1, r6
   1275a:	f000 fec1 	bl	134e0 <__aeabi_fmul>
   1275e:	4957      	ldr	r1, [pc, #348]	; (128bc <__ieee754_expf+0x1dc>)
   12760:	f000 fdb4 	bl	132cc <__aeabi_fsub>
   12764:	4631      	mov	r1, r6
   12766:	f000 febb 	bl	134e0 <__aeabi_fmul>
   1276a:	4955      	ldr	r1, [pc, #340]	; (128c0 <__ieee754_expf+0x1e0>)
   1276c:	f000 fdb0 	bl	132d0 <__addsf3>
   12770:	4631      	mov	r1, r6
   12772:	f000 feb5 	bl	134e0 <__aeabi_fmul>
   12776:	4601      	mov	r1, r0
   12778:	4620      	mov	r0, r4
   1277a:	f000 fda7 	bl	132cc <__aeabi_fsub>
   1277e:	4606      	mov	r6, r0
   12780:	2d00      	cmp	r5, #0
   12782:	d04e      	beq.n	12822 <__ieee754_expf+0x142>
   12784:	4620      	mov	r0, r4
   12786:	4631      	mov	r1, r6
   12788:	f000 feaa 	bl	134e0 <__aeabi_fmul>
   1278c:	4631      	mov	r1, r6
   1278e:	4604      	mov	r4, r0
   12790:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   12794:	f000 fd9a 	bl	132cc <__aeabi_fsub>
   12798:	4601      	mov	r1, r0
   1279a:	4620      	mov	r0, r4
   1279c:	f000 ff54 	bl	13648 <__aeabi_fdiv>
   127a0:	4601      	mov	r1, r0
   127a2:	4640      	mov	r0, r8
   127a4:	f000 fd92 	bl	132cc <__aeabi_fsub>
   127a8:	4639      	mov	r1, r7
   127aa:	f000 fd8f 	bl	132cc <__aeabi_fsub>
   127ae:	4601      	mov	r1, r0
   127b0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   127b4:	f000 fd8a 	bl	132cc <__aeabi_fsub>
   127b8:	f115 0f7d 	cmn.w	r5, #125	; 0x7d
   127bc:	da6a      	bge.n	12894 <__ieee754_expf+0x1b4>
   127be:	3564      	adds	r5, #100	; 0x64
   127c0:	eb00 50c5 	add.w	r0, r0, r5, lsl #23
   127c4:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
   127c8:	f000 fe8a 	bl	134e0 <__aeabi_fmul>
   127cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   127d0:	4601      	mov	r1, r0
   127d2:	f000 fd7d 	bl	132d0 <__addsf3>
   127d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   127da:	b9cd      	cbnz	r5, 12810 <__ieee754_expf+0x130>
   127dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   127e0:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
   127e4:	d235      	bcs.n	12852 <__ieee754_expf+0x172>
   127e6:	4937      	ldr	r1, [pc, #220]	; (128c4 <__ieee754_expf+0x1e4>)
   127e8:	4620      	mov	r0, r4
   127ea:	f000 fd71 	bl	132d0 <__addsf3>
   127ee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   127f2:	f001 f831 	bl	13858 <__aeabi_fcmpgt>
   127f6:	2800      	cmp	r0, #0
   127f8:	d04a      	beq.n	12890 <__ieee754_expf+0x1b0>
   127fa:	4620      	mov	r0, r4
   127fc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   12800:	f000 fd66 	bl	132d0 <__addsf3>
   12804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12808:	4b2f      	ldr	r3, [pc, #188]	; (128c8 <__ieee754_expf+0x1e8>)
   1280a:	429a      	cmp	r2, r3
   1280c:	f67f af7a 	bls.w	12704 <__ieee754_expf+0x24>
   12810:	2000      	movs	r0, #0
   12812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12816:	492b      	ldr	r1, [pc, #172]	; (128c4 <__ieee754_expf+0x1e4>)
   12818:	4608      	mov	r0, r1
   1281a:	f000 fe61 	bl	134e0 <__aeabi_fmul>
   1281e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12822:	4601      	mov	r1, r0
   12824:	4620      	mov	r0, r4
   12826:	f000 fe5b 	bl	134e0 <__aeabi_fmul>
   1282a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1282e:	4605      	mov	r5, r0
   12830:	4630      	mov	r0, r6
   12832:	f000 fd4b 	bl	132cc <__aeabi_fsub>
   12836:	4601      	mov	r1, r0
   12838:	4628      	mov	r0, r5
   1283a:	f000 ff05 	bl	13648 <__aeabi_fdiv>
   1283e:	4621      	mov	r1, r4
   12840:	f000 fd44 	bl	132cc <__aeabi_fsub>
   12844:	4601      	mov	r1, r0
   12846:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   1284a:	f000 fd3f 	bl	132cc <__aeabi_fsub>
   1284e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12852:	2500      	movs	r5, #0
   12854:	e76f      	b.n	12736 <__ieee754_expf+0x56>
   12856:	491d      	ldr	r1, [pc, #116]	; (128cc <__ieee754_expf+0x1ec>)
   12858:	4620      	mov	r0, r4
   1285a:	f000 fe41 	bl	134e0 <__aeabi_fmul>
   1285e:	4b1c      	ldr	r3, [pc, #112]	; (128d0 <__ieee754_expf+0x1f0>)
   12860:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   12864:	f000 fd34 	bl	132d0 <__addsf3>
   12868:	f001 f800 	bl	1386c <__aeabi_f2iz>
   1286c:	4605      	mov	r5, r0
   1286e:	f000 fde3 	bl	13438 <__aeabi_i2f>
   12872:	4918      	ldr	r1, [pc, #96]	; (128d4 <__ieee754_expf+0x1f4>)
   12874:	4606      	mov	r6, r0
   12876:	f000 fe33 	bl	134e0 <__aeabi_fmul>
   1287a:	4601      	mov	r1, r0
   1287c:	4620      	mov	r0, r4
   1287e:	f000 fd25 	bl	132cc <__aeabi_fsub>
   12882:	4915      	ldr	r1, [pc, #84]	; (128d8 <__ieee754_expf+0x1f8>)
   12884:	4607      	mov	r7, r0
   12886:	4630      	mov	r0, r6
   12888:	f000 fe2a 	bl	134e0 <__aeabi_fmul>
   1288c:	4680      	mov	r8, r0
   1288e:	e74d      	b.n	1272c <__ieee754_expf+0x4c>
   12890:	4605      	mov	r5, r0
   12892:	e750      	b.n	12736 <__ieee754_expf+0x56>
   12894:	eb00 50c5 	add.w	r0, r0, r5, lsl #23
   12898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1289c:	42b17217 	.word	0x42b17217
   128a0:	3eb17218 	.word	0x3eb17218
   128a4:	3f851591 	.word	0x3f851591
   128a8:	0002482c 	.word	0x0002482c
   128ac:	00024834 	.word	0x00024834
   128b0:	3331bb4c 	.word	0x3331bb4c
   128b4:	35ddea0e 	.word	0x35ddea0e
   128b8:	388ab355 	.word	0x388ab355
   128bc:	3b360b61 	.word	0x3b360b61
   128c0:	3e2aaaab 	.word	0x3e2aaaab
   128c4:	7149f2ca 	.word	0x7149f2ca
   128c8:	42cff1b5 	.word	0x42cff1b5
   128cc:	3fb8aa3b 	.word	0x3fb8aa3b
   128d0:	00024824 	.word	0x00024824
   128d4:	3f317180 	.word	0x3f317180
   128d8:	3717f7d1 	.word	0x3717f7d1

000128dc <matherr>:
   128dc:	2000      	movs	r0, #0
   128de:	4770      	bx	lr

000128e0 <finitef>:
   128e0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   128e4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   128e8:	bfac      	ite	ge
   128ea:	2000      	movge	r0, #0
   128ec:	2001      	movlt	r0, #1
   128ee:	4770      	bx	lr

000128f0 <__aeabi_drsub>:
   128f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   128f4:	e002      	b.n	128fc <__adddf3>
   128f6:	bf00      	nop

000128f8 <__aeabi_dsub>:
   128f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000128fc <__adddf3>:
   128fc:	b530      	push	{r4, r5, lr}
   128fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   12902:	ea4f 0543 	mov.w	r5, r3, lsl #1
   12906:	ea94 0f05 	teq	r4, r5
   1290a:	bf08      	it	eq
   1290c:	ea90 0f02 	teqeq	r0, r2
   12910:	bf1f      	itttt	ne
   12912:	ea54 0c00 	orrsne.w	ip, r4, r0
   12916:	ea55 0c02 	orrsne.w	ip, r5, r2
   1291a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1291e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   12922:	f000 80e2 	beq.w	12aea <__adddf3+0x1ee>
   12926:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1292a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1292e:	bfb8      	it	lt
   12930:	426d      	neglt	r5, r5
   12932:	dd0c      	ble.n	1294e <__adddf3+0x52>
   12934:	442c      	add	r4, r5
   12936:	ea80 0202 	eor.w	r2, r0, r2
   1293a:	ea81 0303 	eor.w	r3, r1, r3
   1293e:	ea82 0000 	eor.w	r0, r2, r0
   12942:	ea83 0101 	eor.w	r1, r3, r1
   12946:	ea80 0202 	eor.w	r2, r0, r2
   1294a:	ea81 0303 	eor.w	r3, r1, r3
   1294e:	2d36      	cmp	r5, #54	; 0x36
   12950:	bf88      	it	hi
   12952:	bd30      	pophi	{r4, r5, pc}
   12954:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   12958:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1295c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   12960:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   12964:	d002      	beq.n	1296c <__adddf3+0x70>
   12966:	4240      	negs	r0, r0
   12968:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1296c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   12970:	ea4f 3303 	mov.w	r3, r3, lsl #12
   12974:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   12978:	d002      	beq.n	12980 <__adddf3+0x84>
   1297a:	4252      	negs	r2, r2
   1297c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12980:	ea94 0f05 	teq	r4, r5
   12984:	f000 80a7 	beq.w	12ad6 <__adddf3+0x1da>
   12988:	f1a4 0401 	sub.w	r4, r4, #1
   1298c:	f1d5 0e20 	rsbs	lr, r5, #32
   12990:	db0d      	blt.n	129ae <__adddf3+0xb2>
   12992:	fa02 fc0e 	lsl.w	ip, r2, lr
   12996:	fa22 f205 	lsr.w	r2, r2, r5
   1299a:	1880      	adds	r0, r0, r2
   1299c:	f141 0100 	adc.w	r1, r1, #0
   129a0:	fa03 f20e 	lsl.w	r2, r3, lr
   129a4:	1880      	adds	r0, r0, r2
   129a6:	fa43 f305 	asr.w	r3, r3, r5
   129aa:	4159      	adcs	r1, r3
   129ac:	e00e      	b.n	129cc <__adddf3+0xd0>
   129ae:	f1a5 0520 	sub.w	r5, r5, #32
   129b2:	f10e 0e20 	add.w	lr, lr, #32
   129b6:	2a01      	cmp	r2, #1
   129b8:	fa03 fc0e 	lsl.w	ip, r3, lr
   129bc:	bf28      	it	cs
   129be:	f04c 0c02 	orrcs.w	ip, ip, #2
   129c2:	fa43 f305 	asr.w	r3, r3, r5
   129c6:	18c0      	adds	r0, r0, r3
   129c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   129cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   129d0:	d507      	bpl.n	129e2 <__adddf3+0xe6>
   129d2:	f04f 0e00 	mov.w	lr, #0
   129d6:	f1dc 0c00 	rsbs	ip, ip, #0
   129da:	eb7e 0000 	sbcs.w	r0, lr, r0
   129de:	eb6e 0101 	sbc.w	r1, lr, r1
   129e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   129e6:	d31b      	bcc.n	12a20 <__adddf3+0x124>
   129e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   129ec:	d30c      	bcc.n	12a08 <__adddf3+0x10c>
   129ee:	0849      	lsrs	r1, r1, #1
   129f0:	ea5f 0030 	movs.w	r0, r0, rrx
   129f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   129f8:	f104 0401 	add.w	r4, r4, #1
   129fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   12a00:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   12a04:	f080 809a 	bcs.w	12b3c <__adddf3+0x240>
   12a08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   12a0c:	bf08      	it	eq
   12a0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   12a12:	f150 0000 	adcs.w	r0, r0, #0
   12a16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   12a1a:	ea41 0105 	orr.w	r1, r1, r5
   12a1e:	bd30      	pop	{r4, r5, pc}
   12a20:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   12a24:	4140      	adcs	r0, r0
   12a26:	eb41 0101 	adc.w	r1, r1, r1
   12a2a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12a2e:	f1a4 0401 	sub.w	r4, r4, #1
   12a32:	d1e9      	bne.n	12a08 <__adddf3+0x10c>
   12a34:	f091 0f00 	teq	r1, #0
   12a38:	bf04      	itt	eq
   12a3a:	4601      	moveq	r1, r0
   12a3c:	2000      	moveq	r0, #0
   12a3e:	fab1 f381 	clz	r3, r1
   12a42:	bf08      	it	eq
   12a44:	3320      	addeq	r3, #32
   12a46:	f1a3 030b 	sub.w	r3, r3, #11
   12a4a:	f1b3 0220 	subs.w	r2, r3, #32
   12a4e:	da0c      	bge.n	12a6a <__adddf3+0x16e>
   12a50:	320c      	adds	r2, #12
   12a52:	dd08      	ble.n	12a66 <__adddf3+0x16a>
   12a54:	f102 0c14 	add.w	ip, r2, #20
   12a58:	f1c2 020c 	rsb	r2, r2, #12
   12a5c:	fa01 f00c 	lsl.w	r0, r1, ip
   12a60:	fa21 f102 	lsr.w	r1, r1, r2
   12a64:	e00c      	b.n	12a80 <__adddf3+0x184>
   12a66:	f102 0214 	add.w	r2, r2, #20
   12a6a:	bfd8      	it	le
   12a6c:	f1c2 0c20 	rsble	ip, r2, #32
   12a70:	fa01 f102 	lsl.w	r1, r1, r2
   12a74:	fa20 fc0c 	lsr.w	ip, r0, ip
   12a78:	bfdc      	itt	le
   12a7a:	ea41 010c 	orrle.w	r1, r1, ip
   12a7e:	4090      	lslle	r0, r2
   12a80:	1ae4      	subs	r4, r4, r3
   12a82:	bfa2      	ittt	ge
   12a84:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   12a88:	4329      	orrge	r1, r5
   12a8a:	bd30      	popge	{r4, r5, pc}
   12a8c:	ea6f 0404 	mvn.w	r4, r4
   12a90:	3c1f      	subs	r4, #31
   12a92:	da1c      	bge.n	12ace <__adddf3+0x1d2>
   12a94:	340c      	adds	r4, #12
   12a96:	dc0e      	bgt.n	12ab6 <__adddf3+0x1ba>
   12a98:	f104 0414 	add.w	r4, r4, #20
   12a9c:	f1c4 0220 	rsb	r2, r4, #32
   12aa0:	fa20 f004 	lsr.w	r0, r0, r4
   12aa4:	fa01 f302 	lsl.w	r3, r1, r2
   12aa8:	ea40 0003 	orr.w	r0, r0, r3
   12aac:	fa21 f304 	lsr.w	r3, r1, r4
   12ab0:	ea45 0103 	orr.w	r1, r5, r3
   12ab4:	bd30      	pop	{r4, r5, pc}
   12ab6:	f1c4 040c 	rsb	r4, r4, #12
   12aba:	f1c4 0220 	rsb	r2, r4, #32
   12abe:	fa20 f002 	lsr.w	r0, r0, r2
   12ac2:	fa01 f304 	lsl.w	r3, r1, r4
   12ac6:	ea40 0003 	orr.w	r0, r0, r3
   12aca:	4629      	mov	r1, r5
   12acc:	bd30      	pop	{r4, r5, pc}
   12ace:	fa21 f004 	lsr.w	r0, r1, r4
   12ad2:	4629      	mov	r1, r5
   12ad4:	bd30      	pop	{r4, r5, pc}
   12ad6:	f094 0f00 	teq	r4, #0
   12ada:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   12ade:	bf06      	itte	eq
   12ae0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   12ae4:	3401      	addeq	r4, #1
   12ae6:	3d01      	subne	r5, #1
   12ae8:	e74e      	b.n	12988 <__adddf3+0x8c>
   12aea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   12aee:	bf18      	it	ne
   12af0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   12af4:	d029      	beq.n	12b4a <__adddf3+0x24e>
   12af6:	ea94 0f05 	teq	r4, r5
   12afa:	bf08      	it	eq
   12afc:	ea90 0f02 	teqeq	r0, r2
   12b00:	d005      	beq.n	12b0e <__adddf3+0x212>
   12b02:	ea54 0c00 	orrs.w	ip, r4, r0
   12b06:	bf04      	itt	eq
   12b08:	4619      	moveq	r1, r3
   12b0a:	4610      	moveq	r0, r2
   12b0c:	bd30      	pop	{r4, r5, pc}
   12b0e:	ea91 0f03 	teq	r1, r3
   12b12:	bf1e      	ittt	ne
   12b14:	2100      	movne	r1, #0
   12b16:	2000      	movne	r0, #0
   12b18:	bd30      	popne	{r4, r5, pc}
   12b1a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   12b1e:	d105      	bne.n	12b2c <__adddf3+0x230>
   12b20:	0040      	lsls	r0, r0, #1
   12b22:	4149      	adcs	r1, r1
   12b24:	bf28      	it	cs
   12b26:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   12b2a:	bd30      	pop	{r4, r5, pc}
   12b2c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   12b30:	bf3c      	itt	cc
   12b32:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   12b36:	bd30      	popcc	{r4, r5, pc}
   12b38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   12b3c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   12b40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   12b44:	f04f 0000 	mov.w	r0, #0
   12b48:	bd30      	pop	{r4, r5, pc}
   12b4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   12b4e:	bf1a      	itte	ne
   12b50:	4619      	movne	r1, r3
   12b52:	4610      	movne	r0, r2
   12b54:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   12b58:	bf1c      	itt	ne
   12b5a:	460b      	movne	r3, r1
   12b5c:	4602      	movne	r2, r0
   12b5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   12b62:	bf06      	itte	eq
   12b64:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   12b68:	ea91 0f03 	teqeq	r1, r3
   12b6c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   12b70:	bd30      	pop	{r4, r5, pc}
   12b72:	bf00      	nop

00012b74 <__aeabi_ui2d>:
   12b74:	f090 0f00 	teq	r0, #0
   12b78:	bf04      	itt	eq
   12b7a:	2100      	moveq	r1, #0
   12b7c:	4770      	bxeq	lr
   12b7e:	b530      	push	{r4, r5, lr}
   12b80:	f44f 6480 	mov.w	r4, #1024	; 0x400
   12b84:	f104 0432 	add.w	r4, r4, #50	; 0x32
   12b88:	f04f 0500 	mov.w	r5, #0
   12b8c:	f04f 0100 	mov.w	r1, #0
   12b90:	e750      	b.n	12a34 <__adddf3+0x138>
   12b92:	bf00      	nop

00012b94 <__aeabi_i2d>:
   12b94:	f090 0f00 	teq	r0, #0
   12b98:	bf04      	itt	eq
   12b9a:	2100      	moveq	r1, #0
   12b9c:	4770      	bxeq	lr
   12b9e:	b530      	push	{r4, r5, lr}
   12ba0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   12ba4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   12ba8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   12bac:	bf48      	it	mi
   12bae:	4240      	negmi	r0, r0
   12bb0:	f04f 0100 	mov.w	r1, #0
   12bb4:	e73e      	b.n	12a34 <__adddf3+0x138>
   12bb6:	bf00      	nop

00012bb8 <__aeabi_f2d>:
   12bb8:	0042      	lsls	r2, r0, #1
   12bba:	ea4f 01e2 	mov.w	r1, r2, asr #3
   12bbe:	ea4f 0131 	mov.w	r1, r1, rrx
   12bc2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   12bc6:	bf1f      	itttt	ne
   12bc8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   12bcc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   12bd0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   12bd4:	4770      	bxne	lr
   12bd6:	f092 0f00 	teq	r2, #0
   12bda:	bf14      	ite	ne
   12bdc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   12be0:	4770      	bxeq	lr
   12be2:	b530      	push	{r4, r5, lr}
   12be4:	f44f 7460 	mov.w	r4, #896	; 0x380
   12be8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   12bec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   12bf0:	e720      	b.n	12a34 <__adddf3+0x138>
   12bf2:	bf00      	nop

00012bf4 <__aeabi_ul2d>:
   12bf4:	ea50 0201 	orrs.w	r2, r0, r1
   12bf8:	bf08      	it	eq
   12bfa:	4770      	bxeq	lr
   12bfc:	b530      	push	{r4, r5, lr}
   12bfe:	f04f 0500 	mov.w	r5, #0
   12c02:	e00a      	b.n	12c1a <__aeabi_l2d+0x16>

00012c04 <__aeabi_l2d>:
   12c04:	ea50 0201 	orrs.w	r2, r0, r1
   12c08:	bf08      	it	eq
   12c0a:	4770      	bxeq	lr
   12c0c:	b530      	push	{r4, r5, lr}
   12c0e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   12c12:	d502      	bpl.n	12c1a <__aeabi_l2d+0x16>
   12c14:	4240      	negs	r0, r0
   12c16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12c1a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   12c1e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   12c22:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   12c26:	f43f aedc 	beq.w	129e2 <__adddf3+0xe6>
   12c2a:	f04f 0203 	mov.w	r2, #3
   12c2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   12c32:	bf18      	it	ne
   12c34:	3203      	addne	r2, #3
   12c36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   12c3a:	bf18      	it	ne
   12c3c:	3203      	addne	r2, #3
   12c3e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   12c42:	f1c2 0320 	rsb	r3, r2, #32
   12c46:	fa00 fc03 	lsl.w	ip, r0, r3
   12c4a:	fa20 f002 	lsr.w	r0, r0, r2
   12c4e:	fa01 fe03 	lsl.w	lr, r1, r3
   12c52:	ea40 000e 	orr.w	r0, r0, lr
   12c56:	fa21 f102 	lsr.w	r1, r1, r2
   12c5a:	4414      	add	r4, r2
   12c5c:	e6c1      	b.n	129e2 <__adddf3+0xe6>
   12c5e:	bf00      	nop

00012c60 <__aeabi_dmul>:
   12c60:	b570      	push	{r4, r5, r6, lr}
   12c62:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12c66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   12c6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   12c6e:	bf1d      	ittte	ne
   12c70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   12c74:	ea94 0f0c 	teqne	r4, ip
   12c78:	ea95 0f0c 	teqne	r5, ip
   12c7c:	f000 f8de 	bleq	12e3c <__aeabi_dmul+0x1dc>
   12c80:	442c      	add	r4, r5
   12c82:	ea81 0603 	eor.w	r6, r1, r3
   12c86:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   12c8a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   12c8e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   12c92:	bf18      	it	ne
   12c94:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   12c98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12c9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   12ca0:	d038      	beq.n	12d14 <__aeabi_dmul+0xb4>
   12ca2:	fba0 ce02 	umull	ip, lr, r0, r2
   12ca6:	f04f 0500 	mov.w	r5, #0
   12caa:	fbe1 e502 	umlal	lr, r5, r1, r2
   12cae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   12cb2:	fbe0 e503 	umlal	lr, r5, r0, r3
   12cb6:	f04f 0600 	mov.w	r6, #0
   12cba:	fbe1 5603 	umlal	r5, r6, r1, r3
   12cbe:	f09c 0f00 	teq	ip, #0
   12cc2:	bf18      	it	ne
   12cc4:	f04e 0e01 	orrne.w	lr, lr, #1
   12cc8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   12ccc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   12cd0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   12cd4:	d204      	bcs.n	12ce0 <__aeabi_dmul+0x80>
   12cd6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   12cda:	416d      	adcs	r5, r5
   12cdc:	eb46 0606 	adc.w	r6, r6, r6
   12ce0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   12ce4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   12ce8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   12cec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   12cf0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   12cf4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   12cf8:	bf88      	it	hi
   12cfa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   12cfe:	d81e      	bhi.n	12d3e <__aeabi_dmul+0xde>
   12d00:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   12d04:	bf08      	it	eq
   12d06:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   12d0a:	f150 0000 	adcs.w	r0, r0, #0
   12d0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   12d12:	bd70      	pop	{r4, r5, r6, pc}
   12d14:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   12d18:	ea46 0101 	orr.w	r1, r6, r1
   12d1c:	ea40 0002 	orr.w	r0, r0, r2
   12d20:	ea81 0103 	eor.w	r1, r1, r3
   12d24:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   12d28:	bfc2      	ittt	gt
   12d2a:	ebd4 050c 	rsbsgt	r5, r4, ip
   12d2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   12d32:	bd70      	popgt	{r4, r5, r6, pc}
   12d34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12d38:	f04f 0e00 	mov.w	lr, #0
   12d3c:	3c01      	subs	r4, #1
   12d3e:	f300 80ab 	bgt.w	12e98 <__aeabi_dmul+0x238>
   12d42:	f114 0f36 	cmn.w	r4, #54	; 0x36
   12d46:	bfde      	ittt	le
   12d48:	2000      	movle	r0, #0
   12d4a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   12d4e:	bd70      	pople	{r4, r5, r6, pc}
   12d50:	f1c4 0400 	rsb	r4, r4, #0
   12d54:	3c20      	subs	r4, #32
   12d56:	da35      	bge.n	12dc4 <__aeabi_dmul+0x164>
   12d58:	340c      	adds	r4, #12
   12d5a:	dc1b      	bgt.n	12d94 <__aeabi_dmul+0x134>
   12d5c:	f104 0414 	add.w	r4, r4, #20
   12d60:	f1c4 0520 	rsb	r5, r4, #32
   12d64:	fa00 f305 	lsl.w	r3, r0, r5
   12d68:	fa20 f004 	lsr.w	r0, r0, r4
   12d6c:	fa01 f205 	lsl.w	r2, r1, r5
   12d70:	ea40 0002 	orr.w	r0, r0, r2
   12d74:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   12d78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   12d7c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12d80:	fa21 f604 	lsr.w	r6, r1, r4
   12d84:	eb42 0106 	adc.w	r1, r2, r6
   12d88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12d8c:	bf08      	it	eq
   12d8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12d92:	bd70      	pop	{r4, r5, r6, pc}
   12d94:	f1c4 040c 	rsb	r4, r4, #12
   12d98:	f1c4 0520 	rsb	r5, r4, #32
   12d9c:	fa00 f304 	lsl.w	r3, r0, r4
   12da0:	fa20 f005 	lsr.w	r0, r0, r5
   12da4:	fa01 f204 	lsl.w	r2, r1, r4
   12da8:	ea40 0002 	orr.w	r0, r0, r2
   12dac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12db0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12db4:	f141 0100 	adc.w	r1, r1, #0
   12db8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12dbc:	bf08      	it	eq
   12dbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12dc2:	bd70      	pop	{r4, r5, r6, pc}
   12dc4:	f1c4 0520 	rsb	r5, r4, #32
   12dc8:	fa00 f205 	lsl.w	r2, r0, r5
   12dcc:	ea4e 0e02 	orr.w	lr, lr, r2
   12dd0:	fa20 f304 	lsr.w	r3, r0, r4
   12dd4:	fa01 f205 	lsl.w	r2, r1, r5
   12dd8:	ea43 0302 	orr.w	r3, r3, r2
   12ddc:	fa21 f004 	lsr.w	r0, r1, r4
   12de0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12de4:	fa21 f204 	lsr.w	r2, r1, r4
   12de8:	ea20 0002 	bic.w	r0, r0, r2
   12dec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   12df0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12df4:	bf08      	it	eq
   12df6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12dfa:	bd70      	pop	{r4, r5, r6, pc}
   12dfc:	f094 0f00 	teq	r4, #0
   12e00:	d10f      	bne.n	12e22 <__aeabi_dmul+0x1c2>
   12e02:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   12e06:	0040      	lsls	r0, r0, #1
   12e08:	eb41 0101 	adc.w	r1, r1, r1
   12e0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12e10:	bf08      	it	eq
   12e12:	3c01      	subeq	r4, #1
   12e14:	d0f7      	beq.n	12e06 <__aeabi_dmul+0x1a6>
   12e16:	ea41 0106 	orr.w	r1, r1, r6
   12e1a:	f095 0f00 	teq	r5, #0
   12e1e:	bf18      	it	ne
   12e20:	4770      	bxne	lr
   12e22:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   12e26:	0052      	lsls	r2, r2, #1
   12e28:	eb43 0303 	adc.w	r3, r3, r3
   12e2c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   12e30:	bf08      	it	eq
   12e32:	3d01      	subeq	r5, #1
   12e34:	d0f7      	beq.n	12e26 <__aeabi_dmul+0x1c6>
   12e36:	ea43 0306 	orr.w	r3, r3, r6
   12e3a:	4770      	bx	lr
   12e3c:	ea94 0f0c 	teq	r4, ip
   12e40:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   12e44:	bf18      	it	ne
   12e46:	ea95 0f0c 	teqne	r5, ip
   12e4a:	d00c      	beq.n	12e66 <__aeabi_dmul+0x206>
   12e4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12e50:	bf18      	it	ne
   12e52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12e56:	d1d1      	bne.n	12dfc <__aeabi_dmul+0x19c>
   12e58:	ea81 0103 	eor.w	r1, r1, r3
   12e5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12e60:	f04f 0000 	mov.w	r0, #0
   12e64:	bd70      	pop	{r4, r5, r6, pc}
   12e66:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12e6a:	bf06      	itte	eq
   12e6c:	4610      	moveq	r0, r2
   12e6e:	4619      	moveq	r1, r3
   12e70:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12e74:	d019      	beq.n	12eaa <__aeabi_dmul+0x24a>
   12e76:	ea94 0f0c 	teq	r4, ip
   12e7a:	d102      	bne.n	12e82 <__aeabi_dmul+0x222>
   12e7c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   12e80:	d113      	bne.n	12eaa <__aeabi_dmul+0x24a>
   12e82:	ea95 0f0c 	teq	r5, ip
   12e86:	d105      	bne.n	12e94 <__aeabi_dmul+0x234>
   12e88:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   12e8c:	bf1c      	itt	ne
   12e8e:	4610      	movne	r0, r2
   12e90:	4619      	movne	r1, r3
   12e92:	d10a      	bne.n	12eaa <__aeabi_dmul+0x24a>
   12e94:	ea81 0103 	eor.w	r1, r1, r3
   12e98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12e9c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12ea0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   12ea4:	f04f 0000 	mov.w	r0, #0
   12ea8:	bd70      	pop	{r4, r5, r6, pc}
   12eaa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12eae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   12eb2:	bd70      	pop	{r4, r5, r6, pc}

00012eb4 <__aeabi_ddiv>:
   12eb4:	b570      	push	{r4, r5, r6, lr}
   12eb6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12eba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   12ebe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   12ec2:	bf1d      	ittte	ne
   12ec4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   12ec8:	ea94 0f0c 	teqne	r4, ip
   12ecc:	ea95 0f0c 	teqne	r5, ip
   12ed0:	f000 f8a7 	bleq	13022 <__aeabi_ddiv+0x16e>
   12ed4:	eba4 0405 	sub.w	r4, r4, r5
   12ed8:	ea81 0e03 	eor.w	lr, r1, r3
   12edc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12ee0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   12ee4:	f000 8088 	beq.w	12ff8 <__aeabi_ddiv+0x144>
   12ee8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   12eec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   12ef0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   12ef4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   12ef8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   12efc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   12f00:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   12f04:	ea4f 2600 	mov.w	r6, r0, lsl #8
   12f08:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   12f0c:	429d      	cmp	r5, r3
   12f0e:	bf08      	it	eq
   12f10:	4296      	cmpeq	r6, r2
   12f12:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   12f16:	f504 7440 	add.w	r4, r4, #768	; 0x300
   12f1a:	d202      	bcs.n	12f22 <__aeabi_ddiv+0x6e>
   12f1c:	085b      	lsrs	r3, r3, #1
   12f1e:	ea4f 0232 	mov.w	r2, r2, rrx
   12f22:	1ab6      	subs	r6, r6, r2
   12f24:	eb65 0503 	sbc.w	r5, r5, r3
   12f28:	085b      	lsrs	r3, r3, #1
   12f2a:	ea4f 0232 	mov.w	r2, r2, rrx
   12f2e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   12f32:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   12f36:	ebb6 0e02 	subs.w	lr, r6, r2
   12f3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   12f3e:	bf22      	ittt	cs
   12f40:	1ab6      	subcs	r6, r6, r2
   12f42:	4675      	movcs	r5, lr
   12f44:	ea40 000c 	orrcs.w	r0, r0, ip
   12f48:	085b      	lsrs	r3, r3, #1
   12f4a:	ea4f 0232 	mov.w	r2, r2, rrx
   12f4e:	ebb6 0e02 	subs.w	lr, r6, r2
   12f52:	eb75 0e03 	sbcs.w	lr, r5, r3
   12f56:	bf22      	ittt	cs
   12f58:	1ab6      	subcs	r6, r6, r2
   12f5a:	4675      	movcs	r5, lr
   12f5c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   12f60:	085b      	lsrs	r3, r3, #1
   12f62:	ea4f 0232 	mov.w	r2, r2, rrx
   12f66:	ebb6 0e02 	subs.w	lr, r6, r2
   12f6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   12f6e:	bf22      	ittt	cs
   12f70:	1ab6      	subcs	r6, r6, r2
   12f72:	4675      	movcs	r5, lr
   12f74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   12f78:	085b      	lsrs	r3, r3, #1
   12f7a:	ea4f 0232 	mov.w	r2, r2, rrx
   12f7e:	ebb6 0e02 	subs.w	lr, r6, r2
   12f82:	eb75 0e03 	sbcs.w	lr, r5, r3
   12f86:	bf22      	ittt	cs
   12f88:	1ab6      	subcs	r6, r6, r2
   12f8a:	4675      	movcs	r5, lr
   12f8c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   12f90:	ea55 0e06 	orrs.w	lr, r5, r6
   12f94:	d018      	beq.n	12fc8 <__aeabi_ddiv+0x114>
   12f96:	ea4f 1505 	mov.w	r5, r5, lsl #4
   12f9a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   12f9e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   12fa2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   12fa6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   12faa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   12fae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   12fb2:	d1c0      	bne.n	12f36 <__aeabi_ddiv+0x82>
   12fb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12fb8:	d10b      	bne.n	12fd2 <__aeabi_ddiv+0x11e>
   12fba:	ea41 0100 	orr.w	r1, r1, r0
   12fbe:	f04f 0000 	mov.w	r0, #0
   12fc2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   12fc6:	e7b6      	b.n	12f36 <__aeabi_ddiv+0x82>
   12fc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12fcc:	bf04      	itt	eq
   12fce:	4301      	orreq	r1, r0
   12fd0:	2000      	moveq	r0, #0
   12fd2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   12fd6:	bf88      	it	hi
   12fd8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   12fdc:	f63f aeaf 	bhi.w	12d3e <__aeabi_dmul+0xde>
   12fe0:	ebb5 0c03 	subs.w	ip, r5, r3
   12fe4:	bf04      	itt	eq
   12fe6:	ebb6 0c02 	subseq.w	ip, r6, r2
   12fea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   12fee:	f150 0000 	adcs.w	r0, r0, #0
   12ff2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   12ff6:	bd70      	pop	{r4, r5, r6, pc}
   12ff8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   12ffc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   13000:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   13004:	bfc2      	ittt	gt
   13006:	ebd4 050c 	rsbsgt	r5, r4, ip
   1300a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1300e:	bd70      	popgt	{r4, r5, r6, pc}
   13010:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   13014:	f04f 0e00 	mov.w	lr, #0
   13018:	3c01      	subs	r4, #1
   1301a:	e690      	b.n	12d3e <__aeabi_dmul+0xde>
   1301c:	ea45 0e06 	orr.w	lr, r5, r6
   13020:	e68d      	b.n	12d3e <__aeabi_dmul+0xde>
   13022:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   13026:	ea94 0f0c 	teq	r4, ip
   1302a:	bf08      	it	eq
   1302c:	ea95 0f0c 	teqeq	r5, ip
   13030:	f43f af3b 	beq.w	12eaa <__aeabi_dmul+0x24a>
   13034:	ea94 0f0c 	teq	r4, ip
   13038:	d10a      	bne.n	13050 <__aeabi_ddiv+0x19c>
   1303a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1303e:	f47f af34 	bne.w	12eaa <__aeabi_dmul+0x24a>
   13042:	ea95 0f0c 	teq	r5, ip
   13046:	f47f af25 	bne.w	12e94 <__aeabi_dmul+0x234>
   1304a:	4610      	mov	r0, r2
   1304c:	4619      	mov	r1, r3
   1304e:	e72c      	b.n	12eaa <__aeabi_dmul+0x24a>
   13050:	ea95 0f0c 	teq	r5, ip
   13054:	d106      	bne.n	13064 <__aeabi_ddiv+0x1b0>
   13056:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1305a:	f43f aefd 	beq.w	12e58 <__aeabi_dmul+0x1f8>
   1305e:	4610      	mov	r0, r2
   13060:	4619      	mov	r1, r3
   13062:	e722      	b.n	12eaa <__aeabi_dmul+0x24a>
   13064:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   13068:	bf18      	it	ne
   1306a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1306e:	f47f aec5 	bne.w	12dfc <__aeabi_dmul+0x19c>
   13072:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   13076:	f47f af0d 	bne.w	12e94 <__aeabi_dmul+0x234>
   1307a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1307e:	f47f aeeb 	bne.w	12e58 <__aeabi_dmul+0x1f8>
   13082:	e712      	b.n	12eaa <__aeabi_dmul+0x24a>

00013084 <__gedf2>:
   13084:	f04f 3cff 	mov.w	ip, #4294967295
   13088:	e006      	b.n	13098 <__cmpdf2+0x4>
   1308a:	bf00      	nop

0001308c <__ledf2>:
   1308c:	f04f 0c01 	mov.w	ip, #1
   13090:	e002      	b.n	13098 <__cmpdf2+0x4>
   13092:	bf00      	nop

00013094 <__cmpdf2>:
   13094:	f04f 0c01 	mov.w	ip, #1
   13098:	f84d cd04 	str.w	ip, [sp, #-4]!
   1309c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   130a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   130a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   130a8:	bf18      	it	ne
   130aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   130ae:	d01b      	beq.n	130e8 <__cmpdf2+0x54>
   130b0:	b001      	add	sp, #4
   130b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   130b6:	bf0c      	ite	eq
   130b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   130bc:	ea91 0f03 	teqne	r1, r3
   130c0:	bf02      	ittt	eq
   130c2:	ea90 0f02 	teqeq	r0, r2
   130c6:	2000      	moveq	r0, #0
   130c8:	4770      	bxeq	lr
   130ca:	f110 0f00 	cmn.w	r0, #0
   130ce:	ea91 0f03 	teq	r1, r3
   130d2:	bf58      	it	pl
   130d4:	4299      	cmppl	r1, r3
   130d6:	bf08      	it	eq
   130d8:	4290      	cmpeq	r0, r2
   130da:	bf2c      	ite	cs
   130dc:	17d8      	asrcs	r0, r3, #31
   130de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   130e2:	f040 0001 	orr.w	r0, r0, #1
   130e6:	4770      	bx	lr
   130e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   130ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   130f0:	d102      	bne.n	130f8 <__cmpdf2+0x64>
   130f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   130f6:	d107      	bne.n	13108 <__cmpdf2+0x74>
   130f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   130fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   13100:	d1d6      	bne.n	130b0 <__cmpdf2+0x1c>
   13102:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   13106:	d0d3      	beq.n	130b0 <__cmpdf2+0x1c>
   13108:	f85d 0b04 	ldr.w	r0, [sp], #4
   1310c:	4770      	bx	lr
   1310e:	bf00      	nop

00013110 <__aeabi_cdrcmple>:
   13110:	4684      	mov	ip, r0
   13112:	4610      	mov	r0, r2
   13114:	4662      	mov	r2, ip
   13116:	468c      	mov	ip, r1
   13118:	4619      	mov	r1, r3
   1311a:	4663      	mov	r3, ip
   1311c:	e000      	b.n	13120 <__aeabi_cdcmpeq>
   1311e:	bf00      	nop

00013120 <__aeabi_cdcmpeq>:
   13120:	b501      	push	{r0, lr}
   13122:	f7ff ffb7 	bl	13094 <__cmpdf2>
   13126:	2800      	cmp	r0, #0
   13128:	bf48      	it	mi
   1312a:	f110 0f00 	cmnmi.w	r0, #0
   1312e:	bd01      	pop	{r0, pc}

00013130 <__aeabi_dcmpeq>:
   13130:	f84d ed08 	str.w	lr, [sp, #-8]!
   13134:	f7ff fff4 	bl	13120 <__aeabi_cdcmpeq>
   13138:	bf0c      	ite	eq
   1313a:	2001      	moveq	r0, #1
   1313c:	2000      	movne	r0, #0
   1313e:	f85d fb08 	ldr.w	pc, [sp], #8
   13142:	bf00      	nop

00013144 <__aeabi_dcmplt>:
   13144:	f84d ed08 	str.w	lr, [sp, #-8]!
   13148:	f7ff ffea 	bl	13120 <__aeabi_cdcmpeq>
   1314c:	bf34      	ite	cc
   1314e:	2001      	movcc	r0, #1
   13150:	2000      	movcs	r0, #0
   13152:	f85d fb08 	ldr.w	pc, [sp], #8
   13156:	bf00      	nop

00013158 <__aeabi_dcmple>:
   13158:	f84d ed08 	str.w	lr, [sp, #-8]!
   1315c:	f7ff ffe0 	bl	13120 <__aeabi_cdcmpeq>
   13160:	bf94      	ite	ls
   13162:	2001      	movls	r0, #1
   13164:	2000      	movhi	r0, #0
   13166:	f85d fb08 	ldr.w	pc, [sp], #8
   1316a:	bf00      	nop

0001316c <__aeabi_dcmpge>:
   1316c:	f84d ed08 	str.w	lr, [sp, #-8]!
   13170:	f7ff ffce 	bl	13110 <__aeabi_cdrcmple>
   13174:	bf94      	ite	ls
   13176:	2001      	movls	r0, #1
   13178:	2000      	movhi	r0, #0
   1317a:	f85d fb08 	ldr.w	pc, [sp], #8
   1317e:	bf00      	nop

00013180 <__aeabi_dcmpgt>:
   13180:	f84d ed08 	str.w	lr, [sp, #-8]!
   13184:	f7ff ffc4 	bl	13110 <__aeabi_cdrcmple>
   13188:	bf34      	ite	cc
   1318a:	2001      	movcc	r0, #1
   1318c:	2000      	movcs	r0, #0
   1318e:	f85d fb08 	ldr.w	pc, [sp], #8
   13192:	bf00      	nop

00013194 <__aeabi_d2iz>:
   13194:	ea4f 0241 	mov.w	r2, r1, lsl #1
   13198:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1319c:	d215      	bcs.n	131ca <__aeabi_d2iz+0x36>
   1319e:	d511      	bpl.n	131c4 <__aeabi_d2iz+0x30>
   131a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   131a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   131a8:	d912      	bls.n	131d0 <__aeabi_d2iz+0x3c>
   131aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   131ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   131b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   131b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   131ba:	fa23 f002 	lsr.w	r0, r3, r2
   131be:	bf18      	it	ne
   131c0:	4240      	negne	r0, r0
   131c2:	4770      	bx	lr
   131c4:	f04f 0000 	mov.w	r0, #0
   131c8:	4770      	bx	lr
   131ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   131ce:	d105      	bne.n	131dc <__aeabi_d2iz+0x48>
   131d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   131d4:	bf08      	it	eq
   131d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   131da:	4770      	bx	lr
   131dc:	f04f 0000 	mov.w	r0, #0
   131e0:	4770      	bx	lr
   131e2:	bf00      	nop

000131e4 <__aeabi_d2uiz>:
   131e4:	004a      	lsls	r2, r1, #1
   131e6:	d211      	bcs.n	1320c <__aeabi_d2uiz+0x28>
   131e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   131ec:	d211      	bcs.n	13212 <__aeabi_d2uiz+0x2e>
   131ee:	d50d      	bpl.n	1320c <__aeabi_d2uiz+0x28>
   131f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   131f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   131f8:	d40e      	bmi.n	13218 <__aeabi_d2uiz+0x34>
   131fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   131fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13202:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   13206:	fa23 f002 	lsr.w	r0, r3, r2
   1320a:	4770      	bx	lr
   1320c:	f04f 0000 	mov.w	r0, #0
   13210:	4770      	bx	lr
   13212:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   13216:	d102      	bne.n	1321e <__aeabi_d2uiz+0x3a>
   13218:	f04f 30ff 	mov.w	r0, #4294967295
   1321c:	4770      	bx	lr
   1321e:	f04f 0000 	mov.w	r0, #0
   13222:	4770      	bx	lr

00013224 <__aeabi_d2f>:
   13224:	ea4f 0241 	mov.w	r2, r1, lsl #1
   13228:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1322c:	bf24      	itt	cs
   1322e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   13232:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   13236:	d90d      	bls.n	13254 <__aeabi_d2f+0x30>
   13238:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1323c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   13240:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   13244:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   13248:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1324c:	bf08      	it	eq
   1324e:	f020 0001 	biceq.w	r0, r0, #1
   13252:	4770      	bx	lr
   13254:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   13258:	d121      	bne.n	1329e <__aeabi_d2f+0x7a>
   1325a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1325e:	bfbc      	itt	lt
   13260:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   13264:	4770      	bxlt	lr
   13266:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1326a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1326e:	f1c2 0218 	rsb	r2, r2, #24
   13272:	f1c2 0c20 	rsb	ip, r2, #32
   13276:	fa10 f30c 	lsls.w	r3, r0, ip
   1327a:	fa20 f002 	lsr.w	r0, r0, r2
   1327e:	bf18      	it	ne
   13280:	f040 0001 	orrne.w	r0, r0, #1
   13284:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   13288:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1328c:	fa03 fc0c 	lsl.w	ip, r3, ip
   13290:	ea40 000c 	orr.w	r0, r0, ip
   13294:	fa23 f302 	lsr.w	r3, r3, r2
   13298:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1329c:	e7cc      	b.n	13238 <__aeabi_d2f+0x14>
   1329e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   132a2:	d107      	bne.n	132b4 <__aeabi_d2f+0x90>
   132a4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   132a8:	bf1e      	ittt	ne
   132aa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   132ae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   132b2:	4770      	bxne	lr
   132b4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   132b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   132bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   132c0:	4770      	bx	lr
   132c2:	bf00      	nop

000132c4 <__aeabi_frsub>:
   132c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   132c8:	e002      	b.n	132d0 <__addsf3>
   132ca:	bf00      	nop

000132cc <__aeabi_fsub>:
   132cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000132d0 <__addsf3>:
   132d0:	0042      	lsls	r2, r0, #1
   132d2:	bf1f      	itttt	ne
   132d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   132d8:	ea92 0f03 	teqne	r2, r3
   132dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   132e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   132e4:	d06a      	beq.n	133bc <__addsf3+0xec>
   132e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
   132ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   132ee:	bfc1      	itttt	gt
   132f0:	18d2      	addgt	r2, r2, r3
   132f2:	4041      	eorgt	r1, r0
   132f4:	4048      	eorgt	r0, r1
   132f6:	4041      	eorgt	r1, r0
   132f8:	bfb8      	it	lt
   132fa:	425b      	neglt	r3, r3
   132fc:	2b19      	cmp	r3, #25
   132fe:	bf88      	it	hi
   13300:	4770      	bxhi	lr
   13302:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   13306:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1330a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1330e:	bf18      	it	ne
   13310:	4240      	negne	r0, r0
   13312:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   13316:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1331a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1331e:	bf18      	it	ne
   13320:	4249      	negne	r1, r1
   13322:	ea92 0f03 	teq	r2, r3
   13326:	d03f      	beq.n	133a8 <__addsf3+0xd8>
   13328:	f1a2 0201 	sub.w	r2, r2, #1
   1332c:	fa41 fc03 	asr.w	ip, r1, r3
   13330:	eb10 000c 	adds.w	r0, r0, ip
   13334:	f1c3 0320 	rsb	r3, r3, #32
   13338:	fa01 f103 	lsl.w	r1, r1, r3
   1333c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   13340:	d502      	bpl.n	13348 <__addsf3+0x78>
   13342:	4249      	negs	r1, r1
   13344:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   13348:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1334c:	d313      	bcc.n	13376 <__addsf3+0xa6>
   1334e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   13352:	d306      	bcc.n	13362 <__addsf3+0x92>
   13354:	0840      	lsrs	r0, r0, #1
   13356:	ea4f 0131 	mov.w	r1, r1, rrx
   1335a:	f102 0201 	add.w	r2, r2, #1
   1335e:	2afe      	cmp	r2, #254	; 0xfe
   13360:	d251      	bcs.n	13406 <__addsf3+0x136>
   13362:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   13366:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1336a:	bf08      	it	eq
   1336c:	f020 0001 	biceq.w	r0, r0, #1
   13370:	ea40 0003 	orr.w	r0, r0, r3
   13374:	4770      	bx	lr
   13376:	0049      	lsls	r1, r1, #1
   13378:	eb40 0000 	adc.w	r0, r0, r0
   1337c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   13380:	f1a2 0201 	sub.w	r2, r2, #1
   13384:	d1ed      	bne.n	13362 <__addsf3+0x92>
   13386:	fab0 fc80 	clz	ip, r0
   1338a:	f1ac 0c08 	sub.w	ip, ip, #8
   1338e:	ebb2 020c 	subs.w	r2, r2, ip
   13392:	fa00 f00c 	lsl.w	r0, r0, ip
   13396:	bfaa      	itet	ge
   13398:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1339c:	4252      	neglt	r2, r2
   1339e:	4318      	orrge	r0, r3
   133a0:	bfbc      	itt	lt
   133a2:	40d0      	lsrlt	r0, r2
   133a4:	4318      	orrlt	r0, r3
   133a6:	4770      	bx	lr
   133a8:	f092 0f00 	teq	r2, #0
   133ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   133b0:	bf06      	itte	eq
   133b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   133b6:	3201      	addeq	r2, #1
   133b8:	3b01      	subne	r3, #1
   133ba:	e7b5      	b.n	13328 <__addsf3+0x58>
   133bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   133c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   133c4:	bf18      	it	ne
   133c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   133ca:	d021      	beq.n	13410 <__addsf3+0x140>
   133cc:	ea92 0f03 	teq	r2, r3
   133d0:	d004      	beq.n	133dc <__addsf3+0x10c>
   133d2:	f092 0f00 	teq	r2, #0
   133d6:	bf08      	it	eq
   133d8:	4608      	moveq	r0, r1
   133da:	4770      	bx	lr
   133dc:	ea90 0f01 	teq	r0, r1
   133e0:	bf1c      	itt	ne
   133e2:	2000      	movne	r0, #0
   133e4:	4770      	bxne	lr
   133e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   133ea:	d104      	bne.n	133f6 <__addsf3+0x126>
   133ec:	0040      	lsls	r0, r0, #1
   133ee:	bf28      	it	cs
   133f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   133f4:	4770      	bx	lr
   133f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   133fa:	bf3c      	itt	cc
   133fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   13400:	4770      	bxcc	lr
   13402:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   13406:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1340a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1340e:	4770      	bx	lr
   13410:	ea7f 6222 	mvns.w	r2, r2, asr #24
   13414:	bf16      	itet	ne
   13416:	4608      	movne	r0, r1
   13418:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1341c:	4601      	movne	r1, r0
   1341e:	0242      	lsls	r2, r0, #9
   13420:	bf06      	itte	eq
   13422:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   13426:	ea90 0f01 	teqeq	r0, r1
   1342a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1342e:	4770      	bx	lr

00013430 <__aeabi_ui2f>:
   13430:	f04f 0300 	mov.w	r3, #0
   13434:	e004      	b.n	13440 <__aeabi_i2f+0x8>
   13436:	bf00      	nop

00013438 <__aeabi_i2f>:
   13438:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1343c:	bf48      	it	mi
   1343e:	4240      	negmi	r0, r0
   13440:	ea5f 0c00 	movs.w	ip, r0
   13444:	bf08      	it	eq
   13446:	4770      	bxeq	lr
   13448:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1344c:	4601      	mov	r1, r0
   1344e:	f04f 0000 	mov.w	r0, #0
   13452:	e01c      	b.n	1348e <__aeabi_l2f+0x2a>

00013454 <__aeabi_ul2f>:
   13454:	ea50 0201 	orrs.w	r2, r0, r1
   13458:	bf08      	it	eq
   1345a:	4770      	bxeq	lr
   1345c:	f04f 0300 	mov.w	r3, #0
   13460:	e00a      	b.n	13478 <__aeabi_l2f+0x14>
   13462:	bf00      	nop

00013464 <__aeabi_l2f>:
   13464:	ea50 0201 	orrs.w	r2, r0, r1
   13468:	bf08      	it	eq
   1346a:	4770      	bxeq	lr
   1346c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   13470:	d502      	bpl.n	13478 <__aeabi_l2f+0x14>
   13472:	4240      	negs	r0, r0
   13474:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13478:	ea5f 0c01 	movs.w	ip, r1
   1347c:	bf02      	ittt	eq
   1347e:	4684      	moveq	ip, r0
   13480:	4601      	moveq	r1, r0
   13482:	2000      	moveq	r0, #0
   13484:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   13488:	bf08      	it	eq
   1348a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1348e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   13492:	fabc f28c 	clz	r2, ip
   13496:	3a08      	subs	r2, #8
   13498:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1349c:	db10      	blt.n	134c0 <__aeabi_l2f+0x5c>
   1349e:	fa01 fc02 	lsl.w	ip, r1, r2
   134a2:	4463      	add	r3, ip
   134a4:	fa00 fc02 	lsl.w	ip, r0, r2
   134a8:	f1c2 0220 	rsb	r2, r2, #32
   134ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   134b0:	fa20 f202 	lsr.w	r2, r0, r2
   134b4:	eb43 0002 	adc.w	r0, r3, r2
   134b8:	bf08      	it	eq
   134ba:	f020 0001 	biceq.w	r0, r0, #1
   134be:	4770      	bx	lr
   134c0:	f102 0220 	add.w	r2, r2, #32
   134c4:	fa01 fc02 	lsl.w	ip, r1, r2
   134c8:	f1c2 0220 	rsb	r2, r2, #32
   134cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   134d0:	fa21 f202 	lsr.w	r2, r1, r2
   134d4:	eb43 0002 	adc.w	r0, r3, r2
   134d8:	bf08      	it	eq
   134da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   134de:	4770      	bx	lr

000134e0 <__aeabi_fmul>:
   134e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   134e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   134e8:	bf1e      	ittt	ne
   134ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   134ee:	ea92 0f0c 	teqne	r2, ip
   134f2:	ea93 0f0c 	teqne	r3, ip
   134f6:	d06f      	beq.n	135d8 <__aeabi_fmul+0xf8>
   134f8:	441a      	add	r2, r3
   134fa:	ea80 0c01 	eor.w	ip, r0, r1
   134fe:	0240      	lsls	r0, r0, #9
   13500:	bf18      	it	ne
   13502:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   13506:	d01e      	beq.n	13546 <__aeabi_fmul+0x66>
   13508:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1350c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   13510:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   13514:	fba0 3101 	umull	r3, r1, r0, r1
   13518:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1351c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   13520:	bf3e      	ittt	cc
   13522:	0049      	lslcc	r1, r1, #1
   13524:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   13528:	005b      	lslcc	r3, r3, #1
   1352a:	ea40 0001 	orr.w	r0, r0, r1
   1352e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   13532:	2afd      	cmp	r2, #253	; 0xfd
   13534:	d81d      	bhi.n	13572 <__aeabi_fmul+0x92>
   13536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1353a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1353e:	bf08      	it	eq
   13540:	f020 0001 	biceq.w	r0, r0, #1
   13544:	4770      	bx	lr
   13546:	f090 0f00 	teq	r0, #0
   1354a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1354e:	bf08      	it	eq
   13550:	0249      	lsleq	r1, r1, #9
   13552:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   13556:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1355a:	3a7f      	subs	r2, #127	; 0x7f
   1355c:	bfc2      	ittt	gt
   1355e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   13562:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   13566:	4770      	bxgt	lr
   13568:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1356c:	f04f 0300 	mov.w	r3, #0
   13570:	3a01      	subs	r2, #1
   13572:	dc5d      	bgt.n	13630 <__aeabi_fmul+0x150>
   13574:	f112 0f19 	cmn.w	r2, #25
   13578:	bfdc      	itt	le
   1357a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1357e:	4770      	bxle	lr
   13580:	f1c2 0200 	rsb	r2, r2, #0
   13584:	0041      	lsls	r1, r0, #1
   13586:	fa21 f102 	lsr.w	r1, r1, r2
   1358a:	f1c2 0220 	rsb	r2, r2, #32
   1358e:	fa00 fc02 	lsl.w	ip, r0, r2
   13592:	ea5f 0031 	movs.w	r0, r1, rrx
   13596:	f140 0000 	adc.w	r0, r0, #0
   1359a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1359e:	bf08      	it	eq
   135a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   135a4:	4770      	bx	lr
   135a6:	f092 0f00 	teq	r2, #0
   135aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   135ae:	bf02      	ittt	eq
   135b0:	0040      	lsleq	r0, r0, #1
   135b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   135b6:	3a01      	subeq	r2, #1
   135b8:	d0f9      	beq.n	135ae <__aeabi_fmul+0xce>
   135ba:	ea40 000c 	orr.w	r0, r0, ip
   135be:	f093 0f00 	teq	r3, #0
   135c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   135c6:	bf02      	ittt	eq
   135c8:	0049      	lsleq	r1, r1, #1
   135ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   135ce:	3b01      	subeq	r3, #1
   135d0:	d0f9      	beq.n	135c6 <__aeabi_fmul+0xe6>
   135d2:	ea41 010c 	orr.w	r1, r1, ip
   135d6:	e78f      	b.n	134f8 <__aeabi_fmul+0x18>
   135d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   135dc:	ea92 0f0c 	teq	r2, ip
   135e0:	bf18      	it	ne
   135e2:	ea93 0f0c 	teqne	r3, ip
   135e6:	d00a      	beq.n	135fe <__aeabi_fmul+0x11e>
   135e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   135ec:	bf18      	it	ne
   135ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   135f2:	d1d8      	bne.n	135a6 <__aeabi_fmul+0xc6>
   135f4:	ea80 0001 	eor.w	r0, r0, r1
   135f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   135fc:	4770      	bx	lr
   135fe:	f090 0f00 	teq	r0, #0
   13602:	bf17      	itett	ne
   13604:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   13608:	4608      	moveq	r0, r1
   1360a:	f091 0f00 	teqne	r1, #0
   1360e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   13612:	d014      	beq.n	1363e <__aeabi_fmul+0x15e>
   13614:	ea92 0f0c 	teq	r2, ip
   13618:	d101      	bne.n	1361e <__aeabi_fmul+0x13e>
   1361a:	0242      	lsls	r2, r0, #9
   1361c:	d10f      	bne.n	1363e <__aeabi_fmul+0x15e>
   1361e:	ea93 0f0c 	teq	r3, ip
   13622:	d103      	bne.n	1362c <__aeabi_fmul+0x14c>
   13624:	024b      	lsls	r3, r1, #9
   13626:	bf18      	it	ne
   13628:	4608      	movne	r0, r1
   1362a:	d108      	bne.n	1363e <__aeabi_fmul+0x15e>
   1362c:	ea80 0001 	eor.w	r0, r0, r1
   13630:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   13634:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   13638:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1363c:	4770      	bx	lr
   1363e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   13642:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   13646:	4770      	bx	lr

00013648 <__aeabi_fdiv>:
   13648:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1364c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   13650:	bf1e      	ittt	ne
   13652:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   13656:	ea92 0f0c 	teqne	r2, ip
   1365a:	ea93 0f0c 	teqne	r3, ip
   1365e:	d069      	beq.n	13734 <__aeabi_fdiv+0xec>
   13660:	eba2 0203 	sub.w	r2, r2, r3
   13664:	ea80 0c01 	eor.w	ip, r0, r1
   13668:	0249      	lsls	r1, r1, #9
   1366a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1366e:	d037      	beq.n	136e0 <__aeabi_fdiv+0x98>
   13670:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13674:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   13678:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   1367c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   13680:	428b      	cmp	r3, r1
   13682:	bf38      	it	cc
   13684:	005b      	lslcc	r3, r3, #1
   13686:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1368a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1368e:	428b      	cmp	r3, r1
   13690:	bf24      	itt	cs
   13692:	1a5b      	subcs	r3, r3, r1
   13694:	ea40 000c 	orrcs.w	r0, r0, ip
   13698:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1369c:	bf24      	itt	cs
   1369e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   136a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   136a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   136aa:	bf24      	itt	cs
   136ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   136b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   136b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   136b8:	bf24      	itt	cs
   136ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   136be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   136c2:	011b      	lsls	r3, r3, #4
   136c4:	bf18      	it	ne
   136c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   136ca:	d1e0      	bne.n	1368e <__aeabi_fdiv+0x46>
   136cc:	2afd      	cmp	r2, #253	; 0xfd
   136ce:	f63f af50 	bhi.w	13572 <__aeabi_fmul+0x92>
   136d2:	428b      	cmp	r3, r1
   136d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   136d8:	bf08      	it	eq
   136da:	f020 0001 	biceq.w	r0, r0, #1
   136de:	4770      	bx	lr
   136e0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   136e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   136e8:	327f      	adds	r2, #127	; 0x7f
   136ea:	bfc2      	ittt	gt
   136ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   136f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   136f4:	4770      	bxgt	lr
   136f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   136fa:	f04f 0300 	mov.w	r3, #0
   136fe:	3a01      	subs	r2, #1
   13700:	e737      	b.n	13572 <__aeabi_fmul+0x92>
   13702:	f092 0f00 	teq	r2, #0
   13706:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1370a:	bf02      	ittt	eq
   1370c:	0040      	lsleq	r0, r0, #1
   1370e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   13712:	3a01      	subeq	r2, #1
   13714:	d0f9      	beq.n	1370a <__aeabi_fdiv+0xc2>
   13716:	ea40 000c 	orr.w	r0, r0, ip
   1371a:	f093 0f00 	teq	r3, #0
   1371e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   13722:	bf02      	ittt	eq
   13724:	0049      	lsleq	r1, r1, #1
   13726:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1372a:	3b01      	subeq	r3, #1
   1372c:	d0f9      	beq.n	13722 <__aeabi_fdiv+0xda>
   1372e:	ea41 010c 	orr.w	r1, r1, ip
   13732:	e795      	b.n	13660 <__aeabi_fdiv+0x18>
   13734:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   13738:	ea92 0f0c 	teq	r2, ip
   1373c:	d108      	bne.n	13750 <__aeabi_fdiv+0x108>
   1373e:	0242      	lsls	r2, r0, #9
   13740:	f47f af7d 	bne.w	1363e <__aeabi_fmul+0x15e>
   13744:	ea93 0f0c 	teq	r3, ip
   13748:	f47f af70 	bne.w	1362c <__aeabi_fmul+0x14c>
   1374c:	4608      	mov	r0, r1
   1374e:	e776      	b.n	1363e <__aeabi_fmul+0x15e>
   13750:	ea93 0f0c 	teq	r3, ip
   13754:	d104      	bne.n	13760 <__aeabi_fdiv+0x118>
   13756:	024b      	lsls	r3, r1, #9
   13758:	f43f af4c 	beq.w	135f4 <__aeabi_fmul+0x114>
   1375c:	4608      	mov	r0, r1
   1375e:	e76e      	b.n	1363e <__aeabi_fmul+0x15e>
   13760:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   13764:	bf18      	it	ne
   13766:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1376a:	d1ca      	bne.n	13702 <__aeabi_fdiv+0xba>
   1376c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   13770:	f47f af5c 	bne.w	1362c <__aeabi_fmul+0x14c>
   13774:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   13778:	f47f af3c 	bne.w	135f4 <__aeabi_fmul+0x114>
   1377c:	e75f      	b.n	1363e <__aeabi_fmul+0x15e>
   1377e:	bf00      	nop

00013780 <__gesf2>:
   13780:	f04f 3cff 	mov.w	ip, #4294967295
   13784:	e006      	b.n	13794 <__cmpsf2+0x4>
   13786:	bf00      	nop

00013788 <__lesf2>:
   13788:	f04f 0c01 	mov.w	ip, #1
   1378c:	e002      	b.n	13794 <__cmpsf2+0x4>
   1378e:	bf00      	nop

00013790 <__cmpsf2>:
   13790:	f04f 0c01 	mov.w	ip, #1
   13794:	f84d cd04 	str.w	ip, [sp, #-4]!
   13798:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1379c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   137a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   137a4:	bf18      	it	ne
   137a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   137aa:	d011      	beq.n	137d0 <__cmpsf2+0x40>
   137ac:	b001      	add	sp, #4
   137ae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   137b2:	bf18      	it	ne
   137b4:	ea90 0f01 	teqne	r0, r1
   137b8:	bf58      	it	pl
   137ba:	ebb2 0003 	subspl.w	r0, r2, r3
   137be:	bf88      	it	hi
   137c0:	17c8      	asrhi	r0, r1, #31
   137c2:	bf38      	it	cc
   137c4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   137c8:	bf18      	it	ne
   137ca:	f040 0001 	orrne.w	r0, r0, #1
   137ce:	4770      	bx	lr
   137d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   137d4:	d102      	bne.n	137dc <__cmpsf2+0x4c>
   137d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   137da:	d105      	bne.n	137e8 <__cmpsf2+0x58>
   137dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   137e0:	d1e4      	bne.n	137ac <__cmpsf2+0x1c>
   137e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   137e6:	d0e1      	beq.n	137ac <__cmpsf2+0x1c>
   137e8:	f85d 0b04 	ldr.w	r0, [sp], #4
   137ec:	4770      	bx	lr
   137ee:	bf00      	nop

000137f0 <__aeabi_cfrcmple>:
   137f0:	4684      	mov	ip, r0
   137f2:	4608      	mov	r0, r1
   137f4:	4661      	mov	r1, ip
   137f6:	e7ff      	b.n	137f8 <__aeabi_cfcmpeq>

000137f8 <__aeabi_cfcmpeq>:
   137f8:	b50f      	push	{r0, r1, r2, r3, lr}
   137fa:	f7ff ffc9 	bl	13790 <__cmpsf2>
   137fe:	2800      	cmp	r0, #0
   13800:	bf48      	it	mi
   13802:	f110 0f00 	cmnmi.w	r0, #0
   13806:	bd0f      	pop	{r0, r1, r2, r3, pc}

00013808 <__aeabi_fcmpeq>:
   13808:	f84d ed08 	str.w	lr, [sp, #-8]!
   1380c:	f7ff fff4 	bl	137f8 <__aeabi_cfcmpeq>
   13810:	bf0c      	ite	eq
   13812:	2001      	moveq	r0, #1
   13814:	2000      	movne	r0, #0
   13816:	f85d fb08 	ldr.w	pc, [sp], #8
   1381a:	bf00      	nop

0001381c <__aeabi_fcmplt>:
   1381c:	f84d ed08 	str.w	lr, [sp, #-8]!
   13820:	f7ff ffea 	bl	137f8 <__aeabi_cfcmpeq>
   13824:	bf34      	ite	cc
   13826:	2001      	movcc	r0, #1
   13828:	2000      	movcs	r0, #0
   1382a:	f85d fb08 	ldr.w	pc, [sp], #8
   1382e:	bf00      	nop

00013830 <__aeabi_fcmple>:
   13830:	f84d ed08 	str.w	lr, [sp, #-8]!
   13834:	f7ff ffe0 	bl	137f8 <__aeabi_cfcmpeq>
   13838:	bf94      	ite	ls
   1383a:	2001      	movls	r0, #1
   1383c:	2000      	movhi	r0, #0
   1383e:	f85d fb08 	ldr.w	pc, [sp], #8
   13842:	bf00      	nop

00013844 <__aeabi_fcmpge>:
   13844:	f84d ed08 	str.w	lr, [sp, #-8]!
   13848:	f7ff ffd2 	bl	137f0 <__aeabi_cfrcmple>
   1384c:	bf94      	ite	ls
   1384e:	2001      	movls	r0, #1
   13850:	2000      	movhi	r0, #0
   13852:	f85d fb08 	ldr.w	pc, [sp], #8
   13856:	bf00      	nop

00013858 <__aeabi_fcmpgt>:
   13858:	f84d ed08 	str.w	lr, [sp, #-8]!
   1385c:	f7ff ffc8 	bl	137f0 <__aeabi_cfrcmple>
   13860:	bf34      	ite	cc
   13862:	2001      	movcc	r0, #1
   13864:	2000      	movcs	r0, #0
   13866:	f85d fb08 	ldr.w	pc, [sp], #8
   1386a:	bf00      	nop

0001386c <__aeabi_f2iz>:
   1386c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   13870:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   13874:	d30f      	bcc.n	13896 <__aeabi_f2iz+0x2a>
   13876:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1387a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1387e:	d90d      	bls.n	1389c <__aeabi_f2iz+0x30>
   13880:	ea4f 2300 	mov.w	r3, r0, lsl #8
   13884:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13888:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1388c:	fa23 f002 	lsr.w	r0, r3, r2
   13890:	bf18      	it	ne
   13892:	4240      	negne	r0, r0
   13894:	4770      	bx	lr
   13896:	f04f 0000 	mov.w	r0, #0
   1389a:	4770      	bx	lr
   1389c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   138a0:	d101      	bne.n	138a6 <__aeabi_f2iz+0x3a>
   138a2:	0242      	lsls	r2, r0, #9
   138a4:	d105      	bne.n	138b2 <__aeabi_f2iz+0x46>
   138a6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   138aa:	bf08      	it	eq
   138ac:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   138b0:	4770      	bx	lr
   138b2:	f04f 0000 	mov.w	r0, #0
   138b6:	4770      	bx	lr

000138b8 <__aeabi_uldivmod>:
   138b8:	b953      	cbnz	r3, 138d0 <__aeabi_uldivmod+0x18>
   138ba:	b94a      	cbnz	r2, 138d0 <__aeabi_uldivmod+0x18>
   138bc:	2900      	cmp	r1, #0
   138be:	bf08      	it	eq
   138c0:	2800      	cmpeq	r0, #0
   138c2:	bf1c      	itt	ne
   138c4:	f04f 31ff 	movne.w	r1, #4294967295
   138c8:	f04f 30ff 	movne.w	r0, #4294967295
   138cc:	f001 b934 	b.w	14b38 <__aeabi_idiv0>
   138d0:	f1ad 0c08 	sub.w	ip, sp, #8
   138d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   138d8:	f000 f844 	bl	13964 <__udivmoddi4>
   138dc:	f8dd e004 	ldr.w	lr, [sp, #4]
   138e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   138e4:	b004      	add	sp, #16
   138e6:	4770      	bx	lr

000138e8 <__aeabi_d2lz>:
   138e8:	b538      	push	{r3, r4, r5, lr}
   138ea:	4605      	mov	r5, r0
   138ec:	460c      	mov	r4, r1
   138ee:	4628      	mov	r0, r5
   138f0:	4621      	mov	r1, r4
   138f2:	2200      	movs	r2, #0
   138f4:	2300      	movs	r3, #0
   138f6:	f7ff fc25 	bl	13144 <__aeabi_dcmplt>
   138fa:	b928      	cbnz	r0, 13908 <__aeabi_d2lz+0x20>
   138fc:	4628      	mov	r0, r5
   138fe:	4621      	mov	r1, r4
   13900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13904:	f000 b80a 	b.w	1391c <__aeabi_d2ulz>
   13908:	4628      	mov	r0, r5
   1390a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   1390e:	f000 f805 	bl	1391c <__aeabi_d2ulz>
   13912:	4240      	negs	r0, r0
   13914:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13918:	bd38      	pop	{r3, r4, r5, pc}
   1391a:	bf00      	nop

0001391c <__aeabi_d2ulz>:
   1391c:	b5d0      	push	{r4, r6, r7, lr}
   1391e:	2200      	movs	r2, #0
   13920:	4b0e      	ldr	r3, [pc, #56]	; (1395c <__aeabi_d2ulz+0x40>)
   13922:	4606      	mov	r6, r0
   13924:	460f      	mov	r7, r1
   13926:	f7ff f99b 	bl	12c60 <__aeabi_dmul>
   1392a:	f7ff fc5b 	bl	131e4 <__aeabi_d2uiz>
   1392e:	4604      	mov	r4, r0
   13930:	f7ff f920 	bl	12b74 <__aeabi_ui2d>
   13934:	2200      	movs	r2, #0
   13936:	4b0a      	ldr	r3, [pc, #40]	; (13960 <__aeabi_d2ulz+0x44>)
   13938:	f7ff f992 	bl	12c60 <__aeabi_dmul>
   1393c:	4602      	mov	r2, r0
   1393e:	460b      	mov	r3, r1
   13940:	4630      	mov	r0, r6
   13942:	4639      	mov	r1, r7
   13944:	f7fe ffd8 	bl	128f8 <__aeabi_dsub>
   13948:	f7ff fc4c 	bl	131e4 <__aeabi_d2uiz>
   1394c:	4623      	mov	r3, r4
   1394e:	2200      	movs	r2, #0
   13950:	ea42 0200 	orr.w	r2, r2, r0
   13954:	4610      	mov	r0, r2
   13956:	4619      	mov	r1, r3
   13958:	bdd0      	pop	{r4, r6, r7, pc}
   1395a:	bf00      	nop
   1395c:	3df00000 	.word	0x3df00000
   13960:	41f00000 	.word	0x41f00000

00013964 <__udivmoddi4>:
   13964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13968:	468c      	mov	ip, r1
   1396a:	460d      	mov	r5, r1
   1396c:	4604      	mov	r4, r0
   1396e:	9e08      	ldr	r6, [sp, #32]
   13970:	2b00      	cmp	r3, #0
   13972:	d151      	bne.n	13a18 <__udivmoddi4+0xb4>
   13974:	428a      	cmp	r2, r1
   13976:	4617      	mov	r7, r2
   13978:	d96d      	bls.n	13a56 <__udivmoddi4+0xf2>
   1397a:	fab2 fe82 	clz	lr, r2
   1397e:	f1be 0f00 	cmp.w	lr, #0
   13982:	d00b      	beq.n	1399c <__udivmoddi4+0x38>
   13984:	f1ce 0c20 	rsb	ip, lr, #32
   13988:	fa01 f50e 	lsl.w	r5, r1, lr
   1398c:	fa20 fc0c 	lsr.w	ip, r0, ip
   13990:	fa02 f70e 	lsl.w	r7, r2, lr
   13994:	ea4c 0c05 	orr.w	ip, ip, r5
   13998:	fa00 f40e 	lsl.w	r4, r0, lr
   1399c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   139a0:	0c25      	lsrs	r5, r4, #16
   139a2:	fbbc f8fa 	udiv	r8, ip, sl
   139a6:	fa1f f987 	uxth.w	r9, r7
   139aa:	fb0a cc18 	mls	ip, sl, r8, ip
   139ae:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   139b2:	fb08 f309 	mul.w	r3, r8, r9
   139b6:	42ab      	cmp	r3, r5
   139b8:	d90a      	bls.n	139d0 <__udivmoddi4+0x6c>
   139ba:	19ed      	adds	r5, r5, r7
   139bc:	f108 32ff 	add.w	r2, r8, #4294967295
   139c0:	f080 8123 	bcs.w	13c0a <__udivmoddi4+0x2a6>
   139c4:	42ab      	cmp	r3, r5
   139c6:	f240 8120 	bls.w	13c0a <__udivmoddi4+0x2a6>
   139ca:	f1a8 0802 	sub.w	r8, r8, #2
   139ce:	443d      	add	r5, r7
   139d0:	1aed      	subs	r5, r5, r3
   139d2:	b2a4      	uxth	r4, r4
   139d4:	fbb5 f0fa 	udiv	r0, r5, sl
   139d8:	fb0a 5510 	mls	r5, sl, r0, r5
   139dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   139e0:	fb00 f909 	mul.w	r9, r0, r9
   139e4:	45a1      	cmp	r9, r4
   139e6:	d909      	bls.n	139fc <__udivmoddi4+0x98>
   139e8:	19e4      	adds	r4, r4, r7
   139ea:	f100 33ff 	add.w	r3, r0, #4294967295
   139ee:	f080 810a 	bcs.w	13c06 <__udivmoddi4+0x2a2>
   139f2:	45a1      	cmp	r9, r4
   139f4:	f240 8107 	bls.w	13c06 <__udivmoddi4+0x2a2>
   139f8:	3802      	subs	r0, #2
   139fa:	443c      	add	r4, r7
   139fc:	eba4 0409 	sub.w	r4, r4, r9
   13a00:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   13a04:	2100      	movs	r1, #0
   13a06:	2e00      	cmp	r6, #0
   13a08:	d061      	beq.n	13ace <__udivmoddi4+0x16a>
   13a0a:	fa24 f40e 	lsr.w	r4, r4, lr
   13a0e:	2300      	movs	r3, #0
   13a10:	6034      	str	r4, [r6, #0]
   13a12:	6073      	str	r3, [r6, #4]
   13a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13a18:	428b      	cmp	r3, r1
   13a1a:	d907      	bls.n	13a2c <__udivmoddi4+0xc8>
   13a1c:	2e00      	cmp	r6, #0
   13a1e:	d054      	beq.n	13aca <__udivmoddi4+0x166>
   13a20:	2100      	movs	r1, #0
   13a22:	e886 0021 	stmia.w	r6, {r0, r5}
   13a26:	4608      	mov	r0, r1
   13a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13a2c:	fab3 f183 	clz	r1, r3
   13a30:	2900      	cmp	r1, #0
   13a32:	f040 808e 	bne.w	13b52 <__udivmoddi4+0x1ee>
   13a36:	42ab      	cmp	r3, r5
   13a38:	d302      	bcc.n	13a40 <__udivmoddi4+0xdc>
   13a3a:	4282      	cmp	r2, r0
   13a3c:	f200 80fa 	bhi.w	13c34 <__udivmoddi4+0x2d0>
   13a40:	1a84      	subs	r4, r0, r2
   13a42:	eb65 0503 	sbc.w	r5, r5, r3
   13a46:	2001      	movs	r0, #1
   13a48:	46ac      	mov	ip, r5
   13a4a:	2e00      	cmp	r6, #0
   13a4c:	d03f      	beq.n	13ace <__udivmoddi4+0x16a>
   13a4e:	e886 1010 	stmia.w	r6, {r4, ip}
   13a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13a56:	b912      	cbnz	r2, 13a5e <__udivmoddi4+0xfa>
   13a58:	2701      	movs	r7, #1
   13a5a:	fbb7 f7f2 	udiv	r7, r7, r2
   13a5e:	fab7 fe87 	clz	lr, r7
   13a62:	f1be 0f00 	cmp.w	lr, #0
   13a66:	d134      	bne.n	13ad2 <__udivmoddi4+0x16e>
   13a68:	1beb      	subs	r3, r5, r7
   13a6a:	0c3a      	lsrs	r2, r7, #16
   13a6c:	fa1f fc87 	uxth.w	ip, r7
   13a70:	2101      	movs	r1, #1
   13a72:	fbb3 f8f2 	udiv	r8, r3, r2
   13a76:	0c25      	lsrs	r5, r4, #16
   13a78:	fb02 3318 	mls	r3, r2, r8, r3
   13a7c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   13a80:	fb0c f308 	mul.w	r3, ip, r8
   13a84:	42ab      	cmp	r3, r5
   13a86:	d907      	bls.n	13a98 <__udivmoddi4+0x134>
   13a88:	19ed      	adds	r5, r5, r7
   13a8a:	f108 30ff 	add.w	r0, r8, #4294967295
   13a8e:	d202      	bcs.n	13a96 <__udivmoddi4+0x132>
   13a90:	42ab      	cmp	r3, r5
   13a92:	f200 80d1 	bhi.w	13c38 <__udivmoddi4+0x2d4>
   13a96:	4680      	mov	r8, r0
   13a98:	1aed      	subs	r5, r5, r3
   13a9a:	b2a3      	uxth	r3, r4
   13a9c:	fbb5 f0f2 	udiv	r0, r5, r2
   13aa0:	fb02 5510 	mls	r5, r2, r0, r5
   13aa4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   13aa8:	fb0c fc00 	mul.w	ip, ip, r0
   13aac:	45a4      	cmp	ip, r4
   13aae:	d907      	bls.n	13ac0 <__udivmoddi4+0x15c>
   13ab0:	19e4      	adds	r4, r4, r7
   13ab2:	f100 33ff 	add.w	r3, r0, #4294967295
   13ab6:	d202      	bcs.n	13abe <__udivmoddi4+0x15a>
   13ab8:	45a4      	cmp	ip, r4
   13aba:	f200 80b8 	bhi.w	13c2e <__udivmoddi4+0x2ca>
   13abe:	4618      	mov	r0, r3
   13ac0:	eba4 040c 	sub.w	r4, r4, ip
   13ac4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   13ac8:	e79d      	b.n	13a06 <__udivmoddi4+0xa2>
   13aca:	4631      	mov	r1, r6
   13acc:	4630      	mov	r0, r6
   13ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13ad2:	f1ce 0420 	rsb	r4, lr, #32
   13ad6:	fa05 f30e 	lsl.w	r3, r5, lr
   13ada:	fa07 f70e 	lsl.w	r7, r7, lr
   13ade:	fa20 f804 	lsr.w	r8, r0, r4
   13ae2:	0c3a      	lsrs	r2, r7, #16
   13ae4:	fa25 f404 	lsr.w	r4, r5, r4
   13ae8:	ea48 0803 	orr.w	r8, r8, r3
   13aec:	fbb4 f1f2 	udiv	r1, r4, r2
   13af0:	ea4f 4518 	mov.w	r5, r8, lsr #16
   13af4:	fb02 4411 	mls	r4, r2, r1, r4
   13af8:	fa1f fc87 	uxth.w	ip, r7
   13afc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   13b00:	fb01 f30c 	mul.w	r3, r1, ip
   13b04:	42ab      	cmp	r3, r5
   13b06:	fa00 f40e 	lsl.w	r4, r0, lr
   13b0a:	d909      	bls.n	13b20 <__udivmoddi4+0x1bc>
   13b0c:	19ed      	adds	r5, r5, r7
   13b0e:	f101 30ff 	add.w	r0, r1, #4294967295
   13b12:	f080 808a 	bcs.w	13c2a <__udivmoddi4+0x2c6>
   13b16:	42ab      	cmp	r3, r5
   13b18:	f240 8087 	bls.w	13c2a <__udivmoddi4+0x2c6>
   13b1c:	3902      	subs	r1, #2
   13b1e:	443d      	add	r5, r7
   13b20:	1aeb      	subs	r3, r5, r3
   13b22:	fa1f f588 	uxth.w	r5, r8
   13b26:	fbb3 f0f2 	udiv	r0, r3, r2
   13b2a:	fb02 3310 	mls	r3, r2, r0, r3
   13b2e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   13b32:	fb00 f30c 	mul.w	r3, r0, ip
   13b36:	42ab      	cmp	r3, r5
   13b38:	d907      	bls.n	13b4a <__udivmoddi4+0x1e6>
   13b3a:	19ed      	adds	r5, r5, r7
   13b3c:	f100 38ff 	add.w	r8, r0, #4294967295
   13b40:	d26f      	bcs.n	13c22 <__udivmoddi4+0x2be>
   13b42:	42ab      	cmp	r3, r5
   13b44:	d96d      	bls.n	13c22 <__udivmoddi4+0x2be>
   13b46:	3802      	subs	r0, #2
   13b48:	443d      	add	r5, r7
   13b4a:	1aeb      	subs	r3, r5, r3
   13b4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   13b50:	e78f      	b.n	13a72 <__udivmoddi4+0x10e>
   13b52:	f1c1 0720 	rsb	r7, r1, #32
   13b56:	fa22 f807 	lsr.w	r8, r2, r7
   13b5a:	408b      	lsls	r3, r1
   13b5c:	fa05 f401 	lsl.w	r4, r5, r1
   13b60:	ea48 0303 	orr.w	r3, r8, r3
   13b64:	fa20 fe07 	lsr.w	lr, r0, r7
   13b68:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   13b6c:	40fd      	lsrs	r5, r7
   13b6e:	ea4e 0e04 	orr.w	lr, lr, r4
   13b72:	fbb5 f9fc 	udiv	r9, r5, ip
   13b76:	ea4f 441e 	mov.w	r4, lr, lsr #16
   13b7a:	fb0c 5519 	mls	r5, ip, r9, r5
   13b7e:	fa1f f883 	uxth.w	r8, r3
   13b82:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   13b86:	fb09 f408 	mul.w	r4, r9, r8
   13b8a:	42ac      	cmp	r4, r5
   13b8c:	fa02 f201 	lsl.w	r2, r2, r1
   13b90:	fa00 fa01 	lsl.w	sl, r0, r1
   13b94:	d908      	bls.n	13ba8 <__udivmoddi4+0x244>
   13b96:	18ed      	adds	r5, r5, r3
   13b98:	f109 30ff 	add.w	r0, r9, #4294967295
   13b9c:	d243      	bcs.n	13c26 <__udivmoddi4+0x2c2>
   13b9e:	42ac      	cmp	r4, r5
   13ba0:	d941      	bls.n	13c26 <__udivmoddi4+0x2c2>
   13ba2:	f1a9 0902 	sub.w	r9, r9, #2
   13ba6:	441d      	add	r5, r3
   13ba8:	1b2d      	subs	r5, r5, r4
   13baa:	fa1f fe8e 	uxth.w	lr, lr
   13bae:	fbb5 f0fc 	udiv	r0, r5, ip
   13bb2:	fb0c 5510 	mls	r5, ip, r0, r5
   13bb6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   13bba:	fb00 f808 	mul.w	r8, r0, r8
   13bbe:	45a0      	cmp	r8, r4
   13bc0:	d907      	bls.n	13bd2 <__udivmoddi4+0x26e>
   13bc2:	18e4      	adds	r4, r4, r3
   13bc4:	f100 35ff 	add.w	r5, r0, #4294967295
   13bc8:	d229      	bcs.n	13c1e <__udivmoddi4+0x2ba>
   13bca:	45a0      	cmp	r8, r4
   13bcc:	d927      	bls.n	13c1e <__udivmoddi4+0x2ba>
   13bce:	3802      	subs	r0, #2
   13bd0:	441c      	add	r4, r3
   13bd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   13bd6:	eba4 0408 	sub.w	r4, r4, r8
   13bda:	fba0 8902 	umull	r8, r9, r0, r2
   13bde:	454c      	cmp	r4, r9
   13be0:	46c6      	mov	lr, r8
   13be2:	464d      	mov	r5, r9
   13be4:	d315      	bcc.n	13c12 <__udivmoddi4+0x2ae>
   13be6:	d012      	beq.n	13c0e <__udivmoddi4+0x2aa>
   13be8:	b156      	cbz	r6, 13c00 <__udivmoddi4+0x29c>
   13bea:	ebba 030e 	subs.w	r3, sl, lr
   13bee:	eb64 0405 	sbc.w	r4, r4, r5
   13bf2:	fa04 f707 	lsl.w	r7, r4, r7
   13bf6:	40cb      	lsrs	r3, r1
   13bf8:	431f      	orrs	r7, r3
   13bfa:	40cc      	lsrs	r4, r1
   13bfc:	6037      	str	r7, [r6, #0]
   13bfe:	6074      	str	r4, [r6, #4]
   13c00:	2100      	movs	r1, #0
   13c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13c06:	4618      	mov	r0, r3
   13c08:	e6f8      	b.n	139fc <__udivmoddi4+0x98>
   13c0a:	4690      	mov	r8, r2
   13c0c:	e6e0      	b.n	139d0 <__udivmoddi4+0x6c>
   13c0e:	45c2      	cmp	sl, r8
   13c10:	d2ea      	bcs.n	13be8 <__udivmoddi4+0x284>
   13c12:	ebb8 0e02 	subs.w	lr, r8, r2
   13c16:	eb69 0503 	sbc.w	r5, r9, r3
   13c1a:	3801      	subs	r0, #1
   13c1c:	e7e4      	b.n	13be8 <__udivmoddi4+0x284>
   13c1e:	4628      	mov	r0, r5
   13c20:	e7d7      	b.n	13bd2 <__udivmoddi4+0x26e>
   13c22:	4640      	mov	r0, r8
   13c24:	e791      	b.n	13b4a <__udivmoddi4+0x1e6>
   13c26:	4681      	mov	r9, r0
   13c28:	e7be      	b.n	13ba8 <__udivmoddi4+0x244>
   13c2a:	4601      	mov	r1, r0
   13c2c:	e778      	b.n	13b20 <__udivmoddi4+0x1bc>
   13c2e:	3802      	subs	r0, #2
   13c30:	443c      	add	r4, r7
   13c32:	e745      	b.n	13ac0 <__udivmoddi4+0x15c>
   13c34:	4608      	mov	r0, r1
   13c36:	e708      	b.n	13a4a <__udivmoddi4+0xe6>
   13c38:	f1a8 0802 	sub.w	r8, r8, #2
   13c3c:	443d      	add	r5, r7
   13c3e:	e72b      	b.n	13a98 <__udivmoddi4+0x134>

00013c40 <selfrel_offset31>:
   13c40:	6803      	ldr	r3, [r0, #0]
   13c42:	005a      	lsls	r2, r3, #1
   13c44:	bf4c      	ite	mi
   13c46:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   13c4a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   13c4e:	4418      	add	r0, r3
   13c50:	4770      	bx	lr
   13c52:	bf00      	nop

00013c54 <search_EIT_table>:
   13c54:	b361      	cbz	r1, 13cb0 <search_EIT_table+0x5c>
   13c56:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c5a:	f101 3aff 	add.w	sl, r1, #4294967295
   13c5e:	4690      	mov	r8, r2
   13c60:	4606      	mov	r6, r0
   13c62:	46d1      	mov	r9, sl
   13c64:	2700      	movs	r7, #0
   13c66:	eb07 0409 	add.w	r4, r7, r9
   13c6a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   13c6e:	1064      	asrs	r4, r4, #1
   13c70:	00e5      	lsls	r5, r4, #3
   13c72:	1971      	adds	r1, r6, r5
   13c74:	4608      	mov	r0, r1
   13c76:	f7ff ffe3 	bl	13c40 <selfrel_offset31>
   13c7a:	45a2      	cmp	sl, r4
   13c7c:	4683      	mov	fp, r0
   13c7e:	f105 0008 	add.w	r0, r5, #8
   13c82:	4430      	add	r0, r6
   13c84:	d009      	beq.n	13c9a <search_EIT_table+0x46>
   13c86:	f7ff ffdb 	bl	13c40 <selfrel_offset31>
   13c8a:	45c3      	cmp	fp, r8
   13c8c:	f100 30ff 	add.w	r0, r0, #4294967295
   13c90:	d805      	bhi.n	13c9e <search_EIT_table+0x4a>
   13c92:	4540      	cmp	r0, r8
   13c94:	d209      	bcs.n	13caa <search_EIT_table+0x56>
   13c96:	1c67      	adds	r7, r4, #1
   13c98:	e7e5      	b.n	13c66 <search_EIT_table+0x12>
   13c9a:	45c3      	cmp	fp, r8
   13c9c:	d905      	bls.n	13caa <search_EIT_table+0x56>
   13c9e:	42a7      	cmp	r7, r4
   13ca0:	d002      	beq.n	13ca8 <search_EIT_table+0x54>
   13ca2:	f104 39ff 	add.w	r9, r4, #4294967295
   13ca6:	e7de      	b.n	13c66 <search_EIT_table+0x12>
   13ca8:	2100      	movs	r1, #0
   13caa:	4608      	mov	r0, r1
   13cac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cb0:	4608      	mov	r0, r1
   13cb2:	4770      	bx	lr

00013cb4 <__gnu_unwind_get_pr_addr>:
   13cb4:	2801      	cmp	r0, #1
   13cb6:	d007      	beq.n	13cc8 <__gnu_unwind_get_pr_addr+0x14>
   13cb8:	2802      	cmp	r0, #2
   13cba:	d007      	beq.n	13ccc <__gnu_unwind_get_pr_addr+0x18>
   13cbc:	4b04      	ldr	r3, [pc, #16]	; (13cd0 <__gnu_unwind_get_pr_addr+0x1c>)
   13cbe:	2800      	cmp	r0, #0
   13cc0:	bf0c      	ite	eq
   13cc2:	4618      	moveq	r0, r3
   13cc4:	2000      	movne	r0, #0
   13cc6:	4770      	bx	lr
   13cc8:	4802      	ldr	r0, [pc, #8]	; (13cd4 <__gnu_unwind_get_pr_addr+0x20>)
   13cca:	4770      	bx	lr
   13ccc:	4802      	ldr	r0, [pc, #8]	; (13cd8 <__gnu_unwind_get_pr_addr+0x24>)
   13cce:	4770      	bx	lr
   13cd0:	000143b9 	.word	0x000143b9
   13cd4:	000143bd 	.word	0x000143bd
   13cd8:	000143c1 	.word	0x000143c1

00013cdc <get_eit_entry>:
   13cdc:	b530      	push	{r4, r5, lr}
   13cde:	4b24      	ldr	r3, [pc, #144]	; (13d70 <get_eit_entry+0x94>)
   13ce0:	b083      	sub	sp, #12
   13ce2:	4604      	mov	r4, r0
   13ce4:	1e8d      	subs	r5, r1, #2
   13ce6:	b37b      	cbz	r3, 13d48 <get_eit_entry+0x6c>
   13ce8:	a901      	add	r1, sp, #4
   13cea:	4628      	mov	r0, r5
   13cec:	f3af 8000 	nop.w
   13cf0:	b320      	cbz	r0, 13d3c <get_eit_entry+0x60>
   13cf2:	9901      	ldr	r1, [sp, #4]
   13cf4:	462a      	mov	r2, r5
   13cf6:	f7ff ffad 	bl	13c54 <search_EIT_table>
   13cfa:	4601      	mov	r1, r0
   13cfc:	b1f0      	cbz	r0, 13d3c <get_eit_entry+0x60>
   13cfe:	f7ff ff9f 	bl	13c40 <selfrel_offset31>
   13d02:	684b      	ldr	r3, [r1, #4]
   13d04:	64a0      	str	r0, [r4, #72]	; 0x48
   13d06:	2b01      	cmp	r3, #1
   13d08:	d012      	beq.n	13d30 <get_eit_entry+0x54>
   13d0a:	2b00      	cmp	r3, #0
   13d0c:	f101 0004 	add.w	r0, r1, #4
   13d10:	db20      	blt.n	13d54 <get_eit_entry+0x78>
   13d12:	f7ff ff95 	bl	13c40 <selfrel_offset31>
   13d16:	2300      	movs	r3, #0
   13d18:	64e0      	str	r0, [r4, #76]	; 0x4c
   13d1a:	6523      	str	r3, [r4, #80]	; 0x50
   13d1c:	6803      	ldr	r3, [r0, #0]
   13d1e:	2b00      	cmp	r3, #0
   13d20:	db1c      	blt.n	13d5c <get_eit_entry+0x80>
   13d22:	f7ff ff8d 	bl	13c40 <selfrel_offset31>
   13d26:	2300      	movs	r3, #0
   13d28:	6120      	str	r0, [r4, #16]
   13d2a:	4618      	mov	r0, r3
   13d2c:	b003      	add	sp, #12
   13d2e:	bd30      	pop	{r4, r5, pc}
   13d30:	2300      	movs	r3, #0
   13d32:	6123      	str	r3, [r4, #16]
   13d34:	2305      	movs	r3, #5
   13d36:	4618      	mov	r0, r3
   13d38:	b003      	add	sp, #12
   13d3a:	bd30      	pop	{r4, r5, pc}
   13d3c:	2300      	movs	r3, #0
   13d3e:	6123      	str	r3, [r4, #16]
   13d40:	2309      	movs	r3, #9
   13d42:	4618      	mov	r0, r3
   13d44:	b003      	add	sp, #12
   13d46:	bd30      	pop	{r4, r5, pc}
   13d48:	490a      	ldr	r1, [pc, #40]	; (13d74 <get_eit_entry+0x98>)
   13d4a:	480b      	ldr	r0, [pc, #44]	; (13d78 <get_eit_entry+0x9c>)
   13d4c:	1a09      	subs	r1, r1, r0
   13d4e:	10c9      	asrs	r1, r1, #3
   13d50:	9101      	str	r1, [sp, #4]
   13d52:	e7cf      	b.n	13cf4 <get_eit_entry+0x18>
   13d54:	2301      	movs	r3, #1
   13d56:	64e0      	str	r0, [r4, #76]	; 0x4c
   13d58:	6523      	str	r3, [r4, #80]	; 0x50
   13d5a:	e7df      	b.n	13d1c <get_eit_entry+0x40>
   13d5c:	f3c3 6003 	ubfx	r0, r3, #24, #4
   13d60:	f7ff ffa8 	bl	13cb4 <__gnu_unwind_get_pr_addr>
   13d64:	2800      	cmp	r0, #0
   13d66:	6120      	str	r0, [r4, #16]
   13d68:	bf14      	ite	ne
   13d6a:	2300      	movne	r3, #0
   13d6c:	2309      	moveq	r3, #9
   13d6e:	e7dc      	b.n	13d2a <get_eit_entry+0x4e>
   13d70:	00000000 	.word	0x00000000
   13d74:	00025618 	.word	0x00025618
   13d78:	000253e0 	.word	0x000253e0

00013d7c <restore_non_core_regs>:
   13d7c:	6803      	ldr	r3, [r0, #0]
   13d7e:	07da      	lsls	r2, r3, #31
   13d80:	b510      	push	{r4, lr}
   13d82:	4604      	mov	r4, r0
   13d84:	d406      	bmi.n	13d94 <restore_non_core_regs+0x18>
   13d86:	079b      	lsls	r3, r3, #30
   13d88:	f100 0048 	add.w	r0, r0, #72	; 0x48
   13d8c:	d509      	bpl.n	13da2 <restore_non_core_regs+0x26>
   13d8e:	f000 fc51 	bl	14634 <__gnu_Unwind_Restore_VFP_D>
   13d92:	6823      	ldr	r3, [r4, #0]
   13d94:	0759      	lsls	r1, r3, #29
   13d96:	d509      	bpl.n	13dac <restore_non_core_regs+0x30>
   13d98:	071a      	lsls	r2, r3, #28
   13d9a:	d50e      	bpl.n	13dba <restore_non_core_regs+0x3e>
   13d9c:	06db      	lsls	r3, r3, #27
   13d9e:	d513      	bpl.n	13dc8 <restore_non_core_regs+0x4c>
   13da0:	bd10      	pop	{r4, pc}
   13da2:	f000 fc3f 	bl	14624 <__gnu_Unwind_Restore_VFP>
   13da6:	6823      	ldr	r3, [r4, #0]
   13da8:	0759      	lsls	r1, r3, #29
   13daa:	d4f5      	bmi.n	13d98 <restore_non_core_regs+0x1c>
   13dac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   13db0:	f000 fc48 	bl	14644 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   13db4:	6823      	ldr	r3, [r4, #0]
   13db6:	071a      	lsls	r2, r3, #28
   13db8:	d4f0      	bmi.n	13d9c <restore_non_core_regs+0x20>
   13dba:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   13dbe:	f000 fc49 	bl	14654 <__gnu_Unwind_Restore_WMMXD>
   13dc2:	6823      	ldr	r3, [r4, #0]
   13dc4:	06db      	lsls	r3, r3, #27
   13dc6:	d4eb      	bmi.n	13da0 <restore_non_core_regs+0x24>
   13dc8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   13dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13dd0:	f000 bc84 	b.w	146dc <__gnu_Unwind_Restore_WMMXC>

00013dd4 <_Unwind_decode_typeinfo_ptr.isra.0>:
   13dd4:	6803      	ldr	r3, [r0, #0]
   13dd6:	b103      	cbz	r3, 13dda <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
   13dd8:	4403      	add	r3, r0
   13dda:	4618      	mov	r0, r3
   13ddc:	4770      	bx	lr
   13dde:	bf00      	nop

00013de0 <__gnu_unwind_24bit.isra.1>:
   13de0:	2009      	movs	r0, #9
   13de2:	4770      	bx	lr

00013de4 <_Unwind_DebugHook>:
   13de4:	4770      	bx	lr
   13de6:	bf00      	nop

00013de8 <unwind_phase2>:
   13de8:	b570      	push	{r4, r5, r6, lr}
   13dea:	4604      	mov	r4, r0
   13dec:	460d      	mov	r5, r1
   13dee:	e008      	b.n	13e02 <unwind_phase2+0x1a>
   13df0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   13df2:	6163      	str	r3, [r4, #20]
   13df4:	462a      	mov	r2, r5
   13df6:	6923      	ldr	r3, [r4, #16]
   13df8:	4621      	mov	r1, r4
   13dfa:	2001      	movs	r0, #1
   13dfc:	4798      	blx	r3
   13dfe:	2808      	cmp	r0, #8
   13e00:	d108      	bne.n	13e14 <unwind_phase2+0x2c>
   13e02:	6c29      	ldr	r1, [r5, #64]	; 0x40
   13e04:	4620      	mov	r0, r4
   13e06:	f7ff ff69 	bl	13cdc <get_eit_entry>
   13e0a:	4606      	mov	r6, r0
   13e0c:	2800      	cmp	r0, #0
   13e0e:	d0ef      	beq.n	13df0 <unwind_phase2+0x8>
   13e10:	f000 fe94 	bl	14b3c <abort>
   13e14:	2807      	cmp	r0, #7
   13e16:	d1fb      	bne.n	13e10 <unwind_phase2+0x28>
   13e18:	4630      	mov	r0, r6
   13e1a:	6c29      	ldr	r1, [r5, #64]	; 0x40
   13e1c:	f7ff ffe2 	bl	13de4 <_Unwind_DebugHook>
   13e20:	1d28      	adds	r0, r5, #4
   13e22:	f000 fbf3 	bl	1460c <__restore_core_regs>
   13e26:	bf00      	nop

00013e28 <unwind_phase2_forced>:
   13e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13e2c:	1d0c      	adds	r4, r1, #4
   13e2e:	4605      	mov	r5, r0
   13e30:	4692      	mov	sl, r2
   13e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   13e34:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   13e38:	ae03      	add	r6, sp, #12
   13e3a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   13e3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   13e3e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   13e40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   13e42:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   13e44:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   13e48:	ac02      	add	r4, sp, #8
   13e4a:	f8d5 800c 	ldr.w	r8, [r5, #12]
   13e4e:	f8d5 9018 	ldr.w	r9, [r5, #24]
   13e52:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   13e56:	2300      	movs	r3, #0
   13e58:	4628      	mov	r0, r5
   13e5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
   13e5c:	6023      	str	r3, [r4, #0]
   13e5e:	f7ff ff3d 	bl	13cdc <get_eit_entry>
   13e62:	f1ba 0f00 	cmp.w	sl, #0
   13e66:	4607      	mov	r7, r0
   13e68:	bf14      	ite	ne
   13e6a:	260a      	movne	r6, #10
   13e6c:	2609      	moveq	r6, #9
   13e6e:	b17f      	cbz	r7, 13e90 <unwind_phase2_forced+0x68>
   13e70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13e72:	f046 0110 	orr.w	r1, r6, #16
   13e76:	e88d 0210 	stmia.w	sp, {r4, r9}
   13e7a:	462a      	mov	r2, r5
   13e7c:	6463      	str	r3, [r4, #68]	; 0x44
   13e7e:	2001      	movs	r0, #1
   13e80:	462b      	mov	r3, r5
   13e82:	47c0      	blx	r8
   13e84:	bb78      	cbnz	r0, 13ee6 <unwind_phase2_forced+0xbe>
   13e86:	4638      	mov	r0, r7
   13e88:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   13e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13e90:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13e92:	616b      	str	r3, [r5, #20]
   13e94:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   13e98:	4621      	mov	r1, r4
   13e9a:	a87a      	add	r0, sp, #488	; 0x1e8
   13e9c:	f001 fd10 	bl	158c0 <memcpy>
   13ea0:	692b      	ldr	r3, [r5, #16]
   13ea2:	aa7a      	add	r2, sp, #488	; 0x1e8
   13ea4:	4629      	mov	r1, r5
   13ea6:	4630      	mov	r0, r6
   13ea8:	4798      	blx	r3
   13eaa:	9b88      	ldr	r3, [sp, #544]	; 0x220
   13eac:	4682      	mov	sl, r0
   13eae:	e88d 0210 	stmia.w	sp, {r4, r9}
   13eb2:	4631      	mov	r1, r6
   13eb4:	6463      	str	r3, [r4, #68]	; 0x44
   13eb6:	462a      	mov	r2, r5
   13eb8:	462b      	mov	r3, r5
   13eba:	2001      	movs	r0, #1
   13ebc:	47c0      	blx	r8
   13ebe:	b990      	cbnz	r0, 13ee6 <unwind_phase2_forced+0xbe>
   13ec0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   13ec4:	a97a      	add	r1, sp, #488	; 0x1e8
   13ec6:	4620      	mov	r0, r4
   13ec8:	f001 fcfa 	bl	158c0 <memcpy>
   13ecc:	f1ba 0f08 	cmp.w	sl, #8
   13ed0:	d106      	bne.n	13ee0 <unwind_phase2_forced+0xb8>
   13ed2:	6c21      	ldr	r1, [r4, #64]	; 0x40
   13ed4:	4628      	mov	r0, r5
   13ed6:	f7ff ff01 	bl	13cdc <get_eit_entry>
   13eda:	2609      	movs	r6, #9
   13edc:	4607      	mov	r7, r0
   13ede:	e7c6      	b.n	13e6e <unwind_phase2_forced+0x46>
   13ee0:	f1ba 0f07 	cmp.w	sl, #7
   13ee4:	d005      	beq.n	13ef2 <unwind_phase2_forced+0xca>
   13ee6:	2709      	movs	r7, #9
   13ee8:	4638      	mov	r0, r7
   13eea:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   13eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13ef2:	4638      	mov	r0, r7
   13ef4:	6c21      	ldr	r1, [r4, #64]	; 0x40
   13ef6:	f7ff ff75 	bl	13de4 <_Unwind_DebugHook>
   13efa:	a803      	add	r0, sp, #12
   13efc:	f000 fb86 	bl	1460c <__restore_core_regs>

00013f00 <_Unwind_GetCFA>:
   13f00:	6c40      	ldr	r0, [r0, #68]	; 0x44
   13f02:	4770      	bx	lr

00013f04 <__gnu_Unwind_RaiseException>:
   13f04:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f06:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   13f08:	640b      	str	r3, [r1, #64]	; 0x40
   13f0a:	1d0e      	adds	r6, r1, #4
   13f0c:	460f      	mov	r7, r1
   13f0e:	4604      	mov	r4, r0
   13f10:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   13f12:	b0f9      	sub	sp, #484	; 0x1e4
   13f14:	ad01      	add	r5, sp, #4
   13f16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13f18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   13f1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13f1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   13f1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13f20:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   13f24:	f04f 36ff 	mov.w	r6, #4294967295
   13f28:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   13f2c:	9600      	str	r6, [sp, #0]
   13f2e:	e006      	b.n	13f3e <__gnu_Unwind_RaiseException+0x3a>
   13f30:	6923      	ldr	r3, [r4, #16]
   13f32:	466a      	mov	r2, sp
   13f34:	4621      	mov	r1, r4
   13f36:	4798      	blx	r3
   13f38:	2808      	cmp	r0, #8
   13f3a:	4605      	mov	r5, r0
   13f3c:	d108      	bne.n	13f50 <__gnu_Unwind_RaiseException+0x4c>
   13f3e:	9910      	ldr	r1, [sp, #64]	; 0x40
   13f40:	4620      	mov	r0, r4
   13f42:	f7ff fecb 	bl	13cdc <get_eit_entry>
   13f46:	2800      	cmp	r0, #0
   13f48:	d0f2      	beq.n	13f30 <__gnu_Unwind_RaiseException+0x2c>
   13f4a:	2009      	movs	r0, #9
   13f4c:	b079      	add	sp, #484	; 0x1e4
   13f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13f50:	4668      	mov	r0, sp
   13f52:	f7ff ff13 	bl	13d7c <restore_non_core_regs>
   13f56:	2d06      	cmp	r5, #6
   13f58:	d1f7      	bne.n	13f4a <__gnu_Unwind_RaiseException+0x46>
   13f5a:	4639      	mov	r1, r7
   13f5c:	4620      	mov	r0, r4
   13f5e:	f7ff ff43 	bl	13de8 <unwind_phase2>
   13f62:	bf00      	nop

00013f64 <__gnu_Unwind_ForcedUnwind>:
   13f64:	b430      	push	{r4, r5}
   13f66:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   13f68:	60c1      	str	r1, [r0, #12]
   13f6a:	6182      	str	r2, [r0, #24]
   13f6c:	4619      	mov	r1, r3
   13f6e:	641d      	str	r5, [r3, #64]	; 0x40
   13f70:	2200      	movs	r2, #0
   13f72:	bc30      	pop	{r4, r5}
   13f74:	e758      	b.n	13e28 <unwind_phase2_forced>
   13f76:	bf00      	nop

00013f78 <__gnu_Unwind_Resume>:
   13f78:	b570      	push	{r4, r5, r6, lr}
   13f7a:	68c6      	ldr	r6, [r0, #12]
   13f7c:	6943      	ldr	r3, [r0, #20]
   13f7e:	640b      	str	r3, [r1, #64]	; 0x40
   13f80:	b126      	cbz	r6, 13f8c <__gnu_Unwind_Resume+0x14>
   13f82:	2201      	movs	r2, #1
   13f84:	f7ff ff50 	bl	13e28 <unwind_phase2_forced>
   13f88:	f000 fdd8 	bl	14b3c <abort>
   13f8c:	6903      	ldr	r3, [r0, #16]
   13f8e:	460a      	mov	r2, r1
   13f90:	4604      	mov	r4, r0
   13f92:	460d      	mov	r5, r1
   13f94:	4601      	mov	r1, r0
   13f96:	2002      	movs	r0, #2
   13f98:	4798      	blx	r3
   13f9a:	2807      	cmp	r0, #7
   13f9c:	d007      	beq.n	13fae <__gnu_Unwind_Resume+0x36>
   13f9e:	2808      	cmp	r0, #8
   13fa0:	d103      	bne.n	13faa <__gnu_Unwind_Resume+0x32>
   13fa2:	4629      	mov	r1, r5
   13fa4:	4620      	mov	r0, r4
   13fa6:	f7ff ff1f 	bl	13de8 <unwind_phase2>
   13faa:	f000 fdc7 	bl	14b3c <abort>
   13fae:	4630      	mov	r0, r6
   13fb0:	6c29      	ldr	r1, [r5, #64]	; 0x40
   13fb2:	f7ff ff17 	bl	13de4 <_Unwind_DebugHook>
   13fb6:	1d28      	adds	r0, r5, #4
   13fb8:	f000 fb28 	bl	1460c <__restore_core_regs>

00013fbc <__gnu_Unwind_Resume_or_Rethrow>:
   13fbc:	68c2      	ldr	r2, [r0, #12]
   13fbe:	b11a      	cbz	r2, 13fc8 <__gnu_Unwind_Resume_or_Rethrow+0xc>
   13fc0:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   13fc2:	640a      	str	r2, [r1, #64]	; 0x40
   13fc4:	2200      	movs	r2, #0
   13fc6:	e72f      	b.n	13e28 <unwind_phase2_forced>
   13fc8:	e79c      	b.n	13f04 <__gnu_Unwind_RaiseException>
   13fca:	bf00      	nop

00013fcc <_Unwind_Complete>:
   13fcc:	4770      	bx	lr
   13fce:	bf00      	nop

00013fd0 <_Unwind_DeleteException>:
   13fd0:	6883      	ldr	r3, [r0, #8]
   13fd2:	b113      	cbz	r3, 13fda <_Unwind_DeleteException+0xa>
   13fd4:	4601      	mov	r1, r0
   13fd6:	2001      	movs	r0, #1
   13fd8:	4718      	bx	r3
   13fda:	4770      	bx	lr

00013fdc <_Unwind_VRS_Get>:
   13fdc:	b500      	push	{lr}
   13fde:	2904      	cmp	r1, #4
   13fe0:	d807      	bhi.n	13ff2 <_Unwind_VRS_Get+0x16>
   13fe2:	e8df f001 	tbb	[pc, r1]
   13fe6:	0903      	.short	0x0903
   13fe8:	0906      	.short	0x0906
   13fea:	09          	.byte	0x09
   13feb:	00          	.byte	0x00
   13fec:	b90b      	cbnz	r3, 13ff2 <_Unwind_VRS_Get+0x16>
   13fee:	2a0f      	cmp	r2, #15
   13ff0:	d905      	bls.n	13ffe <_Unwind_VRS_Get+0x22>
   13ff2:	2002      	movs	r0, #2
   13ff4:	f85d fb04 	ldr.w	pc, [sp], #4
   13ff8:	2001      	movs	r0, #1
   13ffa:	f85d fb04 	ldr.w	pc, [sp], #4
   13ffe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   14002:	4618      	mov	r0, r3
   14004:	6853      	ldr	r3, [r2, #4]
   14006:	9a01      	ldr	r2, [sp, #4]
   14008:	6013      	str	r3, [r2, #0]
   1400a:	f85d fb04 	ldr.w	pc, [sp], #4
   1400e:	bf00      	nop

00014010 <_Unwind_GetGR>:
   14010:	b510      	push	{r4, lr}
   14012:	b084      	sub	sp, #16
   14014:	2300      	movs	r3, #0
   14016:	ac03      	add	r4, sp, #12
   14018:	460a      	mov	r2, r1
   1401a:	9400      	str	r4, [sp, #0]
   1401c:	4619      	mov	r1, r3
   1401e:	f7ff ffdd 	bl	13fdc <_Unwind_VRS_Get>
   14022:	9803      	ldr	r0, [sp, #12]
   14024:	b004      	add	sp, #16
   14026:	bd10      	pop	{r4, pc}

00014028 <_Unwind_VRS_Set>:
   14028:	b500      	push	{lr}
   1402a:	2904      	cmp	r1, #4
   1402c:	d807      	bhi.n	1403e <_Unwind_VRS_Set+0x16>
   1402e:	e8df f001 	tbb	[pc, r1]
   14032:	0903      	.short	0x0903
   14034:	0906      	.short	0x0906
   14036:	09          	.byte	0x09
   14037:	00          	.byte	0x00
   14038:	b90b      	cbnz	r3, 1403e <_Unwind_VRS_Set+0x16>
   1403a:	2a0f      	cmp	r2, #15
   1403c:	d905      	bls.n	1404a <_Unwind_VRS_Set+0x22>
   1403e:	2002      	movs	r0, #2
   14040:	f85d fb04 	ldr.w	pc, [sp], #4
   14044:	2001      	movs	r0, #1
   14046:	f85d fb04 	ldr.w	pc, [sp], #4
   1404a:	9901      	ldr	r1, [sp, #4]
   1404c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   14050:	6809      	ldr	r1, [r1, #0]
   14052:	6051      	str	r1, [r2, #4]
   14054:	4618      	mov	r0, r3
   14056:	f85d fb04 	ldr.w	pc, [sp], #4
   1405a:	bf00      	nop

0001405c <_Unwind_SetGR>:
   1405c:	b510      	push	{r4, lr}
   1405e:	b084      	sub	sp, #16
   14060:	ac04      	add	r4, sp, #16
   14062:	2300      	movs	r3, #0
   14064:	f844 2d04 	str.w	r2, [r4, #-4]!
   14068:	460a      	mov	r2, r1
   1406a:	9400      	str	r4, [sp, #0]
   1406c:	4619      	mov	r1, r3
   1406e:	f7ff ffdb 	bl	14028 <_Unwind_VRS_Set>
   14072:	b004      	add	sp, #16
   14074:	bd10      	pop	{r4, pc}
   14076:	bf00      	nop

00014078 <__gnu_Unwind_Backtrace>:
   14078:	b5f0      	push	{r4, r5, r6, r7, lr}
   1407a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1407c:	6413      	str	r3, [r2, #64]	; 0x40
   1407e:	1d15      	adds	r5, r2, #4
   14080:	4607      	mov	r7, r0
   14082:	460e      	mov	r6, r1
   14084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   14086:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   1408a:	ac17      	add	r4, sp, #92	; 0x5c
   1408c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1408e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   14090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   14092:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   14094:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   14096:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1409a:	f04f 35ff 	mov.w	r5, #4294967295
   1409e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   140a2:	9516      	str	r5, [sp, #88]	; 0x58
   140a4:	e010      	b.n	140c8 <__gnu_Unwind_Backtrace+0x50>
   140a6:	a816      	add	r0, sp, #88	; 0x58
   140a8:	f7ff ffd8 	bl	1405c <_Unwind_SetGR>
   140ac:	4631      	mov	r1, r6
   140ae:	a816      	add	r0, sp, #88	; 0x58
   140b0:	47b8      	blx	r7
   140b2:	aa16      	add	r2, sp, #88	; 0x58
   140b4:	4669      	mov	r1, sp
   140b6:	b978      	cbnz	r0, 140d8 <__gnu_Unwind_Backtrace+0x60>
   140b8:	9b04      	ldr	r3, [sp, #16]
   140ba:	2008      	movs	r0, #8
   140bc:	4798      	blx	r3
   140be:	2805      	cmp	r0, #5
   140c0:	4604      	mov	r4, r0
   140c2:	d00a      	beq.n	140da <__gnu_Unwind_Backtrace+0x62>
   140c4:	2809      	cmp	r0, #9
   140c6:	d007      	beq.n	140d8 <__gnu_Unwind_Backtrace+0x60>
   140c8:	9926      	ldr	r1, [sp, #152]	; 0x98
   140ca:	4668      	mov	r0, sp
   140cc:	f7ff fe06 	bl	13cdc <get_eit_entry>
   140d0:	466a      	mov	r2, sp
   140d2:	210c      	movs	r1, #12
   140d4:	2800      	cmp	r0, #0
   140d6:	d0e6      	beq.n	140a6 <__gnu_Unwind_Backtrace+0x2e>
   140d8:	2409      	movs	r4, #9
   140da:	a816      	add	r0, sp, #88	; 0x58
   140dc:	f7ff fe4e 	bl	13d7c <restore_non_core_regs>
   140e0:	4620      	mov	r0, r4
   140e2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   140e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000140e8 <__gnu_unwind_pr_common>:
   140e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140ec:	460d      	mov	r5, r1
   140ee:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
   140f0:	b08b      	sub	sp, #44	; 0x2c
   140f2:	1d0c      	adds	r4, r1, #4
   140f4:	6809      	ldr	r1, [r1, #0]
   140f6:	9107      	str	r1, [sp, #28]
   140f8:	4691      	mov	r9, r2
   140fa:	9408      	str	r4, [sp, #32]
   140fc:	f000 0b03 	and.w	fp, r0, #3
   14100:	461e      	mov	r6, r3
   14102:	2b00      	cmp	r3, #0
   14104:	d160      	bne.n	141c8 <__gnu_unwind_pr_common+0xe0>
   14106:	0209      	lsls	r1, r1, #8
   14108:	2303      	movs	r3, #3
   1410a:	9107      	str	r1, [sp, #28]
   1410c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
   14110:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   14114:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   14116:	f1bb 0f02 	cmp.w	fp, #2
   1411a:	bf08      	it	eq
   1411c:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   1411e:	f013 0301 	ands.w	r3, r3, #1
   14122:	d140      	bne.n	141a6 <__gnu_unwind_pr_common+0xbe>
   14124:	9301      	str	r3, [sp, #4]
   14126:	f000 0308 	and.w	r3, r0, #8
   1412a:	9303      	str	r3, [sp, #12]
   1412c:	f8d4 8000 	ldr.w	r8, [r4]
   14130:	f1b8 0f00 	cmp.w	r8, #0
   14134:	d039      	beq.n	141aa <__gnu_unwind_pr_common+0xc2>
   14136:	2e02      	cmp	r6, #2
   14138:	d043      	beq.n	141c2 <__gnu_unwind_pr_common+0xda>
   1413a:	f8b4 8000 	ldrh.w	r8, [r4]
   1413e:	8867      	ldrh	r7, [r4, #2]
   14140:	3404      	adds	r4, #4
   14142:	6cab      	ldr	r3, [r5, #72]	; 0x48
   14144:	f027 0a01 	bic.w	sl, r7, #1
   14148:	210f      	movs	r1, #15
   1414a:	4648      	mov	r0, r9
   1414c:	449a      	add	sl, r3
   1414e:	f7ff ff5f 	bl	14010 <_Unwind_GetGR>
   14152:	4582      	cmp	sl, r0
   14154:	d833      	bhi.n	141be <__gnu_unwind_pr_common+0xd6>
   14156:	f028 0301 	bic.w	r3, r8, #1
   1415a:	449a      	add	sl, r3
   1415c:	4550      	cmp	r0, sl
   1415e:	bf2c      	ite	cs
   14160:	2000      	movcs	r0, #0
   14162:	2001      	movcc	r0, #1
   14164:	007f      	lsls	r7, r7, #1
   14166:	f007 0702 	and.w	r7, r7, #2
   1416a:	f008 0801 	and.w	r8, r8, #1
   1416e:	ea47 0708 	orr.w	r7, r7, r8
   14172:	2f01      	cmp	r7, #1
   14174:	d03e      	beq.n	141f4 <__gnu_unwind_pr_common+0x10c>
   14176:	d335      	bcc.n	141e4 <__gnu_unwind_pr_common+0xfc>
   14178:	2f02      	cmp	r7, #2
   1417a:	d11c      	bne.n	141b6 <__gnu_unwind_pr_common+0xce>
   1417c:	6823      	ldr	r3, [r4, #0]
   1417e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   14182:	9202      	str	r2, [sp, #8]
   14184:	f1bb 0f00 	cmp.w	fp, #0
   14188:	d176      	bne.n	14278 <__gnu_unwind_pr_common+0x190>
   1418a:	b128      	cbz	r0, 14198 <__gnu_unwind_pr_common+0xb0>
   1418c:	9903      	ldr	r1, [sp, #12]
   1418e:	2900      	cmp	r1, #0
   14190:	d07e      	beq.n	14290 <__gnu_unwind_pr_common+0x1a8>
   14192:	2a00      	cmp	r2, #0
   14194:	f000 80a6 	beq.w	142e4 <__gnu_unwind_pr_common+0x1fc>
   14198:	2b00      	cmp	r3, #0
   1419a:	db77      	blt.n	1428c <__gnu_unwind_pr_common+0x1a4>
   1419c:	9b02      	ldr	r3, [sp, #8]
   1419e:	3301      	adds	r3, #1
   141a0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   141a4:	e7c2      	b.n	1412c <__gnu_unwind_pr_common+0x44>
   141a6:	2300      	movs	r3, #0
   141a8:	9301      	str	r3, [sp, #4]
   141aa:	2e02      	cmp	r6, #2
   141ac:	dd3e      	ble.n	1422c <__gnu_unwind_pr_common+0x144>
   141ae:	f7ff fe17 	bl	13de0 <__gnu_unwind_24bit.isra.1>
   141b2:	2800      	cmp	r0, #0
   141b4:	d040      	beq.n	14238 <__gnu_unwind_pr_common+0x150>
   141b6:	2009      	movs	r0, #9
   141b8:	b00b      	add	sp, #44	; 0x2c
   141ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141be:	2000      	movs	r0, #0
   141c0:	e7d0      	b.n	14164 <__gnu_unwind_pr_common+0x7c>
   141c2:	6867      	ldr	r7, [r4, #4]
   141c4:	3408      	adds	r4, #8
   141c6:	e7bc      	b.n	14142 <__gnu_unwind_pr_common+0x5a>
   141c8:	2b02      	cmp	r3, #2
   141ca:	dca3      	bgt.n	14114 <__gnu_unwind_pr_common+0x2c>
   141cc:	0c0b      	lsrs	r3, r1, #16
   141ce:	b2da      	uxtb	r2, r3
   141d0:	0409      	lsls	r1, r1, #16
   141d2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   141d6:	2302      	movs	r3, #2
   141d8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   141dc:	9107      	str	r1, [sp, #28]
   141de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   141e2:	e797      	b.n	14114 <__gnu_unwind_pr_common+0x2c>
   141e4:	f1bb 0f00 	cmp.w	fp, #0
   141e8:	d002      	beq.n	141f0 <__gnu_unwind_pr_common+0x108>
   141ea:	2800      	cmp	r0, #0
   141ec:	f040 80bd 	bne.w	1436a <__gnu_unwind_pr_common+0x282>
   141f0:	3404      	adds	r4, #4
   141f2:	e79b      	b.n	1412c <__gnu_unwind_pr_common+0x44>
   141f4:	f1bb 0f00 	cmp.w	fp, #0
   141f8:	d125      	bne.n	14246 <__gnu_unwind_pr_common+0x15e>
   141fa:	b1a8      	cbz	r0, 14228 <__gnu_unwind_pr_common+0x140>
   141fc:	e894 000c 	ldmia.w	r4, {r2, r3}
   14200:	1c99      	adds	r1, r3, #2
   14202:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   14206:	d0d6      	beq.n	141b6 <__gnu_unwind_pr_common+0xce>
   14208:	f105 0158 	add.w	r1, r5, #88	; 0x58
   1420c:	3301      	adds	r3, #1
   1420e:	9106      	str	r1, [sp, #24]
   14210:	f000 80a3 	beq.w	1435a <__gnu_unwind_pr_common+0x272>
   14214:	1d20      	adds	r0, r4, #4
   14216:	f7ff fddd 	bl	13dd4 <_Unwind_decode_typeinfo_ptr.isra.0>
   1421a:	ab06      	add	r3, sp, #24
   1421c:	4601      	mov	r1, r0
   1421e:	4628      	mov	r0, r5
   14220:	f7f6 fd76 	bl	ad10 <__cxa_type_match>
   14224:	2800      	cmp	r0, #0
   14226:	d177      	bne.n	14318 <__gnu_unwind_pr_common+0x230>
   14228:	3408      	adds	r4, #8
   1422a:	e77f      	b.n	1412c <__gnu_unwind_pr_common+0x44>
   1422c:	a907      	add	r1, sp, #28
   1422e:	4648      	mov	r0, r9
   14230:	f000 faee 	bl	14810 <__gnu_unwind_execute>
   14234:	2800      	cmp	r0, #0
   14236:	d1be      	bne.n	141b6 <__gnu_unwind_pr_common+0xce>
   14238:	9b01      	ldr	r3, [sp, #4]
   1423a:	2b00      	cmp	r3, #0
   1423c:	d15c      	bne.n	142f8 <__gnu_unwind_pr_common+0x210>
   1423e:	2008      	movs	r0, #8
   14240:	b00b      	add	sp, #44	; 0x2c
   14242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14246:	210d      	movs	r1, #13
   14248:	4648      	mov	r0, r9
   1424a:	6a2f      	ldr	r7, [r5, #32]
   1424c:	f7ff fee0 	bl	14010 <_Unwind_GetGR>
   14250:	4287      	cmp	r7, r0
   14252:	d1e9      	bne.n	14228 <__gnu_unwind_pr_common+0x140>
   14254:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14256:	429c      	cmp	r4, r3
   14258:	d1e6      	bne.n	14228 <__gnu_unwind_pr_common+0x140>
   1425a:	4620      	mov	r0, r4
   1425c:	f7ff fcf0 	bl	13c40 <selfrel_offset31>
   14260:	210f      	movs	r1, #15
   14262:	4602      	mov	r2, r0
   14264:	4648      	mov	r0, r9
   14266:	f7ff fef9 	bl	1405c <_Unwind_SetGR>
   1426a:	4648      	mov	r0, r9
   1426c:	462a      	mov	r2, r5
   1426e:	2100      	movs	r1, #0
   14270:	f7ff fef4 	bl	1405c <_Unwind_SetGR>
   14274:	2007      	movs	r0, #7
   14276:	e79f      	b.n	141b8 <__gnu_unwind_pr_common+0xd0>
   14278:	210d      	movs	r1, #13
   1427a:	4648      	mov	r0, r9
   1427c:	6a2f      	ldr	r7, [r5, #32]
   1427e:	f7ff fec7 	bl	14010 <_Unwind_GetGR>
   14282:	4287      	cmp	r7, r0
   14284:	d058      	beq.n	14338 <__gnu_unwind_pr_common+0x250>
   14286:	6823      	ldr	r3, [r4, #0]
   14288:	2b00      	cmp	r3, #0
   1428a:	da87      	bge.n	1419c <__gnu_unwind_pr_common+0xb4>
   1428c:	3404      	adds	r4, #4
   1428e:	e785      	b.n	1419c <__gnu_unwind_pr_common+0xb4>
   14290:	9b02      	ldr	r3, [sp, #8]
   14292:	b33b      	cbz	r3, 142e4 <__gnu_unwind_pr_common+0x1fc>
   14294:	f105 0358 	add.w	r3, r5, #88	; 0x58
   14298:	1d27      	adds	r7, r4, #4
   1429a:	f8cd b010 	str.w	fp, [sp, #16]
   1429e:	f8dd 800c 	ldr.w	r8, [sp, #12]
   142a2:	f8dd a008 	ldr.w	sl, [sp, #8]
   142a6:	9605      	str	r6, [sp, #20]
   142a8:	46a3      	mov	fp, r4
   142aa:	461c      	mov	r4, r3
   142ac:	e002      	b.n	142b4 <__gnu_unwind_pr_common+0x1cc>
   142ae:	45b2      	cmp	sl, r6
   142b0:	46b0      	mov	r8, r6
   142b2:	d016      	beq.n	142e2 <__gnu_unwind_pr_common+0x1fa>
   142b4:	4638      	mov	r0, r7
   142b6:	9406      	str	r4, [sp, #24]
   142b8:	f7ff fd8c 	bl	13dd4 <_Unwind_decode_typeinfo_ptr.isra.0>
   142bc:	ab06      	add	r3, sp, #24
   142be:	4601      	mov	r1, r0
   142c0:	2200      	movs	r2, #0
   142c2:	4628      	mov	r0, r5
   142c4:	f7f6 fd24 	bl	ad10 <__cxa_type_match>
   142c8:	f108 0601 	add.w	r6, r8, #1
   142cc:	3704      	adds	r7, #4
   142ce:	2800      	cmp	r0, #0
   142d0:	d0ed      	beq.n	142ae <__gnu_unwind_pr_common+0x1c6>
   142d2:	9b02      	ldr	r3, [sp, #8]
   142d4:	9e05      	ldr	r6, [sp, #20]
   142d6:	4543      	cmp	r3, r8
   142d8:	465c      	mov	r4, fp
   142da:	f8dd b010 	ldr.w	fp, [sp, #16]
   142de:	d1d2      	bne.n	14286 <__gnu_unwind_pr_common+0x19e>
   142e0:	e000      	b.n	142e4 <__gnu_unwind_pr_common+0x1fc>
   142e2:	465c      	mov	r4, fp
   142e4:	4648      	mov	r0, r9
   142e6:	210d      	movs	r1, #13
   142e8:	f7ff fe92 	bl	14010 <_Unwind_GetGR>
   142ec:	9b06      	ldr	r3, [sp, #24]
   142ee:	6228      	str	r0, [r5, #32]
   142f0:	62ac      	str	r4, [r5, #40]	; 0x28
   142f2:	626b      	str	r3, [r5, #36]	; 0x24
   142f4:	2006      	movs	r0, #6
   142f6:	e75f      	b.n	141b8 <__gnu_unwind_pr_common+0xd0>
   142f8:	210f      	movs	r1, #15
   142fa:	4648      	mov	r0, r9
   142fc:	f7ff fe88 	bl	14010 <_Unwind_GetGR>
   14300:	210e      	movs	r1, #14
   14302:	4602      	mov	r2, r0
   14304:	4648      	mov	r0, r9
   14306:	f7ff fea9 	bl	1405c <_Unwind_SetGR>
   1430a:	4648      	mov	r0, r9
   1430c:	4a29      	ldr	r2, [pc, #164]	; (143b4 <__gnu_unwind_pr_common+0x2cc>)
   1430e:	210f      	movs	r1, #15
   14310:	f7ff fea4 	bl	1405c <_Unwind_SetGR>
   14314:	2007      	movs	r0, #7
   14316:	e74f      	b.n	141b8 <__gnu_unwind_pr_common+0xd0>
   14318:	4607      	mov	r7, r0
   1431a:	210d      	movs	r1, #13
   1431c:	4648      	mov	r0, r9
   1431e:	f7ff fe77 	bl	14010 <_Unwind_GetGR>
   14322:	2f02      	cmp	r7, #2
   14324:	6228      	str	r0, [r5, #32]
   14326:	d11d      	bne.n	14364 <__gnu_unwind_pr_common+0x27c>
   14328:	462b      	mov	r3, r5
   1432a:	9a06      	ldr	r2, [sp, #24]
   1432c:	f843 2f2c 	str.w	r2, [r3, #44]!
   14330:	626b      	str	r3, [r5, #36]	; 0x24
   14332:	62ac      	str	r4, [r5, #40]	; 0x28
   14334:	2006      	movs	r0, #6
   14336:	e73f      	b.n	141b8 <__gnu_unwind_pr_common+0xd0>
   14338:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1433a:	429c      	cmp	r4, r3
   1433c:	d1a3      	bne.n	14286 <__gnu_unwind_pr_common+0x19e>
   1433e:	2204      	movs	r2, #4
   14340:	2700      	movs	r7, #0
   14342:	18a3      	adds	r3, r4, r2
   14344:	9902      	ldr	r1, [sp, #8]
   14346:	62a9      	str	r1, [r5, #40]	; 0x28
   14348:	62ef      	str	r7, [r5, #44]	; 0x2c
   1434a:	632a      	str	r2, [r5, #48]	; 0x30
   1434c:	636b      	str	r3, [r5, #52]	; 0x34
   1434e:	6823      	ldr	r3, [r4, #0]
   14350:	42bb      	cmp	r3, r7
   14352:	db1d      	blt.n	14390 <__gnu_unwind_pr_common+0x2a8>
   14354:	2301      	movs	r3, #1
   14356:	9301      	str	r3, [sp, #4]
   14358:	e720      	b.n	1419c <__gnu_unwind_pr_common+0xb4>
   1435a:	4648      	mov	r0, r9
   1435c:	210d      	movs	r1, #13
   1435e:	f7ff fe57 	bl	14010 <_Unwind_GetGR>
   14362:	6228      	str	r0, [r5, #32]
   14364:	9b06      	ldr	r3, [sp, #24]
   14366:	626b      	str	r3, [r5, #36]	; 0x24
   14368:	e7e3      	b.n	14332 <__gnu_unwind_pr_common+0x24a>
   1436a:	4620      	mov	r0, r4
   1436c:	f7ff fc68 	bl	13c40 <selfrel_offset31>
   14370:	3404      	adds	r4, #4
   14372:	4606      	mov	r6, r0
   14374:	63ac      	str	r4, [r5, #56]	; 0x38
   14376:	4628      	mov	r0, r5
   14378:	f7f6 fd26 	bl	adc8 <__cxa_begin_cleanup>
   1437c:	2800      	cmp	r0, #0
   1437e:	f43f af1a 	beq.w	141b6 <__gnu_unwind_pr_common+0xce>
   14382:	4648      	mov	r0, r9
   14384:	4632      	mov	r2, r6
   14386:	210f      	movs	r1, #15
   14388:	f7ff fe68 	bl	1405c <_Unwind_SetGR>
   1438c:	2007      	movs	r0, #7
   1438e:	e713      	b.n	141b8 <__gnu_unwind_pr_common+0xd0>
   14390:	4608      	mov	r0, r1
   14392:	3001      	adds	r0, #1
   14394:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   14398:	f7ff fc52 	bl	13c40 <selfrel_offset31>
   1439c:	210f      	movs	r1, #15
   1439e:	4602      	mov	r2, r0
   143a0:	4648      	mov	r0, r9
   143a2:	f7ff fe5b 	bl	1405c <_Unwind_SetGR>
   143a6:	4648      	mov	r0, r9
   143a8:	462a      	mov	r2, r5
   143aa:	4639      	mov	r1, r7
   143ac:	f7ff fe56 	bl	1405c <_Unwind_SetGR>
   143b0:	2007      	movs	r0, #7
   143b2:	e701      	b.n	141b8 <__gnu_unwind_pr_common+0xd0>
   143b4:	0000bae5 	.word	0x0000bae5

000143b8 <__aeabi_unwind_cpp_pr0>:
   143b8:	2300      	movs	r3, #0
   143ba:	e695      	b.n	140e8 <__gnu_unwind_pr_common>

000143bc <__aeabi_unwind_cpp_pr1>:
   143bc:	2301      	movs	r3, #1
   143be:	e693      	b.n	140e8 <__gnu_unwind_pr_common>

000143c0 <__aeabi_unwind_cpp_pr2>:
   143c0:	2302      	movs	r3, #2
   143c2:	e691      	b.n	140e8 <__gnu_unwind_pr_common>

000143c4 <_Unwind_VRS_Pop>:
   143c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   143c6:	4604      	mov	r4, r0
   143c8:	b0c5      	sub	sp, #276	; 0x114
   143ca:	2904      	cmp	r1, #4
   143cc:	d80d      	bhi.n	143ea <_Unwind_VRS_Pop+0x26>
   143ce:	e8df f001 	tbb	[pc, r1]
   143d2:	0353      	.short	0x0353
   143d4:	310c      	.short	0x310c
   143d6:	0f          	.byte	0x0f
   143d7:	00          	.byte	0x00
   143d8:	2b01      	cmp	r3, #1
   143da:	ea4f 4612 	mov.w	r6, r2, lsr #16
   143de:	b295      	uxth	r5, r2
   143e0:	d162      	bne.n	144a8 <_Unwind_VRS_Pop+0xe4>
   143e2:	1972      	adds	r2, r6, r5
   143e4:	2a10      	cmp	r2, #16
   143e6:	f240 809b 	bls.w	14520 <_Unwind_VRS_Pop+0x15c>
   143ea:	2002      	movs	r0, #2
   143ec:	b045      	add	sp, #276	; 0x114
   143ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   143f0:	2b00      	cmp	r3, #0
   143f2:	d1fa      	bne.n	143ea <_Unwind_VRS_Pop+0x26>
   143f4:	2a10      	cmp	r2, #16
   143f6:	d8f8      	bhi.n	143ea <_Unwind_VRS_Pop+0x26>
   143f8:	6823      	ldr	r3, [r4, #0]
   143fa:	06d8      	lsls	r0, r3, #27
   143fc:	f100 80c6 	bmi.w	1458c <_Unwind_VRS_Pop+0x1c8>
   14400:	ae22      	add	r6, sp, #136	; 0x88
   14402:	4630      	mov	r0, r6
   14404:	9201      	str	r2, [sp, #4]
   14406:	f000 f973 	bl	146f0 <__gnu_Unwind_Save_WMMXC>
   1440a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1440c:	9a01      	ldr	r2, [sp, #4]
   1440e:	2300      	movs	r3, #0
   14410:	2501      	movs	r5, #1
   14412:	fa05 f103 	lsl.w	r1, r5, r3
   14416:	4211      	tst	r1, r2
   14418:	d003      	beq.n	14422 <_Unwind_VRS_Pop+0x5e>
   1441a:	6801      	ldr	r1, [r0, #0]
   1441c:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
   14420:	3004      	adds	r0, #4
   14422:	3301      	adds	r3, #1
   14424:	2b04      	cmp	r3, #4
   14426:	d1f4      	bne.n	14412 <_Unwind_VRS_Pop+0x4e>
   14428:	63a0      	str	r0, [r4, #56]	; 0x38
   1442a:	4630      	mov	r0, r6
   1442c:	f000 f956 	bl	146dc <__gnu_Unwind_Restore_WMMXC>
   14430:	2000      	movs	r0, #0
   14432:	e7db      	b.n	143ec <_Unwind_VRS_Pop+0x28>
   14434:	2b03      	cmp	r3, #3
   14436:	d1d8      	bne.n	143ea <_Unwind_VRS_Pop+0x26>
   14438:	0c15      	lsrs	r5, r2, #16
   1443a:	b297      	uxth	r7, r2
   1443c:	19eb      	adds	r3, r5, r7
   1443e:	2b10      	cmp	r3, #16
   14440:	d8d3      	bhi.n	143ea <_Unwind_VRS_Pop+0x26>
   14442:	6823      	ldr	r3, [r4, #0]
   14444:	071e      	lsls	r6, r3, #28
   14446:	f100 80b5 	bmi.w	145b4 <_Unwind_VRS_Pop+0x1f0>
   1444a:	ae22      	add	r6, sp, #136	; 0x88
   1444c:	4630      	mov	r0, r6
   1444e:	f000 f923 	bl	14698 <__gnu_Unwind_Save_WMMXD>
   14452:	00ed      	lsls	r5, r5, #3
   14454:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14456:	b14f      	cbz	r7, 1446c <_Unwind_VRS_Pop+0xa8>
   14458:	3d04      	subs	r5, #4
   1445a:	1971      	adds	r1, r6, r5
   1445c:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
   14460:	f853 2b04 	ldr.w	r2, [r3], #4
   14464:	f841 2f04 	str.w	r2, [r1, #4]!
   14468:	4283      	cmp	r3, r0
   1446a:	d1f9      	bne.n	14460 <_Unwind_VRS_Pop+0x9c>
   1446c:	4630      	mov	r0, r6
   1446e:	63a3      	str	r3, [r4, #56]	; 0x38
   14470:	f000 f8f0 	bl	14654 <__gnu_Unwind_Restore_WMMXD>
   14474:	2000      	movs	r0, #0
   14476:	e7b9      	b.n	143ec <_Unwind_VRS_Pop+0x28>
   14478:	2b00      	cmp	r3, #0
   1447a:	d1b6      	bne.n	143ea <_Unwind_VRS_Pop+0x26>
   1447c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
   1447e:	b297      	uxth	r7, r2
   14480:	1d20      	adds	r0, r4, #4
   14482:	2601      	movs	r6, #1
   14484:	fa06 f103 	lsl.w	r1, r6, r3
   14488:	4239      	tst	r1, r7
   1448a:	f103 0301 	add.w	r3, r3, #1
   1448e:	d002      	beq.n	14496 <_Unwind_VRS_Pop+0xd2>
   14490:	6829      	ldr	r1, [r5, #0]
   14492:	6001      	str	r1, [r0, #0]
   14494:	3504      	adds	r5, #4
   14496:	2b10      	cmp	r3, #16
   14498:	f100 0004 	add.w	r0, r0, #4
   1449c:	d1f2      	bne.n	14484 <_Unwind_VRS_Pop+0xc0>
   1449e:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
   144a2:	d13b      	bne.n	1451c <_Unwind_VRS_Pop+0x158>
   144a4:	63a5      	str	r5, [r4, #56]	; 0x38
   144a6:	e7a1      	b.n	143ec <_Unwind_VRS_Pop+0x28>
   144a8:	2b05      	cmp	r3, #5
   144aa:	d19e      	bne.n	143ea <_Unwind_VRS_Pop+0x26>
   144ac:	1977      	adds	r7, r6, r5
   144ae:	2f20      	cmp	r7, #32
   144b0:	d89b      	bhi.n	143ea <_Unwind_VRS_Pop+0x26>
   144b2:	2e0f      	cmp	r6, #15
   144b4:	d966      	bls.n	14584 <_Unwind_VRS_Pop+0x1c0>
   144b6:	462f      	mov	r7, r5
   144b8:	2d00      	cmp	r5, #0
   144ba:	d13a      	bne.n	14532 <_Unwind_VRS_Pop+0x16e>
   144bc:	462a      	mov	r2, r5
   144be:	2700      	movs	r7, #0
   144c0:	2a00      	cmp	r2, #0
   144c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   144c4:	dd72      	ble.n	145ac <_Unwind_VRS_Pop+0x1e8>
   144c6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   144ca:	4601      	mov	r1, r0
   144cc:	a844      	add	r0, sp, #272	; 0x110
   144ce:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   144d2:	388c      	subs	r0, #140	; 0x8c
   144d4:	f851 5b04 	ldr.w	r5, [r1], #4
   144d8:	f840 5f04 	str.w	r5, [r0, #4]!
   144dc:	4291      	cmp	r1, r2
   144de:	d1f9      	bne.n	144d4 <_Unwind_VRS_Pop+0x110>
   144e0:	4608      	mov	r0, r1
   144e2:	b197      	cbz	r7, 1450a <_Unwind_VRS_Pop+0x146>
   144e4:	2e10      	cmp	r6, #16
   144e6:	4632      	mov	r2, r6
   144e8:	a944      	add	r1, sp, #272	; 0x110
   144ea:	bf38      	it	cc
   144ec:	2210      	movcc	r2, #16
   144ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   144f2:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
   144f6:	0079      	lsls	r1, r7, #1
   144f8:	3a04      	subs	r2, #4
   144fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   144fe:	f850 5b04 	ldr.w	r5, [r0], #4
   14502:	f842 5f04 	str.w	r5, [r2, #4]!
   14506:	4288      	cmp	r0, r1
   14508:	d1f9      	bne.n	144fe <_Unwind_VRS_Pop+0x13a>
   1450a:	2b01      	cmp	r3, #1
   1450c:	d048      	beq.n	145a0 <_Unwind_VRS_Pop+0x1dc>
   1450e:	2e0f      	cmp	r6, #15
   14510:	63a1      	str	r1, [r4, #56]	; 0x38
   14512:	d933      	bls.n	1457c <_Unwind_VRS_Pop+0x1b8>
   14514:	b117      	cbz	r7, 1451c <_Unwind_VRS_Pop+0x158>
   14516:	a802      	add	r0, sp, #8
   14518:	f000 f894 	bl	14644 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1451c:	2000      	movs	r0, #0
   1451e:	e765      	b.n	143ec <_Unwind_VRS_Pop+0x28>
   14520:	2e0f      	cmp	r6, #15
   14522:	f63f af62 	bhi.w	143ea <_Unwind_VRS_Pop+0x26>
   14526:	2700      	movs	r7, #0
   14528:	6822      	ldr	r2, [r4, #0]
   1452a:	07d1      	lsls	r1, r2, #31
   1452c:	d417      	bmi.n	1455e <_Unwind_VRS_Pop+0x19a>
   1452e:	2f00      	cmp	r7, #0
   14530:	d060      	beq.n	145f4 <_Unwind_VRS_Pop+0x230>
   14532:	6822      	ldr	r2, [r4, #0]
   14534:	0751      	lsls	r1, r2, #29
   14536:	d445      	bmi.n	145c4 <_Unwind_VRS_Pop+0x200>
   14538:	2b01      	cmp	r3, #1
   1453a:	d04d      	beq.n	145d8 <_Unwind_VRS_Pop+0x214>
   1453c:	2e0f      	cmp	r6, #15
   1453e:	d806      	bhi.n	1454e <_Unwind_VRS_Pop+0x18a>
   14540:	a822      	add	r0, sp, #136	; 0x88
   14542:	9301      	str	r3, [sp, #4]
   14544:	f000 f87a 	bl	1463c <__gnu_Unwind_Save_VFP_D>
   14548:	9b01      	ldr	r3, [sp, #4]
   1454a:	2f00      	cmp	r7, #0
   1454c:	d0b6      	beq.n	144bc <_Unwind_VRS_Pop+0xf8>
   1454e:	a802      	add	r0, sp, #8
   14550:	9301      	str	r3, [sp, #4]
   14552:	f000 f87b 	bl	1464c <__gnu_Unwind_Save_VFP_D_16_to_31>
   14556:	9b01      	ldr	r3, [sp, #4]
   14558:	f1c6 0210 	rsb	r2, r6, #16
   1455c:	e7b0      	b.n	144c0 <_Unwind_VRS_Pop+0xfc>
   1455e:	f022 0101 	bic.w	r1, r2, #1
   14562:	2b05      	cmp	r3, #5
   14564:	6021      	str	r1, [r4, #0]
   14566:	9301      	str	r3, [sp, #4]
   14568:	4620      	mov	r0, r4
   1456a:	d03b      	beq.n	145e4 <_Unwind_VRS_Pop+0x220>
   1456c:	f022 0203 	bic.w	r2, r2, #3
   14570:	f840 2b48 	str.w	r2, [r0], #72
   14574:	f000 f85a 	bl	1462c <__gnu_Unwind_Save_VFP>
   14578:	9b01      	ldr	r3, [sp, #4]
   1457a:	e7d8      	b.n	1452e <_Unwind_VRS_Pop+0x16a>
   1457c:	a822      	add	r0, sp, #136	; 0x88
   1457e:	f000 f859 	bl	14634 <__gnu_Unwind_Restore_VFP_D>
   14582:	e7c7      	b.n	14514 <_Unwind_VRS_Pop+0x150>
   14584:	2f10      	cmp	r7, #16
   14586:	d9ce      	bls.n	14526 <_Unwind_VRS_Pop+0x162>
   14588:	3f10      	subs	r7, #16
   1458a:	e7cd      	b.n	14528 <_Unwind_VRS_Pop+0x164>
   1458c:	f023 0310 	bic.w	r3, r3, #16
   14590:	6023      	str	r3, [r4, #0]
   14592:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   14596:	9201      	str	r2, [sp, #4]
   14598:	f000 f8aa 	bl	146f0 <__gnu_Unwind_Save_WMMXC>
   1459c:	9a01      	ldr	r2, [sp, #4]
   1459e:	e72f      	b.n	14400 <_Unwind_VRS_Pop+0x3c>
   145a0:	3104      	adds	r1, #4
   145a2:	63a1      	str	r1, [r4, #56]	; 0x38
   145a4:	a822      	add	r0, sp, #136	; 0x88
   145a6:	f000 f83d 	bl	14624 <__gnu_Unwind_Restore_VFP>
   145aa:	e7b7      	b.n	1451c <_Unwind_VRS_Pop+0x158>
   145ac:	2f00      	cmp	r7, #0
   145ae:	d199      	bne.n	144e4 <_Unwind_VRS_Pop+0x120>
   145b0:	4601      	mov	r1, r0
   145b2:	e7aa      	b.n	1450a <_Unwind_VRS_Pop+0x146>
   145b4:	f023 0308 	bic.w	r3, r3, #8
   145b8:	6023      	str	r3, [r4, #0]
   145ba:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   145be:	f000 f86b 	bl	14698 <__gnu_Unwind_Save_WMMXD>
   145c2:	e742      	b.n	1444a <_Unwind_VRS_Pop+0x86>
   145c4:	4620      	mov	r0, r4
   145c6:	f022 0204 	bic.w	r2, r2, #4
   145ca:	f840 2bd0 	str.w	r2, [r0], #208
   145ce:	9301      	str	r3, [sp, #4]
   145d0:	f000 f83c 	bl	1464c <__gnu_Unwind_Save_VFP_D_16_to_31>
   145d4:	9b01      	ldr	r3, [sp, #4]
   145d6:	e7af      	b.n	14538 <_Unwind_VRS_Pop+0x174>
   145d8:	a822      	add	r0, sp, #136	; 0x88
   145da:	9301      	str	r3, [sp, #4]
   145dc:	f000 f826 	bl	1462c <__gnu_Unwind_Save_VFP>
   145e0:	9b01      	ldr	r3, [sp, #4]
   145e2:	e7b9      	b.n	14558 <_Unwind_VRS_Pop+0x194>
   145e4:	f041 0102 	orr.w	r1, r1, #2
   145e8:	f840 1b48 	str.w	r1, [r0], #72
   145ec:	f000 f826 	bl	1463c <__gnu_Unwind_Save_VFP_D>
   145f0:	9b01      	ldr	r3, [sp, #4]
   145f2:	e79c      	b.n	1452e <_Unwind_VRS_Pop+0x16a>
   145f4:	2b01      	cmp	r3, #1
   145f6:	d003      	beq.n	14600 <_Unwind_VRS_Pop+0x23c>
   145f8:	2e0f      	cmp	r6, #15
   145fa:	f63f af5f 	bhi.w	144bc <_Unwind_VRS_Pop+0xf8>
   145fe:	e79f      	b.n	14540 <_Unwind_VRS_Pop+0x17c>
   14600:	a822      	add	r0, sp, #136	; 0x88
   14602:	9301      	str	r3, [sp, #4]
   14604:	f000 f812 	bl	1462c <__gnu_Unwind_Save_VFP>
   14608:	9b01      	ldr	r3, [sp, #4]
   1460a:	e757      	b.n	144bc <_Unwind_VRS_Pop+0xf8>

0001460c <__restore_core_regs>:
   1460c:	f100 0134 	add.w	r1, r0, #52	; 0x34
   14610:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   14614:	469c      	mov	ip, r3
   14616:	46a6      	mov	lr, r4
   14618:	f84c 5d04 	str.w	r5, [ip, #-4]!
   1461c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   14620:	46e5      	mov	sp, ip
   14622:	bd00      	pop	{pc}

00014624 <__gnu_Unwind_Restore_VFP>:
   14624:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   14628:	4770      	bx	lr
   1462a:	bf00      	nop

0001462c <__gnu_Unwind_Save_VFP>:
   1462c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   14630:	4770      	bx	lr
   14632:	bf00      	nop

00014634 <__gnu_Unwind_Restore_VFP_D>:
   14634:	ec90 0b20 	vldmia	r0, {d0-d15}
   14638:	4770      	bx	lr
   1463a:	bf00      	nop

0001463c <__gnu_Unwind_Save_VFP_D>:
   1463c:	ec80 0b20 	vstmia	r0, {d0-d15}
   14640:	4770      	bx	lr
   14642:	bf00      	nop

00014644 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   14644:	ecd0 0b20 	vldmia	r0, {d16-d31}
   14648:	4770      	bx	lr
   1464a:	bf00      	nop

0001464c <__gnu_Unwind_Save_VFP_D_16_to_31>:
   1464c:	ecc0 0b20 	vstmia	r0, {d16-d31}
   14650:	4770      	bx	lr
   14652:	bf00      	nop

00014654 <__gnu_Unwind_Restore_WMMXD>:
   14654:	ecf0 0102 	ldfe	f0, [r0], #8
   14658:	ecf0 1102 	ldfe	f1, [r0], #8
   1465c:	ecf0 2102 	ldfe	f2, [r0], #8
   14660:	ecf0 3102 	ldfe	f3, [r0], #8
   14664:	ecf0 4102 	ldfe	f4, [r0], #8
   14668:	ecf0 5102 	ldfe	f5, [r0], #8
   1466c:	ecf0 6102 	ldfe	f6, [r0], #8
   14670:	ecf0 7102 	ldfe	f7, [r0], #8
   14674:	ecf0 8102 	ldfp	f0, [r0], #8
   14678:	ecf0 9102 	ldfp	f1, [r0], #8
   1467c:	ecf0 a102 	ldfp	f2, [r0], #8
   14680:	ecf0 b102 	ldfp	f3, [r0], #8
   14684:	ecf0 c102 	ldfp	f4, [r0], #8
   14688:	ecf0 d102 	ldfp	f5, [r0], #8
   1468c:	ecf0 e102 	ldfp	f6, [r0], #8
   14690:	ecf0 f102 	ldfp	f7, [r0], #8
   14694:	4770      	bx	lr
   14696:	bf00      	nop

00014698 <__gnu_Unwind_Save_WMMXD>:
   14698:	ece0 0102 	stfe	f0, [r0], #8
   1469c:	ece0 1102 	stfe	f1, [r0], #8
   146a0:	ece0 2102 	stfe	f2, [r0], #8
   146a4:	ece0 3102 	stfe	f3, [r0], #8
   146a8:	ece0 4102 	stfe	f4, [r0], #8
   146ac:	ece0 5102 	stfe	f5, [r0], #8
   146b0:	ece0 6102 	stfe	f6, [r0], #8
   146b4:	ece0 7102 	stfe	f7, [r0], #8
   146b8:	ece0 8102 	stfp	f0, [r0], #8
   146bc:	ece0 9102 	stfp	f1, [r0], #8
   146c0:	ece0 a102 	stfp	f2, [r0], #8
   146c4:	ece0 b102 	stfp	f3, [r0], #8
   146c8:	ece0 c102 	stfp	f4, [r0], #8
   146cc:	ece0 d102 	stfp	f5, [r0], #8
   146d0:	ece0 e102 	stfp	f6, [r0], #8
   146d4:	ece0 f102 	stfp	f7, [r0], #8
   146d8:	4770      	bx	lr
   146da:	bf00      	nop

000146dc <__gnu_Unwind_Restore_WMMXC>:
   146dc:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   146e0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   146e4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   146e8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   146ec:	4770      	bx	lr
   146ee:	bf00      	nop

000146f0 <__gnu_Unwind_Save_WMMXC>:
   146f0:	fca0 8101 	stc2	1, cr8, [r0], #4
   146f4:	fca0 9101 	stc2	1, cr9, [r0], #4
   146f8:	fca0 a101 	stc2	1, cr10, [r0], #4
   146fc:	fca0 b101 	stc2	1, cr11, [r0], #4
   14700:	4770      	bx	lr
   14702:	bf00      	nop

00014704 <_Unwind_RaiseException>:
   14704:	46ec      	mov	ip, sp
   14706:	b500      	push	{lr}
   14708:	e92d 5000 	stmdb	sp!, {ip, lr}
   1470c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   14710:	f04f 0300 	mov.w	r3, #0
   14714:	e92d 000c 	stmdb	sp!, {r2, r3}
   14718:	a901      	add	r1, sp, #4
   1471a:	f7ff fbf3 	bl	13f04 <__gnu_Unwind_RaiseException>
   1471e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   14722:	b012      	add	sp, #72	; 0x48
   14724:	4770      	bx	lr
   14726:	bf00      	nop

00014728 <_Unwind_Resume>:
   14728:	46ec      	mov	ip, sp
   1472a:	b500      	push	{lr}
   1472c:	e92d 5000 	stmdb	sp!, {ip, lr}
   14730:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   14734:	f04f 0300 	mov.w	r3, #0
   14738:	e92d 000c 	stmdb	sp!, {r2, r3}
   1473c:	a901      	add	r1, sp, #4
   1473e:	f7ff fc1b 	bl	13f78 <__gnu_Unwind_Resume>
   14742:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   14746:	b012      	add	sp, #72	; 0x48
   14748:	4770      	bx	lr
   1474a:	bf00      	nop

0001474c <_Unwind_Resume_or_Rethrow>:
   1474c:	46ec      	mov	ip, sp
   1474e:	b500      	push	{lr}
   14750:	e92d 5000 	stmdb	sp!, {ip, lr}
   14754:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   14758:	f04f 0300 	mov.w	r3, #0
   1475c:	e92d 000c 	stmdb	sp!, {r2, r3}
   14760:	a901      	add	r1, sp, #4
   14762:	f7ff fc2b 	bl	13fbc <__gnu_Unwind_Resume_or_Rethrow>
   14766:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1476a:	b012      	add	sp, #72	; 0x48
   1476c:	4770      	bx	lr
   1476e:	bf00      	nop

00014770 <_Unwind_ForcedUnwind>:
   14770:	46ec      	mov	ip, sp
   14772:	b500      	push	{lr}
   14774:	e92d 5000 	stmdb	sp!, {ip, lr}
   14778:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1477c:	f04f 0300 	mov.w	r3, #0
   14780:	e92d 000c 	stmdb	sp!, {r2, r3}
   14784:	ab01      	add	r3, sp, #4
   14786:	f7ff fbed 	bl	13f64 <__gnu_Unwind_ForcedUnwind>
   1478a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1478e:	b012      	add	sp, #72	; 0x48
   14790:	4770      	bx	lr
   14792:	bf00      	nop

00014794 <_Unwind_Backtrace>:
   14794:	46ec      	mov	ip, sp
   14796:	b500      	push	{lr}
   14798:	e92d 5000 	stmdb	sp!, {ip, lr}
   1479c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   147a0:	f04f 0300 	mov.w	r3, #0
   147a4:	e92d 000c 	stmdb	sp!, {r2, r3}
   147a8:	aa01      	add	r2, sp, #4
   147aa:	f7ff fc65 	bl	14078 <__gnu_Unwind_Backtrace>
   147ae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   147b2:	b012      	add	sp, #72	; 0x48
   147b4:	4770      	bx	lr
   147b6:	bf00      	nop

000147b8 <next_unwind_byte>:
   147b8:	7a02      	ldrb	r2, [r0, #8]
   147ba:	b91a      	cbnz	r2, 147c4 <next_unwind_byte+0xc>
   147bc:	7a43      	ldrb	r3, [r0, #9]
   147be:	b943      	cbnz	r3, 147d2 <next_unwind_byte+0x1a>
   147c0:	20b0      	movs	r0, #176	; 0xb0
   147c2:	4770      	bx	lr
   147c4:	6803      	ldr	r3, [r0, #0]
   147c6:	3a01      	subs	r2, #1
   147c8:	7202      	strb	r2, [r0, #8]
   147ca:	021a      	lsls	r2, r3, #8
   147cc:	6002      	str	r2, [r0, #0]
   147ce:	0e18      	lsrs	r0, r3, #24
   147d0:	4770      	bx	lr
   147d2:	6842      	ldr	r2, [r0, #4]
   147d4:	3b01      	subs	r3, #1
   147d6:	b410      	push	{r4}
   147d8:	7243      	strb	r3, [r0, #9]
   147da:	6813      	ldr	r3, [r2, #0]
   147dc:	2103      	movs	r1, #3
   147de:	1d14      	adds	r4, r2, #4
   147e0:	7201      	strb	r1, [r0, #8]
   147e2:	021a      	lsls	r2, r3, #8
   147e4:	6044      	str	r4, [r0, #4]
   147e6:	6002      	str	r2, [r0, #0]
   147e8:	bc10      	pop	{r4}
   147ea:	0e18      	lsrs	r0, r3, #24
   147ec:	4770      	bx	lr
   147ee:	bf00      	nop

000147f0 <_Unwind_GetGR.constprop.0>:
   147f0:	b500      	push	{lr}
   147f2:	b085      	sub	sp, #20
   147f4:	aa03      	add	r2, sp, #12
   147f6:	2300      	movs	r3, #0
   147f8:	9200      	str	r2, [sp, #0]
   147fa:	4619      	mov	r1, r3
   147fc:	220c      	movs	r2, #12
   147fe:	f7ff fbed 	bl	13fdc <_Unwind_VRS_Get>
   14802:	9803      	ldr	r0, [sp, #12]
   14804:	b005      	add	sp, #20
   14806:	f85d fb04 	ldr.w	pc, [sp], #4
   1480a:	bf00      	nop

0001480c <unwind_UCB_from_context>:
   1480c:	e7f0      	b.n	147f0 <_Unwind_GetGR.constprop.0>
   1480e:	bf00      	nop

00014810 <__gnu_unwind_execute>:
   14810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14814:	4606      	mov	r6, r0
   14816:	b085      	sub	sp, #20
   14818:	460f      	mov	r7, r1
   1481a:	f04f 0800 	mov.w	r8, #0
   1481e:	4638      	mov	r0, r7
   14820:	f7ff ffca 	bl	147b8 <next_unwind_byte>
   14824:	28b0      	cmp	r0, #176	; 0xb0
   14826:	4604      	mov	r4, r0
   14828:	d023      	beq.n	14872 <__gnu_unwind_execute+0x62>
   1482a:	0605      	lsls	r5, r0, #24
   1482c:	d427      	bmi.n	1487e <__gnu_unwind_execute+0x6e>
   1482e:	2300      	movs	r3, #0
   14830:	f10d 090c 	add.w	r9, sp, #12
   14834:	4619      	mov	r1, r3
   14836:	0085      	lsls	r5, r0, #2
   14838:	220d      	movs	r2, #13
   1483a:	f8cd 9000 	str.w	r9, [sp]
   1483e:	4630      	mov	r0, r6
   14840:	f7ff fbcc 	bl	13fdc <_Unwind_VRS_Get>
   14844:	b2ed      	uxtb	r5, r5
   14846:	9b03      	ldr	r3, [sp, #12]
   14848:	f8cd 9000 	str.w	r9, [sp]
   1484c:	0660      	lsls	r0, r4, #25
   1484e:	f105 0504 	add.w	r5, r5, #4
   14852:	bf4c      	ite	mi
   14854:	1b5d      	submi	r5, r3, r5
   14856:	18ed      	addpl	r5, r5, r3
   14858:	2300      	movs	r3, #0
   1485a:	4619      	mov	r1, r3
   1485c:	220d      	movs	r2, #13
   1485e:	4630      	mov	r0, r6
   14860:	9503      	str	r5, [sp, #12]
   14862:	f7ff fbe1 	bl	14028 <_Unwind_VRS_Set>
   14866:	4638      	mov	r0, r7
   14868:	f7ff ffa6 	bl	147b8 <next_unwind_byte>
   1486c:	28b0      	cmp	r0, #176	; 0xb0
   1486e:	4604      	mov	r4, r0
   14870:	d1db      	bne.n	1482a <__gnu_unwind_execute+0x1a>
   14872:	f1b8 0f00 	cmp.w	r8, #0
   14876:	f000 8095 	beq.w	149a4 <__gnu_unwind_execute+0x194>
   1487a:	2000      	movs	r0, #0
   1487c:	e01c      	b.n	148b8 <__gnu_unwind_execute+0xa8>
   1487e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   14882:	2b80      	cmp	r3, #128	; 0x80
   14884:	d05d      	beq.n	14942 <__gnu_unwind_execute+0x132>
   14886:	2b90      	cmp	r3, #144	; 0x90
   14888:	d019      	beq.n	148be <__gnu_unwind_execute+0xae>
   1488a:	2ba0      	cmp	r3, #160	; 0xa0
   1488c:	d02c      	beq.n	148e8 <__gnu_unwind_execute+0xd8>
   1488e:	2bb0      	cmp	r3, #176	; 0xb0
   14890:	d03f      	beq.n	14912 <__gnu_unwind_execute+0x102>
   14892:	2bc0      	cmp	r3, #192	; 0xc0
   14894:	d06c      	beq.n	14970 <__gnu_unwind_execute+0x160>
   14896:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1489a:	2bd0      	cmp	r3, #208	; 0xd0
   1489c:	d10b      	bne.n	148b6 <__gnu_unwind_execute+0xa6>
   1489e:	f000 0207 	and.w	r2, r0, #7
   148a2:	3201      	adds	r2, #1
   148a4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   148a8:	2305      	movs	r3, #5
   148aa:	2101      	movs	r1, #1
   148ac:	4630      	mov	r0, r6
   148ae:	f7ff fd89 	bl	143c4 <_Unwind_VRS_Pop>
   148b2:	2800      	cmp	r0, #0
   148b4:	d0b3      	beq.n	1481e <__gnu_unwind_execute+0xe>
   148b6:	2009      	movs	r0, #9
   148b8:	b005      	add	sp, #20
   148ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   148be:	f000 030d 	and.w	r3, r0, #13
   148c2:	2b0d      	cmp	r3, #13
   148c4:	d0f7      	beq.n	148b6 <__gnu_unwind_execute+0xa6>
   148c6:	ad03      	add	r5, sp, #12
   148c8:	2300      	movs	r3, #0
   148ca:	f000 020f 	and.w	r2, r0, #15
   148ce:	4619      	mov	r1, r3
   148d0:	9500      	str	r5, [sp, #0]
   148d2:	4630      	mov	r0, r6
   148d4:	f7ff fb82 	bl	13fdc <_Unwind_VRS_Get>
   148d8:	2300      	movs	r3, #0
   148da:	9500      	str	r5, [sp, #0]
   148dc:	4619      	mov	r1, r3
   148de:	220d      	movs	r2, #13
   148e0:	4630      	mov	r0, r6
   148e2:	f7ff fba1 	bl	14028 <_Unwind_VRS_Set>
   148e6:	e79a      	b.n	1481e <__gnu_unwind_execute+0xe>
   148e8:	43c2      	mvns	r2, r0
   148ea:	f002 0307 	and.w	r3, r2, #7
   148ee:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   148f2:	411a      	asrs	r2, r3
   148f4:	0701      	lsls	r1, r0, #28
   148f6:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   148fa:	f04f 0300 	mov.w	r3, #0
   148fe:	bf48      	it	mi
   14900:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   14904:	4619      	mov	r1, r3
   14906:	4630      	mov	r0, r6
   14908:	f7ff fd5c 	bl	143c4 <_Unwind_VRS_Pop>
   1490c:	2800      	cmp	r0, #0
   1490e:	d1d2      	bne.n	148b6 <__gnu_unwind_execute+0xa6>
   14910:	e785      	b.n	1481e <__gnu_unwind_execute+0xe>
   14912:	28b1      	cmp	r0, #177	; 0xb1
   14914:	d057      	beq.n	149c6 <__gnu_unwind_execute+0x1b6>
   14916:	28b2      	cmp	r0, #178	; 0xb2
   14918:	d068      	beq.n	149ec <__gnu_unwind_execute+0x1dc>
   1491a:	28b3      	cmp	r0, #179	; 0xb3
   1491c:	f000 8095 	beq.w	14a4a <__gnu_unwind_execute+0x23a>
   14920:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   14924:	2bb4      	cmp	r3, #180	; 0xb4
   14926:	d0c6      	beq.n	148b6 <__gnu_unwind_execute+0xa6>
   14928:	f000 0207 	and.w	r2, r0, #7
   1492c:	3201      	adds	r2, #1
   1492e:	2301      	movs	r3, #1
   14930:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   14934:	4619      	mov	r1, r3
   14936:	4630      	mov	r0, r6
   14938:	f7ff fd44 	bl	143c4 <_Unwind_VRS_Pop>
   1493c:	2800      	cmp	r0, #0
   1493e:	d1ba      	bne.n	148b6 <__gnu_unwind_execute+0xa6>
   14940:	e76d      	b.n	1481e <__gnu_unwind_execute+0xe>
   14942:	4638      	mov	r0, r7
   14944:	f7ff ff38 	bl	147b8 <next_unwind_byte>
   14948:	0224      	lsls	r4, r4, #8
   1494a:	4304      	orrs	r4, r0
   1494c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   14950:	d0b1      	beq.n	148b6 <__gnu_unwind_execute+0xa6>
   14952:	0124      	lsls	r4, r4, #4
   14954:	2300      	movs	r3, #0
   14956:	b2a2      	uxth	r2, r4
   14958:	4619      	mov	r1, r3
   1495a:	4630      	mov	r0, r6
   1495c:	f7ff fd32 	bl	143c4 <_Unwind_VRS_Pop>
   14960:	2800      	cmp	r0, #0
   14962:	d1a8      	bne.n	148b6 <__gnu_unwind_execute+0xa6>
   14964:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   14968:	bf18      	it	ne
   1496a:	f04f 0801 	movne.w	r8, #1
   1496e:	e756      	b.n	1481e <__gnu_unwind_execute+0xe>
   14970:	28c6      	cmp	r0, #198	; 0xc6
   14972:	d07d      	beq.n	14a70 <__gnu_unwind_execute+0x260>
   14974:	28c7      	cmp	r0, #199	; 0xc7
   14976:	f000 8086 	beq.w	14a86 <__gnu_unwind_execute+0x276>
   1497a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1497e:	2bc0      	cmp	r3, #192	; 0xc0
   14980:	f000 8094 	beq.w	14aac <__gnu_unwind_execute+0x29c>
   14984:	28c8      	cmp	r0, #200	; 0xc8
   14986:	f000 809f 	beq.w	14ac8 <__gnu_unwind_execute+0x2b8>
   1498a:	28c9      	cmp	r0, #201	; 0xc9
   1498c:	d193      	bne.n	148b6 <__gnu_unwind_execute+0xa6>
   1498e:	4638      	mov	r0, r7
   14990:	f7ff ff12 	bl	147b8 <next_unwind_byte>
   14994:	0302      	lsls	r2, r0, #12
   14996:	f000 000f 	and.w	r0, r0, #15
   1499a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   1499e:	3001      	adds	r0, #1
   149a0:	4302      	orrs	r2, r0
   149a2:	e781      	b.n	148a8 <__gnu_unwind_execute+0x98>
   149a4:	ac03      	add	r4, sp, #12
   149a6:	4643      	mov	r3, r8
   149a8:	220e      	movs	r2, #14
   149aa:	4641      	mov	r1, r8
   149ac:	9400      	str	r4, [sp, #0]
   149ae:	4630      	mov	r0, r6
   149b0:	f7ff fb14 	bl	13fdc <_Unwind_VRS_Get>
   149b4:	9400      	str	r4, [sp, #0]
   149b6:	4630      	mov	r0, r6
   149b8:	4643      	mov	r3, r8
   149ba:	220f      	movs	r2, #15
   149bc:	4641      	mov	r1, r8
   149be:	f7ff fb33 	bl	14028 <_Unwind_VRS_Set>
   149c2:	4640      	mov	r0, r8
   149c4:	e778      	b.n	148b8 <__gnu_unwind_execute+0xa8>
   149c6:	4638      	mov	r0, r7
   149c8:	f7ff fef6 	bl	147b8 <next_unwind_byte>
   149cc:	2800      	cmp	r0, #0
   149ce:	f43f af72 	beq.w	148b6 <__gnu_unwind_execute+0xa6>
   149d2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   149d6:	f47f af6e 	bne.w	148b6 <__gnu_unwind_execute+0xa6>
   149da:	4602      	mov	r2, r0
   149dc:	4619      	mov	r1, r3
   149de:	4630      	mov	r0, r6
   149e0:	f7ff fcf0 	bl	143c4 <_Unwind_VRS_Pop>
   149e4:	2800      	cmp	r0, #0
   149e6:	f47f af66 	bne.w	148b6 <__gnu_unwind_execute+0xa6>
   149ea:	e718      	b.n	1481e <__gnu_unwind_execute+0xe>
   149ec:	2300      	movs	r3, #0
   149ee:	f10d 090c 	add.w	r9, sp, #12
   149f2:	220d      	movs	r2, #13
   149f4:	4619      	mov	r1, r3
   149f6:	f8cd 9000 	str.w	r9, [sp]
   149fa:	4630      	mov	r0, r6
   149fc:	f7ff faee 	bl	13fdc <_Unwind_VRS_Get>
   14a00:	4638      	mov	r0, r7
   14a02:	f7ff fed9 	bl	147b8 <next_unwind_byte>
   14a06:	0602      	lsls	r2, r0, #24
   14a08:	f04f 0402 	mov.w	r4, #2
   14a0c:	d50c      	bpl.n	14a28 <__gnu_unwind_execute+0x218>
   14a0e:	9b03      	ldr	r3, [sp, #12]
   14a10:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   14a14:	40a0      	lsls	r0, r4
   14a16:	4403      	add	r3, r0
   14a18:	4638      	mov	r0, r7
   14a1a:	9303      	str	r3, [sp, #12]
   14a1c:	f7ff fecc 	bl	147b8 <next_unwind_byte>
   14a20:	0603      	lsls	r3, r0, #24
   14a22:	f104 0407 	add.w	r4, r4, #7
   14a26:	d4f2      	bmi.n	14a0e <__gnu_unwind_execute+0x1fe>
   14a28:	9b03      	ldr	r3, [sp, #12]
   14a2a:	f8cd 9000 	str.w	r9, [sp]
   14a2e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   14a32:	40a2      	lsls	r2, r4
   14a34:	f503 7401 	add.w	r4, r3, #516	; 0x204
   14a38:	2300      	movs	r3, #0
   14a3a:	4414      	add	r4, r2
   14a3c:	4619      	mov	r1, r3
   14a3e:	220d      	movs	r2, #13
   14a40:	4630      	mov	r0, r6
   14a42:	9403      	str	r4, [sp, #12]
   14a44:	f7ff faf0 	bl	14028 <_Unwind_VRS_Set>
   14a48:	e6e9      	b.n	1481e <__gnu_unwind_execute+0xe>
   14a4a:	4638      	mov	r0, r7
   14a4c:	f7ff feb4 	bl	147b8 <next_unwind_byte>
   14a50:	0301      	lsls	r1, r0, #12
   14a52:	f000 000f 	and.w	r0, r0, #15
   14a56:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   14a5a:	1c42      	adds	r2, r0, #1
   14a5c:	2301      	movs	r3, #1
   14a5e:	430a      	orrs	r2, r1
   14a60:	4630      	mov	r0, r6
   14a62:	4619      	mov	r1, r3
   14a64:	f7ff fcae 	bl	143c4 <_Unwind_VRS_Pop>
   14a68:	2800      	cmp	r0, #0
   14a6a:	f47f af24 	bne.w	148b6 <__gnu_unwind_execute+0xa6>
   14a6e:	e6d6      	b.n	1481e <__gnu_unwind_execute+0xe>
   14a70:	4638      	mov	r0, r7
   14a72:	f7ff fea1 	bl	147b8 <next_unwind_byte>
   14a76:	0301      	lsls	r1, r0, #12
   14a78:	f000 000f 	and.w	r0, r0, #15
   14a7c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   14a80:	1c42      	adds	r2, r0, #1
   14a82:	2303      	movs	r3, #3
   14a84:	e7eb      	b.n	14a5e <__gnu_unwind_execute+0x24e>
   14a86:	4638      	mov	r0, r7
   14a88:	f7ff fe96 	bl	147b8 <next_unwind_byte>
   14a8c:	2800      	cmp	r0, #0
   14a8e:	f43f af12 	beq.w	148b6 <__gnu_unwind_execute+0xa6>
   14a92:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   14a96:	f47f af0e 	bne.w	148b6 <__gnu_unwind_execute+0xa6>
   14a9a:	4602      	mov	r2, r0
   14a9c:	2104      	movs	r1, #4
   14a9e:	4630      	mov	r0, r6
   14aa0:	f7ff fc90 	bl	143c4 <_Unwind_VRS_Pop>
   14aa4:	2800      	cmp	r0, #0
   14aa6:	f47f af06 	bne.w	148b6 <__gnu_unwind_execute+0xa6>
   14aaa:	e6b8      	b.n	1481e <__gnu_unwind_execute+0xe>
   14aac:	f000 020f 	and.w	r2, r0, #15
   14ab0:	3201      	adds	r2, #1
   14ab2:	2303      	movs	r3, #3
   14ab4:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   14ab8:	4619      	mov	r1, r3
   14aba:	4630      	mov	r0, r6
   14abc:	f7ff fc82 	bl	143c4 <_Unwind_VRS_Pop>
   14ac0:	2800      	cmp	r0, #0
   14ac2:	f47f aef8 	bne.w	148b6 <__gnu_unwind_execute+0xa6>
   14ac6:	e6aa      	b.n	1481e <__gnu_unwind_execute+0xe>
   14ac8:	4638      	mov	r0, r7
   14aca:	f7ff fe75 	bl	147b8 <next_unwind_byte>
   14ace:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   14ad2:	f000 030f 	and.w	r3, r0, #15
   14ad6:	3210      	adds	r2, #16
   14ad8:	3301      	adds	r3, #1
   14ada:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   14ade:	e6e3      	b.n	148a8 <__gnu_unwind_execute+0x98>

00014ae0 <__gnu_unwind_frame>:
   14ae0:	b510      	push	{r4, lr}
   14ae2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   14ae4:	b084      	sub	sp, #16
   14ae6:	685a      	ldr	r2, [r3, #4]
   14ae8:	2003      	movs	r0, #3
   14aea:	f88d 000c 	strb.w	r0, [sp, #12]
   14aee:	79dc      	ldrb	r4, [r3, #7]
   14af0:	f88d 400d 	strb.w	r4, [sp, #13]
   14af4:	0212      	lsls	r2, r2, #8
   14af6:	3308      	adds	r3, #8
   14af8:	4608      	mov	r0, r1
   14afa:	a901      	add	r1, sp, #4
   14afc:	9201      	str	r2, [sp, #4]
   14afe:	9302      	str	r3, [sp, #8]
   14b00:	f7ff fe86 	bl	14810 <__gnu_unwind_execute>
   14b04:	b004      	add	sp, #16
   14b06:	bd10      	pop	{r4, pc}

00014b08 <_Unwind_GetRegionStart>:
   14b08:	b508      	push	{r3, lr}
   14b0a:	f7ff fe7f 	bl	1480c <unwind_UCB_from_context>
   14b0e:	6c80      	ldr	r0, [r0, #72]	; 0x48
   14b10:	bd08      	pop	{r3, pc}
   14b12:	bf00      	nop

00014b14 <_Unwind_GetLanguageSpecificData>:
   14b14:	b508      	push	{r3, lr}
   14b16:	f7ff fe79 	bl	1480c <unwind_UCB_from_context>
   14b1a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   14b1c:	79c3      	ldrb	r3, [r0, #7]
   14b1e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   14b22:	3008      	adds	r0, #8
   14b24:	bd08      	pop	{r3, pc}
   14b26:	bf00      	nop

00014b28 <_Unwind_GetTextRelBase>:
   14b28:	b508      	push	{r3, lr}
   14b2a:	f000 f807 	bl	14b3c <abort>
   14b2e:	bf00      	nop

00014b30 <_Unwind_GetDataRelBase>:
   14b30:	b508      	push	{r3, lr}
   14b32:	f7ff fff9 	bl	14b28 <_Unwind_GetTextRelBase>
   14b36:	bf00      	nop

00014b38 <__aeabi_idiv0>:
   14b38:	4770      	bx	lr
   14b3a:	bf00      	nop

00014b3c <abort>:
   14b3c:	b508      	push	{r3, lr}
   14b3e:	2006      	movs	r0, #6
   14b40:	f001 fa52 	bl	15fe8 <raise>
   14b44:	2001      	movs	r0, #1
   14b46:	f7eb fddb 	bl	700 <_exit>
   14b4a:	bf00      	nop

00014b4c <__assert_func>:
   14b4c:	b500      	push	{lr}
   14b4e:	4c0a      	ldr	r4, [pc, #40]	; (14b78 <__assert_func+0x2c>)
   14b50:	6826      	ldr	r6, [r4, #0]
   14b52:	4605      	mov	r5, r0
   14b54:	b085      	sub	sp, #20
   14b56:	461c      	mov	r4, r3
   14b58:	68f0      	ldr	r0, [r6, #12]
   14b5a:	b152      	cbz	r2, 14b72 <__assert_func+0x26>
   14b5c:	4b07      	ldr	r3, [pc, #28]	; (14b7c <__assert_func+0x30>)
   14b5e:	9202      	str	r2, [sp, #8]
   14b60:	e88d 000a 	stmia.w	sp, {r1, r3}
   14b64:	4622      	mov	r2, r4
   14b66:	462b      	mov	r3, r5
   14b68:	4905      	ldr	r1, [pc, #20]	; (14b80 <__assert_func+0x34>)
   14b6a:	f000 f819 	bl	14ba0 <fiprintf>
   14b6e:	f7ff ffe5 	bl	14b3c <abort>
   14b72:	4b04      	ldr	r3, [pc, #16]	; (14b84 <__assert_func+0x38>)
   14b74:	461a      	mov	r2, r3
   14b76:	e7f2      	b.n	14b5e <__assert_func+0x12>
   14b78:	20000020 	.word	0x20000020
   14b7c:	0002483c 	.word	0x0002483c
   14b80:	0002484c 	.word	0x0002484c
   14b84:	0002108c 	.word	0x0002108c

00014b88 <__cxa_atexit>:
   14b88:	4613      	mov	r3, r2
   14b8a:	460a      	mov	r2, r1
   14b8c:	4601      	mov	r1, r0
   14b8e:	2002      	movs	r0, #2
   14b90:	f005 bbd2 	b.w	1a338 <__register_exitproc>

00014b94 <__errno>:
   14b94:	4b01      	ldr	r3, [pc, #4]	; (14b9c <__errno+0x8>)
   14b96:	6818      	ldr	r0, [r3, #0]
   14b98:	4770      	bx	lr
   14b9a:	bf00      	nop
   14b9c:	20000020 	.word	0x20000020

00014ba0 <fiprintf>:
   14ba0:	b40e      	push	{r1, r2, r3}
   14ba2:	b510      	push	{r4, lr}
   14ba4:	b083      	sub	sp, #12
   14ba6:	ab05      	add	r3, sp, #20
   14ba8:	4c06      	ldr	r4, [pc, #24]	; (14bc4 <fiprintf+0x24>)
   14baa:	f853 2b04 	ldr.w	r2, [r3], #4
   14bae:	9301      	str	r3, [sp, #4]
   14bb0:	4601      	mov	r1, r0
   14bb2:	6820      	ldr	r0, [r4, #0]
   14bb4:	f003 f93e 	bl	17e34 <_vfiprintf_r>
   14bb8:	b003      	add	sp, #12
   14bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14bbe:	b003      	add	sp, #12
   14bc0:	4770      	bx	lr
   14bc2:	bf00      	nop
   14bc4:	20000020 	.word	0x20000020

00014bc8 <fputc>:
   14bc8:	4b14      	ldr	r3, [pc, #80]	; (14c1c <fputc+0x54>)
   14bca:	b570      	push	{r4, r5, r6, lr}
   14bcc:	681d      	ldr	r5, [r3, #0]
   14bce:	4606      	mov	r6, r0
   14bd0:	460c      	mov	r4, r1
   14bd2:	b10d      	cbz	r5, 14bd8 <fputc+0x10>
   14bd4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   14bd6:	b1c3      	cbz	r3, 14c0a <fputc+0x42>
   14bd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14bda:	07d8      	lsls	r0, r3, #31
   14bdc:	d402      	bmi.n	14be4 <fputc+0x1c>
   14bde:	89a3      	ldrh	r3, [r4, #12]
   14be0:	0599      	lsls	r1, r3, #22
   14be2:	d516      	bpl.n	14c12 <fputc+0x4a>
   14be4:	4628      	mov	r0, r5
   14be6:	4622      	mov	r2, r4
   14be8:	4631      	mov	r1, r6
   14bea:	f000 ffd5 	bl	15b98 <_putc_r>
   14bee:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14bf0:	07da      	lsls	r2, r3, #31
   14bf2:	4605      	mov	r5, r0
   14bf4:	d402      	bmi.n	14bfc <fputc+0x34>
   14bf6:	89a3      	ldrh	r3, [r4, #12]
   14bf8:	059b      	lsls	r3, r3, #22
   14bfa:	d501      	bpl.n	14c00 <fputc+0x38>
   14bfc:	4628      	mov	r0, r5
   14bfe:	bd70      	pop	{r4, r5, r6, pc}
   14c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14c02:	f000 fa87 	bl	15114 <__retarget_lock_release_recursive>
   14c06:	4628      	mov	r0, r5
   14c08:	bd70      	pop	{r4, r5, r6, pc}
   14c0a:	4628      	mov	r0, r5
   14c0c:	f006 fcce 	bl	1b5ac <__sinit>
   14c10:	e7e2      	b.n	14bd8 <fputc+0x10>
   14c12:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14c14:	f000 fa7c 	bl	15110 <__retarget_lock_acquire_recursive>
   14c18:	e7e4      	b.n	14be4 <fputc+0x1c>
   14c1a:	bf00      	nop
   14c1c:	20000020 	.word	0x20000020

00014c20 <_fputs_r>:
   14c20:	b530      	push	{r4, r5, lr}
   14c22:	b087      	sub	sp, #28
   14c24:	4605      	mov	r5, r0
   14c26:	4608      	mov	r0, r1
   14c28:	4614      	mov	r4, r2
   14c2a:	9101      	str	r1, [sp, #4]
   14c2c:	f001 fdc8 	bl	167c0 <strlen>
   14c30:	aa01      	add	r2, sp, #4
   14c32:	2301      	movs	r3, #1
   14c34:	9005      	str	r0, [sp, #20]
   14c36:	9002      	str	r0, [sp, #8]
   14c38:	9203      	str	r2, [sp, #12]
   14c3a:	9304      	str	r3, [sp, #16]
   14c3c:	b10d      	cbz	r5, 14c42 <_fputs_r+0x22>
   14c3e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   14c40:	b333      	cbz	r3, 14c90 <_fputs_r+0x70>
   14c42:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14c44:	f013 0f01 	tst.w	r3, #1
   14c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14c4c:	b29a      	uxth	r2, r3
   14c4e:	d101      	bne.n	14c54 <_fputs_r+0x34>
   14c50:	0590      	lsls	r0, r2, #22
   14c52:	d521      	bpl.n	14c98 <_fputs_r+0x78>
   14c54:	0491      	lsls	r1, r2, #18
   14c56:	d406      	bmi.n	14c66 <_fputs_r+0x46>
   14c58:	6e62      	ldr	r2, [r4, #100]	; 0x64
   14c5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   14c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   14c62:	81a3      	strh	r3, [r4, #12]
   14c64:	6662      	str	r2, [r4, #100]	; 0x64
   14c66:	4628      	mov	r0, r5
   14c68:	aa03      	add	r2, sp, #12
   14c6a:	4621      	mov	r1, r4
   14c6c:	f000 f838 	bl	14ce0 <__sfvwrite_r>
   14c70:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14c72:	07da      	lsls	r2, r3, #31
   14c74:	4605      	mov	r5, r0
   14c76:	d402      	bmi.n	14c7e <_fputs_r+0x5e>
   14c78:	89a3      	ldrh	r3, [r4, #12]
   14c7a:	059b      	lsls	r3, r3, #22
   14c7c:	d502      	bpl.n	14c84 <_fputs_r+0x64>
   14c7e:	4628      	mov	r0, r5
   14c80:	b007      	add	sp, #28
   14c82:	bd30      	pop	{r4, r5, pc}
   14c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14c86:	f000 fa45 	bl	15114 <__retarget_lock_release_recursive>
   14c8a:	4628      	mov	r0, r5
   14c8c:	b007      	add	sp, #28
   14c8e:	bd30      	pop	{r4, r5, pc}
   14c90:	4628      	mov	r0, r5
   14c92:	f006 fc8b 	bl	1b5ac <__sinit>
   14c96:	e7d4      	b.n	14c42 <_fputs_r+0x22>
   14c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14c9a:	f000 fa39 	bl	15110 <__retarget_lock_acquire_recursive>
   14c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14ca2:	b29a      	uxth	r2, r3
   14ca4:	e7d6      	b.n	14c54 <_fputs_r+0x34>
   14ca6:	bf00      	nop

00014ca8 <fputs>:
   14ca8:	4b02      	ldr	r3, [pc, #8]	; (14cb4 <fputs+0xc>)
   14caa:	460a      	mov	r2, r1
   14cac:	4601      	mov	r1, r0
   14cae:	6818      	ldr	r0, [r3, #0]
   14cb0:	f7ff bfb6 	b.w	14c20 <_fputs_r>
   14cb4:	20000020 	.word	0x20000020

00014cb8 <_fstat_r>:
   14cb8:	b538      	push	{r3, r4, r5, lr}
   14cba:	460b      	mov	r3, r1
   14cbc:	4c07      	ldr	r4, [pc, #28]	; (14cdc <_fstat_r+0x24>)
   14cbe:	4605      	mov	r5, r0
   14cc0:	4611      	mov	r1, r2
   14cc2:	4618      	mov	r0, r3
   14cc4:	2300      	movs	r3, #0
   14cc6:	6023      	str	r3, [r4, #0]
   14cc8:	f7eb fd11 	bl	6ee <_fstat>
   14ccc:	1c43      	adds	r3, r0, #1
   14cce:	d000      	beq.n	14cd2 <_fstat_r+0x1a>
   14cd0:	bd38      	pop	{r3, r4, r5, pc}
   14cd2:	6823      	ldr	r3, [r4, #0]
   14cd4:	2b00      	cmp	r3, #0
   14cd6:	d0fb      	beq.n	14cd0 <_fstat_r+0x18>
   14cd8:	602b      	str	r3, [r5, #0]
   14cda:	bd38      	pop	{r3, r4, r5, pc}
   14cdc:	2000fcc4 	.word	0x2000fcc4

00014ce0 <__sfvwrite_r>:
   14ce0:	6893      	ldr	r3, [r2, #8]
   14ce2:	2b00      	cmp	r3, #0
   14ce4:	d073      	beq.n	14dce <__sfvwrite_r+0xee>
   14ce6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cea:	898b      	ldrh	r3, [r1, #12]
   14cec:	b083      	sub	sp, #12
   14cee:	460c      	mov	r4, r1
   14cf0:	0719      	lsls	r1, r3, #28
   14cf2:	9000      	str	r0, [sp, #0]
   14cf4:	4616      	mov	r6, r2
   14cf6:	d526      	bpl.n	14d46 <__sfvwrite_r+0x66>
   14cf8:	6922      	ldr	r2, [r4, #16]
   14cfa:	b322      	cbz	r2, 14d46 <__sfvwrite_r+0x66>
   14cfc:	f013 0002 	ands.w	r0, r3, #2
   14d00:	6835      	ldr	r5, [r6, #0]
   14d02:	d02c      	beq.n	14d5e <__sfvwrite_r+0x7e>
   14d04:	f04f 0900 	mov.w	r9, #0
   14d08:	4fb0      	ldr	r7, [pc, #704]	; (14fcc <__sfvwrite_r+0x2ec>)
   14d0a:	46c8      	mov	r8, r9
   14d0c:	46b2      	mov	sl, r6
   14d0e:	45b8      	cmp	r8, r7
   14d10:	4643      	mov	r3, r8
   14d12:	464a      	mov	r2, r9
   14d14:	bf28      	it	cs
   14d16:	463b      	movcs	r3, r7
   14d18:	9800      	ldr	r0, [sp, #0]
   14d1a:	f1b8 0f00 	cmp.w	r8, #0
   14d1e:	d050      	beq.n	14dc2 <__sfvwrite_r+0xe2>
   14d20:	69e1      	ldr	r1, [r4, #28]
   14d22:	6a66      	ldr	r6, [r4, #36]	; 0x24
   14d24:	47b0      	blx	r6
   14d26:	2800      	cmp	r0, #0
   14d28:	dd58      	ble.n	14ddc <__sfvwrite_r+0xfc>
   14d2a:	f8da 3008 	ldr.w	r3, [sl, #8]
   14d2e:	1a1b      	subs	r3, r3, r0
   14d30:	4481      	add	r9, r0
   14d32:	eba8 0800 	sub.w	r8, r8, r0
   14d36:	f8ca 3008 	str.w	r3, [sl, #8]
   14d3a:	2b00      	cmp	r3, #0
   14d3c:	d1e7      	bne.n	14d0e <__sfvwrite_r+0x2e>
   14d3e:	2000      	movs	r0, #0
   14d40:	b003      	add	sp, #12
   14d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d46:	4621      	mov	r1, r4
   14d48:	9800      	ldr	r0, [sp, #0]
   14d4a:	f005 fa91 	bl	1a270 <__swsetup_r>
   14d4e:	2800      	cmp	r0, #0
   14d50:	f040 8133 	bne.w	14fba <__sfvwrite_r+0x2da>
   14d54:	89a3      	ldrh	r3, [r4, #12]
   14d56:	6835      	ldr	r5, [r6, #0]
   14d58:	f013 0002 	ands.w	r0, r3, #2
   14d5c:	d1d2      	bne.n	14d04 <__sfvwrite_r+0x24>
   14d5e:	f013 0901 	ands.w	r9, r3, #1
   14d62:	d145      	bne.n	14df0 <__sfvwrite_r+0x110>
   14d64:	464f      	mov	r7, r9
   14d66:	9601      	str	r6, [sp, #4]
   14d68:	b337      	cbz	r7, 14db8 <__sfvwrite_r+0xd8>
   14d6a:	059a      	lsls	r2, r3, #22
   14d6c:	f8d4 8008 	ldr.w	r8, [r4, #8]
   14d70:	f140 8083 	bpl.w	14e7a <__sfvwrite_r+0x19a>
   14d74:	4547      	cmp	r7, r8
   14d76:	46c3      	mov	fp, r8
   14d78:	f0c0 80ab 	bcc.w	14ed2 <__sfvwrite_r+0x1f2>
   14d7c:	f413 6f90 	tst.w	r3, #1152	; 0x480
   14d80:	f040 80ac 	bne.w	14edc <__sfvwrite_r+0x1fc>
   14d84:	6820      	ldr	r0, [r4, #0]
   14d86:	46ba      	mov	sl, r7
   14d88:	465a      	mov	r2, fp
   14d8a:	4649      	mov	r1, r9
   14d8c:	f000 fe32 	bl	159f4 <memmove>
   14d90:	68a2      	ldr	r2, [r4, #8]
   14d92:	6823      	ldr	r3, [r4, #0]
   14d94:	eba2 0208 	sub.w	r2, r2, r8
   14d98:	445b      	add	r3, fp
   14d9a:	60a2      	str	r2, [r4, #8]
   14d9c:	6023      	str	r3, [r4, #0]
   14d9e:	9a01      	ldr	r2, [sp, #4]
   14da0:	6893      	ldr	r3, [r2, #8]
   14da2:	eba3 030a 	sub.w	r3, r3, sl
   14da6:	44d1      	add	r9, sl
   14da8:	eba7 070a 	sub.w	r7, r7, sl
   14dac:	6093      	str	r3, [r2, #8]
   14dae:	2b00      	cmp	r3, #0
   14db0:	d0c5      	beq.n	14d3e <__sfvwrite_r+0x5e>
   14db2:	89a3      	ldrh	r3, [r4, #12]
   14db4:	2f00      	cmp	r7, #0
   14db6:	d1d8      	bne.n	14d6a <__sfvwrite_r+0x8a>
   14db8:	f8d5 9000 	ldr.w	r9, [r5]
   14dbc:	686f      	ldr	r7, [r5, #4]
   14dbe:	3508      	adds	r5, #8
   14dc0:	e7d2      	b.n	14d68 <__sfvwrite_r+0x88>
   14dc2:	f8d5 9000 	ldr.w	r9, [r5]
   14dc6:	f8d5 8004 	ldr.w	r8, [r5, #4]
   14dca:	3508      	adds	r5, #8
   14dcc:	e79f      	b.n	14d0e <__sfvwrite_r+0x2e>
   14dce:	2000      	movs	r0, #0
   14dd0:	4770      	bx	lr
   14dd2:	4621      	mov	r1, r4
   14dd4:	9800      	ldr	r0, [sp, #0]
   14dd6:	f006 fb91 	bl	1b4fc <_fflush_r>
   14dda:	b370      	cbz	r0, 14e3a <__sfvwrite_r+0x15a>
   14ddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14de4:	f04f 30ff 	mov.w	r0, #4294967295
   14de8:	81a3      	strh	r3, [r4, #12]
   14dea:	b003      	add	sp, #12
   14dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14df0:	4681      	mov	r9, r0
   14df2:	4633      	mov	r3, r6
   14df4:	464e      	mov	r6, r9
   14df6:	46a8      	mov	r8, r5
   14df8:	469a      	mov	sl, r3
   14dfa:	464d      	mov	r5, r9
   14dfc:	b34e      	cbz	r6, 14e52 <__sfvwrite_r+0x172>
   14dfe:	b380      	cbz	r0, 14e62 <__sfvwrite_r+0x182>
   14e00:	6820      	ldr	r0, [r4, #0]
   14e02:	6923      	ldr	r3, [r4, #16]
   14e04:	6962      	ldr	r2, [r4, #20]
   14e06:	45b1      	cmp	r9, r6
   14e08:	46cb      	mov	fp, r9
   14e0a:	bf28      	it	cs
   14e0c:	46b3      	movcs	fp, r6
   14e0e:	4298      	cmp	r0, r3
   14e10:	465f      	mov	r7, fp
   14e12:	d904      	bls.n	14e1e <__sfvwrite_r+0x13e>
   14e14:	68a3      	ldr	r3, [r4, #8]
   14e16:	4413      	add	r3, r2
   14e18:	459b      	cmp	fp, r3
   14e1a:	f300 80a6 	bgt.w	14f6a <__sfvwrite_r+0x28a>
   14e1e:	4593      	cmp	fp, r2
   14e20:	db4b      	blt.n	14eba <__sfvwrite_r+0x1da>
   14e22:	4613      	mov	r3, r2
   14e24:	6a67      	ldr	r7, [r4, #36]	; 0x24
   14e26:	69e1      	ldr	r1, [r4, #28]
   14e28:	9800      	ldr	r0, [sp, #0]
   14e2a:	462a      	mov	r2, r5
   14e2c:	47b8      	blx	r7
   14e2e:	1e07      	subs	r7, r0, #0
   14e30:	ddd4      	ble.n	14ddc <__sfvwrite_r+0xfc>
   14e32:	ebb9 0907 	subs.w	r9, r9, r7
   14e36:	d0cc      	beq.n	14dd2 <__sfvwrite_r+0xf2>
   14e38:	2001      	movs	r0, #1
   14e3a:	f8da 3008 	ldr.w	r3, [sl, #8]
   14e3e:	1bdb      	subs	r3, r3, r7
   14e40:	443d      	add	r5, r7
   14e42:	1bf6      	subs	r6, r6, r7
   14e44:	f8ca 3008 	str.w	r3, [sl, #8]
   14e48:	2b00      	cmp	r3, #0
   14e4a:	f43f af78 	beq.w	14d3e <__sfvwrite_r+0x5e>
   14e4e:	2e00      	cmp	r6, #0
   14e50:	d1d5      	bne.n	14dfe <__sfvwrite_r+0x11e>
   14e52:	f108 0308 	add.w	r3, r8, #8
   14e56:	e913 0060 	ldmdb	r3, {r5, r6}
   14e5a:	4698      	mov	r8, r3
   14e5c:	3308      	adds	r3, #8
   14e5e:	2e00      	cmp	r6, #0
   14e60:	d0f9      	beq.n	14e56 <__sfvwrite_r+0x176>
   14e62:	4632      	mov	r2, r6
   14e64:	210a      	movs	r1, #10
   14e66:	4628      	mov	r0, r5
   14e68:	f000 fcaa 	bl	157c0 <memchr>
   14e6c:	2800      	cmp	r0, #0
   14e6e:	f000 80a1 	beq.w	14fb4 <__sfvwrite_r+0x2d4>
   14e72:	3001      	adds	r0, #1
   14e74:	eba0 0905 	sub.w	r9, r0, r5
   14e78:	e7c2      	b.n	14e00 <__sfvwrite_r+0x120>
   14e7a:	6820      	ldr	r0, [r4, #0]
   14e7c:	6923      	ldr	r3, [r4, #16]
   14e7e:	4298      	cmp	r0, r3
   14e80:	d802      	bhi.n	14e88 <__sfvwrite_r+0x1a8>
   14e82:	6963      	ldr	r3, [r4, #20]
   14e84:	429f      	cmp	r7, r3
   14e86:	d25d      	bcs.n	14f44 <__sfvwrite_r+0x264>
   14e88:	45b8      	cmp	r8, r7
   14e8a:	bf28      	it	cs
   14e8c:	46b8      	movcs	r8, r7
   14e8e:	4642      	mov	r2, r8
   14e90:	4649      	mov	r1, r9
   14e92:	f000 fdaf 	bl	159f4 <memmove>
   14e96:	68a3      	ldr	r3, [r4, #8]
   14e98:	6822      	ldr	r2, [r4, #0]
   14e9a:	eba3 0308 	sub.w	r3, r3, r8
   14e9e:	4442      	add	r2, r8
   14ea0:	60a3      	str	r3, [r4, #8]
   14ea2:	6022      	str	r2, [r4, #0]
   14ea4:	b10b      	cbz	r3, 14eaa <__sfvwrite_r+0x1ca>
   14ea6:	46c2      	mov	sl, r8
   14ea8:	e779      	b.n	14d9e <__sfvwrite_r+0xbe>
   14eaa:	4621      	mov	r1, r4
   14eac:	9800      	ldr	r0, [sp, #0]
   14eae:	f006 fb25 	bl	1b4fc <_fflush_r>
   14eb2:	2800      	cmp	r0, #0
   14eb4:	d192      	bne.n	14ddc <__sfvwrite_r+0xfc>
   14eb6:	46c2      	mov	sl, r8
   14eb8:	e771      	b.n	14d9e <__sfvwrite_r+0xbe>
   14eba:	465a      	mov	r2, fp
   14ebc:	4629      	mov	r1, r5
   14ebe:	f000 fd99 	bl	159f4 <memmove>
   14ec2:	68a2      	ldr	r2, [r4, #8]
   14ec4:	6823      	ldr	r3, [r4, #0]
   14ec6:	eba2 020b 	sub.w	r2, r2, fp
   14eca:	445b      	add	r3, fp
   14ecc:	60a2      	str	r2, [r4, #8]
   14ece:	6023      	str	r3, [r4, #0]
   14ed0:	e7af      	b.n	14e32 <__sfvwrite_r+0x152>
   14ed2:	6820      	ldr	r0, [r4, #0]
   14ed4:	46b8      	mov	r8, r7
   14ed6:	46ba      	mov	sl, r7
   14ed8:	46bb      	mov	fp, r7
   14eda:	e755      	b.n	14d88 <__sfvwrite_r+0xa8>
   14edc:	6962      	ldr	r2, [r4, #20]
   14ede:	6820      	ldr	r0, [r4, #0]
   14ee0:	6921      	ldr	r1, [r4, #16]
   14ee2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   14ee6:	eba0 0a01 	sub.w	sl, r0, r1
   14eea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   14eee:	f10a 0001 	add.w	r0, sl, #1
   14ef2:	ea4f 0868 	mov.w	r8, r8, asr #1
   14ef6:	4438      	add	r0, r7
   14ef8:	4540      	cmp	r0, r8
   14efa:	4642      	mov	r2, r8
   14efc:	bf84      	itt	hi
   14efe:	4680      	movhi	r8, r0
   14f00:	4642      	movhi	r2, r8
   14f02:	055b      	lsls	r3, r3, #21
   14f04:	d544      	bpl.n	14f90 <__sfvwrite_r+0x2b0>
   14f06:	4611      	mov	r1, r2
   14f08:	9800      	ldr	r0, [sp, #0]
   14f0a:	f000 f98d 	bl	15228 <_malloc_r>
   14f0e:	4683      	mov	fp, r0
   14f10:	2800      	cmp	r0, #0
   14f12:	d055      	beq.n	14fc0 <__sfvwrite_r+0x2e0>
   14f14:	4652      	mov	r2, sl
   14f16:	6921      	ldr	r1, [r4, #16]
   14f18:	f000 fcd2 	bl	158c0 <memcpy>
   14f1c:	89a3      	ldrh	r3, [r4, #12]
   14f1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   14f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14f26:	81a3      	strh	r3, [r4, #12]
   14f28:	eb0b 000a 	add.w	r0, fp, sl
   14f2c:	eba8 030a 	sub.w	r3, r8, sl
   14f30:	f8c4 b010 	str.w	fp, [r4, #16]
   14f34:	f8c4 8014 	str.w	r8, [r4, #20]
   14f38:	6020      	str	r0, [r4, #0]
   14f3a:	60a3      	str	r3, [r4, #8]
   14f3c:	46b8      	mov	r8, r7
   14f3e:	46ba      	mov	sl, r7
   14f40:	46bb      	mov	fp, r7
   14f42:	e721      	b.n	14d88 <__sfvwrite_r+0xa8>
   14f44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   14f48:	42b9      	cmp	r1, r7
   14f4a:	bf28      	it	cs
   14f4c:	4639      	movcs	r1, r7
   14f4e:	464a      	mov	r2, r9
   14f50:	fb91 f1f3 	sdiv	r1, r1, r3
   14f54:	9800      	ldr	r0, [sp, #0]
   14f56:	6a66      	ldr	r6, [r4, #36]	; 0x24
   14f58:	fb03 f301 	mul.w	r3, r3, r1
   14f5c:	69e1      	ldr	r1, [r4, #28]
   14f5e:	47b0      	blx	r6
   14f60:	f1b0 0a00 	subs.w	sl, r0, #0
   14f64:	f73f af1b 	bgt.w	14d9e <__sfvwrite_r+0xbe>
   14f68:	e738      	b.n	14ddc <__sfvwrite_r+0xfc>
   14f6a:	461a      	mov	r2, r3
   14f6c:	4629      	mov	r1, r5
   14f6e:	9301      	str	r3, [sp, #4]
   14f70:	f000 fd40 	bl	159f4 <memmove>
   14f74:	6822      	ldr	r2, [r4, #0]
   14f76:	9b01      	ldr	r3, [sp, #4]
   14f78:	9800      	ldr	r0, [sp, #0]
   14f7a:	441a      	add	r2, r3
   14f7c:	6022      	str	r2, [r4, #0]
   14f7e:	4621      	mov	r1, r4
   14f80:	f006 fabc 	bl	1b4fc <_fflush_r>
   14f84:	9b01      	ldr	r3, [sp, #4]
   14f86:	2800      	cmp	r0, #0
   14f88:	f47f af28 	bne.w	14ddc <__sfvwrite_r+0xfc>
   14f8c:	461f      	mov	r7, r3
   14f8e:	e750      	b.n	14e32 <__sfvwrite_r+0x152>
   14f90:	9800      	ldr	r0, [sp, #0]
   14f92:	f000 fe41 	bl	15c18 <_realloc_r>
   14f96:	4683      	mov	fp, r0
   14f98:	2800      	cmp	r0, #0
   14f9a:	d1c5      	bne.n	14f28 <__sfvwrite_r+0x248>
   14f9c:	9d00      	ldr	r5, [sp, #0]
   14f9e:	6921      	ldr	r1, [r4, #16]
   14fa0:	4628      	mov	r0, r5
   14fa2:	f006 fc29 	bl	1b7f8 <_free_r>
   14fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14faa:	220c      	movs	r2, #12
   14fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14fb0:	602a      	str	r2, [r5, #0]
   14fb2:	e715      	b.n	14de0 <__sfvwrite_r+0x100>
   14fb4:	f106 0901 	add.w	r9, r6, #1
   14fb8:	e722      	b.n	14e00 <__sfvwrite_r+0x120>
   14fba:	f04f 30ff 	mov.w	r0, #4294967295
   14fbe:	e6bf      	b.n	14d40 <__sfvwrite_r+0x60>
   14fc0:	9a00      	ldr	r2, [sp, #0]
   14fc2:	230c      	movs	r3, #12
   14fc4:	6013      	str	r3, [r2, #0]
   14fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14fca:	e709      	b.n	14de0 <__sfvwrite_r+0x100>
   14fcc:	7ffffc00 	.word	0x7ffffc00

00014fd0 <_fwrite_r>:
   14fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14fd4:	b086      	sub	sp, #24
   14fd6:	fb02 f503 	mul.w	r5, r2, r3
   14fda:	4690      	mov	r8, r2
   14fdc:	461e      	mov	r6, r3
   14fde:	aa01      	add	r2, sp, #4
   14fe0:	2301      	movs	r3, #1
   14fe2:	9101      	str	r1, [sp, #4]
   14fe4:	9502      	str	r5, [sp, #8]
   14fe6:	9505      	str	r5, [sp, #20]
   14fe8:	9203      	str	r2, [sp, #12]
   14fea:	9304      	str	r3, [sp, #16]
   14fec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   14fee:	4607      	mov	r7, r0
   14ff0:	b110      	cbz	r0, 14ff8 <_fwrite_r+0x28>
   14ff2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   14ff4:	2b00      	cmp	r3, #0
   14ff6:	d031      	beq.n	1505c <_fwrite_r+0x8c>
   14ff8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14ffa:	f013 0f01 	tst.w	r3, #1
   14ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   15002:	b29a      	uxth	r2, r3
   15004:	d101      	bne.n	1500a <_fwrite_r+0x3a>
   15006:	0591      	lsls	r1, r2, #22
   15008:	d52b      	bpl.n	15062 <_fwrite_r+0x92>
   1500a:	0492      	lsls	r2, r2, #18
   1500c:	d406      	bmi.n	1501c <_fwrite_r+0x4c>
   1500e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15010:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   15014:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   15018:	81a3      	strh	r3, [r4, #12]
   1501a:	6662      	str	r2, [r4, #100]	; 0x64
   1501c:	4638      	mov	r0, r7
   1501e:	aa03      	add	r2, sp, #12
   15020:	4621      	mov	r1, r4
   15022:	f7ff fe5d 	bl	14ce0 <__sfvwrite_r>
   15026:	6e63      	ldr	r3, [r4, #100]	; 0x64
   15028:	b940      	cbnz	r0, 1503c <_fwrite_r+0x6c>
   1502a:	07d8      	lsls	r0, r3, #31
   1502c:	d402      	bmi.n	15034 <_fwrite_r+0x64>
   1502e:	89a3      	ldrh	r3, [r4, #12]
   15030:	0599      	lsls	r1, r3, #22
   15032:	d51d      	bpl.n	15070 <_fwrite_r+0xa0>
   15034:	4630      	mov	r0, r6
   15036:	b006      	add	sp, #24
   15038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1503c:	07da      	lsls	r2, r3, #31
   1503e:	d506      	bpl.n	1504e <_fwrite_r+0x7e>
   15040:	9805      	ldr	r0, [sp, #20]
   15042:	1a2d      	subs	r5, r5, r0
   15044:	fbb5 f0f8 	udiv	r0, r5, r8
   15048:	b006      	add	sp, #24
   1504a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1504e:	89a3      	ldrh	r3, [r4, #12]
   15050:	059b      	lsls	r3, r3, #22
   15052:	d4f5      	bmi.n	15040 <_fwrite_r+0x70>
   15054:	6da0      	ldr	r0, [r4, #88]	; 0x58
   15056:	f000 f85d 	bl	15114 <__retarget_lock_release_recursive>
   1505a:	e7f1      	b.n	15040 <_fwrite_r+0x70>
   1505c:	f006 faa6 	bl	1b5ac <__sinit>
   15060:	e7ca      	b.n	14ff8 <_fwrite_r+0x28>
   15062:	6da0      	ldr	r0, [r4, #88]	; 0x58
   15064:	f000 f854 	bl	15110 <__retarget_lock_acquire_recursive>
   15068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1506c:	b29a      	uxth	r2, r3
   1506e:	e7cc      	b.n	1500a <_fwrite_r+0x3a>
   15070:	6da0      	ldr	r0, [r4, #88]	; 0x58
   15072:	f000 f84f 	bl	15114 <__retarget_lock_release_recursive>
   15076:	4630      	mov	r0, r6
   15078:	e7e6      	b.n	15048 <_fwrite_r+0x78>
   1507a:	bf00      	nop

0001507c <fwrite>:
   1507c:	b510      	push	{r4, lr}
   1507e:	b082      	sub	sp, #8
   15080:	4c05      	ldr	r4, [pc, #20]	; (15098 <fwrite+0x1c>)
   15082:	9300      	str	r3, [sp, #0]
   15084:	6824      	ldr	r4, [r4, #0]
   15086:	4613      	mov	r3, r2
   15088:	460a      	mov	r2, r1
   1508a:	4601      	mov	r1, r0
   1508c:	4620      	mov	r0, r4
   1508e:	f7ff ff9f 	bl	14fd0 <_fwrite_r>
   15092:	b002      	add	sp, #8
   15094:	bd10      	pop	{r4, pc}
   15096:	bf00      	nop
   15098:	20000020 	.word	0x20000020

0001509c <__libc_init_array>:
   1509c:	b570      	push	{r4, r5, r6, lr}
   1509e:	4e0f      	ldr	r6, [pc, #60]	; (150dc <__libc_init_array+0x40>)
   150a0:	4d0f      	ldr	r5, [pc, #60]	; (150e0 <__libc_init_array+0x44>)
   150a2:	1b76      	subs	r6, r6, r5
   150a4:	10b6      	asrs	r6, r6, #2
   150a6:	bf18      	it	ne
   150a8:	2400      	movne	r4, #0
   150aa:	d005      	beq.n	150b8 <__libc_init_array+0x1c>
   150ac:	3401      	adds	r4, #1
   150ae:	f855 3b04 	ldr.w	r3, [r5], #4
   150b2:	4798      	blx	r3
   150b4:	42a6      	cmp	r6, r4
   150b6:	d1f9      	bne.n	150ac <__libc_init_array+0x10>
   150b8:	4e0a      	ldr	r6, [pc, #40]	; (150e4 <__libc_init_array+0x48>)
   150ba:	4d0b      	ldr	r5, [pc, #44]	; (150e8 <__libc_init_array+0x4c>)
   150bc:	1b76      	subs	r6, r6, r5
   150be:	f010 f971 	bl	253a4 <_init>
   150c2:	10b6      	asrs	r6, r6, #2
   150c4:	bf18      	it	ne
   150c6:	2400      	movne	r4, #0
   150c8:	d006      	beq.n	150d8 <__libc_init_array+0x3c>
   150ca:	3401      	adds	r4, #1
   150cc:	f855 3b04 	ldr.w	r3, [r5], #4
   150d0:	4798      	blx	r3
   150d2:	42a6      	cmp	r6, r4
   150d4:	d1f9      	bne.n	150ca <__libc_init_array+0x2e>
   150d6:	bd70      	pop	{r4, r5, r6, pc}
   150d8:	bd70      	pop	{r4, r5, r6, pc}
   150da:	bf00      	nop
   150dc:	000253b0 	.word	0x000253b0
   150e0:	000253b0 	.word	0x000253b0
   150e4:	000253d0 	.word	0x000253d0
   150e8:	000253b0 	.word	0x000253b0

000150ec <__locale_mb_cur_max>:
   150ec:	4b04      	ldr	r3, [pc, #16]	; (15100 <__locale_mb_cur_max+0x14>)
   150ee:	4a05      	ldr	r2, [pc, #20]	; (15104 <__locale_mb_cur_max+0x18>)
   150f0:	681b      	ldr	r3, [r3, #0]
   150f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   150f4:	2b00      	cmp	r3, #0
   150f6:	bf08      	it	eq
   150f8:	4613      	moveq	r3, r2
   150fa:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   150fe:	4770      	bx	lr
   15100:	20000020 	.word	0x20000020
   15104:	20000450 	.word	0x20000450

00015108 <__retarget_lock_init_recursive>:
   15108:	4770      	bx	lr
   1510a:	bf00      	nop

0001510c <__retarget_lock_close_recursive>:
   1510c:	4770      	bx	lr
   1510e:	bf00      	nop

00015110 <__retarget_lock_acquire_recursive>:
   15110:	4770      	bx	lr
   15112:	bf00      	nop

00015114 <__retarget_lock_release_recursive>:
   15114:	4770      	bx	lr
   15116:	bf00      	nop

00015118 <__swhatbuf_r>:
   15118:	b570      	push	{r4, r5, r6, lr}
   1511a:	460c      	mov	r4, r1
   1511c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   15120:	2900      	cmp	r1, #0
   15122:	b090      	sub	sp, #64	; 0x40
   15124:	4615      	mov	r5, r2
   15126:	461e      	mov	r6, r3
   15128:	db14      	blt.n	15154 <__swhatbuf_r+0x3c>
   1512a:	aa01      	add	r2, sp, #4
   1512c:	f7ff fdc4 	bl	14cb8 <_fstat_r>
   15130:	2800      	cmp	r0, #0
   15132:	db0f      	blt.n	15154 <__swhatbuf_r+0x3c>
   15134:	9a02      	ldr	r2, [sp, #8]
   15136:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   1513a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   1513e:	fab2 f282 	clz	r2, r2
   15142:	0952      	lsrs	r2, r2, #5
   15144:	f44f 6380 	mov.w	r3, #1024	; 0x400
   15148:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1514c:	6032      	str	r2, [r6, #0]
   1514e:	602b      	str	r3, [r5, #0]
   15150:	b010      	add	sp, #64	; 0x40
   15152:	bd70      	pop	{r4, r5, r6, pc}
   15154:	89a2      	ldrh	r2, [r4, #12]
   15156:	2300      	movs	r3, #0
   15158:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   1515c:	6033      	str	r3, [r6, #0]
   1515e:	d004      	beq.n	1516a <__swhatbuf_r+0x52>
   15160:	2240      	movs	r2, #64	; 0x40
   15162:	4618      	mov	r0, r3
   15164:	602a      	str	r2, [r5, #0]
   15166:	b010      	add	sp, #64	; 0x40
   15168:	bd70      	pop	{r4, r5, r6, pc}
   1516a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1516e:	602b      	str	r3, [r5, #0]
   15170:	b010      	add	sp, #64	; 0x40
   15172:	bd70      	pop	{r4, r5, r6, pc}

00015174 <__smakebuf_r>:
   15174:	898a      	ldrh	r2, [r1, #12]
   15176:	0792      	lsls	r2, r2, #30
   15178:	460b      	mov	r3, r1
   1517a:	d506      	bpl.n	1518a <__smakebuf_r+0x16>
   1517c:	f101 0243 	add.w	r2, r1, #67	; 0x43
   15180:	2101      	movs	r1, #1
   15182:	601a      	str	r2, [r3, #0]
   15184:	611a      	str	r2, [r3, #16]
   15186:	6159      	str	r1, [r3, #20]
   15188:	4770      	bx	lr
   1518a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1518c:	b083      	sub	sp, #12
   1518e:	ab01      	add	r3, sp, #4
   15190:	466a      	mov	r2, sp
   15192:	460c      	mov	r4, r1
   15194:	4606      	mov	r6, r0
   15196:	f7ff ffbf 	bl	15118 <__swhatbuf_r>
   1519a:	9900      	ldr	r1, [sp, #0]
   1519c:	4605      	mov	r5, r0
   1519e:	4630      	mov	r0, r6
   151a0:	f000 f842 	bl	15228 <_malloc_r>
   151a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   151a8:	b1d8      	cbz	r0, 151e2 <__smakebuf_r+0x6e>
   151aa:	9a01      	ldr	r2, [sp, #4]
   151ac:	4f15      	ldr	r7, [pc, #84]	; (15204 <__smakebuf_r+0x90>)
   151ae:	9900      	ldr	r1, [sp, #0]
   151b0:	63f7      	str	r7, [r6, #60]	; 0x3c
   151b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   151b6:	81a3      	strh	r3, [r4, #12]
   151b8:	6020      	str	r0, [r4, #0]
   151ba:	6120      	str	r0, [r4, #16]
   151bc:	6161      	str	r1, [r4, #20]
   151be:	b91a      	cbnz	r2, 151c8 <__smakebuf_r+0x54>
   151c0:	432b      	orrs	r3, r5
   151c2:	81a3      	strh	r3, [r4, #12]
   151c4:	b003      	add	sp, #12
   151c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   151c8:	4630      	mov	r0, r6
   151ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   151ce:	f006 fc23 	bl	1ba18 <_isatty_r>
   151d2:	b1a0      	cbz	r0, 151fe <__smakebuf_r+0x8a>
   151d4:	89a3      	ldrh	r3, [r4, #12]
   151d6:	f023 0303 	bic.w	r3, r3, #3
   151da:	f043 0301 	orr.w	r3, r3, #1
   151de:	b21b      	sxth	r3, r3
   151e0:	e7ee      	b.n	151c0 <__smakebuf_r+0x4c>
   151e2:	059a      	lsls	r2, r3, #22
   151e4:	d4ee      	bmi.n	151c4 <__smakebuf_r+0x50>
   151e6:	f023 0303 	bic.w	r3, r3, #3
   151ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
   151ee:	f043 0302 	orr.w	r3, r3, #2
   151f2:	2101      	movs	r1, #1
   151f4:	81a3      	strh	r3, [r4, #12]
   151f6:	6022      	str	r2, [r4, #0]
   151f8:	6122      	str	r2, [r4, #16]
   151fa:	6161      	str	r1, [r4, #20]
   151fc:	e7e2      	b.n	151c4 <__smakebuf_r+0x50>
   151fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   15202:	e7dd      	b.n	151c0 <__smakebuf_r+0x4c>
   15204:	0001b551 	.word	0x0001b551

00015208 <malloc>:
   15208:	4b02      	ldr	r3, [pc, #8]	; (15214 <malloc+0xc>)
   1520a:	4601      	mov	r1, r0
   1520c:	6818      	ldr	r0, [r3, #0]
   1520e:	f000 b80b 	b.w	15228 <_malloc_r>
   15212:	bf00      	nop
   15214:	20000020 	.word	0x20000020

00015218 <free>:
   15218:	4b02      	ldr	r3, [pc, #8]	; (15224 <free+0xc>)
   1521a:	4601      	mov	r1, r0
   1521c:	6818      	ldr	r0, [r3, #0]
   1521e:	f006 baeb 	b.w	1b7f8 <_free_r>
   15222:	bf00      	nop
   15224:	20000020 	.word	0x20000020

00015228 <_malloc_r>:
   15228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1522c:	f101 060b 	add.w	r6, r1, #11
   15230:	2e16      	cmp	r6, #22
   15232:	b083      	sub	sp, #12
   15234:	4605      	mov	r5, r0
   15236:	f240 809e 	bls.w	15376 <_malloc_r+0x14e>
   1523a:	f036 0607 	bics.w	r6, r6, #7
   1523e:	f100 80bd 	bmi.w	153bc <_malloc_r+0x194>
   15242:	42b1      	cmp	r1, r6
   15244:	f200 80ba 	bhi.w	153bc <_malloc_r+0x194>
   15248:	f000 fc86 	bl	15b58 <__malloc_lock>
   1524c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   15250:	f0c0 8293 	bcc.w	1577a <_malloc_r+0x552>
   15254:	0a73      	lsrs	r3, r6, #9
   15256:	f000 80b8 	beq.w	153ca <_malloc_r+0x1a2>
   1525a:	2b04      	cmp	r3, #4
   1525c:	f200 8179 	bhi.w	15552 <_malloc_r+0x32a>
   15260:	09b3      	lsrs	r3, r6, #6
   15262:	f103 0039 	add.w	r0, r3, #57	; 0x39
   15266:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   1526a:	00c3      	lsls	r3, r0, #3
   1526c:	4fbf      	ldr	r7, [pc, #764]	; (1556c <_malloc_r+0x344>)
   1526e:	443b      	add	r3, r7
   15270:	f1a3 0108 	sub.w	r1, r3, #8
   15274:	685c      	ldr	r4, [r3, #4]
   15276:	42a1      	cmp	r1, r4
   15278:	d106      	bne.n	15288 <_malloc_r+0x60>
   1527a:	e00c      	b.n	15296 <_malloc_r+0x6e>
   1527c:	2a00      	cmp	r2, #0
   1527e:	f280 80aa 	bge.w	153d6 <_malloc_r+0x1ae>
   15282:	68e4      	ldr	r4, [r4, #12]
   15284:	42a1      	cmp	r1, r4
   15286:	d006      	beq.n	15296 <_malloc_r+0x6e>
   15288:	6863      	ldr	r3, [r4, #4]
   1528a:	f023 0303 	bic.w	r3, r3, #3
   1528e:	1b9a      	subs	r2, r3, r6
   15290:	2a0f      	cmp	r2, #15
   15292:	ddf3      	ble.n	1527c <_malloc_r+0x54>
   15294:	4670      	mov	r0, lr
   15296:	693c      	ldr	r4, [r7, #16]
   15298:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 15580 <_malloc_r+0x358>
   1529c:	4574      	cmp	r4, lr
   1529e:	f000 81ab 	beq.w	155f8 <_malloc_r+0x3d0>
   152a2:	6863      	ldr	r3, [r4, #4]
   152a4:	f023 0303 	bic.w	r3, r3, #3
   152a8:	1b9a      	subs	r2, r3, r6
   152aa:	2a0f      	cmp	r2, #15
   152ac:	f300 8190 	bgt.w	155d0 <_malloc_r+0x3a8>
   152b0:	2a00      	cmp	r2, #0
   152b2:	f8c7 e014 	str.w	lr, [r7, #20]
   152b6:	f8c7 e010 	str.w	lr, [r7, #16]
   152ba:	f280 809d 	bge.w	153f8 <_malloc_r+0x1d0>
   152be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   152c2:	f080 8161 	bcs.w	15588 <_malloc_r+0x360>
   152c6:	08db      	lsrs	r3, r3, #3
   152c8:	f103 0c01 	add.w	ip, r3, #1
   152cc:	1099      	asrs	r1, r3, #2
   152ce:	687a      	ldr	r2, [r7, #4]
   152d0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   152d4:	f8c4 8008 	str.w	r8, [r4, #8]
   152d8:	2301      	movs	r3, #1
   152da:	408b      	lsls	r3, r1
   152dc:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   152e0:	4313      	orrs	r3, r2
   152e2:	3908      	subs	r1, #8
   152e4:	60e1      	str	r1, [r4, #12]
   152e6:	607b      	str	r3, [r7, #4]
   152e8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   152ec:	f8c8 400c 	str.w	r4, [r8, #12]
   152f0:	1082      	asrs	r2, r0, #2
   152f2:	2401      	movs	r4, #1
   152f4:	4094      	lsls	r4, r2
   152f6:	429c      	cmp	r4, r3
   152f8:	f200 808b 	bhi.w	15412 <_malloc_r+0x1ea>
   152fc:	421c      	tst	r4, r3
   152fe:	d106      	bne.n	1530e <_malloc_r+0xe6>
   15300:	f020 0003 	bic.w	r0, r0, #3
   15304:	0064      	lsls	r4, r4, #1
   15306:	421c      	tst	r4, r3
   15308:	f100 0004 	add.w	r0, r0, #4
   1530c:	d0fa      	beq.n	15304 <_malloc_r+0xdc>
   1530e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   15312:	46cc      	mov	ip, r9
   15314:	4680      	mov	r8, r0
   15316:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1531a:	459c      	cmp	ip, r3
   1531c:	d107      	bne.n	1532e <_malloc_r+0x106>
   1531e:	e16d      	b.n	155fc <_malloc_r+0x3d4>
   15320:	2a00      	cmp	r2, #0
   15322:	f280 817b 	bge.w	1561c <_malloc_r+0x3f4>
   15326:	68db      	ldr	r3, [r3, #12]
   15328:	459c      	cmp	ip, r3
   1532a:	f000 8167 	beq.w	155fc <_malloc_r+0x3d4>
   1532e:	6859      	ldr	r1, [r3, #4]
   15330:	f021 0103 	bic.w	r1, r1, #3
   15334:	1b8a      	subs	r2, r1, r6
   15336:	2a0f      	cmp	r2, #15
   15338:	ddf2      	ble.n	15320 <_malloc_r+0xf8>
   1533a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   1533e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   15342:	9300      	str	r3, [sp, #0]
   15344:	199c      	adds	r4, r3, r6
   15346:	4628      	mov	r0, r5
   15348:	f046 0601 	orr.w	r6, r6, #1
   1534c:	f042 0501 	orr.w	r5, r2, #1
   15350:	605e      	str	r6, [r3, #4]
   15352:	f8c8 c00c 	str.w	ip, [r8, #12]
   15356:	f8cc 8008 	str.w	r8, [ip, #8]
   1535a:	617c      	str	r4, [r7, #20]
   1535c:	613c      	str	r4, [r7, #16]
   1535e:	f8c4 e00c 	str.w	lr, [r4, #12]
   15362:	f8c4 e008 	str.w	lr, [r4, #8]
   15366:	6065      	str	r5, [r4, #4]
   15368:	505a      	str	r2, [r3, r1]
   1536a:	f000 fbfb 	bl	15b64 <__malloc_unlock>
   1536e:	9b00      	ldr	r3, [sp, #0]
   15370:	f103 0408 	add.w	r4, r3, #8
   15374:	e01e      	b.n	153b4 <_malloc_r+0x18c>
   15376:	2910      	cmp	r1, #16
   15378:	d820      	bhi.n	153bc <_malloc_r+0x194>
   1537a:	f000 fbed 	bl	15b58 <__malloc_lock>
   1537e:	2610      	movs	r6, #16
   15380:	2318      	movs	r3, #24
   15382:	2002      	movs	r0, #2
   15384:	4f79      	ldr	r7, [pc, #484]	; (1556c <_malloc_r+0x344>)
   15386:	443b      	add	r3, r7
   15388:	f1a3 0208 	sub.w	r2, r3, #8
   1538c:	685c      	ldr	r4, [r3, #4]
   1538e:	4294      	cmp	r4, r2
   15390:	f000 813d 	beq.w	1560e <_malloc_r+0x3e6>
   15394:	6863      	ldr	r3, [r4, #4]
   15396:	68e1      	ldr	r1, [r4, #12]
   15398:	68a6      	ldr	r6, [r4, #8]
   1539a:	f023 0303 	bic.w	r3, r3, #3
   1539e:	4423      	add	r3, r4
   153a0:	4628      	mov	r0, r5
   153a2:	685a      	ldr	r2, [r3, #4]
   153a4:	60f1      	str	r1, [r6, #12]
   153a6:	f042 0201 	orr.w	r2, r2, #1
   153aa:	608e      	str	r6, [r1, #8]
   153ac:	605a      	str	r2, [r3, #4]
   153ae:	f000 fbd9 	bl	15b64 <__malloc_unlock>
   153b2:	3408      	adds	r4, #8
   153b4:	4620      	mov	r0, r4
   153b6:	b003      	add	sp, #12
   153b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153bc:	2400      	movs	r4, #0
   153be:	230c      	movs	r3, #12
   153c0:	4620      	mov	r0, r4
   153c2:	602b      	str	r3, [r5, #0]
   153c4:	b003      	add	sp, #12
   153c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153ca:	2040      	movs	r0, #64	; 0x40
   153cc:	f44f 7300 	mov.w	r3, #512	; 0x200
   153d0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   153d4:	e74a      	b.n	1526c <_malloc_r+0x44>
   153d6:	4423      	add	r3, r4
   153d8:	68e1      	ldr	r1, [r4, #12]
   153da:	685a      	ldr	r2, [r3, #4]
   153dc:	68a6      	ldr	r6, [r4, #8]
   153de:	f042 0201 	orr.w	r2, r2, #1
   153e2:	60f1      	str	r1, [r6, #12]
   153e4:	4628      	mov	r0, r5
   153e6:	608e      	str	r6, [r1, #8]
   153e8:	605a      	str	r2, [r3, #4]
   153ea:	f000 fbbb 	bl	15b64 <__malloc_unlock>
   153ee:	3408      	adds	r4, #8
   153f0:	4620      	mov	r0, r4
   153f2:	b003      	add	sp, #12
   153f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153f8:	4423      	add	r3, r4
   153fa:	4628      	mov	r0, r5
   153fc:	685a      	ldr	r2, [r3, #4]
   153fe:	f042 0201 	orr.w	r2, r2, #1
   15402:	605a      	str	r2, [r3, #4]
   15404:	f000 fbae 	bl	15b64 <__malloc_unlock>
   15408:	3408      	adds	r4, #8
   1540a:	4620      	mov	r0, r4
   1540c:	b003      	add	sp, #12
   1540e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15412:	68bc      	ldr	r4, [r7, #8]
   15414:	6863      	ldr	r3, [r4, #4]
   15416:	f023 0803 	bic.w	r8, r3, #3
   1541a:	45b0      	cmp	r8, r6
   1541c:	d304      	bcc.n	15428 <_malloc_r+0x200>
   1541e:	eba8 0306 	sub.w	r3, r8, r6
   15422:	2b0f      	cmp	r3, #15
   15424:	f300 8085 	bgt.w	15532 <_malloc_r+0x30a>
   15428:	f8df 9158 	ldr.w	r9, [pc, #344]	; 15584 <_malloc_r+0x35c>
   1542c:	4b50      	ldr	r3, [pc, #320]	; (15570 <_malloc_r+0x348>)
   1542e:	f8d9 2000 	ldr.w	r2, [r9]
   15432:	681b      	ldr	r3, [r3, #0]
   15434:	3201      	adds	r2, #1
   15436:	4433      	add	r3, r6
   15438:	eb04 0a08 	add.w	sl, r4, r8
   1543c:	f000 8155 	beq.w	156ea <_malloc_r+0x4c2>
   15440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   15444:	330f      	adds	r3, #15
   15446:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   1544a:	f02b 0b0f 	bic.w	fp, fp, #15
   1544e:	4659      	mov	r1, fp
   15450:	4628      	mov	r0, r5
   15452:	f000 fd87 	bl	15f64 <_sbrk_r>
   15456:	1c41      	adds	r1, r0, #1
   15458:	4602      	mov	r2, r0
   1545a:	f000 80fc 	beq.w	15656 <_malloc_r+0x42e>
   1545e:	4582      	cmp	sl, r0
   15460:	f200 80f7 	bhi.w	15652 <_malloc_r+0x42a>
   15464:	4b43      	ldr	r3, [pc, #268]	; (15574 <_malloc_r+0x34c>)
   15466:	6819      	ldr	r1, [r3, #0]
   15468:	4459      	add	r1, fp
   1546a:	6019      	str	r1, [r3, #0]
   1546c:	f000 814d 	beq.w	1570a <_malloc_r+0x4e2>
   15470:	f8d9 0000 	ldr.w	r0, [r9]
   15474:	3001      	adds	r0, #1
   15476:	bf1b      	ittet	ne
   15478:	eba2 0a0a 	subne.w	sl, r2, sl
   1547c:	4451      	addne	r1, sl
   1547e:	f8c9 2000 	streq.w	r2, [r9]
   15482:	6019      	strne	r1, [r3, #0]
   15484:	f012 0107 	ands.w	r1, r2, #7
   15488:	f000 8115 	beq.w	156b6 <_malloc_r+0x48e>
   1548c:	f1c1 0008 	rsb	r0, r1, #8
   15490:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   15494:	4402      	add	r2, r0
   15496:	3108      	adds	r1, #8
   15498:	eb02 090b 	add.w	r9, r2, fp
   1549c:	f3c9 090b 	ubfx	r9, r9, #0, #12
   154a0:	eba1 0909 	sub.w	r9, r1, r9
   154a4:	4649      	mov	r1, r9
   154a6:	4628      	mov	r0, r5
   154a8:	9301      	str	r3, [sp, #4]
   154aa:	9200      	str	r2, [sp, #0]
   154ac:	f000 fd5a 	bl	15f64 <_sbrk_r>
   154b0:	1c43      	adds	r3, r0, #1
   154b2:	e89d 000c 	ldmia.w	sp, {r2, r3}
   154b6:	f000 8143 	beq.w	15740 <_malloc_r+0x518>
   154ba:	1a80      	subs	r0, r0, r2
   154bc:	4448      	add	r0, r9
   154be:	f040 0001 	orr.w	r0, r0, #1
   154c2:	6819      	ldr	r1, [r3, #0]
   154c4:	60ba      	str	r2, [r7, #8]
   154c6:	4449      	add	r1, r9
   154c8:	42bc      	cmp	r4, r7
   154ca:	6050      	str	r0, [r2, #4]
   154cc:	6019      	str	r1, [r3, #0]
   154ce:	d017      	beq.n	15500 <_malloc_r+0x2d8>
   154d0:	f1b8 0f0f 	cmp.w	r8, #15
   154d4:	f240 80fb 	bls.w	156ce <_malloc_r+0x4a6>
   154d8:	6860      	ldr	r0, [r4, #4]
   154da:	f1a8 020c 	sub.w	r2, r8, #12
   154de:	f022 0207 	bic.w	r2, r2, #7
   154e2:	eb04 0e02 	add.w	lr, r4, r2
   154e6:	f000 0001 	and.w	r0, r0, #1
   154ea:	f04f 0c05 	mov.w	ip, #5
   154ee:	4310      	orrs	r0, r2
   154f0:	2a0f      	cmp	r2, #15
   154f2:	6060      	str	r0, [r4, #4]
   154f4:	f8ce c004 	str.w	ip, [lr, #4]
   154f8:	f8ce c008 	str.w	ip, [lr, #8]
   154fc:	f200 8117 	bhi.w	1572e <_malloc_r+0x506>
   15500:	4b1d      	ldr	r3, [pc, #116]	; (15578 <_malloc_r+0x350>)
   15502:	68bc      	ldr	r4, [r7, #8]
   15504:	681a      	ldr	r2, [r3, #0]
   15506:	4291      	cmp	r1, r2
   15508:	bf88      	it	hi
   1550a:	6019      	strhi	r1, [r3, #0]
   1550c:	4b1b      	ldr	r3, [pc, #108]	; (1557c <_malloc_r+0x354>)
   1550e:	681a      	ldr	r2, [r3, #0]
   15510:	4291      	cmp	r1, r2
   15512:	6862      	ldr	r2, [r4, #4]
   15514:	bf88      	it	hi
   15516:	6019      	strhi	r1, [r3, #0]
   15518:	f022 0203 	bic.w	r2, r2, #3
   1551c:	4296      	cmp	r6, r2
   1551e:	eba2 0306 	sub.w	r3, r2, r6
   15522:	d801      	bhi.n	15528 <_malloc_r+0x300>
   15524:	2b0f      	cmp	r3, #15
   15526:	dc04      	bgt.n	15532 <_malloc_r+0x30a>
   15528:	4628      	mov	r0, r5
   1552a:	f000 fb1b 	bl	15b64 <__malloc_unlock>
   1552e:	2400      	movs	r4, #0
   15530:	e740      	b.n	153b4 <_malloc_r+0x18c>
   15532:	19a2      	adds	r2, r4, r6
   15534:	f043 0301 	orr.w	r3, r3, #1
   15538:	f046 0601 	orr.w	r6, r6, #1
   1553c:	6066      	str	r6, [r4, #4]
   1553e:	4628      	mov	r0, r5
   15540:	60ba      	str	r2, [r7, #8]
   15542:	6053      	str	r3, [r2, #4]
   15544:	f000 fb0e 	bl	15b64 <__malloc_unlock>
   15548:	3408      	adds	r4, #8
   1554a:	4620      	mov	r0, r4
   1554c:	b003      	add	sp, #12
   1554e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15552:	2b14      	cmp	r3, #20
   15554:	d971      	bls.n	1563a <_malloc_r+0x412>
   15556:	2b54      	cmp	r3, #84	; 0x54
   15558:	f200 80a3 	bhi.w	156a2 <_malloc_r+0x47a>
   1555c:	0b33      	lsrs	r3, r6, #12
   1555e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   15562:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   15566:	00c3      	lsls	r3, r0, #3
   15568:	e680      	b.n	1526c <_malloc_r+0x44>
   1556a:	bf00      	nop
   1556c:	200005bc 	.word	0x200005bc
   15570:	2000fc64 	.word	0x2000fc64
   15574:	2000fc34 	.word	0x2000fc34
   15578:	2000fc5c 	.word	0x2000fc5c
   1557c:	2000fc60 	.word	0x2000fc60
   15580:	200005c4 	.word	0x200005c4
   15584:	200009c4 	.word	0x200009c4
   15588:	0a5a      	lsrs	r2, r3, #9
   1558a:	2a04      	cmp	r2, #4
   1558c:	d95b      	bls.n	15646 <_malloc_r+0x41e>
   1558e:	2a14      	cmp	r2, #20
   15590:	f200 80ae 	bhi.w	156f0 <_malloc_r+0x4c8>
   15594:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   15598:	00c9      	lsls	r1, r1, #3
   1559a:	325b      	adds	r2, #91	; 0x5b
   1559c:	eb07 0c01 	add.w	ip, r7, r1
   155a0:	5879      	ldr	r1, [r7, r1]
   155a2:	f1ac 0c08 	sub.w	ip, ip, #8
   155a6:	458c      	cmp	ip, r1
   155a8:	f000 8088 	beq.w	156bc <_malloc_r+0x494>
   155ac:	684a      	ldr	r2, [r1, #4]
   155ae:	f022 0203 	bic.w	r2, r2, #3
   155b2:	4293      	cmp	r3, r2
   155b4:	d273      	bcs.n	1569e <_malloc_r+0x476>
   155b6:	6889      	ldr	r1, [r1, #8]
   155b8:	458c      	cmp	ip, r1
   155ba:	d1f7      	bne.n	155ac <_malloc_r+0x384>
   155bc:	f8dc 200c 	ldr.w	r2, [ip, #12]
   155c0:	687b      	ldr	r3, [r7, #4]
   155c2:	60e2      	str	r2, [r4, #12]
   155c4:	f8c4 c008 	str.w	ip, [r4, #8]
   155c8:	6094      	str	r4, [r2, #8]
   155ca:	f8cc 400c 	str.w	r4, [ip, #12]
   155ce:	e68f      	b.n	152f0 <_malloc_r+0xc8>
   155d0:	19a1      	adds	r1, r4, r6
   155d2:	f046 0c01 	orr.w	ip, r6, #1
   155d6:	f042 0601 	orr.w	r6, r2, #1
   155da:	f8c4 c004 	str.w	ip, [r4, #4]
   155de:	4628      	mov	r0, r5
   155e0:	6179      	str	r1, [r7, #20]
   155e2:	6139      	str	r1, [r7, #16]
   155e4:	f8c1 e00c 	str.w	lr, [r1, #12]
   155e8:	f8c1 e008 	str.w	lr, [r1, #8]
   155ec:	604e      	str	r6, [r1, #4]
   155ee:	50e2      	str	r2, [r4, r3]
   155f0:	f000 fab8 	bl	15b64 <__malloc_unlock>
   155f4:	3408      	adds	r4, #8
   155f6:	e6dd      	b.n	153b4 <_malloc_r+0x18c>
   155f8:	687b      	ldr	r3, [r7, #4]
   155fa:	e679      	b.n	152f0 <_malloc_r+0xc8>
   155fc:	f108 0801 	add.w	r8, r8, #1
   15600:	f018 0f03 	tst.w	r8, #3
   15604:	f10c 0c08 	add.w	ip, ip, #8
   15608:	f47f ae85 	bne.w	15316 <_malloc_r+0xee>
   1560c:	e02d      	b.n	1566a <_malloc_r+0x442>
   1560e:	68dc      	ldr	r4, [r3, #12]
   15610:	42a3      	cmp	r3, r4
   15612:	bf08      	it	eq
   15614:	3002      	addeq	r0, #2
   15616:	f43f ae3e 	beq.w	15296 <_malloc_r+0x6e>
   1561a:	e6bb      	b.n	15394 <_malloc_r+0x16c>
   1561c:	4419      	add	r1, r3
   1561e:	461c      	mov	r4, r3
   15620:	684a      	ldr	r2, [r1, #4]
   15622:	68db      	ldr	r3, [r3, #12]
   15624:	f854 6f08 	ldr.w	r6, [r4, #8]!
   15628:	f042 0201 	orr.w	r2, r2, #1
   1562c:	604a      	str	r2, [r1, #4]
   1562e:	4628      	mov	r0, r5
   15630:	60f3      	str	r3, [r6, #12]
   15632:	609e      	str	r6, [r3, #8]
   15634:	f000 fa96 	bl	15b64 <__malloc_unlock>
   15638:	e6bc      	b.n	153b4 <_malloc_r+0x18c>
   1563a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1563e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   15642:	00c3      	lsls	r3, r0, #3
   15644:	e612      	b.n	1526c <_malloc_r+0x44>
   15646:	099a      	lsrs	r2, r3, #6
   15648:	f102 0139 	add.w	r1, r2, #57	; 0x39
   1564c:	00c9      	lsls	r1, r1, #3
   1564e:	3238      	adds	r2, #56	; 0x38
   15650:	e7a4      	b.n	1559c <_malloc_r+0x374>
   15652:	42bc      	cmp	r4, r7
   15654:	d054      	beq.n	15700 <_malloc_r+0x4d8>
   15656:	68bc      	ldr	r4, [r7, #8]
   15658:	6862      	ldr	r2, [r4, #4]
   1565a:	f022 0203 	bic.w	r2, r2, #3
   1565e:	e75d      	b.n	1551c <_malloc_r+0x2f4>
   15660:	f859 3908 	ldr.w	r3, [r9], #-8
   15664:	4599      	cmp	r9, r3
   15666:	f040 8086 	bne.w	15776 <_malloc_r+0x54e>
   1566a:	f010 0f03 	tst.w	r0, #3
   1566e:	f100 30ff 	add.w	r0, r0, #4294967295
   15672:	d1f5      	bne.n	15660 <_malloc_r+0x438>
   15674:	687b      	ldr	r3, [r7, #4]
   15676:	ea23 0304 	bic.w	r3, r3, r4
   1567a:	607b      	str	r3, [r7, #4]
   1567c:	0064      	lsls	r4, r4, #1
   1567e:	429c      	cmp	r4, r3
   15680:	f63f aec7 	bhi.w	15412 <_malloc_r+0x1ea>
   15684:	2c00      	cmp	r4, #0
   15686:	f43f aec4 	beq.w	15412 <_malloc_r+0x1ea>
   1568a:	421c      	tst	r4, r3
   1568c:	4640      	mov	r0, r8
   1568e:	f47f ae3e 	bne.w	1530e <_malloc_r+0xe6>
   15692:	0064      	lsls	r4, r4, #1
   15694:	421c      	tst	r4, r3
   15696:	f100 0004 	add.w	r0, r0, #4
   1569a:	d0fa      	beq.n	15692 <_malloc_r+0x46a>
   1569c:	e637      	b.n	1530e <_malloc_r+0xe6>
   1569e:	468c      	mov	ip, r1
   156a0:	e78c      	b.n	155bc <_malloc_r+0x394>
   156a2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   156a6:	d815      	bhi.n	156d4 <_malloc_r+0x4ac>
   156a8:	0bf3      	lsrs	r3, r6, #15
   156aa:	f103 0078 	add.w	r0, r3, #120	; 0x78
   156ae:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   156b2:	00c3      	lsls	r3, r0, #3
   156b4:	e5da      	b.n	1526c <_malloc_r+0x44>
   156b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   156ba:	e6ed      	b.n	15498 <_malloc_r+0x270>
   156bc:	687b      	ldr	r3, [r7, #4]
   156be:	1092      	asrs	r2, r2, #2
   156c0:	2101      	movs	r1, #1
   156c2:	fa01 f202 	lsl.w	r2, r1, r2
   156c6:	4313      	orrs	r3, r2
   156c8:	607b      	str	r3, [r7, #4]
   156ca:	4662      	mov	r2, ip
   156cc:	e779      	b.n	155c2 <_malloc_r+0x39a>
   156ce:	2301      	movs	r3, #1
   156d0:	6053      	str	r3, [r2, #4]
   156d2:	e729      	b.n	15528 <_malloc_r+0x300>
   156d4:	f240 5254 	movw	r2, #1364	; 0x554
   156d8:	4293      	cmp	r3, r2
   156da:	d822      	bhi.n	15722 <_malloc_r+0x4fa>
   156dc:	0cb3      	lsrs	r3, r6, #18
   156de:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   156e2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   156e6:	00c3      	lsls	r3, r0, #3
   156e8:	e5c0      	b.n	1526c <_malloc_r+0x44>
   156ea:	f103 0b10 	add.w	fp, r3, #16
   156ee:	e6ae      	b.n	1544e <_malloc_r+0x226>
   156f0:	2a54      	cmp	r2, #84	; 0x54
   156f2:	d829      	bhi.n	15748 <_malloc_r+0x520>
   156f4:	0b1a      	lsrs	r2, r3, #12
   156f6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   156fa:	00c9      	lsls	r1, r1, #3
   156fc:	326e      	adds	r2, #110	; 0x6e
   156fe:	e74d      	b.n	1559c <_malloc_r+0x374>
   15700:	4b20      	ldr	r3, [pc, #128]	; (15784 <_malloc_r+0x55c>)
   15702:	6819      	ldr	r1, [r3, #0]
   15704:	4459      	add	r1, fp
   15706:	6019      	str	r1, [r3, #0]
   15708:	e6b2      	b.n	15470 <_malloc_r+0x248>
   1570a:	f3ca 000b 	ubfx	r0, sl, #0, #12
   1570e:	2800      	cmp	r0, #0
   15710:	f47f aeae 	bne.w	15470 <_malloc_r+0x248>
   15714:	eb08 030b 	add.w	r3, r8, fp
   15718:	68ba      	ldr	r2, [r7, #8]
   1571a:	f043 0301 	orr.w	r3, r3, #1
   1571e:	6053      	str	r3, [r2, #4]
   15720:	e6ee      	b.n	15500 <_malloc_r+0x2d8>
   15722:	207f      	movs	r0, #127	; 0x7f
   15724:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   15728:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   1572c:	e59e      	b.n	1526c <_malloc_r+0x44>
   1572e:	f104 0108 	add.w	r1, r4, #8
   15732:	4628      	mov	r0, r5
   15734:	9300      	str	r3, [sp, #0]
   15736:	f006 f85f 	bl	1b7f8 <_free_r>
   1573a:	9b00      	ldr	r3, [sp, #0]
   1573c:	6819      	ldr	r1, [r3, #0]
   1573e:	e6df      	b.n	15500 <_malloc_r+0x2d8>
   15740:	2001      	movs	r0, #1
   15742:	f04f 0900 	mov.w	r9, #0
   15746:	e6bc      	b.n	154c2 <_malloc_r+0x29a>
   15748:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1574c:	d805      	bhi.n	1575a <_malloc_r+0x532>
   1574e:	0bda      	lsrs	r2, r3, #15
   15750:	f102 0178 	add.w	r1, r2, #120	; 0x78
   15754:	00c9      	lsls	r1, r1, #3
   15756:	3277      	adds	r2, #119	; 0x77
   15758:	e720      	b.n	1559c <_malloc_r+0x374>
   1575a:	f240 5154 	movw	r1, #1364	; 0x554
   1575e:	428a      	cmp	r2, r1
   15760:	d805      	bhi.n	1576e <_malloc_r+0x546>
   15762:	0c9a      	lsrs	r2, r3, #18
   15764:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   15768:	00c9      	lsls	r1, r1, #3
   1576a:	327c      	adds	r2, #124	; 0x7c
   1576c:	e716      	b.n	1559c <_malloc_r+0x374>
   1576e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   15772:	227e      	movs	r2, #126	; 0x7e
   15774:	e712      	b.n	1559c <_malloc_r+0x374>
   15776:	687b      	ldr	r3, [r7, #4]
   15778:	e780      	b.n	1567c <_malloc_r+0x454>
   1577a:	08f0      	lsrs	r0, r6, #3
   1577c:	f106 0308 	add.w	r3, r6, #8
   15780:	e600      	b.n	15384 <_malloc_r+0x15c>
   15782:	bf00      	nop
   15784:	2000fc34 	.word	0x2000fc34

00015788 <__ascii_mbtowc>:
   15788:	b082      	sub	sp, #8
   1578a:	b149      	cbz	r1, 157a0 <__ascii_mbtowc+0x18>
   1578c:	b15a      	cbz	r2, 157a6 <__ascii_mbtowc+0x1e>
   1578e:	b16b      	cbz	r3, 157ac <__ascii_mbtowc+0x24>
   15790:	7813      	ldrb	r3, [r2, #0]
   15792:	600b      	str	r3, [r1, #0]
   15794:	7812      	ldrb	r2, [r2, #0]
   15796:	1c10      	adds	r0, r2, #0
   15798:	bf18      	it	ne
   1579a:	2001      	movne	r0, #1
   1579c:	b002      	add	sp, #8
   1579e:	4770      	bx	lr
   157a0:	a901      	add	r1, sp, #4
   157a2:	2a00      	cmp	r2, #0
   157a4:	d1f3      	bne.n	1578e <__ascii_mbtowc+0x6>
   157a6:	4610      	mov	r0, r2
   157a8:	b002      	add	sp, #8
   157aa:	4770      	bx	lr
   157ac:	f06f 0001 	mvn.w	r0, #1
   157b0:	e7f4      	b.n	1579c <__ascii_mbtowc+0x14>
   157b2:	bf00      	nop
	...

000157c0 <memchr>:
   157c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   157c4:	2a10      	cmp	r2, #16
   157c6:	db2b      	blt.n	15820 <memchr+0x60>
   157c8:	f010 0f07 	tst.w	r0, #7
   157cc:	d008      	beq.n	157e0 <memchr+0x20>
   157ce:	f810 3b01 	ldrb.w	r3, [r0], #1
   157d2:	3a01      	subs	r2, #1
   157d4:	428b      	cmp	r3, r1
   157d6:	d02d      	beq.n	15834 <memchr+0x74>
   157d8:	f010 0f07 	tst.w	r0, #7
   157dc:	b342      	cbz	r2, 15830 <memchr+0x70>
   157de:	d1f6      	bne.n	157ce <memchr+0xe>
   157e0:	b4f0      	push	{r4, r5, r6, r7}
   157e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   157e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   157ea:	f022 0407 	bic.w	r4, r2, #7
   157ee:	f07f 0700 	mvns.w	r7, #0
   157f2:	2300      	movs	r3, #0
   157f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   157f8:	3c08      	subs	r4, #8
   157fa:	ea85 0501 	eor.w	r5, r5, r1
   157fe:	ea86 0601 	eor.w	r6, r6, r1
   15802:	fa85 f547 	uadd8	r5, r5, r7
   15806:	faa3 f587 	sel	r5, r3, r7
   1580a:	fa86 f647 	uadd8	r6, r6, r7
   1580e:	faa5 f687 	sel	r6, r5, r7
   15812:	b98e      	cbnz	r6, 15838 <memchr+0x78>
   15814:	d1ee      	bne.n	157f4 <memchr+0x34>
   15816:	bcf0      	pop	{r4, r5, r6, r7}
   15818:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1581c:	f002 0207 	and.w	r2, r2, #7
   15820:	b132      	cbz	r2, 15830 <memchr+0x70>
   15822:	f810 3b01 	ldrb.w	r3, [r0], #1
   15826:	3a01      	subs	r2, #1
   15828:	ea83 0301 	eor.w	r3, r3, r1
   1582c:	b113      	cbz	r3, 15834 <memchr+0x74>
   1582e:	d1f8      	bne.n	15822 <memchr+0x62>
   15830:	2000      	movs	r0, #0
   15832:	4770      	bx	lr
   15834:	3801      	subs	r0, #1
   15836:	4770      	bx	lr
   15838:	2d00      	cmp	r5, #0
   1583a:	bf06      	itte	eq
   1583c:	4635      	moveq	r5, r6
   1583e:	3803      	subeq	r0, #3
   15840:	3807      	subne	r0, #7
   15842:	f015 0f01 	tst.w	r5, #1
   15846:	d107      	bne.n	15858 <memchr+0x98>
   15848:	3001      	adds	r0, #1
   1584a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1584e:	bf02      	ittt	eq
   15850:	3001      	addeq	r0, #1
   15852:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   15856:	3001      	addeq	r0, #1
   15858:	bcf0      	pop	{r4, r5, r6, r7}
   1585a:	3801      	subs	r0, #1
   1585c:	4770      	bx	lr
   1585e:	bf00      	nop

00015860 <memcmp>:
   15860:	2a03      	cmp	r2, #3
   15862:	b470      	push	{r4, r5, r6}
   15864:	d922      	bls.n	158ac <memcmp+0x4c>
   15866:	ea40 0301 	orr.w	r3, r0, r1
   1586a:	079b      	lsls	r3, r3, #30
   1586c:	d011      	beq.n	15892 <memcmp+0x32>
   1586e:	7803      	ldrb	r3, [r0, #0]
   15870:	780c      	ldrb	r4, [r1, #0]
   15872:	42a3      	cmp	r3, r4
   15874:	d11d      	bne.n	158b2 <memcmp+0x52>
   15876:	440a      	add	r2, r1
   15878:	3101      	adds	r1, #1
   1587a:	e005      	b.n	15888 <memcmp+0x28>
   1587c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   15880:	f811 4b01 	ldrb.w	r4, [r1], #1
   15884:	42a3      	cmp	r3, r4
   15886:	d114      	bne.n	158b2 <memcmp+0x52>
   15888:	4291      	cmp	r1, r2
   1588a:	d1f7      	bne.n	1587c <memcmp+0x1c>
   1588c:	2000      	movs	r0, #0
   1588e:	bc70      	pop	{r4, r5, r6}
   15890:	4770      	bx	lr
   15892:	680d      	ldr	r5, [r1, #0]
   15894:	6806      	ldr	r6, [r0, #0]
   15896:	42ae      	cmp	r6, r5
   15898:	460c      	mov	r4, r1
   1589a:	4603      	mov	r3, r0
   1589c:	f101 0104 	add.w	r1, r1, #4
   158a0:	f100 0004 	add.w	r0, r0, #4
   158a4:	d108      	bne.n	158b8 <memcmp+0x58>
   158a6:	3a04      	subs	r2, #4
   158a8:	2a03      	cmp	r2, #3
   158aa:	d8f2      	bhi.n	15892 <memcmp+0x32>
   158ac:	2a00      	cmp	r2, #0
   158ae:	d1de      	bne.n	1586e <memcmp+0xe>
   158b0:	e7ec      	b.n	1588c <memcmp+0x2c>
   158b2:	1b18      	subs	r0, r3, r4
   158b4:	bc70      	pop	{r4, r5, r6}
   158b6:	4770      	bx	lr
   158b8:	4621      	mov	r1, r4
   158ba:	4618      	mov	r0, r3
   158bc:	e7d7      	b.n	1586e <memcmp+0xe>
   158be:	bf00      	nop

000158c0 <memcpy>:
   158c0:	4684      	mov	ip, r0
   158c2:	ea41 0300 	orr.w	r3, r1, r0
   158c6:	f013 0303 	ands.w	r3, r3, #3
   158ca:	d16d      	bne.n	159a8 <memcpy+0xe8>
   158cc:	3a40      	subs	r2, #64	; 0x40
   158ce:	d341      	bcc.n	15954 <memcpy+0x94>
   158d0:	f851 3b04 	ldr.w	r3, [r1], #4
   158d4:	f840 3b04 	str.w	r3, [r0], #4
   158d8:	f851 3b04 	ldr.w	r3, [r1], #4
   158dc:	f840 3b04 	str.w	r3, [r0], #4
   158e0:	f851 3b04 	ldr.w	r3, [r1], #4
   158e4:	f840 3b04 	str.w	r3, [r0], #4
   158e8:	f851 3b04 	ldr.w	r3, [r1], #4
   158ec:	f840 3b04 	str.w	r3, [r0], #4
   158f0:	f851 3b04 	ldr.w	r3, [r1], #4
   158f4:	f840 3b04 	str.w	r3, [r0], #4
   158f8:	f851 3b04 	ldr.w	r3, [r1], #4
   158fc:	f840 3b04 	str.w	r3, [r0], #4
   15900:	f851 3b04 	ldr.w	r3, [r1], #4
   15904:	f840 3b04 	str.w	r3, [r0], #4
   15908:	f851 3b04 	ldr.w	r3, [r1], #4
   1590c:	f840 3b04 	str.w	r3, [r0], #4
   15910:	f851 3b04 	ldr.w	r3, [r1], #4
   15914:	f840 3b04 	str.w	r3, [r0], #4
   15918:	f851 3b04 	ldr.w	r3, [r1], #4
   1591c:	f840 3b04 	str.w	r3, [r0], #4
   15920:	f851 3b04 	ldr.w	r3, [r1], #4
   15924:	f840 3b04 	str.w	r3, [r0], #4
   15928:	f851 3b04 	ldr.w	r3, [r1], #4
   1592c:	f840 3b04 	str.w	r3, [r0], #4
   15930:	f851 3b04 	ldr.w	r3, [r1], #4
   15934:	f840 3b04 	str.w	r3, [r0], #4
   15938:	f851 3b04 	ldr.w	r3, [r1], #4
   1593c:	f840 3b04 	str.w	r3, [r0], #4
   15940:	f851 3b04 	ldr.w	r3, [r1], #4
   15944:	f840 3b04 	str.w	r3, [r0], #4
   15948:	f851 3b04 	ldr.w	r3, [r1], #4
   1594c:	f840 3b04 	str.w	r3, [r0], #4
   15950:	3a40      	subs	r2, #64	; 0x40
   15952:	d2bd      	bcs.n	158d0 <memcpy+0x10>
   15954:	3230      	adds	r2, #48	; 0x30
   15956:	d311      	bcc.n	1597c <memcpy+0xbc>
   15958:	f851 3b04 	ldr.w	r3, [r1], #4
   1595c:	f840 3b04 	str.w	r3, [r0], #4
   15960:	f851 3b04 	ldr.w	r3, [r1], #4
   15964:	f840 3b04 	str.w	r3, [r0], #4
   15968:	f851 3b04 	ldr.w	r3, [r1], #4
   1596c:	f840 3b04 	str.w	r3, [r0], #4
   15970:	f851 3b04 	ldr.w	r3, [r1], #4
   15974:	f840 3b04 	str.w	r3, [r0], #4
   15978:	3a10      	subs	r2, #16
   1597a:	d2ed      	bcs.n	15958 <memcpy+0x98>
   1597c:	320c      	adds	r2, #12
   1597e:	d305      	bcc.n	1598c <memcpy+0xcc>
   15980:	f851 3b04 	ldr.w	r3, [r1], #4
   15984:	f840 3b04 	str.w	r3, [r0], #4
   15988:	3a04      	subs	r2, #4
   1598a:	d2f9      	bcs.n	15980 <memcpy+0xc0>
   1598c:	3204      	adds	r2, #4
   1598e:	d008      	beq.n	159a2 <memcpy+0xe2>
   15990:	07d2      	lsls	r2, r2, #31
   15992:	bf1c      	itt	ne
   15994:	f811 3b01 	ldrbne.w	r3, [r1], #1
   15998:	f800 3b01 	strbne.w	r3, [r0], #1
   1599c:	d301      	bcc.n	159a2 <memcpy+0xe2>
   1599e:	880b      	ldrh	r3, [r1, #0]
   159a0:	8003      	strh	r3, [r0, #0]
   159a2:	4660      	mov	r0, ip
   159a4:	4770      	bx	lr
   159a6:	bf00      	nop
   159a8:	2a08      	cmp	r2, #8
   159aa:	d313      	bcc.n	159d4 <memcpy+0x114>
   159ac:	078b      	lsls	r3, r1, #30
   159ae:	d08d      	beq.n	158cc <memcpy+0xc>
   159b0:	f010 0303 	ands.w	r3, r0, #3
   159b4:	d08a      	beq.n	158cc <memcpy+0xc>
   159b6:	f1c3 0304 	rsb	r3, r3, #4
   159ba:	1ad2      	subs	r2, r2, r3
   159bc:	07db      	lsls	r3, r3, #31
   159be:	bf1c      	itt	ne
   159c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   159c4:	f800 3b01 	strbne.w	r3, [r0], #1
   159c8:	d380      	bcc.n	158cc <memcpy+0xc>
   159ca:	f831 3b02 	ldrh.w	r3, [r1], #2
   159ce:	f820 3b02 	strh.w	r3, [r0], #2
   159d2:	e77b      	b.n	158cc <memcpy+0xc>
   159d4:	3a04      	subs	r2, #4
   159d6:	d3d9      	bcc.n	1598c <memcpy+0xcc>
   159d8:	3a01      	subs	r2, #1
   159da:	f811 3b01 	ldrb.w	r3, [r1], #1
   159de:	f800 3b01 	strb.w	r3, [r0], #1
   159e2:	d2f9      	bcs.n	159d8 <memcpy+0x118>
   159e4:	780b      	ldrb	r3, [r1, #0]
   159e6:	7003      	strb	r3, [r0, #0]
   159e8:	784b      	ldrb	r3, [r1, #1]
   159ea:	7043      	strb	r3, [r0, #1]
   159ec:	788b      	ldrb	r3, [r1, #2]
   159ee:	7083      	strb	r3, [r0, #2]
   159f0:	4660      	mov	r0, ip
   159f2:	4770      	bx	lr

000159f4 <memmove>:
   159f4:	4288      	cmp	r0, r1
   159f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   159f8:	d90d      	bls.n	15a16 <memmove+0x22>
   159fa:	188b      	adds	r3, r1, r2
   159fc:	4298      	cmp	r0, r3
   159fe:	d20a      	bcs.n	15a16 <memmove+0x22>
   15a00:	1884      	adds	r4, r0, r2
   15a02:	2a00      	cmp	r2, #0
   15a04:	d051      	beq.n	15aaa <memmove+0xb6>
   15a06:	4622      	mov	r2, r4
   15a08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   15a0c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   15a10:	4299      	cmp	r1, r3
   15a12:	d1f9      	bne.n	15a08 <memmove+0x14>
   15a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15a16:	2a0f      	cmp	r2, #15
   15a18:	d948      	bls.n	15aac <memmove+0xb8>
   15a1a:	ea41 0300 	orr.w	r3, r1, r0
   15a1e:	079b      	lsls	r3, r3, #30
   15a20:	d146      	bne.n	15ab0 <memmove+0xbc>
   15a22:	f100 0410 	add.w	r4, r0, #16
   15a26:	f101 0310 	add.w	r3, r1, #16
   15a2a:	4615      	mov	r5, r2
   15a2c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   15a30:	f844 6c10 	str.w	r6, [r4, #-16]
   15a34:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   15a38:	f844 6c0c 	str.w	r6, [r4, #-12]
   15a3c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   15a40:	f844 6c08 	str.w	r6, [r4, #-8]
   15a44:	3d10      	subs	r5, #16
   15a46:	f853 6c04 	ldr.w	r6, [r3, #-4]
   15a4a:	f844 6c04 	str.w	r6, [r4, #-4]
   15a4e:	2d0f      	cmp	r5, #15
   15a50:	f103 0310 	add.w	r3, r3, #16
   15a54:	f104 0410 	add.w	r4, r4, #16
   15a58:	d8e8      	bhi.n	15a2c <memmove+0x38>
   15a5a:	f1a2 0310 	sub.w	r3, r2, #16
   15a5e:	f023 030f 	bic.w	r3, r3, #15
   15a62:	f002 0e0f 	and.w	lr, r2, #15
   15a66:	3310      	adds	r3, #16
   15a68:	f1be 0f03 	cmp.w	lr, #3
   15a6c:	4419      	add	r1, r3
   15a6e:	4403      	add	r3, r0
   15a70:	d921      	bls.n	15ab6 <memmove+0xc2>
   15a72:	1f1e      	subs	r6, r3, #4
   15a74:	460d      	mov	r5, r1
   15a76:	4674      	mov	r4, lr
   15a78:	3c04      	subs	r4, #4
   15a7a:	f855 7b04 	ldr.w	r7, [r5], #4
   15a7e:	f846 7f04 	str.w	r7, [r6, #4]!
   15a82:	2c03      	cmp	r4, #3
   15a84:	d8f8      	bhi.n	15a78 <memmove+0x84>
   15a86:	f1ae 0404 	sub.w	r4, lr, #4
   15a8a:	f024 0403 	bic.w	r4, r4, #3
   15a8e:	3404      	adds	r4, #4
   15a90:	4421      	add	r1, r4
   15a92:	4423      	add	r3, r4
   15a94:	f002 0203 	and.w	r2, r2, #3
   15a98:	b162      	cbz	r2, 15ab4 <memmove+0xc0>
   15a9a:	3b01      	subs	r3, #1
   15a9c:	440a      	add	r2, r1
   15a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
   15aa2:	f803 4f01 	strb.w	r4, [r3, #1]!
   15aa6:	428a      	cmp	r2, r1
   15aa8:	d1f9      	bne.n	15a9e <memmove+0xaa>
   15aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15aac:	4603      	mov	r3, r0
   15aae:	e7f3      	b.n	15a98 <memmove+0xa4>
   15ab0:	4603      	mov	r3, r0
   15ab2:	e7f2      	b.n	15a9a <memmove+0xa6>
   15ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15ab6:	4672      	mov	r2, lr
   15ab8:	e7ee      	b.n	15a98 <memmove+0xa4>
   15aba:	bf00      	nop

00015abc <memset>:
   15abc:	b470      	push	{r4, r5, r6}
   15abe:	0786      	lsls	r6, r0, #30
   15ac0:	d046      	beq.n	15b50 <memset+0x94>
   15ac2:	1e54      	subs	r4, r2, #1
   15ac4:	2a00      	cmp	r2, #0
   15ac6:	d041      	beq.n	15b4c <memset+0x90>
   15ac8:	b2ca      	uxtb	r2, r1
   15aca:	4603      	mov	r3, r0
   15acc:	e002      	b.n	15ad4 <memset+0x18>
   15ace:	f114 34ff 	adds.w	r4, r4, #4294967295
   15ad2:	d33b      	bcc.n	15b4c <memset+0x90>
   15ad4:	f803 2b01 	strb.w	r2, [r3], #1
   15ad8:	079d      	lsls	r5, r3, #30
   15ada:	d1f8      	bne.n	15ace <memset+0x12>
   15adc:	2c03      	cmp	r4, #3
   15ade:	d92e      	bls.n	15b3e <memset+0x82>
   15ae0:	b2cd      	uxtb	r5, r1
   15ae2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   15ae6:	2c0f      	cmp	r4, #15
   15ae8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   15aec:	d919      	bls.n	15b22 <memset+0x66>
   15aee:	f103 0210 	add.w	r2, r3, #16
   15af2:	4626      	mov	r6, r4
   15af4:	3e10      	subs	r6, #16
   15af6:	2e0f      	cmp	r6, #15
   15af8:	f842 5c10 	str.w	r5, [r2, #-16]
   15afc:	f842 5c0c 	str.w	r5, [r2, #-12]
   15b00:	f842 5c08 	str.w	r5, [r2, #-8]
   15b04:	f842 5c04 	str.w	r5, [r2, #-4]
   15b08:	f102 0210 	add.w	r2, r2, #16
   15b0c:	d8f2      	bhi.n	15af4 <memset+0x38>
   15b0e:	f1a4 0210 	sub.w	r2, r4, #16
   15b12:	f022 020f 	bic.w	r2, r2, #15
   15b16:	f004 040f 	and.w	r4, r4, #15
   15b1a:	3210      	adds	r2, #16
   15b1c:	2c03      	cmp	r4, #3
   15b1e:	4413      	add	r3, r2
   15b20:	d90d      	bls.n	15b3e <memset+0x82>
   15b22:	461e      	mov	r6, r3
   15b24:	4622      	mov	r2, r4
   15b26:	3a04      	subs	r2, #4
   15b28:	2a03      	cmp	r2, #3
   15b2a:	f846 5b04 	str.w	r5, [r6], #4
   15b2e:	d8fa      	bhi.n	15b26 <memset+0x6a>
   15b30:	1f22      	subs	r2, r4, #4
   15b32:	f022 0203 	bic.w	r2, r2, #3
   15b36:	3204      	adds	r2, #4
   15b38:	4413      	add	r3, r2
   15b3a:	f004 0403 	and.w	r4, r4, #3
   15b3e:	b12c      	cbz	r4, 15b4c <memset+0x90>
   15b40:	b2c9      	uxtb	r1, r1
   15b42:	441c      	add	r4, r3
   15b44:	f803 1b01 	strb.w	r1, [r3], #1
   15b48:	429c      	cmp	r4, r3
   15b4a:	d1fb      	bne.n	15b44 <memset+0x88>
   15b4c:	bc70      	pop	{r4, r5, r6}
   15b4e:	4770      	bx	lr
   15b50:	4614      	mov	r4, r2
   15b52:	4603      	mov	r3, r0
   15b54:	e7c2      	b.n	15adc <memset+0x20>
   15b56:	bf00      	nop

00015b58 <__malloc_lock>:
   15b58:	4801      	ldr	r0, [pc, #4]	; (15b60 <__malloc_lock+0x8>)
   15b5a:	f7ff bad9 	b.w	15110 <__retarget_lock_acquire_recursive>
   15b5e:	bf00      	nop
   15b60:	2000fca0 	.word	0x2000fca0

00015b64 <__malloc_unlock>:
   15b64:	4801      	ldr	r0, [pc, #4]	; (15b6c <__malloc_unlock+0x8>)
   15b66:	f7ff bad5 	b.w	15114 <__retarget_lock_release_recursive>
   15b6a:	bf00      	nop
   15b6c:	2000fca0 	.word	0x2000fca0

00015b70 <printf>:
   15b70:	b40f      	push	{r0, r1, r2, r3}
   15b72:	b500      	push	{lr}
   15b74:	4907      	ldr	r1, [pc, #28]	; (15b94 <printf+0x24>)
   15b76:	b083      	sub	sp, #12
   15b78:	ab04      	add	r3, sp, #16
   15b7a:	6808      	ldr	r0, [r1, #0]
   15b7c:	f853 2b04 	ldr.w	r2, [r3], #4
   15b80:	6881      	ldr	r1, [r0, #8]
   15b82:	9301      	str	r3, [sp, #4]
   15b84:	f002 ffe0 	bl	18b48 <_vfprintf_r>
   15b88:	b003      	add	sp, #12
   15b8a:	f85d eb04 	ldr.w	lr, [sp], #4
   15b8e:	b004      	add	sp, #16
   15b90:	4770      	bx	lr
   15b92:	bf00      	nop
   15b94:	20000020 	.word	0x20000020

00015b98 <_putc_r>:
   15b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15b9a:	460e      	mov	r6, r1
   15b9c:	4614      	mov	r4, r2
   15b9e:	4607      	mov	r7, r0
   15ba0:	b108      	cbz	r0, 15ba6 <_putc_r+0xe>
   15ba2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   15ba4:	b34b      	cbz	r3, 15bfa <_putc_r+0x62>
   15ba6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   15ba8:	07d8      	lsls	r0, r3, #31
   15baa:	d402      	bmi.n	15bb2 <_putc_r+0x1a>
   15bac:	89a3      	ldrh	r3, [r4, #12]
   15bae:	0599      	lsls	r1, r3, #22
   15bb0:	d526      	bpl.n	15c00 <_putc_r+0x68>
   15bb2:	68a3      	ldr	r3, [r4, #8]
   15bb4:	3b01      	subs	r3, #1
   15bb6:	2b00      	cmp	r3, #0
   15bb8:	60a3      	str	r3, [r4, #8]
   15bba:	db11      	blt.n	15be0 <_putc_r+0x48>
   15bbc:	b2f5      	uxtb	r5, r6
   15bbe:	6823      	ldr	r3, [r4, #0]
   15bc0:	1c5a      	adds	r2, r3, #1
   15bc2:	6022      	str	r2, [r4, #0]
   15bc4:	701e      	strb	r6, [r3, #0]
   15bc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   15bc8:	07da      	lsls	r2, r3, #31
   15bca:	d402      	bmi.n	15bd2 <_putc_r+0x3a>
   15bcc:	89a3      	ldrh	r3, [r4, #12]
   15bce:	059b      	lsls	r3, r3, #22
   15bd0:	d501      	bpl.n	15bd6 <_putc_r+0x3e>
   15bd2:	4628      	mov	r0, r5
   15bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15bd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
   15bd8:	f7ff fa9c 	bl	15114 <__retarget_lock_release_recursive>
   15bdc:	4628      	mov	r0, r5
   15bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15be0:	69a2      	ldr	r2, [r4, #24]
   15be2:	4293      	cmp	r3, r2
   15be4:	db02      	blt.n	15bec <_putc_r+0x54>
   15be6:	b2f5      	uxtb	r5, r6
   15be8:	2d0a      	cmp	r5, #10
   15bea:	d1e8      	bne.n	15bbe <_putc_r+0x26>
   15bec:	4631      	mov	r1, r6
   15bee:	4638      	mov	r0, r7
   15bf0:	4622      	mov	r2, r4
   15bf2:	f004 fa97 	bl	1a124 <__swbuf_r>
   15bf6:	4605      	mov	r5, r0
   15bf8:	e7e5      	b.n	15bc6 <_putc_r+0x2e>
   15bfa:	f005 fcd7 	bl	1b5ac <__sinit>
   15bfe:	e7d2      	b.n	15ba6 <_putc_r+0xe>
   15c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
   15c02:	f7ff fa85 	bl	15110 <__retarget_lock_acquire_recursive>
   15c06:	e7d4      	b.n	15bb2 <_putc_r+0x1a>

00015c08 <realloc>:
   15c08:	4b02      	ldr	r3, [pc, #8]	; (15c14 <realloc+0xc>)
   15c0a:	460a      	mov	r2, r1
   15c0c:	4601      	mov	r1, r0
   15c0e:	6818      	ldr	r0, [r3, #0]
   15c10:	f000 b802 	b.w	15c18 <_realloc_r>
   15c14:	20000020 	.word	0x20000020

00015c18 <_realloc_r>:
   15c18:	2900      	cmp	r1, #0
   15c1a:	f000 8095 	beq.w	15d48 <_realloc_r+0x130>
   15c1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c22:	460d      	mov	r5, r1
   15c24:	4616      	mov	r6, r2
   15c26:	b083      	sub	sp, #12
   15c28:	4680      	mov	r8, r0
   15c2a:	f106 070b 	add.w	r7, r6, #11
   15c2e:	f7ff ff93 	bl	15b58 <__malloc_lock>
   15c32:	f855 ec04 	ldr.w	lr, [r5, #-4]
   15c36:	2f16      	cmp	r7, #22
   15c38:	f02e 0403 	bic.w	r4, lr, #3
   15c3c:	f1a5 0908 	sub.w	r9, r5, #8
   15c40:	d83c      	bhi.n	15cbc <_realloc_r+0xa4>
   15c42:	2210      	movs	r2, #16
   15c44:	4617      	mov	r7, r2
   15c46:	42be      	cmp	r6, r7
   15c48:	d83d      	bhi.n	15cc6 <_realloc_r+0xae>
   15c4a:	4294      	cmp	r4, r2
   15c4c:	da43      	bge.n	15cd6 <_realloc_r+0xbe>
   15c4e:	4bc4      	ldr	r3, [pc, #784]	; (15f60 <_realloc_r+0x348>)
   15c50:	6899      	ldr	r1, [r3, #8]
   15c52:	eb09 0004 	add.w	r0, r9, r4
   15c56:	4288      	cmp	r0, r1
   15c58:	f000 80b4 	beq.w	15dc4 <_realloc_r+0x1ac>
   15c5c:	6843      	ldr	r3, [r0, #4]
   15c5e:	f023 0101 	bic.w	r1, r3, #1
   15c62:	4401      	add	r1, r0
   15c64:	6849      	ldr	r1, [r1, #4]
   15c66:	07c9      	lsls	r1, r1, #31
   15c68:	d54c      	bpl.n	15d04 <_realloc_r+0xec>
   15c6a:	f01e 0f01 	tst.w	lr, #1
   15c6e:	f000 809b 	beq.w	15da8 <_realloc_r+0x190>
   15c72:	4631      	mov	r1, r6
   15c74:	4640      	mov	r0, r8
   15c76:	f7ff fad7 	bl	15228 <_malloc_r>
   15c7a:	4606      	mov	r6, r0
   15c7c:	2800      	cmp	r0, #0
   15c7e:	d03a      	beq.n	15cf6 <_realloc_r+0xde>
   15c80:	f855 3c04 	ldr.w	r3, [r5, #-4]
   15c84:	f023 0301 	bic.w	r3, r3, #1
   15c88:	444b      	add	r3, r9
   15c8a:	f1a0 0208 	sub.w	r2, r0, #8
   15c8e:	429a      	cmp	r2, r3
   15c90:	f000 8121 	beq.w	15ed6 <_realloc_r+0x2be>
   15c94:	1f22      	subs	r2, r4, #4
   15c96:	2a24      	cmp	r2, #36	; 0x24
   15c98:	f200 8107 	bhi.w	15eaa <_realloc_r+0x292>
   15c9c:	2a13      	cmp	r2, #19
   15c9e:	f200 80db 	bhi.w	15e58 <_realloc_r+0x240>
   15ca2:	4603      	mov	r3, r0
   15ca4:	462a      	mov	r2, r5
   15ca6:	6811      	ldr	r1, [r2, #0]
   15ca8:	6019      	str	r1, [r3, #0]
   15caa:	6851      	ldr	r1, [r2, #4]
   15cac:	6059      	str	r1, [r3, #4]
   15cae:	6892      	ldr	r2, [r2, #8]
   15cb0:	609a      	str	r2, [r3, #8]
   15cb2:	4629      	mov	r1, r5
   15cb4:	4640      	mov	r0, r8
   15cb6:	f005 fd9f 	bl	1b7f8 <_free_r>
   15cba:	e01c      	b.n	15cf6 <_realloc_r+0xde>
   15cbc:	f027 0707 	bic.w	r7, r7, #7
   15cc0:	2f00      	cmp	r7, #0
   15cc2:	463a      	mov	r2, r7
   15cc4:	dabf      	bge.n	15c46 <_realloc_r+0x2e>
   15cc6:	2600      	movs	r6, #0
   15cc8:	230c      	movs	r3, #12
   15cca:	4630      	mov	r0, r6
   15ccc:	f8c8 3000 	str.w	r3, [r8]
   15cd0:	b003      	add	sp, #12
   15cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cd6:	462e      	mov	r6, r5
   15cd8:	1be3      	subs	r3, r4, r7
   15cda:	2b0f      	cmp	r3, #15
   15cdc:	d81e      	bhi.n	15d1c <_realloc_r+0x104>
   15cde:	f8d9 3004 	ldr.w	r3, [r9, #4]
   15ce2:	f003 0301 	and.w	r3, r3, #1
   15ce6:	4323      	orrs	r3, r4
   15ce8:	444c      	add	r4, r9
   15cea:	f8c9 3004 	str.w	r3, [r9, #4]
   15cee:	6863      	ldr	r3, [r4, #4]
   15cf0:	f043 0301 	orr.w	r3, r3, #1
   15cf4:	6063      	str	r3, [r4, #4]
   15cf6:	4640      	mov	r0, r8
   15cf8:	f7ff ff34 	bl	15b64 <__malloc_unlock>
   15cfc:	4630      	mov	r0, r6
   15cfe:	b003      	add	sp, #12
   15d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d04:	f023 0303 	bic.w	r3, r3, #3
   15d08:	18e1      	adds	r1, r4, r3
   15d0a:	4291      	cmp	r1, r2
   15d0c:	db1f      	blt.n	15d4e <_realloc_r+0x136>
   15d0e:	68c3      	ldr	r3, [r0, #12]
   15d10:	6882      	ldr	r2, [r0, #8]
   15d12:	462e      	mov	r6, r5
   15d14:	60d3      	str	r3, [r2, #12]
   15d16:	460c      	mov	r4, r1
   15d18:	609a      	str	r2, [r3, #8]
   15d1a:	e7dd      	b.n	15cd8 <_realloc_r+0xc0>
   15d1c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   15d20:	eb09 0107 	add.w	r1, r9, r7
   15d24:	f002 0201 	and.w	r2, r2, #1
   15d28:	444c      	add	r4, r9
   15d2a:	f043 0301 	orr.w	r3, r3, #1
   15d2e:	4317      	orrs	r7, r2
   15d30:	f8c9 7004 	str.w	r7, [r9, #4]
   15d34:	604b      	str	r3, [r1, #4]
   15d36:	6863      	ldr	r3, [r4, #4]
   15d38:	f043 0301 	orr.w	r3, r3, #1
   15d3c:	3108      	adds	r1, #8
   15d3e:	6063      	str	r3, [r4, #4]
   15d40:	4640      	mov	r0, r8
   15d42:	f005 fd59 	bl	1b7f8 <_free_r>
   15d46:	e7d6      	b.n	15cf6 <_realloc_r+0xde>
   15d48:	4611      	mov	r1, r2
   15d4a:	f7ff ba6d 	b.w	15228 <_malloc_r>
   15d4e:	f01e 0f01 	tst.w	lr, #1
   15d52:	d18e      	bne.n	15c72 <_realloc_r+0x5a>
   15d54:	f855 1c08 	ldr.w	r1, [r5, #-8]
   15d58:	eba9 0a01 	sub.w	sl, r9, r1
   15d5c:	f8da 1004 	ldr.w	r1, [sl, #4]
   15d60:	f021 0103 	bic.w	r1, r1, #3
   15d64:	440b      	add	r3, r1
   15d66:	4423      	add	r3, r4
   15d68:	4293      	cmp	r3, r2
   15d6a:	db25      	blt.n	15db8 <_realloc_r+0x1a0>
   15d6c:	68c2      	ldr	r2, [r0, #12]
   15d6e:	6881      	ldr	r1, [r0, #8]
   15d70:	4656      	mov	r6, sl
   15d72:	60ca      	str	r2, [r1, #12]
   15d74:	6091      	str	r1, [r2, #8]
   15d76:	f8da 100c 	ldr.w	r1, [sl, #12]
   15d7a:	f856 0f08 	ldr.w	r0, [r6, #8]!
   15d7e:	1f22      	subs	r2, r4, #4
   15d80:	2a24      	cmp	r2, #36	; 0x24
   15d82:	60c1      	str	r1, [r0, #12]
   15d84:	6088      	str	r0, [r1, #8]
   15d86:	f200 8094 	bhi.w	15eb2 <_realloc_r+0x29a>
   15d8a:	2a13      	cmp	r2, #19
   15d8c:	d96f      	bls.n	15e6e <_realloc_r+0x256>
   15d8e:	6829      	ldr	r1, [r5, #0]
   15d90:	f8ca 1008 	str.w	r1, [sl, #8]
   15d94:	6869      	ldr	r1, [r5, #4]
   15d96:	f8ca 100c 	str.w	r1, [sl, #12]
   15d9a:	2a1b      	cmp	r2, #27
   15d9c:	f200 80a2 	bhi.w	15ee4 <_realloc_r+0x2cc>
   15da0:	3508      	adds	r5, #8
   15da2:	f10a 0210 	add.w	r2, sl, #16
   15da6:	e063      	b.n	15e70 <_realloc_r+0x258>
   15da8:	f855 3c08 	ldr.w	r3, [r5, #-8]
   15dac:	eba9 0a03 	sub.w	sl, r9, r3
   15db0:	f8da 1004 	ldr.w	r1, [sl, #4]
   15db4:	f021 0103 	bic.w	r1, r1, #3
   15db8:	1863      	adds	r3, r4, r1
   15dba:	4293      	cmp	r3, r2
   15dbc:	f6ff af59 	blt.w	15c72 <_realloc_r+0x5a>
   15dc0:	4656      	mov	r6, sl
   15dc2:	e7d8      	b.n	15d76 <_realloc_r+0x15e>
   15dc4:	6841      	ldr	r1, [r0, #4]
   15dc6:	f021 0b03 	bic.w	fp, r1, #3
   15dca:	44a3      	add	fp, r4
   15dcc:	f107 0010 	add.w	r0, r7, #16
   15dd0:	4583      	cmp	fp, r0
   15dd2:	da56      	bge.n	15e82 <_realloc_r+0x26a>
   15dd4:	f01e 0f01 	tst.w	lr, #1
   15dd8:	f47f af4b 	bne.w	15c72 <_realloc_r+0x5a>
   15ddc:	f855 1c08 	ldr.w	r1, [r5, #-8]
   15de0:	eba9 0a01 	sub.w	sl, r9, r1
   15de4:	f8da 1004 	ldr.w	r1, [sl, #4]
   15de8:	f021 0103 	bic.w	r1, r1, #3
   15dec:	448b      	add	fp, r1
   15dee:	4558      	cmp	r0, fp
   15df0:	dce2      	bgt.n	15db8 <_realloc_r+0x1a0>
   15df2:	4656      	mov	r6, sl
   15df4:	f8da 100c 	ldr.w	r1, [sl, #12]
   15df8:	f856 0f08 	ldr.w	r0, [r6, #8]!
   15dfc:	1f22      	subs	r2, r4, #4
   15dfe:	2a24      	cmp	r2, #36	; 0x24
   15e00:	60c1      	str	r1, [r0, #12]
   15e02:	6088      	str	r0, [r1, #8]
   15e04:	f200 808f 	bhi.w	15f26 <_realloc_r+0x30e>
   15e08:	2a13      	cmp	r2, #19
   15e0a:	f240 808a 	bls.w	15f22 <_realloc_r+0x30a>
   15e0e:	6829      	ldr	r1, [r5, #0]
   15e10:	f8ca 1008 	str.w	r1, [sl, #8]
   15e14:	6869      	ldr	r1, [r5, #4]
   15e16:	f8ca 100c 	str.w	r1, [sl, #12]
   15e1a:	2a1b      	cmp	r2, #27
   15e1c:	f200 808a 	bhi.w	15f34 <_realloc_r+0x31c>
   15e20:	3508      	adds	r5, #8
   15e22:	f10a 0210 	add.w	r2, sl, #16
   15e26:	6829      	ldr	r1, [r5, #0]
   15e28:	6011      	str	r1, [r2, #0]
   15e2a:	6869      	ldr	r1, [r5, #4]
   15e2c:	6051      	str	r1, [r2, #4]
   15e2e:	68a9      	ldr	r1, [r5, #8]
   15e30:	6091      	str	r1, [r2, #8]
   15e32:	eb0a 0107 	add.w	r1, sl, r7
   15e36:	ebab 0207 	sub.w	r2, fp, r7
   15e3a:	f042 0201 	orr.w	r2, r2, #1
   15e3e:	6099      	str	r1, [r3, #8]
   15e40:	604a      	str	r2, [r1, #4]
   15e42:	f8da 3004 	ldr.w	r3, [sl, #4]
   15e46:	f003 0301 	and.w	r3, r3, #1
   15e4a:	431f      	orrs	r7, r3
   15e4c:	4640      	mov	r0, r8
   15e4e:	f8ca 7004 	str.w	r7, [sl, #4]
   15e52:	f7ff fe87 	bl	15b64 <__malloc_unlock>
   15e56:	e751      	b.n	15cfc <_realloc_r+0xe4>
   15e58:	682b      	ldr	r3, [r5, #0]
   15e5a:	6003      	str	r3, [r0, #0]
   15e5c:	686b      	ldr	r3, [r5, #4]
   15e5e:	6043      	str	r3, [r0, #4]
   15e60:	2a1b      	cmp	r2, #27
   15e62:	d82d      	bhi.n	15ec0 <_realloc_r+0x2a8>
   15e64:	f100 0308 	add.w	r3, r0, #8
   15e68:	f105 0208 	add.w	r2, r5, #8
   15e6c:	e71b      	b.n	15ca6 <_realloc_r+0x8e>
   15e6e:	4632      	mov	r2, r6
   15e70:	6829      	ldr	r1, [r5, #0]
   15e72:	6011      	str	r1, [r2, #0]
   15e74:	6869      	ldr	r1, [r5, #4]
   15e76:	6051      	str	r1, [r2, #4]
   15e78:	68a9      	ldr	r1, [r5, #8]
   15e7a:	6091      	str	r1, [r2, #8]
   15e7c:	461c      	mov	r4, r3
   15e7e:	46d1      	mov	r9, sl
   15e80:	e72a      	b.n	15cd8 <_realloc_r+0xc0>
   15e82:	eb09 0107 	add.w	r1, r9, r7
   15e86:	ebab 0b07 	sub.w	fp, fp, r7
   15e8a:	f04b 0201 	orr.w	r2, fp, #1
   15e8e:	6099      	str	r1, [r3, #8]
   15e90:	604a      	str	r2, [r1, #4]
   15e92:	f855 3c04 	ldr.w	r3, [r5, #-4]
   15e96:	f003 0301 	and.w	r3, r3, #1
   15e9a:	431f      	orrs	r7, r3
   15e9c:	4640      	mov	r0, r8
   15e9e:	f845 7c04 	str.w	r7, [r5, #-4]
   15ea2:	f7ff fe5f 	bl	15b64 <__malloc_unlock>
   15ea6:	462e      	mov	r6, r5
   15ea8:	e728      	b.n	15cfc <_realloc_r+0xe4>
   15eaa:	4629      	mov	r1, r5
   15eac:	f7ff fda2 	bl	159f4 <memmove>
   15eb0:	e6ff      	b.n	15cb2 <_realloc_r+0x9a>
   15eb2:	4629      	mov	r1, r5
   15eb4:	4630      	mov	r0, r6
   15eb6:	461c      	mov	r4, r3
   15eb8:	46d1      	mov	r9, sl
   15eba:	f7ff fd9b 	bl	159f4 <memmove>
   15ebe:	e70b      	b.n	15cd8 <_realloc_r+0xc0>
   15ec0:	68ab      	ldr	r3, [r5, #8]
   15ec2:	6083      	str	r3, [r0, #8]
   15ec4:	68eb      	ldr	r3, [r5, #12]
   15ec6:	60c3      	str	r3, [r0, #12]
   15ec8:	2a24      	cmp	r2, #36	; 0x24
   15eca:	d017      	beq.n	15efc <_realloc_r+0x2e4>
   15ecc:	f100 0310 	add.w	r3, r0, #16
   15ed0:	f105 0210 	add.w	r2, r5, #16
   15ed4:	e6e7      	b.n	15ca6 <_realloc_r+0x8e>
   15ed6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   15eda:	f023 0303 	bic.w	r3, r3, #3
   15ede:	441c      	add	r4, r3
   15ee0:	462e      	mov	r6, r5
   15ee2:	e6f9      	b.n	15cd8 <_realloc_r+0xc0>
   15ee4:	68a9      	ldr	r1, [r5, #8]
   15ee6:	f8ca 1010 	str.w	r1, [sl, #16]
   15eea:	68e9      	ldr	r1, [r5, #12]
   15eec:	f8ca 1014 	str.w	r1, [sl, #20]
   15ef0:	2a24      	cmp	r2, #36	; 0x24
   15ef2:	d00c      	beq.n	15f0e <_realloc_r+0x2f6>
   15ef4:	3510      	adds	r5, #16
   15ef6:	f10a 0218 	add.w	r2, sl, #24
   15efa:	e7b9      	b.n	15e70 <_realloc_r+0x258>
   15efc:	692b      	ldr	r3, [r5, #16]
   15efe:	6103      	str	r3, [r0, #16]
   15f00:	696b      	ldr	r3, [r5, #20]
   15f02:	6143      	str	r3, [r0, #20]
   15f04:	f105 0218 	add.w	r2, r5, #24
   15f08:	f100 0318 	add.w	r3, r0, #24
   15f0c:	e6cb      	b.n	15ca6 <_realloc_r+0x8e>
   15f0e:	692a      	ldr	r2, [r5, #16]
   15f10:	f8ca 2018 	str.w	r2, [sl, #24]
   15f14:	696a      	ldr	r2, [r5, #20]
   15f16:	f8ca 201c 	str.w	r2, [sl, #28]
   15f1a:	3518      	adds	r5, #24
   15f1c:	f10a 0220 	add.w	r2, sl, #32
   15f20:	e7a6      	b.n	15e70 <_realloc_r+0x258>
   15f22:	4632      	mov	r2, r6
   15f24:	e77f      	b.n	15e26 <_realloc_r+0x20e>
   15f26:	4629      	mov	r1, r5
   15f28:	4630      	mov	r0, r6
   15f2a:	9301      	str	r3, [sp, #4]
   15f2c:	f7ff fd62 	bl	159f4 <memmove>
   15f30:	9b01      	ldr	r3, [sp, #4]
   15f32:	e77e      	b.n	15e32 <_realloc_r+0x21a>
   15f34:	68a9      	ldr	r1, [r5, #8]
   15f36:	f8ca 1010 	str.w	r1, [sl, #16]
   15f3a:	68e9      	ldr	r1, [r5, #12]
   15f3c:	f8ca 1014 	str.w	r1, [sl, #20]
   15f40:	2a24      	cmp	r2, #36	; 0x24
   15f42:	d003      	beq.n	15f4c <_realloc_r+0x334>
   15f44:	3510      	adds	r5, #16
   15f46:	f10a 0218 	add.w	r2, sl, #24
   15f4a:	e76c      	b.n	15e26 <_realloc_r+0x20e>
   15f4c:	692a      	ldr	r2, [r5, #16]
   15f4e:	f8ca 2018 	str.w	r2, [sl, #24]
   15f52:	696a      	ldr	r2, [r5, #20]
   15f54:	f8ca 201c 	str.w	r2, [sl, #28]
   15f58:	3518      	adds	r5, #24
   15f5a:	f10a 0220 	add.w	r2, sl, #32
   15f5e:	e762      	b.n	15e26 <_realloc_r+0x20e>
   15f60:	200005bc 	.word	0x200005bc

00015f64 <_sbrk_r>:
   15f64:	b538      	push	{r3, r4, r5, lr}
   15f66:	4c07      	ldr	r4, [pc, #28]	; (15f84 <_sbrk_r+0x20>)
   15f68:	2300      	movs	r3, #0
   15f6a:	4605      	mov	r5, r0
   15f6c:	4608      	mov	r0, r1
   15f6e:	6023      	str	r3, [r4, #0]
   15f70:	f7ea fba8 	bl	6c4 <_sbrk>
   15f74:	1c43      	adds	r3, r0, #1
   15f76:	d000      	beq.n	15f7a <_sbrk_r+0x16>
   15f78:	bd38      	pop	{r3, r4, r5, pc}
   15f7a:	6823      	ldr	r3, [r4, #0]
   15f7c:	2b00      	cmp	r3, #0
   15f7e:	d0fb      	beq.n	15f78 <_sbrk_r+0x14>
   15f80:	602b      	str	r3, [r5, #0]
   15f82:	bd38      	pop	{r3, r4, r5, pc}
   15f84:	2000fcc4 	.word	0x2000fcc4

00015f88 <_raise_r>:
   15f88:	291f      	cmp	r1, #31
   15f8a:	d828      	bhi.n	15fde <_raise_r+0x56>
   15f8c:	b520      	push	{r5, lr}
   15f8e:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   15f92:	b082      	sub	sp, #8
   15f94:	4605      	mov	r5, r0
   15f96:	b1aa      	cbz	r2, 15fc4 <_raise_r+0x3c>
   15f98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   15f9c:	b193      	cbz	r3, 15fc4 <_raise_r+0x3c>
   15f9e:	2b01      	cmp	r3, #1
   15fa0:	d00e      	beq.n	15fc0 <_raise_r+0x38>
   15fa2:	1c58      	adds	r0, r3, #1
   15fa4:	d007      	beq.n	15fb6 <_raise_r+0x2e>
   15fa6:	2500      	movs	r5, #0
   15fa8:	4608      	mov	r0, r1
   15faa:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   15fae:	4798      	blx	r3
   15fb0:	4628      	mov	r0, r5
   15fb2:	b002      	add	sp, #8
   15fb4:	bd20      	pop	{r5, pc}
   15fb6:	2316      	movs	r3, #22
   15fb8:	2001      	movs	r0, #1
   15fba:	602b      	str	r3, [r5, #0]
   15fbc:	b002      	add	sp, #8
   15fbe:	bd20      	pop	{r5, pc}
   15fc0:	2000      	movs	r0, #0
   15fc2:	e7f6      	b.n	15fb2 <_raise_r+0x2a>
   15fc4:	4628      	mov	r0, r5
   15fc6:	9101      	str	r1, [sp, #4]
   15fc8:	f000 f82a 	bl	16020 <_getpid_r>
   15fcc:	9901      	ldr	r1, [sp, #4]
   15fce:	460a      	mov	r2, r1
   15fd0:	4601      	mov	r1, r0
   15fd2:	4628      	mov	r0, r5
   15fd4:	b002      	add	sp, #8
   15fd6:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
   15fda:	f000 b80d 	b.w	15ff8 <_kill_r>
   15fde:	2316      	movs	r3, #22
   15fe0:	6003      	str	r3, [r0, #0]
   15fe2:	f04f 30ff 	mov.w	r0, #4294967295
   15fe6:	4770      	bx	lr

00015fe8 <raise>:
   15fe8:	4b02      	ldr	r3, [pc, #8]	; (15ff4 <raise+0xc>)
   15fea:	4601      	mov	r1, r0
   15fec:	6818      	ldr	r0, [r3, #0]
   15fee:	f7ff bfcb 	b.w	15f88 <_raise_r>
   15ff2:	bf00      	nop
   15ff4:	20000020 	.word	0x20000020

00015ff8 <_kill_r>:
   15ff8:	b538      	push	{r3, r4, r5, lr}
   15ffa:	460b      	mov	r3, r1
   15ffc:	4c07      	ldr	r4, [pc, #28]	; (1601c <_kill_r+0x24>)
   15ffe:	4605      	mov	r5, r0
   16000:	4611      	mov	r1, r2
   16002:	4618      	mov	r0, r3
   16004:	2300      	movs	r3, #0
   16006:	6023      	str	r3, [r4, #0]
   16008:	f7ea fb84 	bl	714 <_kill>
   1600c:	1c43      	adds	r3, r0, #1
   1600e:	d000      	beq.n	16012 <_kill_r+0x1a>
   16010:	bd38      	pop	{r3, r4, r5, pc}
   16012:	6823      	ldr	r3, [r4, #0]
   16014:	2b00      	cmp	r3, #0
   16016:	d0fb      	beq.n	16010 <_kill_r+0x18>
   16018:	602b      	str	r3, [r5, #0]
   1601a:	bd38      	pop	{r3, r4, r5, pc}
   1601c:	2000fcc4 	.word	0x2000fcc4

00016020 <_getpid_r>:
   16020:	f7ea bb79 	b.w	716 <_getpid>

00016024 <sprintf>:
   16024:	b40e      	push	{r1, r2, r3}
   16026:	b5f0      	push	{r4, r5, r6, r7, lr}
   16028:	b09c      	sub	sp, #112	; 0x70
   1602a:	ab21      	add	r3, sp, #132	; 0x84
   1602c:	490f      	ldr	r1, [pc, #60]	; (1606c <sprintf+0x48>)
   1602e:	f853 2b04 	ldr.w	r2, [r3], #4
   16032:	9301      	str	r3, [sp, #4]
   16034:	4605      	mov	r5, r0
   16036:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1603a:	6808      	ldr	r0, [r1, #0]
   1603c:	9502      	str	r5, [sp, #8]
   1603e:	f44f 7702 	mov.w	r7, #520	; 0x208
   16042:	f64f 76ff 	movw	r6, #65535	; 0xffff
   16046:	a902      	add	r1, sp, #8
   16048:	9506      	str	r5, [sp, #24]
   1604a:	f8ad 7014 	strh.w	r7, [sp, #20]
   1604e:	9404      	str	r4, [sp, #16]
   16050:	9407      	str	r4, [sp, #28]
   16052:	f8ad 6016 	strh.w	r6, [sp, #22]
   16056:	f000 fc73 	bl	16940 <_svfprintf_r>
   1605a:	9b02      	ldr	r3, [sp, #8]
   1605c:	2200      	movs	r2, #0
   1605e:	701a      	strb	r2, [r3, #0]
   16060:	b01c      	add	sp, #112	; 0x70
   16062:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   16066:	b003      	add	sp, #12
   16068:	4770      	bx	lr
   1606a:	bf00      	nop
   1606c:	20000020 	.word	0x20000020

00016070 <__sread>:
   16070:	b510      	push	{r4, lr}
   16072:	460c      	mov	r4, r1
   16074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16078:	f005 fffe 	bl	1c078 <_read_r>
   1607c:	2800      	cmp	r0, #0
   1607e:	db03      	blt.n	16088 <__sread+0x18>
   16080:	6d23      	ldr	r3, [r4, #80]	; 0x50
   16082:	4403      	add	r3, r0
   16084:	6523      	str	r3, [r4, #80]	; 0x50
   16086:	bd10      	pop	{r4, pc}
   16088:	89a3      	ldrh	r3, [r4, #12]
   1608a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1608e:	81a3      	strh	r3, [r4, #12]
   16090:	bd10      	pop	{r4, pc}
   16092:	bf00      	nop

00016094 <__swrite>:
   16094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16098:	4616      	mov	r6, r2
   1609a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   1609e:	461f      	mov	r7, r3
   160a0:	05d3      	lsls	r3, r2, #23
   160a2:	460c      	mov	r4, r1
   160a4:	4605      	mov	r5, r0
   160a6:	d507      	bpl.n	160b8 <__swrite+0x24>
   160a8:	2200      	movs	r2, #0
   160aa:	2302      	movs	r3, #2
   160ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   160b0:	f005 fcd2 	bl	1ba58 <_lseek_r>
   160b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   160b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   160bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   160c0:	81a2      	strh	r2, [r4, #12]
   160c2:	463b      	mov	r3, r7
   160c4:	4632      	mov	r2, r6
   160c6:	4628      	mov	r0, r5
   160c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   160cc:	f004 b8ba 	b.w	1a244 <_write_r>

000160d0 <__sseek>:
   160d0:	b510      	push	{r4, lr}
   160d2:	460c      	mov	r4, r1
   160d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   160d8:	f005 fcbe 	bl	1ba58 <_lseek_r>
   160dc:	89a3      	ldrh	r3, [r4, #12]
   160de:	1c42      	adds	r2, r0, #1
   160e0:	bf0e      	itee	eq
   160e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   160e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   160ea:	6520      	strne	r0, [r4, #80]	; 0x50
   160ec:	81a3      	strh	r3, [r4, #12]
   160ee:	bd10      	pop	{r4, pc}

000160f0 <__sclose>:
   160f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   160f4:	f004 b992 	b.w	1a41c <_close_r>
	...
   16100:	eba2 0003 	sub.w	r0, r2, r3
   16104:	4770      	bx	lr
   16106:	bf00      	nop

00016108 <strcmp>:
   16108:	7802      	ldrb	r2, [r0, #0]
   1610a:	780b      	ldrb	r3, [r1, #0]
   1610c:	2a01      	cmp	r2, #1
   1610e:	bf28      	it	cs
   16110:	429a      	cmpcs	r2, r3
   16112:	d1f5      	bne.n	16100 <__sclose+0x10>
   16114:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   16118:	ea40 0401 	orr.w	r4, r0, r1
   1611c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   16120:	f06f 0c00 	mvn.w	ip, #0
   16124:	ea4f 7244 	mov.w	r2, r4, lsl #29
   16128:	b312      	cbz	r2, 16170 <strcmp+0x68>
   1612a:	ea80 0401 	eor.w	r4, r0, r1
   1612e:	f014 0f07 	tst.w	r4, #7
   16132:	d16a      	bne.n	1620a <strcmp+0x102>
   16134:	f000 0407 	and.w	r4, r0, #7
   16138:	f020 0007 	bic.w	r0, r0, #7
   1613c:	f004 0503 	and.w	r5, r4, #3
   16140:	f021 0107 	bic.w	r1, r1, #7
   16144:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   16148:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1614c:	f014 0f04 	tst.w	r4, #4
   16150:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   16154:	fa0c f405 	lsl.w	r4, ip, r5
   16158:	ea62 0204 	orn	r2, r2, r4
   1615c:	ea66 0604 	orn	r6, r6, r4
   16160:	d00a      	beq.n	16178 <strcmp+0x70>
   16162:	ea63 0304 	orn	r3, r3, r4
   16166:	4662      	mov	r2, ip
   16168:	ea67 0704 	orn	r7, r7, r4
   1616c:	4666      	mov	r6, ip
   1616e:	e003      	b.n	16178 <strcmp+0x70>
   16170:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   16174:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   16178:	fa82 f54c 	uadd8	r5, r2, ip
   1617c:	ea82 0406 	eor.w	r4, r2, r6
   16180:	faa4 f48c 	sel	r4, r4, ip
   16184:	bb6c      	cbnz	r4, 161e2 <strcmp+0xda>
   16186:	fa83 f54c 	uadd8	r5, r3, ip
   1618a:	ea83 0507 	eor.w	r5, r3, r7
   1618e:	faa5 f58c 	sel	r5, r5, ip
   16192:	b995      	cbnz	r5, 161ba <strcmp+0xb2>
   16194:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   16198:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1619c:	fa82 f54c 	uadd8	r5, r2, ip
   161a0:	ea82 0406 	eor.w	r4, r2, r6
   161a4:	faa4 f48c 	sel	r4, r4, ip
   161a8:	fa83 f54c 	uadd8	r5, r3, ip
   161ac:	ea83 0507 	eor.w	r5, r3, r7
   161b0:	faa5 f58c 	sel	r5, r5, ip
   161b4:	4325      	orrs	r5, r4
   161b6:	d0db      	beq.n	16170 <strcmp+0x68>
   161b8:	b99c      	cbnz	r4, 161e2 <strcmp+0xda>
   161ba:	ba2d      	rev	r5, r5
   161bc:	fab5 f485 	clz	r4, r5
   161c0:	f024 0407 	bic.w	r4, r4, #7
   161c4:	fa27 f104 	lsr.w	r1, r7, r4
   161c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   161cc:	fa23 f304 	lsr.w	r3, r3, r4
   161d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   161d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   161d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   161dc:	eba0 0001 	sub.w	r0, r0, r1
   161e0:	4770      	bx	lr
   161e2:	ba24      	rev	r4, r4
   161e4:	fab4 f484 	clz	r4, r4
   161e8:	f024 0407 	bic.w	r4, r4, #7
   161ec:	fa26 f104 	lsr.w	r1, r6, r4
   161f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   161f4:	fa22 f204 	lsr.w	r2, r2, r4
   161f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   161fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   16200:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   16204:	eba0 0001 	sub.w	r0, r0, r1
   16208:	4770      	bx	lr
   1620a:	f014 0f03 	tst.w	r4, #3
   1620e:	d13c      	bne.n	1628a <strcmp+0x182>
   16210:	f010 0403 	ands.w	r4, r0, #3
   16214:	d128      	bne.n	16268 <strcmp+0x160>
   16216:	f850 2b08 	ldr.w	r2, [r0], #8
   1621a:	f851 3b08 	ldr.w	r3, [r1], #8
   1621e:	fa82 f54c 	uadd8	r5, r2, ip
   16222:	ea82 0503 	eor.w	r5, r2, r3
   16226:	faa5 f58c 	sel	r5, r5, ip
   1622a:	b95d      	cbnz	r5, 16244 <strcmp+0x13c>
   1622c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   16230:	f851 3c04 	ldr.w	r3, [r1, #-4]
   16234:	fa82 f54c 	uadd8	r5, r2, ip
   16238:	ea82 0503 	eor.w	r5, r2, r3
   1623c:	faa5 f58c 	sel	r5, r5, ip
   16240:	2d00      	cmp	r5, #0
   16242:	d0e8      	beq.n	16216 <strcmp+0x10e>
   16244:	ba2d      	rev	r5, r5
   16246:	fab5 f485 	clz	r4, r5
   1624a:	f024 0407 	bic.w	r4, r4, #7
   1624e:	fa23 f104 	lsr.w	r1, r3, r4
   16252:	fa22 f204 	lsr.w	r2, r2, r4
   16256:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1625a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1625e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   16262:	eba0 0001 	sub.w	r0, r0, r1
   16266:	4770      	bx	lr
   16268:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1626c:	f020 0003 	bic.w	r0, r0, #3
   16270:	f850 2b08 	ldr.w	r2, [r0], #8
   16274:	f021 0103 	bic.w	r1, r1, #3
   16278:	f851 3b08 	ldr.w	r3, [r1], #8
   1627c:	fa0c f404 	lsl.w	r4, ip, r4
   16280:	ea62 0204 	orn	r2, r2, r4
   16284:	ea63 0304 	orn	r3, r3, r4
   16288:	e7c9      	b.n	1621e <strcmp+0x116>
   1628a:	f010 0403 	ands.w	r4, r0, #3
   1628e:	d01a      	beq.n	162c6 <strcmp+0x1be>
   16290:	eba1 0104 	sub.w	r1, r1, r4
   16294:	f020 0003 	bic.w	r0, r0, #3
   16298:	07e4      	lsls	r4, r4, #31
   1629a:	f850 2b04 	ldr.w	r2, [r0], #4
   1629e:	d006      	beq.n	162ae <strcmp+0x1a6>
   162a0:	d20f      	bcs.n	162c2 <strcmp+0x1ba>
   162a2:	788b      	ldrb	r3, [r1, #2]
   162a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   162a8:	1ae4      	subs	r4, r4, r3
   162aa:	d106      	bne.n	162ba <strcmp+0x1b2>
   162ac:	b12b      	cbz	r3, 162ba <strcmp+0x1b2>
   162ae:	78cb      	ldrb	r3, [r1, #3]
   162b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   162b4:	1ae4      	subs	r4, r4, r3
   162b6:	d100      	bne.n	162ba <strcmp+0x1b2>
   162b8:	b91b      	cbnz	r3, 162c2 <strcmp+0x1ba>
   162ba:	4620      	mov	r0, r4
   162bc:	f85d 4b10 	ldr.w	r4, [sp], #16
   162c0:	4770      	bx	lr
   162c2:	f101 0104 	add.w	r1, r1, #4
   162c6:	f850 2b04 	ldr.w	r2, [r0], #4
   162ca:	07cc      	lsls	r4, r1, #31
   162cc:	f021 0103 	bic.w	r1, r1, #3
   162d0:	f851 3b04 	ldr.w	r3, [r1], #4
   162d4:	d848      	bhi.n	16368 <strcmp+0x260>
   162d6:	d224      	bcs.n	16322 <strcmp+0x21a>
   162d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   162dc:	fa82 f54c 	uadd8	r5, r2, ip
   162e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   162e4:	faa5 f58c 	sel	r5, r5, ip
   162e8:	d10a      	bne.n	16300 <strcmp+0x1f8>
   162ea:	b965      	cbnz	r5, 16306 <strcmp+0x1fe>
   162ec:	f851 3b04 	ldr.w	r3, [r1], #4
   162f0:	ea84 0402 	eor.w	r4, r4, r2
   162f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   162f8:	d10e      	bne.n	16318 <strcmp+0x210>
   162fa:	f850 2b04 	ldr.w	r2, [r0], #4
   162fe:	e7eb      	b.n	162d8 <strcmp+0x1d0>
   16300:	ea4f 2313 	mov.w	r3, r3, lsr #8
   16304:	e055      	b.n	163b2 <strcmp+0x2aa>
   16306:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1630a:	d14d      	bne.n	163a8 <strcmp+0x2a0>
   1630c:	7808      	ldrb	r0, [r1, #0]
   1630e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   16312:	f1c0 0000 	rsb	r0, r0, #0
   16316:	4770      	bx	lr
   16318:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1631c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   16320:	e047      	b.n	163b2 <strcmp+0x2aa>
   16322:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   16326:	fa82 f54c 	uadd8	r5, r2, ip
   1632a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1632e:	faa5 f58c 	sel	r5, r5, ip
   16332:	d10a      	bne.n	1634a <strcmp+0x242>
   16334:	b965      	cbnz	r5, 16350 <strcmp+0x248>
   16336:	f851 3b04 	ldr.w	r3, [r1], #4
   1633a:	ea84 0402 	eor.w	r4, r4, r2
   1633e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   16342:	d10c      	bne.n	1635e <strcmp+0x256>
   16344:	f850 2b04 	ldr.w	r2, [r0], #4
   16348:	e7eb      	b.n	16322 <strcmp+0x21a>
   1634a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1634e:	e030      	b.n	163b2 <strcmp+0x2aa>
   16350:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   16354:	d128      	bne.n	163a8 <strcmp+0x2a0>
   16356:	880b      	ldrh	r3, [r1, #0]
   16358:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1635c:	e029      	b.n	163b2 <strcmp+0x2aa>
   1635e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   16362:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   16366:	e024      	b.n	163b2 <strcmp+0x2aa>
   16368:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1636c:	fa82 f54c 	uadd8	r5, r2, ip
   16370:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   16374:	faa5 f58c 	sel	r5, r5, ip
   16378:	d10a      	bne.n	16390 <strcmp+0x288>
   1637a:	b965      	cbnz	r5, 16396 <strcmp+0x28e>
   1637c:	f851 3b04 	ldr.w	r3, [r1], #4
   16380:	ea84 0402 	eor.w	r4, r4, r2
   16384:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   16388:	d109      	bne.n	1639e <strcmp+0x296>
   1638a:	f850 2b04 	ldr.w	r2, [r0], #4
   1638e:	e7eb      	b.n	16368 <strcmp+0x260>
   16390:	ea4f 6313 	mov.w	r3, r3, lsr #24
   16394:	e00d      	b.n	163b2 <strcmp+0x2aa>
   16396:	f015 0fff 	tst.w	r5, #255	; 0xff
   1639a:	d105      	bne.n	163a8 <strcmp+0x2a0>
   1639c:	680b      	ldr	r3, [r1, #0]
   1639e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   163a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   163a6:	e004      	b.n	163b2 <strcmp+0x2aa>
   163a8:	f04f 0000 	mov.w	r0, #0
   163ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   163b0:	4770      	bx	lr
   163b2:	ba12      	rev	r2, r2
   163b4:	ba1b      	rev	r3, r3
   163b6:	fa82 f44c 	uadd8	r4, r2, ip
   163ba:	ea82 0403 	eor.w	r4, r2, r3
   163be:	faa4 f58c 	sel	r5, r4, ip
   163c2:	fab5 f485 	clz	r4, r5
   163c6:	fa02 f204 	lsl.w	r2, r2, r4
   163ca:	fa03 f304 	lsl.w	r3, r3, r4
   163ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
   163d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   163d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   163da:	4770      	bx	lr

000163dc <_strerror_r>:
   163dc:	b510      	push	{r4, lr}
   163de:	298e      	cmp	r1, #142	; 0x8e
   163e0:	f200 8131 	bhi.w	16646 <_strerror_r+0x26a>
   163e4:	e8df f011 	tbh	[pc, r1, lsl #1]
   163e8:	012d008f 	.word	0x012d008f
   163ec:	0129012b 	.word	0x0129012b
   163f0:	01250127 	.word	0x01250127
   163f4:	01210123 	.word	0x01210123
   163f8:	011d011f 	.word	0x011d011f
   163fc:	0119011b 	.word	0x0119011b
   16400:	01150117 	.word	0x01150117
   16404:	012f0113 	.word	0x012f0113
   16408:	010f0111 	.word	0x010f0111
   1640c:	010b010d 	.word	0x010b010d
   16410:	01070109 	.word	0x01070109
   16414:	01030105 	.word	0x01030105
   16418:	00ff0101 	.word	0x00ff0101
   1641c:	00fb00fd 	.word	0x00fb00fd
   16420:	00f700f9 	.word	0x00f700f9
   16424:	00f300f5 	.word	0x00f300f5
   16428:	00ef00f1 	.word	0x00ef00f1
   1642c:	00eb00ed 	.word	0x00eb00ed
   16430:	012f00e9 	.word	0x012f00e9
   16434:	012f012f 	.word	0x012f012f
   16438:	012f012f 	.word	0x012f012f
   1643c:	012f012f 	.word	0x012f012f
   16440:	00e7012f 	.word	0x00e7012f
   16444:	012f00e5 	.word	0x012f00e5
   16448:	012f012f 	.word	0x012f012f
   1644c:	012f012f 	.word	0x012f012f
   16450:	012f012f 	.word	0x012f012f
   16454:	012f012f 	.word	0x012f012f
   16458:	012f012f 	.word	0x012f012f
   1645c:	012f012f 	.word	0x012f012f
   16460:	00e100e3 	.word	0x00e100e3
   16464:	00dd00df 	.word	0x00dd00df
   16468:	012f012f 	.word	0x012f012f
   1646c:	00db012f 	.word	0x00db012f
   16470:	012f012f 	.word	0x012f012f
   16474:	00d9012f 	.word	0x00d9012f
   16478:	012f012f 	.word	0x012f012f
   1647c:	012f00d7 	.word	0x012f00d7
   16480:	00d5012f 	.word	0x00d5012f
   16484:	012f012f 	.word	0x012f012f
   16488:	012f012f 	.word	0x012f012f
   1648c:	012f012f 	.word	0x012f012f
   16490:	012f012f 	.word	0x012f012f
   16494:	012f012f 	.word	0x012f012f
   16498:	012f00d3 	.word	0x012f00d3
   1649c:	00cf00d1 	.word	0x00cf00d1
   164a0:	012f00cd 	.word	0x012f00cd
   164a4:	00cb012f 	.word	0x00cb012f
   164a8:	012f012f 	.word	0x012f012f
   164ac:	012f012f 	.word	0x012f012f
   164b0:	012f012f 	.word	0x012f012f
   164b4:	012f012f 	.word	0x012f012f
   164b8:	00c700c9 	.word	0x00c700c9
   164bc:	00c300c5 	.word	0x00c300c5
   164c0:	00bf00c1 	.word	0x00bf00c1
   164c4:	00bd012f 	.word	0x00bd012f
   164c8:	00b900bb 	.word	0x00b900bb
   164cc:	00b500b7 	.word	0x00b500b7
   164d0:	00b100b3 	.word	0x00b100b3
   164d4:	00ad00af 	.word	0x00ad00af
   164d8:	00a900ab 	.word	0x00a900ab
   164dc:	00a500a7 	.word	0x00a500a7
   164e0:	00a3012f 	.word	0x00a3012f
   164e4:	009f00a1 	.word	0x009f00a1
   164e8:	012f009d 	.word	0x012f009d
   164ec:	012f012f 	.word	0x012f012f
   164f0:	012f012f 	.word	0x012f012f
   164f4:	012f009b 	.word	0x012f009b
   164f8:	012f012f 	.word	0x012f012f
   164fc:	00970099 	.word	0x00970099
   16500:	00930095 	.word	0x00930095
   16504:	0091      	.short	0x0091
   16506:	4857      	ldr	r0, [pc, #348]	; (16664 <_strerror_r+0x288>)
   16508:	bd10      	pop	{r4, pc}
   1650a:	4857      	ldr	r0, [pc, #348]	; (16668 <_strerror_r+0x28c>)
   1650c:	bd10      	pop	{r4, pc}
   1650e:	4857      	ldr	r0, [pc, #348]	; (1666c <_strerror_r+0x290>)
   16510:	bd10      	pop	{r4, pc}
   16512:	4857      	ldr	r0, [pc, #348]	; (16670 <_strerror_r+0x294>)
   16514:	bd10      	pop	{r4, pc}
   16516:	4857      	ldr	r0, [pc, #348]	; (16674 <_strerror_r+0x298>)
   16518:	bd10      	pop	{r4, pc}
   1651a:	4857      	ldr	r0, [pc, #348]	; (16678 <_strerror_r+0x29c>)
   1651c:	bd10      	pop	{r4, pc}
   1651e:	4857      	ldr	r0, [pc, #348]	; (1667c <_strerror_r+0x2a0>)
   16520:	bd10      	pop	{r4, pc}
   16522:	4857      	ldr	r0, [pc, #348]	; (16680 <_strerror_r+0x2a4>)
   16524:	bd10      	pop	{r4, pc}
   16526:	4857      	ldr	r0, [pc, #348]	; (16684 <_strerror_r+0x2a8>)
   16528:	bd10      	pop	{r4, pc}
   1652a:	4857      	ldr	r0, [pc, #348]	; (16688 <_strerror_r+0x2ac>)
   1652c:	bd10      	pop	{r4, pc}
   1652e:	4857      	ldr	r0, [pc, #348]	; (1668c <_strerror_r+0x2b0>)
   16530:	bd10      	pop	{r4, pc}
   16532:	4857      	ldr	r0, [pc, #348]	; (16690 <_strerror_r+0x2b4>)
   16534:	bd10      	pop	{r4, pc}
   16536:	4857      	ldr	r0, [pc, #348]	; (16694 <_strerror_r+0x2b8>)
   16538:	bd10      	pop	{r4, pc}
   1653a:	4857      	ldr	r0, [pc, #348]	; (16698 <_strerror_r+0x2bc>)
   1653c:	bd10      	pop	{r4, pc}
   1653e:	4857      	ldr	r0, [pc, #348]	; (1669c <_strerror_r+0x2c0>)
   16540:	bd10      	pop	{r4, pc}
   16542:	4857      	ldr	r0, [pc, #348]	; (166a0 <_strerror_r+0x2c4>)
   16544:	bd10      	pop	{r4, pc}
   16546:	4857      	ldr	r0, [pc, #348]	; (166a4 <_strerror_r+0x2c8>)
   16548:	bd10      	pop	{r4, pc}
   1654a:	4857      	ldr	r0, [pc, #348]	; (166a8 <_strerror_r+0x2cc>)
   1654c:	bd10      	pop	{r4, pc}
   1654e:	4857      	ldr	r0, [pc, #348]	; (166ac <_strerror_r+0x2d0>)
   16550:	bd10      	pop	{r4, pc}
   16552:	4857      	ldr	r0, [pc, #348]	; (166b0 <_strerror_r+0x2d4>)
   16554:	bd10      	pop	{r4, pc}
   16556:	4857      	ldr	r0, [pc, #348]	; (166b4 <_strerror_r+0x2d8>)
   16558:	bd10      	pop	{r4, pc}
   1655a:	4857      	ldr	r0, [pc, #348]	; (166b8 <_strerror_r+0x2dc>)
   1655c:	bd10      	pop	{r4, pc}
   1655e:	4857      	ldr	r0, [pc, #348]	; (166bc <_strerror_r+0x2e0>)
   16560:	bd10      	pop	{r4, pc}
   16562:	4857      	ldr	r0, [pc, #348]	; (166c0 <_strerror_r+0x2e4>)
   16564:	bd10      	pop	{r4, pc}
   16566:	4857      	ldr	r0, [pc, #348]	; (166c4 <_strerror_r+0x2e8>)
   16568:	bd10      	pop	{r4, pc}
   1656a:	4857      	ldr	r0, [pc, #348]	; (166c8 <_strerror_r+0x2ec>)
   1656c:	bd10      	pop	{r4, pc}
   1656e:	4857      	ldr	r0, [pc, #348]	; (166cc <_strerror_r+0x2f0>)
   16570:	bd10      	pop	{r4, pc}
   16572:	4857      	ldr	r0, [pc, #348]	; (166d0 <_strerror_r+0x2f4>)
   16574:	bd10      	pop	{r4, pc}
   16576:	4857      	ldr	r0, [pc, #348]	; (166d4 <_strerror_r+0x2f8>)
   16578:	bd10      	pop	{r4, pc}
   1657a:	4857      	ldr	r0, [pc, #348]	; (166d8 <_strerror_r+0x2fc>)
   1657c:	bd10      	pop	{r4, pc}
   1657e:	4857      	ldr	r0, [pc, #348]	; (166dc <_strerror_r+0x300>)
   16580:	bd10      	pop	{r4, pc}
   16582:	4857      	ldr	r0, [pc, #348]	; (166e0 <_strerror_r+0x304>)
   16584:	bd10      	pop	{r4, pc}
   16586:	4857      	ldr	r0, [pc, #348]	; (166e4 <_strerror_r+0x308>)
   16588:	bd10      	pop	{r4, pc}
   1658a:	4857      	ldr	r0, [pc, #348]	; (166e8 <_strerror_r+0x30c>)
   1658c:	bd10      	pop	{r4, pc}
   1658e:	4857      	ldr	r0, [pc, #348]	; (166ec <_strerror_r+0x310>)
   16590:	bd10      	pop	{r4, pc}
   16592:	4857      	ldr	r0, [pc, #348]	; (166f0 <_strerror_r+0x314>)
   16594:	bd10      	pop	{r4, pc}
   16596:	4857      	ldr	r0, [pc, #348]	; (166f4 <_strerror_r+0x318>)
   16598:	bd10      	pop	{r4, pc}
   1659a:	4857      	ldr	r0, [pc, #348]	; (166f8 <_strerror_r+0x31c>)
   1659c:	bd10      	pop	{r4, pc}
   1659e:	4857      	ldr	r0, [pc, #348]	; (166fc <_strerror_r+0x320>)
   165a0:	bd10      	pop	{r4, pc}
   165a2:	4857      	ldr	r0, [pc, #348]	; (16700 <_strerror_r+0x324>)
   165a4:	bd10      	pop	{r4, pc}
   165a6:	4857      	ldr	r0, [pc, #348]	; (16704 <_strerror_r+0x328>)
   165a8:	bd10      	pop	{r4, pc}
   165aa:	4857      	ldr	r0, [pc, #348]	; (16708 <_strerror_r+0x32c>)
   165ac:	bd10      	pop	{r4, pc}
   165ae:	4857      	ldr	r0, [pc, #348]	; (1670c <_strerror_r+0x330>)
   165b0:	bd10      	pop	{r4, pc}
   165b2:	4857      	ldr	r0, [pc, #348]	; (16710 <_strerror_r+0x334>)
   165b4:	bd10      	pop	{r4, pc}
   165b6:	4857      	ldr	r0, [pc, #348]	; (16714 <_strerror_r+0x338>)
   165b8:	bd10      	pop	{r4, pc}
   165ba:	4857      	ldr	r0, [pc, #348]	; (16718 <_strerror_r+0x33c>)
   165bc:	bd10      	pop	{r4, pc}
   165be:	4857      	ldr	r0, [pc, #348]	; (1671c <_strerror_r+0x340>)
   165c0:	bd10      	pop	{r4, pc}
   165c2:	4857      	ldr	r0, [pc, #348]	; (16720 <_strerror_r+0x344>)
   165c4:	bd10      	pop	{r4, pc}
   165c6:	4857      	ldr	r0, [pc, #348]	; (16724 <_strerror_r+0x348>)
   165c8:	bd10      	pop	{r4, pc}
   165ca:	4857      	ldr	r0, [pc, #348]	; (16728 <_strerror_r+0x34c>)
   165cc:	bd10      	pop	{r4, pc}
   165ce:	4857      	ldr	r0, [pc, #348]	; (1672c <_strerror_r+0x350>)
   165d0:	bd10      	pop	{r4, pc}
   165d2:	4857      	ldr	r0, [pc, #348]	; (16730 <_strerror_r+0x354>)
   165d4:	bd10      	pop	{r4, pc}
   165d6:	4857      	ldr	r0, [pc, #348]	; (16734 <_strerror_r+0x358>)
   165d8:	bd10      	pop	{r4, pc}
   165da:	4857      	ldr	r0, [pc, #348]	; (16738 <_strerror_r+0x35c>)
   165dc:	bd10      	pop	{r4, pc}
   165de:	4857      	ldr	r0, [pc, #348]	; (1673c <_strerror_r+0x360>)
   165e0:	bd10      	pop	{r4, pc}
   165e2:	4857      	ldr	r0, [pc, #348]	; (16740 <_strerror_r+0x364>)
   165e4:	bd10      	pop	{r4, pc}
   165e6:	4857      	ldr	r0, [pc, #348]	; (16744 <_strerror_r+0x368>)
   165e8:	bd10      	pop	{r4, pc}
   165ea:	4857      	ldr	r0, [pc, #348]	; (16748 <_strerror_r+0x36c>)
   165ec:	bd10      	pop	{r4, pc}
   165ee:	4857      	ldr	r0, [pc, #348]	; (1674c <_strerror_r+0x370>)
   165f0:	bd10      	pop	{r4, pc}
   165f2:	4857      	ldr	r0, [pc, #348]	; (16750 <_strerror_r+0x374>)
   165f4:	bd10      	pop	{r4, pc}
   165f6:	4857      	ldr	r0, [pc, #348]	; (16754 <_strerror_r+0x378>)
   165f8:	bd10      	pop	{r4, pc}
   165fa:	4857      	ldr	r0, [pc, #348]	; (16758 <_strerror_r+0x37c>)
   165fc:	bd10      	pop	{r4, pc}
   165fe:	4857      	ldr	r0, [pc, #348]	; (1675c <_strerror_r+0x380>)
   16600:	bd10      	pop	{r4, pc}
   16602:	4857      	ldr	r0, [pc, #348]	; (16760 <_strerror_r+0x384>)
   16604:	bd10      	pop	{r4, pc}
   16606:	4857      	ldr	r0, [pc, #348]	; (16764 <_strerror_r+0x388>)
   16608:	bd10      	pop	{r4, pc}
   1660a:	4857      	ldr	r0, [pc, #348]	; (16768 <_strerror_r+0x38c>)
   1660c:	bd10      	pop	{r4, pc}
   1660e:	4857      	ldr	r0, [pc, #348]	; (1676c <_strerror_r+0x390>)
   16610:	bd10      	pop	{r4, pc}
   16612:	4857      	ldr	r0, [pc, #348]	; (16770 <_strerror_r+0x394>)
   16614:	bd10      	pop	{r4, pc}
   16616:	4857      	ldr	r0, [pc, #348]	; (16774 <_strerror_r+0x398>)
   16618:	bd10      	pop	{r4, pc}
   1661a:	4857      	ldr	r0, [pc, #348]	; (16778 <_strerror_r+0x39c>)
   1661c:	bd10      	pop	{r4, pc}
   1661e:	4857      	ldr	r0, [pc, #348]	; (1677c <_strerror_r+0x3a0>)
   16620:	bd10      	pop	{r4, pc}
   16622:	4857      	ldr	r0, [pc, #348]	; (16780 <_strerror_r+0x3a4>)
   16624:	bd10      	pop	{r4, pc}
   16626:	4857      	ldr	r0, [pc, #348]	; (16784 <_strerror_r+0x3a8>)
   16628:	bd10      	pop	{r4, pc}
   1662a:	4857      	ldr	r0, [pc, #348]	; (16788 <_strerror_r+0x3ac>)
   1662c:	bd10      	pop	{r4, pc}
   1662e:	4857      	ldr	r0, [pc, #348]	; (1678c <_strerror_r+0x3b0>)
   16630:	bd10      	pop	{r4, pc}
   16632:	4857      	ldr	r0, [pc, #348]	; (16790 <_strerror_r+0x3b4>)
   16634:	bd10      	pop	{r4, pc}
   16636:	4857      	ldr	r0, [pc, #348]	; (16794 <_strerror_r+0x3b8>)
   16638:	bd10      	pop	{r4, pc}
   1663a:	4857      	ldr	r0, [pc, #348]	; (16798 <_strerror_r+0x3bc>)
   1663c:	bd10      	pop	{r4, pc}
   1663e:	4857      	ldr	r0, [pc, #348]	; (1679c <_strerror_r+0x3c0>)
   16640:	bd10      	pop	{r4, pc}
   16642:	4857      	ldr	r0, [pc, #348]	; (167a0 <_strerror_r+0x3c4>)
   16644:	bd10      	pop	{r4, pc}
   16646:	4614      	mov	r4, r2
   16648:	4602      	mov	r2, r0
   1664a:	2b00      	cmp	r3, #0
   1664c:	bf18      	it	ne
   1664e:	461a      	movne	r2, r3
   16650:	4608      	mov	r0, r1
   16652:	4621      	mov	r1, r4
   16654:	f001 fba2 	bl	17d9c <_user_strerror>
   16658:	4b52      	ldr	r3, [pc, #328]	; (167a4 <_strerror_r+0x3c8>)
   1665a:	2800      	cmp	r0, #0
   1665c:	bf08      	it	eq
   1665e:	4618      	moveq	r0, r3
   16660:	bd10      	pop	{r4, pc}
   16662:	bf00      	nop
   16664:	00024990 	.word	0x00024990
   16668:	00025004 	.word	0x00025004
   1666c:	00024fec 	.word	0x00024fec
   16670:	00024fd8 	.word	0x00024fd8
   16674:	0002503c 	.word	0x0002503c
   16678:	00024d34 	.word	0x00024d34
   1667c:	00024c6c 	.word	0x00024c6c
   16680:	00024fa4 	.word	0x00024fa4
   16684:	00024fbc 	.word	0x00024fbc
   16688:	00024ba8 	.word	0x00024ba8
   1668c:	00024f68 	.word	0x00024f68
   16690:	00024ddc 	.word	0x00024ddc
   16694:	00025064 	.word	0x00025064
   16698:	00024a70 	.word	0x00024a70
   1669c:	00024a38 	.word	0x00024a38
   166a0:	00024b40 	.word	0x00024b40
   166a4:	00024c40 	.word	0x00024c40
   166a8:	00024b30 	.word	0x00024b30
   166ac:	00025078 	.word	0x00025078
   166b0:	00024b84 	.word	0x00024b84
   166b4:	00024d58 	.word	0x00024d58
   166b8:	00024f80 	.word	0x00024f80
   166bc:	00024f50 	.word	0x00024f50
   166c0:	00024f20 	.word	0x00024f20
   166c4:	00024f08 	.word	0x00024f08
   166c8:	00024ee8 	.word	0x00024ee8
   166cc:	00024ec8 	.word	0x00024ec8
   166d0:	00024e98 	.word	0x00024e98
   166d4:	00024e74 	.word	0x00024e74
   166d8:	00024f34 	.word	0x00024f34
   166dc:	00025018 	.word	0x00025018
   166e0:	00024e5c 	.word	0x00024e5c
   166e4:	00024e40 	.word	0x00024e40
   166e8:	00024e2c 	.word	0x00024e2c
   166ec:	00024e10 	.word	0x00024e10
   166f0:	00024e04 	.word	0x00024e04
   166f4:	00024df0 	.word	0x00024df0
   166f8:	00024dcc 	.word	0x00024dcc
   166fc:	00024db4 	.word	0x00024db4
   16700:	00024da0 	.word	0x00024da0
   16704:	00024d88 	.word	0x00024d88
   16708:	00024e90 	.word	0x00024e90
   1670c:	00024d78 	.word	0x00024d78
   16710:	00024d70 	.word	0x00024d70
   16714:	00024d4c 	.word	0x00024d4c
   16718:	00024d20 	.word	0x00024d20
   1671c:	00024d04 	.word	0x00024d04
   16720:	00024cf0 	.word	0x00024cf0
   16724:	00024cc0 	.word	0x00024cc0
   16728:	00024cb4 	.word	0x00024cb4
   1672c:	00024ca4 	.word	0x00024ca4
   16730:	00024c8c 	.word	0x00024c8c
   16734:	00024c7c 	.word	0x00024c7c
   16738:	00024c54 	.word	0x00024c54
   1673c:	00024c30 	.word	0x00024c30
   16740:	00024c20 	.word	0x00024c20
   16744:	00024c08 	.word	0x00024c08
   16748:	00024be8 	.word	0x00024be8
   1674c:	00024bc8 	.word	0x00024bc8
   16750:	00024b70 	.word	0x00024b70
   16754:	00024b60 	.word	0x00024b60
   16758:	00024b20 	.word	0x00024b20
   1675c:	00024b10 	.word	0x00024b10
   16760:	00024afc 	.word	0x00024afc
   16764:	00024af0 	.word	0x00024af0
   16768:	00024ad8 	.word	0x00024ad8
   1676c:	00024acc 	.word	0x00024acc
   16770:	00024ab8 	.word	0x00024ab8
   16774:	00024aa4 	.word	0x00024aa4
   16778:	00024a90 	.word	0x00024a90
   1677c:	00024a64 	.word	0x00024a64
   16780:	00024a54 	.word	0x00024a54
   16784:	00024a24 	.word	0x00024a24
   16788:	00024a10 	.word	0x00024a10
   1678c:	000249f4 	.word	0x000249f4
   16790:	000249e8 	.word	0x000249e8
   16794:	000249d0 	.word	0x000249d0
   16798:	000249c0 	.word	0x000249c0
   1679c:	000249a4 	.word	0x000249a4
   167a0:	00024998 	.word	0x00024998
   167a4:	0002108c 	.word	0x0002108c

000167a8 <strerror>:
   167a8:	b410      	push	{r4}
   167aa:	4c04      	ldr	r4, [pc, #16]	; (167bc <strerror+0x14>)
   167ac:	2300      	movs	r3, #0
   167ae:	4601      	mov	r1, r0
   167b0:	461a      	mov	r2, r3
   167b2:	6820      	ldr	r0, [r4, #0]
   167b4:	bc10      	pop	{r4}
   167b6:	f7ff be11 	b.w	163dc <_strerror_r>
   167ba:	bf00      	nop
   167bc:	20000020 	.word	0x20000020

000167c0 <strlen>:
   167c0:	f890 f000 	pld	[r0]
   167c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   167c8:	f020 0107 	bic.w	r1, r0, #7
   167cc:	f06f 0c00 	mvn.w	ip, #0
   167d0:	f010 0407 	ands.w	r4, r0, #7
   167d4:	f891 f020 	pld	[r1, #32]
   167d8:	f040 8049 	bne.w	1686e <strlen+0xae>
   167dc:	f04f 0400 	mov.w	r4, #0
   167e0:	f06f 0007 	mvn.w	r0, #7
   167e4:	e9d1 2300 	ldrd	r2, r3, [r1]
   167e8:	f891 f040 	pld	[r1, #64]	; 0x40
   167ec:	f100 0008 	add.w	r0, r0, #8
   167f0:	fa82 f24c 	uadd8	r2, r2, ip
   167f4:	faa4 f28c 	sel	r2, r4, ip
   167f8:	fa83 f34c 	uadd8	r3, r3, ip
   167fc:	faa2 f38c 	sel	r3, r2, ip
   16800:	bb4b      	cbnz	r3, 16856 <strlen+0x96>
   16802:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   16806:	fa82 f24c 	uadd8	r2, r2, ip
   1680a:	f100 0008 	add.w	r0, r0, #8
   1680e:	faa4 f28c 	sel	r2, r4, ip
   16812:	fa83 f34c 	uadd8	r3, r3, ip
   16816:	faa2 f38c 	sel	r3, r2, ip
   1681a:	b9e3      	cbnz	r3, 16856 <strlen+0x96>
   1681c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   16820:	fa82 f24c 	uadd8	r2, r2, ip
   16824:	f100 0008 	add.w	r0, r0, #8
   16828:	faa4 f28c 	sel	r2, r4, ip
   1682c:	fa83 f34c 	uadd8	r3, r3, ip
   16830:	faa2 f38c 	sel	r3, r2, ip
   16834:	b97b      	cbnz	r3, 16856 <strlen+0x96>
   16836:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1683a:	f101 0120 	add.w	r1, r1, #32
   1683e:	fa82 f24c 	uadd8	r2, r2, ip
   16842:	f100 0008 	add.w	r0, r0, #8
   16846:	faa4 f28c 	sel	r2, r4, ip
   1684a:	fa83 f34c 	uadd8	r3, r3, ip
   1684e:	faa2 f38c 	sel	r3, r2, ip
   16852:	2b00      	cmp	r3, #0
   16854:	d0c6      	beq.n	167e4 <strlen+0x24>
   16856:	2a00      	cmp	r2, #0
   16858:	bf04      	itt	eq
   1685a:	3004      	addeq	r0, #4
   1685c:	461a      	moveq	r2, r3
   1685e:	ba12      	rev	r2, r2
   16860:	fab2 f282 	clz	r2, r2
   16864:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   16868:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1686c:	4770      	bx	lr
   1686e:	e9d1 2300 	ldrd	r2, r3, [r1]
   16872:	f004 0503 	and.w	r5, r4, #3
   16876:	f1c4 0000 	rsb	r0, r4, #0
   1687a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1687e:	f014 0f04 	tst.w	r4, #4
   16882:	f891 f040 	pld	[r1, #64]	; 0x40
   16886:	fa0c f505 	lsl.w	r5, ip, r5
   1688a:	ea62 0205 	orn	r2, r2, r5
   1688e:	bf1c      	itt	ne
   16890:	ea63 0305 	ornne	r3, r3, r5
   16894:	4662      	movne	r2, ip
   16896:	f04f 0400 	mov.w	r4, #0
   1689a:	e7a9      	b.n	167f0 <strlen+0x30>

0001689c <strncmp>:
   1689c:	2a00      	cmp	r2, #0
   1689e:	d041      	beq.n	16924 <strncmp+0x88>
   168a0:	ea40 0301 	orr.w	r3, r0, r1
   168a4:	f013 0303 	ands.w	r3, r3, #3
   168a8:	b4f0      	push	{r4, r5, r6, r7}
   168aa:	d125      	bne.n	168f8 <strncmp+0x5c>
   168ac:	2a03      	cmp	r2, #3
   168ae:	d923      	bls.n	168f8 <strncmp+0x5c>
   168b0:	6804      	ldr	r4, [r0, #0]
   168b2:	680d      	ldr	r5, [r1, #0]
   168b4:	42ac      	cmp	r4, r5
   168b6:	d11f      	bne.n	168f8 <strncmp+0x5c>
   168b8:	3a04      	subs	r2, #4
   168ba:	d038      	beq.n	1692e <strncmp+0x92>
   168bc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   168c0:	ea25 0404 	bic.w	r4, r5, r4
   168c4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   168c8:	d12e      	bne.n	16928 <strncmp+0x8c>
   168ca:	3004      	adds	r0, #4
   168cc:	3104      	adds	r1, #4
   168ce:	e00f      	b.n	168f0 <strncmp+0x54>
   168d0:	f850 3b04 	ldr.w	r3, [r0], #4
   168d4:	680e      	ldr	r6, [r1, #0]
   168d6:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   168da:	42b3      	cmp	r3, r6
   168dc:	ea24 0403 	bic.w	r4, r4, r3
   168e0:	f101 0104 	add.w	r1, r1, #4
   168e4:	d126      	bne.n	16934 <strncmp+0x98>
   168e6:	3a04      	subs	r2, #4
   168e8:	d021      	beq.n	1692e <strncmp+0x92>
   168ea:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   168ee:	d11b      	bne.n	16928 <strncmp+0x8c>
   168f0:	2a03      	cmp	r2, #3
   168f2:	4607      	mov	r7, r0
   168f4:	460d      	mov	r5, r1
   168f6:	d8eb      	bhi.n	168d0 <strncmp+0x34>
   168f8:	7805      	ldrb	r5, [r0, #0]
   168fa:	780c      	ldrb	r4, [r1, #0]
   168fc:	42ac      	cmp	r4, r5
   168fe:	f102 33ff 	add.w	r3, r2, #4294967295
   16902:	d11a      	bne.n	1693a <strncmp+0x9e>
   16904:	b183      	cbz	r3, 16928 <strncmp+0x8c>
   16906:	b914      	cbnz	r4, 1690e <strncmp+0x72>
   16908:	e00e      	b.n	16928 <strncmp+0x8c>
   1690a:	b16b      	cbz	r3, 16928 <strncmp+0x8c>
   1690c:	b17a      	cbz	r2, 1692e <strncmp+0x92>
   1690e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   16912:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   16916:	42a2      	cmp	r2, r4
   16918:	f103 33ff 	add.w	r3, r3, #4294967295
   1691c:	d0f5      	beq.n	1690a <strncmp+0x6e>
   1691e:	1b10      	subs	r0, r2, r4
   16920:	bcf0      	pop	{r4, r5, r6, r7}
   16922:	4770      	bx	lr
   16924:	4610      	mov	r0, r2
   16926:	4770      	bx	lr
   16928:	2000      	movs	r0, #0
   1692a:	bcf0      	pop	{r4, r5, r6, r7}
   1692c:	4770      	bx	lr
   1692e:	4610      	mov	r0, r2
   16930:	bcf0      	pop	{r4, r5, r6, r7}
   16932:	4770      	bx	lr
   16934:	4629      	mov	r1, r5
   16936:	4638      	mov	r0, r7
   16938:	e7de      	b.n	168f8 <strncmp+0x5c>
   1693a:	462a      	mov	r2, r5
   1693c:	e7ef      	b.n	1691e <strncmp+0x82>
   1693e:	bf00      	nop

00016940 <_svfprintf_r>:
   16940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16944:	b0c3      	sub	sp, #268	; 0x10c
   16946:	460c      	mov	r4, r1
   16948:	910b      	str	r1, [sp, #44]	; 0x2c
   1694a:	4692      	mov	sl, r2
   1694c:	930f      	str	r3, [sp, #60]	; 0x3c
   1694e:	900c      	str	r0, [sp, #48]	; 0x30
   16950:	f005 f874 	bl	1ba3c <_localeconv_r>
   16954:	6803      	ldr	r3, [r0, #0]
   16956:	931a      	str	r3, [sp, #104]	; 0x68
   16958:	4618      	mov	r0, r3
   1695a:	f7ff ff31 	bl	167c0 <strlen>
   1695e:	89a3      	ldrh	r3, [r4, #12]
   16960:	9019      	str	r0, [sp, #100]	; 0x64
   16962:	0619      	lsls	r1, r3, #24
   16964:	d503      	bpl.n	1696e <_svfprintf_r+0x2e>
   16966:	6923      	ldr	r3, [r4, #16]
   16968:	2b00      	cmp	r3, #0
   1696a:	f001 8003 	beq.w	17974 <_svfprintf_r+0x1034>
   1696e:	2300      	movs	r3, #0
   16970:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   16974:	9313      	str	r3, [sp, #76]	; 0x4c
   16976:	9315      	str	r3, [sp, #84]	; 0x54
   16978:	9314      	str	r3, [sp, #80]	; 0x50
   1697a:	9327      	str	r3, [sp, #156]	; 0x9c
   1697c:	9326      	str	r3, [sp, #152]	; 0x98
   1697e:	9318      	str	r3, [sp, #96]	; 0x60
   16980:	931b      	str	r3, [sp, #108]	; 0x6c
   16982:	9309      	str	r3, [sp, #36]	; 0x24
   16984:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   16988:	46c8      	mov	r8, r9
   1698a:	9316      	str	r3, [sp, #88]	; 0x58
   1698c:	9317      	str	r3, [sp, #92]	; 0x5c
   1698e:	f89a 3000 	ldrb.w	r3, [sl]
   16992:	4654      	mov	r4, sl
   16994:	b1e3      	cbz	r3, 169d0 <_svfprintf_r+0x90>
   16996:	2b25      	cmp	r3, #37	; 0x25
   16998:	d102      	bne.n	169a0 <_svfprintf_r+0x60>
   1699a:	e019      	b.n	169d0 <_svfprintf_r+0x90>
   1699c:	2b25      	cmp	r3, #37	; 0x25
   1699e:	d003      	beq.n	169a8 <_svfprintf_r+0x68>
   169a0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   169a4:	2b00      	cmp	r3, #0
   169a6:	d1f9      	bne.n	1699c <_svfprintf_r+0x5c>
   169a8:	eba4 050a 	sub.w	r5, r4, sl
   169ac:	b185      	cbz	r5, 169d0 <_svfprintf_r+0x90>
   169ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   169b0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   169b2:	f8c8 a000 	str.w	sl, [r8]
   169b6:	3301      	adds	r3, #1
   169b8:	442a      	add	r2, r5
   169ba:	2b07      	cmp	r3, #7
   169bc:	f8c8 5004 	str.w	r5, [r8, #4]
   169c0:	9227      	str	r2, [sp, #156]	; 0x9c
   169c2:	9326      	str	r3, [sp, #152]	; 0x98
   169c4:	dc7f      	bgt.n	16ac6 <_svfprintf_r+0x186>
   169c6:	f108 0808 	add.w	r8, r8, #8
   169ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   169cc:	442b      	add	r3, r5
   169ce:	9309      	str	r3, [sp, #36]	; 0x24
   169d0:	7823      	ldrb	r3, [r4, #0]
   169d2:	2b00      	cmp	r3, #0
   169d4:	d07f      	beq.n	16ad6 <_svfprintf_r+0x196>
   169d6:	2300      	movs	r3, #0
   169d8:	461a      	mov	r2, r3
   169da:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   169de:	4619      	mov	r1, r3
   169e0:	930d      	str	r3, [sp, #52]	; 0x34
   169e2:	469b      	mov	fp, r3
   169e4:	f04f 30ff 	mov.w	r0, #4294967295
   169e8:	7863      	ldrb	r3, [r4, #1]
   169ea:	900a      	str	r0, [sp, #40]	; 0x28
   169ec:	f104 0a01 	add.w	sl, r4, #1
   169f0:	f10a 0a01 	add.w	sl, sl, #1
   169f4:	f1a3 0020 	sub.w	r0, r3, #32
   169f8:	2858      	cmp	r0, #88	; 0x58
   169fa:	f200 83c1 	bhi.w	17180 <_svfprintf_r+0x840>
   169fe:	e8df f010 	tbh	[pc, r0, lsl #1]
   16a02:	0238      	.short	0x0238
   16a04:	03bf03bf 	.word	0x03bf03bf
   16a08:	03bf0240 	.word	0x03bf0240
   16a0c:	03bf03bf 	.word	0x03bf03bf
   16a10:	03bf03bf 	.word	0x03bf03bf
   16a14:	024503bf 	.word	0x024503bf
   16a18:	03bf0203 	.word	0x03bf0203
   16a1c:	026b005d 	.word	0x026b005d
   16a20:	028603bf 	.word	0x028603bf
   16a24:	039d039d 	.word	0x039d039d
   16a28:	039d039d 	.word	0x039d039d
   16a2c:	039d039d 	.word	0x039d039d
   16a30:	039d039d 	.word	0x039d039d
   16a34:	03bf039d 	.word	0x03bf039d
   16a38:	03bf03bf 	.word	0x03bf03bf
   16a3c:	03bf03bf 	.word	0x03bf03bf
   16a40:	03bf03bf 	.word	0x03bf03bf
   16a44:	03bf03bf 	.word	0x03bf03bf
   16a48:	033703bf 	.word	0x033703bf
   16a4c:	03bf0357 	.word	0x03bf0357
   16a50:	03bf0357 	.word	0x03bf0357
   16a54:	03bf03bf 	.word	0x03bf03bf
   16a58:	039803bf 	.word	0x039803bf
   16a5c:	03bf03bf 	.word	0x03bf03bf
   16a60:	03bf03ad 	.word	0x03bf03ad
   16a64:	03bf03bf 	.word	0x03bf03bf
   16a68:	03bf03bf 	.word	0x03bf03bf
   16a6c:	03bf0259 	.word	0x03bf0259
   16a70:	031e03bf 	.word	0x031e03bf
   16a74:	03bf03bf 	.word	0x03bf03bf
   16a78:	03bf03bf 	.word	0x03bf03bf
   16a7c:	03bf03bf 	.word	0x03bf03bf
   16a80:	03bf03bf 	.word	0x03bf03bf
   16a84:	03bf03bf 	.word	0x03bf03bf
   16a88:	02db02c6 	.word	0x02db02c6
   16a8c:	03570357 	.word	0x03570357
   16a90:	028b0357 	.word	0x028b0357
   16a94:	03bf02db 	.word	0x03bf02db
   16a98:	029003bf 	.word	0x029003bf
   16a9c:	029d03bf 	.word	0x029d03bf
   16aa0:	02b401cc 	.word	0x02b401cc
   16aa4:	03bf0208 	.word	0x03bf0208
   16aa8:	03bf01e1 	.word	0x03bf01e1
   16aac:	03bf007e 	.word	0x03bf007e
   16ab0:	020d03bf 	.word	0x020d03bf
   16ab4:	980d      	ldr	r0, [sp, #52]	; 0x34
   16ab6:	930f      	str	r3, [sp, #60]	; 0x3c
   16ab8:	4240      	negs	r0, r0
   16aba:	900d      	str	r0, [sp, #52]	; 0x34
   16abc:	f04b 0b04 	orr.w	fp, fp, #4
   16ac0:	f89a 3000 	ldrb.w	r3, [sl]
   16ac4:	e794      	b.n	169f0 <_svfprintf_r+0xb0>
   16ac6:	aa25      	add	r2, sp, #148	; 0x94
   16ac8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16aca:	980c      	ldr	r0, [sp, #48]	; 0x30
   16acc:	f005 faea 	bl	1c0a4 <__ssprint_r>
   16ad0:	b940      	cbnz	r0, 16ae4 <_svfprintf_r+0x1a4>
   16ad2:	46c8      	mov	r8, r9
   16ad4:	e779      	b.n	169ca <_svfprintf_r+0x8a>
   16ad6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   16ad8:	b123      	cbz	r3, 16ae4 <_svfprintf_r+0x1a4>
   16ada:	980c      	ldr	r0, [sp, #48]	; 0x30
   16adc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16ade:	aa25      	add	r2, sp, #148	; 0x94
   16ae0:	f005 fae0 	bl	1c0a4 <__ssprint_r>
   16ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16ae6:	899b      	ldrh	r3, [r3, #12]
   16ae8:	f013 0f40 	tst.w	r3, #64	; 0x40
   16aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16aee:	bf18      	it	ne
   16af0:	f04f 33ff 	movne.w	r3, #4294967295
   16af4:	9309      	str	r3, [sp, #36]	; 0x24
   16af6:	9809      	ldr	r0, [sp, #36]	; 0x24
   16af8:	b043      	add	sp, #268	; 0x10c
   16afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16afe:	f01b 0f20 	tst.w	fp, #32
   16b02:	9311      	str	r3, [sp, #68]	; 0x44
   16b04:	f040 81dd 	bne.w	16ec2 <_svfprintf_r+0x582>
   16b08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   16b0a:	f01b 0f10 	tst.w	fp, #16
   16b0e:	4613      	mov	r3, r2
   16b10:	f040 856e 	bne.w	175f0 <_svfprintf_r+0xcb0>
   16b14:	f01b 0f40 	tst.w	fp, #64	; 0x40
   16b18:	f000 856a 	beq.w	175f0 <_svfprintf_r+0xcb0>
   16b1c:	8814      	ldrh	r4, [r2, #0]
   16b1e:	3204      	adds	r2, #4
   16b20:	2500      	movs	r5, #0
   16b22:	2301      	movs	r3, #1
   16b24:	920f      	str	r2, [sp, #60]	; 0x3c
   16b26:	2700      	movs	r7, #0
   16b28:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   16b2c:	990a      	ldr	r1, [sp, #40]	; 0x28
   16b2e:	1c4a      	adds	r2, r1, #1
   16b30:	f000 8265 	beq.w	16ffe <_svfprintf_r+0x6be>
   16b34:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   16b38:	9207      	str	r2, [sp, #28]
   16b3a:	ea54 0205 	orrs.w	r2, r4, r5
   16b3e:	f040 8264 	bne.w	1700a <_svfprintf_r+0x6ca>
   16b42:	2900      	cmp	r1, #0
   16b44:	f040 843c 	bne.w	173c0 <_svfprintf_r+0xa80>
   16b48:	2b00      	cmp	r3, #0
   16b4a:	f040 84d7 	bne.w	174fc <_svfprintf_r+0xbbc>
   16b4e:	f01b 0301 	ands.w	r3, fp, #1
   16b52:	930e      	str	r3, [sp, #56]	; 0x38
   16b54:	f000 8604 	beq.w	17760 <_svfprintf_r+0xe20>
   16b58:	ae42      	add	r6, sp, #264	; 0x108
   16b5a:	2330      	movs	r3, #48	; 0x30
   16b5c:	f806 3d41 	strb.w	r3, [r6, #-65]!
   16b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16b62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16b64:	4293      	cmp	r3, r2
   16b66:	bfb8      	it	lt
   16b68:	4613      	movlt	r3, r2
   16b6a:	9308      	str	r3, [sp, #32]
   16b6c:	2300      	movs	r3, #0
   16b6e:	9312      	str	r3, [sp, #72]	; 0x48
   16b70:	b117      	cbz	r7, 16b78 <_svfprintf_r+0x238>
   16b72:	9b08      	ldr	r3, [sp, #32]
   16b74:	3301      	adds	r3, #1
   16b76:	9308      	str	r3, [sp, #32]
   16b78:	9b07      	ldr	r3, [sp, #28]
   16b7a:	f013 0302 	ands.w	r3, r3, #2
   16b7e:	9310      	str	r3, [sp, #64]	; 0x40
   16b80:	d002      	beq.n	16b88 <_svfprintf_r+0x248>
   16b82:	9b08      	ldr	r3, [sp, #32]
   16b84:	3302      	adds	r3, #2
   16b86:	9308      	str	r3, [sp, #32]
   16b88:	9b07      	ldr	r3, [sp, #28]
   16b8a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   16b8e:	f040 830e 	bne.w	171ae <_svfprintf_r+0x86e>
   16b92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16b94:	9a08      	ldr	r2, [sp, #32]
   16b96:	eba3 0b02 	sub.w	fp, r3, r2
   16b9a:	f1bb 0f00 	cmp.w	fp, #0
   16b9e:	f340 8306 	ble.w	171ae <_svfprintf_r+0x86e>
   16ba2:	f1bb 0f10 	cmp.w	fp, #16
   16ba6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   16ba8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   16baa:	dd29      	ble.n	16c00 <_svfprintf_r+0x2c0>
   16bac:	4643      	mov	r3, r8
   16bae:	4621      	mov	r1, r4
   16bb0:	46a8      	mov	r8, r5
   16bb2:	2710      	movs	r7, #16
   16bb4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   16bb6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   16bb8:	e006      	b.n	16bc8 <_svfprintf_r+0x288>
   16bba:	f1ab 0b10 	sub.w	fp, fp, #16
   16bbe:	f1bb 0f10 	cmp.w	fp, #16
   16bc2:	f103 0308 	add.w	r3, r3, #8
   16bc6:	dd18      	ble.n	16bfa <_svfprintf_r+0x2ba>
   16bc8:	3201      	adds	r2, #1
   16bca:	48b7      	ldr	r0, [pc, #732]	; (16ea8 <_svfprintf_r+0x568>)
   16bcc:	9226      	str	r2, [sp, #152]	; 0x98
   16bce:	3110      	adds	r1, #16
   16bd0:	2a07      	cmp	r2, #7
   16bd2:	9127      	str	r1, [sp, #156]	; 0x9c
   16bd4:	e883 0081 	stmia.w	r3, {r0, r7}
   16bd8:	ddef      	ble.n	16bba <_svfprintf_r+0x27a>
   16bda:	aa25      	add	r2, sp, #148	; 0x94
   16bdc:	4629      	mov	r1, r5
   16bde:	4620      	mov	r0, r4
   16be0:	f005 fa60 	bl	1c0a4 <__ssprint_r>
   16be4:	2800      	cmp	r0, #0
   16be6:	f47f af7d 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   16bea:	f1ab 0b10 	sub.w	fp, fp, #16
   16bee:	f1bb 0f10 	cmp.w	fp, #16
   16bf2:	9927      	ldr	r1, [sp, #156]	; 0x9c
   16bf4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   16bf6:	464b      	mov	r3, r9
   16bf8:	dce6      	bgt.n	16bc8 <_svfprintf_r+0x288>
   16bfa:	4645      	mov	r5, r8
   16bfc:	460c      	mov	r4, r1
   16bfe:	4698      	mov	r8, r3
   16c00:	3201      	adds	r2, #1
   16c02:	4ba9      	ldr	r3, [pc, #676]	; (16ea8 <_svfprintf_r+0x568>)
   16c04:	9226      	str	r2, [sp, #152]	; 0x98
   16c06:	445c      	add	r4, fp
   16c08:	2a07      	cmp	r2, #7
   16c0a:	9427      	str	r4, [sp, #156]	; 0x9c
   16c0c:	e888 0808 	stmia.w	r8, {r3, fp}
   16c10:	f300 8498 	bgt.w	17544 <_svfprintf_r+0xc04>
   16c14:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   16c18:	f108 0808 	add.w	r8, r8, #8
   16c1c:	b177      	cbz	r7, 16c3c <_svfprintf_r+0x2fc>
   16c1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   16c20:	3301      	adds	r3, #1
   16c22:	3401      	adds	r4, #1
   16c24:	f10d 0177 	add.w	r1, sp, #119	; 0x77
   16c28:	2201      	movs	r2, #1
   16c2a:	2b07      	cmp	r3, #7
   16c2c:	9427      	str	r4, [sp, #156]	; 0x9c
   16c2e:	9326      	str	r3, [sp, #152]	; 0x98
   16c30:	e888 0006 	stmia.w	r8, {r1, r2}
   16c34:	f300 83db 	bgt.w	173ee <_svfprintf_r+0xaae>
   16c38:	f108 0808 	add.w	r8, r8, #8
   16c3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16c3e:	b16b      	cbz	r3, 16c5c <_svfprintf_r+0x31c>
   16c40:	9b26      	ldr	r3, [sp, #152]	; 0x98
   16c42:	3301      	adds	r3, #1
   16c44:	3402      	adds	r4, #2
   16c46:	a91e      	add	r1, sp, #120	; 0x78
   16c48:	2202      	movs	r2, #2
   16c4a:	2b07      	cmp	r3, #7
   16c4c:	9427      	str	r4, [sp, #156]	; 0x9c
   16c4e:	9326      	str	r3, [sp, #152]	; 0x98
   16c50:	e888 0006 	stmia.w	r8, {r1, r2}
   16c54:	f300 83d6 	bgt.w	17404 <_svfprintf_r+0xac4>
   16c58:	f108 0808 	add.w	r8, r8, #8
   16c5c:	2d80      	cmp	r5, #128	; 0x80
   16c5e:	f000 8315 	beq.w	1728c <_svfprintf_r+0x94c>
   16c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16c64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16c66:	1a9f      	subs	r7, r3, r2
   16c68:	2f00      	cmp	r7, #0
   16c6a:	dd36      	ble.n	16cda <_svfprintf_r+0x39a>
   16c6c:	2f10      	cmp	r7, #16
   16c6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   16c70:	4d8e      	ldr	r5, [pc, #568]	; (16eac <_svfprintf_r+0x56c>)
   16c72:	dd27      	ble.n	16cc4 <_svfprintf_r+0x384>
   16c74:	4642      	mov	r2, r8
   16c76:	4621      	mov	r1, r4
   16c78:	46b0      	mov	r8, r6
   16c7a:	f04f 0b10 	mov.w	fp, #16
   16c7e:	462e      	mov	r6, r5
   16c80:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   16c82:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   16c84:	e004      	b.n	16c90 <_svfprintf_r+0x350>
   16c86:	3f10      	subs	r7, #16
   16c88:	2f10      	cmp	r7, #16
   16c8a:	f102 0208 	add.w	r2, r2, #8
   16c8e:	dd15      	ble.n	16cbc <_svfprintf_r+0x37c>
   16c90:	3301      	adds	r3, #1
   16c92:	3110      	adds	r1, #16
   16c94:	2b07      	cmp	r3, #7
   16c96:	9127      	str	r1, [sp, #156]	; 0x9c
   16c98:	9326      	str	r3, [sp, #152]	; 0x98
   16c9a:	e882 0840 	stmia.w	r2, {r6, fp}
   16c9e:	ddf2      	ble.n	16c86 <_svfprintf_r+0x346>
   16ca0:	aa25      	add	r2, sp, #148	; 0x94
   16ca2:	4629      	mov	r1, r5
   16ca4:	4620      	mov	r0, r4
   16ca6:	f005 f9fd 	bl	1c0a4 <__ssprint_r>
   16caa:	2800      	cmp	r0, #0
   16cac:	f47f af1a 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   16cb0:	3f10      	subs	r7, #16
   16cb2:	2f10      	cmp	r7, #16
   16cb4:	9927      	ldr	r1, [sp, #156]	; 0x9c
   16cb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   16cb8:	464a      	mov	r2, r9
   16cba:	dce9      	bgt.n	16c90 <_svfprintf_r+0x350>
   16cbc:	4635      	mov	r5, r6
   16cbe:	460c      	mov	r4, r1
   16cc0:	4646      	mov	r6, r8
   16cc2:	4690      	mov	r8, r2
   16cc4:	3301      	adds	r3, #1
   16cc6:	443c      	add	r4, r7
   16cc8:	2b07      	cmp	r3, #7
   16cca:	9427      	str	r4, [sp, #156]	; 0x9c
   16ccc:	9326      	str	r3, [sp, #152]	; 0x98
   16cce:	e888 00a0 	stmia.w	r8, {r5, r7}
   16cd2:	f300 8381 	bgt.w	173d8 <_svfprintf_r+0xa98>
   16cd6:	f108 0808 	add.w	r8, r8, #8
   16cda:	9b07      	ldr	r3, [sp, #28]
   16cdc:	05df      	lsls	r7, r3, #23
   16cde:	f100 8268 	bmi.w	171b2 <_svfprintf_r+0x872>
   16ce2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   16ce4:	990e      	ldr	r1, [sp, #56]	; 0x38
   16ce6:	f8c8 6000 	str.w	r6, [r8]
   16cea:	3301      	adds	r3, #1
   16cec:	440c      	add	r4, r1
   16cee:	2b07      	cmp	r3, #7
   16cf0:	9427      	str	r4, [sp, #156]	; 0x9c
   16cf2:	f8c8 1004 	str.w	r1, [r8, #4]
   16cf6:	9326      	str	r3, [sp, #152]	; 0x98
   16cf8:	f300 834d 	bgt.w	17396 <_svfprintf_r+0xa56>
   16cfc:	f108 0808 	add.w	r8, r8, #8
   16d00:	9b07      	ldr	r3, [sp, #28]
   16d02:	075b      	lsls	r3, r3, #29
   16d04:	d53a      	bpl.n	16d7c <_svfprintf_r+0x43c>
   16d06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16d08:	9a08      	ldr	r2, [sp, #32]
   16d0a:	1a9d      	subs	r5, r3, r2
   16d0c:	2d00      	cmp	r5, #0
   16d0e:	dd35      	ble.n	16d7c <_svfprintf_r+0x43c>
   16d10:	2d10      	cmp	r5, #16
   16d12:	9b26      	ldr	r3, [sp, #152]	; 0x98
   16d14:	dd20      	ble.n	16d58 <_svfprintf_r+0x418>
   16d16:	2610      	movs	r6, #16
   16d18:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   16d1a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   16d1e:	e004      	b.n	16d2a <_svfprintf_r+0x3ea>
   16d20:	3d10      	subs	r5, #16
   16d22:	2d10      	cmp	r5, #16
   16d24:	f108 0808 	add.w	r8, r8, #8
   16d28:	dd16      	ble.n	16d58 <_svfprintf_r+0x418>
   16d2a:	3301      	adds	r3, #1
   16d2c:	4a5e      	ldr	r2, [pc, #376]	; (16ea8 <_svfprintf_r+0x568>)
   16d2e:	9326      	str	r3, [sp, #152]	; 0x98
   16d30:	3410      	adds	r4, #16
   16d32:	2b07      	cmp	r3, #7
   16d34:	9427      	str	r4, [sp, #156]	; 0x9c
   16d36:	e888 0044 	stmia.w	r8, {r2, r6}
   16d3a:	ddf1      	ble.n	16d20 <_svfprintf_r+0x3e0>
   16d3c:	aa25      	add	r2, sp, #148	; 0x94
   16d3e:	4659      	mov	r1, fp
   16d40:	4638      	mov	r0, r7
   16d42:	f005 f9af 	bl	1c0a4 <__ssprint_r>
   16d46:	2800      	cmp	r0, #0
   16d48:	f47f aecc 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   16d4c:	3d10      	subs	r5, #16
   16d4e:	2d10      	cmp	r5, #16
   16d50:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   16d52:	9b26      	ldr	r3, [sp, #152]	; 0x98
   16d54:	46c8      	mov	r8, r9
   16d56:	dce8      	bgt.n	16d2a <_svfprintf_r+0x3ea>
   16d58:	3301      	adds	r3, #1
   16d5a:	4a53      	ldr	r2, [pc, #332]	; (16ea8 <_svfprintf_r+0x568>)
   16d5c:	9326      	str	r3, [sp, #152]	; 0x98
   16d5e:	442c      	add	r4, r5
   16d60:	2b07      	cmp	r3, #7
   16d62:	9427      	str	r4, [sp, #156]	; 0x9c
   16d64:	e888 0024 	stmia.w	r8, {r2, r5}
   16d68:	dd08      	ble.n	16d7c <_svfprintf_r+0x43c>
   16d6a:	aa25      	add	r2, sp, #148	; 0x94
   16d6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16d6e:	980c      	ldr	r0, [sp, #48]	; 0x30
   16d70:	f005 f998 	bl	1c0a4 <__ssprint_r>
   16d74:	2800      	cmp	r0, #0
   16d76:	f47f aeb5 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   16d7a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   16d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16d7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16d80:	9908      	ldr	r1, [sp, #32]
   16d82:	428a      	cmp	r2, r1
   16d84:	bfac      	ite	ge
   16d86:	189b      	addge	r3, r3, r2
   16d88:	185b      	addlt	r3, r3, r1
   16d8a:	9309      	str	r3, [sp, #36]	; 0x24
   16d8c:	2c00      	cmp	r4, #0
   16d8e:	f040 830d 	bne.w	173ac <_svfprintf_r+0xa6c>
   16d92:	2300      	movs	r3, #0
   16d94:	9326      	str	r3, [sp, #152]	; 0x98
   16d96:	46c8      	mov	r8, r9
   16d98:	e5f9      	b.n	1698e <_svfprintf_r+0x4e>
   16d9a:	9311      	str	r3, [sp, #68]	; 0x44
   16d9c:	f01b 0320 	ands.w	r3, fp, #32
   16da0:	f040 81e3 	bne.w	1716a <_svfprintf_r+0x82a>
   16da4:	f01b 0210 	ands.w	r2, fp, #16
   16da8:	f040 842e 	bne.w	17608 <_svfprintf_r+0xcc8>
   16dac:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   16db0:	f000 842a 	beq.w	17608 <_svfprintf_r+0xcc8>
   16db4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   16db6:	4613      	mov	r3, r2
   16db8:	460a      	mov	r2, r1
   16dba:	3204      	adds	r2, #4
   16dbc:	880c      	ldrh	r4, [r1, #0]
   16dbe:	920f      	str	r2, [sp, #60]	; 0x3c
   16dc0:	2500      	movs	r5, #0
   16dc2:	e6b0      	b.n	16b26 <_svfprintf_r+0x1e6>
   16dc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   16dc6:	9311      	str	r3, [sp, #68]	; 0x44
   16dc8:	6816      	ldr	r6, [r2, #0]
   16dca:	2400      	movs	r4, #0
   16dcc:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
   16dd0:	1d15      	adds	r5, r2, #4
   16dd2:	2e00      	cmp	r6, #0
   16dd4:	f000 86a7 	beq.w	17b26 <_svfprintf_r+0x11e6>
   16dd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16dda:	1c53      	adds	r3, r2, #1
   16ddc:	f000 8609 	beq.w	179f2 <_svfprintf_r+0x10b2>
   16de0:	4621      	mov	r1, r4
   16de2:	4630      	mov	r0, r6
   16de4:	f7fe fcec 	bl	157c0 <memchr>
   16de8:	2800      	cmp	r0, #0
   16dea:	f000 86e1 	beq.w	17bb0 <_svfprintf_r+0x1270>
   16dee:	1b83      	subs	r3, r0, r6
   16df0:	930e      	str	r3, [sp, #56]	; 0x38
   16df2:	940a      	str	r4, [sp, #40]	; 0x28
   16df4:	950f      	str	r5, [sp, #60]	; 0x3c
   16df6:	f8cd b01c 	str.w	fp, [sp, #28]
   16dfa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   16dfe:	9308      	str	r3, [sp, #32]
   16e00:	9412      	str	r4, [sp, #72]	; 0x48
   16e02:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   16e06:	e6b3      	b.n	16b70 <_svfprintf_r+0x230>
   16e08:	f89a 3000 	ldrb.w	r3, [sl]
   16e0c:	2201      	movs	r2, #1
   16e0e:	212b      	movs	r1, #43	; 0x2b
   16e10:	e5ee      	b.n	169f0 <_svfprintf_r+0xb0>
   16e12:	f04b 0b20 	orr.w	fp, fp, #32
   16e16:	f89a 3000 	ldrb.w	r3, [sl]
   16e1a:	e5e9      	b.n	169f0 <_svfprintf_r+0xb0>
   16e1c:	9311      	str	r3, [sp, #68]	; 0x44
   16e1e:	2a00      	cmp	r2, #0
   16e20:	f040 8795 	bne.w	17d4e <_svfprintf_r+0x140e>
   16e24:	4b22      	ldr	r3, [pc, #136]	; (16eb0 <_svfprintf_r+0x570>)
   16e26:	9318      	str	r3, [sp, #96]	; 0x60
   16e28:	f01b 0f20 	tst.w	fp, #32
   16e2c:	f040 8111 	bne.w	17052 <_svfprintf_r+0x712>
   16e30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   16e32:	f01b 0f10 	tst.w	fp, #16
   16e36:	4613      	mov	r3, r2
   16e38:	f040 83e1 	bne.w	175fe <_svfprintf_r+0xcbe>
   16e3c:	f01b 0f40 	tst.w	fp, #64	; 0x40
   16e40:	f000 83dd 	beq.w	175fe <_svfprintf_r+0xcbe>
   16e44:	3304      	adds	r3, #4
   16e46:	8814      	ldrh	r4, [r2, #0]
   16e48:	930f      	str	r3, [sp, #60]	; 0x3c
   16e4a:	2500      	movs	r5, #0
   16e4c:	f01b 0f01 	tst.w	fp, #1
   16e50:	f000 810c 	beq.w	1706c <_svfprintf_r+0x72c>
   16e54:	ea54 0305 	orrs.w	r3, r4, r5
   16e58:	f000 8108 	beq.w	1706c <_svfprintf_r+0x72c>
   16e5c:	2330      	movs	r3, #48	; 0x30
   16e5e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   16e62:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   16e66:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   16e6a:	f04b 0b02 	orr.w	fp, fp, #2
   16e6e:	2302      	movs	r3, #2
   16e70:	e659      	b.n	16b26 <_svfprintf_r+0x1e6>
   16e72:	f89a 3000 	ldrb.w	r3, [sl]
   16e76:	2900      	cmp	r1, #0
   16e78:	f47f adba 	bne.w	169f0 <_svfprintf_r+0xb0>
   16e7c:	2201      	movs	r2, #1
   16e7e:	2120      	movs	r1, #32
   16e80:	e5b6      	b.n	169f0 <_svfprintf_r+0xb0>
   16e82:	f04b 0b01 	orr.w	fp, fp, #1
   16e86:	f89a 3000 	ldrb.w	r3, [sl]
   16e8a:	e5b1      	b.n	169f0 <_svfprintf_r+0xb0>
   16e8c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   16e8e:	6823      	ldr	r3, [r4, #0]
   16e90:	930d      	str	r3, [sp, #52]	; 0x34
   16e92:	4618      	mov	r0, r3
   16e94:	2800      	cmp	r0, #0
   16e96:	4623      	mov	r3, r4
   16e98:	f103 0304 	add.w	r3, r3, #4
   16e9c:	f6ff ae0a 	blt.w	16ab4 <_svfprintf_r+0x174>
   16ea0:	930f      	str	r3, [sp, #60]	; 0x3c
   16ea2:	f89a 3000 	ldrb.w	r3, [sl]
   16ea6:	e5a3      	b.n	169f0 <_svfprintf_r+0xb0>
   16ea8:	000250d0 	.word	0x000250d0
   16eac:	000250e0 	.word	0x000250e0
   16eb0:	000250b4 	.word	0x000250b4
   16eb4:	f04b 0b10 	orr.w	fp, fp, #16
   16eb8:	f01b 0f20 	tst.w	fp, #32
   16ebc:	9311      	str	r3, [sp, #68]	; 0x44
   16ebe:	f43f ae23 	beq.w	16b08 <_svfprintf_r+0x1c8>
   16ec2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   16ec4:	3507      	adds	r5, #7
   16ec6:	f025 0307 	bic.w	r3, r5, #7
   16eca:	f103 0208 	add.w	r2, r3, #8
   16ece:	e9d3 4500 	ldrd	r4, r5, [r3]
   16ed2:	920f      	str	r2, [sp, #60]	; 0x3c
   16ed4:	2301      	movs	r3, #1
   16ed6:	e626      	b.n	16b26 <_svfprintf_r+0x1e6>
   16ed8:	f89a 3000 	ldrb.w	r3, [sl]
   16edc:	2b2a      	cmp	r3, #42	; 0x2a
   16ede:	f10a 0401 	add.w	r4, sl, #1
   16ee2:	f000 8727 	beq.w	17d34 <_svfprintf_r+0x13f4>
   16ee6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   16eea:	2809      	cmp	r0, #9
   16eec:	46a2      	mov	sl, r4
   16eee:	f200 86ad 	bhi.w	17c4c <_svfprintf_r+0x130c>
   16ef2:	2300      	movs	r3, #0
   16ef4:	461c      	mov	r4, r3
   16ef6:	f81a 3b01 	ldrb.w	r3, [sl], #1
   16efa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   16efe:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   16f02:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   16f06:	2809      	cmp	r0, #9
   16f08:	d9f5      	bls.n	16ef6 <_svfprintf_r+0x5b6>
   16f0a:	940a      	str	r4, [sp, #40]	; 0x28
   16f0c:	e572      	b.n	169f4 <_svfprintf_r+0xb4>
   16f0e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   16f12:	f89a 3000 	ldrb.w	r3, [sl]
   16f16:	e56b      	b.n	169f0 <_svfprintf_r+0xb0>
   16f18:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   16f1c:	f89a 3000 	ldrb.w	r3, [sl]
   16f20:	e566      	b.n	169f0 <_svfprintf_r+0xb0>
   16f22:	f89a 3000 	ldrb.w	r3, [sl]
   16f26:	2b6c      	cmp	r3, #108	; 0x6c
   16f28:	bf03      	ittte	eq
   16f2a:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   16f2e:	f04b 0b20 	orreq.w	fp, fp, #32
   16f32:	f10a 0a01 	addeq.w	sl, sl, #1
   16f36:	f04b 0b10 	orrne.w	fp, fp, #16
   16f3a:	e559      	b.n	169f0 <_svfprintf_r+0xb0>
   16f3c:	2a00      	cmp	r2, #0
   16f3e:	f040 8711 	bne.w	17d64 <_svfprintf_r+0x1424>
   16f42:	f01b 0f20 	tst.w	fp, #32
   16f46:	f040 84f9 	bne.w	1793c <_svfprintf_r+0xffc>
   16f4a:	f01b 0f10 	tst.w	fp, #16
   16f4e:	f040 84ac 	bne.w	178aa <_svfprintf_r+0xf6a>
   16f52:	f01b 0f40 	tst.w	fp, #64	; 0x40
   16f56:	f000 84a8 	beq.w	178aa <_svfprintf_r+0xf6a>
   16f5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   16f5c:	6813      	ldr	r3, [r2, #0]
   16f5e:	3204      	adds	r2, #4
   16f60:	920f      	str	r2, [sp, #60]	; 0x3c
   16f62:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   16f66:	801a      	strh	r2, [r3, #0]
   16f68:	e511      	b.n	1698e <_svfprintf_r+0x4e>
   16f6a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   16f6c:	4bb3      	ldr	r3, [pc, #716]	; (1723c <_svfprintf_r+0x8fc>)
   16f6e:	680c      	ldr	r4, [r1, #0]
   16f70:	9318      	str	r3, [sp, #96]	; 0x60
   16f72:	2230      	movs	r2, #48	; 0x30
   16f74:	2378      	movs	r3, #120	; 0x78
   16f76:	3104      	adds	r1, #4
   16f78:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   16f7c:	9311      	str	r3, [sp, #68]	; 0x44
   16f7e:	f04b 0b02 	orr.w	fp, fp, #2
   16f82:	910f      	str	r1, [sp, #60]	; 0x3c
   16f84:	2500      	movs	r5, #0
   16f86:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   16f8a:	2302      	movs	r3, #2
   16f8c:	e5cb      	b.n	16b26 <_svfprintf_r+0x1e6>
   16f8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   16f90:	9311      	str	r3, [sp, #68]	; 0x44
   16f92:	680a      	ldr	r2, [r1, #0]
   16f94:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   16f98:	2300      	movs	r3, #0
   16f9a:	460a      	mov	r2, r1
   16f9c:	461f      	mov	r7, r3
   16f9e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   16fa2:	3204      	adds	r2, #4
   16fa4:	2301      	movs	r3, #1
   16fa6:	9308      	str	r3, [sp, #32]
   16fa8:	f8cd b01c 	str.w	fp, [sp, #28]
   16fac:	970a      	str	r7, [sp, #40]	; 0x28
   16fae:	9712      	str	r7, [sp, #72]	; 0x48
   16fb0:	920f      	str	r2, [sp, #60]	; 0x3c
   16fb2:	930e      	str	r3, [sp, #56]	; 0x38
   16fb4:	ae28      	add	r6, sp, #160	; 0xa0
   16fb6:	e5df      	b.n	16b78 <_svfprintf_r+0x238>
   16fb8:	9311      	str	r3, [sp, #68]	; 0x44
   16fba:	2a00      	cmp	r2, #0
   16fbc:	f040 86ea 	bne.w	17d94 <_svfprintf_r+0x1454>
   16fc0:	f01b 0f20 	tst.w	fp, #32
   16fc4:	d15d      	bne.n	17082 <_svfprintf_r+0x742>
   16fc6:	f01b 0f10 	tst.w	fp, #16
   16fca:	f040 8308 	bne.w	175de <_svfprintf_r+0xc9e>
   16fce:	f01b 0f40 	tst.w	fp, #64	; 0x40
   16fd2:	f000 8304 	beq.w	175de <_svfprintf_r+0xc9e>
   16fd6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   16fd8:	f9b1 4000 	ldrsh.w	r4, [r1]
   16fdc:	3104      	adds	r1, #4
   16fde:	17e5      	asrs	r5, r4, #31
   16fe0:	4622      	mov	r2, r4
   16fe2:	462b      	mov	r3, r5
   16fe4:	910f      	str	r1, [sp, #60]	; 0x3c
   16fe6:	2a00      	cmp	r2, #0
   16fe8:	f173 0300 	sbcs.w	r3, r3, #0
   16fec:	db58      	blt.n	170a0 <_svfprintf_r+0x760>
   16fee:	990a      	ldr	r1, [sp, #40]	; 0x28
   16ff0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   16ff4:	1c4a      	adds	r2, r1, #1
   16ff6:	f04f 0301 	mov.w	r3, #1
   16ffa:	f47f ad9b 	bne.w	16b34 <_svfprintf_r+0x1f4>
   16ffe:	ea54 0205 	orrs.w	r2, r4, r5
   17002:	f000 81df 	beq.w	173c4 <_svfprintf_r+0xa84>
   17006:	f8cd b01c 	str.w	fp, [sp, #28]
   1700a:	2b01      	cmp	r3, #1
   1700c:	f000 827b 	beq.w	17506 <_svfprintf_r+0xbc6>
   17010:	2b02      	cmp	r3, #2
   17012:	f040 8206 	bne.w	17422 <_svfprintf_r+0xae2>
   17016:	9818      	ldr	r0, [sp, #96]	; 0x60
   17018:	464e      	mov	r6, r9
   1701a:	0923      	lsrs	r3, r4, #4
   1701c:	f004 010f 	and.w	r1, r4, #15
   17020:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   17024:	092a      	lsrs	r2, r5, #4
   17026:	461c      	mov	r4, r3
   17028:	4615      	mov	r5, r2
   1702a:	5c43      	ldrb	r3, [r0, r1]
   1702c:	f806 3d01 	strb.w	r3, [r6, #-1]!
   17030:	ea54 0305 	orrs.w	r3, r4, r5
   17034:	d1f1      	bne.n	1701a <_svfprintf_r+0x6da>
   17036:	eba9 0306 	sub.w	r3, r9, r6
   1703a:	930e      	str	r3, [sp, #56]	; 0x38
   1703c:	e590      	b.n	16b60 <_svfprintf_r+0x220>
   1703e:	9311      	str	r3, [sp, #68]	; 0x44
   17040:	2a00      	cmp	r2, #0
   17042:	f040 86a3 	bne.w	17d8c <_svfprintf_r+0x144c>
   17046:	4b7e      	ldr	r3, [pc, #504]	; (17240 <_svfprintf_r+0x900>)
   17048:	9318      	str	r3, [sp, #96]	; 0x60
   1704a:	f01b 0f20 	tst.w	fp, #32
   1704e:	f43f aeef 	beq.w	16e30 <_svfprintf_r+0x4f0>
   17052:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   17054:	3507      	adds	r5, #7
   17056:	f025 0307 	bic.w	r3, r5, #7
   1705a:	f103 0208 	add.w	r2, r3, #8
   1705e:	f01b 0f01 	tst.w	fp, #1
   17062:	920f      	str	r2, [sp, #60]	; 0x3c
   17064:	e9d3 4500 	ldrd	r4, r5, [r3]
   17068:	f47f aef4 	bne.w	16e54 <_svfprintf_r+0x514>
   1706c:	2302      	movs	r3, #2
   1706e:	e55a      	b.n	16b26 <_svfprintf_r+0x1e6>
   17070:	9311      	str	r3, [sp, #68]	; 0x44
   17072:	2a00      	cmp	r2, #0
   17074:	f040 8686 	bne.w	17d84 <_svfprintf_r+0x1444>
   17078:	f04b 0b10 	orr.w	fp, fp, #16
   1707c:	f01b 0f20 	tst.w	fp, #32
   17080:	d0a1      	beq.n	16fc6 <_svfprintf_r+0x686>
   17082:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   17084:	3507      	adds	r5, #7
   17086:	f025 0507 	bic.w	r5, r5, #7
   1708a:	e9d5 2300 	ldrd	r2, r3, [r5]
   1708e:	2a00      	cmp	r2, #0
   17090:	f105 0108 	add.w	r1, r5, #8
   17094:	461d      	mov	r5, r3
   17096:	f173 0300 	sbcs.w	r3, r3, #0
   1709a:	910f      	str	r1, [sp, #60]	; 0x3c
   1709c:	4614      	mov	r4, r2
   1709e:	daa6      	bge.n	16fee <_svfprintf_r+0x6ae>
   170a0:	272d      	movs	r7, #45	; 0x2d
   170a2:	4264      	negs	r4, r4
   170a4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   170a8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   170ac:	2301      	movs	r3, #1
   170ae:	e53d      	b.n	16b2c <_svfprintf_r+0x1ec>
   170b0:	9311      	str	r3, [sp, #68]	; 0x44
   170b2:	2a00      	cmp	r2, #0
   170b4:	f040 8662 	bne.w	17d7c <_svfprintf_r+0x143c>
   170b8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   170ba:	3507      	adds	r5, #7
   170bc:	f025 0307 	bic.w	r3, r5, #7
   170c0:	f103 0208 	add.w	r2, r3, #8
   170c4:	920f      	str	r2, [sp, #60]	; 0x3c
   170c6:	681a      	ldr	r2, [r3, #0]
   170c8:	9215      	str	r2, [sp, #84]	; 0x54
   170ca:	685b      	ldr	r3, [r3, #4]
   170cc:	9314      	str	r3, [sp, #80]	; 0x50
   170ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
   170d0:	9d15      	ldr	r5, [sp, #84]	; 0x54
   170d2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   170d6:	4628      	mov	r0, r5
   170d8:	4621      	mov	r1, r4
   170da:	f04f 32ff 	mov.w	r2, #4294967295
   170de:	4b59      	ldr	r3, [pc, #356]	; (17244 <_svfprintf_r+0x904>)
   170e0:	f005 f8f0 	bl	1c2c4 <__aeabi_dcmpun>
   170e4:	2800      	cmp	r0, #0
   170e6:	f040 834a 	bne.w	1777e <_svfprintf_r+0xe3e>
   170ea:	4628      	mov	r0, r5
   170ec:	4621      	mov	r1, r4
   170ee:	f04f 32ff 	mov.w	r2, #4294967295
   170f2:	4b54      	ldr	r3, [pc, #336]	; (17244 <_svfprintf_r+0x904>)
   170f4:	f7fc f830 	bl	13158 <__aeabi_dcmple>
   170f8:	2800      	cmp	r0, #0
   170fa:	f040 8340 	bne.w	1777e <_svfprintf_r+0xe3e>
   170fe:	a815      	add	r0, sp, #84	; 0x54
   17100:	c80d      	ldmia	r0, {r0, r2, r3}
   17102:	9914      	ldr	r1, [sp, #80]	; 0x50
   17104:	f7fc f81e 	bl	13144 <__aeabi_dcmplt>
   17108:	2800      	cmp	r0, #0
   1710a:	f040 8530 	bne.w	17b6e <_svfprintf_r+0x122e>
   1710e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   17112:	4e4d      	ldr	r6, [pc, #308]	; (17248 <_svfprintf_r+0x908>)
   17114:	4b4d      	ldr	r3, [pc, #308]	; (1724c <_svfprintf_r+0x90c>)
   17116:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   1711a:	9007      	str	r0, [sp, #28]
   1711c:	9811      	ldr	r0, [sp, #68]	; 0x44
   1711e:	2203      	movs	r2, #3
   17120:	2100      	movs	r1, #0
   17122:	9208      	str	r2, [sp, #32]
   17124:	910a      	str	r1, [sp, #40]	; 0x28
   17126:	2847      	cmp	r0, #71	; 0x47
   17128:	bfd8      	it	le
   1712a:	461e      	movle	r6, r3
   1712c:	920e      	str	r2, [sp, #56]	; 0x38
   1712e:	9112      	str	r1, [sp, #72]	; 0x48
   17130:	e51e      	b.n	16b70 <_svfprintf_r+0x230>
   17132:	f04b 0b08 	orr.w	fp, fp, #8
   17136:	f89a 3000 	ldrb.w	r3, [sl]
   1713a:	e459      	b.n	169f0 <_svfprintf_r+0xb0>
   1713c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   17140:	2300      	movs	r3, #0
   17142:	461c      	mov	r4, r3
   17144:	f81a 3b01 	ldrb.w	r3, [sl], #1
   17148:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1714c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   17150:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   17154:	2809      	cmp	r0, #9
   17156:	d9f5      	bls.n	17144 <_svfprintf_r+0x804>
   17158:	940d      	str	r4, [sp, #52]	; 0x34
   1715a:	e44b      	b.n	169f4 <_svfprintf_r+0xb4>
   1715c:	f04b 0b10 	orr.w	fp, fp, #16
   17160:	9311      	str	r3, [sp, #68]	; 0x44
   17162:	f01b 0320 	ands.w	r3, fp, #32
   17166:	f43f ae1d 	beq.w	16da4 <_svfprintf_r+0x464>
   1716a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1716c:	3507      	adds	r5, #7
   1716e:	f025 0307 	bic.w	r3, r5, #7
   17172:	f103 0208 	add.w	r2, r3, #8
   17176:	e9d3 4500 	ldrd	r4, r5, [r3]
   1717a:	920f      	str	r2, [sp, #60]	; 0x3c
   1717c:	2300      	movs	r3, #0
   1717e:	e4d2      	b.n	16b26 <_svfprintf_r+0x1e6>
   17180:	9311      	str	r3, [sp, #68]	; 0x44
   17182:	2a00      	cmp	r2, #0
   17184:	f040 85e7 	bne.w	17d56 <_svfprintf_r+0x1416>
   17188:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1718a:	2a00      	cmp	r2, #0
   1718c:	f43f aca3 	beq.w	16ad6 <_svfprintf_r+0x196>
   17190:	2300      	movs	r3, #0
   17192:	2101      	movs	r1, #1
   17194:	461f      	mov	r7, r3
   17196:	9108      	str	r1, [sp, #32]
   17198:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   1719c:	f8cd b01c 	str.w	fp, [sp, #28]
   171a0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   171a4:	930a      	str	r3, [sp, #40]	; 0x28
   171a6:	9312      	str	r3, [sp, #72]	; 0x48
   171a8:	910e      	str	r1, [sp, #56]	; 0x38
   171aa:	ae28      	add	r6, sp, #160	; 0xa0
   171ac:	e4e4      	b.n	16b78 <_svfprintf_r+0x238>
   171ae:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   171b0:	e534      	b.n	16c1c <_svfprintf_r+0x2dc>
   171b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   171b4:	2b65      	cmp	r3, #101	; 0x65
   171b6:	f340 80a7 	ble.w	17308 <_svfprintf_r+0x9c8>
   171ba:	a815      	add	r0, sp, #84	; 0x54
   171bc:	c80d      	ldmia	r0, {r0, r2, r3}
   171be:	9914      	ldr	r1, [sp, #80]	; 0x50
   171c0:	f7fb ffb6 	bl	13130 <__aeabi_dcmpeq>
   171c4:	2800      	cmp	r0, #0
   171c6:	f000 8150 	beq.w	1746a <_svfprintf_r+0xb2a>
   171ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
   171cc:	4a20      	ldr	r2, [pc, #128]	; (17250 <_svfprintf_r+0x910>)
   171ce:	f8c8 2000 	str.w	r2, [r8]
   171d2:	3301      	adds	r3, #1
   171d4:	3401      	adds	r4, #1
   171d6:	2201      	movs	r2, #1
   171d8:	2b07      	cmp	r3, #7
   171da:	9427      	str	r4, [sp, #156]	; 0x9c
   171dc:	9326      	str	r3, [sp, #152]	; 0x98
   171de:	f8c8 2004 	str.w	r2, [r8, #4]
   171e2:	f300 836a 	bgt.w	178ba <_svfprintf_r+0xf7a>
   171e6:	f108 0808 	add.w	r8, r8, #8
   171ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   171ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   171ee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   171f0:	4293      	cmp	r3, r2
   171f2:	db03      	blt.n	171fc <_svfprintf_r+0x8bc>
   171f4:	9b07      	ldr	r3, [sp, #28]
   171f6:	07dd      	lsls	r5, r3, #31
   171f8:	f57f ad82 	bpl.w	16d00 <_svfprintf_r+0x3c0>
   171fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   171fe:	9919      	ldr	r1, [sp, #100]	; 0x64
   17200:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   17202:	f8c8 2000 	str.w	r2, [r8]
   17206:	3301      	adds	r3, #1
   17208:	440c      	add	r4, r1
   1720a:	2b07      	cmp	r3, #7
   1720c:	f8c8 1004 	str.w	r1, [r8, #4]
   17210:	9427      	str	r4, [sp, #156]	; 0x9c
   17212:	9326      	str	r3, [sp, #152]	; 0x98
   17214:	f300 839e 	bgt.w	17954 <_svfprintf_r+0x1014>
   17218:	f108 0808 	add.w	r8, r8, #8
   1721c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1721e:	1e5e      	subs	r6, r3, #1
   17220:	2e00      	cmp	r6, #0
   17222:	f77f ad6d 	ble.w	16d00 <_svfprintf_r+0x3c0>
   17226:	2e10      	cmp	r6, #16
   17228:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1722a:	4d0a      	ldr	r5, [pc, #40]	; (17254 <_svfprintf_r+0x914>)
   1722c:	f340 81f5 	ble.w	1761a <_svfprintf_r+0xcda>
   17230:	4622      	mov	r2, r4
   17232:	2710      	movs	r7, #16
   17234:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   17238:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1723a:	e013      	b.n	17264 <_svfprintf_r+0x924>
   1723c:	000250b4 	.word	0x000250b4
   17240:	000250a0 	.word	0x000250a0
   17244:	7fefffff 	.word	0x7fefffff
   17248:	00025094 	.word	0x00025094
   1724c:	00025090 	.word	0x00025090
   17250:	00022038 	.word	0x00022038
   17254:	000250e0 	.word	0x000250e0
   17258:	f108 0808 	add.w	r8, r8, #8
   1725c:	3e10      	subs	r6, #16
   1725e:	2e10      	cmp	r6, #16
   17260:	f340 81da 	ble.w	17618 <_svfprintf_r+0xcd8>
   17264:	3301      	adds	r3, #1
   17266:	3210      	adds	r2, #16
   17268:	2b07      	cmp	r3, #7
   1726a:	9227      	str	r2, [sp, #156]	; 0x9c
   1726c:	9326      	str	r3, [sp, #152]	; 0x98
   1726e:	e888 00a0 	stmia.w	r8, {r5, r7}
   17272:	ddf1      	ble.n	17258 <_svfprintf_r+0x918>
   17274:	aa25      	add	r2, sp, #148	; 0x94
   17276:	4621      	mov	r1, r4
   17278:	4658      	mov	r0, fp
   1727a:	f004 ff13 	bl	1c0a4 <__ssprint_r>
   1727e:	2800      	cmp	r0, #0
   17280:	f47f ac30 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   17284:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   17286:	9b26      	ldr	r3, [sp, #152]	; 0x98
   17288:	46c8      	mov	r8, r9
   1728a:	e7e7      	b.n	1725c <_svfprintf_r+0x91c>
   1728c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1728e:	9a08      	ldr	r2, [sp, #32]
   17290:	1a9f      	subs	r7, r3, r2
   17292:	2f00      	cmp	r7, #0
   17294:	f77f ace5 	ble.w	16c62 <_svfprintf_r+0x322>
   17298:	2f10      	cmp	r7, #16
   1729a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1729c:	4db6      	ldr	r5, [pc, #728]	; (17578 <_svfprintf_r+0xc38>)
   1729e:	dd27      	ble.n	172f0 <_svfprintf_r+0x9b0>
   172a0:	4642      	mov	r2, r8
   172a2:	4621      	mov	r1, r4
   172a4:	46b0      	mov	r8, r6
   172a6:	f04f 0b10 	mov.w	fp, #16
   172aa:	462e      	mov	r6, r5
   172ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   172ae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   172b0:	e004      	b.n	172bc <_svfprintf_r+0x97c>
   172b2:	3f10      	subs	r7, #16
   172b4:	2f10      	cmp	r7, #16
   172b6:	f102 0208 	add.w	r2, r2, #8
   172ba:	dd15      	ble.n	172e8 <_svfprintf_r+0x9a8>
   172bc:	3301      	adds	r3, #1
   172be:	3110      	adds	r1, #16
   172c0:	2b07      	cmp	r3, #7
   172c2:	9127      	str	r1, [sp, #156]	; 0x9c
   172c4:	9326      	str	r3, [sp, #152]	; 0x98
   172c6:	e882 0840 	stmia.w	r2, {r6, fp}
   172ca:	ddf2      	ble.n	172b2 <_svfprintf_r+0x972>
   172cc:	aa25      	add	r2, sp, #148	; 0x94
   172ce:	4629      	mov	r1, r5
   172d0:	4620      	mov	r0, r4
   172d2:	f004 fee7 	bl	1c0a4 <__ssprint_r>
   172d6:	2800      	cmp	r0, #0
   172d8:	f47f ac04 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   172dc:	3f10      	subs	r7, #16
   172de:	2f10      	cmp	r7, #16
   172e0:	9927      	ldr	r1, [sp, #156]	; 0x9c
   172e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   172e4:	464a      	mov	r2, r9
   172e6:	dce9      	bgt.n	172bc <_svfprintf_r+0x97c>
   172e8:	4635      	mov	r5, r6
   172ea:	460c      	mov	r4, r1
   172ec:	4646      	mov	r6, r8
   172ee:	4690      	mov	r8, r2
   172f0:	3301      	adds	r3, #1
   172f2:	443c      	add	r4, r7
   172f4:	2b07      	cmp	r3, #7
   172f6:	9427      	str	r4, [sp, #156]	; 0x9c
   172f8:	9326      	str	r3, [sp, #152]	; 0x98
   172fa:	e888 00a0 	stmia.w	r8, {r5, r7}
   172fe:	f300 8232 	bgt.w	17766 <_svfprintf_r+0xe26>
   17302:	f108 0808 	add.w	r8, r8, #8
   17306:	e4ac      	b.n	16c62 <_svfprintf_r+0x322>
   17308:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1730a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   1730c:	2b01      	cmp	r3, #1
   1730e:	f340 81fe 	ble.w	1770e <_svfprintf_r+0xdce>
   17312:	3701      	adds	r7, #1
   17314:	3401      	adds	r4, #1
   17316:	2301      	movs	r3, #1
   17318:	2f07      	cmp	r7, #7
   1731a:	9427      	str	r4, [sp, #156]	; 0x9c
   1731c:	9726      	str	r7, [sp, #152]	; 0x98
   1731e:	f8c8 6000 	str.w	r6, [r8]
   17322:	f8c8 3004 	str.w	r3, [r8, #4]
   17326:	f300 8203 	bgt.w	17730 <_svfprintf_r+0xdf0>
   1732a:	f108 0808 	add.w	r8, r8, #8
   1732e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   17330:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   17332:	f8c8 3000 	str.w	r3, [r8]
   17336:	3701      	adds	r7, #1
   17338:	4414      	add	r4, r2
   1733a:	2f07      	cmp	r7, #7
   1733c:	9427      	str	r4, [sp, #156]	; 0x9c
   1733e:	9726      	str	r7, [sp, #152]	; 0x98
   17340:	f8c8 2004 	str.w	r2, [r8, #4]
   17344:	f300 8200 	bgt.w	17748 <_svfprintf_r+0xe08>
   17348:	f108 0808 	add.w	r8, r8, #8
   1734c:	a815      	add	r0, sp, #84	; 0x54
   1734e:	c80d      	ldmia	r0, {r0, r2, r3}
   17350:	9914      	ldr	r1, [sp, #80]	; 0x50
   17352:	f7fb feed 	bl	13130 <__aeabi_dcmpeq>
   17356:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17358:	2800      	cmp	r0, #0
   1735a:	f040 8101 	bne.w	17560 <_svfprintf_r+0xc20>
   1735e:	3b01      	subs	r3, #1
   17360:	3701      	adds	r7, #1
   17362:	3601      	adds	r6, #1
   17364:	441c      	add	r4, r3
   17366:	2f07      	cmp	r7, #7
   17368:	9726      	str	r7, [sp, #152]	; 0x98
   1736a:	9427      	str	r4, [sp, #156]	; 0x9c
   1736c:	f8c8 6000 	str.w	r6, [r8]
   17370:	f8c8 3004 	str.w	r3, [r8, #4]
   17374:	f300 8127 	bgt.w	175c6 <_svfprintf_r+0xc86>
   17378:	f108 0808 	add.w	r8, r8, #8
   1737c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1737e:	f8c8 2004 	str.w	r2, [r8, #4]
   17382:	3701      	adds	r7, #1
   17384:	4414      	add	r4, r2
   17386:	ab21      	add	r3, sp, #132	; 0x84
   17388:	2f07      	cmp	r7, #7
   1738a:	9427      	str	r4, [sp, #156]	; 0x9c
   1738c:	9726      	str	r7, [sp, #152]	; 0x98
   1738e:	f8c8 3000 	str.w	r3, [r8]
   17392:	f77f acb3 	ble.w	16cfc <_svfprintf_r+0x3bc>
   17396:	aa25      	add	r2, sp, #148	; 0x94
   17398:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1739a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1739c:	f004 fe82 	bl	1c0a4 <__ssprint_r>
   173a0:	2800      	cmp	r0, #0
   173a2:	f47f ab9f 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   173a6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   173a8:	46c8      	mov	r8, r9
   173aa:	e4a9      	b.n	16d00 <_svfprintf_r+0x3c0>
   173ac:	aa25      	add	r2, sp, #148	; 0x94
   173ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
   173b0:	980c      	ldr	r0, [sp, #48]	; 0x30
   173b2:	f004 fe77 	bl	1c0a4 <__ssprint_r>
   173b6:	2800      	cmp	r0, #0
   173b8:	f43f aceb 	beq.w	16d92 <_svfprintf_r+0x452>
   173bc:	f7ff bb92 	b.w	16ae4 <_svfprintf_r+0x1a4>
   173c0:	f8dd b01c 	ldr.w	fp, [sp, #28]
   173c4:	2b01      	cmp	r3, #1
   173c6:	f000 8134 	beq.w	17632 <_svfprintf_r+0xcf2>
   173ca:	2b02      	cmp	r3, #2
   173cc:	d125      	bne.n	1741a <_svfprintf_r+0xada>
   173ce:	f8cd b01c 	str.w	fp, [sp, #28]
   173d2:	2400      	movs	r4, #0
   173d4:	2500      	movs	r5, #0
   173d6:	e61e      	b.n	17016 <_svfprintf_r+0x6d6>
   173d8:	aa25      	add	r2, sp, #148	; 0x94
   173da:	990b      	ldr	r1, [sp, #44]	; 0x2c
   173dc:	980c      	ldr	r0, [sp, #48]	; 0x30
   173de:	f004 fe61 	bl	1c0a4 <__ssprint_r>
   173e2:	2800      	cmp	r0, #0
   173e4:	f47f ab7e 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   173e8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   173ea:	46c8      	mov	r8, r9
   173ec:	e475      	b.n	16cda <_svfprintf_r+0x39a>
   173ee:	aa25      	add	r2, sp, #148	; 0x94
   173f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   173f2:	980c      	ldr	r0, [sp, #48]	; 0x30
   173f4:	f004 fe56 	bl	1c0a4 <__ssprint_r>
   173f8:	2800      	cmp	r0, #0
   173fa:	f47f ab73 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   173fe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   17400:	46c8      	mov	r8, r9
   17402:	e41b      	b.n	16c3c <_svfprintf_r+0x2fc>
   17404:	aa25      	add	r2, sp, #148	; 0x94
   17406:	990b      	ldr	r1, [sp, #44]	; 0x2c
   17408:	980c      	ldr	r0, [sp, #48]	; 0x30
   1740a:	f004 fe4b 	bl	1c0a4 <__ssprint_r>
   1740e:	2800      	cmp	r0, #0
   17410:	f47f ab68 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   17414:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   17416:	46c8      	mov	r8, r9
   17418:	e420      	b.n	16c5c <_svfprintf_r+0x31c>
   1741a:	f8cd b01c 	str.w	fp, [sp, #28]
   1741e:	2400      	movs	r4, #0
   17420:	2500      	movs	r5, #0
   17422:	4649      	mov	r1, r9
   17424:	e000      	b.n	17428 <_svfprintf_r+0xae8>
   17426:	4631      	mov	r1, r6
   17428:	08e2      	lsrs	r2, r4, #3
   1742a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1742e:	08e8      	lsrs	r0, r5, #3
   17430:	f004 0307 	and.w	r3, r4, #7
   17434:	4605      	mov	r5, r0
   17436:	4614      	mov	r4, r2
   17438:	3330      	adds	r3, #48	; 0x30
   1743a:	ea54 0205 	orrs.w	r2, r4, r5
   1743e:	f801 3c01 	strb.w	r3, [r1, #-1]
   17442:	f101 36ff 	add.w	r6, r1, #4294967295
   17446:	d1ee      	bne.n	17426 <_svfprintf_r+0xae6>
   17448:	9a07      	ldr	r2, [sp, #28]
   1744a:	07d2      	lsls	r2, r2, #31
   1744c:	f57f adf3 	bpl.w	17036 <_svfprintf_r+0x6f6>
   17450:	2b30      	cmp	r3, #48	; 0x30
   17452:	f43f adf0 	beq.w	17036 <_svfprintf_r+0x6f6>
   17456:	3902      	subs	r1, #2
   17458:	2330      	movs	r3, #48	; 0x30
   1745a:	f806 3c01 	strb.w	r3, [r6, #-1]
   1745e:	eba9 0301 	sub.w	r3, r9, r1
   17462:	930e      	str	r3, [sp, #56]	; 0x38
   17464:	460e      	mov	r6, r1
   17466:	f7ff bb7b 	b.w	16b60 <_svfprintf_r+0x220>
   1746a:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1746c:	2900      	cmp	r1, #0
   1746e:	f340 822e 	ble.w	178ce <_svfprintf_r+0xf8e>
   17472:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17474:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   17476:	4293      	cmp	r3, r2
   17478:	bfa8      	it	ge
   1747a:	4613      	movge	r3, r2
   1747c:	2b00      	cmp	r3, #0
   1747e:	461f      	mov	r7, r3
   17480:	dd0d      	ble.n	1749e <_svfprintf_r+0xb5e>
   17482:	9b26      	ldr	r3, [sp, #152]	; 0x98
   17484:	f8c8 6000 	str.w	r6, [r8]
   17488:	3301      	adds	r3, #1
   1748a:	443c      	add	r4, r7
   1748c:	2b07      	cmp	r3, #7
   1748e:	9427      	str	r4, [sp, #156]	; 0x9c
   17490:	f8c8 7004 	str.w	r7, [r8, #4]
   17494:	9326      	str	r3, [sp, #152]	; 0x98
   17496:	f300 831f 	bgt.w	17ad8 <_svfprintf_r+0x1198>
   1749a:	f108 0808 	add.w	r8, r8, #8
   1749e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   174a0:	2f00      	cmp	r7, #0
   174a2:	bfa8      	it	ge
   174a4:	1bdb      	subge	r3, r3, r7
   174a6:	2b00      	cmp	r3, #0
   174a8:	461f      	mov	r7, r3
   174aa:	f340 80d6 	ble.w	1765a <_svfprintf_r+0xd1a>
   174ae:	2f10      	cmp	r7, #16
   174b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   174b2:	4d31      	ldr	r5, [pc, #196]	; (17578 <_svfprintf_r+0xc38>)
   174b4:	f340 81ed 	ble.w	17892 <_svfprintf_r+0xf52>
   174b8:	4642      	mov	r2, r8
   174ba:	4621      	mov	r1, r4
   174bc:	46b0      	mov	r8, r6
   174be:	f04f 0b10 	mov.w	fp, #16
   174c2:	462e      	mov	r6, r5
   174c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   174c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   174c8:	e004      	b.n	174d4 <_svfprintf_r+0xb94>
   174ca:	3208      	adds	r2, #8
   174cc:	3f10      	subs	r7, #16
   174ce:	2f10      	cmp	r7, #16
   174d0:	f340 81db 	ble.w	1788a <_svfprintf_r+0xf4a>
   174d4:	3301      	adds	r3, #1
   174d6:	3110      	adds	r1, #16
   174d8:	2b07      	cmp	r3, #7
   174da:	9127      	str	r1, [sp, #156]	; 0x9c
   174dc:	9326      	str	r3, [sp, #152]	; 0x98
   174de:	e882 0840 	stmia.w	r2, {r6, fp}
   174e2:	ddf2      	ble.n	174ca <_svfprintf_r+0xb8a>
   174e4:	aa25      	add	r2, sp, #148	; 0x94
   174e6:	4629      	mov	r1, r5
   174e8:	4620      	mov	r0, r4
   174ea:	f004 fddb 	bl	1c0a4 <__ssprint_r>
   174ee:	2800      	cmp	r0, #0
   174f0:	f47f aaf8 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   174f4:	9927      	ldr	r1, [sp, #156]	; 0x9c
   174f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   174f8:	464a      	mov	r2, r9
   174fa:	e7e7      	b.n	174cc <_svfprintf_r+0xb8c>
   174fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   174fe:	930e      	str	r3, [sp, #56]	; 0x38
   17500:	464e      	mov	r6, r9
   17502:	f7ff bb2d 	b.w	16b60 <_svfprintf_r+0x220>
   17506:	2d00      	cmp	r5, #0
   17508:	bf08      	it	eq
   1750a:	2c0a      	cmpeq	r4, #10
   1750c:	f0c0 808f 	bcc.w	1762e <_svfprintf_r+0xcee>
   17510:	464e      	mov	r6, r9
   17512:	4620      	mov	r0, r4
   17514:	4629      	mov	r1, r5
   17516:	220a      	movs	r2, #10
   17518:	2300      	movs	r3, #0
   1751a:	f7fc f9cd 	bl	138b8 <__aeabi_uldivmod>
   1751e:	3230      	adds	r2, #48	; 0x30
   17520:	f806 2d01 	strb.w	r2, [r6, #-1]!
   17524:	4620      	mov	r0, r4
   17526:	4629      	mov	r1, r5
   17528:	2300      	movs	r3, #0
   1752a:	220a      	movs	r2, #10
   1752c:	f7fc f9c4 	bl	138b8 <__aeabi_uldivmod>
   17530:	4604      	mov	r4, r0
   17532:	460d      	mov	r5, r1
   17534:	ea54 0305 	orrs.w	r3, r4, r5
   17538:	d1eb      	bne.n	17512 <_svfprintf_r+0xbd2>
   1753a:	eba9 0306 	sub.w	r3, r9, r6
   1753e:	930e      	str	r3, [sp, #56]	; 0x38
   17540:	f7ff bb0e 	b.w	16b60 <_svfprintf_r+0x220>
   17544:	aa25      	add	r2, sp, #148	; 0x94
   17546:	990b      	ldr	r1, [sp, #44]	; 0x2c
   17548:	980c      	ldr	r0, [sp, #48]	; 0x30
   1754a:	f004 fdab 	bl	1c0a4 <__ssprint_r>
   1754e:	2800      	cmp	r0, #0
   17550:	f47f aac8 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   17554:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   17558:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   1755a:	46c8      	mov	r8, r9
   1755c:	f7ff bb5e 	b.w	16c1c <_svfprintf_r+0x2dc>
   17560:	1e5e      	subs	r6, r3, #1
   17562:	2e00      	cmp	r6, #0
   17564:	f77f af0a 	ble.w	1737c <_svfprintf_r+0xa3c>
   17568:	2e10      	cmp	r6, #16
   1756a:	4d03      	ldr	r5, [pc, #12]	; (17578 <_svfprintf_r+0xc38>)
   1756c:	dd22      	ble.n	175b4 <_svfprintf_r+0xc74>
   1756e:	4622      	mov	r2, r4
   17570:	f04f 0b10 	mov.w	fp, #16
   17574:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   17576:	e006      	b.n	17586 <_svfprintf_r+0xc46>
   17578:	000250e0 	.word	0x000250e0
   1757c:	3e10      	subs	r6, #16
   1757e:	2e10      	cmp	r6, #16
   17580:	f108 0808 	add.w	r8, r8, #8
   17584:	dd15      	ble.n	175b2 <_svfprintf_r+0xc72>
   17586:	3701      	adds	r7, #1
   17588:	3210      	adds	r2, #16
   1758a:	2f07      	cmp	r7, #7
   1758c:	9227      	str	r2, [sp, #156]	; 0x9c
   1758e:	9726      	str	r7, [sp, #152]	; 0x98
   17590:	e888 0820 	stmia.w	r8, {r5, fp}
   17594:	ddf2      	ble.n	1757c <_svfprintf_r+0xc3c>
   17596:	aa25      	add	r2, sp, #148	; 0x94
   17598:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1759a:	4620      	mov	r0, r4
   1759c:	f004 fd82 	bl	1c0a4 <__ssprint_r>
   175a0:	2800      	cmp	r0, #0
   175a2:	f47f aa9f 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   175a6:	3e10      	subs	r6, #16
   175a8:	2e10      	cmp	r6, #16
   175aa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   175ac:	9f26      	ldr	r7, [sp, #152]	; 0x98
   175ae:	46c8      	mov	r8, r9
   175b0:	dce9      	bgt.n	17586 <_svfprintf_r+0xc46>
   175b2:	4614      	mov	r4, r2
   175b4:	3701      	adds	r7, #1
   175b6:	4434      	add	r4, r6
   175b8:	2f07      	cmp	r7, #7
   175ba:	9427      	str	r4, [sp, #156]	; 0x9c
   175bc:	9726      	str	r7, [sp, #152]	; 0x98
   175be:	e888 0060 	stmia.w	r8, {r5, r6}
   175c2:	f77f aed9 	ble.w	17378 <_svfprintf_r+0xa38>
   175c6:	aa25      	add	r2, sp, #148	; 0x94
   175c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   175ca:	980c      	ldr	r0, [sp, #48]	; 0x30
   175cc:	f004 fd6a 	bl	1c0a4 <__ssprint_r>
   175d0:	2800      	cmp	r0, #0
   175d2:	f47f aa87 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   175d6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   175d8:	9f26      	ldr	r7, [sp, #152]	; 0x98
   175da:	46c8      	mov	r8, r9
   175dc:	e6ce      	b.n	1737c <_svfprintf_r+0xa3c>
   175de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   175e0:	6814      	ldr	r4, [r2, #0]
   175e2:	4613      	mov	r3, r2
   175e4:	3304      	adds	r3, #4
   175e6:	17e5      	asrs	r5, r4, #31
   175e8:	930f      	str	r3, [sp, #60]	; 0x3c
   175ea:	4622      	mov	r2, r4
   175ec:	462b      	mov	r3, r5
   175ee:	e4fa      	b.n	16fe6 <_svfprintf_r+0x6a6>
   175f0:	3204      	adds	r2, #4
   175f2:	681c      	ldr	r4, [r3, #0]
   175f4:	920f      	str	r2, [sp, #60]	; 0x3c
   175f6:	2301      	movs	r3, #1
   175f8:	2500      	movs	r5, #0
   175fa:	f7ff ba94 	b.w	16b26 <_svfprintf_r+0x1e6>
   175fe:	681c      	ldr	r4, [r3, #0]
   17600:	3304      	adds	r3, #4
   17602:	930f      	str	r3, [sp, #60]	; 0x3c
   17604:	2500      	movs	r5, #0
   17606:	e421      	b.n	16e4c <_svfprintf_r+0x50c>
   17608:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1760a:	460a      	mov	r2, r1
   1760c:	3204      	adds	r2, #4
   1760e:	680c      	ldr	r4, [r1, #0]
   17610:	920f      	str	r2, [sp, #60]	; 0x3c
   17612:	2500      	movs	r5, #0
   17614:	f7ff ba87 	b.w	16b26 <_svfprintf_r+0x1e6>
   17618:	4614      	mov	r4, r2
   1761a:	3301      	adds	r3, #1
   1761c:	4434      	add	r4, r6
   1761e:	2b07      	cmp	r3, #7
   17620:	9427      	str	r4, [sp, #156]	; 0x9c
   17622:	9326      	str	r3, [sp, #152]	; 0x98
   17624:	e888 0060 	stmia.w	r8, {r5, r6}
   17628:	f77f ab68 	ble.w	16cfc <_svfprintf_r+0x3bc>
   1762c:	e6b3      	b.n	17396 <_svfprintf_r+0xa56>
   1762e:	f8dd b01c 	ldr.w	fp, [sp, #28]
   17632:	f8cd b01c 	str.w	fp, [sp, #28]
   17636:	ae42      	add	r6, sp, #264	; 0x108
   17638:	3430      	adds	r4, #48	; 0x30
   1763a:	2301      	movs	r3, #1
   1763c:	f806 4d41 	strb.w	r4, [r6, #-65]!
   17640:	930e      	str	r3, [sp, #56]	; 0x38
   17642:	f7ff ba8d 	b.w	16b60 <_svfprintf_r+0x220>
   17646:	aa25      	add	r2, sp, #148	; 0x94
   17648:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1764a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1764c:	f004 fd2a 	bl	1c0a4 <__ssprint_r>
   17650:	2800      	cmp	r0, #0
   17652:	f47f aa47 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   17656:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   17658:	46c8      	mov	r8, r9
   1765a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1765c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1765e:	429a      	cmp	r2, r3
   17660:	db44      	blt.n	176ec <_svfprintf_r+0xdac>
   17662:	9b07      	ldr	r3, [sp, #28]
   17664:	07d9      	lsls	r1, r3, #31
   17666:	d441      	bmi.n	176ec <_svfprintf_r+0xdac>
   17668:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1766a:	9812      	ldr	r0, [sp, #72]	; 0x48
   1766c:	1a9a      	subs	r2, r3, r2
   1766e:	1a1d      	subs	r5, r3, r0
   17670:	4295      	cmp	r5, r2
   17672:	bfa8      	it	ge
   17674:	4615      	movge	r5, r2
   17676:	2d00      	cmp	r5, #0
   17678:	dd0e      	ble.n	17698 <_svfprintf_r+0xd58>
   1767a:	9926      	ldr	r1, [sp, #152]	; 0x98
   1767c:	f8c8 5004 	str.w	r5, [r8, #4]
   17680:	3101      	adds	r1, #1
   17682:	4406      	add	r6, r0
   17684:	442c      	add	r4, r5
   17686:	2907      	cmp	r1, #7
   17688:	f8c8 6000 	str.w	r6, [r8]
   1768c:	9427      	str	r4, [sp, #156]	; 0x9c
   1768e:	9126      	str	r1, [sp, #152]	; 0x98
   17690:	f300 823b 	bgt.w	17b0a <_svfprintf_r+0x11ca>
   17694:	f108 0808 	add.w	r8, r8, #8
   17698:	2d00      	cmp	r5, #0
   1769a:	bfac      	ite	ge
   1769c:	1b56      	subge	r6, r2, r5
   1769e:	4616      	movlt	r6, r2
   176a0:	2e00      	cmp	r6, #0
   176a2:	f77f ab2d 	ble.w	16d00 <_svfprintf_r+0x3c0>
   176a6:	2e10      	cmp	r6, #16
   176a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   176aa:	4db0      	ldr	r5, [pc, #704]	; (1796c <_svfprintf_r+0x102c>)
   176ac:	ddb5      	ble.n	1761a <_svfprintf_r+0xcda>
   176ae:	4622      	mov	r2, r4
   176b0:	2710      	movs	r7, #16
   176b2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   176b6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   176b8:	e004      	b.n	176c4 <_svfprintf_r+0xd84>
   176ba:	f108 0808 	add.w	r8, r8, #8
   176be:	3e10      	subs	r6, #16
   176c0:	2e10      	cmp	r6, #16
   176c2:	dda9      	ble.n	17618 <_svfprintf_r+0xcd8>
   176c4:	3301      	adds	r3, #1
   176c6:	3210      	adds	r2, #16
   176c8:	2b07      	cmp	r3, #7
   176ca:	9227      	str	r2, [sp, #156]	; 0x9c
   176cc:	9326      	str	r3, [sp, #152]	; 0x98
   176ce:	e888 00a0 	stmia.w	r8, {r5, r7}
   176d2:	ddf2      	ble.n	176ba <_svfprintf_r+0xd7a>
   176d4:	aa25      	add	r2, sp, #148	; 0x94
   176d6:	4621      	mov	r1, r4
   176d8:	4658      	mov	r0, fp
   176da:	f004 fce3 	bl	1c0a4 <__ssprint_r>
   176de:	2800      	cmp	r0, #0
   176e0:	f47f aa00 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   176e4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   176e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   176e8:	46c8      	mov	r8, r9
   176ea:	e7e8      	b.n	176be <_svfprintf_r+0xd7e>
   176ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
   176ee:	9819      	ldr	r0, [sp, #100]	; 0x64
   176f0:	991a      	ldr	r1, [sp, #104]	; 0x68
   176f2:	f8c8 1000 	str.w	r1, [r8]
   176f6:	3301      	adds	r3, #1
   176f8:	4404      	add	r4, r0
   176fa:	2b07      	cmp	r3, #7
   176fc:	9427      	str	r4, [sp, #156]	; 0x9c
   176fe:	f8c8 0004 	str.w	r0, [r8, #4]
   17702:	9326      	str	r3, [sp, #152]	; 0x98
   17704:	f300 81f5 	bgt.w	17af2 <_svfprintf_r+0x11b2>
   17708:	f108 0808 	add.w	r8, r8, #8
   1770c:	e7ac      	b.n	17668 <_svfprintf_r+0xd28>
   1770e:	9b07      	ldr	r3, [sp, #28]
   17710:	07da      	lsls	r2, r3, #31
   17712:	f53f adfe 	bmi.w	17312 <_svfprintf_r+0x9d2>
   17716:	3701      	adds	r7, #1
   17718:	3401      	adds	r4, #1
   1771a:	2301      	movs	r3, #1
   1771c:	2f07      	cmp	r7, #7
   1771e:	9427      	str	r4, [sp, #156]	; 0x9c
   17720:	9726      	str	r7, [sp, #152]	; 0x98
   17722:	f8c8 6000 	str.w	r6, [r8]
   17726:	f8c8 3004 	str.w	r3, [r8, #4]
   1772a:	f77f ae25 	ble.w	17378 <_svfprintf_r+0xa38>
   1772e:	e74a      	b.n	175c6 <_svfprintf_r+0xc86>
   17730:	aa25      	add	r2, sp, #148	; 0x94
   17732:	990b      	ldr	r1, [sp, #44]	; 0x2c
   17734:	980c      	ldr	r0, [sp, #48]	; 0x30
   17736:	f004 fcb5 	bl	1c0a4 <__ssprint_r>
   1773a:	2800      	cmp	r0, #0
   1773c:	f47f a9d2 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   17740:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   17742:	9f26      	ldr	r7, [sp, #152]	; 0x98
   17744:	46c8      	mov	r8, r9
   17746:	e5f2      	b.n	1732e <_svfprintf_r+0x9ee>
   17748:	aa25      	add	r2, sp, #148	; 0x94
   1774a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1774c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1774e:	f004 fca9 	bl	1c0a4 <__ssprint_r>
   17752:	2800      	cmp	r0, #0
   17754:	f47f a9c6 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   17758:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   1775a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   1775c:	46c8      	mov	r8, r9
   1775e:	e5f5      	b.n	1734c <_svfprintf_r+0xa0c>
   17760:	464e      	mov	r6, r9
   17762:	f7ff b9fd 	b.w	16b60 <_svfprintf_r+0x220>
   17766:	aa25      	add	r2, sp, #148	; 0x94
   17768:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1776a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1776c:	f004 fc9a 	bl	1c0a4 <__ssprint_r>
   17770:	2800      	cmp	r0, #0
   17772:	f47f a9b7 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   17776:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   17778:	46c8      	mov	r8, r9
   1777a:	f7ff ba72 	b.w	16c62 <_svfprintf_r+0x322>
   1777e:	9c15      	ldr	r4, [sp, #84]	; 0x54
   17780:	4622      	mov	r2, r4
   17782:	4620      	mov	r0, r4
   17784:	9c14      	ldr	r4, [sp, #80]	; 0x50
   17786:	4623      	mov	r3, r4
   17788:	4621      	mov	r1, r4
   1778a:	f004 fd9b 	bl	1c2c4 <__aeabi_dcmpun>
   1778e:	2800      	cmp	r0, #0
   17790:	f040 8286 	bne.w	17ca0 <_svfprintf_r+0x1360>
   17794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17796:	3301      	adds	r3, #1
   17798:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1779a:	f023 0320 	bic.w	r3, r3, #32
   1779e:	930e      	str	r3, [sp, #56]	; 0x38
   177a0:	f000 81e2 	beq.w	17b68 <_svfprintf_r+0x1228>
   177a4:	2b47      	cmp	r3, #71	; 0x47
   177a6:	f000 811e 	beq.w	179e6 <_svfprintf_r+0x10a6>
   177aa:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   177ae:	9307      	str	r3, [sp, #28]
   177b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   177b2:	1e1f      	subs	r7, r3, #0
   177b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   177b6:	9308      	str	r3, [sp, #32]
   177b8:	bfbb      	ittet	lt
   177ba:	463b      	movlt	r3, r7
   177bc:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   177c0:	2300      	movge	r3, #0
   177c2:	232d      	movlt	r3, #45	; 0x2d
   177c4:	9310      	str	r3, [sp, #64]	; 0x40
   177c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   177c8:	2b66      	cmp	r3, #102	; 0x66
   177ca:	f000 81bb 	beq.w	17b44 <_svfprintf_r+0x1204>
   177ce:	2b46      	cmp	r3, #70	; 0x46
   177d0:	f000 80df 	beq.w	17992 <_svfprintf_r+0x1052>
   177d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   177d6:	9a08      	ldr	r2, [sp, #32]
   177d8:	2b45      	cmp	r3, #69	; 0x45
   177da:	bf0c      	ite	eq
   177dc:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   177de:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   177e0:	a823      	add	r0, sp, #140	; 0x8c
   177e2:	a920      	add	r1, sp, #128	; 0x80
   177e4:	bf08      	it	eq
   177e6:	1c5d      	addeq	r5, r3, #1
   177e8:	9004      	str	r0, [sp, #16]
   177ea:	9103      	str	r1, [sp, #12]
   177ec:	a81f      	add	r0, sp, #124	; 0x7c
   177ee:	2102      	movs	r1, #2
   177f0:	463b      	mov	r3, r7
   177f2:	9002      	str	r0, [sp, #8]
   177f4:	9501      	str	r5, [sp, #4]
   177f6:	9100      	str	r1, [sp, #0]
   177f8:	980c      	ldr	r0, [sp, #48]	; 0x30
   177fa:	f002 feb5 	bl	1a568 <_dtoa_r>
   177fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17800:	2b67      	cmp	r3, #103	; 0x67
   17802:	4606      	mov	r6, r0
   17804:	f040 81e0 	bne.w	17bc8 <_svfprintf_r+0x1288>
   17808:	f01b 0f01 	tst.w	fp, #1
   1780c:	f000 8246 	beq.w	17c9c <_svfprintf_r+0x135c>
   17810:	1974      	adds	r4, r6, r5
   17812:	9a16      	ldr	r2, [sp, #88]	; 0x58
   17814:	9808      	ldr	r0, [sp, #32]
   17816:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   17818:	4639      	mov	r1, r7
   1781a:	f7fb fc89 	bl	13130 <__aeabi_dcmpeq>
   1781e:	2800      	cmp	r0, #0
   17820:	f040 8165 	bne.w	17aee <_svfprintf_r+0x11ae>
   17824:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   17826:	42a3      	cmp	r3, r4
   17828:	d206      	bcs.n	17838 <_svfprintf_r+0xef8>
   1782a:	2130      	movs	r1, #48	; 0x30
   1782c:	1c5a      	adds	r2, r3, #1
   1782e:	9223      	str	r2, [sp, #140]	; 0x8c
   17830:	7019      	strb	r1, [r3, #0]
   17832:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   17834:	429c      	cmp	r4, r3
   17836:	d8f9      	bhi.n	1782c <_svfprintf_r+0xeec>
   17838:	1b9b      	subs	r3, r3, r6
   1783a:	9313      	str	r3, [sp, #76]	; 0x4c
   1783c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1783e:	2b47      	cmp	r3, #71	; 0x47
   17840:	f000 80e9 	beq.w	17a16 <_svfprintf_r+0x10d6>
   17844:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17846:	2b65      	cmp	r3, #101	; 0x65
   17848:	f340 81cd 	ble.w	17be6 <_svfprintf_r+0x12a6>
   1784c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1784e:	2b66      	cmp	r3, #102	; 0x66
   17850:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17852:	9312      	str	r3, [sp, #72]	; 0x48
   17854:	f000 819e 	beq.w	17b94 <_svfprintf_r+0x1254>
   17858:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1785a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1785c:	4619      	mov	r1, r3
   1785e:	4291      	cmp	r1, r2
   17860:	f300 818a 	bgt.w	17b78 <_svfprintf_r+0x1238>
   17864:	f01b 0f01 	tst.w	fp, #1
   17868:	f040 8213 	bne.w	17c92 <_svfprintf_r+0x1352>
   1786c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   17870:	9308      	str	r3, [sp, #32]
   17872:	2367      	movs	r3, #103	; 0x67
   17874:	920e      	str	r2, [sp, #56]	; 0x38
   17876:	9311      	str	r3, [sp, #68]	; 0x44
   17878:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1787a:	2b00      	cmp	r3, #0
   1787c:	f040 80c4 	bne.w	17a08 <_svfprintf_r+0x10c8>
   17880:	930a      	str	r3, [sp, #40]	; 0x28
   17882:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   17886:	f7ff b973 	b.w	16b70 <_svfprintf_r+0x230>
   1788a:	4635      	mov	r5, r6
   1788c:	460c      	mov	r4, r1
   1788e:	4646      	mov	r6, r8
   17890:	4690      	mov	r8, r2
   17892:	3301      	adds	r3, #1
   17894:	443c      	add	r4, r7
   17896:	2b07      	cmp	r3, #7
   17898:	9427      	str	r4, [sp, #156]	; 0x9c
   1789a:	9326      	str	r3, [sp, #152]	; 0x98
   1789c:	e888 00a0 	stmia.w	r8, {r5, r7}
   178a0:	f73f aed1 	bgt.w	17646 <_svfprintf_r+0xd06>
   178a4:	f108 0808 	add.w	r8, r8, #8
   178a8:	e6d7      	b.n	1765a <_svfprintf_r+0xd1a>
   178aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   178ac:	6813      	ldr	r3, [r2, #0]
   178ae:	3204      	adds	r2, #4
   178b0:	920f      	str	r2, [sp, #60]	; 0x3c
   178b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   178b4:	601a      	str	r2, [r3, #0]
   178b6:	f7ff b86a 	b.w	1698e <_svfprintf_r+0x4e>
   178ba:	aa25      	add	r2, sp, #148	; 0x94
   178bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   178be:	980c      	ldr	r0, [sp, #48]	; 0x30
   178c0:	f004 fbf0 	bl	1c0a4 <__ssprint_r>
   178c4:	2800      	cmp	r0, #0
   178c6:	f47f a90d 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   178ca:	46c8      	mov	r8, r9
   178cc:	e48d      	b.n	171ea <_svfprintf_r+0x8aa>
   178ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
   178d0:	4a27      	ldr	r2, [pc, #156]	; (17970 <_svfprintf_r+0x1030>)
   178d2:	f8c8 2000 	str.w	r2, [r8]
   178d6:	3301      	adds	r3, #1
   178d8:	3401      	adds	r4, #1
   178da:	2201      	movs	r2, #1
   178dc:	2b07      	cmp	r3, #7
   178de:	9427      	str	r4, [sp, #156]	; 0x9c
   178e0:	9326      	str	r3, [sp, #152]	; 0x98
   178e2:	f8c8 2004 	str.w	r2, [r8, #4]
   178e6:	dc72      	bgt.n	179ce <_svfprintf_r+0x108e>
   178e8:	f108 0808 	add.w	r8, r8, #8
   178ec:	b929      	cbnz	r1, 178fa <_svfprintf_r+0xfba>
   178ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   178f0:	b91b      	cbnz	r3, 178fa <_svfprintf_r+0xfba>
   178f2:	9b07      	ldr	r3, [sp, #28]
   178f4:	07d8      	lsls	r0, r3, #31
   178f6:	f57f aa03 	bpl.w	16d00 <_svfprintf_r+0x3c0>
   178fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   178fc:	9819      	ldr	r0, [sp, #100]	; 0x64
   178fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   17900:	f8c8 2000 	str.w	r2, [r8]
   17904:	3301      	adds	r3, #1
   17906:	4602      	mov	r2, r0
   17908:	4422      	add	r2, r4
   1790a:	2b07      	cmp	r3, #7
   1790c:	9227      	str	r2, [sp, #156]	; 0x9c
   1790e:	f8c8 0004 	str.w	r0, [r8, #4]
   17912:	9326      	str	r3, [sp, #152]	; 0x98
   17914:	f300 818d 	bgt.w	17c32 <_svfprintf_r+0x12f2>
   17918:	f108 0808 	add.w	r8, r8, #8
   1791c:	2900      	cmp	r1, #0
   1791e:	f2c0 8165 	blt.w	17bec <_svfprintf_r+0x12ac>
   17922:	9913      	ldr	r1, [sp, #76]	; 0x4c
   17924:	f8c8 6000 	str.w	r6, [r8]
   17928:	3301      	adds	r3, #1
   1792a:	188c      	adds	r4, r1, r2
   1792c:	2b07      	cmp	r3, #7
   1792e:	9427      	str	r4, [sp, #156]	; 0x9c
   17930:	9326      	str	r3, [sp, #152]	; 0x98
   17932:	f8c8 1004 	str.w	r1, [r8, #4]
   17936:	f77f a9e1 	ble.w	16cfc <_svfprintf_r+0x3bc>
   1793a:	e52c      	b.n	17396 <_svfprintf_r+0xa56>
   1793c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1793e:	9909      	ldr	r1, [sp, #36]	; 0x24
   17940:	6813      	ldr	r3, [r2, #0]
   17942:	17cd      	asrs	r5, r1, #31
   17944:	4608      	mov	r0, r1
   17946:	3204      	adds	r2, #4
   17948:	4629      	mov	r1, r5
   1794a:	920f      	str	r2, [sp, #60]	; 0x3c
   1794c:	e9c3 0100 	strd	r0, r1, [r3]
   17950:	f7ff b81d 	b.w	1698e <_svfprintf_r+0x4e>
   17954:	aa25      	add	r2, sp, #148	; 0x94
   17956:	990b      	ldr	r1, [sp, #44]	; 0x2c
   17958:	980c      	ldr	r0, [sp, #48]	; 0x30
   1795a:	f004 fba3 	bl	1c0a4 <__ssprint_r>
   1795e:	2800      	cmp	r0, #0
   17960:	f47f a8c0 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   17964:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   17966:	46c8      	mov	r8, r9
   17968:	e458      	b.n	1721c <_svfprintf_r+0x8dc>
   1796a:	bf00      	nop
   1796c:	000250e0 	.word	0x000250e0
   17970:	00022038 	.word	0x00022038
   17974:	2140      	movs	r1, #64	; 0x40
   17976:	980c      	ldr	r0, [sp, #48]	; 0x30
   17978:	f7fd fc56 	bl	15228 <_malloc_r>
   1797c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1797e:	6010      	str	r0, [r2, #0]
   17980:	6110      	str	r0, [r2, #16]
   17982:	2800      	cmp	r0, #0
   17984:	f000 81f2 	beq.w	17d6c <_svfprintf_r+0x142c>
   17988:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1798a:	2340      	movs	r3, #64	; 0x40
   1798c:	6153      	str	r3, [r2, #20]
   1798e:	f7fe bfee 	b.w	1696e <_svfprintf_r+0x2e>
   17992:	a823      	add	r0, sp, #140	; 0x8c
   17994:	a920      	add	r1, sp, #128	; 0x80
   17996:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   17998:	9004      	str	r0, [sp, #16]
   1799a:	9103      	str	r1, [sp, #12]
   1799c:	a81f      	add	r0, sp, #124	; 0x7c
   1799e:	2103      	movs	r1, #3
   179a0:	9002      	str	r0, [sp, #8]
   179a2:	9a08      	ldr	r2, [sp, #32]
   179a4:	9401      	str	r4, [sp, #4]
   179a6:	463b      	mov	r3, r7
   179a8:	9100      	str	r1, [sp, #0]
   179aa:	980c      	ldr	r0, [sp, #48]	; 0x30
   179ac:	f002 fddc 	bl	1a568 <_dtoa_r>
   179b0:	4625      	mov	r5, r4
   179b2:	4606      	mov	r6, r0
   179b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   179b6:	2b46      	cmp	r3, #70	; 0x46
   179b8:	eb06 0405 	add.w	r4, r6, r5
   179bc:	f47f af29 	bne.w	17812 <_svfprintf_r+0xed2>
   179c0:	7833      	ldrb	r3, [r6, #0]
   179c2:	2b30      	cmp	r3, #48	; 0x30
   179c4:	f000 8178 	beq.w	17cb8 <_svfprintf_r+0x1378>
   179c8:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   179ca:	442c      	add	r4, r5
   179cc:	e721      	b.n	17812 <_svfprintf_r+0xed2>
   179ce:	aa25      	add	r2, sp, #148	; 0x94
   179d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   179d2:	980c      	ldr	r0, [sp, #48]	; 0x30
   179d4:	f004 fb66 	bl	1c0a4 <__ssprint_r>
   179d8:	2800      	cmp	r0, #0
   179da:	f47f a883 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   179de:	991f      	ldr	r1, [sp, #124]	; 0x7c
   179e0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   179e2:	46c8      	mov	r8, r9
   179e4:	e782      	b.n	178ec <_svfprintf_r+0xfac>
   179e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   179e8:	2b00      	cmp	r3, #0
   179ea:	bf08      	it	eq
   179ec:	2301      	moveq	r3, #1
   179ee:	930a      	str	r3, [sp, #40]	; 0x28
   179f0:	e6db      	b.n	177aa <_svfprintf_r+0xe6a>
   179f2:	4630      	mov	r0, r6
   179f4:	940a      	str	r4, [sp, #40]	; 0x28
   179f6:	f7fe fee3 	bl	167c0 <strlen>
   179fa:	950f      	str	r5, [sp, #60]	; 0x3c
   179fc:	900e      	str	r0, [sp, #56]	; 0x38
   179fe:	f8cd b01c 	str.w	fp, [sp, #28]
   17a02:	4603      	mov	r3, r0
   17a04:	f7ff b9f9 	b.w	16dfa <_svfprintf_r+0x4ba>
   17a08:	272d      	movs	r7, #45	; 0x2d
   17a0a:	2300      	movs	r3, #0
   17a0c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   17a10:	930a      	str	r3, [sp, #40]	; 0x28
   17a12:	f7ff b8ae 	b.w	16b72 <_svfprintf_r+0x232>
   17a16:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17a18:	9312      	str	r3, [sp, #72]	; 0x48
   17a1a:	461a      	mov	r2, r3
   17a1c:	3303      	adds	r3, #3
   17a1e:	db04      	blt.n	17a2a <_svfprintf_r+0x10ea>
   17a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17a22:	4619      	mov	r1, r3
   17a24:	4291      	cmp	r1, r2
   17a26:	f6bf af17 	bge.w	17858 <_svfprintf_r+0xf18>
   17a2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17a2c:	3b02      	subs	r3, #2
   17a2e:	9311      	str	r3, [sp, #68]	; 0x44
   17a30:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   17a34:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   17a38:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17a3a:	3b01      	subs	r3, #1
   17a3c:	2b00      	cmp	r3, #0
   17a3e:	931f      	str	r3, [sp, #124]	; 0x7c
   17a40:	bfbd      	ittte	lt
   17a42:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   17a44:	f1c3 0301 	rsblt	r3, r3, #1
   17a48:	222d      	movlt	r2, #45	; 0x2d
   17a4a:	222b      	movge	r2, #43	; 0x2b
   17a4c:	2b09      	cmp	r3, #9
   17a4e:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   17a52:	f340 8116 	ble.w	17c82 <_svfprintf_r+0x1342>
   17a56:	f10d 0493 	add.w	r4, sp, #147	; 0x93
   17a5a:	4620      	mov	r0, r4
   17a5c:	4dab      	ldr	r5, [pc, #684]	; (17d0c <_svfprintf_r+0x13cc>)
   17a5e:	e000      	b.n	17a62 <_svfprintf_r+0x1122>
   17a60:	4610      	mov	r0, r2
   17a62:	fb85 1203 	smull	r1, r2, r5, r3
   17a66:	17d9      	asrs	r1, r3, #31
   17a68:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   17a6c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   17a70:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   17a74:	3230      	adds	r2, #48	; 0x30
   17a76:	2909      	cmp	r1, #9
   17a78:	f800 2c01 	strb.w	r2, [r0, #-1]
   17a7c:	460b      	mov	r3, r1
   17a7e:	f100 32ff 	add.w	r2, r0, #4294967295
   17a82:	dced      	bgt.n	17a60 <_svfprintf_r+0x1120>
   17a84:	3330      	adds	r3, #48	; 0x30
   17a86:	3802      	subs	r0, #2
   17a88:	b2d9      	uxtb	r1, r3
   17a8a:	4284      	cmp	r4, r0
   17a8c:	f802 1c01 	strb.w	r1, [r2, #-1]
   17a90:	f240 8165 	bls.w	17d5e <_svfprintf_r+0x141e>
   17a94:	f10d 0086 	add.w	r0, sp, #134	; 0x86
   17a98:	4613      	mov	r3, r2
   17a9a:	e001      	b.n	17aa0 <_svfprintf_r+0x1160>
   17a9c:	f813 1b01 	ldrb.w	r1, [r3], #1
   17aa0:	f800 1b01 	strb.w	r1, [r0], #1
   17aa4:	42a3      	cmp	r3, r4
   17aa6:	d1f9      	bne.n	17a9c <_svfprintf_r+0x115c>
   17aa8:	3301      	adds	r3, #1
   17aaa:	1a9b      	subs	r3, r3, r2
   17aac:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   17ab0:	4413      	add	r3, r2
   17ab2:	aa21      	add	r2, sp, #132	; 0x84
   17ab4:	1a9b      	subs	r3, r3, r2
   17ab6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   17ab8:	931b      	str	r3, [sp, #108]	; 0x6c
   17aba:	2a01      	cmp	r2, #1
   17abc:	4413      	add	r3, r2
   17abe:	930e      	str	r3, [sp, #56]	; 0x38
   17ac0:	f340 8119 	ble.w	17cf6 <_svfprintf_r+0x13b6>
   17ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17ac6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   17ac8:	4413      	add	r3, r2
   17aca:	930e      	str	r3, [sp, #56]	; 0x38
   17acc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   17ad0:	9308      	str	r3, [sp, #32]
   17ad2:	2300      	movs	r3, #0
   17ad4:	9312      	str	r3, [sp, #72]	; 0x48
   17ad6:	e6cf      	b.n	17878 <_svfprintf_r+0xf38>
   17ad8:	aa25      	add	r2, sp, #148	; 0x94
   17ada:	990b      	ldr	r1, [sp, #44]	; 0x2c
   17adc:	980c      	ldr	r0, [sp, #48]	; 0x30
   17ade:	f004 fae1 	bl	1c0a4 <__ssprint_r>
   17ae2:	2800      	cmp	r0, #0
   17ae4:	f47e affe 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   17ae8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   17aea:	46c8      	mov	r8, r9
   17aec:	e4d7      	b.n	1749e <_svfprintf_r+0xb5e>
   17aee:	4623      	mov	r3, r4
   17af0:	e6a2      	b.n	17838 <_svfprintf_r+0xef8>
   17af2:	aa25      	add	r2, sp, #148	; 0x94
   17af4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   17af6:	980c      	ldr	r0, [sp, #48]	; 0x30
   17af8:	f004 fad4 	bl	1c0a4 <__ssprint_r>
   17afc:	2800      	cmp	r0, #0
   17afe:	f47e aff1 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   17b02:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   17b04:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   17b06:	46c8      	mov	r8, r9
   17b08:	e5ae      	b.n	17668 <_svfprintf_r+0xd28>
   17b0a:	aa25      	add	r2, sp, #148	; 0x94
   17b0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   17b0e:	980c      	ldr	r0, [sp, #48]	; 0x30
   17b10:	f004 fac8 	bl	1c0a4 <__ssprint_r>
   17b14:	2800      	cmp	r0, #0
   17b16:	f47e afe5 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   17b1a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   17b1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17b1e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   17b20:	1a9a      	subs	r2, r3, r2
   17b22:	46c8      	mov	r8, r9
   17b24:	e5b8      	b.n	17698 <_svfprintf_r+0xd58>
   17b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17b28:	9612      	str	r6, [sp, #72]	; 0x48
   17b2a:	2b06      	cmp	r3, #6
   17b2c:	bf28      	it	cs
   17b2e:	2306      	movcs	r3, #6
   17b30:	960a      	str	r6, [sp, #40]	; 0x28
   17b32:	4637      	mov	r7, r6
   17b34:	9308      	str	r3, [sp, #32]
   17b36:	950f      	str	r5, [sp, #60]	; 0x3c
   17b38:	f8cd b01c 	str.w	fp, [sp, #28]
   17b3c:	930e      	str	r3, [sp, #56]	; 0x38
   17b3e:	4e74      	ldr	r6, [pc, #464]	; (17d10 <_svfprintf_r+0x13d0>)
   17b40:	f7ff b816 	b.w	16b70 <_svfprintf_r+0x230>
   17b44:	a823      	add	r0, sp, #140	; 0x8c
   17b46:	a920      	add	r1, sp, #128	; 0x80
   17b48:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   17b4a:	9004      	str	r0, [sp, #16]
   17b4c:	9103      	str	r1, [sp, #12]
   17b4e:	a81f      	add	r0, sp, #124	; 0x7c
   17b50:	2103      	movs	r1, #3
   17b52:	9002      	str	r0, [sp, #8]
   17b54:	9a08      	ldr	r2, [sp, #32]
   17b56:	9501      	str	r5, [sp, #4]
   17b58:	463b      	mov	r3, r7
   17b5a:	9100      	str	r1, [sp, #0]
   17b5c:	980c      	ldr	r0, [sp, #48]	; 0x30
   17b5e:	f002 fd03 	bl	1a568 <_dtoa_r>
   17b62:	4606      	mov	r6, r0
   17b64:	1944      	adds	r4, r0, r5
   17b66:	e72b      	b.n	179c0 <_svfprintf_r+0x1080>
   17b68:	2306      	movs	r3, #6
   17b6a:	930a      	str	r3, [sp, #40]	; 0x28
   17b6c:	e61d      	b.n	177aa <_svfprintf_r+0xe6a>
   17b6e:	272d      	movs	r7, #45	; 0x2d
   17b70:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   17b74:	f7ff bacd 	b.w	17112 <_svfprintf_r+0x7d2>
   17b78:	9a19      	ldr	r2, [sp, #100]	; 0x64
   17b7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17b7c:	4413      	add	r3, r2
   17b7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   17b80:	930e      	str	r3, [sp, #56]	; 0x38
   17b82:	2a00      	cmp	r2, #0
   17b84:	f340 80b0 	ble.w	17ce8 <_svfprintf_r+0x13a8>
   17b88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   17b8c:	9308      	str	r3, [sp, #32]
   17b8e:	2367      	movs	r3, #103	; 0x67
   17b90:	9311      	str	r3, [sp, #68]	; 0x44
   17b92:	e671      	b.n	17878 <_svfprintf_r+0xf38>
   17b94:	2b00      	cmp	r3, #0
   17b96:	f340 80c3 	ble.w	17d20 <_svfprintf_r+0x13e0>
   17b9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17b9c:	2a00      	cmp	r2, #0
   17b9e:	f040 8099 	bne.w	17cd4 <_svfprintf_r+0x1394>
   17ba2:	f01b 0f01 	tst.w	fp, #1
   17ba6:	f040 8095 	bne.w	17cd4 <_svfprintf_r+0x1394>
   17baa:	9308      	str	r3, [sp, #32]
   17bac:	930e      	str	r3, [sp, #56]	; 0x38
   17bae:	e663      	b.n	17878 <_svfprintf_r+0xf38>
   17bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17bb2:	9308      	str	r3, [sp, #32]
   17bb4:	930e      	str	r3, [sp, #56]	; 0x38
   17bb6:	900a      	str	r0, [sp, #40]	; 0x28
   17bb8:	950f      	str	r5, [sp, #60]	; 0x3c
   17bba:	f8cd b01c 	str.w	fp, [sp, #28]
   17bbe:	9012      	str	r0, [sp, #72]	; 0x48
   17bc0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   17bc4:	f7fe bfd4 	b.w	16b70 <_svfprintf_r+0x230>
   17bc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17bca:	2b47      	cmp	r3, #71	; 0x47
   17bcc:	f47f ae20 	bne.w	17810 <_svfprintf_r+0xed0>
   17bd0:	f01b 0f01 	tst.w	fp, #1
   17bd4:	f47f aeee 	bne.w	179b4 <_svfprintf_r+0x1074>
   17bd8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   17bda:	1b9b      	subs	r3, r3, r6
   17bdc:	9313      	str	r3, [sp, #76]	; 0x4c
   17bde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17be0:	2b47      	cmp	r3, #71	; 0x47
   17be2:	f43f af18 	beq.w	17a16 <_svfprintf_r+0x10d6>
   17be6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17be8:	9312      	str	r3, [sp, #72]	; 0x48
   17bea:	e721      	b.n	17a30 <_svfprintf_r+0x10f0>
   17bec:	424f      	negs	r7, r1
   17bee:	3110      	adds	r1, #16
   17bf0:	4d48      	ldr	r5, [pc, #288]	; (17d14 <_svfprintf_r+0x13d4>)
   17bf2:	da2f      	bge.n	17c54 <_svfprintf_r+0x1314>
   17bf4:	2410      	movs	r4, #16
   17bf6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   17bfa:	e004      	b.n	17c06 <_svfprintf_r+0x12c6>
   17bfc:	f108 0808 	add.w	r8, r8, #8
   17c00:	3f10      	subs	r7, #16
   17c02:	2f10      	cmp	r7, #16
   17c04:	dd26      	ble.n	17c54 <_svfprintf_r+0x1314>
   17c06:	3301      	adds	r3, #1
   17c08:	3210      	adds	r2, #16
   17c0a:	2b07      	cmp	r3, #7
   17c0c:	9227      	str	r2, [sp, #156]	; 0x9c
   17c0e:	9326      	str	r3, [sp, #152]	; 0x98
   17c10:	f8c8 5000 	str.w	r5, [r8]
   17c14:	f8c8 4004 	str.w	r4, [r8, #4]
   17c18:	ddf0      	ble.n	17bfc <_svfprintf_r+0x12bc>
   17c1a:	aa25      	add	r2, sp, #148	; 0x94
   17c1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   17c1e:	4658      	mov	r0, fp
   17c20:	f004 fa40 	bl	1c0a4 <__ssprint_r>
   17c24:	2800      	cmp	r0, #0
   17c26:	f47e af5d 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   17c2a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   17c2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   17c2e:	46c8      	mov	r8, r9
   17c30:	e7e6      	b.n	17c00 <_svfprintf_r+0x12c0>
   17c32:	aa25      	add	r2, sp, #148	; 0x94
   17c34:	990b      	ldr	r1, [sp, #44]	; 0x2c
   17c36:	980c      	ldr	r0, [sp, #48]	; 0x30
   17c38:	f004 fa34 	bl	1c0a4 <__ssprint_r>
   17c3c:	2800      	cmp	r0, #0
   17c3e:	f47e af51 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   17c42:	991f      	ldr	r1, [sp, #124]	; 0x7c
   17c44:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   17c46:	9b26      	ldr	r3, [sp, #152]	; 0x98
   17c48:	46c8      	mov	r8, r9
   17c4a:	e667      	b.n	1791c <_svfprintf_r+0xfdc>
   17c4c:	2000      	movs	r0, #0
   17c4e:	900a      	str	r0, [sp, #40]	; 0x28
   17c50:	f7fe bed0 	b.w	169f4 <_svfprintf_r+0xb4>
   17c54:	3301      	adds	r3, #1
   17c56:	443a      	add	r2, r7
   17c58:	2b07      	cmp	r3, #7
   17c5a:	e888 00a0 	stmia.w	r8, {r5, r7}
   17c5e:	9227      	str	r2, [sp, #156]	; 0x9c
   17c60:	9326      	str	r3, [sp, #152]	; 0x98
   17c62:	f108 0808 	add.w	r8, r8, #8
   17c66:	f77f ae5c 	ble.w	17922 <_svfprintf_r+0xfe2>
   17c6a:	aa25      	add	r2, sp, #148	; 0x94
   17c6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   17c6e:	980c      	ldr	r0, [sp, #48]	; 0x30
   17c70:	f004 fa18 	bl	1c0a4 <__ssprint_r>
   17c74:	2800      	cmp	r0, #0
   17c76:	f47e af35 	bne.w	16ae4 <_svfprintf_r+0x1a4>
   17c7a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   17c7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   17c7e:	46c8      	mov	r8, r9
   17c80:	e64f      	b.n	17922 <_svfprintf_r+0xfe2>
   17c82:	3330      	adds	r3, #48	; 0x30
   17c84:	2230      	movs	r2, #48	; 0x30
   17c86:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   17c8a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   17c8e:	ab22      	add	r3, sp, #136	; 0x88
   17c90:	e70f      	b.n	17ab2 <_svfprintf_r+0x1172>
   17c92:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17c94:	9a19      	ldr	r2, [sp, #100]	; 0x64
   17c96:	4413      	add	r3, r2
   17c98:	930e      	str	r3, [sp, #56]	; 0x38
   17c9a:	e775      	b.n	17b88 <_svfprintf_r+0x1248>
   17c9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   17c9e:	e5cb      	b.n	17838 <_svfprintf_r+0xef8>
   17ca0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   17ca2:	4e1d      	ldr	r6, [pc, #116]	; (17d18 <_svfprintf_r+0x13d8>)
   17ca4:	2b00      	cmp	r3, #0
   17ca6:	bfb6      	itet	lt
   17ca8:	272d      	movlt	r7, #45	; 0x2d
   17caa:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   17cae:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
   17cb2:	4b1a      	ldr	r3, [pc, #104]	; (17d1c <_svfprintf_r+0x13dc>)
   17cb4:	f7ff ba2f 	b.w	17116 <_svfprintf_r+0x7d6>
   17cb8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   17cba:	9808      	ldr	r0, [sp, #32]
   17cbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   17cbe:	4639      	mov	r1, r7
   17cc0:	f7fb fa36 	bl	13130 <__aeabi_dcmpeq>
   17cc4:	2800      	cmp	r0, #0
   17cc6:	f47f ae7f 	bne.w	179c8 <_svfprintf_r+0x1088>
   17cca:	f1c5 0501 	rsb	r5, r5, #1
   17cce:	951f      	str	r5, [sp, #124]	; 0x7c
   17cd0:	442c      	add	r4, r5
   17cd2:	e59e      	b.n	17812 <_svfprintf_r+0xed2>
   17cd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17cd6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   17cd8:	4413      	add	r3, r2
   17cda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17cdc:	441a      	add	r2, r3
   17cde:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   17ce2:	920e      	str	r2, [sp, #56]	; 0x38
   17ce4:	9308      	str	r3, [sp, #32]
   17ce6:	e5c7      	b.n	17878 <_svfprintf_r+0xf38>
   17ce8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17cea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17cec:	f1c3 0301 	rsb	r3, r3, #1
   17cf0:	441a      	add	r2, r3
   17cf2:	4613      	mov	r3, r2
   17cf4:	e7d0      	b.n	17c98 <_svfprintf_r+0x1358>
   17cf6:	f01b 0301 	ands.w	r3, fp, #1
   17cfa:	9312      	str	r3, [sp, #72]	; 0x48
   17cfc:	f47f aee2 	bne.w	17ac4 <_svfprintf_r+0x1184>
   17d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17d02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   17d06:	9308      	str	r3, [sp, #32]
   17d08:	e5b6      	b.n	17878 <_svfprintf_r+0xf38>
   17d0a:	bf00      	nop
   17d0c:	66666667 	.word	0x66666667
   17d10:	000250c8 	.word	0x000250c8
   17d14:	000250e0 	.word	0x000250e0
   17d18:	0002509c 	.word	0x0002509c
   17d1c:	00025098 	.word	0x00025098
   17d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17d22:	b913      	cbnz	r3, 17d2a <_svfprintf_r+0x13ea>
   17d24:	f01b 0f01 	tst.w	fp, #1
   17d28:	d002      	beq.n	17d30 <_svfprintf_r+0x13f0>
   17d2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   17d2c:	3301      	adds	r3, #1
   17d2e:	e7d4      	b.n	17cda <_svfprintf_r+0x139a>
   17d30:	2301      	movs	r3, #1
   17d32:	e73a      	b.n	17baa <_svfprintf_r+0x126a>
   17d34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   17d36:	f89a 3001 	ldrb.w	r3, [sl, #1]
   17d3a:	6828      	ldr	r0, [r5, #0]
   17d3c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   17d40:	900a      	str	r0, [sp, #40]	; 0x28
   17d42:	4628      	mov	r0, r5
   17d44:	3004      	adds	r0, #4
   17d46:	46a2      	mov	sl, r4
   17d48:	900f      	str	r0, [sp, #60]	; 0x3c
   17d4a:	f7fe be51 	b.w	169f0 <_svfprintf_r+0xb0>
   17d4e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   17d52:	f7ff b867 	b.w	16e24 <_svfprintf_r+0x4e4>
   17d56:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   17d5a:	f7ff ba15 	b.w	17188 <_svfprintf_r+0x848>
   17d5e:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   17d62:	e6a6      	b.n	17ab2 <_svfprintf_r+0x1172>
   17d64:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   17d68:	f7ff b8eb 	b.w	16f42 <_svfprintf_r+0x602>
   17d6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   17d6e:	230c      	movs	r3, #12
   17d70:	6013      	str	r3, [r2, #0]
   17d72:	f04f 33ff 	mov.w	r3, #4294967295
   17d76:	9309      	str	r3, [sp, #36]	; 0x24
   17d78:	f7fe bebd 	b.w	16af6 <_svfprintf_r+0x1b6>
   17d7c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   17d80:	f7ff b99a 	b.w	170b8 <_svfprintf_r+0x778>
   17d84:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   17d88:	f7ff b976 	b.w	17078 <_svfprintf_r+0x738>
   17d8c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   17d90:	f7ff b959 	b.w	17046 <_svfprintf_r+0x706>
   17d94:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   17d98:	f7ff b912 	b.w	16fc0 <_svfprintf_r+0x680>

00017d9c <_user_strerror>:
   17d9c:	2000      	movs	r0, #0
   17d9e:	4770      	bx	lr

00017da0 <__sprint_r.part.0>:
   17da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17da4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   17da6:	049c      	lsls	r4, r3, #18
   17da8:	4693      	mov	fp, r2
   17daa:	d52f      	bpl.n	17e0c <__sprint_r.part.0+0x6c>
   17dac:	6893      	ldr	r3, [r2, #8]
   17dae:	6812      	ldr	r2, [r2, #0]
   17db0:	b353      	cbz	r3, 17e08 <__sprint_r.part.0+0x68>
   17db2:	460e      	mov	r6, r1
   17db4:	4607      	mov	r7, r0
   17db6:	f102 0908 	add.w	r9, r2, #8
   17dba:	e919 0420 	ldmdb	r9, {r5, sl}
   17dbe:	ea5f 089a 	movs.w	r8, sl, lsr #2
   17dc2:	d017      	beq.n	17df4 <__sprint_r.part.0+0x54>
   17dc4:	3d04      	subs	r5, #4
   17dc6:	2400      	movs	r4, #0
   17dc8:	e001      	b.n	17dce <__sprint_r.part.0+0x2e>
   17dca:	45a0      	cmp	r8, r4
   17dcc:	d010      	beq.n	17df0 <__sprint_r.part.0+0x50>
   17dce:	4632      	mov	r2, r6
   17dd0:	f855 1f04 	ldr.w	r1, [r5, #4]!
   17dd4:	4638      	mov	r0, r7
   17dd6:	f003 fc8b 	bl	1b6f0 <_fputwc_r>
   17dda:	1c43      	adds	r3, r0, #1
   17ddc:	f104 0401 	add.w	r4, r4, #1
   17de0:	d1f3      	bne.n	17dca <__sprint_r.part.0+0x2a>
   17de2:	2300      	movs	r3, #0
   17de4:	f8cb 3008 	str.w	r3, [fp, #8]
   17de8:	f8cb 3004 	str.w	r3, [fp, #4]
   17dec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17df0:	f8db 3008 	ldr.w	r3, [fp, #8]
   17df4:	f02a 0a03 	bic.w	sl, sl, #3
   17df8:	eba3 030a 	sub.w	r3, r3, sl
   17dfc:	f8cb 3008 	str.w	r3, [fp, #8]
   17e00:	f109 0908 	add.w	r9, r9, #8
   17e04:	2b00      	cmp	r3, #0
   17e06:	d1d8      	bne.n	17dba <__sprint_r.part.0+0x1a>
   17e08:	2000      	movs	r0, #0
   17e0a:	e7ea      	b.n	17de2 <__sprint_r.part.0+0x42>
   17e0c:	f7fc ff68 	bl	14ce0 <__sfvwrite_r>
   17e10:	2300      	movs	r3, #0
   17e12:	f8cb 3008 	str.w	r3, [fp, #8]
   17e16:	f8cb 3004 	str.w	r3, [fp, #4]
   17e1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e1e:	bf00      	nop

00017e20 <__sprint_r>:
   17e20:	6893      	ldr	r3, [r2, #8]
   17e22:	b10b      	cbz	r3, 17e28 <__sprint_r+0x8>
   17e24:	f7ff bfbc 	b.w	17da0 <__sprint_r.part.0>
   17e28:	b410      	push	{r4}
   17e2a:	4618      	mov	r0, r3
   17e2c:	6053      	str	r3, [r2, #4]
   17e2e:	bc10      	pop	{r4}
   17e30:	4770      	bx	lr
   17e32:	bf00      	nop

00017e34 <_vfiprintf_r>:
   17e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e38:	b0ad      	sub	sp, #180	; 0xb4
   17e3a:	461d      	mov	r5, r3
   17e3c:	468b      	mov	fp, r1
   17e3e:	4690      	mov	r8, r2
   17e40:	9307      	str	r3, [sp, #28]
   17e42:	9006      	str	r0, [sp, #24]
   17e44:	b118      	cbz	r0, 17e4e <_vfiprintf_r+0x1a>
   17e46:	6b83      	ldr	r3, [r0, #56]	; 0x38
   17e48:	2b00      	cmp	r3, #0
   17e4a:	f000 80f3 	beq.w	18034 <_vfiprintf_r+0x200>
   17e4e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   17e52:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   17e56:	07df      	lsls	r7, r3, #31
   17e58:	b281      	uxth	r1, r0
   17e5a:	d402      	bmi.n	17e62 <_vfiprintf_r+0x2e>
   17e5c:	058e      	lsls	r6, r1, #22
   17e5e:	f140 80fc 	bpl.w	1805a <_vfiprintf_r+0x226>
   17e62:	048c      	lsls	r4, r1, #18
   17e64:	d40a      	bmi.n	17e7c <_vfiprintf_r+0x48>
   17e66:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   17e6a:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   17e6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   17e72:	f8ab 100c 	strh.w	r1, [fp, #12]
   17e76:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   17e7a:	b289      	uxth	r1, r1
   17e7c:	0708      	lsls	r0, r1, #28
   17e7e:	f140 80b3 	bpl.w	17fe8 <_vfiprintf_r+0x1b4>
   17e82:	f8db 3010 	ldr.w	r3, [fp, #16]
   17e86:	2b00      	cmp	r3, #0
   17e88:	f000 80ae 	beq.w	17fe8 <_vfiprintf_r+0x1b4>
   17e8c:	f001 031a 	and.w	r3, r1, #26
   17e90:	2b0a      	cmp	r3, #10
   17e92:	f000 80b5 	beq.w	18000 <_vfiprintf_r+0x1cc>
   17e96:	2300      	movs	r3, #0
   17e98:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   17e9c:	930b      	str	r3, [sp, #44]	; 0x2c
   17e9e:	9311      	str	r3, [sp, #68]	; 0x44
   17ea0:	9310      	str	r3, [sp, #64]	; 0x40
   17ea2:	9303      	str	r3, [sp, #12]
   17ea4:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   17ea8:	46ca      	mov	sl, r9
   17eaa:	f8cd b010 	str.w	fp, [sp, #16]
   17eae:	f898 3000 	ldrb.w	r3, [r8]
   17eb2:	4644      	mov	r4, r8
   17eb4:	b1fb      	cbz	r3, 17ef6 <_vfiprintf_r+0xc2>
   17eb6:	2b25      	cmp	r3, #37	; 0x25
   17eb8:	d102      	bne.n	17ec0 <_vfiprintf_r+0x8c>
   17eba:	e01c      	b.n	17ef6 <_vfiprintf_r+0xc2>
   17ebc:	2b25      	cmp	r3, #37	; 0x25
   17ebe:	d003      	beq.n	17ec8 <_vfiprintf_r+0x94>
   17ec0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   17ec4:	2b00      	cmp	r3, #0
   17ec6:	d1f9      	bne.n	17ebc <_vfiprintf_r+0x88>
   17ec8:	eba4 0508 	sub.w	r5, r4, r8
   17ecc:	b19d      	cbz	r5, 17ef6 <_vfiprintf_r+0xc2>
   17ece:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17ed0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   17ed2:	f8ca 8000 	str.w	r8, [sl]
   17ed6:	3301      	adds	r3, #1
   17ed8:	442a      	add	r2, r5
   17eda:	2b07      	cmp	r3, #7
   17edc:	f8ca 5004 	str.w	r5, [sl, #4]
   17ee0:	9211      	str	r2, [sp, #68]	; 0x44
   17ee2:	9310      	str	r3, [sp, #64]	; 0x40
   17ee4:	dd7a      	ble.n	17fdc <_vfiprintf_r+0x1a8>
   17ee6:	2a00      	cmp	r2, #0
   17ee8:	f040 84b0 	bne.w	1884c <_vfiprintf_r+0xa18>
   17eec:	9b03      	ldr	r3, [sp, #12]
   17eee:	9210      	str	r2, [sp, #64]	; 0x40
   17ef0:	442b      	add	r3, r5
   17ef2:	46ca      	mov	sl, r9
   17ef4:	9303      	str	r3, [sp, #12]
   17ef6:	7823      	ldrb	r3, [r4, #0]
   17ef8:	2b00      	cmp	r3, #0
   17efa:	f000 83e0 	beq.w	186be <_vfiprintf_r+0x88a>
   17efe:	2000      	movs	r0, #0
   17f00:	f04f 0300 	mov.w	r3, #0
   17f04:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   17f08:	f104 0801 	add.w	r8, r4, #1
   17f0c:	7862      	ldrb	r2, [r4, #1]
   17f0e:	4605      	mov	r5, r0
   17f10:	4606      	mov	r6, r0
   17f12:	4603      	mov	r3, r0
   17f14:	f04f 34ff 	mov.w	r4, #4294967295
   17f18:	f108 0801 	add.w	r8, r8, #1
   17f1c:	f1a2 0120 	sub.w	r1, r2, #32
   17f20:	2958      	cmp	r1, #88	; 0x58
   17f22:	f200 82de 	bhi.w	184e2 <_vfiprintf_r+0x6ae>
   17f26:	e8df f011 	tbh	[pc, r1, lsl #1]
   17f2a:	0221      	.short	0x0221
   17f2c:	02dc02dc 	.word	0x02dc02dc
   17f30:	02dc0229 	.word	0x02dc0229
   17f34:	02dc02dc 	.word	0x02dc02dc
   17f38:	02dc02dc 	.word	0x02dc02dc
   17f3c:	028902dc 	.word	0x028902dc
   17f40:	02dc0295 	.word	0x02dc0295
   17f44:	02bd00a2 	.word	0x02bd00a2
   17f48:	019f02dc 	.word	0x019f02dc
   17f4c:	01a401a4 	.word	0x01a401a4
   17f50:	01a401a4 	.word	0x01a401a4
   17f54:	01a401a4 	.word	0x01a401a4
   17f58:	01a401a4 	.word	0x01a401a4
   17f5c:	02dc01a4 	.word	0x02dc01a4
   17f60:	02dc02dc 	.word	0x02dc02dc
   17f64:	02dc02dc 	.word	0x02dc02dc
   17f68:	02dc02dc 	.word	0x02dc02dc
   17f6c:	02dc02dc 	.word	0x02dc02dc
   17f70:	01b202dc 	.word	0x01b202dc
   17f74:	02dc02dc 	.word	0x02dc02dc
   17f78:	02dc02dc 	.word	0x02dc02dc
   17f7c:	02dc02dc 	.word	0x02dc02dc
   17f80:	02dc02dc 	.word	0x02dc02dc
   17f84:	02dc02dc 	.word	0x02dc02dc
   17f88:	02dc0197 	.word	0x02dc0197
   17f8c:	02dc02dc 	.word	0x02dc02dc
   17f90:	02dc02dc 	.word	0x02dc02dc
   17f94:	02dc019b 	.word	0x02dc019b
   17f98:	025302dc 	.word	0x025302dc
   17f9c:	02dc02dc 	.word	0x02dc02dc
   17fa0:	02dc02dc 	.word	0x02dc02dc
   17fa4:	02dc02dc 	.word	0x02dc02dc
   17fa8:	02dc02dc 	.word	0x02dc02dc
   17fac:	02dc02dc 	.word	0x02dc02dc
   17fb0:	021b025a 	.word	0x021b025a
   17fb4:	02dc02dc 	.word	0x02dc02dc
   17fb8:	026e02dc 	.word	0x026e02dc
   17fbc:	02dc021b 	.word	0x02dc021b
   17fc0:	027302dc 	.word	0x027302dc
   17fc4:	01f502dc 	.word	0x01f502dc
   17fc8:	02090182 	.word	0x02090182
   17fcc:	02dc02d7 	.word	0x02dc02d7
   17fd0:	02dc029a 	.word	0x02dc029a
   17fd4:	02dc00a7 	.word	0x02dc00a7
   17fd8:	022e02dc 	.word	0x022e02dc
   17fdc:	f10a 0a08 	add.w	sl, sl, #8
   17fe0:	9b03      	ldr	r3, [sp, #12]
   17fe2:	442b      	add	r3, r5
   17fe4:	9303      	str	r3, [sp, #12]
   17fe6:	e786      	b.n	17ef6 <_vfiprintf_r+0xc2>
   17fe8:	4659      	mov	r1, fp
   17fea:	9806      	ldr	r0, [sp, #24]
   17fec:	f002 f940 	bl	1a270 <__swsetup_r>
   17ff0:	bb18      	cbnz	r0, 1803a <_vfiprintf_r+0x206>
   17ff2:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   17ff6:	f001 031a 	and.w	r3, r1, #26
   17ffa:	2b0a      	cmp	r3, #10
   17ffc:	f47f af4b 	bne.w	17e96 <_vfiprintf_r+0x62>
   18000:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   18004:	2b00      	cmp	r3, #0
   18006:	f6ff af46 	blt.w	17e96 <_vfiprintf_r+0x62>
   1800a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   1800e:	07db      	lsls	r3, r3, #31
   18010:	d405      	bmi.n	1801e <_vfiprintf_r+0x1ea>
   18012:	058f      	lsls	r7, r1, #22
   18014:	d403      	bmi.n	1801e <_vfiprintf_r+0x1ea>
   18016:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   1801a:	f7fd f87b 	bl	15114 <__retarget_lock_release_recursive>
   1801e:	462b      	mov	r3, r5
   18020:	4642      	mov	r2, r8
   18022:	4659      	mov	r1, fp
   18024:	9806      	ldr	r0, [sp, #24]
   18026:	f000 fd4d 	bl	18ac4 <__sbprintf>
   1802a:	9003      	str	r0, [sp, #12]
   1802c:	9803      	ldr	r0, [sp, #12]
   1802e:	b02d      	add	sp, #180	; 0xb4
   18030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18034:	f003 faba 	bl	1b5ac <__sinit>
   18038:	e709      	b.n	17e4e <_vfiprintf_r+0x1a>
   1803a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   1803e:	07d9      	lsls	r1, r3, #31
   18040:	d404      	bmi.n	1804c <_vfiprintf_r+0x218>
   18042:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   18046:	059a      	lsls	r2, r3, #22
   18048:	f140 84aa 	bpl.w	189a0 <_vfiprintf_r+0xb6c>
   1804c:	f04f 33ff 	mov.w	r3, #4294967295
   18050:	9303      	str	r3, [sp, #12]
   18052:	9803      	ldr	r0, [sp, #12]
   18054:	b02d      	add	sp, #180	; 0xb4
   18056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1805a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   1805e:	f7fd f857 	bl	15110 <__retarget_lock_acquire_recursive>
   18062:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   18066:	b281      	uxth	r1, r0
   18068:	e6fb      	b.n	17e62 <_vfiprintf_r+0x2e>
   1806a:	4276      	negs	r6, r6
   1806c:	9207      	str	r2, [sp, #28]
   1806e:	f043 0304 	orr.w	r3, r3, #4
   18072:	f898 2000 	ldrb.w	r2, [r8]
   18076:	e74f      	b.n	17f18 <_vfiprintf_r+0xe4>
   18078:	9608      	str	r6, [sp, #32]
   1807a:	069e      	lsls	r6, r3, #26
   1807c:	f100 8450 	bmi.w	18920 <_vfiprintf_r+0xaec>
   18080:	9907      	ldr	r1, [sp, #28]
   18082:	06dd      	lsls	r5, r3, #27
   18084:	460a      	mov	r2, r1
   18086:	f100 83ef 	bmi.w	18868 <_vfiprintf_r+0xa34>
   1808a:	0658      	lsls	r0, r3, #25
   1808c:	f140 83ec 	bpl.w	18868 <_vfiprintf_r+0xa34>
   18090:	880e      	ldrh	r6, [r1, #0]
   18092:	3104      	adds	r1, #4
   18094:	2700      	movs	r7, #0
   18096:	2201      	movs	r2, #1
   18098:	9107      	str	r1, [sp, #28]
   1809a:	f04f 0100 	mov.w	r1, #0
   1809e:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   180a2:	2500      	movs	r5, #0
   180a4:	1c61      	adds	r1, r4, #1
   180a6:	f000 8116 	beq.w	182d6 <_vfiprintf_r+0x4a2>
   180aa:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   180ae:	9102      	str	r1, [sp, #8]
   180b0:	ea56 0107 	orrs.w	r1, r6, r7
   180b4:	f040 8114 	bne.w	182e0 <_vfiprintf_r+0x4ac>
   180b8:	2c00      	cmp	r4, #0
   180ba:	f040 835c 	bne.w	18776 <_vfiprintf_r+0x942>
   180be:	2a00      	cmp	r2, #0
   180c0:	f040 83b7 	bne.w	18832 <_vfiprintf_r+0x9fe>
   180c4:	f013 0301 	ands.w	r3, r3, #1
   180c8:	9305      	str	r3, [sp, #20]
   180ca:	f000 8457 	beq.w	1897c <_vfiprintf_r+0xb48>
   180ce:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   180d2:	2330      	movs	r3, #48	; 0x30
   180d4:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   180d8:	9b05      	ldr	r3, [sp, #20]
   180da:	42a3      	cmp	r3, r4
   180dc:	bfb8      	it	lt
   180de:	4623      	movlt	r3, r4
   180e0:	9301      	str	r3, [sp, #4]
   180e2:	b10d      	cbz	r5, 180e8 <_vfiprintf_r+0x2b4>
   180e4:	3301      	adds	r3, #1
   180e6:	9301      	str	r3, [sp, #4]
   180e8:	9b02      	ldr	r3, [sp, #8]
   180ea:	f013 0302 	ands.w	r3, r3, #2
   180ee:	9309      	str	r3, [sp, #36]	; 0x24
   180f0:	d002      	beq.n	180f8 <_vfiprintf_r+0x2c4>
   180f2:	9b01      	ldr	r3, [sp, #4]
   180f4:	3302      	adds	r3, #2
   180f6:	9301      	str	r3, [sp, #4]
   180f8:	9b02      	ldr	r3, [sp, #8]
   180fa:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   180fe:	930a      	str	r3, [sp, #40]	; 0x28
   18100:	f040 8217 	bne.w	18532 <_vfiprintf_r+0x6fe>
   18104:	9b08      	ldr	r3, [sp, #32]
   18106:	9a01      	ldr	r2, [sp, #4]
   18108:	1a9d      	subs	r5, r3, r2
   1810a:	2d00      	cmp	r5, #0
   1810c:	f340 8211 	ble.w	18532 <_vfiprintf_r+0x6fe>
   18110:	2d10      	cmp	r5, #16
   18112:	f340 8490 	ble.w	18a36 <_vfiprintf_r+0xc02>
   18116:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18118:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1811a:	4ec4      	ldr	r6, [pc, #784]	; (1842c <_vfiprintf_r+0x5f8>)
   1811c:	46d6      	mov	lr, sl
   1811e:	2710      	movs	r7, #16
   18120:	46a2      	mov	sl, r4
   18122:	4619      	mov	r1, r3
   18124:	9c06      	ldr	r4, [sp, #24]
   18126:	e007      	b.n	18138 <_vfiprintf_r+0x304>
   18128:	f101 0c02 	add.w	ip, r1, #2
   1812c:	f10e 0e08 	add.w	lr, lr, #8
   18130:	4601      	mov	r1, r0
   18132:	3d10      	subs	r5, #16
   18134:	2d10      	cmp	r5, #16
   18136:	dd11      	ble.n	1815c <_vfiprintf_r+0x328>
   18138:	1c48      	adds	r0, r1, #1
   1813a:	3210      	adds	r2, #16
   1813c:	2807      	cmp	r0, #7
   1813e:	9211      	str	r2, [sp, #68]	; 0x44
   18140:	e88e 00c0 	stmia.w	lr, {r6, r7}
   18144:	9010      	str	r0, [sp, #64]	; 0x40
   18146:	ddef      	ble.n	18128 <_vfiprintf_r+0x2f4>
   18148:	2a00      	cmp	r2, #0
   1814a:	f040 81e4 	bne.w	18516 <_vfiprintf_r+0x6e2>
   1814e:	3d10      	subs	r5, #16
   18150:	2d10      	cmp	r5, #16
   18152:	4611      	mov	r1, r2
   18154:	f04f 0c01 	mov.w	ip, #1
   18158:	46ce      	mov	lr, r9
   1815a:	dced      	bgt.n	18138 <_vfiprintf_r+0x304>
   1815c:	4654      	mov	r4, sl
   1815e:	4661      	mov	r1, ip
   18160:	46f2      	mov	sl, lr
   18162:	442a      	add	r2, r5
   18164:	2907      	cmp	r1, #7
   18166:	9211      	str	r2, [sp, #68]	; 0x44
   18168:	f8ca 6000 	str.w	r6, [sl]
   1816c:	f8ca 5004 	str.w	r5, [sl, #4]
   18170:	9110      	str	r1, [sp, #64]	; 0x40
   18172:	f300 82ec 	bgt.w	1874e <_vfiprintf_r+0x91a>
   18176:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   1817a:	f10a 0a08 	add.w	sl, sl, #8
   1817e:	1c48      	adds	r0, r1, #1
   18180:	2d00      	cmp	r5, #0
   18182:	f040 81de 	bne.w	18542 <_vfiprintf_r+0x70e>
   18186:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18188:	2b00      	cmp	r3, #0
   1818a:	f000 81f8 	beq.w	1857e <_vfiprintf_r+0x74a>
   1818e:	3202      	adds	r2, #2
   18190:	a90e      	add	r1, sp, #56	; 0x38
   18192:	2302      	movs	r3, #2
   18194:	2807      	cmp	r0, #7
   18196:	9211      	str	r2, [sp, #68]	; 0x44
   18198:	9010      	str	r0, [sp, #64]	; 0x40
   1819a:	e88a 000a 	stmia.w	sl, {r1, r3}
   1819e:	f340 81ea 	ble.w	18576 <_vfiprintf_r+0x742>
   181a2:	2a00      	cmp	r2, #0
   181a4:	f040 838c 	bne.w	188c0 <_vfiprintf_r+0xa8c>
   181a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   181aa:	2b80      	cmp	r3, #128	; 0x80
   181ac:	f04f 0001 	mov.w	r0, #1
   181b0:	4611      	mov	r1, r2
   181b2:	46ca      	mov	sl, r9
   181b4:	f040 81e7 	bne.w	18586 <_vfiprintf_r+0x752>
   181b8:	9b08      	ldr	r3, [sp, #32]
   181ba:	9d01      	ldr	r5, [sp, #4]
   181bc:	1b5e      	subs	r6, r3, r5
   181be:	2e00      	cmp	r6, #0
   181c0:	f340 81e1 	ble.w	18586 <_vfiprintf_r+0x752>
   181c4:	2e10      	cmp	r6, #16
   181c6:	4d9a      	ldr	r5, [pc, #616]	; (18430 <_vfiprintf_r+0x5fc>)
   181c8:	f340 8450 	ble.w	18a6c <_vfiprintf_r+0xc38>
   181cc:	46d4      	mov	ip, sl
   181ce:	2710      	movs	r7, #16
   181d0:	46a2      	mov	sl, r4
   181d2:	9c06      	ldr	r4, [sp, #24]
   181d4:	e007      	b.n	181e6 <_vfiprintf_r+0x3b2>
   181d6:	f101 0e02 	add.w	lr, r1, #2
   181da:	f10c 0c08 	add.w	ip, ip, #8
   181de:	4601      	mov	r1, r0
   181e0:	3e10      	subs	r6, #16
   181e2:	2e10      	cmp	r6, #16
   181e4:	dd11      	ble.n	1820a <_vfiprintf_r+0x3d6>
   181e6:	1c48      	adds	r0, r1, #1
   181e8:	3210      	adds	r2, #16
   181ea:	2807      	cmp	r0, #7
   181ec:	9211      	str	r2, [sp, #68]	; 0x44
   181ee:	e88c 00a0 	stmia.w	ip, {r5, r7}
   181f2:	9010      	str	r0, [sp, #64]	; 0x40
   181f4:	ddef      	ble.n	181d6 <_vfiprintf_r+0x3a2>
   181f6:	2a00      	cmp	r2, #0
   181f8:	f040 829d 	bne.w	18736 <_vfiprintf_r+0x902>
   181fc:	3e10      	subs	r6, #16
   181fe:	2e10      	cmp	r6, #16
   18200:	f04f 0e01 	mov.w	lr, #1
   18204:	4611      	mov	r1, r2
   18206:	46cc      	mov	ip, r9
   18208:	dced      	bgt.n	181e6 <_vfiprintf_r+0x3b2>
   1820a:	4654      	mov	r4, sl
   1820c:	46e2      	mov	sl, ip
   1820e:	4432      	add	r2, r6
   18210:	f1be 0f07 	cmp.w	lr, #7
   18214:	9211      	str	r2, [sp, #68]	; 0x44
   18216:	e88a 0060 	stmia.w	sl, {r5, r6}
   1821a:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   1821e:	f300 8369 	bgt.w	188f4 <_vfiprintf_r+0xac0>
   18222:	f10a 0a08 	add.w	sl, sl, #8
   18226:	f10e 0001 	add.w	r0, lr, #1
   1822a:	4671      	mov	r1, lr
   1822c:	e1ab      	b.n	18586 <_vfiprintf_r+0x752>
   1822e:	9608      	str	r6, [sp, #32]
   18230:	f013 0220 	ands.w	r2, r3, #32
   18234:	f040 838c 	bne.w	18950 <_vfiprintf_r+0xb1c>
   18238:	f013 0110 	ands.w	r1, r3, #16
   1823c:	f040 831a 	bne.w	18874 <_vfiprintf_r+0xa40>
   18240:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   18244:	f000 8316 	beq.w	18874 <_vfiprintf_r+0xa40>
   18248:	9807      	ldr	r0, [sp, #28]
   1824a:	460a      	mov	r2, r1
   1824c:	4601      	mov	r1, r0
   1824e:	3104      	adds	r1, #4
   18250:	8806      	ldrh	r6, [r0, #0]
   18252:	9107      	str	r1, [sp, #28]
   18254:	2700      	movs	r7, #0
   18256:	e720      	b.n	1809a <_vfiprintf_r+0x266>
   18258:	9608      	str	r6, [sp, #32]
   1825a:	f043 0310 	orr.w	r3, r3, #16
   1825e:	e7e7      	b.n	18230 <_vfiprintf_r+0x3fc>
   18260:	9608      	str	r6, [sp, #32]
   18262:	f043 0310 	orr.w	r3, r3, #16
   18266:	e708      	b.n	1807a <_vfiprintf_r+0x246>
   18268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1826c:	f898 2000 	ldrb.w	r2, [r8]
   18270:	e652      	b.n	17f18 <_vfiprintf_r+0xe4>
   18272:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   18276:	2600      	movs	r6, #0
   18278:	f818 2b01 	ldrb.w	r2, [r8], #1
   1827c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   18280:	eb01 0646 	add.w	r6, r1, r6, lsl #1
   18284:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   18288:	2909      	cmp	r1, #9
   1828a:	d9f5      	bls.n	18278 <_vfiprintf_r+0x444>
   1828c:	e646      	b.n	17f1c <_vfiprintf_r+0xe8>
   1828e:	9608      	str	r6, [sp, #32]
   18290:	2800      	cmp	r0, #0
   18292:	f040 8408 	bne.w	18aa6 <_vfiprintf_r+0xc72>
   18296:	f043 0310 	orr.w	r3, r3, #16
   1829a:	069e      	lsls	r6, r3, #26
   1829c:	f100 834c 	bmi.w	18938 <_vfiprintf_r+0xb04>
   182a0:	06dd      	lsls	r5, r3, #27
   182a2:	f100 82f3 	bmi.w	1888c <_vfiprintf_r+0xa58>
   182a6:	0658      	lsls	r0, r3, #25
   182a8:	f140 82f0 	bpl.w	1888c <_vfiprintf_r+0xa58>
   182ac:	9d07      	ldr	r5, [sp, #28]
   182ae:	f9b5 6000 	ldrsh.w	r6, [r5]
   182b2:	462a      	mov	r2, r5
   182b4:	17f7      	asrs	r7, r6, #31
   182b6:	3204      	adds	r2, #4
   182b8:	4630      	mov	r0, r6
   182ba:	4639      	mov	r1, r7
   182bc:	9207      	str	r2, [sp, #28]
   182be:	2800      	cmp	r0, #0
   182c0:	f171 0200 	sbcs.w	r2, r1, #0
   182c4:	f2c0 835d 	blt.w	18982 <_vfiprintf_r+0xb4e>
   182c8:	1c61      	adds	r1, r4, #1
   182ca:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   182ce:	f04f 0201 	mov.w	r2, #1
   182d2:	f47f aeea 	bne.w	180aa <_vfiprintf_r+0x276>
   182d6:	ea56 0107 	orrs.w	r1, r6, r7
   182da:	f000 824d 	beq.w	18778 <_vfiprintf_r+0x944>
   182de:	9302      	str	r3, [sp, #8]
   182e0:	2a01      	cmp	r2, #1
   182e2:	f000 828c 	beq.w	187fe <_vfiprintf_r+0x9ca>
   182e6:	2a02      	cmp	r2, #2
   182e8:	f040 825c 	bne.w	187a4 <_vfiprintf_r+0x970>
   182ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
   182ee:	46cb      	mov	fp, r9
   182f0:	0933      	lsrs	r3, r6, #4
   182f2:	f006 010f 	and.w	r1, r6, #15
   182f6:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   182fa:	093a      	lsrs	r2, r7, #4
   182fc:	461e      	mov	r6, r3
   182fe:	4617      	mov	r7, r2
   18300:	5c43      	ldrb	r3, [r0, r1]
   18302:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   18306:	ea56 0307 	orrs.w	r3, r6, r7
   1830a:	d1f1      	bne.n	182f0 <_vfiprintf_r+0x4bc>
   1830c:	eba9 030b 	sub.w	r3, r9, fp
   18310:	9305      	str	r3, [sp, #20]
   18312:	e6e1      	b.n	180d8 <_vfiprintf_r+0x2a4>
   18314:	2800      	cmp	r0, #0
   18316:	f040 83c0 	bne.w	18a9a <_vfiprintf_r+0xc66>
   1831a:	0699      	lsls	r1, r3, #26
   1831c:	f100 8367 	bmi.w	189ee <_vfiprintf_r+0xbba>
   18320:	06da      	lsls	r2, r3, #27
   18322:	f100 80f1 	bmi.w	18508 <_vfiprintf_r+0x6d4>
   18326:	065b      	lsls	r3, r3, #25
   18328:	f140 80ee 	bpl.w	18508 <_vfiprintf_r+0x6d4>
   1832c:	9a07      	ldr	r2, [sp, #28]
   1832e:	6813      	ldr	r3, [r2, #0]
   18330:	3204      	adds	r2, #4
   18332:	9207      	str	r2, [sp, #28]
   18334:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   18338:	801a      	strh	r2, [r3, #0]
   1833a:	e5b8      	b.n	17eae <_vfiprintf_r+0x7a>
   1833c:	9807      	ldr	r0, [sp, #28]
   1833e:	4a3d      	ldr	r2, [pc, #244]	; (18434 <_vfiprintf_r+0x600>)
   18340:	9608      	str	r6, [sp, #32]
   18342:	920b      	str	r2, [sp, #44]	; 0x2c
   18344:	6806      	ldr	r6, [r0, #0]
   18346:	2278      	movs	r2, #120	; 0x78
   18348:	2130      	movs	r1, #48	; 0x30
   1834a:	3004      	adds	r0, #4
   1834c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   18350:	f043 0302 	orr.w	r3, r3, #2
   18354:	9007      	str	r0, [sp, #28]
   18356:	2700      	movs	r7, #0
   18358:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   1835c:	2202      	movs	r2, #2
   1835e:	e69c      	b.n	1809a <_vfiprintf_r+0x266>
   18360:	9608      	str	r6, [sp, #32]
   18362:	2800      	cmp	r0, #0
   18364:	d099      	beq.n	1829a <_vfiprintf_r+0x466>
   18366:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1836a:	e796      	b.n	1829a <_vfiprintf_r+0x466>
   1836c:	f898 2000 	ldrb.w	r2, [r8]
   18370:	2d00      	cmp	r5, #0
   18372:	f47f add1 	bne.w	17f18 <_vfiprintf_r+0xe4>
   18376:	2001      	movs	r0, #1
   18378:	2520      	movs	r5, #32
   1837a:	e5cd      	b.n	17f18 <_vfiprintf_r+0xe4>
   1837c:	f043 0301 	orr.w	r3, r3, #1
   18380:	f898 2000 	ldrb.w	r2, [r8]
   18384:	e5c8      	b.n	17f18 <_vfiprintf_r+0xe4>
   18386:	9608      	str	r6, [sp, #32]
   18388:	2800      	cmp	r0, #0
   1838a:	f040 8393 	bne.w	18ab4 <_vfiprintf_r+0xc80>
   1838e:	4929      	ldr	r1, [pc, #164]	; (18434 <_vfiprintf_r+0x600>)
   18390:	910b      	str	r1, [sp, #44]	; 0x2c
   18392:	069f      	lsls	r7, r3, #26
   18394:	f100 82e8 	bmi.w	18968 <_vfiprintf_r+0xb34>
   18398:	9807      	ldr	r0, [sp, #28]
   1839a:	06de      	lsls	r6, r3, #27
   1839c:	4601      	mov	r1, r0
   1839e:	f100 8270 	bmi.w	18882 <_vfiprintf_r+0xa4e>
   183a2:	065d      	lsls	r5, r3, #25
   183a4:	f140 826d 	bpl.w	18882 <_vfiprintf_r+0xa4e>
   183a8:	3104      	adds	r1, #4
   183aa:	8806      	ldrh	r6, [r0, #0]
   183ac:	9107      	str	r1, [sp, #28]
   183ae:	2700      	movs	r7, #0
   183b0:	07d8      	lsls	r0, r3, #31
   183b2:	f140 8222 	bpl.w	187fa <_vfiprintf_r+0x9c6>
   183b6:	ea56 0107 	orrs.w	r1, r6, r7
   183ba:	f000 821e 	beq.w	187fa <_vfiprintf_r+0x9c6>
   183be:	2130      	movs	r1, #48	; 0x30
   183c0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   183c4:	f043 0302 	orr.w	r3, r3, #2
   183c8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   183cc:	2202      	movs	r2, #2
   183ce:	e664      	b.n	1809a <_vfiprintf_r+0x266>
   183d0:	9608      	str	r6, [sp, #32]
   183d2:	2800      	cmp	r0, #0
   183d4:	f040 836b 	bne.w	18aae <_vfiprintf_r+0xc7a>
   183d8:	4917      	ldr	r1, [pc, #92]	; (18438 <_vfiprintf_r+0x604>)
   183da:	910b      	str	r1, [sp, #44]	; 0x2c
   183dc:	e7d9      	b.n	18392 <_vfiprintf_r+0x55e>
   183de:	9907      	ldr	r1, [sp, #28]
   183e0:	9608      	str	r6, [sp, #32]
   183e2:	680a      	ldr	r2, [r1, #0]
   183e4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   183e8:	f04f 0000 	mov.w	r0, #0
   183ec:	460a      	mov	r2, r1
   183ee:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   183f2:	3204      	adds	r2, #4
   183f4:	2001      	movs	r0, #1
   183f6:	9001      	str	r0, [sp, #4]
   183f8:	9207      	str	r2, [sp, #28]
   183fa:	9005      	str	r0, [sp, #20]
   183fc:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   18400:	9302      	str	r3, [sp, #8]
   18402:	2400      	movs	r4, #0
   18404:	e670      	b.n	180e8 <_vfiprintf_r+0x2b4>
   18406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1840a:	f898 2000 	ldrb.w	r2, [r8]
   1840e:	e583      	b.n	17f18 <_vfiprintf_r+0xe4>
   18410:	f898 2000 	ldrb.w	r2, [r8]
   18414:	2a6c      	cmp	r2, #108	; 0x6c
   18416:	bf03      	ittte	eq
   18418:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   1841c:	f043 0320 	orreq.w	r3, r3, #32
   18420:	f108 0801 	addeq.w	r8, r8, #1
   18424:	f043 0310 	orrne.w	r3, r3, #16
   18428:	e576      	b.n	17f18 <_vfiprintf_r+0xe4>
   1842a:	bf00      	nop
   1842c:	000250f0 	.word	0x000250f0
   18430:	00025100 	.word	0x00025100
   18434:	000250b4 	.word	0x000250b4
   18438:	000250a0 	.word	0x000250a0
   1843c:	9907      	ldr	r1, [sp, #28]
   1843e:	680e      	ldr	r6, [r1, #0]
   18440:	460a      	mov	r2, r1
   18442:	2e00      	cmp	r6, #0
   18444:	f102 0204 	add.w	r2, r2, #4
   18448:	f6ff ae0f 	blt.w	1806a <_vfiprintf_r+0x236>
   1844c:	9207      	str	r2, [sp, #28]
   1844e:	f898 2000 	ldrb.w	r2, [r8]
   18452:	e561      	b.n	17f18 <_vfiprintf_r+0xe4>
   18454:	f898 2000 	ldrb.w	r2, [r8]
   18458:	2001      	movs	r0, #1
   1845a:	252b      	movs	r5, #43	; 0x2b
   1845c:	e55c      	b.n	17f18 <_vfiprintf_r+0xe4>
   1845e:	9907      	ldr	r1, [sp, #28]
   18460:	9608      	str	r6, [sp, #32]
   18462:	f8d1 b000 	ldr.w	fp, [r1]
   18466:	f04f 0200 	mov.w	r2, #0
   1846a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1846e:	1d0e      	adds	r6, r1, #4
   18470:	f1bb 0f00 	cmp.w	fp, #0
   18474:	f000 82e5 	beq.w	18a42 <_vfiprintf_r+0xc0e>
   18478:	1c67      	adds	r7, r4, #1
   1847a:	f000 82c4 	beq.w	18a06 <_vfiprintf_r+0xbd2>
   1847e:	4622      	mov	r2, r4
   18480:	2100      	movs	r1, #0
   18482:	4658      	mov	r0, fp
   18484:	9301      	str	r3, [sp, #4]
   18486:	f7fd f99b 	bl	157c0 <memchr>
   1848a:	9b01      	ldr	r3, [sp, #4]
   1848c:	2800      	cmp	r0, #0
   1848e:	f000 82e5 	beq.w	18a5c <_vfiprintf_r+0xc28>
   18492:	eba0 020b 	sub.w	r2, r0, fp
   18496:	9205      	str	r2, [sp, #20]
   18498:	9607      	str	r6, [sp, #28]
   1849a:	9302      	str	r3, [sp, #8]
   1849c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   184a0:	2400      	movs	r4, #0
   184a2:	e619      	b.n	180d8 <_vfiprintf_r+0x2a4>
   184a4:	f898 2000 	ldrb.w	r2, [r8]
   184a8:	2a2a      	cmp	r2, #42	; 0x2a
   184aa:	f108 0701 	add.w	r7, r8, #1
   184ae:	f000 82e9 	beq.w	18a84 <_vfiprintf_r+0xc50>
   184b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   184b6:	2909      	cmp	r1, #9
   184b8:	46b8      	mov	r8, r7
   184ba:	f04f 0400 	mov.w	r4, #0
   184be:	f63f ad2d 	bhi.w	17f1c <_vfiprintf_r+0xe8>
   184c2:	f818 2b01 	ldrb.w	r2, [r8], #1
   184c6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   184ca:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   184ce:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   184d2:	2909      	cmp	r1, #9
   184d4:	d9f5      	bls.n	184c2 <_vfiprintf_r+0x68e>
   184d6:	e521      	b.n	17f1c <_vfiprintf_r+0xe8>
   184d8:	f043 0320 	orr.w	r3, r3, #32
   184dc:	f898 2000 	ldrb.w	r2, [r8]
   184e0:	e51a      	b.n	17f18 <_vfiprintf_r+0xe4>
   184e2:	9608      	str	r6, [sp, #32]
   184e4:	2800      	cmp	r0, #0
   184e6:	f040 82db 	bne.w	18aa0 <_vfiprintf_r+0xc6c>
   184ea:	2a00      	cmp	r2, #0
   184ec:	f000 80e7 	beq.w	186be <_vfiprintf_r+0x88a>
   184f0:	2101      	movs	r1, #1
   184f2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   184f6:	f04f 0200 	mov.w	r2, #0
   184fa:	9101      	str	r1, [sp, #4]
   184fc:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   18500:	9105      	str	r1, [sp, #20]
   18502:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   18506:	e77b      	b.n	18400 <_vfiprintf_r+0x5cc>
   18508:	9a07      	ldr	r2, [sp, #28]
   1850a:	6813      	ldr	r3, [r2, #0]
   1850c:	3204      	adds	r2, #4
   1850e:	9207      	str	r2, [sp, #28]
   18510:	9a03      	ldr	r2, [sp, #12]
   18512:	601a      	str	r2, [r3, #0]
   18514:	e4cb      	b.n	17eae <_vfiprintf_r+0x7a>
   18516:	aa0f      	add	r2, sp, #60	; 0x3c
   18518:	9904      	ldr	r1, [sp, #16]
   1851a:	4620      	mov	r0, r4
   1851c:	f7ff fc40 	bl	17da0 <__sprint_r.part.0>
   18520:	2800      	cmp	r0, #0
   18522:	f040 8139 	bne.w	18798 <_vfiprintf_r+0x964>
   18526:	9910      	ldr	r1, [sp, #64]	; 0x40
   18528:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1852a:	f101 0c01 	add.w	ip, r1, #1
   1852e:	46ce      	mov	lr, r9
   18530:	e5ff      	b.n	18132 <_vfiprintf_r+0x2fe>
   18532:	9910      	ldr	r1, [sp, #64]	; 0x40
   18534:	9a11      	ldr	r2, [sp, #68]	; 0x44
   18536:	1c48      	adds	r0, r1, #1
   18538:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   1853c:	2d00      	cmp	r5, #0
   1853e:	f43f ae22 	beq.w	18186 <_vfiprintf_r+0x352>
   18542:	3201      	adds	r2, #1
   18544:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   18548:	2101      	movs	r1, #1
   1854a:	2807      	cmp	r0, #7
   1854c:	9211      	str	r2, [sp, #68]	; 0x44
   1854e:	9010      	str	r0, [sp, #64]	; 0x40
   18550:	f8ca 5000 	str.w	r5, [sl]
   18554:	f8ca 1004 	str.w	r1, [sl, #4]
   18558:	f340 8108 	ble.w	1876c <_vfiprintf_r+0x938>
   1855c:	2a00      	cmp	r2, #0
   1855e:	f040 81bc 	bne.w	188da <_vfiprintf_r+0xaa6>
   18562:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18564:	2b00      	cmp	r3, #0
   18566:	f43f ae1f 	beq.w	181a8 <_vfiprintf_r+0x374>
   1856a:	ab0e      	add	r3, sp, #56	; 0x38
   1856c:	2202      	movs	r2, #2
   1856e:	4608      	mov	r0, r1
   18570:	931c      	str	r3, [sp, #112]	; 0x70
   18572:	921d      	str	r2, [sp, #116]	; 0x74
   18574:	46ca      	mov	sl, r9
   18576:	4601      	mov	r1, r0
   18578:	f10a 0a08 	add.w	sl, sl, #8
   1857c:	3001      	adds	r0, #1
   1857e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18580:	2b80      	cmp	r3, #128	; 0x80
   18582:	f43f ae19 	beq.w	181b8 <_vfiprintf_r+0x384>
   18586:	9b05      	ldr	r3, [sp, #20]
   18588:	1ae4      	subs	r4, r4, r3
   1858a:	2c00      	cmp	r4, #0
   1858c:	dd2e      	ble.n	185ec <_vfiprintf_r+0x7b8>
   1858e:	2c10      	cmp	r4, #16
   18590:	4db3      	ldr	r5, [pc, #716]	; (18860 <_vfiprintf_r+0xa2c>)
   18592:	dd1e      	ble.n	185d2 <_vfiprintf_r+0x79e>
   18594:	46d6      	mov	lr, sl
   18596:	2610      	movs	r6, #16
   18598:	9f06      	ldr	r7, [sp, #24]
   1859a:	f8dd a010 	ldr.w	sl, [sp, #16]
   1859e:	e006      	b.n	185ae <_vfiprintf_r+0x77a>
   185a0:	1c88      	adds	r0, r1, #2
   185a2:	f10e 0e08 	add.w	lr, lr, #8
   185a6:	4619      	mov	r1, r3
   185a8:	3c10      	subs	r4, #16
   185aa:	2c10      	cmp	r4, #16
   185ac:	dd10      	ble.n	185d0 <_vfiprintf_r+0x79c>
   185ae:	1c4b      	adds	r3, r1, #1
   185b0:	3210      	adds	r2, #16
   185b2:	2b07      	cmp	r3, #7
   185b4:	9211      	str	r2, [sp, #68]	; 0x44
   185b6:	e88e 0060 	stmia.w	lr, {r5, r6}
   185ba:	9310      	str	r3, [sp, #64]	; 0x40
   185bc:	ddf0      	ble.n	185a0 <_vfiprintf_r+0x76c>
   185be:	2a00      	cmp	r2, #0
   185c0:	d165      	bne.n	1868e <_vfiprintf_r+0x85a>
   185c2:	3c10      	subs	r4, #16
   185c4:	2c10      	cmp	r4, #16
   185c6:	f04f 0001 	mov.w	r0, #1
   185ca:	4611      	mov	r1, r2
   185cc:	46ce      	mov	lr, r9
   185ce:	dcee      	bgt.n	185ae <_vfiprintf_r+0x77a>
   185d0:	46f2      	mov	sl, lr
   185d2:	4422      	add	r2, r4
   185d4:	2807      	cmp	r0, #7
   185d6:	9211      	str	r2, [sp, #68]	; 0x44
   185d8:	f8ca 5000 	str.w	r5, [sl]
   185dc:	f8ca 4004 	str.w	r4, [sl, #4]
   185e0:	9010      	str	r0, [sp, #64]	; 0x40
   185e2:	f300 8085 	bgt.w	186f0 <_vfiprintf_r+0x8bc>
   185e6:	f10a 0a08 	add.w	sl, sl, #8
   185ea:	3001      	adds	r0, #1
   185ec:	9905      	ldr	r1, [sp, #20]
   185ee:	f8ca b000 	str.w	fp, [sl]
   185f2:	440a      	add	r2, r1
   185f4:	2807      	cmp	r0, #7
   185f6:	9211      	str	r2, [sp, #68]	; 0x44
   185f8:	f8ca 1004 	str.w	r1, [sl, #4]
   185fc:	9010      	str	r0, [sp, #64]	; 0x40
   185fe:	f340 8082 	ble.w	18706 <_vfiprintf_r+0x8d2>
   18602:	2a00      	cmp	r2, #0
   18604:	f040 8118 	bne.w	18838 <_vfiprintf_r+0xa04>
   18608:	9b02      	ldr	r3, [sp, #8]
   1860a:	9210      	str	r2, [sp, #64]	; 0x40
   1860c:	0758      	lsls	r0, r3, #29
   1860e:	d535      	bpl.n	1867c <_vfiprintf_r+0x848>
   18610:	9b08      	ldr	r3, [sp, #32]
   18612:	9901      	ldr	r1, [sp, #4]
   18614:	1a5c      	subs	r4, r3, r1
   18616:	2c00      	cmp	r4, #0
   18618:	f340 80e7 	ble.w	187ea <_vfiprintf_r+0x9b6>
   1861c:	46ca      	mov	sl, r9
   1861e:	2c10      	cmp	r4, #16
   18620:	f340 8218 	ble.w	18a54 <_vfiprintf_r+0xc20>
   18624:	9910      	ldr	r1, [sp, #64]	; 0x40
   18626:	4e8f      	ldr	r6, [pc, #572]	; (18864 <_vfiprintf_r+0xa30>)
   18628:	9f06      	ldr	r7, [sp, #24]
   1862a:	f8dd b010 	ldr.w	fp, [sp, #16]
   1862e:	2510      	movs	r5, #16
   18630:	e006      	b.n	18640 <_vfiprintf_r+0x80c>
   18632:	1c88      	adds	r0, r1, #2
   18634:	f10a 0a08 	add.w	sl, sl, #8
   18638:	4619      	mov	r1, r3
   1863a:	3c10      	subs	r4, #16
   1863c:	2c10      	cmp	r4, #16
   1863e:	dd11      	ble.n	18664 <_vfiprintf_r+0x830>
   18640:	1c4b      	adds	r3, r1, #1
   18642:	3210      	adds	r2, #16
   18644:	2b07      	cmp	r3, #7
   18646:	9211      	str	r2, [sp, #68]	; 0x44
   18648:	f8ca 6000 	str.w	r6, [sl]
   1864c:	f8ca 5004 	str.w	r5, [sl, #4]
   18650:	9310      	str	r3, [sp, #64]	; 0x40
   18652:	ddee      	ble.n	18632 <_vfiprintf_r+0x7fe>
   18654:	bb42      	cbnz	r2, 186a8 <_vfiprintf_r+0x874>
   18656:	3c10      	subs	r4, #16
   18658:	2c10      	cmp	r4, #16
   1865a:	f04f 0001 	mov.w	r0, #1
   1865e:	4611      	mov	r1, r2
   18660:	46ca      	mov	sl, r9
   18662:	dced      	bgt.n	18640 <_vfiprintf_r+0x80c>
   18664:	4422      	add	r2, r4
   18666:	2807      	cmp	r0, #7
   18668:	9211      	str	r2, [sp, #68]	; 0x44
   1866a:	f8ca 6000 	str.w	r6, [sl]
   1866e:	f8ca 4004 	str.w	r4, [sl, #4]
   18672:	9010      	str	r0, [sp, #64]	; 0x40
   18674:	dd51      	ble.n	1871a <_vfiprintf_r+0x8e6>
   18676:	2a00      	cmp	r2, #0
   18678:	f040 819b 	bne.w	189b2 <_vfiprintf_r+0xb7e>
   1867c:	9b03      	ldr	r3, [sp, #12]
   1867e:	9a08      	ldr	r2, [sp, #32]
   18680:	9901      	ldr	r1, [sp, #4]
   18682:	428a      	cmp	r2, r1
   18684:	bfac      	ite	ge
   18686:	189b      	addge	r3, r3, r2
   18688:	185b      	addlt	r3, r3, r1
   1868a:	9303      	str	r3, [sp, #12]
   1868c:	e04e      	b.n	1872c <_vfiprintf_r+0x8f8>
   1868e:	aa0f      	add	r2, sp, #60	; 0x3c
   18690:	4651      	mov	r1, sl
   18692:	4638      	mov	r0, r7
   18694:	f7ff fb84 	bl	17da0 <__sprint_r.part.0>
   18698:	2800      	cmp	r0, #0
   1869a:	f040 813f 	bne.w	1891c <_vfiprintf_r+0xae8>
   1869e:	9910      	ldr	r1, [sp, #64]	; 0x40
   186a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   186a2:	1c48      	adds	r0, r1, #1
   186a4:	46ce      	mov	lr, r9
   186a6:	e77f      	b.n	185a8 <_vfiprintf_r+0x774>
   186a8:	aa0f      	add	r2, sp, #60	; 0x3c
   186aa:	4659      	mov	r1, fp
   186ac:	4638      	mov	r0, r7
   186ae:	f7ff fb77 	bl	17da0 <__sprint_r.part.0>
   186b2:	b960      	cbnz	r0, 186ce <_vfiprintf_r+0x89a>
   186b4:	9910      	ldr	r1, [sp, #64]	; 0x40
   186b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   186b8:	1c48      	adds	r0, r1, #1
   186ba:	46ca      	mov	sl, r9
   186bc:	e7bd      	b.n	1863a <_vfiprintf_r+0x806>
   186be:	9b11      	ldr	r3, [sp, #68]	; 0x44
   186c0:	f8dd b010 	ldr.w	fp, [sp, #16]
   186c4:	2b00      	cmp	r3, #0
   186c6:	f040 81d4 	bne.w	18a72 <_vfiprintf_r+0xc3e>
   186ca:	2300      	movs	r3, #0
   186cc:	9310      	str	r3, [sp, #64]	; 0x40
   186ce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   186d2:	f013 0f01 	tst.w	r3, #1
   186d6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   186da:	d102      	bne.n	186e2 <_vfiprintf_r+0x8ae>
   186dc:	059a      	lsls	r2, r3, #22
   186de:	f140 80de 	bpl.w	1889e <_vfiprintf_r+0xa6a>
   186e2:	065b      	lsls	r3, r3, #25
   186e4:	f53f acb2 	bmi.w	1804c <_vfiprintf_r+0x218>
   186e8:	9803      	ldr	r0, [sp, #12]
   186ea:	b02d      	add	sp, #180	; 0xb4
   186ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186f0:	2a00      	cmp	r2, #0
   186f2:	f040 8106 	bne.w	18902 <_vfiprintf_r+0xace>
   186f6:	9a05      	ldr	r2, [sp, #20]
   186f8:	921d      	str	r2, [sp, #116]	; 0x74
   186fa:	2301      	movs	r3, #1
   186fc:	9211      	str	r2, [sp, #68]	; 0x44
   186fe:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   18702:	9310      	str	r3, [sp, #64]	; 0x40
   18704:	46ca      	mov	sl, r9
   18706:	f10a 0a08 	add.w	sl, sl, #8
   1870a:	9b02      	ldr	r3, [sp, #8]
   1870c:	0759      	lsls	r1, r3, #29
   1870e:	d504      	bpl.n	1871a <_vfiprintf_r+0x8e6>
   18710:	9b08      	ldr	r3, [sp, #32]
   18712:	9901      	ldr	r1, [sp, #4]
   18714:	1a5c      	subs	r4, r3, r1
   18716:	2c00      	cmp	r4, #0
   18718:	dc81      	bgt.n	1861e <_vfiprintf_r+0x7ea>
   1871a:	9b03      	ldr	r3, [sp, #12]
   1871c:	9908      	ldr	r1, [sp, #32]
   1871e:	9801      	ldr	r0, [sp, #4]
   18720:	4281      	cmp	r1, r0
   18722:	bfac      	ite	ge
   18724:	185b      	addge	r3, r3, r1
   18726:	181b      	addlt	r3, r3, r0
   18728:	9303      	str	r3, [sp, #12]
   1872a:	bb72      	cbnz	r2, 1878a <_vfiprintf_r+0x956>
   1872c:	2300      	movs	r3, #0
   1872e:	9310      	str	r3, [sp, #64]	; 0x40
   18730:	46ca      	mov	sl, r9
   18732:	f7ff bbbc 	b.w	17eae <_vfiprintf_r+0x7a>
   18736:	aa0f      	add	r2, sp, #60	; 0x3c
   18738:	9904      	ldr	r1, [sp, #16]
   1873a:	4620      	mov	r0, r4
   1873c:	f7ff fb30 	bl	17da0 <__sprint_r.part.0>
   18740:	bb50      	cbnz	r0, 18798 <_vfiprintf_r+0x964>
   18742:	9910      	ldr	r1, [sp, #64]	; 0x40
   18744:	9a11      	ldr	r2, [sp, #68]	; 0x44
   18746:	f101 0e01 	add.w	lr, r1, #1
   1874a:	46cc      	mov	ip, r9
   1874c:	e548      	b.n	181e0 <_vfiprintf_r+0x3ac>
   1874e:	2a00      	cmp	r2, #0
   18750:	f040 8140 	bne.w	189d4 <_vfiprintf_r+0xba0>
   18754:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   18758:	2900      	cmp	r1, #0
   1875a:	f000 811b 	beq.w	18994 <_vfiprintf_r+0xb60>
   1875e:	2201      	movs	r2, #1
   18760:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   18764:	4610      	mov	r0, r2
   18766:	921d      	str	r2, [sp, #116]	; 0x74
   18768:	911c      	str	r1, [sp, #112]	; 0x70
   1876a:	46ca      	mov	sl, r9
   1876c:	4601      	mov	r1, r0
   1876e:	f10a 0a08 	add.w	sl, sl, #8
   18772:	3001      	adds	r0, #1
   18774:	e507      	b.n	18186 <_vfiprintf_r+0x352>
   18776:	9b02      	ldr	r3, [sp, #8]
   18778:	2a01      	cmp	r2, #1
   1877a:	f000 8098 	beq.w	188ae <_vfiprintf_r+0xa7a>
   1877e:	2a02      	cmp	r2, #2
   18780:	d10d      	bne.n	1879e <_vfiprintf_r+0x96a>
   18782:	9302      	str	r3, [sp, #8]
   18784:	2600      	movs	r6, #0
   18786:	2700      	movs	r7, #0
   18788:	e5b0      	b.n	182ec <_vfiprintf_r+0x4b8>
   1878a:	aa0f      	add	r2, sp, #60	; 0x3c
   1878c:	9904      	ldr	r1, [sp, #16]
   1878e:	9806      	ldr	r0, [sp, #24]
   18790:	f7ff fb06 	bl	17da0 <__sprint_r.part.0>
   18794:	2800      	cmp	r0, #0
   18796:	d0c9      	beq.n	1872c <_vfiprintf_r+0x8f8>
   18798:	f8dd b010 	ldr.w	fp, [sp, #16]
   1879c:	e797      	b.n	186ce <_vfiprintf_r+0x89a>
   1879e:	9302      	str	r3, [sp, #8]
   187a0:	2600      	movs	r6, #0
   187a2:	2700      	movs	r7, #0
   187a4:	4649      	mov	r1, r9
   187a6:	e000      	b.n	187aa <_vfiprintf_r+0x976>
   187a8:	4659      	mov	r1, fp
   187aa:	08f2      	lsrs	r2, r6, #3
   187ac:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   187b0:	08f8      	lsrs	r0, r7, #3
   187b2:	f006 0307 	and.w	r3, r6, #7
   187b6:	4607      	mov	r7, r0
   187b8:	4616      	mov	r6, r2
   187ba:	3330      	adds	r3, #48	; 0x30
   187bc:	ea56 0207 	orrs.w	r2, r6, r7
   187c0:	f801 3c01 	strb.w	r3, [r1, #-1]
   187c4:	f101 3bff 	add.w	fp, r1, #4294967295
   187c8:	d1ee      	bne.n	187a8 <_vfiprintf_r+0x974>
   187ca:	9a02      	ldr	r2, [sp, #8]
   187cc:	07d6      	lsls	r6, r2, #31
   187ce:	f57f ad9d 	bpl.w	1830c <_vfiprintf_r+0x4d8>
   187d2:	2b30      	cmp	r3, #48	; 0x30
   187d4:	f43f ad9a 	beq.w	1830c <_vfiprintf_r+0x4d8>
   187d8:	3902      	subs	r1, #2
   187da:	2330      	movs	r3, #48	; 0x30
   187dc:	f80b 3c01 	strb.w	r3, [fp, #-1]
   187e0:	eba9 0301 	sub.w	r3, r9, r1
   187e4:	9305      	str	r3, [sp, #20]
   187e6:	468b      	mov	fp, r1
   187e8:	e476      	b.n	180d8 <_vfiprintf_r+0x2a4>
   187ea:	9b03      	ldr	r3, [sp, #12]
   187ec:	9a08      	ldr	r2, [sp, #32]
   187ee:	428a      	cmp	r2, r1
   187f0:	bfac      	ite	ge
   187f2:	189b      	addge	r3, r3, r2
   187f4:	185b      	addlt	r3, r3, r1
   187f6:	9303      	str	r3, [sp, #12]
   187f8:	e798      	b.n	1872c <_vfiprintf_r+0x8f8>
   187fa:	2202      	movs	r2, #2
   187fc:	e44d      	b.n	1809a <_vfiprintf_r+0x266>
   187fe:	2f00      	cmp	r7, #0
   18800:	bf08      	it	eq
   18802:	2e0a      	cmpeq	r6, #10
   18804:	d352      	bcc.n	188ac <_vfiprintf_r+0xa78>
   18806:	46cb      	mov	fp, r9
   18808:	4630      	mov	r0, r6
   1880a:	4639      	mov	r1, r7
   1880c:	220a      	movs	r2, #10
   1880e:	2300      	movs	r3, #0
   18810:	f7fb f852 	bl	138b8 <__aeabi_uldivmod>
   18814:	3230      	adds	r2, #48	; 0x30
   18816:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   1881a:	4630      	mov	r0, r6
   1881c:	4639      	mov	r1, r7
   1881e:	2300      	movs	r3, #0
   18820:	220a      	movs	r2, #10
   18822:	f7fb f849 	bl	138b8 <__aeabi_uldivmod>
   18826:	4606      	mov	r6, r0
   18828:	460f      	mov	r7, r1
   1882a:	ea56 0307 	orrs.w	r3, r6, r7
   1882e:	d1eb      	bne.n	18808 <_vfiprintf_r+0x9d4>
   18830:	e56c      	b.n	1830c <_vfiprintf_r+0x4d8>
   18832:	9405      	str	r4, [sp, #20]
   18834:	46cb      	mov	fp, r9
   18836:	e44f      	b.n	180d8 <_vfiprintf_r+0x2a4>
   18838:	aa0f      	add	r2, sp, #60	; 0x3c
   1883a:	9904      	ldr	r1, [sp, #16]
   1883c:	9806      	ldr	r0, [sp, #24]
   1883e:	f7ff faaf 	bl	17da0 <__sprint_r.part.0>
   18842:	2800      	cmp	r0, #0
   18844:	d1a8      	bne.n	18798 <_vfiprintf_r+0x964>
   18846:	9a11      	ldr	r2, [sp, #68]	; 0x44
   18848:	46ca      	mov	sl, r9
   1884a:	e75e      	b.n	1870a <_vfiprintf_r+0x8d6>
   1884c:	aa0f      	add	r2, sp, #60	; 0x3c
   1884e:	9904      	ldr	r1, [sp, #16]
   18850:	9806      	ldr	r0, [sp, #24]
   18852:	f7ff faa5 	bl	17da0 <__sprint_r.part.0>
   18856:	2800      	cmp	r0, #0
   18858:	d19e      	bne.n	18798 <_vfiprintf_r+0x964>
   1885a:	46ca      	mov	sl, r9
   1885c:	f7ff bbc0 	b.w	17fe0 <_vfiprintf_r+0x1ac>
   18860:	00025100 	.word	0x00025100
   18864:	000250f0 	.word	0x000250f0
   18868:	3104      	adds	r1, #4
   1886a:	6816      	ldr	r6, [r2, #0]
   1886c:	9107      	str	r1, [sp, #28]
   1886e:	2201      	movs	r2, #1
   18870:	2700      	movs	r7, #0
   18872:	e412      	b.n	1809a <_vfiprintf_r+0x266>
   18874:	9807      	ldr	r0, [sp, #28]
   18876:	4601      	mov	r1, r0
   18878:	3104      	adds	r1, #4
   1887a:	6806      	ldr	r6, [r0, #0]
   1887c:	9107      	str	r1, [sp, #28]
   1887e:	2700      	movs	r7, #0
   18880:	e40b      	b.n	1809a <_vfiprintf_r+0x266>
   18882:	680e      	ldr	r6, [r1, #0]
   18884:	3104      	adds	r1, #4
   18886:	9107      	str	r1, [sp, #28]
   18888:	2700      	movs	r7, #0
   1888a:	e591      	b.n	183b0 <_vfiprintf_r+0x57c>
   1888c:	9907      	ldr	r1, [sp, #28]
   1888e:	680e      	ldr	r6, [r1, #0]
   18890:	460a      	mov	r2, r1
   18892:	17f7      	asrs	r7, r6, #31
   18894:	3204      	adds	r2, #4
   18896:	9207      	str	r2, [sp, #28]
   18898:	4630      	mov	r0, r6
   1889a:	4639      	mov	r1, r7
   1889c:	e50f      	b.n	182be <_vfiprintf_r+0x48a>
   1889e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   188a2:	f7fc fc37 	bl	15114 <__retarget_lock_release_recursive>
   188a6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   188aa:	e71a      	b.n	186e2 <_vfiprintf_r+0x8ae>
   188ac:	9b02      	ldr	r3, [sp, #8]
   188ae:	9302      	str	r3, [sp, #8]
   188b0:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   188b4:	3630      	adds	r6, #48	; 0x30
   188b6:	2301      	movs	r3, #1
   188b8:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   188bc:	9305      	str	r3, [sp, #20]
   188be:	e40b      	b.n	180d8 <_vfiprintf_r+0x2a4>
   188c0:	aa0f      	add	r2, sp, #60	; 0x3c
   188c2:	9904      	ldr	r1, [sp, #16]
   188c4:	9806      	ldr	r0, [sp, #24]
   188c6:	f7ff fa6b 	bl	17da0 <__sprint_r.part.0>
   188ca:	2800      	cmp	r0, #0
   188cc:	f47f af64 	bne.w	18798 <_vfiprintf_r+0x964>
   188d0:	9910      	ldr	r1, [sp, #64]	; 0x40
   188d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   188d4:	1c48      	adds	r0, r1, #1
   188d6:	46ca      	mov	sl, r9
   188d8:	e651      	b.n	1857e <_vfiprintf_r+0x74a>
   188da:	aa0f      	add	r2, sp, #60	; 0x3c
   188dc:	9904      	ldr	r1, [sp, #16]
   188de:	9806      	ldr	r0, [sp, #24]
   188e0:	f7ff fa5e 	bl	17da0 <__sprint_r.part.0>
   188e4:	2800      	cmp	r0, #0
   188e6:	f47f af57 	bne.w	18798 <_vfiprintf_r+0x964>
   188ea:	9910      	ldr	r1, [sp, #64]	; 0x40
   188ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
   188ee:	1c48      	adds	r0, r1, #1
   188f0:	46ca      	mov	sl, r9
   188f2:	e448      	b.n	18186 <_vfiprintf_r+0x352>
   188f4:	2a00      	cmp	r2, #0
   188f6:	f040 8091 	bne.w	18a1c <_vfiprintf_r+0xbe8>
   188fa:	2001      	movs	r0, #1
   188fc:	4611      	mov	r1, r2
   188fe:	46ca      	mov	sl, r9
   18900:	e641      	b.n	18586 <_vfiprintf_r+0x752>
   18902:	aa0f      	add	r2, sp, #60	; 0x3c
   18904:	9904      	ldr	r1, [sp, #16]
   18906:	9806      	ldr	r0, [sp, #24]
   18908:	f7ff fa4a 	bl	17da0 <__sprint_r.part.0>
   1890c:	2800      	cmp	r0, #0
   1890e:	f47f af43 	bne.w	18798 <_vfiprintf_r+0x964>
   18912:	9810      	ldr	r0, [sp, #64]	; 0x40
   18914:	9a11      	ldr	r2, [sp, #68]	; 0x44
   18916:	3001      	adds	r0, #1
   18918:	46ca      	mov	sl, r9
   1891a:	e667      	b.n	185ec <_vfiprintf_r+0x7b8>
   1891c:	46d3      	mov	fp, sl
   1891e:	e6d6      	b.n	186ce <_vfiprintf_r+0x89a>
   18920:	9e07      	ldr	r6, [sp, #28]
   18922:	3607      	adds	r6, #7
   18924:	f026 0207 	bic.w	r2, r6, #7
   18928:	f102 0108 	add.w	r1, r2, #8
   1892c:	e9d2 6700 	ldrd	r6, r7, [r2]
   18930:	9107      	str	r1, [sp, #28]
   18932:	2201      	movs	r2, #1
   18934:	f7ff bbb1 	b.w	1809a <_vfiprintf_r+0x266>
   18938:	9e07      	ldr	r6, [sp, #28]
   1893a:	3607      	adds	r6, #7
   1893c:	f026 0607 	bic.w	r6, r6, #7
   18940:	e9d6 0100 	ldrd	r0, r1, [r6]
   18944:	f106 0208 	add.w	r2, r6, #8
   18948:	9207      	str	r2, [sp, #28]
   1894a:	4606      	mov	r6, r0
   1894c:	460f      	mov	r7, r1
   1894e:	e4b6      	b.n	182be <_vfiprintf_r+0x48a>
   18950:	9e07      	ldr	r6, [sp, #28]
   18952:	3607      	adds	r6, #7
   18954:	f026 0207 	bic.w	r2, r6, #7
   18958:	f102 0108 	add.w	r1, r2, #8
   1895c:	e9d2 6700 	ldrd	r6, r7, [r2]
   18960:	9107      	str	r1, [sp, #28]
   18962:	2200      	movs	r2, #0
   18964:	f7ff bb99 	b.w	1809a <_vfiprintf_r+0x266>
   18968:	9e07      	ldr	r6, [sp, #28]
   1896a:	3607      	adds	r6, #7
   1896c:	f026 0107 	bic.w	r1, r6, #7
   18970:	f101 0008 	add.w	r0, r1, #8
   18974:	9007      	str	r0, [sp, #28]
   18976:	e9d1 6700 	ldrd	r6, r7, [r1]
   1897a:	e519      	b.n	183b0 <_vfiprintf_r+0x57c>
   1897c:	46cb      	mov	fp, r9
   1897e:	f7ff bbab 	b.w	180d8 <_vfiprintf_r+0x2a4>
   18982:	252d      	movs	r5, #45	; 0x2d
   18984:	4276      	negs	r6, r6
   18986:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   1898a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1898e:	2201      	movs	r2, #1
   18990:	f7ff bb88 	b.w	180a4 <_vfiprintf_r+0x270>
   18994:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18996:	b9b3      	cbnz	r3, 189c6 <_vfiprintf_r+0xb92>
   18998:	4611      	mov	r1, r2
   1899a:	2001      	movs	r0, #1
   1899c:	46ca      	mov	sl, r9
   1899e:	e5f2      	b.n	18586 <_vfiprintf_r+0x752>
   189a0:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   189a4:	f7fc fbb6 	bl	15114 <__retarget_lock_release_recursive>
   189a8:	f04f 33ff 	mov.w	r3, #4294967295
   189ac:	9303      	str	r3, [sp, #12]
   189ae:	f7ff bb50 	b.w	18052 <_vfiprintf_r+0x21e>
   189b2:	aa0f      	add	r2, sp, #60	; 0x3c
   189b4:	9904      	ldr	r1, [sp, #16]
   189b6:	9806      	ldr	r0, [sp, #24]
   189b8:	f7ff f9f2 	bl	17da0 <__sprint_r.part.0>
   189bc:	2800      	cmp	r0, #0
   189be:	f47f aeeb 	bne.w	18798 <_vfiprintf_r+0x964>
   189c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   189c4:	e6a9      	b.n	1871a <_vfiprintf_r+0x8e6>
   189c6:	ab0e      	add	r3, sp, #56	; 0x38
   189c8:	2202      	movs	r2, #2
   189ca:	931c      	str	r3, [sp, #112]	; 0x70
   189cc:	921d      	str	r2, [sp, #116]	; 0x74
   189ce:	2001      	movs	r0, #1
   189d0:	46ca      	mov	sl, r9
   189d2:	e5d0      	b.n	18576 <_vfiprintf_r+0x742>
   189d4:	aa0f      	add	r2, sp, #60	; 0x3c
   189d6:	9904      	ldr	r1, [sp, #16]
   189d8:	9806      	ldr	r0, [sp, #24]
   189da:	f7ff f9e1 	bl	17da0 <__sprint_r.part.0>
   189de:	2800      	cmp	r0, #0
   189e0:	f47f aeda 	bne.w	18798 <_vfiprintf_r+0x964>
   189e4:	9910      	ldr	r1, [sp, #64]	; 0x40
   189e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   189e8:	1c48      	adds	r0, r1, #1
   189ea:	46ca      	mov	sl, r9
   189ec:	e5a4      	b.n	18538 <_vfiprintf_r+0x704>
   189ee:	9a07      	ldr	r2, [sp, #28]
   189f0:	9903      	ldr	r1, [sp, #12]
   189f2:	6813      	ldr	r3, [r2, #0]
   189f4:	17cd      	asrs	r5, r1, #31
   189f6:	4608      	mov	r0, r1
   189f8:	3204      	adds	r2, #4
   189fa:	4629      	mov	r1, r5
   189fc:	9207      	str	r2, [sp, #28]
   189fe:	e9c3 0100 	strd	r0, r1, [r3]
   18a02:	f7ff ba54 	b.w	17eae <_vfiprintf_r+0x7a>
   18a06:	4658      	mov	r0, fp
   18a08:	9607      	str	r6, [sp, #28]
   18a0a:	9302      	str	r3, [sp, #8]
   18a0c:	f7fd fed8 	bl	167c0 <strlen>
   18a10:	2400      	movs	r4, #0
   18a12:	9005      	str	r0, [sp, #20]
   18a14:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   18a18:	f7ff bb5e 	b.w	180d8 <_vfiprintf_r+0x2a4>
   18a1c:	aa0f      	add	r2, sp, #60	; 0x3c
   18a1e:	9904      	ldr	r1, [sp, #16]
   18a20:	9806      	ldr	r0, [sp, #24]
   18a22:	f7ff f9bd 	bl	17da0 <__sprint_r.part.0>
   18a26:	2800      	cmp	r0, #0
   18a28:	f47f aeb6 	bne.w	18798 <_vfiprintf_r+0x964>
   18a2c:	9910      	ldr	r1, [sp, #64]	; 0x40
   18a2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   18a30:	1c48      	adds	r0, r1, #1
   18a32:	46ca      	mov	sl, r9
   18a34:	e5a7      	b.n	18586 <_vfiprintf_r+0x752>
   18a36:	9910      	ldr	r1, [sp, #64]	; 0x40
   18a38:	9a11      	ldr	r2, [sp, #68]	; 0x44
   18a3a:	4e20      	ldr	r6, [pc, #128]	; (18abc <_vfiprintf_r+0xc88>)
   18a3c:	3101      	adds	r1, #1
   18a3e:	f7ff bb90 	b.w	18162 <_vfiprintf_r+0x32e>
   18a42:	2c06      	cmp	r4, #6
   18a44:	bf28      	it	cs
   18a46:	2406      	movcs	r4, #6
   18a48:	9405      	str	r4, [sp, #20]
   18a4a:	9607      	str	r6, [sp, #28]
   18a4c:	9401      	str	r4, [sp, #4]
   18a4e:	f8df b070 	ldr.w	fp, [pc, #112]	; 18ac0 <_vfiprintf_r+0xc8c>
   18a52:	e4d5      	b.n	18400 <_vfiprintf_r+0x5cc>
   18a54:	9810      	ldr	r0, [sp, #64]	; 0x40
   18a56:	4e19      	ldr	r6, [pc, #100]	; (18abc <_vfiprintf_r+0xc88>)
   18a58:	3001      	adds	r0, #1
   18a5a:	e603      	b.n	18664 <_vfiprintf_r+0x830>
   18a5c:	9405      	str	r4, [sp, #20]
   18a5e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   18a62:	9607      	str	r6, [sp, #28]
   18a64:	9302      	str	r3, [sp, #8]
   18a66:	4604      	mov	r4, r0
   18a68:	f7ff bb36 	b.w	180d8 <_vfiprintf_r+0x2a4>
   18a6c:	4686      	mov	lr, r0
   18a6e:	f7ff bbce 	b.w	1820e <_vfiprintf_r+0x3da>
   18a72:	9806      	ldr	r0, [sp, #24]
   18a74:	aa0f      	add	r2, sp, #60	; 0x3c
   18a76:	4659      	mov	r1, fp
   18a78:	f7ff f992 	bl	17da0 <__sprint_r.part.0>
   18a7c:	2800      	cmp	r0, #0
   18a7e:	f43f ae24 	beq.w	186ca <_vfiprintf_r+0x896>
   18a82:	e624      	b.n	186ce <_vfiprintf_r+0x89a>
   18a84:	9907      	ldr	r1, [sp, #28]
   18a86:	f898 2001 	ldrb.w	r2, [r8, #1]
   18a8a:	680c      	ldr	r4, [r1, #0]
   18a8c:	3104      	adds	r1, #4
   18a8e:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   18a92:	46b8      	mov	r8, r7
   18a94:	9107      	str	r1, [sp, #28]
   18a96:	f7ff ba3f 	b.w	17f18 <_vfiprintf_r+0xe4>
   18a9a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   18a9e:	e43c      	b.n	1831a <_vfiprintf_r+0x4e6>
   18aa0:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   18aa4:	e521      	b.n	184ea <_vfiprintf_r+0x6b6>
   18aa6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   18aaa:	f7ff bbf4 	b.w	18296 <_vfiprintf_r+0x462>
   18aae:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   18ab2:	e491      	b.n	183d8 <_vfiprintf_r+0x5a4>
   18ab4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   18ab8:	e469      	b.n	1838e <_vfiprintf_r+0x55a>
   18aba:	bf00      	nop
   18abc:	000250f0 	.word	0x000250f0
   18ac0:	000250c8 	.word	0x000250c8

00018ac4 <__sbprintf>:
   18ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ac8:	460c      	mov	r4, r1
   18aca:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   18ace:	8989      	ldrh	r1, [r1, #12]
   18ad0:	6e66      	ldr	r6, [r4, #100]	; 0x64
   18ad2:	89e5      	ldrh	r5, [r4, #14]
   18ad4:	9619      	str	r6, [sp, #100]	; 0x64
   18ad6:	f021 0102 	bic.w	r1, r1, #2
   18ada:	4606      	mov	r6, r0
   18adc:	69e0      	ldr	r0, [r4, #28]
   18ade:	f8ad 100c 	strh.w	r1, [sp, #12]
   18ae2:	4617      	mov	r7, r2
   18ae4:	f44f 6180 	mov.w	r1, #1024	; 0x400
   18ae8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   18aea:	f8ad 500e 	strh.w	r5, [sp, #14]
   18aee:	4698      	mov	r8, r3
   18af0:	ad1a      	add	r5, sp, #104	; 0x68
   18af2:	2300      	movs	r3, #0
   18af4:	9007      	str	r0, [sp, #28]
   18af6:	a816      	add	r0, sp, #88	; 0x58
   18af8:	9209      	str	r2, [sp, #36]	; 0x24
   18afa:	9306      	str	r3, [sp, #24]
   18afc:	9500      	str	r5, [sp, #0]
   18afe:	9504      	str	r5, [sp, #16]
   18b00:	9102      	str	r1, [sp, #8]
   18b02:	9105      	str	r1, [sp, #20]
   18b04:	f7fc fb00 	bl	15108 <__retarget_lock_init_recursive>
   18b08:	4643      	mov	r3, r8
   18b0a:	463a      	mov	r2, r7
   18b0c:	4669      	mov	r1, sp
   18b0e:	4630      	mov	r0, r6
   18b10:	f7ff f990 	bl	17e34 <_vfiprintf_r>
   18b14:	1e05      	subs	r5, r0, #0
   18b16:	db07      	blt.n	18b28 <__sbprintf+0x64>
   18b18:	4630      	mov	r0, r6
   18b1a:	4669      	mov	r1, sp
   18b1c:	f002 fcee 	bl	1b4fc <_fflush_r>
   18b20:	2800      	cmp	r0, #0
   18b22:	bf18      	it	ne
   18b24:	f04f 35ff 	movne.w	r5, #4294967295
   18b28:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   18b2c:	065b      	lsls	r3, r3, #25
   18b2e:	d503      	bpl.n	18b38 <__sbprintf+0x74>
   18b30:	89a3      	ldrh	r3, [r4, #12]
   18b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18b36:	81a3      	strh	r3, [r4, #12]
   18b38:	9816      	ldr	r0, [sp, #88]	; 0x58
   18b3a:	f7fc fae7 	bl	1510c <__retarget_lock_close_recursive>
   18b3e:	4628      	mov	r0, r5
   18b40:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   18b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018b48 <_vfprintf_r>:
   18b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b4c:	b0c1      	sub	sp, #260	; 0x104
   18b4e:	461d      	mov	r5, r3
   18b50:	468a      	mov	sl, r1
   18b52:	4691      	mov	r9, r2
   18b54:	4604      	mov	r4, r0
   18b56:	9008      	str	r0, [sp, #32]
   18b58:	f002 ff70 	bl	1ba3c <_localeconv_r>
   18b5c:	6803      	ldr	r3, [r0, #0]
   18b5e:	9315      	str	r3, [sp, #84]	; 0x54
   18b60:	4618      	mov	r0, r3
   18b62:	f7fd fe2d 	bl	167c0 <strlen>
   18b66:	950e      	str	r5, [sp, #56]	; 0x38
   18b68:	9014      	str	r0, [sp, #80]	; 0x50
   18b6a:	b11c      	cbz	r4, 18b74 <_vfprintf_r+0x2c>
   18b6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   18b6e:	2b00      	cmp	r3, #0
   18b70:	f000 825f 	beq.w	19032 <_vfprintf_r+0x4ea>
   18b74:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   18b78:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
   18b7c:	f013 0f01 	tst.w	r3, #1
   18b80:	b293      	uxth	r3, r2
   18b82:	d102      	bne.n	18b8a <_vfprintf_r+0x42>
   18b84:	0599      	lsls	r1, r3, #22
   18b86:	f140 8275 	bpl.w	19074 <_vfprintf_r+0x52c>
   18b8a:	049f      	lsls	r7, r3, #18
   18b8c:	d40a      	bmi.n	18ba4 <_vfprintf_r+0x5c>
   18b8e:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
   18b92:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
   18b96:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   18b9a:	f8aa 300c 	strh.w	r3, [sl, #12]
   18b9e:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
   18ba2:	b29b      	uxth	r3, r3
   18ba4:	071e      	lsls	r6, r3, #28
   18ba6:	f140 8223 	bpl.w	18ff0 <_vfprintf_r+0x4a8>
   18baa:	f8da 2010 	ldr.w	r2, [sl, #16]
   18bae:	2a00      	cmp	r2, #0
   18bb0:	f000 821e 	beq.w	18ff0 <_vfprintf_r+0x4a8>
   18bb4:	f003 021a 	and.w	r2, r3, #26
   18bb8:	2a0a      	cmp	r2, #10
   18bba:	f000 823e 	beq.w	1903a <_vfprintf_r+0x4f2>
   18bbe:	2300      	movs	r3, #0
   18bc0:	4618      	mov	r0, r3
   18bc2:	9311      	str	r3, [sp, #68]	; 0x44
   18bc4:	9313      	str	r3, [sp, #76]	; 0x4c
   18bc6:	9312      	str	r3, [sp, #72]	; 0x48
   18bc8:	9325      	str	r3, [sp, #148]	; 0x94
   18bca:	9324      	str	r3, [sp, #144]	; 0x90
   18bcc:	9318      	str	r3, [sp, #96]	; 0x60
   18bce:	9319      	str	r3, [sp, #100]	; 0x64
   18bd0:	930b      	str	r3, [sp, #44]	; 0x2c
   18bd2:	ab30      	add	r3, sp, #192	; 0xc0
   18bd4:	9323      	str	r3, [sp, #140]	; 0x8c
   18bd6:	4698      	mov	r8, r3
   18bd8:	9016      	str	r0, [sp, #88]	; 0x58
   18bda:	9017      	str	r0, [sp, #92]	; 0x5c
   18bdc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   18be0:	f899 3000 	ldrb.w	r3, [r9]
   18be4:	464c      	mov	r4, r9
   18be6:	b1eb      	cbz	r3, 18c24 <_vfprintf_r+0xdc>
   18be8:	2b25      	cmp	r3, #37	; 0x25
   18bea:	d102      	bne.n	18bf2 <_vfprintf_r+0xaa>
   18bec:	e01a      	b.n	18c24 <_vfprintf_r+0xdc>
   18bee:	2b25      	cmp	r3, #37	; 0x25
   18bf0:	d003      	beq.n	18bfa <_vfprintf_r+0xb2>
   18bf2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   18bf6:	2b00      	cmp	r3, #0
   18bf8:	d1f9      	bne.n	18bee <_vfprintf_r+0xa6>
   18bfa:	eba4 0509 	sub.w	r5, r4, r9
   18bfe:	b18d      	cbz	r5, 18c24 <_vfprintf_r+0xdc>
   18c00:	9b24      	ldr	r3, [sp, #144]	; 0x90
   18c02:	9a25      	ldr	r2, [sp, #148]	; 0x94
   18c04:	f8c8 9000 	str.w	r9, [r8]
   18c08:	3301      	adds	r3, #1
   18c0a:	442a      	add	r2, r5
   18c0c:	2b07      	cmp	r3, #7
   18c0e:	f8c8 5004 	str.w	r5, [r8, #4]
   18c12:	9225      	str	r2, [sp, #148]	; 0x94
   18c14:	9324      	str	r3, [sp, #144]	; 0x90
   18c16:	f300 8201 	bgt.w	1901c <_vfprintf_r+0x4d4>
   18c1a:	f108 0808 	add.w	r8, r8, #8
   18c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18c20:	442b      	add	r3, r5
   18c22:	930b      	str	r3, [sp, #44]	; 0x2c
   18c24:	7823      	ldrb	r3, [r4, #0]
   18c26:	2b00      	cmp	r3, #0
   18c28:	f000 83f0 	beq.w	1940c <_vfprintf_r+0x8c4>
   18c2c:	2300      	movs	r3, #0
   18c2e:	461a      	mov	r2, r3
   18c30:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   18c34:	4619      	mov	r1, r3
   18c36:	930c      	str	r3, [sp, #48]	; 0x30
   18c38:	469b      	mov	fp, r3
   18c3a:	7866      	ldrb	r6, [r4, #1]
   18c3c:	f04f 33ff 	mov.w	r3, #4294967295
   18c40:	f104 0901 	add.w	r9, r4, #1
   18c44:	9309      	str	r3, [sp, #36]	; 0x24
   18c46:	f109 0901 	add.w	r9, r9, #1
   18c4a:	f1a6 0320 	sub.w	r3, r6, #32
   18c4e:	2b58      	cmp	r3, #88	; 0x58
   18c50:	f200 83bf 	bhi.w	193d2 <_vfprintf_r+0x88a>
   18c54:	e8df f013 	tbh	[pc, r3, lsl #1]
   18c58:	03bd02e0 	.word	0x03bd02e0
   18c5c:	034f03bd 	.word	0x034f03bd
   18c60:	03bd03bd 	.word	0x03bd03bd
   18c64:	03bd03bd 	.word	0x03bd03bd
   18c68:	03bd03bd 	.word	0x03bd03bd
   18c6c:	03080354 	.word	0x03080354
   18c70:	021a03bd 	.word	0x021a03bd
   18c74:	03bd02e8 	.word	0x03bd02e8
   18c78:	033a0303 	.word	0x033a0303
   18c7c:	033a033a 	.word	0x033a033a
   18c80:	033a033a 	.word	0x033a033a
   18c84:	033a033a 	.word	0x033a033a
   18c88:	033a033a 	.word	0x033a033a
   18c8c:	03bd03bd 	.word	0x03bd03bd
   18c90:	03bd03bd 	.word	0x03bd03bd
   18c94:	03bd03bd 	.word	0x03bd03bd
   18c98:	03bd03bd 	.word	0x03bd03bd
   18c9c:	03bd03bd 	.word	0x03bd03bd
   18ca0:	03620349 	.word	0x03620349
   18ca4:	036203bd 	.word	0x036203bd
   18ca8:	03bd03bd 	.word	0x03bd03bd
   18cac:	03bd03bd 	.word	0x03bd03bd
   18cb0:	03bd03a2 	.word	0x03bd03a2
   18cb4:	006f03bd 	.word	0x006f03bd
   18cb8:	03bd03bd 	.word	0x03bd03bd
   18cbc:	03bd03bd 	.word	0x03bd03bd
   18cc0:	005903bd 	.word	0x005903bd
   18cc4:	03bd03bd 	.word	0x03bd03bd
   18cc8:	03bd031e 	.word	0x03bd031e
   18ccc:	03bd03bd 	.word	0x03bd03bd
   18cd0:	03bd03bd 	.word	0x03bd03bd
   18cd4:	03bd03bd 	.word	0x03bd03bd
   18cd8:	03bd03bd 	.word	0x03bd03bd
   18cdc:	032403bd 	.word	0x032403bd
   18ce0:	03620273 	.word	0x03620273
   18ce4:	03620362 	.word	0x03620362
   18ce8:	027302b7 	.word	0x027302b7
   18cec:	03bd03bd 	.word	0x03bd03bd
   18cf0:	03bd02bc 	.word	0x03bd02bc
   18cf4:	007102c9 	.word	0x007102c9
   18cf8:	0247030d 	.word	0x0247030d
   18cfc:	025203bd 	.word	0x025203bd
   18d00:	005b03bd 	.word	0x005b03bd
   18d04:	03bd03bd 	.word	0x03bd03bd
   18d08:	021f      	.short	0x021f
   18d0a:	f04b 0b10 	orr.w	fp, fp, #16
   18d0e:	f01b 0f20 	tst.w	fp, #32
   18d12:	f040 8353 	bne.w	193bc <_vfprintf_r+0x874>
   18d16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18d18:	f01b 0f10 	tst.w	fp, #16
   18d1c:	4613      	mov	r3, r2
   18d1e:	f040 85b4 	bne.w	1988a <_vfprintf_r+0xd42>
   18d22:	f01b 0f40 	tst.w	fp, #64	; 0x40
   18d26:	f000 85b0 	beq.w	1988a <_vfprintf_r+0xd42>
   18d2a:	8814      	ldrh	r4, [r2, #0]
   18d2c:	3204      	adds	r2, #4
   18d2e:	2500      	movs	r5, #0
   18d30:	2301      	movs	r3, #1
   18d32:	920e      	str	r2, [sp, #56]	; 0x38
   18d34:	e014      	b.n	18d60 <_vfprintf_r+0x218>
   18d36:	f04b 0b10 	orr.w	fp, fp, #16
   18d3a:	f01b 0320 	ands.w	r3, fp, #32
   18d3e:	f040 8332 	bne.w	193a6 <_vfprintf_r+0x85e>
   18d42:	f01b 0210 	ands.w	r2, fp, #16
   18d46:	f040 8589 	bne.w	1985c <_vfprintf_r+0xd14>
   18d4a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   18d4e:	f000 8585 	beq.w	1985c <_vfprintf_r+0xd14>
   18d52:	990e      	ldr	r1, [sp, #56]	; 0x38
   18d54:	4613      	mov	r3, r2
   18d56:	460a      	mov	r2, r1
   18d58:	3204      	adds	r2, #4
   18d5a:	880c      	ldrh	r4, [r1, #0]
   18d5c:	920e      	str	r2, [sp, #56]	; 0x38
   18d5e:	2500      	movs	r5, #0
   18d60:	f04f 0a00 	mov.w	sl, #0
   18d64:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
   18d68:	9909      	ldr	r1, [sp, #36]	; 0x24
   18d6a:	1c4a      	adds	r2, r1, #1
   18d6c:	f000 820b 	beq.w	19186 <_vfprintf_r+0x63e>
   18d70:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   18d74:	9206      	str	r2, [sp, #24]
   18d76:	ea54 0205 	orrs.w	r2, r4, r5
   18d7a:	f040 820a 	bne.w	19192 <_vfprintf_r+0x64a>
   18d7e:	2900      	cmp	r1, #0
   18d80:	f040 846f 	bne.w	19662 <_vfprintf_r+0xb1a>
   18d84:	2b00      	cmp	r3, #0
   18d86:	f040 852d 	bne.w	197e4 <_vfprintf_r+0xc9c>
   18d8a:	f01b 0301 	ands.w	r3, fp, #1
   18d8e:	930d      	str	r3, [sp, #52]	; 0x34
   18d90:	f000 8668 	beq.w	19a64 <_vfprintf_r+0xf1c>
   18d94:	af40      	add	r7, sp, #256	; 0x100
   18d96:	2330      	movs	r3, #48	; 0x30
   18d98:	f807 3d41 	strb.w	r3, [r7, #-65]!
   18d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18d9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   18da0:	4293      	cmp	r3, r2
   18da2:	bfb8      	it	lt
   18da4:	4613      	movlt	r3, r2
   18da6:	9307      	str	r3, [sp, #28]
   18da8:	2300      	movs	r3, #0
   18daa:	9310      	str	r3, [sp, #64]	; 0x40
   18dac:	f1ba 0f00 	cmp.w	sl, #0
   18db0:	d002      	beq.n	18db8 <_vfprintf_r+0x270>
   18db2:	9b07      	ldr	r3, [sp, #28]
   18db4:	3301      	adds	r3, #1
   18db6:	9307      	str	r3, [sp, #28]
   18db8:	9b06      	ldr	r3, [sp, #24]
   18dba:	f013 0302 	ands.w	r3, r3, #2
   18dbe:	930f      	str	r3, [sp, #60]	; 0x3c
   18dc0:	d002      	beq.n	18dc8 <_vfprintf_r+0x280>
   18dc2:	9b07      	ldr	r3, [sp, #28]
   18dc4:	3302      	adds	r3, #2
   18dc6:	9307      	str	r3, [sp, #28]
   18dc8:	9b06      	ldr	r3, [sp, #24]
   18dca:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   18dce:	f040 831b 	bne.w	19408 <_vfprintf_r+0x8c0>
   18dd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18dd4:	9a07      	ldr	r2, [sp, #28]
   18dd6:	eba3 0b02 	sub.w	fp, r3, r2
   18dda:	f1bb 0f00 	cmp.w	fp, #0
   18dde:	f340 8313 	ble.w	19408 <_vfprintf_r+0x8c0>
   18de2:	f1bb 0f10 	cmp.w	fp, #16
   18de6:	9925      	ldr	r1, [sp, #148]	; 0x94
   18de8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   18dea:	dd28      	ble.n	18e3e <_vfprintf_r+0x2f6>
   18dec:	4643      	mov	r3, r8
   18dee:	2410      	movs	r4, #16
   18df0:	46a8      	mov	r8, r5
   18df2:	f8dd a020 	ldr.w	sl, [sp, #32]
   18df6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   18df8:	e006      	b.n	18e08 <_vfprintf_r+0x2c0>
   18dfa:	f1ab 0b10 	sub.w	fp, fp, #16
   18dfe:	f1bb 0f10 	cmp.w	fp, #16
   18e02:	f103 0308 	add.w	r3, r3, #8
   18e06:	dd18      	ble.n	18e3a <_vfprintf_r+0x2f2>
   18e08:	3201      	adds	r2, #1
   18e0a:	48b9      	ldr	r0, [pc, #740]	; (190f0 <_vfprintf_r+0x5a8>)
   18e0c:	9224      	str	r2, [sp, #144]	; 0x90
   18e0e:	3110      	adds	r1, #16
   18e10:	2a07      	cmp	r2, #7
   18e12:	9125      	str	r1, [sp, #148]	; 0x94
   18e14:	e883 0011 	stmia.w	r3, {r0, r4}
   18e18:	ddef      	ble.n	18dfa <_vfprintf_r+0x2b2>
   18e1a:	aa23      	add	r2, sp, #140	; 0x8c
   18e1c:	4629      	mov	r1, r5
   18e1e:	4650      	mov	r0, sl
   18e20:	f7fe fffe 	bl	17e20 <__sprint_r>
   18e24:	2800      	cmp	r0, #0
   18e26:	f040 836a 	bne.w	194fe <_vfprintf_r+0x9b6>
   18e2a:	f1ab 0b10 	sub.w	fp, fp, #16
   18e2e:	f1bb 0f10 	cmp.w	fp, #16
   18e32:	9925      	ldr	r1, [sp, #148]	; 0x94
   18e34:	9a24      	ldr	r2, [sp, #144]	; 0x90
   18e36:	ab30      	add	r3, sp, #192	; 0xc0
   18e38:	dce6      	bgt.n	18e08 <_vfprintf_r+0x2c0>
   18e3a:	4645      	mov	r5, r8
   18e3c:	4698      	mov	r8, r3
   18e3e:	3201      	adds	r2, #1
   18e40:	4bab      	ldr	r3, [pc, #684]	; (190f0 <_vfprintf_r+0x5a8>)
   18e42:	9224      	str	r2, [sp, #144]	; 0x90
   18e44:	eb0b 0401 	add.w	r4, fp, r1
   18e48:	2a07      	cmp	r2, #7
   18e4a:	9425      	str	r4, [sp, #148]	; 0x94
   18e4c:	e888 0808 	stmia.w	r8, {r3, fp}
   18e50:	f300 84cd 	bgt.w	197ee <_vfprintf_r+0xca6>
   18e54:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
   18e58:	f108 0808 	add.w	r8, r8, #8
   18e5c:	f1ba 0f00 	cmp.w	sl, #0
   18e60:	d00e      	beq.n	18e80 <_vfprintf_r+0x338>
   18e62:	9b24      	ldr	r3, [sp, #144]	; 0x90
   18e64:	3301      	adds	r3, #1
   18e66:	3401      	adds	r4, #1
   18e68:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
   18e6c:	2201      	movs	r2, #1
   18e6e:	2b07      	cmp	r3, #7
   18e70:	9425      	str	r4, [sp, #148]	; 0x94
   18e72:	9324      	str	r3, [sp, #144]	; 0x90
   18e74:	e888 0006 	stmia.w	r8, {r1, r2}
   18e78:	f300 840a 	bgt.w	19690 <_vfprintf_r+0xb48>
   18e7c:	f108 0808 	add.w	r8, r8, #8
   18e80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18e82:	b16b      	cbz	r3, 18ea0 <_vfprintf_r+0x358>
   18e84:	9b24      	ldr	r3, [sp, #144]	; 0x90
   18e86:	3301      	adds	r3, #1
   18e88:	3402      	adds	r4, #2
   18e8a:	a91c      	add	r1, sp, #112	; 0x70
   18e8c:	2202      	movs	r2, #2
   18e8e:	2b07      	cmp	r3, #7
   18e90:	9425      	str	r4, [sp, #148]	; 0x94
   18e92:	9324      	str	r3, [sp, #144]	; 0x90
   18e94:	e888 0006 	stmia.w	r8, {r1, r2}
   18e98:	f300 8406 	bgt.w	196a8 <_vfprintf_r+0xb60>
   18e9c:	f108 0808 	add.w	r8, r8, #8
   18ea0:	2d80      	cmp	r5, #128	; 0x80
   18ea2:	f000 832e 	beq.w	19502 <_vfprintf_r+0x9ba>
   18ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18ea8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   18eaa:	eba3 0a02 	sub.w	sl, r3, r2
   18eae:	f1ba 0f00 	cmp.w	sl, #0
   18eb2:	dd3b      	ble.n	18f2c <_vfprintf_r+0x3e4>
   18eb4:	f1ba 0f10 	cmp.w	sl, #16
   18eb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   18eba:	4d8e      	ldr	r5, [pc, #568]	; (190f4 <_vfprintf_r+0x5ac>)
   18ebc:	dd2b      	ble.n	18f16 <_vfprintf_r+0x3ce>
   18ebe:	4642      	mov	r2, r8
   18ec0:	4621      	mov	r1, r4
   18ec2:	46b0      	mov	r8, r6
   18ec4:	f04f 0b10 	mov.w	fp, #16
   18ec8:	462e      	mov	r6, r5
   18eca:	9c08      	ldr	r4, [sp, #32]
   18ecc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   18ece:	e006      	b.n	18ede <_vfprintf_r+0x396>
   18ed0:	f1aa 0a10 	sub.w	sl, sl, #16
   18ed4:	f1ba 0f10 	cmp.w	sl, #16
   18ed8:	f102 0208 	add.w	r2, r2, #8
   18edc:	dd17      	ble.n	18f0e <_vfprintf_r+0x3c6>
   18ede:	3301      	adds	r3, #1
   18ee0:	3110      	adds	r1, #16
   18ee2:	2b07      	cmp	r3, #7
   18ee4:	9125      	str	r1, [sp, #148]	; 0x94
   18ee6:	9324      	str	r3, [sp, #144]	; 0x90
   18ee8:	e882 0840 	stmia.w	r2, {r6, fp}
   18eec:	ddf0      	ble.n	18ed0 <_vfprintf_r+0x388>
   18eee:	aa23      	add	r2, sp, #140	; 0x8c
   18ef0:	4629      	mov	r1, r5
   18ef2:	4620      	mov	r0, r4
   18ef4:	f7fe ff94 	bl	17e20 <__sprint_r>
   18ef8:	2800      	cmp	r0, #0
   18efa:	f040 8300 	bne.w	194fe <_vfprintf_r+0x9b6>
   18efe:	f1aa 0a10 	sub.w	sl, sl, #16
   18f02:	f1ba 0f10 	cmp.w	sl, #16
   18f06:	9925      	ldr	r1, [sp, #148]	; 0x94
   18f08:	9b24      	ldr	r3, [sp, #144]	; 0x90
   18f0a:	aa30      	add	r2, sp, #192	; 0xc0
   18f0c:	dce7      	bgt.n	18ede <_vfprintf_r+0x396>
   18f0e:	4635      	mov	r5, r6
   18f10:	460c      	mov	r4, r1
   18f12:	4646      	mov	r6, r8
   18f14:	4690      	mov	r8, r2
   18f16:	3301      	adds	r3, #1
   18f18:	4454      	add	r4, sl
   18f1a:	2b07      	cmp	r3, #7
   18f1c:	9425      	str	r4, [sp, #148]	; 0x94
   18f1e:	9324      	str	r3, [sp, #144]	; 0x90
   18f20:	e888 0420 	stmia.w	r8, {r5, sl}
   18f24:	f300 83a9 	bgt.w	1967a <_vfprintf_r+0xb32>
   18f28:	f108 0808 	add.w	r8, r8, #8
   18f2c:	9b06      	ldr	r3, [sp, #24]
   18f2e:	05db      	lsls	r3, r3, #23
   18f30:	f100 8285 	bmi.w	1943e <_vfprintf_r+0x8f6>
   18f34:	9b24      	ldr	r3, [sp, #144]	; 0x90
   18f36:	990d      	ldr	r1, [sp, #52]	; 0x34
   18f38:	f8c8 7000 	str.w	r7, [r8]
   18f3c:	3301      	adds	r3, #1
   18f3e:	440c      	add	r4, r1
   18f40:	2b07      	cmp	r3, #7
   18f42:	9425      	str	r4, [sp, #148]	; 0x94
   18f44:	f8c8 1004 	str.w	r1, [r8, #4]
   18f48:	9324      	str	r3, [sp, #144]	; 0x90
   18f4a:	f300 8375 	bgt.w	19638 <_vfprintf_r+0xaf0>
   18f4e:	f108 0808 	add.w	r8, r8, #8
   18f52:	9b06      	ldr	r3, [sp, #24]
   18f54:	0759      	lsls	r1, r3, #29
   18f56:	d53b      	bpl.n	18fd0 <_vfprintf_r+0x488>
   18f58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18f5a:	9a07      	ldr	r2, [sp, #28]
   18f5c:	1a9d      	subs	r5, r3, r2
   18f5e:	2d00      	cmp	r5, #0
   18f60:	dd36      	ble.n	18fd0 <_vfprintf_r+0x488>
   18f62:	2d10      	cmp	r5, #16
   18f64:	9b24      	ldr	r3, [sp, #144]	; 0x90
   18f66:	dd21      	ble.n	18fac <_vfprintf_r+0x464>
   18f68:	2610      	movs	r6, #16
   18f6a:	9f08      	ldr	r7, [sp, #32]
   18f6c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   18f70:	e004      	b.n	18f7c <_vfprintf_r+0x434>
   18f72:	3d10      	subs	r5, #16
   18f74:	2d10      	cmp	r5, #16
   18f76:	f108 0808 	add.w	r8, r8, #8
   18f7a:	dd17      	ble.n	18fac <_vfprintf_r+0x464>
   18f7c:	3301      	adds	r3, #1
   18f7e:	4a5c      	ldr	r2, [pc, #368]	; (190f0 <_vfprintf_r+0x5a8>)
   18f80:	9324      	str	r3, [sp, #144]	; 0x90
   18f82:	3410      	adds	r4, #16
   18f84:	2b07      	cmp	r3, #7
   18f86:	9425      	str	r4, [sp, #148]	; 0x94
   18f88:	e888 0044 	stmia.w	r8, {r2, r6}
   18f8c:	ddf1      	ble.n	18f72 <_vfprintf_r+0x42a>
   18f8e:	aa23      	add	r2, sp, #140	; 0x8c
   18f90:	4651      	mov	r1, sl
   18f92:	4638      	mov	r0, r7
   18f94:	f7fe ff44 	bl	17e20 <__sprint_r>
   18f98:	2800      	cmp	r0, #0
   18f9a:	f040 823f 	bne.w	1941c <_vfprintf_r+0x8d4>
   18f9e:	3d10      	subs	r5, #16
   18fa0:	2d10      	cmp	r5, #16
   18fa2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   18fa4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   18fa6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   18faa:	dce7      	bgt.n	18f7c <_vfprintf_r+0x434>
   18fac:	3301      	adds	r3, #1
   18fae:	4a50      	ldr	r2, [pc, #320]	; (190f0 <_vfprintf_r+0x5a8>)
   18fb0:	9324      	str	r3, [sp, #144]	; 0x90
   18fb2:	442c      	add	r4, r5
   18fb4:	2b07      	cmp	r3, #7
   18fb6:	9425      	str	r4, [sp, #148]	; 0x94
   18fb8:	e888 0024 	stmia.w	r8, {r2, r5}
   18fbc:	dd08      	ble.n	18fd0 <_vfprintf_r+0x488>
   18fbe:	aa23      	add	r2, sp, #140	; 0x8c
   18fc0:	990a      	ldr	r1, [sp, #40]	; 0x28
   18fc2:	9808      	ldr	r0, [sp, #32]
   18fc4:	f7fe ff2c 	bl	17e20 <__sprint_r>
   18fc8:	2800      	cmp	r0, #0
   18fca:	f040 8347 	bne.w	1965c <_vfprintf_r+0xb14>
   18fce:	9c25      	ldr	r4, [sp, #148]	; 0x94
   18fd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18fd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   18fd4:	9907      	ldr	r1, [sp, #28]
   18fd6:	428a      	cmp	r2, r1
   18fd8:	bfac      	ite	ge
   18fda:	189b      	addge	r3, r3, r2
   18fdc:	185b      	addlt	r3, r3, r1
   18fde:	930b      	str	r3, [sp, #44]	; 0x2c
   18fe0:	2c00      	cmp	r4, #0
   18fe2:	f040 8333 	bne.w	1964c <_vfprintf_r+0xb04>
   18fe6:	2300      	movs	r3, #0
   18fe8:	9324      	str	r3, [sp, #144]	; 0x90
   18fea:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   18fee:	e5f7      	b.n	18be0 <_vfprintf_r+0x98>
   18ff0:	4651      	mov	r1, sl
   18ff2:	9808      	ldr	r0, [sp, #32]
   18ff4:	f001 f93c 	bl	1a270 <__swsetup_r>
   18ff8:	2800      	cmp	r0, #0
   18ffa:	d038      	beq.n	1906e <_vfprintf_r+0x526>
   18ffc:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   19000:	07dd      	lsls	r5, r3, #31
   19002:	d404      	bmi.n	1900e <_vfprintf_r+0x4c6>
   19004:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   19008:	059c      	lsls	r4, r3, #22
   1900a:	f140 85ca 	bpl.w	19ba2 <_vfprintf_r+0x105a>
   1900e:	f04f 33ff 	mov.w	r3, #4294967295
   19012:	930b      	str	r3, [sp, #44]	; 0x2c
   19014:	980b      	ldr	r0, [sp, #44]	; 0x2c
   19016:	b041      	add	sp, #260	; 0x104
   19018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1901c:	aa23      	add	r2, sp, #140	; 0x8c
   1901e:	990a      	ldr	r1, [sp, #40]	; 0x28
   19020:	9808      	ldr	r0, [sp, #32]
   19022:	f7fe fefd 	bl	17e20 <__sprint_r>
   19026:	2800      	cmp	r0, #0
   19028:	f040 8318 	bne.w	1965c <_vfprintf_r+0xb14>
   1902c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   19030:	e5f5      	b.n	18c1e <_vfprintf_r+0xd6>
   19032:	9808      	ldr	r0, [sp, #32]
   19034:	f002 faba 	bl	1b5ac <__sinit>
   19038:	e59c      	b.n	18b74 <_vfprintf_r+0x2c>
   1903a:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
   1903e:	2a00      	cmp	r2, #0
   19040:	f6ff adbd 	blt.w	18bbe <_vfprintf_r+0x76>
   19044:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
   19048:	07d0      	lsls	r0, r2, #31
   1904a:	d405      	bmi.n	19058 <_vfprintf_r+0x510>
   1904c:	0599      	lsls	r1, r3, #22
   1904e:	d403      	bmi.n	19058 <_vfprintf_r+0x510>
   19050:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   19054:	f7fc f85e 	bl	15114 <__retarget_lock_release_recursive>
   19058:	462b      	mov	r3, r5
   1905a:	464a      	mov	r2, r9
   1905c:	4651      	mov	r1, sl
   1905e:	9808      	ldr	r0, [sp, #32]
   19060:	f001 f81e 	bl	1a0a0 <__sbprintf>
   19064:	900b      	str	r0, [sp, #44]	; 0x2c
   19066:	980b      	ldr	r0, [sp, #44]	; 0x2c
   19068:	b041      	add	sp, #260	; 0x104
   1906a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1906e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   19072:	e59f      	b.n	18bb4 <_vfprintf_r+0x6c>
   19074:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   19078:	f7fc f84a 	bl	15110 <__retarget_lock_acquire_recursive>
   1907c:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
   19080:	b293      	uxth	r3, r2
   19082:	e582      	b.n	18b8a <_vfprintf_r+0x42>
   19084:	980c      	ldr	r0, [sp, #48]	; 0x30
   19086:	930e      	str	r3, [sp, #56]	; 0x38
   19088:	4240      	negs	r0, r0
   1908a:	900c      	str	r0, [sp, #48]	; 0x30
   1908c:	f04b 0b04 	orr.w	fp, fp, #4
   19090:	f899 6000 	ldrb.w	r6, [r9]
   19094:	e5d7      	b.n	18c46 <_vfprintf_r+0xfe>
   19096:	2a00      	cmp	r2, #0
   19098:	f040 87df 	bne.w	1a05a <_vfprintf_r+0x1512>
   1909c:	4b16      	ldr	r3, [pc, #88]	; (190f8 <_vfprintf_r+0x5b0>)
   1909e:	9318      	str	r3, [sp, #96]	; 0x60
   190a0:	f01b 0f20 	tst.w	fp, #32
   190a4:	f040 84b9 	bne.w	19a1a <_vfprintf_r+0xed2>
   190a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   190aa:	f01b 0f10 	tst.w	fp, #16
   190ae:	4613      	mov	r3, r2
   190b0:	f040 83dc 	bne.w	1986c <_vfprintf_r+0xd24>
   190b4:	f01b 0f40 	tst.w	fp, #64	; 0x40
   190b8:	f000 83d8 	beq.w	1986c <_vfprintf_r+0xd24>
   190bc:	3304      	adds	r3, #4
   190be:	8814      	ldrh	r4, [r2, #0]
   190c0:	930e      	str	r3, [sp, #56]	; 0x38
   190c2:	2500      	movs	r5, #0
   190c4:	f01b 0f01 	tst.w	fp, #1
   190c8:	f000 8322 	beq.w	19710 <_vfprintf_r+0xbc8>
   190cc:	ea54 0305 	orrs.w	r3, r4, r5
   190d0:	f000 831e 	beq.w	19710 <_vfprintf_r+0xbc8>
   190d4:	2330      	movs	r3, #48	; 0x30
   190d6:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
   190da:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
   190de:	f04b 0b02 	orr.w	fp, fp, #2
   190e2:	2302      	movs	r3, #2
   190e4:	e63c      	b.n	18d60 <_vfprintf_r+0x218>
   190e6:	f04b 0b20 	orr.w	fp, fp, #32
   190ea:	f899 6000 	ldrb.w	r6, [r9]
   190ee:	e5aa      	b.n	18c46 <_vfprintf_r+0xfe>
   190f0:	00025110 	.word	0x00025110
   190f4:	00025120 	.word	0x00025120
   190f8:	000250b4 	.word	0x000250b4
   190fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   190fe:	6817      	ldr	r7, [r2, #0]
   19100:	2400      	movs	r4, #0
   19102:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   19106:	1d15      	adds	r5, r2, #4
   19108:	2f00      	cmp	r7, #0
   1910a:	f000 864e 	beq.w	19daa <_vfprintf_r+0x1262>
   1910e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19110:	1c53      	adds	r3, r2, #1
   19112:	f000 85cc 	beq.w	19cae <_vfprintf_r+0x1166>
   19116:	4621      	mov	r1, r4
   19118:	4638      	mov	r0, r7
   1911a:	f7fc fb51 	bl	157c0 <memchr>
   1911e:	2800      	cmp	r0, #0
   19120:	f000 8697 	beq.w	19e52 <_vfprintf_r+0x130a>
   19124:	1bc3      	subs	r3, r0, r7
   19126:	930d      	str	r3, [sp, #52]	; 0x34
   19128:	9409      	str	r4, [sp, #36]	; 0x24
   1912a:	950e      	str	r5, [sp, #56]	; 0x38
   1912c:	f8cd b018 	str.w	fp, [sp, #24]
   19130:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   19134:	9307      	str	r3, [sp, #28]
   19136:	9410      	str	r4, [sp, #64]	; 0x40
   19138:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
   1913c:	e636      	b.n	18dac <_vfprintf_r+0x264>
   1913e:	2a00      	cmp	r2, #0
   19140:	f040 8796 	bne.w	1a070 <_vfprintf_r+0x1528>
   19144:	f01b 0f20 	tst.w	fp, #32
   19148:	f040 845a 	bne.w	19a00 <_vfprintf_r+0xeb8>
   1914c:	f01b 0f10 	tst.w	fp, #16
   19150:	f040 83a2 	bne.w	19898 <_vfprintf_r+0xd50>
   19154:	f01b 0f40 	tst.w	fp, #64	; 0x40
   19158:	f000 839e 	beq.w	19898 <_vfprintf_r+0xd50>
   1915c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1915e:	f9b1 4000 	ldrsh.w	r4, [r1]
   19162:	3104      	adds	r1, #4
   19164:	17e5      	asrs	r5, r4, #31
   19166:	4622      	mov	r2, r4
   19168:	462b      	mov	r3, r5
   1916a:	910e      	str	r1, [sp, #56]	; 0x38
   1916c:	2a00      	cmp	r2, #0
   1916e:	f173 0300 	sbcs.w	r3, r3, #0
   19172:	f2c0 8487 	blt.w	19a84 <_vfprintf_r+0xf3c>
   19176:	9909      	ldr	r1, [sp, #36]	; 0x24
   19178:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
   1917c:	1c4a      	adds	r2, r1, #1
   1917e:	f04f 0301 	mov.w	r3, #1
   19182:	f47f adf5 	bne.w	18d70 <_vfprintf_r+0x228>
   19186:	ea54 0205 	orrs.w	r2, r4, r5
   1918a:	f000 826c 	beq.w	19666 <_vfprintf_r+0xb1e>
   1918e:	f8cd b018 	str.w	fp, [sp, #24]
   19192:	2b01      	cmp	r3, #1
   19194:	f000 8308 	beq.w	197a8 <_vfprintf_r+0xc60>
   19198:	2b02      	cmp	r3, #2
   1919a:	f040 8295 	bne.w	196c8 <_vfprintf_r+0xb80>
   1919e:	9818      	ldr	r0, [sp, #96]	; 0x60
   191a0:	af30      	add	r7, sp, #192	; 0xc0
   191a2:	0923      	lsrs	r3, r4, #4
   191a4:	f004 010f 	and.w	r1, r4, #15
   191a8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   191ac:	092a      	lsrs	r2, r5, #4
   191ae:	461c      	mov	r4, r3
   191b0:	4615      	mov	r5, r2
   191b2:	5c43      	ldrb	r3, [r0, r1]
   191b4:	f807 3d01 	strb.w	r3, [r7, #-1]!
   191b8:	ea54 0305 	orrs.w	r3, r4, r5
   191bc:	d1f1      	bne.n	191a2 <_vfprintf_r+0x65a>
   191be:	ab30      	add	r3, sp, #192	; 0xc0
   191c0:	1bdb      	subs	r3, r3, r7
   191c2:	930d      	str	r3, [sp, #52]	; 0x34
   191c4:	e5ea      	b.n	18d9c <_vfprintf_r+0x254>
   191c6:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   191ca:	f899 6000 	ldrb.w	r6, [r9]
   191ce:	e53a      	b.n	18c46 <_vfprintf_r+0xfe>
   191d0:	f899 6000 	ldrb.w	r6, [r9]
   191d4:	2e6c      	cmp	r6, #108	; 0x6c
   191d6:	bf03      	ittte	eq
   191d8:	f899 6001 	ldrbeq.w	r6, [r9, #1]
   191dc:	f04b 0b20 	orreq.w	fp, fp, #32
   191e0:	f109 0901 	addeq.w	r9, r9, #1
   191e4:	f04b 0b10 	orrne.w	fp, fp, #16
   191e8:	e52d      	b.n	18c46 <_vfprintf_r+0xfe>
   191ea:	2a00      	cmp	r2, #0
   191ec:	f040 874c 	bne.w	1a088 <_vfprintf_r+0x1540>
   191f0:	f01b 0f20 	tst.w	fp, #32
   191f4:	f040 853f 	bne.w	19c76 <_vfprintf_r+0x112e>
   191f8:	f01b 0f10 	tst.w	fp, #16
   191fc:	f040 80fc 	bne.w	193f8 <_vfprintf_r+0x8b0>
   19200:	f01b 0f40 	tst.w	fp, #64	; 0x40
   19204:	f000 80f8 	beq.w	193f8 <_vfprintf_r+0x8b0>
   19208:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1920a:	6813      	ldr	r3, [r2, #0]
   1920c:	3204      	adds	r2, #4
   1920e:	920e      	str	r2, [sp, #56]	; 0x38
   19210:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   19214:	801a      	strh	r2, [r3, #0]
   19216:	e4e3      	b.n	18be0 <_vfprintf_r+0x98>
   19218:	f899 6000 	ldrb.w	r6, [r9]
   1921c:	2900      	cmp	r1, #0
   1921e:	f47f ad12 	bne.w	18c46 <_vfprintf_r+0xfe>
   19222:	2201      	movs	r2, #1
   19224:	2120      	movs	r1, #32
   19226:	e50e      	b.n	18c46 <_vfprintf_r+0xfe>
   19228:	f899 6000 	ldrb.w	r6, [r9]
   1922c:	2e2a      	cmp	r6, #42	; 0x2a
   1922e:	f109 0001 	add.w	r0, r9, #1
   19232:	f000 86f1 	beq.w	1a018 <_vfprintf_r+0x14d0>
   19236:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   1923a:	2b09      	cmp	r3, #9
   1923c:	4681      	mov	r9, r0
   1923e:	bf98      	it	ls
   19240:	2000      	movls	r0, #0
   19242:	f200 863d 	bhi.w	19ec0 <_vfprintf_r+0x1378>
   19246:	f819 6b01 	ldrb.w	r6, [r9], #1
   1924a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1924e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   19252:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   19256:	2b09      	cmp	r3, #9
   19258:	d9f5      	bls.n	19246 <_vfprintf_r+0x6fe>
   1925a:	9009      	str	r0, [sp, #36]	; 0x24
   1925c:	e4f5      	b.n	18c4a <_vfprintf_r+0x102>
   1925e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   19262:	f899 6000 	ldrb.w	r6, [r9]
   19266:	e4ee      	b.n	18c46 <_vfprintf_r+0xfe>
   19268:	f899 6000 	ldrb.w	r6, [r9]
   1926c:	2201      	movs	r2, #1
   1926e:	212b      	movs	r1, #43	; 0x2b
   19270:	e4e9      	b.n	18c46 <_vfprintf_r+0xfe>
   19272:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19274:	4bae      	ldr	r3, [pc, #696]	; (19530 <_vfprintf_r+0x9e8>)
   19276:	6814      	ldr	r4, [r2, #0]
   19278:	9318      	str	r3, [sp, #96]	; 0x60
   1927a:	2678      	movs	r6, #120	; 0x78
   1927c:	2330      	movs	r3, #48	; 0x30
   1927e:	3204      	adds	r2, #4
   19280:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
   19284:	f04b 0b02 	orr.w	fp, fp, #2
   19288:	920e      	str	r2, [sp, #56]	; 0x38
   1928a:	2500      	movs	r5, #0
   1928c:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
   19290:	2302      	movs	r3, #2
   19292:	e565      	b.n	18d60 <_vfprintf_r+0x218>
   19294:	2a00      	cmp	r2, #0
   19296:	f040 86e4 	bne.w	1a062 <_vfprintf_r+0x151a>
   1929a:	4ba6      	ldr	r3, [pc, #664]	; (19534 <_vfprintf_r+0x9ec>)
   1929c:	9318      	str	r3, [sp, #96]	; 0x60
   1929e:	e6ff      	b.n	190a0 <_vfprintf_r+0x558>
   192a0:	990e      	ldr	r1, [sp, #56]	; 0x38
   192a2:	f8cd b018 	str.w	fp, [sp, #24]
   192a6:	680a      	ldr	r2, [r1, #0]
   192a8:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   192ac:	2300      	movs	r3, #0
   192ae:	460a      	mov	r2, r1
   192b0:	469a      	mov	sl, r3
   192b2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   192b6:	3204      	adds	r2, #4
   192b8:	2301      	movs	r3, #1
   192ba:	9307      	str	r3, [sp, #28]
   192bc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   192c0:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
   192c4:	920e      	str	r2, [sp, #56]	; 0x38
   192c6:	930d      	str	r3, [sp, #52]	; 0x34
   192c8:	af26      	add	r7, sp, #152	; 0x98
   192ca:	e575      	b.n	18db8 <_vfprintf_r+0x270>
   192cc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   192d0:	2000      	movs	r0, #0
   192d2:	f819 6b01 	ldrb.w	r6, [r9], #1
   192d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   192da:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   192de:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   192e2:	2b09      	cmp	r3, #9
   192e4:	d9f5      	bls.n	192d2 <_vfprintf_r+0x78a>
   192e6:	900c      	str	r0, [sp, #48]	; 0x30
   192e8:	e4af      	b.n	18c4a <_vfprintf_r+0x102>
   192ea:	2a00      	cmp	r2, #0
   192ec:	f040 86c8 	bne.w	1a080 <_vfprintf_r+0x1538>
   192f0:	f04b 0b10 	orr.w	fp, fp, #16
   192f4:	e726      	b.n	19144 <_vfprintf_r+0x5fc>
   192f6:	f04b 0b01 	orr.w	fp, fp, #1
   192fa:	f899 6000 	ldrb.w	r6, [r9]
   192fe:	e4a2      	b.n	18c46 <_vfprintf_r+0xfe>
   19300:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   19302:	6823      	ldr	r3, [r4, #0]
   19304:	930c      	str	r3, [sp, #48]	; 0x30
   19306:	4618      	mov	r0, r3
   19308:	2800      	cmp	r0, #0
   1930a:	4623      	mov	r3, r4
   1930c:	f103 0304 	add.w	r3, r3, #4
   19310:	f6ff aeb8 	blt.w	19084 <_vfprintf_r+0x53c>
   19314:	930e      	str	r3, [sp, #56]	; 0x38
   19316:	f899 6000 	ldrb.w	r6, [r9]
   1931a:	e494      	b.n	18c46 <_vfprintf_r+0xfe>
   1931c:	2a00      	cmp	r2, #0
   1931e:	f040 86b7 	bne.w	1a090 <_vfprintf_r+0x1548>
   19322:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   19324:	3507      	adds	r5, #7
   19326:	f025 0307 	bic.w	r3, r5, #7
   1932a:	f103 0208 	add.w	r2, r3, #8
   1932e:	920e      	str	r2, [sp, #56]	; 0x38
   19330:	681a      	ldr	r2, [r3, #0]
   19332:	9213      	str	r2, [sp, #76]	; 0x4c
   19334:	685b      	ldr	r3, [r3, #4]
   19336:	9312      	str	r3, [sp, #72]	; 0x48
   19338:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1933a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   1933c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   19340:	4628      	mov	r0, r5
   19342:	4621      	mov	r1, r4
   19344:	f04f 32ff 	mov.w	r2, #4294967295
   19348:	4b7b      	ldr	r3, [pc, #492]	; (19538 <_vfprintf_r+0x9f0>)
   1934a:	f002 ffbb 	bl	1c2c4 <__aeabi_dcmpun>
   1934e:	2800      	cmp	r0, #0
   19350:	f040 83a2 	bne.w	19a98 <_vfprintf_r+0xf50>
   19354:	4628      	mov	r0, r5
   19356:	4621      	mov	r1, r4
   19358:	f04f 32ff 	mov.w	r2, #4294967295
   1935c:	4b76      	ldr	r3, [pc, #472]	; (19538 <_vfprintf_r+0x9f0>)
   1935e:	f7f9 fefb 	bl	13158 <__aeabi_dcmple>
   19362:	2800      	cmp	r0, #0
   19364:	f040 8398 	bne.w	19a98 <_vfprintf_r+0xf50>
   19368:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1936a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1936c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1936e:	9912      	ldr	r1, [sp, #72]	; 0x48
   19370:	f7f9 fee8 	bl	13144 <__aeabi_dcmplt>
   19374:	2800      	cmp	r0, #0
   19376:	f040 8435 	bne.w	19be4 <_vfprintf_r+0x109c>
   1937a:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
   1937e:	4f6f      	ldr	r7, [pc, #444]	; (1953c <_vfprintf_r+0x9f4>)
   19380:	4b6f      	ldr	r3, [pc, #444]	; (19540 <_vfprintf_r+0x9f8>)
   19382:	2203      	movs	r2, #3
   19384:	2100      	movs	r1, #0
   19386:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   1938a:	9207      	str	r2, [sp, #28]
   1938c:	9109      	str	r1, [sp, #36]	; 0x24
   1938e:	9006      	str	r0, [sp, #24]
   19390:	2e47      	cmp	r6, #71	; 0x47
   19392:	bfd8      	it	le
   19394:	461f      	movle	r7, r3
   19396:	920d      	str	r2, [sp, #52]	; 0x34
   19398:	9110      	str	r1, [sp, #64]	; 0x40
   1939a:	e507      	b.n	18dac <_vfprintf_r+0x264>
   1939c:	f04b 0b08 	orr.w	fp, fp, #8
   193a0:	f899 6000 	ldrb.w	r6, [r9]
   193a4:	e44f      	b.n	18c46 <_vfprintf_r+0xfe>
   193a6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   193a8:	3507      	adds	r5, #7
   193aa:	f025 0307 	bic.w	r3, r5, #7
   193ae:	f103 0208 	add.w	r2, r3, #8
   193b2:	e9d3 4500 	ldrd	r4, r5, [r3]
   193b6:	920e      	str	r2, [sp, #56]	; 0x38
   193b8:	2300      	movs	r3, #0
   193ba:	e4d1      	b.n	18d60 <_vfprintf_r+0x218>
   193bc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   193be:	3507      	adds	r5, #7
   193c0:	f025 0307 	bic.w	r3, r5, #7
   193c4:	f103 0208 	add.w	r2, r3, #8
   193c8:	e9d3 4500 	ldrd	r4, r5, [r3]
   193cc:	920e      	str	r2, [sp, #56]	; 0x38
   193ce:	2301      	movs	r3, #1
   193d0:	e4c6      	b.n	18d60 <_vfprintf_r+0x218>
   193d2:	2a00      	cmp	r2, #0
   193d4:	f040 8650 	bne.w	1a078 <_vfprintf_r+0x1530>
   193d8:	b1c6      	cbz	r6, 1940c <_vfprintf_r+0x8c4>
   193da:	2300      	movs	r3, #0
   193dc:	2201      	movs	r2, #1
   193de:	469a      	mov	sl, r3
   193e0:	9207      	str	r2, [sp, #28]
   193e2:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
   193e6:	f8cd b018 	str.w	fp, [sp, #24]
   193ea:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   193ee:	9309      	str	r3, [sp, #36]	; 0x24
   193f0:	9310      	str	r3, [sp, #64]	; 0x40
   193f2:	920d      	str	r2, [sp, #52]	; 0x34
   193f4:	af26      	add	r7, sp, #152	; 0x98
   193f6:	e4df      	b.n	18db8 <_vfprintf_r+0x270>
   193f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   193fa:	6813      	ldr	r3, [r2, #0]
   193fc:	3204      	adds	r2, #4
   193fe:	920e      	str	r2, [sp, #56]	; 0x38
   19400:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   19402:	601a      	str	r2, [r3, #0]
   19404:	f7ff bbec 	b.w	18be0 <_vfprintf_r+0x98>
   19408:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1940a:	e527      	b.n	18e5c <_vfprintf_r+0x314>
   1940c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1940e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   19412:	2b00      	cmp	r3, #0
   19414:	f040 8594 	bne.w	19f40 <_vfprintf_r+0x13f8>
   19418:	2300      	movs	r3, #0
   1941a:	9324      	str	r3, [sp, #144]	; 0x90
   1941c:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   19420:	f013 0f01 	tst.w	r3, #1
   19424:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   19428:	d102      	bne.n	19430 <_vfprintf_r+0x8e8>
   1942a:	059a      	lsls	r2, r3, #22
   1942c:	f140 8249 	bpl.w	198c2 <_vfprintf_r+0xd7a>
   19430:	065b      	lsls	r3, r3, #25
   19432:	f53f adec 	bmi.w	1900e <_vfprintf_r+0x4c6>
   19436:	980b      	ldr	r0, [sp, #44]	; 0x2c
   19438:	b041      	add	sp, #260	; 0x104
   1943a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1943e:	2e65      	cmp	r6, #101	; 0x65
   19440:	f340 80b2 	ble.w	195a8 <_vfprintf_r+0xa60>
   19444:	9a16      	ldr	r2, [sp, #88]	; 0x58
   19446:	9813      	ldr	r0, [sp, #76]	; 0x4c
   19448:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1944a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1944c:	f7f9 fe70 	bl	13130 <__aeabi_dcmpeq>
   19450:	2800      	cmp	r0, #0
   19452:	f000 8160 	beq.w	19716 <_vfprintf_r+0xbce>
   19456:	9b24      	ldr	r3, [sp, #144]	; 0x90
   19458:	4a3a      	ldr	r2, [pc, #232]	; (19544 <_vfprintf_r+0x9fc>)
   1945a:	f8c8 2000 	str.w	r2, [r8]
   1945e:	3301      	adds	r3, #1
   19460:	3401      	adds	r4, #1
   19462:	2201      	movs	r2, #1
   19464:	2b07      	cmp	r3, #7
   19466:	9425      	str	r4, [sp, #148]	; 0x94
   19468:	9324      	str	r3, [sp, #144]	; 0x90
   1946a:	f8c8 2004 	str.w	r2, [r8, #4]
   1946e:	f300 83bf 	bgt.w	19bf0 <_vfprintf_r+0x10a8>
   19472:	f108 0808 	add.w	r8, r8, #8
   19476:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   19478:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1947a:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1947c:	4293      	cmp	r3, r2
   1947e:	db03      	blt.n	19488 <_vfprintf_r+0x940>
   19480:	9b06      	ldr	r3, [sp, #24]
   19482:	07df      	lsls	r7, r3, #31
   19484:	f57f ad65 	bpl.w	18f52 <_vfprintf_r+0x40a>
   19488:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1948a:	9914      	ldr	r1, [sp, #80]	; 0x50
   1948c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1948e:	f8c8 2000 	str.w	r2, [r8]
   19492:	3301      	adds	r3, #1
   19494:	440c      	add	r4, r1
   19496:	2b07      	cmp	r3, #7
   19498:	f8c8 1004 	str.w	r1, [r8, #4]
   1949c:	9425      	str	r4, [sp, #148]	; 0x94
   1949e:	9324      	str	r3, [sp, #144]	; 0x90
   194a0:	f300 83f8 	bgt.w	19c94 <_vfprintf_r+0x114c>
   194a4:	f108 0808 	add.w	r8, r8, #8
   194a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   194aa:	1e5e      	subs	r6, r3, #1
   194ac:	2e00      	cmp	r6, #0
   194ae:	f77f ad50 	ble.w	18f52 <_vfprintf_r+0x40a>
   194b2:	2e10      	cmp	r6, #16
   194b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   194b6:	4d24      	ldr	r5, [pc, #144]	; (19548 <_vfprintf_r+0xa00>)
   194b8:	f340 81dd 	ble.w	19876 <_vfprintf_r+0xd2e>
   194bc:	2710      	movs	r7, #16
   194be:	f8dd a020 	ldr.w	sl, [sp, #32]
   194c2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   194c6:	e005      	b.n	194d4 <_vfprintf_r+0x98c>
   194c8:	f108 0808 	add.w	r8, r8, #8
   194cc:	3e10      	subs	r6, #16
   194ce:	2e10      	cmp	r6, #16
   194d0:	f340 81d1 	ble.w	19876 <_vfprintf_r+0xd2e>
   194d4:	3301      	adds	r3, #1
   194d6:	3410      	adds	r4, #16
   194d8:	2b07      	cmp	r3, #7
   194da:	9425      	str	r4, [sp, #148]	; 0x94
   194dc:	9324      	str	r3, [sp, #144]	; 0x90
   194de:	e888 00a0 	stmia.w	r8, {r5, r7}
   194e2:	ddf1      	ble.n	194c8 <_vfprintf_r+0x980>
   194e4:	aa23      	add	r2, sp, #140	; 0x8c
   194e6:	4659      	mov	r1, fp
   194e8:	4650      	mov	r0, sl
   194ea:	f7fe fc99 	bl	17e20 <__sprint_r>
   194ee:	2800      	cmp	r0, #0
   194f0:	f040 83cd 	bne.w	19c8e <_vfprintf_r+0x1146>
   194f4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   194f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   194f8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   194fc:	e7e6      	b.n	194cc <_vfprintf_r+0x984>
   194fe:	46aa      	mov	sl, r5
   19500:	e78c      	b.n	1941c <_vfprintf_r+0x8d4>
   19502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19504:	9a07      	ldr	r2, [sp, #28]
   19506:	eba3 0a02 	sub.w	sl, r3, r2
   1950a:	f1ba 0f00 	cmp.w	sl, #0
   1950e:	f77f acca 	ble.w	18ea6 <_vfprintf_r+0x35e>
   19512:	f1ba 0f10 	cmp.w	sl, #16
   19516:	9b24      	ldr	r3, [sp, #144]	; 0x90
   19518:	4d0b      	ldr	r5, [pc, #44]	; (19548 <_vfprintf_r+0xa00>)
   1951a:	dd39      	ble.n	19590 <_vfprintf_r+0xa48>
   1951c:	4642      	mov	r2, r8
   1951e:	4621      	mov	r1, r4
   19520:	46b0      	mov	r8, r6
   19522:	f04f 0b10 	mov.w	fp, #16
   19526:	462e      	mov	r6, r5
   19528:	9c08      	ldr	r4, [sp, #32]
   1952a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1952c:	e015      	b.n	1955a <_vfprintf_r+0xa12>
   1952e:	bf00      	nop
   19530:	000250b4 	.word	0x000250b4
   19534:	000250a0 	.word	0x000250a0
   19538:	7fefffff 	.word	0x7fefffff
   1953c:	00025094 	.word	0x00025094
   19540:	00025090 	.word	0x00025090
   19544:	00022038 	.word	0x00022038
   19548:	00025120 	.word	0x00025120
   1954c:	f1aa 0a10 	sub.w	sl, sl, #16
   19550:	f1ba 0f10 	cmp.w	sl, #16
   19554:	f102 0208 	add.w	r2, r2, #8
   19558:	dd16      	ble.n	19588 <_vfprintf_r+0xa40>
   1955a:	3301      	adds	r3, #1
   1955c:	3110      	adds	r1, #16
   1955e:	2b07      	cmp	r3, #7
   19560:	9125      	str	r1, [sp, #148]	; 0x94
   19562:	9324      	str	r3, [sp, #144]	; 0x90
   19564:	e882 0840 	stmia.w	r2, {r6, fp}
   19568:	ddf0      	ble.n	1954c <_vfprintf_r+0xa04>
   1956a:	aa23      	add	r2, sp, #140	; 0x8c
   1956c:	4629      	mov	r1, r5
   1956e:	4620      	mov	r0, r4
   19570:	f7fe fc56 	bl	17e20 <__sprint_r>
   19574:	2800      	cmp	r0, #0
   19576:	d1c2      	bne.n	194fe <_vfprintf_r+0x9b6>
   19578:	f1aa 0a10 	sub.w	sl, sl, #16
   1957c:	f1ba 0f10 	cmp.w	sl, #16
   19580:	9925      	ldr	r1, [sp, #148]	; 0x94
   19582:	9b24      	ldr	r3, [sp, #144]	; 0x90
   19584:	aa30      	add	r2, sp, #192	; 0xc0
   19586:	dce8      	bgt.n	1955a <_vfprintf_r+0xa12>
   19588:	4635      	mov	r5, r6
   1958a:	460c      	mov	r4, r1
   1958c:	4646      	mov	r6, r8
   1958e:	4690      	mov	r8, r2
   19590:	3301      	adds	r3, #1
   19592:	4454      	add	r4, sl
   19594:	2b07      	cmp	r3, #7
   19596:	9425      	str	r4, [sp, #148]	; 0x94
   19598:	9324      	str	r3, [sp, #144]	; 0x90
   1959a:	e888 0420 	stmia.w	r8, {r5, sl}
   1959e:	f300 8264 	bgt.w	19a6a <_vfprintf_r+0xf22>
   195a2:	f108 0808 	add.w	r8, r8, #8
   195a6:	e47e      	b.n	18ea6 <_vfprintf_r+0x35e>
   195a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   195aa:	9e24      	ldr	r6, [sp, #144]	; 0x90
   195ac:	2b01      	cmp	r3, #1
   195ae:	f340 81fd 	ble.w	199ac <_vfprintf_r+0xe64>
   195b2:	3601      	adds	r6, #1
   195b4:	3401      	adds	r4, #1
   195b6:	2301      	movs	r3, #1
   195b8:	2e07      	cmp	r6, #7
   195ba:	9425      	str	r4, [sp, #148]	; 0x94
   195bc:	9624      	str	r6, [sp, #144]	; 0x90
   195be:	f8c8 7000 	str.w	r7, [r8]
   195c2:	f8c8 3004 	str.w	r3, [r8, #4]
   195c6:	f300 820e 	bgt.w	199e6 <_vfprintf_r+0xe9e>
   195ca:	f108 0808 	add.w	r8, r8, #8
   195ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
   195d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   195d2:	f8c8 3000 	str.w	r3, [r8]
   195d6:	3601      	adds	r6, #1
   195d8:	4414      	add	r4, r2
   195da:	2e07      	cmp	r6, #7
   195dc:	9425      	str	r4, [sp, #148]	; 0x94
   195de:	9624      	str	r6, [sp, #144]	; 0x90
   195e0:	f8c8 2004 	str.w	r2, [r8, #4]
   195e4:	f300 822e 	bgt.w	19a44 <_vfprintf_r+0xefc>
   195e8:	f108 0808 	add.w	r8, r8, #8
   195ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   195ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
   195f0:	9813      	ldr	r0, [sp, #76]	; 0x4c
   195f2:	9912      	ldr	r1, [sp, #72]	; 0x48
   195f4:	f7f9 fd9c 	bl	13130 <__aeabi_dcmpeq>
   195f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   195fa:	2800      	cmp	r0, #0
   195fc:	f040 8106 	bne.w	1980c <_vfprintf_r+0xcc4>
   19600:	3b01      	subs	r3, #1
   19602:	3601      	adds	r6, #1
   19604:	3701      	adds	r7, #1
   19606:	441c      	add	r4, r3
   19608:	2e07      	cmp	r6, #7
   1960a:	9624      	str	r6, [sp, #144]	; 0x90
   1960c:	9425      	str	r4, [sp, #148]	; 0x94
   1960e:	f8c8 7000 	str.w	r7, [r8]
   19612:	f8c8 3004 	str.w	r3, [r8, #4]
   19616:	f300 81d9 	bgt.w	199cc <_vfprintf_r+0xe84>
   1961a:	f108 0808 	add.w	r8, r8, #8
   1961e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   19620:	f8c8 2004 	str.w	r2, [r8, #4]
   19624:	3601      	adds	r6, #1
   19626:	4414      	add	r4, r2
   19628:	ab1f      	add	r3, sp, #124	; 0x7c
   1962a:	2e07      	cmp	r6, #7
   1962c:	9425      	str	r4, [sp, #148]	; 0x94
   1962e:	9624      	str	r6, [sp, #144]	; 0x90
   19630:	f8c8 3000 	str.w	r3, [r8]
   19634:	f77f ac8b 	ble.w	18f4e <_vfprintf_r+0x406>
   19638:	aa23      	add	r2, sp, #140	; 0x8c
   1963a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1963c:	9808      	ldr	r0, [sp, #32]
   1963e:	f7fe fbef 	bl	17e20 <__sprint_r>
   19642:	b958      	cbnz	r0, 1965c <_vfprintf_r+0xb14>
   19644:	9c25      	ldr	r4, [sp, #148]	; 0x94
   19646:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1964a:	e482      	b.n	18f52 <_vfprintf_r+0x40a>
   1964c:	aa23      	add	r2, sp, #140	; 0x8c
   1964e:	990a      	ldr	r1, [sp, #40]	; 0x28
   19650:	9808      	ldr	r0, [sp, #32]
   19652:	f7fe fbe5 	bl	17e20 <__sprint_r>
   19656:	2800      	cmp	r0, #0
   19658:	f43f acc5 	beq.w	18fe6 <_vfprintf_r+0x49e>
   1965c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   19660:	e6dc      	b.n	1941c <_vfprintf_r+0x8d4>
   19662:	f8dd b018 	ldr.w	fp, [sp, #24]
   19666:	2b01      	cmp	r3, #1
   19668:	f000 8121 	beq.w	198ae <_vfprintf_r+0xd66>
   1966c:	2b02      	cmp	r3, #2
   1966e:	d127      	bne.n	196c0 <_vfprintf_r+0xb78>
   19670:	f8cd b018 	str.w	fp, [sp, #24]
   19674:	2400      	movs	r4, #0
   19676:	2500      	movs	r5, #0
   19678:	e591      	b.n	1919e <_vfprintf_r+0x656>
   1967a:	aa23      	add	r2, sp, #140	; 0x8c
   1967c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1967e:	9808      	ldr	r0, [sp, #32]
   19680:	f7fe fbce 	bl	17e20 <__sprint_r>
   19684:	2800      	cmp	r0, #0
   19686:	d1e9      	bne.n	1965c <_vfprintf_r+0xb14>
   19688:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1968a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1968e:	e44d      	b.n	18f2c <_vfprintf_r+0x3e4>
   19690:	aa23      	add	r2, sp, #140	; 0x8c
   19692:	990a      	ldr	r1, [sp, #40]	; 0x28
   19694:	9808      	ldr	r0, [sp, #32]
   19696:	f7fe fbc3 	bl	17e20 <__sprint_r>
   1969a:	2800      	cmp	r0, #0
   1969c:	d1de      	bne.n	1965c <_vfprintf_r+0xb14>
   1969e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   196a0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   196a4:	f7ff bbec 	b.w	18e80 <_vfprintf_r+0x338>
   196a8:	aa23      	add	r2, sp, #140	; 0x8c
   196aa:	990a      	ldr	r1, [sp, #40]	; 0x28
   196ac:	9808      	ldr	r0, [sp, #32]
   196ae:	f7fe fbb7 	bl	17e20 <__sprint_r>
   196b2:	2800      	cmp	r0, #0
   196b4:	d1d2      	bne.n	1965c <_vfprintf_r+0xb14>
   196b6:	9c25      	ldr	r4, [sp, #148]	; 0x94
   196b8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   196bc:	f7ff bbf0 	b.w	18ea0 <_vfprintf_r+0x358>
   196c0:	f8cd b018 	str.w	fp, [sp, #24]
   196c4:	2400      	movs	r4, #0
   196c6:	2500      	movs	r5, #0
   196c8:	a930      	add	r1, sp, #192	; 0xc0
   196ca:	e000      	b.n	196ce <_vfprintf_r+0xb86>
   196cc:	4639      	mov	r1, r7
   196ce:	08e2      	lsrs	r2, r4, #3
   196d0:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   196d4:	08e8      	lsrs	r0, r5, #3
   196d6:	f004 0307 	and.w	r3, r4, #7
   196da:	4605      	mov	r5, r0
   196dc:	4614      	mov	r4, r2
   196de:	3330      	adds	r3, #48	; 0x30
   196e0:	ea54 0205 	orrs.w	r2, r4, r5
   196e4:	f801 3c01 	strb.w	r3, [r1, #-1]
   196e8:	f101 37ff 	add.w	r7, r1, #4294967295
   196ec:	d1ee      	bne.n	196cc <_vfprintf_r+0xb84>
   196ee:	9a06      	ldr	r2, [sp, #24]
   196f0:	07d2      	lsls	r2, r2, #31
   196f2:	f57f ad64 	bpl.w	191be <_vfprintf_r+0x676>
   196f6:	2b30      	cmp	r3, #48	; 0x30
   196f8:	f43f ad61 	beq.w	191be <_vfprintf_r+0x676>
   196fc:	2330      	movs	r3, #48	; 0x30
   196fe:	3902      	subs	r1, #2
   19700:	f807 3c01 	strb.w	r3, [r7, #-1]
   19704:	ab30      	add	r3, sp, #192	; 0xc0
   19706:	1a5b      	subs	r3, r3, r1
   19708:	930d      	str	r3, [sp, #52]	; 0x34
   1970a:	460f      	mov	r7, r1
   1970c:	f7ff bb46 	b.w	18d9c <_vfprintf_r+0x254>
   19710:	2302      	movs	r3, #2
   19712:	f7ff bb25 	b.w	18d60 <_vfprintf_r+0x218>
   19716:	991d      	ldr	r1, [sp, #116]	; 0x74
   19718:	2900      	cmp	r1, #0
   1971a:	f340 8274 	ble.w	19c06 <_vfprintf_r+0x10be>
   1971e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19720:	9a11      	ldr	r2, [sp, #68]	; 0x44
   19722:	4293      	cmp	r3, r2
   19724:	bfa8      	it	ge
   19726:	4613      	movge	r3, r2
   19728:	2b00      	cmp	r3, #0
   1972a:	461e      	mov	r6, r3
   1972c:	dd0d      	ble.n	1974a <_vfprintf_r+0xc02>
   1972e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   19730:	f8c8 7000 	str.w	r7, [r8]
   19734:	3301      	adds	r3, #1
   19736:	4434      	add	r4, r6
   19738:	2b07      	cmp	r3, #7
   1973a:	9425      	str	r4, [sp, #148]	; 0x94
   1973c:	f8c8 6004 	str.w	r6, [r8, #4]
   19740:	9324      	str	r3, [sp, #144]	; 0x90
   19742:	f300 8324 	bgt.w	19d8e <_vfprintf_r+0x1246>
   19746:	f108 0808 	add.w	r8, r8, #8
   1974a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1974c:	2e00      	cmp	r6, #0
   1974e:	bfa8      	it	ge
   19750:	1b9b      	subge	r3, r3, r6
   19752:	2b00      	cmp	r3, #0
   19754:	461e      	mov	r6, r3
   19756:	f340 80d0 	ble.w	198fa <_vfprintf_r+0xdb2>
   1975a:	2e10      	cmp	r6, #16
   1975c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1975e:	4dc0      	ldr	r5, [pc, #768]	; (19a60 <_vfprintf_r+0xf18>)
   19760:	f340 80b7 	ble.w	198d2 <_vfprintf_r+0xd8a>
   19764:	4622      	mov	r2, r4
   19766:	f04f 0a10 	mov.w	sl, #16
   1976a:	f8dd b020 	ldr.w	fp, [sp, #32]
   1976e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   19770:	e005      	b.n	1977e <_vfprintf_r+0xc36>
   19772:	f108 0808 	add.w	r8, r8, #8
   19776:	3e10      	subs	r6, #16
   19778:	2e10      	cmp	r6, #16
   1977a:	f340 80a9 	ble.w	198d0 <_vfprintf_r+0xd88>
   1977e:	3301      	adds	r3, #1
   19780:	3210      	adds	r2, #16
   19782:	2b07      	cmp	r3, #7
   19784:	9225      	str	r2, [sp, #148]	; 0x94
   19786:	9324      	str	r3, [sp, #144]	; 0x90
   19788:	e888 0420 	stmia.w	r8, {r5, sl}
   1978c:	ddf1      	ble.n	19772 <_vfprintf_r+0xc2a>
   1978e:	aa23      	add	r2, sp, #140	; 0x8c
   19790:	4621      	mov	r1, r4
   19792:	4658      	mov	r0, fp
   19794:	f7fe fb44 	bl	17e20 <__sprint_r>
   19798:	2800      	cmp	r0, #0
   1979a:	f040 8324 	bne.w	19de6 <_vfprintf_r+0x129e>
   1979e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   197a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   197a2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   197a6:	e7e6      	b.n	19776 <_vfprintf_r+0xc2e>
   197a8:	2d00      	cmp	r5, #0
   197aa:	bf08      	it	eq
   197ac:	2c0a      	cmpeq	r4, #10
   197ae:	d37c      	bcc.n	198aa <_vfprintf_r+0xd62>
   197b0:	af30      	add	r7, sp, #192	; 0xc0
   197b2:	4620      	mov	r0, r4
   197b4:	4629      	mov	r1, r5
   197b6:	220a      	movs	r2, #10
   197b8:	2300      	movs	r3, #0
   197ba:	f7fa f87d 	bl	138b8 <__aeabi_uldivmod>
   197be:	3230      	adds	r2, #48	; 0x30
   197c0:	f807 2d01 	strb.w	r2, [r7, #-1]!
   197c4:	4620      	mov	r0, r4
   197c6:	4629      	mov	r1, r5
   197c8:	2300      	movs	r3, #0
   197ca:	220a      	movs	r2, #10
   197cc:	f7fa f874 	bl	138b8 <__aeabi_uldivmod>
   197d0:	4604      	mov	r4, r0
   197d2:	460d      	mov	r5, r1
   197d4:	ea54 0305 	orrs.w	r3, r4, r5
   197d8:	d1eb      	bne.n	197b2 <_vfprintf_r+0xc6a>
   197da:	ab30      	add	r3, sp, #192	; 0xc0
   197dc:	1bdb      	subs	r3, r3, r7
   197de:	930d      	str	r3, [sp, #52]	; 0x34
   197e0:	f7ff badc 	b.w	18d9c <_vfprintf_r+0x254>
   197e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   197e6:	930d      	str	r3, [sp, #52]	; 0x34
   197e8:	af30      	add	r7, sp, #192	; 0xc0
   197ea:	f7ff bad7 	b.w	18d9c <_vfprintf_r+0x254>
   197ee:	aa23      	add	r2, sp, #140	; 0x8c
   197f0:	990a      	ldr	r1, [sp, #40]	; 0x28
   197f2:	9808      	ldr	r0, [sp, #32]
   197f4:	f7fe fb14 	bl	17e20 <__sprint_r>
   197f8:	2800      	cmp	r0, #0
   197fa:	f47f af2f 	bne.w	1965c <_vfprintf_r+0xb14>
   197fe:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
   19802:	9c25      	ldr	r4, [sp, #148]	; 0x94
   19804:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   19808:	f7ff bb28 	b.w	18e5c <_vfprintf_r+0x314>
   1980c:	1e5f      	subs	r7, r3, #1
   1980e:	2f00      	cmp	r7, #0
   19810:	f77f af05 	ble.w	1961e <_vfprintf_r+0xad6>
   19814:	2f10      	cmp	r7, #16
   19816:	4d92      	ldr	r5, [pc, #584]	; (19a60 <_vfprintf_r+0xf18>)
   19818:	f340 810a 	ble.w	19a30 <_vfprintf_r+0xee8>
   1981c:	f04f 0a10 	mov.w	sl, #16
   19820:	f8dd b020 	ldr.w	fp, [sp, #32]
   19824:	e005      	b.n	19832 <_vfprintf_r+0xcea>
   19826:	f108 0808 	add.w	r8, r8, #8
   1982a:	3f10      	subs	r7, #16
   1982c:	2f10      	cmp	r7, #16
   1982e:	f340 80ff 	ble.w	19a30 <_vfprintf_r+0xee8>
   19832:	3601      	adds	r6, #1
   19834:	3410      	adds	r4, #16
   19836:	2e07      	cmp	r6, #7
   19838:	9425      	str	r4, [sp, #148]	; 0x94
   1983a:	9624      	str	r6, [sp, #144]	; 0x90
   1983c:	e888 0420 	stmia.w	r8, {r5, sl}
   19840:	ddf1      	ble.n	19826 <_vfprintf_r+0xcde>
   19842:	aa23      	add	r2, sp, #140	; 0x8c
   19844:	990a      	ldr	r1, [sp, #40]	; 0x28
   19846:	4658      	mov	r0, fp
   19848:	f7fe faea 	bl	17e20 <__sprint_r>
   1984c:	2800      	cmp	r0, #0
   1984e:	f47f af05 	bne.w	1965c <_vfprintf_r+0xb14>
   19852:	9c25      	ldr	r4, [sp, #148]	; 0x94
   19854:	9e24      	ldr	r6, [sp, #144]	; 0x90
   19856:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1985a:	e7e6      	b.n	1982a <_vfprintf_r+0xce2>
   1985c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1985e:	460a      	mov	r2, r1
   19860:	3204      	adds	r2, #4
   19862:	680c      	ldr	r4, [r1, #0]
   19864:	920e      	str	r2, [sp, #56]	; 0x38
   19866:	2500      	movs	r5, #0
   19868:	f7ff ba7a 	b.w	18d60 <_vfprintf_r+0x218>
   1986c:	681c      	ldr	r4, [r3, #0]
   1986e:	3304      	adds	r3, #4
   19870:	930e      	str	r3, [sp, #56]	; 0x38
   19872:	2500      	movs	r5, #0
   19874:	e426      	b.n	190c4 <_vfprintf_r+0x57c>
   19876:	3301      	adds	r3, #1
   19878:	4434      	add	r4, r6
   1987a:	2b07      	cmp	r3, #7
   1987c:	9425      	str	r4, [sp, #148]	; 0x94
   1987e:	9324      	str	r3, [sp, #144]	; 0x90
   19880:	e888 0060 	stmia.w	r8, {r5, r6}
   19884:	f77f ab63 	ble.w	18f4e <_vfprintf_r+0x406>
   19888:	e6d6      	b.n	19638 <_vfprintf_r+0xaf0>
   1988a:	3204      	adds	r2, #4
   1988c:	681c      	ldr	r4, [r3, #0]
   1988e:	920e      	str	r2, [sp, #56]	; 0x38
   19890:	2301      	movs	r3, #1
   19892:	2500      	movs	r5, #0
   19894:	f7ff ba64 	b.w	18d60 <_vfprintf_r+0x218>
   19898:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1989a:	6814      	ldr	r4, [r2, #0]
   1989c:	4613      	mov	r3, r2
   1989e:	3304      	adds	r3, #4
   198a0:	17e5      	asrs	r5, r4, #31
   198a2:	930e      	str	r3, [sp, #56]	; 0x38
   198a4:	4622      	mov	r2, r4
   198a6:	462b      	mov	r3, r5
   198a8:	e460      	b.n	1916c <_vfprintf_r+0x624>
   198aa:	f8dd b018 	ldr.w	fp, [sp, #24]
   198ae:	f8cd b018 	str.w	fp, [sp, #24]
   198b2:	af40      	add	r7, sp, #256	; 0x100
   198b4:	3430      	adds	r4, #48	; 0x30
   198b6:	2301      	movs	r3, #1
   198b8:	f807 4d41 	strb.w	r4, [r7, #-65]!
   198bc:	930d      	str	r3, [sp, #52]	; 0x34
   198be:	f7ff ba6d 	b.w	18d9c <_vfprintf_r+0x254>
   198c2:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   198c6:	f7fb fc25 	bl	15114 <__retarget_lock_release_recursive>
   198ca:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   198ce:	e5af      	b.n	19430 <_vfprintf_r+0x8e8>
   198d0:	4614      	mov	r4, r2
   198d2:	3301      	adds	r3, #1
   198d4:	4434      	add	r4, r6
   198d6:	2b07      	cmp	r3, #7
   198d8:	9425      	str	r4, [sp, #148]	; 0x94
   198da:	9324      	str	r3, [sp, #144]	; 0x90
   198dc:	e888 0060 	stmia.w	r8, {r5, r6}
   198e0:	f340 816d 	ble.w	19bbe <_vfprintf_r+0x1076>
   198e4:	aa23      	add	r2, sp, #140	; 0x8c
   198e6:	990a      	ldr	r1, [sp, #40]	; 0x28
   198e8:	9808      	ldr	r0, [sp, #32]
   198ea:	f7fe fa99 	bl	17e20 <__sprint_r>
   198ee:	2800      	cmp	r0, #0
   198f0:	f47f aeb4 	bne.w	1965c <_vfprintf_r+0xb14>
   198f4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   198f6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   198fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   198fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   198fe:	4293      	cmp	r3, r2
   19900:	f280 8158 	bge.w	19bb4 <_vfprintf_r+0x106c>
   19904:	9a24      	ldr	r2, [sp, #144]	; 0x90
   19906:	9814      	ldr	r0, [sp, #80]	; 0x50
   19908:	9915      	ldr	r1, [sp, #84]	; 0x54
   1990a:	f8c8 1000 	str.w	r1, [r8]
   1990e:	3201      	adds	r2, #1
   19910:	4404      	add	r4, r0
   19912:	2a07      	cmp	r2, #7
   19914:	9425      	str	r4, [sp, #148]	; 0x94
   19916:	f8c8 0004 	str.w	r0, [r8, #4]
   1991a:	9224      	str	r2, [sp, #144]	; 0x90
   1991c:	f300 8152 	bgt.w	19bc4 <_vfprintf_r+0x107c>
   19920:	f108 0808 	add.w	r8, r8, #8
   19924:	9a11      	ldr	r2, [sp, #68]	; 0x44
   19926:	9910      	ldr	r1, [sp, #64]	; 0x40
   19928:	1ad3      	subs	r3, r2, r3
   1992a:	1a56      	subs	r6, r2, r1
   1992c:	429e      	cmp	r6, r3
   1992e:	bfa8      	it	ge
   19930:	461e      	movge	r6, r3
   19932:	2e00      	cmp	r6, #0
   19934:	dd0e      	ble.n	19954 <_vfprintf_r+0xe0c>
   19936:	9a24      	ldr	r2, [sp, #144]	; 0x90
   19938:	f8c8 6004 	str.w	r6, [r8, #4]
   1993c:	3201      	adds	r2, #1
   1993e:	440f      	add	r7, r1
   19940:	4434      	add	r4, r6
   19942:	2a07      	cmp	r2, #7
   19944:	f8c8 7000 	str.w	r7, [r8]
   19948:	9425      	str	r4, [sp, #148]	; 0x94
   1994a:	9224      	str	r2, [sp, #144]	; 0x90
   1994c:	f300 823c 	bgt.w	19dc8 <_vfprintf_r+0x1280>
   19950:	f108 0808 	add.w	r8, r8, #8
   19954:	2e00      	cmp	r6, #0
   19956:	bfac      	ite	ge
   19958:	1b9e      	subge	r6, r3, r6
   1995a:	461e      	movlt	r6, r3
   1995c:	2e00      	cmp	r6, #0
   1995e:	f77f aaf8 	ble.w	18f52 <_vfprintf_r+0x40a>
   19962:	2e10      	cmp	r6, #16
   19964:	9b24      	ldr	r3, [sp, #144]	; 0x90
   19966:	4d3e      	ldr	r5, [pc, #248]	; (19a60 <_vfprintf_r+0xf18>)
   19968:	dd85      	ble.n	19876 <_vfprintf_r+0xd2e>
   1996a:	2710      	movs	r7, #16
   1996c:	f8dd a020 	ldr.w	sl, [sp, #32]
   19970:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   19974:	e005      	b.n	19982 <_vfprintf_r+0xe3a>
   19976:	f108 0808 	add.w	r8, r8, #8
   1997a:	3e10      	subs	r6, #16
   1997c:	2e10      	cmp	r6, #16
   1997e:	f77f af7a 	ble.w	19876 <_vfprintf_r+0xd2e>
   19982:	3301      	adds	r3, #1
   19984:	3410      	adds	r4, #16
   19986:	2b07      	cmp	r3, #7
   19988:	9425      	str	r4, [sp, #148]	; 0x94
   1998a:	9324      	str	r3, [sp, #144]	; 0x90
   1998c:	e888 00a0 	stmia.w	r8, {r5, r7}
   19990:	ddf1      	ble.n	19976 <_vfprintf_r+0xe2e>
   19992:	aa23      	add	r2, sp, #140	; 0x8c
   19994:	4659      	mov	r1, fp
   19996:	4650      	mov	r0, sl
   19998:	f7fe fa42 	bl	17e20 <__sprint_r>
   1999c:	2800      	cmp	r0, #0
   1999e:	f040 8176 	bne.w	19c8e <_vfprintf_r+0x1146>
   199a2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   199a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   199a6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   199aa:	e7e6      	b.n	1997a <_vfprintf_r+0xe32>
   199ac:	9b06      	ldr	r3, [sp, #24]
   199ae:	07d8      	lsls	r0, r3, #31
   199b0:	f53f adff 	bmi.w	195b2 <_vfprintf_r+0xa6a>
   199b4:	3601      	adds	r6, #1
   199b6:	3401      	adds	r4, #1
   199b8:	2301      	movs	r3, #1
   199ba:	2e07      	cmp	r6, #7
   199bc:	9425      	str	r4, [sp, #148]	; 0x94
   199be:	9624      	str	r6, [sp, #144]	; 0x90
   199c0:	f8c8 7000 	str.w	r7, [r8]
   199c4:	f8c8 3004 	str.w	r3, [r8, #4]
   199c8:	f77f ae27 	ble.w	1961a <_vfprintf_r+0xad2>
   199cc:	aa23      	add	r2, sp, #140	; 0x8c
   199ce:	990a      	ldr	r1, [sp, #40]	; 0x28
   199d0:	9808      	ldr	r0, [sp, #32]
   199d2:	f7fe fa25 	bl	17e20 <__sprint_r>
   199d6:	2800      	cmp	r0, #0
   199d8:	f47f ae40 	bne.w	1965c <_vfprintf_r+0xb14>
   199dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
   199de:	9e24      	ldr	r6, [sp, #144]	; 0x90
   199e0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   199e4:	e61b      	b.n	1961e <_vfprintf_r+0xad6>
   199e6:	aa23      	add	r2, sp, #140	; 0x8c
   199e8:	990a      	ldr	r1, [sp, #40]	; 0x28
   199ea:	9808      	ldr	r0, [sp, #32]
   199ec:	f7fe fa18 	bl	17e20 <__sprint_r>
   199f0:	2800      	cmp	r0, #0
   199f2:	f47f ae33 	bne.w	1965c <_vfprintf_r+0xb14>
   199f6:	9c25      	ldr	r4, [sp, #148]	; 0x94
   199f8:	9e24      	ldr	r6, [sp, #144]	; 0x90
   199fa:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   199fe:	e5e6      	b.n	195ce <_vfprintf_r+0xa86>
   19a00:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   19a02:	3507      	adds	r5, #7
   19a04:	f025 0507 	bic.w	r5, r5, #7
   19a08:	e9d5 2300 	ldrd	r2, r3, [r5]
   19a0c:	f105 0108 	add.w	r1, r5, #8
   19a10:	910e      	str	r1, [sp, #56]	; 0x38
   19a12:	4614      	mov	r4, r2
   19a14:	461d      	mov	r5, r3
   19a16:	f7ff bba9 	b.w	1916c <_vfprintf_r+0x624>
   19a1a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   19a1c:	3507      	adds	r5, #7
   19a1e:	f025 0307 	bic.w	r3, r5, #7
   19a22:	f103 0208 	add.w	r2, r3, #8
   19a26:	920e      	str	r2, [sp, #56]	; 0x38
   19a28:	e9d3 4500 	ldrd	r4, r5, [r3]
   19a2c:	f7ff bb4a 	b.w	190c4 <_vfprintf_r+0x57c>
   19a30:	3601      	adds	r6, #1
   19a32:	443c      	add	r4, r7
   19a34:	2e07      	cmp	r6, #7
   19a36:	9425      	str	r4, [sp, #148]	; 0x94
   19a38:	9624      	str	r6, [sp, #144]	; 0x90
   19a3a:	e888 00a0 	stmia.w	r8, {r5, r7}
   19a3e:	f77f adec 	ble.w	1961a <_vfprintf_r+0xad2>
   19a42:	e7c3      	b.n	199cc <_vfprintf_r+0xe84>
   19a44:	aa23      	add	r2, sp, #140	; 0x8c
   19a46:	990a      	ldr	r1, [sp, #40]	; 0x28
   19a48:	9808      	ldr	r0, [sp, #32]
   19a4a:	f7fe f9e9 	bl	17e20 <__sprint_r>
   19a4e:	2800      	cmp	r0, #0
   19a50:	f47f ae04 	bne.w	1965c <_vfprintf_r+0xb14>
   19a54:	9c25      	ldr	r4, [sp, #148]	; 0x94
   19a56:	9e24      	ldr	r6, [sp, #144]	; 0x90
   19a58:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   19a5c:	e5c6      	b.n	195ec <_vfprintf_r+0xaa4>
   19a5e:	bf00      	nop
   19a60:	00025120 	.word	0x00025120
   19a64:	af30      	add	r7, sp, #192	; 0xc0
   19a66:	f7ff b999 	b.w	18d9c <_vfprintf_r+0x254>
   19a6a:	aa23      	add	r2, sp, #140	; 0x8c
   19a6c:	990a      	ldr	r1, [sp, #40]	; 0x28
   19a6e:	9808      	ldr	r0, [sp, #32]
   19a70:	f7fe f9d6 	bl	17e20 <__sprint_r>
   19a74:	2800      	cmp	r0, #0
   19a76:	f47f adf1 	bne.w	1965c <_vfprintf_r+0xb14>
   19a7a:	9c25      	ldr	r4, [sp, #148]	; 0x94
   19a7c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   19a80:	f7ff ba11 	b.w	18ea6 <_vfprintf_r+0x35e>
   19a84:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   19a88:	4264      	negs	r4, r4
   19a8a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   19a8e:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
   19a92:	2301      	movs	r3, #1
   19a94:	f7ff b968 	b.w	18d68 <_vfprintf_r+0x220>
   19a98:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   19a9a:	4622      	mov	r2, r4
   19a9c:	4620      	mov	r0, r4
   19a9e:	9c12      	ldr	r4, [sp, #72]	; 0x48
   19aa0:	4623      	mov	r3, r4
   19aa2:	4621      	mov	r1, r4
   19aa4:	f002 fc0e 	bl	1c2c4 <__aeabi_dcmpun>
   19aa8:	2800      	cmp	r0, #0
   19aaa:	f040 828c 	bne.w	19fc6 <_vfprintf_r+0x147e>
   19aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19ab0:	3301      	adds	r3, #1
   19ab2:	f026 0320 	bic.w	r3, r6, #32
   19ab6:	930d      	str	r3, [sp, #52]	; 0x34
   19ab8:	f000 8091 	beq.w	19bde <_vfprintf_r+0x1096>
   19abc:	2b47      	cmp	r3, #71	; 0x47
   19abe:	d104      	bne.n	19aca <_vfprintf_r+0xf82>
   19ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19ac2:	2b00      	cmp	r3, #0
   19ac4:	bf08      	it	eq
   19ac6:	2301      	moveq	r3, #1
   19ac8:	9309      	str	r3, [sp, #36]	; 0x24
   19aca:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   19ace:	9306      	str	r3, [sp, #24]
   19ad0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19ad2:	f1b3 0a00 	subs.w	sl, r3, #0
   19ad6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19ad8:	9307      	str	r3, [sp, #28]
   19ada:	bfbb      	ittet	lt
   19adc:	4653      	movlt	r3, sl
   19ade:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
   19ae2:	2300      	movge	r3, #0
   19ae4:	232d      	movlt	r3, #45	; 0x2d
   19ae6:	2e66      	cmp	r6, #102	; 0x66
   19ae8:	930f      	str	r3, [sp, #60]	; 0x3c
   19aea:	f000 817f 	beq.w	19dec <_vfprintf_r+0x12a4>
   19aee:	2e46      	cmp	r6, #70	; 0x46
   19af0:	f000 81d4 	beq.w	19e9c <_vfprintf_r+0x1354>
   19af4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19af6:	9a07      	ldr	r2, [sp, #28]
   19af8:	2b45      	cmp	r3, #69	; 0x45
   19afa:	bf0c      	ite	eq
   19afc:	9b09      	ldreq	r3, [sp, #36]	; 0x24
   19afe:	9d09      	ldrne	r5, [sp, #36]	; 0x24
   19b00:	a821      	add	r0, sp, #132	; 0x84
   19b02:	a91e      	add	r1, sp, #120	; 0x78
   19b04:	bf08      	it	eq
   19b06:	1c5d      	addeq	r5, r3, #1
   19b08:	9004      	str	r0, [sp, #16]
   19b0a:	9103      	str	r1, [sp, #12]
   19b0c:	a81d      	add	r0, sp, #116	; 0x74
   19b0e:	2102      	movs	r1, #2
   19b10:	9002      	str	r0, [sp, #8]
   19b12:	4653      	mov	r3, sl
   19b14:	9501      	str	r5, [sp, #4]
   19b16:	9100      	str	r1, [sp, #0]
   19b18:	9808      	ldr	r0, [sp, #32]
   19b1a:	f000 fd25 	bl	1a568 <_dtoa_r>
   19b1e:	2e67      	cmp	r6, #103	; 0x67
   19b20:	4607      	mov	r7, r0
   19b22:	f040 81af 	bne.w	19e84 <_vfprintf_r+0x133c>
   19b26:	f01b 0f01 	tst.w	fp, #1
   19b2a:	f000 8213 	beq.w	19f54 <_vfprintf_r+0x140c>
   19b2e:	197c      	adds	r4, r7, r5
   19b30:	9a16      	ldr	r2, [sp, #88]	; 0x58
   19b32:	9807      	ldr	r0, [sp, #28]
   19b34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   19b36:	4651      	mov	r1, sl
   19b38:	f7f9 fafa 	bl	13130 <__aeabi_dcmpeq>
   19b3c:	2800      	cmp	r0, #0
   19b3e:	f040 8132 	bne.w	19da6 <_vfprintf_r+0x125e>
   19b42:	9b21      	ldr	r3, [sp, #132]	; 0x84
   19b44:	42a3      	cmp	r3, r4
   19b46:	d206      	bcs.n	19b56 <_vfprintf_r+0x100e>
   19b48:	2130      	movs	r1, #48	; 0x30
   19b4a:	1c5a      	adds	r2, r3, #1
   19b4c:	9221      	str	r2, [sp, #132]	; 0x84
   19b4e:	7019      	strb	r1, [r3, #0]
   19b50:	9b21      	ldr	r3, [sp, #132]	; 0x84
   19b52:	429c      	cmp	r4, r3
   19b54:	d8f9      	bhi.n	19b4a <_vfprintf_r+0x1002>
   19b56:	1bdb      	subs	r3, r3, r7
   19b58:	9311      	str	r3, [sp, #68]	; 0x44
   19b5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19b5c:	2b47      	cmp	r3, #71	; 0x47
   19b5e:	f000 80b9 	beq.w	19cd4 <_vfprintf_r+0x118c>
   19b62:	2e65      	cmp	r6, #101	; 0x65
   19b64:	f340 8276 	ble.w	1a054 <_vfprintf_r+0x150c>
   19b68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   19b6a:	9310      	str	r3, [sp, #64]	; 0x40
   19b6c:	2e66      	cmp	r6, #102	; 0x66
   19b6e:	f000 8162 	beq.w	19e36 <_vfprintf_r+0x12ee>
   19b72:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19b74:	9a10      	ldr	r2, [sp, #64]	; 0x40
   19b76:	4619      	mov	r1, r3
   19b78:	4291      	cmp	r1, r2
   19b7a:	f300 814f 	bgt.w	19e1c <_vfprintf_r+0x12d4>
   19b7e:	f01b 0f01 	tst.w	fp, #1
   19b82:	f040 8209 	bne.w	19f98 <_vfprintf_r+0x1450>
   19b86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   19b8a:	9307      	str	r3, [sp, #28]
   19b8c:	920d      	str	r2, [sp, #52]	; 0x34
   19b8e:	2667      	movs	r6, #103	; 0x67
   19b90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19b92:	2b00      	cmp	r3, #0
   19b94:	f040 8096 	bne.w	19cc4 <_vfprintf_r+0x117c>
   19b98:	9309      	str	r3, [sp, #36]	; 0x24
   19b9a:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
   19b9e:	f7ff b905 	b.w	18dac <_vfprintf_r+0x264>
   19ba2:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   19ba6:	f7fb fab5 	bl	15114 <__retarget_lock_release_recursive>
   19baa:	f04f 33ff 	mov.w	r3, #4294967295
   19bae:	930b      	str	r3, [sp, #44]	; 0x2c
   19bb0:	f7ff ba30 	b.w	19014 <_vfprintf_r+0x4cc>
   19bb4:	9a06      	ldr	r2, [sp, #24]
   19bb6:	07d5      	lsls	r5, r2, #31
   19bb8:	f57f aeb4 	bpl.w	19924 <_vfprintf_r+0xddc>
   19bbc:	e6a2      	b.n	19904 <_vfprintf_r+0xdbc>
   19bbe:	f108 0808 	add.w	r8, r8, #8
   19bc2:	e69a      	b.n	198fa <_vfprintf_r+0xdb2>
   19bc4:	aa23      	add	r2, sp, #140	; 0x8c
   19bc6:	990a      	ldr	r1, [sp, #40]	; 0x28
   19bc8:	9808      	ldr	r0, [sp, #32]
   19bca:	f7fe f929 	bl	17e20 <__sprint_r>
   19bce:	2800      	cmp	r0, #0
   19bd0:	f47f ad44 	bne.w	1965c <_vfprintf_r+0xb14>
   19bd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   19bd6:	9c25      	ldr	r4, [sp, #148]	; 0x94
   19bd8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   19bdc:	e6a2      	b.n	19924 <_vfprintf_r+0xddc>
   19bde:	2306      	movs	r3, #6
   19be0:	9309      	str	r3, [sp, #36]	; 0x24
   19be2:	e772      	b.n	19aca <_vfprintf_r+0xf82>
   19be4:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   19be8:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
   19bec:	f7ff bbc7 	b.w	1937e <_vfprintf_r+0x836>
   19bf0:	aa23      	add	r2, sp, #140	; 0x8c
   19bf2:	990a      	ldr	r1, [sp, #40]	; 0x28
   19bf4:	9808      	ldr	r0, [sp, #32]
   19bf6:	f7fe f913 	bl	17e20 <__sprint_r>
   19bfa:	2800      	cmp	r0, #0
   19bfc:	f47f ad2e 	bne.w	1965c <_vfprintf_r+0xb14>
   19c00:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   19c04:	e437      	b.n	19476 <_vfprintf_r+0x92e>
   19c06:	9b24      	ldr	r3, [sp, #144]	; 0x90
   19c08:	4ab4      	ldr	r2, [pc, #720]	; (19edc <_vfprintf_r+0x1394>)
   19c0a:	f8c8 2000 	str.w	r2, [r8]
   19c0e:	3301      	adds	r3, #1
   19c10:	3401      	adds	r4, #1
   19c12:	2201      	movs	r2, #1
   19c14:	2b07      	cmp	r3, #7
   19c16:	9425      	str	r4, [sp, #148]	; 0x94
   19c18:	9324      	str	r3, [sp, #144]	; 0x90
   19c1a:	f8c8 2004 	str.w	r2, [r8, #4]
   19c1e:	f300 8124 	bgt.w	19e6a <_vfprintf_r+0x1322>
   19c22:	f108 0808 	add.w	r8, r8, #8
   19c26:	b929      	cbnz	r1, 19c34 <_vfprintf_r+0x10ec>
   19c28:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19c2a:	b91b      	cbnz	r3, 19c34 <_vfprintf_r+0x10ec>
   19c2c:	9b06      	ldr	r3, [sp, #24]
   19c2e:	07de      	lsls	r6, r3, #31
   19c30:	f57f a98f 	bpl.w	18f52 <_vfprintf_r+0x40a>
   19c34:	9b24      	ldr	r3, [sp, #144]	; 0x90
   19c36:	9814      	ldr	r0, [sp, #80]	; 0x50
   19c38:	9a15      	ldr	r2, [sp, #84]	; 0x54
   19c3a:	f8c8 2000 	str.w	r2, [r8]
   19c3e:	3301      	adds	r3, #1
   19c40:	4602      	mov	r2, r0
   19c42:	4422      	add	r2, r4
   19c44:	2b07      	cmp	r3, #7
   19c46:	9225      	str	r2, [sp, #148]	; 0x94
   19c48:	f8c8 0004 	str.w	r0, [r8, #4]
   19c4c:	9324      	str	r3, [sp, #144]	; 0x90
   19c4e:	f300 8169 	bgt.w	19f24 <_vfprintf_r+0x13dc>
   19c52:	f108 0808 	add.w	r8, r8, #8
   19c56:	2900      	cmp	r1, #0
   19c58:	f2c0 8136 	blt.w	19ec8 <_vfprintf_r+0x1380>
   19c5c:	9911      	ldr	r1, [sp, #68]	; 0x44
   19c5e:	f8c8 7000 	str.w	r7, [r8]
   19c62:	3301      	adds	r3, #1
   19c64:	188c      	adds	r4, r1, r2
   19c66:	2b07      	cmp	r3, #7
   19c68:	9425      	str	r4, [sp, #148]	; 0x94
   19c6a:	9324      	str	r3, [sp, #144]	; 0x90
   19c6c:	f8c8 1004 	str.w	r1, [r8, #4]
   19c70:	f77f a96d 	ble.w	18f4e <_vfprintf_r+0x406>
   19c74:	e4e0      	b.n	19638 <_vfprintf_r+0xaf0>
   19c76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19c78:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19c7a:	6813      	ldr	r3, [r2, #0]
   19c7c:	17cd      	asrs	r5, r1, #31
   19c7e:	4608      	mov	r0, r1
   19c80:	3204      	adds	r2, #4
   19c82:	4629      	mov	r1, r5
   19c84:	920e      	str	r2, [sp, #56]	; 0x38
   19c86:	e9c3 0100 	strd	r0, r1, [r3]
   19c8a:	f7fe bfa9 	b.w	18be0 <_vfprintf_r+0x98>
   19c8e:	46da      	mov	sl, fp
   19c90:	f7ff bbc4 	b.w	1941c <_vfprintf_r+0x8d4>
   19c94:	aa23      	add	r2, sp, #140	; 0x8c
   19c96:	990a      	ldr	r1, [sp, #40]	; 0x28
   19c98:	9808      	ldr	r0, [sp, #32]
   19c9a:	f7fe f8c1 	bl	17e20 <__sprint_r>
   19c9e:	2800      	cmp	r0, #0
   19ca0:	f47f acdc 	bne.w	1965c <_vfprintf_r+0xb14>
   19ca4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   19ca6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   19caa:	f7ff bbfd 	b.w	194a8 <_vfprintf_r+0x960>
   19cae:	4638      	mov	r0, r7
   19cb0:	9409      	str	r4, [sp, #36]	; 0x24
   19cb2:	f7fc fd85 	bl	167c0 <strlen>
   19cb6:	950e      	str	r5, [sp, #56]	; 0x38
   19cb8:	900d      	str	r0, [sp, #52]	; 0x34
   19cba:	f8cd b018 	str.w	fp, [sp, #24]
   19cbe:	4603      	mov	r3, r0
   19cc0:	f7ff ba36 	b.w	19130 <_vfprintf_r+0x5e8>
   19cc4:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   19cc8:	2300      	movs	r3, #0
   19cca:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
   19cce:	9309      	str	r3, [sp, #36]	; 0x24
   19cd0:	f7ff b86f 	b.w	18db2 <_vfprintf_r+0x26a>
   19cd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   19cd6:	9310      	str	r3, [sp, #64]	; 0x40
   19cd8:	461a      	mov	r2, r3
   19cda:	3303      	adds	r3, #3
   19cdc:	db04      	blt.n	19ce8 <_vfprintf_r+0x11a0>
   19cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19ce0:	4619      	mov	r1, r3
   19ce2:	4291      	cmp	r1, r2
   19ce4:	f6bf af45 	bge.w	19b72 <_vfprintf_r+0x102a>
   19ce8:	3e02      	subs	r6, #2
   19cea:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19cec:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
   19cf0:	3b01      	subs	r3, #1
   19cf2:	2b00      	cmp	r3, #0
   19cf4:	931d      	str	r3, [sp, #116]	; 0x74
   19cf6:	bfbd      	ittte	lt
   19cf8:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   19cfa:	f1c3 0301 	rsblt	r3, r3, #1
   19cfe:	222d      	movlt	r2, #45	; 0x2d
   19d00:	222b      	movge	r2, #43	; 0x2b
   19d02:	2b09      	cmp	r3, #9
   19d04:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
   19d08:	f340 813e 	ble.w	19f88 <_vfprintf_r+0x1440>
   19d0c:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
   19d10:	4620      	mov	r0, r4
   19d12:	4d73      	ldr	r5, [pc, #460]	; (19ee0 <_vfprintf_r+0x1398>)
   19d14:	e000      	b.n	19d18 <_vfprintf_r+0x11d0>
   19d16:	4610      	mov	r0, r2
   19d18:	fb85 1203 	smull	r1, r2, r5, r3
   19d1c:	17d9      	asrs	r1, r3, #31
   19d1e:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   19d22:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   19d26:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   19d2a:	3230      	adds	r2, #48	; 0x30
   19d2c:	2909      	cmp	r1, #9
   19d2e:	f800 2c01 	strb.w	r2, [r0, #-1]
   19d32:	460b      	mov	r3, r1
   19d34:	f100 32ff 	add.w	r2, r0, #4294967295
   19d38:	dced      	bgt.n	19d16 <_vfprintf_r+0x11ce>
   19d3a:	3330      	adds	r3, #48	; 0x30
   19d3c:	3802      	subs	r0, #2
   19d3e:	b2d9      	uxtb	r1, r3
   19d40:	4284      	cmp	r4, r0
   19d42:	f802 1c01 	strb.w	r1, [r2, #-1]
   19d46:	f240 8190 	bls.w	1a06a <_vfprintf_r+0x1522>
   19d4a:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
   19d4e:	4613      	mov	r3, r2
   19d50:	e001      	b.n	19d56 <_vfprintf_r+0x120e>
   19d52:	f813 1b01 	ldrb.w	r1, [r3], #1
   19d56:	f800 1b01 	strb.w	r1, [r0], #1
   19d5a:	42a3      	cmp	r3, r4
   19d5c:	d1f9      	bne.n	19d52 <_vfprintf_r+0x120a>
   19d5e:	3301      	adds	r3, #1
   19d60:	1a9b      	subs	r3, r3, r2
   19d62:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
   19d66:	4413      	add	r3, r2
   19d68:	aa1f      	add	r2, sp, #124	; 0x7c
   19d6a:	1a9b      	subs	r3, r3, r2
   19d6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   19d6e:	9319      	str	r3, [sp, #100]	; 0x64
   19d70:	2a01      	cmp	r2, #1
   19d72:	4413      	add	r3, r2
   19d74:	930d      	str	r3, [sp, #52]	; 0x34
   19d76:	f340 8145 	ble.w	1a004 <_vfprintf_r+0x14bc>
   19d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19d7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   19d7e:	4413      	add	r3, r2
   19d80:	930d      	str	r3, [sp, #52]	; 0x34
   19d82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   19d86:	9307      	str	r3, [sp, #28]
   19d88:	2300      	movs	r3, #0
   19d8a:	9310      	str	r3, [sp, #64]	; 0x40
   19d8c:	e700      	b.n	19b90 <_vfprintf_r+0x1048>
   19d8e:	aa23      	add	r2, sp, #140	; 0x8c
   19d90:	990a      	ldr	r1, [sp, #40]	; 0x28
   19d92:	9808      	ldr	r0, [sp, #32]
   19d94:	f7fe f844 	bl	17e20 <__sprint_r>
   19d98:	2800      	cmp	r0, #0
   19d9a:	f47f ac5f 	bne.w	1965c <_vfprintf_r+0xb14>
   19d9e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   19da0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   19da4:	e4d1      	b.n	1974a <_vfprintf_r+0xc02>
   19da6:	4623      	mov	r3, r4
   19da8:	e6d5      	b.n	19b56 <_vfprintf_r+0x100e>
   19daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19dac:	9710      	str	r7, [sp, #64]	; 0x40
   19dae:	2b06      	cmp	r3, #6
   19db0:	bf28      	it	cs
   19db2:	2306      	movcs	r3, #6
   19db4:	9709      	str	r7, [sp, #36]	; 0x24
   19db6:	46ba      	mov	sl, r7
   19db8:	9307      	str	r3, [sp, #28]
   19dba:	950e      	str	r5, [sp, #56]	; 0x38
   19dbc:	f8cd b018 	str.w	fp, [sp, #24]
   19dc0:	930d      	str	r3, [sp, #52]	; 0x34
   19dc2:	4f48      	ldr	r7, [pc, #288]	; (19ee4 <_vfprintf_r+0x139c>)
   19dc4:	f7fe bff2 	b.w	18dac <_vfprintf_r+0x264>
   19dc8:	aa23      	add	r2, sp, #140	; 0x8c
   19dca:	990a      	ldr	r1, [sp, #40]	; 0x28
   19dcc:	9808      	ldr	r0, [sp, #32]
   19dce:	f7fe f827 	bl	17e20 <__sprint_r>
   19dd2:	2800      	cmp	r0, #0
   19dd4:	f47f ac42 	bne.w	1965c <_vfprintf_r+0xb14>
   19dd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   19dda:	9a11      	ldr	r2, [sp, #68]	; 0x44
   19ddc:	9c25      	ldr	r4, [sp, #148]	; 0x94
   19dde:	1ad3      	subs	r3, r2, r3
   19de0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   19de4:	e5b6      	b.n	19954 <_vfprintf_r+0xe0c>
   19de6:	46a2      	mov	sl, r4
   19de8:	f7ff bb18 	b.w	1941c <_vfprintf_r+0x8d4>
   19dec:	a821      	add	r0, sp, #132	; 0x84
   19dee:	a91e      	add	r1, sp, #120	; 0x78
   19df0:	9d09      	ldr	r5, [sp, #36]	; 0x24
   19df2:	9004      	str	r0, [sp, #16]
   19df4:	9103      	str	r1, [sp, #12]
   19df6:	a81d      	add	r0, sp, #116	; 0x74
   19df8:	2103      	movs	r1, #3
   19dfa:	9002      	str	r0, [sp, #8]
   19dfc:	9a07      	ldr	r2, [sp, #28]
   19dfe:	9501      	str	r5, [sp, #4]
   19e00:	4653      	mov	r3, sl
   19e02:	9100      	str	r1, [sp, #0]
   19e04:	9808      	ldr	r0, [sp, #32]
   19e06:	f000 fbaf 	bl	1a568 <_dtoa_r>
   19e0a:	4607      	mov	r7, r0
   19e0c:	1944      	adds	r4, r0, r5
   19e0e:	783b      	ldrb	r3, [r7, #0]
   19e10:	2b30      	cmp	r3, #48	; 0x30
   19e12:	f000 80ca 	beq.w	19faa <_vfprintf_r+0x1462>
   19e16:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   19e18:	442c      	add	r4, r5
   19e1a:	e689      	b.n	19b30 <_vfprintf_r+0xfe8>
   19e1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   19e1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19e20:	4413      	add	r3, r2
   19e22:	9a10      	ldr	r2, [sp, #64]	; 0x40
   19e24:	930d      	str	r3, [sp, #52]	; 0x34
   19e26:	2a00      	cmp	r2, #0
   19e28:	f340 80e4 	ble.w	19ff4 <_vfprintf_r+0x14ac>
   19e2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   19e30:	9307      	str	r3, [sp, #28]
   19e32:	2667      	movs	r6, #103	; 0x67
   19e34:	e6ac      	b.n	19b90 <_vfprintf_r+0x1048>
   19e36:	2b00      	cmp	r3, #0
   19e38:	f340 80fb 	ble.w	1a032 <_vfprintf_r+0x14ea>
   19e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19e3e:	2a00      	cmp	r2, #0
   19e40:	f040 80ce 	bne.w	19fe0 <_vfprintf_r+0x1498>
   19e44:	f01b 0f01 	tst.w	fp, #1
   19e48:	f040 80ca 	bne.w	19fe0 <_vfprintf_r+0x1498>
   19e4c:	9307      	str	r3, [sp, #28]
   19e4e:	930d      	str	r3, [sp, #52]	; 0x34
   19e50:	e69e      	b.n	19b90 <_vfprintf_r+0x1048>
   19e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19e54:	9307      	str	r3, [sp, #28]
   19e56:	930d      	str	r3, [sp, #52]	; 0x34
   19e58:	9009      	str	r0, [sp, #36]	; 0x24
   19e5a:	950e      	str	r5, [sp, #56]	; 0x38
   19e5c:	f8cd b018 	str.w	fp, [sp, #24]
   19e60:	9010      	str	r0, [sp, #64]	; 0x40
   19e62:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
   19e66:	f7fe bfa1 	b.w	18dac <_vfprintf_r+0x264>
   19e6a:	aa23      	add	r2, sp, #140	; 0x8c
   19e6c:	990a      	ldr	r1, [sp, #40]	; 0x28
   19e6e:	9808      	ldr	r0, [sp, #32]
   19e70:	f7fd ffd6 	bl	17e20 <__sprint_r>
   19e74:	2800      	cmp	r0, #0
   19e76:	f47f abf1 	bne.w	1965c <_vfprintf_r+0xb14>
   19e7a:	991d      	ldr	r1, [sp, #116]	; 0x74
   19e7c:	9c25      	ldr	r4, [sp, #148]	; 0x94
   19e7e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   19e82:	e6d0      	b.n	19c26 <_vfprintf_r+0x10de>
   19e84:	2e47      	cmp	r6, #71	; 0x47
   19e86:	f47f ae52 	bne.w	19b2e <_vfprintf_r+0xfe6>
   19e8a:	f01b 0f01 	tst.w	fp, #1
   19e8e:	f000 80da 	beq.w	1a046 <_vfprintf_r+0x14fe>
   19e92:	2e46      	cmp	r6, #70	; 0x46
   19e94:	eb07 0405 	add.w	r4, r7, r5
   19e98:	d0b9      	beq.n	19e0e <_vfprintf_r+0x12c6>
   19e9a:	e649      	b.n	19b30 <_vfprintf_r+0xfe8>
   19e9c:	a821      	add	r0, sp, #132	; 0x84
   19e9e:	a91e      	add	r1, sp, #120	; 0x78
   19ea0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   19ea2:	9004      	str	r0, [sp, #16]
   19ea4:	9103      	str	r1, [sp, #12]
   19ea6:	a81d      	add	r0, sp, #116	; 0x74
   19ea8:	2103      	movs	r1, #3
   19eaa:	9002      	str	r0, [sp, #8]
   19eac:	9a07      	ldr	r2, [sp, #28]
   19eae:	9401      	str	r4, [sp, #4]
   19eb0:	4653      	mov	r3, sl
   19eb2:	9100      	str	r1, [sp, #0]
   19eb4:	9808      	ldr	r0, [sp, #32]
   19eb6:	f000 fb57 	bl	1a568 <_dtoa_r>
   19eba:	4625      	mov	r5, r4
   19ebc:	4607      	mov	r7, r0
   19ebe:	e7e8      	b.n	19e92 <_vfprintf_r+0x134a>
   19ec0:	2300      	movs	r3, #0
   19ec2:	9309      	str	r3, [sp, #36]	; 0x24
   19ec4:	f7fe bec1 	b.w	18c4a <_vfprintf_r+0x102>
   19ec8:	424e      	negs	r6, r1
   19eca:	3110      	adds	r1, #16
   19ecc:	4d06      	ldr	r5, [pc, #24]	; (19ee8 <_vfprintf_r+0x13a0>)
   19ece:	da43      	bge.n	19f58 <_vfprintf_r+0x1410>
   19ed0:	2410      	movs	r4, #16
   19ed2:	f8dd a020 	ldr.w	sl, [sp, #32]
   19ed6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   19eda:	e00c      	b.n	19ef6 <_vfprintf_r+0x13ae>
   19edc:	00022038 	.word	0x00022038
   19ee0:	66666667 	.word	0x66666667
   19ee4:	000250c8 	.word	0x000250c8
   19ee8:	00025120 	.word	0x00025120
   19eec:	f108 0808 	add.w	r8, r8, #8
   19ef0:	3e10      	subs	r6, #16
   19ef2:	2e10      	cmp	r6, #16
   19ef4:	dd30      	ble.n	19f58 <_vfprintf_r+0x1410>
   19ef6:	3301      	adds	r3, #1
   19ef8:	3210      	adds	r2, #16
   19efa:	2b07      	cmp	r3, #7
   19efc:	9225      	str	r2, [sp, #148]	; 0x94
   19efe:	9324      	str	r3, [sp, #144]	; 0x90
   19f00:	f8c8 5000 	str.w	r5, [r8]
   19f04:	f8c8 4004 	str.w	r4, [r8, #4]
   19f08:	ddf0      	ble.n	19eec <_vfprintf_r+0x13a4>
   19f0a:	aa23      	add	r2, sp, #140	; 0x8c
   19f0c:	4659      	mov	r1, fp
   19f0e:	4650      	mov	r0, sl
   19f10:	f7fd ff86 	bl	17e20 <__sprint_r>
   19f14:	2800      	cmp	r0, #0
   19f16:	f47f aeba 	bne.w	19c8e <_vfprintf_r+0x1146>
   19f1a:	9a25      	ldr	r2, [sp, #148]	; 0x94
   19f1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   19f1e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   19f22:	e7e5      	b.n	19ef0 <_vfprintf_r+0x13a8>
   19f24:	aa23      	add	r2, sp, #140	; 0x8c
   19f26:	990a      	ldr	r1, [sp, #40]	; 0x28
   19f28:	9808      	ldr	r0, [sp, #32]
   19f2a:	f7fd ff79 	bl	17e20 <__sprint_r>
   19f2e:	2800      	cmp	r0, #0
   19f30:	f47f ab94 	bne.w	1965c <_vfprintf_r+0xb14>
   19f34:	991d      	ldr	r1, [sp, #116]	; 0x74
   19f36:	9a25      	ldr	r2, [sp, #148]	; 0x94
   19f38:	9b24      	ldr	r3, [sp, #144]	; 0x90
   19f3a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   19f3e:	e68a      	b.n	19c56 <_vfprintf_r+0x110e>
   19f40:	9808      	ldr	r0, [sp, #32]
   19f42:	aa23      	add	r2, sp, #140	; 0x8c
   19f44:	4651      	mov	r1, sl
   19f46:	f7fd ff6b 	bl	17e20 <__sprint_r>
   19f4a:	2800      	cmp	r0, #0
   19f4c:	f43f aa64 	beq.w	19418 <_vfprintf_r+0x8d0>
   19f50:	f7ff ba64 	b.w	1941c <_vfprintf_r+0x8d4>
   19f54:	9b21      	ldr	r3, [sp, #132]	; 0x84
   19f56:	e5fe      	b.n	19b56 <_vfprintf_r+0x100e>
   19f58:	3301      	adds	r3, #1
   19f5a:	4432      	add	r2, r6
   19f5c:	2b07      	cmp	r3, #7
   19f5e:	e888 0060 	stmia.w	r8, {r5, r6}
   19f62:	9225      	str	r2, [sp, #148]	; 0x94
   19f64:	9324      	str	r3, [sp, #144]	; 0x90
   19f66:	f108 0808 	add.w	r8, r8, #8
   19f6a:	f77f ae77 	ble.w	19c5c <_vfprintf_r+0x1114>
   19f6e:	aa23      	add	r2, sp, #140	; 0x8c
   19f70:	990a      	ldr	r1, [sp, #40]	; 0x28
   19f72:	9808      	ldr	r0, [sp, #32]
   19f74:	f7fd ff54 	bl	17e20 <__sprint_r>
   19f78:	2800      	cmp	r0, #0
   19f7a:	f47f ab6f 	bne.w	1965c <_vfprintf_r+0xb14>
   19f7e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   19f80:	9b24      	ldr	r3, [sp, #144]	; 0x90
   19f82:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   19f86:	e669      	b.n	19c5c <_vfprintf_r+0x1114>
   19f88:	3330      	adds	r3, #48	; 0x30
   19f8a:	2230      	movs	r2, #48	; 0x30
   19f8c:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
   19f90:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
   19f94:	ab20      	add	r3, sp, #128	; 0x80
   19f96:	e6e7      	b.n	19d68 <_vfprintf_r+0x1220>
   19f98:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19f9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   19f9c:	4413      	add	r3, r2
   19f9e:	930d      	str	r3, [sp, #52]	; 0x34
   19fa0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   19fa4:	9307      	str	r3, [sp, #28]
   19fa6:	2667      	movs	r6, #103	; 0x67
   19fa8:	e5f2      	b.n	19b90 <_vfprintf_r+0x1048>
   19faa:	9a16      	ldr	r2, [sp, #88]	; 0x58
   19fac:	9807      	ldr	r0, [sp, #28]
   19fae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   19fb0:	4651      	mov	r1, sl
   19fb2:	f7f9 f8bd 	bl	13130 <__aeabi_dcmpeq>
   19fb6:	2800      	cmp	r0, #0
   19fb8:	f47f af2d 	bne.w	19e16 <_vfprintf_r+0x12ce>
   19fbc:	f1c5 0501 	rsb	r5, r5, #1
   19fc0:	951d      	str	r5, [sp, #116]	; 0x74
   19fc2:	442c      	add	r4, r5
   19fc4:	e5b4      	b.n	19b30 <_vfprintf_r+0xfe8>
   19fc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19fc8:	4f33      	ldr	r7, [pc, #204]	; (1a098 <_vfprintf_r+0x1550>)
   19fca:	2b00      	cmp	r3, #0
   19fcc:	bfb6      	itet	lt
   19fce:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
   19fd2:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
   19fd6:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
   19fda:	4b30      	ldr	r3, [pc, #192]	; (1a09c <_vfprintf_r+0x1554>)
   19fdc:	f7ff b9d1 	b.w	19382 <_vfprintf_r+0x83a>
   19fe0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19fe2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   19fe4:	4413      	add	r3, r2
   19fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19fe8:	441a      	add	r2, r3
   19fea:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   19fee:	920d      	str	r2, [sp, #52]	; 0x34
   19ff0:	9307      	str	r3, [sp, #28]
   19ff2:	e5cd      	b.n	19b90 <_vfprintf_r+0x1048>
   19ff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19ff6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   19ff8:	f1c3 0301 	rsb	r3, r3, #1
   19ffc:	441a      	add	r2, r3
   19ffe:	4613      	mov	r3, r2
   1a000:	920d      	str	r2, [sp, #52]	; 0x34
   1a002:	e713      	b.n	19e2c <_vfprintf_r+0x12e4>
   1a004:	f01b 0301 	ands.w	r3, fp, #1
   1a008:	9310      	str	r3, [sp, #64]	; 0x40
   1a00a:	f47f aeb6 	bne.w	19d7a <_vfprintf_r+0x1232>
   1a00e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a010:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1a014:	9307      	str	r3, [sp, #28]
   1a016:	e5bb      	b.n	19b90 <_vfprintf_r+0x1048>
   1a018:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1a01a:	f899 6001 	ldrb.w	r6, [r9, #1]
   1a01e:	6823      	ldr	r3, [r4, #0]
   1a020:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   1a024:	9309      	str	r3, [sp, #36]	; 0x24
   1a026:	4623      	mov	r3, r4
   1a028:	3304      	adds	r3, #4
   1a02a:	4681      	mov	r9, r0
   1a02c:	930e      	str	r3, [sp, #56]	; 0x38
   1a02e:	f7fe be0a 	b.w	18c46 <_vfprintf_r+0xfe>
   1a032:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a034:	b913      	cbnz	r3, 1a03c <_vfprintf_r+0x14f4>
   1a036:	f01b 0f01 	tst.w	fp, #1
   1a03a:	d002      	beq.n	1a042 <_vfprintf_r+0x14fa>
   1a03c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1a03e:	3301      	adds	r3, #1
   1a040:	e7d1      	b.n	19fe6 <_vfprintf_r+0x149e>
   1a042:	2301      	movs	r3, #1
   1a044:	e702      	b.n	19e4c <_vfprintf_r+0x1304>
   1a046:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1a048:	1bdb      	subs	r3, r3, r7
   1a04a:	9311      	str	r3, [sp, #68]	; 0x44
   1a04c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a04e:	2b47      	cmp	r3, #71	; 0x47
   1a050:	f43f ae40 	beq.w	19cd4 <_vfprintf_r+0x118c>
   1a054:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1a056:	9310      	str	r3, [sp, #64]	; 0x40
   1a058:	e647      	b.n	19cea <_vfprintf_r+0x11a2>
   1a05a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   1a05e:	f7ff b81d 	b.w	1909c <_vfprintf_r+0x554>
   1a062:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   1a066:	f7ff b918 	b.w	1929a <_vfprintf_r+0x752>
   1a06a:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
   1a06e:	e67b      	b.n	19d68 <_vfprintf_r+0x1220>
   1a070:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   1a074:	f7ff b866 	b.w	19144 <_vfprintf_r+0x5fc>
   1a078:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   1a07c:	f7ff b9ac 	b.w	193d8 <_vfprintf_r+0x890>
   1a080:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   1a084:	f7ff b934 	b.w	192f0 <_vfprintf_r+0x7a8>
   1a088:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   1a08c:	f7ff b8b0 	b.w	191f0 <_vfprintf_r+0x6a8>
   1a090:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   1a094:	f7ff b945 	b.w	19322 <_vfprintf_r+0x7da>
   1a098:	0002509c 	.word	0x0002509c
   1a09c:	00025098 	.word	0x00025098

0001a0a0 <__sbprintf>:
   1a0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a0a4:	460c      	mov	r4, r1
   1a0a6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   1a0aa:	8989      	ldrh	r1, [r1, #12]
   1a0ac:	6e66      	ldr	r6, [r4, #100]	; 0x64
   1a0ae:	89e5      	ldrh	r5, [r4, #14]
   1a0b0:	9619      	str	r6, [sp, #100]	; 0x64
   1a0b2:	f021 0102 	bic.w	r1, r1, #2
   1a0b6:	4606      	mov	r6, r0
   1a0b8:	69e0      	ldr	r0, [r4, #28]
   1a0ba:	f8ad 100c 	strh.w	r1, [sp, #12]
   1a0be:	4617      	mov	r7, r2
   1a0c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1a0c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1a0c6:	f8ad 500e 	strh.w	r5, [sp, #14]
   1a0ca:	4698      	mov	r8, r3
   1a0cc:	ad1a      	add	r5, sp, #104	; 0x68
   1a0ce:	2300      	movs	r3, #0
   1a0d0:	9007      	str	r0, [sp, #28]
   1a0d2:	a816      	add	r0, sp, #88	; 0x58
   1a0d4:	9209      	str	r2, [sp, #36]	; 0x24
   1a0d6:	9306      	str	r3, [sp, #24]
   1a0d8:	9500      	str	r5, [sp, #0]
   1a0da:	9504      	str	r5, [sp, #16]
   1a0dc:	9102      	str	r1, [sp, #8]
   1a0de:	9105      	str	r1, [sp, #20]
   1a0e0:	f7fb f812 	bl	15108 <__retarget_lock_init_recursive>
   1a0e4:	4643      	mov	r3, r8
   1a0e6:	463a      	mov	r2, r7
   1a0e8:	4669      	mov	r1, sp
   1a0ea:	4630      	mov	r0, r6
   1a0ec:	f7fe fd2c 	bl	18b48 <_vfprintf_r>
   1a0f0:	1e05      	subs	r5, r0, #0
   1a0f2:	db07      	blt.n	1a104 <__sbprintf+0x64>
   1a0f4:	4630      	mov	r0, r6
   1a0f6:	4669      	mov	r1, sp
   1a0f8:	f001 fa00 	bl	1b4fc <_fflush_r>
   1a0fc:	2800      	cmp	r0, #0
   1a0fe:	bf18      	it	ne
   1a100:	f04f 35ff 	movne.w	r5, #4294967295
   1a104:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1a108:	065b      	lsls	r3, r3, #25
   1a10a:	d503      	bpl.n	1a114 <__sbprintf+0x74>
   1a10c:	89a3      	ldrh	r3, [r4, #12]
   1a10e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a112:	81a3      	strh	r3, [r4, #12]
   1a114:	9816      	ldr	r0, [sp, #88]	; 0x58
   1a116:	f7fa fff9 	bl	1510c <__retarget_lock_close_recursive>
   1a11a:	4628      	mov	r0, r5
   1a11c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   1a120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a124 <__swbuf_r>:
   1a124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a126:	460d      	mov	r5, r1
   1a128:	4614      	mov	r4, r2
   1a12a:	4606      	mov	r6, r0
   1a12c:	b110      	cbz	r0, 1a134 <__swbuf_r+0x10>
   1a12e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1a130:	2b00      	cmp	r3, #0
   1a132:	d04b      	beq.n	1a1cc <__swbuf_r+0xa8>
   1a134:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1a138:	69a3      	ldr	r3, [r4, #24]
   1a13a:	60a3      	str	r3, [r4, #8]
   1a13c:	b291      	uxth	r1, r2
   1a13e:	0708      	lsls	r0, r1, #28
   1a140:	d539      	bpl.n	1a1b6 <__swbuf_r+0x92>
   1a142:	6923      	ldr	r3, [r4, #16]
   1a144:	2b00      	cmp	r3, #0
   1a146:	d036      	beq.n	1a1b6 <__swbuf_r+0x92>
   1a148:	b2ed      	uxtb	r5, r5
   1a14a:	0489      	lsls	r1, r1, #18
   1a14c:	462f      	mov	r7, r5
   1a14e:	d515      	bpl.n	1a17c <__swbuf_r+0x58>
   1a150:	6822      	ldr	r2, [r4, #0]
   1a152:	6961      	ldr	r1, [r4, #20]
   1a154:	1ad3      	subs	r3, r2, r3
   1a156:	428b      	cmp	r3, r1
   1a158:	da1c      	bge.n	1a194 <__swbuf_r+0x70>
   1a15a:	3301      	adds	r3, #1
   1a15c:	68a1      	ldr	r1, [r4, #8]
   1a15e:	1c50      	adds	r0, r2, #1
   1a160:	3901      	subs	r1, #1
   1a162:	60a1      	str	r1, [r4, #8]
   1a164:	6020      	str	r0, [r4, #0]
   1a166:	7015      	strb	r5, [r2, #0]
   1a168:	6962      	ldr	r2, [r4, #20]
   1a16a:	429a      	cmp	r2, r3
   1a16c:	d01a      	beq.n	1a1a4 <__swbuf_r+0x80>
   1a16e:	89a3      	ldrh	r3, [r4, #12]
   1a170:	07db      	lsls	r3, r3, #31
   1a172:	d501      	bpl.n	1a178 <__swbuf_r+0x54>
   1a174:	2d0a      	cmp	r5, #10
   1a176:	d015      	beq.n	1a1a4 <__swbuf_r+0x80>
   1a178:	4638      	mov	r0, r7
   1a17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a17c:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1a17e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1a182:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   1a186:	81a2      	strh	r2, [r4, #12]
   1a188:	6822      	ldr	r2, [r4, #0]
   1a18a:	6661      	str	r1, [r4, #100]	; 0x64
   1a18c:	6961      	ldr	r1, [r4, #20]
   1a18e:	1ad3      	subs	r3, r2, r3
   1a190:	428b      	cmp	r3, r1
   1a192:	dbe2      	blt.n	1a15a <__swbuf_r+0x36>
   1a194:	4621      	mov	r1, r4
   1a196:	4630      	mov	r0, r6
   1a198:	f001 f9b0 	bl	1b4fc <_fflush_r>
   1a19c:	b940      	cbnz	r0, 1a1b0 <__swbuf_r+0x8c>
   1a19e:	6822      	ldr	r2, [r4, #0]
   1a1a0:	2301      	movs	r3, #1
   1a1a2:	e7db      	b.n	1a15c <__swbuf_r+0x38>
   1a1a4:	4621      	mov	r1, r4
   1a1a6:	4630      	mov	r0, r6
   1a1a8:	f001 f9a8 	bl	1b4fc <_fflush_r>
   1a1ac:	2800      	cmp	r0, #0
   1a1ae:	d0e3      	beq.n	1a178 <__swbuf_r+0x54>
   1a1b0:	f04f 37ff 	mov.w	r7, #4294967295
   1a1b4:	e7e0      	b.n	1a178 <__swbuf_r+0x54>
   1a1b6:	4621      	mov	r1, r4
   1a1b8:	4630      	mov	r0, r6
   1a1ba:	f000 f859 	bl	1a270 <__swsetup_r>
   1a1be:	2800      	cmp	r0, #0
   1a1c0:	d1f6      	bne.n	1a1b0 <__swbuf_r+0x8c>
   1a1c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1a1c6:	6923      	ldr	r3, [r4, #16]
   1a1c8:	b291      	uxth	r1, r2
   1a1ca:	e7bd      	b.n	1a148 <__swbuf_r+0x24>
   1a1cc:	f001 f9ee 	bl	1b5ac <__sinit>
   1a1d0:	e7b0      	b.n	1a134 <__swbuf_r+0x10>
   1a1d2:	bf00      	nop

0001a1d4 <_wcrtomb_r>:
   1a1d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a1d6:	4606      	mov	r6, r0
   1a1d8:	b085      	sub	sp, #20
   1a1da:	461f      	mov	r7, r3
   1a1dc:	b189      	cbz	r1, 1a202 <_wcrtomb_r+0x2e>
   1a1de:	4c10      	ldr	r4, [pc, #64]	; (1a220 <_wcrtomb_r+0x4c>)
   1a1e0:	4d10      	ldr	r5, [pc, #64]	; (1a224 <_wcrtomb_r+0x50>)
   1a1e2:	6824      	ldr	r4, [r4, #0]
   1a1e4:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1a1e6:	2c00      	cmp	r4, #0
   1a1e8:	bf08      	it	eq
   1a1ea:	462c      	moveq	r4, r5
   1a1ec:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   1a1f0:	47a0      	blx	r4
   1a1f2:	1c43      	adds	r3, r0, #1
   1a1f4:	d103      	bne.n	1a1fe <_wcrtomb_r+0x2a>
   1a1f6:	2200      	movs	r2, #0
   1a1f8:	238a      	movs	r3, #138	; 0x8a
   1a1fa:	603a      	str	r2, [r7, #0]
   1a1fc:	6033      	str	r3, [r6, #0]
   1a1fe:	b005      	add	sp, #20
   1a200:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a202:	460c      	mov	r4, r1
   1a204:	4906      	ldr	r1, [pc, #24]	; (1a220 <_wcrtomb_r+0x4c>)
   1a206:	4a07      	ldr	r2, [pc, #28]	; (1a224 <_wcrtomb_r+0x50>)
   1a208:	6809      	ldr	r1, [r1, #0]
   1a20a:	6b49      	ldr	r1, [r1, #52]	; 0x34
   1a20c:	2900      	cmp	r1, #0
   1a20e:	bf08      	it	eq
   1a210:	4611      	moveq	r1, r2
   1a212:	4622      	mov	r2, r4
   1a214:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
   1a218:	a901      	add	r1, sp, #4
   1a21a:	47a0      	blx	r4
   1a21c:	e7e9      	b.n	1a1f2 <_wcrtomb_r+0x1e>
   1a21e:	bf00      	nop
   1a220:	20000020 	.word	0x20000020
   1a224:	20000450 	.word	0x20000450

0001a228 <__ascii_wctomb>:
   1a228:	b121      	cbz	r1, 1a234 <__ascii_wctomb+0xc>
   1a22a:	2aff      	cmp	r2, #255	; 0xff
   1a22c:	d804      	bhi.n	1a238 <__ascii_wctomb+0x10>
   1a22e:	700a      	strb	r2, [r1, #0]
   1a230:	2001      	movs	r0, #1
   1a232:	4770      	bx	lr
   1a234:	4608      	mov	r0, r1
   1a236:	4770      	bx	lr
   1a238:	238a      	movs	r3, #138	; 0x8a
   1a23a:	6003      	str	r3, [r0, #0]
   1a23c:	f04f 30ff 	mov.w	r0, #4294967295
   1a240:	4770      	bx	lr
   1a242:	bf00      	nop

0001a244 <_write_r>:
   1a244:	b570      	push	{r4, r5, r6, lr}
   1a246:	460d      	mov	r5, r1
   1a248:	4c08      	ldr	r4, [pc, #32]	; (1a26c <_write_r+0x28>)
   1a24a:	4611      	mov	r1, r2
   1a24c:	4606      	mov	r6, r0
   1a24e:	461a      	mov	r2, r3
   1a250:	4628      	mov	r0, r5
   1a252:	2300      	movs	r3, #0
   1a254:	6023      	str	r3, [r4, #0]
   1a256:	f7e6 fa27 	bl	6a8 <_write>
   1a25a:	1c43      	adds	r3, r0, #1
   1a25c:	d000      	beq.n	1a260 <_write_r+0x1c>
   1a25e:	bd70      	pop	{r4, r5, r6, pc}
   1a260:	6823      	ldr	r3, [r4, #0]
   1a262:	2b00      	cmp	r3, #0
   1a264:	d0fb      	beq.n	1a25e <_write_r+0x1a>
   1a266:	6033      	str	r3, [r6, #0]
   1a268:	bd70      	pop	{r4, r5, r6, pc}
   1a26a:	bf00      	nop
   1a26c:	2000fcc4 	.word	0x2000fcc4

0001a270 <__swsetup_r>:
   1a270:	b538      	push	{r3, r4, r5, lr}
   1a272:	4b30      	ldr	r3, [pc, #192]	; (1a334 <__swsetup_r+0xc4>)
   1a274:	681b      	ldr	r3, [r3, #0]
   1a276:	4605      	mov	r5, r0
   1a278:	460c      	mov	r4, r1
   1a27a:	b113      	cbz	r3, 1a282 <__swsetup_r+0x12>
   1a27c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a27e:	2a00      	cmp	r2, #0
   1a280:	d038      	beq.n	1a2f4 <__swsetup_r+0x84>
   1a282:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1a286:	b293      	uxth	r3, r2
   1a288:	0718      	lsls	r0, r3, #28
   1a28a:	d50c      	bpl.n	1a2a6 <__swsetup_r+0x36>
   1a28c:	6920      	ldr	r0, [r4, #16]
   1a28e:	b1a8      	cbz	r0, 1a2bc <__swsetup_r+0x4c>
   1a290:	f013 0201 	ands.w	r2, r3, #1
   1a294:	d01e      	beq.n	1a2d4 <__swsetup_r+0x64>
   1a296:	6963      	ldr	r3, [r4, #20]
   1a298:	2200      	movs	r2, #0
   1a29a:	425b      	negs	r3, r3
   1a29c:	61a3      	str	r3, [r4, #24]
   1a29e:	60a2      	str	r2, [r4, #8]
   1a2a0:	b1f0      	cbz	r0, 1a2e0 <__swsetup_r+0x70>
   1a2a2:	2000      	movs	r0, #0
   1a2a4:	bd38      	pop	{r3, r4, r5, pc}
   1a2a6:	06d9      	lsls	r1, r3, #27
   1a2a8:	d53c      	bpl.n	1a324 <__swsetup_r+0xb4>
   1a2aa:	0758      	lsls	r0, r3, #29
   1a2ac:	d426      	bmi.n	1a2fc <__swsetup_r+0x8c>
   1a2ae:	6920      	ldr	r0, [r4, #16]
   1a2b0:	f042 0308 	orr.w	r3, r2, #8
   1a2b4:	81a3      	strh	r3, [r4, #12]
   1a2b6:	b29b      	uxth	r3, r3
   1a2b8:	2800      	cmp	r0, #0
   1a2ba:	d1e9      	bne.n	1a290 <__swsetup_r+0x20>
   1a2bc:	f403 7220 	and.w	r2, r3, #640	; 0x280
   1a2c0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   1a2c4:	d0e4      	beq.n	1a290 <__swsetup_r+0x20>
   1a2c6:	4628      	mov	r0, r5
   1a2c8:	4621      	mov	r1, r4
   1a2ca:	f7fa ff53 	bl	15174 <__smakebuf_r>
   1a2ce:	89a3      	ldrh	r3, [r4, #12]
   1a2d0:	6920      	ldr	r0, [r4, #16]
   1a2d2:	e7dd      	b.n	1a290 <__swsetup_r+0x20>
   1a2d4:	0799      	lsls	r1, r3, #30
   1a2d6:	bf58      	it	pl
   1a2d8:	6962      	ldrpl	r2, [r4, #20]
   1a2da:	60a2      	str	r2, [r4, #8]
   1a2dc:	2800      	cmp	r0, #0
   1a2de:	d1e0      	bne.n	1a2a2 <__swsetup_r+0x32>
   1a2e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a2e4:	061a      	lsls	r2, r3, #24
   1a2e6:	d5dd      	bpl.n	1a2a4 <__swsetup_r+0x34>
   1a2e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a2ec:	81a3      	strh	r3, [r4, #12]
   1a2ee:	f04f 30ff 	mov.w	r0, #4294967295
   1a2f2:	bd38      	pop	{r3, r4, r5, pc}
   1a2f4:	4618      	mov	r0, r3
   1a2f6:	f001 f959 	bl	1b5ac <__sinit>
   1a2fa:	e7c2      	b.n	1a282 <__swsetup_r+0x12>
   1a2fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1a2fe:	b151      	cbz	r1, 1a316 <__swsetup_r+0xa6>
   1a300:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1a304:	4299      	cmp	r1, r3
   1a306:	d004      	beq.n	1a312 <__swsetup_r+0xa2>
   1a308:	4628      	mov	r0, r5
   1a30a:	f001 fa75 	bl	1b7f8 <_free_r>
   1a30e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1a312:	2300      	movs	r3, #0
   1a314:	6323      	str	r3, [r4, #48]	; 0x30
   1a316:	2300      	movs	r3, #0
   1a318:	6920      	ldr	r0, [r4, #16]
   1a31a:	6063      	str	r3, [r4, #4]
   1a31c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   1a320:	6020      	str	r0, [r4, #0]
   1a322:	e7c5      	b.n	1a2b0 <__swsetup_r+0x40>
   1a324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1a328:	2309      	movs	r3, #9
   1a32a:	602b      	str	r3, [r5, #0]
   1a32c:	f04f 30ff 	mov.w	r0, #4294967295
   1a330:	81a2      	strh	r2, [r4, #12]
   1a332:	bd38      	pop	{r3, r4, r5, pc}
   1a334:	20000020 	.word	0x20000020

0001a338 <__register_exitproc>:
   1a338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a33c:	4d2c      	ldr	r5, [pc, #176]	; (1a3f0 <__register_exitproc+0xb8>)
   1a33e:	4606      	mov	r6, r0
   1a340:	6828      	ldr	r0, [r5, #0]
   1a342:	4698      	mov	r8, r3
   1a344:	460f      	mov	r7, r1
   1a346:	4691      	mov	r9, r2
   1a348:	f7fa fee2 	bl	15110 <__retarget_lock_acquire_recursive>
   1a34c:	4b29      	ldr	r3, [pc, #164]	; (1a3f4 <__register_exitproc+0xbc>)
   1a34e:	681c      	ldr	r4, [r3, #0]
   1a350:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1a354:	2b00      	cmp	r3, #0
   1a356:	d03e      	beq.n	1a3d6 <__register_exitproc+0x9e>
   1a358:	685a      	ldr	r2, [r3, #4]
   1a35a:	2a1f      	cmp	r2, #31
   1a35c:	dc1c      	bgt.n	1a398 <__register_exitproc+0x60>
   1a35e:	f102 0e01 	add.w	lr, r2, #1
   1a362:	b176      	cbz	r6, 1a382 <__register_exitproc+0x4a>
   1a364:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1a368:	2401      	movs	r4, #1
   1a36a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   1a36e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   1a372:	4094      	lsls	r4, r2
   1a374:	4320      	orrs	r0, r4
   1a376:	2e02      	cmp	r6, #2
   1a378:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   1a37c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   1a380:	d023      	beq.n	1a3ca <__register_exitproc+0x92>
   1a382:	3202      	adds	r2, #2
   1a384:	f8c3 e004 	str.w	lr, [r3, #4]
   1a388:	6828      	ldr	r0, [r5, #0]
   1a38a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   1a38e:	f7fa fec1 	bl	15114 <__retarget_lock_release_recursive>
   1a392:	2000      	movs	r0, #0
   1a394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a398:	4b17      	ldr	r3, [pc, #92]	; (1a3f8 <__register_exitproc+0xc0>)
   1a39a:	b30b      	cbz	r3, 1a3e0 <__register_exitproc+0xa8>
   1a39c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   1a3a0:	f7fa ff32 	bl	15208 <malloc>
   1a3a4:	4603      	mov	r3, r0
   1a3a6:	b1d8      	cbz	r0, 1a3e0 <__register_exitproc+0xa8>
   1a3a8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   1a3ac:	6002      	str	r2, [r0, #0]
   1a3ae:	2100      	movs	r1, #0
   1a3b0:	6041      	str	r1, [r0, #4]
   1a3b2:	460a      	mov	r2, r1
   1a3b4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1a3b8:	f04f 0e01 	mov.w	lr, #1
   1a3bc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   1a3c0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   1a3c4:	2e00      	cmp	r6, #0
   1a3c6:	d0dc      	beq.n	1a382 <__register_exitproc+0x4a>
   1a3c8:	e7cc      	b.n	1a364 <__register_exitproc+0x2c>
   1a3ca:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   1a3ce:	430c      	orrs	r4, r1
   1a3d0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   1a3d4:	e7d5      	b.n	1a382 <__register_exitproc+0x4a>
   1a3d6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1a3da:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1a3de:	e7bb      	b.n	1a358 <__register_exitproc+0x20>
   1a3e0:	6828      	ldr	r0, [r5, #0]
   1a3e2:	f7fa fe97 	bl	15114 <__retarget_lock_release_recursive>
   1a3e6:	f04f 30ff 	mov.w	r0, #4294967295
   1a3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a3ee:	bf00      	nop
   1a3f0:	200009cc 	.word	0x200009cc
   1a3f4:	00024980 	.word	0x00024980
   1a3f8:	00015209 	.word	0x00015209

0001a3fc <register_fini>:
   1a3fc:	4b02      	ldr	r3, [pc, #8]	; (1a408 <register_fini+0xc>)
   1a3fe:	b113      	cbz	r3, 1a406 <register_fini+0xa>
   1a400:	4802      	ldr	r0, [pc, #8]	; (1a40c <register_fini+0x10>)
   1a402:	f000 b805 	b.w	1a410 <atexit>
   1a406:	4770      	bx	lr
   1a408:	00000000 	.word	0x00000000
   1a40c:	0001b61d 	.word	0x0001b61d

0001a410 <atexit>:
   1a410:	2300      	movs	r3, #0
   1a412:	4601      	mov	r1, r0
   1a414:	461a      	mov	r2, r3
   1a416:	4618      	mov	r0, r3
   1a418:	f7ff bf8e 	b.w	1a338 <__register_exitproc>

0001a41c <_close_r>:
   1a41c:	b538      	push	{r3, r4, r5, lr}
   1a41e:	4c07      	ldr	r4, [pc, #28]	; (1a43c <_close_r+0x20>)
   1a420:	2300      	movs	r3, #0
   1a422:	4605      	mov	r5, r0
   1a424:	4608      	mov	r0, r1
   1a426:	6023      	str	r3, [r4, #0]
   1a428:	f7e6 f95e 	bl	6e8 <_close>
   1a42c:	1c43      	adds	r3, r0, #1
   1a42e:	d000      	beq.n	1a432 <_close_r+0x16>
   1a430:	bd38      	pop	{r3, r4, r5, pc}
   1a432:	6823      	ldr	r3, [r4, #0]
   1a434:	2b00      	cmp	r3, #0
   1a436:	d0fb      	beq.n	1a430 <_close_r+0x14>
   1a438:	602b      	str	r3, [r5, #0]
   1a43a:	bd38      	pop	{r3, r4, r5, pc}
   1a43c:	2000fcc4 	.word	0x2000fcc4

0001a440 <quorem>:
   1a440:	6902      	ldr	r2, [r0, #16]
   1a442:	690b      	ldr	r3, [r1, #16]
   1a444:	4293      	cmp	r3, r2
   1a446:	f300 808d 	bgt.w	1a564 <quorem+0x124>
   1a44a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a44e:	f103 38ff 	add.w	r8, r3, #4294967295
   1a452:	f101 0714 	add.w	r7, r1, #20
   1a456:	f100 0b14 	add.w	fp, r0, #20
   1a45a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   1a45e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   1a462:	ea4f 0488 	mov.w	r4, r8, lsl #2
   1a466:	b083      	sub	sp, #12
   1a468:	3201      	adds	r2, #1
   1a46a:	fbb3 f9f2 	udiv	r9, r3, r2
   1a46e:	eb0b 0304 	add.w	r3, fp, r4
   1a472:	9400      	str	r4, [sp, #0]
   1a474:	eb07 0a04 	add.w	sl, r7, r4
   1a478:	9301      	str	r3, [sp, #4]
   1a47a:	f1b9 0f00 	cmp.w	r9, #0
   1a47e:	d039      	beq.n	1a4f4 <quorem+0xb4>
   1a480:	2500      	movs	r5, #0
   1a482:	462e      	mov	r6, r5
   1a484:	46bc      	mov	ip, r7
   1a486:	46de      	mov	lr, fp
   1a488:	f85c 4b04 	ldr.w	r4, [ip], #4
   1a48c:	f8de 3000 	ldr.w	r3, [lr]
   1a490:	b2a2      	uxth	r2, r4
   1a492:	fb09 5502 	mla	r5, r9, r2, r5
   1a496:	0c22      	lsrs	r2, r4, #16
   1a498:	0c2c      	lsrs	r4, r5, #16
   1a49a:	fb09 4202 	mla	r2, r9, r2, r4
   1a49e:	b2ad      	uxth	r5, r5
   1a4a0:	1b75      	subs	r5, r6, r5
   1a4a2:	b296      	uxth	r6, r2
   1a4a4:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   1a4a8:	fa15 f383 	uxtah	r3, r5, r3
   1a4ac:	eb06 4623 	add.w	r6, r6, r3, asr #16
   1a4b0:	b29b      	uxth	r3, r3
   1a4b2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1a4b6:	45e2      	cmp	sl, ip
   1a4b8:	ea4f 4512 	mov.w	r5, r2, lsr #16
   1a4bc:	f84e 3b04 	str.w	r3, [lr], #4
   1a4c0:	ea4f 4626 	mov.w	r6, r6, asr #16
   1a4c4:	d2e0      	bcs.n	1a488 <quorem+0x48>
   1a4c6:	9b00      	ldr	r3, [sp, #0]
   1a4c8:	f85b 3003 	ldr.w	r3, [fp, r3]
   1a4cc:	b993      	cbnz	r3, 1a4f4 <quorem+0xb4>
   1a4ce:	9c01      	ldr	r4, [sp, #4]
   1a4d0:	1f23      	subs	r3, r4, #4
   1a4d2:	459b      	cmp	fp, r3
   1a4d4:	d20c      	bcs.n	1a4f0 <quorem+0xb0>
   1a4d6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a4da:	b94b      	cbnz	r3, 1a4f0 <quorem+0xb0>
   1a4dc:	f1a4 0308 	sub.w	r3, r4, #8
   1a4e0:	e002      	b.n	1a4e8 <quorem+0xa8>
   1a4e2:	681a      	ldr	r2, [r3, #0]
   1a4e4:	3b04      	subs	r3, #4
   1a4e6:	b91a      	cbnz	r2, 1a4f0 <quorem+0xb0>
   1a4e8:	459b      	cmp	fp, r3
   1a4ea:	f108 38ff 	add.w	r8, r8, #4294967295
   1a4ee:	d3f8      	bcc.n	1a4e2 <quorem+0xa2>
   1a4f0:	f8c0 8010 	str.w	r8, [r0, #16]
   1a4f4:	4604      	mov	r4, r0
   1a4f6:	f001 fcc3 	bl	1be80 <__mcmp>
   1a4fa:	2800      	cmp	r0, #0
   1a4fc:	db2e      	blt.n	1a55c <quorem+0x11c>
   1a4fe:	f109 0901 	add.w	r9, r9, #1
   1a502:	465d      	mov	r5, fp
   1a504:	2300      	movs	r3, #0
   1a506:	f857 1b04 	ldr.w	r1, [r7], #4
   1a50a:	6828      	ldr	r0, [r5, #0]
   1a50c:	b28a      	uxth	r2, r1
   1a50e:	1a9a      	subs	r2, r3, r2
   1a510:	0c0b      	lsrs	r3, r1, #16
   1a512:	fa12 f280 	uxtah	r2, r2, r0
   1a516:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   1a51a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   1a51e:	b292      	uxth	r2, r2
   1a520:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   1a524:	45ba      	cmp	sl, r7
   1a526:	f845 2b04 	str.w	r2, [r5], #4
   1a52a:	ea4f 4323 	mov.w	r3, r3, asr #16
   1a52e:	d2ea      	bcs.n	1a506 <quorem+0xc6>
   1a530:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   1a534:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   1a538:	b982      	cbnz	r2, 1a55c <quorem+0x11c>
   1a53a:	1f1a      	subs	r2, r3, #4
   1a53c:	4593      	cmp	fp, r2
   1a53e:	d20b      	bcs.n	1a558 <quorem+0x118>
   1a540:	f853 2c04 	ldr.w	r2, [r3, #-4]
   1a544:	b942      	cbnz	r2, 1a558 <quorem+0x118>
   1a546:	3b08      	subs	r3, #8
   1a548:	e002      	b.n	1a550 <quorem+0x110>
   1a54a:	681a      	ldr	r2, [r3, #0]
   1a54c:	3b04      	subs	r3, #4
   1a54e:	b91a      	cbnz	r2, 1a558 <quorem+0x118>
   1a550:	459b      	cmp	fp, r3
   1a552:	f108 38ff 	add.w	r8, r8, #4294967295
   1a556:	d3f8      	bcc.n	1a54a <quorem+0x10a>
   1a558:	f8c4 8010 	str.w	r8, [r4, #16]
   1a55c:	4648      	mov	r0, r9
   1a55e:	b003      	add	sp, #12
   1a560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a564:	2000      	movs	r0, #0
   1a566:	4770      	bx	lr

0001a568 <_dtoa_r>:
   1a568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a56c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   1a56e:	b09b      	sub	sp, #108	; 0x6c
   1a570:	4604      	mov	r4, r0
   1a572:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   1a574:	4692      	mov	sl, r2
   1a576:	469b      	mov	fp, r3
   1a578:	b141      	cbz	r1, 1a58c <_dtoa_r+0x24>
   1a57a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1a57c:	604a      	str	r2, [r1, #4]
   1a57e:	2301      	movs	r3, #1
   1a580:	4093      	lsls	r3, r2
   1a582:	608b      	str	r3, [r1, #8]
   1a584:	f001 faa4 	bl	1bad0 <_Bfree>
   1a588:	2300      	movs	r3, #0
   1a58a:	6423      	str	r3, [r4, #64]	; 0x40
   1a58c:	f1bb 0f00 	cmp.w	fp, #0
   1a590:	465d      	mov	r5, fp
   1a592:	db35      	blt.n	1a600 <_dtoa_r+0x98>
   1a594:	2300      	movs	r3, #0
   1a596:	6033      	str	r3, [r6, #0]
   1a598:	4b9d      	ldr	r3, [pc, #628]	; (1a810 <_dtoa_r+0x2a8>)
   1a59a:	43ab      	bics	r3, r5
   1a59c:	d015      	beq.n	1a5ca <_dtoa_r+0x62>
   1a59e:	4650      	mov	r0, sl
   1a5a0:	4659      	mov	r1, fp
   1a5a2:	2200      	movs	r2, #0
   1a5a4:	2300      	movs	r3, #0
   1a5a6:	f7f8 fdc3 	bl	13130 <__aeabi_dcmpeq>
   1a5aa:	4680      	mov	r8, r0
   1a5ac:	2800      	cmp	r0, #0
   1a5ae:	d02d      	beq.n	1a60c <_dtoa_r+0xa4>
   1a5b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1a5b2:	2301      	movs	r3, #1
   1a5b4:	6013      	str	r3, [r2, #0]
   1a5b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1a5b8:	2b00      	cmp	r3, #0
   1a5ba:	f000 80bd 	beq.w	1a738 <_dtoa_r+0x1d0>
   1a5be:	4895      	ldr	r0, [pc, #596]	; (1a814 <_dtoa_r+0x2ac>)
   1a5c0:	6018      	str	r0, [r3, #0]
   1a5c2:	3801      	subs	r0, #1
   1a5c4:	b01b      	add	sp, #108	; 0x6c
   1a5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5ca:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1a5cc:	f242 730f 	movw	r3, #9999	; 0x270f
   1a5d0:	6013      	str	r3, [r2, #0]
   1a5d2:	f1ba 0f00 	cmp.w	sl, #0
   1a5d6:	d10d      	bne.n	1a5f4 <_dtoa_r+0x8c>
   1a5d8:	f3c5 0513 	ubfx	r5, r5, #0, #20
   1a5dc:	b955      	cbnz	r5, 1a5f4 <_dtoa_r+0x8c>
   1a5de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1a5e0:	488d      	ldr	r0, [pc, #564]	; (1a818 <_dtoa_r+0x2b0>)
   1a5e2:	2b00      	cmp	r3, #0
   1a5e4:	d0ee      	beq.n	1a5c4 <_dtoa_r+0x5c>
   1a5e6:	f100 0308 	add.w	r3, r0, #8
   1a5ea:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   1a5ec:	6013      	str	r3, [r2, #0]
   1a5ee:	b01b      	add	sp, #108	; 0x6c
   1a5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1a5f6:	4889      	ldr	r0, [pc, #548]	; (1a81c <_dtoa_r+0x2b4>)
   1a5f8:	2b00      	cmp	r3, #0
   1a5fa:	d0e3      	beq.n	1a5c4 <_dtoa_r+0x5c>
   1a5fc:	1cc3      	adds	r3, r0, #3
   1a5fe:	e7f4      	b.n	1a5ea <_dtoa_r+0x82>
   1a600:	2301      	movs	r3, #1
   1a602:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   1a606:	6033      	str	r3, [r6, #0]
   1a608:	46ab      	mov	fp, r5
   1a60a:	e7c5      	b.n	1a598 <_dtoa_r+0x30>
   1a60c:	aa18      	add	r2, sp, #96	; 0x60
   1a60e:	ab19      	add	r3, sp, #100	; 0x64
   1a610:	9201      	str	r2, [sp, #4]
   1a612:	9300      	str	r3, [sp, #0]
   1a614:	4652      	mov	r2, sl
   1a616:	465b      	mov	r3, fp
   1a618:	4620      	mov	r0, r4
   1a61a:	f001 fcd1 	bl	1bfc0 <__d2b>
   1a61e:	0d2b      	lsrs	r3, r5, #20
   1a620:	4681      	mov	r9, r0
   1a622:	d071      	beq.n	1a708 <_dtoa_r+0x1a0>
   1a624:	f3cb 0213 	ubfx	r2, fp, #0, #20
   1a628:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   1a62c:	9f18      	ldr	r7, [sp, #96]	; 0x60
   1a62e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   1a632:	4650      	mov	r0, sl
   1a634:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   1a638:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   1a63c:	2200      	movs	r2, #0
   1a63e:	4b78      	ldr	r3, [pc, #480]	; (1a820 <_dtoa_r+0x2b8>)
   1a640:	f7f8 f95a 	bl	128f8 <__aeabi_dsub>
   1a644:	a36c      	add	r3, pc, #432	; (adr r3, 1a7f8 <_dtoa_r+0x290>)
   1a646:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a64a:	f7f8 fb09 	bl	12c60 <__aeabi_dmul>
   1a64e:	a36c      	add	r3, pc, #432	; (adr r3, 1a800 <_dtoa_r+0x298>)
   1a650:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a654:	f7f8 f952 	bl	128fc <__adddf3>
   1a658:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1a65c:	4630      	mov	r0, r6
   1a65e:	f7f8 fa99 	bl	12b94 <__aeabi_i2d>
   1a662:	a369      	add	r3, pc, #420	; (adr r3, 1a808 <_dtoa_r+0x2a0>)
   1a664:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a668:	f7f8 fafa 	bl	12c60 <__aeabi_dmul>
   1a66c:	4602      	mov	r2, r0
   1a66e:	460b      	mov	r3, r1
   1a670:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1a674:	f7f8 f942 	bl	128fc <__adddf3>
   1a678:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1a67c:	f7f8 fd8a 	bl	13194 <__aeabi_d2iz>
   1a680:	2200      	movs	r2, #0
   1a682:	9002      	str	r0, [sp, #8]
   1a684:	2300      	movs	r3, #0
   1a686:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1a68a:	f7f8 fd5b 	bl	13144 <__aeabi_dcmplt>
   1a68e:	2800      	cmp	r0, #0
   1a690:	f040 8173 	bne.w	1a97a <_dtoa_r+0x412>
   1a694:	9d02      	ldr	r5, [sp, #8]
   1a696:	2d16      	cmp	r5, #22
   1a698:	f200 815d 	bhi.w	1a956 <_dtoa_r+0x3ee>
   1a69c:	4b61      	ldr	r3, [pc, #388]	; (1a824 <_dtoa_r+0x2bc>)
   1a69e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   1a6a2:	e9d3 0100 	ldrd	r0, r1, [r3]
   1a6a6:	4652      	mov	r2, sl
   1a6a8:	465b      	mov	r3, fp
   1a6aa:	f7f8 fd69 	bl	13180 <__aeabi_dcmpgt>
   1a6ae:	2800      	cmp	r0, #0
   1a6b0:	f000 81c5 	beq.w	1aa3e <_dtoa_r+0x4d6>
   1a6b4:	1e6b      	subs	r3, r5, #1
   1a6b6:	9302      	str	r3, [sp, #8]
   1a6b8:	2300      	movs	r3, #0
   1a6ba:	930e      	str	r3, [sp, #56]	; 0x38
   1a6bc:	1bbf      	subs	r7, r7, r6
   1a6be:	1e7b      	subs	r3, r7, #1
   1a6c0:	9306      	str	r3, [sp, #24]
   1a6c2:	f100 8154 	bmi.w	1a96e <_dtoa_r+0x406>
   1a6c6:	2300      	movs	r3, #0
   1a6c8:	9308      	str	r3, [sp, #32]
   1a6ca:	9b02      	ldr	r3, [sp, #8]
   1a6cc:	2b00      	cmp	r3, #0
   1a6ce:	f2c0 8145 	blt.w	1a95c <_dtoa_r+0x3f4>
   1a6d2:	9a06      	ldr	r2, [sp, #24]
   1a6d4:	930d      	str	r3, [sp, #52]	; 0x34
   1a6d6:	4611      	mov	r1, r2
   1a6d8:	4419      	add	r1, r3
   1a6da:	2300      	movs	r3, #0
   1a6dc:	9106      	str	r1, [sp, #24]
   1a6de:	930c      	str	r3, [sp, #48]	; 0x30
   1a6e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1a6e2:	2b09      	cmp	r3, #9
   1a6e4:	d82a      	bhi.n	1a73c <_dtoa_r+0x1d4>
   1a6e6:	2b05      	cmp	r3, #5
   1a6e8:	f340 865b 	ble.w	1b3a2 <_dtoa_r+0xe3a>
   1a6ec:	3b04      	subs	r3, #4
   1a6ee:	9324      	str	r3, [sp, #144]	; 0x90
   1a6f0:	2500      	movs	r5, #0
   1a6f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1a6f4:	3b02      	subs	r3, #2
   1a6f6:	2b03      	cmp	r3, #3
   1a6f8:	f200 8642 	bhi.w	1b380 <_dtoa_r+0xe18>
   1a6fc:	e8df f013 	tbh	[pc, r3, lsl #1]
   1a700:	02c903d4 	.word	0x02c903d4
   1a704:	046103df 	.word	0x046103df
   1a708:	9f18      	ldr	r7, [sp, #96]	; 0x60
   1a70a:	9e19      	ldr	r6, [sp, #100]	; 0x64
   1a70c:	443e      	add	r6, r7
   1a70e:	f206 4332 	addw	r3, r6, #1074	; 0x432
   1a712:	2b20      	cmp	r3, #32
   1a714:	f340 818e 	ble.w	1aa34 <_dtoa_r+0x4cc>
   1a718:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   1a71c:	f206 4012 	addw	r0, r6, #1042	; 0x412
   1a720:	409d      	lsls	r5, r3
   1a722:	fa2a f000 	lsr.w	r0, sl, r0
   1a726:	4328      	orrs	r0, r5
   1a728:	f7f8 fa24 	bl	12b74 <__aeabi_ui2d>
   1a72c:	2301      	movs	r3, #1
   1a72e:	3e01      	subs	r6, #1
   1a730:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   1a734:	9314      	str	r3, [sp, #80]	; 0x50
   1a736:	e781      	b.n	1a63c <_dtoa_r+0xd4>
   1a738:	483b      	ldr	r0, [pc, #236]	; (1a828 <_dtoa_r+0x2c0>)
   1a73a:	e743      	b.n	1a5c4 <_dtoa_r+0x5c>
   1a73c:	2100      	movs	r1, #0
   1a73e:	6461      	str	r1, [r4, #68]	; 0x44
   1a740:	4620      	mov	r0, r4
   1a742:	9125      	str	r1, [sp, #148]	; 0x94
   1a744:	f001 f99e 	bl	1ba84 <_Balloc>
   1a748:	f04f 33ff 	mov.w	r3, #4294967295
   1a74c:	930a      	str	r3, [sp, #40]	; 0x28
   1a74e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1a750:	930f      	str	r3, [sp, #60]	; 0x3c
   1a752:	2301      	movs	r3, #1
   1a754:	9004      	str	r0, [sp, #16]
   1a756:	6420      	str	r0, [r4, #64]	; 0x40
   1a758:	9224      	str	r2, [sp, #144]	; 0x90
   1a75a:	930b      	str	r3, [sp, #44]	; 0x2c
   1a75c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1a75e:	2b00      	cmp	r3, #0
   1a760:	f2c0 80d9 	blt.w	1a916 <_dtoa_r+0x3ae>
   1a764:	9a02      	ldr	r2, [sp, #8]
   1a766:	2a0e      	cmp	r2, #14
   1a768:	f300 80d5 	bgt.w	1a916 <_dtoa_r+0x3ae>
   1a76c:	4b2d      	ldr	r3, [pc, #180]	; (1a824 <_dtoa_r+0x2bc>)
   1a76e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1a772:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a776:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1a77a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1a77c:	2b00      	cmp	r3, #0
   1a77e:	f2c0 83ba 	blt.w	1aef6 <_dtoa_r+0x98e>
   1a782:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   1a786:	4650      	mov	r0, sl
   1a788:	462a      	mov	r2, r5
   1a78a:	4633      	mov	r3, r6
   1a78c:	4659      	mov	r1, fp
   1a78e:	f7f8 fb91 	bl	12eb4 <__aeabi_ddiv>
   1a792:	f7f8 fcff 	bl	13194 <__aeabi_d2iz>
   1a796:	4680      	mov	r8, r0
   1a798:	f7f8 f9fc 	bl	12b94 <__aeabi_i2d>
   1a79c:	462a      	mov	r2, r5
   1a79e:	4633      	mov	r3, r6
   1a7a0:	f7f8 fa5e 	bl	12c60 <__aeabi_dmul>
   1a7a4:	460b      	mov	r3, r1
   1a7a6:	4602      	mov	r2, r0
   1a7a8:	4659      	mov	r1, fp
   1a7aa:	4650      	mov	r0, sl
   1a7ac:	f7f8 f8a4 	bl	128f8 <__aeabi_dsub>
   1a7b0:	9d04      	ldr	r5, [sp, #16]
   1a7b2:	f108 0330 	add.w	r3, r8, #48	; 0x30
   1a7b6:	702b      	strb	r3, [r5, #0]
   1a7b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a7ba:	2b01      	cmp	r3, #1
   1a7bc:	4606      	mov	r6, r0
   1a7be:	460f      	mov	r7, r1
   1a7c0:	f105 0501 	add.w	r5, r5, #1
   1a7c4:	d068      	beq.n	1a898 <_dtoa_r+0x330>
   1a7c6:	2200      	movs	r2, #0
   1a7c8:	4b18      	ldr	r3, [pc, #96]	; (1a82c <_dtoa_r+0x2c4>)
   1a7ca:	f7f8 fa49 	bl	12c60 <__aeabi_dmul>
   1a7ce:	2200      	movs	r2, #0
   1a7d0:	2300      	movs	r3, #0
   1a7d2:	4606      	mov	r6, r0
   1a7d4:	460f      	mov	r7, r1
   1a7d6:	f7f8 fcab 	bl	13130 <__aeabi_dcmpeq>
   1a7da:	2800      	cmp	r0, #0
   1a7dc:	f040 8088 	bne.w	1a8f0 <_dtoa_r+0x388>
   1a7e0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   1a7e4:	f04f 0a00 	mov.w	sl, #0
   1a7e8:	f8df b040 	ldr.w	fp, [pc, #64]	; 1a82c <_dtoa_r+0x2c4>
   1a7ec:	940c      	str	r4, [sp, #48]	; 0x30
   1a7ee:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1a7f2:	e028      	b.n	1a846 <_dtoa_r+0x2de>
   1a7f4:	f3af 8000 	nop.w
   1a7f8:	636f4361 	.word	0x636f4361
   1a7fc:	3fd287a7 	.word	0x3fd287a7
   1a800:	8b60c8b3 	.word	0x8b60c8b3
   1a804:	3fc68a28 	.word	0x3fc68a28
   1a808:	509f79fb 	.word	0x509f79fb
   1a80c:	3fd34413 	.word	0x3fd34413
   1a810:	7ff00000 	.word	0x7ff00000
   1a814:	00022039 	.word	0x00022039
   1a818:	00025130 	.word	0x00025130
   1a81c:	00023270 	.word	0x00023270
   1a820:	3ff80000 	.word	0x3ff80000
   1a824:	00025168 	.word	0x00025168
   1a828:	00022038 	.word	0x00022038
   1a82c:	40240000 	.word	0x40240000
   1a830:	f7f8 fa16 	bl	12c60 <__aeabi_dmul>
   1a834:	2200      	movs	r2, #0
   1a836:	2300      	movs	r3, #0
   1a838:	4606      	mov	r6, r0
   1a83a:	460f      	mov	r7, r1
   1a83c:	f7f8 fc78 	bl	13130 <__aeabi_dcmpeq>
   1a840:	2800      	cmp	r0, #0
   1a842:	f040 83c1 	bne.w	1afc8 <_dtoa_r+0xa60>
   1a846:	4642      	mov	r2, r8
   1a848:	464b      	mov	r3, r9
   1a84a:	4630      	mov	r0, r6
   1a84c:	4639      	mov	r1, r7
   1a84e:	f7f8 fb31 	bl	12eb4 <__aeabi_ddiv>
   1a852:	f7f8 fc9f 	bl	13194 <__aeabi_d2iz>
   1a856:	4604      	mov	r4, r0
   1a858:	f7f8 f99c 	bl	12b94 <__aeabi_i2d>
   1a85c:	4642      	mov	r2, r8
   1a85e:	464b      	mov	r3, r9
   1a860:	f7f8 f9fe 	bl	12c60 <__aeabi_dmul>
   1a864:	4602      	mov	r2, r0
   1a866:	460b      	mov	r3, r1
   1a868:	4630      	mov	r0, r6
   1a86a:	4639      	mov	r1, r7
   1a86c:	f7f8 f844 	bl	128f8 <__aeabi_dsub>
   1a870:	f104 0e30 	add.w	lr, r4, #48	; 0x30
   1a874:	9e04      	ldr	r6, [sp, #16]
   1a876:	f805 eb01 	strb.w	lr, [r5], #1
   1a87a:	eba5 0e06 	sub.w	lr, r5, r6
   1a87e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1a880:	45b6      	cmp	lr, r6
   1a882:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1a886:	4652      	mov	r2, sl
   1a888:	465b      	mov	r3, fp
   1a88a:	d1d1      	bne.n	1a830 <_dtoa_r+0x2c8>
   1a88c:	46a0      	mov	r8, r4
   1a88e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   1a892:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1a894:	4606      	mov	r6, r0
   1a896:	460f      	mov	r7, r1
   1a898:	4632      	mov	r2, r6
   1a89a:	463b      	mov	r3, r7
   1a89c:	4630      	mov	r0, r6
   1a89e:	4639      	mov	r1, r7
   1a8a0:	f7f8 f82c 	bl	128fc <__adddf3>
   1a8a4:	4606      	mov	r6, r0
   1a8a6:	460f      	mov	r7, r1
   1a8a8:	4602      	mov	r2, r0
   1a8aa:	460b      	mov	r3, r1
   1a8ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1a8b0:	f7f8 fc48 	bl	13144 <__aeabi_dcmplt>
   1a8b4:	b948      	cbnz	r0, 1a8ca <_dtoa_r+0x362>
   1a8b6:	4632      	mov	r2, r6
   1a8b8:	463b      	mov	r3, r7
   1a8ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1a8be:	f7f8 fc37 	bl	13130 <__aeabi_dcmpeq>
   1a8c2:	b1a8      	cbz	r0, 1a8f0 <_dtoa_r+0x388>
   1a8c4:	f018 0f01 	tst.w	r8, #1
   1a8c8:	d012      	beq.n	1a8f0 <_dtoa_r+0x388>
   1a8ca:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   1a8ce:	9a04      	ldr	r2, [sp, #16]
   1a8d0:	1e6b      	subs	r3, r5, #1
   1a8d2:	e004      	b.n	1a8de <_dtoa_r+0x376>
   1a8d4:	429a      	cmp	r2, r3
   1a8d6:	f000 8401 	beq.w	1b0dc <_dtoa_r+0xb74>
   1a8da:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   1a8de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   1a8e2:	f103 0501 	add.w	r5, r3, #1
   1a8e6:	d0f5      	beq.n	1a8d4 <_dtoa_r+0x36c>
   1a8e8:	f108 0801 	add.w	r8, r8, #1
   1a8ec:	f883 8000 	strb.w	r8, [r3]
   1a8f0:	4649      	mov	r1, r9
   1a8f2:	4620      	mov	r0, r4
   1a8f4:	f001 f8ec 	bl	1bad0 <_Bfree>
   1a8f8:	2200      	movs	r2, #0
   1a8fa:	9b02      	ldr	r3, [sp, #8]
   1a8fc:	702a      	strb	r2, [r5, #0]
   1a8fe:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1a900:	3301      	adds	r3, #1
   1a902:	6013      	str	r3, [r2, #0]
   1a904:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1a906:	2b00      	cmp	r3, #0
   1a908:	f000 839e 	beq.w	1b048 <_dtoa_r+0xae0>
   1a90c:	9804      	ldr	r0, [sp, #16]
   1a90e:	601d      	str	r5, [r3, #0]
   1a910:	b01b      	add	sp, #108	; 0x6c
   1a912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a916:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1a918:	2a00      	cmp	r2, #0
   1a91a:	d03e      	beq.n	1a99a <_dtoa_r+0x432>
   1a91c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1a91e:	2a01      	cmp	r2, #1
   1a920:	f340 8311 	ble.w	1af46 <_dtoa_r+0x9de>
   1a924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a926:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a928:	1e5f      	subs	r7, r3, #1
   1a92a:	42ba      	cmp	r2, r7
   1a92c:	f2c0 838f 	blt.w	1b04e <_dtoa_r+0xae6>
   1a930:	1bd7      	subs	r7, r2, r7
   1a932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a934:	2b00      	cmp	r3, #0
   1a936:	f2c0 848b 	blt.w	1b250 <_dtoa_r+0xce8>
   1a93a:	9d08      	ldr	r5, [sp, #32]
   1a93c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a93e:	9a08      	ldr	r2, [sp, #32]
   1a940:	441a      	add	r2, r3
   1a942:	9208      	str	r2, [sp, #32]
   1a944:	9a06      	ldr	r2, [sp, #24]
   1a946:	2101      	movs	r1, #1
   1a948:	441a      	add	r2, r3
   1a94a:	4620      	mov	r0, r4
   1a94c:	9206      	str	r2, [sp, #24]
   1a94e:	f001 f959 	bl	1bc04 <__i2b>
   1a952:	4606      	mov	r6, r0
   1a954:	e024      	b.n	1a9a0 <_dtoa_r+0x438>
   1a956:	2301      	movs	r3, #1
   1a958:	930e      	str	r3, [sp, #56]	; 0x38
   1a95a:	e6af      	b.n	1a6bc <_dtoa_r+0x154>
   1a95c:	9a08      	ldr	r2, [sp, #32]
   1a95e:	9b02      	ldr	r3, [sp, #8]
   1a960:	1ad2      	subs	r2, r2, r3
   1a962:	425b      	negs	r3, r3
   1a964:	930c      	str	r3, [sp, #48]	; 0x30
   1a966:	2300      	movs	r3, #0
   1a968:	9208      	str	r2, [sp, #32]
   1a96a:	930d      	str	r3, [sp, #52]	; 0x34
   1a96c:	e6b8      	b.n	1a6e0 <_dtoa_r+0x178>
   1a96e:	f1c7 0301 	rsb	r3, r7, #1
   1a972:	9308      	str	r3, [sp, #32]
   1a974:	2300      	movs	r3, #0
   1a976:	9306      	str	r3, [sp, #24]
   1a978:	e6a7      	b.n	1a6ca <_dtoa_r+0x162>
   1a97a:	9d02      	ldr	r5, [sp, #8]
   1a97c:	4628      	mov	r0, r5
   1a97e:	f7f8 f909 	bl	12b94 <__aeabi_i2d>
   1a982:	4602      	mov	r2, r0
   1a984:	460b      	mov	r3, r1
   1a986:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1a98a:	f7f8 fbd1 	bl	13130 <__aeabi_dcmpeq>
   1a98e:	2800      	cmp	r0, #0
   1a990:	f47f ae80 	bne.w	1a694 <_dtoa_r+0x12c>
   1a994:	1e6b      	subs	r3, r5, #1
   1a996:	9302      	str	r3, [sp, #8]
   1a998:	e67c      	b.n	1a694 <_dtoa_r+0x12c>
   1a99a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1a99c:	9d08      	ldr	r5, [sp, #32]
   1a99e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1a9a0:	2d00      	cmp	r5, #0
   1a9a2:	dd0c      	ble.n	1a9be <_dtoa_r+0x456>
   1a9a4:	9906      	ldr	r1, [sp, #24]
   1a9a6:	2900      	cmp	r1, #0
   1a9a8:	460b      	mov	r3, r1
   1a9aa:	dd08      	ble.n	1a9be <_dtoa_r+0x456>
   1a9ac:	42a9      	cmp	r1, r5
   1a9ae:	9a08      	ldr	r2, [sp, #32]
   1a9b0:	bfa8      	it	ge
   1a9b2:	462b      	movge	r3, r5
   1a9b4:	1ad2      	subs	r2, r2, r3
   1a9b6:	1aed      	subs	r5, r5, r3
   1a9b8:	1acb      	subs	r3, r1, r3
   1a9ba:	9208      	str	r2, [sp, #32]
   1a9bc:	9306      	str	r3, [sp, #24]
   1a9be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a9c0:	b1d3      	cbz	r3, 1a9f8 <_dtoa_r+0x490>
   1a9c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a9c4:	2b00      	cmp	r3, #0
   1a9c6:	f000 82b7 	beq.w	1af38 <_dtoa_r+0x9d0>
   1a9ca:	2f00      	cmp	r7, #0
   1a9cc:	dd10      	ble.n	1a9f0 <_dtoa_r+0x488>
   1a9ce:	4631      	mov	r1, r6
   1a9d0:	463a      	mov	r2, r7
   1a9d2:	4620      	mov	r0, r4
   1a9d4:	f001 f9b2 	bl	1bd3c <__pow5mult>
   1a9d8:	464a      	mov	r2, r9
   1a9da:	4601      	mov	r1, r0
   1a9dc:	4606      	mov	r6, r0
   1a9de:	4620      	mov	r0, r4
   1a9e0:	f001 f91a 	bl	1bc18 <__multiply>
   1a9e4:	4649      	mov	r1, r9
   1a9e6:	4680      	mov	r8, r0
   1a9e8:	4620      	mov	r0, r4
   1a9ea:	f001 f871 	bl	1bad0 <_Bfree>
   1a9ee:	46c1      	mov	r9, r8
   1a9f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a9f2:	1bda      	subs	r2, r3, r7
   1a9f4:	f040 82a1 	bne.w	1af3a <_dtoa_r+0x9d2>
   1a9f8:	2101      	movs	r1, #1
   1a9fa:	4620      	mov	r0, r4
   1a9fc:	f001 f902 	bl	1bc04 <__i2b>
   1aa00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1aa02:	2b00      	cmp	r3, #0
   1aa04:	4680      	mov	r8, r0
   1aa06:	dd1c      	ble.n	1aa42 <_dtoa_r+0x4da>
   1aa08:	4601      	mov	r1, r0
   1aa0a:	461a      	mov	r2, r3
   1aa0c:	4620      	mov	r0, r4
   1aa0e:	f001 f995 	bl	1bd3c <__pow5mult>
   1aa12:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1aa14:	2b01      	cmp	r3, #1
   1aa16:	4680      	mov	r8, r0
   1aa18:	f340 8254 	ble.w	1aec4 <_dtoa_r+0x95c>
   1aa1c:	2300      	movs	r3, #0
   1aa1e:	930c      	str	r3, [sp, #48]	; 0x30
   1aa20:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1aa24:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   1aa28:	6918      	ldr	r0, [r3, #16]
   1aa2a:	f001 f89b 	bl	1bb64 <__hi0bits>
   1aa2e:	f1c0 0020 	rsb	r0, r0, #32
   1aa32:	e010      	b.n	1aa56 <_dtoa_r+0x4ee>
   1aa34:	f1c3 0520 	rsb	r5, r3, #32
   1aa38:	fa0a f005 	lsl.w	r0, sl, r5
   1aa3c:	e674      	b.n	1a728 <_dtoa_r+0x1c0>
   1aa3e:	900e      	str	r0, [sp, #56]	; 0x38
   1aa40:	e63c      	b.n	1a6bc <_dtoa_r+0x154>
   1aa42:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1aa44:	2b01      	cmp	r3, #1
   1aa46:	f340 8287 	ble.w	1af58 <_dtoa_r+0x9f0>
   1aa4a:	2300      	movs	r3, #0
   1aa4c:	930c      	str	r3, [sp, #48]	; 0x30
   1aa4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1aa50:	2001      	movs	r0, #1
   1aa52:	2b00      	cmp	r3, #0
   1aa54:	d1e4      	bne.n	1aa20 <_dtoa_r+0x4b8>
   1aa56:	9a06      	ldr	r2, [sp, #24]
   1aa58:	4410      	add	r0, r2
   1aa5a:	f010 001f 	ands.w	r0, r0, #31
   1aa5e:	f000 80a1 	beq.w	1aba4 <_dtoa_r+0x63c>
   1aa62:	f1c0 0320 	rsb	r3, r0, #32
   1aa66:	2b04      	cmp	r3, #4
   1aa68:	f340 849e 	ble.w	1b3a8 <_dtoa_r+0xe40>
   1aa6c:	9b08      	ldr	r3, [sp, #32]
   1aa6e:	f1c0 001c 	rsb	r0, r0, #28
   1aa72:	4403      	add	r3, r0
   1aa74:	9308      	str	r3, [sp, #32]
   1aa76:	4613      	mov	r3, r2
   1aa78:	4403      	add	r3, r0
   1aa7a:	4405      	add	r5, r0
   1aa7c:	9306      	str	r3, [sp, #24]
   1aa7e:	9b08      	ldr	r3, [sp, #32]
   1aa80:	2b00      	cmp	r3, #0
   1aa82:	dd05      	ble.n	1aa90 <_dtoa_r+0x528>
   1aa84:	4649      	mov	r1, r9
   1aa86:	461a      	mov	r2, r3
   1aa88:	4620      	mov	r0, r4
   1aa8a:	f001 f9a7 	bl	1bddc <__lshift>
   1aa8e:	4681      	mov	r9, r0
   1aa90:	9b06      	ldr	r3, [sp, #24]
   1aa92:	2b00      	cmp	r3, #0
   1aa94:	dd05      	ble.n	1aaa2 <_dtoa_r+0x53a>
   1aa96:	4641      	mov	r1, r8
   1aa98:	461a      	mov	r2, r3
   1aa9a:	4620      	mov	r0, r4
   1aa9c:	f001 f99e 	bl	1bddc <__lshift>
   1aaa0:	4680      	mov	r8, r0
   1aaa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1aaa4:	2b00      	cmp	r3, #0
   1aaa6:	f040 8086 	bne.w	1abb6 <_dtoa_r+0x64e>
   1aaaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1aaac:	2b00      	cmp	r3, #0
   1aaae:	f340 8266 	ble.w	1af7e <_dtoa_r+0xa16>
   1aab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1aab4:	2b00      	cmp	r3, #0
   1aab6:	f000 8098 	beq.w	1abea <_dtoa_r+0x682>
   1aaba:	2d00      	cmp	r5, #0
   1aabc:	dd05      	ble.n	1aaca <_dtoa_r+0x562>
   1aabe:	4631      	mov	r1, r6
   1aac0:	462a      	mov	r2, r5
   1aac2:	4620      	mov	r0, r4
   1aac4:	f001 f98a 	bl	1bddc <__lshift>
   1aac8:	4606      	mov	r6, r0
   1aaca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1aacc:	2b00      	cmp	r3, #0
   1aace:	f040 8337 	bne.w	1b140 <_dtoa_r+0xbd8>
   1aad2:	9606      	str	r6, [sp, #24]
   1aad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1aad6:	9a04      	ldr	r2, [sp, #16]
   1aad8:	f8dd b018 	ldr.w	fp, [sp, #24]
   1aadc:	3b01      	subs	r3, #1
   1aade:	18d3      	adds	r3, r2, r3
   1aae0:	930b      	str	r3, [sp, #44]	; 0x2c
   1aae2:	f00a 0301 	and.w	r3, sl, #1
   1aae6:	930c      	str	r3, [sp, #48]	; 0x30
   1aae8:	4617      	mov	r7, r2
   1aaea:	46c2      	mov	sl, r8
   1aaec:	4651      	mov	r1, sl
   1aaee:	4648      	mov	r0, r9
   1aaf0:	f7ff fca6 	bl	1a440 <quorem>
   1aaf4:	4631      	mov	r1, r6
   1aaf6:	4605      	mov	r5, r0
   1aaf8:	4648      	mov	r0, r9
   1aafa:	f001 f9c1 	bl	1be80 <__mcmp>
   1aafe:	465a      	mov	r2, fp
   1ab00:	900a      	str	r0, [sp, #40]	; 0x28
   1ab02:	4651      	mov	r1, sl
   1ab04:	4620      	mov	r0, r4
   1ab06:	f001 f9d7 	bl	1beb8 <__mdiff>
   1ab0a:	68c2      	ldr	r2, [r0, #12]
   1ab0c:	4680      	mov	r8, r0
   1ab0e:	f105 0330 	add.w	r3, r5, #48	; 0x30
   1ab12:	2a00      	cmp	r2, #0
   1ab14:	f040 822b 	bne.w	1af6e <_dtoa_r+0xa06>
   1ab18:	4601      	mov	r1, r0
   1ab1a:	4648      	mov	r0, r9
   1ab1c:	9308      	str	r3, [sp, #32]
   1ab1e:	f001 f9af 	bl	1be80 <__mcmp>
   1ab22:	4641      	mov	r1, r8
   1ab24:	9006      	str	r0, [sp, #24]
   1ab26:	4620      	mov	r0, r4
   1ab28:	f000 ffd2 	bl	1bad0 <_Bfree>
   1ab2c:	9a06      	ldr	r2, [sp, #24]
   1ab2e:	9b08      	ldr	r3, [sp, #32]
   1ab30:	b932      	cbnz	r2, 1ab40 <_dtoa_r+0x5d8>
   1ab32:	9924      	ldr	r1, [sp, #144]	; 0x90
   1ab34:	b921      	cbnz	r1, 1ab40 <_dtoa_r+0x5d8>
   1ab36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1ab38:	2a00      	cmp	r2, #0
   1ab3a:	f000 83ef 	beq.w	1b31c <_dtoa_r+0xdb4>
   1ab3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1ab40:	990a      	ldr	r1, [sp, #40]	; 0x28
   1ab42:	2900      	cmp	r1, #0
   1ab44:	f2c0 829f 	blt.w	1b086 <_dtoa_r+0xb1e>
   1ab48:	d105      	bne.n	1ab56 <_dtoa_r+0x5ee>
   1ab4a:	9924      	ldr	r1, [sp, #144]	; 0x90
   1ab4c:	b919      	cbnz	r1, 1ab56 <_dtoa_r+0x5ee>
   1ab4e:	990c      	ldr	r1, [sp, #48]	; 0x30
   1ab50:	2900      	cmp	r1, #0
   1ab52:	f000 8298 	beq.w	1b086 <_dtoa_r+0xb1e>
   1ab56:	2a00      	cmp	r2, #0
   1ab58:	f300 8306 	bgt.w	1b168 <_dtoa_r+0xc00>
   1ab5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ab5e:	703b      	strb	r3, [r7, #0]
   1ab60:	f107 0801 	add.w	r8, r7, #1
   1ab64:	4297      	cmp	r7, r2
   1ab66:	4645      	mov	r5, r8
   1ab68:	f000 830c 	beq.w	1b184 <_dtoa_r+0xc1c>
   1ab6c:	4649      	mov	r1, r9
   1ab6e:	2300      	movs	r3, #0
   1ab70:	220a      	movs	r2, #10
   1ab72:	4620      	mov	r0, r4
   1ab74:	f000 ffb6 	bl	1bae4 <__multadd>
   1ab78:	455e      	cmp	r6, fp
   1ab7a:	4681      	mov	r9, r0
   1ab7c:	4631      	mov	r1, r6
   1ab7e:	f04f 0300 	mov.w	r3, #0
   1ab82:	f04f 020a 	mov.w	r2, #10
   1ab86:	4620      	mov	r0, r4
   1ab88:	f000 81eb 	beq.w	1af62 <_dtoa_r+0x9fa>
   1ab8c:	f000 ffaa 	bl	1bae4 <__multadd>
   1ab90:	4659      	mov	r1, fp
   1ab92:	4606      	mov	r6, r0
   1ab94:	2300      	movs	r3, #0
   1ab96:	220a      	movs	r2, #10
   1ab98:	4620      	mov	r0, r4
   1ab9a:	f000 ffa3 	bl	1bae4 <__multadd>
   1ab9e:	4647      	mov	r7, r8
   1aba0:	4683      	mov	fp, r0
   1aba2:	e7a3      	b.n	1aaec <_dtoa_r+0x584>
   1aba4:	201c      	movs	r0, #28
   1aba6:	9b08      	ldr	r3, [sp, #32]
   1aba8:	4403      	add	r3, r0
   1abaa:	9308      	str	r3, [sp, #32]
   1abac:	9b06      	ldr	r3, [sp, #24]
   1abae:	4403      	add	r3, r0
   1abb0:	4405      	add	r5, r0
   1abb2:	9306      	str	r3, [sp, #24]
   1abb4:	e763      	b.n	1aa7e <_dtoa_r+0x516>
   1abb6:	4641      	mov	r1, r8
   1abb8:	4648      	mov	r0, r9
   1abba:	f001 f961 	bl	1be80 <__mcmp>
   1abbe:	2800      	cmp	r0, #0
   1abc0:	f6bf af73 	bge.w	1aaaa <_dtoa_r+0x542>
   1abc4:	9f02      	ldr	r7, [sp, #8]
   1abc6:	4649      	mov	r1, r9
   1abc8:	2300      	movs	r3, #0
   1abca:	220a      	movs	r2, #10
   1abcc:	4620      	mov	r0, r4
   1abce:	3f01      	subs	r7, #1
   1abd0:	9702      	str	r7, [sp, #8]
   1abd2:	f000 ff87 	bl	1bae4 <__multadd>
   1abd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1abd8:	4681      	mov	r9, r0
   1abda:	2b00      	cmp	r3, #0
   1abdc:	f040 83b6 	bne.w	1b34c <_dtoa_r+0xde4>
   1abe0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1abe2:	2b00      	cmp	r3, #0
   1abe4:	f340 83bf 	ble.w	1b366 <_dtoa_r+0xdfe>
   1abe8:	930a      	str	r3, [sp, #40]	; 0x28
   1abea:	f8dd b010 	ldr.w	fp, [sp, #16]
   1abee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1abf0:	465d      	mov	r5, fp
   1abf2:	e002      	b.n	1abfa <_dtoa_r+0x692>
   1abf4:	f000 ff76 	bl	1bae4 <__multadd>
   1abf8:	4681      	mov	r9, r0
   1abfa:	4641      	mov	r1, r8
   1abfc:	4648      	mov	r0, r9
   1abfe:	f7ff fc1f 	bl	1a440 <quorem>
   1ac02:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   1ac06:	f805 ab01 	strb.w	sl, [r5], #1
   1ac0a:	eba5 030b 	sub.w	r3, r5, fp
   1ac0e:	42bb      	cmp	r3, r7
   1ac10:	f04f 020a 	mov.w	r2, #10
   1ac14:	f04f 0300 	mov.w	r3, #0
   1ac18:	4649      	mov	r1, r9
   1ac1a:	4620      	mov	r0, r4
   1ac1c:	dbea      	blt.n	1abf4 <_dtoa_r+0x68c>
   1ac1e:	9b04      	ldr	r3, [sp, #16]
   1ac20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ac22:	2a01      	cmp	r2, #1
   1ac24:	bfac      	ite	ge
   1ac26:	189b      	addge	r3, r3, r2
   1ac28:	3301      	addlt	r3, #1
   1ac2a:	461d      	mov	r5, r3
   1ac2c:	f04f 0b00 	mov.w	fp, #0
   1ac30:	4649      	mov	r1, r9
   1ac32:	2201      	movs	r2, #1
   1ac34:	4620      	mov	r0, r4
   1ac36:	f001 f8d1 	bl	1bddc <__lshift>
   1ac3a:	4641      	mov	r1, r8
   1ac3c:	4681      	mov	r9, r0
   1ac3e:	f001 f91f 	bl	1be80 <__mcmp>
   1ac42:	2800      	cmp	r0, #0
   1ac44:	f340 823d 	ble.w	1b0c2 <_dtoa_r+0xb5a>
   1ac48:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   1ac4c:	9904      	ldr	r1, [sp, #16]
   1ac4e:	1e6b      	subs	r3, r5, #1
   1ac50:	e004      	b.n	1ac5c <_dtoa_r+0x6f4>
   1ac52:	428b      	cmp	r3, r1
   1ac54:	f000 81ae 	beq.w	1afb4 <_dtoa_r+0xa4c>
   1ac58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1ac5c:	2a39      	cmp	r2, #57	; 0x39
   1ac5e:	f103 0501 	add.w	r5, r3, #1
   1ac62:	d0f6      	beq.n	1ac52 <_dtoa_r+0x6ea>
   1ac64:	3201      	adds	r2, #1
   1ac66:	701a      	strb	r2, [r3, #0]
   1ac68:	4641      	mov	r1, r8
   1ac6a:	4620      	mov	r0, r4
   1ac6c:	f000 ff30 	bl	1bad0 <_Bfree>
   1ac70:	2e00      	cmp	r6, #0
   1ac72:	f43f ae3d 	beq.w	1a8f0 <_dtoa_r+0x388>
   1ac76:	f1bb 0f00 	cmp.w	fp, #0
   1ac7a:	d005      	beq.n	1ac88 <_dtoa_r+0x720>
   1ac7c:	45b3      	cmp	fp, r6
   1ac7e:	d003      	beq.n	1ac88 <_dtoa_r+0x720>
   1ac80:	4659      	mov	r1, fp
   1ac82:	4620      	mov	r0, r4
   1ac84:	f000 ff24 	bl	1bad0 <_Bfree>
   1ac88:	4631      	mov	r1, r6
   1ac8a:	4620      	mov	r0, r4
   1ac8c:	f000 ff20 	bl	1bad0 <_Bfree>
   1ac90:	e62e      	b.n	1a8f0 <_dtoa_r+0x388>
   1ac92:	2300      	movs	r3, #0
   1ac94:	930b      	str	r3, [sp, #44]	; 0x2c
   1ac96:	9b02      	ldr	r3, [sp, #8]
   1ac98:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1ac9a:	4413      	add	r3, r2
   1ac9c:	930f      	str	r3, [sp, #60]	; 0x3c
   1ac9e:	3301      	adds	r3, #1
   1aca0:	2b01      	cmp	r3, #1
   1aca2:	461f      	mov	r7, r3
   1aca4:	461e      	mov	r6, r3
   1aca6:	930a      	str	r3, [sp, #40]	; 0x28
   1aca8:	bfb8      	it	lt
   1acaa:	2701      	movlt	r7, #1
   1acac:	2100      	movs	r1, #0
   1acae:	2f17      	cmp	r7, #23
   1acb0:	6461      	str	r1, [r4, #68]	; 0x44
   1acb2:	d90a      	bls.n	1acca <_dtoa_r+0x762>
   1acb4:	2201      	movs	r2, #1
   1acb6:	2304      	movs	r3, #4
   1acb8:	005b      	lsls	r3, r3, #1
   1acba:	f103 0014 	add.w	r0, r3, #20
   1acbe:	4287      	cmp	r7, r0
   1acc0:	4611      	mov	r1, r2
   1acc2:	f102 0201 	add.w	r2, r2, #1
   1acc6:	d2f7      	bcs.n	1acb8 <_dtoa_r+0x750>
   1acc8:	6461      	str	r1, [r4, #68]	; 0x44
   1acca:	4620      	mov	r0, r4
   1accc:	f000 feda 	bl	1ba84 <_Balloc>
   1acd0:	2e0e      	cmp	r6, #14
   1acd2:	9004      	str	r0, [sp, #16]
   1acd4:	6420      	str	r0, [r4, #64]	; 0x40
   1acd6:	f63f ad41 	bhi.w	1a75c <_dtoa_r+0x1f4>
   1acda:	2d00      	cmp	r5, #0
   1acdc:	f43f ad3e 	beq.w	1a75c <_dtoa_r+0x1f4>
   1ace0:	9902      	ldr	r1, [sp, #8]
   1ace2:	2900      	cmp	r1, #0
   1ace4:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   1ace8:	f340 8202 	ble.w	1b0f0 <_dtoa_r+0xb88>
   1acec:	4bb8      	ldr	r3, [pc, #736]	; (1afd0 <_dtoa_r+0xa68>)
   1acee:	f001 020f 	and.w	r2, r1, #15
   1acf2:	110d      	asrs	r5, r1, #4
   1acf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1acf8:	06e9      	lsls	r1, r5, #27
   1acfa:	e9d3 6700 	ldrd	r6, r7, [r3]
   1acfe:	f140 81ae 	bpl.w	1b05e <_dtoa_r+0xaf6>
   1ad02:	4bb4      	ldr	r3, [pc, #720]	; (1afd4 <_dtoa_r+0xa6c>)
   1ad04:	4650      	mov	r0, sl
   1ad06:	4659      	mov	r1, fp
   1ad08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1ad0c:	f7f8 f8d2 	bl	12eb4 <__aeabi_ddiv>
   1ad10:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   1ad14:	f005 050f 	and.w	r5, r5, #15
   1ad18:	f04f 0a03 	mov.w	sl, #3
   1ad1c:	b18d      	cbz	r5, 1ad42 <_dtoa_r+0x7da>
   1ad1e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 1afd4 <_dtoa_r+0xa6c>
   1ad22:	07ea      	lsls	r2, r5, #31
   1ad24:	d509      	bpl.n	1ad3a <_dtoa_r+0x7d2>
   1ad26:	4630      	mov	r0, r6
   1ad28:	4639      	mov	r1, r7
   1ad2a:	e9d8 2300 	ldrd	r2, r3, [r8]
   1ad2e:	f7f7 ff97 	bl	12c60 <__aeabi_dmul>
   1ad32:	f10a 0a01 	add.w	sl, sl, #1
   1ad36:	4606      	mov	r6, r0
   1ad38:	460f      	mov	r7, r1
   1ad3a:	106d      	asrs	r5, r5, #1
   1ad3c:	f108 0808 	add.w	r8, r8, #8
   1ad40:	d1ef      	bne.n	1ad22 <_dtoa_r+0x7ba>
   1ad42:	463b      	mov	r3, r7
   1ad44:	4632      	mov	r2, r6
   1ad46:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   1ad4a:	f7f8 f8b3 	bl	12eb4 <__aeabi_ddiv>
   1ad4e:	4607      	mov	r7, r0
   1ad50:	4688      	mov	r8, r1
   1ad52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ad54:	b143      	cbz	r3, 1ad68 <_dtoa_r+0x800>
   1ad56:	2200      	movs	r2, #0
   1ad58:	4b9f      	ldr	r3, [pc, #636]	; (1afd8 <_dtoa_r+0xa70>)
   1ad5a:	4638      	mov	r0, r7
   1ad5c:	4641      	mov	r1, r8
   1ad5e:	f7f8 f9f1 	bl	13144 <__aeabi_dcmplt>
   1ad62:	2800      	cmp	r0, #0
   1ad64:	f040 8286 	bne.w	1b274 <_dtoa_r+0xd0c>
   1ad68:	4650      	mov	r0, sl
   1ad6a:	f7f7 ff13 	bl	12b94 <__aeabi_i2d>
   1ad6e:	463a      	mov	r2, r7
   1ad70:	4643      	mov	r3, r8
   1ad72:	f7f7 ff75 	bl	12c60 <__aeabi_dmul>
   1ad76:	4b99      	ldr	r3, [pc, #612]	; (1afdc <_dtoa_r+0xa74>)
   1ad78:	2200      	movs	r2, #0
   1ad7a:	f7f7 fdbf 	bl	128fc <__adddf3>
   1ad7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ad80:	4605      	mov	r5, r0
   1ad82:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   1ad86:	2b00      	cmp	r3, #0
   1ad88:	f000 813e 	beq.w	1b008 <_dtoa_r+0xaa0>
   1ad8c:	9b02      	ldr	r3, [sp, #8]
   1ad8e:	9315      	str	r3, [sp, #84]	; 0x54
   1ad90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ad92:	9312      	str	r3, [sp, #72]	; 0x48
   1ad94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ad96:	2b00      	cmp	r3, #0
   1ad98:	f000 81fa 	beq.w	1b190 <_dtoa_r+0xc28>
   1ad9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1ad9e:	4b8c      	ldr	r3, [pc, #560]	; (1afd0 <_dtoa_r+0xa68>)
   1ada0:	498f      	ldr	r1, [pc, #572]	; (1afe0 <_dtoa_r+0xa78>)
   1ada2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1ada6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1adaa:	2000      	movs	r0, #0
   1adac:	f7f8 f882 	bl	12eb4 <__aeabi_ddiv>
   1adb0:	462a      	mov	r2, r5
   1adb2:	4633      	mov	r3, r6
   1adb4:	f7f7 fda0 	bl	128f8 <__aeabi_dsub>
   1adb8:	4682      	mov	sl, r0
   1adba:	468b      	mov	fp, r1
   1adbc:	4638      	mov	r0, r7
   1adbe:	4641      	mov	r1, r8
   1adc0:	f7f8 f9e8 	bl	13194 <__aeabi_d2iz>
   1adc4:	4605      	mov	r5, r0
   1adc6:	f7f7 fee5 	bl	12b94 <__aeabi_i2d>
   1adca:	4602      	mov	r2, r0
   1adcc:	460b      	mov	r3, r1
   1adce:	4638      	mov	r0, r7
   1add0:	4641      	mov	r1, r8
   1add2:	f7f7 fd91 	bl	128f8 <__aeabi_dsub>
   1add6:	3530      	adds	r5, #48	; 0x30
   1add8:	fa5f f885 	uxtb.w	r8, r5
   1addc:	9d04      	ldr	r5, [sp, #16]
   1adde:	4606      	mov	r6, r0
   1ade0:	460f      	mov	r7, r1
   1ade2:	f885 8000 	strb.w	r8, [r5]
   1ade6:	4602      	mov	r2, r0
   1ade8:	460b      	mov	r3, r1
   1adea:	4650      	mov	r0, sl
   1adec:	4659      	mov	r1, fp
   1adee:	3501      	adds	r5, #1
   1adf0:	f7f8 f9c6 	bl	13180 <__aeabi_dcmpgt>
   1adf4:	2800      	cmp	r0, #0
   1adf6:	d154      	bne.n	1aea2 <_dtoa_r+0x93a>
   1adf8:	4632      	mov	r2, r6
   1adfa:	463b      	mov	r3, r7
   1adfc:	2000      	movs	r0, #0
   1adfe:	4976      	ldr	r1, [pc, #472]	; (1afd8 <_dtoa_r+0xa70>)
   1ae00:	f7f7 fd7a 	bl	128f8 <__aeabi_dsub>
   1ae04:	4602      	mov	r2, r0
   1ae06:	460b      	mov	r3, r1
   1ae08:	4650      	mov	r0, sl
   1ae0a:	4659      	mov	r1, fp
   1ae0c:	f7f8 f9b8 	bl	13180 <__aeabi_dcmpgt>
   1ae10:	2800      	cmp	r0, #0
   1ae12:	f040 8270 	bne.w	1b2f6 <_dtoa_r+0xd8e>
   1ae16:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1ae18:	2a01      	cmp	r2, #1
   1ae1a:	f000 8111 	beq.w	1b040 <_dtoa_r+0xad8>
   1ae1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ae20:	9a04      	ldr	r2, [sp, #16]
   1ae22:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   1ae26:	4413      	add	r3, r2
   1ae28:	4699      	mov	r9, r3
   1ae2a:	e00d      	b.n	1ae48 <_dtoa_r+0x8e0>
   1ae2c:	2000      	movs	r0, #0
   1ae2e:	496a      	ldr	r1, [pc, #424]	; (1afd8 <_dtoa_r+0xa70>)
   1ae30:	f7f7 fd62 	bl	128f8 <__aeabi_dsub>
   1ae34:	4652      	mov	r2, sl
   1ae36:	465b      	mov	r3, fp
   1ae38:	f7f8 f984 	bl	13144 <__aeabi_dcmplt>
   1ae3c:	2800      	cmp	r0, #0
   1ae3e:	f040 8258 	bne.w	1b2f2 <_dtoa_r+0xd8a>
   1ae42:	454d      	cmp	r5, r9
   1ae44:	f000 80fa 	beq.w	1b03c <_dtoa_r+0xad4>
   1ae48:	4650      	mov	r0, sl
   1ae4a:	4659      	mov	r1, fp
   1ae4c:	2200      	movs	r2, #0
   1ae4e:	4b65      	ldr	r3, [pc, #404]	; (1afe4 <_dtoa_r+0xa7c>)
   1ae50:	f7f7 ff06 	bl	12c60 <__aeabi_dmul>
   1ae54:	2200      	movs	r2, #0
   1ae56:	4b63      	ldr	r3, [pc, #396]	; (1afe4 <_dtoa_r+0xa7c>)
   1ae58:	4682      	mov	sl, r0
   1ae5a:	468b      	mov	fp, r1
   1ae5c:	4630      	mov	r0, r6
   1ae5e:	4639      	mov	r1, r7
   1ae60:	f7f7 fefe 	bl	12c60 <__aeabi_dmul>
   1ae64:	460f      	mov	r7, r1
   1ae66:	4606      	mov	r6, r0
   1ae68:	f7f8 f994 	bl	13194 <__aeabi_d2iz>
   1ae6c:	4680      	mov	r8, r0
   1ae6e:	f7f7 fe91 	bl	12b94 <__aeabi_i2d>
   1ae72:	4602      	mov	r2, r0
   1ae74:	460b      	mov	r3, r1
   1ae76:	4630      	mov	r0, r6
   1ae78:	4639      	mov	r1, r7
   1ae7a:	f7f7 fd3d 	bl	128f8 <__aeabi_dsub>
   1ae7e:	f108 0830 	add.w	r8, r8, #48	; 0x30
   1ae82:	fa5f f888 	uxtb.w	r8, r8
   1ae86:	4652      	mov	r2, sl
   1ae88:	465b      	mov	r3, fp
   1ae8a:	f805 8b01 	strb.w	r8, [r5], #1
   1ae8e:	4606      	mov	r6, r0
   1ae90:	460f      	mov	r7, r1
   1ae92:	f7f8 f957 	bl	13144 <__aeabi_dcmplt>
   1ae96:	4632      	mov	r2, r6
   1ae98:	463b      	mov	r3, r7
   1ae9a:	2800      	cmp	r0, #0
   1ae9c:	d0c6      	beq.n	1ae2c <_dtoa_r+0x8c4>
   1ae9e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   1aea2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1aea4:	9302      	str	r3, [sp, #8]
   1aea6:	e523      	b.n	1a8f0 <_dtoa_r+0x388>
   1aea8:	2300      	movs	r3, #0
   1aeaa:	930b      	str	r3, [sp, #44]	; 0x2c
   1aeac:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1aeae:	2b00      	cmp	r3, #0
   1aeb0:	f340 80dc 	ble.w	1b06c <_dtoa_r+0xb04>
   1aeb4:	461f      	mov	r7, r3
   1aeb6:	461e      	mov	r6, r3
   1aeb8:	930f      	str	r3, [sp, #60]	; 0x3c
   1aeba:	930a      	str	r3, [sp, #40]	; 0x28
   1aebc:	e6f6      	b.n	1acac <_dtoa_r+0x744>
   1aebe:	2301      	movs	r3, #1
   1aec0:	930b      	str	r3, [sp, #44]	; 0x2c
   1aec2:	e7f3      	b.n	1aeac <_dtoa_r+0x944>
   1aec4:	f1ba 0f00 	cmp.w	sl, #0
   1aec8:	f47f ada8 	bne.w	1aa1c <_dtoa_r+0x4b4>
   1aecc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1aed0:	2b00      	cmp	r3, #0
   1aed2:	f47f adba 	bne.w	1aa4a <_dtoa_r+0x4e2>
   1aed6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   1aeda:	0d3f      	lsrs	r7, r7, #20
   1aedc:	053f      	lsls	r7, r7, #20
   1aede:	2f00      	cmp	r7, #0
   1aee0:	f000 820d 	beq.w	1b2fe <_dtoa_r+0xd96>
   1aee4:	9b08      	ldr	r3, [sp, #32]
   1aee6:	3301      	adds	r3, #1
   1aee8:	9308      	str	r3, [sp, #32]
   1aeea:	9b06      	ldr	r3, [sp, #24]
   1aeec:	3301      	adds	r3, #1
   1aeee:	9306      	str	r3, [sp, #24]
   1aef0:	2301      	movs	r3, #1
   1aef2:	930c      	str	r3, [sp, #48]	; 0x30
   1aef4:	e5ab      	b.n	1aa4e <_dtoa_r+0x4e6>
   1aef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1aef8:	2b00      	cmp	r3, #0
   1aefa:	f73f ac42 	bgt.w	1a782 <_dtoa_r+0x21a>
   1aefe:	f040 8221 	bne.w	1b344 <_dtoa_r+0xddc>
   1af02:	2200      	movs	r2, #0
   1af04:	4b38      	ldr	r3, [pc, #224]	; (1afe8 <_dtoa_r+0xa80>)
   1af06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1af0a:	f7f7 fea9 	bl	12c60 <__aeabi_dmul>
   1af0e:	4652      	mov	r2, sl
   1af10:	465b      	mov	r3, fp
   1af12:	f7f8 f92b 	bl	1316c <__aeabi_dcmpge>
   1af16:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   1af1a:	4646      	mov	r6, r8
   1af1c:	2800      	cmp	r0, #0
   1af1e:	d041      	beq.n	1afa4 <_dtoa_r+0xa3c>
   1af20:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1af22:	9d04      	ldr	r5, [sp, #16]
   1af24:	43db      	mvns	r3, r3
   1af26:	9302      	str	r3, [sp, #8]
   1af28:	4641      	mov	r1, r8
   1af2a:	4620      	mov	r0, r4
   1af2c:	f000 fdd0 	bl	1bad0 <_Bfree>
   1af30:	2e00      	cmp	r6, #0
   1af32:	f43f acdd 	beq.w	1a8f0 <_dtoa_r+0x388>
   1af36:	e6a7      	b.n	1ac88 <_dtoa_r+0x720>
   1af38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1af3a:	4649      	mov	r1, r9
   1af3c:	4620      	mov	r0, r4
   1af3e:	f000 fefd 	bl	1bd3c <__pow5mult>
   1af42:	4681      	mov	r9, r0
   1af44:	e558      	b.n	1a9f8 <_dtoa_r+0x490>
   1af46:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1af48:	2a00      	cmp	r2, #0
   1af4a:	f000 8187 	beq.w	1b25c <_dtoa_r+0xcf4>
   1af4e:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1af52:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1af54:	9d08      	ldr	r5, [sp, #32]
   1af56:	e4f2      	b.n	1a93e <_dtoa_r+0x3d6>
   1af58:	f1ba 0f00 	cmp.w	sl, #0
   1af5c:	f47f ad75 	bne.w	1aa4a <_dtoa_r+0x4e2>
   1af60:	e7b4      	b.n	1aecc <_dtoa_r+0x964>
   1af62:	f000 fdbf 	bl	1bae4 <__multadd>
   1af66:	4647      	mov	r7, r8
   1af68:	4606      	mov	r6, r0
   1af6a:	4683      	mov	fp, r0
   1af6c:	e5be      	b.n	1aaec <_dtoa_r+0x584>
   1af6e:	4601      	mov	r1, r0
   1af70:	4620      	mov	r0, r4
   1af72:	9306      	str	r3, [sp, #24]
   1af74:	f000 fdac 	bl	1bad0 <_Bfree>
   1af78:	2201      	movs	r2, #1
   1af7a:	9b06      	ldr	r3, [sp, #24]
   1af7c:	e5e0      	b.n	1ab40 <_dtoa_r+0x5d8>
   1af7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1af80:	2b02      	cmp	r3, #2
   1af82:	f77f ad96 	ble.w	1aab2 <_dtoa_r+0x54a>
   1af86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1af88:	2b00      	cmp	r3, #0
   1af8a:	d1c9      	bne.n	1af20 <_dtoa_r+0x9b8>
   1af8c:	4641      	mov	r1, r8
   1af8e:	2205      	movs	r2, #5
   1af90:	4620      	mov	r0, r4
   1af92:	f000 fda7 	bl	1bae4 <__multadd>
   1af96:	4601      	mov	r1, r0
   1af98:	4680      	mov	r8, r0
   1af9a:	4648      	mov	r0, r9
   1af9c:	f000 ff70 	bl	1be80 <__mcmp>
   1afa0:	2800      	cmp	r0, #0
   1afa2:	ddbd      	ble.n	1af20 <_dtoa_r+0x9b8>
   1afa4:	9a02      	ldr	r2, [sp, #8]
   1afa6:	9904      	ldr	r1, [sp, #16]
   1afa8:	2331      	movs	r3, #49	; 0x31
   1afaa:	3201      	adds	r2, #1
   1afac:	9202      	str	r2, [sp, #8]
   1afae:	700b      	strb	r3, [r1, #0]
   1afb0:	1c4d      	adds	r5, r1, #1
   1afb2:	e7b9      	b.n	1af28 <_dtoa_r+0x9c0>
   1afb4:	9a02      	ldr	r2, [sp, #8]
   1afb6:	3201      	adds	r2, #1
   1afb8:	9202      	str	r2, [sp, #8]
   1afba:	9a04      	ldr	r2, [sp, #16]
   1afbc:	2331      	movs	r3, #49	; 0x31
   1afbe:	7013      	strb	r3, [r2, #0]
   1afc0:	e652      	b.n	1ac68 <_dtoa_r+0x700>
   1afc2:	2301      	movs	r3, #1
   1afc4:	930b      	str	r3, [sp, #44]	; 0x2c
   1afc6:	e666      	b.n	1ac96 <_dtoa_r+0x72e>
   1afc8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   1afcc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1afce:	e48f      	b.n	1a8f0 <_dtoa_r+0x388>
   1afd0:	00025168 	.word	0x00025168
   1afd4:	00025140 	.word	0x00025140
   1afd8:	3ff00000 	.word	0x3ff00000
   1afdc:	401c0000 	.word	0x401c0000
   1afe0:	3fe00000 	.word	0x3fe00000
   1afe4:	40240000 	.word	0x40240000
   1afe8:	40140000 	.word	0x40140000
   1afec:	4650      	mov	r0, sl
   1afee:	f7f7 fdd1 	bl	12b94 <__aeabi_i2d>
   1aff2:	463a      	mov	r2, r7
   1aff4:	4643      	mov	r3, r8
   1aff6:	f7f7 fe33 	bl	12c60 <__aeabi_dmul>
   1affa:	2200      	movs	r2, #0
   1affc:	4bc1      	ldr	r3, [pc, #772]	; (1b304 <_dtoa_r+0xd9c>)
   1affe:	f7f7 fc7d 	bl	128fc <__adddf3>
   1b002:	4605      	mov	r5, r0
   1b004:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   1b008:	4641      	mov	r1, r8
   1b00a:	2200      	movs	r2, #0
   1b00c:	4bbe      	ldr	r3, [pc, #760]	; (1b308 <_dtoa_r+0xda0>)
   1b00e:	4638      	mov	r0, r7
   1b010:	f7f7 fc72 	bl	128f8 <__aeabi_dsub>
   1b014:	462a      	mov	r2, r5
   1b016:	4633      	mov	r3, r6
   1b018:	4682      	mov	sl, r0
   1b01a:	468b      	mov	fp, r1
   1b01c:	f7f8 f8b0 	bl	13180 <__aeabi_dcmpgt>
   1b020:	4680      	mov	r8, r0
   1b022:	2800      	cmp	r0, #0
   1b024:	f040 8110 	bne.w	1b248 <_dtoa_r+0xce0>
   1b028:	462a      	mov	r2, r5
   1b02a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   1b02e:	4650      	mov	r0, sl
   1b030:	4659      	mov	r1, fp
   1b032:	f7f8 f887 	bl	13144 <__aeabi_dcmplt>
   1b036:	b118      	cbz	r0, 1b040 <_dtoa_r+0xad8>
   1b038:	4646      	mov	r6, r8
   1b03a:	e771      	b.n	1af20 <_dtoa_r+0x9b8>
   1b03c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   1b040:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   1b044:	f7ff bb8a 	b.w	1a75c <_dtoa_r+0x1f4>
   1b048:	9804      	ldr	r0, [sp, #16]
   1b04a:	f7ff babb 	b.w	1a5c4 <_dtoa_r+0x5c>
   1b04e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b050:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1b052:	970c      	str	r7, [sp, #48]	; 0x30
   1b054:	1afb      	subs	r3, r7, r3
   1b056:	441a      	add	r2, r3
   1b058:	920d      	str	r2, [sp, #52]	; 0x34
   1b05a:	2700      	movs	r7, #0
   1b05c:	e469      	b.n	1a932 <_dtoa_r+0x3ca>
   1b05e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   1b062:	f04f 0a02 	mov.w	sl, #2
   1b066:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   1b06a:	e657      	b.n	1ad1c <_dtoa_r+0x7b4>
   1b06c:	2100      	movs	r1, #0
   1b06e:	2301      	movs	r3, #1
   1b070:	6461      	str	r1, [r4, #68]	; 0x44
   1b072:	4620      	mov	r0, r4
   1b074:	9325      	str	r3, [sp, #148]	; 0x94
   1b076:	f000 fd05 	bl	1ba84 <_Balloc>
   1b07a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1b07c:	9004      	str	r0, [sp, #16]
   1b07e:	6420      	str	r0, [r4, #64]	; 0x40
   1b080:	930a      	str	r3, [sp, #40]	; 0x28
   1b082:	930f      	str	r3, [sp, #60]	; 0x3c
   1b084:	e629      	b.n	1acda <_dtoa_r+0x772>
   1b086:	2a00      	cmp	r2, #0
   1b088:	46d0      	mov	r8, sl
   1b08a:	f8cd b018 	str.w	fp, [sp, #24]
   1b08e:	469a      	mov	sl, r3
   1b090:	dd11      	ble.n	1b0b6 <_dtoa_r+0xb4e>
   1b092:	4649      	mov	r1, r9
   1b094:	2201      	movs	r2, #1
   1b096:	4620      	mov	r0, r4
   1b098:	f000 fea0 	bl	1bddc <__lshift>
   1b09c:	4641      	mov	r1, r8
   1b09e:	4681      	mov	r9, r0
   1b0a0:	f000 feee 	bl	1be80 <__mcmp>
   1b0a4:	2800      	cmp	r0, #0
   1b0a6:	f340 8146 	ble.w	1b336 <_dtoa_r+0xdce>
   1b0aa:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   1b0ae:	f000 8106 	beq.w	1b2be <_dtoa_r+0xd56>
   1b0b2:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   1b0b6:	46b3      	mov	fp, r6
   1b0b8:	f887 a000 	strb.w	sl, [r7]
   1b0bc:	1c7d      	adds	r5, r7, #1
   1b0be:	9e06      	ldr	r6, [sp, #24]
   1b0c0:	e5d2      	b.n	1ac68 <_dtoa_r+0x700>
   1b0c2:	d104      	bne.n	1b0ce <_dtoa_r+0xb66>
   1b0c4:	f01a 0f01 	tst.w	sl, #1
   1b0c8:	d001      	beq.n	1b0ce <_dtoa_r+0xb66>
   1b0ca:	e5bd      	b.n	1ac48 <_dtoa_r+0x6e0>
   1b0cc:	4615      	mov	r5, r2
   1b0ce:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1b0d2:	2b30      	cmp	r3, #48	; 0x30
   1b0d4:	f105 32ff 	add.w	r2, r5, #4294967295
   1b0d8:	d0f8      	beq.n	1b0cc <_dtoa_r+0xb64>
   1b0da:	e5c5      	b.n	1ac68 <_dtoa_r+0x700>
   1b0dc:	9904      	ldr	r1, [sp, #16]
   1b0de:	2230      	movs	r2, #48	; 0x30
   1b0e0:	700a      	strb	r2, [r1, #0]
   1b0e2:	9a02      	ldr	r2, [sp, #8]
   1b0e4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   1b0e8:	3201      	adds	r2, #1
   1b0ea:	9202      	str	r2, [sp, #8]
   1b0ec:	f7ff bbfc 	b.w	1a8e8 <_dtoa_r+0x380>
   1b0f0:	f000 80bb 	beq.w	1b26a <_dtoa_r+0xd02>
   1b0f4:	9b02      	ldr	r3, [sp, #8]
   1b0f6:	425d      	negs	r5, r3
   1b0f8:	4b84      	ldr	r3, [pc, #528]	; (1b30c <_dtoa_r+0xda4>)
   1b0fa:	f005 020f 	and.w	r2, r5, #15
   1b0fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1b102:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b106:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1b10a:	f7f7 fda9 	bl	12c60 <__aeabi_dmul>
   1b10e:	112d      	asrs	r5, r5, #4
   1b110:	4607      	mov	r7, r0
   1b112:	4688      	mov	r8, r1
   1b114:	f000 812c 	beq.w	1b370 <_dtoa_r+0xe08>
   1b118:	4e7d      	ldr	r6, [pc, #500]	; (1b310 <_dtoa_r+0xda8>)
   1b11a:	f04f 0a02 	mov.w	sl, #2
   1b11e:	07eb      	lsls	r3, r5, #31
   1b120:	d509      	bpl.n	1b136 <_dtoa_r+0xbce>
   1b122:	4638      	mov	r0, r7
   1b124:	4641      	mov	r1, r8
   1b126:	e9d6 2300 	ldrd	r2, r3, [r6]
   1b12a:	f7f7 fd99 	bl	12c60 <__aeabi_dmul>
   1b12e:	f10a 0a01 	add.w	sl, sl, #1
   1b132:	4607      	mov	r7, r0
   1b134:	4688      	mov	r8, r1
   1b136:	106d      	asrs	r5, r5, #1
   1b138:	f106 0608 	add.w	r6, r6, #8
   1b13c:	d1ef      	bne.n	1b11e <_dtoa_r+0xbb6>
   1b13e:	e608      	b.n	1ad52 <_dtoa_r+0x7ea>
   1b140:	6871      	ldr	r1, [r6, #4]
   1b142:	4620      	mov	r0, r4
   1b144:	f000 fc9e 	bl	1ba84 <_Balloc>
   1b148:	6933      	ldr	r3, [r6, #16]
   1b14a:	3302      	adds	r3, #2
   1b14c:	009a      	lsls	r2, r3, #2
   1b14e:	4605      	mov	r5, r0
   1b150:	f106 010c 	add.w	r1, r6, #12
   1b154:	300c      	adds	r0, #12
   1b156:	f7fa fbb3 	bl	158c0 <memcpy>
   1b15a:	4629      	mov	r1, r5
   1b15c:	2201      	movs	r2, #1
   1b15e:	4620      	mov	r0, r4
   1b160:	f000 fe3c 	bl	1bddc <__lshift>
   1b164:	9006      	str	r0, [sp, #24]
   1b166:	e4b5      	b.n	1aad4 <_dtoa_r+0x56c>
   1b168:	2b39      	cmp	r3, #57	; 0x39
   1b16a:	f8cd b018 	str.w	fp, [sp, #24]
   1b16e:	46d0      	mov	r8, sl
   1b170:	f000 80a5 	beq.w	1b2be <_dtoa_r+0xd56>
   1b174:	f103 0a01 	add.w	sl, r3, #1
   1b178:	46b3      	mov	fp, r6
   1b17a:	f887 a000 	strb.w	sl, [r7]
   1b17e:	1c7d      	adds	r5, r7, #1
   1b180:	9e06      	ldr	r6, [sp, #24]
   1b182:	e571      	b.n	1ac68 <_dtoa_r+0x700>
   1b184:	465a      	mov	r2, fp
   1b186:	46d0      	mov	r8, sl
   1b188:	46b3      	mov	fp, r6
   1b18a:	469a      	mov	sl, r3
   1b18c:	4616      	mov	r6, r2
   1b18e:	e54f      	b.n	1ac30 <_dtoa_r+0x6c8>
   1b190:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b192:	495e      	ldr	r1, [pc, #376]	; (1b30c <_dtoa_r+0xda4>)
   1b194:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1b198:	462a      	mov	r2, r5
   1b19a:	4633      	mov	r3, r6
   1b19c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   1b1a0:	f7f7 fd5e 	bl	12c60 <__aeabi_dmul>
   1b1a4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   1b1a8:	4638      	mov	r0, r7
   1b1aa:	4641      	mov	r1, r8
   1b1ac:	f7f7 fff2 	bl	13194 <__aeabi_d2iz>
   1b1b0:	4605      	mov	r5, r0
   1b1b2:	f7f7 fcef 	bl	12b94 <__aeabi_i2d>
   1b1b6:	460b      	mov	r3, r1
   1b1b8:	4602      	mov	r2, r0
   1b1ba:	4641      	mov	r1, r8
   1b1bc:	4638      	mov	r0, r7
   1b1be:	f7f7 fb9b 	bl	128f8 <__aeabi_dsub>
   1b1c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b1c4:	460f      	mov	r7, r1
   1b1c6:	9904      	ldr	r1, [sp, #16]
   1b1c8:	3530      	adds	r5, #48	; 0x30
   1b1ca:	2b01      	cmp	r3, #1
   1b1cc:	700d      	strb	r5, [r1, #0]
   1b1ce:	4606      	mov	r6, r0
   1b1d0:	f101 0501 	add.w	r5, r1, #1
   1b1d4:	d026      	beq.n	1b224 <_dtoa_r+0xcbc>
   1b1d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b1d8:	9a04      	ldr	r2, [sp, #16]
   1b1da:	f8df b13c 	ldr.w	fp, [pc, #316]	; 1b318 <_dtoa_r+0xdb0>
   1b1de:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   1b1e2:	4413      	add	r3, r2
   1b1e4:	f04f 0a00 	mov.w	sl, #0
   1b1e8:	4699      	mov	r9, r3
   1b1ea:	4652      	mov	r2, sl
   1b1ec:	465b      	mov	r3, fp
   1b1ee:	4630      	mov	r0, r6
   1b1f0:	4639      	mov	r1, r7
   1b1f2:	f7f7 fd35 	bl	12c60 <__aeabi_dmul>
   1b1f6:	460f      	mov	r7, r1
   1b1f8:	4606      	mov	r6, r0
   1b1fa:	f7f7 ffcb 	bl	13194 <__aeabi_d2iz>
   1b1fe:	4680      	mov	r8, r0
   1b200:	f7f7 fcc8 	bl	12b94 <__aeabi_i2d>
   1b204:	f108 0830 	add.w	r8, r8, #48	; 0x30
   1b208:	4602      	mov	r2, r0
   1b20a:	460b      	mov	r3, r1
   1b20c:	4630      	mov	r0, r6
   1b20e:	4639      	mov	r1, r7
   1b210:	f7f7 fb72 	bl	128f8 <__aeabi_dsub>
   1b214:	f805 8b01 	strb.w	r8, [r5], #1
   1b218:	454d      	cmp	r5, r9
   1b21a:	4606      	mov	r6, r0
   1b21c:	460f      	mov	r7, r1
   1b21e:	d1e4      	bne.n	1b1ea <_dtoa_r+0xc82>
   1b220:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   1b224:	4b3b      	ldr	r3, [pc, #236]	; (1b314 <_dtoa_r+0xdac>)
   1b226:	2200      	movs	r2, #0
   1b228:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   1b22c:	f7f7 fb66 	bl	128fc <__adddf3>
   1b230:	4632      	mov	r2, r6
   1b232:	463b      	mov	r3, r7
   1b234:	f7f7 ff86 	bl	13144 <__aeabi_dcmplt>
   1b238:	2800      	cmp	r0, #0
   1b23a:	d046      	beq.n	1b2ca <_dtoa_r+0xd62>
   1b23c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1b23e:	9302      	str	r3, [sp, #8]
   1b240:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   1b244:	f7ff bb43 	b.w	1a8ce <_dtoa_r+0x366>
   1b248:	f04f 0800 	mov.w	r8, #0
   1b24c:	4646      	mov	r6, r8
   1b24e:	e6a9      	b.n	1afa4 <_dtoa_r+0xa3c>
   1b250:	9b08      	ldr	r3, [sp, #32]
   1b252:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b254:	1a9d      	subs	r5, r3, r2
   1b256:	2300      	movs	r3, #0
   1b258:	f7ff bb71 	b.w	1a93e <_dtoa_r+0x3d6>
   1b25c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1b25e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1b260:	9d08      	ldr	r5, [sp, #32]
   1b262:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1b266:	f7ff bb6a 	b.w	1a93e <_dtoa_r+0x3d6>
   1b26a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   1b26e:	f04f 0a02 	mov.w	sl, #2
   1b272:	e56e      	b.n	1ad52 <_dtoa_r+0x7ea>
   1b274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b276:	2b00      	cmp	r3, #0
   1b278:	f43f aeb8 	beq.w	1afec <_dtoa_r+0xa84>
   1b27c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b27e:	2b00      	cmp	r3, #0
   1b280:	f77f aede 	ble.w	1b040 <_dtoa_r+0xad8>
   1b284:	2200      	movs	r2, #0
   1b286:	4b24      	ldr	r3, [pc, #144]	; (1b318 <_dtoa_r+0xdb0>)
   1b288:	4638      	mov	r0, r7
   1b28a:	4641      	mov	r1, r8
   1b28c:	f7f7 fce8 	bl	12c60 <__aeabi_dmul>
   1b290:	4607      	mov	r7, r0
   1b292:	4688      	mov	r8, r1
   1b294:	f10a 0001 	add.w	r0, sl, #1
   1b298:	f7f7 fc7c 	bl	12b94 <__aeabi_i2d>
   1b29c:	463a      	mov	r2, r7
   1b29e:	4643      	mov	r3, r8
   1b2a0:	f7f7 fcde 	bl	12c60 <__aeabi_dmul>
   1b2a4:	2200      	movs	r2, #0
   1b2a6:	4b17      	ldr	r3, [pc, #92]	; (1b304 <_dtoa_r+0xd9c>)
   1b2a8:	f7f7 fb28 	bl	128fc <__adddf3>
   1b2ac:	9a02      	ldr	r2, [sp, #8]
   1b2ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b2b0:	9312      	str	r3, [sp, #72]	; 0x48
   1b2b2:	3a01      	subs	r2, #1
   1b2b4:	4605      	mov	r5, r0
   1b2b6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   1b2ba:	9215      	str	r2, [sp, #84]	; 0x54
   1b2bc:	e56a      	b.n	1ad94 <_dtoa_r+0x82c>
   1b2be:	2239      	movs	r2, #57	; 0x39
   1b2c0:	46b3      	mov	fp, r6
   1b2c2:	703a      	strb	r2, [r7, #0]
   1b2c4:	9e06      	ldr	r6, [sp, #24]
   1b2c6:	1c7d      	adds	r5, r7, #1
   1b2c8:	e4c0      	b.n	1ac4c <_dtoa_r+0x6e4>
   1b2ca:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   1b2ce:	2000      	movs	r0, #0
   1b2d0:	4910      	ldr	r1, [pc, #64]	; (1b314 <_dtoa_r+0xdac>)
   1b2d2:	f7f7 fb11 	bl	128f8 <__aeabi_dsub>
   1b2d6:	4632      	mov	r2, r6
   1b2d8:	463b      	mov	r3, r7
   1b2da:	f7f7 ff51 	bl	13180 <__aeabi_dcmpgt>
   1b2de:	b908      	cbnz	r0, 1b2e4 <_dtoa_r+0xd7c>
   1b2e0:	e6ae      	b.n	1b040 <_dtoa_r+0xad8>
   1b2e2:	4615      	mov	r5, r2
   1b2e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1b2e8:	2b30      	cmp	r3, #48	; 0x30
   1b2ea:	f105 32ff 	add.w	r2, r5, #4294967295
   1b2ee:	d0f8      	beq.n	1b2e2 <_dtoa_r+0xd7a>
   1b2f0:	e5d7      	b.n	1aea2 <_dtoa_r+0x93a>
   1b2f2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   1b2f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1b2f8:	9302      	str	r3, [sp, #8]
   1b2fa:	f7ff bae8 	b.w	1a8ce <_dtoa_r+0x366>
   1b2fe:	970c      	str	r7, [sp, #48]	; 0x30
   1b300:	f7ff bba5 	b.w	1aa4e <_dtoa_r+0x4e6>
   1b304:	401c0000 	.word	0x401c0000
   1b308:	40140000 	.word	0x40140000
   1b30c:	00025168 	.word	0x00025168
   1b310:	00025140 	.word	0x00025140
   1b314:	3fe00000 	.word	0x3fe00000
   1b318:	40240000 	.word	0x40240000
   1b31c:	2b39      	cmp	r3, #57	; 0x39
   1b31e:	f8cd b018 	str.w	fp, [sp, #24]
   1b322:	46d0      	mov	r8, sl
   1b324:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   1b328:	469a      	mov	sl, r3
   1b32a:	d0c8      	beq.n	1b2be <_dtoa_r+0xd56>
   1b32c:	f1bb 0f00 	cmp.w	fp, #0
   1b330:	f73f aebf 	bgt.w	1b0b2 <_dtoa_r+0xb4a>
   1b334:	e6bf      	b.n	1b0b6 <_dtoa_r+0xb4e>
   1b336:	f47f aebe 	bne.w	1b0b6 <_dtoa_r+0xb4e>
   1b33a:	f01a 0f01 	tst.w	sl, #1
   1b33e:	f43f aeba 	beq.w	1b0b6 <_dtoa_r+0xb4e>
   1b342:	e6b2      	b.n	1b0aa <_dtoa_r+0xb42>
   1b344:	f04f 0800 	mov.w	r8, #0
   1b348:	4646      	mov	r6, r8
   1b34a:	e5e9      	b.n	1af20 <_dtoa_r+0x9b8>
   1b34c:	4631      	mov	r1, r6
   1b34e:	2300      	movs	r3, #0
   1b350:	220a      	movs	r2, #10
   1b352:	4620      	mov	r0, r4
   1b354:	f000 fbc6 	bl	1bae4 <__multadd>
   1b358:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b35a:	2b00      	cmp	r3, #0
   1b35c:	4606      	mov	r6, r0
   1b35e:	dd0a      	ble.n	1b376 <_dtoa_r+0xe0e>
   1b360:	930a      	str	r3, [sp, #40]	; 0x28
   1b362:	f7ff bbaa 	b.w	1aaba <_dtoa_r+0x552>
   1b366:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1b368:	2b02      	cmp	r3, #2
   1b36a:	dc23      	bgt.n	1b3b4 <_dtoa_r+0xe4c>
   1b36c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b36e:	e43b      	b.n	1abe8 <_dtoa_r+0x680>
   1b370:	f04f 0a02 	mov.w	sl, #2
   1b374:	e4ed      	b.n	1ad52 <_dtoa_r+0x7ea>
   1b376:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1b378:	2b02      	cmp	r3, #2
   1b37a:	dc1b      	bgt.n	1b3b4 <_dtoa_r+0xe4c>
   1b37c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b37e:	e7ef      	b.n	1b360 <_dtoa_r+0xdf8>
   1b380:	2500      	movs	r5, #0
   1b382:	6465      	str	r5, [r4, #68]	; 0x44
   1b384:	4629      	mov	r1, r5
   1b386:	4620      	mov	r0, r4
   1b388:	f000 fb7c 	bl	1ba84 <_Balloc>
   1b38c:	f04f 33ff 	mov.w	r3, #4294967295
   1b390:	930a      	str	r3, [sp, #40]	; 0x28
   1b392:	930f      	str	r3, [sp, #60]	; 0x3c
   1b394:	2301      	movs	r3, #1
   1b396:	9004      	str	r0, [sp, #16]
   1b398:	9525      	str	r5, [sp, #148]	; 0x94
   1b39a:	6420      	str	r0, [r4, #64]	; 0x40
   1b39c:	930b      	str	r3, [sp, #44]	; 0x2c
   1b39e:	f7ff b9dd 	b.w	1a75c <_dtoa_r+0x1f4>
   1b3a2:	2501      	movs	r5, #1
   1b3a4:	f7ff b9a5 	b.w	1a6f2 <_dtoa_r+0x18a>
   1b3a8:	f43f ab69 	beq.w	1aa7e <_dtoa_r+0x516>
   1b3ac:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   1b3b0:	f7ff bbf9 	b.w	1aba6 <_dtoa_r+0x63e>
   1b3b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b3b6:	930a      	str	r3, [sp, #40]	; 0x28
   1b3b8:	e5e5      	b.n	1af86 <_dtoa_r+0xa1e>
   1b3ba:	bf00      	nop

0001b3bc <__sflush_r>:
   1b3bc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   1b3c0:	b29a      	uxth	r2, r3
   1b3c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b3c6:	460d      	mov	r5, r1
   1b3c8:	0711      	lsls	r1, r2, #28
   1b3ca:	4680      	mov	r8, r0
   1b3cc:	d43a      	bmi.n	1b444 <__sflush_r+0x88>
   1b3ce:	686a      	ldr	r2, [r5, #4]
   1b3d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1b3d4:	2a00      	cmp	r2, #0
   1b3d6:	81ab      	strh	r3, [r5, #12]
   1b3d8:	dd6f      	ble.n	1b4ba <__sflush_r+0xfe>
   1b3da:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1b3dc:	2c00      	cmp	r4, #0
   1b3de:	d049      	beq.n	1b474 <__sflush_r+0xb8>
   1b3e0:	2200      	movs	r2, #0
   1b3e2:	b29b      	uxth	r3, r3
   1b3e4:	f8d8 6000 	ldr.w	r6, [r8]
   1b3e8:	f8c8 2000 	str.w	r2, [r8]
   1b3ec:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   1b3f0:	d067      	beq.n	1b4c2 <__sflush_r+0x106>
   1b3f2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   1b3f4:	075f      	lsls	r7, r3, #29
   1b3f6:	d505      	bpl.n	1b404 <__sflush_r+0x48>
   1b3f8:	6869      	ldr	r1, [r5, #4]
   1b3fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1b3fc:	1a52      	subs	r2, r2, r1
   1b3fe:	b10b      	cbz	r3, 1b404 <__sflush_r+0x48>
   1b400:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1b402:	1ad2      	subs	r2, r2, r3
   1b404:	2300      	movs	r3, #0
   1b406:	69e9      	ldr	r1, [r5, #28]
   1b408:	4640      	mov	r0, r8
   1b40a:	47a0      	blx	r4
   1b40c:	1c44      	adds	r4, r0, #1
   1b40e:	d03c      	beq.n	1b48a <__sflush_r+0xce>
   1b410:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   1b414:	692a      	ldr	r2, [r5, #16]
   1b416:	602a      	str	r2, [r5, #0]
   1b418:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1b41c:	2200      	movs	r2, #0
   1b41e:	81ab      	strh	r3, [r5, #12]
   1b420:	04db      	lsls	r3, r3, #19
   1b422:	606a      	str	r2, [r5, #4]
   1b424:	d447      	bmi.n	1b4b6 <__sflush_r+0xfa>
   1b426:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1b428:	f8c8 6000 	str.w	r6, [r8]
   1b42c:	b311      	cbz	r1, 1b474 <__sflush_r+0xb8>
   1b42e:	f105 0340 	add.w	r3, r5, #64	; 0x40
   1b432:	4299      	cmp	r1, r3
   1b434:	d002      	beq.n	1b43c <__sflush_r+0x80>
   1b436:	4640      	mov	r0, r8
   1b438:	f000 f9de 	bl	1b7f8 <_free_r>
   1b43c:	2000      	movs	r0, #0
   1b43e:	6328      	str	r0, [r5, #48]	; 0x30
   1b440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b444:	692e      	ldr	r6, [r5, #16]
   1b446:	b1ae      	cbz	r6, 1b474 <__sflush_r+0xb8>
   1b448:	682c      	ldr	r4, [r5, #0]
   1b44a:	602e      	str	r6, [r5, #0]
   1b44c:	0791      	lsls	r1, r2, #30
   1b44e:	bf0c      	ite	eq
   1b450:	696b      	ldreq	r3, [r5, #20]
   1b452:	2300      	movne	r3, #0
   1b454:	1ba4      	subs	r4, r4, r6
   1b456:	60ab      	str	r3, [r5, #8]
   1b458:	e00a      	b.n	1b470 <__sflush_r+0xb4>
   1b45a:	4623      	mov	r3, r4
   1b45c:	4632      	mov	r2, r6
   1b45e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   1b460:	69e9      	ldr	r1, [r5, #28]
   1b462:	4640      	mov	r0, r8
   1b464:	47b8      	blx	r7
   1b466:	2800      	cmp	r0, #0
   1b468:	eba4 0400 	sub.w	r4, r4, r0
   1b46c:	4406      	add	r6, r0
   1b46e:	dd04      	ble.n	1b47a <__sflush_r+0xbe>
   1b470:	2c00      	cmp	r4, #0
   1b472:	dcf2      	bgt.n	1b45a <__sflush_r+0x9e>
   1b474:	2000      	movs	r0, #0
   1b476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b47a:	89ab      	ldrh	r3, [r5, #12]
   1b47c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b480:	81ab      	strh	r3, [r5, #12]
   1b482:	f04f 30ff 	mov.w	r0, #4294967295
   1b486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b48a:	f8d8 4000 	ldr.w	r4, [r8]
   1b48e:	2c1d      	cmp	r4, #29
   1b490:	d8f3      	bhi.n	1b47a <__sflush_r+0xbe>
   1b492:	4b19      	ldr	r3, [pc, #100]	; (1b4f8 <__sflush_r+0x13c>)
   1b494:	40e3      	lsrs	r3, r4
   1b496:	43db      	mvns	r3, r3
   1b498:	f013 0301 	ands.w	r3, r3, #1
   1b49c:	d1ed      	bne.n	1b47a <__sflush_r+0xbe>
   1b49e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   1b4a2:	606b      	str	r3, [r5, #4]
   1b4a4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
   1b4a8:	6929      	ldr	r1, [r5, #16]
   1b4aa:	81ab      	strh	r3, [r5, #12]
   1b4ac:	04da      	lsls	r2, r3, #19
   1b4ae:	6029      	str	r1, [r5, #0]
   1b4b0:	d5b9      	bpl.n	1b426 <__sflush_r+0x6a>
   1b4b2:	2c00      	cmp	r4, #0
   1b4b4:	d1b7      	bne.n	1b426 <__sflush_r+0x6a>
   1b4b6:	6528      	str	r0, [r5, #80]	; 0x50
   1b4b8:	e7b5      	b.n	1b426 <__sflush_r+0x6a>
   1b4ba:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   1b4bc:	2a00      	cmp	r2, #0
   1b4be:	dc8c      	bgt.n	1b3da <__sflush_r+0x1e>
   1b4c0:	e7d8      	b.n	1b474 <__sflush_r+0xb8>
   1b4c2:	2301      	movs	r3, #1
   1b4c4:	69e9      	ldr	r1, [r5, #28]
   1b4c6:	4640      	mov	r0, r8
   1b4c8:	47a0      	blx	r4
   1b4ca:	1c43      	adds	r3, r0, #1
   1b4cc:	4602      	mov	r2, r0
   1b4ce:	d002      	beq.n	1b4d6 <__sflush_r+0x11a>
   1b4d0:	89ab      	ldrh	r3, [r5, #12]
   1b4d2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1b4d4:	e78e      	b.n	1b3f4 <__sflush_r+0x38>
   1b4d6:	f8d8 3000 	ldr.w	r3, [r8]
   1b4da:	2b00      	cmp	r3, #0
   1b4dc:	d0f8      	beq.n	1b4d0 <__sflush_r+0x114>
   1b4de:	2b1d      	cmp	r3, #29
   1b4e0:	d001      	beq.n	1b4e6 <__sflush_r+0x12a>
   1b4e2:	2b16      	cmp	r3, #22
   1b4e4:	d102      	bne.n	1b4ec <__sflush_r+0x130>
   1b4e6:	f8c8 6000 	str.w	r6, [r8]
   1b4ea:	e7c3      	b.n	1b474 <__sflush_r+0xb8>
   1b4ec:	89ab      	ldrh	r3, [r5, #12]
   1b4ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b4f2:	81ab      	strh	r3, [r5, #12]
   1b4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b4f8:	20400001 	.word	0x20400001

0001b4fc <_fflush_r>:
   1b4fc:	b538      	push	{r3, r4, r5, lr}
   1b4fe:	460d      	mov	r5, r1
   1b500:	4604      	mov	r4, r0
   1b502:	b108      	cbz	r0, 1b508 <_fflush_r+0xc>
   1b504:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1b506:	b1bb      	cbz	r3, 1b538 <_fflush_r+0x3c>
   1b508:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   1b50c:	b188      	cbz	r0, 1b532 <_fflush_r+0x36>
   1b50e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1b510:	07db      	lsls	r3, r3, #31
   1b512:	d401      	bmi.n	1b518 <_fflush_r+0x1c>
   1b514:	0581      	lsls	r1, r0, #22
   1b516:	d517      	bpl.n	1b548 <_fflush_r+0x4c>
   1b518:	4620      	mov	r0, r4
   1b51a:	4629      	mov	r1, r5
   1b51c:	f7ff ff4e 	bl	1b3bc <__sflush_r>
   1b520:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1b522:	07da      	lsls	r2, r3, #31
   1b524:	4604      	mov	r4, r0
   1b526:	d402      	bmi.n	1b52e <_fflush_r+0x32>
   1b528:	89ab      	ldrh	r3, [r5, #12]
   1b52a:	059b      	lsls	r3, r3, #22
   1b52c:	d507      	bpl.n	1b53e <_fflush_r+0x42>
   1b52e:	4620      	mov	r0, r4
   1b530:	bd38      	pop	{r3, r4, r5, pc}
   1b532:	4604      	mov	r4, r0
   1b534:	4620      	mov	r0, r4
   1b536:	bd38      	pop	{r3, r4, r5, pc}
   1b538:	f000 f838 	bl	1b5ac <__sinit>
   1b53c:	e7e4      	b.n	1b508 <_fflush_r+0xc>
   1b53e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1b540:	f7f9 fde8 	bl	15114 <__retarget_lock_release_recursive>
   1b544:	4620      	mov	r0, r4
   1b546:	bd38      	pop	{r3, r4, r5, pc}
   1b548:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1b54a:	f7f9 fde1 	bl	15110 <__retarget_lock_acquire_recursive>
   1b54e:	e7e3      	b.n	1b518 <_fflush_r+0x1c>

0001b550 <_cleanup_r>:
   1b550:	4901      	ldr	r1, [pc, #4]	; (1b558 <_cleanup_r+0x8>)
   1b552:	f000 ba37 	b.w	1b9c4 <_fwalk_reent>
   1b556:	bf00      	nop
   1b558:	0001c201 	.word	0x0001c201

0001b55c <std.isra.0>:
   1b55c:	b510      	push	{r4, lr}
   1b55e:	2300      	movs	r3, #0
   1b560:	4604      	mov	r4, r0
   1b562:	8181      	strh	r1, [r0, #12]
   1b564:	81c2      	strh	r2, [r0, #14]
   1b566:	6003      	str	r3, [r0, #0]
   1b568:	6043      	str	r3, [r0, #4]
   1b56a:	6083      	str	r3, [r0, #8]
   1b56c:	6643      	str	r3, [r0, #100]	; 0x64
   1b56e:	6103      	str	r3, [r0, #16]
   1b570:	6143      	str	r3, [r0, #20]
   1b572:	6183      	str	r3, [r0, #24]
   1b574:	4619      	mov	r1, r3
   1b576:	2208      	movs	r2, #8
   1b578:	305c      	adds	r0, #92	; 0x5c
   1b57a:	f7fa fa9f 	bl	15abc <memset>
   1b57e:	4807      	ldr	r0, [pc, #28]	; (1b59c <std.isra.0+0x40>)
   1b580:	4907      	ldr	r1, [pc, #28]	; (1b5a0 <std.isra.0+0x44>)
   1b582:	4a08      	ldr	r2, [pc, #32]	; (1b5a4 <std.isra.0+0x48>)
   1b584:	4b08      	ldr	r3, [pc, #32]	; (1b5a8 <std.isra.0+0x4c>)
   1b586:	6220      	str	r0, [r4, #32]
   1b588:	61e4      	str	r4, [r4, #28]
   1b58a:	6261      	str	r1, [r4, #36]	; 0x24
   1b58c:	62a2      	str	r2, [r4, #40]	; 0x28
   1b58e:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b590:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1b594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b598:	f7f9 bdb6 	b.w	15108 <__retarget_lock_init_recursive>
   1b59c:	00016071 	.word	0x00016071
   1b5a0:	00016095 	.word	0x00016095
   1b5a4:	000160d1 	.word	0x000160d1
   1b5a8:	000160f1 	.word	0x000160f1

0001b5ac <__sinit>:
   1b5ac:	b510      	push	{r4, lr}
   1b5ae:	4604      	mov	r4, r0
   1b5b0:	4812      	ldr	r0, [pc, #72]	; (1b5fc <__sinit+0x50>)
   1b5b2:	f7f9 fdad 	bl	15110 <__retarget_lock_acquire_recursive>
   1b5b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1b5b8:	b9d2      	cbnz	r2, 1b5f0 <__sinit+0x44>
   1b5ba:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   1b5be:	4810      	ldr	r0, [pc, #64]	; (1b600 <__sinit+0x54>)
   1b5c0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   1b5c4:	2103      	movs	r1, #3
   1b5c6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   1b5ca:	63e0      	str	r0, [r4, #60]	; 0x3c
   1b5cc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   1b5d0:	6860      	ldr	r0, [r4, #4]
   1b5d2:	2104      	movs	r1, #4
   1b5d4:	f7ff ffc2 	bl	1b55c <std.isra.0>
   1b5d8:	2201      	movs	r2, #1
   1b5da:	2109      	movs	r1, #9
   1b5dc:	68a0      	ldr	r0, [r4, #8]
   1b5de:	f7ff ffbd 	bl	1b55c <std.isra.0>
   1b5e2:	2202      	movs	r2, #2
   1b5e4:	2112      	movs	r1, #18
   1b5e6:	68e0      	ldr	r0, [r4, #12]
   1b5e8:	f7ff ffb8 	bl	1b55c <std.isra.0>
   1b5ec:	2301      	movs	r3, #1
   1b5ee:	63a3      	str	r3, [r4, #56]	; 0x38
   1b5f0:	4802      	ldr	r0, [pc, #8]	; (1b5fc <__sinit+0x50>)
   1b5f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b5f6:	f7f9 bd8d 	b.w	15114 <__retarget_lock_release_recursive>
   1b5fa:	bf00      	nop
   1b5fc:	2000fcac 	.word	0x2000fcac
   1b600:	0001b551 	.word	0x0001b551

0001b604 <__sfp_lock_acquire>:
   1b604:	4801      	ldr	r0, [pc, #4]	; (1b60c <__sfp_lock_acquire+0x8>)
   1b606:	f7f9 bd83 	b.w	15110 <__retarget_lock_acquire_recursive>
   1b60a:	bf00      	nop
   1b60c:	2000fcb0 	.word	0x2000fcb0

0001b610 <__sfp_lock_release>:
   1b610:	4801      	ldr	r0, [pc, #4]	; (1b618 <__sfp_lock_release+0x8>)
   1b612:	f7f9 bd7f 	b.w	15114 <__retarget_lock_release_recursive>
   1b616:	bf00      	nop
   1b618:	2000fcb0 	.word	0x2000fcb0

0001b61c <__libc_fini_array>:
   1b61c:	b538      	push	{r3, r4, r5, lr}
   1b61e:	4c0a      	ldr	r4, [pc, #40]	; (1b648 <__libc_fini_array+0x2c>)
   1b620:	4d0a      	ldr	r5, [pc, #40]	; (1b64c <__libc_fini_array+0x30>)
   1b622:	1b64      	subs	r4, r4, r5
   1b624:	10a4      	asrs	r4, r4, #2
   1b626:	d00a      	beq.n	1b63e <__libc_fini_array+0x22>
   1b628:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   1b62c:	3b01      	subs	r3, #1
   1b62e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1b632:	3c01      	subs	r4, #1
   1b634:	f855 3904 	ldr.w	r3, [r5], #-4
   1b638:	4798      	blx	r3
   1b63a:	2c00      	cmp	r4, #0
   1b63c:	d1f9      	bne.n	1b632 <__libc_fini_array+0x16>
   1b63e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b642:	f009 bec5 	b.w	253d0 <_fini>
   1b646:	bf00      	nop
   1b648:	000253e0 	.word	0x000253e0
   1b64c:	000253dc 	.word	0x000253dc

0001b650 <__fputwc>:
   1b650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b654:	b082      	sub	sp, #8
   1b656:	4680      	mov	r8, r0
   1b658:	4689      	mov	r9, r1
   1b65a:	4614      	mov	r4, r2
   1b65c:	f7f9 fd46 	bl	150ec <__locale_mb_cur_max>
   1b660:	2801      	cmp	r0, #1
   1b662:	d036      	beq.n	1b6d2 <__fputwc+0x82>
   1b664:	464a      	mov	r2, r9
   1b666:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   1b66a:	a901      	add	r1, sp, #4
   1b66c:	4640      	mov	r0, r8
   1b66e:	f7fe fdb1 	bl	1a1d4 <_wcrtomb_r>
   1b672:	1c42      	adds	r2, r0, #1
   1b674:	4606      	mov	r6, r0
   1b676:	d025      	beq.n	1b6c4 <__fputwc+0x74>
   1b678:	b3a8      	cbz	r0, 1b6e6 <__fputwc+0x96>
   1b67a:	f89d e004 	ldrb.w	lr, [sp, #4]
   1b67e:	2500      	movs	r5, #0
   1b680:	f10d 0a04 	add.w	sl, sp, #4
   1b684:	e009      	b.n	1b69a <__fputwc+0x4a>
   1b686:	6823      	ldr	r3, [r4, #0]
   1b688:	1c5a      	adds	r2, r3, #1
   1b68a:	6022      	str	r2, [r4, #0]
   1b68c:	f883 e000 	strb.w	lr, [r3]
   1b690:	3501      	adds	r5, #1
   1b692:	42b5      	cmp	r5, r6
   1b694:	d227      	bcs.n	1b6e6 <__fputwc+0x96>
   1b696:	f815 e00a 	ldrb.w	lr, [r5, sl]
   1b69a:	68a3      	ldr	r3, [r4, #8]
   1b69c:	3b01      	subs	r3, #1
   1b69e:	2b00      	cmp	r3, #0
   1b6a0:	60a3      	str	r3, [r4, #8]
   1b6a2:	daf0      	bge.n	1b686 <__fputwc+0x36>
   1b6a4:	69a7      	ldr	r7, [r4, #24]
   1b6a6:	42bb      	cmp	r3, r7
   1b6a8:	4671      	mov	r1, lr
   1b6aa:	4622      	mov	r2, r4
   1b6ac:	4640      	mov	r0, r8
   1b6ae:	db02      	blt.n	1b6b6 <__fputwc+0x66>
   1b6b0:	f1be 0f0a 	cmp.w	lr, #10
   1b6b4:	d1e7      	bne.n	1b686 <__fputwc+0x36>
   1b6b6:	f7fe fd35 	bl	1a124 <__swbuf_r>
   1b6ba:	1c43      	adds	r3, r0, #1
   1b6bc:	d1e8      	bne.n	1b690 <__fputwc+0x40>
   1b6be:	b002      	add	sp, #8
   1b6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b6c4:	89a3      	ldrh	r3, [r4, #12]
   1b6c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b6ca:	81a3      	strh	r3, [r4, #12]
   1b6cc:	b002      	add	sp, #8
   1b6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b6d2:	f109 33ff 	add.w	r3, r9, #4294967295
   1b6d6:	2bfe      	cmp	r3, #254	; 0xfe
   1b6d8:	d8c4      	bhi.n	1b664 <__fputwc+0x14>
   1b6da:	fa5f fe89 	uxtb.w	lr, r9
   1b6de:	4606      	mov	r6, r0
   1b6e0:	f88d e004 	strb.w	lr, [sp, #4]
   1b6e4:	e7cb      	b.n	1b67e <__fputwc+0x2e>
   1b6e6:	4648      	mov	r0, r9
   1b6e8:	b002      	add	sp, #8
   1b6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b6ee:	bf00      	nop

0001b6f0 <_fputwc_r>:
   1b6f0:	b530      	push	{r4, r5, lr}
   1b6f2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1b6f4:	f013 0f01 	tst.w	r3, #1
   1b6f8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1b6fc:	4614      	mov	r4, r2
   1b6fe:	b083      	sub	sp, #12
   1b700:	4605      	mov	r5, r0
   1b702:	b29a      	uxth	r2, r3
   1b704:	d101      	bne.n	1b70a <_fputwc_r+0x1a>
   1b706:	0590      	lsls	r0, r2, #22
   1b708:	d51c      	bpl.n	1b744 <_fputwc_r+0x54>
   1b70a:	0490      	lsls	r0, r2, #18
   1b70c:	d406      	bmi.n	1b71c <_fputwc_r+0x2c>
   1b70e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1b710:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1b714:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1b718:	81a3      	strh	r3, [r4, #12]
   1b71a:	6662      	str	r2, [r4, #100]	; 0x64
   1b71c:	4628      	mov	r0, r5
   1b71e:	4622      	mov	r2, r4
   1b720:	f7ff ff96 	bl	1b650 <__fputwc>
   1b724:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1b726:	07da      	lsls	r2, r3, #31
   1b728:	4605      	mov	r5, r0
   1b72a:	d402      	bmi.n	1b732 <_fputwc_r+0x42>
   1b72c:	89a3      	ldrh	r3, [r4, #12]
   1b72e:	059b      	lsls	r3, r3, #22
   1b730:	d502      	bpl.n	1b738 <_fputwc_r+0x48>
   1b732:	4628      	mov	r0, r5
   1b734:	b003      	add	sp, #12
   1b736:	bd30      	pop	{r4, r5, pc}
   1b738:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1b73a:	f7f9 fceb 	bl	15114 <__retarget_lock_release_recursive>
   1b73e:	4628      	mov	r0, r5
   1b740:	b003      	add	sp, #12
   1b742:	bd30      	pop	{r4, r5, pc}
   1b744:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1b746:	9101      	str	r1, [sp, #4]
   1b748:	f7f9 fce2 	bl	15110 <__retarget_lock_acquire_recursive>
   1b74c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1b750:	9901      	ldr	r1, [sp, #4]
   1b752:	b29a      	uxth	r2, r3
   1b754:	e7d9      	b.n	1b70a <_fputwc_r+0x1a>
   1b756:	bf00      	nop

0001b758 <_malloc_trim_r>:
   1b758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b75a:	4f24      	ldr	r7, [pc, #144]	; (1b7ec <_malloc_trim_r+0x94>)
   1b75c:	460c      	mov	r4, r1
   1b75e:	4606      	mov	r6, r0
   1b760:	f7fa f9fa 	bl	15b58 <__malloc_lock>
   1b764:	68bb      	ldr	r3, [r7, #8]
   1b766:	685d      	ldr	r5, [r3, #4]
   1b768:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   1b76c:	310f      	adds	r1, #15
   1b76e:	f025 0503 	bic.w	r5, r5, #3
   1b772:	4429      	add	r1, r5
   1b774:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   1b778:	f021 010f 	bic.w	r1, r1, #15
   1b77c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   1b780:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   1b784:	db07      	blt.n	1b796 <_malloc_trim_r+0x3e>
   1b786:	2100      	movs	r1, #0
   1b788:	4630      	mov	r0, r6
   1b78a:	f7fa fbeb 	bl	15f64 <_sbrk_r>
   1b78e:	68bb      	ldr	r3, [r7, #8]
   1b790:	442b      	add	r3, r5
   1b792:	4298      	cmp	r0, r3
   1b794:	d004      	beq.n	1b7a0 <_malloc_trim_r+0x48>
   1b796:	4630      	mov	r0, r6
   1b798:	f7fa f9e4 	bl	15b64 <__malloc_unlock>
   1b79c:	2000      	movs	r0, #0
   1b79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b7a0:	4261      	negs	r1, r4
   1b7a2:	4630      	mov	r0, r6
   1b7a4:	f7fa fbde 	bl	15f64 <_sbrk_r>
   1b7a8:	3001      	adds	r0, #1
   1b7aa:	d00d      	beq.n	1b7c8 <_malloc_trim_r+0x70>
   1b7ac:	4b10      	ldr	r3, [pc, #64]	; (1b7f0 <_malloc_trim_r+0x98>)
   1b7ae:	68ba      	ldr	r2, [r7, #8]
   1b7b0:	6819      	ldr	r1, [r3, #0]
   1b7b2:	1b2d      	subs	r5, r5, r4
   1b7b4:	f045 0501 	orr.w	r5, r5, #1
   1b7b8:	4630      	mov	r0, r6
   1b7ba:	1b09      	subs	r1, r1, r4
   1b7bc:	6055      	str	r5, [r2, #4]
   1b7be:	6019      	str	r1, [r3, #0]
   1b7c0:	f7fa f9d0 	bl	15b64 <__malloc_unlock>
   1b7c4:	2001      	movs	r0, #1
   1b7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b7c8:	2100      	movs	r1, #0
   1b7ca:	4630      	mov	r0, r6
   1b7cc:	f7fa fbca 	bl	15f64 <_sbrk_r>
   1b7d0:	68ba      	ldr	r2, [r7, #8]
   1b7d2:	1a83      	subs	r3, r0, r2
   1b7d4:	2b0f      	cmp	r3, #15
   1b7d6:	ddde      	ble.n	1b796 <_malloc_trim_r+0x3e>
   1b7d8:	4c06      	ldr	r4, [pc, #24]	; (1b7f4 <_malloc_trim_r+0x9c>)
   1b7da:	4905      	ldr	r1, [pc, #20]	; (1b7f0 <_malloc_trim_r+0x98>)
   1b7dc:	6824      	ldr	r4, [r4, #0]
   1b7de:	f043 0301 	orr.w	r3, r3, #1
   1b7e2:	1b00      	subs	r0, r0, r4
   1b7e4:	6053      	str	r3, [r2, #4]
   1b7e6:	6008      	str	r0, [r1, #0]
   1b7e8:	e7d5      	b.n	1b796 <_malloc_trim_r+0x3e>
   1b7ea:	bf00      	nop
   1b7ec:	200005bc 	.word	0x200005bc
   1b7f0:	2000fc34 	.word	0x2000fc34
   1b7f4:	200009c4 	.word	0x200009c4

0001b7f8 <_free_r>:
   1b7f8:	2900      	cmp	r1, #0
   1b7fa:	d044      	beq.n	1b886 <_free_r+0x8e>
   1b7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b800:	460d      	mov	r5, r1
   1b802:	4680      	mov	r8, r0
   1b804:	f7fa f9a8 	bl	15b58 <__malloc_lock>
   1b808:	f855 7c04 	ldr.w	r7, [r5, #-4]
   1b80c:	4969      	ldr	r1, [pc, #420]	; (1b9b4 <_free_r+0x1bc>)
   1b80e:	f027 0301 	bic.w	r3, r7, #1
   1b812:	f1a5 0408 	sub.w	r4, r5, #8
   1b816:	18e2      	adds	r2, r4, r3
   1b818:	688e      	ldr	r6, [r1, #8]
   1b81a:	6850      	ldr	r0, [r2, #4]
   1b81c:	42b2      	cmp	r2, r6
   1b81e:	f020 0003 	bic.w	r0, r0, #3
   1b822:	d05e      	beq.n	1b8e2 <_free_r+0xea>
   1b824:	07fe      	lsls	r6, r7, #31
   1b826:	6050      	str	r0, [r2, #4]
   1b828:	d40b      	bmi.n	1b842 <_free_r+0x4a>
   1b82a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   1b82e:	1be4      	subs	r4, r4, r7
   1b830:	f101 0e08 	add.w	lr, r1, #8
   1b834:	68a5      	ldr	r5, [r4, #8]
   1b836:	4575      	cmp	r5, lr
   1b838:	443b      	add	r3, r7
   1b83a:	d06d      	beq.n	1b918 <_free_r+0x120>
   1b83c:	68e7      	ldr	r7, [r4, #12]
   1b83e:	60ef      	str	r7, [r5, #12]
   1b840:	60bd      	str	r5, [r7, #8]
   1b842:	1815      	adds	r5, r2, r0
   1b844:	686d      	ldr	r5, [r5, #4]
   1b846:	07ed      	lsls	r5, r5, #31
   1b848:	d53e      	bpl.n	1b8c8 <_free_r+0xd0>
   1b84a:	f043 0201 	orr.w	r2, r3, #1
   1b84e:	6062      	str	r2, [r4, #4]
   1b850:	50e3      	str	r3, [r4, r3]
   1b852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1b856:	d217      	bcs.n	1b888 <_free_r+0x90>
   1b858:	08db      	lsrs	r3, r3, #3
   1b85a:	1c58      	adds	r0, r3, #1
   1b85c:	109a      	asrs	r2, r3, #2
   1b85e:	684d      	ldr	r5, [r1, #4]
   1b860:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   1b864:	60a7      	str	r7, [r4, #8]
   1b866:	2301      	movs	r3, #1
   1b868:	4093      	lsls	r3, r2
   1b86a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   1b86e:	432b      	orrs	r3, r5
   1b870:	3a08      	subs	r2, #8
   1b872:	60e2      	str	r2, [r4, #12]
   1b874:	604b      	str	r3, [r1, #4]
   1b876:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   1b87a:	60fc      	str	r4, [r7, #12]
   1b87c:	4640      	mov	r0, r8
   1b87e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b882:	f7fa b96f 	b.w	15b64 <__malloc_unlock>
   1b886:	4770      	bx	lr
   1b888:	0a5a      	lsrs	r2, r3, #9
   1b88a:	2a04      	cmp	r2, #4
   1b88c:	d852      	bhi.n	1b934 <_free_r+0x13c>
   1b88e:	099a      	lsrs	r2, r3, #6
   1b890:	f102 0739 	add.w	r7, r2, #57	; 0x39
   1b894:	00ff      	lsls	r7, r7, #3
   1b896:	f102 0538 	add.w	r5, r2, #56	; 0x38
   1b89a:	19c8      	adds	r0, r1, r7
   1b89c:	59ca      	ldr	r2, [r1, r7]
   1b89e:	3808      	subs	r0, #8
   1b8a0:	4290      	cmp	r0, r2
   1b8a2:	d04f      	beq.n	1b944 <_free_r+0x14c>
   1b8a4:	6851      	ldr	r1, [r2, #4]
   1b8a6:	f021 0103 	bic.w	r1, r1, #3
   1b8aa:	428b      	cmp	r3, r1
   1b8ac:	d232      	bcs.n	1b914 <_free_r+0x11c>
   1b8ae:	6892      	ldr	r2, [r2, #8]
   1b8b0:	4290      	cmp	r0, r2
   1b8b2:	d1f7      	bne.n	1b8a4 <_free_r+0xac>
   1b8b4:	68c3      	ldr	r3, [r0, #12]
   1b8b6:	60a0      	str	r0, [r4, #8]
   1b8b8:	60e3      	str	r3, [r4, #12]
   1b8ba:	609c      	str	r4, [r3, #8]
   1b8bc:	60c4      	str	r4, [r0, #12]
   1b8be:	4640      	mov	r0, r8
   1b8c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b8c4:	f7fa b94e 	b.w	15b64 <__malloc_unlock>
   1b8c8:	6895      	ldr	r5, [r2, #8]
   1b8ca:	4f3b      	ldr	r7, [pc, #236]	; (1b9b8 <_free_r+0x1c0>)
   1b8cc:	42bd      	cmp	r5, r7
   1b8ce:	4403      	add	r3, r0
   1b8d0:	d040      	beq.n	1b954 <_free_r+0x15c>
   1b8d2:	68d0      	ldr	r0, [r2, #12]
   1b8d4:	60e8      	str	r0, [r5, #12]
   1b8d6:	f043 0201 	orr.w	r2, r3, #1
   1b8da:	6085      	str	r5, [r0, #8]
   1b8dc:	6062      	str	r2, [r4, #4]
   1b8de:	50e3      	str	r3, [r4, r3]
   1b8e0:	e7b7      	b.n	1b852 <_free_r+0x5a>
   1b8e2:	07ff      	lsls	r7, r7, #31
   1b8e4:	4403      	add	r3, r0
   1b8e6:	d407      	bmi.n	1b8f8 <_free_r+0x100>
   1b8e8:	f855 2c08 	ldr.w	r2, [r5, #-8]
   1b8ec:	1aa4      	subs	r4, r4, r2
   1b8ee:	4413      	add	r3, r2
   1b8f0:	68a0      	ldr	r0, [r4, #8]
   1b8f2:	68e2      	ldr	r2, [r4, #12]
   1b8f4:	60c2      	str	r2, [r0, #12]
   1b8f6:	6090      	str	r0, [r2, #8]
   1b8f8:	4a30      	ldr	r2, [pc, #192]	; (1b9bc <_free_r+0x1c4>)
   1b8fa:	6812      	ldr	r2, [r2, #0]
   1b8fc:	f043 0001 	orr.w	r0, r3, #1
   1b900:	4293      	cmp	r3, r2
   1b902:	6060      	str	r0, [r4, #4]
   1b904:	608c      	str	r4, [r1, #8]
   1b906:	d3b9      	bcc.n	1b87c <_free_r+0x84>
   1b908:	4b2d      	ldr	r3, [pc, #180]	; (1b9c0 <_free_r+0x1c8>)
   1b90a:	4640      	mov	r0, r8
   1b90c:	6819      	ldr	r1, [r3, #0]
   1b90e:	f7ff ff23 	bl	1b758 <_malloc_trim_r>
   1b912:	e7b3      	b.n	1b87c <_free_r+0x84>
   1b914:	4610      	mov	r0, r2
   1b916:	e7cd      	b.n	1b8b4 <_free_r+0xbc>
   1b918:	1811      	adds	r1, r2, r0
   1b91a:	6849      	ldr	r1, [r1, #4]
   1b91c:	07c9      	lsls	r1, r1, #31
   1b91e:	d444      	bmi.n	1b9aa <_free_r+0x1b2>
   1b920:	6891      	ldr	r1, [r2, #8]
   1b922:	68d2      	ldr	r2, [r2, #12]
   1b924:	60ca      	str	r2, [r1, #12]
   1b926:	4403      	add	r3, r0
   1b928:	f043 0001 	orr.w	r0, r3, #1
   1b92c:	6091      	str	r1, [r2, #8]
   1b92e:	6060      	str	r0, [r4, #4]
   1b930:	50e3      	str	r3, [r4, r3]
   1b932:	e7a3      	b.n	1b87c <_free_r+0x84>
   1b934:	2a14      	cmp	r2, #20
   1b936:	d816      	bhi.n	1b966 <_free_r+0x16e>
   1b938:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   1b93c:	00ff      	lsls	r7, r7, #3
   1b93e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   1b942:	e7aa      	b.n	1b89a <_free_r+0xa2>
   1b944:	10aa      	asrs	r2, r5, #2
   1b946:	2301      	movs	r3, #1
   1b948:	684d      	ldr	r5, [r1, #4]
   1b94a:	4093      	lsls	r3, r2
   1b94c:	432b      	orrs	r3, r5
   1b94e:	604b      	str	r3, [r1, #4]
   1b950:	4603      	mov	r3, r0
   1b952:	e7b0      	b.n	1b8b6 <_free_r+0xbe>
   1b954:	f043 0201 	orr.w	r2, r3, #1
   1b958:	614c      	str	r4, [r1, #20]
   1b95a:	610c      	str	r4, [r1, #16]
   1b95c:	60e5      	str	r5, [r4, #12]
   1b95e:	60a5      	str	r5, [r4, #8]
   1b960:	6062      	str	r2, [r4, #4]
   1b962:	50e3      	str	r3, [r4, r3]
   1b964:	e78a      	b.n	1b87c <_free_r+0x84>
   1b966:	2a54      	cmp	r2, #84	; 0x54
   1b968:	d806      	bhi.n	1b978 <_free_r+0x180>
   1b96a:	0b1a      	lsrs	r2, r3, #12
   1b96c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   1b970:	00ff      	lsls	r7, r7, #3
   1b972:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   1b976:	e790      	b.n	1b89a <_free_r+0xa2>
   1b978:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1b97c:	d806      	bhi.n	1b98c <_free_r+0x194>
   1b97e:	0bda      	lsrs	r2, r3, #15
   1b980:	f102 0778 	add.w	r7, r2, #120	; 0x78
   1b984:	00ff      	lsls	r7, r7, #3
   1b986:	f102 0577 	add.w	r5, r2, #119	; 0x77
   1b98a:	e786      	b.n	1b89a <_free_r+0xa2>
   1b98c:	f240 5054 	movw	r0, #1364	; 0x554
   1b990:	4282      	cmp	r2, r0
   1b992:	d806      	bhi.n	1b9a2 <_free_r+0x1aa>
   1b994:	0c9a      	lsrs	r2, r3, #18
   1b996:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   1b99a:	00ff      	lsls	r7, r7, #3
   1b99c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   1b9a0:	e77b      	b.n	1b89a <_free_r+0xa2>
   1b9a2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   1b9a6:	257e      	movs	r5, #126	; 0x7e
   1b9a8:	e777      	b.n	1b89a <_free_r+0xa2>
   1b9aa:	f043 0101 	orr.w	r1, r3, #1
   1b9ae:	6061      	str	r1, [r4, #4]
   1b9b0:	6013      	str	r3, [r2, #0]
   1b9b2:	e763      	b.n	1b87c <_free_r+0x84>
   1b9b4:	200005bc 	.word	0x200005bc
   1b9b8:	200005c4 	.word	0x200005c4
   1b9bc:	200009c8 	.word	0x200009c8
   1b9c0:	2000fc64 	.word	0x2000fc64

0001b9c4 <_fwalk_reent>:
   1b9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b9c8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   1b9cc:	d01f      	beq.n	1ba0e <_fwalk_reent+0x4a>
   1b9ce:	4688      	mov	r8, r1
   1b9d0:	4606      	mov	r6, r0
   1b9d2:	f04f 0900 	mov.w	r9, #0
   1b9d6:	687d      	ldr	r5, [r7, #4]
   1b9d8:	68bc      	ldr	r4, [r7, #8]
   1b9da:	3d01      	subs	r5, #1
   1b9dc:	d411      	bmi.n	1ba02 <_fwalk_reent+0x3e>
   1b9de:	89a3      	ldrh	r3, [r4, #12]
   1b9e0:	2b01      	cmp	r3, #1
   1b9e2:	f105 35ff 	add.w	r5, r5, #4294967295
   1b9e6:	d908      	bls.n	1b9fa <_fwalk_reent+0x36>
   1b9e8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   1b9ec:	3301      	adds	r3, #1
   1b9ee:	4621      	mov	r1, r4
   1b9f0:	4630      	mov	r0, r6
   1b9f2:	d002      	beq.n	1b9fa <_fwalk_reent+0x36>
   1b9f4:	47c0      	blx	r8
   1b9f6:	ea49 0900 	orr.w	r9, r9, r0
   1b9fa:	1c6b      	adds	r3, r5, #1
   1b9fc:	f104 0468 	add.w	r4, r4, #104	; 0x68
   1ba00:	d1ed      	bne.n	1b9de <_fwalk_reent+0x1a>
   1ba02:	683f      	ldr	r7, [r7, #0]
   1ba04:	2f00      	cmp	r7, #0
   1ba06:	d1e6      	bne.n	1b9d6 <_fwalk_reent+0x12>
   1ba08:	4648      	mov	r0, r9
   1ba0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ba0e:	46b9      	mov	r9, r7
   1ba10:	4648      	mov	r0, r9
   1ba12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ba16:	bf00      	nop

0001ba18 <_isatty_r>:
   1ba18:	b538      	push	{r3, r4, r5, lr}
   1ba1a:	4c07      	ldr	r4, [pc, #28]	; (1ba38 <_isatty_r+0x20>)
   1ba1c:	2300      	movs	r3, #0
   1ba1e:	4605      	mov	r5, r0
   1ba20:	4608      	mov	r0, r1
   1ba22:	6023      	str	r3, [r4, #0]
   1ba24:	f7e4 fe68 	bl	6f8 <_isatty>
   1ba28:	1c43      	adds	r3, r0, #1
   1ba2a:	d000      	beq.n	1ba2e <_isatty_r+0x16>
   1ba2c:	bd38      	pop	{r3, r4, r5, pc}
   1ba2e:	6823      	ldr	r3, [r4, #0]
   1ba30:	2b00      	cmp	r3, #0
   1ba32:	d0fb      	beq.n	1ba2c <_isatty_r+0x14>
   1ba34:	602b      	str	r3, [r5, #0]
   1ba36:	bd38      	pop	{r3, r4, r5, pc}
   1ba38:	2000fcc4 	.word	0x2000fcc4

0001ba3c <_localeconv_r>:
   1ba3c:	4a04      	ldr	r2, [pc, #16]	; (1ba50 <_localeconv_r+0x14>)
   1ba3e:	4b05      	ldr	r3, [pc, #20]	; (1ba54 <_localeconv_r+0x18>)
   1ba40:	6812      	ldr	r2, [r2, #0]
   1ba42:	6b50      	ldr	r0, [r2, #52]	; 0x34
   1ba44:	2800      	cmp	r0, #0
   1ba46:	bf08      	it	eq
   1ba48:	4618      	moveq	r0, r3
   1ba4a:	30f0      	adds	r0, #240	; 0xf0
   1ba4c:	4770      	bx	lr
   1ba4e:	bf00      	nop
   1ba50:	20000020 	.word	0x20000020
   1ba54:	20000450 	.word	0x20000450

0001ba58 <_lseek_r>:
   1ba58:	b570      	push	{r4, r5, r6, lr}
   1ba5a:	460d      	mov	r5, r1
   1ba5c:	4c08      	ldr	r4, [pc, #32]	; (1ba80 <_lseek_r+0x28>)
   1ba5e:	4611      	mov	r1, r2
   1ba60:	4606      	mov	r6, r0
   1ba62:	461a      	mov	r2, r3
   1ba64:	4628      	mov	r0, r5
   1ba66:	2300      	movs	r3, #0
   1ba68:	6023      	str	r3, [r4, #0]
   1ba6a:	f7e4 fe47 	bl	6fc <_lseek>
   1ba6e:	1c43      	adds	r3, r0, #1
   1ba70:	d000      	beq.n	1ba74 <_lseek_r+0x1c>
   1ba72:	bd70      	pop	{r4, r5, r6, pc}
   1ba74:	6823      	ldr	r3, [r4, #0]
   1ba76:	2b00      	cmp	r3, #0
   1ba78:	d0fb      	beq.n	1ba72 <_lseek_r+0x1a>
   1ba7a:	6033      	str	r3, [r6, #0]
   1ba7c:	bd70      	pop	{r4, r5, r6, pc}
   1ba7e:	bf00      	nop
   1ba80:	2000fcc4 	.word	0x2000fcc4

0001ba84 <_Balloc>:
   1ba84:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1ba86:	b570      	push	{r4, r5, r6, lr}
   1ba88:	4605      	mov	r5, r0
   1ba8a:	460c      	mov	r4, r1
   1ba8c:	b14b      	cbz	r3, 1baa2 <_Balloc+0x1e>
   1ba8e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1ba92:	b180      	cbz	r0, 1bab6 <_Balloc+0x32>
   1ba94:	6802      	ldr	r2, [r0, #0]
   1ba96:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   1ba9a:	2300      	movs	r3, #0
   1ba9c:	6103      	str	r3, [r0, #16]
   1ba9e:	60c3      	str	r3, [r0, #12]
   1baa0:	bd70      	pop	{r4, r5, r6, pc}
   1baa2:	2221      	movs	r2, #33	; 0x21
   1baa4:	2104      	movs	r1, #4
   1baa6:	f000 fb7b 	bl	1c1a0 <_calloc_r>
   1baaa:	64e8      	str	r0, [r5, #76]	; 0x4c
   1baac:	4603      	mov	r3, r0
   1baae:	2800      	cmp	r0, #0
   1bab0:	d1ed      	bne.n	1ba8e <_Balloc+0xa>
   1bab2:	2000      	movs	r0, #0
   1bab4:	bd70      	pop	{r4, r5, r6, pc}
   1bab6:	2101      	movs	r1, #1
   1bab8:	fa01 f604 	lsl.w	r6, r1, r4
   1babc:	1d72      	adds	r2, r6, #5
   1babe:	4628      	mov	r0, r5
   1bac0:	0092      	lsls	r2, r2, #2
   1bac2:	f000 fb6d 	bl	1c1a0 <_calloc_r>
   1bac6:	2800      	cmp	r0, #0
   1bac8:	d0f3      	beq.n	1bab2 <_Balloc+0x2e>
   1baca:	6044      	str	r4, [r0, #4]
   1bacc:	6086      	str	r6, [r0, #8]
   1bace:	e7e4      	b.n	1ba9a <_Balloc+0x16>

0001bad0 <_Bfree>:
   1bad0:	b131      	cbz	r1, 1bae0 <_Bfree+0x10>
   1bad2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1bad4:	684a      	ldr	r2, [r1, #4]
   1bad6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1bada:	6008      	str	r0, [r1, #0]
   1badc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   1bae0:	4770      	bx	lr
   1bae2:	bf00      	nop

0001bae4 <__multadd>:
   1bae4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bae6:	690c      	ldr	r4, [r1, #16]
   1bae8:	b083      	sub	sp, #12
   1baea:	460d      	mov	r5, r1
   1baec:	4606      	mov	r6, r0
   1baee:	f101 0e14 	add.w	lr, r1, #20
   1baf2:	2700      	movs	r7, #0
   1baf4:	f8de 0000 	ldr.w	r0, [lr]
   1baf8:	b281      	uxth	r1, r0
   1bafa:	fb02 3301 	mla	r3, r2, r1, r3
   1bafe:	0c01      	lsrs	r1, r0, #16
   1bb00:	0c18      	lsrs	r0, r3, #16
   1bb02:	fb02 0101 	mla	r1, r2, r1, r0
   1bb06:	b29b      	uxth	r3, r3
   1bb08:	3701      	adds	r7, #1
   1bb0a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   1bb0e:	42bc      	cmp	r4, r7
   1bb10:	f84e 3b04 	str.w	r3, [lr], #4
   1bb14:	ea4f 4311 	mov.w	r3, r1, lsr #16
   1bb18:	dcec      	bgt.n	1baf4 <__multadd+0x10>
   1bb1a:	b13b      	cbz	r3, 1bb2c <__multadd+0x48>
   1bb1c:	68aa      	ldr	r2, [r5, #8]
   1bb1e:	4294      	cmp	r4, r2
   1bb20:	da07      	bge.n	1bb32 <__multadd+0x4e>
   1bb22:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   1bb26:	3401      	adds	r4, #1
   1bb28:	6153      	str	r3, [r2, #20]
   1bb2a:	612c      	str	r4, [r5, #16]
   1bb2c:	4628      	mov	r0, r5
   1bb2e:	b003      	add	sp, #12
   1bb30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bb32:	6869      	ldr	r1, [r5, #4]
   1bb34:	9301      	str	r3, [sp, #4]
   1bb36:	3101      	adds	r1, #1
   1bb38:	4630      	mov	r0, r6
   1bb3a:	f7ff ffa3 	bl	1ba84 <_Balloc>
   1bb3e:	692a      	ldr	r2, [r5, #16]
   1bb40:	3202      	adds	r2, #2
   1bb42:	f105 010c 	add.w	r1, r5, #12
   1bb46:	4607      	mov	r7, r0
   1bb48:	0092      	lsls	r2, r2, #2
   1bb4a:	300c      	adds	r0, #12
   1bb4c:	f7f9 feb8 	bl	158c0 <memcpy>
   1bb50:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   1bb52:	6869      	ldr	r1, [r5, #4]
   1bb54:	9b01      	ldr	r3, [sp, #4]
   1bb56:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1bb5a:	6028      	str	r0, [r5, #0]
   1bb5c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   1bb60:	463d      	mov	r5, r7
   1bb62:	e7de      	b.n	1bb22 <__multadd+0x3e>

0001bb64 <__hi0bits>:
   1bb64:	0c02      	lsrs	r2, r0, #16
   1bb66:	0412      	lsls	r2, r2, #16
   1bb68:	4603      	mov	r3, r0
   1bb6a:	b9b2      	cbnz	r2, 1bb9a <__hi0bits+0x36>
   1bb6c:	0403      	lsls	r3, r0, #16
   1bb6e:	2010      	movs	r0, #16
   1bb70:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   1bb74:	bf04      	itt	eq
   1bb76:	021b      	lsleq	r3, r3, #8
   1bb78:	3008      	addeq	r0, #8
   1bb7a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   1bb7e:	bf04      	itt	eq
   1bb80:	011b      	lsleq	r3, r3, #4
   1bb82:	3004      	addeq	r0, #4
   1bb84:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   1bb88:	bf04      	itt	eq
   1bb8a:	009b      	lsleq	r3, r3, #2
   1bb8c:	3002      	addeq	r0, #2
   1bb8e:	2b00      	cmp	r3, #0
   1bb90:	db02      	blt.n	1bb98 <__hi0bits+0x34>
   1bb92:	005b      	lsls	r3, r3, #1
   1bb94:	d403      	bmi.n	1bb9e <__hi0bits+0x3a>
   1bb96:	2020      	movs	r0, #32
   1bb98:	4770      	bx	lr
   1bb9a:	2000      	movs	r0, #0
   1bb9c:	e7e8      	b.n	1bb70 <__hi0bits+0xc>
   1bb9e:	3001      	adds	r0, #1
   1bba0:	4770      	bx	lr
   1bba2:	bf00      	nop

0001bba4 <__lo0bits>:
   1bba4:	6803      	ldr	r3, [r0, #0]
   1bba6:	f013 0207 	ands.w	r2, r3, #7
   1bbaa:	4601      	mov	r1, r0
   1bbac:	d007      	beq.n	1bbbe <__lo0bits+0x1a>
   1bbae:	07da      	lsls	r2, r3, #31
   1bbb0:	d421      	bmi.n	1bbf6 <__lo0bits+0x52>
   1bbb2:	0798      	lsls	r0, r3, #30
   1bbb4:	d421      	bmi.n	1bbfa <__lo0bits+0x56>
   1bbb6:	089b      	lsrs	r3, r3, #2
   1bbb8:	600b      	str	r3, [r1, #0]
   1bbba:	2002      	movs	r0, #2
   1bbbc:	4770      	bx	lr
   1bbbe:	b298      	uxth	r0, r3
   1bbc0:	b198      	cbz	r0, 1bbea <__lo0bits+0x46>
   1bbc2:	4610      	mov	r0, r2
   1bbc4:	f013 0fff 	tst.w	r3, #255	; 0xff
   1bbc8:	bf04      	itt	eq
   1bbca:	0a1b      	lsreq	r3, r3, #8
   1bbcc:	3008      	addeq	r0, #8
   1bbce:	071a      	lsls	r2, r3, #28
   1bbd0:	bf04      	itt	eq
   1bbd2:	091b      	lsreq	r3, r3, #4
   1bbd4:	3004      	addeq	r0, #4
   1bbd6:	079a      	lsls	r2, r3, #30
   1bbd8:	bf04      	itt	eq
   1bbda:	089b      	lsreq	r3, r3, #2
   1bbdc:	3002      	addeq	r0, #2
   1bbde:	07da      	lsls	r2, r3, #31
   1bbe0:	d407      	bmi.n	1bbf2 <__lo0bits+0x4e>
   1bbe2:	085b      	lsrs	r3, r3, #1
   1bbe4:	d104      	bne.n	1bbf0 <__lo0bits+0x4c>
   1bbe6:	2020      	movs	r0, #32
   1bbe8:	4770      	bx	lr
   1bbea:	0c1b      	lsrs	r3, r3, #16
   1bbec:	2010      	movs	r0, #16
   1bbee:	e7e9      	b.n	1bbc4 <__lo0bits+0x20>
   1bbf0:	3001      	adds	r0, #1
   1bbf2:	600b      	str	r3, [r1, #0]
   1bbf4:	4770      	bx	lr
   1bbf6:	2000      	movs	r0, #0
   1bbf8:	4770      	bx	lr
   1bbfa:	085b      	lsrs	r3, r3, #1
   1bbfc:	600b      	str	r3, [r1, #0]
   1bbfe:	2001      	movs	r0, #1
   1bc00:	4770      	bx	lr
   1bc02:	bf00      	nop

0001bc04 <__i2b>:
   1bc04:	b510      	push	{r4, lr}
   1bc06:	460c      	mov	r4, r1
   1bc08:	2101      	movs	r1, #1
   1bc0a:	f7ff ff3b 	bl	1ba84 <_Balloc>
   1bc0e:	2201      	movs	r2, #1
   1bc10:	6144      	str	r4, [r0, #20]
   1bc12:	6102      	str	r2, [r0, #16]
   1bc14:	bd10      	pop	{r4, pc}
   1bc16:	bf00      	nop

0001bc18 <__multiply>:
   1bc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc1c:	690c      	ldr	r4, [r1, #16]
   1bc1e:	6915      	ldr	r5, [r2, #16]
   1bc20:	42ac      	cmp	r4, r5
   1bc22:	b083      	sub	sp, #12
   1bc24:	468b      	mov	fp, r1
   1bc26:	4616      	mov	r6, r2
   1bc28:	da04      	bge.n	1bc34 <__multiply+0x1c>
   1bc2a:	4622      	mov	r2, r4
   1bc2c:	46b3      	mov	fp, r6
   1bc2e:	462c      	mov	r4, r5
   1bc30:	460e      	mov	r6, r1
   1bc32:	4615      	mov	r5, r2
   1bc34:	f8db 3008 	ldr.w	r3, [fp, #8]
   1bc38:	f8db 1004 	ldr.w	r1, [fp, #4]
   1bc3c:	eb04 0805 	add.w	r8, r4, r5
   1bc40:	4598      	cmp	r8, r3
   1bc42:	bfc8      	it	gt
   1bc44:	3101      	addgt	r1, #1
   1bc46:	f7ff ff1d 	bl	1ba84 <_Balloc>
   1bc4a:	f100 0914 	add.w	r9, r0, #20
   1bc4e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   1bc52:	45d1      	cmp	r9, sl
   1bc54:	9000      	str	r0, [sp, #0]
   1bc56:	d205      	bcs.n	1bc64 <__multiply+0x4c>
   1bc58:	464b      	mov	r3, r9
   1bc5a:	2100      	movs	r1, #0
   1bc5c:	f843 1b04 	str.w	r1, [r3], #4
   1bc60:	459a      	cmp	sl, r3
   1bc62:	d8fb      	bhi.n	1bc5c <__multiply+0x44>
   1bc64:	f106 0c14 	add.w	ip, r6, #20
   1bc68:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   1bc6c:	f10b 0b14 	add.w	fp, fp, #20
   1bc70:	459c      	cmp	ip, r3
   1bc72:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   1bc76:	d24c      	bcs.n	1bd12 <__multiply+0xfa>
   1bc78:	f8cd a004 	str.w	sl, [sp, #4]
   1bc7c:	469a      	mov	sl, r3
   1bc7e:	f8dc 5000 	ldr.w	r5, [ip]
   1bc82:	b2af      	uxth	r7, r5
   1bc84:	b1ef      	cbz	r7, 1bcc2 <__multiply+0xaa>
   1bc86:	2100      	movs	r1, #0
   1bc88:	464d      	mov	r5, r9
   1bc8a:	465e      	mov	r6, fp
   1bc8c:	460c      	mov	r4, r1
   1bc8e:	f856 2b04 	ldr.w	r2, [r6], #4
   1bc92:	6828      	ldr	r0, [r5, #0]
   1bc94:	b293      	uxth	r3, r2
   1bc96:	b281      	uxth	r1, r0
   1bc98:	fb07 1303 	mla	r3, r7, r3, r1
   1bc9c:	0c12      	lsrs	r2, r2, #16
   1bc9e:	0c01      	lsrs	r1, r0, #16
   1bca0:	4423      	add	r3, r4
   1bca2:	fb07 1102 	mla	r1, r7, r2, r1
   1bca6:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   1bcaa:	b29b      	uxth	r3, r3
   1bcac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1bcb0:	45b6      	cmp	lr, r6
   1bcb2:	f845 3b04 	str.w	r3, [r5], #4
   1bcb6:	ea4f 4411 	mov.w	r4, r1, lsr #16
   1bcba:	d8e8      	bhi.n	1bc8e <__multiply+0x76>
   1bcbc:	602c      	str	r4, [r5, #0]
   1bcbe:	f8dc 5000 	ldr.w	r5, [ip]
   1bcc2:	0c2d      	lsrs	r5, r5, #16
   1bcc4:	d01d      	beq.n	1bd02 <__multiply+0xea>
   1bcc6:	f8d9 3000 	ldr.w	r3, [r9]
   1bcca:	4648      	mov	r0, r9
   1bccc:	461c      	mov	r4, r3
   1bcce:	4659      	mov	r1, fp
   1bcd0:	2200      	movs	r2, #0
   1bcd2:	880e      	ldrh	r6, [r1, #0]
   1bcd4:	0c24      	lsrs	r4, r4, #16
   1bcd6:	fb05 4406 	mla	r4, r5, r6, r4
   1bcda:	4422      	add	r2, r4
   1bcdc:	b29b      	uxth	r3, r3
   1bcde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1bce2:	f840 3b04 	str.w	r3, [r0], #4
   1bce6:	f851 3b04 	ldr.w	r3, [r1], #4
   1bcea:	6804      	ldr	r4, [r0, #0]
   1bcec:	0c1b      	lsrs	r3, r3, #16
   1bcee:	b2a6      	uxth	r6, r4
   1bcf0:	fb05 6303 	mla	r3, r5, r3, r6
   1bcf4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   1bcf8:	458e      	cmp	lr, r1
   1bcfa:	ea4f 4213 	mov.w	r2, r3, lsr #16
   1bcfe:	d8e8      	bhi.n	1bcd2 <__multiply+0xba>
   1bd00:	6003      	str	r3, [r0, #0]
   1bd02:	f10c 0c04 	add.w	ip, ip, #4
   1bd06:	45e2      	cmp	sl, ip
   1bd08:	f109 0904 	add.w	r9, r9, #4
   1bd0c:	d8b7      	bhi.n	1bc7e <__multiply+0x66>
   1bd0e:	f8dd a004 	ldr.w	sl, [sp, #4]
   1bd12:	f1b8 0f00 	cmp.w	r8, #0
   1bd16:	dd0b      	ble.n	1bd30 <__multiply+0x118>
   1bd18:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   1bd1c:	f1aa 0a04 	sub.w	sl, sl, #4
   1bd20:	b11b      	cbz	r3, 1bd2a <__multiply+0x112>
   1bd22:	e005      	b.n	1bd30 <__multiply+0x118>
   1bd24:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   1bd28:	b913      	cbnz	r3, 1bd30 <__multiply+0x118>
   1bd2a:	f1b8 0801 	subs.w	r8, r8, #1
   1bd2e:	d1f9      	bne.n	1bd24 <__multiply+0x10c>
   1bd30:	9800      	ldr	r0, [sp, #0]
   1bd32:	f8c0 8010 	str.w	r8, [r0, #16]
   1bd36:	b003      	add	sp, #12
   1bd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001bd3c <__pow5mult>:
   1bd3c:	f012 0303 	ands.w	r3, r2, #3
   1bd40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd44:	4614      	mov	r4, r2
   1bd46:	4607      	mov	r7, r0
   1bd48:	d12e      	bne.n	1bda8 <__pow5mult+0x6c>
   1bd4a:	460d      	mov	r5, r1
   1bd4c:	10a4      	asrs	r4, r4, #2
   1bd4e:	d01c      	beq.n	1bd8a <__pow5mult+0x4e>
   1bd50:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   1bd52:	b396      	cbz	r6, 1bdba <__pow5mult+0x7e>
   1bd54:	07e3      	lsls	r3, r4, #31
   1bd56:	f04f 0800 	mov.w	r8, #0
   1bd5a:	d406      	bmi.n	1bd6a <__pow5mult+0x2e>
   1bd5c:	1064      	asrs	r4, r4, #1
   1bd5e:	d014      	beq.n	1bd8a <__pow5mult+0x4e>
   1bd60:	6830      	ldr	r0, [r6, #0]
   1bd62:	b1a8      	cbz	r0, 1bd90 <__pow5mult+0x54>
   1bd64:	4606      	mov	r6, r0
   1bd66:	07e3      	lsls	r3, r4, #31
   1bd68:	d5f8      	bpl.n	1bd5c <__pow5mult+0x20>
   1bd6a:	4632      	mov	r2, r6
   1bd6c:	4629      	mov	r1, r5
   1bd6e:	4638      	mov	r0, r7
   1bd70:	f7ff ff52 	bl	1bc18 <__multiply>
   1bd74:	b1b5      	cbz	r5, 1bda4 <__pow5mult+0x68>
   1bd76:	686a      	ldr	r2, [r5, #4]
   1bd78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1bd7a:	1064      	asrs	r4, r4, #1
   1bd7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1bd80:	6029      	str	r1, [r5, #0]
   1bd82:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   1bd86:	4605      	mov	r5, r0
   1bd88:	d1ea      	bne.n	1bd60 <__pow5mult+0x24>
   1bd8a:	4628      	mov	r0, r5
   1bd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bd90:	4632      	mov	r2, r6
   1bd92:	4631      	mov	r1, r6
   1bd94:	4638      	mov	r0, r7
   1bd96:	f7ff ff3f 	bl	1bc18 <__multiply>
   1bd9a:	6030      	str	r0, [r6, #0]
   1bd9c:	f8c0 8000 	str.w	r8, [r0]
   1bda0:	4606      	mov	r6, r0
   1bda2:	e7e0      	b.n	1bd66 <__pow5mult+0x2a>
   1bda4:	4605      	mov	r5, r0
   1bda6:	e7d9      	b.n	1bd5c <__pow5mult+0x20>
   1bda8:	1e5a      	subs	r2, r3, #1
   1bdaa:	4d0b      	ldr	r5, [pc, #44]	; (1bdd8 <__pow5mult+0x9c>)
   1bdac:	2300      	movs	r3, #0
   1bdae:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   1bdb2:	f7ff fe97 	bl	1bae4 <__multadd>
   1bdb6:	4605      	mov	r5, r0
   1bdb8:	e7c8      	b.n	1bd4c <__pow5mult+0x10>
   1bdba:	2101      	movs	r1, #1
   1bdbc:	4638      	mov	r0, r7
   1bdbe:	f7ff fe61 	bl	1ba84 <_Balloc>
   1bdc2:	f240 2171 	movw	r1, #625	; 0x271
   1bdc6:	2201      	movs	r2, #1
   1bdc8:	2300      	movs	r3, #0
   1bdca:	6141      	str	r1, [r0, #20]
   1bdcc:	6102      	str	r2, [r0, #16]
   1bdce:	4606      	mov	r6, r0
   1bdd0:	64b8      	str	r0, [r7, #72]	; 0x48
   1bdd2:	6003      	str	r3, [r0, #0]
   1bdd4:	e7be      	b.n	1bd54 <__pow5mult+0x18>
   1bdd6:	bf00      	nop
   1bdd8:	00025230 	.word	0x00025230

0001bddc <__lshift>:
   1bddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bde0:	4691      	mov	r9, r2
   1bde2:	690a      	ldr	r2, [r1, #16]
   1bde4:	688b      	ldr	r3, [r1, #8]
   1bde6:	ea4f 1469 	mov.w	r4, r9, asr #5
   1bdea:	eb04 0802 	add.w	r8, r4, r2
   1bdee:	f108 0501 	add.w	r5, r8, #1
   1bdf2:	429d      	cmp	r5, r3
   1bdf4:	460e      	mov	r6, r1
   1bdf6:	4607      	mov	r7, r0
   1bdf8:	6849      	ldr	r1, [r1, #4]
   1bdfa:	dd04      	ble.n	1be06 <__lshift+0x2a>
   1bdfc:	005b      	lsls	r3, r3, #1
   1bdfe:	429d      	cmp	r5, r3
   1be00:	f101 0101 	add.w	r1, r1, #1
   1be04:	dcfa      	bgt.n	1bdfc <__lshift+0x20>
   1be06:	4638      	mov	r0, r7
   1be08:	f7ff fe3c 	bl	1ba84 <_Balloc>
   1be0c:	2c00      	cmp	r4, #0
   1be0e:	f100 0314 	add.w	r3, r0, #20
   1be12:	dd06      	ble.n	1be22 <__lshift+0x46>
   1be14:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   1be18:	2100      	movs	r1, #0
   1be1a:	f843 1b04 	str.w	r1, [r3], #4
   1be1e:	429a      	cmp	r2, r3
   1be20:	d1fb      	bne.n	1be1a <__lshift+0x3e>
   1be22:	6934      	ldr	r4, [r6, #16]
   1be24:	f106 0114 	add.w	r1, r6, #20
   1be28:	f019 091f 	ands.w	r9, r9, #31
   1be2c:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   1be30:	d01d      	beq.n	1be6e <__lshift+0x92>
   1be32:	f1c9 0c20 	rsb	ip, r9, #32
   1be36:	2200      	movs	r2, #0
   1be38:	680c      	ldr	r4, [r1, #0]
   1be3a:	fa04 f409 	lsl.w	r4, r4, r9
   1be3e:	4314      	orrs	r4, r2
   1be40:	f843 4b04 	str.w	r4, [r3], #4
   1be44:	f851 2b04 	ldr.w	r2, [r1], #4
   1be48:	458e      	cmp	lr, r1
   1be4a:	fa22 f20c 	lsr.w	r2, r2, ip
   1be4e:	d8f3      	bhi.n	1be38 <__lshift+0x5c>
   1be50:	601a      	str	r2, [r3, #0]
   1be52:	b10a      	cbz	r2, 1be58 <__lshift+0x7c>
   1be54:	f108 0502 	add.w	r5, r8, #2
   1be58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1be5a:	6872      	ldr	r2, [r6, #4]
   1be5c:	3d01      	subs	r5, #1
   1be5e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1be62:	6105      	str	r5, [r0, #16]
   1be64:	6031      	str	r1, [r6, #0]
   1be66:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   1be6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1be6e:	3b04      	subs	r3, #4
   1be70:	f851 2b04 	ldr.w	r2, [r1], #4
   1be74:	f843 2f04 	str.w	r2, [r3, #4]!
   1be78:	458e      	cmp	lr, r1
   1be7a:	d8f9      	bhi.n	1be70 <__lshift+0x94>
   1be7c:	e7ec      	b.n	1be58 <__lshift+0x7c>
   1be7e:	bf00      	nop

0001be80 <__mcmp>:
   1be80:	b430      	push	{r4, r5}
   1be82:	690b      	ldr	r3, [r1, #16]
   1be84:	4605      	mov	r5, r0
   1be86:	6900      	ldr	r0, [r0, #16]
   1be88:	1ac0      	subs	r0, r0, r3
   1be8a:	d10f      	bne.n	1beac <__mcmp+0x2c>
   1be8c:	009b      	lsls	r3, r3, #2
   1be8e:	3514      	adds	r5, #20
   1be90:	3114      	adds	r1, #20
   1be92:	4419      	add	r1, r3
   1be94:	442b      	add	r3, r5
   1be96:	e001      	b.n	1be9c <__mcmp+0x1c>
   1be98:	429d      	cmp	r5, r3
   1be9a:	d207      	bcs.n	1beac <__mcmp+0x2c>
   1be9c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   1bea0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   1bea4:	4294      	cmp	r4, r2
   1bea6:	d0f7      	beq.n	1be98 <__mcmp+0x18>
   1bea8:	d302      	bcc.n	1beb0 <__mcmp+0x30>
   1beaa:	2001      	movs	r0, #1
   1beac:	bc30      	pop	{r4, r5}
   1beae:	4770      	bx	lr
   1beb0:	f04f 30ff 	mov.w	r0, #4294967295
   1beb4:	e7fa      	b.n	1beac <__mcmp+0x2c>
   1beb6:	bf00      	nop

0001beb8 <__mdiff>:
   1beb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bebc:	690f      	ldr	r7, [r1, #16]
   1bebe:	460e      	mov	r6, r1
   1bec0:	6911      	ldr	r1, [r2, #16]
   1bec2:	1a7f      	subs	r7, r7, r1
   1bec4:	2f00      	cmp	r7, #0
   1bec6:	4690      	mov	r8, r2
   1bec8:	d117      	bne.n	1befa <__mdiff+0x42>
   1beca:	0089      	lsls	r1, r1, #2
   1becc:	f106 0514 	add.w	r5, r6, #20
   1bed0:	f102 0e14 	add.w	lr, r2, #20
   1bed4:	186b      	adds	r3, r5, r1
   1bed6:	4471      	add	r1, lr
   1bed8:	e001      	b.n	1bede <__mdiff+0x26>
   1beda:	429d      	cmp	r5, r3
   1bedc:	d25c      	bcs.n	1bf98 <__mdiff+0xe0>
   1bede:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1bee2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   1bee6:	42a2      	cmp	r2, r4
   1bee8:	d0f7      	beq.n	1beda <__mdiff+0x22>
   1beea:	d25e      	bcs.n	1bfaa <__mdiff+0xf2>
   1beec:	4633      	mov	r3, r6
   1beee:	462c      	mov	r4, r5
   1bef0:	4646      	mov	r6, r8
   1bef2:	4675      	mov	r5, lr
   1bef4:	4698      	mov	r8, r3
   1bef6:	2701      	movs	r7, #1
   1bef8:	e005      	b.n	1bf06 <__mdiff+0x4e>
   1befa:	db58      	blt.n	1bfae <__mdiff+0xf6>
   1befc:	f106 0514 	add.w	r5, r6, #20
   1bf00:	f108 0414 	add.w	r4, r8, #20
   1bf04:	2700      	movs	r7, #0
   1bf06:	6871      	ldr	r1, [r6, #4]
   1bf08:	f7ff fdbc 	bl	1ba84 <_Balloc>
   1bf0c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1bf10:	6936      	ldr	r6, [r6, #16]
   1bf12:	60c7      	str	r7, [r0, #12]
   1bf14:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   1bf18:	46a6      	mov	lr, r4
   1bf1a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   1bf1e:	f100 0414 	add.w	r4, r0, #20
   1bf22:	2300      	movs	r3, #0
   1bf24:	f85e 1b04 	ldr.w	r1, [lr], #4
   1bf28:	f855 8b04 	ldr.w	r8, [r5], #4
   1bf2c:	b28a      	uxth	r2, r1
   1bf2e:	fa13 f388 	uxtah	r3, r3, r8
   1bf32:	0c09      	lsrs	r1, r1, #16
   1bf34:	1a9a      	subs	r2, r3, r2
   1bf36:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   1bf3a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   1bf3e:	b292      	uxth	r2, r2
   1bf40:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   1bf44:	45f4      	cmp	ip, lr
   1bf46:	f844 2b04 	str.w	r2, [r4], #4
   1bf4a:	ea4f 4323 	mov.w	r3, r3, asr #16
   1bf4e:	d8e9      	bhi.n	1bf24 <__mdiff+0x6c>
   1bf50:	42af      	cmp	r7, r5
   1bf52:	d917      	bls.n	1bf84 <__mdiff+0xcc>
   1bf54:	46a4      	mov	ip, r4
   1bf56:	46ae      	mov	lr, r5
   1bf58:	f85e 2b04 	ldr.w	r2, [lr], #4
   1bf5c:	fa13 f382 	uxtah	r3, r3, r2
   1bf60:	1419      	asrs	r1, r3, #16
   1bf62:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   1bf66:	b29b      	uxth	r3, r3
   1bf68:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   1bf6c:	4577      	cmp	r7, lr
   1bf6e:	f84c 2b04 	str.w	r2, [ip], #4
   1bf72:	ea4f 4321 	mov.w	r3, r1, asr #16
   1bf76:	d8ef      	bhi.n	1bf58 <__mdiff+0xa0>
   1bf78:	43ed      	mvns	r5, r5
   1bf7a:	442f      	add	r7, r5
   1bf7c:	f027 0703 	bic.w	r7, r7, #3
   1bf80:	3704      	adds	r7, #4
   1bf82:	443c      	add	r4, r7
   1bf84:	3c04      	subs	r4, #4
   1bf86:	b922      	cbnz	r2, 1bf92 <__mdiff+0xda>
   1bf88:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   1bf8c:	3e01      	subs	r6, #1
   1bf8e:	2b00      	cmp	r3, #0
   1bf90:	d0fa      	beq.n	1bf88 <__mdiff+0xd0>
   1bf92:	6106      	str	r6, [r0, #16]
   1bf94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bf98:	2100      	movs	r1, #0
   1bf9a:	f7ff fd73 	bl	1ba84 <_Balloc>
   1bf9e:	2201      	movs	r2, #1
   1bfa0:	2300      	movs	r3, #0
   1bfa2:	6102      	str	r2, [r0, #16]
   1bfa4:	6143      	str	r3, [r0, #20]
   1bfa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bfaa:	4674      	mov	r4, lr
   1bfac:	e7ab      	b.n	1bf06 <__mdiff+0x4e>
   1bfae:	4633      	mov	r3, r6
   1bfb0:	f106 0414 	add.w	r4, r6, #20
   1bfb4:	f102 0514 	add.w	r5, r2, #20
   1bfb8:	4616      	mov	r6, r2
   1bfba:	2701      	movs	r7, #1
   1bfbc:	4698      	mov	r8, r3
   1bfbe:	e7a2      	b.n	1bf06 <__mdiff+0x4e>

0001bfc0 <__d2b>:
   1bfc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bfc4:	b082      	sub	sp, #8
   1bfc6:	2101      	movs	r1, #1
   1bfc8:	461c      	mov	r4, r3
   1bfca:	f3c3 570a 	ubfx	r7, r3, #20, #11
   1bfce:	4615      	mov	r5, r2
   1bfd0:	9e08      	ldr	r6, [sp, #32]
   1bfd2:	f7ff fd57 	bl	1ba84 <_Balloc>
   1bfd6:	f3c4 0413 	ubfx	r4, r4, #0, #20
   1bfda:	4680      	mov	r8, r0
   1bfdc:	b10f      	cbz	r7, 1bfe2 <__d2b+0x22>
   1bfde:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   1bfe2:	9401      	str	r4, [sp, #4]
   1bfe4:	b31d      	cbz	r5, 1c02e <__d2b+0x6e>
   1bfe6:	a802      	add	r0, sp, #8
   1bfe8:	f840 5d08 	str.w	r5, [r0, #-8]!
   1bfec:	f7ff fdda 	bl	1bba4 <__lo0bits>
   1bff0:	2800      	cmp	r0, #0
   1bff2:	d134      	bne.n	1c05e <__d2b+0x9e>
   1bff4:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1bff8:	f8c8 2014 	str.w	r2, [r8, #20]
   1bffc:	2b00      	cmp	r3, #0
   1bffe:	bf0c      	ite	eq
   1c000:	2101      	moveq	r1, #1
   1c002:	2102      	movne	r1, #2
   1c004:	f8c8 3018 	str.w	r3, [r8, #24]
   1c008:	f8c8 1010 	str.w	r1, [r8, #16]
   1c00c:	b9df      	cbnz	r7, 1c046 <__d2b+0x86>
   1c00e:	eb08 0381 	add.w	r3, r8, r1, lsl #2
   1c012:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   1c016:	6030      	str	r0, [r6, #0]
   1c018:	6918      	ldr	r0, [r3, #16]
   1c01a:	f7ff fda3 	bl	1bb64 <__hi0bits>
   1c01e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c020:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   1c024:	6018      	str	r0, [r3, #0]
   1c026:	4640      	mov	r0, r8
   1c028:	b002      	add	sp, #8
   1c02a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c02e:	a801      	add	r0, sp, #4
   1c030:	f7ff fdb8 	bl	1bba4 <__lo0bits>
   1c034:	9b01      	ldr	r3, [sp, #4]
   1c036:	f8c8 3014 	str.w	r3, [r8, #20]
   1c03a:	2101      	movs	r1, #1
   1c03c:	3020      	adds	r0, #32
   1c03e:	f8c8 1010 	str.w	r1, [r8, #16]
   1c042:	2f00      	cmp	r7, #0
   1c044:	d0e3      	beq.n	1c00e <__d2b+0x4e>
   1c046:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c048:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
   1c04c:	4407      	add	r7, r0
   1c04e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   1c052:	6037      	str	r7, [r6, #0]
   1c054:	6018      	str	r0, [r3, #0]
   1c056:	4640      	mov	r0, r8
   1c058:	b002      	add	sp, #8
   1c05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c05e:	e89d 000a 	ldmia.w	sp, {r1, r3}
   1c062:	f1c0 0220 	rsb	r2, r0, #32
   1c066:	fa03 f202 	lsl.w	r2, r3, r2
   1c06a:	430a      	orrs	r2, r1
   1c06c:	40c3      	lsrs	r3, r0
   1c06e:	9301      	str	r3, [sp, #4]
   1c070:	f8c8 2014 	str.w	r2, [r8, #20]
   1c074:	e7c2      	b.n	1bffc <__d2b+0x3c>
   1c076:	bf00      	nop

0001c078 <_read_r>:
   1c078:	b570      	push	{r4, r5, r6, lr}
   1c07a:	460d      	mov	r5, r1
   1c07c:	4c08      	ldr	r4, [pc, #32]	; (1c0a0 <_read_r+0x28>)
   1c07e:	4611      	mov	r1, r2
   1c080:	4606      	mov	r6, r0
   1c082:	461a      	mov	r2, r3
   1c084:	4628      	mov	r0, r5
   1c086:	2300      	movs	r3, #0
   1c088:	6023      	str	r3, [r4, #0]
   1c08a:	f7e4 fb19 	bl	6c0 <_read>
   1c08e:	1c43      	adds	r3, r0, #1
   1c090:	d000      	beq.n	1c094 <_read_r+0x1c>
   1c092:	bd70      	pop	{r4, r5, r6, pc}
   1c094:	6823      	ldr	r3, [r4, #0]
   1c096:	2b00      	cmp	r3, #0
   1c098:	d0fb      	beq.n	1c092 <_read_r+0x1a>
   1c09a:	6033      	str	r3, [r6, #0]
   1c09c:	bd70      	pop	{r4, r5, r6, pc}
   1c09e:	bf00      	nop
   1c0a0:	2000fcc4 	.word	0x2000fcc4

0001c0a4 <__ssprint_r>:
   1c0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0a8:	6893      	ldr	r3, [r2, #8]
   1c0aa:	b083      	sub	sp, #12
   1c0ac:	4690      	mov	r8, r2
   1c0ae:	2b00      	cmp	r3, #0
   1c0b0:	d070      	beq.n	1c194 <__ssprint_r+0xf0>
   1c0b2:	4682      	mov	sl, r0
   1c0b4:	460c      	mov	r4, r1
   1c0b6:	6817      	ldr	r7, [r2, #0]
   1c0b8:	688d      	ldr	r5, [r1, #8]
   1c0ba:	6808      	ldr	r0, [r1, #0]
   1c0bc:	e042      	b.n	1c144 <__ssprint_r+0xa0>
   1c0be:	89a3      	ldrh	r3, [r4, #12]
   1c0c0:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1c0c4:	d02e      	beq.n	1c124 <__ssprint_r+0x80>
   1c0c6:	6965      	ldr	r5, [r4, #20]
   1c0c8:	6921      	ldr	r1, [r4, #16]
   1c0ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1c0ce:	eba0 0b01 	sub.w	fp, r0, r1
   1c0d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1c0d6:	f10b 0001 	add.w	r0, fp, #1
   1c0da:	106d      	asrs	r5, r5, #1
   1c0dc:	4430      	add	r0, r6
   1c0de:	42a8      	cmp	r0, r5
   1c0e0:	462a      	mov	r2, r5
   1c0e2:	bf84      	itt	hi
   1c0e4:	4605      	movhi	r5, r0
   1c0e6:	462a      	movhi	r2, r5
   1c0e8:	055b      	lsls	r3, r3, #21
   1c0ea:	d538      	bpl.n	1c15e <__ssprint_r+0xba>
   1c0ec:	4611      	mov	r1, r2
   1c0ee:	4650      	mov	r0, sl
   1c0f0:	f7f9 f89a 	bl	15228 <_malloc_r>
   1c0f4:	2800      	cmp	r0, #0
   1c0f6:	d03c      	beq.n	1c172 <__ssprint_r+0xce>
   1c0f8:	465a      	mov	r2, fp
   1c0fa:	6921      	ldr	r1, [r4, #16]
   1c0fc:	9001      	str	r0, [sp, #4]
   1c0fe:	f7f9 fbdf 	bl	158c0 <memcpy>
   1c102:	89a2      	ldrh	r2, [r4, #12]
   1c104:	9b01      	ldr	r3, [sp, #4]
   1c106:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1c10a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1c10e:	81a2      	strh	r2, [r4, #12]
   1c110:	eba5 020b 	sub.w	r2, r5, fp
   1c114:	eb03 000b 	add.w	r0, r3, fp
   1c118:	6165      	str	r5, [r4, #20]
   1c11a:	6123      	str	r3, [r4, #16]
   1c11c:	6020      	str	r0, [r4, #0]
   1c11e:	60a2      	str	r2, [r4, #8]
   1c120:	4635      	mov	r5, r6
   1c122:	46b3      	mov	fp, r6
   1c124:	465a      	mov	r2, fp
   1c126:	4649      	mov	r1, r9
   1c128:	f7f9 fc64 	bl	159f4 <memmove>
   1c12c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1c130:	68a2      	ldr	r2, [r4, #8]
   1c132:	6820      	ldr	r0, [r4, #0]
   1c134:	1b55      	subs	r5, r2, r5
   1c136:	4458      	add	r0, fp
   1c138:	1b9e      	subs	r6, r3, r6
   1c13a:	60a5      	str	r5, [r4, #8]
   1c13c:	6020      	str	r0, [r4, #0]
   1c13e:	f8c8 6008 	str.w	r6, [r8, #8]
   1c142:	b33e      	cbz	r6, 1c194 <__ssprint_r+0xf0>
   1c144:	687e      	ldr	r6, [r7, #4]
   1c146:	463b      	mov	r3, r7
   1c148:	3708      	adds	r7, #8
   1c14a:	2e00      	cmp	r6, #0
   1c14c:	d0fa      	beq.n	1c144 <__ssprint_r+0xa0>
   1c14e:	42ae      	cmp	r6, r5
   1c150:	f8d3 9000 	ldr.w	r9, [r3]
   1c154:	46ab      	mov	fp, r5
   1c156:	d2b2      	bcs.n	1c0be <__ssprint_r+0x1a>
   1c158:	4635      	mov	r5, r6
   1c15a:	46b3      	mov	fp, r6
   1c15c:	e7e2      	b.n	1c124 <__ssprint_r+0x80>
   1c15e:	4650      	mov	r0, sl
   1c160:	f7f9 fd5a 	bl	15c18 <_realloc_r>
   1c164:	4603      	mov	r3, r0
   1c166:	2800      	cmp	r0, #0
   1c168:	d1d2      	bne.n	1c110 <__ssprint_r+0x6c>
   1c16a:	6921      	ldr	r1, [r4, #16]
   1c16c:	4650      	mov	r0, sl
   1c16e:	f7ff fb43 	bl	1b7f8 <_free_r>
   1c172:	230c      	movs	r3, #12
   1c174:	f8ca 3000 	str.w	r3, [sl]
   1c178:	89a3      	ldrh	r3, [r4, #12]
   1c17a:	2200      	movs	r2, #0
   1c17c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1c180:	f04f 30ff 	mov.w	r0, #4294967295
   1c184:	81a3      	strh	r3, [r4, #12]
   1c186:	f8c8 2008 	str.w	r2, [r8, #8]
   1c18a:	f8c8 2004 	str.w	r2, [r8, #4]
   1c18e:	b003      	add	sp, #12
   1c190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c194:	2000      	movs	r0, #0
   1c196:	f8c8 0004 	str.w	r0, [r8, #4]
   1c19a:	b003      	add	sp, #12
   1c19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001c1a0 <_calloc_r>:
   1c1a0:	b510      	push	{r4, lr}
   1c1a2:	fb02 f101 	mul.w	r1, r2, r1
   1c1a6:	f7f9 f83f 	bl	15228 <_malloc_r>
   1c1aa:	4604      	mov	r4, r0
   1c1ac:	b1d8      	cbz	r0, 1c1e6 <_calloc_r+0x46>
   1c1ae:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1c1b2:	f022 0203 	bic.w	r2, r2, #3
   1c1b6:	3a04      	subs	r2, #4
   1c1b8:	2a24      	cmp	r2, #36	; 0x24
   1c1ba:	d818      	bhi.n	1c1ee <_calloc_r+0x4e>
   1c1bc:	2a13      	cmp	r2, #19
   1c1be:	d914      	bls.n	1c1ea <_calloc_r+0x4a>
   1c1c0:	2300      	movs	r3, #0
   1c1c2:	2a1b      	cmp	r2, #27
   1c1c4:	6003      	str	r3, [r0, #0]
   1c1c6:	6043      	str	r3, [r0, #4]
   1c1c8:	d916      	bls.n	1c1f8 <_calloc_r+0x58>
   1c1ca:	2a24      	cmp	r2, #36	; 0x24
   1c1cc:	6083      	str	r3, [r0, #8]
   1c1ce:	60c3      	str	r3, [r0, #12]
   1c1d0:	bf11      	iteee	ne
   1c1d2:	f100 0210 	addne.w	r2, r0, #16
   1c1d6:	6103      	streq	r3, [r0, #16]
   1c1d8:	6143      	streq	r3, [r0, #20]
   1c1da:	f100 0218 	addeq.w	r2, r0, #24
   1c1de:	2300      	movs	r3, #0
   1c1e0:	6013      	str	r3, [r2, #0]
   1c1e2:	6053      	str	r3, [r2, #4]
   1c1e4:	6093      	str	r3, [r2, #8]
   1c1e6:	4620      	mov	r0, r4
   1c1e8:	bd10      	pop	{r4, pc}
   1c1ea:	4602      	mov	r2, r0
   1c1ec:	e7f7      	b.n	1c1de <_calloc_r+0x3e>
   1c1ee:	2100      	movs	r1, #0
   1c1f0:	f7f9 fc64 	bl	15abc <memset>
   1c1f4:	4620      	mov	r0, r4
   1c1f6:	bd10      	pop	{r4, pc}
   1c1f8:	f100 0208 	add.w	r2, r0, #8
   1c1fc:	e7ef      	b.n	1c1de <_calloc_r+0x3e>
   1c1fe:	bf00      	nop

0001c200 <_fclose_r>:
   1c200:	b570      	push	{r4, r5, r6, lr}
   1c202:	b159      	cbz	r1, 1c21c <_fclose_r+0x1c>
   1c204:	4605      	mov	r5, r0
   1c206:	460c      	mov	r4, r1
   1c208:	b110      	cbz	r0, 1c210 <_fclose_r+0x10>
   1c20a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1c20c:	2b00      	cmp	r3, #0
   1c20e:	d03c      	beq.n	1c28a <_fclose_r+0x8a>
   1c210:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1c212:	07d8      	lsls	r0, r3, #31
   1c214:	d505      	bpl.n	1c222 <_fclose_r+0x22>
   1c216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1c21a:	b92b      	cbnz	r3, 1c228 <_fclose_r+0x28>
   1c21c:	2600      	movs	r6, #0
   1c21e:	4630      	mov	r0, r6
   1c220:	bd70      	pop	{r4, r5, r6, pc}
   1c222:	89a3      	ldrh	r3, [r4, #12]
   1c224:	0599      	lsls	r1, r3, #22
   1c226:	d53c      	bpl.n	1c2a2 <_fclose_r+0xa2>
   1c228:	4621      	mov	r1, r4
   1c22a:	4628      	mov	r0, r5
   1c22c:	f7ff f8c6 	bl	1b3bc <__sflush_r>
   1c230:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c232:	4606      	mov	r6, r0
   1c234:	b133      	cbz	r3, 1c244 <_fclose_r+0x44>
   1c236:	69e1      	ldr	r1, [r4, #28]
   1c238:	4628      	mov	r0, r5
   1c23a:	4798      	blx	r3
   1c23c:	2800      	cmp	r0, #0
   1c23e:	bfb8      	it	lt
   1c240:	f04f 36ff 	movlt.w	r6, #4294967295
   1c244:	89a3      	ldrh	r3, [r4, #12]
   1c246:	061a      	lsls	r2, r3, #24
   1c248:	d422      	bmi.n	1c290 <_fclose_r+0x90>
   1c24a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1c24c:	b141      	cbz	r1, 1c260 <_fclose_r+0x60>
   1c24e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1c252:	4299      	cmp	r1, r3
   1c254:	d002      	beq.n	1c25c <_fclose_r+0x5c>
   1c256:	4628      	mov	r0, r5
   1c258:	f7ff face 	bl	1b7f8 <_free_r>
   1c25c:	2300      	movs	r3, #0
   1c25e:	6323      	str	r3, [r4, #48]	; 0x30
   1c260:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1c262:	b121      	cbz	r1, 1c26e <_fclose_r+0x6e>
   1c264:	4628      	mov	r0, r5
   1c266:	f7ff fac7 	bl	1b7f8 <_free_r>
   1c26a:	2300      	movs	r3, #0
   1c26c:	6463      	str	r3, [r4, #68]	; 0x44
   1c26e:	f7ff f9c9 	bl	1b604 <__sfp_lock_acquire>
   1c272:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1c274:	2200      	movs	r2, #0
   1c276:	07db      	lsls	r3, r3, #31
   1c278:	81a2      	strh	r2, [r4, #12]
   1c27a:	d50e      	bpl.n	1c29a <_fclose_r+0x9a>
   1c27c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c27e:	f7f8 ff45 	bl	1510c <__retarget_lock_close_recursive>
   1c282:	f7ff f9c5 	bl	1b610 <__sfp_lock_release>
   1c286:	4630      	mov	r0, r6
   1c288:	bd70      	pop	{r4, r5, r6, pc}
   1c28a:	f7ff f98f 	bl	1b5ac <__sinit>
   1c28e:	e7bf      	b.n	1c210 <_fclose_r+0x10>
   1c290:	6921      	ldr	r1, [r4, #16]
   1c292:	4628      	mov	r0, r5
   1c294:	f7ff fab0 	bl	1b7f8 <_free_r>
   1c298:	e7d7      	b.n	1c24a <_fclose_r+0x4a>
   1c29a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c29c:	f7f8 ff3a 	bl	15114 <__retarget_lock_release_recursive>
   1c2a0:	e7ec      	b.n	1c27c <_fclose_r+0x7c>
   1c2a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c2a4:	f7f8 ff34 	bl	15110 <__retarget_lock_acquire_recursive>
   1c2a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1c2ac:	2b00      	cmp	r3, #0
   1c2ae:	d1bb      	bne.n	1c228 <_fclose_r+0x28>
   1c2b0:	6e66      	ldr	r6, [r4, #100]	; 0x64
   1c2b2:	f016 0601 	ands.w	r6, r6, #1
   1c2b6:	d1b1      	bne.n	1c21c <_fclose_r+0x1c>
   1c2b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c2ba:	f7f8 ff2b 	bl	15114 <__retarget_lock_release_recursive>
   1c2be:	4630      	mov	r0, r6
   1c2c0:	bd70      	pop	{r4, r5, r6, pc}
   1c2c2:	bf00      	nop

0001c2c4 <__aeabi_dcmpun>:
   1c2c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1c2c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c2cc:	d102      	bne.n	1c2d4 <__aeabi_dcmpun+0x10>
   1c2ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1c2d2:	d10a      	bne.n	1c2ea <__aeabi_dcmpun+0x26>
   1c2d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1c2d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c2dc:	d102      	bne.n	1c2e4 <__aeabi_dcmpun+0x20>
   1c2de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1c2e2:	d102      	bne.n	1c2ea <__aeabi_dcmpun+0x26>
   1c2e4:	f04f 0000 	mov.w	r0, #0
   1c2e8:	4770      	bx	lr
   1c2ea:	f04f 0001 	mov.w	r0, #1
   1c2ee:	4770      	bx	lr
   1c2f0:	682f2e2e 	.word	0x682f2e2e
   1c2f4:	732f6c61 	.word	0x732f6c61
   1c2f8:	682f6372 	.word	0x682f6372
   1c2fc:	695f6c61 	.word	0x695f6c61
   1c300:	00632e6f 	.word	0x00632e6f
   1c304:	682f2e2e 	.word	0x682f2e2e
   1c308:	732f6c61 	.word	0x732f6c61
   1c30c:	682f6372 	.word	0x682f6372
   1c310:	745f6c61 	.word	0x745f6c61
   1c314:	72656d69 	.word	0x72656d69
   1c318:	0000632e 	.word	0x0000632e
   1c31c:	682f2e2e 	.word	0x682f2e2e
   1c320:	732f6c61 	.word	0x732f6c61
   1c324:	682f6372 	.word	0x682f6372
   1c328:	755f6c61 	.word	0x755f6c61
   1c32c:	74726173 	.word	0x74726173
   1c330:	6e79735f 	.word	0x6e79735f
   1c334:	00632e63 	.word	0x00632e63
   1c338:	682f2e2e 	.word	0x682f2e2e
   1c33c:	752f6c61 	.word	0x752f6c61
   1c340:	736c6974 	.word	0x736c6974
   1c344:	6372732f 	.word	0x6372732f
   1c348:	6974752f 	.word	0x6974752f
   1c34c:	6c5f736c 	.word	0x6c5f736c
   1c350:	2e747369 	.word	0x2e747369
   1c354:	00000063 	.word	0x00000063
   1c358:	74697845 	.word	0x74697845
   1c35c:	20676e69 	.word	0x20676e69
   1c360:	68746977 	.word	0x68746977
   1c364:	61747320 	.word	0x61747320
   1c368:	20737574 	.word	0x20737574
   1c36c:	0a2e6425 	.word	0x0a2e6425
   1c370:	00000000 	.word	0x00000000
   1c374:	682f2e2e 	.word	0x682f2e2e
   1c378:	722f6c70 	.word	0x722f6c70
   1c37c:	682f6374 	.word	0x682f6374
   1c380:	725f6c70 	.word	0x725f6c70
   1c384:	632e6374 	.word	0x632e6374
   1c388:	00000000 	.word	0x00000000
   1c38c:	40003000 	.word	0x40003000
   1c390:	40003400 	.word	0x40003400
   1c394:	41012000 	.word	0x41012000
   1c398:	41014000 	.word	0x41014000
   1c39c:	43000000 	.word	0x43000000
   1c3a0:	43000400 	.word	0x43000400
   1c3a4:	43000800 	.word	0x43000800
   1c3a8:	43000c00 	.word	0x43000c00

0001c3ac <_i2cms>:
	...
   1c3c4:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   1c3d4:	65735f6c 6d6f6372 0000632e              l_sercom.c..

0001c3e0 <g_magic_wand_model_data>:
   1c3e0:	0000001c 334c4654 00120000 0004001c     ....TFL3........
   1c3f0:	000c0008 00140010 00180000 00000012     ................
   1c400:	00000003 00004c24 00000010 0000001c     ....$L..........
   1c410:	0000002c 0000000c 00000001 00000114     ,...............
   1c420:	00000001 000000dc 0000000f 4f434f54     ............TOCO
   1c430:	6e6f4320 74726576 002e6465 00000012      Converted......
   1c440:	000000b0 000000a4 00000098 0000008c     ................
   1c450:	00000080 00000074 00000068 00000060     ....t...h...`...
   1c460:	00000058 00000050 00000048 00000040     X...P...H...@...
   1c470:	00000038 0000002c 00000020 00000018     8...,... .......
   1c480:	00000010 00000004 ffffb66e 00000068     ........n...h...
   1c490:	ffffb630 ffffb634 ffffb67e 000001f0     0...4...~.......
   1c4a0:	ffffb686 000003c8 ffffb648 ffffb64c     ........H...L...
   1c4b0:	ffffb650 ffffb654 ffffb658 ffffb65c     P...T...X...\...
   1c4c0:	ffffb6a6 00000dc0 ffffb6ae 00004600     .............F..
   1c4d0:	ffffb6b6 00004660 ffffb6be 000046e0     ....`F.......F..
   1c4e0:	ffffb6c6 00004748 ffffb6ce 00004898     ....HG.......H..
   1c4f0:	ffffb690 00000005 2e352e31 00000030     ........1.5.0...
   1c500:	fffff454 00000008 00000011 00000013     T...............
   1c510:	5f6e696d 746e7572 5f656d69 73726576     min_runtime_vers
   1c520:	006e6f69 0014000c 00080004 0010000c     ion.............
   1c530:	0000000c 00000020 00000014 00000008     .... ...........
   1c540:	00004888 00000001 00000000 00000001     .H..............
   1c550:	00000001 00000010 00000c9c 00000b14     ................
   1c560:	000000d4 00004524 00000084 000002a4     ....$E..........
   1c570:	00004580 00000b9c 00000cb0 000047c4     .E...........G..
   1c580:	00000b50 00000c2c 00004648 000045ec     P...,...HF...E..
   1c590:	00000008 00000bc8 ffffb866 00000010     ........f.......
   1c5a0:	00000010 0000001c 00000040 00000004     ........@.......
   1c5b0:	00000001 0000002a 00000001 00000008     ....*...........
   1c5c0:	00000020 75716573 69746e65 6d2f6c61      ...sequential/m
   1c5d0:	705f7861 696c6f6f 6432676e 78614d2f     ax_pooling2d/Max
   1c5e0:	6c6f6f50 00000000 ffffb788 ffffb8ba     Pool............
   1c5f0:	00000010 0000000f 0000001c 00000034     ............4...
   1c600:	00000004 00000001 00000080 00000003     ................
   1c610:	00000008 00000016 75716573 69746e65     ........sequenti
   1c620:	632f6c61 32766e6f 65522f64 0000756c     al/conv2d/Relu..
   1c630:	ffffb7d0 ffffb902 00000010 0000000e     ................
   1c640:	0000001c 00000044 00000004 00000001     ....D...........
   1c650:	00000004 00000003 00000008 00000027     ............'...
   1c660:	75716573 69746e65 632f6c61 32766e6f     sequential/conv2
   1c670:	6f432f64 4432766e 6165522f 72615664     d/Conv2D/ReadVar
   1c680:	6c626169 00704f65 ffffb828 00000180     iableOp.(.......
   1c690:	bdf66a1c 3cfd16aa 3e20d9f6 3dddf864     .j.....<.. >d..=
   1c6a0:	be82c007 bd38a39e 3da14113 bd9081b0     ......8..A.=....
   1c6b0:	bbbcddc7 be249c87 bd6a0872 3e611b10     ......$.r.j...a>
   1c6c0:	be184979 be8809da 3d4d702d bd9e4a5c     yI......-pM=\J..
   1c6d0:	3e46f10f bf02bd1c 3e07bc56 be399263     ..F>....V..>c.9.
   1c6e0:	3e84de4e bd883864 bdc332a0 beb7940f     N..>d8...2......
   1c6f0:	bc2711d6 3df37ecc 3daa4df3 3e288abc     ..'..~.=.M.=..(>
   1c700:	bddab5a2 bdb61a92 3db1499a 3d1c93fc     .........I.=...=
   1c710:	bda1a174 be1d48c7 3bb2533a bda55192     t....H..:S.;.Q..
   1c720:	bd3cc46a bd6d61db be039f78 bd301f40     j.<..am.x...@.0.
   1c730:	3dadde17 bd74eed7 3dc25cb6 be65891c     ...=..t..\.=..e.
   1c740:	3e48c4fd 3d1329b2 3d1356cc bc1bcef8     ..H>.).=.V.=....
   1c750:	bce84bb5 be5c0548 3e0dfaaf 3da48474     .K..H.\....>t..=
   1c760:	3e04844c 3cba7a09 3e07a6b3 3de5e57d     L..>.z.<...>}..=
   1c770:	3ca5b97e 3e49704e be12fe39 be018bfa     ~..<NpI>9.......
   1c780:	bce68eb9 bdb32fc8 bd9e2b1b 3d0e7fe7     ...../...+.....=
   1c790:	3d2aa33e 3d3173a1 bd03c7c8 bdaf7107     >.*=.s1=.....q..
   1c7a0:	be2b6bb2 be1fc206 be30bf3b 3e22517e     .k+.....;.0.~Q">
   1c7b0:	3d92a75a be3560b8 3d8fdfa7 3e42fcbc     Z..=.`5....=..B>
   1c7c0:	bc7d8642 3cd8d03a bc4045ea b79dd304     B.}.:..<.E@.....
   1c7d0:	bdaedfe3 be595e80 bdc01588 bdaa86ea     .....^Y.........
   1c7e0:	3d644a3b be422589 be9329c2 3e008562     ;Jd=.%B..)..b..>
   1c7f0:	bdda0ef1 beb80948 be4de2ad be992669     ....H.....M.i&..
   1c800:	becd3c86 bd4ee605 3dfb8fdb 3e97f5c6     .<....N....=...>
   1c810:	ffffbade 00000010 0000000d 0000001c     ................
   1c820:	00000048 00000004 00000010 00000004     H...............
   1c830:	00000001 00000008 00000029 75716573     ........)...sequ
   1c840:	69746e65 632f6c61 32766e6f 2f315f64     ential/conv2d_1/
   1c850:	766e6f43 522f4432 56646165 61697261     Conv2D/ReadVaria
   1c860:	4f656c62 00000070 ffffba08 00000800     bleOp...........
   1c870:	bf107a40 beccf19b bf1d8878 bf09b7c2     @z......x.......
   1c880:	beafd6bd beed29f5 be7018ad 3b40913d     .....)....p.=.@;
   1c890:	be55cf2f 3eed0bc6 be807abe 3ab13c3c     /.U....>.z..<<.:
   1c8a0:	3da6eaab be555788 bedc620c 3ebe6b07     ...=.WU..b...k.>
   1c8b0:	3d280d9e 3db1d2d9 bdbd454c 3d1fe03c     ..(=...=LE..<..=
   1c8c0:	bd48b576 be3ae82b be5721d3 3e7021dc     v.H.+.:..!W..!p>
   1c8d0:	3dec7100 3d61eb9c 3d9c8a0d 3d03352a     .q.=..a=...=*5.=
   1c8e0:	3b281c1b bda9f9a6 be2ffb20 3d04cb8c     ..(;.... ./....=
   1c8f0:	3d646243 3dd665f8 bd3abef3 3d532baf     Cbd=.e.=..:..+S=
   1c900:	bdf85899 bd43be3a bcc0e7d0 3df38da4     .X..:.C........=
   1c910:	bc9cd7a2 3eb01b87 bd882018 3ec59eee     .......>. .....>
   1c920:	3caf35c1 bd3997c0 bd046fa5 be1c037b     .5.<..9..o..{...
   1c930:	bdbb750f bd541bdf bdccbffb bd10011b     .u....T.........
   1c940:	bcb46720 3c40a6df 3d28b474 bdc3e765      g....@<t.(=e...
   1c950:	bd91388d bc45ba8f bc49c769 3cf8cba3     .8....E.i.I....<
   1c960:	3e2ded69 bcc6f40d bdfee7d6 bd86a0fa     i.->............
   1c970:	bdf08330 bdd1b9f5 be90391c bdd86274     0........9..tb..
   1c980:	be072813 bdbfbdbf bba8cf15 bd8f1a9c     .(..............
   1c990:	3d932391 bdc46379 be72ddec beacd8d2     .#.=yc....r.....
   1c9a0:	be211ebf bd20abae 3d90e98f 3ddd47bb     ..!... ....=.G.=
   1c9b0:	bd3793b1 bc45cfeb be158f33 be9f19eb     ..7...E.3.......
   1c9c0:	bde32166 3c608253 bcf1dc11 3d1e010c     f!..S.`<.......=
   1c9d0:	3f1dd5db 3d61a358 be162b0a be509d01     ...?X.a=.+....P.
   1c9e0:	3e63acac bc8adb76 bc8fec57 3dd620ad     ..c>v...W.... .=
   1c9f0:	3d8963c2 3ee91ec3 bd9e41a8 be2b2cac     .c.=...>.A...,+.
   1ca00:	3dbf7398 bd54227a be2caf44 bcd94505     .s.=z"T.D.,..E..
   1ca10:	3e20aa74 3e951e6e bc122054 3dcf20be     t. >n..>T ... .=
   1ca20:	be2802a6 bde8fed1 be832a1f 3df34433     ..(......*..3D.=
   1ca30:	bdda48ff 3e791e8d 3db2eedb be5bdedb     .H....y>...=..[.
   1ca40:	be495755 bf294b62 bf23bf93 3d71a3ea     UWI.bK)...#...q=
   1ca50:	be0050a5 bfc0d1b6 bd7d221d 3d810900     .P......."}....=
   1ca60:	be7528de bf2e1b03 bf3b3a3c bde61a52     .(u.....<:;.R...
   1ca70:	bdeae99d 3d2c7149 bb558be8 be24976c     ....Iq,=..U.l.$.
   1ca80:	bae0e844 3f4b456d 3e38267f be6e04ab     D...mEK?.&8>..n.
   1ca90:	be0e5970 3d7afbd6 bda27245 be2e6fb5     pY....z=Er...o..
   1caa0:	3e07f5da bdac2be0 bdf635af bdac2bd0     ...>.+...5...+..
   1cab0:	be112d26 3d87fa7e bdf6b73a bce2d0b1     &-..~..=:.......
   1cac0:	bd86a2c8 bdb1f519 be4d65f6 3e476323     .........eM.#cG>
   1cad0:	bdd326b7 bf12f457 be39d493 3d62f277     .&..W.....9.w.b=
   1cae0:	bec33df6 be2bf5b6 be768abe 3e6339b1     .=....+...v..9c>
   1caf0:	be3cbede be9401d4 bb971a19 be4e83cb     ..<...........N.
   1cb00:	bd941950 be958af8 be86abc8 3e6d5718     P............Wm>
   1cb10:	3c8bad87 3e8d7b72 3d953954 be4bfa1d     ...<r{.>T9.=..K.
   1cb20:	be7ad297 becb4a68 bf0410f0 3e82b52b     ..z.hJ......+..>
   1cb30:	3e1a71f8 3d29f029 3e1a5a74 bdd17558     .q.>).)=tZ.>Xu..
   1cb40:	3e996c38 be63d46c be9051c3 beaeffcf     8l.>l.c..Q......
   1cb50:	3d00f1fe bd906452 bdce1a02 3d007486     ...=Rd.......t.=
   1cb60:	3e044082 3e820338 3ef41c8f be68046f     .@.>8..>...>o.h.
   1cb70:	3de31200 3db5f601 3d3699d9 3edead40     ...=...=..6=@..>
   1cb80:	3dc174af be6f8eb7 be32a6b3 3e23caff     .t.=..o...2...#>
   1cb90:	3e42f10c 3d2c85e3 bab7c8ca bd53941a     ..B>..,=......S.
   1cba0:	3daa339a be797c9c be71b284 bd2bc148     .3.=.|y...q.H.+.
   1cbb0:	bd6c89f4 bdf2d21f bd284fd2 bdb3bbb4     ..l......O(.....
   1cbc0:	bcab966f be829d23 bd596be6 be030927     o...#....kY.'...
   1cbd0:	bdaca642 3d2012b6 be24630a be282775     B..... =.c$.u'(.
   1cbe0:	be2b62a5 be06481f bdb2d07e 3a80d6a9     .b+..H..~......:
   1cbf0:	be117aff 3e415f76 bdfaa917 bd71d15b     .z..v_A>....[.q.
   1cc00:	bdaf23f3 bce02463 3e9d62c6 be4719d6     .#..c$...b.>..G.
   1cc10:	bdf16992 3d82678a 3d693317 be25911a     .i...g.=.3i=..%.
   1cc20:	3daeabf1 3ec1213a bd5dc4d8 bea658c7     ...=:!.>..]..X..
   1cc30:	3bedb0c6 3ca2d675 be1da864 be3a1fe5     ...;u..<d.....:.
   1cc40:	bd39037b 3d81a214 bcb2fddb be9a96ca     {.9....=........
   1cc50:	3cc9cc7c 3d887db8 bd0b3936 be3c1f5e     |..<.}.=69..^.<.
   1cc60:	3c833627 bd23a138 3bf6faba bec3a98d     '6.<8.#....;....
   1cc70:	bdf03450 bdb30f92 be5eadd9 3cb227c1     P4........^..'.<
   1cc80:	be07296a be26b50f 3e27f9c8 3ea4972a     j)....&...'>*..>
   1cc90:	3e5345e1 3da0d7ec be8c1afd bdd64c1d     .ES>...=.....L..
   1cca0:	be63784a bcd9a418 3d37aa5a be3be8ff     Jxc.....Z.7=..;.
   1ccb0:	3e678c6b bc12ec13 bcabccae bd729b2e     k.g>..........r.
   1ccc0:	3eb43f46 bdd3badb be86db7b bed9666a     F?.>....{...jf..
   1ccd0:	3d805c8c be4d6460 3e58914d be0efca9     .\.=`dM.M.X>....
   1cce0:	3ecec832 beb3c8a8 beae074d bf2ca3bc     2..>....M.....,.
   1ccf0:	be219c57 be6e6d0e bf15a630 bf0176d6     W.!..mn.0....v..
   1cd00:	beab3e80 be2d98be be4802e2 be964bc8     .>....-...H..K..
   1cd10:	3e2eaa48 3f0119a2 be8feca8 3e24d215     H..>...?......$>
   1cd20:	bcc2805c be2978f0 be631dfe bd22f132     \....x)...c.2.".
   1cd30:	3e1d8c35 3ec222b9 bec075de bb737127     5..>.".>.u..'qs.
   1cd40:	3dde4137 bdfe710a bdf6669e bc07932b     7A.=.q...f..+...
   1cd50:	3d901e75 3e594901 bebeb20a bc9f65d4     u..=.IY>.....e..
   1cd60:	3ddd2043 bd7401ef 3bd5a4b2 bcf930a4     C .=..t....;.0..
   1cd70:	b86815b8 bea7a258 3da5255a beb2862d     ..h.X...Z%.=-...
   1cd80:	3ec231c9 3d2861d2 3dbafea6 bdf66c4b     .1.>.a(=...=Kl..
   1cd90:	bcdc14aa bddc7df6 bd75b6ce bea8a50b     .....}....u.....
   1cda0:	3e4ab59b 3d98fafc 3d39d627 3d67bf1a     ..J>...='.9=..g=
   1cdb0:	bc04043f bd425607 be52e6d8 bdc7ff72     ?....VB...R.r...
   1cdc0:	bdba5bd8 bdc8b9e9 be0554e2 3ef28fb5     .[.......T.....>
   1cdd0:	bd68e974 becd166f 3c40222a 3df203fc     t.h.o...*"@<...=
   1cde0:	3daa7491 be1fb17d be14c195 be89e5bb     .t.=}...........
   1cdf0:	3d5affae be077931 3ebafb07 bd86d04e     ..Z=1y.....>N...
   1ce00:	3e293668 3dc714ec 3b06f6ef 3ce8a076     h6)>...=...;v..<
   1ce10:	3cac5797 be8d02ec 3d42af43 3d0e3913     .W.<....C.B=.9.=
   1ce20:	3e5aedf4 be18f1bb bbc81f71 be0b8c6d     ..Z>....q...m...
   1ce30:	bdc35dfe be87ae2c 3d3e7458 be135214     .]..,...Xt>=.R..
   1ce40:	be551141 3e0e0343 3e2e4cf8 bdea6a09     A.U.C..>.L.>.j..
   1ce50:	bdc3e1ec be2adfd5 bdd9c12e be725bc1     ......*......[r.
   1ce60:	be0fe973 3e0cc3ab 3e5ed185 be0d7008     s......>..^>.p..
   1ce70:	3d01b76f bd860f0c 3e56230d bc106f16     o..=.....#V>.o..
   1ce80:	bf42984f be444e85 be0b20f0 bc0fa35b     O.B..ND.. ..[...
   1ce90:	bd4533bd bd48fb84 3c8c9911 3e081e41     .3E...H....<A..>
   1cea0:	bf6c3ee3 be0c2b97 bb23ec94 3c4f358f     .>l..+....#..5O<
   1ceb0:	bd0cecea be3d1304 3e237613 3c990d37     ......=..v#>7..<
   1cec0:	bef4a3d4 be6c6a18 bdf63c3d bcaf51f8     .....jl.=<...Q..
   1ced0:	bc8a6e1f be8cc555 bd799c9e bdb71413     .n..U.....y.....
   1cee0:	be1acd89 3e2e1479 3e71a2dd bcbe71ad     ....y..>..q>.q..
   1cef0:	3f22c9a3 3d0f4b66 be291c45 be9379f6     .."?fK.=E.)..y..
   1cf00:	3db61871 3c9dcbcc bcfdbba1 3e0575c9     q..=...<.....u.>
   1cf10:	bdad4b77 3e5c1d81 bd24cc2d be36ce3a     wK....\>-.$.:.6.
   1cf20:	be2737b8 3b753ee6 bd2cb4b7 3c47051f     .7'..>u;..,...G<
   1cf30:	3e331d81 3e4ffd8a 3d3b7caf bddaa000     ..3>..O>.|;=....
   1cf40:	bf20d139 bdf378c9 bea3019d bcbb4442     9. ..x......BD..
   1cf50:	bdd4c15a bf3ce7fd 3d853746 3dbc4e79     Z.....<.F7.=yN.=
   1cf60:	bf7fcda4 bf69ca1d bf69eb97 3c9fc9aa     ......i...i....<
   1cf70:	3e9d82b4 3e7794f1 be8474f2 be9c6688     ...>..w>.t...f..
   1cf80:	bdf14edf 3e319ea2 3d49c98b 3e5c635a     .N....1>..I=Zc\>
   1cf90:	3d4ea5f9 3d8d3f95 be68e01c be7ce1b6     ..N=.?.=..h...|.
   1cfa0:	be632b82 be026c76 be3630fe 3d365f8f     .+c.vl...06.._6=
   1cfb0:	3c155217 bf88c81e 3d5da10a 3e7131e8     .R.<......]=.1q>
   1cfc0:	bc0145d2 be273c41 bc4da9bb 3c9dde0f     .E..A<'...M....<
   1cfd0:	bdc335bf bf700e5b 3bd5f4e9 3dec9b60     .5..[.p....;`..=
   1cfe0:	bc23758b be840317 3cd00499 be0801dd     .u#........<....
   1cff0:	bd75d582 3cecaa05 3d454db9 bb6911a3     ..u....<.ME=..i.
   1d000:	3e50b0a3 bdaa5f7a bdbe736a bda92591     ..P>z_..js...%..
   1d010:	bde08e0f 3c8f5150 3db97df4 3d5011a2     ....PQ.<.}.=..P=
   1d020:	3e32b53a 3e8728e1 3e098344 be0a5fc3     :.2>.(.>D..>._..
   1d030:	be0fb8c4 bdabb2aa bd5c4093 bd19f035     .........@\.5...
   1d040:	3b02a84a 3c1a513c bbdd2dbe 3dc35d55     J..;<Q.<.-..U].=
   1d050:	bd7c6f10 be45f762 3de1dad5 3e13d525     .o|.b.E....=%..>
   1d060:	bdead6f0 bd562b62 3db10c80 3da5be19     ....b+V....=...=
   1d070:	ffffc33e 00000010 0000000c 0000001c     >...............
   1d080:	00000034 00000004 00000001 00000080     4...............
   1d090:	00000003 00000001 0000000c 766e6f63     ............conv
   1d0a0:	695f6432 7475706e 00000000 000c0008     2d_input........
   1d0b0:	00080004 00000008 00000010 00000004     ................
   1d0c0:	00000001 437f0000 00000001 00000000     .......C........
   1d0d0:	ffffc39e 00000010 0000000b 00000014     ................
   1d0e0:	0000002c 00000002 00000001 00000010     ,...............
   1d0f0:	00000015 75716573 69746e65 642f6c61     ....sequential/d
   1d100:	65736e65 6c65522f 00000075 ffffc2ac     ense/Relu.......
   1d110:	ffffc3de 00000010 0000000a 0000001c     ................
   1d120:	00000038 00000004 00000001 0000002a     8...........*...
   1d130:	00000001 00000010 00000018 75716573     ............sequ
   1d140:	69746e65 632f6c61 32766e6f 2f315f64     ential/conv2d_1/
   1d150:	756c6552 00000000 ffffc2f8 ffffc42a     Relu........*...
   1d160:	00000010 00000009 0000001c 00000040     ............@...
   1d170:	00000004 00000001 0000000e 00000001     ................
   1d180:	00000010 00000022 75716573 69746e65     ...."...sequenti
   1d190:	6d2f6c61 705f7861 696c6f6f 6432676e     al/max_pooling2d
   1d1a0:	4d2f315f 6f507861 00006c6f ffffc34c     _1/MaxPool..L...
   1d1b0:	ffffc47e 00000010 00000008 00000014     ~...............
   1d1c0:	00000030 00000002 00000001 00000004     0...............
   1d1d0:	0000001a 75716573 69746e65 642f6c61     ....sequential/d
   1d1e0:	65736e65 422f315f 41736169 00006464     ense_1/BiasAdd..
   1d1f0:	ffffc390 ffffc4c2 00000010 00000007     ................
   1d200:	00000014 00000020 00000002 00000001     .... ...........
   1d210:	00000004 00000008 6e656449 79746974     ........Identity
   1d220:	00000000 ffffc3c4 ffffc4f6 00000010     ................
   1d230:	00000006 00000014 00000048 00000002     ........H.......
   1d240:	00000010 000000e0 00000030 75716573     ........0...sequ
   1d250:	69746e65 642f6c61 65736e65 74614d2f     ential/dense/Mat
   1d260:	2f6c754d 64616552 69726156 656c6261     Mul/ReadVariable
   1d270:	742f704f 736e6172 65736f70 00000000     Op/transpose....
   1d280:	ffffc420 00003800 3d9e7891 3e726e02      ....8...x.=.nr>
   1d290:	bc655faf 3ea58983 3df51e99 3d9202b4     ._e....>...=...=
   1d2a0:	3d9631af bea27744 be733cf0 3f35ec0f     .1.=Dw...<s...5?
   1d2b0:	bc20d147 be488dae 3e3dccce 3e7849ad     G. ...H...=>.Ix>
   1d2c0:	bd822e11 3d7ef3a7 3d7aea7b 3e1fe5d1     ......~={.z=...>
   1d2d0:	3d7a8c92 be4622e8 3e245ce4 3c6b0da2     ..z=."F..\$>..k<
   1d2e0:	bd2104fb bed16e1c bcd9c6d5 3ddfe8b6     ..!..n.........=
   1d2f0:	3d0973d8 beb145cb 3d0e6ada bcefbe40     .s.=.E...j.=@...
   1d300:	bdcbbbe4 3d3035f6 be563a25 3d0a351f     .....50=%:V..5.=
   1d310:	3d213195 be54aade 3e6b0a8d bd0270d5     .1!=..T...k>.p..
   1d320:	3caa18dc be790c2a 3b04c5ee 3dbeb92c     ...<*.y....;,..=
   1d330:	bc82550f bf00f694 be02a20a bd582ba3     .U...........+X.
   1d340:	bdd34f09 be369857 be81edcd bd3b4d78     .O..W.6.....xM;.
   1d350:	bddcf9a1 bd29c418 3eb26df5 3e537b43     ......)..m.>C{S>
   1d360:	3c696a2b bf132eec be2c0d6a 3e32e33d     +ji<....j.,.=.2>
   1d370:	3d3941f4 be49d348 be9a257f be0b36d3     .A9=H.I..%...6..
   1d380:	bd89a3a5 bde53009 be831713 bcc44c1a     .....0.......L..
   1d390:	be671e81 bddf7782 3e337d02 3e0235d3     ..g..w...}3>.5.>
   1d3a0:	3c90c08a be95d08b be6f672a 3e20f4f3     ...<....*go... >
   1d3b0:	3cba2801 bdaa6555 bd901d76 3dce37a5     .(.<Ue..v....7.=
   1d3c0:	bd80d78f bc7dea02 bde6ffd1 3da0b596     ......}........=
   1d3d0:	be90b0ea bd99ed9e 3dd9ee2e 3eb5f4e9     ...........=...>
   1d3e0:	3dfeb4a2 3d304be5 be58f307 3b2aa829     ...=.K0=..X.).*;
   1d3f0:	3e400cf6 bcc087b9 3d6712f3 bd8233d7     ..@>......g=.3..
   1d400:	bd1547ba 3e29ca64 3e5d70ca 3dcba89c     .G..d.)>.p]>...=
   1d410:	bdafe3be be2c93af 3eb53607 3e34fffc     ......,..6.>..4>
   1d420:	bdbb9a71 3e4b92a8 be2922b1 3e3e5dce     q.....K>.")..]>>
   1d430:	3e42cada 3d581a20 3d0c0a5c 3df0ffe2     ..B> .X=\..=...=
   1d440:	3e0cfd79 3e035f69 bb2ed366 3c64633a     y..>i_.>f...:cd<
   1d450:	be482f10 be47a7c5 3e975ada bccd6ec1     ./H...G..Z.>.n..
   1d460:	bd519c9a 3ddd2731 bd80b20b bca775bf     ..Q.1'.=.....u..
   1d470:	3e2f65d5 3e1b0dc4 3df27fcf 3df2c773     .e/>...>...=s..=
   1d480:	bb982e69 3da85ba8 bdbfb0fd bdfc49a3     i....[.=.....I..
   1d490:	be02f5ad be261e60 3e3d961d 3e2c23f7     ....`.&...=>.#,>
   1d4a0:	3d861b44 bd485688 3ceef6ad 3d13810d     D..=.VH....<...=
   1d4b0:	3e0976d0 bd838349 be79d650 3d4f178c     .v.>I...P.y...O=
   1d4c0:	3d90e5ec 3d4f191e bd9f3c1f be4b47e5     ...=..O=.<...GK.
   1d4d0:	be14f033 3d21bf58 3e428cd2 3d9ae631     3...X.!=..B>1..=
   1d4e0:	bdab4ef9 be1f466f 3d21f19e 3dfb7204     .N..oF....!=.r.=
   1d4f0:	3e24ca29 bea10132 be459b07 3dc509f9     ).$>2.....E....=
   1d500:	bd4484c9 bd68b5de be3ef60a bdbc6e78     ..D...h...>.xn..
   1d510:	bd38f803 bd17f6e9 3e3b191a 3cdbb143     ..8.......;>C..<
   1d520:	bb1e5bc5 be009bcc bae4e401 3e268de5     .[............&>
   1d530:	bc0a094b bee04e50 bcf393e3 3d20e9e8     K...PN........ =
   1d540:	3ce2a723 3da705e2 bd29dad4 bca743b3     #..<...=..)..C..
   1d550:	bd0d6128 3da7557e 3e3f275f 3bca1912     (a..~U.=_'?>...;
   1d560:	bd0b89c9 bd339957 bcda8f61 3e5a546a     ....W.3.a...jTZ>
   1d570:	3d2beb31 be97958c 3e852d5b bcf43f49     1.+=....[-.>I?..
   1d580:	3c62bb20 bdae6901 be432ce1 3d845de9      .b<.i...,C..].=
   1d590:	3e1761b3 bc950747 3e877ccd 3d03b3d9     .a.>G....|.>...=
   1d5a0:	3d157e1c bdb00be1 3c94fe23 3dd736f0     .~.=....#..<.6.=
   1d5b0:	3c822b9e be9b4378 be0c5df9 3dda4507     .+.<xC...]...E.=
   1d5c0:	3d193679 3cbcff49 beec6ed6 3cd5b26c     y6.=I..<.n..l..<
   1d5d0:	3b92b02a 3e3a8745 bdb8e5d3 3c2e1a92     *..;E.:>.......<
   1d5e0:	3e3c339b bea83d0f 3da67c53 be989e3b     .3<>.=..S|.=;...
   1d5f0:	3cd69196 be995b71 3e040b73 3dc08afa     ...<q[..s..>...=
   1d600:	3ddd1b7f bd8401e4 bddb63cf bd8d5dda     ...=.....c...]..
   1d610:	bd46e144 be056c65 bdb1830a be594a97     D.F.el.......JY.
   1d620:	3da72677 bdea220d be144870 3e043101     w&.=."..pH...1.>
   1d630:	bdb85ee0 bdeee3d3 bcc46f4e 3d53ab2f     .^......No../.S=
   1d640:	be2c79d2 bddb5eea bd4d4002 bd5d47cf     .y,..^...@M..G].
   1d650:	bd97481e 3dca3b7c be431d75 3b86abb7     .H..|;.=u.C....;
   1d660:	3be251fa be1a0ccc 3dc056da bd6ba5d2     .Q.;.....V.=..k.
   1d670:	be27e846 be4e7195 3db0da78 be31fdec     F.'..qN.x..=..1.
   1d680:	be44b55f be06482b bdf45c28 3ca3b11a     _.D.+H..(\.....<
   1d690:	bdefd677 bd93e1ec bdcdb285 bd520bf8     w.............R.
   1d6a0:	3cd79516 3c2900b2 3db68c42 be1f79a8     ...<..)<B..=.y..
   1d6b0:	bde8fea5 3db83028 3d9e23b8 be33e17f     ....(0.=.#.=..3.
   1d6c0:	be3ff82b bd708c05 bde03230 be45d3ff     +.?...p.02....E.
   1d6d0:	bc338229 be13862b bd07810b 3ca8d4b1     ).3.+..........<
   1d6e0:	bc2dd642 ba3319fc be29f7d5 be18b9ff     B.-...3...).....
   1d6f0:	be369634 bdcc808d bce91f55 be69dda1     4.6.....U.....i.
   1d700:	3cb486d3 be0fc23a bccd63c0 bdcff8cb     ...<:....c......
   1d710:	3d5f7f45 3dbd5995 bdf09c7b 3cfbaf57     E._=.Y.={...W..<
   1d720:	bdaf44ad bdbcf3a5 bd59e1b4 3d2928a6     .D........Y..()=
   1d730:	be508bcb bd958520 bbfacf33 3d1cfcde     ..P. ...3......=
   1d740:	be43b691 bdaf8454 be04dedc be19c669     ..C.T.......i...
   1d750:	bd23cf43 be583b77 bd500950 bd2da217     C.#.w;X.P.P...-.
   1d760:	bab5ade0 3dcc9d47 3de37206 3c9f8192     ....G..=.r.=...<
   1d770:	be061d55 3c9c79a0 bde6ece1 bd9a0c63     U....y.<....c...
   1d780:	be5e82c1 be384c01 bd520664 be0854d1     ..^..L8.d.R..T..
   1d790:	3dc2b80c 3db4d25a be24cb84 3c8fb480     ...=Z..=..$....<
   1d7a0:	be0c6984 be05da3d 3e0c484c bccf35dc     .i..=...LH.>.5..
   1d7b0:	be0b1b80 bc9c3aaa 3d83d421 3de86e26     .....:..!..=&n.=
   1d7c0:	3d2841e4 be1d3588 3db2fb2c be0abbe4     .A(=.5..,..=....
   1d7d0:	bdfe0095 3c89873d bca09f19 bd6fceac     ....=..<......o.
   1d7e0:	be214816 be1321d8 bdfc4915 3e31106c     .H!..!...I..l.1>
   1d7f0:	bda20493 bdbecebc bd51ce59 3d60f1d6     ........Y.Q...`=
   1d800:	bd76923a 3b66efb8 3d8e2c26 be1efff1     :.v...f;&,.=....
   1d810:	3d266fc2 be4eb2e7 bdc41e31 3c810a2f     .o&=..N.1.../..<
   1d820:	bdea73b9 bd4bdf41 bd88479d bd6821ab     .s..A.K..G...!h.
   1d830:	bcf92077 3daa5540 bdf9e126 3dddbe97     w ..@U.=&......=
   1d840:	bd91e857 be3ebb00 bd915122 3da1e66b     W.....>."Q..k..=
   1d850:	3da6f17d 3d8689a9 bdef9157 ba0106cb     }..=...=W.......
   1d860:	3d4ac09d be35af71 bc163d01 bd81a401     ..J=q.5..=......
   1d870:	bd2ef6a4 bd0de9b7 be26ef94 be2031ee     ..........&..1 .
   1d880:	3d308a43 bdb1a309 3c11b820 3d1e7c55     C.0=.... ..<U|.=
   1d890:	be4f60bd 3ca30605 bbfa4892 be0a536a     .`O....<.H..jS..
   1d8a0:	bc1901d5 be2af669 be08bef9 3c49174b     ....i.*.....K.I<
   1d8b0:	3d7910b4 bcf2b14f 3c8a6bc4 be35a76c     ..y=O....k.<l.5.
   1d8c0:	bde0fbe2 bd2ac0f3 bdbd47e6 be6630c3     ......*..G...0f.
   1d8d0:	3d352dfb bdadd613 be01d27f bd57e19e     .-5=..........W.
   1d8e0:	3ce2028c be119021 3dab8f56 3ddc5bba     ...<!...V..=.[.=
   1d8f0:	be775eaa 3d64c91c 3bd4f6fa 3d4a3d72     .^w...d=...;r=J=
   1d900:	be34d58c 3ba83032 3c8e0c60 3d30c77b     ..4.20.;`..<{.0=
   1d910:	bbb95186 3e0e50ed bc8a70b3 be1d3ac6     .Q...P.>.p...:..
   1d920:	be094d77 bd395bb7 3d94c923 bd7d6b8c     wM...[9.#..=.k}.
   1d930:	be457ec7 bdb839f7 be414622 3c64cc9c     .~E..9.."FA...d<
   1d940:	bd94ae97 bd8e00f9 bdaed334 3d4c7e95     ........4....~L=
   1d950:	3d813f16 bc9b7e77 bc877b47 be14c1b8     .?.=w~..G{......
   1d960:	bdff6448 bce20941 bd2d02cb ba265752     Hd..A.....-.RW&.
   1d970:	bd83922b be818812 3de48711 be5125f6     +..........=.%Q.
   1d980:	bde92dd5 be6bc7ca 3c423320 be543bfd     .-....k. 3B<.;T.
   1d990:	bd186dcc be1f3150 3e485a15 3e1ea86a     .m..P1...ZH>j..>
   1d9a0:	be9d721c 3e19cfc2 3d3e99da bf849c33     .r.....>..>=3...
   1d9b0:	3d19f1c3 bd24f73f 3ef72a29 be48f548     ...=?.$.)*.>H.H.
   1d9c0:	bdf4bcf4 bd7f44ed 3e8a943b bc5d23cd     .....D..;..>.#].
   1d9d0:	3e8bdb58 beac74e7 bd84536e 3e4a4a18     X..>.t..nS...JJ>
   1d9e0:	3df18c96 bc5bc0ae 3e528792 bd55cd51     ...=..[...R>Q.U.
   1d9f0:	3d0f962d bc95eeba 3e32f279 bed86c9a     -..=....y.2>.l..
   1da00:	be06fd67 bcd52047 3df52067 3bbb84b6     g...G ..g .=...;
   1da10:	3e3a9120 be2b8c86 3deb2b94 3e17bd57      .:>..+..+.=W..>
   1da20:	bc185f8f bd658f7d 3ec33799 bda88c04     ._..}.e..7.>....
   1da30:	3dd38d8a bda919dc 3d841392 bea3b891     ...=.......=....
   1da40:	bd87317b bb29f45b 3e449a99 bd26997a     {1..[.)...D>z.&.
   1da50:	3e03d1e1 3ca1ac37 3e0de346 3d96adcc     ...>7..<F..>...=
   1da60:	bdf9ab34 be367ecb 3e8ca775 be415865     4....~6.u..>eXA.
   1da70:	baa34512 bce251d5 bcc82cac be701d8a     .E...Q...,....p.
   1da80:	3c65b058 3ddc2900 3e9d94f7 bd84fa24     X.e<.).=...>$...
   1da90:	3dfe06a0 bd100884 3dc50af0 3cd3f2d4     ...=.......=...<
   1daa0:	bdd5a3fd bb4e95ac 3e996d0a 3c1d845a     ......N..m.>Z..<
   1dab0:	bc8c7656 bca8ffa3 3c4b9db2 be8b87e3     Vv........K<....
   1dac0:	bde6e930 bceff397 3e9f4067 bd9c957e     0.......g@.>~...
   1dad0:	3df4d7a1 bd440514 3e405032 be0e4f7f     ...=..D.2P@>.O..
   1dae0:	bd35b424 be1301bb 3e729775 bcc4b572     $.5.....u.r>r...
   1daf0:	bea3032d bd859c30 3ddd8ae9 bde18566     -...0......=f...
   1db00:	be167800 bd5de0a6 3e61a739 bdfae940     .x....].9.a>@...
   1db10:	3e781a03 be108aae 3d7369ff bdd1c183     ..x>.....is=....
   1db20:	be01dce9 3d5fa7ef 3e3fe31d 3d3674e2     ......_=..?>.t6=
   1db30:	be5db4da bd5667df 3dcae83b be2114db     ..]..gV.;..=..!.
   1db40:	be210e26 bdceee70 3e8dd1ce bddb98f7     &.!.p......>....
   1db50:	3d78d876 be25c5d9 3d971e7b be113136     v.x=..%.{..=61..
   1db60:	be09151b bb0ba620 3ea0a125 bdbbb21b     .... ...%..>....
   1db70:	be9f786d bd6afbdf bdc3dcae be8ae1b2     mx....j.........
   1db80:	bd90865a bd912c36 3e8b4fa1 bd1110ef     Z...6,...O.>....
   1db90:	3da8cc4e be7bf054 3d604028 3d009ba8     N..=T.{.(@`=...=
   1dba0:	bd28cecf 3d48313c 3ea4a141 be8b2aa7     ..(.<1H=A..>.*..
   1dbb0:	bdf4d5df 3ba2c1ac bccf44c4 be5b374f     .......;.D..O7[.
   1dbc0:	bd4cc267 3cb2108b 3e26e350 3dc25ef8     g.L....<P.&>.^.=
   1dbd0:	3e051203 be1fbd62 3dfeec1c 3d50476e     ...>b......=nGP=
   1dbe0:	3d893260 bd9239ac 3e3c3823 3c761e5f     `2.=.9..#8<>_.v<
   1dbf0:	bd19e294 bcc8d77a 3b91e3d8 be99260d     ....z......;.&..
   1dc00:	be5dad2a 3c898e94 3de6994f 3b98d738     *.]....<O..=8..;
   1dc10:	3e129de2 be8eb1e8 3e28892c 3e3ed08f     ...>....,.(>..>>
   1dc20:	bd500722 bdb54901 3e767e06 bda08baa     ".P..I...~v>....
   1dc30:	bc4a43a5 bc8464e5 3d36b17c bec600ae     .CJ..d..|.6=....
   1dc40:	be0a177f bd3c53a0 3dab43b2 3dcdfff2     .....S<..C.=...=
   1dc50:	3eb6de42 bf070536 bd54472d 3e21a073     B..>6...-GT.s.!>
   1dc60:	3e0561c1 bdcb6b27 3e5be19a bd33dcfe     .a.>'k....[>..3.
   1dc70:	3e2f0512 bc287984 be66683e beb70f7a     ../>.y(.>hf.z...
   1dc80:	bea6ffcb 3d6c4ce1 3ebe0f10 bdd3ef90     .....Ll=...>....
   1dc90:	3e8e9820 bebb833f bdc80e22 3e08945b      ..>?..."...[..>
   1dca0:	3d9b96f7 bd464453 3dbc4731 bdee9a4b     ...=SDF.1G.=K...
   1dcb0:	3d35f938 3d3eb3ce 3d95959b bebf6fcd     8.5=..>=...=.o..
   1dcc0:	be6a4313 3de24da7 3f0fb476 bca0988e     .Cj..M.=v..?....
   1dcd0:	be339126 be7c43c6 bcd598be 3e437248     &.3..C|.....HrC>
   1dce0:	bc8874f7 3cec58c2 3da716b6 3e398c17     .t...X.<...=..9>
   1dcf0:	be00f584 3de2a8c4 3e22c956 be9657a1     .......=V.">.W..
   1dd00:	bd971c06 3d8224da bc1eafb1 be7e3d4c     .....$.=....L=~.
   1dd10:	3dbce6ca bd93d0ec bdeb3513 bd0e88bb     ...=.....5......
   1dd20:	3cf42beb 3e462013 bd789f54 bd44113d     .+.<. F>T.x.=.D.
   1dd30:	bde33db2 3da8613d bd10f8a9 3d94dce2     .=..=a.=.......=
   1dd40:	bdde3914 bddea465 bd92dd72 bd5305b3     .9..e...r.....S.
   1dd50:	3d1d8dcf bea3840a be86035c becbb616     ...=....\.......
   1dd60:	befd1430 3d3ffee8 bdc402ec 3c994b55     0.....?=....UK.<
   1dd70:	bd1ea5cb 3d8206b4 be92d82a bda1ea49     .......=*...I...
   1dd80:	be7b7825 bde8d634 be956af3 bda10cde     %x{.4....j......
   1dd90:	3b78ac81 bed6a555 be65fafb beb2a0d2     ..x;U.....e.....
   1dda0:	be4f3301 3d8fa4c6 3d7235b4 bcc4fbfd     .3O....=.5r=....
   1ddb0:	bc02c58a 3d1b812e be7188f1 be23e710     .......=..q...#.
   1ddc0:	bd9bd4e5 bd9c927e bea55d32 bd10123f     ....~...2]..?...
   1ddd0:	bca4a806 beb0e081 be5def1a beca9b15     ..........].....
   1dde0:	be36b4a3 bd549680 bcd44127 3d7a96e1     ..6...T.'A....z=
   1ddf0:	3da4f1b0 3d379f2e bea01969 3daed8b0     ...=..7=i......=
   1de00:	bd0e8042 3c8dbbbe be93711f bca013e5     B......<.q......
   1de10:	bccdb855 3bc0f055 be2ce0ba befc38a5     U...U..;..,..8..
   1de20:	bddc0803 bd14728c 3c67d9ef 3de003c9     .....r....g<...=
   1de30:	3da0e269 3d0686e1 be9052a4 bc2956da     i..=...=.R...V).
   1de40:	3dbd9c2b bcf3f712 bd41ad96 bd104ab6     +..=......A..J..
   1de50:	bdb5ee7a 3daa8388 bebd03ae bee1af4d     z......=....M...
   1de60:	3c4a2232 bd90a26b bd95817e 3dbce1c7     2"J<k...~......=
   1de70:	bd7e4256 3dcbdbb4 bf0e8efe 3e60e968     VB~....=....h.`>
   1de80:	3cce83ea bb6d0804 3d38b2ff 3c82e226     ...<..m...8=&..<
   1de90:	be102071 3e136482 bec61aa7 bec7e83e     q ...d.>....>...
   1dea0:	3dd81e30 be508766 be4bbf5d bdb89ef9     0..=f.P.].K.....
   1deb0:	3d049e22 3d7a8f89 be15d94a 3e5e774f     "..=..z=J...Ow^>
   1dec0:	3d0819c0 bd47d6e0 3db62bfb 3cf1a364     ...=..G..+.=d..<
   1ded0:	bdd1ee36 3d60603c be75ae23 be8900c8     6...<``=#.u.....
   1dee0:	3e229cc4 be8829c9 bec26ad5 bdca7187     ..">.)...j...q..
   1def0:	bca38076 bdbccf84 be17ac4c 3e91d8aa     v.......L......>
   1df00:	3c5244a9 bdfaeec0 3d243b2c 3d8c0ac8     .DR<....,;$=...=
   1df10:	3d071037 3ddf7898 bde5e20c be34382c     7..=.x.=....,84.
   1df20:	bdb749e5 bed8cfc7 be6ef354 be19bc2d     .I......T.n.-...
   1df30:	3d8d0fe4 bddc48f1 3cdc21a2 3e9d4c86     ...=.H...!.<.L.>
   1df40:	3de7cd93 bdbf7730 bc9fd2e0 3d8e3a55     ...=0w......U:.=
   1df50:	be6e3ff2 3d96b4fc bea1fef3 bdfcf780     .?n....=........
   1df60:	3d6cd434 be445b31 be4550cc bdf42bd0     4.l=1[D..PE..+..
   1df70:	be0213f7 bdd70860 3e957ee5 3e7e1eed     ....`....~.>..~>
   1df80:	3d105f30 be47f2c7 3b8e3c69 bd51eef1     0_.=..G.i<.;..Q.
   1df90:	be41098e 3dbf3e6f be098d30 be19a9c1     ..A.o>.=0.......
   1dfa0:	bd96b8a7 3c82d86c bd3d4545 be4fb881     ....l..<EE=...O.
   1dfb0:	3d32e1d5 bc518526 3e8b0986 3e8745a3     ..2=&.Q....>.E.>
   1dfc0:	3e52eb50 3c97e717 be1863c6 bcd4ff34     P.R>...<.c..4...
   1dfd0:	bee5dcf9 3d86054c bcf291ee bcfa839f     ....L..=........
   1dfe0:	bd9e3802 bcfe8a7c be02139a be08cfc3     .8..|...........
   1dff0:	3d0dfb49 bd29f617 3edd7a88 3e013b6f     I..=..)..z.>o;.>
   1e000:	3e5bdd19 bd19bc47 bd9ac443 3d8216dd     ..[>G...C......=
   1e010:	be8908d4 bed8b51f 3d69445a be601535     ........ZDi=5.`.
   1e020:	be9e3406 3ea15aff be866961 bd8aee90     .4...Z.>ai......
   1e030:	be36554a 3d577143 bf0ecbaa bf3591b4     JU6.CqW=......5.
   1e040:	bf0f5b6f 3e038240 be987807 be9015c2     o[..@..>.x......
   1e050:	beaa72f9 be9c17e2 3da93e08 bf1aae9f     .r.......>.=....
   1e060:	bf28f7f0 3dfc8be1 beecb55b 3ca91464     ..(....=[...d..<
   1e070:	bcdb3a5f bdd3c8c2 bf52a21d 3d85068d     _:........R....=
   1e080:	beaffc59 3cb0a1ab be2fa04d bbd31f04     Y......<M./.....
   1e090:	bce24920 3d02c712 3e318976 3d4883b6      I.....=v.1>..H=
   1e0a0:	becfc840 3ddb9ea3 3e2a472f bf8df7a8     @......=/G*>....
   1e0b0:	3d253afc bdb39c82 3e0525e4 bec07d56     .:%=.....%.>V}..
   1e0c0:	3d9fec7c bd8e5948 3e914bcd 3e0d6e53     |..=HY...K.>Sn.>
   1e0d0:	3e939991 be169c54 3dbf8f68 3da1efbd     ...>T...h..=...=
   1e0e0:	3bcf83c4 bec1c4d6 3e3e4711 bdf55c37     ...;.....G>>7\..
   1e0f0:	3ddb27c2 bd97795d 3d0cf298 beaaa66c     .'.=]y.....=l...
   1e100:	bdb530d9 3a010590 3e358ff1 bcfd5d82     .0.....:..5>.]..
   1e110:	3e54f8c7 bcd8e19e 3e239dba 3e0687c5     ..T>......#>...>
   1e120:	3ceee76b be2a75ae 3e2cf59b bc9d58c5     k..<.u*...,>.X..
   1e130:	3cbb3b4b 3c7a3396 beabd3d7 be5e0333     K;.<.3z<....3.^.
   1e140:	3d2ce424 bc0966c6 3e8e166f 3b0741d1     $.,=.f..o..>.A.;
   1e150:	3e40cc25 3d0f18e2 3e82e815 3ddb6941     %.@>...=...>Ai.=
   1e160:	be3727e1 be9d5b00 3e40dbcb bbea3ce1     .'7..[....@>.<..
   1e170:	bc30610e 3d9537ba bef317fd be5074c2     .a0..7.=.....tP.
   1e180:	bd7e7a9a 3dc33430 3ec3e254 3d9aa66d     .z~.04.=T..>m..=
   1e190:	3e88a2af 3d7111d8 3e26a84b 3beb2fb8     ...>..q=K.&>./.;
   1e1a0:	bd2b6365 3c37d392 3ea6f095 be156a00     ec+...7<...>.j..
   1e1b0:	3d375536 3d4d591d be91df7c be6f6ba2     6U7=.YM=|....ko.
   1e1c0:	3ce24b27 bc50001a 3e9e40e9 be01aa99     'K.<..P..@.>....
   1e1d0:	bb7058c2 3cd98c83 3de63e0d 3d816ff1     .Xp....<.>.=.o.=
   1e1e0:	3c7b83cb bd3bff78 3e79aee1 bc857227     ..{<x.;...y>'r..
   1e1f0:	be0ab172 3b8ac6da be14e56b bd9e70af     r......;k....p..
   1e200:	3dc3baa2 bd10643e 3e94e26c bd086a65     ...=>d..l..>ej..
   1e210:	3e9a6670 bdd4969e 3e70cdb3 3e0f7a93     pf.>......p>.z.>
   1e220:	bdfa948c bd6390a4 3e8807cb 3d48ab06     ......c....>..H=
   1e230:	3e3e5b44 bb6cd67f bcf0ed04 be7cc3e4     D[>>..l.......|.
   1e240:	bd2c9426 3ccc274a 3e92c2fc bd271b82     &.,.J'.<...>..'.
   1e250:	3e9bf49a be8b5336 3e8c9c0f 3d99682f     ...>6S.....>/h.=
   1e260:	3caa6220 bc6f1ebb 3e4b1f9d be457f54      b.<..o...K>T.E.
   1e270:	3cb5ba9b 3c2b194b 3cb7e699 be23450b     ...<K.+<...<.E#.
   1e280:	3d2ad678 3e07e202 3e6626d6 be2b283a     x.*=...>.&f>:(+.
   1e290:	3e367745 bdf6f32e 3dea28b9 3ddbdf74     Ew6>.....(.=t..=
   1e2a0:	3a826915 3ca189e2 3eb6fe04 3e1c5bc2     .i.:...<...>.[.>
   1e2b0:	bd087a73 3d0e504d bdb355a0 be1d2418     sz..MP.=.U...$..
   1e2c0:	bdd15bbc 3dd9b0cc 3d952ca1 be087079     .[.....=.,.=yp..
   1e2d0:	3e1853eb bd438dc5 3d6ea35d 3e0f0566     .S.>..C.].n=f..>
   1e2e0:	bd8b01a4 bd47b857 3e8a97e8 bd135277     ....W.G....>wR..
   1e2f0:	3daea240 3ad4bc8f bdd4088b be441a56     @..=...:....V.D.
   1e300:	bd358722 bca929b1 3e8c06fe bd3888ca     ".5..).....>..8.
   1e310:	3e04ddba bea90b66 be9da89d 3b326055     ...>f.......U`2;
   1e320:	3e09097d bc3fb54f 3ede7971 be38e92d     }..>O.?.qy.>-.8.
   1e330:	bd764c9a bca0e8a2 bd10c7f4 3c200771     .Lv.........q. <
   1e340:	3d46c86d bd163c44 3e5a5afb bee00143     m.F=D<...ZZ>C...
   1e350:	bf41bf2e bf1e7f14 bf4d88cf bea6b085     ..A.......M.....
   1e360:	3d9ad065 bc1cbead 3d85c1fa bdae72fc     e..=.......=.r..
   1e370:	bdc8f514 3d08200c 3e6335e8 3d74f5c0     ..... .=.5c>..t=
   1e380:	bf0dd58b 3d4b943d be33ff69 bf81b76f     ....=.K=i.3.o...
   1e390:	bf5e052a be941921 beed2a34 bf03f110     *.^.!...4*......
   1e3a0:	bf80f040 bd1e4408 bf46590d beb3a631     @....D...YF.1...
   1e3b0:	bec45d58 bd10051a 3ee1e6a7 beb906f7     X].........>....
   1e3c0:	bfa0f0ce bc85cff4 be82e23a bf7385fd     ........:.....s.
   1e3d0:	bf552224 bf20ad49 bc3f5890 beb4bf5d     $"U.I. ..X?.]...
   1e3e0:	bf614b23 3c4d9a4a bf3d207a 3ba18cfd     #Ka.J.M<z =....;
   1e3f0:	be0e15c4 bc56b82a 3f0c41b5 becffaf6     ....*.V..A.?....
   1e400:	befc1c3b bd248bb5 3efde0ca 3ec9f32a     ;.....$....>*..>
   1e410:	3b1a8b58 3f0f3706 be5a79e5 3da56ccb     X..;.7.?.yZ..l.=
   1e420:	3ec6a061 3cbc2786 be4b51ee 3f0d4a88     a..>.'.<.QK..J.?
   1e430:	be820e16 bdcdd9ca 3eec2653 3e89a667     ........S&.>g..>
   1e440:	3d21893e ba8a9489 be99bc4e 3ddcf0b9     >.!=....N......=
   1e450:	bea7614b be2e3c5a 3e822ea8 bd851068     Ka..Z<.....>h...
   1e460:	be7c2328 3e017b82 be1bc3c1 3ec58b60     (#|..{.>....`..>
   1e470:	bdb155da 3d2946d7 3dcdff8e bde3acf1     .U...F)=...=....
   1e480:	be437872 3e52edd3 bee89e6d 3d9a9a79     rxC...R>m...y..=
   1e490:	be63f698 bebf7c0c 3e9a4583 be0b351d     ..c..|...E.>.5..
   1e4a0:	3b6700c5 3df43e75 be1b2b77 bcebffa5     ..g;u>.=w+......
   1e4b0:	3e74b3b6 bd3dbf52 be2ddc7a be3d5b8a     ..t>R.=.z.-..[=.
   1e4c0:	be6d30fb 3e35d867 beb8720e 3a800ad2     .0m.g.5>.r.....:
   1e4d0:	3d8d8b43 be9a8fd9 3e8a80ba bd021bc7     C..=.......>....
   1e4e0:	bb80ae2a 3e083131 be2f7555 bd48c6ad     *...11.>Uu/...H.
   1e4f0:	3e7e0343 bdb8e448 bde8c675 bda13c06     C.~>H...u....<..
   1e500:	3dc2a2d7 3e0747e5 bedb42a6 be05bf6b     ...=.G.>.B..k...
   1e510:	bdc76284 be972eb7 3e9e29dc 3d0ac53b     .b.......).>;..=
   1e520:	bd28d278 bc0b0041 bcc4cc08 bde088a2     x.(.A...........
   1e530:	3eb04823 be2f0e00 3d84b069 bd839d20     #H.>../.i..= ...
   1e540:	bca6e353 3dd17499 be8d3336 bcfe2e35     S....t.=63..5...
   1e550:	bcf6ead4 be90f9c2 3da76772 3e08ae44     ........rg.=D..>
   1e560:	3d496fed bda4e3ed 3d2511c8 bd307bc0     .oI=......%=.{0.
   1e570:	3df76e80 be94e9b9 3dba8012 bcacfb03     .n.=.......=....
   1e580:	bcf453be bd27268c bec71371 be02c56e     .S...&'.q...n...
   1e590:	3d239d54 be39baa5 3d5226f0 3dc9f6fe     T.#=..9..&R=...=
   1e5a0:	3da81894 be1cd3e6 bde6d29a bd1db0bc     ...=............
   1e5b0:	3db00a22 be740f09 3dde3622 3d20c6ab     "..=..t."6.=.. =
   1e5c0:	bdd1eb5b bd1a09af be3183aa bcbd9d2d     [.........1.-...
   1e5d0:	bdb6ca8f be4aa08c 3dfa674b 3e01993f     ......J.Kg.=?..>
   1e5e0:	3da5640e bad3e9e3 bc6a099d 3e824f28     .d.=......j.(O.>
   1e5f0:	3e0a4ce3 bd6efd44 3da0fc94 3d83358e     .L.>D.n....=.5.=
   1e600:	bcea14ef bd10f94b bd8e4342 bd3b780b     ....K...BC...x;.
   1e610:	bd2fc80d beb1c043 3e8592f4 3dea10fd     ../.C......>...=
   1e620:	3d89a13f bd2ad2b9 be99fd6c 3e22f068     ?..=..*.l...h.">
   1e630:	bdf83b4e be18a06a bd1dee91 3d0e1448     N;..j.......H..=
   1e640:	bdb22b64 3cad3447 bde79cb1 3d8b9ad0     d+..G4.<.......=
   1e650:	3de55bc6 be211fa5 3e0b260a bd5a1aa4     .[.=..!..&.>..Z.
   1e660:	bde8533e 3bc9b5da be5368c0 3e9a3185     >S.....;.hS..1.>
   1e670:	3e1a64f9 bd354ae0 bda0aae8 3dbdf7ac     .d.>.J5........=
   1e680:	be1abdbf 3d413e71 bdfb555c 3de0794b     ....q>A=\U..Ky.=
   1e690:	3d870ec1 bd83faac 3e1e1b1c 3da7e6cd     ...=.......>...=
   1e6a0:	bda32add 3cc048d2 bed54a4e 3e16a261     .*...H.<NJ..a..>
   1e6b0:	bc82e697 bdaf7e79 3dfb1a3b 3e3d30c9     ....y~..;..=.0=>
   1e6c0:	be86273d 3e5f31d1 be99fc42 3dc382e0     ='...1_>B......=
   1e6d0:	3dd18591 3ceabf95 3de41939 be17404f     ...=...<9..=O@..
   1e6e0:	bdd88f5b bd638b16 3ba112d5 3c68d5c0     [.....c....;..h<
   1e6f0:	bdb89655 be9df3bc 3dd579f8 3dd51aac     U........y.=...=
   1e700:	bd1400d0 baad1dca be2ced79 bcc605c4     ........y.,.....
   1e710:	3df71c0d bd8fd0d8 3dba0e79 3d30333c     ...=....y..=<30=
   1e720:	bdbf082c bd717a4a bc453bc2 be8eac7a     ,...Jzq..;E.z...
   1e730:	bda90613 be3bd40e 3d474bc5 bd85b590     ......;..KG=....
   1e740:	be0fcee5 3cc7ae02 be4d9cc1 3d8f0760     .......<..M.`..=
   1e750:	bd7857a0 3e869348 bdfbede4 3d74576e     .Wx.H..>....nWt=
   1e760:	bd015385 bdffaf56 3e07e2fe bddbb413     .S..V......>....
   1e770:	be9f89fb bde2b974 3e8cac4b bd8d2af8     ....t...K..>.*..
   1e780:	be087d76 3d84c839 bde90262 3afc1cb0     v}..9..=b......:
   1e790:	bd067e52 bccef1ec 3cc33b00 3d3e4e08     R~.......;.<.N>=
   1e7a0:	be45195c bdbd06bb baf7bb9d 3b87a59c     \.E............;
   1e7b0:	bd85831a bceb38a3 3ddc6583 3e0e8d5c     .....8...e.=\..>
   1e7c0:	3be67fcf bdaf2c7d 3cafc59c bcc76ad7     ...;},.....<.j..
   1e7d0:	be48c27a 3d0e1afc 3d3e979e bad034f1     z.H....=..>=.4..
   1e7e0:	bdee60bb bdec2f85 3c7b6f8e bdfc28b9     .`.../...o{<.(..
   1e7f0:	be6b844d bd4c3526 bd2fe98a be1c112a     M.k.&5L.../.*...
   1e800:	be087ebb be8173f6 bd11fd36 bdcf856a     .~...s..6...j...
   1e810:	bd939f64 bdfffeb8 be19a54f be349bd9     d.......O.....4.
   1e820:	3adbac17 bda11c2d 3c909422 bb6da9cb     ...:-..."..<..m.
   1e830:	3d9ead84 be119afd 3d13aa93 bd8b6142     ...=.......=Ba..
   1e840:	be28215d bdd27b15 3d547ef5 3d8176c1     ]!(..{...~T=.v.=
   1e850:	bde71345 3d124fac 3c0e1c8f 3c706db3     E....O.=...<.mp<
   1e860:	bbdcfa6b bcf9abd6 bcf74949 bd59504b     k.......II..KPY.
   1e870:	bdb01e10 bd397143 bdc1e0d5 3d5fc233     ....Cq9.....3._=
   1e880:	be4aa748 be358def bd3c9ea1 bda53ab0     H.J...5...<..:..
   1e890:	3da19da8 3d73b061 3dbd36db bd03c1a1     ...=a.s=.6.=....
   1e8a0:	bdac98de 3dd45ae1 bda10487 3d2fcf22     .....Z.=...."./=
   1e8b0:	bdc2f3ae be30e07d be03361d 3db186c3     ....}.0..6.....=
   1e8c0:	bdbbf100 bd56985f be06cddd 3ba56ecf     ...._.V......n.;
   1e8d0:	bd88a0aa be568799 3d37ce59 bb9c1ec6     ......V.Y.7=....
   1e8e0:	be1f24f9 3d89ee6e bbe8d5a5 bd7d47de     .$..n..=.....G}.
   1e8f0:	be2646e3 3dc7428b bdc6c8b5 bdc3c158     .F&..B.=....X...
   1e900:	3d4f674d be2bdd9f bd022413 bd2a308c     MgO=..+..$...0*.
   1e910:	3c543099 3ca4ce86 3c1bea3c 3d002018     .0T<...<<..<. .=
   1e920:	bc0a1df5 3d74c03f bbf44f5a bdc5771e     ....?.t=ZO...w..
   1e930:	bde416ee 3d60b4b5 bdeda225 bd9e7d97     ......`=%....}..
   1e940:	bd36d4c9 3ca61bbf 3d27b96e 3d2e11e8     ..6....<n.'=...=
   1e950:	bdbdaea5 bd04fadd bde501e6 3d654303     .............Ce=
   1e960:	bd34f436 bdd133c8 be1c0606 3bb79417     6.4..3.........;
   1e970:	be011164 bde6b1df be3b78a5 bd58160d     d........x;...X.
   1e980:	3cd4bc4b be522392 be153f0d be52d38c     K..<.#R..?....R.
   1e990:	3b35a400 3da58437 be02e3df be0f99bd     ..5;7..=........
   1e9a0:	be33379d 3dfdd187 be3926cb be0e3f5d     .73....=.&9.]?..
   1e9b0:	be2db1e6 bd7d004c 3bd832f7 3d86cfc5     ..-.L.}..2.;...=
   1e9c0:	bda86260 be2f0d44 3df91eed be51794d     `b..D./....=MyQ.
   1e9d0:	be50dd22 be1e3b74 bd774fe1 be1d0200     ".P.t;...Ow.....
   1e9e0:	bd445f07 3cb83f44 bba9959d 3d55e84a     ._D.D?.<....J.U=
   1e9f0:	3d5d6efd be207ccd 3da223b5 3d84c892     .n]=.| ..#.=...=
   1ea00:	be3f4aa4 bd75d7ae bdc45e46 bd24e0b9     .J?...u.F^....$.
   1ea10:	bd83ba2a 3dd9fedd 3d947298 3d09916b     *......=.r.=k..=
   1ea20:	3b88ae51 bbd86a65 be171544 3db3bbcf     Q..;ej..D......=
   1ea30:	be3fa1fe bdd8bf57 3d9dc5cf bc5980ce     ..?.W......=..Y.
   1ea40:	bddd3814 be56b549 3da5b0c5 bd1099a9     .8..I.V....=....
   1ea50:	bc95ea39 be3f5573 bd8557fd 3d65f11d     9...sU?..W....e=
   1ea60:	bd06e9ab bcf85377 bd75bcfa 3d6cc832     ....wS....u.2.l=
   1ea70:	be42fbec bd8ae34f bc32d4c9 3dbe14e0     ..B.O.....2....=
   1ea80:	be2ad2dd be42f32d 3d6e618a bb85ed34     ..*.-.B..an=4...
   1ea90:	bd3c83cc bc8fe4f4 bd2a4e6a be1bb832     ..<.....jN*.2...
   1eaa0:	3d73d245 bd6463a9 bdb52334 3e0016e3     E.s=.cd.4#.....>
   1eab0:	bdf0aca5 3d3def1c 3cffbafc 3d0bfabc     ......==...<...=
   1eac0:	bd60d7fc bbdd1091 3dbe68e4 be5092a5     ..`......h.=..P.
   1ead0:	be277b98 bea2e378 bd2163a6 3dc0e46d     .{'.x....c!.m..=
   1eae0:	bdd29c68 3e11b45b bda9efa7 3d83fbf9     h...[..>.......=
   1eaf0:	3ce56dd8 bd3d59c2 bce3026f bbcf52dd     .m.<.Y=.o....R..
   1eb00:	bdbc3458 bd4543a9 bd9af01e 3d614380     X4...CE......Ca=
   1eb10:	be72a477 3eb017a1 3ed15f36 bdfe2012     w.r....>6_.>. ..
   1eb20:	bc7c4d5d 3e3d0afe 3b22cfd5 3c0f2edc     ]M|...=>..";...<
   1eb30:	3d903c79 3d2e83ac bf22ce75 be354e23     y<.=...=u.".#N5.
   1eb40:	3c610b92 3e70dccf bea2e43f 3d9e0163     ..a<..p>?...c..=
   1eb50:	bea80561 3de07d1b 3ecc3bb5 be9d97dc     a....}.=.;.>....
   1eb60:	3d60f113 bd955bfc 3e0627d8 bd653e27     ..`=.[...'.>'>e.
   1eb70:	bd7bc33a 3d37a577 be146730 bebe10f9     :.{.w.7=0g......
   1eb80:	3e53ec4f 3dd926f5 bf2d3b48 bc359bd1     O.S>.&.=H;-...5.
   1eb90:	3dae607e 3d5b08df be9be958 bef6c6b6     ~`.=..[=X.......
   1eba0:	3e45a357 bd1911a1 3e2db8af 3e069bb8     W.E>......->...>
   1ebb0:	be3103bc 3ca4e049 bd163d67 be54a25d     ..1.I..<g=..].T.
   1ebc0:	3d1b85c7 bb0576fb bbd51f20 be6512c3     ...=.v.. .....e.
   1ebd0:	3e9d601e bd038d74 bf0187e6 bec3584e     .`.>t.......NX..
   1ebe0:	3e093e0b bd170fae 3d5bebab 3e894133     .>.>......[=3A.>
   1ebf0:	be1466fe bc63fd82 bebb1d07 3d7e1380     .f....c.......~=
   1ec00:	bedf5351 3d9178b3 bdac797e be3fe22e     QS...x.=~y....?.
   1ec10:	3d018546 3e64f8ec beed8e06 bf1c7bf7     F..=..d>.....{..
   1ec20:	3d425b09 3b82fd5b bde4a5de 3e827ccb     .[B=[..;.....|.>
   1ec30:	be77e7d6 bae38e28 bf1619f5 3e0cf947     ..w.(.......G..>
   1ec40:	bea7a493 bd0bfda1 be2a2534 be3ea679     ........4%*.y.>.
   1ec50:	3e7a4672 3ed4b1dd 3dd7aea6 beb8a3cd     rFz>...>...=....
   1ec60:	bdeaf283 bcfc19da bca2768d 3ca25617     .........v...V.<
   1ec70:	be00a9f4 3d36de5b bf2d780f bd7edc7f     ....[.6=.x-...~.
   1ec80:	bd93238b 3d0e440b be73dad1 be5b9fcf     .#...D.=..s...[.
   1ec90:	3e25e950 3e956c83 3d760872 be51e5ae     P.%>.l.>r.v=..Q.
   1eca0:	bda4f0d4 bdce06f9 3e149890 3c202924     ...........>$) <
   1ecb0:	be1c7511 3c2b7699 bec1649b be085d58     .u...v+<.d..X]..
   1ecc0:	3e0f09cc bd1e156e bded4517 be00b415     ...>n....E......
   1ecd0:	3d830671 3eb27ee5 3e579572 be782b10     q..=.~.>r.W>.+x.
   1ece0:	be178b8f bd69cb7a bd35e993 3e134a70     ....z.i...5.pJ.>
   1ecf0:	bdde2f29 3d0f2c49 3e7bd1b4 bd1aff15     )/..I,.=..{>....
   1ed00:	3d16eb09 3d942016 be378162 bca9b4f4     ...=. .=b.7.....
   1ed10:	bcfbe9a1 3dfce06a 3e4f3e34 be3745c3     ....j..=4>O>.E7.
   1ed20:	3d137cbd 3ca1c580 bd942d95 3dc3f237     .|.=...<.-..7..=
   1ed30:	bcb54cea 3d0e6c3c 3dea0395 bda5cb00     .L..<l.=...=....
   1ed40:	3d94dbc6 3d9f75e0 bccd2b35 bc9dd64b     ...=.u.=5+..K...
   1ed50:	3e34e619 3da8c795 3e4da839 be2efe1a     ..4>...=9.M>....
   1ed60:	3d8c4663 be0c63b2 bc8253cb 3d23cc0d     cF.=.c...S....#=
   1ed70:	3cffee93 bd10baa1 bbfd9ff4 be5263e4     ...<.........cR.
   1ed80:	3ddb3fa0 bda18ce3 bd754f75 3ce6c364     .?.=....uOu.d..<
   1ed90:	3e966a91 3e418f5b 3e8ded0b bd47fae1     .j.>[.A>...>..G.
   1eda0:	3da679e8 3c774e7f baf1bf3d 3d922e83     .y.=.Nw<=......=
   1edb0:	bdc3c814 3d006942 3d8b9386 be37b3c6     ....Bi.=...=..7.
   1edc0:	bc278c5d bcc970ee be96f5f7 3de1203f     ].'..p......? .=
   1edd0:	3e8b7a07 3d1746c1 3e3ccc39 be11a0d4     .z.>.F.=9.<>....
   1ede0:	3de38b24 3d49329b be086fc1 3d0e215f     $..=.2I=.o.._!.=
   1edf0:	3d1ac1c0 3d8e304d 3e2edf0d be4b8458     ...=M0.=...>X.K.
   1ee00:	3d850896 3c4f2e9a bec24d26 3dea7678     ...=..O<&M..xv.=
   1ee10:	3d0a01d6 be78eff5 3e829b66 be5f6b90     ...=..x.f..>.k_.
   1ee20:	3df9df8c bee99884 3c734e38 3e2aacce     ...=....8Ns<..*>
   1ee30:	3d80291d be94d404 be2f8b5d bec5de02     .).=....]./.....
   1ee40:	bd0e6bbc bdb2340e be71c1fc bca49ab3     .k...4....q.....
   1ee50:	3e5528d2 3e154b99 be8b9e6b bea6a70f     .(U>.K.>k.......
   1ee60:	3d7f1c9f bed69703 bd7e2dec 3e2aa25a     ...=.....-~.Z.*>
   1ee70:	3cf90196 bed3aa02 bf1e3ab1 3e50ee4b     ...<.....:..K.P>
   1ee80:	be4a8433 beca5eae be3dad6d bd8bdc35     3.J..^..m.=.5...
   1ee90:	be193b7f bde93ff7 bea90d39 be2faf62     .;...?..9...b./.
   1eea0:	bdf24250 3deca20b be6e3987 bd18e2a0     PB.....=.9n.....
   1eeb0:	bd9df9d0 3c1cca44 3ec35322 be93898b     ....D..<"S.>....
   1eec0:	be2ac05b bce908c5 bdbb7a55 be4459a6     [.*.....Uz...YD.
   1eed0:	be9e5a92 be922144 be574f97 be1926e6     .Z..D!...OW..&..
   1eee0:	bef91a7c 3c9a2da7 beb96ca1 bef01f17     |....-.<.l......
   1eef0:	be634136 bd72fbe1 3ee05277 bf0123a8     6Ac...r.wR.>.#..
   1ef00:	be342334 bdbe7c86 bede3195 be0479ea     4#4..|...1...y..
   1ef10:	becc8223 bf1cc9f6 3c417d1a be6bc1cb     #........}A<..k.
   1ef20:	bf2d47f7 bd3287fe be8273ad be3ed1a2     .G-...2..s....>.
   1ef30:	bd08fa4c bd3de1ef 3e724caf bea14679     L.....=..Lr>yF..
   1ef40:	bee1735a bdc80b0d 3e91222d be7d093f     Zs......-".>?.}.
   1ef50:	be25e718 bd495020 bc4b2908 be82d6ce     ..%. PI..)K.....
   1ef60:	beece098 3d2d3dcd bdb0f8f4 bdf3ee7a     .....=-=....z...
   1ef70:	b8d8d421 bd81f3f1 3d0c082f 3e194680     !......./..=.F.>
   1ef80:	be9c3c80 bdf246c1 3e3a891d be0a64a9     .<...F....:>.d..
   1ef90:	bd2fe3b5 be558d99 bdcf1119 bd3a5d00     ../...U......]:.
   1efa0:	beb870ef bc4ee72f 3ea1bc57 bcd9cdbc     .p../.N.W..>....
   1efb0:	bdbe6a7d bd3a6e23 bd7765c8 be1ae9b2     }j..#n:..ew.....
   1efc0:	be7ab34f bd3d2992 3eacf1c2 bd393560     O.z..)=....>`59.
   1efd0:	3ce8a649 3e04f435 bc092641 3ea34e51     I..<5..>A&..QN.>
   1efe0:	bd9a7456 3d9410ae 3d51e901 3d451dc0     Vt.....=..Q=..E=
   1eff0:	bcb4b180 bdcb519b bd2dcaa8 bc5212a3     .....Q....-...R.
   1f000:	be05ee22 bd664cf0 3ea30a12 bc8de7ae     "....Lf....>....
   1f010:	3e4832a2 bdc625d9 3e0ee79f 3e20d483     .2H>.%.....>.. >
   1f020:	bcf011f5 3d8cb1d8 3bd503ad 3dc04f87     .......=...;.O.=
   1f030:	3d3617b5 bd08dc13 3d23286d be944824     ..6=....m(#=$H..
   1f040:	bd4fbed9 bd90180b 3e91ee04 3e201260     ..O........>`. >
   1f050:	3e3150a4 bd91b479 3dfd3bb6 3dce3a87     .P1>y....;.=.:.=
   1f060:	3d3c25ab 3bf6ba2e 3e88be22 3d911d41     .%<=...;"..>A..=
   1f070:	3d922e40 3d90d802 be583f68 bdd7ac9b     @..=...=h?X.....
   1f080:	bb8a6d18 bc7df41f 3e0945e9 3d95fe9f     .m....}..E.>...=
   1f090:	3e2af89d be185955 3e36fdb1 3e3baa2a     ..*>UY....6>*.;>
   1f0a0:	ba39f6a6 bd744da1 3e8de6d9 bc8ca580     ..9..Mt....>....
   1f0b0:	3d257461 3d71fe34 be8fb5bc bef44146     at%=4.q=....FA..
   1f0c0:	3a9ef217 3cce4580 3e8fd1a4 bc432ee3     ...:.E.<...>..C.
   1f0d0:	3eb4243d bd301eb1 3dcd3698 3d55480c     =$.>..0..6.=.HU=
   1f0e0:	be166f39 be34821d 3e817dc0 be0ae173     9o....4..}.>s...
   1f0f0:	3d13951d bbf56b52 bebc7e42 becc5a0c     ...=Rk..B~...Z..
   1f100:	bcc3c16b 3cf7a285 3e4bef11 3d85b9a4     k......<..K>...=
   1f110:	3ebe761b bdd4209f 3e2a1565 3dfedd6e     .v.>. ..e.*>n..=
   1f120:	bd213572 be480f54 3e46e7fe bd80806f     r5!.T.H...F>o...
   1f130:	3dc82cf4 bd8e0b45 be99d3b3 be196412     .,.=E........d..
   1f140:	3c34988e 3d5c823f 3e8d5c05 3d1d6d66     ..4<?.\=.\.>fm.=
   1f150:	3e79e4e8 bd0c0609 3d9025fc 3df1dad8     ..y>.....%.=...=
   1f160:	3e187ebb 3ce179a7 3d316568 be0f1680     .~.>.y.<he1=....
   1f170:	3c792aa6 3df56a4f be838e2d bd861aef     .*y<Oj.=-.......
   1f180:	bcd398d7 3dfb99dc 3ed02de8 be239993     .......=.-.>..#.
   1f190:	3e84dd36 3e0a0f41 bcd54b90 3dac40d3     6..>A..>.K...@.=
   1f1a0:	3c95088e be6f5bcc 3e897b02 be552a6f     ...<.[o..{.>o*U.
   1f1b0:	bdcd5764 3da8a28d bd421faa be5c2212     dW.....=..B.."\.
   1f1c0:	bd43fa9a bd8193e0 bd7478a6 bed48d78     ..C......xt.x...
   1f1d0:	bf32c77e bf06c001 bd7fadd8 bea7c7d2     ~.2.............
   1f1e0:	beffc5be 3c03f51e bf07ae96 be60f643     .......<....C.`.
   1f1f0:	be8c7e1c bd5105d4 3e8c9021 be85cb13     .~....Q.!..>....
   1f200:	bf05b4df 3ba779c3 3c395460 3d919a12     .....y.;`T9<...=
   1f210:	3d8d53e2 bb5b49e8 be95cc28 bcd77900     .S.=.I[.(....y..
   1f220:	3c807e2a be155fc9 3d4c7e4f bc586d4a     *~.<._..O~L=JmX.
   1f230:	be17a26d be11641c 3e7df205 3bb4160f     m....d....}>...;
   1f240:	3d883698 bec09187 3ccdbb3a bea85d89     .6.=....:..<.]..
   1f250:	3de2db67 bd5fe3d0 be0ead2b be241e4c     g..=.._.+...L.$.
   1f260:	be8f6fe7 3cb5a30a bd8bf3fe 3dc2fb42     .o.....<....B..=
   1f270:	bd30307b be49bfbd 3e1492b6 bd3d1597     {00...I....>..=.
   1f280:	bd8b58fa be895d88 be64808d be6cb33b     .X...]....d.;.l.
   1f290:	bbdad487 be643192 bdf4858a bda4899e     .....1d.........
   1f2a0:	be5dd75e be4573bf 3c52a577 bda74a3a     ^.]..sE.w.R<:J..
   1f2b0:	bc3efb37 bd8e9c24 bc91541e bd45af48     7.>.$....T..H.E.
   1f2c0:	3d1e8c25 bd921af2 3e3ab77b be98e90c     %..=....{.:>....
   1f2d0:	3db17470 be59a943 3d18e3e1 be9081c3     pt.=C.Y....=....
   1f2e0:	be080c53 bda55906 3ca27109 3da6307c     S....Y...q.<|0.=
   1f2f0:	3bab3ad7 bd68f900 be192a79 bdb1836d     .:.;..h.y*..m...
   1f300:	bd15c320 bd956e70 bd5324da beb6886c      ...pn...$S.l...
   1f310:	3d5f6514 be41d580 3e3731af bd1cada3     .e_=..A..17>....
   1f320:	be0bfa2f be2e59ed 3e5b9d6a bd8fde37     /....Y..j.[>7...
   1f330:	3db09b39 bd03c0af 3e04c385 bc384f0f     9..=.......>.O8.
   1f340:	be06b30f be2b2064 3e1db081 be8c0857     ....d +....>W...
   1f350:	3de7bc62 3d4edf45 3d297da0 bdc4d487     b..=E.N=.})=....
   1f360:	bd54a7b2 3d8ffa87 3e34054b 3da95aef     ..T....=K.4>.Z.=
   1f370:	bdc9d2d5 bd16bd66 3e08cf54 3cf48a54     ....f...T..>T..<
   1f380:	3e31cdc6 bc7c6df6 bd101e7e be1d4630     ..1>.m|.~...0F..
   1f390:	bc9c655d be4dbeea bc91c076 3d33846d     ]e....M.v...m.3=
   1f3a0:	be1ac563 3daaa048 3e27552c 3d9441ee     c...H..=,U'>.A.=
   1f3b0:	3ca22b3a be15a014 3bdb7533 bd5d0ee2     :+.<....3u.;..].
   1f3c0:	3cc3948d bec38e76 be05d026 bdc37cb3     ...<v...&....|..
   1f3d0:	3da3bd95 bcc70798 bd77c0bb 3c80870b     ...=......w....<
   1f3e0:	bd88da3b 3e0353c3 be007de3 3c40f157     ;....S.>.}..W.@<
   1f3f0:	bd23f2d3 bdcf47cf bd0c3555 bd60413a     ..#..G..U5..:A`.
   1f400:	3e21c1b3 be797917 be0e9e4f be009181     ..!>.yy.O.......
   1f410:	bcbc5baf bcd0bce2 3d9dfea5 be93bd03     .[.........=....
   1f420:	bda9591e bdd0ea1f 3e0361c9 3e164ce8     .Y.......a.>.L.>
   1f430:	bb4183e5 bdd277d3 bc8d9e9e bc374175     ..A..w......uA7.
   1f440:	bd704061 bddeecbf bcee638c bde806c1     a@p......c......
   1f450:	3c4e1715 bdf0aaee bd021217 be67bfbb     ..N<..........g.
   1f460:	be44cb35 3da2af40 bc9de9c1 3e615184     5.D.@..=.....Qa>
   1f470:	3d7fadea 3c82135f bcf51c87 3ce8c45c     ...=_..<....\..<
   1f480:	bd68a3c1 be98bf2c 3bd2a1f7 3c244c70     ..h.,......;pL$<
   1f490:	bd8b19e2 be1795d0 be2b5ea4 be531155     .........^+.U.S.
   1f4a0:	be7cdc33 3e005fa3 3df25c41 bde8ab0d     3.|.._.>A\.=....
   1f4b0:	3d24f9dd 3e06077f 3d26d062 bdf93272     ..$=...>b.&=r2..
   1f4c0:	bdce7a80 be1c00a8 be333a28 bce6fcef     .z......(:3.....
   1f4d0:	3de4d469 be335d9a 3cd91fb1 bd5ce8a8     i..=.]3....<..\.
   1f4e0:	be9d5edb bcb8ac17 3d4d525a bc97003d     .^......ZRM==...
   1f4f0:	be53aa9a be188cc0 bd2893dd 3d976aa5     ..S.......(..j.=
   1f500:	bd5509e1 beaadbea bda00db1 be0cb733     ..U.........3...
   1f510:	3de57cf3 be9c059e be0e7b52 be0b507d     .|.=....R{..}P..
   1f520:	be1a998a 3cde9070 bc7f9873 3e1b72f2     ....p..<s....r.>
   1f530:	bd727164 be7cdbd5 bcc6b4b0 bc430a80     dqr...|.......C.
   1f540:	3da83e7c bedad99a be219de6 be30365e     |>.=......!.^60.
   1f550:	3e3814c5 3da3a1d1 be3ddd22 bd9971d6     ..8>...=".=..q..
   1f560:	3e8dabe8 3a386802 bdc64f4c 3e38b332     ...>.h8:LO..2.8>
   1f570:	be230d29 bdd83984 3daf9382 3c98bb5b     ).#..9.....=[..<
   1f580:	3da79733 be969225 be791f51 be0b7824     3..=%...Q.y.$x..
   1f590:	be78852b 3f40d1f7 3e9ad5a2 be63ff9b     +.x...@?...>..c.
   1f5a0:	be08cb0c 3d998ab8 3d25b9d1 bd3191d0     .......=..%=..1.
   1f5b0:	3d88063d 3ded6547 bed2c4aa bec46cd9     =..=Ge.=.....l..
   1f5c0:	3dc2eea1 3e62bc56 be417d76 3d566035     ...=V.b>v}A.5`V=
   1f5d0:	be1d506c 3d84f4cf 3e4e1d61 be36cdea     lP.....=a.N>..6.
   1f5e0:	3c77c2c4 bd146aa1 3dcb01f2 3e0de673     ..w<.j.....=s..>
   1f5f0:	bd4d54f7 3df00b1b 3e4c6bd8 bebfd905     .TM....=.kL>....
   1f600:	3e0a5a29 3daa1554 beadd06a 3d7ea9b5     )Z.>T..=j.....~=
   1f610:	bda29b5b 3e1eeb66 3db3fadf bdebb901     [...f..>...=....
   1f620:	3d7b60ed bcabc3dd 3da7f99c 3dd7057c     .`{=.......=|..=
   1f630:	beb762f3 3d7b899d 3c20252e be3de4db     .b....{=.% <..=.
   1f640:	3d3dee0e 3cdcd39c be384d00 bd1e3cd6     ..==...<.M8..<..
   1f650:	3e14418b 3e216b56 beb40bfc be24ee8c     .A.>Vk!>......$.
   1f660:	3e48f692 3c4ea401 3d0bf386 3e1d84de     ..H>..N<...=...>
   1f670:	bf00a9e1 3da703a5 bd32f42b bd30ed7b     .......=+.2.{.0.
   1f680:	be2ab6d7 bdaaa7a4 3e59a876 bd3f2b63     ..*.....v.Y>c+?.
   1f690:	3c8db16a 3e90f71c bdb2a8ad be80e25e     j..<...>....^...
   1f6a0:	bd673bb1 bc8858aa be6693ce 3d85e43d     .;g..X....f.=..=
   1f6b0:	bed87dfc bceb8d73 be6c65f7 3d51d4c5     .}..s....el...Q=
   1f6c0:	be4b0d62 bd1fc3b0 3d699887 bcd2804d     b.K.......i=M...
   1f6d0:	3e380c9c 3e818b89 3dea7955 bdc8f2d0     ..8>...>Uy.=....
   1f6e0:	3da99cb4 bd83057f 3bb07705 3d4cbd62     ...=.....w.;b.L=
   1f6f0:	bdc94449 3db93fdc bee3c556 3d26615e     ID...?.=V...^a&=
   1f700:	bc120e31 3b93e82b be1015c0 bdd46bdb     1...+..;.....k..
   1f710:	3d97f7a7 3e08a061 3e658a54 be1dcc58     ...=a..>T.e>X...
   1f720:	3c634433 bdf61469 3dd462ff 3d8b2b05     3Dc<i....b.=.+.=
   1f730:	be132c22 3d0f0c52 bdc79648 3dab354d     ",..R..=H...M5.=
   1f740:	3debbe20 bd86f064 bda571cb 3c952ad5      ..=d....q...*.<
   1f750:	3e06aa57 3e3c145e 3e11f8cb 3d6d3434     W..>^.<>...>44m=
   1f760:	3c0b66a4 bb9d5b52 bd90847a 3e4ac811     .f.<R[..z.....J>
   1f770:	bd8af975 bd226583 bd155d64 bc5e2291     u....e".d]..."^.
   1f780:	3d1209bd 3ceb19fe bd2e78a3 3c7ff362     ...=...<.x..b..<
   1f790:	3e035e05 3db79e6c 3e4d03b1 bdfd7266     .^.>l..=..M>fr..
   1f7a0:	3d1112c5 3cab3999 bd5af5c8 3c988433     ...=.9.<..Z.3..<
   1f7b0:	3d99d60a bbb5cb4f 3e413900 bc2720dc     ...=O....9A>. '.
   1f7c0:	3dbbdb34 3d263c33 3d2b993a 3d7631a4     4..=3<&=:.+=.1v=
   1f7d0:	3d917950 3dc35080 3e393d5c bced7bc9     Py.=.P.=\=9>.{..
   1f7e0:	3d88bbf2 be5eb276 bdb9800c 3d129110     ...=v.^........=
   1f7f0:	3d47fbca bdc443c4 bd8236d3 bdda9603     ..G=.C...6......
   1f800:	3dbf46ac 3d266b26 be0fa102 3e420968     .F.=&k&=....h.B>
   1f810:	3e5df732 3deca5ad 3eb18a97 bdee0ec7     2.]>...=...>....
   1f820:	3df02d12 beae0205 3ce32c63 3e47861c     .-.=....c,.<..G>
   1f830:	3e46a6e5 bd8c886b 3e28846b be79c4ad     ..F>k...k.(>..y.
   1f840:	bcfc4677 3e282740 bde0302c 3cd8b6e5     wF..@'(>,0.....<
   1f850:	3e90ac68 be1c7514 be9ec90d be4fec4b     h..>.u......K.O.
   1f860:	3dcb781b bed3ebf6 bdedab38 3df41a86     .x.=....8......=
   1f870:	3cd23f43 bec391bf 3d6a1976 be3529d9     C?.<....v.j=.)5.
   1f880:	bae7833b bf2ecd6e 3e255fec 3d9f01b6     ;...n...._%>...=
   1f890:	3e376ed6 be498209 bf676531 befcf71a     .n7>..I.1eg.....
   1f8a0:	bc7a80a9 bea07e09 bd381c62 3d9e50ce     ..z..~..b.8..P.=
   1f8b0:	be474b69 be8f6d53 bea417ee 3c527542     iKG.Sm......BuR<
   1f8c0:	be1a67e5 bf53b734 bdb3dfc7 be00606a     .g..4.S.....j`..
   1f8d0:	3dc0d932 3b9c8315 be9a9479 bef10bac     2..=...;y.......
   1f8e0:	be11d813 beb32625 3dc7ce13 3e17b63a     ....%&.....=:..>
   1f8f0:	3d6fd8b7 bee2c11f be26215a 3e390bbd     ..o=....Z!&...9>
   1f900:	3d87b2f3 bef01747 3dd8b909 3e81613c     ...=G......=<a.>
   1f910:	bdbae521 3e0c8026 bd9a3e95 be31c145     !...&..>.>..E.1.
   1f920:	bd14a03d bd325802 3cffc759 3ee20515     =....X2.Y..<...>
   1f930:	be0f1d86 bebc40a0 3e445e68 3dfb1f99     .....@..h^D>...=
   1f940:	be210efe be67f413 bce18239 3ddb0df4     ..!...g.9......=
   1f950:	be9805d6 be4396d5 be048b0d bd9b1bdb     ......C.........
   1f960:	be86b8a7 3e48a793 be7083ff 3eb69281     ......H>..p....>
   1f970:	be2dde00 bed1eacb 3d895f26 bc9478a9     ..-.....&_.=.x..
   1f980:	bcc0e446 be7f7af8 bdda6c7f 3d7a26f0     F....z...l...&z=
   1f990:	be68e1c8 bd2278f9 be7ee1c6 bda1a748     ..h..x"...~.H...
   1f9a0:	bc63dc79 3e25333b be8a5de9 be426a68     y.c.;3%>.]..hjB.
   1f9b0:	bd2415b6 beecab8a 3df00d57 bdd00eea     ..$.....W..=....
   1f9c0:	bdd4e66e be843cc1 be0fc7fe bd3b6ee0     n....<.......n;.
   1f9d0:	be755bb5 be70b257 3c45b99a bcd2e1c0     .[u.W.p...E<....
   1f9e0:	bdbcc371 3d0b3ac1 bcd4920d bd147290     q....:.=.....r..
   1f9f0:	3c790f19 bec9b08d 3de08bec bd92eb61     ..y<.......=a...
   1fa00:	bdf190cc bd9238c4 bc33a089 bd4de54e     .....8....3.N.M.
   1fa10:	bd83d27a 3dd09a61 bd94ca33 3db31a8c     z...a..=3......=
   1fa20:	3e51064e 3db37ad5 be011d6a 3ec4c03a     N.Q>.z.=j...:..>
   1fa30:	bdeef7e6 be1f8ee2 3e96fdc2 be62e16c     ...........>l.b.
   1fa40:	be13d8ff bd81b6bd 3b4adcd8 3acbe2e5     ..........J;...:
   1fa50:	bdc34c49 3da138fb bca75e96 3d23decb     IL...8.=.^....#=
   1fa60:	3e8f0d0f 3e04549b bd781b7d 3e2a2f06     ...>.T.>}.x../*>
   1fa70:	bece9a3e bea7a0a2 3e5e1f58 3cc5e423     >.......X.^>#..<
   1fa80:	be1fc425 3b56809a 3e17b969 3df1d64d     %.....V;i..>M..=
   1fa90:	be4a63f3 3dcda02b be28c314 3e057161     .cJ.+..=..(.aq.>
   1faa0:	3d07b86a 3e2bf955 bd0f8639 3e61d538     j..=U.+>9...8.a>
   1fab0:	bea624db be2cde20 3dc83f15 3d459b9e     .$.. .,..?.=..E=
   1fac0:	be2209ed be332c2a bd548a37 ba840c48     ..".*,3.7.T.H...
   1fad0:	be12232f 3e487cc4 be95d582 3c06da79     /#...|H>....y..<
   1fae0:	3d33f12d bd776055 be05611d 3e8dcb81     -.3=U`w..a.....>
   1faf0:	be010806 bd51c795 bd9972f0 3dc6b206     ......Q..r.....=
   1fb00:	3dca0ffb 3b7e738e bd6734fd bcdd3270     ...=.s~;.4g.p2..
   1fb10:	beea992d bd6473c2 be0f9400 bdba7a75     -....sd.....uz..
   1fb20:	3d2ac485 3d308876 bd9d7253 3e815730     ..*=v.0=Sr..0W.>
   1fb30:	bd95966e 3d38353c bb6f989b 3d2778f0     n...<58=..o..x'=
   1fb40:	3d13a7dc 3e01266d 3c0d560c 3d267334     ...=m&.>.V.<4s&=
   1fb50:	bee5d19c bd803d3a bdf83e12 bd8215af     ....:=...>......
   1fb60:	be492050 3e3e4569 be2df1aa be5a9846     P I.iE>>..-.F.Z.
   1fb70:	beb8093a be6ba710 3e712af4 bd1ade34     :.....k..*q>4...
   1fb80:	3dc52514 bd0e10ac 3e6cd6dd 3d6d104a     .%.=......l>J.m=
   1fb90:	be45028a 3d820079 3e6d2da0 bdaa3bcf     ..E.y..=.-m>.;..
   1fba0:	3d3bbc62 3e85841d be497574 be813d72     b.;=...>tuI.r=..
   1fbb0:	be13b1d5 be956e15 3e95246f 3e22c307     .....n..o$.>..">
   1fbc0:	bd1c2771 be5556f8 be504b4d bd61364e     q'...VU.MKP.N6a.
   1fbd0:	bf0821b4 bce17918 3e580e05 bdffa3af     .!...y....X>....
   1fbe0:	bd784e20 bcfe7ace be02ca8d beb8260c      Nx..z.......&..
   1fbf0:	beab0064 be2b25d2 bd4e461f bda01230     d....%+..FN.0...
   1fc00:	3e29aeea be8fe07f 3d2b189e be14a8e2     ..)>......+=....
   1fc10:	3c17e323 3e21c3ee 3dcedf43 bbd21c12     #..<..!>C..=....
   1fc20:	3dcad57f 3df15c3c 3d447195 bebaf393     ...=<\.=.qD=....
   1fc30:	be5c9368 bef16710 3d18152a 3b82e273     h.\..g..*..=s..;
   1fc40:	3dbc91d6 beb9cb52 3cd74acb bea3726c     ...=R....J.<lr..
   1fc50:	bcedb6f7 3a784bf2 be923b22 3e90d993     .....Kx:";.....>
   1fc60:	be154745 bc29b515 bde30012 bea7b2fb     EG....).........
   1fc70:	be9b1988 be294718 bbece865 be5e95d7     .....G).e.....^.
   1fc80:	bdaef044 be63b25e bdda8c8f 3cceec21     D...^.c.....!..<
   1fc90:	bdc9ec61 beaebcc4 bea77755 be436f5b     a.......Uw..[oC.
   1fca0:	3d727c09 be9d9c07 3c503fa3 be0ca91c     .|r=.....?P<....
   1fcb0:	bd3b2d67 3d10edc4 bed4a250 be0c2947     g-;....=P...G)..
   1fcc0:	3d12919d b867dd88 be2f0738 bc37061a     ...=..g.8./...7.
   1fcd0:	bea39862 3e81cc98 bdd6976e bddd8b95     b......>n.......
   1fce0:	3cf3a479 be11c2b5 be66ecd3 bc8056a3     y..<......f..V..
   1fcf0:	3c630001 3b878956 be3959e2 3dfb6d4d     ..c<V..;.Y9.Mm.=
   1fd00:	3dcc39a0 bd8e4569 3dd6845f 3dbd84a1     .9.=iE.._..=...=
   1fd10:	be380710 3e10fa9e be29a7b7 bd6a8897     ..8....>..)...j.
   1fd20:	bc4944be be52af6d bd60471b 3e094d2d     .DI.m.R..G`.-M.>
   1fd30:	3d4d9baf 3b8d610e 3e43f079 3e6ee4f1     ..M=.a.;y.C>..n>
   1fd40:	3db48230 be1f9ab1 3de76df0 3d7203a4     0..=.....m.=..r=
   1fd50:	3ba52bf6 3dd91cd0 beaa2246 bd5408d3     .+.;...=F"....T.
   1fd60:	bac2b1cd bdb6f207 3c7375fe bd0a9be4     .........us<....
   1fd70:	bd9e90c7 3ca7eaf1 3e5226c8 3ec727fc     .......<.&R>.'.>
   1fd80:	3da96f97 be24cb7f bdb8067d 3d5e40a3     .o.=..$.}....@^=
   1fd90:	be2b4727 3e8d6144 be8c2604 bdfa595c     'G+.Da.>.&..\Y..
   1fda0:	bda6f0cf 3d9cddc6 be70e844 be3114da     .......=D.p...1.
   1fdb0:	bdd2db38 3d19a750 3e3b2df0 3ee79cfd     8...P..=.-;>...>
   1fdc0:	3dbb62b3 3c95e4e6 3e1026a4 3d4d96f6     .b.=...<.&.>..M=
   1fdd0:	bd3493d8 bd819d87 bd85b44f be55b67a     ..4.....O...z.U.
   1fde0:	3d84fdbd 3e15a253 be931e10 bdc5ab4e     ...=S..>....N...
   1fdf0:	3ddfd955 3d6df4ca 3e84fedb 3e369895     U..=..m=...>..6>
   1fe00:	3cfd3e93 bd047061 3ce47246 be580ea9     .>.<ap..Fr.<..X.
   1fe10:	3d3386e5 be03462d bdf0dc94 be2748aa     ..3=-F.......H'.
   1fe20:	bd63b034 bbb71f56 bddececd 3d4db0c7     4.c.V.........M=
   1fe30:	3e011165 3d8aabf5 be10e134 bdff0649     e..>...=4...I...
   1fe40:	be69e4b6 bd7848c8 3d2b631a be35737f     ..i..Hx..c+=.s5.
   1fe50:	bdf5011e be6bad89 3d09856a bdf66974     ......k.j..=ti..
   1fe60:	bec93962 3d8e0072 be9ca5fc bd954e53     b9..r..=....SN..
   1fe70:	bbae7dc7 bab961a7 bece9ab8 bed2cc80     .}...a..........
   1fe80:	be5cebcf bd0ea469 be1ea912 be506dc9     ..\.i........mP.
   1fe90:	bde6d5fc bed05c9f bdbbcf33 bea56670     .....\..3...pf..
   1fea0:	befa926b 3d4ba027 be75265d be8c6346     k...'.K=]&u.Fc..
   1feb0:	bdaf6557 3d1cd8ea bec24fcd bf0bf087     We.....=.O......
   1fec0:	bed9df25 3d4e6a5d bdf106aa be60e231     %...]jN=....1.`.
   1fed0:	bcf26f72 be9e4ab9 bdd7b0fb be96fa9f     ro...J..........
   1fee0:	bf1314c8 bc396aaa bd5a247f 3da93612     .....j9..$Z..6.=
   1fef0:	3d60869e 3c8533bc bef2724c beba9f39     ..`=.3.<Lr..9...
   1ff00:	be68a5c2 3ca10635 3d53adb5 bda2d03e     ..h.5..<..S=>...
   1ff10:	3caa9bfd 3ea88f0a bd09ca24 be4c2c14     ...<...>$....,L.
   1ff20:	bdae1b56 bc60459d be5f16b7 3e8d8f57     V....E`..._.W..>
   1ff30:	bd50ab5d 3cb011cc bed12152 bcb2fffb     ].P....<R!......
   1ff40:	be14d19b bd7e2cfc b9fb9439 bdca93ca     .....,~.9.......
   1ff50:	bdfca70a 3e7fd3f6 be0bdad3 bd99f98e     .......>........
   1ff60:	bd73e4c5 bdae7dba 3d240e5b 3d9046cf     ..s..}..[.$=.F.=
   1ff70:	bc888042 3ca04493 bb532c02 3edf0db3     B....D.<.,S....>
   1ff80:	3cc846f3 bda484c5 3bad13f8 3cb5416d     .F.<.......;mA.<
   1ff90:	be5f74eb 3ed08267 bd9cd03c 3e4897a0     .t_.g..><.....H>
   1ffa0:	be360a1f bd4a51f6 be20e54f bd0d8ea1     ..6..QJ.O. .....
   1ffb0:	bd9c1370 bbb143e8 3ea459c3 3e10d606     p....C...Y.>...>
   1ffc0:	3e888e8e bde1a8e8 be6b6eb3 be7f9628     ...>.....nk.(...
   1ffd0:	beabccde bea6c9b0 3dc57560 3dea3639     ........`u.=96.=
   1ffe0:	beea4353 3d9e9db0 be7c0106 be5149b8     SC.....=..|..IQ.
   1fff0:	3ce8ad7c 3cc64ee2 be561f9f 3d79d75a     |..<.N.<..V.Z.y=
   20000:	be817362 3cd1c1e6 3f181c4e 3ea4e72a     bs.....<N..?*..>
   20010:	3e2480f6 3f00f706 be918e34 3cf39f17     ..$>...?4......<
   20020:	3f1569c5 3dabd818 3d55d298 3edb5ff1     .i.?...=..U=._.>
   20030:	bf054821 bd6544f7 3ef627bd 3eaa584e     !H...De..'.>NX.>
   20040:	3bd5871f bda86f4e bed0081f 3d76d506     ...;No........v=
   20050:	3e48f815 bf0ee038 bdaf5caa bebde2fd     ..H>8....\......
   20060:	bf2f5b54 3dd9e637 be896dd4 3cc4a0e4     T[/.7..=.m.....<
   20070:	bee23776 3c98f0d2 3ecc7ae7 bf113faa     v7.....<.z.>.?..
   20080:	bf3e4a86 3be5a4ae be319862 3d804eff     .J>....;b.1..N.=
   20090:	bdbae779 beca5b93 3d97973c bf2d41f1     y....[..<..=.A-.
   200a0:	bf4ba4c9 3dde2a9e be844ead 3b5c2f01     ..K..*.=.N.../\;
   200b0:	be451cab 3c2b4132 3e505373 bf06c4e2     ..E.2A+<sSP>....
   200c0:	bf13ef62 3c863d6e bdee9a6d 3da8bc49     b...n=.<m...I..=
   200d0:	3e11fe68 befa38de bc8106bc bec385b7     h..>.8..........
   200e0:	bf244f26 bbbb94e8 be9b0e16 be52e8ca     &O$...........R.
   200f0:	bd53b7a2 3b52ef04 bd1ead08 bf01ba72     ..S...R;....r...
   20100:	be8749d7 3cf27bf3 3d848efc 3d3acccf     .I...{.<...=..:=
   20110:	bce4e035 3d058888 3dab2f8d be494f33     5......=./.=3OI.
   20120:	befc68c6 bb2f90fc bdc13820 bd275319     .h..../. 8...S'.
   20130:	be09eea2 3d6b6f5e 3d0df91e beddd576     ....^ok=...=v...
   20140:	beaca8e3 3d0dadaa bdce6291 bcbb5283     .......=.b...R..
   20150:	3e184efd bd8f7398 39551f55 be6785b9     .N.>.s..U.U9..g.
   20160:	bed3cf1a bd140897 be11f1ca be394b8b     .............K9.
   20170:	bcd8e0e8 bc26f40a bd20da0d beb1e752     ......&... .R...
   20180:	bed369fc 3cc8106f be20b5b8 3d72d6cd     .i..o..<.. ...r=
   20190:	bdca1bb4 bdfba71c bd910cf4 bcdaec95     ................
   201a0:	be2bff00 bd454b17 be850c45 bd883897     ..+..KE.E....8..
   201b0:	be0afb76 3cdfb5e3 3dd52c80 beb5b8c7     v......<.,.=....
   201c0:	beba5d94 3cba731e be2581e6 3d493dff     .]...s.<..%..=I=
   201d0:	3e7d10c1 be554f62 be2f293e be6c318c     ..}>bOU.>)/..1l.
   201e0:	bedf0fb3 bcb28763 be3f8af0 3c92e624     ....c.....?.$..<
   201f0:	bda720b3 3bb4a689 3dfce773 bebc9de7     . .....;s..=....
   20200:	be971909 3d78fc7c be237bae 3d3a86e5     ....|.x=.{#...:=
   20210:	bd875607 be87908e be4e20c4 bc380e22     .V....... N.".8.
   20220:	beae44e7 3d1ad5a8 be934e93 bc2fb900     .D.....=.N..../.
   20230:	beb5cf30 bb8b54fb 3e00d065 beda24d5     0....T..e..>.$..
   20240:	bed8c4cf 3cb99334 be8a9702 3d22d48f     ....4..<......"=
   20250:	bea8fc9a bd5c293c 3cf508ab be421e45     ....<)\....<E.B.
   20260:	bec96ec4 3cceb00a be94f97c be1feb09     .n.....<|.......
   20270:	be9e6a82 3c9e1f29 3d0d1900 be775447     .j..)..<...=GTw.
   20280:	bf446831 3d144c0a 3de090dd 3d8ec2d4     1hD..L.=...=...=
   20290:	bea7fb64 be633576 be18e6df bf085082     d...v5c......P..
   202a0:	bf1b97d5 bcce8d28 beaaa009 bdce7fbc     ....(...........
   202b0:	be7a93ae 3bec9f6c 3d897cf2 be9b8ea7     ..z.l..;.|.=....
   202c0:	bf017e7d 3d7eae0d bd09e0fc 3d5a70f4     }~....~=.....pZ=
   202d0:	bdf933d3 bebbf8c5 be8dc6d5 be5eb1c9     .3............^.
   202e0:	bed66e93 3cca9aae be629d59 be626f95     .n.....<Y.b..ob.
   202f0:	beac20a8 3cb0b240 3dedf408 be423c39     . ..@..<...=9<B.
   20300:	bee31c31 3c0e1a1a 3be97959 be1022a2     1......<Yy.;."..
   20310:	3da5aa30 bf068f71 bea02416 bec9b267     0..=q....$..g...
   20320:	bf0f7b52 3d4fe9f9 be1749ac bd6848ae     R{....O=.I...Hh.
   20330:	beb6007b 3c68b6eb 3de9c1c9 bec32ded     {.....h<...=.-..
   20340:	bf4162a0 3d250962 be56069b 3e178b9f     .bA.b.%=..V....>
   20350:	3c3ce734 3e17bb8a 3c15e99d bf046524     4.<<...>...<$e..
   20360:	be0c1f3e 3c8333d7 bca055c7 bdbfc6b4     >....3.<.U......
   20370:	bdfbb15a 3d0b9e64 3e5fbc1a 3dc8783b     Z...d..=.._>;x.=
   20380:	bdd61060 3d7de42d be9b409d bcd10ceb     `...-.}=.@......
   20390:	be2e0058 3eff75b9 3eab204d bded6026     X....u.>M .>&`..
   203a0:	beddb9c3 3ea8dab5 3da26833 3ca9d043     .......>3h.=C..<
   203b0:	3b8b7ff1 3ebf6b3f be34696c bef35879     ...;?k.>li4.yX..
   203c0:	bddb2ef1 3e984862 bd756d59 3c5a2c37     ....bH.>Ymu.7,Z<
   203d0:	bd30e713 3cfcaca1 3e2ad8b2 bdb64b22     ..0....<..*>"K..
   203e0:	be81a3d1 bd159173 3d76fae7 3cdbf160     ....s.....v=`..<
   203f0:	3cc2cf07 3c8aaa7d 3eb113a2 bea390fa     ...<}..<...>....
   20400:	3e1f3783 3db0e8d3 be6849da 3e6b3c9d     .7.>...=.Ih..<k>
   20410:	bc1d5abc 3d2502c9 3e15169e be1740b5     .Z....%=...>.@..
   20420:	3e1a1719 bd8c9517 bd0a42e5 3dc96f61     ...>.....B..ao.=
   20430:	be583c16 be7a1519 3ea2b12a bd5ca252     .<X...z.*..>R.\.
   20440:	3e115f92 bd2c1fb5 be20f8a5 3dc9750b     ._.>..,... ..u.=
   20450:	3e82001e 3d61a1fe 3e413fd5 3dcb6509     ...>..a=.?A>.e.=
   20460:	3c1e75c5 be760fbb 3da0b6bf 3dae04df     .u.<..v....=...=
   20470:	bf06da9b be848c38 3e0c5c92 bdfc67b8     ....8....\.>.g..
   20480:	bd95ecb7 be155013 bd8db175 3e1e710a     .....P..u....q.>
   20490:	3df8797d 3d779740 be9de73b 3caa88b2     }y.=@.w=;......<
   204a0:	3d441679 be02dcb9 bca3cbe1 bbffda29     y.D=........)...
   204b0:	beb84ab2 befb15d9 bd430bf4 bd17c03e     .J........C.>...
   204c0:	bcaea304 bedfffd0 3e0fcb72 3dff7903     ........r..>.y.=
   204d0:	3e406591 bdbb77b6 bf158fa5 be1e6130     .e@>.w......0a..
   204e0:	3dc2a98b be06df6e 3ddf891e 3cf28f8a     ...=n......=...<
   204f0:	bc43cdfd bea24c9c be19b430 3d4594b3     ..C..L..0.....E=
   20500:	bdc1af6c bf1246d4 3e5bdebb 3db0b430     l....F....[>0..=
   20510:	3d842ece bdce763e be935a82 3dc8202d     ...=>v...Z..- .=
   20520:	bd074100 be365ab1 bcce9e40 3e0a6a04     .A...Z6.@....j.>
   20530:	be05c61d bd22b848 be9549f7 bdcabdfb     ....H."..I......
   20540:	be313425 bf0fe3c3 3d32b1cf 3d860d73     %41.......2=s..=
   20550:	bccfbb05 bd8dd54a bf0d6eb3 be2fec64     ....J....n..d./.
   20560:	be15f852 3d80a2d3 bd6a9fac bdf9c75e     R......=..j.^...
   20570:	bd8190c8 3d499de7 be064ad4 3d000443     ......I=.J..C..=
   20580:	bec2a527 befa6890 3e1cb1e9 bd94406c     '....h.....>l@..
   20590:	3c39e3ee bdd7d940 be4619e8 beaa0472     ..9<@.....F.r...
   205a0:	bdd3d880 be048ee6 bcf8ea80 3e5117a2     ..............Q>
   205b0:	3d592bd9 bb758f0c bd8253dd 3d50c306     .+Y=..u..S....P=
   205c0:	be5435f2 beeaf5ce bc613122 be4b0f03     .5T....."1a...K.
   205d0:	3d1e661a be226bb2 bee096d7 beb36f08     .f.=.k"......o..
   205e0:	bdf90430 be2357ea bd8b3f79 3d62a2ea     0....W#.y?....b=
   205f0:	3cfb5bdc 3d175191 be588de7 bd4f9aab     .[.<.Q.=..X...O.
   20600:	beadab7c bf0666a8 3c9efbbf bd1ef148     |....f.....<H...
   20610:	3c94afad be81dcf7 beda56aa be1aca41     ...<.....V..A...
   20620:	beab06af bda3b79e 3db67908 bd043119     .........y.=.1..
   20630:	bcedb590 3c8af75d be378616 3dcd12a6     ....]..<..7....=
   20640:	be429482 bead01d7 3db4ecd1 3c2df643     ..B........=C.-<
   20650:	3dcc80eb be851465 bedbc683 be8bd0f4     ...=e...........
   20660:	bcfd0197 be9edc99 3e09c5f9 3dc01a12     ...........>...=
   20670:	3e2c7d95 bd881640 be3b85d0 3d51efea     .},>@.....;...Q=
   20680:	be5bb363 bec54950 3e2ca6c3 3b47643e     c.[.PI....,>>dG;
   20690:	3d22e2fd be52f21e bed68f9d be0ef839     .."=..R.....9...
   206a0:	bd726760 be0a6005 3c8f1943 3e3de184     `gr..`..C..<..=>
   206b0:	3d248b7d bd3ef517 bde3f2ab 3d9cc28c     }.$=..>........=
   206c0:	bd2155f6 be8a7764 bb975eca 3e085257     .U!.dw...^..WR.>
   206d0:	3dd1b282 bd0b537c 3c9e789b bda5e2e5     ...=|S...x.<....
   206e0:	bdbe311a bd8a5937 3e5e48b5 3de2d36f     .1..7Y...H^>o..=
   206f0:	bd26747f be8cfe8d be75bc35 3d07a9df     .t&.....5.u....=
   20700:	3df4902c 3d9eb063 3e788438 3ed15ca4     ,..=c..=8.x>.\.>
   20710:	bda89d0c 3e8e4f08 be96c112 bbee4c9a     .....O.>.....L..
   20720:	3e9a69e2 bec71471 bce9aac8 3eae811a     .i.>q..........>
   20730:	bf0b0f0d bf15409f 3e9fec99 3e4281fe     .....@.....>..B>
   20740:	be42b074 be969325 3d3636ee 3da29fa5     t.B.%....66=...=
   20750:	3e3e8e07 3d9f2a89 bd5883e5 be01f772     ..>>.*.=..X.r...
   20760:	bc678b9c bdf7c128 bd865d3b bd342d8c     ..g.(...;]...-4.
   20770:	bede8f6f bef2f38a 3eb9493b bd8363fb     o.......;I.>.c..
   20780:	be932fda bea844d6 3bffec3d bd04d6b5     ./...D..=..;....
   20790:	3d19c9e3 3d87db6c bc9ebc70 3e241676     ...=l..=p...v.$>
   207a0:	3d6eb663 be9a58b7 3e21d079 3b22e716     c.n=.X..y.!>..";
   207b0:	bd4a444c becc3478 3d8292fd bd9b223d     LDJ.x4.....=="..
   207c0:	bdcbba01 bcedacf0 3e095f92 bd976e76     ........._.>vn..
   207d0:	3d187d6e 3cf855ed 3e4aaa01 3e77f749     n}.=.U.<..J>I.w>
   207e0:	3dd4d2a9 bdac7a6b bd9067b1 bd94f530     ...=kz...g..0...
   207f0:	3dd7b9dd be042ec3 3da8c1fd be41f080     ...=.......=..A.
   20800:	3c8e23ae bc058a03 3e263350 3dca04dd     .#.<....P3&>...=
   20810:	be82d911 3e422bc9 3e7294bb 3ca58fdb     .....+B>..r>...<
   20820:	3dd089de be86b624 be54a71b bdd12e48     ...=$.....T.H...
   20830:	3e00475d 3da9d78c bd9b22c9 3de8a09c     ]G.>...=.".....=
   20840:	bd1c7bc0 3dddd227 3da08e24 bc53f462     .{..'..=$..=b.S.
   20850:	beba3816 3de36e7c 3e440d7b 3d8d3cae     .8..|n.={.D>.<.=
   20860:	3d4f4e1b be4d7573 be449b98 be74e8d2     .NO=suM...D...t.
   20870:	3e56d98f 3e4e2a74 3dd8b1da 3d85d738     ..V>t*N>...=8..=
   20880:	3d3cbe09 3c6d2824 3d1fcdbb be3f77fb     ..<=$(m<...=.w?.
   20890:	bcbede33 3cb3a15c 3d9dd16b 3e3b7bf1     3...\..<k..=.{;>
   208a0:	3d752c4c beb2ef70 bde017b5 bd658761     L,u=p.......a.e.
   208b0:	3e3e093a bbbf4948 3daa302f 3d077565     :.>>HI../0.=eu.=
   208c0:	3e1fc2bd bdf88ce9 3ce8977c bb51c79d     ...>....|..<..Q.
   208d0:	bd898d40 3c8727d5 bd65a192 bca67af7     @....'.<..e..z..
   208e0:	3cd67cec be1447f7 3c920dd5 bb01113a     .|.<.G.....<:...
   208f0:	3e033b9a be22dee0 bce4ad37 bb03b34e     .;.>..".7...N...
   20900:	bdf6e83f bbf71087 bd9ac3e2 3e0b420e     ?............B.>
   20910:	be9d2692 bc32e34f 3e030a26 3ca760f3     .&..O.2.&..>.`.<
   20920:	3d05240c be94c83e be023150 bd69d4ff     .$.=>...P1....i.
   20930:	3d72421d be7f8ce7 3d168733 bda22c93     .Br=....3..=.,..
   20940:	bbe3f088 3d8496a8 3e40c0da 3d58688a     .......=..@>.hX=
   20950:	be19b0ad bc264e97 3de6261c 3d556848     .....N&..&.=HhU=
   20960:	3dc3e3c6 bbc8e6a7 bd9900f3 3cda632d     ...=........-c.<
   20970:	3e81bdb4 be92b9df bdb23a48 3dd2cb9f     ...>....H:.....=
   20980:	3c97380b bcb795e2 391382f6 3d1a98c0     .8.<.......9...=
   20990:	3d51f4c2 3cf5eb0d 3d52da1d 3d77b0ad     ..Q=...<..R=..w=
   209a0:	3d5158ca 3cb02d5a bdeb8bf0 3e50d80d     .XQ=Z-.<......P>
   209b0:	be182565 befd18b0 bd3b02c4 3d827bfa     e%........;..{.=
   209c0:	be4da0ce bd32c60b 3dc06284 3d1e6e60     ..M...2..b.=`n.=
   209d0:	3e280131 3e047631 bd606b91 3e20f514     1.(>1v.>.k`... >
   209e0:	bd67385c 3dc22136 be7e1013 3e9fd119     \8g.6!.=..~....>
   209f0:	be161ad0 beafb534 3d166786 be580511     ....4....g.=..X.
   20a00:	3cd00dfb bd208890 3d9accdc 3e7a2911     ...<.. ....=.)z>
   20a10:	bebf4405 3e0a1a54 bdb46fff 3d86a4eb     .D..T..>.o.....=
   20a20:	3e00435e bcd94ffa bda27bad 3e01f60e     ^C.>.O...{.....>
   20a30:	bdb4f090 be9a21d0 3e144374 be0be84d     .....!..tC.>M...
   20a40:	bd932b80 3e353987 3db86390 3e832ccf     .+...95>.c.=.,.>
   20a50:	bf0be5bd 3c90f75f bc5261a0 bcac888f     ...._..<.aR.....
   20a60:	3dd3640c 3d8bd99c be39b780 3e95304e     .d.=...=..9.N0.>
   20a70:	beda3e73 3d845651 3d8528e6 be87e9b9     s>..QV.=.(.=....
   20a80:	bd6c0146 3dd5644b fffffd56 00000010     F.l.Kd.=V.......
   20a90:	00000005 00000010 00000030 00000001     ........0.......
   20aa0:	00000008 0000001d 75716573 69746e65     ........sequenti
   20ab0:	632f6c61 32766e6f 6f432f64 4432766e     al/conv2d/Conv2D
   20ac0:	6169625f 00000073 fffffc68 00000020     _bias...h... ...
   20ad0:	c03ee5e4 3f92e722 bfde0457 3e1c8fda     ..>."..?W......>
   20ae0:	c005bf47 bfcbab53 bf6a6a68 bfe40bd2     G...S...hjj.....
   20af0:	fffffdbe 00000010 00000004 00000010     ................
   20b00:	00000030 00000001 00000010 0000001f     0...............
   20b10:	75716573 69746e65 632f6c61 32766e6f     sequential/conv2
   20b20:	2f315f64 766e6f43 625f4432 00736169     d_1/Conv2D_bias.
   20b30:	fffffcd0 00000040 3eb715a3 3f956729     ....@......>)g.?
   20b40:	be62964b 3efc5f61 bf3ed4a2 bf0d1c45     K.b.a_.>..>.E...
   20b50:	be70dd29 bf97759a be6f0afc 3f2556cc     ).p..u....o..V%?
   20b60:	bf98acdf bf8b1c0e 3f8cd8a5 3cd542a5     ...........?.B.<
   20b70:	bf7a8ea9 be71db9e fffffe46 00000010     ..z...q.F.......
   20b80:	00000003 00000010 00000030 00000001     ........0.......
   20b90:	00000004 0000001e 75716573 69746e65     ........sequenti
   20ba0:	642f6c61 65736e65 4d2f315f 754d7461     al/dense_1/MatMu
   20bb0:	69625f6c 00007361 fffffd58 00000010     l_bias..X.......
   20bc0:	bfb699c3 3f8b87e9 bf9a83ac be3d494c     .......?....LI=.
   20bd0:	fffffe9e 00000010 00000002 00000014     ................
   20be0:	00000048 00000002 00000004 00000010     H...............
   20bf0:	00000032 75716573 69746e65 642f6c61     2...sequential/d
   20c00:	65736e65 4d2f315f 754d7461 65522f6c     ense_1/MatMul/Re
   20c10:	61566461 62616972 704f656c 6172742f     adVariableOp/tra
   20c20:	6f70736e 00006573 fffffdc8 00000100     nspose..........
   20c30:	be8a5c40 3eaa88c5 be1f76b0 3e583a35     @\.....>.v..5:X>
   20c40:	3ea3a584 3d49d938 bc786358 be2e9482     ...>8.I=Xcx.....
   20c50:	be6ede97 be9f27ea 3dc0241d 3c663121     ..n..'...$.=!1f<
   20c60:	be88f880 be1906dd beb34b3f 3e8ddc70     ........?K..p..>
   20c70:	be93ee20 bebf7cde be503ada 3e6e910e      ....|...:P...n>
   20c80:	3e81bc18 b9fe9c18 be9b2d11 be3f73a2     ...>.....-...s?.
   20c90:	bea36c0c be8c4b37 3da02691 3ebd04b3     .l..7K...&.=...>
   20ca0:	be703e01 be69dbd1 be98c0b4 3e80d9d4     .>p...i........>
   20cb0:	be74a962 be83e98a be54927a 3e435d92     b.t.....z.T..]C>
   20cc0:	3e7b35e3 3d2e81ee 3dec68bb be1b7270     .5{>...=.h.=pr..
   20cd0:	bea42064 bd8d1f4f 3df8d6ee 3eb083db     d ..O......=...>
   20ce0:	be8c99d1 be452199 be820497 3e88df25     .....!E.....%..>
   20cf0:	be5be6e2 3d6853e5 be40cd0b 3e55ea4e     ..[..Sh=..@.N.U>
   20d00:	3e85d854 3d82ba3c 3ee9c058 be29cc0c     T..><..=X..>..).
   20d10:	bea26e3a 3e124a84 3dcbd932 3ed416ad     :n...J.>2..=...>
   20d20:	be85a8f5 bdc8345c beac0231 3e9e153e     ....\4..1...>..>
   20d30:	000e0000 00040014 00080000 0010000c     ................
   20d40:	0000000e 00000010 00000001 00000010     ................
   20d50:	00000030 00000001 00000010 0000001c     0...............
   20d60:	75716573 69746e65 642f6c61 65736e65     sequential/dense
   20d70:	74614d2f 5f6c754d 73616962 00000000     /MatMul_bias....
   20d80:	ffffff20 00000040 3f93a9a9 be21da3c      ...@......?<.!.
   20d90:	3d3de333 bf33edd8 bf3e9d4c 3fa640ba     3.==..3.L.>..@.?
   20da0:	be254e6e 3f935e6e bec5a248 3e33aa67     nN%.n^.?H...g.3>
   20db0:	3f2066c0 be7e25b3 bed92f8a 3fc864da     .f ?.%~../...d.?
   20dc0:	bd89141a 3e8948ea 00000007 00000200     .....H.>........
   20dd0:	00000190 0000013c 000000d0 0000008c     ....<...........
   20de0:	00000048 00000004 fffffe30 09000000     H.......0.......
   20df0:	00000004 00000010 00000014 00000024     ............$...
   20e00:	00000014 00000001 0000000b 00000001     ................
	...
   20e18:	00060000 00040008 00000006 3f800000     ...............?
   20e28:	fffffe70 08000000 00000002 00000010     p...............
   20e38:	0000001c 00000028 0000001c 00000003     ....(...........
   20e48:	0000000a 0000000c 0000000d 00000001     ................
   20e58:	0000000b 00000000 00040004 00000004     ................
   20e68:	fffffeb0 08000000 00000002 00000010     ................
   20e78:	0000001c 00000024 0000001c 00000003     ....$...........
   20e88:	0000000f 00000008 00000009 00000001     ................
   20e98:	0000000a 00000000 fffffe2e 01000000     ................
   20ea8:	fffffef0 05000000 00000003 00000010     ................
   20eb8:	00000014 0000002c 00000014 00000001     ....,...........
   20ec8:	00000007 00000001 0000000f 00000000     ................
   20ed8:	000e0000 00000014 00080004 0010000c     ................
   20ee8:	0000000e 00000001 00000003 00000001     ................
   20ef8:	00000003 00180014 00080000 0007000c     ................
   20f08:	00000010 00140000 00000014 01000000     ................
   20f18:	00000010 0000001c 00000030 0000001c     ........0.......
   20f28:	00000003 0000000e 00000005 00000006     ................
   20f38:	00000001 00000007 00000000 0010000c     ................
   20f48:	00080000 0007000c 0000000c 01000000     ................
   20f58:	00000001 00000001 ffffffa8 05000000     ................
   20f68:	00000003 00000010 00000014 0000002c     ............,...
   20f78:	00000014 00000001 00000004 00000001     ................
   20f88:	0000000e 00000000 000e0000 00070018     ................
   20f98:	000c0008 00140010 0000000e 01000000     ................
   20fa8:	00000003 00000003 00000003 00000003     ................
   20fb8:	001c0014 000c0008 00070010 00000014     ................
   20fc8:	00180000 00000014 02000000 00000001     ................
   20fd8:	00000010 0000001c 00000034 0000001c     ........4.......
   20fe8:	00000003 00000001 00000002 00000003     ................
   20ff8:	00000001 00000004 00000000 000e0000     ................
   21008:	00000014 000c0008 00070010 0000000e     ................
   21018:	01000000 00000001 00000001 00000008     ................
   21028:	00000005 00000034 00000048 00000014     ....4...H.......
   21038:	00000020 00000004 ffffffce 19000000      ...............
   21048:	ffffffd6 09000000 ffffffde 09000000     ................
   21058:	ffffffe6 11000000 fffffffa 00060300     ................
   21068:	00050006 00000006 00061100 00070008     ................
   21078:	00000006 04000000 67676f54 4c20656c     ........Toggle L
   21088:	0a214445 00000000 74616c46 66667542     ED!.....FlatBuff
   21098:	20737265 32312e31 0000302e              ers 1.12.0..

000210a4 <_ZTVN6tflite22MicroMutableOpResolverILj5EEE>:
	...
   210ac:	00000c87 00000c91 00000cdb 00000d69     ............i...
   210bc:	00000c9b 00000d21 00000cdd 65646f4d     ....!.......Mode
   210cc:	7270206c 6469766f 69206465 63732073     l provided is sc
   210dc:	616d6568 72657620 6e6f6973 20642520     hema version %d 
   210ec:	20746f6e 61757165 6f74206c 70757320     not equal to sup
   210fc:	74726f70 76206465 69737265 25206e6f     ported version %
   2110c:	00002e64 6c6c6143 20676e69 42646441     d...Calling AddB
   2111c:	746c6975 77206e69 20687469 20656874     uiltin with the 
   2112c:	656d6173 20706f20 65726f6d 61687420     same op more tha
   2113c:	6e6f206e 69206563 6f6e2073 75732074     n once is not su
   2114c:	726f7070 20646574 3a704f28 64252320     pported (Op: #%d
   2115c:	00002e29 6c756f43 74276e64 67657220     )...Couldn't reg
   2116c:	65747369 75622072 69746c69 706f206e     ister builtin op
   2117c:	64252320 6572202c 766c6f73 73207265      #%d, resolver s
   2118c:	20657a69 74207369 73206f6f 6c6c616d     ize is too small
   2119c:	64252820 00002e29 20646142 75706e69      (%d)...Bad inpu
   211ac:	65742074 726f736e 72617020 74656d61     t tensor paramet
   211bc:	20737265 6d206e69 6c65646f 00000000     ers in model....
   211cc:	6f766e49 6620656b 656c6961 6e6f2064     Invoke failed on
   211dc:	646e6920 203a7865 000a6425 75706e49      index: %d..Inpu
   211ec:	72612074 20796172 20746f6e 766f7270     t array not prov
   211fc:	64656469 726f6620 65706f20 69746172     ided for operati
   2120c:	27206e6f 2e277325 0000000a 6e756f46     on '%s'.....Foun
   2121c:	6f742064 616d206f 6420796e 6e656d69     d too many dimen
   2122c:	6e6f6973 6e692073 65687420 706e6920     sions in the inp
   2123c:	61207475 79617272 20666f20 7265706f     ut array of oper
   2124c:	6f697461 2527206e 0a2e2773 00000000     ation '%s'......
   2125c:	203c2069 657a6973 00002928 742f2e2e     i < size()..../t
   2126c:	64726968 7261705f 662f7974 6274616c     hird_party/flatb
   2127c:	65666675 692f7372 756c636e 662f6564     uffers/include/f
   2128c:	6274616c 65666675 662f7372 6274616c     latbuffers/flatb
   2129c:	65666675 682e7372 00000000 75736e55     uffers.h....Unsu
   212ac:	726f7070 20646574 61746164 70797420     pported data typ
   212bc:	64252065 206e6920 736e6574 000a726f     e %d in tensor..
   212cc:	742f2e2e 6f736e65 6f6c6672 696c2f77     ../tensorflow/li
   212dc:	632f6574 2f65726f 2f697061 74616c66     te/core/api/flat
   212ec:	66667562 635f7265 65766e6f 6f697372     buffer_conversio
   212fc:	632e736e 00007070 253a7325 73252064     ns.cpp..%s:%d %s
   2130c:	73617720 746f6e20 75727420 00002e65      was not true...
   2131c:	61726170 2120736d 756e203d 74706c6c     params != nullpt
   2132c:	00000072 61686e55 656c646e 75662064     r...Unhandled fu
   2133c:	2d796c6c 6e6e6f63 65746365 65772064     lly-connected we
   2134c:	74686769 6f662073 74616d72 0000002e     ights format....
   2135c:	68736572 00657061 61686e55 656c646e     reshape.Unhandle
   2136c:	534c2064 6b204d54 656e7265 7974206c     d LSTM kernel ty
   2137c:	203a6570 00006425 76206f4e 64696c61     pe: %d..No valid
   2138c:	54534c20 7562204d 69746c69 706f206e      LSTM builtin op
   2139c:	6e6f6974 78652073 00747369 65757173     tions exist.sque
   213ac:	00657a65 454c4544 45544147 20706f20     eze.DELEGATE op 
   213bc:	756f6873 276e646c 78652074 20747369     shouldn't exist 
   213cc:	6d206e69 6c65646f 0000002e              in model....

000213d8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names>:
   213d8:	0002169c 000216a0 000216b0 000216c0     ................
   213e8:	000216c8 000216dc 000216ec 000216f8     ................
   213f8:	0002170c 00021714 00021724 00021738     ........$...8...
   21408:	0002174c 00021758 00021778 00021784     L...X...x.......
   21418:	000218d0 00021794 000217a0 000217a4     ................
   21428:	000217ac 000217bc 000217c4 000217cc     ................
   21438:	00021860 0002191c 000217dc 000217ec     `...............
   21448:	000217f4 000217fc 00021810 0002181c     ................
   21458:	00021824 0002182c 00021844 00021848     $...,...D...H...
   21468:	00021864 0002186c 00021880 00021894     d...l...........
   21478:	000218a0 000218a8 000218ac 000218b0     ................
   21488:	000218b8 000218d8 000218e8 00021904     ................
   21498:	00021908 00021910 00021918 00021924     ............$...
   214a8:	00021930 0002194c 00021954 0002195c     0...L...T...\...
   214b8:	00021964 0002196c 00021974 0002197c     d...l...t...|...
   214c8:	00021980 00021988 00021990 000219a0     ................
   214d8:	000219ac 000218e0 000219b4 000219b8     ................
   214e8:	000219c8 000219d8 000219e0 00021998     ................
   214f8:	000219ec 000219f8 00021c20 000219fc     ........ .......
   21508:	00021a04 00021a0c 00021a14 00021a18     ................
   21518:	00021a20 00021a2c 00021a38 00021a44      ...,...8...D...
   21528:	00021a4c 00021a58 00021a60 00021a6c     L...X...`...l...
   21538:	00021a78 00021a80 00021a8c 00021a98     x...............
   21548:	00021aa4 00021aac 00021ab8 00021ac0     ................
   21558:	00021acc 00021ad4 00021aec 00021af8     ................
   21568:	00021b0c 00021b18 00021b1c 00021b24     ............$...
   21578:	00021b2c 00021b34 00021b40 00021b48     ,...4...@...H...
   21588:	00021b54 00021b58 00021b60 00021b68     T...X...`...h...
   21598:	00021b6c 00021b80 00021b8c 00021b98     l...............
   215a8:	00021ba8 00021bb0 00021bbc 00021bc0     ................
   215b8:	00021bc8 00021be0 00021bf8 00021c04     ................
   215c8:	00021c10 00021c18 00021c24 00000000     ........$.......
   215d8:	6220704f 746c6975 635f6e69 2065646f     Op builtin_code 
   215e8:	2074756f 7220666f 65676e61 6425203a     out of range: %d
   215f8:	7241202e 6f792065 73752075 20676e69     . Are you using 
   21608:	20646c6f 694c4654 62206574 72616e69     old TFLite binar
   21618:	69772079 6e206874 72657765 646f6d20     y with newer mod
   21628:	003f6c65 6e646944 66207427 20646e69     el?.Didn't find 
   21638:	6620706f 6220726f 746c6975 6f206e69     op for builtin o
   21648:	646f6370 25272065 76202773 69737265     pcode '%s' versi
   21658:	27206e6f 0a276425 00000000 7265704f     on '%d'.....Oper
   21668:	726f7461 74697720 55432068 4d4f5453     ator with CUSTOM
   21678:	69756220 6e69746c 646f635f 61682065      builtin_code ha
   21688:	6f6e2073 73756320 5f6d6f74 65646f63     s no custom_code
   21698:	00000a2e 00444441 52455641 5f454741     ....ADD.AVERAGE_
   216a8:	4c4f4f50 0044325f 434e4f43 4e455441     POOL_2D.CONCATEN
   216b8:	4f495441 0000004e 564e4f43 0044325f     ATION...CONV_2D.
   216c8:	54504544 53495748 4f435f45 325f564e     DEPTHWISE_CONV_2
   216d8:	00000044 54504544 4f545f48 4150535f     D...DEPTH_TO_SPA
   216e8:	00004543 55514544 49544e41 0000455a     CE..DEQUANTIZE..
   216f8:	45424d45 4e494444 4f4c5f47 50554b4f     EMBEDDING_LOOKUP
   21708:	00000000 4f4f4c46 00000052 4c4c5546     ....FLOOR...FULL
   21718:	4f435f59 43454e4e 00444554 48534148     Y_CONNECTED.HASH
   21728:	4c424154 4f4c5f45 50554b4f 00000000     TABLE_LOOKUP....
   21738:	4e5f324c 414d524f 415a494c 4e4f4954     L2_NORMALIZATION
   21748:	00000000 505f324c 5f4c4f4f 00004432     ....L2_POOL_2D..
   21758:	41434f4c 45525f4c 4e4f5053 4e5f4553     LOCAL_RESPONSE_N
   21768:	414d524f 415a494c 4e4f4954 00000000     ORMALIZATION....
   21778:	49474f4c 43495453 00000000 5f48534c     LOGISTIC....LSH_
   21788:	4a4f5250 49544345 00004e4f 5f58414d     PROJECTION..MAX_
   21798:	4c4f4f50 0044325f 004c554d 554c4552     POOL_2D.MUL.RELU
   217a8:	00000000 554c4552 5f314e5f 315f4f54     ....RELU_N1_TO_1
   217b8:	00000000 554c4552 00000036 48534552     ....RELU6...RESH
   217c8:	00455041 49534552 425f455a 4e494c49     APE.RESIZE_BILIN
   217d8:	00524145 43415053 4f545f45 5045445f     EAR.SPACE_TO_DEP
   217e8:	00004854 46445653 00000000 484e4154     TH..SVDF....TANH
   217f8:	00000000 434e4f43 455f5441 4445424d     ....CONCAT_EMBED
   21808:	474e4944 00000053 50494b53 4152475f     DINGS...SKIP_GRA
   21818:	0000004d 4c4c4143 00000000 54535543     M...CALL....CUST
   21828:	00004d4f 45424d45 4e494444 4f4c5f47     OM..EMBEDDING_LO
   21838:	50554b4f 4150535f 00455352 00444150     OKUP_SPARSE.PAD.
   21848:	44494e55 43455249 4e4f4954 535f4c41     UNIDIRECTIONAL_S
   21858:	45555145 5f45434e 004e4e52 48544147     EQUENCE_RNN.GATH
   21868:	00005245 43544142 4f545f48 4150535f     ER..BATCH_TO_SPA
   21878:	4e5f4543 00000044 43415053 4f545f45     CE_ND...SPACE_TO
   21888:	5441425f 4e5f4843 00000044 4e415254     _BATCH_ND...TRAN
   21898:	534f5053 00000045 4e41454d 00000000     SPOSE...MEAN....
   218a8:	00425553 00564944 45555153 00455a45     SUB.DIV.SQUEEZE.
   218b8:	44494e55 43455249 4e4f4954 535f4c41     UNIDIRECTIONAL_S
   218c8:	45555145 5f45434e 4d54534c 00000000     EQUENCE_LSTM....
   218d8:	49525453 5f444544 43494c53 00000045     STRIDED_SLICE...
   218e8:	49444942 54434552 414e4f49 45535f4c     BIDIRECTIONAL_SE
   218f8:	4e455551 525f4543 00004e4e 00505845     QUENCE_RNN..EXP.
   21908:	4b504f54 0032565f 494c5053 00000054     TOPK_V2.SPLIT...
   21918:	5f474f4c 54464f53 0058414d 454c4544     LOG_SOFTMAX.DELE
   21928:	45544147 00000000 49444942 54434552     GATE....BIDIRECT
   21938:	414e4f49 45535f4c 4e455551 4c5f4543     IONAL_SEQUENCE_L
   21948:	004d5453 54534143 00000000 4c455250     STM.CAST....PREL
   21958:	00000055 4958414d 004d554d 5f475241     U...MAXIMUM.ARG_
   21968:	0058414d 494e494d 004d554d 5353454c     MAX.MINIMUM.LESS
   21978:	00000000 0047454e 56444150 00000032     ....NEG.PADV2...
   21988:	41455247 00524554 41455247 5f524554     GREATER.GREATER_
   21998:	41555145 0000004c 5353454c 5551455f     EQUAL...LESS_EQU
   219a8:	00004c41 454c4553 00005443 004e4953     AL..SELECT..SIN.
   219b8:	4e415254 534f5053 4f435f45 0000564e     TRANSPOSE_CONV..
   219c8:	52415053 545f4553 45445f4f 0045534e     SPARSE_TO_DENSE.
   219d8:	454c4954 00000000 41505845 445f444e     TILE....EXPAND_D
   219e8:	00534d49 5f544f4e 41555145 0000004c     IMS.NOT_EQUAL...
   219f8:	00474f4c 54525153 00000000 52515352     LOG.SQRT....RSQR
   21a08:	00000054 50414853 00000045 00574f50     T...SHAPE...POW.
   21a18:	5f475241 004e494d 454b4146 4155515f     ARG_MIN.FAKE_QUA
   21a28:	0000544e 55444552 505f4543 00444f52     NT..REDUCE_PROD.
   21a38:	55444552 4d5f4543 00005841 4b434150     REDUCE_MAX..PACK
   21a48:	00000000 49474f4c 5f4c4143 0000524f     ....LOGICAL_OR..
   21a58:	5f454e4f 00544f48 49474f4c 5f4c4143     ONE_HOT.LOGICAL_
   21a68:	00444e41 49474f4c 5f4c4143 00544f4e     AND.LOGICAL_NOT.
   21a78:	41504e55 00004b43 55444552 4d5f4543     UNPACK..REDUCE_M
   21a88:	00004e49 4f4f4c46 49445f52 00000056     IN..FLOOR_DIV...
   21a98:	55444552 415f4543 0000594e 41555153     REDUCE_ANY..SQUA
   21aa8:	00004552 4f52455a 494c5f53 0000454b     RE..ZEROS_LIKE..
   21ab8:	4c4c4946 00000000 4f4f4c46 4f4d5f52     FILL....FLOOR_MO
   21ac8:	00000044 474e4152 00000045 49534552     D...RANGE...RESI
   21ad8:	4e5f455a 45524145 4e5f5453 48474945     ZE_NEAREST_NEIGH
   21ae8:	00524f42 4b41454c 45525f59 0000554c     BOR.LEAKY_RELU..
   21af8:	41555153 5f444552 46464944 4e455245     SQUARED_DIFFEREN
   21b08:	00004543 5252494d 505f524f 00004441     CE..MIRROR_PAD..
   21b18:	00534241 494c5053 00565f54 51494e55     ABS.SPLIT_V.UNIQ
   21b28:	00004555 4c494543 00000000 45564552     UE..CEIL....REVE
   21b38:	5f455352 00003256 5f444441 0000004e     RSE_V2..ADD_N...
   21b48:	48544147 4e5f5245 00000044 00534f43     GATHER_ND...COS.
   21b58:	52454857 00000045 4b4e4152 00000000     WHERE...RANK....
   21b68:	00554c45 45564552 5f455352 55514553     ELU.REVERSE_SEQU
   21b78:	45434e45 00000000 5254414d 445f5849     ENCE....MATRIX_D
   21b88:	00474149 4e415551 455a4954 00000000     IAG.QUANTIZE....
   21b98:	5254414d 535f5849 445f5445 00474149     MATRIX_SET_DIAG.
   21ba8:	4e554f52 00000044 44524148 4957535f     ROUND...HARD_SWI
   21bb8:	00004853 00004649 4c494857 00000045     SH..IF..WHILE...
   21bc8:	5f4e4f4e 5f58414d 50505553 53534552     NON_MAX_SUPPRESS
   21bd8:	5f4e4f49 00003456 5f4e4f4e 5f58414d     ION_V4..NON_MAX_
   21be8:	50505553 53534552 5f4e4f49 00003556     SUPPRESSION_V5..
   21bf8:	54414353 5f524554 0000444e 454c4553     SCATTER_ND..SELE
   21c08:	565f5443 00000032 534e4544 00594649     CT_V2...DENSIFY.
   21c18:	4d474553 5f544e45 004d5553 43544142     SEGMENT_SUM.BATC
   21c28:	414d5f48 4c554d54 00000000 742f2e2e     H_MATMUL....../t
   21c38:	6f736e65 6f6c6672 696c2f77 6b2f6574     ensorflow/lite/k
   21c48:	656e7265 6b2f736c 656e7265 74755f6c     ernels/kernel_ut
   21c58:	632e6c69 00007070 75706e69 72705f74     il.cpp..input_pr
   21c68:	6375646f 63735f74 20656c61 30203d3e     oduct_scale >= 0
   21c78:	00000000 6c616373 69645f65 2f206666     ....scale_diff /
   21c88:	74756f20 5f747570 6c616373 3d3c2065      output_scale <=
   21c98:	302e3020 00000032 736c6166 00000065      0.02...false...
   21ca8:	253a7325 73252064 203d2120 28207325     %s:%d %s != %s (
   21cb8:	21206425 6425203d 00000029 4c66546b     %d != %d)...kTfL
   21cc8:	41657469 6e696666 61755165 7a69746e     iteAffineQuantiz
   21cd8:	6f697461 0000006e 75706e69 713e2d74     ation...input->q
   21ce8:	746e6175 74617a69 2e6e6f69 65707974     uantization.type
   21cf8:	00000000 746c6966 3e2d7265 6e617571     ....filter->quan
   21d08:	617a6974 6e6f6974 7079742e 00000065     tization.type...
   21d18:	69666661 715f656e 746e6175 74617a69     affine_quantizat
   21d28:	006e6f69 69666661 715f656e 746e6175     ion.affine_quant
   21d38:	74617a69 2d6e6f69 6163733e 0000656c     ization->scale..
   21d48:	75706e69 743e2d74 20657079 6b203d3d     input->type == k
   21d58:	694c6654 6e496574 7c203874 6e69207c     TfLiteInt8 || in
   21d68:	2d747570 7079743e 3d3d2065 66546b20     put->type == kTf
   21d78:	6574694c 31746e49 00000036 4c66546b     LiteInt16...kTfL
   21d88:	49657469 0038746e 746c6966 3e2d7265     iteInt8.filter->
   21d98:	65707974 00000000 5f6d756e 6e616863     type....num_chan
   21da8:	736c656e 00000000 69666661 715f656e     nels....affine_q
   21db8:	746e6175 74617a69 2d6e6f69 6163733e     uantization->sca
   21dc8:	3e2d656c 657a6973 00000000 746c6966     le->size....filt
   21dd8:	3e2d7265 736d6964 61643e2d 615b6174     er->dims->data[a
   21de8:	6e696666 75715f65 69746e61 6974617a     ffine_quantizati
   21df8:	3e2d6e6f 6e617571 657a6974 69645f64     on->quantized_di
   21e08:	736e656d 5d6e6f69 00000000 3d203164     mension]....d1 =
   21e18:	3264203d 207c7c20 3d203164 2031203d     = d2 || d1 == 1 
   21e28:	64207c7c 3d3d2032 00003120 3d203164     || d2 == 1..d1 =
   21e38:	2031203d 64207c7c 3d3d2031 78616d20     = 1 || d1 == max
   21e48:	6c61765f 00006575 3d203264 2031203d     _value..d2 == 1 
   21e58:	64207c7c 3d3d2032 78616d20 6c61765f     || d2 == max_val
   21e68:	00006575 3d203364 2031203d 64207c7c     ue..d3 == 1 || d
   21e78:	3d3d2033 78616d20 6c61765f 00006575     3 == max_value..

00021e88 <_ZZN8gemmlowp19RoundingDivideByPOTIlEET_S1_iE19__PRETTY_FUNCTION__>:
   21e88:	65746e49 54726567 20657079 6d6d6567     IntegerType gemm
   21e98:	70776f6c 6f523a3a 69646e75 6944676e     lowp::RoundingDi
   21ea8:	65646976 4f507942 6e492854 65676574     videByPOT(Intege
   21eb8:	70795472 69202c65 2029746e 7469775b     rType, int) [wit
   21ec8:	6e492068 65676574 70795472 203d2065     h IntegerType = 
   21ed8:	676e6f6c 746e6920 0000005d 00002129     long int]...)!..
   21ee8:	00000000 00002301 00003681 00000000     .....#...6......
	...
   21f04:	742f2e2e 6f736e65 6f6c6672 696c2f77     ../tensorflow/li
   21f14:	6d2f6574 6f726369 72656b2f 736c656e     te/micro/kernels
   21f24:	6e6f632f 70632e76 00000070 5f736168     /conv.cpp...has_
   21f34:	73616962 207c7c20 65646f6e 6e693e2d     bias || node->in
   21f44:	73747570 69733e2d 3d20657a 0032203d     puts->size == 2.
   21f54:	65646f6e 756f3e2d 74757074 733e2d73     node->outputs->s
   21f64:	00657a69 69666661 715f656e 746e6175     ize.affine_quant
   21f74:	74617a69 2d6e6f69 72657a3e 6f705f6f     ization->zero_po
   21f84:	00746e69 69666661 715f656e 746e6175     int.affine_quant
   21f94:	74617a69 2d6e6f69 6163733e 3e2d656c     ization->scale->
   21fa4:	657a6973 203d3d20 7c7c2031 66666120     size == 1 || aff
   21fb4:	5f656e69 6e617571 617a6974 6e6f6974     ine_quantization
   21fc4:	63733e2d 2d656c61 7a69733e 3d3d2065     ->scale->size ==
   21fd4:	6c696620 2d726574 6d69643e 643e2d73      filter->dims->d
   21fe4:	5b617461 6e6f436b 61755176 7a69746e     ata[kConvQuantiz
   21ff4:	69446465 736e656d 5d6e6f69 00000000     edDimension]....
   22004:	69666661 715f656e 746e6175 74617a69     affine_quantizat
   22014:	2d6e6f69 72657a3e 6f705f6f 2d746e69     ion->zero_point-
   22024:	7a69733e 00000065 6f707865 746e656e     >size...exponent
   22034:	203d3e20 00000030 742f2e2e 64726968      >= 0...../third
   22044:	7261705f 672f7974 6c6d6d65 2f70776f     _party/gemmlowp/
   22054:	65786966 696f7064 662f746e 64657869     fixedpoint/fixed
   22064:	6e696f70 00682e74 6f707865 746e656e     point.h.exponent
   22074:	203d3c20 00003133 65707954 20732520      <= 31..Type %s 
   22084:	29642528 746f6e20 70757320 74726f70     (%d) not support
   22094:	002e6465                                ed..

00022098 <_ZZN8gemmlowp19RoundingDivideByPOTIlEET_S1_iE19__PRETTY_FUNCTION__>:
   22098:	65746e49 54726567 20657079 6d6d6567     IntegerType gemm
   220a8:	70776f6c 6f523a3a 69646e75 6944676e     lowp::RoundingDi
   220b8:	65646976 4f507942 6e492854 65676574     videByPOT(Intege
   220c8:	70795472 69202c65 2029746e 7469775b     rType, int) [wit
   220d8:	6e492068 65676574 70795472 203d2065     h IntegerType = 
   220e8:	676e6f6c 746e6920 0000005d 00003781     long int]....7..
   220f8:	00000000 000037ad 00003a85 00000000     .....7...:......
	...
   22114:	742f2e2e 6f736e65 6f6c6672 696c2f77     ../tensorflow/li
   22124:	6d2f6574 6f726369 72656b2f 736c656e     te/micro/kernels
   22134:	7065642f 69776874 635f6573 2e766e6f     /depthwise_conv.
   22144:	00707063 69666661 715f656e 746e6175     cpp.affine_quant
   22154:	74617a69 2d6e6f69 6163733e 3e2d656c     ization->scale->
   22164:	657a6973 203d3d20 7c7c2031 66666120     size == 1 || aff
   22174:	5f656e69 6e617571 617a6974 6e6f6974     ine_quantization
   22184:	63733e2d 2d656c61 7a69733e 3d3d2065     ->scale->size ==
   22194:	6c696620 2d726574 6d69643e 643e2d73      filter->dims->d
   221a4:	5b617461 7065446b 69776874 6f436573     ata[kDepthwiseCo
   221b4:	7551766e 69746e61 4464657a 6e656d69     nvQuantizedDimen
   221c4:	6e6f6973 0000005d                       sion]...

000221cc <_ZZN8gemmlowp19RoundingDivideByPOTIlEET_S1_iE19__PRETTY_FUNCTION__>:
   221cc:	65746e49 54726567 20657079 6d6d6567     IntegerType gemm
   221dc:	70776f6c 6f523a3a 69646e75 6944676e     lowp::RoundingDi
   221ec:	65646976 4f507942 6e492854 65676574     videByPOT(Intege
   221fc:	70795472 69202c65 2029746e 7469775b     rType, int) [wit
   2220c:	6e492068 65676574 70795472 203d2065     h IntegerType = 
   2221c:	676e6f6c 746e6920 0000005d 00004d75     long int]...uM..
   2222c:	00000000 00004da1 00005211 00000000     .....M...R......
	...
   22248:	742f2e2e 6f736e65 6f6c6672 696c2f77     ../tensorflow/li
   22258:	6d2f6574 6f726369 72656b2f 736c656e     te/micro/kernels
   22268:	6c75662f 635f796c 656e6e6f 64657463     /fully_connected
   22278:	7070632e 00000000 253a7325 73252064     .cpp....%s:%d %s
   22288:	203d2120 28207325 21207325 7325203d      != %s (%s != %s
   22298:	00000029 7074756f 3e2d7475 65707974     )...output->type
   222a8:	00000000 75706e69 743e2d74 00657079     ....input->type.
   222b8:	742f2e2e 6f736e65 6f6c6672 696c2f77     ../tensorflow/li
   222c8:	6d2f6574 6f726369 72656b2f 736c656e     te/micro/kernels
   222d8:	6c75662f 635f796c 656e6e6f 64657463     /fully_connected
   222e8:	7070632e 62794820 20646972 65646f6d     .cpp Hybrid mode
   222f8:	6120736c 6e206572 7320746f 6f707075     ls are not suppo
   22308:	64657472 206e6f20 694c4654 4d206574     rted on TFLite M
   22318:	6f726369 0000002e 75706e49 79742074     icro....Input ty
   22328:	25206570 73692073 746f6e20 72756320     pe %s is not cur
   22338:	746e6572 7320796c 6f707075 64657472     rently supported
   22348:	00000000 65707954 20732520 20746f6e     ....Type %s not 
   22358:	72727563 6c746e65 75732079 726f7070     currently suppor
   22368:	2e646574 00000000 00006d61 00000000     ted.....am......
   22378:	00006d8d 00008161 00000000 00000000     .m..a...........
	...

00022390 <_ZZN8gemmlowp19RoundingDivideByPOTIlEET_S1_iE19__PRETTY_FUNCTION__>:
   22390:	65746e49 54726567 20657079 6d6d6567     IntegerType gemm
   223a0:	70776f6c 6f523a3a 69646e75 6944676e     lowp::RoundingDi
   223b0:	65646976 4f507942 6e492854 65676574     videByPOT(Intege
   223c0:	70795472 69202c65 2029746e 7469775b     rType, int) [wit
   223d0:	6e492068 65676574 70795472 203d2065     h IntegerType = 
   223e0:	676e6f6c 746e6920 0000005d 742f2e2e     long int]...../t
   223f0:	6f736e65 6f6c6672 696c2f77 6d2f6574     ensorflow/lite/m
   22400:	6f726369 72656b2f 736c656e 666f732f     icro/kernels/sof
   22410:	78616d74 7070632e 00000000 496d754e     tmax.cpp....NumI
   22420:	7475706e 6f6e2873 00296564 4f6d754e     nputs(node).NumO
   22430:	75707475 6e287374 2965646f 00000000     utputs(node)....
   22440:	446d754e 6e656d69 6e6f6973 6e692873     NumDimensions(in
   22450:	29747570 203d3e20 00000031 4c66546b     put) >= 1...kTfL
   22460:	55657469 38746e49 00000000 7074756f     iteUInt8....outp
   22470:	3e2d7475 61726170 7a2e736d 5f6f7265     ut->params.zero_
   22480:	6e696f70 00000074 3732332d 00003836     point...-32768..
   22490:	3832312d 00000000 7074756f 3e2d7475     -128....output->
   224a0:	61726170 732e736d 656c6163 203d3d20     params.scale == 
   224b0:	20662e31 3532202f 00000036 4c66546b     1.f / 256...kTfL
   224c0:	46657469 74616f6c 00003233              iteFloat32..

000224cc <_ZTVN6tflite19GreedyMemoryPlannerE>:
	...
   224d4:	000082f1 0000833d 000082f9 00008649     ....=.......I...
   224e4:	000082f3 000086b5 206f6f54 796e616d     ........Too many
   224f4:	66756220 73726566 616d2820 73692078      buffers (max is
   22504:	29642520 00000000 66667562 69207265      %d)....buffer i
   22514:	7865646e 20642520 6f207369 69737475     ndex %d is outsi
   22524:	72206564 65676e61 74203020 6425206f     de range 0 to %d
   22534:	00000000 6e616c50 2072656e 66667562     ....Planner buff
   22544:	49207265 25203a44 63202c64 75636c61     er ID: %d, calcu
   22554:	6574616c 666f2064 74657366 6425203a     lated offset: %d
   22564:	6973202c 7220657a 69757165 3a646572     , size required:
   22574:	2c642520 72696620 745f7473 5f656d69      %d, first_time_
   22584:	61657263 3a646574 2c642520 73616c20     created: %d, las
   22594:	69745f74 755f656d 3a646573 00642520     t_time_used: %d.
   225a4:	00007325 7265764f 3a70616c 20642520     %s..Overlap: %d 
   225b4:	3d642528 2c64253e 2d642520 2964253e     (%d=>%d, %d->%d)
   225c4:	20737620 28206425 3e3d6425 202c6425      vs %d (%d=>%d, 
   225d4:	3e2d6425 00296425                       %d->%d).

000225dc <_ZZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEmE19__PRETTY_FUNCTION__>:
   225dc:	74616c66 66667562 3a737265 6365563a     flatbuffers::Vec
   225ec:	3c726f74 3a3a3e54 75746572 745f6e72     tor<T>::return_t
   225fc:	20657079 74616c66 66667562 3a737265     ype flatbuffers:
   2260c:	6365563a 3c726f74 3a3a3e54 28746547     :Vector<T>::Get(
   2261c:	74616c66 66667562 3a737265 666f753a     flatbuffers::uof
   2262c:	74657366 2029745f 736e6f63 775b2074     fset_t) const [w
   2263c:	20687469 203d2054 74616c66 66667562     ith T = flatbuff
   2264c:	3a737265 66664f3a 3c746573 696c6674     ers::Offset<tfli
   2265c:	3a3a6574 736e6554 3b3e726f 616c6620     te::Tensor>; fla
   2266c:	66756274 73726566 65563a3a 726f7463     tbuffers::Vector
   2267c:	3a3e543c 7465723a 5f6e7275 65707974     <T>::return_type
   2268c:	63203d20 74736e6f 6c667420 3a657469      = const tflite:
   2269c:	6e65543a 2a726f73 6c66203b 75627461     :Tensor*; flatbu
   226ac:	72656666 753a3a73 7366666f 745f7465     ffers::uoffset_t
   226bc:	6c203d20 20676e6f 69736e75 64656e67      = long unsigned
   226cc:	746e6920 0000005d                        int]...

000226d4 <_ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE>:
	...
   226dc:	000086f5 00008701 00008711 00008715     ................

000226ec <_ZZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEmE19__PRETTY_FUNCTION__>:
   226ec:	74616c66 66667562 3a737265 6365563a     flatbuffers::Vec
   226fc:	3c726f74 3a3a3e54 75746572 745f6e72     tor<T>::return_t
   2270c:	20657079 74616c66 66667562 3a737265     ype flatbuffers:
   2271c:	6365563a 3c726f74 3a3a3e54 28746547     :Vector<T>::Get(
   2272c:	74616c66 66667562 3a737265 666f753a     flatbuffers::uof
   2273c:	74657366 2029745f 736e6f63 775b2074     fset_t) const [w
   2274c:	20687469 203d2054 74616c66 66667562     ith T = flatbuff
   2275c:	3a737265 66664f3a 3c746573 696c6674     ers::Offset<tfli
   2276c:	3a3a6574 66667542 3b3e7265 616c6620     te::Buffer>; fla
   2277c:	66756274 73726566 65563a3a 726f7463     tbuffers::Vector
   2278c:	3a3e543c 7465723a 5f6e7275 65707974     <T>::return_type
   2279c:	63203d20 74736e6f 6c667420 3a657469      = const tflite:
   227ac:	6675423a 2a726566 6c66203b 75627461     :Buffer*; flatbu
   227bc:	72656666 753a3a73 7366666f 745f7465     ffers::uoffset_t
   227cc:	6c203d20 20676e6f 69736e75 64656e67      = long unsigned
   227dc:	746e6920 0000005d                        int]...

000227e4 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE>:
   227e4:	00000000                                ....

000227e8 <_ZZNK11flatbuffers6VectorIfE3GetEmE19__PRETTY_FUNCTION__>:
   227e8:	74616c66 66667562 3a737265 6365563a     flatbuffers::Vec
   227f8:	3c726f74 3a3a3e54 75746572 745f6e72     tor<T>::return_t
   22808:	20657079 74616c66 66667562 3a737265     ype flatbuffers:
   22818:	6365563a 3c726f74 3a3a3e54 28746547     :Vector<T>::Get(
   22828:	74616c66 66667562 3a737265 666f753a     flatbuffers::uof
   22838:	74657366 2029745f 736e6f63 775b2074     fset_t) const [w
   22848:	20687469 203d2054 616f6c66 66203b74     ith T = float; f
   22858:	6274616c 65666675 3a3a7372 74636556     latbuffers::Vect
   22868:	543c726f 723a3a3e 72757465 79745f6e     or<T>::return_ty
   22878:	3d206570 6f6c6620 203b7461 74616c66     pe = float; flat
   22888:	66667562 3a737265 666f753a 74657366     buffers::uoffset
   22898:	3d20745f 6e6f6c20 6e752067 6e676973     _t = long unsign
   228a8:	69206465 005d746e                       ed int].

000228b0 <_ZZNK11flatbuffers6VectorIxE3GetEmE19__PRETTY_FUNCTION__>:
   228b0:	74616c66 66667562 3a737265 6365563a     flatbuffers::Vec
   228c0:	3c726f74 3a3a3e54 75746572 745f6e72     tor<T>::return_t
   228d0:	20657079 74616c66 66667562 3a737265     ype flatbuffers:
   228e0:	6365563a 3c726f74 3a3a3e54 28746547     :Vector<T>::Get(
   228f0:	74616c66 66667562 3a737265 666f753a     flatbuffers::uof
   22900:	74657366 2029745f 736e6f63 775b2074     fset_t) const [w
   22910:	20687469 203d2054 676e6f6c 6e6f6c20     ith T = long lon
   22920:	6e692067 66203b74 6274616c 65666675     g int; flatbuffe
   22930:	3a3a7372 74636556 543c726f 723a3a3e     rs::Vector<T>::r
   22940:	72757465 79745f6e 3d206570 6e6f6c20     eturn_type = lon
   22950:	6f6c2067 6920676e 203b746e 74616c66     g long int; flat
   22960:	66667562 3a737265 666f753a 74657366     buffers::uoffset
   22970:	3d20745f 6e6f6c20 6e752067 6e676973     _t = long unsign
   22980:	69206465 005d746e                       ed int].

00022988 <_ZTVN6tflite14MicroAllocatorE>:
	...
   22990:	00009281 00008705 00008703 00008729     ............)...
   229a0:	0000873d 00008f49 00008791 000088c1     =...I...........
   229b0:	000087e1 00009339                       ....9...

000229b8 <_ZN6tflite12_GLOBAL__N_1L24kOfflineMemAllocMetadataE>:
   229b8:	6c66664f 4d656e69 726f6d65 6c6c4179     OfflineMemoryAll
   229c8:	7461636f 006e6f69                       ocation.

000229d0 <_ZZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEmE19__PRETTY_FUNCTION__>:
   229d0:	74616c66 66667562 3a737265 6365563a     flatbuffers::Vec
   229e0:	3c726f74 3a3a3e54 75746572 745f6e72     tor<T>::return_t
   229f0:	20657079 74616c66 66667562 3a737265     ype flatbuffers:
   22a00:	6365563a 3c726f74 3a3a3e54 28746547     :Vector<T>::Get(
   22a10:	74616c66 66667562 3a737265 666f753a     flatbuffers::uof
   22a20:	74657366 2029745f 736e6f63 775b2074     fset_t) const [w
   22a30:	20687469 203d2054 74616c66 66667562     ith T = flatbuff
   22a40:	3a737265 66664f3a 3c746573 696c6674     ers::Offset<tfli
   22a50:	3a3a6574 7265704f 726f7461 66203b3e     te::Operator>; f
   22a60:	6274616c 65666675 3a3a7372 74636556     latbuffers::Vect
   22a70:	543c726f 723a3a3e 72757465 79745f6e     or<T>::return_ty
   22a80:	3d206570 6e6f6320 74207473 74696c66     pe = const tflit
   22a90:	4f3a3a65 61726570 2a726f74 6c66203b     e::Operator*; fl
   22aa0:	75627461 72656666 753a3a73 7366666f     atbuffers::uoffs
   22ab0:	745f7465 6c203d20 20676e6f 69736e75     et_t = long unsi
   22ac0:	64656e67 746e6920 0000005d 6c696146     gned int]...Fail
   22ad0:	74206465 6c61206f 61636f6c 6d206574     ed to allocate m
   22ae0:	726f6d65 6f662079 6f632072 7865746e     emory for contex
   22af0:	743e2d74 6f736e65 202c7372 62206425     t->tensors, %d b
   22b00:	73657479 71657220 65726975 00000064     ytes required...
   22b10:	6c696146 74206465 6c61206f 61636f6c     Failed to alloca
   22b20:	6d206574 726f6d65 6f662079 6f6e2072     te memory for no
   22b30:	615f6564 725f646e 73696765 74617274     de_and_registrat
   22b40:	736e6f69 0000002e 6c696146 74206465     ions....Failed t
   22b50:	6c61206f 61636f6c 76206574 61697261     o allocate varia
   22b60:	20656c62 736e6574 6f20726f 69732066     ble tensor of si
   22b70:	2520657a 00000064 7373694d 20676e69     ze %d...Missing 
   22b80:	69676572 61727473 6e6f6974 726f6620     registration for
   22b90:	63706f20 5f65646f 65646e69 64252078      opcode_index %d
   22ba0:	0000000a 6c696146 74206465 6567206f     ....Failed to ge
   22bb0:	65722074 74736967 69746172 66206e6f     t registration f
   22bc0:	206d6f72 6320706f 2065646f 200a7325     rom op code %s. 
   22bd0:	00000000 70696b53 676e6970 20706f20     ....Skipping op 
   22be0:	20726f66 6f63706f 695f6564 7865646e     for opcode_index
   22bf0:	0a642520 00000000 75736e55 726f7070      %d.....Unsuppor
   22c00:	20646574 61686562 726f6976 6f66203a     ted behavior: fo
   22c10:	20646e75 6c697562 206e6974 7265706f     und builtin oper
   22c20:	726f7461 20732520 68746977 73756320     ator %s with cus
   22c30:	206d6f74 6974706f 2e736e6f 0000000a     tom options.....
   22c40:	20646944 20746f6e 646e6966 70206120     Did not find a p
   22c50:	65737261 6f662072 73252072 00000000     arser for %s....
   22c60:	62616e55 7420656c 6c61206f 61636f6c     Unable to alloca
   22c70:	54206574 74694c66 66664165 51656e69     te TfLiteAffineQ
   22c80:	746e6175 74617a69 2e6e6f69 0000000a     uantization.....
   22c90:	62616e55 7420656c 6c61206f 61636f6c     Unable to alloca
   22ca0:	71206574 746e6175 74617a69 2d6e6f69     te quantization-
   22cb0:	72657a3e 6f705f6f 2e746e69 0000000a     >zero_point.....
   22cc0:	6c696146 74206465 6e69206f 61697469     Failed to initia
   22cd0:	657a696c 6e657420 20726f73 00006425     lize tensor %d..
   22ce0:	62206425 73657479 736f6c20 75642074     %d bytes lost du
   22cf0:	6f742065 696c6120 656d6e67 202e746e     e to alignment. 
   22d00:	61206f54 64696f76 69687420 6f6c2073     To avoid this lo
   22d10:	202c7373 61656c70 6d206573 20656b61     ss, please make 
   22d20:	65727573 65687420 6e657420 5f726f73     sure the tensor_
   22d30:	6e657261 73692061 20363120 65747962     arena is 16 byte
   22d40:	6c612073 656e6769 00002e64 6c696146     s aligned...Fail
   22d50:	74206465 6c61206f 61636f6c 70206574     ed to allocate p
   22d60:	69737265 6e657473 75622074 72656666     ersistent buffer
   22d70:	20666f20 657a6973 00642520 65746e49      of size %d.Inte
   22d80:	6c616e72 72726520 203a726f 6f6c6c41     rnal error: Allo
   22d90:	65746163 6d6f7246 6c696154 6e616320     cateFromTail can
   22da0:	746f6e20 20656220 6c6c6163 62206465      not be called b
   22db0:	65777465 74206e65 52206f77 65757165     etween two Reque
   22dc0:	63537473 63746172 66754268 49726566     stScratchBufferI
   22dd0:	6572416e 6320616e 736c6c61 0000002e     nArena calls....
   22de0:	6c696146 74206465 6572206f 74736967     Failed to regist
   22df0:	73207265 74617263 62206863 65666675     er scratch buffe
   22e00:	61682072 656c646e 726f6620 646f6e20     r handle for nod
   22e10:	73252065 00000000 66667542 25207265     e %s....Buffer %
   22e20:	6f6e2064 6f662074 2e646e75 20642520     d not found. %d 
   22e30:	66667562 20737265 69617661 6c62616c     buffers availabl
   22e40:	00002e65 796c6e4f 73203120 72676275     e...Only 1 subgr
   22e50:	20687061 63207369 65727275 796c746e     aph is currently
   22e60:	70757320 74726f70 0a2e6465 00000000      supported......
   22e70:	7263694d 6c6c416f 7461636f 203a726f     MicroAllocator: 
   22e80:	65646f4d 6c61206c 61636f6c 6e6f6974     Model allocation
   22e90:	61747320 64657472 66656220 2065726f      started before 
   22ea0:	696e6966 6e696873 72702067 6f697665     finishing previo
   22eb0:	796c7375 6c6c6120 7461636f 6d206465     usly allocated m
   22ec0:	6c65646f 00000000 7263694d 6c6c416f     odel....MicroAll
   22ed0:	7461636f 203a726f 65646f4d 6c61206c     ocator: Model al
   22ee0:	61636f6c 6e6f6974 6e696620 65687369     location finishe
   22ef0:	65622064 65726f66 61747320 6e697472     d before startin
   22f00:	6c612067 61636f6c 676e6974 646f6d20     g allocating mod
   22f10:	00006c65 6c696146 74206465 6c61206f     el..Failed to al
   22f20:	61636f6c 6d206574 726f6d65 6f662079     locate memory fo
   22f30:	6c612072 61636f6c 6e6f6974 666e695f     r allocation_inf
   22f40:	25202c6f 79622064 20736574 75716572     o, %d bytes requ
   22f50:	64657269 00000000 2072624e 6f20666f     ired....Nbr of o
   22f60:	696c6666 6220656e 65666675 666f2072     ffline buffer of
   22f70:	74657366 25282073 69202964 656d206e     fsets (%d) in me
   22f80:	61646174 6e206174 6520746f 6c617571     tadata not equal
   22f90:	72626e20 6e657420 73726f73 64252820      nbr tensors (%d
   22fa0:	00000a29 69676f4c 72652063 20726f72     )...Logic error 
   22fb0:	6d206e69 726f6d65 6c702079 656e6e61     in memory planne
   22fc0:	74202c72 6f736e65 64252072 73616820     r, tensor %d has
   22fd0:	206e6120 61766e69 2064696c 6566696c      an invalid life
   22fe0:	656d6974 6966203a 5f747372 61657263     time: first_crea
   22ff0:	3a646574 2c642520 73616c20 73755f74     ted: %d, last_us
   23000:	203a6465 00006425 742f2e2e 6f736e65     ed: %d..../tenso
   23010:	6f6c6672 696c2f77 6d2f6574 6f726369     rflow/lite/micro
   23020:	63696d2f 615f6f72 636f6c6c 726f7461     /micro_allocator
   23030:	7070632e 00000000 6e616c70 5f72656e     .cpp....planner_
   23040:	6e657261 3d212061 6c756e20 7274706c     arena != nullptr
   23050:	00000000 6e657241 69732061 6920657a     ....Arena size i
   23060:	6f742073 6d73206f 206c6c61 20726f66     s too small for 
   23070:	69746361 69746176 62206e6f 65666675     activation buffe
   23080:	202e7372 6465654e 25206465 75622064     rs. Needed %d bu
   23090:	6e6f2074 2520796c 61772064 76612073     t only %d was av
   230a0:	616c6961 2e656c62 00000000 6f6c6c61     ailable.....allo
   230b0:	65746163 65745f64 726f736e 6d656d5f     cated_tensor_mem
   230c0:	2079726f 6e203d21 706c6c75 00007274     ory != nullptr..

000230d0 <_ZTVN6tflite18MicroErrorReporterE>:
	...
   230d8:	00000c85 00000d7d 00009a51 00000a0d     ....}...Q.......
   230e8:	6c696146 73206465 74726174 20676e69     Failed starting 
   230f8:	65646f6d 6c61206c 61636f6c 6e6f6974     model allocation
   23108:	00000a2e 65646f4e 20732520 6d756e28     ....Node %s (num
   23118:	20726562 29666425 69616620 2064656c     ber %df) failed 
   23128:	70206f74 61706572 77206572 20687469     to prepare with 
   23138:	74617473 25207375 00000064 6f766e49     status %d...Invo
   23148:	2928656b 6c616320 2064656c 65746661     ke() called afte
   23158:	6e692072 61697469 617a696c 6e6f6974     r initialization
   23168:	69616620 0a64656c 00000000 65646f4e      failed.....Node
   23178:	20732520 6d756e28 20726562 20296425      %s (number %d) 
   23188:	6c696166 74206465 6e69206f 656b6f76     failed to invoke
   23198:	74697720 74732068 73757461 00642520      with status %d.
   231a8:	75706e49 6e692074 20786564 6f206425     Input index %d o
   231b8:	6f207475 61722066 2065676e 6e656c28     ut of range (len
   231c8:	20687467 25207369 00002964 7074754f     gth is %d)..Outp
   231d8:	69207475 7865646e 20642520 2074756f     ut index %d out 
   231e8:	7220666f 65676e61 656c2820 6874676e     of range (length
   231f8:	20736920 00296425 736e6554 6920726f      is %d).Tensor i
   23208:	7865646e 20642520 2074756f 7220666f     ndex %d out of r
   23218:	65676e61 656c2820 6874676e 20736920     ange (length is 
   23228:	00296425 6c696146 74206465 6572206f     %d).Failed to re
   23238:	20746573 69726176 656c6261 6e657420     set variable ten
   23248:	20726f73 69207461 7865646e 6425203a     sor at index: %d
   23258:	00000000 0b080403 12110e0d 16151413     ................
   23268:	00000017 00666e49 004e614e 005e322a     ....Inf.NaN.*2^.

00023278 <_ZTVN6tflite21SimpleMemoryAllocatorE>:
	...
   23280:	0000a261 0000a319 0000a269 0000a299     a.......i.......
   23290:	0000a2d9 0000a263 6c6c6143 41206465     ....c...Called A
   232a0:	636f6c6c 46657461 486d6f72 28646165     llocateFromHead(
   232b0:	66612029 20726574 6f6c6c41 65746163     ) after Allocate
   232c0:	706d6554 77202928 6f687469 72207475     Temp() without r
   232d0:	74657365 676e6974 6d657420 6c612070     esetting temp al
   232e0:	61636f6c 6e6f6974 69772073 52206874     locations with R
   232f0:	74657365 706d6554 6f6c6c41 69746163     esetTempAllocati
   23300:	28736e6f 00000029 6c696146 74206465     ons()...Failed t
   23310:	6c61206f 61636f6c 6d206574 726f6d65     o allocate memor
   23320:	52202e79 65757165 64657473 7525203a     y. Requested: %u
   23330:	7661202c 616c6961 20656c62 202c7525     , available %u, 
   23340:	7373696d 3a676e69 00752520 59544f4e     missing: %u.NOTY
   23350:	00004550 414f4c46 00323354 31544e49     PE..FLOAT32.INT1
   23360:	00000036 33544e49 00000032 544e4955     6...INT32...UINT
   23370:	00000038 38544e49 00000000 36544e49     8...INT8....INT6
   23380:	00000034 4c4f4f42 00000000 504d4f43     4...BOOL....COMP
   23390:	3658454c 00000034 504d4f43 3158454c     LEX64...COMPLEX1
   233a0:	00003832 49525453 0000474e 414f4c46     28..STRING..FLOA
   233b0:	00363154 414f4c46 00343654 6e6b6e55     T16.FLOAT64.Unkn
   233c0:	206e776f 65707974 00000000              own type....

000233cc <_ZTIN9__gnu_cxx20recursive_init_errorE>:
   233cc:	0002344c 000233d8 000236e0              L4...3...6..

000233d8 <_ZTSN9__gnu_cxx20recursive_init_errorE>:
   233d8:	5f5f394e 5f756e67 32787863 63657230     N9__gnu_cxx20rec
   233e8:	69737275 695f6576 5f74696e 6f727265     ursive_init_erro
   233f8:	00004572                                rE..

000233fc <_ZTVN9__gnu_cxx20recursive_init_errorE>:
   233fc:	00000000 000233cc 0000a4a5 0000a4b9     .....3..........
   2340c:	0000afad                                ....

00023410 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   23410:	0002344c 0002341c 00023644              L4...4..D6..

0002341c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   2341c:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   2342c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   2343c:	456f666e 00000000                       nfoE....

00023444 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   23444:	00000000 00023410 0000a515 0000a529     .....4......)...
   23454:	0000a641 0000a641 0000ab45 0000aab9     A...A...E.......
   23464:	0000a611 0000a581 0000a545              ........E...

00023470 <_ZTISt9type_info>:
   23470:	0002367c 00023478                       |6..x4..

00023478 <_ZTSSt9type_info>:
   23478:	74397453 5f657079 6f666e69 00000000     St9type_info....
   23488:	74737973 00006d65 656e6567 00636972     system..generic.
   23498:	69736162 74735f63 676e6972 4d5f3a3a     basic_string::_M
   234a8:	6e6f635f 75727473 6e207463 206c6c75     _construct null 
   234b8:	20746f6e 696c6176 00000064              not valid...

000234c4 <_ZTIN12_GLOBAL__N_121system_error_categoryE>:
   234c4:	0002344c 000234e4 000234dc              L4...4...4..

000234d0 <_ZTIN12_GLOBAL__N_122generic_error_categoryE>:
   234d0:	0002344c 00023510 000234dc              L4...5...4..

000234dc <_ZTINSt3_V214error_categoryE>:
   234dc:	0002367c 0002353c                       |6..<5..

000234e4 <_ZTSN12_GLOBAL__N_121system_error_categoryE>:
   234e4:	32314e2a 4f4c475f 5f4c4142 315f4e5f     *N12_GLOBAL__N_1
   234f4:	79733132 6d657473 7272655f 635f726f     21system_error_c
   23504:	67657461 4579726f 00000000              ategoryE....

00023510 <_ZTSN12_GLOBAL__N_122generic_error_categoryE>:
   23510:	32314e2a 4f4c475f 5f4c4142 315f4e5f     *N12_GLOBAL__N_1
   23520:	65673232 6972656e 72655f63 5f726f72     22generic_error_
   23530:	65746163 79726f67 00000045              categoryE...

0002353c <_ZTSNSt3_V214error_categoryE>:
   2353c:	3374534e 3132565f 72726534 635f726f     NSt3_V214error_c
   2354c:	67657461 4579726f 00000000              ategoryE....

00023558 <_ZTVN12_GLOBAL__N_121system_error_categoryE>:
   23558:	00000000 000234c4 0000a701 0000a709     .....4..........
   23568:	0000a6d9 0000a721 0000a7b9 0000a6e1     ....!...........
   23578:	0000a7f1 0000a6e9                       ........

00023580 <_ZTVN12_GLOBAL__N_122generic_error_categoryE>:
   23580:	00000000 000234d0 0000a705 0000a715     .....4..........
   23590:	0000a6d1 0000a721 0000a7b9 0000a6e1     ....!...........
   235a0:	0000a7f1 0000a6e9 69736162 74735f63     ........basic_st
   235b0:	676e6972 535f3a3a 6e6f635f 75727473     ring::_S_constru
   235c0:	6e207463 206c6c75 20746f6e 696c6176     ct null not vali
   235d0:	00000064 69736162 74735f63 676e6972     d...basic_string
   235e0:	535f3a3a 6572635f 00657461 69736162     ::_S_create.basi
   235f0:	74735f63 676e6972 4d5f3a3a 6572635f     c_string::_M_cre
   23600:	00657461 3a647473 6461623a 6c6c615f     ate.std::bad_all
   23610:	0000636f                                oc..

00023614 <_ZTISt9bad_alloc>:
   23614:	0002344c 00023620 000236e0              L4.. 6...6..

00023620 <_ZTSSt9bad_alloc>:
   23620:	62397453 615f6461 636f6c6c 00000000     St9bad_alloc....

00023630 <_ZTVSt9bad_alloc>:
   23630:	00000000 00023614 0000aa89 0000aa9d     .....6..........
   23640:	0000aa81                                ....

00023644 <_ZTIN10__cxxabiv117__class_type_infoE>:
   23644:	0002344c 00023650 00023470              L4..P6..p4..

00023650 <_ZTSN10__cxxabiv117__class_type_infoE>:
   23650:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   23660:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   23670:	00000045                                E...

00023674 <_ZTVN10__cxxabiv117__class_type_infoE>:
   23674:	00000000 00023644 0000aafd 0000ab11     ....D6..........
   23684:	0000a641 0000a641 0000ab45 0000aab9     A...A...E.......
   23694:	0000ab2d 0000ab71 0000aaf1 3a647473     -...q.......std:
   236a4:	6461623a 6378655f 69747065 00006e6f     :bad_exception..
   236b4:	3a647473 6378653a 69747065 00006e6f     std::exception..

000236c4 <_ZTIN10__cxxabiv115__forced_unwindE>:
   236c4:	0002367c 000236e8                       |6...6..

000236cc <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   236cc:	0002367c 00023708                       |6...7..

000236d4 <_ZTISt13bad_exception>:
   236d4:	0002344c 0002372c 000236e0              L4..,7...6..

000236e0 <_ZTISt9exception>:
   236e0:	0002367c 00023740                       |6..@7..

000236e8 <_ZTSN10__cxxabiv115__forced_unwindE>:
   236e8:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   236f8:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

00023708 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   23708:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   23718:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   23728:	00456e6f                                onE.

0002372c <_ZTSSt13bad_exception>:
   2372c:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   2373c:	0000006e                                n...

00023740 <_ZTSSt9exception>:
   23740:	65397453 70656378 6e6f6974 00000000     St9exception....

00023750 <_ZTVSt13bad_exception>:
   23750:	00000000 000236d4 0000afa9 0000afbd     .....6..........
   23760:	0000afb5                                ....

00023764 <_ZTISt11logic_error>:
   23764:	0002344c 0002377c 000236e0              L4..|7...6..

00023770 <_ZTISt12length_error>:
   23770:	0002344c 0002378c 00023764              L4...7..d7..

0002377c <_ZTSSt11logic_error>:
   2377c:	31317453 69676f6c 72655f63 00726f72     St11logic_error.

0002378c <_ZTSSt12length_error>:
   2378c:	32317453 676e656c 655f6874 726f7272     St12length_error
   2379c:	00000000                                ....

000237a0 <_ZTVSt11logic_error>:
   237a0:	00000000 00023764 0000b7e9 0000b829     ....d7......)...
   237b0:	0000b7e5                                ....

000237b4 <_ZTVSt12length_error>:
   237b4:	00000000 00023770 0000b83d 0000b851     ....p7..=...Q...
   237c4:	0000b7e5 6d726574 74616e69 61632065     ....terminate ca
   237d4:	64656c6c 63657220 69737275 796c6576     lled recursively
   237e4:	0000000a 6d726574 74616e69 61632065     ....terminate ca
   237f4:	64656c6c 74666120 74207265 776f7268     lled after throw
   23804:	20676e69 69206e61 6174736e 2065636e     ing an instance 
   23814:	2720666f 00000000 00000a27 6d726574     of '....'...term
   23824:	74616e69 61632065 64656c6c 74697720     inate called wit
   23834:	74756f68 206e6120 69746361 65206576     hout an active e
   23844:	70656378 6e6f6974 0000000a 68772020     xception....  wh
   23854:	29287461 0020203a                       at():  .

0002385c <standard_subs>:
   2385c:	00000074 0002403c 00000003 0002403c     t...<@......<@..
   2386c:	00000003 00000000 00000000 00000061     ............a...
   2387c:	0002434c 0000000e 0002434c 0000000e     LC......LC......
   2388c:	0002435c 00000009 00000062 00024368     \C......b...hC..
   2389c:	00000011 00024368 00000011 0002437c     ....hC......|C..
   238ac:	0000000c 00000073 0002438c 0000000b     ....s....C......
   238bc:	00024398 00000046 0002437c 0000000c     .C..F...|C......
   238cc:	00000069 000243e0 0000000c 000243f0     i....C.......C..
   238dc:	00000031 00024424 0000000d 0000006f     1...$D......o...
   238ec:	00024434 0000000c 00024444 00000031     4D......DD..1...
   238fc:	00024478 0000000d 00000064 00024488     xD......d....D..
   2390c:	0000000d 00024498 00000032 000244cc     .....D..2....D..
   2391c:	0000000e                                ....

00023920 <cplus_demangle_builtin_types>:
   23920:	000246cc 0000000b 000246cc 0000000b     .F.......F......
   23930:	00000000 000246d8 00000004 000246e0     .....F.......F..
   23940:	00000007 00000007 000246e8 00000004     .........F......
   23950:	000246f0 00000004 00000000 000246f8     .F...........F..
   23960:	00000006 000246f8 00000006 00000008     .....F..........
   23970:	00024700 0000000b 00024700 0000000b     .G.......G......
   23980:	00000008 0002470c 00000005 0002470c     .....G.......G..
   23990:	00000005 00000008 00024714 0000000a     .........G......
   239a0:	00024714 0000000a 00000008 00024720     .G.......... G..
   239b0:	0000000d 00024720 0000000d 00000000     .... G..........
   239c0:	00021f84 00000003 00021f84 00000003     ................
   239d0:	00000001 00024730 0000000c 00024740     ....0G......@G..
   239e0:	00000008 00000002 00000000 00000000     ................
	...
   239fc:	00025070 00000004 00025070 00000004     pP......pP......
   23a0c:	00000003 0002474c 0000000d 0002474c     ....LG......LG..
   23a1c:	0000000d 00000004 0002475c 00000008     ........\G......
   23a2c:	0002475c 00000008 00000000 00024768     \G..........hG..
   23a3c:	00000011 00024768 00000011 00000000     ....hG..........
	...
   23a88:	0002477c 00000005 0002477c 00000005     |G......|G......
   23a98:	00000000 00024784 0000000e 00024784     .....G.......G..
   23aa8:	0000000e 00000000 00000000 00000000     ................
	...
   23ac4:	00024794 00000004 00024794 00000004     .G.......G......
   23ad4:	00000009 0002479c 00000007 000246e8     .....G.......F..
   23ae4:	00000004 00000000 000247a4 00000009     .........G......
   23af4:	00025070 00000004 00000005 000247b0     pP...........G..
   23b04:	00000012 000247b0 00000012 00000006     .....G..........
   23b14:	00024258 00000003 00024258 00000003     XB......XB......
   23b24:	00000000 000247c4 00000009 000247c4     .....G.......G..
   23b34:	00000009 00000000 000247d0 00000009     .........G......
   23b44:	000247d0 00000009 00000000 000247dc     .G...........G..
   23b54:	0000000a 000247dc 0000000a 00000000     .....G..........
   23b64:	000247e8 00000004 000247e8 00000004     .G.......G......
   23b74:	00000008 000247f0 00000008 000247f0     .....G.......G..
   23b84:	00000008 00000000 000247fc 00000008     .........G......
   23b94:	000247fc 00000008 00000000 00024808     .G...........H..
   23ba4:	00000011 00024808 00000011 00000000     .....H..........

00023bb4 <cplus_demangle_operators>:
   23bb4:	000244dc 000244e0 00000002 00000002     .D...D..........
   23bc4:	000244e4 000244e8 00000001 00000002     .D...D..........
   23bd4:	000244ec 00024310 00000002 00000002     .D...C..........
   23be4:	0002420c 000244f0 00000001 00000001     .B...D..........
   23bf4:	000244f4 000244f0 00000001 00000002     .D...D..........
   23c04:	000244f8 000244fc 00000008 00000001     .D...D..........
   23c14:	00024508 000244fc 00000008 00000001     .E...D..........
   23c24:	0002450c 00024510 0000000a 00000002     .E...E..........
   23c34:	0002401c 00021264 00000002 00000002     .@..d...........
   23c44:	0002451c 00024520 00000001 00000002     .E.. E..........
   23c54:	00024524 00024528 00000001 00000001     $E..(E..........
   23c64:	0002452c 00024530 00000002 00000002     ,E..0E..........
   23c74:	00024534 00024538 00000009 00000001     4E..8E..........
   23c84:	00024544 00024548 0000000c 00000002     DE..HE..........
   23c94:	00024558 0002455c 00000001 00000001     XE..\E..........
   23ca4:	00024560 00024564 00000007 00000001     `E..dE..........
   23cb4:	0002456c 00024570 00000002 00000002     lE..pE..........
   23cc4:	00024020 00024698 00000001 00000002      @...F..........
   23cd4:	00024574 00024578 00000001 00000002     tE..xE..........
   23ce4:	0002457c 00024580 00000002 00000002     |E...E..........
   23cf4:	00024584 00024588 00000001 00000002     .E...E..........
   23d04:	0002458c 00024590 00000002 00000002     .E...E..........
   23d14:	00024594 00024258 00000003 00000003     .E..XB..........
   23d24:	00024598 00024258 00000003 00000003     .E..XB..........
   23d34:	0002459c 00024258 00000003 00000002     .E..XB..........
   23d44:	000245a0 00024258 00000003 00000002     .E..XB..........
   23d54:	00024c3c 000245a4 00000002 00000002     <L...E..........
   23d64:	00024210 00024064 00000002 00000001     .B..d@..........
   23d74:	000245a8 00024420 00000001 00000002     .E.. D..........
   23d84:	00024218 00024084 00000002 00000002     .B...@..........
   23d94:	000245ac 000245b0 00000003 00000002     .E...E..........
   23da4:	00021d44 000245b4 00000002 00000002     D....E..........
   23db4:	00024058 000245b8 0000000b 00000001     X@...E..........
   23dc4:	000245c4 000245c8 00000002 00000002     .E...E..........
   23dd4:	000245cc 000245d0 00000001 00000002     .E...E..........
   23de4:	000245d4 000245d8 00000002 00000002     .E...E..........
   23df4:	000245dc 000245e0 00000002 00000002     .E...E..........
   23e04:	000245e4 000245e8 00000001 00000002     .E...E..........
   23e14:	000245ec 0002455c 00000001 00000002     .E..\E..........
   23e24:	000245f0 000245f4 00000002 00000001     .E...E..........
   23e34:	000245f8 000245fc 00000005 00000003     .E...E..........
   23e44:	00024604 00024608 00000002 00000002     .F...F..........
   23e54:	000247c0 000245e8 00000001 00000001     .G...E..........
   23e64:	0002460c 00024610 00000001 00000001     .F...F..........
   23e74:	00024614 00024618 00000003 00000003     .F...F..........
   23e84:	0002461c 00024620 00000002 00000002     .F.. F..........
   23e94:	00024624 00024628 00000002 00000002     $F..(F..........
   23ea4:	00024dd8 0002462c 00000001 00000002     .M..,F..........
   23eb4:	00024630 00024634 00000002 00000002     0F..4F..........
   23ec4:	00024638 0002463c 00000001 00000002     8F..<F..........
   23ed4:	00024640 00024644 00000003 00000002     @F..DF..........
   23ee4:	00021c5c 00024648 00000002 00000001     \...HF..........
   23ef4:	0002464c 0002463c 00000001 00000001     LF..<F..........
   23f04:	00024024 00024650 00000002 00000002     $@..PF..........
   23f14:	00024028 00024654 00000001 00000003     (@..TF..........
   23f24:	00024658 0002465c 00000002 00000002     XF..\F..........
   23f34:	00024660 00024664 00000003 00000002     `F..dF..........
   23f44:	00024668 0002466c 00000010 00000002     hF..lF..........
   23f54:	00024680 00024684 00000001 00000002     .F...F..........
   23f64:	00024688 0002468c 00000002 00000002     .F...F..........
   23f74:	00024018 00024690 00000009 00000001     .@...F..........
   23f84:	000242d8 00024690 00000009 00000001     .B...F..........
   23f94:	0002469c 000246a0 0000000b 00000002     .F...F..........
   23fa4:	00024518 000246ac 00000007 00000001     .E...F..........
   23fb4:	000246b4 000246ac 00000007 00000001     .F...F..........
   23fc4:	000230cc 000246b8 00000005 00000000     .0...F..........
   23fd4:	000246c0 000246c4 00000006 00000001     .F...F..........
	...
   23ff4:	4f4c475f 5f4c4142 00000000 6f6e6128     _GLOBAL_....(ano
   24004:	6f6d796e 6e207375 73656d61 65636170     nymous namespace
   24014:	00000029 00005073 00006c63 00007464     )...sP..cl..dt..
   24024:	00007470 00007571 69727473 6c20676e     pt..qu..string l
   24034:	72657469 00006c61 00647473 6f747561     iteral..std.auto
   24044:	00000000 6c636564 65707974 74756128     ....decltype(aut
   24054:	0000296f 0000696c 6962615b 0000003a     o)..li..[abi:...
   24064:	00003a3a 6665647b 746c7561 67726120     ::..{default arg
   24074:	00000023 003a3a7d 7272414a 00007961     #...}::.JArray..
   24084:	00005d5b 6f747561 0000003a 62617476     []..auto:...vtab
   24094:	6620656c 0020726f 20545456 20726f66     le for .VTT for 
   240a4:	00000000 736e6f63 63757274 6e6f6974     ....construction
   240b4:	61747620 20656c62 20726f66 00000000      vtable for ....
   240c4:	2d6e692d 00000000 65707974 6f666e69     -in-....typeinfo
   240d4:	726f6620 00000020 65707974 6f666e69      for ...typeinfo
   240e4:	6d616e20 6f662065 00002072 65707974      name for ..type
   240f4:	6f666e69 206e6620 20726f66 00000000     info fn for ....
   24104:	2d6e6f6e 74726976 206c6175 6e756874     non-virtual thun
   24114:	6f74206b 00000020 61766f63 6e616972     k to ...covarian
   24124:	65722074 6e727574 75687420 74206b6e     t return thunk t
   24134:	0000206f 6176616a 616c4320 66207373     o ..java Class f
   24144:	0020726f 72617567 61762064 62616972     or .guard variab
   24154:	6620656c 0020726f 20534c54 74696e69     le for .TLS init
   24164:	6e756620 6f697463 6f66206e 00002072      function for ..
   24174:	20534c54 70617277 20726570 636e7566     TLS wrapper func
   24184:	6e6f6974 726f6620 00000020 65666572     tion for ...refe
   24194:	636e6572 65742065 726f706d 20797261     rence temporary 
   241a4:	00000023 64646968 61206e65 7361696c     #...hidden alias
   241b4:	726f6620 00000020 2d6e6f6e 6e617274      for ...non-tran
   241c4:	74636173 206e6f69 6e6f6c63 6f662065     saction clone fo
   241d4:	00002072 7461535f 00000020 6363415f     r .._Sat ..._Acc
   241e4:	00006d75 6172465f 00007463 0000202c     um.._Fract.., ..
   241f4:	7265706f 726f7461 00000000 7265706f     operator....oper
   24204:	726f7461 00000020 00006461 00007367     ator ...ad..gs..
   24214:	0000283e 00007869 00203a20 2077656e     >(..ix.. : .new 
   24224:	00000000 00006c75 00006c6c 006c6c75     ....ul..ll..ull.
   24234:	65757274 00000000 6176616a 73657220     true....java res
   24244:	6372756f 00002065 6c636564 65707974     ource ..decltype
   24254:	00002820 002e2e2e 73696874 00000000      (......this....
   24264:	7261707b 0000236d 626f6c67 63206c61     {parm#..global c
   24274:	74736e6f 74637572 2073726f 6579656b     onstructors keye
   24284:	6f742064 00000020 626f6c67 64206c61     d to ...global d
   24294:	72747365 6f746375 6b207372 64657965     estructors keyed
   242a4:	206f7420 00000000 6d616c7b 28616462      to ....{lambda(
   242b4:	00000000 00002329 6e6e757b 64656d61     ....)#..{unnamed
   242c4:	70797420 00002365 6c635b20 20656e6f      type#.. [clone 
   242d4:	00000000 00005a73 73657220 63697274     ....sZ.. restric
   242e4:	00000074 6c6f7620 6c697461 00000065     t... volatile...
   242f4:	6e6f6320 00007473 61727420 6361736e      const.. transac
   24304:	6e6f6974 6661735f 00000065 00002626     tion_safe...&&..
   24314:	706d6f63 2078656c 00000000 67616d69     complex ....imag
   24324:	72616e69 00002079 002a3a3a 765f5f20     inary ..::*. __v
   24334:	6f746365 00002872 2e2e2e28 00000000     ector(..(.......
   24344:	292e2e2e 00000000 3a647473 6c6c613a     ...)....std::all
   24354:	7461636f 0000726f 6f6c6c61 6f746163     ocator..allocato
   24364:	00000072 3a647473 7361623a 735f6369     r...std::basic_s
   24374:	6e697274 00000067 69736162 74735f63     tring...basic_st
   24384:	676e6972 00000000 3a647473 7274733a     ring....std::str
   24394:	00676e69 3a647473 7361623a 735f6369     ing.std::basic_s
   243a4:	6e697274 68633c67 202c7261 3a647473     tring<char, std:
   243b4:	6168633a 72745f72 73746961 6168633c     :char_traits<cha
   243c4:	202c3e72 3a647473 6c6c613a 7461636f     r>, std::allocat
   243d4:	633c726f 3e726168 00003e20 3a647473     or<char> >..std:
   243e4:	7473693a 6d616572 00000000 3a647473     :istream....std:
   243f4:	7361623a 695f6369 65727473 633c6d61     :basic_istream<c
   24404:	2c726168 64747320 68633a3a 745f7261     har, std::char_t
   24414:	74696172 68633c73 203e7261 0000003e     raits<char> >...
   24424:	69736162 73695f63 61657274 0000006d     basic_istream...
   24434:	3a647473 74736f3a 6d616572 00000000     std::ostream....
   24444:	3a647473 7361623a 6f5f6369 65727473     std::basic_ostre
   24454:	633c6d61 2c726168 64747320 68633a3a     am<char, std::ch
   24464:	745f7261 74696172 68633c73 203e7261     ar_traits<char> 
   24474:	0000003e 69736162 736f5f63 61657274     >...basic_ostrea
   24484:	0000006d 3a647473 736f693a 61657274     m...std::iostrea
   24494:	0000006d 3a647473 7361623a 695f6369     m...std::basic_i
   244a4:	7274736f 3c6d6165 72616863 7473202c     ostream<char, st
   244b4:	633a3a64 5f726168 69617274 633c7374     d::char_traits<c
   244c4:	3e726168 00003e20 69736162 6f695f63     har> >..basic_io
   244d4:	65727473 00006d61 00004e61 00003d26     stream..aN..&=..
   244e4:	00005361 0000003d 00006161 00000026     aS..=...aa..&...
   244f4:	00006e61 00007461 67696c61 20666f6e     an..at..alignof 
   24504:	00000000 00007a61 00006363 736e6f63     ....az..cc..cons
   24514:	61635f74 00007473 00006d63 0000002c     t_cast..cm..,...
   24524:	00006f63 0000007e 00005664 00003d2f     co..~...dV../=..
   24534:	00006164 656c6564 5d5b6574 00000020     da..delete[] ...
   24544:	00006364 616e7964 5f63696d 74736163     dc..dynamic_cast
   24554:	00000000 00006564 0000002a 00006c64     ....de..*...dl..
   24564:	656c6564 00206574 00007364 00002a2e     delete .ds...*..
   24574:	00007664 0000002f 00004f65 00003d5e     dv../...eO..^=..
   24584:	00006f65 0000005e 00007165 00003d3d     eo..^...eq..==..
   24594:	00004c66 00005266 00006c66 00007266     fL..fR..fl..fr..
   245a4:	00003d3e 00007467 0000536c 003d3c3c     >=..gt..lS..<<=.
   245b4:	00003d3c 7265706f 726f7461 00202222     <=..operator"" .
   245c4:	0000736c 00003c3c 0000746c 0000003c     ls..<<..lt..<...
   245d4:	0000496d 00003d2d 00004c6d 00003d2a     mI..-=..mL..*=..
   245e4:	0000696d 0000002d 00006c6d 00006d6d     mi..-...ml..mm..
   245f4:	00002d2d 0000616e 5b77656e 0000005d     --..na..new[]...
   24604:	0000656e 00003d21 0000746e 00000021     ne..!=..nt..!...
   24614:	0000776e 0077656e 0000526f 00003d7c     nw..new.oR..|=..
   24624:	00006f6f 00007c7c 0000007c 00004c70     oo..||..|...pL..
   24634:	00003d2b 00006c70 0000002b 00006d70     +=..pl..+...pm..
   24644:	002a3e2d 00002b2b 00007370 00003e2d     ->*.++..ps..->..
   24654:	0000003f 00004d72 00003d25 00005372     ?...rM..%=..rS..
   24664:	003d3e3e 00006372 6e696572 70726574     >>=.rc..reinterp
   24674:	5f746572 74736163 00000000 00006d72     ret_cast....rm..
   24684:	00000025 00007372 00003e3e 657a6973     %...rs..>>..size
   24694:	2e2e666f 0000002e 00006373 74617473     of......sc..stat
   246a4:	635f6369 00747361 657a6973 0020666f     ic_cast.sizeof .
   246b4:	00007a73 6f726874 00000077 00007774     sz..throw...tw..
   246c4:	6f726874 00002077 6e676973 63206465     throw ..signed c
   246d4:	00726168 6c6f6f62 00000000 6c6f6f62     har.bool....bool
   246e4:	006e6165 72616863 00000000 65747962     ean.char....byte
   246f4:	00000000 62756f64 0000656c 676e6f6c     ....double..long
   24704:	756f6420 00656c62 616f6c66 00000074      double.float...
   24714:	6c665f5f 3174616f 00003832 69736e75     __float128..unsi
   24724:	64656e67 61686320 00000072 69736e75     gned char...unsi
   24734:	64656e67 746e6920 00000000 69736e75     gned int....unsi
   24744:	64656e67 00000000 69736e75 64656e67     gned....unsigned
   24754:	6e6f6c20 00000067 6e695f5f 38323174      long...__int128
   24764:	00000000 69736e75 64656e67 695f5f20     ....unsigned __i
   24774:	3231746e 00000038 726f6873 00000074     nt128...short...
   24784:	69736e75 64656e67 6f687320 00007472     unsigned short..
   24794:	64696f76 00000000 61686377 00745f72     void....wchar_t.
   247a4:	676e6f6c 6e6f6c20 00000067 69736e75     long long...unsi
   247b4:	64656e67 6e6f6c20 6f6c2067 0000676e     gned long long..
   247c4:	69636564 336c616d 00000032 69636564     decimal32...deci
   247d4:	366c616d 00000034 69636564 316c616d     mal64...decimal1
   247e4:	00003832 666c6168 00000000 72616863     28..half....char
   247f4:	745f3631 00000000 72616863 745f3233     16_t....char32_t
   24804:	00000000 6c636564 65707974 6c756e28     ....decltype(nul
   24814:	7274706c 00000029 66707865 00000000     lptr)...expf....

00024824 <halF>:
   24824:	3f000000 bf000000                       ...?....

0002482c <ln2HI>:
   2482c:	3f317180 bf317180                       .q1?.q1.

00024834 <ln2LO>:
   24834:	3717f7d1 b717f7d1 7566202c 6974636e     ...7...., functi
   24844:	203a6e6f 00000000 65737361 6f697472     on: ....assertio
   24854:	2522206e 66202273 656c6961 66203a64     n "%s" failed: f
   24864:	20656c69 22732522 696c202c 2520656e     ile "%s", line %
   24874:	25732564 00000a73                       d%s%s...

0002487c <_ctype_>:
   2487c:	20202000 20202020 28282020 20282828     .         ((((( 
   2488c:	20202020 20202020 20202020 20202020                     
   2489c:	10108820 10101010 10101010 10101010      ...............
   248ac:	04040410 04040404 10040404 10101010     ................
   248bc:	41411010 41414141 01010101 01010101     ..AAAAAA........
   248cc:	01010101 01010101 01010101 10101010     ................
   248dc:	42421010 42424242 02020202 02020202     ..BBBBBB........
   248ec:	02020202 02020202 02020202 10101010     ................
   248fc:	00000020 00000000 00000000 00000000      ...............
	...

00024980 <_global_impure_ptr>:
   24980:	20000028 00000043 49534f50 00000058     (.. C...POSIX...
   24990:	63637553 00737365 20746f4e 656e776f     Success.Not owne
   249a0:	00000072 73206f4e 20686375 656c6966     r...No such file
   249b0:	20726f20 65726964 726f7463 00000079      or directory...
   249c0:	73206f4e 20686375 636f7270 00737365     No such process.
   249d0:	65746e49 70757272 20646574 74737973     Interrupted syst
   249e0:	63206d65 006c6c61 204f2f49 6f727265     em call.I/O erro
   249f0:	00000072 73206f4e 20686375 69766564     r...No such devi
   24a00:	6f206563 64612072 73657264 00000073     ce or address...
   24a10:	20677241 7473696c 6f6f7420 6e6f6c20     Arg list too lon
   24a20:	00000067 63657845 726f6620 2074616d     g...Exec format 
   24a30:	6f727265 00000072 6b636f53 61207465     error...Socket a
   24a40:	6165726c 63207964 656e6e6f 64657463     lready connected
   24a50:	00000000 20646142 656c6966 6d756e20     ....Bad file num
   24a60:	00726562 63206f4e 646c6968 006e6572     ber.No children.
   24a70:	74736544 74616e69 206e6f69 72646461     Destination addr
   24a80:	20737365 75716572 64657269 00000000     ess required....
   24a90:	6d206f4e 2065726f 636f7270 65737365     No more processe
   24aa0:	00000073 20746f4e 756f6e65 73206867     s...Not enough s
   24ab0:	65636170 00000000 6d726550 69737369     pace....Permissi
   24ac0:	64206e6f 65696e65 00000064 20646142     on denied...Bad 
   24ad0:	72646461 00737365 69766544 6f206563     address.Device o
   24ae0:	65722072 72756f73 62206563 00797375     r resource busy.
   24af0:	656c6946 69786520 00737473 736f7243     File exists.Cros
   24b00:	65642d73 65636976 6e696c20 0000006b     s-device link...
   24b10:	73206f4e 20686375 69766564 00006563     No such device..
   24b20:	20746f4e 69642061 74636572 0079726f     Not a directory.
   24b30:	74736f48 20736920 6e776f64 00000000     Host is down....
   24b40:	6e6e6f43 69746365 61206e6f 6165726c     Connection alrea
   24b50:	69207964 7270206e 6572676f 00007373     dy in progress..
   24b60:	61207349 72696420 6f746365 00007972     Is a directory..
   24b70:	61766e49 2064696c 75677261 746e656d     Invalid argument
   24b80:	00000000 7774654e 206b726f 65746e69     ....Network inte
   24b90:	63616672 73692065 746f6e20 6e6f6320     rface is not con
   24ba0:	75676966 00646572 6e6e6f43 69746365     figured.Connecti
   24bb0:	61206e6f 74726f62 62206465 656e2079     on aborted by ne
   24bc0:	726f7774 0000006b 206f6f54 796e616d     twork...Too many
   24bd0:	65706f20 6966206e 2073656c 73206e69      open files in s
   24be0:	65747379 0000006d 656c6946 73656420     ystem...File des
   24bf0:	70697263 20726f74 756c6176 6f742065     criptor value to
   24c00:	616c206f 00656772 20746f4e 68632061     o large.Not a ch
   24c10:	63617261 20726574 69766564 00006563     aracter device..
   24c20:	74786554 6c696620 75622065 00007973     Text file busy..
   24c30:	656c6946 6f6f7420 72616c20 00006567     File too large..
   24c40:	74736f48 20736920 65726e75 61686361     Host is unreacha
   24c50:	00656c62 73206f4e 65636170 66656c20     ble.No space lef
   24c60:	6e6f2074 76656420 00656369 20746f4e     t on device.Not 
   24c70:	70707573 6574726f 00000064 656c6c49     supported...Ille
   24c80:	206c6167 6b656573 00000000 64616552     gal seek....Read
   24c90:	6c6e6f2d 69662079 7320656c 65747379     -only file syste
   24ca0:	0000006d 206f6f54 796e616d 6e696c20     m...Too many lin
   24cb0:	0000736b 6b6f7242 70206e65 00657069     ks..Broken pipe.
   24cc0:	6874614d 74616d65 20736369 75677261     Mathematics argu
   24cd0:	746e656d 74756f20 20666f20 616d6f64     ment out of doma
   24ce0:	6f206e69 75662066 6974636e 00006e6f     in of function..
   24cf0:	75736552 7420746c 6c206f6f 65677261     Result too large
   24d00:	00000000 6d206f4e 61737365 6f206567     ....No message o
   24d10:	65642066 65726973 79742064 00006570     f desired type..
   24d20:	6e656449 69666974 72207265 766f6d65     Identifier remov
   24d30:	00006465 656c6c49 206c6167 65747962     ed..Illegal byte
   24d40:	71657320 636e6575 00000065 64616544      sequence...Dead
   24d50:	6b636f6c 00000000 7774654e 206b726f     lock....Network 
   24d60:	75207369 6165726e 62616863 0000656c     is unreachable..
   24d70:	6c206f4e 006b636f 20746f4e 74732061     No lock.Not a st
   24d80:	6d616572 00000000 65727453 69206d61     ream....Stream i
   24d90:	6c74636f 6d697420 74756f65 00000000     octl timeout....
   24da0:	73206f4e 61657274 6572206d 72756f73     No stream resour
   24db0:	00736563 74726956 206c6175 63726963     ces.Virtual circ
   24dc0:	20746975 67207369 00656e6f 746f7250     uit is gone.Prot
   24dd0:	6c6f636f 72726520 0000726f 6e6b6e55     ocol error..Unkn
   24de0:	206e776f 746f7270 6c6f636f 00000000     own protocol....
   24df0:	746c754d 706f6869 74746120 74706d65     Multihop attempt
   24e00:	00006465 20646142 7373656d 00656761     ed..Bad message.
   24e10:	636e7546 6e6f6974 746f6e20 706d6920     Function not imp
   24e20:	656d656c 6465746e 00000000 65726944     lemented....Dire
   24e30:	726f7463 6f6e2079 6d652074 00797470     ctory not empty.
   24e40:	656c6946 20726f20 68746170 6d616e20     File or path nam
   24e50:	6f742065 6f6c206f 0000676e 206f6f54     e too long..Too 
   24e60:	796e616d 6d797320 696c6f62 696c2063     many symbolic li
   24e70:	00736b6e 62206f4e 65666675 70732072     nks.No buffer sp
   24e80:	20656361 69617661 6c62616c 00000065     ace available...
   24e90:	64206f4e 00617461 72646441 20737365     No data.Address 
   24ea0:	696d6166 6e20796c 7320746f 6f707075     family not suppo
   24eb0:	64657472 20796220 746f7270 6c6f636f     rted by protocol
   24ec0:	6d616620 00796c69 746f7250 6c6f636f      family.Protocol
   24ed0:	6f727720 7420676e 20657079 20726f66      wrong type for 
   24ee0:	6b636f73 00007465 6b636f53 6f207465     socket..Socket o
   24ef0:	61726570 6e6f6974 206e6f20 2d6e6f6e     peration on non-
   24f00:	6b636f73 00007465 746f7250 6c6f636f     socket..Protocol
   24f10:	746f6e20 61766120 62616c69 0000656c      not available..
   24f20:	6e6e6f43 69746365 72206e6f 73756665     Connection refus
   24f30:	00006465 6e6e6f43 69746365 72206e6f     ed..Connection r
   24f40:	74657365 20796220 72656570 00000000     eset by peer....
   24f50:	72646441 20737365 65726c61 20796461     Address already 
   24f60:	75206e69 00006573 72646441 20737365     in use..Address 
   24f70:	20746f6e 69617661 6c62616c 00000065     not available...
   24f80:	74666f53 65726177 75616320 20646573     Software caused 
   24f90:	6e6e6f63 69746365 61206e6f 74726f62     connection abort
   24fa0:	00000000 6b636f53 69207465 6f6e2073     ....Socket is no
   24fb0:	6f632074 63656e6e 00646574 6b636f53     t connected.Sock
   24fc0:	69207465 6c612073 64616572 6f632079     et is already co
   24fd0:	63656e6e 00646574 7265704f 6f697461     nnected.Operatio
   24fe0:	6163206e 6c65636e 00006465 74617453     n canceled..Stat
   24ff0:	6f6e2065 65722074 65766f63 6c626172     e not recoverabl
   25000:	00000065 76657250 73756f69 6e776f20     e...Previous own
   25010:	64207265 00646569 7265704f 6f697461     er died.Operatio
   25020:	6f6e206e 75732074 726f7070 20646574     n not supported 
   25030:	73206e6f 656b636f 00000074 756c6156     on socket...Valu
   25040:	6f742065 616c206f 20656772 20726f66     e too large for 
   25050:	69666564 2064656e 61746164 70797420     defined data typ
   25060:	00000065 7373654d 20656761 206f6f74     e...Message too 
   25070:	676e6f6c 00000000 6e6e6f43 69746365     long....Connecti
   25080:	74206e6f 64656d69 74756f20 00000000     on timed out....
   25090:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   250a0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   250b0:	00000000 33323130 37363534 62613938     ....0123456789ab
   250c0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

000250d0 <blanks.7223>:
   250d0:	20202020 20202020 20202020 20202020                     

000250e0 <zeroes.7224>:
   250e0:	30303030 30303030 30303030 30303030     0000000000000000

000250f0 <blanks.7217>:
   250f0:	20202020 20202020 20202020 20202020                     

00025100 <zeroes.7218>:
   25100:	30303030 30303030 30303030 30303030     0000000000000000

00025110 <blanks.7238>:
   25110:	20202020 20202020 20202020 20202020                     

00025120 <zeroes.7239>:
   25120:	30303030 30303030 30303030 30303030     0000000000000000
   25130:	69666e49 7974696e 00000000 00000000     Infinity........

00025140 <__mprec_bigtens>:
   25140:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   25150:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   25160:	7f73bf3c 75154fdd                       <.s..O.u

00025168 <__mprec_tens>:
   25168:	00000000 3ff00000 00000000 40240000     .......?......$@
   25178:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   25188:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   25198:	00000000 412e8480 00000000 416312d0     .......A......cA
   251a8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   251b8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   251c8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   251d8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   251e8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   251f8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   25208:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   25218:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   25228:	79d99db4 44ea7843                       ...yCx.D

00025230 <p05.6055>:
   25230:	00000005 00000019 0000007d 8101b108     ........}.......
   25240:	8400b0b0 00000000 7ffe5f2d 00b108a9     ........-_......
   25250:	0801ffff 001c040e 00000e18 7ffe5f19     ............._..
   25260:	00b108a9 0801ffff 001c040e 00000e18     ................
   25270:	7ffe5f05 0005a8b0 0c01ffff 0000020c     ._..............
   25280:	002a0414 00000436 8101b108 8400b0b0     ..*.6...........
   25290:	00000000 8101b108 8400b0b0 00000000     ................
   252a0:	7ffe5ed5 00b108a9 0001ffff 8101b108     .^..............
   252b0:	8400b0b0 00000000 7ffe5ebd 0016afb0     .........^......
   252c0:	011510ff 08ca200b 09a60000 0109b004     ..... ..........
   252d0:	00000001 00000000 7ffe5e9d 01b10884     .........^......
   252e0:	00b0b0b0 011910ff 0806020c 10040c01     ................
   252f0:	000a1c05 7f000100 007d0000 00000000     ..........}.....
   25300:	00000000 8101b108 8400b0b0 00000000     ................
   25310:	8101b108 8400b0b0 00000000 7ffe5e59     ............Y^..
   25320:	0001a8b0 0801ffff 0018040e 0000041e     ................
   25330:	7ffe5e45 0004afb0 011d10ff 3a042412     E^...........$.:
   25340:	32042e01 c8507801 01d00001 01000004     ...2.xP.........
	...
   25358:	7ffe5e1d 0001aab0 012910ff 00303418     .^........)..40.
   25368:	94046800 1a720301 01b00000 0001e218     .h....r.........
   25378:	002601cc 01000200 0000007d 00000000     ..&.....}.......
   25388:	ffffe358 8101b108 8400b0b0 00000000     X...............
   25398:	8101b108 8400b0b0 00000000              ............

000253a4 <_init>:
   253a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   253a6:	bf00      	nop
   253a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   253aa:	bc08      	pop	{r3}
   253ac:	469e      	mov	lr, r3
   253ae:	4770      	bx	lr

000253b0 <__init_array_start>:
   253b0:	0001a3fd 	.word	0x0001a3fd

000253b4 <__frame_dummy_init_array_entry>:
   253b4:	00000289 0000a82d 0000a975 0000acdd     ....-...u.......
   253c4:	0000b8bd 0000b941 0000b9c5              ....A.......

000253d0 <_fini>:
   253d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   253d2:	bf00      	nop
   253d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   253d6:	bc08      	pop	{r3}
   253d8:	469e      	mov	lr, r3
   253da:	4770      	bx	lr

000253dc <__fini_array_start>:
   253dc:	00000265 	.word	0x00000265
