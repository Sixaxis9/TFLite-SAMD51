
TFLite_SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00023fd8  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000238  00023fd8  00023fd8  00033fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c8  20000000  00024210  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  000409c8  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  000409c8  2**0
                  CONTENTS
  5 .bss          0000f2fc  200009c8  00024bd8  000409c8  2**2
                  ALLOC
  6 .stack        00010004  2000fcc4  00033ed4  000409c8  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  000409c8  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  000409f6  2**0
                  CONTENTS, READONLY
  9 .debug_info   001b7949  00000000  00000000  00040a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000e29f  00000000  00000000  001f8398  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000477af  00000000  00000000  00206637  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001380  00000000  00000000  0024dde6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00008610  00000000  00000000  0024f166  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000368c6  00000000  00000000  00257776  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000275cd  00000000  00000000  0028e03c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001958ef  00000000  00000000  002b5609  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00010d60  00000000  00000000  0044aef8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 fc 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	79 09 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     y...............
      7c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      8c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	c9 08 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 00 00 00 00 00 00 00 00 d1 02 00 00     ................
     184:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     204:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200009c8 	.word	0x200009c8
     280:	00000000 	.word	0x00000000
     284:	00024210 	.word	0x00024210

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00024210 	.word	0x00024210
     2c4:	200009cc 	.word	0x200009cc
     2c8:	00024210 	.word	0x00024210
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b1c      	ldr	r3, [pc, #112]	; (348 <Reset_Handler+0x74>)
     2d8:	4a1c      	ldr	r2, [pc, #112]	; (34c <Reset_Handler+0x78>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b1c      	ldr	r3, [pc, #112]	; (350 <Reset_Handler+0x7c>)
     2e0:	4a19      	ldr	r2, [pc, #100]	; (348 <Reset_Handler+0x74>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4916      	ldr	r1, [pc, #88]	; (34c <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b14      	ldr	r3, [pc, #80]	; (354 <Reset_Handler+0x80>)
     302:	4a15      	ldr	r2, [pc, #84]	; (358 <Reset_Handler+0x84>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4b0f      	ldr	r3, [pc, #60]	; (35c <Reset_Handler+0x88>)
     320:	4a0f      	ldr	r2, [pc, #60]	; (360 <Reset_Handler+0x8c>)
     322:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     326:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     328:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     32c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     334:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     338:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     33c:	4b09      	ldr	r3, [pc, #36]	; (364 <Reset_Handler+0x90>)
     33e:	4798      	blx	r3
        main();
     340:	4b09      	ldr	r3, [pc, #36]	; (368 <Reset_Handler+0x94>)
     342:	4798      	blx	r3
     344:	e7fe      	b.n	344 <Reset_Handler+0x70>
     346:	bf00      	nop
     348:	20000000 	.word	0x20000000
     34c:	00024210 	.word	0x00024210
     350:	200009c8 	.word	0x200009c8
     354:	2000fcc4 	.word	0x2000fcc4
     358:	200009c8 	.word	0x200009c8
     35c:	e000ed00 	.word	0xe000ed00
     360:	00000000 	.word	0x00000000
     364:	00013e1d 	.word	0x00013e1d
     368:	00000c21 	.word	0x00000c21

0000036c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     36c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     36e:	4b04      	ldr	r3, [pc, #16]	; (380 <delay_ms+0x14>)
     370:	681c      	ldr	r4, [r3, #0]
     372:	4b04      	ldr	r3, [pc, #16]	; (384 <delay_ms+0x18>)
     374:	4798      	blx	r3
     376:	4601      	mov	r1, r0
     378:	4620      	mov	r0, r4
     37a:	4b03      	ldr	r3, [pc, #12]	; (388 <delay_ms+0x1c>)
     37c:	4798      	blx	r3
     37e:	bd10      	pop	{r4, pc}
     380:	200009e4 	.word	0x200009e4
     384:	00000709 	.word	0x00000709
     388:	00000729 	.word	0x00000729

0000038c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     38c:	b570      	push	{r4, r5, r6, lr}
     38e:	460d      	mov	r5, r1
     390:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     392:	4604      	mov	r4, r0
     394:	b160      	cbz	r0, 3b0 <io_write+0x24>
     396:	1c08      	adds	r0, r1, #0
     398:	bf18      	it	ne
     39a:	2001      	movne	r0, #1
     39c:	2234      	movs	r2, #52	; 0x34
     39e:	4905      	ldr	r1, [pc, #20]	; (3b4 <io_write+0x28>)
     3a0:	4b05      	ldr	r3, [pc, #20]	; (3b8 <io_write+0x2c>)
     3a2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     3a4:	6823      	ldr	r3, [r4, #0]
     3a6:	4632      	mov	r2, r6
     3a8:	4629      	mov	r1, r5
     3aa:	4620      	mov	r0, r4
     3ac:	4798      	blx	r3
}
     3ae:	bd70      	pop	{r4, r5, r6, pc}
     3b0:	2000      	movs	r0, #0
     3b2:	e7f3      	b.n	39c <io_write+0x10>
     3b4:	0001b070 	.word	0x0001b070
     3b8:	00000641 	.word	0x00000641

000003bc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3be:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     3c0:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     3c2:	b12f      	cbz	r7, 3d0 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     3c4:	688d      	ldr	r5, [r1, #8]
     3c6:	463c      	mov	r4, r7
     3c8:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     3ca:	f1c2 0e01 	rsb	lr, r2, #1
     3ce:	e00b      	b.n	3e8 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
     3d0:	4b0e      	ldr	r3, [pc, #56]	; (40c <timer_add_timer_task+0x50>)
     3d2:	4798      	blx	r3
		return;
     3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     3d6:	4473      	add	r3, lr
     3d8:	68a0      	ldr	r0, [r4, #8]
     3da:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
     3dc:	42ab      	cmp	r3, r5
     3de:	d20a      	bcs.n	3f6 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     3e0:	6823      	ldr	r3, [r4, #0]
     3e2:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     3e4:	b153      	cbz	r3, 3fc <timer_add_timer_task+0x40>
     3e6:	461c      	mov	r4, r3
		if (it->time_label <= time) {
     3e8:	6863      	ldr	r3, [r4, #4]
     3ea:	4293      	cmp	r3, r2
     3ec:	d8f3      	bhi.n	3d6 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
     3ee:	68a0      	ldr	r0, [r4, #8]
     3f0:	4403      	add	r3, r0
     3f2:	1a9b      	subs	r3, r3, r2
     3f4:	e7f2      	b.n	3dc <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
     3f6:	42a7      	cmp	r7, r4
     3f8:	d004      	beq.n	404 <timer_add_timer_task+0x48>
     3fa:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     3fc:	4620      	mov	r0, r4
     3fe:	4b04      	ldr	r3, [pc, #16]	; (410 <timer_add_timer_task+0x54>)
     400:	4798      	blx	r3
     402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     404:	4660      	mov	r0, ip
     406:	4b01      	ldr	r3, [pc, #4]	; (40c <timer_add_timer_task+0x50>)
     408:	4798      	blx	r3
     40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     40c:	00000669 	.word	0x00000669
     410:	00000695 	.word	0x00000695

00000414 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
     418:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     41a:	6907      	ldr	r7, [r0, #16]
     41c:	3701      	adds	r7, #1
     41e:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     420:	7e03      	ldrb	r3, [r0, #24]
     422:	f013 0f01 	tst.w	r3, #1
     426:	d113      	bne.n	450 <timer_process_counted+0x3c>
     428:	7e03      	ldrb	r3, [r0, #24]
     42a:	f013 0f02 	tst.w	r3, #2
     42e:	d10f      	bne.n	450 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     430:	b354      	cbz	r4, 488 <timer_process_counted+0x74>
     432:	6863      	ldr	r3, [r4, #4]
     434:	1afb      	subs	r3, r7, r3
     436:	68a2      	ldr	r2, [r4, #8]
     438:	4293      	cmp	r3, r2
     43a:	d307      	bcc.n	44c <timer_process_counted+0x38>
     43c:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     43e:	f100 0814 	add.w	r8, r0, #20
     442:	f8df 9048 	ldr.w	r9, [pc, #72]	; 48c <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     446:	f8df a048 	ldr.w	sl, [pc, #72]	; 490 <timer_process_counted+0x7c>
     44a:	e012      	b.n	472 <timer_process_counted+0x5e>
     44c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     450:	7e03      	ldrb	r3, [r0, #24]
     452:	f043 0302 	orr.w	r3, r3, #2
     456:	7603      	strb	r3, [r0, #24]
		return;
     458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     45c:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     45e:	68e3      	ldr	r3, [r4, #12]
     460:	4620      	mov	r0, r4
     462:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     464:	b185      	cbz	r5, 488 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     466:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     468:	686b      	ldr	r3, [r5, #4]
     46a:	1afb      	subs	r3, r7, r3
     46c:	68aa      	ldr	r2, [r5, #8]
     46e:	4293      	cmp	r3, r2
     470:	d30a      	bcc.n	488 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
     472:	4640      	mov	r0, r8
     474:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
     476:	7c23      	ldrb	r3, [r4, #16]
     478:	2b01      	cmp	r3, #1
     47a:	d1ef      	bne.n	45c <timer_process_counted+0x48>
			tmp->time_label = time;
     47c:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     47e:	463a      	mov	r2, r7
     480:	4621      	mov	r1, r4
     482:	4640      	mov	r0, r8
     484:	47d0      	blx	sl
     486:	e7e9      	b.n	45c <timer_process_counted+0x48>
     488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     48c:	0000069d 	.word	0x0000069d
     490:	000003bd 	.word	0x000003bd

00000494 <timer_init>:
{
     494:	b538      	push	{r3, r4, r5, lr}
     496:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     498:	4604      	mov	r4, r0
     49a:	b178      	cbz	r0, 4bc <timer_init+0x28>
     49c:	1c08      	adds	r0, r1, #0
     49e:	bf18      	it	ne
     4a0:	2001      	movne	r0, #1
     4a2:	223b      	movs	r2, #59	; 0x3b
     4a4:	4906      	ldr	r1, [pc, #24]	; (4c0 <timer_init+0x2c>)
     4a6:	4b07      	ldr	r3, [pc, #28]	; (4c4 <timer_init+0x30>)
     4a8:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     4aa:	4629      	mov	r1, r5
     4ac:	4620      	mov	r0, r4
     4ae:	4b06      	ldr	r3, [pc, #24]	; (4c8 <timer_init+0x34>)
     4b0:	4798      	blx	r3
	descr->time                           = 0;
     4b2:	2000      	movs	r0, #0
     4b4:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     4b6:	4b05      	ldr	r3, [pc, #20]	; (4cc <timer_init+0x38>)
     4b8:	6023      	str	r3, [r4, #0]
}
     4ba:	bd38      	pop	{r3, r4, r5, pc}
     4bc:	2000      	movs	r0, #0
     4be:	e7f0      	b.n	4a2 <timer_init+0xe>
     4c0:	0001b084 	.word	0x0001b084
     4c4:	00000641 	.word	0x00000641
     4c8:	0000090d 	.word	0x0000090d
     4cc:	00000415 	.word	0x00000415

000004d0 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     4d4:	460f      	mov	r7, r1
     4d6:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     4d8:	4604      	mov	r4, r0
     4da:	b328      	cbz	r0, 528 <usart_sync_write+0x58>
     4dc:	b331      	cbz	r1, 52c <usart_sync_write+0x5c>
     4de:	1c10      	adds	r0, r2, #0
     4e0:	bf18      	it	ne
     4e2:	2001      	movne	r0, #1
     4e4:	22f1      	movs	r2, #241	; 0xf1
     4e6:	4912      	ldr	r1, [pc, #72]	; (530 <usart_sync_write+0x60>)
     4e8:	4b12      	ldr	r3, [pc, #72]	; (534 <usart_sync_write+0x64>)
     4ea:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     4ec:	3408      	adds	r4, #8
     4ee:	4d12      	ldr	r5, [pc, #72]	; (538 <usart_sync_write+0x68>)
     4f0:	4620      	mov	r0, r4
     4f2:	47a8      	blx	r5
     4f4:	2800      	cmp	r0, #0
     4f6:	d0fb      	beq.n	4f0 <usart_sync_write+0x20>
     4f8:	3f01      	subs	r7, #1
     4fa:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     4fc:	f8df 9040 	ldr.w	r9, [pc, #64]	; 540 <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     500:	4d0d      	ldr	r5, [pc, #52]	; (538 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     502:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     506:	4620      	mov	r0, r4
     508:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     50a:	4620      	mov	r0, r4
     50c:	47a8      	blx	r5
     50e:	2800      	cmp	r0, #0
     510:	d0fb      	beq.n	50a <usart_sync_write+0x3a>
			;
	} while (++offset < length);
     512:	3601      	adds	r6, #1
     514:	4546      	cmp	r6, r8
     516:	d3f4      	bcc.n	502 <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
     518:	4d08      	ldr	r5, [pc, #32]	; (53c <usart_sync_write+0x6c>)
     51a:	4620      	mov	r0, r4
     51c:	47a8      	blx	r5
     51e:	2800      	cmp	r0, #0
     520:	d0fb      	beq.n	51a <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
     522:	4630      	mov	r0, r6
     524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     528:	2000      	movs	r0, #0
     52a:	e7db      	b.n	4e4 <usart_sync_write+0x14>
     52c:	2000      	movs	r0, #0
     52e:	e7d9      	b.n	4e4 <usart_sync_write+0x14>
     530:	0001b09c 	.word	0x0001b09c
     534:	00000641 	.word	0x00000641
     538:	00000ad3 	.word	0x00000ad3
     53c:	00000add 	.word	0x00000add
     540:	00000ac5 	.word	0x00000ac5

00000544 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     548:	460f      	mov	r7, r1
     54a:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     54c:	4604      	mov	r4, r0
     54e:	b1e0      	cbz	r0, 58a <usart_sync_read+0x46>
     550:	b1e9      	cbz	r1, 58e <usart_sync_read+0x4a>
     552:	1c10      	adds	r0, r2, #0
     554:	bf18      	it	ne
     556:	2001      	movne	r0, #1
     558:	f44f 7286 	mov.w	r2, #268	; 0x10c
     55c:	490d      	ldr	r1, [pc, #52]	; (594 <usart_sync_read+0x50>)
     55e:	4b0e      	ldr	r3, [pc, #56]	; (598 <usart_sync_read+0x54>)
     560:	4798      	blx	r3
     562:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
     564:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     566:	3408      	adds	r4, #8
     568:	4d0c      	ldr	r5, [pc, #48]	; (59c <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     56a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 5a0 <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
     56e:	4620      	mov	r0, r4
     570:	47a8      	blx	r5
     572:	2800      	cmp	r0, #0
     574:	d0fb      	beq.n	56e <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     576:	4620      	mov	r0, r4
     578:	47c8      	blx	r9
     57a:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     57e:	3601      	adds	r6, #1
     580:	4546      	cmp	r6, r8
     582:	d3f4      	bcc.n	56e <usart_sync_read+0x2a>

	return (int32_t)offset;
}
     584:	4630      	mov	r0, r6
     586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     58a:	2000      	movs	r0, #0
     58c:	e7e4      	b.n	558 <usart_sync_read+0x14>
     58e:	2000      	movs	r0, #0
     590:	e7e2      	b.n	558 <usart_sync_read+0x14>
     592:	bf00      	nop
     594:	0001b09c 	.word	0x0001b09c
     598:	00000641 	.word	0x00000641
     59c:	00000ae7 	.word	0x00000ae7
     5a0:	00000acb 	.word	0x00000acb

000005a4 <usart_sync_init>:
{
     5a4:	b538      	push	{r3, r4, r5, lr}
     5a6:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     5a8:	4604      	mov	r4, r0
     5aa:	b198      	cbz	r0, 5d4 <usart_sync_init+0x30>
     5ac:	1c08      	adds	r0, r1, #0
     5ae:	bf18      	it	ne
     5b0:	2001      	movne	r0, #1
     5b2:	2234      	movs	r2, #52	; 0x34
     5b4:	4908      	ldr	r1, [pc, #32]	; (5d8 <usart_sync_init+0x34>)
     5b6:	4b09      	ldr	r3, [pc, #36]	; (5dc <usart_sync_init+0x38>)
     5b8:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     5ba:	4629      	mov	r1, r5
     5bc:	f104 0008 	add.w	r0, r4, #8
     5c0:	4b07      	ldr	r3, [pc, #28]	; (5e0 <usart_sync_init+0x3c>)
     5c2:	4798      	blx	r3
	if (init_status) {
     5c4:	4603      	mov	r3, r0
     5c6:	b918      	cbnz	r0, 5d0 <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
     5c8:	4a06      	ldr	r2, [pc, #24]	; (5e4 <usart_sync_init+0x40>)
     5ca:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     5cc:	4a06      	ldr	r2, [pc, #24]	; (5e8 <usart_sync_init+0x44>)
     5ce:	6022      	str	r2, [r4, #0]
}
     5d0:	4618      	mov	r0, r3
     5d2:	bd38      	pop	{r3, r4, r5, pc}
     5d4:	2000      	movs	r0, #0
     5d6:	e7ec      	b.n	5b2 <usart_sync_init+0xe>
     5d8:	0001b09c 	.word	0x0001b09c
     5dc:	00000641 	.word	0x00000641
     5e0:	00000a85 	.word	0x00000a85
     5e4:	00000545 	.word	0x00000545
     5e8:	000004d1 	.word	0x000004d1

000005ec <usart_sync_enable>:
{
     5ec:	b510      	push	{r4, lr}
	ASSERT(descr);
     5ee:	4604      	mov	r4, r0
     5f0:	2253      	movs	r2, #83	; 0x53
     5f2:	4906      	ldr	r1, [pc, #24]	; (60c <usart_sync_enable+0x20>)
     5f4:	3000      	adds	r0, #0
     5f6:	bf18      	it	ne
     5f8:	2001      	movne	r0, #1
     5fa:	4b05      	ldr	r3, [pc, #20]	; (610 <usart_sync_enable+0x24>)
     5fc:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     5fe:	f104 0008 	add.w	r0, r4, #8
     602:	4b04      	ldr	r3, [pc, #16]	; (614 <usart_sync_enable+0x28>)
     604:	4798      	blx	r3
}
     606:	2000      	movs	r0, #0
     608:	bd10      	pop	{r4, pc}
     60a:	bf00      	nop
     60c:	0001b09c 	.word	0x0001b09c
     610:	00000641 	.word	0x00000641
     614:	00000ab1 	.word	0x00000ab1

00000618 <usart_sync_get_io_descriptor>:
{
     618:	b538      	push	{r3, r4, r5, lr}
     61a:	460c      	mov	r4, r1
	ASSERT(descr && io);
     61c:	4605      	mov	r5, r0
     61e:	b148      	cbz	r0, 634 <usart_sync_get_io_descriptor+0x1c>
     620:	1c08      	adds	r0, r1, #0
     622:	bf18      	it	ne
     624:	2001      	movne	r0, #1
     626:	2269      	movs	r2, #105	; 0x69
     628:	4903      	ldr	r1, [pc, #12]	; (638 <usart_sync_get_io_descriptor+0x20>)
     62a:	4b04      	ldr	r3, [pc, #16]	; (63c <usart_sync_get_io_descriptor+0x24>)
     62c:	4798      	blx	r3
	*io = &descr->io;
     62e:	6025      	str	r5, [r4, #0]
}
     630:	2000      	movs	r0, #0
     632:	bd38      	pop	{r3, r4, r5, pc}
     634:	2000      	movs	r0, #0
     636:	e7f6      	b.n	626 <usart_sync_get_io_descriptor+0xe>
     638:	0001b09c 	.word	0x0001b09c
     63c:	00000641 	.word	0x00000641

00000640 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     640:	b900      	cbnz	r0, 644 <assert+0x4>
		__asm("BKPT #0");
     642:	be00      	bkpt	0x0000
     644:	4770      	bx	lr

00000646 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     646:	6803      	ldr	r3, [r0, #0]
     648:	b14b      	cbz	r3, 65e <is_list_element+0x18>
		if (it == element) {
     64a:	428b      	cmp	r3, r1
     64c:	d009      	beq.n	662 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
     64e:	681b      	ldr	r3, [r3, #0]
     650:	b11b      	cbz	r3, 65a <is_list_element+0x14>
		if (it == element) {
     652:	4299      	cmp	r1, r3
     654:	d1fb      	bne.n	64e <is_list_element+0x8>
			return true;
     656:	2001      	movs	r0, #1
		}
	}

	return false;
}
     658:	4770      	bx	lr
	return false;
     65a:	2000      	movs	r0, #0
     65c:	4770      	bx	lr
     65e:	2000      	movs	r0, #0
     660:	4770      	bx	lr
			return true;
     662:	2001      	movs	r0, #1
     664:	4770      	bx	lr
	...

00000668 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     668:	b538      	push	{r3, r4, r5, lr}
     66a:	4604      	mov	r4, r0
     66c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
     66e:	4b06      	ldr	r3, [pc, #24]	; (688 <list_insert_as_head+0x20>)
     670:	4798      	blx	r3
     672:	f080 0001 	eor.w	r0, r0, #1
     676:	2239      	movs	r2, #57	; 0x39
     678:	4904      	ldr	r1, [pc, #16]	; (68c <list_insert_as_head+0x24>)
     67a:	b2c0      	uxtb	r0, r0
     67c:	4b04      	ldr	r3, [pc, #16]	; (690 <list_insert_as_head+0x28>)
     67e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     680:	6823      	ldr	r3, [r4, #0]
     682:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     684:	6025      	str	r5, [r4, #0]
     686:	bd38      	pop	{r3, r4, r5, pc}
     688:	00000647 	.word	0x00000647
     68c:	0001b0b8 	.word	0x0001b0b8
     690:	00000641 	.word	0x00000641

00000694 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     694:	6803      	ldr	r3, [r0, #0]
     696:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     698:	6001      	str	r1, [r0, #0]
     69a:	4770      	bx	lr

0000069c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     69c:	6803      	ldr	r3, [r0, #0]
     69e:	b10b      	cbz	r3, 6a4 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     6a0:	681a      	ldr	r2, [r3, #0]
     6a2:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     6a4:	4618      	mov	r0, r3
     6a6:	4770      	bx	lr

000006a8 <_write>:
int _write(int __fd, const void *__buf, size_t __nbyte );
int _read(int __fd, void *__buf, size_t __nbyte );

int _write(int __fd, const void *__buf, size_t __nbyte ){
	return 0;
}
     6a8:	2000      	movs	r0, #0
     6aa:	4770      	bx	lr

000006ac <_read>:

int _read(int __fd, void *__buf, size_t __nbyte ){
	return 0;
}
     6ac:	2000      	movs	r0, #0
     6ae:	4770      	bx	lr

000006b0 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     6b0:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     6b2:	4a06      	ldr	r2, [pc, #24]	; (6cc <_sbrk+0x1c>)
     6b4:	6812      	ldr	r2, [r2, #0]
     6b6:	b122      	cbz	r2, 6c2 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     6b8:	4a04      	ldr	r2, [pc, #16]	; (6cc <_sbrk+0x1c>)
     6ba:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     6bc:	4403      	add	r3, r0
     6be:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     6c0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     6c2:	4903      	ldr	r1, [pc, #12]	; (6d0 <_sbrk+0x20>)
     6c4:	4a01      	ldr	r2, [pc, #4]	; (6cc <_sbrk+0x1c>)
     6c6:	6011      	str	r1, [r2, #0]
     6c8:	e7f6      	b.n	6b8 <_sbrk+0x8>
     6ca:	bf00      	nop
     6cc:	200009e8 	.word	0x200009e8
     6d0:	2001fcc8 	.word	0x2001fcc8

000006d4 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     6d4:	f04f 30ff 	mov.w	r0, #4294967295
     6d8:	4770      	bx	lr

000006da <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     6da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     6de:	604b      	str	r3, [r1, #4]

	return 0;
}
     6e0:	2000      	movs	r0, #0
     6e2:	4770      	bx	lr

000006e4 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     6e4:	2001      	movs	r0, #1
     6e6:	4770      	bx	lr

000006e8 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     6e8:	2000      	movs	r0, #0
     6ea:	4770      	bx	lr

000006ec <_exit>:

/**
 * \brief Replacement of C library of _exit
 */
extern void _exit(int status)
{
     6ec:	b508      	push	{r3, lr}
	printf("Exiting with status %d.\n", status);
     6ee:	4601      	mov	r1, r0
     6f0:	4801      	ldr	r0, [pc, #4]	; (6f8 <_exit+0xc>)
     6f2:	4b02      	ldr	r3, [pc, #8]	; (6fc <_exit+0x10>)
     6f4:	4798      	blx	r3
     6f6:	e7fe      	b.n	6f6 <_exit+0xa>
     6f8:	0001b0d8 	.word	0x0001b0d8
     6fc:	000148f1 	.word	0x000148f1

00000700 <_kill>:

/**
 * \brief Replacement of C library of _kill
 */
extern void _kill(int pid, int sig)
{
     700:	4770      	bx	lr

00000702 <_getpid>:
 * \brief Replacement of C library of _getpid
 */
extern int _getpid(void)
{
	return -1;
}
     702:	f04f 30ff 	mov.w	r0, #4294967295
     706:	4770      	bx	lr

00000708 <_get_cycles_for_ms>:
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
     708:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
     70c:	0143      	lsls	r3, r0, #5
     70e:	3302      	adds	r3, #2
     710:	4803      	ldr	r0, [pc, #12]	; (720 <_get_cycles_for_ms+0x18>)
     712:	fba0 2303 	umull	r2, r3, r0, r3
     716:	085b      	lsrs	r3, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     718:	2064      	movs	r0, #100	; 0x64
     71a:	fb00 f003 	mul.w	r0, r0, r3
     71e:	4770      	bx	lr
     720:	aaaaaaab 	.word	0xaaaaaaab
     724:	00000000 	.word	0x00000000

00000728 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
     728:	3901      	subs	r1, #1
     72a:	d8fd      	bhi.n	728 <_delay_cycles>
     72c:	4770      	bx	lr
     72e:	bf00      	nop

00000730 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     730:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     732:	4a09      	ldr	r2, [pc, #36]	; (758 <_init_chip+0x28>)
     734:	8813      	ldrh	r3, [r2, #0]
     736:	b29b      	uxth	r3, r3
     738:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     73a:	4b08      	ldr	r3, [pc, #32]	; (75c <_init_chip+0x2c>)
     73c:	4798      	blx	r3
	_oscctrl_init_sources();
     73e:	4b08      	ldr	r3, [pc, #32]	; (760 <_init_chip+0x30>)
     740:	4798      	blx	r3
	_mclk_init();
     742:	4b08      	ldr	r3, [pc, #32]	; (764 <_init_chip+0x34>)
     744:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     746:	2008      	movs	r0, #8
     748:	4c07      	ldr	r4, [pc, #28]	; (768 <_init_chip+0x38>)
     74a:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
     74c:	4b07      	ldr	r3, [pc, #28]	; (76c <_init_chip+0x3c>)
     74e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     750:	f640 70f7 	movw	r0, #4087	; 0xff7
     754:	47a0      	blx	r4
     756:	bd10      	pop	{r4, pc}
     758:	41004000 	.word	0x41004000
     75c:	000007bd 	.word	0x000007bd
     760:	000007dd 	.word	0x000007dd
     764:	000007b1 	.word	0x000007b1
     768:	00000771 	.word	0x00000771
     76c:	000007e1 	.word	0x000007e1

00000770 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     770:	f010 0f01 	tst.w	r0, #1
     774:	d008      	beq.n	788 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL[index].reg = data;
     776:	4a0b      	ldr	r2, [pc, #44]	; (7a4 <_gclk_init_generators_by_fref+0x34>)
     778:	4b0b      	ldr	r3, [pc, #44]	; (7a8 <_gclk_init_generators_by_fref+0x38>)
     77a:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     77c:	4619      	mov	r1, r3
     77e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     782:	684b      	ldr	r3, [r1, #4]
     784:	4213      	tst	r3, r2
     786:	d1fc      	bne.n	782 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     788:	f010 0f08 	tst.w	r0, #8
     78c:	d008      	beq.n	7a0 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     78e:	4a07      	ldr	r2, [pc, #28]	; (7ac <_gclk_init_generators_by_fref+0x3c>)
     790:	4b05      	ldr	r3, [pc, #20]	; (7a8 <_gclk_init_generators_by_fref+0x38>)
     792:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     794:	4619      	mov	r1, r3
     796:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     79a:	684b      	ldr	r3, [r1, #4]
     79c:	4213      	tst	r3, r2
     79e:	d1fc      	bne.n	79a <_gclk_init_generators_by_fref+0x2a>
     7a0:	4770      	bx	lr
     7a2:	bf00      	nop
     7a4:	00010906 	.word	0x00010906
     7a8:	40001c00 	.word	0x40001c00
     7ac:	00010905 	.word	0x00010905

000007b0 <_mclk_init>:
}

static inline void hri_mclk_write_CPUDIV_reg(const void *const hw, hri_mclk_cpudiv_reg_t data)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->CPUDIV.reg = data;
     7b0:	2201      	movs	r2, #1
     7b2:	4b01      	ldr	r3, [pc, #4]	; (7b8 <_mclk_init+0x8>)
     7b4:	715a      	strb	r2, [r3, #5]
     7b6:	4770      	bx	lr
     7b8:	40000800 	.word	0x40000800

000007bc <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
     7bc:	4b06      	ldr	r3, [pc, #24]	; (7d8 <_osc32kctrl_init_sources+0x1c>)
     7be:	f242 028e 	movw	r2, #8334	; 0x208e
     7c2:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
     7c4:	2200      	movs	r2, #0
     7c6:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
     7c8:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     7ca:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     7cc:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     7d0:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     7d2:	2201      	movs	r2, #1
     7d4:	741a      	strb	r2, [r3, #16]
     7d6:	4770      	bx	lr
     7d8:	40001400 	.word	0x40001400

000007dc <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
     7dc:	4770      	bx	lr
	...

000007e0 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     7e0:	4a36      	ldr	r2, [pc, #216]	; (8bc <_oscctrl_init_referenced_generators+0xdc>)
     7e2:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     7e4:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     7e8:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     7ec:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     7ee:	4611      	mov	r1, r2
     7f0:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     7f4:	684b      	ldr	r3, [r1, #4]
     7f6:	4213      	tst	r3, r2
     7f8:	d1fc      	bne.n	7f4 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     7fa:	4a30      	ldr	r2, [pc, #192]	; (8bc <_oscctrl_init_referenced_generators+0xdc>)
     7fc:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     7fe:	f013 0f04 	tst.w	r3, #4
     802:	d1fb      	bne.n	7fc <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     804:	4b2e      	ldr	r3, [pc, #184]	; (8c0 <_oscctrl_init_referenced_generators+0xe0>)
     806:	2200      	movs	r2, #0
     808:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
     80a:	4a2e      	ldr	r2, [pc, #184]	; (8c4 <_oscctrl_init_referenced_generators+0xe4>)
     80c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     80e:	461a      	mov	r2, r3
     810:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
     814:	f013 0f10 	tst.w	r3, #16
     818:	d1fa      	bne.n	810 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     81a:	2200      	movs	r2, #0
     81c:	4b28      	ldr	r3, [pc, #160]	; (8c0 <_oscctrl_init_referenced_generators+0xe0>)
     81e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     822:	461a      	mov	r2, r3
     824:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     828:	f013 0f04 	tst.w	r3, #4
     82c:	d1fa      	bne.n	824 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     82e:	2202      	movs	r2, #2
     830:	4b23      	ldr	r3, [pc, #140]	; (8c0 <_oscctrl_init_referenced_generators+0xe0>)
     832:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     834:	461a      	mov	r2, r3
     836:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
     83a:	f013 0f02 	tst.w	r3, #2
     83e:	d1fa      	bne.n	836 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
     840:	4b1f      	ldr	r3, [pc, #124]	; (8c0 <_oscctrl_init_referenced_generators+0xe0>)
     842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
     844:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     846:	461a      	mov	r2, r3
     848:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
     84c:	f013 0f08 	tst.w	r3, #8
     850:	d1fa      	bne.n	848 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     852:	2280      	movs	r2, #128	; 0x80
     854:	4b1a      	ldr	r3, [pc, #104]	; (8c0 <_oscctrl_init_referenced_generators+0xe0>)
     856:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     85a:	461a      	mov	r2, r3
     85c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     860:	f013 0f04 	tst.w	r3, #4
     864:	d1fa      	bne.n	85c <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
     866:	4b16      	ldr	r3, [pc, #88]	; (8c0 <_oscctrl_init_referenced_generators+0xe0>)
     868:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
     86c:	f013 0f01 	tst.w	r3, #1
     870:	d01d      	beq.n	8ae <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
     872:	4a13      	ldr	r2, [pc, #76]	; (8c0 <_oscctrl_init_referenced_generators+0xe0>)
     874:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
     876:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
     87a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
     87e:	d1f9      	bne.n	874 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
     880:	4a0e      	ldr	r2, [pc, #56]	; (8bc <_oscctrl_init_referenced_generators+0xdc>)
     882:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
     884:	2b00      	cmp	r3, #0
     886:	d1fc      	bne.n	882 <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     888:	4a0c      	ldr	r2, [pc, #48]	; (8bc <_oscctrl_init_referenced_generators+0xdc>)
     88a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     88c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     890:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     894:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     896:	4611      	mov	r1, r2
     898:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     89c:	684b      	ldr	r3, [r1, #4]
     89e:	4213      	tst	r3, r2
     8a0:	d1fc      	bne.n	89c <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     8a2:	4a06      	ldr	r2, [pc, #24]	; (8bc <_oscctrl_init_referenced_generators+0xdc>)
     8a4:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     8a6:	f013 0f04 	tst.w	r3, #4
     8aa:	d1fb      	bne.n	8a4 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
     8ac:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
     8ae:	4a04      	ldr	r2, [pc, #16]	; (8c0 <_oscctrl_init_referenced_generators+0xe0>)
     8b0:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
     8b2:	f413 7f80 	tst.w	r3, #256	; 0x100
     8b6:	d0fb      	beq.n	8b0 <_oscctrl_init_referenced_generators+0xd0>
     8b8:	e7e2      	b.n	880 <_oscctrl_init_referenced_generators+0xa0>
     8ba:	bf00      	nop
     8bc:	40001c00 	.word	0x40001c00
     8c0:	40001000 	.word	0x40001000
     8c4:	04010000 	.word	0x04010000

000008c8 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     8c8:	b500      	push	{lr}
     8ca:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     8cc:	4b0d      	ldr	r3, [pc, #52]	; (904 <RAMECC_Handler+0x3c>)
     8ce:	789b      	ldrb	r3, [r3, #2]
     8d0:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     8d2:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     8d4:	9b01      	ldr	r3, [sp, #4]
     8d6:	f013 0f02 	tst.w	r3, #2
     8da:	d006      	beq.n	8ea <RAMECC_Handler+0x22>
     8dc:	4b0a      	ldr	r3, [pc, #40]	; (908 <RAMECC_Handler+0x40>)
     8de:	681b      	ldr	r3, [r3, #0]
     8e0:	b11b      	cbz	r3, 8ea <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     8e2:	4a08      	ldr	r2, [pc, #32]	; (904 <RAMECC_Handler+0x3c>)
     8e4:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     8e6:	4798      	blx	r3
     8e8:	e009      	b.n	8fe <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     8ea:	9b01      	ldr	r3, [sp, #4]
     8ec:	f013 0f01 	tst.w	r3, #1
     8f0:	d005      	beq.n	8fe <RAMECC_Handler+0x36>
     8f2:	4b05      	ldr	r3, [pc, #20]	; (908 <RAMECC_Handler+0x40>)
     8f4:	685b      	ldr	r3, [r3, #4]
     8f6:	b113      	cbz	r3, 8fe <RAMECC_Handler+0x36>
     8f8:	4a02      	ldr	r2, [pc, #8]	; (904 <RAMECC_Handler+0x3c>)
     8fa:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     8fc:	4798      	blx	r3
	} else {
		return;
	}
}
     8fe:	b003      	add	sp, #12
     900:	f85d fb04 	ldr.w	pc, [sp], #4
     904:	41020000 	.word	0x41020000
     908:	2000fc64 	.word	0x2000fc64

0000090c <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
     90c:	b538      	push	{r3, r4, r5, lr}
     90e:	460c      	mov	r4, r1
	ASSERT(dev);
     910:	4605      	mov	r5, r0
     912:	2230      	movs	r2, #48	; 0x30
     914:	4914      	ldr	r1, [pc, #80]	; (968 <_timer_init+0x5c>)
     916:	3000      	adds	r0, #0
     918:	bf18      	it	ne
     91a:	2001      	movne	r0, #1
     91c:	4b13      	ldr	r3, [pc, #76]	; (96c <_timer_init+0x60>)
     91e:	4798      	blx	r3

	dev->hw = hw;
     920:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
     922:	2301      	movs	r3, #1
     924:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     926:	f248 0203 	movw	r2, #32771	; 0x8003
     92a:	6923      	ldr	r3, [r4, #16]
     92c:	4213      	tst	r3, r2
     92e:	d1fc      	bne.n	92a <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
     930:	68eb      	ldr	r3, [r5, #12]
     932:	691a      	ldr	r2, [r3, #16]
     934:	f012 0f01 	tst.w	r2, #1
     938:	d1fb      	bne.n	932 <_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
     93a:	f248 0280 	movw	r2, #32896	; 0x8080
     93e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     940:	f248 0103 	movw	r1, #32771	; 0x8003
     944:	691a      	ldr	r2, [r3, #16]
     946:	420a      	tst	r2, r1
     948:	d1fc      	bne.n	944 <_timer_init+0x38>
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
     94a:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
     94c:	2320      	movs	r3, #32
     94e:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     950:	6913      	ldr	r3, [r2, #16]
     952:	f013 0f60 	tst.w	r3, #96	; 0x60
     956:	d1fb      	bne.n	950 <_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
     958:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     95a:	f44f 7280 	mov.w	r2, #256	; 0x100
     95e:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
     960:	4b03      	ldr	r3, [pc, #12]	; (970 <_timer_init+0x64>)
     962:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
     964:	2000      	movs	r0, #0
     966:	bd38      	pop	{r3, r4, r5, pc}
     968:	0001b0f4 	.word	0x0001b0f4
     96c:	00000641 	.word	0x00000641
     970:	200009ec 	.word	0x200009ec

00000974 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
     974:	2000      	movs	r0, #0
     976:	4770      	bx	lr

00000978 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     978:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
     97a:	4b08      	ldr	r3, [pc, #32]	; (99c <RTC_Handler+0x24>)
     97c:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
     97e:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     980:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
     982:	f413 7f80 	tst.w	r3, #256	; 0x100
     986:	d007      	beq.n	998 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
     988:	6823      	ldr	r3, [r4, #0]
     98a:	b10b      	cbz	r3, 990 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
     98c:	4620      	mov	r0, r4
     98e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     990:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     992:	f44f 7280 	mov.w	r2, #256	; 0x100
     996:	819a      	strh	r2, [r3, #12]
     998:	bd10      	pop	{r4, pc}
     99a:	bf00      	nop
     99c:	200009ec 	.word	0x200009ec

000009a0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     9a0:	b470      	push	{r4, r5, r6}
     9a2:	b089      	sub	sp, #36	; 0x24
     9a4:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     9a6:	466c      	mov	r4, sp
     9a8:	4d0d      	ldr	r5, [pc, #52]	; (9e0 <_sercom_get_hardware_index+0x40>)
     9aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     9ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     9ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     9b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     9b6:	9b00      	ldr	r3, [sp, #0]
     9b8:	42b3      	cmp	r3, r6
     9ba:	d00d      	beq.n	9d8 <_sercom_get_hardware_index+0x38>
     9bc:	4631      	mov	r1, r6
     9be:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9c0:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     9c2:	f853 2b04 	ldr.w	r2, [r3], #4
     9c6:	428a      	cmp	r2, r1
     9c8:	d007      	beq.n	9da <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9ca:	3001      	adds	r0, #1
     9cc:	2808      	cmp	r0, #8
     9ce:	d1f8      	bne.n	9c2 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
     9d0:	2000      	movs	r0, #0
}
     9d2:	b009      	add	sp, #36	; 0x24
     9d4:	bc70      	pop	{r4, r5, r6}
     9d6:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9d8:	2000      	movs	r0, #0
			return i;
     9da:	b2c0      	uxtb	r0, r0
     9dc:	e7f9      	b.n	9d2 <_sercom_get_hardware_index+0x32>
     9de:	bf00      	nop
     9e0:	0001b10c 	.word	0x0001b10c

000009e4 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     9e4:	b510      	push	{r4, lr}
     9e6:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     9e8:	4b21      	ldr	r3, [pc, #132]	; (a70 <_usart_init+0x8c>)
     9ea:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
     9ec:	2804      	cmp	r0, #4
     9ee:	d005      	beq.n	9fc <_usart_init+0x18>
	ASSERT(false);
     9f0:	f240 2247 	movw	r2, #583	; 0x247
     9f4:	491f      	ldr	r1, [pc, #124]	; (a74 <_usart_init+0x90>)
     9f6:	2000      	movs	r0, #0
     9f8:	4b1f      	ldr	r3, [pc, #124]	; (a78 <_usart_init+0x94>)
     9fa:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     9fc:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     9fe:	f013 0f01 	tst.w	r3, #1
     a02:	d119      	bne.n	a38 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a04:	69e3      	ldr	r3, [r4, #28]
     a06:	f013 0f03 	tst.w	r3, #3
     a0a:	d1fb      	bne.n	a04 <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     a0c:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     a0e:	f013 0f02 	tst.w	r3, #2
     a12:	d00b      	beq.n	a2c <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     a14:	6823      	ldr	r3, [r4, #0]
     a16:	f023 0302 	bic.w	r3, r3, #2
     a1a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a1c:	69e3      	ldr	r3, [r4, #28]
     a1e:	f013 0f03 	tst.w	r3, #3
     a22:	d1fb      	bne.n	a1c <_usart_init+0x38>
     a24:	69e3      	ldr	r3, [r4, #28]
     a26:	f013 0f02 	tst.w	r3, #2
     a2a:	d1fb      	bne.n	a24 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     a2c:	2305      	movs	r3, #5
     a2e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a30:	69e3      	ldr	r3, [r4, #28]
     a32:	f013 0f03 	tst.w	r3, #3
     a36:	d1fb      	bne.n	a30 <_usart_init+0x4c>
     a38:	69e3      	ldr	r3, [r4, #28]
     a3a:	f013 0f01 	tst.w	r3, #1
     a3e:	d1fb      	bne.n	a38 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     a40:	4b0e      	ldr	r3, [pc, #56]	; (a7c <_usart_init+0x98>)
     a42:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a44:	69e3      	ldr	r3, [r4, #28]
     a46:	f013 0f03 	tst.w	r3, #3
     a4a:	d1fb      	bne.n	a44 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     a4c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
     a50:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a52:	69e3      	ldr	r3, [r4, #28]
     a54:	f013 0f1f 	tst.w	r3, #31
     a58:	d1fb      	bne.n	a52 <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
     a5a:	4b09      	ldr	r3, [pc, #36]	; (a80 <_usart_init+0x9c>)
     a5c:	60a3      	str	r3, [r4, #8]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     a5e:	f24f 632b 	movw	r3, #63019	; 0xf62b
     a62:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     a64:	2000      	movs	r0, #0
     a66:	73a0      	strb	r0, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     a68:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
     a6c:	bd10      	pop	{r4, pc}
     a6e:	bf00      	nop
     a70:	000009a1 	.word	0x000009a1
     a74:	0001b144 	.word	0x0001b144
     a78:	00000641 	.word	0x00000641
     a7c:	40100004 	.word	0x40100004
     a80:	00700002 	.word	0x00700002

00000a84 <_usart_sync_init>:
{
     a84:	b538      	push	{r3, r4, r5, lr}
     a86:	460c      	mov	r4, r1
	ASSERT(device);
     a88:	4605      	mov	r5, r0
     a8a:	22bb      	movs	r2, #187	; 0xbb
     a8c:	4905      	ldr	r1, [pc, #20]	; (aa4 <_usart_sync_init+0x20>)
     a8e:	3000      	adds	r0, #0
     a90:	bf18      	it	ne
     a92:	2001      	movne	r0, #1
     a94:	4b04      	ldr	r3, [pc, #16]	; (aa8 <_usart_sync_init+0x24>)
     a96:	4798      	blx	r3
	device->hw = hw;
     a98:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     a9a:	4620      	mov	r0, r4
     a9c:	4b03      	ldr	r3, [pc, #12]	; (aac <_usart_sync_init+0x28>)
     a9e:	4798      	blx	r3
}
     aa0:	bd38      	pop	{r3, r4, r5, pc}
     aa2:	bf00      	nop
     aa4:	0001b144 	.word	0x0001b144
     aa8:	00000641 	.word	0x00000641
     aac:	000009e5 	.word	0x000009e5

00000ab0 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     ab0:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     ab2:	6813      	ldr	r3, [r2, #0]
     ab4:	f043 0302 	orr.w	r3, r3, #2
     ab8:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     aba:	69d3      	ldr	r3, [r2, #28]
     abc:	f013 0f03 	tst.w	r3, #3
     ac0:	d1fb      	bne.n	aba <_usart_sync_enable+0xa>
}
     ac2:	4770      	bx	lr

00000ac4 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     ac4:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
     ac6:	6299      	str	r1, [r3, #40]	; 0x28
     ac8:	4770      	bx	lr

00000aca <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     aca:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     acc:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
     ace:	b2c0      	uxtb	r0, r0
     ad0:	4770      	bx	lr

00000ad2 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     ad2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     ad4:	7e18      	ldrb	r0, [r3, #24]
}
     ad6:	f000 0001 	and.w	r0, r0, #1
     ada:	4770      	bx	lr

00000adc <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     adc:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     ade:	7e18      	ldrb	r0, [r3, #24]
}
     ae0:	f3c0 0040 	ubfx	r0, r0, #1, #1
     ae4:	4770      	bx	lr

00000ae6 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     ae6:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     ae8:	7e18      	ldrb	r0, [r3, #24]
}
     aea:	f3c0 0080 	ubfx	r0, r0, #2, #1
     aee:	4770      	bx	lr

00000af0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     af0:	b508      	push	{r3, lr}
	system_init();
     af2:	4b01      	ldr	r3, [pc, #4]	; (af8 <atmel_start_init+0x8>)
     af4:	4798      	blx	r3
     af6:	bd08      	pop	{r3, pc}
     af8:	00000b91 	.word	0x00000b91

00000afc <USART_0_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     afc:	4b10      	ldr	r3, [pc, #64]	; (b40 <USART_0_PORT_init+0x44>)
     afe:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     b02:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b06:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b0a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b0e:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b12:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b16:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b1a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b1e:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     b22:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b26:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b2a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b2e:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b32:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b36:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b3a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     b3e:	4770      	bx	lr
     b40:	41008000 	.word	0x41008000

00000b44 <USART_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     b44:	4b06      	ldr	r3, [pc, #24]	; (b60 <USART_0_CLOCK_init+0x1c>)
     b46:	2240      	movs	r2, #64	; 0x40
     b48:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     b4c:	2243      	movs	r2, #67	; 0x43
     b4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     b52:	4a04      	ldr	r2, [pc, #16]	; (b64 <USART_0_CLOCK_init+0x20>)
     b54:	6a13      	ldr	r3, [r2, #32]
     b56:	f043 0301 	orr.w	r3, r3, #1
     b5a:	6213      	str	r3, [r2, #32]
     b5c:	4770      	bx	lr
     b5e:	bf00      	nop
     b60:	40001c00 	.word	0x40001c00
     b64:	40000800 	.word	0x40000800

00000b68 <USART_0_init>:

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}

void USART_0_init(void)
{
     b68:	b508      	push	{r3, lr}
	USART_0_CLOCK_init();
     b6a:	4b05      	ldr	r3, [pc, #20]	; (b80 <USART_0_init+0x18>)
     b6c:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM4, (void *)NULL);
     b6e:	2200      	movs	r2, #0
     b70:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     b74:	4803      	ldr	r0, [pc, #12]	; (b84 <USART_0_init+0x1c>)
     b76:	4b04      	ldr	r3, [pc, #16]	; (b88 <USART_0_init+0x20>)
     b78:	4798      	blx	r3
	USART_0_PORT_init();
     b7a:	4b04      	ldr	r3, [pc, #16]	; (b8c <USART_0_init+0x24>)
     b7c:	4798      	blx	r3
     b7e:	bd08      	pop	{r3, pc}
     b80:	00000b45 	.word	0x00000b45
     b84:	2000fc90 	.word	0x2000fc90
     b88:	000005a5 	.word	0x000005a5
     b8c:	00000afd 	.word	0x00000afd

00000b90 <system_init>:
}

void system_init(void)
{
     b90:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     b92:	4b12      	ldr	r3, [pc, #72]	; (bdc <system_init+0x4c>)
     b94:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b96:	4b12      	ldr	r3, [pc, #72]	; (be0 <system_init+0x50>)
     b98:	2202      	movs	r2, #2
     b9a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ba2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     ba6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     baa:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     bae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bb2:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     bb6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bba:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     bbe:	4a09      	ldr	r2, [pc, #36]	; (be4 <system_init+0x54>)
     bc0:	6953      	ldr	r3, [r2, #20]
     bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     bc6:	6153      	str	r3, [r2, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     bc8:	4b07      	ldr	r3, [pc, #28]	; (be8 <system_init+0x58>)
     bca:	4798      	blx	r3
     bcc:	4602      	mov	r2, r0
     bce:	4907      	ldr	r1, [pc, #28]	; (bec <system_init+0x5c>)
     bd0:	4807      	ldr	r0, [pc, #28]	; (bf0 <system_init+0x60>)
     bd2:	4b08      	ldr	r3, [pc, #32]	; (bf4 <system_init+0x64>)
     bd4:	4798      	blx	r3

	gpio_set_pin_function(LED, GPIO_PIN_FUNCTION_OFF);

	TIMER_0_init();

	USART_0_init();
     bd6:	4b08      	ldr	r3, [pc, #32]	; (bf8 <system_init+0x68>)
     bd8:	4798      	blx	r3
     bda:	bd08      	pop	{r3, pc}
     bdc:	00000731 	.word	0x00000731
     be0:	41008000 	.word	0x41008000
     be4:	40000800 	.word	0x40000800
     be8:	00000975 	.word	0x00000975
     bec:	40002400 	.word	0x40002400
     bf0:	2000fc74 	.word	0x2000fc74
     bf4:	00000495 	.word	0x00000495
     bf8:	00000b69 	.word	0x00000b69

00000bfc <_Z8USART_0_v>:
		delay_ms(100);
	}
}

void USART_0_(void)
{
     bfc:	b510      	push	{r4, lr}
	usart_sync_get_io_descriptor(&USART_0, &io);
     bfe:	4c04      	ldr	r4, [pc, #16]	; (c10 <_Z8USART_0_v+0x14>)
     c00:	4904      	ldr	r1, [pc, #16]	; (c14 <_Z8USART_0_v+0x18>)
     c02:	4620      	mov	r0, r4
     c04:	4b04      	ldr	r3, [pc, #16]	; (c18 <_Z8USART_0_v+0x1c>)
     c06:	4798      	blx	r3
	usart_sync_enable(&USART_0);
     c08:	4620      	mov	r0, r4
     c0a:	4b04      	ldr	r3, [pc, #16]	; (c1c <_Z8USART_0_v+0x20>)
     c0c:	4798      	blx	r3
     c0e:	bd10      	pop	{r4, pc}
     c10:	2000fc90 	.word	0x2000fc90
     c14:	200009f0 	.word	0x200009f0
     c18:	00000619 	.word	0x00000619
     c1c:	000005ed 	.word	0x000005ed

00000c20 <main>:
{
     c20:	b508      	push	{r3, lr}
	atmel_start_init();
     c22:	4b0b      	ldr	r3, [pc, #44]	; (c50 <main+0x30>)
     c24:	4798      	blx	r3
	USART_0_();
     c26:	4b0b      	ldr	r3, [pc, #44]	; (c54 <main+0x34>)
     c28:	4798      	blx	r3
	setup_inference();
     c2a:	4b0b      	ldr	r3, [pc, #44]	; (c58 <main+0x38>)
     c2c:	4798      	blx	r3
		run_inference();
     c2e:	4e0b      	ldr	r6, [pc, #44]	; (c5c <main+0x3c>)
		io_write(io, (uint8_t *)"Toggle LED!\n", 12);
     c30:	4d0b      	ldr	r5, [pc, #44]	; (c60 <main+0x40>)
     c32:	4c0c      	ldr	r4, [pc, #48]	; (c64 <main+0x44>)
		run_inference();
     c34:	47b0      	blx	r6
		io_write(io, (uint8_t *)"Toggle LED!\n", 12);
     c36:	220c      	movs	r2, #12
     c38:	4629      	mov	r1, r5
     c3a:	6820      	ldr	r0, [r4, #0]
     c3c:	4b0a      	ldr	r3, [pc, #40]	; (c68 <main+0x48>)
     c3e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     c40:	2202      	movs	r2, #2
     c42:	4b0a      	ldr	r3, [pc, #40]	; (c6c <main+0x4c>)
     c44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		delay_ms(100);
     c48:	2064      	movs	r0, #100	; 0x64
     c4a:	4b09      	ldr	r3, [pc, #36]	; (c70 <main+0x50>)
     c4c:	4798      	blx	r3
     c4e:	e7f1      	b.n	c34 <main+0x14>
     c50:	00000af1 	.word	0x00000af1
     c54:	00000bfd 	.word	0x00000bfd
     c58:	00000d6d 	.word	0x00000d6d
     c5c:	00001175 	.word	0x00001175
     c60:	0001fe00 	.word	0x0001fe00
     c64:	200009f0 	.word	0x200009f0
     c68:	0000038d 	.word	0x0000038d
     c6c:	41008000 	.word	0x41008000
     c70:	0000036d 	.word	0x0000036d

00000c74 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
     c74:	b508      	push	{r3, lr}
                                   int version) const final {
    return FindOp(op);
     c76:	6803      	ldr	r3, [r0, #0]
     c78:	691b      	ldr	r3, [r3, #16]
     c7a:	4798      	blx	r3
  }
     c7c:	bd08      	pop	{r3, pc}

00000c7e <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
     c7e:	b508      	push	{r3, lr}
    return FindOp(op);
     c80:	6803      	ldr	r3, [r0, #0]
     c82:	695b      	ldr	r3, [r3, #20]
     c84:	4798      	blx	r3
  }
     c86:	bd08      	pop	{r3, pc}

00000c88 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE>:
 public:
  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
      : error_reporter_(error_reporter) {}

  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
    if (op == BuiltinOperator_CUSTOM) return nullptr;
     c88:	2920      	cmp	r1, #32
     c8a:	d019      	beq.n	cc0 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x38>
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
     c8c:	b430      	push	{r4, r5}

    for (unsigned int i = 0; i < registrations_len_; ++i) {
     c8e:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
     c92:	b1bc      	cbz	r4, cc4 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x3c>
      const TfLiteRegistration& registration = registrations_[i];
      if (registration.builtin_code == op) {
     c94:	460d      	mov	r5, r1
     c96:	6983      	ldr	r3, [r0, #24]
     c98:	428b      	cmp	r3, r1
     c9a:	d00c      	beq.n	cb6 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x2e>
     c9c:	4602      	mov	r2, r0
     c9e:	2300      	movs	r3, #0
    for (unsigned int i = 0; i < registrations_len_; ++i) {
     ca0:	3301      	adds	r3, #1
     ca2:	42a3      	cmp	r3, r4
     ca4:	d009      	beq.n	cba <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x32>
     ca6:	3220      	adds	r2, #32
      if (registration.builtin_code == op) {
     ca8:	6991      	ldr	r1, [r2, #24]
     caa:	42a9      	cmp	r1, r5
     cac:	d1f8      	bne.n	ca0 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x18>
      const TfLiteRegistration& registration = registrations_[i];
     cae:	eb00 1043 	add.w	r0, r0, r3, lsl #5
     cb2:	3004      	adds	r0, #4
     cb4:	e002      	b.n	cbc <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x34>
     cb6:	3004      	adds	r0, #4
     cb8:	e000      	b.n	cbc <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x34>
        return &registration;
      }
    }
    return nullptr;
     cba:	2000      	movs	r0, #0
  }
     cbc:	bc30      	pop	{r4, r5}
     cbe:	4770      	bx	lr
    if (op == BuiltinOperator_CUSTOM) return nullptr;
     cc0:	2000      	movs	r0, #0
     cc2:	4770      	bx	lr
    return nullptr;
     cc4:	2000      	movs	r0, #0
     cc6:	e7f9      	b.n	cbc <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x34>

00000cc8 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
     cc8:	4770      	bx	lr
	...

00000ccc <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE>:
      }
    }
    return nullptr;
  }

  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
     ccc:	b538      	push	{r3, r4, r5, lr}
      BuiltinOperator op) const override {
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
     cce:	f8d0 50c4 	ldr.w	r5, [r0, #196]	; 0xc4
     cd2:	2d05      	cmp	r5, #5
     cd4:	d812      	bhi.n	cfc <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x30>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
     cd6:	b1bd      	cbz	r5, d08 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x3c>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
     cd8:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
     cdc:	428b      	cmp	r3, r1
     cde:	d00f      	beq.n	d00 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x34>
     ce0:	f100 02a9 	add.w	r2, r0, #169	; 0xa9
     ce4:	2300      	movs	r3, #0
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
     ce6:	3301      	adds	r3, #1
     ce8:	429d      	cmp	r5, r3
     cea:	d00b      	beq.n	d04 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x38>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
     cec:	f812 4b01 	ldrb.w	r4, [r2], #1
     cf0:	428c      	cmp	r4, r1
     cf2:	d1f8      	bne.n	ce6 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x1a>
     cf4:	332c      	adds	r3, #44	; 0x2c
     cf6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
     cfa:	bd38      	pop	{r3, r4, r5, pc}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
     cfc:	4b03      	ldr	r3, [pc, #12]	; (d0c <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x40>)
     cfe:	4798      	blx	r3
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
     d00:	2300      	movs	r3, #0
     d02:	e7f7      	b.n	cf4 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x28>
    }
    return nullptr;
     d04:	2000      	movs	r0, #0
     d06:	bd38      	pop	{r3, r4, r5, pc}
     d08:	2000      	movs	r0, #0
  }
     d0a:	bd38      	pop	{r3, r4, r5, pc}
     d0c:	000138bd 	.word	0x000138bd

00000d10 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
     d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
     d14:	f8d0 60a4 	ldr.w	r6, [r0, #164]	; 0xa4
     d18:	b1ce      	cbz	r6, d4e <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x3e>
     d1a:	4689      	mov	r9, r1
     d1c:	4680      	mov	r8, r0
     d1e:	4604      	mov	r4, r0
     d20:	2500      	movs	r5, #0
          (strcmp(registration.custom_name, op) == 0)) {
     d22:	4f0c      	ldr	r7, [pc, #48]	; (d54 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x44>)
     d24:	e003      	b.n	d2e <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x1e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
     d26:	3501      	adds	r5, #1
     d28:	3420      	adds	r4, #32
     d2a:	42b5      	cmp	r5, r6
     d2c:	d00c      	beq.n	d48 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x38>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
     d2e:	69a3      	ldr	r3, [r4, #24]
     d30:	2b20      	cmp	r3, #32
     d32:	d1f8      	bne.n	d26 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x16>
          (strcmp(registration.custom_name, op) == 0)) {
     d34:	4649      	mov	r1, r9
     d36:	69e0      	ldr	r0, [r4, #28]
     d38:	47b8      	blx	r7
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
     d3a:	2800      	cmp	r0, #0
     d3c:	d1f3      	bne.n	d26 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x16>
      const TfLiteRegistration& registration = registrations_[i];
     d3e:	eb08 1045 	add.w	r0, r8, r5, lsl #5
     d42:	3004      	adds	r0, #4
     d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return nullptr;
     d48:	2000      	movs	r0, #0
     d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     d4e:	2000      	movs	r0, #0
  }
     d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     d54:	00014e89 	.word	0x00014e89

00000d58 <_ZN6tflite22MicroMutableOpResolverILj5EED0Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
     d58:	b510      	push	{r4, lr}
     d5a:	4604      	mov	r4, r0
     d5c:	21cc      	movs	r1, #204	; 0xcc
     d5e:	4b02      	ldr	r3, [pc, #8]	; (d68 <_ZN6tflite22MicroMutableOpResolverILj5EED0Ev+0x10>)
     d60:	4798      	blx	r3
     d62:	4620      	mov	r0, r4
     d64:	bd10      	pop	{r4, pc}
     d66:	bf00      	nop
     d68:	000091dd 	.word	0x000091dd

00000d6c <_Z15setup_inferencev>:
// The size of this will depend on the model you're using, and may need to be
// determined by experimentation.
constexpr int kTensorArenaSize = 60 * 1024; // I think it will need more but we'll see
uint8_t tensor_arena[kTensorArenaSize];

void setup_inference() {
     d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d6e:	b08d      	sub	sp, #52	; 0x34
//  static tflite::MicroErrorReporter micro_error_reporter;  // NOLINT
//  error_reporter = &micro_error_reporter;

  // Map the model into a usable data structure. This doesn't involve any
  // copying or parsing, it's a very lightweight operation.
  model = tflite::GetModel(g_magic_wand_model_data);
     d70:	4aa3      	ldr	r2, [pc, #652]	; (1000 <_Z15setup_inferencev+0x294>)
// Helpers to get a typed pointer to the root object contained in the buffer.
template<typename T> T *GetMutableRoot(void *buf) {
  EndianCheck();
  return reinterpret_cast<T *>(
      reinterpret_cast<uint8_t *>(buf) +
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
     d72:	49a4      	ldr	r1, [pc, #656]	; (1004 <_Z15setup_inferencev+0x298>)
     d74:	680b      	ldr	r3, [r1, #0]
     d76:	440b      	add	r3, r1
     d78:	6013      	str	r3, [r2, #0]
  // Pull in only the operation implementations we need.
  // This relies on a complete list of all the ops needed by this graph.
  // An easier approach is to just use the AllOpsResolver, but this will
  // incur some penalty in code space for op implementations that are not
  // needed by this graph.
  static tflite::MicroMutableOpResolver<5> micro_op_resolver;  // NOLINT
     d7a:	7913      	ldrb	r3, [r2, #4]
     d7c:	f3bf 8f5b 	dmb	ish
     d80:	f013 0f01 	tst.w	r3, #1
     d84:	f000 8081 	beq.w	e8a <_Z15setup_inferencev+0x11e>
                      ParseConcatenation);
  }

  TfLiteStatus AddConv2D() {
    return AddBuiltin(BuiltinOperator_CONV_2D,
                      tflite::ops::micro::Register_CONV_2D(), ParseConv2D);
     d88:	a804      	add	r0, sp, #16
     d8a:	4b9f      	ldr	r3, [pc, #636]	; (1008 <_Z15setup_inferencev+0x29c>)
     d8c:	4798      	blx	r3
                             "AddBuiltin function.");
      }
      return kTfLiteError;
    }

    if (FindOp(op) != nullptr) {
     d8e:	489c      	ldr	r0, [pc, #624]	; (1000 <_Z15setup_inferencev+0x294>)
     d90:	6883      	ldr	r3, [r0, #8]
     d92:	691b      	ldr	r3, [r3, #16]
     d94:	2103      	movs	r1, #3
     d96:	3008      	adds	r0, #8
     d98:	4798      	blx	r3
     d9a:	2800      	cmp	r0, #0
     d9c:	f000 808f 	beq.w	ebe <_Z15setup_inferencev+0x152>
      if (error_reporter_ != nullptr) {
     da0:	4b97      	ldr	r3, [pc, #604]	; (1000 <_Z15setup_inferencev+0x294>)
     da2:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
     da6:	b118      	cbz	r0, db0 <_Z15setup_inferencev+0x44>
        TF_LITE_REPORT_ERROR(error_reporter_,
     da8:	2203      	movs	r2, #3
     daa:	4998      	ldr	r1, [pc, #608]	; (100c <_Z15setup_inferencev+0x2a0>)
     dac:	4b98      	ldr	r3, [pc, #608]	; (1010 <_Z15setup_inferencev+0x2a4>)
     dae:	4798      	blx	r3
                      tflite::ops::micro::Register_FULLY_CONNECTED(),
     db0:	a804      	add	r0, sp, #16
     db2:	4b98      	ldr	r3, [pc, #608]	; (1014 <_Z15setup_inferencev+0x2a8>)
     db4:	4798      	blx	r3
    if (FindOp(op) != nullptr) {
     db6:	4892      	ldr	r0, [pc, #584]	; (1000 <_Z15setup_inferencev+0x294>)
     db8:	6883      	ldr	r3, [r0, #8]
     dba:	691b      	ldr	r3, [r3, #16]
     dbc:	2109      	movs	r1, #9
     dbe:	3008      	adds	r0, #8
     dc0:	4798      	blx	r3
     dc2:	2800      	cmp	r0, #0
     dc4:	f000 80ab 	beq.w	f1e <_Z15setup_inferencev+0x1b2>
      if (error_reporter_ != nullptr) {
     dc8:	4b8d      	ldr	r3, [pc, #564]	; (1000 <_Z15setup_inferencev+0x294>)
     dca:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
     dce:	b118      	cbz	r0, dd8 <_Z15setup_inferencev+0x6c>
        TF_LITE_REPORT_ERROR(error_reporter_,
     dd0:	2209      	movs	r2, #9
     dd2:	498e      	ldr	r1, [pc, #568]	; (100c <_Z15setup_inferencev+0x2a0>)
     dd4:	4b8e      	ldr	r3, [pc, #568]	; (1010 <_Z15setup_inferencev+0x2a4>)
     dd6:	4798      	blx	r3
    return AddBuiltin(BuiltinOperator_RELU, tflite::ops::micro::Register_RELU(),
     dd8:	a804      	add	r0, sp, #16
     dda:	4b8f      	ldr	r3, [pc, #572]	; (1018 <_Z15setup_inferencev+0x2ac>)
     ddc:	4798      	blx	r3
    if (FindOp(op) != nullptr) {
     dde:	4888      	ldr	r0, [pc, #544]	; (1000 <_Z15setup_inferencev+0x294>)
     de0:	6883      	ldr	r3, [r0, #8]
     de2:	691b      	ldr	r3, [r3, #16]
     de4:	2113      	movs	r1, #19
     de6:	3008      	adds	r0, #8
     de8:	4798      	blx	r3
     dea:	2800      	cmp	r0, #0
     dec:	f000 80c7 	beq.w	f7e <_Z15setup_inferencev+0x212>
      if (error_reporter_ != nullptr) {
     df0:	4b83      	ldr	r3, [pc, #524]	; (1000 <_Z15setup_inferencev+0x294>)
     df2:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
     df6:	b118      	cbz	r0, e00 <_Z15setup_inferencev+0x94>
        TF_LITE_REPORT_ERROR(error_reporter_,
     df8:	2213      	movs	r2, #19
     dfa:	4984      	ldr	r1, [pc, #528]	; (100c <_Z15setup_inferencev+0x2a0>)
     dfc:	4b84      	ldr	r3, [pc, #528]	; (1010 <_Z15setup_inferencev+0x2a4>)
     dfe:	4798      	blx	r3
                      tflite::ops::micro::Register_MAX_POOL_2D(), ParsePool);
     e00:	a804      	add	r0, sp, #16
     e02:	4b86      	ldr	r3, [pc, #536]	; (101c <_Z15setup_inferencev+0x2b0>)
     e04:	4798      	blx	r3
    if (FindOp(op) != nullptr) {
     e06:	487e      	ldr	r0, [pc, #504]	; (1000 <_Z15setup_inferencev+0x294>)
     e08:	6883      	ldr	r3, [r0, #8]
     e0a:	691b      	ldr	r3, [r3, #16]
     e0c:	2111      	movs	r1, #17
     e0e:	3008      	adds	r0, #8
     e10:	4798      	blx	r3
     e12:	2800      	cmp	r0, #0
     e14:	f000 80e3 	beq.w	fde <_Z15setup_inferencev+0x272>
      if (error_reporter_ != nullptr) {
     e18:	4b79      	ldr	r3, [pc, #484]	; (1000 <_Z15setup_inferencev+0x294>)
     e1a:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
     e1e:	b118      	cbz	r0, e28 <_Z15setup_inferencev+0xbc>
        TF_LITE_REPORT_ERROR(error_reporter_,
     e20:	2211      	movs	r2, #17
     e22:	497a      	ldr	r1, [pc, #488]	; (100c <_Z15setup_inferencev+0x2a0>)
     e24:	4b7a      	ldr	r3, [pc, #488]	; (1010 <_Z15setup_inferencev+0x2a4>)
     e26:	4798      	blx	r3
                      tflite::ops::micro::Register_SOFTMAX(), ParseSoftmax);
     e28:	a804      	add	r0, sp, #16
     e2a:	4b7d      	ldr	r3, [pc, #500]	; (1020 <_Z15setup_inferencev+0x2b4>)
     e2c:	4798      	blx	r3
    if (FindOp(op) != nullptr) {
     e2e:	4874      	ldr	r0, [pc, #464]	; (1000 <_Z15setup_inferencev+0x294>)
     e30:	6883      	ldr	r3, [r0, #8]
     e32:	691b      	ldr	r3, [r3, #16]
     e34:	2119      	movs	r1, #25
     e36:	3008      	adds	r0, #8
     e38:	4798      	blx	r3
     e3a:	2800      	cmp	r0, #0
     e3c:	f000 812c 	beq.w	1098 <_Z15setup_inferencev+0x32c>
      if (error_reporter_ != nullptr) {
     e40:	4b6f      	ldr	r3, [pc, #444]	; (1000 <_Z15setup_inferencev+0x294>)
     e42:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
     e46:	b118      	cbz	r0, e50 <_Z15setup_inferencev+0xe4>
        TF_LITE_REPORT_ERROR(error_reporter_,
     e48:	2219      	movs	r2, #25
     e4a:	4970      	ldr	r1, [pc, #448]	; (100c <_Z15setup_inferencev+0x2a0>)
     e4c:	4b70      	ldr	r3, [pc, #448]	; (1010 <_Z15setup_inferencev+0x2a4>)
     e4e:	4798      	blx	r3
  micro_op_resolver.AddSoftmax();
  //BatchNorm is not included in the set of compatible resolver

  // Build an interpreter to run the model with.
  static tflite::MicroInterpreter static_interpreter(
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
     e50:	4b6b      	ldr	r3, [pc, #428]	; (1000 <_Z15setup_inferencev+0x294>)
     e52:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
     e56:	f3bf 8f5b 	dmb	ish
     e5a:	f013 0f01 	tst.w	r3, #1
     e5e:	f000 814b 	beq.w	10f8 <_Z15setup_inferencev+0x38c>
  interpreter = &static_interpreter;
     e62:	4c70      	ldr	r4, [pc, #448]	; (1024 <_Z15setup_inferencev+0x2b8>)
     e64:	f504 7052 	add.w	r0, r4, #840	; 0x348
     e68:	f8c4 03cc 	str.w	r0, [r4, #972]	; 0x3cc

  // Allocate memory from the tensor_arena for the model's tensors.
  interpreter->AllocateTensors();
     e6c:	4b6e      	ldr	r3, [pc, #440]	; (1028 <_Z15setup_inferencev+0x2bc>)
     e6e:	4798      	blx	r3

  // Obtain pointer to the model's input tensor.
  model_input = interpreter->input(0);
     e70:	2100      	movs	r1, #0
     e72:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
     e76:	4b6d      	ldr	r3, [pc, #436]	; (102c <_Z15setup_inferencev+0x2c0>)
     e78:	4798      	blx	r3
     e7a:	f8c4 03d0 	str.w	r0, [r4, #976]	; 0x3d0
    TF_LITE_REPORT_ERROR(error_reporter,
                         "Bad input tensor parameters in model");
    return;
  }*/

  input_length = model_input->bytes / sizeof(float);
     e7e:	6983      	ldr	r3, [r0, #24]
     e80:	089b      	lsrs	r3, r3, #2
     e82:	f8c4 33d4 	str.w	r3, [r4, #980]	; 0x3d4

}
     e86:	b00d      	add	sp, #52	; 0x34
     e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
  static tflite::MicroMutableOpResolver<5> micro_op_resolver;  // NOLINT
     e8a:	1d10      	adds	r0, r2, #4
     e8c:	4b68      	ldr	r3, [pc, #416]	; (1030 <_Z15setup_inferencev+0x2c4>)
     e8e:	4798      	blx	r3
     e90:	2800      	cmp	r0, #0
     e92:	f43f af79 	beq.w	d88 <_Z15setup_inferencev+0x1c>
      : error_reporter_(error_reporter) {}
     e96:	4c5a      	ldr	r4, [pc, #360]	; (1000 <_Z15setup_inferencev+0x294>)
     e98:	4b66      	ldr	r3, [pc, #408]	; (1034 <_Z15setup_inferencev+0x2c8>)
     e9a:	60a3      	str	r3, [r4, #8]
     e9c:	2300      	movs	r3, #0
     e9e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
     ea2:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
     ea6:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
     eaa:	1d20      	adds	r0, r4, #4
     eac:	4b62      	ldr	r3, [pc, #392]	; (1038 <_Z15setup_inferencev+0x2cc>)
     eae:	4798      	blx	r3
     eb0:	4a62      	ldr	r2, [pc, #392]	; (103c <_Z15setup_inferencev+0x2d0>)
     eb2:	4963      	ldr	r1, [pc, #396]	; (1040 <_Z15setup_inferencev+0x2d4>)
     eb4:	f104 0008 	add.w	r0, r4, #8
     eb8:	4b62      	ldr	r3, [pc, #392]	; (1044 <_Z15setup_inferencev+0x2d8>)
     eba:	4798      	blx	r3
     ebc:	e764      	b.n	d88 <_Z15setup_inferencev+0x1c>
                             op);
      }
      return kTfLiteError;
    }

    if (registrations_len_ >= tOpCount) {
     ebe:	4b50      	ldr	r3, [pc, #320]	; (1000 <_Z15setup_inferencev+0x294>)
     ec0:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
     ec4:	2e04      	cmp	r6, #4
     ec6:	d90a      	bls.n	ede <_Z15setup_inferencev+0x172>
      if (error_reporter_) {
     ec8:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
     ecc:	2800      	cmp	r0, #0
     ece:	f43f af6f 	beq.w	db0 <_Z15setup_inferencev+0x44>
        TF_LITE_REPORT_ERROR(error_reporter_,
     ed2:	2305      	movs	r3, #5
     ed4:	2203      	movs	r2, #3
     ed6:	495c      	ldr	r1, [pc, #368]	; (1048 <_Z15setup_inferencev+0x2dc>)
     ed8:	4c4d      	ldr	r4, [pc, #308]	; (1010 <_Z15setup_inferencev+0x2a4>)
     eda:	47a0      	blx	r4
     edc:	e768      	b.n	db0 <_Z15setup_inferencev+0x44>
                             op, tOpCount);
      }
      return kTfLiteError;
    }

    registrations_[registrations_len_] = registration;
     ede:	4f48      	ldr	r7, [pc, #288]	; (1000 <_Z15setup_inferencev+0x294>)
     ee0:	eb07 1e46 	add.w	lr, r7, r6, lsl #5
     ee4:	f10e 040c 	add.w	r4, lr, #12
     ee8:	ad04      	add	r5, sp, #16
     eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     eee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     ef2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
     ef6:	2203      	movs	r2, #3
     ef8:	f8ce 2020 	str.w	r2, [lr, #32]
    registrations_len_++;
     efc:	3601      	adds	r6, #1
     efe:	f8c7 60ac 	str.w	r6, [r7, #172]	; 0xac

    builtin_codes_[num_buitin_ops_] = op;
     f02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
     f06:	18f9      	adds	r1, r7, r3
     f08:	f881 20b0 	strb.w	r2, [r1, #176]	; 0xb0
    builtin_parsers_[num_buitin_ops_] = parser;
     f0c:	eb07 0283 	add.w	r2, r7, r3, lsl #2
     f10:	494e      	ldr	r1, [pc, #312]	; (104c <_Z15setup_inferencev+0x2e0>)
     f12:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
    num_buitin_ops_++;
     f16:	3301      	adds	r3, #1
     f18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     f1c:	e748      	b.n	db0 <_Z15setup_inferencev+0x44>
    if (registrations_len_ >= tOpCount) {
     f1e:	4b38      	ldr	r3, [pc, #224]	; (1000 <_Z15setup_inferencev+0x294>)
     f20:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
     f24:	2e04      	cmp	r6, #4
     f26:	d90a      	bls.n	f3e <_Z15setup_inferencev+0x1d2>
      if (error_reporter_) {
     f28:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
     f2c:	2800      	cmp	r0, #0
     f2e:	f43f af53 	beq.w	dd8 <_Z15setup_inferencev+0x6c>
        TF_LITE_REPORT_ERROR(error_reporter_,
     f32:	2305      	movs	r3, #5
     f34:	2209      	movs	r2, #9
     f36:	4944      	ldr	r1, [pc, #272]	; (1048 <_Z15setup_inferencev+0x2dc>)
     f38:	4c35      	ldr	r4, [pc, #212]	; (1010 <_Z15setup_inferencev+0x2a4>)
     f3a:	47a0      	blx	r4
     f3c:	e74c      	b.n	dd8 <_Z15setup_inferencev+0x6c>
    registrations_[registrations_len_] = registration;
     f3e:	4f30      	ldr	r7, [pc, #192]	; (1000 <_Z15setup_inferencev+0x294>)
     f40:	eb07 1e46 	add.w	lr, r7, r6, lsl #5
     f44:	f10e 040c 	add.w	r4, lr, #12
     f48:	ad04      	add	r5, sp, #16
     f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     f4e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     f52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
     f56:	2209      	movs	r2, #9
     f58:	f8ce 2020 	str.w	r2, [lr, #32]
    registrations_len_++;
     f5c:	3601      	adds	r6, #1
     f5e:	f8c7 60ac 	str.w	r6, [r7, #172]	; 0xac
    builtin_codes_[num_buitin_ops_] = op;
     f62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
     f66:	18f9      	adds	r1, r7, r3
     f68:	f881 20b0 	strb.w	r2, [r1, #176]	; 0xb0
    builtin_parsers_[num_buitin_ops_] = parser;
     f6c:	eb07 0283 	add.w	r2, r7, r3, lsl #2
     f70:	4937      	ldr	r1, [pc, #220]	; (1050 <_Z15setup_inferencev+0x2e4>)
     f72:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
    num_buitin_ops_++;
     f76:	3301      	adds	r3, #1
     f78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     f7c:	e72c      	b.n	dd8 <_Z15setup_inferencev+0x6c>
    if (registrations_len_ >= tOpCount) {
     f7e:	4b20      	ldr	r3, [pc, #128]	; (1000 <_Z15setup_inferencev+0x294>)
     f80:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
     f84:	2e04      	cmp	r6, #4
     f86:	d90a      	bls.n	f9e <_Z15setup_inferencev+0x232>
      if (error_reporter_) {
     f88:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
     f8c:	2800      	cmp	r0, #0
     f8e:	f43f af37 	beq.w	e00 <_Z15setup_inferencev+0x94>
        TF_LITE_REPORT_ERROR(error_reporter_,
     f92:	2305      	movs	r3, #5
     f94:	2213      	movs	r2, #19
     f96:	492c      	ldr	r1, [pc, #176]	; (1048 <_Z15setup_inferencev+0x2dc>)
     f98:	4c1d      	ldr	r4, [pc, #116]	; (1010 <_Z15setup_inferencev+0x2a4>)
     f9a:	47a0      	blx	r4
     f9c:	e730      	b.n	e00 <_Z15setup_inferencev+0x94>
    registrations_[registrations_len_] = registration;
     f9e:	4f18      	ldr	r7, [pc, #96]	; (1000 <_Z15setup_inferencev+0x294>)
     fa0:	eb07 1e46 	add.w	lr, r7, r6, lsl #5
     fa4:	f10e 040c 	add.w	r4, lr, #12
     fa8:	ad04      	add	r5, sp, #16
     faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     fae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     fb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
     fb6:	2213      	movs	r2, #19
     fb8:	f8ce 2020 	str.w	r2, [lr, #32]
    registrations_len_++;
     fbc:	3601      	adds	r6, #1
     fbe:	f8c7 60ac 	str.w	r6, [r7, #172]	; 0xac
    builtin_codes_[num_buitin_ops_] = op;
     fc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
     fc6:	18f9      	adds	r1, r7, r3
     fc8:	f881 20b0 	strb.w	r2, [r1, #176]	; 0xb0
    builtin_parsers_[num_buitin_ops_] = parser;
     fcc:	eb07 0283 	add.w	r2, r7, r3, lsl #2
     fd0:	4920      	ldr	r1, [pc, #128]	; (1054 <_Z15setup_inferencev+0x2e8>)
     fd2:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
    num_buitin_ops_++;
     fd6:	3301      	adds	r3, #1
     fd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     fdc:	e710      	b.n	e00 <_Z15setup_inferencev+0x94>
    if (registrations_len_ >= tOpCount) {
     fde:	4b08      	ldr	r3, [pc, #32]	; (1000 <_Z15setup_inferencev+0x294>)
     fe0:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
     fe4:	2e04      	cmp	r6, #4
     fe6:	d937      	bls.n	1058 <_Z15setup_inferencev+0x2ec>
      if (error_reporter_) {
     fe8:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
     fec:	2800      	cmp	r0, #0
     fee:	f43f af1b 	beq.w	e28 <_Z15setup_inferencev+0xbc>
        TF_LITE_REPORT_ERROR(error_reporter_,
     ff2:	2305      	movs	r3, #5
     ff4:	2211      	movs	r2, #17
     ff6:	4914      	ldr	r1, [pc, #80]	; (1048 <_Z15setup_inferencev+0x2dc>)
     ff8:	4c05      	ldr	r4, [pc, #20]	; (1010 <_Z15setup_inferencev+0x2a4>)
     ffa:	47a0      	blx	r4
     ffc:	e714      	b.n	e28 <_Z15setup_inferencev+0xbc>
     ffe:	bf00      	nop
    1000:	200009f4 	.word	0x200009f4
    1004:	0001b160 	.word	0x0001b160
    1008:	00003e31 	.word	0x00003e31
    100c:	0001fe48 	.word	0x0001fe48
    1010:	0000118d 	.word	0x0000118d
    1014:	00004f4d 	.word	0x00004f4d
    1018:	000027d9 	.word	0x000027d9
    101c:	00005e21 	.word	0x00005e21
    1020:	000063d1 	.word	0x000063d1
    1024:	2000f784 	.word	0x2000f784
    1028:	00008cc5 	.word	0x00008cc5
    102c:	00008f1d 	.word	0x00008f1d
    1030:	000091e5 	.word	0x000091e5
    1034:	0001fe2c 	.word	0x0001fe2c
    1038:	0000921d 	.word	0x0000921d
    103c:	20000000 	.word	0x20000000
    1040:	00000cc9 	.word	0x00000cc9
    1044:	000091cd 	.word	0x000091cd
    1048:	0001fe98 	.word	0x0001fe98
    104c:	000012b5 	.word	0x000012b5
    1050:	000013f5 	.word	0x000013f5
    1054:	00001669 	.word	0x00001669
    registrations_[registrations_len_] = registration;
    1058:	4f39      	ldr	r7, [pc, #228]	; (1140 <_Z15setup_inferencev+0x3d4>)
    105a:	eb07 1e46 	add.w	lr, r7, r6, lsl #5
    105e:	f10e 040c 	add.w	r4, lr, #12
    1062:	ad04      	add	r5, sp, #16
    1064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1068:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    106c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    1070:	2211      	movs	r2, #17
    1072:	f8ce 2020 	str.w	r2, [lr, #32]
    registrations_len_++;
    1076:	3601      	adds	r6, #1
    1078:	f8c7 60ac 	str.w	r6, [r7, #172]	; 0xac
    builtin_codes_[num_buitin_ops_] = op;
    107c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    1080:	18f9      	adds	r1, r7, r3
    1082:	f881 20b0 	strb.w	r2, [r1, #176]	; 0xb0
    builtin_parsers_[num_buitin_ops_] = parser;
    1086:	eb07 0283 	add.w	r2, r7, r3, lsl #2
    108a:	492e      	ldr	r1, [pc, #184]	; (1144 <_Z15setup_inferencev+0x3d8>)
    108c:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
    num_buitin_ops_++;
    1090:	3301      	adds	r3, #1
    1092:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    1096:	e6c7      	b.n	e28 <_Z15setup_inferencev+0xbc>
    if (registrations_len_ >= tOpCount) {
    1098:	4b29      	ldr	r3, [pc, #164]	; (1140 <_Z15setup_inferencev+0x3d4>)
    109a:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
    109e:	2e04      	cmp	r6, #4
    10a0:	d90a      	bls.n	10b8 <_Z15setup_inferencev+0x34c>
      if (error_reporter_) {
    10a2:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
    10a6:	2800      	cmp	r0, #0
    10a8:	f43f aed2 	beq.w	e50 <_Z15setup_inferencev+0xe4>
        TF_LITE_REPORT_ERROR(error_reporter_,
    10ac:	2305      	movs	r3, #5
    10ae:	2219      	movs	r2, #25
    10b0:	4925      	ldr	r1, [pc, #148]	; (1148 <_Z15setup_inferencev+0x3dc>)
    10b2:	4c26      	ldr	r4, [pc, #152]	; (114c <_Z15setup_inferencev+0x3e0>)
    10b4:	47a0      	blx	r4
    10b6:	e6cb      	b.n	e50 <_Z15setup_inferencev+0xe4>
    registrations_[registrations_len_] = registration;
    10b8:	4f21      	ldr	r7, [pc, #132]	; (1140 <_Z15setup_inferencev+0x3d4>)
    10ba:	eb07 1e46 	add.w	lr, r7, r6, lsl #5
    10be:	f10e 040c 	add.w	r4, lr, #12
    10c2:	ad04      	add	r5, sp, #16
    10c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    10c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    10c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    10cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    10d0:	2219      	movs	r2, #25
    10d2:	f8ce 2020 	str.w	r2, [lr, #32]
    registrations_len_++;
    10d6:	3601      	adds	r6, #1
    10d8:	f8c7 60ac 	str.w	r6, [r7, #172]	; 0xac
    builtin_codes_[num_buitin_ops_] = op;
    10dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    10e0:	18f9      	adds	r1, r7, r3
    10e2:	f881 20b0 	strb.w	r2, [r1, #176]	; 0xb0
    builtin_parsers_[num_buitin_ops_] = parser;
    10e6:	eb07 0283 	add.w	r2, r7, r3, lsl #2
    10ea:	4919      	ldr	r1, [pc, #100]	; (1150 <_Z15setup_inferencev+0x3e4>)
    10ec:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
    num_buitin_ops_++;
    10f0:	3301      	adds	r3, #1
    10f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    10f6:	e6ab      	b.n	e50 <_Z15setup_inferencev+0xe4>
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
    10f8:	4816      	ldr	r0, [pc, #88]	; (1154 <_Z15setup_inferencev+0x3e8>)
    10fa:	4b17      	ldr	r3, [pc, #92]	; (1158 <_Z15setup_inferencev+0x3ec>)
    10fc:	4798      	blx	r3
    10fe:	2800      	cmp	r0, #0
    1100:	f43f aeaf 	beq.w	e62 <_Z15setup_inferencev+0xf6>
    1104:	4a0e      	ldr	r2, [pc, #56]	; (1140 <_Z15setup_inferencev+0x3d4>)
    1106:	4614      	mov	r4, r2
    1108:	f854 1bd4 	ldr.w	r1, [r4], #212
    110c:	4b13      	ldr	r3, [pc, #76]	; (115c <_Z15setup_inferencev+0x3f0>)
    110e:	f503 7552 	add.w	r5, r3, #840	; 0x348
    1112:	2000      	movs	r0, #0
    1114:	9002      	str	r0, [sp, #8]
    1116:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
    111a:	9301      	str	r3, [sp, #4]
    111c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
    1120:	9300      	str	r3, [sp, #0]
    1122:	f102 03d8 	add.w	r3, r2, #216	; 0xd8
    1126:	3208      	adds	r2, #8
    1128:	4628      	mov	r0, r5
    112a:	4e0d      	ldr	r6, [pc, #52]	; (1160 <_Z15setup_inferencev+0x3f4>)
    112c:	47b0      	blx	r6
    112e:	4620      	mov	r0, r4
    1130:	4b0c      	ldr	r3, [pc, #48]	; (1164 <_Z15setup_inferencev+0x3f8>)
    1132:	4798      	blx	r3
    1134:	4a0c      	ldr	r2, [pc, #48]	; (1168 <_Z15setup_inferencev+0x3fc>)
    1136:	490d      	ldr	r1, [pc, #52]	; (116c <_Z15setup_inferencev+0x400>)
    1138:	4628      	mov	r0, r5
    113a:	4b0d      	ldr	r3, [pc, #52]	; (1170 <_Z15setup_inferencev+0x404>)
    113c:	4798      	blx	r3
    113e:	e690      	b.n	e62 <_Z15setup_inferencev+0xf6>
    1140:	200009f4 	.word	0x200009f4
    1144:	00001529 	.word	0x00001529
    1148:	0001fe98 	.word	0x0001fe98
    114c:	0000118d 	.word	0x0000118d
    1150:	0000166d 	.word	0x0000166d
    1154:	20000ac8 	.word	0x20000ac8
    1158:	000091e5 	.word	0x000091e5
    115c:	2000f784 	.word	0x2000f784
    1160:	00008c6d 	.word	0x00008c6d
    1164:	0000921d 	.word	0x0000921d
    1168:	20000000 	.word	0x20000000
    116c:	00008bab 	.word	0x00008bab
    1170:	000091cd 	.word	0x000091cd

00001174 <_Z13run_inferencev>:

void run_inference() {
    1174:	b508      	push	{r3, lr}
        //io_read();
  // If there was no new data, wait until next time.
  //if (!got_data) return;

  // Run inference, and report any error.
  TfLiteStatus invoke_status = interpreter->Invoke();
    1176:	4b03      	ldr	r3, [pc, #12]	; (1184 <_Z13run_inferencev+0x10>)
    1178:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
    117c:	4b02      	ldr	r3, [pc, #8]	; (1188 <_Z13run_inferencev+0x14>)
    117e:	4798      	blx	r3
    1180:	bd08      	pop	{r3, pc}
    1182:	bf00      	nop
    1184:	2000f784 	.word	0x2000f784
    1188:	00008e11 	.word	0x00008e11

0000118c <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
    118c:	b40e      	push	{r1, r2, r3}
    118e:	b500      	push	{lr}
    1190:	b082      	sub	sp, #8
    1192:	aa03      	add	r2, sp, #12
    1194:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
    1198:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
    119a:	6803      	ldr	r3, [r0, #0]
    119c:	689b      	ldr	r3, [r3, #8]
    119e:	4798      	blx	r3
  va_end(args);
  return code;
}
    11a0:	b002      	add	sp, #8
    11a2:	f85d eb04 	ldr.w	lr, [sp], #4
    11a6:	b003      	add	sp, #12
    11a8:	4770      	bx	lr

000011aa <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
    11aa:	b40c      	push	{r2, r3}
    11ac:	b500      	push	{lr}
    11ae:	b083      	sub	sp, #12
    11b0:	aa04      	add	r2, sp, #16
    11b2:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
    11b6:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
    11b8:	6803      	ldr	r3, [r0, #0]
    11ba:	689b      	ldr	r3, [r3, #8]
    11bc:	4798      	blx	r3
  va_end(args);
  return code;
}
    11be:	b003      	add	sp, #12
    11c0:	f85d eb04 	ldr.w	lr, [sp], #4
    11c4:	b002      	add	sp, #8
    11c6:	4770      	bx	lr

000011c8 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
  }

  template<typename T> T GetField(voffset_t field, T defaultval) const {
    auto field_offset = GetOptionalFieldOffset(field);
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    11c8:	3801      	subs	r0, #1
    11ca:	2804      	cmp	r0, #4
    11cc:	d80e      	bhi.n	11ec <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x24>
    11ce:	e8df f000 	tbb	[pc, r0]
    11d2:	0503      	.short	0x0503
    11d4:	0907      	.short	0x0907
    11d6:	0b          	.byte	0x0b
    11d7:	00          	.byte	0x00
    11d8:	2001      	movs	r0, #1
    11da:	4770      	bx	lr
      *builtin_data = params.release();
      return kTfLiteOk;
    }
    case BuiltinOperator_DELEGATE: {
      // TODO(ycling): Revisit when supporting saving delegated models.
      TF_LITE_REPORT_ERROR(error_reporter,
    11dc:	2002      	movs	r0, #2
    11de:	4770      	bx	lr
    11e0:	2003      	movs	r0, #3
    11e2:	4770      	bx	lr
                           "DELEGATE op shouldn't exist in model.");
      return kTfLiteError;
    11e4:	2004      	movs	r0, #4
    11e6:	4770      	bx	lr
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    11e8:	2005      	movs	r0, #5
    11ea:	4770      	bx	lr
    11ec:	2000      	movs	r0, #0
    11ee:	4770      	bx	lr

000011f0 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:
    11f0:	b120      	cbz	r0, 11fc <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0xc>
    11f2:	2801      	cmp	r0, #1
    }
    case BuiltinOperator_FAKE_QUANT: {
      auto params = safe_allocator.Allocate<TfLiteFakeQuantParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    11f4:	bf0c      	ite	eq
    11f6:	2002      	moveq	r0, #2
    11f8:	2000      	movne	r0, #0
    return data_ - ReadScalar<soffset_t>(data_);
    11fa:	4770      	bx	lr
    11fc:	2001      	movs	r0, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    11fe:	4770      	bx	lr

00001200 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
    1200:	b508      	push	{r3, lr}
    1202:	b118      	cbz	r0, 120c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc>

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
  return EndianScalar(*reinterpret_cast<const T *>(p));
    1204:	b121      	cbz	r1, 1210 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1206:	b12a      	cbz	r2, 1214 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14>
    1208:	b133      	cbz	r3, 1218 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
  }
  const tflite::ArgMinOptions *builtin_options_as_ArgMinOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_ArgMinOptions ? static_cast<const tflite::ArgMinOptions *>(builtin_options()) : nullptr;
  }
  const tflite::FakeQuantOptions *builtin_options_as_FakeQuantOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_FakeQuantOptions ? static_cast<const tflite::FakeQuantOptions *>(builtin_options()) : nullptr;
    120a:	bd08      	pop	{r3, pc}
    120c:	4b03      	ldr	r3, [pc, #12]	; (121c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c>)
    120e:	4798      	blx	r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1210:	4b02      	ldr	r3, [pc, #8]	; (121c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c>)
    1212:	4798      	blx	r3
    1214:	4b01      	ldr	r3, [pc, #4]	; (121c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c>)
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    1216:	4798      	blx	r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    1218:	4b00      	ldr	r3, [pc, #0]	; (121c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c>)
    121a:	4798      	blx	r3
    121c:	000138bd 	.word	0x000138bd

00001220 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
      if (const auto* schema_params =
    1220:	b508      	push	{r3, lr}
    return data_ - ReadScalar<soffset_t>(data_);
    1222:	280b      	cmp	r0, #11
    1224:	d837      	bhi.n	1296 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x76>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1226:	e8df f000 	tbb	[pc, r0]
    122a:	060a      	.short	0x060a
    122c:	26221a16 	.word	0x26221a16
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1230:	1e2e122a 	.word	0x1e2e122a
              op->builtin_options_as_FakeQuantOptions()) {
        params->min = schema_params->min();
    1234:	320e      	.short	0x320e
    return data_ - ReadScalar<soffset_t>(data_);
    1236:	230a      	movs	r3, #10
    1238:	700b      	strb	r3, [r1, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    123a:	2000      	movs	r0, #0
    123c:	bd08      	pop	{r3, pc}
    123e:	2301      	movs	r3, #1
    1240:	700b      	strb	r3, [r1, #0]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1242:	2000      	movs	r0, #0
    1244:	bd08      	pop	{r3, pc}
    1246:	230b      	movs	r3, #11
        params->max = schema_params->max();
    1248:	700b      	strb	r3, [r1, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    124a:	2000      	movs	r0, #0
    124c:	bd08      	pop	{r3, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    124e:	2307      	movs	r3, #7
    1250:	700b      	strb	r3, [r1, #0]
    1252:	2000      	movs	r0, #0
    1254:	bd08      	pop	{r3, pc}
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1256:	2302      	movs	r3, #2
    1258:	700b      	strb	r3, [r1, #0]
        params->num_bits = schema_params->num_bits();
    125a:	2000      	movs	r0, #0
    return data_ - ReadScalar<soffset_t>(data_);
    125c:	bd08      	pop	{r3, pc}
    125e:	2303      	movs	r3, #3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1260:	700b      	strb	r3, [r1, #0]
    1262:	2000      	movs	r0, #0
    1264:	bd08      	pop	{r3, pc}
    1266:	2309      	movs	r3, #9
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1268:	700b      	strb	r3, [r1, #0]
    126a:	2000      	movs	r0, #0
    return GetField<uint8_t>(VT_NARROW_RANGE, 0) != 0;
    126c:	bd08      	pop	{r3, pc}
    126e:	2304      	movs	r3, #4
    1270:	700b      	strb	r3, [r1, #0]
    1272:	2000      	movs	r0, #0
        params->narrow_range = schema_params->narrow_range();
      }
      *builtin_data = params.release();
    1274:	bd08      	pop	{r3, pc}
      return kTfLiteOk;
    1276:	2305      	movs	r3, #5
    1278:	700b      	strb	r3, [r1, #0]
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    127a:	2000      	movs	r0, #0
    127c:	bd08      	pop	{r3, pc}
    127e:	2306      	movs	r3, #6
    1280:	700b      	strb	r3, [r1, #0]
    1282:	2000      	movs	r0, #0
    1284:	bd08      	pop	{r3, pc}
    1286:	2308      	movs	r3, #8
    1288:	700b      	strb	r3, [r1, #0]
    128a:	2000      	movs	r0, #0
    128c:	bd08      	pop	{r3, pc}
    128e:	230c      	movs	r3, #12
    1290:	700b      	strb	r3, [r1, #0]
    1292:	2000      	movs	r0, #0
    1294:	bd08      	pop	{r3, pc}
    1296:	4613      	mov	r3, r2
    1298:	4602      	mov	r2, r0
    129a:	2000      	movs	r0, #0
    129c:	7008      	strb	r0, [r1, #0]
    129e:	4903      	ldr	r1, [pc, #12]	; (12ac <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x8c>)
    12a0:	4618      	mov	r0, r3
    12a2:	4b03      	ldr	r3, [pc, #12]	; (12b0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x90>)
    12a4:	4798      	blx	r3
    12a6:	2001      	movs	r0, #1
    12a8:	bd08      	pop	{r3, pc}
    12aa:	bf00      	nop
    12ac:	0001ff9c 	.word	0x0001ff9c
    12b0:	0000118d 	.word	0x0000118d

000012b4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
    12b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    12b8:	b082      	sub	sp, #8
    12ba:	4604      	mov	r4, r0
    12bc:	460f      	mov	r7, r1
    12be:	4615      	mov	r5, r2
    }
    case BuiltinOperator_ONE_HOT: {
      auto params = safe_allocator.Allocate<TfLiteOneHotParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    12c0:	4698      	mov	r8, r3
    12c2:	4e45      	ldr	r6, [pc, #276]	; (13d8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>)
    return data_ - ReadScalar<soffset_t>(data_);
    12c4:	47b0      	blx	r6
    12c6:	682b      	ldr	r3, [r5, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    12c8:	681b      	ldr	r3, [r3, #0]
    12ca:	2204      	movs	r2, #4
    12cc:	2118      	movs	r1, #24
    12ce:	4628      	mov	r0, r5
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    12d0:	4798      	blx	r3
  }
  const tflite::LogicalOrOptions *builtin_options_as_LogicalOrOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_LogicalOrOptions ? static_cast<const tflite::LogicalOrOptions *>(builtin_options()) : nullptr;
  }
  const tflite::OneHotOptions *builtin_options_as_OneHotOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_OneHotOptions ? static_cast<const tflite::OneHotOptions *>(builtin_options()) : nullptr;
    12d2:	2800      	cmp	r0, #0
    12d4:	d05a      	beq.n	138c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
    12d6:	4606      	mov	r6, r0
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
    return const_cast<Table *>(this)->GetPointer<P>(field);
    12d8:	6823      	ldr	r3, [r4, #0]
    12da:	1ae3      	subs	r3, r4, r3
    12dc:	881a      	ldrh	r2, [r3, #0]
    12de:	2a0a      	cmp	r2, #10
      if (const auto* schema_params = op->builtin_options_as_OneHotOptions()) {
    12e0:	dd4e      	ble.n	1380 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
    return data_ - ReadScalar<soffset_t>(data_);
    12e2:	8959      	ldrh	r1, [r3, #10]
    12e4:	2900      	cmp	r1, #0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    12e6:	d04b      	beq.n	1380 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
    12e8:	5c61      	ldrb	r1, [r4, r1]
    12ea:	2901      	cmp	r1, #1
    12ec:	d148      	bne.n	1380 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    12ee:	2a0c      	cmp	r2, #12
    12f0:	dd46      	ble.n	1380 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
        params->axis = schema_params->axis();
    12f2:	899b      	ldrh	r3, [r3, #12]
      }
      *builtin_data = params.release();
    12f4:	18e7      	adds	r7, r4, r3
      return kTfLiteOk;
    12f6:	2b00      	cmp	r3, #0
    12f8:	d042      	beq.n	1380 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    12fa:	58e5      	ldr	r5, [r4, r3]
    12fc:	197c      	adds	r4, r7, r5
    12fe:	d03f      	beq.n	1380 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
    1300:	597b      	ldr	r3, [r7, r5]
    1302:	1ae3      	subs	r3, r4, r3
    1304:	881a      	ldrh	r2, [r3, #0]
    1306:	2a04      	cmp	r2, #4
    1308:	dd4d      	ble.n	13a6 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf2>
    130a:	889b      	ldrh	r3, [r3, #4]
    130c:	2b00      	cmp	r3, #0
    130e:	d04c      	beq.n	13aa <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf6>
    1310:	56e0      	ldrsb	r0, [r4, r3]
    1312:	b2c0      	uxtb	r0, r0
    1314:	4b31      	ldr	r3, [pc, #196]	; (13dc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x128>)
    1316:	4798      	blx	r3
    1318:	7030      	strb	r0, [r6, #0]
    131a:	597b      	ldr	r3, [r7, r5]
    131c:	1ae3      	subs	r3, r4, r3
    131e:	881a      	ldrh	r2, [r3, #0]
    1320:	2a06      	cmp	r2, #6
    1322:	dd44      	ble.n	13ae <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    1324:	88db      	ldrh	r3, [r3, #6]
    1326:	2b00      	cmp	r3, #0
    }
    case BuiltinOperator_LEAKY_RELU: {
      auto params = safe_allocator.Allocate<TfLiteLeakyReluParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    1328:	d043      	beq.n	13b2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfe>
    132a:	58e3      	ldr	r3, [r4, r3]
    return data_ - ReadScalar<soffset_t>(data_);
    132c:	6073      	str	r3, [r6, #4]
    132e:	597b      	ldr	r3, [r7, r5]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1330:	1ae3      	subs	r3, r4, r3
    1332:	881a      	ldrh	r2, [r3, #0]
    1334:	2a08      	cmp	r2, #8
    1336:	dd3e      	ble.n	13b6 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x102>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1338:	891b      	ldrh	r3, [r3, #8]
  }
  const tflite::ResizeNearestNeighborOptions *builtin_options_as_ResizeNearestNeighborOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_ResizeNearestNeighborOptions ? static_cast<const tflite::ResizeNearestNeighborOptions *>(builtin_options()) : nullptr;
  }
  const tflite::LeakyReluOptions *builtin_options_as_LeakyReluOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_LeakyReluOptions ? static_cast<const tflite::LeakyReluOptions *>(builtin_options()) : nullptr;
    133a:	2b00      	cmp	r3, #0
    133c:	d03d      	beq.n	13ba <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
    133e:	58e3      	ldr	r3, [r4, r3]
    return const_cast<Table *>(this)->GetPointer<P>(field);
    1340:	60b3      	str	r3, [r6, #8]
    1342:	597b      	ldr	r3, [r7, r5]
    1344:	1ae3      	subs	r3, r4, r3
    1346:	881a      	ldrh	r2, [r3, #0]
      if (const auto* leaky_relu_params =
    1348:	2a0a      	cmp	r2, #10
    return data_ - ReadScalar<soffset_t>(data_);
    134a:	dd38      	ble.n	13be <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10a>
    134c:	895b      	ldrh	r3, [r3, #10]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    134e:	2b00      	cmp	r3, #0
    1350:	d037      	beq.n	13c2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    1352:	56e0      	ldrsb	r0, [r4, r3]
    1354:	b2c0      	uxtb	r0, r0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1356:	4b22      	ldr	r3, [pc, #136]	; (13e0 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
    1358:	4798      	blx	r3
              op->builtin_options_as_LeakyReluOptions()) {
        params->alpha = leaky_relu_params->alpha();
    135a:	7330      	strb	r0, [r6, #12]
      }
      *builtin_data = params.release();
    135c:	597b      	ldr	r3, [r7, r5]
      return kTfLiteOk;
    135e:	1ae3      	subs	r3, r4, r3
    1360:	881a      	ldrh	r2, [r3, #0]
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    1362:	2a0c      	cmp	r2, #12
    1364:	dd2f      	ble.n	13c6 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x112>
    1366:	899b      	ldrh	r3, [r3, #12]
    1368:	b37b      	cbz	r3, 13ca <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>
    136a:	58e3      	ldr	r3, [r4, r3]
    136c:	6133      	str	r3, [r6, #16]
    136e:	597b      	ldr	r3, [r7, r5]
    1370:	1ae3      	subs	r3, r4, r3
    1372:	881a      	ldrh	r2, [r3, #0]
    1374:	2a0e      	cmp	r2, #14
    1376:	dd2a      	ble.n	13ce <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a>
    1378:	89db      	ldrh	r3, [r3, #14]
    137a:	b353      	cbz	r3, 13d2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11e>
    137c:	58e3      	ldr	r3, [r4, r3]
    137e:	6173      	str	r3, [r6, #20]
    1380:	f8c8 6000 	str.w	r6, [r8]
    1384:	2000      	movs	r0, #0
    1386:	b002      	add	sp, #8
    1388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    138c:	4b15      	ldr	r3, [pc, #84]	; (13e4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
    138e:	9301      	str	r3, [sp, #4]
    }
    case BuiltinOperator_MIRROR_PAD: {
      auto params = safe_allocator.Allocate<TfLiteMirrorPaddingParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    1390:	f44f 737b 	mov.w	r3, #1004	; 0x3ec
    return data_ - ReadScalar<soffset_t>(data_);
    1394:	9300      	str	r3, [sp, #0]
    1396:	4b14      	ldr	r3, [pc, #80]	; (13e8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1398:	4a14      	ldr	r2, [pc, #80]	; (13ec <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
    139a:	4639      	mov	r1, r7
    139c:	4638      	mov	r0, r7
    139e:	4c14      	ldr	r4, [pc, #80]	; (13f0 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    13a0:	47a0      	blx	r4
  }
  const tflite::SquaredDifferenceOptions *builtin_options_as_SquaredDifferenceOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_SquaredDifferenceOptions ? static_cast<const tflite::SquaredDifferenceOptions *>(builtin_options()) : nullptr;
  }
  const tflite::MirrorPadOptions *builtin_options_as_MirrorPadOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_MirrorPadOptions ? static_cast<const tflite::MirrorPadOptions *>(builtin_options()) : nullptr;
    13a2:	2001      	movs	r0, #1
    13a4:	e7ef      	b.n	1386 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    13a6:	2000      	movs	r0, #0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    13a8:	e7b3      	b.n	1312 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
    13aa:	2000      	movs	r0, #0
    13ac:	e7b1      	b.n	1312 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
    auto p = data_ + field_offset;
    13ae:	2300      	movs	r3, #0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    13b0:	e7bc      	b.n	132c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>
    13b2:	2300      	movs	r3, #0
      const auto* mirror_pad_params = op->builtin_options_as_MirrorPadOptions();
      if (mirror_pad_params != nullptr) {
    13b4:	e7ba      	b.n	132c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>
    13b6:	2300      	movs	r3, #0
    return data_ - ReadScalar<soffset_t>(data_);
    13b8:	e7c2      	b.n	1340 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    13ba:	2300      	movs	r3, #0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    13bc:	e7c0      	b.n	1340 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    13be:	2000      	movs	r0, #0
    13c0:	e7c8      	b.n	1354 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    13c2:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    13c4:	e7c6      	b.n	1354 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
        params->mode =
            mirror_pad_params->mode() == tflite::MirrorPadMode_REFLECT
                ? TfLiteMirrorPaddingMode::kTfLiteMirrorPaddingReflect
    13c6:	2301      	movs	r3, #1
    13c8:	e7d0      	b.n	136c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
    13ca:	2301      	movs	r3, #1
    13cc:	e7ce      	b.n	136c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
    13ce:	2301      	movs	r3, #1
        params->mode =
    13d0:	e7d5      	b.n	137e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
                : TfLiteMirrorPaddingMode::kTfLiteMirrorPaddingSymmetric;
      }
      *builtin_data = params.release();
    13d2:	2301      	movs	r3, #1
      return kTfLiteOk;
    13d4:	e7d3      	b.n	137e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
    13d6:	bf00      	nop
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    13d8:	00001201 	.word	0x00001201
    13dc:	000011f1 	.word	0x000011f1
    13e0:	000011c9 	.word	0x000011c9
    13e4:	00020010 	.word	0x00020010
    13e8:	0001ffc0 	.word	0x0001ffc0
    13ec:	0001fff8 	.word	0x0001fff8
    13f0:	000011ab 	.word	0x000011ab

000013f4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                ? TfLiteMirrorPaddingMode::kTfLiteMirrorPaddingReflect
    13f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    13f8:	b082      	sub	sp, #8
    13fa:	4604      	mov	r4, r0
    13fc:	4689      	mov	r9, r1
    13fe:	4690      	mov	r8, r2
    1400:	469a      	mov	sl, r3
    1402:	4d41      	ldr	r5, [pc, #260]	; (1508 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x114>)
    1404:	47a8      	blx	r5
    1406:	f8d8 3000 	ldr.w	r3, [r8]
    140a:	681b      	ldr	r3, [r3, #0]
    140c:	2201      	movs	r2, #1
    140e:	2104      	movs	r1, #4
    1410:	4640      	mov	r0, r8
    1412:	4798      	blx	r3
    1414:	2800      	cmp	r0, #0
    1416:	d054      	beq.n	14c2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    1418:	4605      	mov	r5, r0
    141a:	6823      	ldr	r3, [r4, #0]
    141c:	1ae3      	subs	r3, r4, r3
    141e:	881a      	ldrh	r2, [r3, #0]
    1420:	2a0a      	cmp	r2, #10
    1422:	dd69      	ble.n	14f8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    }
    case BuiltinOperator_UNIQUE: {
      auto params = safe_allocator.Allocate<TfLiteUniqueParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    1424:	8959      	ldrh	r1, [r3, #10]
    1426:	2900      	cmp	r1, #0
    return data_ - ReadScalar<soffset_t>(data_);
    1428:	d066      	beq.n	14f8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    142a:	5c61      	ldrb	r1, [r4, r1]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    142c:	2908      	cmp	r1, #8
    142e:	d163      	bne.n	14f8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    1430:	2a0c      	cmp	r2, #12
    1432:	dd61      	ble.n	14f8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1434:	899b      	ldrh	r3, [r3, #12]
  }
  const tflite::SplitVOptions *builtin_options_as_SplitVOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_SplitVOptions ? static_cast<const tflite::SplitVOptions *>(builtin_options()) : nullptr;
  }
  const tflite::UniqueOptions *builtin_options_as_UniqueOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_UniqueOptions ? static_cast<const tflite::UniqueOptions *>(builtin_options()) : nullptr;
    1436:	18e7      	adds	r7, r4, r3
    1438:	2b00      	cmp	r3, #0
    143a:	d05d      	beq.n	14f8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    143c:	58e6      	ldr	r6, [r4, r3]
    143e:	19bc      	adds	r4, r7, r6
    1440:	d05a      	beq.n	14f8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    auto p = data_ + field_offset;
    1442:	59bb      	ldr	r3, [r7, r6]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    1444:	1ae3      	subs	r3, r4, r3
    1446:	881a      	ldrh	r2, [r3, #0]
      const auto* unique_params = op->builtin_options_as_UniqueOptions();
      if (unique_params != nullptr) {
    1448:	2a04      	cmp	r2, #4
    144a:	dd47      	ble.n	14dc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe8>
    return data_ - ReadScalar<soffset_t>(data_);
    144c:	889b      	ldrh	r3, [r3, #4]
    144e:	2b00      	cmp	r3, #0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1450:	d046      	beq.n	14e0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xec>
    1452:	56e0      	ldrsb	r0, [r4, r3]
    1454:	b2c0      	uxtb	r0, r0
    1456:	4b2d      	ldr	r3, [pc, #180]	; (150c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>)
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1458:	4798      	blx	r3
        params->index_out_type =
            unique_params->idx_out_type() == tflite::TensorType_INT64
                ? TfLiteType::kTfLiteInt64
    145a:	7028      	strb	r0, [r5, #0]
    145c:	59bb      	ldr	r3, [r7, r6]
    145e:	1ae3      	subs	r3, r4, r3
    1460:	881a      	ldrh	r2, [r3, #0]
    1462:	2a08      	cmp	r2, #8
        params->index_out_type =
    1464:	dd3e      	ble.n	14e4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>
                : TfLiteType::kTfLiteInt32;
      }
      *builtin_data = params.release();
    1466:	891b      	ldrh	r3, [r3, #8]
      return kTfLiteOk;
    1468:	2b00      	cmp	r3, #0
    146a:	d03d      	beq.n	14e8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    146c:	5ce3      	ldrb	r3, [r4, r3]
    146e:	3300      	adds	r3, #0
    1470:	bf18      	it	ne
    1472:	2301      	movne	r3, #1
    1474:	70ab      	strb	r3, [r5, #2]
    1476:	59bb      	ldr	r3, [r7, r6]
    1478:	1ae3      	subs	r3, r4, r3
    147a:	881a      	ldrh	r2, [r3, #0]
    147c:	2a0a      	cmp	r2, #10
    147e:	dd35      	ble.n	14ec <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
    1480:	895b      	ldrh	r3, [r3, #10]
    1482:	2b00      	cmp	r3, #0
    1484:	d034      	beq.n	14f0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfc>
                ? TfLiteType::kTfLiteInt64
    1486:	5ce3      	ldrb	r3, [r4, r3]
    1488:	3300      	adds	r3, #0
    148a:	bf18      	it	ne
    148c:	2301      	movne	r3, #1
    148e:	70eb      	strb	r3, [r5, #3]
    1490:	59bb      	ldr	r3, [r7, r6]
    1492:	1ae3      	subs	r3, r4, r3
    1494:	881a      	ldrh	r2, [r3, #0]
    1496:	2a06      	cmp	r2, #6
    1498:	dd2c      	ble.n	14f4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x100>
    }
    case BuiltinOperator_REVERSE_SEQUENCE: {
      auto params = safe_allocator.Allocate<TfLiteReverseSequenceParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    149a:	88db      	ldrh	r3, [r3, #6]
    149c:	b353      	cbz	r3, 14f4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x100>
    return data_ - ReadScalar<soffset_t>(data_);
    149e:	56e3      	ldrsb	r3, [r4, r3]
    14a0:	b343      	cbz	r3, 14f4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x100>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    14a2:	2b01      	cmp	r3, #1
    14a4:	d02c      	beq.n	1500 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10c>
    14a6:	491a      	ldr	r1, [pc, #104]	; (1510 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>)
    14a8:	4648      	mov	r0, r9
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    14aa:	4b1a      	ldr	r3, [pc, #104]	; (1514 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>)
  }
  const tflite::RankOptions *builtin_options_as_RankOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_RankOptions ? static_cast<const tflite::RankOptions *>(builtin_options()) : nullptr;
  }
  const tflite::ReverseSequenceOptions *builtin_options_as_ReverseSequenceOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_ReverseSequenceOptions ? static_cast<const tflite::ReverseSequenceOptions *>(builtin_options()) : nullptr;
    14ac:	4798      	blx	r3
    14ae:	f8d8 3000 	ldr.w	r3, [r8]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    14b2:	685b      	ldr	r3, [r3, #4]
    14b4:	4629      	mov	r1, r5
    14b6:	4640      	mov	r0, r8
    auto p = data_ + field_offset;
    14b8:	4798      	blx	r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    14ba:	2001      	movs	r0, #1
    14bc:	b002      	add	sp, #8
      if (const auto* reverse_seq_params =
    14be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return data_ - ReadScalar<soffset_t>(data_);
    14c2:	4b15      	ldr	r3, [pc, #84]	; (1518 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>)
    14c4:	9301      	str	r3, [sp, #4]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    14c6:	f240 4352 	movw	r3, #1106	; 0x452
    14ca:	9300      	str	r3, [sp, #0]
    14cc:	4b13      	ldr	r3, [pc, #76]	; (151c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x128>)
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    14ce:	4a14      	ldr	r2, [pc, #80]	; (1520 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
    14d0:	4649      	mov	r1, r9
              op->builtin_options_as_ReverseSequenceOptions()) {
        params->seq_dim = reverse_seq_params->seq_dim();
    14d2:	4648      	mov	r0, r9
    return data_ - ReadScalar<soffset_t>(data_);
    14d4:	4c13      	ldr	r4, [pc, #76]	; (1524 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
    14d6:	47a0      	blx	r4
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    14d8:	2001      	movs	r0, #1
    14da:	e7ef      	b.n	14bc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
    14dc:	2000      	movs	r0, #0
    14de:	e7b9      	b.n	1454 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    14e0:	2000      	movs	r0, #0
    14e2:	e7b7      	b.n	1454 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
        params->batch_dim = reverse_seq_params->batch_dim();
    14e4:	2300      	movs	r3, #0
      }
      *builtin_data = params.release();
    14e6:	e7c2      	b.n	146e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7a>
      return kTfLiteOk;
    14e8:	2300      	movs	r3, #0
    14ea:	e7c0      	b.n	146e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7a>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    14ec:	2300      	movs	r3, #0
    14ee:	e7cb      	b.n	1488 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>
    14f0:	2300      	movs	r3, #0
    14f2:	e7c9      	b.n	1488 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>
    14f4:	2300      	movs	r3, #0
    14f6:	706b      	strb	r3, [r5, #1]
    14f8:	f8ca 5000 	str.w	r5, [sl]
    14fc:	2000      	movs	r0, #0
    14fe:	e7dd      	b.n	14bc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
    1500:	2301      	movs	r3, #1
    1502:	706b      	strb	r3, [r5, #1]
    1504:	e7f8      	b.n	14f8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    1506:	bf00      	nop
    1508:	00001201 	.word	0x00001201
    150c:	000011c9 	.word	0x000011c9
    1510:	00020024 	.word	0x00020024
    1514:	0000118d 	.word	0x0000118d
    1518:	00020010 	.word	0x00020010
    151c:	0001ffc0 	.word	0x0001ffc0
    1520:	0001fff8 	.word	0x0001fff8
    }
    case BuiltinOperator_IF: {
      auto params = safe_allocator.Allocate<TfLiteIfParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    1524:	000011ab 	.word	0x000011ab

00001528 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
    return data_ - ReadScalar<soffset_t>(data_);
    1528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    152c:	b082      	sub	sp, #8
    152e:	4604      	mov	r4, r0
    1530:	460f      	mov	r7, r1
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1532:	4615      	mov	r5, r2
  }
  const tflite::HardSwishOptions *builtin_options_as_HardSwishOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_HardSwishOptions ? static_cast<const tflite::HardSwishOptions *>(builtin_options()) : nullptr;
  }
  const tflite::IfOptions *builtin_options_as_IfOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_IfOptions ? static_cast<const tflite::IfOptions *>(builtin_options()) : nullptr;
    1534:	4698      	mov	r8, r3
    1536:	4e45      	ldr	r6, [pc, #276]	; (164c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>)
    1538:	47b0      	blx	r6
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    153a:	682b      	ldr	r3, [r5, #0]
    153c:	681b      	ldr	r3, [r3, #0]
    153e:	2204      	movs	r2, #4
    auto p = data_ + field_offset;
    1540:	2128      	movs	r1, #40	; 0x28
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    1542:	4628      	mov	r0, r5
    1544:	4798      	blx	r3
      if (const auto* if_params = op->builtin_options_as_IfOptions()) {
    1546:	2800      	cmp	r0, #0
    1548:	d05b      	beq.n	1602 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xda>
    return data_ - ReadScalar<soffset_t>(data_);
    154a:	4606      	mov	r6, r0
    154c:	6823      	ldr	r3, [r4, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    154e:	1ae3      	subs	r3, r4, r3
    1550:	881a      	ldrh	r2, [r3, #0]
    1552:	2a0a      	cmp	r2, #10
    1554:	dd4f      	ble.n	15f6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1556:	8959      	ldrh	r1, [r3, #10]
    1558:	2900      	cmp	r1, #0
        params->then_subgraph_index = if_params->then_subgraph_index();
    155a:	d04c      	beq.n	15f6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    return data_ - ReadScalar<soffset_t>(data_);
    155c:	5c61      	ldrb	r1, [r4, r1]
    155e:	2905      	cmp	r1, #5
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1560:	d149      	bne.n	15f6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    1562:	2a0c      	cmp	r2, #12
    1564:	dd47      	ble.n	15f6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    1566:	899b      	ldrh	r3, [r3, #12]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1568:	18e7      	adds	r7, r4, r3
    156a:	2b00      	cmp	r3, #0
        params->else_subgraph_index = if_params->else_subgraph_index();
    156c:	d043      	beq.n	15f6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
      }
      *builtin_data = params.release();
    156e:	58e5      	ldr	r5, [r4, r3]
      return kTfLiteOk;
    1570:	197c      	adds	r4, r7, r5
    1572:	d040      	beq.n	15f6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    1574:	597b      	ldr	r3, [r7, r5]
    1576:	1ae3      	subs	r3, r4, r3
    1578:	881a      	ldrh	r2, [r3, #0]
    157a:	2a04      	cmp	r2, #4
    157c:	dd4e      	ble.n	161c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>
    157e:	889b      	ldrh	r3, [r3, #4]
    1580:	2b00      	cmp	r3, #0
    1582:	d04d      	beq.n	1620 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
    1584:	56e0      	ldrsb	r0, [r4, r3]
    1586:	b2c0      	uxtb	r0, r0
    1588:	4b31      	ldr	r3, [pc, #196]	; (1650 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x128>)
    158a:	4798      	blx	r3
    158c:	7030      	strb	r0, [r6, #0]
    158e:	597b      	ldr	r3, [r7, r5]
    1590:	1ae3      	subs	r3, r4, r3
    1592:	881a      	ldrh	r2, [r3, #0]
    1594:	2a06      	cmp	r2, #6
    1596:	dd45      	ble.n	1624 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfc>
    1598:	88db      	ldrh	r3, [r3, #6]
    159a:	2b00      	cmp	r3, #0
    159c:	d044      	beq.n	1628 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x100>
    159e:	58e3      	ldr	r3, [r4, r3]
    15a0:	6073      	str	r3, [r6, #4]
    15a2:	597b      	ldr	r3, [r7, r5]
    15a4:	1ae3      	subs	r3, r4, r3
    15a6:	881a      	ldrh	r2, [r3, #0]
    15a8:	2a08      	cmp	r2, #8
    }
    case BuiltinOperator_WHILE: {
      auto params = safe_allocator.Allocate<TfLiteWhileParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    15aa:	dd3f      	ble.n	162c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    15ac:	891b      	ldrh	r3, [r3, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    15ae:	2b00      	cmp	r3, #0
    15b0:	d03e      	beq.n	1630 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x108>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    15b2:	58e3      	ldr	r3, [r4, r3]
    15b4:	60b3      	str	r3, [r6, #8]
    15b6:	597b      	ldr	r3, [r7, r5]
    15b8:	1ae3      	subs	r3, r4, r3
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    15ba:	881a      	ldrh	r2, [r3, #0]
  }
  const tflite::WhileOptions *builtin_options_as_WhileOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_WhileOptions ? static_cast<const tflite::WhileOptions *>(builtin_options()) : nullptr;
    15bc:	2a0a      	cmp	r2, #10
    15be:	dd39      	ble.n	1634 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10c>
    15c0:	895b      	ldrh	r3, [r3, #10]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    15c2:	2b00      	cmp	r3, #0
    15c4:	d038      	beq.n	1638 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x110>
    15c6:	58e3      	ldr	r3, [r4, r3]
    auto p = data_ + field_offset;
    15c8:	60f3      	str	r3, [r6, #12]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    15ca:	597b      	ldr	r3, [r7, r5]
    15cc:	1ae3      	subs	r3, r4, r3
      if (const auto* while_params = op->builtin_options_as_WhileOptions()) {
    15ce:	881a      	ldrh	r2, [r3, #0]
    15d0:	2a0c      	cmp	r2, #12
    return data_ - ReadScalar<soffset_t>(data_);
    15d2:	dd33      	ble.n	163c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x114>
    15d4:	899b      	ldrh	r3, [r3, #12]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    15d6:	2b00      	cmp	r3, #0
    15d8:	d032      	beq.n	1640 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>
    15da:	58e3      	ldr	r3, [r4, r3]
    15dc:	6133      	str	r3, [r6, #16]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    15de:	597b      	ldr	r3, [r7, r5]
    15e0:	1ae3      	subs	r3, r4, r3
        params->cond_subgraph_index = while_params->cond_subgraph_index();
    15e2:	881a      	ldrh	r2, [r3, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    15e4:	2a0e      	cmp	r2, #14
    15e6:	dd2d      	ble.n	1644 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    15e8:	89db      	ldrh	r3, [r3, #14]
    15ea:	b36b      	cbz	r3, 1648 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>
    15ec:	56e0      	ldrsb	r0, [r4, r3]
    15ee:	b2c0      	uxtb	r0, r0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    15f0:	4b18      	ldr	r3, [pc, #96]	; (1654 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
    15f2:	4798      	blx	r3
        params->body_subgraph_index = while_params->body_subgraph_index();
    15f4:	7530      	strb	r0, [r6, #20]
      }
      *builtin_data = params.release();
    15f6:	f8c8 6000 	str.w	r6, [r8]
      return kTfLiteOk;
    15fa:	2000      	movs	r0, #0
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    15fc:	b002      	add	sp, #8
    15fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1602:	4b15      	ldr	r3, [pc, #84]	; (1658 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
    1604:	9301      	str	r3, [sp, #4]
    1606:	f240 5349 	movw	r3, #1353	; 0x549
    160a:	9300      	str	r3, [sp, #0]
    160c:	4b13      	ldr	r3, [pc, #76]	; (165c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
    160e:	4a14      	ldr	r2, [pc, #80]	; (1660 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
    1610:	4639      	mov	r1, r7
    1612:	4638      	mov	r0, r7
    1614:	4c13      	ldr	r4, [pc, #76]	; (1664 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
    1616:	47a0      	blx	r4
    1618:	2001      	movs	r0, #1
    161a:	e7ef      	b.n	15fc <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
    161c:	2000      	movs	r0, #0
    161e:	e7b2      	b.n	1586 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
    1620:	2000      	movs	r0, #0
    1622:	e7b0      	b.n	1586 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
    1624:	2300      	movs	r3, #0
    1626:	e7bb      	b.n	15a0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>
    1628:	2300      	movs	r3, #0
    162a:	e7b9      	b.n	15a0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>
    162c:	2300      	movs	r3, #0
    162e:	e7c1      	b.n	15b4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    1630:	2300      	movs	r3, #0
    }
    case BuiltinOperator_BATCH_MATMUL: {
      auto params = safe_allocator.Allocate<TfLiteBatchMatMulParams>();
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    1632:	e7bf      	b.n	15b4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    1634:	2300      	movs	r3, #0
    1636:	e7c7      	b.n	15c8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    return data_ - ReadScalar<soffset_t>(data_);
    1638:	2300      	movs	r3, #0
    163a:	e7c5      	b.n	15c8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    163c:	2300      	movs	r3, #0
    163e:	e7cd      	b.n	15dc <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb4>
    1640:	2300      	movs	r3, #0
    1642:	e7cb      	b.n	15dc <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb4>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1644:	2000      	movs	r0, #0
  }
  const tflite::SegmentSumOptions *builtin_options_as_SegmentSumOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_SegmentSumOptions ? static_cast<const tflite::SegmentSumOptions *>(builtin_options()) : nullptr;
  }
  const tflite::BatchMatMulOptions *builtin_options_as_BatchMatMulOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_BatchMatMulOptions ? static_cast<const tflite::BatchMatMulOptions *>(builtin_options()) : nullptr;
    1646:	e7d2      	b.n	15ee <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    1648:	2000      	movs	r0, #0
    164a:	e7d0      	b.n	15ee <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    164c:	00001201 	.word	0x00001201
    1650:	000011f1 	.word	0x000011f1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    1654:	000011c9 	.word	0x000011c9
      if (const auto* bmm_params =
    1658:	00020010 	.word	0x00020010
    return data_ - ReadScalar<soffset_t>(data_);
    165c:	0001ffc0 	.word	0x0001ffc0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1660:	0001fff8 	.word	0x0001fff8
    1664:	000011ab 	.word	0x000011ab

00001668 <_ZN6tflite9ParseReluEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1668:	2000      	movs	r0, #0
    166a:	4770      	bx	lr

0000166c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
    return GetField<uint8_t>(VT_ADJ_X, 0) != 0;
    166c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1670:	b082      	sub	sp, #8
    1672:	4604      	mov	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    1674:	4688      	mov	r8, r1
    1676:	4615      	mov	r5, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1678:	461e      	mov	r6, r3
    167a:	4f1d      	ldr	r7, [pc, #116]	; (16f0 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>)
    167c:	47b8      	blx	r7
    167e:	682b      	ldr	r3, [r5, #0]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1680:	681b      	ldr	r3, [r3, #0]
    1682:	2204      	movs	r2, #4
    return GetField<uint8_t>(VT_ADJ_Y, 0) != 0;
    1684:	4611      	mov	r1, r2
    1686:	4628      	mov	r0, r5
    1688:	4798      	blx	r3
    168a:	b300      	cbz	r0, 16ce <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x62>
              op->builtin_options_as_BatchMatMulOptions()) {
        params->adj_x = bmm_params->adj_x();
        params->adj_y = bmm_params->adj_y();
      }
      *builtin_data = params.release();
    168c:	4602      	mov	r2, r0
      return kTfLiteOk;
    168e:	6823      	ldr	r3, [r4, #0]
    1690:	1ae3      	subs	r3, r4, r3
    1692:	8819      	ldrh	r1, [r3, #0]
    1694:	290a      	cmp	r1, #10
    1696:	dd15      	ble.n	16c4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    1698:	8958      	ldrh	r0, [r3, #10]
    169a:	b198      	cbz	r0, 16c4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    169c:	5c20      	ldrb	r0, [r4, r0]
    169e:	2809      	cmp	r0, #9
    16a0:	d110      	bne.n	16c4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    16a2:	290c      	cmp	r1, #12
      TF_LITE_ENSURE(error_reporter, params != nullptr);
    16a4:	dd0e      	ble.n	16c4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    16a6:	899b      	ldrh	r3, [r3, #12]
    16a8:	18e1      	adds	r1, r4, r3
    16aa:	b15b      	cbz	r3, 16c4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    16ac:	58e3      	ldr	r3, [r4, r3]
    16ae:	18c8      	adds	r0, r1, r3
    16b0:	d008      	beq.n	16c4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    16b2:	58cb      	ldr	r3, [r1, r3]
    16b4:	1ac3      	subs	r3, r0, r3
    16b6:	8819      	ldrh	r1, [r3, #0]
    16b8:	2904      	cmp	r1, #4
    16ba:	dd15      	ble.n	16e8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7c>
    16bc:	889b      	ldrh	r3, [r3, #4]
    16be:	b1ab      	cbz	r3, 16ec <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x80>
    16c0:	58c3      	ldr	r3, [r0, r3]
    16c2:	6013      	str	r3, [r2, #0]
    16c4:	6032      	str	r2, [r6, #0]
    16c6:	2000      	movs	r0, #0
    16c8:	b002      	add	sp, #8
    16ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return kTfLiteOk;
    16ce:	4b09      	ldr	r3, [pc, #36]	; (16f4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>)
  return kTfLiteError;
#else
  return ParseOpDataTfLite(op, op_type, error_reporter, allocator,
                           builtin_data);
#endif
}
    16d0:	9301      	str	r3, [sp, #4]
    16d2:	f240 53fd 	movw	r3, #1533	; 0x5fd
    16d6:	9300      	str	r3, [sp, #0]
    void operator()(void* data) { allocator_->Deallocate(data); }
    16d8:	4b07      	ldr	r3, [pc, #28]	; (16f8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>)
    16da:	4a08      	ldr	r2, [pc, #32]	; (16fc <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>)
    16dc:	4641      	mov	r1, r8
    16de:	4640      	mov	r0, r8
    16e0:	4c07      	ldr	r4, [pc, #28]	; (1700 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>)
    16e2:	47a0      	blx	r4
    16e4:	2001      	movs	r0, #1
    16e6:	e7ef      	b.n	16c8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>
    16e8:	2300      	movs	r3, #0
    16ea:	e7ea      	b.n	16c2 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x56>
    16ec:	2300      	movs	r3, #0
                           builtin_data);
    16ee:	e7e8      	b.n	16c2 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x56>
    16f0:	00001201 	.word	0x00001201
    16f4:	00020010 	.word	0x00020010
    16f8:	0001ffc0 	.word	0x0001ffc0
    16fc:	0001fff8 	.word	0x0001fff8
    1700:	000011ab 	.word	0x000011ab

00001704 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
    1704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1708:	460e      	mov	r6, r1
    170a:	4617      	mov	r7, r2
    170c:	461d      	mov	r5, r3
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
    170e:	2300      	movs	r3, #0
    1710:	602b      	str	r3, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    1712:	6803      	ldr	r3, [r0, #0]
    1714:	1ac3      	subs	r3, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1716:	881a      	ldrh	r2, [r3, #0]
    1718:	2a04      	cmp	r2, #4
    171a:	dd41      	ble.n	17a0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9c>
    171c:	8899      	ldrh	r1, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    171e:	2900      	cmp	r1, #0
    1720:	d03e      	beq.n	17a0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9c>
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
    1722:	5c44      	ldrb	r4, [r0, r1]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1724:	2a08      	cmp	r2, #8
    1726:	dd1b      	ble.n	1760 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5c>
    1728:	8919      	ldrh	r1, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    172a:	b1e1      	cbz	r1, 1766 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x62>
    172c:	f850 8001 	ldr.w	r8, [r0, r1]
  auto builtin_code = opcode->builtin_code();
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX ||
    1730:	2c7e      	cmp	r4, #126	; 0x7e
    1732:	dc1b      	bgt.n	176c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x68>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
    1734:	2c20      	cmp	r4, #32
    1736:	d13a      	bne.n	17ae <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xaa>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    1738:	2a06      	cmp	r2, #6
    173a:	dd2a      	ble.n	1792 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x8e>
    173c:	88db      	ldrh	r3, [r3, #6]
    auto p = data_ + field_offset;
    173e:	18c1      	adds	r1, r0, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    1740:	b33b      	cbz	r3, 1792 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x8e>
    1742:	58c3      	ldr	r3, [r0, r3]
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
    }
  } else if (!opcode->custom_code()) {
    1744:	18c9      	adds	r1, r1, r3
    1746:	d024      	beq.n	1792 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x8e>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
  } else {
    const char* name = opcode->custom_code()->c_str();
    *registration = op_resolver.FindOp(name, version);
    1748:	6833      	ldr	r3, [r6, #0]
    174a:	685b      	ldr	r3, [r3, #4]
    174c:	4642      	mov	r2, r8
    174e:	3104      	adds	r1, #4
    1750:	4630      	mov	r0, r6
    1752:	4798      	blx	r3
    1754:	6028      	str	r0, [r5, #0]
    status = kTfLiteError;
    1756:	fab0 f080 	clz	r0, r0
    175a:	0940      	lsrs	r0, r0, #5
    175c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    1760:	f04f 0801 	mov.w	r8, #1
    1764:	e7e4      	b.n	1730 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x2c>
    1766:	f04f 0801 	mov.w	r8, #1
    176a:	e7e1      	b.n	1730 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x2c>
    TF_LITE_REPORT_ERROR(
    176c:	4622      	mov	r2, r4
    176e:	4916      	ldr	r1, [pc, #88]	; (17c8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc4>)
    1770:	4638      	mov	r0, r7
    1772:	4b16      	ldr	r3, [pc, #88]	; (17cc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc8>)
    1774:	4798      	blx	r3
    status = kTfLiteError;
    1776:	2001      	movs	r0, #1
    1778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      TF_LITE_REPORT_ERROR(
    177c:	4643      	mov	r3, r8
    177e:	4a14      	ldr	r2, [pc, #80]	; (17d0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xcc>)
    1780:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    1784:	4913      	ldr	r1, [pc, #76]	; (17d4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd0>)
    1786:	4638      	mov	r0, r7
    1788:	4c10      	ldr	r4, [pc, #64]	; (17cc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc8>)
    178a:	47a0      	blx	r4
      status = kTfLiteError;
    178c:	2001      	movs	r0, #1
    178e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TF_LITE_REPORT_ERROR(
    1792:	4911      	ldr	r1, [pc, #68]	; (17d8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>)
    1794:	4638      	mov	r0, r7
    1796:	4b0d      	ldr	r3, [pc, #52]	; (17cc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc8>)
    1798:	4798      	blx	r3
    status = kTfLiteError;
    179a:	2001      	movs	r0, #1
    179c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    17a0:	2a08      	cmp	r2, #8
    17a2:	dd01      	ble.n	17a8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa4>
    17a4:	2400      	movs	r4, #0
    17a6:	e7bf      	b.n	1728 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x24>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    17a8:	f04f 0801 	mov.w	r8, #1
    17ac:	2400      	movs	r4, #0
    *registration = op_resolver.FindOp(builtin_code, version);
    17ae:	6833      	ldr	r3, [r6, #0]
    17b0:	681b      	ldr	r3, [r3, #0]
    17b2:	4642      	mov	r2, r8
    17b4:	4621      	mov	r1, r4
    17b6:	4630      	mov	r0, r6
    17b8:	4798      	blx	r3
    17ba:	6028      	str	r0, [r5, #0]
    if (*registration == nullptr) {
    17bc:	2800      	cmp	r0, #0
    17be:	d0dd      	beq.n	177c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x78>
  TfLiteStatus status = kTfLiteOk;
    17c0:	2000      	movs	r0, #0
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
    17c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    17c6:	bf00      	nop
    17c8:	000202cc 	.word	0x000202cc
    17cc:	0000118d 	.word	0x0000118d
    17d0:	000200cc 	.word	0x000200cc
    17d4:	00020320 	.word	0x00020320
    17d8:	00020358 	.word	0x00020358

000017dc <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>:
#include "tensorflow_c_files/common.h"

namespace tflite {

TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
  if (!tensor->is_variable) {
    17dc:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    17e0:	b193      	cbz	r3, 1808 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x2c>
TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
    17e2:	b430      	push	{r4, r5}
    return kTfLiteOk;
  }
  // TODO(b/115961645): Implement - If a variable tensor has a buffer, reset it
  // to the value of the buffer.
  int value = 0;
  if (tensor->type == kTfLiteInt8) {
    17e4:	7803      	ldrb	r3, [r0, #0]
    17e6:	2b09      	cmp	r3, #9
    value = tensor->params.zero_point;
    17e8:	bf0c      	ite	eq
    17ea:	6905      	ldreq	r5, [r0, #16]
  int value = 0;
    17ec:	2500      	movne	r5, #0
#if __ANDROID__ || defined(__x86_64__) || defined(__i386__) || \
    defined(__i386) || defined(__x86__) || defined(__X86__) || \
    defined(_X86_) || defined(_M_IX86) || defined(_M_X64)
  memset(tensor->data.raw, value, tensor->bytes);
#else
  char* raw_ptr = tensor->data.raw;
    17ee:	6844      	ldr	r4, [r0, #4]
  for (size_t i = 0; i < tensor->bytes; ++i) {
    17f0:	6983      	ldr	r3, [r0, #24]
    17f2:	b133      	cbz	r3, 1802 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x26>
    17f4:	4623      	mov	r3, r4
    *raw_ptr = value;
    17f6:	f803 5b01 	strb.w	r5, [r3], #1
  for (size_t i = 0; i < tensor->bytes; ++i) {
    17fa:	1b1a      	subs	r2, r3, r4
    17fc:	6981      	ldr	r1, [r0, #24]
    17fe:	4291      	cmp	r1, r2
    1800:	d8f9      	bhi.n	17f6 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x1a>
    raw_ptr++;
  }
#endif
  return kTfLiteOk;
}
    1802:	2000      	movs	r0, #0
    1804:	bc30      	pop	{r4, r5}
    1806:	4770      	bx	lr
    1808:	2000      	movs	r0, #0
    180a:	4770      	bx	lr

0000180c <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
    180c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    1810:	4680      	mov	r8, r0
    1812:	4689      	mov	r9, r1
    1814:	4616      	mov	r6, r2
    1816:	461c      	mov	r4, r3
  if (double_multiplier == 0.) {
    1818:	2200      	movs	r2, #0
    181a:	2300      	movs	r3, #0
    181c:	4d1c      	ldr	r5, [pc, #112]	; (1890 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x84>)
    181e:	47a8      	blx	r5
    1820:	b120      	cbz	r0, 182c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x20>
    *quantized_multiplier = 0;
    1822:	2300      	movs	r3, #0
    1824:	6033      	str	r3, [r6, #0]
    *shift = 0;
    1826:	6023      	str	r3, [r4, #0]
    1828:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
    182c:	4622      	mov	r2, r4
    182e:	4640      	mov	r0, r8
    1830:	4649      	mov	r1, r9
    1832:	4b18      	ldr	r3, [pc, #96]	; (1894 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x88>)
    1834:	4798      	blx	r3
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    1836:	2200      	movs	r2, #0
    1838:	4b17      	ldr	r3, [pc, #92]	; (1898 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8c>)
    183a:	4d18      	ldr	r5, [pc, #96]	; (189c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x90>)
    183c:	47a8      	blx	r5
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
    183e:	4b18      	ldr	r3, [pc, #96]	; (18a0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x94>)
    1840:	4798      	blx	r3
    1842:	4b18      	ldr	r3, [pc, #96]	; (18a4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x98>)
    1844:	4798      	blx	r3
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    1846:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    184a:	2300      	movs	r3, #0
    184c:	4282      	cmp	r2, r0
    184e:	418b      	sbcs	r3, r1
    1850:	db13      	blt.n	187a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x6e>
  if (q_fixed == (1ll << 31)) {
    1852:	2900      	cmp	r1, #0
    1854:	bf08      	it	eq
    1856:	f1b0 4f00 	cmpeq.w	r0, #2147483648	; 0x80000000
    185a:	d010      	beq.n	187e <_ZN6tflite18QuantizeMultiplierEdPlPi+0x72>
    q_fixed /= 2;
    ++*shift;
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
    185c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    1860:	f171 0300 	sbcs.w	r3, r1, #0
    1864:	da11      	bge.n	188a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x7e>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
    1866:	6823      	ldr	r3, [r4, #0]
    1868:	f113 0f1f 	cmn.w	r3, #31
    186c:	da02      	bge.n	1874 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x68>
    *shift = 0;
    186e:	2300      	movs	r3, #0
    1870:	6023      	str	r3, [r4, #0]
    q_fixed = 0;
    1872:	2000      	movs	r0, #0
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
    1874:	6030      	str	r0, [r6, #0]
    1876:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    187a:	4b0b      	ldr	r3, [pc, #44]	; (18a8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x9c>)
    187c:	4798      	blx	r3
    ++*shift;
    187e:	6823      	ldr	r3, [r4, #0]
    1880:	3301      	adds	r3, #1
    1882:	6023      	str	r3, [r4, #0]
    q_fixed /= 2;
    1884:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    1888:	e7ed      	b.n	1866 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x5a>
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
    188a:	4b07      	ldr	r3, [pc, #28]	; (18a8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x9c>)
    188c:	4798      	blx	r3
    188e:	bf00      	nop
    1890:	00011eb1 	.word	0x00011eb1
    1894:	00011231 	.word	0x00011231
    1898:	41e00000 	.word	0x41e00000
    189c:	000119e1 	.word	0x000119e1
    18a0:	00011295 	.word	0x00011295
    18a4:	00012669 	.word	0x00012669
    18a8:	000138bd 	.word	0x000138bd

000018ac <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:
}

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
    18ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    18b0:	4606      	mov	r6, r0
    18b2:	460f      	mov	r7, r1
    18b4:	4690      	mov	r8, r2
    18b6:	461c      	mov	r4, r3
  TFLITE_CHECK_GT(double_multiplier, 1.);
    18b8:	2200      	movs	r2, #0
    18ba:	4b09      	ldr	r3, [pc, #36]	; (18e0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x34>)
    18bc:	4d09      	ldr	r5, [pc, #36]	; (18e4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x38>)
    18be:	47a8      	blx	r5
    18c0:	b150      	cbz	r0, 18d8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x2c>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
    18c2:	4623      	mov	r3, r4
    18c4:	4642      	mov	r2, r8
    18c6:	4630      	mov	r0, r6
    18c8:	4639      	mov	r1, r7
    18ca:	4d07      	ldr	r5, [pc, #28]	; (18e8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3c>)
    18cc:	47a8      	blx	r5
  TFLITE_CHECK_GE(*left_shift, 0);
    18ce:	6823      	ldr	r3, [r4, #0]
    18d0:	2b00      	cmp	r3, #0
    18d2:	db03      	blt.n	18dc <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x30>
    18d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_CHECK_GT(double_multiplier, 1.);
    18d8:	4b04      	ldr	r3, [pc, #16]	; (18ec <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x40>)
    18da:	4798      	blx	r3
  TFLITE_CHECK_GE(*left_shift, 0);
    18dc:	4b03      	ldr	r3, [pc, #12]	; (18ec <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x40>)
    18de:	4798      	blx	r3
    18e0:	3ff00000 	.word	0x3ff00000
    18e4:	00011f01 	.word	0x00011f01
    18e8:	0000180d 	.word	0x0000180d
    18ec:	000138bd 	.word	0x000138bd

000018f0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
    18f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18f4:	4682      	mov	sl, r0
    18f6:	468b      	mov	fp, r1
    18f8:	4616      	mov	r6, r2
    18fa:	461f      	mov	r7, r3
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    18fc:	980a      	ldr	r0, [sp, #40]	; 0x28
    18fe:	f1c0 001f 	rsb	r0, r0, #31
    1902:	2301      	movs	r3, #1
    1904:	fa03 f000 	lsl.w	r0, r3, r0
    1908:	4b13      	ldr	r3, [pc, #76]	; (1958 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x68>)
    190a:	4798      	blx	r3
    190c:	4680      	mov	r8, r0
    190e:	4689      	mov	r9, r1
    1910:	4c12      	ldr	r4, [pc, #72]	; (195c <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x6c>)
    1912:	4632      	mov	r2, r6
    1914:	463b      	mov	r3, r7
    1916:	4650      	mov	r0, sl
    1918:	4659      	mov	r1, fp
    191a:	47a0      	blx	r4
    191c:	4602      	mov	r2, r0
    191e:	460b      	mov	r3, r1
    1920:	4640      	mov	r0, r8
    1922:	4649      	mov	r1, r9
    1924:	47a0      	blx	r4
    1926:	4604      	mov	r4, r0
    1928:	460d      	mov	r5, r1
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    192a:	a309      	add	r3, pc, #36	; (adr r3, 1950 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x60>)
    192c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1930:	4e0b      	ldr	r6, [pc, #44]	; (1960 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x70>)
    1932:	47b0      	blx	r6
    1934:	b938      	cbnz	r0, 1946 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x56>
	return __b;
      return __a;
    1936:	4620      	mov	r0, r4
    1938:	4629      	mov	r1, r5
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
                                   quantized_multiplier, left_shift);
    193a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    193c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    193e:	4c09      	ldr	r4, [pc, #36]	; (1964 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x74>)
    1940:	47a0      	blx	r4
    1942:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return __b;
    1946:	a102      	add	r1, pc, #8	; (adr r1, 1950 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x60>)
    1948:	e9d1 0100 	ldrd	r0, r1, [r1]
    194c:	e7f5      	b.n	193a <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x4a>
    194e:	bf00      	nop
    1950:	ffc00000 	.word	0xffc00000
    1954:	41dfffff 	.word	0x41dfffff
    1958:	00011915 	.word	0x00011915
    195c:	000119e1 	.word	0x000119e1
    1960:	00011f01 	.word	0x00011f01
    1964:	000018ad 	.word	0x000018ad

00001968 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
    1968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    196c:	4681      	mov	r9, r0
    196e:	4688      	mov	r8, r1
    1970:	4615      	mov	r5, r2
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
    1972:	2401      	movs	r4, #1
    1974:	fa04 f000 	lsl.w	r0, r4, r0
    1978:	3801      	subs	r0, #1
    197a:	4b19      	ldr	r3, [pc, #100]	; (19e0 <_ZN6tflite20CalculateInputRadiusEiii+0x78>)
    197c:	4798      	blx	r3
    197e:	4606      	mov	r6, r0
    1980:	460f      	mov	r7, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
    1982:	eba5 0009 	sub.w	r0, r5, r9
    1986:	f1a0 0120 	sub.w	r1, r0, #32
    198a:	f1c0 0320 	rsb	r3, r0, #32
    198e:	fa04 f101 	lsl.w	r1, r4, r1
    1992:	fa24 f303 	lsr.w	r3, r4, r3
      1.0 * ((1 << input_integer_bits) - 1) *
    1996:	4d13      	ldr	r5, [pc, #76]	; (19e4 <_ZN6tflite20CalculateInputRadiusEiii+0x7c>)
    1998:	fa04 f000 	lsl.w	r0, r4, r0
    199c:	4319      	orrs	r1, r3
    199e:	47a8      	blx	r5
    19a0:	4602      	mov	r2, r0
    19a2:	460b      	mov	r3, r1
    19a4:	4630      	mov	r0, r6
    19a6:	4639      	mov	r1, r7
    19a8:	4e0f      	ldr	r6, [pc, #60]	; (19e8 <_ZN6tflite20CalculateInputRadiusEiii+0x80>)
    19aa:	47b0      	blx	r6
    19ac:	4606      	mov	r6, r0
    19ae:	460f      	mov	r7, r1
      (1ll << input_left_shift);
    19b0:	f1a8 0120 	sub.w	r1, r8, #32
    19b4:	f1c8 0320 	rsb	r3, r8, #32
    19b8:	fa04 f101 	lsl.w	r1, r4, r1
    19bc:	fa24 f303 	lsr.w	r3, r4, r3
      (1ll << (total_signed_bits - input_integer_bits)) /
    19c0:	fa04 f008 	lsl.w	r0, r4, r8
    19c4:	4319      	orrs	r1, r3
    19c6:	47a8      	blx	r5
      (1ll << input_left_shift);
    19c8:	4602      	mov	r2, r0
    19ca:	460b      	mov	r3, r1
    19cc:	4630      	mov	r0, r6
    19ce:	4639      	mov	r1, r7
    19d0:	4c06      	ldr	r4, [pc, #24]	; (19ec <_ZN6tflite20CalculateInputRadiusEiii+0x84>)
    19d2:	47a0      	blx	r4
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
    19d4:	4b06      	ldr	r3, [pc, #24]	; (19f0 <_ZN6tflite20CalculateInputRadiusEiii+0x88>)
    19d6:	4798      	blx	r3
    19d8:	4b06      	ldr	r3, [pc, #24]	; (19f4 <_ZN6tflite20CalculateInputRadiusEiii+0x8c>)
    19da:	4798      	blx	r3
#endif  // TFLITE_EMULATE_FLOAT
}
    19dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    19e0:	00011915 	.word	0x00011915
    19e4:	00011985 	.word	0x00011985
    19e8:	000119e1 	.word	0x000119e1
    19ec:	00011c35 	.word	0x00011c35
    19f0:	00011119 	.word	0x00011119
    19f4:	00011f15 	.word	0x00011f15

000019f8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
    19f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    19fc:	b082      	sub	sp, #8
    19fe:	4680      	mov	r8, r0
    1a00:	4608      	mov	r0, r1
    1a02:	461d      	mov	r5, r3
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
    1a04:	68d1      	ldr	r1, [r2, #12]
    1a06:	68c0      	ldr	r0, [r0, #12]
    1a08:	4b13      	ldr	r3, [pc, #76]	; (1a58 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
    1a0a:	4798      	blx	r3
    1a0c:	4604      	mov	r4, r0
    1a0e:	4b13      	ldr	r3, [pc, #76]	; (1a5c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x64>)
    1a10:	4798      	blx	r3
    1a12:	4606      	mov	r6, r0
    1a14:	460f      	mov	r7, r1
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    1a16:	2100      	movs	r1, #0
    1a18:	4620      	mov	r0, r4
    1a1a:	4b11      	ldr	r3, [pc, #68]	; (1a60 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x68>)
    1a1c:	4798      	blx	r3
    1a1e:	b178      	cbz	r0, 1a40 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x48>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
    1a20:	68e8      	ldr	r0, [r5, #12]
    1a22:	4b0e      	ldr	r3, [pc, #56]	; (1a5c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x64>)
    1a24:	4798      	blx	r3
    1a26:	4602      	mov	r2, r0
    1a28:	460b      	mov	r3, r1
    1a2a:	4630      	mov	r0, r6
    1a2c:	4639      	mov	r1, r7
    1a2e:	4c0d      	ldr	r4, [pc, #52]	; (1a64 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x6c>)
    1a30:	47a0      	blx	r4
    1a32:	9b08      	ldr	r3, [sp, #32]
    1a34:	e9c3 0100 	strd	r0, r1, [r3]

  return kTfLiteOk;
    1a38:	2000      	movs	r0, #0
}
    1a3a:	b002      	add	sp, #8
    1a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    1a40:	4b09      	ldr	r3, [pc, #36]	; (1a68 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>)
    1a42:	9300      	str	r3, [sp, #0]
    1a44:	f8d8 4014 	ldr.w	r4, [r8, #20]
    1a48:	23a7      	movs	r3, #167	; 0xa7
    1a4a:	4a08      	ldr	r2, [pc, #32]	; (1a6c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x74>)
    1a4c:	4908      	ldr	r1, [pc, #32]	; (1a70 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x78>)
    1a4e:	4640      	mov	r0, r8
    1a50:	47a0      	blx	r4
    1a52:	2001      	movs	r0, #1
    1a54:	e7f1      	b.n	1a3a <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x42>
    1a56:	bf00      	nop
    1a58:	00012261 	.word	0x00012261
    1a5c:	00011939 	.word	0x00011939
    1a60:	000125c5 	.word	0x000125c5
    1a64:	00011c35 	.word	0x00011c35
    1a68:	00020954 	.word	0x00020954
    1a6c:	00020928 	.word	0x00020928
    1a70:	0001fff8 	.word	0x0001fff8
    1a74:	00000000 	.word	0x00000000

00001a78 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
                                              double* multiplier) {
    1a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1a7c:	b082      	sub	sp, #8
    1a7e:	4682      	mov	sl, r0
    1a80:	460d      	mov	r5, r1
    1a82:	4617      	mov	r7, r2
    1a84:	461c      	mov	r4, r3
  const double input_product_scale = static_cast<double>(input->params.scale) *
    1a86:	4e22      	ldr	r6, [pc, #136]	; (1b10 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
    1a88:	68c8      	ldr	r0, [r1, #12]
    1a8a:	47b0      	blx	r6
    1a8c:	4680      	mov	r8, r0
    1a8e:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
    1a90:	68f8      	ldr	r0, [r7, #12]
    1a92:	47b0      	blx	r6
    1a94:	4602      	mov	r2, r0
    1a96:	460b      	mov	r3, r1
    1a98:	4640      	mov	r0, r8
    1a9a:	4649      	mov	r1, r9
    1a9c:	4e1d      	ldr	r6, [pc, #116]	; (1b14 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x9c>)
    1a9e:	47b0      	blx	r6
  if (bias) {
    1aa0:	b1e4      	cbz	r4, 1adc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x64>
    1aa2:	4680      	mov	r8, r0
    1aa4:	4689      	mov	r9, r1
    const double bias_scale = static_cast<double>(bias->params.scale);
    1aa6:	4e1a      	ldr	r6, [pc, #104]	; (1b10 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
    1aa8:	68e0      	ldr	r0, [r4, #12]
    1aaa:	47b0      	blx	r6
    const double scale_diff = std::abs(input_product_scale - bias_scale);
    1aac:	4602      	mov	r2, r0
    1aae:	460b      	mov	r3, r1
    1ab0:	4640      	mov	r0, r8
    1ab2:	4649      	mov	r1, r9
    1ab4:	4c18      	ldr	r4, [pc, #96]	; (1b18 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
    1ab6:	47a0      	blx	r4
    1ab8:	4680      	mov	r8, r0
_GLIBCXX_BEGIN_NAMESPACE_VERSION

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    1aba:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    const double output_scale = static_cast<double>(output->params.scale);
    1abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1ac0:	68d8      	ldr	r0, [r3, #12]
    1ac2:	47b0      	blx	r6
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    1ac4:	4602      	mov	r2, r0
    1ac6:	460b      	mov	r3, r1
    1ac8:	4640      	mov	r0, r8
    1aca:	4621      	mov	r1, r4
    1acc:	4c13      	ldr	r4, [pc, #76]	; (1b1c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
    1ace:	47a0      	blx	r4
    1ad0:	a30d      	add	r3, pc, #52	; (adr r3, 1b08 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x90>)
    1ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ad6:	4c12      	ldr	r4, [pc, #72]	; (1b20 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa8>)
    1ad8:	47a0      	blx	r4
    1ada:	b150      	cbz	r0, 1af2 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7a>
                                          multiplier);
    1adc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ade:	9300      	str	r3, [sp, #0]
    1ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1ae2:	463a      	mov	r2, r7
    1ae4:	4629      	mov	r1, r5
    1ae6:	4650      	mov	r0, sl
    1ae8:	4c0e      	ldr	r4, [pc, #56]	; (1b24 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xac>)
    1aea:	47a0      	blx	r4
}
    1aec:	b002      	add	sp, #8
    1aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    1af2:	4b0d      	ldr	r3, [pc, #52]	; (1b28 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb0>)
    1af4:	9300      	str	r3, [sp, #0]
    1af6:	f8da 4014 	ldr.w	r4, [sl, #20]
    1afa:	239a      	movs	r3, #154	; 0x9a
    1afc:	4a0b      	ldr	r2, [pc, #44]	; (1b2c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>)
    1afe:	490c      	ldr	r1, [pc, #48]	; (1b30 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb8>)
    1b00:	4650      	mov	r0, sl
    1b02:	47a0      	blx	r4
    1b04:	2001      	movs	r0, #1
    1b06:	e7f1      	b.n	1aec <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x74>
    1b08:	47ae147b 	.word	0x47ae147b
    1b0c:	3f947ae1 	.word	0x3f947ae1
    1b10:	00011939 	.word	0x00011939
    1b14:	000119e1 	.word	0x000119e1
    1b18:	00011679 	.word	0x00011679
    1b1c:	00011c35 	.word	0x00011c35
    1b20:	00011ed9 	.word	0x00011ed9
    1b24:	000019f9 	.word	0x000019f9
    1b28:	00020970 	.word	0x00020970
    1b2c:	00020928 	.word	0x00020928
    1b30:	0001fff8 	.word	0x0001fff8

00001b34 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
    1b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b38:	b083      	sub	sp, #12
    1b3a:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
    1b3c:	7813      	ldrb	r3, [r2, #0]
    1b3e:	2b03      	cmp	r3, #3
    1b40:	d01f      	beq.n	1b82 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4e>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
    1b42:	2b09      	cmp	r3, #9
    1b44:	d020      	beq.n	1b88 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x54>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
    1b46:	2b07      	cmp	r3, #7
    1b48:	d112      	bne.n	1b70 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x3c>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
    1b4a:	f647 76ff 	movw	r6, #32767	; 0x7fff
    qmin = std::numeric_limits<int16_t>::min();
    1b4e:	4f36      	ldr	r7, [pc, #216]	; (1c28 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xf4>)
  const auto scale = output->params.scale;
    1b50:	f8d2 800c 	ldr.w	r8, [r2, #12]
  const auto zero_point = output->params.zero_point;
    1b54:	6914      	ldr	r4, [r2, #16]
  if (activation == kTfLiteActRelu) {
    1b56:	2901      	cmp	r1, #1
    1b58:	d01a      	beq.n	1b90 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x5c>
  } else if (activation == kTfLiteActRelu6) {
    1b5a:	2903      	cmp	r1, #3
    1b5c:	d029      	beq.n	1bb2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (activation == kTfLiteActReluN1To1) {
    1b5e:	2902      	cmp	r1, #2
    1b60:	d044      	beq.n	1bec <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb8>
    *act_min = qmin;
    1b62:	602f      	str	r7, [r5, #0]
    *act_max = qmax;
    1b64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1b66:	601e      	str	r6, [r3, #0]
    TF_LITE_ENSURE(context, false);
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
                                        act_max);
  return kTfLiteOk;
    1b68:	2000      	movs	r0, #0
}
    1b6a:	b003      	add	sp, #12
    1b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE(context, false);
    1b70:	4b2e      	ldr	r3, [pc, #184]	; (1c2c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xf8>)
    1b72:	9300      	str	r3, [sp, #0]
    1b74:	6944      	ldr	r4, [r0, #20]
    1b76:	23da      	movs	r3, #218	; 0xda
    1b78:	4a2d      	ldr	r2, [pc, #180]	; (1c30 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xfc>)
    1b7a:	492e      	ldr	r1, [pc, #184]	; (1c34 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x100>)
    1b7c:	47a0      	blx	r4
    1b7e:	2001      	movs	r0, #1
    1b80:	e7f3      	b.n	1b6a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x36>
    qmax = std::numeric_limits<uint8_t>::max();
    1b82:	26ff      	movs	r6, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
    1b84:	2700      	movs	r7, #0
    1b86:	e7e3      	b.n	1b50 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1c>
    qmax = std::numeric_limits<int8_t>::max();
    1b88:	267f      	movs	r6, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
    1b8a:	f06f 077f 	mvn.w	r7, #127	; 0x7f
    1b8e:	e7df      	b.n	1b50 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1c>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
    1b90:	4641      	mov	r1, r8
    1b92:	2000      	movs	r0, #0
    1b94:	4b28      	ldr	r3, [pc, #160]	; (1c38 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x104>)
    1b96:	4798      	blx	r3
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
    1b98:	4b28      	ldr	r3, [pc, #160]	; (1c3c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x108>)
    1b9a:	4798      	blx	r3
    1b9c:	4b28      	ldr	r3, [pc, #160]	; (1c40 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x10c>)
    1b9e:	4798      	blx	r3
  };
    1ba0:	4420      	add	r0, r4
    *act_min = std::max(qmin, quantize(0.0));
    1ba2:	42b8      	cmp	r0, r7
    1ba4:	bfb8      	it	lt
    1ba6:	4638      	movlt	r0, r7
    1ba8:	6028      	str	r0, [r5, #0]
    *act_max = qmax;
    1baa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1bac:	601e      	str	r6, [r3, #0]
  return kTfLiteOk;
    1bae:	2000      	movs	r0, #0
    1bb0:	e7db      	b.n	1b6a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x36>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
    1bb2:	f8df b084 	ldr.w	fp, [pc, #132]	; 1c38 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x104>
    1bb6:	4641      	mov	r1, r8
    1bb8:	2000      	movs	r0, #0
    1bba:	47d8      	blx	fp
    1bbc:	f8df a07c 	ldr.w	sl, [pc, #124]	; 1c3c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x108>
    1bc0:	47d0      	blx	sl
    1bc2:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1c40 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x10c>
    1bc6:	47c8      	blx	r9
  };
    1bc8:	4420      	add	r0, r4
    *act_min = std::max(qmin, quantize(0.0));
    1bca:	42b8      	cmp	r0, r7
    1bcc:	bfb8      	it	lt
    1bce:	4638      	movlt	r0, r7
    1bd0:	6028      	str	r0, [r5, #0]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
    1bd2:	4641      	mov	r1, r8
    1bd4:	481b      	ldr	r0, [pc, #108]	; (1c44 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x110>)
    1bd6:	47d8      	blx	fp
    1bd8:	47d0      	blx	sl
    1bda:	47c8      	blx	r9
  };
    1bdc:	4420      	add	r0, r4
    *act_max = std::min(qmax, quantize(6.0));
    1bde:	42b0      	cmp	r0, r6
    1be0:	bfa8      	it	ge
    1be2:	4630      	movge	r0, r6
    1be4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1be6:	6018      	str	r0, [r3, #0]
  return kTfLiteOk;
    1be8:	2000      	movs	r0, #0
    1bea:	e7be      	b.n	1b6a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x36>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
    1bec:	f8df b048 	ldr.w	fp, [pc, #72]	; 1c38 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x104>
    1bf0:	4641      	mov	r1, r8
    1bf2:	4815      	ldr	r0, [pc, #84]	; (1c48 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x114>)
    1bf4:	47d8      	blx	fp
    1bf6:	f8df a044 	ldr.w	sl, [pc, #68]	; 1c3c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x108>
    1bfa:	47d0      	blx	sl
    1bfc:	f8df 9040 	ldr.w	r9, [pc, #64]	; 1c40 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x10c>
    1c00:	47c8      	blx	r9
  };
    1c02:	4420      	add	r0, r4
    *act_min = std::max(qmin, quantize(-1.0));
    1c04:	42b8      	cmp	r0, r7
    1c06:	bfb8      	it	lt
    1c08:	4638      	movlt	r0, r7
    1c0a:	6028      	str	r0, [r5, #0]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
    1c0c:	4641      	mov	r1, r8
    1c0e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    1c12:	47d8      	blx	fp
    1c14:	47d0      	blx	sl
    1c16:	47c8      	blx	r9
  };
    1c18:	4420      	add	r0, r4
    *act_max = std::min(qmax, quantize(1.0));
    1c1a:	42b0      	cmp	r0, r6
    1c1c:	bfa8      	it	ge
    1c1e:	4630      	movge	r0, r6
    1c20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c22:	6018      	str	r0, [r3, #0]
  return kTfLiteOk;
    1c24:	2000      	movs	r0, #0
    1c26:	e7a0      	b.n	1b6a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x36>
    1c28:	ffff8000 	.word	0xffff8000
    1c2c:	00020994 	.word	0x00020994
    1c30:	00020928 	.word	0x00020928
    1c34:	0001fff8 	.word	0x0001fff8
    1c38:	000123c9 	.word	0x000123c9
    1c3c:	00011335 	.word	0x00011335
    1c40:	000125ed 	.word	0x000125ed
    1c44:	40c00000 	.word	0x40c00000
    1c48:	bf800000 	.word	0xbf800000

00001c4c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
    1c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c50:	b091      	sub	sp, #68	; 0x44
    1c52:	9005      	str	r0, [sp, #20]
    1c54:	9309      	str	r3, [sp, #36]	; 0x24
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    1c56:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
    1c5a:	2b01      	cmp	r3, #1
    1c5c:	f040 8084 	bne.w	1d68 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x11c>
    1c60:	468b      	mov	fp, r1
    1c62:	4691      	mov	r9, r2
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    1c64:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    1c68:	2b01      	cmp	r3, #1
    1c6a:	f040 808d 	bne.w	1d88 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x13c>
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
    1c6e:	6b53      	ldr	r3, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
    1c70:	2b00      	cmp	r3, #0
    1c72:	f000 8098 	beq.w	1da6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x15a>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    1c76:	681a      	ldr	r2, [r3, #0]
    1c78:	9208      	str	r2, [sp, #32]
    1c7a:	2a00      	cmp	r2, #0
    1c7c:	f000 809d 	beq.w	1dba <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x16e>
  const bool is_per_channel = affine_quantization->scale->size > 1;
    1c80:	9a08      	ldr	r2, [sp, #32]
    1c82:	f8d2 a000 	ldr.w	sl, [r2]
  if (is_per_channel) {
    1c86:	f1ba 0f01 	cmp.w	sl, #1
    1c8a:	dd18      	ble.n	1cbe <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x72>
    TF_LITE_ENSURE(context,
    1c8c:	780a      	ldrb	r2, [r1, #0]
    1c8e:	2a09      	cmp	r2, #9
    1c90:	d002      	beq.n	1c98 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x4c>
    1c92:	2a07      	cmp	r2, #7
    1c94:	f040 809b 	bne.w	1dce <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x182>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
    1c98:	f899 2000 	ldrb.w	r2, [r9]
    1c9c:	2a09      	cmp	r2, #9
    1c9e:	f040 80a0 	bne.w	1de2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x196>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
    1ca2:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1ca4:	4592      	cmp	sl, r2
    1ca6:	f040 80ab 	bne.w	1e00 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1b4>
    TF_LITE_ENSURE_EQ(
    1caa:	f8d9 2008 	ldr.w	r2, [r9, #8]
    1cae:	689b      	ldr	r3, [r3, #8]
    1cb0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    1cb4:	6853      	ldr	r3, [r2, #4]
    1cb6:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1cb8:	4293      	cmp	r3, r2
    1cba:	f040 80b0 	bne.w	1e1e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d2>
  const float input_scale = input->params.scale;
    1cbe:	f8db 300c 	ldr.w	r3, [fp, #12]
    1cc2:	9306      	str	r3, [sp, #24]
  const float output_scale = output->params.scale;
    1cc4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    1cc6:	68db      	ldr	r3, [r3, #12]
    1cc8:	9307      	str	r3, [sp, #28]
  const float* filter_scales = affine_quantization->scale->data;
    1cca:	9b08      	ldr	r3, [sp, #32]
    1ccc:	3304      	adds	r3, #4
    1cce:	461a      	mov	r2, r3
  for (int i = 0; i < num_channels; ++i) {
    1cd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1cd2:	2b00      	cmp	r3, #0
    1cd4:	dd3c      	ble.n	1d50 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x104>
    1cd6:	9f20      	ldr	r7, [sp, #128]	; 0x80
    1cd8:	3f04      	subs	r7, #4
    1cda:	9e21      	ldr	r6, [sp, #132]	; 0x84
    1cdc:	3e04      	subs	r6, #4
    1cde:	2400      	movs	r4, #0
    const double filter_scale = static_cast<double>(scale);
    1ce0:	4d6b      	ldr	r5, [pc, #428]	; (1e90 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x244>)
                                          static_cast<double>(output_scale);
    1ce2:	9704      	str	r7, [sp, #16]
    1ce4:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    1ce8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    1cec:	4691      	mov	r9, r2
    1cee:	469b      	mov	fp, r3
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
    1cf0:	f1ba 0f01 	cmp.w	sl, #1
    1cf4:	bfce      	itee	gt
    1cf6:	f859 0024 	ldrgt.w	r0, [r9, r4, lsl #2]
    1cfa:	9b08      	ldrle	r3, [sp, #32]
    1cfc:	6858      	ldrle	r0, [r3, #4]
    const double filter_scale = static_cast<double>(scale);
    1cfe:	47a8      	blx	r5
    1d00:	4607      	mov	r7, r0
    1d02:	4688      	mov	r8, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
    1d04:	9806      	ldr	r0, [sp, #24]
    1d06:	47a8      	blx	r5
    1d08:	4602      	mov	r2, r0
    1d0a:	460b      	mov	r3, r1
    1d0c:	4638      	mov	r0, r7
    1d0e:	4641      	mov	r1, r8
    1d10:	4f60      	ldr	r7, [pc, #384]	; (1e94 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x248>)
    1d12:	47b8      	blx	r7
    1d14:	4607      	mov	r7, r0
    1d16:	4688      	mov	r8, r1
                                          static_cast<double>(output_scale);
    1d18:	9807      	ldr	r0, [sp, #28]
    1d1a:	47a8      	blx	r5
    1d1c:	4602      	mov	r2, r0
    1d1e:	460b      	mov	r3, r1
    1d20:	4638      	mov	r0, r7
    1d22:	4641      	mov	r1, r8
    1d24:	4f5c      	ldr	r7, [pc, #368]	; (1e98 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24c>)
    1d26:	47b8      	blx	r7
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
    1d28:	ab0e      	add	r3, sp, #56	; 0x38
    1d2a:	aa0d      	add	r2, sp, #52	; 0x34
    1d2c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 1ed8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>
    1d30:	47c0      	blx	r8
    per_channel_multiplier[i] = significand;
    1d32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1d34:	9a04      	ldr	r2, [sp, #16]
    1d36:	f842 3f04 	str.w	r3, [r2, #4]!
    1d3a:	9204      	str	r2, [sp, #16]
    per_channel_shift[i] = channel_shift;
    1d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1d3e:	f846 3f04 	str.w	r3, [r6, #4]!
  for (int i = 0; i < num_channels; ++i) {
    1d42:	3401      	adds	r4, #1
    1d44:	455c      	cmp	r4, fp
    1d46:	d1d3      	bne.n	1cf0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xa4>
    1d48:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    1d4c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  if (input->type == kTfLiteUInt8) {
    1d50:	f89b 3000 	ldrb.w	r3, [fp]
    1d54:	2b03      	cmp	r3, #3
    1d56:	d070      	beq.n	1e3a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1ee>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
    1d58:	2b09      	cmp	r3, #9
    1d5a:	f000 808f 	beq.w	1e7c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x230>
    1d5e:	2b07      	cmp	r3, #7
    1d60:	f000 808c 	beq.w	1e7c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x230>
  return kTfLiteOk;
    1d64:	2000      	movs	r0, #0
    1d66:	e00c      	b.n	1d82 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    1d68:	2401      	movs	r4, #1
    1d6a:	9403      	str	r4, [sp, #12]
    1d6c:	9302      	str	r3, [sp, #8]
    1d6e:	4b4b      	ldr	r3, [pc, #300]	; (1e9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x250>)
    1d70:	9301      	str	r3, [sp, #4]
    1d72:	4b4b      	ldr	r3, [pc, #300]	; (1ea0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x254>)
    1d74:	9300      	str	r3, [sp, #0]
    1d76:	6945      	ldr	r5, [r0, #20]
    1d78:	2336      	movs	r3, #54	; 0x36
    1d7a:	4a4a      	ldr	r2, [pc, #296]	; (1ea4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    1d7c:	494a      	ldr	r1, [pc, #296]	; (1ea8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x25c>)
    1d7e:	47a8      	blx	r5
    1d80:	4620      	mov	r0, r4
}
    1d82:	b011      	add	sp, #68	; 0x44
    1d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    1d88:	2401      	movs	r4, #1
    1d8a:	9403      	str	r4, [sp, #12]
    1d8c:	9302      	str	r3, [sp, #8]
    1d8e:	4b43      	ldr	r3, [pc, #268]	; (1e9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x250>)
    1d90:	9301      	str	r3, [sp, #4]
    1d92:	4b46      	ldr	r3, [pc, #280]	; (1eac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x260>)
    1d94:	9300      	str	r3, [sp, #0]
    1d96:	9805      	ldr	r0, [sp, #20]
    1d98:	6945      	ldr	r5, [r0, #20]
    1d9a:	2338      	movs	r3, #56	; 0x38
    1d9c:	4a41      	ldr	r2, [pc, #260]	; (1ea4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    1d9e:	4942      	ldr	r1, [pc, #264]	; (1ea8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x25c>)
    1da0:	47a8      	blx	r5
    1da2:	4620      	mov	r0, r4
    1da4:	e7ed      	b.n	1d82 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
  TF_LITE_ENSURE(context, affine_quantization);
    1da6:	4b42      	ldr	r3, [pc, #264]	; (1eb0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x264>)
    1da8:	9300      	str	r3, [sp, #0]
    1daa:	9805      	ldr	r0, [sp, #20]
    1dac:	6944      	ldr	r4, [r0, #20]
    1dae:	2342      	movs	r3, #66	; 0x42
    1db0:	4a3c      	ldr	r2, [pc, #240]	; (1ea4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    1db2:	4940      	ldr	r1, [pc, #256]	; (1eb4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x268>)
    1db4:	47a0      	blx	r4
    1db6:	2001      	movs	r0, #1
    1db8:	e7e3      	b.n	1d82 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    1dba:	4b3f      	ldr	r3, [pc, #252]	; (1eb8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x26c>)
    1dbc:	9300      	str	r3, [sp, #0]
    1dbe:	9805      	ldr	r0, [sp, #20]
    1dc0:	6944      	ldr	r4, [r0, #20]
    1dc2:	2343      	movs	r3, #67	; 0x43
    1dc4:	4a37      	ldr	r2, [pc, #220]	; (1ea4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    1dc6:	493b      	ldr	r1, [pc, #236]	; (1eb4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x268>)
    1dc8:	47a0      	blx	r4
    1dca:	2001      	movs	r0, #1
    1dcc:	e7d9      	b.n	1d82 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
    TF_LITE_ENSURE(context,
    1dce:	4b3b      	ldr	r3, [pc, #236]	; (1ebc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x270>)
    1dd0:	9300      	str	r3, [sp, #0]
    1dd2:	9805      	ldr	r0, [sp, #20]
    1dd4:	6944      	ldr	r4, [r0, #20]
    1dd6:	2348      	movs	r3, #72	; 0x48
    1dd8:	4a32      	ldr	r2, [pc, #200]	; (1ea4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    1dda:	4936      	ldr	r1, [pc, #216]	; (1eb4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x268>)
    1ddc:	47a0      	blx	r4
    1dde:	2001      	movs	r0, #1
    1de0:	e7cf      	b.n	1d82 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
    1de2:	2309      	movs	r3, #9
    1de4:	9303      	str	r3, [sp, #12]
    1de6:	9202      	str	r2, [sp, #8]
    1de8:	4b35      	ldr	r3, [pc, #212]	; (1ec0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x274>)
    1dea:	9301      	str	r3, [sp, #4]
    1dec:	4b35      	ldr	r3, [pc, #212]	; (1ec4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x278>)
    1dee:	9300      	str	r3, [sp, #0]
    1df0:	9805      	ldr	r0, [sp, #20]
    1df2:	6944      	ldr	r4, [r0, #20]
    1df4:	2349      	movs	r3, #73	; 0x49
    1df6:	4a2b      	ldr	r2, [pc, #172]	; (1ea4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    1df8:	492b      	ldr	r1, [pc, #172]	; (1ea8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x25c>)
    1dfa:	47a0      	blx	r4
    1dfc:	2001      	movs	r0, #1
    1dfe:	e7c0      	b.n	1d82 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
    1e00:	9203      	str	r2, [sp, #12]
    1e02:	f8cd a008 	str.w	sl, [sp, #8]
    1e06:	4b30      	ldr	r3, [pc, #192]	; (1ec8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x27c>)
    1e08:	9301      	str	r3, [sp, #4]
    1e0a:	4b30      	ldr	r3, [pc, #192]	; (1ecc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x280>)
    1e0c:	9300      	str	r3, [sp, #0]
    1e0e:	9805      	ldr	r0, [sp, #20]
    1e10:	6944      	ldr	r4, [r0, #20]
    1e12:	234a      	movs	r3, #74	; 0x4a
    1e14:	4a23      	ldr	r2, [pc, #140]	; (1ea4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    1e16:	4924      	ldr	r1, [pc, #144]	; (1ea8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x25c>)
    1e18:	47a0      	blx	r4
    1e1a:	2001      	movs	r0, #1
    1e1c:	e7b1      	b.n	1d82 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
    TF_LITE_ENSURE_EQ(
    1e1e:	9303      	str	r3, [sp, #12]
    1e20:	9202      	str	r2, [sp, #8]
    1e22:	4b2b      	ldr	r3, [pc, #172]	; (1ed0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x284>)
    1e24:	9301      	str	r3, [sp, #4]
    1e26:	4b28      	ldr	r3, [pc, #160]	; (1ec8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x27c>)
    1e28:	9300      	str	r3, [sp, #0]
    1e2a:	9805      	ldr	r0, [sp, #20]
    1e2c:	6944      	ldr	r4, [r0, #20]
    1e2e:	234d      	movs	r3, #77	; 0x4d
    1e30:	4a1c      	ldr	r2, [pc, #112]	; (1ea4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
    1e32:	491d      	ldr	r1, [pc, #116]	; (1ea8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x25c>)
    1e34:	47a0      	blx	r4
    1e36:	2001      	movs	r0, #1
    1e38:	e7a3      	b.n	1d82 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
    double real_multiplier = 0.0;
    1e3a:	ab10      	add	r3, sp, #64	; 0x40
    1e3c:	2000      	movs	r0, #0
    1e3e:	2100      	movs	r1, #0
    1e40:	e963 0102 	strd	r0, r1, [r3, #-8]!
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    1e44:	9301      	str	r3, [sp, #4]
    1e46:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    1e48:	9300      	str	r3, [sp, #0]
    1e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1e4c:	464a      	mov	r2, r9
    1e4e:	4659      	mov	r1, fp
    1e50:	9805      	ldr	r0, [sp, #20]
    1e52:	4c20      	ldr	r4, [pc, #128]	; (1ed4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x288>)
    1e54:	47a0      	blx	r4
    1e56:	2800      	cmp	r0, #0
    1e58:	d193      	bne.n	1d82 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
    1e5a:	ab0d      	add	r3, sp, #52	; 0x34
    1e5c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    1e5e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    1e62:	4c1d      	ldr	r4, [pc, #116]	; (1ed8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
    1e64:	47a0      	blx	r4
    *shift = -exponent;
    1e66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1e68:	425b      	negs	r3, r3
    1e6a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1e6c:	6013      	str	r3, [r2, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
    1e6e:	f89b 3000 	ldrb.w	r3, [fp]
    1e72:	2b09      	cmp	r3, #9
    1e74:	d002      	beq.n	1e7c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x230>
    1e76:	2b03      	cmp	r3, #3
    1e78:	f47f af71 	bne.w	1d5e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x112>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    1e7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    1e7e:	7819      	ldrb	r1, [r3, #0]
    1e80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1e82:	9300      	str	r3, [sp, #0]
    1e84:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1e86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    1e88:	9805      	ldr	r0, [sp, #20]
    1e8a:	4c14      	ldr	r4, [pc, #80]	; (1edc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x290>)
    1e8c:	47a0      	blx	r4
    1e8e:	e778      	b.n	1d82 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
    1e90:	00011939 	.word	0x00011939
    1e94:	000119e1 	.word	0x000119e1
    1e98:	00011c35 	.word	0x00011c35
    1e9c:	000209b8 	.word	0x000209b8
    1ea0:	000209d4 	.word	0x000209d4
    1ea4:	00020928 	.word	0x00020928
    1ea8:	0002099c 	.word	0x0002099c
    1eac:	000209f0 	.word	0x000209f0
    1eb0:	00020a0c 	.word	0x00020a0c
    1eb4:	0001fff8 	.word	0x0001fff8
    1eb8:	00020a20 	.word	0x00020a20
    1ebc:	00020a3c 	.word	0x00020a3c
    1ec0:	00020a78 	.word	0x00020a78
    1ec4:	00020a84 	.word	0x00020a84
    1ec8:	00020a94 	.word	0x00020a94
    1ecc:	00020aa4 	.word	0x00020aa4
    1ed0:	00020ac8 	.word	0x00020ac8
    1ed4:	00001a79 	.word	0x00001a79
    1ed8:	0000180d 	.word	0x0000180d
    1edc:	00001b35 	.word	0x00001b35

00001ee0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:
  }
}

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
    1ee0:	2000      	movs	r0, #0
    1ee2:	4770      	bx	lr

00001ee4 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:
  }
}

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}
    1ee4:	2000      	movs	r0, #0
    1ee6:	4770      	bx	lr

00001ee8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
    1ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1eec:	b0a5      	sub	sp, #148	; 0x94
    1eee:	4605      	mov	r5, r0
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}
inline const TfLiteTensor* GetInput(const TfLiteContext* context,
                                    const TfLiteNode* node, int index) {
  return &context->tensors[node->inputs->data[index]];
    1ef0:	6882      	ldr	r2, [r0, #8]
    1ef2:	680b      	ldr	r3, [r1, #0]
    1ef4:	685b      	ldr	r3, [r3, #4]
    1ef6:	019b      	lsls	r3, r3, #6
    1ef8:	18d6      	adds	r6, r2, r3
  TfLiteTensor* tensor = &context->tensors[node->inputs->data[index]];
  return (tensor->is_variable) ? tensor : nullptr;
}
inline TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                               int index) {
  return &context->tensors[node->outputs->data[index]];
    1efa:	6849      	ldr	r1, [r1, #4]
    1efc:	684c      	ldr	r4, [r1, #4]
    1efe:	eb02 1484 	add.w	r4, r2, r4, lsl #6
  switch (input->type) {
    1f02:	5cd0      	ldrb	r0, [r2, r3]
    1f04:	2803      	cmp	r0, #3
    1f06:	f000 815b 	beq.w	21c0 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2d8>
    1f0a:	2809      	cmp	r0, #9
    1f0c:	f000 80ac 	beq.w	2068 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x180>
    1f10:	2801      	cmp	r0, #1
    1f12:	d00a      	beq.n	1f2a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x42>
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
    1f14:	696c      	ldr	r4, [r5, #20]
    1f16:	4ba2      	ldr	r3, [pc, #648]	; (21a0 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2b8>)
    1f18:	4798      	blx	r3
    1f1a:	4602      	mov	r2, r0
    1f1c:	49a1      	ldr	r1, [pc, #644]	; (21a4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
    1f1e:	4628      	mov	r0, r5
    1f20:	47a0      	blx	r4
      return kTfLiteError;
    1f22:	2001      	movs	r0, #1
}
    1f24:	b025      	add	sp, #148	; 0x94
    1f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
  if (tensor == nullptr) {
    1f2a:	2e00      	cmp	r6, #0
    1f2c:	d038      	beq.n	1fa0 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xb8>
    return RuntimeShape();
  }

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
    1f2e:	68b7      	ldr	r7, [r6, #8]
    1f30:	f857 5b04 	ldr.w	r5, [r7], #4
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
    1f34:	9500      	str	r5, [sp, #0]
    if (dimensions_count > kMaxSmallSize) {
    1f36:	2d05      	cmp	r5, #5
    1f38:	dd35      	ble.n	1fa6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xbe>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32[dimensions_count];
    1f3a:	4b9b      	ldr	r3, [pc, #620]	; (21a8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2c0>)
    1f3c:	429d      	cmp	r5, r3
    1f3e:	bf94      	ite	ls
    1f40:	00a8      	lslls	r0, r5, #2
    1f42:	f04f 30ff 	movhi.w	r0, #4294967295
    1f46:	4b99      	ldr	r3, [pc, #612]	; (21ac <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2c4>)
    1f48:	4798      	blx	r3
    1f4a:	9001      	str	r0, [sp, #4]
  }

  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
    Resize(dimensions_count);
    int32* dst_dims = DimsData();
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    1f4c:	00aa      	lsls	r2, r5, #2
    1f4e:	4639      	mov	r1, r7
    1f50:	4b97      	ldr	r3, [pc, #604]	; (21b0 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2c8>)
    1f52:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    1f54:	6875      	ldr	r5, [r6, #4]
  if (tensor == nullptr) {
    1f56:	b344      	cbz	r4, 1faa <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xc2>
  const int dims_size = dims->size;
    1f58:	68a7      	ldr	r7, [r4, #8]
    1f5a:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    1f5e:	9606      	str	r6, [sp, #24]
    if (dimensions_count > kMaxSmallSize) {
    1f60:	2e05      	cmp	r6, #5
    1f62:	dd25      	ble.n	1fb0 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xc8>
      dims_pointer_ = new int32[dimensions_count];
    1f64:	4b90      	ldr	r3, [pc, #576]	; (21a8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2c0>)
    1f66:	429e      	cmp	r6, r3
    1f68:	bf94      	ite	ls
    1f6a:	00b0      	lslls	r0, r6, #2
    1f6c:	f04f 30ff 	movhi.w	r0, #4294967295
    1f70:	4b8e      	ldr	r3, [pc, #568]	; (21ac <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2c4>)
    1f72:	4798      	blx	r3
    1f74:	9007      	str	r0, [sp, #28]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    1f76:	00b2      	lsls	r2, r6, #2
    1f78:	4639      	mov	r1, r7
    1f7a:	4b8d      	ldr	r3, [pc, #564]	; (21b0 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2c8>)
    1f7c:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    1f7e:	6867      	ldr	r7, [r4, #4]
  inline int32 DimensionsCount() const { return size_; }
    1f80:	9c00      	ldr	r4, [sp, #0]
    1f82:	f8dd a018 	ldr.w	sl, [sp, #24]

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    1f86:	4554      	cmp	r4, sl
    1f88:	d114      	bne.n	1fb4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xcc>
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
    1f8a:	2c00      	cmp	r4, #0
    1f8c:	f340 81b2 	ble.w	22f4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x40c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    1f90:	f8dd e004 	ldr.w	lr, [sp, #4]
    1f94:	f8dd c01c 	ldr.w	ip, [sp, #28]
    1f98:	2201      	movs	r2, #1
    1f9a:	2300      	movs	r3, #0
    1f9c:	ae06      	add	r6, sp, #24
    1f9e:	e01b      	b.n	1fd8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xf0>
  RuntimeShape() : size_(0) {}
    1fa0:	2500      	movs	r5, #0
    1fa2:	9500      	str	r5, [sp, #0]
    1fa4:	e7d7      	b.n	1f56 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x6e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    1fa6:	a801      	add	r0, sp, #4
    1fa8:	e7d0      	b.n	1f4c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x64>
  RuntimeShape() : size_(0) {}
    1faa:	2700      	movs	r7, #0
    1fac:	9706      	str	r7, [sp, #24]
    1fae:	e7e7      	b.n	1f80 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x98>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    1fb0:	a807      	add	r0, sp, #28
    1fb2:	e7e0      	b.n	1f76 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x8e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    1fb4:	4b7f      	ldr	r3, [pc, #508]	; (21b4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2cc>)
    1fb6:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    1fb8:	4b7e      	ldr	r3, [pc, #504]	; (21b4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2cc>)
    1fba:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    1fbc:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    1fc0:	459a      	cmp	sl, r3
    1fc2:	dd12      	ble.n	1fea <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x102>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    1fc4:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    1fc8:	4288      	cmp	r0, r1
    1fca:	d110      	bne.n	1fee <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
  for (int i = 0; i < dims_count; ++i) {
    1fcc:	3301      	adds	r3, #1
    1fce:	429c      	cmp	r4, r3
    1fd0:	d00f      	beq.n	1ff2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x10a>
    1fd2:	3201      	adds	r2, #1
    TFLITE_DCHECK_GE(i, 0);
    1fd4:	2b00      	cmp	r3, #0
    1fd6:	dbef      	blt.n	1fb8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xd0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    1fd8:	2c05      	cmp	r4, #5
    1fda:	dcef      	bgt.n	1fbc <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xd4>
    1fdc:	f85d 1022 	ldr.w	r1, [sp, r2, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    1fe0:	459a      	cmp	sl, r3
    1fe2:	dd02      	ble.n	1fea <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x102>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    1fe4:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
    1fe8:	e7ee      	b.n	1fc8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xe0>
    TFLITE_DCHECK_LT(i, size_);
    1fea:	4b72      	ldr	r3, [pc, #456]	; (21b4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2cc>)
    1fec:	4798      	blx	r3
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    1fee:	4b71      	ldr	r3, [pc, #452]	; (21b4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2cc>)
    1ff0:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    1ff2:	2c05      	cmp	r4, #5
    1ff4:	dd16      	ble.n	2024 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x13c>
    1ff6:	9901      	ldr	r1, [sp, #4]
    for (int i = 0; i < size_; i++) {
    1ff8:	2c00      	cmp	r4, #0
    1ffa:	dd15      	ble.n	2028 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x140>
    1ffc:	460b      	mov	r3, r1
    1ffe:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    2002:	2601      	movs	r6, #1
      buffer_size *= dims_data[i];
    2004:	f853 2b04 	ldr.w	r2, [r3], #4
    2008:	fb02 f606 	mul.w	r6, r2, r6
    for (int i = 0; i < size_; i++) {
    200c:	4299      	cmp	r1, r3
    200e:	d1f9      	bne.n	2004 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x11c>
  for (int i = 0; i < flat_size; ++i) {
    2010:	2e00      	cmp	r6, #0
    2012:	dd19      	ble.n	2048 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x160>
    2014:	f1a5 0804 	sub.w	r8, r5, #4
    2018:	f1a7 0904 	sub.w	r9, r7, #4
    int buffer_size = 1;
    201c:	2700      	movs	r7, #0
    const float clamped = val < lower ? lower : val;
    201e:	f8df b19c 	ldr.w	fp, [pc, #412]	; 21bc <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2d4>
    2022:	e008      	b.n	2036 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x14e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2024:	a901      	add	r1, sp, #4
    2026:	e7e7      	b.n	1ff8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x110>
    int buffer_size = 1;
    2028:	2601      	movs	r6, #1
    202a:	e7f3      	b.n	2014 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x12c>
    output_data[i] = clamped;
    202c:	f849 5f04 	str.w	r5, [r9, #4]!
  for (int i = 0; i < flat_size; ++i) {
    2030:	3701      	adds	r7, #1
    2032:	42b7      	cmp	r7, r6
    2034:	da08      	bge.n	2048 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x160>
    const float val = input_data[i];
    2036:	f858 5f04 	ldr.w	r5, [r8, #4]!
    const float clamped = val < lower ? lower : val;
    203a:	2100      	movs	r1, #0
    203c:	4628      	mov	r0, r5
    203e:	47d8      	blx	fp
    2040:	2800      	cmp	r0, #0
    2042:	d0f3      	beq.n	202c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x144>
    2044:	2500      	movs	r5, #0
    2046:	e7f1      	b.n	202c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x144>
    if (size_ > kMaxSmallSize) {
    2048:	f1ba 0f05 	cmp.w	sl, #5
    204c:	dd09      	ble.n	2062 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17a>
      delete[] dims_pointer_;
    204e:	9807      	ldr	r0, [sp, #28]
    2050:	b108      	cbz	r0, 2056 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16e>
    2052:	4b59      	ldr	r3, [pc, #356]	; (21b8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2d0>)
    2054:	4798      	blx	r3
    2056:	9801      	ldr	r0, [sp, #4]
    2058:	b108      	cbz	r0, 205e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x176>
    205a:	4b57      	ldr	r3, [pc, #348]	; (21b8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2d0>)
    205c:	4798      	blx	r3
      return kTfLiteOk;
    205e:	2000      	movs	r0, #0
    2060:	e760      	b.n	1f24 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3c>
    if (size_ > kMaxSmallSize) {
    2062:	2c05      	cmp	r4, #5
    2064:	ddfb      	ble.n	205e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x176>
    2066:	e7f6      	b.n	2056 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16e>
      ReluQuantized<int8_t>(input->params.zero_point, GetTensorShape(input),
    2068:	6935      	ldr	r5, [r6, #16]
  if (tensor == nullptr) {
    206a:	2e00      	cmp	r6, #0
    206c:	d03d      	beq.n	20ea <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x202>
  const int dims_size = dims->size;
    206e:	f8d6 8008 	ldr.w	r8, [r6, #8]
    2072:	f858 7b04 	ldr.w	r7, [r8], #4
    size_ = dimensions_count;
    2076:	970c      	str	r7, [sp, #48]	; 0x30
    if (dimensions_count > kMaxSmallSize) {
    2078:	2f05      	cmp	r7, #5
    207a:	dd38      	ble.n	20ee <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x206>
      dims_pointer_ = new int32[dimensions_count];
    207c:	4b4a      	ldr	r3, [pc, #296]	; (21a8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2c0>)
    207e:	429f      	cmp	r7, r3
    2080:	bf94      	ite	ls
    2082:	00b8      	lslls	r0, r7, #2
    2084:	f04f 30ff 	movhi.w	r0, #4294967295
    2088:	4b48      	ldr	r3, [pc, #288]	; (21ac <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2c4>)
    208a:	4798      	blx	r3
    208c:	900d      	str	r0, [sp, #52]	; 0x34
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    208e:	00ba      	lsls	r2, r7, #2
    2090:	4641      	mov	r1, r8
    2092:	4b47      	ldr	r3, [pc, #284]	; (21b0 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2c8>)
    2094:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    2096:	6876      	ldr	r6, [r6, #4]
  if (tensor == nullptr) {
    2098:	b35c      	cbz	r4, 20f2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x20a>
  const int dims_size = dims->size;
    209a:	f8d4 8008 	ldr.w	r8, [r4, #8]
    209e:	f858 7b04 	ldr.w	r7, [r8], #4
    size_ = dimensions_count;
    20a2:	9712      	str	r7, [sp, #72]	; 0x48
    if (dimensions_count > kMaxSmallSize) {
    20a4:	2f05      	cmp	r7, #5
    20a6:	dd27      	ble.n	20f8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x210>
      dims_pointer_ = new int32[dimensions_count];
    20a8:	4b3f      	ldr	r3, [pc, #252]	; (21a8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2c0>)
    20aa:	429f      	cmp	r7, r3
    20ac:	bf94      	ite	ls
    20ae:	00b8      	lslls	r0, r7, #2
    20b0:	f04f 30ff 	movhi.w	r0, #4294967295
    20b4:	4b3d      	ldr	r3, [pc, #244]	; (21ac <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2c4>)
    20b6:	4798      	blx	r3
    20b8:	9013      	str	r0, [sp, #76]	; 0x4c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    20ba:	00ba      	lsls	r2, r7, #2
    20bc:	4641      	mov	r1, r8
    20be:	4b3c      	ldr	r3, [pc, #240]	; (21b0 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2c8>)
    20c0:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    20c2:	f8d4 e004 	ldr.w	lr, [r4, #4]
  inline int32 DimensionsCount() const { return size_; }
    20c6:	990c      	ldr	r1, [sp, #48]	; 0x30
    20c8:	9f12      	ldr	r7, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    20ca:	42b9      	cmp	r1, r7
    20cc:	d116      	bne.n	20fc <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x214>
  for (int i = 0; i < dims_count; ++i) {
    20ce:	2900      	cmp	r1, #0
    20d0:	f340 8115 	ble.w	22fe <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x416>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    20d4:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    20d8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    20dc:	2201      	movs	r2, #1
    20de:	2300      	movs	r3, #0
    20e0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
    20e4:	f10d 0848 	add.w	r8, sp, #72	; 0x48
    20e8:	e01a      	b.n	2120 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x238>
  RuntimeShape() : size_(0) {}
    20ea:	960c      	str	r6, [sp, #48]	; 0x30
    20ec:	e7d4      	b.n	2098 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x1b0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    20ee:	a80d      	add	r0, sp, #52	; 0x34
    20f0:	e7cd      	b.n	208e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x1a6>
  RuntimeShape() : size_(0) {}
    20f2:	9412      	str	r4, [sp, #72]	; 0x48
    20f4:	46a6      	mov	lr, r4
    20f6:	e7e6      	b.n	20c6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x1de>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    20f8:	a813      	add	r0, sp, #76	; 0x4c
    20fa:	e7de      	b.n	20ba <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x1d2>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    20fc:	4b2d      	ldr	r3, [pc, #180]	; (21b4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2cc>)
    20fe:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    2100:	4b2c      	ldr	r3, [pc, #176]	; (21b4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2cc>)
    2102:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2104:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    2108:	42bb      	cmp	r3, r7
    210a:	da12      	bge.n	2132 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x24a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    210c:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    2110:	4284      	cmp	r4, r0
    2112:	d110      	bne.n	2136 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x24e>
  for (int i = 0; i < dims_count; ++i) {
    2114:	3301      	adds	r3, #1
    2116:	4299      	cmp	r1, r3
    2118:	d00f      	beq.n	213a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x252>
    211a:	3201      	adds	r2, #1
    TFLITE_DCHECK_GE(i, 0);
    211c:	2b00      	cmp	r3, #0
    211e:	dbef      	blt.n	2100 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x218>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2120:	2905      	cmp	r1, #5
    2122:	dcef      	bgt.n	2104 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x21c>
    2124:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    2128:	42bb      	cmp	r3, r7
    212a:	da02      	bge.n	2132 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x24a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    212c:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
    2130:	e7ee      	b.n	2110 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x228>
    TFLITE_DCHECK_LT(i, size_);
    2132:	4b20      	ldr	r3, [pc, #128]	; (21b4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2cc>)
    2134:	4798      	blx	r3
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    2136:	4b1f      	ldr	r3, [pc, #124]	; (21b4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2cc>)
    2138:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    213a:	2905      	cmp	r1, #5
    213c:	dd28      	ble.n	2190 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2a8>
    213e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    for (int i = 0; i < size_; i++) {
    2140:	2900      	cmp	r1, #0
    2142:	dd27      	ble.n	2194 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2ac>
    2144:	4623      	mov	r3, r4
    2146:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    214a:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
    214c:	f853 0b04 	ldr.w	r0, [r3], #4
    2150:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
    2154:	429c      	cmp	r4, r3
    2156:	d1f9      	bne.n	214c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x264>
  for (int i = 0; i < flat_size; ++i) {
    2158:	2a00      	cmp	r2, #0
    215a:	dd0d      	ble.n	2178 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x290>
    215c:	3e01      	subs	r6, #1
    215e:	f10e 34ff 	add.w	r4, lr, #4294967295
    int buffer_size = 1;
    2162:	2000      	movs	r0, #0
    const Q clamped = val < lower ? lower : val;
    2164:	f916 3f01 	ldrsb.w	r3, [r6, #1]!
    2168:	42ab      	cmp	r3, r5
    216a:	bfb8      	it	lt
    216c:	462b      	movlt	r3, r5
    216e:	f804 3f01 	strb.w	r3, [r4, #1]!
  for (int i = 0; i < flat_size; ++i) {
    2172:	3001      	adds	r0, #1
    2174:	4290      	cmp	r0, r2
    2176:	dbf5      	blt.n	2164 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x27c>
    if (size_ > kMaxSmallSize) {
    2178:	2f05      	cmp	r7, #5
    217a:	dd0d      	ble.n	2198 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2b0>
      delete[] dims_pointer_;
    217c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    217e:	b108      	cbz	r0, 2184 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x29c>
    2180:	4b0d      	ldr	r3, [pc, #52]	; (21b8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2d0>)
    2182:	4798      	blx	r3
    2184:	980d      	ldr	r0, [sp, #52]	; 0x34
    2186:	b108      	cbz	r0, 218c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2a4>
    2188:	4b0b      	ldr	r3, [pc, #44]	; (21b8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2d0>)
    218a:	4798      	blx	r3
      return kTfLiteOk;
    218c:	2000      	movs	r0, #0
    218e:	e6c9      	b.n	1f24 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2190:	ac0d      	add	r4, sp, #52	; 0x34
    2192:	e7d5      	b.n	2140 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x258>
    int buffer_size = 1;
    2194:	2201      	movs	r2, #1
    2196:	e7e1      	b.n	215c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x274>
    if (size_ > kMaxSmallSize) {
    2198:	2905      	cmp	r1, #5
    219a:	ddf7      	ble.n	218c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2a4>
    219c:	e7f2      	b.n	2184 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x29c>
    219e:	bf00      	nop
    21a0:	00009145 	.word	0x00009145
    21a4:	00020bbc 	.word	0x00020bbc
    21a8:	1ffffffe 	.word	0x1ffffffe
    21ac:	00009291 	.word	0x00009291
    21b0:	00014641 	.word	0x00014641
    21b4:	000138bd 	.word	0x000138bd
    21b8:	000091e1 	.word	0x000091e1
    21bc:	0001259d 	.word	0x0001259d
      ReluQuantized<uint8_t>(input->params.zero_point, GetTensorShape(input),
    21c0:	6935      	ldr	r5, [r6, #16]
  if (tensor == nullptr) {
    21c2:	2e00      	cmp	r6, #0
    21c4:	d03c      	beq.n	2240 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x358>
  const int dims_size = dims->size;
    21c6:	f8d6 8008 	ldr.w	r8, [r6, #8]
    21ca:	f858 7b04 	ldr.w	r7, [r8], #4
    size_ = dimensions_count;
    21ce:	9718      	str	r7, [sp, #96]	; 0x60
    if (dimensions_count > kMaxSmallSize) {
    21d0:	2f05      	cmp	r7, #5
    21d2:	dd37      	ble.n	2244 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x35c>
      dims_pointer_ = new int32[dimensions_count];
    21d4:	4b4e      	ldr	r3, [pc, #312]	; (2310 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x428>)
    21d6:	429f      	cmp	r7, r3
    21d8:	bf94      	ite	ls
    21da:	00b8      	lslls	r0, r7, #2
    21dc:	f04f 30ff 	movhi.w	r0, #4294967295
    21e0:	4b4c      	ldr	r3, [pc, #304]	; (2314 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x42c>)
    21e2:	4798      	blx	r3
    21e4:	9019      	str	r0, [sp, #100]	; 0x64
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    21e6:	00ba      	lsls	r2, r7, #2
    21e8:	4641      	mov	r1, r8
    21ea:	4b4b      	ldr	r3, [pc, #300]	; (2318 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x430>)
    21ec:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    21ee:	6876      	ldr	r6, [r6, #4]
  if (tensor == nullptr) {
    21f0:	b354      	cbz	r4, 2248 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x360>
  const int dims_size = dims->size;
    21f2:	f8d4 8008 	ldr.w	r8, [r4, #8]
    21f6:	f858 7b04 	ldr.w	r7, [r8], #4
    size_ = dimensions_count;
    21fa:	971e      	str	r7, [sp, #120]	; 0x78
    if (dimensions_count > kMaxSmallSize) {
    21fc:	2f05      	cmp	r7, #5
    21fe:	dd26      	ble.n	224e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x366>
      dims_pointer_ = new int32[dimensions_count];
    2200:	4b43      	ldr	r3, [pc, #268]	; (2310 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x428>)
    2202:	429f      	cmp	r7, r3
    2204:	bf94      	ite	ls
    2206:	00b8      	lslls	r0, r7, #2
    2208:	f04f 30ff 	movhi.w	r0, #4294967295
    220c:	4b41      	ldr	r3, [pc, #260]	; (2314 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x42c>)
    220e:	4798      	blx	r3
    2210:	901f      	str	r0, [sp, #124]	; 0x7c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2212:	00ba      	lsls	r2, r7, #2
    2214:	4641      	mov	r1, r8
    2216:	4b40      	ldr	r3, [pc, #256]	; (2318 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x430>)
    2218:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    221a:	f8d4 e004 	ldr.w	lr, [r4, #4]
  inline int32 DimensionsCount() const { return size_; }
    221e:	9918      	ldr	r1, [sp, #96]	; 0x60
    2220:	9f1e      	ldr	r7, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    2222:	42b9      	cmp	r1, r7
    2224:	d115      	bne.n	2252 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x36a>
  for (int i = 0; i < dims_count; ++i) {
    2226:	2900      	cmp	r1, #0
    2228:	dd6e      	ble.n	2308 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x420>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    222a:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
    222e:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
    2232:	2201      	movs	r2, #1
    2234:	2300      	movs	r3, #0
    2236:	f10d 0c60 	add.w	ip, sp, #96	; 0x60
    223a:	f10d 0878 	add.w	r8, sp, #120	; 0x78
    223e:	e01a      	b.n	2276 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x38e>
  RuntimeShape() : size_(0) {}
    2240:	9618      	str	r6, [sp, #96]	; 0x60
    2242:	e7d5      	b.n	21f0 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x308>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2244:	a819      	add	r0, sp, #100	; 0x64
    2246:	e7ce      	b.n	21e6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x2fe>
  RuntimeShape() : size_(0) {}
    2248:	941e      	str	r4, [sp, #120]	; 0x78
    224a:	46a6      	mov	lr, r4
    224c:	e7e7      	b.n	221e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x336>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    224e:	a81f      	add	r0, sp, #124	; 0x7c
    2250:	e7df      	b.n	2212 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x32a>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    2252:	4b32      	ldr	r3, [pc, #200]	; (231c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x434>)
    2254:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    2256:	4b31      	ldr	r3, [pc, #196]	; (231c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x434>)
    2258:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    225a:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    225e:	429f      	cmp	r7, r3
    2260:	dd12      	ble.n	2288 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3a0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2262:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    2266:	4284      	cmp	r4, r0
    2268:	d110      	bne.n	228c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3a4>
  for (int i = 0; i < dims_count; ++i) {
    226a:	3301      	adds	r3, #1
    226c:	4299      	cmp	r1, r3
    226e:	d00f      	beq.n	2290 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3a8>
    2270:	3201      	adds	r2, #1
    TFLITE_DCHECK_GE(i, 0);
    2272:	2b00      	cmp	r3, #0
    2274:	dbef      	blt.n	2256 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x36e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2276:	2905      	cmp	r1, #5
    2278:	dcef      	bgt.n	225a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x372>
    227a:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    227e:	429f      	cmp	r7, r3
    2280:	dd02      	ble.n	2288 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3a0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2282:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
    2286:	e7ee      	b.n	2266 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x37e>
    TFLITE_DCHECK_LT(i, size_);
    2288:	4b24      	ldr	r3, [pc, #144]	; (231c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x434>)
    228a:	4798      	blx	r3
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    228c:	4b23      	ldr	r3, [pc, #140]	; (231c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x434>)
    228e:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2290:	2905      	cmp	r1, #5
    2292:	dd28      	ble.n	22e6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3fe>
    2294:	9c19      	ldr	r4, [sp, #100]	; 0x64
    for (int i = 0; i < size_; i++) {
    2296:	2900      	cmp	r1, #0
    2298:	dd27      	ble.n	22ea <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x402>
    229a:	4623      	mov	r3, r4
    229c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    22a0:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
    22a2:	f853 0b04 	ldr.w	r0, [r3], #4
    22a6:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
    22aa:	429c      	cmp	r4, r3
    22ac:	d1f9      	bne.n	22a2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3ba>
  for (int i = 0; i < flat_size; ++i) {
    22ae:	2a00      	cmp	r2, #0
    22b0:	dd0d      	ble.n	22ce <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3e6>
    22b2:	3e01      	subs	r6, #1
    22b4:	f10e 34ff 	add.w	r4, lr, #4294967295
    int buffer_size = 1;
    22b8:	2000      	movs	r0, #0
    const Q clamped = val < lower ? lower : val;
    22ba:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    22be:	42ab      	cmp	r3, r5
    22c0:	bfb8      	it	lt
    22c2:	462b      	movlt	r3, r5
    22c4:	f804 3f01 	strb.w	r3, [r4, #1]!
  for (int i = 0; i < flat_size; ++i) {
    22c8:	3001      	adds	r0, #1
    22ca:	4290      	cmp	r0, r2
    22cc:	dbf5      	blt.n	22ba <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3d2>
    if (size_ > kMaxSmallSize) {
    22ce:	2f05      	cmp	r7, #5
    22d0:	dd0d      	ble.n	22ee <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x406>
      delete[] dims_pointer_;
    22d2:	981f      	ldr	r0, [sp, #124]	; 0x7c
    22d4:	b108      	cbz	r0, 22da <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3f2>
    22d6:	4b12      	ldr	r3, [pc, #72]	; (2320 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x438>)
    22d8:	4798      	blx	r3
    22da:	9819      	ldr	r0, [sp, #100]	; 0x64
    22dc:	b108      	cbz	r0, 22e2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3fa>
    22de:	4b10      	ldr	r3, [pc, #64]	; (2320 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x438>)
    22e0:	4798      	blx	r3
      return kTfLiteOk;
    22e2:	2000      	movs	r0, #0
    22e4:	e61e      	b.n	1f24 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    22e6:	ac19      	add	r4, sp, #100	; 0x64
    22e8:	e7d5      	b.n	2296 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3ae>
    int buffer_size = 1;
    22ea:	2201      	movs	r2, #1
    22ec:	e7e1      	b.n	22b2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3ca>
    if (size_ > kMaxSmallSize) {
    22ee:	2905      	cmp	r1, #5
    22f0:	ddf7      	ble.n	22e2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3fa>
    22f2:	e7f2      	b.n	22da <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3f2>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    22f4:	2c05      	cmp	r4, #5
    22f6:	f73f ae7e 	bgt.w	1ff6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x10e>
    int buffer_size = 1;
    22fa:	2601      	movs	r6, #1
    22fc:	e68a      	b.n	2014 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x12c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    22fe:	2905      	cmp	r1, #5
    2300:	f73f af1d 	bgt.w	213e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x256>
    int buffer_size = 1;
    2304:	2201      	movs	r2, #1
    2306:	e729      	b.n	215c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x274>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2308:	2905      	cmp	r1, #5
    230a:	dcc3      	bgt.n	2294 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3ac>
    int buffer_size = 1;
    230c:	2201      	movs	r2, #1
    230e:	e7d0      	b.n	22b2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3ca>
    2310:	1ffffffe 	.word	0x1ffffffe
    2314:	00009291 	.word	0x00009291
    2318:	00014641 	.word	0x00014641
    231c:	000138bd 	.word	0x000138bd
    2320:	000091e1 	.word	0x000091e1

00002324 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
    2324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2328:	b0a5      	sub	sp, #148	; 0x94
    232a:	4605      	mov	r5, r0
  return &context->tensors[node->inputs->data[index]];
    232c:	6882      	ldr	r2, [r0, #8]
    232e:	680b      	ldr	r3, [r1, #0]
    2330:	685b      	ldr	r3, [r3, #4]
    2332:	019b      	lsls	r3, r3, #6
    2334:	18d4      	adds	r4, r2, r3
  return &context->tensors[node->outputs->data[index]];
    2336:	6849      	ldr	r1, [r1, #4]
    2338:	6849      	ldr	r1, [r1, #4]
    233a:	eb02 1981 	add.w	r9, r2, r1, lsl #6
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  switch (input->type) {
    233e:	5cd0      	ldrb	r0, [r2, r3]
    2340:	2803      	cmp	r0, #3
    2342:	f000 817d 	beq.w	2640 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x31c>
    2346:	2809      	cmp	r0, #9
    2348:	f000 80b6 	beq.w	24b8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x194>
    234c:	2801      	cmp	r0, #1
    234e:	d00a      	beq.n	2366 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x42>
          zero, six, GetTensorShape(input), GetTensorData<uint8_t>(input),
          GetTensorShape(output), GetTensorData<uint8_t>(output));
      return kTfLiteOk;
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
    2350:	696c      	ldr	r4, [r5, #20]
    2352:	4ba8      	ldr	r3, [pc, #672]	; (25f4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2d0>)
    2354:	4798      	blx	r3
    2356:	4602      	mov	r2, r0
    2358:	49a7      	ldr	r1, [pc, #668]	; (25f8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2d4>)
    235a:	4628      	mov	r0, r5
    235c:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
    235e:	2001      	movs	r0, #1
    }
  }
}
    2360:	b025      	add	sp, #148	; 0x94
    2362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (tensor == nullptr) {
    2366:	2c00      	cmp	r4, #0
    2368:	d03c      	beq.n	23e4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xc0>
  const int dims_size = dims->size;
    236a:	68a6      	ldr	r6, [r4, #8]
    236c:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    2370:	9500      	str	r5, [sp, #0]
    if (dimensions_count > kMaxSmallSize) {
    2372:	2d05      	cmp	r5, #5
    2374:	dd38      	ble.n	23e8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xc4>
      dims_pointer_ = new int32[dimensions_count];
    2376:	4ba1      	ldr	r3, [pc, #644]	; (25fc <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2d8>)
    2378:	429d      	cmp	r5, r3
    237a:	bf94      	ite	ls
    237c:	00a8      	lslls	r0, r5, #2
    237e:	f04f 30ff 	movhi.w	r0, #4294967295
    2382:	4b9f      	ldr	r3, [pc, #636]	; (2600 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2dc>)
    2384:	4798      	blx	r3
    2386:	9001      	str	r0, [sp, #4]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2388:	00aa      	lsls	r2, r5, #2
    238a:	4631      	mov	r1, r6
    238c:	4b9d      	ldr	r3, [pc, #628]	; (2604 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2e0>)
    238e:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    2390:	6864      	ldr	r4, [r4, #4]
  if (tensor == nullptr) {
    2392:	f1b9 0f00 	cmp.w	r9, #0
    2396:	d029      	beq.n	23ec <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xc8>
  const int dims_size = dims->size;
    2398:	f8d9 6008 	ldr.w	r6, [r9, #8]
    239c:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    23a0:	9506      	str	r5, [sp, #24]
    if (dimensions_count > kMaxSmallSize) {
    23a2:	2d05      	cmp	r5, #5
    23a4:	dd25      	ble.n	23f2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xce>
      dims_pointer_ = new int32[dimensions_count];
    23a6:	4b95      	ldr	r3, [pc, #596]	; (25fc <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2d8>)
    23a8:	429d      	cmp	r5, r3
    23aa:	bf94      	ite	ls
    23ac:	00a8      	lslls	r0, r5, #2
    23ae:	f04f 30ff 	movhi.w	r0, #4294967295
    23b2:	4b93      	ldr	r3, [pc, #588]	; (2600 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2dc>)
    23b4:	4798      	blx	r3
    23b6:	9007      	str	r0, [sp, #28]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    23b8:	00aa      	lsls	r2, r5, #2
    23ba:	4631      	mov	r1, r6
    23bc:	4b91      	ldr	r3, [pc, #580]	; (2604 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2e0>)
    23be:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    23c0:	f8d9 7004 	ldr.w	r7, [r9, #4]
  inline int32 DimensionsCount() const { return size_; }
    23c4:	9d00      	ldr	r5, [sp, #0]
    23c6:	f8dd a018 	ldr.w	sl, [sp, #24]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    23ca:	4555      	cmp	r5, sl
    23cc:	d113      	bne.n	23f6 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xd2>
  for (int i = 0; i < dims_count; ++i) {
    23ce:	2d00      	cmp	r5, #0
    23d0:	f340 81e5 	ble.w	279e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x47a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    23d4:	f8dd e004 	ldr.w	lr, [sp, #4]
    23d8:	f8dd c01c 	ldr.w	ip, [sp, #28]
    23dc:	2201      	movs	r2, #1
    23de:	2300      	movs	r3, #0
    23e0:	ae06      	add	r6, sp, #24
    23e2:	e01a      	b.n	241a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xf6>
  RuntimeShape() : size_(0) {}
    23e4:	9400      	str	r4, [sp, #0]
    23e6:	e7d4      	b.n	2392 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x6e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    23e8:	a801      	add	r0, sp, #4
    23ea:	e7cd      	b.n	2388 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x64>
  RuntimeShape() : size_(0) {}
    23ec:	2700      	movs	r7, #0
    23ee:	9706      	str	r7, [sp, #24]
    23f0:	e7e8      	b.n	23c4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xa0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    23f2:	a807      	add	r0, sp, #28
    23f4:	e7e0      	b.n	23b8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x94>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    23f6:	4b84      	ldr	r3, [pc, #528]	; (2608 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    23f8:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    23fa:	4b83      	ldr	r3, [pc, #524]	; (2608 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    23fc:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    23fe:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    2402:	4553      	cmp	r3, sl
    2404:	da12      	bge.n	242c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x108>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2406:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    240a:	4288      	cmp	r0, r1
    240c:	d110      	bne.n	2430 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x10c>
  for (int i = 0; i < dims_count; ++i) {
    240e:	3301      	adds	r3, #1
    2410:	429d      	cmp	r5, r3
    2412:	d00f      	beq.n	2434 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x110>
    2414:	3201      	adds	r2, #1
    TFLITE_DCHECK_GE(i, 0);
    2416:	2b00      	cmp	r3, #0
    2418:	dbef      	blt.n	23fa <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xd6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    241a:	2d05      	cmp	r5, #5
    241c:	dcef      	bgt.n	23fe <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xda>
    241e:	f85d 1022 	ldr.w	r1, [sp, r2, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    2422:	4553      	cmp	r3, sl
    2424:	da02      	bge.n	242c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x108>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2426:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
    242a:	e7ee      	b.n	240a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xe6>
    TFLITE_DCHECK_LT(i, size_);
    242c:	4b76      	ldr	r3, [pc, #472]	; (2608 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    242e:	4798      	blx	r3
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    2430:	4b75      	ldr	r3, [pc, #468]	; (2608 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    2432:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2434:	2d05      	cmp	r5, #5
    2436:	dd16      	ble.n	2466 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x142>
    2438:	9901      	ldr	r1, [sp, #4]
    for (int i = 0; i < size_; i++) {
    243a:	2d00      	cmp	r5, #0
    243c:	dd15      	ble.n	246a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x146>
    243e:	460b      	mov	r3, r1
    2440:	eb01 0185 	add.w	r1, r1, r5, lsl #2
    2444:	2601      	movs	r6, #1
      buffer_size *= dims_data[i];
    2446:	f853 2b04 	ldr.w	r2, [r3], #4
    244a:	fb02 f606 	mul.w	r6, r2, r6
    for (int i = 0; i < size_; i++) {
    244e:	4299      	cmp	r1, r3
    2450:	d1f9      	bne.n	2446 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x122>
  for (int i = 0; i < flat_size; ++i) {
    2452:	2e00      	cmp	r6, #0
    2454:	dd20      	ble.n	2498 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x174>
    2456:	f1a4 0804 	sub.w	r8, r4, #4
    245a:	f1a7 0904 	sub.w	r9, r7, #4
    int buffer_size = 1;
    245e:	2700      	movs	r7, #0
    const float clamped = val > upper ? upper : val < lower ? lower : val;
    2460:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 261c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
    2464:	e009      	b.n	247a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x156>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2466:	a901      	add	r1, sp, #4
    2468:	e7e7      	b.n	243a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x116>
    int buffer_size = 1;
    246a:	2601      	movs	r6, #1
    246c:	e7f3      	b.n	2456 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x132>
    246e:	4c67      	ldr	r4, [pc, #412]	; (260c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2e8>)
    output_data[i] = clamped;
    2470:	f849 4f04 	str.w	r4, [r9, #4]!
  for (int i = 0; i < flat_size; ++i) {
    2474:	3701      	adds	r7, #1
    2476:	42b7      	cmp	r7, r6
    2478:	da0e      	bge.n	2498 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x174>
    const float val = input_data[i];
    247a:	f858 4f04 	ldr.w	r4, [r8, #4]!
    const float clamped = val > upper ? upper : val < lower ? lower : val;
    247e:	4963      	ldr	r1, [pc, #396]	; (260c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2e8>)
    2480:	4620      	mov	r0, r4
    2482:	47d8      	blx	fp
    2484:	2800      	cmp	r0, #0
    2486:	d1f2      	bne.n	246e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x14a>
    2488:	2100      	movs	r1, #0
    248a:	4620      	mov	r0, r4
    248c:	4b60      	ldr	r3, [pc, #384]	; (2610 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2ec>)
    248e:	4798      	blx	r3
    2490:	2800      	cmp	r0, #0
    2492:	d0ed      	beq.n	2470 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x14c>
    2494:	2400      	movs	r4, #0
    2496:	e7eb      	b.n	2470 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x14c>
    if (size_ > kMaxSmallSize) {
    2498:	f1ba 0f05 	cmp.w	sl, #5
    249c:	dd09      	ble.n	24b2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x18e>
      delete[] dims_pointer_;
    249e:	9807      	ldr	r0, [sp, #28]
    24a0:	b108      	cbz	r0, 24a6 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    24a2:	4b5c      	ldr	r3, [pc, #368]	; (2614 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2f0>)
    24a4:	4798      	blx	r3
    24a6:	9801      	ldr	r0, [sp, #4]
    24a8:	b108      	cbz	r0, 24ae <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x18a>
    24aa:	4b5a      	ldr	r3, [pc, #360]	; (2614 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2f0>)
    24ac:	4798      	blx	r3
      return kTfLiteOk;
    24ae:	2000      	movs	r0, #0
    24b0:	e756      	b.n	2360 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x3c>
    if (size_ > kMaxSmallSize) {
    24b2:	2d05      	cmp	r5, #5
    24b4:	ddfb      	ble.n	24ae <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x18a>
    24b6:	e7f6      	b.n	24a6 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
          6.0f, input->params.scale, input->params.zero_point);
    24b8:	6922      	ldr	r2, [r4, #16]
    24ba:	68e1      	ldr	r1, [r4, #12]
    24bc:	4853      	ldr	r0, [pc, #332]	; (260c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2e8>)
    24be:	4b56      	ldr	r3, [pc, #344]	; (2618 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2f4>)
    24c0:	4798      	blx	r3
    24c2:	4605      	mov	r5, r0
      const int8_t zero = input->params.zero_point;
    24c4:	6927      	ldr	r7, [r4, #16]
  if (tensor == nullptr) {
    24c6:	2c00      	cmp	r4, #0
    24c8:	d040      	beq.n	254c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x228>
  const int dims_size = dims->size;
    24ca:	f8d4 8008 	ldr.w	r8, [r4, #8]
    24ce:	f858 6b04 	ldr.w	r6, [r8], #4
    size_ = dimensions_count;
    24d2:	960c      	str	r6, [sp, #48]	; 0x30
    if (dimensions_count > kMaxSmallSize) {
    24d4:	2e05      	cmp	r6, #5
    24d6:	dd3c      	ble.n	2552 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x22e>
      dims_pointer_ = new int32[dimensions_count];
    24d8:	4b48      	ldr	r3, [pc, #288]	; (25fc <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2d8>)
    24da:	429e      	cmp	r6, r3
    24dc:	bf94      	ite	ls
    24de:	00b0      	lslls	r0, r6, #2
    24e0:	f04f 30ff 	movhi.w	r0, #4294967295
    24e4:	4b46      	ldr	r3, [pc, #280]	; (2600 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2dc>)
    24e6:	4798      	blx	r3
    24e8:	900d      	str	r0, [sp, #52]	; 0x34
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    24ea:	00b2      	lsls	r2, r6, #2
    24ec:	4641      	mov	r1, r8
    24ee:	4b45      	ldr	r3, [pc, #276]	; (2604 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2e0>)
    24f0:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    24f2:	6866      	ldr	r6, [r4, #4]
  if (tensor == nullptr) {
    24f4:	f1b9 0f00 	cmp.w	r9, #0
    24f8:	d02d      	beq.n	2556 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x232>
  const int dims_size = dims->size;
    24fa:	f8d9 8008 	ldr.w	r8, [r9, #8]
    24fe:	f858 4b04 	ldr.w	r4, [r8], #4
    size_ = dimensions_count;
    2502:	9412      	str	r4, [sp, #72]	; 0x48
    if (dimensions_count > kMaxSmallSize) {
    2504:	2c05      	cmp	r4, #5
    2506:	dd2a      	ble.n	255e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x23a>
      dims_pointer_ = new int32[dimensions_count];
    2508:	4b3c      	ldr	r3, [pc, #240]	; (25fc <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2d8>)
    250a:	429c      	cmp	r4, r3
    250c:	bf94      	ite	ls
    250e:	00a0      	lslls	r0, r4, #2
    2510:	f04f 30ff 	movhi.w	r0, #4294967295
    2514:	4b3a      	ldr	r3, [pc, #232]	; (2600 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2dc>)
    2516:	4798      	blx	r3
    2518:	9013      	str	r0, [sp, #76]	; 0x4c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    251a:	00a2      	lsls	r2, r4, #2
    251c:	4641      	mov	r1, r8
    251e:	4b39      	ldr	r3, [pc, #228]	; (2604 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2e0>)
    2520:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    2522:	f8d9 c004 	ldr.w	ip, [r9, #4]
  inline int32 DimensionsCount() const { return size_; }
    2526:	990c      	ldr	r1, [sp, #48]	; 0x30
    2528:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    252c:	4571      	cmp	r1, lr
    252e:	d118      	bne.n	2562 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x23e>
  for (int i = 0; i < dims_count; ++i) {
    2530:	2900      	cmp	r1, #0
    2532:	f340 8139 	ble.w	27a8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x484>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2536:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    253a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    253e:	2201      	movs	r2, #1
    2540:	2300      	movs	r3, #0
    2542:	f10d 0830 	add.w	r8, sp, #48	; 0x30
    2546:	f10d 0948 	add.w	r9, sp, #72	; 0x48
    254a:	e01c      	b.n	2586 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x262>
  RuntimeShape() : size_(0) {}
    254c:	2600      	movs	r6, #0
    254e:	960c      	str	r6, [sp, #48]	; 0x30
    2550:	e7d0      	b.n	24f4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2552:	a80d      	add	r0, sp, #52	; 0x34
    2554:	e7c9      	b.n	24ea <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1c6>
  RuntimeShape() : size_(0) {}
    2556:	2400      	movs	r4, #0
    2558:	9412      	str	r4, [sp, #72]	; 0x48
    255a:	46a4      	mov	ip, r4
    255c:	e7e3      	b.n	2526 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x202>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    255e:	a813      	add	r0, sp, #76	; 0x4c
    2560:	e7db      	b.n	251a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1f6>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    2562:	4b29      	ldr	r3, [pc, #164]	; (2608 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    2564:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    2566:	4b28      	ldr	r3, [pc, #160]	; (2608 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    2568:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    256a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    256e:	459e      	cmp	lr, r3
    2570:	dd12      	ble.n	2598 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x274>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2572:	f85b 4023 	ldr.w	r4, [fp, r3, lsl #2]
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    2576:	4284      	cmp	r4, r0
    2578:	d110      	bne.n	259c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x278>
  for (int i = 0; i < dims_count; ++i) {
    257a:	3301      	adds	r3, #1
    257c:	4299      	cmp	r1, r3
    257e:	d00f      	beq.n	25a0 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x27c>
    2580:	3201      	adds	r2, #1
    TFLITE_DCHECK_GE(i, 0);
    2582:	2b00      	cmp	r3, #0
    2584:	dbef      	blt.n	2566 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x242>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2586:	2905      	cmp	r1, #5
    2588:	dcef      	bgt.n	256a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x246>
    258a:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    258e:	459e      	cmp	lr, r3
    2590:	dd02      	ble.n	2598 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x274>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2592:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
    2596:	e7ee      	b.n	2576 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x252>
    TFLITE_DCHECK_LT(i, size_);
    2598:	4b1b      	ldr	r3, [pc, #108]	; (2608 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    259a:	4798      	blx	r3
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    259c:	4b1a      	ldr	r3, [pc, #104]	; (2608 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    259e:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    25a0:	2905      	cmp	r1, #5
    25a2:	dd15      	ble.n	25d0 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
    25a4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    for (int i = 0; i < size_; i++) {
    25a6:	2900      	cmp	r1, #0
    25a8:	dd14      	ble.n	25d4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2b0>
    25aa:	4623      	mov	r3, r4
    25ac:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    25b0:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
    25b2:	f853 0b04 	ldr.w	r0, [r3], #4
    25b6:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
    25ba:	42a3      	cmp	r3, r4
    25bc:	d1f9      	bne.n	25b2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x28e>
  for (int i = 0; i < flat_size; ++i) {
    25be:	2a00      	cmp	r2, #0
    25c0:	dd2e      	ble.n	2620 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2fc>
    25c2:	3e01      	subs	r6, #1
    25c4:	f10c 34ff 	add.w	r4, ip, #4294967295
    int buffer_size = 1;
    25c8:	2000      	movs	r0, #0
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    25ca:	46ac      	mov	ip, r5
    25cc:	b27f      	sxtb	r7, r7
    25ce:	e009      	b.n	25e4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2c0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    25d0:	ac0d      	add	r4, sp, #52	; 0x34
    25d2:	e7e8      	b.n	25a6 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x282>
    int buffer_size = 1;
    25d4:	2201      	movs	r2, #1
    25d6:	e7f4      	b.n	25c2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x29e>
    25d8:	4663      	mov	r3, ip
    output_data[i] = clamped;
    25da:	f804 3f01 	strb.w	r3, [r4, #1]!
  for (int i = 0; i < flat_size; ++i) {
    25de:	3001      	adds	r0, #1
    25e0:	4290      	cmp	r0, r2
    25e2:	da1d      	bge.n	2620 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2fc>
    const Q val = input_data[i];
    25e4:	f916 3f01 	ldrsb.w	r3, [r6, #1]!
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    25e8:	429d      	cmp	r5, r3
    25ea:	dbf5      	blt.n	25d8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2b4>
    25ec:	42bb      	cmp	r3, r7
    25ee:	bfb8      	it	lt
    25f0:	463b      	movlt	r3, r7
    25f2:	e7f2      	b.n	25da <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x2b6>
    25f4:	00009145 	.word	0x00009145
    25f8:	00020bbc 	.word	0x00020bbc
    25fc:	1ffffffe 	.word	0x1ffffffe
    2600:	00009291 	.word	0x00009291
    2604:	00014641 	.word	0x00014641
    2608:	000138bd 	.word	0x000138bd
    260c:	40c00000 	.word	0x40c00000
    2610:	0001259d 	.word	0x0001259d
    2614:	000091e1 	.word	0x000091e1
    2618:	00008fa5 	.word	0x00008fa5
    261c:	000125d9 	.word	0x000125d9
    if (size_ > kMaxSmallSize) {
    2620:	f1be 0f05 	cmp.w	lr, #5
    2624:	dd09      	ble.n	263a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x316>
      delete[] dims_pointer_;
    2626:	9813      	ldr	r0, [sp, #76]	; 0x4c
    2628:	b108      	cbz	r0, 262e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x30a>
    262a:	4b64      	ldr	r3, [pc, #400]	; (27bc <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x498>)
    262c:	4798      	blx	r3
    262e:	980d      	ldr	r0, [sp, #52]	; 0x34
    2630:	b108      	cbz	r0, 2636 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x312>
    2632:	4b62      	ldr	r3, [pc, #392]	; (27bc <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x498>)
    2634:	4798      	blx	r3
      return kTfLiteOk;
    2636:	2000      	movs	r0, #0
    2638:	e692      	b.n	2360 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x3c>
    if (size_ > kMaxSmallSize) {
    263a:	2905      	cmp	r1, #5
    263c:	ddfb      	ble.n	2636 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x312>
    263e:	e7f6      	b.n	262e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x30a>
          6.0f, input->params.scale, input->params.zero_point);
    2640:	6922      	ldr	r2, [r4, #16]
    2642:	68e1      	ldr	r1, [r4, #12]
    2644:	485e      	ldr	r0, [pc, #376]	; (27c0 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x49c>)
    2646:	4b5f      	ldr	r3, [pc, #380]	; (27c4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x4a0>)
    2648:	4798      	blx	r3
    264a:	4605      	mov	r5, r0
      const uint8_t zero = input->params.zero_point;
    264c:	6927      	ldr	r7, [r4, #16]
  if (tensor == nullptr) {
    264e:	2c00      	cmp	r4, #0
    2650:	d03f      	beq.n	26d2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x3ae>
  const int dims_size = dims->size;
    2652:	f8d4 8008 	ldr.w	r8, [r4, #8]
    2656:	f858 6b04 	ldr.w	r6, [r8], #4
    size_ = dimensions_count;
    265a:	9618      	str	r6, [sp, #96]	; 0x60
    if (dimensions_count > kMaxSmallSize) {
    265c:	2e05      	cmp	r6, #5
    265e:	dd3b      	ble.n	26d8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x3b4>
      dims_pointer_ = new int32[dimensions_count];
    2660:	4b59      	ldr	r3, [pc, #356]	; (27c8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x4a4>)
    2662:	429e      	cmp	r6, r3
    2664:	bf94      	ite	ls
    2666:	00b0      	lslls	r0, r6, #2
    2668:	f04f 30ff 	movhi.w	r0, #4294967295
    266c:	4b57      	ldr	r3, [pc, #348]	; (27cc <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x4a8>)
    266e:	4798      	blx	r3
    2670:	9019      	str	r0, [sp, #100]	; 0x64
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2672:	00b2      	lsls	r2, r6, #2
    2674:	4641      	mov	r1, r8
    2676:	4b56      	ldr	r3, [pc, #344]	; (27d0 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x4ac>)
    2678:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    267a:	6866      	ldr	r6, [r4, #4]
  if (tensor == nullptr) {
    267c:	f1b9 0f00 	cmp.w	r9, #0
    2680:	d02c      	beq.n	26dc <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x3b8>
  const int dims_size = dims->size;
    2682:	f8d9 8008 	ldr.w	r8, [r9, #8]
    2686:	f858 4b04 	ldr.w	r4, [r8], #4
    size_ = dimensions_count;
    268a:	941e      	str	r4, [sp, #120]	; 0x78
    if (dimensions_count > kMaxSmallSize) {
    268c:	2c05      	cmp	r4, #5
    268e:	dd29      	ble.n	26e4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x3c0>
      dims_pointer_ = new int32[dimensions_count];
    2690:	4b4d      	ldr	r3, [pc, #308]	; (27c8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x4a4>)
    2692:	429c      	cmp	r4, r3
    2694:	bf94      	ite	ls
    2696:	00a0      	lslls	r0, r4, #2
    2698:	f04f 30ff 	movhi.w	r0, #4294967295
    269c:	4b4b      	ldr	r3, [pc, #300]	; (27cc <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x4a8>)
    269e:	4798      	blx	r3
    26a0:	901f      	str	r0, [sp, #124]	; 0x7c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    26a2:	00a2      	lsls	r2, r4, #2
    26a4:	4641      	mov	r1, r8
    26a6:	4b4a      	ldr	r3, [pc, #296]	; (27d0 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x4ac>)
    26a8:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    26aa:	f8d9 c004 	ldr.w	ip, [r9, #4]
  inline int32 DimensionsCount() const { return size_; }
    26ae:	9918      	ldr	r1, [sp, #96]	; 0x60
    26b0:	f8dd e078 	ldr.w	lr, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    26b4:	4571      	cmp	r1, lr
    26b6:	d117      	bne.n	26e8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x3c4>
  for (int i = 0; i < dims_count; ++i) {
    26b8:	2900      	cmp	r1, #0
    26ba:	dd7a      	ble.n	27b2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x48e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    26bc:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
    26c0:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
    26c4:	2201      	movs	r2, #1
    26c6:	2300      	movs	r3, #0
    26c8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    26cc:	f10d 0978 	add.w	r9, sp, #120	; 0x78
    26d0:	e01c      	b.n	270c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x3e8>
  RuntimeShape() : size_(0) {}
    26d2:	2600      	movs	r6, #0
    26d4:	9618      	str	r6, [sp, #96]	; 0x60
    26d6:	e7d1      	b.n	267c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x358>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    26d8:	a819      	add	r0, sp, #100	; 0x64
    26da:	e7ca      	b.n	2672 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x34e>
  RuntimeShape() : size_(0) {}
    26dc:	2400      	movs	r4, #0
    26de:	941e      	str	r4, [sp, #120]	; 0x78
    26e0:	46a4      	mov	ip, r4
    26e2:	e7e4      	b.n	26ae <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x38a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    26e4:	a81f      	add	r0, sp, #124	; 0x7c
    26e6:	e7dc      	b.n	26a2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x37e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
    26e8:	4b3a      	ldr	r3, [pc, #232]	; (27d4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x4b0>)
    26ea:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    26ec:	4b39      	ldr	r3, [pc, #228]	; (27d4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x4b0>)
    26ee:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    26f0:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    26f4:	4573      	cmp	r3, lr
    26f6:	da12      	bge.n	271e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x3fa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    26f8:	f85b 4023 	ldr.w	r4, [fp, r3, lsl #2]
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    26fc:	4284      	cmp	r4, r0
    26fe:	d110      	bne.n	2722 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x3fe>
  for (int i = 0; i < dims_count; ++i) {
    2700:	3301      	adds	r3, #1
    2702:	4299      	cmp	r1, r3
    2704:	d00f      	beq.n	2726 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x402>
    2706:	3201      	adds	r2, #1
    TFLITE_DCHECK_GE(i, 0);
    2708:	2b00      	cmp	r3, #0
    270a:	dbef      	blt.n	26ec <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x3c8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    270c:	2905      	cmp	r1, #5
    270e:	dcef      	bgt.n	26f0 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x3cc>
    2710:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    2714:	4573      	cmp	r3, lr
    2716:	da02      	bge.n	271e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x3fa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2718:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
    271c:	e7ee      	b.n	26fc <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x3d8>
    TFLITE_DCHECK_LT(i, size_);
    271e:	4b2d      	ldr	r3, [pc, #180]	; (27d4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x4b0>)
    2720:	4798      	blx	r3
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    2722:	4b2c      	ldr	r3, [pc, #176]	; (27d4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x4b0>)
    2724:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2726:	2905      	cmp	r1, #5
    2728:	dd17      	ble.n	275a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x436>
    272a:	9c19      	ldr	r4, [sp, #100]	; 0x64
    for (int i = 0; i < size_; i++) {
    272c:	2900      	cmp	r1, #0
    272e:	dd16      	ble.n	275e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x43a>
    2730:	4623      	mov	r3, r4
    2732:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    2736:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
    2738:	f853 0b04 	ldr.w	r0, [r3], #4
    273c:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
    2740:	429c      	cmp	r4, r3
    2742:	d1f9      	bne.n	2738 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x414>
  for (int i = 0; i < flat_size; ++i) {
    2744:	2a00      	cmp	r2, #0
    2746:	dd1a      	ble.n	277e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x45a>
      const uint8_t zero = input->params.zero_point;
    2748:	fa5f f887 	uxtb.w	r8, r7
    274c:	3e01      	subs	r6, #1
    274e:	f10c 34ff 	add.w	r4, ip, #4294967295
    2752:	2000      	movs	r0, #0
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    2754:	46ac      	mov	ip, r5
    2756:	4647      	mov	r7, r8
    2758:	e009      	b.n	276e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x44a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    275a:	ac19      	add	r4, sp, #100	; 0x64
    275c:	e7e6      	b.n	272c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x408>
    int buffer_size = 1;
    275e:	2201      	movs	r2, #1
    2760:	e7f2      	b.n	2748 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x424>
    2762:	4663      	mov	r3, ip
    output_data[i] = clamped;
    2764:	f804 3f01 	strb.w	r3, [r4, #1]!
  for (int i = 0; i < flat_size; ++i) {
    2768:	3001      	adds	r0, #1
    276a:	4290      	cmp	r0, r2
    276c:	da07      	bge.n	277e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x45a>
    const Q val = input_data[i];
    276e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    2772:	42ab      	cmp	r3, r5
    2774:	dcf5      	bgt.n	2762 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x43e>
    2776:	429f      	cmp	r7, r3
    2778:	bfc8      	it	gt
    277a:	4643      	movgt	r3, r8
    277c:	e7f2      	b.n	2764 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x440>
    if (size_ > kMaxSmallSize) {
    277e:	f1be 0f05 	cmp.w	lr, #5
    2782:	dd09      	ble.n	2798 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x474>
      delete[] dims_pointer_;
    2784:	981f      	ldr	r0, [sp, #124]	; 0x7c
    2786:	b108      	cbz	r0, 278c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x468>
    2788:	4b0c      	ldr	r3, [pc, #48]	; (27bc <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x498>)
    278a:	4798      	blx	r3
    278c:	9819      	ldr	r0, [sp, #100]	; 0x64
    278e:	b108      	cbz	r0, 2794 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x470>
    2790:	4b0a      	ldr	r3, [pc, #40]	; (27bc <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x498>)
    2792:	4798      	blx	r3
      return kTfLiteOk;
    2794:	2000      	movs	r0, #0
    2796:	e5e3      	b.n	2360 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x3c>
    if (size_ > kMaxSmallSize) {
    2798:	2905      	cmp	r1, #5
    279a:	ddfb      	ble.n	2794 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x470>
    279c:	e7f6      	b.n	278c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x468>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    279e:	2d05      	cmp	r5, #5
    27a0:	f73f ae4a 	bgt.w	2438 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x114>
    int buffer_size = 1;
    27a4:	2601      	movs	r6, #1
    27a6:	e656      	b.n	2456 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x132>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    27a8:	2905      	cmp	r1, #5
    27aa:	f73f aefb 	bgt.w	25a4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x280>
    int buffer_size = 1;
    27ae:	2201      	movs	r2, #1
    27b0:	e707      	b.n	25c2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x29e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    27b2:	2905      	cmp	r1, #5
    27b4:	dcb9      	bgt.n	272a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x406>
    int buffer_size = 1;
    27b6:	2201      	movs	r2, #1
    27b8:	e7c6      	b.n	2748 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x424>
    27ba:	bf00      	nop
    27bc:	000091e1 	.word	0x000091e1
    27c0:	40c00000 	.word	0x40c00000
    27c4:	00008f69 	.word	0x00008f69
    27c8:	1ffffffe 	.word	0x1ffffffe
    27cc:	00009291 	.word	0x00009291
    27d0:	00014641 	.word	0x00014641
    27d4:	000138bd 	.word	0x000138bd

000027d8 <_ZN6tflite3ops5micro13Register_RELUEv>:

}  // namespace activations

TfLiteRegistration Register_RELU() {
    27d8:	b470      	push	{r4, r5, r6}
    27da:	4606      	mov	r6, r0
          /*prepare=*/activations::ReluPrepare,
          /*invoke=*/activations::ReluEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    27dc:	4604      	mov	r4, r0
    27de:	4d05      	ldr	r5, [pc, #20]	; (27f4 <_ZN6tflite3ops5micro13Register_RELUEv+0x1c>)
    27e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    27e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    27e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    27e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    27ec:	4630      	mov	r0, r6
    27ee:	bc70      	pop	{r4, r5, r6}
    27f0:	4770      	bx	lr
    27f2:	bf00      	nop
    27f4:	00020b7c 	.word	0x00020b7c

000027f8 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj>:
        output_channels));
  }
  return kTfLiteOk;
}

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
    27f8:	b500      	push	{lr}
    27fa:	b083      	sub	sp, #12
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    27fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
    27fe:	b163      	cbz	r3, 281a <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0x22>
  void* data = nullptr;
    2800:	aa02      	add	r2, sp, #8
    2802:	2100      	movs	r1, #0
    2804:	f842 1d04 	str.w	r1, [r2, #-4]!
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
    2808:	2128      	movs	r1, #40	; 0x28
    280a:	4798      	blx	r3
    280c:	2801      	cmp	r0, #1
      kTfLiteError) {
    return nullptr;
  }
  return data;
    280e:	bf14      	ite	ne
    2810:	9801      	ldrne	r0, [sp, #4]
    return nullptr;
    2812:	2000      	moveq	r0, #0
}
    2814:	b003      	add	sp, #12
    2816:	f85d fb04 	ldr.w	pc, [sp], #4
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    281a:	4b01      	ldr	r3, [pc, #4]	; (2820 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0x28>)
    281c:	4798      	blx	r3
    281e:	bf00      	nop
    2820:	000138bd 	.word	0x000138bd

00002824 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>:
                             const TfLiteType data_type, OpData* data) {
    2824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2828:	b08a      	sub	sp, #40	; 0x28
    282a:	9e18      	ldr	r6, [sp, #96]	; 0x60
  bool has_bias = node->inputs->size == 3;
    282c:	680c      	ldr	r4, [r1, #0]
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    282e:	6824      	ldr	r4, [r4, #0]
    2830:	3c02      	subs	r4, #2
    2832:	2c01      	cmp	r4, #1
    2834:	d813      	bhi.n	285e <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x3a>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    2836:	684c      	ldr	r4, [r1, #4]
    2838:	6825      	ldr	r5, [r4, #0]
    283a:	2d01      	cmp	r5, #1
    283c:	d018      	beq.n	2870 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x4c>
    283e:	2401      	movs	r4, #1
    2840:	9403      	str	r4, [sp, #12]
    2842:	9502      	str	r5, [sp, #8]
    2844:	4b5b      	ldr	r3, [pc, #364]	; (29b4 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x190>)
    2846:	9301      	str	r3, [sp, #4]
    2848:	4b5b      	ldr	r3, [pc, #364]	; (29b8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x194>)
    284a:	9300      	str	r3, [sp, #0]
    284c:	6945      	ldr	r5, [r0, #20]
    284e:	2350      	movs	r3, #80	; 0x50
    2850:	4a5a      	ldr	r2, [pc, #360]	; (29bc <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x198>)
    2852:	495b      	ldr	r1, [pc, #364]	; (29c0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x19c>)
    2854:	47a8      	blx	r5
    2856:	4620      	mov	r0, r4
}
    2858:	b00a      	add	sp, #40	; 0x28
    285a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    285e:	4b59      	ldr	r3, [pc, #356]	; (29c4 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x1a0>)
    2860:	9300      	str	r3, [sp, #0]
    2862:	6944      	ldr	r4, [r0, #20]
    2864:	234f      	movs	r3, #79	; 0x4f
    2866:	4a55      	ldr	r2, [pc, #340]	; (29bc <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x198>)
    2868:	4957      	ldr	r1, [pc, #348]	; (29c8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x1a4>)
    286a:	47a0      	blx	r4
    286c:	2001      	movs	r0, #1
    286e:	e7f3      	b.n	2858 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x34>
  auto padding = params->padding;
    2870:	f892 c000 	ldrb.w	ip, [r2]
      params->stride_height, params->stride_width,
    2874:	f8d2 9008 	ldr.w	r9, [r2, #8]
    2878:	f8d2 e004 	ldr.w	lr, [r2, #4]
      params->dilation_height_factor, params->dilation_width_factor, height,
    287c:	6954      	ldr	r4, [r2, #20]
}

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    287e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    2880:	1e7d      	subs	r5, r7, #1
    2882:	6917      	ldr	r7, [r2, #16]
    2884:	fb07 f705 	mul.w	r7, r7, r5
    2888:	f107 0a01 	add.w	sl, r7, #1
  switch (padding) {
    288c:	f1bc 0f01 	cmp.w	ip, #1
    2890:	d011      	beq.n	28b6 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x92>
    2892:	f1bc 0f02 	cmp.w	ip, #2
    2896:	d050      	beq.n	293a <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x116>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    2898:	9d14      	ldr	r5, [sp, #80]	; 0x50
    289a:	3d01      	subs	r5, #1
    289c:	fb04 f405 	mul.w	r4, r4, r5
    28a0:	f104 0801 	add.w	r8, r4, #1
  switch (padding) {
    28a4:	f1bc 0f01 	cmp.w	ip, #1
    28a8:	d05c      	beq.n	2964 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x140>
    28aa:	f1bc 0f02 	cmp.w	ip, #2
    28ae:	d05b      	beq.n	2968 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x144>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    default:
      return 0;
    28b0:	2500      	movs	r5, #0
    28b2:	462c      	mov	r4, r5
    28b4:	e010      	b.n	28d8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0xb4>
      return (image_size + stride - 1) / stride;
    28b6:	eb0e 0503 	add.w	r5, lr, r3
    28ba:	3d01      	subs	r5, #1
    28bc:	fb95 f5fe 	sdiv	r5, r5, lr
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    28c0:	9f14      	ldr	r7, [sp, #80]	; 0x50
    28c2:	f107 38ff 	add.w	r8, r7, #4294967295
    28c6:	fb04 f408 	mul.w	r4, r4, r8
    28ca:	f104 0801 	add.w	r8, r4, #1
      return (image_size + stride - 1) / stride;
    28ce:	9c12      	ldr	r4, [sp, #72]	; 0x48
    28d0:	444c      	add	r4, r9
    28d2:	3c01      	subs	r4, #1
    28d4:	fb94 f4f9 	sdiv	r4, r4, r9
      ((out_size - 1) * stride + effective_filter_size - in_size);
    28d8:	3c01      	subs	r4, #1
    28da:	fb09 8404 	mla	r4, r9, r4, r8
    28de:	9f12      	ldr	r7, [sp, #72]	; 0x48
    28e0:	1be4      	subs	r4, r4, r7
  total_padding = total_padding > 0 ? total_padding : 0;
    28e2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
      ((out_size - 1) * stride + effective_filter_size - in_size);
    28e6:	3d01      	subs	r5, #1
    28e8:	fb0e a505 	mla	r5, lr, r5, sl
    28ec:	1aeb      	subs	r3, r5, r3
  total_padding = total_padding > 0 ? total_padding : 0;
    28ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  return total_padding / 2;
    28f2:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
    28f6:	106d      	asrs	r5, r5, #1
      width, filter_height, filter_width, padding, &out_height, &out_width);
    28f8:	6035      	str	r5, [r6, #0]
    28fa:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
    28fe:	106d      	asrs	r5, r5, #1
    2900:	6075      	str	r5, [r6, #4]
  *offset = total_padding % 2;
    2902:	f003 0301 	and.w	r3, r3, #1
    2906:	60b3      	str	r3, [r6, #8]
    2908:	f004 0401 	and.w	r4, r4, #1
    290c:	60f4      	str	r4, [r6, #12]
  if (data_type != kTfLiteFloat32) {
    290e:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    2912:	2b01      	cmp	r3, #1
    2914:	d04b      	beq.n	29ae <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x18a>
  return &context->tensors[node->inputs->data[index]];
    2916:	6885      	ldr	r5, [r0, #8]
    2918:	680b      	ldr	r3, [r1, #0]
    291a:	685c      	ldr	r4, [r3, #4]
    291c:	eb05 1e84 	add.w	lr, r5, r4, lsl #6
    2920:	689c      	ldr	r4, [r3, #8]
    2922:	eb05 1484 	add.w	r4, r5, r4, lsl #6
}

inline const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                                  const TfLiteNode* node,
                                                  int index) {
  const bool use_tensor = index < node->inputs->size &&
    2926:	681f      	ldr	r7, [r3, #0]
    2928:	2f02      	cmp	r7, #2
    292a:	dd21      	ble.n	2970 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x14c>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    292c:	68db      	ldr	r3, [r3, #12]
  const bool use_tensor = index < node->inputs->size &&
    292e:	f1b3 3fff 	cmp.w	r3, #4294967295
    2932:	d01b      	beq.n	296c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x148>
  if (use_tensor) {
    return &context->tensors[node->inputs->data[index]];
    2934:	eb05 1383 	add.w	r3, r5, r3, lsl #6
    2938:	e01b      	b.n	2972 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x14e>
      return (image_size + stride - effective_filter_size) / stride;
    293a:	eb0e 0503 	add.w	r5, lr, r3
    293e:	eba5 050a 	sub.w	r5, r5, sl
    2942:	fb95 f5fe 	sdiv	r5, r5, lr
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    2946:	9f14      	ldr	r7, [sp, #80]	; 0x50
    2948:	f107 38ff 	add.w	r8, r7, #4294967295
    294c:	fb04 f408 	mul.w	r4, r4, r8
    2950:	f104 0801 	add.w	r8, r4, #1
      return (image_size + stride - effective_filter_size) / stride;
    2954:	9c12      	ldr	r4, [sp, #72]	; 0x48
    2956:	eb09 0c04 	add.w	ip, r9, r4
    295a:	ebac 0c08 	sub.w	ip, ip, r8
    295e:	fb9c f4f9 	sdiv	r4, ip, r9
    2962:	e7b9      	b.n	28d8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0xb4>
      return 0;
    2964:	2500      	movs	r5, #0
    2966:	e7b2      	b.n	28ce <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0xaa>
    2968:	2500      	movs	r5, #0
    296a:	e7f3      	b.n	2954 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x130>
  }
  return nullptr;
    296c:	2300      	movs	r3, #0
    296e:	e000      	b.n	2972 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x14e>
    2970:	2300      	movs	r3, #0
    int output_channels = filter->dims->data[kConvQuantizedDimension];
    2972:	68a7      	ldr	r7, [r4, #8]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    2974:	687f      	ldr	r7, [r7, #4]
    2976:	9708      	str	r7, [sp, #32]
    2978:	69f7      	ldr	r7, [r6, #28]
    297a:	9707      	str	r7, [sp, #28]
    297c:	69b7      	ldr	r7, [r6, #24]
    297e:	9706      	str	r7, [sp, #24]
    2980:	f106 0724 	add.w	r7, r6, #36	; 0x24
    2984:	9705      	str	r7, [sp, #20]
    2986:	f106 0720 	add.w	r7, r6, #32
    298a:	9704      	str	r7, [sp, #16]
    298c:	f106 0714 	add.w	r7, r6, #20
    2990:	9703      	str	r7, [sp, #12]
    2992:	3610      	adds	r6, #16
    2994:	9602      	str	r6, [sp, #8]
    2996:	320c      	adds	r2, #12
    2998:	9201      	str	r2, [sp, #4]
  return &context->tensors[node->outputs->data[index]];
    299a:	684a      	ldr	r2, [r1, #4]
    299c:	6852      	ldr	r2, [r2, #4]
    299e:	eb05 1582 	add.w	r5, r5, r2, lsl #6
    29a2:	9500      	str	r5, [sp, #0]
    29a4:	4622      	mov	r2, r4
    29a6:	4671      	mov	r1, lr
    29a8:	4c08      	ldr	r4, [pc, #32]	; (29cc <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x1a8>)
    29aa:	47a0      	blx	r4
    29ac:	e754      	b.n	2858 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x34>
  return kTfLiteOk;
    29ae:	2000      	movs	r0, #0
    29b0:	e752      	b.n	2858 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x34>
    29b2:	bf00      	nop
    29b4:	00021084 	.word	0x00021084
    29b8:	00020cb4 	.word	0x00020cb4
    29bc:	00020c64 	.word	0x00020c64
    29c0:	0002099c 	.word	0x0002099c
    29c4:	00020c90 	.word	0x00020c90
    29c8:	0001fff8 	.word	0x0001fff8
    29cc:	00001c4d 	.word	0x00001c4d

000029d0 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    29d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29d4:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
    29d6:	f8d1 a010 	ldr.w	sl, [r1, #16]
    29da:	f1ba 0f00 	cmp.w	sl, #0
    29de:	d02f      	beq.n	2a40 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x70>
    29e0:	4605      	mov	r5, r0
    29e2:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    29e4:	f8d1 b014 	ldr.w	fp, [r1, #20]
    29e8:	f1bb 0f00 	cmp.w	fp, #0
    29ec:	d02a      	beq.n	2a44 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x74>
    29ee:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
    29f2:	680b      	ldr	r3, [r1, #0]
    29f4:	685f      	ldr	r7, [r3, #4]
    29f6:	01bf      	lsls	r7, r7, #6
    29f8:	eb08 0207 	add.w	r2, r8, r7
    29fc:	689b      	ldr	r3, [r3, #8]
    29fe:	eb08 1983 	add.w	r9, r8, r3, lsl #6

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);

  int input_width = input->dims->data[2];
    2a02:	6893      	ldr	r3, [r2, #8]
    2a04:	68da      	ldr	r2, [r3, #12]
    2a06:	9208      	str	r2, [sp, #32]
  int input_height = input->dims->data[1];
    2a08:	689b      	ldr	r3, [r3, #8]
    2a0a:	9309      	str	r3, [sp, #36]	; 0x24
  int filter_width = filter->dims->data[2];
    2a0c:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2a10:	68da      	ldr	r2, [r3, #12]
    2a12:	920a      	str	r2, [sp, #40]	; 0x28
  int filter_height = filter->dims->data[1];
    2a14:	689a      	ldr	r2, [r3, #8]
    2a16:	920b      	str	r2, [sp, #44]	; 0x2c
  return &context->tensors[node->outputs->data[index]];
    2a18:	684a      	ldr	r2, [r1, #4]
    2a1a:	6852      	ldr	r2, [r2, #4]
  int output_width = output->dims->data[2];
    2a1c:	eb08 1282 	add.w	r2, r8, r2, lsl #6
    2a20:	6892      	ldr	r2, [r2, #8]
    2a22:	68d1      	ldr	r1, [r2, #12]
    2a24:	910c      	str	r1, [sp, #48]	; 0x30
  int output_height = output->dims->data[1];
    2a26:	6892      	ldr	r2, [r2, #8]
    2a28:	920d      	str	r2, [sp, #52]	; 0x34

  // Dynimically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
    2a2a:	685e      	ldr	r6, [r3, #4]
    2a2c:	00b6      	lsls	r6, r6, #2
    2a2e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    2a30:	f10a 0218 	add.w	r2, sl, #24
    2a34:	4631      	mov	r1, r6
    2a36:	4798      	blx	r3
    2a38:	b130      	cbz	r0, 2a48 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
  }

  return CalculateOpData(context, node, params, input_width, input_height,
                         filter_width, filter_height, output_width,
                         output_height, input->type, data);
}  // namespace conv
    2a3a:	b00f      	add	sp, #60	; 0x3c
    2a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
    2a40:	4b40      	ldr	r3, [pc, #256]	; (2b44 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
    2a42:	4798      	blx	r3
  TFLITE_DCHECK(node->builtin_data != nullptr);
    2a44:	4b3f      	ldr	r3, [pc, #252]	; (2b44 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
    2a46:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
    2a48:	6bab      	ldr	r3, [r5, #56]	; 0x38
    2a4a:	f10a 021c 	add.w	r2, sl, #28
    2a4e:	4631      	mov	r1, r6
    2a50:	4628      	mov	r0, r5
    2a52:	4798      	blx	r3
    2a54:	2800      	cmp	r0, #0
    2a56:	d1f0      	bne.n	2a3a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
  if (input->type == kTfLiteInt8) {
    2a58:	f818 3007 	ldrb.w	r3, [r8, r7]
    2a5c:	2b09      	cmp	r3, #9
    2a5e:	d013      	beq.n	2a88 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xb8>
                         output_height, input->type, data);
    2a60:	f8cd a018 	str.w	sl, [sp, #24]
    2a64:	9305      	str	r3, [sp, #20]
    2a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2a68:	9304      	str	r3, [sp, #16]
    2a6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2a6c:	9303      	str	r3, [sp, #12]
    2a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2a70:	9302      	str	r3, [sp, #8]
    2a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2a74:	9301      	str	r3, [sp, #4]
    2a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2a78:	9300      	str	r3, [sp, #0]
    2a7a:	9b08      	ldr	r3, [sp, #32]
    2a7c:	465a      	mov	r2, fp
    2a7e:	4621      	mov	r1, r4
    2a80:	4628      	mov	r0, r5
    2a82:	4c31      	ldr	r4, [pc, #196]	; (2b48 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x178>)
    2a84:	47a0      	blx	r4
    2a86:	e7d8      	b.n	2a3a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    2a88:	f899 2030 	ldrb.w	r2, [r9, #48]	; 0x30
    2a8c:	2a01      	cmp	r2, #1
    2a8e:	d122      	bne.n	2ad6 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x106>
        static_cast<TfLiteAffineQuantization*>(filter->quantization.params);
    2a90:	f8d9 2034 	ldr.w	r2, [r9, #52]	; 0x34
    TF_LITE_ENSURE(context, affine_quantization);
    2a94:	2a00      	cmp	r2, #0
    2a96:	d02d      	beq.n	2af4 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x124>
    TF_LITE_ENSURE(context, affine_quantization->scale);
    2a98:	6811      	ldr	r1, [r2, #0]
    2a9a:	2900      	cmp	r1, #0
    2a9c:	d034      	beq.n	2b08 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x138>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
    2a9e:	6850      	ldr	r0, [r2, #4]
    2aa0:	2800      	cmp	r0, #0
    2aa2:	d03b      	beq.n	2b1c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>
    TF_LITE_ENSURE(context,
    2aa4:	680a      	ldr	r2, [r1, #0]
    2aa6:	2a01      	cmp	r2, #1
    2aa8:	d004      	beq.n	2ab4 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>
    2aaa:	f8d9 1008 	ldr.w	r1, [r9, #8]
    2aae:	6849      	ldr	r1, [r1, #4]
    2ab0:	428a      	cmp	r2, r1
    2ab2:	d13d      	bne.n	2b30 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x160>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    2ab4:	6801      	ldr	r1, [r0, #0]
    2ab6:	428a      	cmp	r2, r1
    2ab8:	d0d2      	beq.n	2a60 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x90>
    2aba:	9103      	str	r1, [sp, #12]
    2abc:	9202      	str	r2, [sp, #8]
    2abe:	4b23      	ldr	r3, [pc, #140]	; (2b4c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
    2ac0:	9301      	str	r3, [sp, #4]
    2ac2:	4b23      	ldr	r3, [pc, #140]	; (2b50 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x180>)
    2ac4:	9300      	str	r3, [sp, #0]
    2ac6:	696c      	ldr	r4, [r5, #20]
    2ac8:	23a3      	movs	r3, #163	; 0xa3
    2aca:	4a22      	ldr	r2, [pc, #136]	; (2b54 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    2acc:	4922      	ldr	r1, [pc, #136]	; (2b58 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x188>)
    2ace:	4628      	mov	r0, r5
    2ad0:	47a0      	blx	r4
    2ad2:	2001      	movs	r0, #1
    2ad4:	e7b1      	b.n	2a3a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    2ad6:	2401      	movs	r4, #1
    2ad8:	9403      	str	r4, [sp, #12]
    2ada:	9202      	str	r2, [sp, #8]
    2adc:	4b1f      	ldr	r3, [pc, #124]	; (2b5c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    2ade:	9301      	str	r3, [sp, #4]
    2ae0:	4b1f      	ldr	r3, [pc, #124]	; (2b60 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    2ae2:	9300      	str	r3, [sp, #0]
    2ae4:	696e      	ldr	r6, [r5, #20]
    2ae6:	2396      	movs	r3, #150	; 0x96
    2ae8:	4a1a      	ldr	r2, [pc, #104]	; (2b54 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    2aea:	491b      	ldr	r1, [pc, #108]	; (2b58 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x188>)
    2aec:	4628      	mov	r0, r5
    2aee:	47b0      	blx	r6
    2af0:	4620      	mov	r0, r4
    2af2:	e7a2      	b.n	2a3a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    TF_LITE_ENSURE(context, affine_quantization);
    2af4:	4b1b      	ldr	r3, [pc, #108]	; (2b64 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x194>)
    2af6:	9300      	str	r3, [sp, #0]
    2af8:	696c      	ldr	r4, [r5, #20]
    2afa:	239a      	movs	r3, #154	; 0x9a
    2afc:	4a15      	ldr	r2, [pc, #84]	; (2b54 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    2afe:	491a      	ldr	r1, [pc, #104]	; (2b68 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    2b00:	4628      	mov	r0, r5
    2b02:	47a0      	blx	r4
    2b04:	2001      	movs	r0, #1
    2b06:	e798      	b.n	2a3a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    TF_LITE_ENSURE(context, affine_quantization->scale);
    2b08:	4b18      	ldr	r3, [pc, #96]	; (2b6c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
    2b0a:	9300      	str	r3, [sp, #0]
    2b0c:	696c      	ldr	r4, [r5, #20]
    2b0e:	239b      	movs	r3, #155	; 0x9b
    2b10:	4a10      	ldr	r2, [pc, #64]	; (2b54 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    2b12:	4915      	ldr	r1, [pc, #84]	; (2b68 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    2b14:	4628      	mov	r0, r5
    2b16:	47a0      	blx	r4
    2b18:	2001      	movs	r0, #1
    2b1a:	e78e      	b.n	2a3a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
    2b1c:	4b14      	ldr	r3, [pc, #80]	; (2b70 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
    2b1e:	9300      	str	r3, [sp, #0]
    2b20:	696c      	ldr	r4, [r5, #20]
    2b22:	239c      	movs	r3, #156	; 0x9c
    2b24:	4a0b      	ldr	r2, [pc, #44]	; (2b54 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    2b26:	4910      	ldr	r1, [pc, #64]	; (2b68 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    2b28:	4628      	mov	r0, r5
    2b2a:	47a0      	blx	r4
    2b2c:	2001      	movs	r0, #1
    2b2e:	e784      	b.n	2a3a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    TF_LITE_ENSURE(context,
    2b30:	4b10      	ldr	r3, [pc, #64]	; (2b74 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    2b32:	9300      	str	r3, [sp, #0]
    2b34:	696c      	ldr	r4, [r5, #20]
    2b36:	23a1      	movs	r3, #161	; 0xa1
    2b38:	4a06      	ldr	r2, [pc, #24]	; (2b54 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    2b3a:	490b      	ldr	r1, [pc, #44]	; (2b68 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    2b3c:	4628      	mov	r0, r5
    2b3e:	47a0      	blx	r4
    2b40:	2001      	movs	r0, #1
    2b42:	e77a      	b.n	2a3a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    2b44:	000138bd 	.word	0x000138bd
    2b48:	00002825 	.word	0x00002825
    2b4c:	00020d64 	.word	0x00020d64
    2b50:	00020aa4 	.word	0x00020aa4
    2b54:	00020c64 	.word	0x00020c64
    2b58:	0002099c 	.word	0x0002099c
    2b5c:	000209b8 	.word	0x000209b8
    2b60:	000209f0 	.word	0x000209f0
    2b64:	00020a0c 	.word	0x00020a0c
    2b68:	0001fff8 	.word	0x0001fff8
    2b6c:	00020a20 	.word	0x00020a20
    2b70:	00020cc8 	.word	0x00020cc8
    2b74:	00020ce8 	.word	0x00020ce8

00002b78 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>:

void EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                   TfLiteConvParams* params, const OpData& data,
                   const TfLiteTensor* input, const TfLiteTensor* filter,
                   const TfLiteTensor* bias, TfLiteTensor* im2col,
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
    2b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b7c:	b0d7      	sub	sp, #348	; 0x15c
    2b7e:	9d60      	ldr	r5, [sp, #384]	; 0x180
    2b80:	f8dd 9184 	ldr.w	r9, [sp, #388]	; 0x184
    2b84:	f8dd a188 	ldr.w	sl, [sp, #392]	; 0x188
    2b88:	9c65      	ldr	r4, [sp, #404]	; 0x194
  const int32_t input_offset = -input->params.zero_point;
    2b8a:	6929      	ldr	r1, [r5, #16]
    2b8c:	9108      	str	r1, [sp, #32]
  const int32_t filter_offset = -filter->params.zero_point;
    2b8e:	f8d9 1010 	ldr.w	r1, [r9, #16]
    2b92:	9109      	str	r1, [sp, #36]	; 0x24
  const int32_t output_offset = output->params.zero_point;
    2b94:	6921      	ldr	r1, [r4, #16]
    2b96:	9125      	str	r1, [sp, #148]	; 0x94

  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
  op_params.padding_values.width = data.padding.width;
    2b98:	6819      	ldr	r1, [r3, #0]
    2b9a:	9100      	str	r1, [sp, #0]
  op_params.padding_values.height = data.padding.height;
    2b9c:	6859      	ldr	r1, [r3, #4]
    2b9e:	9101      	str	r1, [sp, #4]
  op_params.stride_width = params->stride_width;
    2ba0:	f8d2 b004 	ldr.w	fp, [r2, #4]
  op_params.stride_height = params->stride_height;
    2ba4:	6891      	ldr	r1, [r2, #8]
    2ba6:	9102      	str	r1, [sp, #8]
  op_params.dilation_width_factor = params->dilation_width_factor;
    2ba8:	6911      	ldr	r1, [r2, #16]
    2baa:	9103      	str	r1, [sp, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
    2bac:	6952      	ldr	r2, [r2, #20]
    2bae:	9204      	str	r2, [sp, #16]
  op_params.input_offset = input_offset;
  op_params.weights_offset = filter_offset;
  op_params.output_offset = output_offset;
  op_params.output_multiplier = data.output_multiplier;
    2bb0:	691a      	ldr	r2, [r3, #16]
    2bb2:	9213      	str	r2, [sp, #76]	; 0x4c
  op_params.output_shift = -data.output_shift;
    2bb4:	695f      	ldr	r7, [r3, #20]
  op_params.quantized_activation_min = data.output_activation_min;
    2bb6:	6a1a      	ldr	r2, [r3, #32]
    2bb8:	9217      	str	r2, [sp, #92]	; 0x5c
  op_params.quantized_activation_max = data.output_activation_max;
    2bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2bbc:	9318      	str	r3, [sp, #96]	; 0x60
  if (tensor == nullptr) {
    2bbe:	2d00      	cmp	r5, #0
    2bc0:	f000 815f 	beq.w	2e82 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x30a>
  const int dims_size = dims->size;
    2bc4:	f8d5 8008 	ldr.w	r8, [r5, #8]
    2bc8:	f858 6b04 	ldr.w	r6, [r8], #4
    size_ = dimensions_count;
    2bcc:	9638      	str	r6, [sp, #224]	; 0xe0
    if (dimensions_count > kMaxSmallSize) {
    2bce:	2e05      	cmp	r6, #5
    2bd0:	f340 815b 	ble.w	2e8a <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x312>
      dims_pointer_ = new int32[dimensions_count];
    2bd4:	4bb0      	ldr	r3, [pc, #704]	; (2e98 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x320>)
    2bd6:	429e      	cmp	r6, r3
    2bd8:	bf94      	ite	ls
    2bda:	00b0      	lslls	r0, r6, #2
    2bdc:	f04f 30ff 	movhi.w	r0, #4294967295
    2be0:	4bae      	ldr	r3, [pc, #696]	; (2e9c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x324>)
    2be2:	4798      	blx	r3
    2be4:	9039      	str	r0, [sp, #228]	; 0xe4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2be6:	00b2      	lsls	r2, r6, #2
    2be8:	4641      	mov	r1, r8
    2bea:	4bad      	ldr	r3, [pc, #692]	; (2ea0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x328>)
    2bec:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    2bee:	686b      	ldr	r3, [r5, #4]
    2bf0:	930c      	str	r3, [sp, #48]	; 0x30
  if (tensor == nullptr) {
    2bf2:	f1b9 0f00 	cmp.w	r9, #0
    2bf6:	f000 814a 	beq.w	2e8e <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x316>
  const int dims_size = dims->size;
    2bfa:	f8d9 6008 	ldr.w	r6, [r9, #8]
    2bfe:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    2c02:	953e      	str	r5, [sp, #248]	; 0xf8
    if (dimensions_count > kMaxSmallSize) {
    2c04:	2d05      	cmp	r5, #5
    2c06:	f340 814d 	ble.w	2ea4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x32c>
      dims_pointer_ = new int32[dimensions_count];
    2c0a:	4ba3      	ldr	r3, [pc, #652]	; (2e98 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x320>)
    2c0c:	429d      	cmp	r5, r3
    2c0e:	bf94      	ite	ls
    2c10:	00a8      	lslls	r0, r5, #2
    2c12:	f04f 30ff 	movhi.w	r0, #4294967295
    2c16:	4ba1      	ldr	r3, [pc, #644]	; (2e9c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x324>)
    2c18:	4798      	blx	r3
    2c1a:	903f      	str	r0, [sp, #252]	; 0xfc
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2c1c:	00aa      	lsls	r2, r5, #2
    2c1e:	4631      	mov	r1, r6
    2c20:	4b9f      	ldr	r3, [pc, #636]	; (2ea0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x328>)
    2c22:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    2c24:	f8d9 3004 	ldr.w	r3, [r9, #4]
    2c28:	9326      	str	r3, [sp, #152]	; 0x98
  if (tensor == nullptr) {
    2c2a:	f1ba 0f00 	cmp.w	sl, #0
    2c2e:	f000 813b 	beq.w	2ea8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x330>
  const int dims_size = dims->size;
    2c32:	f8da 6008 	ldr.w	r6, [sl, #8]
    2c36:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    2c3a:	9544      	str	r5, [sp, #272]	; 0x110
    if (dimensions_count > kMaxSmallSize) {
    2c3c:	2d05      	cmp	r5, #5
    2c3e:	f340 8137 	ble.w	2eb0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x338>
      dims_pointer_ = new int32[dimensions_count];
    2c42:	4b95      	ldr	r3, [pc, #596]	; (2e98 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x320>)
    2c44:	429d      	cmp	r5, r3
    2c46:	bf94      	ite	ls
    2c48:	00a8      	lslls	r0, r5, #2
    2c4a:	f04f 30ff 	movhi.w	r0, #4294967295
    2c4e:	4b93      	ldr	r3, [pc, #588]	; (2e9c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x324>)
    2c50:	4798      	blx	r3
    2c52:	9045      	str	r0, [sp, #276]	; 0x114
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2c54:	00aa      	lsls	r2, r5, #2
    2c56:	4631      	mov	r1, r6
    2c58:	4b91      	ldr	r3, [pc, #580]	; (2ea0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x328>)
    2c5a:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    2c5c:	f8da 3004 	ldr.w	r3, [sl, #4]
    2c60:	931a      	str	r3, [sp, #104]	; 0x68
  if (tensor == nullptr) {
    2c62:	2c00      	cmp	r4, #0
    2c64:	f000 8126 	beq.w	2eb4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x33c>
  const int dims_size = dims->size;
    2c68:	68a6      	ldr	r6, [r4, #8]
    2c6a:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    2c6e:	954a      	str	r5, [sp, #296]	; 0x128
    if (dimensions_count > kMaxSmallSize) {
    2c70:	2d05      	cmp	r5, #5
    2c72:	f340 8123 	ble.w	2ebc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x344>
      dims_pointer_ = new int32[dimensions_count];
    2c76:	4b88      	ldr	r3, [pc, #544]	; (2e98 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x320>)
    2c78:	429d      	cmp	r5, r3
    2c7a:	bf94      	ite	ls
    2c7c:	00a8      	lslls	r0, r5, #2
    2c7e:	f04f 30ff 	movhi.w	r0, #4294967295
    2c82:	4b86      	ldr	r3, [pc, #536]	; (2e9c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x324>)
    2c84:	4798      	blx	r3
    2c86:	904b      	str	r0, [sp, #300]	; 0x12c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2c88:	00aa      	lsls	r2, r5, #2
    2c8a:	4631      	mov	r1, r6
    2c8c:	4b84      	ldr	r3, [pc, #528]	; (2ea0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x328>)
    2c8e:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    2c90:	6863      	ldr	r3, [r4, #4]
    2c92:	9306      	str	r3, [sp, #24]
  if (tensor == nullptr) {
    2c94:	9b63      	ldr	r3, [sp, #396]	; 0x18c
    2c96:	2b00      	cmp	r3, #0
    2c98:	f000 8112 	beq.w	2ec0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x348>
  TfLiteIntArray* dims = tensor->dims;
    2c9c:	9b63      	ldr	r3, [sp, #396]	; 0x18c
    2c9e:	689d      	ldr	r5, [r3, #8]
  const int dims_size = dims->size;
    2ca0:	682c      	ldr	r4, [r5, #0]
    size_ = dimensions_count;
    2ca2:	9450      	str	r4, [sp, #320]	; 0x140
    if (dimensions_count > kMaxSmallSize) {
    2ca4:	2c05      	cmp	r4, #5
    2ca6:	f340 810d 	ble.w	2ec4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x34c>
      dims_pointer_ = new int32[dimensions_count];
    2caa:	4b7b      	ldr	r3, [pc, #492]	; (2e98 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x320>)
    2cac:	429c      	cmp	r4, r3
    2cae:	bf94      	ite	ls
    2cb0:	00a0      	lslls	r0, r4, #2
    2cb2:	f04f 30ff 	movhi.w	r0, #4294967295
    2cb6:	4b79      	ldr	r3, [pc, #484]	; (2e9c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x324>)
    2cb8:	4798      	blx	r3
    2cba:	9051      	str	r0, [sp, #324]	; 0x144
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    2cbc:	00a2      	lsls	r2, r4, #2
    2cbe:	1d29      	adds	r1, r5, #4
    2cc0:	4b77      	ldr	r3, [pc, #476]	; (2ea0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x328>)
    2cc2:	4798      	blx	r3
  op_params.stride_width = params->stride_width;
    2cc4:	fa0f f38b 	sxth.w	r3, fp
    2cc8:	930d      	str	r3, [sp, #52]	; 0x34
  op_params.stride_height = params->stride_height;
    2cca:	f9bd 5008 	ldrsh.w	r5, [sp, #8]
  op_params.dilation_width_factor = params->dilation_width_factor;
    2cce:	f9bd e00c 	ldrsh.w	lr, [sp, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
    2cd2:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
  op_params.padding_values.width = data.padding.width;
    2cd6:	f9bd 4000 	ldrsh.w	r4, [sp]
  op_params.padding_values.height = data.padding.height;
    2cda:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    2cde:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    2ce0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    2ce2:	4293      	cmp	r3, r2
    2ce4:	f300 80f0 	bgt.w	2ec8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x350>

  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    2ce8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    2cea:	2b04      	cmp	r3, #4
    2cec:	f040 80ee 	bne.w	2ecc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x354>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    2cf0:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    2cf2:	2b04      	cmp	r3, #4
    2cf4:	f040 80ec 	bne.w	2ed0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x358>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    2cf8:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    2cfa:	2b04      	cmp	r3, #4
    2cfc:	f040 80ea 	bne.w	2ed4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x35c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2d00:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    2d02:	930a      	str	r3, [sp, #40]	; 0x28
    2d04:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
    2d06:	921e      	str	r2, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    2d08:	429a      	cmp	r2, r3
    2d0a:	f040 80e5 	bne.w	2ed8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x360>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2d0e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    2d10:	9307      	str	r3, [sp, #28]
    2d12:	f8dd 9108 	ldr.w	r9, [sp, #264]	; 0x108
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    2d16:	4599      	cmp	r9, r3
    2d18:	f040 80e0 	bne.w	2edc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x364>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2d1c:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    2d1e:	930b      	str	r3, [sp, #44]	; 0x2c
    2d20:	9a4e      	ldr	r2, [sp, #312]	; 0x138
    2d22:	9212      	str	r2, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    2d24:	429a      	cmp	r2, r3
    2d26:	f040 80db 	bne.w	2ee0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x368>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (bias_data) {
    2d2a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    2d2c:	b1ab      	cbz	r3, 2d5a <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x1e2>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2d2e:	9a44      	ldr	r2, [sp, #272]	; 0x110
    2d30:	2a05      	cmp	r2, #5
    2d32:	bfcc      	ite	gt
    2d34:	9945      	ldrgt	r1, [sp, #276]	; 0x114
    2d36:	a945      	addle	r1, sp, #276	; 0x114
    for (int i = 0; i < size_; i++) {
    2d38:	2a00      	cmp	r2, #0
    2d3a:	f340 80d3 	ble.w	2ee4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x36c>
    2d3e:	460b      	mov	r3, r1
    2d40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    2d44:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
    2d46:	f853 0b04 	ldr.w	r0, [r3], #4
    2d4a:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
    2d4e:	4299      	cmp	r1, r3
    2d50:	d1f9      	bne.n	2d46 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x1ce>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    2d52:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2d54:	429a      	cmp	r2, r3
    2d56:	f040 80c7 	bne.w	2ee8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x370>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    2d5a:	f8dd b0e8 	ldr.w	fp, [sp, #232]	; 0xe8
    2d5e:	f8dd c0ec 	ldr.w	ip, [sp, #236]	; 0xec
    2d62:	9b40      	ldr	r3, [sp, #256]	; 0x100
    2d64:	9305      	str	r3, [sp, #20]
    2d66:	f8dd a104 	ldr.w	sl, [sp, #260]	; 0x104
    2d6a:	994c      	ldr	r1, [sp, #304]	; 0x130
    2d6c:	9114      	str	r1, [sp, #80]	; 0x50
    2d6e:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    2d70:	461a      	mov	r2, r3
    2d72:	9322      	str	r3, [sp, #136]	; 0x88
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
    2d74:	981e      	ldr	r0, [sp, #120]	; 0x78
    2d76:	2800      	cmp	r0, #0
    2d78:	f340 81f8 	ble.w	316c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x5f4>
  op_params.output_shift = -data.output_shift;
    2d7c:	4279      	negs	r1, r7
    2d7e:	2900      	cmp	r1, #0
    2d80:	bfd4      	ite	le
    2d82:	4638      	movle	r0, r7
    2d84:	2000      	movgt	r0, #0
    2d86:	9024      	str	r0, [sp, #144]	; 0x90
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
  assert(exponent <= 31);
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    2d88:	2301      	movs	r3, #1
    2d8a:	4083      	lsls	r3, r0
    2d8c:	1e58      	subs	r0, r3, #1
    2d8e:	9032      	str	r0, [sp, #200]	; 0xc8
  return a >> offset;
    2d90:	1040      	asrs	r0, r0, #1
    2d92:	9033      	str	r0, [sp, #204]	; 0xcc
    2d94:	9812      	ldr	r0, [sp, #72]	; 0x48
    2d96:	902f      	str	r0, [sp, #188]	; 0xbc
    2d98:	4617      	mov	r7, r2
    2d9a:	4613      	mov	r3, r2
    2d9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    2d9e:	fb03 f302 	mul.w	r3, r3, r2
    2da2:	fb00 f003 	mul.w	r0, r0, r3
    2da6:	9030      	str	r0, [sp, #192]	; 0xc0
    2da8:	9806      	ldr	r0, [sp, #24]
    2daa:	9020      	str	r0, [sp, #128]	; 0x80
    2dac:	fb0c f30b 	mul.w	r3, ip, fp
    2db0:	9807      	ldr	r0, [sp, #28]
    2db2:	fb00 f203 	mul.w	r2, r0, r3
    2db6:	922e      	str	r2, [sp, #184]	; 0xb8
    2db8:	f1c8 0800 	rsb	r8, r8, #0
    2dbc:	f8cd 80c4 	str.w	r8, [sp, #196]	; 0xc4
    2dc0:	4263      	negs	r3, r4
    2dc2:	932c      	str	r3, [sp, #176]	; 0xb0
    2dc4:	fb08 f30c 	mul.w	r3, r8, ip
    2dc8:	1b1b      	subs	r3, r3, r4
    2dca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    2dcc:	fb00 4403 	mla	r4, r0, r3, r4
    2dd0:	941d      	str	r4, [sp, #116]	; 0x74
    2dd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2dd4:	461a      	mov	r2, r3
    2dd6:	fb02 f407 	mul.w	r4, r2, r7
    2dda:	942b      	str	r4, [sp, #172]	; 0xac
    2ddc:	952a      	str	r5, [sp, #168]	; 0xa8
    2dde:	4602      	mov	r2, r0
    2de0:	fb00 f30c 	mul.w	r3, r0, ip
    2de4:	fb03 f005 	mul.w	r0, r3, r5
    2de8:	9036      	str	r0, [sp, #216]	; 0xd8
    2dea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    2dec:	9428      	str	r4, [sp, #160]	; 0xa0
    2dee:	4610      	mov	r0, r2
    2df0:	fb02 f404 	mul.w	r4, r2, r4
    2df4:	9429      	str	r4, [sp, #164]	; 0xa4
    2df6:	f8cd 9010 	str.w	r9, [sp, #16]
    2dfa:	9a05      	ldr	r2, [sp, #20]
    2dfc:	fb0a f202 	mul.w	r2, sl, r2
    2e00:	fb09 f202 	mul.w	r2, r9, r2
    2e04:	922d      	str	r2, [sp, #180]	; 0xb4
    2e06:	fb09 f20a 	mul.w	r2, r9, sl
    2e0a:	9211      	str	r2, [sp, #68]	; 0x44
    2e0c:	9610      	str	r6, [sp, #64]	; 0x40
    2e0e:	fb03 f306 	mul.w	r3, r3, r6
    2e12:	930f      	str	r3, [sp, #60]	; 0x3c
    2e14:	f8cd e008 	str.w	lr, [sp, #8]
    2e18:	fb00 f30e 	mul.w	r3, r0, lr
    2e1c:	9303      	str	r3, [sp, #12]
    2e1e:	2300      	movs	r3, #0
    2e20:	9306      	str	r3, [sp, #24]
  std::int64_t b_64(b);
    2e22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2e24:	461c      	mov	r4, r3
    2e26:	17dd      	asrs	r5, r3, #31
    2e28:	e9cd 4534 	strd	r4, r5, [sp, #208]	; 0xd0

inline int32 MultiplyByQuantizedMultiplier(int32 x, int32 quantized_multiplier,
                                           int shift) {
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
    2e2c:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
    2e30:	9337      	str	r3, [sp, #220]	; 0xdc
    for (int out_y = 0; out_y < output_height; ++out_y) {
    2e32:	9b14      	ldr	r3, [sp, #80]	; 0x50
    2e34:	2b00      	cmp	r3, #0
    2e36:	f340 818a 	ble.w	314e <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x5d6>
    2e3a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    2e3c:	9323      	str	r3, [sp, #140]	; 0x8c
    2e3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2e40:	9319      	str	r3, [sp, #100]	; 0x64
    2e42:	9b20      	ldr	r3, [sp, #128]	; 0x80
    2e44:	931f      	str	r3, [sp, #124]	; 0x7c
    2e46:	2300      	movs	r3, #0
    2e48:	931c      	str	r3, [sp, #112]	; 0x70
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    2e4a:	465b      	mov	r3, fp
    2e4c:	46d3      	mov	fp, sl
    2e4e:	46e2      	mov	sl, ip
    2e50:	469c      	mov	ip, r3
      for (int out_x = 0; out_x < output_width; ++out_x) {
    2e52:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2e54:	2b00      	cmp	r3, #0
    2e56:	f340 8163 	ble.w	3120 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x5a8>
    2e5a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    2e5c:	930e      	str	r3, [sp, #56]	; 0x38
    2e5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    2e60:	9316      	str	r3, [sp, #88]	; 0x58
    2e62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    2e64:	9315      	str	r3, [sp, #84]	; 0x54
    2e66:	2300      	movs	r3, #0
    2e68:	931b      	str	r3, [sp, #108]	; 0x6c
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    2e6a:	46e0      	mov	r8, ip
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    2e6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2e6e:	2b00      	cmp	r3, #0
    2e70:	f340 8142 	ble.w	30f8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x580>
    2e74:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2e76:	9321      	str	r3, [sp, #132]	; 0x84
    2e78:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2e7a:	9327      	str	r3, [sp, #156]	; 0x9c
    2e7c:	f04f 0c00 	mov.w	ip, #0
    2e80:	e106      	b.n	3090 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x518>
  RuntimeShape() : size_(0) {}
    2e82:	2300      	movs	r3, #0
    2e84:	9338      	str	r3, [sp, #224]	; 0xe0
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    2e86:	930c      	str	r3, [sp, #48]	; 0x30
    2e88:	e6b3      	b.n	2bf2 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x7a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2e8a:	a839      	add	r0, sp, #228	; 0xe4
    2e8c:	e6ab      	b.n	2be6 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x6e>
  RuntimeShape() : size_(0) {}
    2e8e:	2300      	movs	r3, #0
    2e90:	933e      	str	r3, [sp, #248]	; 0xf8
    2e92:	9326      	str	r3, [sp, #152]	; 0x98
    2e94:	e6c9      	b.n	2c2a <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xb2>
    2e96:	bf00      	nop
    2e98:	1ffffffe 	.word	0x1ffffffe
    2e9c:	00009291 	.word	0x00009291
    2ea0:	00014641 	.word	0x00014641
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2ea4:	a83f      	add	r0, sp, #252	; 0xfc
    2ea6:	e6b9      	b.n	2c1c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xa4>
  RuntimeShape() : size_(0) {}
    2ea8:	2300      	movs	r3, #0
    2eaa:	9344      	str	r3, [sp, #272]	; 0x110
    2eac:	931a      	str	r3, [sp, #104]	; 0x68
    2eae:	e6d8      	b.n	2c62 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xea>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2eb0:	a845      	add	r0, sp, #276	; 0x114
    2eb2:	e6cf      	b.n	2c54 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xdc>
  RuntimeShape() : size_(0) {}
    2eb4:	2300      	movs	r3, #0
    2eb6:	934a      	str	r3, [sp, #296]	; 0x128
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    2eb8:	9306      	str	r3, [sp, #24]
    2eba:	e6eb      	b.n	2c94 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x11c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2ebc:	a84b      	add	r0, sp, #300	; 0x12c
    2ebe:	e6e3      	b.n	2c88 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x110>
  RuntimeShape() : size_(0) {}
    2ec0:	9350      	str	r3, [sp, #320]	; 0x140
    2ec2:	e6ff      	b.n	2cc4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x14c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    2ec4:	a851      	add	r0, sp, #324	; 0x144
    2ec6:	e6f9      	b.n	2cbc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x144>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    2ec8:	4b85      	ldr	r3, [pc, #532]	; (30e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2eca:	4798      	blx	r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    2ecc:	4b84      	ldr	r3, [pc, #528]	; (30e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2ece:	4798      	blx	r3
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    2ed0:	4b83      	ldr	r3, [pc, #524]	; (30e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2ed2:	4798      	blx	r3
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    2ed4:	4b82      	ldr	r3, [pc, #520]	; (30e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2ed6:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    2ed8:	4b81      	ldr	r3, [pc, #516]	; (30e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2eda:	4798      	blx	r3
    2edc:	4b80      	ldr	r3, [pc, #512]	; (30e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2ede:	4798      	blx	r3
    2ee0:	4b7f      	ldr	r3, [pc, #508]	; (30e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2ee2:	4798      	blx	r3
    int buffer_size = 1;
    2ee4:	2201      	movs	r2, #1
    2ee6:	e734      	b.n	2d52 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x1da>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    2ee8:	4b7d      	ldr	r3, [pc, #500]	; (30e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2eea:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    2eec:	4b7c      	ldr	r3, [pc, #496]	; (30e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2eee:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    2ef0:	4b7b      	ldr	r3, [pc, #492]	; (30e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2ef2:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    2ef4:	4b7a      	ldr	r3, [pc, #488]	; (30e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2ef6:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    2ef8:	4b79      	ldr	r3, [pc, #484]	; (30e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2efa:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    2efc:	4b78      	ldr	r3, [pc, #480]	; (30e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2efe:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    2f00:	4b77      	ldr	r3, [pc, #476]	; (30e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    2f02:	4798      	blx	r3
          const int in_x_origin = (out_x * stride_width) - pad_width;
          const int in_y_origin = (out_y * stride_height) - pad_height;
          int32 acc = 0;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    2f04:	3301      	adds	r3, #1
    2f06:	454b      	cmp	r3, r9
    2f08:	d030      	beq.n	2f6c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x3f4>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    2f0a:	2a00      	cmp	r2, #0
    2f0c:	dbfa      	blt.n	2f04 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x38c>
    2f0e:	4552      	cmp	r2, sl
    2f10:	daf8      	bge.n	2f04 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x38c>
    2f12:	2900      	cmp	r1, #0
    2f14:	dbf6      	blt.n	2f04 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x38c>
    2f16:	4541      	cmp	r1, r8
    2f18:	daf4      	bge.n	2f04 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x38c>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    2f1a:	9c06      	ldr	r4, [sp, #24]
    2f1c:	2c00      	cmp	r4, #0
    2f1e:	dbe5      	blt.n	2eec <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x374>
    2f20:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    2f22:	42a5      	cmp	r5, r4
    2f24:	dde2      	ble.n	2eec <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x374>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    2f26:	2b00      	cmp	r3, #0
    2f28:	dbe2      	blt.n	2ef0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x378>
    2f2a:	9c07      	ldr	r4, [sp, #28]
    2f2c:	429c      	cmp	r4, r3
    2f2e:	dddf      	ble.n	2ef0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x378>
                    (in_y < input_height)) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
                                                      in_x, in_channel)];
    2f30:	5cf4      	ldrb	r4, [r6, r3]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    2f32:	f1bc 0f00 	cmp.w	ip, #0
    2f36:	dbdd      	blt.n	2ef4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x37c>
    2f38:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2f3a:	45bc      	cmp	ip, r7
    2f3c:	dada      	bge.n	2ef4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x37c>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    2f3e:	f1be 0f00 	cmp.w	lr, #0
    2f42:	dbd9      	blt.n	2ef8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x380>
    2f44:	9f05      	ldr	r7, [sp, #20]
    2f46:	4577      	cmp	r7, lr
    2f48:	ddd6      	ble.n	2ef8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x380>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    2f4a:	2800      	cmp	r0, #0
    2f4c:	dbd6      	blt.n	2efc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x384>
    2f4e:	4583      	cmp	fp, r0
    2f50:	ddd4      	ble.n	2efc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x384>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    2f52:	4599      	cmp	r9, r3
    2f54:	ddd4      	ble.n	2f00 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x388>
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
                                         filter_x, in_channel)];
    2f56:	9f00      	ldr	r7, [sp, #0]
    2f58:	5cfd      	ldrb	r5, [r7, r3]
                  acc +=
                      (filter_val + filter_offset) * (input_val + input_offset);
    2f5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    2f5c:	1bed      	subs	r5, r5, r7
    2f5e:	9f08      	ldr	r7, [sp, #32]
    2f60:	1be4      	subs	r4, r4, r7
    2f62:	9f01      	ldr	r7, [sp, #4]
    2f64:	fb04 7405 	mla	r4, r4, r5, r7
    2f68:	9401      	str	r4, [sp, #4]
    2f6a:	e7cb      	b.n	2f04 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x38c>
    2f6c:	9f00      	ldr	r7, [sp, #0]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    2f6e:	3001      	adds	r0, #1
    2f70:	9b02      	ldr	r3, [sp, #8]
    2f72:	441a      	add	r2, r3
    2f74:	9b04      	ldr	r3, [sp, #16]
    2f76:	441f      	add	r7, r3
    2f78:	9b03      	ldr	r3, [sp, #12]
    2f7a:	441e      	add	r6, r3
    2f7c:	4558      	cmp	r0, fp
    2f7e:	d005      	beq.n	2f8c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x414>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    2f80:	f1b9 0f00 	cmp.w	r9, #0
    2f84:	ddf3      	ble.n	2f6e <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x3f6>
    2f86:	2300      	movs	r3, #0
    2f88:	9700      	str	r7, [sp, #0]
    2f8a:	e7be      	b.n	2f0a <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x392>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    2f8c:	f10e 0e01 	add.w	lr, lr, #1
    2f90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2f92:	9a11      	ldr	r2, [sp, #68]	; 0x44
    2f94:	4413      	add	r3, r2
    2f96:	930d      	str	r3, [sp, #52]	; 0x34
    2f98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2f9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2f9c:	4413      	add	r3, r2
    2f9e:	930c      	str	r3, [sp, #48]	; 0x30
    2fa0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2fa2:	4419      	add	r1, r3
    2fa4:	9b05      	ldr	r3, [sp, #20]
    2fa6:	459e      	cmp	lr, r3
    2fa8:	d009      	beq.n	2fbe <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x446>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    2faa:	f1bb 0f00 	cmp.w	fp, #0
    2fae:	dded      	ble.n	2f8c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x414>
    2fb0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    2fb2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    2fb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2fb6:	2000      	movs	r0, #0
    2fb8:	e7e2      	b.n	2f80 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x408>
          int32 acc = 0;
    2fba:	2300      	movs	r3, #0
    2fbc:	9301      	str	r3, [sp, #4]
                }
              }
            }
          }
          if (bias_data) {
    2fbe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    2fc0:	b123      	cbz	r3, 2fcc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x454>
            acc += bias_data[out_channel];
    2fc2:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
    2fc6:	9a01      	ldr	r2, [sp, #4]
    2fc8:	441a      	add	r2, r3
    2fca:	9201      	str	r2, [sp, #4]
  int right_shift = shift > 0 ? 0 : -shift;
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    2fcc:	9a01      	ldr	r2, [sp, #4]
    2fce:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    2fd0:	409a      	lsls	r2, r3
    2fd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2fd4:	4293      	cmp	r3, r2
    2fd6:	d067      	beq.n	30a8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x530>
  std::int64_t a_64(a);
    2fd8:	17d5      	asrs	r5, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    2fda:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    2fdc:	fb02 f103 	mul.w	r1, r2, r3
    2fe0:	9813      	ldr	r0, [sp, #76]	; 0x4c
    2fe2:	fb00 1105 	mla	r1, r0, r5, r1
    2fe6:	fba2 2300 	umull	r2, r3, r2, r0
    2fea:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    2fec:	2a00      	cmp	r2, #0
    2fee:	f173 0100 	sbcs.w	r1, r3, #0
    2ff2:	f2c0 80cc 	blt.w	318e <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x616>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    2ff6:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    2ffa:	f143 0300 	adc.w	r3, r3, #0
    2ffe:	4610      	mov	r0, r2
    3000:	4619      	mov	r1, r3
    3002:	2a00      	cmp	r2, #0
    3004:	f173 0400 	sbcs.w	r4, r3, #0
    3008:	f2c0 80d6 	blt.w	31b8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x640>
    300c:	0fc3      	lsrs	r3, r0, #31
    300e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  assert(exponent >= 0);
    3012:	9a24      	ldr	r2, [sp, #144]	; 0x90
    3014:	2a00      	cmp	r2, #0
    3016:	db4d      	blt.n	30b4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x53c>
  assert(exponent <= 31);
    3018:	9a24      	ldr	r2, [sp, #144]	; 0x90
    301a:	2a1f      	cmp	r2, #31
    301c:	dc51      	bgt.n	30c2 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x54a>
  return a + b;
    301e:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    3020:	eb02 71d3 	add.w	r1, r2, r3, lsr #31
  return a & b;
    3024:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    3026:	401a      	ands	r2, r3
  return a >> offset;
    3028:	9824      	ldr	r0, [sp, #144]	; 0x90
    302a:	4103      	asrs	r3, r0
  return a + b;
    302c:	4291      	cmp	r1, r2
    302e:	bfb8      	it	lt
    3030:	3301      	addlt	r3, #1
          }
          acc = MultiplyByQuantizedMultiplier(acc, output_multiplier,
                                              output_shift);
          acc += output_offset;
    3032:	9a25      	ldr	r2, [sp, #148]	; 0x94
    3034:	4413      	add	r3, r2
    3036:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    3038:	4293      	cmp	r3, r2
    303a:	bfb8      	it	lt
    303c:	4613      	movlt	r3, r2
    303e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    3040:	4293      	cmp	r3, r2
    3042:	bfa8      	it	ge
    3044:	4613      	movge	r3, r2
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    3046:	9a06      	ldr	r2, [sp, #24]
    3048:	2a00      	cmp	r2, #0
    304a:	db41      	blt.n	30d0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x558>
    304c:	991e      	ldr	r1, [sp, #120]	; 0x78
    304e:	4291      	cmp	r1, r2
    3050:	dd3e      	ble.n	30d0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x558>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    3052:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    3054:	2a00      	cmp	r2, #0
    3056:	db3d      	blt.n	30d4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x55c>
    3058:	9914      	ldr	r1, [sp, #80]	; 0x50
    305a:	428a      	cmp	r2, r1
    305c:	da3a      	bge.n	30d4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x55c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    305e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    3060:	2a00      	cmp	r2, #0
    3062:	db39      	blt.n	30d8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x560>
    3064:	9922      	ldr	r1, [sp, #136]	; 0x88
    3066:	428a      	cmp	r2, r1
    3068:	da36      	bge.n	30d8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x560>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    306a:	f1bc 0f00 	cmp.w	ip, #0
    306e:	db35      	blt.n	30dc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x564>
    3070:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3072:	4594      	cmp	ip, r2
    3074:	da32      	bge.n	30dc <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x564>
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              static_cast<uint8>(acc);
    3076:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    3078:	f802 3b01 	strb.w	r3, [r2], #1
    307c:	9227      	str	r2, [sp, #156]	; 0x9c
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    307e:	f10c 0c01 	add.w	ip, ip, #1
    3082:	9b21      	ldr	r3, [sp, #132]	; 0x84
    3084:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    3086:	4413      	add	r3, r2
    3088:	9321      	str	r3, [sp, #132]	; 0x84
    308a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    308c:	459c      	cmp	ip, r3
    308e:	d033      	beq.n	30f8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x580>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    3090:	9b05      	ldr	r3, [sp, #20]
    3092:	2b00      	cmp	r3, #0
    3094:	dd91      	ble.n	2fba <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x442>
    3096:	9923      	ldr	r1, [sp, #140]	; 0x8c
    3098:	9b16      	ldr	r3, [sp, #88]	; 0x58
    309a:	930c      	str	r3, [sp, #48]	; 0x30
    309c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    309e:	930d      	str	r3, [sp, #52]	; 0x34
    30a0:	2300      	movs	r3, #0
    30a2:	9301      	str	r3, [sp, #4]
    30a4:	469e      	mov	lr, r3
    30a6:	e780      	b.n	2faa <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x432>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    30a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    30ac:	d194      	bne.n	2fd8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x460>
    30ae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    30b2:	e7ae      	b.n	3012 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x49a>
  assert(exponent >= 0);
    30b4:	4b0b      	ldr	r3, [pc, #44]	; (30e4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x56c>)
    30b6:	4a0c      	ldr	r2, [pc, #48]	; (30e8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x570>)
    30b8:	f44f 71b3 	mov.w	r1, #358	; 0x166
    30bc:	480b      	ldr	r0, [pc, #44]	; (30ec <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x574>)
    30be:	4c0c      	ldr	r4, [pc, #48]	; (30f0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x578>)
    30c0:	47a0      	blx	r4
  assert(exponent <= 31);
    30c2:	4b0c      	ldr	r3, [pc, #48]	; (30f4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x57c>)
    30c4:	4a08      	ldr	r2, [pc, #32]	; (30e8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x570>)
    30c6:	f240 1167 	movw	r1, #359	; 0x167
    30ca:	4808      	ldr	r0, [pc, #32]	; (30ec <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x574>)
    30cc:	4c08      	ldr	r4, [pc, #32]	; (30f0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x578>)
    30ce:	47a0      	blx	r4
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    30d0:	4b03      	ldr	r3, [pc, #12]	; (30e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    30d2:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    30d4:	4b02      	ldr	r3, [pc, #8]	; (30e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    30d6:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    30d8:	4b01      	ldr	r3, [pc, #4]	; (30e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    30da:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    30dc:	4b00      	ldr	r3, [pc, #0]	; (30e0 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x568>)
    30de:	4798      	blx	r3
    30e0:	000138bd 	.word	0x000138bd
    30e4:	00020d8c 	.word	0x00020d8c
    30e8:	00020be8 	.word	0x00020be8
    30ec:	00020d9c 	.word	0x00020d9c
    30f0:	000138cd 	.word	0x000138cd
    30f4:	00020dcc 	.word	0x00020dcc
      for (int out_x = 0; out_x < output_width; ++out_x) {
    30f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    30fa:	3301      	adds	r3, #1
    30fc:	931b      	str	r3, [sp, #108]	; 0x6c
    30fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
    3100:	992f      	ldr	r1, [sp, #188]	; 0xbc
    3102:	440a      	add	r2, r1
    3104:	9215      	str	r2, [sp, #84]	; 0x54
    3106:	9a16      	ldr	r2, [sp, #88]	; 0x58
    3108:	9929      	ldr	r1, [sp, #164]	; 0xa4
    310a:	440a      	add	r2, r1
    310c:	9216      	str	r2, [sp, #88]	; 0x58
    310e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3110:	9928      	ldr	r1, [sp, #160]	; 0xa0
    3112:	440a      	add	r2, r1
    3114:	920e      	str	r2, [sp, #56]	; 0x38
    3116:	9a22      	ldr	r2, [sp, #136]	; 0x88
    3118:	4293      	cmp	r3, r2
    311a:	f47f aea7 	bne.w	2e6c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2f4>
    311e:	46c4      	mov	ip, r8
    for (int out_y = 0; out_y < output_height; ++out_y) {
    3120:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    3122:	3301      	adds	r3, #1
    3124:	931c      	str	r3, [sp, #112]	; 0x70
    3126:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    3128:	992b      	ldr	r1, [sp, #172]	; 0xac
    312a:	440a      	add	r2, r1
    312c:	921f      	str	r2, [sp, #124]	; 0x7c
    312e:	9a19      	ldr	r2, [sp, #100]	; 0x64
    3130:	9936      	ldr	r1, [sp, #216]	; 0xd8
    3132:	440a      	add	r2, r1
    3134:	9219      	str	r2, [sp, #100]	; 0x64
    3136:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    3138:	992a      	ldr	r1, [sp, #168]	; 0xa8
    313a:	440a      	add	r2, r1
    313c:	9223      	str	r2, [sp, #140]	; 0x8c
    313e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    3140:	4293      	cmp	r3, r2
    3142:	f47f ae86 	bne.w	2e52 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2da>
    3146:	4663      	mov	r3, ip
    3148:	46d4      	mov	ip, sl
    314a:	46da      	mov	sl, fp
    314c:	469b      	mov	fp, r3
  for (int batch = 0; batch < batches; ++batch) {
    314e:	9b06      	ldr	r3, [sp, #24]
    3150:	3301      	adds	r3, #1
    3152:	9306      	str	r3, [sp, #24]
    3154:	9a20      	ldr	r2, [sp, #128]	; 0x80
    3156:	9930      	ldr	r1, [sp, #192]	; 0xc0
    3158:	440a      	add	r2, r1
    315a:	9220      	str	r2, [sp, #128]	; 0x80
    315c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    315e:	992e      	ldr	r1, [sp, #184]	; 0xb8
    3160:	440a      	add	r2, r1
    3162:	921d      	str	r2, [sp, #116]	; 0x74
    3164:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    3166:	4293      	cmp	r3, r2
    3168:	f47f ae63 	bne.w	2e32 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2ba>
    if (size_ > kMaxSmallSize) {
    316c:	9b50      	ldr	r3, [sp, #320]	; 0x140
    316e:	2b05      	cmp	r3, #5
    3170:	dd03      	ble.n	317a <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x602>
      delete[] dims_pointer_;
    3172:	9851      	ldr	r0, [sp, #324]	; 0x144
    3174:	b108      	cbz	r0, 317a <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x602>
    3176:	4b13      	ldr	r3, [pc, #76]	; (31c4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x64c>)
    3178:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    317a:	9b44      	ldr	r3, [sp, #272]	; 0x110
    317c:	2b05      	cmp	r3, #5
    317e:	dd03      	ble.n	3188 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x610>
      delete[] dims_pointer_;
    3180:	9845      	ldr	r0, [sp, #276]	; 0x114
    3182:	b108      	cbz	r0, 3188 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x610>
    3184:	4b0f      	ldr	r3, [pc, #60]	; (31c4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x64c>)
    3186:	4798      	blx	r3
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
                      GetTensorData<uint8_t>(im2col), nullptr);
}
    3188:	b057      	add	sp, #348	; 0x15c
    318a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    318e:	480e      	ldr	r0, [pc, #56]	; (31c8 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x650>)
    3190:	f04f 31ff 	mov.w	r1, #4294967295
    3194:	1880      	adds	r0, r0, r2
    3196:	4159      	adcs	r1, r3
    3198:	4602      	mov	r2, r0
    319a:	460b      	mov	r3, r1
    319c:	2800      	cmp	r0, #0
    319e:	f171 0400 	sbcs.w	r4, r1, #0
    31a2:	db03      	blt.n	31ac <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x634>
    31a4:	0fc3      	lsrs	r3, r0, #31
    31a6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    31aa:	e732      	b.n	3012 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x49a>
    31ac:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    31b0:	2100      	movs	r1, #0
    31b2:	1880      	adds	r0, r0, r2
    31b4:	4159      	adcs	r1, r3
    31b6:	e7f5      	b.n	31a4 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x62c>
    31b8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    31bc:	2100      	movs	r1, #0
    31be:	1880      	adds	r0, r0, r2
    31c0:	4159      	adcs	r1, r3
    31c2:	e723      	b.n	300c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x494>
    31c4:	000091e1 	.word	0x000091e1
    31c8:	c0000001 	.word	0xc0000001

000031cc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_>:
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
                             TfLiteConvParams* params, const OpData& data,
                             const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             TfLiteTensor* im2col) {
    31cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31d0:	b0cd      	sub	sp, #308	; 0x134
    31d2:	9d56      	ldr	r5, [sp, #344]	; 0x158
    31d4:	9c57      	ldr	r4, [sp, #348]	; 0x15c
  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.input_offset = -input->params.zero_point;
    31d6:	6929      	ldr	r1, [r5, #16]
    31d8:	9103      	str	r1, [sp, #12]
  op_params.output_offset = output->params.zero_point;
    31da:	9959      	ldr	r1, [sp, #356]	; 0x164
    31dc:	6909      	ldr	r1, [r1, #16]
    31de:	9116      	str	r1, [sp, #88]	; 0x58
  op_params.stride_height = params->stride_height;
    31e0:	f8d2 9008 	ldr.w	r9, [r2, #8]
  op_params.stride_width = params->stride_width;
    31e4:	f8d2 8004 	ldr.w	r8, [r2, #4]
  op_params.dilation_height_factor = params->dilation_height_factor;
    31e8:	f8d2 b014 	ldr.w	fp, [r2, #20]
  op_params.dilation_width_factor = params->dilation_width_factor;
    31ec:	f8d2 a010 	ldr.w	sl, [r2, #16]
  op_params.padding_values.height = data.padding.height;
    31f0:	685a      	ldr	r2, [r3, #4]
    31f2:	9200      	str	r2, [sp, #0]
  op_params.padding_values.width = data.padding.width;
    31f4:	681a      	ldr	r2, [r3, #0]
    31f6:	9201      	str	r2, [sp, #4]
  op_params.quantized_activation_min = data.output_activation_min;
    31f8:	6a1a      	ldr	r2, [r3, #32]
    31fa:	9212      	str	r2, [sp, #72]	; 0x48
  op_params.quantized_activation_max = data.output_activation_max;
    31fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    31fe:	9213      	str	r2, [sp, #76]	; 0x4c

  reference_integer_ops::ConvPerChannel(
      op_params, data.per_channel_output_multiplier,
    3200:	699a      	ldr	r2, [r3, #24]
    3202:	9214      	str	r2, [sp, #80]	; 0x50
      data.per_channel_output_shift, GetTensorShape(input),
    3204:	69db      	ldr	r3, [r3, #28]
    3206:	9315      	str	r3, [sp, #84]	; 0x54
  if (tensor == nullptr) {
    3208:	2d00      	cmp	r5, #0
    320a:	f000 8139 	beq.w	3480 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2b4>
  const int dims_size = dims->size;
    320e:	68af      	ldr	r7, [r5, #8]
    3210:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    3214:	9634      	str	r6, [sp, #208]	; 0xd0
    if (dimensions_count > kMaxSmallSize) {
    3216:	2e05      	cmp	r6, #5
    3218:	f340 8135 	ble.w	3486 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2ba>
      dims_pointer_ = new int32[dimensions_count];
    321c:	4ba8      	ldr	r3, [pc, #672]	; (34c0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2f4>)
    321e:	429e      	cmp	r6, r3
    3220:	bf94      	ite	ls
    3222:	00b0      	lslls	r0, r6, #2
    3224:	f04f 30ff 	movhi.w	r0, #4294967295
    3228:	4ba6      	ldr	r3, [pc, #664]	; (34c4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2f8>)
    322a:	4798      	blx	r3
    322c:	9035      	str	r0, [sp, #212]	; 0xd4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    322e:	00b2      	lsls	r2, r6, #2
    3230:	4639      	mov	r1, r7
    3232:	4ba5      	ldr	r3, [pc, #660]	; (34c8 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2fc>)
    3234:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    3236:	686f      	ldr	r7, [r5, #4]
  if (tensor == nullptr) {
    3238:	2c00      	cmp	r4, #0
    323a:	f000 8126 	beq.w	348a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2be>
  const int dims_size = dims->size;
    323e:	68a6      	ldr	r6, [r4, #8]
    3240:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    3244:	953a      	str	r5, [sp, #232]	; 0xe8
    if (dimensions_count > kMaxSmallSize) {
    3246:	2d05      	cmp	r5, #5
    3248:	f340 8123 	ble.w	3492 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2c6>
      dims_pointer_ = new int32[dimensions_count];
    324c:	4b9c      	ldr	r3, [pc, #624]	; (34c0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2f4>)
    324e:	429d      	cmp	r5, r3
    3250:	bf94      	ite	ls
    3252:	00a8      	lslls	r0, r5, #2
    3254:	f04f 30ff 	movhi.w	r0, #4294967295
    3258:	4b9a      	ldr	r3, [pc, #616]	; (34c4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2f8>)
    325a:	4798      	blx	r3
    325c:	903b      	str	r0, [sp, #236]	; 0xec
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    325e:	00aa      	lsls	r2, r5, #2
    3260:	4631      	mov	r1, r6
    3262:	4b99      	ldr	r3, [pc, #612]	; (34c8 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2fc>)
    3264:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    3266:	6863      	ldr	r3, [r4, #4]
    3268:	931a      	str	r3, [sp, #104]	; 0x68
  if (tensor == nullptr) {
    326a:	9b58      	ldr	r3, [sp, #352]	; 0x160
    326c:	2b00      	cmp	r3, #0
    326e:	f000 8112 	beq.w	3496 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2ca>
  const int dims_size = dims->size;
    3272:	9b58      	ldr	r3, [sp, #352]	; 0x160
    3274:	689e      	ldr	r6, [r3, #8]
    3276:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    327a:	9540      	str	r5, [sp, #256]	; 0x100
    if (dimensions_count > kMaxSmallSize) {
    327c:	2d05      	cmp	r5, #5
    327e:	f340 810d 	ble.w	349c <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2d0>
      dims_pointer_ = new int32[dimensions_count];
    3282:	4b8f      	ldr	r3, [pc, #572]	; (34c0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2f4>)
    3284:	429d      	cmp	r5, r3
    3286:	bf94      	ite	ls
    3288:	00a8      	lslls	r0, r5, #2
    328a:	f04f 30ff 	movhi.w	r0, #4294967295
    328e:	4b8d      	ldr	r3, [pc, #564]	; (34c4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2f8>)
    3290:	4798      	blx	r3
    3292:	9041      	str	r0, [sp, #260]	; 0x104
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    3294:	00aa      	lsls	r2, r5, #2
    3296:	4631      	mov	r1, r6
    3298:	4b8b      	ldr	r3, [pc, #556]	; (34c8 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2fc>)
    329a:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    329c:	9b58      	ldr	r3, [sp, #352]	; 0x160
    329e:	685b      	ldr	r3, [r3, #4]
    32a0:	9319      	str	r3, [sp, #100]	; 0x64
  if (tensor == nullptr) {
    32a2:	9b59      	ldr	r3, [sp, #356]	; 0x164
    32a4:	2b00      	cmp	r3, #0
    32a6:	f000 80fb 	beq.w	34a0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2d4>
  const int dims_size = dims->size;
    32aa:	9b59      	ldr	r3, [sp, #356]	; 0x164
    32ac:	689d      	ldr	r5, [r3, #8]
    32ae:	f855 4b04 	ldr.w	r4, [r5], #4
    size_ = dimensions_count;
    32b2:	9446      	str	r4, [sp, #280]	; 0x118
    if (dimensions_count > kMaxSmallSize) {
    32b4:	2c05      	cmp	r4, #5
    32b6:	f340 80f6 	ble.w	34a6 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2da>
      dims_pointer_ = new int32[dimensions_count];
    32ba:	4b81      	ldr	r3, [pc, #516]	; (34c0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2f4>)
    32bc:	429c      	cmp	r4, r3
    32be:	bf94      	ite	ls
    32c0:	00a0      	lslls	r0, r4, #2
    32c2:	f04f 30ff 	movhi.w	r0, #4294967295
    32c6:	4b7f      	ldr	r3, [pc, #508]	; (34c4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2f8>)
    32c8:	4798      	blx	r3
    32ca:	9047      	str	r0, [sp, #284]	; 0x11c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    32cc:	00a2      	lsls	r2, r4, #2
    32ce:	4629      	mov	r1, r5
    32d0:	4b7d      	ldr	r3, [pc, #500]	; (34c8 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2fc>)
    32d2:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    32d4:	9b59      	ldr	r3, [sp, #356]	; 0x164
    32d6:	685e      	ldr	r6, [r3, #4]
  op_params.stride_width = params->stride_width;
    32d8:	fa0f f888 	sxth.w	r8, r8
  op_params.stride_height = params->stride_height;
    32dc:	fa0f fe89 	sxth.w	lr, r9
  op_params.dilation_width_factor = params->dilation_width_factor;
    32e0:	fa0f fc8a 	sxth.w	ip, sl
  op_params.dilation_height_factor = params->dilation_height_factor;
    32e4:	fa0f fb8b 	sxth.w	fp, fp
  op_params.padding_values.width = data.padding.width;
    32e8:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
  op_params.padding_values.height = data.padding.height;
    32ec:	f9bd 5000 	ldrsh.w	r5, [sp]
  // Set min and max value of the output.
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    32f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    32f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    32f4:	4293      	cmp	r3, r2
    32f6:	f300 80d8 	bgt.w	34aa <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2de>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    32fa:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    32fc:	2b04      	cmp	r3, #4
    32fe:	f040 80d6 	bne.w	34ae <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2e2>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    3302:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    3304:	2b04      	cmp	r3, #4
    3306:	f040 80d4 	bne.w	34b2 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2e6>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    330a:	9b46      	ldr	r3, [sp, #280]	; 0x118
    330c:	2b04      	cmp	r3, #4
    330e:	f040 80d2 	bne.w	34b6 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2ea>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    3312:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    3314:	9305      	str	r3, [sp, #20]
    3316:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    3318:	921b      	str	r2, [sp, #108]	; 0x6c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    331a:	429a      	cmp	r2, r3
    331c:	f040 80cd 	bne.w	34ba <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x2ee>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    3320:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    3322:	9304      	str	r3, [sp, #16]
    3324:	f8dd 90f8 	ldr.w	r9, [sp, #248]	; 0xf8
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    3328:	4599      	cmp	r9, r3
    332a:	f040 80d1 	bne.w	34d0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x304>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    332e:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    3330:	9306      	str	r3, [sp, #24]
    3332:	9a4a      	ldr	r2, [sp, #296]	; 0x128
    3334:	920e      	str	r2, [sp, #56]	; 0x38
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    3336:	429a      	cmp	r2, r3
    3338:	f040 80cc 	bne.w	34d4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x308>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (bias_data) {
    333c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    333e:	b1ab      	cbz	r3, 336c <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x1a0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3340:	9a40      	ldr	r2, [sp, #256]	; 0x100
    3342:	2a05      	cmp	r2, #5
    3344:	bfcc      	ite	gt
    3346:	9841      	ldrgt	r0, [sp, #260]	; 0x104
    3348:	a841      	addle	r0, sp, #260	; 0x104
    for (int i = 0; i < size_; i++) {
    334a:	2a00      	cmp	r2, #0
    334c:	f340 80c4 	ble.w	34d8 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x30c>
    3350:	4603      	mov	r3, r0
    3352:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    3356:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
    3358:	f853 1b04 	ldr.w	r1, [r3], #4
    335c:	fb01 f202 	mul.w	r2, r1, r2
    for (int i = 0; i < size_; i++) {
    3360:	4298      	cmp	r0, r3
    3362:	d1f9      	bne.n	3358 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x18c>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    3364:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3366:	4293      	cmp	r3, r2
    3368:	f040 80b8 	bne.w	34dc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x310>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    336c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    336e:	9307      	str	r3, [sp, #28]
    3370:	f8dd a0dc 	ldr.w	sl, [sp, #220]	; 0xdc
    3374:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    3376:	9302      	str	r3, [sp, #8]
    3378:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    337a:	461a      	mov	r2, r3
    337c:	9301      	str	r3, [sp, #4]
    337e:	9948      	ldr	r1, [sp, #288]	; 0x120
    3380:	9117      	str	r1, [sp, #92]	; 0x5c
    3382:	9b49      	ldr	r3, [sp, #292]	; 0x124
    3384:	931c      	str	r3, [sp, #112]	; 0x70
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
    3386:	991b      	ldr	r1, [sp, #108]	; 0x6c
    3388:	2900      	cmp	r1, #0
    338a:	f340 818a 	ble.w	36a2 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x4d6>
    338e:	980e      	ldr	r0, [sp, #56]	; 0x38
    3390:	9032      	str	r0, [sp, #200]	; 0xc8
    3392:	4619      	mov	r1, r3
    3394:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    3396:	fb01 f303 	mul.w	r3, r1, r3
    339a:	fb00 f003 	mul.w	r0, r0, r3
    339e:	9029      	str	r0, [sp, #164]	; 0xa4
    33a0:	9626      	str	r6, [sp, #152]	; 0x98
    33a2:	9b07      	ldr	r3, [sp, #28]
    33a4:	fb0a f303 	mul.w	r3, sl, r3
    33a8:	9e04      	ldr	r6, [sp, #16]
    33aa:	fb06 f303 	mul.w	r3, r6, r3
    33ae:	932a      	str	r3, [sp, #168]	; 0xa8
    33b0:	426d      	negs	r5, r5
    33b2:	952b      	str	r5, [sp, #172]	; 0xac
    33b4:	4263      	negs	r3, r4
    33b6:	9330      	str	r3, [sp, #192]	; 0xc0
    33b8:	fb0a f305 	mul.w	r3, sl, r5
    33bc:	1b1b      	subs	r3, r3, r4
    33be:	fb06 7503 	mla	r5, r6, r3, r7
    33c2:	9525      	str	r5, [sp, #148]	; 0x94
    33c4:	980e      	ldr	r0, [sp, #56]	; 0x38
    33c6:	fb00 f101 	mul.w	r1, r0, r1
    33ca:	9133      	str	r1, [sp, #204]	; 0xcc
    33cc:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
    33d0:	fb06 f30a 	mul.w	r3, r6, sl
    33d4:	fb0e f103 	mul.w	r1, lr, r3
    33d8:	912e      	str	r1, [sp, #184]	; 0xb8
    33da:	f8cd 80bc 	str.w	r8, [sp, #188]	; 0xbc
    33de:	fb06 f108 	mul.w	r1, r6, r8
    33e2:	912d      	str	r1, [sp, #180]	; 0xb4
    33e4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    33e8:	4611      	mov	r1, r2
    33ea:	9c02      	ldr	r4, [sp, #8]
    33ec:	fb02 f204 	mul.w	r2, r2, r4
    33f0:	fb09 f202 	mul.w	r2, r9, r2
    33f4:	9231      	str	r2, [sp, #196]	; 0xc4
    33f6:	fb09 f201 	mul.w	r2, r9, r1
    33fa:	9210      	str	r2, [sp, #64]	; 0x40
    33fc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
    3400:	fb0b f303 	mul.w	r3, fp, r3
    3404:	930f      	str	r3, [sp, #60]	; 0x3c
    3406:	f8cd c020 	str.w	ip, [sp, #32]
    340a:	fb06 f30c 	mul.w	r3, r6, ip
    340e:	930a      	str	r3, [sp, #40]	; 0x28
    3410:	f04f 0b00 	mov.w	fp, #0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    3414:	464b      	mov	r3, r9
    3416:	46d9      	mov	r9, fp
    3418:	469b      	mov	fp, r3
    for (int out_y = 0; out_y < output_height; ++out_y) {
    341a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    341c:	2b00      	cmp	r3, #0
    341e:	f340 8132 	ble.w	3686 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x4ba>
    3422:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    3424:	931d      	str	r3, [sp, #116]	; 0x74
    3426:	9b25      	ldr	r3, [sp, #148]	; 0x94
    3428:	9328      	str	r3, [sp, #160]	; 0xa0
    342a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    342c:	9327      	str	r3, [sp, #156]	; 0x9c
    342e:	2300      	movs	r3, #0
    3430:	9324      	str	r3, [sp, #144]	; 0x90
      for (int out_x = 0; out_x < output_width; ++out_x) {
    3432:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    3434:	2b00      	cmp	r3, #0
    3436:	f340 8113 	ble.w	3660 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x494>
    343a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    343c:	930d      	str	r3, [sp, #52]	; 0x34
    343e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3440:	931f      	str	r3, [sp, #124]	; 0x7c
    3442:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    3444:	931e      	str	r3, [sp, #120]	; 0x78
    3446:	2300      	movs	r3, #0
    3448:	9323      	str	r3, [sp, #140]	; 0x8c
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    344a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    344c:	2b00      	cmp	r3, #0
    344e:	f340 80f4 	ble.w	363a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x46e>
    3452:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3454:	3b04      	subs	r3, #4
    3456:	9320      	str	r3, [sp, #128]	; 0x80
    3458:	9b15      	ldr	r3, [sp, #84]	; 0x54
    345a:	3b04      	subs	r3, #4
    345c:	9321      	str	r3, [sp, #132]	; 0x84
    345e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    3460:	9318      	str	r3, [sp, #96]	; 0x60
    3462:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    3464:	9322      	str	r3, [sp, #136]	; 0x88
    3466:	f04f 0800 	mov.w	r8, #0
          const int in_x_origin = (out_x * stride_width) - pad_width;
          const int in_y_origin = (out_y * stride_height) - pad_height;
          int32 acc = 0;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    346a:	9b02      	ldr	r3, [sp, #8]
    346c:	2b00      	cmp	r3, #0
    346e:	dd6c      	ble.n	354a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x37e>
    3470:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    3472:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    3474:	930b      	str	r3, [sp, #44]	; 0x2c
    3476:	9b18      	ldr	r3, [sp, #96]	; 0x60
    3478:	930c      	str	r3, [sp, #48]	; 0x30
    347a:	2600      	movs	r6, #0
    347c:	4635      	mov	r5, r6
    347e:	e05a      	b.n	3536 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x36a>
  RuntimeShape() : size_(0) {}
    3480:	2700      	movs	r7, #0
    3482:	9734      	str	r7, [sp, #208]	; 0xd0
    3484:	e6d8      	b.n	3238 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x6c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3486:	a835      	add	r0, sp, #212	; 0xd4
    3488:	e6d1      	b.n	322e <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x62>
  RuntimeShape() : size_(0) {}
    348a:	2300      	movs	r3, #0
    348c:	933a      	str	r3, [sp, #232]	; 0xe8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    348e:	931a      	str	r3, [sp, #104]	; 0x68
    3490:	e6eb      	b.n	326a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x9e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3492:	a83b      	add	r0, sp, #236	; 0xec
    3494:	e6e3      	b.n	325e <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x92>
  RuntimeShape() : size_(0) {}
    3496:	9340      	str	r3, [sp, #256]	; 0x100
    3498:	9319      	str	r3, [sp, #100]	; 0x64
    349a:	e702      	b.n	32a2 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0xd6>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    349c:	a841      	add	r0, sp, #260	; 0x104
    349e:	e6f9      	b.n	3294 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0xc8>
  RuntimeShape() : size_(0) {}
    34a0:	2600      	movs	r6, #0
    34a2:	9646      	str	r6, [sp, #280]	; 0x118
    34a4:	e718      	b.n	32d8 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x10c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    34a6:	a847      	add	r0, sp, #284	; 0x11c
    34a8:	e710      	b.n	32cc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x100>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    34aa:	4b08      	ldr	r3, [pc, #32]	; (34cc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x300>)
    34ac:	4798      	blx	r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    34ae:	4b07      	ldr	r3, [pc, #28]	; (34cc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x300>)
    34b0:	4798      	blx	r3
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    34b2:	4b06      	ldr	r3, [pc, #24]	; (34cc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x300>)
    34b4:	4798      	blx	r3
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    34b6:	4b05      	ldr	r3, [pc, #20]	; (34cc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x300>)
    34b8:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    34ba:	4b04      	ldr	r3, [pc, #16]	; (34cc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x300>)
    34bc:	4798      	blx	r3
    34be:	bf00      	nop
    34c0:	1ffffffe 	.word	0x1ffffffe
    34c4:	00009291 	.word	0x00009291
    34c8:	00014641 	.word	0x00014641
    34cc:	000138bd 	.word	0x000138bd
    34d0:	4baf      	ldr	r3, [pc, #700]	; (3790 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    34d2:	4798      	blx	r3
    34d4:	4bae      	ldr	r3, [pc, #696]	; (3790 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    34d6:	4798      	blx	r3
    int buffer_size = 1;
    34d8:	2201      	movs	r2, #1
    34da:	e743      	b.n	3364 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x198>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    34dc:	4bac      	ldr	r3, [pc, #688]	; (3790 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    34de:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    34e0:	4bab      	ldr	r3, [pc, #684]	; (3790 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    34e2:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    34e4:	4baa      	ldr	r3, [pc, #680]	; (3790 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    34e6:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    34e8:	4ba9      	ldr	r3, [pc, #676]	; (3790 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    34ea:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    34ec:	4ba8      	ldr	r3, [pc, #672]	; (3790 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    34ee:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    34f0:	4ba7      	ldr	r3, [pc, #668]	; (3790 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    34f2:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    34f4:	4ba6      	ldr	r3, [pc, #664]	; (3790 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    34f6:	4798      	blx	r3
    34f8:	9e00      	ldr	r6, [sp, #0]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    34fa:	3001      	adds	r0, #1
    34fc:	9b08      	ldr	r3, [sp, #32]
    34fe:	441a      	add	r2, r3
    3500:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3502:	449c      	add	ip, r3
    3504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3506:	449e      	add	lr, r3
    3508:	9b01      	ldr	r3, [sp, #4]
    350a:	4298      	cmp	r0, r3
    350c:	d005      	beq.n	351a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x34e>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    350e:	f1bb 0f00 	cmp.w	fp, #0
    3512:	ddf2      	ble.n	34fa <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x32e>
    3514:	2300      	movs	r3, #0
    3516:	9600      	str	r6, [sp, #0]
    3518:	e120      	b.n	375c <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x590>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    351a:	3501      	adds	r5, #1
    351c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    351e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3520:	4413      	add	r3, r2
    3522:	930c      	str	r3, [sp, #48]	; 0x30
    3524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3526:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    3528:	4413      	add	r3, r2
    352a:	930b      	str	r3, [sp, #44]	; 0x2c
    352c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    352e:	441c      	add	r4, r3
    3530:	9b02      	ldr	r3, [sp, #8]
    3532:	429d      	cmp	r5, r3
    3534:	d00a      	beq.n	354c <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x380>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    3536:	9b01      	ldr	r3, [sp, #4]
    3538:	2b00      	cmp	r3, #0
    353a:	ddee      	ble.n	351a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x34e>
    353c:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
    3540:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    3544:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3546:	2000      	movs	r0, #0
    3548:	e7e1      	b.n	350e <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x342>
          int32 acc = 0;
    354a:	2600      	movs	r6, #0
                }
              }
            }
          }

          if (bias_data) {
    354c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    354e:	b113      	cbz	r3, 3556 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x38a>
            acc += bias_data[out_channel];
    3550:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
    3554:	441e      	add	r6, r3
          }
          acc = MultiplyByQuantizedMultiplier(
    3556:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3558:	f853 0f04 	ldr.w	r0, [r3, #4]!
    355c:	9320      	str	r3, [sp, #128]	; 0x80
    355e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    3560:	f853 7f04 	ldr.w	r7, [r3, #4]!
    3564:	9321      	str	r3, [sp, #132]	; 0x84
  int left_shift = shift > 0 ? shift : 0;
    3566:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    356a:	2f00      	cmp	r7, #0
    356c:	bfd4      	ite	le
    356e:	427f      	negle	r7, r7
    3570:	2700      	movgt	r7, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    3572:	4096      	lsls	r6, r2
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    3574:	42b0      	cmp	r0, r6
    3576:	f000 809e 	beq.w	36b6 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x4ea>
  std::int64_t a_64(a);
    357a:	17f5      	asrs	r5, r6, #31
  std::int64_t b_64(b);
    357c:	17c3      	asrs	r3, r0, #31
  std::int64_t ab_64 = a_64 * b_64;
    357e:	fb06 f103 	mul.w	r1, r6, r3
    3582:	fb00 1105 	mla	r1, r0, r5, r1
    3586:	fba6 2300 	umull	r2, r3, r6, r0
    358a:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    358c:	2a00      	cmp	r2, #0
    358e:	f173 0100 	sbcs.w	r1, r3, #0
    3592:	f2c0 80ed 	blt.w	3770 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5a4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    3596:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    359a:	f143 0300 	adc.w	r3, r3, #0
    359e:	4610      	mov	r0, r2
    35a0:	4619      	mov	r1, r3
    35a2:	2a00      	cmp	r2, #0
    35a4:	f173 0400 	sbcs.w	r4, r3, #0
    35a8:	f2c0 8108 	blt.w	37bc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5f0>
    35ac:	0fc3      	lsrs	r3, r0, #31
    35ae:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    35b2:	4618      	mov	r0, r3
  assert(exponent >= 0);
    35b4:	2f00      	cmp	r7, #0
    35b6:	f2c0 8085 	blt.w	36c4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x4f8>
  assert(exponent <= 31);
    35ba:	2f1f      	cmp	r7, #31
    35bc:	f300 8089 	bgt.w	36d2 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x506>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    35c0:	2301      	movs	r3, #1
    35c2:	40bb      	lsls	r3, r7
    35c4:	3b01      	subs	r3, #1
  return a >> offset;
    35c6:	105a      	asrs	r2, r3, #1
  return a + b;
    35c8:	eb02 71d0 	add.w	r1, r2, r0, lsr #31
  return a & b;
    35cc:	ea00 0203 	and.w	r2, r0, r3
  return a >> offset;
    35d0:	fa40 f307 	asr.w	r3, r0, r7
  return a + b;
    35d4:	4291      	cmp	r1, r2
    35d6:	bfb8      	it	lt
    35d8:	3301      	addlt	r3, #1
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          acc += output_offset;
    35da:	9a16      	ldr	r2, [sp, #88]	; 0x58
    35dc:	4413      	add	r3, r2
    35de:	9a12      	ldr	r2, [sp, #72]	; 0x48
    35e0:	4293      	cmp	r3, r2
    35e2:	bfb8      	it	lt
    35e4:	4613      	movlt	r3, r2
    35e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    35e8:	4293      	cmp	r3, r2
    35ea:	bfa8      	it	ge
    35ec:	4613      	movge	r3, r2
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    35ee:	f1b9 0f00 	cmp.w	r9, #0
    35f2:	db75      	blt.n	36e0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x514>
    35f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    35f6:	454a      	cmp	r2, r9
    35f8:	dd72      	ble.n	36e0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x514>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    35fa:	9a24      	ldr	r2, [sp, #144]	; 0x90
    35fc:	2a00      	cmp	r2, #0
    35fe:	db71      	blt.n	36e4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x518>
    3600:	9917      	ldr	r1, [sp, #92]	; 0x5c
    3602:	428a      	cmp	r2, r1
    3604:	da6e      	bge.n	36e4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x518>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    3606:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    3608:	2a00      	cmp	r2, #0
    360a:	db6d      	blt.n	36e8 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x51c>
    360c:	991c      	ldr	r1, [sp, #112]	; 0x70
    360e:	428a      	cmp	r2, r1
    3610:	da6a      	bge.n	36e8 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x51c>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    3612:	f1b8 0f00 	cmp.w	r8, #0
    3616:	db69      	blt.n	36ec <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x520>
    3618:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    361a:	4542      	cmp	r2, r8
    361c:	dd66      	ble.n	36ec <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x520>
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              static_cast<int8_t>(acc);
    361e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    3620:	f802 3b01 	strb.w	r3, [r2], #1
    3624:	9222      	str	r2, [sp, #136]	; 0x88
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    3626:	f108 0801 	add.w	r8, r8, #1
    362a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    362c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    362e:	4413      	add	r3, r2
    3630:	9318      	str	r3, [sp, #96]	; 0x60
    3632:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3634:	4598      	cmp	r8, r3
    3636:	f47f af18 	bne.w	346a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x29e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    363a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    363c:	3301      	adds	r3, #1
    363e:	9323      	str	r3, [sp, #140]	; 0x8c
    3640:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    3642:	9932      	ldr	r1, [sp, #200]	; 0xc8
    3644:	440a      	add	r2, r1
    3646:	921e      	str	r2, [sp, #120]	; 0x78
    3648:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    364a:	992d      	ldr	r1, [sp, #180]	; 0xb4
    364c:	440a      	add	r2, r1
    364e:	921f      	str	r2, [sp, #124]	; 0x7c
    3650:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3652:	992f      	ldr	r1, [sp, #188]	; 0xbc
    3654:	440a      	add	r2, r1
    3656:	920d      	str	r2, [sp, #52]	; 0x34
    3658:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    365a:	4293      	cmp	r3, r2
    365c:	f47f aef5 	bne.w	344a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x27e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    3660:	9b24      	ldr	r3, [sp, #144]	; 0x90
    3662:	3301      	adds	r3, #1
    3664:	9324      	str	r3, [sp, #144]	; 0x90
    3666:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    3668:	9933      	ldr	r1, [sp, #204]	; 0xcc
    366a:	440a      	add	r2, r1
    366c:	9227      	str	r2, [sp, #156]	; 0x9c
    366e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    3670:	992e      	ldr	r1, [sp, #184]	; 0xb8
    3672:	440a      	add	r2, r1
    3674:	9228      	str	r2, [sp, #160]	; 0xa0
    3676:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    3678:	992c      	ldr	r1, [sp, #176]	; 0xb0
    367a:	440a      	add	r2, r1
    367c:	921d      	str	r2, [sp, #116]	; 0x74
    367e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    3680:	4293      	cmp	r3, r2
    3682:	f47f aed6 	bne.w	3432 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x266>
  for (int batch = 0; batch < batches; ++batch) {
    3686:	f109 0901 	add.w	r9, r9, #1
    368a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    368c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    368e:	4413      	add	r3, r2
    3690:	9326      	str	r3, [sp, #152]	; 0x98
    3692:	9b25      	ldr	r3, [sp, #148]	; 0x94
    3694:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    3696:	4413      	add	r3, r2
    3698:	9325      	str	r3, [sp, #148]	; 0x94
    369a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    369c:	4599      	cmp	r9, r3
    369e:	f47f aebc 	bne.w	341a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x24e>
    if (size_ > kMaxSmallSize) {
    36a2:	9b40      	ldr	r3, [sp, #256]	; 0x100
    36a4:	2b05      	cmp	r3, #5
    36a6:	dd03      	ble.n	36b0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x4e4>
      delete[] dims_pointer_;
    36a8:	9841      	ldr	r0, [sp, #260]	; 0x104
    36aa:	b108      	cbz	r0, 36b0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x4e4>
    36ac:	4b39      	ldr	r3, [pc, #228]	; (3794 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c8>)
    36ae:	4798      	blx	r3
      GetTensorData<int8>(input), GetTensorShape(filter),
      GetTensorData<int8>(filter), GetTensorShape(bias),
      GetTensorData<int32>(bias), GetTensorShape(output),
      GetTensorData<int8>(output));
}
    36b0:	b04d      	add	sp, #308	; 0x134
    36b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    36b6:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
    36ba:	f47f af5e 	bne.w	357a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x3ae>
    36be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    36c2:	e776      	b.n	35b2 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x3e6>
  assert(exponent >= 0);
    36c4:	4b34      	ldr	r3, [pc, #208]	; (3798 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5cc>)
    36c6:	4a35      	ldr	r2, [pc, #212]	; (379c <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5d0>)
    36c8:	f44f 71b3 	mov.w	r1, #358	; 0x166
    36cc:	4834      	ldr	r0, [pc, #208]	; (37a0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5d4>)
    36ce:	4c35      	ldr	r4, [pc, #212]	; (37a4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5d8>)
    36d0:	47a0      	blx	r4
  assert(exponent <= 31);
    36d2:	4b35      	ldr	r3, [pc, #212]	; (37a8 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5dc>)
    36d4:	4a31      	ldr	r2, [pc, #196]	; (379c <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5d0>)
    36d6:	f240 1167 	movw	r1, #359	; 0x167
    36da:	4831      	ldr	r0, [pc, #196]	; (37a0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5d4>)
    36dc:	4c31      	ldr	r4, [pc, #196]	; (37a4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5d8>)
    36de:	47a0      	blx	r4
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    36e0:	4b2b      	ldr	r3, [pc, #172]	; (3790 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    36e2:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    36e4:	4b2a      	ldr	r3, [pc, #168]	; (3790 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    36e6:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    36e8:	4b29      	ldr	r3, [pc, #164]	; (3790 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    36ea:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    36ec:	4b28      	ldr	r3, [pc, #160]	; (3790 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5c4>)
    36ee:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    36f0:	f1b9 0f00 	cmp.w	r9, #0
    36f4:	f6ff aef4 	blt.w	34e0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x314>
    36f8:	9905      	ldr	r1, [sp, #20]
    36fa:	4549      	cmp	r1, r9
    36fc:	f77f aef0 	ble.w	34e0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x314>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    3700:	2b00      	cmp	r3, #0
    3702:	f6ff aeef 	blt.w	34e4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x318>
    3706:	9904      	ldr	r1, [sp, #16]
    3708:	4299      	cmp	r1, r3
    370a:	f77f aeeb 	ble.w	34e4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x318>
                                                      in_x, in_channel)];
    370e:	f91e 1003 	ldrsb.w	r1, [lr, r3]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    3712:	f1b8 0f00 	cmp.w	r8, #0
    3716:	f6ff aee7 	blt.w	34e8 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x31c>
    371a:	9e06      	ldr	r6, [sp, #24]
    371c:	4546      	cmp	r6, r8
    371e:	f77f aee3 	ble.w	34e8 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x31c>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    3722:	2d00      	cmp	r5, #0
    3724:	f6ff aee2 	blt.w	34ec <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x320>
    3728:	9e02      	ldr	r6, [sp, #8]
    372a:	42ae      	cmp	r6, r5
    372c:	f77f aede 	ble.w	34ec <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x320>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    3730:	2800      	cmp	r0, #0
    3732:	f6ff aedd 	blt.w	34f0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x324>
    3736:	9e01      	ldr	r6, [sp, #4]
    3738:	4286      	cmp	r6, r0
    373a:	f77f aed9 	ble.w	34f0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x324>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    373e:	459b      	cmp	fp, r3
    3740:	f77f aed8 	ble.w	34f4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x328>
                                         filter_x, in_channel)];
    3744:	f91c 7003 	ldrsb.w	r7, [ip, r3]
                  acc += filter_val * (input_val + input_offset);
    3748:	9e03      	ldr	r6, [sp, #12]
    374a:	1b89      	subs	r1, r1, r6
    374c:	9e00      	ldr	r6, [sp, #0]
    374e:	fb01 6107 	mla	r1, r1, r7, r6
    3752:	9100      	str	r1, [sp, #0]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    3754:	3301      	adds	r3, #1
    3756:	455b      	cmp	r3, fp
    3758:	f43f aece 	beq.w	34f8 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x32c>
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    375c:	2a00      	cmp	r2, #0
    375e:	dbf9      	blt.n	3754 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x588>
    3760:	4552      	cmp	r2, sl
    3762:	daf7      	bge.n	3754 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x588>
    3764:	2c00      	cmp	r4, #0
    3766:	dbf5      	blt.n	3754 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x588>
    3768:	9907      	ldr	r1, [sp, #28]
    376a:	428c      	cmp	r4, r1
    376c:	dbc0      	blt.n	36f0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x524>
    376e:	e7f1      	b.n	3754 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x588>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    3770:	480e      	ldr	r0, [pc, #56]	; (37ac <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5e0>)
    3772:	f04f 31ff 	mov.w	r1, #4294967295
    3776:	1880      	adds	r0, r0, r2
    3778:	4159      	adcs	r1, r3
    377a:	4602      	mov	r2, r0
    377c:	460b      	mov	r3, r1
    377e:	2800      	cmp	r0, #0
    3780:	f171 0400 	sbcs.w	r4, r1, #0
    3784:	db14      	blt.n	37b0 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5e4>
    3786:	0fc3      	lsrs	r3, r0, #31
    3788:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    378c:	e711      	b.n	35b2 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x3e6>
    378e:	bf00      	nop
    3790:	000138bd 	.word	0x000138bd
    3794:	000091e1 	.word	0x000091e1
    3798:	00020d8c 	.word	0x00020d8c
    379c:	00020be8 	.word	0x00020be8
    37a0:	00020d9c 	.word	0x00020d9c
    37a4:	000138cd 	.word	0x000138cd
    37a8:	00020dcc 	.word	0x00020dcc
    37ac:	c0000001 	.word	0xc0000001
    37b0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    37b4:	2100      	movs	r1, #0
    37b6:	1880      	adds	r0, r0, r2
    37b8:	4159      	adcs	r1, r3
    37ba:	e7e4      	b.n	3786 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x5ba>
    37bc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    37c0:	2100      	movs	r1, #0
    37c2:	1880      	adds	r0, r0, r2
    37c4:	4159      	adcs	r1, r3
    37c6:	e6f1      	b.n	35ac <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x3e0>

000037c8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>:

void EvalFloat(TfLiteContext* context, TfLiteNode* node,
               TfLiteConvParams* params, const OpData& data,
               const TfLiteTensor* input, const TfLiteTensor* filter,
               const TfLiteTensor* bias, TfLiteTensor* im2col,
               TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
    37c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37cc:	b0d1      	sub	sp, #324	; 0x144
    37ce:	9c5a      	ldr	r4, [sp, #360]	; 0x168
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
    37d0:	7b11      	ldrb	r1, [r2, #12]
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
    37d2:	2901      	cmp	r1, #1
    37d4:	f000 816a 	beq.w	3aac <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2e4>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
    37d8:	2903      	cmp	r1, #3
    37da:	f000 816c 	beq.w	3ab6 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2ee>
    *activation_min = 0;
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    37de:	2902      	cmp	r1, #2
    37e0:	f000 816e 	beq.w	3ac0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2f8>
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
    37e4:	49ad      	ldr	r1, [pc, #692]	; (3a9c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2d4>)
    37e6:	9116      	str	r1, [sp, #88]	; 0x58
    *activation_min = std::numeric_limits<T>::lowest();
    37e8:	f46f 0100 	mvn.w	r1, #8388608	; 0x800000
    37ec:	9115      	str	r1, [sp, #84]	; 0x54
                           &output_activation_max);
  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
  op_params.padding_values.width = data.padding.width;
    37ee:	f8d3 b000 	ldr.w	fp, [r3]
  op_params.padding_values.height = data.padding.height;
    37f2:	685b      	ldr	r3, [r3, #4]
    37f4:	9301      	str	r3, [sp, #4]
  op_params.stride_width = params->stride_width;
    37f6:	f8d2 8004 	ldr.w	r8, [r2, #4]
  op_params.stride_height = params->stride_height;
    37fa:	6895      	ldr	r5, [r2, #8]
  op_params.dilation_width_factor = params->dilation_width_factor;
    37fc:	f8d2 9010 	ldr.w	r9, [r2, #16]
  op_params.dilation_height_factor = params->dilation_height_factor;
    3800:	f8d2 a014 	ldr.w	sl, [r2, #20]
  if (tensor == nullptr) {
    3804:	2c00      	cmp	r4, #0
    3806:	f000 8161 	beq.w	3acc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x304>
  const int dims_size = dims->size;
    380a:	68a7      	ldr	r7, [r4, #8]
    380c:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    3810:	9632      	str	r6, [sp, #200]	; 0xc8
    if (dimensions_count > kMaxSmallSize) {
    3812:	2e05      	cmp	r6, #5
    3814:	f340 815e 	ble.w	3ad4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x30c>
      dims_pointer_ = new int32[dimensions_count];
    3818:	4ba1      	ldr	r3, [pc, #644]	; (3aa0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2d8>)
    381a:	429e      	cmp	r6, r3
    381c:	bf94      	ite	ls
    381e:	00b0      	lslls	r0, r6, #2
    3820:	f04f 30ff 	movhi.w	r0, #4294967295
    3824:	4b9f      	ldr	r3, [pc, #636]	; (3aa4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2dc>)
    3826:	4798      	blx	r3
    3828:	9033      	str	r0, [sp, #204]	; 0xcc
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    382a:	00b2      	lsls	r2, r6, #2
    382c:	4639      	mov	r1, r7
    382e:	4b9e      	ldr	r3, [pc, #632]	; (3aa8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2e0>)
    3830:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    3832:	6863      	ldr	r3, [r4, #4]
    3834:	9303      	str	r3, [sp, #12]
  if (tensor == nullptr) {
    3836:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    3838:	2b00      	cmp	r3, #0
    383a:	f000 814d 	beq.w	3ad8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x310>
  const int dims_size = dims->size;
    383e:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    3840:	689f      	ldr	r7, [r3, #8]
    3842:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    3846:	9638      	str	r6, [sp, #224]	; 0xe0
    if (dimensions_count > kMaxSmallSize) {
    3848:	2e05      	cmp	r6, #5
    384a:	f340 8148 	ble.w	3ade <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x316>
      dims_pointer_ = new int32[dimensions_count];
    384e:	4b94      	ldr	r3, [pc, #592]	; (3aa0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2d8>)
    3850:	429e      	cmp	r6, r3
    3852:	bf94      	ite	ls
    3854:	00b0      	lslls	r0, r6, #2
    3856:	f04f 30ff 	movhi.w	r0, #4294967295
    385a:	4b92      	ldr	r3, [pc, #584]	; (3aa4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2dc>)
    385c:	4798      	blx	r3
    385e:	9039      	str	r0, [sp, #228]	; 0xe4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    3860:	00b2      	lsls	r2, r6, #2
    3862:	4639      	mov	r1, r7
    3864:	4b90      	ldr	r3, [pc, #576]	; (3aa8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2e0>)
    3866:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    3868:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    386a:	685b      	ldr	r3, [r3, #4]
    386c:	9325      	str	r3, [sp, #148]	; 0x94
  if (tensor == nullptr) {
    386e:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    3870:	2b00      	cmp	r3, #0
    3872:	f000 8136 	beq.w	3ae2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x31a>
  const int dims_size = dims->size;
    3876:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    3878:	689f      	ldr	r7, [r3, #8]
    387a:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    387e:	963e      	str	r6, [sp, #248]	; 0xf8
    if (dimensions_count > kMaxSmallSize) {
    3880:	2e05      	cmp	r6, #5
    3882:	f340 8131 	ble.w	3ae8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x320>
      dims_pointer_ = new int32[dimensions_count];
    3886:	4b86      	ldr	r3, [pc, #536]	; (3aa0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2d8>)
    3888:	429e      	cmp	r6, r3
    388a:	bf94      	ite	ls
    388c:	00b0      	lslls	r0, r6, #2
    388e:	f04f 30ff 	movhi.w	r0, #4294967295
    3892:	4b84      	ldr	r3, [pc, #528]	; (3aa4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2dc>)
    3894:	4798      	blx	r3
    3896:	903f      	str	r0, [sp, #252]	; 0xfc
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    3898:	00b2      	lsls	r2, r6, #2
    389a:	4639      	mov	r1, r7
    389c:	4b82      	ldr	r3, [pc, #520]	; (3aa8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2e0>)
    389e:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    38a0:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    38a2:	685b      	ldr	r3, [r3, #4]
    38a4:	9317      	str	r3, [sp, #92]	; 0x5c
  if (tensor == nullptr) {
    38a6:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
    38a8:	2b00      	cmp	r3, #0
    38aa:	f000 811f 	beq.w	3aec <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x324>
  const int dims_size = dims->size;
    38ae:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
    38b0:	689f      	ldr	r7, [r3, #8]
    38b2:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    38b6:	9644      	str	r6, [sp, #272]	; 0x110
    if (dimensions_count > kMaxSmallSize) {
    38b8:	2e05      	cmp	r6, #5
    38ba:	f340 811a 	ble.w	3af2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x32a>
      dims_pointer_ = new int32[dimensions_count];
    38be:	4b78      	ldr	r3, [pc, #480]	; (3aa0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2d8>)
    38c0:	429e      	cmp	r6, r3
    38c2:	bf94      	ite	ls
    38c4:	00b0      	lslls	r0, r6, #2
    38c6:	f04f 30ff 	movhi.w	r0, #4294967295
    38ca:	4b76      	ldr	r3, [pc, #472]	; (3aa4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2dc>)
    38cc:	4798      	blx	r3
    38ce:	9045      	str	r0, [sp, #276]	; 0x114
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    38d0:	00b2      	lsls	r2, r6, #2
    38d2:	4639      	mov	r1, r7
    38d4:	4b74      	ldr	r3, [pc, #464]	; (3aa8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2e0>)
    38d6:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    38d8:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
    38da:	685f      	ldr	r7, [r3, #4]
  if (tensor == nullptr) {
    38dc:	9b5d      	ldr	r3, [sp, #372]	; 0x174
    38de:	2b00      	cmp	r3, #0
    38e0:	f000 8109 	beq.w	3af6 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x32e>
  TfLiteIntArray* dims = tensor->dims;
    38e4:	9b5d      	ldr	r3, [sp, #372]	; 0x174
    38e6:	689e      	ldr	r6, [r3, #8]
  const int dims_size = dims->size;
    38e8:	6834      	ldr	r4, [r6, #0]
    size_ = dimensions_count;
    38ea:	944a      	str	r4, [sp, #296]	; 0x128
    if (dimensions_count > kMaxSmallSize) {
    38ec:	2c05      	cmp	r4, #5
    38ee:	f340 8104 	ble.w	3afa <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x332>
      dims_pointer_ = new int32[dimensions_count];
    38f2:	4b6b      	ldr	r3, [pc, #428]	; (3aa0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2d8>)
    38f4:	429c      	cmp	r4, r3
    38f6:	bf94      	ite	ls
    38f8:	00a0      	lslls	r0, r4, #2
    38fa:	f04f 30ff 	movhi.w	r0, #4294967295
    38fe:	4b69      	ldr	r3, [pc, #420]	; (3aa4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2dc>)
    3900:	4798      	blx	r3
    3902:	904b      	str	r0, [sp, #300]	; 0x12c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    3904:	00a2      	lsls	r2, r4, #2
    3906:	1d31      	adds	r1, r6, #4
    3908:	4b67      	ldr	r3, [pc, #412]	; (3aa8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2e0>)
    390a:	4798      	blx	r3
  op_params.stride_width = params->stride_width;
    390c:	fa0f f888 	sxth.w	r8, r8
  op_params.stride_height = params->stride_height;
    3910:	b22d      	sxth	r5, r5
  op_params.dilation_width_factor = params->dilation_width_factor;
    3912:	fa0f f989 	sxth.w	r9, r9
  op_params.dilation_height_factor = params->dilation_height_factor;
    3916:	fa0f fe8a 	sxth.w	lr, sl
  op_params.padding_values.width = data.padding.width;
    391a:	fa0f f68b 	sxth.w	r6, fp
  op_params.padding_values.height = data.padding.height;
    391e:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    3922:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    3924:	2b04      	cmp	r3, #4
    3926:	f040 80ea 	bne.w	3afe <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x336>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    392a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    392c:	2b04      	cmp	r3, #4
    392e:	f040 80e8 	bne.w	3b02 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x33a>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    3932:	9b44      	ldr	r3, [sp, #272]	; 0x110
    3934:	2b04      	cmp	r3, #4
    3936:	f040 80e6 	bne.w	3b06 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x33e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    393a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    393c:	930c      	str	r3, [sp, #48]	; 0x30
    393e:	9a45      	ldr	r2, [sp, #276]	; 0x114
    3940:	921e      	str	r2, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    3942:	429a      	cmp	r2, r3
    3944:	f040 80e1 	bne.w	3b0a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x342>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    3948:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    394a:	930b      	str	r3, [sp, #44]	; 0x2c
    394c:	f8dd b0f0 	ldr.w	fp, [sp, #240]	; 0xf0
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    3950:	459b      	cmp	fp, r3
    3952:	f040 80dc 	bne.w	3b0e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x346>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    3956:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    3958:	930d      	str	r3, [sp, #52]	; 0x34
    395a:	9a48      	ldr	r2, [sp, #288]	; 0x120
    395c:	9214      	str	r2, [sp, #80]	; 0x50
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    395e:	429a      	cmp	r2, r3
    3960:	f040 80d7 	bne.w	3b12 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x34a>
  if (bias_data) {
    3964:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    3966:	b1ab      	cbz	r3, 3994 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x1cc>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3968:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    396a:	2a05      	cmp	r2, #5
    396c:	bfcc      	ite	gt
    396e:	993f      	ldrgt	r1, [sp, #252]	; 0xfc
    3970:	a93f      	addle	r1, sp, #252	; 0xfc
    for (int i = 0; i < size_; i++) {
    3972:	2a00      	cmp	r2, #0
    3974:	f340 80cf 	ble.w	3b16 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x34e>
    3978:	460b      	mov	r3, r1
    397a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    397e:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
    3980:	f853 0b04 	ldr.w	r0, [r3], #4
    3984:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
    3988:	428b      	cmp	r3, r1
    398a:	d1f9      	bne.n	3980 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x1b8>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    398c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    398e:	429a      	cmp	r2, r3
    3990:	f040 80c3 	bne.w	3b1a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x352>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    3994:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    3996:	9301      	str	r3, [sp, #4]
    3998:	f8dd a0d4 	ldr.w	sl, [sp, #212]	; 0xd4
    399c:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    399e:	9208      	str	r2, [sp, #32]
    39a0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    39a2:	4619      	mov	r1, r3
    39a4:	9302      	str	r3, [sp, #8]
    39a6:	9846      	ldr	r0, [sp, #280]	; 0x118
    39a8:	4602      	mov	r2, r0
    39aa:	9023      	str	r0, [sp, #140]	; 0x8c
    39ac:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    39ae:	9321      	str	r3, [sp, #132]	; 0x84
  for (int batch = 0; batch < batches; ++batch) {
    39b0:	981e      	ldr	r0, [sp, #120]	; 0x78
    39b2:	2800      	cmp	r0, #0
    39b4:	f340 81b9 	ble.w	3d2a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x562>
    39b8:	4618      	mov	r0, r3
    39ba:	fb03 f302 	mul.w	r3, r3, r2
    39be:	009b      	lsls	r3, r3, #2
    39c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    39c2:	fb02 fc03 	mul.w	ip, r2, r3
    39c6:	f8cd c0b8 	str.w	ip, [sp, #184]	; 0xb8
    39ca:	971a      	str	r7, [sp, #104]	; 0x68
    39cc:	9b01      	ldr	r3, [sp, #4]
    39ce:	fb0a f303 	mul.w	r3, sl, r3
    39d2:	009b      	lsls	r3, r3, #2
    39d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    39d6:	4617      	mov	r7, r2
    39d8:	fb02 f303 	mul.w	r3, r2, r3
    39dc:	932a      	str	r3, [sp, #168]	; 0xa8
    39de:	4263      	negs	r3, r4
    39e0:	461c      	mov	r4, r3
    39e2:	932b      	str	r3, [sp, #172]	; 0xac
    39e4:	4273      	negs	r3, r6
    39e6:	9328      	str	r3, [sp, #160]	; 0xa0
    39e8:	0093      	lsls	r3, r2, #2
    39ea:	fb04 f20a 	mul.w	r2, r4, sl
    39ee:	1b92      	subs	r2, r2, r6
    39f0:	9e03      	ldr	r6, [sp, #12]
    39f2:	fb03 6602 	mla	r6, r3, r2, r6
    39f6:	9620      	str	r6, [sp, #128]	; 0x80
    39f8:	4602      	mov	r2, r0
    39fa:	9c14      	ldr	r4, [sp, #80]	; 0x50
    39fc:	fb02 f204 	mul.w	r2, r2, r4
    3a00:	0090      	lsls	r0, r2, #2
    3a02:	902c      	str	r0, [sp, #176]	; 0xb0
    3a04:	9529      	str	r5, [sp, #164]	; 0xa4
    3a06:	fb07 f20a 	mul.w	r2, r7, sl
    3a0a:	0092      	lsls	r2, r2, #2
    3a0c:	fb02 f005 	mul.w	r0, r2, r5
    3a10:	902d      	str	r0, [sp, #180]	; 0xb4
    3a12:	00a0      	lsls	r0, r4, #2
    3a14:	902f      	str	r0, [sp, #188]	; 0xbc
    3a16:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
    3a1a:	fb08 f003 	mul.w	r0, r8, r3
    3a1e:	9031      	str	r0, [sp, #196]	; 0xc4
    3a20:	4608      	mov	r0, r1
    3a22:	9c08      	ldr	r4, [sp, #32]
    3a24:	fb01 f104 	mul.w	r1, r1, r4
    3a28:	0089      	lsls	r1, r1, #2
    3a2a:	fb0b f101 	mul.w	r1, fp, r1
    3a2e:	9127      	str	r1, [sp, #156]	; 0x9c
    3a30:	fb00 f10b 	mul.w	r1, r0, fp
    3a34:	0089      	lsls	r1, r1, #2
    3a36:	9113      	str	r1, [sp, #76]	; 0x4c
    3a38:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
    3a3c:	fb02 f20e 	mul.w	r2, r2, lr
    3a40:	9212      	str	r2, [sp, #72]	; 0x48
    3a42:	ea4f 028b 	mov.w	r2, fp, lsl #2
    3a46:	9206      	str	r2, [sp, #24]
    3a48:	f8cd 9014 	str.w	r9, [sp, #20]
    3a4c:	fb09 f303 	mul.w	r3, r9, r3
    3a50:	9304      	str	r3, [sp, #16]
    3a52:	2300      	movs	r3, #0
    3a54:	930a      	str	r3, [sp, #40]	; 0x28
    for (int out_y = 0; out_y < output_height; ++out_y) {
    3a56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    3a58:	2b00      	cmp	r3, #0
    3a5a:	f340 8157 	ble.w	3d0c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x544>
    3a5e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    3a60:	9319      	str	r3, [sp, #100]	; 0x64
    3a62:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3a64:	931d      	str	r3, [sp, #116]	; 0x74
    3a66:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    3a68:	9318      	str	r3, [sp, #96]	; 0x60
    3a6a:	2300      	movs	r3, #0
    3a6c:	931c      	str	r3, [sp, #112]	; 0x70
      for (int out_x = 0; out_x < output_width; ++out_x) {
    3a6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    3a70:	2b00      	cmp	r3, #0
    3a72:	f340 8138 	ble.w	3ce6 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x51e>
    3a76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3a78:	9310      	str	r3, [sp, #64]	; 0x40
    3a7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    3a7c:	9324      	str	r3, [sp, #144]	; 0x90
    3a7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    3a80:	9322      	str	r3, [sp, #136]	; 0x88
    3a82:	2300      	movs	r3, #0
    3a84:	931b      	str	r3, [sp, #108]	; 0x6c
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    3a86:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3a88:	2b00      	cmp	r3, #0
    3a8a:	f340 8119 	ble.w	3cc0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4f8>
    3a8e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    3a90:	931f      	str	r3, [sp, #124]	; 0x7c
    3a92:	9b22      	ldr	r3, [sp, #136]	; 0x88
    3a94:	9326      	str	r3, [sp, #152]	; 0x98
    3a96:	2300      	movs	r3, #0
    3a98:	9309      	str	r3, [sp, #36]	; 0x24
    3a9a:	e0ea      	b.n	3c72 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4aa>
    3a9c:	7f7fffff 	.word	0x7f7fffff
    3aa0:	1ffffffe 	.word	0x1ffffffe
    3aa4:	00009291 	.word	0x00009291
    3aa8:	00014641 	.word	0x00014641
    *activation_max = std::numeric_limits<T>::max();
    3aac:	497c      	ldr	r1, [pc, #496]	; (3ca0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4d8>)
    3aae:	9116      	str	r1, [sp, #88]	; 0x58
    *activation_min = 0;
    3ab0:	2100      	movs	r1, #0
    3ab2:	9115      	str	r1, [sp, #84]	; 0x54
    3ab4:	e69b      	b.n	37ee <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x26>
    *activation_max = 6;
    3ab6:	497b      	ldr	r1, [pc, #492]	; (3ca4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4dc>)
    3ab8:	9116      	str	r1, [sp, #88]	; 0x58
    *activation_min = 0;
    3aba:	2100      	movs	r1, #0
    3abc:	9115      	str	r1, [sp, #84]	; 0x54
    3abe:	e696      	b.n	37ee <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x26>
    *activation_max = 1;
    3ac0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    3ac4:	9116      	str	r1, [sp, #88]	; 0x58
    *activation_min = -1;
    3ac6:	4978      	ldr	r1, [pc, #480]	; (3ca8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e0>)
    3ac8:	9115      	str	r1, [sp, #84]	; 0x54
    3aca:	e690      	b.n	37ee <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x26>
  RuntimeShape() : size_(0) {}
    3acc:	2300      	movs	r3, #0
    3ace:	9332      	str	r3, [sp, #200]	; 0xc8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    3ad0:	9303      	str	r3, [sp, #12]
    3ad2:	e6b0      	b.n	3836 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x6e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3ad4:	a833      	add	r0, sp, #204	; 0xcc
    3ad6:	e6a8      	b.n	382a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x62>
  RuntimeShape() : size_(0) {}
    3ad8:	9338      	str	r3, [sp, #224]	; 0xe0
    3ada:	9325      	str	r3, [sp, #148]	; 0x94
    3adc:	e6c7      	b.n	386e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xa6>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3ade:	a839      	add	r0, sp, #228	; 0xe4
    3ae0:	e6be      	b.n	3860 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x98>
  RuntimeShape() : size_(0) {}
    3ae2:	933e      	str	r3, [sp, #248]	; 0xf8
    3ae4:	9317      	str	r3, [sp, #92]	; 0x5c
    3ae6:	e6de      	b.n	38a6 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xde>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3ae8:	a83f      	add	r0, sp, #252	; 0xfc
    3aea:	e6d5      	b.n	3898 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xd0>
  RuntimeShape() : size_(0) {}
    3aec:	2700      	movs	r7, #0
    3aee:	9744      	str	r7, [sp, #272]	; 0x110
    3af0:	e6f4      	b.n	38dc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x114>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3af2:	a845      	add	r0, sp, #276	; 0x114
    3af4:	e6ec      	b.n	38d0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x108>
  RuntimeShape() : size_(0) {}
    3af6:	934a      	str	r3, [sp, #296]	; 0x128
    3af8:	e708      	b.n	390c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x144>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    3afa:	a84b      	add	r0, sp, #300	; 0x12c
    3afc:	e702      	b.n	3904 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x13c>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    3afe:	4b6b      	ldr	r3, [pc, #428]	; (3cac <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3b00:	4798      	blx	r3
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    3b02:	4b6a      	ldr	r3, [pc, #424]	; (3cac <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3b04:	4798      	blx	r3
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    3b06:	4b69      	ldr	r3, [pc, #420]	; (3cac <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3b08:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    3b0a:	4b68      	ldr	r3, [pc, #416]	; (3cac <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3b0c:	4798      	blx	r3
    3b0e:	4b67      	ldr	r3, [pc, #412]	; (3cac <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3b10:	4798      	blx	r3
    3b12:	4b66      	ldr	r3, [pc, #408]	; (3cac <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3b14:	4798      	blx	r3
    int buffer_size = 1;
    3b16:	2201      	movs	r2, #1
    3b18:	e738      	b.n	398c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x1c4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    3b1a:	4b64      	ldr	r3, [pc, #400]	; (3cac <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3b1c:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    3b1e:	4b63      	ldr	r3, [pc, #396]	; (3cac <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3b20:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    3b22:	4b62      	ldr	r3, [pc, #392]	; (3cac <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3b24:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    3b26:	4b61      	ldr	r3, [pc, #388]	; (3cac <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3b28:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    3b2a:	4b60      	ldr	r3, [pc, #384]	; (3cac <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3b2c:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    3b2e:	4b5f      	ldr	r3, [pc, #380]	; (3cac <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3b30:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    3b32:	4b5e      	ldr	r3, [pc, #376]	; (3cac <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3b34:	4798      	blx	r3
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    3b36:	3401      	adds	r4, #1
    3b38:	455c      	cmp	r4, fp
    3b3a:	d032      	beq.n	3ba2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x3da>
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    3b3c:	2d00      	cmp	r5, #0
    3b3e:	dbfa      	blt.n	3b36 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x36e>
    3b40:	4555      	cmp	r5, sl
    3b42:	daf8      	bge.n	3b36 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x36e>
    3b44:	2e00      	cmp	r6, #0
    3b46:	dbf6      	blt.n	3b36 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x36e>
    3b48:	9b01      	ldr	r3, [sp, #4]
    3b4a:	429e      	cmp	r6, r3
    3b4c:	daf3      	bge.n	3b36 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x36e>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    3b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3b50:	2b00      	cmp	r3, #0
    3b52:	dbe4      	blt.n	3b1e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x356>
    3b54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3b56:	4293      	cmp	r3, r2
    3b58:	dae1      	bge.n	3b1e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x356>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    3b5a:	2c00      	cmp	r4, #0
    3b5c:	dbe1      	blt.n	3b22 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x35a>
    3b5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3b60:	42a3      	cmp	r3, r4
    3b62:	ddde      	ble.n	3b22 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x35a>
                      input_shape, batch, in_y, in_x, in_channel)];
    3b64:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    3b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3b6a:	2a00      	cmp	r2, #0
    3b6c:	dbdb      	blt.n	3b26 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x35e>
    3b6e:	990d      	ldr	r1, [sp, #52]	; 0x34
    3b70:	428a      	cmp	r2, r1
    3b72:	dad8      	bge.n	3b26 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x35e>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    3b74:	9a07      	ldr	r2, [sp, #28]
    3b76:	2a00      	cmp	r2, #0
    3b78:	dbd7      	blt.n	3b2a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x362>
    3b7a:	9908      	ldr	r1, [sp, #32]
    3b7c:	428a      	cmp	r2, r1
    3b7e:	dad4      	bge.n	3b2a <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x362>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    3b80:	2f00      	cmp	r7, #0
    3b82:	dbd4      	blt.n	3b2e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x366>
    3b84:	9a02      	ldr	r2, [sp, #8]
    3b86:	42ba      	cmp	r2, r7
    3b88:	ddd1      	ble.n	3b2e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x366>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    3b8a:	45a3      	cmp	fp, r4
    3b8c:	ddd1      	ble.n	3b32 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x36a>
                  total += (input_value * filter_value);
    3b8e:	f859 1024 	ldr.w	r1, [r9, r4, lsl #2]
    3b92:	4b47      	ldr	r3, [pc, #284]	; (3cb0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e8>)
    3b94:	4798      	blx	r3
    3b96:	4601      	mov	r1, r0
    3b98:	9803      	ldr	r0, [sp, #12]
    3b9a:	4b46      	ldr	r3, [pc, #280]	; (3cb4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4ec>)
    3b9c:	4798      	blx	r3
    3b9e:	9003      	str	r0, [sp, #12]
    3ba0:	e7c9      	b.n	3b36 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x36e>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    3ba2:	3701      	adds	r7, #1
    3ba4:	9b05      	ldr	r3, [sp, #20]
    3ba6:	441d      	add	r5, r3
    3ba8:	9b06      	ldr	r3, [sp, #24]
    3baa:	4499      	add	r9, r3
    3bac:	9b04      	ldr	r3, [sp, #16]
    3bae:	4498      	add	r8, r3
    3bb0:	9b02      	ldr	r3, [sp, #8]
    3bb2:	429f      	cmp	r7, r3
    3bb4:	d004      	beq.n	3bc0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x3f8>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    3bb6:	f1bb 0f00 	cmp.w	fp, #0
    3bba:	ddf2      	ble.n	3ba2 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x3da>
    3bbc:	2400      	movs	r4, #0
    3bbe:	e7bd      	b.n	3b3c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x374>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    3bc0:	9b07      	ldr	r3, [sp, #28]
    3bc2:	3301      	adds	r3, #1
    3bc4:	9307      	str	r3, [sp, #28]
    3bc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    3bc8:	9913      	ldr	r1, [sp, #76]	; 0x4c
    3bca:	440a      	add	r2, r1
    3bcc:	920f      	str	r2, [sp, #60]	; 0x3c
    3bce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3bd0:	9912      	ldr	r1, [sp, #72]	; 0x48
    3bd2:	440a      	add	r2, r1
    3bd4:	920e      	str	r2, [sp, #56]	; 0x38
    3bd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3bd8:	4416      	add	r6, r2
    3bda:	9a08      	ldr	r2, [sp, #32]
    3bdc:	4293      	cmp	r3, r2
    3bde:	d00b      	beq.n	3bf8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x430>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    3be0:	9b02      	ldr	r3, [sp, #8]
    3be2:	2b00      	cmp	r3, #0
    3be4:	ddec      	ble.n	3bc0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x3f8>
    3be6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    3bea:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    3bee:	9d10      	ldr	r5, [sp, #64]	; 0x40
    3bf0:	2700      	movs	r7, #0
    3bf2:	e7e0      	b.n	3bb6 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x3ee>
          float total = 0.f;
    3bf4:	2300      	movs	r3, #0
    3bf6:	9303      	str	r3, [sp, #12]
          if (bias_data) {
    3bf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    3bfa:	2b00      	cmp	r3, #0
    3bfc:	d046      	beq.n	3c8c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4c4>
            bias_value = bias_data[out_channel];
    3bfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3c00:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    3c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3c06:	2b00      	cmp	r3, #0
    3c08:	db42      	blt.n	3c90 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4c8>
    3c0a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    3c0c:	4293      	cmp	r3, r2
    3c0e:	da3f      	bge.n	3c90 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4c8>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    3c10:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    3c12:	2b00      	cmp	r3, #0
    3c14:	db3e      	blt.n	3c94 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4cc>
    3c16:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    3c18:	4293      	cmp	r3, r2
    3c1a:	da3b      	bge.n	3c94 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4cc>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    3c1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    3c1e:	2b00      	cmp	r3, #0
    3c20:	db3a      	blt.n	3c98 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4d0>
    3c22:	9a21      	ldr	r2, [sp, #132]	; 0x84
    3c24:	4293      	cmp	r3, r2
    3c26:	da37      	bge.n	3c98 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4d0>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    3c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3c2a:	2b00      	cmp	r3, #0
    3c2c:	db36      	blt.n	3c9c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4d4>
    3c2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    3c30:	429a      	cmp	r2, r3
    3c32:	dd33      	ble.n	3c9c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4d4>
              ActivationFunctionWithMinMax(total + bias_value,
    3c34:	9903      	ldr	r1, [sp, #12]
    3c36:	4b1f      	ldr	r3, [pc, #124]	; (3cb4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4ec>)
    3c38:	4798      	blx	r3
    3c3a:	4604      	mov	r4, r0
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    3c3c:	9d15      	ldr	r5, [sp, #84]	; 0x54
    3c3e:	4629      	mov	r1, r5
    3c40:	4b1d      	ldr	r3, [pc, #116]	; (3cb8 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4f0>)
    3c42:	4798      	blx	r3
    3c44:	b100      	cbz	r0, 3c48 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x480>
	return __b;
    3c46:	462c      	mov	r4, r5
      if (__b < __a)
    3c48:	9d16      	ldr	r5, [sp, #88]	; 0x58
    3c4a:	4629      	mov	r1, r5
    3c4c:	4620      	mov	r0, r4
    3c4e:	4b1b      	ldr	r3, [pc, #108]	; (3cbc <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4f4>)
    3c50:	4798      	blx	r3
    3c52:	b100      	cbz	r0, 3c56 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x48e>
	return __b;
    3c54:	462c      	mov	r4, r5
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    3c56:	9b26      	ldr	r3, [sp, #152]	; 0x98
    3c58:	f843 4b04 	str.w	r4, [r3], #4
    3c5c:	9326      	str	r3, [sp, #152]	; 0x98
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    3c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3c60:	3301      	adds	r3, #1
    3c62:	9309      	str	r3, [sp, #36]	; 0x24
    3c64:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    3c66:	9927      	ldr	r1, [sp, #156]	; 0x9c
    3c68:	440a      	add	r2, r1
    3c6a:	921f      	str	r2, [sp, #124]	; 0x7c
    3c6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    3c6e:	4293      	cmp	r3, r2
    3c70:	d026      	beq.n	3cc0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4f8>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    3c72:	9b08      	ldr	r3, [sp, #32]
    3c74:	2b00      	cmp	r3, #0
    3c76:	ddbd      	ble.n	3bf4 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x42c>
    3c78:	9e19      	ldr	r6, [sp, #100]	; 0x64
    3c7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    3c7c:	930e      	str	r3, [sp, #56]	; 0x38
    3c7e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    3c80:	930f      	str	r3, [sp, #60]	; 0x3c
    3c82:	2300      	movs	r3, #0
    3c84:	9307      	str	r3, [sp, #28]
    3c86:	2300      	movs	r3, #0
    3c88:	9303      	str	r3, [sp, #12]
    3c8a:	e7a9      	b.n	3be0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x418>
          float bias_value = 0.0f;
    3c8c:	2000      	movs	r0, #0
    3c8e:	e7b9      	b.n	3c04 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x43c>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    3c90:	4b06      	ldr	r3, [pc, #24]	; (3cac <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3c92:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    3c94:	4b05      	ldr	r3, [pc, #20]	; (3cac <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3c96:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    3c98:	4b04      	ldr	r3, [pc, #16]	; (3cac <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3c9a:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    3c9c:	4b03      	ldr	r3, [pc, #12]	; (3cac <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x4e4>)
    3c9e:	4798      	blx	r3
    3ca0:	7f7fffff 	.word	0x7f7fffff
    3ca4:	40c00000 	.word	0x40c00000
    3ca8:	bf800000 	.word	0xbf800000
    3cac:	000138bd 	.word	0x000138bd
    3cb0:	00012261 	.word	0x00012261
    3cb4:	00012051 	.word	0x00012051
    3cb8:	0001259d 	.word	0x0001259d
    3cbc:	000125d9 	.word	0x000125d9
      for (int out_x = 0; out_x < output_width; ++out_x) {
    3cc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    3cc2:	3301      	adds	r3, #1
    3cc4:	931b      	str	r3, [sp, #108]	; 0x6c
    3cc6:	9a22      	ldr	r2, [sp, #136]	; 0x88
    3cc8:	992f      	ldr	r1, [sp, #188]	; 0xbc
    3cca:	440a      	add	r2, r1
    3ccc:	9222      	str	r2, [sp, #136]	; 0x88
    3cce:	9a24      	ldr	r2, [sp, #144]	; 0x90
    3cd0:	9931      	ldr	r1, [sp, #196]	; 0xc4
    3cd2:	440a      	add	r2, r1
    3cd4:	9224      	str	r2, [sp, #144]	; 0x90
    3cd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3cd8:	9930      	ldr	r1, [sp, #192]	; 0xc0
    3cda:	440a      	add	r2, r1
    3cdc:	9210      	str	r2, [sp, #64]	; 0x40
    3cde:	9a21      	ldr	r2, [sp, #132]	; 0x84
    3ce0:	4293      	cmp	r3, r2
    3ce2:	f47f aed0 	bne.w	3a86 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2be>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    3ce6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    3ce8:	3301      	adds	r3, #1
    3cea:	931c      	str	r3, [sp, #112]	; 0x70
    3cec:	9a18      	ldr	r2, [sp, #96]	; 0x60
    3cee:	992c      	ldr	r1, [sp, #176]	; 0xb0
    3cf0:	440a      	add	r2, r1
    3cf2:	9218      	str	r2, [sp, #96]	; 0x60
    3cf4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    3cf6:	992d      	ldr	r1, [sp, #180]	; 0xb4
    3cf8:	440a      	add	r2, r1
    3cfa:	921d      	str	r2, [sp, #116]	; 0x74
    3cfc:	9a19      	ldr	r2, [sp, #100]	; 0x64
    3cfe:	9929      	ldr	r1, [sp, #164]	; 0xa4
    3d00:	440a      	add	r2, r1
    3d02:	9219      	str	r2, [sp, #100]	; 0x64
    3d04:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    3d06:	4293      	cmp	r3, r2
    3d08:	f47f aeb1 	bne.w	3a6e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2a6>
  for (int batch = 0; batch < batches; ++batch) {
    3d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3d0e:	3301      	adds	r3, #1
    3d10:	930a      	str	r3, [sp, #40]	; 0x28
    3d12:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    3d14:	992e      	ldr	r1, [sp, #184]	; 0xb8
    3d16:	440a      	add	r2, r1
    3d18:	921a      	str	r2, [sp, #104]	; 0x68
    3d1a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    3d1c:	992a      	ldr	r1, [sp, #168]	; 0xa8
    3d1e:	440a      	add	r2, r1
    3d20:	9220      	str	r2, [sp, #128]	; 0x80
    3d22:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    3d24:	4293      	cmp	r3, r2
    3d26:	f47f ae96 	bne.w	3a56 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x28e>
    if (size_ > kMaxSmallSize) {
    3d2a:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    3d2c:	2b05      	cmp	r3, #5
    3d2e:	dd03      	ble.n	3d38 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x570>
      delete[] dims_pointer_;
    3d30:	984b      	ldr	r0, [sp, #300]	; 0x12c
    3d32:	b108      	cbz	r0, 3d38 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x570>
    3d34:	4b05      	ldr	r3, [pc, #20]	; (3d4c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x584>)
    3d36:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    3d38:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    3d3a:	2b05      	cmp	r3, #5
    3d3c:	dd03      	ble.n	3d46 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x57e>
      delete[] dims_pointer_;
    3d3e:	983f      	ldr	r0, [sp, #252]	; 0xfc
    3d40:	b108      	cbz	r0, 3d46 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x57e>
    3d42:	4b02      	ldr	r3, [pc, #8]	; (3d4c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x584>)
    3d44:	4798      	blx	r3
                      GetTensorData<float>(input), GetTensorShape(filter),
                      GetTensorData<float>(filter), GetTensorShape(bias),
                      GetTensorData<float>(bias), GetTensorShape(output),
                      GetTensorData<float>(output), GetTensorShape(im2col),
                      GetTensorData<float>(im2col));
}
    3d46:	b051      	add	sp, #324	; 0x144
    3d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d4c:	000091e1 	.word	0x000091e1

00003d50 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    3d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d54:	b086      	sub	sp, #24
    3d56:	4606      	mov	r6, r0
  auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);
    3d58:	694a      	ldr	r2, [r1, #20]
  return &context->tensors[node->outputs->data[index]];
    3d5a:	6884      	ldr	r4, [r0, #8]
    3d5c:	684b      	ldr	r3, [r1, #4]
    3d5e:	685f      	ldr	r7, [r3, #4]
    3d60:	eb04 1787 	add.w	r7, r4, r7, lsl #6
  return &context->tensors[node->inputs->data[index]];
    3d64:	680b      	ldr	r3, [r1, #0]
    3d66:	685d      	ldr	r5, [r3, #4]
    3d68:	01ad      	lsls	r5, r5, #6
    3d6a:	eb04 0e05 	add.w	lr, r4, r5
    3d6e:	6898      	ldr	r0, [r3, #8]
    3d70:	eb04 1c80 	add.w	ip, r4, r0, lsl #6
  const bool use_tensor = index < node->inputs->size &&
    3d74:	6818      	ldr	r0, [r3, #0]
    3d76:	2802      	cmp	r0, #2
    3d78:	dd09      	ble.n	3d8e <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3e>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    3d7a:	68db      	ldr	r3, [r3, #12]
  const bool use_tensor = index < node->inputs->size &&
    3d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3d80:	d002      	beq.n	3d88 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x38>
    return &context->tensors[node->inputs->data[index]];
    3d82:	eb04 1883 	add.w	r8, r4, r3, lsl #6
    3d86:	e004      	b.n	3d92 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x42>
  return nullptr;
    3d88:	f04f 0800 	mov.w	r8, #0
    3d8c:	e001      	b.n	3d92 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x42>
    3d8e:	f04f 0800 	mov.w	r8, #0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
    3d92:	690b      	ldr	r3, [r1, #16]
    3d94:	b183      	cbz	r3, 3db8 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x68>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  switch (input->type) {  // Already know in/out types are same.
    3d96:	5d60      	ldrb	r0, [r4, r5]
    3d98:	2803      	cmp	r0, #3
    3d9a:	d02e      	beq.n	3dfa <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xaa>
    3d9c:	2809      	cmp	r0, #9
    3d9e:	d01e      	beq.n	3dde <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x8e>
    3da0:	2801      	cmp	r0, #1
    3da2:	d00b      	beq.n	3dbc <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x6c>
    case kTfLiteUInt8:
      EvalQuantized(context, node, params, data, input, filter, bias, nullptr,
                    nullptr, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    3da4:	6977      	ldr	r7, [r6, #20]
    3da6:	4b1c      	ldr	r3, [pc, #112]	; (3e18 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xc8>)
    3da8:	4798      	blx	r3
    3daa:	5d63      	ldrb	r3, [r4, r5]
    3dac:	4602      	mov	r2, r0
    3dae:	491b      	ldr	r1, [pc, #108]	; (3e1c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xcc>)
    3db0:	4630      	mov	r0, r6
    3db2:	47b8      	blx	r7
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    3db4:	2001      	movs	r0, #1
    3db6:	e00f      	b.n	3dd8 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x88>
  TFLITE_DCHECK(node->user_data != nullptr);
    3db8:	4b19      	ldr	r3, [pc, #100]	; (3e20 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xd0>)
    3dba:	4798      	blx	r3
                nullptr, output);
    3dbc:	9705      	str	r7, [sp, #20]
    3dbe:	2400      	movs	r4, #0
    3dc0:	9404      	str	r4, [sp, #16]
    3dc2:	9403      	str	r4, [sp, #12]
    3dc4:	f8cd 8008 	str.w	r8, [sp, #8]
    3dc8:	f8cd c004 	str.w	ip, [sp, #4]
    3dcc:	f8cd e000 	str.w	lr, [sp]
    3dd0:	4630      	mov	r0, r6
    3dd2:	4d14      	ldr	r5, [pc, #80]	; (3e24 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xd4>)
    3dd4:	47a8      	blx	r5
  }
  return kTfLiteOk;
    3dd6:	4620      	mov	r0, r4
}
    3dd8:	b006      	add	sp, #24
    3dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                              output, nullptr);
    3dde:	2400      	movs	r4, #0
    3de0:	9404      	str	r4, [sp, #16]
    3de2:	9703      	str	r7, [sp, #12]
    3de4:	f8cd 8008 	str.w	r8, [sp, #8]
    3de8:	f8cd c004 	str.w	ip, [sp, #4]
    3dec:	f8cd e000 	str.w	lr, [sp]
    3df0:	4630      	mov	r0, r6
    3df2:	4d0d      	ldr	r5, [pc, #52]	; (3e28 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xd8>)
    3df4:	47a8      	blx	r5
  return kTfLiteOk;
    3df6:	4620      	mov	r0, r4
      break;
    3df8:	e7ee      	b.n	3dd8 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x88>
                    nullptr, output);
    3dfa:	9705      	str	r7, [sp, #20]
    3dfc:	2400      	movs	r4, #0
    3dfe:	9404      	str	r4, [sp, #16]
    3e00:	9403      	str	r4, [sp, #12]
    3e02:	f8cd 8008 	str.w	r8, [sp, #8]
    3e06:	f8cd c004 	str.w	ip, [sp, #4]
    3e0a:	f8cd e000 	str.w	lr, [sp]
    3e0e:	4630      	mov	r0, r6
    3e10:	4d06      	ldr	r5, [pc, #24]	; (3e2c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xdc>)
    3e12:	47a8      	blx	r5
  return kTfLiteOk;
    3e14:	4620      	mov	r0, r4
      break;
    3e16:	e7df      	b.n	3dd8 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    3e18:	00009145 	.word	0x00009145
    3e1c:	00020ddc 	.word	0x00020ddc
    3e20:	000138bd 	.word	0x000138bd
    3e24:	000037c9 	.word	0x000037c9
    3e28:	000031cd 	.word	0x000031cd
    3e2c:	00002b79 	.word	0x00002b79

00003e30 <_ZN6tflite3ops5micro16Register_CONV_2DEv>:

}  // namespace conv

TfLiteRegistration Register_CONV_2D() {
    3e30:	b470      	push	{r4, r5, r6}
    3e32:	4606      	mov	r6, r0
          /*prepare=*/conv::Prepare,
          /*invoke=*/conv::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    3e34:	4604      	mov	r4, r0
    3e36:	4d05      	ldr	r5, [pc, #20]	; (3e4c <_ZN6tflite3ops5micro16Register_CONV_2DEv+0x1c>)
    3e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3e3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3e40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    3e44:	4630      	mov	r0, r6
    3e46:	bc70      	pop	{r4, r5, r6}
    3e48:	4770      	bx	lr
    3e4a:	bf00      	nop
    3e4c:	00020c44 	.word	0x00020c44

00003e50 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:
  return status;
}

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
    3e50:	b500      	push	{lr}
    3e52:	b083      	sub	sp, #12
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    3e54:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3e56:	b163      	cbz	r3, 3e72 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x22>
  void* data = nullptr;
    3e58:	aa02      	add	r2, sp, #8
    3e5a:	2100      	movs	r1, #0
    3e5c:	f842 1d04 	str.w	r1, [r2, #-4]!
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
    3e60:	2114      	movs	r1, #20
    3e62:	4798      	blx	r3
    3e64:	2801      	cmp	r0, #1
      kTfLiteError) {
    return nullptr;
  }
  return data;
    3e66:	bf14      	ite	ne
    3e68:	9801      	ldrne	r0, [sp, #4]
    return nullptr;
    3e6a:	2000      	moveq	r0, #0
}
    3e6c:	b003      	add	sp, #12
    3e6e:	f85d fb04 	ldr.w	pc, [sp], #4
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    3e72:	4b01      	ldr	r3, [pc, #4]	; (3e78 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x28>)
    3e74:	4798      	blx	r3
    3e76:	bf00      	nop
    3e78:	000138bd 	.word	0x000138bd

00003e7c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    3e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3e80:	b089      	sub	sp, #36	; 0x24
  TFLITE_DCHECK(node->user_data != nullptr);
    3e82:	f8d1 8010 	ldr.w	r8, [r1, #16]
    3e86:	f1b8 0f00 	cmp.w	r8, #0
    3e8a:	d015      	beq.n	3eb8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x3c>
    3e8c:	4607      	mov	r7, r0
  TFLITE_DCHECK(node->builtin_data != nullptr);
    3e8e:	f8d1 c014 	ldr.w	ip, [r1, #20]
    3e92:	f1bc 0f00 	cmp.w	ip, #0
    3e96:	d011      	beq.n	3ebc <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x40>
  return &context->tensors[node->inputs->data[index]];
    3e98:	6884      	ldr	r4, [r0, #8]
    3e9a:	680e      	ldr	r6, [r1, #0]
    3e9c:	6872      	ldr	r2, [r6, #4]
    3e9e:	0192      	lsls	r2, r2, #6
    3ea0:	eb04 0e02 	add.w	lr, r4, r2
  const bool use_tensor = index < node->inputs->size &&
    3ea4:	6833      	ldr	r3, [r6, #0]
    3ea6:	2b02      	cmp	r3, #2
    3ea8:	dd0c      	ble.n	3ec4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    3eaa:	68f3      	ldr	r3, [r6, #12]
  const bool use_tensor = index < node->inputs->size &&
    3eac:	f1b3 3fff 	cmp.w	r3, #4294967295
    3eb0:	d006      	beq.n	3ec0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x44>
    return &context->tensors[node->inputs->data[index]];
    3eb2:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    3eb6:	e006      	b.n	3ec6 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  TFLITE_DCHECK(node->user_data != nullptr);
    3eb8:	4b2d      	ldr	r3, [pc, #180]	; (3f70 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
    3eba:	4798      	blx	r3
  TFLITE_DCHECK(node->builtin_data != nullptr);
    3ebc:	4b2c      	ldr	r3, [pc, #176]	; (3f70 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
    3ebe:	4798      	blx	r3
  return nullptr;
    3ec0:	2300      	movs	r3, #0
    3ec2:	e000      	b.n	3ec6 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    3ec4:	2300      	movs	r3, #0
  return &context->tensors[node->outputs->data[index]];
    3ec6:	6849      	ldr	r1, [r1, #4]
    3ec8:	684d      	ldr	r5, [r1, #4]
    3eca:	01ad      	lsls	r5, r5, #6
    3ecc:	eb04 0905 	add.w	r9, r4, r5
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    3ed0:	5ca0      	ldrb	r0, [r4, r2]
    3ed2:	5d62      	ldrb	r2, [r4, r5]
    3ed4:	4282      	cmp	r2, r0
    3ed6:	d10b      	bne.n	3ef0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x74>
  return &context->tensors[node->inputs->data[index]];
    3ed8:	68b5      	ldr	r5, [r6, #8]
    3eda:	01ad      	lsls	r5, r5, #6
    3edc:	1962      	adds	r2, r4, r5
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
    3ede:	5d61      	ldrb	r1, [r4, r5]
    3ee0:	4281      	cmp	r1, r0
    3ee2:	d01c      	beq.n	3f1e <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa2>
    3ee4:	697b      	ldr	r3, [r7, #20]
    3ee6:	4923      	ldr	r1, [pc, #140]	; (3f74 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
    3ee8:	4638      	mov	r0, r7
    3eea:	4798      	blx	r3
    3eec:	2001      	movs	r0, #1
    3eee:	e013      	b.n	3f18 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x9c>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    3ef0:	f8d7 8014 	ldr.w	r8, [r7, #20]
    3ef4:	4e20      	ldr	r6, [pc, #128]	; (3f78 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
    3ef6:	47b0      	blx	r6
    3ef8:	4681      	mov	r9, r0
    3efa:	5d60      	ldrb	r0, [r4, r5]
    3efc:	47b0      	blx	r6
    3efe:	9003      	str	r0, [sp, #12]
    3f00:	f8cd 9008 	str.w	r9, [sp, #8]
    3f04:	4b1d      	ldr	r3, [pc, #116]	; (3f7c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
    3f06:	9301      	str	r3, [sp, #4]
    3f08:	4b1d      	ldr	r3, [pc, #116]	; (3f80 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
    3f0a:	9300      	str	r3, [sp, #0]
    3f0c:	2360      	movs	r3, #96	; 0x60
    3f0e:	4a1d      	ldr	r2, [pc, #116]	; (3f84 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
    3f10:	491d      	ldr	r1, [pc, #116]	; (3f88 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    3f12:	4638      	mov	r0, r7
    3f14:	47c0      	blx	r8
    3f16:	2001      	movs	r0, #1
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpData(context, params->activation, input->type, input,
                         filter, bias, output, data);
}
    3f18:	b009      	add	sp, #36	; 0x24
    3f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (data_type != kTfLiteFloat32) {
    3f1e:	2801      	cmp	r0, #1
    3f20:	d024      	beq.n	3f6c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>
  return CalculateOpData(context, params->activation, input->type, input,
    3f22:	f89c 4000 	ldrb.w	r4, [ip]
    double real_multiplier = 0.0;
    3f26:	ad08      	add	r5, sp, #32
    3f28:	2000      	movs	r0, #0
    3f2a:	2100      	movs	r1, #0
    3f2c:	e965 0102 	strd	r0, r1, [r5, #-8]!
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    3f30:	9501      	str	r5, [sp, #4]
    3f32:	f8cd 9000 	str.w	r9, [sp]
    3f36:	4671      	mov	r1, lr
    3f38:	4638      	mov	r0, r7
    3f3a:	4d14      	ldr	r5, [pc, #80]	; (3f8c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    3f3c:	47a8      	blx	r5
    3f3e:	2800      	cmp	r0, #0
    3f40:	d1ea      	bne.n	3f18 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x9c>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
    3f42:	ab05      	add	r3, sp, #20
    3f44:	4642      	mov	r2, r8
    3f46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    3f4a:	4d11      	ldr	r5, [pc, #68]	; (3f90 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x114>)
    3f4c:	47a8      	blx	r5
    data->output_shift = -exponent;
    3f4e:	9b05      	ldr	r3, [sp, #20]
    3f50:	425b      	negs	r3, r3
    3f52:	f8c8 3004 	str.w	r3, [r8, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    3f56:	f108 030c 	add.w	r3, r8, #12
    3f5a:	9300      	str	r3, [sp, #0]
    3f5c:	f108 0308 	add.w	r3, r8, #8
    3f60:	464a      	mov	r2, r9
    3f62:	4621      	mov	r1, r4
    3f64:	4638      	mov	r0, r7
    3f66:	4c0b      	ldr	r4, [pc, #44]	; (3f94 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x118>)
    3f68:	47a0      	blx	r4
    3f6a:	e7d5      	b.n	3f18 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x9c>
  return status;
    3f6c:	2000      	movs	r0, #0
    3f6e:	e7d3      	b.n	3f18 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x9c>
    3f70:	000138bd 	.word	0x000138bd
    3f74:	00020ee4 	.word	0x00020ee4
    3f78:	00009145 	.word	0x00009145
    3f7c:	00020ec8 	.word	0x00020ec8
    3f80:	00020ed8 	.word	0x00020ed8
    3f84:	00020e74 	.word	0x00020e74
    3f88:	00020eac 	.word	0x00020eac
    3f8c:	00001a79 	.word	0x00001a79
    3f90:	0000180d 	.word	0x0000180d
    3f94:	00001b35 	.word	0x00001b35

00003f98 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>:
}

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
    3f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f9c:	b0a9      	sub	sp, #164	; 0xa4
    3f9e:	461c      	mov	r4, r3
    3fa0:	9d32      	ldr	r5, [sp, #200]	; 0xc8
    3fa2:	9f33      	ldr	r7, [sp, #204]	; 0xcc
    3fa4:	9e34      	ldr	r6, [sp, #208]	; 0xd0
  if (activation == kTfLiteActRelu) {
    3fa6:	2a01      	cmp	r2, #1
    3fa8:	f000 80d5 	beq.w	4156 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1be>
  } else if (activation == kTfLiteActRelu6) {
    3fac:	2a03      	cmp	r2, #3
    3fae:	f000 80d7 	beq.w	4160 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1c8>
  } else if (activation == kTfLiteActReluN1To1) {
    3fb2:	2a02      	cmp	r2, #2
    3fb4:	f000 80d9 	beq.w	416a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1d2>
    *activation_max = std::numeric_limits<T>::max();
    3fb8:	4b88      	ldr	r3, [pc, #544]	; (41dc <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x244>)
    3fba:	9305      	str	r3, [sp, #20]
    *activation_min = std::numeric_limits<T>::lowest();
    3fbc:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    3fc0:	9304      	str	r3, [sp, #16]
  if (tensor == nullptr) {
    3fc2:	2c00      	cmp	r4, #0
    3fc4:	f000 80d7 	beq.w	4176 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1de>
  const int dims_size = dims->size;
    3fc8:	f8d4 9008 	ldr.w	r9, [r4, #8]
    3fcc:	f859 8b04 	ldr.w	r8, [r9], #4
    size_ = dimensions_count;
    3fd0:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    if (dimensions_count > kMaxSmallSize) {
    3fd4:	f1b8 0f05 	cmp.w	r8, #5
    3fd8:	f340 80cf 	ble.w	417a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1e2>
      dims_pointer_ = new int32[dimensions_count];
    3fdc:	4b80      	ldr	r3, [pc, #512]	; (41e0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x248>)
    3fde:	4598      	cmp	r8, r3
    3fe0:	bf94      	ite	ls
    3fe2:	ea4f 0088 	movls.w	r0, r8, lsl #2
    3fe6:	f04f 30ff 	movhi.w	r0, #4294967295
    3fea:	4b7e      	ldr	r3, [pc, #504]	; (41e4 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x24c>)
    3fec:	4798      	blx	r3
    3fee:	9011      	str	r0, [sp, #68]	; 0x44
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    3ff0:	ea4f 0288 	mov.w	r2, r8, lsl #2
    3ff4:	4649      	mov	r1, r9
    3ff6:	4b7c      	ldr	r3, [pc, #496]	; (41e8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x250>)
    3ff8:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    3ffa:	6864      	ldr	r4, [r4, #4]
  if (tensor == nullptr) {
    3ffc:	2d00      	cmp	r5, #0
    3ffe:	f000 80be 	beq.w	417e <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1e6>
  const int dims_size = dims->size;
    4002:	f8d5 9008 	ldr.w	r9, [r5, #8]
    4006:	f859 8b04 	ldr.w	r8, [r9], #4
    size_ = dimensions_count;
    400a:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
    if (dimensions_count > kMaxSmallSize) {
    400e:	f1b8 0f05 	cmp.w	r8, #5
    4012:	f340 80b8 	ble.w	4186 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1ee>
      dims_pointer_ = new int32[dimensions_count];
    4016:	4b72      	ldr	r3, [pc, #456]	; (41e0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x248>)
    4018:	4598      	cmp	r8, r3
    401a:	bf94      	ite	ls
    401c:	ea4f 0088 	movls.w	r0, r8, lsl #2
    4020:	f04f 30ff 	movhi.w	r0, #4294967295
    4024:	4b6f      	ldr	r3, [pc, #444]	; (41e4 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x24c>)
    4026:	4798      	blx	r3
    4028:	9017      	str	r0, [sp, #92]	; 0x5c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    402a:	ea4f 0288 	mov.w	r2, r8, lsl #2
    402e:	4649      	mov	r1, r9
    4030:	4b6d      	ldr	r3, [pc, #436]	; (41e8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x250>)
    4032:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    4034:	686b      	ldr	r3, [r5, #4]
    4036:	930c      	str	r3, [sp, #48]	; 0x30
  if (tensor == nullptr) {
    4038:	2f00      	cmp	r7, #0
    403a:	f000 80a6 	beq.w	418a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1f2>
  const int dims_size = dims->size;
    403e:	f8d7 8008 	ldr.w	r8, [r7, #8]
    4042:	f858 5b04 	ldr.w	r5, [r8], #4
    size_ = dimensions_count;
    4046:	951c      	str	r5, [sp, #112]	; 0x70
    if (dimensions_count > kMaxSmallSize) {
    4048:	2d05      	cmp	r5, #5
    404a:	f340 80a2 	ble.w	4192 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1fa>
      dims_pointer_ = new int32[dimensions_count];
    404e:	4b64      	ldr	r3, [pc, #400]	; (41e0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x248>)
    4050:	429d      	cmp	r5, r3
    4052:	bf94      	ite	ls
    4054:	00a8      	lslls	r0, r5, #2
    4056:	f04f 30ff 	movhi.w	r0, #4294967295
    405a:	4b62      	ldr	r3, [pc, #392]	; (41e4 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x24c>)
    405c:	4798      	blx	r3
    405e:	901d      	str	r0, [sp, #116]	; 0x74
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4060:	00aa      	lsls	r2, r5, #2
    4062:	4641      	mov	r1, r8
    4064:	4b60      	ldr	r3, [pc, #384]	; (41e8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x250>)
    4066:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    4068:	687b      	ldr	r3, [r7, #4]
    406a:	9303      	str	r3, [sp, #12]
  if (tensor == nullptr) {
    406c:	2e00      	cmp	r6, #0
    406e:	f000 8094 	beq.w	419a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x202>
  const int dims_size = dims->size;
    4072:	68b7      	ldr	r7, [r6, #8]
    4074:	f857 5b04 	ldr.w	r5, [r7], #4
    size_ = dimensions_count;
    4078:	9522      	str	r5, [sp, #136]	; 0x88
    if (dimensions_count > kMaxSmallSize) {
    407a:	2d05      	cmp	r5, #5
    407c:	f340 808b 	ble.w	4196 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x1fe>
      dims_pointer_ = new int32[dimensions_count];
    4080:	4b57      	ldr	r3, [pc, #348]	; (41e0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x248>)
    4082:	429d      	cmp	r5, r3
    4084:	bf94      	ite	ls
    4086:	00a8      	lslls	r0, r5, #2
    4088:	f04f 30ff 	movhi.w	r0, #4294967295
    408c:	4b55      	ldr	r3, [pc, #340]	; (41e4 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x24c>)
    408e:	4798      	blx	r3
    4090:	9023      	str	r0, [sp, #140]	; 0x8c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4092:	00aa      	lsls	r2, r5, #2
    4094:	4639      	mov	r1, r7
    4096:	4b54      	ldr	r3, [pc, #336]	; (41e8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x250>)
    4098:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    409a:	6875      	ldr	r5, [r6, #4]
  inline int32 DimensionsCount() const { return size_; }
    409c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    409e:	930f      	str	r3, [sp, #60]	; 0x3c
    40a0:	9a16      	ldr	r2, [sp, #88]	; 0x58
    40a2:	920e      	str	r2, [sp, #56]	; 0x38
// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
  const int dims_count = shape.DimensionsCount();
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    40a4:	1e59      	subs	r1, r3, #1
    40a6:	d478      	bmi.n	419a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x202>
    40a8:	428b      	cmp	r3, r1
    40aa:	dd76      	ble.n	419a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x202>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    40ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    40ae:	2b05      	cmp	r3, #5
    40b0:	bfcc      	ite	gt
    40b2:	9823      	ldrgt	r0, [sp, #140]	; 0x8c
    40b4:	a823      	addle	r0, sp, #140	; 0x8c
  const auto* dims_data = shape.DimsData();
  int flat_size = 1;
  for (int i = 0; i < dims_count; ++i) {
    40b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    40b8:	2a00      	cmp	r2, #0
    40ba:	dd70      	ble.n	419e <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x206>
    40bc:	2301      	movs	r3, #1
    40be:	461f      	mov	r7, r3
    40c0:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    40c2:	463e      	mov	r6, r7
    40c4:	4696      	mov	lr, r2
    40c6:	4299      	cmp	r1, r3
    40c8:	bf14      	ite	ne
    40ca:	f850 2023 	ldrne.w	r2, [r0, r3, lsl #2]
    40ce:	4632      	moveq	r2, r6
    40d0:	fb02 f707 	mul.w	r7, r2, r7
  for (int i = 0; i < dims_count; ++i) {
    40d4:	3301      	adds	r3, #1
    40d6:	459e      	cmp	lr, r3
    40d8:	d1f5      	bne.n	40c6 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x12e>
    40da:	970b      	str	r7, [sp, #44]	; 0x2c
    TFLITE_DCHECK_GE(i, 0);
    40dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    40de:	3b02      	subs	r3, #2
    40e0:	d460      	bmi.n	41a4 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x20c>
    TFLITE_DCHECK_LT(i, size_);
    40e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    40e4:	429a      	cmp	r2, r3
    40e6:	dd5f      	ble.n	41a8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x210>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    40e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    40ea:	2a05      	cmp	r2, #5
    40ec:	dc5e      	bgt.n	41ac <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x214>
    40ee:	aa28      	add	r2, sp, #160	; 0xa0
    40f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    40f4:	f853 3c44 	ldr.w	r3, [r3, #-68]
    40f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    40fa:	2a05      	cmp	r2, #5
    40fc:	dc5a      	bgt.n	41b4 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x21c>
    40fe:	aa28      	add	r2, sp, #160	; 0xa0
    4100:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4104:	f851 2c14 	ldr.w	r2, [r1, #-20]
    4108:	920a      	str	r2, [sp, #40]	; 0x28
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    410a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    410c:	429a      	cmp	r2, r3
    410e:	d156      	bne.n	41be <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x226>
    TFLITE_DCHECK_GE(i, 0);
    4110:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4112:	3b01      	subs	r3, #1
    4114:	d455      	bmi.n	41c2 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x22a>
    TFLITE_DCHECK_LT(i, size_);
    4116:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4118:	429a      	cmp	r2, r3
    411a:	dd54      	ble.n	41c6 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x22e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    411c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    411e:	2a05      	cmp	r2, #5
    4120:	dc53      	bgt.n	41ca <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x232>
    4122:	aa28      	add	r2, sp, #160	; 0xa0
    4124:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4128:	f853 3c44 	ldr.w	r3, [r3, #-68]
    412c:	9306      	str	r3, [sp, #24]
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
  for (int b = 0; b < batches; ++b) {
    412e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4130:	2b00      	cmp	r3, #0
    4132:	f340 80b4 	ble.w	429e <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x306>
    4136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4138:	009b      	lsls	r3, r3, #2
    413a:	930d      	str	r3, [sp, #52]	; 0x34
    413c:	9508      	str	r5, [sp, #32]
    413e:	9a06      	ldr	r2, [sp, #24]
    4140:	0092      	lsls	r2, r2, #2
    4142:	9201      	str	r2, [sp, #4]
    4144:	9402      	str	r4, [sp, #8]
    4146:	9a03      	ldr	r2, [sp, #12]
    4148:	18d3      	adds	r3, r2, r3
    414a:	9307      	str	r3, [sp, #28]
    414c:	2300      	movs	r3, #0
    414e:	9309      	str	r3, [sp, #36]	; 0x24
    for (int out_c = 0; out_c < output_depth; ++out_c) {
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
    4150:	4d26      	ldr	r5, [pc, #152]	; (41ec <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x254>)
    4152:	4f27      	ldr	r7, [pc, #156]	; (41f0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x258>)
    4154:	e095      	b.n	4282 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2ea>
    *activation_max = std::numeric_limits<T>::max();
    4156:	4b21      	ldr	r3, [pc, #132]	; (41dc <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x244>)
    4158:	9305      	str	r3, [sp, #20]
    *activation_min = 0;
    415a:	2300      	movs	r3, #0
    415c:	9304      	str	r3, [sp, #16]
    415e:	e730      	b.n	3fc2 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2a>
    *activation_max = 6;
    4160:	4b24      	ldr	r3, [pc, #144]	; (41f4 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x25c>)
    4162:	9305      	str	r3, [sp, #20]
    *activation_min = 0;
    4164:	2300      	movs	r3, #0
    4166:	9304      	str	r3, [sp, #16]
    4168:	e72b      	b.n	3fc2 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2a>
    *activation_max = 1;
    416a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    416e:	9305      	str	r3, [sp, #20]
    *activation_min = -1;
    4170:	4b21      	ldr	r3, [pc, #132]	; (41f8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x260>)
    4172:	9304      	str	r3, [sp, #16]
    4174:	e725      	b.n	3fc2 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2a>
  RuntimeShape() : size_(0) {}
    4176:	9410      	str	r4, [sp, #64]	; 0x40
    4178:	e740      	b.n	3ffc <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x64>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    417a:	a811      	add	r0, sp, #68	; 0x44
    417c:	e738      	b.n	3ff0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x58>
  RuntimeShape() : size_(0) {}
    417e:	2300      	movs	r3, #0
    4180:	9316      	str	r3, [sp, #88]	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    4182:	930c      	str	r3, [sp, #48]	; 0x30
    4184:	e758      	b.n	4038 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xa0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4186:	a817      	add	r0, sp, #92	; 0x5c
    4188:	e74f      	b.n	402a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x92>
  RuntimeShape() : size_(0) {}
    418a:	2300      	movs	r3, #0
    418c:	931c      	str	r3, [sp, #112]	; 0x70
    418e:	9303      	str	r3, [sp, #12]
    4190:	e76c      	b.n	406c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xd4>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4192:	a81d      	add	r0, sp, #116	; 0x74
    4194:	e764      	b.n	4060 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xc8>
    4196:	a823      	add	r0, sp, #140	; 0x8c
    4198:	e77b      	b.n	4092 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xfa>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    419a:	4b18      	ldr	r3, [pc, #96]	; (41fc <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x264>)
    419c:	4798      	blx	r3
  int flat_size = 1;
    419e:	2301      	movs	r3, #1
    41a0:	930b      	str	r3, [sp, #44]	; 0x2c
    41a2:	e79b      	b.n	40dc <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x144>
    TFLITE_DCHECK_GE(i, 0);
    41a4:	4b15      	ldr	r3, [pc, #84]	; (41fc <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x264>)
    41a6:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    41a8:	4b14      	ldr	r3, [pc, #80]	; (41fc <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x264>)
    41aa:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    41ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    41ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    41b2:	e7a1      	b.n	40f8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x160>
    41b4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    41b6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    41ba:	920a      	str	r2, [sp, #40]	; 0x28
    41bc:	e7a5      	b.n	410a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x172>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    41be:	4b0f      	ldr	r3, [pc, #60]	; (41fc <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x264>)
    41c0:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    41c2:	4b0e      	ldr	r3, [pc, #56]	; (41fc <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x264>)
    41c4:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    41c6:	4b0d      	ldr	r3, [pc, #52]	; (41fc <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x264>)
    41c8:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    41ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    41cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    41d0:	9306      	str	r3, [sp, #24]
    41d2:	e7ac      	b.n	412e <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x196>
      for (int d = 0; d < accum_depth; ++d) {
    41d4:	2600      	movs	r6, #0
    41d6:	e02f      	b.n	4238 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2a0>
                 weights_data[out_c * accum_depth + d];
      }
      float bias_value = 0.0f;
    41d8:	2100      	movs	r1, #0
    41da:	e032      	b.n	4242 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2aa>
    41dc:	7f7fffff 	.word	0x7f7fffff
    41e0:	1ffffffe 	.word	0x1ffffffe
    41e4:	00009291 	.word	0x00009291
    41e8:	00014641 	.word	0x00014641
    41ec:	00012261 	.word	0x00012261
    41f0:	00012051 	.word	0x00012051
    41f4:	40c00000 	.word	0x40c00000
    41f8:	bf800000 	.word	0xbf800000
    41fc:	000138bd 	.word	0x000138bd
      if (bias_data) {
        bias_value = bias_data[out_c];
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    4200:	9b00      	ldr	r3, [sp, #0]
    4202:	f843 4b04 	str.w	r4, [r3], #4
    4206:	9300      	str	r3, [sp, #0]
    4208:	f10a 0a04 	add.w	sl, sl, #4
    420c:	9b01      	ldr	r3, [sp, #4]
    420e:	449b      	add	fp, r3
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    4210:	9b07      	ldr	r3, [sp, #28]
    4212:	4553      	cmp	r3, sl
    4214:	d027      	beq.n	4266 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2ce>
      for (int d = 0; d < accum_depth; ++d) {
    4216:	9b06      	ldr	r3, [sp, #24]
    4218:	2b00      	cmp	r3, #0
    421a:	dddb      	ble.n	41d4 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x23c>
    421c:	46d8      	mov	r8, fp
    421e:	9c02      	ldr	r4, [sp, #8]
    4220:	2600      	movs	r6, #0
        total += input_data[b * accum_depth + d] *
    4222:	f858 1b04 	ldr.w	r1, [r8], #4
    4226:	f854 0b04 	ldr.w	r0, [r4], #4
    422a:	47a8      	blx	r5
    422c:	4601      	mov	r1, r0
    422e:	4630      	mov	r0, r6
    4230:	47b8      	blx	r7
    4232:	4606      	mov	r6, r0
      for (int d = 0; d < accum_depth; ++d) {
    4234:	454c      	cmp	r4, r9
    4236:	d1f4      	bne.n	4222 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x28a>
      if (bias_data) {
    4238:	9b03      	ldr	r3, [sp, #12]
    423a:	2b00      	cmp	r3, #0
    423c:	d0cc      	beq.n	41d8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x240>
        bias_value = bias_data[out_c];
    423e:	f8da 1000 	ldr.w	r1, [sl]
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    4242:	4630      	mov	r0, r6
    4244:	47b8      	blx	r7
    4246:	4604      	mov	r4, r0
      if (__a < __b)
    4248:	9e04      	ldr	r6, [sp, #16]
    424a:	4631      	mov	r1, r6
    424c:	4b24      	ldr	r3, [pc, #144]	; (42e0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x348>)
    424e:	4798      	blx	r3
    4250:	b100      	cbz	r0, 4254 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2bc>
	return __b;
    4252:	4634      	mov	r4, r6
      if (__b < __a)
    4254:	9e05      	ldr	r6, [sp, #20]
    4256:	4631      	mov	r1, r6
    4258:	4620      	mov	r0, r4
    425a:	4b22      	ldr	r3, [pc, #136]	; (42e4 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x34c>)
    425c:	4798      	blx	r3
    425e:	2800      	cmp	r0, #0
    4260:	d0ce      	beq.n	4200 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x268>
	return __b;
    4262:	4634      	mov	r4, r6
    4264:	e7cc      	b.n	4200 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x268>
  for (int b = 0; b < batches; ++b) {
    4266:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4268:	3301      	adds	r3, #1
    426a:	9309      	str	r3, [sp, #36]	; 0x24
    426c:	9a08      	ldr	r2, [sp, #32]
    426e:	990d      	ldr	r1, [sp, #52]	; 0x34
    4270:	440a      	add	r2, r1
    4272:	9208      	str	r2, [sp, #32]
    4274:	9a02      	ldr	r2, [sp, #8]
    4276:	9901      	ldr	r1, [sp, #4]
    4278:	440a      	add	r2, r1
    427a:	9202      	str	r2, [sp, #8]
    427c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    427e:	4293      	cmp	r3, r2
    4280:	d00d      	beq.n	429e <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x306>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    4282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4284:	2b00      	cmp	r3, #0
    4286:	ddee      	ble.n	4266 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x2ce>
    4288:	f8dd a00c 	ldr.w	sl, [sp, #12]
    428c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    4290:	9b02      	ldr	r3, [sp, #8]
    4292:	9a01      	ldr	r2, [sp, #4]
    4294:	eb03 0902 	add.w	r9, r3, r2
    4298:	9b08      	ldr	r3, [sp, #32]
    429a:	9300      	str	r3, [sp, #0]
    429c:	e7bb      	b.n	4216 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x27e>
    if (size_ > kMaxSmallSize) {
    429e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    42a0:	2b05      	cmp	r3, #5
    42a2:	dd03      	ble.n	42ac <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x314>
      delete[] dims_pointer_;
    42a4:	9823      	ldr	r0, [sp, #140]	; 0x8c
    42a6:	b108      	cbz	r0, 42ac <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x314>
    42a8:	4b0f      	ldr	r3, [pc, #60]	; (42e8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x350>)
    42aa:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    42ac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    42ae:	2b05      	cmp	r3, #5
    42b0:	dd03      	ble.n	42ba <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x322>
      delete[] dims_pointer_;
    42b2:	981d      	ldr	r0, [sp, #116]	; 0x74
    42b4:	b108      	cbz	r0, 42ba <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x322>
    42b6:	4b0c      	ldr	r3, [pc, #48]	; (42e8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x350>)
    42b8:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    42ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    42bc:	2b05      	cmp	r3, #5
    42be:	dd03      	ble.n	42c8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x330>
      delete[] dims_pointer_;
    42c0:	9817      	ldr	r0, [sp, #92]	; 0x5c
    42c2:	b108      	cbz	r0, 42c8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x330>
    42c4:	4b08      	ldr	r3, [pc, #32]	; (42e8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x350>)
    42c6:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    42c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    42ca:	2b05      	cmp	r3, #5
    42cc:	dd03      	ble.n	42d6 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x33e>
      delete[] dims_pointer_;
    42ce:	9811      	ldr	r0, [sp, #68]	; 0x44
    42d0:	b108      	cbz	r0, 42d6 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x33e>
    42d2:	4b05      	ldr	r3, [pc, #20]	; (42e8 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x350>)
    42d4:	4798      	blx	r3
      op_params, GetTensorShape(input), GetTensorData<float>(input),
      GetTensorShape(filter), GetTensorData<float>(filter),
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
      GetTensorData<float>(output));
  return kTfLiteOk;
}
    42d6:	2000      	movs	r0, #0
    42d8:	b029      	add	sp, #164	; 0xa4
    42da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    42de:	bf00      	nop
    42e0:	0001259d 	.word	0x0001259d
    42e4:	000125d9 	.word	0x000125d9
    42e8:	000091e1 	.word	0x000091e1

000042ec <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    42ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42f0:	b0e3      	sub	sp, #396	; 0x18c
  TFLITE_DCHECK(node->builtin_data != nullptr);
    42f2:	694a      	ldr	r2, [r1, #20]
    42f4:	b1aa      	cbz	r2, 4322 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x36>
    42f6:	4606      	mov	r6, r0
  return &context->tensors[node->inputs->data[index]];
    42f8:	6884      	ldr	r4, [r0, #8]
    42fa:	680b      	ldr	r3, [r1, #0]
    42fc:	6858      	ldr	r0, [r3, #4]
    42fe:	ea4f 1880 	mov.w	r8, r0, lsl #6
    4302:	eb04 0708 	add.w	r7, r4, r8
    4306:	6898      	ldr	r0, [r3, #8]
    4308:	eb04 1b80 	add.w	fp, r4, r0, lsl #6
  const bool use_tensor = index < node->inputs->size &&
    430c:	6818      	ldr	r0, [r3, #0]
    430e:	2802      	cmp	r0, #2
    4310:	dd0c      	ble.n	432c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x40>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
    4312:	68db      	ldr	r3, [r3, #12]
  const bool use_tensor = index < node->inputs->size &&
    4314:	f1b3 3fff 	cmp.w	r3, #4294967295
    4318:	d005      	beq.n	4326 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3a>
    return &context->tensors[node->inputs->data[index]];
    431a:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    431e:	9306      	str	r3, [sp, #24]
    4320:	e006      	b.n	4330 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x44>
    4322:	4b9d      	ldr	r3, [pc, #628]	; (4598 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    4324:	4798      	blx	r3
  return nullptr;
    4326:	2300      	movs	r3, #0
    4328:	9306      	str	r3, [sp, #24]
    432a:	e001      	b.n	4330 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x44>
    432c:	2300      	movs	r3, #0
    432e:	9306      	str	r3, [sp, #24]
  return &context->tensors[node->outputs->data[index]];
    4330:	684b      	ldr	r3, [r1, #4]
    4332:	685d      	ldr	r5, [r3, #4]
    4334:	01ab      	lsls	r3, r5, #6
    4336:	9308      	str	r3, [sp, #32]
    4338:	18e3      	adds	r3, r4, r3
    433a:	9307      	str	r3, [sp, #28]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
    433c:	690b      	ldr	r3, [r1, #16]
    433e:	b19b      	cbz	r3, 4368 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x7c>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
    4340:	f814 0008 	ldrb.w	r0, [r4, r8]
    4344:	2803      	cmp	r0, #3
    4346:	f000 8174 	beq.w	4632 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x346>
    434a:	2809      	cmp	r0, #9
    434c:	d01c      	beq.n	4388 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x9c>
    434e:	2801      	cmp	r0, #1
    4350:	d00c      	beq.n	436c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x80>

    case kTfLiteUInt8:
      return EvalQuantized(context, node, data, input, filter, bias, output);

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    4352:	6975      	ldr	r5, [r6, #20]
    4354:	4b91      	ldr	r3, [pc, #580]	; (459c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2b0>)
    4356:	4798      	blx	r3
    4358:	f814 3008 	ldrb.w	r3, [r4, r8]
    435c:	4602      	mov	r2, r0
    435e:	4990      	ldr	r1, [pc, #576]	; (45a0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2b4>)
    4360:	4630      	mov	r0, r6
    4362:	47a8      	blx	r5
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    4364:	2001      	movs	r0, #1
    4366:	e00c      	b.n	4382 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x96>
  TFLITE_DCHECK(node->user_data != nullptr);
    4368:	4b8b      	ldr	r3, [pc, #556]	; (4598 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    436a:	4798      	blx	r3
                       output);
    436c:	7812      	ldrb	r2, [r2, #0]
    436e:	9b07      	ldr	r3, [sp, #28]
    4370:	9302      	str	r3, [sp, #8]
    4372:	9b06      	ldr	r3, [sp, #24]
    4374:	9301      	str	r3, [sp, #4]
    4376:	f8cd b000 	str.w	fp, [sp]
    437a:	463b      	mov	r3, r7
    437c:	4630      	mov	r0, r6
    437e:	4c89      	ldr	r4, [pc, #548]	; (45a4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2b8>)
    4380:	47a0      	blx	r4
  }
  return kTfLiteOk;
}
    4382:	b063      	add	sp, #396	; 0x18c
    4384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  op_params.input_offset = -input->params.zero_point;
    4388:	f8d7 8010 	ldr.w	r8, [r7, #16]
  op_params.weights_offset = -filter->params.zero_point;
    438c:	f8db 4010 	ldr.w	r4, [fp, #16]
  op_params.output_offset = output->params.zero_point;
    4390:	9a07      	ldr	r2, [sp, #28]
    4392:	6912      	ldr	r2, [r2, #16]
    4394:	920a      	str	r2, [sp, #40]	; 0x28
  op_params.output_multiplier = data.output_multiplier;
    4396:	f8d3 9000 	ldr.w	r9, [r3]
  op_params.output_shift = -data.output_shift;
    439a:	f8d3 a004 	ldr.w	sl, [r3, #4]
  op_params.quantized_activation_min = data.output_activation_min;
    439e:	689a      	ldr	r2, [r3, #8]
    43a0:	9208      	str	r2, [sp, #32]
  op_params.quantized_activation_max = data.output_activation_max;
    43a2:	68db      	ldr	r3, [r3, #12]
    43a4:	9309      	str	r3, [sp, #36]	; 0x24
  if (tensor == nullptr) {
    43a6:	2f00      	cmp	r7, #0
    43a8:	f000 80b8 	beq.w	451c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x230>
  const int dims_size = dims->size;
    43ac:	68be      	ldr	r6, [r7, #8]
    43ae:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    43b2:	952c      	str	r5, [sp, #176]	; 0xb0
    if (dimensions_count > kMaxSmallSize) {
    43b4:	2d05      	cmp	r5, #5
    43b6:	f340 80b3 	ble.w	4520 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x234>
      dims_pointer_ = new int32[dimensions_count];
    43ba:	4b7b      	ldr	r3, [pc, #492]	; (45a8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
    43bc:	429d      	cmp	r5, r3
    43be:	bf94      	ite	ls
    43c0:	00a8      	lslls	r0, r5, #2
    43c2:	f04f 30ff 	movhi.w	r0, #4294967295
    43c6:	4b79      	ldr	r3, [pc, #484]	; (45ac <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2c0>)
    43c8:	4798      	blx	r3
    43ca:	902d      	str	r0, [sp, #180]	; 0xb4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    43cc:	00aa      	lsls	r2, r5, #2
    43ce:	4631      	mov	r1, r6
    43d0:	4b77      	ldr	r3, [pc, #476]	; (45b0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2c4>)
    43d2:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    43d4:	687f      	ldr	r7, [r7, #4]
  if (tensor == nullptr) {
    43d6:	f1bb 0f00 	cmp.w	fp, #0
    43da:	f000 80a3 	beq.w	4524 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x238>
  const int dims_size = dims->size;
    43de:	f8db 6008 	ldr.w	r6, [fp, #8]
    43e2:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    43e6:	9526      	str	r5, [sp, #152]	; 0x98
    if (dimensions_count > kMaxSmallSize) {
    43e8:	2d05      	cmp	r5, #5
    43ea:	f340 809f 	ble.w	452c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x240>
      dims_pointer_ = new int32[dimensions_count];
    43ee:	4b6e      	ldr	r3, [pc, #440]	; (45a8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
    43f0:	429d      	cmp	r5, r3
    43f2:	bf94      	ite	ls
    43f4:	00a8      	lslls	r0, r5, #2
    43f6:	f04f 30ff 	movhi.w	r0, #4294967295
    43fa:	4b6c      	ldr	r3, [pc, #432]	; (45ac <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2c0>)
    43fc:	4798      	blx	r3
    43fe:	9027      	str	r0, [sp, #156]	; 0x9c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4400:	00aa      	lsls	r2, r5, #2
    4402:	4631      	mov	r1, r6
    4404:	4b6a      	ldr	r3, [pc, #424]	; (45b0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2c4>)
    4406:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    4408:	f8db 3004 	ldr.w	r3, [fp, #4]
    440c:	9314      	str	r3, [sp, #80]	; 0x50
  if (tensor == nullptr) {
    440e:	9b06      	ldr	r3, [sp, #24]
    4410:	2b00      	cmp	r3, #0
    4412:	f000 808d 	beq.w	4530 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x244>
  const int dims_size = dims->size;
    4416:	9b06      	ldr	r3, [sp, #24]
    4418:	689e      	ldr	r6, [r3, #8]
    441a:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    441e:	9520      	str	r5, [sp, #128]	; 0x80
    if (dimensions_count > kMaxSmallSize) {
    4420:	2d05      	cmp	r5, #5
    4422:	f340 8088 	ble.w	4536 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x24a>
      dims_pointer_ = new int32[dimensions_count];
    4426:	4b60      	ldr	r3, [pc, #384]	; (45a8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
    4428:	429d      	cmp	r5, r3
    442a:	bf94      	ite	ls
    442c:	00a8      	lslls	r0, r5, #2
    442e:	f04f 30ff 	movhi.w	r0, #4294967295
    4432:	4b5e      	ldr	r3, [pc, #376]	; (45ac <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2c0>)
    4434:	4798      	blx	r3
    4436:	9021      	str	r0, [sp, #132]	; 0x84
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4438:	00aa      	lsls	r2, r5, #2
    443a:	4631      	mov	r1, r6
    443c:	4b5c      	ldr	r3, [pc, #368]	; (45b0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2c4>)
    443e:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    4440:	9b06      	ldr	r3, [sp, #24]
    4442:	685b      	ldr	r3, [r3, #4]
    4444:	9306      	str	r3, [sp, #24]
  if (tensor == nullptr) {
    4446:	9b07      	ldr	r3, [sp, #28]
    4448:	2b00      	cmp	r3, #0
    444a:	d076      	beq.n	453a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x24e>
  const int dims_size = dims->size;
    444c:	9b07      	ldr	r3, [sp, #28]
    444e:	689e      	ldr	r6, [r3, #8]
    4450:	f856 5b04 	ldr.w	r5, [r6], #4
    size_ = dimensions_count;
    4454:	951a      	str	r5, [sp, #104]	; 0x68
    if (dimensions_count > kMaxSmallSize) {
    4456:	2d05      	cmp	r5, #5
    4458:	dd75      	ble.n	4546 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x25a>
      dims_pointer_ = new int32[dimensions_count];
    445a:	4b53      	ldr	r3, [pc, #332]	; (45a8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
    445c:	429d      	cmp	r5, r3
    445e:	bf94      	ite	ls
    4460:	00a8      	lslls	r0, r5, #2
    4462:	f04f 30ff 	movhi.w	r0, #4294967295
    4466:	4b51      	ldr	r3, [pc, #324]	; (45ac <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2c0>)
    4468:	4798      	blx	r3
    446a:	901b      	str	r0, [sp, #108]	; 0x6c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    446c:	00aa      	lsls	r2, r5, #2
    446e:	4631      	mov	r1, r6
    4470:	4b4f      	ldr	r3, [pc, #316]	; (45b0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2c4>)
    4472:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    4474:	9b07      	ldr	r3, [sp, #28]
    4476:	6859      	ldr	r1, [r3, #4]
  inline int32 DimensionsCount() const { return size_; }
    4478:	9b26      	ldr	r3, [sp, #152]	; 0x98
    447a:	9316      	str	r3, [sp, #88]	; 0x58
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    447c:	2b01      	cmp	r3, #1
    447e:	dd60      	ble.n	4542 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x256>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    4480:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4482:	2b02      	cmp	r3, #2
    4484:	d161      	bne.n	454a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x25e>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    4486:	9b08      	ldr	r3, [sp, #32]
    4488:	9a09      	ldr	r2, [sp, #36]	; 0x24
    448a:	4293      	cmp	r3, r2
    448c:	dc5f      	bgt.n	454e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x262>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    448e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    4490:	9315      	str	r3, [sp, #84]	; 0x54
    4492:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    4494:	9313      	str	r3, [sp, #76]	; 0x4c
    TFLITE_DCHECK_GE(i, 0);
    4496:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4498:	1e9a      	subs	r2, r3, #2
    449a:	d45a      	bmi.n	4552 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x266>
    TFLITE_DCHECK_LT(i, size_);
    449c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    449e:	4293      	cmp	r3, r2
    44a0:	dd59      	ble.n	4556 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x26a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    44a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    44a4:	2b05      	cmp	r3, #5
    44a6:	dc58      	bgt.n	455a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x26e>
    44a8:	ab62      	add	r3, sp, #392	; 0x188
    44aa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    44ae:	f852 3cec 	ldr.w	r3, [r2, #-236]
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = output_shape.Dims(0);
  const int output_depth = output_shape.Dims(1);
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    44b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    44b4:	4293      	cmp	r3, r2
    44b6:	db54      	blt.n	4562 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x276>
    TFLITE_DCHECK_GE(i, 0);
    44b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    44ba:	1e5a      	subs	r2, r3, #1
    44bc:	d453      	bmi.n	4566 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x27a>
    TFLITE_DCHECK_LT(i, size_);
    44be:	9b16      	ldr	r3, [sp, #88]	; 0x58
    44c0:	4293      	cmp	r3, r2
    44c2:	dd52      	ble.n	456a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x27e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    44c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    44c6:	2b05      	cmp	r3, #5
    44c8:	dc51      	bgt.n	456e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x282>
    44ca:	ab62      	add	r3, sp, #392	; 0x188
    44cc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    44d0:	f852 3cec 	ldr.w	r3, [r2, #-236]
    44d4:	9307      	str	r3, [sp, #28]
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
  for (int b = 0; b < batches; ++b) {
    44d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    44d8:	2b00      	cmp	r3, #0
    44da:	f340 8093 	ble.w	4604 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x318>
  op_params.output_shift = -data.output_shift;
    44de:	f1ca 0300 	rsb	r3, sl, #0
    44e2:	2b00      	cmp	r3, #0
    44e4:	bfd4      	ite	le
    44e6:	46d4      	movle	ip, sl
    44e8:	f04f 0c00 	movgt.w	ip, #0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    44ec:	2201      	movs	r2, #1
    44ee:	fa02 f20c 	lsl.w	r2, r2, ip
    44f2:	3a01      	subs	r2, #1
    44f4:	920c      	str	r2, [sp, #48]	; 0x30
  return a >> offset;
    44f6:	1052      	asrs	r2, r2, #1
    44f8:	9210      	str	r2, [sp, #64]	; 0x40
    44fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    44fc:	9212      	str	r2, [sp, #72]	; 0x48
    44fe:	eb01 0a02 	add.w	sl, r1, r2
    4502:	9a07      	ldr	r2, [sp, #28]
    4504:	9204      	str	r2, [sp, #16]
    4506:	9705      	str	r7, [sp, #20]
    4508:	2200      	movs	r2, #0
    450a:	9211      	str	r2, [sp, #68]	; 0x44
  int left_shift = shift > 0 ? shift : 0;
    450c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    4510:	930b      	str	r3, [sp, #44]	; 0x2c
  std::int64_t b_64(b);
    4512:	464a      	mov	r2, r9
    4514:	17d3      	asrs	r3, r2, #31
    4516:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    451a:	e066      	b.n	45ea <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2fe>
  RuntimeShape() : size_(0) {}
    451c:	972c      	str	r7, [sp, #176]	; 0xb0
    451e:	e75a      	b.n	43d6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xea>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4520:	a82d      	add	r0, sp, #180	; 0xb4
    4522:	e753      	b.n	43cc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe0>
  RuntimeShape() : size_(0) {}
    4524:	2300      	movs	r3, #0
    4526:	9326      	str	r3, [sp, #152]	; 0x98
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    4528:	9314      	str	r3, [sp, #80]	; 0x50
    452a:	e770      	b.n	440e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x122>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    452c:	a827      	add	r0, sp, #156	; 0x9c
    452e:	e767      	b.n	4400 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x114>
  RuntimeShape() : size_(0) {}
    4530:	9320      	str	r3, [sp, #128]	; 0x80
    4532:	9306      	str	r3, [sp, #24]
    4534:	e787      	b.n	4446 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x15a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4536:	a821      	add	r0, sp, #132	; 0x84
    4538:	e77e      	b.n	4438 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x14c>
  RuntimeShape() : size_(0) {}
    453a:	931a      	str	r3, [sp, #104]	; 0x68
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    453c:	9b26      	ldr	r3, [sp, #152]	; 0x98
    453e:	2b01      	cmp	r3, #1
    4540:	dc03      	bgt.n	454a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x25e>
    4542:	4b15      	ldr	r3, [pc, #84]	; (4598 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    4544:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4546:	a81b      	add	r0, sp, #108	; 0x6c
    4548:	e790      	b.n	446c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x180>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    454a:	4b13      	ldr	r3, [pc, #76]	; (4598 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    454c:	4798      	blx	r3
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    454e:	4b12      	ldr	r3, [pc, #72]	; (4598 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    4550:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    4552:	4b11      	ldr	r3, [pc, #68]	; (4598 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    4554:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    4556:	4b10      	ldr	r3, [pc, #64]	; (4598 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    4558:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    455a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    455c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4560:	e7a7      	b.n	44b2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1c6>
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    4562:	4b0d      	ldr	r3, [pc, #52]	; (4598 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    4564:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    4566:	4b0c      	ldr	r3, [pc, #48]	; (4598 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    4568:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    456a:	4b0b      	ldr	r3, [pc, #44]	; (4598 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    456c:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    456e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    4570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4574:	9307      	str	r3, [sp, #28]
    4576:	e7ae      	b.n	44d6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
      int32 acc = 0;
    4578:	2200      	movs	r2, #0
    457a:	e3c9      	b.n	4d10 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xa24>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    457c:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
    4580:	f040 83cf 	bne.w	4d22 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xa36>
    4584:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    4588:	e38c      	b.n	4ca4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x9b8>
  assert(exponent >= 0);
    458a:	4b0a      	ldr	r3, [pc, #40]	; (45b4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2c8>)
    458c:	4a0a      	ldr	r2, [pc, #40]	; (45b8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2cc>)
    458e:	f44f 71b3 	mov.w	r1, #358	; 0x166
    4592:	480a      	ldr	r0, [pc, #40]	; (45bc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2d0>)
    4594:	4c0a      	ldr	r4, [pc, #40]	; (45c0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2d4>)
    4596:	47a0      	blx	r4
    4598:	000138bd 	.word	0x000138bd
    459c:	00009145 	.word	0x00009145
    45a0:	00020ddc 	.word	0x00020ddc
    45a4:	00003f99 	.word	0x00003f99
    45a8:	1ffffffe 	.word	0x1ffffffe
    45ac:	00009291 	.word	0x00009291
    45b0:	00014641 	.word	0x00014641
    45b4:	00020d8c 	.word	0x00020d8c
    45b8:	00020df8 	.word	0x00020df8
    45bc:	00020d9c 	.word	0x00020d9c
    45c0:	000138cd 	.word	0x000138cd
  assert(exponent <= 31);
    45c4:	4ba4      	ldr	r3, [pc, #656]	; (4858 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x56c>)
    45c6:	4aa5      	ldr	r2, [pc, #660]	; (485c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x570>)
    45c8:	f240 1167 	movw	r1, #359	; 0x167
    45cc:	48a4      	ldr	r0, [pc, #656]	; (4860 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x574>)
    45ce:	4ca5      	ldr	r4, [pc, #660]	; (4864 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x578>)
    45d0:	47a0      	blx	r4
  for (int b = 0; b < batches; ++b) {
    45d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    45d4:	3301      	adds	r3, #1
    45d6:	9311      	str	r3, [sp, #68]	; 0x44
    45d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    45da:	4492      	add	sl, r2
    45dc:	9a05      	ldr	r2, [sp, #20]
    45de:	9904      	ldr	r1, [sp, #16]
    45e0:	440a      	add	r2, r1
    45e2:	9205      	str	r2, [sp, #20]
    45e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
    45e6:	4293      	cmp	r3, r2
    45e8:	d00c      	beq.n	4604 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x318>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    45ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    45ec:	2b00      	cmp	r3, #0
    45ee:	ddf0      	ble.n	45d2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2e6>
    45f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    45f2:	ebaa 0503 	sub.w	r5, sl, r3
    45f6:	9806      	ldr	r0, [sp, #24]
    45f8:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
    45fc:	9b04      	ldr	r3, [sp, #16]
    45fe:	9a05      	ldr	r2, [sp, #20]
    4600:	1899      	adds	r1, r3, r2
    4602:	e373      	b.n	4cec <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xa00>
    if (size_ > kMaxSmallSize) {
    4604:	9b20      	ldr	r3, [sp, #128]	; 0x80
    4606:	2b05      	cmp	r3, #5
    4608:	dd03      	ble.n	4612 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x326>
      delete[] dims_pointer_;
    460a:	9821      	ldr	r0, [sp, #132]	; 0x84
    460c:	b108      	cbz	r0, 4612 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x326>
    460e:	4b96      	ldr	r3, [pc, #600]	; (4868 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x57c>)
    4610:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    4612:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4614:	2b05      	cmp	r3, #5
    4616:	dd03      	ble.n	4620 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x334>
      delete[] dims_pointer_;
    4618:	9827      	ldr	r0, [sp, #156]	; 0x9c
    461a:	b108      	cbz	r0, 4620 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x334>
    461c:	4b92      	ldr	r3, [pc, #584]	; (4868 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x57c>)
    461e:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    4620:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    4622:	2b05      	cmp	r3, #5
    4624:	dd03      	ble.n	462e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x342>
      delete[] dims_pointer_;
    4626:	982d      	ldr	r0, [sp, #180]	; 0xb4
    4628:	b108      	cbz	r0, 462e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x342>
    462a:	4b8f      	ldr	r3, [pc, #572]	; (4868 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x57c>)
    462c:	4798      	blx	r3
                               output);
    462e:	2000      	movs	r0, #0
    4630:	e6a7      	b.n	4382 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x96>
  const int32_t input_offset = -input->params.zero_point;
    4632:	693d      	ldr	r5, [r7, #16]
  const int32_t filter_offset = -filter->params.zero_point;
    4634:	f8db a010 	ldr.w	sl, [fp, #16]
  const int32_t output_offset = output->params.zero_point;
    4638:	9a07      	ldr	r2, [sp, #28]
    463a:	6912      	ldr	r2, [r2, #16]
    463c:	920a      	str	r2, [sp, #40]	; 0x28
  op_params.output_multiplier = data.output_multiplier;
    463e:	681a      	ldr	r2, [r3, #0]
    4640:	9216      	str	r2, [sp, #88]	; 0x58
  op_params.output_shift = -data.output_shift;
    4642:	f8d3 9004 	ldr.w	r9, [r3, #4]
    4646:	f1c9 0800 	rsb	r8, r9, #0
  op_params.quantized_activation_min = data.output_activation_min;
    464a:	689a      	ldr	r2, [r3, #8]
    464c:	9204      	str	r2, [sp, #16]
  op_params.quantized_activation_max = data.output_activation_max;
    464e:	68db      	ldr	r3, [r3, #12]
    4650:	9305      	str	r3, [sp, #20]
  switch (output->type) {
    4652:	9b08      	ldr	r3, [sp, #32]
    4654:	5ce0      	ldrb	r0, [r4, r3]
    4656:	2803      	cmp	r0, #3
    4658:	d00d      	beq.n	4676 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x38a>
    465a:	2807      	cmp	r0, #7
    465c:	f000 8198 	beq.w	4990 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6a4>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    4660:	6977      	ldr	r7, [r6, #20]
    4662:	4b82      	ldr	r3, [pc, #520]	; (486c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x580>)
    4664:	4798      	blx	r3
    4666:	9b08      	ldr	r3, [sp, #32]
    4668:	5ce3      	ldrb	r3, [r4, r3]
    466a:	4602      	mov	r2, r0
    466c:	4980      	ldr	r1, [pc, #512]	; (4870 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x584>)
    466e:	4630      	mov	r0, r6
    4670:	47b8      	blx	r7
      return kTfLiteError;
    4672:	2001      	movs	r0, #1
      return EvalQuantized(context, node, data, input, filter, bias, output);
    4674:	e685      	b.n	4382 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x96>
  if (tensor == nullptr) {
    4676:	2f00      	cmp	r7, #0
    4678:	f000 80e3 	beq.w	4842 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x556>
  const int dims_size = dims->size;
    467c:	68be      	ldr	r6, [r7, #8]
    467e:	f856 4b04 	ldr.w	r4, [r6], #4
    size_ = dimensions_count;
    4682:	945c      	str	r4, [sp, #368]	; 0x170
    if (dimensions_count > kMaxSmallSize) {
    4684:	2c05      	cmp	r4, #5
    4686:	f340 80df 	ble.w	4848 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x55c>
      dims_pointer_ = new int32[dimensions_count];
    468a:	4b7a      	ldr	r3, [pc, #488]	; (4874 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x588>)
    468c:	429c      	cmp	r4, r3
    468e:	bf94      	ite	ls
    4690:	00a0      	lslls	r0, r4, #2
    4692:	f04f 30ff 	movhi.w	r0, #4294967295
    4696:	4b78      	ldr	r3, [pc, #480]	; (4878 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    4698:	4798      	blx	r3
    469a:	905d      	str	r0, [sp, #372]	; 0x174
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    469c:	00a2      	lsls	r2, r4, #2
    469e:	4631      	mov	r1, r6
    46a0:	4b76      	ldr	r3, [pc, #472]	; (487c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x590>)
    46a2:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    46a4:	687e      	ldr	r6, [r7, #4]
  if (tensor == nullptr) {
    46a6:	f1bb 0f00 	cmp.w	fp, #0
    46aa:	f000 80cf 	beq.w	484c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x560>
  const int dims_size = dims->size;
    46ae:	f8db 7008 	ldr.w	r7, [fp, #8]
    46b2:	f857 4b04 	ldr.w	r4, [r7], #4
    size_ = dimensions_count;
    46b6:	9456      	str	r4, [sp, #344]	; 0x158
    if (dimensions_count > kMaxSmallSize) {
    46b8:	2c05      	cmp	r4, #5
    46ba:	f340 80cb 	ble.w	4854 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x568>
      dims_pointer_ = new int32[dimensions_count];
    46be:	4b6d      	ldr	r3, [pc, #436]	; (4874 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x588>)
    46c0:	429c      	cmp	r4, r3
    46c2:	bf94      	ite	ls
    46c4:	00a0      	lslls	r0, r4, #2
    46c6:	f04f 30ff 	movhi.w	r0, #4294967295
    46ca:	4b6b      	ldr	r3, [pc, #428]	; (4878 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    46cc:	4798      	blx	r3
    46ce:	9057      	str	r0, [sp, #348]	; 0x15c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    46d0:	00a2      	lsls	r2, r4, #2
    46d2:	4639      	mov	r1, r7
    46d4:	4b69      	ldr	r3, [pc, #420]	; (487c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x590>)
    46d6:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    46d8:	f8db 3004 	ldr.w	r3, [fp, #4]
    46dc:	9317      	str	r3, [sp, #92]	; 0x5c
  if (tensor == nullptr) {
    46de:	9b06      	ldr	r3, [sp, #24]
    46e0:	2b00      	cmp	r3, #0
    46e2:	f000 80cd 	beq.w	4880 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x594>
  const int dims_size = dims->size;
    46e6:	9b06      	ldr	r3, [sp, #24]
    46e8:	689f      	ldr	r7, [r3, #8]
    46ea:	f857 4b04 	ldr.w	r4, [r7], #4
    size_ = dimensions_count;
    46ee:	9450      	str	r4, [sp, #320]	; 0x140
    if (dimensions_count > kMaxSmallSize) {
    46f0:	2c05      	cmp	r4, #5
    46f2:	f340 80c8 	ble.w	4886 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x59a>
      dims_pointer_ = new int32[dimensions_count];
    46f6:	4b5f      	ldr	r3, [pc, #380]	; (4874 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x588>)
    46f8:	429c      	cmp	r4, r3
    46fa:	bf94      	ite	ls
    46fc:	00a0      	lslls	r0, r4, #2
    46fe:	f04f 30ff 	movhi.w	r0, #4294967295
    4702:	4b5d      	ldr	r3, [pc, #372]	; (4878 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    4704:	4798      	blx	r3
    4706:	9051      	str	r0, [sp, #324]	; 0x144
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4708:	00a2      	lsls	r2, r4, #2
    470a:	4639      	mov	r1, r7
    470c:	4b5b      	ldr	r3, [pc, #364]	; (487c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x590>)
    470e:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    4710:	9b06      	ldr	r3, [sp, #24]
    4712:	685b      	ldr	r3, [r3, #4]
    4714:	9308      	str	r3, [sp, #32]
  if (tensor == nullptr) {
    4716:	9b07      	ldr	r3, [sp, #28]
    4718:	2b00      	cmp	r3, #0
    471a:	f000 80b6 	beq.w	488a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x59e>
  const int dims_size = dims->size;
    471e:	9b07      	ldr	r3, [sp, #28]
    4720:	689f      	ldr	r7, [r3, #8]
    4722:	f857 4b04 	ldr.w	r4, [r7], #4
    size_ = dimensions_count;
    4726:	944a      	str	r4, [sp, #296]	; 0x128
    if (dimensions_count > kMaxSmallSize) {
    4728:	2c05      	cmp	r4, #5
    472a:	f340 80b4 	ble.w	4896 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5aa>
      dims_pointer_ = new int32[dimensions_count];
    472e:	4b51      	ldr	r3, [pc, #324]	; (4874 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x588>)
    4730:	429c      	cmp	r4, r3
    4732:	bf94      	ite	ls
    4734:	00a0      	lslls	r0, r4, #2
    4736:	f04f 30ff 	movhi.w	r0, #4294967295
    473a:	4b4f      	ldr	r3, [pc, #316]	; (4878 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x58c>)
    473c:	4798      	blx	r3
    473e:	904b      	str	r0, [sp, #300]	; 0x12c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4740:	00a2      	lsls	r2, r4, #2
    4742:	4639      	mov	r1, r7
    4744:	4b4d      	ldr	r3, [pc, #308]	; (487c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x590>)
    4746:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    4748:	9b07      	ldr	r3, [sp, #28]
    474a:	685c      	ldr	r4, [r3, #4]
  inline int32 DimensionsCount() const { return size_; }
    474c:	9b56      	ldr	r3, [sp, #344]	; 0x158
    474e:	9311      	str	r3, [sp, #68]	; 0x44
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    4750:	2b01      	cmp	r3, #1
    4752:	f340 809e 	ble.w	4892 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5a6>
    4756:	9a4a      	ldr	r2, [sp, #296]	; 0x128
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
    4758:	2a00      	cmp	r2, #0
    475a:	f340 809e 	ble.w	489a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5ae>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    475e:	9b04      	ldr	r3, [sp, #16]
    4760:	9905      	ldr	r1, [sp, #20]
    4762:	428b      	cmp	r3, r1
    4764:	f300 809b 	bgt.w	489e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5b2>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    4768:	1e53      	subs	r3, r2, #1
    476a:	f100 809a 	bmi.w	48a2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5b6>
    476e:	429a      	cmp	r2, r3
    4770:	f340 8097 	ble.w	48a2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5b6>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4774:	2a05      	cmp	r2, #5
    4776:	bfcc      	ite	gt
    4778:	984b      	ldrgt	r0, [sp, #300]	; 0x12c
    477a:	a84b      	addle	r0, sp, #300	; 0x12c
    477c:	2101      	movs	r1, #1
    477e:	9113      	str	r1, [sp, #76]	; 0x4c
    4780:	2700      	movs	r7, #0
    4782:	4639      	mov	r1, r7
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    4784:	2701      	movs	r7, #1
    4786:	469c      	mov	ip, r3
    4788:	46be      	mov	lr, r7
    478a:	4561      	cmp	r1, ip
    478c:	bf14      	ite	ne
    478e:	f850 3021 	ldrne.w	r3, [r0, r1, lsl #2]
    4792:	463b      	moveq	r3, r7
    4794:	fb03 fe0e 	mul.w	lr, r3, lr
  for (int i = 0; i < dims_count; ++i) {
    4798:	3101      	adds	r1, #1
    479a:	428a      	cmp	r2, r1
    479c:	d1f5      	bne.n	478a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x49e>
    479e:	9118      	str	r1, [sp, #96]	; 0x60
    47a0:	4663      	mov	r3, ip
    47a2:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
    TFLITE_DCHECK_GE(i, 0);
    47a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    47a8:	1e91      	subs	r1, r2, #2
    47aa:	d47c      	bmi.n	48a6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5ba>
    TFLITE_DCHECK_LT(i, size_);
    47ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
    47ae:	428a      	cmp	r2, r1
    47b0:	dd7b      	ble.n	48aa <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5be>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    47b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    47b4:	2a05      	cmp	r2, #5
    47b6:	dc7a      	bgt.n	48ae <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5c2>
    47b8:	aa62      	add	r2, sp, #392	; 0x188
    47ba:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    47be:	f851 1c2c 	ldr.w	r1, [r1, #-44]
    47c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    47c4:	2a05      	cmp	r2, #5
    47c6:	dc76      	bgt.n	48b6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5ca>
    47c8:	aa62      	add	r2, sp, #392	; 0x188
    47ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    47ce:	f853 3c5c 	ldr.w	r3, [r3, #-92]
    47d2:	9314      	str	r3, [sp, #80]	; 0x50
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    47d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    47d6:	428b      	cmp	r3, r1
    47d8:	d172      	bne.n	48c0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5d4>
    TFLITE_DCHECK_GE(i, 0);
    47da:	9b11      	ldr	r3, [sp, #68]	; 0x44
    47dc:	1e5a      	subs	r2, r3, #1
    47de:	d471      	bmi.n	48c4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5d8>
    TFLITE_DCHECK_LT(i, size_);
    47e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    47e2:	4293      	cmp	r3, r2
    47e4:	dd70      	ble.n	48c8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5dc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    47e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    47e8:	2b05      	cmp	r3, #5
    47ea:	dc6f      	bgt.n	48cc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5e0>
    47ec:	ab62      	add	r3, sp, #392	; 0x188
    47ee:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    47f2:	f852 3c2c 	ldr.w	r3, [r2, #-44]
    47f6:	9309      	str	r3, [sp, #36]	; 0x24
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
  for (int b = 0; b < batches; ++b) {
    47f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    47fa:	2b00      	cmp	r3, #0
    47fc:	f340 809b 	ble.w	4936 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x64a>
    4800:	f1b8 0f00 	cmp.w	r8, #0
    4804:	bfd4      	ite	le
    4806:	4648      	movle	r0, r9
    4808:	2000      	movgt	r0, #0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    480a:	2301      	movs	r3, #1
    480c:	4083      	lsls	r3, r0
    480e:	3b01      	subs	r3, #1
    4810:	930c      	str	r3, [sp, #48]	; 0x30
  return a >> offset;
    4812:	105b      	asrs	r3, r3, #1
    4814:	9310      	str	r3, [sp, #64]	; 0x40
    4816:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4818:	9315      	str	r3, [sp, #84]	; 0x54
    481a:	eb04 0c03 	add.w	ip, r4, r3
    481e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    4822:	9606      	str	r6, [sp, #24]
    4824:	2300      	movs	r3, #0
    4826:	9312      	str	r3, [sp, #72]	; 0x48
    4828:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
    482c:	930b      	str	r3, [sp, #44]	; 0x2c
  std::int64_t b_64(b);
    482e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    4830:	4616      	mov	r6, r2
    4832:	17d7      	asrs	r7, r2, #31
    4834:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    4838:	f8cd 901c 	str.w	r9, [sp, #28]
    483c:	46e1      	mov	r9, ip
    483e:	4694      	mov	ip, r2
    4840:	e06c      	b.n	491c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x630>
  RuntimeShape() : size_(0) {}
    4842:	2600      	movs	r6, #0
    4844:	965c      	str	r6, [sp, #368]	; 0x170
    4846:	e72e      	b.n	46a6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3ba>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4848:	a85d      	add	r0, sp, #372	; 0x174
    484a:	e727      	b.n	469c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3b0>
  RuntimeShape() : size_(0) {}
    484c:	2300      	movs	r3, #0
    484e:	9356      	str	r3, [sp, #344]	; 0x158
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    4850:	9317      	str	r3, [sp, #92]	; 0x5c
    4852:	e744      	b.n	46de <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3f2>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4854:	a857      	add	r0, sp, #348	; 0x15c
    4856:	e73b      	b.n	46d0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3e4>
    4858:	00020dcc 	.word	0x00020dcc
    485c:	00020df8 	.word	0x00020df8
    4860:	00020d9c 	.word	0x00020d9c
    4864:	000138cd 	.word	0x000138cd
    4868:	000091e1 	.word	0x000091e1
    486c:	00009145 	.word	0x00009145
    4870:	00020ddc 	.word	0x00020ddc
    4874:	1ffffffe 	.word	0x1ffffffe
    4878:	00009291 	.word	0x00009291
    487c:	00014641 	.word	0x00014641
  RuntimeShape() : size_(0) {}
    4880:	9350      	str	r3, [sp, #320]	; 0x140
    4882:	9308      	str	r3, [sp, #32]
    4884:	e747      	b.n	4716 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x42a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4886:	a851      	add	r0, sp, #324	; 0x144
    4888:	e73e      	b.n	4708 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x41c>
  RuntimeShape() : size_(0) {}
    488a:	934a      	str	r3, [sp, #296]	; 0x128
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    488c:	9b56      	ldr	r3, [sp, #344]	; 0x158
    488e:	2b01      	cmp	r3, #1
    4890:	dc03      	bgt.n	489a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5ae>
    4892:	4b38      	ldr	r3, [pc, #224]	; (4974 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x688>)
    4894:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4896:	a84b      	add	r0, sp, #300	; 0x12c
    4898:	e752      	b.n	4740 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x454>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
    489a:	4b36      	ldr	r3, [pc, #216]	; (4974 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x688>)
    489c:	4798      	blx	r3
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    489e:	4b35      	ldr	r3, [pc, #212]	; (4974 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x688>)
    48a0:	4798      	blx	r3
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    48a2:	4b34      	ldr	r3, [pc, #208]	; (4974 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x688>)
    48a4:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    48a6:	4b33      	ldr	r3, [pc, #204]	; (4974 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x688>)
    48a8:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    48aa:	4b32      	ldr	r3, [pc, #200]	; (4974 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x688>)
    48ac:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    48ae:	9a57      	ldr	r2, [sp, #348]	; 0x15c
    48b0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    48b4:	e785      	b.n	47c2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x4d6>
    48b6:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
    48b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    48bc:	9314      	str	r3, [sp, #80]	; 0x50
    48be:	e789      	b.n	47d4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x4e8>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    48c0:	4b2c      	ldr	r3, [pc, #176]	; (4974 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x688>)
    48c2:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    48c4:	4b2b      	ldr	r3, [pc, #172]	; (4974 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x688>)
    48c6:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    48c8:	4b2a      	ldr	r3, [pc, #168]	; (4974 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x688>)
    48ca:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    48cc:	9b57      	ldr	r3, [sp, #348]	; 0x15c
    48ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    48d2:	9309      	str	r3, [sp, #36]	; 0x24
    48d4:	e790      	b.n	47f8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x50c>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
      int32 acc = 0;
    48d6:	2200      	movs	r2, #0
    48d8:	e277      	b.n	4dca <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xade>
    48da:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    48de:	f040 827d 	bne.w	4ddc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xaf0>
    48e2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    48e6:	e23d      	b.n	4d64 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xa78>
  assert(exponent >= 0);
    48e8:	4b23      	ldr	r3, [pc, #140]	; (4978 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x68c>)
    48ea:	4a24      	ldr	r2, [pc, #144]	; (497c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x690>)
    48ec:	f44f 71b3 	mov.w	r1, #358	; 0x166
    48f0:	4823      	ldr	r0, [pc, #140]	; (4980 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x694>)
    48f2:	4c24      	ldr	r4, [pc, #144]	; (4984 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x698>)
    48f4:	47a0      	blx	r4
  assert(exponent <= 31);
    48f6:	4b24      	ldr	r3, [pc, #144]	; (4988 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x69c>)
    48f8:	4a20      	ldr	r2, [pc, #128]	; (497c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x690>)
    48fa:	f240 1167 	movw	r1, #359	; 0x167
    48fe:	4820      	ldr	r0, [pc, #128]	; (4980 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x694>)
    4900:	4c20      	ldr	r4, [pc, #128]	; (4984 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x698>)
    4902:	47a0      	blx	r4
  for (int b = 0; b < batches; ++b) {
    4904:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4906:	3301      	adds	r3, #1
    4908:	9312      	str	r3, [sp, #72]	; 0x48
    490a:	9a15      	ldr	r2, [sp, #84]	; 0x54
    490c:	4491      	add	r9, r2
    490e:	9a06      	ldr	r2, [sp, #24]
    4910:	9907      	ldr	r1, [sp, #28]
    4912:	440a      	add	r2, r1
    4914:	9206      	str	r2, [sp, #24]
    4916:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    4918:	4293      	cmp	r3, r2
    491a:	d00c      	beq.n	4936 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x64a>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    491c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    491e:	2b00      	cmp	r3, #0
    4920:	ddf0      	ble.n	4904 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x618>
    4922:	9b15      	ldr	r3, [sp, #84]	; 0x54
    4924:	eba9 0e03 	sub.w	lr, r9, r3
    4928:	9c08      	ldr	r4, [sp, #32]
    492a:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    492e:	9b06      	ldr	r3, [sp, #24]
    4930:	9a07      	ldr	r2, [sp, #28]
    4932:	1899      	adds	r1, r3, r2
    4934:	e237      	b.n	4da6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xaba>
    if (size_ > kMaxSmallSize) {
    4936:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4938:	2b05      	cmp	r3, #5
    493a:	dd03      	ble.n	4944 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x658>
      delete[] dims_pointer_;
    493c:	984b      	ldr	r0, [sp, #300]	; 0x12c
    493e:	b108      	cbz	r0, 4944 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x658>
    4940:	4b12      	ldr	r3, [pc, #72]	; (498c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6a0>)
    4942:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    4944:	9b50      	ldr	r3, [sp, #320]	; 0x140
    4946:	2b05      	cmp	r3, #5
    4948:	dd03      	ble.n	4952 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x666>
      delete[] dims_pointer_;
    494a:	9851      	ldr	r0, [sp, #324]	; 0x144
    494c:	b108      	cbz	r0, 4952 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x666>
    494e:	4b0f      	ldr	r3, [pc, #60]	; (498c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6a0>)
    4950:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    4952:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4954:	2b05      	cmp	r3, #5
    4956:	dd03      	ble.n	4960 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x674>
      delete[] dims_pointer_;
    4958:	9857      	ldr	r0, [sp, #348]	; 0x15c
    495a:	b108      	cbz	r0, 4960 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x674>
    495c:	4b0b      	ldr	r3, [pc, #44]	; (498c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6a0>)
    495e:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    4960:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    4962:	2b05      	cmp	r3, #5
    4964:	dd03      	ble.n	496e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x682>
      delete[] dims_pointer_;
    4966:	985d      	ldr	r0, [sp, #372]	; 0x174
    4968:	b108      	cbz	r0, 496e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x682>
    496a:	4b08      	ldr	r3, [pc, #32]	; (498c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6a0>)
    496c:	4798      	blx	r3
  return kTfLiteOk;
    496e:	2000      	movs	r0, #0
    4970:	e507      	b.n	4382 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x96>
    4972:	bf00      	nop
    4974:	000138bd 	.word	0x000138bd
    4978:	00020d8c 	.word	0x00020d8c
    497c:	00020df8 	.word	0x00020df8
    4980:	00020d9c 	.word	0x00020d9c
    4984:	000138cd 	.word	0x000138cd
    4988:	00020dcc 	.word	0x00020dcc
    498c:	000091e1 	.word	0x000091e1
  if (tensor == nullptr) {
    4990:	2f00      	cmp	r7, #0
    4992:	f000 80e6 	beq.w	4b62 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x876>
  const int dims_size = dims->size;
    4996:	68be      	ldr	r6, [r7, #8]
    4998:	f856 4b04 	ldr.w	r4, [r6], #4
    size_ = dimensions_count;
    499c:	9444      	str	r4, [sp, #272]	; 0x110
    if (dimensions_count > kMaxSmallSize) {
    499e:	2c05      	cmp	r4, #5
    49a0:	f340 80e2 	ble.w	4b68 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x87c>
      dims_pointer_ = new int32[dimensions_count];
    49a4:	4b94      	ldr	r3, [pc, #592]	; (4bf8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x90c>)
    49a6:	429c      	cmp	r4, r3
    49a8:	bf94      	ite	ls
    49aa:	00a0      	lslls	r0, r4, #2
    49ac:	f04f 30ff 	movhi.w	r0, #4294967295
    49b0:	4b92      	ldr	r3, [pc, #584]	; (4bfc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x910>)
    49b2:	4798      	blx	r3
    49b4:	9045      	str	r0, [sp, #276]	; 0x114
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    49b6:	00a2      	lsls	r2, r4, #2
    49b8:	4631      	mov	r1, r6
    49ba:	4b91      	ldr	r3, [pc, #580]	; (4c00 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x914>)
    49bc:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    49be:	687e      	ldr	r6, [r7, #4]
  if (tensor == nullptr) {
    49c0:	f1bb 0f00 	cmp.w	fp, #0
    49c4:	f000 80d2 	beq.w	4b6c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x880>
  const int dims_size = dims->size;
    49c8:	f8db 7008 	ldr.w	r7, [fp, #8]
    49cc:	f857 4b04 	ldr.w	r4, [r7], #4
    size_ = dimensions_count;
    49d0:	943e      	str	r4, [sp, #248]	; 0xf8
    if (dimensions_count > kMaxSmallSize) {
    49d2:	2c05      	cmp	r4, #5
    49d4:	f340 80ce 	ble.w	4b74 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x888>
      dims_pointer_ = new int32[dimensions_count];
    49d8:	4b87      	ldr	r3, [pc, #540]	; (4bf8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x90c>)
    49da:	429c      	cmp	r4, r3
    49dc:	bf94      	ite	ls
    49de:	00a0      	lslls	r0, r4, #2
    49e0:	f04f 30ff 	movhi.w	r0, #4294967295
    49e4:	4b85      	ldr	r3, [pc, #532]	; (4bfc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x910>)
    49e6:	4798      	blx	r3
    49e8:	903f      	str	r0, [sp, #252]	; 0xfc
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    49ea:	00a2      	lsls	r2, r4, #2
    49ec:	4639      	mov	r1, r7
    49ee:	4b84      	ldr	r3, [pc, #528]	; (4c00 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x914>)
    49f0:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    49f2:	f8db 3004 	ldr.w	r3, [fp, #4]
    49f6:	9317      	str	r3, [sp, #92]	; 0x5c
  if (tensor == nullptr) {
    49f8:	9b06      	ldr	r3, [sp, #24]
    49fa:	2b00      	cmp	r3, #0
    49fc:	f000 80bc 	beq.w	4b78 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x88c>
  const int dims_size = dims->size;
    4a00:	9b06      	ldr	r3, [sp, #24]
    4a02:	689f      	ldr	r7, [r3, #8]
    4a04:	f857 4b04 	ldr.w	r4, [r7], #4
    size_ = dimensions_count;
    4a08:	9438      	str	r4, [sp, #224]	; 0xe0
    if (dimensions_count > kMaxSmallSize) {
    4a0a:	2c05      	cmp	r4, #5
    4a0c:	f340 80b7 	ble.w	4b7e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x892>
      dims_pointer_ = new int32[dimensions_count];
    4a10:	4b79      	ldr	r3, [pc, #484]	; (4bf8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x90c>)
    4a12:	429c      	cmp	r4, r3
    4a14:	bf94      	ite	ls
    4a16:	00a0      	lslls	r0, r4, #2
    4a18:	f04f 30ff 	movhi.w	r0, #4294967295
    4a1c:	4b77      	ldr	r3, [pc, #476]	; (4bfc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x910>)
    4a1e:	4798      	blx	r3
    4a20:	9039      	str	r0, [sp, #228]	; 0xe4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4a22:	00a2      	lsls	r2, r4, #2
    4a24:	4639      	mov	r1, r7
    4a26:	4b76      	ldr	r3, [pc, #472]	; (4c00 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x914>)
    4a28:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    4a2a:	9b06      	ldr	r3, [sp, #24]
    4a2c:	685b      	ldr	r3, [r3, #4]
    4a2e:	9318      	str	r3, [sp, #96]	; 0x60
  if (tensor == nullptr) {
    4a30:	9b07      	ldr	r3, [sp, #28]
    4a32:	2b00      	cmp	r3, #0
    4a34:	f000 80a5 	beq.w	4b82 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x896>
  const int dims_size = dims->size;
    4a38:	9b07      	ldr	r3, [sp, #28]
    4a3a:	689f      	ldr	r7, [r3, #8]
    4a3c:	f857 4b04 	ldr.w	r4, [r7], #4
    size_ = dimensions_count;
    4a40:	9432      	str	r4, [sp, #200]	; 0xc8
    if (dimensions_count > kMaxSmallSize) {
    4a42:	2c05      	cmp	r4, #5
    4a44:	f340 80a0 	ble.w	4b88 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x89c>
      dims_pointer_ = new int32[dimensions_count];
    4a48:	4b6b      	ldr	r3, [pc, #428]	; (4bf8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x90c>)
    4a4a:	429c      	cmp	r4, r3
    4a4c:	bf94      	ite	ls
    4a4e:	00a0      	lslls	r0, r4, #2
    4a50:	f04f 30ff 	movhi.w	r0, #4294967295
    4a54:	4b69      	ldr	r3, [pc, #420]	; (4bfc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x910>)
    4a56:	4798      	blx	r3
    4a58:	9033      	str	r0, [sp, #204]	; 0xcc
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    4a5a:	00a2      	lsls	r2, r4, #2
    4a5c:	4639      	mov	r1, r7
    4a5e:	4b68      	ldr	r3, [pc, #416]	; (4c00 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x914>)
    4a60:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    4a62:	9b07      	ldr	r3, [sp, #28]
    4a64:	685c      	ldr	r4, [r3, #4]
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    4a66:	9b04      	ldr	r3, [sp, #16]
    4a68:	9a05      	ldr	r2, [sp, #20]
    4a6a:	4293      	cmp	r3, r2
    4a6c:	f300 808e 	bgt.w	4b8c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8a0>
  TFLITE_DCHECK_EQ(output_offset, 0);
    4a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4a72:	2b00      	cmp	r3, #0
    4a74:	f040 808c 	bne.w	4b90 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8a4>
  inline int32 DimensionsCount() const { return size_; }
    4a78:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    4a7a:	9315      	str	r3, [sp, #84]	; 0x54
    4a7c:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    4a7e:	9211      	str	r2, [sp, #68]	; 0x44
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    4a80:	1e5a      	subs	r2, r3, #1
    4a82:	f100 8087 	bmi.w	4b94 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8a8>
    4a86:	4293      	cmp	r3, r2
    4a88:	f340 8084 	ble.w	4b94 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8a8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4a8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    4a8e:	2b05      	cmp	r3, #5
    4a90:	bfcc      	ite	gt
    4a92:	9833      	ldrgt	r0, [sp, #204]	; 0xcc
    4a94:	a833      	addle	r0, sp, #204	; 0xcc
  for (int i = 0; i < dims_count; ++i) {
    4a96:	9915      	ldr	r1, [sp, #84]	; 0x54
    4a98:	2900      	cmp	r1, #0
    4a9a:	dd7d      	ble.n	4b98 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8ac>
    4a9c:	2301      	movs	r3, #1
    4a9e:	930e      	str	r3, [sp, #56]	; 0x38
    4aa0:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    4aa2:	2701      	movs	r7, #1
    4aa4:	46be      	mov	lr, r7
    4aa6:	468c      	mov	ip, r1
    4aa8:	4293      	cmp	r3, r2
    4aaa:	bf14      	ite	ne
    4aac:	f850 1023 	ldrne.w	r1, [r0, r3, lsl #2]
    4ab0:	4639      	moveq	r1, r7
    4ab2:	fb01 fe0e 	mul.w	lr, r1, lr
  for (int i = 0; i < dims_count; ++i) {
    4ab6:	3301      	adds	r3, #1
    4ab8:	459c      	cmp	ip, r3
    4aba:	d1f5      	bne.n	4aa8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x7bc>
    4abc:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    TFLITE_DCHECK_GE(i, 0);
    4ac0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4ac2:	1e99      	subs	r1, r3, #2
    4ac4:	d46b      	bmi.n	4b9e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8b2>
    TFLITE_DCHECK_LT(i, size_);
    4ac6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4ac8:	428b      	cmp	r3, r1
    4aca:	dd6a      	ble.n	4ba2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8b6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    4acc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4ace:	2b05      	cmp	r3, #5
    4ad0:	dc69      	bgt.n	4ba6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8ba>
    4ad2:	ab62      	add	r3, sp, #392	; 0x188
    4ad4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4ad8:	f851 1c8c 	ldr.w	r1, [r1, #-140]
    4adc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    4ade:	2b05      	cmp	r3, #5
    4ae0:	dc65      	bgt.n	4bae <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8c2>
    4ae2:	ab62      	add	r3, sp, #392	; 0x188
    4ae4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4ae8:	f852 3cbc 	ldr.w	r3, [r2, #-188]
    4aec:	9313      	str	r3, [sp, #76]	; 0x4c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    4aee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4af0:	428b      	cmp	r3, r1
    4af2:	d161      	bne.n	4bb8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8cc>
    TFLITE_DCHECK_GE(i, 0);
    4af4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4af6:	1e5a      	subs	r2, r3, #1
    4af8:	d460      	bmi.n	4bbc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8d0>
    TFLITE_DCHECK_LT(i, size_);
    4afa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4afc:	4293      	cmp	r3, r2
    4afe:	dd5f      	ble.n	4bc0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8d4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    4b00:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4b02:	2b05      	cmp	r3, #5
    4b04:	dc5e      	bgt.n	4bc4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8d8>
    4b06:	ab62      	add	r3, sp, #392	; 0x188
    4b08:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4b0c:	f852 3c8c 	ldr.w	r3, [r2, #-140]
    4b10:	9307      	str	r3, [sp, #28]
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
  for (int b = 0; b < batches; ++b) {
    4b12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4b14:	2b00      	cmp	r3, #0
    4b16:	f340 80a3 	ble.w	4c60 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x974>
    4b1a:	f1b8 0f00 	cmp.w	r8, #0
    4b1e:	bfd4      	ite	le
    4b20:	46cc      	movle	ip, r9
    4b22:	f04f 0c00 	movgt.w	ip, #0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    4b26:	2301      	movs	r3, #1
    4b28:	fa03 f30c 	lsl.w	r3, r3, ip
    4b2c:	3b01      	subs	r3, #1
    4b2e:	9309      	str	r3, [sp, #36]	; 0x24
  return a >> offset;
    4b30:	105b      	asrs	r3, r3, #1
    4b32:	930a      	str	r3, [sp, #40]	; 0x28
    4b34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4b36:	005b      	lsls	r3, r3, #1
    4b38:	9314      	str	r3, [sp, #80]	; 0x50
    4b3a:	9410      	str	r4, [sp, #64]	; 0x40
    4b3c:	9b07      	ldr	r3, [sp, #28]
    4b3e:	4619      	mov	r1, r3
    4b40:	9606      	str	r6, [sp, #24]
    4b42:	2300      	movs	r3, #0
    4b44:	9312      	str	r3, [sp, #72]	; 0x48
    4b46:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
    4b4a:	930b      	str	r3, [sp, #44]	; 0x2c
  std::int64_t b_64(b);
    4b4c:	9a16      	ldr	r2, [sp, #88]	; 0x58
    4b4e:	4616      	mov	r6, r2
    4b50:	17d7      	asrs	r7, r2, #31
    4b52:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    4b56:	9516      	str	r5, [sp, #88]	; 0x58
    4b58:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
    4b5c:	468a      	mov	sl, r1
    4b5e:	4696      	mov	lr, r2
    4b60:	e069      	b.n	4c36 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x94a>
  RuntimeShape() : size_(0) {}
    4b62:	2600      	movs	r6, #0
    4b64:	9644      	str	r6, [sp, #272]	; 0x110
    4b66:	e72b      	b.n	49c0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6d4>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4b68:	a845      	add	r0, sp, #276	; 0x114
    4b6a:	e724      	b.n	49b6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6ca>
  RuntimeShape() : size_(0) {}
    4b6c:	2300      	movs	r3, #0
    4b6e:	933e      	str	r3, [sp, #248]	; 0xf8
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    4b70:	9317      	str	r3, [sp, #92]	; 0x5c
    4b72:	e741      	b.n	49f8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x70c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4b74:	a83f      	add	r0, sp, #252	; 0xfc
    4b76:	e738      	b.n	49ea <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6fe>
  RuntimeShape() : size_(0) {}
    4b78:	9338      	str	r3, [sp, #224]	; 0xe0
    4b7a:	9318      	str	r3, [sp, #96]	; 0x60
    4b7c:	e758      	b.n	4a30 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x744>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4b7e:	a839      	add	r0, sp, #228	; 0xe4
    4b80:	e74f      	b.n	4a22 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x736>
  RuntimeShape() : size_(0) {}
    4b82:	2400      	movs	r4, #0
    4b84:	9432      	str	r4, [sp, #200]	; 0xc8
    4b86:	e76e      	b.n	4a66 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x77a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    4b88:	a833      	add	r0, sp, #204	; 0xcc
    4b8a:	e766      	b.n	4a5a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x76e>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    4b8c:	4b1d      	ldr	r3, [pc, #116]	; (4c04 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x918>)
    4b8e:	4798      	blx	r3
  TFLITE_DCHECK_EQ(output_offset, 0);
    4b90:	4b1c      	ldr	r3, [pc, #112]	; (4c04 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x918>)
    4b92:	4798      	blx	r3
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    4b94:	4b1b      	ldr	r3, [pc, #108]	; (4c04 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x918>)
    4b96:	4798      	blx	r3
  int flat_size = 1;
    4b98:	2301      	movs	r3, #1
    4b9a:	930e      	str	r3, [sp, #56]	; 0x38
    4b9c:	e790      	b.n	4ac0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x7d4>
    TFLITE_DCHECK_GE(i, 0);
    4b9e:	4b19      	ldr	r3, [pc, #100]	; (4c04 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x918>)
    4ba0:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    4ba2:	4b18      	ldr	r3, [pc, #96]	; (4c04 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x918>)
    4ba4:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    4ba6:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    4ba8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    4bac:	e796      	b.n	4adc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x7f0>
    4bae:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    4bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4bb4:	9313      	str	r3, [sp, #76]	; 0x4c
    4bb6:	e79a      	b.n	4aee <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x802>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    4bb8:	4b12      	ldr	r3, [pc, #72]	; (4c04 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x918>)
    4bba:	4798      	blx	r3
    TFLITE_DCHECK_GE(i, 0);
    4bbc:	4b11      	ldr	r3, [pc, #68]	; (4c04 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x918>)
    4bbe:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    4bc0:	4b10      	ldr	r3, [pc, #64]	; (4c04 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x918>)
    4bc2:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    4bc4:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    4bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4bca:	9307      	str	r3, [sp, #28]
    4bcc:	e7a1      	b.n	4b12 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x826>
    4bce:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    4bd2:	f040 8199 	bne.w	4f08 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc1c>
    4bd6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    4bda:	e15e      	b.n	4e9a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xbae>
  assert(exponent >= 0);
    4bdc:	4b0a      	ldr	r3, [pc, #40]	; (4c08 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x91c>)
    4bde:	4a0b      	ldr	r2, [pc, #44]	; (4c0c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x920>)
    4be0:	f44f 71b3 	mov.w	r1, #358	; 0x166
    4be4:	480a      	ldr	r0, [pc, #40]	; (4c10 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x924>)
    4be6:	4c0b      	ldr	r4, [pc, #44]	; (4c14 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x928>)
    4be8:	47a0      	blx	r4
  assert(exponent <= 31);
    4bea:	4b0b      	ldr	r3, [pc, #44]	; (4c18 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x92c>)
    4bec:	4a07      	ldr	r2, [pc, #28]	; (4c0c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x920>)
    4bee:	f240 1167 	movw	r1, #359	; 0x167
    4bf2:	4807      	ldr	r0, [pc, #28]	; (4c10 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x924>)
    4bf4:	4c07      	ldr	r4, [pc, #28]	; (4c14 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x928>)
    4bf6:	47a0      	blx	r4
    4bf8:	1ffffffe 	.word	0x1ffffffe
    4bfc:	00009291 	.word	0x00009291
    4c00:	00014641 	.word	0x00014641
    4c04:	000138bd 	.word	0x000138bd
    4c08:	00020d8c 	.word	0x00020d8c
    4c0c:	00020df8 	.word	0x00020df8
    4c10:	00020d9c 	.word	0x00020d9c
    4c14:	000138cd 	.word	0x000138cd
    4c18:	00020dcc 	.word	0x00020dcc
  for (int b = 0; b < batches; ++b) {
    4c1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4c1e:	3301      	adds	r3, #1
    4c20:	9312      	str	r3, [sp, #72]	; 0x48
    4c22:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4c24:	9914      	ldr	r1, [sp, #80]	; 0x50
    4c26:	440a      	add	r2, r1
    4c28:	9210      	str	r2, [sp, #64]	; 0x40
    4c2a:	9a06      	ldr	r2, [sp, #24]
    4c2c:	4452      	add	r2, sl
    4c2e:	9206      	str	r2, [sp, #24]
    4c30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4c32:	429a      	cmp	r2, r3
    4c34:	d014      	beq.n	4c60 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x974>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    4c36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4c38:	2b00      	cmp	r3, #0
    4c3a:	ddef      	ble.n	4c1c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x930>
    4c3c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4c3e:	f1a3 0904 	sub.w	r9, r3, #4
    4c42:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    4c46:	9a14      	ldr	r2, [sp, #80]	; 0x50
    4c48:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4c4a:	441a      	add	r2, r3
    4c4c:	9208      	str	r2, [sp, #32]
    4c4e:	461d      	mov	r5, r3
    4c50:	9b06      	ldr	r3, [sp, #24]
    4c52:	eb0a 0403 	add.w	r4, sl, r3
  const int32_t filter_offset = -filter->params.zero_point;
    4c56:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4c58:	4258      	negs	r0, r3
  const int32_t input_offset = -input->params.zero_point;
    4c5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4c5c:	4259      	negs	r1, r3
    4c5e:	e13d      	b.n	4edc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xbf0>
    if (size_ > kMaxSmallSize) {
    4c60:	9b15      	ldr	r3, [sp, #84]	; 0x54
    4c62:	2b05      	cmp	r3, #5
    4c64:	dd03      	ble.n	4c6e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x982>
      delete[] dims_pointer_;
    4c66:	9833      	ldr	r0, [sp, #204]	; 0xcc
    4c68:	b108      	cbz	r0, 4c6e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x982>
    4c6a:	4bb6      	ldr	r3, [pc, #728]	; (4f44 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc58>)
    4c6c:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    4c6e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    4c70:	2b05      	cmp	r3, #5
    4c72:	dd03      	ble.n	4c7c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x990>
      delete[] dims_pointer_;
    4c74:	9839      	ldr	r0, [sp, #228]	; 0xe4
    4c76:	b108      	cbz	r0, 4c7c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x990>
    4c78:	4bb2      	ldr	r3, [pc, #712]	; (4f44 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc58>)
    4c7a:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    4c7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4c7e:	2b05      	cmp	r3, #5
    4c80:	dd03      	ble.n	4c8a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x99e>
      delete[] dims_pointer_;
    4c82:	983f      	ldr	r0, [sp, #252]	; 0xfc
    4c84:	b108      	cbz	r0, 4c8a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x99e>
    4c86:	4baf      	ldr	r3, [pc, #700]	; (4f44 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc58>)
    4c88:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    4c8a:	9b44      	ldr	r3, [sp, #272]	; 0x110
    4c8c:	2b05      	cmp	r3, #5
    4c8e:	dd03      	ble.n	4c98 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x9ac>
      delete[] dims_pointer_;
    4c90:	9845      	ldr	r0, [sp, #276]	; 0x114
    4c92:	b108      	cbz	r0, 4c98 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x9ac>
    4c94:	4bab      	ldr	r3, [pc, #684]	; (4f44 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc58>)
    4c96:	4798      	blx	r3
  return kTfLiteOk;
    4c98:	2000      	movs	r0, #0
    4c9a:	f7ff bb72 	b.w	4382 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x96>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    4c9e:	0ff3      	lsrs	r3, r6, #31
    4ca0:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
  assert(exponent >= 0);
    4ca4:	f1bc 0f00 	cmp.w	ip, #0
    4ca8:	f6ff ac6f 	blt.w	458a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x29e>
  assert(exponent <= 31);
    4cac:	f1bc 0f1f 	cmp.w	ip, #31
    4cb0:	f73f ac88 	bgt.w	45c4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2d8>
  return a + b;
    4cb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4cb6:	eb02 76d3 	add.w	r6, r2, r3, lsr #31
  return a & b;
    4cba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4cbc:	401a      	ands	r2, r3
  return a >> offset;
    4cbe:	fa43 f30c 	asr.w	r3, r3, ip
  return a + b;
    4cc2:	4296      	cmp	r6, r2
    4cc4:	bfb8      	it	lt
    4cc6:	3301      	addlt	r3, #1
      }
      if (bias_data) {
        acc += bias_data[out_c];
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
      acc += output_offset;
    4cc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4cca:	4413      	add	r3, r2
      acc = std::max(acc, output_activation_min);
      acc = std::min(acc, output_activation_max);
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
    4ccc:	9a08      	ldr	r2, [sp, #32]
    4cce:	4293      	cmp	r3, r2
    4cd0:	bfb8      	it	lt
    4cd2:	4613      	movlt	r3, r2
    4cd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4cd6:	4293      	cmp	r3, r2
    4cd8:	bfa8      	it	ge
    4cda:	4613      	movge	r3, r2
    4cdc:	f805 3b01 	strb.w	r3, [r5], #1
    4ce0:	3004      	adds	r0, #4
    4ce2:	9b04      	ldr	r3, [sp, #16]
    4ce4:	449e      	add	lr, r3
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    4ce6:	45aa      	cmp	sl, r5
    4ce8:	f43f ac73 	beq.w	45d2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2e6>
      for (int d = 0; d < accum_depth; ++d) {
    4cec:	9b07      	ldr	r3, [sp, #28]
    4cee:	2b00      	cmp	r3, #0
    4cf0:	f77f ac42 	ble.w	4578 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x28c>
    4cf4:	46f3      	mov	fp, lr
    4cf6:	9f05      	ldr	r7, [sp, #20]
    4cf8:	2200      	movs	r2, #0
        int32 input_val = input_data[b * accum_depth + d];
    4cfa:	f917 6b01 	ldrsb.w	r6, [r7], #1
        int32 filter_val = filter_data[out_c * accum_depth + d];
    4cfe:	f91b 3b01 	ldrsb.w	r3, [fp], #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
    4d02:	1b1b      	subs	r3, r3, r4
    4d04:	eba6 0608 	sub.w	r6, r6, r8
    4d08:	fb06 2203 	mla	r2, r6, r3, r2
      for (int d = 0; d < accum_depth; ++d) {
    4d0c:	428f      	cmp	r7, r1
    4d0e:	d1f4      	bne.n	4cfa <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xa0e>
      if (bias_data) {
    4d10:	9b06      	ldr	r3, [sp, #24]
    4d12:	b10b      	cbz	r3, 4d18 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xa2c>
        acc += bias_data[out_c];
    4d14:	6803      	ldr	r3, [r0, #0]
    4d16:	441a      	add	r2, r3
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    4d18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4d1a:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    4d1c:	4591      	cmp	r9, r2
    4d1e:	f43f ac2d 	beq.w	457c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x290>
  std::int64_t a_64(a);
    4d22:	17d7      	asrs	r7, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    4d24:	fb09 f607 	mul.w	r6, r9, r7
    4d28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4d2a:	fb02 6603 	mla	r6, r2, r3, r6
    4d2e:	fba9 2302 	umull	r2, r3, r9, r2
    4d32:	4433      	add	r3, r6
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    4d34:	2a00      	cmp	r2, #0
    4d36:	f173 0600 	sbcs.w	r6, r3, #0
    4d3a:	f2c0 8081 	blt.w	4e40 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb54>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    4d3e:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    4d42:	f143 0300 	adc.w	r3, r3, #0
    4d46:	4616      	mov	r6, r2
    4d48:	461f      	mov	r7, r3
    4d4a:	2a00      	cmp	r2, #0
    4d4c:	f173 0b00 	sbcs.w	fp, r3, #0
    4d50:	daa5      	bge.n	4c9e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x9b2>
    4d52:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    4d56:	2700      	movs	r7, #0
    4d58:	18b6      	adds	r6, r6, r2
    4d5a:	415f      	adcs	r7, r3
    4d5c:	e79f      	b.n	4c9e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x9b2>
    4d5e:	0ff3      	lsrs	r3, r6, #31
    4d60:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
  assert(exponent >= 0);
    4d64:	2800      	cmp	r0, #0
    4d66:	f6ff adbf 	blt.w	48e8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5fc>
  assert(exponent <= 31);
    4d6a:	281f      	cmp	r0, #31
    4d6c:	f73f adc3 	bgt.w	48f6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x60a>
  return a + b;
    4d70:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4d72:	eb02 76d3 	add.w	r6, r2, r3, lsr #31
  return a & b;
    4d76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4d78:	401a      	ands	r2, r3
  return a >> offset;
    4d7a:	4103      	asrs	r3, r0
  return a + b;
    4d7c:	4296      	cmp	r6, r2
    4d7e:	bfb8      	it	lt
    4d80:	3301      	addlt	r3, #1
      acc += output_offset;
    4d82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4d84:	4413      	add	r3, r2
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
    4d86:	9a04      	ldr	r2, [sp, #16]
    4d88:	4293      	cmp	r3, r2
    4d8a:	bfb8      	it	lt
    4d8c:	4613      	movlt	r3, r2
    4d8e:	9a05      	ldr	r2, [sp, #20]
    4d90:	4293      	cmp	r3, r2
    4d92:	bfa8      	it	ge
    4d94:	4613      	movge	r3, r2
    4d96:	f80e 3b01 	strb.w	r3, [lr], #1
    4d9a:	3404      	adds	r4, #4
    4d9c:	9b07      	ldr	r3, [sp, #28]
    4d9e:	4498      	add	r8, r3
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    4da0:	45ce      	cmp	lr, r9
    4da2:	f43f adaf 	beq.w	4904 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x618>
      for (int d = 0; d < accum_depth; ++d) {
    4da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4da8:	2b00      	cmp	r3, #0
    4daa:	f77f ad94 	ble.w	48d6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5ea>
    4dae:	46c3      	mov	fp, r8
    4db0:	9f06      	ldr	r7, [sp, #24]
    4db2:	2200      	movs	r2, #0
        int32 input_val = input_data[b * accum_depth + d];
    4db4:	f817 6b01 	ldrb.w	r6, [r7], #1
        int32 filter_val = filter_data[out_c * accum_depth + d];
    4db8:	f81b 3b01 	ldrb.w	r3, [fp], #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
    4dbc:	eba3 030a 	sub.w	r3, r3, sl
    4dc0:	1b76      	subs	r6, r6, r5
    4dc2:	fb06 2203 	mla	r2, r6, r3, r2
      for (int d = 0; d < accum_depth; ++d) {
    4dc6:	428f      	cmp	r7, r1
    4dc8:	d1f4      	bne.n	4db4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xac8>
      if (bias_data) {
    4dca:	9b08      	ldr	r3, [sp, #32]
    4dcc:	b10b      	cbz	r3, 4dd2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xae6>
        acc += bias_data[out_c];
    4dce:	6823      	ldr	r3, [r4, #0]
    4dd0:	441a      	add	r2, r3
    4dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4dd4:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    4dd6:	4594      	cmp	ip, r2
    4dd8:	f43f ad7f 	beq.w	48da <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x5ee>
  std::int64_t a_64(a);
    4ddc:	17d7      	asrs	r7, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    4dde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4de0:	fb02 f603 	mul.w	r6, r2, r3
    4de4:	fb0c 6607 	mla	r6, ip, r7, r6
    4de8:	fba2 230c 	umull	r2, r3, r2, ip
    4dec:	4433      	add	r3, r6
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    4dee:	2a00      	cmp	r2, #0
    4df0:	f173 0600 	sbcs.w	r6, r3, #0
    4df4:	db39      	blt.n	4e6a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb7e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    4df6:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    4dfa:	f143 0300 	adc.w	r3, r3, #0
    4dfe:	4616      	mov	r6, r2
    4e00:	461f      	mov	r7, r3
    4e02:	2a00      	cmp	r2, #0
    4e04:	f173 0b00 	sbcs.w	fp, r3, #0
    4e08:	daa9      	bge.n	4d5e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xa72>
    4e0a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    4e0e:	2700      	movs	r7, #0
    4e10:	18b6      	adds	r6, r6, r2
    4e12:	415f      	adcs	r7, r3
    4e14:	e7a3      	b.n	4d5e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xa72>
    4e16:	4e4c      	ldr	r6, [pc, #304]	; (4f48 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc5c>)
    4e18:	f04f 37ff 	mov.w	r7, #4294967295
    4e1c:	18b6      	adds	r6, r6, r2
    4e1e:	415f      	adcs	r7, r3
    4e20:	4632      	mov	r2, r6
    4e22:	463b      	mov	r3, r7
    4e24:	2e00      	cmp	r6, #0
    4e26:	f177 0b00 	sbcs.w	fp, r7, #0
    4e2a:	db03      	blt.n	4e34 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb48>
    4e2c:	0ff3      	lsrs	r3, r6, #31
    4e2e:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
    4e32:	e032      	b.n	4e9a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xbae>
    4e34:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    4e38:	2700      	movs	r7, #0
    4e3a:	18b6      	adds	r6, r6, r2
    4e3c:	415f      	adcs	r7, r3
    4e3e:	e7f5      	b.n	4e2c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb40>
    4e40:	4e41      	ldr	r6, [pc, #260]	; (4f48 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc5c>)
    4e42:	f04f 37ff 	mov.w	r7, #4294967295
    4e46:	18b6      	adds	r6, r6, r2
    4e48:	415f      	adcs	r7, r3
    4e4a:	4632      	mov	r2, r6
    4e4c:	463b      	mov	r3, r7
    4e4e:	2e00      	cmp	r6, #0
    4e50:	f177 0b00 	sbcs.w	fp, r7, #0
    4e54:	db03      	blt.n	4e5e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb72>
    4e56:	0ff3      	lsrs	r3, r6, #31
    4e58:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
    4e5c:	e722      	b.n	4ca4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x9b8>
    4e5e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    4e62:	2700      	movs	r7, #0
    4e64:	18b6      	adds	r6, r6, r2
    4e66:	415f      	adcs	r7, r3
    4e68:	e7f5      	b.n	4e56 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb6a>
    4e6a:	4e37      	ldr	r6, [pc, #220]	; (4f48 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc5c>)
    4e6c:	f04f 37ff 	mov.w	r7, #4294967295
    4e70:	18b6      	adds	r6, r6, r2
    4e72:	415f      	adcs	r7, r3
    4e74:	4632      	mov	r2, r6
    4e76:	463b      	mov	r3, r7
    4e78:	2e00      	cmp	r6, #0
    4e7a:	f177 0b00 	sbcs.w	fp, r7, #0
    4e7e:	db03      	blt.n	4e88 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb9c>
    4e80:	0ff3      	lsrs	r3, r6, #31
    4e82:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
    4e86:	e76d      	b.n	4d64 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xa78>
    4e88:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    4e8c:	2700      	movs	r7, #0
    4e8e:	18b6      	adds	r6, r6, r2
    4e90:	415f      	adcs	r7, r3
    4e92:	e7f5      	b.n	4e80 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb94>
    4e94:	0ff3      	lsrs	r3, r6, #31
    4e96:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
  assert(exponent >= 0);
    4e9a:	f1bc 0f00 	cmp.w	ip, #0
    4e9e:	f6ff ae9d 	blt.w	4bdc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8f0>
  assert(exponent <= 31);
    4ea2:	f1bc 0f1f 	cmp.w	ip, #31
    4ea6:	f73f aea0 	bgt.w	4bea <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8fe>
  return a + b;
    4eaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4eac:	eb02 76d3 	add.w	r6, r2, r3, lsr #31
  return a & b;
    4eb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4eb2:	401a      	ands	r2, r3
  return a >> offset;
    4eb4:	fa43 f30c 	asr.w	r3, r3, ip
  return a + b;
    4eb8:	4296      	cmp	r6, r2
    4eba:	bfb8      	it	lt
    4ebc:	3301      	addlt	r3, #1
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
      // Saturate, cast to int16, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
      accum = std::min(accum, output_activation_max - output_offset);
      accum += output_offset;
      output_data[out_c + output_depth * b] = accum;
    4ebe:	9a04      	ldr	r2, [sp, #16]
    4ec0:	4293      	cmp	r3, r2
    4ec2:	bfb8      	it	lt
    4ec4:	4613      	movlt	r3, r2
    4ec6:	9a05      	ldr	r2, [sp, #20]
    4ec8:	4293      	cmp	r3, r2
    4eca:	bfa8      	it	ge
    4ecc:	4613      	movge	r3, r2
    4ece:	f825 3b02 	strh.w	r3, [r5], #2
    4ed2:	44d0      	add	r8, sl
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    4ed4:	9b08      	ldr	r3, [sp, #32]
    4ed6:	429d      	cmp	r5, r3
    4ed8:	f43f aea0 	beq.w	4c1c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x930>
      int32 accum = bias_data[out_c];
    4edc:	f859 2f04 	ldr.w	r2, [r9, #4]!
      for (int d = 0; d < accum_depth; ++d) {
    4ee0:	9b07      	ldr	r3, [sp, #28]
    4ee2:	2b00      	cmp	r3, #0
    4ee4:	dd0b      	ble.n	4efe <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc12>
    4ee6:	46c3      	mov	fp, r8
    4ee8:	9f06      	ldr	r7, [sp, #24]
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
    4eea:	f817 6b01 	ldrb.w	r6, [r7], #1
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
    4eee:	f81b 3b01 	ldrb.w	r3, [fp], #1
    4ef2:	4403      	add	r3, r0
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
    4ef4:	440e      	add	r6, r1
        accum += filter_val * input_val;
    4ef6:	fb16 2203 	smlabb	r2, r6, r3, r2
      for (int d = 0; d < accum_depth; ++d) {
    4efa:	42a7      	cmp	r7, r4
    4efc:	d1f5      	bne.n	4eea <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xbfe>
    4efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4f00:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    4f02:	4596      	cmp	lr, r2
    4f04:	f43f ae63 	beq.w	4bce <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x8e2>
  std::int64_t a_64(a);
    4f08:	17d7      	asrs	r7, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    4f0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4f0c:	fb02 f603 	mul.w	r6, r2, r3
    4f10:	fb0e 6607 	mla	r6, lr, r7, r6
    4f14:	fba2 230e 	umull	r2, r3, r2, lr
    4f18:	4433      	add	r3, r6
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    4f1a:	2a00      	cmp	r2, #0
    4f1c:	f173 0600 	sbcs.w	r6, r3, #0
    4f20:	f6ff af79 	blt.w	4e16 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb2a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    4f24:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    4f28:	f143 0300 	adc.w	r3, r3, #0
    4f2c:	4616      	mov	r6, r2
    4f2e:	461f      	mov	r7, r3
    4f30:	2a00      	cmp	r2, #0
    4f32:	f173 0b00 	sbcs.w	fp, r3, #0
    4f36:	daad      	bge.n	4e94 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xba8>
    4f38:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    4f3c:	2700      	movs	r7, #0
    4f3e:	18b6      	adds	r6, r6, r2
    4f40:	415f      	adcs	r7, r3
    4f42:	e7a7      	b.n	4e94 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xba8>
    4f44:	000091e1 	.word	0x000091e1
    4f48:	c0000001 	.word	0xc0000001

00004f4c <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:

}  // namespace fully_connected

TfLiteRegistration Register_FULLY_CONNECTED() {
    4f4c:	b470      	push	{r4, r5, r6}
    4f4e:	4606      	mov	r6, r0
          /*prepare=*/fully_connected::Prepare,
          /*invoke=*/fully_connected::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    4f50:	4604      	mov	r4, r0
    4f52:	4d05      	ldr	r5, [pc, #20]	; (4f68 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x1c>)
    4f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4f58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    4f5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    4f60:	4630      	mov	r0, r6
    4f62:	bc70      	pop	{r4, r5, r6}
    4f64:	4770      	bx	lr
    4f66:	bf00      	nop
    4f68:	00020e54 	.word	0x00020e54

00004f6c <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    4f6c:	4288      	cmp	r0, r1
    4f6e:	d01c      	beq.n	4faa <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x3e>
// A FixedPoint multiplication is just a
// SaturatingRoundingDoublingHighMul operation on the underlying
// raw integer values. The IntegerBits simply add up, as is obvious
// from the fact that the range is [-2^IntegerBits, 2^IntegerBits).
template <typename tRawType, int tIntegerBits_a, int tIntegerBits_b>
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    4f70:	b430      	push	{r4, r5}
  std::int64_t a_64(a);
    4f72:	17c5      	asrs	r5, r0, #31
  std::int64_t b_64(b);
    4f74:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    4f76:	fb00 f303 	mul.w	r3, r0, r3
    4f7a:	fb01 3305 	mla	r3, r1, r5, r3
    4f7e:	fba0 0101 	umull	r0, r1, r0, r1
    4f82:	4419      	add	r1, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    4f84:	2800      	cmp	r0, #0
    4f86:	f171 0300 	sbcs.w	r3, r1, #0
    4f8a:	db14      	blt.n	4fb6 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    4f8c:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    4f90:	f141 0100 	adc.w	r1, r1, #0
    4f94:	4602      	mov	r2, r0
    4f96:	460b      	mov	r3, r1
    4f98:	2800      	cmp	r0, #0
    4f9a:	f171 0400 	sbcs.w	r4, r1, #0
    4f9e:	db1f      	blt.n	4fe0 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x74>
    4fa0:	0fd0      	lsrs	r0, r2, #31
    4fa2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    FixedPoint<tRawType, tIntegerBits_a> a,
    FixedPoint<tRawType, tIntegerBits_b> b) {
  FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> c;
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
  return c;
}
    4fa6:	bc30      	pop	{r4, r5}
    4fa8:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    4faa:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    4fae:	d1df      	bne.n	4f70 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4>
    4fb0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4fb4:	4770      	bx	lr
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    4fb6:	4a0d      	ldr	r2, [pc, #52]	; (4fec <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x80>)
    4fb8:	f04f 33ff 	mov.w	r3, #4294967295
    4fbc:	1880      	adds	r0, r0, r2
    4fbe:	4159      	adcs	r1, r3
    4fc0:	4602      	mov	r2, r0
    4fc2:	460b      	mov	r3, r1
    4fc4:	2800      	cmp	r0, #0
    4fc6:	f171 0400 	sbcs.w	r4, r1, #0
    4fca:	db03      	blt.n	4fd4 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x68>
    4fcc:	0fd0      	lsrs	r0, r2, #31
    4fce:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    4fd2:	e7e8      	b.n	4fa6 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x3a>
    4fd4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4fd8:	2300      	movs	r3, #0
    4fda:	1812      	adds	r2, r2, r0
    4fdc:	414b      	adcs	r3, r1
    4fde:	e7f5      	b.n	4fcc <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x60>
    4fe0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4fe4:	2300      	movs	r3, #0
    4fe6:	1812      	adds	r2, r2, r0
    4fe8:	414b      	adcs	r3, r1
    4fea:	e7d9      	b.n	4fa0 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x34>
    4fec:	c0000001 	.word	0xc0000001

00004ff0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
    4ff0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  std::int64_t sum = a64 + b64;
    4ff4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4ff8:	2300      	movs	r3, #0
    4ffa:	1814      	adds	r4, r2, r0
    4ffc:	eb43 75e0 	adc.w	r5, r3, r0, asr #31
  std::int64_t sign = sum >= 0 ? 1 : -1;
    5000:	2c00      	cmp	r4, #0
    5002:	f175 0300 	sbcs.w	r3, r5, #0
    5006:	bfb9      	ittee	lt
    5008:	f04f 32ff 	movlt.w	r2, #4294967295
    500c:	f04f 33ff 	movlt.w	r3, #4294967295
    5010:	2201      	movge	r2, #1
    5012:	2300      	movge	r3, #0
  return static_cast<std::int32_t>((sum + sign) / 2);
    5014:	18a0      	adds	r0, r4, r2
    5016:	eb45 0103 	adc.w	r1, r5, r3
    501a:	0fcb      	lsrs	r3, r1, #31
    501c:	18c0      	adds	r0, r0, r3
    501e:	f141 0100 	adc.w	r1, r1, #0
    5022:	1049      	asrs	r1, r1, #1
    5024:	ea4f 0030 	mov.w	r0, r0, rrx
    5028:	4683      	mov	fp, r0
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
    502a:	4956      	ldr	r1, [pc, #344]	; (5184 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x194>)
    502c:	4b56      	ldr	r3, [pc, #344]	; (5188 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x198>)
    502e:	4798      	blx	r3
  return a + b;
    5030:	f100 345a 	add.w	r4, r0, #1515870810	; 0x5a5a5a5a
    5034:	2503      	movs	r5, #3
  for (int i = 0; i < 3; i++) {
    F2 half_denominator_times_x = half_denominator * x;
    5036:	f8df a150 	ldr.w	sl, [pc, #336]	; 5188 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x198>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    503a:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
    503e:	f04f 0900 	mov.w	r9, #0
    5042:	e068      	b.n	5116 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x126>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    5044:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    5048:	d16c      	bne.n	5124 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x134>
  return a ? BitNot(zero) : zero;
    504a:	f04f 3eff 	mov.w	lr, #4294967295
    504e:	2000      	movs	r0, #0
             : wide_shifted > max ? max
    5050:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    5054:	e050      	b.n	50f8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x108>
             ? min
    5056:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    505a:	e04d      	b.n	50f8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x108>
  return a ? BitNot(zero) : zero;
    505c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    5060:	bfb4      	ite	lt
    5062:	2300      	movlt	r3, #0
    5064:	2301      	movge	r3, #1
    5066:	4258      	negs	r0, r3
    5068:	f1b4 4f40 	cmp.w	r4, #3221225472	; 0xc0000000
    506c:	bfcc      	ite	gt
    506e:	2200      	movgt	r2, #0
    5070:	2201      	movle	r2, #1
    5072:	4251      	negs	r1, r2
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
    5074:	17e5      	asrs	r5, r4, #31
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    5076:	1924      	adds	r4, r4, r4
    5078:	416d      	adcs	r5, r5
             ? min
    507a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    507e:	f175 36ff 	sbcs.w	r6, r5, #4294967295
    5082:	db14      	blt.n	50ae <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbe>
             : wide_shifted > max ? max
    5084:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    5088:	2700      	movs	r7, #0
    508a:	42a6      	cmp	r6, r4
    508c:	eb77 0605 	sbcs.w	r6, r7, r5
    5090:	bfb8      	it	lt
    5092:	f06f 4400 	mvnlt.w	r4, #2147483648	; 0x80000000
  return a & b;
    5096:	3b01      	subs	r3, #1
    5098:	401c      	ands	r4, r3
    509a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  return a ^ b;
    509e:	4060      	eors	r0, r4
  return a & b;
    50a0:	3a01      	subs	r2, #1
    50a2:	4010      	ands	r0, r2
    50a4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
  return a ^ b;
    50a8:	4058      	eors	r0, r3
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
}
    50aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
             ? min
    50ae:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    50b2:	e7f0      	b.n	5096 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa6>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    50b4:	0fd1      	lsrs	r1, r2, #31
    50b6:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
  return a ? BitNot(zero) : zero;
    50ba:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    50be:	f04f 3eff 	mov.w	lr, #4294967295
    50c2:	bfb8      	it	lt
    50c4:	f04f 0e00 	movlt.w	lr, #0
    50c8:	f1b1 4f60 	cmp.w	r1, #3758096384	; 0xe0000000
    50cc:	f04f 30ff 	mov.w	r0, #4294967295
    50d0:	bfc8      	it	gt
    50d2:	2000      	movgt	r0, #0
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
    50d4:	460a      	mov	r2, r1
    50d6:	17cb      	asrs	r3, r1, #31
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    50d8:	009f      	lsls	r7, r3, #2
    50da:	ea47 7791 	orr.w	r7, r7, r1, lsr #30
    50de:	008e      	lsls	r6, r1, #2
             ? min
    50e0:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
    50e4:	f177 33ff 	sbcs.w	r3, r7, #4294967295
    50e8:	dbb5      	blt.n	5056 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x66>
             : wide_shifted > max ? max
    50ea:	45b0      	cmp	r8, r6
    50ec:	eb79 0307 	sbcs.w	r3, r9, r7
    50f0:	bfac      	ite	ge
    50f2:	4632      	movge	r2, r6
    50f4:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
    50f8:	ea6f 030e 	mvn.w	r3, lr
  return a & b;
    50fc:	4013      	ands	r3, r2
    50fe:	f02e 4e00 	bic.w	lr, lr, #2147483648	; 0x80000000
  return a ^ b;
    5102:	ea83 030e 	eor.w	r3, r3, lr
  return ~a;
    5106:	43c2      	mvns	r2, r0
  return a & b;
    5108:	4013      	ands	r3, r2
    510a:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  return a ^ b;
    510e:	4043      	eors	r3, r0
  return a + b;
    5110:	441c      	add	r4, r3
  for (int i = 0; i < 3; i++) {
    5112:	3d01      	subs	r5, #1
    5114:	d0a2      	beq.n	505c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x6c>
    F2 half_denominator_times_x = half_denominator * x;
    5116:	4621      	mov	r1, r4
    5118:	4658      	mov	r0, fp
    511a:	47d0      	blx	sl
  return a - b;
    511c:	f1c0 5e00 	rsb	lr, r0, #536870912	; 0x20000000
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    5120:	4574      	cmp	r4, lr
    5122:	d08f      	beq.n	5044 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x54>
  std::int64_t b_64(b);
    5124:	4672      	mov	r2, lr
    5126:	17d3      	asrs	r3, r2, #31
  std::int64_t a_64(a);
    5128:	17e1      	asrs	r1, r4, #31
  std::int64_t ab_64 = a_64 * b_64;
    512a:	fb0e f201 	mul.w	r2, lr, r1
    512e:	fb04 2303 	mla	r3, r4, r3, r2
    5132:	fbae 0104 	umull	r0, r1, lr, r4
    5136:	4419      	add	r1, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    5138:	2800      	cmp	r0, #0
    513a:	f171 0300 	sbcs.w	r3, r1, #0
    513e:	db0e      	blt.n	515e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x16e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    5140:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    5144:	f141 0100 	adc.w	r1, r1, #0
    5148:	4602      	mov	r2, r0
    514a:	460b      	mov	r3, r1
    514c:	2800      	cmp	r0, #0
    514e:	f171 0e00 	sbcs.w	lr, r1, #0
    5152:	daaf      	bge.n	50b4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xc4>
    5154:	eb10 0208 	adds.w	r2, r0, r8
    5158:	eb41 0309 	adc.w	r3, r1, r9
    515c:	e7aa      	b.n	50b4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xc4>
    515e:	4a0b      	ldr	r2, [pc, #44]	; (518c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x19c>)
    5160:	f04f 33ff 	mov.w	r3, #4294967295
    5164:	1812      	adds	r2, r2, r0
    5166:	414b      	adcs	r3, r1
    5168:	4610      	mov	r0, r2
    516a:	4619      	mov	r1, r3
    516c:	2a00      	cmp	r2, #0
    516e:	f173 0e00 	sbcs.w	lr, r3, #0
    5172:	da03      	bge.n	517c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x18c>
    5174:	eb12 0008 	adds.w	r0, r2, r8
    5178:	eb43 0109 	adc.w	r1, r3, r9
    517c:	0fc3      	lsrs	r3, r0, #31
    517e:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
    5182:	e79a      	b.n	50ba <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xca>
    5184:	c3c3c3c4 	.word	0xc3c3c3c4
    5188:	00004f6d 	.word	0x00004f6d
    518c:	c0000001 	.word	0xc0000001

00005190 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    5190:	4288      	cmp	r0, r1
    5192:	d01c      	beq.n	51ce <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x3e>
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    5194:	b430      	push	{r4, r5}
  std::int64_t a_64(a);
    5196:	17c5      	asrs	r5, r0, #31
  std::int64_t b_64(b);
    5198:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    519a:	fb00 f303 	mul.w	r3, r0, r3
    519e:	fb01 3305 	mla	r3, r1, r5, r3
    51a2:	fba0 0101 	umull	r0, r1, r0, r1
    51a6:	4419      	add	r1, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    51a8:	2800      	cmp	r0, #0
    51aa:	f171 0300 	sbcs.w	r3, r1, #0
    51ae:	db14      	blt.n	51da <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    51b0:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    51b4:	f141 0100 	adc.w	r1, r1, #0
    51b8:	4602      	mov	r2, r0
    51ba:	460b      	mov	r3, r1
    51bc:	2800      	cmp	r0, #0
    51be:	f171 0400 	sbcs.w	r4, r1, #0
    51c2:	db1f      	blt.n	5204 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x74>
    51c4:	0fd0      	lsrs	r0, r2, #31
    51c6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
}
    51ca:	bc30      	pop	{r4, r5}
    51cc:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    51ce:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    51d2:	d1df      	bne.n	5194 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4>
    51d4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    51d8:	4770      	bx	lr
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    51da:	4a0d      	ldr	r2, [pc, #52]	; (5210 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x80>)
    51dc:	f04f 33ff 	mov.w	r3, #4294967295
    51e0:	1880      	adds	r0, r0, r2
    51e2:	4159      	adcs	r1, r3
    51e4:	4602      	mov	r2, r0
    51e6:	460b      	mov	r3, r1
    51e8:	2800      	cmp	r0, #0
    51ea:	f171 0400 	sbcs.w	r4, r1, #0
    51ee:	db03      	blt.n	51f8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x68>
    51f0:	0fd0      	lsrs	r0, r2, #31
    51f2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    51f6:	e7e8      	b.n	51ca <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x3a>
    51f8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    51fc:	2300      	movs	r3, #0
    51fe:	1812      	adds	r2, r2, r0
    5200:	414b      	adcs	r3, r1
    5202:	e7f5      	b.n	51f0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x60>
    5204:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    5208:	2300      	movs	r3, #0
    520a:	1812      	adds	r2, r2, r0
    520c:	414b      	adcs	r3, r1
    520e:	e7d9      	b.n	51c4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x34>
    5210:	c0000001 	.word	0xc0000001

00005214 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
    5214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
    5218:	4f14      	ldr	r7, [pc, #80]	; (526c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x58>)
  return a + b;
    521a:	f100 5680 	add.w	r6, r0, #268435456	; 0x10000000
  F x2 = x * x;
    521e:	4631      	mov	r1, r6
    5220:	4630      	mov	r0, r6
    5222:	4d13      	ldr	r5, [pc, #76]	; (5270 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x5c>)
    5224:	47a8      	blx	r5
    5226:	4604      	mov	r4, r0
  F x3 = x2 * x;
    5228:	4631      	mov	r1, r6
    522a:	47a8      	blx	r5
    522c:	4680      	mov	r8, r0
  F x4 = x2 * x2;
    522e:	4621      	mov	r1, r4
    5230:	4620      	mov	r0, r4
    5232:	47a8      	blx	r5
  return a & b;
    5234:	0fc3      	lsrs	r3, r0, #31
  return a + b;
    5236:	3301      	adds	r3, #1
  return a & b;
    5238:	f000 0203 	and.w	r2, r0, #3
  return a >> offset;
    523c:	1080      	asrs	r0, r0, #2
  return a + b;
    523e:	4293      	cmp	r3, r2
    5240:	bfb8      	it	lt
    5242:	3001      	addlt	r0, #1
      SaturatingRoundingMultiplyByPOT<-1>(
    5244:	490b      	ldr	r1, [pc, #44]	; (5274 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x60>)
    5246:	4440      	add	r0, r8
    5248:	47a8      	blx	r5
  return a + b;
    524a:	4420      	add	r0, r4
  return a & b;
    524c:	f000 0301 	and.w	r3, r0, #1
  return a ? BitNot(zero) : zero;
    5250:	ebb3 7fd0 	cmp.w	r3, r0, lsr #31
  return a & b;
    5254:	bfcc      	ite	gt
    5256:	2401      	movgt	r4, #1
    5258:	2400      	movle	r4, #0
  return a + b;
    525a:	eb04 0060 	add.w	r0, r4, r0, asr #1
  return AddSaturatingIf16Bit(
    525e:	1981      	adds	r1, r0, r6
    5260:	4638      	mov	r0, r7
    5262:	47a8      	blx	r5
}
    5264:	4438      	add	r0, r7
    5266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    526a:	bf00      	nop
    526c:	70f5a894 	.word	0x70f5a894
    5270:	00005191 	.word	0x00005191
    5274:	2aaaaaab 	.word	0x2aaaaaab

00005278 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE>:
};

TfLiteStatus CalculateOpData(const TfLiteContext* context,
                             const TfLitePoolParams* params,
                             const TfLiteTensor* input,
                             const TfLiteTensor* output, OpData* data) {
    5278:	b5f0      	push	{r4, r5, r6, r7, lr}
    527a:	9c05      	ldr	r4, [sp, #20]
  return t->dims->data[dim];
    527c:	6893      	ldr	r3, [r2, #8]
    527e:	f8d3 e008 	ldr.w	lr, [r3, #8]
    5282:	68dd      	ldr	r5, [r3, #12]
  int width = SizeOfDimension(input, 2);

  int out_height, out_width;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
    5284:	688f      	ldr	r7, [r1, #8]
    5286:	684a      	ldr	r2, [r1, #4]
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
    5288:	f8d1 c010 	ldr.w	ip, [r1, #16]
      params->filter_width, params->padding, &out_height, &out_width);
    528c:	68ce      	ldr	r6, [r1, #12]
    528e:	780b      	ldrb	r3, [r1, #0]
  switch (padding) {
    5290:	2b01      	cmp	r3, #1
    5292:	d008      	beq.n	52a6 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE+0x2e>
    5294:	2b02      	cmp	r3, #2
    5296:	d02c      	beq.n	52f2 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE+0x7a>
    5298:	2b01      	cmp	r3, #1
    529a:	d035      	beq.n	5308 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE+0x90>
    529c:	2b02      	cmp	r3, #2
    529e:	d035      	beq.n	530c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE+0x94>
      return 0;
    52a0:	2100      	movs	r1, #0
    52a2:	460b      	mov	r3, r1
    52a4:	e008      	b.n	52b8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE+0x40>
      return (image_size + stride - 1) / stride;
    52a6:	18a9      	adds	r1, r5, r2
    52a8:	3901      	subs	r1, #1
    52aa:	fb91 f1f2 	sdiv	r1, r1, r2
    52ae:	eb07 000e 	add.w	r0, r7, lr
    52b2:	3801      	subs	r0, #1
    52b4:	fb90 f3f7 	sdiv	r3, r0, r7
      ((out_size - 1) * stride + effective_filter_size - in_size);
    52b8:	3b01      	subs	r3, #1
    52ba:	fb07 c303 	mla	r3, r7, r3, ip
    52be:	eba3 030e 	sub.w	r3, r3, lr
  total_padding = total_padding > 0 ? total_padding : 0;
    52c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
      ((out_size - 1) * stride + effective_filter_size - in_size);
    52c6:	3901      	subs	r1, #1
    52c8:	fb02 6201 	mla	r2, r2, r1, r6
    52cc:	1b52      	subs	r2, r2, r5
  total_padding = total_padding > 0 ? total_padding : 0;
    52ce:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  return total_padding / 2;
    52d2:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
    52d6:	1049      	asrs	r1, r1, #1
    52d8:	6021      	str	r1, [r4, #0]
    52da:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
    52de:	1049      	asrs	r1, r1, #1
    52e0:	6061      	str	r1, [r4, #4]
  *offset = total_padding % 2;
    52e2:	f002 0201 	and.w	r2, r2, #1
    52e6:	60a2      	str	r2, [r4, #8]
    52e8:	f003 0301 	and.w	r3, r3, #1
    52ec:	60e3      	str	r3, [r4, #12]

  return kTfLiteOk;
}
    52ee:	2000      	movs	r0, #0
    52f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return (image_size + stride - effective_filter_size) / stride;
    52f2:	18a9      	adds	r1, r5, r2
    52f4:	1b89      	subs	r1, r1, r6
    52f6:	fb91 f1f2 	sdiv	r1, r1, r2
    52fa:	eb07 000e 	add.w	r0, r7, lr
    52fe:	eba0 000c 	sub.w	r0, r0, ip
    5302:	fb90 f3f7 	sdiv	r3, r0, r7
    5306:	e7d7      	b.n	52b8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE+0x40>
      return 0;
    5308:	2100      	movs	r1, #0
    530a:	e7d0      	b.n	52ae <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE+0x36>
    530c:	2100      	movs	r1, #0
    530e:	e7f4      	b.n	52fa <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE+0x82>

00005310 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:
      return kTfLiteError;
  }
  return kTfLiteOk;
}

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
    5310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5314:	b0db      	sub	sp, #364	; 0x16c
    5316:	4604      	mov	r4, r0
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
    5318:	f8d1 9014 	ldr.w	r9, [r1, #20]
  return &context->tensors[node->inputs->data[index]];
    531c:	6887      	ldr	r7, [r0, #8]
    531e:	680b      	ldr	r3, [r1, #0]
    5320:	685e      	ldr	r6, [r3, #4]
    5322:	01b6      	lsls	r6, r6, #6
    5324:	eb07 0806 	add.w	r8, r7, r6
  return &context->tensors[node->outputs->data[index]];
    5328:	684b      	ldr	r3, [r1, #4]
    532a:	685d      	ldr	r5, [r3, #4]
    532c:	eb07 1585 	add.w	r5, r7, r5, lsl #6
  OpData data;

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
    5330:	ab32      	add	r3, sp, #200	; 0xc8
    5332:	9300      	str	r3, [sp, #0]
    5334:	462b      	mov	r3, r5
    5336:	4642      	mov	r2, r8
    5338:	4649      	mov	r1, r9
    533a:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 5618 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x308>
    533e:	47d0      	blx	sl
    5340:	b980      	cbnz	r0, 5364 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x54>

  switch (input->type) {
    5342:	5db8      	ldrb	r0, [r7, r6]
    5344:	2803      	cmp	r0, #3
    5346:	f000 81f3 	beq.w	5730 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x420>
    534a:	2809      	cmp	r0, #9
    534c:	f000 81f0 	beq.w	5730 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x420>
    5350:	2801      	cmp	r0, #1
    5352:	d00a      	beq.n	536a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5a>
    case kTfLiteUInt8:
    case kTfLiteInt8:
      MaxEvalQuantized(context, node, params, &data, input, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
    5354:	6965      	ldr	r5, [r4, #20]
    5356:	4ba6      	ldr	r3, [pc, #664]	; (55f0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e0>)
    5358:	4798      	blx	r3
    535a:	4602      	mov	r2, r0
    535c:	49a5      	ldr	r1, [pc, #660]	; (55f4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    535e:	4620      	mov	r0, r4
    5360:	47a8      	blx	r5
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
    5362:	2001      	movs	r0, #1
  }
  return kTfLiteOk;
}
    5364:	b05b      	add	sp, #364	; 0x16c
    5366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  CalculateActivationRange(params->activation, &activation_min,
    536a:	f899 3014 	ldrb.w	r3, [r9, #20]
  if (activation == kTfLiteActRelu) {
    536e:	2b01      	cmp	r3, #1
    5370:	f000 80d4 	beq.w	551c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x20c>
  } else if (activation == kTfLiteActRelu6) {
    5374:	2b03      	cmp	r3, #3
    5376:	f000 80d6 	beq.w	5526 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x216>
  } else if (activation == kTfLiteActReluN1To1) {
    537a:	2b02      	cmp	r3, #2
    537c:	f000 80d8 	beq.w	5530 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x220>
    *activation_max = std::numeric_limits<T>::max();
    5380:	4b9d      	ldr	r3, [pc, #628]	; (55f8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e8>)
    5382:	931b      	str	r3, [sp, #108]	; 0x6c
    *activation_min = std::numeric_limits<T>::lowest();
    5384:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    5388:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.stride_height = params->stride_height;
    538a:	f8d9 3008 	ldr.w	r3, [r9, #8]
    538e:	9322      	str	r3, [sp, #136]	; 0x88
  op_params.stride_width = params->stride_width;
    5390:	f8d9 3004 	ldr.w	r3, [r9, #4]
    5394:	9323      	str	r3, [sp, #140]	; 0x8c
  op_params.filter_height = params->filter_height;
    5396:	f8d9 3010 	ldr.w	r3, [r9, #16]
    539a:	9324      	str	r3, [sp, #144]	; 0x90
  op_params.filter_width = params->filter_width;
    539c:	f8d9 300c 	ldr.w	r3, [r9, #12]
    53a0:	9320      	str	r3, [sp, #128]	; 0x80
  op_params.padding_values.height = data->padding.height;
    53a2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    53a4:	9325      	str	r3, [sp, #148]	; 0x94
  op_params.padding_values.width = data->padding.width;
    53a6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    53a8:	9326      	str	r3, [sp, #152]	; 0x98
  if (tensor == nullptr) {
    53aa:	f1b8 0f00 	cmp.w	r8, #0
    53ae:	f000 80c5 	beq.w	553c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x22c>
  const int dims_size = dims->size;
    53b2:	f8d8 6008 	ldr.w	r6, [r8, #8]
    53b6:	f856 4b04 	ldr.w	r4, [r6], #4
    size_ = dimensions_count;
    53ba:	943c      	str	r4, [sp, #240]	; 0xf0
    if (dimensions_count > kMaxSmallSize) {
    53bc:	2c05      	cmp	r4, #5
    53be:	f340 80c1 	ble.w	5544 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x234>
      dims_pointer_ = new int32[dimensions_count];
    53c2:	4b8e      	ldr	r3, [pc, #568]	; (55fc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2ec>)
    53c4:	429c      	cmp	r4, r3
    53c6:	bf94      	ite	ls
    53c8:	00a0      	lslls	r0, r4, #2
    53ca:	f04f 30ff 	movhi.w	r0, #4294967295
    53ce:	4b8c      	ldr	r3, [pc, #560]	; (5600 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2f0>)
    53d0:	4798      	blx	r3
    53d2:	903d      	str	r0, [sp, #244]	; 0xf4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    53d4:	00a2      	lsls	r2, r4, #2
    53d6:	4631      	mov	r1, r6
    53d8:	4b8a      	ldr	r3, [pc, #552]	; (5604 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2f4>)
    53da:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    53dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    53e0:	9315      	str	r3, [sp, #84]	; 0x54
  if (tensor == nullptr) {
    53e2:	2d00      	cmp	r5, #0
    53e4:	f000 80b0 	beq.w	5548 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x238>
  const int dims_size = dims->size;
    53e8:	68ae      	ldr	r6, [r5, #8]
    53ea:	f856 4b04 	ldr.w	r4, [r6], #4
    size_ = dimensions_count;
    53ee:	9436      	str	r4, [sp, #216]	; 0xd8
    if (dimensions_count > kMaxSmallSize) {
    53f0:	2c05      	cmp	r4, #5
    53f2:	f340 80b0 	ble.w	5556 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x246>
      dims_pointer_ = new int32[dimensions_count];
    53f6:	4b81      	ldr	r3, [pc, #516]	; (55fc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2ec>)
    53f8:	429c      	cmp	r4, r3
    53fa:	bf94      	ite	ls
    53fc:	00a0      	lslls	r0, r4, #2
    53fe:	f04f 30ff 	movhi.w	r0, #4294967295
    5402:	4b7f      	ldr	r3, [pc, #508]	; (5600 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2f0>)
    5404:	4798      	blx	r3
    5406:	9037      	str	r0, [sp, #220]	; 0xdc
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    5408:	00a2      	lsls	r2, r4, #2
    540a:	4631      	mov	r1, r6
    540c:	4b7d      	ldr	r3, [pc, #500]	; (5604 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2f4>)
    540e:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    5410:	686b      	ldr	r3, [r5, #4]
    5412:	931e      	str	r3, [sp, #120]	; 0x78
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    5414:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    5416:	2b04      	cmp	r3, #4
    5418:	f040 809b 	bne.w	5552 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x242>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    541c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    541e:	2b04      	cmp	r3, #4
    5420:	f040 809b 	bne.w	555a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x24a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    5424:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    5426:	930e      	str	r3, [sp, #56]	; 0x38
    5428:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    542a:	9217      	str	r2, [sp, #92]	; 0x5c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    542c:	429a      	cmp	r2, r3
    542e:	f040 8096 	bne.w	555e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x24e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    5432:	f8dd a100 	ldr.w	sl, [sp, #256]	; 0x100
    5436:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    5438:	930f      	str	r3, [sp, #60]	; 0x3c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    543a:	4553      	cmp	r3, sl
    543c:	f040 8091 	bne.w	5562 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x252>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    5440:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    5442:	930d      	str	r3, [sp, #52]	; 0x34
    5444:	f8dd b0fc 	ldr.w	fp, [sp, #252]	; 0xfc
    5448:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    544a:	9312      	str	r3, [sp, #72]	; 0x48
    544c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    544e:	9316      	str	r3, [sp, #88]	; 0x58
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
    5450:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    5452:	2b00      	cmp	r3, #0
    5454:	f340 816a 	ble.w	572c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x41c>
    5458:	2300      	movs	r3, #0
    545a:	9309      	str	r3, [sp, #36]	; 0x24
    545c:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
    5460:	fb0a f30b 	mul.w	r3, sl, fp
    5464:	931d      	str	r3, [sp, #116]	; 0x74
    for (int out_y = 0; out_y < output_height; ++out_y) {
    5466:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5468:	2b00      	cmp	r3, #0
    546a:	f340 8158 	ble.w	571e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x40e>
    546e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    5470:	932c      	str	r3, [sp, #176]	; 0xb0
    5472:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
    5476:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5478:	922a      	str	r2, [sp, #168]	; 0xa8
    547a:	18d1      	adds	r1, r2, r3
    547c:	9128      	str	r1, [sp, #160]	; 0xa0
    547e:	425b      	negs	r3, r3
    5480:	9313      	str	r3, [sp, #76]	; 0x4c
    5482:	2300      	movs	r3, #0
    5484:	9314      	str	r3, [sp, #80]	; 0x50
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    5486:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5488:	fb03 f302 	mul.w	r3, r3, r2
    548c:	932b      	str	r3, [sp, #172]	; 0xac
      for (int out_x = 0; out_x < output_width; ++out_x) {
    548e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    5490:	2a00      	cmp	r2, #0
    5492:	f340 8136 	ble.w	5702 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3f2>
    5496:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    5498:	992a      	ldr	r1, [sp, #168]	; 0xa8
    549a:	1a59      	subs	r1, r3, r1
    549c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    54a0:	9119      	str	r1, [sp, #100]	; 0x64
    54a2:	9824      	ldr	r0, [sp, #144]	; 0x90
    54a4:	4298      	cmp	r0, r3
    54a6:	bfa8      	it	ge
    54a8:	4618      	movge	r0, r3
    54aa:	9008      	str	r0, [sp, #32]
    54ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    54ae:	932d      	str	r3, [sp, #180]	; 0xb4
    54b0:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
    54b4:	eb03 000b 	add.w	r0, r3, fp
    54b8:	9027      	str	r0, [sp, #156]	; 0x9c
    54ba:	425b      	negs	r3, r3
    54bc:	9311      	str	r3, [sp, #68]	; 0x44
          const int filter_x_start = std::max(0, -in_x_origin);
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
    54be:	2300      	movs	r3, #0
    54c0:	9310      	str	r3, [sp, #64]	; 0x40
    54c2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    54c4:	9813      	ldr	r0, [sp, #76]	; 0x4c
    54c6:	4403      	add	r3, r0
    54c8:	440b      	add	r3, r1
    54ca:	9921      	ldr	r1, [sp, #132]	; 0x84
    54cc:	fb01 f303 	mul.w	r3, r1, r3
    54d0:	9329      	str	r3, [sp, #164]	; 0xa4
    54d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    54d4:	9909      	ldr	r1, [sp, #36]	; 0x24
    54d6:	9814      	ldr	r0, [sp, #80]	; 0x50
    54d8:	fb01 0303 	mla	r3, r1, r3, r0
    54dc:	fb02 f303 	mul.w	r3, r2, r3
    54e0:	931f      	str	r3, [sp, #124]	; 0x7c
    54e2:	4653      	mov	r3, sl
    54e4:	46da      	mov	sl, fp
    54e6:	469b      	mov	fp, r3
        for (int channel = 0; channel < depth; ++channel) {
    54e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    54ea:	2b00      	cmp	r3, #0
    54ec:	f340 80f8 	ble.w	56e0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3d0>
              (out_x * stride_width) - params.padding_values.width;
    54f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    54f2:	9318      	str	r3, [sp, #96]	; 0x60
    54f4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    54f6:	9921      	ldr	r1, [sp, #132]	; 0x84
    54f8:	1a51      	subs	r1, r2, r1
    54fa:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    54fe:	9106      	str	r1, [sp, #24]
    5500:	9820      	ldr	r0, [sp, #128]	; 0x80
    5502:	4290      	cmp	r0, r2
    5504:	bfa8      	it	ge
    5506:	4610      	movge	r0, r2
    5508:	9007      	str	r0, [sp, #28]
              std::min(params.filter_width, input_width - in_x_origin);
    550a:	f04f 0900 	mov.w	r9, #0
    550e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    5510:	18d3      	adds	r3, r2, r3
    5512:	440b      	add	r3, r1
    5514:	fb0b f303 	mul.w	r3, fp, r3
    5518:	931c      	str	r3, [sp, #112]	; 0x70
    551a:	e0b4      	b.n	5686 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x376>
    *activation_max = std::numeric_limits<T>::max();
    551c:	4b36      	ldr	r3, [pc, #216]	; (55f8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e8>)
    551e:	931b      	str	r3, [sp, #108]	; 0x6c
    *activation_min = 0;
    5520:	2300      	movs	r3, #0
    5522:	931a      	str	r3, [sp, #104]	; 0x68
    5524:	e731      	b.n	538a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7a>
    *activation_max = 6;
    5526:	4b38      	ldr	r3, [pc, #224]	; (5608 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2f8>)
    5528:	931b      	str	r3, [sp, #108]	; 0x6c
    *activation_min = 0;
    552a:	2300      	movs	r3, #0
    552c:	931a      	str	r3, [sp, #104]	; 0x68
    552e:	e72c      	b.n	538a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7a>
    *activation_max = 1;
    5530:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    5534:	931b      	str	r3, [sp, #108]	; 0x6c
    *activation_min = -1;
    5536:	4b35      	ldr	r3, [pc, #212]	; (560c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2fc>)
    5538:	931a      	str	r3, [sp, #104]	; 0x68
    553a:	e726      	b.n	538a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7a>
  RuntimeShape() : size_(0) {}
    553c:	2300      	movs	r3, #0
    553e:	933c      	str	r3, [sp, #240]	; 0xf0
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    5540:	9315      	str	r3, [sp, #84]	; 0x54
    5542:	e74e      	b.n	53e2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xd2>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    5544:	a83d      	add	r0, sp, #244	; 0xf4
    5546:	e745      	b.n	53d4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
  RuntimeShape() : size_(0) {}
    5548:	2300      	movs	r3, #0
    554a:	9336      	str	r3, [sp, #216]	; 0xd8
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    554c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    554e:	2b04      	cmp	r3, #4
    5550:	d003      	beq.n	555a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x24a>
    5552:	4b2f      	ldr	r3, [pc, #188]	; (5610 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x300>)
    5554:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    5556:	a837      	add	r0, sp, #220	; 0xdc
    5558:	e756      	b.n	5408 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xf8>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    555a:	4b2d      	ldr	r3, [pc, #180]	; (5610 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x300>)
    555c:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    555e:	4b2c      	ldr	r3, [pc, #176]	; (5610 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x300>)
    5560:	4798      	blx	r3
    5562:	4b2b      	ldr	r3, [pc, #172]	; (5610 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x300>)
    5564:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    5566:	4b2a      	ldr	r3, [pc, #168]	; (5610 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x300>)
    5568:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    556a:	4b29      	ldr	r3, [pc, #164]	; (5610 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x300>)
    556c:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    556e:	4b28      	ldr	r3, [pc, #160]	; (5610 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x300>)
    5570:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5572:	4b27      	ldr	r3, [pc, #156]	; (5610 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x300>)
    5574:	4798      	blx	r3
          float max = std::numeric_limits<float>::lowest();
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    5576:	9b05      	ldr	r3, [sp, #20]
    5578:	3301      	adds	r3, #1
    557a:	9305      	str	r3, [sp, #20]
    557c:	9a03      	ldr	r2, [sp, #12]
    557e:	990a      	ldr	r1, [sp, #40]	; 0x28
    5580:	440a      	add	r2, r1
    5582:	9203      	str	r2, [sp, #12]
    5584:	9a04      	ldr	r2, [sp, #16]
    5586:	3201      	adds	r2, #1
    5588:	9204      	str	r2, [sp, #16]
    558a:	9a08      	ldr	r2, [sp, #32]
    558c:	4293      	cmp	r3, r2
    558e:	da45      	bge.n	561c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x30c>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    5590:	9b06      	ldr	r3, [sp, #24]
    5592:	9a07      	ldr	r2, [sp, #28]
    5594:	4293      	cmp	r3, r2
    5596:	daee      	bge.n	5576 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x266>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    5598:	9b09      	ldr	r3, [sp, #36]	; 0x24
    559a:	2b00      	cmp	r3, #0
    559c:	dbe3      	blt.n	5566 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x256>
    559e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    55a0:	429a      	cmp	r2, r3
    55a2:	dde0      	ble.n	5566 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x256>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    55a4:	9b04      	ldr	r3, [sp, #16]
    55a6:	2b00      	cmp	r3, #0
    55a8:	dbdf      	blt.n	556a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x25a>
    55aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    55ac:	429a      	cmp	r2, r3
    55ae:	dddc      	ble.n	556a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x25a>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    55b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    55b2:	2b00      	cmp	r3, #0
    55b4:	dbdb      	blt.n	556e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    55b6:	4553      	cmp	r3, sl
    55b8:	dad9      	bge.n	556e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    55ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    55bc:	9d03      	ldr	r5, [sp, #12]
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    55be:	f1b9 0f00 	cmp.w	r9, #0
    55c2:	dbd6      	blt.n	5572 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x262>
    55c4:	45cb      	cmp	fp, r9
    55c6:	ddd4      	ble.n	5572 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x262>
      if (__a < __b)
    55c8:	6829      	ldr	r1, [r5, #0]
    55ca:	9831      	ldr	r0, [sp, #196]	; 0xc4
    55cc:	4b11      	ldr	r3, [pc, #68]	; (5614 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x304>)
    55ce:	4798      	blx	r3
      return __a;
    55d0:	2800      	cmp	r0, #0
    55d2:	bf0c      	ite	eq
    55d4:	4633      	moveq	r3, r6
    55d6:	462b      	movne	r3, r5
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
    55d8:	681b      	ldr	r3, [r3, #0]
    55da:	9331      	str	r3, [sp, #196]	; 0xc4
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    55dc:	42a7      	cmp	r7, r4
    55de:	d0ca      	beq.n	5576 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x266>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    55e0:	2c00      	cmp	r4, #0
    55e2:	dbc4      	blt.n	556e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    55e4:	1c63      	adds	r3, r4, #1
    55e6:	4445      	add	r5, r8
    55e8:	45a2      	cmp	sl, r4
    55ea:	ddc0      	ble.n	556e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    55ec:	461c      	mov	r4, r3
    55ee:	e7e6      	b.n	55be <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2ae>
    55f0:	00009145 	.word	0x00009145
    55f4:	00020f78 	.word	0x00020f78
    55f8:	7f7fffff 	.word	0x7f7fffff
    55fc:	1ffffffe 	.word	0x1ffffffe
    5600:	00009291 	.word	0x00009291
    5604:	00014641 	.word	0x00014641
    5608:	40c00000 	.word	0x40c00000
    560c:	bf800000 	.word	0xbf800000
    5610:	000138bd 	.word	0x000138bd
    5614:	0001259d 	.word	0x0001259d
    5618:	00005279 	.word	0x00005279
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    561c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    561e:	2b00      	cmp	r3, #0
    5620:	db56      	blt.n	56d0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3c0>
    5622:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    5624:	429a      	cmp	r2, r3
    5626:	dd53      	ble.n	56d0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3c0>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    5628:	9b14      	ldr	r3, [sp, #80]	; 0x50
    562a:	2b00      	cmp	r3, #0
    562c:	db52      	blt.n	56d4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3c4>
    562e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    5630:	429a      	cmp	r2, r3
    5632:	dd4f      	ble.n	56d4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3c4>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5634:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5636:	2b00      	cmp	r3, #0
    5638:	db4e      	blt.n	56d8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3c8>
    563a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    563c:	429a      	cmp	r2, r3
    563e:	dd4b      	ble.n	56d8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3c8>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5640:	f1b9 0f00 	cmp.w	r9, #0
    5644:	db4a      	blt.n	56dc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3cc>
    5646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5648:	454b      	cmp	r3, r9
    564a:	dd47      	ble.n	56dc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3cc>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    564c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    564e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5650:	189d      	adds	r5, r3, r2
    5652:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5654:	fb03 9505 	mla	r5, r3, r5, r9
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
    5658:	9c31      	ldr	r4, [sp, #196]	; 0xc4
      if (__a < __b)
    565a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
    565c:	4631      	mov	r1, r6
    565e:	4620      	mov	r0, r4
    5660:	4ba9      	ldr	r3, [pc, #676]	; (5908 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5f8>)
    5662:	4798      	blx	r3
    5664:	b100      	cbz	r0, 5668 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x358>
	return __b;
    5666:	4634      	mov	r4, r6
      if (__b < __a)
    5668:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
    566a:	4631      	mov	r1, r6
    566c:	4620      	mov	r0, r4
    566e:	4ba7      	ldr	r3, [pc, #668]	; (590c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5fc>)
    5670:	4798      	blx	r3
    5672:	b100      	cbz	r0, 5676 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x366>
	return __b;
    5674:	4634      	mov	r4, r6
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    5676:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    5678:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
        for (int channel = 0; channel < depth; ++channel) {
    567c:	f109 0901 	add.w	r9, r9, #1
    5680:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5682:	4599      	cmp	r9, r3
    5684:	d02c      	beq.n	56e0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3d0>
          float max = std::numeric_limits<float>::lowest();
    5686:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    568a:	9331      	str	r3, [sp, #196]	; 0xc4
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    568c:	9b08      	ldr	r3, [sp, #32]
    568e:	4619      	mov	r1, r3
    5690:	9a19      	ldr	r2, [sp, #100]	; 0x64
    5692:	4291      	cmp	r1, r2
    5694:	ddc2      	ble.n	561c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x30c>
    5696:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5698:	009b      	lsls	r3, r3, #2
    569a:	930a      	str	r3, [sp, #40]	; 0x28
    569c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    569e:	444b      	add	r3, r9
    56a0:	9915      	ldr	r1, [sp, #84]	; 0x54
    56a2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    56a6:	9303      	str	r3, [sp, #12]
    56a8:	4613      	mov	r3, r2
    56aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    56ac:	189a      	adds	r2, r3, r2
    56ae:	9204      	str	r2, [sp, #16]
    56b0:	ea4f 088b 	mov.w	r8, fp, lsl #2
    56b4:	9305      	str	r3, [sp, #20]
              const int in_x = in_x_origin + filter_x;
    56b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    56b8:	4613      	mov	r3, r2
    56ba:	9906      	ldr	r1, [sp, #24]
    56bc:	440b      	add	r3, r1
    56be:	930b      	str	r3, [sp, #44]	; 0x2c
    56c0:	1c4b      	adds	r3, r1, #1
    56c2:	4413      	add	r3, r2
    56c4:	930c      	str	r3, [sp, #48]	; 0x30
    56c6:	9b07      	ldr	r3, [sp, #28]
    56c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    56ca:	189f      	adds	r7, r3, r2
      return __a;
    56cc:	ae31      	add	r6, sp, #196	; 0xc4
    56ce:	e75f      	b.n	5590 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x280>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    56d0:	4b8f      	ldr	r3, [pc, #572]	; (5910 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x600>)
    56d2:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    56d4:	4b8e      	ldr	r3, [pc, #568]	; (5910 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x600>)
    56d6:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    56d8:	4b8d      	ldr	r3, [pc, #564]	; (5910 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x600>)
    56da:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    56dc:	4b8c      	ldr	r3, [pc, #560]	; (5910 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x600>)
    56de:	4798      	blx	r3
      for (int out_x = 0; out_x < output_width; ++out_x) {
    56e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    56e2:	3301      	adds	r3, #1
    56e4:	9310      	str	r3, [sp, #64]	; 0x40
    56e6:	9927      	ldr	r1, [sp, #156]	; 0x9c
    56e8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    56ea:	1a89      	subs	r1, r1, r2
    56ec:	9127      	str	r1, [sp, #156]	; 0x9c
    56ee:	9911      	ldr	r1, [sp, #68]	; 0x44
    56f0:	4411      	add	r1, r2
    56f2:	9111      	str	r1, [sp, #68]	; 0x44
    56f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
    56f6:	4293      	cmp	r3, r2
    56f8:	f47f aef6 	bne.w	54e8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x1d8>
    56fc:	465b      	mov	r3, fp
    56fe:	46d3      	mov	fp, sl
    5700:	469a      	mov	sl, r3
    for (int out_y = 0; out_y < output_height; ++out_y) {
    5702:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5704:	3301      	adds	r3, #1
    5706:	9314      	str	r3, [sp, #80]	; 0x50
    5708:	9928      	ldr	r1, [sp, #160]	; 0xa0
    570a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    570c:	1a89      	subs	r1, r1, r2
    570e:	9128      	str	r1, [sp, #160]	; 0xa0
    5710:	9913      	ldr	r1, [sp, #76]	; 0x4c
    5712:	4411      	add	r1, r2
    5714:	9113      	str	r1, [sp, #76]	; 0x4c
    5716:	9a12      	ldr	r2, [sp, #72]	; 0x48
    5718:	4293      	cmp	r3, r2
    571a:	f47f aeb8 	bne.w	548e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x17e>
  for (int batch = 0; batch < batches; ++batch) {
    571e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5720:	3301      	adds	r3, #1
    5722:	9309      	str	r3, [sp, #36]	; 0x24
    5724:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    5726:	4293      	cmp	r3, r2
    5728:	f47f ae9d 	bne.w	5466 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x156>
  return kTfLiteOk;
    572c:	2000      	movs	r0, #0
    572e:	e619      	b.n	5364 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x54>
  TFLITE_DCHECK(input->type == kTfLiteUInt8 || input->type == kTfLiteInt8);
    5730:	2803      	cmp	r0, #3
    5732:	d002      	beq.n	573a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x42a>
    5734:	2809      	cmp	r0, #9
    5736:	f040 80f5 	bne.w	5924 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x614>
                                          &activation_min, &activation_max);
    573a:	f899 1014 	ldrb.w	r1, [r9, #20]
    573e:	ab31      	add	r3, sp, #196	; 0xc4
    5740:	9300      	str	r3, [sp, #0]
    5742:	ab30      	add	r3, sp, #192	; 0xc0
    5744:	462a      	mov	r2, r5
    5746:	4620      	mov	r0, r4
    5748:	4c72      	ldr	r4, [pc, #456]	; (5914 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x604>)
    574a:	47a0      	blx	r4
  op_params.stride_height = params->stride_height;
    574c:	f8d9 4008 	ldr.w	r4, [r9, #8]
  op_params.stride_width = params->stride_width;
    5750:	f8d9 3004 	ldr.w	r3, [r9, #4]
    5754:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.filter_height = params->filter_height;
    5756:	f8d9 3010 	ldr.w	r3, [r9, #16]
    575a:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.filter_width = params->filter_width;
    575c:	f8d9 300c 	ldr.w	r3, [r9, #12]
    5760:	9319      	str	r3, [sp, #100]	; 0x64
  op_params.padding_values.height = data->padding.height;
    5762:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
    5766:	931c      	str	r3, [sp, #112]	; 0x70
  op_params.padding_values.width = data->padding.width;
    5768:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
    576c:	931d      	str	r3, [sp, #116]	; 0x74
  op_params.quantized_activation_min = activation_min;
    576e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    5770:	930b      	str	r3, [sp, #44]	; 0x2c
  op_params.quantized_activation_max = activation_max;
    5772:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    5774:	930c      	str	r3, [sp, #48]	; 0x30
  if (input->type == kTfLiteUInt8) {
    5776:	5dbb      	ldrb	r3, [r7, r6]
    5778:	2b03      	cmp	r3, #3
    577a:	f000 80d5 	beq.w	5928 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x618>
  if (tensor == nullptr) {
    577e:	f1b8 0f00 	cmp.w	r8, #0
    5782:	f000 8271 	beq.w	5c68 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x958>
  const int dims_size = dims->size;
    5786:	f8d8 7008 	ldr.w	r7, [r8, #8]
    578a:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    578e:	9648      	str	r6, [sp, #288]	; 0x120
    if (dimensions_count > kMaxSmallSize) {
    5790:	2e05      	cmp	r6, #5
    5792:	f340 826d 	ble.w	5c70 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x960>
      dims_pointer_ = new int32[dimensions_count];
    5796:	4b60      	ldr	r3, [pc, #384]	; (5918 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x608>)
    5798:	429e      	cmp	r6, r3
    579a:	bf94      	ite	ls
    579c:	00b0      	lslls	r0, r6, #2
    579e:	f04f 30ff 	movhi.w	r0, #4294967295
    57a2:	4b5e      	ldr	r3, [pc, #376]	; (591c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x60c>)
    57a4:	4798      	blx	r3
    57a6:	9049      	str	r0, [sp, #292]	; 0x124
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    57a8:	00b2      	lsls	r2, r6, #2
    57aa:	4639      	mov	r1, r7
    57ac:	4b5c      	ldr	r3, [pc, #368]	; (5920 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x610>)
    57ae:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    57b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    57b4:	9311      	str	r3, [sp, #68]	; 0x44
  if (tensor == nullptr) {
    57b6:	2d00      	cmp	r5, #0
    57b8:	f000 825c 	beq.w	5c74 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x964>
  const int dims_size = dims->size;
    57bc:	68af      	ldr	r7, [r5, #8]
    57be:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    57c2:	9642      	str	r6, [sp, #264]	; 0x108
    if (dimensions_count > kMaxSmallSize) {
    57c4:	2e05      	cmp	r6, #5
    57c6:	f340 8259 	ble.w	5c7c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x96c>
      dims_pointer_ = new int32[dimensions_count];
    57ca:	4b53      	ldr	r3, [pc, #332]	; (5918 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x608>)
    57cc:	429e      	cmp	r6, r3
    57ce:	bf94      	ite	ls
    57d0:	00b0      	lslls	r0, r6, #2
    57d2:	f04f 30ff 	movhi.w	r0, #4294967295
    57d6:	4b51      	ldr	r3, [pc, #324]	; (591c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x60c>)
    57d8:	4798      	blx	r3
    57da:	9043      	str	r0, [sp, #268]	; 0x10c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    57dc:	00b2      	lsls	r2, r6, #2
    57de:	4639      	mov	r1, r7
    57e0:	4b4f      	ldr	r3, [pc, #316]	; (5920 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x610>)
    57e2:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    57e4:	686b      	ldr	r3, [r5, #4]
    57e6:	931e      	str	r3, [sp, #120]	; 0x78

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const int8* input_data, const RuntimeShape& output_shape,
                    int8* output_data) {
  TFLITE_DCHECK_LE(params.quantized_activation_min,
                   params.quantized_activation_max);
    57e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    57ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    57ec:	4293      	cmp	r3, r2
    57ee:	f300 8247 	bgt.w	5c80 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x970>
  TFLITE_DCHECK_GE(params.quantized_activation_min,
                   std::numeric_limits<int8_t>::min());
    57f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    57f4:	f113 0f80 	cmn.w	r3, #128	; 0x80
    57f8:	f2c0 8244 	blt.w	5c84 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x974>
  TFLITE_DCHECK_LE(params.quantized_activation_max,
                   std::numeric_limits<int8_t>::max());
    57fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    57fe:	2b7f      	cmp	r3, #127	; 0x7f
    5800:	f300 8242 	bgt.w	5c88 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x978>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    5804:	9b48      	ldr	r3, [sp, #288]	; 0x120
    5806:	2b04      	cmp	r3, #4
    5808:	f040 8240 	bne.w	5c8c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x97c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    580c:	9b42      	ldr	r3, [sp, #264]	; 0x108
    580e:	2b04      	cmp	r3, #4
    5810:	f040 823e 	bne.w	5c90 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x980>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    5814:	9b49      	ldr	r3, [sp, #292]	; 0x124
    5816:	930a      	str	r3, [sp, #40]	; 0x28
    5818:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    581a:	9217      	str	r2, [sp, #92]	; 0x5c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    581c:	429a      	cmp	r2, r3
    581e:	f040 8239 	bne.w	5c94 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x984>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    5822:	f8dd a130 	ldr.w	sl, [sp, #304]	; 0x130
    5826:	9b46      	ldr	r3, [sp, #280]	; 0x118
    5828:	930d      	str	r3, [sp, #52]	; 0x34
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    582a:	4553      	cmp	r3, sl
    582c:	f040 8234 	bne.w	5c98 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x988>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    5830:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    5832:	9309      	str	r3, [sp, #36]	; 0x24
    5834:	f8dd 912c 	ldr.w	r9, [sp, #300]	; 0x12c
    5838:	9a44      	ldr	r2, [sp, #272]	; 0x110
    583a:	9216      	str	r2, [sp, #88]	; 0x58
    583c:	9a45      	ldr	r2, [sp, #276]	; 0x114
    583e:	9215      	str	r2, [sp, #84]	; 0x54
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
    5840:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    5842:	2a00      	cmp	r2, #0
    5844:	f340 820d 	ble.w	5c62 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x952>
    5848:	f04f 0800 	mov.w	r8, #0
    584c:	9428      	str	r4, [sp, #160]	; 0xa0
    584e:	9326      	str	r3, [sp, #152]	; 0x98
    5850:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
    5854:	fb0a f309 	mul.w	r3, sl, r9
    5858:	9308      	str	r3, [sp, #32]
    585a:	f10d 0bbf 	add.w	fp, sp, #191	; 0xbf
    585e:	4653      	mov	r3, sl
    5860:	46c2      	mov	sl, r8
    5862:	4698      	mov	r8, r3
    for (int out_y = 0; out_y < output_height; ++out_y) {
    5864:	9b16      	ldr	r3, [sp, #88]	; 0x58
    5866:	2b00      	cmp	r3, #0
    5868:	f340 82c7 	ble.w	5dfa <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaea>
    586c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    586e:	991c      	ldr	r1, [sp, #112]	; 0x70
    5870:	1850      	adds	r0, r2, r1
    5872:	9022      	str	r0, [sp, #136]	; 0x88
    5874:	4249      	negs	r1, r1
    5876:	9110      	str	r1, [sp, #64]	; 0x40
    5878:	2100      	movs	r1, #0
    587a:	9112      	str	r1, [sp, #72]	; 0x48
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    587c:	fb02 f20a 	mul.w	r2, r2, sl
    5880:	9224      	str	r2, [sp, #144]	; 0x90
    5882:	fb03 f30a 	mul.w	r3, r3, sl
    5886:	9325      	str	r3, [sp, #148]	; 0x94
      for (int out_x = 0; out_x < output_width; ++out_x) {
    5888:	9a15      	ldr	r2, [sp, #84]	; 0x54
    588a:	2a00      	cmp	r2, #0
    588c:	f340 82a7 	ble.w	5dde <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xace>
    5890:	9b22      	ldr	r3, [sp, #136]	; 0x88
    5892:	9926      	ldr	r1, [sp, #152]	; 0x98
    5894:	1a59      	subs	r1, r3, r1
    5896:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    589a:	9113      	str	r1, [sp, #76]	; 0x4c
    589c:	981b      	ldr	r0, [sp, #108]	; 0x6c
    589e:	4298      	cmp	r0, r3
    58a0:	bfa8      	it	ge
    58a2:	4618      	movge	r0, r3
    58a4:	9005      	str	r0, [sp, #20]
    58a6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    58a8:	9327      	str	r3, [sp, #156]	; 0x9c
    58aa:	981d      	ldr	r0, [sp, #116]	; 0x74
    58ac:	eb09 0300 	add.w	r3, r9, r0
    58b0:	9320      	str	r3, [sp, #128]	; 0x80
    58b2:	4243      	negs	r3, r0
    58b4:	930f      	str	r3, [sp, #60]	; 0x3c
          const int filter_x_start = std::max(0, -in_x_origin);
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
    58b6:	2300      	movs	r3, #0
    58b8:	930e      	str	r3, [sp, #56]	; 0x38
    58ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
    58bc:	9810      	ldr	r0, [sp, #64]	; 0x40
    58be:	4403      	add	r3, r0
    58c0:	440b      	add	r3, r1
    58c2:	9921      	ldr	r1, [sp, #132]	; 0x84
    58c4:	fb01 f303 	mul.w	r3, r1, r3
    58c8:	9323      	str	r3, [sp, #140]	; 0x8c
    58ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
    58cc:	9912      	ldr	r1, [sp, #72]	; 0x48
    58ce:	440b      	add	r3, r1
    58d0:	fb02 f303 	mul.w	r3, r2, r3
    58d4:	931f      	str	r3, [sp, #124]	; 0x7c
        for (int channel = 0; channel < depth; ++channel) {
    58d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    58d8:	2b00      	cmp	r3, #0
    58da:	f340 8272 	ble.w	5dc2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xab2>
              (out_x * stride_width) - params.padding_values.width;
    58de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    58e0:	9314      	str	r3, [sp, #80]	; 0x50
    58e2:	9a20      	ldr	r2, [sp, #128]	; 0x80
    58e4:	9921      	ldr	r1, [sp, #132]	; 0x84
    58e6:	1a51      	subs	r1, r2, r1
    58e8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    58ec:	9103      	str	r1, [sp, #12]
    58ee:	9819      	ldr	r0, [sp, #100]	; 0x64
    58f0:	4290      	cmp	r0, r2
    58f2:	bfa8      	it	ge
    58f4:	4610      	movge	r0, r2
    58f6:	9004      	str	r0, [sp, #16]
              std::min(params.filter_width, input_width - in_x_origin);
    58f8:	2400      	movs	r4, #0
    58fa:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    58fc:	18d3      	adds	r3, r2, r3
    58fe:	440b      	add	r3, r1
    5900:	fb08 f303 	mul.w	r3, r8, r3
    5904:	9318      	str	r3, [sp, #96]	; 0x60
    5906:	e239      	b.n	5d7c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xa6c>
    5908:	0001259d 	.word	0x0001259d
    590c:	000125d9 	.word	0x000125d9
    5910:	000138bd 	.word	0x000138bd
    5914:	00001b35 	.word	0x00001b35
    5918:	1ffffffe 	.word	0x1ffffffe
    591c:	00009291 	.word	0x00009291
    5920:	00014641 	.word	0x00014641
  TFLITE_DCHECK(input->type == kTfLiteUInt8 || input->type == kTfLiteInt8);
    5924:	4b8e      	ldr	r3, [pc, #568]	; (5b60 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    5926:	4798      	blx	r3
  if (tensor == nullptr) {
    5928:	f1b8 0f00 	cmp.w	r8, #0
    592c:	f000 80c0 	beq.w	5ab0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7a0>
  const int dims_size = dims->size;
    5930:	f8d8 7008 	ldr.w	r7, [r8, #8]
    5934:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    5938:	9654      	str	r6, [sp, #336]	; 0x150
    if (dimensions_count > kMaxSmallSize) {
    593a:	2e05      	cmp	r6, #5
    593c:	f340 80bc 	ble.w	5ab8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7a8>
      dims_pointer_ = new int32[dimensions_count];
    5940:	4b88      	ldr	r3, [pc, #544]	; (5b64 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x854>)
    5942:	429e      	cmp	r6, r3
    5944:	bf94      	ite	ls
    5946:	00b0      	lslls	r0, r6, #2
    5948:	f04f 30ff 	movhi.w	r0, #4294967295
    594c:	4b86      	ldr	r3, [pc, #536]	; (5b68 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x858>)
    594e:	4798      	blx	r3
    5950:	9055      	str	r0, [sp, #340]	; 0x154
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    5952:	00b2      	lsls	r2, r6, #2
    5954:	4639      	mov	r1, r7
    5956:	4b85      	ldr	r3, [pc, #532]	; (5b6c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x85c>)
    5958:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    595a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    595e:	9312      	str	r3, [sp, #72]	; 0x48
  if (tensor == nullptr) {
    5960:	2d00      	cmp	r5, #0
    5962:	f000 80ab 	beq.w	5abc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7ac>
  const int dims_size = dims->size;
    5966:	68af      	ldr	r7, [r5, #8]
    5968:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    596c:	964e      	str	r6, [sp, #312]	; 0x138
    if (dimensions_count > kMaxSmallSize) {
    596e:	2e05      	cmp	r6, #5
    5970:	f340 80a8 	ble.w	5ac4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7b4>
      dims_pointer_ = new int32[dimensions_count];
    5974:	4b7b      	ldr	r3, [pc, #492]	; (5b64 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x854>)
    5976:	429e      	cmp	r6, r3
    5978:	bf94      	ite	ls
    597a:	00b0      	lslls	r0, r6, #2
    597c:	f04f 30ff 	movhi.w	r0, #4294967295
    5980:	4b79      	ldr	r3, [pc, #484]	; (5b68 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x858>)
    5982:	4798      	blx	r3
    5984:	904f      	str	r0, [sp, #316]	; 0x13c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    5986:	00b2      	lsls	r2, r6, #2
    5988:	4639      	mov	r1, r7
    598a:	4b78      	ldr	r3, [pc, #480]	; (5b6c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x85c>)
    598c:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    598e:	686b      	ldr	r3, [r5, #4]
    5990:	9317      	str	r3, [sp, #92]	; 0x5c

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8* input_data, const RuntimeShape& output_shape,
                    uint8* output_data) {
  TFLITE_DCHECK_LE(params.quantized_activation_min,
                   params.quantized_activation_max);
    5992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5994:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5996:	4293      	cmp	r3, r2
    5998:	f300 8096 	bgt.w	5ac8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7b8>
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
    599c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    599e:	2b00      	cmp	r3, #0
    59a0:	f2c0 8094 	blt.w	5acc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7bc>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
    59a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    59a6:	2bff      	cmp	r3, #255	; 0xff
    59a8:	f300 8092 	bgt.w	5ad0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7c0>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    59ac:	9b54      	ldr	r3, [sp, #336]	; 0x150
    59ae:	2b04      	cmp	r3, #4
    59b0:	f040 8090 	bne.w	5ad4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7c4>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    59b4:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    59b6:	2b04      	cmp	r3, #4
    59b8:	f040 808e 	bne.w	5ad8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7c8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    59bc:	9b55      	ldr	r3, [sp, #340]	; 0x154
    59be:	930a      	str	r3, [sp, #40]	; 0x28
    59c0:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
    59c2:	9215      	str	r2, [sp, #84]	; 0x54
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    59c4:	429a      	cmp	r2, r3
    59c6:	f040 8089 	bne.w	5adc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7cc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    59ca:	f8dd a160 	ldr.w	sl, [sp, #352]	; 0x160
    59ce:	9b52      	ldr	r3, [sp, #328]	; 0x148
    59d0:	9311      	str	r3, [sp, #68]	; 0x44
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    59d2:	4553      	cmp	r3, sl
    59d4:	f040 8084 	bne.w	5ae0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7d0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    59d8:	9b56      	ldr	r3, [sp, #344]	; 0x158
    59da:	9309      	str	r3, [sp, #36]	; 0x24
    59dc:	f8dd 915c 	ldr.w	r9, [sp, #348]	; 0x15c
    59e0:	9a50      	ldr	r2, [sp, #320]	; 0x140
    59e2:	9214      	str	r2, [sp, #80]	; 0x50
    59e4:	9a51      	ldr	r2, [sp, #324]	; 0x144
    59e6:	9213      	str	r2, [sp, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
    59e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
    59ea:	2a00      	cmp	r2, #0
    59ec:	f340 8139 	ble.w	5c62 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x952>
    59f0:	f04f 0800 	mov.w	r8, #0
    59f4:	9427      	str	r4, [sp, #156]	; 0x9c
    59f6:	9328      	str	r3, [sp, #160]	; 0xa0
    59f8:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
    59fc:	fb0a f309 	mul.w	r3, sl, r9
    5a00:	9308      	str	r3, [sp, #32]
    5a02:	f10d 0bbf 	add.w	fp, sp, #191	; 0xbf
    5a06:	4653      	mov	r3, sl
    5a08:	46c2      	mov	sl, r8
    5a0a:	4698      	mov	r8, r3
    for (int out_y = 0; out_y < output_height; ++out_y) {
    5a0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5a0e:	2b00      	cmp	r3, #0
    5a10:	f340 8121 	ble.w	5c56 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x946>
    5a14:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5a16:	9909      	ldr	r1, [sp, #36]	; 0x24
    5a18:	1850      	adds	r0, r2, r1
    5a1a:	901e      	str	r0, [sp, #120]	; 0x78
    5a1c:	4252      	negs	r2, r2
    5a1e:	920d      	str	r2, [sp, #52]	; 0x34
    5a20:	2200      	movs	r2, #0
    5a22:	9210      	str	r2, [sp, #64]	; 0x40
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    5a24:	fb01 f20a 	mul.w	r2, r1, sl
    5a28:	9225      	str	r2, [sp, #148]	; 0x94
    5a2a:	fb03 f30a 	mul.w	r3, r3, sl
    5a2e:	9326      	str	r3, [sp, #152]	; 0x98
      for (int out_x = 0; out_x < output_width; ++out_x) {
    5a30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    5a32:	2a00      	cmp	r2, #0
    5a34:	f340 8101 	ble.w	5c3a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x92a>
    5a38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    5a3a:	9928      	ldr	r1, [sp, #160]	; 0xa0
    5a3c:	1a59      	subs	r1, r3, r1
    5a3e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    5a42:	9116      	str	r1, [sp, #88]	; 0x58
    5a44:	981b      	ldr	r0, [sp, #108]	; 0x6c
    5a46:	4298      	cmp	r0, r3
    5a48:	bfa8      	it	ge
    5a4a:	4618      	movge	r0, r3
    5a4c:	9005      	str	r0, [sp, #20]
    5a4e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    5a50:	9323      	str	r3, [sp, #140]	; 0x8c
    5a52:	981d      	ldr	r0, [sp, #116]	; 0x74
    5a54:	eb09 0300 	add.w	r3, r9, r0
    5a58:	931f      	str	r3, [sp, #124]	; 0x7c
    5a5a:	4243      	negs	r3, r0
    5a5c:	930f      	str	r3, [sp, #60]	; 0x3c
          const int filter_x_start = std::max(0, -in_x_origin);
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
    5a5e:	2300      	movs	r3, #0
    5a60:	930e      	str	r3, [sp, #56]	; 0x38
    5a62:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5a64:	980d      	ldr	r0, [sp, #52]	; 0x34
    5a66:	4403      	add	r3, r0
    5a68:	440b      	add	r3, r1
    5a6a:	9922      	ldr	r1, [sp, #136]	; 0x88
    5a6c:	fb01 f303 	mul.w	r3, r1, r3
    5a70:	9324      	str	r3, [sp, #144]	; 0x90
    5a72:	9b26      	ldr	r3, [sp, #152]	; 0x98
    5a74:	9910      	ldr	r1, [sp, #64]	; 0x40
    5a76:	440b      	add	r3, r1
    5a78:	fb02 f303 	mul.w	r3, r2, r3
    5a7c:	9321      	str	r3, [sp, #132]	; 0x84
        for (int channel = 0; channel < depth; ++channel) {
    5a7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5a80:	2b00      	cmp	r3, #0
    5a82:	f340 80cc 	ble.w	5c1e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x90e>
              (out_x * stride_width) - params.padding_values.width;
    5a86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5a88:	9318      	str	r3, [sp, #96]	; 0x60
    5a8a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    5a8c:	9922      	ldr	r1, [sp, #136]	; 0x88
    5a8e:	1a51      	subs	r1, r2, r1
    5a90:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    5a94:	9104      	str	r1, [sp, #16]
    5a96:	9819      	ldr	r0, [sp, #100]	; 0x64
    5a98:	4290      	cmp	r0, r2
    5a9a:	bfa8      	it	ge
    5a9c:	4610      	movge	r0, r2
    5a9e:	9003      	str	r0, [sp, #12]
              std::min(params.filter_width, input_width - in_x_origin);
    5aa0:	2400      	movs	r4, #0
    5aa2:	9a24      	ldr	r2, [sp, #144]	; 0x90
    5aa4:	18d3      	adds	r3, r2, r3
    5aa6:	440b      	add	r3, r1
    5aa8:	fb08 f303 	mul.w	r3, r8, r3
    5aac:	9320      	str	r3, [sp, #128]	; 0x80
    5aae:	e090      	b.n	5bd2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8c2>
  RuntimeShape() : size_(0) {}
    5ab0:	2300      	movs	r3, #0
    5ab2:	9354      	str	r3, [sp, #336]	; 0x150
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    5ab4:	9312      	str	r3, [sp, #72]	; 0x48
    5ab6:	e753      	b.n	5960 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x650>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    5ab8:	a855      	add	r0, sp, #340	; 0x154
    5aba:	e74a      	b.n	5952 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x642>
  RuntimeShape() : size_(0) {}
    5abc:	2300      	movs	r3, #0
    5abe:	934e      	str	r3, [sp, #312]	; 0x138
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    5ac0:	9317      	str	r3, [sp, #92]	; 0x5c
    5ac2:	e766      	b.n	5992 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x682>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    5ac4:	a84f      	add	r0, sp, #316	; 0x13c
    5ac6:	e75e      	b.n	5986 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x676>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    5ac8:	4b25      	ldr	r3, [pc, #148]	; (5b60 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    5aca:	4798      	blx	r3
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
    5acc:	4b24      	ldr	r3, [pc, #144]	; (5b60 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    5ace:	4798      	blx	r3
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
    5ad0:	4b23      	ldr	r3, [pc, #140]	; (5b60 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    5ad2:	4798      	blx	r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    5ad4:	4b22      	ldr	r3, [pc, #136]	; (5b60 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    5ad6:	4798      	blx	r3
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    5ad8:	4b21      	ldr	r3, [pc, #132]	; (5b60 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    5ada:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    5adc:	4b20      	ldr	r3, [pc, #128]	; (5b60 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    5ade:	4798      	blx	r3
    5ae0:	4b1f      	ldr	r3, [pc, #124]	; (5b60 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    5ae2:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    5ae4:	4b1e      	ldr	r3, [pc, #120]	; (5b60 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    5ae6:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    5ae8:	4b1d      	ldr	r3, [pc, #116]	; (5b60 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    5aea:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5aec:	4b1c      	ldr	r3, [pc, #112]	; (5b60 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    5aee:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5af0:	4b1b      	ldr	r3, [pc, #108]	; (5b60 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x850>)
    5af2:	4798      	blx	r3
          uint8 max = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    5af4:	f10c 0c01 	add.w	ip, ip, #1
    5af8:	9b08      	ldr	r3, [sp, #32]
    5afa:	449e      	add	lr, r3
    5afc:	3701      	adds	r7, #1
    5afe:	9b05      	ldr	r3, [sp, #20]
    5b00:	4563      	cmp	r3, ip
    5b02:	dd35      	ble.n	5b70 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x860>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    5b04:	9b03      	ldr	r3, [sp, #12]
    5b06:	9a04      	ldr	r2, [sp, #16]
    5b08:	4293      	cmp	r3, r2
    5b0a:	ddf3      	ble.n	5af4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7e4>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    5b0c:	f1ba 0f00 	cmp.w	sl, #0
    5b10:	dbe8      	blt.n	5ae4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7d4>
    5b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5b14:	459a      	cmp	sl, r3
    5b16:	dae5      	bge.n	5ae4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7d4>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    5b18:	2f00      	cmp	r7, #0
    5b1a:	dbe5      	blt.n	5ae8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7d8>
    5b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5b1e:	429f      	cmp	r7, r3
    5b20:	dae2      	bge.n	5ae8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7d8>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5b22:	9b06      	ldr	r3, [sp, #24]
    5b24:	2b00      	cmp	r3, #0
    5b26:	dbe1      	blt.n	5aec <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7dc>
    5b28:	4599      	cmp	r9, r3
    5b2a:	dddf      	ble.n	5aec <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7dc>
    5b2c:	9b07      	ldr	r3, [sp, #28]
    5b2e:	4672      	mov	r2, lr
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5b30:	2c00      	cmp	r4, #0
    5b32:	dbdd      	blt.n	5af0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7e0>
    5b34:	45a0      	cmp	r8, r4
    5b36:	dddb      	ble.n	5af0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7e0>
      if (__a < __b)
    5b38:	f89d 00bf 	ldrb.w	r0, [sp, #191]	; 0xbf
    5b3c:	7811      	ldrb	r1, [r2, #0]
    5b3e:	4288      	cmp	r0, r1
      return __a;
    5b40:	bfac      	ite	ge
    5b42:	4659      	movge	r1, fp
    5b44:	4611      	movlt	r1, r2
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
    5b46:	7809      	ldrb	r1, [r1, #0]
    5b48:	f88d 10bf 	strb.w	r1, [sp, #191]	; 0xbf
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    5b4c:	42ab      	cmp	r3, r5
    5b4e:	d0d1      	beq.n	5af4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7e4>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5b50:	2b00      	cmp	r3, #0
    5b52:	dbcb      	blt.n	5aec <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7dc>
    5b54:	1c59      	adds	r1, r3, #1
    5b56:	4432      	add	r2, r6
    5b58:	454b      	cmp	r3, r9
    5b5a:	dac7      	bge.n	5aec <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7dc>
    5b5c:	460b      	mov	r3, r1
    5b5e:	e7e7      	b.n	5b30 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x820>
    5b60:	000138bd 	.word	0x000138bd
    5b64:	1ffffffe 	.word	0x1ffffffe
    5b68:	00009291 	.word	0x00009291
    5b6c:	00014641 	.word	0x00014641
      if (__a < __b)
    5b70:	f89d 30bf 	ldrb.w	r3, [sp, #191]	; 0xbf
    5b74:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    5b78:	429a      	cmp	r2, r3
    5b7a:	dd01      	ble.n	5b80 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x870>
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
            }
          }
          max = std::max<uint8>(max, params.quantized_activation_min);
    5b7c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    5b80:	f88d 30bf 	strb.w	r3, [sp, #191]	; 0xbf
      if (__b < __a)
    5b84:	990c      	ldr	r1, [sp, #48]	; 0x30
    5b86:	b2ca      	uxtb	r2, r1
    5b88:	4293      	cmp	r3, r2
          max = std::min<uint8>(max, params.quantized_activation_max);
    5b8a:	bfc8      	it	gt
    5b8c:	4613      	movgt	r3, r2
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    5b8e:	f1ba 0f00 	cmp.w	sl, #0
    5b92:	db3c      	blt.n	5c0e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8fe>
    5b94:	9a15      	ldr	r2, [sp, #84]	; 0x54
    5b96:	4592      	cmp	sl, r2
    5b98:	da39      	bge.n	5c0e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8fe>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    5b9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5b9c:	2a00      	cmp	r2, #0
    5b9e:	db38      	blt.n	5c12 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x902>
    5ba0:	9914      	ldr	r1, [sp, #80]	; 0x50
    5ba2:	4291      	cmp	r1, r2
    5ba4:	dd35      	ble.n	5c12 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x902>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5ba6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5ba8:	2a00      	cmp	r2, #0
    5baa:	db34      	blt.n	5c16 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x906>
    5bac:	9913      	ldr	r1, [sp, #76]	; 0x4c
    5bae:	4291      	cmp	r1, r2
    5bb0:	dd31      	ble.n	5c16 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x906>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5bb2:	2c00      	cmp	r4, #0
    5bb4:	db31      	blt.n	5c1a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x90a>
    5bb6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    5bb8:	42a2      	cmp	r2, r4
    5bba:	dd2e      	ble.n	5c1a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x90a>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    5bbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
    5bbe:	990e      	ldr	r1, [sp, #56]	; 0x38
    5bc0:	440a      	add	r2, r1
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    5bc2:	9811      	ldr	r0, [sp, #68]	; 0x44
    5bc4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    5bc6:	fb00 5202 	mla	r2, r0, r2, r5
    5bca:	5513      	strb	r3, [r2, r4]
        for (int channel = 0; channel < depth; ++channel) {
    5bcc:	3401      	adds	r4, #1
    5bce:	4284      	cmp	r4, r0
    5bd0:	d025      	beq.n	5c1e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x90e>
          uint8 max = 0;
    5bd2:	2300      	movs	r3, #0
    5bd4:	f88d 30bf 	strb.w	r3, [sp, #191]	; 0xbf
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    5bd8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    5bda:	9905      	ldr	r1, [sp, #20]
    5bdc:	428a      	cmp	r2, r1
    5bde:	f280 8113 	bge.w	5e08 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaf8>
    5be2:	4646      	mov	r6, r8
    5be4:	9b20      	ldr	r3, [sp, #128]	; 0x80
    5be6:	eb03 0e04 	add.w	lr, r3, r4
    5bea:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5bec:	449e      	add	lr, r3
    5bee:	4613      	mov	r3, r2
    5bf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5bf2:	189f      	adds	r7, r3, r2
    5bf4:	469c      	mov	ip, r3
              const int in_x = in_x_origin + filter_x;
    5bf6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    5bf8:	4613      	mov	r3, r2
    5bfa:	9904      	ldr	r1, [sp, #16]
    5bfc:	440b      	add	r3, r1
    5bfe:	9306      	str	r3, [sp, #24]
    5c00:	1c4b      	adds	r3, r1, #1
    5c02:	4413      	add	r3, r2
    5c04:	9307      	str	r3, [sp, #28]
    5c06:	9b03      	ldr	r3, [sp, #12]
    5c08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5c0a:	189d      	adds	r5, r3, r2
    5c0c:	e77a      	b.n	5b04 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7f4>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    5c0e:	4b83      	ldr	r3, [pc, #524]	; (5e1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    5c10:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    5c12:	4b82      	ldr	r3, [pc, #520]	; (5e1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    5c14:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5c16:	4b81      	ldr	r3, [pc, #516]	; (5e1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    5c18:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5c1a:	4b80      	ldr	r3, [pc, #512]	; (5e1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    5c1c:	4798      	blx	r3
      for (int out_x = 0; out_x < output_width; ++out_x) {
    5c1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5c20:	3301      	adds	r3, #1
    5c22:	930e      	str	r3, [sp, #56]	; 0x38
    5c24:	991f      	ldr	r1, [sp, #124]	; 0x7c
    5c26:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    5c28:	1a89      	subs	r1, r1, r2
    5c2a:	911f      	str	r1, [sp, #124]	; 0x7c
    5c2c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    5c2e:	4411      	add	r1, r2
    5c30:	910f      	str	r1, [sp, #60]	; 0x3c
    5c32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    5c34:	4293      	cmp	r3, r2
    5c36:	f47f af22 	bne.w	5a7e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x76e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    5c3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5c3c:	3301      	adds	r3, #1
    5c3e:	9310      	str	r3, [sp, #64]	; 0x40
    5c40:	991e      	ldr	r1, [sp, #120]	; 0x78
    5c42:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    5c44:	1a89      	subs	r1, r1, r2
    5c46:	911e      	str	r1, [sp, #120]	; 0x78
    5c48:	990d      	ldr	r1, [sp, #52]	; 0x34
    5c4a:	4411      	add	r1, r2
    5c4c:	910d      	str	r1, [sp, #52]	; 0x34
    5c4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    5c50:	4293      	cmp	r3, r2
    5c52:	f47f aeed 	bne.w	5a30 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x720>
  for (int batch = 0; batch < batches; ++batch) {
    5c56:	f10a 0a01 	add.w	sl, sl, #1
    5c5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5c5c:	459a      	cmp	sl, r3
    5c5e:	f47f aed5 	bne.w	5a0c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6fc>
  return kTfLiteOk;
    5c62:	2000      	movs	r0, #0
    5c64:	f7ff bb7e 	b.w	5364 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x54>
  RuntimeShape() : size_(0) {}
    5c68:	2300      	movs	r3, #0
    5c6a:	9348      	str	r3, [sp, #288]	; 0x120
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    5c6c:	9311      	str	r3, [sp, #68]	; 0x44
    5c6e:	e5a2      	b.n	57b6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x4a6>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    5c70:	a849      	add	r0, sp, #292	; 0x124
    5c72:	e599      	b.n	57a8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x498>
  RuntimeShape() : size_(0) {}
    5c74:	2300      	movs	r3, #0
    5c76:	9342      	str	r3, [sp, #264]	; 0x108
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    5c78:	931e      	str	r3, [sp, #120]	; 0x78
    5c7a:	e5b5      	b.n	57e8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x4d8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    5c7c:	a843      	add	r0, sp, #268	; 0x10c
    5c7e:	e5ad      	b.n	57dc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x4cc>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    5c80:	4b66      	ldr	r3, [pc, #408]	; (5e1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    5c82:	4798      	blx	r3
  TFLITE_DCHECK_GE(params.quantized_activation_min,
    5c84:	4b65      	ldr	r3, [pc, #404]	; (5e1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    5c86:	4798      	blx	r3
  TFLITE_DCHECK_LE(params.quantized_activation_max,
    5c88:	4b64      	ldr	r3, [pc, #400]	; (5e1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    5c8a:	4798      	blx	r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    5c8c:	4b63      	ldr	r3, [pc, #396]	; (5e1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    5c8e:	4798      	blx	r3
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    5c90:	4b62      	ldr	r3, [pc, #392]	; (5e1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    5c92:	4798      	blx	r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    5c94:	4b61      	ldr	r3, [pc, #388]	; (5e1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    5c96:	4798      	blx	r3
    5c98:	4b60      	ldr	r3, [pc, #384]	; (5e1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    5c9a:	4798      	blx	r3
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    5c9c:	4b5f      	ldr	r3, [pc, #380]	; (5e1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    5c9e:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    5ca0:	4b5e      	ldr	r3, [pc, #376]	; (5e1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    5ca2:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5ca4:	4b5d      	ldr	r3, [pc, #372]	; (5e1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    5ca6:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5ca8:	4b5c      	ldr	r3, [pc, #368]	; (5e1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    5caa:	4798      	blx	r3
          int8_t max = std::numeric_limits<int8_t>::lowest();
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    5cac:	f10c 0c01 	add.w	ip, ip, #1
    5cb0:	9b08      	ldr	r3, [sp, #32]
    5cb2:	449e      	add	lr, r3
    5cb4:	3701      	adds	r7, #1
    5cb6:	9b05      	ldr	r3, [sp, #20]
    5cb8:	4563      	cmp	r3, ip
    5cba:	dd2f      	ble.n	5d1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xa0c>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    5cbc:	9b03      	ldr	r3, [sp, #12]
    5cbe:	9a04      	ldr	r2, [sp, #16]
    5cc0:	4293      	cmp	r3, r2
    5cc2:	daf3      	bge.n	5cac <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x99c>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    5cc4:	f1ba 0f00 	cmp.w	sl, #0
    5cc8:	dbe8      	blt.n	5c9c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x98c>
    5cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5ccc:	459a      	cmp	sl, r3
    5cce:	dae5      	bge.n	5c9c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x98c>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    5cd0:	2f00      	cmp	r7, #0
    5cd2:	dbe5      	blt.n	5ca0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x990>
    5cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5cd6:	429f      	cmp	r7, r3
    5cd8:	dae2      	bge.n	5ca0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x990>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5cda:	9b06      	ldr	r3, [sp, #24]
    5cdc:	2b00      	cmp	r3, #0
    5cde:	dbe1      	blt.n	5ca4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x994>
    5ce0:	454b      	cmp	r3, r9
    5ce2:	dadf      	bge.n	5ca4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x994>
    5ce4:	9b07      	ldr	r3, [sp, #28]
    5ce6:	4672      	mov	r2, lr
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5ce8:	2c00      	cmp	r4, #0
    5cea:	dbdd      	blt.n	5ca8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x998>
    5cec:	4544      	cmp	r4, r8
    5cee:	dadb      	bge.n	5ca8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x998>
      if (__a < __b)
    5cf0:	f99d 00bf 	ldrsb.w	r0, [sp, #191]	; 0xbf
    5cf4:	f992 1000 	ldrsb.w	r1, [r2]
    5cf8:	4288      	cmp	r0, r1
      return __a;
    5cfa:	bfac      	ite	ge
    5cfc:	4659      	movge	r1, fp
    5cfe:	4611      	movlt	r1, r2
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
    5d00:	f991 1000 	ldrsb.w	r1, [r1]
    5d04:	f88d 10bf 	strb.w	r1, [sp, #191]	; 0xbf
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    5d08:	42ab      	cmp	r3, r5
    5d0a:	d0cf      	beq.n	5cac <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x99c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5d0c:	2b00      	cmp	r3, #0
    5d0e:	dbc9      	blt.n	5ca4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x994>
    5d10:	1c59      	adds	r1, r3, #1
    5d12:	4432      	add	r2, r6
    5d14:	4599      	cmp	r9, r3
    5d16:	ddc5      	ble.n	5ca4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x994>
    5d18:	460b      	mov	r3, r1
    5d1a:	e7e5      	b.n	5ce8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9d8>
    5d1c:	f99d 20bf 	ldrsb.w	r2, [sp, #191]	; 0xbf
    5d20:	f99d 302c 	ldrsb.w	r3, [sp, #44]	; 0x2c
    5d24:	4293      	cmp	r3, r2
    5d26:	bfb8      	it	lt
    5d28:	4613      	movlt	r3, r2
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
            }
          }
          max = std::max<int8_t>(max, params.quantized_activation_min);
    5d2a:	f88d 30bf 	strb.w	r3, [sp, #191]	; 0xbf
    5d2e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    5d32:	4293      	cmp	r3, r2
    5d34:	bfa8      	it	ge
    5d36:	4613      	movge	r3, r2
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    5d38:	f1ba 0f00 	cmp.w	sl, #0
    5d3c:	db39      	blt.n	5db2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaa2>
    5d3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    5d40:	4592      	cmp	sl, r2
    5d42:	da36      	bge.n	5db2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaa2>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    5d44:	9a12      	ldr	r2, [sp, #72]	; 0x48
    5d46:	2a00      	cmp	r2, #0
    5d48:	db35      	blt.n	5db6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaa6>
    5d4a:	9916      	ldr	r1, [sp, #88]	; 0x58
    5d4c:	428a      	cmp	r2, r1
    5d4e:	da32      	bge.n	5db6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaa6>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5d50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5d52:	2a00      	cmp	r2, #0
    5d54:	db31      	blt.n	5dba <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaaa>
    5d56:	9915      	ldr	r1, [sp, #84]	; 0x54
    5d58:	4291      	cmp	r1, r2
    5d5a:	dd2e      	ble.n	5dba <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaaa>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5d5c:	2c00      	cmp	r4, #0
    5d5e:	db2e      	blt.n	5dbe <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaae>
    5d60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5d62:	4294      	cmp	r4, r2
    5d64:	da2b      	bge.n	5dbe <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaae>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    5d66:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    5d68:	990e      	ldr	r1, [sp, #56]	; 0x38
    5d6a:	440a      	add	r2, r1
          max = std::min<int8_t>(max, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    5d6c:	980d      	ldr	r0, [sp, #52]	; 0x34
    5d6e:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    5d70:	fb00 5202 	mla	r2, r0, r2, r5
    5d74:	5513      	strb	r3, [r2, r4]
        for (int channel = 0; channel < depth; ++channel) {
    5d76:	3401      	adds	r4, #1
    5d78:	4284      	cmp	r4, r0
    5d7a:	d022      	beq.n	5dc2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xab2>
          int8_t max = std::numeric_limits<int8_t>::lowest();
    5d7c:	2380      	movs	r3, #128	; 0x80
    5d7e:	f88d 30bf 	strb.w	r3, [sp, #191]	; 0xbf
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    5d82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    5d84:	9905      	ldr	r1, [sp, #20]
    5d86:	428a      	cmp	r2, r1
    5d88:	dac8      	bge.n	5d1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xa0c>
    5d8a:	4646      	mov	r6, r8
    5d8c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    5d8e:	eb03 0e04 	add.w	lr, r3, r4
    5d92:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5d94:	449e      	add	lr, r3
    5d96:	9910      	ldr	r1, [sp, #64]	; 0x40
    5d98:	188f      	adds	r7, r1, r2
    5d9a:	4694      	mov	ip, r2
              const int in_x = in_x_origin + filter_x;
    5d9c:	9b03      	ldr	r3, [sp, #12]
    5d9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    5da0:	1899      	adds	r1, r3, r2
    5da2:	9106      	str	r1, [sp, #24]
    5da4:	3301      	adds	r3, #1
    5da6:	4413      	add	r3, r2
    5da8:	9307      	str	r3, [sp, #28]
    5daa:	9b04      	ldr	r3, [sp, #16]
    5dac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5dae:	189d      	adds	r5, r3, r2
    5db0:	e784      	b.n	5cbc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9ac>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    5db2:	4b1a      	ldr	r3, [pc, #104]	; (5e1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    5db4:	4798      	blx	r3
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    5db6:	4b19      	ldr	r3, [pc, #100]	; (5e1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    5db8:	4798      	blx	r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    5dba:	4b18      	ldr	r3, [pc, #96]	; (5e1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    5dbc:	4798      	blx	r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    5dbe:	4b17      	ldr	r3, [pc, #92]	; (5e1c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0c>)
    5dc0:	4798      	blx	r3
      for (int out_x = 0; out_x < output_width; ++out_x) {
    5dc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5dc4:	3301      	adds	r3, #1
    5dc6:	930e      	str	r3, [sp, #56]	; 0x38
    5dc8:	9920      	ldr	r1, [sp, #128]	; 0x80
    5dca:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    5dcc:	1a89      	subs	r1, r1, r2
    5dce:	9120      	str	r1, [sp, #128]	; 0x80
    5dd0:	990f      	ldr	r1, [sp, #60]	; 0x3c
    5dd2:	4411      	add	r1, r2
    5dd4:	910f      	str	r1, [sp, #60]	; 0x3c
    5dd6:	9a15      	ldr	r2, [sp, #84]	; 0x54
    5dd8:	4293      	cmp	r3, r2
    5dda:	f47f ad7c 	bne.w	58d6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5c6>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    5dde:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5de0:	3301      	adds	r3, #1
    5de2:	9312      	str	r3, [sp, #72]	; 0x48
    5de4:	9922      	ldr	r1, [sp, #136]	; 0x88
    5de6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    5de8:	1a89      	subs	r1, r1, r2
    5dea:	9122      	str	r1, [sp, #136]	; 0x88
    5dec:	9910      	ldr	r1, [sp, #64]	; 0x40
    5dee:	4411      	add	r1, r2
    5df0:	9110      	str	r1, [sp, #64]	; 0x40
    5df2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    5df4:	4293      	cmp	r3, r2
    5df6:	f47f ad47 	bne.w	5888 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x578>
  for (int batch = 0; batch < batches; ++batch) {
    5dfa:	f10a 0a01 	add.w	sl, sl, #1
    5dfe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    5e00:	459a      	cmp	sl, r3
    5e02:	f47f ad2f 	bne.w	5864 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x554>
    5e06:	e72c      	b.n	5c62 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x952>
      if (__a < __b)
    5e08:	f89d 30bf 	ldrb.w	r3, [sp, #191]	; 0xbf
    5e0c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    5e10:	429a      	cmp	r2, r3
    5e12:	f73f aeb3 	bgt.w	5b7c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x86c>
          max = std::max<uint8>(max, params.quantized_activation_min);
    5e16:	f88d 30bf 	strb.w	r3, [sp, #191]	; 0xbf
    5e1a:	e6b8      	b.n	5b8e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x87e>
    5e1c:	000138bd 	.word	0x000138bd

00005e20 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
}

TfLiteRegistration Register_MAX_POOL_2D() {
    5e20:	b510      	push	{r4, lr}
    5e22:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/pooling::MaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    5e24:	2220      	movs	r2, #32
    5e26:	2100      	movs	r1, #0
    5e28:	4b02      	ldr	r3, [pc, #8]	; (5e34 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x14>)
    5e2a:	4798      	blx	r3
    5e2c:	4b02      	ldr	r3, [pc, #8]	; (5e38 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x18>)
    5e2e:	60e3      	str	r3, [r4, #12]
}
    5e30:	4620      	mov	r0, r4
    5e32:	bd10      	pop	{r4, pc}
    5e34:	0001483d 	.word	0x0001483d
    5e38:	00005311 	.word	0x00005311

00005e3c <_ZN6tflite3ops5micro11activations11SoftmaxInitEP13TfLiteContextPKcj>:
          GetTensorShape(output), GetTensorData<int8_t>(output));
    }
  }
}

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
    5e3c:	b500      	push	{lr}
    5e3e:	b083      	sub	sp, #12
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    5e40:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5e42:	b163      	cbz	r3, 5e5e <_ZN6tflite3ops5micro11activations11SoftmaxInitEP13TfLiteContextPKcj+0x22>
  void* data = nullptr;
    5e44:	aa02      	add	r2, sp, #8
    5e46:	2100      	movs	r1, #0
    5e48:	f842 1d04 	str.w	r1, [r2, #-4]!
  if (context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams),
    5e4c:	2138      	movs	r1, #56	; 0x38
    5e4e:	4798      	blx	r3
    5e50:	2801      	cmp	r0, #1
                                        &data) == kTfLiteError) {
    return nullptr;
  }
  return data;
    5e52:	bf14      	ite	ne
    5e54:	9801      	ldrne	r0, [sp, #4]
    return nullptr;
    5e56:	2000      	moveq	r0, #0
}
    5e58:	b003      	add	sp, #12
    5e5a:	f85d fb04 	ldr.w	pc, [sp], #4
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    5e5e:	4b01      	ldr	r3, [pc, #4]	; (5e64 <_ZN6tflite3ops5micro11activations11SoftmaxInitEP13TfLiteContextPKcj+0x28>)
    5e60:	4798      	blx	r3
    5e62:	bf00      	nop
    5e64:	000138bd 	.word	0x000138bd

00005e68 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    5e68:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
    5e6c:	b086      	sub	sp, #24
    5e6e:	4605      	mov	r5, r0
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    5e70:	680a      	ldr	r2, [r1, #0]
    5e72:	6813      	ldr	r3, [r2, #0]
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    5e74:	2b01      	cmp	r3, #1
    5e76:	d129      	bne.n	5ecc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x64>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    5e78:	6848      	ldr	r0, [r1, #4]
    5e7a:	6803      	ldr	r3, [r0, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    5e7c:	2b01      	cmp	r3, #1
    5e7e:	d135      	bne.n	5eec <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x84>
  return &context->tensors[node->inputs->data[index]];
    5e80:	68ac      	ldr	r4, [r5, #8]
    5e82:	6853      	ldr	r3, [r2, #4]
    5e84:	019b      	lsls	r3, r3, #6
    5e86:	18e6      	adds	r6, r4, r3
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    5e88:	68b2      	ldr	r2, [r6, #8]
  const TfLiteTensor* input = GetInput(context, node, 0);
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
    5e8a:	6812      	ldr	r2, [r2, #0]
    5e8c:	2a00      	cmp	r2, #0
    5e8e:	dd3c      	ble.n	5f0a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>
  return &context->tensors[node->outputs->data[index]];
    5e90:	6842      	ldr	r2, [r0, #4]
    5e92:	0192      	lsls	r2, r2, #6
    5e94:	eb04 0e02 	add.w	lr, r4, r2

  TfLiteTensor* output = GetOutput(context, node, 0);

  TFLITE_DCHECK(node->user_data != nullptr);
    5e98:	690f      	ldr	r7, [r1, #16]
    5e9a:	2f00      	cmp	r7, #0
    5e9c:	d03f      	beq.n	5f1e <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb6>
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
    5e9e:	f8d1 8014 	ldr.w	r8, [r1, #20]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
    5ea2:	5ce0      	ldrb	r0, [r4, r3]
    5ea4:	2803      	cmp	r0, #3
    5ea6:	d03c      	beq.n	5f22 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xba>
    5ea8:	2809      	cmp	r0, #9
    5eaa:	f000 8084 	beq.w	5fb6 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x14e>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    5eae:	2801      	cmp	r0, #1
    5eb0:	f040 80d0 	bne.w	6054 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1ec>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    5eb4:	5ca0      	ldrb	r0, [r4, r2]
    5eb6:	2801      	cmp	r0, #1
    5eb8:	f040 80df 	bne.w	607a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x212>
    op_data->beta = static_cast<double>(params->beta);
    5ebc:	f8d8 0000 	ldr.w	r0, [r8]
    5ec0:	4b77      	ldr	r3, [pc, #476]	; (60a0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
    5ec2:	4798      	blx	r3
    5ec4:	e9c7 0100 	strd	r0, r1, [r7]
  return kTfLiteOk;
    5ec8:	2000      	movs	r0, #0
    5eca:	e00c      	b.n	5ee6 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7e>
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    5ecc:	2401      	movs	r4, #1
    5ece:	9403      	str	r4, [sp, #12]
    5ed0:	9302      	str	r3, [sp, #8]
    5ed2:	4b74      	ldr	r3, [pc, #464]	; (60a4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
    5ed4:	9301      	str	r3, [sp, #4]
    5ed6:	4b74      	ldr	r3, [pc, #464]	; (60a8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
    5ed8:	9300      	str	r3, [sp, #0]
    5eda:	6946      	ldr	r6, [r0, #20]
    5edc:	2373      	movs	r3, #115	; 0x73
    5ede:	4a73      	ldr	r2, [pc, #460]	; (60ac <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    5ee0:	4973      	ldr	r1, [pc, #460]	; (60b0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
    5ee2:	47b0      	blx	r6
    5ee4:	4620      	mov	r0, r4
  SoftmaxParams* data = static_cast<SoftmaxParams*>(node->user_data);
  return CalculateSoftmaxParams(context, input, output, params, data);
}
    5ee6:	b006      	add	sp, #24
    5ee8:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    5eec:	2401      	movs	r4, #1
    5eee:	9403      	str	r4, [sp, #12]
    5ef0:	9302      	str	r3, [sp, #8]
    5ef2:	4b6c      	ldr	r3, [pc, #432]	; (60a4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
    5ef4:	9301      	str	r3, [sp, #4]
    5ef6:	4b6f      	ldr	r3, [pc, #444]	; (60b4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
    5ef8:	9300      	str	r3, [sp, #0]
    5efa:	696e      	ldr	r6, [r5, #20]
    5efc:	2374      	movs	r3, #116	; 0x74
    5efe:	4a6b      	ldr	r2, [pc, #428]	; (60ac <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    5f00:	496b      	ldr	r1, [pc, #428]	; (60b0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
    5f02:	4628      	mov	r0, r5
    5f04:	47b0      	blx	r6
    5f06:	4620      	mov	r0, r4
    5f08:	e7ed      	b.n	5ee6 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7e>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
    5f0a:	4b6b      	ldr	r3, [pc, #428]	; (60b8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
    5f0c:	9300      	str	r3, [sp, #0]
    5f0e:	696c      	ldr	r4, [r5, #20]
    5f10:	2376      	movs	r3, #118	; 0x76
    5f12:	4a66      	ldr	r2, [pc, #408]	; (60ac <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    5f14:	4969      	ldr	r1, [pc, #420]	; (60bc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
    5f16:	4628      	mov	r0, r5
    5f18:	47a0      	blx	r4
    5f1a:	2001      	movs	r0, #1
    5f1c:	e7e3      	b.n	5ee6 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7e>
  TFLITE_DCHECK(node->user_data != nullptr);
    5f1e:	4b68      	ldr	r3, [pc, #416]	; (60c0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
    5f20:	4798      	blx	r3
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
    5f22:	5ca0      	ldrb	r0, [r4, r2]
    5f24:	2803      	cmp	r0, #3
    5f26:	d012      	beq.n	5f4e <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe6>
    5f28:	696e      	ldr	r6, [r5, #20]
    5f2a:	4c66      	ldr	r4, [pc, #408]	; (60c4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
    5f2c:	47a0      	blx	r4
    5f2e:	4607      	mov	r7, r0
    5f30:	2003      	movs	r0, #3
    5f32:	47a0      	blx	r4
    5f34:	9003      	str	r0, [sp, #12]
    5f36:	9702      	str	r7, [sp, #8]
    5f38:	4b63      	ldr	r3, [pc, #396]	; (60c8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
    5f3a:	9301      	str	r3, [sp, #4]
    5f3c:	4b63      	ldr	r3, [pc, #396]	; (60cc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
    5f3e:	9300      	str	r3, [sp, #0]
    5f40:	2327      	movs	r3, #39	; 0x27
    5f42:	4a5a      	ldr	r2, [pc, #360]	; (60ac <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    5f44:	4962      	ldr	r1, [pc, #392]	; (60d0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>)
    5f46:	4628      	mov	r0, r5
    5f48:	47b0      	blx	r6
    5f4a:	2001      	movs	r0, #1
    5f4c:	e7cb      	b.n	5ee6 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7e>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    5f4e:	f8de 3010 	ldr.w	r3, [lr, #16]
    5f52:	bb13      	cbnz	r3, 5f9a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x132>
    tflite::PreprocessSoftmaxScaling(
    5f54:	4c52      	ldr	r4, [pc, #328]	; (60a0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
    5f56:	68f0      	ldr	r0, [r6, #12]
    5f58:	47a0      	blx	r4
    5f5a:	4682      	mov	sl, r0
    5f5c:	468b      	mov	fp, r1
    5f5e:	f8d8 0000 	ldr.w	r0, [r8]
    5f62:	47a0      	blx	r4
        &op_data->input_multiplier, &input_left_shift);
    5f64:	ab05      	add	r3, sp, #20
    5f66:	9302      	str	r3, [sp, #8]
    tflite::PreprocessSoftmaxScaling(
    5f68:	f107 0308 	add.w	r3, r7, #8
        &op_data->input_multiplier, &input_left_shift);
    5f6c:	9301      	str	r3, [sp, #4]
    5f6e:	2405      	movs	r4, #5
    5f70:	9400      	str	r4, [sp, #0]
    5f72:	4652      	mov	r2, sl
    5f74:	465b      	mov	r3, fp
    5f76:	4d57      	ldr	r5, [pc, #348]	; (60d4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>)
    5f78:	47a8      	blx	r5
    op_data->input_left_shift = input_left_shift;
    5f7a:	9905      	ldr	r1, [sp, #20]
    5f7c:	60f9      	str	r1, [r7, #12]
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
    5f7e:	221f      	movs	r2, #31
    5f80:	4620      	mov	r0, r4
    5f82:	4b55      	ldr	r3, [pc, #340]	; (60d8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
    5f84:	4798      	blx	r3
    5f86:	4b55      	ldr	r3, [pc, #340]	; (60dc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x274>)
    5f88:	4798      	blx	r3
                                            op_data->input_left_shift);
    5f8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    5f8e:	4619      	mov	r1, r3
    5f90:	4b53      	ldr	r3, [pc, #332]	; (60e0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x278>)
    5f92:	4798      	blx	r3
    5f94:	61b8      	str	r0, [r7, #24]
  return kTfLiteOk;
    5f96:	2000      	movs	r0, #0
    5f98:	e7a5      	b.n	5ee6 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7e>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    5f9a:	2200      	movs	r2, #0
    5f9c:	9203      	str	r2, [sp, #12]
    5f9e:	9302      	str	r3, [sp, #8]
    5fa0:	4b50      	ldr	r3, [pc, #320]	; (60e4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
    5fa2:	9301      	str	r3, [sp, #4]
    5fa4:	4b50      	ldr	r3, [pc, #320]	; (60e8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x280>)
    5fa6:	9300      	str	r3, [sp, #0]
    5fa8:	696c      	ldr	r4, [r5, #20]
    5faa:	2328      	movs	r3, #40	; 0x28
    5fac:	4a3f      	ldr	r2, [pc, #252]	; (60ac <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    5fae:	4940      	ldr	r1, [pc, #256]	; (60b0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
    5fb0:	4628      	mov	r0, r5
    5fb2:	47a0      	blx	r4
    5fb4:	e7c9      	b.n	5f4a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe2>
      if (output->type == kTfLiteInt16) {
    5fb6:	5ca0      	ldrb	r0, [r4, r2]
    5fb8:	2807      	cmp	r0, #7
    5fba:	d013      	beq.n	5fe4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x17c>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    5fbc:	2809      	cmp	r0, #9
    5fbe:	d024      	beq.n	600a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1a2>
    5fc0:	696e      	ldr	r6, [r5, #20]
    5fc2:	4c40      	ldr	r4, [pc, #256]	; (60c4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
    5fc4:	47a0      	blx	r4
    5fc6:	4607      	mov	r7, r0
    5fc8:	2009      	movs	r0, #9
    5fca:	47a0      	blx	r4
    5fcc:	9003      	str	r0, [sp, #12]
    5fce:	9702      	str	r7, [sp, #8]
    5fd0:	4b46      	ldr	r3, [pc, #280]	; (60ec <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x284>)
    5fd2:	9301      	str	r3, [sp, #4]
    5fd4:	4b3d      	ldr	r3, [pc, #244]	; (60cc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
    5fd6:	9300      	str	r3, [sp, #0]
    5fd8:	2330      	movs	r3, #48	; 0x30
    5fda:	4a34      	ldr	r2, [pc, #208]	; (60ac <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    5fdc:	493c      	ldr	r1, [pc, #240]	; (60d0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>)
    5fde:	4628      	mov	r0, r5
    5fe0:	47b0      	blx	r6
    5fe2:	e7b2      	b.n	5f4a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe2>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
    5fe4:	f8de 3010 	ldr.w	r3, [lr, #16]
    5fe8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    5fec:	d0b2      	beq.n	5f54 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xec>
    5fee:	4a40      	ldr	r2, [pc, #256]	; (60f0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x288>)
    5ff0:	9203      	str	r2, [sp, #12]
    5ff2:	9302      	str	r3, [sp, #8]
    5ff4:	4b3f      	ldr	r3, [pc, #252]	; (60f4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
    5ff6:	9301      	str	r3, [sp, #4]
    5ff8:	4b3b      	ldr	r3, [pc, #236]	; (60e8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x280>)
    5ffa:	9300      	str	r3, [sp, #0]
    5ffc:	696c      	ldr	r4, [r5, #20]
    5ffe:	232c      	movs	r3, #44	; 0x2c
    6000:	4a2a      	ldr	r2, [pc, #168]	; (60ac <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    6002:	492b      	ldr	r1, [pc, #172]	; (60b0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
    6004:	4628      	mov	r0, r5
    6006:	47a0      	blx	r4
    6008:	e79f      	b.n	5f4a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe2>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    600a:	f8de 3010 	ldr.w	r3, [lr, #16]
    600e:	f113 0f80 	cmn.w	r3, #128	; 0x80
    6012:	d00e      	beq.n	6032 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1ca>
    6014:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    6018:	9203      	str	r2, [sp, #12]
    601a:	9302      	str	r3, [sp, #8]
    601c:	4b36      	ldr	r3, [pc, #216]	; (60f8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x290>)
    601e:	9301      	str	r3, [sp, #4]
    6020:	4b31      	ldr	r3, [pc, #196]	; (60e8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x280>)
    6022:	9300      	str	r3, [sp, #0]
    6024:	696c      	ldr	r4, [r5, #20]
    6026:	2331      	movs	r3, #49	; 0x31
    6028:	4a20      	ldr	r2, [pc, #128]	; (60ac <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    602a:	4921      	ldr	r1, [pc, #132]	; (60b0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
    602c:	4628      	mov	r0, r5
    602e:	47a0      	blx	r4
    6030:	e78b      	b.n	5f4a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe2>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
    6032:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
    6036:	f8de 000c 	ldr.w	r0, [lr, #12]
    603a:	4b30      	ldr	r3, [pc, #192]	; (60fc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    603c:	4798      	blx	r3
    603e:	2800      	cmp	r0, #0
    6040:	d188      	bne.n	5f54 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xec>
    6042:	4b2f      	ldr	r3, [pc, #188]	; (6100 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
    6044:	9300      	str	r3, [sp, #0]
    6046:	696c      	ldr	r4, [r5, #20]
    6048:	2332      	movs	r3, #50	; 0x32
    604a:	4a18      	ldr	r2, [pc, #96]	; (60ac <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    604c:	491b      	ldr	r1, [pc, #108]	; (60bc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
    604e:	4628      	mov	r0, r5
    6050:	47a0      	blx	r4
    6052:	e77a      	b.n	5f4a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe2>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    6054:	696e      	ldr	r6, [r5, #20]
    6056:	4c1b      	ldr	r4, [pc, #108]	; (60c4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
    6058:	47a0      	blx	r4
    605a:	4607      	mov	r7, r0
    605c:	2001      	movs	r0, #1
    605e:	47a0      	blx	r4
    6060:	9003      	str	r0, [sp, #12]
    6062:	9702      	str	r7, [sp, #8]
    6064:	4b27      	ldr	r3, [pc, #156]	; (6104 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
    6066:	9301      	str	r3, [sp, #4]
    6068:	4b27      	ldr	r3, [pc, #156]	; (6108 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
    606a:	9300      	str	r3, [sp, #0]
    606c:	2342      	movs	r3, #66	; 0x42
    606e:	4a0f      	ldr	r2, [pc, #60]	; (60ac <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    6070:	4917      	ldr	r1, [pc, #92]	; (60d0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>)
    6072:	4628      	mov	r0, r5
    6074:	47b0      	blx	r6
    6076:	2001      	movs	r0, #1
    6078:	e735      	b.n	5ee6 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7e>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    607a:	696e      	ldr	r6, [r5, #20]
    607c:	4c11      	ldr	r4, [pc, #68]	; (60c4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
    607e:	47a0      	blx	r4
    6080:	4607      	mov	r7, r0
    6082:	2001      	movs	r0, #1
    6084:	47a0      	blx	r4
    6086:	9003      	str	r0, [sp, #12]
    6088:	9702      	str	r7, [sp, #8]
    608a:	4b1e      	ldr	r3, [pc, #120]	; (6104 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
    608c:	9301      	str	r3, [sp, #4]
    608e:	4b0f      	ldr	r3, [pc, #60]	; (60cc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
    6090:	9300      	str	r3, [sp, #0]
    6092:	2343      	movs	r3, #67	; 0x43
    6094:	4a05      	ldr	r2, [pc, #20]	; (60ac <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
    6096:	490e      	ldr	r1, [pc, #56]	; (60d0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>)
    6098:	4628      	mov	r0, r5
    609a:	47b0      	blx	r6
    609c:	2001      	movs	r0, #1
    609e:	e722      	b.n	5ee6 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7e>
    60a0:	00011939 	.word	0x00011939
    60a4:	00021084 	.word	0x00021084
    60a8:	00021048 	.word	0x00021048
    60ac:	00021018 	.word	0x00021018
    60b0:	0002099c 	.word	0x0002099c
    60b4:	00021058 	.word	0x00021058
    60b8:	0002106c 	.word	0x0002106c
    60bc:	0001fff8 	.word	0x0001fff8
    60c0:	000138bd 	.word	0x000138bd
    60c4:	00009145 	.word	0x00009145
    60c8:	00021088 	.word	0x00021088
    60cc:	00020ec8 	.word	0x00020ec8
    60d0:	00020eac 	.word	0x00020eac
    60d4:	000018f1 	.word	0x000018f1
    60d8:	00001969 	.word	0x00001969
    60dc:	00011915 	.word	0x00011915
    60e0:	00011f15 	.word	0x00011f15
    60e4:	00020d98 	.word	0x00020d98
    60e8:	00021098 	.word	0x00021098
    60ec:	00020a78 	.word	0x00020a78
    60f0:	ffff8000 	.word	0xffff8000
    60f4:	000210b4 	.word	0x000210b4
    60f8:	000210bc 	.word	0x000210bc
    60fc:	00012589 	.word	0x00012589
    6100:	000210c4 	.word	0x000210c4
    6104:	000210e8 	.word	0x000210e8
    6108:	00020ed8 	.word	0x00020ed8

0000610c <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:
                  const SoftmaxParams& op_data) {
    610c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6110:	b099      	sub	sp, #100	; 0x64
    6112:	460d      	mov	r5, r1
    6114:	4693      	mov	fp, r2
  if (tensor == nullptr) {
    6116:	2800      	cmp	r0, #0
    6118:	f000 811a 	beq.w	6350 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x244>
    611c:	4607      	mov	r7, r0
  const int dims_size = dims->size;
    611e:	6886      	ldr	r6, [r0, #8]
    6120:	f856 4b04 	ldr.w	r4, [r6], #4
    size_ = dimensions_count;
    6124:	940c      	str	r4, [sp, #48]	; 0x30
    if (dimensions_count > kMaxSmallSize) {
    6126:	2c05      	cmp	r4, #5
    6128:	f340 8115 	ble.w	6356 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x24a>
      dims_pointer_ = new int32[dimensions_count];
    612c:	4b9c      	ldr	r3, [pc, #624]	; (63a0 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x294>)
    612e:	429c      	cmp	r4, r3
    6130:	bf94      	ite	ls
    6132:	00a0      	lslls	r0, r4, #2
    6134:	f04f 30ff 	movhi.w	r0, #4294967295
    6138:	4b9a      	ldr	r3, [pc, #616]	; (63a4 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x298>)
    613a:	4798      	blx	r3
    613c:	900d      	str	r0, [sp, #52]	; 0x34
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    613e:	00a2      	lsls	r2, r4, #2
    6140:	4631      	mov	r1, r6
    6142:	4b99      	ldr	r3, [pc, #612]	; (63a8 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x29c>)
    6144:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    6146:	687c      	ldr	r4, [r7, #4]
  if (tensor == nullptr) {
    6148:	2d00      	cmp	r5, #0
    614a:	f000 8106 	beq.w	635a <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x24e>
  const int dims_size = dims->size;
    614e:	68af      	ldr	r7, [r5, #8]
    6150:	f857 6b04 	ldr.w	r6, [r7], #4
    size_ = dimensions_count;
    6154:	9612      	str	r6, [sp, #72]	; 0x48
    if (dimensions_count > kMaxSmallSize) {
    6156:	2e05      	cmp	r6, #5
    6158:	f340 8101 	ble.w	635e <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x252>
      dims_pointer_ = new int32[dimensions_count];
    615c:	4b90      	ldr	r3, [pc, #576]	; (63a0 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x294>)
    615e:	429e      	cmp	r6, r3
    6160:	bf94      	ite	ls
    6162:	00b0      	lslls	r0, r6, #2
    6164:	f04f 30ff 	movhi.w	r0, #4294967295
    6168:	4b8e      	ldr	r3, [pc, #568]	; (63a4 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x298>)
    616a:	4798      	blx	r3
    616c:	9013      	str	r0, [sp, #76]	; 0x4c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    616e:	00b2      	lsls	r2, r6, #2
    6170:	4639      	mov	r1, r7
    6172:	4b8d      	ldr	r3, [pc, #564]	; (63a8 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x29c>)
    6174:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6176:	686d      	ldr	r5, [r5, #4]
  inline int32 DimensionsCount() const { return size_; }
    6178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    617a:	4618      	mov	r0, r3
    617c:	9308      	str	r3, [sp, #32]
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    617e:	461a      	mov	r2, r3
    6180:	1e5f      	subs	r7, r3, #1

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
    6182:	2b00      	cmp	r3, #0
    6184:	dd27      	ble.n	61d6 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xca>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6186:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TFLITE_DCHECK_LT(i, size_);
    618a:	9912      	ldr	r1, [sp, #72]	; 0x48
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    618c:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    6190:	2201      	movs	r2, #1
    6192:	2300      	movs	r3, #0
    6194:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    6198:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
    619c:	46a2      	mov	sl, r4
    if (i != skip_dim) {
    619e:	429f      	cmp	r7, r3
    61a0:	d014      	beq.n	61cc <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc0>
    TFLITE_DCHECK_GE(i, 0);
    61a2:	2b00      	cmp	r3, #0
    61a4:	f2c0 80dd 	blt.w	6362 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x256>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    61a8:	2805      	cmp	r0, #5
    61aa:	bfcc      	ite	gt
    61ac:	f859 6023 	ldrgt.w	r6, [r9, r3, lsl #2]
    61b0:	f85e 6022 	ldrle.w	r6, [lr, r2, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    61b4:	428b      	cmp	r3, r1
    61b6:	f280 80d6 	bge.w	6366 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x25a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    61ba:	2905      	cmp	r1, #5
    61bc:	bfcc      	ite	gt
    61be:	f858 4023 	ldrgt.w	r4, [r8, r3, lsl #2]
    61c2:	f85c 4022 	ldrle.w	r4, [ip, r2, lsl #2]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    61c6:	42b4      	cmp	r4, r6
    61c8:	f040 80cf 	bne.w	636a <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x25e>
  for (int i = 0; i < dims_count; ++i) {
    61cc:	3301      	adds	r3, #1
    61ce:	3201      	adds	r2, #1
    61d0:	4298      	cmp	r0, r3
    61d2:	d1e4      	bne.n	619e <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x92>
    61d4:	4654      	mov	r4, sl
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    61d6:	2f00      	cmp	r7, #0
    61d8:	f2c0 80c9 	blt.w	636e <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x262>
    61dc:	9b08      	ldr	r3, [sp, #32]
    61de:	42bb      	cmp	r3, r7
    61e0:	f340 80c5 	ble.w	636e <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x262>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    61e4:	9b08      	ldr	r3, [sp, #32]
    61e6:	2b05      	cmp	r3, #5
    61e8:	f340 80d4 	ble.w	6394 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x288>
    61ec:	990d      	ldr	r1, [sp, #52]	; 0x34
  for (int i = 0; i < dims_count; ++i) {
    61ee:	2b00      	cmp	r3, #0
    61f0:	f340 80bf 	ble.w	6372 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x266>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    61f4:	2301      	movs	r3, #1
    61f6:	461e      	mov	r6, r3
    61f8:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    61fa:	4630      	mov	r0, r6
    61fc:	f8dd e020 	ldr.w	lr, [sp, #32]
    6200:	429f      	cmp	r7, r3
    6202:	bf14      	ite	ne
    6204:	f851 2023 	ldrne.w	r2, [r1, r3, lsl #2]
    6208:	4602      	moveq	r2, r0
    620a:	fb02 f606 	mul.w	r6, r2, r6
  for (int i = 0; i < dims_count; ++i) {
    620e:	3301      	adds	r3, #1
    6210:	459e      	cmp	lr, r3
    6212:	dcf5      	bgt.n	6200 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xf4>
    6214:	9607      	str	r6, [sp, #28]
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6216:	9b08      	ldr	r3, [sp, #32]
    6218:	2b05      	cmp	r3, #5
    621a:	f300 80ac 	bgt.w	6376 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x26a>
    621e:	ab18      	add	r3, sp, #96	; 0x60
    6220:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    6224:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    TFLITE_DCHECK_LT(i, size_);
    6228:	9a12      	ldr	r2, [sp, #72]	; 0x48
    622a:	9209      	str	r2, [sp, #36]	; 0x24
    622c:	4297      	cmp	r7, r2
    622e:	f280 80a9 	bge.w	6384 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x278>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6232:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6234:	2a05      	cmp	r2, #5
    6236:	f300 80a7 	bgt.w	6388 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x27c>
    623a:	aa18      	add	r2, sp, #96	; 0x60
    623c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    6240:	f857 7c14 	ldr.w	r7, [r7, #-20]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    6244:	429f      	cmp	r7, r3
    6246:	f040 80a3 	bne.w	6390 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x284>
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
    624a:	9b07      	ldr	r3, [sp, #28]
    624c:	2b00      	cmp	r3, #0
    624e:	dd6e      	ble.n	632e <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x222>
    6250:	00bb      	lsls	r3, r7, #2
    6252:	9306      	str	r3, [sp, #24]
    6254:	9403      	str	r4, [sp, #12]
    6256:	9504      	str	r5, [sp, #16]
    6258:	2300      	movs	r3, #0
    625a:	9305      	str	r3, [sp, #20]
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
    for (int c = 0; c < depth; ++c) {
    625c:	465b      	mov	r3, fp
    625e:	46bb      	mov	fp, r7
    6260:	461f      	mov	r7, r3
    float max = std::numeric_limits<float>::lowest();
    6262:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    6266:	930b      	str	r3, [sp, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
    6268:	f1bb 0f00 	cmp.w	fp, #0
    626c:	dd50      	ble.n	6310 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x204>
    626e:	9b06      	ldr	r3, [sp, #24]
    6270:	461a      	mov	r2, r3
    6272:	9c03      	ldr	r4, [sp, #12]
    6274:	eb02 0804 	add.w	r8, r2, r4
      return __a;
    6278:	ae0b      	add	r6, sp, #44	; 0x2c
      max = std::max(max, input_data[i * depth + c]);
    627a:	4625      	mov	r5, r4
    627c:	3404      	adds	r4, #4
      if (__a < __b)
    627e:	6829      	ldr	r1, [r5, #0]
    6280:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6282:	4b4a      	ldr	r3, [pc, #296]	; (63ac <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2a0>)
    6284:	4798      	blx	r3
      return __a;
    6286:	2800      	cmp	r0, #0
    6288:	bf08      	it	eq
    628a:	4635      	moveq	r5, r6
    628c:	682d      	ldr	r5, [r5, #0]
    628e:	950b      	str	r5, [sp, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
    6290:	4544      	cmp	r4, r8
    6292:	d1f2      	bne.n	627a <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x16e>
    6294:	9e03      	ldr	r6, [sp, #12]
    6296:	2300      	movs	r3, #0
    6298:	9301      	str	r3, [sp, #4]
    629a:	2400      	movs	r4, #0
    }

    // Compute sum.
    float sum = 0.f;
    for (int c = 0; c < depth; ++c) {
      sum += std::exp((input_data[i * depth + c] - max) *
    629c:	f8df a128 	ldr.w	sl, [pc, #296]	; 63c8 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2bc>
    62a0:	f8df 9128 	ldr.w	r9, [pc, #296]	; 63cc <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2c0>
    62a4:	9502      	str	r5, [sp, #8]
    62a6:	f856 8b04 	ldr.w	r8, [r6], #4
                      static_cast<float>(params.beta));
    62aa:	e9d7 0100 	ldrd	r0, r1, [r7]
    62ae:	4b40      	ldr	r3, [pc, #256]	; (63b0 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2a4>)
    62b0:	4798      	blx	r3
    62b2:	4605      	mov	r5, r0
      sum += std::exp((input_data[i * depth + c] - max) *
    62b4:	9902      	ldr	r1, [sp, #8]
    62b6:	4640      	mov	r0, r8
    62b8:	47d0      	blx	sl
    62ba:	4601      	mov	r1, r0
    62bc:	4628      	mov	r0, r5
    62be:	47c8      	blx	r9
  { return __builtin_expf(__x); }
    62c0:	4b3c      	ldr	r3, [pc, #240]	; (63b4 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2a8>)
    62c2:	4798      	blx	r3
    62c4:	4601      	mov	r1, r0
    62c6:	9801      	ldr	r0, [sp, #4]
    62c8:	4b3b      	ldr	r3, [pc, #236]	; (63b8 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2ac>)
    62ca:	4798      	blx	r3
    62cc:	9001      	str	r0, [sp, #4]
    for (int c = 0; c < depth; ++c) {
    62ce:	3401      	adds	r4, #1
    62d0:	455c      	cmp	r4, fp
    62d2:	d1e8      	bne.n	62a6 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x19a>
    62d4:	9e04      	ldr	r6, [sp, #16]
    62d6:	9d03      	ldr	r5, [sp, #12]
    62d8:	2400      	movs	r4, #0
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
    62da:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 63c8 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2bc>
                                            static_cast<float>(params.beta)) /
    62de:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 63b0 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2a4>
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
    62e2:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 63cc <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2c0>
    62e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    62e8:	f855 0b04 	ldr.w	r0, [r5], #4
    62ec:	47d0      	blx	sl
    62ee:	9002      	str	r0, [sp, #8]
                                            static_cast<float>(params.beta)) /
    62f0:	e9d7 0100 	ldrd	r0, r1, [r7]
    62f4:	47c8      	blx	r9
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
    62f6:	4601      	mov	r1, r0
    62f8:	9802      	ldr	r0, [sp, #8]
    62fa:	47c0      	blx	r8
    62fc:	4b2d      	ldr	r3, [pc, #180]	; (63b4 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2a8>)
    62fe:	4798      	blx	r3
                                            static_cast<float>(params.beta)) /
    6300:	9901      	ldr	r1, [sp, #4]
    6302:	4b2e      	ldr	r3, [pc, #184]	; (63bc <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b0>)
    6304:	4798      	blx	r3
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
    6306:	f846 0b04 	str.w	r0, [r6], #4
    for (int c = 0; c < depth; ++c) {
    630a:	3401      	adds	r4, #1
    630c:	455c      	cmp	r4, fp
    630e:	d1ea      	bne.n	62e6 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x1da>
  for (int i = 0; i < outer_size; ++i) {
    6310:	9b05      	ldr	r3, [sp, #20]
    6312:	3301      	adds	r3, #1
    6314:	9305      	str	r3, [sp, #20]
    6316:	9a03      	ldr	r2, [sp, #12]
    6318:	4610      	mov	r0, r2
    631a:	9906      	ldr	r1, [sp, #24]
    631c:	4408      	add	r0, r1
    631e:	9003      	str	r0, [sp, #12]
    6320:	9a04      	ldr	r2, [sp, #16]
    6322:	4610      	mov	r0, r2
    6324:	4408      	add	r0, r1
    6326:	9004      	str	r0, [sp, #16]
    6328:	9a07      	ldr	r2, [sp, #28]
    632a:	4293      	cmp	r3, r2
    632c:	d199      	bne.n	6262 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x156>
    if (size_ > kMaxSmallSize) {
    632e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6330:	2b05      	cmp	r3, #5
    6332:	dd03      	ble.n	633c <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x230>
      delete[] dims_pointer_;
    6334:	9813      	ldr	r0, [sp, #76]	; 0x4c
    6336:	b108      	cbz	r0, 633c <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x230>
    6338:	4b21      	ldr	r3, [pc, #132]	; (63c0 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b4>)
    633a:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    633c:	9b08      	ldr	r3, [sp, #32]
    633e:	2b05      	cmp	r3, #5
    6340:	dd03      	ble.n	634a <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x23e>
      delete[] dims_pointer_;
    6342:	980d      	ldr	r0, [sp, #52]	; 0x34
    6344:	b108      	cbz	r0, 634a <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x23e>
    6346:	4b1e      	ldr	r3, [pc, #120]	; (63c0 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b4>)
    6348:	4798      	blx	r3
}
    634a:	b019      	add	sp, #100	; 0x64
    634c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  RuntimeShape() : size_(0) {}
    6350:	2400      	movs	r4, #0
    6352:	940c      	str	r4, [sp, #48]	; 0x30
    6354:	e6f8      	b.n	6148 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x3c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6356:	a80d      	add	r0, sp, #52	; 0x34
    6358:	e6f1      	b.n	613e <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x32>
  RuntimeShape() : size_(0) {}
    635a:	9512      	str	r5, [sp, #72]	; 0x48
    635c:	e70c      	b.n	6178 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x6c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    635e:	a813      	add	r0, sp, #76	; 0x4c
    6360:	e705      	b.n	616e <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x62>
    TFLITE_DCHECK_GE(i, 0);
    6362:	4b18      	ldr	r3, [pc, #96]	; (63c4 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b8>)
    6364:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    6366:	4b17      	ldr	r3, [pc, #92]	; (63c4 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b8>)
    6368:	4798      	blx	r3
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    636a:	4b16      	ldr	r3, [pc, #88]	; (63c4 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b8>)
    636c:	4798      	blx	r3
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    636e:	4b15      	ldr	r3, [pc, #84]	; (63c4 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b8>)
    6370:	4798      	blx	r3
  int flat_size = 1;
    6372:	2301      	movs	r3, #1
    6374:	9307      	str	r3, [sp, #28]
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6378:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    637c:	e754      	b.n	6228 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x11c>
  int flat_size = 1;
    637e:	2301      	movs	r3, #1
    6380:	9307      	str	r3, [sp, #28]
    6382:	e74c      	b.n	621e <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x112>
    TFLITE_DCHECK_LT(i, size_);
    6384:	4b0f      	ldr	r3, [pc, #60]	; (63c4 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b8>)
    6386:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6388:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    638a:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    638e:	e759      	b.n	6244 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x138>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    6390:	4b0c      	ldr	r3, [pc, #48]	; (63c4 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b8>)
    6392:	4798      	blx	r3
  for (int i = 0; i < dims_count; ++i) {
    6394:	9b08      	ldr	r3, [sp, #32]
    6396:	2b00      	cmp	r3, #0
    6398:	ddf1      	ble.n	637e <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x272>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    639a:	a90d      	add	r1, sp, #52	; 0x34
    639c:	e72a      	b.n	61f4 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xe8>
    639e:	bf00      	nop
    63a0:	1ffffffe 	.word	0x1ffffffe
    63a4:	00009291 	.word	0x00009291
    63a8:	00014641 	.word	0x00014641
    63ac:	0001259d 	.word	0x0001259d
    63b0:	00011fa5 	.word	0x00011fa5
    63b4:	00011381 	.word	0x00011381
    63b8:	00012051 	.word	0x00012051
    63bc:	000123c9 	.word	0x000123c9
    63c0:	000091e1 	.word	0x000091e1
    63c4:	000138bd 	.word	0x000138bd
    63c8:	0001204d 	.word	0x0001204d
    63cc:	00012261 	.word	0x00012261

000063d0 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>:
      return kTfLiteError;
  }
}
}  // namespace activations

TfLiteRegistration Register_SOFTMAX() {
    63d0:	b470      	push	{r4, r5, r6}
    63d2:	4606      	mov	r6, r0
          /*prepare=*/activations::SoftmaxPrepare,
          /*invoke=*/activations::SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    63d4:	4604      	mov	r4, r0
    63d6:	4d05      	ldr	r5, [pc, #20]	; (63ec <_ZN6tflite3ops5micro16Register_SOFTMAXEv+0x1c>)
    63d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    63da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    63dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    63e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    63e4:	4630      	mov	r0, r6
    63e6:	bc70      	pop	{r4, r5, r6}
    63e8:	4770      	bx	lr
    63ea:	bf00      	nop
    63ec:	00020f9c 	.word	0x00020f9c

000063f0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
    63f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    63f4:	4605      	mov	r5, r0
  return a - b;
    63f6:	f040 447f 	orr.w	r4, r0, #4278190080	; 0xff000000
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
    63fa:	17e3      	asrs	r3, r4, #31
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    63fc:	0159      	lsls	r1, r3, #5
    63fe:	ea41 61d4 	orr.w	r1, r1, r4, lsr #27
    6402:	0160      	lsls	r0, r4, #5
             ? min
    6404:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    6408:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    640c:	db78      	blt.n	6500 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x110>
             : wide_shifted > max ? max
    640e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    6412:	2300      	movs	r3, #0
    6414:	4282      	cmp	r2, r0
    6416:	418b      	sbcs	r3, r1
    6418:	bfb8      	it	lt
    641a:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
      Rescale<0>(a_mod_quarter_minus_one_quarter));
    641e:	4b3a      	ldr	r3, [pc, #232]	; (6508 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x118>)
    6420:	4798      	blx	r3
    6422:	4682      	mov	sl, r0
  return a - b;
    6424:	1b64      	subs	r4, r4, r5
  return a ? BitNot(zero) : zero;
    6426:	f3c4 6800 	ubfx	r8, r4, #24, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    642a:	4938      	ldr	r1, [pc, #224]	; (650c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x11c>)
    642c:	4e38      	ldr	r6, [pc, #224]	; (6510 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x120>)
    642e:	47b0      	blx	r6
  return a ? BitNot(zero) : zero;
    6430:	f1c8 0900 	rsb	r9, r8, #0
  return a & b;
    6434:	ea00 0909 	and.w	r9, r0, r9
    6438:	f108 38ff 	add.w	r8, r8, #4294967295
    643c:	ea08 080a 	and.w	r8, r8, sl
  return a ^ b;
    6440:	ea89 0808 	eor.w	r8, r9, r8
  return a ? BitNot(zero) : zero;
    6444:	f3c4 6940 	ubfx	r9, r4, #25, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
    6448:	4932      	ldr	r1, [pc, #200]	; (6514 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x124>)
    644a:	4640      	mov	r0, r8
    644c:	47b0      	blx	r6
  return a ? BitNot(zero) : zero;
    644e:	f1c9 0a00 	rsb	sl, r9, #0
  return a & b;
    6452:	ea00 0a0a 	and.w	sl, r0, sl
    6456:	f109 39ff 	add.w	r9, r9, #4294967295
    645a:	ea09 0908 	and.w	r9, r9, r8
  return a ^ b;
    645e:	ea8a 0909 	eor.w	r9, sl, r9
  return a ? BitNot(zero) : zero;
    6462:	f3c4 6a80 	ubfx	sl, r4, #26, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
    6466:	492c      	ldr	r1, [pc, #176]	; (6518 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x128>)
    6468:	4648      	mov	r0, r9
    646a:	47b0      	blx	r6
  return a ? BitNot(zero) : zero;
    646c:	f1ca 0800 	rsb	r8, sl, #0
  return a & b;
    6470:	ea00 0808 	and.w	r8, r0, r8
    6474:	f10a 3aff 	add.w	sl, sl, #4294967295
    6478:	ea0a 0a09 	and.w	sl, sl, r9
  return a ^ b;
    647c:	ea88 0a0a 	eor.w	sl, r8, sl
  return a ? BitNot(zero) : zero;
    6480:	f3c4 68c0 	ubfx	r8, r4, #27, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
    6484:	4925      	ldr	r1, [pc, #148]	; (651c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x12c>)
    6486:	4650      	mov	r0, sl
    6488:	47b0      	blx	r6
  return a ? BitNot(zero) : zero;
    648a:	f1c8 0900 	rsb	r9, r8, #0
  return a & b;
    648e:	ea00 0909 	and.w	r9, r0, r9
    6492:	f108 38ff 	add.w	r8, r8, #4294967295
    6496:	ea08 080a 	and.w	r8, r8, sl
  return a ^ b;
    649a:	ea89 0808 	eor.w	r8, r9, r8
  return a ? BitNot(zero) : zero;
    649e:	f3c4 7700 	ubfx	r7, r4, #28, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
    64a2:	491f      	ldr	r1, [pc, #124]	; (6520 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x130>)
    64a4:	4640      	mov	r0, r8
    64a6:	47b0      	blx	r6
  return a ? BitNot(zero) : zero;
    64a8:	f1c7 0900 	rsb	r9, r7, #0
  return a & b;
    64ac:	ea00 0009 	and.w	r0, r0, r9
    64b0:	f107 39ff 	add.w	r9, r7, #4294967295
    64b4:	ea09 0908 	and.w	r9, r9, r8
  return a ^ b;
    64b8:	ea80 0909 	eor.w	r9, r0, r9
  return a ? BitNot(zero) : zero;
    64bc:	f3c4 7840 	ubfx	r8, r4, #29, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
    64c0:	4918      	ldr	r1, [pc, #96]	; (6524 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x134>)
    64c2:	4648      	mov	r0, r9
    64c4:	47b0      	blx	r6
  return a ? BitNot(zero) : zero;
    64c6:	f1c8 0700 	rsb	r7, r8, #0
  return a & b;
    64ca:	4007      	ands	r7, r0
    64cc:	f108 38ff 	add.w	r8, r8, #4294967295
    64d0:	ea08 0009 	and.w	r0, r8, r9
  return a ^ b;
    64d4:	4047      	eors	r7, r0
  return a ? BitNot(zero) : zero;
    64d6:	f3c4 7480 	ubfx	r4, r4, #30, #1
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
    64da:	21f2      	movs	r1, #242	; 0xf2
    64dc:	4638      	mov	r0, r7
    64de:	47b0      	blx	r6
  return a ? BitNot(zero) : zero;
    64e0:	4263      	negs	r3, r4
  return a & b;
    64e2:	4018      	ands	r0, r3
    64e4:	3c01      	subs	r4, #1
    64e6:	403c      	ands	r4, r7
  return a ^ b;
    64e8:	4044      	eors	r4, r0
  return a ? BitNot(zero) : zero;
    64ea:	fab5 f385 	clz	r3, r5
    64ee:	095b      	lsrs	r3, r3, #5
  return a & b;
    64f0:	1e58      	subs	r0, r3, #1
    64f2:	4020      	ands	r0, r4
  return a ? BitNot(zero) : zero;
    64f4:	425b      	negs	r3, r3
  return a & b;
    64f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
    64fa:	4058      	eors	r0, r3
    64fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
             ? min
    6500:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    6504:	e78b      	b.n	641e <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x2e>
    6506:	bf00      	nop
    6508:	00005215 	.word	0x00005215
    650c:	63afbe7b 	.word	0x63afbe7b
    6510:	00005191 	.word	0x00005191
    6514:	4da2cbf2 	.word	0x4da2cbf2
    6518:	2f16ac6c 	.word	0x2f16ac6c
    651c:	1152aaa4 	.word	0x1152aaa4
    6520:	02582ab7 	.word	0x02582ab7
    6524:	000afe11 	.word	0x000afe11

00006528 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
  return a & b;
    6528:	0fc3      	lsrs	r3, r0, #31
  return a + b;
    652a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
  return a & b;
    652e:	f3c0 020b 	ubfx	r2, r0, #0, #12
  return a >> offset;
    6532:	1300      	asrs	r0, r0, #12
}
    6534:	4293      	cmp	r3, r2
    6536:	bfb8      	it	lt
    6538:	3001      	addlt	r0, #1
    653a:	4770      	bx	lr

0000653c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:
                      const SoftmaxParams& op_data) {
    653c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6540:	b0b9      	sub	sp, #228	; 0xe4
    6542:	4605      	mov	r5, r0
    6544:	460e      	mov	r6, r1
    6546:	4614      	mov	r4, r2
  if (input->type == kTfLiteUInt8) {
    6548:	7803      	ldrb	r3, [r0, #0]
    654a:	2b03      	cmp	r3, #3
    654c:	f000 80b0 	beq.w	66b0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x174>
    if (output->type == kTfLiteInt16) {
    6550:	780b      	ldrb	r3, [r1, #0]
    6552:	2b07      	cmp	r3, #7
    6554:	f000 8251 	beq.w	69fa <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x4be>
  if (tensor == nullptr) {
    6558:	2800      	cmp	r0, #0
    655a:	f000 83cb 	beq.w	6cf4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7b8>
  const int dims_size = dims->size;
    655e:	f8d0 8008 	ldr.w	r8, [r0, #8]
    6562:	f858 7b04 	ldr.w	r7, [r8], #4
    size_ = dimensions_count;
    6566:	9726      	str	r7, [sp, #152]	; 0x98
    if (dimensions_count > kMaxSmallSize) {
    6568:	2f05      	cmp	r7, #5
    656a:	f340 83c7 	ble.w	6cfc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7c0>
      dims_pointer_ = new int32[dimensions_count];
    656e:	4bb8      	ldr	r3, [pc, #736]	; (6850 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x314>)
    6570:	429f      	cmp	r7, r3
    6572:	bf94      	ite	ls
    6574:	00b8      	lslls	r0, r7, #2
    6576:	f04f 30ff 	movhi.w	r0, #4294967295
    657a:	4bb6      	ldr	r3, [pc, #728]	; (6854 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x318>)
    657c:	4798      	blx	r3
    657e:	9027      	str	r0, [sp, #156]	; 0x9c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    6580:	00ba      	lsls	r2, r7, #2
    6582:	4641      	mov	r1, r8
    6584:	4bb4      	ldr	r3, [pc, #720]	; (6858 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x31c>)
    6586:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    6588:	686b      	ldr	r3, [r5, #4]
    658a:	9300      	str	r3, [sp, #0]
  if (tensor == nullptr) {
    658c:	2e00      	cmp	r6, #0
    658e:	f000 83b7 	beq.w	6d00 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7c4>
  const int dims_size = dims->size;
    6592:	68b7      	ldr	r7, [r6, #8]
    6594:	f857 5b04 	ldr.w	r5, [r7], #4
    size_ = dimensions_count;
    6598:	952c      	str	r5, [sp, #176]	; 0xb0
    if (dimensions_count > kMaxSmallSize) {
    659a:	2d05      	cmp	r5, #5
    659c:	f340 83b4 	ble.w	6d08 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7cc>
      dims_pointer_ = new int32[dimensions_count];
    65a0:	4bab      	ldr	r3, [pc, #684]	; (6850 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x314>)
    65a2:	429d      	cmp	r5, r3
    65a4:	bf94      	ite	ls
    65a6:	00a8      	lslls	r0, r5, #2
    65a8:	f04f 30ff 	movhi.w	r0, #4294967295
    65ac:	4ba9      	ldr	r3, [pc, #676]	; (6854 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x318>)
    65ae:	4798      	blx	r3
    65b0:	902d      	str	r0, [sp, #180]	; 0xb4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    65b2:	00aa      	lsls	r2, r5, #2
    65b4:	4639      	mov	r1, r7
    65b6:	4ba8      	ldr	r3, [pc, #672]	; (6858 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x31c>)
    65b8:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    65ba:	f8d6 b004 	ldr.w	fp, [r6, #4]
// Quantized softmax with int8/uint8 input and int8/uint8/int16 output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32 input_beta_multiplier = params.input_multiplier;
    65be:	68a6      	ldr	r6, [r4, #8]
  const int32 input_beta_left_shift = params.input_left_shift;
    65c0:	68e3      	ldr	r3, [r4, #12]
    65c2:	9302      	str	r3, [sp, #8]
  const int diff_min = params.diff_min;
    65c4:	f8d4 a018 	ldr.w	sl, [r4, #24]
  inline int32 DimensionsCount() const { return size_; }
    65c8:	9926      	ldr	r1, [sp, #152]	; 0x98
  using FixedPointScaledDiff =
      gemmlowp::FixedPoint<int32, kScaledDiffIntegerBits>;
  using FixedPointAccum = gemmlowp::FixedPoint<int32, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
    65ca:	1e4f      	subs	r7, r1, #1
  for (int i = 0; i < dims_count; ++i) {
    65cc:	2900      	cmp	r1, #0
    65ce:	dd25      	ble.n	661c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xe0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    65d0:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
    TFLITE_DCHECK_LT(i, size_);
    65d4:	982c      	ldr	r0, [sp, #176]	; 0xb0
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    65d6:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
    65da:	2201      	movs	r2, #1
    65dc:	2300      	movs	r3, #0
    65de:	f10d 0cb0 	add.w	ip, sp, #176	; 0xb0
    65e2:	f10d 0e98 	add.w	lr, sp, #152	; 0x98
    if (i != skip_dim) {
    65e6:	429f      	cmp	r7, r3
    65e8:	d014      	beq.n	6614 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xd8>
    TFLITE_DCHECK_GE(i, 0);
    65ea:	2b00      	cmp	r3, #0
    65ec:	f2c0 838e 	blt.w	6d0c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7d0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    65f0:	2905      	cmp	r1, #5
    65f2:	bfcc      	ite	gt
    65f4:	f859 4023 	ldrgt.w	r4, [r9, r3, lsl #2]
    65f8:	f85e 4022 	ldrle.w	r4, [lr, r2, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    65fc:	4298      	cmp	r0, r3
    65fe:	f340 8387 	ble.w	6d10 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7d4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6602:	2805      	cmp	r0, #5
    6604:	bfcc      	ite	gt
    6606:	f858 5023 	ldrgt.w	r5, [r8, r3, lsl #2]
    660a:	f85c 5022 	ldrle.w	r5, [ip, r2, lsl #2]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    660e:	42a5      	cmp	r5, r4
    6610:	f040 8380 	bne.w	6d14 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7d8>
  for (int i = 0; i < dims_count; ++i) {
    6614:	3301      	adds	r3, #1
    6616:	3201      	adds	r2, #1
    6618:	4299      	cmp	r1, r3
    661a:	d1e4      	bne.n	65e6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xaa>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    661c:	2f00      	cmp	r7, #0
    661e:	f2c0 837b 	blt.w	6d18 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7dc>
    6622:	42b9      	cmp	r1, r7
    6624:	f340 8378 	ble.w	6d18 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7dc>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6628:	2905      	cmp	r1, #5
    662a:	f340 8537 	ble.w	709c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xb60>
    662e:	9827      	ldr	r0, [sp, #156]	; 0x9c
  for (int i = 0; i < dims_count; ++i) {
    6630:	2900      	cmp	r1, #0
    6632:	f340 8373 	ble.w	6d1c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7e0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6636:	2301      	movs	r3, #1
    6638:	461d      	mov	r5, r3
    663a:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    663c:	462c      	mov	r4, r5
    663e:	429f      	cmp	r7, r3
    6640:	bf14      	ite	ne
    6642:	f850 2023 	ldrne.w	r2, [r0, r3, lsl #2]
    6646:	4622      	moveq	r2, r4
    6648:	fb02 f505 	mul.w	r5, r2, r5
  for (int i = 0; i < dims_count; ++i) {
    664c:	3301      	adds	r3, #1
    664e:	4299      	cmp	r1, r3
    6650:	dcf5      	bgt.n	663e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x102>
    6652:	950a      	str	r5, [sp, #40]	; 0x28
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6654:	2905      	cmp	r1, #5
    6656:	f300 8363 	bgt.w	6d20 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7e4>
    665a:	ab38      	add	r3, sp, #224	; 0xe0
    665c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    6660:	f853 2c44 	ldr.w	r2, [r3, #-68]
    TFLITE_DCHECK_LT(i, size_);
    6664:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    6666:	429f      	cmp	r7, r3
    6668:	f280 8361 	bge.w	6d2e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7f2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    666c:	2b05      	cmp	r3, #5
    666e:	f300 8360 	bgt.w	6d32 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7f6>
    6672:	ab38      	add	r3, sp, #224	; 0xe0
    6674:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    6678:	f857 3c2c 	ldr.w	r3, [r7, #-44]
    667c:	9308      	str	r3, [sp, #32]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    667e:	9b08      	ldr	r3, [sp, #32]
    6680:	4293      	cmp	r3, r2
    6682:	f040 835b 	bne.w	6d3c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x800>
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
    6686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6688:	2b00      	cmp	r3, #0
    668a:	f340 843b 	ble.w	6f04 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9c8>
    668e:	9b08      	ldr	r3, [sp, #32]
    6690:	930b      	str	r3, [sp, #44]	; 0x2c
    6692:	9a00      	ldr	r2, [sp, #0]
    6694:	18d7      	adds	r7, r2, r3
    6696:	9206      	str	r2, [sp, #24]
    6698:	f8cd b01c 	str.w	fp, [sp, #28]
    669c:	2300      	movs	r3, #0
    669e:	9309      	str	r3, [sp, #36]	; 0x24
  std::int64_t b_64(b);
    66a0:	4633      	mov	r3, r6
    66a2:	17f4      	asrs	r4, r6, #31
    66a4:	e9cd 3400 	strd	r3, r4, [sp]
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    66a8:	f8dd b008 	ldr.w	fp, [sp, #8]
    66ac:	f000 bc0d 	b.w	6eca <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x98e>
  if (tensor == nullptr) {
    66b0:	2800      	cmp	r0, #0
    66b2:	f000 809f 	beq.w	67f4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2b8>
  const int dims_size = dims->size;
    66b6:	f8d0 8008 	ldr.w	r8, [r0, #8]
    66ba:	f858 7b04 	ldr.w	r7, [r8], #4
    size_ = dimensions_count;
    66be:	970e      	str	r7, [sp, #56]	; 0x38
    if (dimensions_count > kMaxSmallSize) {
    66c0:	2f05      	cmp	r7, #5
    66c2:	f340 809b 	ble.w	67fc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2c0>
      dims_pointer_ = new int32[dimensions_count];
    66c6:	4b62      	ldr	r3, [pc, #392]	; (6850 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x314>)
    66c8:	429f      	cmp	r7, r3
    66ca:	bf94      	ite	ls
    66cc:	00b8      	lslls	r0, r7, #2
    66ce:	f04f 30ff 	movhi.w	r0, #4294967295
    66d2:	4b60      	ldr	r3, [pc, #384]	; (6854 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x318>)
    66d4:	4798      	blx	r3
    66d6:	900f      	str	r0, [sp, #60]	; 0x3c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    66d8:	00ba      	lsls	r2, r7, #2
    66da:	4641      	mov	r1, r8
    66dc:	4b5e      	ldr	r3, [pc, #376]	; (6858 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x31c>)
    66de:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    66e0:	f8d5 a004 	ldr.w	sl, [r5, #4]
  if (tensor == nullptr) {
    66e4:	2e00      	cmp	r6, #0
    66e6:	f000 808b 	beq.w	6800 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2c4>
  const int dims_size = dims->size;
    66ea:	68b7      	ldr	r7, [r6, #8]
    66ec:	f857 5b04 	ldr.w	r5, [r7], #4
    size_ = dimensions_count;
    66f0:	9514      	str	r5, [sp, #80]	; 0x50
    if (dimensions_count > kMaxSmallSize) {
    66f2:	2d05      	cmp	r5, #5
    66f4:	f340 8088 	ble.w	6808 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2cc>
      dims_pointer_ = new int32[dimensions_count];
    66f8:	4b55      	ldr	r3, [pc, #340]	; (6850 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x314>)
    66fa:	429d      	cmp	r5, r3
    66fc:	bf94      	ite	ls
    66fe:	00a8      	lslls	r0, r5, #2
    6700:	f04f 30ff 	movhi.w	r0, #4294967295
    6704:	4b53      	ldr	r3, [pc, #332]	; (6854 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x318>)
    6706:	4798      	blx	r3
    6708:	9015      	str	r0, [sp, #84]	; 0x54
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    670a:	00aa      	lsls	r2, r5, #2
    670c:	4639      	mov	r1, r7
    670e:	4b52      	ldr	r3, [pc, #328]	; (6858 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x31c>)
    6710:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6712:	f8d6 b004 	ldr.w	fp, [r6, #4]
  const int32 input_beta_multiplier = params.input_multiplier;
    6716:	68a6      	ldr	r6, [r4, #8]
  const int32 input_beta_left_shift = params.input_left_shift;
    6718:	68e3      	ldr	r3, [r4, #12]
    671a:	9300      	str	r3, [sp, #0]
  const int diff_min = params.diff_min;
    671c:	69a3      	ldr	r3, [r4, #24]
    671e:	9304      	str	r3, [sp, #16]
  inline int32 DimensionsCount() const { return size_; }
    6720:	990e      	ldr	r1, [sp, #56]	; 0x38
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    6722:	1e4f      	subs	r7, r1, #1
  for (int i = 0; i < dims_count; ++i) {
    6724:	2900      	cmp	r1, #0
    6726:	dd22      	ble.n	676e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x232>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6728:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    TFLITE_DCHECK_LT(i, size_);
    672c:	9814      	ldr	r0, [sp, #80]	; 0x50
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    672e:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
    6732:	2201      	movs	r2, #1
    6734:	2300      	movs	r3, #0
    6736:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
    673a:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
    if (i != skip_dim) {
    673e:	429f      	cmp	r7, r3
    6740:	d011      	beq.n	6766 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x22a>
    TFLITE_DCHECK_GE(i, 0);
    6742:	2b00      	cmp	r3, #0
    6744:	db62      	blt.n	680c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2d0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6746:	2905      	cmp	r1, #5
    6748:	bfcc      	ite	gt
    674a:	f859 4023 	ldrgt.w	r4, [r9, r3, lsl #2]
    674e:	f85e 4022 	ldrle.w	r4, [lr, r2, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    6752:	4298      	cmp	r0, r3
    6754:	dd5c      	ble.n	6810 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2d4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6756:	2805      	cmp	r0, #5
    6758:	bfcc      	ite	gt
    675a:	f858 5023 	ldrgt.w	r5, [r8, r3, lsl #2]
    675e:	f85c 5022 	ldrle.w	r5, [ip, r2, lsl #2]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    6762:	42a5      	cmp	r5, r4
    6764:	d156      	bne.n	6814 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2d8>
  for (int i = 0; i < dims_count; ++i) {
    6766:	3301      	adds	r3, #1
    6768:	3201      	adds	r2, #1
    676a:	4299      	cmp	r1, r3
    676c:	d1e7      	bne.n	673e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x202>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    676e:	2f00      	cmp	r7, #0
    6770:	db52      	blt.n	6818 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2dc>
    6772:	42b9      	cmp	r1, r7
    6774:	dd50      	ble.n	6818 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2dc>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6776:	2905      	cmp	r1, #5
    6778:	f340 83d5 	ble.w	6f26 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9ea>
    677c:	980f      	ldr	r0, [sp, #60]	; 0x3c
  for (int i = 0; i < dims_count; ++i) {
    677e:	2900      	cmp	r1, #0
    6780:	dd4c      	ble.n	681c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2e0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6782:	2301      	movs	r3, #1
    6784:	461d      	mov	r5, r3
    6786:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    6788:	462c      	mov	r4, r5
    678a:	429f      	cmp	r7, r3
    678c:	bf14      	ite	ne
    678e:	f850 2023 	ldrne.w	r2, [r0, r3, lsl #2]
    6792:	4622      	moveq	r2, r4
    6794:	fb02 f505 	mul.w	r5, r2, r5
  for (int i = 0; i < dims_count; ++i) {
    6798:	3301      	adds	r3, #1
    679a:	4299      	cmp	r1, r3
    679c:	dcf5      	bgt.n	678a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x24e>
    679e:	950a      	str	r5, [sp, #40]	; 0x28
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    67a0:	2905      	cmp	r1, #5
    67a2:	dc3d      	bgt.n	6820 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2e4>
    67a4:	ab38      	add	r3, sp, #224	; 0xe0
    67a6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    67aa:	f853 2ca4 	ldr.w	r2, [r3, #-164]
    TFLITE_DCHECK_LT(i, size_);
    67ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
    67b0:	429f      	cmp	r7, r3
    67b2:	da3c      	bge.n	682e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2f2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    67b4:	2b05      	cmp	r3, #5
    67b6:	dc3c      	bgt.n	6832 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2f6>
    67b8:	ab38      	add	r3, sp, #224	; 0xe0
    67ba:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    67be:	f857 3c8c 	ldr.w	r3, [r7, #-140]
    67c2:	9308      	str	r3, [sp, #32]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    67c4:	9b08      	ldr	r3, [sp, #32]
    67c6:	4293      	cmp	r3, r2
    67c8:	d138      	bne.n	683c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x300>
  for (int i = 0; i < outer_size; ++i) {
    67ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    67cc:	2b00      	cmp	r3, #0
    67ce:	f340 8102 	ble.w	69d6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x49a>
    67d2:	9b08      	ldr	r3, [sp, #32]
    67d4:	930b      	str	r3, [sp, #44]	; 0x2c
    67d6:	eb0a 0703 	add.w	r7, sl, r3
    67da:	f8cd a018 	str.w	sl, [sp, #24]
    67de:	f8cd b01c 	str.w	fp, [sp, #28]
    67e2:	2300      	movs	r3, #0
    67e4:	9309      	str	r3, [sp, #36]	; 0x24
  std::int64_t b_64(b);
    67e6:	4633      	mov	r3, r6
    67e8:	17f4      	asrs	r4, r6, #31
    67ea:	e9cd 3402 	strd	r3, r4, [sp, #8]
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    67ee:	f8dd 8010 	ldr.w	r8, [sp, #16]
    67f2:	e0d4      	b.n	699e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x462>
  RuntimeShape() : size_(0) {}
    67f4:	2300      	movs	r3, #0
    67f6:	930e      	str	r3, [sp, #56]	; 0x38
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    67f8:	469a      	mov	sl, r3
    67fa:	e773      	b.n	66e4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x1a8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    67fc:	a80f      	add	r0, sp, #60	; 0x3c
    67fe:	e76b      	b.n	66d8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x19c>
  RuntimeShape() : size_(0) {}
    6800:	2300      	movs	r3, #0
    6802:	9314      	str	r3, [sp, #80]	; 0x50
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6804:	469b      	mov	fp, r3
    6806:	e786      	b.n	6716 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x1da>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6808:	a815      	add	r0, sp, #84	; 0x54
    680a:	e77e      	b.n	670a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x1ce>
    TFLITE_DCHECK_GE(i, 0);
    680c:	4b13      	ldr	r3, [pc, #76]	; (685c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x320>)
    680e:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    6810:	4b12      	ldr	r3, [pc, #72]	; (685c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x320>)
    6812:	4798      	blx	r3
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    6814:	4b11      	ldr	r3, [pc, #68]	; (685c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x320>)
    6816:	4798      	blx	r3
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    6818:	4b10      	ldr	r3, [pc, #64]	; (685c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x320>)
    681a:	4798      	blx	r3
  int flat_size = 1;
    681c:	2301      	movs	r3, #1
    681e:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6820:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6822:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    6826:	e7c2      	b.n	67ae <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x272>
  int flat_size = 1;
    6828:	2301      	movs	r3, #1
    682a:	930a      	str	r3, [sp, #40]	; 0x28
    682c:	e7ba      	b.n	67a4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x268>
    TFLITE_DCHECK_LT(i, size_);
    682e:	4b0b      	ldr	r3, [pc, #44]	; (685c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x320>)
    6830:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6832:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6834:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    6838:	9308      	str	r3, [sp, #32]
    683a:	e7c3      	b.n	67c4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x288>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    683c:	4b07      	ldr	r3, [pc, #28]	; (685c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x320>)
    683e:	4798      	blx	r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6840:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6844:	f040 838a 	bne.w	6f5c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xa20>
    6848:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    684c:	e373      	b.n	6f36 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9fa>
    684e:	bf00      	nop
    6850:	1ffffffe 	.word	0x1ffffffe
    6854:	00009291 	.word	0x00009291
    6858:	00014641 	.word	0x00014641
    685c:	000138bd 	.word	0x000138bd
      input_val);
}

inline int32 GetReciprocal(int32 x, int x_integer_digits,
                           int* num_bits_over_unit) {
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
    6860:	4650      	mov	r0, sl
  return integer_input ? __builtin_clz(integer_input)
    6862:	f1ba 0f00 	cmp.w	sl, #0
    6866:	d11b      	bne.n	68a0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x364>
    6868:	f04f 0a20 	mov.w	sl, #32
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
    686c:	f1ca 090c 	rsb	r9, sl, #12
  const int32 shifted_sum_minus_one =
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
    6870:	fa00 f00a 	lsl.w	r0, r0, sl
                         (static_cast<uint32>(1) << 31));

  gemmlowp::FixedPoint<int32, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
    6874:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    6878:	4ba9      	ldr	r3, [pc, #676]	; (6b20 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5e4>)
    687a:	4798      	blx	r3
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
    687c:	9004      	str	r0, [sp, #16]

    for (int c = 0; c < depth; ++c) {
    687e:	9b08      	ldr	r3, [sp, #32]
    6880:	2b00      	cmp	r3, #0
    6882:	dd7b      	ble.n	697c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x440>
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);

        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
            (shifted_scale * exp_in_0).raw(),
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
    6884:	f109 0917 	add.w	r9, r9, #23
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    6888:	f04f 0a01 	mov.w	sl, #1
    688c:	fa0a fa09 	lsl.w	sl, sl, r9
    6890:	f10a 3aff 	add.w	sl, sl, #4294967295
  return a >> offset;
    6894:	ea4f 036a 	mov.w	r3, sl, asr #1
    6898:	9305      	str	r3, [sp, #20]
    689a:	9d07      	ldr	r5, [sp, #28]
    689c:	9c06      	ldr	r4, [sp, #24]
    689e:	e01f      	b.n	68e0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x3a4>
  return integer_input ? __builtin_clz(integer_input)
    68a0:	faba fa8a 	clz	sl, sl
    68a4:	e7e2      	b.n	686c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x330>
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
    68a6:	2000      	movs	r0, #0
  return integer_input ? __builtin_clz(integer_input)
    68a8:	f04f 0a20 	mov.w	sl, #32
    68ac:	e7de      	b.n	686c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x330>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    68ae:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    68b2:	d120      	bne.n	68f6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x3ba>
    68b4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    68b8:	e03a      	b.n	6930 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x3f4>
  assert(exponent >= 0);
    68ba:	4b9a      	ldr	r3, [pc, #616]	; (6b24 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5e8>)
    68bc:	4a9a      	ldr	r2, [pc, #616]	; (6b28 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5ec>)
    68be:	f44f 71b3 	mov.w	r1, #358	; 0x166
    68c2:	489a      	ldr	r0, [pc, #616]	; (6b2c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5f0>)
    68c4:	4c9a      	ldr	r4, [pc, #616]	; (6b30 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5f4>)
    68c6:	47a0      	blx	r4
  assert(exponent <= 31);
    68c8:	4b9a      	ldr	r3, [pc, #616]	; (6b34 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5f8>)
    68ca:	4a97      	ldr	r2, [pc, #604]	; (6b28 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5ec>)
    68cc:	f240 1167 	movw	r1, #359	; 0x167
    68d0:	4896      	ldr	r0, [pc, #600]	; (6b2c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5f0>)
    68d2:	4c97      	ldr	r4, [pc, #604]	; (6b30 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5f4>)
    68d4:	47a0      	blx	r4
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    68d6:	2300      	movs	r3, #0
    68d8:	702b      	strb	r3, [r5, #0]
    68da:	3501      	adds	r5, #1
    for (int c = 0; c < depth; ++c) {
    68dc:	42bc      	cmp	r4, r7
    68de:	d04d      	beq.n	697c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x440>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
    68e0:	f814 2b01 	ldrb.w	r2, [r4], #1
    68e4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    68e8:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    68ea:	4590      	cmp	r8, r2
    68ec:	dcf3      	bgt.n	68d6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x39a>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    68ee:	9b00      	ldr	r3, [sp, #0]
    68f0:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    68f2:	4296      	cmp	r6, r2
    68f4:	d0db      	beq.n	68ae <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x372>
  std::int64_t a_64(a);
    68f6:	ea4f 7ce2 	mov.w	ip, r2, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    68fa:	9b03      	ldr	r3, [sp, #12]
    68fc:	fb02 f103 	mul.w	r1, r2, r3
    6900:	fb06 110c 	mla	r1, r6, ip, r1
    6904:	fba2 2306 	umull	r2, r3, r2, r6
    6908:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    690a:	2a00      	cmp	r2, #0
    690c:	f173 0100 	sbcs.w	r1, r3, #0
    6910:	f2c0 8414 	blt.w	713c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc00>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    6914:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    6918:	f143 0300 	adc.w	r3, r3, #0
    691c:	4610      	mov	r0, r2
    691e:	4619      	mov	r1, r3
    6920:	2a00      	cmp	r2, #0
    6922:	f173 0e00 	sbcs.w	lr, r3, #0
    6926:	f2c0 8338 	blt.w	6f9a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xa5e>
    692a:	0fc0      	lsrs	r0, r0, #31
    692c:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    6930:	4b81      	ldr	r3, [pc, #516]	; (6b38 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5fc>)
    6932:	4798      	blx	r3
            (shifted_scale * exp_in_0).raw(),
    6934:	4601      	mov	r1, r0
    6936:	9804      	ldr	r0, [sp, #16]
    6938:	4b80      	ldr	r3, [pc, #512]	; (6b3c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x600>)
    693a:	4798      	blx	r3
  assert(exponent >= 0);
    693c:	f1b9 0f00 	cmp.w	r9, #0
    6940:	dbbb      	blt.n	68ba <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x37e>
  assert(exponent <= 31);
    6942:	f1b9 0f1f 	cmp.w	r9, #31
    6946:	dcbf      	bgt.n	68c8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x38c>
  return a + b;
    6948:	9b05      	ldr	r3, [sp, #20]
    694a:	eb03 72d0 	add.w	r2, r3, r0, lsr #31
  return a & b;
    694e:	ea00 030a 	and.w	r3, r0, sl
  return a >> offset;
    6952:	fa40 f009 	asr.w	r0, r0, r9
  return a + b;
    6956:	429a      	cmp	r2, r3
    6958:	bfb8      	it	lt
    695a:	3001      	addlt	r0, #1
            static_cast<int32>(std::numeric_limits<OutputT>::min());
    695c:	900d      	str	r0, [sp, #52]	; 0x34
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
    695e:	23ff      	movs	r3, #255	; 0xff
    6960:	9333      	str	r3, [sp, #204]	; 0xcc
      if (__b < __a)
    6962:	4298      	cmp	r0, r3
      return __a;
    6964:	bfd4      	ite	le
    6966:	ab0d      	addle	r3, sp, #52	; 0x34
	return __b;
    6968:	ab33      	addgt	r3, sp, #204	; 0xcc
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
    696a:	2200      	movs	r2, #0
    696c:	9232      	str	r2, [sp, #200]	; 0xc8
      if (__a < __b)
    696e:	681a      	ldr	r2, [r3, #0]
    6970:	2a00      	cmp	r2, #0
	return __b;
    6972:	bfb8      	it	lt
    6974:	ab32      	addlt	r3, sp, #200	; 0xc8
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    6976:	681b      	ldr	r3, [r3, #0]
    6978:	702b      	strb	r3, [r5, #0]
    697a:	e7ae      	b.n	68da <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x39e>
  for (int i = 0; i < outer_size; ++i) {
    697c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    697e:	3301      	adds	r3, #1
    6980:	9309      	str	r3, [sp, #36]	; 0x24
    6982:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6984:	440f      	add	r7, r1
    6986:	9a06      	ldr	r2, [sp, #24]
    6988:	4610      	mov	r0, r2
    698a:	460a      	mov	r2, r1
    698c:	4408      	add	r0, r1
    698e:	9006      	str	r0, [sp, #24]
    6990:	9907      	ldr	r1, [sp, #28]
    6992:	4608      	mov	r0, r1
    6994:	4410      	add	r0, r2
    6996:	9007      	str	r0, [sp, #28]
    6998:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    699a:	4293      	cmp	r3, r2
    699c:	d01b      	beq.n	69d6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x49a>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    699e:	2300      	movs	r3, #0
    69a0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    for (int c = 0; c < depth; ++c) {
    69a4:	9b08      	ldr	r3, [sp, #32]
    69a6:	2b00      	cmp	r3, #0
    69a8:	f77f af7d 	ble.w	68a6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x36a>
    69ac:	9c06      	ldr	r4, [sp, #24]
      return __a;
    69ae:	f10d 0033 	add.w	r0, sp, #51	; 0x33
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    69b2:	4623      	mov	r3, r4
    69b4:	3401      	adds	r4, #1
      if (__a < __b)
    69b6:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
    69ba:	781a      	ldrb	r2, [r3, #0]
    69bc:	4291      	cmp	r1, r2
      return __a;
    69be:	bfa8      	it	ge
    69c0:	4603      	movge	r3, r0
    69c2:	f893 9000 	ldrb.w	r9, [r3]
    69c6:	f88d 9033 	strb.w	r9, [sp, #51]	; 0x33
    for (int c = 0; c < depth; ++c) {
    69ca:	42bc      	cmp	r4, r7
    69cc:	d1f1      	bne.n	69b2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x476>
    69ce:	9d06      	ldr	r5, [sp, #24]
    69d0:	f04f 0a00 	mov.w	sl, #0
    69d4:	e2b7      	b.n	6f46 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xa0a>
    if (size_ > kMaxSmallSize) {
    69d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    69d8:	2b05      	cmp	r3, #5
    69da:	dd03      	ble.n	69e4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x4a8>
      delete[] dims_pointer_;
    69dc:	9815      	ldr	r0, [sp, #84]	; 0x54
    69de:	b108      	cbz	r0, 69e4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x4a8>
    69e0:	4b57      	ldr	r3, [pc, #348]	; (6b40 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x604>)
    69e2:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    69e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    69e6:	2b05      	cmp	r3, #5
    69e8:	f340 829a 	ble.w	6f20 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9e4>
      delete[] dims_pointer_;
    69ec:	980f      	ldr	r0, [sp, #60]	; 0x3c
    69ee:	2800      	cmp	r0, #0
    69f0:	f000 8296 	beq.w	6f20 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9e4>
    69f4:	4b52      	ldr	r3, [pc, #328]	; (6b40 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x604>)
    69f6:	4798      	blx	r3
    69f8:	e292      	b.n	6f20 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9e4>
  if (tensor == nullptr) {
    69fa:	2800      	cmp	r0, #0
    69fc:	d069      	beq.n	6ad2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x596>
  const int dims_size = dims->size;
    69fe:	f8d0 8008 	ldr.w	r8, [r0, #8]
    6a02:	f858 7b04 	ldr.w	r7, [r8], #4
    size_ = dimensions_count;
    6a06:	971a      	str	r7, [sp, #104]	; 0x68
    if (dimensions_count > kMaxSmallSize) {
    6a08:	2f05      	cmp	r7, #5
    6a0a:	dd66      	ble.n	6ada <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x59e>
      dims_pointer_ = new int32[dimensions_count];
    6a0c:	4b4d      	ldr	r3, [pc, #308]	; (6b44 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x608>)
    6a0e:	429f      	cmp	r7, r3
    6a10:	bf94      	ite	ls
    6a12:	00b8      	lslls	r0, r7, #2
    6a14:	f04f 30ff 	movhi.w	r0, #4294967295
    6a18:	4b4b      	ldr	r3, [pc, #300]	; (6b48 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x60c>)
    6a1a:	4798      	blx	r3
    6a1c:	901b      	str	r0, [sp, #108]	; 0x6c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    6a1e:	00ba      	lsls	r2, r7, #2
    6a20:	4641      	mov	r1, r8
    6a22:	4b4a      	ldr	r3, [pc, #296]	; (6b4c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x610>)
    6a24:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    6a26:	686b      	ldr	r3, [r5, #4]
    6a28:	9300      	str	r3, [sp, #0]
  if (tensor == nullptr) {
    6a2a:	2e00      	cmp	r6, #0
    6a2c:	d057      	beq.n	6ade <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5a2>
  const int dims_size = dims->size;
    6a2e:	68b7      	ldr	r7, [r6, #8]
    6a30:	f857 5b04 	ldr.w	r5, [r7], #4
    size_ = dimensions_count;
    6a34:	9520      	str	r5, [sp, #128]	; 0x80
    if (dimensions_count > kMaxSmallSize) {
    6a36:	2d05      	cmp	r5, #5
    6a38:	dd55      	ble.n	6ae6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5aa>
      dims_pointer_ = new int32[dimensions_count];
    6a3a:	4b42      	ldr	r3, [pc, #264]	; (6b44 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x608>)
    6a3c:	429d      	cmp	r5, r3
    6a3e:	bf94      	ite	ls
    6a40:	00a8      	lslls	r0, r5, #2
    6a42:	f04f 30ff 	movhi.w	r0, #4294967295
    6a46:	4b40      	ldr	r3, [pc, #256]	; (6b48 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x60c>)
    6a48:	4798      	blx	r3
    6a4a:	9021      	str	r0, [sp, #132]	; 0x84
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
    6a4c:	00aa      	lsls	r2, r5, #2
    6a4e:	4639      	mov	r1, r7
    6a50:	4b3e      	ldr	r3, [pc, #248]	; (6b4c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x610>)
    6a52:	4798      	blx	r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6a54:	f8d6 b004 	ldr.w	fp, [r6, #4]
  const int32 input_beta_multiplier = params.input_multiplier;
    6a58:	68a6      	ldr	r6, [r4, #8]
  const int32 input_beta_left_shift = params.input_left_shift;
    6a5a:	68e3      	ldr	r3, [r4, #12]
    6a5c:	9302      	str	r3, [sp, #8]
  const int diff_min = params.diff_min;
    6a5e:	f8d4 a018 	ldr.w	sl, [r4, #24]
  inline int32 DimensionsCount() const { return size_; }
    6a62:	991a      	ldr	r1, [sp, #104]	; 0x68
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    6a64:	1e4f      	subs	r7, r1, #1
  for (int i = 0; i < dims_count; ++i) {
    6a66:	2900      	cmp	r1, #0
    6a68:	dd22      	ble.n	6ab0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x574>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6a6a:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
    TFLITE_DCHECK_LT(i, size_);
    6a6e:	9820      	ldr	r0, [sp, #128]	; 0x80
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6a70:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
    6a74:	2201      	movs	r2, #1
    6a76:	2300      	movs	r3, #0
    6a78:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
    6a7c:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
    if (i != skip_dim) {
    6a80:	429f      	cmp	r7, r3
    6a82:	d011      	beq.n	6aa8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x56c>
    TFLITE_DCHECK_GE(i, 0);
    6a84:	2b00      	cmp	r3, #0
    6a86:	db30      	blt.n	6aea <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5ae>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6a88:	2905      	cmp	r1, #5
    6a8a:	bfcc      	ite	gt
    6a8c:	f859 4023 	ldrgt.w	r4, [r9, r3, lsl #2]
    6a90:	f85e 4022 	ldrle.w	r4, [lr, r2, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
    6a94:	4283      	cmp	r3, r0
    6a96:	da2a      	bge.n	6aee <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5b2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6a98:	2805      	cmp	r0, #5
    6a9a:	bfcc      	ite	gt
    6a9c:	f858 5023 	ldrgt.w	r5, [r8, r3, lsl #2]
    6aa0:	f85c 5022 	ldrle.w	r5, [ip, r2, lsl #2]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    6aa4:	42a5      	cmp	r5, r4
    6aa6:	d124      	bne.n	6af2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5b6>
  for (int i = 0; i < dims_count; ++i) {
    6aa8:	3301      	adds	r3, #1
    6aaa:	3201      	adds	r2, #1
    6aac:	4299      	cmp	r1, r3
    6aae:	d1e7      	bne.n	6a80 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x544>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    6ab0:	2f00      	cmp	r7, #0
    6ab2:	db20      	blt.n	6af6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5ba>
    6ab4:	42b9      	cmp	r1, r7
    6ab6:	dd1e      	ble.n	6af6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5ba>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6ab8:	2905      	cmp	r1, #5
    6aba:	f340 8274 	ble.w	6fa6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xa6a>
    6abe:	981b      	ldr	r0, [sp, #108]	; 0x6c
  for (int i = 0; i < dims_count; ++i) {
    6ac0:	2900      	cmp	r1, #0
    6ac2:	f300 8274 	bgt.w	6fae <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xa72>
  int flat_size = 1;
    6ac6:	2301      	movs	r3, #1
    6ac8:	9309      	str	r3, [sp, #36]	; 0x24
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6aca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    6acc:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    6ad0:	e284      	b.n	6fdc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xaa0>
  RuntimeShape() : size_(0) {}
    6ad2:	2300      	movs	r3, #0
    6ad4:	931a      	str	r3, [sp, #104]	; 0x68
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    6ad6:	9300      	str	r3, [sp, #0]
    6ad8:	e7a7      	b.n	6a2a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x4ee>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6ada:	a81b      	add	r0, sp, #108	; 0x6c
    6adc:	e79f      	b.n	6a1e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x4e2>
  RuntimeShape() : size_(0) {}
    6ade:	2300      	movs	r3, #0
    6ae0:	9320      	str	r3, [sp, #128]	; 0x80
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6ae2:	469b      	mov	fp, r3
    6ae4:	e7b8      	b.n	6a58 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x51c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6ae6:	a821      	add	r0, sp, #132	; 0x84
    6ae8:	e7b0      	b.n	6a4c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x510>
    TFLITE_DCHECK_GE(i, 0);
    6aea:	4b19      	ldr	r3, [pc, #100]	; (6b50 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x614>)
    6aec:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    6aee:	4b18      	ldr	r3, [pc, #96]	; (6b50 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x614>)
    6af0:	4798      	blx	r3
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    6af2:	4b17      	ldr	r3, [pc, #92]	; (6b50 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x614>)
    6af4:	4798      	blx	r3
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    6af6:	4b16      	ldr	r3, [pc, #88]	; (6b50 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x614>)
    6af8:	4798      	blx	r3
  int flat_size = 1;
    6afa:	2301      	movs	r3, #1
    6afc:	9309      	str	r3, [sp, #36]	; 0x24
    6afe:	e268      	b.n	6fd2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xa96>
    TFLITE_DCHECK_LT(i, size_);
    6b00:	4b13      	ldr	r3, [pc, #76]	; (6b50 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x614>)
    6b02:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6b04:	9b21      	ldr	r3, [sp, #132]	; 0x84
    6b06:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    6b0a:	9307      	str	r3, [sp, #28]
    6b0c:	e273      	b.n	6ff6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xaba>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    6b0e:	4b10      	ldr	r3, [pc, #64]	; (6b50 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x614>)
    6b10:	4798      	blx	r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6b12:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6b16:	f040 829e 	bne.w	7056 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xb1a>
    6b1a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6b1e:	e287      	b.n	7030 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xaf4>
    6b20:	00004ff1 	.word	0x00004ff1
    6b24:	00020d8c 	.word	0x00020d8c
    6b28:	00020fbc 	.word	0x00020fbc
    6b2c:	00020d9c 	.word	0x00020d9c
    6b30:	000138cd 	.word	0x000138cd
    6b34:	00020dcc 	.word	0x00020dcc
    6b38:	000063f1 	.word	0x000063f1
    6b3c:	00005191 	.word	0x00005191
    6b40:	000091e1 	.word	0x000091e1
    6b44:	1ffffffe 	.word	0x1ffffffe
    6b48:	00009291 	.word	0x00009291
    6b4c:	00014641 	.word	0x00014641
    6b50:	000138bd 	.word	0x000138bd
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
    6b54:	464b      	mov	r3, r9
  return integer_input ? __builtin_clz(integer_input)
    6b56:	f1b9 0f00 	cmp.w	r9, #0
    6b5a:	d11a      	bne.n	6b92 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x656>
    6b5c:	2020      	movs	r0, #32
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
    6b5e:	f1c0 080c 	rsb	r8, r0, #12
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
    6b62:	fa03 f000 	lsl.w	r0, r3, r0
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
    6b66:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    6b6a:	4b98      	ldr	r3, [pc, #608]	; (6dcc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x890>)
    6b6c:	4798      	blx	r3
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
    6b6e:	9002      	str	r0, [sp, #8]
    for (int c = 0; c < depth; ++c) {
    6b70:	9b07      	ldr	r3, [sp, #28]
    6b72:	2b00      	cmp	r3, #0
    6b74:	dd7f      	ble.n	6c76 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x73a>
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
    6b76:	f108 080f 	add.w	r8, r8, #15
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    6b7a:	f04f 0901 	mov.w	r9, #1
    6b7e:	fa09 f908 	lsl.w	r9, r9, r8
    6b82:	f109 39ff 	add.w	r9, r9, #4294967295
  return a >> offset;
    6b86:	ea4f 0369 	mov.w	r3, r9, asr #1
    6b8a:	9304      	str	r3, [sp, #16]
    6b8c:	9d06      	ldr	r5, [sp, #24]
    6b8e:	9c05      	ldr	r4, [sp, #20]
    6b90:	e01f      	b.n	6bd2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x696>
  return integer_input ? __builtin_clz(integer_input)
    6b92:	fab9 f089 	clz	r0, r9
    6b96:	e7e2      	b.n	6b5e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x622>
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
    6b98:	2300      	movs	r3, #0
  return integer_input ? __builtin_clz(integer_input)
    6b9a:	2020      	movs	r0, #32
    6b9c:	e7df      	b.n	6b5e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x622>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6b9e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6ba2:	d121      	bne.n	6be8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x6ac>
    6ba4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6ba8:	e03a      	b.n	6c20 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x6e4>
  assert(exponent >= 0);
    6baa:	4b89      	ldr	r3, [pc, #548]	; (6dd0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x894>)
    6bac:	4a89      	ldr	r2, [pc, #548]	; (6dd4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x898>)
    6bae:	f44f 71b3 	mov.w	r1, #358	; 0x166
    6bb2:	4889      	ldr	r0, [pc, #548]	; (6dd8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x89c>)
    6bb4:	4c89      	ldr	r4, [pc, #548]	; (6ddc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8a0>)
    6bb6:	47a0      	blx	r4
  assert(exponent <= 31);
    6bb8:	4b89      	ldr	r3, [pc, #548]	; (6de0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8a4>)
    6bba:	4a86      	ldr	r2, [pc, #536]	; (6dd4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x898>)
    6bbc:	f240 1167 	movw	r1, #359	; 0x167
    6bc0:	4885      	ldr	r0, [pc, #532]	; (6dd8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x89c>)
    6bc2:	4c86      	ldr	r4, [pc, #536]	; (6ddc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8a0>)
    6bc4:	47a0      	blx	r4
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    6bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    6bca:	802b      	strh	r3, [r5, #0]
    6bcc:	3502      	adds	r5, #2
    for (int c = 0; c < depth; ++c) {
    6bce:	42bc      	cmp	r4, r7
    6bd0:	d051      	beq.n	6c76 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x73a>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
    6bd2:	f914 2b01 	ldrsb.w	r2, [r4], #1
    6bd6:	f99d 3033 	ldrsb.w	r3, [sp, #51]	; 0x33
    6bda:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    6bdc:	4592      	cmp	sl, r2
    6bde:	dcf2      	bgt.n	6bc6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x68a>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    6be0:	fa02 f20b 	lsl.w	r2, r2, fp
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6be4:	4296      	cmp	r6, r2
    6be6:	d0da      	beq.n	6b9e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x662>
  std::int64_t a_64(a);
    6be8:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    6bea:	fb06 f101 	mul.w	r1, r6, r1
    6bee:	9b01      	ldr	r3, [sp, #4]
    6bf0:	fb02 1103 	mla	r1, r2, r3, r1
    6bf4:	fba6 2302 	umull	r2, r3, r6, r2
    6bf8:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    6bfa:	2a00      	cmp	r2, #0
    6bfc:	f173 0100 	sbcs.w	r1, r3, #0
    6c00:	f2c0 82c7 	blt.w	7192 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc56>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    6c04:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    6c08:	f143 0300 	adc.w	r3, r3, #0
    6c0c:	4610      	mov	r0, r2
    6c0e:	4619      	mov	r1, r3
    6c10:	2a00      	cmp	r2, #0
    6c12:	f173 0e00 	sbcs.w	lr, r3, #0
    6c16:	f2c0 823b 	blt.w	7090 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xb54>
    6c1a:	0fc0      	lsrs	r0, r0, #31
    6c1c:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    6c20:	4b70      	ldr	r3, [pc, #448]	; (6de4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8a8>)
    6c22:	4798      	blx	r3
            (shifted_scale * exp_in_0).raw(),
    6c24:	4601      	mov	r1, r0
    6c26:	9802      	ldr	r0, [sp, #8]
    6c28:	4b6f      	ldr	r3, [pc, #444]	; (6de8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8ac>)
    6c2a:	4798      	blx	r3
  assert(exponent >= 0);
    6c2c:	f1b8 0f00 	cmp.w	r8, #0
    6c30:	dbbb      	blt.n	6baa <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x66e>
  assert(exponent <= 31);
    6c32:	f1b8 0f1f 	cmp.w	r8, #31
    6c36:	dcbf      	bgt.n	6bb8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x67c>
  return a + b;
    6c38:	9b04      	ldr	r3, [sp, #16]
    6c3a:	eb03 72d0 	add.w	r2, r3, r0, lsr #31
  return a & b;
    6c3e:	ea00 0309 	and.w	r3, r0, r9
  return a >> offset;
    6c42:	fa40 f008 	asr.w	r0, r0, r8
  return a + b;
    6c46:	429a      	cmp	r2, r3
    6c48:	bfb8      	it	lt
    6c4a:	3001      	addlt	r0, #1
            unsat_output +
    6c4c:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
            static_cast<int32>(std::numeric_limits<OutputT>::min());
    6c50:	900d      	str	r0, [sp, #52]	; 0x34
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
    6c52:	f647 73ff 	movw	r3, #32767	; 0x7fff
    6c56:	9335      	str	r3, [sp, #212]	; 0xd4
      if (__b < __a)
    6c58:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
      return __a;
    6c5c:	bfb4      	ite	lt
    6c5e:	ab0d      	addlt	r3, sp, #52	; 0x34
	return __b;
    6c60:	ab35      	addge	r3, sp, #212	; 0xd4
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
    6c62:	4a62      	ldr	r2, [pc, #392]	; (6dec <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b0>)
    6c64:	9234      	str	r2, [sp, #208]	; 0xd0
      if (__a < __b)
    6c66:	681a      	ldr	r2, [r3, #0]
    6c68:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
	return __b;
    6c6c:	bfb8      	it	lt
    6c6e:	ab34      	addlt	r3, sp, #208	; 0xd0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    6c70:	681b      	ldr	r3, [r3, #0]
    6c72:	802b      	strh	r3, [r5, #0]
    6c74:	e7aa      	b.n	6bcc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x690>
  for (int i = 0; i < outer_size; ++i) {
    6c76:	9b08      	ldr	r3, [sp, #32]
    6c78:	3301      	adds	r3, #1
    6c7a:	9308      	str	r3, [sp, #32]
    6c7c:	990a      	ldr	r1, [sp, #40]	; 0x28
    6c7e:	440f      	add	r7, r1
    6c80:	9a05      	ldr	r2, [sp, #20]
    6c82:	4610      	mov	r0, r2
    6c84:	4408      	add	r0, r1
    6c86:	9005      	str	r0, [sp, #20]
    6c88:	9a06      	ldr	r2, [sp, #24]
    6c8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6c8c:	440a      	add	r2, r1
    6c8e:	9206      	str	r2, [sp, #24]
    6c90:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6c92:	4293      	cmp	r3, r2
    6c94:	d01c      	beq.n	6cd0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x794>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    6c96:	2380      	movs	r3, #128	; 0x80
    6c98:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    for (int c = 0; c < depth; ++c) {
    6c9c:	9b07      	ldr	r3, [sp, #28]
    6c9e:	2b00      	cmp	r3, #0
    6ca0:	f77f af7a 	ble.w	6b98 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x65c>
    6ca4:	9c05      	ldr	r4, [sp, #20]
      return __a;
    6ca6:	f10d 0033 	add.w	r0, sp, #51	; 0x33
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    6caa:	4623      	mov	r3, r4
    6cac:	3401      	adds	r4, #1
      if (__a < __b)
    6cae:	f99d 1033 	ldrsb.w	r1, [sp, #51]	; 0x33
    6cb2:	f993 2000 	ldrsb.w	r2, [r3]
    6cb6:	4291      	cmp	r1, r2
      return __a;
    6cb8:	bfa8      	it	ge
    6cba:	4603      	movge	r3, r0
    6cbc:	f993 8000 	ldrsb.w	r8, [r3]
    6cc0:	f88d 8033 	strb.w	r8, [sp, #51]	; 0x33
    for (int c = 0; c < depth; ++c) {
    6cc4:	42bc      	cmp	r4, r7
    6cc6:	d1f0      	bne.n	6caa <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x76e>
    6cc8:	9d05      	ldr	r5, [sp, #20]
    6cca:	f04f 0900 	mov.w	r9, #0
    6cce:	e1b7      	b.n	7040 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xb04>
    if (size_ > kMaxSmallSize) {
    6cd0:	9b20      	ldr	r3, [sp, #128]	; 0x80
    6cd2:	2b05      	cmp	r3, #5
    6cd4:	dd03      	ble.n	6cde <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7a2>
      delete[] dims_pointer_;
    6cd6:	9821      	ldr	r0, [sp, #132]	; 0x84
    6cd8:	b108      	cbz	r0, 6cde <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7a2>
    6cda:	4b45      	ldr	r3, [pc, #276]	; (6df0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b4>)
    6cdc:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    6cde:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    6ce0:	2b05      	cmp	r3, #5
    6ce2:	f340 811d 	ble.w	6f20 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9e4>
      delete[] dims_pointer_;
    6ce6:	981b      	ldr	r0, [sp, #108]	; 0x6c
    6ce8:	2800      	cmp	r0, #0
    6cea:	f000 8119 	beq.w	6f20 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9e4>
    6cee:	4b40      	ldr	r3, [pc, #256]	; (6df0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b4>)
    6cf0:	4798      	blx	r3
    6cf2:	e115      	b.n	6f20 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9e4>
  RuntimeShape() : size_(0) {}
    6cf4:	2300      	movs	r3, #0
    6cf6:	9326      	str	r3, [sp, #152]	; 0x98
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
    6cf8:	9300      	str	r3, [sp, #0]
    6cfa:	e447      	b.n	658c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x50>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6cfc:	a827      	add	r0, sp, #156	; 0x9c
    6cfe:	e43f      	b.n	6580 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x44>
  RuntimeShape() : size_(0) {}
    6d00:	2300      	movs	r3, #0
    6d02:	932c      	str	r3, [sp, #176]	; 0xb0
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6d04:	469b      	mov	fp, r3
    6d06:	e45a      	b.n	65be <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x82>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6d08:	a82d      	add	r0, sp, #180	; 0xb4
    6d0a:	e452      	b.n	65b2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x76>
    TFLITE_DCHECK_GE(i, 0);
    6d0c:	4b39      	ldr	r3, [pc, #228]	; (6df4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b8>)
    6d0e:	4798      	blx	r3
    TFLITE_DCHECK_LT(i, size_);
    6d10:	4b38      	ldr	r3, [pc, #224]	; (6df4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b8>)
    6d12:	4798      	blx	r3
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    6d14:	4b37      	ldr	r3, [pc, #220]	; (6df4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b8>)
    6d16:	4798      	blx	r3
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    6d18:	4b36      	ldr	r3, [pc, #216]	; (6df4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b8>)
    6d1a:	4798      	blx	r3
  int flat_size = 1;
    6d1c:	2301      	movs	r3, #1
    6d1e:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6d20:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    6d22:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    6d26:	e49d      	b.n	6664 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x128>
  int flat_size = 1;
    6d28:	2301      	movs	r3, #1
    6d2a:	930a      	str	r3, [sp, #40]	; 0x28
    6d2c:	e495      	b.n	665a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x11e>
    TFLITE_DCHECK_LT(i, size_);
    6d2e:	4b31      	ldr	r3, [pc, #196]	; (6df4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b8>)
    6d30:	4798      	blx	r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6d32:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    6d34:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    6d38:	9308      	str	r3, [sp, #32]
    6d3a:	e4a0      	b.n	667e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x142>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    6d3c:	4b2d      	ldr	r3, [pc, #180]	; (6df4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8b8>)
    6d3e:	4798      	blx	r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6d40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6d44:	f040 8250 	bne.w	71e8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xcac>
    6d48:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6d4c:	e239      	b.n	71c2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc86>
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
    6d4e:	4648      	mov	r0, r9
  return integer_input ? __builtin_clz(integer_input)
    6d50:	f1b9 0f00 	cmp.w	r9, #0
    6d54:	d11e      	bne.n	6d94 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x858>
    6d56:	f04f 0920 	mov.w	r9, #32
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
    6d5a:	f1c9 080c 	rsb	r8, r9, #12
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
    6d5e:	fa00 f009 	lsl.w	r0, r0, r9
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
    6d62:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    6d66:	4b19      	ldr	r3, [pc, #100]	; (6dcc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x890>)
    6d68:	4798      	blx	r3
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
    6d6a:	9004      	str	r0, [sp, #16]
    for (int c = 0; c < depth; ++c) {
    6d6c:	9b08      	ldr	r3, [sp, #32]
    6d6e:	2b00      	cmp	r3, #0
    6d70:	f340 809a 	ble.w	6ea8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x96c>
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
    6d74:	f108 0817 	add.w	r8, r8, #23
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    6d78:	f04f 0901 	mov.w	r9, #1
    6d7c:	fa09 f908 	lsl.w	r9, r9, r8
    6d80:	f109 39ff 	add.w	r9, r9, #4294967295
  return a >> offset;
    6d84:	ea4f 0369 	mov.w	r3, r9, asr #1
    6d88:	9305      	str	r3, [sp, #20]
    6d8a:	9d07      	ldr	r5, [sp, #28]
    6d8c:	9c06      	ldr	r4, [sp, #24]
    6d8e:	f8cd b008 	str.w	fp, [sp, #8]
    6d92:	e036      	b.n	6e02 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8c6>
  return integer_input ? __builtin_clz(integer_input)
    6d94:	fab9 f989 	clz	r9, r9
    6d98:	e7df      	b.n	6d5a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x81e>
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
    6d9a:	2000      	movs	r0, #0
  return integer_input ? __builtin_clz(integer_input)
    6d9c:	f04f 0920 	mov.w	r9, #32
    6da0:	e7db      	b.n	6d5a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x81e>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6da2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6da6:	d137      	bne.n	6e18 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8dc>
    6da8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6dac:	e051      	b.n	6e52 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x916>
  assert(exponent >= 0);
    6dae:	4b08      	ldr	r3, [pc, #32]	; (6dd0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x894>)
    6db0:	4a08      	ldr	r2, [pc, #32]	; (6dd4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x898>)
    6db2:	f44f 71b3 	mov.w	r1, #358	; 0x166
    6db6:	4808      	ldr	r0, [pc, #32]	; (6dd8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x89c>)
    6db8:	4c08      	ldr	r4, [pc, #32]	; (6ddc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8a0>)
    6dba:	47a0      	blx	r4
  assert(exponent <= 31);
    6dbc:	4b08      	ldr	r3, [pc, #32]	; (6de0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8a4>)
    6dbe:	4a05      	ldr	r2, [pc, #20]	; (6dd4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x898>)
    6dc0:	f240 1167 	movw	r1, #359	; 0x167
    6dc4:	4804      	ldr	r0, [pc, #16]	; (6dd8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x89c>)
    6dc6:	4c05      	ldr	r4, [pc, #20]	; (6ddc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8a0>)
    6dc8:	47a0      	blx	r4
    6dca:	bf00      	nop
    6dcc:	00004ff1 	.word	0x00004ff1
    6dd0:	00020d8c 	.word	0x00020d8c
    6dd4:	00020fbc 	.word	0x00020fbc
    6dd8:	00020d9c 	.word	0x00020d9c
    6ddc:	000138cd 	.word	0x000138cd
    6de0:	00020dcc 	.word	0x00020dcc
    6de4:	000063f1 	.word	0x000063f1
    6de8:	00005191 	.word	0x00005191
    6dec:	ffff8000 	.word	0xffff8000
    6df0:	000091e1 	.word	0x000091e1
    6df4:	000138bd 	.word	0x000138bd
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    6df8:	2380      	movs	r3, #128	; 0x80
    6dfa:	702b      	strb	r3, [r5, #0]
    6dfc:	3501      	adds	r5, #1
    for (int c = 0; c < depth; ++c) {
    6dfe:	42a7      	cmp	r7, r4
    6e00:	d050      	beq.n	6ea4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x968>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
    6e02:	f914 2b01 	ldrsb.w	r2, [r4], #1
    6e06:	f99d 3033 	ldrsb.w	r3, [sp, #51]	; 0x33
    6e0a:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    6e0c:	4592      	cmp	sl, r2
    6e0e:	dcf3      	bgt.n	6df8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8bc>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    6e10:	9b02      	ldr	r3, [sp, #8]
    6e12:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6e14:	4296      	cmp	r6, r2
    6e16:	d0c4      	beq.n	6da2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x866>
  std::int64_t a_64(a);
    6e18:	ea4f 7ce2 	mov.w	ip, r2, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    6e1c:	9b01      	ldr	r3, [sp, #4]
    6e1e:	fb02 f103 	mul.w	r1, r2, r3
    6e22:	fb06 110c 	mla	r1, r6, ip, r1
    6e26:	fba2 2306 	umull	r2, r3, r2, r6
    6e2a:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    6e2c:	2a00      	cmp	r2, #0
    6e2e:	f173 0100 	sbcs.w	r1, r3, #0
    6e32:	f2c0 814e 	blt.w	70d2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xb96>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    6e36:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    6e3a:	f143 0300 	adc.w	r3, r3, #0
    6e3e:	4610      	mov	r0, r2
    6e40:	4619      	mov	r1, r3
    6e42:	2a00      	cmp	r2, #0
    6e44:	f173 0e00 	sbcs.w	lr, r3, #0
    6e48:	f2c0 81ec 	blt.w	7224 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xce8>
    6e4c:	0fc0      	lsrs	r0, r0, #31
    6e4e:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    6e52:	4bb5      	ldr	r3, [pc, #724]	; (7128 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbec>)
    6e54:	4798      	blx	r3
            (shifted_scale * exp_in_0).raw(),
    6e56:	4601      	mov	r1, r0
    6e58:	9804      	ldr	r0, [sp, #16]
    6e5a:	4bb4      	ldr	r3, [pc, #720]	; (712c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbf0>)
    6e5c:	4798      	blx	r3
  assert(exponent >= 0);
    6e5e:	f1b8 0f00 	cmp.w	r8, #0
    6e62:	dba4      	blt.n	6dae <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x872>
  assert(exponent <= 31);
    6e64:	f1b8 0f1f 	cmp.w	r8, #31
    6e68:	dca8      	bgt.n	6dbc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x880>
  return a + b;
    6e6a:	9b05      	ldr	r3, [sp, #20]
    6e6c:	eb03 72d0 	add.w	r2, r3, r0, lsr #31
  return a & b;
    6e70:	ea00 0309 	and.w	r3, r0, r9
  return a >> offset;
    6e74:	fa40 f008 	asr.w	r0, r0, r8
  return a + b;
    6e78:	429a      	cmp	r2, r3
    6e7a:	bfb8      	it	lt
    6e7c:	3001      	addlt	r0, #1
            unsat_output +
    6e7e:	3880      	subs	r0, #128	; 0x80
            static_cast<int32>(std::numeric_limits<OutputT>::min());
    6e80:	900d      	str	r0, [sp, #52]	; 0x34
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
    6e82:	237f      	movs	r3, #127	; 0x7f
    6e84:	9337      	str	r3, [sp, #220]	; 0xdc
      if (__b < __a)
    6e86:	4298      	cmp	r0, r3
      return __a;
    6e88:	bfd4      	ite	le
    6e8a:	ab0d      	addle	r3, sp, #52	; 0x34
	return __b;
    6e8c:	ab37      	addgt	r3, sp, #220	; 0xdc
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
    6e8e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    6e92:	9236      	str	r2, [sp, #216]	; 0xd8
      if (__a < __b)
    6e94:	681a      	ldr	r2, [r3, #0]
    6e96:	f112 0f80 	cmn.w	r2, #128	; 0x80
	return __b;
    6e9a:	bfb8      	it	lt
    6e9c:	ab36      	addlt	r3, sp, #216	; 0xd8
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    6e9e:	681b      	ldr	r3, [r3, #0]
    6ea0:	702b      	strb	r3, [r5, #0]
    6ea2:	e7ab      	b.n	6dfc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x8c0>
    6ea4:	f8dd b008 	ldr.w	fp, [sp, #8]
  for (int i = 0; i < outer_size; ++i) {
    6ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6eaa:	3301      	adds	r3, #1
    6eac:	9309      	str	r3, [sp, #36]	; 0x24
    6eae:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6eb0:	440f      	add	r7, r1
    6eb2:	9a06      	ldr	r2, [sp, #24]
    6eb4:	4610      	mov	r0, r2
    6eb6:	460a      	mov	r2, r1
    6eb8:	4408      	add	r0, r1
    6eba:	9006      	str	r0, [sp, #24]
    6ebc:	9907      	ldr	r1, [sp, #28]
    6ebe:	4608      	mov	r0, r1
    6ec0:	4410      	add	r0, r2
    6ec2:	9007      	str	r0, [sp, #28]
    6ec4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6ec6:	4293      	cmp	r3, r2
    6ec8:	d01c      	beq.n	6f04 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9c8>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    6eca:	2380      	movs	r3, #128	; 0x80
    6ecc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    for (int c = 0; c < depth; ++c) {
    6ed0:	9b08      	ldr	r3, [sp, #32]
    6ed2:	2b00      	cmp	r3, #0
    6ed4:	f77f af61 	ble.w	6d9a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x85e>
    6ed8:	9c06      	ldr	r4, [sp, #24]
      return __a;
    6eda:	f10d 0033 	add.w	r0, sp, #51	; 0x33
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    6ede:	4623      	mov	r3, r4
    6ee0:	3401      	adds	r4, #1
      if (__a < __b)
    6ee2:	f99d 1033 	ldrsb.w	r1, [sp, #51]	; 0x33
    6ee6:	f993 2000 	ldrsb.w	r2, [r3]
    6eea:	4291      	cmp	r1, r2
      return __a;
    6eec:	bfa8      	it	ge
    6eee:	4603      	movge	r3, r0
    6ef0:	f993 8000 	ldrsb.w	r8, [r3]
    6ef4:	f88d 8033 	strb.w	r8, [sp, #51]	; 0x33
    for (int c = 0; c < depth; ++c) {
    6ef8:	42a7      	cmp	r7, r4
    6efa:	d1f0      	bne.n	6ede <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9a2>
    6efc:	9d06      	ldr	r5, [sp, #24]
    6efe:	f04f 0900 	mov.w	r9, #0
    6f02:	e166      	b.n	71d2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc96>
    if (size_ > kMaxSmallSize) {
    6f04:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    6f06:	2b05      	cmp	r3, #5
    6f08:	dd03      	ble.n	6f12 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9d6>
      delete[] dims_pointer_;
    6f0a:	982d      	ldr	r0, [sp, #180]	; 0xb4
    6f0c:	b108      	cbz	r0, 6f12 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9d6>
    6f0e:	4b88      	ldr	r3, [pc, #544]	; (7130 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbf4>)
    6f10:	4798      	blx	r3
    if (size_ > kMaxSmallSize) {
    6f12:	9b26      	ldr	r3, [sp, #152]	; 0x98
    6f14:	2b05      	cmp	r3, #5
    6f16:	dd03      	ble.n	6f20 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9e4>
      delete[] dims_pointer_;
    6f18:	9827      	ldr	r0, [sp, #156]	; 0x9c
    6f1a:	b108      	cbz	r0, 6f20 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9e4>
    6f1c:	4b84      	ldr	r3, [pc, #528]	; (7130 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbf4>)
    6f1e:	4798      	blx	r3
}
    6f20:	b039      	add	sp, #228	; 0xe4
    6f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (int i = 0; i < dims_count; ++i) {
    6f26:	2900      	cmp	r1, #0
    6f28:	f77f ac7e 	ble.w	6828 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2ec>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6f2c:	a80f      	add	r0, sp, #60	; 0x3c
    6f2e:	e428      	b.n	6782 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x246>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    6f30:	0fc0      	lsrs	r0, r0, #31
    6f32:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    6f36:	4b7c      	ldr	r3, [pc, #496]	; (7128 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbec>)
    6f38:	4798      	blx	r3
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
    6f3a:	4b7e      	ldr	r3, [pc, #504]	; (7134 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbf8>)
    6f3c:	4798      	blx	r3
  return a + b;
    6f3e:	4482      	add	sl, r0
    for (int c = 0; c < depth; ++c) {
    6f40:	42ac      	cmp	r4, r5
    6f42:	f43f ac8d 	beq.w	6860 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x324>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
    6f46:	f815 2b01 	ldrb.w	r2, [r5], #1
    6f4a:	eba2 0209 	sub.w	r2, r2, r9
      if (input_diff >= diff_min) {
    6f4e:	4590      	cmp	r8, r2
    6f50:	dcf6      	bgt.n	6f40 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xa04>
    6f52:	9b00      	ldr	r3, [sp, #0]
    6f54:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6f56:	4296      	cmp	r6, r2
    6f58:	f43f ac72 	beq.w	6840 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x304>
  std::int64_t a_64(a);
    6f5c:	ea4f 7ce2 	mov.w	ip, r2, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    6f60:	9b03      	ldr	r3, [sp, #12]
    6f62:	fb02 f103 	mul.w	r1, r2, r3
    6f66:	fb06 110c 	mla	r1, r6, ip, r1
    6f6a:	fba2 2306 	umull	r2, r3, r2, r6
    6f6e:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    6f70:	2a00      	cmp	r2, #0
    6f72:	f173 0100 	sbcs.w	r1, r3, #0
    6f76:	f2c0 80c1 	blt.w	70fc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbc0>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    6f7a:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    6f7e:	f143 0300 	adc.w	r3, r3, #0
    6f82:	4610      	mov	r0, r2
    6f84:	4619      	mov	r1, r3
    6f86:	2a00      	cmp	r2, #0
    6f88:	f173 0e00 	sbcs.w	lr, r3, #0
    6f8c:	dad0      	bge.n	6f30 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9f4>
    6f8e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6f92:	2100      	movs	r1, #0
    6f94:	1880      	adds	r0, r0, r2
    6f96:	4159      	adcs	r1, r3
    6f98:	e7ca      	b.n	6f30 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9f4>
    6f9a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6f9e:	2100      	movs	r1, #0
    6fa0:	1880      	adds	r0, r0, r2
    6fa2:	4159      	adcs	r1, r3
    6fa4:	e4c1      	b.n	692a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x3ee>
  for (int i = 0; i < dims_count; ++i) {
    6fa6:	2900      	cmp	r1, #0
    6fa8:	f77f ada7 	ble.w	6afa <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5be>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    6fac:	a81b      	add	r0, sp, #108	; 0x6c
    6fae:	2301      	movs	r3, #1
    6fb0:	461d      	mov	r5, r3
    6fb2:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    6fb4:	462c      	mov	r4, r5
    6fb6:	429f      	cmp	r7, r3
    6fb8:	bf14      	ite	ne
    6fba:	f850 2023 	ldrne.w	r2, [r0, r3, lsl #2]
    6fbe:	4622      	moveq	r2, r4
    6fc0:	fb02 f505 	mul.w	r5, r2, r5
  for (int i = 0; i < dims_count; ++i) {
    6fc4:	3301      	adds	r3, #1
    6fc6:	4299      	cmp	r1, r3
    6fc8:	dcf5      	bgt.n	6fb6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xa7a>
    6fca:	9509      	str	r5, [sp, #36]	; 0x24
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6fcc:	2905      	cmp	r1, #5
    6fce:	f73f ad7c 	bgt.w	6aca <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x58e>
    6fd2:	ab38      	add	r3, sp, #224	; 0xe0
    6fd4:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    6fd8:	f853 2c74 	ldr.w	r2, [r3, #-116]
    TFLITE_DCHECK_LT(i, size_);
    6fdc:	9b20      	ldr	r3, [sp, #128]	; 0x80
    6fde:	429f      	cmp	r7, r3
    6fe0:	f6bf ad8e 	bge.w	6b00 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5c4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    6fe4:	2b05      	cmp	r3, #5
    6fe6:	f73f ad8d 	bgt.w	6b04 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5c8>
    6fea:	ab38      	add	r3, sp, #224	; 0xe0
    6fec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    6ff0:	f857 3c5c 	ldr.w	r3, [r7, #-92]
    6ff4:	9307      	str	r3, [sp, #28]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    6ff6:	9b07      	ldr	r3, [sp, #28]
    6ff8:	4293      	cmp	r3, r2
    6ffa:	f47f ad88 	bne.w	6b0e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5d2>
  for (int i = 0; i < outer_size; ++i) {
    6ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7000:	2b00      	cmp	r3, #0
    7002:	f77f ae65 	ble.w	6cd0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x794>
    7006:	9b07      	ldr	r3, [sp, #28]
    7008:	930a      	str	r3, [sp, #40]	; 0x28
    700a:	9a00      	ldr	r2, [sp, #0]
    700c:	18d7      	adds	r7, r2, r3
    700e:	9205      	str	r2, [sp, #20]
    7010:	005b      	lsls	r3, r3, #1
    7012:	930b      	str	r3, [sp, #44]	; 0x2c
    7014:	f8cd b018 	str.w	fp, [sp, #24]
    7018:	2300      	movs	r3, #0
    701a:	9308      	str	r3, [sp, #32]
  std::int64_t b_64(b);
    701c:	4633      	mov	r3, r6
    701e:	17f4      	asrs	r4, r6, #31
    7020:	e9cd 3400 	strd	r3, r4, [sp]
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    7024:	f8dd b008 	ldr.w	fp, [sp, #8]
    7028:	e635      	b.n	6c96 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x75a>
    702a:	0fc0      	lsrs	r0, r0, #31
    702c:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    7030:	4b3d      	ldr	r3, [pc, #244]	; (7128 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbec>)
    7032:	4798      	blx	r3
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
    7034:	4b3f      	ldr	r3, [pc, #252]	; (7134 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbf8>)
    7036:	4798      	blx	r3
  return a + b;
    7038:	4481      	add	r9, r0
    for (int c = 0; c < depth; ++c) {
    703a:	42ac      	cmp	r4, r5
    703c:	f43f ad8a 	beq.w	6b54 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x618>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
    7040:	f915 2b01 	ldrsb.w	r2, [r5], #1
    7044:	eba2 0208 	sub.w	r2, r2, r8
      if (input_diff >= diff_min) {
    7048:	4592      	cmp	sl, r2
    704a:	dcf6      	bgt.n	703a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xafe>
    704c:	fa02 f20b 	lsl.w	r2, r2, fp
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    7050:	4296      	cmp	r6, r2
    7052:	f43f ad5e 	beq.w	6b12 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x5d6>
  std::int64_t a_64(a);
    7056:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    7058:	fb06 f101 	mul.w	r1, r6, r1
    705c:	9b01      	ldr	r3, [sp, #4]
    705e:	fb02 1103 	mla	r1, r2, r3, r1
    7062:	fba6 2302 	umull	r2, r3, r6, r2
    7066:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    7068:	2a00      	cmp	r2, #0
    706a:	f173 0100 	sbcs.w	r1, r3, #0
    706e:	db7b      	blt.n	7168 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc2c>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    7070:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    7074:	f143 0300 	adc.w	r3, r3, #0
    7078:	4610      	mov	r0, r2
    707a:	4619      	mov	r1, r3
    707c:	2a00      	cmp	r2, #0
    707e:	f173 0e00 	sbcs.w	lr, r3, #0
    7082:	dad2      	bge.n	702a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xaee>
    7084:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7088:	2100      	movs	r1, #0
    708a:	1880      	adds	r0, r0, r2
    708c:	4159      	adcs	r1, r3
    708e:	e7cc      	b.n	702a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xaee>
    7090:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7094:	2100      	movs	r1, #0
    7096:	1880      	adds	r0, r0, r2
    7098:	4159      	adcs	r1, r3
    709a:	e5be      	b.n	6c1a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x6de>
  for (int i = 0; i < dims_count; ++i) {
    709c:	2900      	cmp	r1, #0
    709e:	f77f ae43 	ble.w	6d28 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x7ec>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    70a2:	a827      	add	r0, sp, #156	; 0x9c
    70a4:	f7ff bac7 	b.w	6636 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xfa>
    70a8:	4823      	ldr	r0, [pc, #140]	; (7138 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbfc>)
    70aa:	f04f 31ff 	mov.w	r1, #4294967295
    70ae:	1880      	adds	r0, r0, r2
    70b0:	4159      	adcs	r1, r3
    70b2:	4602      	mov	r2, r0
    70b4:	460b      	mov	r3, r1
    70b6:	2800      	cmp	r0, #0
    70b8:	f171 0e00 	sbcs.w	lr, r1, #0
    70bc:	db03      	blt.n	70c6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xb8a>
    70be:	0fc0      	lsrs	r0, r0, #31
    70c0:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
    70c4:	e07d      	b.n	71c2 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc86>
    70c6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    70ca:	2100      	movs	r1, #0
    70cc:	1880      	adds	r0, r0, r2
    70ce:	4159      	adcs	r1, r3
    70d0:	e7f5      	b.n	70be <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xb82>
    70d2:	4819      	ldr	r0, [pc, #100]	; (7138 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbfc>)
    70d4:	f04f 31ff 	mov.w	r1, #4294967295
    70d8:	1880      	adds	r0, r0, r2
    70da:	4159      	adcs	r1, r3
    70dc:	4602      	mov	r2, r0
    70de:	460b      	mov	r3, r1
    70e0:	2800      	cmp	r0, #0
    70e2:	f171 0e00 	sbcs.w	lr, r1, #0
    70e6:	db03      	blt.n	70f0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbb4>
    70e8:	0fc0      	lsrs	r0, r0, #31
    70ea:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
    70ee:	e6b0      	b.n	6e52 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x916>
    70f0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    70f4:	2100      	movs	r1, #0
    70f6:	1880      	adds	r0, r0, r2
    70f8:	4159      	adcs	r1, r3
    70fa:	e7f5      	b.n	70e8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbac>
    70fc:	480e      	ldr	r0, [pc, #56]	; (7138 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbfc>)
    70fe:	f04f 31ff 	mov.w	r1, #4294967295
    7102:	1880      	adds	r0, r0, r2
    7104:	4159      	adcs	r1, r3
    7106:	4602      	mov	r2, r0
    7108:	460b      	mov	r3, r1
    710a:	2800      	cmp	r0, #0
    710c:	f171 0e00 	sbcs.w	lr, r1, #0
    7110:	db03      	blt.n	711a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbde>
    7112:	0fc0      	lsrs	r0, r0, #31
    7114:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
    7118:	e70d      	b.n	6f36 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x9fa>
    711a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    711e:	2100      	movs	r1, #0
    7120:	1880      	adds	r0, r0, r2
    7122:	4159      	adcs	r1, r3
    7124:	e7f5      	b.n	7112 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbd6>
    7126:	bf00      	nop
    7128:	000063f1 	.word	0x000063f1
    712c:	00005191 	.word	0x00005191
    7130:	000091e1 	.word	0x000091e1
    7134:	00006529 	.word	0x00006529
    7138:	c0000001 	.word	0xc0000001
    713c:	483c      	ldr	r0, [pc, #240]	; (7230 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xcf4>)
    713e:	f04f 31ff 	mov.w	r1, #4294967295
    7142:	1880      	adds	r0, r0, r2
    7144:	4159      	adcs	r1, r3
    7146:	4602      	mov	r2, r0
    7148:	460b      	mov	r3, r1
    714a:	2800      	cmp	r0, #0
    714c:	f171 0e00 	sbcs.w	lr, r1, #0
    7150:	db04      	blt.n	715c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc20>
    7152:	0fc0      	lsrs	r0, r0, #31
    7154:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
    7158:	f7ff bbea 	b.w	6930 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x3f4>
    715c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7160:	2100      	movs	r1, #0
    7162:	1880      	adds	r0, r0, r2
    7164:	4159      	adcs	r1, r3
    7166:	e7f4      	b.n	7152 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc16>
    7168:	4831      	ldr	r0, [pc, #196]	; (7230 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xcf4>)
    716a:	f04f 31ff 	mov.w	r1, #4294967295
    716e:	1880      	adds	r0, r0, r2
    7170:	4159      	adcs	r1, r3
    7172:	4602      	mov	r2, r0
    7174:	460b      	mov	r3, r1
    7176:	2800      	cmp	r0, #0
    7178:	f171 0e00 	sbcs.w	lr, r1, #0
    717c:	db03      	blt.n	7186 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc4a>
    717e:	0fc0      	lsrs	r0, r0, #31
    7180:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
    7184:	e754      	b.n	7030 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xaf4>
    7186:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    718a:	2100      	movs	r1, #0
    718c:	1880      	adds	r0, r0, r2
    718e:	4159      	adcs	r1, r3
    7190:	e7f5      	b.n	717e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc42>
    7192:	4827      	ldr	r0, [pc, #156]	; (7230 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xcf4>)
    7194:	f04f 31ff 	mov.w	r1, #4294967295
    7198:	1880      	adds	r0, r0, r2
    719a:	4159      	adcs	r1, r3
    719c:	4602      	mov	r2, r0
    719e:	460b      	mov	r3, r1
    71a0:	2800      	cmp	r0, #0
    71a2:	f171 0e00 	sbcs.w	lr, r1, #0
    71a6:	db03      	blt.n	71b0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc74>
    71a8:	0fc0      	lsrs	r0, r0, #31
    71aa:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
    71ae:	e537      	b.n	6c20 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x6e4>
    71b0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    71b4:	2100      	movs	r1, #0
    71b6:	1880      	adds	r0, r0, r2
    71b8:	4159      	adcs	r1, r3
    71ba:	e7f5      	b.n	71a8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc6c>
    71bc:	0fc0      	lsrs	r0, r0, #31
    71be:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    71c2:	4b1c      	ldr	r3, [pc, #112]	; (7234 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xcf8>)
    71c4:	4798      	blx	r3
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
    71c6:	4b1c      	ldr	r3, [pc, #112]	; (7238 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xcfc>)
    71c8:	4798      	blx	r3
  return a + b;
    71ca:	4481      	add	r9, r0
    for (int c = 0; c < depth; ++c) {
    71cc:	42a5      	cmp	r5, r4
    71ce:	f43f adbe 	beq.w	6d4e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x812>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
    71d2:	f915 2b01 	ldrsb.w	r2, [r5], #1
    71d6:	eba2 0208 	sub.w	r2, r2, r8
      if (input_diff >= diff_min) {
    71da:	4592      	cmp	sl, r2
    71dc:	dcf6      	bgt.n	71cc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc90>
    71de:	fa02 f20b 	lsl.w	r2, r2, fp
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    71e2:	4296      	cmp	r6, r2
    71e4:	f43f adac 	beq.w	6d40 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x804>
  std::int64_t a_64(a);
    71e8:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    71ea:	fb06 f101 	mul.w	r1, r6, r1
    71ee:	9b01      	ldr	r3, [sp, #4]
    71f0:	fb02 1103 	mla	r1, r2, r3, r1
    71f4:	fba6 2302 	umull	r2, r3, r6, r2
    71f8:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    71fa:	2a00      	cmp	r2, #0
    71fc:	f173 0100 	sbcs.w	r1, r3, #0
    7200:	f6ff af52 	blt.w	70a8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xb6c>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    7204:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
    7208:	f143 0300 	adc.w	r3, r3, #0
    720c:	4610      	mov	r0, r2
    720e:	4619      	mov	r1, r3
    7210:	2a00      	cmp	r2, #0
    7212:	f173 0e00 	sbcs.w	lr, r3, #0
    7216:	dad1      	bge.n	71bc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc80>
    7218:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    721c:	2100      	movs	r1, #0
    721e:	1880      	adds	r0, r0, r2
    7220:	4159      	adcs	r1, r3
    7222:	e7cb      	b.n	71bc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xc80>
    7224:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7228:	2100      	movs	r1, #0
    722a:	1880      	adds	r0, r0, r2
    722c:	4159      	adcs	r1, r3
    722e:	e60d      	b.n	6e4c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x910>
    7230:	c0000001 	.word	0xc0000001
    7234:	000063f1 	.word	0x000063f1
    7238:	00006529 	.word	0x00006529

0000723c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
    723c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    723e:	4607      	mov	r7, r0
  return &context->tensors[node->inputs->data[index]];
    7240:	6885      	ldr	r5, [r0, #8]
    7242:	680b      	ldr	r3, [r1, #0]
    7244:	685c      	ldr	r4, [r3, #4]
    7246:	01a4      	lsls	r4, r4, #6
    7248:	1928      	adds	r0, r5, r4
  return &context->tensors[node->outputs->data[index]];
    724a:	684b      	ldr	r3, [r1, #4]
    724c:	685e      	ldr	r6, [r3, #4]
    724e:	eb05 1686 	add.w	r6, r5, r6, lsl #6
  TFLITE_DCHECK(node->user_data != nullptr);
    7252:	690a      	ldr	r2, [r1, #16]
    7254:	b18a      	cbz	r2, 727a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x3e>
  switch (input->type) {
    7256:	5d2b      	ldrb	r3, [r5, r4]
    7258:	2b03      	cmp	r3, #3
    725a:	d015      	beq.n	7288 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4c>
    725c:	2b09      	cmp	r3, #9
    725e:	d013      	beq.n	7288 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4c>
    7260:	2b01      	cmp	r3, #1
    7262:	d00c      	beq.n	727e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x42>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    7264:	697e      	ldr	r6, [r7, #20]
    7266:	4618      	mov	r0, r3
    7268:	4b0a      	ldr	r3, [pc, #40]	; (7294 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x58>)
    726a:	4798      	blx	r3
    726c:	5d2b      	ldrb	r3, [r5, r4]
    726e:	4602      	mov	r2, r0
    7270:	4909      	ldr	r1, [pc, #36]	; (7298 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
    7272:	4638      	mov	r0, r7
    7274:	47b0      	blx	r6
      return kTfLiteError;
    7276:	2001      	movs	r0, #1
}
    7278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
    727a:	4b08      	ldr	r3, [pc, #32]	; (729c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x60>)
    727c:	4798      	blx	r3
      SoftmaxFloat(input, output, *data);
    727e:	4631      	mov	r1, r6
    7280:	4b07      	ldr	r3, [pc, #28]	; (72a0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x64>)
    7282:	4798      	blx	r3
      return kTfLiteOk;
    7284:	2000      	movs	r0, #0
    7286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SoftmaxQuantized(input, output, *data);
    7288:	4631      	mov	r1, r6
    728a:	4b06      	ldr	r3, [pc, #24]	; (72a4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x68>)
    728c:	4798      	blx	r3
      return kTfLiteOk;
    728e:	2000      	movs	r0, #0
    7290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7292:	bf00      	nop
    7294:	00009145 	.word	0x00009145
    7298:	00020ddc 	.word	0x00020ddc
    729c:	000138bd 	.word	0x000138bd
    72a0:	0000610d 	.word	0x0000610d
    72a4:	0000653d 	.word	0x0000653d

000072a8 <_ZN6tflite14AlignPointerUpEPhj>:
namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
    72a8:	1e4b      	subs	r3, r1, #1
    72aa:	4418      	add	r0, r3
    72ac:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
    72b0:	fb01 f000 	mul.w	r0, r1, r0
    72b4:	4770      	bx	lr

000072b6 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
    72b6:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
    72ba:	fb00 f001 	mul.w	r0, r0, r1
    72be:	4770      	bx	lr

000072c0 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
    72c0:	3801      	subs	r0, #1
    72c2:	4408      	add	r0, r1
    72c4:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_size;
}
    72c8:	fb01 f000 	mul.w	r0, r1, r0
    72cc:	4770      	bx	lr

000072ce <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
  switch (type) {
    72ce:	3801      	subs	r0, #1
    72d0:	280b      	cmp	r0, #11
    72d2:	d82b      	bhi.n	732c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x5e>
    72d4:	e8df f000 	tbb	[pc, r0]
    72d8:	1a120e06 	.word	0x1a120e06
    72dc:	220a1e2a 	.word	0x220a1e2a
    72e0:	262a2a16 	.word	0x262a2a16
    case kTfLiteFloat32:
      *size = sizeof(float);
    72e4:	2304      	movs	r3, #4
    72e6:	600b      	str	r3, [r1, #0]
      *size = sizeof(double) * 2;
      break;
    default:
      return kTfLiteError;
  }
  return kTfLiteOk;
    72e8:	2000      	movs	r0, #0
      break;
    72ea:	4770      	bx	lr
      *size = sizeof(int16_t);
    72ec:	2302      	movs	r3, #2
    72ee:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    72f0:	2000      	movs	r0, #0
      break;
    72f2:	4770      	bx	lr
      *size = sizeof(int32_t);
    72f4:	2304      	movs	r3, #4
    72f6:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    72f8:	2000      	movs	r0, #0
      break;
    72fa:	4770      	bx	lr
      *size = sizeof(uint8_t);
    72fc:	2301      	movs	r3, #1
    72fe:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    7300:	2000      	movs	r0, #0
      break;
    7302:	4770      	bx	lr
      *size = sizeof(int8_t);
    7304:	2301      	movs	r3, #1
    7306:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    7308:	2000      	movs	r0, #0
      break;
    730a:	4770      	bx	lr
      *size = sizeof(int64_t);
    730c:	2308      	movs	r3, #8
    730e:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    7310:	2000      	movs	r0, #0
      break;
    7312:	4770      	bx	lr
      *size = sizeof(bool);
    7314:	2301      	movs	r3, #1
    7316:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    7318:	2000      	movs	r0, #0
      break;
    731a:	4770      	bx	lr
      *size = sizeof(float) * 2;
    731c:	2308      	movs	r3, #8
    731e:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    7320:	2000      	movs	r0, #0
      break;
    7322:	4770      	bx	lr
      *size = sizeof(double) * 2;
    7324:	2310      	movs	r3, #16
    7326:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
    7328:	2000      	movs	r0, #0
      break;
    732a:	4770      	bx	lr
      return kTfLiteError;
    732c:	2001      	movs	r0, #1
}
    732e:	4770      	bx	lr

00007330 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
    7330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7334:	b083      	sub	sp, #12
    7336:	4688      	mov	r8, r1
    7338:	4691      	mov	r9, r2
    return data_ - ReadScalar<soffset_t>(data_);
    733a:	6802      	ldr	r2, [r0, #0]
    733c:	eba0 0e02 	sub.w	lr, r0, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7340:	f8be c000 	ldrh.w	ip, [lr]
    7344:	f1bc 0f04 	cmp.w	ip, #4
    7348:	dd22      	ble.n	7390 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x60>
    734a:	f8be 2004 	ldrh.w	r2, [lr, #4]
    auto p = data_ + field_offset;
    734e:	1885      	adds	r5, r0, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7350:	b302      	cbz	r2, 7394 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x64>
    7352:	5881      	ldr	r1, [r0, r2]
  int element_count = 1;
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
    7354:	186c      	adds	r4, r5, r1
    7356:	d01f      	beq.n	7398 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x68>
  uoffset_t size() const { return EndianScalar(length_); }
    7358:	586f      	ldr	r7, [r5, r1]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    735a:	b1ff      	cbz	r7, 739c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6c>
    735c:	2100      	movs	r1, #0
    735e:	2501      	movs	r5, #1
      element_count *= flatbuffer_tensor.shape()->Get(n);
    7360:	f854 6f04 	ldr.w	r6, [r4, #4]!
    7364:	fb06 f505 	mul.w	r5, r6, r5
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    7368:	3101      	adds	r1, #1
    736a:	42b9      	cmp	r1, r7
    736c:	d1f8      	bne.n	7360 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x30>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    736e:	f1bc 0f06 	cmp.w	ip, #6
    7372:	dd15      	ble.n	73a0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x70>
    7374:	f8be 2006 	ldrh.w	r2, [lr, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7378:	b1a2      	cbz	r2, 73a4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x74>
    737a:	5680      	ldrsb	r0, [r0, r2]
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    737c:	461a      	mov	r2, r3
    737e:	f10d 0107 	add.w	r1, sp, #7
    7382:	b2c0      	uxtb	r0, r0
    7384:	4b0f      	ldr	r3, [pc, #60]	; (73c4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x94>)
    7386:	4798      	blx	r3
    7388:	b170      	cbz	r0, 73a8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x78>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
  *bytes = element_count * (*type_size);
  return kTfLiteOk;
}
    738a:	b003      	add	sp, #12
    738c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  int element_count = 1;
    7390:	2501      	movs	r5, #1
    7392:	e7ec      	b.n	736e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
    7394:	2501      	movs	r5, #1
    7396:	e7ea      	b.n	736e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
    7398:	2501      	movs	r5, #1
    739a:	e7e8      	b.n	736e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    739c:	2501      	movs	r5, #1
    739e:	e7e6      	b.n	736e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
    73a0:	2000      	movs	r0, #0
    73a2:	e7eb      	b.n	737c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4c>
    73a4:	2000      	movs	r0, #0
    73a6:	e7e9      	b.n	737c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4c>
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
    73a8:	4649      	mov	r1, r9
    73aa:	f89d 0007 	ldrb.w	r0, [sp, #7]
    73ae:	4b06      	ldr	r3, [pc, #24]	; (73c8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x98>)
    73b0:	4798      	blx	r3
    73b2:	2800      	cmp	r0, #0
    73b4:	d1e9      	bne.n	738a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x5a>
  *bytes = element_count * (*type_size);
    73b6:	f8d9 2000 	ldr.w	r2, [r9]
    73ba:	fb05 f502 	mul.w	r5, r5, r2
    73be:	f8c8 5000 	str.w	r5, [r8]
  return kTfLiteOk;
    73c2:	e7e2      	b.n	738a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x5a>
    73c4:	00001221 	.word	0x00001221
    73c8:	000072cf 	.word	0x000072cf

000073cc <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
}

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
  // We don't own the scratch buffer, so don't deallocate anything.
}
    73cc:	4770      	bx	lr

000073ce <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    line[kLineWidth] = 0;
    TF_LITE_REPORT_ERROR(error_reporter, "%s", (const char*)line);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
    73ce:	6880      	ldr	r0, [r0, #8]
    73d0:	4770      	bx	lr
	...

000073d4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
    int last_time_used) {
    73d4:	b538      	push	{r3, r4, r5, lr}
  if (buffer_count_ >= max_buffer_count_) {
    73d6:	6884      	ldr	r4, [r0, #8]
    73d8:	6845      	ldr	r5, [r0, #4]
    73da:	42ac      	cmp	r4, r5
    73dc:	da11      	bge.n	7402 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2e>
  BufferRequirements* current = &requirements_[buffer_count_];
    73de:	0124      	lsls	r4, r4, #4
    73e0:	68c5      	ldr	r5, [r0, #12]
    73e2:	1929      	adds	r1, r5, r4
  current->size = size;
    73e4:	512a      	str	r2, [r5, r4]
  current->first_time_used = first_time_used;
    73e6:	608b      	str	r3, [r1, #8]
  current->last_time_used = last_time_used;
    73e8:	9b04      	ldr	r3, [sp, #16]
    73ea:	60cb      	str	r3, [r1, #12]
  current->offline_offset = kOnlinePlannedBuffer;
    73ec:	f04f 33ff 	mov.w	r3, #4294967295
    73f0:	604b      	str	r3, [r1, #4]
  ++buffer_count_;
    73f2:	6883      	ldr	r3, [r0, #8]
    73f4:	3301      	adds	r3, #1
    73f6:	6083      	str	r3, [r0, #8]
  need_to_calculate_offsets_ = true;
    73f8:	2301      	movs	r3, #1
    73fa:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  return kTfLiteOk;
    73fe:	2000      	movs	r0, #0
}
    7400:	bd38      	pop	{r3, r4, r5, pc}
    7402:	4608      	mov	r0, r1
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
    7404:	462a      	mov	r2, r5
    7406:	4902      	ldr	r1, [pc, #8]	; (7410 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x3c>)
    7408:	4b02      	ldr	r3, [pc, #8]	; (7414 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x40>)
    740a:	4798      	blx	r3
    return kTfLiteError;
    740c:	2001      	movs	r0, #1
    740e:	bd38      	pop	{r3, r4, r5, pc}
    7410:	00021118 	.word	0x00021118
    7414:	0000118d 	.word	0x0000118d

00007418 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
    7418:	b510      	push	{r4, lr}
    741a:	4604      	mov	r4, r0
}
    741c:	212c      	movs	r1, #44	; 0x2c
    741e:	4b02      	ldr	r3, [pc, #8]	; (7428 <_ZN6tflite19GreedyMemoryPlannerD0Ev+0x10>)
    7420:	4798      	blx	r3
    7422:	4620      	mov	r0, r4
    7424:	bd10      	pop	{r4, pc}
    7426:	bf00      	nop
    7428:	000091dd 	.word	0x000091dd

0000742c <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
void ReverseSortInPlace(int* values, int* ids, int size) {
    742c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7430:	4694      	mov	ip, r2
    7432:	f102 4780 	add.w	r7, r2, #1073741824	; 0x40000000
    7436:	3f01      	subs	r7, #1
    7438:	eb00 0787 	add.w	r7, r0, r7, lsl #2
    for (int i = 1; i < size; ++i) {
    743c:	f04f 0800 	mov.w	r8, #0
        any_swapped = true;
    7440:	f04f 0e01 	mov.w	lr, #1
    7444:	e010      	b.n	7468 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x3c>
    7446:	3304      	adds	r3, #4
    7448:	3404      	adds	r4, #4
    for (int i = 1; i < size; ++i) {
    744a:	42bb      	cmp	r3, r7
    744c:	d00b      	beq.n	7466 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x3a>
      if (values[i - 1] < values[i]) {
    744e:	681d      	ldr	r5, [r3, #0]
    7450:	685e      	ldr	r6, [r3, #4]
    7452:	42b5      	cmp	r5, r6
    7454:	daf7      	bge.n	7446 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x1a>
        values[i - 1] = values[i];
    7456:	601e      	str	r6, [r3, #0]
        values[i] = value_temp;
    7458:	605d      	str	r5, [r3, #4]
        const int id_temp = ids[i - 1];
    745a:	6825      	ldr	r5, [r4, #0]
        ids[i - 1] = ids[i];
    745c:	6866      	ldr	r6, [r4, #4]
    745e:	6026      	str	r6, [r4, #0]
        ids[i] = id_temp;
    7460:	6065      	str	r5, [r4, #4]
        any_swapped = true;
    7462:	4672      	mov	r2, lr
    7464:	e7ef      	b.n	7446 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x1a>
  do {
    7466:	b132      	cbz	r2, 7476 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x4a>
    for (int i = 1; i < size; ++i) {
    7468:	f1bc 0f01 	cmp.w	ip, #1
    746c:	dd03      	ble.n	7476 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x4a>
    746e:	4603      	mov	r3, r0
    7470:	460c      	mov	r4, r1
    7472:	4642      	mov	r2, r8
    7474:	e7eb      	b.n	744e <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x22>
    7476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0000747c <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
    747c:	b410      	push	{r4}
    : buffer_count_(0), need_to_calculate_offsets_(true) {
    747e:	4c0e      	ldr	r4, [pc, #56]	; (74b8 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0x3c>)
    7480:	6004      	str	r4, [r0, #0]
    7482:	2400      	movs	r4, #0
    7484:	6084      	str	r4, [r0, #8]
    7486:	2401      	movs	r4, #1
    7488:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
    748c:	f104 34cc 	add.w	r4, r4, #3435973836	; 0xcccccccc
    7490:	fba4 4202 	umull	r4, r2, r4, r2
    7494:	0952      	lsrs	r2, r2, #5
    7496:	6042      	str	r2, [r0, #4]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
    7498:	60c1      	str	r1, [r0, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
    749a:	eb01 1102 	add.w	r1, r1, r2, lsl #4
  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
    749e:	6101      	str	r1, [r0, #16]
  next_free += sizeof(int) * max_buffer_count_;
    74a0:	0094      	lsls	r4, r2, #2
    74a2:	4421      	add	r1, r4
  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
    74a4:	6141      	str	r1, [r0, #20]
  next_free += sizeof(int) * max_buffer_count_;
    74a6:	4421      	add	r1, r4
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
    74a8:	6181      	str	r1, [r0, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
    74aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    74ae:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
    74b2:	6241      	str	r1, [r0, #36]	; 0x24
}
    74b4:	bc10      	pop	{r4}
    74b6:	4770      	bx	lr
    74b8:	00021100 	.word	0x00021100

000074bc <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:
    int last_time_used, int offline_offset) {
    74bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    74be:	b083      	sub	sp, #12
  BufferRequirements* current = &requirements_[buffer_count_];
    74c0:	68c5      	ldr	r5, [r0, #12]
    74c2:	6887      	ldr	r7, [r0, #8]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
    74c4:	6804      	ldr	r4, [r0, #0]
    74c6:	9e08      	ldr	r6, [sp, #32]
    74c8:	9600      	str	r6, [sp, #0]
    74ca:	68a4      	ldr	r4, [r4, #8]
    74cc:	47a0      	blx	r4
    74ce:	b928      	cbnz	r0, 74dc <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x20>
  current->offline_offset = offline_offset;
    74d0:	eb05 1507 	add.w	r5, r5, r7, lsl #4
    74d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    74d6:	606b      	str	r3, [r5, #4]
}
    74d8:	b003      	add	sp, #12
    74da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return kTfLiteError;
    74dc:	2001      	movs	r0, #1
    74de:	e7fb      	b.n	74d8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1c>

000074e0 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
    const int last_time_used) const {
    74e0:	b410      	push	{r4}
      &requirements_[entry->requirements_index];
    74e2:	684c      	ldr	r4, [r1, #4]
    74e4:	68c1      	ldr	r1, [r0, #12]
    74e6:	eb01 1104 	add.w	r1, r1, r4, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
    74ea:	6888      	ldr	r0, [r1, #8]
    74ec:	4298      	cmp	r0, r3
    74ee:	dc06      	bgt.n	74fe <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1e>
  if (first_time_used > entry_requirements->last_time_used) {
    74f0:	68c8      	ldr	r0, [r1, #12]
    74f2:	4290      	cmp	r0, r2
    74f4:	bfb4      	ite	lt
    74f6:	2000      	movlt	r0, #0
    74f8:	2001      	movge	r0, #1
}
    74fa:	bc10      	pop	{r4}
    74fc:	4770      	bx	lr
    return false;
    74fe:	2000      	movs	r0, #0
    7500:	e7fb      	b.n	74fa <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1a>
	...

00007504 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
    7504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (start == nullptr) {
    7508:	b1e1      	cbz	r1, 7544 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x40>
    if (start->next_entry_index == -1) {
    750a:	688c      	ldr	r4, [r1, #8]
    750c:	f1b4 3fff 	cmp.w	r4, #4294967295
    7510:	d01f      	beq.n	7552 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x4e>
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
    7512:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7516:	6981      	ldr	r1, [r0, #24]
    7518:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    751c:	461f      	mov	r7, r3
    751e:	4690      	mov	r8, r2
    7520:	4605      	mov	r5, r0
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
    7522:	4e0f      	ldr	r6, [pc, #60]	; (7560 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x5c>)
    7524:	463b      	mov	r3, r7
    7526:	4642      	mov	r2, r8
    7528:	4621      	mov	r1, r4
    752a:	4628      	mov	r0, r5
    752c:	47b0      	blx	r6
    752e:	b998      	cbnz	r0, 7558 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
    if (candidate_next_entry->next_entry_index == -1) {
    7530:	68a1      	ldr	r1, [r4, #8]
    7532:	f1b1 3fff 	cmp.w	r1, #4294967295
    7536:	d00e      	beq.n	7556 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x52>
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
    7538:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    candidate_next_entry =
    753c:	69ac      	ldr	r4, [r5, #24]
    753e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
    7542:	e7ef      	b.n	7524 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x20>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
    7544:	6a04      	ldr	r4, [r0, #32]
    7546:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    754a:	6981      	ldr	r1, [r0, #24]
    754c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    7550:	e7e4      	b.n	751c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x18>
      return nullptr;
    7552:	2400      	movs	r4, #0
    7554:	e000      	b.n	7558 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  ListEntry* result = nullptr;
    7556:	2400      	movs	r4, #0
}
    7558:	4620      	mov	r0, r4
    755a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    755e:	bf00      	nop
    7560:	000074e1 	.word	0x000074e1

00007564 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
    7564:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    7568:	2b00      	cmp	r3, #0
    756a:	f000 80d6 	beq.w	771a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b6>
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
    756e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7572:	b085      	sub	sp, #20
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
    7574:	6887      	ldr	r7, [r0, #8]
    7576:	2f00      	cmp	r7, #0
    7578:	f000 80cc 	beq.w	7714 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b0>
  need_to_calculate_offsets_ = false;
    757c:	2300      	movs	r3, #0
    757e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  for (int i = 0; i < buffer_count_; ++i) {
    7582:	429f      	cmp	r7, r3
    7584:	dd2a      	ble.n	75dc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x78>
    7586:	461d      	mov	r5, r3
    7588:	461c      	mov	r4, r3
    758a:	461a      	mov	r2, r3
      buffer_offsets_[i] = -1;
    758c:	f04f 3eff 	mov.w	lr, #4294967295
    7590:	e00f      	b.n	75b2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x4e>
      idx_from_tail--;
    7592:	3f01      	subs	r7, #1
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
    7594:	58c9      	ldr	r1, [r1, r3]
    7596:	6903      	ldr	r3, [r0, #16]
    7598:	f843 1027 	str.w	r1, [r3, r7, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
    759c:	6943      	ldr	r3, [r0, #20]
    759e:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
      buffer_offsets_[i] = -1;
    75a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    75a4:	f843 e005 	str.w	lr, [r3, r5]
  for (int i = 0; i < buffer_count_; ++i) {
    75a8:	3401      	adds	r4, #1
    75aa:	6883      	ldr	r3, [r0, #8]
    75ac:	3504      	adds	r5, #4
    75ae:	42a3      	cmp	r3, r4
    75b0:	dd16      	ble.n	75e0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x7c>
    75b2:	0123      	lsls	r3, r4, #4
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
    75b4:	68c1      	ldr	r1, [r0, #12]
    75b6:	18ce      	adds	r6, r1, r3
    75b8:	6876      	ldr	r6, [r6, #4]
    75ba:	f1b6 3fff 	cmp.w	r6, #4294967295
    75be:	d0e8      	beq.n	7592 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2e>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
    75c0:	58ce      	ldr	r6, [r1, r3]
    75c2:	6901      	ldr	r1, [r0, #16]
    75c4:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
      buffer_ids_sorted_[idx_from_head] = i;
    75c8:	6941      	ldr	r1, [r0, #20]
    75ca:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
      buffer_offsets_[i] = requirements_[i].offline_offset;
    75ce:	68c1      	ldr	r1, [r0, #12]
    75d0:	440b      	add	r3, r1
    75d2:	6859      	ldr	r1, [r3, #4]
    75d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    75d6:	5159      	str	r1, [r3, r5]
      idx_from_head++;
    75d8:	3201      	adds	r2, #1
    75da:	e7e5      	b.n	75a8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x44>
  for (int i = 0; i < buffer_count_; ++i) {
    75dc:	463b      	mov	r3, r7
  int idx_from_head = 0;
    75de:	2200      	movs	r2, #0
    75e0:	4604      	mov	r4, r0
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
    75e2:	0090      	lsls	r0, r2, #2
    75e4:	6961      	ldr	r1, [r4, #20]
    75e6:	6925      	ldr	r5, [r4, #16]
                     buffer_count_ - idx_from_head);
    75e8:	1a9a      	subs	r2, r3, r2
    75ea:	4401      	add	r1, r0
    75ec:	4428      	add	r0, r5
    75ee:	4b4b      	ldr	r3, [pc, #300]	; (771c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b8>)
    75f0:	4798      	blx	r3
  first_entry_index_ = 0;
    75f2:	2300      	movs	r3, #0
    75f4:	6223      	str	r3, [r4, #32]
  next_free_entry_ = 1;
    75f6:	2301      	movs	r3, #1
    75f8:	61e3      	str	r3, [r4, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
    75fa:	69a3      	ldr	r3, [r4, #24]
    75fc:	4619      	mov	r1, r3
    75fe:	9303      	str	r3, [sp, #12]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
    7600:	f04f 33ff 	mov.w	r3, #4294967295
    7604:	608b      	str	r3, [r1, #8]
  int buffer_id = buffer_ids_sorted_[0];
    7606:	6963      	ldr	r3, [r4, #20]
    7608:	681b      	ldr	r3, [r3, #0]
  first_entry->requirements_index = buffer_id;
    760a:	604b      	str	r3, [r1, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
    760c:	68e2      	ldr	r2, [r4, #12]
    760e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    7612:	6852      	ldr	r2, [r2, #4]
    7614:	f1b2 3fff 	cmp.w	r2, #4294967295
    7618:	d00a      	beq.n	7630 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xcc>
  first_entry->offset = buffer_offsets_[buffer_id];
    761a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    761c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7620:	9a03      	ldr	r2, [sp, #12]
    7622:	6013      	str	r3, [r2, #0]
  for (int i = 1; i < buffer_count_; ++i) {
    7624:	68a3      	ldr	r3, [r4, #8]
    7626:	2b01      	cmp	r3, #1
    7628:	dd74      	ble.n	7714 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b0>
    762a:	f04f 0a01 	mov.w	sl, #1
    762e:	e03a      	b.n	76a6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x142>
    buffer_offsets_[buffer_id] = 0;
    7630:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7632:	2100      	movs	r1, #0
    7634:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    7638:	e7ef      	b.n	761a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xb6>
            prior_entry, wanted_first_time_used, wanted_last_time_used);
    763a:	9b02      	ldr	r3, [sp, #8]
    763c:	9a01      	ldr	r2, [sp, #4]
    763e:	4639      	mov	r1, r7
    7640:	9800      	ldr	r0, [sp, #0]
    7642:	4c37      	ldr	r4, [pc, #220]	; (7720 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1bc>)
    7644:	47a0      	blx	r4
              &requirements_[prior_entry->requirements_index];
    7646:	687b      	ldr	r3, [r7, #4]
              prior_entry->offset + candidate_requirements->size;
    7648:	011b      	lsls	r3, r3, #4
    764a:	f858 3003 	ldr.w	r3, [r8, r3]
    764e:	441d      	add	r5, r3
    7650:	42ae      	cmp	r6, r5
    7652:	bfb8      	it	lt
    7654:	462e      	movlt	r6, r5
            prior_entry, wanted_first_time_used, wanted_last_time_used);
    7656:	4607      	mov	r7, r0
        if (next_entry == nullptr) {
    7658:	b12f      	cbz	r7, 7666 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x102>
        const int gap = next_entry->offset - candidate_offset;
    765a:	683d      	ldr	r5, [r7, #0]
    765c:	1bab      	subs	r3, r5, r6
        if (gap >= wanted_size) {
    765e:	459b      	cmp	fp, r3
    7660:	dceb      	bgt.n	763a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd6>
    7662:	9c00      	ldr	r4, [sp, #0]
    7664:	e02c      	b.n	76c0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15c>
    7666:	9c00      	ldr	r4, [sp, #0]
    7668:	e02a      	b.n	76c0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15c>
    766a:	9803      	ldr	r0, [sp, #12]
    766c:	e000      	b.n	7670 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x10c>
        current_entry = next_entry;
    766e:	4628      	mov	r0, r5
        const int next_entry_index = current_entry->next_entry_index;
    7670:	6882      	ldr	r2, [r0, #8]
        if (next_entry_index == -1) {
    7672:	f1b2 3fff 	cmp.w	r2, #4294967295
    7676:	d00c      	beq.n	7692 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12e>
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
    7678:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    767c:	69a1      	ldr	r1, [r4, #24]
    767e:	eb01 0583 	add.w	r5, r1, r3, lsl #2
        if (next_entry->offset > candidate_offset) {
    7682:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    7686:	429e      	cmp	r6, r3
    7688:	daf1      	bge.n	766e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x10a>
          new_entry->next_entry_index = current_entry->next_entry_index;
    768a:	60ba      	str	r2, [r7, #8]
          current_entry->next_entry_index = new_entry_index;
    768c:	f8c0 e008 	str.w	lr, [r0, #8]
          break;
    7690:	e004      	b.n	769c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x138>
          current_entry->next_entry_index = new_entry_index;
    7692:	f8c0 e008 	str.w	lr, [r0, #8]
          new_entry->next_entry_index = -1;
    7696:	f04f 33ff 	mov.w	r3, #4294967295
    769a:	60bb      	str	r3, [r7, #8]
  for (int i = 1; i < buffer_count_; ++i) {
    769c:	f10a 0a01 	add.w	sl, sl, #1
    76a0:	68a3      	ldr	r3, [r4, #8]
    76a2:	4553      	cmp	r3, sl
    76a4:	dd36      	ble.n	7714 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b0>
    buffer_id = buffer_ids_sorted_[i];
    76a6:	6963      	ldr	r3, [r4, #20]
    76a8:	f853 902a 	ldr.w	r9, [r3, sl, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
    76ac:	f8d4 800c 	ldr.w	r8, [r4, #12]
    76b0:	ea4f 1209 	mov.w	r2, r9, lsl #4
    76b4:	eb08 0302 	add.w	r3, r8, r2
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
    76b8:	685e      	ldr	r6, [r3, #4]
    76ba:	f1b6 3fff 	cmp.w	r6, #4294967295
    76be:	d01b      	beq.n	76f8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x194>
    buffer_offsets_[buffer_id] = candidate_offset;
    76c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    76c2:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
    76c6:	69e3      	ldr	r3, [r4, #28]
    76c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    76cc:	69a2      	ldr	r2, [r4, #24]
    76ce:	eb02 0783 	add.w	r7, r2, r3, lsl #2
    new_entry->offset = candidate_offset;
    76d2:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
    new_entry->requirements_index = buffer_id;
    76d6:	f8c7 9004 	str.w	r9, [r7, #4]
    const int new_entry_index = next_free_entry_;
    76da:	f8d4 e01c 	ldr.w	lr, [r4, #28]
    ++next_free_entry_;
    76de:	f10e 0301 	add.w	r3, lr, #1
    76e2:	61e3      	str	r3, [r4, #28]
    if (first_entry->offset > candidate_offset) {
    76e4:	9b03      	ldr	r3, [sp, #12]
    76e6:	681b      	ldr	r3, [r3, #0]
    76e8:	429e      	cmp	r6, r3
    76ea:	dabe      	bge.n	766a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x106>
      first_entry->next_entry_index = first_entry_index_;
    76ec:	6a23      	ldr	r3, [r4, #32]
    76ee:	60bb      	str	r3, [r7, #8]
      first_entry_index_ = new_entry_index;
    76f0:	f8c4 e020 	str.w	lr, [r4, #32]
      first_entry = new_entry;
    76f4:	9703      	str	r7, [sp, #12]
    76f6:	e7d1      	b.n	769c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x138>
    const int wanted_size = wanted_requirements->size;
    76f8:	f858 b002 	ldr.w	fp, [r8, r2]
    const int wanted_first_time_used = wanted_requirements->first_time_used;
    76fc:	689a      	ldr	r2, [r3, #8]
    76fe:	9201      	str	r2, [sp, #4]
    const int wanted_last_time_used = wanted_requirements->last_time_used;
    7700:	68db      	ldr	r3, [r3, #12]
    7702:	9302      	str	r3, [sp, #8]
            prior_entry, wanted_first_time_used, wanted_last_time_used);
    7704:	2100      	movs	r1, #0
    7706:	4620      	mov	r0, r4
    7708:	4d05      	ldr	r5, [pc, #20]	; (7720 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1bc>)
    770a:	47a8      	blx	r5
    770c:	4607      	mov	r7, r0
    770e:	2600      	movs	r6, #0
    7710:	9400      	str	r4, [sp, #0]
    7712:	e7a1      	b.n	7658 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xf4>
}
    7714:	b005      	add	sp, #20
    7716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    771a:	4770      	bx	lr
    771c:	0000742d 	.word	0x0000742d
    7720:	00007505 	.word	0x00007505

00007724 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
    7724:	b570      	push	{r4, r5, r6, lr}
    7726:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
    7728:	4b18      	ldr	r3, [pc, #96]	; (778c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x68>)
    772a:	4798      	blx	r3
  if (buffer_count_ == 0) {
    772c:	68a3      	ldr	r3, [r4, #8]
    772e:	b343      	cbz	r3, 7782 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x5e>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
    7730:	69a1      	ldr	r1, [r4, #24]
    7732:	6a23      	ldr	r3, [r4, #32]
    7734:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7738:	009b      	lsls	r3, r3, #2
  while (entry) {
    773a:	18ce      	adds	r6, r1, r3
    773c:	d023      	beq.n	7786 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x62>
        &requirements_[entry->requirements_index];
    773e:	68e5      	ldr	r5, [r4, #12]
    7740:	6872      	ldr	r2, [r6, #4]
    const size_t current_size = entry->offset + requirements->size;
    7742:	0112      	lsls	r2, r2, #4
    7744:	58a8      	ldr	r0, [r5, r2]
    7746:	58cb      	ldr	r3, [r1, r3]
    7748:	4418      	add	r0, r3
    774a:	2800      	cmp	r0, #0
    774c:	bf38      	it	cc
    774e:	2000      	movcc	r0, #0
    if (entry->next_entry_index == -1) {
    7750:	68b3      	ldr	r3, [r6, #8]
    7752:	f1b3 3fff 	cmp.w	r3, #4294967295
    7756:	d012      	beq.n	777e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x5a>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
    7758:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  while (entry) {
    775c:	eb11 0483 	adds.w	r4, r1, r3, lsl #2
    7760:	d00e      	beq.n	7780 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x5c>
        &requirements_[entry->requirements_index];
    7762:	6862      	ldr	r2, [r4, #4]
    const size_t current_size = entry->offset + requirements->size;
    7764:	0112      	lsls	r2, r2, #4
    7766:	58aa      	ldr	r2, [r5, r2]
    7768:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    776c:	4413      	add	r3, r2
    776e:	4298      	cmp	r0, r3
    7770:	bf38      	it	cc
    7772:	4618      	movcc	r0, r3
    if (entry->next_entry_index == -1) {
    7774:	68a3      	ldr	r3, [r4, #8]
    7776:	f1b3 3fff 	cmp.w	r3, #4294967295
    777a:	d1ed      	bne.n	7758 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
}
    777c:	bd70      	pop	{r4, r5, r6, pc}
    777e:	bd70      	pop	{r4, r5, r6, pc}
    7780:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
    7782:	2000      	movs	r0, #0
    7784:	bd70      	pop	{r4, r5, r6, pc}
  size_t max_size = 0;
    7786:	2000      	movs	r0, #0
    7788:	e7f8      	b.n	777c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x58>
    778a:	bf00      	nop
    778c:	00007565 	.word	0x00007565

00007790 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
    7790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7792:	4605      	mov	r5, r0
    7794:	460f      	mov	r7, r1
    7796:	4614      	mov	r4, r2
    7798:	461e      	mov	r6, r3
  CalculateOffsetsIfNeeded();
    779a:	4b0a      	ldr	r3, [pc, #40]	; (77c4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x34>)
    779c:	4798      	blx	r3
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
    779e:	2c00      	cmp	r4, #0
    77a0:	db08      	blt.n	77b4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    77a2:	68ab      	ldr	r3, [r5, #8]
    77a4:	429c      	cmp	r4, r3
    77a6:	da05      	bge.n	77b4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    TF_LITE_REPORT_ERROR(error_reporter,
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
    77a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    77aa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    77ae:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
    77b0:	2000      	movs	r0, #0
}
    77b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(error_reporter,
    77b4:	68ab      	ldr	r3, [r5, #8]
    77b6:	4622      	mov	r2, r4
    77b8:	4903      	ldr	r1, [pc, #12]	; (77c8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x38>)
    77ba:	4638      	mov	r0, r7
    77bc:	4c03      	ldr	r4, [pc, #12]	; (77cc <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x3c>)
    77be:	47a0      	blx	r4
    return kTfLiteError;
    77c0:	2001      	movs	r0, #1
    77c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    77c4:	00007565 	.word	0x00007565
    77c8:	00021138 	.word	0x00021138
    77cc:	0000118d 	.word	0x0000118d

000077d0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
      : memory_allocator_(memory_allocator) {}

  void* Allocate(size_t size, size_t alignment_hint) override {
    77d0:	b508      	push	{r3, lr}
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
    77d2:	6840      	ldr	r0, [r0, #4]
    77d4:	6803      	ldr	r3, [r0, #0]
    77d6:	68db      	ldr	r3, [r3, #12]
    77d8:	4798      	blx	r3
  }
    77da:	bd08      	pop	{r3, pc}

000077dc <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
    77dc:	4770      	bx	lr

000077de <_ZN6tflite14MicroAllocatorD1Ev>:
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}

MicroAllocator::~MicroAllocator() {}
    77de:	4770      	bx	lr

000077e0 <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:
      memory_allocator_, *subgraph->tensors()->Get(subgraph_idx),
      model->buffers(), error_reporter_, tensor);
  return tensor;
}

void MicroAllocator::ResetTempAllocations() {
    77e0:	b508      	push	{r3, lr}
  memory_allocator_->ResetTempAllocations();
    77e2:	6840      	ldr	r0, [r0, #4]
    77e4:	6803      	ldr	r3, [r0, #0]
    77e6:	695b      	ldr	r3, [r3, #20]
    77e8:	4798      	blx	r3
    77ea:	bd08      	pop	{r3, pc}

000077ec <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
    77ec:	4770      	bx	lr
	...

000077f0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
    77f0:	b510      	push	{r4, lr}
    77f2:	4604      	mov	r4, r0
    77f4:	2108      	movs	r1, #8
    77f6:	4b02      	ldr	r3, [pc, #8]	; (7800 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev+0x10>)
    77f8:	4798      	blx	r3
    77fa:	4620      	mov	r0, r4
    77fc:	bd10      	pop	{r4, pc}
    77fe:	bf00      	nop
    7800:	000091dd 	.word	0x000091dd

00007804 <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
    7804:	b510      	push	{r4, lr}
    7806:	4604      	mov	r4, r0
    7808:	2118      	movs	r1, #24
    780a:	4b02      	ldr	r3, [pc, #8]	; (7814 <_ZN6tflite14MicroAllocatorD0Ev+0x10>)
    780c:	4798      	blx	r3
    780e:	4620      	mov	r0, r4
    7810:	bd10      	pop	{r4, pc}
    7812:	bf00      	nop
    7814:	000091dd 	.word	0x000091dd

00007818 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE>:
    TfLiteContext* context, const SubGraph* subgraph) {
    7818:	b538      	push	{r3, r4, r5, lr}
    781a:	4605      	mov	r5, r0
    781c:	460c      	mov	r4, r1
    return data_ - ReadScalar<soffset_t>(data_);
    781e:	6813      	ldr	r3, [r2, #0]
    7820:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7822:	8819      	ldrh	r1, [r3, #0]
    7824:	2904      	cmp	r1, #4
    7826:	dd10      	ble.n	784a <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x32>
    7828:	8899      	ldrh	r1, [r3, #4]
    auto p = data_ + field_offset;
    782a:	1853      	adds	r3, r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    782c:	b179      	cbz	r1, 784e <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x36>
    782e:	5852      	ldr	r2, [r2, r1]
    7830:	4413      	add	r3, r2
  uoffset_t size() const { return EndianScalar(length_); }
    7832:	6819      	ldr	r1, [r3, #0]
  context->tensors_size = subgraph->tensors()->size();
    7834:	6021      	str	r1, [r4, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
    7836:	6868      	ldr	r0, [r5, #4]
          sizeof(TfLiteTensor) * context->tensors_size, alignof(TfLiteTensor)));
    7838:	6803      	ldr	r3, [r0, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
    783a:	68db      	ldr	r3, [r3, #12]
    783c:	2204      	movs	r2, #4
    783e:	0189      	lsls	r1, r1, #6
    7840:	4798      	blx	r3
  context->tensors =
    7842:	60a0      	str	r0, [r4, #8]
  if (context->tensors == nullptr) {
    7844:	b128      	cbz	r0, 7852 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x3a>
  return kTfLiteOk;
    7846:	2000      	movs	r0, #0
}
    7848:	bd38      	pop	{r3, r4, r5, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    784a:	2300      	movs	r3, #0
    784c:	e7f1      	b.n	7832 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x1a>
    784e:	2300      	movs	r3, #0
    7850:	e7ef      	b.n	7832 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x1a>
    TF_LITE_REPORT_ERROR(
    7852:	6822      	ldr	r2, [r4, #0]
    7854:	0192      	lsls	r2, r2, #6
    7856:	4903      	ldr	r1, [pc, #12]	; (7864 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x4c>)
    7858:	68a8      	ldr	r0, [r5, #8]
    785a:	4b03      	ldr	r3, [pc, #12]	; (7868 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x50>)
    785c:	4798      	blx	r3
    return kTfLiteError;
    785e:	2001      	movs	r0, #1
    7860:	bd38      	pop	{r3, r4, r5, pc}
    7862:	bf00      	nop
    7864:	000216f8 	.word	0x000216f8
    7868:	0000118d 	.word	0x0000118d

0000786c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE>:
    const SubGraph* subgraph, NodeAndRegistration** node_and_registrations) {
    786c:	b570      	push	{r4, r5, r6, lr}
    786e:	4604      	mov	r4, r0
    7870:	4615      	mov	r5, r2
      memory_allocator_->AllocateFromTail(
    7872:	6840      	ldr	r0, [r0, #4]
          alignof(NodeAndRegistration)));
    7874:	6803      	ldr	r3, [r0, #0]
    7876:	68de      	ldr	r6, [r3, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    7878:	680b      	ldr	r3, [r1, #0]
    787a:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    787c:	881a      	ldrh	r2, [r3, #0]
    787e:	2a0a      	cmp	r2, #10
    7880:	dd0e      	ble.n	78a0 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x34>
    7882:	895a      	ldrh	r2, [r3, #10]
    auto p = data_ + field_offset;
    7884:	188b      	adds	r3, r1, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7886:	b16a      	cbz	r2, 78a4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x38>
    7888:	588a      	ldr	r2, [r1, r2]
    788a:	4413      	add	r3, r2
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
    788c:	6819      	ldr	r1, [r3, #0]
    788e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
          alignof(NodeAndRegistration)));
    7892:	2204      	movs	r2, #4
    7894:	00c9      	lsls	r1, r1, #3
    7896:	47b0      	blx	r6
  if (output == nullptr) {
    7898:	b130      	cbz	r0, 78a8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x3c>
  *node_and_registrations = output;
    789a:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
    789c:	2000      	movs	r0, #0
}
    789e:	bd70      	pop	{r4, r5, r6, pc}
    78a0:	2300      	movs	r3, #0
    78a2:	e7f3      	b.n	788c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x20>
    78a4:	2300      	movs	r3, #0
    78a6:	e7f1      	b.n	788c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x20>
    TF_LITE_REPORT_ERROR(
    78a8:	4902      	ldr	r1, [pc, #8]	; (78b4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x48>)
    78aa:	68a0      	ldr	r0, [r4, #8]
    78ac:	4b02      	ldr	r3, [pc, #8]	; (78b8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x4c>)
    78ae:	4798      	blx	r3
    return kTfLiteError;
    78b0:	2001      	movs	r0, #1
    78b2:	bd70      	pop	{r4, r5, r6, pc}
    78b4:	0002173c 	.word	0x0002173c
    78b8:	0000118d 	.word	0x0000118d

000078bc <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE>:
}

TfLiteStatus MicroAllocator::AllocateVariables(TfLiteContext* context,
                                               const SubGraph* subgraph) {
    78bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (size_t i = 0; i < context->tensors_size; ++i) {
    78c0:	680b      	ldr	r3, [r1, #0]
    78c2:	2b00      	cmp	r3, #0
    78c4:	d059      	beq.n	797a <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xbe>
    78c6:	4616      	mov	r6, r2
    78c8:	460f      	mov	r7, r1
    78ca:	4682      	mov	sl, r0
    78cc:	2500      	movs	r5, #0
    78ce:	462c      	mov	r4, r5
    if (subgraph->tensors()->Get(i)->is_variable()) {
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
    78d0:	f04f 0b10 	mov.w	fp, #16
                             "Failed to allocate variable tensor of size %d",
                             context->tensors[i].bytes);
        return kTfLiteError;
      }
    }
    tflite::ResetVariableTensor(&(context->tensors[i]));
    78d4:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 7998 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xdc>
    78d8:	e012      	b.n	7900 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x44>
    78da:	2300      	movs	r3, #0
    78dc:	e01b      	b.n	7916 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x5a>
    78de:	2300      	movs	r3, #0
    78e0:	e019      	b.n	7916 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x5a>
    FLATBUFFERS_ASSERT(i < size());
    78e2:	4b27      	ldr	r3, [pc, #156]	; (7980 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xc4>)
    78e4:	4a27      	ldr	r2, [pc, #156]	; (7984 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xc8>)
    78e6:	f240 1101 	movw	r1, #257	; 0x101
    78ea:	4827      	ldr	r0, [pc, #156]	; (7988 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xcc>)
    78ec:	4c27      	ldr	r4, [pc, #156]	; (798c <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xd0>)
    78ee:	47a0      	blx	r4
    78f0:	68b8      	ldr	r0, [r7, #8]
    78f2:	4428      	add	r0, r5
    78f4:	47c8      	blx	r9
  for (size_t i = 0; i < context->tensors_size; ++i) {
    78f6:	3401      	adds	r4, #1
    78f8:	3540      	adds	r5, #64	; 0x40
    78fa:	683b      	ldr	r3, [r7, #0]
    78fc:	42a3      	cmp	r3, r4
    78fe:	d939      	bls.n	7974 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xb8>
    return data_ - ReadScalar<soffset_t>(data_);
    7900:	6833      	ldr	r3, [r6, #0]
    7902:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7904:	881a      	ldrh	r2, [r3, #0]
    7906:	2a04      	cmp	r2, #4
    7908:	dde7      	ble.n	78da <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x1e>
    790a:	889a      	ldrh	r2, [r3, #4]
    auto p = data_ + field_offset;
    790c:	18b3      	adds	r3, r6, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    790e:	2a00      	cmp	r2, #0
    7910:	d0e5      	beq.n	78de <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x22>
    7912:	58b2      	ldr	r2, [r6, r2]
    7914:	4413      	add	r3, r2
    FLATBUFFERS_ASSERT(i < size());
    7916:	681a      	ldr	r2, [r3, #0]
    7918:	4294      	cmp	r4, r2
    791a:	d2e2      	bcs.n	78e2 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x26>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    791c:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    791e:	eb03 0284 	add.w	r2, r3, r4, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7922:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    7926:	18d1      	adds	r1, r2, r3
    return data_ - ReadScalar<soffset_t>(data_);
    7928:	58d3      	ldr	r3, [r2, r3]
    792a:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    792c:	881a      	ldrh	r2, [r3, #0]
    792e:	2a0e      	cmp	r2, #14
    7930:	ddde      	ble.n	78f0 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x34>
    7932:	89db      	ldrh	r3, [r3, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7934:	2b00      	cmp	r3, #0
    7936:	d0db      	beq.n	78f0 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x34>
    if (subgraph->tensors()->Get(i)->is_variable()) {
    7938:	5ccb      	ldrb	r3, [r1, r3]
    793a:	2b00      	cmp	r3, #0
    793c:	d0d8      	beq.n	78f0 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x34>
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
    793e:	68bb      	ldr	r3, [r7, #8]
    7940:	eb03 0805 	add.w	r8, r3, r5
    7944:	f8da 0004 	ldr.w	r0, [sl, #4]
          context->tensors[i].bytes, kBufferAlignment);
    7948:	6803      	ldr	r3, [r0, #0]
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
    794a:	68db      	ldr	r3, [r3, #12]
    794c:	465a      	mov	r2, fp
    794e:	f8d8 1018 	ldr.w	r1, [r8, #24]
    7952:	4798      	blx	r3
    7954:	f8c8 0004 	str.w	r0, [r8, #4]
      if (context->tensors[i].data.data == nullptr) {
    7958:	68bb      	ldr	r3, [r7, #8]
    795a:	442b      	add	r3, r5
    795c:	685a      	ldr	r2, [r3, #4]
    795e:	2a00      	cmp	r2, #0
    7960:	d1c6      	bne.n	78f0 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x34>
        TF_LITE_REPORT_ERROR(error_reporter_,
    7962:	699a      	ldr	r2, [r3, #24]
    7964:	490a      	ldr	r1, [pc, #40]	; (7990 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xd4>)
    7966:	f8da 0008 	ldr.w	r0, [sl, #8]
    796a:	4b0a      	ldr	r3, [pc, #40]	; (7994 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xd8>)
    796c:	4798      	blx	r3
        return kTfLiteError;
    796e:	2001      	movs	r0, #1
    7970:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }

  return kTfLiteOk;
    7974:	2000      	movs	r0, #0
    7976:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    797a:	2000      	movs	r0, #0
}
    797c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7980:	0001ff50 	.word	0x0001ff50
    7984:	00021208 	.word	0x00021208
    7988:	0001ff5c 	.word	0x0001ff5c
    798c:	000138cd 	.word	0x000138cd
    7990:	00021774 	.word	0x00021774
    7994:	0000118d 	.word	0x0000118d
    7998:	000017dd 	.word	0x000017dd

0000799c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>:
    NodeAndRegistration* node_and_registrations) {
    799c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    79a0:	b08b      	sub	sp, #44	; 0x2c
    79a2:	9002      	str	r0, [sp, #8]
    79a4:	4693      	mov	fp, r2
    79a6:	9305      	str	r3, [sp, #20]
    return data_ - ReadScalar<soffset_t>(data_);
    79a8:	680b      	ldr	r3, [r1, #0]
    79aa:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    79ac:	881a      	ldrh	r2, [r3, #0]
    79ae:	2a06      	cmp	r2, #6
    79b0:	dd0e      	ble.n	79d0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x34>
    79b2:	88db      	ldrh	r3, [r3, #6]
    auto p = data_ + field_offset;
    79b4:	18ca      	adds	r2, r1, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    79b6:	b173      	cbz	r3, 79d6 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x3a>
    79b8:	58cb      	ldr	r3, [r1, r3]
    79ba:	18d3      	adds	r3, r2, r3
    79bc:	9303      	str	r3, [sp, #12]
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
    79be:	9b02      	ldr	r3, [sp, #8]
    79c0:	685b      	ldr	r3, [r3, #4]
      : memory_allocator_(memory_allocator) {}
    79c2:	4aa0      	ldr	r2, [pc, #640]	; (7c44 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2a8>)
    79c4:	9208      	str	r2, [sp, #32]
    79c6:	9309      	str	r3, [sp, #36]	; 0x24
    79c8:	9d14      	ldr	r5, [sp, #80]	; 0x50
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
    79ca:	f04f 0a00 	mov.w	sl, #0
    79ce:	e09f      	b.n	7b10 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x174>
    79d0:	2300      	movs	r3, #0
    79d2:	9303      	str	r3, [sp, #12]
    79d4:	e7f3      	b.n	79be <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22>
    79d6:	2300      	movs	r3, #0
    79d8:	9303      	str	r3, [sp, #12]
    79da:	e7f0      	b.n	79be <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22>
    79dc:	2300      	movs	r3, #0
    79de:	e0a8      	b.n	7b32 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x196>
    79e0:	2300      	movs	r3, #0
    79e2:	e0a6      	b.n	7b32 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x196>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    79e4:	2300      	movs	r3, #0
    79e6:	9301      	str	r3, [sp, #4]
    79e8:	e0ba      	b.n	7b60 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1c4>
    79ea:	2300      	movs	r3, #0
    79ec:	9301      	str	r3, [sp, #4]
    79ee:	e0b7      	b.n	7b60 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1c4>
      TF_LITE_REPORT_ERROR(error_reporter_,
    79f0:	4995      	ldr	r1, [pc, #596]	; (7c48 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ac>)
    79f2:	9b02      	ldr	r3, [sp, #8]
    79f4:	6898      	ldr	r0, [r3, #8]
    79f6:	4b95      	ldr	r3, [pc, #596]	; (7c4c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b0>)
    79f8:	4798      	blx	r3
      return kTfLiteError;
    79fa:	2301      	movs	r3, #1
    79fc:	461c      	mov	r4, r3
    79fe:	e115      	b.n	7c2c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x290>
    7a00:	464e      	mov	r6, r9
    7a02:	4604      	mov	r4, r0
      TF_LITE_REPORT_ERROR(error_reporter_,
    7a04:	9b02      	ldr	r3, [sp, #8]
    7a06:	6898      	ldr	r0, [r3, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    7a08:	f8d9 3000 	ldr.w	r3, [r9]
    7a0c:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7a0e:	881a      	ldrh	r2, [r3, #0]
    7a10:	2a04      	cmp	r2, #4
    7a12:	dd07      	ble.n	7a24 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x88>
    7a14:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7a16:	b16b      	cbz	r3, 7a34 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x98>
    7a18:	f819 3003 	ldrb.w	r3, [r9, r3]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    7a1c:	2b7e      	cmp	r3, #126	; 0x7e
    7a1e:	dd02      	ble.n	7a26 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x8a>
    7a20:	4a8b      	ldr	r2, [pc, #556]	; (7c50 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>)
    7a22:	e003      	b.n	7a2c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x90>
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
    7a24:	2300      	movs	r3, #0
  return EnumNamesBuiltinOperator()[index];
    7a26:	4a8b      	ldr	r2, [pc, #556]	; (7c54 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b8>)
    7a28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7a2c:	498a      	ldr	r1, [pc, #552]	; (7c58 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2bc>)
    7a2e:	4b87      	ldr	r3, [pc, #540]	; (7c4c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b0>)
    7a30:	4798      	blx	r3
      return status;
    7a32:	e0fb      	b.n	7c2c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x290>
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
    7a34:	2300      	movs	r3, #0
    7a36:	e7f6      	b.n	7a26 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x8a>
    7a38:	f8dd 9004 	ldr.w	r9, [sp, #4]
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
    7a3c:	464a      	mov	r2, r9
    7a3e:	4987      	ldr	r1, [pc, #540]	; (7c5c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2c0>)
    7a40:	9b02      	ldr	r3, [sp, #8]
    7a42:	6898      	ldr	r0, [r3, #8]
    7a44:	4b81      	ldr	r3, [pc, #516]	; (7c4c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b0>)
    7a46:	4798      	blx	r3
      return kTfLiteError;
    7a48:	2301      	movs	r3, #1
    7a4a:	461c      	mov	r4, r3
    7a4c:	e0ee      	b.n	7c2c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x290>
    return data_ - ReadScalar<soffset_t>(data_);
    7a4e:	f858 3007 	ldr.w	r3, [r8, r7]
    7a52:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7a54:	881a      	ldrh	r2, [r3, #0]
    7a56:	2a0e      	cmp	r2, #14
    7a58:	f340 80d6 	ble.w	7c08 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x26c>
    7a5c:	89db      	ldrh	r3, [r3, #14]
    auto p = data_ + field_offset;
    7a5e:	18e2      	adds	r2, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7a60:	2b00      	cmp	r3, #0
    7a62:	f000 80d5 	beq.w	7c10 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x274>
    7a66:	58e3      	ldr	r3, [r4, r3]
      if (op->custom_options() != nullptr) {
    7a68:	18d6      	adds	r6, r2, r3
    7a6a:	f000 80d5 	beq.w	7c18 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x27c>
  uoffset_t size() const { return EndianScalar(length_); }
    7a6e:	f852 9003 	ldr.w	r9, [r2, r3]
            reinterpret_cast<const char*>(op->custom_options()->data());
    7a72:	3604      	adds	r6, #4
    7a74:	e017      	b.n	7aa6 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x10a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7a76:	58e3      	ldr	r3, [r4, r3]
      if (op->custom_options() != nullptr) {
    7a78:	42da      	cmn	r2, r3
    7a7a:	f040 80a3 	bne.w	7bc4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x228>
          op_resolver.GetOpDataParser(op_type);
    7a7e:	9805      	ldr	r0, [sp, #20]
    7a80:	6803      	ldr	r3, [r0, #0]
    7a82:	699b      	ldr	r3, [r3, #24]
    7a84:	4798      	blx	r3
      if (parser == nullptr) {
    7a86:	4681      	mov	r9, r0
    7a88:	2800      	cmp	r0, #0
    7a8a:	f000 80ac 	beq.w	7be6 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x24a>
      TF_LITE_ENSURE_STATUS(parser(op, error_reporter_, &builtin_data_allocator,
    7a8e:	ab07      	add	r3, sp, #28
    7a90:	aa08      	add	r2, sp, #32
    7a92:	9902      	ldr	r1, [sp, #8]
    7a94:	6889      	ldr	r1, [r1, #8]
    7a96:	4620      	mov	r0, r4
    7a98:	47c8      	blx	r9
    7a9a:	2800      	cmp	r0, #0
    7a9c:	f040 80c2 	bne.w	7c24 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x288>
    size_t custom_data_size = 0;
    7aa0:	f04f 0900 	mov.w	r9, #0
    const char* custom_data = nullptr;
    7aa4:	464e      	mov	r6, r9
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
    7aa6:	9b02      	ldr	r3, [sp, #8]
    7aa8:	6898      	ldr	r0, [r3, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    7aaa:	f858 3007 	ldr.w	r3, [r8, r7]
    7aae:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7ab0:	881a      	ldrh	r2, [r3, #0]
    7ab2:	2a06      	cmp	r2, #6
    7ab4:	f340 80c1 	ble.w	7c3a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x29e>
    7ab8:	88d9      	ldrh	r1, [r3, #6]
    auto p = data_ + field_offset;
    7aba:	1867      	adds	r7, r4, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7abc:	2900      	cmp	r1, #0
    7abe:	f000 80b9 	beq.w	7c34 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x298>
    7ac2:	5861      	ldr	r1, [r4, r1]
    7ac4:	440f      	add	r7, r1
  TFLITE_DCHECK(error_reporter != nullptr);
    7ac6:	2800      	cmp	r0, #0
    7ac8:	f000 80b9 	beq.w	7c3e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2a2>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    7acc:	2f00      	cmp	r7, #0
    7ace:	f000 80b2 	beq.w	7c36 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x29a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7ad2:	2a08      	cmp	r2, #8
    7ad4:	f340 80a4 	ble.w	7c20 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x284>
    7ad8:	891b      	ldrh	r3, [r3, #8]
    auto p = data_ + field_offset;
    7ada:	18e2      	adds	r2, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7adc:	2b00      	cmp	r3, #0
    7ade:	f000 809f 	beq.w	7c20 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x284>
    7ae2:	58e4      	ldr	r4, [r4, r3]
    7ae4:	3528      	adds	r5, #40	; 0x28
    7ae6:	1914      	adds	r4, r2, r4
    7ae8:	f000 809a 	beq.w	7c20 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x284>
    *node = {};
    7aec:	2224      	movs	r2, #36	; 0x24
    7aee:	2100      	movs	r1, #0
    7af0:	9804      	ldr	r0, [sp, #16]
    7af2:	4b5b      	ldr	r3, [pc, #364]	; (7c60 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2c4>)
    7af4:	4798      	blx	r3
    node->inputs = inputs_array;
    7af6:	f845 7c28 	str.w	r7, [r5, #-40]
    node->outputs = outputs_array;
    7afa:	f845 4c24 	str.w	r4, [r5, #-36]
    node->builtin_data = reinterpret_cast<void*>(builtin_data);
    7afe:	9b07      	ldr	r3, [sp, #28]
    7b00:	f845 3c14 	str.w	r3, [r5, #-20]
    node->custom_initial_data = custom_data;
    7b04:	f845 6c10 	str.w	r6, [r5, #-16]
    node->custom_initial_data_size = custom_data_size;
    7b08:	f845 9c0c 	str.w	r9, [r5, #-12]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
    7b0c:	f10a 0a01 	add.w	sl, sl, #1
    return data_ - ReadScalar<soffset_t>(data_);
    7b10:	f8db 3000 	ldr.w	r3, [fp]
    7b14:	ebab 0303 	sub.w	r3, fp, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7b18:	881a      	ldrh	r2, [r3, #0]
    7b1a:	2a0a      	cmp	r2, #10
    7b1c:	f77f af5e 	ble.w	79dc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x40>
    7b20:	895a      	ldrh	r2, [r3, #10]
    auto p = data_ + field_offset;
    7b22:	eb0b 0302 	add.w	r3, fp, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7b26:	2a00      	cmp	r2, #0
    7b28:	f43f af5a 	beq.w	79e0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x44>
    7b2c:	f85b 2002 	ldr.w	r2, [fp, r2]
    7b30:	4413      	add	r3, r2
    7b32:	681a      	ldr	r2, [r3, #0]
    7b34:	4592      	cmp	sl, r2
    7b36:	d277      	bcs.n	7c28 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x28c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7b38:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    7b3a:	eb03 088a 	add.w	r8, r3, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7b3e:	f853 702a 	ldr.w	r7, [r3, sl, lsl #2]
    7b42:	eb08 0407 	add.w	r4, r8, r7
    return data_ - ReadScalar<soffset_t>(data_);
    7b46:	f858 3007 	ldr.w	r3, [r8, r7]
    7b4a:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7b4c:	881a      	ldrh	r2, [r3, #0]
    7b4e:	2a04      	cmp	r2, #4
    7b50:	f77f af48 	ble.w	79e4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x48>
    7b54:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7b56:	2b00      	cmp	r3, #0
    7b58:	f43f af47 	beq.w	79ea <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x4e>
    7b5c:	58e3      	ldr	r3, [r4, r3]
    7b5e:	9301      	str	r3, [sp, #4]
    if (index >= opcodes->size()) {
    7b60:	9b03      	ldr	r3, [sp, #12]
    7b62:	681b      	ldr	r3, [r3, #0]
    7b64:	9a01      	ldr	r2, [sp, #4]
    7b66:	4293      	cmp	r3, r2
    7b68:	f67f af42 	bls.w	79f0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x54>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7b6c:	9b03      	ldr	r3, [sp, #12]
    7b6e:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    7b70:	9a01      	ldr	r2, [sp, #4]
    7b72:	eb03 0982 	add.w	r9, r3, r2, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b7a:	4499      	add	r9, r3
                                  &(node_and_registrations[i].registration));
    7b7c:	9504      	str	r5, [sp, #16]
    7b7e:	f105 0324 	add.w	r3, r5, #36	; 0x24
    7b82:	9a02      	ldr	r2, [sp, #8]
    7b84:	6892      	ldr	r2, [r2, #8]
    7b86:	9905      	ldr	r1, [sp, #20]
    7b88:	4648      	mov	r0, r9
    7b8a:	4e36      	ldr	r6, [pc, #216]	; (7c64 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2c8>)
    7b8c:	47b0      	blx	r6
    if (status != kTfLiteOk) {
    7b8e:	2800      	cmp	r0, #0
    7b90:	f47f af36 	bne.w	7a00 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x64>
    const auto* registration = node_and_registrations[i].registration;
    7b94:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    if (registration == nullptr) {
    7b96:	2b00      	cmp	r3, #0
    7b98:	f43f af4e 	beq.w	7a38 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x9c>
        static_cast<BuiltinOperator>(registration->builtin_code);
    7b9c:	695e      	ldr	r6, [r3, #20]
    7b9e:	b2f1      	uxtb	r1, r6
    unsigned char* builtin_data = nullptr;
    7ba0:	2300      	movs	r3, #0
    7ba2:	9307      	str	r3, [sp, #28]
    if (op_type == BuiltinOperator_CUSTOM) {
    7ba4:	2920      	cmp	r1, #32
    7ba6:	f43f af52 	beq.w	7a4e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xb2>
    return data_ - ReadScalar<soffset_t>(data_);
    7baa:	f858 3007 	ldr.w	r3, [r8, r7]
    7bae:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7bb0:	881a      	ldrh	r2, [r3, #0]
    7bb2:	2a0e      	cmp	r2, #14
    7bb4:	f77f af63 	ble.w	7a7e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xe2>
    7bb8:	89db      	ldrh	r3, [r3, #14]
    auto p = data_ + field_offset;
    7bba:	18e2      	adds	r2, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7bbc:	2b00      	cmp	r3, #0
    7bbe:	f47f af5a 	bne.w	7a76 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xda>
    7bc2:	e75c      	b.n	7a7e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xe2>
        TF_LITE_REPORT_ERROR(
    7bc4:	9b02      	ldr	r3, [sp, #8]
    7bc6:	6898      	ldr	r0, [r3, #8]
    7bc8:	fa5f f986 	uxtb.w	r9, r6
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    7bcc:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
  return EnumNamesBuiltinOperator()[index];
    7bd0:	bfda      	itte	le
    7bd2:	4b20      	ldrle	r3, [pc, #128]	; (7c54 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b8>)
    7bd4:	f853 2029 	ldrle.w	r2, [r3, r9, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    7bd8:	4a1d      	ldrgt	r2, [pc, #116]	; (7c50 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>)
    7bda:	4923      	ldr	r1, [pc, #140]	; (7c68 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2cc>)
    7bdc:	4b1b      	ldr	r3, [pc, #108]	; (7c4c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b0>)
    7bde:	4798      	blx	r3
        return kTfLiteError;
    7be0:	2301      	movs	r3, #1
    7be2:	461c      	mov	r4, r3
    7be4:	e022      	b.n	7c2c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x290>
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
    7be6:	9b02      	ldr	r3, [sp, #8]
    7be8:	6898      	ldr	r0, [r3, #8]
    7bea:	fa5f f986 	uxtb.w	r9, r6
    7bee:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
  return EnumNamesBuiltinOperator()[index];
    7bf2:	bfda      	itte	le
    7bf4:	4b17      	ldrle	r3, [pc, #92]	; (7c54 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b8>)
    7bf6:	f853 2029 	ldrle.w	r2, [r3, r9, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    7bfa:	4a15      	ldrgt	r2, [pc, #84]	; (7c50 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>)
    7bfc:	491b      	ldr	r1, [pc, #108]	; (7c6c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d0>)
    7bfe:	4b13      	ldr	r3, [pc, #76]	; (7c4c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b0>)
    7c00:	4798      	blx	r3
        return kTfLiteError;
    7c02:	2301      	movs	r3, #1
    7c04:	461c      	mov	r4, r3
    7c06:	e011      	b.n	7c2c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x290>
    size_t custom_data_size = 0;
    7c08:	f04f 0900 	mov.w	r9, #0
    const char* custom_data = nullptr;
    7c0c:	464e      	mov	r6, r9
    7c0e:	e74a      	b.n	7aa6 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x10a>
    size_t custom_data_size = 0;
    7c10:	f04f 0900 	mov.w	r9, #0
    const char* custom_data = nullptr;
    7c14:	464e      	mov	r6, r9
    7c16:	e746      	b.n	7aa6 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x10a>
    size_t custom_data_size = 0;
    7c18:	f04f 0900 	mov.w	r9, #0
    const char* custom_data = nullptr;
    7c1c:	464e      	mov	r6, r9
    7c1e:	e742      	b.n	7aa6 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x10a>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    7c20:	4b13      	ldr	r3, [pc, #76]	; (7c70 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>)
    7c22:	4798      	blx	r3
      TF_LITE_ENSURE_STATUS(parser(op, error_reporter_, &builtin_data_allocator,
    7c24:	4604      	mov	r4, r0
    7c26:	e001      	b.n	7c2c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x290>
  return kTfLiteOk;
    7c28:	2300      	movs	r3, #0
    7c2a:	461c      	mov	r4, r3
}
    7c2c:	4620      	mov	r0, r4
    7c2e:	b00b      	add	sp, #44	; 0x2c
    7c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
    7c34:	b118      	cbz	r0, 7c3e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2a2>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    7c36:	4b0e      	ldr	r3, [pc, #56]	; (7c70 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>)
    7c38:	4798      	blx	r3
  TFLITE_DCHECK(error_reporter != nullptr);
    7c3a:	2800      	cmp	r0, #0
    7c3c:	d1fb      	bne.n	7c36 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x29a>
    7c3e:	4b0c      	ldr	r3, [pc, #48]	; (7c70 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>)
    7c40:	4798      	blx	r3
    7c42:	bf00      	nop
    7c44:	00021308 	.word	0x00021308
    7c48:	000217a4 	.word	0x000217a4
    7c4c:	0000118d 	.word	0x0000118d
    7c50:	0001fe0c 	.word	0x0001fe0c
    7c54:	000200cc 	.word	0x000200cc
    7c58:	000217d0 	.word	0x000217d0
    7c5c:	00021800 	.word	0x00021800
    7c60:	0001483d 	.word	0x0001483d
    7c64:	00001705 	.word	0x00001705
    7c68:	00021824 	.word	0x00021824
    7c6c:	0002186c 	.word	0x0002186c
    7c70:	000138bd 	.word	0x000138bd

00007c74 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
    ErrorReporter* error_reporter, TfLiteTensor* result) {
    7c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7c78:	b085      	sub	sp, #20
    7c7a:	4607      	mov	r7, r0
    7c7c:	460e      	mov	r6, r1
    7c7e:	4690      	mov	r8, r2
    7c80:	461d      	mov	r5, r3
    7c82:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  *result = {};
    7c84:	2240      	movs	r2, #64	; 0x40
    7c86:	2100      	movs	r1, #0
    7c88:	4620      	mov	r0, r4
    7c8a:	4ba6      	ldr	r3, [pc, #664]	; (7f24 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b0>)
    7c8c:	4798      	blx	r3
    return data_ - ReadScalar<soffset_t>(data_);
    7c8e:	6833      	ldr	r3, [r6, #0]
    7c90:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c92:	881a      	ldrh	r2, [r3, #0]
    7c94:	2a06      	cmp	r2, #6
    7c96:	dd0b      	ble.n	7cb0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3c>
    7c98:	88db      	ldrh	r3, [r3, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7c9a:	b15b      	cbz	r3, 7cb4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x40>
    7c9c:	56f0      	ldrsb	r0, [r6, r3]
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    7c9e:	462a      	mov	r2, r5
    7ca0:	4621      	mov	r1, r4
    7ca2:	b2c0      	uxtb	r0, r0
    7ca4:	4ba0      	ldr	r3, [pc, #640]	; (7f28 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b4>)
    7ca6:	4798      	blx	r3
    7ca8:	b130      	cbz	r0, 7cb8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x44>
}
    7caa:	b005      	add	sp, #20
    7cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7cb0:	2000      	movs	r0, #0
    7cb2:	e7f4      	b.n	7c9e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a>
    7cb4:	2000      	movs	r0, #0
    7cb6:	e7f2      	b.n	7c9e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a>
    return data_ - ReadScalar<soffset_t>(data_);
    7cb8:	6833      	ldr	r3, [r6, #0]
    7cba:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7cbc:	881a      	ldrh	r2, [r3, #0]
    7cbe:	2a0e      	cmp	r2, #14
    7cc0:	f340 80f2 	ble.w	7ea8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x234>
    7cc4:	89db      	ldrh	r3, [r3, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7cc6:	2b00      	cmp	r3, #0
    7cc8:	f000 80f0 	beq.w	7eac <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x238>
    7ccc:	5cf3      	ldrb	r3, [r6, r3]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
    7cce:	3300      	adds	r3, #0
    7cd0:	bf18      	it	ne
    7cd2:	2301      	movne	r3, #1
    7cd4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    return data_ - ReadScalar<soffset_t>(data_);
    7cd8:	6833      	ldr	r3, [r6, #0]
    7cda:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7cdc:	881a      	ldrh	r2, [r3, #0]
    7cde:	2a08      	cmp	r2, #8
    7ce0:	f340 80e6 	ble.w	7eb0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x23c>
    7ce4:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7ce6:	2b00      	cmp	r3, #0
    7ce8:	f000 80e4 	beq.w	7eb4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x240>
    7cec:	58f3      	ldr	r3, [r6, r3]
    FLATBUFFERS_ASSERT(i < size());
    7cee:	f8d8 2000 	ldr.w	r2, [r8]
    7cf2:	429a      	cmp	r2, r3
    7cf4:	f240 80e0 	bls.w	7eb8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x244>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7cf8:	f108 0804 	add.w	r8, r8, #4
    p += i * sizeof(uoffset_t);
    7cfc:	eb08 0283 	add.w	r2, r8, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7d00:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
    7d04:	18d1      	adds	r1, r2, r3
    7d06:	d010      	beq.n	7d2a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb6>
    return data_ - ReadScalar<soffset_t>(data_);
    7d08:	58d3      	ldr	r3, [r2, r3]
    7d0a:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7d0c:	881a      	ldrh	r2, [r3, #0]
    7d0e:	2a04      	cmp	r2, #4
    7d10:	dd0b      	ble.n	7d2a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb6>
    7d12:	889b      	ldrh	r3, [r3, #4]
    auto p = data_ + field_offset;
    7d14:	18ca      	adds	r2, r1, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7d16:	b143      	cbz	r3, 7d2a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb6>
    7d18:	58cb      	ldr	r3, [r1, r3]
    if (auto* array = buffer->data()) {
    7d1a:	18d1      	adds	r1, r2, r3
    7d1c:	d005      	beq.n	7d2a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb6>
      if (array->size()) {
    7d1e:	58d3      	ldr	r3, [r2, r3]
    7d20:	b11b      	cbz	r3, 7d2a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb6>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7d22:	3104      	adds	r1, #4
        result->data.data =
    7d24:	6061      	str	r1, [r4, #4]
        result->allocation_type = kTfLiteMmapRo;
    7d26:	2301      	movs	r3, #1
    7d28:	7523      	strb	r3, [r4, #20]
  if (result->data.data == nullptr) {
    7d2a:	6863      	ldr	r3, [r4, #4]
    7d2c:	2b00      	cmp	r3, #0
    7d2e:	f000 80ca 	beq.w	7ec6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x252>
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
    7d32:	462b      	mov	r3, r5
    7d34:	aa03      	add	r2, sp, #12
    7d36:	f104 0118 	add.w	r1, r4, #24
    7d3a:	4630      	mov	r0, r6
    7d3c:	f8df 821c 	ldr.w	r8, [pc, #540]	; 7f5c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2e8>
    7d40:	47c0      	blx	r8
    7d42:	2800      	cmp	r0, #0
    7d44:	d1b1      	bne.n	7caa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    return data_ - ReadScalar<soffset_t>(data_);
    7d46:	6833      	ldr	r3, [r6, #0]
    7d48:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7d4a:	881a      	ldrh	r2, [r3, #0]
    7d4c:	2a04      	cmp	r2, #4
    7d4e:	f340 80bd 	ble.w	7ecc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x258>
    7d52:	889a      	ldrh	r2, [r3, #4]
    auto p = data_ + field_offset;
    7d54:	18b3      	adds	r3, r6, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7d56:	2a00      	cmp	r2, #0
    7d58:	f000 80b8 	beq.w	7ecc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x258>
    7d5c:	58b2      	ldr	r2, [r6, r2]
  if (flatbuffer_tensor.shape() == nullptr) {
    7d5e:	189b      	adds	r3, r3, r2
    7d60:	f000 80b4 	beq.w	7ecc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x258>
  TFLITE_DCHECK(error_reporter != nullptr);
    7d64:	2d00      	cmp	r5, #0
    7d66:	f000 80b4 	beq.w	7ed2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x25e>
    *result = const_cast<kTfLiteArrayType*>(
    7d6a:	60a3      	str	r3, [r4, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    7d6c:	6833      	ldr	r3, [r6, #0]
    7d6e:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7d70:	881a      	ldrh	r2, [r3, #0]
    7d72:	2a0c      	cmp	r2, #12
    7d74:	f340 812e 	ble.w	7fd4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x360>
    7d78:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
    7d7a:	eb06 0a03 	add.w	sl, r6, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7d7e:	2b00      	cmp	r3, #0
    7d80:	f000 812a 	beq.w	7fd8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x364>
    7d84:	f856 9003 	ldr.w	r9, [r6, r3]
      src_quantization->zero_point() &&
    7d88:	eb1a 0609 	adds.w	r6, sl, r9
    7d8c:	f000 8126 	beq.w	7fdc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x368>
    return data_ - ReadScalar<soffset_t>(data_);
    7d90:	f85a 3009 	ldr.w	r3, [sl, r9]
    7d94:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7d96:	8819      	ldrh	r1, [r3, #0]
    7d98:	2908      	cmp	r1, #8
    7d9a:	f340 8121 	ble.w	7fe0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36c>
    7d9e:	891a      	ldrh	r2, [r3, #8]
    auto p = data_ + field_offset;
    7da0:	18b0      	adds	r0, r6, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7da2:	2a00      	cmp	r2, #0
    7da4:	f000 811e 	beq.w	7fe4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x370>
    7da8:	58b2      	ldr	r2, [r6, r2]
  if (src_quantization && src_quantization->scale() &&
    7daa:	42d0      	cmn	r0, r2
    7dac:	f000 811c 	beq.w	7fe8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x374>
    7db0:	5882      	ldr	r2, [r0, r2]
    7db2:	2a00      	cmp	r2, #0
    7db4:	f000 811a 	beq.w	7fec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x378>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7db8:	290a      	cmp	r1, #10
    7dba:	f340 8119 	ble.w	7ff0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x37c>
    7dbe:	895b      	ldrh	r3, [r3, #10]
    auto p = data_ + field_offset;
    7dc0:	18f2      	adds	r2, r6, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7dc2:	2b00      	cmp	r3, #0
    7dc4:	f000 8116 	beq.w	7ff4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x380>
    7dc8:	58f3      	ldr	r3, [r6, r3]
      (src_quantization->scale()->size() > 0) &&
    7dca:	42da      	cmn	r2, r3
    7dcc:	f000 8114 	beq.w	7ff8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x384>
  if (src_quantization && src_quantization->scale() &&
    7dd0:	58d3      	ldr	r3, [r2, r3]
    7dd2:	2b00      	cmp	r3, #0
    7dd4:	f000 8112 	beq.w	7ffc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x388>
    return data_ - ReadScalar<soffset_t>(data_);
    7dd8:	46b0      	mov	r8, r6
    7dda:	f85a 3009 	ldr.w	r3, [sl, r9]
    7dde:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7de0:	2908      	cmp	r1, #8
    7de2:	dd78      	ble.n	7ed6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x262>
    7de4:	891a      	ldrh	r2, [r3, #8]
    auto p = data_ + field_offset;
    7de6:	4603      	mov	r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7de8:	2a00      	cmp	r2, #0
    7dea:	d076      	beq.n	7eda <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x266>
    7dec:	58b2      	ldr	r2, [r6, r2]
    7dee:	4413      	add	r3, r2
    FLATBUFFERS_ASSERT(i < size());
    7df0:	681a      	ldr	r2, [r3, #0]
    7df2:	2a00      	cmp	r2, #0
    7df4:	d073      	beq.n	7ede <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x26a>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    7df6:	685b      	ldr	r3, [r3, #4]
    result->params.scale = src_quantization->scale()->Get(0);
    7df8:	60e3      	str	r3, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    7dfa:	f85a 3009 	ldr.w	r3, [sl, r9]
    7dfe:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7e00:	881a      	ldrh	r2, [r3, #0]
    7e02:	2a0a      	cmp	r2, #10
    7e04:	dd72      	ble.n	7eec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x278>
    7e06:	895a      	ldrh	r2, [r3, #10]
    auto p = data_ + field_offset;
    7e08:	18b3      	adds	r3, r6, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7e0a:	2a00      	cmp	r2, #0
    7e0c:	d070      	beq.n	7ef0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x27c>
    7e0e:	58b2      	ldr	r2, [r6, r2]
    7e10:	4413      	add	r3, r2
    FLATBUFFERS_ASSERT(i < size());
    7e12:	681a      	ldr	r2, [r3, #0]
    7e14:	2a00      	cmp	r2, #0
    7e16:	d06d      	beq.n	7ef4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x280>
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
    7e18:	685b      	ldr	r3, [r3, #4]
    7e1a:	6123      	str	r3, [r4, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    7e1c:	f85a 3009 	ldr.w	r3, [sl, r9]
    7e20:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7e22:	881a      	ldrh	r2, [r3, #0]
    7e24:	2a08      	cmp	r2, #8
    7e26:	dd6c      	ble.n	7f02 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x28e>
    7e28:	891a      	ldrh	r2, [r3, #8]
    auto p = data_ + field_offset;
    7e2a:	18b3      	adds	r3, r6, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7e2c:	2a00      	cmp	r2, #0
    7e2e:	d06a      	beq.n	7f06 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x292>
    7e30:	58b2      	ldr	r2, [r6, r2]
    7e32:	4413      	add	r3, r2
    int channels = src_quantization->scale()->size();
    7e34:	f8d3 b000 	ldr.w	fp, [r3]
                                        alignof(TfLiteAffineQuantization)));
    7e38:	683b      	ldr	r3, [r7, #0]
    7e3a:	68db      	ldr	r3, [r3, #12]
    7e3c:	2204      	movs	r2, #4
    7e3e:	210c      	movs	r1, #12
    7e40:	4638      	mov	r0, r7
    7e42:	4798      	blx	r3
    if (quantization == nullptr) {
    7e44:	9000      	str	r0, [sp, #0]
    7e46:	2800      	cmp	r0, #0
    7e48:	d05f      	beq.n	7f0a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x296>
            TfLiteIntArrayGetSizeInBytes(channels), alignof(TfLiteIntArray)));
    7e4a:	683b      	ldr	r3, [r7, #0]
    7e4c:	68db      	ldr	r3, [r3, #12]
    7e4e:	9301      	str	r3, [sp, #4]
    7e50:	4658      	mov	r0, fp
    7e52:	4b36      	ldr	r3, [pc, #216]	; (7f2c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b8>)
    7e54:	4798      	blx	r3
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
    7e56:	2204      	movs	r2, #4
    7e58:	4601      	mov	r1, r0
    7e5a:	4638      	mov	r0, r7
    7e5c:	9b01      	ldr	r3, [sp, #4]
    7e5e:	4798      	blx	r3
    quantization->zero_point =
    7e60:	9b00      	ldr	r3, [sp, #0]
    7e62:	6058      	str	r0, [r3, #4]
    if (quantization->zero_point == nullptr) {
    7e64:	2800      	cmp	r0, #0
    7e66:	d056      	beq.n	7f16 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
    return data_ - ReadScalar<soffset_t>(data_);
    7e68:	f85a 3009 	ldr.w	r3, [sl, r9]
    7e6c:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7e6e:	881a      	ldrh	r2, [r3, #0]
    7e70:	2a08      	cmp	r2, #8
    7e72:	f340 80c8 	ble.w	8006 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x392>
    7e76:	891a      	ldrh	r2, [r3, #8]
    auto p = data_ + field_offset;
    7e78:	18b3      	adds	r3, r6, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7e7a:	2a00      	cmp	r2, #0
    7e7c:	f000 80c0 	beq.w	8000 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x38c>
    7e80:	58b2      	ldr	r2, [r6, r2]
    7e82:	4413      	add	r3, r2
  TFLITE_DCHECK(error_reporter != nullptr);
    7e84:	2d00      	cmp	r5, #0
    7e86:	f000 80c0 	beq.w	800a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x396>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    7e8a:	2b00      	cmp	r3, #0
    7e8c:	f000 80b9 	beq.w	8002 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x38e>
    *result = const_cast<kTfLiteArrayType*>(
    7e90:	9900      	ldr	r1, [sp, #0]
    7e92:	600b      	str	r3, [r1, #0]
    quantization->zero_point->size = channels;
    7e94:	f8c0 b000 	str.w	fp, [r0]
    int* zero_point_data = quantization->zero_point->data;
    7e98:	6848      	ldr	r0, [r1, #4]
    for (int i = 0; i < channels; i++) {
    7e9a:	f1bb 0f00 	cmp.w	fp, #0
    7e9e:	f340 8084 	ble.w	7faa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x336>
    7ea2:	2100      	movs	r1, #0
    7ea4:	460d      	mov	r5, r1
    7ea6:	e069      	b.n	7f7c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x308>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7ea8:	2300      	movs	r3, #0
    7eaa:	e710      	b.n	7cce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5a>
    7eac:	2300      	movs	r3, #0
    7eae:	e70e      	b.n	7cce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5a>
    7eb0:	2300      	movs	r3, #0
    7eb2:	e71c      	b.n	7cee <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7a>
    7eb4:	2300      	movs	r3, #0
    7eb6:	e71a      	b.n	7cee <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7a>
    FLATBUFFERS_ASSERT(i < size());
    7eb8:	4b1d      	ldr	r3, [pc, #116]	; (7f30 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2bc>)
    7eba:	4a1e      	ldr	r2, [pc, #120]	; (7f34 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c0>)
    7ebc:	f240 1101 	movw	r1, #257	; 0x101
    7ec0:	481d      	ldr	r0, [pc, #116]	; (7f38 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c4>)
    7ec2:	4c1e      	ldr	r4, [pc, #120]	; (7f3c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c8>)
    7ec4:	47a0      	blx	r4
    result->allocation_type = kTfLiteArenaRw;
    7ec6:	2302      	movs	r3, #2
    7ec8:	7523      	strb	r3, [r4, #20]
    7eca:	e732      	b.n	7d32 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xbe>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    7ecc:	4b1c      	ldr	r3, [pc, #112]	; (7f40 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2cc>)
    7ece:	60a3      	str	r3, [r4, #8]
    7ed0:	e74c      	b.n	7d6c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
  TFLITE_DCHECK(error_reporter != nullptr);
    7ed2:	4b1c      	ldr	r3, [pc, #112]	; (7f44 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2d0>)
    7ed4:	4798      	blx	r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ed6:	2300      	movs	r3, #0
    7ed8:	e78a      	b.n	7df0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x17c>
    7eda:	2300      	movs	r3, #0
    7edc:	e788      	b.n	7df0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x17c>
    FLATBUFFERS_ASSERT(i < size());
    7ede:	4b14      	ldr	r3, [pc, #80]	; (7f30 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2bc>)
    7ee0:	4a19      	ldr	r2, [pc, #100]	; (7f48 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2d4>)
    7ee2:	f240 1101 	movw	r1, #257	; 0x101
    7ee6:	4814      	ldr	r0, [pc, #80]	; (7f38 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c4>)
    7ee8:	4c14      	ldr	r4, [pc, #80]	; (7f3c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c8>)
    7eea:	47a0      	blx	r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7eec:	2300      	movs	r3, #0
    7eee:	e790      	b.n	7e12 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x19e>
    7ef0:	2300      	movs	r3, #0
    7ef2:	e78e      	b.n	7e12 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x19e>
    FLATBUFFERS_ASSERT(i < size());
    7ef4:	4b0e      	ldr	r3, [pc, #56]	; (7f30 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2bc>)
    7ef6:	4a15      	ldr	r2, [pc, #84]	; (7f4c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2d8>)
    7ef8:	f240 1101 	movw	r1, #257	; 0x101
    7efc:	480e      	ldr	r0, [pc, #56]	; (7f38 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c4>)
    7efe:	4c0f      	ldr	r4, [pc, #60]	; (7f3c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c8>)
    7f00:	47a0      	blx	r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7f02:	2300      	movs	r3, #0
    7f04:	e796      	b.n	7e34 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1c0>
    7f06:	2300      	movs	r3, #0
    7f08:	e794      	b.n	7e34 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1c0>
      TF_LITE_REPORT_ERROR(error_reporter,
    7f0a:	4911      	ldr	r1, [pc, #68]	; (7f50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2dc>)
    7f0c:	4628      	mov	r0, r5
    7f0e:	4b11      	ldr	r3, [pc, #68]	; (7f54 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2e0>)
    7f10:	4798      	blx	r3
      return kTfLiteError;
    7f12:	2001      	movs	r0, #1
    7f14:	e6c9      	b.n	7caa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
      TF_LITE_REPORT_ERROR(error_reporter,
    7f16:	4910      	ldr	r1, [pc, #64]	; (7f58 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2e4>)
    7f18:	4628      	mov	r0, r5
    7f1a:	4b0e      	ldr	r3, [pc, #56]	; (7f54 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2e0>)
    7f1c:	4798      	blx	r3
      return kTfLiteError;
    7f1e:	2001      	movs	r0, #1
    7f20:	e6c3      	b.n	7caa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    7f22:	bf00      	nop
    7f24:	0001483d 	.word	0x0001483d
    7f28:	00001221 	.word	0x00001221
    7f2c:	0000913d 	.word	0x0000913d
    7f30:	0001ff50 	.word	0x0001ff50
    7f34:	00021318 	.word	0x00021318
    7f38:	0001ff5c 	.word	0x0001ff5c
    7f3c:	000138cd 	.word	0x000138cd
    7f40:	00021410 	.word	0x00021410
    7f44:	000138bd 	.word	0x000138bd
    7f48:	00021414 	.word	0x00021414
    7f4c:	000214dc 	.word	0x000214dc
    7f50:	0002188c 	.word	0x0002188c
    7f54:	0000118d 	.word	0x0000118d
    7f58:	000218bc 	.word	0x000218bc
    7f5c:	00007331 	.word	0x00007331
    7f60:	f858 2002 	ldr.w	r2, [r8, r2]
    7f64:	4413      	add	r3, r2
    FLATBUFFERS_ASSERT(i < size());
    7f66:	681a      	ldr	r2, [r3, #0]
    7f68:	4297      	cmp	r7, r2
    7f6a:	d217      	bcs.n	7f9c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x328>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    7f6c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
    7f70:	685b      	ldr	r3, [r3, #4]
    7f72:	f840 3f04 	str.w	r3, [r0, #4]!
    for (int i = 0; i < channels; i++) {
    7f76:	3101      	adds	r1, #1
    7f78:	458b      	cmp	fp, r1
    7f7a:	d016      	beq.n	7faa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x336>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
    7f7c:	460f      	mov	r7, r1
    return data_ - ReadScalar<soffset_t>(data_);
    7f7e:	6832      	ldr	r2, [r6, #0]
    7f80:	eba8 0202 	sub.w	r2, r8, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7f84:	8813      	ldrh	r3, [r2, #0]
    7f86:	2b0a      	cmp	r3, #10
    7f88:	dd06      	ble.n	7f98 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x324>
    7f8a:	8952      	ldrh	r2, [r2, #10]
    auto p = data_ + field_offset;
    7f8c:	eb08 0302 	add.w	r3, r8, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7f90:	2a00      	cmp	r2, #0
    7f92:	d1e5      	bne.n	7f60 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2ec>
    7f94:	462b      	mov	r3, r5
    7f96:	e7e6      	b.n	7f66 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2f2>
    7f98:	462b      	mov	r3, r5
    7f9a:	e7e4      	b.n	7f66 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2f2>
    FLATBUFFERS_ASSERT(i < size());
    7f9c:	4b1c      	ldr	r3, [pc, #112]	; (8010 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x39c>)
    7f9e:	4a1d      	ldr	r2, [pc, #116]	; (8014 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3a0>)
    7fa0:	f240 1101 	movw	r1, #257	; 0x101
    7fa4:	481c      	ldr	r0, [pc, #112]	; (8018 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3a4>)
    7fa6:	4c1d      	ldr	r4, [pc, #116]	; (801c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3a8>)
    7fa8:	47a0      	blx	r4
    return data_ - ReadScalar<soffset_t>(data_);
    7faa:	f85a 3009 	ldr.w	r3, [sl, r9]
    7fae:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7fb0:	881a      	ldrh	r2, [r3, #0]
    7fb2:	2a10      	cmp	r2, #16
    7fb4:	dd0a      	ble.n	7fcc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x358>
    7fb6:	8a1b      	ldrh	r3, [r3, #16]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7fb8:	b153      	cbz	r3, 7fd0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x35c>
    7fba:	58f3      	ldr	r3, [r6, r3]
    quantization->quantized_dimension = src_quantization->quantized_dimension();
    7fbc:	9900      	ldr	r1, [sp, #0]
    7fbe:	608b      	str	r3, [r1, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
    7fc0:	2301      	movs	r3, #1
    7fc2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    7fc6:	6361      	str	r1, [r4, #52]	; 0x34
  return kTfLiteOk;
    7fc8:	2000      	movs	r0, #0
    7fca:	e66e      	b.n	7caa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    7fcc:	2300      	movs	r3, #0
    7fce:	e7f5      	b.n	7fbc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x348>
    7fd0:	2300      	movs	r3, #0
    7fd2:	e7f3      	b.n	7fbc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x348>
    7fd4:	2000      	movs	r0, #0
    7fd6:	e668      	b.n	7caa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    7fd8:	2000      	movs	r0, #0
    7fda:	e666      	b.n	7caa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    7fdc:	2000      	movs	r0, #0
    7fde:	e664      	b.n	7caa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    7fe0:	2000      	movs	r0, #0
    7fe2:	e662      	b.n	7caa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    7fe4:	2000      	movs	r0, #0
    7fe6:	e660      	b.n	7caa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    7fe8:	2000      	movs	r0, #0
    7fea:	e65e      	b.n	7caa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    7fec:	2000      	movs	r0, #0
    7fee:	e65c      	b.n	7caa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    7ff0:	2000      	movs	r0, #0
    7ff2:	e65a      	b.n	7caa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    7ff4:	2000      	movs	r0, #0
    7ff6:	e658      	b.n	7caa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    7ff8:	2000      	movs	r0, #0
    7ffa:	e656      	b.n	7caa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    7ffc:	2000      	movs	r0, #0
    7ffe:	e654      	b.n	7caa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
  TFLITE_DCHECK(error_reporter != nullptr);
    8000:	b11d      	cbz	r5, 800a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x396>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    8002:	4b07      	ldr	r3, [pc, #28]	; (8020 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3ac>)
    8004:	4798      	blx	r3
  TFLITE_DCHECK(error_reporter != nullptr);
    8006:	2d00      	cmp	r5, #0
    8008:	d1fb      	bne.n	8002 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x38e>
    800a:	4b05      	ldr	r3, [pc, #20]	; (8020 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3ac>)
    800c:	4798      	blx	r3
    800e:	bf00      	nop
    8010:	0001ff50 	.word	0x0001ff50
    8014:	000214dc 	.word	0x000214dc
    8018:	0001ff5c 	.word	0x0001ff5c
    801c:	000138cd 	.word	0x000138cd
    8020:	000138bd 	.word	0x000138bd

00008024 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:
    const Model* model, TfLiteContext* context, const SubGraph* subgraph) {
    8024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8028:	b082      	sub	sp, #8
    802a:	4607      	mov	r7, r0
    802c:	460e      	mov	r6, r1
    802e:	4691      	mov	r9, r2
    8030:	461d      	mov	r5, r3
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    8032:	2400      	movs	r4, #0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8034:	46a2      	mov	sl, r4
        error_reporter_, &context->tensors[i]);
    8036:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80bc <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x98>
    803a:	e00e      	b.n	805a <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x36>
    803c:	4653      	mov	r3, sl
    803e:	e017      	b.n	8070 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4c>
    8040:	4653      	mov	r3, sl
    8042:	e015      	b.n	8070 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4c>
    8044:	58f3      	ldr	r3, [r6, r3]
    8046:	441a      	add	r2, r3
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
    8048:	f8d9 3008 	ldr.w	r3, [r9, #8]
    804c:	eb03 1384 	add.w	r3, r3, r4, lsl #6
        error_reporter_, &context->tensors[i]);
    8050:	9300      	str	r3, [sp, #0]
    8052:	68bb      	ldr	r3, [r7, #8]
    8054:	47c0      	blx	r8
    if (status != kTfLiteOk) {
    8056:	bb10      	cbnz	r0, 809e <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x7a>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    8058:	3401      	adds	r4, #1
    return data_ - ReadScalar<soffset_t>(data_);
    805a:	682b      	ldr	r3, [r5, #0]
    805c:	1aeb      	subs	r3, r5, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    805e:	881a      	ldrh	r2, [r3, #0]
    8060:	2a04      	cmp	r2, #4
    8062:	ddeb      	ble.n	803c <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x18>
    8064:	889a      	ldrh	r2, [r3, #4]
    auto p = data_ + field_offset;
    8066:	18ab      	adds	r3, r5, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8068:	2a00      	cmp	r2, #0
    806a:	d0e9      	beq.n	8040 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1c>
    806c:	58aa      	ldr	r2, [r5, r2]
    806e:	4413      	add	r3, r2
    8070:	681a      	ldr	r2, [r3, #0]
    8072:	4294      	cmp	r4, r2
    8074:	d21a      	bcs.n	80ac <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x88>
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
    8076:	6878      	ldr	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8078:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    807a:	eb03 0284 	add.w	r2, r3, r4, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    807e:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
    8082:	4411      	add	r1, r2
    return data_ - ReadScalar<soffset_t>(data_);
    8084:	6833      	ldr	r3, [r6, #0]
    8086:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8088:	881a      	ldrh	r2, [r3, #0]
    808a:	2a0c      	cmp	r2, #12
    808c:	dd05      	ble.n	809a <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x76>
    808e:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
    8090:	18f2      	adds	r2, r6, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8092:	2b00      	cmp	r3, #0
    8094:	d1d6      	bne.n	8044 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x20>
    8096:	4652      	mov	r2, sl
    8098:	e7d6      	b.n	8048 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x24>
    809a:	4652      	mov	r2, sl
    809c:	e7d4      	b.n	8048 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x24>
      TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
    809e:	4622      	mov	r2, r4
    80a0:	4904      	ldr	r1, [pc, #16]	; (80b4 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x90>)
    80a2:	68b8      	ldr	r0, [r7, #8]
    80a4:	4b04      	ldr	r3, [pc, #16]	; (80b8 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x94>)
    80a6:	4798      	blx	r3
      return kTfLiteError;
    80a8:	2001      	movs	r0, #1
    80aa:	e000      	b.n	80ae <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x8a>
  return kTfLiteOk;
    80ac:	2000      	movs	r0, #0
}
    80ae:	b002      	add	sp, #8
    80b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    80b4:	000218ec 	.word	0x000218ec
    80b8:	0000118d 	.word	0x0000118d
    80bc:	00007c75 	.word	0x00007c75

000080c0 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
    80c0:	b538      	push	{r3, r4, r5, lr}
  TFLITE_DCHECK(memory_allocator != nullptr);
    80c2:	b198      	cbz	r0, 80ec <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x2c>
    80c4:	460d      	mov	r5, r1
    80c6:	4604      	mov	r4, r0
  TFLITE_DCHECK(error_reporter != nullptr);
    80c8:	b191      	cbz	r1, 80f0 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x30>
      sizeof(MicroAllocator), alignof(MicroAllocator));
    80ca:	6803      	ldr	r3, [r0, #0]
    80cc:	68db      	ldr	r3, [r3, #12]
    80ce:	2204      	movs	r2, #4
    80d0:	2118      	movs	r1, #24
    80d2:	4798      	blx	r3
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
    80d4:	4603      	mov	r3, r0
    80d6:	b138      	cbz	r0, 80e8 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x28>
      model_is_allocating_(false) {}
    80d8:	4a06      	ldr	r2, [pc, #24]	; (80f4 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x34>)
    80da:	6002      	str	r2, [r0, #0]
    80dc:	6044      	str	r4, [r0, #4]
    80de:	6085      	str	r5, [r0, #8]
    80e0:	2200      	movs	r2, #0
    80e2:	7302      	strb	r2, [r0, #12]
    80e4:	6102      	str	r2, [r0, #16]
    80e6:	6142      	str	r2, [r0, #20]
}
    80e8:	4618      	mov	r0, r3
    80ea:	bd38      	pop	{r3, r4, r5, pc}
  TFLITE_DCHECK(memory_allocator != nullptr);
    80ec:	4b02      	ldr	r3, [pc, #8]	; (80f8 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x38>)
    80ee:	4798      	blx	r3
  TFLITE_DCHECK(error_reporter != nullptr);
    80f0:	4b01      	ldr	r3, [pc, #4]	; (80f8 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x38>)
    80f2:	4798      	blx	r3
    80f4:	000215bc 	.word	0x000215bc
    80f8:	000138bd 	.word	0x000138bd

000080fc <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
    80fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80fe:	4604      	mov	r4, r0
    8100:	460f      	mov	r7, r1
    8102:	4616      	mov	r6, r2
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
    8104:	2110      	movs	r1, #16
    8106:	4b0a      	ldr	r3, [pc, #40]	; (8130 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x34>)
    8108:	4798      	blx	r3
    810a:	4605      	mov	r5, r0
  if (aligned_arena != tensor_arena) {
    810c:	4284      	cmp	r4, r0
    810e:	d004      	beq.n	811a <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x1e>
    TF_LITE_REPORT_ERROR(
    8110:	1b02      	subs	r2, r0, r4
    8112:	4908      	ldr	r1, [pc, #32]	; (8134 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x38>)
    8114:	4630      	mov	r0, r6
    8116:	4b08      	ldr	r3, [pc, #32]	; (8138 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x3c>)
    8118:	4798      	blx	r3
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
    811a:	19e2      	adds	r2, r4, r7
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
    811c:	1b52      	subs	r2, r2, r5
    811e:	4629      	mov	r1, r5
    8120:	4630      	mov	r0, r6
    8122:	4b06      	ldr	r3, [pc, #24]	; (813c <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x40>)
    8124:	4798      	blx	r3
                error_reporter);
    8126:	4631      	mov	r1, r6
    8128:	4b05      	ldr	r3, [pc, #20]	; (8140 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x44>)
    812a:	4798      	blx	r3
}
    812c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    812e:	bf00      	nop
    8130:	000072a9 	.word	0x000072a9
    8134:	0002190c 	.word	0x0002190c
    8138:	0000118d 	.word	0x0000118d
    813c:	000090c9 	.word	0x000090c9
    8140:	000080c1 	.word	0x000080c1

00008144 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>:
                                                      void** ptr) {
    8144:	b570      	push	{r4, r5, r6, lr}
    8146:	4604      	mov	r4, r0
    8148:	460e      	mov	r6, r1
    814a:	4615      	mov	r5, r2
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
    814c:	6840      	ldr	r0, [r0, #4]
    814e:	6803      	ldr	r3, [r0, #0]
    8150:	68db      	ldr	r3, [r3, #12]
    8152:	2210      	movs	r2, #16
    8154:	4798      	blx	r3
  if (data == nullptr) {
    8156:	b110      	cbz	r0, 815e <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x1a>
  (*ptr) = data;
    8158:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
    815a:	2000      	movs	r0, #0
}
    815c:	bd70      	pop	{r4, r5, r6, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    815e:	4632      	mov	r2, r6
    8160:	4902      	ldr	r1, [pc, #8]	; (816c <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x28>)
    8162:	68a0      	ldr	r0, [r4, #8]
    8164:	4b02      	ldr	r3, [pc, #8]	; (8170 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x2c>)
    8166:	4798      	blx	r3
    return kTfLiteError;
    8168:	2001      	movs	r0, #1
    816a:	bd70      	pop	{r4, r5, r6, pc}
    816c:	00021978 	.word	0x00021978
    8170:	0000118d 	.word	0x0000118d

00008174 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>:
                                                         int* buffer_idx) {
    8174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8178:	4604      	mov	r4, r0
    817a:	460e      	mov	r6, r1
    817c:	4690      	mov	r8, r2
    817e:	461f      	mov	r7, r3
  if (scratch_buffer_handles_ != nullptr &&
    8180:	6905      	ldr	r5, [r0, #16]
    8182:	b15d      	cbz	r5, 819c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x28>
          memory_allocator_->GetTail()) {
    8184:	6840      	ldr	r0, [r0, #4]
    8186:	4b14      	ldr	r3, [pc, #80]	; (81d8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x64>)
    8188:	4798      	blx	r3
  if (scratch_buffer_handles_ != nullptr &&
    818a:	4285      	cmp	r5, r0
    818c:	d006      	beq.n	819c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x28>
    TF_LITE_REPORT_ERROR(error_reporter_,
    818e:	4913      	ldr	r1, [pc, #76]	; (81dc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x68>)
    8190:	68a0      	ldr	r0, [r4, #8]
    8192:	4b13      	ldr	r3, [pc, #76]	; (81e0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x6c>)
    8194:	4798      	blx	r3
    return kTfLiteError;
    8196:	2001      	movs	r0, #1
    8198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          memory_allocator_->AllocateFromTail(
    819c:	6860      	ldr	r0, [r4, #4]
              alignof(internal::ScratchBufferHandle)));
    819e:	6803      	ldr	r3, [r0, #0]
    81a0:	68db      	ldr	r3, [r3, #12]
    81a2:	2204      	movs	r2, #4
    81a4:	210c      	movs	r1, #12
    81a6:	4798      	blx	r3
  if (handle == nullptr) {
    81a8:	4603      	mov	r3, r0
    81aa:	b160      	cbz	r0, 81c6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x52>
  *handle = {};
    81ac:	2000      	movs	r0, #0
    81ae:	6018      	str	r0, [r3, #0]
  handle->bytes = bytes;
    81b0:	f8c3 8004 	str.w	r8, [r3, #4]
  handle->node_idx = node_id;
    81b4:	609e      	str	r6, [r3, #8]
  *buffer_idx = scratch_buffer_count_;
    81b6:	6962      	ldr	r2, [r4, #20]
    81b8:	603a      	str	r2, [r7, #0]
  scratch_buffer_count_ += 1;
    81ba:	6962      	ldr	r2, [r4, #20]
    81bc:	3201      	adds	r2, #1
    81be:	6162      	str	r2, [r4, #20]
  scratch_buffer_handles_ = handle;
    81c0:	6123      	str	r3, [r4, #16]
}
    81c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    81c6:	4632      	mov	r2, r6
    81c8:	4906      	ldr	r1, [pc, #24]	; (81e4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x70>)
    81ca:	68a0      	ldr	r0, [r4, #8]
    81cc:	4b04      	ldr	r3, [pc, #16]	; (81e0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x6c>)
    81ce:	4798      	blx	r3
    return kTfLiteError;
    81d0:	2001      	movs	r0, #1
    81d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    81d6:	bf00      	nop
    81d8:	00009131 	.word	0x00009131
    81dc:	000219a8 	.word	0x000219a8
    81e0:	0000118d 	.word	0x0000118d
    81e4:	00021a0c 	.word	0x00021a0c

000081e8 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>:
  if (static_cast<size_t>(buffer_idx) >= scratch_buffer_count_) {
    81e8:	6943      	ldr	r3, [r0, #20]
    81ea:	428b      	cmp	r3, r1
    81ec:	d908      	bls.n	8200 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x18>
  return scratch_buffer_handles_[scratch_buffer_count_ - buffer_idx - 1].data;
    81ee:	1a5b      	subs	r3, r3, r1
    81f0:	6901      	ldr	r1, [r0, #16]
    81f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    81f6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    81fa:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    81fe:	4770      	bx	lr
void* MicroAllocator::GetScratchBuffer(int buffer_idx) const {
    8200:	b510      	push	{r4, lr}
    8202:	460a      	mov	r2, r1
    TF_LITE_REPORT_ERROR(error_reporter_,
    8204:	4902      	ldr	r1, [pc, #8]	; (8210 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x28>)
    8206:	6880      	ldr	r0, [r0, #8]
    8208:	4c02      	ldr	r4, [pc, #8]	; (8214 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x2c>)
    820a:	47a0      	blx	r4
    return nullptr;
    820c:	2000      	movs	r0, #0
    820e:	bd10      	pop	{r4, pc}
    8210:	00021a44 	.word	0x00021a44
    8214:	0000118d 	.word	0x0000118d

00008218 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>:

ErrorReporter* MicroAllocator::error_reporter() const {
  return error_reporter_;
}

const SubGraph* MicroAllocator::GetSubGraphFromModel(const Model* model) {
    8218:	b508      	push	{r3, lr}
    return data_ - ReadScalar<soffset_t>(data_);
    821a:	680b      	ldr	r3, [r1, #0]
    821c:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    821e:	881a      	ldrh	r2, [r3, #0]
    8220:	2a08      	cmp	r2, #8
    8222:	dd0b      	ble.n	823c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x24>
    8224:	891a      	ldrh	r2, [r3, #8]
    auto p = data_ + field_offset;
    8226:	188b      	adds	r3, r1, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8228:	b152      	cbz	r2, 8240 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x28>
    822a:	588a      	ldr	r2, [r1, r2]
    822c:	4413      	add	r3, r2
  auto* subgraphs = model->subgraphs();
  if (subgraphs->size() != 1) {
    822e:	681a      	ldr	r2, [r3, #0]
    8230:	2a01      	cmp	r2, #1
    8232:	d107      	bne.n	8244 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x2c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8234:	1d18      	adds	r0, r3, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8236:	685b      	ldr	r3, [r3, #4]
    8238:	4418      	add	r0, r3
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Only 1 subgraph is currently supported.\n");
    return nullptr;
  }
  return (*subgraphs)[0];
}
    823a:	bd08      	pop	{r3, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    823c:	2300      	movs	r3, #0
    823e:	e7f6      	b.n	822e <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x16>
    8240:	2300      	movs	r3, #0
    8242:	e7f4      	b.n	822e <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x16>
    TF_LITE_REPORT_ERROR(error_reporter_,
    8244:	4902      	ldr	r1, [pc, #8]	; (8250 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x38>)
    8246:	6880      	ldr	r0, [r0, #8]
    8248:	4b02      	ldr	r3, [pc, #8]	; (8254 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x3c>)
    824a:	4798      	blx	r3
    return nullptr;
    824c:	2000      	movs	r0, #0
    824e:	bd08      	pop	{r3, pc}
    8250:	00021a70 	.word	0x00021a70
    8254:	0000118d 	.word	0x0000118d

00008258 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>:
    NodeAndRegistration** node_and_registrations) {
    8258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    825c:	b083      	sub	sp, #12
  TFLITE_DCHECK(model != nullptr);
    825e:	2900      	cmp	r1, #0
    8260:	d031      	beq.n	82c6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x6e>
    8262:	4604      	mov	r4, r0
    8264:	4615      	mov	r5, r2
    8266:	461f      	mov	r7, r3
    8268:	460e      	mov	r6, r1
  TFLITE_DCHECK(context != nullptr);
    826a:	2a00      	cmp	r2, #0
    826c:	d02d      	beq.n	82ca <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x72>
  if (model_is_allocating_) {
    826e:	7b03      	ldrb	r3, [r0, #12]
    8270:	2b00      	cmp	r3, #0
    8272:	d12c      	bne.n	82ce <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x76>
  const SubGraph* subgraph = GetSubGraphFromModel(model);
    8274:	4b1b      	ldr	r3, [pc, #108]	; (82e4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x8c>)
    8276:	4798      	blx	r3
  TFLITE_DCHECK(subgraph != nullptr);
    8278:	4680      	mov	r8, r0
    827a:	2800      	cmp	r0, #0
    827c:	d02f      	beq.n	82de <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x86>
  model_is_allocating_ = true;
    827e:	2301      	movs	r3, #1
    8280:	7323      	strb	r3, [r4, #12]
  TF_LITE_ENSURE_STATUS(AllocateTfLiteTensorArray(context, subgraph));
    8282:	6823      	ldr	r3, [r4, #0]
    8284:	691b      	ldr	r3, [r3, #16]
    8286:	4602      	mov	r2, r0
    8288:	4629      	mov	r1, r5
    828a:	4620      	mov	r0, r4
    828c:	4798      	blx	r3
    828e:	bb18      	cbnz	r0, 82d8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x80>
  TF_LITE_ENSURE_STATUS(
    8290:	6823      	ldr	r3, [r4, #0]
    8292:	f8d3 9014 	ldr.w	r9, [r3, #20]
    8296:	4643      	mov	r3, r8
    8298:	462a      	mov	r2, r5
    829a:	4631      	mov	r1, r6
    829c:	4620      	mov	r0, r4
    829e:	47c8      	blx	r9
    82a0:	b9d0      	cbnz	r0, 82d8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x80>
  TF_LITE_ENSURE_STATUS(
    82a2:	6823      	ldr	r3, [r4, #0]
    82a4:	699b      	ldr	r3, [r3, #24]
    82a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    82a8:	4641      	mov	r1, r8
    82aa:	4620      	mov	r0, r4
    82ac:	4798      	blx	r3
    82ae:	b998      	cbnz	r0, 82d8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x80>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
    82b0:	6823      	ldr	r3, [r4, #0]
    82b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    82b4:	6812      	ldr	r2, [r2, #0]
    82b6:	9200      	str	r2, [sp, #0]
    82b8:	69dd      	ldr	r5, [r3, #28]
    82ba:	463b      	mov	r3, r7
    82bc:	4642      	mov	r2, r8
    82be:	4631      	mov	r1, r6
    82c0:	4620      	mov	r0, r4
    82c2:	47a8      	blx	r5
    82c4:	e008      	b.n	82d8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x80>
  TFLITE_DCHECK(model != nullptr);
    82c6:	4b08      	ldr	r3, [pc, #32]	; (82e8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x90>)
    82c8:	4798      	blx	r3
  TFLITE_DCHECK(context != nullptr);
    82ca:	4b07      	ldr	r3, [pc, #28]	; (82e8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x90>)
    82cc:	4798      	blx	r3
    TF_LITE_REPORT_ERROR(error_reporter_,
    82ce:	4907      	ldr	r1, [pc, #28]	; (82ec <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x94>)
    82d0:	6880      	ldr	r0, [r0, #8]
    82d2:	4b07      	ldr	r3, [pc, #28]	; (82f0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x98>)
    82d4:	4798      	blx	r3
    return kTfLiteError;
    82d6:	2001      	movs	r0, #1
}
    82d8:	b003      	add	sp, #12
    82da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  TFLITE_DCHECK(subgraph != nullptr);
    82de:	4b02      	ldr	r3, [pc, #8]	; (82e8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x90>)
    82e0:	4798      	blx	r3
    82e2:	bf00      	nop
    82e4:	00008219 	.word	0x00008219
    82e8:	000138bd 	.word	0x000138bd
    82ec:	00021a9c 	.word	0x00021a9c
    82f0:	0000118d 	.word	0x0000118d

000082f4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>:
                                                   TfLiteContext* context) {
    82f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82f8:	4604      	mov	r4, r0
  if (!model_is_allocating_) {
    82fa:	7b03      	ldrb	r3, [r0, #12]
    82fc:	b17b      	cbz	r3, 831e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x2a>
    82fe:	460d      	mov	r5, r1
    8300:	4616      	mov	r6, r2
  const SubGraph* subgraph = GetSubGraphFromModel(model);
    8302:	4b12      	ldr	r3, [pc, #72]	; (834c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x58>)
    8304:	4798      	blx	r3
  TFLITE_DCHECK(subgraph != nullptr);
    8306:	4680      	mov	r8, r0
    8308:	b180      	cbz	r0, 832c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x38>
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, context, subgraph));
    830a:	6823      	ldr	r3, [r4, #0]
    830c:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    830e:	4603      	mov	r3, r0
    8310:	4632      	mov	r2, r6
    8312:	4629      	mov	r1, r5
    8314:	4620      	mov	r0, r4
    8316:	47b8      	blx	r7
    8318:	b150      	cbz	r0, 8330 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x3c>
    831a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    831e:	490c      	ldr	r1, [pc, #48]	; (8350 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x5c>)
    8320:	6880      	ldr	r0, [r0, #8]
    8322:	4b0c      	ldr	r3, [pc, #48]	; (8354 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x60>)
    8324:	4798      	blx	r3
    return kTfLiteError;
    8326:	2001      	movs	r0, #1
    8328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_DCHECK(subgraph != nullptr);
    832c:	4b0a      	ldr	r3, [pc, #40]	; (8358 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x64>)
    832e:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(AllocateVariables(context, subgraph));
    8330:	6823      	ldr	r3, [r4, #0]
    8332:	6a1b      	ldr	r3, [r3, #32]
    8334:	4642      	mov	r2, r8
    8336:	4631      	mov	r1, r6
    8338:	4620      	mov	r0, r4
    833a:	4798      	blx	r3
    833c:	b918      	cbnz	r0, 8346 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x52>
  model_is_allocating_ = false;
    833e:	2200      	movs	r2, #0
    8340:	7322      	strb	r2, [r4, #12]
  return kTfLiteOk;
    8342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
    8346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    834a:	bf00      	nop
    834c:	00008219 	.word	0x00008219
    8350:	00021af4 	.word	0x00021af4
    8354:	0000118d 	.word	0x0000118d
    8358:	000138bd 	.word	0x000138bd

0000835c <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi>:
                                                   int subgraph_idx) {
    835c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8360:	b082      	sub	sp, #8
    8362:	4605      	mov	r5, r0
    8364:	460c      	mov	r4, r1
    8366:	4617      	mov	r7, r2
  const SubGraph* subgraph = GetSubGraphFromModel(model);
    8368:	4b23      	ldr	r3, [pc, #140]	; (83f8 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0x9c>)
    836a:	4798      	blx	r3
  TFLITE_DCHECK(subgraph != nullptr);
    836c:	2800      	cmp	r0, #0
    836e:	d031      	beq.n	83d4 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0x78>
    8370:	4680      	mov	r8, r0
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    8372:	6868      	ldr	r0, [r5, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
    8374:	6803      	ldr	r3, [r0, #0]
    8376:	691b      	ldr	r3, [r3, #16]
    8378:	2204      	movs	r2, #4
    837a:	2140      	movs	r1, #64	; 0x40
    837c:	4798      	blx	r3
    837e:	4606      	mov	r6, r0
  internal::InitializeTfLiteTensorFromFlatbuffer(
    8380:	6868      	ldr	r0, [r5, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    8382:	f8d8 3000 	ldr.w	r3, [r8]
    8386:	eba8 0303 	sub.w	r3, r8, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    838a:	881a      	ldrh	r2, [r3, #0]
    838c:	2a04      	cmp	r2, #4
    838e:	dd23      	ble.n	83d8 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0x7c>
    8390:	889a      	ldrh	r2, [r3, #4]
    auto p = data_ + field_offset;
    8392:	eb08 0302 	add.w	r3, r8, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8396:	b30a      	cbz	r2, 83dc <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0x80>
    8398:	f858 2002 	ldr.w	r2, [r8, r2]
    839c:	4413      	add	r3, r2
    FLATBUFFERS_ASSERT(i < size());
    839e:	681a      	ldr	r2, [r3, #0]
    83a0:	4297      	cmp	r7, r2
    83a2:	d21d      	bcs.n	83e0 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0x84>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    83a4:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    83a6:	eb03 0287 	add.w	r2, r3, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    83aa:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
    83ae:	4411      	add	r1, r2
    return data_ - ReadScalar<soffset_t>(data_);
    83b0:	6823      	ldr	r3, [r4, #0]
    83b2:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    83b4:	881a      	ldrh	r2, [r3, #0]
    83b6:	2a0c      	cmp	r2, #12
    83b8:	dd19      	ble.n	83ee <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0x92>
    83ba:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
    83bc:	18e2      	adds	r2, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    83be:	b1c3      	cbz	r3, 83f2 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0x96>
    83c0:	58e3      	ldr	r3, [r4, r3]
    83c2:	441a      	add	r2, r3
      model->buffers(), error_reporter_, tensor);
    83c4:	68ab      	ldr	r3, [r5, #8]
    83c6:	9600      	str	r6, [sp, #0]
    83c8:	4c0c      	ldr	r4, [pc, #48]	; (83fc <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0xa0>)
    83ca:	47a0      	blx	r4
}
    83cc:	4630      	mov	r0, r6
    83ce:	b002      	add	sp, #8
    83d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_DCHECK(subgraph != nullptr);
    83d4:	4b0a      	ldr	r3, [pc, #40]	; (8400 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0xa4>)
    83d6:	4798      	blx	r3
    83d8:	2300      	movs	r3, #0
    83da:	e7e0      	b.n	839e <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0x42>
    83dc:	2300      	movs	r3, #0
    83de:	e7de      	b.n	839e <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0x42>
    FLATBUFFERS_ASSERT(i < size());
    83e0:	4b08      	ldr	r3, [pc, #32]	; (8404 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0xa8>)
    83e2:	4a09      	ldr	r2, [pc, #36]	; (8408 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0xac>)
    83e4:	f240 1101 	movw	r1, #257	; 0x101
    83e8:	4808      	ldr	r0, [pc, #32]	; (840c <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0xb0>)
    83ea:	4c09      	ldr	r4, [pc, #36]	; (8410 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0xb4>)
    83ec:	47a0      	blx	r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    83ee:	2200      	movs	r2, #0
    83f0:	e7e8      	b.n	83c4 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0x68>
    83f2:	2200      	movs	r2, #0
    83f4:	e7e6      	b.n	83c4 <_ZN6tflite14MicroAllocator20AllocateTfLiteTensorEPKNS_5ModelEi+0x68>
    83f6:	bf00      	nop
    83f8:	00008219 	.word	0x00008219
    83fc:	00007c75 	.word	0x00007c75
    8400:	000138bd 	.word	0x000138bd
    8404:	0001ff50 	.word	0x0001ff50
    8408:	00021208 	.word	0x00021208
    840c:	0001ff5c 	.word	0x0001ff5c
    8410:	000138cd 	.word	0x000138cd

00008414 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(const Model* model,
                                                    TfLiteContext* context,
                                                    const SubGraph* subgraph) {
    8414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8418:	b0a1      	sub	sp, #132	; 0x84
    841a:	4607      	mov	r7, r0
    841c:	9003      	str	r0, [sp, #12]
    841e:	460c      	mov	r4, r1
    8420:	9208      	str	r2, [sp, #32]
    8422:	469a      	mov	sl, r3
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // thrown away when the child allocator (tmp_allocator) goes out of scope.
  {
    SimpleMemoryAllocator tmp_allocator(error_reporter_,
                                        memory_allocator_->GetHead(),
                                        memory_allocator_->GetTail());
    8424:	6885      	ldr	r5, [r0, #8]
    8426:	6840      	ldr	r0, [r0, #4]
    8428:	4bab      	ldr	r3, [pc, #684]	; (86d8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2c4>)
    842a:	4798      	blx	r3
    842c:	4606      	mov	r6, r0
    842e:	6878      	ldr	r0, [r7, #4]
    8430:	4baa      	ldr	r3, [pc, #680]	; (86dc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2c8>)
    8432:	4798      	blx	r3
    8434:	4603      	mov	r3, r0
    8436:	4632      	mov	r2, r6
    8438:	4629      	mov	r1, r5
    843a:	a80e      	add	r0, sp, #56	; 0x38
    843c:	4da8      	ldr	r5, [pc, #672]	; (86e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2cc>)
    843e:	47a8      	blx	r5

    AllocationInfoBuilder builder(error_reporter_, &tmp_allocator);
    8440:	68bb      	ldr	r3, [r7, #8]
    8442:	9305      	str	r3, [sp, #20]
    return data_ - ReadScalar<soffset_t>(data_);
    8444:	46d3      	mov	fp, sl
    8446:	f8da 3000 	ldr.w	r3, [sl]
    844a:	ebaa 0303 	sub.w	r3, sl, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    844e:	881a      	ldrh	r2, [r3, #0]
    8450:	2a04      	cmp	r2, #4
    8452:	dd3a      	ble.n	84ca <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xb6>
    8454:	889a      	ldrh	r2, [r3, #4]
    auto p = data_ + field_offset;
    8456:	eb0a 0302 	add.w	r3, sl, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    845a:	2a00      	cmp	r2, #0
    845c:	d037      	beq.n	84ce <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xba>
    845e:	f85a 2002 	ldr.w	r2, [sl, r2]
    8462:	4413      	add	r3, r2
  uoffset_t size() const { return EndianScalar(length_); }
    8464:	681b      	ldr	r3, [r3, #0]
    8466:	461a      	mov	r2, r3
    8468:	9304      	str	r3, [sp, #16]
  size_t Size() const { return tensor_count_ + buffer_count_; }
    846a:	9b03      	ldr	r3, [sp, #12]
    846c:	695b      	ldr	r3, [r3, #20]
    846e:	18d3      	adds	r3, r2, r3
    8470:	9307      	str	r3, [sp, #28]
  size_t bytes = sizeof(AllocationInfo) * Size();
    8472:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8476:	00db      	lsls	r3, r3, #3
    8478:	4619      	mov	r1, r3
    847a:	9306      	str	r3, [sp, #24]
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
    847c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    847e:	68db      	ldr	r3, [r3, #12]
    8480:	2204      	movs	r2, #4
    8482:	a80e      	add	r0, sp, #56	; 0x38
    8484:	4798      	blx	r3
  if (info_ == nullptr) {
    8486:	4606      	mov	r6, r0
    8488:	b318      	cbz	r0, 84d2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xbe>
    return data_ - ReadScalar<soffset_t>(data_);
    848a:	46a1      	mov	r9, r4
    848c:	6823      	ldr	r3, [r4, #0]
    848e:	1ae3      	subs	r3, r4, r3
    8490:	461a      	mov	r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8492:	881b      	ldrh	r3, [r3, #0]
    8494:	4618      	mov	r0, r3
    8496:	2b10      	cmp	r3, #16
    8498:	f340 8282 	ble.w	89a0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x58c>
    849c:	4611      	mov	r1, r2
    849e:	8a13      	ldrh	r3, [r2, #16]
    auto p = data_ + field_offset;
    84a0:	18e2      	adds	r2, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    84a2:	2b00      	cmp	r3, #0
    84a4:	f000 8094 	beq.w	85d0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1bc>
    84a8:	58e3      	ldr	r3, [r4, r3]
  if (model->metadata()) {
    84aa:	42da      	cmn	r2, r3
    84ac:	f000 828a 	beq.w	89c4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x5b0>
    84b0:	2300      	movs	r3, #0
    84b2:	9302      	str	r3, [sp, #8]
    84b4:	461c      	mov	r4, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
    84b6:	9609      	str	r6, [sp, #36]	; 0x24
    84b8:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    84bc:	468b      	mov	fp, r1
    84be:	4680      	mov	r8, r0
    84c0:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
    84c4:	f8dd a010 	ldr.w	sl, [sp, #16]
    84c8:	e01d      	b.n	8506 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xf2>
    84ca:	2300      	movs	r3, #0
    84cc:	e7ca      	b.n	8464 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x50>
    84ce:	2300      	movs	r3, #0
    84d0:	e7c8      	b.n	8464 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x50>
    TF_LITE_REPORT_ERROR(
    84d2:	9a06      	ldr	r2, [sp, #24]
    84d4:	4983      	ldr	r1, [pc, #524]	; (86e4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2d0>)
    84d6:	9805      	ldr	r0, [sp, #20]
    84d8:	4b83      	ldr	r3, [pc, #524]	; (86e8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2d4>)
    84da:	4798      	blx	r3
    TF_LITE_ENSURE_STATUS(
    84dc:	2401      	movs	r4, #1
    84de:	a80e      	add	r0, sp, #56	; 0x38
    84e0:	4b82      	ldr	r3, [pc, #520]	; (86ec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2d8>)
    84e2:	4798      	blx	r3
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
                                            /*alignment=*/1);
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
  }
  return kTfLiteOk;
}
    84e4:	4620      	mov	r0, r4
    84e6:	b021      	add	sp, #132	; 0x84
    84e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    84ec:	2300      	movs	r3, #0
    84ee:	e016      	b.n	851e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x10a>
    84f0:	2300      	movs	r3, #0
    84f2:	e014      	b.n	851e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x10a>
    84f4:	58f3      	ldr	r3, [r6, r3]
    84f6:	4418      	add	r0, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
    84f8:	2217      	movs	r2, #23
    84fa:	497d      	ldr	r1, [pc, #500]	; (86f0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2dc>)
    84fc:	3004      	adds	r0, #4
    84fe:	4b7d      	ldr	r3, [pc, #500]	; (86f4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2e0>)
    8500:	4798      	blx	r3
    8502:	b310      	cbz	r0, 854a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x136>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    8504:	3401      	adds	r4, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8506:	f1b8 0f10 	cmp.w	r8, #16
    850a:	ddef      	ble.n	84ec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xd8>
    850c:	f8bb 2010 	ldrh.w	r2, [fp, #16]
    auto p = data_ + field_offset;
    8510:	eb09 0302 	add.w	r3, r9, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8514:	2a00      	cmp	r2, #0
    8516:	d0eb      	beq.n	84f0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xdc>
    8518:	f859 2002 	ldr.w	r2, [r9, r2]
    851c:	4413      	add	r3, r2
    851e:	681a      	ldr	r2, [r3, #0]
    8520:	42a2      	cmp	r2, r4
    8522:	d958      	bls.n	85d6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1c2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8524:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    8526:	eb03 0284 	add.w	r2, r3, r4, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    852a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    852e:	18d6      	adds	r6, r2, r3
    return data_ - ReadScalar<soffset_t>(data_);
    8530:	58d5      	ldr	r5, [r2, r3]
    8532:	1b75      	subs	r5, r6, r5
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8534:	882f      	ldrh	r7, [r5, #0]
    8536:	2f04      	cmp	r7, #4
    8538:	dd05      	ble.n	8546 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x132>
    853a:	88ab      	ldrh	r3, [r5, #4]
    auto p = data_ + field_offset;
    853c:	18f0      	adds	r0, r6, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    853e:	2b00      	cmp	r3, #0
    8540:	d1d8      	bne.n	84f4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xe0>
    8542:	2000      	movs	r0, #0
    8544:	e7d8      	b.n	84f8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xe4>
    8546:	2000      	movs	r0, #0
    8548:	e7d6      	b.n	84f8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xe4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    854a:	f1b8 0f0c 	cmp.w	r8, #12
    854e:	dd25      	ble.n	859c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x188>
    8550:	f8bb 200c 	ldrh.w	r2, [fp, #12]
    auto p = data_ + field_offset;
    8554:	eb09 0302 	add.w	r3, r9, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8558:	b312      	cbz	r2, 85a0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x18c>
    855a:	f859 2002 	ldr.w	r2, [r9, r2]
    855e:	4413      	add	r3, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8560:	2f06      	cmp	r7, #6
    8562:	dd1f      	ble.n	85a4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x190>
    8564:	88ea      	ldrh	r2, [r5, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8566:	b1fa      	cbz	r2, 85a8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x194>
    8568:	58b2      	ldr	r2, [r6, r2]
    FLATBUFFERS_ASSERT(i < size());
    856a:	6819      	ldr	r1, [r3, #0]
    856c:	4291      	cmp	r1, r2
    856e:	d91d      	bls.n	85ac <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x198>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8570:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    8572:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    857a:	18ca      	adds	r2, r1, r3
    return data_ - ReadScalar<soffset_t>(data_);
    857c:	58cb      	ldr	r3, [r1, r3]
    857e:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8580:	8819      	ldrh	r1, [r3, #0]
    8582:	2904      	cmp	r1, #4
    8584:	dd19      	ble.n	85ba <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1a6>
    8586:	8899      	ldrh	r1, [r3, #4]
    auto p = data_ + field_offset;
    8588:	1853      	adds	r3, r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    858a:	b1c1      	cbz	r1, 85be <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1aa>
    858c:	5852      	ldr	r2, [r2, r1]
    858e:	4413      	add	r3, r2
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
    8590:	68da      	ldr	r2, [r3, #12]
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
    8592:	3310      	adds	r3, #16
        if (tensor_count_ != nbr_tensors) {
    8594:	4592      	cmp	sl, r2
    8596:	d114      	bne.n	85c2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1ae>
        *offline_planner_offsets =
    8598:	9302      	str	r3, [sp, #8]
    859a:	e7b3      	b.n	8504 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xf0>
    859c:	2300      	movs	r3, #0
    859e:	e7df      	b.n	8560 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x14c>
    85a0:	2300      	movs	r3, #0
    85a2:	e7dd      	b.n	8560 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x14c>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    85a4:	2200      	movs	r2, #0
    85a6:	e7e0      	b.n	856a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x156>
    85a8:	2200      	movs	r2, #0
    85aa:	e7de      	b.n	856a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x156>
    FLATBUFFERS_ASSERT(i < size());
    85ac:	4b52      	ldr	r3, [pc, #328]	; (86f8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2e4>)
    85ae:	4a53      	ldr	r2, [pc, #332]	; (86fc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2e8>)
    85b0:	f240 1101 	movw	r1, #257	; 0x101
    85b4:	4852      	ldr	r0, [pc, #328]	; (8700 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ec>)
    85b6:	4c53      	ldr	r4, [pc, #332]	; (8704 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2f0>)
    85b8:	47a0      	blx	r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    85ba:	2300      	movs	r3, #0
    85bc:	e7e8      	b.n	8590 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x17c>
    85be:	2300      	movs	r3, #0
    85c0:	e7e6      	b.n	8590 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x17c>
          TF_LITE_REPORT_ERROR(reporter_,
    85c2:	9b04      	ldr	r3, [sp, #16]
    85c4:	4950      	ldr	r1, [pc, #320]	; (8708 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2f4>)
    85c6:	9805      	ldr	r0, [sp, #20]
    85c8:	4c47      	ldr	r4, [pc, #284]	; (86e8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2d4>)
    85ca:	47a0      	blx	r4
    TF_LITE_ENSURE_STATUS(
    85cc:	2401      	movs	r4, #1
    85ce:	e786      	b.n	84de <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xca>
    const int32_t* offline_planner_offsets = nullptr;
    85d0:	2300      	movs	r3, #0
    85d2:	9302      	str	r3, [sp, #8]
    85d4:	e1e6      	b.n	89a4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x590>
    85d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
    85d8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    85dc:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    85e0:	e1e0      	b.n	89a4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x590>
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
    85e2:	2100      	movs	r1, #0
    85e4:	4608      	mov	r0, r1
    85e6:	e061      	b.n	86ac <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x298>
    return data_ - ReadScalar<soffset_t>(data_);
    85e8:	f8da 4000 	ldr.w	r4, [sl]
    85ec:	ebab 0404 	sub.w	r4, fp, r4
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    85f0:	f8b4 8000 	ldrh.w	r8, [r4]
    85f4:	f1b8 0f04 	cmp.w	r8, #4
    85f8:	dd23      	ble.n	8642 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x22e>
    85fa:	88a4      	ldrh	r4, [r4, #4]
    auto p = data_ + field_offset;
    85fc:	eb0b 0804 	add.w	r8, fp, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8600:	b30c      	cbz	r4, 8646 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x232>
    8602:	f85b 4004 	ldr.w	r4, [fp, r4]
    8606:	44a0      	add	r8, r4
    FLATBUFFERS_ASSERT(i < size());
    8608:	f8d8 4000 	ldr.w	r4, [r8]
    860c:	42a1      	cmp	r1, r4
    860e:	d21c      	bcs.n	864a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x236>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8610:	f108 0804 	add.w	r8, r8, #4
    p += i * sizeof(uoffset_t);
    8614:	eb08 0481 	add.w	r4, r8, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8618:	f858 9021 	ldr.w	r9, [r8, r1, lsl #2]
    861c:	eb04 0809 	add.w	r8, r4, r9
    return data_ - ReadScalar<soffset_t>(data_);
    8620:	f854 4009 	ldr.w	r4, [r4, r9]
    8624:	eba8 0404 	sub.w	r4, r8, r4
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8628:	f8b4 9000 	ldrh.w	r9, [r4]
    862c:	f1b9 0f0e 	cmp.w	r9, #14
    8630:	dd12      	ble.n	8658 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x244>
    8632:	89e4      	ldrh	r4, [r4, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8634:	b194      	cbz	r4, 865c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x248>
    8636:	f818 4004 	ldrb.w	r4, [r8, r4]
    863a:	fab4 f484 	clz	r4, r4
    863e:	0964      	lsrs	r4, r4, #5
    8640:	e01e      	b.n	8680 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x26c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8642:	46e0      	mov	r8, ip
    8644:	e7e0      	b.n	8608 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1f4>
    8646:	46e0      	mov	r8, ip
    8648:	e7de      	b.n	8608 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1f4>
    FLATBUFFERS_ASSERT(i < size());
    864a:	4b2b      	ldr	r3, [pc, #172]	; (86f8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2e4>)
    864c:	4a2f      	ldr	r2, [pc, #188]	; (870c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2f8>)
    864e:	f240 1101 	movw	r1, #257	; 0x101
    8652:	482b      	ldr	r0, [pc, #172]	; (8700 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ec>)
    8654:	4c2b      	ldr	r4, [pc, #172]	; (8704 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2f0>)
    8656:	47a0      	blx	r4
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8658:	4664      	mov	r4, ip
    865a:	e7ee      	b.n	863a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x226>
    865c:	4664      	mov	r4, ip
    865e:	e7ec      	b.n	863a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x226>
      current->offline_offset = kOnlinePlannedBuffer;
    8660:	6105      	str	r5, [r0, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
    8662:	3101      	adds	r1, #1
    8664:	3240      	adds	r2, #64	; 0x40
    8666:	3318      	adds	r3, #24
    8668:	458e      	cmp	lr, r1
    866a:	d0ba      	beq.n	85e2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1ce>
    866c:	4618      	mov	r0, r3
    current->output_ptr = &(runtime_tensors[i].data.data);
    866e:	605a      	str	r2, [r3, #4]
    current->bytes = runtime_tensors[i].bytes;
    8670:	6954      	ldr	r4, [r2, #20]
    8672:	601c      	str	r4, [r3, #0]
    current->first_created = -1;
    8674:	609d      	str	r5, [r3, #8]
    current->last_used = -1;
    8676:	60dd      	str	r5, [r3, #12]
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
    8678:	6814      	ldr	r4, [r2, #0]
    867a:	2c00      	cmp	r4, #0
    867c:	d0b4      	beq.n	85e8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1d4>
    867e:	4664      	mov	r4, ip
    8680:	7504      	strb	r4, [r0, #20]
    if (offline_offsets) {
    8682:	2f00      	cmp	r7, #0
    8684:	d0ec      	beq.n	8660 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x24c>
      current->offline_offset = offline_offsets[i];
    8686:	f857 4021 	ldr.w	r4, [r7, r1, lsl #2]
    868a:	6104      	str	r4, [r0, #16]
    868c:	e7e9      	b.n	8662 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x24e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    868e:	f85b 2002 	ldr.w	r2, [fp, r2]
    8692:	4413      	add	r3, r2
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    8694:	681a      	ldr	r2, [r3, #0]
    8696:	428a      	cmp	r2, r1
    8698:	d918      	bls.n	86cc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2b8>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    869a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    AllocationInfo* current = &info_[tensor_index];
    869e:	685b      	ldr	r3, [r3, #4]
    current->first_created = 0;
    86a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    86a4:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    86a8:	6098      	str	r0, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    86aa:	3101      	adds	r1, #1
    return data_ - ReadScalar<soffset_t>(data_);
    86ac:	f8da 3000 	ldr.w	r3, [sl]
    86b0:	ebab 0303 	sub.w	r3, fp, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    86b4:	881a      	ldrh	r2, [r3, #0]
    86b6:	2a06      	cmp	r2, #6
    86b8:	dd06      	ble.n	86c8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2b4>
    86ba:	88da      	ldrh	r2, [r3, #6]
    auto p = data_ + field_offset;
    86bc:	eb0b 0302 	add.w	r3, fp, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    86c0:	2a00      	cmp	r2, #0
    86c2:	d1e4      	bne.n	868e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27a>
    86c4:	4603      	mov	r3, r0
    86c6:	e7e5      	b.n	8694 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x280>
    86c8:	4603      	mov	r3, r0
    86ca:	e7e3      	b.n	8694 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x280>
    86cc:	2100      	movs	r1, #0
    86ce:	460d      	mov	r5, r1
    86d0:	e027      	b.n	8722 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x30e>
    86d2:	462b      	mov	r3, r5
    86d4:	e034      	b.n	8740 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x32c>
    86d6:	bf00      	nop
    86d8:	0000912d 	.word	0x0000912d
    86dc:	00009131 	.word	0x00009131
    86e0:	000090ad 	.word	0x000090ad
    86e4:	00021b40 	.word	0x00021b40
    86e8:	0000118d 	.word	0x0000118d
    86ec:	00008fe1 	.word	0x00008fe1
    86f0:	000215e4 	.word	0x000215e4
    86f4:	0001561d 	.word	0x0001561d
    86f8:	0001ff50 	.word	0x0001ff50
    86fc:	00021318 	.word	0x00021318
    8700:	0001ff5c 	.word	0x0001ff5c
    8704:	000138cd 	.word	0x000138cd
    8708:	00021b84 	.word	0x00021b84
    870c:	00021208 	.word	0x00021208
    8710:	462b      	mov	r3, r5
    8712:	e015      	b.n	8740 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x32c>
    8714:	f85b 0000 	ldr.w	r0, [fp, r0]
    8718:	4402      	add	r2, r0
    current->last_used = subgraph->operators()->size() - 1;
    871a:	6812      	ldr	r2, [r2, #0]
    871c:	3a01      	subs	r2, #1
    871e:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    8720:	3101      	adds	r1, #1
    return data_ - ReadScalar<soffset_t>(data_);
    8722:	f8da 2000 	ldr.w	r2, [sl]
    8726:	ebab 0202 	sub.w	r2, fp, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    872a:	8814      	ldrh	r4, [r2, #0]
    872c:	2c08      	cmp	r4, #8
    872e:	ddd0      	ble.n	86d2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2be>
    8730:	8910      	ldrh	r0, [r2, #8]
    auto p = data_ + field_offset;
    8732:	eb0b 0300 	add.w	r3, fp, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8736:	2800      	cmp	r0, #0
    8738:	d0ea      	beq.n	8710 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2fc>
    873a:	f85b 0000 	ldr.w	r0, [fp, r0]
    873e:	4403      	add	r3, r0
    8740:	6818      	ldr	r0, [r3, #0]
    8742:	4288      	cmp	r0, r1
    8744:	d911      	bls.n	876a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x356>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8746:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    AllocationInfo* current = &info_[tensor_index];
    874a:	685b      	ldr	r3, [r3, #4]
    874c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8750:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8754:	2c0a      	cmp	r4, #10
    8756:	dd06      	ble.n	8766 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x352>
    8758:	8950      	ldrh	r0, [r2, #10]
    auto p = data_ + field_offset;
    875a:	eb0b 0200 	add.w	r2, fp, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    875e:	2800      	cmp	r0, #0
    8760:	d1d8      	bne.n	8714 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x300>
    8762:	462a      	mov	r2, r5
    8764:	e7d9      	b.n	871a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x306>
    8766:	462a      	mov	r2, r5
    8768:	e7d7      	b.n	871a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x306>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    876a:	2c0a      	cmp	r4, #10
    876c:	dd11      	ble.n	8792 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x37e>
    876e:	8952      	ldrh	r2, [r2, #10]
    auto p = data_ + field_offset;
    8770:	eb0a 0302 	add.w	r3, sl, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8774:	b17a      	cbz	r2, 8796 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x382>
    8776:	f85a 2002 	ldr.w	r2, [sl, r2]
    877a:	4413      	add	r3, r2
  uoffset_t size() const { return EndianScalar(length_); }
    877c:	681b      	ldr	r3, [r3, #0]
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
    877e:	1e59      	subs	r1, r3, #1
    8780:	d40b      	bmi.n	879a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x386>
    8782:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8786:	3b01      	subs	r3, #1
    8788:	009d      	lsls	r5, r3, #2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    878a:	f04f 0c00 	mov.w	ip, #0
    878e:	46e0      	mov	r8, ip
    8790:	e060      	b.n	8854 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x440>
    8792:	2300      	movs	r3, #0
    8794:	e7f2      	b.n	877c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x368>
    8796:	2300      	movs	r3, #0
    8798:	e7f0      	b.n	877c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x368>
  for (size_t i = 0; i < tensor_count_; ++i) {
    879a:	9b04      	ldr	r3, [sp, #16]
    879c:	2b00      	cmp	r3, #0
    879e:	f000 8114 	beq.w	89ca <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x5b6>
    87a2:	4631      	mov	r1, r6
    87a4:	2200      	movs	r2, #0
      current->needs_allocating = false;
    87a6:	4615      	mov	r5, r2
    87a8:	9f04      	ldr	r7, [sp, #16]
    87aa:	e076      	b.n	889a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x486>
    87ac:	4663      	mov	r3, ip
    87ae:	e060      	b.n	8872 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x45e>
    87b0:	4663      	mov	r3, ip
    87b2:	e05e      	b.n	8872 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x45e>
    FLATBUFFERS_ASSERT(i < size());
    87b4:	4ba4      	ldr	r3, [pc, #656]	; (8a48 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x634>)
    87b6:	4aa5      	ldr	r2, [pc, #660]	; (8a4c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x638>)
    87b8:	f240 1101 	movw	r1, #257	; 0x101
    87bc:	48a4      	ldr	r0, [pc, #656]	; (8a50 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x63c>)
    87be:	4ca5      	ldr	r4, [pc, #660]	; (8a54 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x640>)
    87c0:	47a0      	blx	r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    87c2:	4644      	mov	r4, r8
    87c4:	e00e      	b.n	87e4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3d0>
    87c6:	4644      	mov	r4, r8
    87c8:	e00c      	b.n	87e4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3d0>
        current->last_used = i;
    87ca:	60d9      	str	r1, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    87cc:	3701      	adds	r7, #1
    return data_ - ReadScalar<soffset_t>(data_);
    87ce:	6813      	ldr	r3, [r2, #0]
    87d0:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    87d2:	881c      	ldrh	r4, [r3, #0]
    87d4:	2c06      	cmp	r4, #6
    87d6:	ddf4      	ble.n	87c2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3ae>
    87d8:	88db      	ldrh	r3, [r3, #6]
    auto p = data_ + field_offset;
    87da:	18d4      	adds	r4, r2, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    87dc:	2b00      	cmp	r3, #0
    87de:	d0f2      	beq.n	87c6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3b2>
    87e0:	58d3      	ldr	r3, [r2, r3]
    87e2:	441c      	add	r4, r3
    87e4:	6823      	ldr	r3, [r4, #0]
    87e6:	42bb      	cmp	r3, r7
    87e8:	d90d      	bls.n	8806 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3f2>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    87ea:	eb04 0487 	add.w	r4, r4, r7, lsl #2
      AllocationInfo* current = &info_[tensor_index];
    87ee:	6863      	ldr	r3, [r4, #4]
    87f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    87f4:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
      if (((current->last_used == -1) || (current->last_used < i))) {
    87f8:	68dc      	ldr	r4, [r3, #12]
    87fa:	f1b4 3fff 	cmp.w	r4, #4294967295
    87fe:	d0e4      	beq.n	87ca <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3b6>
    8800:	42a1      	cmp	r1, r4
    8802:	dde3      	ble.n	87cc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3b8>
    8804:	e7e1      	b.n	87ca <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3b6>
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    8806:	2700      	movs	r7, #0
    8808:	e005      	b.n	8816 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x402>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    880a:	4644      	mov	r4, r8
    880c:	e00e      	b.n	882c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x418>
    880e:	4644      	mov	r4, r8
    8810:	e00c      	b.n	882c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x418>
        current->first_created = i;
    8812:	6099      	str	r1, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    8814:	3701      	adds	r7, #1
    return data_ - ReadScalar<soffset_t>(data_);
    8816:	6813      	ldr	r3, [r2, #0]
    8818:	1ac3      	subs	r3, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    881a:	881c      	ldrh	r4, [r3, #0]
    881c:	2c08      	cmp	r4, #8
    881e:	ddf4      	ble.n	880a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3f6>
    8820:	891b      	ldrh	r3, [r3, #8]
    auto p = data_ + field_offset;
    8822:	18c4      	adds	r4, r0, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8824:	2b00      	cmp	r3, #0
    8826:	d0f2      	beq.n	880e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3fa>
    8828:	58c3      	ldr	r3, [r0, r3]
    882a:	441c      	add	r4, r3
    882c:	6823      	ldr	r3, [r4, #0]
    882e:	42bb      	cmp	r3, r7
    8830:	d90d      	bls.n	884e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x43a>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8832:	eb04 0487 	add.w	r4, r4, r7, lsl #2
      AllocationInfo* current = &info_[tensor_index];
    8836:	6863      	ldr	r3, [r4, #4]
    8838:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    883c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
      if ((current->first_created == -1) || (current->first_created > i)) {
    8840:	689c      	ldr	r4, [r3, #8]
    8842:	f1b4 3fff 	cmp.w	r4, #4294967295
    8846:	d0e4      	beq.n	8812 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3fe>
    8848:	42a1      	cmp	r1, r4
    884a:	dae3      	bge.n	8814 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x400>
    884c:	e7e1      	b.n	8812 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3fe>
    884e:	3d04      	subs	r5, #4
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
    8850:	3901      	subs	r1, #1
    8852:	d4a2      	bmi.n	879a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x386>
    return data_ - ReadScalar<soffset_t>(data_);
    8854:	f8da 3000 	ldr.w	r3, [sl]
    8858:	ebab 0303 	sub.w	r3, fp, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    885c:	881a      	ldrh	r2, [r3, #0]
    885e:	2a0a      	cmp	r2, #10
    8860:	dda4      	ble.n	87ac <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x398>
    8862:	895a      	ldrh	r2, [r3, #10]
    auto p = data_ + field_offset;
    8864:	eb0b 0302 	add.w	r3, fp, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8868:	2a00      	cmp	r2, #0
    886a:	d0a1      	beq.n	87b0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x39c>
    886c:	f85b 2002 	ldr.w	r2, [fp, r2]
    8870:	4413      	add	r3, r2
    FLATBUFFERS_ASSERT(i < size());
    8872:	681a      	ldr	r2, [r3, #0]
    8874:	4291      	cmp	r1, r2
    8876:	d29d      	bcs.n	87b4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3a0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8878:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    887a:	195a      	adds	r2, r3, r5
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    887c:	595b      	ldr	r3, [r3, r5]
    887e:	441a      	add	r2, r3
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    8880:	2700      	movs	r7, #0
    return data_ - ReadScalar<soffset_t>(data_);
    8882:	4610      	mov	r0, r2
    8884:	e7a3      	b.n	87ce <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3ba>
        (current->first_created == -1) && (current->last_used != -1);
    8886:	68c8      	ldr	r0, [r1, #12]
    8888:	f1b0 3fff 	cmp.w	r0, #4294967295
    888c:	d00e      	beq.n	88ac <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x498>
      current->needs_allocating = false;
    888e:	750d      	strb	r5, [r1, #20]
  for (size_t i = 0; i < tensor_count_; ++i) {
    8890:	3201      	adds	r2, #1
    8892:	3118      	adds	r1, #24
    8894:	4297      	cmp	r7, r2
    8896:	f000 8098 	beq.w	89ca <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x5b6>
    AllocationInfo* current = &info_[i];
    889a:	460c      	mov	r4, r1
        (current->first_created == -1) && (current->last_used != -1);
    889c:	688b      	ldr	r3, [r1, #8]
    889e:	f1b3 3fff 	cmp.w	r3, #4294967295
    88a2:	d0f0      	beq.n	8886 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x472>
        ((current->first_created == -1) || (current->last_used == -1));
    88a4:	68c8      	ldr	r0, [r1, #12]
    88a6:	f1b0 3fff 	cmp.w	r0, #4294967295
    88aa:	d1f1      	bne.n	8890 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x47c>
    if (has_partial_lifetime && current->needs_allocating) {
    88ac:	7d20      	ldrb	r0, [r4, #20]
    88ae:	2800      	cmp	r0, #0
    88b0:	d0ee      	beq.n	8890 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x47c>
      TF_LITE_REPORT_ERROR(
    88b2:	68e1      	ldr	r1, [r4, #12]
    88b4:	9100      	str	r1, [sp, #0]
    88b6:	4968      	ldr	r1, [pc, #416]	; (8a58 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x644>)
    88b8:	9805      	ldr	r0, [sp, #20]
    88ba:	4c68      	ldr	r4, [pc, #416]	; (8a5c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x648>)
    88bc:	47a0      	blx	r4
    TF_LITE_ENSURE_STATUS(builder.AddTensors(subgraph, offline_planner_offsets,
    88be:	2401      	movs	r4, #1
    88c0:	e60d      	b.n	84de <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xca>
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    88c2:	9b03      	ldr	r3, [sp, #12]
    88c4:	6898      	ldr	r0, [r3, #8]
    88c6:	4b66      	ldr	r3, [pc, #408]	; (8a60 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x64c>)
    88c8:	9301      	str	r3, [sp, #4]
    88ca:	f44f 7369 	mov.w	r3, #932	; 0x3a4
    88ce:	9300      	str	r3, [sp, #0]
    88d0:	4b64      	ldr	r3, [pc, #400]	; (8a64 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x650>)
    88d2:	4a65      	ldr	r2, [pc, #404]	; (8a68 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x654>)
    88d4:	4601      	mov	r1, r0
    88d6:	4c65      	ldr	r4, [pc, #404]	; (8a6c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x658>)
    88d8:	47a0      	blx	r4
    88da:	2401      	movs	r4, #1
    88dc:	e5ff      	b.n	84de <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xca>
        TF_LITE_ENSURE_STATUS(
    88de:	68a3      	ldr	r3, [r4, #8]
    88e0:	68e1      	ldr	r1, [r4, #12]
    88e2:	9100      	str	r1, [sp, #0]
    88e4:	9915      	ldr	r1, [sp, #84]	; 0x54
    88e6:	688e      	ldr	r6, [r1, #8]
    88e8:	4651      	mov	r1, sl
    88ea:	a815      	add	r0, sp, #84	; 0x54
    88ec:	47b0      	blx	r6
    88ee:	2800      	cmp	r0, #0
    88f0:	f040 80d0 	bne.w	8a94 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x680>
  for (size_t i = 0; i < allocation_info_size; ++i) {
    88f4:	3501      	adds	r5, #1
    88f6:	3418      	adds	r4, #24
    88f8:	42af      	cmp	r7, r5
    88fa:	f000 80cd 	beq.w	8a98 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x684>
    if (current->needs_allocating) {
    88fe:	7d23      	ldrb	r3, [r4, #20]
    8900:	2b00      	cmp	r3, #0
    8902:	d0f7      	beq.n	88f4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4e0>
          AlignSizeUp(current->bytes, kBufferAlignment);
    8904:	4659      	mov	r1, fp
    8906:	6820      	ldr	r0, [r4, #0]
    8908:	47c0      	blx	r8
    890a:	4602      	mov	r2, r0
      if (current->offline_offset == kOnlinePlannedBuffer) {
    890c:	6921      	ldr	r1, [r4, #16]
    890e:	f1b1 3fff 	cmp.w	r1, #4294967295
    8912:	d0e4      	beq.n	88de <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4ca>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
    8914:	68a3      	ldr	r3, [r4, #8]
    8916:	9101      	str	r1, [sp, #4]
    8918:	68e1      	ldr	r1, [r4, #12]
    891a:	9100      	str	r1, [sp, #0]
    891c:	4651      	mov	r1, sl
    891e:	a815      	add	r0, sp, #84	; 0x54
    8920:	47c8      	blx	r9
    8922:	2800      	cmp	r0, #0
    8924:	d0e6      	beq.n	88f4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4e0>
    8926:	4604      	mov	r4, r0
    8928:	e00b      	b.n	8942 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x52e>
      TF_LITE_REPORT_ERROR(
    892a:	9b03      	ldr	r3, [sp, #12]
    892c:	689d      	ldr	r5, [r3, #8]
    892e:	a815      	add	r0, sp, #84	; 0x54
    8930:	4b4f      	ldr	r3, [pc, #316]	; (8a70 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x65c>)
    8932:	4798      	blx	r3
    8934:	4623      	mov	r3, r4
    8936:	4602      	mov	r2, r0
    8938:	494e      	ldr	r1, [pc, #312]	; (8a74 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x660>)
    893a:	4628      	mov	r0, r5
    893c:	4c47      	ldr	r4, [pc, #284]	; (8a5c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x648>)
    893e:	47a0      	blx	r4
      return kTfLiteError;
    8940:	2401      	movs	r4, #1
    TF_LITE_ENSURE_STATUS(
    8942:	a815      	add	r0, sp, #84	; 0x54
    8944:	4b4c      	ldr	r3, [pc, #304]	; (8a78 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x664>)
    8946:	4798      	blx	r3
    8948:	e5c9      	b.n	84de <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xca>
      TF_LITE_ENSURE_STATUS(
    894a:	4604      	mov	r4, r0
    894c:	e7f9      	b.n	8942 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x52e>
  for (size_t i = 0; i < allocation_info_size; ++i) {
    894e:	3401      	adds	r4, #1
    8950:	3618      	adds	r6, #24
    8952:	9b07      	ldr	r3, [sp, #28]
    8954:	42a3      	cmp	r3, r4
    8956:	f000 80c8 	beq.w	8aea <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x6d6>
    if (current->needs_allocating) {
    895a:	7d33      	ldrb	r3, [r6, #20]
    895c:	2b00      	cmp	r3, #0
    895e:	d0f6      	beq.n	894e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x53a>
      int offset = -1;
    8960:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
      TF_LITE_ENSURE_STATUS(
    8964:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8966:	f8d3 a014 	ldr.w	sl, [r3, #20]
    896a:	ab0d      	add	r3, sp, #52	; 0x34
    896c:	462a      	mov	r2, r5
    896e:	4659      	mov	r1, fp
    8970:	a815      	add	r0, sp, #84	; 0x54
    8972:	47d0      	blx	sl
    8974:	2800      	cmp	r0, #0
    8976:	d1e8      	bne.n	894a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x536>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
    8978:	6872      	ldr	r2, [r6, #4]
    897a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    897c:	444b      	add	r3, r9
    897e:	6013      	str	r3, [r2, #0]
      ++planner_index;
    8980:	3501      	adds	r5, #1
    8982:	e7e4      	b.n	894e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x53a>
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
    8984:	9b03      	ldr	r3, [sp, #12]
    8986:	6898      	ldr	r0, [r3, #8]
    8988:	4b3c      	ldr	r3, [pc, #240]	; (8a7c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x668>)
    898a:	9301      	str	r3, [sp, #4]
    898c:	f240 33bd 	movw	r3, #957	; 0x3bd
    8990:	9300      	str	r3, [sp, #0]
    8992:	4b34      	ldr	r3, [pc, #208]	; (8a64 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x650>)
    8994:	4a34      	ldr	r2, [pc, #208]	; (8a68 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x654>)
    8996:	4601      	mov	r1, r0
    8998:	4c34      	ldr	r4, [pc, #208]	; (8a6c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x658>)
    899a:	47a0      	blx	r4
    899c:	2401      	movs	r4, #1
    899e:	e7d0      	b.n	8942 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x52e>
    const int32_t* offline_planner_offsets = nullptr;
    89a0:	2300      	movs	r3, #0
    89a2:	9302      	str	r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(builder.AddTensors(subgraph, offline_planner_offsets,
    89a4:	9b08      	ldr	r3, [sp, #32]
    89a6:	689a      	ldr	r2, [r3, #8]
  for (size_t i = 0; i < tensor_count_; ++i) {
    89a8:	9b04      	ldr	r3, [sp, #16]
    89aa:	2b00      	cmp	r3, #0
    89ac:	f43f ae19 	beq.w	85e2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1ce>
    89b0:	3204      	adds	r2, #4
    89b2:	4633      	mov	r3, r6
    89b4:	2100      	movs	r1, #0
    current->first_created = -1;
    89b6:	f04f 35ff 	mov.w	r5, #4294967295
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
    89ba:	468c      	mov	ip, r1
    89bc:	f8dd e010 	ldr.w	lr, [sp, #16]
    89c0:	9f02      	ldr	r7, [sp, #8]
    89c2:	e653      	b.n	866c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x258>
    const int32_t* offline_planner_offsets = nullptr;
    89c4:	2300      	movs	r3, #0
    89c6:	9302      	str	r3, [sp, #8]
    89c8:	e7ec      	b.n	89a4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x590>
    TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_handles_));
    89ca:	9b03      	ldr	r3, [sp, #12]
    89cc:	6919      	ldr	r1, [r3, #16]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    89ce:	9a04      	ldr	r2, [sp, #16]
    89d0:	9807      	ldr	r0, [sp, #28]
    89d2:	4282      	cmp	r2, r0
    89d4:	d215      	bcs.n	8a02 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x5ee>
    89d6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    89da:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    89de:	9a06      	ldr	r2, [sp, #24]
    89e0:	4432      	add	r2, r6
    current->needs_allocating = true;
    89e2:	2501      	movs	r5, #1
    current->offline_offset = kOnlinePlannedBuffer;
    89e4:	f04f 34ff 	mov.w	r4, #4294967295
    current->output_ptr = reinterpret_cast<void**>(&handle->data);
    89e8:	6059      	str	r1, [r3, #4]
    current->bytes = handle->bytes;
    89ea:	6848      	ldr	r0, [r1, #4]
    89ec:	6018      	str	r0, [r3, #0]
    current->first_created = handle->node_idx;
    89ee:	6888      	ldr	r0, [r1, #8]
    89f0:	6098      	str	r0, [r3, #8]
    current->last_used = handle->node_idx;
    89f2:	6888      	ldr	r0, [r1, #8]
    89f4:	60d8      	str	r0, [r3, #12]
    current->needs_allocating = true;
    89f6:	751d      	strb	r5, [r3, #20]
    current->offline_offset = kOnlinePlannedBuffer;
    89f8:	611c      	str	r4, [r3, #16]
    89fa:	310c      	adds	r1, #12
    89fc:	3318      	adds	r3, #24
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    89fe:	4293      	cmp	r3, r2
    8a00:	d1f2      	bne.n	89e8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x5d4>
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
    8a02:	a80e      	add	r0, sp, #56	; 0x38
    8a04:	4b1e      	ldr	r3, [pc, #120]	; (8a80 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x66c>)
    8a06:	4798      	blx	r3
    8a08:	4604      	mov	r4, r0
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
    8a0a:	2201      	movs	r2, #1
    8a0c:	4601      	mov	r1, r0
    8a0e:	a80e      	add	r0, sp, #56	; 0x38
    8a10:	4b1c      	ldr	r3, [pc, #112]	; (8a84 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x670>)
    8a12:	4798      	blx	r3
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    8a14:	4601      	mov	r1, r0
    8a16:	2800      	cmp	r0, #0
    8a18:	f43f af53 	beq.w	88c2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4ae>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    8a1c:	4622      	mov	r2, r4
    8a1e:	a815      	add	r0, sp, #84	; 0x54
    8a20:	4b19      	ldr	r3, [pc, #100]	; (8a88 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x674>)
    8a22:	4798      	blx	r3
    TF_LITE_ENSURE_STATUS(
    8a24:	9b03      	ldr	r3, [sp, #12]
    8a26:	f8d3 a008 	ldr.w	sl, [r3, #8]
  for (size_t i = 0; i < allocation_info_size; ++i) {
    8a2a:	9b07      	ldr	r3, [sp, #28]
    8a2c:	2b00      	cmp	r3, #0
    8a2e:	d04d      	beq.n	8acc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x6b8>
    8a30:	4634      	mov	r4, r6
    8a32:	2500      	movs	r5, #0
          AlignSizeUp(current->bytes, kBufferAlignment);
    8a34:	f04f 0b10 	mov.w	fp, #16
    8a38:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8a8c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x678>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
    8a3c:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8a90 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x67c>
    8a40:	461f      	mov	r7, r3
    8a42:	9602      	str	r6, [sp, #8]
    8a44:	e75b      	b.n	88fe <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4ea>
    8a46:	bf00      	nop
    8a48:	0001ff50 	.word	0x0001ff50
    8a4c:	000215fc 	.word	0x000215fc
    8a50:	0001ff5c 	.word	0x0001ff5c
    8a54:	000138cd 	.word	0x000138cd
    8a58:	00021bd0 	.word	0x00021bd0
    8a5c:	0000118d 	.word	0x0000118d
    8a60:	00021c64 	.word	0x00021c64
    8a64:	00021c34 	.word	0x00021c34
    8a68:	0001fff8 	.word	0x0001fff8
    8a6c:	000011ab 	.word	0x000011ab
    8a70:	00007725 	.word	0x00007725
    8a74:	00021c80 	.word	0x00021c80
    8a78:	000073cd 	.word	0x000073cd
    8a7c:	00021cd8 	.word	0x00021cd8
    8a80:	00009135 	.word	0x00009135
    8a84:	00008fe9 	.word	0x00008fe9
    8a88:	0000747d 	.word	0x0000747d
    8a8c:	000072c1 	.word	0x000072c1
    8a90:	000074bd 	.word	0x000074bd
        TF_LITE_ENSURE_STATUS(
    8a94:	4604      	mov	r4, r0
    8a96:	e754      	b.n	8942 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x52e>
    8a98:	9e02      	ldr	r6, [sp, #8]
        memory_allocator_->GetAvailableMemory();
    8a9a:	9b03      	ldr	r3, [sp, #12]
    8a9c:	6858      	ldr	r0, [r3, #4]
    8a9e:	4b1e      	ldr	r3, [pc, #120]	; (8b18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x704>)
    8aa0:	4798      	blx	r3
    8aa2:	4604      	mov	r4, r0
    if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
    8aa4:	a815      	add	r0, sp, #84	; 0x54
    8aa6:	4b1d      	ldr	r3, [pc, #116]	; (8b1c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x708>)
    8aa8:	4798      	blx	r3
    8aaa:	4284      	cmp	r4, r0
    8aac:	f4ff af3d 	bcc.w	892a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x516>
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
    8ab0:	9a03      	ldr	r2, [sp, #12]
    8ab2:	f8d2 b008 	ldr.w	fp, [r2, #8]
    8ab6:	6850      	ldr	r0, [r2, #4]
    8ab8:	4b19      	ldr	r3, [pc, #100]	; (8b20 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x70c>)
    8aba:	4798      	blx	r3
    8abc:	4681      	mov	r9, r0
  for (size_t i = 0; i < allocation_info_size; ++i) {
    8abe:	9b07      	ldr	r3, [sp, #28]
    8ac0:	b19b      	cbz	r3, 8aea <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x6d6>
    8ac2:	2500      	movs	r5, #0
    8ac4:	462c      	mov	r4, r5
      int offset = -1;
    8ac6:	f04f 38ff 	mov.w	r8, #4294967295
    8aca:	e746      	b.n	895a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x546>
        memory_allocator_->GetAvailableMemory();
    8acc:	9b03      	ldr	r3, [sp, #12]
    8ace:	6858      	ldr	r0, [r3, #4]
    8ad0:	4b11      	ldr	r3, [pc, #68]	; (8b18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x704>)
    8ad2:	4798      	blx	r3
    8ad4:	4604      	mov	r4, r0
    if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
    8ad6:	a815      	add	r0, sp, #84	; 0x54
    8ad8:	4b10      	ldr	r3, [pc, #64]	; (8b1c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x708>)
    8ada:	4798      	blx	r3
    8adc:	4284      	cmp	r4, r0
    8ade:	f4ff af24 	bcc.w	892a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x516>
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
    8ae2:	9b03      	ldr	r3, [sp, #12]
    8ae4:	6858      	ldr	r0, [r3, #4]
    8ae6:	4b0e      	ldr	r3, [pc, #56]	; (8b20 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x70c>)
    8ae8:	4798      	blx	r3
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
    8aea:	9b03      	ldr	r3, [sp, #12]
    8aec:	685c      	ldr	r4, [r3, #4]
                                            /*alignment=*/1);
    8aee:	6823      	ldr	r3, [r4, #0]
    8af0:	689d      	ldr	r5, [r3, #8]
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
    8af2:	a815      	add	r0, sp, #84	; 0x54
    8af4:	4b09      	ldr	r3, [pc, #36]	; (8b1c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x708>)
    8af6:	4798      	blx	r3
                                            /*alignment=*/1);
    8af8:	2201      	movs	r2, #1
    8afa:	4601      	mov	r1, r0
    8afc:	4620      	mov	r0, r4
    8afe:	47a8      	blx	r5
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
    8b00:	2800      	cmp	r0, #0
    8b02:	f43f af3f 	beq.w	8984 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x570>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    8b06:	a815      	add	r0, sp, #84	; 0x54
    8b08:	4b06      	ldr	r3, [pc, #24]	; (8b24 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x710>)
    8b0a:	4798      	blx	r3
                                        memory_allocator_->GetTail());
    8b0c:	a80e      	add	r0, sp, #56	; 0x38
    8b0e:	4b06      	ldr	r3, [pc, #24]	; (8b28 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x714>)
    8b10:	4798      	blx	r3
  return kTfLiteOk;
    8b12:	2400      	movs	r4, #0
    8b14:	e4e6      	b.n	84e4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xd0>
    8b16:	bf00      	nop
    8b18:	00009135 	.word	0x00009135
    8b1c:	00007725 	.word	0x00007725
    8b20:	0000912d 	.word	0x0000912d
    8b24:	000073cd 	.word	0x000073cd
    8b28:	00008fe1 	.word	0x00008fe1

00008b2c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    8b2c:	6943      	ldr	r3, [r0, #20]
    8b2e:	2b20      	cmp	r3, #32
    8b30:	d007      	beq.n	8b42 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    8b32:	b2db      	uxtb	r3, r3
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    8b34:	2b7e      	cmp	r3, #126	; 0x7e
  return EnumNamesBuiltinOperator()[index];
    8b36:	bfda      	itte	le
    8b38:	4a03      	ldrle	r2, [pc, #12]	; (8b48 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x1c>)
    8b3a:	f852 0023 	ldrle.w	r0, [r2, r3, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
    8b3e:	4803      	ldrgt	r0, [pc, #12]	; (8b4c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x20>)
    return registration->custom_name;
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
  }
}
    8b40:	4770      	bx	lr
    return registration->custom_name;
    8b42:	6980      	ldr	r0, [r0, #24]
    8b44:	4770      	bx	lr
    8b46:	bf00      	nop
    8b48:	000200cc 	.word	0x000200cc
    8b4c:	0001fe0c 	.word	0x0001fe0c

00008b50 <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextjPPv>:
}  // namespace

namespace internal {

TfLiteStatus ContextHelper::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                     size_t bytes, void** ptr) {
    8b50:	b508      	push	{r3, lr}
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
      ->allocator_->AllocatePersistentBuffer(bytes, ptr);
    8b52:	68c3      	ldr	r3, [r0, #12]
    8b54:	6818      	ldr	r0, [r3, #0]
    8b56:	4b01      	ldr	r3, [pc, #4]	; (8b5c <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextjPPv+0xc>)
    8b58:	4798      	blx	r3
}
    8b5a:	bd08      	pop	{r3, pc}
    8b5c:	00008145 	.word	0x00008145

00008b60 <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus ContextHelper::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                        size_t bytes,
                                                        int* buffer_idx) {
    8b60:	b510      	push	{r4, lr}
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
    8b62:	68c0      	ldr	r0, [r0, #12]
  return helper->allocator_->RequestScratchBufferInArena(
      helper->current_node_idx_, bytes, buffer_idx);
    8b64:	4613      	mov	r3, r2
    8b66:	460a      	mov	r2, r1
    8b68:	6881      	ldr	r1, [r0, #8]
    8b6a:	6800      	ldr	r0, [r0, #0]
    8b6c:	4c01      	ldr	r4, [pc, #4]	; (8b74 <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x14>)
    8b6e:	47a0      	blx	r4
}
    8b70:	bd10      	pop	{r4, pc}
    8b72:	bf00      	nop
    8b74:	00008175 	.word	0x00008175

00008b78 <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti>:

void* ContextHelper::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
    8b78:	b508      	push	{r3, lr}
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
      ->allocator_->GetScratchBuffer(buffer_idx);
    8b7a:	68c3      	ldr	r3, [r0, #12]
    8b7c:	6818      	ldr	r0, [r3, #0]
    8b7e:	4b01      	ldr	r3, [pc, #4]	; (8b84 <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti+0xc>)
    8b80:	4798      	blx	r3
}
    8b82:	bd08      	pop	{r3, pc}
    8b84:	000081e9 	.word	0x000081e9

00008b88 <_ZN6tflite8internal13ContextHelper13ReportOpErrorEP13TfLiteContextPKcz>:

void ContextHelper::ReportOpError(struct TfLiteContext* context,
                                  const char* format, ...) {
    8b88:	b40e      	push	{r1, r2, r3}
    8b8a:	b500      	push	{lr}
    8b8c:	b082      	sub	sp, #8
    8b8e:	aa03      	add	r2, sp, #12
    8b90:	f852 1b04 	ldr.w	r1, [r2], #4
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
    8b94:	68c3      	ldr	r3, [r0, #12]
  va_list args;
  va_start(args, format);
    8b96:	9201      	str	r2, [sp, #4]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
    8b98:	6858      	ldr	r0, [r3, #4]
    8b9a:	6803      	ldr	r3, [r0, #0]
    8b9c:	689b      	ldr	r3, [r3, #8]
    8b9e:	4798      	blx	r3
  va_end(args);
}
    8ba0:	b002      	add	sp, #8
    8ba2:	f85d eb04 	ldr.w	lr, [sp], #4
    8ba6:	b003      	add	sp, #12
    8ba8:	4770      	bx	lr

00008baa <_ZN6tflite16MicroInterpreterD1Ev>:
      initialization_status_(kTfLiteError),
      context_helper_(error_reporter_, &allocator_) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
    8baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8bae:	4606      	mov	r6, r0
  if (node_and_registrations_ != nullptr) {
    8bb0:	6803      	ldr	r3, [r0, #0]
    8bb2:	b333      	cbz	r3, 8c02 <_ZN6tflite16MicroInterpreterD1Ev+0x58>
    8bb4:	2500      	movs	r5, #0
    8bb6:	462c      	mov	r4, r5
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8bb8:	46a8      	mov	r8, r5
      const TfLiteRegistration* registration =
          node_and_registrations_[i].registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
        registration->free(&context_, node->user_data);
    8bba:	f100 0710 	add.w	r7, r0, #16
    8bbe:	e005      	b.n	8bcc <_ZN6tflite16MicroInterpreterD1Ev+0x22>
    8bc0:	4643      	mov	r3, r8
    8bc2:	e00f      	b.n	8be4 <_ZN6tflite16MicroInterpreterD1Ev+0x3a>
    8bc4:	4643      	mov	r3, r8
    8bc6:	e00d      	b.n	8be4 <_ZN6tflite16MicroInterpreterD1Ev+0x3a>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    8bc8:	3401      	adds	r4, #1
    8bca:	3528      	adds	r5, #40	; 0x28
    8bcc:	6f32      	ldr	r2, [r6, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    8bce:	6813      	ldr	r3, [r2, #0]
    8bd0:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8bd2:	8819      	ldrh	r1, [r3, #0]
    8bd4:	290a      	cmp	r1, #10
    8bd6:	ddf3      	ble.n	8bc0 <_ZN6tflite16MicroInterpreterD1Ev+0x16>
    8bd8:	8959      	ldrh	r1, [r3, #10]
    auto p = data_ + field_offset;
    8bda:	1853      	adds	r3, r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8bdc:	2900      	cmp	r1, #0
    8bde:	d0f1      	beq.n	8bc4 <_ZN6tflite16MicroInterpreterD1Ev+0x1a>
    8be0:	5852      	ldr	r2, [r2, r1]
    8be2:	4413      	add	r3, r2
    8be4:	681b      	ldr	r3, [r3, #0]
    8be6:	429c      	cmp	r4, r3
    8be8:	d20b      	bcs.n	8c02 <_ZN6tflite16MicroInterpreterD1Ev+0x58>
      TfLiteNode* node = &(node_and_registrations_[i].node);
    8bea:	6833      	ldr	r3, [r6, #0]
    8bec:	442b      	add	r3, r5
          node_and_registrations_[i].registration;
    8bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      if (registration != nullptr && registration->free != nullptr) {
    8bf0:	2a00      	cmp	r2, #0
    8bf2:	d0e9      	beq.n	8bc8 <_ZN6tflite16MicroInterpreterD1Ev+0x1e>
    8bf4:	6852      	ldr	r2, [r2, #4]
    8bf6:	2a00      	cmp	r2, #0
    8bf8:	d0e6      	beq.n	8bc8 <_ZN6tflite16MicroInterpreterD1Ev+0x1e>
        registration->free(&context_, node->user_data);
    8bfa:	6919      	ldr	r1, [r3, #16]
    8bfc:	4638      	mov	r0, r7
    8bfe:	4790      	blx	r2
    8c00:	e7e2      	b.n	8bc8 <_ZN6tflite16MicroInterpreterD1Ev+0x1e>
      }
    }
  }
}
    8c02:	4630      	mov	r0, r6
    8c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008c08 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>:

void MicroInterpreter::Init(tflite::Profiler* profiler) {
    8c08:	b510      	push	{r4, lr}
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs =
      model_->subgraphs();
    8c0a:	6842      	ldr	r2, [r0, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    8c0c:	6813      	ldr	r3, [r2, #0]
    8c0e:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c10:	881c      	ldrh	r4, [r3, #0]
    8c12:	2c08      	cmp	r4, #8
    8c14:	dd10      	ble.n	8c38 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x30>
    8c16:	891c      	ldrh	r4, [r3, #8]
    auto p = data_ + field_offset;
    8c18:	1913      	adds	r3, r2, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8c1a:	b17c      	cbz	r4, 8c3c <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x34>
    8c1c:	5912      	ldr	r2, [r2, r4]
    8c1e:	4413      	add	r3, r2
  if (subgraphs->size() != 1) {
    8c20:	681a      	ldr	r2, [r3, #0]
    8c22:	2a01      	cmp	r2, #1
    8c24:	d00c      	beq.n	8c40 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x38>
    8c26:	4604      	mov	r4, r0
    TF_LITE_REPORT_ERROR(error_reporter_,
    8c28:	490d      	ldr	r1, [pc, #52]	; (8c60 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x58>)
    8c2a:	68c0      	ldr	r0, [r0, #12]
    8c2c:	4b0d      	ldr	r3, [pc, #52]	; (8c64 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x5c>)
    8c2e:	4798      	blx	r3
                         "Only 1 subgraph is currently supported.\n");
    initialization_status_ = kTfLiteError;
    8c30:	2301      	movs	r3, #1
    8c32:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
    return;
    8c36:	bd10      	pop	{r4, pc}
    8c38:	2300      	movs	r3, #0
    8c3a:	e7f1      	b.n	8c20 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x18>
    8c3c:	2300      	movs	r3, #0
    8c3e:	e7ef      	b.n	8c20 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x18>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8c40:	1d1a      	adds	r2, r3, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8c42:	685b      	ldr	r3, [r3, #4]
    8c44:	4413      	add	r3, r2
  }
  subgraph_ = (*subgraphs)[0];
    8c46:	6703      	str	r3, [r0, #112]	; 0x70

  context_.impl_ = static_cast<void*>(&context_helper_);
    8c48:	f100 0374 	add.w	r3, r0, #116	; 0x74
    8c4c:	61c3      	str	r3, [r0, #28]
  context_.ReportError = context_helper_.ReportOpError;
    8c4e:	4b06      	ldr	r3, [pc, #24]	; (8c68 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x60>)
    8c50:	6243      	str	r3, [r0, #36]	; 0x24
  context_.recommended_num_threads = 1;
    8c52:	2301      	movs	r3, #1
    8c54:	6343      	str	r3, [r0, #52]	; 0x34
  context_.profiler = profiler;
    8c56:	6441      	str	r1, [r0, #68]	; 0x44

  initialization_status_ = kTfLiteOk;
    8c58:	2300      	movs	r3, #0
    8c5a:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
    8c5e:	bd10      	pop	{r4, pc}
    8c60:	00021a70 	.word	0x00021a70
    8c64:	0000118d 	.word	0x0000118d
    8c68:	00008b89 	.word	0x00008b89

00008c6c <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>:
MicroInterpreter::MicroInterpreter(const Model* model,
    8c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c6e:	4604      	mov	r4, r0
    8c70:	461f      	mov	r7, r3
    8c72:	9e07      	ldr	r6, [sp, #28]
      context_helper_(error_reporter_, &allocator_) {
    8c74:	2500      	movs	r5, #0
    8c76:	6005      	str	r5, [r0, #0]
    8c78:	6041      	str	r1, [r0, #4]
    8c7a:	6082      	str	r2, [r0, #8]
    8c7c:	60c6      	str	r6, [r0, #12]
    8c7e:	2258      	movs	r2, #88	; 0x58
    8c80:	4629      	mov	r1, r5
    8c82:	3010      	adds	r0, #16
    8c84:	4b0c      	ldr	r3, [pc, #48]	; (8cb8 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0x4c>)
    8c86:	4798      	blx	r3
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
    8c88:	4632      	mov	r2, r6
    8c8a:	9906      	ldr	r1, [sp, #24]
    8c8c:	4638      	mov	r0, r7
    8c8e:	4b0b      	ldr	r3, [pc, #44]	; (8cbc <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0x50>)
    8c90:	4798      	blx	r3
      context_helper_(error_reporter_, &allocator_) {
    8c92:	66a0      	str	r0, [r4, #104]	; 0x68
    8c94:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
    8c98:	2301      	movs	r3, #1
    8c9a:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
    8c9e:	68e3      	ldr	r3, [r4, #12]
// Check tensorflow_c_files/common.h for detailed descriptions.
class ContextHelper {
 public:
  explicit ContextHelper(ErrorReporter* error_reporter,
                         MicroAllocator* allocator)
      : allocator_(allocator), error_reporter_(error_reporter) {}
    8ca0:	6760      	str	r0, [r4, #116]	; 0x74
    8ca2:	67a3      	str	r3, [r4, #120]	; 0x78
    8ca4:	f04f 33ff 	mov.w	r3, #4294967295
    8ca8:	67e3      	str	r3, [r4, #124]	; 0x7c
  Init(profiler);
    8caa:	9908      	ldr	r1, [sp, #32]
    8cac:	4620      	mov	r0, r4
    8cae:	4b04      	ldr	r3, [pc, #16]	; (8cc0 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0x54>)
    8cb0:	4798      	blx	r3
}
    8cb2:	4620      	mov	r0, r4
    8cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8cb6:	bf00      	nop
    8cb8:	0001483d 	.word	0x0001483d
    8cbc:	000080fd 	.word	0x000080fd
    8cc0:	00008c09 	.word	0x00008c09

00008cc4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
  for (int32_t i = 0; i < size; ++i) {
    data[i] = flatbuffers::EndianScalar(data[i]);
  }
}

TfLiteStatus MicroInterpreter::AllocateTensors() {
    8cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8cc8:	b082      	sub	sp, #8
    8cca:	4604      	mov	r4, r0
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
    8ccc:	f100 0710 	add.w	r7, r0, #16
    8cd0:	9000      	str	r0, [sp, #0]
    8cd2:	6883      	ldr	r3, [r0, #8]
    8cd4:	463a      	mov	r2, r7
    8cd6:	6841      	ldr	r1, [r0, #4]
    8cd8:	6e80      	ldr	r0, [r0, #104]	; 0x68
    8cda:	4d44      	ldr	r5, [pc, #272]	; (8dec <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x128>)
    8cdc:	47a8      	blx	r5
    8cde:	b938      	cbnz	r0, 8cf0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c>
        CorrectTensorEndianness(thisTensor);
    }
  }

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
    8ce0:	4b43      	ldr	r3, [pc, #268]	; (8df0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x12c>)
    8ce2:	64a3      	str	r3, [r4, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
    8ce4:	2600      	movs	r6, #0
    8ce6:	6526      	str	r6, [r4, #80]	; 0x50
  context_.GetScratchBuffer = nullptr;
    8ce8:	6566      	str	r6, [r4, #84]	; 0x54
    8cea:	46b0      	mov	r8, r6
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8cec:	46b1      	mov	r9, r6
    8cee:	e01f      	b.n	8d30 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x6c>
    TF_LITE_REPORT_ERROR(error_reporter_,
    8cf0:	4940      	ldr	r1, [pc, #256]	; (8df4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x130>)
    8cf2:	68e0      	ldr	r0, [r4, #12]
    8cf4:	4b40      	ldr	r3, [pc, #256]	; (8df8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x134>)
    8cf6:	4798      	blx	r3
    initialization_status_ = kTfLiteError;
    8cf8:	2301      	movs	r3, #1
    8cfa:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
    return kTfLiteError;
    8cfe:	e05c      	b.n	8dba <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf6>
    8d00:	5852      	ldr	r2, [r2, r1]
    8d02:	4413      	add	r3, r2

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    8d04:	681b      	ldr	r3, [r3, #0]
    8d06:	429e      	cmp	r6, r3
    8d08:	d220      	bcs.n	8d4c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x88>
  static void* GetScratchBuffer(TfLiteContext* ctx, int buffer_idx);

  static void ReportOpError(struct TfLiteContext* context, const char* format,
                            ...);

  void SetNodeIndex(int idx) { current_node_idx_ = idx; }
    8d0a:	67e6      	str	r6, [r4, #124]	; 0x7c
    context_helper_.SetNodeIndex(i);
    auto* node = &(node_and_registrations_[i].node);
    8d0c:	6825      	ldr	r5, [r4, #0]
    8d0e:	4445      	add	r5, r8
    auto* registration = node_and_registrations_[i].registration;
    8d10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    size_t init_data_size;
    const char* init_data;
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    8d12:	695a      	ldr	r2, [r3, #20]
    8d14:	2a20      	cmp	r2, #32
      init_data = reinterpret_cast<const char*>(node->custom_initial_data);
    8d16:	bf07      	ittee	eq
    8d18:	69a9      	ldreq	r1, [r5, #24]
      init_data_size = node->custom_initial_data_size;
    8d1a:	69ea      	ldreq	r2, [r5, #28]
    } else {
      init_data = reinterpret_cast<const char*>(node->builtin_data);
    8d1c:	6969      	ldrne	r1, [r5, #20]
      init_data_size = 0;
    8d1e:	464a      	movne	r2, r9
    }
    if (registration->init) {
    8d20:	681b      	ldr	r3, [r3, #0]
    8d22:	b113      	cbz	r3, 8d2a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x66>
      node->user_data =
          registration->init(&context_, init_data, init_data_size);
    8d24:	4638      	mov	r0, r7
    8d26:	4798      	blx	r3
      node->user_data =
    8d28:	6128      	str	r0, [r5, #16]
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    8d2a:	3601      	adds	r6, #1
    8d2c:	f108 0828 	add.w	r8, r8, #40	; 0x28
    8d30:	6f22      	ldr	r2, [r4, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    8d32:	6813      	ldr	r3, [r2, #0]
    8d34:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8d36:	8819      	ldrh	r1, [r3, #0]
    8d38:	290a      	cmp	r1, #10
    8d3a:	dd05      	ble.n	8d48 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x84>
    8d3c:	8959      	ldrh	r1, [r3, #10]
    auto p = data_ + field_offset;
    8d3e:	1853      	adds	r3, r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8d40:	2900      	cmp	r1, #0
    8d42:	d1dd      	bne.n	8d00 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3c>
    8d44:	464b      	mov	r3, r9
    8d46:	e7dd      	b.n	8d04 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40>
    8d48:	464b      	mov	r3, r9
    8d4a:	e7db      	b.n	8d04 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40>
    8d4c:	f04f 33ff 	mov.w	r3, #4294967295
    8d50:	67e3      	str	r3, [r4, #124]	; 0x7c
  }
  context_helper_.SetNodeIndex(-1);

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is available
  // in Prepare stage.
  context_.RequestScratchBufferInArena =
    8d52:	4b2a      	ldr	r3, [pc, #168]	; (8dfc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x138>)
    8d54:	6523      	str	r3, [r4, #80]	; 0x50
    8d56:	2600      	movs	r6, #0
      context_helper_.RequestScratchBufferInArena;
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    8d58:	4635      	mov	r5, r6
    8d5a:	46b0      	mov	r8, r6
    8d5c:	e012      	b.n	8d84 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xc0>
    8d5e:	5852      	ldr	r2, [r2, r1]
    8d60:	4413      	add	r3, r2
    8d62:	681b      	ldr	r3, [r3, #0]
    8d64:	429d      	cmp	r5, r3
    8d66:	d22c      	bcs.n	8dc2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xfe>
    8d68:	67e5      	str	r5, [r4, #124]	; 0x7c
    // Set node idx to annotate the lifetime for scratch buffers.
    context_helper_.SetNodeIndex(i);
    auto* node = &(node_and_registrations_[i].node);
    8d6a:	6821      	ldr	r1, [r4, #0]
    8d6c:	4431      	add	r1, r6
    auto* registration = node_and_registrations_[i].registration;
    8d6e:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
    if (registration->prepare) {
    8d72:	f8d9 3008 	ldr.w	r3, [r9, #8]
    8d76:	b11b      	cbz	r3, 8d80 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xbc>
      TfLiteStatus prepare_status = registration->prepare(&context_, node);
    8d78:	4638      	mov	r0, r7
    8d7a:	4798      	blx	r3
      if (prepare_status != kTfLiteOk) {
    8d7c:	4682      	mov	sl, r0
    8d7e:	b978      	cbnz	r0, 8da0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xdc>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    8d80:	3501      	adds	r5, #1
    8d82:	3628      	adds	r6, #40	; 0x28
    8d84:	6f22      	ldr	r2, [r4, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    8d86:	6813      	ldr	r3, [r2, #0]
    8d88:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8d8a:	8819      	ldrh	r1, [r3, #0]
    8d8c:	290a      	cmp	r1, #10
    8d8e:	dd05      	ble.n	8d9c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xd8>
    8d90:	8959      	ldrh	r1, [r3, #10]
    auto p = data_ + field_offset;
    8d92:	1853      	adds	r3, r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8d94:	2900      	cmp	r1, #0
    8d96:	d1e2      	bne.n	8d5e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x9a>
    8d98:	4643      	mov	r3, r8
    8d9a:	e7e2      	b.n	8d62 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x9e>
    8d9c:	4643      	mov	r3, r8
    8d9e:	e7e0      	b.n	8d62 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x9e>
        TF_LITE_REPORT_ERROR(
    8da0:	4648      	mov	r0, r9
    8da2:	4b17      	ldr	r3, [pc, #92]	; (8e00 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x13c>)
    8da4:	4798      	blx	r3
    8da6:	68e4      	ldr	r4, [r4, #12]
    8da8:	f8cd a000 	str.w	sl, [sp]
    8dac:	462b      	mov	r3, r5
    8dae:	4602      	mov	r2, r0
    8db0:	4914      	ldr	r1, [pc, #80]	; (8e04 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x140>)
    8db2:	4620      	mov	r0, r4
    8db4:	4c10      	ldr	r4, [pc, #64]	; (8df8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x134>)
    8db6:	47a0      	blx	r4
            error_reporter_,
            "Node %s (number %df) failed to prepare with status %d",
            OpNameFromRegistration(registration), i, prepare_status);
        return kTfLiteError;
    8db8:	2301      	movs	r3, #1

  TF_LITE_ENSURE_OK(&context_,
                    allocator_.FinishModelAllocation(model_, &context_));
  tensors_allocated_ = true;
  return kTfLiteOk;
}
    8dba:	4618      	mov	r0, r3
    8dbc:	b002      	add	sp, #8
    8dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8dc2:	f04f 33ff 	mov.w	r3, #4294967295
    8dc6:	67e3      	str	r3, [r4, #124]	; 0x7c
  context_.AllocatePersistentBuffer = nullptr;
    8dc8:	2300      	movs	r3, #0
    8dca:	64a3      	str	r3, [r4, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
    8dcc:	6523      	str	r3, [r4, #80]	; 0x50
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
    8dce:	4b0e      	ldr	r3, [pc, #56]	; (8e08 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x144>)
    8dd0:	6563      	str	r3, [r4, #84]	; 0x54
  TF_LITE_ENSURE_OK(&context_,
    8dd2:	463a      	mov	r2, r7
    8dd4:	6861      	ldr	r1, [r4, #4]
    8dd6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    8dd8:	4b0c      	ldr	r3, [pc, #48]	; (8e0c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x148>)
    8dda:	4798      	blx	r3
    8ddc:	4603      	mov	r3, r0
    8dde:	2800      	cmp	r0, #0
    8de0:	d1eb      	bne.n	8dba <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf6>
  tensors_allocated_ = true;
    8de2:	2201      	movs	r2, #1
    8de4:	f884 206c 	strb.w	r2, [r4, #108]	; 0x6c
  return kTfLiteOk;
    8de8:	e7e7      	b.n	8dba <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf6>
    8dea:	bf00      	nop
    8dec:	00008259 	.word	0x00008259
    8df0:	00008b51 	.word	0x00008b51
    8df4:	00021cfc 	.word	0x00021cfc
    8df8:	0000118d 	.word	0x0000118d
    8dfc:	00008b61 	.word	0x00008b61
    8e00:	00008b2d 	.word	0x00008b2d
    8e04:	00021d20 	.word	0x00021d20
    8e08:	00008b79 	.word	0x00008b79
    8e0c:	000082f5 	.word	0x000082f5

00008e10 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
    8e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e14:	b087      	sub	sp, #28
    8e16:	4606      	mov	r6, r0
  if (initialization_status_ != kTfLiteOk) {
    8e18:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
    8e1c:	b94b      	cbnz	r3, 8e32 <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
    return kTfLiteError;
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
    8e1e:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    8e22:	b163      	cbz	r3, 8e3e <_ZN6tflite16MicroInterpreter6InvokeEv+0x2e>
TfLiteStatus MicroInterpreter::Invoke() {
    8e24:	f04f 0900 	mov.w	r9, #0
    8e28:	46c8      	mov	r8, r9
    8e2a:	46ca      	mov	sl, r9
#ifndef NDEBUG  // Omit profiler overhead from release builds.
      // The case where profiler == nullptr is handled by ScopedOperatorProfile.
      tflite::Profiler* profiler =
          reinterpret_cast<tflite::Profiler*>(context_.profiler);
      ScopedOperatorProfile scoped_profiler(
          profiler, OpNameFromRegistration(registration), i);
    8e2c:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 8f14 <_ZN6tflite16MicroInterpreter6InvokeEv+0x104>
    8e30:	e02e      	b.n	8e90 <_ZN6tflite16MicroInterpreter6InvokeEv+0x80>
    TF_LITE_REPORT_ERROR(error_reporter_,
    8e32:	4935      	ldr	r1, [pc, #212]	; (8f08 <_ZN6tflite16MicroInterpreter6InvokeEv+0xf8>)
    8e34:	68c0      	ldr	r0, [r0, #12]
    8e36:	4b35      	ldr	r3, [pc, #212]	; (8f0c <_ZN6tflite16MicroInterpreter6InvokeEv+0xfc>)
    8e38:	4798      	blx	r3
    return kTfLiteError;
    8e3a:	2501      	movs	r5, #1
    8e3c:	e01e      	b.n	8e7c <_ZN6tflite16MicroInterpreter6InvokeEv+0x6c>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
    8e3e:	4b34      	ldr	r3, [pc, #208]	; (8f10 <_ZN6tflite16MicroInterpreter6InvokeEv+0x100>)
    8e40:	4798      	blx	r3
    8e42:	4605      	mov	r5, r0
    8e44:	2800      	cmp	r0, #0
    8e46:	d0ed      	beq.n	8e24 <_ZN6tflite16MicroInterpreter6InvokeEv+0x14>
    8e48:	e018      	b.n	8e7c <_ZN6tflite16MicroInterpreter6InvokeEv+0x6c>
    8e4a:	4653      	mov	r3, sl
    8e4c:	e02c      	b.n	8ea8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x98>
    8e4e:	4653      	mov	r3, sl
    8e50:	e02a      	b.n	8ea8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x98>
class ScopedProfile {
 public:
  ScopedProfile(Profiler* profiler, const char* tag,
                Profiler::EventType event_type = Profiler::EventType::DEFAULT,
                int64_t event_metadata = 0)
      : profiler_(profiler), event_handle_(0) {
    8e52:	f8cd a014 	str.w	sl, [sp, #20]
    8e56:	e044      	b.n	8ee2 <_ZN6tflite16MicroInterpreter6InvokeEv+0xd2>
#endif
      invoke_status = registration->invoke(&context_, node);

      if (invoke_status == kTfLiteError) {
        TF_LITE_REPORT_ERROR(
    8e58:	4638      	mov	r0, r7
    8e5a:	4b2e      	ldr	r3, [pc, #184]	; (8f14 <_ZN6tflite16MicroInterpreter6InvokeEv+0x104>)
    8e5c:	4798      	blx	r3
    8e5e:	68f6      	ldr	r6, [r6, #12]
    8e60:	2501      	movs	r5, #1
    8e62:	9500      	str	r5, [sp, #0]
    8e64:	4643      	mov	r3, r8
    8e66:	4602      	mov	r2, r0
    8e68:	492b      	ldr	r1, [pc, #172]	; (8f18 <_ZN6tflite16MicroInterpreter6InvokeEv+0x108>)
    8e6a:	4630      	mov	r0, r6
    8e6c:	4e27      	ldr	r6, [pc, #156]	; (8f0c <_ZN6tflite16MicroInterpreter6InvokeEv+0xfc>)
    8e6e:	47b0      	blx	r6
      event_handle_ = profiler_->BeginEvent(tag, event_type, event_metadata);
    }
  }

  ~ScopedProfile() {
    if (profiler_) {
    8e70:	b124      	cbz	r4, 8e7c <_ZN6tflite16MicroInterpreter6InvokeEv+0x6c>
      profiler_->EndEvent(event_handle_);
    8e72:	6823      	ldr	r3, [r4, #0]
    8e74:	691b      	ldr	r3, [r3, #16]
    8e76:	9905      	ldr	r1, [sp, #20]
    8e78:	4620      	mov	r0, r4
    8e7a:	4798      	blx	r3
        return invoke_status;
      }
    }
  }
  return kTfLiteOk;
}
    8e7c:	4628      	mov	r0, r5
    8e7e:	b007      	add	sp, #28
    8e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8e84:	4605      	mov	r5, r0
    8e86:	e7f3      	b.n	8e70 <_ZN6tflite16MicroInterpreter6InvokeEv+0x60>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
    8e88:	f108 0801 	add.w	r8, r8, #1
    8e8c:	f109 0928 	add.w	r9, r9, #40	; 0x28
    8e90:	6f32      	ldr	r2, [r6, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    8e92:	6813      	ldr	r3, [r2, #0]
    8e94:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8e96:	8819      	ldrh	r1, [r3, #0]
    8e98:	290a      	cmp	r1, #10
    8e9a:	ddd6      	ble.n	8e4a <_ZN6tflite16MicroInterpreter6InvokeEv+0x3a>
    8e9c:	8959      	ldrh	r1, [r3, #10]
    auto p = data_ + field_offset;
    8e9e:	1853      	adds	r3, r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8ea0:	2900      	cmp	r1, #0
    8ea2:	d0d4      	beq.n	8e4e <_ZN6tflite16MicroInterpreter6InvokeEv+0x3e>
    8ea4:	5852      	ldr	r2, [r2, r1]
    8ea6:	4413      	add	r3, r2
    8ea8:	681b      	ldr	r3, [r3, #0]
    8eaa:	4598      	cmp	r8, r3
    8eac:	d22a      	bcs.n	8f04 <_ZN6tflite16MicroInterpreter6InvokeEv+0xf4>
    auto* node = &(node_and_registrations_[i].node);
    8eae:	6835      	ldr	r5, [r6, #0]
    8eb0:	444d      	add	r5, r9
    auto* registration = node_and_registrations_[i].registration;
    8eb2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    if (registration->invoke) {
    8eb4:	68fb      	ldr	r3, [r7, #12]
    8eb6:	2b00      	cmp	r3, #0
    8eb8:	d0e6      	beq.n	8e88 <_ZN6tflite16MicroInterpreter6InvokeEv+0x78>
          reinterpret_cast<tflite::Profiler*>(context_.profiler);
    8eba:	6c74      	ldr	r4, [r6, #68]	; 0x44
          profiler, OpNameFromRegistration(registration), i);
    8ebc:	4638      	mov	r0, r7
    8ebe:	47d8      	blx	fp
    if (profiler) {
    8ec0:	2c00      	cmp	r4, #0
    8ec2:	d0c6      	beq.n	8e52 <_ZN6tflite16MicroInterpreter6InvokeEv+0x42>
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
    8ec4:	6823      	ldr	r3, [r4, #0]
    8ec6:	2100      	movs	r1, #0
    8ec8:	2200      	movs	r2, #0
    8eca:	e9cd 1202 	strd	r1, r2, [sp, #8]

class ScopedOperatorProfile : public ScopedProfile {
 public:
  ScopedOperatorProfile(Profiler* profiler, const char* tag, int node_index)
      : ScopedProfile(profiler, tag, Profiler::EventType::OPERATOR_INVOKE_EVENT,
                      static_cast<uint32_t>(node_index)) {}
    8ece:	f8cd 8000 	str.w	r8, [sp]
    8ed2:	f8cd a004 	str.w	sl, [sp, #4]
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
    8ed6:	689b      	ldr	r3, [r3, #8]
    8ed8:	2202      	movs	r2, #2
    8eda:	4601      	mov	r1, r0
    8edc:	4620      	mov	r0, r4
    8ede:	4798      	blx	r3
    8ee0:	9005      	str	r0, [sp, #20]
      invoke_status = registration->invoke(&context_, node);
    8ee2:	68fb      	ldr	r3, [r7, #12]
    8ee4:	4629      	mov	r1, r5
    8ee6:	f106 0010 	add.w	r0, r6, #16
    8eea:	4798      	blx	r3
      if (invoke_status == kTfLiteError) {
    8eec:	2801      	cmp	r0, #1
    8eee:	d0b3      	beq.n	8e58 <_ZN6tflite16MicroInterpreter6InvokeEv+0x48>
      } else if (invoke_status != kTfLiteOk) {
    8ef0:	2800      	cmp	r0, #0
    8ef2:	d1c7      	bne.n	8e84 <_ZN6tflite16MicroInterpreter6InvokeEv+0x74>
    if (profiler_) {
    8ef4:	2c00      	cmp	r4, #0
    8ef6:	d0c7      	beq.n	8e88 <_ZN6tflite16MicroInterpreter6InvokeEv+0x78>
      profiler_->EndEvent(event_handle_);
    8ef8:	6823      	ldr	r3, [r4, #0]
    8efa:	691b      	ldr	r3, [r3, #16]
    8efc:	9905      	ldr	r1, [sp, #20]
    8efe:	4620      	mov	r0, r4
    8f00:	4798      	blx	r3
    8f02:	e7c1      	b.n	8e88 <_ZN6tflite16MicroInterpreter6InvokeEv+0x78>
  return kTfLiteOk;
    8f04:	2500      	movs	r5, #0
    8f06:	e7b9      	b.n	8e7c <_ZN6tflite16MicroInterpreter6InvokeEv+0x6c>
    8f08:	00021d58 	.word	0x00021d58
    8f0c:	0000118d 	.word	0x0000118d
    8f10:	00008cc5 	.word	0x00008cc5
    8f14:	00008b2d 	.word	0x00008b2d
    8f18:	00021d88 	.word	0x00021d88

00008f1c <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
    8f1c:	b538      	push	{r3, r4, r5, lr}
    }
    return nullptr;
  }

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const { return subgraph_->inputs()->Length(); }
    8f1e:	6f05      	ldr	r5, [r0, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    8f20:	682b      	ldr	r3, [r5, #0]
    8f22:	1aeb      	subs	r3, r5, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8f24:	881a      	ldrh	r2, [r3, #0]
    8f26:	2a06      	cmp	r2, #6
    8f28:	dd0e      	ble.n	8f48 <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    8f2a:	88db      	ldrh	r3, [r3, #6]
    auto p = data_ + field_offset;
    8f2c:	18ec      	adds	r4, r5, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8f2e:	b16b      	cbz	r3, 8f4c <_ZN6tflite16MicroInterpreter5inputEj+0x30>
    8f30:	58ea      	ldr	r2, [r5, r3]
    8f32:	4414      	add	r4, r2
  uoffset_t size() const { return EndianScalar(length_); }
    8f34:	6823      	ldr	r3, [r4, #0]
  const size_t length = inputs_size();
  if ((index < 0) || (index >= length)) {
    8f36:	4299      	cmp	r1, r3
    8f38:	d20a      	bcs.n	8f50 <_ZN6tflite16MicroInterpreter5inputEj+0x34>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8f3a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
  }
  return &(context_.tensors[inputs().Get(index)]);
    8f3e:	6863      	ldr	r3, [r4, #4]
    8f40:	6980      	ldr	r0, [r0, #24]
    8f42:	eb00 1083 	add.w	r0, r0, r3, lsl #6
}
    8f46:	bd38      	pop	{r3, r4, r5, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8f48:	2400      	movs	r4, #0
    8f4a:	e7f3      	b.n	8f34 <_ZN6tflite16MicroInterpreter5inputEj+0x18>
    8f4c:	2400      	movs	r4, #0
    8f4e:	e7f1      	b.n	8f34 <_ZN6tflite16MicroInterpreter5inputEj+0x18>
    8f50:	460a      	mov	r2, r1
    TF_LITE_REPORT_ERROR(error_reporter_,
    8f52:	4903      	ldr	r1, [pc, #12]	; (8f60 <_ZN6tflite16MicroInterpreter5inputEj+0x44>)
    8f54:	68c0      	ldr	r0, [r0, #12]
    8f56:	4c03      	ldr	r4, [pc, #12]	; (8f64 <_ZN6tflite16MicroInterpreter5inputEj+0x48>)
    8f58:	47a0      	blx	r4
    return nullptr;
    8f5a:	2000      	movs	r0, #0
    8f5c:	bd38      	pop	{r3, r4, r5, pc}
    8f5e:	bf00      	nop
    8f60:	00021dbc 	.word	0x00021dbc
    8f64:	0000118d 	.word	0x0000118d

00008f68 <_ZN6tflite31FloatToAsymmetricQuantizedUInt8Effi>:
  return result;
}

// Converts a float value into an unsigned eight-bit quantized value.
uint8_t FloatToAsymmetricQuantizedUInt8(const float value, const float scale,
                                        const int zero_point) {
    8f68:	b538      	push	{r3, r4, r5, lr}
    8f6a:	4615      	mov	r5, r2
  int32_t result = round(value / scale) + zero_point;
    8f6c:	4b08      	ldr	r3, [pc, #32]	; (8f90 <_ZN6tflite31FloatToAsymmetricQuantizedUInt8Effi+0x28>)
    8f6e:	4798      	blx	r3
  { return __builtin_roundf(__x); }
    8f70:	4b08      	ldr	r3, [pc, #32]	; (8f94 <_ZN6tflite31FloatToAsymmetricQuantizedUInt8Effi+0x2c>)
    8f72:	4798      	blx	r3
    8f74:	4604      	mov	r4, r0
    8f76:	4628      	mov	r0, r5
    8f78:	4b07      	ldr	r3, [pc, #28]	; (8f98 <_ZN6tflite31FloatToAsymmetricQuantizedUInt8Effi+0x30>)
    8f7a:	4798      	blx	r3
    8f7c:	4621      	mov	r1, r4
    8f7e:	4b07      	ldr	r3, [pc, #28]	; (8f9c <_ZN6tflite31FloatToAsymmetricQuantizedUInt8Effi+0x34>)
    8f80:	4798      	blx	r3
    8f82:	4b07      	ldr	r3, [pc, #28]	; (8fa0 <_ZN6tflite31FloatToAsymmetricQuantizedUInt8Effi+0x38>)
    8f84:	4798      	blx	r3
    result = kAsymmetricUInt8Min;
  }
  if (result > kAsymmetricUInt8Max) {
    result = kAsymmetricUInt8Max;
  }
  return result;
    8f86:	f380 0008 	usat	r0, #8, r0
}
    8f8a:	b2c0      	uxtb	r0, r0
    8f8c:	bd38      	pop	{r3, r4, r5, pc}
    8f8e:	bf00      	nop
    8f90:	000123c9 	.word	0x000123c9
    8f94:	00011335 	.word	0x00011335
    8f98:	000121b9 	.word	0x000121b9
    8f9c:	00012051 	.word	0x00012051
    8fa0:	000125ed 	.word	0x000125ed

00008fa4 <_ZN6tflite30FloatToAsymmetricQuantizedInt8Effi>:
  }
  return result;
}

int8_t FloatToAsymmetricQuantizedInt8(const float value, const float scale,
                                      const int zero_point) {
    8fa4:	b538      	push	{r3, r4, r5, lr}
    8fa6:	4615      	mov	r5, r2
  int32_t result = round(value / scale) + zero_point;
    8fa8:	4b08      	ldr	r3, [pc, #32]	; (8fcc <_ZN6tflite30FloatToAsymmetricQuantizedInt8Effi+0x28>)
    8faa:	4798      	blx	r3
    8fac:	4b08      	ldr	r3, [pc, #32]	; (8fd0 <_ZN6tflite30FloatToAsymmetricQuantizedInt8Effi+0x2c>)
    8fae:	4798      	blx	r3
    8fb0:	4604      	mov	r4, r0
    8fb2:	4628      	mov	r0, r5
    8fb4:	4b07      	ldr	r3, [pc, #28]	; (8fd4 <_ZN6tflite30FloatToAsymmetricQuantizedInt8Effi+0x30>)
    8fb6:	4798      	blx	r3
    8fb8:	4621      	mov	r1, r4
    8fba:	4b07      	ldr	r3, [pc, #28]	; (8fd8 <_ZN6tflite30FloatToAsymmetricQuantizedInt8Effi+0x34>)
    8fbc:	4798      	blx	r3
    8fbe:	4b07      	ldr	r3, [pc, #28]	; (8fdc <_ZN6tflite30FloatToAsymmetricQuantizedInt8Effi+0x38>)
    8fc0:	4798      	blx	r3
    result = kAsymmetricInt8Min;
  }
  if (result > kAsymmetricInt8Max) {
    result = kAsymmetricInt8Max;
  }
  return result;
    8fc2:	f300 0007 	ssat	r0, #8, r0
}
    8fc6:	b240      	sxtb	r0, r0
    8fc8:	bd38      	pop	{r3, r4, r5, pc}
    8fca:	bf00      	nop
    8fcc:	000123c9 	.word	0x000123c9
    8fd0:	00011335 	.word	0x00011335
    8fd4:	000121b9 	.word	0x000121b9
    8fd8:	00012051 	.word	0x00012051
    8fdc:	000125ed 	.word	0x000125ed

00008fe0 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
}

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
    8fe0:	4770      	bx	lr

00008fe2 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:
  }
  temp_ = aligned_result + size;
  return aligned_result;
}

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
    8fe2:	6903      	ldr	r3, [r0, #16]
    8fe4:	6183      	str	r3, [r0, #24]
    8fe6:	4770      	bx	lr

00008fe8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>:
                                                 size_t alignment) {
    8fe8:	b510      	push	{r4, lr}
    8fea:	4604      	mov	r4, r0
  if (head_ != temp_) {
    8fec:	6900      	ldr	r0, [r0, #16]
    8fee:	69a3      	ldr	r3, [r4, #24]
    8ff0:	4298      	cmp	r0, r3
    8ff2:	d106      	bne.n	9002 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x1a>
  uint8_t* ret = AllocateTemp(size, alignment);
    8ff4:	6823      	ldr	r3, [r4, #0]
    8ff6:	691b      	ldr	r3, [r3, #16]
    8ff8:	4620      	mov	r0, r4
    8ffa:	4798      	blx	r3
  head_ = temp_;
    8ffc:	69a3      	ldr	r3, [r4, #24]
    8ffe:	6123      	str	r3, [r4, #16]
}
    9000:	bd10      	pop	{r4, pc}
    TF_LITE_REPORT_ERROR(
    9002:	4903      	ldr	r1, [pc, #12]	; (9010 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x28>)
    9004:	6860      	ldr	r0, [r4, #4]
    9006:	4b03      	ldr	r3, [pc, #12]	; (9014 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x2c>)
    9008:	4798      	blx	r3
    return nullptr;
    900a:	2000      	movs	r0, #0
    900c:	bd10      	pop	{r4, pc}
    900e:	bf00      	nop
    9010:	00021e90 	.word	0x00021e90
    9014:	0000118d 	.word	0x0000118d

00009018 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:
                                                 size_t alignment) {
    9018:	b530      	push	{r4, r5, lr}
    901a:	b083      	sub	sp, #12
    901c:	4604      	mov	r4, r0
    901e:	460d      	mov	r5, r1
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
    9020:	6940      	ldr	r0, [r0, #20]
    9022:	4611      	mov	r1, r2
    9024:	1b40      	subs	r0, r0, r5
    9026:	4b09      	ldr	r3, [pc, #36]	; (904c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x34>)
    9028:	4798      	blx	r3
  if (aligned_result < head_) {
    902a:	6923      	ldr	r3, [r4, #16]
    902c:	4298      	cmp	r0, r3
  tail_ = aligned_result;
    902e:	bf28      	it	cs
    9030:	6160      	strcs	r0, [r4, #20]
  if (aligned_result < head_) {
    9032:	d301      	bcc.n	9038 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x20>
}
    9034:	b003      	add	sp, #12
    9036:	bd30      	pop	{r4, r5, pc}
    const size_t missing_memory = head_ - aligned_result;
    9038:	1a1b      	subs	r3, r3, r0
    TF_LITE_REPORT_ERROR(
    903a:	6860      	ldr	r0, [r4, #4]
    903c:	9300      	str	r3, [sp, #0]
    903e:	1aeb      	subs	r3, r5, r3
    9040:	462a      	mov	r2, r5
    9042:	4903      	ldr	r1, [pc, #12]	; (9050 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x38>)
    9044:	4c03      	ldr	r4, [pc, #12]	; (9054 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x3c>)
    9046:	47a0      	blx	r4
    return nullptr;
    9048:	2000      	movs	r0, #0
    904a:	e7f3      	b.n	9034 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x1c>
    904c:	000072b7 	.word	0x000072b7
    9050:	00021f00 	.word	0x00021f00
    9054:	0000118d 	.word	0x0000118d

00009058 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:
uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
    9058:	b530      	push	{r4, r5, lr}
    905a:	b083      	sub	sp, #12
    905c:	4605      	mov	r5, r0
    905e:	460c      	mov	r4, r1
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
    9060:	4611      	mov	r1, r2
    9062:	6980      	ldr	r0, [r0, #24]
    9064:	4b09      	ldr	r3, [pc, #36]	; (908c <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x34>)
    9066:	4798      	blx	r3
  const size_t available_memory = tail_ - aligned_result;
    9068:	696b      	ldr	r3, [r5, #20]
    906a:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    906c:	42a3      	cmp	r3, r4
    906e:	d303      	bcc.n	9078 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x20>
  temp_ = aligned_result + size;
    9070:	4404      	add	r4, r0
    9072:	61ac      	str	r4, [r5, #24]
}
    9074:	b003      	add	sp, #12
    9076:	bd30      	pop	{r4, r5, pc}
    TF_LITE_REPORT_ERROR(
    9078:	6868      	ldr	r0, [r5, #4]
    907a:	1ae2      	subs	r2, r4, r3
    907c:	9200      	str	r2, [sp, #0]
    907e:	4622      	mov	r2, r4
    9080:	4903      	ldr	r1, [pc, #12]	; (9090 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x38>)
    9082:	4c04      	ldr	r4, [pc, #16]	; (9094 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x3c>)
    9084:	47a0      	blx	r4
    return nullptr;
    9086:	2000      	movs	r0, #0
    9088:	e7f4      	b.n	9074 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x1c>
    908a:	bf00      	nop
    908c:	000072a9 	.word	0x000072a9
    9090:	00021f00 	.word	0x00021f00
    9094:	0000118d 	.word	0x0000118d

00009098 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
    9098:	b510      	push	{r4, lr}
    909a:	4604      	mov	r4, r0
    909c:	211c      	movs	r1, #28
    909e:	4b02      	ldr	r3, [pc, #8]	; (90a8 <_ZN6tflite21SimpleMemoryAllocatorD0Ev+0x10>)
    90a0:	4798      	blx	r3
    90a2:	4620      	mov	r0, r4
    90a4:	bd10      	pop	{r4, pc}
    90a6:	bf00      	nop
    90a8:	000091dd 	.word	0x000091dd

000090ac <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
    90ac:	b430      	push	{r4, r5}
      temp_(buffer_head_) {}
    90ae:	4d05      	ldr	r5, [pc, #20]	; (90c4 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x18>)
    90b0:	6005      	str	r5, [r0, #0]
    90b2:	6041      	str	r1, [r0, #4]
    90b4:	6082      	str	r2, [r0, #8]
    90b6:	60c3      	str	r3, [r0, #12]
    90b8:	6102      	str	r2, [r0, #16]
    90ba:	6143      	str	r3, [r0, #20]
    90bc:	6182      	str	r2, [r0, #24]
    90be:	bc30      	pop	{r4, r5}
    90c0:	4770      	bx	lr
    90c2:	bf00      	nop
    90c4:	00021e78 	.word	0x00021e78

000090c8 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
    90c8:	b500      	push	{lr}
    90ca:	b089      	sub	sp, #36	; 0x24
  TFLITE_DCHECK(error_reporter != nullptr);
    90cc:	b320      	cbz	r0, 9118 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x50>
    90ce:	4603      	mov	r3, r0
  TFLITE_DCHECK(buffer_head != nullptr);
    90d0:	b321      	cbz	r1, 911c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x54>
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
    90d2:	440a      	add	r2, r1
      temp_(buffer_head_) {}
    90d4:	4812      	ldr	r0, [pc, #72]	; (9120 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x58>)
    90d6:	9001      	str	r0, [sp, #4]
    90d8:	9302      	str	r3, [sp, #8]
    90da:	9103      	str	r1, [sp, #12]
    90dc:	9204      	str	r2, [sp, #16]
    90de:	9105      	str	r1, [sp, #20]
    90e0:	9206      	str	r2, [sp, #24]
    90e2:	9107      	str	r1, [sp, #28]
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
    90e4:	2204      	movs	r2, #4
    90e6:	211c      	movs	r1, #28
    90e8:	eb0d 0002 	add.w	r0, sp, r2
    90ec:	4b0d      	ldr	r3, [pc, #52]	; (9124 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x5c>)
    90ee:	4798      	blx	r3
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
    90f0:	4603      	mov	r3, r0
    90f2:	b168      	cbz	r0, 9110 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x48>
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
    90f4:	4a0a      	ldr	r2, [pc, #40]	; (9120 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x58>)
    90f6:	6002      	str	r2, [r0, #0]
    90f8:	9a02      	ldr	r2, [sp, #8]
    90fa:	6042      	str	r2, [r0, #4]
    90fc:	9a03      	ldr	r2, [sp, #12]
    90fe:	6082      	str	r2, [r0, #8]
    9100:	9a04      	ldr	r2, [sp, #16]
    9102:	60c2      	str	r2, [r0, #12]
    9104:	9a05      	ldr	r2, [sp, #20]
    9106:	6102      	str	r2, [r0, #16]
    9108:	9a06      	ldr	r2, [sp, #24]
    910a:	6142      	str	r2, [r0, #20]
    910c:	9a07      	ldr	r2, [sp, #28]
    910e:	6182      	str	r2, [r0, #24]
}
    9110:	4618      	mov	r0, r3
    9112:	b009      	add	sp, #36	; 0x24
    9114:	f85d fb04 	ldr.w	pc, [sp], #4
  TFLITE_DCHECK(error_reporter != nullptr);
    9118:	4b03      	ldr	r3, [pc, #12]	; (9128 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x60>)
    911a:	4798      	blx	r3
  TFLITE_DCHECK(buffer_head != nullptr);
    911c:	4b02      	ldr	r3, [pc, #8]	; (9128 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x60>)
    911e:	4798      	blx	r3
    9120:	00021e78 	.word	0x00021e78
    9124:	00009019 	.word	0x00009019
    9128:	000138bd 	.word	0x000138bd

0000912c <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>:

uint8_t* SimpleMemoryAllocator::GetHead() const { return head_; }
    912c:	6900      	ldr	r0, [r0, #16]
    912e:	4770      	bx	lr

00009130 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>:

uint8_t* SimpleMemoryAllocator::GetTail() const { return tail_; }
    9130:	6940      	ldr	r0, [r0, #20]
    9132:	4770      	bx	lr

00009134 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>:
size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory() const {
  return tail_ - head_;
    9134:	6942      	ldr	r2, [r0, #20]
    9136:	6900      	ldr	r0, [r0, #16]
}
    9138:	1a10      	subs	r0, r2, r0
    913a:	4770      	bx	lr

0000913c <TfLiteIntArrayGetSizeInBytes>:
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
    913c:	3001      	adds	r0, #1
}
    913e:	0080      	lsls	r0, r0, #2
    9140:	4770      	bx	lr
	...

00009144 <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
    9144:	280c      	cmp	r0, #12
    9146:	d820      	bhi.n	918a <TfLiteTypeGetName+0x46>
    9148:	e8df f000 	tbb	[pc, r0]
    914c:	0d0b0721 	.word	0x0d0b0721
    9150:	09131911 	.word	0x09131911
    9154:	1d1b0f15 	.word	0x1d1b0f15
    9158:	17          	.byte	0x17
    9159:	00          	.byte	0x00
    case kTfLiteNoType:
      return "NOTYPE";
    case kTfLiteFloat32:
      return "FLOAT32";
    915a:	480e      	ldr	r0, [pc, #56]	; (9194 <TfLiteTypeGetName+0x50>)
    915c:	4770      	bx	lr
    case kTfLiteInt16:
      return "INT16";
    915e:	480e      	ldr	r0, [pc, #56]	; (9198 <TfLiteTypeGetName+0x54>)
    9160:	4770      	bx	lr
    case kTfLiteInt32:
      return "INT32";
    9162:	480e      	ldr	r0, [pc, #56]	; (919c <TfLiteTypeGetName+0x58>)
    9164:	4770      	bx	lr
    case kTfLiteUInt8:
      return "UINT8";
    9166:	480e      	ldr	r0, [pc, #56]	; (91a0 <TfLiteTypeGetName+0x5c>)
    9168:	4770      	bx	lr
    case kTfLiteInt8:
      return "INT8";
    916a:	480e      	ldr	r0, [pc, #56]	; (91a4 <TfLiteTypeGetName+0x60>)
    916c:	4770      	bx	lr
    case kTfLiteInt64:
      return "INT64";
    916e:	480e      	ldr	r0, [pc, #56]	; (91a8 <TfLiteTypeGetName+0x64>)
    9170:	4770      	bx	lr
    case kTfLiteBool:
      return "BOOL";
    9172:	480e      	ldr	r0, [pc, #56]	; (91ac <TfLiteTypeGetName+0x68>)
    9174:	4770      	bx	lr
    case kTfLiteComplex64:
      return "COMPLEX64";
    9176:	480e      	ldr	r0, [pc, #56]	; (91b0 <TfLiteTypeGetName+0x6c>)
    9178:	4770      	bx	lr
    case kTfLiteComplex128:
      return "COMPLEX128";
    917a:	480e      	ldr	r0, [pc, #56]	; (91b4 <TfLiteTypeGetName+0x70>)
    917c:	4770      	bx	lr
    case kTfLiteString:
      return "STRING";
    917e:	480e      	ldr	r0, [pc, #56]	; (91b8 <TfLiteTypeGetName+0x74>)
    9180:	4770      	bx	lr
    case kTfLiteFloat16:
      return "FLOAT16";
    9182:	480e      	ldr	r0, [pc, #56]	; (91bc <TfLiteTypeGetName+0x78>)
    9184:	4770      	bx	lr
    case kTfLiteFloat64:
      return "FLOAT64";
    9186:	480e      	ldr	r0, [pc, #56]	; (91c0 <TfLiteTypeGetName+0x7c>)
    9188:	4770      	bx	lr
  }
  return "Unknown type";
    918a:	480e      	ldr	r0, [pc, #56]	; (91c4 <TfLiteTypeGetName+0x80>)
    918c:	4770      	bx	lr
      return "NOTYPE";
    918e:	480e      	ldr	r0, [pc, #56]	; (91c8 <TfLiteTypeGetName+0x84>)
}
    9190:	4770      	bx	lr
    9192:	bf00      	nop
    9194:	00021f4c 	.word	0x00021f4c
    9198:	00021f54 	.word	0x00021f54
    919c:	00021f5c 	.word	0x00021f5c
    91a0:	00021f64 	.word	0x00021f64
    91a4:	00021f6c 	.word	0x00021f6c
    91a8:	00021f74 	.word	0x00021f74
    91ac:	00021f7c 	.word	0x00021f7c
    91b0:	00021f84 	.word	0x00021f84
    91b4:	00021f90 	.word	0x00021f90
    91b8:	00021f9c 	.word	0x00021f9c
    91bc:	00021fa4 	.word	0x00021fa4
    91c0:	00021fac 	.word	0x00021fac
    91c4:	00021fb4 	.word	0x00021fb4
    91c8:	00021f44 	.word	0x00021f44

000091cc <__aeabi_atexit>:
    91cc:	460b      	mov	r3, r1
    91ce:	4601      	mov	r1, r0
    91d0:	4618      	mov	r0, r3
    91d2:	f00a bb99 	b.w	13908 <__cxa_atexit>
    91d6:	bf00      	nop

000091d8 <_ZdlPv>:
    91d8:	f00a bede 	b.w	13f98 <free>

000091dc <_ZdlPvj>:
    91dc:	f7ff bffc 	b.w	91d8 <_ZdlPv>

000091e0 <_ZdaPv>:
    91e0:	f7ff bffa 	b.w	91d8 <_ZdlPv>

000091e4 <__cxa_guard_acquire>:
    91e4:	b508      	push	{r3, lr}
    91e6:	6803      	ldr	r3, [r0, #0]
    91e8:	07db      	lsls	r3, r3, #31
    91ea:	d405      	bmi.n	91f8 <__cxa_guard_acquire+0x14>
    91ec:	7843      	ldrb	r3, [r0, #1]
    91ee:	b92b      	cbnz	r3, 91fc <__cxa_guard_acquire+0x18>
    91f0:	2301      	movs	r3, #1
    91f2:	7043      	strb	r3, [r0, #1]
    91f4:	4618      	mov	r0, r3
    91f6:	bd08      	pop	{r3, pc}
    91f8:	2000      	movs	r0, #0
    91fa:	bd08      	pop	{r3, pc}
    91fc:	2004      	movs	r0, #4
    91fe:	f000 fc05 	bl	9a0c <__cxa_allocate_exception>
    9202:	4b03      	ldr	r3, [pc, #12]	; (9210 <__cxa_guard_acquire+0x2c>)
    9204:	6003      	str	r3, [r0, #0]
    9206:	4a03      	ldr	r2, [pc, #12]	; (9214 <__cxa_guard_acquire+0x30>)
    9208:	4903      	ldr	r1, [pc, #12]	; (9218 <__cxa_guard_acquire+0x34>)
    920a:	f001 f92d 	bl	a468 <__cxa_throw>
    920e:	bf00      	nop
    9210:	00021ffc 	.word	0x00021ffc
    9214:	00009225 	.word	0x00009225
    9218:	00021fc4 	.word	0x00021fc4

0000921c <__cxa_guard_release>:
    921c:	2301      	movs	r3, #1
    921e:	6003      	str	r3, [r0, #0]
    9220:	4770      	bx	lr
    9222:	bf00      	nop

00009224 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>:
    9224:	b510      	push	{r4, lr}
    9226:	4b03      	ldr	r3, [pc, #12]	; (9234 <_ZN9__gnu_cxx20recursive_init_errorD1Ev+0x10>)
    9228:	6003      	str	r3, [r0, #0]
    922a:	4604      	mov	r4, r0
    922c:	f000 fd7a 	bl	9d24 <_ZNSt9exceptionD1Ev>
    9230:	4620      	mov	r0, r4
    9232:	bd10      	pop	{r4, pc}
    9234:	00021ffc 	.word	0x00021ffc

00009238 <_ZN9__gnu_cxx20recursive_init_errorD0Ev>:
    9238:	b510      	push	{r4, lr}
    923a:	4b05      	ldr	r3, [pc, #20]	; (9250 <_ZN9__gnu_cxx20recursive_init_errorD0Ev+0x18>)
    923c:	6003      	str	r3, [r0, #0]
    923e:	4604      	mov	r4, r0
    9240:	f000 fd70 	bl	9d24 <_ZNSt9exceptionD1Ev>
    9244:	4620      	mov	r0, r4
    9246:	2104      	movs	r1, #4
    9248:	f7ff ffc8 	bl	91dc <_ZdlPvj>
    924c:	4620      	mov	r0, r4
    924e:	bd10      	pop	{r4, pc}
    9250:	00021ffc 	.word	0x00021ffc

00009254 <_Znwj>:
    9254:	b510      	push	{r4, lr}
    9256:	2800      	cmp	r0, #0
    9258:	bf14      	ite	ne
    925a:	4604      	movne	r4, r0
    925c:	2401      	moveq	r4, #1
    925e:	4620      	mov	r0, r4
    9260:	f00a fe92 	bl	13f88 <malloc>
    9264:	b100      	cbz	r0, 9268 <_Znwj+0x14>
    9266:	bd10      	pop	{r4, pc}
    9268:	f001 f974 	bl	a554 <_ZSt15get_new_handlerv>
    926c:	b108      	cbz	r0, 9272 <_Znwj+0x1e>
    926e:	4780      	blx	r0
    9270:	e7f5      	b.n	925e <_Znwj+0xa>
    9272:	2004      	movs	r0, #4
    9274:	f000 fbca 	bl	9a0c <__cxa_allocate_exception>
    9278:	4b02      	ldr	r3, [pc, #8]	; (9284 <_Znwj+0x30>)
    927a:	6003      	str	r3, [r0, #0]
    927c:	4a02      	ldr	r2, [pc, #8]	; (9288 <_Znwj+0x34>)
    927e:	4903      	ldr	r1, [pc, #12]	; (928c <_Znwj+0x38>)
    9280:	f001 f8f2 	bl	a468 <__cxa_throw>
    9284:	00022230 	.word	0x00022230
    9288:	00009809 	.word	0x00009809
    928c:	0002220c 	.word	0x0002220c

00009290 <_Znaj>:
    9290:	f7ff bfe0 	b.w	9254 <_Znwj>

00009294 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    9294:	b510      	push	{r4, lr}
    9296:	4b03      	ldr	r3, [pc, #12]	; (92a4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
    9298:	6003      	str	r3, [r0, #0]
    929a:	4604      	mov	r4, r0
    929c:	f000 faee 	bl	987c <_ZN10__cxxabiv117__class_type_infoD1Ev>
    92a0:	4620      	mov	r0, r4
    92a2:	bd10      	pop	{r4, pc}
    92a4:	00022044 	.word	0x00022044

000092a8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    92a8:	b510      	push	{r4, lr}
    92aa:	4b05      	ldr	r3, [pc, #20]	; (92c0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
    92ac:	6003      	str	r3, [r0, #0]
    92ae:	4604      	mov	r4, r0
    92b0:	f000 fae4 	bl	987c <_ZN10__cxxabiv117__class_type_infoD1Ev>
    92b4:	4620      	mov	r0, r4
    92b6:	210c      	movs	r1, #12
    92b8:	f7ff ff90 	bl	91dc <_ZdlPvj>
    92bc:	4620      	mov	r0, r4
    92be:	bd10      	pop	{r4, pc}
    92c0:	00022044 	.word	0x00022044

000092c4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    92c4:	b570      	push	{r4, r5, r6, lr}
    92c6:	b082      	sub	sp, #8
    92c8:	460d      	mov	r5, r1
    92ca:	9c06      	ldr	r4, [sp, #24]
    92cc:	4294      	cmp	r4, r2
    92ce:	4606      	mov	r6, r0
    92d0:	d009      	beq.n	92e6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
    92d2:	68b0      	ldr	r0, [r6, #8]
    92d4:	6806      	ldr	r6, [r0, #0]
    92d6:	9406      	str	r4, [sp, #24]
    92d8:	6a34      	ldr	r4, [r6, #32]
    92da:	4629      	mov	r1, r5
    92dc:	46a4      	mov	ip, r4
    92de:	b002      	add	sp, #8
    92e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    92e4:	4760      	bx	ip
    92e6:	4619      	mov	r1, r3
    92e8:	9201      	str	r2, [sp, #4]
    92ea:	9300      	str	r3, [sp, #0]
    92ec:	f000 f86a 	bl	93c4 <_ZNKSt9type_infoeqERKS_>
    92f0:	9b00      	ldr	r3, [sp, #0]
    92f2:	9a01      	ldr	r2, [sp, #4]
    92f4:	2800      	cmp	r0, #0
    92f6:	d0ec      	beq.n	92d2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
    92f8:	2006      	movs	r0, #6
    92fa:	b002      	add	sp, #8
    92fc:	bd70      	pop	{r4, r5, r6, pc}
    92fe:	bf00      	nop

00009300 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    9300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9304:	b081      	sub	sp, #4
    9306:	460e      	mov	r6, r1
    9308:	4619      	mov	r1, r3
    930a:	461f      	mov	r7, r3
    930c:	4691      	mov	r9, r2
    930e:	4683      	mov	fp, r0
    9310:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    9312:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    9316:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    931a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    931c:	f000 f852 	bl	93c4 <_ZNKSt9type_infoeqERKS_>
    9320:	b170      	cbz	r0, 9340 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
    9322:	2e00      	cmp	r6, #0
    9324:	602c      	str	r4, [r5, #0]
    9326:	f885 9004 	strb.w	r9, [r5, #4]
    932a:	db1f      	blt.n	936c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
    932c:	4434      	add	r4, r6
    932e:	45a0      	cmp	r8, r4
    9330:	bf0c      	ite	eq
    9332:	2406      	moveq	r4, #6
    9334:	2401      	movne	r4, #1
    9336:	71ac      	strb	r4, [r5, #6]
    9338:	2000      	movs	r0, #0
    933a:	b001      	add	sp, #4
    933c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9340:	4544      	cmp	r4, r8
    9342:	d018      	beq.n	9376 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
    9344:	f8db 0008 	ldr.w	r0, [fp, #8]
    9348:	f8d0 e000 	ldr.w	lr, [r0]
    934c:	950d      	str	r5, [sp, #52]	; 0x34
    934e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    9352:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
    9356:	940a      	str	r4, [sp, #40]	; 0x28
    9358:	f8de 401c 	ldr.w	r4, [lr, #28]
    935c:	463b      	mov	r3, r7
    935e:	464a      	mov	r2, r9
    9360:	4631      	mov	r1, r6
    9362:	46a4      	mov	ip, r4
    9364:	b001      	add	sp, #4
    9366:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    936a:	4760      	bx	ip
    936c:	3602      	adds	r6, #2
    936e:	d1e3      	bne.n	9338 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
    9370:	2301      	movs	r3, #1
    9372:	71ab      	strb	r3, [r5, #6]
    9374:	e7e0      	b.n	9338 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
    9376:	4651      	mov	r1, sl
    9378:	4658      	mov	r0, fp
    937a:	f000 f823 	bl	93c4 <_ZNKSt9type_infoeqERKS_>
    937e:	2800      	cmp	r0, #0
    9380:	d0e0      	beq.n	9344 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
    9382:	2000      	movs	r0, #0
    9384:	f885 9005 	strb.w	r9, [r5, #5]
    9388:	b001      	add	sp, #4
    938a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    938e:	bf00      	nop

00009390 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    9390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9394:	4607      	mov	r7, r0
    9396:	460c      	mov	r4, r1
    9398:	4615      	mov	r5, r2
    939a:	461e      	mov	r6, r3
    939c:	f000 fa86 	bl	98ac <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    93a0:	b108      	cbz	r0, 93a6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
    93a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    93a6:	68b8      	ldr	r0, [r7, #8]
    93a8:	6807      	ldr	r7, [r0, #0]
    93aa:	4621      	mov	r1, r4
    93ac:	69bc      	ldr	r4, [r7, #24]
    93ae:	4633      	mov	r3, r6
    93b0:	462a      	mov	r2, r5
    93b2:	46a4      	mov	ip, r4
    93b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    93b8:	4760      	bx	ip
    93ba:	bf00      	nop

000093bc <_ZNSt9type_infoD1Ev>:
    93bc:	4770      	bx	lr
    93be:	bf00      	nop

000093c0 <_ZNKSt9type_info14__is_pointer_pEv>:
    93c0:	2000      	movs	r0, #0
    93c2:	4770      	bx	lr

000093c4 <_ZNKSt9type_infoeqERKS_>:
    93c4:	4281      	cmp	r1, r0
    93c6:	d011      	beq.n	93ec <_ZNKSt9type_infoeqERKS_+0x28>
    93c8:	b508      	push	{r3, lr}
    93ca:	6840      	ldr	r0, [r0, #4]
    93cc:	7803      	ldrb	r3, [r0, #0]
    93ce:	2b2a      	cmp	r3, #42	; 0x2a
    93d0:	d00a      	beq.n	93e8 <_ZNKSt9type_infoeqERKS_+0x24>
    93d2:	6849      	ldr	r1, [r1, #4]
    93d4:	780b      	ldrb	r3, [r1, #0]
    93d6:	2b2a      	cmp	r3, #42	; 0x2a
    93d8:	bf08      	it	eq
    93da:	3101      	addeq	r1, #1
    93dc:	f00b fd54 	bl	14e88 <strcmp>
    93e0:	fab0 f080 	clz	r0, r0
    93e4:	0940      	lsrs	r0, r0, #5
    93e6:	bd08      	pop	{r3, pc}
    93e8:	2000      	movs	r0, #0
    93ea:	bd08      	pop	{r3, pc}
    93ec:	2001      	movs	r0, #1
    93ee:	4770      	bx	lr

000093f0 <_ZSt19__throw_logic_errorPKc>:
    93f0:	b538      	push	{r3, r4, r5, lr}
    93f2:	4605      	mov	r5, r0
    93f4:	2008      	movs	r0, #8
    93f6:	f000 fb09 	bl	9a0c <__cxa_allocate_exception>
    93fa:	4629      	mov	r1, r5
    93fc:	4604      	mov	r4, r0
    93fe:	f001 f8f5 	bl	a5ec <_ZNSt11logic_errorC1EPKc>
    9402:	4620      	mov	r0, r4
    9404:	4a04      	ldr	r2, [pc, #16]	; (9418 <_ZSt19__throw_logic_errorPKc+0x28>)
    9406:	4905      	ldr	r1, [pc, #20]	; (941c <_ZSt19__throw_logic_errorPKc+0x2c>)
    9408:	f001 f82e 	bl	a468 <__cxa_throw>
    940c:	4620      	mov	r0, r4
    940e:	f000 fb15 	bl	9a3c <__cxa_free_exception>
    9412:	f000 fb37 	bl	9a84 <__cxa_end_cleanup>
    9416:	bf00      	nop
    9418:	0000a569 	.word	0x0000a569
    941c:	0002235c 	.word	0x0002235c

00009420 <_ZSt20__throw_length_errorPKc>:
    9420:	b538      	push	{r3, r4, r5, lr}
    9422:	4605      	mov	r5, r0
    9424:	2008      	movs	r0, #8
    9426:	f000 faf1 	bl	9a0c <__cxa_allocate_exception>
    942a:	4629      	mov	r1, r5
    942c:	4604      	mov	r4, r0
    942e:	f001 f8f1 	bl	a614 <_ZNSt12length_errorC1EPKc>
    9432:	4620      	mov	r0, r4
    9434:	4a04      	ldr	r2, [pc, #16]	; (9448 <_ZSt20__throw_length_errorPKc+0x28>)
    9436:	4905      	ldr	r1, [pc, #20]	; (944c <_ZSt20__throw_length_errorPKc+0x2c>)
    9438:	f001 f816 	bl	a468 <__cxa_throw>
    943c:	4620      	mov	r0, r4
    943e:	f000 fafd 	bl	9a3c <__cxa_free_exception>
    9442:	f000 fb1f 	bl	9a84 <__cxa_end_cleanup>
    9446:	bf00      	nop
    9448:	0000a5bd 	.word	0x0000a5bd
    944c:	00022368 	.word	0x00022368

00009450 <_ZNK12_GLOBAL__N_122generic_error_category4nameEv>:
    9450:	4800      	ldr	r0, [pc, #0]	; (9454 <_ZNK12_GLOBAL__N_122generic_error_category4nameEv+0x4>)
    9452:	4770      	bx	lr
    9454:	00022088 	.word	0x00022088

00009458 <_ZNK12_GLOBAL__N_121system_error_category4nameEv>:
    9458:	4800      	ldr	r0, [pc, #0]	; (945c <_ZNK12_GLOBAL__N_121system_error_category4nameEv+0x4>)
    945a:	4770      	bx	lr
    945c:	00022080 	.word	0x00022080

00009460 <_ZNKSt3_V214error_category23default_error_conditionEi>:
    9460:	6002      	str	r2, [r0, #0]
    9462:	6041      	str	r1, [r0, #4]
    9464:	4770      	bx	lr
    9466:	bf00      	nop

00009468 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei>:
    9468:	684b      	ldr	r3, [r1, #4]
    946a:	4283      	cmp	r3, r0
    946c:	d001      	beq.n	9472 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei+0xa>
    946e:	2000      	movs	r0, #0
    9470:	4770      	bx	lr
    9472:	6808      	ldr	r0, [r1, #0]
    9474:	1a80      	subs	r0, r0, r2
    9476:	fab0 f080 	clz	r0, r0
    947a:	0940      	lsrs	r0, r0, #5
    947c:	4770      	bx	lr
    947e:	bf00      	nop

00009480 <_ZN12_GLOBAL__N_121system_error_categoryD1Ev>:
    9480:	4770      	bx	lr
    9482:	bf00      	nop

00009484 <_ZN12_GLOBAL__N_122generic_error_categoryD1Ev>:
    9484:	4770      	bx	lr
    9486:	bf00      	nop

00009488 <_ZN12_GLOBAL__N_121system_error_categoryD0Ev>:
    9488:	b510      	push	{r4, lr}
    948a:	4604      	mov	r4, r0
    948c:	f7ff fea4 	bl	91d8 <_ZdlPv>
    9490:	4620      	mov	r0, r4
    9492:	bd10      	pop	{r4, pc}

00009494 <_ZN12_GLOBAL__N_122generic_error_categoryD0Ev>:
    9494:	b510      	push	{r4, lr}
    9496:	4604      	mov	r4, r0
    9498:	f7ff fe9e 	bl	91d8 <_ZdlPv>
    949c:	4620      	mov	r0, r4
    949e:	bd10      	pop	{r4, pc}

000094a0 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei>:
    94a0:	b510      	push	{r4, lr}
    94a2:	680b      	ldr	r3, [r1, #0]
    94a4:	b086      	sub	sp, #24
    94a6:	4604      	mov	r4, r0
    94a8:	691b      	ldr	r3, [r3, #16]
    94aa:	4668      	mov	r0, sp
    94ac:	4798      	blx	r3
    94ae:	4620      	mov	r0, r4
    94b0:	e89d 0006 	ldmia.w	sp, {r1, r2}
    94b4:	f001 f8b8 	bl	a628 <_ZNSt12__cow_stringC1EPKcj>
    94b8:	9800      	ldr	r0, [sp, #0]
    94ba:	ab02      	add	r3, sp, #8
    94bc:	4298      	cmp	r0, r3
    94be:	d001      	beq.n	94c4 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei+0x24>
    94c0:	f7ff fe8a 	bl	91d8 <_ZdlPv>
    94c4:	4620      	mov	r0, r4
    94c6:	b006      	add	sp, #24
    94c8:	bd10      	pop	{r4, pc}
    94ca:	9800      	ldr	r0, [sp, #0]
    94cc:	ab02      	add	r3, sp, #8
    94ce:	4298      	cmp	r0, r3
    94d0:	d001      	beq.n	94d6 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei+0x36>
    94d2:	f7ff fe81 	bl	91d8 <_ZdlPv>
    94d6:	f000 fad5 	bl	9a84 <__cxa_end_cleanup>
    94da:	bf00      	nop

000094dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27>:
    94dc:	b570      	push	{r4, r5, r6, lr}
    94de:	4605      	mov	r5, r0
    94e0:	b082      	sub	sp, #8
    94e2:	b301      	cbz	r1, 9526 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x4a>
    94e4:	1a54      	subs	r4, r2, r1
    94e6:	2c0f      	cmp	r4, #15
    94e8:	460e      	mov	r6, r1
    94ea:	9401      	str	r4, [sp, #4]
    94ec:	d80a      	bhi.n	9504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x28>
    94ee:	682b      	ldr	r3, [r5, #0]
    94f0:	2c01      	cmp	r4, #1
    94f2:	4618      	mov	r0, r3
    94f4:	d013      	beq.n	951e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x42>
    94f6:	b964      	cbnz	r4, 9512 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x36>
    94f8:	9a01      	ldr	r2, [sp, #4]
    94fa:	606a      	str	r2, [r5, #4]
    94fc:	2100      	movs	r1, #0
    94fe:	5499      	strb	r1, [r3, r2]
    9500:	b002      	add	sp, #8
    9502:	bd70      	pop	{r4, r5, r6, pc}
    9504:	2200      	movs	r2, #0
    9506:	a901      	add	r1, sp, #4
    9508:	f000 f956 	bl	97b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
    950c:	9b01      	ldr	r3, [sp, #4]
    950e:	6028      	str	r0, [r5, #0]
    9510:	60ab      	str	r3, [r5, #8]
    9512:	4622      	mov	r2, r4
    9514:	4631      	mov	r1, r6
    9516:	f00b f893 	bl	14640 <memcpy>
    951a:	682b      	ldr	r3, [r5, #0]
    951c:	e7ec      	b.n	94f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x1c>
    951e:	7832      	ldrb	r2, [r6, #0]
    9520:	701a      	strb	r2, [r3, #0]
    9522:	682b      	ldr	r3, [r5, #0]
    9524:	e7e8      	b.n	94f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x1c>
    9526:	b112      	cbz	r2, 952e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x52>
    9528:	4802      	ldr	r0, [pc, #8]	; (9534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x58>)
    952a:	f7ff ff61 	bl	93f0 <_ZSt19__throw_logic_errorPKc>
    952e:	9201      	str	r2, [sp, #4]
    9530:	6803      	ldr	r3, [r0, #0]
    9532:	e7e1      	b.n	94f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x1c>
    9534:	00022090 	.word	0x00022090

00009538 <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei>:
    9538:	b538      	push	{r3, r4, r5, lr}
    953a:	4604      	mov	r4, r0
    953c:	4610      	mov	r0, r2
    953e:	f00b fff3 	bl	15528 <strerror>
    9542:	f104 0308 	add.w	r3, r4, #8
    9546:	6023      	str	r3, [r4, #0]
    9548:	4605      	mov	r5, r0
    954a:	b140      	cbz	r0, 955e <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei+0x26>
    954c:	f00b fff8 	bl	15540 <strlen>
    9550:	4629      	mov	r1, r5
    9552:	182a      	adds	r2, r5, r0
    9554:	4620      	mov	r0, r4
    9556:	f7ff ffc1 	bl	94dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27>
    955a:	4620      	mov	r0, r4
    955c:	bd38      	pop	{r3, r4, r5, pc}
    955e:	4620      	mov	r0, r4
    9560:	f04f 32ff 	mov.w	r2, #4294967295
    9564:	4629      	mov	r1, r5
    9566:	f7ff ffb9 	bl	94dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27>
    956a:	4620      	mov	r0, r4
    956c:	bd38      	pop	{r3, r4, r5, pc}
    956e:	bf00      	nop

00009570 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition>:
    9570:	b530      	push	{r4, r5, lr}
    9572:	6803      	ldr	r3, [r0, #0]
    9574:	4d0c      	ldr	r5, [pc, #48]	; (95a8 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x38>)
    9576:	695b      	ldr	r3, [r3, #20]
    9578:	42ab      	cmp	r3, r5
    957a:	b083      	sub	sp, #12
    957c:	4614      	mov	r4, r2
    957e:	d10c      	bne.n	959a <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x2a>
    9580:	6863      	ldr	r3, [r4, #4]
    9582:	4283      	cmp	r3, r0
    9584:	d002      	beq.n	958c <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x1c>
    9586:	2000      	movs	r0, #0
    9588:	b003      	add	sp, #12
    958a:	bd30      	pop	{r4, r5, pc}
    958c:	6820      	ldr	r0, [r4, #0]
    958e:	1a40      	subs	r0, r0, r1
    9590:	fab0 f080 	clz	r0, r0
    9594:	0940      	lsrs	r0, r0, #5
    9596:	b003      	add	sp, #12
    9598:	bd30      	pop	{r4, r5, pc}
    959a:	460a      	mov	r2, r1
    959c:	4601      	mov	r1, r0
    959e:	4668      	mov	r0, sp
    95a0:	4798      	blx	r3
    95a2:	9900      	ldr	r1, [sp, #0]
    95a4:	9801      	ldr	r0, [sp, #4]
    95a6:	e7eb      	b.n	9580 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x10>
    95a8:	00009461 	.word	0x00009461

000095ac <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev>:
    95ac:	b510      	push	{r4, lr}
    95ae:	4c06      	ldr	r4, [pc, #24]	; (95c8 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x1c>)
    95b0:	4906      	ldr	r1, [pc, #24]	; (95cc <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x20>)
    95b2:	4807      	ldr	r0, [pc, #28]	; (95d0 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x24>)
    95b4:	4622      	mov	r2, r4
    95b6:	f7ff fe09 	bl	91cc <__aeabi_atexit>
    95ba:	4622      	mov	r2, r4
    95bc:	4905      	ldr	r1, [pc, #20]	; (95d4 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x28>)
    95be:	4806      	ldr	r0, [pc, #24]	; (95d8 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x2c>)
    95c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    95c4:	f7ff be02 	b.w	91cc <__aeabi_atexit>
    95c8:	20000000 	.word	0x20000000
    95cc:	00009485 	.word	0x00009485
    95d0:	20000008 	.word	0x20000008
    95d4:	00009481 	.word	0x00009481
    95d8:	20000004 	.word	0x20000004

000095dc <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
    95dc:	4b13      	ldr	r3, [pc, #76]	; (962c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x50>)
    95de:	4298      	cmp	r0, r3
    95e0:	b510      	push	{r4, lr}
    95e2:	d81f      	bhi.n	9624 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x48>
    95e4:	4288      	cmp	r0, r1
    95e6:	4604      	mov	r4, r0
    95e8:	d914      	bls.n	9614 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x38>
    95ea:	004a      	lsls	r2, r1, #1
    95ec:	4290      	cmp	r0, r2
    95ee:	bf38      	it	cc
    95f0:	4614      	movcc	r4, r2
    95f2:	f104 021d 	add.w	r2, r4, #29
    95f6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    95fa:	f104 000d 	add.w	r0, r4, #13
    95fe:	d90b      	bls.n	9618 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x3c>
    9600:	42a1      	cmp	r1, r4
    9602:	d209      	bcs.n	9618 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x3c>
    9604:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
    9608:	f3c2 020b 	ubfx	r2, r2, #0, #12
    960c:	1aa4      	subs	r4, r4, r2
    960e:	429c      	cmp	r4, r3
    9610:	bf28      	it	cs
    9612:	461c      	movcs	r4, r3
    9614:	f104 000d 	add.w	r0, r4, #13
    9618:	f7ff fe1c 	bl	9254 <_Znwj>
    961c:	2200      	movs	r2, #0
    961e:	6044      	str	r4, [r0, #4]
    9620:	6082      	str	r2, [r0, #8]
    9622:	bd10      	pop	{r4, pc}
    9624:	4802      	ldr	r0, [pc, #8]	; (9630 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x54>)
    9626:	f7ff fefb 	bl	9420 <_ZSt20__throw_length_errorPKc>
    962a:	bf00      	nop
    962c:	3ffffffc 	.word	0x3ffffffc
    9630:	000221cc 	.word	0x000221cc

00009634 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27>:
    9634:	b570      	push	{r4, r5, r6, lr}
    9636:	1a0c      	subs	r4, r1, r0
    9638:	4606      	mov	r6, r0
    963a:	2100      	movs	r1, #0
    963c:	4620      	mov	r0, r4
    963e:	f7ff ffcd 	bl	95dc <_ZNSs4_Rep9_S_createEjjRKSaIcE>
    9642:	2c01      	cmp	r4, #1
    9644:	4605      	mov	r5, r0
    9646:	f100 030c 	add.w	r3, r0, #12
    964a:	d005      	beq.n	9658 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x24>
    964c:	b984      	cbnz	r4, 9670 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x3c>
    964e:	4a0c      	ldr	r2, [pc, #48]	; (9680 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x4c>)
    9650:	4295      	cmp	r5, r2
    9652:	d106      	bne.n	9662 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x2e>
    9654:	4618      	mov	r0, r3
    9656:	bd70      	pop	{r4, r5, r6, pc}
    9658:	7832      	ldrb	r2, [r6, #0]
    965a:	7302      	strb	r2, [r0, #12]
    965c:	4a08      	ldr	r2, [pc, #32]	; (9680 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x4c>)
    965e:	4295      	cmp	r5, r2
    9660:	d0f8      	beq.n	9654 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x20>
    9662:	1929      	adds	r1, r5, r4
    9664:	2200      	movs	r2, #0
    9666:	602c      	str	r4, [r5, #0]
    9668:	60aa      	str	r2, [r5, #8]
    966a:	730a      	strb	r2, [r1, #12]
    966c:	4618      	mov	r0, r3
    966e:	bd70      	pop	{r4, r5, r6, pc}
    9670:	4618      	mov	r0, r3
    9672:	4631      	mov	r1, r6
    9674:	4622      	mov	r2, r4
    9676:	f00a ffe3 	bl	14640 <memcpy>
    967a:	4603      	mov	r3, r0
    967c:	e7e7      	b.n	964e <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x1a>
    967e:	bf00      	nop
    9680:	2000fb5c 	.word	0x2000fb5c

00009684 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
    9684:	f7ff bda8 	b.w	91d8 <_ZdlPv>

00009688 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>:
    9688:	4288      	cmp	r0, r1
    968a:	d002      	beq.n	9692 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0xa>
    968c:	b118      	cbz	r0, 9696 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0xe>
    968e:	f7ff bfd1 	b.w	9634 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27>
    9692:	4804      	ldr	r0, [pc, #16]	; (96a4 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x1c>)
    9694:	4770      	bx	lr
    9696:	2900      	cmp	r1, #0
    9698:	d0f9      	beq.n	968e <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x6>
    969a:	b508      	push	{r3, lr}
    969c:	4802      	ldr	r0, [pc, #8]	; (96a8 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x20>)
    969e:	f7ff fea7 	bl	93f0 <_ZSt19__throw_logic_errorPKc>
    96a2:	bf00      	nop
    96a4:	2000fb68 	.word	0x2000fb68
    96a8:	000221a0 	.word	0x000221a0

000096ac <_ZNSsC1EPKcjRKSaIcE>:
    96ac:	b538      	push	{r3, r4, r5, lr}
    96ae:	460d      	mov	r5, r1
    96b0:	4604      	mov	r4, r0
    96b2:	4411      	add	r1, r2
    96b4:	4628      	mov	r0, r5
    96b6:	461a      	mov	r2, r3
    96b8:	f04f 0300 	mov.w	r3, #0
    96bc:	f7ff ffe4 	bl	9688 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
    96c0:	6020      	str	r0, [r4, #0]
    96c2:	4620      	mov	r0, r4
    96c4:	bd38      	pop	{r3, r4, r5, pc}
    96c6:	bf00      	nop

000096c8 <_ZNSsC1EPKcRKSaIcE>:
    96c8:	b570      	push	{r4, r5, r6, lr}
    96ca:	4605      	mov	r5, r0
    96cc:	4616      	mov	r6, r2
    96ce:	460c      	mov	r4, r1
    96d0:	b161      	cbz	r1, 96ec <_ZNSsC1EPKcRKSaIcE+0x24>
    96d2:	4608      	mov	r0, r1
    96d4:	f00b ff34 	bl	15540 <strlen>
    96d8:	1821      	adds	r1, r4, r0
    96da:	4632      	mov	r2, r6
    96dc:	4620      	mov	r0, r4
    96de:	f04f 0300 	mov.w	r3, #0
    96e2:	f7ff ffd1 	bl	9688 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
    96e6:	6028      	str	r0, [r5, #0]
    96e8:	4628      	mov	r0, r5
    96ea:	bd70      	pop	{r4, r5, r6, pc}
    96ec:	f04f 31ff 	mov.w	r1, #4294967295
    96f0:	e7f3      	b.n	96da <_ZNSsC1EPKcRKSaIcE+0x12>
    96f2:	bf00      	nop

000096f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
    96f4:	4b24      	ldr	r3, [pc, #144]	; (9788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
    96f6:	681a      	ldr	r2, [r3, #0]
    96f8:	07d0      	lsls	r0, r2, #31
    96fa:	bf5c      	itt	pl
    96fc:	2201      	movpl	r2, #1
    96fe:	601a      	strpl	r2, [r3, #0]
    9700:	4b22      	ldr	r3, [pc, #136]	; (978c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
    9702:	681a      	ldr	r2, [r3, #0]
    9704:	07d1      	lsls	r1, r2, #31
    9706:	bf5c      	itt	pl
    9708:	2201      	movpl	r2, #1
    970a:	601a      	strpl	r2, [r3, #0]
    970c:	4b20      	ldr	r3, [pc, #128]	; (9790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
    970e:	681a      	ldr	r2, [r3, #0]
    9710:	07d2      	lsls	r2, r2, #31
    9712:	bf5c      	itt	pl
    9714:	2201      	movpl	r2, #1
    9716:	601a      	strpl	r2, [r3, #0]
    9718:	4b1e      	ldr	r3, [pc, #120]	; (9794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
    971a:	681a      	ldr	r2, [r3, #0]
    971c:	07d0      	lsls	r0, r2, #31
    971e:	bf5c      	itt	pl
    9720:	2201      	movpl	r2, #1
    9722:	601a      	strpl	r2, [r3, #0]
    9724:	4b1c      	ldr	r3, [pc, #112]	; (9798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
    9726:	681a      	ldr	r2, [r3, #0]
    9728:	07d1      	lsls	r1, r2, #31
    972a:	bf5c      	itt	pl
    972c:	2201      	movpl	r2, #1
    972e:	601a      	strpl	r2, [r3, #0]
    9730:	4b1a      	ldr	r3, [pc, #104]	; (979c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
    9732:	681a      	ldr	r2, [r3, #0]
    9734:	07d2      	lsls	r2, r2, #31
    9736:	bf5c      	itt	pl
    9738:	2201      	movpl	r2, #1
    973a:	601a      	strpl	r2, [r3, #0]
    973c:	4b18      	ldr	r3, [pc, #96]	; (97a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
    973e:	681a      	ldr	r2, [r3, #0]
    9740:	07d0      	lsls	r0, r2, #31
    9742:	bf5c      	itt	pl
    9744:	2201      	movpl	r2, #1
    9746:	601a      	strpl	r2, [r3, #0]
    9748:	4b16      	ldr	r3, [pc, #88]	; (97a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
    974a:	681a      	ldr	r2, [r3, #0]
    974c:	07d1      	lsls	r1, r2, #31
    974e:	bf5c      	itt	pl
    9750:	2201      	movpl	r2, #1
    9752:	601a      	strpl	r2, [r3, #0]
    9754:	4b14      	ldr	r3, [pc, #80]	; (97a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
    9756:	681a      	ldr	r2, [r3, #0]
    9758:	07d2      	lsls	r2, r2, #31
    975a:	bf5c      	itt	pl
    975c:	2201      	movpl	r2, #1
    975e:	601a      	strpl	r2, [r3, #0]
    9760:	4b12      	ldr	r3, [pc, #72]	; (97ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
    9762:	681a      	ldr	r2, [r3, #0]
    9764:	07d0      	lsls	r0, r2, #31
    9766:	bf5c      	itt	pl
    9768:	2201      	movpl	r2, #1
    976a:	601a      	strpl	r2, [r3, #0]
    976c:	4b10      	ldr	r3, [pc, #64]	; (97b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
    976e:	681a      	ldr	r2, [r3, #0]
    9770:	07d1      	lsls	r1, r2, #31
    9772:	bf5c      	itt	pl
    9774:	2201      	movpl	r2, #1
    9776:	601a      	strpl	r2, [r3, #0]
    9778:	4b0e      	ldr	r3, [pc, #56]	; (97b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
    977a:	681a      	ldr	r2, [r3, #0]
    977c:	07d2      	lsls	r2, r2, #31
    977e:	bf5c      	itt	pl
    9780:	2201      	movpl	r2, #1
    9782:	601a      	strpl	r2, [r3, #0]
    9784:	4770      	bx	lr
    9786:	bf00      	nop
    9788:	2000fb98 	.word	0x2000fb98
    978c:	2000fb94 	.word	0x2000fb94
    9790:	2000fb90 	.word	0x2000fb90
    9794:	2000fb8c 	.word	0x2000fb8c
    9798:	2000fb88 	.word	0x2000fb88
    979c:	2000fb84 	.word	0x2000fb84
    97a0:	2000fb80 	.word	0x2000fb80
    97a4:	2000fb7c 	.word	0x2000fb7c
    97a8:	2000fb78 	.word	0x2000fb78
    97ac:	2000fb74 	.word	0x2000fb74
    97b0:	2000fb70 	.word	0x2000fb70
    97b4:	2000fb6c 	.word	0x2000fb6c

000097b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
    97b8:	6808      	ldr	r0, [r1, #0]
    97ba:	2800      	cmp	r0, #0
    97bc:	b508      	push	{r3, lr}
    97be:	db1a      	blt.n	97f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x3e>
    97c0:	4290      	cmp	r0, r2
    97c2:	d90a      	bls.n	97da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
    97c4:	0052      	lsls	r2, r2, #1
    97c6:	4290      	cmp	r0, r2
    97c8:	d207      	bcs.n	97da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
    97ca:	2a00      	cmp	r2, #0
    97cc:	db0a      	blt.n	97e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
    97ce:	600a      	str	r2, [r1, #0]
    97d0:	1c50      	adds	r0, r2, #1
    97d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    97d6:	f7ff bd3d 	b.w	9254 <_Znwj>
    97da:	3001      	adds	r0, #1
    97dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    97e0:	f7ff bd38 	b.w	9254 <_Znwj>
    97e4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    97e8:	600b      	str	r3, [r1, #0]
    97ea:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    97ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    97f2:	f7ff bd2f 	b.w	9254 <_Znwj>
    97f6:	4801      	ldr	r0, [pc, #4]	; (97fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x44>)
    97f8:	f7ff fe12 	bl	9420 <_ZSt20__throw_length_errorPKc>
    97fc:	000221e4 	.word	0x000221e4

00009800 <_ZNKSt9bad_alloc4whatEv>:
    9800:	4800      	ldr	r0, [pc, #0]	; (9804 <_ZNKSt9bad_alloc4whatEv+0x4>)
    9802:	4770      	bx	lr
    9804:	000221fc 	.word	0x000221fc

00009808 <_ZNSt9bad_allocD1Ev>:
    9808:	b510      	push	{r4, lr}
    980a:	4b03      	ldr	r3, [pc, #12]	; (9818 <_ZNSt9bad_allocD1Ev+0x10>)
    980c:	6003      	str	r3, [r0, #0]
    980e:	4604      	mov	r4, r0
    9810:	f000 fa88 	bl	9d24 <_ZNSt9exceptionD1Ev>
    9814:	4620      	mov	r0, r4
    9816:	bd10      	pop	{r4, pc}
    9818:	00022230 	.word	0x00022230

0000981c <_ZNSt9bad_allocD0Ev>:
    981c:	b510      	push	{r4, lr}
    981e:	4b05      	ldr	r3, [pc, #20]	; (9834 <_ZNSt9bad_allocD0Ev+0x18>)
    9820:	6003      	str	r3, [r0, #0]
    9822:	4604      	mov	r4, r0
    9824:	f000 fa7e 	bl	9d24 <_ZNSt9exceptionD1Ev>
    9828:	4620      	mov	r0, r4
    982a:	2104      	movs	r1, #4
    982c:	f7ff fcd6 	bl	91dc <_ZdlPvj>
    9830:	4620      	mov	r0, r4
    9832:	bd10      	pop	{r4, pc}
    9834:	00022230 	.word	0x00022230

00009838 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    9838:	b570      	push	{r4, r5, r6, lr}
    983a:	6803      	ldr	r3, [r0, #0]
    983c:	b084      	sub	sp, #16
    983e:	2400      	movs	r4, #0
    9840:	699e      	ldr	r6, [r3, #24]
    9842:	9400      	str	r4, [sp, #0]
    9844:	2310      	movs	r3, #16
    9846:	4615      	mov	r5, r2
    9848:	9302      	str	r3, [sp, #8]
    984a:	6812      	ldr	r2, [r2, #0]
    984c:	f88d 4004 	strb.w	r4, [sp, #4]
    9850:	466b      	mov	r3, sp
    9852:	9403      	str	r4, [sp, #12]
    9854:	47b0      	blx	r6
    9856:	f89d 3004 	ldrb.w	r3, [sp, #4]
    985a:	f003 0306 	and.w	r3, r3, #6
    985e:	2b06      	cmp	r3, #6
    9860:	bf03      	ittte	eq
    9862:	9b00      	ldreq	r3, [sp, #0]
    9864:	602b      	streq	r3, [r5, #0]
    9866:	2001      	moveq	r0, #1
    9868:	4620      	movne	r0, r4
    986a:	b004      	add	sp, #16
    986c:	bd70      	pop	{r4, r5, r6, pc}
    986e:	bf00      	nop

00009870 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    9870:	9800      	ldr	r0, [sp, #0]
    9872:	4290      	cmp	r0, r2
    9874:	bf0c      	ite	eq
    9876:	2006      	moveq	r0, #6
    9878:	2001      	movne	r0, #1
    987a:	4770      	bx	lr

0000987c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    987c:	b510      	push	{r4, lr}
    987e:	4b03      	ldr	r3, [pc, #12]	; (988c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
    9880:	6003      	str	r3, [r0, #0]
    9882:	4604      	mov	r4, r0
    9884:	f7ff fd9a 	bl	93bc <_ZNSt9type_infoD1Ev>
    9888:	4620      	mov	r0, r4
    988a:	bd10      	pop	{r4, pc}
    988c:	00022274 	.word	0x00022274

00009890 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    9890:	b510      	push	{r4, lr}
    9892:	4b05      	ldr	r3, [pc, #20]	; (98a8 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
    9894:	6003      	str	r3, [r0, #0]
    9896:	4604      	mov	r4, r0
    9898:	f7ff fd90 	bl	93bc <_ZNSt9type_infoD1Ev>
    989c:	4620      	mov	r0, r4
    989e:	2108      	movs	r1, #8
    98a0:	f7ff fc9c 	bl	91dc <_ZdlPvj>
    98a4:	4620      	mov	r0, r4
    98a6:	bd10      	pop	{r4, pc}
    98a8:	00022274 	.word	0x00022274

000098ac <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    98ac:	b538      	push	{r3, r4, r5, lr}
    98ae:	4615      	mov	r5, r2
    98b0:	461c      	mov	r4, r3
    98b2:	f7ff fd87 	bl	93c4 <_ZNKSt9type_infoeqERKS_>
    98b6:	b120      	cbz	r0, 98c2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
    98b8:	2208      	movs	r2, #8
    98ba:	2306      	movs	r3, #6
    98bc:	6025      	str	r5, [r4, #0]
    98be:	60e2      	str	r2, [r4, #12]
    98c0:	7123      	strb	r3, [r4, #4]
    98c2:	bd38      	pop	{r3, r4, r5, pc}

000098c4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    98c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    98c8:	4617      	mov	r7, r2
    98ca:	461c      	mov	r4, r3
    98cc:	4606      	mov	r6, r0
    98ce:	460d      	mov	r5, r1
    98d0:	f7ff fd78 	bl	93c4 <_ZNKSt9type_infoeqERKS_>
    98d4:	b908      	cbnz	r0, 98da <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
    98d6:	2c03      	cmp	r4, #3
    98d8:	d901      	bls.n	98de <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
    98da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98de:	682b      	ldr	r3, [r5, #0]
    98e0:	463a      	mov	r2, r7
    98e2:	4631      	mov	r1, r6
    98e4:	4628      	mov	r0, r5
    98e6:	695b      	ldr	r3, [r3, #20]
    98e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    98ec:	4718      	bx	r3
    98ee:	bf00      	nop

000098f0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    98f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    98f2:	b083      	sub	sp, #12
    98f4:	4617      	mov	r7, r2
    98f6:	9d08      	ldr	r5, [sp, #32]
    98f8:	990a      	ldr	r1, [sp, #40]	; 0x28
    98fa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    98fc:	428d      	cmp	r5, r1
    98fe:	4606      	mov	r6, r0
    9900:	d00b      	beq.n	991a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
    9902:	4619      	mov	r1, r3
    9904:	4630      	mov	r0, r6
    9906:	f7ff fd5d 	bl	93c4 <_ZNKSt9type_infoeqERKS_>
    990a:	b118      	cbz	r0, 9914 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
    990c:	2301      	movs	r3, #1
    990e:	6025      	str	r5, [r4, #0]
    9910:	7127      	strb	r7, [r4, #4]
    9912:	71a3      	strb	r3, [r4, #6]
    9914:	2000      	movs	r0, #0
    9916:	b003      	add	sp, #12
    9918:	bdf0      	pop	{r4, r5, r6, r7, pc}
    991a:	9909      	ldr	r1, [sp, #36]	; 0x24
    991c:	9301      	str	r3, [sp, #4]
    991e:	f7ff fd51 	bl	93c4 <_ZNKSt9type_infoeqERKS_>
    9922:	b118      	cbz	r0, 992c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
    9924:	2000      	movs	r0, #0
    9926:	7167      	strb	r7, [r4, #5]
    9928:	b003      	add	sp, #12
    992a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    992c:	9b01      	ldr	r3, [sp, #4]
    992e:	e7e8      	b.n	9902 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

00009930 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
    9930:	b4f0      	push	{r4, r5, r6, r7}
    9932:	4c1b      	ldr	r4, [pc, #108]	; (99a0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>)
    9934:	f850 7c08 	ldr.w	r7, [r0, #-8]
    9938:	6861      	ldr	r1, [r4, #4]
    993a:	f1a0 0608 	sub.w	r6, r0, #8
    993e:	b1c9      	cbz	r1, 9974 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
    9940:	19f5      	adds	r5, r6, r7
    9942:	42a9      	cmp	r1, r5
    9944:	d01b      	beq.n	997e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
    9946:	684a      	ldr	r2, [r1, #4]
    9948:	b32a      	cbz	r2, 9996 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
    994a:	4295      	cmp	r5, r2
    994c:	d303      	bcc.n	9956 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x26>
    994e:	e022      	b.n	9996 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
    9950:	429d      	cmp	r5, r3
    9952:	d205      	bcs.n	9960 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
    9954:	461a      	mov	r2, r3
    9956:	6853      	ldr	r3, [r2, #4]
    9958:	1d0c      	adds	r4, r1, #4
    995a:	4611      	mov	r1, r2
    995c:	2b00      	cmp	r3, #0
    995e:	d1f7      	bne.n	9950 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
    9960:	6811      	ldr	r1, [r2, #0]
    9962:	1855      	adds	r5, r2, r1
    9964:	42ae      	cmp	r6, r5
    9966:	d013      	beq.n	9990 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
    9968:	f840 3c04 	str.w	r3, [r0, #-4]
    996c:	6823      	ldr	r3, [r4, #0]
    996e:	605e      	str	r6, [r3, #4]
    9970:	bcf0      	pop	{r4, r5, r6, r7}
    9972:	4770      	bx	lr
    9974:	f840 1c04 	str.w	r1, [r0, #-4]
    9978:	6066      	str	r6, [r4, #4]
    997a:	bcf0      	pop	{r4, r5, r6, r7}
    997c:	4770      	bx	lr
    997e:	680b      	ldr	r3, [r1, #0]
    9980:	684a      	ldr	r2, [r1, #4]
    9982:	f840 2c04 	str.w	r2, [r0, #-4]
    9986:	441f      	add	r7, r3
    9988:	f840 7c08 	str.w	r7, [r0, #-8]
    998c:	6066      	str	r6, [r4, #4]
    998e:	e7ef      	b.n	9970 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
    9990:	440f      	add	r7, r1
    9992:	6017      	str	r7, [r2, #0]
    9994:	e7ec      	b.n	9970 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
    9996:	4613      	mov	r3, r2
    9998:	3404      	adds	r4, #4
    999a:	460a      	mov	r2, r1
    999c:	e7e0      	b.n	9960 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
    999e:	bf00      	nop
    99a0:	2000fb9c 	.word	0x2000fb9c

000099a4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
    99a4:	b430      	push	{r4, r5}
    99a6:	4c18      	ldr	r4, [pc, #96]	; (9a08 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x64>)
    99a8:	f100 0108 	add.w	r1, r0, #8
    99ac:	6863      	ldr	r3, [r4, #4]
    99ae:	2908      	cmp	r1, #8
    99b0:	bf38      	it	cc
    99b2:	2108      	movcc	r1, #8
    99b4:	b313      	cbz	r3, 99fc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
    99b6:	3107      	adds	r1, #7
    99b8:	681a      	ldr	r2, [r3, #0]
    99ba:	f021 0107 	bic.w	r1, r1, #7
    99be:	4291      	cmp	r1, r2
    99c0:	d804      	bhi.n	99cc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
    99c2:	e01d      	b.n	9a00 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5c>
    99c4:	6802      	ldr	r2, [r0, #0]
    99c6:	4291      	cmp	r1, r2
    99c8:	d905      	bls.n	99d6 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
    99ca:	4603      	mov	r3, r0
    99cc:	6858      	ldr	r0, [r3, #4]
    99ce:	2800      	cmp	r0, #0
    99d0:	d1f8      	bne.n	99c4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
    99d2:	bc30      	pop	{r4, r5}
    99d4:	4770      	bx	lr
    99d6:	3304      	adds	r3, #4
    99d8:	1a52      	subs	r2, r2, r1
    99da:	2a07      	cmp	r2, #7
    99dc:	d90a      	bls.n	99f4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
    99de:	1845      	adds	r5, r0, r1
    99e0:	6844      	ldr	r4, [r0, #4]
    99e2:	606c      	str	r4, [r5, #4]
    99e4:	681c      	ldr	r4, [r3, #0]
    99e6:	5042      	str	r2, [r0, r1]
    99e8:	6021      	str	r1, [r4, #0]
    99ea:	601d      	str	r5, [r3, #0]
    99ec:	f104 0008 	add.w	r0, r4, #8
    99f0:	bc30      	pop	{r4, r5}
    99f2:	4770      	bx	lr
    99f4:	6842      	ldr	r2, [r0, #4]
    99f6:	601a      	str	r2, [r3, #0]
    99f8:	4604      	mov	r4, r0
    99fa:	e7f7      	b.n	99ec <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
    99fc:	4618      	mov	r0, r3
    99fe:	e7e8      	b.n	99d2 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
    9a00:	4618      	mov	r0, r3
    9a02:	1d23      	adds	r3, r4, #4
    9a04:	e7e8      	b.n	99d8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
    9a06:	bf00      	nop
    9a08:	2000fb9c 	.word	0x2000fb9c

00009a0c <__cxa_allocate_exception>:
    9a0c:	b538      	push	{r3, r4, r5, lr}
    9a0e:	f100 0580 	add.w	r5, r0, #128	; 0x80
    9a12:	4628      	mov	r0, r5
    9a14:	f00a fab8 	bl	13f88 <malloc>
    9a18:	4604      	mov	r4, r0
    9a1a:	b138      	cbz	r0, 9a2c <__cxa_allocate_exception+0x20>
    9a1c:	2280      	movs	r2, #128	; 0x80
    9a1e:	2100      	movs	r1, #0
    9a20:	4620      	mov	r0, r4
    9a22:	f00a ff0b 	bl	1483c <memset>
    9a26:	f104 0080 	add.w	r0, r4, #128	; 0x80
    9a2a:	bd38      	pop	{r3, r4, r5, pc}
    9a2c:	4628      	mov	r0, r5
    9a2e:	f7ff ffb9 	bl	99a4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    9a32:	4604      	mov	r4, r0
    9a34:	2800      	cmp	r0, #0
    9a36:	d1f1      	bne.n	9a1c <__cxa_allocate_exception+0x10>
    9a38:	f000 fccc 	bl	a3d4 <_ZSt9terminatev>

00009a3c <__cxa_free_exception>:
    9a3c:	4a06      	ldr	r2, [pc, #24]	; (9a58 <__cxa_free_exception+0x1c>)
    9a3e:	6893      	ldr	r3, [r2, #8]
    9a40:	3880      	subs	r0, #128	; 0x80
    9a42:	4298      	cmp	r0, r3
    9a44:	d905      	bls.n	9a52 <__cxa_free_exception+0x16>
    9a46:	68d2      	ldr	r2, [r2, #12]
    9a48:	4413      	add	r3, r2
    9a4a:	4298      	cmp	r0, r3
    9a4c:	d201      	bcs.n	9a52 <__cxa_free_exception+0x16>
    9a4e:	f7ff bf6f 	b.w	9930 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    9a52:	f00a baa1 	b.w	13f98 <free>
    9a56:	bf00      	nop
    9a58:	2000fb9c 	.word	0x2000fb9c

00009a5c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
    9a5c:	b538      	push	{r3, r4, r5, lr}
    9a5e:	4c08      	ldr	r4, [pc, #32]	; (9a80 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
    9a60:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
    9a64:	4628      	mov	r0, r5
    9a66:	60e5      	str	r5, [r4, #12]
    9a68:	f00a fa8e 	bl	13f88 <malloc>
    9a6c:	60a0      	str	r0, [r4, #8]
    9a6e:	b120      	cbz	r0, 9a7a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
    9a70:	2300      	movs	r3, #0
    9a72:	6060      	str	r0, [r4, #4]
    9a74:	6005      	str	r5, [r0, #0]
    9a76:	6043      	str	r3, [r0, #4]
    9a78:	bd38      	pop	{r3, r4, r5, pc}
    9a7a:	60e0      	str	r0, [r4, #12]
    9a7c:	6060      	str	r0, [r4, #4]
    9a7e:	bd38      	pop	{r3, r4, r5, pc}
    9a80:	2000fb9c 	.word	0x2000fb9c

00009a84 <__cxa_end_cleanup>:
    9a84:	b41e      	push	{r1, r2, r3, r4}
    9a86:	f000 f891 	bl	9bac <__gnu_end_cleanup>
    9a8a:	bc1e      	pop	{r1, r2, r3, r4}
    9a8c:	f009 fd0c 	bl	134a8 <_Unwind_Resume>

00009a90 <__cxa_type_match>:
    9a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a92:	7802      	ldrb	r2, [r0, #0]
    9a94:	2a47      	cmp	r2, #71	; 0x47
    9a96:	b083      	sub	sp, #12
    9a98:	460d      	mov	r5, r1
    9a9a:	461f      	mov	r7, r3
    9a9c:	d01e      	beq.n	9adc <__cxa_type_match+0x4c>
    9a9e:	2300      	movs	r3, #0
    9aa0:	4c27      	ldr	r4, [pc, #156]	; (9b40 <__cxa_type_match+0xb0>)
    9aa2:	9301      	str	r3, [sp, #4]
    9aa4:	6823      	ldr	r3, [r4, #0]
    9aa6:	4620      	mov	r0, r4
    9aa8:	689b      	ldr	r3, [r3, #8]
    9aaa:	4798      	blx	r3
    9aac:	b180      	cbz	r0, 9ad0 <__cxa_type_match+0x40>
    9aae:	9b01      	ldr	r3, [sp, #4]
    9ab0:	681b      	ldr	r3, [r3, #0]
    9ab2:	9301      	str	r3, [sp, #4]
    9ab4:	2602      	movs	r6, #2
    9ab6:	682b      	ldr	r3, [r5, #0]
    9ab8:	4621      	mov	r1, r4
    9aba:	4628      	mov	r0, r5
    9abc:	691c      	ldr	r4, [r3, #16]
    9abe:	aa01      	add	r2, sp, #4
    9ac0:	2301      	movs	r3, #1
    9ac2:	47a0      	blx	r4
    9ac4:	b130      	cbz	r0, 9ad4 <__cxa_type_match+0x44>
    9ac6:	9b01      	ldr	r3, [sp, #4]
    9ac8:	603b      	str	r3, [r7, #0]
    9aca:	4630      	mov	r0, r6
    9acc:	b003      	add	sp, #12
    9ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9ad0:	2601      	movs	r6, #1
    9ad2:	e7f0      	b.n	9ab6 <__cxa_type_match+0x26>
    9ad4:	4606      	mov	r6, r0
    9ad6:	4630      	mov	r0, r6
    9ad8:	b003      	add	sp, #12
    9ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9adc:	7843      	ldrb	r3, [r0, #1]
    9ade:	2b4e      	cmp	r3, #78	; 0x4e
    9ae0:	d1dd      	bne.n	9a9e <__cxa_type_match+0xe>
    9ae2:	7883      	ldrb	r3, [r0, #2]
    9ae4:	2b55      	cmp	r3, #85	; 0x55
    9ae6:	d1da      	bne.n	9a9e <__cxa_type_match+0xe>
    9ae8:	78c3      	ldrb	r3, [r0, #3]
    9aea:	2b43      	cmp	r3, #67	; 0x43
    9aec:	d019      	beq.n	9b22 <__cxa_type_match+0x92>
    9aee:	78c3      	ldrb	r3, [r0, #3]
    9af0:	2b43      	cmp	r3, #67	; 0x43
    9af2:	d1d4      	bne.n	9a9e <__cxa_type_match+0xe>
    9af4:	7903      	ldrb	r3, [r0, #4]
    9af6:	2b43      	cmp	r3, #67	; 0x43
    9af8:	d1d1      	bne.n	9a9e <__cxa_type_match+0xe>
    9afa:	7943      	ldrb	r3, [r0, #5]
    9afc:	2b2b      	cmp	r3, #43	; 0x2b
    9afe:	d1ce      	bne.n	9a9e <__cxa_type_match+0xe>
    9b00:	7983      	ldrb	r3, [r0, #6]
    9b02:	2b2b      	cmp	r3, #43	; 0x2b
    9b04:	d1cb      	bne.n	9a9e <__cxa_type_match+0xe>
    9b06:	79c3      	ldrb	r3, [r0, #7]
    9b08:	2b01      	cmp	r3, #1
    9b0a:	d8c8      	bhi.n	9a9e <__cxa_type_match+0xe>
    9b0c:	d004      	beq.n	9b18 <__cxa_type_match+0x88>
    9b0e:	f850 4c20 	ldr.w	r4, [r0, #-32]
    9b12:	3058      	adds	r0, #88	; 0x58
    9b14:	9001      	str	r0, [sp, #4]
    9b16:	e7c5      	b.n	9aa4 <__cxa_type_match+0x14>
    9b18:	f850 0c20 	ldr.w	r0, [r0, #-32]
    9b1c:	f850 4c78 	ldr.w	r4, [r0, #-120]
    9b20:	e7f8      	b.n	9b14 <__cxa_type_match+0x84>
    9b22:	7903      	ldrb	r3, [r0, #4]
    9b24:	2b46      	cmp	r3, #70	; 0x46
    9b26:	d1e2      	bne.n	9aee <__cxa_type_match+0x5e>
    9b28:	7943      	ldrb	r3, [r0, #5]
    9b2a:	2b4f      	cmp	r3, #79	; 0x4f
    9b2c:	d1df      	bne.n	9aee <__cxa_type_match+0x5e>
    9b2e:	7983      	ldrb	r3, [r0, #6]
    9b30:	2b52      	cmp	r3, #82	; 0x52
    9b32:	d1dc      	bne.n	9aee <__cxa_type_match+0x5e>
    9b34:	79c3      	ldrb	r3, [r0, #7]
    9b36:	2b00      	cmp	r3, #0
    9b38:	d1d9      	bne.n	9aee <__cxa_type_match+0x5e>
    9b3a:	9301      	str	r3, [sp, #4]
    9b3c:	4c01      	ldr	r4, [pc, #4]	; (9b44 <__cxa_type_match+0xb4>)
    9b3e:	e7b1      	b.n	9aa4 <__cxa_type_match+0x14>
    9b40:	000222c4 	.word	0x000222c4
    9b44:	000222bc 	.word	0x000222bc

00009b48 <__cxa_begin_cleanup>:
    9b48:	b510      	push	{r4, lr}
    9b4a:	4604      	mov	r4, r0
    9b4c:	f000 f902 	bl	9d54 <__cxa_get_globals>
    9b50:	7823      	ldrb	r3, [r4, #0]
    9b52:	2b47      	cmp	r3, #71	; 0x47
    9b54:	f1a4 0220 	sub.w	r2, r4, #32
    9b58:	d004      	beq.n	9b64 <__cxa_begin_cleanup+0x1c>
    9b5a:	6883      	ldr	r3, [r0, #8]
    9b5c:	bb23      	cbnz	r3, 9ba8 <__cxa_begin_cleanup+0x60>
    9b5e:	6082      	str	r2, [r0, #8]
    9b60:	2001      	movs	r0, #1
    9b62:	bd10      	pop	{r4, pc}
    9b64:	7863      	ldrb	r3, [r4, #1]
    9b66:	2b4e      	cmp	r3, #78	; 0x4e
    9b68:	d1f7      	bne.n	9b5a <__cxa_begin_cleanup+0x12>
    9b6a:	78a3      	ldrb	r3, [r4, #2]
    9b6c:	2b55      	cmp	r3, #85	; 0x55
    9b6e:	d1f4      	bne.n	9b5a <__cxa_begin_cleanup+0x12>
    9b70:	78e3      	ldrb	r3, [r4, #3]
    9b72:	2b43      	cmp	r3, #67	; 0x43
    9b74:	d1f1      	bne.n	9b5a <__cxa_begin_cleanup+0x12>
    9b76:	7923      	ldrb	r3, [r4, #4]
    9b78:	2b43      	cmp	r3, #67	; 0x43
    9b7a:	d1ee      	bne.n	9b5a <__cxa_begin_cleanup+0x12>
    9b7c:	7963      	ldrb	r3, [r4, #5]
    9b7e:	2b2b      	cmp	r3, #43	; 0x2b
    9b80:	d1eb      	bne.n	9b5a <__cxa_begin_cleanup+0x12>
    9b82:	79a3      	ldrb	r3, [r4, #6]
    9b84:	2b2b      	cmp	r3, #43	; 0x2b
    9b86:	d1e8      	bne.n	9b5a <__cxa_begin_cleanup+0x12>
    9b88:	79e3      	ldrb	r3, [r4, #7]
    9b8a:	2b01      	cmp	r3, #1
    9b8c:	d8e5      	bhi.n	9b5a <__cxa_begin_cleanup+0x12>
    9b8e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    9b92:	3301      	adds	r3, #1
    9b94:	2b01      	cmp	r3, #1
    9b96:	f844 3c04 	str.w	r3, [r4, #-4]
    9b9a:	d1e1      	bne.n	9b60 <__cxa_begin_cleanup+0x18>
    9b9c:	6883      	ldr	r3, [r0, #8]
    9b9e:	f844 3c08 	str.w	r3, [r4, #-8]
    9ba2:	6082      	str	r2, [r0, #8]
    9ba4:	2001      	movs	r0, #1
    9ba6:	bd10      	pop	{r4, pc}
    9ba8:	f000 fc14 	bl	a3d4 <_ZSt9terminatev>

00009bac <__gnu_end_cleanup>:
    9bac:	b508      	push	{r3, lr}
    9bae:	f000 f8d1 	bl	9d54 <__cxa_get_globals>
    9bb2:	6883      	ldr	r3, [r0, #8]
    9bb4:	b383      	cbz	r3, 9c18 <__gnu_end_cleanup+0x6c>
    9bb6:	f893 2020 	ldrb.w	r2, [r3, #32]
    9bba:	2a47      	cmp	r2, #71	; 0x47
    9bbc:	d004      	beq.n	9bc8 <__gnu_end_cleanup+0x1c>
    9bbe:	2200      	movs	r2, #0
    9bc0:	6082      	str	r2, [r0, #8]
    9bc2:	f103 0020 	add.w	r0, r3, #32
    9bc6:	bd08      	pop	{r3, pc}
    9bc8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
    9bcc:	2a4e      	cmp	r2, #78	; 0x4e
    9bce:	d1f6      	bne.n	9bbe <__gnu_end_cleanup+0x12>
    9bd0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    9bd4:	2a55      	cmp	r2, #85	; 0x55
    9bd6:	d1f2      	bne.n	9bbe <__gnu_end_cleanup+0x12>
    9bd8:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
    9bdc:	2a43      	cmp	r2, #67	; 0x43
    9bde:	d1ee      	bne.n	9bbe <__gnu_end_cleanup+0x12>
    9be0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    9be4:	2a43      	cmp	r2, #67	; 0x43
    9be6:	d1ea      	bne.n	9bbe <__gnu_end_cleanup+0x12>
    9be8:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    9bec:	2a2b      	cmp	r2, #43	; 0x2b
    9bee:	d1e6      	bne.n	9bbe <__gnu_end_cleanup+0x12>
    9bf0:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
    9bf4:	2a2b      	cmp	r2, #43	; 0x2b
    9bf6:	d1e2      	bne.n	9bbe <__gnu_end_cleanup+0x12>
    9bf8:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    9bfc:	2a01      	cmp	r2, #1
    9bfe:	d8de      	bhi.n	9bbe <__gnu_end_cleanup+0x12>
    9c00:	69da      	ldr	r2, [r3, #28]
    9c02:	3a01      	subs	r2, #1
    9c04:	61da      	str	r2, [r3, #28]
    9c06:	2a00      	cmp	r2, #0
    9c08:	d1db      	bne.n	9bc2 <__gnu_end_cleanup+0x16>
    9c0a:	699a      	ldr	r2, [r3, #24]
    9c0c:	6082      	str	r2, [r0, #8]
    9c0e:	2200      	movs	r2, #0
    9c10:	619a      	str	r2, [r3, #24]
    9c12:	f103 0020 	add.w	r0, r3, #32
    9c16:	bd08      	pop	{r3, pc}
    9c18:	f000 fbdc 	bl	a3d4 <_ZSt9terminatev>

00009c1c <__cxa_begin_catch>:
    9c1c:	b538      	push	{r3, r4, r5, lr}
    9c1e:	4604      	mov	r4, r0
    9c20:	f000 f898 	bl	9d54 <__cxa_get_globals>
    9c24:	7822      	ldrb	r2, [r4, #0]
    9c26:	6803      	ldr	r3, [r0, #0]
    9c28:	2a47      	cmp	r2, #71	; 0x47
    9c2a:	f1a4 0120 	sub.w	r1, r4, #32
    9c2e:	d004      	beq.n	9c3a <__cxa_begin_catch+0x1e>
    9c30:	bb83      	cbnz	r3, 9c94 <__cxa_begin_catch+0x78>
    9c32:	461c      	mov	r4, r3
    9c34:	6001      	str	r1, [r0, #0]
    9c36:	4620      	mov	r0, r4
    9c38:	bd38      	pop	{r3, r4, r5, pc}
    9c3a:	7862      	ldrb	r2, [r4, #1]
    9c3c:	2a4e      	cmp	r2, #78	; 0x4e
    9c3e:	d1f7      	bne.n	9c30 <__cxa_begin_catch+0x14>
    9c40:	78a2      	ldrb	r2, [r4, #2]
    9c42:	2a55      	cmp	r2, #85	; 0x55
    9c44:	d1f4      	bne.n	9c30 <__cxa_begin_catch+0x14>
    9c46:	78e2      	ldrb	r2, [r4, #3]
    9c48:	2a43      	cmp	r2, #67	; 0x43
    9c4a:	d1f1      	bne.n	9c30 <__cxa_begin_catch+0x14>
    9c4c:	7922      	ldrb	r2, [r4, #4]
    9c4e:	2a43      	cmp	r2, #67	; 0x43
    9c50:	d1ee      	bne.n	9c30 <__cxa_begin_catch+0x14>
    9c52:	7962      	ldrb	r2, [r4, #5]
    9c54:	2a2b      	cmp	r2, #43	; 0x2b
    9c56:	d1eb      	bne.n	9c30 <__cxa_begin_catch+0x14>
    9c58:	79a2      	ldrb	r2, [r4, #6]
    9c5a:	2a2b      	cmp	r2, #43	; 0x2b
    9c5c:	d1e8      	bne.n	9c30 <__cxa_begin_catch+0x14>
    9c5e:	79e2      	ldrb	r2, [r4, #7]
    9c60:	2a01      	cmp	r2, #1
    9c62:	d8e5      	bhi.n	9c30 <__cxa_begin_catch+0x14>
    9c64:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    9c68:	2a00      	cmp	r2, #0
    9c6a:	db10      	blt.n	9c8e <__cxa_begin_catch+0x72>
    9c6c:	3201      	adds	r2, #1
    9c6e:	6845      	ldr	r5, [r0, #4]
    9c70:	f844 2c0c 	str.w	r2, [r4, #-12]
    9c74:	3d01      	subs	r5, #1
    9c76:	6045      	str	r5, [r0, #4]
    9c78:	428b      	cmp	r3, r1
    9c7a:	bf1c      	itt	ne
    9c7c:	f844 3c10 	strne.w	r3, [r4, #-16]
    9c80:	6001      	strne	r1, [r0, #0]
    9c82:	4620      	mov	r0, r4
    9c84:	6a64      	ldr	r4, [r4, #36]	; 0x24
    9c86:	f009 f861 	bl	12d4c <_Unwind_Complete>
    9c8a:	4620      	mov	r0, r4
    9c8c:	bd38      	pop	{r3, r4, r5, pc}
    9c8e:	f1c2 0201 	rsb	r2, r2, #1
    9c92:	e7ec      	b.n	9c6e <__cxa_begin_catch+0x52>
    9c94:	f000 fb9e 	bl	a3d4 <_ZSt9terminatev>

00009c98 <__cxa_end_catch>:
    9c98:	b508      	push	{r3, lr}
    9c9a:	f000 f857 	bl	9d4c <__cxa_get_globals_fast>
    9c9e:	4602      	mov	r2, r0
    9ca0:	6800      	ldr	r0, [r0, #0]
    9ca2:	2800      	cmp	r0, #0
    9ca4:	d03d      	beq.n	9d22 <__cxa_end_catch+0x8a>
    9ca6:	f890 3020 	ldrb.w	r3, [r0, #32]
    9caa:	2b47      	cmp	r3, #71	; 0x47
    9cac:	d006      	beq.n	9cbc <__cxa_end_catch+0x24>
    9cae:	2300      	movs	r3, #0
    9cb0:	6013      	str	r3, [r2, #0]
    9cb2:	3020      	adds	r0, #32
    9cb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    9cb8:	f009 b84a 	b.w	12d50 <_Unwind_DeleteException>
    9cbc:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    9cc0:	2b4e      	cmp	r3, #78	; 0x4e
    9cc2:	d1f4      	bne.n	9cae <__cxa_end_catch+0x16>
    9cc4:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    9cc8:	2b55      	cmp	r3, #85	; 0x55
    9cca:	d1f0      	bne.n	9cae <__cxa_end_catch+0x16>
    9ccc:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    9cd0:	2b43      	cmp	r3, #67	; 0x43
    9cd2:	d1ec      	bne.n	9cae <__cxa_end_catch+0x16>
    9cd4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    9cd8:	2b43      	cmp	r3, #67	; 0x43
    9cda:	d1e8      	bne.n	9cae <__cxa_end_catch+0x16>
    9cdc:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
    9ce0:	2b2b      	cmp	r3, #43	; 0x2b
    9ce2:	d1e4      	bne.n	9cae <__cxa_end_catch+0x16>
    9ce4:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
    9ce8:	2b2b      	cmp	r3, #43	; 0x2b
    9cea:	d1e0      	bne.n	9cae <__cxa_end_catch+0x16>
    9cec:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
    9cf0:	2b01      	cmp	r3, #1
    9cf2:	d8dc      	bhi.n	9cae <__cxa_end_catch+0x16>
    9cf4:	6943      	ldr	r3, [r0, #20]
    9cf6:	2b00      	cmp	r3, #0
    9cf8:	db05      	blt.n	9d06 <__cxa_end_catch+0x6e>
    9cfa:	3b01      	subs	r3, #1
    9cfc:	d008      	beq.n	9d10 <__cxa_end_catch+0x78>
    9cfe:	1c5a      	adds	r2, r3, #1
    9d00:	d00d      	beq.n	9d1e <__cxa_end_catch+0x86>
    9d02:	6143      	str	r3, [r0, #20]
    9d04:	bd08      	pop	{r3, pc}
    9d06:	3301      	adds	r3, #1
    9d08:	d1fb      	bne.n	9d02 <__cxa_end_catch+0x6a>
    9d0a:	6901      	ldr	r1, [r0, #16]
    9d0c:	6011      	str	r1, [r2, #0]
    9d0e:	e7f8      	b.n	9d02 <__cxa_end_catch+0x6a>
    9d10:	6903      	ldr	r3, [r0, #16]
    9d12:	6013      	str	r3, [r2, #0]
    9d14:	3020      	adds	r0, #32
    9d16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    9d1a:	f009 b819 	b.w	12d50 <_Unwind_DeleteException>
    9d1e:	f000 fb59 	bl	a3d4 <_ZSt9terminatev>
    9d22:	bd08      	pop	{r3, pc}

00009d24 <_ZNSt9exceptionD1Ev>:
    9d24:	4770      	bx	lr
    9d26:	bf00      	nop

00009d28 <_ZNSt13bad_exceptionD1Ev>:
    9d28:	4770      	bx	lr
    9d2a:	bf00      	nop

00009d2c <_ZGTtNKSt9exception4whatEv>:
    9d2c:	4800      	ldr	r0, [pc, #0]	; (9d30 <_ZGTtNKSt9exception4whatEv+0x4>)
    9d2e:	4770      	bx	lr
    9d30:	000222ac 	.word	0x000222ac

00009d34 <_ZGTtNKSt13bad_exception4whatEv>:
    9d34:	4800      	ldr	r0, [pc, #0]	; (9d38 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
    9d36:	4770      	bx	lr
    9d38:	00022298 	.word	0x00022298

00009d3c <_ZNSt13bad_exceptionD0Ev>:
    9d3c:	b510      	push	{r4, lr}
    9d3e:	2104      	movs	r1, #4
    9d40:	4604      	mov	r4, r0
    9d42:	f7ff fa4b 	bl	91dc <_ZdlPvj>
    9d46:	4620      	mov	r0, r4
    9d48:	bd10      	pop	{r4, pc}
    9d4a:	bf00      	nop

00009d4c <__cxa_get_globals_fast>:
    9d4c:	4800      	ldr	r0, [pc, #0]	; (9d50 <__cxa_get_globals_fast+0x4>)
    9d4e:	4770      	bx	lr
    9d50:	2000fbac 	.word	0x2000fbac

00009d54 <__cxa_get_globals>:
    9d54:	4800      	ldr	r0, [pc, #0]	; (9d58 <__cxa_get_globals+0x4>)
    9d56:	4770      	bx	lr
    9d58:	2000fbac 	.word	0x2000fbac

00009d5c <_ZL28read_encoded_value_with_basehjPKhPj>:
    9d5c:	2850      	cmp	r0, #80	; 0x50
    9d5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d60:	d054      	beq.n	9e0c <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
    9d62:	f000 040f 	and.w	r4, r0, #15
    9d66:	2c0c      	cmp	r4, #12
    9d68:	d84e      	bhi.n	9e08 <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
    9d6a:	e8df f004 	tbb	[pc, r4]
    9d6e:	3907      	.short	0x3907
    9d70:	4d170749 	.word	0x4d170749
    9d74:	1f4d4d4d 	.word	0x1f4d4d4d
    9d78:	071b      	.short	0x071b
    9d7a:	17          	.byte	0x17
    9d7b:	00          	.byte	0x00
    9d7c:	4615      	mov	r5, r2
    9d7e:	f855 4b04 	ldr.w	r4, [r5], #4
    9d82:	b144      	cbz	r4, 9d96 <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
    9d84:	f000 0670 	and.w	r6, r0, #112	; 0x70
    9d88:	2e10      	cmp	r6, #16
    9d8a:	bf08      	it	eq
    9d8c:	4611      	moveq	r1, r2
    9d8e:	440c      	add	r4, r1
    9d90:	0602      	lsls	r2, r0, #24
    9d92:	bf48      	it	mi
    9d94:	6824      	ldrmi	r4, [r4, #0]
    9d96:	601c      	str	r4, [r3, #0]
    9d98:	4628      	mov	r0, r5
    9d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d9c:	4615      	mov	r5, r2
    9d9e:	f855 4b08 	ldr.w	r4, [r5], #8
    9da2:	e7ee      	b.n	9d82 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
    9da4:	4615      	mov	r5, r2
    9da6:	f935 4b02 	ldrsh.w	r4, [r5], #2
    9daa:	e7ea      	b.n	9d82 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
    9dac:	2400      	movs	r4, #0
    9dae:	4627      	mov	r7, r4
    9db0:	4615      	mov	r5, r2
    9db2:	f815 eb01 	ldrb.w	lr, [r5], #1
    9db6:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
    9dba:	40be      	lsls	r6, r7
    9dbc:	f01e 0f80 	tst.w	lr, #128	; 0x80
    9dc0:	ea44 0406 	orr.w	r4, r4, r6
    9dc4:	f107 0707 	add.w	r7, r7, #7
    9dc8:	d1f3      	bne.n	9db2 <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
    9dca:	2f1f      	cmp	r7, #31
    9dcc:	d8d9      	bhi.n	9d82 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
    9dce:	f01e 0f40 	tst.w	lr, #64	; 0x40
    9dd2:	d0d6      	beq.n	9d82 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
    9dd4:	f04f 36ff 	mov.w	r6, #4294967295
    9dd8:	fa06 f707 	lsl.w	r7, r6, r7
    9ddc:	433c      	orrs	r4, r7
    9dde:	e7d1      	b.n	9d84 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
    9de0:	2400      	movs	r4, #0
    9de2:	4627      	mov	r7, r4
    9de4:	4615      	mov	r5, r2
    9de6:	f815 eb01 	ldrb.w	lr, [r5], #1
    9dea:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
    9dee:	40be      	lsls	r6, r7
    9df0:	f01e 0f80 	tst.w	lr, #128	; 0x80
    9df4:	ea44 0406 	orr.w	r4, r4, r6
    9df8:	f107 0707 	add.w	r7, r7, #7
    9dfc:	d1f3      	bne.n	9de6 <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
    9dfe:	e7c0      	b.n	9d82 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
    9e00:	4615      	mov	r5, r2
    9e02:	f835 4b02 	ldrh.w	r4, [r5], #2
    9e06:	e7bc      	b.n	9d82 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
    9e08:	f009 fd58 	bl	138bc <abort>
    9e0c:	3203      	adds	r2, #3
    9e0e:	f022 0503 	bic.w	r5, r2, #3
    9e12:	f855 4b04 	ldr.w	r4, [r5], #4
    9e16:	601c      	str	r4, [r3, #0]
    9e18:	4628      	mov	r0, r5
    9e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009e1c <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    9e1c:	28ff      	cmp	r0, #255	; 0xff
    9e1e:	d00d      	beq.n	9e3c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
    9e20:	f000 0070 	and.w	r0, r0, #112	; 0x70
    9e24:	2820      	cmp	r0, #32
    9e26:	d015      	beq.n	9e54 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
    9e28:	d90a      	bls.n	9e40 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
    9e2a:	2840      	cmp	r0, #64	; 0x40
    9e2c:	d00f      	beq.n	9e4e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
    9e2e:	2850      	cmp	r0, #80	; 0x50
    9e30:	d004      	beq.n	9e3c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
    9e32:	2830      	cmp	r0, #48	; 0x30
    9e34:	d108      	bne.n	9e48 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
    9e36:	4608      	mov	r0, r1
    9e38:	f009 bd3a 	b.w	138b0 <_Unwind_GetDataRelBase>
    9e3c:	2000      	movs	r0, #0
    9e3e:	4770      	bx	lr
    9e40:	2800      	cmp	r0, #0
    9e42:	d0fb      	beq.n	9e3c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
    9e44:	2810      	cmp	r0, #16
    9e46:	d0f9      	beq.n	9e3c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
    9e48:	b508      	push	{r3, lr}
    9e4a:	f009 fd37 	bl	138bc <abort>
    9e4e:	4608      	mov	r0, r1
    9e50:	f009 bd1a 	b.w	13888 <_Unwind_GetRegionStart>
    9e54:	4608      	mov	r0, r1
    9e56:	f009 bd27 	b.w	138a8 <_Unwind_GetTextRelBase>
    9e5a:	bf00      	nop

00009e5c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    9e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e5e:	460c      	mov	r4, r1
    9e60:	4615      	mov	r5, r2
    9e62:	4607      	mov	r7, r0
    9e64:	2800      	cmp	r0, #0
    9e66:	d044      	beq.n	9ef2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x96>
    9e68:	f009 fd0e 	bl	13888 <_Unwind_GetRegionStart>
    9e6c:	6028      	str	r0, [r5, #0]
    9e6e:	7826      	ldrb	r6, [r4, #0]
    9e70:	2eff      	cmp	r6, #255	; 0xff
    9e72:	f104 0401 	add.w	r4, r4, #1
    9e76:	d032      	beq.n	9ede <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
    9e78:	4639      	mov	r1, r7
    9e7a:	4630      	mov	r0, r6
    9e7c:	f7ff ffce 	bl	9e1c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    9e80:	4622      	mov	r2, r4
    9e82:	4601      	mov	r1, r0
    9e84:	1d2b      	adds	r3, r5, #4
    9e86:	4630      	mov	r0, r6
    9e88:	f7ff ff68 	bl	9d5c <_ZL28read_encoded_value_with_basehjPKhPj>
    9e8c:	4604      	mov	r4, r0
    9e8e:	1c60      	adds	r0, r4, #1
    9e90:	7823      	ldrb	r3, [r4, #0]
    9e92:	752b      	strb	r3, [r5, #20]
    9e94:	2bff      	cmp	r3, #255	; 0xff
    9e96:	d029      	beq.n	9eec <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
    9e98:	2310      	movs	r3, #16
    9e9a:	2400      	movs	r4, #0
    9e9c:	752b      	strb	r3, [r5, #20]
    9e9e:	4622      	mov	r2, r4
    9ea0:	f810 1b01 	ldrb.w	r1, [r0], #1
    9ea4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    9ea8:	4093      	lsls	r3, r2
    9eaa:	0609      	lsls	r1, r1, #24
    9eac:	ea44 0403 	orr.w	r4, r4, r3
    9eb0:	f102 0207 	add.w	r2, r2, #7
    9eb4:	d4f4      	bmi.n	9ea0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
    9eb6:	4404      	add	r4, r0
    9eb8:	60ec      	str	r4, [r5, #12]
    9eba:	7803      	ldrb	r3, [r0, #0]
    9ebc:	756b      	strb	r3, [r5, #21]
    9ebe:	2400      	movs	r4, #0
    9ec0:	3001      	adds	r0, #1
    9ec2:	4622      	mov	r2, r4
    9ec4:	f810 1b01 	ldrb.w	r1, [r0], #1
    9ec8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    9ecc:	4093      	lsls	r3, r2
    9ece:	431c      	orrs	r4, r3
    9ed0:	060b      	lsls	r3, r1, #24
    9ed2:	f102 0207 	add.w	r2, r2, #7
    9ed6:	d4f5      	bmi.n	9ec4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x68>
    9ed8:	4404      	add	r4, r0
    9eda:	612c      	str	r4, [r5, #16]
    9edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ede:	6068      	str	r0, [r5, #4]
    9ee0:	7823      	ldrb	r3, [r4, #0]
    9ee2:	752b      	strb	r3, [r5, #20]
    9ee4:	2bff      	cmp	r3, #255	; 0xff
    9ee6:	f104 0001 	add.w	r0, r4, #1
    9eea:	d1d5      	bne.n	9e98 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>
    9eec:	2300      	movs	r3, #0
    9eee:	60eb      	str	r3, [r5, #12]
    9ef0:	e7e3      	b.n	9eba <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
    9ef2:	e7bb      	b.n	9e6c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

00009ef4 <__gxx_personality_v0>:
    9ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ef8:	f000 0403 	and.w	r4, r0, #3
    9efc:	b097      	sub	sp, #92	; 0x5c
    9efe:	2300      	movs	r3, #0
    9f00:	2c01      	cmp	r4, #1
    9f02:	4689      	mov	r9, r1
    9f04:	4617      	mov	r7, r2
    9f06:	930a      	str	r3, [sp, #40]	; 0x28
    9f08:	d01e      	beq.n	9f48 <__gxx_personality_v0+0x54>
    9f0a:	d30e      	bcc.n	9f2a <__gxx_personality_v0+0x36>
    9f0c:	2c02      	cmp	r4, #2
    9f0e:	d10a      	bne.n	9f26 <__gxx_personality_v0+0x32>
    9f10:	4639      	mov	r1, r7
    9f12:	4648      	mov	r0, r9
    9f14:	f009 fca4 	bl	13860 <__gnu_unwind_frame>
    9f18:	2800      	cmp	r0, #0
    9f1a:	f000 80a5 	beq.w	a068 <__gxx_personality_v0+0x174>
    9f1e:	2009      	movs	r0, #9
    9f20:	b017      	add	sp, #92	; 0x5c
    9f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f26:	f009 fcc9 	bl	138bc <abort>
    9f2a:	0700      	lsls	r0, r0, #28
    9f2c:	d4f0      	bmi.n	9f10 <__gxx_personality_v0+0x1c>
    9f2e:	2301      	movs	r3, #1
    9f30:	9303      	str	r3, [sp, #12]
    9f32:	aa16      	add	r2, sp, #88	; 0x58
    9f34:	2300      	movs	r3, #0
    9f36:	f842 9d2c 	str.w	r9, [r2, #-44]!
    9f3a:	4619      	mov	r1, r3
    9f3c:	9200      	str	r2, [sp, #0]
    9f3e:	4638      	mov	r0, r7
    9f40:	220c      	movs	r2, #12
    9f42:	f008 ff31 	bl	12da8 <_Unwind_VRS_Set>
    9f46:	e00f      	b.n	9f68 <__gxx_personality_v0+0x74>
    9f48:	f010 0408 	ands.w	r4, r0, #8
    9f4c:	f000 8090 	beq.w	a070 <__gxx_personality_v0+0x17c>
    9f50:	aa16      	add	r2, sp, #88	; 0x58
    9f52:	f044 0402 	orr.w	r4, r4, #2
    9f56:	f842 1d2c 	str.w	r1, [r2, #-44]!
    9f5a:	4638      	mov	r0, r7
    9f5c:	9200      	str	r2, [sp, #0]
    9f5e:	4619      	mov	r1, r3
    9f60:	220c      	movs	r2, #12
    9f62:	9403      	str	r4, [sp, #12]
    9f64:	f008 ff20 	bl	12da8 <_Unwind_VRS_Set>
    9f68:	4638      	mov	r0, r7
    9f6a:	f009 fc93 	bl	13894 <_Unwind_GetLanguageSpecificData>
    9f6e:	9005      	str	r0, [sp, #20]
    9f70:	2800      	cmp	r0, #0
    9f72:	d0cd      	beq.n	9f10 <__gxx_personality_v0+0x1c>
    9f74:	ab10      	add	r3, sp, #64	; 0x40
    9f76:	461a      	mov	r2, r3
    9f78:	9905      	ldr	r1, [sp, #20]
    9f7a:	9306      	str	r3, [sp, #24]
    9f7c:	4638      	mov	r0, r7
    9f7e:	f7ff ff6d 	bl	9e5c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    9f82:	4639      	mov	r1, r7
    9f84:	4604      	mov	r4, r0
    9f86:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    9f8a:	f7ff ff47 	bl	9e1c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    9f8e:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
    9f92:	2300      	movs	r3, #0
    9f94:	9012      	str	r0, [sp, #72]	; 0x48
    9f96:	4619      	mov	r1, r3
    9f98:	220f      	movs	r2, #15
    9f9a:	f8cd b000 	str.w	fp, [sp]
    9f9e:	4638      	mov	r0, r7
    9fa0:	f008 fedc 	bl	12d5c <_Unwind_VRS_Get>
    9fa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9fa6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    9fa8:	f023 0301 	bic.w	r3, r3, #1
    9fac:	42a2      	cmp	r2, r4
    9fae:	f103 36ff 	add.w	r6, r3, #4294967295
    9fb2:	d975      	bls.n	a0a0 <__gxx_personality_v0+0x1ac>
    9fb4:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
    9fb8:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    9fbc:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
    9fc0:	2100      	movs	r1, #0
    9fc2:	4628      	mov	r0, r5
    9fc4:	f7ff ff2a 	bl	9e1c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    9fc8:	4622      	mov	r2, r4
    9fca:	4653      	mov	r3, sl
    9fcc:	4601      	mov	r1, r0
    9fce:	4628      	mov	r0, r5
    9fd0:	f7ff fec4 	bl	9d5c <_ZL28read_encoded_value_with_basehjPKhPj>
    9fd4:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
    9fd8:	4605      	mov	r5, r0
    9fda:	2100      	movs	r1, #0
    9fdc:	4620      	mov	r0, r4
    9fde:	f7ff ff1d 	bl	9e1c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    9fe2:	462a      	mov	r2, r5
    9fe4:	4643      	mov	r3, r8
    9fe6:	4601      	mov	r1, r0
    9fe8:	4620      	mov	r0, r4
    9fea:	f7ff feb7 	bl	9d5c <_ZL28read_encoded_value_with_basehjPKhPj>
    9fee:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
    9ff2:	4605      	mov	r5, r0
    9ff4:	2100      	movs	r1, #0
    9ff6:	4620      	mov	r0, r4
    9ff8:	f7ff ff10 	bl	9e1c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    9ffc:	462a      	mov	r2, r5
    9ffe:	4601      	mov	r1, r0
    a000:	465b      	mov	r3, fp
    a002:	4620      	mov	r0, r4
    a004:	f7ff feaa 	bl	9d5c <_ZL28read_encoded_value_with_basehjPKhPj>
    a008:	4604      	mov	r4, r0
    a00a:	2000      	movs	r0, #0
    a00c:	4602      	mov	r2, r0
    a00e:	f814 1b01 	ldrb.w	r1, [r4], #1
    a012:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    a016:	4093      	lsls	r3, r2
    a018:	0609      	lsls	r1, r1, #24
    a01a:	ea40 0003 	orr.w	r0, r0, r3
    a01e:	f102 0207 	add.w	r2, r2, #7
    a022:	d4f4      	bmi.n	a00e <__gxx_personality_v0+0x11a>
    a024:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a026:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a028:	4413      	add	r3, r2
    a02a:	429e      	cmp	r6, r3
    a02c:	d231      	bcs.n	a092 <__gxx_personality_v0+0x19e>
    a02e:	9b03      	ldr	r3, [sp, #12]
    a030:	07db      	lsls	r3, r3, #31
    a032:	d539      	bpl.n	a0a8 <__gxx_personality_v0+0x1b4>
    a034:	2500      	movs	r5, #0
    a036:	9504      	str	r5, [sp, #16]
    a038:	2300      	movs	r3, #0
    a03a:	4619      	mov	r1, r3
    a03c:	220d      	movs	r2, #13
    a03e:	f8cd 8000 	str.w	r8, [sp]
    a042:	4638      	mov	r0, r7
    a044:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    a046:	f008 fe89 	bl	12d5c <_Unwind_VRS_Get>
    a04a:	9a05      	ldr	r2, [sp, #20]
    a04c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a04e:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
    a052:	9a04      	ldr	r2, [sp, #16]
    a054:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
    a058:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
    a05c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
    a060:	f8c9 3020 	str.w	r3, [r9, #32]
    a064:	2006      	movs	r0, #6
    a066:	e75b      	b.n	9f20 <__gxx_personality_v0+0x2c>
    a068:	2008      	movs	r0, #8
    a06a:	b017      	add	sp, #92	; 0x5c
    a06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a070:	ab10      	add	r3, sp, #64	; 0x40
    a072:	9300      	str	r3, [sp, #0]
    a074:	9306      	str	r3, [sp, #24]
    a076:	220d      	movs	r2, #13
    a078:	4623      	mov	r3, r4
    a07a:	4621      	mov	r1, r4
    a07c:	4638      	mov	r0, r7
    a07e:	f8d9 5020 	ldr.w	r5, [r9, #32]
    a082:	f008 fe6b 	bl	12d5c <_Unwind_VRS_Get>
    a086:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a088:	429d      	cmp	r5, r3
    a08a:	d012      	beq.n	a0b2 <__gxx_personality_v0+0x1be>
    a08c:	2302      	movs	r3, #2
    a08e:	9303      	str	r3, [sp, #12]
    a090:	e74f      	b.n	9f32 <__gxx_personality_v0+0x3e>
    a092:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a094:	4413      	add	r3, r2
    a096:	429e      	cmp	r6, r3
    a098:	d359      	bcc.n	a14e <__gxx_personality_v0+0x25a>
    a09a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a09c:	42a3      	cmp	r3, r4
    a09e:	d88d      	bhi.n	9fbc <__gxx_personality_v0+0xc8>
    a0a0:	2500      	movs	r5, #0
    a0a2:	9504      	str	r5, [sp, #16]
    a0a4:	2401      	movs	r4, #1
    a0a6:	e105      	b.n	a2b4 <__gxx_personality_v0+0x3c0>
    a0a8:	9b03      	ldr	r3, [sp, #12]
    a0aa:	071b      	lsls	r3, r3, #28
    a0ac:	d54c      	bpl.n	a148 <__gxx_personality_v0+0x254>
    a0ae:	f000 f991 	bl	a3d4 <_ZSt9terminatev>
    a0b2:	aa16      	add	r2, sp, #88	; 0x58
    a0b4:	4623      	mov	r3, r4
    a0b6:	f842 9d2c 	str.w	r9, [r2, #-44]!
    a0ba:	4621      	mov	r1, r4
    a0bc:	9200      	str	r2, [sp, #0]
    a0be:	4638      	mov	r0, r7
    a0c0:	220c      	movs	r2, #12
    a0c2:	f008 fe71 	bl	12da8 <_Unwind_VRS_Set>
    a0c6:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
    a0ca:	9304      	str	r3, [sp, #16]
    a0cc:	2b00      	cmp	r3, #0
    a0ce:	d03b      	beq.n	a148 <__gxx_personality_v0+0x254>
    a0d0:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
    a0d4:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
    a0d8:	2403      	movs	r4, #3
    a0da:	2d00      	cmp	r5, #0
    a0dc:	f2c0 8106 	blt.w	a2ec <__gxx_personality_v0+0x3f8>
    a0e0:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
    a0e4:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    a0e8:	a916      	add	r1, sp, #88	; 0x58
    a0ea:	2300      	movs	r3, #0
    a0ec:	f841 9d28 	str.w	r9, [r1, #-40]!
    a0f0:	461a      	mov	r2, r3
    a0f2:	9100      	str	r1, [sp, #0]
    a0f4:	4638      	mov	r0, r7
    a0f6:	4619      	mov	r1, r3
    a0f8:	f008 fe56 	bl	12da8 <_Unwind_VRS_Set>
    a0fc:	2300      	movs	r3, #0
    a0fe:	4619      	mov	r1, r3
    a100:	2201      	movs	r2, #1
    a102:	f8cd a000 	str.w	sl, [sp]
    a106:	4638      	mov	r0, r7
    a108:	950d      	str	r5, [sp, #52]	; 0x34
    a10a:	f008 fe4d 	bl	12da8 <_Unwind_VRS_Set>
    a10e:	2300      	movs	r3, #0
    a110:	4619      	mov	r1, r3
    a112:	220f      	movs	r2, #15
    a114:	f8cd 8000 	str.w	r8, [sp]
    a118:	4638      	mov	r0, r7
    a11a:	f008 fe1f 	bl	12d5c <_Unwind_VRS_Get>
    a11e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a120:	9a04      	ldr	r2, [sp, #16]
    a122:	f8cd 8000 	str.w	r8, [sp]
    a126:	f003 0501 	and.w	r5, r3, #1
    a12a:	2300      	movs	r3, #0
    a12c:	4315      	orrs	r5, r2
    a12e:	4638      	mov	r0, r7
    a130:	4619      	mov	r1, r3
    a132:	220f      	movs	r2, #15
    a134:	950e      	str	r5, [sp, #56]	; 0x38
    a136:	f008 fe37 	bl	12da8 <_Unwind_VRS_Set>
    a13a:	2c02      	cmp	r4, #2
    a13c:	f000 8080 	beq.w	a240 <__gxx_personality_v0+0x34c>
    a140:	2007      	movs	r0, #7
    a142:	b017      	add	sp, #92	; 0x5c
    a144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a148:	4648      	mov	r0, r9
    a14a:	f000 fb7b 	bl	a844 <__cxa_call_terminate>
    a14e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a150:	9304      	str	r3, [sp, #16]
    a152:	461a      	mov	r2, r3
    a154:	2b00      	cmp	r3, #0
    a156:	d178      	bne.n	a24a <__gxx_personality_v0+0x356>
    a158:	2800      	cmp	r0, #0
    a15a:	f43f aed9 	beq.w	9f10 <__gxx_personality_v0+0x1c>
    a15e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a160:	9a04      	ldr	r2, [sp, #16]
    a162:	3801      	subs	r0, #1
    a164:	4403      	add	r3, r0
    a166:	2a00      	cmp	r2, #0
    a168:	f43f aed2 	beq.w	9f10 <__gxx_personality_v0+0x1c>
    a16c:	2b00      	cmp	r3, #0
    a16e:	d075      	beq.n	a25c <__gxx_personality_v0+0x368>
    a170:	9a03      	ldr	r2, [sp, #12]
    a172:	f012 0208 	ands.w	r2, r2, #8
    a176:	9209      	str	r2, [sp, #36]	; 0x24
    a178:	f000 80f6 	beq.w	a368 <__gxx_personality_v0+0x474>
    a17c:	2147      	movs	r1, #71	; 0x47
    a17e:	224e      	movs	r2, #78	; 0x4e
    a180:	f889 1000 	strb.w	r1, [r9]
    a184:	f889 2001 	strb.w	r2, [r9, #1]
    a188:	2155      	movs	r1, #85	; 0x55
    a18a:	2243      	movs	r2, #67	; 0x43
    a18c:	f889 1002 	strb.w	r1, [r9, #2]
    a190:	f889 2003 	strb.w	r2, [r9, #3]
    a194:	2146      	movs	r1, #70	; 0x46
    a196:	224f      	movs	r2, #79	; 0x4f
    a198:	f889 1004 	strb.w	r1, [r9, #4]
    a19c:	f889 2005 	strb.w	r2, [r9, #5]
    a1a0:	2152      	movs	r1, #82	; 0x52
    a1a2:	2200      	movs	r2, #0
    a1a4:	f889 1006 	strb.w	r1, [r9, #6]
    a1a8:	f889 2007 	strb.w	r2, [r9, #7]
    a1ac:	2200      	movs	r2, #0
    a1ae:	9208      	str	r2, [sp, #32]
    a1b0:	9707      	str	r7, [sp, #28]
    a1b2:	2500      	movs	r5, #0
    a1b4:	4629      	mov	r1, r5
    a1b6:	e000      	b.n	a1ba <__gxx_personality_v0+0x2c6>
    a1b8:	4623      	mov	r3, r4
    a1ba:	461c      	mov	r4, r3
    a1bc:	f814 0b01 	ldrb.w	r0, [r4], #1
    a1c0:	f000 027f 	and.w	r2, r0, #127	; 0x7f
    a1c4:	408a      	lsls	r2, r1
    a1c6:	0606      	lsls	r6, r0, #24
    a1c8:	ea45 0502 	orr.w	r5, r5, r2
    a1cc:	f101 0107 	add.w	r1, r1, #7
    a1d0:	d4f2      	bmi.n	a1b8 <__gxx_personality_v0+0x2c4>
    a1d2:	291f      	cmp	r1, #31
    a1d4:	d805      	bhi.n	a1e2 <__gxx_personality_v0+0x2ee>
    a1d6:	0642      	lsls	r2, r0, #25
    a1d8:	d503      	bpl.n	a1e2 <__gxx_personality_v0+0x2ee>
    a1da:	2201      	movs	r2, #1
    a1dc:	408a      	lsls	r2, r1
    a1de:	4252      	negs	r2, r2
    a1e0:	4315      	orrs	r5, r2
    a1e2:	2600      	movs	r6, #0
    a1e4:	4631      	mov	r1, r6
    a1e6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    a1ea:	f000 027f 	and.w	r2, r0, #127	; 0x7f
    a1ee:	408a      	lsls	r2, r1
    a1f0:	0607      	lsls	r7, r0, #24
    a1f2:	ea46 0602 	orr.w	r6, r6, r2
    a1f6:	f101 0107 	add.w	r1, r1, #7
    a1fa:	d4f4      	bmi.n	a1e6 <__gxx_personality_v0+0x2f2>
    a1fc:	291f      	cmp	r1, #31
    a1fe:	d805      	bhi.n	a20c <__gxx_personality_v0+0x318>
    a200:	0640      	lsls	r0, r0, #25
    a202:	d503      	bpl.n	a20c <__gxx_personality_v0+0x318>
    a204:	2301      	movs	r3, #1
    a206:	408b      	lsls	r3, r1
    a208:	425b      	negs	r3, r3
    a20a:	431e      	orrs	r6, r3
    a20c:	2d00      	cmp	r5, #0
    a20e:	d05c      	beq.n	a2ca <__gxx_personality_v0+0x3d6>
    a210:	dd5e      	ble.n	a2d0 <__gxx_personality_v0+0x3dc>
    a212:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    a216:	28ff      	cmp	r0, #255	; 0xff
    a218:	f000 80a4 	beq.w	a364 <__gxx_personality_v0+0x470>
    a21c:	f000 0307 	and.w	r3, r0, #7
    a220:	2b04      	cmp	r3, #4
    a222:	f63f ae80 	bhi.w	9f26 <__gxx_personality_v0+0x32>
    a226:	a201      	add	r2, pc, #4	; (adr r2, a22c <__gxx_personality_v0+0x338>)
    a228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a22c:	0000a297 	.word	0x0000a297
    a230:	00009f27 	.word	0x00009f27
    a234:	0000a29d 	.word	0x0000a29d
    a238:	0000a297 	.word	0x0000a297
    a23c:	0000a275 	.word	0x0000a275
    a240:	4648      	mov	r0, r9
    a242:	f7ff fc81 	bl	9b48 <__cxa_begin_cleanup>
    a246:	2007      	movs	r0, #7
    a248:	e66a      	b.n	9f20 <__gxx_personality_v0+0x2c>
    a24a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a24c:	441a      	add	r2, r3
    a24e:	9204      	str	r2, [sp, #16]
    a250:	2800      	cmp	r0, #0
    a252:	d184      	bne.n	a15e <__gxx_personality_v0+0x26a>
    a254:	9b04      	ldr	r3, [sp, #16]
    a256:	2b00      	cmp	r3, #0
    a258:	f43f ae5a 	beq.w	9f10 <__gxx_personality_v0+0x1c>
    a25c:	9b03      	ldr	r3, [sp, #12]
    a25e:	f013 0301 	ands.w	r3, r3, #1
    a262:	f47f ae55 	bne.w	9f10 <__gxx_personality_v0+0x1c>
    a266:	9a03      	ldr	r2, [sp, #12]
    a268:	f012 0508 	ands.w	r5, r2, #8
    a26c:	f040 8097 	bne.w	a39e <__gxx_personality_v0+0x4aa>
    a270:	2402      	movs	r4, #2
    a272:	e739      	b.n	a0e8 <__gxx_personality_v0+0x1f4>
    a274:	00eb      	lsls	r3, r5, #3
    a276:	425b      	negs	r3, r3
    a278:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a27a:	9912      	ldr	r1, [sp, #72]	; 0x48
    a27c:	441a      	add	r2, r3
    a27e:	4643      	mov	r3, r8
    a280:	f7ff fd6c 	bl	9d5c <_ZL28read_encoded_value_with_basehjPKhPj>
    a284:	990e      	ldr	r1, [sp, #56]	; 0x38
    a286:	b199      	cbz	r1, a2b0 <__gxx_personality_v0+0x3bc>
    a288:	f1b9 0f00 	cmp.w	r9, #0
    a28c:	d109      	bne.n	a2a2 <__gxx_personality_v0+0x3ae>
    a28e:	2e00      	cmp	r6, #0
    a290:	d077      	beq.n	a382 <__gxx_personality_v0+0x48e>
    a292:	19a3      	adds	r3, r4, r6
    a294:	e78d      	b.n	a1b2 <__gxx_personality_v0+0x2be>
    a296:	00ab      	lsls	r3, r5, #2
    a298:	425b      	negs	r3, r3
    a29a:	e7ed      	b.n	a278 <__gxx_personality_v0+0x384>
    a29c:	006b      	lsls	r3, r5, #1
    a29e:	425b      	negs	r3, r3
    a2a0:	e7ea      	b.n	a278 <__gxx_personality_v0+0x384>
    a2a2:	ab0a      	add	r3, sp, #40	; 0x28
    a2a4:	2200      	movs	r2, #0
    a2a6:	4648      	mov	r0, r9
    a2a8:	f7ff fbf2 	bl	9a90 <__cxa_type_match>
    a2ac:	2800      	cmp	r0, #0
    a2ae:	d0ee      	beq.n	a28e <__gxx_personality_v0+0x39a>
    a2b0:	9f07      	ldr	r7, [sp, #28]
    a2b2:	2403      	movs	r4, #3
    a2b4:	9b03      	ldr	r3, [sp, #12]
    a2b6:	07da      	lsls	r2, r3, #31
    a2b8:	d460      	bmi.n	a37c <__gxx_personality_v0+0x488>
    a2ba:	9b03      	ldr	r3, [sp, #12]
    a2bc:	0719      	lsls	r1, r3, #28
    a2be:	d466      	bmi.n	a38e <__gxx_personality_v0+0x49a>
    a2c0:	2c01      	cmp	r4, #1
    a2c2:	f43f af41 	beq.w	a148 <__gxx_personality_v0+0x254>
    a2c6:	9905      	ldr	r1, [sp, #20]
    a2c8:	e707      	b.n	a0da <__gxx_personality_v0+0x1e6>
    a2ca:	2301      	movs	r3, #1
    a2cc:	9308      	str	r3, [sp, #32]
    a2ce:	e7de      	b.n	a28e <__gxx_personality_v0+0x39a>
    a2d0:	f1b9 0f00 	cmp.w	r9, #0
    a2d4:	d001      	beq.n	a2da <__gxx_personality_v0+0x3e6>
    a2d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a2d8:	b35b      	cbz	r3, a332 <__gxx_personality_v0+0x43e>
    a2da:	1c6b      	adds	r3, r5, #1
    a2dc:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
    a2e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a2e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2e6:	2b00      	cmp	r3, #0
    a2e8:	d1d1      	bne.n	a28e <__gxx_personality_v0+0x39a>
    a2ea:	e7e1      	b.n	a2b0 <__gxx_personality_v0+0x3bc>
    a2ec:	9a06      	ldr	r2, [sp, #24]
    a2ee:	4638      	mov	r0, r7
    a2f0:	f7ff fdb4 	bl	9e5c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    a2f4:	4639      	mov	r1, r7
    a2f6:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    a2fa:	f7ff fd8f 	bl	9e1c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    a2fe:	00aa      	lsls	r2, r5, #2
    a300:	f082 0203 	eor.w	r2, r2, #3
    a304:	43d2      	mvns	r2, r2
    a306:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    a308:	9012      	str	r0, [sp, #72]	; 0x48
    a30a:	58b3      	ldr	r3, [r6, r2]
    a30c:	4416      	add	r6, r2
    a30e:	b133      	cbz	r3, a31e <__gxx_personality_v0+0x42a>
    a310:	4632      	mov	r2, r6
    a312:	2300      	movs	r3, #0
    a314:	f852 1f04 	ldr.w	r1, [r2, #4]!
    a318:	3301      	adds	r3, #1
    a31a:	2900      	cmp	r1, #0
    a31c:	d1fa      	bne.n	a314 <__gxx_personality_v0+0x420>
    a31e:	2204      	movs	r2, #4
    a320:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
    a324:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
    a328:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
    a32c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
    a330:	e6d6      	b.n	a0e0 <__gxx_personality_v0+0x1ec>
    a332:	1c6f      	adds	r7, r5, #1
    a334:	ebc7 7387 	rsb	r3, r7, r7, lsl #30
    a338:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    a33a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a33c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    a340:	920f      	str	r2, [sp, #60]	; 0x3c
    a342:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    a346:	b921      	cbnz	r1, a352 <__gxx_personality_v0+0x45e>
    a348:	e7b2      	b.n	a2b0 <__gxx_personality_v0+0x3bc>
    a34a:	f857 1f04 	ldr.w	r1, [r7, #4]!
    a34e:	2900      	cmp	r1, #0
    a350:	d0ae      	beq.n	a2b0 <__gxx_personality_v0+0x3bc>
    a352:	4439      	add	r1, r7
    a354:	465b      	mov	r3, fp
    a356:	2200      	movs	r2, #0
    a358:	4648      	mov	r0, r9
    a35a:	f7ff fb99 	bl	9a90 <__cxa_type_match>
    a35e:	2800      	cmp	r0, #0
    a360:	d0f3      	beq.n	a34a <__gxx_personality_v0+0x456>
    a362:	e794      	b.n	a28e <__gxx_personality_v0+0x39a>
    a364:	2300      	movs	r3, #0
    a366:	e787      	b.n	a278 <__gxx_personality_v0+0x384>
    a368:	f899 2007 	ldrb.w	r2, [r9, #7]
    a36c:	2a01      	cmp	r2, #1
    a36e:	bf0c      	ite	eq
    a370:	f859 2c20 	ldreq.w	r2, [r9, #-32]
    a374:	f109 0258 	addne.w	r2, r9, #88	; 0x58
    a378:	920a      	str	r2, [sp, #40]	; 0x28
    a37a:	e717      	b.n	a1ac <__gxx_personality_v0+0x2b8>
    a37c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    a380:	e65a      	b.n	a038 <__gxx_personality_v0+0x144>
    a382:	9b08      	ldr	r3, [sp, #32]
    a384:	9f07      	ldr	r7, [sp, #28]
    a386:	2b00      	cmp	r3, #0
    a388:	f47f af68 	bne.w	a25c <__gxx_personality_v0+0x368>
    a38c:	e5c0      	b.n	9f10 <__gxx_personality_v0+0x1c>
    a38e:	2c01      	cmp	r4, #1
    a390:	f43f ae8d 	beq.w	a0ae <__gxx_personality_v0+0x1ba>
    a394:	2d00      	cmp	r5, #0
    a396:	f6bf aea3 	bge.w	a0e0 <__gxx_personality_v0+0x1ec>
    a39a:	f000 f829 	bl	a3f0 <_ZSt10unexpectedv>
    a39e:	461d      	mov	r5, r3
    a3a0:	2402      	movs	r4, #2
    a3a2:	e6a1      	b.n	a0e8 <__gxx_personality_v0+0x1f4>
    a3a4:	f7ff fc3a 	bl	9c1c <__cxa_begin_catch>
    a3a8:	e681      	b.n	a0ae <__gxx_personality_v0+0x1ba>
    a3aa:	bf00      	nop

0000a3ac <_ZN10__cxxabiv111__terminateEPFvvE>:
    a3ac:	b508      	push	{r3, lr}
    a3ae:	4780      	blx	r0
    a3b0:	f009 fa84 	bl	138bc <abort>
    a3b4:	f7ff fc32 	bl	9c1c <__cxa_begin_catch>
    a3b8:	f009 fa80 	bl	138bc <abort>
    a3bc:	460d      	mov	r5, r1
    a3be:	4604      	mov	r4, r0
    a3c0:	f7ff fc6a 	bl	9c98 <__cxa_end_catch>
    a3c4:	3501      	adds	r5, #1
    a3c6:	d001      	beq.n	a3cc <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
    a3c8:	f7ff fb5c 	bl	9a84 <__cxa_end_cleanup>
    a3cc:	4620      	mov	r0, r4
    a3ce:	f000 fa49 	bl	a864 <__cxa_call_unexpected>
    a3d2:	bf00      	nop

0000a3d4 <_ZSt9terminatev>:
    a3d4:	b508      	push	{r3, lr}
    a3d6:	4b03      	ldr	r3, [pc, #12]	; (a3e4 <_ZSt9terminatev+0x10>)
    a3d8:	6818      	ldr	r0, [r3, #0]
    a3da:	f3bf 8f5b 	dmb	ish
    a3de:	f7ff ffe5 	bl	a3ac <_ZN10__cxxabiv111__terminateEPFvvE>
    a3e2:	bf00      	nop
    a3e4:	20000010 	.word	0x20000010

0000a3e8 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    a3e8:	b508      	push	{r3, lr}
    a3ea:	4780      	blx	r0
    a3ec:	f7ff fff2 	bl	a3d4 <_ZSt9terminatev>

0000a3f0 <_ZSt10unexpectedv>:
    a3f0:	b508      	push	{r3, lr}
    a3f2:	4b03      	ldr	r3, [pc, #12]	; (a400 <_ZSt10unexpectedv+0x10>)
    a3f4:	6818      	ldr	r0, [r3, #0]
    a3f6:	f3bf 8f5b 	dmb	ish
    a3fa:	f7ff fff5 	bl	a3e8 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    a3fe:	bf00      	nop
    a400:	2000000c 	.word	0x2000000c

0000a404 <_ZSt13get_terminatev>:
    a404:	4b02      	ldr	r3, [pc, #8]	; (a410 <_ZSt13get_terminatev+0xc>)
    a406:	6818      	ldr	r0, [r3, #0]
    a408:	f3bf 8f5b 	dmb	ish
    a40c:	4770      	bx	lr
    a40e:	bf00      	nop
    a410:	20000010 	.word	0x20000010

0000a414 <_ZSt14get_unexpectedv>:
    a414:	4b02      	ldr	r3, [pc, #8]	; (a420 <_ZSt14get_unexpectedv+0xc>)
    a416:	6818      	ldr	r0, [r3, #0]
    a418:	f3bf 8f5b 	dmb	ish
    a41c:	4770      	bx	lr
    a41e:	bf00      	nop
    a420:	2000000c 	.word	0x2000000c

0000a424 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
    a424:	2801      	cmp	r0, #1
    a426:	b510      	push	{r4, lr}
    a428:	d81a      	bhi.n	a460 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
    a42a:	f3bf 8f5b 	dmb	ish
    a42e:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
    a432:	e853 2f00 	ldrex	r2, [r3]
    a436:	3a01      	subs	r2, #1
    a438:	e843 2000 	strex	r0, r2, [r3]
    a43c:	2800      	cmp	r0, #0
    a43e:	d1f8      	bne.n	a432 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
    a440:	f3bf 8f5b 	dmb	ish
    a444:	b95a      	cbnz	r2, a45e <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
    a446:	f851 3c1c 	ldr.w	r3, [r1, #-28]
    a44a:	f101 0458 	add.w	r4, r1, #88	; 0x58
    a44e:	b10b      	cbz	r3, a454 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
    a450:	4620      	mov	r0, r4
    a452:	4798      	blx	r3
    a454:	4620      	mov	r0, r4
    a456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a45a:	f7ff baef 	b.w	9a3c <__cxa_free_exception>
    a45e:	bd10      	pop	{r4, pc}
    a460:	f851 0c14 	ldr.w	r0, [r1, #-20]
    a464:	f7ff ffa2 	bl	a3ac <_ZN10__cxxabiv111__terminateEPFvvE>

0000a468 <__cxa_throw>:
    a468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a46a:	4604      	mov	r4, r0
    a46c:	460f      	mov	r7, r1
    a46e:	4616      	mov	r6, r2
    a470:	f7ff fc70 	bl	9d54 <__cxa_get_globals>
    a474:	6843      	ldr	r3, [r0, #4]
    a476:	2501      	movs	r5, #1
    a478:	442b      	add	r3, r5
    a47a:	6043      	str	r3, [r0, #4]
    a47c:	f844 7c78 	str.w	r7, [r4, #-120]
    a480:	f844 6c74 	str.w	r6, [r4, #-116]
    a484:	f844 5c80 	str.w	r5, [r4, #-128]
    a488:	f7ff ffc4 	bl	a414 <_ZSt14get_unexpectedv>
    a48c:	f844 0c70 	str.w	r0, [r4, #-112]
    a490:	f7ff ffb8 	bl	a404 <_ZSt13get_terminatev>
    a494:	2347      	movs	r3, #71	; 0x47
    a496:	2243      	movs	r2, #67	; 0x43
    a498:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
    a49c:	4910      	ldr	r1, [pc, #64]	; (a4e0 <__cxa_throw+0x78>)
    a49e:	f804 3c58 	strb.w	r3, [r4, #-88]
    a4a2:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
    a4a6:	232b      	movs	r3, #43	; 0x2b
    a4a8:	2755      	movs	r7, #85	; 0x55
    a4aa:	2600      	movs	r6, #0
    a4ac:	f844 0c6c 	str.w	r0, [r4, #-108]
    a4b0:	f804 ec57 	strb.w	lr, [r4, #-87]
    a4b4:	f844 1c50 	str.w	r1, [r4, #-80]
    a4b8:	f804 2c55 	strb.w	r2, [r4, #-85]
    a4bc:	f804 2c54 	strb.w	r2, [r4, #-84]
    a4c0:	f804 3c53 	strb.w	r3, [r4, #-83]
    a4c4:	f804 3c52 	strb.w	r3, [r4, #-82]
    a4c8:	f804 7c56 	strb.w	r7, [r4, #-86]
    a4cc:	f804 6c51 	strb.w	r6, [r4, #-81]
    a4d0:	4628      	mov	r0, r5
    a4d2:	f008 ffd7 	bl	13484 <_Unwind_RaiseException>
    a4d6:	4628      	mov	r0, r5
    a4d8:	f7ff fba0 	bl	9c1c <__cxa_begin_catch>
    a4dc:	f7ff ff7a 	bl	a3d4 <_ZSt9terminatev>
    a4e0:	0000a425 	.word	0x0000a425

0000a4e4 <__cxa_rethrow>:
    a4e4:	b510      	push	{r4, lr}
    a4e6:	f7ff fc35 	bl	9d54 <__cxa_get_globals>
    a4ea:	6842      	ldr	r2, [r0, #4]
    a4ec:	6804      	ldr	r4, [r0, #0]
    a4ee:	3201      	adds	r2, #1
    a4f0:	6042      	str	r2, [r0, #4]
    a4f2:	b164      	cbz	r4, a50e <__cxa_rethrow+0x2a>
    a4f4:	f894 2020 	ldrb.w	r2, [r4, #32]
    a4f8:	2a47      	cmp	r2, #71	; 0x47
    a4fa:	d00a      	beq.n	a512 <__cxa_rethrow+0x2e>
    a4fc:	2200      	movs	r2, #0
    a4fe:	6002      	str	r2, [r0, #0]
    a500:	3420      	adds	r4, #32
    a502:	4620      	mov	r0, r4
    a504:	f008 ffe2 	bl	134cc <_Unwind_Resume_or_Rethrow>
    a508:	4620      	mov	r0, r4
    a50a:	f7ff fb87 	bl	9c1c <__cxa_begin_catch>
    a50e:	f7ff ff61 	bl	a3d4 <_ZSt9terminatev>
    a512:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    a516:	2a4e      	cmp	r2, #78	; 0x4e
    a518:	d1f0      	bne.n	a4fc <__cxa_rethrow+0x18>
    a51a:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    a51e:	2a55      	cmp	r2, #85	; 0x55
    a520:	d1ec      	bne.n	a4fc <__cxa_rethrow+0x18>
    a522:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    a526:	2a43      	cmp	r2, #67	; 0x43
    a528:	d1e8      	bne.n	a4fc <__cxa_rethrow+0x18>
    a52a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    a52e:	2a43      	cmp	r2, #67	; 0x43
    a530:	d1e4      	bne.n	a4fc <__cxa_rethrow+0x18>
    a532:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    a536:	2a2b      	cmp	r2, #43	; 0x2b
    a538:	d1e0      	bne.n	a4fc <__cxa_rethrow+0x18>
    a53a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    a53e:	2a2b      	cmp	r2, #43	; 0x2b
    a540:	d1dc      	bne.n	a4fc <__cxa_rethrow+0x18>
    a542:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
    a546:	2a01      	cmp	r2, #1
    a548:	d8d8      	bhi.n	a4fc <__cxa_rethrow+0x18>
    a54a:	6962      	ldr	r2, [r4, #20]
    a54c:	4252      	negs	r2, r2
    a54e:	6162      	str	r2, [r4, #20]
    a550:	e7d6      	b.n	a500 <__cxa_rethrow+0x1c>
    a552:	bf00      	nop

0000a554 <_ZSt15get_new_handlerv>:
    a554:	4b02      	ldr	r3, [pc, #8]	; (a560 <_ZSt15get_new_handlerv+0xc>)
    a556:	6818      	ldr	r0, [r3, #0]
    a558:	f3bf 8f5b 	dmb	ish
    a55c:	4770      	bx	lr
    a55e:	bf00      	nop
    a560:	2000fbb8 	.word	0x2000fbb8

0000a564 <_ZNKSt11logic_error4whatEv>:
    a564:	6840      	ldr	r0, [r0, #4]
    a566:	4770      	bx	lr

0000a568 <_ZNSt11logic_errorD1Ev>:
    a568:	b510      	push	{r4, lr}
    a56a:	6843      	ldr	r3, [r0, #4]
    a56c:	4a0c      	ldr	r2, [pc, #48]	; (a5a0 <_ZNSt11logic_errorD1Ev+0x38>)
    a56e:	490d      	ldr	r1, [pc, #52]	; (a5a4 <_ZNSt11logic_errorD1Ev+0x3c>)
    a570:	6001      	str	r1, [r0, #0]
    a572:	4604      	mov	r4, r0
    a574:	f1a3 000c 	sub.w	r0, r3, #12
    a578:	4290      	cmp	r0, r2
    a57a:	b082      	sub	sp, #8
    a57c:	d105      	bne.n	a58a <_ZNSt11logic_errorD1Ev+0x22>
    a57e:	4620      	mov	r0, r4
    a580:	f7ff fbd0 	bl	9d24 <_ZNSt9exceptionD1Ev>
    a584:	4620      	mov	r0, r4
    a586:	b002      	add	sp, #8
    a588:	bd10      	pop	{r4, pc}
    a58a:	f853 2c04 	ldr.w	r2, [r3, #-4]
    a58e:	1e51      	subs	r1, r2, #1
    a590:	2a00      	cmp	r2, #0
    a592:	f843 1c04 	str.w	r1, [r3, #-4]
    a596:	dcf2      	bgt.n	a57e <_ZNSt11logic_errorD1Ev+0x16>
    a598:	a901      	add	r1, sp, #4
    a59a:	f7ff f873 	bl	9684 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    a59e:	e7ee      	b.n	a57e <_ZNSt11logic_errorD1Ev+0x16>
    a5a0:	2000fb5c 	.word	0x2000fb5c
    a5a4:	000223a0 	.word	0x000223a0

0000a5a8 <_ZNSt11logic_errorD0Ev>:
    a5a8:	b510      	push	{r4, lr}
    a5aa:	4604      	mov	r4, r0
    a5ac:	f7ff ffdc 	bl	a568 <_ZNSt11logic_errorD1Ev>
    a5b0:	4620      	mov	r0, r4
    a5b2:	f7fe fe11 	bl	91d8 <_ZdlPv>
    a5b6:	4620      	mov	r0, r4
    a5b8:	bd10      	pop	{r4, pc}
    a5ba:	bf00      	nop

0000a5bc <_ZNSt12length_errorD1Ev>:
    a5bc:	b510      	push	{r4, lr}
    a5be:	4b03      	ldr	r3, [pc, #12]	; (a5cc <_ZNSt12length_errorD1Ev+0x10>)
    a5c0:	6003      	str	r3, [r0, #0]
    a5c2:	4604      	mov	r4, r0
    a5c4:	f7ff ffd0 	bl	a568 <_ZNSt11logic_errorD1Ev>
    a5c8:	4620      	mov	r0, r4
    a5ca:	bd10      	pop	{r4, pc}
    a5cc:	000223b4 	.word	0x000223b4

0000a5d0 <_ZNSt12length_errorD0Ev>:
    a5d0:	b510      	push	{r4, lr}
    a5d2:	4b05      	ldr	r3, [pc, #20]	; (a5e8 <_ZNSt12length_errorD0Ev+0x18>)
    a5d4:	6003      	str	r3, [r0, #0]
    a5d6:	4604      	mov	r4, r0
    a5d8:	f7ff ffc6 	bl	a568 <_ZNSt11logic_errorD1Ev>
    a5dc:	4620      	mov	r0, r4
    a5de:	f7fe fdfb 	bl	91d8 <_ZdlPv>
    a5e2:	4620      	mov	r0, r4
    a5e4:	bd10      	pop	{r4, pc}
    a5e6:	bf00      	nop
    a5e8:	000223b4 	.word	0x000223b4

0000a5ec <_ZNSt11logic_errorC1EPKc>:
    a5ec:	b510      	push	{r4, lr}
    a5ee:	4b08      	ldr	r3, [pc, #32]	; (a610 <_ZNSt11logic_errorC1EPKc+0x24>)
    a5f0:	b082      	sub	sp, #8
    a5f2:	4604      	mov	r4, r0
    a5f4:	aa01      	add	r2, sp, #4
    a5f6:	f840 3b04 	str.w	r3, [r0], #4
    a5fa:	f7ff f865 	bl	96c8 <_ZNSsC1EPKcRKSaIcE>
    a5fe:	4620      	mov	r0, r4
    a600:	b002      	add	sp, #8
    a602:	bd10      	pop	{r4, pc}
    a604:	4620      	mov	r0, r4
    a606:	f7ff fb8d 	bl	9d24 <_ZNSt9exceptionD1Ev>
    a60a:	f7ff fa3b 	bl	9a84 <__cxa_end_cleanup>
    a60e:	bf00      	nop
    a610:	000223a0 	.word	0x000223a0

0000a614 <_ZNSt12length_errorC1EPKc>:
    a614:	b510      	push	{r4, lr}
    a616:	4604      	mov	r4, r0
    a618:	f7ff ffe8 	bl	a5ec <_ZNSt11logic_errorC1EPKc>
    a61c:	4b01      	ldr	r3, [pc, #4]	; (a624 <_ZNSt12length_errorC1EPKc+0x10>)
    a61e:	6023      	str	r3, [r4, #0]
    a620:	4620      	mov	r0, r4
    a622:	bd10      	pop	{r4, pc}
    a624:	000223b4 	.word	0x000223b4

0000a628 <_ZNSt12__cow_stringC1EPKcj>:
    a628:	b510      	push	{r4, lr}
    a62a:	b082      	sub	sp, #8
    a62c:	ab01      	add	r3, sp, #4
    a62e:	4604      	mov	r4, r0
    a630:	f7ff f83c 	bl	96ac <_ZNSsC1EPKcjRKSaIcE>
    a634:	4620      	mov	r0, r4
    a636:	b002      	add	sp, #8
    a638:	bd10      	pop	{r4, pc}
    a63a:	bf00      	nop

0000a63c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
    a63c:	4b18      	ldr	r3, [pc, #96]	; (a6a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
    a63e:	681a      	ldr	r2, [r3, #0]
    a640:	07d1      	lsls	r1, r2, #31
    a642:	bf5c      	itt	pl
    a644:	2201      	movpl	r2, #1
    a646:	601a      	strpl	r2, [r3, #0]
    a648:	4b16      	ldr	r3, [pc, #88]	; (a6a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
    a64a:	681a      	ldr	r2, [r3, #0]
    a64c:	07d2      	lsls	r2, r2, #31
    a64e:	bf5c      	itt	pl
    a650:	2201      	movpl	r2, #1
    a652:	601a      	strpl	r2, [r3, #0]
    a654:	4b14      	ldr	r3, [pc, #80]	; (a6a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
    a656:	681a      	ldr	r2, [r3, #0]
    a658:	07d0      	lsls	r0, r2, #31
    a65a:	bf5c      	itt	pl
    a65c:	2201      	movpl	r2, #1
    a65e:	601a      	strpl	r2, [r3, #0]
    a660:	4b12      	ldr	r3, [pc, #72]	; (a6ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
    a662:	681a      	ldr	r2, [r3, #0]
    a664:	07d1      	lsls	r1, r2, #31
    a666:	bf5c      	itt	pl
    a668:	2201      	movpl	r2, #1
    a66a:	601a      	strpl	r2, [r3, #0]
    a66c:	4b10      	ldr	r3, [pc, #64]	; (a6b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
    a66e:	681a      	ldr	r2, [r3, #0]
    a670:	07d2      	lsls	r2, r2, #31
    a672:	bf5c      	itt	pl
    a674:	2201      	movpl	r2, #1
    a676:	601a      	strpl	r2, [r3, #0]
    a678:	4b0e      	ldr	r3, [pc, #56]	; (a6b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
    a67a:	681a      	ldr	r2, [r3, #0]
    a67c:	07d0      	lsls	r0, r2, #31
    a67e:	bf5c      	itt	pl
    a680:	2201      	movpl	r2, #1
    a682:	601a      	strpl	r2, [r3, #0]
    a684:	4b0c      	ldr	r3, [pc, #48]	; (a6b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
    a686:	681a      	ldr	r2, [r3, #0]
    a688:	07d1      	lsls	r1, r2, #31
    a68a:	bf5c      	itt	pl
    a68c:	2201      	movpl	r2, #1
    a68e:	601a      	strpl	r2, [r3, #0]
    a690:	4b0a      	ldr	r3, [pc, #40]	; (a6bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
    a692:	681a      	ldr	r2, [r3, #0]
    a694:	07d2      	lsls	r2, r2, #31
    a696:	bf5c      	itt	pl
    a698:	2201      	movpl	r2, #1
    a69a:	601a      	strpl	r2, [r3, #0]
    a69c:	4770      	bx	lr
    a69e:	bf00      	nop
    a6a0:	2000fbd8 	.word	0x2000fbd8
    a6a4:	2000fbd4 	.word	0x2000fbd4
    a6a8:	2000fbd0 	.word	0x2000fbd0
    a6ac:	2000fbcc 	.word	0x2000fbcc
    a6b0:	2000fbc8 	.word	0x2000fbc8
    a6b4:	2000fbc4 	.word	0x2000fbc4
    a6b8:	2000fbc0 	.word	0x2000fbc0
    a6bc:	2000fbbc 	.word	0x2000fbbc

0000a6c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
    a6c0:	4b18      	ldr	r3, [pc, #96]	; (a724 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
    a6c2:	681a      	ldr	r2, [r3, #0]
    a6c4:	07d1      	lsls	r1, r2, #31
    a6c6:	bf5c      	itt	pl
    a6c8:	2201      	movpl	r2, #1
    a6ca:	601a      	strpl	r2, [r3, #0]
    a6cc:	4b16      	ldr	r3, [pc, #88]	; (a728 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
    a6ce:	681a      	ldr	r2, [r3, #0]
    a6d0:	07d2      	lsls	r2, r2, #31
    a6d2:	bf5c      	itt	pl
    a6d4:	2201      	movpl	r2, #1
    a6d6:	601a      	strpl	r2, [r3, #0]
    a6d8:	4b14      	ldr	r3, [pc, #80]	; (a72c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
    a6da:	681a      	ldr	r2, [r3, #0]
    a6dc:	07d0      	lsls	r0, r2, #31
    a6de:	bf5c      	itt	pl
    a6e0:	2201      	movpl	r2, #1
    a6e2:	601a      	strpl	r2, [r3, #0]
    a6e4:	4b12      	ldr	r3, [pc, #72]	; (a730 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
    a6e6:	681a      	ldr	r2, [r3, #0]
    a6e8:	07d1      	lsls	r1, r2, #31
    a6ea:	bf5c      	itt	pl
    a6ec:	2201      	movpl	r2, #1
    a6ee:	601a      	strpl	r2, [r3, #0]
    a6f0:	4b10      	ldr	r3, [pc, #64]	; (a734 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
    a6f2:	681a      	ldr	r2, [r3, #0]
    a6f4:	07d2      	lsls	r2, r2, #31
    a6f6:	bf5c      	itt	pl
    a6f8:	2201      	movpl	r2, #1
    a6fa:	601a      	strpl	r2, [r3, #0]
    a6fc:	4b0e      	ldr	r3, [pc, #56]	; (a738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
    a6fe:	681a      	ldr	r2, [r3, #0]
    a700:	07d0      	lsls	r0, r2, #31
    a702:	bf5c      	itt	pl
    a704:	2201      	movpl	r2, #1
    a706:	601a      	strpl	r2, [r3, #0]
    a708:	4b0c      	ldr	r3, [pc, #48]	; (a73c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
    a70a:	681a      	ldr	r2, [r3, #0]
    a70c:	07d1      	lsls	r1, r2, #31
    a70e:	bf5c      	itt	pl
    a710:	2201      	movpl	r2, #1
    a712:	601a      	strpl	r2, [r3, #0]
    a714:	4b0a      	ldr	r3, [pc, #40]	; (a740 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
    a716:	681a      	ldr	r2, [r3, #0]
    a718:	07d2      	lsls	r2, r2, #31
    a71a:	bf5c      	itt	pl
    a71c:	2201      	movpl	r2, #1
    a71e:	601a      	strpl	r2, [r3, #0]
    a720:	4770      	bx	lr
    a722:	bf00      	nop
    a724:	2000fbf8 	.word	0x2000fbf8
    a728:	2000fbf4 	.word	0x2000fbf4
    a72c:	2000fbf0 	.word	0x2000fbf0
    a730:	2000fbec 	.word	0x2000fbec
    a734:	2000fbe8 	.word	0x2000fbe8
    a738:	2000fbe4 	.word	0x2000fbe4
    a73c:	2000fbe0 	.word	0x2000fbe0
    a740:	2000fbdc 	.word	0x2000fbdc

0000a744 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
    a744:	4b24      	ldr	r3, [pc, #144]	; (a7d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
    a746:	681a      	ldr	r2, [r3, #0]
    a748:	07d0      	lsls	r0, r2, #31
    a74a:	bf5c      	itt	pl
    a74c:	2201      	movpl	r2, #1
    a74e:	601a      	strpl	r2, [r3, #0]
    a750:	4b22      	ldr	r3, [pc, #136]	; (a7dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
    a752:	681a      	ldr	r2, [r3, #0]
    a754:	07d1      	lsls	r1, r2, #31
    a756:	bf5c      	itt	pl
    a758:	2201      	movpl	r2, #1
    a75a:	601a      	strpl	r2, [r3, #0]
    a75c:	4b20      	ldr	r3, [pc, #128]	; (a7e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
    a75e:	681a      	ldr	r2, [r3, #0]
    a760:	07d2      	lsls	r2, r2, #31
    a762:	bf5c      	itt	pl
    a764:	2201      	movpl	r2, #1
    a766:	601a      	strpl	r2, [r3, #0]
    a768:	4b1e      	ldr	r3, [pc, #120]	; (a7e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
    a76a:	681a      	ldr	r2, [r3, #0]
    a76c:	07d0      	lsls	r0, r2, #31
    a76e:	bf5c      	itt	pl
    a770:	2201      	movpl	r2, #1
    a772:	601a      	strpl	r2, [r3, #0]
    a774:	4b1c      	ldr	r3, [pc, #112]	; (a7e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
    a776:	681a      	ldr	r2, [r3, #0]
    a778:	07d1      	lsls	r1, r2, #31
    a77a:	bf5c      	itt	pl
    a77c:	2201      	movpl	r2, #1
    a77e:	601a      	strpl	r2, [r3, #0]
    a780:	4b1a      	ldr	r3, [pc, #104]	; (a7ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
    a782:	681a      	ldr	r2, [r3, #0]
    a784:	07d2      	lsls	r2, r2, #31
    a786:	bf5c      	itt	pl
    a788:	2201      	movpl	r2, #1
    a78a:	601a      	strpl	r2, [r3, #0]
    a78c:	4b18      	ldr	r3, [pc, #96]	; (a7f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
    a78e:	681a      	ldr	r2, [r3, #0]
    a790:	07d0      	lsls	r0, r2, #31
    a792:	bf5c      	itt	pl
    a794:	2201      	movpl	r2, #1
    a796:	601a      	strpl	r2, [r3, #0]
    a798:	4b16      	ldr	r3, [pc, #88]	; (a7f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
    a79a:	681a      	ldr	r2, [r3, #0]
    a79c:	07d1      	lsls	r1, r2, #31
    a79e:	bf5c      	itt	pl
    a7a0:	2201      	movpl	r2, #1
    a7a2:	601a      	strpl	r2, [r3, #0]
    a7a4:	4b14      	ldr	r3, [pc, #80]	; (a7f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
    a7a6:	681a      	ldr	r2, [r3, #0]
    a7a8:	07d2      	lsls	r2, r2, #31
    a7aa:	bf5c      	itt	pl
    a7ac:	2201      	movpl	r2, #1
    a7ae:	601a      	strpl	r2, [r3, #0]
    a7b0:	4b12      	ldr	r3, [pc, #72]	; (a7fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
    a7b2:	681a      	ldr	r2, [r3, #0]
    a7b4:	07d0      	lsls	r0, r2, #31
    a7b6:	bf5c      	itt	pl
    a7b8:	2201      	movpl	r2, #1
    a7ba:	601a      	strpl	r2, [r3, #0]
    a7bc:	4b10      	ldr	r3, [pc, #64]	; (a800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
    a7be:	681a      	ldr	r2, [r3, #0]
    a7c0:	07d1      	lsls	r1, r2, #31
    a7c2:	bf5c      	itt	pl
    a7c4:	2201      	movpl	r2, #1
    a7c6:	601a      	strpl	r2, [r3, #0]
    a7c8:	4b0e      	ldr	r3, [pc, #56]	; (a804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
    a7ca:	681a      	ldr	r2, [r3, #0]
    a7cc:	07d2      	lsls	r2, r2, #31
    a7ce:	bf5c      	itt	pl
    a7d0:	2201      	movpl	r2, #1
    a7d2:	601a      	strpl	r2, [r3, #0]
    a7d4:	4770      	bx	lr
    a7d6:	bf00      	nop
    a7d8:	2000fc28 	.word	0x2000fc28
    a7dc:	2000fc24 	.word	0x2000fc24
    a7e0:	2000fc20 	.word	0x2000fc20
    a7e4:	2000fc1c 	.word	0x2000fc1c
    a7e8:	2000fc18 	.word	0x2000fc18
    a7ec:	2000fc14 	.word	0x2000fc14
    a7f0:	2000fc10 	.word	0x2000fc10
    a7f4:	2000fc0c 	.word	0x2000fc0c
    a7f8:	2000fc08 	.word	0x2000fc08
    a7fc:	2000fc04 	.word	0x2000fc04
    a800:	2000fc00 	.word	0x2000fc00
    a804:	2000fbfc 	.word	0x2000fbfc

0000a808 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
    a808:	7803      	ldrb	r3, [r0, #0]
    a80a:	2b47      	cmp	r3, #71	; 0x47
    a80c:	d001      	beq.n	a812 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
    a80e:	2000      	movs	r0, #0
    a810:	4770      	bx	lr
    a812:	7843      	ldrb	r3, [r0, #1]
    a814:	2b4e      	cmp	r3, #78	; 0x4e
    a816:	d1fa      	bne.n	a80e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    a818:	7883      	ldrb	r3, [r0, #2]
    a81a:	2b55      	cmp	r3, #85	; 0x55
    a81c:	d1f7      	bne.n	a80e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    a81e:	78c3      	ldrb	r3, [r0, #3]
    a820:	2b43      	cmp	r3, #67	; 0x43
    a822:	d1f4      	bne.n	a80e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    a824:	7903      	ldrb	r3, [r0, #4]
    a826:	2b43      	cmp	r3, #67	; 0x43
    a828:	d1f1      	bne.n	a80e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    a82a:	7943      	ldrb	r3, [r0, #5]
    a82c:	2b2b      	cmp	r3, #43	; 0x2b
    a82e:	d1ee      	bne.n	a80e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    a830:	7983      	ldrb	r3, [r0, #6]
    a832:	2b2b      	cmp	r3, #43	; 0x2b
    a834:	d1eb      	bne.n	a80e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
    a836:	79c0      	ldrb	r0, [r0, #7]
    a838:	2801      	cmp	r0, #1
    a83a:	bf8c      	ite	hi
    a83c:	2000      	movhi	r0, #0
    a83e:	2001      	movls	r0, #1
    a840:	4770      	bx	lr
    a842:	bf00      	nop

0000a844 <__cxa_call_terminate>:
    a844:	b510      	push	{r4, lr}
    a846:	b130      	cbz	r0, a856 <__cxa_call_terminate+0x12>
    a848:	4604      	mov	r4, r0
    a84a:	f7ff f9e7 	bl	9c1c <__cxa_begin_catch>
    a84e:	4620      	mov	r0, r4
    a850:	f7ff ffda 	bl	a808 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
    a854:	b908      	cbnz	r0, a85a <__cxa_call_terminate+0x16>
    a856:	f7ff fdbd 	bl	a3d4 <_ZSt9terminatev>
    a85a:	f854 0c14 	ldr.w	r0, [r4, #-20]
    a85e:	f7ff fda5 	bl	a3ac <_ZN10__cxxabiv111__terminateEPFvvE>
    a862:	bf00      	nop

0000a864 <__cxa_call_unexpected>:
    a864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a868:	b085      	sub	sp, #20
    a86a:	4602      	mov	r2, r0
    a86c:	f7ff ffcc 	bl	a808 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
    a870:	b160      	cbz	r0, a88c <__cxa_call_unexpected+0x28>
    a872:	f852 8c18 	ldr.w	r8, [r2, #-24]
    a876:	f852 5c14 	ldr.w	r5, [r2, #-20]
    a87a:	6a96      	ldr	r6, [r2, #40]	; 0x28
    a87c:	6b17      	ldr	r7, [r2, #48]	; 0x30
    a87e:	6b54      	ldr	r4, [r2, #52]	; 0x34
    a880:	4610      	mov	r0, r2
    a882:	f7ff f9cb 	bl	9c1c <__cxa_begin_catch>
    a886:	4640      	mov	r0, r8
    a888:	f7ff fdae 	bl	a3e8 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    a88c:	4610      	mov	r0, r2
    a88e:	f7ff f9c5 	bl	9c1c <__cxa_begin_catch>
    a892:	f7ff fdad 	bl	a3f0 <_ZSt10unexpectedv>
    a896:	f7ff f9c1 	bl	9c1c <__cxa_begin_catch>
    a89a:	f7ff fd9b 	bl	a3d4 <_ZSt9terminatev>
    a89e:	f7ff f9bd 	bl	9c1c <__cxa_begin_catch>
    a8a2:	f7ff fa53 	bl	9d4c <__cxa_get_globals_fast>
    a8a6:	6803      	ldr	r3, [r0, #0]
    a8a8:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    a8ac:	2a01      	cmp	r2, #1
    a8ae:	d036      	beq.n	a91e <__cxa_call_unexpected+0xba>
    a8b0:	f103 0278 	add.w	r2, r3, #120	; 0x78
    a8b4:	f10d 0a10 	add.w	sl, sp, #16
    a8b8:	f04f 0800 	mov.w	r8, #0
    a8bc:	3320      	adds	r3, #32
    a8be:	f84a 2d08 	str.w	r2, [sl, #-8]!
    a8c2:	f027 0b03 	bic.w	fp, r7, #3
    a8c6:	9301      	str	r3, [sp, #4]
    a8c8:	46c1      	mov	r9, r8
    a8ca:	45b1      	cmp	r9, r6
    a8cc:	da1b      	bge.n	a906 <__cxa_call_unexpected+0xa2>
    a8ce:	6827      	ldr	r7, [r4, #0]
    a8d0:	b107      	cbz	r7, a8d4 <__cxa_call_unexpected+0x70>
    a8d2:	4427      	add	r7, r4
    a8d4:	4653      	mov	r3, sl
    a8d6:	2200      	movs	r2, #0
    a8d8:	4639      	mov	r1, r7
    a8da:	9801      	ldr	r0, [sp, #4]
    a8dc:	f7ff f8d8 	bl	9a90 <__cxa_type_match>
    a8e0:	bb10      	cbnz	r0, a928 <__cxa_call_unexpected+0xc4>
    a8e2:	683b      	ldr	r3, [r7, #0]
    a8e4:	4914      	ldr	r1, [pc, #80]	; (a938 <__cxa_call_unexpected+0xd4>)
    a8e6:	691b      	ldr	r3, [r3, #16]
    a8e8:	9300      	str	r3, [sp, #0]
    a8ea:	aa04      	add	r2, sp, #16
    a8ec:	2301      	movs	r3, #1
    a8ee:	f842 0d04 	str.w	r0, [r2, #-4]!
    a8f2:	4638      	mov	r0, r7
    a8f4:	9f00      	ldr	r7, [sp, #0]
    a8f6:	47b8      	blx	r7
    a8f8:	2800      	cmp	r0, #0
    a8fa:	bf18      	it	ne
    a8fc:	4680      	movne	r8, r0
    a8fe:	f109 0901 	add.w	r9, r9, #1
    a902:	445c      	add	r4, fp
    a904:	e7e1      	b.n	a8ca <__cxa_call_unexpected+0x66>
    a906:	f1b8 0f00 	cmp.w	r8, #0
    a90a:	d00a      	beq.n	a922 <__cxa_call_unexpected+0xbe>
    a90c:	2004      	movs	r0, #4
    a90e:	f7ff f87d 	bl	9a0c <__cxa_allocate_exception>
    a912:	4b0a      	ldr	r3, [pc, #40]	; (a93c <__cxa_call_unexpected+0xd8>)
    a914:	6003      	str	r3, [r0, #0]
    a916:	4a0a      	ldr	r2, [pc, #40]	; (a940 <__cxa_call_unexpected+0xdc>)
    a918:	4907      	ldr	r1, [pc, #28]	; (a938 <__cxa_call_unexpected+0xd4>)
    a91a:	f7ff fda5 	bl	a468 <__cxa_throw>
    a91e:	681a      	ldr	r2, [r3, #0]
    a920:	e7c8      	b.n	a8b4 <__cxa_call_unexpected+0x50>
    a922:	4628      	mov	r0, r5
    a924:	f7ff fd42 	bl	a3ac <_ZN10__cxxabiv111__terminateEPFvvE>
    a928:	f7ff fddc 	bl	a4e4 <__cxa_rethrow>
    a92c:	f7ff f9b4 	bl	9c98 <__cxa_end_catch>
    a930:	f7ff f9b2 	bl	9c98 <__cxa_end_catch>
    a934:	f7ff f8a6 	bl	9a84 <__cxa_end_cleanup>
    a938:	000222cc 	.word	0x000222cc
    a93c:	00022350 	.word	0x00022350
    a940:	00009d29 	.word	0x00009d29

0000a944 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
    a944:	b570      	push	{r4, r5, r6, lr}
    a946:	4b3c      	ldr	r3, [pc, #240]	; (aa38 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
    a948:	781a      	ldrb	r2, [r3, #0]
    a94a:	b082      	sub	sp, #8
    a94c:	2a00      	cmp	r2, #0
    a94e:	d135      	bne.n	a9bc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
    a950:	2401      	movs	r4, #1
    a952:	701c      	strb	r4, [r3, #0]
    a954:	f006 fbd0 	bl	110f8 <__cxa_current_exception_type>
    a958:	2800      	cmp	r0, #0
    a95a:	d05b      	beq.n	aa14 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>
    a95c:	6844      	ldr	r4, [r0, #4]
    a95e:	4d37      	ldr	r5, [pc, #220]	; (aa3c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
    a960:	7823      	ldrb	r3, [r4, #0]
    a962:	2b2a      	cmp	r3, #42	; 0x2a
    a964:	ab02      	add	r3, sp, #8
    a966:	f04f 32ff 	mov.w	r2, #4294967295
    a96a:	bf08      	it	eq
    a96c:	3401      	addeq	r4, #1
    a96e:	f843 2d04 	str.w	r2, [r3, #-4]!
    a972:	2200      	movs	r2, #0
    a974:	4611      	mov	r1, r2
    a976:	4620      	mov	r0, r4
    a978:	f006 fb50 	bl	1101c <__cxa_demangle>
    a97c:	682b      	ldr	r3, [r5, #0]
    a97e:	4606      	mov	r6, r0
    a980:	68db      	ldr	r3, [r3, #12]
    a982:	482f      	ldr	r0, [pc, #188]	; (aa40 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
    a984:	2230      	movs	r2, #48	; 0x30
    a986:	2101      	movs	r1, #1
    a988:	f009 fa38 	bl	13dfc <fwrite>
    a98c:	9b01      	ldr	r3, [sp, #4]
    a98e:	b17b      	cbz	r3, a9b0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
    a990:	682b      	ldr	r3, [r5, #0]
    a992:	4620      	mov	r0, r4
    a994:	68d9      	ldr	r1, [r3, #12]
    a996:	f009 f847 	bl	13a28 <fputs>
    a99a:	682b      	ldr	r3, [r5, #0]
    a99c:	4829      	ldr	r0, [pc, #164]	; (aa44 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
    a99e:	68db      	ldr	r3, [r3, #12]
    a9a0:	2202      	movs	r2, #2
    a9a2:	2101      	movs	r1, #1
    a9a4:	f009 fa2a 	bl	13dfc <fwrite>
    a9a8:	9b01      	ldr	r3, [sp, #4]
    a9aa:	b18b      	cbz	r3, a9d0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
    a9ac:	f7ff fd9a 	bl	a4e4 <__cxa_rethrow>
    a9b0:	682b      	ldr	r3, [r5, #0]
    a9b2:	4630      	mov	r0, r6
    a9b4:	68d9      	ldr	r1, [r3, #12]
    a9b6:	f009 f837 	bl	13a28 <fputs>
    a9ba:	e7ee      	b.n	a99a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
    a9bc:	4b1f      	ldr	r3, [pc, #124]	; (aa3c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
    a9be:	4822      	ldr	r0, [pc, #136]	; (aa48 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
    a9c0:	681b      	ldr	r3, [r3, #0]
    a9c2:	221d      	movs	r2, #29
    a9c4:	68db      	ldr	r3, [r3, #12]
    a9c6:	2101      	movs	r1, #1
    a9c8:	f009 fa18 	bl	13dfc <fwrite>
    a9cc:	f008 ff76 	bl	138bc <abort>
    a9d0:	4630      	mov	r0, r6
    a9d2:	f009 fae1 	bl	13f98 <free>
    a9d6:	e7e9      	b.n	a9ac <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
    a9d8:	2901      	cmp	r1, #1
    a9da:	460c      	mov	r4, r1
    a9dc:	d127      	bne.n	aa2e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xea>
    a9de:	f7ff f91d 	bl	9c1c <__cxa_begin_catch>
    a9e2:	6803      	ldr	r3, [r0, #0]
    a9e4:	689b      	ldr	r3, [r3, #8]
    a9e6:	4798      	blx	r3
    a9e8:	682b      	ldr	r3, [r5, #0]
    a9ea:	4606      	mov	r6, r0
    a9ec:	68db      	ldr	r3, [r3, #12]
    a9ee:	4817      	ldr	r0, [pc, #92]	; (aa4c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
    a9f0:	4621      	mov	r1, r4
    a9f2:	220b      	movs	r2, #11
    a9f4:	f009 fa02 	bl	13dfc <fwrite>
    a9f8:	682b      	ldr	r3, [r5, #0]
    a9fa:	4630      	mov	r0, r6
    a9fc:	68d9      	ldr	r1, [r3, #12]
    a9fe:	f009 f813 	bl	13a28 <fputs>
    aa02:	682b      	ldr	r3, [r5, #0]
    aa04:	200a      	movs	r0, #10
    aa06:	68d9      	ldr	r1, [r3, #12]
    aa08:	f008 ff9e 	bl	13948 <fputc>
    aa0c:	f7ff f944 	bl	9c98 <__cxa_end_catch>
    aa10:	f008 ff54 	bl	138bc <abort>
    aa14:	4b09      	ldr	r3, [pc, #36]	; (aa3c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
    aa16:	480e      	ldr	r0, [pc, #56]	; (aa50 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
    aa18:	681b      	ldr	r3, [r3, #0]
    aa1a:	4621      	mov	r1, r4
    aa1c:	68db      	ldr	r3, [r3, #12]
    aa1e:	222d      	movs	r2, #45	; 0x2d
    aa20:	f009 f9ec 	bl	13dfc <fwrite>
    aa24:	e7f4      	b.n	aa10 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
    aa26:	f7ff f937 	bl	9c98 <__cxa_end_catch>
    aa2a:	f7ff f82b 	bl	9a84 <__cxa_end_cleanup>
    aa2e:	f7ff f8f5 	bl	9c1c <__cxa_begin_catch>
    aa32:	f7ff f931 	bl	9c98 <__cxa_end_catch>
    aa36:	e7eb      	b.n	aa10 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
    aa38:	2000fc2c 	.word	0x2000fc2c
    aa3c:	20000018 	.word	0x20000018
    aa40:	000223e0 	.word	0x000223e0
    aa44:	00022414 	.word	0x00022414
    aa48:	000223c0 	.word	0x000223c0
    aa4c:	00022448 	.word	0x00022448
    aa50:	00022418 	.word	0x00022418

0000aa54 <d_make_comp>:
    aa54:	b470      	push	{r4, r5, r6}
    aa56:	1e4c      	subs	r4, r1, #1
    aa58:	2c4c      	cmp	r4, #76	; 0x4c
    aa5a:	d82d      	bhi.n	aab8 <d_make_comp+0x64>
    aa5c:	e8df f004 	tbb	[pc, r4]
    aa60:	3c3c3c3c 	.word	0x3c3c3c3c
    aa64:	2c2c2c2c 	.word	0x2c2c2c2c
    aa68:	273c2727 	.word	0x273c2727
    aa6c:	27272727 	.word	0x27272727
    aa70:	27272727 	.word	0x27272727
    aa74:	2c272727 	.word	0x2c272727
    aa78:	28282828 	.word	0x28282828
    aa7c:	28282828 	.word	0x28282828
    aa80:	2727273c 	.word	0x2727273c
    aa84:	272c2727 	.word	0x272c2727
    aa88:	2c3c3e28 	.word	0x2c3c3e28
    aa8c:	3e28283c 	.word	0x3e28283c
    aa90:	27272c2c 	.word	0x27272c2c
    aa94:	3c3c3c27 	.word	0x3c3c3c27
    aa98:	3c273c3c 	.word	0x3c273c3c
    aa9c:	2c3c273c 	.word	0x2c3c273c
    aaa0:	2727272c 	.word	0x2727272c
    aaa4:	272c2c2c 	.word	0x272c2c2c
    aaa8:	283c2727 	.word	0x283c2727
    aaac:	3c          	.byte	0x3c
    aaad:	00          	.byte	0x00
    aaae:	b11a      	cbz	r2, aab8 <d_make_comp+0x64>
    aab0:	6944      	ldr	r4, [r0, #20]
    aab2:	6985      	ldr	r5, [r0, #24]
    aab4:	42ac      	cmp	r4, r5
    aab6:	db02      	blt.n	aabe <d_make_comp+0x6a>
    aab8:	2000      	movs	r0, #0
    aaba:	bc70      	pop	{r4, r5, r6}
    aabc:	4770      	bx	lr
    aabe:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    aac2:	6906      	ldr	r6, [r0, #16]
    aac4:	00ad      	lsls	r5, r5, #2
    aac6:	3401      	adds	r4, #1
    aac8:	6144      	str	r4, [r0, #20]
    aaca:	1970      	adds	r0, r6, r5
    aacc:	d0f5      	beq.n	aaba <d_make_comp+0x66>
    aace:	5571      	strb	r1, [r6, r5]
    aad0:	6042      	str	r2, [r0, #4]
    aad2:	6083      	str	r3, [r0, #8]
    aad4:	bc70      	pop	{r4, r5, r6}
    aad6:	4770      	bx	lr
    aad8:	2a00      	cmp	r2, #0
    aada:	d0ed      	beq.n	aab8 <d_make_comp+0x64>
    aadc:	2b00      	cmp	r3, #0
    aade:	d0eb      	beq.n	aab8 <d_make_comp+0x64>
    aae0:	6944      	ldr	r4, [r0, #20]
    aae2:	6985      	ldr	r5, [r0, #24]
    aae4:	42ac      	cmp	r4, r5
    aae6:	dae7      	bge.n	aab8 <d_make_comp+0x64>
    aae8:	e7e9      	b.n	aabe <d_make_comp+0x6a>
    aaea:	bf00      	nop

0000aaec <d_cv_qualifiers>:
    aaec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aaf0:	68c3      	ldr	r3, [r0, #12]
    aaf2:	f1b2 0a00 	subs.w	sl, r2, #0
    aaf6:	4604      	mov	r4, r0
    aaf8:	460e      	mov	r6, r1
    aafa:	781a      	ldrb	r2, [r3, #0]
    aafc:	bf15      	itete	ne
    aafe:	f04f 091e 	movne.w	r9, #30
    ab02:	f04f 091b 	moveq.w	r9, #27
    ab06:	f04f 081d 	movne.w	r8, #29
    ab0a:	f04f 081a 	moveq.w	r8, #26
    ab0e:	bf14      	ite	ne
    ab10:	271c      	movne	r7, #28
    ab12:	2719      	moveq	r7, #25
    ab14:	460d      	mov	r5, r1
    ab16:	e018      	b.n	ab4a <d_cv_qualifiers+0x5e>
    ab18:	2a56      	cmp	r2, #86	; 0x56
    ab1a:	d01f      	beq.n	ab5c <d_cv_qualifiers+0x70>
    ab1c:	2a4b      	cmp	r2, #75	; 0x4b
    ab1e:	d024      	beq.n	ab6a <d_cv_qualifiers+0x7e>
    ab20:	2a44      	cmp	r2, #68	; 0x44
    ab22:	d12d      	bne.n	ab80 <d_cv_qualifiers+0x94>
    ab24:	785a      	ldrb	r2, [r3, #1]
    ab26:	2a78      	cmp	r2, #120	; 0x78
    ab28:	d127      	bne.n	ab7a <d_cv_qualifiers+0x8e>
    ab2a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    ab2c:	3302      	adds	r3, #2
    ab2e:	3211      	adds	r2, #17
    ab30:	60e3      	str	r3, [r4, #12]
    ab32:	6322      	str	r2, [r4, #48]	; 0x30
    ab34:	214c      	movs	r1, #76	; 0x4c
    ab36:	2300      	movs	r3, #0
    ab38:	461a      	mov	r2, r3
    ab3a:	4620      	mov	r0, r4
    ab3c:	f7ff ff8a 	bl	aa54 <d_make_comp>
    ab40:	6028      	str	r0, [r5, #0]
    ab42:	b1c8      	cbz	r0, ab78 <d_cv_qualifiers+0x8c>
    ab44:	68e3      	ldr	r3, [r4, #12]
    ab46:	781a      	ldrb	r2, [r3, #0]
    ab48:	1d05      	adds	r5, r0, #4
    ab4a:	2a72      	cmp	r2, #114	; 0x72
    ab4c:	d1e4      	bne.n	ab18 <d_cv_qualifiers+0x2c>
    ab4e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    ab50:	3301      	adds	r3, #1
    ab52:	3209      	adds	r2, #9
    ab54:	60e3      	str	r3, [r4, #12]
    ab56:	6322      	str	r2, [r4, #48]	; 0x30
    ab58:	4639      	mov	r1, r7
    ab5a:	e7ec      	b.n	ab36 <d_cv_qualifiers+0x4a>
    ab5c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    ab5e:	3301      	adds	r3, #1
    ab60:	3209      	adds	r2, #9
    ab62:	60e3      	str	r3, [r4, #12]
    ab64:	6322      	str	r2, [r4, #48]	; 0x30
    ab66:	4641      	mov	r1, r8
    ab68:	e7e5      	b.n	ab36 <d_cv_qualifiers+0x4a>
    ab6a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    ab6c:	3301      	adds	r3, #1
    ab6e:	3206      	adds	r2, #6
    ab70:	60e3      	str	r3, [r4, #12]
    ab72:	6322      	str	r2, [r4, #48]	; 0x30
    ab74:	4649      	mov	r1, r9
    ab76:	e7de      	b.n	ab36 <d_cv_qualifiers+0x4a>
    ab78:	4605      	mov	r5, r0
    ab7a:	4628      	mov	r0, r5
    ab7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ab80:	f1ba 0f00 	cmp.w	sl, #0
    ab84:	d1f9      	bne.n	ab7a <d_cv_qualifiers+0x8e>
    ab86:	2a46      	cmp	r2, #70	; 0x46
    ab88:	d1f7      	bne.n	ab7a <d_cv_qualifiers+0x8e>
    ab8a:	42b5      	cmp	r5, r6
    ab8c:	d0f5      	beq.n	ab7a <d_cv_qualifiers+0x8e>
    ab8e:	201d      	movs	r0, #29
    ab90:	211e      	movs	r1, #30
    ab92:	221c      	movs	r2, #28
    ab94:	e007      	b.n	aba6 <d_cv_qualifiers+0xba>
    ab96:	2b1b      	cmp	r3, #27
    ab98:	d00b      	beq.n	abb2 <d_cv_qualifiers+0xc6>
    ab9a:	2b19      	cmp	r3, #25
    ab9c:	d100      	bne.n	aba0 <d_cv_qualifiers+0xb4>
    ab9e:	7032      	strb	r2, [r6, #0]
    aba0:	3604      	adds	r6, #4
    aba2:	42b5      	cmp	r5, r6
    aba4:	d0e9      	beq.n	ab7a <d_cv_qualifiers+0x8e>
    aba6:	6836      	ldr	r6, [r6, #0]
    aba8:	7833      	ldrb	r3, [r6, #0]
    abaa:	2b1a      	cmp	r3, #26
    abac:	d1f3      	bne.n	ab96 <d_cv_qualifiers+0xaa>
    abae:	7030      	strb	r0, [r6, #0]
    abb0:	e7f6      	b.n	aba0 <d_cv_qualifiers+0xb4>
    abb2:	7031      	strb	r1, [r6, #0]
    abb4:	e7f4      	b.n	aba0 <d_cv_qualifiers+0xb4>
    abb6:	bf00      	nop

0000abb8 <d_ref_qualifier>:
    abb8:	b410      	push	{r4}
    abba:	68c3      	ldr	r3, [r0, #12]
    abbc:	781c      	ldrb	r4, [r3, #0]
    abbe:	2c52      	cmp	r4, #82	; 0x52
    abc0:	460a      	mov	r2, r1
    abc2:	d00d      	beq.n	abe0 <d_ref_qualifier+0x28>
    abc4:	2c4f      	cmp	r4, #79	; 0x4f
    abc6:	d002      	beq.n	abce <d_ref_qualifier+0x16>
    abc8:	4608      	mov	r0, r1
    abca:	bc10      	pop	{r4}
    abcc:	4770      	bx	lr
    abce:	6b01      	ldr	r1, [r0, #48]	; 0x30
    abd0:	3103      	adds	r1, #3
    abd2:	6301      	str	r1, [r0, #48]	; 0x30
    abd4:	2120      	movs	r1, #32
    abd6:	3301      	adds	r3, #1
    abd8:	60c3      	str	r3, [r0, #12]
    abda:	bc10      	pop	{r4}
    abdc:	2300      	movs	r3, #0
    abde:	e739      	b.n	aa54 <d_make_comp>
    abe0:	6b01      	ldr	r1, [r0, #48]	; 0x30
    abe2:	3102      	adds	r1, #2
    abe4:	6301      	str	r1, [r0, #48]	; 0x30
    abe6:	211f      	movs	r1, #31
    abe8:	e7f5      	b.n	abd6 <d_ref_qualifier+0x1e>
    abea:	bf00      	nop

0000abec <d_count_templates_scopes>:
    abec:	2a00      	cmp	r2, #0
    abee:	d04d      	beq.n	ac8c <d_count_templates_scopes+0xa0>
    abf0:	b570      	push	{r4, r5, r6, lr}
    abf2:	4605      	mov	r5, r0
    abf4:	460e      	mov	r6, r1
    abf6:	4614      	mov	r4, r2
    abf8:	7823      	ldrb	r3, [r4, #0]
    abfa:	3b01      	subs	r3, #1
    abfc:	2b4c      	cmp	r3, #76	; 0x4c
    abfe:	d82b      	bhi.n	ac58 <d_count_templates_scopes+0x6c>
    ac00:	e8df f003 	tbb	[pc, r3]
    ac04:	3f363636 	.word	0x3f363636
    ac08:	27272a2a 	.word	0x27272a2a
    ac0c:	36363636 	.word	0x36363636
    ac10:	36363636 	.word	0x36363636
    ac14:	36363636 	.word	0x36363636
    ac18:	2a363636 	.word	0x2a363636
    ac1c:	36363636 	.word	0x36363636
    ac20:	36363636 	.word	0x36363636
    ac24:	2f2f3636 	.word	0x2f2f3636
    ac28:	362a3636 	.word	0x362a3636
    ac2c:	2b363636 	.word	0x2b363636
    ac30:	36363636 	.word	0x36363636
    ac34:	3636272a 	.word	0x3636272a
    ac38:	36363636 	.word	0x36363636
    ac3c:	36363636 	.word	0x36363636
    ac40:	2a363636 	.word	0x2a363636
    ac44:	2b2b362a 	.word	0x2b2b362a
    ac48:	362a2b2b 	.word	0x362a2b2b
    ac4c:	36363636 	.word	0x36363636
    ac50:	36          	.byte	0x36
    ac51:	00          	.byte	0x00
    ac52:	68a4      	ldr	r4, [r4, #8]
    ac54:	2c00      	cmp	r4, #0
    ac56:	d1cf      	bne.n	abf8 <d_count_templates_scopes+0xc>
    ac58:	bd70      	pop	{r4, r5, r6, pc}
    ac5a:	6864      	ldr	r4, [r4, #4]
    ac5c:	2c00      	cmp	r4, #0
    ac5e:	d1cb      	bne.n	abf8 <d_count_templates_scopes+0xc>
    ac60:	e7fa      	b.n	ac58 <d_count_templates_scopes+0x6c>
    ac62:	6862      	ldr	r2, [r4, #4]
    ac64:	7813      	ldrb	r3, [r2, #0]
    ac66:	2b05      	cmp	r3, #5
    ac68:	d103      	bne.n	ac72 <d_count_templates_scopes+0x86>
    ac6a:	6833      	ldr	r3, [r6, #0]
    ac6c:	3301      	adds	r3, #1
    ac6e:	6033      	str	r3, [r6, #0]
    ac70:	6862      	ldr	r2, [r4, #4]
    ac72:	4631      	mov	r1, r6
    ac74:	4628      	mov	r0, r5
    ac76:	f7ff ffb9 	bl	abec <d_count_templates_scopes>
    ac7a:	68a4      	ldr	r4, [r4, #8]
    ac7c:	2c00      	cmp	r4, #0
    ac7e:	d1bb      	bne.n	abf8 <d_count_templates_scopes+0xc>
    ac80:	e7ea      	b.n	ac58 <d_count_templates_scopes+0x6c>
    ac82:	682b      	ldr	r3, [r5, #0]
    ac84:	3301      	adds	r3, #1
    ac86:	602b      	str	r3, [r5, #0]
    ac88:	6862      	ldr	r2, [r4, #4]
    ac8a:	e7f2      	b.n	ac72 <d_count_templates_scopes+0x86>
    ac8c:	4770      	bx	lr
    ac8e:	bf00      	nop

0000ac90 <d_append_buffer>:
    ac90:	b37a      	cbz	r2, acf2 <d_append_buffer+0x62>
    ac92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac96:	460d      	mov	r5, r1
    ac98:	4604      	mov	r4, r0
    ac9a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ac9e:	18af      	adds	r7, r5, r2
    aca0:	f04f 0800 	mov.w	r8, #0
    aca4:	e009      	b.n	acba <d_append_buffer+0x2a>
    aca6:	460b      	mov	r3, r1
    aca8:	42bd      	cmp	r5, r7
    acaa:	f101 0101 	add.w	r1, r1, #1
    acae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    acb2:	54e6      	strb	r6, [r4, r3]
    acb4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    acb8:	d019      	beq.n	acee <d_append_buffer+0x5e>
    acba:	29ff      	cmp	r1, #255	; 0xff
    acbc:	f815 6b01 	ldrb.w	r6, [r5], #1
    acc0:	d1f1      	bne.n	aca6 <d_append_buffer+0x16>
    acc2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    acc6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    acca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    acce:	4620      	mov	r0, r4
    acd0:	4798      	blx	r3
    acd2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    acd6:	3301      	adds	r3, #1
    acd8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    acdc:	2300      	movs	r3, #0
    acde:	2101      	movs	r1, #1
    ace0:	42bd      	cmp	r5, r7
    ace2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ace6:	54e6      	strb	r6, [r4, r3]
    ace8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    acec:	d1e5      	bne.n	acba <d_append_buffer+0x2a>
    acee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    acf2:	4770      	bx	lr

0000acf4 <d_number.isra.0>:
    acf4:	b470      	push	{r4, r5, r6}
    acf6:	6802      	ldr	r2, [r0, #0]
    acf8:	7811      	ldrb	r1, [r2, #0]
    acfa:	296e      	cmp	r1, #110	; 0x6e
    acfc:	d018      	beq.n	ad30 <d_number.isra.0+0x3c>
    acfe:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    ad02:	2b09      	cmp	r3, #9
    ad04:	d81e      	bhi.n	ad44 <d_number.isra.0+0x50>
    ad06:	2600      	movs	r6, #0
    ad08:	2300      	movs	r3, #0
    ad0a:	3201      	adds	r2, #1
    ad0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    ad10:	6002      	str	r2, [r0, #0]
    ad12:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    ad16:	7811      	ldrb	r1, [r2, #0]
    ad18:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
    ad1c:	2d09      	cmp	r5, #9
    ad1e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    ad22:	d9f2      	bls.n	ad0a <d_number.isra.0+0x16>
    ad24:	b10e      	cbz	r6, ad2a <d_number.isra.0+0x36>
    ad26:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
    ad2a:	4618      	mov	r0, r3
    ad2c:	bc70      	pop	{r4, r5, r6}
    ad2e:	4770      	bx	lr
    ad30:	1c53      	adds	r3, r2, #1
    ad32:	6003      	str	r3, [r0, #0]
    ad34:	7851      	ldrb	r1, [r2, #1]
    ad36:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    ad3a:	2a09      	cmp	r2, #9
    ad3c:	d802      	bhi.n	ad44 <d_number.isra.0+0x50>
    ad3e:	461a      	mov	r2, r3
    ad40:	2601      	movs	r6, #1
    ad42:	e7e1      	b.n	ad08 <d_number.isra.0+0x14>
    ad44:	2300      	movs	r3, #0
    ad46:	e7f0      	b.n	ad2a <d_number.isra.0+0x36>

0000ad48 <d_number_component>:
    ad48:	6943      	ldr	r3, [r0, #20]
    ad4a:	6982      	ldr	r2, [r0, #24]
    ad4c:	4293      	cmp	r3, r2
    ad4e:	b510      	push	{r4, lr}
    ad50:	da0f      	bge.n	ad72 <d_number_component+0x2a>
    ad52:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    ad56:	6901      	ldr	r1, [r0, #16]
    ad58:	0092      	lsls	r2, r2, #2
    ad5a:	3301      	adds	r3, #1
    ad5c:	188c      	adds	r4, r1, r2
    ad5e:	6143      	str	r3, [r0, #20]
    ad60:	d005      	beq.n	ad6e <d_number_component+0x26>
    ad62:	2341      	movs	r3, #65	; 0x41
    ad64:	300c      	adds	r0, #12
    ad66:	548b      	strb	r3, [r1, r2]
    ad68:	f7ff ffc4 	bl	acf4 <d_number.isra.0>
    ad6c:	6060      	str	r0, [r4, #4]
    ad6e:	4620      	mov	r0, r4
    ad70:	bd10      	pop	{r4, pc}
    ad72:	2400      	movs	r4, #0
    ad74:	4620      	mov	r0, r4
    ad76:	bd10      	pop	{r4, pc}

0000ad78 <d_compact_number>:
    ad78:	b510      	push	{r4, lr}
    ad7a:	68c3      	ldr	r3, [r0, #12]
    ad7c:	781a      	ldrb	r2, [r3, #0]
    ad7e:	2a5f      	cmp	r2, #95	; 0x5f
    ad80:	4604      	mov	r4, r0
    ad82:	d00d      	beq.n	ada0 <d_compact_number+0x28>
    ad84:	2a6e      	cmp	r2, #110	; 0x6e
    ad86:	d00f      	beq.n	ada8 <d_compact_number+0x30>
    ad88:	300c      	adds	r0, #12
    ad8a:	f7ff ffb3 	bl	acf4 <d_number.isra.0>
    ad8e:	3001      	adds	r0, #1
    ad90:	d40a      	bmi.n	ada8 <d_compact_number+0x30>
    ad92:	68e3      	ldr	r3, [r4, #12]
    ad94:	781a      	ldrb	r2, [r3, #0]
    ad96:	2a5f      	cmp	r2, #95	; 0x5f
    ad98:	d106      	bne.n	ada8 <d_compact_number+0x30>
    ad9a:	3301      	adds	r3, #1
    ad9c:	60e3      	str	r3, [r4, #12]
    ad9e:	bd10      	pop	{r4, pc}
    ada0:	3301      	adds	r3, #1
    ada2:	2000      	movs	r0, #0
    ada4:	60e3      	str	r3, [r4, #12]
    ada6:	bd10      	pop	{r4, pc}
    ada8:	f04f 30ff 	mov.w	r0, #4294967295
    adac:	bd10      	pop	{r4, pc}
    adae:	bf00      	nop

0000adb0 <d_template_param>:
    adb0:	b538      	push	{r3, r4, r5, lr}
    adb2:	68c3      	ldr	r3, [r0, #12]
    adb4:	781a      	ldrb	r2, [r3, #0]
    adb6:	2a54      	cmp	r2, #84	; 0x54
    adb8:	d001      	beq.n	adbe <d_template_param+0xe>
    adba:	2000      	movs	r0, #0
    adbc:	bd38      	pop	{r3, r4, r5, pc}
    adbe:	3301      	adds	r3, #1
    adc0:	60c3      	str	r3, [r0, #12]
    adc2:	4604      	mov	r4, r0
    adc4:	f7ff ffd8 	bl	ad78 <d_compact_number>
    adc8:	1e05      	subs	r5, r0, #0
    adca:	dbf6      	blt.n	adba <d_template_param+0xa>
    adcc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    adce:	6963      	ldr	r3, [r4, #20]
    add0:	69a1      	ldr	r1, [r4, #24]
    add2:	3201      	adds	r2, #1
    add4:	428b      	cmp	r3, r1
    add6:	62a2      	str	r2, [r4, #40]	; 0x28
    add8:	daef      	bge.n	adba <d_template_param+0xa>
    adda:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    adde:	6921      	ldr	r1, [r4, #16]
    ade0:	0092      	lsls	r2, r2, #2
    ade2:	3301      	adds	r3, #1
    ade4:	1888      	adds	r0, r1, r2
    ade6:	6163      	str	r3, [r4, #20]
    ade8:	d002      	beq.n	adf0 <d_template_param+0x40>
    adea:	2305      	movs	r3, #5
    adec:	548b      	strb	r3, [r1, r2]
    adee:	6045      	str	r5, [r0, #4]
    adf0:	bd38      	pop	{r3, r4, r5, pc}
    adf2:	bf00      	nop

0000adf4 <d_source_name>:
    adf4:	b570      	push	{r4, r5, r6, lr}
    adf6:	4604      	mov	r4, r0
    adf8:	300c      	adds	r0, #12
    adfa:	f7ff ff7b 	bl	acf4 <d_number.isra.0>
    adfe:	1e06      	subs	r6, r0, #0
    ae00:	dd4d      	ble.n	ae9e <d_source_name+0xaa>
    ae02:	68e5      	ldr	r5, [r4, #12]
    ae04:	6863      	ldr	r3, [r4, #4]
    ae06:	1b5b      	subs	r3, r3, r5
    ae08:	429e      	cmp	r6, r3
    ae0a:	dc2b      	bgt.n	ae64 <d_source_name+0x70>
    ae0c:	68a2      	ldr	r2, [r4, #8]
    ae0e:	19ab      	adds	r3, r5, r6
    ae10:	0752      	lsls	r2, r2, #29
    ae12:	60e3      	str	r3, [r4, #12]
    ae14:	d504      	bpl.n	ae20 <d_source_name+0x2c>
    ae16:	5daa      	ldrb	r2, [r5, r6]
    ae18:	2a24      	cmp	r2, #36	; 0x24
    ae1a:	bf04      	itt	eq
    ae1c:	3301      	addeq	r3, #1
    ae1e:	60e3      	streq	r3, [r4, #12]
    ae20:	2e09      	cmp	r6, #9
    ae22:	dd0c      	ble.n	ae3e <d_source_name+0x4a>
    ae24:	2208      	movs	r2, #8
    ae26:	491f      	ldr	r1, [pc, #124]	; (aea4 <d_source_name+0xb0>)
    ae28:	4628      	mov	r0, r5
    ae2a:	f009 fbd9 	bl	145e0 <memcmp>
    ae2e:	b930      	cbnz	r0, ae3e <d_source_name+0x4a>
    ae30:	7a2b      	ldrb	r3, [r5, #8]
    ae32:	2b2e      	cmp	r3, #46	; 0x2e
    ae34:	d019      	beq.n	ae6a <d_source_name+0x76>
    ae36:	2b5f      	cmp	r3, #95	; 0x5f
    ae38:	d017      	beq.n	ae6a <d_source_name+0x76>
    ae3a:	2b24      	cmp	r3, #36	; 0x24
    ae3c:	d015      	beq.n	ae6a <d_source_name+0x76>
    ae3e:	6963      	ldr	r3, [r4, #20]
    ae40:	69a2      	ldr	r2, [r4, #24]
    ae42:	4293      	cmp	r3, r2
    ae44:	da0e      	bge.n	ae64 <d_source_name+0x70>
    ae46:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    ae4a:	6921      	ldr	r1, [r4, #16]
    ae4c:	0092      	lsls	r2, r2, #2
    ae4e:	3301      	adds	r3, #1
    ae50:	1888      	adds	r0, r1, r2
    ae52:	6163      	str	r3, [r4, #20]
    ae54:	d006      	beq.n	ae64 <d_source_name+0x70>
    ae56:	b12d      	cbz	r5, ae64 <d_source_name+0x70>
    ae58:	2300      	movs	r3, #0
    ae5a:	548b      	strb	r3, [r1, r2]
    ae5c:	6045      	str	r5, [r0, #4]
    ae5e:	6086      	str	r6, [r0, #8]
    ae60:	62e0      	str	r0, [r4, #44]	; 0x2c
    ae62:	bd70      	pop	{r4, r5, r6, pc}
    ae64:	2000      	movs	r0, #0
    ae66:	62e0      	str	r0, [r4, #44]	; 0x2c
    ae68:	bd70      	pop	{r4, r5, r6, pc}
    ae6a:	7a6b      	ldrb	r3, [r5, #9]
    ae6c:	2b4e      	cmp	r3, #78	; 0x4e
    ae6e:	d1e6      	bne.n	ae3e <d_source_name+0x4a>
    ae70:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ae72:	6962      	ldr	r2, [r4, #20]
    ae74:	69a1      	ldr	r1, [r4, #24]
    ae76:	3316      	adds	r3, #22
    ae78:	1b9e      	subs	r6, r3, r6
    ae7a:	428a      	cmp	r2, r1
    ae7c:	6326      	str	r6, [r4, #48]	; 0x30
    ae7e:	daf1      	bge.n	ae64 <d_source_name+0x70>
    ae80:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    ae84:	6921      	ldr	r1, [r4, #16]
    ae86:	009b      	lsls	r3, r3, #2
    ae88:	3201      	adds	r2, #1
    ae8a:	18c8      	adds	r0, r1, r3
    ae8c:	6162      	str	r2, [r4, #20]
    ae8e:	d0ea      	beq.n	ae66 <d_source_name+0x72>
    ae90:	2500      	movs	r5, #0
    ae92:	54cd      	strb	r5, [r1, r3]
    ae94:	4a04      	ldr	r2, [pc, #16]	; (aea8 <d_source_name+0xb4>)
    ae96:	6042      	str	r2, [r0, #4]
    ae98:	2315      	movs	r3, #21
    ae9a:	6083      	str	r3, [r0, #8]
    ae9c:	e7e3      	b.n	ae66 <d_source_name+0x72>
    ae9e:	2000      	movs	r0, #0
    aea0:	bd70      	pop	{r4, r5, r6, pc}
    aea2:	bf00      	nop
    aea4:	00022bec 	.word	0x00022bec
    aea8:	00022bf8 	.word	0x00022bf8

0000aeac <d_abi_tags>:
    aeac:	b570      	push	{r4, r5, r6, lr}
    aeae:	68c3      	ldr	r3, [r0, #12]
    aeb0:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
    aeb2:	781a      	ldrb	r2, [r3, #0]
    aeb4:	2a42      	cmp	r2, #66	; 0x42
    aeb6:	4604      	mov	r4, r0
    aeb8:	460d      	mov	r5, r1
    aeba:	d10f      	bne.n	aedc <d_abi_tags+0x30>
    aebc:	3301      	adds	r3, #1
    aebe:	60e3      	str	r3, [r4, #12]
    aec0:	4620      	mov	r0, r4
    aec2:	f7ff ff97 	bl	adf4 <d_source_name>
    aec6:	462a      	mov	r2, r5
    aec8:	4603      	mov	r3, r0
    aeca:	214b      	movs	r1, #75	; 0x4b
    aecc:	4620      	mov	r0, r4
    aece:	f7ff fdc1 	bl	aa54 <d_make_comp>
    aed2:	68e3      	ldr	r3, [r4, #12]
    aed4:	781a      	ldrb	r2, [r3, #0]
    aed6:	2a42      	cmp	r2, #66	; 0x42
    aed8:	4605      	mov	r5, r0
    aeda:	d0ef      	beq.n	aebc <d_abi_tags+0x10>
    aedc:	62e6      	str	r6, [r4, #44]	; 0x2c
    aede:	4628      	mov	r0, r5
    aee0:	bd70      	pop	{r4, r5, r6, pc}
    aee2:	bf00      	nop

0000aee4 <d_substitution>:
    aee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aee8:	4605      	mov	r5, r0
    aeea:	68c0      	ldr	r0, [r0, #12]
    aeec:	7803      	ldrb	r3, [r0, #0]
    aeee:	2b53      	cmp	r3, #83	; 0x53
    aef0:	d002      	beq.n	aef8 <d_substitution+0x14>
    aef2:	2000      	movs	r0, #0
    aef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aef8:	1c43      	adds	r3, r0, #1
    aefa:	60eb      	str	r3, [r5, #12]
    aefc:	7842      	ldrb	r2, [r0, #1]
    aefe:	b1a2      	cbz	r2, af2a <d_substitution+0x46>
    af00:	1c83      	adds	r3, r0, #2
    af02:	60eb      	str	r3, [r5, #12]
    af04:	7842      	ldrb	r2, [r0, #1]
    af06:	2a5f      	cmp	r2, #95	; 0x5f
    af08:	d15a      	bne.n	afc0 <d_substitution+0xdc>
    af0a:	2300      	movs	r3, #0
    af0c:	6a2a      	ldr	r2, [r5, #32]
    af0e:	4293      	cmp	r3, r2
    af10:	d2ef      	bcs.n	aef2 <d_substitution+0xe>
    af12:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    af14:	69e9      	ldr	r1, [r5, #28]
    af16:	3201      	adds	r2, #1
    af18:	62aa      	str	r2, [r5, #40]	; 0x28
    af1a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    af1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    af22:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    af26:	2b19      	cmp	r3, #25
    af28:	d94f      	bls.n	afca <d_substitution+0xe6>
    af2a:	68ab      	ldr	r3, [r5, #8]
    af2c:	f003 0308 	and.w	r3, r3, #8
    af30:	2b00      	cmp	r3, #0
    af32:	bf14      	ite	ne
    af34:	2401      	movne	r4, #1
    af36:	2400      	moveq	r4, #0
    af38:	d101      	bne.n	af3e <d_substitution+0x5a>
    af3a:	2900      	cmp	r1, #0
    af3c:	d169      	bne.n	b012 <d_substitution+0x12e>
    af3e:	4b46      	ldr	r3, [pc, #280]	; (b058 <d_substitution+0x174>)
    af40:	2174      	movs	r1, #116	; 0x74
    af42:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
    af46:	e003      	b.n	af50 <d_substitution+0x6c>
    af48:	331c      	adds	r3, #28
    af4a:	4283      	cmp	r3, r0
    af4c:	d2d1      	bcs.n	aef2 <d_substitution+0xe>
    af4e:	7819      	ldrb	r1, [r3, #0]
    af50:	428a      	cmp	r2, r1
    af52:	d1f9      	bne.n	af48 <d_substitution+0x64>
    af54:	695e      	ldr	r6, [r3, #20]
    af56:	2e00      	cmp	r6, #0
    af58:	d07b      	beq.n	b052 <d_substitution+0x16e>
    af5a:	696a      	ldr	r2, [r5, #20]
    af5c:	69a9      	ldr	r1, [r5, #24]
    af5e:	428a      	cmp	r2, r1
    af60:	da63      	bge.n	b02a <d_substitution+0x146>
    af62:	eb02 0742 	add.w	r7, r2, r2, lsl #1
    af66:	f8d5 e010 	ldr.w	lr, [r5, #16]
    af6a:	f8d3 8018 	ldr.w	r8, [r3, #24]
    af6e:	00bf      	lsls	r7, r7, #2
    af70:	3201      	adds	r2, #1
    af72:	eb1e 0007 	adds.w	r0, lr, r7
    af76:	616a      	str	r2, [r5, #20]
    af78:	d006      	beq.n	af88 <d_substitution+0xa4>
    af7a:	f04f 0c18 	mov.w	ip, #24
    af7e:	f80e c007 	strb.w	ip, [lr, r7]
    af82:	6046      	str	r6, [r0, #4]
    af84:	f8c0 8008 	str.w	r8, [r0, #8]
    af88:	62e8      	str	r0, [r5, #44]	; 0x2c
    af8a:	2c00      	cmp	r4, #0
    af8c:	d04a      	beq.n	b024 <d_substitution+0x140>
    af8e:	68de      	ldr	r6, [r3, #12]
    af90:	691c      	ldr	r4, [r3, #16]
    af92:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    af94:	4291      	cmp	r1, r2
    af96:	4423      	add	r3, r4
    af98:	632b      	str	r3, [r5, #48]	; 0x30
    af9a:	dd41      	ble.n	b020 <d_substitution+0x13c>
    af9c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    afa0:	6929      	ldr	r1, [r5, #16]
    afa2:	009b      	lsls	r3, r3, #2
    afa4:	3201      	adds	r2, #1
    afa6:	18c8      	adds	r0, r1, r3
    afa8:	616a      	str	r2, [r5, #20]
    afaa:	d003      	beq.n	afb4 <d_substitution+0xd0>
    afac:	2218      	movs	r2, #24
    afae:	54ca      	strb	r2, [r1, r3]
    afb0:	6046      	str	r6, [r0, #4]
    afb2:	6084      	str	r4, [r0, #8]
    afb4:	68eb      	ldr	r3, [r5, #12]
    afb6:	781b      	ldrb	r3, [r3, #0]
    afb8:	2b42      	cmp	r3, #66	; 0x42
    afba:	d038      	beq.n	b02e <d_substitution+0x14a>
    afbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    afc0:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
    afc4:	b2e3      	uxtb	r3, r4
    afc6:	2b09      	cmp	r3, #9
    afc8:	d8ab      	bhi.n	af22 <d_substitution+0x3e>
    afca:	2100      	movs	r1, #0
    afcc:	e00d      	b.n	afea <d_substitution+0x106>
    afce:	3b30      	subs	r3, #48	; 0x30
    afd0:	4299      	cmp	r1, r3
    afd2:	d88e      	bhi.n	aef2 <d_substitution+0xe>
    afd4:	68e9      	ldr	r1, [r5, #12]
    afd6:	780a      	ldrb	r2, [r1, #0]
    afd8:	1c48      	adds	r0, r1, #1
    afda:	b11a      	cbz	r2, afe4 <d_substitution+0x100>
    afdc:	60e8      	str	r0, [r5, #12]
    afde:	780a      	ldrb	r2, [r1, #0]
    afe0:	2a5f      	cmp	r2, #95	; 0x5f
    afe2:	d014      	beq.n	b00e <d_substitution+0x12a>
    afe4:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
    afe8:	4619      	mov	r1, r3
    afea:	b2e4      	uxtb	r4, r4
    afec:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    aff0:	2c09      	cmp	r4, #9
    aff2:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
    aff6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    affa:	d9e8      	bls.n	afce <d_substitution+0xea>
    affc:	2819      	cmp	r0, #25
    affe:	f63f af78 	bhi.w	aef2 <d_substitution+0xe>
    b002:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    b006:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    b00a:	3b37      	subs	r3, #55	; 0x37
    b00c:	e7e0      	b.n	afd0 <d_substitution+0xec>
    b00e:	3301      	adds	r3, #1
    b010:	e77c      	b.n	af0c <d_substitution+0x28>
    b012:	68eb      	ldr	r3, [r5, #12]
    b014:	781b      	ldrb	r3, [r3, #0]
    b016:	3b43      	subs	r3, #67	; 0x43
    b018:	2b01      	cmp	r3, #1
    b01a:	bf98      	it	ls
    b01c:	2401      	movls	r4, #1
    b01e:	e78e      	b.n	af3e <d_substitution+0x5a>
    b020:	2000      	movs	r0, #0
    b022:	e7c7      	b.n	afb4 <d_substitution+0xd0>
    b024:	685e      	ldr	r6, [r3, #4]
    b026:	689c      	ldr	r4, [r3, #8]
    b028:	e7b3      	b.n	af92 <d_substitution+0xae>
    b02a:	2000      	movs	r0, #0
    b02c:	e7ac      	b.n	af88 <d_substitution+0xa4>
    b02e:	4601      	mov	r1, r0
    b030:	4628      	mov	r0, r5
    b032:	f7ff ff3b 	bl	aeac <d_abi_tags>
    b036:	2800      	cmp	r0, #0
    b038:	f43f af5b 	beq.w	aef2 <d_substitution+0xe>
    b03c:	6a2b      	ldr	r3, [r5, #32]
    b03e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    b040:	4293      	cmp	r3, r2
    b042:	dabb      	bge.n	afbc <d_substitution+0xd8>
    b044:	69e9      	ldr	r1, [r5, #28]
    b046:	1c5a      	adds	r2, r3, #1
    b048:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    b04c:	622a      	str	r2, [r5, #32]
    b04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b052:	69a9      	ldr	r1, [r5, #24]
    b054:	696a      	ldr	r2, [r5, #20]
    b056:	e798      	b.n	af8a <d_substitution+0xa6>
    b058:	00022454 	.word	0x00022454

0000b05c <d_call_offset>:
    b05c:	b538      	push	{r3, r4, r5, lr}
    b05e:	4604      	mov	r4, r0
    b060:	b929      	cbnz	r1, b06e <d_call_offset+0x12>
    b062:	68c3      	ldr	r3, [r0, #12]
    b064:	781a      	ldrb	r2, [r3, #0]
    b066:	b132      	cbz	r2, b076 <d_call_offset+0x1a>
    b068:	1c5a      	adds	r2, r3, #1
    b06a:	60c2      	str	r2, [r0, #12]
    b06c:	7819      	ldrb	r1, [r3, #0]
    b06e:	2968      	cmp	r1, #104	; 0x68
    b070:	d019      	beq.n	b0a6 <d_call_offset+0x4a>
    b072:	2976      	cmp	r1, #118	; 0x76
    b074:	d001      	beq.n	b07a <d_call_offset+0x1e>
    b076:	2000      	movs	r0, #0
    b078:	bd38      	pop	{r3, r4, r5, pc}
    b07a:	f104 050c 	add.w	r5, r4, #12
    b07e:	4628      	mov	r0, r5
    b080:	f7ff fe38 	bl	acf4 <d_number.isra.0>
    b084:	68e3      	ldr	r3, [r4, #12]
    b086:	781a      	ldrb	r2, [r3, #0]
    b088:	2a5f      	cmp	r2, #95	; 0x5f
    b08a:	d1f4      	bne.n	b076 <d_call_offset+0x1a>
    b08c:	3301      	adds	r3, #1
    b08e:	60e3      	str	r3, [r4, #12]
    b090:	4628      	mov	r0, r5
    b092:	f7ff fe2f 	bl	acf4 <d_number.isra.0>
    b096:	68e3      	ldr	r3, [r4, #12]
    b098:	781a      	ldrb	r2, [r3, #0]
    b09a:	2a5f      	cmp	r2, #95	; 0x5f
    b09c:	d1eb      	bne.n	b076 <d_call_offset+0x1a>
    b09e:	3301      	adds	r3, #1
    b0a0:	60e3      	str	r3, [r4, #12]
    b0a2:	2001      	movs	r0, #1
    b0a4:	bd38      	pop	{r3, r4, r5, pc}
    b0a6:	f104 000c 	add.w	r0, r4, #12
    b0aa:	f7ff fe23 	bl	acf4 <d_number.isra.0>
    b0ae:	e7f2      	b.n	b096 <d_call_offset+0x3a>

0000b0b0 <d_lookup_template_argument.isra.6>:
    b0b0:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    b0b4:	b19b      	cbz	r3, b0de <d_lookup_template_argument.isra.6+0x2e>
    b0b6:	680a      	ldr	r2, [r1, #0]
    b0b8:	685b      	ldr	r3, [r3, #4]
    b0ba:	2a00      	cmp	r2, #0
    b0bc:	689b      	ldr	r3, [r3, #8]
    b0be:	db09      	blt.n	b0d4 <d_lookup_template_argument.isra.6+0x24>
    b0c0:	b923      	cbnz	r3, b0cc <d_lookup_template_argument.isra.6+0x1c>
    b0c2:	e007      	b.n	b0d4 <d_lookup_template_argument.isra.6+0x24>
    b0c4:	b142      	cbz	r2, b0d8 <d_lookup_template_argument.isra.6+0x28>
    b0c6:	689b      	ldr	r3, [r3, #8]
    b0c8:	3a01      	subs	r2, #1
    b0ca:	b11b      	cbz	r3, b0d4 <d_lookup_template_argument.isra.6+0x24>
    b0cc:	7819      	ldrb	r1, [r3, #0]
    b0ce:	292f      	cmp	r1, #47	; 0x2f
    b0d0:	d0f8      	beq.n	b0c4 <d_lookup_template_argument.isra.6+0x14>
    b0d2:	2300      	movs	r3, #0
    b0d4:	4618      	mov	r0, r3
    b0d6:	4770      	bx	lr
    b0d8:	685b      	ldr	r3, [r3, #4]
    b0da:	4618      	mov	r0, r3
    b0dc:	4770      	bx	lr
    b0de:	2201      	movs	r2, #1
    b0e0:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
    b0e4:	e7f6      	b.n	b0d4 <d_lookup_template_argument.isra.6+0x24>
    b0e6:	bf00      	nop

0000b0e8 <d_find_pack>:
    b0e8:	2900      	cmp	r1, #0
    b0ea:	d041      	beq.n	b170 <d_find_pack+0x88>
    b0ec:	b538      	push	{r3, r4, r5, lr}
    b0ee:	4605      	mov	r5, r0
    b0f0:	460c      	mov	r4, r1
    b0f2:	7823      	ldrb	r3, [r4, #0]
    b0f4:	2b4b      	cmp	r3, #75	; 0x4b
    b0f6:	d827      	bhi.n	b148 <d_find_pack+0x60>
    b0f8:	e8df f003 	tbb	[pc, r3]
    b0fc:	2626262e 	.word	0x2626262e
    b100:	2b2e3026 	.word	0x2b2e3026
    b104:	2626262b 	.word	0x2626262b
    b108:	26262626 	.word	0x26262626
    b10c:	26262626 	.word	0x26262626
    b110:	26262626 	.word	0x26262626
    b114:	2626262e 	.word	0x2626262e
    b118:	26262626 	.word	0x26262626
    b11c:	26262626 	.word	0x26262626
    b120:	2e262626 	.word	0x2e262626
    b124:	26262626 	.word	0x26262626
    b128:	2626262e 	.word	0x2626262e
    b12c:	262b2e26 	.word	0x262b2e26
    b130:	26262626 	.word	0x26262626
    b134:	26262626 	.word	0x26262626
    b138:	26262626 	.word	0x26262626
    b13c:	26262e2e 	.word	0x26262e2e
    b140:	2e2e2e26 	.word	0x2e2e2e26
    b144:	2e2e2626 	.word	0x2e2e2626
    b148:	6861      	ldr	r1, [r4, #4]
    b14a:	4628      	mov	r0, r5
    b14c:	f7ff ffcc 	bl	b0e8 <d_find_pack>
    b150:	b918      	cbnz	r0, b15a <d_find_pack+0x72>
    b152:	68a4      	ldr	r4, [r4, #8]
    b154:	2c00      	cmp	r4, #0
    b156:	d1cc      	bne.n	b0f2 <d_find_pack+0xa>
    b158:	2000      	movs	r0, #0
    b15a:	bd38      	pop	{r3, r4, r5, pc}
    b15c:	1d21      	adds	r1, r4, #4
    b15e:	4628      	mov	r0, r5
    b160:	f7ff ffa6 	bl	b0b0 <d_lookup_template_argument.isra.6>
    b164:	2800      	cmp	r0, #0
    b166:	d0f7      	beq.n	b158 <d_find_pack+0x70>
    b168:	7803      	ldrb	r3, [r0, #0]
    b16a:	2b2f      	cmp	r3, #47	; 0x2f
    b16c:	d1f4      	bne.n	b158 <d_find_pack+0x70>
    b16e:	bd38      	pop	{r3, r4, r5, pc}
    b170:	2000      	movs	r0, #0
    b172:	4770      	bx	lr

0000b174 <d_growable_string_callback_adapter>:
    b174:	b5f0      	push	{r4, r5, r6, r7, lr}
    b176:	4615      	mov	r5, r2
    b178:	6852      	ldr	r2, [r2, #4]
    b17a:	68ac      	ldr	r4, [r5, #8]
    b17c:	1c4b      	adds	r3, r1, #1
    b17e:	4413      	add	r3, r2
    b180:	42a3      	cmp	r3, r4
    b182:	b083      	sub	sp, #12
    b184:	460e      	mov	r6, r1
    b186:	4607      	mov	r7, r0
    b188:	d813      	bhi.n	b1b2 <d_growable_string_callback_adapter+0x3e>
    b18a:	68ec      	ldr	r4, [r5, #12]
    b18c:	b10c      	cbz	r4, b192 <d_growable_string_callback_adapter+0x1e>
    b18e:	b003      	add	sp, #12
    b190:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b192:	e895 0009 	ldmia.w	r5, {r0, r3}
    b196:	4632      	mov	r2, r6
    b198:	4639      	mov	r1, r7
    b19a:	4418      	add	r0, r3
    b19c:	f009 fa50 	bl	14640 <memcpy>
    b1a0:	682b      	ldr	r3, [r5, #0]
    b1a2:	686a      	ldr	r2, [r5, #4]
    b1a4:	4433      	add	r3, r6
    b1a6:	549c      	strb	r4, [r3, r2]
    b1a8:	686b      	ldr	r3, [r5, #4]
    b1aa:	441e      	add	r6, r3
    b1ac:	606e      	str	r6, [r5, #4]
    b1ae:	b003      	add	sp, #12
    b1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b1b2:	68ea      	ldr	r2, [r5, #12]
    b1b4:	2a00      	cmp	r2, #0
    b1b6:	d1ea      	bne.n	b18e <d_growable_string_callback_adapter+0x1a>
    b1b8:	b91c      	cbnz	r4, b1c2 <d_growable_string_callback_adapter+0x4e>
    b1ba:	2b02      	cmp	r3, #2
    b1bc:	f04f 0402 	mov.w	r4, #2
    b1c0:	d902      	bls.n	b1c8 <d_growable_string_callback_adapter+0x54>
    b1c2:	0064      	lsls	r4, r4, #1
    b1c4:	42a3      	cmp	r3, r4
    b1c6:	d8fc      	bhi.n	b1c2 <d_growable_string_callback_adapter+0x4e>
    b1c8:	4621      	mov	r1, r4
    b1ca:	6828      	ldr	r0, [r5, #0]
    b1cc:	f009 fbdc 	bl	14988 <realloc>
    b1d0:	b110      	cbz	r0, b1d8 <d_growable_string_callback_adapter+0x64>
    b1d2:	6028      	str	r0, [r5, #0]
    b1d4:	60ac      	str	r4, [r5, #8]
    b1d6:	e7d8      	b.n	b18a <d_growable_string_callback_adapter+0x16>
    b1d8:	9001      	str	r0, [sp, #4]
    b1da:	6828      	ldr	r0, [r5, #0]
    b1dc:	f008 fedc 	bl	13f98 <free>
    b1e0:	9b01      	ldr	r3, [sp, #4]
    b1e2:	602b      	str	r3, [r5, #0]
    b1e4:	2201      	movs	r2, #1
    b1e6:	606b      	str	r3, [r5, #4]
    b1e8:	60ab      	str	r3, [r5, #8]
    b1ea:	60ea      	str	r2, [r5, #12]
    b1ec:	e7cf      	b.n	b18e <d_growable_string_callback_adapter+0x1a>
    b1ee:	bf00      	nop

0000b1f0 <d_append_num>:
    b1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1f4:	b088      	sub	sp, #32
    b1f6:	460a      	mov	r2, r1
    b1f8:	4604      	mov	r4, r0
    b1fa:	491b      	ldr	r1, [pc, #108]	; (b268 <d_append_num+0x78>)
    b1fc:	a801      	add	r0, sp, #4
    b1fe:	f009 fdd1 	bl	14da4 <sprintf>
    b202:	a801      	add	r0, sp, #4
    b204:	f00a f99c 	bl	15540 <strlen>
    b208:	b350      	cbz	r0, b260 <d_append_num+0x70>
    b20a:	ad01      	add	r5, sp, #4
    b20c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    b210:	182f      	adds	r7, r5, r0
    b212:	f04f 0800 	mov.w	r8, #0
    b216:	e009      	b.n	b22c <d_append_num+0x3c>
    b218:	460b      	mov	r3, r1
    b21a:	42bd      	cmp	r5, r7
    b21c:	f101 0101 	add.w	r1, r1, #1
    b220:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    b224:	54e6      	strb	r6, [r4, r3]
    b226:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    b22a:	d019      	beq.n	b260 <d_append_num+0x70>
    b22c:	29ff      	cmp	r1, #255	; 0xff
    b22e:	f815 6b01 	ldrb.w	r6, [r5], #1
    b232:	d1f1      	bne.n	b218 <d_append_num+0x28>
    b234:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    b238:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    b23c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    b240:	4620      	mov	r0, r4
    b242:	4798      	blx	r3
    b244:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    b248:	3301      	adds	r3, #1
    b24a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    b24e:	2300      	movs	r3, #0
    b250:	2101      	movs	r1, #1
    b252:	42bd      	cmp	r5, r7
    b254:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    b258:	54e6      	strb	r6, [r4, r3]
    b25a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    b25e:	d1e5      	bne.n	b22c <d_append_num+0x3c>
    b260:	b008      	add	sp, #32
    b262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b266:	bf00      	nop
    b268:	00021c30 	.word	0x00021c30

0000b26c <d_exprlist>:
    b26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b270:	68c3      	ldr	r3, [r0, #12]
    b272:	781d      	ldrb	r5, [r3, #0]
    b274:	b083      	sub	sp, #12
    b276:	2200      	movs	r2, #0
    b278:	428d      	cmp	r5, r1
    b27a:	4604      	mov	r4, r0
    b27c:	9201      	str	r2, [sp, #4]
    b27e:	f000 81c6 	beq.w	b60e <d_exprlist+0x3a2>
    b282:	4688      	mov	r8, r1
    b284:	f8df 949c 	ldr.w	r9, [pc, #1180]	; b724 <d_exprlist+0x4b8>
    b288:	ae01      	add	r6, sp, #4
    b28a:	e023      	b.n	b2d4 <d_exprlist+0x68>
    b28c:	2a66      	cmp	r2, #102	; 0x66
    b28e:	d04c      	beq.n	b32a <d_exprlist+0xbe>
    b290:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    b294:	2909      	cmp	r1, #9
    b296:	f200 8217 	bhi.w	b6c8 <d_exprlist+0x45c>
    b29a:	4620      	mov	r0, r4
    b29c:	f001 fb10 	bl	c8c0 <d_unqualified_name>
    b2a0:	4605      	mov	r5, r0
    b2a2:	2800      	cmp	r0, #0
    b2a4:	f000 8170 	beq.w	b588 <d_exprlist+0x31c>
    b2a8:	68e3      	ldr	r3, [r4, #12]
    b2aa:	781b      	ldrb	r3, [r3, #0]
    b2ac:	2b49      	cmp	r3, #73	; 0x49
    b2ae:	f000 8092 	beq.w	b3d6 <d_exprlist+0x16a>
    b2b2:	6367      	str	r7, [r4, #52]	; 0x34
    b2b4:	462a      	mov	r2, r5
    b2b6:	2300      	movs	r3, #0
    b2b8:	212e      	movs	r1, #46	; 0x2e
    b2ba:	4620      	mov	r0, r4
    b2bc:	f7ff fbca 	bl	aa54 <d_make_comp>
    b2c0:	6030      	str	r0, [r6, #0]
    b2c2:	2800      	cmp	r0, #0
    b2c4:	d05b      	beq.n	b37e <d_exprlist+0x112>
    b2c6:	68e3      	ldr	r3, [r4, #12]
    b2c8:	781a      	ldrb	r2, [r3, #0]
    b2ca:	4542      	cmp	r2, r8
    b2cc:	f100 0608 	add.w	r6, r0, #8
    b2d0:	f000 8107 	beq.w	b4e2 <d_exprlist+0x276>
    b2d4:	2501      	movs	r5, #1
    b2d6:	6b67      	ldr	r7, [r4, #52]	; 0x34
    b2d8:	6365      	str	r5, [r4, #52]	; 0x34
    b2da:	781a      	ldrb	r2, [r3, #0]
    b2dc:	2a4c      	cmp	r2, #76	; 0x4c
    b2de:	d047      	beq.n	b370 <d_exprlist+0x104>
    b2e0:	2a54      	cmp	r2, #84	; 0x54
    b2e2:	d051      	beq.n	b388 <d_exprlist+0x11c>
    b2e4:	2a73      	cmp	r2, #115	; 0x73
    b2e6:	d1d1      	bne.n	b28c <d_exprlist+0x20>
    b2e8:	785a      	ldrb	r2, [r3, #1]
    b2ea:	2a72      	cmp	r2, #114	; 0x72
    b2ec:	f000 80e2 	beq.w	b4b4 <d_exprlist+0x248>
    b2f0:	2a70      	cmp	r2, #112	; 0x70
    b2f2:	f000 80fd 	beq.w	b4f0 <d_exprlist+0x284>
    b2f6:	4620      	mov	r0, r4
    b2f8:	f001 fa22 	bl	c740 <d_operator_name>
    b2fc:	4605      	mov	r5, r0
    b2fe:	2800      	cmp	r0, #0
    b300:	f000 8142 	beq.w	b588 <d_exprlist+0x31c>
    b304:	782b      	ldrb	r3, [r5, #0]
    b306:	2b31      	cmp	r3, #49	; 0x31
    b308:	d043      	beq.n	b392 <d_exprlist+0x126>
    b30a:	2b32      	cmp	r3, #50	; 0x32
    b30c:	d05c      	beq.n	b3c8 <d_exprlist+0x15c>
    b30e:	2b33      	cmp	r3, #51	; 0x33
    b310:	d17b      	bne.n	b40a <d_exprlist+0x19e>
    b312:	68e3      	ldr	r3, [r4, #12]
    b314:	781a      	ldrb	r2, [r3, #0]
    b316:	2a5f      	cmp	r2, #95	; 0x5f
    b318:	f040 80c1 	bne.w	b49e <d_exprlist+0x232>
    b31c:	3301      	adds	r3, #1
    b31e:	60e3      	str	r3, [r4, #12]
    b320:	2145      	movs	r1, #69	; 0x45
    b322:	4620      	mov	r0, r4
    b324:	f7ff ffa2 	bl	b26c <d_exprlist>
    b328:	e0bc      	b.n	b4a4 <d_exprlist+0x238>
    b32a:	785a      	ldrb	r2, [r3, #1]
    b32c:	2a70      	cmp	r2, #112	; 0x70
    b32e:	d1e2      	bne.n	b2f6 <d_exprlist+0x8a>
    b330:	1c9a      	adds	r2, r3, #2
    b332:	60e2      	str	r2, [r4, #12]
    b334:	789a      	ldrb	r2, [r3, #2]
    b336:	2a54      	cmp	r2, #84	; 0x54
    b338:	d069      	beq.n	b40e <d_exprlist+0x1a2>
    b33a:	4620      	mov	r0, r4
    b33c:	f7ff fd1c 	bl	ad78 <d_compact_number>
    b340:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    b344:	4298      	cmp	r0, r3
    b346:	d060      	beq.n	b40a <d_exprlist+0x19e>
    b348:	1c43      	adds	r3, r0, #1
    b34a:	d05e      	beq.n	b40a <d_exprlist+0x19e>
    b34c:	3001      	adds	r0, #1
    b34e:	6963      	ldr	r3, [r4, #20]
    b350:	69a2      	ldr	r2, [r4, #24]
    b352:	4293      	cmp	r3, r2
    b354:	da59      	bge.n	b40a <d_exprlist+0x19e>
    b356:	6922      	ldr	r2, [r4, #16]
    b358:	1c59      	adds	r1, r3, #1
    b35a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    b35e:	eb12 0583 	adds.w	r5, r2, r3, lsl #2
    b362:	6161      	str	r1, [r4, #20]
    b364:	d051      	beq.n	b40a <d_exprlist+0x19e>
    b366:	2106      	movs	r1, #6
    b368:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    b36c:	6068      	str	r0, [r5, #4]
    b36e:	e7a0      	b.n	b2b2 <d_exprlist+0x46>
    b370:	4620      	mov	r0, r4
    b372:	f001 fef3 	bl	d15c <d_expr_primary>
    b376:	4605      	mov	r5, r0
    b378:	6367      	str	r7, [r4, #52]	; 0x34
    b37a:	2d00      	cmp	r5, #0
    b37c:	d19a      	bne.n	b2b4 <d_exprlist+0x48>
    b37e:	2500      	movs	r5, #0
    b380:	4628      	mov	r0, r5
    b382:	b003      	add	sp, #12
    b384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b388:	4620      	mov	r0, r4
    b38a:	f7ff fd11 	bl	adb0 <d_template_param>
    b38e:	4605      	mov	r5, r0
    b390:	e7f2      	b.n	b378 <d_exprlist+0x10c>
    b392:	f8d5 b004 	ldr.w	fp, [r5, #4]
    b396:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b398:	f8db 2008 	ldr.w	r2, [fp, #8]
    b39c:	f8db a000 	ldr.w	sl, [fp]
    b3a0:	3a02      	subs	r2, #2
    b3a2:	4413      	add	r3, r2
    b3a4:	6323      	str	r3, [r4, #48]	; 0x30
    b3a6:	4650      	mov	r0, sl
    b3a8:	4649      	mov	r1, r9
    b3aa:	f009 fd6d 	bl	14e88 <strcmp>
    b3ae:	2800      	cmp	r0, #0
    b3b0:	f000 80e6 	beq.w	b580 <d_exprlist+0x314>
    b3b4:	f8db 300c 	ldr.w	r3, [fp, #12]
    b3b8:	2b03      	cmp	r3, #3
    b3ba:	d826      	bhi.n	b40a <d_exprlist+0x19e>
    b3bc:	e8df f013 	tbh	[pc, r3, lsl #1]
    b3c0:	0135002b 	.word	0x0135002b
    b3c4:	00a50033 	.word	0x00a50033
    b3c8:	686b      	ldr	r3, [r5, #4]
    b3ca:	2b03      	cmp	r3, #3
    b3cc:	d81d      	bhi.n	b40a <d_exprlist+0x19e>
    b3ce:	e8df f003 	tbb	[pc, r3]
    b3d2:	6622      	.short	0x6622
    b3d4:	1c1c      	.short	0x1c1c
    b3d6:	4620      	mov	r0, r4
    b3d8:	f000 fc04 	bl	bbe4 <d_template_args>
    b3dc:	462a      	mov	r2, r5
    b3de:	4603      	mov	r3, r0
    b3e0:	2104      	movs	r1, #4
    b3e2:	4620      	mov	r0, r4
    b3e4:	f7ff fb36 	bl	aa54 <d_make_comp>
    b3e8:	4605      	mov	r5, r0
    b3ea:	e7c5      	b.n	b378 <d_exprlist+0x10c>
    b3ec:	2a74      	cmp	r2, #116	; 0x74
    b3ee:	d182      	bne.n	b2f6 <d_exprlist+0x8a>
    b3f0:	785b      	ldrb	r3, [r3, #1]
    b3f2:	2b6c      	cmp	r3, #108	; 0x6c
    b3f4:	f47f af7f 	bne.w	b2f6 <d_exprlist+0x8a>
    b3f8:	4620      	mov	r0, r4
    b3fa:	f000 fdb9 	bl	bf70 <d_type>
    b3fe:	68e3      	ldr	r3, [r4, #12]
    b400:	785a      	ldrb	r2, [r3, #1]
    b402:	4605      	mov	r5, r0
    b404:	2a00      	cmp	r2, #0
    b406:	f040 8169 	bne.w	b6dc <d_exprlist+0x470>
    b40a:	6367      	str	r7, [r4, #52]	; 0x34
    b40c:	e7b7      	b.n	b37e <d_exprlist+0x112>
    b40e:	3303      	adds	r3, #3
    b410:	60e3      	str	r3, [r4, #12]
    b412:	2000      	movs	r0, #0
    b414:	e79b      	b.n	b34e <d_exprlist+0xe2>
    b416:	462a      	mov	r2, r5
    b418:	2300      	movs	r3, #0
    b41a:	2135      	movs	r1, #53	; 0x35
    b41c:	4620      	mov	r0, r4
    b41e:	f7ff fb19 	bl	aa54 <d_make_comp>
    b422:	4605      	mov	r5, r0
    b424:	e7a8      	b.n	b378 <d_exprlist+0x10c>
    b426:	f1ba 0f00 	cmp.w	sl, #0
    b42a:	d0ee      	beq.n	b40a <d_exprlist+0x19e>
    b42c:	686b      	ldr	r3, [r5, #4]
    b42e:	681b      	ldr	r3, [r3, #0]
    b430:	785a      	ldrb	r2, [r3, #1]
    b432:	2a63      	cmp	r2, #99	; 0x63
    b434:	f000 80d2 	beq.w	b5dc <d_exprlist+0x370>
    b438:	f89a 3000 	ldrb.w	r3, [sl]
    b43c:	2b66      	cmp	r3, #102	; 0x66
    b43e:	f000 80ef 	beq.w	b620 <d_exprlist+0x3b4>
    b442:	4620      	mov	r0, r4
    b444:	f000 f970 	bl	b728 <d_expression_1>
    b448:	4683      	mov	fp, r0
    b44a:	49b1      	ldr	r1, [pc, #708]	; (b710 <d_exprlist+0x4a4>)
    b44c:	4650      	mov	r0, sl
    b44e:	f009 fd1b 	bl	14e88 <strcmp>
    b452:	2800      	cmp	r0, #0
    b454:	f000 809d 	beq.w	b592 <d_exprlist+0x326>
    b458:	49ae      	ldr	r1, [pc, #696]	; (b714 <d_exprlist+0x4a8>)
    b45a:	4650      	mov	r0, sl
    b45c:	f009 fd14 	bl	14e88 <strcmp>
    b460:	b130      	cbz	r0, b470 <d_exprlist+0x204>
    b462:	4650      	mov	r0, sl
    b464:	49ac      	ldr	r1, [pc, #688]	; (b718 <d_exprlist+0x4ac>)
    b466:	f009 fd0f 	bl	14e88 <strcmp>
    b46a:	2800      	cmp	r0, #0
    b46c:	f040 8083 	bne.w	b576 <d_exprlist+0x30a>
    b470:	4620      	mov	r0, r4
    b472:	f001 fa25 	bl	c8c0 <d_unqualified_name>
    b476:	68e3      	ldr	r3, [r4, #12]
    b478:	781b      	ldrb	r3, [r3, #0]
    b47a:	2b49      	cmp	r3, #73	; 0x49
    b47c:	4682      	mov	sl, r0
    b47e:	f000 80e9 	beq.w	b654 <d_exprlist+0x3e8>
    b482:	4653      	mov	r3, sl
    b484:	465a      	mov	r2, fp
    b486:	2138      	movs	r1, #56	; 0x38
    b488:	4620      	mov	r0, r4
    b48a:	f7ff fae3 	bl	aa54 <d_make_comp>
    b48e:	462a      	mov	r2, r5
    b490:	4603      	mov	r3, r0
    b492:	2137      	movs	r1, #55	; 0x37
    b494:	4620      	mov	r0, r4
    b496:	f7ff fadd 	bl	aa54 <d_make_comp>
    b49a:	4605      	mov	r5, r0
    b49c:	e76c      	b.n	b378 <d_exprlist+0x10c>
    b49e:	4620      	mov	r0, r4
    b4a0:	f000 f942 	bl	b728 <d_expression_1>
    b4a4:	4603      	mov	r3, r0
    b4a6:	462a      	mov	r2, r5
    b4a8:	2136      	movs	r1, #54	; 0x36
    b4aa:	4620      	mov	r0, r4
    b4ac:	f7ff fad2 	bl	aa54 <d_make_comp>
    b4b0:	4605      	mov	r5, r0
    b4b2:	e761      	b.n	b378 <d_exprlist+0x10c>
    b4b4:	3302      	adds	r3, #2
    b4b6:	60e3      	str	r3, [r4, #12]
    b4b8:	4620      	mov	r0, r4
    b4ba:	f000 fd59 	bl	bf70 <d_type>
    b4be:	4682      	mov	sl, r0
    b4c0:	4620      	mov	r0, r4
    b4c2:	f001 f9fd 	bl	c8c0 <d_unqualified_name>
    b4c6:	68e3      	ldr	r3, [r4, #12]
    b4c8:	781b      	ldrb	r3, [r3, #0]
    b4ca:	2b49      	cmp	r3, #73	; 0x49
    b4cc:	4683      	mov	fp, r0
    b4ce:	f000 8093 	beq.w	b5f8 <d_exprlist+0x38c>
    b4d2:	4603      	mov	r3, r0
    b4d4:	4629      	mov	r1, r5
    b4d6:	4652      	mov	r2, sl
    b4d8:	4620      	mov	r0, r4
    b4da:	f7ff fabb 	bl	aa54 <d_make_comp>
    b4de:	4605      	mov	r5, r0
    b4e0:	e74a      	b.n	b378 <d_exprlist+0x10c>
    b4e2:	9d01      	ldr	r5, [sp, #4]
    b4e4:	3301      	adds	r3, #1
    b4e6:	4628      	mov	r0, r5
    b4e8:	60e3      	str	r3, [r4, #12]
    b4ea:	b003      	add	sp, #12
    b4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b4f0:	3302      	adds	r3, #2
    b4f2:	60e3      	str	r3, [r4, #12]
    b4f4:	4620      	mov	r0, r4
    b4f6:	f000 f917 	bl	b728 <d_expression_1>
    b4fa:	2300      	movs	r3, #0
    b4fc:	4602      	mov	r2, r0
    b4fe:	214a      	movs	r1, #74	; 0x4a
    b500:	4620      	mov	r0, r4
    b502:	f7ff faa7 	bl	aa54 <d_make_comp>
    b506:	4605      	mov	r5, r0
    b508:	e736      	b.n	b378 <d_exprlist+0x10c>
    b50a:	f1ba 0f00 	cmp.w	sl, #0
    b50e:	f43f af7c 	beq.w	b40a <d_exprlist+0x19e>
    b512:	4982      	ldr	r1, [pc, #520]	; (b71c <d_exprlist+0x4b0>)
    b514:	4650      	mov	r0, sl
    b516:	f009 fcb7 	bl	14e88 <strcmp>
    b51a:	2800      	cmp	r0, #0
    b51c:	d03f      	beq.n	b59e <d_exprlist+0x332>
    b51e:	f89a 3000 	ldrb.w	r3, [sl]
    b522:	2b66      	cmp	r3, #102	; 0x66
    b524:	f000 80bd 	beq.w	b6a2 <d_exprlist+0x436>
    b528:	2b6e      	cmp	r3, #110	; 0x6e
    b52a:	f47f af6e 	bne.w	b40a <d_exprlist+0x19e>
    b52e:	f89a 3001 	ldrb.w	r3, [sl, #1]
    b532:	2b77      	cmp	r3, #119	; 0x77
    b534:	d002      	beq.n	b53c <d_exprlist+0x2d0>
    b536:	2b61      	cmp	r3, #97	; 0x61
    b538:	f47f af67 	bne.w	b40a <d_exprlist+0x19e>
    b53c:	215f      	movs	r1, #95	; 0x5f
    b53e:	4620      	mov	r0, r4
    b540:	f7ff fe94 	bl	b26c <d_exprlist>
    b544:	4682      	mov	sl, r0
    b546:	4620      	mov	r0, r4
    b548:	f000 fd12 	bl	bf70 <d_type>
    b54c:	68e3      	ldr	r3, [r4, #12]
    b54e:	781a      	ldrb	r2, [r3, #0]
    b550:	2a45      	cmp	r2, #69	; 0x45
    b552:	4683      	mov	fp, r0
    b554:	f000 80a1 	beq.w	b69a <d_exprlist+0x42e>
    b558:	2a70      	cmp	r2, #112	; 0x70
    b55a:	f000 80a6 	beq.w	b6aa <d_exprlist+0x43e>
    b55e:	2a69      	cmp	r2, #105	; 0x69
    b560:	f47f af53 	bne.w	b40a <d_exprlist+0x19e>
    b564:	785b      	ldrb	r3, [r3, #1]
    b566:	2b6c      	cmp	r3, #108	; 0x6c
    b568:	f47f af4f 	bne.w	b40a <d_exprlist+0x19e>
    b56c:	4620      	mov	r0, r4
    b56e:	f000 f8db 	bl	b728 <d_expression_1>
    b572:	4603      	mov	r3, r0
    b574:	e01f      	b.n	b5b6 <d_exprlist+0x34a>
    b576:	4620      	mov	r0, r4
    b578:	f000 f8d6 	bl	b728 <d_expression_1>
    b57c:	4682      	mov	sl, r0
    b57e:	e780      	b.n	b482 <d_exprlist+0x216>
    b580:	4620      	mov	r0, r4
    b582:	f000 fcf5 	bl	bf70 <d_type>
    b586:	e78d      	b.n	b4a4 <d_exprlist+0x238>
    b588:	4628      	mov	r0, r5
    b58a:	6367      	str	r7, [r4, #52]	; 0x34
    b58c:	b003      	add	sp, #12
    b58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b592:	2145      	movs	r1, #69	; 0x45
    b594:	4620      	mov	r0, r4
    b596:	f7ff fe69 	bl	b26c <d_exprlist>
    b59a:	4682      	mov	sl, r0
    b59c:	e771      	b.n	b482 <d_exprlist+0x216>
    b59e:	4620      	mov	r0, r4
    b5a0:	f000 f8c2 	bl	b728 <d_expression_1>
    b5a4:	4682      	mov	sl, r0
    b5a6:	4620      	mov	r0, r4
    b5a8:	f000 f8be 	bl	b728 <d_expression_1>
    b5ac:	4683      	mov	fp, r0
    b5ae:	4620      	mov	r0, r4
    b5b0:	f000 f8ba 	bl	b728 <d_expression_1>
    b5b4:	4603      	mov	r3, r0
    b5b6:	465a      	mov	r2, fp
    b5b8:	213b      	movs	r1, #59	; 0x3b
    b5ba:	4620      	mov	r0, r4
    b5bc:	f7ff fa4a 	bl	aa54 <d_make_comp>
    b5c0:	4652      	mov	r2, sl
    b5c2:	4603      	mov	r3, r0
    b5c4:	213a      	movs	r1, #58	; 0x3a
    b5c6:	4620      	mov	r0, r4
    b5c8:	f7ff fa44 	bl	aa54 <d_make_comp>
    b5cc:	462a      	mov	r2, r5
    b5ce:	4603      	mov	r3, r0
    b5d0:	2139      	movs	r1, #57	; 0x39
    b5d2:	4620      	mov	r0, r4
    b5d4:	f7ff fa3e 	bl	aa54 <d_make_comp>
    b5d8:	4605      	mov	r5, r0
    b5da:	e6cd      	b.n	b378 <d_exprlist+0x10c>
    b5dc:	781b      	ldrb	r3, [r3, #0]
    b5de:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
    b5e2:	2a01      	cmp	r2, #1
    b5e4:	d903      	bls.n	b5ee <d_exprlist+0x382>
    b5e6:	3b72      	subs	r3, #114	; 0x72
    b5e8:	2b01      	cmp	r3, #1
    b5ea:	f63f af25 	bhi.w	b438 <d_exprlist+0x1cc>
    b5ee:	4620      	mov	r0, r4
    b5f0:	f000 fcbe 	bl	bf70 <d_type>
    b5f4:	4683      	mov	fp, r0
    b5f6:	e728      	b.n	b44a <d_exprlist+0x1de>
    b5f8:	4620      	mov	r0, r4
    b5fa:	f000 faf3 	bl	bbe4 <d_template_args>
    b5fe:	465a      	mov	r2, fp
    b600:	4603      	mov	r3, r0
    b602:	2104      	movs	r1, #4
    b604:	4620      	mov	r0, r4
    b606:	f7ff fa25 	bl	aa54 <d_make_comp>
    b60a:	4603      	mov	r3, r0
    b60c:	e762      	b.n	b4d4 <d_exprlist+0x268>
    b60e:	3301      	adds	r3, #1
    b610:	60c3      	str	r3, [r0, #12]
    b612:	212e      	movs	r1, #46	; 0x2e
    b614:	4613      	mov	r3, r2
    b616:	b003      	add	sp, #12
    b618:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b61c:	f7ff ba1a 	b.w	aa54 <d_make_comp>
    b620:	4620      	mov	r0, r4
    b622:	f001 f88d 	bl	c740 <d_operator_name>
    b626:	4683      	mov	fp, r0
    b628:	e70f      	b.n	b44a <d_exprlist+0x1de>
    b62a:	f1ba 0f00 	cmp.w	sl, #0
    b62e:	f43f af36 	beq.w	b49e <d_exprlist+0x232>
    b632:	f89a 3000 	ldrb.w	r3, [sl]
    b636:	2b70      	cmp	r3, #112	; 0x70
    b638:	d017      	beq.n	b66a <d_exprlist+0x3fe>
    b63a:	2b6d      	cmp	r3, #109	; 0x6d
    b63c:	d015      	beq.n	b66a <d_exprlist+0x3fe>
    b63e:	4650      	mov	r0, sl
    b640:	4937      	ldr	r1, [pc, #220]	; (b720 <d_exprlist+0x4b4>)
    b642:	f009 fc21 	bl	14e88 <strcmp>
    b646:	2800      	cmp	r0, #0
    b648:	f47f af29 	bne.w	b49e <d_exprlist+0x232>
    b64c:	4620      	mov	r0, r4
    b64e:	f000 fa65 	bl	bb1c <d_template_args_1>
    b652:	e727      	b.n	b4a4 <d_exprlist+0x238>
    b654:	4620      	mov	r0, r4
    b656:	f000 fac5 	bl	bbe4 <d_template_args>
    b65a:	4652      	mov	r2, sl
    b65c:	4603      	mov	r3, r0
    b65e:	2104      	movs	r1, #4
    b660:	4620      	mov	r0, r4
    b662:	f7ff f9f7 	bl	aa54 <d_make_comp>
    b666:	4682      	mov	sl, r0
    b668:	e70b      	b.n	b482 <d_exprlist+0x216>
    b66a:	f89a 2001 	ldrb.w	r2, [sl, #1]
    b66e:	429a      	cmp	r2, r3
    b670:	d1e5      	bne.n	b63e <d_exprlist+0x3d2>
    b672:	68e3      	ldr	r3, [r4, #12]
    b674:	781a      	ldrb	r2, [r3, #0]
    b676:	2a5f      	cmp	r2, #95	; 0x5f
    b678:	d023      	beq.n	b6c2 <d_exprlist+0x456>
    b67a:	4650      	mov	r0, sl
    b67c:	4928      	ldr	r1, [pc, #160]	; (b720 <d_exprlist+0x4b4>)
    b67e:	f009 fc03 	bl	14e88 <strcmp>
    b682:	2800      	cmp	r0, #0
    b684:	d03f      	beq.n	b706 <d_exprlist+0x49a>
    b686:	4620      	mov	r0, r4
    b688:	f000 f84e 	bl	b728 <d_expression_1>
    b68c:	4603      	mov	r3, r0
    b68e:	461a      	mov	r2, r3
    b690:	2138      	movs	r1, #56	; 0x38
    b692:	4620      	mov	r0, r4
    b694:	f7ff f9de 	bl	aa54 <d_make_comp>
    b698:	e704      	b.n	b4a4 <d_exprlist+0x238>
    b69a:	3301      	adds	r3, #1
    b69c:	60e3      	str	r3, [r4, #12]
    b69e:	2300      	movs	r3, #0
    b6a0:	e789      	b.n	b5b6 <d_exprlist+0x34a>
    b6a2:	4620      	mov	r0, r4
    b6a4:	f001 f84c 	bl	c740 <d_operator_name>
    b6a8:	e77c      	b.n	b5a4 <d_exprlist+0x338>
    b6aa:	785a      	ldrb	r2, [r3, #1]
    b6ac:	2a69      	cmp	r2, #105	; 0x69
    b6ae:	f47f aeac 	bne.w	b40a <d_exprlist+0x19e>
    b6b2:	3302      	adds	r3, #2
    b6b4:	60e3      	str	r3, [r4, #12]
    b6b6:	2145      	movs	r1, #69	; 0x45
    b6b8:	4620      	mov	r0, r4
    b6ba:	f7ff fdd7 	bl	b26c <d_exprlist>
    b6be:	4603      	mov	r3, r0
    b6c0:	e779      	b.n	b5b6 <d_exprlist+0x34a>
    b6c2:	3301      	adds	r3, #1
    b6c4:	60e3      	str	r3, [r4, #12]
    b6c6:	e7ba      	b.n	b63e <d_exprlist+0x3d2>
    b6c8:	2a6f      	cmp	r2, #111	; 0x6f
    b6ca:	d015      	beq.n	b6f8 <d_exprlist+0x48c>
    b6cc:	2a69      	cmp	r2, #105	; 0x69
    b6ce:	f47f ae8d 	bne.w	b3ec <d_exprlist+0x180>
    b6d2:	785a      	ldrb	r2, [r3, #1]
    b6d4:	2a6c      	cmp	r2, #108	; 0x6c
    b6d6:	f47f ae0e 	bne.w	b2f6 <d_exprlist+0x8a>
    b6da:	2500      	movs	r5, #0
    b6dc:	3302      	adds	r3, #2
    b6de:	60e3      	str	r3, [r4, #12]
    b6e0:	2145      	movs	r1, #69	; 0x45
    b6e2:	4620      	mov	r0, r4
    b6e4:	f7ff fdc2 	bl	b26c <d_exprlist>
    b6e8:	462a      	mov	r2, r5
    b6ea:	4603      	mov	r3, r0
    b6ec:	2130      	movs	r1, #48	; 0x30
    b6ee:	4620      	mov	r0, r4
    b6f0:	f7ff f9b0 	bl	aa54 <d_make_comp>
    b6f4:	4605      	mov	r5, r0
    b6f6:	e63f      	b.n	b378 <d_exprlist+0x10c>
    b6f8:	785a      	ldrb	r2, [r3, #1]
    b6fa:	2a6e      	cmp	r2, #110	; 0x6e
    b6fc:	f47f adfb 	bne.w	b2f6 <d_exprlist+0x8a>
    b700:	3302      	adds	r3, #2
    b702:	60e3      	str	r3, [r4, #12]
    b704:	e5c9      	b.n	b29a <d_exprlist+0x2e>
    b706:	4620      	mov	r0, r4
    b708:	f000 fa08 	bl	bb1c <d_template_args_1>
    b70c:	4603      	mov	r3, r0
    b70e:	e7be      	b.n	b68e <d_exprlist+0x422>
    b710:	00022c14 	.word	0x00022c14
    b714:	00022c18 	.word	0x00022c18
    b718:	00022c1c 	.word	0x00022c1c
    b71c:	00022c20 	.word	0x00022c20
    b720:	00022c10 	.word	0x00022c10
    b724:	00023110 	.word	0x00023110

0000b728 <d_expression_1>:
    b728:	68c1      	ldr	r1, [r0, #12]
    b72a:	780b      	ldrb	r3, [r1, #0]
    b72c:	2b4c      	cmp	r3, #76	; 0x4c
    b72e:	f000 8087 	beq.w	b840 <d_expression_1+0x118>
    b732:	2b54      	cmp	r3, #84	; 0x54
    b734:	f000 8086 	beq.w	b844 <d_expression_1+0x11c>
    b738:	2b73      	cmp	r3, #115	; 0x73
    b73a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b73e:	4604      	mov	r4, r0
    b740:	d037      	beq.n	b7b2 <d_expression_1+0x8a>
    b742:	2b66      	cmp	r3, #102	; 0x66
    b744:	d012      	beq.n	b76c <d_expression_1+0x44>
    b746:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    b74a:	2a09      	cmp	r2, #9
    b74c:	f200 81b8 	bhi.w	bac0 <d_expression_1+0x398>
    b750:	4620      	mov	r0, r4
    b752:	f001 f8b5 	bl	c8c0 <d_unqualified_name>
    b756:	4605      	mov	r5, r0
    b758:	2800      	cmp	r0, #0
    b75a:	d06d      	beq.n	b838 <d_expression_1+0x110>
    b75c:	68e3      	ldr	r3, [r4, #12]
    b75e:	781b      	ldrb	r3, [r3, #0]
    b760:	2b49      	cmp	r3, #73	; 0x49
    b762:	f000 8088 	beq.w	b876 <d_expression_1+0x14e>
    b766:	4628      	mov	r0, r5
    b768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b76c:	784b      	ldrb	r3, [r1, #1]
    b76e:	2b70      	cmp	r3, #112	; 0x70
    b770:	d039      	beq.n	b7e6 <d_expression_1+0xbe>
    b772:	4620      	mov	r0, r4
    b774:	f000 ffe4 	bl	c740 <d_operator_name>
    b778:	4605      	mov	r5, r0
    b77a:	2800      	cmp	r0, #0
    b77c:	d05c      	beq.n	b838 <d_expression_1+0x110>
    b77e:	7803      	ldrb	r3, [r0, #0]
    b780:	2b31      	cmp	r3, #49	; 0x31
    b782:	d061      	beq.n	b848 <d_expression_1+0x120>
    b784:	2b32      	cmp	r3, #50	; 0x32
    b786:	d025      	beq.n	b7d4 <d_expression_1+0xac>
    b788:	2b33      	cmp	r3, #51	; 0x33
    b78a:	d155      	bne.n	b838 <d_expression_1+0x110>
    b78c:	68e3      	ldr	r3, [r4, #12]
    b78e:	781a      	ldrb	r2, [r3, #0]
    b790:	2a5f      	cmp	r2, #95	; 0x5f
    b792:	f040 81b4 	bne.w	bafe <d_expression_1+0x3d6>
    b796:	3301      	adds	r3, #1
    b798:	60e3      	str	r3, [r4, #12]
    b79a:	2145      	movs	r1, #69	; 0x45
    b79c:	4620      	mov	r0, r4
    b79e:	f7ff fd65 	bl	b26c <d_exprlist>
    b7a2:	4603      	mov	r3, r0
    b7a4:	462a      	mov	r2, r5
    b7a6:	4620      	mov	r0, r4
    b7a8:	2136      	movs	r1, #54	; 0x36
    b7aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b7ae:	f7ff b951 	b.w	aa54 <d_make_comp>
    b7b2:	784b      	ldrb	r3, [r1, #1]
    b7b4:	2b72      	cmp	r3, #114	; 0x72
    b7b6:	d069      	beq.n	b88c <d_expression_1+0x164>
    b7b8:	2b70      	cmp	r3, #112	; 0x70
    b7ba:	d1da      	bne.n	b772 <d_expression_1+0x4a>
    b7bc:	3102      	adds	r1, #2
    b7be:	60c1      	str	r1, [r0, #12]
    b7c0:	f7ff ffb2 	bl	b728 <d_expression_1>
    b7c4:	2300      	movs	r3, #0
    b7c6:	4602      	mov	r2, r0
    b7c8:	214a      	movs	r1, #74	; 0x4a
    b7ca:	4620      	mov	r0, r4
    b7cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b7d0:	f7ff b940 	b.w	aa54 <d_make_comp>
    b7d4:	6843      	ldr	r3, [r0, #4]
    b7d6:	2b03      	cmp	r3, #3
    b7d8:	d82e      	bhi.n	b838 <d_expression_1+0x110>
    b7da:	e8df f013 	tbh	[pc, r3, lsl #1]
    b7de:	0071      	.short	0x0071
    b7e0:	002d0190 	.word	0x002d0190
    b7e4:	002d      	.short	0x002d
    b7e6:	1c8b      	adds	r3, r1, #2
    b7e8:	60c3      	str	r3, [r0, #12]
    b7ea:	788b      	ldrb	r3, [r1, #2]
    b7ec:	2b54      	cmp	r3, #84	; 0x54
    b7ee:	d063      	beq.n	b8b8 <d_expression_1+0x190>
    b7f0:	f7ff fac2 	bl	ad78 <d_compact_number>
    b7f4:	43c3      	mvns	r3, r0
    b7f6:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
    b7fa:	d01d      	beq.n	b838 <d_expression_1+0x110>
    b7fc:	3001      	adds	r0, #1
    b7fe:	6963      	ldr	r3, [r4, #20]
    b800:	69a2      	ldr	r2, [r4, #24]
    b802:	4293      	cmp	r3, r2
    b804:	da18      	bge.n	b838 <d_expression_1+0x110>
    b806:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    b80a:	6921      	ldr	r1, [r4, #16]
    b80c:	0092      	lsls	r2, r2, #2
    b80e:	3301      	adds	r3, #1
    b810:	188d      	adds	r5, r1, r2
    b812:	6163      	str	r3, [r4, #20]
    b814:	d0a7      	beq.n	b766 <d_expression_1+0x3e>
    b816:	2306      	movs	r3, #6
    b818:	548b      	strb	r3, [r1, r2]
    b81a:	6068      	str	r0, [r5, #4]
    b81c:	e7a3      	b.n	b766 <d_expression_1+0x3e>
    b81e:	2b74      	cmp	r3, #116	; 0x74
    b820:	d1a7      	bne.n	b772 <d_expression_1+0x4a>
    b822:	784b      	ldrb	r3, [r1, #1]
    b824:	2b6c      	cmp	r3, #108	; 0x6c
    b826:	d1a4      	bne.n	b772 <d_expression_1+0x4a>
    b828:	f000 fba2 	bl	bf70 <d_type>
    b82c:	68e1      	ldr	r1, [r4, #12]
    b82e:	784b      	ldrb	r3, [r1, #1]
    b830:	4605      	mov	r5, r0
    b832:	2b00      	cmp	r3, #0
    b834:	f040 814e 	bne.w	bad4 <d_expression_1+0x3ac>
    b838:	2500      	movs	r5, #0
    b83a:	4628      	mov	r0, r5
    b83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b840:	f001 bc8c 	b.w	d15c <d_expr_primary>
    b844:	f7ff bab4 	b.w	adb0 <d_template_param>
    b848:	6847      	ldr	r7, [r0, #4]
    b84a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b84c:	68ba      	ldr	r2, [r7, #8]
    b84e:	683e      	ldr	r6, [r7, #0]
    b850:	49ac      	ldr	r1, [pc, #688]	; (bb04 <d_expression_1+0x3dc>)
    b852:	3a02      	subs	r2, #2
    b854:	4413      	add	r3, r2
    b856:	6323      	str	r3, [r4, #48]	; 0x30
    b858:	4630      	mov	r0, r6
    b85a:	f009 fb15 	bl	14e88 <strcmp>
    b85e:	2800      	cmp	r0, #0
    b860:	f000 80ab 	beq.w	b9ba <d_expression_1+0x292>
    b864:	68ff      	ldr	r7, [r7, #12]
    b866:	2f03      	cmp	r7, #3
    b868:	d8e6      	bhi.n	b838 <d_expression_1+0x110>
    b86a:	e8df f017 	tbh	[pc, r7, lsl #1]
    b86e:	0029      	.short	0x0029
    b870:	007100ff 	.word	0x007100ff
    b874:	0031      	.short	0x0031
    b876:	4620      	mov	r0, r4
    b878:	f000 f9b4 	bl	bbe4 <d_template_args>
    b87c:	462a      	mov	r2, r5
    b87e:	4603      	mov	r3, r0
    b880:	2104      	movs	r1, #4
    b882:	4620      	mov	r0, r4
    b884:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b888:	f7ff b8e4 	b.w	aa54 <d_make_comp>
    b88c:	3102      	adds	r1, #2
    b88e:	60c1      	str	r1, [r0, #12]
    b890:	f000 fb6e 	bl	bf70 <d_type>
    b894:	4605      	mov	r5, r0
    b896:	4620      	mov	r0, r4
    b898:	f001 f812 	bl	c8c0 <d_unqualified_name>
    b89c:	68e3      	ldr	r3, [r4, #12]
    b89e:	781b      	ldrb	r3, [r3, #0]
    b8a0:	2b49      	cmp	r3, #73	; 0x49
    b8a2:	4606      	mov	r6, r0
    b8a4:	f000 80ae 	beq.w	ba04 <d_expression_1+0x2dc>
    b8a8:	4603      	mov	r3, r0
    b8aa:	462a      	mov	r2, r5
    b8ac:	4620      	mov	r0, r4
    b8ae:	2101      	movs	r1, #1
    b8b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b8b4:	f7ff b8ce 	b.w	aa54 <d_make_comp>
    b8b8:	3103      	adds	r1, #3
    b8ba:	60c1      	str	r1, [r0, #12]
    b8bc:	2000      	movs	r0, #0
    b8be:	e79e      	b.n	b7fe <d_expression_1+0xd6>
    b8c0:	462a      	mov	r2, r5
    b8c2:	4620      	mov	r0, r4
    b8c4:	2300      	movs	r3, #0
    b8c6:	2135      	movs	r1, #53	; 0x35
    b8c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b8cc:	f7ff b8c2 	b.w	aa54 <d_make_comp>
    b8d0:	2e00      	cmp	r6, #0
    b8d2:	d0b1      	beq.n	b838 <d_expression_1+0x110>
    b8d4:	498c      	ldr	r1, [pc, #560]	; (bb08 <d_expression_1+0x3e0>)
    b8d6:	4630      	mov	r0, r6
    b8d8:	f009 fad6 	bl	14e88 <strcmp>
    b8dc:	2800      	cmp	r0, #0
    b8de:	d071      	beq.n	b9c4 <d_expression_1+0x29c>
    b8e0:	7833      	ldrb	r3, [r6, #0]
    b8e2:	2b66      	cmp	r3, #102	; 0x66
    b8e4:	f000 80b2 	beq.w	ba4c <d_expression_1+0x324>
    b8e8:	2b6e      	cmp	r3, #110	; 0x6e
    b8ea:	d1a5      	bne.n	b838 <d_expression_1+0x110>
    b8ec:	7873      	ldrb	r3, [r6, #1]
    b8ee:	2b77      	cmp	r3, #119	; 0x77
    b8f0:	d001      	beq.n	b8f6 <d_expression_1+0x1ce>
    b8f2:	2b61      	cmp	r3, #97	; 0x61
    b8f4:	d1a0      	bne.n	b838 <d_expression_1+0x110>
    b8f6:	215f      	movs	r1, #95	; 0x5f
    b8f8:	4620      	mov	r0, r4
    b8fa:	f7ff fcb7 	bl	b26c <d_exprlist>
    b8fe:	4606      	mov	r6, r0
    b900:	4620      	mov	r0, r4
    b902:	f000 fb35 	bl	bf70 <d_type>
    b906:	68e3      	ldr	r3, [r4, #12]
    b908:	781a      	ldrb	r2, [r3, #0]
    b90a:	2a45      	cmp	r2, #69	; 0x45
    b90c:	4607      	mov	r7, r0
    b90e:	f000 8099 	beq.w	ba44 <d_expression_1+0x31c>
    b912:	2a70      	cmp	r2, #112	; 0x70
    b914:	f000 809e 	beq.w	ba54 <d_expression_1+0x32c>
    b918:	2a69      	cmp	r2, #105	; 0x69
    b91a:	d18d      	bne.n	b838 <d_expression_1+0x110>
    b91c:	785b      	ldrb	r3, [r3, #1]
    b91e:	2b6c      	cmp	r3, #108	; 0x6c
    b920:	d18a      	bne.n	b838 <d_expression_1+0x110>
    b922:	4620      	mov	r0, r4
    b924:	f7ff ff00 	bl	b728 <d_expression_1>
    b928:	4603      	mov	r3, r0
    b92a:	463a      	mov	r2, r7
    b92c:	213b      	movs	r1, #59	; 0x3b
    b92e:	4620      	mov	r0, r4
    b930:	f7ff f890 	bl	aa54 <d_make_comp>
    b934:	4632      	mov	r2, r6
    b936:	4603      	mov	r3, r0
    b938:	213a      	movs	r1, #58	; 0x3a
    b93a:	4620      	mov	r0, r4
    b93c:	f7ff f88a 	bl	aa54 <d_make_comp>
    b940:	462a      	mov	r2, r5
    b942:	4603      	mov	r3, r0
    b944:	2139      	movs	r1, #57	; 0x39
    b946:	4620      	mov	r0, r4
    b948:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b94c:	f7ff b882 	b.w	aa54 <d_make_comp>
    b950:	2e00      	cmp	r6, #0
    b952:	f43f af71 	beq.w	b838 <d_expression_1+0x110>
    b956:	686b      	ldr	r3, [r5, #4]
    b958:	681b      	ldr	r3, [r3, #0]
    b95a:	785a      	ldrb	r2, [r3, #1]
    b95c:	2a63      	cmp	r2, #99	; 0x63
    b95e:	d044      	beq.n	b9ea <d_expression_1+0x2c2>
    b960:	7833      	ldrb	r3, [r6, #0]
    b962:	2b66      	cmp	r3, #102	; 0x66
    b964:	d059      	beq.n	ba1a <d_expression_1+0x2f2>
    b966:	4620      	mov	r0, r4
    b968:	f7ff fede 	bl	b728 <d_expression_1>
    b96c:	4607      	mov	r7, r0
    b96e:	4967      	ldr	r1, [pc, #412]	; (bb0c <d_expression_1+0x3e4>)
    b970:	4630      	mov	r0, r6
    b972:	f009 fa89 	bl	14e88 <strcmp>
    b976:	b390      	cbz	r0, b9de <d_expression_1+0x2b6>
    b978:	4965      	ldr	r1, [pc, #404]	; (bb10 <d_expression_1+0x3e8>)
    b97a:	4630      	mov	r0, r6
    b97c:	f009 fa84 	bl	14e88 <strcmp>
    b980:	b128      	cbz	r0, b98e <d_expression_1+0x266>
    b982:	4630      	mov	r0, r6
    b984:	4963      	ldr	r1, [pc, #396]	; (bb14 <d_expression_1+0x3ec>)
    b986:	f009 fa7f 	bl	14e88 <strcmp>
    b98a:	2800      	cmp	r0, #0
    b98c:	d14a      	bne.n	ba24 <d_expression_1+0x2fc>
    b98e:	4620      	mov	r0, r4
    b990:	f000 ff96 	bl	c8c0 <d_unqualified_name>
    b994:	68e3      	ldr	r3, [r4, #12]
    b996:	781b      	ldrb	r3, [r3, #0]
    b998:	2b49      	cmp	r3, #73	; 0x49
    b99a:	4606      	mov	r6, r0
    b99c:	d047      	beq.n	ba2e <d_expression_1+0x306>
    b99e:	4633      	mov	r3, r6
    b9a0:	463a      	mov	r2, r7
    b9a2:	2138      	movs	r1, #56	; 0x38
    b9a4:	4620      	mov	r0, r4
    b9a6:	f7ff f855 	bl	aa54 <d_make_comp>
    b9aa:	462a      	mov	r2, r5
    b9ac:	4603      	mov	r3, r0
    b9ae:	2137      	movs	r1, #55	; 0x37
    b9b0:	4620      	mov	r0, r4
    b9b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b9b6:	f7ff b84d 	b.w	aa54 <d_make_comp>
    b9ba:	4620      	mov	r0, r4
    b9bc:	f000 fad8 	bl	bf70 <d_type>
    b9c0:	4603      	mov	r3, r0
    b9c2:	e6ef      	b.n	b7a4 <d_expression_1+0x7c>
    b9c4:	4620      	mov	r0, r4
    b9c6:	f7ff feaf 	bl	b728 <d_expression_1>
    b9ca:	4606      	mov	r6, r0
    b9cc:	4620      	mov	r0, r4
    b9ce:	f7ff feab 	bl	b728 <d_expression_1>
    b9d2:	4607      	mov	r7, r0
    b9d4:	4620      	mov	r0, r4
    b9d6:	f7ff fea7 	bl	b728 <d_expression_1>
    b9da:	4603      	mov	r3, r0
    b9dc:	e7a5      	b.n	b92a <d_expression_1+0x202>
    b9de:	2145      	movs	r1, #69	; 0x45
    b9e0:	4620      	mov	r0, r4
    b9e2:	f7ff fc43 	bl	b26c <d_exprlist>
    b9e6:	4606      	mov	r6, r0
    b9e8:	e7d9      	b.n	b99e <d_expression_1+0x276>
    b9ea:	781b      	ldrb	r3, [r3, #0]
    b9ec:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
    b9f0:	2a01      	cmp	r2, #1
    b9f2:	d902      	bls.n	b9fa <d_expression_1+0x2d2>
    b9f4:	3b72      	subs	r3, #114	; 0x72
    b9f6:	2b01      	cmp	r3, #1
    b9f8:	d8b2      	bhi.n	b960 <d_expression_1+0x238>
    b9fa:	4620      	mov	r0, r4
    b9fc:	f000 fab8 	bl	bf70 <d_type>
    ba00:	4607      	mov	r7, r0
    ba02:	e7b4      	b.n	b96e <d_expression_1+0x246>
    ba04:	4620      	mov	r0, r4
    ba06:	f000 f8ed 	bl	bbe4 <d_template_args>
    ba0a:	4632      	mov	r2, r6
    ba0c:	4603      	mov	r3, r0
    ba0e:	2104      	movs	r1, #4
    ba10:	4620      	mov	r0, r4
    ba12:	f7ff f81f 	bl	aa54 <d_make_comp>
    ba16:	4603      	mov	r3, r0
    ba18:	e747      	b.n	b8aa <d_expression_1+0x182>
    ba1a:	4620      	mov	r0, r4
    ba1c:	f000 fe90 	bl	c740 <d_operator_name>
    ba20:	4607      	mov	r7, r0
    ba22:	e7a4      	b.n	b96e <d_expression_1+0x246>
    ba24:	4620      	mov	r0, r4
    ba26:	f7ff fe7f 	bl	b728 <d_expression_1>
    ba2a:	4606      	mov	r6, r0
    ba2c:	e7b7      	b.n	b99e <d_expression_1+0x276>
    ba2e:	4620      	mov	r0, r4
    ba30:	f000 f8d8 	bl	bbe4 <d_template_args>
    ba34:	4632      	mov	r2, r6
    ba36:	4603      	mov	r3, r0
    ba38:	2104      	movs	r1, #4
    ba3a:	4620      	mov	r0, r4
    ba3c:	f7ff f80a 	bl	aa54 <d_make_comp>
    ba40:	4606      	mov	r6, r0
    ba42:	e7ac      	b.n	b99e <d_expression_1+0x276>
    ba44:	3301      	adds	r3, #1
    ba46:	60e3      	str	r3, [r4, #12]
    ba48:	2300      	movs	r3, #0
    ba4a:	e76e      	b.n	b92a <d_expression_1+0x202>
    ba4c:	4620      	mov	r0, r4
    ba4e:	f000 fe77 	bl	c740 <d_operator_name>
    ba52:	e7ba      	b.n	b9ca <d_expression_1+0x2a2>
    ba54:	785a      	ldrb	r2, [r3, #1]
    ba56:	2a69      	cmp	r2, #105	; 0x69
    ba58:	f47f aeee 	bne.w	b838 <d_expression_1+0x110>
    ba5c:	3302      	adds	r3, #2
    ba5e:	60e3      	str	r3, [r4, #12]
    ba60:	2145      	movs	r1, #69	; 0x45
    ba62:	4620      	mov	r0, r4
    ba64:	f7ff fc02 	bl	b26c <d_exprlist>
    ba68:	4603      	mov	r3, r0
    ba6a:	e75e      	b.n	b92a <d_expression_1+0x202>
    ba6c:	2e00      	cmp	r6, #0
    ba6e:	d046      	beq.n	bafe <d_expression_1+0x3d6>
    ba70:	7833      	ldrb	r3, [r6, #0]
    ba72:	2b70      	cmp	r3, #112	; 0x70
    ba74:	d015      	beq.n	baa2 <d_expression_1+0x37a>
    ba76:	2b6d      	cmp	r3, #109	; 0x6d
    ba78:	d013      	beq.n	baa2 <d_expression_1+0x37a>
    ba7a:	2700      	movs	r7, #0
    ba7c:	4630      	mov	r0, r6
    ba7e:	4926      	ldr	r1, [pc, #152]	; (bb18 <d_expression_1+0x3f0>)
    ba80:	f009 fa02 	bl	14e88 <strcmp>
    ba84:	b1b8      	cbz	r0, bab6 <d_expression_1+0x38e>
    ba86:	4620      	mov	r0, r4
    ba88:	f7ff fe4e 	bl	b728 <d_expression_1>
    ba8c:	4603      	mov	r3, r0
    ba8e:	2f00      	cmp	r7, #0
    ba90:	f43f ae88 	beq.w	b7a4 <d_expression_1+0x7c>
    ba94:	461a      	mov	r2, r3
    ba96:	2138      	movs	r1, #56	; 0x38
    ba98:	4620      	mov	r0, r4
    ba9a:	f7fe ffdb 	bl	aa54 <d_make_comp>
    ba9e:	4603      	mov	r3, r0
    baa0:	e680      	b.n	b7a4 <d_expression_1+0x7c>
    baa2:	7872      	ldrb	r2, [r6, #1]
    baa4:	429a      	cmp	r2, r3
    baa6:	d1e8      	bne.n	ba7a <d_expression_1+0x352>
    baa8:	68e3      	ldr	r3, [r4, #12]
    baaa:	781a      	ldrb	r2, [r3, #0]
    baac:	2a5f      	cmp	r2, #95	; 0x5f
    baae:	d1e5      	bne.n	ba7c <d_expression_1+0x354>
    bab0:	3301      	adds	r3, #1
    bab2:	60e3      	str	r3, [r4, #12]
    bab4:	e7e1      	b.n	ba7a <d_expression_1+0x352>
    bab6:	4620      	mov	r0, r4
    bab8:	f000 f830 	bl	bb1c <d_template_args_1>
    babc:	4603      	mov	r3, r0
    babe:	e7e6      	b.n	ba8e <d_expression_1+0x366>
    bac0:	2b6f      	cmp	r3, #111	; 0x6f
    bac2:	d015      	beq.n	baf0 <d_expression_1+0x3c8>
    bac4:	2b69      	cmp	r3, #105	; 0x69
    bac6:	f47f aeaa 	bne.w	b81e <d_expression_1+0xf6>
    baca:	784b      	ldrb	r3, [r1, #1]
    bacc:	2b6c      	cmp	r3, #108	; 0x6c
    bace:	f47f ae50 	bne.w	b772 <d_expression_1+0x4a>
    bad2:	2500      	movs	r5, #0
    bad4:	3102      	adds	r1, #2
    bad6:	60e1      	str	r1, [r4, #12]
    bad8:	4620      	mov	r0, r4
    bada:	2145      	movs	r1, #69	; 0x45
    badc:	f7ff fbc6 	bl	b26c <d_exprlist>
    bae0:	462a      	mov	r2, r5
    bae2:	4603      	mov	r3, r0
    bae4:	2130      	movs	r1, #48	; 0x30
    bae6:	4620      	mov	r0, r4
    bae8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    baec:	f7fe bfb2 	b.w	aa54 <d_make_comp>
    baf0:	784b      	ldrb	r3, [r1, #1]
    baf2:	2b6e      	cmp	r3, #110	; 0x6e
    baf4:	f47f ae3d 	bne.w	b772 <d_expression_1+0x4a>
    baf8:	3102      	adds	r1, #2
    bafa:	60c1      	str	r1, [r0, #12]
    bafc:	e628      	b.n	b750 <d_expression_1+0x28>
    bafe:	2700      	movs	r7, #0
    bb00:	e7c1      	b.n	ba86 <d_expression_1+0x35e>
    bb02:	bf00      	nop
    bb04:	00023110 	.word	0x00023110
    bb08:	00022c20 	.word	0x00022c20
    bb0c:	00022c14 	.word	0x00022c14
    bb10:	00022c18 	.word	0x00022c18
    bb14:	00022c1c 	.word	0x00022c1c
    bb18:	00022c10 	.word	0x00022c10

0000bb1c <d_template_args_1>:
    bb1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bb20:	68c2      	ldr	r2, [r0, #12]
    bb22:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
    bb26:	7813      	ldrb	r3, [r2, #0]
    bb28:	2b45      	cmp	r3, #69	; 0x45
    bb2a:	b083      	sub	sp, #12
    bb2c:	4604      	mov	r4, r0
    bb2e:	d04e      	beq.n	bbce <d_template_args_1+0xb2>
    bb30:	ae02      	add	r6, sp, #8
    bb32:	2100      	movs	r1, #0
    bb34:	f846 1d04 	str.w	r1, [r6, #-4]!
    bb38:	2701      	movs	r7, #1
    bb3a:	3b49      	subs	r3, #73	; 0x49
    bb3c:	2b0f      	cmp	r3, #15
    bb3e:	d83e      	bhi.n	bbbe <d_template_args_1+0xa2>
    bb40:	e8df f003 	tbb	[pc, r3]
    bb44:	1b3d3838 	.word	0x1b3d3838
    bb48:	3d3d3d3d 	.word	0x3d3d3d3d
    bb4c:	3d3d3d3d 	.word	0x3d3d3d3d
    bb50:	083d3d3d 	.word	0x083d3d3d
    bb54:	3201      	adds	r2, #1
    bb56:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
    bb5a:	60e2      	str	r2, [r4, #12]
    bb5c:	6367      	str	r7, [r4, #52]	; 0x34
    bb5e:	4620      	mov	r0, r4
    bb60:	f7ff fde2 	bl	b728 <d_expression_1>
    bb64:	68e3      	ldr	r3, [r4, #12]
    bb66:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    bb6a:	781a      	ldrb	r2, [r3, #0]
    bb6c:	2a45      	cmp	r2, #69	; 0x45
    bb6e:	4605      	mov	r5, r0
    bb70:	d02a      	beq.n	bbc8 <d_template_args_1+0xac>
    bb72:	2000      	movs	r0, #0
    bb74:	b003      	add	sp, #12
    bb76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bb7a:	4620      	mov	r0, r4
    bb7c:	f001 faee 	bl	d15c <d_expr_primary>
    bb80:	4605      	mov	r5, r0
    bb82:	2300      	movs	r3, #0
    bb84:	212f      	movs	r1, #47	; 0x2f
    bb86:	462a      	mov	r2, r5
    bb88:	4620      	mov	r0, r4
    bb8a:	2d00      	cmp	r5, #0
    bb8c:	d0f1      	beq.n	bb72 <d_template_args_1+0x56>
    bb8e:	f7fe ff61 	bl	aa54 <d_make_comp>
    bb92:	6030      	str	r0, [r6, #0]
    bb94:	f100 0608 	add.w	r6, r0, #8
    bb98:	2800      	cmp	r0, #0
    bb9a:	d0ea      	beq.n	bb72 <d_template_args_1+0x56>
    bb9c:	68e2      	ldr	r2, [r4, #12]
    bb9e:	7813      	ldrb	r3, [r2, #0]
    bba0:	2b45      	cmp	r3, #69	; 0x45
    bba2:	d1ca      	bne.n	bb3a <d_template_args_1+0x1e>
    bba4:	9801      	ldr	r0, [sp, #4]
    bba6:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    bbaa:	3201      	adds	r2, #1
    bbac:	60e2      	str	r2, [r4, #12]
    bbae:	b003      	add	sp, #12
    bbb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bbb4:	4620      	mov	r0, r4
    bbb6:	f000 f815 	bl	bbe4 <d_template_args>
    bbba:	4605      	mov	r5, r0
    bbbc:	e7e1      	b.n	bb82 <d_template_args_1+0x66>
    bbbe:	4620      	mov	r0, r4
    bbc0:	f000 f9d6 	bl	bf70 <d_type>
    bbc4:	4605      	mov	r5, r0
    bbc6:	e7dc      	b.n	bb82 <d_template_args_1+0x66>
    bbc8:	3301      	adds	r3, #1
    bbca:	60e3      	str	r3, [r4, #12]
    bbcc:	e7d9      	b.n	bb82 <d_template_args_1+0x66>
    bbce:	3201      	adds	r2, #1
    bbd0:	2300      	movs	r3, #0
    bbd2:	60c2      	str	r2, [r0, #12]
    bbd4:	212f      	movs	r1, #47	; 0x2f
    bbd6:	461a      	mov	r2, r3
    bbd8:	b003      	add	sp, #12
    bbda:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bbde:	f7fe bf39 	b.w	aa54 <d_make_comp>
    bbe2:	bf00      	nop

0000bbe4 <d_template_args>:
    bbe4:	68c2      	ldr	r2, [r0, #12]
    bbe6:	7813      	ldrb	r3, [r2, #0]
    bbe8:	3b49      	subs	r3, #73	; 0x49
    bbea:	2b01      	cmp	r3, #1
    bbec:	d802      	bhi.n	bbf4 <d_template_args+0x10>
    bbee:	3201      	adds	r2, #1
    bbf0:	60c2      	str	r2, [r0, #12]
    bbf2:	e793      	b.n	bb1c <d_template_args_1>
    bbf4:	2000      	movs	r0, #0
    bbf6:	4770      	bx	lr

0000bbf8 <d_name>:
    bbf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bbfc:	68c2      	ldr	r2, [r0, #12]
    bbfe:	7813      	ldrb	r3, [r2, #0]
    bc00:	3b4e      	subs	r3, #78	; 0x4e
    bc02:	b085      	sub	sp, #20
    bc04:	4605      	mov	r5, r0
    bc06:	2b0c      	cmp	r3, #12
    bc08:	d870      	bhi.n	bcec <d_name+0xf4>
    bc0a:	e8df f003 	tbb	[pc, r3]
    bc0e:	6f1e      	.short	0x6f1e
    bc10:	5b6f6f6f 	.word	0x5b6f6f6f
    bc14:	6f6f176f 	.word	0x6f6f176f
    bc18:	6f6f      	.short	0x6f6f
    bc1a:	07          	.byte	0x07
    bc1b:	00          	.byte	0x00
    bc1c:	3201      	adds	r2, #1
    bc1e:	2100      	movs	r1, #0
    bc20:	60c2      	str	r2, [r0, #12]
    bc22:	f000 ffbd 	bl	cba0 <d_encoding>
    bc26:	68eb      	ldr	r3, [r5, #12]
    bc28:	7819      	ldrb	r1, [r3, #0]
    bc2a:	2945      	cmp	r1, #69	; 0x45
    bc2c:	4606      	mov	r6, r0
    bc2e:	f000 8099 	beq.w	bd64 <d_name+0x16c>
    bc32:	2200      	movs	r2, #0
    bc34:	4610      	mov	r0, r2
    bc36:	b005      	add	sp, #20
    bc38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bc3c:	f000 fe40 	bl	c8c0 <d_unqualified_name>
    bc40:	4602      	mov	r2, r0
    bc42:	4610      	mov	r0, r2
    bc44:	b005      	add	sp, #20
    bc46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bc4a:	3201      	adds	r2, #1
    bc4c:	60c2      	str	r2, [r0, #12]
    bc4e:	a903      	add	r1, sp, #12
    bc50:	2201      	movs	r2, #1
    bc52:	f7fe ff4b 	bl	aaec <d_cv_qualifiers>
    bc56:	4681      	mov	r9, r0
    bc58:	2800      	cmp	r0, #0
    bc5a:	d0ea      	beq.n	bc32 <d_name+0x3a>
    bc5c:	2100      	movs	r1, #0
    bc5e:	4628      	mov	r0, r5
    bc60:	f7fe ffaa 	bl	abb8 <d_ref_qualifier>
    bc64:	68ea      	ldr	r2, [r5, #12]
    bc66:	4eb4      	ldr	r6, [pc, #720]	; (bf38 <d_name+0x340>)
    bc68:	7814      	ldrb	r4, [r2, #0]
    bc6a:	4680      	mov	r8, r0
    bc6c:	2700      	movs	r7, #0
    bc6e:	2c00      	cmp	r4, #0
    bc70:	f000 80e8 	beq.w	be44 <d_name+0x24c>
    bc74:	2c44      	cmp	r4, #68	; 0x44
    bc76:	f000 80d1 	beq.w	be1c <d_name+0x224>
    bc7a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    bc7e:	b2db      	uxtb	r3, r3
    bc80:	2b1c      	cmp	r3, #28
    bc82:	f240 80a8 	bls.w	bdd6 <d_name+0x1de>
    bc86:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    bc8a:	2b19      	cmp	r3, #25
    bc8c:	f240 80a8 	bls.w	bde0 <d_name+0x1e8>
    bc90:	2c55      	cmp	r4, #85	; 0x55
    bc92:	f000 80de 	beq.w	be52 <d_name+0x25a>
    bc96:	2c53      	cmp	r4, #83	; 0x53
    bc98:	f000 80f1 	beq.w	be7e <d_name+0x286>
    bc9c:	2c49      	cmp	r4, #73	; 0x49
    bc9e:	f000 80da 	beq.w	be56 <d_name+0x25e>
    bca2:	2c54      	cmp	r4, #84	; 0x54
    bca4:	f000 811f 	beq.w	bee6 <d_name+0x2ee>
    bca8:	2c45      	cmp	r4, #69	; 0x45
    bcaa:	f000 814b 	beq.w	bf44 <d_name+0x34c>
    bcae:	2c4d      	cmp	r4, #77	; 0x4d
    bcb0:	f040 80c8 	bne.w	be44 <d_name+0x24c>
    bcb4:	2f00      	cmp	r7, #0
    bcb6:	f000 80c5 	beq.w	be44 <d_name+0x24c>
    bcba:	1c53      	adds	r3, r2, #1
    bcbc:	60eb      	str	r3, [r5, #12]
    bcbe:	7854      	ldrb	r4, [r2, #1]
    bcc0:	461a      	mov	r2, r3
    bcc2:	e7d4      	b.n	bc6e <d_name+0x76>
    bcc4:	7853      	ldrb	r3, [r2, #1]
    bcc6:	2b74      	cmp	r3, #116	; 0x74
    bcc8:	d031      	beq.n	bd2e <d_name+0x136>
    bcca:	2100      	movs	r1, #0
    bccc:	f7ff f90a 	bl	aee4 <d_substitution>
    bcd0:	68eb      	ldr	r3, [r5, #12]
    bcd2:	7819      	ldrb	r1, [r3, #0]
    bcd4:	2949      	cmp	r1, #73	; 0x49
    bcd6:	4602      	mov	r2, r0
    bcd8:	d1b3      	bne.n	bc42 <d_name+0x4a>
    bcda:	3301      	adds	r3, #1
    bcdc:	60eb      	str	r3, [r5, #12]
    bcde:	4628      	mov	r0, r5
    bce0:	9201      	str	r2, [sp, #4]
    bce2:	f7ff ff1b 	bl	bb1c <d_template_args_1>
    bce6:	9a01      	ldr	r2, [sp, #4]
    bce8:	4603      	mov	r3, r0
    bcea:	e017      	b.n	bd1c <d_name+0x124>
    bcec:	f000 fde8 	bl	c8c0 <d_unqualified_name>
    bcf0:	68eb      	ldr	r3, [r5, #12]
    bcf2:	7819      	ldrb	r1, [r3, #0]
    bcf4:	2949      	cmp	r1, #73	; 0x49
    bcf6:	4602      	mov	r2, r0
    bcf8:	d1a3      	bne.n	bc42 <d_name+0x4a>
    bcfa:	2a00      	cmp	r2, #0
    bcfc:	d099      	beq.n	bc32 <d_name+0x3a>
    bcfe:	6a29      	ldr	r1, [r5, #32]
    bd00:	6a68      	ldr	r0, [r5, #36]	; 0x24
    bd02:	4281      	cmp	r1, r0
    bd04:	da95      	bge.n	bc32 <d_name+0x3a>
    bd06:	69ec      	ldr	r4, [r5, #28]
    bd08:	1c48      	adds	r0, r1, #1
    bd0a:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
    bd0e:	6228      	str	r0, [r5, #32]
    bd10:	7819      	ldrb	r1, [r3, #0]
    bd12:	3949      	subs	r1, #73	; 0x49
    bd14:	2901      	cmp	r1, #1
    bd16:	bf88      	it	hi
    bd18:	2300      	movhi	r3, #0
    bd1a:	d9de      	bls.n	bcda <d_name+0xe2>
    bd1c:	4628      	mov	r0, r5
    bd1e:	2104      	movs	r1, #4
    bd20:	f7fe fe98 	bl	aa54 <d_make_comp>
    bd24:	4602      	mov	r2, r0
    bd26:	4610      	mov	r0, r2
    bd28:	b005      	add	sp, #20
    bd2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bd2e:	6943      	ldr	r3, [r0, #20]
    bd30:	6981      	ldr	r1, [r0, #24]
    bd32:	3202      	adds	r2, #2
    bd34:	428b      	cmp	r3, r1
    bd36:	60c2      	str	r2, [r0, #12]
    bd38:	f2c0 80ab 	blt.w	be92 <d_name+0x29a>
    bd3c:	2400      	movs	r4, #0
    bd3e:	4628      	mov	r0, r5
    bd40:	f000 fdbe 	bl	c8c0 <d_unqualified_name>
    bd44:	4622      	mov	r2, r4
    bd46:	4603      	mov	r3, r0
    bd48:	2101      	movs	r1, #1
    bd4a:	4628      	mov	r0, r5
    bd4c:	f7fe fe82 	bl	aa54 <d_make_comp>
    bd50:	6b29      	ldr	r1, [r5, #48]	; 0x30
    bd52:	68eb      	ldr	r3, [r5, #12]
    bd54:	3103      	adds	r1, #3
    bd56:	6329      	str	r1, [r5, #48]	; 0x30
    bd58:	7819      	ldrb	r1, [r3, #0]
    bd5a:	2949      	cmp	r1, #73	; 0x49
    bd5c:	4602      	mov	r2, r0
    bd5e:	f47f af70 	bne.w	bc42 <d_name+0x4a>
    bd62:	e7ca      	b.n	bcfa <d_name+0x102>
    bd64:	1c5a      	adds	r2, r3, #1
    bd66:	60ea      	str	r2, [r5, #12]
    bd68:	7859      	ldrb	r1, [r3, #1]
    bd6a:	2973      	cmp	r1, #115	; 0x73
    bd6c:	f000 80a3 	beq.w	beb6 <d_name+0x2be>
    bd70:	2964      	cmp	r1, #100	; 0x64
    bd72:	f000 80bc 	beq.w	beee <d_name+0x2f6>
    bd76:	4628      	mov	r0, r5
    bd78:	f7ff ff3e 	bl	bbf8 <d_name>
    bd7c:	4604      	mov	r4, r0
    bd7e:	2800      	cmp	r0, #0
    bd80:	d072      	beq.n	be68 <d_name+0x270>
    bd82:	7803      	ldrb	r3, [r0, #0]
    bd84:	2b45      	cmp	r3, #69	; 0x45
    bd86:	f000 8094 	beq.w	beb2 <d_name+0x2ba>
    bd8a:	2b47      	cmp	r3, #71	; 0x47
    bd8c:	f000 8091 	beq.w	beb2 <d_name+0x2ba>
    bd90:	68eb      	ldr	r3, [r5, #12]
    bd92:	781a      	ldrb	r2, [r3, #0]
    bd94:	2a5f      	cmp	r2, #95	; 0x5f
    bd96:	f040 808c 	bne.w	beb2 <d_name+0x2ba>
    bd9a:	f04f 37ff 	mov.w	r7, #4294967295
    bd9e:	4628      	mov	r0, r5
    bda0:	3301      	adds	r3, #1
    bda2:	f840 3f0c 	str.w	r3, [r0, #12]!
    bda6:	f7fe ffa5 	bl	acf4 <d_number.isra.0>
    bdaa:	2800      	cmp	r0, #0
    bdac:	f6ff af41 	blt.w	bc32 <d_name+0x3a>
    bdb0:	1c7b      	adds	r3, r7, #1
    bdb2:	d07e      	beq.n	beb2 <d_name+0x2ba>
    bdb4:	696b      	ldr	r3, [r5, #20]
    bdb6:	69aa      	ldr	r2, [r5, #24]
    bdb8:	4293      	cmp	r3, r2
    bdba:	da55      	bge.n	be68 <d_name+0x270>
    bdbc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    bdc0:	6929      	ldr	r1, [r5, #16]
    bdc2:	3301      	adds	r3, #1
    bdc4:	0092      	lsls	r2, r2, #2
    bdc6:	616b      	str	r3, [r5, #20]
    bdc8:	188b      	adds	r3, r1, r2
    bdca:	d04e      	beq.n	be6a <d_name+0x272>
    bdcc:	2046      	movs	r0, #70	; 0x46
    bdce:	5488      	strb	r0, [r1, r2]
    bdd0:	609f      	str	r7, [r3, #8]
    bdd2:	605c      	str	r4, [r3, #4]
    bdd4:	e049      	b.n	be6a <d_name+0x272>
    bdd6:	fa26 f303 	lsr.w	r3, r6, r3
    bdda:	07d9      	lsls	r1, r3, #31
    bddc:	f57f af53 	bpl.w	bc86 <d_name+0x8e>
    bde0:	4628      	mov	r0, r5
    bde2:	f000 fd6d 	bl	c8c0 <d_unqualified_name>
    bde6:	b347      	cbz	r7, be3a <d_name+0x242>
    bde8:	2101      	movs	r1, #1
    bdea:	4603      	mov	r3, r0
    bdec:	463a      	mov	r2, r7
    bdee:	4628      	mov	r0, r5
    bdf0:	f7fe fe30 	bl	aa54 <d_make_comp>
    bdf4:	4607      	mov	r7, r0
    bdf6:	2c53      	cmp	r4, #83	; 0x53
    bdf8:	d01c      	beq.n	be34 <d_name+0x23c>
    bdfa:	68ea      	ldr	r2, [r5, #12]
    bdfc:	7814      	ldrb	r4, [r2, #0]
    bdfe:	2c45      	cmp	r4, #69	; 0x45
    be00:	f43f af3b 	beq.w	bc7a <d_name+0x82>
    be04:	b1f7      	cbz	r7, be44 <d_name+0x24c>
    be06:	6a2b      	ldr	r3, [r5, #32]
    be08:	6a69      	ldr	r1, [r5, #36]	; 0x24
    be0a:	428b      	cmp	r3, r1
    be0c:	da1a      	bge.n	be44 <d_name+0x24c>
    be0e:	69e9      	ldr	r1, [r5, #28]
    be10:	1c58      	adds	r0, r3, #1
    be12:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    be16:	6228      	str	r0, [r5, #32]
    be18:	7814      	ldrb	r4, [r2, #0]
    be1a:	e728      	b.n	bc6e <d_name+0x76>
    be1c:	7853      	ldrb	r3, [r2, #1]
    be1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    be22:	2b54      	cmp	r3, #84	; 0x54
    be24:	4628      	mov	r0, r5
    be26:	d00a      	beq.n	be3e <d_name+0x246>
    be28:	f000 fd4a 	bl	c8c0 <d_unqualified_name>
    be2c:	2f00      	cmp	r7, #0
    be2e:	d1db      	bne.n	bde8 <d_name+0x1f0>
    be30:	4607      	mov	r7, r0
    be32:	e7e2      	b.n	bdfa <d_name+0x202>
    be34:	68ea      	ldr	r2, [r5, #12]
    be36:	7814      	ldrb	r4, [r2, #0]
    be38:	e719      	b.n	bc6e <d_name+0x76>
    be3a:	4607      	mov	r7, r0
    be3c:	e7db      	b.n	bdf6 <d_name+0x1fe>
    be3e:	f000 f897 	bl	bf70 <d_type>
    be42:	e7f3      	b.n	be2c <d_name+0x234>
    be44:	2200      	movs	r2, #0
    be46:	4610      	mov	r0, r2
    be48:	f8c9 2000 	str.w	r2, [r9]
    be4c:	b005      	add	sp, #20
    be4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    be52:	4628      	mov	r0, r5
    be54:	e7e8      	b.n	be28 <d_name+0x230>
    be56:	2f00      	cmp	r7, #0
    be58:	d0f4      	beq.n	be44 <d_name+0x24c>
    be5a:	3201      	adds	r2, #1
    be5c:	60ea      	str	r2, [r5, #12]
    be5e:	4628      	mov	r0, r5
    be60:	f7ff fe5c 	bl	bb1c <d_template_args_1>
    be64:	2104      	movs	r1, #4
    be66:	e7c0      	b.n	bdea <d_name+0x1f2>
    be68:	2300      	movs	r3, #0
    be6a:	4632      	mov	r2, r6
    be6c:	4628      	mov	r0, r5
    be6e:	2102      	movs	r1, #2
    be70:	f7fe fdf0 	bl	aa54 <d_make_comp>
    be74:	4602      	mov	r2, r0
    be76:	4610      	mov	r0, r2
    be78:	b005      	add	sp, #20
    be7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    be7e:	2101      	movs	r1, #1
    be80:	4628      	mov	r0, r5
    be82:	f7ff f82f 	bl	aee4 <d_substitution>
    be86:	2f00      	cmp	r7, #0
    be88:	d1ae      	bne.n	bde8 <d_name+0x1f0>
    be8a:	68ea      	ldr	r2, [r5, #12]
    be8c:	4607      	mov	r7, r0
    be8e:	7814      	ldrb	r4, [r2, #0]
    be90:	e6ed      	b.n	bc6e <d_name+0x76>
    be92:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    be96:	6901      	ldr	r1, [r0, #16]
    be98:	0092      	lsls	r2, r2, #2
    be9a:	3301      	adds	r3, #1
    be9c:	188c      	adds	r4, r1, r2
    be9e:	6143      	str	r3, [r0, #20]
    bea0:	f43f af4d 	beq.w	bd3e <d_name+0x146>
    bea4:	2300      	movs	r3, #0
    bea6:	548b      	strb	r3, [r1, r2]
    bea8:	4824      	ldr	r0, [pc, #144]	; (bf3c <d_name+0x344>)
    beaa:	6060      	str	r0, [r4, #4]
    beac:	2303      	movs	r3, #3
    beae:	60a3      	str	r3, [r4, #8]
    beb0:	e745      	b.n	bd3e <d_name+0x146>
    beb2:	4623      	mov	r3, r4
    beb4:	e7d9      	b.n	be6a <d_name+0x272>
    beb6:	1c9a      	adds	r2, r3, #2
    beb8:	60ea      	str	r2, [r5, #12]
    beba:	789a      	ldrb	r2, [r3, #2]
    bebc:	2a5f      	cmp	r2, #95	; 0x5f
    bebe:	d032      	beq.n	bf26 <d_name+0x32e>
    bec0:	696b      	ldr	r3, [r5, #20]
    bec2:	69aa      	ldr	r2, [r5, #24]
    bec4:	4293      	cmp	r3, r2
    bec6:	dacf      	bge.n	be68 <d_name+0x270>
    bec8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    becc:	6929      	ldr	r1, [r5, #16]
    bece:	3301      	adds	r3, #1
    bed0:	0092      	lsls	r2, r2, #2
    bed2:	616b      	str	r3, [r5, #20]
    bed4:	188b      	adds	r3, r1, r2
    bed6:	d0c8      	beq.n	be6a <d_name+0x272>
    bed8:	2400      	movs	r4, #0
    beda:	548c      	strb	r4, [r1, r2]
    bedc:	4818      	ldr	r0, [pc, #96]	; (bf40 <d_name+0x348>)
    bede:	6058      	str	r0, [r3, #4]
    bee0:	220e      	movs	r2, #14
    bee2:	609a      	str	r2, [r3, #8]
    bee4:	e7c1      	b.n	be6a <d_name+0x272>
    bee6:	4628      	mov	r0, r5
    bee8:	f7fe ff62 	bl	adb0 <d_template_param>
    beec:	e79e      	b.n	be2c <d_name+0x234>
    beee:	3302      	adds	r3, #2
    bef0:	60eb      	str	r3, [r5, #12]
    bef2:	4628      	mov	r0, r5
    bef4:	f7fe ff40 	bl	ad78 <d_compact_number>
    bef8:	1e07      	subs	r7, r0, #0
    befa:	f6ff ae9a 	blt.w	bc32 <d_name+0x3a>
    befe:	4628      	mov	r0, r5
    bf00:	f7ff fe7a 	bl	bbf8 <d_name>
    bf04:	4604      	mov	r4, r0
    bf06:	2800      	cmp	r0, #0
    bf08:	f43f af54 	beq.w	bdb4 <d_name+0x1bc>
    bf0c:	7803      	ldrb	r3, [r0, #0]
    bf0e:	2b45      	cmp	r3, #69	; 0x45
    bf10:	f43f af50 	beq.w	bdb4 <d_name+0x1bc>
    bf14:	2b47      	cmp	r3, #71	; 0x47
    bf16:	f43f af4d 	beq.w	bdb4 <d_name+0x1bc>
    bf1a:	68eb      	ldr	r3, [r5, #12]
    bf1c:	781a      	ldrb	r2, [r3, #0]
    bf1e:	2a5f      	cmp	r2, #95	; 0x5f
    bf20:	f47f af48 	bne.w	bdb4 <d_name+0x1bc>
    bf24:	e73b      	b.n	bd9e <d_name+0x1a6>
    bf26:	4628      	mov	r0, r5
    bf28:	3303      	adds	r3, #3
    bf2a:	f840 3f0c 	str.w	r3, [r0, #12]!
    bf2e:	f7fe fee1 	bl	acf4 <d_number.isra.0>
    bf32:	2800      	cmp	r0, #0
    bf34:	dac4      	bge.n	bec0 <d_name+0x2c8>
    bf36:	e67c      	b.n	bc32 <d_name+0x3a>
    bf38:	100803ff 	.word	0x100803ff
    bf3c:	00022c34 	.word	0x00022c34
    bf40:	00022c24 	.word	0x00022c24
    bf44:	f8c9 7000 	str.w	r7, [r9]
    bf48:	2f00      	cmp	r7, #0
    bf4a:	f43f ae72 	beq.w	bc32 <d_name+0x3a>
    bf4e:	f1b8 0f00 	cmp.w	r8, #0
    bf52:	d004      	beq.n	bf5e <d_name+0x366>
    bf54:	9b03      	ldr	r3, [sp, #12]
    bf56:	f8c8 3004 	str.w	r3, [r8, #4]
    bf5a:	f8cd 800c 	str.w	r8, [sp, #12]
    bf5e:	7813      	ldrb	r3, [r2, #0]
    bf60:	2b45      	cmp	r3, #69	; 0x45
    bf62:	f47f ae66 	bne.w	bc32 <d_name+0x3a>
    bf66:	3201      	adds	r2, #1
    bf68:	60ea      	str	r2, [r5, #12]
    bf6a:	9a03      	ldr	r2, [sp, #12]
    bf6c:	e669      	b.n	bc42 <d_name+0x4a>
    bf6e:	bf00      	nop

0000bf70 <d_type>:
    bf70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bf74:	68c2      	ldr	r2, [r0, #12]
    bf76:	7813      	ldrb	r3, [r2, #0]
    bf78:	2b72      	cmp	r3, #114	; 0x72
    bf7a:	b083      	sub	sp, #12
    bf7c:	4604      	mov	r4, r0
    bf7e:	d058      	beq.n	c032 <d_type+0xc2>
    bf80:	2b56      	cmp	r3, #86	; 0x56
    bf82:	d056      	beq.n	c032 <d_type+0xc2>
    bf84:	2b4b      	cmp	r3, #75	; 0x4b
    bf86:	d054      	beq.n	c032 <d_type+0xc2>
    bf88:	2b44      	cmp	r3, #68	; 0x44
    bf8a:	f000 809f 	beq.w	c0cc <d_type+0x15c>
    bf8e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    bf92:	294a      	cmp	r1, #74	; 0x4a
    bf94:	f200 808a 	bhi.w	c0ac <d_type+0x13c>
    bf98:	e8df f011 	tbh	[pc, r1, lsl #1]
    bf9c:	012a012a 	.word	0x012a012a
    bfa0:	012a012a 	.word	0x012a012a
    bfa4:	012a012a 	.word	0x012a012a
    bfa8:	012a012a 	.word	0x012a012a
    bfac:	012a012a 	.word	0x012a012a
    bfb0:	00880088 	.word	0x00880088
    bfb4:	00880088 	.word	0x00880088
    bfb8:	00880088 	.word	0x00880088
    bfbc:	020b0088 	.word	0x020b0088
    bfc0:	01520088 	.word	0x01520088
    bfc4:	00880088 	.word	0x00880088
    bfc8:	0160014c 	.word	0x0160014c
    bfcc:	00880088 	.word	0x00880088
    bfd0:	00880088 	.word	0x00880088
    bfd4:	016e0088 	.word	0x016e0088
    bfd8:	0186012a 	.word	0x0186012a
    bfdc:	008801c3 	.word	0x008801c3
    bfe0:	01a20194 	.word	0x01a20194
    bfe4:	01f301d1 	.word	0x01f301d1
    bfe8:	00880088 	.word	0x00880088
    bfec:	00880088 	.word	0x00880088
    bff0:	0088012a 	.word	0x0088012a
    bff4:	00880088 	.word	0x00880088
    bff8:	00880088 	.word	0x00880088
    bffc:	010c0088 	.word	0x010c0088
    c000:	010c010c 	.word	0x010c010c
    c004:	010c010c 	.word	0x010c010c
    c008:	010c010c 	.word	0x010c010c
    c00c:	010c010c 	.word	0x010c010c
    c010:	0088010c 	.word	0x0088010c
    c014:	010c010c 	.word	0x010c010c
    c018:	010c010c 	.word	0x010c010c
    c01c:	00880088 	.word	0x00880088
    c020:	010c0088 	.word	0x010c0088
    c024:	013e010c 	.word	0x013e010c
    c028:	010c010c 	.word	0x010c010c
    c02c:	010c010c 	.word	0x010c010c
    c030:	010c      	.short	0x010c
    c032:	2200      	movs	r2, #0
    c034:	a901      	add	r1, sp, #4
    c036:	4620      	mov	r0, r4
    c038:	f7fe fd58 	bl	aaec <d_cv_qualifiers>
    c03c:	4605      	mov	r5, r0
    c03e:	2800      	cmp	r0, #0
    c040:	d034      	beq.n	c0ac <d_type+0x13c>
    c042:	68e3      	ldr	r3, [r4, #12]
    c044:	781b      	ldrb	r3, [r3, #0]
    c046:	2b46      	cmp	r3, #70	; 0x46
    c048:	4620      	mov	r0, r4
    c04a:	d034      	beq.n	c0b6 <d_type+0x146>
    c04c:	f7ff ff90 	bl	bf70 <d_type>
    c050:	6028      	str	r0, [r5, #0]
    c052:	b358      	cbz	r0, c0ac <d_type+0x13c>
    c054:	7803      	ldrb	r3, [r0, #0]
    c056:	3b1f      	subs	r3, #31
    c058:	2b01      	cmp	r3, #1
    c05a:	d930      	bls.n	c0be <d_type+0x14e>
    c05c:	9a01      	ldr	r2, [sp, #4]
    c05e:	b32a      	cbz	r2, c0ac <d_type+0x13c>
    c060:	6a23      	ldr	r3, [r4, #32]
    c062:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c064:	428b      	cmp	r3, r1
    c066:	da21      	bge.n	c0ac <d_type+0x13c>
    c068:	69e0      	ldr	r0, [r4, #28]
    c06a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    c06e:	9d01      	ldr	r5, [sp, #4]
    c070:	1c59      	adds	r1, r3, #1
    c072:	4628      	mov	r0, r5
    c074:	6221      	str	r1, [r4, #32]
    c076:	b003      	add	sp, #12
    c078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c07c:	2301      	movs	r3, #1
    c07e:	6b45      	ldr	r5, [r0, #52]	; 0x34
    c080:	6343      	str	r3, [r0, #52]	; 0x34
    c082:	f7ff fb51 	bl	b728 <d_expression_1>
    c086:	6365      	str	r5, [r4, #52]	; 0x34
    c088:	4602      	mov	r2, r0
    c08a:	2300      	movs	r3, #0
    c08c:	2142      	movs	r1, #66	; 0x42
    c08e:	4620      	mov	r0, r4
    c090:	f7fe fce0 	bl	aa54 <d_make_comp>
    c094:	4605      	mov	r5, r0
    c096:	9001      	str	r0, [sp, #4]
    c098:	b140      	cbz	r0, c0ac <d_type+0x13c>
    c09a:	68e3      	ldr	r3, [r4, #12]
    c09c:	781a      	ldrb	r2, [r3, #0]
    c09e:	b12a      	cbz	r2, c0ac <d_type+0x13c>
    c0a0:	1c5a      	adds	r2, r3, #1
    c0a2:	60e2      	str	r2, [r4, #12]
    c0a4:	781b      	ldrb	r3, [r3, #0]
    c0a6:	2b45      	cmp	r3, #69	; 0x45
    c0a8:	f000 80aa 	beq.w	c200 <d_type+0x290>
    c0ac:	2500      	movs	r5, #0
    c0ae:	4628      	mov	r0, r5
    c0b0:	b003      	add	sp, #12
    c0b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c0b6:	f000 fd53 	bl	cb60 <d_function_type>
    c0ba:	6028      	str	r0, [r5, #0]
    c0bc:	e7c9      	b.n	c052 <d_type+0xe2>
    c0be:	9a01      	ldr	r2, [sp, #4]
    c0c0:	6843      	ldr	r3, [r0, #4]
    c0c2:	6042      	str	r2, [r0, #4]
    c0c4:	682a      	ldr	r2, [r5, #0]
    c0c6:	9201      	str	r2, [sp, #4]
    c0c8:	602b      	str	r3, [r5, #0]
    c0ca:	e7c7      	b.n	c05c <d_type+0xec>
    c0cc:	7853      	ldrb	r3, [r2, #1]
    c0ce:	2b78      	cmp	r3, #120	; 0x78
    c0d0:	d0af      	beq.n	c032 <d_type+0xc2>
    c0d2:	1c53      	adds	r3, r2, #1
    c0d4:	60c3      	str	r3, [r0, #12]
    c0d6:	7853      	ldrb	r3, [r2, #1]
    c0d8:	2b00      	cmp	r3, #0
    c0da:	d0e7      	beq.n	c0ac <d_type+0x13c>
    c0dc:	1c93      	adds	r3, r2, #2
    c0de:	60c3      	str	r3, [r0, #12]
    c0e0:	7853      	ldrb	r3, [r2, #1]
    c0e2:	3b46      	subs	r3, #70	; 0x46
    c0e4:	2b30      	cmp	r3, #48	; 0x30
    c0e6:	d8e1      	bhi.n	c0ac <d_type+0x13c>
    c0e8:	a101      	add	r1, pc, #4	; (adr r1, c0f0 <d_type+0x180>)
    c0ea:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    c0ee:	bf00      	nop
    c0f0:	0000c5db 	.word	0x0000c5db
    c0f4:	0000c0ad 	.word	0x0000c0ad
    c0f8:	0000c0ad 	.word	0x0000c0ad
    c0fc:	0000c0ad 	.word	0x0000c0ad
    c100:	0000c0ad 	.word	0x0000c0ad
    c104:	0000c0ad 	.word	0x0000c0ad
    c108:	0000c0ad 	.word	0x0000c0ad
    c10c:	0000c0ad 	.word	0x0000c0ad
    c110:	0000c0ad 	.word	0x0000c0ad
    c114:	0000c0ad 	.word	0x0000c0ad
    c118:	0000c0ad 	.word	0x0000c0ad
    c11c:	0000c0ad 	.word	0x0000c0ad
    c120:	0000c0ad 	.word	0x0000c0ad
    c124:	0000c0ad 	.word	0x0000c0ad
    c128:	0000c07d 	.word	0x0000c07d
    c12c:	0000c0ad 	.word	0x0000c0ad
    c130:	0000c0ad 	.word	0x0000c0ad
    c134:	0000c0ad 	.word	0x0000c0ad
    c138:	0000c0ad 	.word	0x0000c0ad
    c13c:	0000c0ad 	.word	0x0000c0ad
    c140:	0000c0ad 	.word	0x0000c0ad
    c144:	0000c0ad 	.word	0x0000c0ad
    c148:	0000c0ad 	.word	0x0000c0ad
    c14c:	0000c0ad 	.word	0x0000c0ad
    c150:	0000c0ad 	.word	0x0000c0ad
    c154:	0000c0ad 	.word	0x0000c0ad
    c158:	0000c0ad 	.word	0x0000c0ad
    c15c:	0000c5af 	.word	0x0000c5af
    c160:	0000c0ad 	.word	0x0000c0ad
    c164:	0000c583 	.word	0x0000c583
    c168:	0000c563 	.word	0x0000c563
    c16c:	0000c539 	.word	0x0000c539
    c170:	0000c50b 	.word	0x0000c50b
    c174:	0000c0ad 	.word	0x0000c0ad
    c178:	0000c4dd 	.word	0x0000c4dd
    c17c:	0000c4b9 	.word	0x0000c4b9
    c180:	0000c0ad 	.word	0x0000c0ad
    c184:	0000c0ad 	.word	0x0000c0ad
    c188:	0000c0ad 	.word	0x0000c0ad
    c18c:	0000c0ad 	.word	0x0000c0ad
    c190:	0000c47f 	.word	0x0000c47f
    c194:	0000c0ad 	.word	0x0000c0ad
    c198:	0000c469 	.word	0x0000c469
    c19c:	0000c0ad 	.word	0x0000c0ad
    c1a0:	0000c0ad 	.word	0x0000c0ad
    c1a4:	0000c43b 	.word	0x0000c43b
    c1a8:	0000c07d 	.word	0x0000c07d
    c1ac:	0000c0ad 	.word	0x0000c0ad
    c1b0:	0000c405 	.word	0x0000c405
    c1b4:	6960      	ldr	r0, [r4, #20]
    c1b6:	69a5      	ldr	r5, [r4, #24]
    c1b8:	49bc      	ldr	r1, [pc, #752]	; (c4ac <d_type+0x53c>)
    c1ba:	3b61      	subs	r3, #97	; 0x61
    c1bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    c1c0:	42a8      	cmp	r0, r5
    c1c2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    c1c6:	f280 823a 	bge.w	c63e <d_type+0x6ce>
    c1ca:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    c1ce:	6926      	ldr	r6, [r4, #16]
    c1d0:	0089      	lsls	r1, r1, #2
    c1d2:	3001      	adds	r0, #1
    c1d4:	1875      	adds	r5, r6, r1
    c1d6:	6160      	str	r0, [r4, #20]
    c1d8:	f000 8231 	beq.w	c63e <d_type+0x6ce>
    c1dc:	2027      	movs	r0, #39	; 0x27
    c1de:	5470      	strb	r0, [r6, r1]
    c1e0:	606b      	str	r3, [r5, #4]
    c1e2:	6859      	ldr	r1, [r3, #4]
    c1e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c1e6:	3201      	adds	r2, #1
    c1e8:	440b      	add	r3, r1
    c1ea:	60e2      	str	r2, [r4, #12]
    c1ec:	6323      	str	r3, [r4, #48]	; 0x30
    c1ee:	e75e      	b.n	c0ae <d_type+0x13e>
    c1f0:	4620      	mov	r0, r4
    c1f2:	f7ff fd01 	bl	bbf8 <d_name>
    c1f6:	4605      	mov	r5, r0
    c1f8:	9001      	str	r0, [sp, #4]
    c1fa:	2d00      	cmp	r5, #0
    c1fc:	f43f af56 	beq.w	c0ac <d_type+0x13c>
    c200:	6a23      	ldr	r3, [r4, #32]
    c202:	6a62      	ldr	r2, [r4, #36]	; 0x24
    c204:	4293      	cmp	r3, r2
    c206:	f6bf af51 	bge.w	c0ac <d_type+0x13c>
    c20a:	69e1      	ldr	r1, [r4, #28]
    c20c:	1c5a      	adds	r2, r3, #1
    c20e:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
    c212:	9d01      	ldr	r5, [sp, #4]
    c214:	6222      	str	r2, [r4, #32]
    c216:	e74a      	b.n	c0ae <d_type+0x13e>
    c218:	3201      	adds	r2, #1
    c21a:	60e2      	str	r2, [r4, #12]
    c21c:	4620      	mov	r0, r4
    c21e:	f7fe fde9 	bl	adf4 <d_source_name>
    c222:	2300      	movs	r3, #0
    c224:	4602      	mov	r2, r0
    c226:	2128      	movs	r1, #40	; 0x28
    c228:	4620      	mov	r0, r4
    c22a:	f7fe fc13 	bl	aa54 <d_make_comp>
    c22e:	4605      	mov	r5, r0
    c230:	9001      	str	r0, [sp, #4]
    c232:	e7e2      	b.n	c1fa <d_type+0x28a>
    c234:	4620      	mov	r0, r4
    c236:	f000 fc93 	bl	cb60 <d_function_type>
    c23a:	4605      	mov	r5, r0
    c23c:	9001      	str	r0, [sp, #4]
    c23e:	e7dc      	b.n	c1fa <d_type+0x28a>
    c240:	3201      	adds	r2, #1
    c242:	60e2      	str	r2, [r4, #12]
    c244:	4620      	mov	r0, r4
    c246:	f7ff fe93 	bl	bf70 <d_type>
    c24a:	2300      	movs	r3, #0
    c24c:	4602      	mov	r2, r0
    c24e:	2125      	movs	r1, #37	; 0x25
    c250:	4620      	mov	r0, r4
    c252:	f7fe fbff 	bl	aa54 <d_make_comp>
    c256:	4605      	mov	r5, r0
    c258:	9001      	str	r0, [sp, #4]
    c25a:	e7ce      	b.n	c1fa <d_type+0x28a>
    c25c:	3201      	adds	r2, #1
    c25e:	60e2      	str	r2, [r4, #12]
    c260:	4620      	mov	r0, r4
    c262:	f7ff fe85 	bl	bf70 <d_type>
    c266:	2300      	movs	r3, #0
    c268:	4602      	mov	r2, r0
    c26a:	2126      	movs	r1, #38	; 0x26
    c26c:	4620      	mov	r0, r4
    c26e:	f7fe fbf1 	bl	aa54 <d_make_comp>
    c272:	4605      	mov	r5, r0
    c274:	9001      	str	r0, [sp, #4]
    c276:	e7c0      	b.n	c1fa <d_type+0x28a>
    c278:	3201      	adds	r2, #1
    c27a:	60e2      	str	r2, [r4, #12]
    c27c:	4620      	mov	r0, r4
    c27e:	f7ff fe77 	bl	bf70 <d_type>
    c282:	4605      	mov	r5, r0
    c284:	2800      	cmp	r0, #0
    c286:	f000 80bb 	beq.w	c400 <d_type+0x490>
    c28a:	4620      	mov	r0, r4
    c28c:	f7ff fe70 	bl	bf70 <d_type>
    c290:	2800      	cmp	r0, #0
    c292:	f000 80b5 	beq.w	c400 <d_type+0x490>
    c296:	4603      	mov	r3, r0
    c298:	462a      	mov	r2, r5
    c29a:	212b      	movs	r1, #43	; 0x2b
    c29c:	4620      	mov	r0, r4
    c29e:	f7fe fbd9 	bl	aa54 <d_make_comp>
    c2a2:	4605      	mov	r5, r0
    c2a4:	9501      	str	r5, [sp, #4]
    c2a6:	e7a8      	b.n	c1fa <d_type+0x28a>
    c2a8:	3201      	adds	r2, #1
    c2aa:	60e2      	str	r2, [r4, #12]
    c2ac:	4620      	mov	r0, r4
    c2ae:	f7ff fe5f 	bl	bf70 <d_type>
    c2b2:	2300      	movs	r3, #0
    c2b4:	4602      	mov	r2, r0
    c2b6:	2124      	movs	r1, #36	; 0x24
    c2b8:	4620      	mov	r0, r4
    c2ba:	f7fe fbcb 	bl	aa54 <d_make_comp>
    c2be:	4605      	mov	r5, r0
    c2c0:	9001      	str	r0, [sp, #4]
    c2c2:	e79a      	b.n	c1fa <d_type+0x28a>
    c2c4:	3201      	adds	r2, #1
    c2c6:	60e2      	str	r2, [r4, #12]
    c2c8:	4620      	mov	r0, r4
    c2ca:	f7ff fe51 	bl	bf70 <d_type>
    c2ce:	2300      	movs	r3, #0
    c2d0:	4602      	mov	r2, r0
    c2d2:	2123      	movs	r1, #35	; 0x23
    c2d4:	4620      	mov	r0, r4
    c2d6:	f7fe fbbd 	bl	aa54 <d_make_comp>
    c2da:	4605      	mov	r5, r0
    c2dc:	9001      	str	r0, [sp, #4]
    c2de:	e78c      	b.n	c1fa <d_type+0x28a>
    c2e0:	7853      	ldrb	r3, [r2, #1]
    c2e2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    c2e6:	2a09      	cmp	r2, #9
    c2e8:	d905      	bls.n	c2f6 <d_type+0x386>
    c2ea:	2b5f      	cmp	r3, #95	; 0x5f
    c2ec:	d003      	beq.n	c2f6 <d_type+0x386>
    c2ee:	3b41      	subs	r3, #65	; 0x41
    c2f0:	2b19      	cmp	r3, #25
    c2f2:	f200 81c3 	bhi.w	c67c <d_type+0x70c>
    c2f6:	2100      	movs	r1, #0
    c2f8:	4620      	mov	r0, r4
    c2fa:	f7fe fdf3 	bl	aee4 <d_substitution>
    c2fe:	68e3      	ldr	r3, [r4, #12]
    c300:	9001      	str	r0, [sp, #4]
    c302:	781b      	ldrb	r3, [r3, #0]
    c304:	2b49      	cmp	r3, #73	; 0x49
    c306:	4605      	mov	r5, r0
    c308:	f47f aed1 	bne.w	c0ae <d_type+0x13e>
    c30c:	4620      	mov	r0, r4
    c30e:	f7ff fc69 	bl	bbe4 <d_template_args>
    c312:	462a      	mov	r2, r5
    c314:	4603      	mov	r3, r0
    c316:	2104      	movs	r1, #4
    c318:	4620      	mov	r0, r4
    c31a:	f7fe fb9b 	bl	aa54 <d_make_comp>
    c31e:	4605      	mov	r5, r0
    c320:	e7c0      	b.n	c2a4 <d_type+0x334>
    c322:	3201      	adds	r2, #1
    c324:	60e2      	str	r2, [r4, #12]
    c326:	4620      	mov	r0, r4
    c328:	f7ff fe22 	bl	bf70 <d_type>
    c32c:	2300      	movs	r3, #0
    c32e:	4602      	mov	r2, r0
    c330:	2122      	movs	r1, #34	; 0x22
    c332:	4620      	mov	r0, r4
    c334:	f7fe fb8e 	bl	aa54 <d_make_comp>
    c338:	4605      	mov	r5, r0
    c33a:	9001      	str	r0, [sp, #4]
    c33c:	e75d      	b.n	c1fa <d_type+0x28a>
    c33e:	4620      	mov	r0, r4
    c340:	f7fe fd36 	bl	adb0 <d_template_param>
    c344:	68e6      	ldr	r6, [r4, #12]
    c346:	9001      	str	r0, [sp, #4]
    c348:	7833      	ldrb	r3, [r6, #0]
    c34a:	2b49      	cmp	r3, #73	; 0x49
    c34c:	4605      	mov	r5, r0
    c34e:	f47f af54 	bne.w	c1fa <d_type+0x28a>
    c352:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    c354:	2b00      	cmp	r3, #0
    c356:	f040 81a9 	bne.w	c6ac <d_type+0x73c>
    c35a:	2800      	cmp	r0, #0
    c35c:	f43f aea6 	beq.w	c0ac <d_type+0x13c>
    c360:	6a23      	ldr	r3, [r4, #32]
    c362:	6a62      	ldr	r2, [r4, #36]	; 0x24
    c364:	4293      	cmp	r3, r2
    c366:	f6bf aea1 	bge.w	c0ac <d_type+0x13c>
    c36a:	69e1      	ldr	r1, [r4, #28]
    c36c:	1c5a      	adds	r2, r3, #1
    c36e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    c372:	6222      	str	r2, [r4, #32]
    c374:	4620      	mov	r0, r4
    c376:	9d01      	ldr	r5, [sp, #4]
    c378:	f7ff fc34 	bl	bbe4 <d_template_args>
    c37c:	462a      	mov	r2, r5
    c37e:	4603      	mov	r3, r0
    c380:	e7c9      	b.n	c316 <d_type+0x3a6>
    c382:	3201      	adds	r2, #1
    c384:	60e2      	str	r2, [r4, #12]
    c386:	4620      	mov	r0, r4
    c388:	f7fe fd34 	bl	adf4 <d_source_name>
    c38c:	68e3      	ldr	r3, [r4, #12]
    c38e:	9001      	str	r0, [sp, #4]
    c390:	781b      	ldrb	r3, [r3, #0]
    c392:	2b49      	cmp	r3, #73	; 0x49
    c394:	4605      	mov	r5, r0
    c396:	f000 817e 	beq.w	c696 <d_type+0x726>
    c39a:	4620      	mov	r0, r4
    c39c:	f7ff fde8 	bl	bf70 <d_type>
    c3a0:	9b01      	ldr	r3, [sp, #4]
    c3a2:	4602      	mov	r2, r0
    c3a4:	2121      	movs	r1, #33	; 0x21
    c3a6:	4620      	mov	r0, r4
    c3a8:	f7fe fb54 	bl	aa54 <d_make_comp>
    c3ac:	4605      	mov	r5, r0
    c3ae:	9001      	str	r0, [sp, #4]
    c3b0:	e723      	b.n	c1fa <d_type+0x28a>
    c3b2:	1c51      	adds	r1, r2, #1
    c3b4:	60e1      	str	r1, [r4, #12]
    c3b6:	7853      	ldrb	r3, [r2, #1]
    c3b8:	2b5f      	cmp	r3, #95	; 0x5f
    c3ba:	f000 8144 	beq.w	c646 <d_type+0x6d6>
    c3be:	3b30      	subs	r3, #48	; 0x30
    c3c0:	2b09      	cmp	r3, #9
    c3c2:	f200 814e 	bhi.w	c662 <d_type+0x6f2>
    c3c6:	460b      	mov	r3, r1
    c3c8:	3301      	adds	r3, #1
    c3ca:	60e3      	str	r3, [r4, #12]
    c3cc:	781a      	ldrb	r2, [r3, #0]
    c3ce:	3a30      	subs	r2, #48	; 0x30
    c3d0:	2a09      	cmp	r2, #9
    c3d2:	d9f9      	bls.n	c3c8 <d_type+0x458>
    c3d4:	6962      	ldr	r2, [r4, #20]
    c3d6:	69a0      	ldr	r0, [r4, #24]
    c3d8:	4282      	cmp	r2, r0
    c3da:	da11      	bge.n	c400 <d_type+0x490>
    c3dc:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    c3e0:	6926      	ldr	r6, [r4, #16]
    c3e2:	0080      	lsls	r0, r0, #2
    c3e4:	3201      	adds	r2, #1
    c3e6:	1835      	adds	r5, r6, r0
    c3e8:	6162      	str	r2, [r4, #20]
    c3ea:	d009      	beq.n	c400 <d_type+0x490>
    c3ec:	1a5a      	subs	r2, r3, r1
    c3ee:	d007      	beq.n	c400 <d_type+0x490>
    c3f0:	2700      	movs	r7, #0
    c3f2:	5437      	strb	r7, [r6, r0]
    c3f4:	6069      	str	r1, [r5, #4]
    c3f6:	60aa      	str	r2, [r5, #8]
    c3f8:	781a      	ldrb	r2, [r3, #0]
    c3fa:	2a5f      	cmp	r2, #95	; 0x5f
    c3fc:	f000 8190 	beq.w	c720 <d_type+0x7b0>
    c400:	2500      	movs	r5, #0
    c402:	e74f      	b.n	c2a4 <d_type+0x334>
    c404:	7893      	ldrb	r3, [r2, #2]
    c406:	2b5f      	cmp	r3, #95	; 0x5f
    c408:	f000 8180 	beq.w	c70c <d_type+0x79c>
    c40c:	f7fe fc9c 	bl	ad48 <d_number_component>
    c410:	4605      	mov	r5, r0
    c412:	2d00      	cmp	r5, #0
    c414:	f43f af46 	beq.w	c2a4 <d_type+0x334>
    c418:	68e3      	ldr	r3, [r4, #12]
    c41a:	781a      	ldrb	r2, [r3, #0]
    c41c:	2a5f      	cmp	r2, #95	; 0x5f
    c41e:	d1ef      	bne.n	c400 <d_type+0x490>
    c420:	3301      	adds	r3, #1
    c422:	60e3      	str	r3, [r4, #12]
    c424:	4620      	mov	r0, r4
    c426:	f7ff fda3 	bl	bf70 <d_type>
    c42a:	462a      	mov	r2, r5
    c42c:	4603      	mov	r3, r0
    c42e:	212d      	movs	r1, #45	; 0x2d
    c430:	4620      	mov	r0, r4
    c432:	f7fe fb0f 	bl	aa54 <d_make_comp>
    c436:	4605      	mov	r5, r0
    c438:	e734      	b.n	c2a4 <d_type+0x334>
    c43a:	6942      	ldr	r2, [r0, #20]
    c43c:	6983      	ldr	r3, [r0, #24]
    c43e:	429a      	cmp	r2, r3
    c440:	f280 80fd 	bge.w	c63e <d_type+0x6ce>
    c444:	230c      	movs	r3, #12
    c446:	6901      	ldr	r1, [r0, #16]
    c448:	fb03 f302 	mul.w	r3, r3, r2
    c44c:	18cd      	adds	r5, r1, r3
    c44e:	f102 0201 	add.w	r2, r2, #1
    c452:	6142      	str	r2, [r0, #20]
    c454:	f000 80f3 	beq.w	c63e <d_type+0x6ce>
    c458:	4a15      	ldr	r2, [pc, #84]	; (c4b0 <d_type+0x540>)
    c45a:	2027      	movs	r0, #39	; 0x27
    c45c:	54c8      	strb	r0, [r1, r3]
    c45e:	606a      	str	r2, [r5, #4]
    c460:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c462:	3308      	adds	r3, #8
    c464:	6323      	str	r3, [r4, #48]	; 0x30
    c466:	e622      	b.n	c0ae <d_type+0x13e>
    c468:	f7ff fd82 	bl	bf70 <d_type>
    c46c:	2300      	movs	r3, #0
    c46e:	4602      	mov	r2, r0
    c470:	214a      	movs	r1, #74	; 0x4a
    c472:	4620      	mov	r0, r4
    c474:	f7fe faee 	bl	aa54 <d_make_comp>
    c478:	4605      	mov	r5, r0
    c47a:	9001      	str	r0, [sp, #4]
    c47c:	e6bd      	b.n	c1fa <d_type+0x28a>
    c47e:	6942      	ldr	r2, [r0, #20]
    c480:	6983      	ldr	r3, [r0, #24]
    c482:	429a      	cmp	r2, r3
    c484:	f280 80db 	bge.w	c63e <d_type+0x6ce>
    c488:	230c      	movs	r3, #12
    c48a:	6901      	ldr	r1, [r0, #16]
    c48c:	fb03 f302 	mul.w	r3, r3, r2
    c490:	18cd      	adds	r5, r1, r3
    c492:	f102 0201 	add.w	r2, r2, #1
    c496:	6142      	str	r2, [r0, #20]
    c498:	f000 80d1 	beq.w	c63e <d_type+0x6ce>
    c49c:	2027      	movs	r0, #39	; 0x27
    c49e:	4a05      	ldr	r2, [pc, #20]	; (c4b4 <d_type+0x544>)
    c4a0:	54c8      	strb	r0, [r1, r3]
    c4a2:	606a      	str	r2, [r5, #4]
    c4a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c4a6:	3311      	adds	r3, #17
    c4a8:	6323      	str	r3, [r4, #48]	; 0x30
    c4aa:	e600      	b.n	c0ae <d_type+0x13e>
    c4ac:	00022518 	.word	0x00022518
    c4b0:	00022770 	.word	0x00022770
    c4b4:	00022798 	.word	0x00022798
    c4b8:	6942      	ldr	r2, [r0, #20]
    c4ba:	6983      	ldr	r3, [r0, #24]
    c4bc:	429a      	cmp	r2, r3
    c4be:	f280 80be 	bge.w	c63e <d_type+0x6ce>
    c4c2:	230c      	movs	r3, #12
    c4c4:	6901      	ldr	r1, [r0, #16]
    c4c6:	fb03 f302 	mul.w	r3, r3, r2
    c4ca:	18cd      	adds	r5, r1, r3
    c4cc:	f102 0201 	add.w	r2, r2, #1
    c4d0:	6142      	str	r2, [r0, #20]
    c4d2:	f000 80b4 	beq.w	c63e <d_type+0x6ce>
    c4d6:	2027      	movs	r0, #39	; 0x27
    c4d8:	4a92      	ldr	r2, [pc, #584]	; (c724 <d_type+0x7b4>)
    c4da:	e7bf      	b.n	c45c <d_type+0x4ec>
    c4dc:	6942      	ldr	r2, [r0, #20]
    c4de:	6983      	ldr	r3, [r0, #24]
    c4e0:	429a      	cmp	r2, r3
    c4e2:	f280 80ac 	bge.w	c63e <d_type+0x6ce>
    c4e6:	230c      	movs	r3, #12
    c4e8:	6901      	ldr	r1, [r0, #16]
    c4ea:	fb03 f302 	mul.w	r3, r3, r2
    c4ee:	18cd      	adds	r5, r1, r3
    c4f0:	f102 0201 	add.w	r2, r2, #1
    c4f4:	6142      	str	r2, [r0, #20]
    c4f6:	f000 80a2 	beq.w	c63e <d_type+0x6ce>
    c4fa:	2027      	movs	r0, #39	; 0x27
    c4fc:	4a8a      	ldr	r2, [pc, #552]	; (c728 <d_type+0x7b8>)
    c4fe:	54c8      	strb	r0, [r1, r3]
    c500:	606a      	str	r2, [r5, #4]
    c502:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c504:	3304      	adds	r3, #4
    c506:	6323      	str	r3, [r4, #48]	; 0x30
    c508:	e5d1      	b.n	c0ae <d_type+0x13e>
    c50a:	6942      	ldr	r2, [r0, #20]
    c50c:	6983      	ldr	r3, [r0, #24]
    c50e:	429a      	cmp	r2, r3
    c510:	f280 8095 	bge.w	c63e <d_type+0x6ce>
    c514:	230c      	movs	r3, #12
    c516:	6901      	ldr	r1, [r0, #16]
    c518:	fb03 f302 	mul.w	r3, r3, r2
    c51c:	18cd      	adds	r5, r1, r3
    c51e:	f102 0201 	add.w	r2, r2, #1
    c522:	6142      	str	r2, [r0, #20]
    c524:	f000 808b 	beq.w	c63e <d_type+0x6ce>
    c528:	4a80      	ldr	r2, [pc, #512]	; (c72c <d_type+0x7bc>)
    c52a:	2027      	movs	r0, #39	; 0x27
    c52c:	54c8      	strb	r0, [r1, r3]
    c52e:	606a      	str	r2, [r5, #4]
    c530:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c532:	3309      	adds	r3, #9
    c534:	6323      	str	r3, [r4, #48]	; 0x30
    c536:	e5ba      	b.n	c0ae <d_type+0x13e>
    c538:	6942      	ldr	r2, [r0, #20]
    c53a:	6983      	ldr	r3, [r0, #24]
    c53c:	429a      	cmp	r2, r3
    c53e:	da7e      	bge.n	c63e <d_type+0x6ce>
    c540:	230c      	movs	r3, #12
    c542:	6901      	ldr	r1, [r0, #16]
    c544:	fb03 f302 	mul.w	r3, r3, r2
    c548:	18cd      	adds	r5, r1, r3
    c54a:	f102 0201 	add.w	r2, r2, #1
    c54e:	6142      	str	r2, [r0, #20]
    c550:	d075      	beq.n	c63e <d_type+0x6ce>
    c552:	2027      	movs	r0, #39	; 0x27
    c554:	4a76      	ldr	r2, [pc, #472]	; (c730 <d_type+0x7c0>)
    c556:	54c8      	strb	r0, [r1, r3]
    c558:	606a      	str	r2, [r5, #4]
    c55a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c55c:	330a      	adds	r3, #10
    c55e:	6323      	str	r3, [r4, #48]	; 0x30
    c560:	e5a5      	b.n	c0ae <d_type+0x13e>
    c562:	6942      	ldr	r2, [r0, #20]
    c564:	6983      	ldr	r3, [r0, #24]
    c566:	429a      	cmp	r2, r3
    c568:	da69      	bge.n	c63e <d_type+0x6ce>
    c56a:	230c      	movs	r3, #12
    c56c:	6901      	ldr	r1, [r0, #16]
    c56e:	fb03 f302 	mul.w	r3, r3, r2
    c572:	18cd      	adds	r5, r1, r3
    c574:	f102 0201 	add.w	r2, r2, #1
    c578:	6142      	str	r2, [r0, #20]
    c57a:	d060      	beq.n	c63e <d_type+0x6ce>
    c57c:	2027      	movs	r0, #39	; 0x27
    c57e:	4a6d      	ldr	r2, [pc, #436]	; (c734 <d_type+0x7c4>)
    c580:	e7d4      	b.n	c52c <d_type+0x5bc>
    c582:	6942      	ldr	r2, [r0, #20]
    c584:	6983      	ldr	r3, [r0, #24]
    c586:	429a      	cmp	r2, r3
    c588:	f6bf ad90 	bge.w	c0ac <d_type+0x13c>
    c58c:	230c      	movs	r3, #12
    c58e:	6901      	ldr	r1, [r0, #16]
    c590:	fb03 f302 	mul.w	r3, r3, r2
    c594:	18cd      	adds	r5, r1, r3
    c596:	f102 0201 	add.w	r2, r2, #1
    c59a:	6142      	str	r2, [r0, #20]
    c59c:	f43f ad87 	beq.w	c0ae <d_type+0x13e>
    c5a0:	2000      	movs	r0, #0
    c5a2:	54c8      	strb	r0, [r1, r3]
    c5a4:	4a64      	ldr	r2, [pc, #400]	; (c738 <d_type+0x7c8>)
    c5a6:	606a      	str	r2, [r5, #4]
    c5a8:	230e      	movs	r3, #14
    c5aa:	60ab      	str	r3, [r5, #8]
    c5ac:	e57f      	b.n	c0ae <d_type+0x13e>
    c5ae:	6942      	ldr	r2, [r0, #20]
    c5b0:	6983      	ldr	r3, [r0, #24]
    c5b2:	429a      	cmp	r2, r3
    c5b4:	f6bf ad7a 	bge.w	c0ac <d_type+0x13c>
    c5b8:	230c      	movs	r3, #12
    c5ba:	6901      	ldr	r1, [r0, #16]
    c5bc:	fb03 f302 	mul.w	r3, r3, r2
    c5c0:	18cd      	adds	r5, r1, r3
    c5c2:	f102 0201 	add.w	r2, r2, #1
    c5c6:	6142      	str	r2, [r0, #20]
    c5c8:	f43f ad71 	beq.w	c0ae <d_type+0x13e>
    c5cc:	2000      	movs	r0, #0
    c5ce:	54c8      	strb	r0, [r1, r3]
    c5d0:	4a5a      	ldr	r2, [pc, #360]	; (c73c <d_type+0x7cc>)
    c5d2:	606a      	str	r2, [r5, #4]
    c5d4:	2304      	movs	r3, #4
    c5d6:	60ab      	str	r3, [r5, #8]
    c5d8:	e569      	b.n	c0ae <d_type+0x13e>
    c5da:	6943      	ldr	r3, [r0, #20]
    c5dc:	6981      	ldr	r1, [r0, #24]
    c5de:	428b      	cmp	r3, r1
    c5e0:	da7a      	bge.n	c6d8 <d_type+0x768>
    c5e2:	6900      	ldr	r0, [r0, #16]
    c5e4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    c5e8:	0089      	lsls	r1, r1, #2
    c5ea:	3301      	adds	r3, #1
    c5ec:	1845      	adds	r5, r0, r1
    c5ee:	262c      	movs	r6, #44	; 0x2c
    c5f0:	6163      	str	r3, [r4, #20]
    c5f2:	9501      	str	r5, [sp, #4]
    c5f4:	5446      	strb	r6, [r0, r1]
    c5f6:	7893      	ldrb	r3, [r2, #2]
    c5f8:	3b30      	subs	r3, #48	; 0x30
    c5fa:	b2db      	uxtb	r3, r3
    c5fc:	2b09      	cmp	r3, #9
    c5fe:	bf94      	ite	ls
    c600:	2301      	movls	r3, #1
    c602:	2300      	movhi	r3, #0
    c604:	812b      	strh	r3, [r5, #8]
    c606:	d97b      	bls.n	c700 <d_type+0x790>
    c608:	4620      	mov	r0, r4
    c60a:	f7ff fcb1 	bl	bf70 <d_type>
    c60e:	9b01      	ldr	r3, [sp, #4]
    c610:	6068      	str	r0, [r5, #4]
    c612:	685b      	ldr	r3, [r3, #4]
    c614:	2b00      	cmp	r3, #0
    c616:	f43f ad49 	beq.w	c0ac <d_type+0x13c>
    c61a:	f104 000c 	add.w	r0, r4, #12
    c61e:	f7fe fb69 	bl	acf4 <d_number.isra.0>
    c622:	68e2      	ldr	r2, [r4, #12]
    c624:	7813      	ldrb	r3, [r2, #0]
    c626:	b113      	cbz	r3, c62e <d_type+0x6be>
    c628:	1c53      	adds	r3, r2, #1
    c62a:	60e3      	str	r3, [r4, #12]
    c62c:	7813      	ldrb	r3, [r2, #0]
    c62e:	9d01      	ldr	r5, [sp, #4]
    c630:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
    c634:	fab3 f383 	clz	r3, r3
    c638:	095b      	lsrs	r3, r3, #5
    c63a:	816b      	strh	r3, [r5, #10]
    c63c:	e537      	b.n	c0ae <d_type+0x13e>
    c63e:	2300      	movs	r3, #0
    c640:	9301      	str	r3, [sp, #4]
    c642:	685b      	ldr	r3, [r3, #4]
    c644:	deff      	udf	#255	; 0xff
    c646:	2500      	movs	r5, #0
    c648:	3101      	adds	r1, #1
    c64a:	60e1      	str	r1, [r4, #12]
    c64c:	4620      	mov	r0, r4
    c64e:	f7ff fc8f 	bl	bf70 <d_type>
    c652:	462a      	mov	r2, r5
    c654:	4603      	mov	r3, r0
    c656:	212a      	movs	r1, #42	; 0x2a
    c658:	4620      	mov	r0, r4
    c65a:	f7fe f9fb 	bl	aa54 <d_make_comp>
    c65e:	4605      	mov	r5, r0
    c660:	e620      	b.n	c2a4 <d_type+0x334>
    c662:	2301      	movs	r3, #1
    c664:	6b65      	ldr	r5, [r4, #52]	; 0x34
    c666:	6363      	str	r3, [r4, #52]	; 0x34
    c668:	4620      	mov	r0, r4
    c66a:	f7ff f85d 	bl	b728 <d_expression_1>
    c66e:	6365      	str	r5, [r4, #52]	; 0x34
    c670:	4605      	mov	r5, r0
    c672:	2800      	cmp	r0, #0
    c674:	f43f aec4 	beq.w	c400 <d_type+0x490>
    c678:	68e3      	ldr	r3, [r4, #12]
    c67a:	e6bd      	b.n	c3f8 <d_type+0x488>
    c67c:	4620      	mov	r0, r4
    c67e:	f7ff fabb 	bl	bbf8 <d_name>
    c682:	4605      	mov	r5, r0
    c684:	9001      	str	r0, [sp, #4]
    c686:	2800      	cmp	r0, #0
    c688:	f43f ad10 	beq.w	c0ac <d_type+0x13c>
    c68c:	7803      	ldrb	r3, [r0, #0]
    c68e:	2b18      	cmp	r3, #24
    c690:	f47f adb6 	bne.w	c200 <d_type+0x290>
    c694:	e50b      	b.n	c0ae <d_type+0x13e>
    c696:	4620      	mov	r0, r4
    c698:	f7ff faa4 	bl	bbe4 <d_template_args>
    c69c:	462a      	mov	r2, r5
    c69e:	4603      	mov	r3, r0
    c6a0:	2104      	movs	r1, #4
    c6a2:	4620      	mov	r0, r4
    c6a4:	f7fe f9d6 	bl	aa54 <d_make_comp>
    c6a8:	9001      	str	r0, [sp, #4]
    c6aa:	e676      	b.n	c39a <d_type+0x42a>
    c6ac:	4620      	mov	r0, r4
    c6ae:	f8d4 9014 	ldr.w	r9, [r4, #20]
    c6b2:	f8d4 8020 	ldr.w	r8, [r4, #32]
    c6b6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    c6b8:	6b25      	ldr	r5, [r4, #48]	; 0x30
    c6ba:	f7ff fa93 	bl	bbe4 <d_template_args>
    c6be:	68e2      	ldr	r2, [r4, #12]
    c6c0:	7812      	ldrb	r2, [r2, #0]
    c6c2:	2a49      	cmp	r2, #73	; 0x49
    c6c4:	d00b      	beq.n	c6de <d_type+0x76e>
    c6c6:	6325      	str	r5, [r4, #48]	; 0x30
    c6c8:	60e6      	str	r6, [r4, #12]
    c6ca:	f8c4 9014 	str.w	r9, [r4, #20]
    c6ce:	f8c4 8020 	str.w	r8, [r4, #32]
    c6d2:	62a7      	str	r7, [r4, #40]	; 0x28
    c6d4:	9d01      	ldr	r5, [sp, #4]
    c6d6:	e590      	b.n	c1fa <d_type+0x28a>
    c6d8:	2300      	movs	r3, #0
    c6da:	701b      	strb	r3, [r3, #0]
    c6dc:	deff      	udf	#255	; 0xff
    c6de:	9b01      	ldr	r3, [sp, #4]
    c6e0:	2b00      	cmp	r3, #0
    c6e2:	f43f ace3 	beq.w	c0ac <d_type+0x13c>
    c6e6:	6a22      	ldr	r2, [r4, #32]
    c6e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c6ea:	428a      	cmp	r2, r1
    c6ec:	f6bf acde 	bge.w	c0ac <d_type+0x13c>
    c6f0:	69e5      	ldr	r5, [r4, #28]
    c6f2:	1c51      	adds	r1, r2, #1
    c6f4:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    c6f8:	9a01      	ldr	r2, [sp, #4]
    c6fa:	6221      	str	r1, [r4, #32]
    c6fc:	4603      	mov	r3, r0
    c6fe:	e60a      	b.n	c316 <d_type+0x3a6>
    c700:	f104 000c 	add.w	r0, r4, #12
    c704:	f7fe faf6 	bl	acf4 <d_number.isra.0>
    c708:	9d01      	ldr	r5, [sp, #4]
    c70a:	e77d      	b.n	c608 <d_type+0x698>
    c70c:	3203      	adds	r2, #3
    c70e:	2301      	movs	r3, #1
    c710:	6b46      	ldr	r6, [r0, #52]	; 0x34
    c712:	60c2      	str	r2, [r0, #12]
    c714:	6343      	str	r3, [r0, #52]	; 0x34
    c716:	f7ff f807 	bl	b728 <d_expression_1>
    c71a:	6366      	str	r6, [r4, #52]	; 0x34
    c71c:	4605      	mov	r5, r0
    c71e:	e678      	b.n	c412 <d_type+0x4a2>
    c720:	4619      	mov	r1, r3
    c722:	e791      	b.n	c648 <d_type+0x6d8>
    c724:	00022784 	.word	0x00022784
    c728:	0002275c 	.word	0x0002275c
    c72c:	00022720 	.word	0x00022720
    c730:	00022748 	.word	0x00022748
    c734:	00022734 	.word	0x00022734
    c738:	00022c40 	.word	0x00022c40
    c73c:	00022c38 	.word	0x00022c38

0000c740 <d_operator_name>:
    c740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c742:	68c3      	ldr	r3, [r0, #12]
    c744:	781e      	ldrb	r6, [r3, #0]
    c746:	4684      	mov	ip, r0
    c748:	b326      	cbz	r6, c794 <d_operator_name+0x54>
    c74a:	1c5a      	adds	r2, r3, #1
    c74c:	60c2      	str	r2, [r0, #12]
    c74e:	785a      	ldrb	r2, [r3, #1]
    c750:	781e      	ldrb	r6, [r3, #0]
    c752:	2a00      	cmp	r2, #0
    c754:	d058      	beq.n	c808 <d_operator_name+0xc8>
    c756:	1c9a      	adds	r2, r3, #2
    c758:	60c2      	str	r2, [r0, #12]
    c75a:	2e76      	cmp	r6, #118	; 0x76
    c75c:	4604      	mov	r4, r0
    c75e:	f893 e001 	ldrb.w	lr, [r3, #1]
    c762:	d043      	beq.n	c7ec <d_operator_name+0xac>
    c764:	2e63      	cmp	r6, #99	; 0x63
    c766:	d116      	bne.n	c796 <d_operator_name+0x56>
    c768:	f1be 0f76 	cmp.w	lr, #118	; 0x76
    c76c:	d113      	bne.n	c796 <d_operator_name+0x56>
    c76e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    c770:	6b85      	ldr	r5, [r0, #56]	; 0x38
    c772:	fab3 f383 	clz	r3, r3
    c776:	095b      	lsrs	r3, r3, #5
    c778:	6383      	str	r3, [r0, #56]	; 0x38
    c77a:	f7ff fbf9 	bl	bf70 <d_type>
    c77e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    c780:	4602      	mov	r2, r0
    c782:	2b00      	cmp	r3, #0
    c784:	d052      	beq.n	c82c <d_operator_name+0xec>
    c786:	2300      	movs	r3, #0
    c788:	2134      	movs	r1, #52	; 0x34
    c78a:	4620      	mov	r0, r4
    c78c:	f7fe f962 	bl	aa54 <d_make_comp>
    c790:	63a5      	str	r5, [r4, #56]	; 0x38
    c792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c794:	46b6      	mov	lr, r6
    c796:	4c28      	ldr	r4, [pc, #160]	; (c838 <d_operator_name+0xf8>)
    c798:	2043      	movs	r0, #67	; 0x43
    c79a:	2200      	movs	r2, #0
    c79c:	e004      	b.n	c7a8 <d_operator_name+0x68>
    c79e:	bf94      	ite	ls
    c7a0:	1c5a      	addls	r2, r3, #1
    c7a2:	4618      	movhi	r0, r3
    c7a4:	4282      	cmp	r2, r0
    c7a6:	d02d      	beq.n	c804 <d_operator_name+0xc4>
    c7a8:	1a83      	subs	r3, r0, r2
    c7aa:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    c7ae:	eb02 0363 	add.w	r3, r2, r3, asr #1
    c7b2:	0119      	lsls	r1, r3, #4
    c7b4:	1867      	adds	r7, r4, r1
    c7b6:	5861      	ldr	r1, [r4, r1]
    c7b8:	780d      	ldrb	r5, [r1, #0]
    c7ba:	42b5      	cmp	r5, r6
    c7bc:	d1ef      	bne.n	c79e <d_operator_name+0x5e>
    c7be:	7849      	ldrb	r1, [r1, #1]
    c7c0:	4571      	cmp	r1, lr
    c7c2:	d1ec      	bne.n	c79e <d_operator_name+0x5e>
    c7c4:	f8dc 3014 	ldr.w	r3, [ip, #20]
    c7c8:	f8dc 2018 	ldr.w	r2, [ip, #24]
    c7cc:	4293      	cmp	r3, r2
    c7ce:	da19      	bge.n	c804 <d_operator_name+0xc4>
    c7d0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    c7d4:	f8dc 1010 	ldr.w	r1, [ip, #16]
    c7d8:	0092      	lsls	r2, r2, #2
    c7da:	3301      	adds	r3, #1
    c7dc:	1888      	adds	r0, r1, r2
    c7de:	f8cc 3014 	str.w	r3, [ip, #20]
    c7e2:	d013      	beq.n	c80c <d_operator_name+0xcc>
    c7e4:	2331      	movs	r3, #49	; 0x31
    c7e6:	548b      	strb	r3, [r1, r2]
    c7e8:	6047      	str	r7, [r0, #4]
    c7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c7ec:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
    c7f0:	b2eb      	uxtb	r3, r5
    c7f2:	2b09      	cmp	r3, #9
    c7f4:	d8cf      	bhi.n	c796 <d_operator_name+0x56>
    c7f6:	f7fe fafd 	bl	adf4 <d_source_name>
    c7fa:	6963      	ldr	r3, [r4, #20]
    c7fc:	69a2      	ldr	r2, [r4, #24]
    c7fe:	4293      	cmp	r3, r2
    c800:	4601      	mov	r1, r0
    c802:	db04      	blt.n	c80e <d_operator_name+0xce>
    c804:	2000      	movs	r0, #0
    c806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c808:	4696      	mov	lr, r2
    c80a:	e7c4      	b.n	c796 <d_operator_name+0x56>
    c80c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c80e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    c812:	6926      	ldr	r6, [r4, #16]
    c814:	0092      	lsls	r2, r2, #2
    c816:	3301      	adds	r3, #1
    c818:	18b0      	adds	r0, r6, r2
    c81a:	6163      	str	r3, [r4, #20]
    c81c:	d0f2      	beq.n	c804 <d_operator_name+0xc4>
    c81e:	2900      	cmp	r1, #0
    c820:	d0f0      	beq.n	c804 <d_operator_name+0xc4>
    c822:	2332      	movs	r3, #50	; 0x32
    c824:	54b3      	strb	r3, [r6, r2]
    c826:	6045      	str	r5, [r0, #4]
    c828:	6081      	str	r1, [r0, #8]
    c82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c82c:	2133      	movs	r1, #51	; 0x33
    c82e:	4620      	mov	r0, r4
    c830:	f7fe f910 	bl	aa54 <d_make_comp>
    c834:	e7ac      	b.n	c790 <d_operator_name+0x50>
    c836:	bf00      	nop
    c838:	000227ac 	.word	0x000227ac

0000c83c <d_parmlist>:
    c83c:	b530      	push	{r4, r5, lr}
    c83e:	68c2      	ldr	r2, [r0, #12]
    c840:	b083      	sub	sp, #12
    c842:	2300      	movs	r3, #0
    c844:	9301      	str	r3, [sp, #4]
    c846:	7813      	ldrb	r3, [r2, #0]
    c848:	b343      	cbz	r3, c89c <d_parmlist+0x60>
    c84a:	2b45      	cmp	r3, #69	; 0x45
    c84c:	d026      	beq.n	c89c <d_parmlist+0x60>
    c84e:	2b2e      	cmp	r3, #46	; 0x2e
    c850:	d024      	beq.n	c89c <d_parmlist+0x60>
    c852:	4604      	mov	r4, r0
    c854:	ad01      	add	r5, sp, #4
    c856:	e015      	b.n	c884 <d_parmlist+0x48>
    c858:	2b4f      	cmp	r3, #79	; 0x4f
    c85a:	d016      	beq.n	c88a <d_parmlist+0x4e>
    c85c:	f7ff fb88 	bl	bf70 <d_type>
    c860:	2300      	movs	r3, #0
    c862:	4602      	mov	r2, r0
    c864:	212e      	movs	r1, #46	; 0x2e
    c866:	b1c8      	cbz	r0, c89c <d_parmlist+0x60>
    c868:	4620      	mov	r0, r4
    c86a:	f7fe f8f3 	bl	aa54 <d_make_comp>
    c86e:	6028      	str	r0, [r5, #0]
    c870:	b1a0      	cbz	r0, c89c <d_parmlist+0x60>
    c872:	68e2      	ldr	r2, [r4, #12]
    c874:	7813      	ldrb	r3, [r2, #0]
    c876:	f100 0508 	add.w	r5, r0, #8
    c87a:	b14b      	cbz	r3, c890 <d_parmlist+0x54>
    c87c:	2b45      	cmp	r3, #69	; 0x45
    c87e:	d007      	beq.n	c890 <d_parmlist+0x54>
    c880:	2b2e      	cmp	r3, #46	; 0x2e
    c882:	d005      	beq.n	c890 <d_parmlist+0x54>
    c884:	2b52      	cmp	r3, #82	; 0x52
    c886:	4620      	mov	r0, r4
    c888:	d1e6      	bne.n	c858 <d_parmlist+0x1c>
    c88a:	7853      	ldrb	r3, [r2, #1]
    c88c:	2b45      	cmp	r3, #69	; 0x45
    c88e:	d1e5      	bne.n	c85c <d_parmlist+0x20>
    c890:	9801      	ldr	r0, [sp, #4]
    c892:	b118      	cbz	r0, c89c <d_parmlist+0x60>
    c894:	6883      	ldr	r3, [r0, #8]
    c896:	b123      	cbz	r3, c8a2 <d_parmlist+0x66>
    c898:	b003      	add	sp, #12
    c89a:	bd30      	pop	{r4, r5, pc}
    c89c:	2000      	movs	r0, #0
    c89e:	b003      	add	sp, #12
    c8a0:	bd30      	pop	{r4, r5, pc}
    c8a2:	6842      	ldr	r2, [r0, #4]
    c8a4:	7811      	ldrb	r1, [r2, #0]
    c8a6:	2927      	cmp	r1, #39	; 0x27
    c8a8:	d1f6      	bne.n	c898 <d_parmlist+0x5c>
    c8aa:	6852      	ldr	r2, [r2, #4]
    c8ac:	7c11      	ldrb	r1, [r2, #16]
    c8ae:	2909      	cmp	r1, #9
    c8b0:	d1f2      	bne.n	c898 <d_parmlist+0x5c>
    c8b2:	6851      	ldr	r1, [r2, #4]
    c8b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
    c8b6:	1a52      	subs	r2, r2, r1
    c8b8:	6322      	str	r2, [r4, #48]	; 0x30
    c8ba:	6043      	str	r3, [r0, #4]
    c8bc:	e7ec      	b.n	c898 <d_parmlist+0x5c>
    c8be:	bf00      	nop

0000c8c0 <d_unqualified_name>:
    c8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c8c2:	68c1      	ldr	r1, [r0, #12]
    c8c4:	780b      	ldrb	r3, [r1, #0]
    c8c6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    c8ca:	2a09      	cmp	r2, #9
    c8cc:	4604      	mov	r4, r0
    c8ce:	d920      	bls.n	c912 <d_unqualified_name+0x52>
    c8d0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    c8d4:	2a19      	cmp	r2, #25
    c8d6:	d925      	bls.n	c924 <d_unqualified_name+0x64>
    c8d8:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
    c8dc:	2a01      	cmp	r2, #1
    c8de:	d92c      	bls.n	c93a <d_unqualified_name+0x7a>
    c8e0:	2b4c      	cmp	r3, #76	; 0x4c
    c8e2:	f000 8088 	beq.w	c9f6 <d_unqualified_name+0x136>
    c8e6:	2b55      	cmp	r3, #85	; 0x55
    c8e8:	d133      	bne.n	c952 <d_unqualified_name+0x92>
    c8ea:	784b      	ldrb	r3, [r1, #1]
    c8ec:	2b6c      	cmp	r3, #108	; 0x6c
    c8ee:	d033      	beq.n	c958 <d_unqualified_name+0x98>
    c8f0:	2b74      	cmp	r3, #116	; 0x74
    c8f2:	d12e      	bne.n	c952 <d_unqualified_name+0x92>
    c8f4:	1c4b      	adds	r3, r1, #1
    c8f6:	60c3      	str	r3, [r0, #12]
    c8f8:	784b      	ldrb	r3, [r1, #1]
    c8fa:	2b74      	cmp	r3, #116	; 0x74
    c8fc:	d05a      	beq.n	c9b4 <d_unqualified_name+0xf4>
    c8fe:	2b42      	cmp	r3, #66	; 0x42
    c900:	f04f 0500 	mov.w	r5, #0
    c904:	d10c      	bne.n	c920 <d_unqualified_name+0x60>
    c906:	4629      	mov	r1, r5
    c908:	4620      	mov	r0, r4
    c90a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c90e:	f7fe bacd 	b.w	aeac <d_abi_tags>
    c912:	f7fe fa6f 	bl	adf4 <d_source_name>
    c916:	68e3      	ldr	r3, [r4, #12]
    c918:	781b      	ldrb	r3, [r3, #0]
    c91a:	4605      	mov	r5, r0
    c91c:	2b42      	cmp	r3, #66	; 0x42
    c91e:	d0f2      	beq.n	c906 <d_unqualified_name+0x46>
    c920:	4628      	mov	r0, r5
    c922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c924:	f7ff ff0c 	bl	c740 <d_operator_name>
    c928:	4605      	mov	r5, r0
    c92a:	b118      	cbz	r0, c934 <d_unqualified_name+0x74>
    c92c:	7803      	ldrb	r3, [r0, #0]
    c92e:	2b31      	cmp	r3, #49	; 0x31
    c930:	f000 80b2 	beq.w	ca98 <d_unqualified_name+0x1d8>
    c934:	68e3      	ldr	r3, [r4, #12]
    c936:	781b      	ldrb	r3, [r3, #0]
    c938:	e7f0      	b.n	c91c <d_unqualified_name+0x5c>
    c93a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
    c93c:	b125      	cbz	r5, c948 <d_unqualified_name+0x88>
    c93e:	782a      	ldrb	r2, [r5, #0]
    c940:	2a00      	cmp	r2, #0
    c942:	d06c      	beq.n	ca1e <d_unqualified_name+0x15e>
    c944:	2a18      	cmp	r2, #24
    c946:	d06a      	beq.n	ca1e <d_unqualified_name+0x15e>
    c948:	2b43      	cmp	r3, #67	; 0x43
    c94a:	f000 80bf 	beq.w	cacc <d_unqualified_name+0x20c>
    c94e:	2b44      	cmp	r3, #68	; 0x44
    c950:	d06f      	beq.n	ca32 <d_unqualified_name+0x172>
    c952:	2500      	movs	r5, #0
    c954:	4628      	mov	r0, r5
    c956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c958:	1c4b      	adds	r3, r1, #1
    c95a:	60c3      	str	r3, [r0, #12]
    c95c:	784b      	ldrb	r3, [r1, #1]
    c95e:	2b6c      	cmp	r3, #108	; 0x6c
    c960:	d1cd      	bne.n	c8fe <d_unqualified_name+0x3e>
    c962:	3102      	adds	r1, #2
    c964:	60c1      	str	r1, [r0, #12]
    c966:	f7ff ff69 	bl	c83c <d_parmlist>
    c96a:	4606      	mov	r6, r0
    c96c:	b1f0      	cbz	r0, c9ac <d_unqualified_name+0xec>
    c96e:	68e2      	ldr	r2, [r4, #12]
    c970:	7813      	ldrb	r3, [r2, #0]
    c972:	2b45      	cmp	r3, #69	; 0x45
    c974:	d1c3      	bne.n	c8fe <d_unqualified_name+0x3e>
    c976:	3201      	adds	r2, #1
    c978:	60e2      	str	r2, [r4, #12]
    c97a:	4620      	mov	r0, r4
    c97c:	f7fe f9fc 	bl	ad78 <d_compact_number>
    c980:	2800      	cmp	r0, #0
    c982:	db13      	blt.n	c9ac <d_unqualified_name+0xec>
    c984:	6963      	ldr	r3, [r4, #20]
    c986:	69a2      	ldr	r2, [r4, #24]
    c988:	4293      	cmp	r3, r2
    c98a:	da0f      	bge.n	c9ac <d_unqualified_name+0xec>
    c98c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    c990:	6921      	ldr	r1, [r4, #16]
    c992:	0092      	lsls	r2, r2, #2
    c994:	3301      	adds	r3, #1
    c996:	188d      	adds	r5, r1, r2
    c998:	6163      	str	r3, [r4, #20]
    c99a:	d0cb      	beq.n	c934 <d_unqualified_name+0x74>
    c99c:	2345      	movs	r3, #69	; 0x45
    c99e:	548b      	strb	r3, [r1, r2]
    c9a0:	606e      	str	r6, [r5, #4]
    c9a2:	60a8      	str	r0, [r5, #8]
    c9a4:	6a23      	ldr	r3, [r4, #32]
    c9a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    c9a8:	4293      	cmp	r3, r2
    c9aa:	db1c      	blt.n	c9e6 <d_unqualified_name+0x126>
    c9ac:	68e3      	ldr	r3, [r4, #12]
    c9ae:	2500      	movs	r5, #0
    c9b0:	781b      	ldrb	r3, [r3, #0]
    c9b2:	e7b3      	b.n	c91c <d_unqualified_name+0x5c>
    c9b4:	3102      	adds	r1, #2
    c9b6:	60c1      	str	r1, [r0, #12]
    c9b8:	f7fe f9de 	bl	ad78 <d_compact_number>
    c9bc:	2800      	cmp	r0, #0
    c9be:	dbf5      	blt.n	c9ac <d_unqualified_name+0xec>
    c9c0:	6963      	ldr	r3, [r4, #20]
    c9c2:	69a2      	ldr	r2, [r4, #24]
    c9c4:	4293      	cmp	r3, r2
    c9c6:	daf1      	bge.n	c9ac <d_unqualified_name+0xec>
    c9c8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    c9cc:	6921      	ldr	r1, [r4, #16]
    c9ce:	0092      	lsls	r2, r2, #2
    c9d0:	3301      	adds	r3, #1
    c9d2:	188d      	adds	r5, r1, r2
    c9d4:	6163      	str	r3, [r4, #20]
    c9d6:	d0ad      	beq.n	c934 <d_unqualified_name+0x74>
    c9d8:	2347      	movs	r3, #71	; 0x47
    c9da:	548b      	strb	r3, [r1, r2]
    c9dc:	6068      	str	r0, [r5, #4]
    c9de:	6a23      	ldr	r3, [r4, #32]
    c9e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    c9e2:	4293      	cmp	r3, r2
    c9e4:	dae2      	bge.n	c9ac <d_unqualified_name+0xec>
    c9e6:	69e1      	ldr	r1, [r4, #28]
    c9e8:	68e2      	ldr	r2, [r4, #12]
    c9ea:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
    c9ee:	3301      	adds	r3, #1
    c9f0:	6223      	str	r3, [r4, #32]
    c9f2:	7813      	ldrb	r3, [r2, #0]
    c9f4:	e792      	b.n	c91c <d_unqualified_name+0x5c>
    c9f6:	3101      	adds	r1, #1
    c9f8:	60c1      	str	r1, [r0, #12]
    c9fa:	f7fe f9fb 	bl	adf4 <d_source_name>
    c9fe:	4605      	mov	r5, r0
    ca00:	2800      	cmp	r0, #0
    ca02:	d0a6      	beq.n	c952 <d_unqualified_name+0x92>
    ca04:	68e2      	ldr	r2, [r4, #12]
    ca06:	7813      	ldrb	r3, [r2, #0]
    ca08:	2b5f      	cmp	r3, #95	; 0x5f
    ca0a:	d187      	bne.n	c91c <d_unqualified_name+0x5c>
    ca0c:	4620      	mov	r0, r4
    ca0e:	3201      	adds	r2, #1
    ca10:	f840 2f0c 	str.w	r2, [r0, #12]!
    ca14:	f7fe f96e 	bl	acf4 <d_number.isra.0>
    ca18:	2800      	cmp	r0, #0
    ca1a:	da8b      	bge.n	c934 <d_unqualified_name+0x74>
    ca1c:	e799      	b.n	c952 <d_unqualified_name+0x92>
    ca1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ca20:	68aa      	ldr	r2, [r5, #8]
    ca22:	4413      	add	r3, r2
    ca24:	6323      	str	r3, [r4, #48]	; 0x30
    ca26:	780b      	ldrb	r3, [r1, #0]
    ca28:	2b43      	cmp	r3, #67	; 0x43
    ca2a:	d04f      	beq.n	cacc <d_unqualified_name+0x20c>
    ca2c:	2b44      	cmp	r3, #68	; 0x44
    ca2e:	f47f af66 	bne.w	c8fe <d_unqualified_name+0x3e>
    ca32:	784b      	ldrb	r3, [r1, #1]
    ca34:	3b30      	subs	r3, #48	; 0x30
    ca36:	2b05      	cmp	r3, #5
    ca38:	d88b      	bhi.n	c952 <d_unqualified_name+0x92>
    ca3a:	a201      	add	r2, pc, #4	; (adr r2, ca40 <d_unqualified_name+0x180>)
    ca3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ca40:	0000ca95 	.word	0x0000ca95
    ca44:	0000ca59 	.word	0x0000ca59
    ca48:	0000ca91 	.word	0x0000ca91
    ca4c:	0000c953 	.word	0x0000c953
    ca50:	0000ca8d 	.word	0x0000ca8d
    ca54:	0000ca89 	.word	0x0000ca89
    ca58:	2702      	movs	r7, #2
    ca5a:	6963      	ldr	r3, [r4, #20]
    ca5c:	69a2      	ldr	r2, [r4, #24]
    ca5e:	1c88      	adds	r0, r1, #2
    ca60:	4293      	cmp	r3, r2
    ca62:	60e0      	str	r0, [r4, #12]
    ca64:	da56      	bge.n	cb14 <d_unqualified_name+0x254>
    ca66:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    ca6a:	6920      	ldr	r0, [r4, #16]
    ca6c:	0092      	lsls	r2, r2, #2
    ca6e:	3301      	adds	r3, #1
    ca70:	1886      	adds	r6, r0, r2
    ca72:	6163      	str	r3, [r4, #20]
    ca74:	d005      	beq.n	ca82 <d_unqualified_name+0x1c2>
    ca76:	2d00      	cmp	r5, #0
    ca78:	d04f      	beq.n	cb1a <d_unqualified_name+0x25a>
    ca7a:	2308      	movs	r3, #8
    ca7c:	5483      	strb	r3, [r0, r2]
    ca7e:	7137      	strb	r7, [r6, #4]
    ca80:	60b5      	str	r5, [r6, #8]
    ca82:	788b      	ldrb	r3, [r1, #2]
    ca84:	4635      	mov	r5, r6
    ca86:	e749      	b.n	c91c <d_unqualified_name+0x5c>
    ca88:	2705      	movs	r7, #5
    ca8a:	e7e6      	b.n	ca5a <d_unqualified_name+0x19a>
    ca8c:	2704      	movs	r7, #4
    ca8e:	e7e4      	b.n	ca5a <d_unqualified_name+0x19a>
    ca90:	2703      	movs	r7, #3
    ca92:	e7e2      	b.n	ca5a <d_unqualified_name+0x19a>
    ca94:	2701      	movs	r7, #1
    ca96:	e7e0      	b.n	ca5a <d_unqualified_name+0x19a>
    ca98:	6842      	ldr	r2, [r0, #4]
    ca9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ca9c:	6896      	ldr	r6, [r2, #8]
    ca9e:	6810      	ldr	r0, [r2, #0]
    caa0:	491f      	ldr	r1, [pc, #124]	; (cb20 <d_unqualified_name+0x260>)
    caa2:	3307      	adds	r3, #7
    caa4:	4433      	add	r3, r6
    caa6:	6323      	str	r3, [r4, #48]	; 0x30
    caa8:	f008 f9ee 	bl	14e88 <strcmp>
    caac:	2800      	cmp	r0, #0
    caae:	f47f af41 	bne.w	c934 <d_unqualified_name+0x74>
    cab2:	4620      	mov	r0, r4
    cab4:	f7fe f99e 	bl	adf4 <d_source_name>
    cab8:	462a      	mov	r2, r5
    caba:	4603      	mov	r3, r0
    cabc:	2136      	movs	r1, #54	; 0x36
    cabe:	4620      	mov	r0, r4
    cac0:	f7fd ffc8 	bl	aa54 <d_make_comp>
    cac4:	68e3      	ldr	r3, [r4, #12]
    cac6:	4605      	mov	r5, r0
    cac8:	781b      	ldrb	r3, [r3, #0]
    caca:	e727      	b.n	c91c <d_unqualified_name+0x5c>
    cacc:	784b      	ldrb	r3, [r1, #1]
    cace:	3b31      	subs	r3, #49	; 0x31
    cad0:	2b04      	cmp	r3, #4
    cad2:	f63f af3e 	bhi.w	c952 <d_unqualified_name+0x92>
    cad6:	e8df f003 	tbb	[pc, r3]
    cada:	0315      	.short	0x0315
    cadc:	191b      	.short	0x191b
    cade:	17          	.byte	0x17
    cadf:	00          	.byte	0x00
    cae0:	2702      	movs	r7, #2
    cae2:	6963      	ldr	r3, [r4, #20]
    cae4:	69a2      	ldr	r2, [r4, #24]
    cae6:	1c88      	adds	r0, r1, #2
    cae8:	4293      	cmp	r3, r2
    caea:	60e0      	str	r0, [r4, #12]
    caec:	da12      	bge.n	cb14 <d_unqualified_name+0x254>
    caee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    caf2:	6920      	ldr	r0, [r4, #16]
    caf4:	0092      	lsls	r2, r2, #2
    caf6:	3301      	adds	r3, #1
    caf8:	1886      	adds	r6, r0, r2
    cafa:	6163      	str	r3, [r4, #20]
    cafc:	d0c1      	beq.n	ca82 <d_unqualified_name+0x1c2>
    cafe:	b165      	cbz	r5, cb1a <d_unqualified_name+0x25a>
    cb00:	2307      	movs	r3, #7
    cb02:	e7bb      	b.n	ca7c <d_unqualified_name+0x1bc>
    cb04:	2701      	movs	r7, #1
    cb06:	e7ec      	b.n	cae2 <d_unqualified_name+0x222>
    cb08:	2705      	movs	r7, #5
    cb0a:	e7ea      	b.n	cae2 <d_unqualified_name+0x222>
    cb0c:	2704      	movs	r7, #4
    cb0e:	e7e8      	b.n	cae2 <d_unqualified_name+0x222>
    cb10:	2703      	movs	r7, #3
    cb12:	e7e6      	b.n	cae2 <d_unqualified_name+0x222>
    cb14:	788b      	ldrb	r3, [r1, #2]
    cb16:	2500      	movs	r5, #0
    cb18:	e700      	b.n	c91c <d_unqualified_name+0x5c>
    cb1a:	788b      	ldrb	r3, [r1, #2]
    cb1c:	e6fe      	b.n	c91c <d_unqualified_name+0x5c>
    cb1e:	bf00      	nop
    cb20:	00022c50 	.word	0x00022c50

0000cb24 <d_bare_function_type>:
    cb24:	b570      	push	{r4, r5, r6, lr}
    cb26:	68c3      	ldr	r3, [r0, #12]
    cb28:	781a      	ldrb	r2, [r3, #0]
    cb2a:	2a4a      	cmp	r2, #74	; 0x4a
    cb2c:	4604      	mov	r4, r0
    cb2e:	d00d      	beq.n	cb4c <d_bare_function_type+0x28>
    cb30:	b971      	cbnz	r1, cb50 <d_bare_function_type+0x2c>
    cb32:	460d      	mov	r5, r1
    cb34:	4620      	mov	r0, r4
    cb36:	f7ff fe81 	bl	c83c <d_parmlist>
    cb3a:	b178      	cbz	r0, cb5c <d_bare_function_type+0x38>
    cb3c:	4603      	mov	r3, r0
    cb3e:	462a      	mov	r2, r5
    cb40:	4620      	mov	r0, r4
    cb42:	2129      	movs	r1, #41	; 0x29
    cb44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cb48:	f7fd bf84 	b.w	aa54 <d_make_comp>
    cb4c:	3301      	adds	r3, #1
    cb4e:	60c3      	str	r3, [r0, #12]
    cb50:	4620      	mov	r0, r4
    cb52:	f7ff fa0d 	bl	bf70 <d_type>
    cb56:	4605      	mov	r5, r0
    cb58:	2800      	cmp	r0, #0
    cb5a:	d1eb      	bne.n	cb34 <d_bare_function_type+0x10>
    cb5c:	2000      	movs	r0, #0
    cb5e:	bd70      	pop	{r4, r5, r6, pc}

0000cb60 <d_function_type>:
    cb60:	68c3      	ldr	r3, [r0, #12]
    cb62:	781a      	ldrb	r2, [r3, #0]
    cb64:	2a46      	cmp	r2, #70	; 0x46
    cb66:	d001      	beq.n	cb6c <d_function_type+0xc>
    cb68:	2000      	movs	r0, #0
    cb6a:	4770      	bx	lr
    cb6c:	b510      	push	{r4, lr}
    cb6e:	1c5a      	adds	r2, r3, #1
    cb70:	60c2      	str	r2, [r0, #12]
    cb72:	785a      	ldrb	r2, [r3, #1]
    cb74:	2a59      	cmp	r2, #89	; 0x59
    cb76:	bf04      	itt	eq
    cb78:	3302      	addeq	r3, #2
    cb7a:	60c3      	streq	r3, [r0, #12]
    cb7c:	2101      	movs	r1, #1
    cb7e:	4604      	mov	r4, r0
    cb80:	f7ff ffd0 	bl	cb24 <d_bare_function_type>
    cb84:	4601      	mov	r1, r0
    cb86:	4620      	mov	r0, r4
    cb88:	f7fe f816 	bl	abb8 <d_ref_qualifier>
    cb8c:	68e3      	ldr	r3, [r4, #12]
    cb8e:	781a      	ldrb	r2, [r3, #0]
    cb90:	2a45      	cmp	r2, #69	; 0x45
    cb92:	d001      	beq.n	cb98 <d_function_type+0x38>
    cb94:	2000      	movs	r0, #0
    cb96:	bd10      	pop	{r4, pc}
    cb98:	3301      	adds	r3, #1
    cb9a:	60e3      	str	r3, [r4, #12]
    cb9c:	bd10      	pop	{r4, pc}
    cb9e:	bf00      	nop

0000cba0 <d_encoding>:
    cba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cba4:	68c3      	ldr	r3, [r0, #12]
    cba6:	781a      	ldrb	r2, [r3, #0]
    cba8:	2a47      	cmp	r2, #71	; 0x47
    cbaa:	4605      	mov	r5, r0
    cbac:	d01f      	beq.n	cbee <d_encoding+0x4e>
    cbae:	2a54      	cmp	r2, #84	; 0x54
    cbb0:	d01d      	beq.n	cbee <d_encoding+0x4e>
    cbb2:	460e      	mov	r6, r1
    cbb4:	f7ff f820 	bl	bbf8 <d_name>
    cbb8:	4604      	mov	r4, r0
    cbba:	b310      	cbz	r0, cc02 <d_encoding+0x62>
    cbbc:	b32e      	cbz	r6, cc0a <d_encoding+0x6a>
    cbbe:	68ab      	ldr	r3, [r5, #8]
    cbc0:	07db      	lsls	r3, r3, #31
    cbc2:	d422      	bmi.n	cc0a <d_encoding+0x6a>
    cbc4:	7823      	ldrb	r3, [r4, #0]
    cbc6:	f1a3 021c 	sub.w	r2, r3, #28
    cbca:	2a04      	cmp	r2, #4
    cbcc:	d940      	bls.n	cc50 <d_encoding+0xb0>
    cbce:	2b4c      	cmp	r3, #76	; 0x4c
    cbd0:	d03e      	beq.n	cc50 <d_encoding+0xb0>
    cbd2:	2b02      	cmp	r3, #2
    cbd4:	d116      	bne.n	cc04 <d_encoding+0x64>
    cbd6:	68a3      	ldr	r3, [r4, #8]
    cbd8:	781a      	ldrb	r2, [r3, #0]
    cbda:	f1a2 011c 	sub.w	r1, r2, #28
    cbde:	2904      	cmp	r1, #4
    cbe0:	f240 8283 	bls.w	d0ea <d_encoding+0x54a>
    cbe4:	2a4c      	cmp	r2, #76	; 0x4c
    cbe6:	f000 8280 	beq.w	d0ea <d_encoding+0x54a>
    cbea:	60a3      	str	r3, [r4, #8]
    cbec:	e00a      	b.n	cc04 <d_encoding+0x64>
    cbee:	6b29      	ldr	r1, [r5, #48]	; 0x30
    cbf0:	f101 0214 	add.w	r2, r1, #20
    cbf4:	632a      	str	r2, [r5, #48]	; 0x30
    cbf6:	781a      	ldrb	r2, [r3, #0]
    cbf8:	2a54      	cmp	r2, #84	; 0x54
    cbfa:	d02b      	beq.n	cc54 <d_encoding+0xb4>
    cbfc:	2a47      	cmp	r2, #71	; 0x47
    cbfe:	f000 809f 	beq.w	cd40 <d_encoding+0x1a0>
    cc02:	2400      	movs	r4, #0
    cc04:	4620      	mov	r0, r4
    cc06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc0a:	68eb      	ldr	r3, [r5, #12]
    cc0c:	781b      	ldrb	r3, [r3, #0]
    cc0e:	2b00      	cmp	r3, #0
    cc10:	d0f8      	beq.n	cc04 <d_encoding+0x64>
    cc12:	2b45      	cmp	r3, #69	; 0x45
    cc14:	d0f6      	beq.n	cc04 <d_encoding+0x64>
    cc16:	4621      	mov	r1, r4
    cc18:	780a      	ldrb	r2, [r1, #0]
    cc1a:	2a20      	cmp	r2, #32
    cc1c:	f200 8113 	bhi.w	ce46 <d_encoding+0x2a6>
    cc20:	2a1c      	cmp	r2, #28
    cc22:	f080 8112 	bcs.w	ce4a <d_encoding+0x2aa>
    cc26:	2a04      	cmp	r2, #4
    cc28:	f040 8101 	bne.w	ce2e <d_encoding+0x28e>
    cc2c:	684a      	ldr	r2, [r1, #4]
    cc2e:	b16a      	cbz	r2, cc4c <d_encoding+0xac>
    cc30:	7813      	ldrb	r3, [r2, #0]
    cc32:	2b08      	cmp	r3, #8
    cc34:	f103 31ff 	add.w	r1, r3, #4294967295
    cc38:	f200 80f6 	bhi.w	ce28 <d_encoding+0x288>
    cc3c:	2b07      	cmp	r3, #7
    cc3e:	f080 80f6 	bcs.w	ce2e <d_encoding+0x28e>
    cc42:	2901      	cmp	r1, #1
    cc44:	d802      	bhi.n	cc4c <d_encoding+0xac>
    cc46:	6892      	ldr	r2, [r2, #8]
    cc48:	2a00      	cmp	r2, #0
    cc4a:	d1f1      	bne.n	cc30 <d_encoding+0x90>
    cc4c:	2101      	movs	r1, #1
    cc4e:	e0ef      	b.n	ce30 <d_encoding+0x290>
    cc50:	6864      	ldr	r4, [r4, #4]
    cc52:	e7b7      	b.n	cbc4 <d_encoding+0x24>
    cc54:	1c5a      	adds	r2, r3, #1
    cc56:	60ea      	str	r2, [r5, #12]
    cc58:	785a      	ldrb	r2, [r3, #1]
    cc5a:	2a00      	cmp	r2, #0
    cc5c:	d0d1      	beq.n	cc02 <d_encoding+0x62>
    cc5e:	1c9a      	adds	r2, r3, #2
    cc60:	60ea      	str	r2, [r5, #12]
    cc62:	785b      	ldrb	r3, [r3, #1]
    cc64:	3b43      	subs	r3, #67	; 0x43
    cc66:	2b33      	cmp	r3, #51	; 0x33
    cc68:	d8cb      	bhi.n	cc02 <d_encoding+0x62>
    cc6a:	a201      	add	r2, pc, #4	; (adr r2, cc70 <d_encoding+0xd0>)
    cc6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cc70:	0000d0ab 	.word	0x0000d0ab
    cc74:	0000cc03 	.word	0x0000cc03
    cc78:	0000cc03 	.word	0x0000cc03
    cc7c:	0000d095 	.word	0x0000d095
    cc80:	0000cc03 	.word	0x0000cc03
    cc84:	0000d07f 	.word	0x0000d07f
    cc88:	0000d069 	.word	0x0000d069
    cc8c:	0000d053 	.word	0x0000d053
    cc90:	0000cc03 	.word	0x0000cc03
    cc94:	0000cc03 	.word	0x0000cc03
    cc98:	0000cc03 	.word	0x0000cc03
    cc9c:	0000cc03 	.word	0x0000cc03
    cca0:	0000cc03 	.word	0x0000cc03
    cca4:	0000cc03 	.word	0x0000cc03
    cca8:	0000cc03 	.word	0x0000cc03
    ccac:	0000cc03 	.word	0x0000cc03
    ccb0:	0000d03d 	.word	0x0000d03d
    ccb4:	0000d023 	.word	0x0000d023
    ccb8:	0000cc03 	.word	0x0000cc03
    ccbc:	0000d009 	.word	0x0000d009
    ccc0:	0000cff3 	.word	0x0000cff3
    ccc4:	0000cc03 	.word	0x0000cc03
    ccc8:	0000cc03 	.word	0x0000cc03
    cccc:	0000cc03 	.word	0x0000cc03
    ccd0:	0000cc03 	.word	0x0000cc03
    ccd4:	0000cc03 	.word	0x0000cc03
    ccd8:	0000cc03 	.word	0x0000cc03
    ccdc:	0000cc03 	.word	0x0000cc03
    cce0:	0000cc03 	.word	0x0000cc03
    cce4:	0000cc03 	.word	0x0000cc03
    cce8:	0000cc03 	.word	0x0000cc03
    ccec:	0000cc03 	.word	0x0000cc03
    ccf0:	0000cfbf 	.word	0x0000cfbf
    ccf4:	0000cc03 	.word	0x0000cc03
    ccf8:	0000cc03 	.word	0x0000cc03
    ccfc:	0000cc03 	.word	0x0000cc03
    cd00:	0000cc03 	.word	0x0000cc03
    cd04:	0000cf99 	.word	0x0000cf99
    cd08:	0000cc03 	.word	0x0000cc03
    cd0c:	0000cc03 	.word	0x0000cc03
    cd10:	0000cc03 	.word	0x0000cc03
    cd14:	0000cc03 	.word	0x0000cc03
    cd18:	0000cc03 	.word	0x0000cc03
    cd1c:	0000cc03 	.word	0x0000cc03
    cd20:	0000cc03 	.word	0x0000cc03
    cd24:	0000cc03 	.word	0x0000cc03
    cd28:	0000cc03 	.word	0x0000cc03
    cd2c:	0000cc03 	.word	0x0000cc03
    cd30:	0000cc03 	.word	0x0000cc03
    cd34:	0000cc03 	.word	0x0000cc03
    cd38:	0000cc03 	.word	0x0000cc03
    cd3c:	0000cf73 	.word	0x0000cf73
    cd40:	1c5a      	adds	r2, r3, #1
    cd42:	60ea      	str	r2, [r5, #12]
    cd44:	785a      	ldrb	r2, [r3, #1]
    cd46:	2a00      	cmp	r2, #0
    cd48:	f43f af5b 	beq.w	cc02 <d_encoding+0x62>
    cd4c:	1c9a      	adds	r2, r3, #2
    cd4e:	60ea      	str	r2, [r5, #12]
    cd50:	785a      	ldrb	r2, [r3, #1]
    cd52:	3a41      	subs	r2, #65	; 0x41
    cd54:	2a31      	cmp	r2, #49	; 0x31
    cd56:	f63f af54 	bhi.w	cc02 <d_encoding+0x62>
    cd5a:	a101      	add	r1, pc, #4	; (adr r1, cd60 <d_encoding+0x1c0>)
    cd5c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    cd60:	0000ce55 	.word	0x0000ce55
    cd64:	0000cc03 	.word	0x0000cc03
    cd68:	0000cc03 	.word	0x0000cc03
    cd6c:	0000cc03 	.word	0x0000cc03
    cd70:	0000cc03 	.word	0x0000cc03
    cd74:	0000cc03 	.word	0x0000cc03
    cd78:	0000cc03 	.word	0x0000cc03
    cd7c:	0000cc03 	.word	0x0000cc03
    cd80:	0000cc03 	.word	0x0000cc03
    cd84:	0000cc03 	.word	0x0000cc03
    cd88:	0000cc03 	.word	0x0000cc03
    cd8c:	0000cc03 	.word	0x0000cc03
    cd90:	0000cc03 	.word	0x0000cc03
    cd94:	0000cc03 	.word	0x0000cc03
    cd98:	0000cc03 	.word	0x0000cc03
    cd9c:	0000cc03 	.word	0x0000cc03
    cda0:	0000cc03 	.word	0x0000cc03
    cda4:	0000cf55 	.word	0x0000cf55
    cda8:	0000cc03 	.word	0x0000cc03
    cdac:	0000cf29 	.word	0x0000cf29
    cdb0:	0000cc03 	.word	0x0000cc03
    cdb4:	0000cf13 	.word	0x0000cf13
    cdb8:	0000cc03 	.word	0x0000cc03
    cdbc:	0000cc03 	.word	0x0000cc03
    cdc0:	0000cc03 	.word	0x0000cc03
    cdc4:	0000cc03 	.word	0x0000cc03
    cdc8:	0000cc03 	.word	0x0000cc03
    cdcc:	0000cc03 	.word	0x0000cc03
    cdd0:	0000cc03 	.word	0x0000cc03
    cdd4:	0000cc03 	.word	0x0000cc03
    cdd8:	0000cc03 	.word	0x0000cc03
    cddc:	0000cc03 	.word	0x0000cc03
    cde0:	0000cc03 	.word	0x0000cc03
    cde4:	0000cc03 	.word	0x0000cc03
    cde8:	0000cc03 	.word	0x0000cc03
    cdec:	0000cc03 	.word	0x0000cc03
    cdf0:	0000cc03 	.word	0x0000cc03
    cdf4:	0000cc03 	.word	0x0000cc03
    cdf8:	0000cc03 	.word	0x0000cc03
    cdfc:	0000cc03 	.word	0x0000cc03
    ce00:	0000cc03 	.word	0x0000cc03
    ce04:	0000cc03 	.word	0x0000cc03
    ce08:	0000cc03 	.word	0x0000cc03
    ce0c:	0000cc03 	.word	0x0000cc03
    ce10:	0000cc03 	.word	0x0000cc03
    ce14:	0000cc03 	.word	0x0000cc03
    ce18:	0000cc03 	.word	0x0000cc03
    ce1c:	0000cc03 	.word	0x0000cc03
    ce20:	0000cc03 	.word	0x0000cc03
    ce24:	0000ce6d 	.word	0x0000ce6d
    ce28:	2b34      	cmp	r3, #52	; 0x34
    ce2a:	f47f af0f 	bne.w	cc4c <d_encoding+0xac>
    ce2e:	2100      	movs	r1, #0
    ce30:	4628      	mov	r0, r5
    ce32:	f7ff fe77 	bl	cb24 <d_bare_function_type>
    ce36:	4622      	mov	r2, r4
    ce38:	4603      	mov	r3, r0
    ce3a:	2103      	movs	r1, #3
    ce3c:	4628      	mov	r0, r5
    ce3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ce42:	f7fd be07 	b.w	aa54 <d_make_comp>
    ce46:	2a4c      	cmp	r2, #76	; 0x4c
    ce48:	d1f1      	bne.n	ce2e <d_encoding+0x28e>
    ce4a:	6849      	ldr	r1, [r1, #4]
    ce4c:	2900      	cmp	r1, #0
    ce4e:	f47f aee3 	bne.w	cc18 <d_encoding+0x78>
    ce52:	e7ed      	b.n	ce30 <d_encoding+0x290>
    ce54:	2100      	movs	r1, #0
    ce56:	4628      	mov	r0, r5
    ce58:	f7ff fea2 	bl	cba0 <d_encoding>
    ce5c:	2300      	movs	r3, #0
    ce5e:	4602      	mov	r2, r0
    ce60:	2117      	movs	r1, #23
    ce62:	4628      	mov	r0, r5
    ce64:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ce68:	f7fd bdf4 	b.w	aa54 <d_make_comp>
    ce6c:	f105 000c 	add.w	r0, r5, #12
    ce70:	f7fd ff40 	bl	acf4 <d_number.isra.0>
    ce74:	2801      	cmp	r0, #1
    ce76:	f77f aec4 	ble.w	cc02 <d_encoding+0x62>
    ce7a:	68eb      	ldr	r3, [r5, #12]
    ce7c:	781a      	ldrb	r2, [r3, #0]
    ce7e:	2a00      	cmp	r2, #0
    ce80:	f43f aebf 	beq.w	cc02 <d_encoding+0x62>
    ce84:	1c5f      	adds	r7, r3, #1
    ce86:	60ef      	str	r7, [r5, #12]
    ce88:	781b      	ldrb	r3, [r3, #0]
    ce8a:	2b5f      	cmp	r3, #95	; 0x5f
    ce8c:	f47f aeb9 	bne.w	cc02 <d_encoding+0x62>
    ce90:	2200      	movs	r2, #0
    ce92:	1e46      	subs	r6, r0, #1
    ce94:	4690      	mov	r8, r2
    ce96:	f04f 0940 	mov.w	r9, #64	; 0x40
    ce9a:	783b      	ldrb	r3, [r7, #0]
    ce9c:	2b00      	cmp	r3, #0
    ce9e:	f43f aeb0 	beq.w	cc02 <d_encoding+0x62>
    cea2:	2b24      	cmp	r3, #36	; 0x24
    cea4:	f000 8128 	beq.w	d0f8 <d_encoding+0x558>
    cea8:	463c      	mov	r4, r7
    ceaa:	2100      	movs	r1, #0
    ceac:	e004      	b.n	ceb8 <d_encoding+0x318>
    ceae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    ceb2:	b123      	cbz	r3, cebe <d_encoding+0x31e>
    ceb4:	2b24      	cmp	r3, #36	; 0x24
    ceb6:	d002      	beq.n	cebe <d_encoding+0x31e>
    ceb8:	3101      	adds	r1, #1
    ceba:	42b1      	cmp	r1, r6
    cebc:	dbf7      	blt.n	ceae <d_encoding+0x30e>
    cebe:	696c      	ldr	r4, [r5, #20]
    cec0:	69a8      	ldr	r0, [r5, #24]
    cec2:	4284      	cmp	r4, r0
    cec4:	f280 8113 	bge.w	d0ee <d_encoding+0x54e>
    cec8:	6928      	ldr	r0, [r5, #16]
    ceca:	1c63      	adds	r3, r4, #1
    cecc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ced0:	616b      	str	r3, [r5, #20]
    ced2:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
    ced6:	f000 810a 	beq.w	d0ee <d_encoding+0x54e>
    ceda:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
    cede:	605f      	str	r7, [r3, #4]
    cee0:	6099      	str	r1, [r3, #8]
    cee2:	68ef      	ldr	r7, [r5, #12]
    cee4:	440f      	add	r7, r1
    cee6:	1a76      	subs	r6, r6, r1
    cee8:	60ef      	str	r7, [r5, #12]
    ceea:	2a00      	cmp	r2, #0
    ceec:	f000 8121 	beq.w	d132 <d_encoding+0x592>
    cef0:	213f      	movs	r1, #63	; 0x3f
    cef2:	4628      	mov	r0, r5
    cef4:	f7fd fdae 	bl	aa54 <d_make_comp>
    cef8:	4602      	mov	r2, r0
    cefa:	2800      	cmp	r0, #0
    cefc:	f43f ae81 	beq.w	cc02 <d_encoding+0x62>
    cf00:	2e00      	cmp	r6, #0
    cf02:	dcca      	bgt.n	ce9a <d_encoding+0x2fa>
    cf04:	4628      	mov	r0, r5
    cf06:	2300      	movs	r3, #0
    cf08:	213e      	movs	r1, #62	; 0x3e
    cf0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cf0e:	f7fd bda1 	b.w	aa54 <d_make_comp>
    cf12:	4628      	mov	r0, r5
    cf14:	f7fe fe70 	bl	bbf8 <d_name>
    cf18:	2300      	movs	r3, #0
    cf1a:	4602      	mov	r2, r0
    cf1c:	2113      	movs	r1, #19
    cf1e:	4628      	mov	r0, r5
    cf20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cf24:	f7fd bd96 	b.w	aa54 <d_make_comp>
    cf28:	789a      	ldrb	r2, [r3, #2]
    cf2a:	2100      	movs	r1, #0
    cf2c:	4628      	mov	r0, r5
    cf2e:	2a00      	cmp	r2, #0
    cf30:	f000 8101 	beq.w	d136 <d_encoding+0x596>
    cf34:	1cda      	adds	r2, r3, #3
    cf36:	60ea      	str	r2, [r5, #12]
    cf38:	789b      	ldrb	r3, [r3, #2]
    cf3a:	2b6e      	cmp	r3, #110	; 0x6e
    cf3c:	f040 80fb 	bne.w	d136 <d_encoding+0x596>
    cf40:	f7ff fe2e 	bl	cba0 <d_encoding>
    cf44:	2300      	movs	r3, #0
    cf46:	4602      	mov	r2, r0
    cf48:	2149      	movs	r1, #73	; 0x49
    cf4a:	4628      	mov	r0, r5
    cf4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cf50:	f7fd bd80 	b.w	aa54 <d_make_comp>
    cf54:	4628      	mov	r0, r5
    cf56:	f7fe fe4f 	bl	bbf8 <d_name>
    cf5a:	4604      	mov	r4, r0
    cf5c:	4628      	mov	r0, r5
    cf5e:	f7fd fef3 	bl	ad48 <d_number_component>
    cf62:	4622      	mov	r2, r4
    cf64:	4603      	mov	r3, r0
    cf66:	2116      	movs	r1, #22
    cf68:	4628      	mov	r0, r5
    cf6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cf6e:	f7fd bd71 	b.w	aa54 <d_make_comp>
    cf72:	2176      	movs	r1, #118	; 0x76
    cf74:	4628      	mov	r0, r5
    cf76:	f7fe f871 	bl	b05c <d_call_offset>
    cf7a:	2800      	cmp	r0, #0
    cf7c:	f43f ae41 	beq.w	cc02 <d_encoding+0x62>
    cf80:	2100      	movs	r1, #0
    cf82:	4628      	mov	r0, r5
    cf84:	f7ff fe0c 	bl	cba0 <d_encoding>
    cf88:	2300      	movs	r3, #0
    cf8a:	4602      	mov	r2, r0
    cf8c:	2110      	movs	r1, #16
    cf8e:	4628      	mov	r0, r5
    cf90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cf94:	f7fd bd5e 	b.w	aa54 <d_make_comp>
    cf98:	2168      	movs	r1, #104	; 0x68
    cf9a:	4628      	mov	r0, r5
    cf9c:	f7fe f85e 	bl	b05c <d_call_offset>
    cfa0:	2800      	cmp	r0, #0
    cfa2:	f43f ae2e 	beq.w	cc02 <d_encoding+0x62>
    cfa6:	2100      	movs	r1, #0
    cfa8:	4628      	mov	r0, r5
    cfaa:	f7ff fdf9 	bl	cba0 <d_encoding>
    cfae:	2300      	movs	r3, #0
    cfb0:	4602      	mov	r2, r0
    cfb2:	210f      	movs	r1, #15
    cfb4:	4628      	mov	r0, r5
    cfb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cfba:	f7fd bd4b 	b.w	aa54 <d_make_comp>
    cfbe:	2100      	movs	r1, #0
    cfc0:	4628      	mov	r0, r5
    cfc2:	f7fe f84b 	bl	b05c <d_call_offset>
    cfc6:	2800      	cmp	r0, #0
    cfc8:	f43f ae1b 	beq.w	cc02 <d_encoding+0x62>
    cfcc:	2100      	movs	r1, #0
    cfce:	4628      	mov	r0, r5
    cfd0:	f7fe f844 	bl	b05c <d_call_offset>
    cfd4:	2800      	cmp	r0, #0
    cfd6:	f43f ae14 	beq.w	cc02 <d_encoding+0x62>
    cfda:	2100      	movs	r1, #0
    cfdc:	4628      	mov	r0, r5
    cfde:	f7ff fddf 	bl	cba0 <d_encoding>
    cfe2:	2300      	movs	r3, #0
    cfe4:	4602      	mov	r2, r0
    cfe6:	2111      	movs	r1, #17
    cfe8:	4628      	mov	r0, r5
    cfea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cfee:	f7fd bd31 	b.w	aa54 <d_make_comp>
    cff2:	4628      	mov	r0, r5
    cff4:	f7fe fe00 	bl	bbf8 <d_name>
    cff8:	2300      	movs	r3, #0
    cffa:	4602      	mov	r2, r0
    cffc:	2115      	movs	r1, #21
    cffe:	4628      	mov	r0, r5
    d000:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d004:	f7fd bd26 	b.w	aa54 <d_make_comp>
    d008:	310f      	adds	r1, #15
    d00a:	6329      	str	r1, [r5, #48]	; 0x30
    d00c:	4628      	mov	r0, r5
    d00e:	f7fe ffaf 	bl	bf70 <d_type>
    d012:	2300      	movs	r3, #0
    d014:	4602      	mov	r2, r0
    d016:	2109      	movs	r1, #9
    d018:	4628      	mov	r0, r5
    d01a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d01e:	f7fd bd19 	b.w	aa54 <d_make_comp>
    d022:	310a      	adds	r1, #10
    d024:	6329      	str	r1, [r5, #48]	; 0x30
    d026:	4628      	mov	r0, r5
    d028:	f7fe ffa2 	bl	bf70 <d_type>
    d02c:	2300      	movs	r3, #0
    d02e:	4602      	mov	r2, r0
    d030:	210a      	movs	r1, #10
    d032:	4628      	mov	r0, r5
    d034:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d038:	f7fd bd0c 	b.w	aa54 <d_make_comp>
    d03c:	4628      	mov	r0, r5
    d03e:	f7fe ff97 	bl	bf70 <d_type>
    d042:	2300      	movs	r3, #0
    d044:	4602      	mov	r2, r0
    d046:	210d      	movs	r1, #13
    d048:	4628      	mov	r0, r5
    d04a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d04e:	f7fd bd01 	b.w	aa54 <d_make_comp>
    d052:	4628      	mov	r0, r5
    d054:	f7fe ff8c 	bl	bf70 <d_type>
    d058:	2300      	movs	r3, #0
    d05a:	4602      	mov	r2, r0
    d05c:	2112      	movs	r1, #18
    d05e:	4628      	mov	r0, r5
    d060:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d064:	f7fd bcf6 	b.w	aa54 <d_make_comp>
    d068:	4628      	mov	r0, r5
    d06a:	f7fe ff81 	bl	bf70 <d_type>
    d06e:	2300      	movs	r3, #0
    d070:	4602      	mov	r2, r0
    d072:	210c      	movs	r1, #12
    d074:	4628      	mov	r0, r5
    d076:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d07a:	f7fd bceb 	b.w	aa54 <d_make_comp>
    d07e:	4628      	mov	r0, r5
    d080:	f7fe fdba 	bl	bbf8 <d_name>
    d084:	2300      	movs	r3, #0
    d086:	4602      	mov	r2, r0
    d088:	2114      	movs	r1, #20
    d08a:	4628      	mov	r0, r5
    d08c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d090:	f7fd bce0 	b.w	aa54 <d_make_comp>
    d094:	4628      	mov	r0, r5
    d096:	f7fe ff6b 	bl	bf70 <d_type>
    d09a:	2300      	movs	r3, #0
    d09c:	4602      	mov	r2, r0
    d09e:	210e      	movs	r1, #14
    d0a0:	4628      	mov	r0, r5
    d0a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d0a6:	f7fd bcd5 	b.w	aa54 <d_make_comp>
    d0aa:	4628      	mov	r0, r5
    d0ac:	f7fe ff60 	bl	bf70 <d_type>
    d0b0:	4604      	mov	r4, r0
    d0b2:	f105 000c 	add.w	r0, r5, #12
    d0b6:	f7fd fe1d 	bl	acf4 <d_number.isra.0>
    d0ba:	2800      	cmp	r0, #0
    d0bc:	f6ff ada1 	blt.w	cc02 <d_encoding+0x62>
    d0c0:	68eb      	ldr	r3, [r5, #12]
    d0c2:	781a      	ldrb	r2, [r3, #0]
    d0c4:	2a5f      	cmp	r2, #95	; 0x5f
    d0c6:	f47f ad9c 	bne.w	cc02 <d_encoding+0x62>
    d0ca:	3301      	adds	r3, #1
    d0cc:	60eb      	str	r3, [r5, #12]
    d0ce:	4628      	mov	r0, r5
    d0d0:	f7fe ff4e 	bl	bf70 <d_type>
    d0d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    d0d6:	1d59      	adds	r1, r3, #5
    d0d8:	6329      	str	r1, [r5, #48]	; 0x30
    d0da:	4602      	mov	r2, r0
    d0dc:	4623      	mov	r3, r4
    d0de:	4628      	mov	r0, r5
    d0e0:	210b      	movs	r1, #11
    d0e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d0e6:	f7fd bcb5 	b.w	aa54 <d_make_comp>
    d0ea:	685b      	ldr	r3, [r3, #4]
    d0ec:	e574      	b.n	cbd8 <d_encoding+0x38>
    d0ee:	68eb      	ldr	r3, [r5, #12]
    d0f0:	440b      	add	r3, r1
    d0f2:	60eb      	str	r3, [r5, #12]
    d0f4:	2400      	movs	r4, #0
    d0f6:	e585      	b.n	cc04 <d_encoding+0x64>
    d0f8:	787b      	ldrb	r3, [r7, #1]
    d0fa:	2b53      	cmp	r3, #83	; 0x53
    d0fc:	d027      	beq.n	d14e <d_encoding+0x5ae>
    d0fe:	2b5f      	cmp	r3, #95	; 0x5f
    d100:	d023      	beq.n	d14a <d_encoding+0x5aa>
    d102:	2b24      	cmp	r3, #36	; 0x24
    d104:	f47f ad7d 	bne.w	cc02 <d_encoding+0x62>
    d108:	4618      	mov	r0, r3
    d10a:	6969      	ldr	r1, [r5, #20]
    d10c:	69ab      	ldr	r3, [r5, #24]
    d10e:	4299      	cmp	r1, r3
    d110:	da1f      	bge.n	d152 <d_encoding+0x5b2>
    d112:	692c      	ldr	r4, [r5, #16]
    d114:	1c4f      	adds	r7, r1, #1
    d116:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    d11a:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
    d11e:	616f      	str	r7, [r5, #20]
    d120:	d017      	beq.n	d152 <d_encoding+0x5b2>
    d122:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
    d126:	6058      	str	r0, [r3, #4]
    d128:	68ef      	ldr	r7, [r5, #12]
    d12a:	3702      	adds	r7, #2
    d12c:	3e02      	subs	r6, #2
    d12e:	60ef      	str	r7, [r5, #12]
    d130:	e6db      	b.n	ceea <d_encoding+0x34a>
    d132:	461a      	mov	r2, r3
    d134:	e6e4      	b.n	cf00 <d_encoding+0x360>
    d136:	f7ff fd33 	bl	cba0 <d_encoding>
    d13a:	2300      	movs	r3, #0
    d13c:	4602      	mov	r2, r0
    d13e:	2148      	movs	r1, #72	; 0x48
    d140:	4628      	mov	r0, r5
    d142:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d146:	f7fd bc85 	b.w	aa54 <d_make_comp>
    d14a:	202e      	movs	r0, #46	; 0x2e
    d14c:	e7dd      	b.n	d10a <d_encoding+0x56a>
    d14e:	202f      	movs	r0, #47	; 0x2f
    d150:	e7db      	b.n	d10a <d_encoding+0x56a>
    d152:	68eb      	ldr	r3, [r5, #12]
    d154:	3302      	adds	r3, #2
    d156:	60eb      	str	r3, [r5, #12]
    d158:	2400      	movs	r4, #0
    d15a:	e553      	b.n	cc04 <d_encoding+0x64>

0000d15c <d_expr_primary>:
    d15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d15e:	68c2      	ldr	r2, [r0, #12]
    d160:	7813      	ldrb	r3, [r2, #0]
    d162:	2b4c      	cmp	r3, #76	; 0x4c
    d164:	d001      	beq.n	d16a <d_expr_primary+0xe>
    d166:	2000      	movs	r0, #0
    d168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d16a:	1c53      	adds	r3, r2, #1
    d16c:	60c3      	str	r3, [r0, #12]
    d16e:	7851      	ldrb	r1, [r2, #1]
    d170:	295f      	cmp	r1, #95	; 0x5f
    d172:	4605      	mov	r5, r0
    d174:	d03a      	beq.n	d1ec <d_expr_primary+0x90>
    d176:	295a      	cmp	r1, #90	; 0x5a
    d178:	d03f      	beq.n	d1fa <d_expr_primary+0x9e>
    d17a:	f7fe fef9 	bl	bf70 <d_type>
    d17e:	2800      	cmp	r0, #0
    d180:	d0f1      	beq.n	d166 <d_expr_primary+0xa>
    d182:	7803      	ldrb	r3, [r0, #0]
    d184:	2b27      	cmp	r3, #39	; 0x27
    d186:	d046      	beq.n	d216 <d_expr_primary+0xba>
    d188:	68ee      	ldr	r6, [r5, #12]
    d18a:	7833      	ldrb	r3, [r6, #0]
    d18c:	2b6e      	cmp	r3, #110	; 0x6e
    d18e:	d04b      	beq.n	d228 <d_expr_primary+0xcc>
    d190:	213c      	movs	r1, #60	; 0x3c
    d192:	2b45      	cmp	r3, #69	; 0x45
    d194:	d04e      	beq.n	d234 <d_expr_primary+0xd8>
    d196:	2b00      	cmp	r3, #0
    d198:	d0e5      	beq.n	d166 <d_expr_primary+0xa>
    d19a:	4633      	mov	r3, r6
    d19c:	e001      	b.n	d1a2 <d_expr_primary+0x46>
    d19e:	2c00      	cmp	r4, #0
    d1a0:	d0e1      	beq.n	d166 <d_expr_primary+0xa>
    d1a2:	3301      	adds	r3, #1
    d1a4:	60eb      	str	r3, [r5, #12]
    d1a6:	781c      	ldrb	r4, [r3, #0]
    d1a8:	2c45      	cmp	r4, #69	; 0x45
    d1aa:	d1f8      	bne.n	d19e <d_expr_primary+0x42>
    d1ac:	1b9c      	subs	r4, r3, r6
    d1ae:	696b      	ldr	r3, [r5, #20]
    d1b0:	69aa      	ldr	r2, [r5, #24]
    d1b2:	4293      	cmp	r3, r2
    d1b4:	da2d      	bge.n	d212 <d_expr_primary+0xb6>
    d1b6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    d1ba:	692f      	ldr	r7, [r5, #16]
    d1bc:	3301      	adds	r3, #1
    d1be:	0092      	lsls	r2, r2, #2
    d1c0:	616b      	str	r3, [r5, #20]
    d1c2:	18bb      	adds	r3, r7, r2
    d1c4:	d025      	beq.n	d212 <d_expr_primary+0xb6>
    d1c6:	b326      	cbz	r6, d212 <d_expr_primary+0xb6>
    d1c8:	b31c      	cbz	r4, d212 <d_expr_primary+0xb6>
    d1ca:	f04f 0e00 	mov.w	lr, #0
    d1ce:	f807 e002 	strb.w	lr, [r7, r2]
    d1d2:	605e      	str	r6, [r3, #4]
    d1d4:	609c      	str	r4, [r3, #8]
    d1d6:	4602      	mov	r2, r0
    d1d8:	4628      	mov	r0, r5
    d1da:	f7fd fc3b 	bl	aa54 <d_make_comp>
    d1de:	68eb      	ldr	r3, [r5, #12]
    d1e0:	781a      	ldrb	r2, [r3, #0]
    d1e2:	2a45      	cmp	r2, #69	; 0x45
    d1e4:	d1bf      	bne.n	d166 <d_expr_primary+0xa>
    d1e6:	3301      	adds	r3, #1
    d1e8:	60eb      	str	r3, [r5, #12]
    d1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d1ec:	1c93      	adds	r3, r2, #2
    d1ee:	60c3      	str	r3, [r0, #12]
    d1f0:	7892      	ldrb	r2, [r2, #2]
    d1f2:	2a5a      	cmp	r2, #90	; 0x5a
    d1f4:	bf18      	it	ne
    d1f6:	2000      	movne	r0, #0
    d1f8:	d107      	bne.n	d20a <d_expr_primary+0xae>
    d1fa:	3301      	adds	r3, #1
    d1fc:	60eb      	str	r3, [r5, #12]
    d1fe:	2100      	movs	r1, #0
    d200:	4628      	mov	r0, r5
    d202:	f7ff fccd 	bl	cba0 <d_encoding>
    d206:	68eb      	ldr	r3, [r5, #12]
    d208:	781a      	ldrb	r2, [r3, #0]
    d20a:	2a45      	cmp	r2, #69	; 0x45
    d20c:	d0eb      	beq.n	d1e6 <d_expr_primary+0x8a>
    d20e:	2000      	movs	r0, #0
    d210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d212:	2300      	movs	r3, #0
    d214:	e7df      	b.n	d1d6 <d_expr_primary+0x7a>
    d216:	6843      	ldr	r3, [r0, #4]
    d218:	7c1a      	ldrb	r2, [r3, #16]
    d21a:	2a00      	cmp	r2, #0
    d21c:	d0b4      	beq.n	d188 <d_expr_primary+0x2c>
    d21e:	685a      	ldr	r2, [r3, #4]
    d220:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    d222:	1a9b      	subs	r3, r3, r2
    d224:	632b      	str	r3, [r5, #48]	; 0x30
    d226:	e7af      	b.n	d188 <d_expr_primary+0x2c>
    d228:	1c72      	adds	r2, r6, #1
    d22a:	60ea      	str	r2, [r5, #12]
    d22c:	7873      	ldrb	r3, [r6, #1]
    d22e:	213d      	movs	r1, #61	; 0x3d
    d230:	4616      	mov	r6, r2
    d232:	e7ae      	b.n	d192 <d_expr_primary+0x36>
    d234:	2400      	movs	r4, #0
    d236:	e7ba      	b.n	d1ae <d_expr_primary+0x52>

0000d238 <d_print_comp_inner>:
    d238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d23c:	4604      	mov	r4, r0
    d23e:	b095      	sub	sp, #84	; 0x54
    d240:	2a00      	cmp	r2, #0
    d242:	f000 80db 	beq.w	d3fc <d_print_comp_inner+0x1c4>
    d246:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
    d24a:	2f00      	cmp	r7, #0
    d24c:	f040 80c2 	bne.w	d3d4 <d_print_comp_inner+0x19c>
    d250:	7813      	ldrb	r3, [r2, #0]
    d252:	4688      	mov	r8, r1
    d254:	4615      	mov	r5, r2
    d256:	2b4d      	cmp	r3, #77	; 0x4d
    d258:	f201 81e6 	bhi.w	e628 <d_print_comp_inner+0x13f0>
    d25c:	e8df f013 	tbh	[pc, r3, lsl #1]
    d260:	043c045a 	.word	0x043c045a
    d264:	03a4043c 	.word	0x03a4043c
    d268:	048904a5 	.word	0x048904a5
    d26c:	038e04ea 	.word	0x038e04ea
    d270:	0330037c 	.word	0x0330037c
    d274:	030a0356 	.word	0x030a0356
    d278:	029802e4 	.word	0x029802e4
    d27c:	027202be 	.word	0x027202be
    d280:	01f0024c 	.word	0x01f0024c
    d284:	01ca0226 	.word	0x01ca0226
    d288:	015801a4 	.word	0x015801a4
    d28c:	0132017e 	.word	0x0132017e
    d290:	00f2010b 	.word	0x00f2010b
    d294:	00f200f2 	.word	0x00f200f2
    d298:	00d400d4 	.word	0x00d400d4
    d29c:	00d400d4 	.word	0x00d400d4
    d2a0:	00d400d4 	.word	0x00d400d4
    d2a4:	06d500d4 	.word	0x06d500d4
    d2a8:	00d406d5 	.word	0x00d406d5
    d2ac:	06a900d4 	.word	0x06a900d4
    d2b0:	069306fc 	.word	0x069306fc
    d2b4:	0701071d 	.word	0x0701071d
    d2b8:	07010788 	.word	0x07010788
    d2bc:	057b057b 	.word	0x057b057b
    d2c0:	06060630 	.word	0x06060630
    d2c4:	09e405e0 	.word	0x09e405e0
    d2c8:	068e05ad 	.word	0x068e05ad
    d2cc:	004e0654 	.word	0x004e0654
    d2d0:	094c0485 	.word	0x094c0485
    d2d4:	08df08df 	.word	0x08df08df
    d2d8:	08ae08ae 	.word	0x08ae08ae
    d2dc:	05480888 	.word	0x05480888
    d2e0:	08e4053a 	.word	0x08e4053a
    d2e4:	09be0514 	.word	0x09be0514
    d2e8:	09980914 	.word	0x09980914
    d2ec:	07cb09e4 	.word	0x07cb09e4
    d2f0:	07f10862 	.word	0x07f10862
    d2f4:	04130817 	.word	0x04130817
    d2f8:	055200d4 	.word	0x055200d4
    d2fc:	68ab      	ldr	r3, [r5, #8]
    d2fe:	781b      	ldrb	r3, [r3, #0]
    d300:	2b38      	cmp	r3, #56	; 0x38
    d302:	d17b      	bne.n	d3fc <d_print_comp_inner+0x1c4>
    d304:	686a      	ldr	r2, [r5, #4]
    d306:	6853      	ldr	r3, [r2, #4]
    d308:	681b      	ldr	r3, [r3, #0]
    d30a:	7859      	ldrb	r1, [r3, #1]
    d30c:	2963      	cmp	r1, #99	; 0x63
    d30e:	f002 814a 	beq.w	f5a6 <d_print_comp_inner+0x236e>
    d312:	f105 0308 	add.w	r3, r5, #8
    d316:	4641      	mov	r1, r8
    d318:	4620      	mov	r0, r4
    d31a:	f003 fbbb 	bl	10a94 <d_maybe_print_fold_expression.isra.15>
    d31e:	4606      	mov	r6, r0
    d320:	2800      	cmp	r0, #0
    d322:	d157      	bne.n	d3d4 <d_print_comp_inner+0x19c>
    d324:	686b      	ldr	r3, [r5, #4]
    d326:	781a      	ldrb	r2, [r3, #0]
    d328:	2a31      	cmp	r2, #49	; 0x31
    d32a:	f002 836b 	beq.w	fa04 <d_print_comp_inner+0x27cc>
    d32e:	685b      	ldr	r3, [r3, #4]
    d330:	49c7      	ldr	r1, [pc, #796]	; (d650 <d_print_comp_inner+0x418>)
    d332:	6818      	ldr	r0, [r3, #0]
    d334:	f007 fda8 	bl	14e88 <strcmp>
    d338:	68ab      	ldr	r3, [r5, #8]
    d33a:	b920      	cbnz	r0, d346 <d_print_comp_inner+0x10e>
    d33c:	685a      	ldr	r2, [r3, #4]
    d33e:	7811      	ldrb	r1, [r2, #0]
    d340:	2903      	cmp	r1, #3
    d342:	f002 83a5 	beq.w	fa90 <d_print_comp_inner+0x2858>
    d346:	685a      	ldr	r2, [r3, #4]
    d348:	4641      	mov	r1, r8
    d34a:	4620      	mov	r0, r4
    d34c:	f003 fb3e 	bl	109cc <d_print_subexpr>
    d350:	686f      	ldr	r7, [r5, #4]
    d352:	49c0      	ldr	r1, [pc, #768]	; (d654 <d_print_comp_inner+0x41c>)
    d354:	687b      	ldr	r3, [r7, #4]
    d356:	f8d3 9000 	ldr.w	r9, [r3]
    d35a:	4648      	mov	r0, r9
    d35c:	f007 fd94 	bl	14e88 <strcmp>
    d360:	4606      	mov	r6, r0
    d362:	2800      	cmp	r0, #0
    d364:	f042 826f 	bne.w	f846 <d_print_comp_inner+0x260e>
    d368:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    d36c:	29ff      	cmp	r1, #255	; 0xff
    d36e:	f002 844a 	beq.w	fc06 <d_print_comp_inner+0x29ce>
    d372:	1c4a      	adds	r2, r1, #1
    d374:	235b      	movs	r3, #91	; 0x5b
    d376:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    d37a:	5463      	strb	r3, [r4, r1]
    d37c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    d380:	68ab      	ldr	r3, [r5, #8]
    d382:	4641      	mov	r1, r8
    d384:	689a      	ldr	r2, [r3, #8]
    d386:	4620      	mov	r0, r4
    d388:	f002 fcfa 	bl	fd80 <d_print_comp>
    d38c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    d390:	29ff      	cmp	r1, #255	; 0xff
    d392:	f002 8425 	beq.w	fbe0 <d_print_comp_inner+0x29a8>
    d396:	235d      	movs	r3, #93	; 0x5d
    d398:	1c4a      	adds	r2, r1, #1
    d39a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    d39e:	5463      	strb	r3, [r4, r1]
    d3a0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    d3a4:	686b      	ldr	r3, [r5, #4]
    d3a6:	781a      	ldrb	r2, [r3, #0]
    d3a8:	2a31      	cmp	r2, #49	; 0x31
    d3aa:	d113      	bne.n	d3d4 <d_print_comp_inner+0x19c>
    d3ac:	685b      	ldr	r3, [r3, #4]
    d3ae:	689a      	ldr	r2, [r3, #8]
    d3b0:	2a01      	cmp	r2, #1
    d3b2:	d10f      	bne.n	d3d4 <d_print_comp_inner+0x19c>
    d3b4:	685b      	ldr	r3, [r3, #4]
    d3b6:	781b      	ldrb	r3, [r3, #0]
    d3b8:	2b3e      	cmp	r3, #62	; 0x3e
    d3ba:	d10b      	bne.n	d3d4 <d_print_comp_inner+0x19c>
    d3bc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    d3c0:	29ff      	cmp	r1, #255	; 0xff
    d3c2:	f002 8482 	beq.w	fcca <d_print_comp_inner+0x2a92>
    d3c6:	2329      	movs	r3, #41	; 0x29
    d3c8:	1c4a      	adds	r2, r1, #1
    d3ca:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    d3ce:	5463      	strb	r3, [r4, r1]
    d3d0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    d3d4:	b015      	add	sp, #84	; 0x54
    d3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3da:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    d3de:	2b00      	cmp	r3, #0
    d3e0:	f2c1 84a4 	blt.w	ed2c <d_print_comp_inner+0x1af4>
    d3e4:	2b00      	cmp	r3, #0
    d3e6:	f002 8432 	beq.w	fc4e <d_print_comp_inner+0x2a16>
    d3ea:	6880      	ldr	r0, [r0, #8]
    d3ec:	3b01      	subs	r3, #1
    d3ee:	b110      	cbz	r0, d3f6 <d_print_comp_inner+0x1be>
    d3f0:	7802      	ldrb	r2, [r0, #0]
    d3f2:	2a2f      	cmp	r2, #47	; 0x2f
    d3f4:	d0f6      	beq.n	d3e4 <d_print_comp_inner+0x1ac>
    d3f6:	b10f      	cbz	r7, d3fc <d_print_comp_inner+0x1c4>
    d3f8:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    d3fc:	2301      	movs	r3, #1
    d3fe:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    d402:	b015      	add	sp, #84	; 0x54
    d404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d408:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
    d40c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    d410:	9505      	str	r5, [sp, #20]
    d412:	ab14      	add	r3, sp, #80	; 0x50
    d414:	2100      	movs	r1, #0
    d416:	f843 cd40 	str.w	ip, [r3, #-64]!
    d41a:	9106      	str	r1, [sp, #24]
    d41c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    d420:	9207      	str	r2, [sp, #28]
    d422:	686a      	ldr	r2, [r5, #4]
    d424:	4641      	mov	r1, r8
    d426:	4620      	mov	r0, r4
    d428:	f002 fcaa 	bl	fd80 <d_print_comp>
    d42c:	9b06      	ldr	r3, [sp, #24]
    d42e:	2b00      	cmp	r3, #0
    d430:	f001 8389 	beq.w	eb46 <d_print_comp_inner+0x190e>
    d434:	9b04      	ldr	r3, [sp, #16]
    d436:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    d43a:	2f00      	cmp	r7, #0
    d43c:	d0ca      	beq.n	d3d4 <d_print_comp_inner+0x19c>
    d43e:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    d442:	e7c7      	b.n	d3d4 <d_print_comp_inner+0x19c>
    d444:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
    d448:	f1bc 0f00 	cmp.w	ip, #0
    d44c:	d0de      	beq.n	d40c <d_print_comp_inner+0x1d4>
    d44e:	4662      	mov	r2, ip
    d450:	e005      	b.n	d45e <d_print_comp_inner+0x226>
    d452:	428b      	cmp	r3, r1
    d454:	f001 86b8 	beq.w	f1c8 <d_print_comp_inner+0x1f90>
    d458:	6812      	ldr	r2, [r2, #0]
    d45a:	2a00      	cmp	r2, #0
    d45c:	d0d6      	beq.n	d40c <d_print_comp_inner+0x1d4>
    d45e:	6890      	ldr	r0, [r2, #8]
    d460:	2800      	cmp	r0, #0
    d462:	d1f9      	bne.n	d458 <d_print_comp_inner+0x220>
    d464:	6851      	ldr	r1, [r2, #4]
    d466:	7809      	ldrb	r1, [r1, #0]
    d468:	f1a1 0e19 	sub.w	lr, r1, #25
    d46c:	f1be 0f02 	cmp.w	lr, #2
    d470:	d9ef      	bls.n	d452 <d_print_comp_inner+0x21a>
    d472:	4607      	mov	r7, r0
    d474:	e7ca      	b.n	d40c <d_print_comp_inner+0x1d4>
    d476:	68af      	ldr	r7, [r5, #8]
    d478:	686d      	ldr	r5, [r5, #4]
    d47a:	2f00      	cmp	r7, #0
    d47c:	d0aa      	beq.n	d3d4 <d_print_comp_inner+0x19c>
    d47e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d482:	442f      	add	r7, r5
    d484:	f04f 0800 	mov.w	r8, #0
    d488:	e008      	b.n	d49c <d_print_comp_inner+0x264>
    d48a:	460b      	mov	r3, r1
    d48c:	3101      	adds	r1, #1
    d48e:	42bd      	cmp	r5, r7
    d490:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    d494:	54e6      	strb	r6, [r4, r3]
    d496:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    d49a:	d09b      	beq.n	d3d4 <d_print_comp_inner+0x19c>
    d49c:	29ff      	cmp	r1, #255	; 0xff
    d49e:	f815 6b01 	ldrb.w	r6, [r5], #1
    d4a2:	d1f2      	bne.n	d48a <d_print_comp_inner+0x252>
    d4a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    d4a8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    d4ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    d4b0:	4620      	mov	r0, r4
    d4b2:	4798      	blx	r3
    d4b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    d4b8:	3301      	adds	r3, #1
    d4ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    d4be:	2101      	movs	r1, #1
    d4c0:	2300      	movs	r3, #0
    d4c2:	e7e4      	b.n	d48e <d_print_comp_inner+0x256>
    d4c4:	4e64      	ldr	r6, [pc, #400]	; (d658 <d_print_comp_inner+0x420>)
    d4c6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d4ca:	f106 0a11 	add.w	sl, r6, #17
    d4ce:	f04f 0900 	mov.w	r9, #0
    d4d2:	e009      	b.n	d4e8 <d_print_comp_inner+0x2b0>
    d4d4:	460b      	mov	r3, r1
    d4d6:	3101      	adds	r1, #1
    d4d8:	4556      	cmp	r6, sl
    d4da:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    d4de:	54e7      	strb	r7, [r4, r3]
    d4e0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    d4e4:	f001 8296 	beq.w	ea14 <d_print_comp_inner+0x17dc>
    d4e8:	29ff      	cmp	r1, #255	; 0xff
    d4ea:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    d4ee:	d1f1      	bne.n	d4d4 <d_print_comp_inner+0x29c>
    d4f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    d4f4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    d4f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    d4fc:	4620      	mov	r0, r4
    d4fe:	4798      	blx	r3
    d500:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    d504:	3301      	adds	r3, #1
    d506:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    d50a:	2101      	movs	r1, #1
    d50c:	2300      	movs	r3, #0
    d50e:	e7e3      	b.n	d4d8 <d_print_comp_inner+0x2a0>
    d510:	4e52      	ldr	r6, [pc, #328]	; (d65c <d_print_comp_inner+0x424>)
    d512:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d516:	f106 0a19 	add.w	sl, r6, #25
    d51a:	f04f 0900 	mov.w	r9, #0
    d51e:	e009      	b.n	d534 <d_print_comp_inner+0x2fc>
    d520:	460b      	mov	r3, r1
    d522:	3101      	adds	r1, #1
    d524:	4556      	cmp	r6, sl
    d526:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    d52a:	54e7      	strb	r7, [r4, r3]
    d52c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    d530:	f001 82a8 	beq.w	ea84 <d_print_comp_inner+0x184c>
    d534:	29ff      	cmp	r1, #255	; 0xff
    d536:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    d53a:	d1f1      	bne.n	d520 <d_print_comp_inner+0x2e8>
    d53c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    d540:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    d544:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    d548:	4620      	mov	r0, r4
    d54a:	4798      	blx	r3
    d54c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    d550:	3301      	adds	r3, #1
    d552:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    d556:	2101      	movs	r1, #1
    d558:	2300      	movs	r3, #0
    d55a:	e7e3      	b.n	d524 <d_print_comp_inner+0x2ec>
    d55c:	4e40      	ldr	r6, [pc, #256]	; (d660 <d_print_comp_inner+0x428>)
    d55e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d562:	f106 0a15 	add.w	sl, r6, #21
    d566:	f04f 0900 	mov.w	r9, #0
    d56a:	e009      	b.n	d580 <d_print_comp_inner+0x348>
    d56c:	460b      	mov	r3, r1
    d56e:	3101      	adds	r1, #1
    d570:	4556      	cmp	r6, sl
    d572:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    d576:	54e7      	strb	r7, [r4, r3]
    d578:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    d57c:	f001 8251 	beq.w	ea22 <d_print_comp_inner+0x17ea>
    d580:	29ff      	cmp	r1, #255	; 0xff
    d582:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    d586:	d1f1      	bne.n	d56c <d_print_comp_inner+0x334>
    d588:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    d58c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    d590:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    d594:	4620      	mov	r0, r4
    d596:	4798      	blx	r3
    d598:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    d59c:	3301      	adds	r3, #1
    d59e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    d5a2:	2101      	movs	r1, #1
    d5a4:	2300      	movs	r3, #0
    d5a6:	e7e3      	b.n	d570 <d_print_comp_inner+0x338>
    d5a8:	4e2e      	ldr	r6, [pc, #184]	; (d664 <d_print_comp_inner+0x42c>)
    d5aa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d5ae:	f106 0a16 	add.w	sl, r6, #22
    d5b2:	f04f 0900 	mov.w	r9, #0
    d5b6:	e009      	b.n	d5cc <d_print_comp_inner+0x394>
    d5b8:	460b      	mov	r3, r1
    d5ba:	3101      	adds	r1, #1
    d5bc:	4556      	cmp	r6, sl
    d5be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    d5c2:	54e7      	strb	r7, [r4, r3]
    d5c4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    d5c8:	f001 8263 	beq.w	ea92 <d_print_comp_inner+0x185a>
    d5cc:	29ff      	cmp	r1, #255	; 0xff
    d5ce:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    d5d2:	d1f1      	bne.n	d5b8 <d_print_comp_inner+0x380>
    d5d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    d5d8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    d5dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    d5e0:	4620      	mov	r0, r4
    d5e2:	4798      	blx	r3
    d5e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    d5e8:	3301      	adds	r3, #1
    d5ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    d5ee:	2101      	movs	r1, #1
    d5f0:	2300      	movs	r3, #0
    d5f2:	e7e3      	b.n	d5bc <d_print_comp_inner+0x384>
    d5f4:	4e1c      	ldr	r6, [pc, #112]	; (d668 <d_print_comp_inner+0x430>)
    d5f6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d5fa:	f106 0a13 	add.w	sl, r6, #19
    d5fe:	f04f 0900 	mov.w	r9, #0
    d602:	e009      	b.n	d618 <d_print_comp_inner+0x3e0>
    d604:	460b      	mov	r3, r1
    d606:	3101      	adds	r1, #1
    d608:	45b2      	cmp	sl, r6
    d60a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    d60e:	54e7      	strb	r7, [r4, r3]
    d610:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    d614:	f001 8077 	beq.w	e706 <d_print_comp_inner+0x14ce>
    d618:	29ff      	cmp	r1, #255	; 0xff
    d61a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    d61e:	d1f1      	bne.n	d604 <d_print_comp_inner+0x3cc>
    d620:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    d624:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    d628:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    d62c:	4620      	mov	r0, r4
    d62e:	4798      	blx	r3
    d630:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    d634:	3301      	adds	r3, #1
    d636:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    d63a:	2101      	movs	r1, #1
    d63c:	2300      	movs	r3, #0
    d63e:	e7e3      	b.n	d608 <d_print_comp_inner+0x3d0>
    d640:	4e0a      	ldr	r6, [pc, #40]	; (d66c <d_print_comp_inner+0x434>)
    d642:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d646:	f106 0a1a 	add.w	sl, r6, #26
    d64a:	f04f 0900 	mov.w	r9, #0
    d64e:	e019      	b.n	d684 <d_print_comp_inner+0x44c>
    d650:	00022c14 	.word	0x00022c14
    d654:	00022e10 	.word	0x00022e10
    d658:	00022d9f 	.word	0x00022d9f
    d65c:	00022d6b 	.word	0x00022d6b
    d660:	00022d87 	.word	0x00022d87
    d664:	00022d53 	.word	0x00022d53
    d668:	00022d3f 	.word	0x00022d3f
    d66c:	00022d13 	.word	0x00022d13
    d670:	460b      	mov	r3, r1
    d672:	3101      	adds	r1, #1
    d674:	4556      	cmp	r6, sl
    d676:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    d67a:	54e7      	strb	r7, [r4, r3]
    d67c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    d680:	f001 804f 	beq.w	e722 <d_print_comp_inner+0x14ea>
    d684:	29ff      	cmp	r1, #255	; 0xff
    d686:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    d68a:	d1f1      	bne.n	d670 <d_print_comp_inner+0x438>
    d68c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    d690:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    d694:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    d698:	4620      	mov	r0, r4
    d69a:	4798      	blx	r3
    d69c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    d6a0:	3301      	adds	r3, #1
    d6a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    d6a6:	2101      	movs	r1, #1
    d6a8:	2300      	movs	r3, #0
    d6aa:	e7e3      	b.n	d674 <d_print_comp_inner+0x43c>
    d6ac:	4eb5      	ldr	r6, [pc, #724]	; (d984 <d_print_comp_inner+0x74c>)
    d6ae:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d6b2:	f106 0a0f 	add.w	sl, r6, #15
    d6b6:	f04f 0900 	mov.w	r9, #0
    d6ba:	e009      	b.n	d6d0 <d_print_comp_inner+0x498>
    d6bc:	460b      	mov	r3, r1
    d6be:	3101      	adds	r1, #1
    d6c0:	4556      	cmp	r6, sl
    d6c2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    d6c6:	54e7      	strb	r7, [r4, r3]
    d6c8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    d6cc:	f001 8022 	beq.w	e714 <d_print_comp_inner+0x14dc>
    d6d0:	29ff      	cmp	r1, #255	; 0xff
    d6d2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    d6d6:	d1f1      	bne.n	d6bc <d_print_comp_inner+0x484>
    d6d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    d6dc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    d6e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    d6e4:	4620      	mov	r0, r4
    d6e6:	4798      	blx	r3
    d6e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    d6ec:	3301      	adds	r3, #1
    d6ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    d6f2:	2101      	movs	r1, #1
    d6f4:	2300      	movs	r3, #0
    d6f6:	e7e3      	b.n	d6c0 <d_print_comp_inner+0x488>
    d6f8:	4ea3      	ldr	r6, [pc, #652]	; (d988 <d_print_comp_inner+0x750>)
    d6fa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d6fe:	f106 0a11 	add.w	sl, r6, #17
    d702:	f04f 0900 	mov.w	r9, #0
    d706:	e009      	b.n	d71c <d_print_comp_inner+0x4e4>
    d708:	460b      	mov	r3, r1
    d70a:	3101      	adds	r1, #1
    d70c:	4556      	cmp	r6, sl
    d70e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    d712:	54e7      	strb	r7, [r4, r3]
    d714:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    d718:	f001 800a 	beq.w	e730 <d_print_comp_inner+0x14f8>
    d71c:	29ff      	cmp	r1, #255	; 0xff
    d71e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    d722:	d1f1      	bne.n	d708 <d_print_comp_inner+0x4d0>
    d724:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    d728:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    d72c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    d730:	4620      	mov	r0, r4
    d732:	4798      	blx	r3
    d734:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    d738:	3301      	adds	r3, #1
    d73a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    d73e:	2101      	movs	r1, #1
    d740:	2300      	movs	r3, #0
    d742:	e7e3      	b.n	d70c <d_print_comp_inner+0x4d4>
    d744:	4e91      	ldr	r6, [pc, #580]	; (d98c <d_print_comp_inner+0x754>)
    d746:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d74a:	f106 0a15 	add.w	sl, r6, #21
    d74e:	f04f 0900 	mov.w	r9, #0
    d752:	e009      	b.n	d768 <d_print_comp_inner+0x530>
    d754:	460b      	mov	r3, r1
    d756:	3101      	adds	r1, #1
    d758:	4556      	cmp	r6, sl
    d75a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    d75e:	54e7      	strb	r7, [r4, r3]
    d760:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    d764:	f000 87b3 	beq.w	e6ce <d_print_comp_inner+0x1496>
    d768:	29ff      	cmp	r1, #255	; 0xff
    d76a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    d76e:	d1f1      	bne.n	d754 <d_print_comp_inner+0x51c>
    d770:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    d774:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    d778:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    d77c:	4620      	mov	r0, r4
    d77e:	4798      	blx	r3
    d780:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    d784:	3301      	adds	r3, #1
    d786:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    d78a:	2101      	movs	r1, #1
    d78c:	2300      	movs	r3, #0
    d78e:	e7e3      	b.n	d758 <d_print_comp_inner+0x520>
    d790:	4e7f      	ldr	r6, [pc, #508]	; (d990 <d_print_comp_inner+0x758>)
    d792:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d796:	f106 0a12 	add.w	sl, r6, #18
    d79a:	f04f 0900 	mov.w	r9, #0
    d79e:	e009      	b.n	d7b4 <d_print_comp_inner+0x57c>
    d7a0:	460b      	mov	r3, r1
    d7a2:	3101      	adds	r1, #1
    d7a4:	45b2      	cmp	sl, r6
    d7a6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    d7aa:	54e7      	strb	r7, [r4, r3]
    d7ac:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    d7b0:	f000 879b 	beq.w	e6ea <d_print_comp_inner+0x14b2>
    d7b4:	29ff      	cmp	r1, #255	; 0xff
    d7b6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    d7ba:	d1f1      	bne.n	d7a0 <d_print_comp_inner+0x568>
    d7bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    d7c0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    d7c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    d7c8:	4620      	mov	r0, r4
    d7ca:	4798      	blx	r3
    d7cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    d7d0:	3301      	adds	r3, #1
    d7d2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    d7d6:	2101      	movs	r1, #1
    d7d8:	2300      	movs	r3, #0
    d7da:	e7e3      	b.n	d7a4 <d_print_comp_inner+0x56c>
    d7dc:	4e6d      	ldr	r6, [pc, #436]	; (d994 <d_print_comp_inner+0x75c>)
    d7de:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d7e2:	f106 0a10 	add.w	sl, r6, #16
    d7e6:	f04f 0900 	mov.w	r9, #0
    d7ea:	e009      	b.n	d800 <d_print_comp_inner+0x5c8>
    d7ec:	460b      	mov	r3, r1
    d7ee:	3101      	adds	r1, #1
    d7f0:	4556      	cmp	r6, sl
    d7f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    d7f6:	54e7      	strb	r7, [r4, r3]
    d7f8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    d7fc:	f000 876e 	beq.w	e6dc <d_print_comp_inner+0x14a4>
    d800:	29ff      	cmp	r1, #255	; 0xff
    d802:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    d806:	d1f1      	bne.n	d7ec <d_print_comp_inner+0x5b4>
    d808:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    d80c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    d810:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    d814:	4620      	mov	r0, r4
    d816:	4798      	blx	r3
    d818:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    d81c:	3301      	adds	r3, #1
    d81e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    d822:	2101      	movs	r1, #1
    d824:	2300      	movs	r3, #0
    d826:	e7e3      	b.n	d7f0 <d_print_comp_inner+0x5b8>
    d828:	4e5b      	ldr	r6, [pc, #364]	; (d998 <d_print_comp_inner+0x760>)
    d82a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d82e:	f106 0a0d 	add.w	sl, r6, #13
    d832:	f04f 0900 	mov.w	r9, #0
    d836:	e009      	b.n	d84c <d_print_comp_inner+0x614>
    d838:	460b      	mov	r3, r1
    d83a:	3101      	adds	r1, #1
    d83c:	4556      	cmp	r6, sl
    d83e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    d842:	54e7      	strb	r7, [r4, r3]
    d844:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    d848:	f000 8756 	beq.w	e6f8 <d_print_comp_inner+0x14c0>
    d84c:	29ff      	cmp	r1, #255	; 0xff
    d84e:	f816 7b01 	ldrb.w	r7, [r6], #1
    d852:	d1f1      	bne.n	d838 <d_print_comp_inner+0x600>
    d854:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    d858:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    d85c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    d860:	4620      	mov	r0, r4
    d862:	4798      	blx	r3
    d864:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    d868:	3301      	adds	r3, #1
    d86a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    d86e:	2101      	movs	r1, #1
    d870:	2300      	movs	r3, #0
    d872:	e7e3      	b.n	d83c <d_print_comp_inner+0x604>
    d874:	4e49      	ldr	r6, [pc, #292]	; (d99c <d_print_comp_inner+0x764>)
    d876:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d87a:	f106 0a18 	add.w	sl, r6, #24
    d87e:	f04f 0900 	mov.w	r9, #0
    d882:	e009      	b.n	d898 <d_print_comp_inner+0x660>
    d884:	460b      	mov	r3, r1
    d886:	3101      	adds	r1, #1
    d888:	45b2      	cmp	sl, r6
    d88a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    d88e:	54e7      	strb	r7, [r4, r3]
    d890:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    d894:	f000 86e3 	beq.w	e65e <d_print_comp_inner+0x1426>
    d898:	29ff      	cmp	r1, #255	; 0xff
    d89a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    d89e:	d1f1      	bne.n	d884 <d_print_comp_inner+0x64c>
    d8a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    d8a4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    d8a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    d8ac:	4620      	mov	r0, r4
    d8ae:	4798      	blx	r3
    d8b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    d8b4:	3301      	adds	r3, #1
    d8b6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    d8ba:	2101      	movs	r1, #1
    d8bc:	2300      	movs	r3, #0
    d8be:	e7e3      	b.n	d888 <d_print_comp_inner+0x650>
    d8c0:	4e37      	ldr	r6, [pc, #220]	; (d9a0 <d_print_comp_inner+0x768>)
    d8c2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d8c6:	f106 0a0b 	add.w	sl, r6, #11
    d8ca:	f04f 0900 	mov.w	r9, #0
    d8ce:	e009      	b.n	d8e4 <d_print_comp_inner+0x6ac>
    d8d0:	460b      	mov	r3, r1
    d8d2:	3101      	adds	r1, #1
    d8d4:	45b2      	cmp	sl, r6
    d8d6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    d8da:	54e7      	strb	r7, [r4, r3]
    d8dc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    d8e0:	f000 87ca 	beq.w	e878 <d_print_comp_inner+0x1640>
    d8e4:	29ff      	cmp	r1, #255	; 0xff
    d8e6:	f816 7b01 	ldrb.w	r7, [r6], #1
    d8ea:	d1f1      	bne.n	d8d0 <d_print_comp_inner+0x698>
    d8ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    d8f0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    d8f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    d8f8:	4620      	mov	r0, r4
    d8fa:	4798      	blx	r3
    d8fc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    d900:	3301      	adds	r3, #1
    d902:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    d906:	2101      	movs	r1, #1
    d908:	2300      	movs	r3, #0
    d90a:	e7e3      	b.n	d8d4 <d_print_comp_inner+0x69c>
    d90c:	4e25      	ldr	r6, [pc, #148]	; (d9a4 <d_print_comp_inner+0x76c>)
    d90e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d912:	f106 0a08 	add.w	sl, r6, #8
    d916:	f04f 0900 	mov.w	r9, #0
    d91a:	e009      	b.n	d930 <d_print_comp_inner+0x6f8>
    d91c:	460b      	mov	r3, r1
    d91e:	3101      	adds	r1, #1
    d920:	45b2      	cmp	sl, r6
    d922:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    d926:	54e7      	strb	r7, [r4, r3]
    d928:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    d92c:	f000 86c8 	beq.w	e6c0 <d_print_comp_inner+0x1488>
    d930:	29ff      	cmp	r1, #255	; 0xff
    d932:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    d936:	d1f1      	bne.n	d91c <d_print_comp_inner+0x6e4>
    d938:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    d93c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    d940:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    d944:	4620      	mov	r0, r4
    d946:	4798      	blx	r3
    d948:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    d94c:	3301      	adds	r3, #1
    d94e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    d952:	2101      	movs	r1, #1
    d954:	2300      	movs	r3, #0
    d956:	e7e3      	b.n	d920 <d_print_comp_inner+0x6e8>
    d958:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d95c:	29ff      	cmp	r1, #255	; 0xff
    d95e:	f001 847c 	beq.w	f25a <d_print_comp_inner+0x2022>
    d962:	1c4a      	adds	r2, r1, #1
    d964:	237e      	movs	r3, #126	; 0x7e
    d966:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    d96a:	5463      	strb	r3, [r4, r1]
    d96c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    d970:	4641      	mov	r1, r8
    d972:	68aa      	ldr	r2, [r5, #8]
    d974:	4620      	mov	r0, r4
    d976:	f002 fa03 	bl	fd80 <d_print_comp>
    d97a:	e52b      	b.n	d3d4 <d_print_comp_inner+0x19c>
    d97c:	68aa      	ldr	r2, [r5, #8]
    d97e:	f002 f9ff 	bl	fd80 <d_print_comp>
    d982:	e527      	b.n	d3d4 <d_print_comp_inner+0x19c>
    d984:	00022d2f 	.word	0x00022d2f
    d988:	00022cff 	.word	0x00022cff
    d98c:	00022cfb 	.word	0x00022cfb
    d990:	00022cd3 	.word	0x00022cd3
    d994:	00022ce7 	.word	0x00022ce7
    d998:	00022cc4 	.word	0x00022cc4
    d99c:	00022c9f 	.word	0x00022c9f
    d9a0:	00022c88 	.word	0x00022c88
    d9a4:	00022c93 	.word	0x00022c93
    d9a8:	2200      	movs	r2, #0
    d9aa:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
    d9ae:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
    d9b2:	686e      	ldr	r6, [r5, #4]
    d9b4:	9300      	str	r3, [sp, #0]
    d9b6:	2e00      	cmp	r6, #0
    d9b8:	f000 864c 	beq.w	e654 <d_print_comp_inner+0x141c>
    d9bc:	f10d 0910 	add.w	r9, sp, #16
    d9c0:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
    d9c4:	4617      	mov	r7, r2
    d9c6:	4696      	mov	lr, r2
    d9c8:	464b      	mov	r3, r9
    d9ca:	7831      	ldrb	r1, [r6, #0]
    d9cc:	601a      	str	r2, [r3, #0]
    d9ce:	f1a1 021c 	sub.w	r2, r1, #28
    d9d2:	2a04      	cmp	r2, #4
    d9d4:	605e      	str	r6, [r3, #4]
    d9d6:	f8c3 e008 	str.w	lr, [r3, #8]
    d9da:	f8c3 c00c 	str.w	ip, [r3, #12]
    d9de:	f107 0701 	add.w	r7, r7, #1
    d9e2:	4618      	mov	r0, r3
    d9e4:	461a      	mov	r2, r3
    d9e6:	f240 862a 	bls.w	e63e <d_print_comp_inner+0x1406>
    d9ea:	294c      	cmp	r1, #76	; 0x4c
    d9ec:	f000 8627 	beq.w	e63e <d_print_comp_inner+0x1406>
    d9f0:	2904      	cmp	r1, #4
    d9f2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    d9f6:	f001 87bb 	beq.w	f970 <d_print_comp_inner+0x2738>
    d9fa:	2902      	cmp	r1, #2
    d9fc:	d11a      	bne.n	da34 <d_print_comp_inner+0x7fc>
    d9fe:	f8d6 b008 	ldr.w	fp, [r6, #8]
    da02:	f89b 3000 	ldrb.w	r3, [fp]
    da06:	2b46      	cmp	r3, #70	; 0x46
    da08:	f002 8035 	beq.w	fa76 <d_print_comp_inner+0x283e>
    da0c:	462b      	mov	r3, r5
    da0e:	eb09 1e07 	add.w	lr, r9, r7, lsl #4
    da12:	9601      	str	r6, [sp, #4]
    da14:	465d      	mov	r5, fp
    da16:	4676      	mov	r6, lr
    da18:	46a2      	mov	sl, r4
    da1a:	469b      	mov	fp, r3
    da1c:	782b      	ldrb	r3, [r5, #0]
    da1e:	f1a3 021c 	sub.w	r2, r3, #28
    da22:	2a04      	cmp	r2, #4
    da24:	f241 805d 	bls.w	eae2 <d_print_comp_inner+0x18aa>
    da28:	2b4c      	cmp	r3, #76	; 0x4c
    da2a:	f001 805a 	beq.w	eae2 <d_print_comp_inner+0x18aa>
    da2e:	9e01      	ldr	r6, [sp, #4]
    da30:	4654      	mov	r4, sl
    da32:	465d      	mov	r5, fp
    da34:	68aa      	ldr	r2, [r5, #8]
    da36:	4641      	mov	r1, r8
    da38:	4620      	mov	r0, r4
    da3a:	f002 f9a1 	bl	fd80 <d_print_comp>
    da3e:	7833      	ldrb	r3, [r6, #0]
    da40:	2b04      	cmp	r3, #4
    da42:	f002 8020 	beq.w	fa86 <d_print_comp_inner+0x284e>
    da46:	eb09 1907 	add.w	r9, r9, r7, lsl #4
    da4a:	2620      	movs	r6, #32
    da4c:	f859 5c08 	ldr.w	r5, [r9, #-8]
    da50:	3f01      	subs	r7, #1
    da52:	b985      	cbnz	r5, da76 <d_print_comp_inner+0x83e>
    da54:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    da58:	29ff      	cmp	r1, #255	; 0xff
    da5a:	f002 8043 	beq.w	fae4 <d_print_comp_inner+0x28ac>
    da5e:	1c4b      	adds	r3, r1, #1
    da60:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    da64:	f859 2c0c 	ldr.w	r2, [r9, #-12]
    da68:	5466      	strb	r6, [r4, r1]
    da6a:	4620      	mov	r0, r4
    da6c:	4641      	mov	r1, r8
    da6e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    da72:	f002 f995 	bl	fda0 <d_print_mod>
    da76:	f1a9 0910 	sub.w	r9, r9, #16
    da7a:	2f00      	cmp	r7, #0
    da7c:	d1e6      	bne.n	da4c <d_print_comp_inner+0x814>
    da7e:	9b00      	ldr	r3, [sp, #0]
    da80:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    da84:	e4a6      	b.n	d3d4 <d_print_comp_inner+0x19c>
    da86:	4ed1      	ldr	r6, [pc, #836]	; (ddcc <d_print_comp_inner+0xb94>)
    da88:	686a      	ldr	r2, [r5, #4]
    da8a:	f002 f979 	bl	fd80 <d_print_comp>
    da8e:	f106 0a05 	add.w	sl, r6, #5
    da92:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    da96:	f04f 0900 	mov.w	r9, #0
    da9a:	e009      	b.n	dab0 <d_print_comp_inner+0x878>
    da9c:	460b      	mov	r3, r1
    da9e:	3101      	adds	r1, #1
    daa0:	45b2      	cmp	sl, r6
    daa2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    daa6:	54e7      	strb	r7, [r4, r3]
    daa8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    daac:	f000 86d1 	beq.w	e852 <d_print_comp_inner+0x161a>
    dab0:	29ff      	cmp	r1, #255	; 0xff
    dab2:	f816 7b01 	ldrb.w	r7, [r6], #1
    dab6:	d1f1      	bne.n	da9c <d_print_comp_inner+0x864>
    dab8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    dabc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    dac0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    dac4:	4620      	mov	r0, r4
    dac6:	4798      	blx	r3
    dac8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    dacc:	3301      	adds	r3, #1
    dace:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    dad2:	2101      	movs	r1, #1
    dad4:	2300      	movs	r3, #0
    dad6:	e7e3      	b.n	daa0 <d_print_comp_inner+0x868>
    dad8:	686a      	ldr	r2, [r5, #4]
    dada:	f002 f951 	bl	fd80 <d_print_comp>
    dade:	f018 0904 	ands.w	r9, r8, #4
    dae2:	f001 82aa 	beq.w	f03a <d_print_comp_inner+0x1e02>
    dae6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    daea:	29ff      	cmp	r1, #255	; 0xff
    daec:	f001 859a 	beq.w	f624 <d_print_comp_inner+0x23ec>
    daf0:	1c4a      	adds	r2, r1, #1
    daf2:	232e      	movs	r3, #46	; 0x2e
    daf4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    daf8:	5463      	strb	r3, [r4, r1]
    dafa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    dafe:	68ad      	ldr	r5, [r5, #8]
    db00:	782b      	ldrb	r3, [r5, #0]
    db02:	2b46      	cmp	r3, #70	; 0x46
    db04:	f001 83cc 	beq.w	f2a0 <d_print_comp_inner+0x2068>
    db08:	462a      	mov	r2, r5
    db0a:	4641      	mov	r1, r8
    db0c:	4620      	mov	r0, r4
    db0e:	f002 f937 	bl	fd80 <d_print_comp>
    db12:	e45f      	b.n	d3d4 <d_print_comp_inner+0x19c>
    db14:	f011 0804 	ands.w	r8, r1, #4
    db18:	f041 808b 	bne.w	ec32 <d_print_comp_inner+0x19fa>
    db1c:	68af      	ldr	r7, [r5, #8]
    db1e:	686d      	ldr	r5, [r5, #4]
    db20:	2f00      	cmp	r7, #0
    db22:	f43f ac57 	beq.w	d3d4 <d_print_comp_inner+0x19c>
    db26:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    db2a:	442f      	add	r7, r5
    db2c:	e009      	b.n	db42 <d_print_comp_inner+0x90a>
    db2e:	460b      	mov	r3, r1
    db30:	3101      	adds	r1, #1
    db32:	42bd      	cmp	r5, r7
    db34:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    db38:	54e6      	strb	r6, [r4, r3]
    db3a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    db3e:	f43f ac49 	beq.w	d3d4 <d_print_comp_inner+0x19c>
    db42:	29ff      	cmp	r1, #255	; 0xff
    db44:	f815 6b01 	ldrb.w	r6, [r5], #1
    db48:	d1f1      	bne.n	db2e <d_print_comp_inner+0x8f6>
    db4a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    db4e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    db52:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    db56:	4620      	mov	r0, r4
    db58:	4798      	blx	r3
    db5a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    db5e:	3301      	adds	r3, #1
    db60:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    db64:	2101      	movs	r1, #1
    db66:	2300      	movs	r3, #0
    db68:	e7e3      	b.n	db32 <d_print_comp_inner+0x8fa>
    db6a:	2301      	movs	r3, #1
    db6c:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    db70:	e430      	b.n	d3d4 <d_print_comp_inner+0x19c>
    db72:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
    db76:	2b00      	cmp	r3, #0
    db78:	f041 8106 	bne.w	ed88 <d_print_comp_inner+0x1b50>
    db7c:	1d29      	adds	r1, r5, #4
    db7e:	f7fd fa97 	bl	b0b0 <d_lookup_template_argument.isra.6>
    db82:	2800      	cmp	r0, #0
    db84:	f43f ac3a 	beq.w	d3fc <d_print_comp_inner+0x1c4>
    db88:	7803      	ldrb	r3, [r0, #0]
    db8a:	2b2f      	cmp	r3, #47	; 0x2f
    db8c:	f001 83fc 	beq.w	f388 <d_print_comp_inner+0x2150>
    db90:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
    db94:	682b      	ldr	r3, [r5, #0]
    db96:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    db9a:	4602      	mov	r2, r0
    db9c:	4641      	mov	r1, r8
    db9e:	4620      	mov	r0, r4
    dba0:	f002 f8ee 	bl	fd80 <d_print_comp>
    dba4:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    dba8:	e414      	b.n	d3d4 <d_print_comp_inner+0x19c>
    dbaa:	2300      	movs	r3, #0
    dbac:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
    dbb0:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
    dbb4:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    dbb8:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
    dbbc:	f011 0f04 	tst.w	r1, #4
    dbc0:	686e      	ldr	r6, [r5, #4]
    dbc2:	d005      	beq.n	dbd0 <d_print_comp_inner+0x998>
    dbc4:	7833      	ldrb	r3, [r6, #0]
    dbc6:	b91b      	cbnz	r3, dbd0 <d_print_comp_inner+0x998>
    dbc8:	68b2      	ldr	r2, [r6, #8]
    dbca:	2a06      	cmp	r2, #6
    dbcc:	f001 853c 	beq.w	f648 <d_print_comp_inner+0x2410>
    dbd0:	4632      	mov	r2, r6
    dbd2:	4641      	mov	r1, r8
    dbd4:	4620      	mov	r0, r4
    dbd6:	f002 f8d3 	bl	fd80 <d_print_comp>
    dbda:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    dbde:	2b3c      	cmp	r3, #60	; 0x3c
    dbe0:	f001 8274 	beq.w	f0cc <d_print_comp_inner+0x1e94>
    dbe4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    dbe8:	2bff      	cmp	r3, #255	; 0xff
    dbea:	f001 8489 	beq.w	f500 <d_print_comp_inner+0x22c8>
    dbee:	1c59      	adds	r1, r3, #1
    dbf0:	223c      	movs	r2, #60	; 0x3c
    dbf2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    dbf6:	54e2      	strb	r2, [r4, r3]
    dbf8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    dbfc:	4641      	mov	r1, r8
    dbfe:	68aa      	ldr	r2, [r5, #8]
    dc00:	4620      	mov	r0, r4
    dc02:	f002 f8bd 	bl	fd80 <d_print_comp>
    dc06:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    dc0a:	2b3e      	cmp	r3, #62	; 0x3e
    dc0c:	f001 8239 	beq.w	f082 <d_print_comp_inner+0x1e4a>
    dc10:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    dc14:	2bff      	cmp	r3, #255	; 0xff
    dc16:	f001 8460 	beq.w	f4da <d_print_comp_inner+0x22a2>
    dc1a:	1c59      	adds	r1, r3, #1
    dc1c:	223e      	movs	r2, #62	; 0x3e
    dc1e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    dc22:	54e2      	strb	r2, [r4, r3]
    dc24:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    dc28:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
    dc2c:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
    dc30:	f7ff bbd0 	b.w	d3d4 <d_print_comp_inner+0x19c>
    dc34:	686f      	ldr	r7, [r5, #4]
    dc36:	2f00      	cmp	r7, #0
    dc38:	f001 8082 	beq.w	ed40 <d_print_comp_inner+0x1b08>
    dc3c:	4d64      	ldr	r5, [pc, #400]	; (ddd0 <d_print_comp_inner+0xb98>)
    dc3e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    dc42:	f105 0906 	add.w	r9, r5, #6
    dc46:	f04f 0800 	mov.w	r8, #0
    dc4a:	e009      	b.n	dc60 <d_print_comp_inner+0xa28>
    dc4c:	460b      	mov	r3, r1
    dc4e:	3101      	adds	r1, #1
    dc50:	45a9      	cmp	r9, r5
    dc52:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    dc56:	54e6      	strb	r6, [r4, r3]
    dc58:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    dc5c:	f000 8782 	beq.w	eb64 <d_print_comp_inner+0x192c>
    dc60:	29ff      	cmp	r1, #255	; 0xff
    dc62:	f815 6b01 	ldrb.w	r6, [r5], #1
    dc66:	d1f1      	bne.n	dc4c <d_print_comp_inner+0xa14>
    dc68:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    dc6c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    dc70:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    dc74:	4620      	mov	r0, r4
    dc76:	4798      	blx	r3
    dc78:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    dc7c:	3301      	adds	r3, #1
    dc7e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    dc82:	2101      	movs	r1, #1
    dc84:	2300      	movs	r3, #0
    dc86:	e7e3      	b.n	dc50 <d_print_comp_inner+0xa18>
    dc88:	4e52      	ldr	r6, [pc, #328]	; (ddd4 <d_print_comp_inner+0xb9c>)
    dc8a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    dc8e:	f106 0a0a 	add.w	sl, r6, #10
    dc92:	f04f 0900 	mov.w	r9, #0
    dc96:	e009      	b.n	dcac <d_print_comp_inner+0xa74>
    dc98:	460b      	mov	r3, r1
    dc9a:	3101      	adds	r1, #1
    dc9c:	4556      	cmp	r6, sl
    dc9e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    dca2:	54e7      	strb	r7, [r4, r3]
    dca4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    dca8:	f000 8701 	beq.w	eaae <d_print_comp_inner+0x1876>
    dcac:	29ff      	cmp	r1, #255	; 0xff
    dcae:	f816 7b01 	ldrb.w	r7, [r6], #1
    dcb2:	d1f1      	bne.n	dc98 <d_print_comp_inner+0xa60>
    dcb4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    dcb8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    dcbc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    dcc0:	4620      	mov	r0, r4
    dcc2:	4798      	blx	r3
    dcc4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    dcc8:	3301      	adds	r3, #1
    dcca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    dcce:	2101      	movs	r1, #1
    dcd0:	2300      	movs	r3, #0
    dcd2:	e7e3      	b.n	dc9c <d_print_comp_inner+0xa64>
    dcd4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    dcd8:	792d      	ldrb	r5, [r5, #4]
    dcda:	29ff      	cmp	r1, #255	; 0xff
    dcdc:	f001 82ab 	beq.w	f236 <d_print_comp_inner+0x1ffe>
    dce0:	1c4b      	adds	r3, r1, #1
    dce2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    dce6:	5465      	strb	r5, [r4, r1]
    dce8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    dcec:	f7ff bb72 	b.w	d3d4 <d_print_comp_inner+0x19c>
    dcf0:	686a      	ldr	r2, [r5, #4]
    dcf2:	f002 f845 	bl	fd80 <d_print_comp>
    dcf6:	68aa      	ldr	r2, [r5, #8]
    dcf8:	4641      	mov	r1, r8
    dcfa:	4620      	mov	r0, r4
    dcfc:	f002 f840 	bl	fd80 <d_print_comp>
    dd00:	f7ff bb68 	b.w	d3d4 <d_print_comp_inner+0x19c>
    dd04:	4e34      	ldr	r6, [pc, #208]	; (ddd8 <d_print_comp_inner+0xba0>)
    dd06:	686a      	ldr	r2, [r5, #4]
    dd08:	f002 f83a 	bl	fd80 <d_print_comp>
    dd0c:	f106 0a08 	add.w	sl, r6, #8
    dd10:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    dd14:	f04f 0900 	mov.w	r9, #0
    dd18:	e009      	b.n	dd2e <d_print_comp_inner+0xaf6>
    dd1a:	460b      	mov	r3, r1
    dd1c:	3101      	adds	r1, #1
    dd1e:	4556      	cmp	r6, sl
    dd20:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    dd24:	54e7      	strb	r7, [r4, r3]
    dd26:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    dd2a:	f000 8508 	beq.w	e73e <d_print_comp_inner+0x1506>
    dd2e:	29ff      	cmp	r1, #255	; 0xff
    dd30:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    dd34:	d1f1      	bne.n	dd1a <d_print_comp_inner+0xae2>
    dd36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    dd3a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    dd3e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    dd42:	4620      	mov	r0, r4
    dd44:	4798      	blx	r3
    dd46:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    dd4a:	3301      	adds	r3, #1
    dd4c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    dd50:	2101      	movs	r1, #1
    dd52:	2300      	movs	r3, #0
    dd54:	e7e3      	b.n	dd1e <d_print_comp_inner+0xae6>
    dd56:	686a      	ldr	r2, [r5, #4]
    dd58:	b10a      	cbz	r2, dd5e <d_print_comp_inner+0xb26>
    dd5a:	f002 f811 	bl	fd80 <d_print_comp>
    dd5e:	68ab      	ldr	r3, [r5, #8]
    dd60:	2b00      	cmp	r3, #0
    dd62:	f43f ab37 	beq.w	d3d4 <d_print_comp_inner+0x19c>
    dd66:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
    dd6a:	2efd      	cmp	r6, #253	; 0xfd
    dd6c:	f201 81bc 	bhi.w	f0e8 <d_print_comp_inner+0x1eb0>
    dd70:	4f1a      	ldr	r7, [pc, #104]	; (dddc <d_print_comp_inner+0xba4>)
    dd72:	f04f 0a00 	mov.w	sl, #0
    dd76:	f107 0b02 	add.w	fp, r7, #2
    dd7a:	4631      	mov	r1, r6
    dd7c:	e009      	b.n	dd92 <d_print_comp_inner+0xb5a>
    dd7e:	460b      	mov	r3, r1
    dd80:	3101      	adds	r1, #1
    dd82:	455f      	cmp	r7, fp
    dd84:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    dd88:	54e6      	strb	r6, [r4, r3]
    dd8a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    dd8e:	f000 86c1 	beq.w	eb14 <d_print_comp_inner+0x18dc>
    dd92:	29ff      	cmp	r1, #255	; 0xff
    dd94:	f817 6b01 	ldrb.w	r6, [r7], #1
    dd98:	d1f1      	bne.n	dd7e <d_print_comp_inner+0xb46>
    dd9a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    dd9e:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
    dda2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    dda6:	4620      	mov	r0, r4
    dda8:	4798      	blx	r3
    ddaa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    ddae:	3301      	adds	r3, #1
    ddb0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ddb4:	2101      	movs	r1, #1
    ddb6:	2300      	movs	r3, #0
    ddb8:	e7e3      	b.n	dd82 <d_print_comp_inner+0xb4a>
    ddba:	4e09      	ldr	r6, [pc, #36]	; (dde0 <d_print_comp_inner+0xba8>)
    ddbc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ddc0:	f106 0a09 	add.w	sl, r6, #9
    ddc4:	f04f 0900 	mov.w	r9, #0
    ddc8:	e016      	b.n	ddf8 <d_print_comp_inner+0xbc0>
    ddca:	bf00      	nop
    ddcc:	00022c54 	.word	0x00022c54
    ddd0:	00022e5c 	.word	0x00022e5c
    ddd4:	00022e44 	.word	0x00022e44
    ddd8:	00022ec3 	.word	0x00022ec3
    dddc:	00022de8 	.word	0x00022de8
    dde0:	00022df7 	.word	0x00022df7
    dde4:	460b      	mov	r3, r1
    dde6:	3101      	adds	r1, #1
    dde8:	4556      	cmp	r6, sl
    ddea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ddee:	54e7      	strb	r7, [r4, r3]
    ddf0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    ddf4:	f000 8594 	beq.w	e920 <d_print_comp_inner+0x16e8>
    ddf8:	29ff      	cmp	r1, #255	; 0xff
    ddfa:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    ddfe:	d1f1      	bne.n	dde4 <d_print_comp_inner+0xbac>
    de00:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    de04:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    de08:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    de0c:	4620      	mov	r0, r4
    de0e:	4798      	blx	r3
    de10:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    de14:	3301      	adds	r3, #1
    de16:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    de1a:	2101      	movs	r1, #1
    de1c:	2300      	movs	r3, #0
    de1e:	e7e3      	b.n	dde8 <d_print_comp_inner+0xbb0>
    de20:	4ed1      	ldr	r6, [pc, #836]	; (e168 <d_print_comp_inner+0xf30>)
    de22:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    de26:	f106 0a09 	add.w	sl, r6, #9
    de2a:	f04f 0900 	mov.w	r9, #0
    de2e:	e009      	b.n	de44 <d_print_comp_inner+0xc0c>
    de30:	460b      	mov	r3, r1
    de32:	3101      	adds	r1, #1
    de34:	4556      	cmp	r6, sl
    de36:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    de3a:	54e7      	strb	r7, [r4, r3]
    de3c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    de40:	f000 8597 	beq.w	e972 <d_print_comp_inner+0x173a>
    de44:	29ff      	cmp	r1, #255	; 0xff
    de46:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    de4a:	d1f1      	bne.n	de30 <d_print_comp_inner+0xbf8>
    de4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    de50:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    de54:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    de58:	4620      	mov	r0, r4
    de5a:	4798      	blx	r3
    de5c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    de60:	3301      	adds	r3, #1
    de62:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    de66:	2101      	movs	r1, #1
    de68:	2300      	movs	r3, #0
    de6a:	e7e3      	b.n	de34 <d_print_comp_inner+0xbfc>
    de6c:	f8d5 a004 	ldr.w	sl, [r5, #4]
    de70:	4dbe      	ldr	r5, [pc, #760]	; (e16c <d_print_comp_inner+0xf34>)
    de72:	f8da 7008 	ldr.w	r7, [sl, #8]
    de76:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    de7a:	f105 0808 	add.w	r8, r5, #8
    de7e:	f04f 0900 	mov.w	r9, #0
    de82:	e009      	b.n	de98 <d_print_comp_inner+0xc60>
    de84:	460b      	mov	r3, r1
    de86:	3101      	adds	r1, #1
    de88:	45a8      	cmp	r8, r5
    de8a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    de8e:	54e6      	strb	r6, [r4, r3]
    de90:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    de94:	f000 8506 	beq.w	e8a4 <d_print_comp_inner+0x166c>
    de98:	29ff      	cmp	r1, #255	; 0xff
    de9a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    de9e:	d1f1      	bne.n	de84 <d_print_comp_inner+0xc4c>
    dea0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    dea4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    dea8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    deac:	4620      	mov	r0, r4
    deae:	4798      	blx	r3
    deb0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    deb4:	3301      	adds	r3, #1
    deb6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    deba:	2101      	movs	r1, #1
    debc:	2300      	movs	r3, #0
    debe:	e7e3      	b.n	de88 <d_print_comp_inner+0xc50>
    dec0:	686a      	ldr	r2, [r5, #4]
    dec2:	68ae      	ldr	r6, [r5, #8]
    dec4:	b10a      	cbz	r2, deca <d_print_comp_inner+0xc92>
    dec6:	f001 ff5b 	bl	fd80 <d_print_comp>
    deca:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    dece:	2bff      	cmp	r3, #255	; 0xff
    ded0:	f001 82b1 	beq.w	f436 <d_print_comp_inner+0x21fe>
    ded4:	1c5a      	adds	r2, r3, #1
    ded6:	257b      	movs	r5, #123	; 0x7b
    ded8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    dedc:	4641      	mov	r1, r8
    dede:	54e5      	strb	r5, [r4, r3]
    dee0:	4632      	mov	r2, r6
    dee2:	4620      	mov	r0, r4
    dee4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    dee8:	f001 ff4a 	bl	fd80 <d_print_comp>
    deec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    def0:	29ff      	cmp	r1, #255	; 0xff
    def2:	f001 81e7 	beq.w	f2c4 <d_print_comp_inner+0x208c>
    def6:	1c4a      	adds	r2, r1, #1
    def8:	237d      	movs	r3, #125	; 0x7d
    defa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    defe:	5463      	strb	r3, [r4, r1]
    df00:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    df04:	f7ff ba66 	b.w	d3d4 <d_print_comp_inner+0x19c>
    df08:	f8d5 9004 	ldr.w	r9, [r5, #4]
    df0c:	68ae      	ldr	r6, [r5, #8]
    df0e:	f899 3000 	ldrb.w	r3, [r9]
    df12:	2b31      	cmp	r3, #49	; 0x31
    df14:	f000 87cb 	beq.w	eeae <d_print_comp_inner+0x1c76>
    df18:	2b33      	cmp	r3, #51	; 0x33
    df1a:	f041 86d3 	bne.w	fcc4 <d_print_comp_inner+0x2a8c>
    df1e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    df22:	29ff      	cmp	r1, #255	; 0xff
    df24:	f001 84c3 	beq.w	f8ae <d_print_comp_inner+0x2676>
    df28:	1c4a      	adds	r2, r1, #1
    df2a:	2328      	movs	r3, #40	; 0x28
    df2c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    df30:	5463      	strb	r3, [r4, r1]
    df32:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    df36:	a904      	add	r1, sp, #16
    df38:	f8d9 2004 	ldr.w	r2, [r9, #4]
    df3c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    df40:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
    df44:	4620      	mov	r0, r4
    df46:	4641      	mov	r1, r8
    df48:	9305      	str	r3, [sp, #20]
    df4a:	9204      	str	r2, [sp, #16]
    df4c:	f7ff f974 	bl	d238 <d_print_comp_inner>
    df50:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    df54:	9b05      	ldr	r3, [sp, #20]
    df56:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    df5a:	29ff      	cmp	r1, #255	; 0xff
    df5c:	f001 8496 	beq.w	f88c <d_print_comp_inner+0x2654>
    df60:	2329      	movs	r3, #41	; 0x29
    df62:	1c4a      	adds	r2, r1, #1
    df64:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    df68:	5463      	strb	r3, [r4, r1]
    df6a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    df6e:	4632      	mov	r2, r6
    df70:	4641      	mov	r1, r8
    df72:	4620      	mov	r0, r4
    df74:	f002 fd2a 	bl	109cc <d_print_subexpr>
    df78:	f7ff ba2c 	b.w	d3d4 <d_print_comp_inner+0x19c>
    df7c:	686a      	ldr	r2, [r5, #4]
    df7e:	f002 fce7 	bl	10950 <d_print_expr_op>
    df82:	f7ff ba27 	b.w	d3d4 <d_print_comp_inner+0x19c>
    df86:	f011 0f20 	tst.w	r1, #32
    df8a:	f040 8753 	bne.w	ee34 <d_print_comp_inner+0x1bfc>
    df8e:	686a      	ldr	r2, [r5, #4]
    df90:	b11a      	cbz	r2, df9a <d_print_comp_inner+0xd62>
    df92:	f018 0340 	ands.w	r3, r8, #64	; 0x40
    df96:	f001 81d0 	beq.w	f33a <d_print_comp_inner+0x2102>
    df9a:	f028 0860 	bic.w	r8, r8, #96	; 0x60
    df9e:	f105 0208 	add.w	r2, r5, #8
    dfa2:	4641      	mov	r1, r8
    dfa4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    dfa8:	4620      	mov	r0, r4
    dfaa:	f002 fbdd 	bl	10768 <d_print_function_type.isra.11>
    dfae:	f7ff ba11 	b.w	d3d4 <d_print_comp_inner+0x19c>
    dfb2:	f011 0804 	ands.w	r8, r1, #4
    dfb6:	686b      	ldr	r3, [r5, #4]
    dfb8:	f040 8612 	bne.w	ebe0 <d_print_comp_inner+0x19a8>
    dfbc:	e893 00a0 	ldmia.w	r3, {r5, r7}
    dfc0:	2f00      	cmp	r7, #0
    dfc2:	f43f aa07 	beq.w	d3d4 <d_print_comp_inner+0x19c>
    dfc6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    dfca:	442f      	add	r7, r5
    dfcc:	e009      	b.n	dfe2 <d_print_comp_inner+0xdaa>
    dfce:	460b      	mov	r3, r1
    dfd0:	3101      	adds	r1, #1
    dfd2:	42bd      	cmp	r5, r7
    dfd4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    dfd8:	54e6      	strb	r6, [r4, r3]
    dfda:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    dfde:	f43f a9f9 	beq.w	d3d4 <d_print_comp_inner+0x19c>
    dfe2:	29ff      	cmp	r1, #255	; 0xff
    dfe4:	f815 6b01 	ldrb.w	r6, [r5], #1
    dfe8:	d1f1      	bne.n	dfce <d_print_comp_inner+0xd96>
    dfea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    dfee:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    dff2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    dff6:	4620      	mov	r0, r4
    dff8:	4798      	blx	r3
    dffa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    dffe:	3301      	adds	r3, #1
    e000:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e004:	2101      	movs	r1, #1
    e006:	2300      	movs	r3, #0
    e008:	e7e3      	b.n	dfd2 <d_print_comp_inner+0xd9a>
    e00a:	6869      	ldr	r1, [r5, #4]
    e00c:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
    e010:	780b      	ldrb	r3, [r1, #0]
    e012:	2f00      	cmp	r7, #0
    e014:	f040 85e1 	bne.w	ebda <d_print_comp_inner+0x19a2>
    e018:	2b05      	cmp	r3, #5
    e01a:	f001 81c7 	beq.w	f3ac <d_print_comp_inner+0x2174>
    e01e:	2b23      	cmp	r3, #35	; 0x23
    e020:	f000 8689 	beq.w	ed36 <d_print_comp_inner+0x1afe>
    e024:	782a      	ldrb	r2, [r5, #0]
    e026:	429a      	cmp	r2, r3
    e028:	f000 8685 	beq.w	ed36 <d_print_comp_inner+0x1afe>
    e02c:	2b24      	cmp	r3, #36	; 0x24
    e02e:	f47f a9eb 	bne.w	d408 <d_print_comp_inner+0x1d0>
    e032:	a814      	add	r0, sp, #80	; 0x50
    e034:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    e038:	684a      	ldr	r2, [r1, #4]
    e03a:	f840 3d40 	str.w	r3, [r0, #-64]!
    e03e:	2100      	movs	r1, #0
    e040:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    e044:	9505      	str	r5, [sp, #20]
    e046:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
    e04a:	9106      	str	r1, [sp, #24]
    e04c:	9307      	str	r3, [sp, #28]
    e04e:	2a00      	cmp	r2, #0
    e050:	f47f a9e8 	bne.w	d424 <d_print_comp_inner+0x1ec>
    e054:	f7ff b9e5 	b.w	d422 <d_print_comp_inner+0x1ea>
    e058:	686a      	ldr	r2, [r5, #4]
    e05a:	f001 fe91 	bl	fd80 <d_print_comp>
    e05e:	f7ff b9b9 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e062:	ab14      	add	r3, sp, #80	; 0x50
    e064:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    e068:	f843 2d40 	str.w	r2, [r3, #-64]!
    e06c:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    e070:	68aa      	ldr	r2, [r5, #8]
    e072:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    e076:	9307      	str	r3, [sp, #28]
    e078:	2600      	movs	r6, #0
    e07a:	9505      	str	r5, [sp, #20]
    e07c:	9606      	str	r6, [sp, #24]
    e07e:	f001 fe7f 	bl	fd80 <d_print_comp>
    e082:	9b06      	ldr	r3, [sp, #24]
    e084:	b923      	cbnz	r3, e090 <d_print_comp_inner+0xe58>
    e086:	462a      	mov	r2, r5
    e088:	4641      	mov	r1, r8
    e08a:	4620      	mov	r0, r4
    e08c:	f001 fe88 	bl	fda0 <d_print_mod>
    e090:	9b04      	ldr	r3, [sp, #16]
    e092:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    e096:	f7ff b99d 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e09a:	f10d 0950 	add.w	r9, sp, #80	; 0x50
    e09e:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
    e0a2:	f849 bd40 	str.w	fp, [r9, #-64]!
    e0a6:	2200      	movs	r2, #0
    e0a8:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    e0ac:	f8cd b000 	str.w	fp, [sp]
    e0b0:	4659      	mov	r1, fp
    e0b2:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
    e0b6:	9505      	str	r5, [sp, #20]
    e0b8:	9206      	str	r2, [sp, #24]
    e0ba:	9307      	str	r3, [sp, #28]
    e0bc:	2900      	cmp	r1, #0
    e0be:	f001 83a0 	beq.w	f802 <d_print_comp_inner+0x25ca>
    e0c2:	684b      	ldr	r3, [r1, #4]
    e0c4:	781b      	ldrb	r3, [r3, #0]
    e0c6:	3b19      	subs	r3, #25
    e0c8:	2b02      	cmp	r3, #2
    e0ca:	f201 839a 	bhi.w	f802 <d_print_comp_inner+0x25ca>
    e0ce:	46ac      	mov	ip, r5
    e0d0:	2701      	movs	r7, #1
    e0d2:	460e      	mov	r6, r1
    e0d4:	464d      	mov	r5, r9
    e0d6:	e004      	b.n	e0e2 <d_print_comp_inner+0xeaa>
    e0d8:	6873      	ldr	r3, [r6, #4]
    e0da:	781b      	ldrb	r3, [r3, #0]
    e0dc:	3b19      	subs	r3, #25
    e0de:	2b02      	cmp	r3, #2
    e0e0:	d81b      	bhi.n	e11a <d_print_comp_inner+0xee2>
    e0e2:	68b3      	ldr	r3, [r6, #8]
    e0e4:	ea4f 1e07 	mov.w	lr, r7, lsl #4
    e0e8:	aa14      	add	r2, sp, #80	; 0x50
    e0ea:	eb02 0b0e 	add.w	fp, r2, lr
    e0ee:	b98b      	cbnz	r3, e114 <d_print_comp_inner+0xedc>
    e0f0:	2f03      	cmp	r7, #3
    e0f2:	f201 80f9 	bhi.w	f2e8 <d_print_comp_inner+0x20b0>
    e0f6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    e0fa:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
    e0fe:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
    e102:	f84b 5c40 	str.w	r5, [fp, #-64]
    e106:	2301      	movs	r3, #1
    e108:	eb09 050e 	add.w	r5, r9, lr
    e10c:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    e110:	3701      	adds	r7, #1
    e112:	60b3      	str	r3, [r6, #8]
    e114:	6836      	ldr	r6, [r6, #0]
    e116:	2e00      	cmp	r6, #0
    e118:	d1de      	bne.n	e0d8 <d_print_comp_inner+0xea0>
    e11a:	f8dc 2008 	ldr.w	r2, [ip, #8]
    e11e:	4641      	mov	r1, r8
    e120:	4620      	mov	r0, r4
    e122:	4665      	mov	r5, ip
    e124:	f001 fe2c 	bl	fd80 <d_print_comp>
    e128:	9b06      	ldr	r3, [sp, #24]
    e12a:	9a00      	ldr	r2, [sp, #0]
    e12c:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
    e130:	2b00      	cmp	r3, #0
    e132:	f47f a94f 	bne.w	d3d4 <d_print_comp_inner+0x19c>
    e136:	2f01      	cmp	r7, #1
    e138:	d00c      	beq.n	e154 <d_print_comp_inner+0xf1c>
    e13a:	eb09 1907 	add.w	r9, r9, r7, lsl #4
    e13e:	f859 2c0c 	ldr.w	r2, [r9, #-12]
    e142:	3f01      	subs	r7, #1
    e144:	4641      	mov	r1, r8
    e146:	4620      	mov	r0, r4
    e148:	f001 fe2a 	bl	fda0 <d_print_mod>
    e14c:	2f01      	cmp	r7, #1
    e14e:	f1a9 0910 	sub.w	r9, r9, #16
    e152:	d1f4      	bne.n	e13e <d_print_comp_inner+0xf06>
    e154:	1d2a      	adds	r2, r5, #4
    e156:	4641      	mov	r1, r8
    e158:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    e15c:	4620      	mov	r0, r4
    e15e:	f002 fa27 	bl	105b0 <d_print_array_type.isra.10>
    e162:	f7ff b937 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e166:	bf00      	nop
    e168:	00022df7 	.word	0x00022df7
    e16c:	00022deb 	.word	0x00022deb
    e170:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
    e174:	2b00      	cmp	r3, #0
    e176:	f040 8674 	bne.w	ee62 <d_print_comp_inner+0x1c2a>
    e17a:	686a      	ldr	r2, [r5, #4]
    e17c:	4bd5      	ldr	r3, [pc, #852]	; (e4d4 <d_print_comp_inner+0x129c>)
    e17e:	6851      	ldr	r1, [r2, #4]
    e180:	4299      	cmp	r1, r3
    e182:	f000 866a 	beq.w	ee5a <d_print_comp_inner+0x1c22>
    e186:	4641      	mov	r1, r8
    e188:	4620      	mov	r0, r4
    e18a:	f001 fdf9 	bl	fd80 <d_print_comp>
    e18e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e192:	2bff      	cmp	r3, #255	; 0xff
    e194:	f001 82b2 	beq.w	f6fc <d_print_comp_inner+0x24c4>
    e198:	1c59      	adds	r1, r3, #1
    e19a:	2220      	movs	r2, #32
    e19c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e1a0:	54e2      	strb	r2, [r4, r3]
    e1a2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    e1a6:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
    e1aa:	2b00      	cmp	r3, #0
    e1ac:	f000 8595 	beq.w	ecda <d_print_comp_inner+0x1aa2>
    e1b0:	4dc9      	ldr	r5, [pc, #804]	; (e4d8 <d_print_comp_inner+0x12a0>)
    e1b2:	f04f 0800 	mov.w	r8, #0
    e1b6:	1daf      	adds	r7, r5, #6
    e1b8:	e009      	b.n	e1ce <d_print_comp_inner+0xf96>
    e1ba:	460b      	mov	r3, r1
    e1bc:	3101      	adds	r1, #1
    e1be:	42bd      	cmp	r5, r7
    e1c0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e1c4:	54e6      	strb	r6, [r4, r3]
    e1c6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    e1ca:	f43f a903 	beq.w	d3d4 <d_print_comp_inner+0x19c>
    e1ce:	29ff      	cmp	r1, #255	; 0xff
    e1d0:	f815 6b01 	ldrb.w	r6, [r5], #1
    e1d4:	d1f1      	bne.n	e1ba <d_print_comp_inner+0xf82>
    e1d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e1da:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    e1de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e1e2:	4620      	mov	r0, r4
    e1e4:	4798      	blx	r3
    e1e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e1ea:	3301      	adds	r3, #1
    e1ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e1f0:	2101      	movs	r1, #1
    e1f2:	2300      	movs	r3, #0
    e1f4:	e7e3      	b.n	e1be <d_print_comp_inner+0xf86>
    e1f6:	4eb9      	ldr	r6, [pc, #740]	; (e4dc <d_print_comp_inner+0x12a4>)
    e1f8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    e1fc:	f106 090e 	add.w	r9, r6, #14
    e200:	f04f 0800 	mov.w	r8, #0
    e204:	e009      	b.n	e21a <d_print_comp_inner+0xfe2>
    e206:	460b      	mov	r3, r1
    e208:	3101      	adds	r1, #1
    e20a:	45b1      	cmp	r9, r6
    e20c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e210:	54e7      	strb	r7, [r4, r3]
    e212:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    e216:	f000 83b3 	beq.w	e980 <d_print_comp_inner+0x1748>
    e21a:	29ff      	cmp	r1, #255	; 0xff
    e21c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    e220:	d1f1      	bne.n	e206 <d_print_comp_inner+0xfce>
    e222:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e226:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    e22a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e22e:	4620      	mov	r0, r4
    e230:	4798      	blx	r3
    e232:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e236:	3301      	adds	r3, #1
    e238:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e23c:	2101      	movs	r1, #1
    e23e:	2300      	movs	r3, #0
    e240:	e7e3      	b.n	e20a <d_print_comp_inner+0xfd2>
    e242:	4ea7      	ldr	r6, [pc, #668]	; (e4e0 <d_print_comp_inner+0x12a8>)
    e244:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    e248:	f106 0a1a 	add.w	sl, r6, #26
    e24c:	f04f 0900 	mov.w	r9, #0
    e250:	e009      	b.n	e266 <d_print_comp_inner+0x102e>
    e252:	460b      	mov	r3, r1
    e254:	3101      	adds	r1, #1
    e256:	4556      	cmp	r6, sl
    e258:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e25c:	54e7      	strb	r7, [r4, r3]
    e25e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    e262:	f000 82ef 	beq.w	e844 <d_print_comp_inner+0x160c>
    e266:	29ff      	cmp	r1, #255	; 0xff
    e268:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    e26c:	d1f1      	bne.n	e252 <d_print_comp_inner+0x101a>
    e26e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e272:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    e276:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e27a:	4620      	mov	r0, r4
    e27c:	4798      	blx	r3
    e27e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e282:	3301      	adds	r3, #1
    e284:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e288:	2101      	movs	r1, #1
    e28a:	2300      	movs	r3, #0
    e28c:	e7e3      	b.n	e256 <d_print_comp_inner+0x101e>
    e28e:	6869      	ldr	r1, [r5, #4]
    e290:	f7fc ff2a 	bl	b0e8 <d_find_pack>
    e294:	f04f 0900 	mov.w	r9, #0
    e298:	2800      	cmp	r0, #0
    e29a:	f001 835d 	beq.w	f958 <d_print_comp_inner+0x2720>
    e29e:	7803      	ldrb	r3, [r0, #0]
    e2a0:	2b2f      	cmp	r3, #47	; 0x2f
    e2a2:	f040 8457 	bne.w	eb54 <d_print_comp_inner+0x191c>
    e2a6:	6843      	ldr	r3, [r0, #4]
    e2a8:	2b00      	cmp	r3, #0
    e2aa:	f000 8453 	beq.w	eb54 <d_print_comp_inner+0x191c>
    e2ae:	6880      	ldr	r0, [r0, #8]
    e2b0:	f109 0901 	add.w	r9, r9, #1
    e2b4:	2800      	cmp	r0, #0
    e2b6:	d1f2      	bne.n	e29e <d_print_comp_inner+0x1066>
    e2b8:	686b      	ldr	r3, [r5, #4]
    e2ba:	9300      	str	r3, [sp, #0]
    e2bc:	f109 33ff 	add.w	r3, r9, #4294967295
    e2c0:	9301      	str	r3, [sp, #4]
    e2c2:	f04f 0a00 	mov.w	sl, #0
    e2c6:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
    e2ca:	9a00      	ldr	r2, [sp, #0]
    e2cc:	4641      	mov	r1, r8
    e2ce:	4620      	mov	r0, r4
    e2d0:	f001 fd56 	bl	fd80 <d_print_comp>
    e2d4:	9b01      	ldr	r3, [sp, #4]
    e2d6:	42bb      	cmp	r3, r7
    e2d8:	f340 81ab 	ble.w	e632 <d_print_comp_inner+0x13fa>
    e2dc:	4d81      	ldr	r5, [pc, #516]	; (e4e4 <d_print_comp_inner+0x12ac>)
    e2de:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    e2e2:	f105 0b02 	add.w	fp, r5, #2
    e2e6:	e009      	b.n	e2fc <d_print_comp_inner+0x10c4>
    e2e8:	460b      	mov	r3, r1
    e2ea:	3101      	adds	r1, #1
    e2ec:	45ab      	cmp	fp, r5
    e2ee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e2f2:	54e6      	strb	r6, [r4, r3]
    e2f4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    e2f8:	f000 819b 	beq.w	e632 <d_print_comp_inner+0x13fa>
    e2fc:	29ff      	cmp	r1, #255	; 0xff
    e2fe:	f815 6b01 	ldrb.w	r6, [r5], #1
    e302:	d1f1      	bne.n	e2e8 <d_print_comp_inner+0x10b0>
    e304:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e308:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
    e30c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e310:	4620      	mov	r0, r4
    e312:	4798      	blx	r3
    e314:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e318:	3301      	adds	r3, #1
    e31a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e31e:	2101      	movs	r1, #1
    e320:	2300      	movs	r3, #0
    e322:	e7e3      	b.n	e2ec <d_print_comp_inner+0x10b4>
    e324:	4e70      	ldr	r6, [pc, #448]	; (e4e8 <d_print_comp_inner+0x12b0>)
    e326:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    e32a:	f106 0a16 	add.w	sl, r6, #22
    e32e:	f04f 0900 	mov.w	r9, #0
    e332:	e009      	b.n	e348 <d_print_comp_inner+0x1110>
    e334:	460b      	mov	r3, r1
    e336:	3101      	adds	r1, #1
    e338:	45b2      	cmp	sl, r6
    e33a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e33e:	54e7      	strb	r7, [r4, r3]
    e340:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    e344:	f000 835f 	beq.w	ea06 <d_print_comp_inner+0x17ce>
    e348:	29ff      	cmp	r1, #255	; 0xff
    e34a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    e34e:	d1f1      	bne.n	e334 <d_print_comp_inner+0x10fc>
    e350:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e354:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    e358:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e35c:	4620      	mov	r0, r4
    e35e:	4798      	blx	r3
    e360:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e364:	3301      	adds	r3, #1
    e366:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e36a:	2101      	movs	r1, #1
    e36c:	2300      	movs	r3, #0
    e36e:	e7e3      	b.n	e338 <d_print_comp_inner+0x1100>
    e370:	4e5e      	ldr	r6, [pc, #376]	; (e4ec <d_print_comp_inner+0x12b4>)
    e372:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    e376:	f106 0a0e 	add.w	sl, r6, #14
    e37a:	f04f 0900 	mov.w	r9, #0
    e37e:	e009      	b.n	e394 <d_print_comp_inner+0x115c>
    e380:	460b      	mov	r3, r1
    e382:	3101      	adds	r1, #1
    e384:	4556      	cmp	r6, sl
    e386:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e38a:	54e7      	strb	r7, [r4, r3]
    e38c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    e390:	f000 83a0 	beq.w	ead4 <d_print_comp_inner+0x189c>
    e394:	29ff      	cmp	r1, #255	; 0xff
    e396:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    e39a:	d1f1      	bne.n	e380 <d_print_comp_inner+0x1148>
    e39c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e3a0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    e3a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e3a8:	4620      	mov	r0, r4
    e3aa:	4798      	blx	r3
    e3ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e3b0:	3301      	adds	r3, #1
    e3b2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e3b6:	2101      	movs	r1, #1
    e3b8:	2300      	movs	r3, #0
    e3ba:	e7e3      	b.n	e384 <d_print_comp_inner+0x114c>
    e3bc:	686a      	ldr	r2, [r5, #4]
    e3be:	7811      	ldrb	r1, [r2, #0]
    e3c0:	2927      	cmp	r1, #39	; 0x27
    e3c2:	f000 8615 	beq.w	eff0 <d_print_comp_inner+0x1db8>
    e3c6:	2600      	movs	r6, #0
    e3c8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    e3cc:	29ff      	cmp	r1, #255	; 0xff
    e3ce:	f001 80c5 	beq.w	f55c <d_print_comp_inner+0x2324>
    e3d2:	2328      	movs	r3, #40	; 0x28
    e3d4:	1c4a      	adds	r2, r1, #1
    e3d6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    e3da:	5463      	strb	r3, [r4, r1]
    e3dc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    e3e0:	686a      	ldr	r2, [r5, #4]
    e3e2:	4641      	mov	r1, r8
    e3e4:	4620      	mov	r0, r4
    e3e6:	f001 fccb 	bl	fd80 <d_print_comp>
    e3ea:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e3ee:	2bff      	cmp	r3, #255	; 0xff
    e3f0:	f001 8099 	beq.w	f526 <d_print_comp_inner+0x22ee>
    e3f4:	1c59      	adds	r1, r3, #1
    e3f6:	2229      	movs	r2, #41	; 0x29
    e3f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e3fc:	54e2      	strb	r2, [r4, r3]
    e3fe:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    e402:	782b      	ldrb	r3, [r5, #0]
    e404:	2b3d      	cmp	r3, #61	; 0x3d
    e406:	f000 86e6 	beq.w	f1d6 <d_print_comp_inner+0x1f9e>
    e40a:	2e08      	cmp	r6, #8
    e40c:	f000 867f 	beq.w	f10e <d_print_comp_inner+0x1ed6>
    e410:	68aa      	ldr	r2, [r5, #8]
    e412:	4641      	mov	r1, r8
    e414:	4620      	mov	r0, r4
    e416:	f001 fcb3 	bl	fd80 <d_print_comp>
    e41a:	f7fe bfdb 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e41e:	2301      	movs	r3, #1
    e420:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    e424:	f7fe bfd6 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e428:	686a      	ldr	r2, [r5, #4]
    e42a:	4931      	ldr	r1, [pc, #196]	; (e4f0 <d_print_comp_inner+0x12b8>)
    e42c:	a804      	add	r0, sp, #16
    e42e:	f006 fcb9 	bl	14da4 <sprintf>
    e432:	a804      	add	r0, sp, #16
    e434:	f007 f884 	bl	15540 <strlen>
    e438:	2800      	cmp	r0, #0
    e43a:	f43e afcb 	beq.w	d3d4 <d_print_comp_inner+0x19c>
    e43e:	ad04      	add	r5, sp, #16
    e440:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    e444:	182f      	adds	r7, r5, r0
    e446:	f04f 0800 	mov.w	r8, #0
    e44a:	e009      	b.n	e460 <d_print_comp_inner+0x1228>
    e44c:	460b      	mov	r3, r1
    e44e:	3101      	adds	r1, #1
    e450:	42bd      	cmp	r5, r7
    e452:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e456:	54e6      	strb	r6, [r4, r3]
    e458:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    e45c:	f43e afba 	beq.w	d3d4 <d_print_comp_inner+0x19c>
    e460:	29ff      	cmp	r1, #255	; 0xff
    e462:	f815 6b01 	ldrb.w	r6, [r5], #1
    e466:	d1f1      	bne.n	e44c <d_print_comp_inner+0x1214>
    e468:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e46c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    e470:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e474:	4620      	mov	r0, r4
    e476:	4798      	blx	r3
    e478:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e47c:	3301      	adds	r3, #1
    e47e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e482:	2101      	movs	r1, #1
    e484:	2300      	movs	r3, #0
    e486:	e7e3      	b.n	e450 <d_print_comp_inner+0x1218>
    e488:	4e1a      	ldr	r6, [pc, #104]	; (e4f4 <d_print_comp_inner+0x12bc>)
    e48a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    e48e:	f106 0a1c 	add.w	sl, r6, #28
    e492:	f04f 0900 	mov.w	r9, #0
    e496:	e009      	b.n	e4ac <d_print_comp_inner+0x1274>
    e498:	460b      	mov	r3, r1
    e49a:	3101      	adds	r1, #1
    e49c:	4556      	cmp	r6, sl
    e49e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e4a2:	54e7      	strb	r7, [r4, r3]
    e4a4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    e4a8:	f000 82fa 	beq.w	eaa0 <d_print_comp_inner+0x1868>
    e4ac:	29ff      	cmp	r1, #255	; 0xff
    e4ae:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    e4b2:	d1f1      	bne.n	e498 <d_print_comp_inner+0x1260>
    e4b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e4b8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    e4bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e4c0:	4620      	mov	r0, r4
    e4c2:	4798      	blx	r3
    e4c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e4c8:	3301      	adds	r3, #1
    e4ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e4ce:	2101      	movs	r1, #1
    e4d0:	2300      	movs	r3, #0
    e4d2:	e7e3      	b.n	e49c <d_print_comp_inner+0x1264>
    e4d4:	000225b8 	.word	0x000225b8
    e4d8:	00022dd8 	.word	0x00022dd8
    e4dc:	00022eb3 	.word	0x00022eb3
    e4e0:	00022db3 	.word	0x00022db3
    e4e4:	00022de8 	.word	0x00022de8
    e4e8:	00022db7 	.word	0x00022db7
    e4ec:	00022e33 	.word	0x00022e33
    e4f0:	00021c30 	.word	0x00021c30
    e4f4:	00022e83 	.word	0x00022e83
    e4f8:	68ab      	ldr	r3, [r5, #8]
    e4fa:	781a      	ldrb	r2, [r3, #0]
    e4fc:	2a3a      	cmp	r2, #58	; 0x3a
    e4fe:	f47e af7d 	bne.w	d3fc <d_print_comp_inner+0x1c4>
    e502:	689b      	ldr	r3, [r3, #8]
    e504:	781b      	ldrb	r3, [r3, #0]
    e506:	2b3b      	cmp	r3, #59	; 0x3b
    e508:	f47e af78 	bne.w	d3fc <d_print_comp_inner+0x1c4>
    e50c:	f105 0308 	add.w	r3, r5, #8
    e510:	686a      	ldr	r2, [r5, #4]
    e512:	f002 fabf 	bl	10a94 <d_maybe_print_fold_expression.isra.15>
    e516:	4606      	mov	r6, r0
    e518:	2800      	cmp	r0, #0
    e51a:	f47e af5b 	bne.w	d3d4 <d_print_comp_inner+0x19c>
    e51e:	f8d5 a004 	ldr.w	sl, [r5, #4]
    e522:	68aa      	ldr	r2, [r5, #8]
    e524:	f8da 1004 	ldr.w	r1, [sl, #4]
    e528:	6893      	ldr	r3, [r2, #8]
    e52a:	6808      	ldr	r0, [r1, #0]
    e52c:	49d6      	ldr	r1, [pc, #856]	; (e888 <d_print_comp_inner+0x1650>)
    e52e:	f8d2 9004 	ldr.w	r9, [r2, #4]
    e532:	685f      	ldr	r7, [r3, #4]
    e534:	689d      	ldr	r5, [r3, #8]
    e536:	f006 fca7 	bl	14e88 <strcmp>
    e53a:	2800      	cmp	r0, #0
    e53c:	f001 82e2 	beq.w	fb04 <d_print_comp_inner+0x28cc>
    e540:	2204      	movs	r2, #4
    e542:	49d2      	ldr	r1, [pc, #840]	; (e88c <d_print_comp_inner+0x1654>)
    e544:	4620      	mov	r0, r4
    e546:	f7fc fba3 	bl	ac90 <d_append_buffer>
    e54a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    e54e:	b183      	cbz	r3, e572 <d_print_comp_inner+0x133a>
    e550:	4641      	mov	r1, r8
    e552:	464a      	mov	r2, r9
    e554:	4620      	mov	r0, r4
    e556:	f002 fa39 	bl	109cc <d_print_subexpr>
    e55a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    e55e:	29ff      	cmp	r1, #255	; 0xff
    e560:	f001 83ec 	beq.w	fd3c <d_print_comp_inner+0x2b04>
    e564:	2320      	movs	r3, #32
    e566:	1c4a      	adds	r2, r1, #1
    e568:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    e56c:	5463      	strb	r3, [r4, r1]
    e56e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    e572:	463a      	mov	r2, r7
    e574:	4641      	mov	r1, r8
    e576:	4620      	mov	r0, r4
    e578:	f001 fc02 	bl	fd80 <d_print_comp>
    e57c:	2d00      	cmp	r5, #0
    e57e:	f43e af29 	beq.w	d3d4 <d_print_comp_inner+0x19c>
    e582:	462a      	mov	r2, r5
    e584:	4641      	mov	r1, r8
    e586:	4620      	mov	r0, r4
    e588:	f002 fa20 	bl	109cc <d_print_subexpr>
    e58c:	f7fe bf22 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e590:	4ebf      	ldr	r6, [pc, #764]	; (e890 <d_print_comp_inner+0x1658>)
    e592:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    e596:	f106 0a08 	add.w	sl, r6, #8
    e59a:	f04f 0900 	mov.w	r9, #0
    e59e:	e009      	b.n	e5b4 <d_print_comp_inner+0x137c>
    e5a0:	460b      	mov	r3, r1
    e5a2:	3101      	adds	r1, #1
    e5a4:	4556      	cmp	r6, sl
    e5a6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e5aa:	54e7      	strb	r7, [r4, r3]
    e5ac:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    e5b0:	f000 80d8 	beq.w	e764 <d_print_comp_inner+0x152c>
    e5b4:	29ff      	cmp	r1, #255	; 0xff
    e5b6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    e5ba:	d1f1      	bne.n	e5a0 <d_print_comp_inner+0x1368>
    e5bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e5c0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    e5c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e5c8:	4620      	mov	r0, r4
    e5ca:	4798      	blx	r3
    e5cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e5d0:	3301      	adds	r3, #1
    e5d2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e5d6:	2101      	movs	r1, #1
    e5d8:	2300      	movs	r3, #0
    e5da:	e7e3      	b.n	e5a4 <d_print_comp_inner+0x136c>
    e5dc:	4ead      	ldr	r6, [pc, #692]	; (e894 <d_print_comp_inner+0x165c>)
    e5de:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    e5e2:	f106 0a1d 	add.w	sl, r6, #29
    e5e6:	f04f 0900 	mov.w	r9, #0
    e5ea:	e009      	b.n	e600 <d_print_comp_inner+0x13c8>
    e5ec:	460b      	mov	r3, r1
    e5ee:	3101      	adds	r1, #1
    e5f0:	45b2      	cmp	sl, r6
    e5f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e5f6:	54e7      	strb	r7, [r4, r3]
    e5f8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    e5fc:	f000 81fc 	beq.w	e9f8 <d_print_comp_inner+0x17c0>
    e600:	29ff      	cmp	r1, #255	; 0xff
    e602:	f816 7f01 	ldrb.w	r7, [r6, #1]!
    e606:	d1f1      	bne.n	e5ec <d_print_comp_inner+0x13b4>
    e608:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e60c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    e610:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e614:	4620      	mov	r0, r4
    e616:	4798      	blx	r3
    e618:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e61c:	3301      	adds	r3, #1
    e61e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e622:	2101      	movs	r1, #1
    e624:	2300      	movs	r3, #0
    e626:	e7e3      	b.n	e5f0 <d_print_comp_inner+0x13b8>
    e628:	2301      	movs	r3, #1
    e62a:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    e62e:	f7fe bed1 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e632:	3701      	adds	r7, #1
    e634:	454f      	cmp	r7, r9
    e636:	f47f ae46 	bne.w	e2c6 <d_print_comp_inner+0x108e>
    e63a:	f7fe becb 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e63e:	6876      	ldr	r6, [r6, #4]
    e640:	2e00      	cmp	r6, #0
    e642:	f001 806e 	beq.w	f722 <d_print_comp_inner+0x24ea>
    e646:	2f04      	cmp	r7, #4
    e648:	f103 0310 	add.w	r3, r3, #16
    e64c:	f47f a9bd 	bne.w	d9ca <d_print_comp_inner+0x792>
    e650:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
    e654:	2301      	movs	r3, #1
    e656:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    e65a:	f7fe bebb 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e65e:	4e8e      	ldr	r6, [pc, #568]	; (e898 <d_print_comp_inner+0x1660>)
    e660:	686a      	ldr	r2, [r5, #4]
    e662:	4641      	mov	r1, r8
    e664:	4620      	mov	r0, r4
    e666:	f001 fb8b 	bl	fd80 <d_print_comp>
    e66a:	f106 0a04 	add.w	sl, r6, #4
    e66e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    e672:	f04f 0900 	mov.w	r9, #0
    e676:	e008      	b.n	e68a <d_print_comp_inner+0x1452>
    e678:	460b      	mov	r3, r1
    e67a:	3101      	adds	r1, #1
    e67c:	45b2      	cmp	sl, r6
    e67e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e682:	54e7      	strb	r7, [r4, r3]
    e684:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    e688:	d013      	beq.n	e6b2 <d_print_comp_inner+0x147a>
    e68a:	29ff      	cmp	r1, #255	; 0xff
    e68c:	f816 7b01 	ldrb.w	r7, [r6], #1
    e690:	d1f2      	bne.n	e678 <d_print_comp_inner+0x1440>
    e692:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e696:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    e69a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e69e:	4620      	mov	r0, r4
    e6a0:	4798      	blx	r3
    e6a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e6a6:	3301      	adds	r3, #1
    e6a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e6ac:	2101      	movs	r1, #1
    e6ae:	2300      	movs	r3, #0
    e6b0:	e7e4      	b.n	e67c <d_print_comp_inner+0x1444>
    e6b2:	68aa      	ldr	r2, [r5, #8]
    e6b4:	4641      	mov	r1, r8
    e6b6:	4620      	mov	r0, r4
    e6b8:	f001 fb62 	bl	fd80 <d_print_comp>
    e6bc:	f7fe be8a 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e6c0:	686a      	ldr	r2, [r5, #4]
    e6c2:	4641      	mov	r1, r8
    e6c4:	4620      	mov	r0, r4
    e6c6:	f001 fb5b 	bl	fd80 <d_print_comp>
    e6ca:	f7fe be83 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e6ce:	686a      	ldr	r2, [r5, #4]
    e6d0:	4641      	mov	r1, r8
    e6d2:	4620      	mov	r0, r4
    e6d4:	f001 fb54 	bl	fd80 <d_print_comp>
    e6d8:	f7fe be7c 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e6dc:	686a      	ldr	r2, [r5, #4]
    e6de:	4641      	mov	r1, r8
    e6e0:	4620      	mov	r0, r4
    e6e2:	f001 fb4d 	bl	fd80 <d_print_comp>
    e6e6:	f7fe be75 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e6ea:	686a      	ldr	r2, [r5, #4]
    e6ec:	4641      	mov	r1, r8
    e6ee:	4620      	mov	r0, r4
    e6f0:	f001 fb46 	bl	fd80 <d_print_comp>
    e6f4:	f7fe be6e 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e6f8:	686a      	ldr	r2, [r5, #4]
    e6fa:	4641      	mov	r1, r8
    e6fc:	4620      	mov	r0, r4
    e6fe:	f001 fb3f 	bl	fd80 <d_print_comp>
    e702:	f7fe be67 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e706:	686a      	ldr	r2, [r5, #4]
    e708:	4641      	mov	r1, r8
    e70a:	4620      	mov	r0, r4
    e70c:	f001 fb38 	bl	fd80 <d_print_comp>
    e710:	f7fe be60 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e714:	686a      	ldr	r2, [r5, #4]
    e716:	4641      	mov	r1, r8
    e718:	4620      	mov	r0, r4
    e71a:	f001 fb31 	bl	fd80 <d_print_comp>
    e71e:	f7fe be59 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e722:	686a      	ldr	r2, [r5, #4]
    e724:	4641      	mov	r1, r8
    e726:	4620      	mov	r0, r4
    e728:	f001 fb2a 	bl	fd80 <d_print_comp>
    e72c:	f7fe be52 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e730:	686a      	ldr	r2, [r5, #4]
    e732:	4641      	mov	r1, r8
    e734:	4620      	mov	r0, r4
    e736:	f001 fb23 	bl	fd80 <d_print_comp>
    e73a:	f7fe be4b 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e73e:	4641      	mov	r1, r8
    e740:	68aa      	ldr	r2, [r5, #8]
    e742:	4620      	mov	r0, r4
    e744:	f001 fb1c 	bl	fd80 <d_print_comp>
    e748:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    e74c:	29ff      	cmp	r1, #255	; 0xff
    e74e:	f000 8560 	beq.w	f212 <d_print_comp_inner+0x1fda>
    e752:	1c4a      	adds	r2, r1, #1
    e754:	235d      	movs	r3, #93	; 0x5d
    e756:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    e75a:	5463      	strb	r3, [r4, r1]
    e75c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    e760:	f7fe be38 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e764:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    e768:	4e4c      	ldr	r6, [pc, #304]	; (e89c <d_print_comp_inner+0x1664>)
    e76a:	3301      	adds	r3, #1
    e76c:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    e770:	4641      	mov	r1, r8
    e772:	686a      	ldr	r2, [r5, #4]
    e774:	4620      	mov	r0, r4
    e776:	f001 fb03 	bl	fd80 <d_print_comp>
    e77a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    e77e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    e782:	3b01      	subs	r3, #1
    e784:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    e788:	f106 0902 	add.w	r9, r6, #2
    e78c:	f04f 0800 	mov.w	r8, #0
    e790:	e008      	b.n	e7a4 <d_print_comp_inner+0x156c>
    e792:	460b      	mov	r3, r1
    e794:	3101      	adds	r1, #1
    e796:	454e      	cmp	r6, r9
    e798:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e79c:	54e7      	strb	r7, [r4, r3]
    e79e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    e7a2:	d013      	beq.n	e7cc <d_print_comp_inner+0x1594>
    e7a4:	29ff      	cmp	r1, #255	; 0xff
    e7a6:	f816 7b01 	ldrb.w	r7, [r6], #1
    e7aa:	d1f2      	bne.n	e792 <d_print_comp_inner+0x155a>
    e7ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e7b0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    e7b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e7b8:	4620      	mov	r0, r4
    e7ba:	4798      	blx	r3
    e7bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e7c0:	3301      	adds	r3, #1
    e7c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e7c6:	2101      	movs	r1, #1
    e7c8:	2300      	movs	r3, #0
    e7ca:	e7e4      	b.n	e796 <d_print_comp_inner+0x155e>
    e7cc:	68aa      	ldr	r2, [r5, #8]
    e7ce:	4934      	ldr	r1, [pc, #208]	; (e8a0 <d_print_comp_inner+0x1668>)
    e7d0:	3201      	adds	r2, #1
    e7d2:	a804      	add	r0, sp, #16
    e7d4:	f006 fae6 	bl	14da4 <sprintf>
    e7d8:	a804      	add	r0, sp, #16
    e7da:	f006 feb1 	bl	15540 <strlen>
    e7de:	b318      	cbz	r0, e828 <d_print_comp_inner+0x15f0>
    e7e0:	ad04      	add	r5, sp, #16
    e7e2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    e7e6:	182f      	adds	r7, r5, r0
    e7e8:	f04f 0800 	mov.w	r8, #0
    e7ec:	e008      	b.n	e800 <d_print_comp_inner+0x15c8>
    e7ee:	460b      	mov	r3, r1
    e7f0:	3101      	adds	r1, #1
    e7f2:	42af      	cmp	r7, r5
    e7f4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e7f8:	54e6      	strb	r6, [r4, r3]
    e7fa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    e7fe:	d015      	beq.n	e82c <d_print_comp_inner+0x15f4>
    e800:	29ff      	cmp	r1, #255	; 0xff
    e802:	f815 6b01 	ldrb.w	r6, [r5], #1
    e806:	d1f2      	bne.n	e7ee <d_print_comp_inner+0x15b6>
    e808:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e80c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    e810:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e814:	4620      	mov	r0, r4
    e816:	4798      	blx	r3
    e818:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e81c:	3301      	adds	r3, #1
    e81e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e822:	2101      	movs	r1, #1
    e824:	2300      	movs	r3, #0
    e826:	e7e4      	b.n	e7f2 <d_print_comp_inner+0x15ba>
    e828:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    e82c:	29ff      	cmp	r1, #255	; 0xff
    e82e:	f000 8560 	beq.w	f2f2 <d_print_comp_inner+0x20ba>
    e832:	1c4a      	adds	r2, r1, #1
    e834:	237d      	movs	r3, #125	; 0x7d
    e836:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    e83a:	5463      	strb	r3, [r4, r1]
    e83c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    e840:	f7fe bdc8 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e844:	686a      	ldr	r2, [r5, #4]
    e846:	4641      	mov	r1, r8
    e848:	4620      	mov	r0, r4
    e84a:	f001 fa99 	bl	fd80 <d_print_comp>
    e84e:	f7fe bdc1 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e852:	4641      	mov	r1, r8
    e854:	68aa      	ldr	r2, [r5, #8]
    e856:	4620      	mov	r0, r4
    e858:	f001 fa92 	bl	fd80 <d_print_comp>
    e85c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    e860:	29ff      	cmp	r1, #255	; 0xff
    e862:	f000 850b 	beq.w	f27c <d_print_comp_inner+0x2044>
    e866:	1c4a      	adds	r2, r1, #1
    e868:	235d      	movs	r3, #93	; 0x5d
    e86a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    e86e:	5463      	strb	r3, [r4, r1]
    e870:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    e874:	f7fe bdae 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e878:	686a      	ldr	r2, [r5, #4]
    e87a:	4641      	mov	r1, r8
    e87c:	4620      	mov	r0, r4
    e87e:	f001 fa7f 	bl	fd80 <d_print_comp>
    e882:	f7fe bda7 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e886:	bf00      	nop
    e888:	00022c20 	.word	0x00022c20
    e88c:	00022e18 	.word	0x00022e18
    e890:	00022ea3 	.word	0x00022ea3
    e894:	00022e63 	.word	0x00022e63
    e898:	00022cbc 	.word	0x00022cbc
    e89c:	00022eb0 	.word	0x00022eb0
    e8a0:	00021c30 	.word	0x00021c30
    e8a4:	f8da 5004 	ldr.w	r5, [sl, #4]
    e8a8:	782b      	ldrb	r3, [r5, #0]
    e8aa:	3b61      	subs	r3, #97	; 0x61
    e8ac:	2b19      	cmp	r3, #25
    e8ae:	d809      	bhi.n	e8c4 <d_print_comp_inner+0x168c>
    e8b0:	29ff      	cmp	r1, #255	; 0xff
    e8b2:	f000 8793 	beq.w	f7dc <d_print_comp_inner+0x25a4>
    e8b6:	2320      	movs	r3, #32
    e8b8:	1c4a      	adds	r2, r1, #1
    e8ba:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    e8be:	5463      	strb	r3, [r4, r1]
    e8c0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    e8c4:	19eb      	adds	r3, r5, r7
    e8c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    e8ca:	2b20      	cmp	r3, #32
    e8cc:	bf08      	it	eq
    e8ce:	f107 37ff 	addeq.w	r7, r7, #4294967295
    e8d2:	2f00      	cmp	r7, #0
    e8d4:	f43e ad7e 	beq.w	d3d4 <d_print_comp_inner+0x19c>
    e8d8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    e8dc:	442f      	add	r7, r5
    e8de:	f04f 0800 	mov.w	r8, #0
    e8e2:	e009      	b.n	e8f8 <d_print_comp_inner+0x16c0>
    e8e4:	460b      	mov	r3, r1
    e8e6:	3101      	adds	r1, #1
    e8e8:	42af      	cmp	r7, r5
    e8ea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e8ee:	54e6      	strb	r6, [r4, r3]
    e8f0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    e8f4:	f43e ad6e 	beq.w	d3d4 <d_print_comp_inner+0x19c>
    e8f8:	29ff      	cmp	r1, #255	; 0xff
    e8fa:	f815 6b01 	ldrb.w	r6, [r5], #1
    e8fe:	d1f1      	bne.n	e8e4 <d_print_comp_inner+0x16ac>
    e900:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e904:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    e908:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e90c:	4620      	mov	r0, r4
    e90e:	4798      	blx	r3
    e910:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e914:	3301      	adds	r3, #1
    e916:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e91a:	2101      	movs	r1, #1
    e91c:	2300      	movs	r3, #0
    e91e:	e7e3      	b.n	e8e8 <d_print_comp_inner+0x16b0>
    e920:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
    e924:	b13a      	cbz	r2, e936 <d_print_comp_inner+0x16fe>
    e926:	ab14      	add	r3, sp, #80	; 0x50
    e928:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
    e92c:	f843 1d48 	str.w	r1, [r3, #-72]!
    e930:	9203      	str	r2, [sp, #12]
    e932:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    e936:	686b      	ldr	r3, [r5, #4]
    e938:	781a      	ldrb	r2, [r3, #0]
    e93a:	2a04      	cmp	r2, #4
    e93c:	f000 830e 	beq.w	ef5c <d_print_comp_inner+0x1d24>
    e940:	a804      	add	r0, sp, #16
    e942:	461a      	mov	r2, r3
    e944:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
    e948:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    e94c:	4641      	mov	r1, r8
    e94e:	4620      	mov	r0, r4
    e950:	9304      	str	r3, [sp, #16]
    e952:	9505      	str	r5, [sp, #20]
    e954:	f7fe fc70 	bl	d238 <d_print_comp_inner>
    e958:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    e95c:	9a05      	ldr	r2, [sp, #20]
    e95e:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
    e962:	2b00      	cmp	r3, #0
    e964:	f43e ad36 	beq.w	d3d4 <d_print_comp_inner+0x19c>
    e968:	9b02      	ldr	r3, [sp, #8]
    e96a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    e96e:	f7fe bd31 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e972:	68aa      	ldr	r2, [r5, #8]
    e974:	4641      	mov	r1, r8
    e976:	4620      	mov	r0, r4
    e978:	f001 fa02 	bl	fd80 <d_print_comp>
    e97c:	f7fe bd2a 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e980:	686a      	ldr	r2, [r5, #4]
    e982:	49d8      	ldr	r1, [pc, #864]	; (ece4 <d_print_comp_inner+0x1aac>)
    e984:	3201      	adds	r2, #1
    e986:	a804      	add	r0, sp, #16
    e988:	f006 fa0c 	bl	14da4 <sprintf>
    e98c:	a804      	add	r0, sp, #16
    e98e:	f006 fdd7 	bl	15540 <strlen>
    e992:	b318      	cbz	r0, e9dc <d_print_comp_inner+0x17a4>
    e994:	ad04      	add	r5, sp, #16
    e996:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    e99a:	182f      	adds	r7, r5, r0
    e99c:	f04f 0800 	mov.w	r8, #0
    e9a0:	e008      	b.n	e9b4 <d_print_comp_inner+0x177c>
    e9a2:	460b      	mov	r3, r1
    e9a4:	3101      	adds	r1, #1
    e9a6:	42bd      	cmp	r5, r7
    e9a8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    e9ac:	54e6      	strb	r6, [r4, r3]
    e9ae:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    e9b2:	d015      	beq.n	e9e0 <d_print_comp_inner+0x17a8>
    e9b4:	29ff      	cmp	r1, #255	; 0xff
    e9b6:	f815 6b01 	ldrb.w	r6, [r5], #1
    e9ba:	d1f2      	bne.n	e9a2 <d_print_comp_inner+0x176a>
    e9bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e9c0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    e9c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e9c8:	4620      	mov	r0, r4
    e9ca:	4798      	blx	r3
    e9cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e9d0:	3301      	adds	r3, #1
    e9d2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e9d6:	2101      	movs	r1, #1
    e9d8:	2300      	movs	r3, #0
    e9da:	e7e4      	b.n	e9a6 <d_print_comp_inner+0x176e>
    e9dc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    e9e0:	29ff      	cmp	r1, #255	; 0xff
    e9e2:	f000 8404 	beq.w	f1ee <d_print_comp_inner+0x1fb6>
    e9e6:	1c4a      	adds	r2, r1, #1
    e9e8:	237d      	movs	r3, #125	; 0x7d
    e9ea:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    e9ee:	5463      	strb	r3, [r4, r1]
    e9f0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    e9f4:	f7fe bcee 	b.w	d3d4 <d_print_comp_inner+0x19c>
    e9f8:	686a      	ldr	r2, [r5, #4]
    e9fa:	4641      	mov	r1, r8
    e9fc:	4620      	mov	r0, r4
    e9fe:	f001 f9bf 	bl	fd80 <d_print_comp>
    ea02:	f7fe bce7 	b.w	d3d4 <d_print_comp_inner+0x19c>
    ea06:	686a      	ldr	r2, [r5, #4]
    ea08:	4641      	mov	r1, r8
    ea0a:	4620      	mov	r0, r4
    ea0c:	f001 f9b8 	bl	fd80 <d_print_comp>
    ea10:	f7fe bce0 	b.w	d3d4 <d_print_comp_inner+0x19c>
    ea14:	686a      	ldr	r2, [r5, #4]
    ea16:	4641      	mov	r1, r8
    ea18:	4620      	mov	r0, r4
    ea1a:	f001 f9b1 	bl	fd80 <d_print_comp>
    ea1e:	f7fe bcd9 	b.w	d3d4 <d_print_comp_inner+0x19c>
    ea22:	4eb1      	ldr	r6, [pc, #708]	; (ece8 <d_print_comp_inner+0x1ab0>)
    ea24:	68aa      	ldr	r2, [r5, #8]
    ea26:	4641      	mov	r1, r8
    ea28:	4620      	mov	r0, r4
    ea2a:	f001 f9a9 	bl	fd80 <d_print_comp>
    ea2e:	f106 0a05 	add.w	sl, r6, #5
    ea32:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    ea36:	f04f 0900 	mov.w	r9, #0
    ea3a:	e008      	b.n	ea4e <d_print_comp_inner+0x1816>
    ea3c:	460b      	mov	r3, r1
    ea3e:	3101      	adds	r1, #1
    ea40:	4556      	cmp	r6, sl
    ea42:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ea46:	54e7      	strb	r7, [r4, r3]
    ea48:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    ea4c:	d013      	beq.n	ea76 <d_print_comp_inner+0x183e>
    ea4e:	29ff      	cmp	r1, #255	; 0xff
    ea50:	f816 7b01 	ldrb.w	r7, [r6], #1
    ea54:	d1f2      	bne.n	ea3c <d_print_comp_inner+0x1804>
    ea56:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ea5a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    ea5e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ea62:	4620      	mov	r0, r4
    ea64:	4798      	blx	r3
    ea66:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    ea6a:	3301      	adds	r3, #1
    ea6c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ea70:	2101      	movs	r1, #1
    ea72:	2300      	movs	r3, #0
    ea74:	e7e4      	b.n	ea40 <d_print_comp_inner+0x1808>
    ea76:	686a      	ldr	r2, [r5, #4]
    ea78:	4641      	mov	r1, r8
    ea7a:	4620      	mov	r0, r4
    ea7c:	f001 f980 	bl	fd80 <d_print_comp>
    ea80:	f7fe bca8 	b.w	d3d4 <d_print_comp_inner+0x19c>
    ea84:	686a      	ldr	r2, [r5, #4]
    ea86:	4641      	mov	r1, r8
    ea88:	4620      	mov	r0, r4
    ea8a:	f001 f979 	bl	fd80 <d_print_comp>
    ea8e:	f7fe bca1 	b.w	d3d4 <d_print_comp_inner+0x19c>
    ea92:	686a      	ldr	r2, [r5, #4]
    ea94:	4641      	mov	r1, r8
    ea96:	4620      	mov	r0, r4
    ea98:	f001 f972 	bl	fd80 <d_print_comp>
    ea9c:	f7fe bc9a 	b.w	d3d4 <d_print_comp_inner+0x19c>
    eaa0:	686a      	ldr	r2, [r5, #4]
    eaa2:	4641      	mov	r1, r8
    eaa4:	4620      	mov	r0, r4
    eaa6:	f001 f96b 	bl	fd80 <d_print_comp>
    eaaa:	f7fe bc93 	b.w	d3d4 <d_print_comp_inner+0x19c>
    eaae:	4641      	mov	r1, r8
    eab0:	686a      	ldr	r2, [r5, #4]
    eab2:	4620      	mov	r0, r4
    eab4:	f001 f964 	bl	fd80 <d_print_comp>
    eab8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    eabc:	29ff      	cmp	r1, #255	; 0xff
    eabe:	f000 842a 	beq.w	f316 <d_print_comp_inner+0x20de>
    eac2:	1c4a      	adds	r2, r1, #1
    eac4:	2329      	movs	r3, #41	; 0x29
    eac6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    eaca:	5463      	strb	r3, [r4, r1]
    eacc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    ead0:	f7fe bc80 	b.w	d3d4 <d_print_comp_inner+0x19c>
    ead4:	686a      	ldr	r2, [r5, #4]
    ead6:	4641      	mov	r1, r8
    ead8:	4620      	mov	r0, r4
    eada:	f001 f951 	bl	fd80 <d_print_comp>
    eade:	f7fe bc79 	b.w	d3d4 <d_print_comp_inner+0x19c>
    eae2:	2f04      	cmp	r7, #4
    eae4:	f1a6 0410 	sub.w	r4, r6, #16
    eae8:	f106 0e10 	add.w	lr, r6, #16
    eaec:	f000 8722 	beq.w	f934 <d_print_comp_inner+0x26fc>
    eaf0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    eaf4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    eaf8:	2300      	movs	r3, #0
    eafa:	f84e 4c10 	str.w	r4, [lr, #-16]
    eafe:	e906 1008 	stmdb	r6, {r3, ip}
    eb02:	f8ca 6114 	str.w	r6, [sl, #276]	; 0x114
    eb06:	f846 5c0c 	str.w	r5, [r6, #-12]
    eb0a:	686d      	ldr	r5, [r5, #4]
    eb0c:	3701      	adds	r7, #1
    eb0e:	4676      	mov	r6, lr
    eb10:	f7fe bf84 	b.w	da1c <d_print_comp_inner+0x7e4>
    eb14:	68aa      	ldr	r2, [r5, #8]
    eb16:	9300      	str	r3, [sp, #0]
    eb18:	460e      	mov	r6, r1
    eb1a:	4620      	mov	r0, r4
    eb1c:	4641      	mov	r1, r8
    eb1e:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
    eb22:	f001 f92d 	bl	fd80 <d_print_comp>
    eb26:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    eb2a:	9b00      	ldr	r3, [sp, #0]
    eb2c:	4295      	cmp	r5, r2
    eb2e:	f47e ac51 	bne.w	d3d4 <d_print_comp_inner+0x19c>
    eb32:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    eb36:	42b2      	cmp	r2, r6
    eb38:	f47e ac4c 	bne.w	d3d4 <d_print_comp_inner+0x19c>
    eb3c:	3b01      	subs	r3, #1
    eb3e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    eb42:	f7fe bc47 	b.w	d3d4 <d_print_comp_inner+0x19c>
    eb46:	462a      	mov	r2, r5
    eb48:	4641      	mov	r1, r8
    eb4a:	4620      	mov	r0, r4
    eb4c:	f001 f928 	bl	fda0 <d_print_mod>
    eb50:	f7fe bc70 	b.w	d434 <d_print_comp_inner+0x1fc>
    eb54:	686b      	ldr	r3, [r5, #4]
    eb56:	9300      	str	r3, [sp, #0]
    eb58:	f1b9 0f00 	cmp.w	r9, #0
    eb5c:	f47f abae 	bne.w	e2bc <d_print_comp_inner+0x1084>
    eb60:	f7fe bc38 	b.w	d3d4 <d_print_comp_inner+0x19c>
    eb64:	463a      	mov	r2, r7
    eb66:	a804      	add	r0, sp, #16
    eb68:	495e      	ldr	r1, [pc, #376]	; (ece4 <d_print_comp_inner+0x1aac>)
    eb6a:	f006 f91b 	bl	14da4 <sprintf>
    eb6e:	a804      	add	r0, sp, #16
    eb70:	f006 fce6 	bl	15540 <strlen>
    eb74:	b318      	cbz	r0, ebbe <d_print_comp_inner+0x1986>
    eb76:	ad04      	add	r5, sp, #16
    eb78:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    eb7c:	182f      	adds	r7, r5, r0
    eb7e:	f04f 0800 	mov.w	r8, #0
    eb82:	e008      	b.n	eb96 <d_print_comp_inner+0x195e>
    eb84:	460b      	mov	r3, r1
    eb86:	3101      	adds	r1, #1
    eb88:	42af      	cmp	r7, r5
    eb8a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    eb8e:	54e6      	strb	r6, [r4, r3]
    eb90:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    eb94:	d015      	beq.n	ebc2 <d_print_comp_inner+0x198a>
    eb96:	29ff      	cmp	r1, #255	; 0xff
    eb98:	f815 6b01 	ldrb.w	r6, [r5], #1
    eb9c:	d1f2      	bne.n	eb84 <d_print_comp_inner+0x194c>
    eb9e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    eba2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    eba6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ebaa:	4620      	mov	r0, r4
    ebac:	4798      	blx	r3
    ebae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    ebb2:	3301      	adds	r3, #1
    ebb4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ebb8:	2101      	movs	r1, #1
    ebba:	2300      	movs	r3, #0
    ebbc:	e7e4      	b.n	eb88 <d_print_comp_inner+0x1950>
    ebbe:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    ebc2:	29ff      	cmp	r1, #255	; 0xff
    ebc4:	f000 84dd 	beq.w	f582 <d_print_comp_inner+0x234a>
    ebc8:	1c4a      	adds	r2, r1, #1
    ebca:	237d      	movs	r3, #125	; 0x7d
    ebcc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    ebd0:	5463      	strb	r3, [r4, r1]
    ebd2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    ebd6:	f7fe bbfd 	b.w	d3d4 <d_print_comp_inner+0x19c>
    ebda:	2700      	movs	r7, #0
    ebdc:	f7ff ba1f 	b.w	e01e <d_print_comp_inner+0xde6>
    ebe0:	68df      	ldr	r7, [r3, #12]
    ebe2:	689d      	ldr	r5, [r3, #8]
    ebe4:	2f00      	cmp	r7, #0
    ebe6:	f43e abf5 	beq.w	d3d4 <d_print_comp_inner+0x19c>
    ebea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ebee:	442f      	add	r7, r5
    ebf0:	f04f 0800 	mov.w	r8, #0
    ebf4:	e009      	b.n	ec0a <d_print_comp_inner+0x19d2>
    ebf6:	460b      	mov	r3, r1
    ebf8:	3101      	adds	r1, #1
    ebfa:	42bd      	cmp	r5, r7
    ebfc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ec00:	54e6      	strb	r6, [r4, r3]
    ec02:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    ec06:	f43e abe5 	beq.w	d3d4 <d_print_comp_inner+0x19c>
    ec0a:	29ff      	cmp	r1, #255	; 0xff
    ec0c:	f815 6b01 	ldrb.w	r6, [r5], #1
    ec10:	d1f1      	bne.n	ebf6 <d_print_comp_inner+0x19be>
    ec12:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ec16:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    ec1a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ec1e:	4620      	mov	r0, r4
    ec20:	4798      	blx	r3
    ec22:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    ec26:	3301      	adds	r3, #1
    ec28:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ec2c:	2101      	movs	r1, #1
    ec2e:	2300      	movs	r3, #0
    ec30:	e7e3      	b.n	ebfa <d_print_comp_inner+0x19c2>
    ec32:	686e      	ldr	r6, [r5, #4]
    ec34:	68af      	ldr	r7, [r5, #8]
    ec36:	4437      	add	r7, r6
    ec38:	42be      	cmp	r6, r7
    ec3a:	f4be abcb 	bcs.w	d3d4 <d_print_comp_inner+0x19c>
    ec3e:	f04f 0800 	mov.w	r8, #0
    ec42:	e00d      	b.n	ec60 <d_print_comp_inner+0x1a28>
    ec44:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    ec48:	29ff      	cmp	r1, #255	; 0xff
    ec4a:	d036      	beq.n	ecba <d_print_comp_inner+0x1a82>
    ec4c:	1c4b      	adds	r3, r1, #1
    ec4e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    ec52:	5465      	strb	r5, [r4, r1]
    ec54:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    ec58:	3601      	adds	r6, #1
    ec5a:	42b7      	cmp	r7, r6
    ec5c:	f67e abba 	bls.w	d3d4 <d_print_comp_inner+0x19c>
    ec60:	1bbb      	subs	r3, r7, r6
    ec62:	2b03      	cmp	r3, #3
    ec64:	7835      	ldrb	r5, [r6, #0]
    ec66:	dded      	ble.n	ec44 <d_print_comp_inner+0x1a0c>
    ec68:	2d5f      	cmp	r5, #95	; 0x5f
    ec6a:	d1eb      	bne.n	ec44 <d_print_comp_inner+0x1a0c>
    ec6c:	7873      	ldrb	r3, [r6, #1]
    ec6e:	2b5f      	cmp	r3, #95	; 0x5f
    ec70:	d1e8      	bne.n	ec44 <d_print_comp_inner+0x1a0c>
    ec72:	78b3      	ldrb	r3, [r6, #2]
    ec74:	2b55      	cmp	r3, #85	; 0x55
    ec76:	d1e5      	bne.n	ec44 <d_print_comp_inner+0x1a0c>
    ec78:	1cf3      	adds	r3, r6, #3
    ec7a:	429f      	cmp	r7, r3
    ec7c:	d9e2      	bls.n	ec44 <d_print_comp_inner+0x1a0c>
    ec7e:	2000      	movs	r0, #0
    ec80:	e006      	b.n	ec90 <d_print_comp_inner+0x1a58>
    ec82:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
    ec86:	429f      	cmp	r7, r3
    ec88:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    ec8c:	f000 85c7 	beq.w	f81e <d_print_comp_inner+0x25e6>
    ec90:	4699      	mov	r9, r3
    ec92:	f813 5b01 	ldrb.w	r5, [r3], #1
    ec96:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
    ec9a:	b2d1      	uxtb	r1, r2
    ec9c:	2909      	cmp	r1, #9
    ec9e:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
    eca2:	d9f0      	bls.n	ec86 <d_print_comp_inner+0x1a4e>
    eca4:	f1be 0f05 	cmp.w	lr, #5
    eca8:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
    ecac:	d9e9      	bls.n	ec82 <d_print_comp_inner+0x1a4a>
    ecae:	2a05      	cmp	r2, #5
    ecb0:	f200 8743 	bhi.w	fb3a <d_print_comp_inner+0x2902>
    ecb4:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
    ecb8:	e7e5      	b.n	ec86 <d_print_comp_inner+0x1a4e>
    ecba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ecbe:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    ecc2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ecc6:	4620      	mov	r0, r4
    ecc8:	4798      	blx	r3
    ecca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    ecce:	3301      	adds	r3, #1
    ecd0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ecd4:	2100      	movs	r1, #0
    ecd6:	2301      	movs	r3, #1
    ecd8:	e7b9      	b.n	ec4e <d_print_comp_inner+0x1a16>
    ecda:	4d04      	ldr	r5, [pc, #16]	; (ecec <d_print_comp_inner+0x1ab4>)
    ecdc:	4698      	mov	r8, r3
    ecde:	1daf      	adds	r7, r5, #6
    ece0:	e010      	b.n	ed04 <d_print_comp_inner+0x1acc>
    ece2:	bf00      	nop
    ece4:	00021c30 	.word	0x00021c30
    ece8:	00022d80 	.word	0x00022d80
    ecec:	00022de0 	.word	0x00022de0
    ecf0:	460b      	mov	r3, r1
    ecf2:	3101      	adds	r1, #1
    ecf4:	42bd      	cmp	r5, r7
    ecf6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ecfa:	54e6      	strb	r6, [r4, r3]
    ecfc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    ed00:	f43e ab68 	beq.w	d3d4 <d_print_comp_inner+0x19c>
    ed04:	29ff      	cmp	r1, #255	; 0xff
    ed06:	f815 6b01 	ldrb.w	r6, [r5], #1
    ed0a:	d1f1      	bne.n	ecf0 <d_print_comp_inner+0x1ab8>
    ed0c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ed10:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    ed14:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ed18:	4620      	mov	r0, r4
    ed1a:	4798      	blx	r3
    ed1c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    ed20:	3301      	adds	r3, #1
    ed22:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ed26:	2101      	movs	r1, #1
    ed28:	2300      	movs	r3, #0
    ed2a:	e7e3      	b.n	ecf4 <d_print_comp_inner+0x1abc>
    ed2c:	782b      	ldrb	r3, [r5, #0]
    ed2e:	2b2f      	cmp	r3, #47	; 0x2f
    ed30:	f47e ab6a 	bne.w	d408 <d_print_comp_inner+0x1d0>
    ed34:	4601      	mov	r1, r0
    ed36:	460d      	mov	r5, r1
    ed38:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
    ed3c:	f7fe bb66 	b.w	d40c <d_print_comp_inner+0x1d4>
    ed40:	4dd7      	ldr	r5, [pc, #860]	; (f0a0 <d_print_comp_inner+0x1e68>)
    ed42:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ed46:	f105 0804 	add.w	r8, r5, #4
    ed4a:	e009      	b.n	ed60 <d_print_comp_inner+0x1b28>
    ed4c:	460b      	mov	r3, r1
    ed4e:	3101      	adds	r1, #1
    ed50:	45a8      	cmp	r8, r5
    ed52:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ed56:	54e6      	strb	r6, [r4, r3]
    ed58:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    ed5c:	f43e ab3a 	beq.w	d3d4 <d_print_comp_inner+0x19c>
    ed60:	29ff      	cmp	r1, #255	; 0xff
    ed62:	f815 6b01 	ldrb.w	r6, [r5], #1
    ed66:	d1f1      	bne.n	ed4c <d_print_comp_inner+0x1b14>
    ed68:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ed6c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    ed70:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ed74:	4620      	mov	r0, r4
    ed76:	4798      	blx	r3
    ed78:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    ed7c:	3301      	adds	r3, #1
    ed7e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ed82:	2101      	movs	r1, #1
    ed84:	2300      	movs	r3, #0
    ed86:	e7e3      	b.n	ed50 <d_print_comp_inner+0x1b18>
    ed88:	4ec6      	ldr	r6, [pc, #792]	; (f0a4 <d_print_comp_inner+0x1e6c>)
    ed8a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ed8e:	f106 0905 	add.w	r9, r6, #5
    ed92:	f04f 0800 	mov.w	r8, #0
    ed96:	e008      	b.n	edaa <d_print_comp_inner+0x1b72>
    ed98:	460b      	mov	r3, r1
    ed9a:	3101      	adds	r1, #1
    ed9c:	45b1      	cmp	r9, r6
    ed9e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    eda2:	54e7      	strb	r7, [r4, r3]
    eda4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    eda8:	d013      	beq.n	edd2 <d_print_comp_inner+0x1b9a>
    edaa:	29ff      	cmp	r1, #255	; 0xff
    edac:	f816 7b01 	ldrb.w	r7, [r6], #1
    edb0:	d1f2      	bne.n	ed98 <d_print_comp_inner+0x1b60>
    edb2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    edb6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    edba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    edbe:	4620      	mov	r0, r4
    edc0:	4798      	blx	r3
    edc2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    edc6:	3301      	adds	r3, #1
    edc8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    edcc:	2101      	movs	r1, #1
    edce:	2300      	movs	r3, #0
    edd0:	e7e4      	b.n	ed9c <d_print_comp_inner+0x1b64>
    edd2:	686a      	ldr	r2, [r5, #4]
    edd4:	49b4      	ldr	r1, [pc, #720]	; (f0a8 <d_print_comp_inner+0x1e70>)
    edd6:	3201      	adds	r2, #1
    edd8:	a804      	add	r0, sp, #16
    edda:	f005 ffe3 	bl	14da4 <sprintf>
    edde:	a804      	add	r0, sp, #16
    ede0:	f006 fbae 	bl	15540 <strlen>
    ede4:	2800      	cmp	r0, #0
    ede6:	f43e aaf5 	beq.w	d3d4 <d_print_comp_inner+0x19c>
    edea:	ad04      	add	r5, sp, #16
    edec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    edf0:	182f      	adds	r7, r5, r0
    edf2:	f04f 0800 	mov.w	r8, #0
    edf6:	e009      	b.n	ee0c <d_print_comp_inner+0x1bd4>
    edf8:	460b      	mov	r3, r1
    edfa:	3101      	adds	r1, #1
    edfc:	42af      	cmp	r7, r5
    edfe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ee02:	54e6      	strb	r6, [r4, r3]
    ee04:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    ee08:	f43e aae4 	beq.w	d3d4 <d_print_comp_inner+0x19c>
    ee0c:	29ff      	cmp	r1, #255	; 0xff
    ee0e:	f815 6b01 	ldrb.w	r6, [r5], #1
    ee12:	d1f1      	bne.n	edf8 <d_print_comp_inner+0x1bc0>
    ee14:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ee18:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    ee1c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ee20:	4620      	mov	r0, r4
    ee22:	4798      	blx	r3
    ee24:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    ee28:	3301      	adds	r3, #1
    ee2a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ee2e:	2101      	movs	r1, #1
    ee30:	2300      	movs	r3, #0
    ee32:	e7e3      	b.n	edfc <d_print_comp_inner+0x1bc4>
    ee34:	f021 0860 	bic.w	r8, r1, #96	; 0x60
    ee38:	f105 0208 	add.w	r2, r5, #8
    ee3c:	4641      	mov	r1, r8
    ee3e:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
    ee42:	f001 fc91 	bl	10768 <d_print_function_type.isra.11>
    ee46:	686a      	ldr	r2, [r5, #4]
    ee48:	2a00      	cmp	r2, #0
    ee4a:	f43e aac3 	beq.w	d3d4 <d_print_comp_inner+0x19c>
    ee4e:	4641      	mov	r1, r8
    ee50:	4620      	mov	r0, r4
    ee52:	f000 ff95 	bl	fd80 <d_print_comp>
    ee56:	f7fe babd 	b.w	d3d4 <d_print_comp_inner+0x19c>
    ee5a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    ee5e:	f7ff b9a2 	b.w	e1a6 <d_print_comp_inner+0xf6e>
    ee62:	4e92      	ldr	r6, [pc, #584]	; (f0ac <d_print_comp_inner+0x1e74>)
    ee64:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ee68:	f106 0a05 	add.w	sl, r6, #5
    ee6c:	f04f 0900 	mov.w	r9, #0
    ee70:	e009      	b.n	ee86 <d_print_comp_inner+0x1c4e>
    ee72:	460b      	mov	r3, r1
    ee74:	3101      	adds	r1, #1
    ee76:	45b2      	cmp	sl, r6
    ee78:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ee7c:	54e7      	strb	r7, [r4, r3]
    ee7e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    ee82:	f43f a97a 	beq.w	e17a <d_print_comp_inner+0xf42>
    ee86:	29ff      	cmp	r1, #255	; 0xff
    ee88:	f816 7b01 	ldrb.w	r7, [r6], #1
    ee8c:	d1f1      	bne.n	ee72 <d_print_comp_inner+0x1c3a>
    ee8e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ee92:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    ee96:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ee9a:	4620      	mov	r0, r4
    ee9c:	4798      	blx	r3
    ee9e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    eea2:	3301      	adds	r3, #1
    eea4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    eea8:	2101      	movs	r1, #1
    eeaa:	2300      	movs	r3, #0
    eeac:	e7e3      	b.n	ee76 <d_print_comp_inner+0x1c3e>
    eeae:	f8d9 3004 	ldr.w	r3, [r9, #4]
    eeb2:	497f      	ldr	r1, [pc, #508]	; (f0b0 <d_print_comp_inner+0x1e78>)
    eeb4:	681f      	ldr	r7, [r3, #0]
    eeb6:	4638      	mov	r0, r7
    eeb8:	f005 ffe6 	bl	14e88 <strcmp>
    eebc:	f896 a000 	ldrb.w	sl, [r6]
    eec0:	b918      	cbnz	r0, eeca <d_print_comp_inner+0x1c92>
    eec2:	f1ba 0f03 	cmp.w	sl, #3
    eec6:	f000 851b 	beq.w	f900 <d_print_comp_inner+0x26c8>
    eeca:	f1ba 0f38 	cmp.w	sl, #56	; 0x38
    eece:	f000 85fd 	beq.w	facc <d_print_comp_inner+0x2894>
    eed2:	4978      	ldr	r1, [pc, #480]	; (f0b4 <d_print_comp_inner+0x1e7c>)
    eed4:	4638      	mov	r0, r7
    eed6:	f005 ffd7 	bl	14e88 <strcmp>
    eeda:	4605      	mov	r5, r0
    eedc:	2800      	cmp	r0, #0
    eede:	f000 8135 	beq.w	f14c <d_print_comp_inner+0x1f14>
    eee2:	4975      	ldr	r1, [pc, #468]	; (f0b8 <d_print_comp_inner+0x1e80>)
    eee4:	4638      	mov	r0, r7
    eee6:	f005 ffcf 	bl	14e88 <strcmp>
    eeea:	2800      	cmp	r0, #0
    eeec:	f000 82b6 	beq.w	f45c <d_print_comp_inner+0x2224>
    eef0:	464a      	mov	r2, r9
    eef2:	4641      	mov	r1, r8
    eef4:	4620      	mov	r0, r4
    eef6:	f001 fd2b 	bl	10950 <d_print_expr_op>
    eefa:	2f00      	cmp	r7, #0
    eefc:	f43f a837 	beq.w	df6e <d_print_comp_inner+0xd36>
    ef00:	496e      	ldr	r1, [pc, #440]	; (f0bc <d_print_comp_inner+0x1e84>)
    ef02:	4638      	mov	r0, r7
    ef04:	f005 ffc0 	bl	14e88 <strcmp>
    ef08:	2800      	cmp	r0, #0
    ef0a:	f000 8384 	beq.w	f616 <d_print_comp_inner+0x23de>
    ef0e:	4638      	mov	r0, r7
    ef10:	496b      	ldr	r1, [pc, #428]	; (f0c0 <d_print_comp_inner+0x1e88>)
    ef12:	f005 ffb9 	bl	14e88 <strcmp>
    ef16:	4605      	mov	r5, r0
    ef18:	2800      	cmp	r0, #0
    ef1a:	f47f a828 	bne.w	df6e <d_print_comp_inner+0xd36>
    ef1e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    ef22:	2bff      	cmp	r3, #255	; 0xff
    ef24:	f000 84db 	beq.w	f8de <d_print_comp_inner+0x26a6>
    ef28:	1c58      	adds	r0, r3, #1
    ef2a:	2528      	movs	r5, #40	; 0x28
    ef2c:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    ef30:	4641      	mov	r1, r8
    ef32:	54e5      	strb	r5, [r4, r3]
    ef34:	4632      	mov	r2, r6
    ef36:	4620      	mov	r0, r4
    ef38:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    ef3c:	f000 ff20 	bl	fd80 <d_print_comp>
    ef40:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    ef44:	29ff      	cmp	r1, #255	; 0xff
    ef46:	f000 846d 	beq.w	f824 <d_print_comp_inner+0x25ec>
    ef4a:	2329      	movs	r3, #41	; 0x29
    ef4c:	1c4a      	adds	r2, r1, #1
    ef4e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    ef52:	5463      	strb	r3, [r4, r1]
    ef54:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    ef58:	f7fe ba3c 	b.w	d3d4 <d_print_comp_inner+0x19c>
    ef5c:	f10d 0910 	add.w	r9, sp, #16
    ef60:	685a      	ldr	r2, [r3, #4]
    ef62:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    ef66:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
    ef6a:	4641      	mov	r1, r8
    ef6c:	4620      	mov	r0, r4
    ef6e:	9204      	str	r2, [sp, #16]
    ef70:	9305      	str	r3, [sp, #20]
    ef72:	f7fe f961 	bl	d238 <d_print_comp_inner>
    ef76:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    ef7a:	9a05      	ldr	r2, [sp, #20]
    ef7c:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
    ef80:	b113      	cbz	r3, ef88 <d_print_comp_inner+0x1d50>
    ef82:	9b02      	ldr	r3, [sp, #8]
    ef84:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    ef88:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    ef8c:	2b3c      	cmp	r3, #60	; 0x3c
    ef8e:	f000 83d9 	beq.w	f744 <d_print_comp_inner+0x250c>
    ef92:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    ef96:	29ff      	cmp	r1, #255	; 0xff
    ef98:	f000 8467 	beq.w	f86a <d_print_comp_inner+0x2632>
    ef9c:	1c4a      	adds	r2, r1, #1
    ef9e:	233c      	movs	r3, #60	; 0x3c
    efa0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    efa4:	5463      	strb	r3, [r4, r1]
    efa6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    efaa:	686b      	ldr	r3, [r5, #4]
    efac:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
    efb0:	689b      	ldr	r3, [r3, #8]
    efb2:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
    efb6:	461a      	mov	r2, r3
    efb8:	4641      	mov	r1, r8
    efba:	4620      	mov	r0, r4
    efbc:	9304      	str	r3, [sp, #16]
    efbe:	9505      	str	r5, [sp, #20]
    efc0:	f7fe f93a 	bl	d238 <d_print_comp_inner>
    efc4:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    efc8:	9a05      	ldr	r2, [sp, #20]
    efca:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
    efce:	2b3e      	cmp	r3, #62	; 0x3e
    efd0:	f000 83ab 	beq.w	f72a <d_print_comp_inner+0x24f2>
    efd4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    efd8:	29ff      	cmp	r1, #255	; 0xff
    efda:	f000 849a 	beq.w	f912 <d_print_comp_inner+0x26da>
    efde:	233e      	movs	r3, #62	; 0x3e
    efe0:	1c4a      	adds	r2, r1, #1
    efe2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    efe6:	5463      	strb	r3, [r4, r1]
    efe8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    efec:	f7fe b9f2 	b.w	d3d4 <d_print_comp_inner+0x19c>
    eff0:	6852      	ldr	r2, [r2, #4]
    eff2:	7c16      	ldrb	r6, [r2, #16]
    eff4:	2e00      	cmp	r6, #0
    eff6:	f43f a9e7 	beq.w	e3c8 <d_print_comp_inner+0x1190>
    effa:	2e06      	cmp	r6, #6
    effc:	f240 8337 	bls.w	f66e <d_print_comp_inner+0x2436>
    f000:	2e07      	cmp	r6, #7
    f002:	f47f a9e1 	bne.w	e3c8 <d_print_comp_inner+0x1190>
    f006:	68aa      	ldr	r2, [r5, #8]
    f008:	7811      	ldrb	r1, [r2, #0]
    f00a:	2900      	cmp	r1, #0
    f00c:	f47f a9dc 	bne.w	e3c8 <d_print_comp_inner+0x1190>
    f010:	6891      	ldr	r1, [r2, #8]
    f012:	2901      	cmp	r1, #1
    f014:	f47f a9d8 	bne.w	e3c8 <d_print_comp_inner+0x1190>
    f018:	2b3c      	cmp	r3, #60	; 0x3c
    f01a:	f47f a9d5 	bne.w	e3c8 <d_print_comp_inner+0x1190>
    f01e:	6853      	ldr	r3, [r2, #4]
    f020:	781b      	ldrb	r3, [r3, #0]
    f022:	2b30      	cmp	r3, #48	; 0x30
    f024:	f000 8626 	beq.w	fc74 <d_print_comp_inner+0x2a3c>
    f028:	2b31      	cmp	r3, #49	; 0x31
    f02a:	f47f a9cd 	bne.w	e3c8 <d_print_comp_inner+0x1190>
    f02e:	2204      	movs	r2, #4
    f030:	4924      	ldr	r1, [pc, #144]	; (f0c4 <d_print_comp_inner+0x1e8c>)
    f032:	f7fb fe2d 	bl	ac90 <d_append_buffer>
    f036:	f7fe b9cd 	b.w	d3d4 <d_print_comp_inner+0x19c>
    f03a:	4e23      	ldr	r6, [pc, #140]	; (f0c8 <d_print_comp_inner+0x1e90>)
    f03c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    f040:	f106 0a02 	add.w	sl, r6, #2
    f044:	e009      	b.n	f05a <d_print_comp_inner+0x1e22>
    f046:	460b      	mov	r3, r1
    f048:	3101      	adds	r1, #1
    f04a:	45b2      	cmp	sl, r6
    f04c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    f050:	54e7      	strb	r7, [r4, r3]
    f052:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    f056:	f43e ad52 	beq.w	dafe <d_print_comp_inner+0x8c6>
    f05a:	29ff      	cmp	r1, #255	; 0xff
    f05c:	f816 7b01 	ldrb.w	r7, [r6], #1
    f060:	d1f1      	bne.n	f046 <d_print_comp_inner+0x1e0e>
    f062:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f066:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
    f06a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f06e:	4620      	mov	r0, r4
    f070:	4798      	blx	r3
    f072:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f076:	3301      	adds	r3, #1
    f078:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f07c:	2101      	movs	r1, #1
    f07e:	2300      	movs	r3, #0
    f080:	e7e3      	b.n	f04a <d_print_comp_inner+0x1e12>
    f082:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    f086:	29ff      	cmp	r1, #255	; 0xff
    f088:	f000 84e4 	beq.w	fa54 <d_print_comp_inner+0x281c>
    f08c:	2220      	movs	r2, #32
    f08e:	1c4b      	adds	r3, r1, #1
    f090:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    f094:	5462      	strb	r2, [r4, r1]
    f096:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    f09a:	f7fe bdbb 	b.w	dc14 <d_print_comp_inner+0x9dc>
    f09e:	bf00      	nop
    f0a0:	00022e54 	.word	0x00022e54
    f0a4:	00022c80 	.word	0x00022c80
    f0a8:	00021c30 	.word	0x00021c30
    f0ac:	00022dd0 	.word	0x00022dd0
    f0b0:	00022e04 	.word	0x00022e04
    f0b4:	00022ed0 	.word	0x00022ed0
    f0b8:	00022c10 	.word	0x00022c10
    f0bc:	00022e08 	.word	0x00022e08
    f0c0:	00023110 	.word	0x00023110
    f0c4:	00022e2c 	.word	0x00022e2c
    f0c8:	00022c5c 	.word	0x00022c5c
    f0cc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    f0d0:	29ff      	cmp	r1, #255	; 0xff
    f0d2:	f000 8465 	beq.w	f9a0 <d_print_comp_inner+0x2768>
    f0d6:	2220      	movs	r2, #32
    f0d8:	1c4b      	adds	r3, r1, #1
    f0da:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    f0de:	5462      	strb	r2, [r4, r1]
    f0e0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    f0e4:	f7fe bd80 	b.w	dbe8 <d_print_comp_inner+0x9b0>
    f0e8:	2700      	movs	r7, #0
    f0ea:	55a7      	strb	r7, [r4, r6]
    f0ec:	4631      	mov	r1, r6
    f0ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f0f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f0f6:	4620      	mov	r0, r4
    f0f8:	4798      	blx	r3
    f0fa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f0fe:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
    f102:	3301      	adds	r3, #1
    f104:	463e      	mov	r6, r7
    f106:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f10a:	f7fe be31 	b.w	dd70 <d_print_comp_inner+0xb38>
    f10e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    f112:	29ff      	cmp	r1, #255	; 0xff
    f114:	f000 8465 	beq.w	f9e2 <d_print_comp_inner+0x27aa>
    f118:	1c4a      	adds	r2, r1, #1
    f11a:	235b      	movs	r3, #91	; 0x5b
    f11c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    f120:	5463      	strb	r3, [r4, r1]
    f122:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    f126:	4641      	mov	r1, r8
    f128:	68aa      	ldr	r2, [r5, #8]
    f12a:	4620      	mov	r0, r4
    f12c:	f000 fe28 	bl	fd80 <d_print_comp>
    f130:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    f134:	29ff      	cmp	r1, #255	; 0xff
    f136:	f000 8312 	beq.w	f75e <d_print_comp_inner+0x2526>
    f13a:	235d      	movs	r3, #93	; 0x5d
    f13c:	1c4a      	adds	r2, r1, #1
    f13e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    f142:	5463      	strb	r3, [r4, r1]
    f144:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    f148:	f7fe b944 	b.w	d3d4 <d_print_comp_inner+0x19c>
    f14c:	4631      	mov	r1, r6
    f14e:	4620      	mov	r0, r4
    f150:	f7fb ffca 	bl	b0e8 <d_find_pack>
    f154:	b928      	cbnz	r0, f162 <d_print_comp_inner+0x1f2a>
    f156:	e007      	b.n	f168 <d_print_comp_inner+0x1f30>
    f158:	6843      	ldr	r3, [r0, #4]
    f15a:	b12b      	cbz	r3, f168 <d_print_comp_inner+0x1f30>
    f15c:	6880      	ldr	r0, [r0, #8]
    f15e:	3501      	adds	r5, #1
    f160:	b110      	cbz	r0, f168 <d_print_comp_inner+0x1f30>
    f162:	7803      	ldrb	r3, [r0, #0]
    f164:	2b2f      	cmp	r3, #47	; 0x2f
    f166:	d0f7      	beq.n	f158 <d_print_comp_inner+0x1f20>
    f168:	462a      	mov	r2, r5
    f16a:	a804      	add	r0, sp, #16
    f16c:	49d4      	ldr	r1, [pc, #848]	; (f4c0 <d_print_comp_inner+0x2288>)
    f16e:	f005 fe19 	bl	14da4 <sprintf>
    f172:	a804      	add	r0, sp, #16
    f174:	f006 f9e4 	bl	15540 <strlen>
    f178:	2800      	cmp	r0, #0
    f17a:	f43e a92b 	beq.w	d3d4 <d_print_comp_inner+0x19c>
    f17e:	ad04      	add	r5, sp, #16
    f180:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    f184:	182f      	adds	r7, r5, r0
    f186:	f04f 0800 	mov.w	r8, #0
    f18a:	e009      	b.n	f1a0 <d_print_comp_inner+0x1f68>
    f18c:	460b      	mov	r3, r1
    f18e:	3101      	adds	r1, #1
    f190:	42bd      	cmp	r5, r7
    f192:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    f196:	54e6      	strb	r6, [r4, r3]
    f198:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    f19c:	f43e a91a 	beq.w	d3d4 <d_print_comp_inner+0x19c>
    f1a0:	29ff      	cmp	r1, #255	; 0xff
    f1a2:	f815 6b01 	ldrb.w	r6, [r5], #1
    f1a6:	d1f1      	bne.n	f18c <d_print_comp_inner+0x1f54>
    f1a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f1ac:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    f1b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f1b4:	4620      	mov	r0, r4
    f1b6:	4798      	blx	r3
    f1b8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f1bc:	3301      	adds	r3, #1
    f1be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f1c2:	2101      	movs	r1, #1
    f1c4:	2300      	movs	r3, #0
    f1c6:	e7e3      	b.n	f190 <d_print_comp_inner+0x1f58>
    f1c8:	686a      	ldr	r2, [r5, #4]
    f1ca:	4641      	mov	r1, r8
    f1cc:	4620      	mov	r0, r4
    f1ce:	f000 fdd7 	bl	fd80 <d_print_comp>
    f1d2:	f7fe b8ff 	b.w	d3d4 <d_print_comp_inner+0x19c>
    f1d6:	29ff      	cmp	r1, #255	; 0xff
    f1d8:	f000 83d2 	beq.w	f980 <d_print_comp_inner+0x2748>
    f1dc:	232d      	movs	r3, #45	; 0x2d
    f1de:	1c4a      	adds	r2, r1, #1
    f1e0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    f1e4:	5463      	strb	r3, [r4, r1]
    f1e6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    f1ea:	f7ff b90e 	b.w	e40a <d_print_comp_inner+0x11d2>
    f1ee:	2500      	movs	r5, #0
    f1f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f1f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f1f8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    f1fc:	4620      	mov	r0, r4
    f1fe:	4798      	blx	r3
    f200:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f204:	3301      	adds	r3, #1
    f206:	4629      	mov	r1, r5
    f208:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f20c:	2201      	movs	r2, #1
    f20e:	f7ff bbeb 	b.w	e9e8 <d_print_comp_inner+0x17b0>
    f212:	2500      	movs	r5, #0
    f214:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f218:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f21c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    f220:	4620      	mov	r0, r4
    f222:	4798      	blx	r3
    f224:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f228:	3301      	adds	r3, #1
    f22a:	4629      	mov	r1, r5
    f22c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f230:	2201      	movs	r2, #1
    f232:	f7ff ba8f 	b.w	e754 <d_print_comp_inner+0x151c>
    f236:	2600      	movs	r6, #0
    f238:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    f23c:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
    f240:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    f244:	4798      	blx	r3
    f246:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f24a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
    f24e:	3301      	adds	r3, #1
    f250:	4631      	mov	r1, r6
    f252:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f256:	f7fe bd43 	b.w	dce0 <d_print_comp_inner+0xaa8>
    f25a:	2600      	movs	r6, #0
    f25c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    f260:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    f264:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
    f268:	4798      	blx	r3
    f26a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f26e:	3301      	adds	r3, #1
    f270:	4631      	mov	r1, r6
    f272:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f276:	2201      	movs	r2, #1
    f278:	f7fe bb74 	b.w	d964 <d_print_comp_inner+0x72c>
    f27c:	2500      	movs	r5, #0
    f27e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f282:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f286:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    f28a:	4620      	mov	r0, r4
    f28c:	4798      	blx	r3
    f28e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f292:	3301      	adds	r3, #1
    f294:	4629      	mov	r1, r5
    f296:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f29a:	2201      	movs	r2, #1
    f29c:	f7ff bae4 	b.w	e868 <d_print_comp_inner+0x1630>
    f2a0:	220d      	movs	r2, #13
    f2a2:	4988      	ldr	r1, [pc, #544]	; (f4c4 <d_print_comp_inner+0x228c>)
    f2a4:	4620      	mov	r0, r4
    f2a6:	f7fb fcf3 	bl	ac90 <d_append_buffer>
    f2aa:	68a9      	ldr	r1, [r5, #8]
    f2ac:	4620      	mov	r0, r4
    f2ae:	3101      	adds	r1, #1
    f2b0:	f7fb ff9e 	bl	b1f0 <d_append_num>
    f2b4:	2203      	movs	r2, #3
    f2b6:	4984      	ldr	r1, [pc, #528]	; (f4c8 <d_print_comp_inner+0x2290>)
    f2b8:	4620      	mov	r0, r4
    f2ba:	f7fb fce9 	bl	ac90 <d_append_buffer>
    f2be:	686d      	ldr	r5, [r5, #4]
    f2c0:	f7fe bc22 	b.w	db08 <d_print_comp_inner+0x8d0>
    f2c4:	2500      	movs	r5, #0
    f2c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f2ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f2ce:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    f2d2:	4620      	mov	r0, r4
    f2d4:	4798      	blx	r3
    f2d6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f2da:	3301      	adds	r3, #1
    f2dc:	4629      	mov	r1, r5
    f2de:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f2e2:	2201      	movs	r2, #1
    f2e4:	f7fe be08 	b.w	def8 <d_print_comp_inner+0xcc0>
    f2e8:	2301      	movs	r3, #1
    f2ea:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    f2ee:	f7fe b871 	b.w	d3d4 <d_print_comp_inner+0x19c>
    f2f2:	2500      	movs	r5, #0
    f2f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f2f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f2fc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    f300:	4620      	mov	r0, r4
    f302:	4798      	blx	r3
    f304:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f308:	3301      	adds	r3, #1
    f30a:	4629      	mov	r1, r5
    f30c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f310:	2201      	movs	r2, #1
    f312:	f7ff ba8f 	b.w	e834 <d_print_comp_inner+0x15fc>
    f316:	2500      	movs	r5, #0
    f318:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f31c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f320:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    f324:	4620      	mov	r0, r4
    f326:	4798      	blx	r3
    f328:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f32c:	3301      	adds	r3, #1
    f32e:	4629      	mov	r1, r5
    f330:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f334:	2201      	movs	r2, #1
    f336:	f7ff bbc5 	b.w	eac4 <d_print_comp_inner+0x188c>
    f33a:	a914      	add	r1, sp, #80	; 0x50
    f33c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f340:	f841 0d40 	str.w	r0, [r1, #-64]!
    f344:	f028 0860 	bic.w	r8, r8, #96	; 0x60
    f348:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
    f34c:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    f350:	4620      	mov	r0, r4
    f352:	4641      	mov	r1, r8
    f354:	9306      	str	r3, [sp, #24]
    f356:	9607      	str	r6, [sp, #28]
    f358:	9505      	str	r5, [sp, #20]
    f35a:	f000 fd11 	bl	fd80 <d_print_comp>
    f35e:	9e06      	ldr	r6, [sp, #24]
    f360:	9b04      	ldr	r3, [sp, #16]
    f362:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    f366:	2e00      	cmp	r6, #0
    f368:	f47e a834 	bne.w	d3d4 <d_print_comp_inner+0x19c>
    f36c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    f370:	29ff      	cmp	r1, #255	; 0xff
    f372:	f000 8409 	beq.w	fb88 <d_print_comp_inner+0x2950>
    f376:	2320      	movs	r3, #32
    f378:	1c4a      	adds	r2, r1, #1
    f37a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    f37e:	5463      	strb	r3, [r4, r1]
    f380:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    f384:	f7fe be0b 	b.w	df9e <d_print_comp_inner+0xd66>
    f388:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    f38c:	2b00      	cmp	r3, #0
    f38e:	f6fe abff 	blt.w	db90 <d_print_comp_inner+0x958>
    f392:	2b00      	cmp	r3, #0
    f394:	f000 829d 	beq.w	f8d2 <d_print_comp_inner+0x269a>
    f398:	6880      	ldr	r0, [r0, #8]
    f39a:	3b01      	subs	r3, #1
    f39c:	2800      	cmp	r0, #0
    f39e:	f43e a82d 	beq.w	d3fc <d_print_comp_inner+0x1c4>
    f3a2:	7802      	ldrb	r2, [r0, #0]
    f3a4:	2a2f      	cmp	r2, #47	; 0x2f
    f3a6:	d0f4      	beq.n	f392 <d_print_comp_inner+0x215a>
    f3a8:	f7fe b828 	b.w	d3fc <d_print_comp_inner+0x1c4>
    f3ac:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
    f3b0:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
    f3b4:	f1be 0f00 	cmp.w	lr, #0
    f3b8:	dd14      	ble.n	f3e4 <d_print_comp_inner+0x21ac>
    f3ba:	6813      	ldr	r3, [r2, #0]
    f3bc:	4299      	cmp	r1, r3
    f3be:	f000 83f5 	beq.w	fbac <d_print_comp_inner+0x2974>
    f3c2:	f102 0008 	add.w	r0, r2, #8
    f3c6:	463b      	mov	r3, r7
    f3c8:	46a4      	mov	ip, r4
    f3ca:	e004      	b.n	f3d6 <d_print_comp_inner+0x219e>
    f3cc:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
    f3d0:	42a1      	cmp	r1, r4
    f3d2:	f000 81d4 	beq.w	f77e <d_print_comp_inner+0x2546>
    f3d6:	3301      	adds	r3, #1
    f3d8:	459e      	cmp	lr, r3
    f3da:	4681      	mov	r9, r0
    f3dc:	f100 0008 	add.w	r0, r0, #8
    f3e0:	d1f4      	bne.n	f3cc <d_print_comp_inner+0x2194>
    f3e2:	4664      	mov	r4, ip
    f3e4:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    f3e8:	459e      	cmp	lr, r3
    f3ea:	f280 84b9 	bge.w	fd60 <d_print_comp_inner+0x2b28>
    f3ee:	f10e 0301 	add.w	r3, lr, #1
    f3f2:	eb02 00ce 	add.w	r0, r2, lr, lsl #3
    f3f6:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    f3fa:	f842 103e 	str.w	r1, [r2, lr, lsl #3]
    f3fe:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    f402:	3004      	adds	r0, #4
    f404:	468e      	mov	lr, r1
    f406:	2a00      	cmp	r2, #0
    f408:	f000 848d 	beq.w	fd26 <d_print_comp_inner+0x2aee>
    f40c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    f410:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
    f414:	428b      	cmp	r3, r1
    f416:	f103 0c01 	add.w	ip, r3, #1
    f41a:	f280 84a1 	bge.w	fd60 <d_print_comp_inner+0x2b28>
    f41e:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    f422:	f8c4 c13c 	str.w	ip, [r4, #316]	; 0x13c
    f426:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    f42a:	6851      	ldr	r1, [r2, #4]
    f42c:	6059      	str	r1, [r3, #4]
    f42e:	6003      	str	r3, [r0, #0]
    f430:	6812      	ldr	r2, [r2, #0]
    f432:	4618      	mov	r0, r3
    f434:	e7e7      	b.n	f406 <d_print_comp_inner+0x21ce>
    f436:	2500      	movs	r5, #0
    f438:	4619      	mov	r1, r3
    f43a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f43e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f442:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    f446:	4620      	mov	r0, r4
    f448:	4798      	blx	r3
    f44a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f44e:	1c5a      	adds	r2, r3, #1
    f450:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    f454:	462b      	mov	r3, r5
    f456:	2201      	movs	r2, #1
    f458:	f7fe bd3d 	b.w	ded6 <d_print_comp_inner+0xc9e>
    f45c:	2e00      	cmp	r6, #0
    f45e:	f000 844d 	beq.w	fcfc <d_print_comp_inner+0x2ac4>
    f462:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
    f466:	f040 8488 	bne.w	fd7a <d_print_comp_inner+0x2b42>
    f46a:	6873      	ldr	r3, [r6, #4]
    f46c:	b373      	cbz	r3, f4cc <d_print_comp_inner+0x2294>
    f46e:	4607      	mov	r7, r0
    f470:	e007      	b.n	f482 <d_print_comp_inner+0x224a>
    f472:	3701      	adds	r7, #1
    f474:	68b6      	ldr	r6, [r6, #8]
    f476:	b356      	cbz	r6, f4ce <d_print_comp_inner+0x2296>
    f478:	7833      	ldrb	r3, [r6, #0]
    f47a:	2b2f      	cmp	r3, #47	; 0x2f
    f47c:	d127      	bne.n	f4ce <d_print_comp_inner+0x2296>
    f47e:	6873      	ldr	r3, [r6, #4]
    f480:	b32b      	cbz	r3, f4ce <d_print_comp_inner+0x2296>
    f482:	781a      	ldrb	r2, [r3, #0]
    f484:	2a4a      	cmp	r2, #74	; 0x4a
    f486:	d1f4      	bne.n	f472 <d_print_comp_inner+0x223a>
    f488:	6859      	ldr	r1, [r3, #4]
    f48a:	4620      	mov	r0, r4
    f48c:	f7fb fe2c 	bl	b0e8 <d_find_pack>
    f490:	b198      	cbz	r0, f4ba <d_print_comp_inner+0x2282>
    f492:	7803      	ldrb	r3, [r0, #0]
    f494:	2b2f      	cmp	r3, #47	; 0x2f
    f496:	f040 846c 	bne.w	fd72 <d_print_comp_inner+0x2b3a>
    f49a:	6843      	ldr	r3, [r0, #4]
    f49c:	2b00      	cmp	r3, #0
    f49e:	f000 8464 	beq.w	fd6a <d_print_comp_inner+0x2b32>
    f4a2:	4603      	mov	r3, r0
    f4a4:	2000      	movs	r0, #0
    f4a6:	e004      	b.n	f4b2 <d_print_comp_inner+0x227a>
    f4a8:	781a      	ldrb	r2, [r3, #0]
    f4aa:	2a2f      	cmp	r2, #47	; 0x2f
    f4ac:	d105      	bne.n	f4ba <d_print_comp_inner+0x2282>
    f4ae:	685a      	ldr	r2, [r3, #4]
    f4b0:	b11a      	cbz	r2, f4ba <d_print_comp_inner+0x2282>
    f4b2:	689b      	ldr	r3, [r3, #8]
    f4b4:	3001      	adds	r0, #1
    f4b6:	2b00      	cmp	r3, #0
    f4b8:	d1f6      	bne.n	f4a8 <d_print_comp_inner+0x2270>
    f4ba:	4407      	add	r7, r0
    f4bc:	e7da      	b.n	f474 <d_print_comp_inner+0x223c>
    f4be:	bf00      	nop
    f4c0:	00021c30 	.word	0x00021c30
    f4c4:	00022c60 	.word	0x00022c60
    f4c8:	00022c70 	.word	0x00022c70
    f4cc:	461f      	mov	r7, r3
    f4ce:	4639      	mov	r1, r7
    f4d0:	4620      	mov	r0, r4
    f4d2:	f7fb fe8d 	bl	b1f0 <d_append_num>
    f4d6:	f7fd bf7d 	b.w	d3d4 <d_print_comp_inner+0x19c>
    f4da:	2500      	movs	r5, #0
    f4dc:	4619      	mov	r1, r3
    f4de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f4e2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f4e6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    f4ea:	4620      	mov	r0, r4
    f4ec:	4798      	blx	r3
    f4ee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f4f2:	1c5a      	adds	r2, r3, #1
    f4f4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    f4f8:	462b      	mov	r3, r5
    f4fa:	2101      	movs	r1, #1
    f4fc:	f7fe bb8e 	b.w	dc1c <d_print_comp_inner+0x9e4>
    f500:	2600      	movs	r6, #0
    f502:	4619      	mov	r1, r3
    f504:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f508:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f50c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    f510:	4620      	mov	r0, r4
    f512:	4798      	blx	r3
    f514:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f518:	1c5a      	adds	r2, r3, #1
    f51a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    f51e:	4633      	mov	r3, r6
    f520:	2101      	movs	r1, #1
    f522:	f7fe bb65 	b.w	dbf0 <d_print_comp_inner+0x9b8>
    f526:	2200      	movs	r2, #0
    f528:	4619      	mov	r1, r3
    f52a:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
    f52e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f532:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f536:	4620      	mov	r0, r4
    f538:	4798      	blx	r3
    f53a:	2329      	movs	r3, #41	; 0x29
    f53c:	7023      	strb	r3, [r4, #0]
    f53e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    f542:	782a      	ldrb	r2, [r5, #0]
    f544:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f548:	2101      	movs	r1, #1
    f54a:	3301      	adds	r3, #1
    f54c:	2a3d      	cmp	r2, #61	; 0x3d
    f54e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f552:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    f556:	f47e af58 	bne.w	e40a <d_print_comp_inner+0x11d2>
    f55a:	e63f      	b.n	f1dc <d_print_comp_inner+0x1fa4>
    f55c:	2700      	movs	r7, #0
    f55e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f562:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    f566:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f56a:	4620      	mov	r0, r4
    f56c:	4798      	blx	r3
    f56e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f572:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
    f576:	3301      	adds	r3, #1
    f578:	4639      	mov	r1, r7
    f57a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f57e:	f7fe bf28 	b.w	e3d2 <d_print_comp_inner+0x119a>
    f582:	2500      	movs	r5, #0
    f584:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f588:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f58c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    f590:	4620      	mov	r0, r4
    f592:	4798      	blx	r3
    f594:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f598:	3301      	adds	r3, #1
    f59a:	4629      	mov	r1, r5
    f59c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f5a0:	2201      	movs	r2, #1
    f5a2:	f7ff bb12 	b.w	ebca <d_print_comp_inner+0x1992>
    f5a6:	781b      	ldrb	r3, [r3, #0]
    f5a8:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
    f5ac:	2901      	cmp	r1, #1
    f5ae:	d903      	bls.n	f5b8 <d_print_comp_inner+0x2380>
    f5b0:	3b72      	subs	r3, #114	; 0x72
    f5b2:	2b01      	cmp	r3, #1
    f5b4:	f63d aead 	bhi.w	d312 <d_print_comp_inner+0xda>
    f5b8:	4641      	mov	r1, r8
    f5ba:	4620      	mov	r0, r4
    f5bc:	f001 f9c8 	bl	10950 <d_print_expr_op>
    f5c0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    f5c4:	29ff      	cmp	r1, #255	; 0xff
    f5c6:	f000 8271 	beq.w	faac <d_print_comp_inner+0x2874>
    f5ca:	1c4a      	adds	r2, r1, #1
    f5cc:	233c      	movs	r3, #60	; 0x3c
    f5ce:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    f5d2:	5463      	strb	r3, [r4, r1]
    f5d4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    f5d8:	68ab      	ldr	r3, [r5, #8]
    f5da:	4641      	mov	r1, r8
    f5dc:	685a      	ldr	r2, [r3, #4]
    f5de:	4620      	mov	r0, r4
    f5e0:	f000 fbce 	bl	fd80 <d_print_comp>
    f5e4:	2202      	movs	r2, #2
    f5e6:	49d5      	ldr	r1, [pc, #852]	; (f93c <d_print_comp_inner+0x2704>)
    f5e8:	4620      	mov	r0, r4
    f5ea:	f7fb fb51 	bl	ac90 <d_append_buffer>
    f5ee:	68ab      	ldr	r3, [r5, #8]
    f5f0:	4641      	mov	r1, r8
    f5f2:	689a      	ldr	r2, [r3, #8]
    f5f4:	4620      	mov	r0, r4
    f5f6:	f000 fbc3 	bl	fd80 <d_print_comp>
    f5fa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    f5fe:	29ff      	cmp	r1, #255	; 0xff
    f600:	f000 81df 	beq.w	f9c2 <d_print_comp_inner+0x278a>
    f604:	2329      	movs	r3, #41	; 0x29
    f606:	1c4a      	adds	r2, r1, #1
    f608:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    f60c:	5463      	strb	r3, [r4, r1]
    f60e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    f612:	f7fd bedf 	b.w	d3d4 <d_print_comp_inner+0x19c>
    f616:	4632      	mov	r2, r6
    f618:	4641      	mov	r1, r8
    f61a:	4620      	mov	r0, r4
    f61c:	f000 fbb0 	bl	fd80 <d_print_comp>
    f620:	f7fd bed8 	b.w	d3d4 <d_print_comp_inner+0x19c>
    f624:	2600      	movs	r6, #0
    f626:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f62a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f62e:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    f632:	4620      	mov	r0, r4
    f634:	4798      	blx	r3
    f636:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f63a:	3301      	adds	r3, #1
    f63c:	4631      	mov	r1, r6
    f63e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f642:	2201      	movs	r2, #1
    f644:	f7fe ba55 	b.w	daf2 <d_print_comp_inner+0x8ba>
    f648:	49bd      	ldr	r1, [pc, #756]	; (f940 <d_print_comp_inner+0x2708>)
    f64a:	6870      	ldr	r0, [r6, #4]
    f64c:	f005 ffe6 	bl	1561c <strncmp>
    f650:	2800      	cmp	r0, #0
    f652:	f47e aabd 	bne.w	dbd0 <d_print_comp_inner+0x998>
    f656:	68aa      	ldr	r2, [r5, #8]
    f658:	4641      	mov	r1, r8
    f65a:	4620      	mov	r0, r4
    f65c:	f000 fb90 	bl	fd80 <d_print_comp>
    f660:	2202      	movs	r2, #2
    f662:	49b8      	ldr	r1, [pc, #736]	; (f944 <d_print_comp_inner+0x270c>)
    f664:	4620      	mov	r0, r4
    f666:	f7fb fb13 	bl	ac90 <d_append_buffer>
    f66a:	f7fe badd 	b.w	dc28 <d_print_comp_inner+0x9f0>
    f66e:	68aa      	ldr	r2, [r5, #8]
    f670:	7817      	ldrb	r7, [r2, #0]
    f672:	2f00      	cmp	r7, #0
    f674:	f47e aea8 	bne.w	e3c8 <d_print_comp_inner+0x1190>
    f678:	2b3d      	cmp	r3, #61	; 0x3d
    f67a:	f000 82ef 	beq.w	fc5c <d_print_comp_inner+0x2a24>
    f67e:	68aa      	ldr	r2, [r5, #8]
    f680:	4641      	mov	r1, r8
    f682:	4620      	mov	r0, r4
    f684:	3e02      	subs	r6, #2
    f686:	f000 fb7b 	bl	fd80 <d_print_comp>
    f68a:	2e04      	cmp	r6, #4
    f68c:	f63d aea2 	bhi.w	d3d4 <d_print_comp_inner+0x19c>
    f690:	e8df f006 	tbb	[pc, r6]
    f694:	0a111826 	.word	0x0a111826
    f698:	03          	.byte	0x03
    f699:	00          	.byte	0x00
    f69a:	4620      	mov	r0, r4
    f69c:	2203      	movs	r2, #3
    f69e:	49aa      	ldr	r1, [pc, #680]	; (f948 <d_print_comp_inner+0x2710>)
    f6a0:	f7fb faf6 	bl	ac90 <d_append_buffer>
    f6a4:	f7fd be96 	b.w	d3d4 <d_print_comp_inner+0x19c>
    f6a8:	4620      	mov	r0, r4
    f6aa:	2202      	movs	r2, #2
    f6ac:	49a7      	ldr	r1, [pc, #668]	; (f94c <d_print_comp_inner+0x2714>)
    f6ae:	f7fb faef 	bl	ac90 <d_append_buffer>
    f6b2:	f7fd be8f 	b.w	d3d4 <d_print_comp_inner+0x19c>
    f6b6:	4620      	mov	r0, r4
    f6b8:	2202      	movs	r2, #2
    f6ba:	49a5      	ldr	r1, [pc, #660]	; (f950 <d_print_comp_inner+0x2718>)
    f6bc:	f7fb fae8 	bl	ac90 <d_append_buffer>
    f6c0:	f7fd be88 	b.w	d3d4 <d_print_comp_inner+0x19c>
    f6c4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    f6c8:	29ff      	cmp	r1, #255	; 0xff
    f6ca:	f000 831a 	beq.w	fd02 <d_print_comp_inner+0x2aca>
    f6ce:	236c      	movs	r3, #108	; 0x6c
    f6d0:	1c4a      	adds	r2, r1, #1
    f6d2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    f6d6:	5463      	strb	r3, [r4, r1]
    f6d8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    f6dc:	f7fd be7a 	b.w	d3d4 <d_print_comp_inner+0x19c>
    f6e0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    f6e4:	29ff      	cmp	r1, #255	; 0xff
    f6e6:	f000 82db 	beq.w	fca0 <d_print_comp_inner+0x2a68>
    f6ea:	2375      	movs	r3, #117	; 0x75
    f6ec:	1c4a      	adds	r2, r1, #1
    f6ee:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    f6f2:	5463      	strb	r3, [r4, r1]
    f6f4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    f6f8:	f7fd be6c 	b.w	d3d4 <d_print_comp_inner+0x19c>
    f6fc:	2600      	movs	r6, #0
    f6fe:	4619      	mov	r1, r3
    f700:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f704:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f708:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    f70c:	4620      	mov	r0, r4
    f70e:	4798      	blx	r3
    f710:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f714:	1c5a      	adds	r2, r3, #1
    f716:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    f71a:	4633      	mov	r3, r6
    f71c:	2101      	movs	r1, #1
    f71e:	f7fe bd3c 	b.w	e19a <d_print_comp_inner+0xf62>
    f722:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    f726:	f7fe bf95 	b.w	e654 <d_print_comp_inner+0x141c>
    f72a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    f72e:	29ff      	cmp	r1, #255	; 0xff
    f730:	f000 8244 	beq.w	fbbc <d_print_comp_inner+0x2984>
    f734:	2320      	movs	r3, #32
    f736:	1c4a      	adds	r2, r1, #1
    f738:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    f73c:	5463      	strb	r3, [r4, r1]
    f73e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    f742:	e447      	b.n	efd4 <d_print_comp_inner+0x1d9c>
    f744:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    f748:	29ff      	cmp	r1, #255	; 0xff
    f74a:	f000 826e 	beq.w	fc2a <d_print_comp_inner+0x29f2>
    f74e:	2320      	movs	r3, #32
    f750:	1c4a      	adds	r2, r1, #1
    f752:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    f756:	5463      	strb	r3, [r4, r1]
    f758:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    f75c:	e419      	b.n	ef92 <d_print_comp_inner+0x1d5a>
    f75e:	2500      	movs	r5, #0
    f760:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f764:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    f768:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f76c:	4620      	mov	r0, r4
    f76e:	4798      	blx	r3
    f770:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f774:	3301      	adds	r3, #1
    f776:	4629      	mov	r1, r5
    f778:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f77c:	e4dd      	b.n	f13a <d_print_comp_inner+0x1f02>
    f77e:	4664      	mov	r4, ip
    f780:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    f784:	b1d8      	cbz	r0, f7be <d_print_comp_inner+0x2586>
    f786:	6802      	ldr	r2, [r0, #0]
    f788:	4291      	cmp	r1, r2
    f78a:	d00a      	beq.n	f7a2 <d_print_comp_inner+0x256a>
    f78c:	4603      	mov	r3, r0
    f78e:	e004      	b.n	f79a <d_print_comp_inner+0x2562>
    f790:	685b      	ldr	r3, [r3, #4]
    f792:	b1a3      	cbz	r3, f7be <d_print_comp_inner+0x2586>
    f794:	681a      	ldr	r2, [r3, #0]
    f796:	4291      	cmp	r1, r2
    f798:	d003      	beq.n	f7a2 <d_print_comp_inner+0x256a>
    f79a:	4295      	cmp	r5, r2
    f79c:	d1f8      	bne.n	f790 <d_print_comp_inner+0x2558>
    f79e:	4298      	cmp	r0, r3
    f7a0:	d0f6      	beq.n	f790 <d_print_comp_inner+0x2558>
    f7a2:	3104      	adds	r1, #4
    f7a4:	4620      	mov	r0, r4
    f7a6:	f7fb fc83 	bl	b0b0 <d_lookup_template_argument.isra.6>
    f7aa:	2800      	cmp	r0, #0
    f7ac:	f43d ae26 	beq.w	d3fc <d_print_comp_inner+0x1c4>
    f7b0:	7803      	ldrb	r3, [r0, #0]
    f7b2:	2b2f      	cmp	r3, #47	; 0x2f
    f7b4:	f43d ae11 	beq.w	d3da <d_print_comp_inner+0x1a2>
    f7b8:	4601      	mov	r1, r0
    f7ba:	f7fe bc30 	b.w	e01e <d_print_comp_inner+0xde6>
    f7be:	f8d9 3004 	ldr.w	r3, [r9, #4]
    f7c2:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
    f7c6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    f7ca:	3104      	adds	r1, #4
    f7cc:	4620      	mov	r0, r4
    f7ce:	f7fb fc6f 	bl	b0b0 <d_lookup_template_argument.isra.6>
    f7d2:	2800      	cmp	r0, #0
    f7d4:	f43d ae10 	beq.w	d3f8 <d_print_comp_inner+0x1c0>
    f7d8:	2701      	movs	r7, #1
    f7da:	e7e9      	b.n	f7b0 <d_print_comp_inner+0x2578>
    f7dc:	2600      	movs	r6, #0
    f7de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f7e2:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    f7e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f7ea:	4620      	mov	r0, r4
    f7ec:	4798      	blx	r3
    f7ee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f7f2:	f8da 5004 	ldr.w	r5, [sl, #4]
    f7f6:	3301      	adds	r3, #1
    f7f8:	4631      	mov	r1, r6
    f7fa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f7fe:	f7ff b85a 	b.w	e8b6 <d_print_comp_inner+0x167e>
    f802:	68aa      	ldr	r2, [r5, #8]
    f804:	4641      	mov	r1, r8
    f806:	4620      	mov	r0, r4
    f808:	f000 faba 	bl	fd80 <d_print_comp>
    f80c:	9b06      	ldr	r3, [sp, #24]
    f80e:	9a00      	ldr	r2, [sp, #0]
    f810:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
    f814:	2b00      	cmp	r3, #0
    f816:	f43e ac9d 	beq.w	e154 <d_print_comp_inner+0xf1c>
    f81a:	f7fd bddb 	b.w	d3d4 <d_print_comp_inner+0x19c>
    f81e:	255f      	movs	r5, #95	; 0x5f
    f820:	f7ff ba10 	b.w	ec44 <d_print_comp_inner+0x1a0c>
    f824:	2500      	movs	r5, #0
    f826:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f82a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    f82e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f832:	4620      	mov	r0, r4
    f834:	4798      	blx	r3
    f836:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f83a:	3301      	adds	r3, #1
    f83c:	4629      	mov	r1, r5
    f83e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f842:	f7ff bb82 	b.w	ef4a <d_print_comp_inner+0x1d12>
    f846:	4648      	mov	r0, r9
    f848:	4942      	ldr	r1, [pc, #264]	; (f954 <d_print_comp_inner+0x271c>)
    f84a:	f005 fb1d 	bl	14e88 <strcmp>
    f84e:	b120      	cbz	r0, f85a <d_print_comp_inner+0x2622>
    f850:	463a      	mov	r2, r7
    f852:	4641      	mov	r1, r8
    f854:	4620      	mov	r0, r4
    f856:	f001 f87b 	bl	10950 <d_print_expr_op>
    f85a:	68ab      	ldr	r3, [r5, #8]
    f85c:	4641      	mov	r1, r8
    f85e:	689a      	ldr	r2, [r3, #8]
    f860:	4620      	mov	r0, r4
    f862:	f001 f8b3 	bl	109cc <d_print_subexpr>
    f866:	f7fd bd9d 	b.w	d3a4 <d_print_comp_inner+0x16c>
    f86a:	2600      	movs	r6, #0
    f86c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f870:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    f874:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f878:	4620      	mov	r0, r4
    f87a:	4798      	blx	r3
    f87c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f880:	3301      	adds	r3, #1
    f882:	4631      	mov	r1, r6
    f884:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f888:	f7ff bb88 	b.w	ef9c <d_print_comp_inner+0x1d64>
    f88c:	2500      	movs	r5, #0
    f88e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f892:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    f896:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f89a:	4620      	mov	r0, r4
    f89c:	4798      	blx	r3
    f89e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f8a2:	3301      	adds	r3, #1
    f8a4:	4629      	mov	r1, r5
    f8a6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f8aa:	f7fe bb59 	b.w	df60 <d_print_comp_inner+0xd28>
    f8ae:	2500      	movs	r5, #0
    f8b0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    f8b4:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
    f8b8:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    f8bc:	4798      	blx	r3
    f8be:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f8c2:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    f8c6:	3301      	adds	r3, #1
    f8c8:	4629      	mov	r1, r5
    f8ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f8ce:	f7fe bb2b 	b.w	df28 <d_print_comp_inner+0xcf0>
    f8d2:	6840      	ldr	r0, [r0, #4]
    f8d4:	2800      	cmp	r0, #0
    f8d6:	f43d ad91 	beq.w	d3fc <d_print_comp_inner+0x1c4>
    f8da:	f7fe b959 	b.w	db90 <d_print_comp_inner+0x958>
    f8de:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
    f8e2:	4619      	mov	r1, r3
    f8e4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f8e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f8ec:	4620      	mov	r0, r4
    f8ee:	4798      	blx	r3
    f8f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f8f4:	1c5a      	adds	r2, r3, #1
    f8f6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    f8fa:	462b      	mov	r3, r5
    f8fc:	f7ff bb14 	b.w	ef28 <d_print_comp_inner+0x1cf0>
    f900:	6873      	ldr	r3, [r6, #4]
    f902:	781a      	ldrb	r2, [r3, #0]
    f904:	2a01      	cmp	r2, #1
    f906:	f000 8153 	beq.w	fbb0 <d_print_comp_inner+0x2978>
    f90a:	f896 a000 	ldrb.w	sl, [r6]
    f90e:	f7ff bae0 	b.w	eed2 <d_print_comp_inner+0x1c9a>
    f912:	2500      	movs	r5, #0
    f914:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f918:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    f91c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f920:	4620      	mov	r0, r4
    f922:	4798      	blx	r3
    f924:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f928:	3301      	adds	r3, #1
    f92a:	4629      	mov	r1, r5
    f92c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f930:	f7ff bb55 	b.w	efde <d_print_comp_inner+0x1da6>
    f934:	4654      	mov	r4, sl
    f936:	f7fe be8d 	b.w	e654 <d_print_comp_inner+0x141c>
    f93a:	bf00      	nop
    f93c:	00022e0c 	.word	0x00022e0c
    f940:	00022c74 	.word	0x00022c74
    f944:	00022c7c 	.word	0x00022c7c
    f948:	00022e28 	.word	0x00022e28
    f94c:	00022e24 	.word	0x00022e24
    f950:	00022e20 	.word	0x00022e20
    f954:	00022c14 	.word	0x00022c14
    f958:	686a      	ldr	r2, [r5, #4]
    f95a:	4641      	mov	r1, r8
    f95c:	4620      	mov	r0, r4
    f95e:	f001 f835 	bl	109cc <d_print_subexpr>
    f962:	4620      	mov	r0, r4
    f964:	2203      	movs	r2, #3
    f966:	49e2      	ldr	r1, [pc, #904]	; (fcf0 <d_print_comp_inner+0x2ab8>)
    f968:	f7fb f992 	bl	ac90 <d_append_buffer>
    f96c:	f7fd bd32 	b.w	d3d4 <d_print_comp_inner+0x19c>
    f970:	ab14      	add	r3, sp, #80	; 0x50
    f972:	9603      	str	r6, [sp, #12]
    f974:	f843 cd48 	str.w	ip, [r3, #-72]!
    f978:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    f97c:	f7fe b85a 	b.w	da34 <d_print_comp_inner+0x7fc>
    f980:	2700      	movs	r7, #0
    f982:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f986:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
    f98a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f98e:	4620      	mov	r0, r4
    f990:	4798      	blx	r3
    f992:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f996:	3301      	adds	r3, #1
    f998:	4639      	mov	r1, r7
    f99a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f99e:	e41d      	b.n	f1dc <d_print_comp_inner+0x1fa4>
    f9a0:	2600      	movs	r6, #0
    f9a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f9a6:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    f9aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f9ae:	4620      	mov	r0, r4
    f9b0:	4798      	blx	r3
    f9b2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f9b6:	3301      	adds	r3, #1
    f9b8:	4631      	mov	r1, r6
    f9ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f9be:	f7ff bb8a 	b.w	f0d6 <d_print_comp_inner+0x1e9e>
    f9c2:	2500      	movs	r5, #0
    f9c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f9c8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    f9cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f9d0:	4620      	mov	r0, r4
    f9d2:	4798      	blx	r3
    f9d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f9d8:	3301      	adds	r3, #1
    f9da:	4629      	mov	r1, r5
    f9dc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f9e0:	e610      	b.n	f604 <d_print_comp_inner+0x23cc>
    f9e2:	2600      	movs	r6, #0
    f9e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f9e8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    f9ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    f9f0:	4620      	mov	r0, r4
    f9f2:	4798      	blx	r3
    f9f4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    f9f8:	3301      	adds	r3, #1
    f9fa:	4631      	mov	r1, r6
    f9fc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    fa00:	f7ff bb8a 	b.w	f118 <d_print_comp_inner+0x1ee0>
    fa04:	685a      	ldr	r2, [r3, #4]
    fa06:	6891      	ldr	r1, [r2, #8]
    fa08:	2901      	cmp	r1, #1
    fa0a:	f47d ac90 	bne.w	d32e <d_print_comp_inner+0xf6>
    fa0e:	6852      	ldr	r2, [r2, #4]
    fa10:	7812      	ldrb	r2, [r2, #0]
    fa12:	2a3e      	cmp	r2, #62	; 0x3e
    fa14:	f47d ac8b 	bne.w	d32e <d_print_comp_inner+0xf6>
    fa18:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    fa1c:	29ff      	cmp	r1, #255	; 0xff
    fa1e:	d10f      	bne.n	fa40 <d_print_comp_inner+0x2808>
    fa20:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fa24:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    fa28:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    fa2c:	4620      	mov	r0, r4
    fa2e:	4798      	blx	r3
    fa30:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fa34:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
    fa38:	3301      	adds	r3, #1
    fa3a:	4631      	mov	r1, r6
    fa3c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    fa40:	2328      	movs	r3, #40	; 0x28
    fa42:	1c4a      	adds	r2, r1, #1
    fa44:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    fa48:	5463      	strb	r3, [r4, r1]
    fa4a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    fa4e:	686b      	ldr	r3, [r5, #4]
    fa50:	f7fd bc6d 	b.w	d32e <d_print_comp_inner+0xf6>
    fa54:	2500      	movs	r5, #0
    fa56:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fa5a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    fa5e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    fa62:	4620      	mov	r0, r4
    fa64:	4798      	blx	r3
    fa66:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fa6a:	3301      	adds	r3, #1
    fa6c:	4629      	mov	r1, r5
    fa6e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    fa72:	f7ff bb0b 	b.w	f08c <d_print_comp_inner+0x1e54>
    fa76:	f8db b004 	ldr.w	fp, [fp, #4]
    fa7a:	f1bb 0f00 	cmp.w	fp, #0
    fa7e:	f43e ade9 	beq.w	e654 <d_print_comp_inner+0x141c>
    fa82:	f7fd bfc3 	b.w	da0c <d_print_comp_inner+0x7d4>
    fa86:	9b02      	ldr	r3, [sp, #8]
    fa88:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    fa8c:	f7fd bfdb 	b.w	da46 <d_print_comp_inner+0x80e>
    fa90:	6893      	ldr	r3, [r2, #8]
    fa92:	781b      	ldrb	r3, [r3, #0]
    fa94:	2b29      	cmp	r3, #41	; 0x29
    fa96:	bf1c      	itt	ne
    fa98:	2301      	movne	r3, #1
    fa9a:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
    fa9e:	6852      	ldr	r2, [r2, #4]
    faa0:	4641      	mov	r1, r8
    faa2:	4620      	mov	r0, r4
    faa4:	f000 ff92 	bl	109cc <d_print_subexpr>
    faa8:	f7fd bc52 	b.w	d350 <d_print_comp_inner+0x118>
    faac:	2600      	movs	r6, #0
    faae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fab2:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    fab6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    faba:	4620      	mov	r0, r4
    fabc:	4798      	blx	r3
    fabe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fac2:	3301      	adds	r3, #1
    fac4:	4631      	mov	r1, r6
    fac6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    faca:	e57e      	b.n	f5ca <d_print_comp_inner+0x2392>
    facc:	6872      	ldr	r2, [r6, #4]
    face:	4641      	mov	r1, r8
    fad0:	4620      	mov	r0, r4
    fad2:	f000 ff7b 	bl	109cc <d_print_subexpr>
    fad6:	464a      	mov	r2, r9
    fad8:	4641      	mov	r1, r8
    fada:	4620      	mov	r0, r4
    fadc:	f000 ff38 	bl	10950 <d_print_expr_op>
    fae0:	f7fd bc78 	b.w	d3d4 <d_print_comp_inner+0x19c>
    fae4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fae8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    faec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    faf0:	4620      	mov	r0, r4
    faf2:	4798      	blx	r3
    faf4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    faf8:	3301      	adds	r3, #1
    fafa:	4629      	mov	r1, r5
    fafc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    fb00:	f7fd bfad 	b.w	da5e <d_print_comp_inner+0x826>
    fb04:	464a      	mov	r2, r9
    fb06:	4641      	mov	r1, r8
    fb08:	4620      	mov	r0, r4
    fb0a:	f000 ff5f 	bl	109cc <d_print_subexpr>
    fb0e:	4652      	mov	r2, sl
    fb10:	4641      	mov	r1, r8
    fb12:	4620      	mov	r0, r4
    fb14:	f000 ff1c 	bl	10950 <d_print_expr_op>
    fb18:	463a      	mov	r2, r7
    fb1a:	4641      	mov	r1, r8
    fb1c:	4620      	mov	r0, r4
    fb1e:	f000 ff55 	bl	109cc <d_print_subexpr>
    fb22:	4620      	mov	r0, r4
    fb24:	2203      	movs	r2, #3
    fb26:	4973      	ldr	r1, [pc, #460]	; (fcf4 <d_print_comp_inner+0x2abc>)
    fb28:	f7fb f8b2 	bl	ac90 <d_append_buffer>
    fb2c:	462a      	mov	r2, r5
    fb2e:	4641      	mov	r1, r8
    fb30:	4620      	mov	r0, r4
    fb32:	f000 ff4b 	bl	109cc <d_print_subexpr>
    fb36:	f7fd bc4d 	b.w	d3d4 <d_print_comp_inner+0x19c>
    fb3a:	454f      	cmp	r7, r9
    fb3c:	f67f ae6f 	bls.w	f81e <d_print_comp_inner+0x25e6>
    fb40:	2d5f      	cmp	r5, #95	; 0x5f
    fb42:	f47f ae6c 	bne.w	f81e <d_print_comp_inner+0x25e6>
    fb46:	28ff      	cmp	r0, #255	; 0xff
    fb48:	f63f a87c 	bhi.w	ec44 <d_print_comp_inner+0x1a0c>
    fb4c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    fb50:	29ff      	cmp	r1, #255	; 0xff
    fb52:	b2c5      	uxtb	r5, r0
    fb54:	d10f      	bne.n	fb76 <d_print_comp_inner+0x293e>
    fb56:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fb5a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    fb5e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    fb62:	4620      	mov	r0, r4
    fb64:	4798      	blx	r3
    fb66:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fb6a:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    fb6e:	3301      	adds	r3, #1
    fb70:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    fb74:	2100      	movs	r1, #0
    fb76:	1c4b      	adds	r3, r1, #1
    fb78:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    fb7c:	464e      	mov	r6, r9
    fb7e:	5465      	strb	r5, [r4, r1]
    fb80:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    fb84:	f7ff b868 	b.w	ec58 <d_print_comp_inner+0x1a20>
    fb88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fb8c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    fb90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    fb94:	4620      	mov	r0, r4
    fb96:	4798      	blx	r3
    fb98:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fb9c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
    fba0:	3301      	adds	r3, #1
    fba2:	4631      	mov	r1, r6
    fba4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    fba8:	f7ff bbe5 	b.w	f376 <d_print_comp_inner+0x213e>
    fbac:	4691      	mov	r9, r2
    fbae:	e5e7      	b.n	f780 <d_print_comp_inner+0x2548>
    fbb0:	68b2      	ldr	r2, [r6, #8]
    fbb2:	7812      	ldrb	r2, [r2, #0]
    fbb4:	2a29      	cmp	r2, #41	; 0x29
    fbb6:	bf08      	it	eq
    fbb8:	461e      	moveq	r6, r3
    fbba:	e6a6      	b.n	f90a <d_print_comp_inner+0x26d2>
    fbbc:	2500      	movs	r5, #0
    fbbe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fbc2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    fbc6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    fbca:	4620      	mov	r0, r4
    fbcc:	4798      	blx	r3
    fbce:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fbd2:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    fbd6:	3301      	adds	r3, #1
    fbd8:	4629      	mov	r1, r5
    fbda:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    fbde:	e5a9      	b.n	f734 <d_print_comp_inner+0x24fc>
    fbe0:	2600      	movs	r6, #0
    fbe2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fbe6:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    fbea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    fbee:	4620      	mov	r0, r4
    fbf0:	4798      	blx	r3
    fbf2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fbf6:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
    fbfa:	3301      	adds	r3, #1
    fbfc:	4631      	mov	r1, r6
    fbfe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    fc02:	f7fd bbc8 	b.w	d396 <d_print_comp_inner+0x15e>
    fc06:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
    fc0a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fc0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    fc12:	4620      	mov	r0, r4
    fc14:	4798      	blx	r3
    fc16:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fc1a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
    fc1e:	3301      	adds	r3, #1
    fc20:	4631      	mov	r1, r6
    fc22:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    fc26:	f7fd bba4 	b.w	d372 <d_print_comp_inner+0x13a>
    fc2a:	2600      	movs	r6, #0
    fc2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fc30:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    fc34:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    fc38:	4620      	mov	r0, r4
    fc3a:	4798      	blx	r3
    fc3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fc40:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
    fc44:	3301      	adds	r3, #1
    fc46:	4631      	mov	r1, r6
    fc48:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    fc4c:	e57f      	b.n	f74e <d_print_comp_inner+0x2516>
    fc4e:	6841      	ldr	r1, [r0, #4]
    fc50:	2900      	cmp	r1, #0
    fc52:	f43d abd0 	beq.w	d3f6 <d_print_comp_inner+0x1be>
    fc56:	780b      	ldrb	r3, [r1, #0]
    fc58:	f7fe b9e1 	b.w	e01e <d_print_comp_inner+0xde6>
    fc5c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    fc60:	29ff      	cmp	r1, #255	; 0xff
    fc62:	d00d      	beq.n	fc80 <d_print_comp_inner+0x2a48>
    fc64:	232d      	movs	r3, #45	; 0x2d
    fc66:	1c4a      	adds	r2, r1, #1
    fc68:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    fc6c:	5463      	strb	r3, [r4, r1]
    fc6e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    fc72:	e504      	b.n	f67e <d_print_comp_inner+0x2446>
    fc74:	2205      	movs	r2, #5
    fc76:	4920      	ldr	r1, [pc, #128]	; (fcf8 <d_print_comp_inner+0x2ac0>)
    fc78:	f7fb f80a 	bl	ac90 <d_append_buffer>
    fc7c:	f7fd bbaa 	b.w	d3d4 <d_print_comp_inner+0x19c>
    fc80:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    fc84:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
    fc88:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    fc8c:	4798      	blx	r3
    fc8e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fc92:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
    fc96:	3301      	adds	r3, #1
    fc98:	4639      	mov	r1, r7
    fc9a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    fc9e:	e7e1      	b.n	fc64 <d_print_comp_inner+0x2a2c>
    fca0:	2500      	movs	r5, #0
    fca2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fca6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    fcaa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    fcae:	4620      	mov	r0, r4
    fcb0:	4798      	blx	r3
    fcb2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fcb6:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    fcba:	3301      	adds	r3, #1
    fcbc:	4629      	mov	r1, r5
    fcbe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    fcc2:	e512      	b.n	f6ea <d_print_comp_inner+0x24b2>
    fcc4:	2700      	movs	r7, #0
    fcc6:	f7ff b913 	b.w	eef0 <d_print_comp_inner+0x1cb8>
    fcca:	2500      	movs	r5, #0
    fccc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fcd0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    fcd4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    fcd8:	4620      	mov	r0, r4
    fcda:	4798      	blx	r3
    fcdc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fce0:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    fce4:	3301      	adds	r3, #1
    fce6:	4629      	mov	r1, r5
    fce8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    fcec:	f7fd bb6b 	b.w	d3c6 <d_print_comp_inner+0x18e>
    fcf0:	00022e50 	.word	0x00022e50
    fcf4:	00022e14 	.word	0x00022e14
    fcf8:	00020994 	.word	0x00020994
    fcfc:	4637      	mov	r7, r6
    fcfe:	f7ff bbe6 	b.w	f4ce <d_print_comp_inner+0x2296>
    fd02:	2500      	movs	r5, #0
    fd04:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fd08:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
    fd0c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    fd10:	4620      	mov	r0, r4
    fd12:	4798      	blx	r3
    fd14:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fd18:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    fd1c:	3301      	adds	r3, #1
    fd1e:	4629      	mov	r1, r5
    fd20:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    fd24:	e4d3      	b.n	f6ce <d_print_comp_inner+0x2496>
    fd26:	4671      	mov	r1, lr
    fd28:	6002      	str	r2, [r0, #0]
    fd2a:	3104      	adds	r1, #4
    fd2c:	4620      	mov	r0, r4
    fd2e:	f7fb f9bf 	bl	b0b0 <d_lookup_template_argument.isra.6>
    fd32:	2800      	cmp	r0, #0
    fd34:	f47f ad3c 	bne.w	f7b0 <d_print_comp_inner+0x2578>
    fd38:	f7fd bb60 	b.w	d3fc <d_print_comp_inner+0x1c4>
    fd3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fd40:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    fd44:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    fd48:	4620      	mov	r0, r4
    fd4a:	4798      	blx	r3
    fd4c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fd50:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
    fd54:	3301      	adds	r3, #1
    fd56:	4631      	mov	r1, r6
    fd58:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    fd5c:	f7fe bc02 	b.w	e564 <d_print_comp_inner+0x132c>
    fd60:	2301      	movs	r3, #1
    fd62:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    fd66:	f7fd bb35 	b.w	d3d4 <d_print_comp_inner+0x19c>
    fd6a:	4618      	mov	r0, r3
    fd6c:	4407      	add	r7, r0
    fd6e:	f7ff bb81 	b.w	f474 <d_print_comp_inner+0x223c>
    fd72:	2000      	movs	r0, #0
    fd74:	4407      	add	r7, r0
    fd76:	f7ff bb7d 	b.w	f474 <d_print_comp_inner+0x223c>
    fd7a:	4607      	mov	r7, r0
    fd7c:	f7ff bba7 	b.w	f4ce <d_print_comp_inner+0x2296>

0000fd80 <d_print_comp>:
    fd80:	b510      	push	{r4, lr}
    fd82:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
    fd86:	b082      	sub	sp, #8
    fd88:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
    fd8c:	4604      	mov	r4, r0
    fd8e:	e88d 000c 	stmia.w	sp, {r2, r3}
    fd92:	f7fd fa51 	bl	d238 <d_print_comp_inner>
    fd96:	9b01      	ldr	r3, [sp, #4]
    fd98:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    fd9c:	b002      	add	sp, #8
    fd9e:	bd10      	pop	{r4, pc}

0000fda0 <d_print_mod>:
    fda0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fda4:	7813      	ldrb	r3, [r2, #0]
    fda6:	3b03      	subs	r3, #3
    fda8:	b082      	sub	sp, #8
    fdaa:	4615      	mov	r5, r2
    fdac:	4604      	mov	r4, r0
    fdae:	4688      	mov	r8, r1
    fdb0:	2b49      	cmp	r3, #73	; 0x49
    fdb2:	f200 8223 	bhi.w	101fc <STACK_SIZE+0x1fc>
    fdb6:	e8df f013 	tbh	[pc, r3, lsl #1]
    fdba:	01e7      	.short	0x01e7
    fdbc:	02210221 	.word	0x02210221
    fdc0:	02210221 	.word	0x02210221
    fdc4:	02210221 	.word	0x02210221
    fdc8:	02210221 	.word	0x02210221
    fdcc:	02210221 	.word	0x02210221
    fdd0:	02210221 	.word	0x02210221
    fdd4:	02210221 	.word	0x02210221
    fdd8:	02210221 	.word	0x02210221
    fddc:	02210221 	.word	0x02210221
    fde0:	02210221 	.word	0x02210221
    fde4:	01e90221 	.word	0x01e90221
    fde8:	01a80182 	.word	0x01a80182
    fdec:	018201e9 	.word	0x018201e9
    fdf0:	01cd01a8 	.word	0x01cd01a8
    fdf4:	006f01da 	.word	0x006f01da
    fdf8:	009c008c 	.word	0x009c008c
    fdfc:	00cf00ab 	.word	0x00cf00ab
    fe00:	022100f4 	.word	0x022100f4
    fe04:	02210221 	.word	0x02210221
    fe08:	01190221 	.word	0x01190221
    fe0c:	015c0221 	.word	0x015c0221
    fe10:	02210221 	.word	0x02210221
    fe14:	02210221 	.word	0x02210221
    fe18:	02210221 	.word	0x02210221
    fe1c:	02210221 	.word	0x02210221
    fe20:	02210221 	.word	0x02210221
    fe24:	02210221 	.word	0x02210221
    fe28:	02210221 	.word	0x02210221
    fe2c:	02210221 	.word	0x02210221
    fe30:	02210221 	.word	0x02210221
    fe34:	02210221 	.word	0x02210221
    fe38:	02210221 	.word	0x02210221
    fe3c:	02210221 	.word	0x02210221
    fe40:	02210221 	.word	0x02210221
    fe44:	02210221 	.word	0x02210221
    fe48:	02210221 	.word	0x02210221
    fe4c:	004a      	.short	0x004a
    fe4e:	4dd3      	ldr	r5, [pc, #844]	; (1019c <STACK_SIZE+0x19c>)
    fe50:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    fe54:	f105 0711 	add.w	r7, r5, #17
    fe58:	f04f 0800 	mov.w	r8, #0
    fe5c:	e008      	b.n	fe70 <d_print_mod+0xd0>
    fe5e:	460b      	mov	r3, r1
    fe60:	3101      	adds	r1, #1
    fe62:	42bd      	cmp	r5, r7
    fe64:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    fe68:	54e6      	strb	r6, [r4, r3]
    fe6a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    fe6e:	d02d      	beq.n	fecc <d_print_mod+0x12c>
    fe70:	29ff      	cmp	r1, #255	; 0xff
    fe72:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    fe76:	d1f2      	bne.n	fe5e <d_print_mod+0xbe>
    fe78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fe7c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    fe80:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    fe84:	4620      	mov	r0, r4
    fe86:	4798      	blx	r3
    fe88:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fe8c:	3301      	adds	r3, #1
    fe8e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    fe92:	2101      	movs	r1, #1
    fe94:	2300      	movs	r3, #0
    fe96:	e7e4      	b.n	fe62 <d_print_mod+0xc2>
    fe98:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    fe9c:	29ff      	cmp	r1, #255	; 0xff
    fe9e:	f000 81f7 	beq.w	10290 <STACK_SIZE+0x290>
    fea2:	1c4a      	adds	r2, r1, #1
    fea4:	2320      	movs	r3, #32
    fea6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    feaa:	5463      	strb	r3, [r4, r1]
    feac:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    feb0:	68aa      	ldr	r2, [r5, #8]
    feb2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    feb6:	9200      	str	r2, [sp, #0]
    feb8:	4641      	mov	r1, r8
    feba:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
    febe:	4620      	mov	r0, r4
    fec0:	9301      	str	r3, [sp, #4]
    fec2:	f7fd f9b9 	bl	d238 <d_print_comp_inner>
    fec6:	9b01      	ldr	r3, [sp, #4]
    fec8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    fecc:	b002      	add	sp, #8
    fece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fed2:	f011 0504 	ands.w	r5, r1, #4
    fed6:	d1f9      	bne.n	fecc <d_print_mod+0x12c>
    fed8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    fedc:	2bff      	cmp	r3, #255	; 0xff
    fede:	f000 821c 	beq.w	1031a <STACK_SIZE+0x31a>
    fee2:	222a      	movs	r2, #42	; 0x2a
    fee4:	1c59      	adds	r1, r3, #1
    fee6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    feea:	54e2      	strb	r2, [r4, r3]
    feec:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    fef0:	e7ec      	b.n	fecc <d_print_mod+0x12c>
    fef2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    fef6:	29ff      	cmp	r1, #255	; 0xff
    fef8:	f000 81b9 	beq.w	1026e <STACK_SIZE+0x26e>
    fefc:	1c4a      	adds	r2, r1, #1
    fefe:	2326      	movs	r3, #38	; 0x26
    ff00:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    ff04:	5463      	strb	r3, [r4, r1]
    ff06:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    ff0a:	b002      	add	sp, #8
    ff0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ff10:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ff14:	4da2      	ldr	r5, [pc, #648]	; (101a0 <STACK_SIZE+0x1a0>)
    ff16:	f04f 0800 	mov.w	r8, #0
    ff1a:	1caf      	adds	r7, r5, #2
    ff1c:	e008      	b.n	ff30 <d_print_mod+0x190>
    ff1e:	460b      	mov	r3, r1
    ff20:	3101      	adds	r1, #1
    ff22:	42bd      	cmp	r5, r7
    ff24:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ff28:	54e6      	strb	r6, [r4, r3]
    ff2a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    ff2e:	d0cd      	beq.n	fecc <d_print_mod+0x12c>
    ff30:	29ff      	cmp	r1, #255	; 0xff
    ff32:	f815 6b01 	ldrb.w	r6, [r5], #1
    ff36:	d1f2      	bne.n	ff1e <d_print_mod+0x17e>
    ff38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ff3c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    ff40:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ff44:	4620      	mov	r0, r4
    ff46:	4798      	blx	r3
    ff48:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    ff4c:	3301      	adds	r3, #1
    ff4e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ff52:	2101      	movs	r1, #1
    ff54:	2300      	movs	r3, #0
    ff56:	e7e4      	b.n	ff22 <d_print_mod+0x182>
    ff58:	4d92      	ldr	r5, [pc, #584]	; (101a4 <STACK_SIZE+0x1a4>)
    ff5a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ff5e:	f105 0708 	add.w	r7, r5, #8
    ff62:	f04f 0800 	mov.w	r8, #0
    ff66:	e008      	b.n	ff7a <d_print_mod+0x1da>
    ff68:	460b      	mov	r3, r1
    ff6a:	3101      	adds	r1, #1
    ff6c:	42bd      	cmp	r5, r7
    ff6e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ff72:	54e6      	strb	r6, [r4, r3]
    ff74:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    ff78:	d0a8      	beq.n	fecc <d_print_mod+0x12c>
    ff7a:	29ff      	cmp	r1, #255	; 0xff
    ff7c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    ff80:	d1f2      	bne.n	ff68 <d_print_mod+0x1c8>
    ff82:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ff86:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    ff8a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ff8e:	4620      	mov	r0, r4
    ff90:	4798      	blx	r3
    ff92:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    ff96:	3301      	adds	r3, #1
    ff98:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ff9c:	2101      	movs	r1, #1
    ff9e:	2300      	movs	r3, #0
    ffa0:	e7e4      	b.n	ff6c <d_print_mod+0x1cc>
    ffa2:	4d81      	ldr	r5, [pc, #516]	; (101a8 <STACK_SIZE+0x1a8>)
    ffa4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ffa8:	f105 070a 	add.w	r7, r5, #10
    ffac:	f04f 0800 	mov.w	r8, #0
    ffb0:	e008      	b.n	ffc4 <d_print_mod+0x224>
    ffb2:	460b      	mov	r3, r1
    ffb4:	3101      	adds	r1, #1
    ffb6:	42bd      	cmp	r5, r7
    ffb8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    ffbc:	54e6      	strb	r6, [r4, r3]
    ffbe:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    ffc2:	d083      	beq.n	fecc <d_print_mod+0x12c>
    ffc4:	29ff      	cmp	r1, #255	; 0xff
    ffc6:	f815 6b01 	ldrb.w	r6, [r5], #1
    ffca:	d1f2      	bne.n	ffb2 <d_print_mod+0x212>
    ffcc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ffd0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
    ffd4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    ffd8:	4620      	mov	r0, r4
    ffda:	4798      	blx	r3
    ffdc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    ffe0:	3301      	adds	r3, #1
    ffe2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    ffe6:	2101      	movs	r1, #1
    ffe8:	2300      	movs	r3, #0
    ffea:	e7e4      	b.n	ffb6 <d_print_mod+0x216>
    ffec:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
    fff0:	2b28      	cmp	r3, #40	; 0x28
    fff2:	d00b      	beq.n	1000c <STACK_SIZE+0xc>
    fff4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    fff8:	2bff      	cmp	r3, #255	; 0xff
    fffa:	f000 8126 	beq.w	1024a <STACK_SIZE+0x24a>
    fffe:	2220      	movs	r2, #32
   10000:	1c59      	adds	r1, r3, #1
   10002:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   10006:	54e2      	strb	r2, [r4, r3]
   10008:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1000c:	686a      	ldr	r2, [r5, #4]
   1000e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   10012:	4d66      	ldr	r5, [pc, #408]	; (101ac <STACK_SIZE+0x1ac>)
   10014:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   10018:	4641      	mov	r1, r8
   1001a:	4620      	mov	r0, r4
   1001c:	9301      	str	r3, [sp, #4]
   1001e:	9200      	str	r2, [sp, #0]
   10020:	f7fd f90a 	bl	d238 <d_print_comp_inner>
   10024:	9b01      	ldr	r3, [sp, #4]
   10026:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1002a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1002e:	1cef      	adds	r7, r5, #3
   10030:	f04f 0800 	mov.w	r8, #0
   10034:	e009      	b.n	1004a <STACK_SIZE+0x4a>
   10036:	460b      	mov	r3, r1
   10038:	3101      	adds	r1, #1
   1003a:	42bd      	cmp	r5, r7
   1003c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   10040:	54e6      	strb	r6, [r4, r3]
   10042:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   10046:	f43f af41 	beq.w	fecc <d_print_mod+0x12c>
   1004a:	29ff      	cmp	r1, #255	; 0xff
   1004c:	f815 6b01 	ldrb.w	r6, [r5], #1
   10050:	d1f1      	bne.n	10036 <STACK_SIZE+0x36>
   10052:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10056:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1005a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1005e:	4620      	mov	r0, r4
   10060:	4798      	blx	r3
   10062:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10066:	3301      	adds	r3, #1
   10068:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1006c:	2101      	movs	r1, #1
   1006e:	2300      	movs	r3, #0
   10070:	e7e3      	b.n	1003a <STACK_SIZE+0x3a>
   10072:	4e4f      	ldr	r6, [pc, #316]	; (101b0 <STACK_SIZE+0x1b0>)
   10074:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   10078:	f106 0a0a 	add.w	sl, r6, #10
   1007c:	f04f 0900 	mov.w	r9, #0
   10080:	e009      	b.n	10096 <STACK_SIZE+0x96>
   10082:	460b      	mov	r3, r1
   10084:	3101      	adds	r1, #1
   10086:	4556      	cmp	r6, sl
   10088:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1008c:	54e7      	strb	r7, [r4, r3]
   1008e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   10092:	f000 80c0 	beq.w	10216 <STACK_SIZE+0x216>
   10096:	29ff      	cmp	r1, #255	; 0xff
   10098:	f816 7b01 	ldrb.w	r7, [r6], #1
   1009c:	d1f1      	bne.n	10082 <STACK_SIZE+0x82>
   1009e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   100a2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   100a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   100aa:	4620      	mov	r0, r4
   100ac:	4798      	blx	r3
   100ae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   100b2:	3301      	adds	r3, #1
   100b4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   100b8:	2101      	movs	r1, #1
   100ba:	2300      	movs	r3, #0
   100bc:	e7e3      	b.n	10086 <STACK_SIZE+0x86>
   100be:	4d3d      	ldr	r5, [pc, #244]	; (101b4 <STACK_SIZE+0x1b4>)
   100c0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   100c4:	f105 0709 	add.w	r7, r5, #9
   100c8:	f04f 0800 	mov.w	r8, #0
   100cc:	e009      	b.n	100e2 <STACK_SIZE+0xe2>
   100ce:	460b      	mov	r3, r1
   100d0:	3101      	adds	r1, #1
   100d2:	42bd      	cmp	r5, r7
   100d4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   100d8:	54e6      	strb	r6, [r4, r3]
   100da:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   100de:	f43f aef5 	beq.w	fecc <d_print_mod+0x12c>
   100e2:	29ff      	cmp	r1, #255	; 0xff
   100e4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   100e8:	d1f1      	bne.n	100ce <STACK_SIZE+0xce>
   100ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   100ee:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   100f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   100f6:	4620      	mov	r0, r4
   100f8:	4798      	blx	r3
   100fa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   100fe:	3301      	adds	r3, #1
   10100:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10104:	2101      	movs	r1, #1
   10106:	2300      	movs	r3, #0
   10108:	e7e3      	b.n	100d2 <STACK_SIZE+0xd2>
   1010a:	4d2b      	ldr	r5, [pc, #172]	; (101b8 <STACK_SIZE+0x1b8>)
   1010c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   10110:	1daf      	adds	r7, r5, #6
   10112:	f04f 0800 	mov.w	r8, #0
   10116:	e009      	b.n	1012c <STACK_SIZE+0x12c>
   10118:	460b      	mov	r3, r1
   1011a:	3101      	adds	r1, #1
   1011c:	42bd      	cmp	r5, r7
   1011e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   10122:	54e6      	strb	r6, [r4, r3]
   10124:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   10128:	f43f aed0 	beq.w	fecc <d_print_mod+0x12c>
   1012c:	29ff      	cmp	r1, #255	; 0xff
   1012e:	f815 6b01 	ldrb.w	r6, [r5], #1
   10132:	d1f1      	bne.n	10118 <STACK_SIZE+0x118>
   10134:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10138:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1013c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10140:	4620      	mov	r0, r4
   10142:	4798      	blx	r3
   10144:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10148:	3301      	adds	r3, #1
   1014a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1014e:	2101      	movs	r1, #1
   10150:	2300      	movs	r3, #0
   10152:	e7e3      	b.n	1011c <STACK_SIZE+0x11c>
   10154:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   10158:	2bff      	cmp	r3, #255	; 0xff
   1015a:	f000 80cc 	beq.w	102f6 <STACK_SIZE+0x2f6>
   1015e:	2220      	movs	r2, #32
   10160:	1c59      	adds	r1, r3, #1
   10162:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   10166:	54e2      	strb	r2, [r4, r3]
   10168:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1016c:	e6c3      	b.n	fef6 <d_print_mod+0x156>
   1016e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   10172:	2bff      	cmp	r3, #255	; 0xff
   10174:	f000 80ad 	beq.w	102d2 <STACK_SIZE+0x2d2>
   10178:	2220      	movs	r2, #32
   1017a:	1c59      	adds	r1, r3, #1
   1017c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   10180:	54e2      	strb	r2, [r4, r3]
   10182:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   10186:	e6c5      	b.n	ff14 <d_print_mod+0x174>
   10188:	686a      	ldr	r2, [r5, #4]
   1018a:	e692      	b.n	feb2 <d_print_mod+0x112>
   1018c:	4d0b      	ldr	r5, [pc, #44]	; (101bc <STACK_SIZE+0x1bc>)
   1018e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   10192:	f105 0709 	add.w	r7, r5, #9
   10196:	f04f 0800 	mov.w	r8, #0
   1019a:	e01b      	b.n	101d4 <STACK_SIZE+0x1d4>
   1019c:	00022ef3 	.word	0x00022ef3
   101a0:	00022f08 	.word	0x00022f08
   101a4:	00022f0b 	.word	0x00022f0b
   101a8:	00022f18 	.word	0x00022f18
   101ac:	00022f24 	.word	0x00022f24
   101b0:	00022f28 	.word	0x00022f28
   101b4:	00022edf 	.word	0x00022edf
   101b8:	00022eec 	.word	0x00022eec
   101bc:	00022ed3 	.word	0x00022ed3
   101c0:	460b      	mov	r3, r1
   101c2:	3101      	adds	r1, #1
   101c4:	42af      	cmp	r7, r5
   101c6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   101ca:	54e6      	strb	r6, [r4, r3]
   101cc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   101d0:	f43f ae7c 	beq.w	fecc <d_print_mod+0x12c>
   101d4:	29ff      	cmp	r1, #255	; 0xff
   101d6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   101da:	d1f1      	bne.n	101c0 <STACK_SIZE+0x1c0>
   101dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   101e0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   101e4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   101e8:	4620      	mov	r0, r4
   101ea:	4798      	blx	r3
   101ec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   101f0:	3301      	adds	r3, #1
   101f2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   101f6:	2101      	movs	r1, #1
   101f8:	2300      	movs	r3, #0
   101fa:	e7e3      	b.n	101c4 <STACK_SIZE+0x1c4>
   101fc:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   10200:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   10204:	462a      	mov	r2, r5
   10206:	9301      	str	r3, [sp, #4]
   10208:	9500      	str	r5, [sp, #0]
   1020a:	f7fd f815 	bl	d238 <d_print_comp_inner>
   1020e:	9b01      	ldr	r3, [sp, #4]
   10210:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   10214:	e65a      	b.n	fecc <d_print_mod+0x12c>
   10216:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1021a:	686a      	ldr	r2, [r5, #4]
   1021c:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   10220:	4641      	mov	r1, r8
   10222:	4620      	mov	r0, r4
   10224:	9301      	str	r3, [sp, #4]
   10226:	9200      	str	r2, [sp, #0]
   10228:	f7fd f806 	bl	d238 <d_print_comp_inner>
   1022c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10230:	9b01      	ldr	r3, [sp, #4]
   10232:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   10236:	29ff      	cmp	r1, #255	; 0xff
   10238:	d03a      	beq.n	102b0 <STACK_SIZE+0x2b0>
   1023a:	1c4a      	adds	r2, r1, #1
   1023c:	2329      	movs	r3, #41	; 0x29
   1023e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   10242:	5463      	strb	r3, [r4, r1]
   10244:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   10248:	e640      	b.n	fecc <d_print_mod+0x12c>
   1024a:	2600      	movs	r6, #0
   1024c:	4619      	mov	r1, r3
   1024e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   10252:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   10256:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1025a:	4798      	blx	r3
   1025c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10260:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   10264:	1c5a      	adds	r2, r3, #1
   10266:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1026a:	4633      	mov	r3, r6
   1026c:	e6c7      	b.n	fffe <d_print_mod+0x25e>
   1026e:	2500      	movs	r5, #0
   10270:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10274:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10278:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1027c:	4620      	mov	r0, r4
   1027e:	4798      	blx	r3
   10280:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10284:	3301      	adds	r3, #1
   10286:	4629      	mov	r1, r5
   10288:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1028c:	2201      	movs	r2, #1
   1028e:	e636      	b.n	fefe <d_print_mod+0x15e>
   10290:	2600      	movs	r6, #0
   10292:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   10296:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1029a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1029e:	4798      	blx	r3
   102a0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   102a4:	3301      	adds	r3, #1
   102a6:	4631      	mov	r1, r6
   102a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   102ac:	2201      	movs	r2, #1
   102ae:	e5f9      	b.n	fea4 <d_print_mod+0x104>
   102b0:	2500      	movs	r5, #0
   102b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   102b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   102ba:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   102be:	4620      	mov	r0, r4
   102c0:	4798      	blx	r3
   102c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   102c6:	3301      	adds	r3, #1
   102c8:	4629      	mov	r1, r5
   102ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   102ce:	2201      	movs	r2, #1
   102d0:	e7b4      	b.n	1023c <STACK_SIZE+0x23c>
   102d2:	2500      	movs	r5, #0
   102d4:	4619      	mov	r1, r3
   102d6:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   102da:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   102de:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   102e2:	4798      	blx	r3
   102e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   102e8:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   102ec:	1c5a      	adds	r2, r3, #1
   102ee:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   102f2:	462b      	mov	r3, r5
   102f4:	e740      	b.n	10178 <STACK_SIZE+0x178>
   102f6:	2500      	movs	r5, #0
   102f8:	4619      	mov	r1, r3
   102fa:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   102fe:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   10302:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   10306:	4798      	blx	r3
   10308:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1030c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   10310:	1c5a      	adds	r2, r3, #1
   10312:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   10316:	462b      	mov	r3, r5
   10318:	e721      	b.n	1015e <STACK_SIZE+0x15e>
   1031a:	4619      	mov	r1, r3
   1031c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   10320:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   10324:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   10328:	4798      	blx	r3
   1032a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1032e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   10332:	1c5a      	adds	r2, r3, #1
   10334:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   10338:	462b      	mov	r3, r5
   1033a:	e5d2      	b.n	fee2 <d_print_mod+0x142>

0001033c <d_print_mod_list>:
   1033c:	2a00      	cmp	r2, #0
   1033e:	f000 80a1 	beq.w	10484 <d_print_mod_list+0x148>
   10342:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10346:	461e      	mov	r6, r3
   10348:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
   1034c:	b089      	sub	sp, #36	; 0x24
   1034e:	4605      	mov	r5, r0
   10350:	bb43      	cbnz	r3, 103a4 <d_print_mod_list+0x68>
   10352:	460f      	mov	r7, r1
   10354:	4614      	mov	r4, r2
   10356:	f04f 0801 	mov.w	r8, #1
   1035a:	e002      	b.n	10362 <d_print_mod_list+0x26>
   1035c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   10360:	bb03      	cbnz	r3, 103a4 <d_print_mod_list+0x68>
   10362:	68a3      	ldr	r3, [r4, #8]
   10364:	b9db      	cbnz	r3, 1039e <d_print_mod_list+0x62>
   10366:	6862      	ldr	r2, [r4, #4]
   10368:	7813      	ldrb	r3, [r2, #0]
   1036a:	b92e      	cbnz	r6, 10378 <d_print_mod_list+0x3c>
   1036c:	f1a3 011c 	sub.w	r1, r3, #28
   10370:	2904      	cmp	r1, #4
   10372:	d914      	bls.n	1039e <d_print_mod_list+0x62>
   10374:	2b4c      	cmp	r3, #76	; 0x4c
   10376:	d012      	beq.n	1039e <d_print_mod_list+0x62>
   10378:	68e1      	ldr	r1, [r4, #12]
   1037a:	f8c4 8008 	str.w	r8, [r4, #8]
   1037e:	2b29      	cmp	r3, #41	; 0x29
   10380:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
   10384:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
   10388:	d00f      	beq.n	103aa <d_print_mod_list+0x6e>
   1038a:	2b2a      	cmp	r3, #42	; 0x2a
   1038c:	d018      	beq.n	103c0 <d_print_mod_list+0x84>
   1038e:	2b02      	cmp	r3, #2
   10390:	d021      	beq.n	103d6 <d_print_mod_list+0x9a>
   10392:	4639      	mov	r1, r7
   10394:	4628      	mov	r0, r5
   10396:	f7ff fd03 	bl	fda0 <d_print_mod>
   1039a:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   1039e:	6824      	ldr	r4, [r4, #0]
   103a0:	2c00      	cmp	r4, #0
   103a2:	d1db      	bne.n	1035c <d_print_mod_list+0x20>
   103a4:	b009      	add	sp, #36	; 0x24
   103a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   103aa:	6823      	ldr	r3, [r4, #0]
   103ac:	3208      	adds	r2, #8
   103ae:	4639      	mov	r1, r7
   103b0:	4628      	mov	r0, r5
   103b2:	f000 f9d9 	bl	10768 <d_print_function_type.isra.11>
   103b6:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   103ba:	b009      	add	sp, #36	; 0x24
   103bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   103c0:	6823      	ldr	r3, [r4, #0]
   103c2:	3204      	adds	r2, #4
   103c4:	4639      	mov	r1, r7
   103c6:	4628      	mov	r0, r5
   103c8:	f000 f8f2 	bl	105b0 <d_print_array_type.isra.10>
   103cc:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   103d0:	b009      	add	sp, #36	; 0x24
   103d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   103d6:	2600      	movs	r6, #0
   103d8:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
   103dc:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
   103e0:	6852      	ldr	r2, [r2, #4]
   103e2:	4639      	mov	r1, r7
   103e4:	4628      	mov	r0, r5
   103e6:	f7ff fccb 	bl	fd80 <d_print_comp>
   103ea:	f017 0a04 	ands.w	sl, r7, #4
   103ee:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
   103f2:	d023      	beq.n	1043c <d_print_mod_list+0x100>
   103f4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   103f8:	29ff      	cmp	r1, #255	; 0xff
   103fa:	f000 80c1 	beq.w	10580 <d_print_mod_list+0x244>
   103fe:	1c4a      	adds	r2, r1, #1
   10400:	232e      	movs	r3, #46	; 0x2e
   10402:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
   10406:	546b      	strb	r3, [r5, r1]
   10408:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
   1040c:	6863      	ldr	r3, [r4, #4]
   1040e:	689c      	ldr	r4, [r3, #8]
   10410:	7823      	ldrb	r3, [r4, #0]
   10412:	2b46      	cmp	r3, #70	; 0x46
   10414:	d037      	beq.n	10486 <d_print_mod_list+0x14a>
   10416:	f1a3 021c 	sub.w	r2, r3, #28
   1041a:	2a04      	cmp	r2, #4
   1041c:	d90b      	bls.n	10436 <d_print_mod_list+0xfa>
   1041e:	2b4c      	cmp	r3, #76	; 0x4c
   10420:	d009      	beq.n	10436 <d_print_mod_list+0xfa>
   10422:	4622      	mov	r2, r4
   10424:	4639      	mov	r1, r7
   10426:	4628      	mov	r0, r5
   10428:	f7ff fcaa 	bl	fd80 <d_print_comp>
   1042c:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   10430:	b009      	add	sp, #36	; 0x24
   10432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10436:	6864      	ldr	r4, [r4, #4]
   10438:	7823      	ldrb	r3, [r4, #0]
   1043a:	e7ec      	b.n	10416 <d_print_mod_list+0xda>
   1043c:	4e58      	ldr	r6, [pc, #352]	; (105a0 <d_print_mod_list+0x264>)
   1043e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   10442:	f106 0b02 	add.w	fp, r6, #2
   10446:	e009      	b.n	1045c <d_print_mod_list+0x120>
   10448:	460b      	mov	r3, r1
   1044a:	3101      	adds	r1, #1
   1044c:	455e      	cmp	r6, fp
   1044e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   10452:	f805 8003 	strb.w	r8, [r5, r3]
   10456:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   1045a:	d0d7      	beq.n	1040c <d_print_mod_list+0xd0>
   1045c:	29ff      	cmp	r1, #255	; 0xff
   1045e:	f816 8b01 	ldrb.w	r8, [r6], #1
   10462:	d1f1      	bne.n	10448 <d_print_mod_list+0x10c>
   10464:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   10468:	f885 a0ff 	strb.w	sl, [r5, #255]	; 0xff
   1046c:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   10470:	4628      	mov	r0, r5
   10472:	4798      	blx	r3
   10474:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   10478:	3301      	adds	r3, #1
   1047a:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1047e:	2101      	movs	r1, #1
   10480:	2300      	movs	r3, #0
   10482:	e7e3      	b.n	1044c <d_print_mod_list+0x110>
   10484:	4770      	bx	lr
   10486:	4e47      	ldr	r6, [pc, #284]	; (105a4 <d_print_mod_list+0x268>)
   10488:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1048c:	f106 0a0d 	add.w	sl, r6, #13
   10490:	f04f 0b00 	mov.w	fp, #0
   10494:	e009      	b.n	104aa <d_print_mod_list+0x16e>
   10496:	460b      	mov	r3, r1
   10498:	3101      	adds	r1, #1
   1049a:	45b2      	cmp	sl, r6
   1049c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   104a0:	f805 8003 	strb.w	r8, [r5, r3]
   104a4:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   104a8:	d013      	beq.n	104d2 <d_print_mod_list+0x196>
   104aa:	29ff      	cmp	r1, #255	; 0xff
   104ac:	f816 8b01 	ldrb.w	r8, [r6], #1
   104b0:	d1f1      	bne.n	10496 <d_print_mod_list+0x15a>
   104b2:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   104b6:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   104ba:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   104be:	4628      	mov	r0, r5
   104c0:	4798      	blx	r3
   104c2:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   104c6:	3301      	adds	r3, #1
   104c8:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   104cc:	2101      	movs	r1, #1
   104ce:	2300      	movs	r3, #0
   104d0:	e7e3      	b.n	1049a <d_print_mod_list+0x15e>
   104d2:	68a2      	ldr	r2, [r4, #8]
   104d4:	4934      	ldr	r1, [pc, #208]	; (105a8 <d_print_mod_list+0x26c>)
   104d6:	3201      	adds	r2, #1
   104d8:	a801      	add	r0, sp, #4
   104da:	f004 fc63 	bl	14da4 <sprintf>
   104de:	a801      	add	r0, sp, #4
   104e0:	f005 f82e 	bl	15540 <strlen>
   104e4:	b328      	cbz	r0, 10532 <d_print_mod_list+0x1f6>
   104e6:	ae01      	add	r6, sp, #4
   104e8:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   104ec:	eb06 0a00 	add.w	sl, r6, r0
   104f0:	f04f 0b00 	mov.w	fp, #0
   104f4:	e009      	b.n	1050a <d_print_mod_list+0x1ce>
   104f6:	460b      	mov	r3, r1
   104f8:	3101      	adds	r1, #1
   104fa:	45b2      	cmp	sl, r6
   104fc:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   10500:	f805 8003 	strb.w	r8, [r5, r3]
   10504:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   10508:	d015      	beq.n	10536 <d_print_mod_list+0x1fa>
   1050a:	29ff      	cmp	r1, #255	; 0xff
   1050c:	f816 8b01 	ldrb.w	r8, [r6], #1
   10510:	d1f1      	bne.n	104f6 <d_print_mod_list+0x1ba>
   10512:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   10516:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   1051a:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1051e:	4628      	mov	r0, r5
   10520:	4798      	blx	r3
   10522:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   10526:	3301      	adds	r3, #1
   10528:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1052c:	2101      	movs	r1, #1
   1052e:	2300      	movs	r3, #0
   10530:	e7e3      	b.n	104fa <d_print_mod_list+0x1be>
   10532:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   10536:	4e1d      	ldr	r6, [pc, #116]	; (105ac <d_print_mod_list+0x270>)
   10538:	f04f 0b00 	mov.w	fp, #0
   1053c:	f106 0a03 	add.w	sl, r6, #3
   10540:	e00a      	b.n	10558 <d_print_mod_list+0x21c>
   10542:	460b      	mov	r3, r1
   10544:	3101      	adds	r1, #1
   10546:	45b2      	cmp	sl, r6
   10548:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1054c:	f805 8003 	strb.w	r8, [r5, r3]
   10550:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   10554:	f43f af6f 	beq.w	10436 <d_print_mod_list+0xfa>
   10558:	29ff      	cmp	r1, #255	; 0xff
   1055a:	f816 8b01 	ldrb.w	r8, [r6], #1
   1055e:	d1f0      	bne.n	10542 <d_print_mod_list+0x206>
   10560:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   10564:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   10568:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1056c:	4628      	mov	r0, r5
   1056e:	4798      	blx	r3
   10570:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   10574:	3301      	adds	r3, #1
   10576:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1057a:	2101      	movs	r1, #1
   1057c:	2300      	movs	r3, #0
   1057e:	e7e2      	b.n	10546 <d_print_mod_list+0x20a>
   10580:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   10584:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   10588:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
   1058c:	4628      	mov	r0, r5
   1058e:	4798      	blx	r3
   10590:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   10594:	3301      	adds	r3, #1
   10596:	4631      	mov	r1, r6
   10598:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1059c:	2201      	movs	r2, #1
   1059e:	e72f      	b.n	10400 <d_print_mod_list+0xc4>
   105a0:	00022c5c 	.word	0x00022c5c
   105a4:	00022c60 	.word	0x00022c60
   105a8:	00021c30 	.word	0x00021c30
   105ac:	00022c70 	.word	0x00022c70

000105b0 <d_print_array_type.isra.10>:
   105b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   105b4:	4604      	mov	r4, r0
   105b6:	460f      	mov	r7, r1
   105b8:	4690      	mov	r8, r2
   105ba:	b163      	cbz	r3, 105d6 <d_print_array_type.isra.10+0x26>
   105bc:	461e      	mov	r6, r3
   105be:	461a      	mov	r2, r3
   105c0:	6893      	ldr	r3, [r2, #8]
   105c2:	b393      	cbz	r3, 1062a <d_print_array_type.isra.10+0x7a>
   105c4:	6812      	ldr	r2, [r2, #0]
   105c6:	2a00      	cmp	r2, #0
   105c8:	d1fa      	bne.n	105c0 <d_print_array_type.isra.10+0x10>
   105ca:	4613      	mov	r3, r2
   105cc:	4639      	mov	r1, r7
   105ce:	4632      	mov	r2, r6
   105d0:	4620      	mov	r0, r4
   105d2:	f7ff feb3 	bl	1033c <d_print_mod_list>
   105d6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   105da:	29ff      	cmp	r1, #255	; 0xff
   105dc:	f000 808d 	beq.w	106fa <d_print_array_type.isra.10+0x14a>
   105e0:	1c4b      	adds	r3, r1, #1
   105e2:	2220      	movs	r2, #32
   105e4:	2bff      	cmp	r3, #255	; 0xff
   105e6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   105ea:	5462      	strb	r2, [r4, r1]
   105ec:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   105f0:	d068      	beq.n	106c4 <d_print_array_type.isra.10+0x114>
   105f2:	225b      	movs	r2, #91	; 0x5b
   105f4:	1c59      	adds	r1, r3, #1
   105f6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   105fa:	54e2      	strb	r2, [r4, r3]
   105fc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   10600:	f8d8 2000 	ldr.w	r2, [r8]
   10604:	b12a      	cbz	r2, 10612 <d_print_array_type.isra.10+0x62>
   10606:	4639      	mov	r1, r7
   10608:	4620      	mov	r0, r4
   1060a:	f7ff fbb9 	bl	fd80 <d_print_comp>
   1060e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10612:	29ff      	cmp	r1, #255	; 0xff
   10614:	f000 8082 	beq.w	1071c <d_print_array_type.isra.10+0x16c>
   10618:	1c4a      	adds	r2, r1, #1
   1061a:	235d      	movs	r3, #93	; 0x5d
   1061c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   10620:	5463      	strb	r3, [r4, r1]
   10622:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   10626:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1062a:	6852      	ldr	r2, [r2, #4]
   1062c:	7812      	ldrb	r2, [r2, #0]
   1062e:	2a2a      	cmp	r2, #42	; 0x2a
   10630:	d03f      	beq.n	106b2 <d_print_array_type.isra.10+0x102>
   10632:	f8df 9130 	ldr.w	r9, [pc, #304]	; 10764 <d_print_array_type.isra.10+0x1b4>
   10636:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1063a:	461d      	mov	r5, r3
   1063c:	f109 0b02 	add.w	fp, r9, #2
   10640:	e00a      	b.n	10658 <d_print_array_type.isra.10+0xa8>
   10642:	460b      	mov	r3, r1
   10644:	45cb      	cmp	fp, r9
   10646:	f101 0101 	add.w	r1, r1, #1
   1064a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1064e:	f804 a003 	strb.w	sl, [r4, r3]
   10652:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   10656:	d01a      	beq.n	1068e <d_print_array_type.isra.10+0xde>
   10658:	29ff      	cmp	r1, #255	; 0xff
   1065a:	f819 ab01 	ldrb.w	sl, [r9], #1
   1065e:	d1f0      	bne.n	10642 <d_print_array_type.isra.10+0x92>
   10660:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10664:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   10668:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1066c:	4620      	mov	r0, r4
   1066e:	4798      	blx	r3
   10670:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10674:	3301      	adds	r3, #1
   10676:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1067a:	2300      	movs	r3, #0
   1067c:	2101      	movs	r1, #1
   1067e:	45cb      	cmp	fp, r9
   10680:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   10684:	f804 a003 	strb.w	sl, [r4, r3]
   10688:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1068c:	d1e4      	bne.n	10658 <d_print_array_type.isra.10+0xa8>
   1068e:	2300      	movs	r3, #0
   10690:	4632      	mov	r2, r6
   10692:	4639      	mov	r1, r7
   10694:	4620      	mov	r0, r4
   10696:	f7ff fe51 	bl	1033c <d_print_mod_list>
   1069a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1069e:	2bff      	cmp	r3, #255	; 0xff
   106a0:	d04d      	beq.n	1073e <d_print_array_type.isra.10+0x18e>
   106a2:	1c59      	adds	r1, r3, #1
   106a4:	2229      	movs	r2, #41	; 0x29
   106a6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   106aa:	54e2      	strb	r2, [r4, r3]
   106ac:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   106b0:	e793      	b.n	105da <d_print_array_type.isra.10+0x2a>
   106b2:	4632      	mov	r2, r6
   106b4:	4639      	mov	r1, r7
   106b6:	4620      	mov	r0, r4
   106b8:	f7ff fe40 	bl	1033c <d_print_mod_list>
   106bc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   106c0:	2bff      	cmp	r3, #255	; 0xff
   106c2:	d196      	bne.n	105f2 <d_print_array_type.isra.10+0x42>
   106c4:	2200      	movs	r2, #0
   106c6:	4619      	mov	r1, r3
   106c8:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   106cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   106d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   106d4:	4620      	mov	r0, r4
   106d6:	4798      	blx	r3
   106d8:	235b      	movs	r3, #91	; 0x5b
   106da:	7023      	strb	r3, [r4, #0]
   106dc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   106e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   106e4:	f8d8 2000 	ldr.w	r2, [r8]
   106e8:	3301      	adds	r3, #1
   106ea:	2101      	movs	r1, #1
   106ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   106f0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   106f4:	2a00      	cmp	r2, #0
   106f6:	d186      	bne.n	10606 <d_print_array_type.isra.10+0x56>
   106f8:	e78e      	b.n	10618 <d_print_array_type.isra.10+0x68>
   106fa:	2500      	movs	r5, #0
   106fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10700:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   10704:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10708:	4620      	mov	r0, r4
   1070a:	4798      	blx	r3
   1070c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10710:	3301      	adds	r3, #1
   10712:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10716:	4629      	mov	r1, r5
   10718:	2301      	movs	r3, #1
   1071a:	e762      	b.n	105e2 <d_print_array_type.isra.10+0x32>
   1071c:	2500      	movs	r5, #0
   1071e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10722:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10726:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1072a:	4620      	mov	r0, r4
   1072c:	4798      	blx	r3
   1072e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10732:	3301      	adds	r3, #1
   10734:	4629      	mov	r1, r5
   10736:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1073a:	2201      	movs	r2, #1
   1073c:	e76d      	b.n	1061a <d_print_array_type.isra.10+0x6a>
   1073e:	2500      	movs	r5, #0
   10740:	4619      	mov	r1, r3
   10742:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10746:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1074a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1074e:	4620      	mov	r0, r4
   10750:	4798      	blx	r3
   10752:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10756:	1c5a      	adds	r2, r3, #1
   10758:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1075c:	462b      	mov	r3, r5
   1075e:	2101      	movs	r1, #1
   10760:	e7a0      	b.n	106a4 <d_print_array_type.isra.10+0xf4>
   10762:	bf00      	nop
   10764:	00022e4c 	.word	0x00022e4c

00010768 <d_print_function_type.isra.11>:
   10768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1076c:	4604      	mov	r4, r0
   1076e:	b083      	sub	sp, #12
   10770:	460e      	mov	r6, r1
   10772:	4617      	mov	r7, r2
   10774:	461d      	mov	r5, r3
   10776:	b34b      	cbz	r3, 107cc <d_print_function_type.isra.11+0x64>
   10778:	689b      	ldr	r3, [r3, #8]
   1077a:	bb3b      	cbnz	r3, 107cc <d_print_function_type.isra.11+0x64>
   1077c:	462a      	mov	r2, r5
   1077e:	2001      	movs	r0, #1
   10780:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 1094c <d_print_function_type.isra.11+0x1e4>
   10784:	e006      	b.n	10794 <d_print_function_type.isra.11+0x2c>
   10786:	f411 6f60 	tst.w	r1, #3584	; 0xe00
   1078a:	d15a      	bne.n	10842 <d_print_function_type.isra.11+0xda>
   1078c:	6812      	ldr	r2, [r2, #0]
   1078e:	b1ea      	cbz	r2, 107cc <d_print_function_type.isra.11+0x64>
   10790:	6893      	ldr	r3, [r2, #8]
   10792:	b9db      	cbnz	r3, 107cc <d_print_function_type.isra.11+0x64>
   10794:	6853      	ldr	r3, [r2, #4]
   10796:	781b      	ldrb	r3, [r3, #0]
   10798:	3b19      	subs	r3, #25
   1079a:	b2db      	uxtb	r3, r3
   1079c:	2b12      	cmp	r3, #18
   1079e:	fa00 f103 	lsl.w	r1, r0, r3
   107a2:	d8f3      	bhi.n	1078c <d_print_function_type.isra.11+0x24>
   107a4:	ea11 0f0e 	tst.w	r1, lr
   107a8:	d0ed      	beq.n	10786 <d_print_function_type.isra.11+0x1e>
   107aa:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   107ae:	2b20      	cmp	r3, #32
   107b0:	d04d      	beq.n	1084e <d_print_function_type.isra.11+0xe6>
   107b2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   107b6:	2bff      	cmp	r3, #255	; 0xff
   107b8:	f000 80b4 	beq.w	10924 <d_print_function_type.isra.11+0x1bc>
   107bc:	1c59      	adds	r1, r3, #1
   107be:	2220      	movs	r2, #32
   107c0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   107c4:	54e2      	strb	r2, [r4, r3]
   107c6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   107ca:	e042      	b.n	10852 <d_print_function_type.isra.11+0xea>
   107cc:	2300      	movs	r3, #0
   107ce:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   107d2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   107d6:	4631      	mov	r1, r6
   107d8:	462a      	mov	r2, r5
   107da:	4620      	mov	r0, r4
   107dc:	f7ff fdae 	bl	1033c <d_print_mod_list>
   107e0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   107e4:	29ff      	cmp	r1, #255	; 0xff
   107e6:	d056      	beq.n	10896 <d_print_function_type.isra.11+0x12e>
   107e8:	1c4b      	adds	r3, r1, #1
   107ea:	2228      	movs	r2, #40	; 0x28
   107ec:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   107f0:	5462      	strb	r2, [r4, r1]
   107f2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   107f6:	6838      	ldr	r0, [r7, #0]
   107f8:	b178      	cbz	r0, 1081a <d_print_function_type.isra.11+0xb2>
   107fa:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   107fe:	9000      	str	r0, [sp, #0]
   10800:	4602      	mov	r2, r0
   10802:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   10806:	4631      	mov	r1, r6
   10808:	4620      	mov	r0, r4
   1080a:	9301      	str	r3, [sp, #4]
   1080c:	f7fc fd14 	bl	d238 <d_print_comp_inner>
   10810:	9a01      	ldr	r2, [sp, #4]
   10812:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   10816:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1081a:	2bff      	cmp	r3, #255	; 0xff
   1081c:	d04d      	beq.n	108ba <d_print_function_type.isra.11+0x152>
   1081e:	1c5a      	adds	r2, r3, #1
   10820:	2029      	movs	r0, #41	; 0x29
   10822:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   10826:	4631      	mov	r1, r6
   10828:	54e0      	strb	r0, [r4, r3]
   1082a:	462a      	mov	r2, r5
   1082c:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
   10830:	2301      	movs	r3, #1
   10832:	4620      	mov	r0, r4
   10834:	f7ff fd82 	bl	1033c <d_print_mod_list>
   10838:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
   1083c:	b003      	add	sp, #12
   1083e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10842:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   10846:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
   1084a:	2a28      	cmp	r2, #40	; 0x28
   1084c:	d1af      	bne.n	107ae <d_print_function_type.isra.11+0x46>
   1084e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10852:	29ff      	cmp	r1, #255	; 0xff
   10854:	d054      	beq.n	10900 <d_print_function_type.isra.11+0x198>
   10856:	1c4a      	adds	r2, r1, #1
   10858:	2328      	movs	r3, #40	; 0x28
   1085a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1085e:	5463      	strb	r3, [r4, r1]
   10860:	f04f 0900 	mov.w	r9, #0
   10864:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   10868:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   1086c:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   10870:	464b      	mov	r3, r9
   10872:	462a      	mov	r2, r5
   10874:	4631      	mov	r1, r6
   10876:	4620      	mov	r0, r4
   10878:	f7ff fd60 	bl	1033c <d_print_mod_list>
   1087c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   10880:	2bff      	cmp	r3, #255	; 0xff
   10882:	d02c      	beq.n	108de <d_print_function_type.isra.11+0x176>
   10884:	1c59      	adds	r1, r3, #1
   10886:	2229      	movs	r2, #41	; 0x29
   10888:	29ff      	cmp	r1, #255	; 0xff
   1088a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1088e:	54e2      	strb	r2, [r4, r3]
   10890:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   10894:	d1a8      	bne.n	107e8 <d_print_function_type.isra.11+0x80>
   10896:	f04f 0900 	mov.w	r9, #0
   1089a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1089e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   108a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   108a6:	4620      	mov	r0, r4
   108a8:	4798      	blx	r3
   108aa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   108ae:	3301      	adds	r3, #1
   108b0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   108b4:	4649      	mov	r1, r9
   108b6:	2301      	movs	r3, #1
   108b8:	e797      	b.n	107ea <d_print_function_type.isra.11+0x82>
   108ba:	2700      	movs	r7, #0
   108bc:	4619      	mov	r1, r3
   108be:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   108c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   108c6:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   108ca:	4620      	mov	r0, r4
   108cc:	4798      	blx	r3
   108ce:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   108d2:	1c5a      	adds	r2, r3, #1
   108d4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   108d8:	463b      	mov	r3, r7
   108da:	2201      	movs	r2, #1
   108dc:	e7a0      	b.n	10820 <d_print_function_type.isra.11+0xb8>
   108de:	4619      	mov	r1, r3
   108e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   108e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   108e8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   108ec:	4620      	mov	r0, r4
   108ee:	4798      	blx	r3
   108f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   108f4:	1c5a      	adds	r2, r3, #1
   108f6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   108fa:	464b      	mov	r3, r9
   108fc:	2101      	movs	r1, #1
   108fe:	e7c2      	b.n	10886 <d_print_function_type.isra.11+0x11e>
   10900:	f04f 0800 	mov.w	r8, #0
   10904:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10908:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1090c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   10910:	4620      	mov	r0, r4
   10912:	4798      	blx	r3
   10914:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10918:	3301      	adds	r3, #1
   1091a:	4641      	mov	r1, r8
   1091c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10920:	2201      	movs	r2, #1
   10922:	e799      	b.n	10858 <d_print_function_type.isra.11+0xf0>
   10924:	f04f 0800 	mov.w	r8, #0
   10928:	4619      	mov	r1, r3
   1092a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1092e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10932:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   10936:	4620      	mov	r0, r4
   10938:	4798      	blx	r3
   1093a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1093e:	1c5a      	adds	r2, r3, #1
   10940:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   10944:	4643      	mov	r3, r8
   10946:	2101      	movs	r1, #1
   10948:	e739      	b.n	107be <d_print_function_type.isra.11+0x56>
   1094a:	bf00      	nop
   1094c:	00043107 	.word	0x00043107

00010950 <d_print_expr_op>:
   10950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10954:	7815      	ldrb	r5, [r2, #0]
   10956:	2d31      	cmp	r5, #49	; 0x31
   10958:	b082      	sub	sp, #8
   1095a:	4613      	mov	r3, r2
   1095c:	4604      	mov	r4, r0
   1095e:	d00d      	beq.n	1097c <d_print_expr_op+0x2c>
   10960:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
   10964:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   10968:	e88d 0028 	stmia.w	sp, {r3, r5}
   1096c:	f7fc fc64 	bl	d238 <d_print_comp_inner>
   10970:	9b01      	ldr	r3, [sp, #4]
   10972:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   10976:	b002      	add	sp, #8
   10978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1097c:	6853      	ldr	r3, [r2, #4]
   1097e:	689f      	ldr	r7, [r3, #8]
   10980:	685d      	ldr	r5, [r3, #4]
   10982:	2f00      	cmp	r7, #0
   10984:	d0f7      	beq.n	10976 <d_print_expr_op+0x26>
   10986:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1098a:	442f      	add	r7, r5
   1098c:	f04f 0800 	mov.w	r8, #0
   10990:	e008      	b.n	109a4 <d_print_expr_op+0x54>
   10992:	460b      	mov	r3, r1
   10994:	3101      	adds	r1, #1
   10996:	42bd      	cmp	r5, r7
   10998:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1099c:	54e6      	strb	r6, [r4, r3]
   1099e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   109a2:	d0e8      	beq.n	10976 <d_print_expr_op+0x26>
   109a4:	29ff      	cmp	r1, #255	; 0xff
   109a6:	f815 6b01 	ldrb.w	r6, [r5], #1
   109aa:	d1f2      	bne.n	10992 <d_print_expr_op+0x42>
   109ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   109b0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   109b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   109b8:	4620      	mov	r0, r4
   109ba:	4798      	blx	r3
   109bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   109c0:	3301      	adds	r3, #1
   109c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   109c6:	2101      	movs	r1, #1
   109c8:	2300      	movs	r3, #0
   109ca:	e7e4      	b.n	10996 <d_print_expr_op+0x46>

000109cc <d_print_subexpr>:
   109cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   109ce:	7813      	ldrb	r3, [r2, #0]
   109d0:	2b01      	cmp	r3, #1
   109d2:	b083      	sub	sp, #12
   109d4:	4615      	mov	r5, r2
   109d6:	460e      	mov	r6, r1
   109d8:	4604      	mov	r4, r0
   109da:	d929      	bls.n	10a30 <d_print_subexpr+0x64>
   109dc:	2b30      	cmp	r3, #48	; 0x30
   109de:	d027      	beq.n	10a30 <d_print_subexpr+0x64>
   109e0:	2b06      	cmp	r3, #6
   109e2:	d025      	beq.n	10a30 <d_print_subexpr+0x64>
   109e4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   109e8:	29ff      	cmp	r1, #255	; 0xff
   109ea:	d031      	beq.n	10a50 <d_print_subexpr+0x84>
   109ec:	1c4a      	adds	r2, r1, #1
   109ee:	2328      	movs	r3, #40	; 0x28
   109f0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   109f4:	5463      	strb	r3, [r4, r1]
   109f6:	462a      	mov	r2, r5
   109f8:	4631      	mov	r1, r6
   109fa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   109fe:	4620      	mov	r0, r4
   10a00:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   10a04:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   10a08:	9301      	str	r3, [sp, #4]
   10a0a:	9500      	str	r5, [sp, #0]
   10a0c:	f7fc fc14 	bl	d238 <d_print_comp_inner>
   10a10:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10a14:	9b01      	ldr	r3, [sp, #4]
   10a16:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   10a1a:	29ff      	cmp	r1, #255	; 0xff
   10a1c:	d028      	beq.n	10a70 <d_print_subexpr+0xa4>
   10a1e:	1c4a      	adds	r2, r1, #1
   10a20:	2329      	movs	r3, #41	; 0x29
   10a22:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   10a26:	5463      	strb	r3, [r4, r1]
   10a28:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   10a2c:	b003      	add	sp, #12
   10a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a30:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   10a34:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   10a38:	4631      	mov	r1, r6
   10a3a:	462a      	mov	r2, r5
   10a3c:	4620      	mov	r0, r4
   10a3e:	9301      	str	r3, [sp, #4]
   10a40:	9500      	str	r5, [sp, #0]
   10a42:	f7fc fbf9 	bl	d238 <d_print_comp_inner>
   10a46:	9b01      	ldr	r3, [sp, #4]
   10a48:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   10a4c:	b003      	add	sp, #12
   10a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a50:	2700      	movs	r7, #0
   10a52:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10a56:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10a5a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   10a5e:	4798      	blx	r3
   10a60:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10a64:	3301      	adds	r3, #1
   10a66:	4639      	mov	r1, r7
   10a68:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10a6c:	2201      	movs	r2, #1
   10a6e:	e7be      	b.n	109ee <d_print_subexpr+0x22>
   10a70:	2500      	movs	r5, #0
   10a72:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10a76:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10a7a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   10a7e:	4620      	mov	r0, r4
   10a80:	4798      	blx	r3
   10a82:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10a86:	3301      	adds	r3, #1
   10a88:	4629      	mov	r1, r5
   10a8a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10a8e:	2201      	movs	r2, #1
   10a90:	e7c6      	b.n	10a20 <d_print_subexpr+0x54>
   10a92:	bf00      	nop

00010a94 <d_maybe_print_fold_expression.isra.15>:
   10a94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a98:	6852      	ldr	r2, [r2, #4]
   10a9a:	6812      	ldr	r2, [r2, #0]
   10a9c:	7815      	ldrb	r5, [r2, #0]
   10a9e:	2d66      	cmp	r5, #102	; 0x66
   10aa0:	d002      	beq.n	10aa8 <d_maybe_print_fold_expression.isra.15+0x14>
   10aa2:	2000      	movs	r0, #0
   10aa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10aa8:	681b      	ldr	r3, [r3, #0]
   10aaa:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
   10aae:	f8d3 9008 	ldr.w	r9, [r3, #8]
   10ab2:	f8d3 8004 	ldr.w	r8, [r3, #4]
   10ab6:	f899 3000 	ldrb.w	r3, [r9]
   10aba:	2b3b      	cmp	r3, #59	; 0x3b
   10abc:	f04f 33ff 	mov.w	r3, #4294967295
   10ac0:	bf04      	itt	eq
   10ac2:	f8d9 5008 	ldreq.w	r5, [r9, #8]
   10ac6:	f8d9 9004 	ldreq.w	r9, [r9, #4]
   10aca:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   10ace:	7853      	ldrb	r3, [r2, #1]
   10ad0:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
   10ad4:	bf18      	it	ne
   10ad6:	2500      	movne	r5, #0
   10ad8:	460e      	mov	r6, r1
   10ada:	4604      	mov	r4, r0
   10adc:	2b26      	cmp	r3, #38	; 0x26
   10ade:	d82b      	bhi.n	10b38 <d_maybe_print_fold_expression.isra.15+0xa4>
   10ae0:	e8df f003 	tbb	[pc, r3]
   10ae4:	2a2a2a90 	.word	0x2a2a2a90
   10ae8:	2a902a2a 	.word	0x2a902a2a
   10aec:	2a2a2a2a 	.word	0x2a2a2a2a
   10af0:	2a2a2a2a 	.word	0x2a2a2a2a
   10af4:	2a2a2a2a 	.word	0x2a2a2a2a
   10af8:	2a2a2a2a 	.word	0x2a2a2a2a
   10afc:	2a2a2a2a 	.word	0x2a2a2a2a
   10b00:	2a2a2a2a 	.word	0x2a2a2a2a
   10b04:	2a2a2a6a 	.word	0x2a2a2a6a
   10b08:	2a2a      	.short	0x2a2a
   10b0a:	2f          	.byte	0x2f
   10b0b:	00          	.byte	0x00
   10b0c:	4642      	mov	r2, r8
   10b0e:	4631      	mov	r1, r6
   10b10:	4620      	mov	r0, r4
   10b12:	f7ff ff1d 	bl	10950 <d_print_expr_op>
   10b16:	464a      	mov	r2, r9
   10b18:	4631      	mov	r1, r6
   10b1a:	4620      	mov	r0, r4
   10b1c:	f7ff ff56 	bl	109cc <d_print_subexpr>
   10b20:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10b24:	29ff      	cmp	r1, #255	; 0xff
   10b26:	f000 80b2 	beq.w	10c8e <d_maybe_print_fold_expression.isra.15+0x1fa>
   10b2a:	1c4a      	adds	r2, r1, #1
   10b2c:	2329      	movs	r3, #41	; 0x29
   10b2e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   10b32:	5463      	strb	r3, [r4, r1]
   10b34:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   10b38:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   10b3c:	2001      	movs	r0, #1
   10b3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b42:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   10b46:	29ff      	cmp	r1, #255	; 0xff
   10b48:	f000 80c5 	beq.w	10cd6 <d_maybe_print_fold_expression.isra.15+0x242>
   10b4c:	1c4a      	adds	r2, r1, #1
   10b4e:	2328      	movs	r3, #40	; 0x28
   10b50:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   10b54:	4620      	mov	r0, r4
   10b56:	5463      	strb	r3, [r4, r1]
   10b58:	464a      	mov	r2, r9
   10b5a:	4631      	mov	r1, r6
   10b5c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   10b60:	4d65      	ldr	r5, [pc, #404]	; (10cf8 <d_maybe_print_fold_expression.isra.15+0x264>)
   10b62:	f7ff ff33 	bl	109cc <d_print_subexpr>
   10b66:	4642      	mov	r2, r8
   10b68:	4631      	mov	r1, r6
   10b6a:	4620      	mov	r0, r4
   10b6c:	f7ff fef0 	bl	10950 <d_print_expr_op>
   10b70:	f105 0904 	add.w	r9, r5, #4
   10b74:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10b78:	f04f 0800 	mov.w	r8, #0
   10b7c:	e008      	b.n	10b90 <d_maybe_print_fold_expression.isra.15+0xfc>
   10b7e:	460b      	mov	r3, r1
   10b80:	3101      	adds	r1, #1
   10b82:	45a9      	cmp	r9, r5
   10b84:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   10b88:	54e6      	strb	r6, [r4, r3]
   10b8a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   10b8e:	d0d3      	beq.n	10b38 <d_maybe_print_fold_expression.isra.15+0xa4>
   10b90:	29ff      	cmp	r1, #255	; 0xff
   10b92:	f815 6b01 	ldrb.w	r6, [r5], #1
   10b96:	d1f2      	bne.n	10b7e <d_maybe_print_fold_expression.isra.15+0xea>
   10b98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10b9c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   10ba0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10ba4:	4620      	mov	r0, r4
   10ba6:	4798      	blx	r3
   10ba8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10bac:	3301      	adds	r3, #1
   10bae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10bb2:	2101      	movs	r1, #1
   10bb4:	2300      	movs	r3, #0
   10bb6:	e7e4      	b.n	10b82 <d_maybe_print_fold_expression.isra.15+0xee>
   10bb8:	4d50      	ldr	r5, [pc, #320]	; (10cfc <d_maybe_print_fold_expression.isra.15+0x268>)
   10bba:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   10bbe:	f105 0b04 	add.w	fp, r5, #4
   10bc2:	e009      	b.n	10bd8 <d_maybe_print_fold_expression.isra.15+0x144>
   10bc4:	460b      	mov	r3, r1
   10bc6:	3101      	adds	r1, #1
   10bc8:	455d      	cmp	r5, fp
   10bca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   10bce:	f804 a003 	strb.w	sl, [r4, r3]
   10bd2:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   10bd6:	d099      	beq.n	10b0c <d_maybe_print_fold_expression.isra.15+0x78>
   10bd8:	29ff      	cmp	r1, #255	; 0xff
   10bda:	f815 ab01 	ldrb.w	sl, [r5], #1
   10bde:	d1f1      	bne.n	10bc4 <d_maybe_print_fold_expression.isra.15+0x130>
   10be0:	f04f 0300 	mov.w	r3, #0
   10be4:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   10be8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10bec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10bf0:	4620      	mov	r0, r4
   10bf2:	4798      	blx	r3
   10bf4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10bf8:	3301      	adds	r3, #1
   10bfa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10bfe:	2101      	movs	r1, #1
   10c00:	2300      	movs	r3, #0
   10c02:	e7e1      	b.n	10bc8 <d_maybe_print_fold_expression.isra.15+0x134>
   10c04:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   10c08:	2bff      	cmp	r3, #255	; 0xff
   10c0a:	d051      	beq.n	10cb0 <d_maybe_print_fold_expression.isra.15+0x21c>
   10c0c:	1c59      	adds	r1, r3, #1
   10c0e:	f04f 0e28 	mov.w	lr, #40	; 0x28
   10c12:	464a      	mov	r2, r9
   10c14:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   10c18:	4620      	mov	r0, r4
   10c1a:	f804 e003 	strb.w	lr, [r4, r3]
   10c1e:	4631      	mov	r1, r6
   10c20:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
   10c24:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 10d00 <d_maybe_print_fold_expression.isra.15+0x26c>
   10c28:	f7ff fed0 	bl	109cc <d_print_subexpr>
   10c2c:	4631      	mov	r1, r6
   10c2e:	4642      	mov	r2, r8
   10c30:	4620      	mov	r0, r4
   10c32:	f7ff fe8d 	bl	10950 <d_print_expr_op>
   10c36:	f109 0b03 	add.w	fp, r9, #3
   10c3a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10c3e:	e009      	b.n	10c54 <d_maybe_print_fold_expression.isra.15+0x1c0>
   10c40:	460b      	mov	r3, r1
   10c42:	3101      	adds	r1, #1
   10c44:	45cb      	cmp	fp, r9
   10c46:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   10c4a:	f804 a003 	strb.w	sl, [r4, r3]
   10c4e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   10c52:	d015      	beq.n	10c80 <d_maybe_print_fold_expression.isra.15+0x1ec>
   10c54:	29ff      	cmp	r1, #255	; 0xff
   10c56:	f819 ab01 	ldrb.w	sl, [r9], #1
   10c5a:	d1f1      	bne.n	10c40 <d_maybe_print_fold_expression.isra.15+0x1ac>
   10c5c:	f04f 0300 	mov.w	r3, #0
   10c60:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   10c64:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10c68:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10c6c:	4620      	mov	r0, r4
   10c6e:	4798      	blx	r3
   10c70:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10c74:	3301      	adds	r3, #1
   10c76:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10c7a:	2101      	movs	r1, #1
   10c7c:	2300      	movs	r3, #0
   10c7e:	e7e1      	b.n	10c44 <d_maybe_print_fold_expression.isra.15+0x1b0>
   10c80:	4642      	mov	r2, r8
   10c82:	4631      	mov	r1, r6
   10c84:	4620      	mov	r0, r4
   10c86:	f7ff fe63 	bl	10950 <d_print_expr_op>
   10c8a:	462a      	mov	r2, r5
   10c8c:	e744      	b.n	10b18 <d_maybe_print_fold_expression.isra.15+0x84>
   10c8e:	2500      	movs	r5, #0
   10c90:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10c94:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10c98:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   10c9c:	4620      	mov	r0, r4
   10c9e:	4798      	blx	r3
   10ca0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10ca4:	3301      	adds	r3, #1
   10ca6:	4629      	mov	r1, r5
   10ca8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10cac:	2201      	movs	r2, #1
   10cae:	e73d      	b.n	10b2c <d_maybe_print_fold_expression.isra.15+0x98>
   10cb0:	f04f 0a00 	mov.w	sl, #0
   10cb4:	4619      	mov	r1, r3
   10cb6:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   10cba:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   10cbe:	f880 a0ff 	strb.w	sl, [r0, #255]	; 0xff
   10cc2:	4798      	blx	r3
   10cc4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10cc8:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
   10ccc:	1c5a      	adds	r2, r3, #1
   10cce:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   10cd2:	4653      	mov	r3, sl
   10cd4:	e79a      	b.n	10c0c <d_maybe_print_fold_expression.isra.15+0x178>
   10cd6:	2500      	movs	r5, #0
   10cd8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   10cdc:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   10ce0:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   10ce4:	4798      	blx	r3
   10ce6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10cea:	3301      	adds	r3, #1
   10cec:	4629      	mov	r1, r5
   10cee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10cf2:	2201      	movs	r2, #1
   10cf4:	e72b      	b.n	10b4e <d_maybe_print_fold_expression.isra.15+0xba>
   10cf6:	bf00      	nop
   10cf8:	00022f3c 	.word	0x00022f3c
   10cfc:	00022f34 	.word	0x00022f34
   10d00:	00022e50 	.word	0x00022e50

00010d04 <d_demangle_callback.constprop.17>:
   10d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d08:	b0e7      	sub	sp, #412	; 0x19c
   10d0a:	f890 9000 	ldrb.w	r9, [r0]
   10d0e:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   10d12:	af00      	add	r7, sp, #0
   10d14:	4605      	mov	r5, r0
   10d16:	4688      	mov	r8, r1
   10d18:	4616      	mov	r6, r2
   10d1a:	f000 80f1 	beq.w	10f00 <d_demangle_callback.constprop.17+0x1fc>
   10d1e:	2208      	movs	r2, #8
   10d20:	49bd      	ldr	r1, [pc, #756]	; (11018 <d_demangle_callback.constprop.17+0x314>)
   10d22:	4628      	mov	r0, r5
   10d24:	f004 fc7a 	bl	1561c <strncmp>
   10d28:	b948      	cbnz	r0, 10d3e <d_demangle_callback.constprop.17+0x3a>
   10d2a:	7a2b      	ldrb	r3, [r5, #8]
   10d2c:	2b2e      	cmp	r3, #46	; 0x2e
   10d2e:	f000 80d6 	beq.w	10ede <d_demangle_callback.constprop.17+0x1da>
   10d32:	2b5f      	cmp	r3, #95	; 0x5f
   10d34:	f000 80d3 	beq.w	10ede <d_demangle_callback.constprop.17+0x1da>
   10d38:	2b24      	cmp	r3, #36	; 0x24
   10d3a:	f000 80d0 	beq.w	10ede <d_demangle_callback.constprop.17+0x1da>
   10d3e:	f04f 0a00 	mov.w	sl, #0
   10d42:	4628      	mov	r0, r5
   10d44:	f004 fbfc 	bl	15540 <strlen>
   10d48:	ea4f 0b40 	mov.w	fp, r0, lsl #1
   10d4c:	0083      	lsls	r3, r0, #2
   10d4e:	eb03 020b 	add.w	r2, r3, fp
   10d52:	0092      	lsls	r2, r2, #2
   10d54:	3208      	adds	r2, #8
   10d56:	330a      	adds	r3, #10
   10d58:	ebad 0d02 	sub.w	sp, sp, r2
   10d5c:	f023 0307 	bic.w	r3, r3, #7
   10d60:	2400      	movs	r4, #0
   10d62:	466a      	mov	r2, sp
   10d64:	1829      	adds	r1, r5, r0
   10d66:	ebad 0d03 	sub.w	sp, sp, r3
   10d6a:	f1ba 0f01 	cmp.w	sl, #1
   10d6e:	f04f 0311 	mov.w	r3, #17
   10d72:	627a      	str	r2, [r7, #36]	; 0x24
   10d74:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
   10d78:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
   10d7c:	617d      	str	r5, [r7, #20]
   10d7e:	623d      	str	r5, [r7, #32]
   10d80:	63b8      	str	r0, [r7, #56]	; 0x38
   10d82:	61b9      	str	r1, [r7, #24]
   10d84:	61fb      	str	r3, [r7, #28]
   10d86:	62bc      	str	r4, [r7, #40]	; 0x28
   10d88:	637c      	str	r4, [r7, #52]	; 0x34
   10d8a:	63fc      	str	r4, [r7, #60]	; 0x3c
   10d8c:	643c      	str	r4, [r7, #64]	; 0x40
   10d8e:	647c      	str	r4, [r7, #68]	; 0x44
   10d90:	64bc      	str	r4, [r7, #72]	; 0x48
   10d92:	64fc      	str	r4, [r7, #76]	; 0x4c
   10d94:	f000 80bb 	beq.w	10f0e <d_demangle_callback.constprop.17+0x20a>
   10d98:	f0c0 80cf 	bcc.w	10f3a <d_demangle_callback.constprop.17+0x236>
   10d9c:	7aeb      	ldrb	r3, [r5, #11]
   10d9e:	f1ba 0f02 	cmp.w	sl, #2
   10da2:	bf18      	it	ne
   10da4:	f04f 0944 	movne.w	r9, #68	; 0x44
   10da8:	f105 0a0b 	add.w	sl, r5, #11
   10dac:	bf08      	it	eq
   10dae:	f04f 0943 	moveq.w	r9, #67	; 0x43
   10db2:	2b5f      	cmp	r3, #95	; 0x5f
   10db4:	f8c7 a020 	str.w	sl, [r7, #32]
   10db8:	f000 80b2 	beq.w	10f20 <d_demangle_callback.constprop.17+0x21c>
   10dbc:	4650      	mov	r0, sl
   10dbe:	607a      	str	r2, [r7, #4]
   10dc0:	f004 fbbe 	bl	15540 <strlen>
   10dc4:	f1bb 0f00 	cmp.w	fp, #0
   10dc8:	687a      	ldr	r2, [r7, #4]
   10dca:	f340 80bf 	ble.w	10f4c <d_demangle_callback.constprop.17+0x248>
   10dce:	2301      	movs	r3, #1
   10dd0:	62bb      	str	r3, [r7, #40]	; 0x28
   10dd2:	2800      	cmp	r0, #0
   10dd4:	f000 80ba 	beq.w	10f4c <d_demangle_callback.constprop.17+0x248>
   10dd8:	2300      	movs	r3, #0
   10dda:	f8c2 a004 	str.w	sl, [r2, #4]
   10dde:	6090      	str	r0, [r2, #8]
   10de0:	7013      	strb	r3, [r2, #0]
   10de2:	4649      	mov	r1, r9
   10de4:	2300      	movs	r3, #0
   10de6:	f107 0014 	add.w	r0, r7, #20
   10dea:	f7f9 fe33 	bl	aa54 <d_make_comp>
   10dee:	6a3c      	ldr	r4, [r7, #32]
   10df0:	4605      	mov	r5, r0
   10df2:	4620      	mov	r0, r4
   10df4:	f004 fba4 	bl	15540 <strlen>
   10df8:	1823      	adds	r3, r4, r0
   10dfa:	623b      	str	r3, [r7, #32]
   10dfc:	f814 9000 	ldrb.w	r9, [r4, r0]
   10e00:	f1b9 0f00 	cmp.w	r9, #0
   10e04:	f040 8086 	bne.w	10f14 <d_demangle_callback.constprop.17+0x210>
   10e08:	2d00      	cmp	r5, #0
   10e0a:	f000 8083 	beq.w	10f14 <d_demangle_callback.constprop.17+0x210>
   10e0e:	f107 0450 	add.w	r4, r7, #80	; 0x50
   10e12:	462a      	mov	r2, r5
   10e14:	f507 71c2 	add.w	r1, r7, #388	; 0x184
   10e18:	f507 70c8 	add.w	r0, r7, #400	; 0x190
   10e1c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   10e20:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
   10e24:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
   10e28:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   10e2c:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
   10e30:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   10e34:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
   10e38:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
   10e3c:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
   10e40:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
   10e44:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   10e48:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   10e4c:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
   10e50:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
   10e54:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
   10e58:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
   10e5c:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   10e60:	f7f9 fec4 	bl	abec <d_count_templates_scopes>
   10e64:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
   10e68:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   10e6c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   10e70:	613b      	str	r3, [r7, #16]
   10e72:	00d0      	lsls	r0, r2, #3
   10e74:	fb01 f102 	mul.w	r1, r1, r2
   10e78:	3008      	adds	r0, #8
   10e7a:	46e8      	mov	r8, sp
   10e7c:	00ca      	lsls	r2, r1, #3
   10e7e:	ebad 0d00 	sub.w	sp, sp, r0
   10e82:	4668      	mov	r0, sp
   10e84:	3208      	adds	r2, #8
   10e86:	ebad 0d02 	sub.w	sp, sp, r2
   10e8a:	f107 060c 	add.w	r6, r7, #12
   10e8e:	462a      	mov	r2, r5
   10e90:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
   10e94:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
   10e98:	4620      	mov	r0, r4
   10e9a:	2111      	movs	r1, #17
   10e9c:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
   10ea0:	60fd      	str	r5, [r7, #12]
   10ea2:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
   10ea6:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
   10eaa:	f7fc f9c5 	bl	d238 <d_print_comp_inner>
   10eae:	693b      	ldr	r3, [r7, #16]
   10eb0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   10eb4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   10eb8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   10ebc:	f804 9001 	strb.w	r9, [r4, r1]
   10ec0:	4620      	mov	r0, r4
   10ec2:	46c5      	mov	sp, r8
   10ec4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10ec8:	4798      	blx	r3
   10eca:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   10ece:	fab0 f080 	clz	r0, r0
   10ed2:	0940      	lsrs	r0, r0, #5
   10ed4:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   10ed8:	46bd      	mov	sp, r7
   10eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ede:	7a6b      	ldrb	r3, [r5, #9]
   10ee0:	2b44      	cmp	r3, #68	; 0x44
   10ee2:	d002      	beq.n	10eea <d_demangle_callback.constprop.17+0x1e6>
   10ee4:	2b49      	cmp	r3, #73	; 0x49
   10ee6:	f47f af2a 	bne.w	10d3e <d_demangle_callback.constprop.17+0x3a>
   10eea:	7aaa      	ldrb	r2, [r5, #10]
   10eec:	2a5f      	cmp	r2, #95	; 0x5f
   10eee:	f47f af26 	bne.w	10d3e <d_demangle_callback.constprop.17+0x3a>
   10ef2:	2b49      	cmp	r3, #73	; 0x49
   10ef4:	bf14      	ite	ne
   10ef6:	f04f 0a03 	movne.w	sl, #3
   10efa:	f04f 0a02 	moveq.w	sl, #2
   10efe:	e720      	b.n	10d42 <d_demangle_callback.constprop.17+0x3e>
   10f00:	7843      	ldrb	r3, [r0, #1]
   10f02:	2b5a      	cmp	r3, #90	; 0x5a
   10f04:	f47f af0b 	bne.w	10d1e <d_demangle_callback.constprop.17+0x1a>
   10f08:	f04f 0a01 	mov.w	sl, #1
   10f0c:	e719      	b.n	10d42 <d_demangle_callback.constprop.17+0x3e>
   10f0e:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   10f12:	d01d      	beq.n	10f50 <d_demangle_callback.constprop.17+0x24c>
   10f14:	2000      	movs	r0, #0
   10f16:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   10f1a:	46bd      	mov	sp, r7
   10f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f20:	7b2b      	ldrb	r3, [r5, #12]
   10f22:	2b5a      	cmp	r3, #90	; 0x5a
   10f24:	f47f af4a 	bne.w	10dbc <d_demangle_callback.constprop.17+0xb8>
   10f28:	350d      	adds	r5, #13
   10f2a:	4621      	mov	r1, r4
   10f2c:	f107 0014 	add.w	r0, r7, #20
   10f30:	623d      	str	r5, [r7, #32]
   10f32:	f7fb fe35 	bl	cba0 <d_encoding>
   10f36:	4602      	mov	r2, r0
   10f38:	e753      	b.n	10de2 <d_demangle_callback.constprop.17+0xde>
   10f3a:	f107 0014 	add.w	r0, r7, #20
   10f3e:	f7fb f817 	bl	bf70 <d_type>
   10f42:	6a3b      	ldr	r3, [r7, #32]
   10f44:	4605      	mov	r5, r0
   10f46:	f893 9000 	ldrb.w	r9, [r3]
   10f4a:	e759      	b.n	10e00 <d_demangle_callback.constprop.17+0xfc>
   10f4c:	2200      	movs	r2, #0
   10f4e:	e748      	b.n	10de2 <d_demangle_callback.constprop.17+0xde>
   10f50:	786b      	ldrb	r3, [r5, #1]
   10f52:	2b5a      	cmp	r3, #90	; 0x5a
   10f54:	d1de      	bne.n	10f14 <d_demangle_callback.constprop.17+0x210>
   10f56:	3502      	adds	r5, #2
   10f58:	4651      	mov	r1, sl
   10f5a:	f107 0014 	add.w	r0, r7, #20
   10f5e:	623d      	str	r5, [r7, #32]
   10f60:	f7fb fe1e 	bl	cba0 <d_encoding>
   10f64:	69fb      	ldr	r3, [r7, #28]
   10f66:	07db      	lsls	r3, r3, #31
   10f68:	4605      	mov	r5, r0
   10f6a:	d551      	bpl.n	11010 <d_demangle_callback.constprop.17+0x30c>
   10f6c:	6a38      	ldr	r0, [r7, #32]
   10f6e:	f890 9000 	ldrb.w	r9, [r0]
   10f72:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
   10f76:	f47f af43 	bne.w	10e00 <d_demangle_callback.constprop.17+0xfc>
   10f7a:	7843      	ldrb	r3, [r0, #1]
   10f7c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   10f80:	2a19      	cmp	r2, #25
   10f82:	d939      	bls.n	10ff8 <d_demangle_callback.constprop.17+0x2f4>
   10f84:	2b5f      	cmp	r3, #95	; 0x5f
   10f86:	d037      	beq.n	10ff8 <d_demangle_callback.constprop.17+0x2f4>
   10f88:	3b30      	subs	r3, #48	; 0x30
   10f8a:	2b09      	cmp	r3, #9
   10f8c:	d840      	bhi.n	11010 <d_demangle_callback.constprop.17+0x30c>
   10f8e:	7803      	ldrb	r3, [r0, #0]
   10f90:	4602      	mov	r2, r0
   10f92:	2b2e      	cmp	r3, #46	; 0x2e
   10f94:	d112      	bne.n	10fbc <d_demangle_callback.constprop.17+0x2b8>
   10f96:	7853      	ldrb	r3, [r2, #1]
   10f98:	3b30      	subs	r3, #48	; 0x30
   10f9a:	2b09      	cmp	r3, #9
   10f9c:	d80e      	bhi.n	10fbc <d_demangle_callback.constprop.17+0x2b8>
   10f9e:	7893      	ldrb	r3, [r2, #2]
   10fa0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   10fa4:	2909      	cmp	r1, #9
   10fa6:	f102 0202 	add.w	r2, r2, #2
   10faa:	d8f2      	bhi.n	10f92 <d_demangle_callback.constprop.17+0x28e>
   10fac:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   10fb0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   10fb4:	2909      	cmp	r1, #9
   10fb6:	d9f9      	bls.n	10fac <d_demangle_callback.constprop.17+0x2a8>
   10fb8:	2b2e      	cmp	r3, #46	; 0x2e
   10fba:	d0ec      	beq.n	10f96 <d_demangle_callback.constprop.17+0x292>
   10fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   10fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10fc0:	623a      	str	r2, [r7, #32]
   10fc2:	4299      	cmp	r1, r3
   10fc4:	da16      	bge.n	10ff4 <d_demangle_callback.constprop.17+0x2f0>
   10fc6:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
   10fca:	1c4b      	adds	r3, r1, #1
   10fcc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   10fd0:	62bb      	str	r3, [r7, #40]	; 0x28
   10fd2:	eb1e 0381 	adds.w	r3, lr, r1, lsl #2
   10fd6:	d00d      	beq.n	10ff4 <d_demangle_callback.constprop.17+0x2f0>
   10fd8:	1a12      	subs	r2, r2, r0
   10fda:	d00b      	beq.n	10ff4 <d_demangle_callback.constprop.17+0x2f0>
   10fdc:	f80e 4021 	strb.w	r4, [lr, r1, lsl #2]
   10fe0:	6058      	str	r0, [r3, #4]
   10fe2:	609a      	str	r2, [r3, #8]
   10fe4:	462a      	mov	r2, r5
   10fe6:	214d      	movs	r1, #77	; 0x4d
   10fe8:	f107 0014 	add.w	r0, r7, #20
   10fec:	f7f9 fd32 	bl	aa54 <d_make_comp>
   10ff0:	4605      	mov	r5, r0
   10ff2:	e7bb      	b.n	10f6c <d_demangle_callback.constprop.17+0x268>
   10ff4:	2300      	movs	r3, #0
   10ff6:	e7f5      	b.n	10fe4 <d_demangle_callback.constprop.17+0x2e0>
   10ff8:	1c81      	adds	r1, r0, #2
   10ffa:	460a      	mov	r2, r1
   10ffc:	f811 3b01 	ldrb.w	r3, [r1], #1
   11000:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
   11004:	f1be 0f19 	cmp.w	lr, #25
   11008:	d9f7      	bls.n	10ffa <d_demangle_callback.constprop.17+0x2f6>
   1100a:	2b5f      	cmp	r3, #95	; 0x5f
   1100c:	d0f5      	beq.n	10ffa <d_demangle_callback.constprop.17+0x2f6>
   1100e:	e7c0      	b.n	10f92 <d_demangle_callback.constprop.17+0x28e>
   11010:	6a3b      	ldr	r3, [r7, #32]
   11012:	f893 9000 	ldrb.w	r9, [r3]
   11016:	e6f3      	b.n	10e00 <d_demangle_callback.constprop.17+0xfc>
   11018:	00022bec 	.word	0x00022bec

0001101c <__cxa_demangle>:
   1101c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11020:	b084      	sub	sp, #16
   11022:	b378      	cbz	r0, 11084 <__cxa_demangle+0x68>
   11024:	b101      	cbz	r1, 11028 <__cxa_demangle+0xc>
   11026:	b36a      	cbz	r2, 11084 <__cxa_demangle+0x68>
   11028:	2400      	movs	r4, #0
   1102a:	4616      	mov	r6, r2
   1102c:	460d      	mov	r5, r1
   1102e:	466a      	mov	r2, sp
   11030:	4927      	ldr	r1, [pc, #156]	; (110d0 <__cxa_demangle+0xb4>)
   11032:	9400      	str	r4, [sp, #0]
   11034:	461f      	mov	r7, r3
   11036:	9401      	str	r4, [sp, #4]
   11038:	9402      	str	r4, [sp, #8]
   1103a:	9403      	str	r4, [sp, #12]
   1103c:	f7ff fe62 	bl	10d04 <d_demangle_callback.constprop.17>
   11040:	2800      	cmp	r0, #0
   11042:	d03f      	beq.n	110c4 <__cxa_demangle+0xa8>
   11044:	9b03      	ldr	r3, [sp, #12]
   11046:	b1d3      	cbz	r3, 1107e <__cxa_demangle+0x62>
   11048:	f04f 0801 	mov.w	r8, #1
   1104c:	9c00      	ldr	r4, [sp, #0]
   1104e:	b35c      	cbz	r4, 110a8 <__cxa_demangle+0x8c>
   11050:	b33d      	cbz	r5, 110a2 <__cxa_demangle+0x86>
   11052:	4620      	mov	r0, r4
   11054:	f004 fa74 	bl	15540 <strlen>
   11058:	6833      	ldr	r3, [r6, #0]
   1105a:	4298      	cmp	r0, r3
   1105c:	d21b      	bcs.n	11096 <__cxa_demangle+0x7a>
   1105e:	1c42      	adds	r2, r0, #1
   11060:	4621      	mov	r1, r4
   11062:	4628      	mov	r0, r5
   11064:	f003 faec 	bl	14640 <memcpy>
   11068:	4620      	mov	r0, r4
   1106a:	f002 ff95 	bl	13f98 <free>
   1106e:	462c      	mov	r4, r5
   11070:	b10f      	cbz	r7, 11076 <__cxa_demangle+0x5a>
   11072:	2300      	movs	r3, #0
   11074:	603b      	str	r3, [r7, #0]
   11076:	4620      	mov	r0, r4
   11078:	b004      	add	sp, #16
   1107a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1107e:	f8dd 8008 	ldr.w	r8, [sp, #8]
   11082:	e7e3      	b.n	1104c <__cxa_demangle+0x30>
   11084:	b113      	cbz	r3, 1108c <__cxa_demangle+0x70>
   11086:	f06f 0202 	mvn.w	r2, #2
   1108a:	601a      	str	r2, [r3, #0]
   1108c:	2400      	movs	r4, #0
   1108e:	4620      	mov	r0, r4
   11090:	b004      	add	sp, #16
   11092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11096:	4628      	mov	r0, r5
   11098:	f002 ff7e 	bl	13f98 <free>
   1109c:	f8c6 8000 	str.w	r8, [r6]
   110a0:	e7e6      	b.n	11070 <__cxa_demangle+0x54>
   110a2:	2e00      	cmp	r6, #0
   110a4:	d1fa      	bne.n	1109c <__cxa_demangle+0x80>
   110a6:	e7e3      	b.n	11070 <__cxa_demangle+0x54>
   110a8:	2f00      	cmp	r7, #0
   110aa:	d0ef      	beq.n	1108c <__cxa_demangle+0x70>
   110ac:	f1b8 0f01 	cmp.w	r8, #1
   110b0:	d004      	beq.n	110bc <__cxa_demangle+0xa0>
   110b2:	f06f 0301 	mvn.w	r3, #1
   110b6:	603b      	str	r3, [r7, #0]
   110b8:	2400      	movs	r4, #0
   110ba:	e7dc      	b.n	11076 <__cxa_demangle+0x5a>
   110bc:	f04f 33ff 	mov.w	r3, #4294967295
   110c0:	603b      	str	r3, [r7, #0]
   110c2:	e7d8      	b.n	11076 <__cxa_demangle+0x5a>
   110c4:	9800      	ldr	r0, [sp, #0]
   110c6:	f002 ff67 	bl	13f98 <free>
   110ca:	2f00      	cmp	r7, #0
   110cc:	d1f1      	bne.n	110b2 <__cxa_demangle+0x96>
   110ce:	e7dd      	b.n	1108c <__cxa_demangle+0x70>
   110d0:	0000b175 	.word	0x0000b175

000110d4 <__gcclibcxx_demangle_callback>:
   110d4:	b160      	cbz	r0, 110f0 <__gcclibcxx_demangle_callback+0x1c>
   110d6:	b508      	push	{r3, lr}
   110d8:	b139      	cbz	r1, 110ea <__gcclibcxx_demangle_callback+0x16>
   110da:	f7ff fe13 	bl	10d04 <d_demangle_callback.constprop.17>
   110de:	2800      	cmp	r0, #0
   110e0:	bf0c      	ite	eq
   110e2:	f06f 0001 	mvneq.w	r0, #1
   110e6:	2000      	movne	r0, #0
   110e8:	bd08      	pop	{r3, pc}
   110ea:	f06f 0002 	mvn.w	r0, #2
   110ee:	bd08      	pop	{r3, pc}
   110f0:	f06f 0002 	mvn.w	r0, #2
   110f4:	4770      	bx	lr
   110f6:	bf00      	nop

000110f8 <__cxa_current_exception_type>:
   110f8:	b508      	push	{r3, lr}
   110fa:	f7f8 fe2b 	bl	9d54 <__cxa_get_globals>
   110fe:	6800      	ldr	r0, [r0, #0]
   11100:	b130      	cbz	r0, 11110 <__cxa_current_exception_type+0x18>
   11102:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   11106:	2b01      	cmp	r3, #1
   11108:	bf04      	itt	eq
   1110a:	6800      	ldreq	r0, [r0, #0]
   1110c:	3878      	subeq	r0, #120	; 0x78
   1110e:	6800      	ldr	r0, [r0, #0]
   11110:	bd08      	pop	{r3, pc}
   11112:	bf00      	nop
   11114:	0000      	movs	r0, r0
	...

00011118 <floor>:
   11118:	f3c1 520a 	ubfx	r2, r1, #20, #11
   1111c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11120:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
   11124:	2e13      	cmp	r6, #19
   11126:	460b      	mov	r3, r1
   11128:	460d      	mov	r5, r1
   1112a:	4604      	mov	r4, r0
   1112c:	4688      	mov	r8, r1
   1112e:	4607      	mov	r7, r0
   11130:	dc1d      	bgt.n	1116e <floor+0x56>
   11132:	2e00      	cmp	r6, #0
   11134:	db40      	blt.n	111b8 <floor+0xa0>
   11136:	4a3c      	ldr	r2, [pc, #240]	; (11228 <floor+0x110>)
   11138:	fa42 f906 	asr.w	r9, r2, r6
   1113c:	ea01 0209 	and.w	r2, r1, r9
   11140:	4302      	orrs	r2, r0
   11142:	4686      	mov	lr, r0
   11144:	d018      	beq.n	11178 <floor+0x60>
   11146:	a336      	add	r3, pc, #216	; (adr r3, 11220 <floor+0x108>)
   11148:	e9d3 2300 	ldrd	r2, r3, [r3]
   1114c:	f000 fa96 	bl	1167c <__adddf3>
   11150:	2200      	movs	r2, #0
   11152:	2300      	movs	r3, #0
   11154:	f000 fed4 	bl	11f00 <__aeabi_dcmpgt>
   11158:	b120      	cbz	r0, 11164 <floor+0x4c>
   1115a:	2d00      	cmp	r5, #0
   1115c:	db42      	blt.n	111e4 <floor+0xcc>
   1115e:	ea28 0509 	bic.w	r5, r8, r9
   11162:	2700      	movs	r7, #0
   11164:	463c      	mov	r4, r7
   11166:	4629      	mov	r1, r5
   11168:	4620      	mov	r0, r4
   1116a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1116e:	2e33      	cmp	r6, #51	; 0x33
   11170:	dd06      	ble.n	11180 <floor+0x68>
   11172:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   11176:	d02f      	beq.n	111d8 <floor+0xc0>
   11178:	4619      	mov	r1, r3
   1117a:	4620      	mov	r0, r4
   1117c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11180:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   11184:	f04f 39ff 	mov.w	r9, #4294967295
   11188:	fa29 f902 	lsr.w	r9, r9, r2
   1118c:	ea10 0f09 	tst.w	r0, r9
   11190:	d0f2      	beq.n	11178 <floor+0x60>
   11192:	a323      	add	r3, pc, #140	; (adr r3, 11220 <floor+0x108>)
   11194:	e9d3 2300 	ldrd	r2, r3, [r3]
   11198:	f000 fa70 	bl	1167c <__adddf3>
   1119c:	2200      	movs	r2, #0
   1119e:	2300      	movs	r3, #0
   111a0:	f000 feae 	bl	11f00 <__aeabi_dcmpgt>
   111a4:	2800      	cmp	r0, #0
   111a6:	d0dd      	beq.n	11164 <floor+0x4c>
   111a8:	2d00      	cmp	r5, #0
   111aa:	db21      	blt.n	111f0 <floor+0xd8>
   111ac:	4645      	mov	r5, r8
   111ae:	ea27 0709 	bic.w	r7, r7, r9
   111b2:	463c      	mov	r4, r7
   111b4:	4629      	mov	r1, r5
   111b6:	e7d7      	b.n	11168 <floor+0x50>
   111b8:	a319      	add	r3, pc, #100	; (adr r3, 11220 <floor+0x108>)
   111ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   111be:	f000 fa5d 	bl	1167c <__adddf3>
   111c2:	2200      	movs	r2, #0
   111c4:	2300      	movs	r3, #0
   111c6:	f000 fe9b 	bl	11f00 <__aeabi_dcmpgt>
   111ca:	2800      	cmp	r0, #0
   111cc:	d0ca      	beq.n	11164 <floor+0x4c>
   111ce:	2d00      	cmp	r5, #0
   111d0:	db19      	blt.n	11206 <floor+0xee>
   111d2:	2700      	movs	r7, #0
   111d4:	463d      	mov	r5, r7
   111d6:	e7c5      	b.n	11164 <floor+0x4c>
   111d8:	4602      	mov	r2, r0
   111da:	460b      	mov	r3, r1
   111dc:	f000 fa4e 	bl	1167c <__adddf3>
   111e0:	4604      	mov	r4, r0
   111e2:	e7ca      	b.n	1117a <floor+0x62>
   111e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   111e8:	fa43 f606 	asr.w	r6, r3, r6
   111ec:	44b0      	add	r8, r6
   111ee:	e7b6      	b.n	1115e <floor+0x46>
   111f0:	2e14      	cmp	r6, #20
   111f2:	d010      	beq.n	11216 <floor+0xfe>
   111f4:	2301      	movs	r3, #1
   111f6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
   111fa:	fa03 f606 	lsl.w	r6, r3, r6
   111fe:	1937      	adds	r7, r6, r4
   11200:	bf28      	it	cs
   11202:	4498      	addcs	r8, r3
   11204:	e7d2      	b.n	111ac <floor+0x94>
   11206:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   1120a:	4b08      	ldr	r3, [pc, #32]	; (1122c <floor+0x114>)
   1120c:	4322      	orrs	r2, r4
   1120e:	bf18      	it	ne
   11210:	461d      	movne	r5, r3
   11212:	2700      	movs	r7, #0
   11214:	e7a6      	b.n	11164 <floor+0x4c>
   11216:	f105 0801 	add.w	r8, r5, #1
   1121a:	e7c7      	b.n	111ac <floor+0x94>
   1121c:	f3af 8000 	nop.w
   11220:	8800759c 	.word	0x8800759c
   11224:	7e37e43c 	.word	0x7e37e43c
   11228:	000fffff 	.word	0x000fffff
   1122c:	bff00000 	.word	0xbff00000

00011230 <frexp>:
   11230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11232:	f8df e05c 	ldr.w	lr, [pc, #92]	; 11290 <frexp+0x60>
   11236:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1123a:	2700      	movs	r7, #0
   1123c:	4573      	cmp	r3, lr
   1123e:	4604      	mov	r4, r0
   11240:	460d      	mov	r5, r1
   11242:	4616      	mov	r6, r2
   11244:	6017      	str	r7, [r2, #0]
   11246:	dc1d      	bgt.n	11284 <frexp+0x54>
   11248:	ea50 0e03 	orrs.w	lr, r0, r3
   1124c:	d01a      	beq.n	11284 <frexp+0x54>
   1124e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   11252:	460a      	mov	r2, r1
   11254:	da09      	bge.n	1126a <frexp+0x3a>
   11256:	2200      	movs	r2, #0
   11258:	4b0c      	ldr	r3, [pc, #48]	; (1128c <frexp+0x5c>)
   1125a:	f000 fbc1 	bl	119e0 <__aeabi_dmul>
   1125e:	f06f 0735 	mvn.w	r7, #53	; 0x35
   11262:	4604      	mov	r4, r0
   11264:	460a      	mov	r2, r1
   11266:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1126a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   1126e:	151b      	asrs	r3, r3, #20
   11270:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   11274:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   11278:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   1127c:	443b      	add	r3, r7
   1127e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   11282:	6033      	str	r3, [r6, #0]
   11284:	4620      	mov	r0, r4
   11286:	4629      	mov	r1, r5
   11288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1128a:	bf00      	nop
   1128c:	43500000 	.word	0x43500000
   11290:	7fefffff 	.word	0x7fefffff

00011294 <round>:
   11294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11296:	f3c1 560a 	ubfx	r6, r1, #20, #11
   1129a:	f2a6 35ff 	subw	r5, r6, #1023	; 0x3ff
   1129e:	2d13      	cmp	r5, #19
   112a0:	460a      	mov	r2, r1
   112a2:	460b      	mov	r3, r1
   112a4:	4604      	mov	r4, r0
   112a6:	dc11      	bgt.n	112cc <round+0x38>
   112a8:	2d00      	cmp	r5, #0
   112aa:	db2e      	blt.n	1130a <round+0x76>
   112ac:	468e      	mov	lr, r1
   112ae:	4920      	ldr	r1, [pc, #128]	; (11330 <round+0x9c>)
   112b0:	4129      	asrs	r1, r5
   112b2:	420a      	tst	r2, r1
   112b4:	d025      	beq.n	11302 <round+0x6e>
   112b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   112ba:	412b      	asrs	r3, r5
   112bc:	4473      	add	r3, lr
   112be:	ea23 0301 	bic.w	r3, r3, r1
   112c2:	2600      	movs	r6, #0
   112c4:	4619      	mov	r1, r3
   112c6:	4634      	mov	r4, r6
   112c8:	4620      	mov	r0, r4
   112ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   112cc:	2d33      	cmp	r5, #51	; 0x33
   112ce:	dd05      	ble.n	112dc <round+0x48>
   112d0:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   112d4:	d01f      	beq.n	11316 <round+0x82>
   112d6:	4611      	mov	r1, r2
   112d8:	4620      	mov	r0, r4
   112da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   112dc:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   112e0:	f04f 31ff 	mov.w	r1, #4294967295
   112e4:	fa21 f606 	lsr.w	r6, r1, r6
   112e8:	4230      	tst	r0, r6
   112ea:	d0f4      	beq.n	112d6 <round+0x42>
   112ec:	2201      	movs	r2, #1
   112ee:	f1c5 0533 	rsb	r5, r5, #51	; 0x33
   112f2:	fa02 f505 	lsl.w	r5, r2, r5
   112f6:	182d      	adds	r5, r5, r0
   112f8:	bf28      	it	cs
   112fa:	189b      	addcs	r3, r3, r2
   112fc:	ea25 0606 	bic.w	r6, r5, r6
   11300:	e7e0      	b.n	112c4 <round+0x30>
   11302:	2800      	cmp	r0, #0
   11304:	d1d7      	bne.n	112b6 <round+0x22>
   11306:	4611      	mov	r1, r2
   11308:	e7e6      	b.n	112d8 <round+0x44>
   1130a:	3501      	adds	r5, #1
   1130c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   11310:	d007      	beq.n	11322 <round+0x8e>
   11312:	2600      	movs	r6, #0
   11314:	e7d6      	b.n	112c4 <round+0x30>
   11316:	4602      	mov	r2, r0
   11318:	460b      	mov	r3, r1
   1131a:	f000 f9af 	bl	1167c <__adddf3>
   1131e:	4604      	mov	r4, r0
   11320:	e7d2      	b.n	112c8 <round+0x34>
   11322:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
   11326:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1132a:	2600      	movs	r6, #0
   1132c:	e7ca      	b.n	112c4 <round+0x30>
   1132e:	bf00      	nop
   11330:	000fffff 	.word	0x000fffff

00011334 <roundf>:
   11334:	b508      	push	{r3, lr}
   11336:	f3c0 53c7 	ubfx	r3, r0, #23, #8
   1133a:	3b7f      	subs	r3, #127	; 0x7f
   1133c:	2b16      	cmp	r3, #22
   1133e:	4601      	mov	r1, r0
   11340:	dc0e      	bgt.n	11360 <roundf+0x2c>
   11342:	2b00      	cmp	r3, #0
   11344:	4602      	mov	r2, r0
   11346:	db12      	blt.n	1136e <roundf+0x3a>
   11348:	480c      	ldr	r0, [pc, #48]	; (1137c <roundf+0x48>)
   1134a:	4118      	asrs	r0, r3
   1134c:	4201      	tst	r1, r0
   1134e:	d005      	beq.n	1135c <roundf+0x28>
   11350:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   11354:	4119      	asrs	r1, r3
   11356:	4411      	add	r1, r2
   11358:	ea21 0100 	bic.w	r1, r1, r0
   1135c:	4608      	mov	r0, r1
   1135e:	bd08      	pop	{r3, pc}
   11360:	2b80      	cmp	r3, #128	; 0x80
   11362:	d1fb      	bne.n	1135c <roundf+0x28>
   11364:	f000 fe74 	bl	12050 <__addsf3>
   11368:	4601      	mov	r1, r0
   1136a:	4608      	mov	r0, r1
   1136c:	bd08      	pop	{r3, pc}
   1136e:	3301      	adds	r3, #1
   11370:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
   11374:	d1f2      	bne.n	1135c <roundf+0x28>
   11376:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
   1137a:	e7ef      	b.n	1135c <roundf+0x28>
   1137c:	007fffff 	.word	0x007fffff

00011380 <expf>:
   11380:	b5f0      	push	{r4, r5, r6, r7, lr}
   11382:	4e31      	ldr	r6, [pc, #196]	; (11448 <expf+0xc8>)
   11384:	b08b      	sub	sp, #44	; 0x2c
   11386:	4604      	mov	r4, r0
   11388:	f000 f86a 	bl	11460 <__ieee754_expf>
   1138c:	f996 3000 	ldrsb.w	r3, [r6]
   11390:	3301      	adds	r3, #1
   11392:	4605      	mov	r5, r0
   11394:	d034      	beq.n	11400 <expf+0x80>
   11396:	4620      	mov	r0, r4
   11398:	f000 f962 	bl	11660 <finitef>
   1139c:	2800      	cmp	r0, #0
   1139e:	d02f      	beq.n	11400 <expf+0x80>
   113a0:	492a      	ldr	r1, [pc, #168]	; (1144c <expf+0xcc>)
   113a2:	4620      	mov	r0, r4
   113a4:	f001 f918 	bl	125d8 <__aeabi_fcmpgt>
   113a8:	4607      	mov	r7, r0
   113aa:	2800      	cmp	r0, #0
   113ac:	d12b      	bne.n	11406 <expf+0x86>
   113ae:	4928      	ldr	r1, [pc, #160]	; (11450 <expf+0xd0>)
   113b0:	4620      	mov	r0, r4
   113b2:	f001 f8f3 	bl	1259c <__aeabi_fcmplt>
   113b6:	b318      	cbz	r0, 11400 <expf+0x80>
   113b8:	4b26      	ldr	r3, [pc, #152]	; (11454 <expf+0xd4>)
   113ba:	9708      	str	r7, [sp, #32]
   113bc:	4620      	mov	r0, r4
   113be:	2204      	movs	r2, #4
   113c0:	e88d 000c 	stmia.w	sp, {r2, r3}
   113c4:	f000 fab8 	bl	11938 <__aeabi_f2d>
   113c8:	f996 3000 	ldrsb.w	r3, [r6]
   113cc:	2400      	movs	r4, #0
   113ce:	2500      	movs	r5, #0
   113d0:	2b02      	cmp	r3, #2
   113d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   113d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   113da:	e9cd 4506 	strd	r4, r5, [sp, #24]
   113de:	d02e      	beq.n	1143e <expf+0xbe>
   113e0:	4668      	mov	r0, sp
   113e2:	f000 f93b 	bl	1165c <matherr>
   113e6:	2800      	cmp	r0, #0
   113e8:	d029      	beq.n	1143e <expf+0xbe>
   113ea:	9b08      	ldr	r3, [sp, #32]
   113ec:	b11b      	cbz	r3, 113f6 <expf+0x76>
   113ee:	f002 fa91 	bl	13914 <__errno>
   113f2:	9b08      	ldr	r3, [sp, #32]
   113f4:	6003      	str	r3, [r0, #0]
   113f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   113fa:	f000 fdd3 	bl	11fa4 <__aeabi_d2f>
   113fe:	4605      	mov	r5, r0
   11400:	4628      	mov	r0, r5
   11402:	b00b      	add	sp, #44	; 0x2c
   11404:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11406:	2303      	movs	r3, #3
   11408:	4a12      	ldr	r2, [pc, #72]	; (11454 <expf+0xd4>)
   1140a:	9300      	str	r3, [sp, #0]
   1140c:	4620      	mov	r0, r4
   1140e:	2300      	movs	r3, #0
   11410:	9308      	str	r3, [sp, #32]
   11412:	9201      	str	r2, [sp, #4]
   11414:	f000 fa90 	bl	11938 <__aeabi_f2d>
   11418:	f996 3000 	ldrsb.w	r3, [r6]
   1141c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   11420:	e9cd 0102 	strd	r0, r1, [sp, #8]
   11424:	b92b      	cbnz	r3, 11432 <expf+0xb2>
   11426:	4b0c      	ldr	r3, [pc, #48]	; (11458 <expf+0xd8>)
   11428:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1142c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11430:	e7d6      	b.n	113e0 <expf+0x60>
   11432:	490a      	ldr	r1, [pc, #40]	; (1145c <expf+0xdc>)
   11434:	2000      	movs	r0, #0
   11436:	2b02      	cmp	r3, #2
   11438:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1143c:	d1d0      	bne.n	113e0 <expf+0x60>
   1143e:	f002 fa69 	bl	13914 <__errno>
   11442:	2322      	movs	r3, #34	; 0x22
   11444:	6003      	str	r3, [r0, #0]
   11446:	e7d0      	b.n	113ea <expf+0x6a>
   11448:	20000014 	.word	0x20000014
   1144c:	42b17180 	.word	0x42b17180
   11450:	c2cff1b5 	.word	0xc2cff1b5
   11454:	00023414 	.word	0x00023414
   11458:	47efffff 	.word	0x47efffff
   1145c:	7ff00000 	.word	0x7ff00000

00011460 <__ieee754_expf>:
   11460:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
   11464:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   11468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1146c:	4604      	mov	r4, r0
   1146e:	d86f      	bhi.n	11550 <__ieee754_expf+0xf0>
   11470:	ea4f 75d0 	mov.w	r5, r0, lsr #31
   11474:	d071      	beq.n	1155a <__ieee754_expf+0xfa>
   11476:	4969      	ldr	r1, [pc, #420]	; (1161c <__ieee754_expf+0x1bc>)
   11478:	4288      	cmp	r0, r1
   1147a:	f300 808c 	bgt.w	11596 <__ieee754_expf+0x136>
   1147e:	2800      	cmp	r0, #0
   11480:	f2c0 8082 	blt.w	11588 <__ieee754_expf+0x128>
   11484:	4b66      	ldr	r3, [pc, #408]	; (11620 <__ieee754_expf+0x1c0>)
   11486:	429a      	cmp	r2, r3
   11488:	d96a      	bls.n	11560 <__ieee754_expf+0x100>
   1148a:	4b66      	ldr	r3, [pc, #408]	; (11624 <__ieee754_expf+0x1c4>)
   1148c:	429a      	cmp	r2, r3
   1148e:	f200 80a2 	bhi.w	115d6 <__ieee754_expf+0x176>
   11492:	4b65      	ldr	r3, [pc, #404]	; (11628 <__ieee754_expf+0x1c8>)
   11494:	4620      	mov	r0, r4
   11496:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   1149a:	f000 fdd7 	bl	1204c <__aeabi_fsub>
   1149e:	4b63      	ldr	r3, [pc, #396]	; (1162c <__ieee754_expf+0x1cc>)
   114a0:	4607      	mov	r7, r0
   114a2:	f1c5 0001 	rsb	r0, r5, #1
   114a6:	f853 8025 	ldr.w	r8, [r3, r5, lsl #2]
   114aa:	1b45      	subs	r5, r0, r5
   114ac:	4641      	mov	r1, r8
   114ae:	4638      	mov	r0, r7
   114b0:	f000 fdcc 	bl	1204c <__aeabi_fsub>
   114b4:	4604      	mov	r4, r0
   114b6:	4621      	mov	r1, r4
   114b8:	4620      	mov	r0, r4
   114ba:	f000 fed1 	bl	12260 <__aeabi_fmul>
   114be:	495c      	ldr	r1, [pc, #368]	; (11630 <__ieee754_expf+0x1d0>)
   114c0:	4606      	mov	r6, r0
   114c2:	f000 fecd 	bl	12260 <__aeabi_fmul>
   114c6:	495b      	ldr	r1, [pc, #364]	; (11634 <__ieee754_expf+0x1d4>)
   114c8:	f000 fdc0 	bl	1204c <__aeabi_fsub>
   114cc:	4631      	mov	r1, r6
   114ce:	f000 fec7 	bl	12260 <__aeabi_fmul>
   114d2:	4959      	ldr	r1, [pc, #356]	; (11638 <__ieee754_expf+0x1d8>)
   114d4:	f000 fdbc 	bl	12050 <__addsf3>
   114d8:	4631      	mov	r1, r6
   114da:	f000 fec1 	bl	12260 <__aeabi_fmul>
   114de:	4957      	ldr	r1, [pc, #348]	; (1163c <__ieee754_expf+0x1dc>)
   114e0:	f000 fdb4 	bl	1204c <__aeabi_fsub>
   114e4:	4631      	mov	r1, r6
   114e6:	f000 febb 	bl	12260 <__aeabi_fmul>
   114ea:	4955      	ldr	r1, [pc, #340]	; (11640 <__ieee754_expf+0x1e0>)
   114ec:	f000 fdb0 	bl	12050 <__addsf3>
   114f0:	4631      	mov	r1, r6
   114f2:	f000 feb5 	bl	12260 <__aeabi_fmul>
   114f6:	4601      	mov	r1, r0
   114f8:	4620      	mov	r0, r4
   114fa:	f000 fda7 	bl	1204c <__aeabi_fsub>
   114fe:	4606      	mov	r6, r0
   11500:	2d00      	cmp	r5, #0
   11502:	d04e      	beq.n	115a2 <__ieee754_expf+0x142>
   11504:	4620      	mov	r0, r4
   11506:	4631      	mov	r1, r6
   11508:	f000 feaa 	bl	12260 <__aeabi_fmul>
   1150c:	4631      	mov	r1, r6
   1150e:	4604      	mov	r4, r0
   11510:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   11514:	f000 fd9a 	bl	1204c <__aeabi_fsub>
   11518:	4601      	mov	r1, r0
   1151a:	4620      	mov	r0, r4
   1151c:	f000 ff54 	bl	123c8 <__aeabi_fdiv>
   11520:	4601      	mov	r1, r0
   11522:	4640      	mov	r0, r8
   11524:	f000 fd92 	bl	1204c <__aeabi_fsub>
   11528:	4639      	mov	r1, r7
   1152a:	f000 fd8f 	bl	1204c <__aeabi_fsub>
   1152e:	4601      	mov	r1, r0
   11530:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   11534:	f000 fd8a 	bl	1204c <__aeabi_fsub>
   11538:	f115 0f7d 	cmn.w	r5, #125	; 0x7d
   1153c:	da6a      	bge.n	11614 <__ieee754_expf+0x1b4>
   1153e:	3564      	adds	r5, #100	; 0x64
   11540:	eb00 50c5 	add.w	r0, r0, r5, lsl #23
   11544:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
   11548:	f000 fe8a 	bl	12260 <__aeabi_fmul>
   1154c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11550:	4601      	mov	r1, r0
   11552:	f000 fd7d 	bl	12050 <__addsf3>
   11556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1155a:	b9cd      	cbnz	r5, 11590 <__ieee754_expf+0x130>
   1155c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11560:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
   11564:	d235      	bcs.n	115d2 <__ieee754_expf+0x172>
   11566:	4937      	ldr	r1, [pc, #220]	; (11644 <__ieee754_expf+0x1e4>)
   11568:	4620      	mov	r0, r4
   1156a:	f000 fd71 	bl	12050 <__addsf3>
   1156e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   11572:	f001 f831 	bl	125d8 <__aeabi_fcmpgt>
   11576:	2800      	cmp	r0, #0
   11578:	d04a      	beq.n	11610 <__ieee754_expf+0x1b0>
   1157a:	4620      	mov	r0, r4
   1157c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   11580:	f000 fd66 	bl	12050 <__addsf3>
   11584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11588:	4b2f      	ldr	r3, [pc, #188]	; (11648 <__ieee754_expf+0x1e8>)
   1158a:	429a      	cmp	r2, r3
   1158c:	f67f af7a 	bls.w	11484 <__ieee754_expf+0x24>
   11590:	2000      	movs	r0, #0
   11592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11596:	492b      	ldr	r1, [pc, #172]	; (11644 <__ieee754_expf+0x1e4>)
   11598:	4608      	mov	r0, r1
   1159a:	f000 fe61 	bl	12260 <__aeabi_fmul>
   1159e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   115a2:	4601      	mov	r1, r0
   115a4:	4620      	mov	r0, r4
   115a6:	f000 fe5b 	bl	12260 <__aeabi_fmul>
   115aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   115ae:	4605      	mov	r5, r0
   115b0:	4630      	mov	r0, r6
   115b2:	f000 fd4b 	bl	1204c <__aeabi_fsub>
   115b6:	4601      	mov	r1, r0
   115b8:	4628      	mov	r0, r5
   115ba:	f000 ff05 	bl	123c8 <__aeabi_fdiv>
   115be:	4621      	mov	r1, r4
   115c0:	f000 fd44 	bl	1204c <__aeabi_fsub>
   115c4:	4601      	mov	r1, r0
   115c6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   115ca:	f000 fd3f 	bl	1204c <__aeabi_fsub>
   115ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   115d2:	2500      	movs	r5, #0
   115d4:	e76f      	b.n	114b6 <__ieee754_expf+0x56>
   115d6:	491d      	ldr	r1, [pc, #116]	; (1164c <__ieee754_expf+0x1ec>)
   115d8:	4620      	mov	r0, r4
   115da:	f000 fe41 	bl	12260 <__aeabi_fmul>
   115de:	4b1c      	ldr	r3, [pc, #112]	; (11650 <__ieee754_expf+0x1f0>)
   115e0:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   115e4:	f000 fd34 	bl	12050 <__addsf3>
   115e8:	f001 f800 	bl	125ec <__aeabi_f2iz>
   115ec:	4605      	mov	r5, r0
   115ee:	f000 fde3 	bl	121b8 <__aeabi_i2f>
   115f2:	4918      	ldr	r1, [pc, #96]	; (11654 <__ieee754_expf+0x1f4>)
   115f4:	4606      	mov	r6, r0
   115f6:	f000 fe33 	bl	12260 <__aeabi_fmul>
   115fa:	4601      	mov	r1, r0
   115fc:	4620      	mov	r0, r4
   115fe:	f000 fd25 	bl	1204c <__aeabi_fsub>
   11602:	4915      	ldr	r1, [pc, #84]	; (11658 <__ieee754_expf+0x1f8>)
   11604:	4607      	mov	r7, r0
   11606:	4630      	mov	r0, r6
   11608:	f000 fe2a 	bl	12260 <__aeabi_fmul>
   1160c:	4680      	mov	r8, r0
   1160e:	e74d      	b.n	114ac <__ieee754_expf+0x4c>
   11610:	4605      	mov	r5, r0
   11612:	e750      	b.n	114b6 <__ieee754_expf+0x56>
   11614:	eb00 50c5 	add.w	r0, r0, r5, lsl #23
   11618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1161c:	42b17217 	.word	0x42b17217
   11620:	3eb17218 	.word	0x3eb17218
   11624:	3f851591 	.word	0x3f851591
   11628:	00023424 	.word	0x00023424
   1162c:	0002342c 	.word	0x0002342c
   11630:	3331bb4c 	.word	0x3331bb4c
   11634:	35ddea0e 	.word	0x35ddea0e
   11638:	388ab355 	.word	0x388ab355
   1163c:	3b360b61 	.word	0x3b360b61
   11640:	3e2aaaab 	.word	0x3e2aaaab
   11644:	7149f2ca 	.word	0x7149f2ca
   11648:	42cff1b5 	.word	0x42cff1b5
   1164c:	3fb8aa3b 	.word	0x3fb8aa3b
   11650:	0002341c 	.word	0x0002341c
   11654:	3f317180 	.word	0x3f317180
   11658:	3717f7d1 	.word	0x3717f7d1

0001165c <matherr>:
   1165c:	2000      	movs	r0, #0
   1165e:	4770      	bx	lr

00011660 <finitef>:
   11660:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   11664:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   11668:	bfac      	ite	ge
   1166a:	2000      	movge	r0, #0
   1166c:	2001      	movlt	r0, #1
   1166e:	4770      	bx	lr

00011670 <__aeabi_drsub>:
   11670:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   11674:	e002      	b.n	1167c <__adddf3>
   11676:	bf00      	nop

00011678 <__aeabi_dsub>:
   11678:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001167c <__adddf3>:
   1167c:	b530      	push	{r4, r5, lr}
   1167e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   11682:	ea4f 0543 	mov.w	r5, r3, lsl #1
   11686:	ea94 0f05 	teq	r4, r5
   1168a:	bf08      	it	eq
   1168c:	ea90 0f02 	teqeq	r0, r2
   11690:	bf1f      	itttt	ne
   11692:	ea54 0c00 	orrsne.w	ip, r4, r0
   11696:	ea55 0c02 	orrsne.w	ip, r5, r2
   1169a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1169e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   116a2:	f000 80e2 	beq.w	1186a <__adddf3+0x1ee>
   116a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   116aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   116ae:	bfb8      	it	lt
   116b0:	426d      	neglt	r5, r5
   116b2:	dd0c      	ble.n	116ce <__adddf3+0x52>
   116b4:	442c      	add	r4, r5
   116b6:	ea80 0202 	eor.w	r2, r0, r2
   116ba:	ea81 0303 	eor.w	r3, r1, r3
   116be:	ea82 0000 	eor.w	r0, r2, r0
   116c2:	ea83 0101 	eor.w	r1, r3, r1
   116c6:	ea80 0202 	eor.w	r2, r0, r2
   116ca:	ea81 0303 	eor.w	r3, r1, r3
   116ce:	2d36      	cmp	r5, #54	; 0x36
   116d0:	bf88      	it	hi
   116d2:	bd30      	pophi	{r4, r5, pc}
   116d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   116d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   116dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   116e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   116e4:	d002      	beq.n	116ec <__adddf3+0x70>
   116e6:	4240      	negs	r0, r0
   116e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   116ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   116f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   116f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   116f8:	d002      	beq.n	11700 <__adddf3+0x84>
   116fa:	4252      	negs	r2, r2
   116fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   11700:	ea94 0f05 	teq	r4, r5
   11704:	f000 80a7 	beq.w	11856 <__adddf3+0x1da>
   11708:	f1a4 0401 	sub.w	r4, r4, #1
   1170c:	f1d5 0e20 	rsbs	lr, r5, #32
   11710:	db0d      	blt.n	1172e <__adddf3+0xb2>
   11712:	fa02 fc0e 	lsl.w	ip, r2, lr
   11716:	fa22 f205 	lsr.w	r2, r2, r5
   1171a:	1880      	adds	r0, r0, r2
   1171c:	f141 0100 	adc.w	r1, r1, #0
   11720:	fa03 f20e 	lsl.w	r2, r3, lr
   11724:	1880      	adds	r0, r0, r2
   11726:	fa43 f305 	asr.w	r3, r3, r5
   1172a:	4159      	adcs	r1, r3
   1172c:	e00e      	b.n	1174c <__adddf3+0xd0>
   1172e:	f1a5 0520 	sub.w	r5, r5, #32
   11732:	f10e 0e20 	add.w	lr, lr, #32
   11736:	2a01      	cmp	r2, #1
   11738:	fa03 fc0e 	lsl.w	ip, r3, lr
   1173c:	bf28      	it	cs
   1173e:	f04c 0c02 	orrcs.w	ip, ip, #2
   11742:	fa43 f305 	asr.w	r3, r3, r5
   11746:	18c0      	adds	r0, r0, r3
   11748:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1174c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   11750:	d507      	bpl.n	11762 <__adddf3+0xe6>
   11752:	f04f 0e00 	mov.w	lr, #0
   11756:	f1dc 0c00 	rsbs	ip, ip, #0
   1175a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1175e:	eb6e 0101 	sbc.w	r1, lr, r1
   11762:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   11766:	d31b      	bcc.n	117a0 <__adddf3+0x124>
   11768:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1176c:	d30c      	bcc.n	11788 <__adddf3+0x10c>
   1176e:	0849      	lsrs	r1, r1, #1
   11770:	ea5f 0030 	movs.w	r0, r0, rrx
   11774:	ea4f 0c3c 	mov.w	ip, ip, rrx
   11778:	f104 0401 	add.w	r4, r4, #1
   1177c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   11780:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   11784:	f080 809a 	bcs.w	118bc <__adddf3+0x240>
   11788:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1178c:	bf08      	it	eq
   1178e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   11792:	f150 0000 	adcs.w	r0, r0, #0
   11796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1179a:	ea41 0105 	orr.w	r1, r1, r5
   1179e:	bd30      	pop	{r4, r5, pc}
   117a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   117a4:	4140      	adcs	r0, r0
   117a6:	eb41 0101 	adc.w	r1, r1, r1
   117aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   117ae:	f1a4 0401 	sub.w	r4, r4, #1
   117b2:	d1e9      	bne.n	11788 <__adddf3+0x10c>
   117b4:	f091 0f00 	teq	r1, #0
   117b8:	bf04      	itt	eq
   117ba:	4601      	moveq	r1, r0
   117bc:	2000      	moveq	r0, #0
   117be:	fab1 f381 	clz	r3, r1
   117c2:	bf08      	it	eq
   117c4:	3320      	addeq	r3, #32
   117c6:	f1a3 030b 	sub.w	r3, r3, #11
   117ca:	f1b3 0220 	subs.w	r2, r3, #32
   117ce:	da0c      	bge.n	117ea <__adddf3+0x16e>
   117d0:	320c      	adds	r2, #12
   117d2:	dd08      	ble.n	117e6 <__adddf3+0x16a>
   117d4:	f102 0c14 	add.w	ip, r2, #20
   117d8:	f1c2 020c 	rsb	r2, r2, #12
   117dc:	fa01 f00c 	lsl.w	r0, r1, ip
   117e0:	fa21 f102 	lsr.w	r1, r1, r2
   117e4:	e00c      	b.n	11800 <__adddf3+0x184>
   117e6:	f102 0214 	add.w	r2, r2, #20
   117ea:	bfd8      	it	le
   117ec:	f1c2 0c20 	rsble	ip, r2, #32
   117f0:	fa01 f102 	lsl.w	r1, r1, r2
   117f4:	fa20 fc0c 	lsr.w	ip, r0, ip
   117f8:	bfdc      	itt	le
   117fa:	ea41 010c 	orrle.w	r1, r1, ip
   117fe:	4090      	lslle	r0, r2
   11800:	1ae4      	subs	r4, r4, r3
   11802:	bfa2      	ittt	ge
   11804:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   11808:	4329      	orrge	r1, r5
   1180a:	bd30      	popge	{r4, r5, pc}
   1180c:	ea6f 0404 	mvn.w	r4, r4
   11810:	3c1f      	subs	r4, #31
   11812:	da1c      	bge.n	1184e <__adddf3+0x1d2>
   11814:	340c      	adds	r4, #12
   11816:	dc0e      	bgt.n	11836 <__adddf3+0x1ba>
   11818:	f104 0414 	add.w	r4, r4, #20
   1181c:	f1c4 0220 	rsb	r2, r4, #32
   11820:	fa20 f004 	lsr.w	r0, r0, r4
   11824:	fa01 f302 	lsl.w	r3, r1, r2
   11828:	ea40 0003 	orr.w	r0, r0, r3
   1182c:	fa21 f304 	lsr.w	r3, r1, r4
   11830:	ea45 0103 	orr.w	r1, r5, r3
   11834:	bd30      	pop	{r4, r5, pc}
   11836:	f1c4 040c 	rsb	r4, r4, #12
   1183a:	f1c4 0220 	rsb	r2, r4, #32
   1183e:	fa20 f002 	lsr.w	r0, r0, r2
   11842:	fa01 f304 	lsl.w	r3, r1, r4
   11846:	ea40 0003 	orr.w	r0, r0, r3
   1184a:	4629      	mov	r1, r5
   1184c:	bd30      	pop	{r4, r5, pc}
   1184e:	fa21 f004 	lsr.w	r0, r1, r4
   11852:	4629      	mov	r1, r5
   11854:	bd30      	pop	{r4, r5, pc}
   11856:	f094 0f00 	teq	r4, #0
   1185a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1185e:	bf06      	itte	eq
   11860:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   11864:	3401      	addeq	r4, #1
   11866:	3d01      	subne	r5, #1
   11868:	e74e      	b.n	11708 <__adddf3+0x8c>
   1186a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1186e:	bf18      	it	ne
   11870:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   11874:	d029      	beq.n	118ca <__adddf3+0x24e>
   11876:	ea94 0f05 	teq	r4, r5
   1187a:	bf08      	it	eq
   1187c:	ea90 0f02 	teqeq	r0, r2
   11880:	d005      	beq.n	1188e <__adddf3+0x212>
   11882:	ea54 0c00 	orrs.w	ip, r4, r0
   11886:	bf04      	itt	eq
   11888:	4619      	moveq	r1, r3
   1188a:	4610      	moveq	r0, r2
   1188c:	bd30      	pop	{r4, r5, pc}
   1188e:	ea91 0f03 	teq	r1, r3
   11892:	bf1e      	ittt	ne
   11894:	2100      	movne	r1, #0
   11896:	2000      	movne	r0, #0
   11898:	bd30      	popne	{r4, r5, pc}
   1189a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1189e:	d105      	bne.n	118ac <__adddf3+0x230>
   118a0:	0040      	lsls	r0, r0, #1
   118a2:	4149      	adcs	r1, r1
   118a4:	bf28      	it	cs
   118a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   118aa:	bd30      	pop	{r4, r5, pc}
   118ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   118b0:	bf3c      	itt	cc
   118b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   118b6:	bd30      	popcc	{r4, r5, pc}
   118b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   118bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   118c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   118c4:	f04f 0000 	mov.w	r0, #0
   118c8:	bd30      	pop	{r4, r5, pc}
   118ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   118ce:	bf1a      	itte	ne
   118d0:	4619      	movne	r1, r3
   118d2:	4610      	movne	r0, r2
   118d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   118d8:	bf1c      	itt	ne
   118da:	460b      	movne	r3, r1
   118dc:	4602      	movne	r2, r0
   118de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   118e2:	bf06      	itte	eq
   118e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   118e8:	ea91 0f03 	teqeq	r1, r3
   118ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   118f0:	bd30      	pop	{r4, r5, pc}
   118f2:	bf00      	nop

000118f4 <__aeabi_ui2d>:
   118f4:	f090 0f00 	teq	r0, #0
   118f8:	bf04      	itt	eq
   118fa:	2100      	moveq	r1, #0
   118fc:	4770      	bxeq	lr
   118fe:	b530      	push	{r4, r5, lr}
   11900:	f44f 6480 	mov.w	r4, #1024	; 0x400
   11904:	f104 0432 	add.w	r4, r4, #50	; 0x32
   11908:	f04f 0500 	mov.w	r5, #0
   1190c:	f04f 0100 	mov.w	r1, #0
   11910:	e750      	b.n	117b4 <__adddf3+0x138>
   11912:	bf00      	nop

00011914 <__aeabi_i2d>:
   11914:	f090 0f00 	teq	r0, #0
   11918:	bf04      	itt	eq
   1191a:	2100      	moveq	r1, #0
   1191c:	4770      	bxeq	lr
   1191e:	b530      	push	{r4, r5, lr}
   11920:	f44f 6480 	mov.w	r4, #1024	; 0x400
   11924:	f104 0432 	add.w	r4, r4, #50	; 0x32
   11928:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1192c:	bf48      	it	mi
   1192e:	4240      	negmi	r0, r0
   11930:	f04f 0100 	mov.w	r1, #0
   11934:	e73e      	b.n	117b4 <__adddf3+0x138>
   11936:	bf00      	nop

00011938 <__aeabi_f2d>:
   11938:	0042      	lsls	r2, r0, #1
   1193a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1193e:	ea4f 0131 	mov.w	r1, r1, rrx
   11942:	ea4f 7002 	mov.w	r0, r2, lsl #28
   11946:	bf1f      	itttt	ne
   11948:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1194c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   11950:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   11954:	4770      	bxne	lr
   11956:	f092 0f00 	teq	r2, #0
   1195a:	bf14      	ite	ne
   1195c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   11960:	4770      	bxeq	lr
   11962:	b530      	push	{r4, r5, lr}
   11964:	f44f 7460 	mov.w	r4, #896	; 0x380
   11968:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1196c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   11970:	e720      	b.n	117b4 <__adddf3+0x138>
   11972:	bf00      	nop

00011974 <__aeabi_ul2d>:
   11974:	ea50 0201 	orrs.w	r2, r0, r1
   11978:	bf08      	it	eq
   1197a:	4770      	bxeq	lr
   1197c:	b530      	push	{r4, r5, lr}
   1197e:	f04f 0500 	mov.w	r5, #0
   11982:	e00a      	b.n	1199a <__aeabi_l2d+0x16>

00011984 <__aeabi_l2d>:
   11984:	ea50 0201 	orrs.w	r2, r0, r1
   11988:	bf08      	it	eq
   1198a:	4770      	bxeq	lr
   1198c:	b530      	push	{r4, r5, lr}
   1198e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   11992:	d502      	bpl.n	1199a <__aeabi_l2d+0x16>
   11994:	4240      	negs	r0, r0
   11996:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1199a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1199e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   119a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   119a6:	f43f aedc 	beq.w	11762 <__adddf3+0xe6>
   119aa:	f04f 0203 	mov.w	r2, #3
   119ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   119b2:	bf18      	it	ne
   119b4:	3203      	addne	r2, #3
   119b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   119ba:	bf18      	it	ne
   119bc:	3203      	addne	r2, #3
   119be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   119c2:	f1c2 0320 	rsb	r3, r2, #32
   119c6:	fa00 fc03 	lsl.w	ip, r0, r3
   119ca:	fa20 f002 	lsr.w	r0, r0, r2
   119ce:	fa01 fe03 	lsl.w	lr, r1, r3
   119d2:	ea40 000e 	orr.w	r0, r0, lr
   119d6:	fa21 f102 	lsr.w	r1, r1, r2
   119da:	4414      	add	r4, r2
   119dc:	e6c1      	b.n	11762 <__adddf3+0xe6>
   119de:	bf00      	nop

000119e0 <__aeabi_dmul>:
   119e0:	b570      	push	{r4, r5, r6, lr}
   119e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   119e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   119ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   119ee:	bf1d      	ittte	ne
   119f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   119f4:	ea94 0f0c 	teqne	r4, ip
   119f8:	ea95 0f0c 	teqne	r5, ip
   119fc:	f000 f8de 	bleq	11bbc <__aeabi_dmul+0x1dc>
   11a00:	442c      	add	r4, r5
   11a02:	ea81 0603 	eor.w	r6, r1, r3
   11a06:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   11a0a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   11a0e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   11a12:	bf18      	it	ne
   11a14:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   11a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   11a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   11a20:	d038      	beq.n	11a94 <__aeabi_dmul+0xb4>
   11a22:	fba0 ce02 	umull	ip, lr, r0, r2
   11a26:	f04f 0500 	mov.w	r5, #0
   11a2a:	fbe1 e502 	umlal	lr, r5, r1, r2
   11a2e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   11a32:	fbe0 e503 	umlal	lr, r5, r0, r3
   11a36:	f04f 0600 	mov.w	r6, #0
   11a3a:	fbe1 5603 	umlal	r5, r6, r1, r3
   11a3e:	f09c 0f00 	teq	ip, #0
   11a42:	bf18      	it	ne
   11a44:	f04e 0e01 	orrne.w	lr, lr, #1
   11a48:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   11a4c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   11a50:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   11a54:	d204      	bcs.n	11a60 <__aeabi_dmul+0x80>
   11a56:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   11a5a:	416d      	adcs	r5, r5
   11a5c:	eb46 0606 	adc.w	r6, r6, r6
   11a60:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   11a64:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   11a68:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   11a6c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   11a70:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   11a74:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   11a78:	bf88      	it	hi
   11a7a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   11a7e:	d81e      	bhi.n	11abe <__aeabi_dmul+0xde>
   11a80:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   11a84:	bf08      	it	eq
   11a86:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   11a8a:	f150 0000 	adcs.w	r0, r0, #0
   11a8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   11a92:	bd70      	pop	{r4, r5, r6, pc}
   11a94:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   11a98:	ea46 0101 	orr.w	r1, r6, r1
   11a9c:	ea40 0002 	orr.w	r0, r0, r2
   11aa0:	ea81 0103 	eor.w	r1, r1, r3
   11aa4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   11aa8:	bfc2      	ittt	gt
   11aaa:	ebd4 050c 	rsbsgt	r5, r4, ip
   11aae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   11ab2:	bd70      	popgt	{r4, r5, r6, pc}
   11ab4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   11ab8:	f04f 0e00 	mov.w	lr, #0
   11abc:	3c01      	subs	r4, #1
   11abe:	f300 80ab 	bgt.w	11c18 <__aeabi_dmul+0x238>
   11ac2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   11ac6:	bfde      	ittt	le
   11ac8:	2000      	movle	r0, #0
   11aca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   11ace:	bd70      	pople	{r4, r5, r6, pc}
   11ad0:	f1c4 0400 	rsb	r4, r4, #0
   11ad4:	3c20      	subs	r4, #32
   11ad6:	da35      	bge.n	11b44 <__aeabi_dmul+0x164>
   11ad8:	340c      	adds	r4, #12
   11ada:	dc1b      	bgt.n	11b14 <__aeabi_dmul+0x134>
   11adc:	f104 0414 	add.w	r4, r4, #20
   11ae0:	f1c4 0520 	rsb	r5, r4, #32
   11ae4:	fa00 f305 	lsl.w	r3, r0, r5
   11ae8:	fa20 f004 	lsr.w	r0, r0, r4
   11aec:	fa01 f205 	lsl.w	r2, r1, r5
   11af0:	ea40 0002 	orr.w	r0, r0, r2
   11af4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   11af8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   11afc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   11b00:	fa21 f604 	lsr.w	r6, r1, r4
   11b04:	eb42 0106 	adc.w	r1, r2, r6
   11b08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   11b0c:	bf08      	it	eq
   11b0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   11b12:	bd70      	pop	{r4, r5, r6, pc}
   11b14:	f1c4 040c 	rsb	r4, r4, #12
   11b18:	f1c4 0520 	rsb	r5, r4, #32
   11b1c:	fa00 f304 	lsl.w	r3, r0, r4
   11b20:	fa20 f005 	lsr.w	r0, r0, r5
   11b24:	fa01 f204 	lsl.w	r2, r1, r4
   11b28:	ea40 0002 	orr.w	r0, r0, r2
   11b2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   11b30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   11b34:	f141 0100 	adc.w	r1, r1, #0
   11b38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   11b3c:	bf08      	it	eq
   11b3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   11b42:	bd70      	pop	{r4, r5, r6, pc}
   11b44:	f1c4 0520 	rsb	r5, r4, #32
   11b48:	fa00 f205 	lsl.w	r2, r0, r5
   11b4c:	ea4e 0e02 	orr.w	lr, lr, r2
   11b50:	fa20 f304 	lsr.w	r3, r0, r4
   11b54:	fa01 f205 	lsl.w	r2, r1, r5
   11b58:	ea43 0302 	orr.w	r3, r3, r2
   11b5c:	fa21 f004 	lsr.w	r0, r1, r4
   11b60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   11b64:	fa21 f204 	lsr.w	r2, r1, r4
   11b68:	ea20 0002 	bic.w	r0, r0, r2
   11b6c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   11b70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   11b74:	bf08      	it	eq
   11b76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   11b7a:	bd70      	pop	{r4, r5, r6, pc}
   11b7c:	f094 0f00 	teq	r4, #0
   11b80:	d10f      	bne.n	11ba2 <__aeabi_dmul+0x1c2>
   11b82:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   11b86:	0040      	lsls	r0, r0, #1
   11b88:	eb41 0101 	adc.w	r1, r1, r1
   11b8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   11b90:	bf08      	it	eq
   11b92:	3c01      	subeq	r4, #1
   11b94:	d0f7      	beq.n	11b86 <__aeabi_dmul+0x1a6>
   11b96:	ea41 0106 	orr.w	r1, r1, r6
   11b9a:	f095 0f00 	teq	r5, #0
   11b9e:	bf18      	it	ne
   11ba0:	4770      	bxne	lr
   11ba2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   11ba6:	0052      	lsls	r2, r2, #1
   11ba8:	eb43 0303 	adc.w	r3, r3, r3
   11bac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   11bb0:	bf08      	it	eq
   11bb2:	3d01      	subeq	r5, #1
   11bb4:	d0f7      	beq.n	11ba6 <__aeabi_dmul+0x1c6>
   11bb6:	ea43 0306 	orr.w	r3, r3, r6
   11bba:	4770      	bx	lr
   11bbc:	ea94 0f0c 	teq	r4, ip
   11bc0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   11bc4:	bf18      	it	ne
   11bc6:	ea95 0f0c 	teqne	r5, ip
   11bca:	d00c      	beq.n	11be6 <__aeabi_dmul+0x206>
   11bcc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   11bd0:	bf18      	it	ne
   11bd2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   11bd6:	d1d1      	bne.n	11b7c <__aeabi_dmul+0x19c>
   11bd8:	ea81 0103 	eor.w	r1, r1, r3
   11bdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   11be0:	f04f 0000 	mov.w	r0, #0
   11be4:	bd70      	pop	{r4, r5, r6, pc}
   11be6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   11bea:	bf06      	itte	eq
   11bec:	4610      	moveq	r0, r2
   11bee:	4619      	moveq	r1, r3
   11bf0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   11bf4:	d019      	beq.n	11c2a <__aeabi_dmul+0x24a>
   11bf6:	ea94 0f0c 	teq	r4, ip
   11bfa:	d102      	bne.n	11c02 <__aeabi_dmul+0x222>
   11bfc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   11c00:	d113      	bne.n	11c2a <__aeabi_dmul+0x24a>
   11c02:	ea95 0f0c 	teq	r5, ip
   11c06:	d105      	bne.n	11c14 <__aeabi_dmul+0x234>
   11c08:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   11c0c:	bf1c      	itt	ne
   11c0e:	4610      	movne	r0, r2
   11c10:	4619      	movne	r1, r3
   11c12:	d10a      	bne.n	11c2a <__aeabi_dmul+0x24a>
   11c14:	ea81 0103 	eor.w	r1, r1, r3
   11c18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   11c1c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   11c20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   11c24:	f04f 0000 	mov.w	r0, #0
   11c28:	bd70      	pop	{r4, r5, r6, pc}
   11c2a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   11c2e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   11c32:	bd70      	pop	{r4, r5, r6, pc}

00011c34 <__aeabi_ddiv>:
   11c34:	b570      	push	{r4, r5, r6, lr}
   11c36:	f04f 0cff 	mov.w	ip, #255	; 0xff
   11c3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   11c3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   11c42:	bf1d      	ittte	ne
   11c44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   11c48:	ea94 0f0c 	teqne	r4, ip
   11c4c:	ea95 0f0c 	teqne	r5, ip
   11c50:	f000 f8a7 	bleq	11da2 <__aeabi_ddiv+0x16e>
   11c54:	eba4 0405 	sub.w	r4, r4, r5
   11c58:	ea81 0e03 	eor.w	lr, r1, r3
   11c5c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   11c60:	ea4f 3101 	mov.w	r1, r1, lsl #12
   11c64:	f000 8088 	beq.w	11d78 <__aeabi_ddiv+0x144>
   11c68:	ea4f 3303 	mov.w	r3, r3, lsl #12
   11c6c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   11c70:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   11c74:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   11c78:	ea4f 2202 	mov.w	r2, r2, lsl #8
   11c7c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   11c80:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   11c84:	ea4f 2600 	mov.w	r6, r0, lsl #8
   11c88:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   11c8c:	429d      	cmp	r5, r3
   11c8e:	bf08      	it	eq
   11c90:	4296      	cmpeq	r6, r2
   11c92:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   11c96:	f504 7440 	add.w	r4, r4, #768	; 0x300
   11c9a:	d202      	bcs.n	11ca2 <__aeabi_ddiv+0x6e>
   11c9c:	085b      	lsrs	r3, r3, #1
   11c9e:	ea4f 0232 	mov.w	r2, r2, rrx
   11ca2:	1ab6      	subs	r6, r6, r2
   11ca4:	eb65 0503 	sbc.w	r5, r5, r3
   11ca8:	085b      	lsrs	r3, r3, #1
   11caa:	ea4f 0232 	mov.w	r2, r2, rrx
   11cae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   11cb2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   11cb6:	ebb6 0e02 	subs.w	lr, r6, r2
   11cba:	eb75 0e03 	sbcs.w	lr, r5, r3
   11cbe:	bf22      	ittt	cs
   11cc0:	1ab6      	subcs	r6, r6, r2
   11cc2:	4675      	movcs	r5, lr
   11cc4:	ea40 000c 	orrcs.w	r0, r0, ip
   11cc8:	085b      	lsrs	r3, r3, #1
   11cca:	ea4f 0232 	mov.w	r2, r2, rrx
   11cce:	ebb6 0e02 	subs.w	lr, r6, r2
   11cd2:	eb75 0e03 	sbcs.w	lr, r5, r3
   11cd6:	bf22      	ittt	cs
   11cd8:	1ab6      	subcs	r6, r6, r2
   11cda:	4675      	movcs	r5, lr
   11cdc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   11ce0:	085b      	lsrs	r3, r3, #1
   11ce2:	ea4f 0232 	mov.w	r2, r2, rrx
   11ce6:	ebb6 0e02 	subs.w	lr, r6, r2
   11cea:	eb75 0e03 	sbcs.w	lr, r5, r3
   11cee:	bf22      	ittt	cs
   11cf0:	1ab6      	subcs	r6, r6, r2
   11cf2:	4675      	movcs	r5, lr
   11cf4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   11cf8:	085b      	lsrs	r3, r3, #1
   11cfa:	ea4f 0232 	mov.w	r2, r2, rrx
   11cfe:	ebb6 0e02 	subs.w	lr, r6, r2
   11d02:	eb75 0e03 	sbcs.w	lr, r5, r3
   11d06:	bf22      	ittt	cs
   11d08:	1ab6      	subcs	r6, r6, r2
   11d0a:	4675      	movcs	r5, lr
   11d0c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   11d10:	ea55 0e06 	orrs.w	lr, r5, r6
   11d14:	d018      	beq.n	11d48 <__aeabi_ddiv+0x114>
   11d16:	ea4f 1505 	mov.w	r5, r5, lsl #4
   11d1a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   11d1e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   11d22:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   11d26:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   11d2a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   11d2e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   11d32:	d1c0      	bne.n	11cb6 <__aeabi_ddiv+0x82>
   11d34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   11d38:	d10b      	bne.n	11d52 <__aeabi_ddiv+0x11e>
   11d3a:	ea41 0100 	orr.w	r1, r1, r0
   11d3e:	f04f 0000 	mov.w	r0, #0
   11d42:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   11d46:	e7b6      	b.n	11cb6 <__aeabi_ddiv+0x82>
   11d48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   11d4c:	bf04      	itt	eq
   11d4e:	4301      	orreq	r1, r0
   11d50:	2000      	moveq	r0, #0
   11d52:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   11d56:	bf88      	it	hi
   11d58:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   11d5c:	f63f aeaf 	bhi.w	11abe <__aeabi_dmul+0xde>
   11d60:	ebb5 0c03 	subs.w	ip, r5, r3
   11d64:	bf04      	itt	eq
   11d66:	ebb6 0c02 	subseq.w	ip, r6, r2
   11d6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   11d6e:	f150 0000 	adcs.w	r0, r0, #0
   11d72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   11d76:	bd70      	pop	{r4, r5, r6, pc}
   11d78:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   11d7c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   11d80:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   11d84:	bfc2      	ittt	gt
   11d86:	ebd4 050c 	rsbsgt	r5, r4, ip
   11d8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   11d8e:	bd70      	popgt	{r4, r5, r6, pc}
   11d90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   11d94:	f04f 0e00 	mov.w	lr, #0
   11d98:	3c01      	subs	r4, #1
   11d9a:	e690      	b.n	11abe <__aeabi_dmul+0xde>
   11d9c:	ea45 0e06 	orr.w	lr, r5, r6
   11da0:	e68d      	b.n	11abe <__aeabi_dmul+0xde>
   11da2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   11da6:	ea94 0f0c 	teq	r4, ip
   11daa:	bf08      	it	eq
   11dac:	ea95 0f0c 	teqeq	r5, ip
   11db0:	f43f af3b 	beq.w	11c2a <__aeabi_dmul+0x24a>
   11db4:	ea94 0f0c 	teq	r4, ip
   11db8:	d10a      	bne.n	11dd0 <__aeabi_ddiv+0x19c>
   11dba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   11dbe:	f47f af34 	bne.w	11c2a <__aeabi_dmul+0x24a>
   11dc2:	ea95 0f0c 	teq	r5, ip
   11dc6:	f47f af25 	bne.w	11c14 <__aeabi_dmul+0x234>
   11dca:	4610      	mov	r0, r2
   11dcc:	4619      	mov	r1, r3
   11dce:	e72c      	b.n	11c2a <__aeabi_dmul+0x24a>
   11dd0:	ea95 0f0c 	teq	r5, ip
   11dd4:	d106      	bne.n	11de4 <__aeabi_ddiv+0x1b0>
   11dd6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   11dda:	f43f aefd 	beq.w	11bd8 <__aeabi_dmul+0x1f8>
   11dde:	4610      	mov	r0, r2
   11de0:	4619      	mov	r1, r3
   11de2:	e722      	b.n	11c2a <__aeabi_dmul+0x24a>
   11de4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   11de8:	bf18      	it	ne
   11dea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   11dee:	f47f aec5 	bne.w	11b7c <__aeabi_dmul+0x19c>
   11df2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   11df6:	f47f af0d 	bne.w	11c14 <__aeabi_dmul+0x234>
   11dfa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   11dfe:	f47f aeeb 	bne.w	11bd8 <__aeabi_dmul+0x1f8>
   11e02:	e712      	b.n	11c2a <__aeabi_dmul+0x24a>

00011e04 <__gedf2>:
   11e04:	f04f 3cff 	mov.w	ip, #4294967295
   11e08:	e006      	b.n	11e18 <__cmpdf2+0x4>
   11e0a:	bf00      	nop

00011e0c <__ledf2>:
   11e0c:	f04f 0c01 	mov.w	ip, #1
   11e10:	e002      	b.n	11e18 <__cmpdf2+0x4>
   11e12:	bf00      	nop

00011e14 <__cmpdf2>:
   11e14:	f04f 0c01 	mov.w	ip, #1
   11e18:	f84d cd04 	str.w	ip, [sp, #-4]!
   11e1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   11e20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   11e24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   11e28:	bf18      	it	ne
   11e2a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   11e2e:	d01b      	beq.n	11e68 <__cmpdf2+0x54>
   11e30:	b001      	add	sp, #4
   11e32:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   11e36:	bf0c      	ite	eq
   11e38:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   11e3c:	ea91 0f03 	teqne	r1, r3
   11e40:	bf02      	ittt	eq
   11e42:	ea90 0f02 	teqeq	r0, r2
   11e46:	2000      	moveq	r0, #0
   11e48:	4770      	bxeq	lr
   11e4a:	f110 0f00 	cmn.w	r0, #0
   11e4e:	ea91 0f03 	teq	r1, r3
   11e52:	bf58      	it	pl
   11e54:	4299      	cmppl	r1, r3
   11e56:	bf08      	it	eq
   11e58:	4290      	cmpeq	r0, r2
   11e5a:	bf2c      	ite	cs
   11e5c:	17d8      	asrcs	r0, r3, #31
   11e5e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   11e62:	f040 0001 	orr.w	r0, r0, #1
   11e66:	4770      	bx	lr
   11e68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   11e6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   11e70:	d102      	bne.n	11e78 <__cmpdf2+0x64>
   11e72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   11e76:	d107      	bne.n	11e88 <__cmpdf2+0x74>
   11e78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   11e7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   11e80:	d1d6      	bne.n	11e30 <__cmpdf2+0x1c>
   11e82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   11e86:	d0d3      	beq.n	11e30 <__cmpdf2+0x1c>
   11e88:	f85d 0b04 	ldr.w	r0, [sp], #4
   11e8c:	4770      	bx	lr
   11e8e:	bf00      	nop

00011e90 <__aeabi_cdrcmple>:
   11e90:	4684      	mov	ip, r0
   11e92:	4610      	mov	r0, r2
   11e94:	4662      	mov	r2, ip
   11e96:	468c      	mov	ip, r1
   11e98:	4619      	mov	r1, r3
   11e9a:	4663      	mov	r3, ip
   11e9c:	e000      	b.n	11ea0 <__aeabi_cdcmpeq>
   11e9e:	bf00      	nop

00011ea0 <__aeabi_cdcmpeq>:
   11ea0:	b501      	push	{r0, lr}
   11ea2:	f7ff ffb7 	bl	11e14 <__cmpdf2>
   11ea6:	2800      	cmp	r0, #0
   11ea8:	bf48      	it	mi
   11eaa:	f110 0f00 	cmnmi.w	r0, #0
   11eae:	bd01      	pop	{r0, pc}

00011eb0 <__aeabi_dcmpeq>:
   11eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   11eb4:	f7ff fff4 	bl	11ea0 <__aeabi_cdcmpeq>
   11eb8:	bf0c      	ite	eq
   11eba:	2001      	moveq	r0, #1
   11ebc:	2000      	movne	r0, #0
   11ebe:	f85d fb08 	ldr.w	pc, [sp], #8
   11ec2:	bf00      	nop

00011ec4 <__aeabi_dcmplt>:
   11ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
   11ec8:	f7ff ffea 	bl	11ea0 <__aeabi_cdcmpeq>
   11ecc:	bf34      	ite	cc
   11ece:	2001      	movcc	r0, #1
   11ed0:	2000      	movcs	r0, #0
   11ed2:	f85d fb08 	ldr.w	pc, [sp], #8
   11ed6:	bf00      	nop

00011ed8 <__aeabi_dcmple>:
   11ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
   11edc:	f7ff ffe0 	bl	11ea0 <__aeabi_cdcmpeq>
   11ee0:	bf94      	ite	ls
   11ee2:	2001      	movls	r0, #1
   11ee4:	2000      	movhi	r0, #0
   11ee6:	f85d fb08 	ldr.w	pc, [sp], #8
   11eea:	bf00      	nop

00011eec <__aeabi_dcmpge>:
   11eec:	f84d ed08 	str.w	lr, [sp, #-8]!
   11ef0:	f7ff ffce 	bl	11e90 <__aeabi_cdrcmple>
   11ef4:	bf94      	ite	ls
   11ef6:	2001      	movls	r0, #1
   11ef8:	2000      	movhi	r0, #0
   11efa:	f85d fb08 	ldr.w	pc, [sp], #8
   11efe:	bf00      	nop

00011f00 <__aeabi_dcmpgt>:
   11f00:	f84d ed08 	str.w	lr, [sp, #-8]!
   11f04:	f7ff ffc4 	bl	11e90 <__aeabi_cdrcmple>
   11f08:	bf34      	ite	cc
   11f0a:	2001      	movcc	r0, #1
   11f0c:	2000      	movcs	r0, #0
   11f0e:	f85d fb08 	ldr.w	pc, [sp], #8
   11f12:	bf00      	nop

00011f14 <__aeabi_d2iz>:
   11f14:	ea4f 0241 	mov.w	r2, r1, lsl #1
   11f18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   11f1c:	d215      	bcs.n	11f4a <__aeabi_d2iz+0x36>
   11f1e:	d511      	bpl.n	11f44 <__aeabi_d2iz+0x30>
   11f20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   11f24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   11f28:	d912      	bls.n	11f50 <__aeabi_d2iz+0x3c>
   11f2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   11f2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11f32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   11f36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   11f3a:	fa23 f002 	lsr.w	r0, r3, r2
   11f3e:	bf18      	it	ne
   11f40:	4240      	negne	r0, r0
   11f42:	4770      	bx	lr
   11f44:	f04f 0000 	mov.w	r0, #0
   11f48:	4770      	bx	lr
   11f4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   11f4e:	d105      	bne.n	11f5c <__aeabi_d2iz+0x48>
   11f50:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   11f54:	bf08      	it	eq
   11f56:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   11f5a:	4770      	bx	lr
   11f5c:	f04f 0000 	mov.w	r0, #0
   11f60:	4770      	bx	lr
   11f62:	bf00      	nop

00011f64 <__aeabi_d2uiz>:
   11f64:	004a      	lsls	r2, r1, #1
   11f66:	d211      	bcs.n	11f8c <__aeabi_d2uiz+0x28>
   11f68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   11f6c:	d211      	bcs.n	11f92 <__aeabi_d2uiz+0x2e>
   11f6e:	d50d      	bpl.n	11f8c <__aeabi_d2uiz+0x28>
   11f70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   11f74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   11f78:	d40e      	bmi.n	11f98 <__aeabi_d2uiz+0x34>
   11f7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   11f7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11f82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   11f86:	fa23 f002 	lsr.w	r0, r3, r2
   11f8a:	4770      	bx	lr
   11f8c:	f04f 0000 	mov.w	r0, #0
   11f90:	4770      	bx	lr
   11f92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   11f96:	d102      	bne.n	11f9e <__aeabi_d2uiz+0x3a>
   11f98:	f04f 30ff 	mov.w	r0, #4294967295
   11f9c:	4770      	bx	lr
   11f9e:	f04f 0000 	mov.w	r0, #0
   11fa2:	4770      	bx	lr

00011fa4 <__aeabi_d2f>:
   11fa4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   11fa8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   11fac:	bf24      	itt	cs
   11fae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   11fb2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   11fb6:	d90d      	bls.n	11fd4 <__aeabi_d2f+0x30>
   11fb8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   11fbc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   11fc0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   11fc4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   11fc8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   11fcc:	bf08      	it	eq
   11fce:	f020 0001 	biceq.w	r0, r0, #1
   11fd2:	4770      	bx	lr
   11fd4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   11fd8:	d121      	bne.n	1201e <__aeabi_d2f+0x7a>
   11fda:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   11fde:	bfbc      	itt	lt
   11fe0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   11fe4:	4770      	bxlt	lr
   11fe6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   11fea:	ea4f 5252 	mov.w	r2, r2, lsr #21
   11fee:	f1c2 0218 	rsb	r2, r2, #24
   11ff2:	f1c2 0c20 	rsb	ip, r2, #32
   11ff6:	fa10 f30c 	lsls.w	r3, r0, ip
   11ffa:	fa20 f002 	lsr.w	r0, r0, r2
   11ffe:	bf18      	it	ne
   12000:	f040 0001 	orrne.w	r0, r0, #1
   12004:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   12008:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1200c:	fa03 fc0c 	lsl.w	ip, r3, ip
   12010:	ea40 000c 	orr.w	r0, r0, ip
   12014:	fa23 f302 	lsr.w	r3, r3, r2
   12018:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1201c:	e7cc      	b.n	11fb8 <__aeabi_d2f+0x14>
   1201e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   12022:	d107      	bne.n	12034 <__aeabi_d2f+0x90>
   12024:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   12028:	bf1e      	ittt	ne
   1202a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1202e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   12032:	4770      	bxne	lr
   12034:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   12038:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1203c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   12040:	4770      	bx	lr
   12042:	bf00      	nop

00012044 <__aeabi_frsub>:
   12044:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   12048:	e002      	b.n	12050 <__addsf3>
   1204a:	bf00      	nop

0001204c <__aeabi_fsub>:
   1204c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00012050 <__addsf3>:
   12050:	0042      	lsls	r2, r0, #1
   12052:	bf1f      	itttt	ne
   12054:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   12058:	ea92 0f03 	teqne	r2, r3
   1205c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   12060:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   12064:	d06a      	beq.n	1213c <__addsf3+0xec>
   12066:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1206a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1206e:	bfc1      	itttt	gt
   12070:	18d2      	addgt	r2, r2, r3
   12072:	4041      	eorgt	r1, r0
   12074:	4048      	eorgt	r0, r1
   12076:	4041      	eorgt	r1, r0
   12078:	bfb8      	it	lt
   1207a:	425b      	neglt	r3, r3
   1207c:	2b19      	cmp	r3, #25
   1207e:	bf88      	it	hi
   12080:	4770      	bxhi	lr
   12082:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   12086:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1208a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1208e:	bf18      	it	ne
   12090:	4240      	negne	r0, r0
   12092:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   12096:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1209a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1209e:	bf18      	it	ne
   120a0:	4249      	negne	r1, r1
   120a2:	ea92 0f03 	teq	r2, r3
   120a6:	d03f      	beq.n	12128 <__addsf3+0xd8>
   120a8:	f1a2 0201 	sub.w	r2, r2, #1
   120ac:	fa41 fc03 	asr.w	ip, r1, r3
   120b0:	eb10 000c 	adds.w	r0, r0, ip
   120b4:	f1c3 0320 	rsb	r3, r3, #32
   120b8:	fa01 f103 	lsl.w	r1, r1, r3
   120bc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   120c0:	d502      	bpl.n	120c8 <__addsf3+0x78>
   120c2:	4249      	negs	r1, r1
   120c4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   120c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   120cc:	d313      	bcc.n	120f6 <__addsf3+0xa6>
   120ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   120d2:	d306      	bcc.n	120e2 <__addsf3+0x92>
   120d4:	0840      	lsrs	r0, r0, #1
   120d6:	ea4f 0131 	mov.w	r1, r1, rrx
   120da:	f102 0201 	add.w	r2, r2, #1
   120de:	2afe      	cmp	r2, #254	; 0xfe
   120e0:	d251      	bcs.n	12186 <__addsf3+0x136>
   120e2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   120e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   120ea:	bf08      	it	eq
   120ec:	f020 0001 	biceq.w	r0, r0, #1
   120f0:	ea40 0003 	orr.w	r0, r0, r3
   120f4:	4770      	bx	lr
   120f6:	0049      	lsls	r1, r1, #1
   120f8:	eb40 0000 	adc.w	r0, r0, r0
   120fc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   12100:	f1a2 0201 	sub.w	r2, r2, #1
   12104:	d1ed      	bne.n	120e2 <__addsf3+0x92>
   12106:	fab0 fc80 	clz	ip, r0
   1210a:	f1ac 0c08 	sub.w	ip, ip, #8
   1210e:	ebb2 020c 	subs.w	r2, r2, ip
   12112:	fa00 f00c 	lsl.w	r0, r0, ip
   12116:	bfaa      	itet	ge
   12118:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1211c:	4252      	neglt	r2, r2
   1211e:	4318      	orrge	r0, r3
   12120:	bfbc      	itt	lt
   12122:	40d0      	lsrlt	r0, r2
   12124:	4318      	orrlt	r0, r3
   12126:	4770      	bx	lr
   12128:	f092 0f00 	teq	r2, #0
   1212c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   12130:	bf06      	itte	eq
   12132:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   12136:	3201      	addeq	r2, #1
   12138:	3b01      	subne	r3, #1
   1213a:	e7b5      	b.n	120a8 <__addsf3+0x58>
   1213c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   12140:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   12144:	bf18      	it	ne
   12146:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1214a:	d021      	beq.n	12190 <__addsf3+0x140>
   1214c:	ea92 0f03 	teq	r2, r3
   12150:	d004      	beq.n	1215c <__addsf3+0x10c>
   12152:	f092 0f00 	teq	r2, #0
   12156:	bf08      	it	eq
   12158:	4608      	moveq	r0, r1
   1215a:	4770      	bx	lr
   1215c:	ea90 0f01 	teq	r0, r1
   12160:	bf1c      	itt	ne
   12162:	2000      	movne	r0, #0
   12164:	4770      	bxne	lr
   12166:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1216a:	d104      	bne.n	12176 <__addsf3+0x126>
   1216c:	0040      	lsls	r0, r0, #1
   1216e:	bf28      	it	cs
   12170:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   12174:	4770      	bx	lr
   12176:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1217a:	bf3c      	itt	cc
   1217c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   12180:	4770      	bxcc	lr
   12182:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   12186:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1218a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1218e:	4770      	bx	lr
   12190:	ea7f 6222 	mvns.w	r2, r2, asr #24
   12194:	bf16      	itet	ne
   12196:	4608      	movne	r0, r1
   12198:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1219c:	4601      	movne	r1, r0
   1219e:	0242      	lsls	r2, r0, #9
   121a0:	bf06      	itte	eq
   121a2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   121a6:	ea90 0f01 	teqeq	r0, r1
   121aa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   121ae:	4770      	bx	lr

000121b0 <__aeabi_ui2f>:
   121b0:	f04f 0300 	mov.w	r3, #0
   121b4:	e004      	b.n	121c0 <__aeabi_i2f+0x8>
   121b6:	bf00      	nop

000121b8 <__aeabi_i2f>:
   121b8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   121bc:	bf48      	it	mi
   121be:	4240      	negmi	r0, r0
   121c0:	ea5f 0c00 	movs.w	ip, r0
   121c4:	bf08      	it	eq
   121c6:	4770      	bxeq	lr
   121c8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   121cc:	4601      	mov	r1, r0
   121ce:	f04f 0000 	mov.w	r0, #0
   121d2:	e01c      	b.n	1220e <__aeabi_l2f+0x2a>

000121d4 <__aeabi_ul2f>:
   121d4:	ea50 0201 	orrs.w	r2, r0, r1
   121d8:	bf08      	it	eq
   121da:	4770      	bxeq	lr
   121dc:	f04f 0300 	mov.w	r3, #0
   121e0:	e00a      	b.n	121f8 <__aeabi_l2f+0x14>
   121e2:	bf00      	nop

000121e4 <__aeabi_l2f>:
   121e4:	ea50 0201 	orrs.w	r2, r0, r1
   121e8:	bf08      	it	eq
   121ea:	4770      	bxeq	lr
   121ec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   121f0:	d502      	bpl.n	121f8 <__aeabi_l2f+0x14>
   121f2:	4240      	negs	r0, r0
   121f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   121f8:	ea5f 0c01 	movs.w	ip, r1
   121fc:	bf02      	ittt	eq
   121fe:	4684      	moveq	ip, r0
   12200:	4601      	moveq	r1, r0
   12202:	2000      	moveq	r0, #0
   12204:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   12208:	bf08      	it	eq
   1220a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1220e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   12212:	fabc f28c 	clz	r2, ip
   12216:	3a08      	subs	r2, #8
   12218:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1221c:	db10      	blt.n	12240 <__aeabi_l2f+0x5c>
   1221e:	fa01 fc02 	lsl.w	ip, r1, r2
   12222:	4463      	add	r3, ip
   12224:	fa00 fc02 	lsl.w	ip, r0, r2
   12228:	f1c2 0220 	rsb	r2, r2, #32
   1222c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   12230:	fa20 f202 	lsr.w	r2, r0, r2
   12234:	eb43 0002 	adc.w	r0, r3, r2
   12238:	bf08      	it	eq
   1223a:	f020 0001 	biceq.w	r0, r0, #1
   1223e:	4770      	bx	lr
   12240:	f102 0220 	add.w	r2, r2, #32
   12244:	fa01 fc02 	lsl.w	ip, r1, r2
   12248:	f1c2 0220 	rsb	r2, r2, #32
   1224c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   12250:	fa21 f202 	lsr.w	r2, r1, r2
   12254:	eb43 0002 	adc.w	r0, r3, r2
   12258:	bf08      	it	eq
   1225a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1225e:	4770      	bx	lr

00012260 <__aeabi_fmul>:
   12260:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12264:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   12268:	bf1e      	ittt	ne
   1226a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1226e:	ea92 0f0c 	teqne	r2, ip
   12272:	ea93 0f0c 	teqne	r3, ip
   12276:	d06f      	beq.n	12358 <__aeabi_fmul+0xf8>
   12278:	441a      	add	r2, r3
   1227a:	ea80 0c01 	eor.w	ip, r0, r1
   1227e:	0240      	lsls	r0, r0, #9
   12280:	bf18      	it	ne
   12282:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   12286:	d01e      	beq.n	122c6 <__aeabi_fmul+0x66>
   12288:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1228c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   12290:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   12294:	fba0 3101 	umull	r3, r1, r0, r1
   12298:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1229c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   122a0:	bf3e      	ittt	cc
   122a2:	0049      	lslcc	r1, r1, #1
   122a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   122a8:	005b      	lslcc	r3, r3, #1
   122aa:	ea40 0001 	orr.w	r0, r0, r1
   122ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   122b2:	2afd      	cmp	r2, #253	; 0xfd
   122b4:	d81d      	bhi.n	122f2 <__aeabi_fmul+0x92>
   122b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   122ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   122be:	bf08      	it	eq
   122c0:	f020 0001 	biceq.w	r0, r0, #1
   122c4:	4770      	bx	lr
   122c6:	f090 0f00 	teq	r0, #0
   122ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   122ce:	bf08      	it	eq
   122d0:	0249      	lsleq	r1, r1, #9
   122d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   122d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   122da:	3a7f      	subs	r2, #127	; 0x7f
   122dc:	bfc2      	ittt	gt
   122de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   122e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   122e6:	4770      	bxgt	lr
   122e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   122ec:	f04f 0300 	mov.w	r3, #0
   122f0:	3a01      	subs	r2, #1
   122f2:	dc5d      	bgt.n	123b0 <__aeabi_fmul+0x150>
   122f4:	f112 0f19 	cmn.w	r2, #25
   122f8:	bfdc      	itt	le
   122fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   122fe:	4770      	bxle	lr
   12300:	f1c2 0200 	rsb	r2, r2, #0
   12304:	0041      	lsls	r1, r0, #1
   12306:	fa21 f102 	lsr.w	r1, r1, r2
   1230a:	f1c2 0220 	rsb	r2, r2, #32
   1230e:	fa00 fc02 	lsl.w	ip, r0, r2
   12312:	ea5f 0031 	movs.w	r0, r1, rrx
   12316:	f140 0000 	adc.w	r0, r0, #0
   1231a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1231e:	bf08      	it	eq
   12320:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   12324:	4770      	bx	lr
   12326:	f092 0f00 	teq	r2, #0
   1232a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1232e:	bf02      	ittt	eq
   12330:	0040      	lsleq	r0, r0, #1
   12332:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   12336:	3a01      	subeq	r2, #1
   12338:	d0f9      	beq.n	1232e <__aeabi_fmul+0xce>
   1233a:	ea40 000c 	orr.w	r0, r0, ip
   1233e:	f093 0f00 	teq	r3, #0
   12342:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   12346:	bf02      	ittt	eq
   12348:	0049      	lsleq	r1, r1, #1
   1234a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1234e:	3b01      	subeq	r3, #1
   12350:	d0f9      	beq.n	12346 <__aeabi_fmul+0xe6>
   12352:	ea41 010c 	orr.w	r1, r1, ip
   12356:	e78f      	b.n	12278 <__aeabi_fmul+0x18>
   12358:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1235c:	ea92 0f0c 	teq	r2, ip
   12360:	bf18      	it	ne
   12362:	ea93 0f0c 	teqne	r3, ip
   12366:	d00a      	beq.n	1237e <__aeabi_fmul+0x11e>
   12368:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1236c:	bf18      	it	ne
   1236e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   12372:	d1d8      	bne.n	12326 <__aeabi_fmul+0xc6>
   12374:	ea80 0001 	eor.w	r0, r0, r1
   12378:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1237c:	4770      	bx	lr
   1237e:	f090 0f00 	teq	r0, #0
   12382:	bf17      	itett	ne
   12384:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   12388:	4608      	moveq	r0, r1
   1238a:	f091 0f00 	teqne	r1, #0
   1238e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   12392:	d014      	beq.n	123be <__aeabi_fmul+0x15e>
   12394:	ea92 0f0c 	teq	r2, ip
   12398:	d101      	bne.n	1239e <__aeabi_fmul+0x13e>
   1239a:	0242      	lsls	r2, r0, #9
   1239c:	d10f      	bne.n	123be <__aeabi_fmul+0x15e>
   1239e:	ea93 0f0c 	teq	r3, ip
   123a2:	d103      	bne.n	123ac <__aeabi_fmul+0x14c>
   123a4:	024b      	lsls	r3, r1, #9
   123a6:	bf18      	it	ne
   123a8:	4608      	movne	r0, r1
   123aa:	d108      	bne.n	123be <__aeabi_fmul+0x15e>
   123ac:	ea80 0001 	eor.w	r0, r0, r1
   123b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   123b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   123b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   123bc:	4770      	bx	lr
   123be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   123c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   123c6:	4770      	bx	lr

000123c8 <__aeabi_fdiv>:
   123c8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   123cc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   123d0:	bf1e      	ittt	ne
   123d2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   123d6:	ea92 0f0c 	teqne	r2, ip
   123da:	ea93 0f0c 	teqne	r3, ip
   123de:	d069      	beq.n	124b4 <__aeabi_fdiv+0xec>
   123e0:	eba2 0203 	sub.w	r2, r2, r3
   123e4:	ea80 0c01 	eor.w	ip, r0, r1
   123e8:	0249      	lsls	r1, r1, #9
   123ea:	ea4f 2040 	mov.w	r0, r0, lsl #9
   123ee:	d037      	beq.n	12460 <__aeabi_fdiv+0x98>
   123f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   123f4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   123f8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   123fc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   12400:	428b      	cmp	r3, r1
   12402:	bf38      	it	cc
   12404:	005b      	lslcc	r3, r3, #1
   12406:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1240a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1240e:	428b      	cmp	r3, r1
   12410:	bf24      	itt	cs
   12412:	1a5b      	subcs	r3, r3, r1
   12414:	ea40 000c 	orrcs.w	r0, r0, ip
   12418:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1241c:	bf24      	itt	cs
   1241e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   12422:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   12426:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1242a:	bf24      	itt	cs
   1242c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   12430:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   12434:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   12438:	bf24      	itt	cs
   1243a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1243e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   12442:	011b      	lsls	r3, r3, #4
   12444:	bf18      	it	ne
   12446:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1244a:	d1e0      	bne.n	1240e <__aeabi_fdiv+0x46>
   1244c:	2afd      	cmp	r2, #253	; 0xfd
   1244e:	f63f af50 	bhi.w	122f2 <__aeabi_fmul+0x92>
   12452:	428b      	cmp	r3, r1
   12454:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   12458:	bf08      	it	eq
   1245a:	f020 0001 	biceq.w	r0, r0, #1
   1245e:	4770      	bx	lr
   12460:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   12464:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   12468:	327f      	adds	r2, #127	; 0x7f
   1246a:	bfc2      	ittt	gt
   1246c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   12470:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   12474:	4770      	bxgt	lr
   12476:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1247a:	f04f 0300 	mov.w	r3, #0
   1247e:	3a01      	subs	r2, #1
   12480:	e737      	b.n	122f2 <__aeabi_fmul+0x92>
   12482:	f092 0f00 	teq	r2, #0
   12486:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1248a:	bf02      	ittt	eq
   1248c:	0040      	lsleq	r0, r0, #1
   1248e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   12492:	3a01      	subeq	r2, #1
   12494:	d0f9      	beq.n	1248a <__aeabi_fdiv+0xc2>
   12496:	ea40 000c 	orr.w	r0, r0, ip
   1249a:	f093 0f00 	teq	r3, #0
   1249e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   124a2:	bf02      	ittt	eq
   124a4:	0049      	lsleq	r1, r1, #1
   124a6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   124aa:	3b01      	subeq	r3, #1
   124ac:	d0f9      	beq.n	124a2 <__aeabi_fdiv+0xda>
   124ae:	ea41 010c 	orr.w	r1, r1, ip
   124b2:	e795      	b.n	123e0 <__aeabi_fdiv+0x18>
   124b4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   124b8:	ea92 0f0c 	teq	r2, ip
   124bc:	d108      	bne.n	124d0 <__aeabi_fdiv+0x108>
   124be:	0242      	lsls	r2, r0, #9
   124c0:	f47f af7d 	bne.w	123be <__aeabi_fmul+0x15e>
   124c4:	ea93 0f0c 	teq	r3, ip
   124c8:	f47f af70 	bne.w	123ac <__aeabi_fmul+0x14c>
   124cc:	4608      	mov	r0, r1
   124ce:	e776      	b.n	123be <__aeabi_fmul+0x15e>
   124d0:	ea93 0f0c 	teq	r3, ip
   124d4:	d104      	bne.n	124e0 <__aeabi_fdiv+0x118>
   124d6:	024b      	lsls	r3, r1, #9
   124d8:	f43f af4c 	beq.w	12374 <__aeabi_fmul+0x114>
   124dc:	4608      	mov	r0, r1
   124de:	e76e      	b.n	123be <__aeabi_fmul+0x15e>
   124e0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   124e4:	bf18      	it	ne
   124e6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   124ea:	d1ca      	bne.n	12482 <__aeabi_fdiv+0xba>
   124ec:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   124f0:	f47f af5c 	bne.w	123ac <__aeabi_fmul+0x14c>
   124f4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   124f8:	f47f af3c 	bne.w	12374 <__aeabi_fmul+0x114>
   124fc:	e75f      	b.n	123be <__aeabi_fmul+0x15e>
   124fe:	bf00      	nop

00012500 <__gesf2>:
   12500:	f04f 3cff 	mov.w	ip, #4294967295
   12504:	e006      	b.n	12514 <__cmpsf2+0x4>
   12506:	bf00      	nop

00012508 <__lesf2>:
   12508:	f04f 0c01 	mov.w	ip, #1
   1250c:	e002      	b.n	12514 <__cmpsf2+0x4>
   1250e:	bf00      	nop

00012510 <__cmpsf2>:
   12510:	f04f 0c01 	mov.w	ip, #1
   12514:	f84d cd04 	str.w	ip, [sp, #-4]!
   12518:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1251c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   12520:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   12524:	bf18      	it	ne
   12526:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1252a:	d011      	beq.n	12550 <__cmpsf2+0x40>
   1252c:	b001      	add	sp, #4
   1252e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   12532:	bf18      	it	ne
   12534:	ea90 0f01 	teqne	r0, r1
   12538:	bf58      	it	pl
   1253a:	ebb2 0003 	subspl.w	r0, r2, r3
   1253e:	bf88      	it	hi
   12540:	17c8      	asrhi	r0, r1, #31
   12542:	bf38      	it	cc
   12544:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   12548:	bf18      	it	ne
   1254a:	f040 0001 	orrne.w	r0, r0, #1
   1254e:	4770      	bx	lr
   12550:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   12554:	d102      	bne.n	1255c <__cmpsf2+0x4c>
   12556:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1255a:	d105      	bne.n	12568 <__cmpsf2+0x58>
   1255c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   12560:	d1e4      	bne.n	1252c <__cmpsf2+0x1c>
   12562:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   12566:	d0e1      	beq.n	1252c <__cmpsf2+0x1c>
   12568:	f85d 0b04 	ldr.w	r0, [sp], #4
   1256c:	4770      	bx	lr
   1256e:	bf00      	nop

00012570 <__aeabi_cfrcmple>:
   12570:	4684      	mov	ip, r0
   12572:	4608      	mov	r0, r1
   12574:	4661      	mov	r1, ip
   12576:	e7ff      	b.n	12578 <__aeabi_cfcmpeq>

00012578 <__aeabi_cfcmpeq>:
   12578:	b50f      	push	{r0, r1, r2, r3, lr}
   1257a:	f7ff ffc9 	bl	12510 <__cmpsf2>
   1257e:	2800      	cmp	r0, #0
   12580:	bf48      	it	mi
   12582:	f110 0f00 	cmnmi.w	r0, #0
   12586:	bd0f      	pop	{r0, r1, r2, r3, pc}

00012588 <__aeabi_fcmpeq>:
   12588:	f84d ed08 	str.w	lr, [sp, #-8]!
   1258c:	f7ff fff4 	bl	12578 <__aeabi_cfcmpeq>
   12590:	bf0c      	ite	eq
   12592:	2001      	moveq	r0, #1
   12594:	2000      	movne	r0, #0
   12596:	f85d fb08 	ldr.w	pc, [sp], #8
   1259a:	bf00      	nop

0001259c <__aeabi_fcmplt>:
   1259c:	f84d ed08 	str.w	lr, [sp, #-8]!
   125a0:	f7ff ffea 	bl	12578 <__aeabi_cfcmpeq>
   125a4:	bf34      	ite	cc
   125a6:	2001      	movcc	r0, #1
   125a8:	2000      	movcs	r0, #0
   125aa:	f85d fb08 	ldr.w	pc, [sp], #8
   125ae:	bf00      	nop

000125b0 <__aeabi_fcmple>:
   125b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   125b4:	f7ff ffe0 	bl	12578 <__aeabi_cfcmpeq>
   125b8:	bf94      	ite	ls
   125ba:	2001      	movls	r0, #1
   125bc:	2000      	movhi	r0, #0
   125be:	f85d fb08 	ldr.w	pc, [sp], #8
   125c2:	bf00      	nop

000125c4 <__aeabi_fcmpge>:
   125c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   125c8:	f7ff ffd2 	bl	12570 <__aeabi_cfrcmple>
   125cc:	bf94      	ite	ls
   125ce:	2001      	movls	r0, #1
   125d0:	2000      	movhi	r0, #0
   125d2:	f85d fb08 	ldr.w	pc, [sp], #8
   125d6:	bf00      	nop

000125d8 <__aeabi_fcmpgt>:
   125d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   125dc:	f7ff ffc8 	bl	12570 <__aeabi_cfrcmple>
   125e0:	bf34      	ite	cc
   125e2:	2001      	movcc	r0, #1
   125e4:	2000      	movcs	r0, #0
   125e6:	f85d fb08 	ldr.w	pc, [sp], #8
   125ea:	bf00      	nop

000125ec <__aeabi_f2iz>:
   125ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
   125f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   125f4:	d30f      	bcc.n	12616 <__aeabi_f2iz+0x2a>
   125f6:	f04f 039e 	mov.w	r3, #158	; 0x9e
   125fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   125fe:	d90d      	bls.n	1261c <__aeabi_f2iz+0x30>
   12600:	ea4f 2300 	mov.w	r3, r0, lsl #8
   12604:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12608:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1260c:	fa23 f002 	lsr.w	r0, r3, r2
   12610:	bf18      	it	ne
   12612:	4240      	negne	r0, r0
   12614:	4770      	bx	lr
   12616:	f04f 0000 	mov.w	r0, #0
   1261a:	4770      	bx	lr
   1261c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   12620:	d101      	bne.n	12626 <__aeabi_f2iz+0x3a>
   12622:	0242      	lsls	r2, r0, #9
   12624:	d105      	bne.n	12632 <__aeabi_f2iz+0x46>
   12626:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   1262a:	bf08      	it	eq
   1262c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   12630:	4770      	bx	lr
   12632:	f04f 0000 	mov.w	r0, #0
   12636:	4770      	bx	lr

00012638 <__aeabi_uldivmod>:
   12638:	b953      	cbnz	r3, 12650 <__aeabi_uldivmod+0x18>
   1263a:	b94a      	cbnz	r2, 12650 <__aeabi_uldivmod+0x18>
   1263c:	2900      	cmp	r1, #0
   1263e:	bf08      	it	eq
   12640:	2800      	cmpeq	r0, #0
   12642:	bf1c      	itt	ne
   12644:	f04f 31ff 	movne.w	r1, #4294967295
   12648:	f04f 30ff 	movne.w	r0, #4294967295
   1264c:	f001 b934 	b.w	138b8 <__aeabi_idiv0>
   12650:	f1ad 0c08 	sub.w	ip, sp, #8
   12654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   12658:	f000 f844 	bl	126e4 <__udivmoddi4>
   1265c:	f8dd e004 	ldr.w	lr, [sp, #4]
   12660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   12664:	b004      	add	sp, #16
   12666:	4770      	bx	lr

00012668 <__aeabi_d2lz>:
   12668:	b538      	push	{r3, r4, r5, lr}
   1266a:	4605      	mov	r5, r0
   1266c:	460c      	mov	r4, r1
   1266e:	4628      	mov	r0, r5
   12670:	4621      	mov	r1, r4
   12672:	2200      	movs	r2, #0
   12674:	2300      	movs	r3, #0
   12676:	f7ff fc25 	bl	11ec4 <__aeabi_dcmplt>
   1267a:	b928      	cbnz	r0, 12688 <__aeabi_d2lz+0x20>
   1267c:	4628      	mov	r0, r5
   1267e:	4621      	mov	r1, r4
   12680:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12684:	f000 b80a 	b.w	1269c <__aeabi_d2ulz>
   12688:	4628      	mov	r0, r5
   1268a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   1268e:	f000 f805 	bl	1269c <__aeabi_d2ulz>
   12692:	4240      	negs	r0, r0
   12694:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12698:	bd38      	pop	{r3, r4, r5, pc}
   1269a:	bf00      	nop

0001269c <__aeabi_d2ulz>:
   1269c:	b5d0      	push	{r4, r6, r7, lr}
   1269e:	2200      	movs	r2, #0
   126a0:	4b0e      	ldr	r3, [pc, #56]	; (126dc <__aeabi_d2ulz+0x40>)
   126a2:	4606      	mov	r6, r0
   126a4:	460f      	mov	r7, r1
   126a6:	f7ff f99b 	bl	119e0 <__aeabi_dmul>
   126aa:	f7ff fc5b 	bl	11f64 <__aeabi_d2uiz>
   126ae:	4604      	mov	r4, r0
   126b0:	f7ff f920 	bl	118f4 <__aeabi_ui2d>
   126b4:	2200      	movs	r2, #0
   126b6:	4b0a      	ldr	r3, [pc, #40]	; (126e0 <__aeabi_d2ulz+0x44>)
   126b8:	f7ff f992 	bl	119e0 <__aeabi_dmul>
   126bc:	4602      	mov	r2, r0
   126be:	460b      	mov	r3, r1
   126c0:	4630      	mov	r0, r6
   126c2:	4639      	mov	r1, r7
   126c4:	f7fe ffd8 	bl	11678 <__aeabi_dsub>
   126c8:	f7ff fc4c 	bl	11f64 <__aeabi_d2uiz>
   126cc:	4623      	mov	r3, r4
   126ce:	2200      	movs	r2, #0
   126d0:	ea42 0200 	orr.w	r2, r2, r0
   126d4:	4610      	mov	r0, r2
   126d6:	4619      	mov	r1, r3
   126d8:	bdd0      	pop	{r4, r6, r7, pc}
   126da:	bf00      	nop
   126dc:	3df00000 	.word	0x3df00000
   126e0:	41f00000 	.word	0x41f00000

000126e4 <__udivmoddi4>:
   126e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   126e8:	468c      	mov	ip, r1
   126ea:	460d      	mov	r5, r1
   126ec:	4604      	mov	r4, r0
   126ee:	9e08      	ldr	r6, [sp, #32]
   126f0:	2b00      	cmp	r3, #0
   126f2:	d151      	bne.n	12798 <__udivmoddi4+0xb4>
   126f4:	428a      	cmp	r2, r1
   126f6:	4617      	mov	r7, r2
   126f8:	d96d      	bls.n	127d6 <__udivmoddi4+0xf2>
   126fa:	fab2 fe82 	clz	lr, r2
   126fe:	f1be 0f00 	cmp.w	lr, #0
   12702:	d00b      	beq.n	1271c <__udivmoddi4+0x38>
   12704:	f1ce 0c20 	rsb	ip, lr, #32
   12708:	fa01 f50e 	lsl.w	r5, r1, lr
   1270c:	fa20 fc0c 	lsr.w	ip, r0, ip
   12710:	fa02 f70e 	lsl.w	r7, r2, lr
   12714:	ea4c 0c05 	orr.w	ip, ip, r5
   12718:	fa00 f40e 	lsl.w	r4, r0, lr
   1271c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   12720:	0c25      	lsrs	r5, r4, #16
   12722:	fbbc f8fa 	udiv	r8, ip, sl
   12726:	fa1f f987 	uxth.w	r9, r7
   1272a:	fb0a cc18 	mls	ip, sl, r8, ip
   1272e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   12732:	fb08 f309 	mul.w	r3, r8, r9
   12736:	42ab      	cmp	r3, r5
   12738:	d90a      	bls.n	12750 <__udivmoddi4+0x6c>
   1273a:	19ed      	adds	r5, r5, r7
   1273c:	f108 32ff 	add.w	r2, r8, #4294967295
   12740:	f080 8123 	bcs.w	1298a <__udivmoddi4+0x2a6>
   12744:	42ab      	cmp	r3, r5
   12746:	f240 8120 	bls.w	1298a <__udivmoddi4+0x2a6>
   1274a:	f1a8 0802 	sub.w	r8, r8, #2
   1274e:	443d      	add	r5, r7
   12750:	1aed      	subs	r5, r5, r3
   12752:	b2a4      	uxth	r4, r4
   12754:	fbb5 f0fa 	udiv	r0, r5, sl
   12758:	fb0a 5510 	mls	r5, sl, r0, r5
   1275c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   12760:	fb00 f909 	mul.w	r9, r0, r9
   12764:	45a1      	cmp	r9, r4
   12766:	d909      	bls.n	1277c <__udivmoddi4+0x98>
   12768:	19e4      	adds	r4, r4, r7
   1276a:	f100 33ff 	add.w	r3, r0, #4294967295
   1276e:	f080 810a 	bcs.w	12986 <__udivmoddi4+0x2a2>
   12772:	45a1      	cmp	r9, r4
   12774:	f240 8107 	bls.w	12986 <__udivmoddi4+0x2a2>
   12778:	3802      	subs	r0, #2
   1277a:	443c      	add	r4, r7
   1277c:	eba4 0409 	sub.w	r4, r4, r9
   12780:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   12784:	2100      	movs	r1, #0
   12786:	2e00      	cmp	r6, #0
   12788:	d061      	beq.n	1284e <__udivmoddi4+0x16a>
   1278a:	fa24 f40e 	lsr.w	r4, r4, lr
   1278e:	2300      	movs	r3, #0
   12790:	6034      	str	r4, [r6, #0]
   12792:	6073      	str	r3, [r6, #4]
   12794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12798:	428b      	cmp	r3, r1
   1279a:	d907      	bls.n	127ac <__udivmoddi4+0xc8>
   1279c:	2e00      	cmp	r6, #0
   1279e:	d054      	beq.n	1284a <__udivmoddi4+0x166>
   127a0:	2100      	movs	r1, #0
   127a2:	e886 0021 	stmia.w	r6, {r0, r5}
   127a6:	4608      	mov	r0, r1
   127a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   127ac:	fab3 f183 	clz	r1, r3
   127b0:	2900      	cmp	r1, #0
   127b2:	f040 808e 	bne.w	128d2 <__udivmoddi4+0x1ee>
   127b6:	42ab      	cmp	r3, r5
   127b8:	d302      	bcc.n	127c0 <__udivmoddi4+0xdc>
   127ba:	4282      	cmp	r2, r0
   127bc:	f200 80fa 	bhi.w	129b4 <__udivmoddi4+0x2d0>
   127c0:	1a84      	subs	r4, r0, r2
   127c2:	eb65 0503 	sbc.w	r5, r5, r3
   127c6:	2001      	movs	r0, #1
   127c8:	46ac      	mov	ip, r5
   127ca:	2e00      	cmp	r6, #0
   127cc:	d03f      	beq.n	1284e <__udivmoddi4+0x16a>
   127ce:	e886 1010 	stmia.w	r6, {r4, ip}
   127d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   127d6:	b912      	cbnz	r2, 127de <__udivmoddi4+0xfa>
   127d8:	2701      	movs	r7, #1
   127da:	fbb7 f7f2 	udiv	r7, r7, r2
   127de:	fab7 fe87 	clz	lr, r7
   127e2:	f1be 0f00 	cmp.w	lr, #0
   127e6:	d134      	bne.n	12852 <__udivmoddi4+0x16e>
   127e8:	1beb      	subs	r3, r5, r7
   127ea:	0c3a      	lsrs	r2, r7, #16
   127ec:	fa1f fc87 	uxth.w	ip, r7
   127f0:	2101      	movs	r1, #1
   127f2:	fbb3 f8f2 	udiv	r8, r3, r2
   127f6:	0c25      	lsrs	r5, r4, #16
   127f8:	fb02 3318 	mls	r3, r2, r8, r3
   127fc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   12800:	fb0c f308 	mul.w	r3, ip, r8
   12804:	42ab      	cmp	r3, r5
   12806:	d907      	bls.n	12818 <__udivmoddi4+0x134>
   12808:	19ed      	adds	r5, r5, r7
   1280a:	f108 30ff 	add.w	r0, r8, #4294967295
   1280e:	d202      	bcs.n	12816 <__udivmoddi4+0x132>
   12810:	42ab      	cmp	r3, r5
   12812:	f200 80d1 	bhi.w	129b8 <__udivmoddi4+0x2d4>
   12816:	4680      	mov	r8, r0
   12818:	1aed      	subs	r5, r5, r3
   1281a:	b2a3      	uxth	r3, r4
   1281c:	fbb5 f0f2 	udiv	r0, r5, r2
   12820:	fb02 5510 	mls	r5, r2, r0, r5
   12824:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   12828:	fb0c fc00 	mul.w	ip, ip, r0
   1282c:	45a4      	cmp	ip, r4
   1282e:	d907      	bls.n	12840 <__udivmoddi4+0x15c>
   12830:	19e4      	adds	r4, r4, r7
   12832:	f100 33ff 	add.w	r3, r0, #4294967295
   12836:	d202      	bcs.n	1283e <__udivmoddi4+0x15a>
   12838:	45a4      	cmp	ip, r4
   1283a:	f200 80b8 	bhi.w	129ae <__udivmoddi4+0x2ca>
   1283e:	4618      	mov	r0, r3
   12840:	eba4 040c 	sub.w	r4, r4, ip
   12844:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   12848:	e79d      	b.n	12786 <__udivmoddi4+0xa2>
   1284a:	4631      	mov	r1, r6
   1284c:	4630      	mov	r0, r6
   1284e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12852:	f1ce 0420 	rsb	r4, lr, #32
   12856:	fa05 f30e 	lsl.w	r3, r5, lr
   1285a:	fa07 f70e 	lsl.w	r7, r7, lr
   1285e:	fa20 f804 	lsr.w	r8, r0, r4
   12862:	0c3a      	lsrs	r2, r7, #16
   12864:	fa25 f404 	lsr.w	r4, r5, r4
   12868:	ea48 0803 	orr.w	r8, r8, r3
   1286c:	fbb4 f1f2 	udiv	r1, r4, r2
   12870:	ea4f 4518 	mov.w	r5, r8, lsr #16
   12874:	fb02 4411 	mls	r4, r2, r1, r4
   12878:	fa1f fc87 	uxth.w	ip, r7
   1287c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   12880:	fb01 f30c 	mul.w	r3, r1, ip
   12884:	42ab      	cmp	r3, r5
   12886:	fa00 f40e 	lsl.w	r4, r0, lr
   1288a:	d909      	bls.n	128a0 <__udivmoddi4+0x1bc>
   1288c:	19ed      	adds	r5, r5, r7
   1288e:	f101 30ff 	add.w	r0, r1, #4294967295
   12892:	f080 808a 	bcs.w	129aa <__udivmoddi4+0x2c6>
   12896:	42ab      	cmp	r3, r5
   12898:	f240 8087 	bls.w	129aa <__udivmoddi4+0x2c6>
   1289c:	3902      	subs	r1, #2
   1289e:	443d      	add	r5, r7
   128a0:	1aeb      	subs	r3, r5, r3
   128a2:	fa1f f588 	uxth.w	r5, r8
   128a6:	fbb3 f0f2 	udiv	r0, r3, r2
   128aa:	fb02 3310 	mls	r3, r2, r0, r3
   128ae:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   128b2:	fb00 f30c 	mul.w	r3, r0, ip
   128b6:	42ab      	cmp	r3, r5
   128b8:	d907      	bls.n	128ca <__udivmoddi4+0x1e6>
   128ba:	19ed      	adds	r5, r5, r7
   128bc:	f100 38ff 	add.w	r8, r0, #4294967295
   128c0:	d26f      	bcs.n	129a2 <__udivmoddi4+0x2be>
   128c2:	42ab      	cmp	r3, r5
   128c4:	d96d      	bls.n	129a2 <__udivmoddi4+0x2be>
   128c6:	3802      	subs	r0, #2
   128c8:	443d      	add	r5, r7
   128ca:	1aeb      	subs	r3, r5, r3
   128cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   128d0:	e78f      	b.n	127f2 <__udivmoddi4+0x10e>
   128d2:	f1c1 0720 	rsb	r7, r1, #32
   128d6:	fa22 f807 	lsr.w	r8, r2, r7
   128da:	408b      	lsls	r3, r1
   128dc:	fa05 f401 	lsl.w	r4, r5, r1
   128e0:	ea48 0303 	orr.w	r3, r8, r3
   128e4:	fa20 fe07 	lsr.w	lr, r0, r7
   128e8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   128ec:	40fd      	lsrs	r5, r7
   128ee:	ea4e 0e04 	orr.w	lr, lr, r4
   128f2:	fbb5 f9fc 	udiv	r9, r5, ip
   128f6:	ea4f 441e 	mov.w	r4, lr, lsr #16
   128fa:	fb0c 5519 	mls	r5, ip, r9, r5
   128fe:	fa1f f883 	uxth.w	r8, r3
   12902:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   12906:	fb09 f408 	mul.w	r4, r9, r8
   1290a:	42ac      	cmp	r4, r5
   1290c:	fa02 f201 	lsl.w	r2, r2, r1
   12910:	fa00 fa01 	lsl.w	sl, r0, r1
   12914:	d908      	bls.n	12928 <__udivmoddi4+0x244>
   12916:	18ed      	adds	r5, r5, r3
   12918:	f109 30ff 	add.w	r0, r9, #4294967295
   1291c:	d243      	bcs.n	129a6 <__udivmoddi4+0x2c2>
   1291e:	42ac      	cmp	r4, r5
   12920:	d941      	bls.n	129a6 <__udivmoddi4+0x2c2>
   12922:	f1a9 0902 	sub.w	r9, r9, #2
   12926:	441d      	add	r5, r3
   12928:	1b2d      	subs	r5, r5, r4
   1292a:	fa1f fe8e 	uxth.w	lr, lr
   1292e:	fbb5 f0fc 	udiv	r0, r5, ip
   12932:	fb0c 5510 	mls	r5, ip, r0, r5
   12936:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   1293a:	fb00 f808 	mul.w	r8, r0, r8
   1293e:	45a0      	cmp	r8, r4
   12940:	d907      	bls.n	12952 <__udivmoddi4+0x26e>
   12942:	18e4      	adds	r4, r4, r3
   12944:	f100 35ff 	add.w	r5, r0, #4294967295
   12948:	d229      	bcs.n	1299e <__udivmoddi4+0x2ba>
   1294a:	45a0      	cmp	r8, r4
   1294c:	d927      	bls.n	1299e <__udivmoddi4+0x2ba>
   1294e:	3802      	subs	r0, #2
   12950:	441c      	add	r4, r3
   12952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   12956:	eba4 0408 	sub.w	r4, r4, r8
   1295a:	fba0 8902 	umull	r8, r9, r0, r2
   1295e:	454c      	cmp	r4, r9
   12960:	46c6      	mov	lr, r8
   12962:	464d      	mov	r5, r9
   12964:	d315      	bcc.n	12992 <__udivmoddi4+0x2ae>
   12966:	d012      	beq.n	1298e <__udivmoddi4+0x2aa>
   12968:	b156      	cbz	r6, 12980 <__udivmoddi4+0x29c>
   1296a:	ebba 030e 	subs.w	r3, sl, lr
   1296e:	eb64 0405 	sbc.w	r4, r4, r5
   12972:	fa04 f707 	lsl.w	r7, r4, r7
   12976:	40cb      	lsrs	r3, r1
   12978:	431f      	orrs	r7, r3
   1297a:	40cc      	lsrs	r4, r1
   1297c:	6037      	str	r7, [r6, #0]
   1297e:	6074      	str	r4, [r6, #4]
   12980:	2100      	movs	r1, #0
   12982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12986:	4618      	mov	r0, r3
   12988:	e6f8      	b.n	1277c <__udivmoddi4+0x98>
   1298a:	4690      	mov	r8, r2
   1298c:	e6e0      	b.n	12750 <__udivmoddi4+0x6c>
   1298e:	45c2      	cmp	sl, r8
   12990:	d2ea      	bcs.n	12968 <__udivmoddi4+0x284>
   12992:	ebb8 0e02 	subs.w	lr, r8, r2
   12996:	eb69 0503 	sbc.w	r5, r9, r3
   1299a:	3801      	subs	r0, #1
   1299c:	e7e4      	b.n	12968 <__udivmoddi4+0x284>
   1299e:	4628      	mov	r0, r5
   129a0:	e7d7      	b.n	12952 <__udivmoddi4+0x26e>
   129a2:	4640      	mov	r0, r8
   129a4:	e791      	b.n	128ca <__udivmoddi4+0x1e6>
   129a6:	4681      	mov	r9, r0
   129a8:	e7be      	b.n	12928 <__udivmoddi4+0x244>
   129aa:	4601      	mov	r1, r0
   129ac:	e778      	b.n	128a0 <__udivmoddi4+0x1bc>
   129ae:	3802      	subs	r0, #2
   129b0:	443c      	add	r4, r7
   129b2:	e745      	b.n	12840 <__udivmoddi4+0x15c>
   129b4:	4608      	mov	r0, r1
   129b6:	e708      	b.n	127ca <__udivmoddi4+0xe6>
   129b8:	f1a8 0802 	sub.w	r8, r8, #2
   129bc:	443d      	add	r5, r7
   129be:	e72b      	b.n	12818 <__udivmoddi4+0x134>

000129c0 <selfrel_offset31>:
   129c0:	6803      	ldr	r3, [r0, #0]
   129c2:	005a      	lsls	r2, r3, #1
   129c4:	bf4c      	ite	mi
   129c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   129ca:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   129ce:	4418      	add	r0, r3
   129d0:	4770      	bx	lr
   129d2:	bf00      	nop

000129d4 <search_EIT_table>:
   129d4:	b361      	cbz	r1, 12a30 <search_EIT_table+0x5c>
   129d6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129da:	f101 3aff 	add.w	sl, r1, #4294967295
   129de:	4690      	mov	r8, r2
   129e0:	4606      	mov	r6, r0
   129e2:	46d1      	mov	r9, sl
   129e4:	2700      	movs	r7, #0
   129e6:	eb07 0409 	add.w	r4, r7, r9
   129ea:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   129ee:	1064      	asrs	r4, r4, #1
   129f0:	00e5      	lsls	r5, r4, #3
   129f2:	1971      	adds	r1, r6, r5
   129f4:	4608      	mov	r0, r1
   129f6:	f7ff ffe3 	bl	129c0 <selfrel_offset31>
   129fa:	45a2      	cmp	sl, r4
   129fc:	4683      	mov	fp, r0
   129fe:	f105 0008 	add.w	r0, r5, #8
   12a02:	4430      	add	r0, r6
   12a04:	d009      	beq.n	12a1a <search_EIT_table+0x46>
   12a06:	f7ff ffdb 	bl	129c0 <selfrel_offset31>
   12a0a:	45c3      	cmp	fp, r8
   12a0c:	f100 30ff 	add.w	r0, r0, #4294967295
   12a10:	d805      	bhi.n	12a1e <search_EIT_table+0x4a>
   12a12:	4540      	cmp	r0, r8
   12a14:	d209      	bcs.n	12a2a <search_EIT_table+0x56>
   12a16:	1c67      	adds	r7, r4, #1
   12a18:	e7e5      	b.n	129e6 <search_EIT_table+0x12>
   12a1a:	45c3      	cmp	fp, r8
   12a1c:	d905      	bls.n	12a2a <search_EIT_table+0x56>
   12a1e:	42a7      	cmp	r7, r4
   12a20:	d002      	beq.n	12a28 <search_EIT_table+0x54>
   12a22:	f104 39ff 	add.w	r9, r4, #4294967295
   12a26:	e7de      	b.n	129e6 <search_EIT_table+0x12>
   12a28:	2100      	movs	r1, #0
   12a2a:	4608      	mov	r0, r1
   12a2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a30:	4608      	mov	r0, r1
   12a32:	4770      	bx	lr

00012a34 <__gnu_unwind_get_pr_addr>:
   12a34:	2801      	cmp	r0, #1
   12a36:	d007      	beq.n	12a48 <__gnu_unwind_get_pr_addr+0x14>
   12a38:	2802      	cmp	r0, #2
   12a3a:	d007      	beq.n	12a4c <__gnu_unwind_get_pr_addr+0x18>
   12a3c:	4b04      	ldr	r3, [pc, #16]	; (12a50 <__gnu_unwind_get_pr_addr+0x1c>)
   12a3e:	2800      	cmp	r0, #0
   12a40:	bf0c      	ite	eq
   12a42:	4618      	moveq	r0, r3
   12a44:	2000      	movne	r0, #0
   12a46:	4770      	bx	lr
   12a48:	4802      	ldr	r0, [pc, #8]	; (12a54 <__gnu_unwind_get_pr_addr+0x20>)
   12a4a:	4770      	bx	lr
   12a4c:	4802      	ldr	r0, [pc, #8]	; (12a58 <__gnu_unwind_get_pr_addr+0x24>)
   12a4e:	4770      	bx	lr
   12a50:	00013139 	.word	0x00013139
   12a54:	0001313d 	.word	0x0001313d
   12a58:	00013141 	.word	0x00013141

00012a5c <get_eit_entry>:
   12a5c:	b530      	push	{r4, r5, lr}
   12a5e:	4b24      	ldr	r3, [pc, #144]	; (12af0 <get_eit_entry+0x94>)
   12a60:	b083      	sub	sp, #12
   12a62:	4604      	mov	r4, r0
   12a64:	1e8d      	subs	r5, r1, #2
   12a66:	b37b      	cbz	r3, 12ac8 <get_eit_entry+0x6c>
   12a68:	a901      	add	r1, sp, #4
   12a6a:	4628      	mov	r0, r5
   12a6c:	f3af 8000 	nop.w
   12a70:	b320      	cbz	r0, 12abc <get_eit_entry+0x60>
   12a72:	9901      	ldr	r1, [sp, #4]
   12a74:	462a      	mov	r2, r5
   12a76:	f7ff ffad 	bl	129d4 <search_EIT_table>
   12a7a:	4601      	mov	r1, r0
   12a7c:	b1f0      	cbz	r0, 12abc <get_eit_entry+0x60>
   12a7e:	f7ff ff9f 	bl	129c0 <selfrel_offset31>
   12a82:	684b      	ldr	r3, [r1, #4]
   12a84:	64a0      	str	r0, [r4, #72]	; 0x48
   12a86:	2b01      	cmp	r3, #1
   12a88:	d012      	beq.n	12ab0 <get_eit_entry+0x54>
   12a8a:	2b00      	cmp	r3, #0
   12a8c:	f101 0004 	add.w	r0, r1, #4
   12a90:	db20      	blt.n	12ad4 <get_eit_entry+0x78>
   12a92:	f7ff ff95 	bl	129c0 <selfrel_offset31>
   12a96:	2300      	movs	r3, #0
   12a98:	64e0      	str	r0, [r4, #76]	; 0x4c
   12a9a:	6523      	str	r3, [r4, #80]	; 0x50
   12a9c:	6803      	ldr	r3, [r0, #0]
   12a9e:	2b00      	cmp	r3, #0
   12aa0:	db1c      	blt.n	12adc <get_eit_entry+0x80>
   12aa2:	f7ff ff8d 	bl	129c0 <selfrel_offset31>
   12aa6:	2300      	movs	r3, #0
   12aa8:	6120      	str	r0, [r4, #16]
   12aaa:	4618      	mov	r0, r3
   12aac:	b003      	add	sp, #12
   12aae:	bd30      	pop	{r4, r5, pc}
   12ab0:	2300      	movs	r3, #0
   12ab2:	6123      	str	r3, [r4, #16]
   12ab4:	2305      	movs	r3, #5
   12ab6:	4618      	mov	r0, r3
   12ab8:	b003      	add	sp, #12
   12aba:	bd30      	pop	{r4, r5, pc}
   12abc:	2300      	movs	r3, #0
   12abe:	6123      	str	r3, [r4, #16]
   12ac0:	2309      	movs	r3, #9
   12ac2:	4618      	mov	r0, r3
   12ac4:	b003      	add	sp, #12
   12ac6:	bd30      	pop	{r4, r5, pc}
   12ac8:	490a      	ldr	r1, [pc, #40]	; (12af4 <get_eit_entry+0x98>)
   12aca:	480b      	ldr	r0, [pc, #44]	; (12af8 <get_eit_entry+0x9c>)
   12acc:	1a09      	subs	r1, r1, r0
   12ace:	10c9      	asrs	r1, r1, #3
   12ad0:	9101      	str	r1, [sp, #4]
   12ad2:	e7cf      	b.n	12a74 <get_eit_entry+0x18>
   12ad4:	2301      	movs	r3, #1
   12ad6:	64e0      	str	r0, [r4, #76]	; 0x4c
   12ad8:	6523      	str	r3, [r4, #80]	; 0x50
   12ada:	e7df      	b.n	12a9c <get_eit_entry+0x40>
   12adc:	f3c3 6003 	ubfx	r0, r3, #24, #4
   12ae0:	f7ff ffa8 	bl	12a34 <__gnu_unwind_get_pr_addr>
   12ae4:	2800      	cmp	r0, #0
   12ae6:	6120      	str	r0, [r4, #16]
   12ae8:	bf14      	ite	ne
   12aea:	2300      	movne	r3, #0
   12aec:	2309      	moveq	r3, #9
   12aee:	e7dc      	b.n	12aaa <get_eit_entry+0x4e>
   12af0:	00000000 	.word	0x00000000
   12af4:	00024210 	.word	0x00024210
   12af8:	00023fd8 	.word	0x00023fd8

00012afc <restore_non_core_regs>:
   12afc:	6803      	ldr	r3, [r0, #0]
   12afe:	07da      	lsls	r2, r3, #31
   12b00:	b510      	push	{r4, lr}
   12b02:	4604      	mov	r4, r0
   12b04:	d406      	bmi.n	12b14 <restore_non_core_regs+0x18>
   12b06:	079b      	lsls	r3, r3, #30
   12b08:	f100 0048 	add.w	r0, r0, #72	; 0x48
   12b0c:	d509      	bpl.n	12b22 <restore_non_core_regs+0x26>
   12b0e:	f000 fc51 	bl	133b4 <__gnu_Unwind_Restore_VFP_D>
   12b12:	6823      	ldr	r3, [r4, #0]
   12b14:	0759      	lsls	r1, r3, #29
   12b16:	d509      	bpl.n	12b2c <restore_non_core_regs+0x30>
   12b18:	071a      	lsls	r2, r3, #28
   12b1a:	d50e      	bpl.n	12b3a <restore_non_core_regs+0x3e>
   12b1c:	06db      	lsls	r3, r3, #27
   12b1e:	d513      	bpl.n	12b48 <restore_non_core_regs+0x4c>
   12b20:	bd10      	pop	{r4, pc}
   12b22:	f000 fc3f 	bl	133a4 <__gnu_Unwind_Restore_VFP>
   12b26:	6823      	ldr	r3, [r4, #0]
   12b28:	0759      	lsls	r1, r3, #29
   12b2a:	d4f5      	bmi.n	12b18 <restore_non_core_regs+0x1c>
   12b2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   12b30:	f000 fc48 	bl	133c4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   12b34:	6823      	ldr	r3, [r4, #0]
   12b36:	071a      	lsls	r2, r3, #28
   12b38:	d4f0      	bmi.n	12b1c <restore_non_core_regs+0x20>
   12b3a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   12b3e:	f000 fc49 	bl	133d4 <__gnu_Unwind_Restore_WMMXD>
   12b42:	6823      	ldr	r3, [r4, #0]
   12b44:	06db      	lsls	r3, r3, #27
   12b46:	d4eb      	bmi.n	12b20 <restore_non_core_regs+0x24>
   12b48:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   12b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12b50:	f000 bc84 	b.w	1345c <__gnu_Unwind_Restore_WMMXC>

00012b54 <_Unwind_decode_typeinfo_ptr.isra.0>:
   12b54:	6803      	ldr	r3, [r0, #0]
   12b56:	b103      	cbz	r3, 12b5a <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
   12b58:	4403      	add	r3, r0
   12b5a:	4618      	mov	r0, r3
   12b5c:	4770      	bx	lr
   12b5e:	bf00      	nop

00012b60 <__gnu_unwind_24bit.isra.1>:
   12b60:	2009      	movs	r0, #9
   12b62:	4770      	bx	lr

00012b64 <_Unwind_DebugHook>:
   12b64:	4770      	bx	lr
   12b66:	bf00      	nop

00012b68 <unwind_phase2>:
   12b68:	b570      	push	{r4, r5, r6, lr}
   12b6a:	4604      	mov	r4, r0
   12b6c:	460d      	mov	r5, r1
   12b6e:	e008      	b.n	12b82 <unwind_phase2+0x1a>
   12b70:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   12b72:	6163      	str	r3, [r4, #20]
   12b74:	462a      	mov	r2, r5
   12b76:	6923      	ldr	r3, [r4, #16]
   12b78:	4621      	mov	r1, r4
   12b7a:	2001      	movs	r0, #1
   12b7c:	4798      	blx	r3
   12b7e:	2808      	cmp	r0, #8
   12b80:	d108      	bne.n	12b94 <unwind_phase2+0x2c>
   12b82:	6c29      	ldr	r1, [r5, #64]	; 0x40
   12b84:	4620      	mov	r0, r4
   12b86:	f7ff ff69 	bl	12a5c <get_eit_entry>
   12b8a:	4606      	mov	r6, r0
   12b8c:	2800      	cmp	r0, #0
   12b8e:	d0ef      	beq.n	12b70 <unwind_phase2+0x8>
   12b90:	f000 fe94 	bl	138bc <abort>
   12b94:	2807      	cmp	r0, #7
   12b96:	d1fb      	bne.n	12b90 <unwind_phase2+0x28>
   12b98:	4630      	mov	r0, r6
   12b9a:	6c29      	ldr	r1, [r5, #64]	; 0x40
   12b9c:	f7ff ffe2 	bl	12b64 <_Unwind_DebugHook>
   12ba0:	1d28      	adds	r0, r5, #4
   12ba2:	f000 fbf3 	bl	1338c <__restore_core_regs>
   12ba6:	bf00      	nop

00012ba8 <unwind_phase2_forced>:
   12ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12bac:	1d0c      	adds	r4, r1, #4
   12bae:	4605      	mov	r5, r0
   12bb0:	4692      	mov	sl, r2
   12bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   12bb4:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   12bb8:	ae03      	add	r6, sp, #12
   12bba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   12bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   12bbe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   12bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   12bc2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   12bc4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   12bc8:	ac02      	add	r4, sp, #8
   12bca:	f8d5 800c 	ldr.w	r8, [r5, #12]
   12bce:	f8d5 9018 	ldr.w	r9, [r5, #24]
   12bd2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   12bd6:	2300      	movs	r3, #0
   12bd8:	4628      	mov	r0, r5
   12bda:	6c21      	ldr	r1, [r4, #64]	; 0x40
   12bdc:	6023      	str	r3, [r4, #0]
   12bde:	f7ff ff3d 	bl	12a5c <get_eit_entry>
   12be2:	f1ba 0f00 	cmp.w	sl, #0
   12be6:	4607      	mov	r7, r0
   12be8:	bf14      	ite	ne
   12bea:	260a      	movne	r6, #10
   12bec:	2609      	moveq	r6, #9
   12bee:	b17f      	cbz	r7, 12c10 <unwind_phase2_forced+0x68>
   12bf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12bf2:	f046 0110 	orr.w	r1, r6, #16
   12bf6:	e88d 0210 	stmia.w	sp, {r4, r9}
   12bfa:	462a      	mov	r2, r5
   12bfc:	6463      	str	r3, [r4, #68]	; 0x44
   12bfe:	2001      	movs	r0, #1
   12c00:	462b      	mov	r3, r5
   12c02:	47c0      	blx	r8
   12c04:	bb78      	cbnz	r0, 12c66 <unwind_phase2_forced+0xbe>
   12c06:	4638      	mov	r0, r7
   12c08:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   12c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12c10:	6c23      	ldr	r3, [r4, #64]	; 0x40
   12c12:	616b      	str	r3, [r5, #20]
   12c14:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   12c18:	4621      	mov	r1, r4
   12c1a:	a87a      	add	r0, sp, #488	; 0x1e8
   12c1c:	f001 fd10 	bl	14640 <memcpy>
   12c20:	692b      	ldr	r3, [r5, #16]
   12c22:	aa7a      	add	r2, sp, #488	; 0x1e8
   12c24:	4629      	mov	r1, r5
   12c26:	4630      	mov	r0, r6
   12c28:	4798      	blx	r3
   12c2a:	9b88      	ldr	r3, [sp, #544]	; 0x220
   12c2c:	4682      	mov	sl, r0
   12c2e:	e88d 0210 	stmia.w	sp, {r4, r9}
   12c32:	4631      	mov	r1, r6
   12c34:	6463      	str	r3, [r4, #68]	; 0x44
   12c36:	462a      	mov	r2, r5
   12c38:	462b      	mov	r3, r5
   12c3a:	2001      	movs	r0, #1
   12c3c:	47c0      	blx	r8
   12c3e:	b990      	cbnz	r0, 12c66 <unwind_phase2_forced+0xbe>
   12c40:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   12c44:	a97a      	add	r1, sp, #488	; 0x1e8
   12c46:	4620      	mov	r0, r4
   12c48:	f001 fcfa 	bl	14640 <memcpy>
   12c4c:	f1ba 0f08 	cmp.w	sl, #8
   12c50:	d106      	bne.n	12c60 <unwind_phase2_forced+0xb8>
   12c52:	6c21      	ldr	r1, [r4, #64]	; 0x40
   12c54:	4628      	mov	r0, r5
   12c56:	f7ff ff01 	bl	12a5c <get_eit_entry>
   12c5a:	2609      	movs	r6, #9
   12c5c:	4607      	mov	r7, r0
   12c5e:	e7c6      	b.n	12bee <unwind_phase2_forced+0x46>
   12c60:	f1ba 0f07 	cmp.w	sl, #7
   12c64:	d005      	beq.n	12c72 <unwind_phase2_forced+0xca>
   12c66:	2709      	movs	r7, #9
   12c68:	4638      	mov	r0, r7
   12c6a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   12c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12c72:	4638      	mov	r0, r7
   12c74:	6c21      	ldr	r1, [r4, #64]	; 0x40
   12c76:	f7ff ff75 	bl	12b64 <_Unwind_DebugHook>
   12c7a:	a803      	add	r0, sp, #12
   12c7c:	f000 fb86 	bl	1338c <__restore_core_regs>

00012c80 <_Unwind_GetCFA>:
   12c80:	6c40      	ldr	r0, [r0, #68]	; 0x44
   12c82:	4770      	bx	lr

00012c84 <__gnu_Unwind_RaiseException>:
   12c84:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c86:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   12c88:	640b      	str	r3, [r1, #64]	; 0x40
   12c8a:	1d0e      	adds	r6, r1, #4
   12c8c:	460f      	mov	r7, r1
   12c8e:	4604      	mov	r4, r0
   12c90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   12c92:	b0f9      	sub	sp, #484	; 0x1e4
   12c94:	ad01      	add	r5, sp, #4
   12c96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12c98:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   12c9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12c9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   12c9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12ca0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   12ca4:	f04f 36ff 	mov.w	r6, #4294967295
   12ca8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   12cac:	9600      	str	r6, [sp, #0]
   12cae:	e006      	b.n	12cbe <__gnu_Unwind_RaiseException+0x3a>
   12cb0:	6923      	ldr	r3, [r4, #16]
   12cb2:	466a      	mov	r2, sp
   12cb4:	4621      	mov	r1, r4
   12cb6:	4798      	blx	r3
   12cb8:	2808      	cmp	r0, #8
   12cba:	4605      	mov	r5, r0
   12cbc:	d108      	bne.n	12cd0 <__gnu_Unwind_RaiseException+0x4c>
   12cbe:	9910      	ldr	r1, [sp, #64]	; 0x40
   12cc0:	4620      	mov	r0, r4
   12cc2:	f7ff fecb 	bl	12a5c <get_eit_entry>
   12cc6:	2800      	cmp	r0, #0
   12cc8:	d0f2      	beq.n	12cb0 <__gnu_Unwind_RaiseException+0x2c>
   12cca:	2009      	movs	r0, #9
   12ccc:	b079      	add	sp, #484	; 0x1e4
   12cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12cd0:	4668      	mov	r0, sp
   12cd2:	f7ff ff13 	bl	12afc <restore_non_core_regs>
   12cd6:	2d06      	cmp	r5, #6
   12cd8:	d1f7      	bne.n	12cca <__gnu_Unwind_RaiseException+0x46>
   12cda:	4639      	mov	r1, r7
   12cdc:	4620      	mov	r0, r4
   12cde:	f7ff ff43 	bl	12b68 <unwind_phase2>
   12ce2:	bf00      	nop

00012ce4 <__gnu_Unwind_ForcedUnwind>:
   12ce4:	b430      	push	{r4, r5}
   12ce6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   12ce8:	60c1      	str	r1, [r0, #12]
   12cea:	6182      	str	r2, [r0, #24]
   12cec:	4619      	mov	r1, r3
   12cee:	641d      	str	r5, [r3, #64]	; 0x40
   12cf0:	2200      	movs	r2, #0
   12cf2:	bc30      	pop	{r4, r5}
   12cf4:	e758      	b.n	12ba8 <unwind_phase2_forced>
   12cf6:	bf00      	nop

00012cf8 <__gnu_Unwind_Resume>:
   12cf8:	b570      	push	{r4, r5, r6, lr}
   12cfa:	68c6      	ldr	r6, [r0, #12]
   12cfc:	6943      	ldr	r3, [r0, #20]
   12cfe:	640b      	str	r3, [r1, #64]	; 0x40
   12d00:	b126      	cbz	r6, 12d0c <__gnu_Unwind_Resume+0x14>
   12d02:	2201      	movs	r2, #1
   12d04:	f7ff ff50 	bl	12ba8 <unwind_phase2_forced>
   12d08:	f000 fdd8 	bl	138bc <abort>
   12d0c:	6903      	ldr	r3, [r0, #16]
   12d0e:	460a      	mov	r2, r1
   12d10:	4604      	mov	r4, r0
   12d12:	460d      	mov	r5, r1
   12d14:	4601      	mov	r1, r0
   12d16:	2002      	movs	r0, #2
   12d18:	4798      	blx	r3
   12d1a:	2807      	cmp	r0, #7
   12d1c:	d007      	beq.n	12d2e <__gnu_Unwind_Resume+0x36>
   12d1e:	2808      	cmp	r0, #8
   12d20:	d103      	bne.n	12d2a <__gnu_Unwind_Resume+0x32>
   12d22:	4629      	mov	r1, r5
   12d24:	4620      	mov	r0, r4
   12d26:	f7ff ff1f 	bl	12b68 <unwind_phase2>
   12d2a:	f000 fdc7 	bl	138bc <abort>
   12d2e:	4630      	mov	r0, r6
   12d30:	6c29      	ldr	r1, [r5, #64]	; 0x40
   12d32:	f7ff ff17 	bl	12b64 <_Unwind_DebugHook>
   12d36:	1d28      	adds	r0, r5, #4
   12d38:	f000 fb28 	bl	1338c <__restore_core_regs>

00012d3c <__gnu_Unwind_Resume_or_Rethrow>:
   12d3c:	68c2      	ldr	r2, [r0, #12]
   12d3e:	b11a      	cbz	r2, 12d48 <__gnu_Unwind_Resume_or_Rethrow+0xc>
   12d40:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   12d42:	640a      	str	r2, [r1, #64]	; 0x40
   12d44:	2200      	movs	r2, #0
   12d46:	e72f      	b.n	12ba8 <unwind_phase2_forced>
   12d48:	e79c      	b.n	12c84 <__gnu_Unwind_RaiseException>
   12d4a:	bf00      	nop

00012d4c <_Unwind_Complete>:
   12d4c:	4770      	bx	lr
   12d4e:	bf00      	nop

00012d50 <_Unwind_DeleteException>:
   12d50:	6883      	ldr	r3, [r0, #8]
   12d52:	b113      	cbz	r3, 12d5a <_Unwind_DeleteException+0xa>
   12d54:	4601      	mov	r1, r0
   12d56:	2001      	movs	r0, #1
   12d58:	4718      	bx	r3
   12d5a:	4770      	bx	lr

00012d5c <_Unwind_VRS_Get>:
   12d5c:	b500      	push	{lr}
   12d5e:	2904      	cmp	r1, #4
   12d60:	d807      	bhi.n	12d72 <_Unwind_VRS_Get+0x16>
   12d62:	e8df f001 	tbb	[pc, r1]
   12d66:	0903      	.short	0x0903
   12d68:	0906      	.short	0x0906
   12d6a:	09          	.byte	0x09
   12d6b:	00          	.byte	0x00
   12d6c:	b90b      	cbnz	r3, 12d72 <_Unwind_VRS_Get+0x16>
   12d6e:	2a0f      	cmp	r2, #15
   12d70:	d905      	bls.n	12d7e <_Unwind_VRS_Get+0x22>
   12d72:	2002      	movs	r0, #2
   12d74:	f85d fb04 	ldr.w	pc, [sp], #4
   12d78:	2001      	movs	r0, #1
   12d7a:	f85d fb04 	ldr.w	pc, [sp], #4
   12d7e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   12d82:	4618      	mov	r0, r3
   12d84:	6853      	ldr	r3, [r2, #4]
   12d86:	9a01      	ldr	r2, [sp, #4]
   12d88:	6013      	str	r3, [r2, #0]
   12d8a:	f85d fb04 	ldr.w	pc, [sp], #4
   12d8e:	bf00      	nop

00012d90 <_Unwind_GetGR>:
   12d90:	b510      	push	{r4, lr}
   12d92:	b084      	sub	sp, #16
   12d94:	2300      	movs	r3, #0
   12d96:	ac03      	add	r4, sp, #12
   12d98:	460a      	mov	r2, r1
   12d9a:	9400      	str	r4, [sp, #0]
   12d9c:	4619      	mov	r1, r3
   12d9e:	f7ff ffdd 	bl	12d5c <_Unwind_VRS_Get>
   12da2:	9803      	ldr	r0, [sp, #12]
   12da4:	b004      	add	sp, #16
   12da6:	bd10      	pop	{r4, pc}

00012da8 <_Unwind_VRS_Set>:
   12da8:	b500      	push	{lr}
   12daa:	2904      	cmp	r1, #4
   12dac:	d807      	bhi.n	12dbe <_Unwind_VRS_Set+0x16>
   12dae:	e8df f001 	tbb	[pc, r1]
   12db2:	0903      	.short	0x0903
   12db4:	0906      	.short	0x0906
   12db6:	09          	.byte	0x09
   12db7:	00          	.byte	0x00
   12db8:	b90b      	cbnz	r3, 12dbe <_Unwind_VRS_Set+0x16>
   12dba:	2a0f      	cmp	r2, #15
   12dbc:	d905      	bls.n	12dca <_Unwind_VRS_Set+0x22>
   12dbe:	2002      	movs	r0, #2
   12dc0:	f85d fb04 	ldr.w	pc, [sp], #4
   12dc4:	2001      	movs	r0, #1
   12dc6:	f85d fb04 	ldr.w	pc, [sp], #4
   12dca:	9901      	ldr	r1, [sp, #4]
   12dcc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   12dd0:	6809      	ldr	r1, [r1, #0]
   12dd2:	6051      	str	r1, [r2, #4]
   12dd4:	4618      	mov	r0, r3
   12dd6:	f85d fb04 	ldr.w	pc, [sp], #4
   12dda:	bf00      	nop

00012ddc <_Unwind_SetGR>:
   12ddc:	b510      	push	{r4, lr}
   12dde:	b084      	sub	sp, #16
   12de0:	ac04      	add	r4, sp, #16
   12de2:	2300      	movs	r3, #0
   12de4:	f844 2d04 	str.w	r2, [r4, #-4]!
   12de8:	460a      	mov	r2, r1
   12dea:	9400      	str	r4, [sp, #0]
   12dec:	4619      	mov	r1, r3
   12dee:	f7ff ffdb 	bl	12da8 <_Unwind_VRS_Set>
   12df2:	b004      	add	sp, #16
   12df4:	bd10      	pop	{r4, pc}
   12df6:	bf00      	nop

00012df8 <__gnu_Unwind_Backtrace>:
   12df8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12dfa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   12dfc:	6413      	str	r3, [r2, #64]	; 0x40
   12dfe:	1d15      	adds	r5, r2, #4
   12e00:	4607      	mov	r7, r0
   12e02:	460e      	mov	r6, r1
   12e04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12e06:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   12e0a:	ac17      	add	r4, sp, #92	; 0x5c
   12e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12e12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12e16:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   12e1a:	f04f 35ff 	mov.w	r5, #4294967295
   12e1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   12e22:	9516      	str	r5, [sp, #88]	; 0x58
   12e24:	e010      	b.n	12e48 <__gnu_Unwind_Backtrace+0x50>
   12e26:	a816      	add	r0, sp, #88	; 0x58
   12e28:	f7ff ffd8 	bl	12ddc <_Unwind_SetGR>
   12e2c:	4631      	mov	r1, r6
   12e2e:	a816      	add	r0, sp, #88	; 0x58
   12e30:	47b8      	blx	r7
   12e32:	aa16      	add	r2, sp, #88	; 0x58
   12e34:	4669      	mov	r1, sp
   12e36:	b978      	cbnz	r0, 12e58 <__gnu_Unwind_Backtrace+0x60>
   12e38:	9b04      	ldr	r3, [sp, #16]
   12e3a:	2008      	movs	r0, #8
   12e3c:	4798      	blx	r3
   12e3e:	2805      	cmp	r0, #5
   12e40:	4604      	mov	r4, r0
   12e42:	d00a      	beq.n	12e5a <__gnu_Unwind_Backtrace+0x62>
   12e44:	2809      	cmp	r0, #9
   12e46:	d007      	beq.n	12e58 <__gnu_Unwind_Backtrace+0x60>
   12e48:	9926      	ldr	r1, [sp, #152]	; 0x98
   12e4a:	4668      	mov	r0, sp
   12e4c:	f7ff fe06 	bl	12a5c <get_eit_entry>
   12e50:	466a      	mov	r2, sp
   12e52:	210c      	movs	r1, #12
   12e54:	2800      	cmp	r0, #0
   12e56:	d0e6      	beq.n	12e26 <__gnu_Unwind_Backtrace+0x2e>
   12e58:	2409      	movs	r4, #9
   12e5a:	a816      	add	r0, sp, #88	; 0x58
   12e5c:	f7ff fe4e 	bl	12afc <restore_non_core_regs>
   12e60:	4620      	mov	r0, r4
   12e62:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   12e66:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012e68 <__gnu_unwind_pr_common>:
   12e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e6c:	460d      	mov	r5, r1
   12e6e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
   12e70:	b08b      	sub	sp, #44	; 0x2c
   12e72:	1d0c      	adds	r4, r1, #4
   12e74:	6809      	ldr	r1, [r1, #0]
   12e76:	9107      	str	r1, [sp, #28]
   12e78:	4691      	mov	r9, r2
   12e7a:	9408      	str	r4, [sp, #32]
   12e7c:	f000 0b03 	and.w	fp, r0, #3
   12e80:	461e      	mov	r6, r3
   12e82:	2b00      	cmp	r3, #0
   12e84:	d160      	bne.n	12f48 <__gnu_unwind_pr_common+0xe0>
   12e86:	0209      	lsls	r1, r1, #8
   12e88:	2303      	movs	r3, #3
   12e8a:	9107      	str	r1, [sp, #28]
   12e8c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
   12e90:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   12e94:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   12e96:	f1bb 0f02 	cmp.w	fp, #2
   12e9a:	bf08      	it	eq
   12e9c:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   12e9e:	f013 0301 	ands.w	r3, r3, #1
   12ea2:	d140      	bne.n	12f26 <__gnu_unwind_pr_common+0xbe>
   12ea4:	9301      	str	r3, [sp, #4]
   12ea6:	f000 0308 	and.w	r3, r0, #8
   12eaa:	9303      	str	r3, [sp, #12]
   12eac:	f8d4 8000 	ldr.w	r8, [r4]
   12eb0:	f1b8 0f00 	cmp.w	r8, #0
   12eb4:	d039      	beq.n	12f2a <__gnu_unwind_pr_common+0xc2>
   12eb6:	2e02      	cmp	r6, #2
   12eb8:	d043      	beq.n	12f42 <__gnu_unwind_pr_common+0xda>
   12eba:	f8b4 8000 	ldrh.w	r8, [r4]
   12ebe:	8867      	ldrh	r7, [r4, #2]
   12ec0:	3404      	adds	r4, #4
   12ec2:	6cab      	ldr	r3, [r5, #72]	; 0x48
   12ec4:	f027 0a01 	bic.w	sl, r7, #1
   12ec8:	210f      	movs	r1, #15
   12eca:	4648      	mov	r0, r9
   12ecc:	449a      	add	sl, r3
   12ece:	f7ff ff5f 	bl	12d90 <_Unwind_GetGR>
   12ed2:	4582      	cmp	sl, r0
   12ed4:	d833      	bhi.n	12f3e <__gnu_unwind_pr_common+0xd6>
   12ed6:	f028 0301 	bic.w	r3, r8, #1
   12eda:	449a      	add	sl, r3
   12edc:	4550      	cmp	r0, sl
   12ede:	bf2c      	ite	cs
   12ee0:	2000      	movcs	r0, #0
   12ee2:	2001      	movcc	r0, #1
   12ee4:	007f      	lsls	r7, r7, #1
   12ee6:	f007 0702 	and.w	r7, r7, #2
   12eea:	f008 0801 	and.w	r8, r8, #1
   12eee:	ea47 0708 	orr.w	r7, r7, r8
   12ef2:	2f01      	cmp	r7, #1
   12ef4:	d03e      	beq.n	12f74 <__gnu_unwind_pr_common+0x10c>
   12ef6:	d335      	bcc.n	12f64 <__gnu_unwind_pr_common+0xfc>
   12ef8:	2f02      	cmp	r7, #2
   12efa:	d11c      	bne.n	12f36 <__gnu_unwind_pr_common+0xce>
   12efc:	6823      	ldr	r3, [r4, #0]
   12efe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   12f02:	9202      	str	r2, [sp, #8]
   12f04:	f1bb 0f00 	cmp.w	fp, #0
   12f08:	d176      	bne.n	12ff8 <__gnu_unwind_pr_common+0x190>
   12f0a:	b128      	cbz	r0, 12f18 <__gnu_unwind_pr_common+0xb0>
   12f0c:	9903      	ldr	r1, [sp, #12]
   12f0e:	2900      	cmp	r1, #0
   12f10:	d07e      	beq.n	13010 <__gnu_unwind_pr_common+0x1a8>
   12f12:	2a00      	cmp	r2, #0
   12f14:	f000 80a6 	beq.w	13064 <__gnu_unwind_pr_common+0x1fc>
   12f18:	2b00      	cmp	r3, #0
   12f1a:	db77      	blt.n	1300c <__gnu_unwind_pr_common+0x1a4>
   12f1c:	9b02      	ldr	r3, [sp, #8]
   12f1e:	3301      	adds	r3, #1
   12f20:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   12f24:	e7c2      	b.n	12eac <__gnu_unwind_pr_common+0x44>
   12f26:	2300      	movs	r3, #0
   12f28:	9301      	str	r3, [sp, #4]
   12f2a:	2e02      	cmp	r6, #2
   12f2c:	dd3e      	ble.n	12fac <__gnu_unwind_pr_common+0x144>
   12f2e:	f7ff fe17 	bl	12b60 <__gnu_unwind_24bit.isra.1>
   12f32:	2800      	cmp	r0, #0
   12f34:	d040      	beq.n	12fb8 <__gnu_unwind_pr_common+0x150>
   12f36:	2009      	movs	r0, #9
   12f38:	b00b      	add	sp, #44	; 0x2c
   12f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f3e:	2000      	movs	r0, #0
   12f40:	e7d0      	b.n	12ee4 <__gnu_unwind_pr_common+0x7c>
   12f42:	6867      	ldr	r7, [r4, #4]
   12f44:	3408      	adds	r4, #8
   12f46:	e7bc      	b.n	12ec2 <__gnu_unwind_pr_common+0x5a>
   12f48:	2b02      	cmp	r3, #2
   12f4a:	dca3      	bgt.n	12e94 <__gnu_unwind_pr_common+0x2c>
   12f4c:	0c0b      	lsrs	r3, r1, #16
   12f4e:	b2da      	uxtb	r2, r3
   12f50:	0409      	lsls	r1, r1, #16
   12f52:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   12f56:	2302      	movs	r3, #2
   12f58:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   12f5c:	9107      	str	r1, [sp, #28]
   12f5e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   12f62:	e797      	b.n	12e94 <__gnu_unwind_pr_common+0x2c>
   12f64:	f1bb 0f00 	cmp.w	fp, #0
   12f68:	d002      	beq.n	12f70 <__gnu_unwind_pr_common+0x108>
   12f6a:	2800      	cmp	r0, #0
   12f6c:	f040 80bd 	bne.w	130ea <__gnu_unwind_pr_common+0x282>
   12f70:	3404      	adds	r4, #4
   12f72:	e79b      	b.n	12eac <__gnu_unwind_pr_common+0x44>
   12f74:	f1bb 0f00 	cmp.w	fp, #0
   12f78:	d125      	bne.n	12fc6 <__gnu_unwind_pr_common+0x15e>
   12f7a:	b1a8      	cbz	r0, 12fa8 <__gnu_unwind_pr_common+0x140>
   12f7c:	e894 000c 	ldmia.w	r4, {r2, r3}
   12f80:	1c99      	adds	r1, r3, #2
   12f82:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   12f86:	d0d6      	beq.n	12f36 <__gnu_unwind_pr_common+0xce>
   12f88:	f105 0158 	add.w	r1, r5, #88	; 0x58
   12f8c:	3301      	adds	r3, #1
   12f8e:	9106      	str	r1, [sp, #24]
   12f90:	f000 80a3 	beq.w	130da <__gnu_unwind_pr_common+0x272>
   12f94:	1d20      	adds	r0, r4, #4
   12f96:	f7ff fddd 	bl	12b54 <_Unwind_decode_typeinfo_ptr.isra.0>
   12f9a:	ab06      	add	r3, sp, #24
   12f9c:	4601      	mov	r1, r0
   12f9e:	4628      	mov	r0, r5
   12fa0:	f7f6 fd76 	bl	9a90 <__cxa_type_match>
   12fa4:	2800      	cmp	r0, #0
   12fa6:	d177      	bne.n	13098 <__gnu_unwind_pr_common+0x230>
   12fa8:	3408      	adds	r4, #8
   12faa:	e77f      	b.n	12eac <__gnu_unwind_pr_common+0x44>
   12fac:	a907      	add	r1, sp, #28
   12fae:	4648      	mov	r0, r9
   12fb0:	f000 faee 	bl	13590 <__gnu_unwind_execute>
   12fb4:	2800      	cmp	r0, #0
   12fb6:	d1be      	bne.n	12f36 <__gnu_unwind_pr_common+0xce>
   12fb8:	9b01      	ldr	r3, [sp, #4]
   12fba:	2b00      	cmp	r3, #0
   12fbc:	d15c      	bne.n	13078 <__gnu_unwind_pr_common+0x210>
   12fbe:	2008      	movs	r0, #8
   12fc0:	b00b      	add	sp, #44	; 0x2c
   12fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fc6:	210d      	movs	r1, #13
   12fc8:	4648      	mov	r0, r9
   12fca:	6a2f      	ldr	r7, [r5, #32]
   12fcc:	f7ff fee0 	bl	12d90 <_Unwind_GetGR>
   12fd0:	4287      	cmp	r7, r0
   12fd2:	d1e9      	bne.n	12fa8 <__gnu_unwind_pr_common+0x140>
   12fd4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12fd6:	429c      	cmp	r4, r3
   12fd8:	d1e6      	bne.n	12fa8 <__gnu_unwind_pr_common+0x140>
   12fda:	4620      	mov	r0, r4
   12fdc:	f7ff fcf0 	bl	129c0 <selfrel_offset31>
   12fe0:	210f      	movs	r1, #15
   12fe2:	4602      	mov	r2, r0
   12fe4:	4648      	mov	r0, r9
   12fe6:	f7ff fef9 	bl	12ddc <_Unwind_SetGR>
   12fea:	4648      	mov	r0, r9
   12fec:	462a      	mov	r2, r5
   12fee:	2100      	movs	r1, #0
   12ff0:	f7ff fef4 	bl	12ddc <_Unwind_SetGR>
   12ff4:	2007      	movs	r0, #7
   12ff6:	e79f      	b.n	12f38 <__gnu_unwind_pr_common+0xd0>
   12ff8:	210d      	movs	r1, #13
   12ffa:	4648      	mov	r0, r9
   12ffc:	6a2f      	ldr	r7, [r5, #32]
   12ffe:	f7ff fec7 	bl	12d90 <_Unwind_GetGR>
   13002:	4287      	cmp	r7, r0
   13004:	d058      	beq.n	130b8 <__gnu_unwind_pr_common+0x250>
   13006:	6823      	ldr	r3, [r4, #0]
   13008:	2b00      	cmp	r3, #0
   1300a:	da87      	bge.n	12f1c <__gnu_unwind_pr_common+0xb4>
   1300c:	3404      	adds	r4, #4
   1300e:	e785      	b.n	12f1c <__gnu_unwind_pr_common+0xb4>
   13010:	9b02      	ldr	r3, [sp, #8]
   13012:	b33b      	cbz	r3, 13064 <__gnu_unwind_pr_common+0x1fc>
   13014:	f105 0358 	add.w	r3, r5, #88	; 0x58
   13018:	1d27      	adds	r7, r4, #4
   1301a:	f8cd b010 	str.w	fp, [sp, #16]
   1301e:	f8dd 800c 	ldr.w	r8, [sp, #12]
   13022:	f8dd a008 	ldr.w	sl, [sp, #8]
   13026:	9605      	str	r6, [sp, #20]
   13028:	46a3      	mov	fp, r4
   1302a:	461c      	mov	r4, r3
   1302c:	e002      	b.n	13034 <__gnu_unwind_pr_common+0x1cc>
   1302e:	45b2      	cmp	sl, r6
   13030:	46b0      	mov	r8, r6
   13032:	d016      	beq.n	13062 <__gnu_unwind_pr_common+0x1fa>
   13034:	4638      	mov	r0, r7
   13036:	9406      	str	r4, [sp, #24]
   13038:	f7ff fd8c 	bl	12b54 <_Unwind_decode_typeinfo_ptr.isra.0>
   1303c:	ab06      	add	r3, sp, #24
   1303e:	4601      	mov	r1, r0
   13040:	2200      	movs	r2, #0
   13042:	4628      	mov	r0, r5
   13044:	f7f6 fd24 	bl	9a90 <__cxa_type_match>
   13048:	f108 0601 	add.w	r6, r8, #1
   1304c:	3704      	adds	r7, #4
   1304e:	2800      	cmp	r0, #0
   13050:	d0ed      	beq.n	1302e <__gnu_unwind_pr_common+0x1c6>
   13052:	9b02      	ldr	r3, [sp, #8]
   13054:	9e05      	ldr	r6, [sp, #20]
   13056:	4543      	cmp	r3, r8
   13058:	465c      	mov	r4, fp
   1305a:	f8dd b010 	ldr.w	fp, [sp, #16]
   1305e:	d1d2      	bne.n	13006 <__gnu_unwind_pr_common+0x19e>
   13060:	e000      	b.n	13064 <__gnu_unwind_pr_common+0x1fc>
   13062:	465c      	mov	r4, fp
   13064:	4648      	mov	r0, r9
   13066:	210d      	movs	r1, #13
   13068:	f7ff fe92 	bl	12d90 <_Unwind_GetGR>
   1306c:	9b06      	ldr	r3, [sp, #24]
   1306e:	6228      	str	r0, [r5, #32]
   13070:	62ac      	str	r4, [r5, #40]	; 0x28
   13072:	626b      	str	r3, [r5, #36]	; 0x24
   13074:	2006      	movs	r0, #6
   13076:	e75f      	b.n	12f38 <__gnu_unwind_pr_common+0xd0>
   13078:	210f      	movs	r1, #15
   1307a:	4648      	mov	r0, r9
   1307c:	f7ff fe88 	bl	12d90 <_Unwind_GetGR>
   13080:	210e      	movs	r1, #14
   13082:	4602      	mov	r2, r0
   13084:	4648      	mov	r0, r9
   13086:	f7ff fea9 	bl	12ddc <_Unwind_SetGR>
   1308a:	4648      	mov	r0, r9
   1308c:	4a29      	ldr	r2, [pc, #164]	; (13134 <__gnu_unwind_pr_common+0x2cc>)
   1308e:	210f      	movs	r1, #15
   13090:	f7ff fea4 	bl	12ddc <_Unwind_SetGR>
   13094:	2007      	movs	r0, #7
   13096:	e74f      	b.n	12f38 <__gnu_unwind_pr_common+0xd0>
   13098:	4607      	mov	r7, r0
   1309a:	210d      	movs	r1, #13
   1309c:	4648      	mov	r0, r9
   1309e:	f7ff fe77 	bl	12d90 <_Unwind_GetGR>
   130a2:	2f02      	cmp	r7, #2
   130a4:	6228      	str	r0, [r5, #32]
   130a6:	d11d      	bne.n	130e4 <__gnu_unwind_pr_common+0x27c>
   130a8:	462b      	mov	r3, r5
   130aa:	9a06      	ldr	r2, [sp, #24]
   130ac:	f843 2f2c 	str.w	r2, [r3, #44]!
   130b0:	626b      	str	r3, [r5, #36]	; 0x24
   130b2:	62ac      	str	r4, [r5, #40]	; 0x28
   130b4:	2006      	movs	r0, #6
   130b6:	e73f      	b.n	12f38 <__gnu_unwind_pr_common+0xd0>
   130b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   130ba:	429c      	cmp	r4, r3
   130bc:	d1a3      	bne.n	13006 <__gnu_unwind_pr_common+0x19e>
   130be:	2204      	movs	r2, #4
   130c0:	2700      	movs	r7, #0
   130c2:	18a3      	adds	r3, r4, r2
   130c4:	9902      	ldr	r1, [sp, #8]
   130c6:	62a9      	str	r1, [r5, #40]	; 0x28
   130c8:	62ef      	str	r7, [r5, #44]	; 0x2c
   130ca:	632a      	str	r2, [r5, #48]	; 0x30
   130cc:	636b      	str	r3, [r5, #52]	; 0x34
   130ce:	6823      	ldr	r3, [r4, #0]
   130d0:	42bb      	cmp	r3, r7
   130d2:	db1d      	blt.n	13110 <__gnu_unwind_pr_common+0x2a8>
   130d4:	2301      	movs	r3, #1
   130d6:	9301      	str	r3, [sp, #4]
   130d8:	e720      	b.n	12f1c <__gnu_unwind_pr_common+0xb4>
   130da:	4648      	mov	r0, r9
   130dc:	210d      	movs	r1, #13
   130de:	f7ff fe57 	bl	12d90 <_Unwind_GetGR>
   130e2:	6228      	str	r0, [r5, #32]
   130e4:	9b06      	ldr	r3, [sp, #24]
   130e6:	626b      	str	r3, [r5, #36]	; 0x24
   130e8:	e7e3      	b.n	130b2 <__gnu_unwind_pr_common+0x24a>
   130ea:	4620      	mov	r0, r4
   130ec:	f7ff fc68 	bl	129c0 <selfrel_offset31>
   130f0:	3404      	adds	r4, #4
   130f2:	4606      	mov	r6, r0
   130f4:	63ac      	str	r4, [r5, #56]	; 0x38
   130f6:	4628      	mov	r0, r5
   130f8:	f7f6 fd26 	bl	9b48 <__cxa_begin_cleanup>
   130fc:	2800      	cmp	r0, #0
   130fe:	f43f af1a 	beq.w	12f36 <__gnu_unwind_pr_common+0xce>
   13102:	4648      	mov	r0, r9
   13104:	4632      	mov	r2, r6
   13106:	210f      	movs	r1, #15
   13108:	f7ff fe68 	bl	12ddc <_Unwind_SetGR>
   1310c:	2007      	movs	r0, #7
   1310e:	e713      	b.n	12f38 <__gnu_unwind_pr_common+0xd0>
   13110:	4608      	mov	r0, r1
   13112:	3001      	adds	r0, #1
   13114:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   13118:	f7ff fc52 	bl	129c0 <selfrel_offset31>
   1311c:	210f      	movs	r1, #15
   1311e:	4602      	mov	r2, r0
   13120:	4648      	mov	r0, r9
   13122:	f7ff fe5b 	bl	12ddc <_Unwind_SetGR>
   13126:	4648      	mov	r0, r9
   13128:	462a      	mov	r2, r5
   1312a:	4639      	mov	r1, r7
   1312c:	f7ff fe56 	bl	12ddc <_Unwind_SetGR>
   13130:	2007      	movs	r0, #7
   13132:	e701      	b.n	12f38 <__gnu_unwind_pr_common+0xd0>
   13134:	0000a865 	.word	0x0000a865

00013138 <__aeabi_unwind_cpp_pr0>:
   13138:	2300      	movs	r3, #0
   1313a:	e695      	b.n	12e68 <__gnu_unwind_pr_common>

0001313c <__aeabi_unwind_cpp_pr1>:
   1313c:	2301      	movs	r3, #1
   1313e:	e693      	b.n	12e68 <__gnu_unwind_pr_common>

00013140 <__aeabi_unwind_cpp_pr2>:
   13140:	2302      	movs	r3, #2
   13142:	e691      	b.n	12e68 <__gnu_unwind_pr_common>

00013144 <_Unwind_VRS_Pop>:
   13144:	b5f0      	push	{r4, r5, r6, r7, lr}
   13146:	4604      	mov	r4, r0
   13148:	b0c5      	sub	sp, #276	; 0x114
   1314a:	2904      	cmp	r1, #4
   1314c:	d80d      	bhi.n	1316a <_Unwind_VRS_Pop+0x26>
   1314e:	e8df f001 	tbb	[pc, r1]
   13152:	0353      	.short	0x0353
   13154:	310c      	.short	0x310c
   13156:	0f          	.byte	0x0f
   13157:	00          	.byte	0x00
   13158:	2b01      	cmp	r3, #1
   1315a:	ea4f 4612 	mov.w	r6, r2, lsr #16
   1315e:	b295      	uxth	r5, r2
   13160:	d162      	bne.n	13228 <_Unwind_VRS_Pop+0xe4>
   13162:	1972      	adds	r2, r6, r5
   13164:	2a10      	cmp	r2, #16
   13166:	f240 809b 	bls.w	132a0 <_Unwind_VRS_Pop+0x15c>
   1316a:	2002      	movs	r0, #2
   1316c:	b045      	add	sp, #276	; 0x114
   1316e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13170:	2b00      	cmp	r3, #0
   13172:	d1fa      	bne.n	1316a <_Unwind_VRS_Pop+0x26>
   13174:	2a10      	cmp	r2, #16
   13176:	d8f8      	bhi.n	1316a <_Unwind_VRS_Pop+0x26>
   13178:	6823      	ldr	r3, [r4, #0]
   1317a:	06d8      	lsls	r0, r3, #27
   1317c:	f100 80c6 	bmi.w	1330c <_Unwind_VRS_Pop+0x1c8>
   13180:	ae22      	add	r6, sp, #136	; 0x88
   13182:	4630      	mov	r0, r6
   13184:	9201      	str	r2, [sp, #4]
   13186:	f000 f973 	bl	13470 <__gnu_Unwind_Save_WMMXC>
   1318a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1318c:	9a01      	ldr	r2, [sp, #4]
   1318e:	2300      	movs	r3, #0
   13190:	2501      	movs	r5, #1
   13192:	fa05 f103 	lsl.w	r1, r5, r3
   13196:	4211      	tst	r1, r2
   13198:	d003      	beq.n	131a2 <_Unwind_VRS_Pop+0x5e>
   1319a:	6801      	ldr	r1, [r0, #0]
   1319c:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
   131a0:	3004      	adds	r0, #4
   131a2:	3301      	adds	r3, #1
   131a4:	2b04      	cmp	r3, #4
   131a6:	d1f4      	bne.n	13192 <_Unwind_VRS_Pop+0x4e>
   131a8:	63a0      	str	r0, [r4, #56]	; 0x38
   131aa:	4630      	mov	r0, r6
   131ac:	f000 f956 	bl	1345c <__gnu_Unwind_Restore_WMMXC>
   131b0:	2000      	movs	r0, #0
   131b2:	e7db      	b.n	1316c <_Unwind_VRS_Pop+0x28>
   131b4:	2b03      	cmp	r3, #3
   131b6:	d1d8      	bne.n	1316a <_Unwind_VRS_Pop+0x26>
   131b8:	0c15      	lsrs	r5, r2, #16
   131ba:	b297      	uxth	r7, r2
   131bc:	19eb      	adds	r3, r5, r7
   131be:	2b10      	cmp	r3, #16
   131c0:	d8d3      	bhi.n	1316a <_Unwind_VRS_Pop+0x26>
   131c2:	6823      	ldr	r3, [r4, #0]
   131c4:	071e      	lsls	r6, r3, #28
   131c6:	f100 80b5 	bmi.w	13334 <_Unwind_VRS_Pop+0x1f0>
   131ca:	ae22      	add	r6, sp, #136	; 0x88
   131cc:	4630      	mov	r0, r6
   131ce:	f000 f923 	bl	13418 <__gnu_Unwind_Save_WMMXD>
   131d2:	00ed      	lsls	r5, r5, #3
   131d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   131d6:	b14f      	cbz	r7, 131ec <_Unwind_VRS_Pop+0xa8>
   131d8:	3d04      	subs	r5, #4
   131da:	1971      	adds	r1, r6, r5
   131dc:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
   131e0:	f853 2b04 	ldr.w	r2, [r3], #4
   131e4:	f841 2f04 	str.w	r2, [r1, #4]!
   131e8:	4283      	cmp	r3, r0
   131ea:	d1f9      	bne.n	131e0 <_Unwind_VRS_Pop+0x9c>
   131ec:	4630      	mov	r0, r6
   131ee:	63a3      	str	r3, [r4, #56]	; 0x38
   131f0:	f000 f8f0 	bl	133d4 <__gnu_Unwind_Restore_WMMXD>
   131f4:	2000      	movs	r0, #0
   131f6:	e7b9      	b.n	1316c <_Unwind_VRS_Pop+0x28>
   131f8:	2b00      	cmp	r3, #0
   131fa:	d1b6      	bne.n	1316a <_Unwind_VRS_Pop+0x26>
   131fc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
   131fe:	b297      	uxth	r7, r2
   13200:	1d20      	adds	r0, r4, #4
   13202:	2601      	movs	r6, #1
   13204:	fa06 f103 	lsl.w	r1, r6, r3
   13208:	4239      	tst	r1, r7
   1320a:	f103 0301 	add.w	r3, r3, #1
   1320e:	d002      	beq.n	13216 <_Unwind_VRS_Pop+0xd2>
   13210:	6829      	ldr	r1, [r5, #0]
   13212:	6001      	str	r1, [r0, #0]
   13214:	3504      	adds	r5, #4
   13216:	2b10      	cmp	r3, #16
   13218:	f100 0004 	add.w	r0, r0, #4
   1321c:	d1f2      	bne.n	13204 <_Unwind_VRS_Pop+0xc0>
   1321e:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
   13222:	d13b      	bne.n	1329c <_Unwind_VRS_Pop+0x158>
   13224:	63a5      	str	r5, [r4, #56]	; 0x38
   13226:	e7a1      	b.n	1316c <_Unwind_VRS_Pop+0x28>
   13228:	2b05      	cmp	r3, #5
   1322a:	d19e      	bne.n	1316a <_Unwind_VRS_Pop+0x26>
   1322c:	1977      	adds	r7, r6, r5
   1322e:	2f20      	cmp	r7, #32
   13230:	d89b      	bhi.n	1316a <_Unwind_VRS_Pop+0x26>
   13232:	2e0f      	cmp	r6, #15
   13234:	d966      	bls.n	13304 <_Unwind_VRS_Pop+0x1c0>
   13236:	462f      	mov	r7, r5
   13238:	2d00      	cmp	r5, #0
   1323a:	d13a      	bne.n	132b2 <_Unwind_VRS_Pop+0x16e>
   1323c:	462a      	mov	r2, r5
   1323e:	2700      	movs	r7, #0
   13240:	2a00      	cmp	r2, #0
   13242:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   13244:	dd72      	ble.n	1332c <_Unwind_VRS_Pop+0x1e8>
   13246:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   1324a:	4601      	mov	r1, r0
   1324c:	a844      	add	r0, sp, #272	; 0x110
   1324e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   13252:	388c      	subs	r0, #140	; 0x8c
   13254:	f851 5b04 	ldr.w	r5, [r1], #4
   13258:	f840 5f04 	str.w	r5, [r0, #4]!
   1325c:	4291      	cmp	r1, r2
   1325e:	d1f9      	bne.n	13254 <_Unwind_VRS_Pop+0x110>
   13260:	4608      	mov	r0, r1
   13262:	b197      	cbz	r7, 1328a <_Unwind_VRS_Pop+0x146>
   13264:	2e10      	cmp	r6, #16
   13266:	4632      	mov	r2, r6
   13268:	a944      	add	r1, sp, #272	; 0x110
   1326a:	bf38      	it	cc
   1326c:	2210      	movcc	r2, #16
   1326e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   13272:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
   13276:	0079      	lsls	r1, r7, #1
   13278:	3a04      	subs	r2, #4
   1327a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1327e:	f850 5b04 	ldr.w	r5, [r0], #4
   13282:	f842 5f04 	str.w	r5, [r2, #4]!
   13286:	4288      	cmp	r0, r1
   13288:	d1f9      	bne.n	1327e <_Unwind_VRS_Pop+0x13a>
   1328a:	2b01      	cmp	r3, #1
   1328c:	d048      	beq.n	13320 <_Unwind_VRS_Pop+0x1dc>
   1328e:	2e0f      	cmp	r6, #15
   13290:	63a1      	str	r1, [r4, #56]	; 0x38
   13292:	d933      	bls.n	132fc <_Unwind_VRS_Pop+0x1b8>
   13294:	b117      	cbz	r7, 1329c <_Unwind_VRS_Pop+0x158>
   13296:	a802      	add	r0, sp, #8
   13298:	f000 f894 	bl	133c4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1329c:	2000      	movs	r0, #0
   1329e:	e765      	b.n	1316c <_Unwind_VRS_Pop+0x28>
   132a0:	2e0f      	cmp	r6, #15
   132a2:	f63f af62 	bhi.w	1316a <_Unwind_VRS_Pop+0x26>
   132a6:	2700      	movs	r7, #0
   132a8:	6822      	ldr	r2, [r4, #0]
   132aa:	07d1      	lsls	r1, r2, #31
   132ac:	d417      	bmi.n	132de <_Unwind_VRS_Pop+0x19a>
   132ae:	2f00      	cmp	r7, #0
   132b0:	d060      	beq.n	13374 <_Unwind_VRS_Pop+0x230>
   132b2:	6822      	ldr	r2, [r4, #0]
   132b4:	0751      	lsls	r1, r2, #29
   132b6:	d445      	bmi.n	13344 <_Unwind_VRS_Pop+0x200>
   132b8:	2b01      	cmp	r3, #1
   132ba:	d04d      	beq.n	13358 <_Unwind_VRS_Pop+0x214>
   132bc:	2e0f      	cmp	r6, #15
   132be:	d806      	bhi.n	132ce <_Unwind_VRS_Pop+0x18a>
   132c0:	a822      	add	r0, sp, #136	; 0x88
   132c2:	9301      	str	r3, [sp, #4]
   132c4:	f000 f87a 	bl	133bc <__gnu_Unwind_Save_VFP_D>
   132c8:	9b01      	ldr	r3, [sp, #4]
   132ca:	2f00      	cmp	r7, #0
   132cc:	d0b6      	beq.n	1323c <_Unwind_VRS_Pop+0xf8>
   132ce:	a802      	add	r0, sp, #8
   132d0:	9301      	str	r3, [sp, #4]
   132d2:	f000 f87b 	bl	133cc <__gnu_Unwind_Save_VFP_D_16_to_31>
   132d6:	9b01      	ldr	r3, [sp, #4]
   132d8:	f1c6 0210 	rsb	r2, r6, #16
   132dc:	e7b0      	b.n	13240 <_Unwind_VRS_Pop+0xfc>
   132de:	f022 0101 	bic.w	r1, r2, #1
   132e2:	2b05      	cmp	r3, #5
   132e4:	6021      	str	r1, [r4, #0]
   132e6:	9301      	str	r3, [sp, #4]
   132e8:	4620      	mov	r0, r4
   132ea:	d03b      	beq.n	13364 <_Unwind_VRS_Pop+0x220>
   132ec:	f022 0203 	bic.w	r2, r2, #3
   132f0:	f840 2b48 	str.w	r2, [r0], #72
   132f4:	f000 f85a 	bl	133ac <__gnu_Unwind_Save_VFP>
   132f8:	9b01      	ldr	r3, [sp, #4]
   132fa:	e7d8      	b.n	132ae <_Unwind_VRS_Pop+0x16a>
   132fc:	a822      	add	r0, sp, #136	; 0x88
   132fe:	f000 f859 	bl	133b4 <__gnu_Unwind_Restore_VFP_D>
   13302:	e7c7      	b.n	13294 <_Unwind_VRS_Pop+0x150>
   13304:	2f10      	cmp	r7, #16
   13306:	d9ce      	bls.n	132a6 <_Unwind_VRS_Pop+0x162>
   13308:	3f10      	subs	r7, #16
   1330a:	e7cd      	b.n	132a8 <_Unwind_VRS_Pop+0x164>
   1330c:	f023 0310 	bic.w	r3, r3, #16
   13310:	6023      	str	r3, [r4, #0]
   13312:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   13316:	9201      	str	r2, [sp, #4]
   13318:	f000 f8aa 	bl	13470 <__gnu_Unwind_Save_WMMXC>
   1331c:	9a01      	ldr	r2, [sp, #4]
   1331e:	e72f      	b.n	13180 <_Unwind_VRS_Pop+0x3c>
   13320:	3104      	adds	r1, #4
   13322:	63a1      	str	r1, [r4, #56]	; 0x38
   13324:	a822      	add	r0, sp, #136	; 0x88
   13326:	f000 f83d 	bl	133a4 <__gnu_Unwind_Restore_VFP>
   1332a:	e7b7      	b.n	1329c <_Unwind_VRS_Pop+0x158>
   1332c:	2f00      	cmp	r7, #0
   1332e:	d199      	bne.n	13264 <_Unwind_VRS_Pop+0x120>
   13330:	4601      	mov	r1, r0
   13332:	e7aa      	b.n	1328a <_Unwind_VRS_Pop+0x146>
   13334:	f023 0308 	bic.w	r3, r3, #8
   13338:	6023      	str	r3, [r4, #0]
   1333a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1333e:	f000 f86b 	bl	13418 <__gnu_Unwind_Save_WMMXD>
   13342:	e742      	b.n	131ca <_Unwind_VRS_Pop+0x86>
   13344:	4620      	mov	r0, r4
   13346:	f022 0204 	bic.w	r2, r2, #4
   1334a:	f840 2bd0 	str.w	r2, [r0], #208
   1334e:	9301      	str	r3, [sp, #4]
   13350:	f000 f83c 	bl	133cc <__gnu_Unwind_Save_VFP_D_16_to_31>
   13354:	9b01      	ldr	r3, [sp, #4]
   13356:	e7af      	b.n	132b8 <_Unwind_VRS_Pop+0x174>
   13358:	a822      	add	r0, sp, #136	; 0x88
   1335a:	9301      	str	r3, [sp, #4]
   1335c:	f000 f826 	bl	133ac <__gnu_Unwind_Save_VFP>
   13360:	9b01      	ldr	r3, [sp, #4]
   13362:	e7b9      	b.n	132d8 <_Unwind_VRS_Pop+0x194>
   13364:	f041 0102 	orr.w	r1, r1, #2
   13368:	f840 1b48 	str.w	r1, [r0], #72
   1336c:	f000 f826 	bl	133bc <__gnu_Unwind_Save_VFP_D>
   13370:	9b01      	ldr	r3, [sp, #4]
   13372:	e79c      	b.n	132ae <_Unwind_VRS_Pop+0x16a>
   13374:	2b01      	cmp	r3, #1
   13376:	d003      	beq.n	13380 <_Unwind_VRS_Pop+0x23c>
   13378:	2e0f      	cmp	r6, #15
   1337a:	f63f af5f 	bhi.w	1323c <_Unwind_VRS_Pop+0xf8>
   1337e:	e79f      	b.n	132c0 <_Unwind_VRS_Pop+0x17c>
   13380:	a822      	add	r0, sp, #136	; 0x88
   13382:	9301      	str	r3, [sp, #4]
   13384:	f000 f812 	bl	133ac <__gnu_Unwind_Save_VFP>
   13388:	9b01      	ldr	r3, [sp, #4]
   1338a:	e757      	b.n	1323c <_Unwind_VRS_Pop+0xf8>

0001338c <__restore_core_regs>:
   1338c:	f100 0134 	add.w	r1, r0, #52	; 0x34
   13390:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   13394:	469c      	mov	ip, r3
   13396:	46a6      	mov	lr, r4
   13398:	f84c 5d04 	str.w	r5, [ip, #-4]!
   1339c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   133a0:	46e5      	mov	sp, ip
   133a2:	bd00      	pop	{pc}

000133a4 <__gnu_Unwind_Restore_VFP>:
   133a4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   133a8:	4770      	bx	lr
   133aa:	bf00      	nop

000133ac <__gnu_Unwind_Save_VFP>:
   133ac:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   133b0:	4770      	bx	lr
   133b2:	bf00      	nop

000133b4 <__gnu_Unwind_Restore_VFP_D>:
   133b4:	ec90 0b20 	vldmia	r0, {d0-d15}
   133b8:	4770      	bx	lr
   133ba:	bf00      	nop

000133bc <__gnu_Unwind_Save_VFP_D>:
   133bc:	ec80 0b20 	vstmia	r0, {d0-d15}
   133c0:	4770      	bx	lr
   133c2:	bf00      	nop

000133c4 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   133c4:	ecd0 0b20 	vldmia	r0, {d16-d31}
   133c8:	4770      	bx	lr
   133ca:	bf00      	nop

000133cc <__gnu_Unwind_Save_VFP_D_16_to_31>:
   133cc:	ecc0 0b20 	vstmia	r0, {d16-d31}
   133d0:	4770      	bx	lr
   133d2:	bf00      	nop

000133d4 <__gnu_Unwind_Restore_WMMXD>:
   133d4:	ecf0 0102 	ldfe	f0, [r0], #8
   133d8:	ecf0 1102 	ldfe	f1, [r0], #8
   133dc:	ecf0 2102 	ldfe	f2, [r0], #8
   133e0:	ecf0 3102 	ldfe	f3, [r0], #8
   133e4:	ecf0 4102 	ldfe	f4, [r0], #8
   133e8:	ecf0 5102 	ldfe	f5, [r0], #8
   133ec:	ecf0 6102 	ldfe	f6, [r0], #8
   133f0:	ecf0 7102 	ldfe	f7, [r0], #8
   133f4:	ecf0 8102 	ldfp	f0, [r0], #8
   133f8:	ecf0 9102 	ldfp	f1, [r0], #8
   133fc:	ecf0 a102 	ldfp	f2, [r0], #8
   13400:	ecf0 b102 	ldfp	f3, [r0], #8
   13404:	ecf0 c102 	ldfp	f4, [r0], #8
   13408:	ecf0 d102 	ldfp	f5, [r0], #8
   1340c:	ecf0 e102 	ldfp	f6, [r0], #8
   13410:	ecf0 f102 	ldfp	f7, [r0], #8
   13414:	4770      	bx	lr
   13416:	bf00      	nop

00013418 <__gnu_Unwind_Save_WMMXD>:
   13418:	ece0 0102 	stfe	f0, [r0], #8
   1341c:	ece0 1102 	stfe	f1, [r0], #8
   13420:	ece0 2102 	stfe	f2, [r0], #8
   13424:	ece0 3102 	stfe	f3, [r0], #8
   13428:	ece0 4102 	stfe	f4, [r0], #8
   1342c:	ece0 5102 	stfe	f5, [r0], #8
   13430:	ece0 6102 	stfe	f6, [r0], #8
   13434:	ece0 7102 	stfe	f7, [r0], #8
   13438:	ece0 8102 	stfp	f0, [r0], #8
   1343c:	ece0 9102 	stfp	f1, [r0], #8
   13440:	ece0 a102 	stfp	f2, [r0], #8
   13444:	ece0 b102 	stfp	f3, [r0], #8
   13448:	ece0 c102 	stfp	f4, [r0], #8
   1344c:	ece0 d102 	stfp	f5, [r0], #8
   13450:	ece0 e102 	stfp	f6, [r0], #8
   13454:	ece0 f102 	stfp	f7, [r0], #8
   13458:	4770      	bx	lr
   1345a:	bf00      	nop

0001345c <__gnu_Unwind_Restore_WMMXC>:
   1345c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   13460:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   13464:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   13468:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   1346c:	4770      	bx	lr
   1346e:	bf00      	nop

00013470 <__gnu_Unwind_Save_WMMXC>:
   13470:	fca0 8101 	stc2	1, cr8, [r0], #4
   13474:	fca0 9101 	stc2	1, cr9, [r0], #4
   13478:	fca0 a101 	stc2	1, cr10, [r0], #4
   1347c:	fca0 b101 	stc2	1, cr11, [r0], #4
   13480:	4770      	bx	lr
   13482:	bf00      	nop

00013484 <_Unwind_RaiseException>:
   13484:	46ec      	mov	ip, sp
   13486:	b500      	push	{lr}
   13488:	e92d 5000 	stmdb	sp!, {ip, lr}
   1348c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   13490:	f04f 0300 	mov.w	r3, #0
   13494:	e92d 000c 	stmdb	sp!, {r2, r3}
   13498:	a901      	add	r1, sp, #4
   1349a:	f7ff fbf3 	bl	12c84 <__gnu_Unwind_RaiseException>
   1349e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   134a2:	b012      	add	sp, #72	; 0x48
   134a4:	4770      	bx	lr
   134a6:	bf00      	nop

000134a8 <_Unwind_Resume>:
   134a8:	46ec      	mov	ip, sp
   134aa:	b500      	push	{lr}
   134ac:	e92d 5000 	stmdb	sp!, {ip, lr}
   134b0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   134b4:	f04f 0300 	mov.w	r3, #0
   134b8:	e92d 000c 	stmdb	sp!, {r2, r3}
   134bc:	a901      	add	r1, sp, #4
   134be:	f7ff fc1b 	bl	12cf8 <__gnu_Unwind_Resume>
   134c2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   134c6:	b012      	add	sp, #72	; 0x48
   134c8:	4770      	bx	lr
   134ca:	bf00      	nop

000134cc <_Unwind_Resume_or_Rethrow>:
   134cc:	46ec      	mov	ip, sp
   134ce:	b500      	push	{lr}
   134d0:	e92d 5000 	stmdb	sp!, {ip, lr}
   134d4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   134d8:	f04f 0300 	mov.w	r3, #0
   134dc:	e92d 000c 	stmdb	sp!, {r2, r3}
   134e0:	a901      	add	r1, sp, #4
   134e2:	f7ff fc2b 	bl	12d3c <__gnu_Unwind_Resume_or_Rethrow>
   134e6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   134ea:	b012      	add	sp, #72	; 0x48
   134ec:	4770      	bx	lr
   134ee:	bf00      	nop

000134f0 <_Unwind_ForcedUnwind>:
   134f0:	46ec      	mov	ip, sp
   134f2:	b500      	push	{lr}
   134f4:	e92d 5000 	stmdb	sp!, {ip, lr}
   134f8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   134fc:	f04f 0300 	mov.w	r3, #0
   13500:	e92d 000c 	stmdb	sp!, {r2, r3}
   13504:	ab01      	add	r3, sp, #4
   13506:	f7ff fbed 	bl	12ce4 <__gnu_Unwind_ForcedUnwind>
   1350a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1350e:	b012      	add	sp, #72	; 0x48
   13510:	4770      	bx	lr
   13512:	bf00      	nop

00013514 <_Unwind_Backtrace>:
   13514:	46ec      	mov	ip, sp
   13516:	b500      	push	{lr}
   13518:	e92d 5000 	stmdb	sp!, {ip, lr}
   1351c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   13520:	f04f 0300 	mov.w	r3, #0
   13524:	e92d 000c 	stmdb	sp!, {r2, r3}
   13528:	aa01      	add	r2, sp, #4
   1352a:	f7ff fc65 	bl	12df8 <__gnu_Unwind_Backtrace>
   1352e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   13532:	b012      	add	sp, #72	; 0x48
   13534:	4770      	bx	lr
   13536:	bf00      	nop

00013538 <next_unwind_byte>:
   13538:	7a02      	ldrb	r2, [r0, #8]
   1353a:	b91a      	cbnz	r2, 13544 <next_unwind_byte+0xc>
   1353c:	7a43      	ldrb	r3, [r0, #9]
   1353e:	b943      	cbnz	r3, 13552 <next_unwind_byte+0x1a>
   13540:	20b0      	movs	r0, #176	; 0xb0
   13542:	4770      	bx	lr
   13544:	6803      	ldr	r3, [r0, #0]
   13546:	3a01      	subs	r2, #1
   13548:	7202      	strb	r2, [r0, #8]
   1354a:	021a      	lsls	r2, r3, #8
   1354c:	6002      	str	r2, [r0, #0]
   1354e:	0e18      	lsrs	r0, r3, #24
   13550:	4770      	bx	lr
   13552:	6842      	ldr	r2, [r0, #4]
   13554:	3b01      	subs	r3, #1
   13556:	b410      	push	{r4}
   13558:	7243      	strb	r3, [r0, #9]
   1355a:	6813      	ldr	r3, [r2, #0]
   1355c:	2103      	movs	r1, #3
   1355e:	1d14      	adds	r4, r2, #4
   13560:	7201      	strb	r1, [r0, #8]
   13562:	021a      	lsls	r2, r3, #8
   13564:	6044      	str	r4, [r0, #4]
   13566:	6002      	str	r2, [r0, #0]
   13568:	bc10      	pop	{r4}
   1356a:	0e18      	lsrs	r0, r3, #24
   1356c:	4770      	bx	lr
   1356e:	bf00      	nop

00013570 <_Unwind_GetGR.constprop.0>:
   13570:	b500      	push	{lr}
   13572:	b085      	sub	sp, #20
   13574:	aa03      	add	r2, sp, #12
   13576:	2300      	movs	r3, #0
   13578:	9200      	str	r2, [sp, #0]
   1357a:	4619      	mov	r1, r3
   1357c:	220c      	movs	r2, #12
   1357e:	f7ff fbed 	bl	12d5c <_Unwind_VRS_Get>
   13582:	9803      	ldr	r0, [sp, #12]
   13584:	b005      	add	sp, #20
   13586:	f85d fb04 	ldr.w	pc, [sp], #4
   1358a:	bf00      	nop

0001358c <unwind_UCB_from_context>:
   1358c:	e7f0      	b.n	13570 <_Unwind_GetGR.constprop.0>
   1358e:	bf00      	nop

00013590 <__gnu_unwind_execute>:
   13590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13594:	4606      	mov	r6, r0
   13596:	b085      	sub	sp, #20
   13598:	460f      	mov	r7, r1
   1359a:	f04f 0800 	mov.w	r8, #0
   1359e:	4638      	mov	r0, r7
   135a0:	f7ff ffca 	bl	13538 <next_unwind_byte>
   135a4:	28b0      	cmp	r0, #176	; 0xb0
   135a6:	4604      	mov	r4, r0
   135a8:	d023      	beq.n	135f2 <__gnu_unwind_execute+0x62>
   135aa:	0605      	lsls	r5, r0, #24
   135ac:	d427      	bmi.n	135fe <__gnu_unwind_execute+0x6e>
   135ae:	2300      	movs	r3, #0
   135b0:	f10d 090c 	add.w	r9, sp, #12
   135b4:	4619      	mov	r1, r3
   135b6:	0085      	lsls	r5, r0, #2
   135b8:	220d      	movs	r2, #13
   135ba:	f8cd 9000 	str.w	r9, [sp]
   135be:	4630      	mov	r0, r6
   135c0:	f7ff fbcc 	bl	12d5c <_Unwind_VRS_Get>
   135c4:	b2ed      	uxtb	r5, r5
   135c6:	9b03      	ldr	r3, [sp, #12]
   135c8:	f8cd 9000 	str.w	r9, [sp]
   135cc:	0660      	lsls	r0, r4, #25
   135ce:	f105 0504 	add.w	r5, r5, #4
   135d2:	bf4c      	ite	mi
   135d4:	1b5d      	submi	r5, r3, r5
   135d6:	18ed      	addpl	r5, r5, r3
   135d8:	2300      	movs	r3, #0
   135da:	4619      	mov	r1, r3
   135dc:	220d      	movs	r2, #13
   135de:	4630      	mov	r0, r6
   135e0:	9503      	str	r5, [sp, #12]
   135e2:	f7ff fbe1 	bl	12da8 <_Unwind_VRS_Set>
   135e6:	4638      	mov	r0, r7
   135e8:	f7ff ffa6 	bl	13538 <next_unwind_byte>
   135ec:	28b0      	cmp	r0, #176	; 0xb0
   135ee:	4604      	mov	r4, r0
   135f0:	d1db      	bne.n	135aa <__gnu_unwind_execute+0x1a>
   135f2:	f1b8 0f00 	cmp.w	r8, #0
   135f6:	f000 8095 	beq.w	13724 <__gnu_unwind_execute+0x194>
   135fa:	2000      	movs	r0, #0
   135fc:	e01c      	b.n	13638 <__gnu_unwind_execute+0xa8>
   135fe:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   13602:	2b80      	cmp	r3, #128	; 0x80
   13604:	d05d      	beq.n	136c2 <__gnu_unwind_execute+0x132>
   13606:	2b90      	cmp	r3, #144	; 0x90
   13608:	d019      	beq.n	1363e <__gnu_unwind_execute+0xae>
   1360a:	2ba0      	cmp	r3, #160	; 0xa0
   1360c:	d02c      	beq.n	13668 <__gnu_unwind_execute+0xd8>
   1360e:	2bb0      	cmp	r3, #176	; 0xb0
   13610:	d03f      	beq.n	13692 <__gnu_unwind_execute+0x102>
   13612:	2bc0      	cmp	r3, #192	; 0xc0
   13614:	d06c      	beq.n	136f0 <__gnu_unwind_execute+0x160>
   13616:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1361a:	2bd0      	cmp	r3, #208	; 0xd0
   1361c:	d10b      	bne.n	13636 <__gnu_unwind_execute+0xa6>
   1361e:	f000 0207 	and.w	r2, r0, #7
   13622:	3201      	adds	r2, #1
   13624:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   13628:	2305      	movs	r3, #5
   1362a:	2101      	movs	r1, #1
   1362c:	4630      	mov	r0, r6
   1362e:	f7ff fd89 	bl	13144 <_Unwind_VRS_Pop>
   13632:	2800      	cmp	r0, #0
   13634:	d0b3      	beq.n	1359e <__gnu_unwind_execute+0xe>
   13636:	2009      	movs	r0, #9
   13638:	b005      	add	sp, #20
   1363a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1363e:	f000 030d 	and.w	r3, r0, #13
   13642:	2b0d      	cmp	r3, #13
   13644:	d0f7      	beq.n	13636 <__gnu_unwind_execute+0xa6>
   13646:	ad03      	add	r5, sp, #12
   13648:	2300      	movs	r3, #0
   1364a:	f000 020f 	and.w	r2, r0, #15
   1364e:	4619      	mov	r1, r3
   13650:	9500      	str	r5, [sp, #0]
   13652:	4630      	mov	r0, r6
   13654:	f7ff fb82 	bl	12d5c <_Unwind_VRS_Get>
   13658:	2300      	movs	r3, #0
   1365a:	9500      	str	r5, [sp, #0]
   1365c:	4619      	mov	r1, r3
   1365e:	220d      	movs	r2, #13
   13660:	4630      	mov	r0, r6
   13662:	f7ff fba1 	bl	12da8 <_Unwind_VRS_Set>
   13666:	e79a      	b.n	1359e <__gnu_unwind_execute+0xe>
   13668:	43c2      	mvns	r2, r0
   1366a:	f002 0307 	and.w	r3, r2, #7
   1366e:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   13672:	411a      	asrs	r2, r3
   13674:	0701      	lsls	r1, r0, #28
   13676:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   1367a:	f04f 0300 	mov.w	r3, #0
   1367e:	bf48      	it	mi
   13680:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   13684:	4619      	mov	r1, r3
   13686:	4630      	mov	r0, r6
   13688:	f7ff fd5c 	bl	13144 <_Unwind_VRS_Pop>
   1368c:	2800      	cmp	r0, #0
   1368e:	d1d2      	bne.n	13636 <__gnu_unwind_execute+0xa6>
   13690:	e785      	b.n	1359e <__gnu_unwind_execute+0xe>
   13692:	28b1      	cmp	r0, #177	; 0xb1
   13694:	d057      	beq.n	13746 <__gnu_unwind_execute+0x1b6>
   13696:	28b2      	cmp	r0, #178	; 0xb2
   13698:	d068      	beq.n	1376c <__gnu_unwind_execute+0x1dc>
   1369a:	28b3      	cmp	r0, #179	; 0xb3
   1369c:	f000 8095 	beq.w	137ca <__gnu_unwind_execute+0x23a>
   136a0:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   136a4:	2bb4      	cmp	r3, #180	; 0xb4
   136a6:	d0c6      	beq.n	13636 <__gnu_unwind_execute+0xa6>
   136a8:	f000 0207 	and.w	r2, r0, #7
   136ac:	3201      	adds	r2, #1
   136ae:	2301      	movs	r3, #1
   136b0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   136b4:	4619      	mov	r1, r3
   136b6:	4630      	mov	r0, r6
   136b8:	f7ff fd44 	bl	13144 <_Unwind_VRS_Pop>
   136bc:	2800      	cmp	r0, #0
   136be:	d1ba      	bne.n	13636 <__gnu_unwind_execute+0xa6>
   136c0:	e76d      	b.n	1359e <__gnu_unwind_execute+0xe>
   136c2:	4638      	mov	r0, r7
   136c4:	f7ff ff38 	bl	13538 <next_unwind_byte>
   136c8:	0224      	lsls	r4, r4, #8
   136ca:	4304      	orrs	r4, r0
   136cc:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   136d0:	d0b1      	beq.n	13636 <__gnu_unwind_execute+0xa6>
   136d2:	0124      	lsls	r4, r4, #4
   136d4:	2300      	movs	r3, #0
   136d6:	b2a2      	uxth	r2, r4
   136d8:	4619      	mov	r1, r3
   136da:	4630      	mov	r0, r6
   136dc:	f7ff fd32 	bl	13144 <_Unwind_VRS_Pop>
   136e0:	2800      	cmp	r0, #0
   136e2:	d1a8      	bne.n	13636 <__gnu_unwind_execute+0xa6>
   136e4:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   136e8:	bf18      	it	ne
   136ea:	f04f 0801 	movne.w	r8, #1
   136ee:	e756      	b.n	1359e <__gnu_unwind_execute+0xe>
   136f0:	28c6      	cmp	r0, #198	; 0xc6
   136f2:	d07d      	beq.n	137f0 <__gnu_unwind_execute+0x260>
   136f4:	28c7      	cmp	r0, #199	; 0xc7
   136f6:	f000 8086 	beq.w	13806 <__gnu_unwind_execute+0x276>
   136fa:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   136fe:	2bc0      	cmp	r3, #192	; 0xc0
   13700:	f000 8094 	beq.w	1382c <__gnu_unwind_execute+0x29c>
   13704:	28c8      	cmp	r0, #200	; 0xc8
   13706:	f000 809f 	beq.w	13848 <__gnu_unwind_execute+0x2b8>
   1370a:	28c9      	cmp	r0, #201	; 0xc9
   1370c:	d193      	bne.n	13636 <__gnu_unwind_execute+0xa6>
   1370e:	4638      	mov	r0, r7
   13710:	f7ff ff12 	bl	13538 <next_unwind_byte>
   13714:	0302      	lsls	r2, r0, #12
   13716:	f000 000f 	and.w	r0, r0, #15
   1371a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   1371e:	3001      	adds	r0, #1
   13720:	4302      	orrs	r2, r0
   13722:	e781      	b.n	13628 <__gnu_unwind_execute+0x98>
   13724:	ac03      	add	r4, sp, #12
   13726:	4643      	mov	r3, r8
   13728:	220e      	movs	r2, #14
   1372a:	4641      	mov	r1, r8
   1372c:	9400      	str	r4, [sp, #0]
   1372e:	4630      	mov	r0, r6
   13730:	f7ff fb14 	bl	12d5c <_Unwind_VRS_Get>
   13734:	9400      	str	r4, [sp, #0]
   13736:	4630      	mov	r0, r6
   13738:	4643      	mov	r3, r8
   1373a:	220f      	movs	r2, #15
   1373c:	4641      	mov	r1, r8
   1373e:	f7ff fb33 	bl	12da8 <_Unwind_VRS_Set>
   13742:	4640      	mov	r0, r8
   13744:	e778      	b.n	13638 <__gnu_unwind_execute+0xa8>
   13746:	4638      	mov	r0, r7
   13748:	f7ff fef6 	bl	13538 <next_unwind_byte>
   1374c:	2800      	cmp	r0, #0
   1374e:	f43f af72 	beq.w	13636 <__gnu_unwind_execute+0xa6>
   13752:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   13756:	f47f af6e 	bne.w	13636 <__gnu_unwind_execute+0xa6>
   1375a:	4602      	mov	r2, r0
   1375c:	4619      	mov	r1, r3
   1375e:	4630      	mov	r0, r6
   13760:	f7ff fcf0 	bl	13144 <_Unwind_VRS_Pop>
   13764:	2800      	cmp	r0, #0
   13766:	f47f af66 	bne.w	13636 <__gnu_unwind_execute+0xa6>
   1376a:	e718      	b.n	1359e <__gnu_unwind_execute+0xe>
   1376c:	2300      	movs	r3, #0
   1376e:	f10d 090c 	add.w	r9, sp, #12
   13772:	220d      	movs	r2, #13
   13774:	4619      	mov	r1, r3
   13776:	f8cd 9000 	str.w	r9, [sp]
   1377a:	4630      	mov	r0, r6
   1377c:	f7ff faee 	bl	12d5c <_Unwind_VRS_Get>
   13780:	4638      	mov	r0, r7
   13782:	f7ff fed9 	bl	13538 <next_unwind_byte>
   13786:	0602      	lsls	r2, r0, #24
   13788:	f04f 0402 	mov.w	r4, #2
   1378c:	d50c      	bpl.n	137a8 <__gnu_unwind_execute+0x218>
   1378e:	9b03      	ldr	r3, [sp, #12]
   13790:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   13794:	40a0      	lsls	r0, r4
   13796:	4403      	add	r3, r0
   13798:	4638      	mov	r0, r7
   1379a:	9303      	str	r3, [sp, #12]
   1379c:	f7ff fecc 	bl	13538 <next_unwind_byte>
   137a0:	0603      	lsls	r3, r0, #24
   137a2:	f104 0407 	add.w	r4, r4, #7
   137a6:	d4f2      	bmi.n	1378e <__gnu_unwind_execute+0x1fe>
   137a8:	9b03      	ldr	r3, [sp, #12]
   137aa:	f8cd 9000 	str.w	r9, [sp]
   137ae:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   137b2:	40a2      	lsls	r2, r4
   137b4:	f503 7401 	add.w	r4, r3, #516	; 0x204
   137b8:	2300      	movs	r3, #0
   137ba:	4414      	add	r4, r2
   137bc:	4619      	mov	r1, r3
   137be:	220d      	movs	r2, #13
   137c0:	4630      	mov	r0, r6
   137c2:	9403      	str	r4, [sp, #12]
   137c4:	f7ff faf0 	bl	12da8 <_Unwind_VRS_Set>
   137c8:	e6e9      	b.n	1359e <__gnu_unwind_execute+0xe>
   137ca:	4638      	mov	r0, r7
   137cc:	f7ff feb4 	bl	13538 <next_unwind_byte>
   137d0:	0301      	lsls	r1, r0, #12
   137d2:	f000 000f 	and.w	r0, r0, #15
   137d6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   137da:	1c42      	adds	r2, r0, #1
   137dc:	2301      	movs	r3, #1
   137de:	430a      	orrs	r2, r1
   137e0:	4630      	mov	r0, r6
   137e2:	4619      	mov	r1, r3
   137e4:	f7ff fcae 	bl	13144 <_Unwind_VRS_Pop>
   137e8:	2800      	cmp	r0, #0
   137ea:	f47f af24 	bne.w	13636 <__gnu_unwind_execute+0xa6>
   137ee:	e6d6      	b.n	1359e <__gnu_unwind_execute+0xe>
   137f0:	4638      	mov	r0, r7
   137f2:	f7ff fea1 	bl	13538 <next_unwind_byte>
   137f6:	0301      	lsls	r1, r0, #12
   137f8:	f000 000f 	and.w	r0, r0, #15
   137fc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   13800:	1c42      	adds	r2, r0, #1
   13802:	2303      	movs	r3, #3
   13804:	e7eb      	b.n	137de <__gnu_unwind_execute+0x24e>
   13806:	4638      	mov	r0, r7
   13808:	f7ff fe96 	bl	13538 <next_unwind_byte>
   1380c:	2800      	cmp	r0, #0
   1380e:	f43f af12 	beq.w	13636 <__gnu_unwind_execute+0xa6>
   13812:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   13816:	f47f af0e 	bne.w	13636 <__gnu_unwind_execute+0xa6>
   1381a:	4602      	mov	r2, r0
   1381c:	2104      	movs	r1, #4
   1381e:	4630      	mov	r0, r6
   13820:	f7ff fc90 	bl	13144 <_Unwind_VRS_Pop>
   13824:	2800      	cmp	r0, #0
   13826:	f47f af06 	bne.w	13636 <__gnu_unwind_execute+0xa6>
   1382a:	e6b8      	b.n	1359e <__gnu_unwind_execute+0xe>
   1382c:	f000 020f 	and.w	r2, r0, #15
   13830:	3201      	adds	r2, #1
   13832:	2303      	movs	r3, #3
   13834:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   13838:	4619      	mov	r1, r3
   1383a:	4630      	mov	r0, r6
   1383c:	f7ff fc82 	bl	13144 <_Unwind_VRS_Pop>
   13840:	2800      	cmp	r0, #0
   13842:	f47f aef8 	bne.w	13636 <__gnu_unwind_execute+0xa6>
   13846:	e6aa      	b.n	1359e <__gnu_unwind_execute+0xe>
   13848:	4638      	mov	r0, r7
   1384a:	f7ff fe75 	bl	13538 <next_unwind_byte>
   1384e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   13852:	f000 030f 	and.w	r3, r0, #15
   13856:	3210      	adds	r2, #16
   13858:	3301      	adds	r3, #1
   1385a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   1385e:	e6e3      	b.n	13628 <__gnu_unwind_execute+0x98>

00013860 <__gnu_unwind_frame>:
   13860:	b510      	push	{r4, lr}
   13862:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   13864:	b084      	sub	sp, #16
   13866:	685a      	ldr	r2, [r3, #4]
   13868:	2003      	movs	r0, #3
   1386a:	f88d 000c 	strb.w	r0, [sp, #12]
   1386e:	79dc      	ldrb	r4, [r3, #7]
   13870:	f88d 400d 	strb.w	r4, [sp, #13]
   13874:	0212      	lsls	r2, r2, #8
   13876:	3308      	adds	r3, #8
   13878:	4608      	mov	r0, r1
   1387a:	a901      	add	r1, sp, #4
   1387c:	9201      	str	r2, [sp, #4]
   1387e:	9302      	str	r3, [sp, #8]
   13880:	f7ff fe86 	bl	13590 <__gnu_unwind_execute>
   13884:	b004      	add	sp, #16
   13886:	bd10      	pop	{r4, pc}

00013888 <_Unwind_GetRegionStart>:
   13888:	b508      	push	{r3, lr}
   1388a:	f7ff fe7f 	bl	1358c <unwind_UCB_from_context>
   1388e:	6c80      	ldr	r0, [r0, #72]	; 0x48
   13890:	bd08      	pop	{r3, pc}
   13892:	bf00      	nop

00013894 <_Unwind_GetLanguageSpecificData>:
   13894:	b508      	push	{r3, lr}
   13896:	f7ff fe79 	bl	1358c <unwind_UCB_from_context>
   1389a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1389c:	79c3      	ldrb	r3, [r0, #7]
   1389e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   138a2:	3008      	adds	r0, #8
   138a4:	bd08      	pop	{r3, pc}
   138a6:	bf00      	nop

000138a8 <_Unwind_GetTextRelBase>:
   138a8:	b508      	push	{r3, lr}
   138aa:	f000 f807 	bl	138bc <abort>
   138ae:	bf00      	nop

000138b0 <_Unwind_GetDataRelBase>:
   138b0:	b508      	push	{r3, lr}
   138b2:	f7ff fff9 	bl	138a8 <_Unwind_GetTextRelBase>
   138b6:	bf00      	nop

000138b8 <__aeabi_idiv0>:
   138b8:	4770      	bx	lr
   138ba:	bf00      	nop

000138bc <abort>:
   138bc:	b508      	push	{r3, lr}
   138be:	2006      	movs	r0, #6
   138c0:	f001 fa52 	bl	14d68 <raise>
   138c4:	2001      	movs	r0, #1
   138c6:	f7ec ff11 	bl	6ec <_exit>
   138ca:	bf00      	nop

000138cc <__assert_func>:
   138cc:	b500      	push	{lr}
   138ce:	4c0a      	ldr	r4, [pc, #40]	; (138f8 <__assert_func+0x2c>)
   138d0:	6826      	ldr	r6, [r4, #0]
   138d2:	4605      	mov	r5, r0
   138d4:	b085      	sub	sp, #20
   138d6:	461c      	mov	r4, r3
   138d8:	68f0      	ldr	r0, [r6, #12]
   138da:	b152      	cbz	r2, 138f2 <__assert_func+0x26>
   138dc:	4b07      	ldr	r3, [pc, #28]	; (138fc <__assert_func+0x30>)
   138de:	9202      	str	r2, [sp, #8]
   138e0:	e88d 000a 	stmia.w	sp, {r1, r3}
   138e4:	4622      	mov	r2, r4
   138e6:	462b      	mov	r3, r5
   138e8:	4905      	ldr	r1, [pc, #20]	; (13900 <__assert_func+0x34>)
   138ea:	f000 f819 	bl	13920 <fiprintf>
   138ee:	f7ff ffe5 	bl	138bc <abort>
   138f2:	4b04      	ldr	r3, [pc, #16]	; (13904 <__assert_func+0x38>)
   138f4:	461a      	mov	r2, r3
   138f6:	e7f2      	b.n	138de <__assert_func+0x12>
   138f8:	20000018 	.word	0x20000018
   138fc:	00023434 	.word	0x00023434
   13900:	00023444 	.word	0x00023444
   13904:	0001fe0c 	.word	0x0001fe0c

00013908 <__cxa_atexit>:
   13908:	4613      	mov	r3, r2
   1390a:	460a      	mov	r2, r1
   1390c:	4601      	mov	r1, r0
   1390e:	2002      	movs	r0, #2
   13910:	f005 bbd2 	b.w	190b8 <__register_exitproc>

00013914 <__errno>:
   13914:	4b01      	ldr	r3, [pc, #4]	; (1391c <__errno+0x8>)
   13916:	6818      	ldr	r0, [r3, #0]
   13918:	4770      	bx	lr
   1391a:	bf00      	nop
   1391c:	20000018 	.word	0x20000018

00013920 <fiprintf>:
   13920:	b40e      	push	{r1, r2, r3}
   13922:	b510      	push	{r4, lr}
   13924:	b083      	sub	sp, #12
   13926:	ab05      	add	r3, sp, #20
   13928:	4c06      	ldr	r4, [pc, #24]	; (13944 <fiprintf+0x24>)
   1392a:	f853 2b04 	ldr.w	r2, [r3], #4
   1392e:	9301      	str	r3, [sp, #4]
   13930:	4601      	mov	r1, r0
   13932:	6820      	ldr	r0, [r4, #0]
   13934:	f003 f93e 	bl	16bb4 <_vfiprintf_r>
   13938:	b003      	add	sp, #12
   1393a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1393e:	b003      	add	sp, #12
   13940:	4770      	bx	lr
   13942:	bf00      	nop
   13944:	20000018 	.word	0x20000018

00013948 <fputc>:
   13948:	4b14      	ldr	r3, [pc, #80]	; (1399c <fputc+0x54>)
   1394a:	b570      	push	{r4, r5, r6, lr}
   1394c:	681d      	ldr	r5, [r3, #0]
   1394e:	4606      	mov	r6, r0
   13950:	460c      	mov	r4, r1
   13952:	b10d      	cbz	r5, 13958 <fputc+0x10>
   13954:	6bab      	ldr	r3, [r5, #56]	; 0x38
   13956:	b1c3      	cbz	r3, 1398a <fputc+0x42>
   13958:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1395a:	07d8      	lsls	r0, r3, #31
   1395c:	d402      	bmi.n	13964 <fputc+0x1c>
   1395e:	89a3      	ldrh	r3, [r4, #12]
   13960:	0599      	lsls	r1, r3, #22
   13962:	d516      	bpl.n	13992 <fputc+0x4a>
   13964:	4628      	mov	r0, r5
   13966:	4622      	mov	r2, r4
   13968:	4631      	mov	r1, r6
   1396a:	f000 ffd5 	bl	14918 <_putc_r>
   1396e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13970:	07da      	lsls	r2, r3, #31
   13972:	4605      	mov	r5, r0
   13974:	d402      	bmi.n	1397c <fputc+0x34>
   13976:	89a3      	ldrh	r3, [r4, #12]
   13978:	059b      	lsls	r3, r3, #22
   1397a:	d501      	bpl.n	13980 <fputc+0x38>
   1397c:	4628      	mov	r0, r5
   1397e:	bd70      	pop	{r4, r5, r6, pc}
   13980:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13982:	f000 fa87 	bl	13e94 <__retarget_lock_release_recursive>
   13986:	4628      	mov	r0, r5
   13988:	bd70      	pop	{r4, r5, r6, pc}
   1398a:	4628      	mov	r0, r5
   1398c:	f006 fcce 	bl	1a32c <__sinit>
   13990:	e7e2      	b.n	13958 <fputc+0x10>
   13992:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13994:	f000 fa7c 	bl	13e90 <__retarget_lock_acquire_recursive>
   13998:	e7e4      	b.n	13964 <fputc+0x1c>
   1399a:	bf00      	nop
   1399c:	20000018 	.word	0x20000018

000139a0 <_fputs_r>:
   139a0:	b530      	push	{r4, r5, lr}
   139a2:	b087      	sub	sp, #28
   139a4:	4605      	mov	r5, r0
   139a6:	4608      	mov	r0, r1
   139a8:	4614      	mov	r4, r2
   139aa:	9101      	str	r1, [sp, #4]
   139ac:	f001 fdc8 	bl	15540 <strlen>
   139b0:	aa01      	add	r2, sp, #4
   139b2:	2301      	movs	r3, #1
   139b4:	9005      	str	r0, [sp, #20]
   139b6:	9002      	str	r0, [sp, #8]
   139b8:	9203      	str	r2, [sp, #12]
   139ba:	9304      	str	r3, [sp, #16]
   139bc:	b10d      	cbz	r5, 139c2 <_fputs_r+0x22>
   139be:	6bab      	ldr	r3, [r5, #56]	; 0x38
   139c0:	b333      	cbz	r3, 13a10 <_fputs_r+0x70>
   139c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   139c4:	f013 0f01 	tst.w	r3, #1
   139c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   139cc:	b29a      	uxth	r2, r3
   139ce:	d101      	bne.n	139d4 <_fputs_r+0x34>
   139d0:	0590      	lsls	r0, r2, #22
   139d2:	d521      	bpl.n	13a18 <_fputs_r+0x78>
   139d4:	0491      	lsls	r1, r2, #18
   139d6:	d406      	bmi.n	139e6 <_fputs_r+0x46>
   139d8:	6e62      	ldr	r2, [r4, #100]	; 0x64
   139da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   139de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   139e2:	81a3      	strh	r3, [r4, #12]
   139e4:	6662      	str	r2, [r4, #100]	; 0x64
   139e6:	4628      	mov	r0, r5
   139e8:	aa03      	add	r2, sp, #12
   139ea:	4621      	mov	r1, r4
   139ec:	f000 f838 	bl	13a60 <__sfvwrite_r>
   139f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   139f2:	07da      	lsls	r2, r3, #31
   139f4:	4605      	mov	r5, r0
   139f6:	d402      	bmi.n	139fe <_fputs_r+0x5e>
   139f8:	89a3      	ldrh	r3, [r4, #12]
   139fa:	059b      	lsls	r3, r3, #22
   139fc:	d502      	bpl.n	13a04 <_fputs_r+0x64>
   139fe:	4628      	mov	r0, r5
   13a00:	b007      	add	sp, #28
   13a02:	bd30      	pop	{r4, r5, pc}
   13a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13a06:	f000 fa45 	bl	13e94 <__retarget_lock_release_recursive>
   13a0a:	4628      	mov	r0, r5
   13a0c:	b007      	add	sp, #28
   13a0e:	bd30      	pop	{r4, r5, pc}
   13a10:	4628      	mov	r0, r5
   13a12:	f006 fc8b 	bl	1a32c <__sinit>
   13a16:	e7d4      	b.n	139c2 <_fputs_r+0x22>
   13a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13a1a:	f000 fa39 	bl	13e90 <__retarget_lock_acquire_recursive>
   13a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13a22:	b29a      	uxth	r2, r3
   13a24:	e7d6      	b.n	139d4 <_fputs_r+0x34>
   13a26:	bf00      	nop

00013a28 <fputs>:
   13a28:	4b02      	ldr	r3, [pc, #8]	; (13a34 <fputs+0xc>)
   13a2a:	460a      	mov	r2, r1
   13a2c:	4601      	mov	r1, r0
   13a2e:	6818      	ldr	r0, [r3, #0]
   13a30:	f7ff bfb6 	b.w	139a0 <_fputs_r>
   13a34:	20000018 	.word	0x20000018

00013a38 <_fstat_r>:
   13a38:	b538      	push	{r3, r4, r5, lr}
   13a3a:	460b      	mov	r3, r1
   13a3c:	4c07      	ldr	r4, [pc, #28]	; (13a5c <_fstat_r+0x24>)
   13a3e:	4605      	mov	r5, r0
   13a40:	4611      	mov	r1, r2
   13a42:	4618      	mov	r0, r3
   13a44:	2300      	movs	r3, #0
   13a46:	6023      	str	r3, [r4, #0]
   13a48:	f7ec fe47 	bl	6da <_fstat>
   13a4c:	1c43      	adds	r3, r0, #1
   13a4e:	d000      	beq.n	13a52 <_fstat_r+0x1a>
   13a50:	bd38      	pop	{r3, r4, r5, pc}
   13a52:	6823      	ldr	r3, [r4, #0]
   13a54:	2b00      	cmp	r3, #0
   13a56:	d0fb      	beq.n	13a50 <_fstat_r+0x18>
   13a58:	602b      	str	r3, [r5, #0]
   13a5a:	bd38      	pop	{r3, r4, r5, pc}
   13a5c:	2000fcc0 	.word	0x2000fcc0

00013a60 <__sfvwrite_r>:
   13a60:	6893      	ldr	r3, [r2, #8]
   13a62:	2b00      	cmp	r3, #0
   13a64:	d073      	beq.n	13b4e <__sfvwrite_r+0xee>
   13a66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a6a:	898b      	ldrh	r3, [r1, #12]
   13a6c:	b083      	sub	sp, #12
   13a6e:	460c      	mov	r4, r1
   13a70:	0719      	lsls	r1, r3, #28
   13a72:	9000      	str	r0, [sp, #0]
   13a74:	4616      	mov	r6, r2
   13a76:	d526      	bpl.n	13ac6 <__sfvwrite_r+0x66>
   13a78:	6922      	ldr	r2, [r4, #16]
   13a7a:	b322      	cbz	r2, 13ac6 <__sfvwrite_r+0x66>
   13a7c:	f013 0002 	ands.w	r0, r3, #2
   13a80:	6835      	ldr	r5, [r6, #0]
   13a82:	d02c      	beq.n	13ade <__sfvwrite_r+0x7e>
   13a84:	f04f 0900 	mov.w	r9, #0
   13a88:	4fb0      	ldr	r7, [pc, #704]	; (13d4c <__sfvwrite_r+0x2ec>)
   13a8a:	46c8      	mov	r8, r9
   13a8c:	46b2      	mov	sl, r6
   13a8e:	45b8      	cmp	r8, r7
   13a90:	4643      	mov	r3, r8
   13a92:	464a      	mov	r2, r9
   13a94:	bf28      	it	cs
   13a96:	463b      	movcs	r3, r7
   13a98:	9800      	ldr	r0, [sp, #0]
   13a9a:	f1b8 0f00 	cmp.w	r8, #0
   13a9e:	d050      	beq.n	13b42 <__sfvwrite_r+0xe2>
   13aa0:	69e1      	ldr	r1, [r4, #28]
   13aa2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   13aa4:	47b0      	blx	r6
   13aa6:	2800      	cmp	r0, #0
   13aa8:	dd58      	ble.n	13b5c <__sfvwrite_r+0xfc>
   13aaa:	f8da 3008 	ldr.w	r3, [sl, #8]
   13aae:	1a1b      	subs	r3, r3, r0
   13ab0:	4481      	add	r9, r0
   13ab2:	eba8 0800 	sub.w	r8, r8, r0
   13ab6:	f8ca 3008 	str.w	r3, [sl, #8]
   13aba:	2b00      	cmp	r3, #0
   13abc:	d1e7      	bne.n	13a8e <__sfvwrite_r+0x2e>
   13abe:	2000      	movs	r0, #0
   13ac0:	b003      	add	sp, #12
   13ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ac6:	4621      	mov	r1, r4
   13ac8:	9800      	ldr	r0, [sp, #0]
   13aca:	f005 fa91 	bl	18ff0 <__swsetup_r>
   13ace:	2800      	cmp	r0, #0
   13ad0:	f040 8133 	bne.w	13d3a <__sfvwrite_r+0x2da>
   13ad4:	89a3      	ldrh	r3, [r4, #12]
   13ad6:	6835      	ldr	r5, [r6, #0]
   13ad8:	f013 0002 	ands.w	r0, r3, #2
   13adc:	d1d2      	bne.n	13a84 <__sfvwrite_r+0x24>
   13ade:	f013 0901 	ands.w	r9, r3, #1
   13ae2:	d145      	bne.n	13b70 <__sfvwrite_r+0x110>
   13ae4:	464f      	mov	r7, r9
   13ae6:	9601      	str	r6, [sp, #4]
   13ae8:	b337      	cbz	r7, 13b38 <__sfvwrite_r+0xd8>
   13aea:	059a      	lsls	r2, r3, #22
   13aec:	f8d4 8008 	ldr.w	r8, [r4, #8]
   13af0:	f140 8083 	bpl.w	13bfa <__sfvwrite_r+0x19a>
   13af4:	4547      	cmp	r7, r8
   13af6:	46c3      	mov	fp, r8
   13af8:	f0c0 80ab 	bcc.w	13c52 <__sfvwrite_r+0x1f2>
   13afc:	f413 6f90 	tst.w	r3, #1152	; 0x480
   13b00:	f040 80ac 	bne.w	13c5c <__sfvwrite_r+0x1fc>
   13b04:	6820      	ldr	r0, [r4, #0]
   13b06:	46ba      	mov	sl, r7
   13b08:	465a      	mov	r2, fp
   13b0a:	4649      	mov	r1, r9
   13b0c:	f000 fe32 	bl	14774 <memmove>
   13b10:	68a2      	ldr	r2, [r4, #8]
   13b12:	6823      	ldr	r3, [r4, #0]
   13b14:	eba2 0208 	sub.w	r2, r2, r8
   13b18:	445b      	add	r3, fp
   13b1a:	60a2      	str	r2, [r4, #8]
   13b1c:	6023      	str	r3, [r4, #0]
   13b1e:	9a01      	ldr	r2, [sp, #4]
   13b20:	6893      	ldr	r3, [r2, #8]
   13b22:	eba3 030a 	sub.w	r3, r3, sl
   13b26:	44d1      	add	r9, sl
   13b28:	eba7 070a 	sub.w	r7, r7, sl
   13b2c:	6093      	str	r3, [r2, #8]
   13b2e:	2b00      	cmp	r3, #0
   13b30:	d0c5      	beq.n	13abe <__sfvwrite_r+0x5e>
   13b32:	89a3      	ldrh	r3, [r4, #12]
   13b34:	2f00      	cmp	r7, #0
   13b36:	d1d8      	bne.n	13aea <__sfvwrite_r+0x8a>
   13b38:	f8d5 9000 	ldr.w	r9, [r5]
   13b3c:	686f      	ldr	r7, [r5, #4]
   13b3e:	3508      	adds	r5, #8
   13b40:	e7d2      	b.n	13ae8 <__sfvwrite_r+0x88>
   13b42:	f8d5 9000 	ldr.w	r9, [r5]
   13b46:	f8d5 8004 	ldr.w	r8, [r5, #4]
   13b4a:	3508      	adds	r5, #8
   13b4c:	e79f      	b.n	13a8e <__sfvwrite_r+0x2e>
   13b4e:	2000      	movs	r0, #0
   13b50:	4770      	bx	lr
   13b52:	4621      	mov	r1, r4
   13b54:	9800      	ldr	r0, [sp, #0]
   13b56:	f006 fb91 	bl	1a27c <_fflush_r>
   13b5a:	b370      	cbz	r0, 13bba <__sfvwrite_r+0x15a>
   13b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13b64:	f04f 30ff 	mov.w	r0, #4294967295
   13b68:	81a3      	strh	r3, [r4, #12]
   13b6a:	b003      	add	sp, #12
   13b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b70:	4681      	mov	r9, r0
   13b72:	4633      	mov	r3, r6
   13b74:	464e      	mov	r6, r9
   13b76:	46a8      	mov	r8, r5
   13b78:	469a      	mov	sl, r3
   13b7a:	464d      	mov	r5, r9
   13b7c:	b34e      	cbz	r6, 13bd2 <__sfvwrite_r+0x172>
   13b7e:	b380      	cbz	r0, 13be2 <__sfvwrite_r+0x182>
   13b80:	6820      	ldr	r0, [r4, #0]
   13b82:	6923      	ldr	r3, [r4, #16]
   13b84:	6962      	ldr	r2, [r4, #20]
   13b86:	45b1      	cmp	r9, r6
   13b88:	46cb      	mov	fp, r9
   13b8a:	bf28      	it	cs
   13b8c:	46b3      	movcs	fp, r6
   13b8e:	4298      	cmp	r0, r3
   13b90:	465f      	mov	r7, fp
   13b92:	d904      	bls.n	13b9e <__sfvwrite_r+0x13e>
   13b94:	68a3      	ldr	r3, [r4, #8]
   13b96:	4413      	add	r3, r2
   13b98:	459b      	cmp	fp, r3
   13b9a:	f300 80a6 	bgt.w	13cea <__sfvwrite_r+0x28a>
   13b9e:	4593      	cmp	fp, r2
   13ba0:	db4b      	blt.n	13c3a <__sfvwrite_r+0x1da>
   13ba2:	4613      	mov	r3, r2
   13ba4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   13ba6:	69e1      	ldr	r1, [r4, #28]
   13ba8:	9800      	ldr	r0, [sp, #0]
   13baa:	462a      	mov	r2, r5
   13bac:	47b8      	blx	r7
   13bae:	1e07      	subs	r7, r0, #0
   13bb0:	ddd4      	ble.n	13b5c <__sfvwrite_r+0xfc>
   13bb2:	ebb9 0907 	subs.w	r9, r9, r7
   13bb6:	d0cc      	beq.n	13b52 <__sfvwrite_r+0xf2>
   13bb8:	2001      	movs	r0, #1
   13bba:	f8da 3008 	ldr.w	r3, [sl, #8]
   13bbe:	1bdb      	subs	r3, r3, r7
   13bc0:	443d      	add	r5, r7
   13bc2:	1bf6      	subs	r6, r6, r7
   13bc4:	f8ca 3008 	str.w	r3, [sl, #8]
   13bc8:	2b00      	cmp	r3, #0
   13bca:	f43f af78 	beq.w	13abe <__sfvwrite_r+0x5e>
   13bce:	2e00      	cmp	r6, #0
   13bd0:	d1d5      	bne.n	13b7e <__sfvwrite_r+0x11e>
   13bd2:	f108 0308 	add.w	r3, r8, #8
   13bd6:	e913 0060 	ldmdb	r3, {r5, r6}
   13bda:	4698      	mov	r8, r3
   13bdc:	3308      	adds	r3, #8
   13bde:	2e00      	cmp	r6, #0
   13be0:	d0f9      	beq.n	13bd6 <__sfvwrite_r+0x176>
   13be2:	4632      	mov	r2, r6
   13be4:	210a      	movs	r1, #10
   13be6:	4628      	mov	r0, r5
   13be8:	f000 fcaa 	bl	14540 <memchr>
   13bec:	2800      	cmp	r0, #0
   13bee:	f000 80a1 	beq.w	13d34 <__sfvwrite_r+0x2d4>
   13bf2:	3001      	adds	r0, #1
   13bf4:	eba0 0905 	sub.w	r9, r0, r5
   13bf8:	e7c2      	b.n	13b80 <__sfvwrite_r+0x120>
   13bfa:	6820      	ldr	r0, [r4, #0]
   13bfc:	6923      	ldr	r3, [r4, #16]
   13bfe:	4298      	cmp	r0, r3
   13c00:	d802      	bhi.n	13c08 <__sfvwrite_r+0x1a8>
   13c02:	6963      	ldr	r3, [r4, #20]
   13c04:	429f      	cmp	r7, r3
   13c06:	d25d      	bcs.n	13cc4 <__sfvwrite_r+0x264>
   13c08:	45b8      	cmp	r8, r7
   13c0a:	bf28      	it	cs
   13c0c:	46b8      	movcs	r8, r7
   13c0e:	4642      	mov	r2, r8
   13c10:	4649      	mov	r1, r9
   13c12:	f000 fdaf 	bl	14774 <memmove>
   13c16:	68a3      	ldr	r3, [r4, #8]
   13c18:	6822      	ldr	r2, [r4, #0]
   13c1a:	eba3 0308 	sub.w	r3, r3, r8
   13c1e:	4442      	add	r2, r8
   13c20:	60a3      	str	r3, [r4, #8]
   13c22:	6022      	str	r2, [r4, #0]
   13c24:	b10b      	cbz	r3, 13c2a <__sfvwrite_r+0x1ca>
   13c26:	46c2      	mov	sl, r8
   13c28:	e779      	b.n	13b1e <__sfvwrite_r+0xbe>
   13c2a:	4621      	mov	r1, r4
   13c2c:	9800      	ldr	r0, [sp, #0]
   13c2e:	f006 fb25 	bl	1a27c <_fflush_r>
   13c32:	2800      	cmp	r0, #0
   13c34:	d192      	bne.n	13b5c <__sfvwrite_r+0xfc>
   13c36:	46c2      	mov	sl, r8
   13c38:	e771      	b.n	13b1e <__sfvwrite_r+0xbe>
   13c3a:	465a      	mov	r2, fp
   13c3c:	4629      	mov	r1, r5
   13c3e:	f000 fd99 	bl	14774 <memmove>
   13c42:	68a2      	ldr	r2, [r4, #8]
   13c44:	6823      	ldr	r3, [r4, #0]
   13c46:	eba2 020b 	sub.w	r2, r2, fp
   13c4a:	445b      	add	r3, fp
   13c4c:	60a2      	str	r2, [r4, #8]
   13c4e:	6023      	str	r3, [r4, #0]
   13c50:	e7af      	b.n	13bb2 <__sfvwrite_r+0x152>
   13c52:	6820      	ldr	r0, [r4, #0]
   13c54:	46b8      	mov	r8, r7
   13c56:	46ba      	mov	sl, r7
   13c58:	46bb      	mov	fp, r7
   13c5a:	e755      	b.n	13b08 <__sfvwrite_r+0xa8>
   13c5c:	6962      	ldr	r2, [r4, #20]
   13c5e:	6820      	ldr	r0, [r4, #0]
   13c60:	6921      	ldr	r1, [r4, #16]
   13c62:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   13c66:	eba0 0a01 	sub.w	sl, r0, r1
   13c6a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   13c6e:	f10a 0001 	add.w	r0, sl, #1
   13c72:	ea4f 0868 	mov.w	r8, r8, asr #1
   13c76:	4438      	add	r0, r7
   13c78:	4540      	cmp	r0, r8
   13c7a:	4642      	mov	r2, r8
   13c7c:	bf84      	itt	hi
   13c7e:	4680      	movhi	r8, r0
   13c80:	4642      	movhi	r2, r8
   13c82:	055b      	lsls	r3, r3, #21
   13c84:	d544      	bpl.n	13d10 <__sfvwrite_r+0x2b0>
   13c86:	4611      	mov	r1, r2
   13c88:	9800      	ldr	r0, [sp, #0]
   13c8a:	f000 f98d 	bl	13fa8 <_malloc_r>
   13c8e:	4683      	mov	fp, r0
   13c90:	2800      	cmp	r0, #0
   13c92:	d055      	beq.n	13d40 <__sfvwrite_r+0x2e0>
   13c94:	4652      	mov	r2, sl
   13c96:	6921      	ldr	r1, [r4, #16]
   13c98:	f000 fcd2 	bl	14640 <memcpy>
   13c9c:	89a3      	ldrh	r3, [r4, #12]
   13c9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   13ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13ca6:	81a3      	strh	r3, [r4, #12]
   13ca8:	eb0b 000a 	add.w	r0, fp, sl
   13cac:	eba8 030a 	sub.w	r3, r8, sl
   13cb0:	f8c4 b010 	str.w	fp, [r4, #16]
   13cb4:	f8c4 8014 	str.w	r8, [r4, #20]
   13cb8:	6020      	str	r0, [r4, #0]
   13cba:	60a3      	str	r3, [r4, #8]
   13cbc:	46b8      	mov	r8, r7
   13cbe:	46ba      	mov	sl, r7
   13cc0:	46bb      	mov	fp, r7
   13cc2:	e721      	b.n	13b08 <__sfvwrite_r+0xa8>
   13cc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   13cc8:	42b9      	cmp	r1, r7
   13cca:	bf28      	it	cs
   13ccc:	4639      	movcs	r1, r7
   13cce:	464a      	mov	r2, r9
   13cd0:	fb91 f1f3 	sdiv	r1, r1, r3
   13cd4:	9800      	ldr	r0, [sp, #0]
   13cd6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   13cd8:	fb03 f301 	mul.w	r3, r3, r1
   13cdc:	69e1      	ldr	r1, [r4, #28]
   13cde:	47b0      	blx	r6
   13ce0:	f1b0 0a00 	subs.w	sl, r0, #0
   13ce4:	f73f af1b 	bgt.w	13b1e <__sfvwrite_r+0xbe>
   13ce8:	e738      	b.n	13b5c <__sfvwrite_r+0xfc>
   13cea:	461a      	mov	r2, r3
   13cec:	4629      	mov	r1, r5
   13cee:	9301      	str	r3, [sp, #4]
   13cf0:	f000 fd40 	bl	14774 <memmove>
   13cf4:	6822      	ldr	r2, [r4, #0]
   13cf6:	9b01      	ldr	r3, [sp, #4]
   13cf8:	9800      	ldr	r0, [sp, #0]
   13cfa:	441a      	add	r2, r3
   13cfc:	6022      	str	r2, [r4, #0]
   13cfe:	4621      	mov	r1, r4
   13d00:	f006 fabc 	bl	1a27c <_fflush_r>
   13d04:	9b01      	ldr	r3, [sp, #4]
   13d06:	2800      	cmp	r0, #0
   13d08:	f47f af28 	bne.w	13b5c <__sfvwrite_r+0xfc>
   13d0c:	461f      	mov	r7, r3
   13d0e:	e750      	b.n	13bb2 <__sfvwrite_r+0x152>
   13d10:	9800      	ldr	r0, [sp, #0]
   13d12:	f000 fe41 	bl	14998 <_realloc_r>
   13d16:	4683      	mov	fp, r0
   13d18:	2800      	cmp	r0, #0
   13d1a:	d1c5      	bne.n	13ca8 <__sfvwrite_r+0x248>
   13d1c:	9d00      	ldr	r5, [sp, #0]
   13d1e:	6921      	ldr	r1, [r4, #16]
   13d20:	4628      	mov	r0, r5
   13d22:	f006 fc29 	bl	1a578 <_free_r>
   13d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13d2a:	220c      	movs	r2, #12
   13d2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13d30:	602a      	str	r2, [r5, #0]
   13d32:	e715      	b.n	13b60 <__sfvwrite_r+0x100>
   13d34:	f106 0901 	add.w	r9, r6, #1
   13d38:	e722      	b.n	13b80 <__sfvwrite_r+0x120>
   13d3a:	f04f 30ff 	mov.w	r0, #4294967295
   13d3e:	e6bf      	b.n	13ac0 <__sfvwrite_r+0x60>
   13d40:	9a00      	ldr	r2, [sp, #0]
   13d42:	230c      	movs	r3, #12
   13d44:	6013      	str	r3, [r2, #0]
   13d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13d4a:	e709      	b.n	13b60 <__sfvwrite_r+0x100>
   13d4c:	7ffffc00 	.word	0x7ffffc00

00013d50 <_fwrite_r>:
   13d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13d54:	b086      	sub	sp, #24
   13d56:	fb02 f503 	mul.w	r5, r2, r3
   13d5a:	4690      	mov	r8, r2
   13d5c:	461e      	mov	r6, r3
   13d5e:	aa01      	add	r2, sp, #4
   13d60:	2301      	movs	r3, #1
   13d62:	9101      	str	r1, [sp, #4]
   13d64:	9502      	str	r5, [sp, #8]
   13d66:	9505      	str	r5, [sp, #20]
   13d68:	9203      	str	r2, [sp, #12]
   13d6a:	9304      	str	r3, [sp, #16]
   13d6c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   13d6e:	4607      	mov	r7, r0
   13d70:	b110      	cbz	r0, 13d78 <_fwrite_r+0x28>
   13d72:	6b83      	ldr	r3, [r0, #56]	; 0x38
   13d74:	2b00      	cmp	r3, #0
   13d76:	d031      	beq.n	13ddc <_fwrite_r+0x8c>
   13d78:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13d7a:	f013 0f01 	tst.w	r3, #1
   13d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13d82:	b29a      	uxth	r2, r3
   13d84:	d101      	bne.n	13d8a <_fwrite_r+0x3a>
   13d86:	0591      	lsls	r1, r2, #22
   13d88:	d52b      	bpl.n	13de2 <_fwrite_r+0x92>
   13d8a:	0492      	lsls	r2, r2, #18
   13d8c:	d406      	bmi.n	13d9c <_fwrite_r+0x4c>
   13d8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13d90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   13d94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   13d98:	81a3      	strh	r3, [r4, #12]
   13d9a:	6662      	str	r2, [r4, #100]	; 0x64
   13d9c:	4638      	mov	r0, r7
   13d9e:	aa03      	add	r2, sp, #12
   13da0:	4621      	mov	r1, r4
   13da2:	f7ff fe5d 	bl	13a60 <__sfvwrite_r>
   13da6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13da8:	b940      	cbnz	r0, 13dbc <_fwrite_r+0x6c>
   13daa:	07d8      	lsls	r0, r3, #31
   13dac:	d402      	bmi.n	13db4 <_fwrite_r+0x64>
   13dae:	89a3      	ldrh	r3, [r4, #12]
   13db0:	0599      	lsls	r1, r3, #22
   13db2:	d51d      	bpl.n	13df0 <_fwrite_r+0xa0>
   13db4:	4630      	mov	r0, r6
   13db6:	b006      	add	sp, #24
   13db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13dbc:	07da      	lsls	r2, r3, #31
   13dbe:	d506      	bpl.n	13dce <_fwrite_r+0x7e>
   13dc0:	9805      	ldr	r0, [sp, #20]
   13dc2:	1a2d      	subs	r5, r5, r0
   13dc4:	fbb5 f0f8 	udiv	r0, r5, r8
   13dc8:	b006      	add	sp, #24
   13dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13dce:	89a3      	ldrh	r3, [r4, #12]
   13dd0:	059b      	lsls	r3, r3, #22
   13dd2:	d4f5      	bmi.n	13dc0 <_fwrite_r+0x70>
   13dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13dd6:	f000 f85d 	bl	13e94 <__retarget_lock_release_recursive>
   13dda:	e7f1      	b.n	13dc0 <_fwrite_r+0x70>
   13ddc:	f006 faa6 	bl	1a32c <__sinit>
   13de0:	e7ca      	b.n	13d78 <_fwrite_r+0x28>
   13de2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13de4:	f000 f854 	bl	13e90 <__retarget_lock_acquire_recursive>
   13de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13dec:	b29a      	uxth	r2, r3
   13dee:	e7cc      	b.n	13d8a <_fwrite_r+0x3a>
   13df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13df2:	f000 f84f 	bl	13e94 <__retarget_lock_release_recursive>
   13df6:	4630      	mov	r0, r6
   13df8:	e7e6      	b.n	13dc8 <_fwrite_r+0x78>
   13dfa:	bf00      	nop

00013dfc <fwrite>:
   13dfc:	b510      	push	{r4, lr}
   13dfe:	b082      	sub	sp, #8
   13e00:	4c05      	ldr	r4, [pc, #20]	; (13e18 <fwrite+0x1c>)
   13e02:	9300      	str	r3, [sp, #0]
   13e04:	6824      	ldr	r4, [r4, #0]
   13e06:	4613      	mov	r3, r2
   13e08:	460a      	mov	r2, r1
   13e0a:	4601      	mov	r1, r0
   13e0c:	4620      	mov	r0, r4
   13e0e:	f7ff ff9f 	bl	13d50 <_fwrite_r>
   13e12:	b002      	add	sp, #8
   13e14:	bd10      	pop	{r4, pc}
   13e16:	bf00      	nop
   13e18:	20000018 	.word	0x20000018

00013e1c <__libc_init_array>:
   13e1c:	b570      	push	{r4, r5, r6, lr}
   13e1e:	4e0f      	ldr	r6, [pc, #60]	; (13e5c <__libc_init_array+0x40>)
   13e20:	4d0f      	ldr	r5, [pc, #60]	; (13e60 <__libc_init_array+0x44>)
   13e22:	1b76      	subs	r6, r6, r5
   13e24:	10b6      	asrs	r6, r6, #2
   13e26:	bf18      	it	ne
   13e28:	2400      	movne	r4, #0
   13e2a:	d005      	beq.n	13e38 <__libc_init_array+0x1c>
   13e2c:	3401      	adds	r4, #1
   13e2e:	f855 3b04 	ldr.w	r3, [r5], #4
   13e32:	4798      	blx	r3
   13e34:	42a6      	cmp	r6, r4
   13e36:	d1f9      	bne.n	13e2c <__libc_init_array+0x10>
   13e38:	4e0a      	ldr	r6, [pc, #40]	; (13e64 <__libc_init_array+0x48>)
   13e3a:	4d0b      	ldr	r5, [pc, #44]	; (13e68 <__libc_init_array+0x4c>)
   13e3c:	1b76      	subs	r6, r6, r5
   13e3e:	f010 f8ad 	bl	23f9c <_init>
   13e42:	10b6      	asrs	r6, r6, #2
   13e44:	bf18      	it	ne
   13e46:	2400      	movne	r4, #0
   13e48:	d006      	beq.n	13e58 <__libc_init_array+0x3c>
   13e4a:	3401      	adds	r4, #1
   13e4c:	f855 3b04 	ldr.w	r3, [r5], #4
   13e50:	4798      	blx	r3
   13e52:	42a6      	cmp	r6, r4
   13e54:	d1f9      	bne.n	13e4a <__libc_init_array+0x2e>
   13e56:	bd70      	pop	{r4, r5, r6, pc}
   13e58:	bd70      	pop	{r4, r5, r6, pc}
   13e5a:	bf00      	nop
   13e5c:	00023fa8 	.word	0x00023fa8
   13e60:	00023fa8 	.word	0x00023fa8
   13e64:	00023fc8 	.word	0x00023fc8
   13e68:	00023fa8 	.word	0x00023fa8

00013e6c <__locale_mb_cur_max>:
   13e6c:	4b04      	ldr	r3, [pc, #16]	; (13e80 <__locale_mb_cur_max+0x14>)
   13e6e:	4a05      	ldr	r2, [pc, #20]	; (13e84 <__locale_mb_cur_max+0x18>)
   13e70:	681b      	ldr	r3, [r3, #0]
   13e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   13e74:	2b00      	cmp	r3, #0
   13e76:	bf08      	it	eq
   13e78:	4613      	moveq	r3, r2
   13e7a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   13e7e:	4770      	bx	lr
   13e80:	20000018 	.word	0x20000018
   13e84:	20000448 	.word	0x20000448

00013e88 <__retarget_lock_init_recursive>:
   13e88:	4770      	bx	lr
   13e8a:	bf00      	nop

00013e8c <__retarget_lock_close_recursive>:
   13e8c:	4770      	bx	lr
   13e8e:	bf00      	nop

00013e90 <__retarget_lock_acquire_recursive>:
   13e90:	4770      	bx	lr
   13e92:	bf00      	nop

00013e94 <__retarget_lock_release_recursive>:
   13e94:	4770      	bx	lr
   13e96:	bf00      	nop

00013e98 <__swhatbuf_r>:
   13e98:	b570      	push	{r4, r5, r6, lr}
   13e9a:	460c      	mov	r4, r1
   13e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   13ea0:	2900      	cmp	r1, #0
   13ea2:	b090      	sub	sp, #64	; 0x40
   13ea4:	4615      	mov	r5, r2
   13ea6:	461e      	mov	r6, r3
   13ea8:	db14      	blt.n	13ed4 <__swhatbuf_r+0x3c>
   13eaa:	aa01      	add	r2, sp, #4
   13eac:	f7ff fdc4 	bl	13a38 <_fstat_r>
   13eb0:	2800      	cmp	r0, #0
   13eb2:	db0f      	blt.n	13ed4 <__swhatbuf_r+0x3c>
   13eb4:	9a02      	ldr	r2, [sp, #8]
   13eb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   13eba:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   13ebe:	fab2 f282 	clz	r2, r2
   13ec2:	0952      	lsrs	r2, r2, #5
   13ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   13ec8:	f44f 6000 	mov.w	r0, #2048	; 0x800
   13ecc:	6032      	str	r2, [r6, #0]
   13ece:	602b      	str	r3, [r5, #0]
   13ed0:	b010      	add	sp, #64	; 0x40
   13ed2:	bd70      	pop	{r4, r5, r6, pc}
   13ed4:	89a2      	ldrh	r2, [r4, #12]
   13ed6:	2300      	movs	r3, #0
   13ed8:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   13edc:	6033      	str	r3, [r6, #0]
   13ede:	d004      	beq.n	13eea <__swhatbuf_r+0x52>
   13ee0:	2240      	movs	r2, #64	; 0x40
   13ee2:	4618      	mov	r0, r3
   13ee4:	602a      	str	r2, [r5, #0]
   13ee6:	b010      	add	sp, #64	; 0x40
   13ee8:	bd70      	pop	{r4, r5, r6, pc}
   13eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
   13eee:	602b      	str	r3, [r5, #0]
   13ef0:	b010      	add	sp, #64	; 0x40
   13ef2:	bd70      	pop	{r4, r5, r6, pc}

00013ef4 <__smakebuf_r>:
   13ef4:	898a      	ldrh	r2, [r1, #12]
   13ef6:	0792      	lsls	r2, r2, #30
   13ef8:	460b      	mov	r3, r1
   13efa:	d506      	bpl.n	13f0a <__smakebuf_r+0x16>
   13efc:	f101 0243 	add.w	r2, r1, #67	; 0x43
   13f00:	2101      	movs	r1, #1
   13f02:	601a      	str	r2, [r3, #0]
   13f04:	611a      	str	r2, [r3, #16]
   13f06:	6159      	str	r1, [r3, #20]
   13f08:	4770      	bx	lr
   13f0a:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f0c:	b083      	sub	sp, #12
   13f0e:	ab01      	add	r3, sp, #4
   13f10:	466a      	mov	r2, sp
   13f12:	460c      	mov	r4, r1
   13f14:	4606      	mov	r6, r0
   13f16:	f7ff ffbf 	bl	13e98 <__swhatbuf_r>
   13f1a:	9900      	ldr	r1, [sp, #0]
   13f1c:	4605      	mov	r5, r0
   13f1e:	4630      	mov	r0, r6
   13f20:	f000 f842 	bl	13fa8 <_malloc_r>
   13f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13f28:	b1d8      	cbz	r0, 13f62 <__smakebuf_r+0x6e>
   13f2a:	9a01      	ldr	r2, [sp, #4]
   13f2c:	4f15      	ldr	r7, [pc, #84]	; (13f84 <__smakebuf_r+0x90>)
   13f2e:	9900      	ldr	r1, [sp, #0]
   13f30:	63f7      	str	r7, [r6, #60]	; 0x3c
   13f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13f36:	81a3      	strh	r3, [r4, #12]
   13f38:	6020      	str	r0, [r4, #0]
   13f3a:	6120      	str	r0, [r4, #16]
   13f3c:	6161      	str	r1, [r4, #20]
   13f3e:	b91a      	cbnz	r2, 13f48 <__smakebuf_r+0x54>
   13f40:	432b      	orrs	r3, r5
   13f42:	81a3      	strh	r3, [r4, #12]
   13f44:	b003      	add	sp, #12
   13f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13f48:	4630      	mov	r0, r6
   13f4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13f4e:	f006 fc23 	bl	1a798 <_isatty_r>
   13f52:	b1a0      	cbz	r0, 13f7e <__smakebuf_r+0x8a>
   13f54:	89a3      	ldrh	r3, [r4, #12]
   13f56:	f023 0303 	bic.w	r3, r3, #3
   13f5a:	f043 0301 	orr.w	r3, r3, #1
   13f5e:	b21b      	sxth	r3, r3
   13f60:	e7ee      	b.n	13f40 <__smakebuf_r+0x4c>
   13f62:	059a      	lsls	r2, r3, #22
   13f64:	d4ee      	bmi.n	13f44 <__smakebuf_r+0x50>
   13f66:	f023 0303 	bic.w	r3, r3, #3
   13f6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   13f6e:	f043 0302 	orr.w	r3, r3, #2
   13f72:	2101      	movs	r1, #1
   13f74:	81a3      	strh	r3, [r4, #12]
   13f76:	6022      	str	r2, [r4, #0]
   13f78:	6122      	str	r2, [r4, #16]
   13f7a:	6161      	str	r1, [r4, #20]
   13f7c:	e7e2      	b.n	13f44 <__smakebuf_r+0x50>
   13f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13f82:	e7dd      	b.n	13f40 <__smakebuf_r+0x4c>
   13f84:	0001a2d1 	.word	0x0001a2d1

00013f88 <malloc>:
   13f88:	4b02      	ldr	r3, [pc, #8]	; (13f94 <malloc+0xc>)
   13f8a:	4601      	mov	r1, r0
   13f8c:	6818      	ldr	r0, [r3, #0]
   13f8e:	f000 b80b 	b.w	13fa8 <_malloc_r>
   13f92:	bf00      	nop
   13f94:	20000018 	.word	0x20000018

00013f98 <free>:
   13f98:	4b02      	ldr	r3, [pc, #8]	; (13fa4 <free+0xc>)
   13f9a:	4601      	mov	r1, r0
   13f9c:	6818      	ldr	r0, [r3, #0]
   13f9e:	f006 baeb 	b.w	1a578 <_free_r>
   13fa2:	bf00      	nop
   13fa4:	20000018 	.word	0x20000018

00013fa8 <_malloc_r>:
   13fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fac:	f101 060b 	add.w	r6, r1, #11
   13fb0:	2e16      	cmp	r6, #22
   13fb2:	b083      	sub	sp, #12
   13fb4:	4605      	mov	r5, r0
   13fb6:	f240 809e 	bls.w	140f6 <_malloc_r+0x14e>
   13fba:	f036 0607 	bics.w	r6, r6, #7
   13fbe:	f100 80bd 	bmi.w	1413c <_malloc_r+0x194>
   13fc2:	42b1      	cmp	r1, r6
   13fc4:	f200 80ba 	bhi.w	1413c <_malloc_r+0x194>
   13fc8:	f000 fc86 	bl	148d8 <__malloc_lock>
   13fcc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   13fd0:	f0c0 8293 	bcc.w	144fa <_malloc_r+0x552>
   13fd4:	0a73      	lsrs	r3, r6, #9
   13fd6:	f000 80b8 	beq.w	1414a <_malloc_r+0x1a2>
   13fda:	2b04      	cmp	r3, #4
   13fdc:	f200 8179 	bhi.w	142d2 <_malloc_r+0x32a>
   13fe0:	09b3      	lsrs	r3, r6, #6
   13fe2:	f103 0039 	add.w	r0, r3, #57	; 0x39
   13fe6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   13fea:	00c3      	lsls	r3, r0, #3
   13fec:	4fbf      	ldr	r7, [pc, #764]	; (142ec <_malloc_r+0x344>)
   13fee:	443b      	add	r3, r7
   13ff0:	f1a3 0108 	sub.w	r1, r3, #8
   13ff4:	685c      	ldr	r4, [r3, #4]
   13ff6:	42a1      	cmp	r1, r4
   13ff8:	d106      	bne.n	14008 <_malloc_r+0x60>
   13ffa:	e00c      	b.n	14016 <_malloc_r+0x6e>
   13ffc:	2a00      	cmp	r2, #0
   13ffe:	f280 80aa 	bge.w	14156 <_malloc_r+0x1ae>
   14002:	68e4      	ldr	r4, [r4, #12]
   14004:	42a1      	cmp	r1, r4
   14006:	d006      	beq.n	14016 <_malloc_r+0x6e>
   14008:	6863      	ldr	r3, [r4, #4]
   1400a:	f023 0303 	bic.w	r3, r3, #3
   1400e:	1b9a      	subs	r2, r3, r6
   14010:	2a0f      	cmp	r2, #15
   14012:	ddf3      	ble.n	13ffc <_malloc_r+0x54>
   14014:	4670      	mov	r0, lr
   14016:	693c      	ldr	r4, [r7, #16]
   14018:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 14300 <_malloc_r+0x358>
   1401c:	4574      	cmp	r4, lr
   1401e:	f000 81ab 	beq.w	14378 <_malloc_r+0x3d0>
   14022:	6863      	ldr	r3, [r4, #4]
   14024:	f023 0303 	bic.w	r3, r3, #3
   14028:	1b9a      	subs	r2, r3, r6
   1402a:	2a0f      	cmp	r2, #15
   1402c:	f300 8190 	bgt.w	14350 <_malloc_r+0x3a8>
   14030:	2a00      	cmp	r2, #0
   14032:	f8c7 e014 	str.w	lr, [r7, #20]
   14036:	f8c7 e010 	str.w	lr, [r7, #16]
   1403a:	f280 809d 	bge.w	14178 <_malloc_r+0x1d0>
   1403e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   14042:	f080 8161 	bcs.w	14308 <_malloc_r+0x360>
   14046:	08db      	lsrs	r3, r3, #3
   14048:	f103 0c01 	add.w	ip, r3, #1
   1404c:	1099      	asrs	r1, r3, #2
   1404e:	687a      	ldr	r2, [r7, #4]
   14050:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   14054:	f8c4 8008 	str.w	r8, [r4, #8]
   14058:	2301      	movs	r3, #1
   1405a:	408b      	lsls	r3, r1
   1405c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   14060:	4313      	orrs	r3, r2
   14062:	3908      	subs	r1, #8
   14064:	60e1      	str	r1, [r4, #12]
   14066:	607b      	str	r3, [r7, #4]
   14068:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   1406c:	f8c8 400c 	str.w	r4, [r8, #12]
   14070:	1082      	asrs	r2, r0, #2
   14072:	2401      	movs	r4, #1
   14074:	4094      	lsls	r4, r2
   14076:	429c      	cmp	r4, r3
   14078:	f200 808b 	bhi.w	14192 <_malloc_r+0x1ea>
   1407c:	421c      	tst	r4, r3
   1407e:	d106      	bne.n	1408e <_malloc_r+0xe6>
   14080:	f020 0003 	bic.w	r0, r0, #3
   14084:	0064      	lsls	r4, r4, #1
   14086:	421c      	tst	r4, r3
   14088:	f100 0004 	add.w	r0, r0, #4
   1408c:	d0fa      	beq.n	14084 <_malloc_r+0xdc>
   1408e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   14092:	46cc      	mov	ip, r9
   14094:	4680      	mov	r8, r0
   14096:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1409a:	459c      	cmp	ip, r3
   1409c:	d107      	bne.n	140ae <_malloc_r+0x106>
   1409e:	e16d      	b.n	1437c <_malloc_r+0x3d4>
   140a0:	2a00      	cmp	r2, #0
   140a2:	f280 817b 	bge.w	1439c <_malloc_r+0x3f4>
   140a6:	68db      	ldr	r3, [r3, #12]
   140a8:	459c      	cmp	ip, r3
   140aa:	f000 8167 	beq.w	1437c <_malloc_r+0x3d4>
   140ae:	6859      	ldr	r1, [r3, #4]
   140b0:	f021 0103 	bic.w	r1, r1, #3
   140b4:	1b8a      	subs	r2, r1, r6
   140b6:	2a0f      	cmp	r2, #15
   140b8:	ddf2      	ble.n	140a0 <_malloc_r+0xf8>
   140ba:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   140be:	f8d3 8008 	ldr.w	r8, [r3, #8]
   140c2:	9300      	str	r3, [sp, #0]
   140c4:	199c      	adds	r4, r3, r6
   140c6:	4628      	mov	r0, r5
   140c8:	f046 0601 	orr.w	r6, r6, #1
   140cc:	f042 0501 	orr.w	r5, r2, #1
   140d0:	605e      	str	r6, [r3, #4]
   140d2:	f8c8 c00c 	str.w	ip, [r8, #12]
   140d6:	f8cc 8008 	str.w	r8, [ip, #8]
   140da:	617c      	str	r4, [r7, #20]
   140dc:	613c      	str	r4, [r7, #16]
   140de:	f8c4 e00c 	str.w	lr, [r4, #12]
   140e2:	f8c4 e008 	str.w	lr, [r4, #8]
   140e6:	6065      	str	r5, [r4, #4]
   140e8:	505a      	str	r2, [r3, r1]
   140ea:	f000 fbfb 	bl	148e4 <__malloc_unlock>
   140ee:	9b00      	ldr	r3, [sp, #0]
   140f0:	f103 0408 	add.w	r4, r3, #8
   140f4:	e01e      	b.n	14134 <_malloc_r+0x18c>
   140f6:	2910      	cmp	r1, #16
   140f8:	d820      	bhi.n	1413c <_malloc_r+0x194>
   140fa:	f000 fbed 	bl	148d8 <__malloc_lock>
   140fe:	2610      	movs	r6, #16
   14100:	2318      	movs	r3, #24
   14102:	2002      	movs	r0, #2
   14104:	4f79      	ldr	r7, [pc, #484]	; (142ec <_malloc_r+0x344>)
   14106:	443b      	add	r3, r7
   14108:	f1a3 0208 	sub.w	r2, r3, #8
   1410c:	685c      	ldr	r4, [r3, #4]
   1410e:	4294      	cmp	r4, r2
   14110:	f000 813d 	beq.w	1438e <_malloc_r+0x3e6>
   14114:	6863      	ldr	r3, [r4, #4]
   14116:	68e1      	ldr	r1, [r4, #12]
   14118:	68a6      	ldr	r6, [r4, #8]
   1411a:	f023 0303 	bic.w	r3, r3, #3
   1411e:	4423      	add	r3, r4
   14120:	4628      	mov	r0, r5
   14122:	685a      	ldr	r2, [r3, #4]
   14124:	60f1      	str	r1, [r6, #12]
   14126:	f042 0201 	orr.w	r2, r2, #1
   1412a:	608e      	str	r6, [r1, #8]
   1412c:	605a      	str	r2, [r3, #4]
   1412e:	f000 fbd9 	bl	148e4 <__malloc_unlock>
   14132:	3408      	adds	r4, #8
   14134:	4620      	mov	r0, r4
   14136:	b003      	add	sp, #12
   14138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1413c:	2400      	movs	r4, #0
   1413e:	230c      	movs	r3, #12
   14140:	4620      	mov	r0, r4
   14142:	602b      	str	r3, [r5, #0]
   14144:	b003      	add	sp, #12
   14146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1414a:	2040      	movs	r0, #64	; 0x40
   1414c:	f44f 7300 	mov.w	r3, #512	; 0x200
   14150:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   14154:	e74a      	b.n	13fec <_malloc_r+0x44>
   14156:	4423      	add	r3, r4
   14158:	68e1      	ldr	r1, [r4, #12]
   1415a:	685a      	ldr	r2, [r3, #4]
   1415c:	68a6      	ldr	r6, [r4, #8]
   1415e:	f042 0201 	orr.w	r2, r2, #1
   14162:	60f1      	str	r1, [r6, #12]
   14164:	4628      	mov	r0, r5
   14166:	608e      	str	r6, [r1, #8]
   14168:	605a      	str	r2, [r3, #4]
   1416a:	f000 fbbb 	bl	148e4 <__malloc_unlock>
   1416e:	3408      	adds	r4, #8
   14170:	4620      	mov	r0, r4
   14172:	b003      	add	sp, #12
   14174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14178:	4423      	add	r3, r4
   1417a:	4628      	mov	r0, r5
   1417c:	685a      	ldr	r2, [r3, #4]
   1417e:	f042 0201 	orr.w	r2, r2, #1
   14182:	605a      	str	r2, [r3, #4]
   14184:	f000 fbae 	bl	148e4 <__malloc_unlock>
   14188:	3408      	adds	r4, #8
   1418a:	4620      	mov	r0, r4
   1418c:	b003      	add	sp, #12
   1418e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14192:	68bc      	ldr	r4, [r7, #8]
   14194:	6863      	ldr	r3, [r4, #4]
   14196:	f023 0803 	bic.w	r8, r3, #3
   1419a:	45b0      	cmp	r8, r6
   1419c:	d304      	bcc.n	141a8 <_malloc_r+0x200>
   1419e:	eba8 0306 	sub.w	r3, r8, r6
   141a2:	2b0f      	cmp	r3, #15
   141a4:	f300 8085 	bgt.w	142b2 <_malloc_r+0x30a>
   141a8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 14304 <_malloc_r+0x35c>
   141ac:	4b50      	ldr	r3, [pc, #320]	; (142f0 <_malloc_r+0x348>)
   141ae:	f8d9 2000 	ldr.w	r2, [r9]
   141b2:	681b      	ldr	r3, [r3, #0]
   141b4:	3201      	adds	r2, #1
   141b6:	4433      	add	r3, r6
   141b8:	eb04 0a08 	add.w	sl, r4, r8
   141bc:	f000 8155 	beq.w	1446a <_malloc_r+0x4c2>
   141c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   141c4:	330f      	adds	r3, #15
   141c6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   141ca:	f02b 0b0f 	bic.w	fp, fp, #15
   141ce:	4659      	mov	r1, fp
   141d0:	4628      	mov	r0, r5
   141d2:	f000 fd87 	bl	14ce4 <_sbrk_r>
   141d6:	1c41      	adds	r1, r0, #1
   141d8:	4602      	mov	r2, r0
   141da:	f000 80fc 	beq.w	143d6 <_malloc_r+0x42e>
   141de:	4582      	cmp	sl, r0
   141e0:	f200 80f7 	bhi.w	143d2 <_malloc_r+0x42a>
   141e4:	4b43      	ldr	r3, [pc, #268]	; (142f4 <_malloc_r+0x34c>)
   141e6:	6819      	ldr	r1, [r3, #0]
   141e8:	4459      	add	r1, fp
   141ea:	6019      	str	r1, [r3, #0]
   141ec:	f000 814d 	beq.w	1448a <_malloc_r+0x4e2>
   141f0:	f8d9 0000 	ldr.w	r0, [r9]
   141f4:	3001      	adds	r0, #1
   141f6:	bf1b      	ittet	ne
   141f8:	eba2 0a0a 	subne.w	sl, r2, sl
   141fc:	4451      	addne	r1, sl
   141fe:	f8c9 2000 	streq.w	r2, [r9]
   14202:	6019      	strne	r1, [r3, #0]
   14204:	f012 0107 	ands.w	r1, r2, #7
   14208:	f000 8115 	beq.w	14436 <_malloc_r+0x48e>
   1420c:	f1c1 0008 	rsb	r0, r1, #8
   14210:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   14214:	4402      	add	r2, r0
   14216:	3108      	adds	r1, #8
   14218:	eb02 090b 	add.w	r9, r2, fp
   1421c:	f3c9 090b 	ubfx	r9, r9, #0, #12
   14220:	eba1 0909 	sub.w	r9, r1, r9
   14224:	4649      	mov	r1, r9
   14226:	4628      	mov	r0, r5
   14228:	9301      	str	r3, [sp, #4]
   1422a:	9200      	str	r2, [sp, #0]
   1422c:	f000 fd5a 	bl	14ce4 <_sbrk_r>
   14230:	1c43      	adds	r3, r0, #1
   14232:	e89d 000c 	ldmia.w	sp, {r2, r3}
   14236:	f000 8143 	beq.w	144c0 <_malloc_r+0x518>
   1423a:	1a80      	subs	r0, r0, r2
   1423c:	4448      	add	r0, r9
   1423e:	f040 0001 	orr.w	r0, r0, #1
   14242:	6819      	ldr	r1, [r3, #0]
   14244:	60ba      	str	r2, [r7, #8]
   14246:	4449      	add	r1, r9
   14248:	42bc      	cmp	r4, r7
   1424a:	6050      	str	r0, [r2, #4]
   1424c:	6019      	str	r1, [r3, #0]
   1424e:	d017      	beq.n	14280 <_malloc_r+0x2d8>
   14250:	f1b8 0f0f 	cmp.w	r8, #15
   14254:	f240 80fb 	bls.w	1444e <_malloc_r+0x4a6>
   14258:	6860      	ldr	r0, [r4, #4]
   1425a:	f1a8 020c 	sub.w	r2, r8, #12
   1425e:	f022 0207 	bic.w	r2, r2, #7
   14262:	eb04 0e02 	add.w	lr, r4, r2
   14266:	f000 0001 	and.w	r0, r0, #1
   1426a:	f04f 0c05 	mov.w	ip, #5
   1426e:	4310      	orrs	r0, r2
   14270:	2a0f      	cmp	r2, #15
   14272:	6060      	str	r0, [r4, #4]
   14274:	f8ce c004 	str.w	ip, [lr, #4]
   14278:	f8ce c008 	str.w	ip, [lr, #8]
   1427c:	f200 8117 	bhi.w	144ae <_malloc_r+0x506>
   14280:	4b1d      	ldr	r3, [pc, #116]	; (142f8 <_malloc_r+0x350>)
   14282:	68bc      	ldr	r4, [r7, #8]
   14284:	681a      	ldr	r2, [r3, #0]
   14286:	4291      	cmp	r1, r2
   14288:	bf88      	it	hi
   1428a:	6019      	strhi	r1, [r3, #0]
   1428c:	4b1b      	ldr	r3, [pc, #108]	; (142fc <_malloc_r+0x354>)
   1428e:	681a      	ldr	r2, [r3, #0]
   14290:	4291      	cmp	r1, r2
   14292:	6862      	ldr	r2, [r4, #4]
   14294:	bf88      	it	hi
   14296:	6019      	strhi	r1, [r3, #0]
   14298:	f022 0203 	bic.w	r2, r2, #3
   1429c:	4296      	cmp	r6, r2
   1429e:	eba2 0306 	sub.w	r3, r2, r6
   142a2:	d801      	bhi.n	142a8 <_malloc_r+0x300>
   142a4:	2b0f      	cmp	r3, #15
   142a6:	dc04      	bgt.n	142b2 <_malloc_r+0x30a>
   142a8:	4628      	mov	r0, r5
   142aa:	f000 fb1b 	bl	148e4 <__malloc_unlock>
   142ae:	2400      	movs	r4, #0
   142b0:	e740      	b.n	14134 <_malloc_r+0x18c>
   142b2:	19a2      	adds	r2, r4, r6
   142b4:	f043 0301 	orr.w	r3, r3, #1
   142b8:	f046 0601 	orr.w	r6, r6, #1
   142bc:	6066      	str	r6, [r4, #4]
   142be:	4628      	mov	r0, r5
   142c0:	60ba      	str	r2, [r7, #8]
   142c2:	6053      	str	r3, [r2, #4]
   142c4:	f000 fb0e 	bl	148e4 <__malloc_unlock>
   142c8:	3408      	adds	r4, #8
   142ca:	4620      	mov	r0, r4
   142cc:	b003      	add	sp, #12
   142ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142d2:	2b14      	cmp	r3, #20
   142d4:	d971      	bls.n	143ba <_malloc_r+0x412>
   142d6:	2b54      	cmp	r3, #84	; 0x54
   142d8:	f200 80a3 	bhi.w	14422 <_malloc_r+0x47a>
   142dc:	0b33      	lsrs	r3, r6, #12
   142de:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   142e2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   142e6:	00c3      	lsls	r3, r0, #3
   142e8:	e680      	b.n	13fec <_malloc_r+0x44>
   142ea:	bf00      	nop
   142ec:	200005b4 	.word	0x200005b4
   142f0:	2000fc60 	.word	0x2000fc60
   142f4:	2000fc30 	.word	0x2000fc30
   142f8:	2000fc58 	.word	0x2000fc58
   142fc:	2000fc5c 	.word	0x2000fc5c
   14300:	200005bc 	.word	0x200005bc
   14304:	200009bc 	.word	0x200009bc
   14308:	0a5a      	lsrs	r2, r3, #9
   1430a:	2a04      	cmp	r2, #4
   1430c:	d95b      	bls.n	143c6 <_malloc_r+0x41e>
   1430e:	2a14      	cmp	r2, #20
   14310:	f200 80ae 	bhi.w	14470 <_malloc_r+0x4c8>
   14314:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   14318:	00c9      	lsls	r1, r1, #3
   1431a:	325b      	adds	r2, #91	; 0x5b
   1431c:	eb07 0c01 	add.w	ip, r7, r1
   14320:	5879      	ldr	r1, [r7, r1]
   14322:	f1ac 0c08 	sub.w	ip, ip, #8
   14326:	458c      	cmp	ip, r1
   14328:	f000 8088 	beq.w	1443c <_malloc_r+0x494>
   1432c:	684a      	ldr	r2, [r1, #4]
   1432e:	f022 0203 	bic.w	r2, r2, #3
   14332:	4293      	cmp	r3, r2
   14334:	d273      	bcs.n	1441e <_malloc_r+0x476>
   14336:	6889      	ldr	r1, [r1, #8]
   14338:	458c      	cmp	ip, r1
   1433a:	d1f7      	bne.n	1432c <_malloc_r+0x384>
   1433c:	f8dc 200c 	ldr.w	r2, [ip, #12]
   14340:	687b      	ldr	r3, [r7, #4]
   14342:	60e2      	str	r2, [r4, #12]
   14344:	f8c4 c008 	str.w	ip, [r4, #8]
   14348:	6094      	str	r4, [r2, #8]
   1434a:	f8cc 400c 	str.w	r4, [ip, #12]
   1434e:	e68f      	b.n	14070 <_malloc_r+0xc8>
   14350:	19a1      	adds	r1, r4, r6
   14352:	f046 0c01 	orr.w	ip, r6, #1
   14356:	f042 0601 	orr.w	r6, r2, #1
   1435a:	f8c4 c004 	str.w	ip, [r4, #4]
   1435e:	4628      	mov	r0, r5
   14360:	6179      	str	r1, [r7, #20]
   14362:	6139      	str	r1, [r7, #16]
   14364:	f8c1 e00c 	str.w	lr, [r1, #12]
   14368:	f8c1 e008 	str.w	lr, [r1, #8]
   1436c:	604e      	str	r6, [r1, #4]
   1436e:	50e2      	str	r2, [r4, r3]
   14370:	f000 fab8 	bl	148e4 <__malloc_unlock>
   14374:	3408      	adds	r4, #8
   14376:	e6dd      	b.n	14134 <_malloc_r+0x18c>
   14378:	687b      	ldr	r3, [r7, #4]
   1437a:	e679      	b.n	14070 <_malloc_r+0xc8>
   1437c:	f108 0801 	add.w	r8, r8, #1
   14380:	f018 0f03 	tst.w	r8, #3
   14384:	f10c 0c08 	add.w	ip, ip, #8
   14388:	f47f ae85 	bne.w	14096 <_malloc_r+0xee>
   1438c:	e02d      	b.n	143ea <_malloc_r+0x442>
   1438e:	68dc      	ldr	r4, [r3, #12]
   14390:	42a3      	cmp	r3, r4
   14392:	bf08      	it	eq
   14394:	3002      	addeq	r0, #2
   14396:	f43f ae3e 	beq.w	14016 <_malloc_r+0x6e>
   1439a:	e6bb      	b.n	14114 <_malloc_r+0x16c>
   1439c:	4419      	add	r1, r3
   1439e:	461c      	mov	r4, r3
   143a0:	684a      	ldr	r2, [r1, #4]
   143a2:	68db      	ldr	r3, [r3, #12]
   143a4:	f854 6f08 	ldr.w	r6, [r4, #8]!
   143a8:	f042 0201 	orr.w	r2, r2, #1
   143ac:	604a      	str	r2, [r1, #4]
   143ae:	4628      	mov	r0, r5
   143b0:	60f3      	str	r3, [r6, #12]
   143b2:	609e      	str	r6, [r3, #8]
   143b4:	f000 fa96 	bl	148e4 <__malloc_unlock>
   143b8:	e6bc      	b.n	14134 <_malloc_r+0x18c>
   143ba:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   143be:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   143c2:	00c3      	lsls	r3, r0, #3
   143c4:	e612      	b.n	13fec <_malloc_r+0x44>
   143c6:	099a      	lsrs	r2, r3, #6
   143c8:	f102 0139 	add.w	r1, r2, #57	; 0x39
   143cc:	00c9      	lsls	r1, r1, #3
   143ce:	3238      	adds	r2, #56	; 0x38
   143d0:	e7a4      	b.n	1431c <_malloc_r+0x374>
   143d2:	42bc      	cmp	r4, r7
   143d4:	d054      	beq.n	14480 <_malloc_r+0x4d8>
   143d6:	68bc      	ldr	r4, [r7, #8]
   143d8:	6862      	ldr	r2, [r4, #4]
   143da:	f022 0203 	bic.w	r2, r2, #3
   143de:	e75d      	b.n	1429c <_malloc_r+0x2f4>
   143e0:	f859 3908 	ldr.w	r3, [r9], #-8
   143e4:	4599      	cmp	r9, r3
   143e6:	f040 8086 	bne.w	144f6 <_malloc_r+0x54e>
   143ea:	f010 0f03 	tst.w	r0, #3
   143ee:	f100 30ff 	add.w	r0, r0, #4294967295
   143f2:	d1f5      	bne.n	143e0 <_malloc_r+0x438>
   143f4:	687b      	ldr	r3, [r7, #4]
   143f6:	ea23 0304 	bic.w	r3, r3, r4
   143fa:	607b      	str	r3, [r7, #4]
   143fc:	0064      	lsls	r4, r4, #1
   143fe:	429c      	cmp	r4, r3
   14400:	f63f aec7 	bhi.w	14192 <_malloc_r+0x1ea>
   14404:	2c00      	cmp	r4, #0
   14406:	f43f aec4 	beq.w	14192 <_malloc_r+0x1ea>
   1440a:	421c      	tst	r4, r3
   1440c:	4640      	mov	r0, r8
   1440e:	f47f ae3e 	bne.w	1408e <_malloc_r+0xe6>
   14412:	0064      	lsls	r4, r4, #1
   14414:	421c      	tst	r4, r3
   14416:	f100 0004 	add.w	r0, r0, #4
   1441a:	d0fa      	beq.n	14412 <_malloc_r+0x46a>
   1441c:	e637      	b.n	1408e <_malloc_r+0xe6>
   1441e:	468c      	mov	ip, r1
   14420:	e78c      	b.n	1433c <_malloc_r+0x394>
   14422:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   14426:	d815      	bhi.n	14454 <_malloc_r+0x4ac>
   14428:	0bf3      	lsrs	r3, r6, #15
   1442a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1442e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   14432:	00c3      	lsls	r3, r0, #3
   14434:	e5da      	b.n	13fec <_malloc_r+0x44>
   14436:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1443a:	e6ed      	b.n	14218 <_malloc_r+0x270>
   1443c:	687b      	ldr	r3, [r7, #4]
   1443e:	1092      	asrs	r2, r2, #2
   14440:	2101      	movs	r1, #1
   14442:	fa01 f202 	lsl.w	r2, r1, r2
   14446:	4313      	orrs	r3, r2
   14448:	607b      	str	r3, [r7, #4]
   1444a:	4662      	mov	r2, ip
   1444c:	e779      	b.n	14342 <_malloc_r+0x39a>
   1444e:	2301      	movs	r3, #1
   14450:	6053      	str	r3, [r2, #4]
   14452:	e729      	b.n	142a8 <_malloc_r+0x300>
   14454:	f240 5254 	movw	r2, #1364	; 0x554
   14458:	4293      	cmp	r3, r2
   1445a:	d822      	bhi.n	144a2 <_malloc_r+0x4fa>
   1445c:	0cb3      	lsrs	r3, r6, #18
   1445e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   14462:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   14466:	00c3      	lsls	r3, r0, #3
   14468:	e5c0      	b.n	13fec <_malloc_r+0x44>
   1446a:	f103 0b10 	add.w	fp, r3, #16
   1446e:	e6ae      	b.n	141ce <_malloc_r+0x226>
   14470:	2a54      	cmp	r2, #84	; 0x54
   14472:	d829      	bhi.n	144c8 <_malloc_r+0x520>
   14474:	0b1a      	lsrs	r2, r3, #12
   14476:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   1447a:	00c9      	lsls	r1, r1, #3
   1447c:	326e      	adds	r2, #110	; 0x6e
   1447e:	e74d      	b.n	1431c <_malloc_r+0x374>
   14480:	4b20      	ldr	r3, [pc, #128]	; (14504 <_malloc_r+0x55c>)
   14482:	6819      	ldr	r1, [r3, #0]
   14484:	4459      	add	r1, fp
   14486:	6019      	str	r1, [r3, #0]
   14488:	e6b2      	b.n	141f0 <_malloc_r+0x248>
   1448a:	f3ca 000b 	ubfx	r0, sl, #0, #12
   1448e:	2800      	cmp	r0, #0
   14490:	f47f aeae 	bne.w	141f0 <_malloc_r+0x248>
   14494:	eb08 030b 	add.w	r3, r8, fp
   14498:	68ba      	ldr	r2, [r7, #8]
   1449a:	f043 0301 	orr.w	r3, r3, #1
   1449e:	6053      	str	r3, [r2, #4]
   144a0:	e6ee      	b.n	14280 <_malloc_r+0x2d8>
   144a2:	207f      	movs	r0, #127	; 0x7f
   144a4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   144a8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   144ac:	e59e      	b.n	13fec <_malloc_r+0x44>
   144ae:	f104 0108 	add.w	r1, r4, #8
   144b2:	4628      	mov	r0, r5
   144b4:	9300      	str	r3, [sp, #0]
   144b6:	f006 f85f 	bl	1a578 <_free_r>
   144ba:	9b00      	ldr	r3, [sp, #0]
   144bc:	6819      	ldr	r1, [r3, #0]
   144be:	e6df      	b.n	14280 <_malloc_r+0x2d8>
   144c0:	2001      	movs	r0, #1
   144c2:	f04f 0900 	mov.w	r9, #0
   144c6:	e6bc      	b.n	14242 <_malloc_r+0x29a>
   144c8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   144cc:	d805      	bhi.n	144da <_malloc_r+0x532>
   144ce:	0bda      	lsrs	r2, r3, #15
   144d0:	f102 0178 	add.w	r1, r2, #120	; 0x78
   144d4:	00c9      	lsls	r1, r1, #3
   144d6:	3277      	adds	r2, #119	; 0x77
   144d8:	e720      	b.n	1431c <_malloc_r+0x374>
   144da:	f240 5154 	movw	r1, #1364	; 0x554
   144de:	428a      	cmp	r2, r1
   144e0:	d805      	bhi.n	144ee <_malloc_r+0x546>
   144e2:	0c9a      	lsrs	r2, r3, #18
   144e4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   144e8:	00c9      	lsls	r1, r1, #3
   144ea:	327c      	adds	r2, #124	; 0x7c
   144ec:	e716      	b.n	1431c <_malloc_r+0x374>
   144ee:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   144f2:	227e      	movs	r2, #126	; 0x7e
   144f4:	e712      	b.n	1431c <_malloc_r+0x374>
   144f6:	687b      	ldr	r3, [r7, #4]
   144f8:	e780      	b.n	143fc <_malloc_r+0x454>
   144fa:	08f0      	lsrs	r0, r6, #3
   144fc:	f106 0308 	add.w	r3, r6, #8
   14500:	e600      	b.n	14104 <_malloc_r+0x15c>
   14502:	bf00      	nop
   14504:	2000fc30 	.word	0x2000fc30

00014508 <__ascii_mbtowc>:
   14508:	b082      	sub	sp, #8
   1450a:	b149      	cbz	r1, 14520 <__ascii_mbtowc+0x18>
   1450c:	b15a      	cbz	r2, 14526 <__ascii_mbtowc+0x1e>
   1450e:	b16b      	cbz	r3, 1452c <__ascii_mbtowc+0x24>
   14510:	7813      	ldrb	r3, [r2, #0]
   14512:	600b      	str	r3, [r1, #0]
   14514:	7812      	ldrb	r2, [r2, #0]
   14516:	1c10      	adds	r0, r2, #0
   14518:	bf18      	it	ne
   1451a:	2001      	movne	r0, #1
   1451c:	b002      	add	sp, #8
   1451e:	4770      	bx	lr
   14520:	a901      	add	r1, sp, #4
   14522:	2a00      	cmp	r2, #0
   14524:	d1f3      	bne.n	1450e <__ascii_mbtowc+0x6>
   14526:	4610      	mov	r0, r2
   14528:	b002      	add	sp, #8
   1452a:	4770      	bx	lr
   1452c:	f06f 0001 	mvn.w	r0, #1
   14530:	e7f4      	b.n	1451c <__ascii_mbtowc+0x14>
   14532:	bf00      	nop
	...

00014540 <memchr>:
   14540:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   14544:	2a10      	cmp	r2, #16
   14546:	db2b      	blt.n	145a0 <memchr+0x60>
   14548:	f010 0f07 	tst.w	r0, #7
   1454c:	d008      	beq.n	14560 <memchr+0x20>
   1454e:	f810 3b01 	ldrb.w	r3, [r0], #1
   14552:	3a01      	subs	r2, #1
   14554:	428b      	cmp	r3, r1
   14556:	d02d      	beq.n	145b4 <memchr+0x74>
   14558:	f010 0f07 	tst.w	r0, #7
   1455c:	b342      	cbz	r2, 145b0 <memchr+0x70>
   1455e:	d1f6      	bne.n	1454e <memchr+0xe>
   14560:	b4f0      	push	{r4, r5, r6, r7}
   14562:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   14566:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1456a:	f022 0407 	bic.w	r4, r2, #7
   1456e:	f07f 0700 	mvns.w	r7, #0
   14572:	2300      	movs	r3, #0
   14574:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   14578:	3c08      	subs	r4, #8
   1457a:	ea85 0501 	eor.w	r5, r5, r1
   1457e:	ea86 0601 	eor.w	r6, r6, r1
   14582:	fa85 f547 	uadd8	r5, r5, r7
   14586:	faa3 f587 	sel	r5, r3, r7
   1458a:	fa86 f647 	uadd8	r6, r6, r7
   1458e:	faa5 f687 	sel	r6, r5, r7
   14592:	b98e      	cbnz	r6, 145b8 <memchr+0x78>
   14594:	d1ee      	bne.n	14574 <memchr+0x34>
   14596:	bcf0      	pop	{r4, r5, r6, r7}
   14598:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1459c:	f002 0207 	and.w	r2, r2, #7
   145a0:	b132      	cbz	r2, 145b0 <memchr+0x70>
   145a2:	f810 3b01 	ldrb.w	r3, [r0], #1
   145a6:	3a01      	subs	r2, #1
   145a8:	ea83 0301 	eor.w	r3, r3, r1
   145ac:	b113      	cbz	r3, 145b4 <memchr+0x74>
   145ae:	d1f8      	bne.n	145a2 <memchr+0x62>
   145b0:	2000      	movs	r0, #0
   145b2:	4770      	bx	lr
   145b4:	3801      	subs	r0, #1
   145b6:	4770      	bx	lr
   145b8:	2d00      	cmp	r5, #0
   145ba:	bf06      	itte	eq
   145bc:	4635      	moveq	r5, r6
   145be:	3803      	subeq	r0, #3
   145c0:	3807      	subne	r0, #7
   145c2:	f015 0f01 	tst.w	r5, #1
   145c6:	d107      	bne.n	145d8 <memchr+0x98>
   145c8:	3001      	adds	r0, #1
   145ca:	f415 7f80 	tst.w	r5, #256	; 0x100
   145ce:	bf02      	ittt	eq
   145d0:	3001      	addeq	r0, #1
   145d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   145d6:	3001      	addeq	r0, #1
   145d8:	bcf0      	pop	{r4, r5, r6, r7}
   145da:	3801      	subs	r0, #1
   145dc:	4770      	bx	lr
   145de:	bf00      	nop

000145e0 <memcmp>:
   145e0:	2a03      	cmp	r2, #3
   145e2:	b470      	push	{r4, r5, r6}
   145e4:	d922      	bls.n	1462c <memcmp+0x4c>
   145e6:	ea40 0301 	orr.w	r3, r0, r1
   145ea:	079b      	lsls	r3, r3, #30
   145ec:	d011      	beq.n	14612 <memcmp+0x32>
   145ee:	7803      	ldrb	r3, [r0, #0]
   145f0:	780c      	ldrb	r4, [r1, #0]
   145f2:	42a3      	cmp	r3, r4
   145f4:	d11d      	bne.n	14632 <memcmp+0x52>
   145f6:	440a      	add	r2, r1
   145f8:	3101      	adds	r1, #1
   145fa:	e005      	b.n	14608 <memcmp+0x28>
   145fc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   14600:	f811 4b01 	ldrb.w	r4, [r1], #1
   14604:	42a3      	cmp	r3, r4
   14606:	d114      	bne.n	14632 <memcmp+0x52>
   14608:	4291      	cmp	r1, r2
   1460a:	d1f7      	bne.n	145fc <memcmp+0x1c>
   1460c:	2000      	movs	r0, #0
   1460e:	bc70      	pop	{r4, r5, r6}
   14610:	4770      	bx	lr
   14612:	680d      	ldr	r5, [r1, #0]
   14614:	6806      	ldr	r6, [r0, #0]
   14616:	42ae      	cmp	r6, r5
   14618:	460c      	mov	r4, r1
   1461a:	4603      	mov	r3, r0
   1461c:	f101 0104 	add.w	r1, r1, #4
   14620:	f100 0004 	add.w	r0, r0, #4
   14624:	d108      	bne.n	14638 <memcmp+0x58>
   14626:	3a04      	subs	r2, #4
   14628:	2a03      	cmp	r2, #3
   1462a:	d8f2      	bhi.n	14612 <memcmp+0x32>
   1462c:	2a00      	cmp	r2, #0
   1462e:	d1de      	bne.n	145ee <memcmp+0xe>
   14630:	e7ec      	b.n	1460c <memcmp+0x2c>
   14632:	1b18      	subs	r0, r3, r4
   14634:	bc70      	pop	{r4, r5, r6}
   14636:	4770      	bx	lr
   14638:	4621      	mov	r1, r4
   1463a:	4618      	mov	r0, r3
   1463c:	e7d7      	b.n	145ee <memcmp+0xe>
   1463e:	bf00      	nop

00014640 <memcpy>:
   14640:	4684      	mov	ip, r0
   14642:	ea41 0300 	orr.w	r3, r1, r0
   14646:	f013 0303 	ands.w	r3, r3, #3
   1464a:	d16d      	bne.n	14728 <memcpy+0xe8>
   1464c:	3a40      	subs	r2, #64	; 0x40
   1464e:	d341      	bcc.n	146d4 <memcpy+0x94>
   14650:	f851 3b04 	ldr.w	r3, [r1], #4
   14654:	f840 3b04 	str.w	r3, [r0], #4
   14658:	f851 3b04 	ldr.w	r3, [r1], #4
   1465c:	f840 3b04 	str.w	r3, [r0], #4
   14660:	f851 3b04 	ldr.w	r3, [r1], #4
   14664:	f840 3b04 	str.w	r3, [r0], #4
   14668:	f851 3b04 	ldr.w	r3, [r1], #4
   1466c:	f840 3b04 	str.w	r3, [r0], #4
   14670:	f851 3b04 	ldr.w	r3, [r1], #4
   14674:	f840 3b04 	str.w	r3, [r0], #4
   14678:	f851 3b04 	ldr.w	r3, [r1], #4
   1467c:	f840 3b04 	str.w	r3, [r0], #4
   14680:	f851 3b04 	ldr.w	r3, [r1], #4
   14684:	f840 3b04 	str.w	r3, [r0], #4
   14688:	f851 3b04 	ldr.w	r3, [r1], #4
   1468c:	f840 3b04 	str.w	r3, [r0], #4
   14690:	f851 3b04 	ldr.w	r3, [r1], #4
   14694:	f840 3b04 	str.w	r3, [r0], #4
   14698:	f851 3b04 	ldr.w	r3, [r1], #4
   1469c:	f840 3b04 	str.w	r3, [r0], #4
   146a0:	f851 3b04 	ldr.w	r3, [r1], #4
   146a4:	f840 3b04 	str.w	r3, [r0], #4
   146a8:	f851 3b04 	ldr.w	r3, [r1], #4
   146ac:	f840 3b04 	str.w	r3, [r0], #4
   146b0:	f851 3b04 	ldr.w	r3, [r1], #4
   146b4:	f840 3b04 	str.w	r3, [r0], #4
   146b8:	f851 3b04 	ldr.w	r3, [r1], #4
   146bc:	f840 3b04 	str.w	r3, [r0], #4
   146c0:	f851 3b04 	ldr.w	r3, [r1], #4
   146c4:	f840 3b04 	str.w	r3, [r0], #4
   146c8:	f851 3b04 	ldr.w	r3, [r1], #4
   146cc:	f840 3b04 	str.w	r3, [r0], #4
   146d0:	3a40      	subs	r2, #64	; 0x40
   146d2:	d2bd      	bcs.n	14650 <memcpy+0x10>
   146d4:	3230      	adds	r2, #48	; 0x30
   146d6:	d311      	bcc.n	146fc <memcpy+0xbc>
   146d8:	f851 3b04 	ldr.w	r3, [r1], #4
   146dc:	f840 3b04 	str.w	r3, [r0], #4
   146e0:	f851 3b04 	ldr.w	r3, [r1], #4
   146e4:	f840 3b04 	str.w	r3, [r0], #4
   146e8:	f851 3b04 	ldr.w	r3, [r1], #4
   146ec:	f840 3b04 	str.w	r3, [r0], #4
   146f0:	f851 3b04 	ldr.w	r3, [r1], #4
   146f4:	f840 3b04 	str.w	r3, [r0], #4
   146f8:	3a10      	subs	r2, #16
   146fa:	d2ed      	bcs.n	146d8 <memcpy+0x98>
   146fc:	320c      	adds	r2, #12
   146fe:	d305      	bcc.n	1470c <memcpy+0xcc>
   14700:	f851 3b04 	ldr.w	r3, [r1], #4
   14704:	f840 3b04 	str.w	r3, [r0], #4
   14708:	3a04      	subs	r2, #4
   1470a:	d2f9      	bcs.n	14700 <memcpy+0xc0>
   1470c:	3204      	adds	r2, #4
   1470e:	d008      	beq.n	14722 <memcpy+0xe2>
   14710:	07d2      	lsls	r2, r2, #31
   14712:	bf1c      	itt	ne
   14714:	f811 3b01 	ldrbne.w	r3, [r1], #1
   14718:	f800 3b01 	strbne.w	r3, [r0], #1
   1471c:	d301      	bcc.n	14722 <memcpy+0xe2>
   1471e:	880b      	ldrh	r3, [r1, #0]
   14720:	8003      	strh	r3, [r0, #0]
   14722:	4660      	mov	r0, ip
   14724:	4770      	bx	lr
   14726:	bf00      	nop
   14728:	2a08      	cmp	r2, #8
   1472a:	d313      	bcc.n	14754 <memcpy+0x114>
   1472c:	078b      	lsls	r3, r1, #30
   1472e:	d08d      	beq.n	1464c <memcpy+0xc>
   14730:	f010 0303 	ands.w	r3, r0, #3
   14734:	d08a      	beq.n	1464c <memcpy+0xc>
   14736:	f1c3 0304 	rsb	r3, r3, #4
   1473a:	1ad2      	subs	r2, r2, r3
   1473c:	07db      	lsls	r3, r3, #31
   1473e:	bf1c      	itt	ne
   14740:	f811 3b01 	ldrbne.w	r3, [r1], #1
   14744:	f800 3b01 	strbne.w	r3, [r0], #1
   14748:	d380      	bcc.n	1464c <memcpy+0xc>
   1474a:	f831 3b02 	ldrh.w	r3, [r1], #2
   1474e:	f820 3b02 	strh.w	r3, [r0], #2
   14752:	e77b      	b.n	1464c <memcpy+0xc>
   14754:	3a04      	subs	r2, #4
   14756:	d3d9      	bcc.n	1470c <memcpy+0xcc>
   14758:	3a01      	subs	r2, #1
   1475a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1475e:	f800 3b01 	strb.w	r3, [r0], #1
   14762:	d2f9      	bcs.n	14758 <memcpy+0x118>
   14764:	780b      	ldrb	r3, [r1, #0]
   14766:	7003      	strb	r3, [r0, #0]
   14768:	784b      	ldrb	r3, [r1, #1]
   1476a:	7043      	strb	r3, [r0, #1]
   1476c:	788b      	ldrb	r3, [r1, #2]
   1476e:	7083      	strb	r3, [r0, #2]
   14770:	4660      	mov	r0, ip
   14772:	4770      	bx	lr

00014774 <memmove>:
   14774:	4288      	cmp	r0, r1
   14776:	b5f0      	push	{r4, r5, r6, r7, lr}
   14778:	d90d      	bls.n	14796 <memmove+0x22>
   1477a:	188b      	adds	r3, r1, r2
   1477c:	4298      	cmp	r0, r3
   1477e:	d20a      	bcs.n	14796 <memmove+0x22>
   14780:	1884      	adds	r4, r0, r2
   14782:	2a00      	cmp	r2, #0
   14784:	d051      	beq.n	1482a <memmove+0xb6>
   14786:	4622      	mov	r2, r4
   14788:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1478c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   14790:	4299      	cmp	r1, r3
   14792:	d1f9      	bne.n	14788 <memmove+0x14>
   14794:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14796:	2a0f      	cmp	r2, #15
   14798:	d948      	bls.n	1482c <memmove+0xb8>
   1479a:	ea41 0300 	orr.w	r3, r1, r0
   1479e:	079b      	lsls	r3, r3, #30
   147a0:	d146      	bne.n	14830 <memmove+0xbc>
   147a2:	f100 0410 	add.w	r4, r0, #16
   147a6:	f101 0310 	add.w	r3, r1, #16
   147aa:	4615      	mov	r5, r2
   147ac:	f853 6c10 	ldr.w	r6, [r3, #-16]
   147b0:	f844 6c10 	str.w	r6, [r4, #-16]
   147b4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   147b8:	f844 6c0c 	str.w	r6, [r4, #-12]
   147bc:	f853 6c08 	ldr.w	r6, [r3, #-8]
   147c0:	f844 6c08 	str.w	r6, [r4, #-8]
   147c4:	3d10      	subs	r5, #16
   147c6:	f853 6c04 	ldr.w	r6, [r3, #-4]
   147ca:	f844 6c04 	str.w	r6, [r4, #-4]
   147ce:	2d0f      	cmp	r5, #15
   147d0:	f103 0310 	add.w	r3, r3, #16
   147d4:	f104 0410 	add.w	r4, r4, #16
   147d8:	d8e8      	bhi.n	147ac <memmove+0x38>
   147da:	f1a2 0310 	sub.w	r3, r2, #16
   147de:	f023 030f 	bic.w	r3, r3, #15
   147e2:	f002 0e0f 	and.w	lr, r2, #15
   147e6:	3310      	adds	r3, #16
   147e8:	f1be 0f03 	cmp.w	lr, #3
   147ec:	4419      	add	r1, r3
   147ee:	4403      	add	r3, r0
   147f0:	d921      	bls.n	14836 <memmove+0xc2>
   147f2:	1f1e      	subs	r6, r3, #4
   147f4:	460d      	mov	r5, r1
   147f6:	4674      	mov	r4, lr
   147f8:	3c04      	subs	r4, #4
   147fa:	f855 7b04 	ldr.w	r7, [r5], #4
   147fe:	f846 7f04 	str.w	r7, [r6, #4]!
   14802:	2c03      	cmp	r4, #3
   14804:	d8f8      	bhi.n	147f8 <memmove+0x84>
   14806:	f1ae 0404 	sub.w	r4, lr, #4
   1480a:	f024 0403 	bic.w	r4, r4, #3
   1480e:	3404      	adds	r4, #4
   14810:	4421      	add	r1, r4
   14812:	4423      	add	r3, r4
   14814:	f002 0203 	and.w	r2, r2, #3
   14818:	b162      	cbz	r2, 14834 <memmove+0xc0>
   1481a:	3b01      	subs	r3, #1
   1481c:	440a      	add	r2, r1
   1481e:	f811 4b01 	ldrb.w	r4, [r1], #1
   14822:	f803 4f01 	strb.w	r4, [r3, #1]!
   14826:	428a      	cmp	r2, r1
   14828:	d1f9      	bne.n	1481e <memmove+0xaa>
   1482a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1482c:	4603      	mov	r3, r0
   1482e:	e7f3      	b.n	14818 <memmove+0xa4>
   14830:	4603      	mov	r3, r0
   14832:	e7f2      	b.n	1481a <memmove+0xa6>
   14834:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14836:	4672      	mov	r2, lr
   14838:	e7ee      	b.n	14818 <memmove+0xa4>
   1483a:	bf00      	nop

0001483c <memset>:
   1483c:	b470      	push	{r4, r5, r6}
   1483e:	0786      	lsls	r6, r0, #30
   14840:	d046      	beq.n	148d0 <memset+0x94>
   14842:	1e54      	subs	r4, r2, #1
   14844:	2a00      	cmp	r2, #0
   14846:	d041      	beq.n	148cc <memset+0x90>
   14848:	b2ca      	uxtb	r2, r1
   1484a:	4603      	mov	r3, r0
   1484c:	e002      	b.n	14854 <memset+0x18>
   1484e:	f114 34ff 	adds.w	r4, r4, #4294967295
   14852:	d33b      	bcc.n	148cc <memset+0x90>
   14854:	f803 2b01 	strb.w	r2, [r3], #1
   14858:	079d      	lsls	r5, r3, #30
   1485a:	d1f8      	bne.n	1484e <memset+0x12>
   1485c:	2c03      	cmp	r4, #3
   1485e:	d92e      	bls.n	148be <memset+0x82>
   14860:	b2cd      	uxtb	r5, r1
   14862:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   14866:	2c0f      	cmp	r4, #15
   14868:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1486c:	d919      	bls.n	148a2 <memset+0x66>
   1486e:	f103 0210 	add.w	r2, r3, #16
   14872:	4626      	mov	r6, r4
   14874:	3e10      	subs	r6, #16
   14876:	2e0f      	cmp	r6, #15
   14878:	f842 5c10 	str.w	r5, [r2, #-16]
   1487c:	f842 5c0c 	str.w	r5, [r2, #-12]
   14880:	f842 5c08 	str.w	r5, [r2, #-8]
   14884:	f842 5c04 	str.w	r5, [r2, #-4]
   14888:	f102 0210 	add.w	r2, r2, #16
   1488c:	d8f2      	bhi.n	14874 <memset+0x38>
   1488e:	f1a4 0210 	sub.w	r2, r4, #16
   14892:	f022 020f 	bic.w	r2, r2, #15
   14896:	f004 040f 	and.w	r4, r4, #15
   1489a:	3210      	adds	r2, #16
   1489c:	2c03      	cmp	r4, #3
   1489e:	4413      	add	r3, r2
   148a0:	d90d      	bls.n	148be <memset+0x82>
   148a2:	461e      	mov	r6, r3
   148a4:	4622      	mov	r2, r4
   148a6:	3a04      	subs	r2, #4
   148a8:	2a03      	cmp	r2, #3
   148aa:	f846 5b04 	str.w	r5, [r6], #4
   148ae:	d8fa      	bhi.n	148a6 <memset+0x6a>
   148b0:	1f22      	subs	r2, r4, #4
   148b2:	f022 0203 	bic.w	r2, r2, #3
   148b6:	3204      	adds	r2, #4
   148b8:	4413      	add	r3, r2
   148ba:	f004 0403 	and.w	r4, r4, #3
   148be:	b12c      	cbz	r4, 148cc <memset+0x90>
   148c0:	b2c9      	uxtb	r1, r1
   148c2:	441c      	add	r4, r3
   148c4:	f803 1b01 	strb.w	r1, [r3], #1
   148c8:	429c      	cmp	r4, r3
   148ca:	d1fb      	bne.n	148c4 <memset+0x88>
   148cc:	bc70      	pop	{r4, r5, r6}
   148ce:	4770      	bx	lr
   148d0:	4614      	mov	r4, r2
   148d2:	4603      	mov	r3, r0
   148d4:	e7c2      	b.n	1485c <memset+0x20>
   148d6:	bf00      	nop

000148d8 <__malloc_lock>:
   148d8:	4801      	ldr	r0, [pc, #4]	; (148e0 <__malloc_lock+0x8>)
   148da:	f7ff bad9 	b.w	13e90 <__retarget_lock_acquire_recursive>
   148de:	bf00      	nop
   148e0:	2000fc9c 	.word	0x2000fc9c

000148e4 <__malloc_unlock>:
   148e4:	4801      	ldr	r0, [pc, #4]	; (148ec <__malloc_unlock+0x8>)
   148e6:	f7ff bad5 	b.w	13e94 <__retarget_lock_release_recursive>
   148ea:	bf00      	nop
   148ec:	2000fc9c 	.word	0x2000fc9c

000148f0 <printf>:
   148f0:	b40f      	push	{r0, r1, r2, r3}
   148f2:	b500      	push	{lr}
   148f4:	4907      	ldr	r1, [pc, #28]	; (14914 <printf+0x24>)
   148f6:	b083      	sub	sp, #12
   148f8:	ab04      	add	r3, sp, #16
   148fa:	6808      	ldr	r0, [r1, #0]
   148fc:	f853 2b04 	ldr.w	r2, [r3], #4
   14900:	6881      	ldr	r1, [r0, #8]
   14902:	9301      	str	r3, [sp, #4]
   14904:	f002 ffe0 	bl	178c8 <_vfprintf_r>
   14908:	b003      	add	sp, #12
   1490a:	f85d eb04 	ldr.w	lr, [sp], #4
   1490e:	b004      	add	sp, #16
   14910:	4770      	bx	lr
   14912:	bf00      	nop
   14914:	20000018 	.word	0x20000018

00014918 <_putc_r>:
   14918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1491a:	460e      	mov	r6, r1
   1491c:	4614      	mov	r4, r2
   1491e:	4607      	mov	r7, r0
   14920:	b108      	cbz	r0, 14926 <_putc_r+0xe>
   14922:	6b83      	ldr	r3, [r0, #56]	; 0x38
   14924:	b34b      	cbz	r3, 1497a <_putc_r+0x62>
   14926:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14928:	07d8      	lsls	r0, r3, #31
   1492a:	d402      	bmi.n	14932 <_putc_r+0x1a>
   1492c:	89a3      	ldrh	r3, [r4, #12]
   1492e:	0599      	lsls	r1, r3, #22
   14930:	d526      	bpl.n	14980 <_putc_r+0x68>
   14932:	68a3      	ldr	r3, [r4, #8]
   14934:	3b01      	subs	r3, #1
   14936:	2b00      	cmp	r3, #0
   14938:	60a3      	str	r3, [r4, #8]
   1493a:	db11      	blt.n	14960 <_putc_r+0x48>
   1493c:	b2f5      	uxtb	r5, r6
   1493e:	6823      	ldr	r3, [r4, #0]
   14940:	1c5a      	adds	r2, r3, #1
   14942:	6022      	str	r2, [r4, #0]
   14944:	701e      	strb	r6, [r3, #0]
   14946:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14948:	07da      	lsls	r2, r3, #31
   1494a:	d402      	bmi.n	14952 <_putc_r+0x3a>
   1494c:	89a3      	ldrh	r3, [r4, #12]
   1494e:	059b      	lsls	r3, r3, #22
   14950:	d501      	bpl.n	14956 <_putc_r+0x3e>
   14952:	4628      	mov	r0, r5
   14954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14956:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14958:	f7ff fa9c 	bl	13e94 <__retarget_lock_release_recursive>
   1495c:	4628      	mov	r0, r5
   1495e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14960:	69a2      	ldr	r2, [r4, #24]
   14962:	4293      	cmp	r3, r2
   14964:	db02      	blt.n	1496c <_putc_r+0x54>
   14966:	b2f5      	uxtb	r5, r6
   14968:	2d0a      	cmp	r5, #10
   1496a:	d1e8      	bne.n	1493e <_putc_r+0x26>
   1496c:	4631      	mov	r1, r6
   1496e:	4638      	mov	r0, r7
   14970:	4622      	mov	r2, r4
   14972:	f004 fa97 	bl	18ea4 <__swbuf_r>
   14976:	4605      	mov	r5, r0
   14978:	e7e5      	b.n	14946 <_putc_r+0x2e>
   1497a:	f005 fcd7 	bl	1a32c <__sinit>
   1497e:	e7d2      	b.n	14926 <_putc_r+0xe>
   14980:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14982:	f7ff fa85 	bl	13e90 <__retarget_lock_acquire_recursive>
   14986:	e7d4      	b.n	14932 <_putc_r+0x1a>

00014988 <realloc>:
   14988:	4b02      	ldr	r3, [pc, #8]	; (14994 <realloc+0xc>)
   1498a:	460a      	mov	r2, r1
   1498c:	4601      	mov	r1, r0
   1498e:	6818      	ldr	r0, [r3, #0]
   14990:	f000 b802 	b.w	14998 <_realloc_r>
   14994:	20000018 	.word	0x20000018

00014998 <_realloc_r>:
   14998:	2900      	cmp	r1, #0
   1499a:	f000 8095 	beq.w	14ac8 <_realloc_r+0x130>
   1499e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149a2:	460d      	mov	r5, r1
   149a4:	4616      	mov	r6, r2
   149a6:	b083      	sub	sp, #12
   149a8:	4680      	mov	r8, r0
   149aa:	f106 070b 	add.w	r7, r6, #11
   149ae:	f7ff ff93 	bl	148d8 <__malloc_lock>
   149b2:	f855 ec04 	ldr.w	lr, [r5, #-4]
   149b6:	2f16      	cmp	r7, #22
   149b8:	f02e 0403 	bic.w	r4, lr, #3
   149bc:	f1a5 0908 	sub.w	r9, r5, #8
   149c0:	d83c      	bhi.n	14a3c <_realloc_r+0xa4>
   149c2:	2210      	movs	r2, #16
   149c4:	4617      	mov	r7, r2
   149c6:	42be      	cmp	r6, r7
   149c8:	d83d      	bhi.n	14a46 <_realloc_r+0xae>
   149ca:	4294      	cmp	r4, r2
   149cc:	da43      	bge.n	14a56 <_realloc_r+0xbe>
   149ce:	4bc4      	ldr	r3, [pc, #784]	; (14ce0 <_realloc_r+0x348>)
   149d0:	6899      	ldr	r1, [r3, #8]
   149d2:	eb09 0004 	add.w	r0, r9, r4
   149d6:	4288      	cmp	r0, r1
   149d8:	f000 80b4 	beq.w	14b44 <_realloc_r+0x1ac>
   149dc:	6843      	ldr	r3, [r0, #4]
   149de:	f023 0101 	bic.w	r1, r3, #1
   149e2:	4401      	add	r1, r0
   149e4:	6849      	ldr	r1, [r1, #4]
   149e6:	07c9      	lsls	r1, r1, #31
   149e8:	d54c      	bpl.n	14a84 <_realloc_r+0xec>
   149ea:	f01e 0f01 	tst.w	lr, #1
   149ee:	f000 809b 	beq.w	14b28 <_realloc_r+0x190>
   149f2:	4631      	mov	r1, r6
   149f4:	4640      	mov	r0, r8
   149f6:	f7ff fad7 	bl	13fa8 <_malloc_r>
   149fa:	4606      	mov	r6, r0
   149fc:	2800      	cmp	r0, #0
   149fe:	d03a      	beq.n	14a76 <_realloc_r+0xde>
   14a00:	f855 3c04 	ldr.w	r3, [r5, #-4]
   14a04:	f023 0301 	bic.w	r3, r3, #1
   14a08:	444b      	add	r3, r9
   14a0a:	f1a0 0208 	sub.w	r2, r0, #8
   14a0e:	429a      	cmp	r2, r3
   14a10:	f000 8121 	beq.w	14c56 <_realloc_r+0x2be>
   14a14:	1f22      	subs	r2, r4, #4
   14a16:	2a24      	cmp	r2, #36	; 0x24
   14a18:	f200 8107 	bhi.w	14c2a <_realloc_r+0x292>
   14a1c:	2a13      	cmp	r2, #19
   14a1e:	f200 80db 	bhi.w	14bd8 <_realloc_r+0x240>
   14a22:	4603      	mov	r3, r0
   14a24:	462a      	mov	r2, r5
   14a26:	6811      	ldr	r1, [r2, #0]
   14a28:	6019      	str	r1, [r3, #0]
   14a2a:	6851      	ldr	r1, [r2, #4]
   14a2c:	6059      	str	r1, [r3, #4]
   14a2e:	6892      	ldr	r2, [r2, #8]
   14a30:	609a      	str	r2, [r3, #8]
   14a32:	4629      	mov	r1, r5
   14a34:	4640      	mov	r0, r8
   14a36:	f005 fd9f 	bl	1a578 <_free_r>
   14a3a:	e01c      	b.n	14a76 <_realloc_r+0xde>
   14a3c:	f027 0707 	bic.w	r7, r7, #7
   14a40:	2f00      	cmp	r7, #0
   14a42:	463a      	mov	r2, r7
   14a44:	dabf      	bge.n	149c6 <_realloc_r+0x2e>
   14a46:	2600      	movs	r6, #0
   14a48:	230c      	movs	r3, #12
   14a4a:	4630      	mov	r0, r6
   14a4c:	f8c8 3000 	str.w	r3, [r8]
   14a50:	b003      	add	sp, #12
   14a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a56:	462e      	mov	r6, r5
   14a58:	1be3      	subs	r3, r4, r7
   14a5a:	2b0f      	cmp	r3, #15
   14a5c:	d81e      	bhi.n	14a9c <_realloc_r+0x104>
   14a5e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   14a62:	f003 0301 	and.w	r3, r3, #1
   14a66:	4323      	orrs	r3, r4
   14a68:	444c      	add	r4, r9
   14a6a:	f8c9 3004 	str.w	r3, [r9, #4]
   14a6e:	6863      	ldr	r3, [r4, #4]
   14a70:	f043 0301 	orr.w	r3, r3, #1
   14a74:	6063      	str	r3, [r4, #4]
   14a76:	4640      	mov	r0, r8
   14a78:	f7ff ff34 	bl	148e4 <__malloc_unlock>
   14a7c:	4630      	mov	r0, r6
   14a7e:	b003      	add	sp, #12
   14a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a84:	f023 0303 	bic.w	r3, r3, #3
   14a88:	18e1      	adds	r1, r4, r3
   14a8a:	4291      	cmp	r1, r2
   14a8c:	db1f      	blt.n	14ace <_realloc_r+0x136>
   14a8e:	68c3      	ldr	r3, [r0, #12]
   14a90:	6882      	ldr	r2, [r0, #8]
   14a92:	462e      	mov	r6, r5
   14a94:	60d3      	str	r3, [r2, #12]
   14a96:	460c      	mov	r4, r1
   14a98:	609a      	str	r2, [r3, #8]
   14a9a:	e7dd      	b.n	14a58 <_realloc_r+0xc0>
   14a9c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   14aa0:	eb09 0107 	add.w	r1, r9, r7
   14aa4:	f002 0201 	and.w	r2, r2, #1
   14aa8:	444c      	add	r4, r9
   14aaa:	f043 0301 	orr.w	r3, r3, #1
   14aae:	4317      	orrs	r7, r2
   14ab0:	f8c9 7004 	str.w	r7, [r9, #4]
   14ab4:	604b      	str	r3, [r1, #4]
   14ab6:	6863      	ldr	r3, [r4, #4]
   14ab8:	f043 0301 	orr.w	r3, r3, #1
   14abc:	3108      	adds	r1, #8
   14abe:	6063      	str	r3, [r4, #4]
   14ac0:	4640      	mov	r0, r8
   14ac2:	f005 fd59 	bl	1a578 <_free_r>
   14ac6:	e7d6      	b.n	14a76 <_realloc_r+0xde>
   14ac8:	4611      	mov	r1, r2
   14aca:	f7ff ba6d 	b.w	13fa8 <_malloc_r>
   14ace:	f01e 0f01 	tst.w	lr, #1
   14ad2:	d18e      	bne.n	149f2 <_realloc_r+0x5a>
   14ad4:	f855 1c08 	ldr.w	r1, [r5, #-8]
   14ad8:	eba9 0a01 	sub.w	sl, r9, r1
   14adc:	f8da 1004 	ldr.w	r1, [sl, #4]
   14ae0:	f021 0103 	bic.w	r1, r1, #3
   14ae4:	440b      	add	r3, r1
   14ae6:	4423      	add	r3, r4
   14ae8:	4293      	cmp	r3, r2
   14aea:	db25      	blt.n	14b38 <_realloc_r+0x1a0>
   14aec:	68c2      	ldr	r2, [r0, #12]
   14aee:	6881      	ldr	r1, [r0, #8]
   14af0:	4656      	mov	r6, sl
   14af2:	60ca      	str	r2, [r1, #12]
   14af4:	6091      	str	r1, [r2, #8]
   14af6:	f8da 100c 	ldr.w	r1, [sl, #12]
   14afa:	f856 0f08 	ldr.w	r0, [r6, #8]!
   14afe:	1f22      	subs	r2, r4, #4
   14b00:	2a24      	cmp	r2, #36	; 0x24
   14b02:	60c1      	str	r1, [r0, #12]
   14b04:	6088      	str	r0, [r1, #8]
   14b06:	f200 8094 	bhi.w	14c32 <_realloc_r+0x29a>
   14b0a:	2a13      	cmp	r2, #19
   14b0c:	d96f      	bls.n	14bee <_realloc_r+0x256>
   14b0e:	6829      	ldr	r1, [r5, #0]
   14b10:	f8ca 1008 	str.w	r1, [sl, #8]
   14b14:	6869      	ldr	r1, [r5, #4]
   14b16:	f8ca 100c 	str.w	r1, [sl, #12]
   14b1a:	2a1b      	cmp	r2, #27
   14b1c:	f200 80a2 	bhi.w	14c64 <_realloc_r+0x2cc>
   14b20:	3508      	adds	r5, #8
   14b22:	f10a 0210 	add.w	r2, sl, #16
   14b26:	e063      	b.n	14bf0 <_realloc_r+0x258>
   14b28:	f855 3c08 	ldr.w	r3, [r5, #-8]
   14b2c:	eba9 0a03 	sub.w	sl, r9, r3
   14b30:	f8da 1004 	ldr.w	r1, [sl, #4]
   14b34:	f021 0103 	bic.w	r1, r1, #3
   14b38:	1863      	adds	r3, r4, r1
   14b3a:	4293      	cmp	r3, r2
   14b3c:	f6ff af59 	blt.w	149f2 <_realloc_r+0x5a>
   14b40:	4656      	mov	r6, sl
   14b42:	e7d8      	b.n	14af6 <_realloc_r+0x15e>
   14b44:	6841      	ldr	r1, [r0, #4]
   14b46:	f021 0b03 	bic.w	fp, r1, #3
   14b4a:	44a3      	add	fp, r4
   14b4c:	f107 0010 	add.w	r0, r7, #16
   14b50:	4583      	cmp	fp, r0
   14b52:	da56      	bge.n	14c02 <_realloc_r+0x26a>
   14b54:	f01e 0f01 	tst.w	lr, #1
   14b58:	f47f af4b 	bne.w	149f2 <_realloc_r+0x5a>
   14b5c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   14b60:	eba9 0a01 	sub.w	sl, r9, r1
   14b64:	f8da 1004 	ldr.w	r1, [sl, #4]
   14b68:	f021 0103 	bic.w	r1, r1, #3
   14b6c:	448b      	add	fp, r1
   14b6e:	4558      	cmp	r0, fp
   14b70:	dce2      	bgt.n	14b38 <_realloc_r+0x1a0>
   14b72:	4656      	mov	r6, sl
   14b74:	f8da 100c 	ldr.w	r1, [sl, #12]
   14b78:	f856 0f08 	ldr.w	r0, [r6, #8]!
   14b7c:	1f22      	subs	r2, r4, #4
   14b7e:	2a24      	cmp	r2, #36	; 0x24
   14b80:	60c1      	str	r1, [r0, #12]
   14b82:	6088      	str	r0, [r1, #8]
   14b84:	f200 808f 	bhi.w	14ca6 <_realloc_r+0x30e>
   14b88:	2a13      	cmp	r2, #19
   14b8a:	f240 808a 	bls.w	14ca2 <_realloc_r+0x30a>
   14b8e:	6829      	ldr	r1, [r5, #0]
   14b90:	f8ca 1008 	str.w	r1, [sl, #8]
   14b94:	6869      	ldr	r1, [r5, #4]
   14b96:	f8ca 100c 	str.w	r1, [sl, #12]
   14b9a:	2a1b      	cmp	r2, #27
   14b9c:	f200 808a 	bhi.w	14cb4 <_realloc_r+0x31c>
   14ba0:	3508      	adds	r5, #8
   14ba2:	f10a 0210 	add.w	r2, sl, #16
   14ba6:	6829      	ldr	r1, [r5, #0]
   14ba8:	6011      	str	r1, [r2, #0]
   14baa:	6869      	ldr	r1, [r5, #4]
   14bac:	6051      	str	r1, [r2, #4]
   14bae:	68a9      	ldr	r1, [r5, #8]
   14bb0:	6091      	str	r1, [r2, #8]
   14bb2:	eb0a 0107 	add.w	r1, sl, r7
   14bb6:	ebab 0207 	sub.w	r2, fp, r7
   14bba:	f042 0201 	orr.w	r2, r2, #1
   14bbe:	6099      	str	r1, [r3, #8]
   14bc0:	604a      	str	r2, [r1, #4]
   14bc2:	f8da 3004 	ldr.w	r3, [sl, #4]
   14bc6:	f003 0301 	and.w	r3, r3, #1
   14bca:	431f      	orrs	r7, r3
   14bcc:	4640      	mov	r0, r8
   14bce:	f8ca 7004 	str.w	r7, [sl, #4]
   14bd2:	f7ff fe87 	bl	148e4 <__malloc_unlock>
   14bd6:	e751      	b.n	14a7c <_realloc_r+0xe4>
   14bd8:	682b      	ldr	r3, [r5, #0]
   14bda:	6003      	str	r3, [r0, #0]
   14bdc:	686b      	ldr	r3, [r5, #4]
   14bde:	6043      	str	r3, [r0, #4]
   14be0:	2a1b      	cmp	r2, #27
   14be2:	d82d      	bhi.n	14c40 <_realloc_r+0x2a8>
   14be4:	f100 0308 	add.w	r3, r0, #8
   14be8:	f105 0208 	add.w	r2, r5, #8
   14bec:	e71b      	b.n	14a26 <_realloc_r+0x8e>
   14bee:	4632      	mov	r2, r6
   14bf0:	6829      	ldr	r1, [r5, #0]
   14bf2:	6011      	str	r1, [r2, #0]
   14bf4:	6869      	ldr	r1, [r5, #4]
   14bf6:	6051      	str	r1, [r2, #4]
   14bf8:	68a9      	ldr	r1, [r5, #8]
   14bfa:	6091      	str	r1, [r2, #8]
   14bfc:	461c      	mov	r4, r3
   14bfe:	46d1      	mov	r9, sl
   14c00:	e72a      	b.n	14a58 <_realloc_r+0xc0>
   14c02:	eb09 0107 	add.w	r1, r9, r7
   14c06:	ebab 0b07 	sub.w	fp, fp, r7
   14c0a:	f04b 0201 	orr.w	r2, fp, #1
   14c0e:	6099      	str	r1, [r3, #8]
   14c10:	604a      	str	r2, [r1, #4]
   14c12:	f855 3c04 	ldr.w	r3, [r5, #-4]
   14c16:	f003 0301 	and.w	r3, r3, #1
   14c1a:	431f      	orrs	r7, r3
   14c1c:	4640      	mov	r0, r8
   14c1e:	f845 7c04 	str.w	r7, [r5, #-4]
   14c22:	f7ff fe5f 	bl	148e4 <__malloc_unlock>
   14c26:	462e      	mov	r6, r5
   14c28:	e728      	b.n	14a7c <_realloc_r+0xe4>
   14c2a:	4629      	mov	r1, r5
   14c2c:	f7ff fda2 	bl	14774 <memmove>
   14c30:	e6ff      	b.n	14a32 <_realloc_r+0x9a>
   14c32:	4629      	mov	r1, r5
   14c34:	4630      	mov	r0, r6
   14c36:	461c      	mov	r4, r3
   14c38:	46d1      	mov	r9, sl
   14c3a:	f7ff fd9b 	bl	14774 <memmove>
   14c3e:	e70b      	b.n	14a58 <_realloc_r+0xc0>
   14c40:	68ab      	ldr	r3, [r5, #8]
   14c42:	6083      	str	r3, [r0, #8]
   14c44:	68eb      	ldr	r3, [r5, #12]
   14c46:	60c3      	str	r3, [r0, #12]
   14c48:	2a24      	cmp	r2, #36	; 0x24
   14c4a:	d017      	beq.n	14c7c <_realloc_r+0x2e4>
   14c4c:	f100 0310 	add.w	r3, r0, #16
   14c50:	f105 0210 	add.w	r2, r5, #16
   14c54:	e6e7      	b.n	14a26 <_realloc_r+0x8e>
   14c56:	f850 3c04 	ldr.w	r3, [r0, #-4]
   14c5a:	f023 0303 	bic.w	r3, r3, #3
   14c5e:	441c      	add	r4, r3
   14c60:	462e      	mov	r6, r5
   14c62:	e6f9      	b.n	14a58 <_realloc_r+0xc0>
   14c64:	68a9      	ldr	r1, [r5, #8]
   14c66:	f8ca 1010 	str.w	r1, [sl, #16]
   14c6a:	68e9      	ldr	r1, [r5, #12]
   14c6c:	f8ca 1014 	str.w	r1, [sl, #20]
   14c70:	2a24      	cmp	r2, #36	; 0x24
   14c72:	d00c      	beq.n	14c8e <_realloc_r+0x2f6>
   14c74:	3510      	adds	r5, #16
   14c76:	f10a 0218 	add.w	r2, sl, #24
   14c7a:	e7b9      	b.n	14bf0 <_realloc_r+0x258>
   14c7c:	692b      	ldr	r3, [r5, #16]
   14c7e:	6103      	str	r3, [r0, #16]
   14c80:	696b      	ldr	r3, [r5, #20]
   14c82:	6143      	str	r3, [r0, #20]
   14c84:	f105 0218 	add.w	r2, r5, #24
   14c88:	f100 0318 	add.w	r3, r0, #24
   14c8c:	e6cb      	b.n	14a26 <_realloc_r+0x8e>
   14c8e:	692a      	ldr	r2, [r5, #16]
   14c90:	f8ca 2018 	str.w	r2, [sl, #24]
   14c94:	696a      	ldr	r2, [r5, #20]
   14c96:	f8ca 201c 	str.w	r2, [sl, #28]
   14c9a:	3518      	adds	r5, #24
   14c9c:	f10a 0220 	add.w	r2, sl, #32
   14ca0:	e7a6      	b.n	14bf0 <_realloc_r+0x258>
   14ca2:	4632      	mov	r2, r6
   14ca4:	e77f      	b.n	14ba6 <_realloc_r+0x20e>
   14ca6:	4629      	mov	r1, r5
   14ca8:	4630      	mov	r0, r6
   14caa:	9301      	str	r3, [sp, #4]
   14cac:	f7ff fd62 	bl	14774 <memmove>
   14cb0:	9b01      	ldr	r3, [sp, #4]
   14cb2:	e77e      	b.n	14bb2 <_realloc_r+0x21a>
   14cb4:	68a9      	ldr	r1, [r5, #8]
   14cb6:	f8ca 1010 	str.w	r1, [sl, #16]
   14cba:	68e9      	ldr	r1, [r5, #12]
   14cbc:	f8ca 1014 	str.w	r1, [sl, #20]
   14cc0:	2a24      	cmp	r2, #36	; 0x24
   14cc2:	d003      	beq.n	14ccc <_realloc_r+0x334>
   14cc4:	3510      	adds	r5, #16
   14cc6:	f10a 0218 	add.w	r2, sl, #24
   14cca:	e76c      	b.n	14ba6 <_realloc_r+0x20e>
   14ccc:	692a      	ldr	r2, [r5, #16]
   14cce:	f8ca 2018 	str.w	r2, [sl, #24]
   14cd2:	696a      	ldr	r2, [r5, #20]
   14cd4:	f8ca 201c 	str.w	r2, [sl, #28]
   14cd8:	3518      	adds	r5, #24
   14cda:	f10a 0220 	add.w	r2, sl, #32
   14cde:	e762      	b.n	14ba6 <_realloc_r+0x20e>
   14ce0:	200005b4 	.word	0x200005b4

00014ce4 <_sbrk_r>:
   14ce4:	b538      	push	{r3, r4, r5, lr}
   14ce6:	4c07      	ldr	r4, [pc, #28]	; (14d04 <_sbrk_r+0x20>)
   14ce8:	2300      	movs	r3, #0
   14cea:	4605      	mov	r5, r0
   14cec:	4608      	mov	r0, r1
   14cee:	6023      	str	r3, [r4, #0]
   14cf0:	f7eb fcde 	bl	6b0 <_sbrk>
   14cf4:	1c43      	adds	r3, r0, #1
   14cf6:	d000      	beq.n	14cfa <_sbrk_r+0x16>
   14cf8:	bd38      	pop	{r3, r4, r5, pc}
   14cfa:	6823      	ldr	r3, [r4, #0]
   14cfc:	2b00      	cmp	r3, #0
   14cfe:	d0fb      	beq.n	14cf8 <_sbrk_r+0x14>
   14d00:	602b      	str	r3, [r5, #0]
   14d02:	bd38      	pop	{r3, r4, r5, pc}
   14d04:	2000fcc0 	.word	0x2000fcc0

00014d08 <_raise_r>:
   14d08:	291f      	cmp	r1, #31
   14d0a:	d828      	bhi.n	14d5e <_raise_r+0x56>
   14d0c:	b520      	push	{r5, lr}
   14d0e:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   14d12:	b082      	sub	sp, #8
   14d14:	4605      	mov	r5, r0
   14d16:	b1aa      	cbz	r2, 14d44 <_raise_r+0x3c>
   14d18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   14d1c:	b193      	cbz	r3, 14d44 <_raise_r+0x3c>
   14d1e:	2b01      	cmp	r3, #1
   14d20:	d00e      	beq.n	14d40 <_raise_r+0x38>
   14d22:	1c58      	adds	r0, r3, #1
   14d24:	d007      	beq.n	14d36 <_raise_r+0x2e>
   14d26:	2500      	movs	r5, #0
   14d28:	4608      	mov	r0, r1
   14d2a:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   14d2e:	4798      	blx	r3
   14d30:	4628      	mov	r0, r5
   14d32:	b002      	add	sp, #8
   14d34:	bd20      	pop	{r5, pc}
   14d36:	2316      	movs	r3, #22
   14d38:	2001      	movs	r0, #1
   14d3a:	602b      	str	r3, [r5, #0]
   14d3c:	b002      	add	sp, #8
   14d3e:	bd20      	pop	{r5, pc}
   14d40:	2000      	movs	r0, #0
   14d42:	e7f6      	b.n	14d32 <_raise_r+0x2a>
   14d44:	4628      	mov	r0, r5
   14d46:	9101      	str	r1, [sp, #4]
   14d48:	f000 f82a 	bl	14da0 <_getpid_r>
   14d4c:	9901      	ldr	r1, [sp, #4]
   14d4e:	460a      	mov	r2, r1
   14d50:	4601      	mov	r1, r0
   14d52:	4628      	mov	r0, r5
   14d54:	b002      	add	sp, #8
   14d56:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
   14d5a:	f000 b80d 	b.w	14d78 <_kill_r>
   14d5e:	2316      	movs	r3, #22
   14d60:	6003      	str	r3, [r0, #0]
   14d62:	f04f 30ff 	mov.w	r0, #4294967295
   14d66:	4770      	bx	lr

00014d68 <raise>:
   14d68:	4b02      	ldr	r3, [pc, #8]	; (14d74 <raise+0xc>)
   14d6a:	4601      	mov	r1, r0
   14d6c:	6818      	ldr	r0, [r3, #0]
   14d6e:	f7ff bfcb 	b.w	14d08 <_raise_r>
   14d72:	bf00      	nop
   14d74:	20000018 	.word	0x20000018

00014d78 <_kill_r>:
   14d78:	b538      	push	{r3, r4, r5, lr}
   14d7a:	460b      	mov	r3, r1
   14d7c:	4c07      	ldr	r4, [pc, #28]	; (14d9c <_kill_r+0x24>)
   14d7e:	4605      	mov	r5, r0
   14d80:	4611      	mov	r1, r2
   14d82:	4618      	mov	r0, r3
   14d84:	2300      	movs	r3, #0
   14d86:	6023      	str	r3, [r4, #0]
   14d88:	f7eb fcba 	bl	700 <_kill>
   14d8c:	1c43      	adds	r3, r0, #1
   14d8e:	d000      	beq.n	14d92 <_kill_r+0x1a>
   14d90:	bd38      	pop	{r3, r4, r5, pc}
   14d92:	6823      	ldr	r3, [r4, #0]
   14d94:	2b00      	cmp	r3, #0
   14d96:	d0fb      	beq.n	14d90 <_kill_r+0x18>
   14d98:	602b      	str	r3, [r5, #0]
   14d9a:	bd38      	pop	{r3, r4, r5, pc}
   14d9c:	2000fcc0 	.word	0x2000fcc0

00014da0 <_getpid_r>:
   14da0:	f7eb bcaf 	b.w	702 <_getpid>

00014da4 <sprintf>:
   14da4:	b40e      	push	{r1, r2, r3}
   14da6:	b5f0      	push	{r4, r5, r6, r7, lr}
   14da8:	b09c      	sub	sp, #112	; 0x70
   14daa:	ab21      	add	r3, sp, #132	; 0x84
   14dac:	490f      	ldr	r1, [pc, #60]	; (14dec <sprintf+0x48>)
   14dae:	f853 2b04 	ldr.w	r2, [r3], #4
   14db2:	9301      	str	r3, [sp, #4]
   14db4:	4605      	mov	r5, r0
   14db6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   14dba:	6808      	ldr	r0, [r1, #0]
   14dbc:	9502      	str	r5, [sp, #8]
   14dbe:	f44f 7702 	mov.w	r7, #520	; 0x208
   14dc2:	f64f 76ff 	movw	r6, #65535	; 0xffff
   14dc6:	a902      	add	r1, sp, #8
   14dc8:	9506      	str	r5, [sp, #24]
   14dca:	f8ad 7014 	strh.w	r7, [sp, #20]
   14dce:	9404      	str	r4, [sp, #16]
   14dd0:	9407      	str	r4, [sp, #28]
   14dd2:	f8ad 6016 	strh.w	r6, [sp, #22]
   14dd6:	f000 fc73 	bl	156c0 <_svfprintf_r>
   14dda:	9b02      	ldr	r3, [sp, #8]
   14ddc:	2200      	movs	r2, #0
   14dde:	701a      	strb	r2, [r3, #0]
   14de0:	b01c      	add	sp, #112	; 0x70
   14de2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   14de6:	b003      	add	sp, #12
   14de8:	4770      	bx	lr
   14dea:	bf00      	nop
   14dec:	20000018 	.word	0x20000018

00014df0 <__sread>:
   14df0:	b510      	push	{r4, lr}
   14df2:	460c      	mov	r4, r1
   14df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   14df8:	f005 fffe 	bl	1adf8 <_read_r>
   14dfc:	2800      	cmp	r0, #0
   14dfe:	db03      	blt.n	14e08 <__sread+0x18>
   14e00:	6d23      	ldr	r3, [r4, #80]	; 0x50
   14e02:	4403      	add	r3, r0
   14e04:	6523      	str	r3, [r4, #80]	; 0x50
   14e06:	bd10      	pop	{r4, pc}
   14e08:	89a3      	ldrh	r3, [r4, #12]
   14e0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   14e0e:	81a3      	strh	r3, [r4, #12]
   14e10:	bd10      	pop	{r4, pc}
   14e12:	bf00      	nop

00014e14 <__swrite>:
   14e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14e18:	4616      	mov	r6, r2
   14e1a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   14e1e:	461f      	mov	r7, r3
   14e20:	05d3      	lsls	r3, r2, #23
   14e22:	460c      	mov	r4, r1
   14e24:	4605      	mov	r5, r0
   14e26:	d507      	bpl.n	14e38 <__swrite+0x24>
   14e28:	2200      	movs	r2, #0
   14e2a:	2302      	movs	r3, #2
   14e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   14e30:	f005 fcd2 	bl	1a7d8 <_lseek_r>
   14e34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   14e38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   14e3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   14e40:	81a2      	strh	r2, [r4, #12]
   14e42:	463b      	mov	r3, r7
   14e44:	4632      	mov	r2, r6
   14e46:	4628      	mov	r0, r5
   14e48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14e4c:	f004 b8ba 	b.w	18fc4 <_write_r>

00014e50 <__sseek>:
   14e50:	b510      	push	{r4, lr}
   14e52:	460c      	mov	r4, r1
   14e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   14e58:	f005 fcbe 	bl	1a7d8 <_lseek_r>
   14e5c:	89a3      	ldrh	r3, [r4, #12]
   14e5e:	1c42      	adds	r2, r0, #1
   14e60:	bf0e      	itee	eq
   14e62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   14e66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   14e6a:	6520      	strne	r0, [r4, #80]	; 0x50
   14e6c:	81a3      	strh	r3, [r4, #12]
   14e6e:	bd10      	pop	{r4, pc}

00014e70 <__sclose>:
   14e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   14e74:	f004 b992 	b.w	1919c <_close_r>
	...
   14e80:	eba2 0003 	sub.w	r0, r2, r3
   14e84:	4770      	bx	lr
   14e86:	bf00      	nop

00014e88 <strcmp>:
   14e88:	7802      	ldrb	r2, [r0, #0]
   14e8a:	780b      	ldrb	r3, [r1, #0]
   14e8c:	2a01      	cmp	r2, #1
   14e8e:	bf28      	it	cs
   14e90:	429a      	cmpcs	r2, r3
   14e92:	d1f5      	bne.n	14e80 <__sclose+0x10>
   14e94:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   14e98:	ea40 0401 	orr.w	r4, r0, r1
   14e9c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   14ea0:	f06f 0c00 	mvn.w	ip, #0
   14ea4:	ea4f 7244 	mov.w	r2, r4, lsl #29
   14ea8:	b312      	cbz	r2, 14ef0 <strcmp+0x68>
   14eaa:	ea80 0401 	eor.w	r4, r0, r1
   14eae:	f014 0f07 	tst.w	r4, #7
   14eb2:	d16a      	bne.n	14f8a <strcmp+0x102>
   14eb4:	f000 0407 	and.w	r4, r0, #7
   14eb8:	f020 0007 	bic.w	r0, r0, #7
   14ebc:	f004 0503 	and.w	r5, r4, #3
   14ec0:	f021 0107 	bic.w	r1, r1, #7
   14ec4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   14ec8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   14ecc:	f014 0f04 	tst.w	r4, #4
   14ed0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   14ed4:	fa0c f405 	lsl.w	r4, ip, r5
   14ed8:	ea62 0204 	orn	r2, r2, r4
   14edc:	ea66 0604 	orn	r6, r6, r4
   14ee0:	d00a      	beq.n	14ef8 <strcmp+0x70>
   14ee2:	ea63 0304 	orn	r3, r3, r4
   14ee6:	4662      	mov	r2, ip
   14ee8:	ea67 0704 	orn	r7, r7, r4
   14eec:	4666      	mov	r6, ip
   14eee:	e003      	b.n	14ef8 <strcmp+0x70>
   14ef0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   14ef4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   14ef8:	fa82 f54c 	uadd8	r5, r2, ip
   14efc:	ea82 0406 	eor.w	r4, r2, r6
   14f00:	faa4 f48c 	sel	r4, r4, ip
   14f04:	bb6c      	cbnz	r4, 14f62 <strcmp+0xda>
   14f06:	fa83 f54c 	uadd8	r5, r3, ip
   14f0a:	ea83 0507 	eor.w	r5, r3, r7
   14f0e:	faa5 f58c 	sel	r5, r5, ip
   14f12:	b995      	cbnz	r5, 14f3a <strcmp+0xb2>
   14f14:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   14f18:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   14f1c:	fa82 f54c 	uadd8	r5, r2, ip
   14f20:	ea82 0406 	eor.w	r4, r2, r6
   14f24:	faa4 f48c 	sel	r4, r4, ip
   14f28:	fa83 f54c 	uadd8	r5, r3, ip
   14f2c:	ea83 0507 	eor.w	r5, r3, r7
   14f30:	faa5 f58c 	sel	r5, r5, ip
   14f34:	4325      	orrs	r5, r4
   14f36:	d0db      	beq.n	14ef0 <strcmp+0x68>
   14f38:	b99c      	cbnz	r4, 14f62 <strcmp+0xda>
   14f3a:	ba2d      	rev	r5, r5
   14f3c:	fab5 f485 	clz	r4, r5
   14f40:	f024 0407 	bic.w	r4, r4, #7
   14f44:	fa27 f104 	lsr.w	r1, r7, r4
   14f48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   14f4c:	fa23 f304 	lsr.w	r3, r3, r4
   14f50:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   14f54:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   14f58:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   14f5c:	eba0 0001 	sub.w	r0, r0, r1
   14f60:	4770      	bx	lr
   14f62:	ba24      	rev	r4, r4
   14f64:	fab4 f484 	clz	r4, r4
   14f68:	f024 0407 	bic.w	r4, r4, #7
   14f6c:	fa26 f104 	lsr.w	r1, r6, r4
   14f70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   14f74:	fa22 f204 	lsr.w	r2, r2, r4
   14f78:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   14f7c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   14f80:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   14f84:	eba0 0001 	sub.w	r0, r0, r1
   14f88:	4770      	bx	lr
   14f8a:	f014 0f03 	tst.w	r4, #3
   14f8e:	d13c      	bne.n	1500a <strcmp+0x182>
   14f90:	f010 0403 	ands.w	r4, r0, #3
   14f94:	d128      	bne.n	14fe8 <strcmp+0x160>
   14f96:	f850 2b08 	ldr.w	r2, [r0], #8
   14f9a:	f851 3b08 	ldr.w	r3, [r1], #8
   14f9e:	fa82 f54c 	uadd8	r5, r2, ip
   14fa2:	ea82 0503 	eor.w	r5, r2, r3
   14fa6:	faa5 f58c 	sel	r5, r5, ip
   14faa:	b95d      	cbnz	r5, 14fc4 <strcmp+0x13c>
   14fac:	f850 2c04 	ldr.w	r2, [r0, #-4]
   14fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   14fb4:	fa82 f54c 	uadd8	r5, r2, ip
   14fb8:	ea82 0503 	eor.w	r5, r2, r3
   14fbc:	faa5 f58c 	sel	r5, r5, ip
   14fc0:	2d00      	cmp	r5, #0
   14fc2:	d0e8      	beq.n	14f96 <strcmp+0x10e>
   14fc4:	ba2d      	rev	r5, r5
   14fc6:	fab5 f485 	clz	r4, r5
   14fca:	f024 0407 	bic.w	r4, r4, #7
   14fce:	fa23 f104 	lsr.w	r1, r3, r4
   14fd2:	fa22 f204 	lsr.w	r2, r2, r4
   14fd6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   14fda:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   14fde:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   14fe2:	eba0 0001 	sub.w	r0, r0, r1
   14fe6:	4770      	bx	lr
   14fe8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   14fec:	f020 0003 	bic.w	r0, r0, #3
   14ff0:	f850 2b08 	ldr.w	r2, [r0], #8
   14ff4:	f021 0103 	bic.w	r1, r1, #3
   14ff8:	f851 3b08 	ldr.w	r3, [r1], #8
   14ffc:	fa0c f404 	lsl.w	r4, ip, r4
   15000:	ea62 0204 	orn	r2, r2, r4
   15004:	ea63 0304 	orn	r3, r3, r4
   15008:	e7c9      	b.n	14f9e <strcmp+0x116>
   1500a:	f010 0403 	ands.w	r4, r0, #3
   1500e:	d01a      	beq.n	15046 <strcmp+0x1be>
   15010:	eba1 0104 	sub.w	r1, r1, r4
   15014:	f020 0003 	bic.w	r0, r0, #3
   15018:	07e4      	lsls	r4, r4, #31
   1501a:	f850 2b04 	ldr.w	r2, [r0], #4
   1501e:	d006      	beq.n	1502e <strcmp+0x1a6>
   15020:	d20f      	bcs.n	15042 <strcmp+0x1ba>
   15022:	788b      	ldrb	r3, [r1, #2]
   15024:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   15028:	1ae4      	subs	r4, r4, r3
   1502a:	d106      	bne.n	1503a <strcmp+0x1b2>
   1502c:	b12b      	cbz	r3, 1503a <strcmp+0x1b2>
   1502e:	78cb      	ldrb	r3, [r1, #3]
   15030:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   15034:	1ae4      	subs	r4, r4, r3
   15036:	d100      	bne.n	1503a <strcmp+0x1b2>
   15038:	b91b      	cbnz	r3, 15042 <strcmp+0x1ba>
   1503a:	4620      	mov	r0, r4
   1503c:	f85d 4b10 	ldr.w	r4, [sp], #16
   15040:	4770      	bx	lr
   15042:	f101 0104 	add.w	r1, r1, #4
   15046:	f850 2b04 	ldr.w	r2, [r0], #4
   1504a:	07cc      	lsls	r4, r1, #31
   1504c:	f021 0103 	bic.w	r1, r1, #3
   15050:	f851 3b04 	ldr.w	r3, [r1], #4
   15054:	d848      	bhi.n	150e8 <strcmp+0x260>
   15056:	d224      	bcs.n	150a2 <strcmp+0x21a>
   15058:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1505c:	fa82 f54c 	uadd8	r5, r2, ip
   15060:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   15064:	faa5 f58c 	sel	r5, r5, ip
   15068:	d10a      	bne.n	15080 <strcmp+0x1f8>
   1506a:	b965      	cbnz	r5, 15086 <strcmp+0x1fe>
   1506c:	f851 3b04 	ldr.w	r3, [r1], #4
   15070:	ea84 0402 	eor.w	r4, r4, r2
   15074:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   15078:	d10e      	bne.n	15098 <strcmp+0x210>
   1507a:	f850 2b04 	ldr.w	r2, [r0], #4
   1507e:	e7eb      	b.n	15058 <strcmp+0x1d0>
   15080:	ea4f 2313 	mov.w	r3, r3, lsr #8
   15084:	e055      	b.n	15132 <strcmp+0x2aa>
   15086:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1508a:	d14d      	bne.n	15128 <strcmp+0x2a0>
   1508c:	7808      	ldrb	r0, [r1, #0]
   1508e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   15092:	f1c0 0000 	rsb	r0, r0, #0
   15096:	4770      	bx	lr
   15098:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1509c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   150a0:	e047      	b.n	15132 <strcmp+0x2aa>
   150a2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   150a6:	fa82 f54c 	uadd8	r5, r2, ip
   150aa:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   150ae:	faa5 f58c 	sel	r5, r5, ip
   150b2:	d10a      	bne.n	150ca <strcmp+0x242>
   150b4:	b965      	cbnz	r5, 150d0 <strcmp+0x248>
   150b6:	f851 3b04 	ldr.w	r3, [r1], #4
   150ba:	ea84 0402 	eor.w	r4, r4, r2
   150be:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   150c2:	d10c      	bne.n	150de <strcmp+0x256>
   150c4:	f850 2b04 	ldr.w	r2, [r0], #4
   150c8:	e7eb      	b.n	150a2 <strcmp+0x21a>
   150ca:	ea4f 4313 	mov.w	r3, r3, lsr #16
   150ce:	e030      	b.n	15132 <strcmp+0x2aa>
   150d0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   150d4:	d128      	bne.n	15128 <strcmp+0x2a0>
   150d6:	880b      	ldrh	r3, [r1, #0]
   150d8:	ea4f 4212 	mov.w	r2, r2, lsr #16
   150dc:	e029      	b.n	15132 <strcmp+0x2aa>
   150de:	ea4f 4212 	mov.w	r2, r2, lsr #16
   150e2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   150e6:	e024      	b.n	15132 <strcmp+0x2aa>
   150e8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   150ec:	fa82 f54c 	uadd8	r5, r2, ip
   150f0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   150f4:	faa5 f58c 	sel	r5, r5, ip
   150f8:	d10a      	bne.n	15110 <strcmp+0x288>
   150fa:	b965      	cbnz	r5, 15116 <strcmp+0x28e>
   150fc:	f851 3b04 	ldr.w	r3, [r1], #4
   15100:	ea84 0402 	eor.w	r4, r4, r2
   15104:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   15108:	d109      	bne.n	1511e <strcmp+0x296>
   1510a:	f850 2b04 	ldr.w	r2, [r0], #4
   1510e:	e7eb      	b.n	150e8 <strcmp+0x260>
   15110:	ea4f 6313 	mov.w	r3, r3, lsr #24
   15114:	e00d      	b.n	15132 <strcmp+0x2aa>
   15116:	f015 0fff 	tst.w	r5, #255	; 0xff
   1511a:	d105      	bne.n	15128 <strcmp+0x2a0>
   1511c:	680b      	ldr	r3, [r1, #0]
   1511e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   15122:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   15126:	e004      	b.n	15132 <strcmp+0x2aa>
   15128:	f04f 0000 	mov.w	r0, #0
   1512c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   15130:	4770      	bx	lr
   15132:	ba12      	rev	r2, r2
   15134:	ba1b      	rev	r3, r3
   15136:	fa82 f44c 	uadd8	r4, r2, ip
   1513a:	ea82 0403 	eor.w	r4, r2, r3
   1513e:	faa4 f58c 	sel	r5, r4, ip
   15142:	fab5 f485 	clz	r4, r5
   15146:	fa02 f204 	lsl.w	r2, r2, r4
   1514a:	fa03 f304 	lsl.w	r3, r3, r4
   1514e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   15152:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   15156:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1515a:	4770      	bx	lr

0001515c <_strerror_r>:
   1515c:	b510      	push	{r4, lr}
   1515e:	298e      	cmp	r1, #142	; 0x8e
   15160:	f200 8131 	bhi.w	153c6 <_strerror_r+0x26a>
   15164:	e8df f011 	tbh	[pc, r1, lsl #1]
   15168:	012d008f 	.word	0x012d008f
   1516c:	0129012b 	.word	0x0129012b
   15170:	01250127 	.word	0x01250127
   15174:	01210123 	.word	0x01210123
   15178:	011d011f 	.word	0x011d011f
   1517c:	0119011b 	.word	0x0119011b
   15180:	01150117 	.word	0x01150117
   15184:	012f0113 	.word	0x012f0113
   15188:	010f0111 	.word	0x010f0111
   1518c:	010b010d 	.word	0x010b010d
   15190:	01070109 	.word	0x01070109
   15194:	01030105 	.word	0x01030105
   15198:	00ff0101 	.word	0x00ff0101
   1519c:	00fb00fd 	.word	0x00fb00fd
   151a0:	00f700f9 	.word	0x00f700f9
   151a4:	00f300f5 	.word	0x00f300f5
   151a8:	00ef00f1 	.word	0x00ef00f1
   151ac:	00eb00ed 	.word	0x00eb00ed
   151b0:	012f00e9 	.word	0x012f00e9
   151b4:	012f012f 	.word	0x012f012f
   151b8:	012f012f 	.word	0x012f012f
   151bc:	012f012f 	.word	0x012f012f
   151c0:	00e7012f 	.word	0x00e7012f
   151c4:	012f00e5 	.word	0x012f00e5
   151c8:	012f012f 	.word	0x012f012f
   151cc:	012f012f 	.word	0x012f012f
   151d0:	012f012f 	.word	0x012f012f
   151d4:	012f012f 	.word	0x012f012f
   151d8:	012f012f 	.word	0x012f012f
   151dc:	012f012f 	.word	0x012f012f
   151e0:	00e100e3 	.word	0x00e100e3
   151e4:	00dd00df 	.word	0x00dd00df
   151e8:	012f012f 	.word	0x012f012f
   151ec:	00db012f 	.word	0x00db012f
   151f0:	012f012f 	.word	0x012f012f
   151f4:	00d9012f 	.word	0x00d9012f
   151f8:	012f012f 	.word	0x012f012f
   151fc:	012f00d7 	.word	0x012f00d7
   15200:	00d5012f 	.word	0x00d5012f
   15204:	012f012f 	.word	0x012f012f
   15208:	012f012f 	.word	0x012f012f
   1520c:	012f012f 	.word	0x012f012f
   15210:	012f012f 	.word	0x012f012f
   15214:	012f012f 	.word	0x012f012f
   15218:	012f00d3 	.word	0x012f00d3
   1521c:	00cf00d1 	.word	0x00cf00d1
   15220:	012f00cd 	.word	0x012f00cd
   15224:	00cb012f 	.word	0x00cb012f
   15228:	012f012f 	.word	0x012f012f
   1522c:	012f012f 	.word	0x012f012f
   15230:	012f012f 	.word	0x012f012f
   15234:	012f012f 	.word	0x012f012f
   15238:	00c700c9 	.word	0x00c700c9
   1523c:	00c300c5 	.word	0x00c300c5
   15240:	00bf00c1 	.word	0x00bf00c1
   15244:	00bd012f 	.word	0x00bd012f
   15248:	00b900bb 	.word	0x00b900bb
   1524c:	00b500b7 	.word	0x00b500b7
   15250:	00b100b3 	.word	0x00b100b3
   15254:	00ad00af 	.word	0x00ad00af
   15258:	00a900ab 	.word	0x00a900ab
   1525c:	00a500a7 	.word	0x00a500a7
   15260:	00a3012f 	.word	0x00a3012f
   15264:	009f00a1 	.word	0x009f00a1
   15268:	012f009d 	.word	0x012f009d
   1526c:	012f012f 	.word	0x012f012f
   15270:	012f012f 	.word	0x012f012f
   15274:	012f009b 	.word	0x012f009b
   15278:	012f012f 	.word	0x012f012f
   1527c:	00970099 	.word	0x00970099
   15280:	00930095 	.word	0x00930095
   15284:	0091      	.short	0x0091
   15286:	4857      	ldr	r0, [pc, #348]	; (153e4 <_strerror_r+0x288>)
   15288:	bd10      	pop	{r4, pc}
   1528a:	4857      	ldr	r0, [pc, #348]	; (153e8 <_strerror_r+0x28c>)
   1528c:	bd10      	pop	{r4, pc}
   1528e:	4857      	ldr	r0, [pc, #348]	; (153ec <_strerror_r+0x290>)
   15290:	bd10      	pop	{r4, pc}
   15292:	4857      	ldr	r0, [pc, #348]	; (153f0 <_strerror_r+0x294>)
   15294:	bd10      	pop	{r4, pc}
   15296:	4857      	ldr	r0, [pc, #348]	; (153f4 <_strerror_r+0x298>)
   15298:	bd10      	pop	{r4, pc}
   1529a:	4857      	ldr	r0, [pc, #348]	; (153f8 <_strerror_r+0x29c>)
   1529c:	bd10      	pop	{r4, pc}
   1529e:	4857      	ldr	r0, [pc, #348]	; (153fc <_strerror_r+0x2a0>)
   152a0:	bd10      	pop	{r4, pc}
   152a2:	4857      	ldr	r0, [pc, #348]	; (15400 <_strerror_r+0x2a4>)
   152a4:	bd10      	pop	{r4, pc}
   152a6:	4857      	ldr	r0, [pc, #348]	; (15404 <_strerror_r+0x2a8>)
   152a8:	bd10      	pop	{r4, pc}
   152aa:	4857      	ldr	r0, [pc, #348]	; (15408 <_strerror_r+0x2ac>)
   152ac:	bd10      	pop	{r4, pc}
   152ae:	4857      	ldr	r0, [pc, #348]	; (1540c <_strerror_r+0x2b0>)
   152b0:	bd10      	pop	{r4, pc}
   152b2:	4857      	ldr	r0, [pc, #348]	; (15410 <_strerror_r+0x2b4>)
   152b4:	bd10      	pop	{r4, pc}
   152b6:	4857      	ldr	r0, [pc, #348]	; (15414 <_strerror_r+0x2b8>)
   152b8:	bd10      	pop	{r4, pc}
   152ba:	4857      	ldr	r0, [pc, #348]	; (15418 <_strerror_r+0x2bc>)
   152bc:	bd10      	pop	{r4, pc}
   152be:	4857      	ldr	r0, [pc, #348]	; (1541c <_strerror_r+0x2c0>)
   152c0:	bd10      	pop	{r4, pc}
   152c2:	4857      	ldr	r0, [pc, #348]	; (15420 <_strerror_r+0x2c4>)
   152c4:	bd10      	pop	{r4, pc}
   152c6:	4857      	ldr	r0, [pc, #348]	; (15424 <_strerror_r+0x2c8>)
   152c8:	bd10      	pop	{r4, pc}
   152ca:	4857      	ldr	r0, [pc, #348]	; (15428 <_strerror_r+0x2cc>)
   152cc:	bd10      	pop	{r4, pc}
   152ce:	4857      	ldr	r0, [pc, #348]	; (1542c <_strerror_r+0x2d0>)
   152d0:	bd10      	pop	{r4, pc}
   152d2:	4857      	ldr	r0, [pc, #348]	; (15430 <_strerror_r+0x2d4>)
   152d4:	bd10      	pop	{r4, pc}
   152d6:	4857      	ldr	r0, [pc, #348]	; (15434 <_strerror_r+0x2d8>)
   152d8:	bd10      	pop	{r4, pc}
   152da:	4857      	ldr	r0, [pc, #348]	; (15438 <_strerror_r+0x2dc>)
   152dc:	bd10      	pop	{r4, pc}
   152de:	4857      	ldr	r0, [pc, #348]	; (1543c <_strerror_r+0x2e0>)
   152e0:	bd10      	pop	{r4, pc}
   152e2:	4857      	ldr	r0, [pc, #348]	; (15440 <_strerror_r+0x2e4>)
   152e4:	bd10      	pop	{r4, pc}
   152e6:	4857      	ldr	r0, [pc, #348]	; (15444 <_strerror_r+0x2e8>)
   152e8:	bd10      	pop	{r4, pc}
   152ea:	4857      	ldr	r0, [pc, #348]	; (15448 <_strerror_r+0x2ec>)
   152ec:	bd10      	pop	{r4, pc}
   152ee:	4857      	ldr	r0, [pc, #348]	; (1544c <_strerror_r+0x2f0>)
   152f0:	bd10      	pop	{r4, pc}
   152f2:	4857      	ldr	r0, [pc, #348]	; (15450 <_strerror_r+0x2f4>)
   152f4:	bd10      	pop	{r4, pc}
   152f6:	4857      	ldr	r0, [pc, #348]	; (15454 <_strerror_r+0x2f8>)
   152f8:	bd10      	pop	{r4, pc}
   152fa:	4857      	ldr	r0, [pc, #348]	; (15458 <_strerror_r+0x2fc>)
   152fc:	bd10      	pop	{r4, pc}
   152fe:	4857      	ldr	r0, [pc, #348]	; (1545c <_strerror_r+0x300>)
   15300:	bd10      	pop	{r4, pc}
   15302:	4857      	ldr	r0, [pc, #348]	; (15460 <_strerror_r+0x304>)
   15304:	bd10      	pop	{r4, pc}
   15306:	4857      	ldr	r0, [pc, #348]	; (15464 <_strerror_r+0x308>)
   15308:	bd10      	pop	{r4, pc}
   1530a:	4857      	ldr	r0, [pc, #348]	; (15468 <_strerror_r+0x30c>)
   1530c:	bd10      	pop	{r4, pc}
   1530e:	4857      	ldr	r0, [pc, #348]	; (1546c <_strerror_r+0x310>)
   15310:	bd10      	pop	{r4, pc}
   15312:	4857      	ldr	r0, [pc, #348]	; (15470 <_strerror_r+0x314>)
   15314:	bd10      	pop	{r4, pc}
   15316:	4857      	ldr	r0, [pc, #348]	; (15474 <_strerror_r+0x318>)
   15318:	bd10      	pop	{r4, pc}
   1531a:	4857      	ldr	r0, [pc, #348]	; (15478 <_strerror_r+0x31c>)
   1531c:	bd10      	pop	{r4, pc}
   1531e:	4857      	ldr	r0, [pc, #348]	; (1547c <_strerror_r+0x320>)
   15320:	bd10      	pop	{r4, pc}
   15322:	4857      	ldr	r0, [pc, #348]	; (15480 <_strerror_r+0x324>)
   15324:	bd10      	pop	{r4, pc}
   15326:	4857      	ldr	r0, [pc, #348]	; (15484 <_strerror_r+0x328>)
   15328:	bd10      	pop	{r4, pc}
   1532a:	4857      	ldr	r0, [pc, #348]	; (15488 <_strerror_r+0x32c>)
   1532c:	bd10      	pop	{r4, pc}
   1532e:	4857      	ldr	r0, [pc, #348]	; (1548c <_strerror_r+0x330>)
   15330:	bd10      	pop	{r4, pc}
   15332:	4857      	ldr	r0, [pc, #348]	; (15490 <_strerror_r+0x334>)
   15334:	bd10      	pop	{r4, pc}
   15336:	4857      	ldr	r0, [pc, #348]	; (15494 <_strerror_r+0x338>)
   15338:	bd10      	pop	{r4, pc}
   1533a:	4857      	ldr	r0, [pc, #348]	; (15498 <_strerror_r+0x33c>)
   1533c:	bd10      	pop	{r4, pc}
   1533e:	4857      	ldr	r0, [pc, #348]	; (1549c <_strerror_r+0x340>)
   15340:	bd10      	pop	{r4, pc}
   15342:	4857      	ldr	r0, [pc, #348]	; (154a0 <_strerror_r+0x344>)
   15344:	bd10      	pop	{r4, pc}
   15346:	4857      	ldr	r0, [pc, #348]	; (154a4 <_strerror_r+0x348>)
   15348:	bd10      	pop	{r4, pc}
   1534a:	4857      	ldr	r0, [pc, #348]	; (154a8 <_strerror_r+0x34c>)
   1534c:	bd10      	pop	{r4, pc}
   1534e:	4857      	ldr	r0, [pc, #348]	; (154ac <_strerror_r+0x350>)
   15350:	bd10      	pop	{r4, pc}
   15352:	4857      	ldr	r0, [pc, #348]	; (154b0 <_strerror_r+0x354>)
   15354:	bd10      	pop	{r4, pc}
   15356:	4857      	ldr	r0, [pc, #348]	; (154b4 <_strerror_r+0x358>)
   15358:	bd10      	pop	{r4, pc}
   1535a:	4857      	ldr	r0, [pc, #348]	; (154b8 <_strerror_r+0x35c>)
   1535c:	bd10      	pop	{r4, pc}
   1535e:	4857      	ldr	r0, [pc, #348]	; (154bc <_strerror_r+0x360>)
   15360:	bd10      	pop	{r4, pc}
   15362:	4857      	ldr	r0, [pc, #348]	; (154c0 <_strerror_r+0x364>)
   15364:	bd10      	pop	{r4, pc}
   15366:	4857      	ldr	r0, [pc, #348]	; (154c4 <_strerror_r+0x368>)
   15368:	bd10      	pop	{r4, pc}
   1536a:	4857      	ldr	r0, [pc, #348]	; (154c8 <_strerror_r+0x36c>)
   1536c:	bd10      	pop	{r4, pc}
   1536e:	4857      	ldr	r0, [pc, #348]	; (154cc <_strerror_r+0x370>)
   15370:	bd10      	pop	{r4, pc}
   15372:	4857      	ldr	r0, [pc, #348]	; (154d0 <_strerror_r+0x374>)
   15374:	bd10      	pop	{r4, pc}
   15376:	4857      	ldr	r0, [pc, #348]	; (154d4 <_strerror_r+0x378>)
   15378:	bd10      	pop	{r4, pc}
   1537a:	4857      	ldr	r0, [pc, #348]	; (154d8 <_strerror_r+0x37c>)
   1537c:	bd10      	pop	{r4, pc}
   1537e:	4857      	ldr	r0, [pc, #348]	; (154dc <_strerror_r+0x380>)
   15380:	bd10      	pop	{r4, pc}
   15382:	4857      	ldr	r0, [pc, #348]	; (154e0 <_strerror_r+0x384>)
   15384:	bd10      	pop	{r4, pc}
   15386:	4857      	ldr	r0, [pc, #348]	; (154e4 <_strerror_r+0x388>)
   15388:	bd10      	pop	{r4, pc}
   1538a:	4857      	ldr	r0, [pc, #348]	; (154e8 <_strerror_r+0x38c>)
   1538c:	bd10      	pop	{r4, pc}
   1538e:	4857      	ldr	r0, [pc, #348]	; (154ec <_strerror_r+0x390>)
   15390:	bd10      	pop	{r4, pc}
   15392:	4857      	ldr	r0, [pc, #348]	; (154f0 <_strerror_r+0x394>)
   15394:	bd10      	pop	{r4, pc}
   15396:	4857      	ldr	r0, [pc, #348]	; (154f4 <_strerror_r+0x398>)
   15398:	bd10      	pop	{r4, pc}
   1539a:	4857      	ldr	r0, [pc, #348]	; (154f8 <_strerror_r+0x39c>)
   1539c:	bd10      	pop	{r4, pc}
   1539e:	4857      	ldr	r0, [pc, #348]	; (154fc <_strerror_r+0x3a0>)
   153a0:	bd10      	pop	{r4, pc}
   153a2:	4857      	ldr	r0, [pc, #348]	; (15500 <_strerror_r+0x3a4>)
   153a4:	bd10      	pop	{r4, pc}
   153a6:	4857      	ldr	r0, [pc, #348]	; (15504 <_strerror_r+0x3a8>)
   153a8:	bd10      	pop	{r4, pc}
   153aa:	4857      	ldr	r0, [pc, #348]	; (15508 <_strerror_r+0x3ac>)
   153ac:	bd10      	pop	{r4, pc}
   153ae:	4857      	ldr	r0, [pc, #348]	; (1550c <_strerror_r+0x3b0>)
   153b0:	bd10      	pop	{r4, pc}
   153b2:	4857      	ldr	r0, [pc, #348]	; (15510 <_strerror_r+0x3b4>)
   153b4:	bd10      	pop	{r4, pc}
   153b6:	4857      	ldr	r0, [pc, #348]	; (15514 <_strerror_r+0x3b8>)
   153b8:	bd10      	pop	{r4, pc}
   153ba:	4857      	ldr	r0, [pc, #348]	; (15518 <_strerror_r+0x3bc>)
   153bc:	bd10      	pop	{r4, pc}
   153be:	4857      	ldr	r0, [pc, #348]	; (1551c <_strerror_r+0x3c0>)
   153c0:	bd10      	pop	{r4, pc}
   153c2:	4857      	ldr	r0, [pc, #348]	; (15520 <_strerror_r+0x3c4>)
   153c4:	bd10      	pop	{r4, pc}
   153c6:	4614      	mov	r4, r2
   153c8:	4602      	mov	r2, r0
   153ca:	2b00      	cmp	r3, #0
   153cc:	bf18      	it	ne
   153ce:	461a      	movne	r2, r3
   153d0:	4608      	mov	r0, r1
   153d2:	4621      	mov	r1, r4
   153d4:	f001 fba2 	bl	16b1c <_user_strerror>
   153d8:	4b52      	ldr	r3, [pc, #328]	; (15524 <_strerror_r+0x3c8>)
   153da:	2800      	cmp	r0, #0
   153dc:	bf08      	it	eq
   153de:	4618      	moveq	r0, r3
   153e0:	bd10      	pop	{r4, pc}
   153e2:	bf00      	nop
   153e4:	00023588 	.word	0x00023588
   153e8:	00023bfc 	.word	0x00023bfc
   153ec:	00023be4 	.word	0x00023be4
   153f0:	00023bd0 	.word	0x00023bd0
   153f4:	00023c34 	.word	0x00023c34
   153f8:	0002392c 	.word	0x0002392c
   153fc:	00023864 	.word	0x00023864
   15400:	00023b9c 	.word	0x00023b9c
   15404:	00023bb4 	.word	0x00023bb4
   15408:	000237a0 	.word	0x000237a0
   1540c:	00023b60 	.word	0x00023b60
   15410:	000239d4 	.word	0x000239d4
   15414:	00023c5c 	.word	0x00023c5c
   15418:	00023668 	.word	0x00023668
   1541c:	00023630 	.word	0x00023630
   15420:	00023738 	.word	0x00023738
   15424:	00023838 	.word	0x00023838
   15428:	00023728 	.word	0x00023728
   1542c:	00023c70 	.word	0x00023c70
   15430:	0002377c 	.word	0x0002377c
   15434:	00023950 	.word	0x00023950
   15438:	00023b78 	.word	0x00023b78
   1543c:	00023b48 	.word	0x00023b48
   15440:	00023b18 	.word	0x00023b18
   15444:	00023b00 	.word	0x00023b00
   15448:	00023ae0 	.word	0x00023ae0
   1544c:	00023ac0 	.word	0x00023ac0
   15450:	00023a90 	.word	0x00023a90
   15454:	00023a6c 	.word	0x00023a6c
   15458:	00023b2c 	.word	0x00023b2c
   1545c:	00023c10 	.word	0x00023c10
   15460:	00023a54 	.word	0x00023a54
   15464:	00023a38 	.word	0x00023a38
   15468:	00023a24 	.word	0x00023a24
   1546c:	00023a08 	.word	0x00023a08
   15470:	000239fc 	.word	0x000239fc
   15474:	000239e8 	.word	0x000239e8
   15478:	000239c4 	.word	0x000239c4
   1547c:	000239ac 	.word	0x000239ac
   15480:	00023998 	.word	0x00023998
   15484:	00023980 	.word	0x00023980
   15488:	00023a88 	.word	0x00023a88
   1548c:	00023970 	.word	0x00023970
   15490:	00023968 	.word	0x00023968
   15494:	00023944 	.word	0x00023944
   15498:	00023918 	.word	0x00023918
   1549c:	000238fc 	.word	0x000238fc
   154a0:	000238e8 	.word	0x000238e8
   154a4:	000238b8 	.word	0x000238b8
   154a8:	000238ac 	.word	0x000238ac
   154ac:	0002389c 	.word	0x0002389c
   154b0:	00023884 	.word	0x00023884
   154b4:	00023874 	.word	0x00023874
   154b8:	0002384c 	.word	0x0002384c
   154bc:	00023828 	.word	0x00023828
   154c0:	00023818 	.word	0x00023818
   154c4:	00023800 	.word	0x00023800
   154c8:	000237e0 	.word	0x000237e0
   154cc:	000237c0 	.word	0x000237c0
   154d0:	00023768 	.word	0x00023768
   154d4:	00023758 	.word	0x00023758
   154d8:	00023718 	.word	0x00023718
   154dc:	00023708 	.word	0x00023708
   154e0:	000236f4 	.word	0x000236f4
   154e4:	000236e8 	.word	0x000236e8
   154e8:	000236d0 	.word	0x000236d0
   154ec:	000236c4 	.word	0x000236c4
   154f0:	000236b0 	.word	0x000236b0
   154f4:	0002369c 	.word	0x0002369c
   154f8:	00023688 	.word	0x00023688
   154fc:	0002365c 	.word	0x0002365c
   15500:	0002364c 	.word	0x0002364c
   15504:	0002361c 	.word	0x0002361c
   15508:	00023608 	.word	0x00023608
   1550c:	000235ec 	.word	0x000235ec
   15510:	000235e0 	.word	0x000235e0
   15514:	000235c8 	.word	0x000235c8
   15518:	000235b8 	.word	0x000235b8
   1551c:	0002359c 	.word	0x0002359c
   15520:	00023590 	.word	0x00023590
   15524:	0001fe0c 	.word	0x0001fe0c

00015528 <strerror>:
   15528:	b410      	push	{r4}
   1552a:	4c04      	ldr	r4, [pc, #16]	; (1553c <strerror+0x14>)
   1552c:	2300      	movs	r3, #0
   1552e:	4601      	mov	r1, r0
   15530:	461a      	mov	r2, r3
   15532:	6820      	ldr	r0, [r4, #0]
   15534:	bc10      	pop	{r4}
   15536:	f7ff be11 	b.w	1515c <_strerror_r>
   1553a:	bf00      	nop
   1553c:	20000018 	.word	0x20000018

00015540 <strlen>:
   15540:	f890 f000 	pld	[r0]
   15544:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   15548:	f020 0107 	bic.w	r1, r0, #7
   1554c:	f06f 0c00 	mvn.w	ip, #0
   15550:	f010 0407 	ands.w	r4, r0, #7
   15554:	f891 f020 	pld	[r1, #32]
   15558:	f040 8049 	bne.w	155ee <strlen+0xae>
   1555c:	f04f 0400 	mov.w	r4, #0
   15560:	f06f 0007 	mvn.w	r0, #7
   15564:	e9d1 2300 	ldrd	r2, r3, [r1]
   15568:	f891 f040 	pld	[r1, #64]	; 0x40
   1556c:	f100 0008 	add.w	r0, r0, #8
   15570:	fa82 f24c 	uadd8	r2, r2, ip
   15574:	faa4 f28c 	sel	r2, r4, ip
   15578:	fa83 f34c 	uadd8	r3, r3, ip
   1557c:	faa2 f38c 	sel	r3, r2, ip
   15580:	bb4b      	cbnz	r3, 155d6 <strlen+0x96>
   15582:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   15586:	fa82 f24c 	uadd8	r2, r2, ip
   1558a:	f100 0008 	add.w	r0, r0, #8
   1558e:	faa4 f28c 	sel	r2, r4, ip
   15592:	fa83 f34c 	uadd8	r3, r3, ip
   15596:	faa2 f38c 	sel	r3, r2, ip
   1559a:	b9e3      	cbnz	r3, 155d6 <strlen+0x96>
   1559c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   155a0:	fa82 f24c 	uadd8	r2, r2, ip
   155a4:	f100 0008 	add.w	r0, r0, #8
   155a8:	faa4 f28c 	sel	r2, r4, ip
   155ac:	fa83 f34c 	uadd8	r3, r3, ip
   155b0:	faa2 f38c 	sel	r3, r2, ip
   155b4:	b97b      	cbnz	r3, 155d6 <strlen+0x96>
   155b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   155ba:	f101 0120 	add.w	r1, r1, #32
   155be:	fa82 f24c 	uadd8	r2, r2, ip
   155c2:	f100 0008 	add.w	r0, r0, #8
   155c6:	faa4 f28c 	sel	r2, r4, ip
   155ca:	fa83 f34c 	uadd8	r3, r3, ip
   155ce:	faa2 f38c 	sel	r3, r2, ip
   155d2:	2b00      	cmp	r3, #0
   155d4:	d0c6      	beq.n	15564 <strlen+0x24>
   155d6:	2a00      	cmp	r2, #0
   155d8:	bf04      	itt	eq
   155da:	3004      	addeq	r0, #4
   155dc:	461a      	moveq	r2, r3
   155de:	ba12      	rev	r2, r2
   155e0:	fab2 f282 	clz	r2, r2
   155e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   155e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   155ec:	4770      	bx	lr
   155ee:	e9d1 2300 	ldrd	r2, r3, [r1]
   155f2:	f004 0503 	and.w	r5, r4, #3
   155f6:	f1c4 0000 	rsb	r0, r4, #0
   155fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   155fe:	f014 0f04 	tst.w	r4, #4
   15602:	f891 f040 	pld	[r1, #64]	; 0x40
   15606:	fa0c f505 	lsl.w	r5, ip, r5
   1560a:	ea62 0205 	orn	r2, r2, r5
   1560e:	bf1c      	itt	ne
   15610:	ea63 0305 	ornne	r3, r3, r5
   15614:	4662      	movne	r2, ip
   15616:	f04f 0400 	mov.w	r4, #0
   1561a:	e7a9      	b.n	15570 <strlen+0x30>

0001561c <strncmp>:
   1561c:	2a00      	cmp	r2, #0
   1561e:	d041      	beq.n	156a4 <strncmp+0x88>
   15620:	ea40 0301 	orr.w	r3, r0, r1
   15624:	f013 0303 	ands.w	r3, r3, #3
   15628:	b4f0      	push	{r4, r5, r6, r7}
   1562a:	d125      	bne.n	15678 <strncmp+0x5c>
   1562c:	2a03      	cmp	r2, #3
   1562e:	d923      	bls.n	15678 <strncmp+0x5c>
   15630:	6804      	ldr	r4, [r0, #0]
   15632:	680d      	ldr	r5, [r1, #0]
   15634:	42ac      	cmp	r4, r5
   15636:	d11f      	bne.n	15678 <strncmp+0x5c>
   15638:	3a04      	subs	r2, #4
   1563a:	d038      	beq.n	156ae <strncmp+0x92>
   1563c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   15640:	ea25 0404 	bic.w	r4, r5, r4
   15644:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   15648:	d12e      	bne.n	156a8 <strncmp+0x8c>
   1564a:	3004      	adds	r0, #4
   1564c:	3104      	adds	r1, #4
   1564e:	e00f      	b.n	15670 <strncmp+0x54>
   15650:	f850 3b04 	ldr.w	r3, [r0], #4
   15654:	680e      	ldr	r6, [r1, #0]
   15656:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   1565a:	42b3      	cmp	r3, r6
   1565c:	ea24 0403 	bic.w	r4, r4, r3
   15660:	f101 0104 	add.w	r1, r1, #4
   15664:	d126      	bne.n	156b4 <strncmp+0x98>
   15666:	3a04      	subs	r2, #4
   15668:	d021      	beq.n	156ae <strncmp+0x92>
   1566a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1566e:	d11b      	bne.n	156a8 <strncmp+0x8c>
   15670:	2a03      	cmp	r2, #3
   15672:	4607      	mov	r7, r0
   15674:	460d      	mov	r5, r1
   15676:	d8eb      	bhi.n	15650 <strncmp+0x34>
   15678:	7805      	ldrb	r5, [r0, #0]
   1567a:	780c      	ldrb	r4, [r1, #0]
   1567c:	42ac      	cmp	r4, r5
   1567e:	f102 33ff 	add.w	r3, r2, #4294967295
   15682:	d11a      	bne.n	156ba <strncmp+0x9e>
   15684:	b183      	cbz	r3, 156a8 <strncmp+0x8c>
   15686:	b914      	cbnz	r4, 1568e <strncmp+0x72>
   15688:	e00e      	b.n	156a8 <strncmp+0x8c>
   1568a:	b16b      	cbz	r3, 156a8 <strncmp+0x8c>
   1568c:	b17a      	cbz	r2, 156ae <strncmp+0x92>
   1568e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   15692:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   15696:	42a2      	cmp	r2, r4
   15698:	f103 33ff 	add.w	r3, r3, #4294967295
   1569c:	d0f5      	beq.n	1568a <strncmp+0x6e>
   1569e:	1b10      	subs	r0, r2, r4
   156a0:	bcf0      	pop	{r4, r5, r6, r7}
   156a2:	4770      	bx	lr
   156a4:	4610      	mov	r0, r2
   156a6:	4770      	bx	lr
   156a8:	2000      	movs	r0, #0
   156aa:	bcf0      	pop	{r4, r5, r6, r7}
   156ac:	4770      	bx	lr
   156ae:	4610      	mov	r0, r2
   156b0:	bcf0      	pop	{r4, r5, r6, r7}
   156b2:	4770      	bx	lr
   156b4:	4629      	mov	r1, r5
   156b6:	4638      	mov	r0, r7
   156b8:	e7de      	b.n	15678 <strncmp+0x5c>
   156ba:	462a      	mov	r2, r5
   156bc:	e7ef      	b.n	1569e <strncmp+0x82>
   156be:	bf00      	nop

000156c0 <_svfprintf_r>:
   156c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156c4:	b0c3      	sub	sp, #268	; 0x10c
   156c6:	460c      	mov	r4, r1
   156c8:	910b      	str	r1, [sp, #44]	; 0x2c
   156ca:	4692      	mov	sl, r2
   156cc:	930f      	str	r3, [sp, #60]	; 0x3c
   156ce:	900c      	str	r0, [sp, #48]	; 0x30
   156d0:	f005 f874 	bl	1a7bc <_localeconv_r>
   156d4:	6803      	ldr	r3, [r0, #0]
   156d6:	931a      	str	r3, [sp, #104]	; 0x68
   156d8:	4618      	mov	r0, r3
   156da:	f7ff ff31 	bl	15540 <strlen>
   156de:	89a3      	ldrh	r3, [r4, #12]
   156e0:	9019      	str	r0, [sp, #100]	; 0x64
   156e2:	0619      	lsls	r1, r3, #24
   156e4:	d503      	bpl.n	156ee <_svfprintf_r+0x2e>
   156e6:	6923      	ldr	r3, [r4, #16]
   156e8:	2b00      	cmp	r3, #0
   156ea:	f001 8003 	beq.w	166f4 <_svfprintf_r+0x1034>
   156ee:	2300      	movs	r3, #0
   156f0:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   156f4:	9313      	str	r3, [sp, #76]	; 0x4c
   156f6:	9315      	str	r3, [sp, #84]	; 0x54
   156f8:	9314      	str	r3, [sp, #80]	; 0x50
   156fa:	9327      	str	r3, [sp, #156]	; 0x9c
   156fc:	9326      	str	r3, [sp, #152]	; 0x98
   156fe:	9318      	str	r3, [sp, #96]	; 0x60
   15700:	931b      	str	r3, [sp, #108]	; 0x6c
   15702:	9309      	str	r3, [sp, #36]	; 0x24
   15704:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   15708:	46c8      	mov	r8, r9
   1570a:	9316      	str	r3, [sp, #88]	; 0x58
   1570c:	9317      	str	r3, [sp, #92]	; 0x5c
   1570e:	f89a 3000 	ldrb.w	r3, [sl]
   15712:	4654      	mov	r4, sl
   15714:	b1e3      	cbz	r3, 15750 <_svfprintf_r+0x90>
   15716:	2b25      	cmp	r3, #37	; 0x25
   15718:	d102      	bne.n	15720 <_svfprintf_r+0x60>
   1571a:	e019      	b.n	15750 <_svfprintf_r+0x90>
   1571c:	2b25      	cmp	r3, #37	; 0x25
   1571e:	d003      	beq.n	15728 <_svfprintf_r+0x68>
   15720:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   15724:	2b00      	cmp	r3, #0
   15726:	d1f9      	bne.n	1571c <_svfprintf_r+0x5c>
   15728:	eba4 050a 	sub.w	r5, r4, sl
   1572c:	b185      	cbz	r5, 15750 <_svfprintf_r+0x90>
   1572e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   15730:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   15732:	f8c8 a000 	str.w	sl, [r8]
   15736:	3301      	adds	r3, #1
   15738:	442a      	add	r2, r5
   1573a:	2b07      	cmp	r3, #7
   1573c:	f8c8 5004 	str.w	r5, [r8, #4]
   15740:	9227      	str	r2, [sp, #156]	; 0x9c
   15742:	9326      	str	r3, [sp, #152]	; 0x98
   15744:	dc7f      	bgt.n	15846 <_svfprintf_r+0x186>
   15746:	f108 0808 	add.w	r8, r8, #8
   1574a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1574c:	442b      	add	r3, r5
   1574e:	9309      	str	r3, [sp, #36]	; 0x24
   15750:	7823      	ldrb	r3, [r4, #0]
   15752:	2b00      	cmp	r3, #0
   15754:	d07f      	beq.n	15856 <_svfprintf_r+0x196>
   15756:	2300      	movs	r3, #0
   15758:	461a      	mov	r2, r3
   1575a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   1575e:	4619      	mov	r1, r3
   15760:	930d      	str	r3, [sp, #52]	; 0x34
   15762:	469b      	mov	fp, r3
   15764:	f04f 30ff 	mov.w	r0, #4294967295
   15768:	7863      	ldrb	r3, [r4, #1]
   1576a:	900a      	str	r0, [sp, #40]	; 0x28
   1576c:	f104 0a01 	add.w	sl, r4, #1
   15770:	f10a 0a01 	add.w	sl, sl, #1
   15774:	f1a3 0020 	sub.w	r0, r3, #32
   15778:	2858      	cmp	r0, #88	; 0x58
   1577a:	f200 83c1 	bhi.w	15f00 <_svfprintf_r+0x840>
   1577e:	e8df f010 	tbh	[pc, r0, lsl #1]
   15782:	0238      	.short	0x0238
   15784:	03bf03bf 	.word	0x03bf03bf
   15788:	03bf0240 	.word	0x03bf0240
   1578c:	03bf03bf 	.word	0x03bf03bf
   15790:	03bf03bf 	.word	0x03bf03bf
   15794:	024503bf 	.word	0x024503bf
   15798:	03bf0203 	.word	0x03bf0203
   1579c:	026b005d 	.word	0x026b005d
   157a0:	028603bf 	.word	0x028603bf
   157a4:	039d039d 	.word	0x039d039d
   157a8:	039d039d 	.word	0x039d039d
   157ac:	039d039d 	.word	0x039d039d
   157b0:	039d039d 	.word	0x039d039d
   157b4:	03bf039d 	.word	0x03bf039d
   157b8:	03bf03bf 	.word	0x03bf03bf
   157bc:	03bf03bf 	.word	0x03bf03bf
   157c0:	03bf03bf 	.word	0x03bf03bf
   157c4:	03bf03bf 	.word	0x03bf03bf
   157c8:	033703bf 	.word	0x033703bf
   157cc:	03bf0357 	.word	0x03bf0357
   157d0:	03bf0357 	.word	0x03bf0357
   157d4:	03bf03bf 	.word	0x03bf03bf
   157d8:	039803bf 	.word	0x039803bf
   157dc:	03bf03bf 	.word	0x03bf03bf
   157e0:	03bf03ad 	.word	0x03bf03ad
   157e4:	03bf03bf 	.word	0x03bf03bf
   157e8:	03bf03bf 	.word	0x03bf03bf
   157ec:	03bf0259 	.word	0x03bf0259
   157f0:	031e03bf 	.word	0x031e03bf
   157f4:	03bf03bf 	.word	0x03bf03bf
   157f8:	03bf03bf 	.word	0x03bf03bf
   157fc:	03bf03bf 	.word	0x03bf03bf
   15800:	03bf03bf 	.word	0x03bf03bf
   15804:	03bf03bf 	.word	0x03bf03bf
   15808:	02db02c6 	.word	0x02db02c6
   1580c:	03570357 	.word	0x03570357
   15810:	028b0357 	.word	0x028b0357
   15814:	03bf02db 	.word	0x03bf02db
   15818:	029003bf 	.word	0x029003bf
   1581c:	029d03bf 	.word	0x029d03bf
   15820:	02b401cc 	.word	0x02b401cc
   15824:	03bf0208 	.word	0x03bf0208
   15828:	03bf01e1 	.word	0x03bf01e1
   1582c:	03bf007e 	.word	0x03bf007e
   15830:	020d03bf 	.word	0x020d03bf
   15834:	980d      	ldr	r0, [sp, #52]	; 0x34
   15836:	930f      	str	r3, [sp, #60]	; 0x3c
   15838:	4240      	negs	r0, r0
   1583a:	900d      	str	r0, [sp, #52]	; 0x34
   1583c:	f04b 0b04 	orr.w	fp, fp, #4
   15840:	f89a 3000 	ldrb.w	r3, [sl]
   15844:	e794      	b.n	15770 <_svfprintf_r+0xb0>
   15846:	aa25      	add	r2, sp, #148	; 0x94
   15848:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1584a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1584c:	f005 faea 	bl	1ae24 <__ssprint_r>
   15850:	b940      	cbnz	r0, 15864 <_svfprintf_r+0x1a4>
   15852:	46c8      	mov	r8, r9
   15854:	e779      	b.n	1574a <_svfprintf_r+0x8a>
   15856:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   15858:	b123      	cbz	r3, 15864 <_svfprintf_r+0x1a4>
   1585a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1585c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1585e:	aa25      	add	r2, sp, #148	; 0x94
   15860:	f005 fae0 	bl	1ae24 <__ssprint_r>
   15864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15866:	899b      	ldrh	r3, [r3, #12]
   15868:	f013 0f40 	tst.w	r3, #64	; 0x40
   1586c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1586e:	bf18      	it	ne
   15870:	f04f 33ff 	movne.w	r3, #4294967295
   15874:	9309      	str	r3, [sp, #36]	; 0x24
   15876:	9809      	ldr	r0, [sp, #36]	; 0x24
   15878:	b043      	add	sp, #268	; 0x10c
   1587a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1587e:	f01b 0f20 	tst.w	fp, #32
   15882:	9311      	str	r3, [sp, #68]	; 0x44
   15884:	f040 81dd 	bne.w	15c42 <_svfprintf_r+0x582>
   15888:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1588a:	f01b 0f10 	tst.w	fp, #16
   1588e:	4613      	mov	r3, r2
   15890:	f040 856e 	bne.w	16370 <_svfprintf_r+0xcb0>
   15894:	f01b 0f40 	tst.w	fp, #64	; 0x40
   15898:	f000 856a 	beq.w	16370 <_svfprintf_r+0xcb0>
   1589c:	8814      	ldrh	r4, [r2, #0]
   1589e:	3204      	adds	r2, #4
   158a0:	2500      	movs	r5, #0
   158a2:	2301      	movs	r3, #1
   158a4:	920f      	str	r2, [sp, #60]	; 0x3c
   158a6:	2700      	movs	r7, #0
   158a8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   158ac:	990a      	ldr	r1, [sp, #40]	; 0x28
   158ae:	1c4a      	adds	r2, r1, #1
   158b0:	f000 8265 	beq.w	15d7e <_svfprintf_r+0x6be>
   158b4:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   158b8:	9207      	str	r2, [sp, #28]
   158ba:	ea54 0205 	orrs.w	r2, r4, r5
   158be:	f040 8264 	bne.w	15d8a <_svfprintf_r+0x6ca>
   158c2:	2900      	cmp	r1, #0
   158c4:	f040 843c 	bne.w	16140 <_svfprintf_r+0xa80>
   158c8:	2b00      	cmp	r3, #0
   158ca:	f040 84d7 	bne.w	1627c <_svfprintf_r+0xbbc>
   158ce:	f01b 0301 	ands.w	r3, fp, #1
   158d2:	930e      	str	r3, [sp, #56]	; 0x38
   158d4:	f000 8604 	beq.w	164e0 <_svfprintf_r+0xe20>
   158d8:	ae42      	add	r6, sp, #264	; 0x108
   158da:	2330      	movs	r3, #48	; 0x30
   158dc:	f806 3d41 	strb.w	r3, [r6, #-65]!
   158e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   158e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   158e4:	4293      	cmp	r3, r2
   158e6:	bfb8      	it	lt
   158e8:	4613      	movlt	r3, r2
   158ea:	9308      	str	r3, [sp, #32]
   158ec:	2300      	movs	r3, #0
   158ee:	9312      	str	r3, [sp, #72]	; 0x48
   158f0:	b117      	cbz	r7, 158f8 <_svfprintf_r+0x238>
   158f2:	9b08      	ldr	r3, [sp, #32]
   158f4:	3301      	adds	r3, #1
   158f6:	9308      	str	r3, [sp, #32]
   158f8:	9b07      	ldr	r3, [sp, #28]
   158fa:	f013 0302 	ands.w	r3, r3, #2
   158fe:	9310      	str	r3, [sp, #64]	; 0x40
   15900:	d002      	beq.n	15908 <_svfprintf_r+0x248>
   15902:	9b08      	ldr	r3, [sp, #32]
   15904:	3302      	adds	r3, #2
   15906:	9308      	str	r3, [sp, #32]
   15908:	9b07      	ldr	r3, [sp, #28]
   1590a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   1590e:	f040 830e 	bne.w	15f2e <_svfprintf_r+0x86e>
   15912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15914:	9a08      	ldr	r2, [sp, #32]
   15916:	eba3 0b02 	sub.w	fp, r3, r2
   1591a:	f1bb 0f00 	cmp.w	fp, #0
   1591e:	f340 8306 	ble.w	15f2e <_svfprintf_r+0x86e>
   15922:	f1bb 0f10 	cmp.w	fp, #16
   15926:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   15928:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1592a:	dd29      	ble.n	15980 <_svfprintf_r+0x2c0>
   1592c:	4643      	mov	r3, r8
   1592e:	4621      	mov	r1, r4
   15930:	46a8      	mov	r8, r5
   15932:	2710      	movs	r7, #16
   15934:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   15936:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   15938:	e006      	b.n	15948 <_svfprintf_r+0x288>
   1593a:	f1ab 0b10 	sub.w	fp, fp, #16
   1593e:	f1bb 0f10 	cmp.w	fp, #16
   15942:	f103 0308 	add.w	r3, r3, #8
   15946:	dd18      	ble.n	1597a <_svfprintf_r+0x2ba>
   15948:	3201      	adds	r2, #1
   1594a:	48b7      	ldr	r0, [pc, #732]	; (15c28 <_svfprintf_r+0x568>)
   1594c:	9226      	str	r2, [sp, #152]	; 0x98
   1594e:	3110      	adds	r1, #16
   15950:	2a07      	cmp	r2, #7
   15952:	9127      	str	r1, [sp, #156]	; 0x9c
   15954:	e883 0081 	stmia.w	r3, {r0, r7}
   15958:	ddef      	ble.n	1593a <_svfprintf_r+0x27a>
   1595a:	aa25      	add	r2, sp, #148	; 0x94
   1595c:	4629      	mov	r1, r5
   1595e:	4620      	mov	r0, r4
   15960:	f005 fa60 	bl	1ae24 <__ssprint_r>
   15964:	2800      	cmp	r0, #0
   15966:	f47f af7d 	bne.w	15864 <_svfprintf_r+0x1a4>
   1596a:	f1ab 0b10 	sub.w	fp, fp, #16
   1596e:	f1bb 0f10 	cmp.w	fp, #16
   15972:	9927      	ldr	r1, [sp, #156]	; 0x9c
   15974:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15976:	464b      	mov	r3, r9
   15978:	dce6      	bgt.n	15948 <_svfprintf_r+0x288>
   1597a:	4645      	mov	r5, r8
   1597c:	460c      	mov	r4, r1
   1597e:	4698      	mov	r8, r3
   15980:	3201      	adds	r2, #1
   15982:	4ba9      	ldr	r3, [pc, #676]	; (15c28 <_svfprintf_r+0x568>)
   15984:	9226      	str	r2, [sp, #152]	; 0x98
   15986:	445c      	add	r4, fp
   15988:	2a07      	cmp	r2, #7
   1598a:	9427      	str	r4, [sp, #156]	; 0x9c
   1598c:	e888 0808 	stmia.w	r8, {r3, fp}
   15990:	f300 8498 	bgt.w	162c4 <_svfprintf_r+0xc04>
   15994:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   15998:	f108 0808 	add.w	r8, r8, #8
   1599c:	b177      	cbz	r7, 159bc <_svfprintf_r+0x2fc>
   1599e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   159a0:	3301      	adds	r3, #1
   159a2:	3401      	adds	r4, #1
   159a4:	f10d 0177 	add.w	r1, sp, #119	; 0x77
   159a8:	2201      	movs	r2, #1
   159aa:	2b07      	cmp	r3, #7
   159ac:	9427      	str	r4, [sp, #156]	; 0x9c
   159ae:	9326      	str	r3, [sp, #152]	; 0x98
   159b0:	e888 0006 	stmia.w	r8, {r1, r2}
   159b4:	f300 83db 	bgt.w	1616e <_svfprintf_r+0xaae>
   159b8:	f108 0808 	add.w	r8, r8, #8
   159bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   159be:	b16b      	cbz	r3, 159dc <_svfprintf_r+0x31c>
   159c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   159c2:	3301      	adds	r3, #1
   159c4:	3402      	adds	r4, #2
   159c6:	a91e      	add	r1, sp, #120	; 0x78
   159c8:	2202      	movs	r2, #2
   159ca:	2b07      	cmp	r3, #7
   159cc:	9427      	str	r4, [sp, #156]	; 0x9c
   159ce:	9326      	str	r3, [sp, #152]	; 0x98
   159d0:	e888 0006 	stmia.w	r8, {r1, r2}
   159d4:	f300 83d6 	bgt.w	16184 <_svfprintf_r+0xac4>
   159d8:	f108 0808 	add.w	r8, r8, #8
   159dc:	2d80      	cmp	r5, #128	; 0x80
   159de:	f000 8315 	beq.w	1600c <_svfprintf_r+0x94c>
   159e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   159e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   159e6:	1a9f      	subs	r7, r3, r2
   159e8:	2f00      	cmp	r7, #0
   159ea:	dd36      	ble.n	15a5a <_svfprintf_r+0x39a>
   159ec:	2f10      	cmp	r7, #16
   159ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
   159f0:	4d8e      	ldr	r5, [pc, #568]	; (15c2c <_svfprintf_r+0x56c>)
   159f2:	dd27      	ble.n	15a44 <_svfprintf_r+0x384>
   159f4:	4642      	mov	r2, r8
   159f6:	4621      	mov	r1, r4
   159f8:	46b0      	mov	r8, r6
   159fa:	f04f 0b10 	mov.w	fp, #16
   159fe:	462e      	mov	r6, r5
   15a00:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   15a02:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   15a04:	e004      	b.n	15a10 <_svfprintf_r+0x350>
   15a06:	3f10      	subs	r7, #16
   15a08:	2f10      	cmp	r7, #16
   15a0a:	f102 0208 	add.w	r2, r2, #8
   15a0e:	dd15      	ble.n	15a3c <_svfprintf_r+0x37c>
   15a10:	3301      	adds	r3, #1
   15a12:	3110      	adds	r1, #16
   15a14:	2b07      	cmp	r3, #7
   15a16:	9127      	str	r1, [sp, #156]	; 0x9c
   15a18:	9326      	str	r3, [sp, #152]	; 0x98
   15a1a:	e882 0840 	stmia.w	r2, {r6, fp}
   15a1e:	ddf2      	ble.n	15a06 <_svfprintf_r+0x346>
   15a20:	aa25      	add	r2, sp, #148	; 0x94
   15a22:	4629      	mov	r1, r5
   15a24:	4620      	mov	r0, r4
   15a26:	f005 f9fd 	bl	1ae24 <__ssprint_r>
   15a2a:	2800      	cmp	r0, #0
   15a2c:	f47f af1a 	bne.w	15864 <_svfprintf_r+0x1a4>
   15a30:	3f10      	subs	r7, #16
   15a32:	2f10      	cmp	r7, #16
   15a34:	9927      	ldr	r1, [sp, #156]	; 0x9c
   15a36:	9b26      	ldr	r3, [sp, #152]	; 0x98
   15a38:	464a      	mov	r2, r9
   15a3a:	dce9      	bgt.n	15a10 <_svfprintf_r+0x350>
   15a3c:	4635      	mov	r5, r6
   15a3e:	460c      	mov	r4, r1
   15a40:	4646      	mov	r6, r8
   15a42:	4690      	mov	r8, r2
   15a44:	3301      	adds	r3, #1
   15a46:	443c      	add	r4, r7
   15a48:	2b07      	cmp	r3, #7
   15a4a:	9427      	str	r4, [sp, #156]	; 0x9c
   15a4c:	9326      	str	r3, [sp, #152]	; 0x98
   15a4e:	e888 00a0 	stmia.w	r8, {r5, r7}
   15a52:	f300 8381 	bgt.w	16158 <_svfprintf_r+0xa98>
   15a56:	f108 0808 	add.w	r8, r8, #8
   15a5a:	9b07      	ldr	r3, [sp, #28]
   15a5c:	05df      	lsls	r7, r3, #23
   15a5e:	f100 8268 	bmi.w	15f32 <_svfprintf_r+0x872>
   15a62:	9b26      	ldr	r3, [sp, #152]	; 0x98
   15a64:	990e      	ldr	r1, [sp, #56]	; 0x38
   15a66:	f8c8 6000 	str.w	r6, [r8]
   15a6a:	3301      	adds	r3, #1
   15a6c:	440c      	add	r4, r1
   15a6e:	2b07      	cmp	r3, #7
   15a70:	9427      	str	r4, [sp, #156]	; 0x9c
   15a72:	f8c8 1004 	str.w	r1, [r8, #4]
   15a76:	9326      	str	r3, [sp, #152]	; 0x98
   15a78:	f300 834d 	bgt.w	16116 <_svfprintf_r+0xa56>
   15a7c:	f108 0808 	add.w	r8, r8, #8
   15a80:	9b07      	ldr	r3, [sp, #28]
   15a82:	075b      	lsls	r3, r3, #29
   15a84:	d53a      	bpl.n	15afc <_svfprintf_r+0x43c>
   15a86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15a88:	9a08      	ldr	r2, [sp, #32]
   15a8a:	1a9d      	subs	r5, r3, r2
   15a8c:	2d00      	cmp	r5, #0
   15a8e:	dd35      	ble.n	15afc <_svfprintf_r+0x43c>
   15a90:	2d10      	cmp	r5, #16
   15a92:	9b26      	ldr	r3, [sp, #152]	; 0x98
   15a94:	dd20      	ble.n	15ad8 <_svfprintf_r+0x418>
   15a96:	2610      	movs	r6, #16
   15a98:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   15a9a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   15a9e:	e004      	b.n	15aaa <_svfprintf_r+0x3ea>
   15aa0:	3d10      	subs	r5, #16
   15aa2:	2d10      	cmp	r5, #16
   15aa4:	f108 0808 	add.w	r8, r8, #8
   15aa8:	dd16      	ble.n	15ad8 <_svfprintf_r+0x418>
   15aaa:	3301      	adds	r3, #1
   15aac:	4a5e      	ldr	r2, [pc, #376]	; (15c28 <_svfprintf_r+0x568>)
   15aae:	9326      	str	r3, [sp, #152]	; 0x98
   15ab0:	3410      	adds	r4, #16
   15ab2:	2b07      	cmp	r3, #7
   15ab4:	9427      	str	r4, [sp, #156]	; 0x9c
   15ab6:	e888 0044 	stmia.w	r8, {r2, r6}
   15aba:	ddf1      	ble.n	15aa0 <_svfprintf_r+0x3e0>
   15abc:	aa25      	add	r2, sp, #148	; 0x94
   15abe:	4659      	mov	r1, fp
   15ac0:	4638      	mov	r0, r7
   15ac2:	f005 f9af 	bl	1ae24 <__ssprint_r>
   15ac6:	2800      	cmp	r0, #0
   15ac8:	f47f aecc 	bne.w	15864 <_svfprintf_r+0x1a4>
   15acc:	3d10      	subs	r5, #16
   15ace:	2d10      	cmp	r5, #16
   15ad0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   15ad2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   15ad4:	46c8      	mov	r8, r9
   15ad6:	dce8      	bgt.n	15aaa <_svfprintf_r+0x3ea>
   15ad8:	3301      	adds	r3, #1
   15ada:	4a53      	ldr	r2, [pc, #332]	; (15c28 <_svfprintf_r+0x568>)
   15adc:	9326      	str	r3, [sp, #152]	; 0x98
   15ade:	442c      	add	r4, r5
   15ae0:	2b07      	cmp	r3, #7
   15ae2:	9427      	str	r4, [sp, #156]	; 0x9c
   15ae4:	e888 0024 	stmia.w	r8, {r2, r5}
   15ae8:	dd08      	ble.n	15afc <_svfprintf_r+0x43c>
   15aea:	aa25      	add	r2, sp, #148	; 0x94
   15aec:	990b      	ldr	r1, [sp, #44]	; 0x2c
   15aee:	980c      	ldr	r0, [sp, #48]	; 0x30
   15af0:	f005 f998 	bl	1ae24 <__ssprint_r>
   15af4:	2800      	cmp	r0, #0
   15af6:	f47f aeb5 	bne.w	15864 <_svfprintf_r+0x1a4>
   15afa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   15afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15afe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15b00:	9908      	ldr	r1, [sp, #32]
   15b02:	428a      	cmp	r2, r1
   15b04:	bfac      	ite	ge
   15b06:	189b      	addge	r3, r3, r2
   15b08:	185b      	addlt	r3, r3, r1
   15b0a:	9309      	str	r3, [sp, #36]	; 0x24
   15b0c:	2c00      	cmp	r4, #0
   15b0e:	f040 830d 	bne.w	1612c <_svfprintf_r+0xa6c>
   15b12:	2300      	movs	r3, #0
   15b14:	9326      	str	r3, [sp, #152]	; 0x98
   15b16:	46c8      	mov	r8, r9
   15b18:	e5f9      	b.n	1570e <_svfprintf_r+0x4e>
   15b1a:	9311      	str	r3, [sp, #68]	; 0x44
   15b1c:	f01b 0320 	ands.w	r3, fp, #32
   15b20:	f040 81e3 	bne.w	15eea <_svfprintf_r+0x82a>
   15b24:	f01b 0210 	ands.w	r2, fp, #16
   15b28:	f040 842e 	bne.w	16388 <_svfprintf_r+0xcc8>
   15b2c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   15b30:	f000 842a 	beq.w	16388 <_svfprintf_r+0xcc8>
   15b34:	990f      	ldr	r1, [sp, #60]	; 0x3c
   15b36:	4613      	mov	r3, r2
   15b38:	460a      	mov	r2, r1
   15b3a:	3204      	adds	r2, #4
   15b3c:	880c      	ldrh	r4, [r1, #0]
   15b3e:	920f      	str	r2, [sp, #60]	; 0x3c
   15b40:	2500      	movs	r5, #0
   15b42:	e6b0      	b.n	158a6 <_svfprintf_r+0x1e6>
   15b44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15b46:	9311      	str	r3, [sp, #68]	; 0x44
   15b48:	6816      	ldr	r6, [r2, #0]
   15b4a:	2400      	movs	r4, #0
   15b4c:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
   15b50:	1d15      	adds	r5, r2, #4
   15b52:	2e00      	cmp	r6, #0
   15b54:	f000 86a7 	beq.w	168a6 <_svfprintf_r+0x11e6>
   15b58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15b5a:	1c53      	adds	r3, r2, #1
   15b5c:	f000 8609 	beq.w	16772 <_svfprintf_r+0x10b2>
   15b60:	4621      	mov	r1, r4
   15b62:	4630      	mov	r0, r6
   15b64:	f7fe fcec 	bl	14540 <memchr>
   15b68:	2800      	cmp	r0, #0
   15b6a:	f000 86e1 	beq.w	16930 <_svfprintf_r+0x1270>
   15b6e:	1b83      	subs	r3, r0, r6
   15b70:	930e      	str	r3, [sp, #56]	; 0x38
   15b72:	940a      	str	r4, [sp, #40]	; 0x28
   15b74:	950f      	str	r5, [sp, #60]	; 0x3c
   15b76:	f8cd b01c 	str.w	fp, [sp, #28]
   15b7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   15b7e:	9308      	str	r3, [sp, #32]
   15b80:	9412      	str	r4, [sp, #72]	; 0x48
   15b82:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   15b86:	e6b3      	b.n	158f0 <_svfprintf_r+0x230>
   15b88:	f89a 3000 	ldrb.w	r3, [sl]
   15b8c:	2201      	movs	r2, #1
   15b8e:	212b      	movs	r1, #43	; 0x2b
   15b90:	e5ee      	b.n	15770 <_svfprintf_r+0xb0>
   15b92:	f04b 0b20 	orr.w	fp, fp, #32
   15b96:	f89a 3000 	ldrb.w	r3, [sl]
   15b9a:	e5e9      	b.n	15770 <_svfprintf_r+0xb0>
   15b9c:	9311      	str	r3, [sp, #68]	; 0x44
   15b9e:	2a00      	cmp	r2, #0
   15ba0:	f040 8795 	bne.w	16ace <_svfprintf_r+0x140e>
   15ba4:	4b22      	ldr	r3, [pc, #136]	; (15c30 <_svfprintf_r+0x570>)
   15ba6:	9318      	str	r3, [sp, #96]	; 0x60
   15ba8:	f01b 0f20 	tst.w	fp, #32
   15bac:	f040 8111 	bne.w	15dd2 <_svfprintf_r+0x712>
   15bb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15bb2:	f01b 0f10 	tst.w	fp, #16
   15bb6:	4613      	mov	r3, r2
   15bb8:	f040 83e1 	bne.w	1637e <_svfprintf_r+0xcbe>
   15bbc:	f01b 0f40 	tst.w	fp, #64	; 0x40
   15bc0:	f000 83dd 	beq.w	1637e <_svfprintf_r+0xcbe>
   15bc4:	3304      	adds	r3, #4
   15bc6:	8814      	ldrh	r4, [r2, #0]
   15bc8:	930f      	str	r3, [sp, #60]	; 0x3c
   15bca:	2500      	movs	r5, #0
   15bcc:	f01b 0f01 	tst.w	fp, #1
   15bd0:	f000 810c 	beq.w	15dec <_svfprintf_r+0x72c>
   15bd4:	ea54 0305 	orrs.w	r3, r4, r5
   15bd8:	f000 8108 	beq.w	15dec <_svfprintf_r+0x72c>
   15bdc:	2330      	movs	r3, #48	; 0x30
   15bde:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   15be2:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   15be6:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   15bea:	f04b 0b02 	orr.w	fp, fp, #2
   15bee:	2302      	movs	r3, #2
   15bf0:	e659      	b.n	158a6 <_svfprintf_r+0x1e6>
   15bf2:	f89a 3000 	ldrb.w	r3, [sl]
   15bf6:	2900      	cmp	r1, #0
   15bf8:	f47f adba 	bne.w	15770 <_svfprintf_r+0xb0>
   15bfc:	2201      	movs	r2, #1
   15bfe:	2120      	movs	r1, #32
   15c00:	e5b6      	b.n	15770 <_svfprintf_r+0xb0>
   15c02:	f04b 0b01 	orr.w	fp, fp, #1
   15c06:	f89a 3000 	ldrb.w	r3, [sl]
   15c0a:	e5b1      	b.n	15770 <_svfprintf_r+0xb0>
   15c0c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   15c0e:	6823      	ldr	r3, [r4, #0]
   15c10:	930d      	str	r3, [sp, #52]	; 0x34
   15c12:	4618      	mov	r0, r3
   15c14:	2800      	cmp	r0, #0
   15c16:	4623      	mov	r3, r4
   15c18:	f103 0304 	add.w	r3, r3, #4
   15c1c:	f6ff ae0a 	blt.w	15834 <_svfprintf_r+0x174>
   15c20:	930f      	str	r3, [sp, #60]	; 0x3c
   15c22:	f89a 3000 	ldrb.w	r3, [sl]
   15c26:	e5a3      	b.n	15770 <_svfprintf_r+0xb0>
   15c28:	00023cc8 	.word	0x00023cc8
   15c2c:	00023cd8 	.word	0x00023cd8
   15c30:	00023cac 	.word	0x00023cac
   15c34:	f04b 0b10 	orr.w	fp, fp, #16
   15c38:	f01b 0f20 	tst.w	fp, #32
   15c3c:	9311      	str	r3, [sp, #68]	; 0x44
   15c3e:	f43f ae23 	beq.w	15888 <_svfprintf_r+0x1c8>
   15c42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   15c44:	3507      	adds	r5, #7
   15c46:	f025 0307 	bic.w	r3, r5, #7
   15c4a:	f103 0208 	add.w	r2, r3, #8
   15c4e:	e9d3 4500 	ldrd	r4, r5, [r3]
   15c52:	920f      	str	r2, [sp, #60]	; 0x3c
   15c54:	2301      	movs	r3, #1
   15c56:	e626      	b.n	158a6 <_svfprintf_r+0x1e6>
   15c58:	f89a 3000 	ldrb.w	r3, [sl]
   15c5c:	2b2a      	cmp	r3, #42	; 0x2a
   15c5e:	f10a 0401 	add.w	r4, sl, #1
   15c62:	f000 8727 	beq.w	16ab4 <_svfprintf_r+0x13f4>
   15c66:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   15c6a:	2809      	cmp	r0, #9
   15c6c:	46a2      	mov	sl, r4
   15c6e:	f200 86ad 	bhi.w	169cc <_svfprintf_r+0x130c>
   15c72:	2300      	movs	r3, #0
   15c74:	461c      	mov	r4, r3
   15c76:	f81a 3b01 	ldrb.w	r3, [sl], #1
   15c7a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   15c7e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   15c82:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   15c86:	2809      	cmp	r0, #9
   15c88:	d9f5      	bls.n	15c76 <_svfprintf_r+0x5b6>
   15c8a:	940a      	str	r4, [sp, #40]	; 0x28
   15c8c:	e572      	b.n	15774 <_svfprintf_r+0xb4>
   15c8e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   15c92:	f89a 3000 	ldrb.w	r3, [sl]
   15c96:	e56b      	b.n	15770 <_svfprintf_r+0xb0>
   15c98:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   15c9c:	f89a 3000 	ldrb.w	r3, [sl]
   15ca0:	e566      	b.n	15770 <_svfprintf_r+0xb0>
   15ca2:	f89a 3000 	ldrb.w	r3, [sl]
   15ca6:	2b6c      	cmp	r3, #108	; 0x6c
   15ca8:	bf03      	ittte	eq
   15caa:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   15cae:	f04b 0b20 	orreq.w	fp, fp, #32
   15cb2:	f10a 0a01 	addeq.w	sl, sl, #1
   15cb6:	f04b 0b10 	orrne.w	fp, fp, #16
   15cba:	e559      	b.n	15770 <_svfprintf_r+0xb0>
   15cbc:	2a00      	cmp	r2, #0
   15cbe:	f040 8711 	bne.w	16ae4 <_svfprintf_r+0x1424>
   15cc2:	f01b 0f20 	tst.w	fp, #32
   15cc6:	f040 84f9 	bne.w	166bc <_svfprintf_r+0xffc>
   15cca:	f01b 0f10 	tst.w	fp, #16
   15cce:	f040 84ac 	bne.w	1662a <_svfprintf_r+0xf6a>
   15cd2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   15cd6:	f000 84a8 	beq.w	1662a <_svfprintf_r+0xf6a>
   15cda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15cdc:	6813      	ldr	r3, [r2, #0]
   15cde:	3204      	adds	r2, #4
   15ce0:	920f      	str	r2, [sp, #60]	; 0x3c
   15ce2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   15ce6:	801a      	strh	r2, [r3, #0]
   15ce8:	e511      	b.n	1570e <_svfprintf_r+0x4e>
   15cea:	990f      	ldr	r1, [sp, #60]	; 0x3c
   15cec:	4bb3      	ldr	r3, [pc, #716]	; (15fbc <_svfprintf_r+0x8fc>)
   15cee:	680c      	ldr	r4, [r1, #0]
   15cf0:	9318      	str	r3, [sp, #96]	; 0x60
   15cf2:	2230      	movs	r2, #48	; 0x30
   15cf4:	2378      	movs	r3, #120	; 0x78
   15cf6:	3104      	adds	r1, #4
   15cf8:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   15cfc:	9311      	str	r3, [sp, #68]	; 0x44
   15cfe:	f04b 0b02 	orr.w	fp, fp, #2
   15d02:	910f      	str	r1, [sp, #60]	; 0x3c
   15d04:	2500      	movs	r5, #0
   15d06:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   15d0a:	2302      	movs	r3, #2
   15d0c:	e5cb      	b.n	158a6 <_svfprintf_r+0x1e6>
   15d0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   15d10:	9311      	str	r3, [sp, #68]	; 0x44
   15d12:	680a      	ldr	r2, [r1, #0]
   15d14:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   15d18:	2300      	movs	r3, #0
   15d1a:	460a      	mov	r2, r1
   15d1c:	461f      	mov	r7, r3
   15d1e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   15d22:	3204      	adds	r2, #4
   15d24:	2301      	movs	r3, #1
   15d26:	9308      	str	r3, [sp, #32]
   15d28:	f8cd b01c 	str.w	fp, [sp, #28]
   15d2c:	970a      	str	r7, [sp, #40]	; 0x28
   15d2e:	9712      	str	r7, [sp, #72]	; 0x48
   15d30:	920f      	str	r2, [sp, #60]	; 0x3c
   15d32:	930e      	str	r3, [sp, #56]	; 0x38
   15d34:	ae28      	add	r6, sp, #160	; 0xa0
   15d36:	e5df      	b.n	158f8 <_svfprintf_r+0x238>
   15d38:	9311      	str	r3, [sp, #68]	; 0x44
   15d3a:	2a00      	cmp	r2, #0
   15d3c:	f040 86ea 	bne.w	16b14 <_svfprintf_r+0x1454>
   15d40:	f01b 0f20 	tst.w	fp, #32
   15d44:	d15d      	bne.n	15e02 <_svfprintf_r+0x742>
   15d46:	f01b 0f10 	tst.w	fp, #16
   15d4a:	f040 8308 	bne.w	1635e <_svfprintf_r+0xc9e>
   15d4e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   15d52:	f000 8304 	beq.w	1635e <_svfprintf_r+0xc9e>
   15d56:	990f      	ldr	r1, [sp, #60]	; 0x3c
   15d58:	f9b1 4000 	ldrsh.w	r4, [r1]
   15d5c:	3104      	adds	r1, #4
   15d5e:	17e5      	asrs	r5, r4, #31
   15d60:	4622      	mov	r2, r4
   15d62:	462b      	mov	r3, r5
   15d64:	910f      	str	r1, [sp, #60]	; 0x3c
   15d66:	2a00      	cmp	r2, #0
   15d68:	f173 0300 	sbcs.w	r3, r3, #0
   15d6c:	db58      	blt.n	15e20 <_svfprintf_r+0x760>
   15d6e:	990a      	ldr	r1, [sp, #40]	; 0x28
   15d70:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   15d74:	1c4a      	adds	r2, r1, #1
   15d76:	f04f 0301 	mov.w	r3, #1
   15d7a:	f47f ad9b 	bne.w	158b4 <_svfprintf_r+0x1f4>
   15d7e:	ea54 0205 	orrs.w	r2, r4, r5
   15d82:	f000 81df 	beq.w	16144 <_svfprintf_r+0xa84>
   15d86:	f8cd b01c 	str.w	fp, [sp, #28]
   15d8a:	2b01      	cmp	r3, #1
   15d8c:	f000 827b 	beq.w	16286 <_svfprintf_r+0xbc6>
   15d90:	2b02      	cmp	r3, #2
   15d92:	f040 8206 	bne.w	161a2 <_svfprintf_r+0xae2>
   15d96:	9818      	ldr	r0, [sp, #96]	; 0x60
   15d98:	464e      	mov	r6, r9
   15d9a:	0923      	lsrs	r3, r4, #4
   15d9c:	f004 010f 	and.w	r1, r4, #15
   15da0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   15da4:	092a      	lsrs	r2, r5, #4
   15da6:	461c      	mov	r4, r3
   15da8:	4615      	mov	r5, r2
   15daa:	5c43      	ldrb	r3, [r0, r1]
   15dac:	f806 3d01 	strb.w	r3, [r6, #-1]!
   15db0:	ea54 0305 	orrs.w	r3, r4, r5
   15db4:	d1f1      	bne.n	15d9a <_svfprintf_r+0x6da>
   15db6:	eba9 0306 	sub.w	r3, r9, r6
   15dba:	930e      	str	r3, [sp, #56]	; 0x38
   15dbc:	e590      	b.n	158e0 <_svfprintf_r+0x220>
   15dbe:	9311      	str	r3, [sp, #68]	; 0x44
   15dc0:	2a00      	cmp	r2, #0
   15dc2:	f040 86a3 	bne.w	16b0c <_svfprintf_r+0x144c>
   15dc6:	4b7e      	ldr	r3, [pc, #504]	; (15fc0 <_svfprintf_r+0x900>)
   15dc8:	9318      	str	r3, [sp, #96]	; 0x60
   15dca:	f01b 0f20 	tst.w	fp, #32
   15dce:	f43f aeef 	beq.w	15bb0 <_svfprintf_r+0x4f0>
   15dd2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   15dd4:	3507      	adds	r5, #7
   15dd6:	f025 0307 	bic.w	r3, r5, #7
   15dda:	f103 0208 	add.w	r2, r3, #8
   15dde:	f01b 0f01 	tst.w	fp, #1
   15de2:	920f      	str	r2, [sp, #60]	; 0x3c
   15de4:	e9d3 4500 	ldrd	r4, r5, [r3]
   15de8:	f47f aef4 	bne.w	15bd4 <_svfprintf_r+0x514>
   15dec:	2302      	movs	r3, #2
   15dee:	e55a      	b.n	158a6 <_svfprintf_r+0x1e6>
   15df0:	9311      	str	r3, [sp, #68]	; 0x44
   15df2:	2a00      	cmp	r2, #0
   15df4:	f040 8686 	bne.w	16b04 <_svfprintf_r+0x1444>
   15df8:	f04b 0b10 	orr.w	fp, fp, #16
   15dfc:	f01b 0f20 	tst.w	fp, #32
   15e00:	d0a1      	beq.n	15d46 <_svfprintf_r+0x686>
   15e02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   15e04:	3507      	adds	r5, #7
   15e06:	f025 0507 	bic.w	r5, r5, #7
   15e0a:	e9d5 2300 	ldrd	r2, r3, [r5]
   15e0e:	2a00      	cmp	r2, #0
   15e10:	f105 0108 	add.w	r1, r5, #8
   15e14:	461d      	mov	r5, r3
   15e16:	f173 0300 	sbcs.w	r3, r3, #0
   15e1a:	910f      	str	r1, [sp, #60]	; 0x3c
   15e1c:	4614      	mov	r4, r2
   15e1e:	daa6      	bge.n	15d6e <_svfprintf_r+0x6ae>
   15e20:	272d      	movs	r7, #45	; 0x2d
   15e22:	4264      	negs	r4, r4
   15e24:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   15e28:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   15e2c:	2301      	movs	r3, #1
   15e2e:	e53d      	b.n	158ac <_svfprintf_r+0x1ec>
   15e30:	9311      	str	r3, [sp, #68]	; 0x44
   15e32:	2a00      	cmp	r2, #0
   15e34:	f040 8662 	bne.w	16afc <_svfprintf_r+0x143c>
   15e38:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   15e3a:	3507      	adds	r5, #7
   15e3c:	f025 0307 	bic.w	r3, r5, #7
   15e40:	f103 0208 	add.w	r2, r3, #8
   15e44:	920f      	str	r2, [sp, #60]	; 0x3c
   15e46:	681a      	ldr	r2, [r3, #0]
   15e48:	9215      	str	r2, [sp, #84]	; 0x54
   15e4a:	685b      	ldr	r3, [r3, #4]
   15e4c:	9314      	str	r3, [sp, #80]	; 0x50
   15e4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15e50:	9d15      	ldr	r5, [sp, #84]	; 0x54
   15e52:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   15e56:	4628      	mov	r0, r5
   15e58:	4621      	mov	r1, r4
   15e5a:	f04f 32ff 	mov.w	r2, #4294967295
   15e5e:	4b59      	ldr	r3, [pc, #356]	; (15fc4 <_svfprintf_r+0x904>)
   15e60:	f005 f8f0 	bl	1b044 <__aeabi_dcmpun>
   15e64:	2800      	cmp	r0, #0
   15e66:	f040 834a 	bne.w	164fe <_svfprintf_r+0xe3e>
   15e6a:	4628      	mov	r0, r5
   15e6c:	4621      	mov	r1, r4
   15e6e:	f04f 32ff 	mov.w	r2, #4294967295
   15e72:	4b54      	ldr	r3, [pc, #336]	; (15fc4 <_svfprintf_r+0x904>)
   15e74:	f7fc f830 	bl	11ed8 <__aeabi_dcmple>
   15e78:	2800      	cmp	r0, #0
   15e7a:	f040 8340 	bne.w	164fe <_svfprintf_r+0xe3e>
   15e7e:	a815      	add	r0, sp, #84	; 0x54
   15e80:	c80d      	ldmia	r0, {r0, r2, r3}
   15e82:	9914      	ldr	r1, [sp, #80]	; 0x50
   15e84:	f7fc f81e 	bl	11ec4 <__aeabi_dcmplt>
   15e88:	2800      	cmp	r0, #0
   15e8a:	f040 8530 	bne.w	168ee <_svfprintf_r+0x122e>
   15e8e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   15e92:	4e4d      	ldr	r6, [pc, #308]	; (15fc8 <_svfprintf_r+0x908>)
   15e94:	4b4d      	ldr	r3, [pc, #308]	; (15fcc <_svfprintf_r+0x90c>)
   15e96:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   15e9a:	9007      	str	r0, [sp, #28]
   15e9c:	9811      	ldr	r0, [sp, #68]	; 0x44
   15e9e:	2203      	movs	r2, #3
   15ea0:	2100      	movs	r1, #0
   15ea2:	9208      	str	r2, [sp, #32]
   15ea4:	910a      	str	r1, [sp, #40]	; 0x28
   15ea6:	2847      	cmp	r0, #71	; 0x47
   15ea8:	bfd8      	it	le
   15eaa:	461e      	movle	r6, r3
   15eac:	920e      	str	r2, [sp, #56]	; 0x38
   15eae:	9112      	str	r1, [sp, #72]	; 0x48
   15eb0:	e51e      	b.n	158f0 <_svfprintf_r+0x230>
   15eb2:	f04b 0b08 	orr.w	fp, fp, #8
   15eb6:	f89a 3000 	ldrb.w	r3, [sl]
   15eba:	e459      	b.n	15770 <_svfprintf_r+0xb0>
   15ebc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   15ec0:	2300      	movs	r3, #0
   15ec2:	461c      	mov	r4, r3
   15ec4:	f81a 3b01 	ldrb.w	r3, [sl], #1
   15ec8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   15ecc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   15ed0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   15ed4:	2809      	cmp	r0, #9
   15ed6:	d9f5      	bls.n	15ec4 <_svfprintf_r+0x804>
   15ed8:	940d      	str	r4, [sp, #52]	; 0x34
   15eda:	e44b      	b.n	15774 <_svfprintf_r+0xb4>
   15edc:	f04b 0b10 	orr.w	fp, fp, #16
   15ee0:	9311      	str	r3, [sp, #68]	; 0x44
   15ee2:	f01b 0320 	ands.w	r3, fp, #32
   15ee6:	f43f ae1d 	beq.w	15b24 <_svfprintf_r+0x464>
   15eea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   15eec:	3507      	adds	r5, #7
   15eee:	f025 0307 	bic.w	r3, r5, #7
   15ef2:	f103 0208 	add.w	r2, r3, #8
   15ef6:	e9d3 4500 	ldrd	r4, r5, [r3]
   15efa:	920f      	str	r2, [sp, #60]	; 0x3c
   15efc:	2300      	movs	r3, #0
   15efe:	e4d2      	b.n	158a6 <_svfprintf_r+0x1e6>
   15f00:	9311      	str	r3, [sp, #68]	; 0x44
   15f02:	2a00      	cmp	r2, #0
   15f04:	f040 85e7 	bne.w	16ad6 <_svfprintf_r+0x1416>
   15f08:	9a11      	ldr	r2, [sp, #68]	; 0x44
   15f0a:	2a00      	cmp	r2, #0
   15f0c:	f43f aca3 	beq.w	15856 <_svfprintf_r+0x196>
   15f10:	2300      	movs	r3, #0
   15f12:	2101      	movs	r1, #1
   15f14:	461f      	mov	r7, r3
   15f16:	9108      	str	r1, [sp, #32]
   15f18:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   15f1c:	f8cd b01c 	str.w	fp, [sp, #28]
   15f20:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   15f24:	930a      	str	r3, [sp, #40]	; 0x28
   15f26:	9312      	str	r3, [sp, #72]	; 0x48
   15f28:	910e      	str	r1, [sp, #56]	; 0x38
   15f2a:	ae28      	add	r6, sp, #160	; 0xa0
   15f2c:	e4e4      	b.n	158f8 <_svfprintf_r+0x238>
   15f2e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   15f30:	e534      	b.n	1599c <_svfprintf_r+0x2dc>
   15f32:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15f34:	2b65      	cmp	r3, #101	; 0x65
   15f36:	f340 80a7 	ble.w	16088 <_svfprintf_r+0x9c8>
   15f3a:	a815      	add	r0, sp, #84	; 0x54
   15f3c:	c80d      	ldmia	r0, {r0, r2, r3}
   15f3e:	9914      	ldr	r1, [sp, #80]	; 0x50
   15f40:	f7fb ffb6 	bl	11eb0 <__aeabi_dcmpeq>
   15f44:	2800      	cmp	r0, #0
   15f46:	f000 8150 	beq.w	161ea <_svfprintf_r+0xb2a>
   15f4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   15f4c:	4a20      	ldr	r2, [pc, #128]	; (15fd0 <_svfprintf_r+0x910>)
   15f4e:	f8c8 2000 	str.w	r2, [r8]
   15f52:	3301      	adds	r3, #1
   15f54:	3401      	adds	r4, #1
   15f56:	2201      	movs	r2, #1
   15f58:	2b07      	cmp	r3, #7
   15f5a:	9427      	str	r4, [sp, #156]	; 0x9c
   15f5c:	9326      	str	r3, [sp, #152]	; 0x98
   15f5e:	f8c8 2004 	str.w	r2, [r8, #4]
   15f62:	f300 836a 	bgt.w	1663a <_svfprintf_r+0xf7a>
   15f66:	f108 0808 	add.w	r8, r8, #8
   15f6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15f6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15f6e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   15f70:	4293      	cmp	r3, r2
   15f72:	db03      	blt.n	15f7c <_svfprintf_r+0x8bc>
   15f74:	9b07      	ldr	r3, [sp, #28]
   15f76:	07dd      	lsls	r5, r3, #31
   15f78:	f57f ad82 	bpl.w	15a80 <_svfprintf_r+0x3c0>
   15f7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   15f7e:	9919      	ldr	r1, [sp, #100]	; 0x64
   15f80:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   15f82:	f8c8 2000 	str.w	r2, [r8]
   15f86:	3301      	adds	r3, #1
   15f88:	440c      	add	r4, r1
   15f8a:	2b07      	cmp	r3, #7
   15f8c:	f8c8 1004 	str.w	r1, [r8, #4]
   15f90:	9427      	str	r4, [sp, #156]	; 0x9c
   15f92:	9326      	str	r3, [sp, #152]	; 0x98
   15f94:	f300 839e 	bgt.w	166d4 <_svfprintf_r+0x1014>
   15f98:	f108 0808 	add.w	r8, r8, #8
   15f9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   15f9e:	1e5e      	subs	r6, r3, #1
   15fa0:	2e00      	cmp	r6, #0
   15fa2:	f77f ad6d 	ble.w	15a80 <_svfprintf_r+0x3c0>
   15fa6:	2e10      	cmp	r6, #16
   15fa8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   15faa:	4d0a      	ldr	r5, [pc, #40]	; (15fd4 <_svfprintf_r+0x914>)
   15fac:	f340 81f5 	ble.w	1639a <_svfprintf_r+0xcda>
   15fb0:	4622      	mov	r2, r4
   15fb2:	2710      	movs	r7, #16
   15fb4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   15fb8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   15fba:	e013      	b.n	15fe4 <_svfprintf_r+0x924>
   15fbc:	00023cac 	.word	0x00023cac
   15fc0:	00023c98 	.word	0x00023c98
   15fc4:	7fefffff 	.word	0x7fefffff
   15fc8:	00023c8c 	.word	0x00023c8c
   15fcc:	00023c88 	.word	0x00023c88
   15fd0:	00020d98 	.word	0x00020d98
   15fd4:	00023cd8 	.word	0x00023cd8
   15fd8:	f108 0808 	add.w	r8, r8, #8
   15fdc:	3e10      	subs	r6, #16
   15fde:	2e10      	cmp	r6, #16
   15fe0:	f340 81da 	ble.w	16398 <_svfprintf_r+0xcd8>
   15fe4:	3301      	adds	r3, #1
   15fe6:	3210      	adds	r2, #16
   15fe8:	2b07      	cmp	r3, #7
   15fea:	9227      	str	r2, [sp, #156]	; 0x9c
   15fec:	9326      	str	r3, [sp, #152]	; 0x98
   15fee:	e888 00a0 	stmia.w	r8, {r5, r7}
   15ff2:	ddf1      	ble.n	15fd8 <_svfprintf_r+0x918>
   15ff4:	aa25      	add	r2, sp, #148	; 0x94
   15ff6:	4621      	mov	r1, r4
   15ff8:	4658      	mov	r0, fp
   15ffa:	f004 ff13 	bl	1ae24 <__ssprint_r>
   15ffe:	2800      	cmp	r0, #0
   16000:	f47f ac30 	bne.w	15864 <_svfprintf_r+0x1a4>
   16004:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   16006:	9b26      	ldr	r3, [sp, #152]	; 0x98
   16008:	46c8      	mov	r8, r9
   1600a:	e7e7      	b.n	15fdc <_svfprintf_r+0x91c>
   1600c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1600e:	9a08      	ldr	r2, [sp, #32]
   16010:	1a9f      	subs	r7, r3, r2
   16012:	2f00      	cmp	r7, #0
   16014:	f77f ace5 	ble.w	159e2 <_svfprintf_r+0x322>
   16018:	2f10      	cmp	r7, #16
   1601a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1601c:	4db6      	ldr	r5, [pc, #728]	; (162f8 <_svfprintf_r+0xc38>)
   1601e:	dd27      	ble.n	16070 <_svfprintf_r+0x9b0>
   16020:	4642      	mov	r2, r8
   16022:	4621      	mov	r1, r4
   16024:	46b0      	mov	r8, r6
   16026:	f04f 0b10 	mov.w	fp, #16
   1602a:	462e      	mov	r6, r5
   1602c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1602e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   16030:	e004      	b.n	1603c <_svfprintf_r+0x97c>
   16032:	3f10      	subs	r7, #16
   16034:	2f10      	cmp	r7, #16
   16036:	f102 0208 	add.w	r2, r2, #8
   1603a:	dd15      	ble.n	16068 <_svfprintf_r+0x9a8>
   1603c:	3301      	adds	r3, #1
   1603e:	3110      	adds	r1, #16
   16040:	2b07      	cmp	r3, #7
   16042:	9127      	str	r1, [sp, #156]	; 0x9c
   16044:	9326      	str	r3, [sp, #152]	; 0x98
   16046:	e882 0840 	stmia.w	r2, {r6, fp}
   1604a:	ddf2      	ble.n	16032 <_svfprintf_r+0x972>
   1604c:	aa25      	add	r2, sp, #148	; 0x94
   1604e:	4629      	mov	r1, r5
   16050:	4620      	mov	r0, r4
   16052:	f004 fee7 	bl	1ae24 <__ssprint_r>
   16056:	2800      	cmp	r0, #0
   16058:	f47f ac04 	bne.w	15864 <_svfprintf_r+0x1a4>
   1605c:	3f10      	subs	r7, #16
   1605e:	2f10      	cmp	r7, #16
   16060:	9927      	ldr	r1, [sp, #156]	; 0x9c
   16062:	9b26      	ldr	r3, [sp, #152]	; 0x98
   16064:	464a      	mov	r2, r9
   16066:	dce9      	bgt.n	1603c <_svfprintf_r+0x97c>
   16068:	4635      	mov	r5, r6
   1606a:	460c      	mov	r4, r1
   1606c:	4646      	mov	r6, r8
   1606e:	4690      	mov	r8, r2
   16070:	3301      	adds	r3, #1
   16072:	443c      	add	r4, r7
   16074:	2b07      	cmp	r3, #7
   16076:	9427      	str	r4, [sp, #156]	; 0x9c
   16078:	9326      	str	r3, [sp, #152]	; 0x98
   1607a:	e888 00a0 	stmia.w	r8, {r5, r7}
   1607e:	f300 8232 	bgt.w	164e6 <_svfprintf_r+0xe26>
   16082:	f108 0808 	add.w	r8, r8, #8
   16086:	e4ac      	b.n	159e2 <_svfprintf_r+0x322>
   16088:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1608a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   1608c:	2b01      	cmp	r3, #1
   1608e:	f340 81fe 	ble.w	1648e <_svfprintf_r+0xdce>
   16092:	3701      	adds	r7, #1
   16094:	3401      	adds	r4, #1
   16096:	2301      	movs	r3, #1
   16098:	2f07      	cmp	r7, #7
   1609a:	9427      	str	r4, [sp, #156]	; 0x9c
   1609c:	9726      	str	r7, [sp, #152]	; 0x98
   1609e:	f8c8 6000 	str.w	r6, [r8]
   160a2:	f8c8 3004 	str.w	r3, [r8, #4]
   160a6:	f300 8203 	bgt.w	164b0 <_svfprintf_r+0xdf0>
   160aa:	f108 0808 	add.w	r8, r8, #8
   160ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
   160b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   160b2:	f8c8 3000 	str.w	r3, [r8]
   160b6:	3701      	adds	r7, #1
   160b8:	4414      	add	r4, r2
   160ba:	2f07      	cmp	r7, #7
   160bc:	9427      	str	r4, [sp, #156]	; 0x9c
   160be:	9726      	str	r7, [sp, #152]	; 0x98
   160c0:	f8c8 2004 	str.w	r2, [r8, #4]
   160c4:	f300 8200 	bgt.w	164c8 <_svfprintf_r+0xe08>
   160c8:	f108 0808 	add.w	r8, r8, #8
   160cc:	a815      	add	r0, sp, #84	; 0x54
   160ce:	c80d      	ldmia	r0, {r0, r2, r3}
   160d0:	9914      	ldr	r1, [sp, #80]	; 0x50
   160d2:	f7fb feed 	bl	11eb0 <__aeabi_dcmpeq>
   160d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   160d8:	2800      	cmp	r0, #0
   160da:	f040 8101 	bne.w	162e0 <_svfprintf_r+0xc20>
   160de:	3b01      	subs	r3, #1
   160e0:	3701      	adds	r7, #1
   160e2:	3601      	adds	r6, #1
   160e4:	441c      	add	r4, r3
   160e6:	2f07      	cmp	r7, #7
   160e8:	9726      	str	r7, [sp, #152]	; 0x98
   160ea:	9427      	str	r4, [sp, #156]	; 0x9c
   160ec:	f8c8 6000 	str.w	r6, [r8]
   160f0:	f8c8 3004 	str.w	r3, [r8, #4]
   160f4:	f300 8127 	bgt.w	16346 <_svfprintf_r+0xc86>
   160f8:	f108 0808 	add.w	r8, r8, #8
   160fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   160fe:	f8c8 2004 	str.w	r2, [r8, #4]
   16102:	3701      	adds	r7, #1
   16104:	4414      	add	r4, r2
   16106:	ab21      	add	r3, sp, #132	; 0x84
   16108:	2f07      	cmp	r7, #7
   1610a:	9427      	str	r4, [sp, #156]	; 0x9c
   1610c:	9726      	str	r7, [sp, #152]	; 0x98
   1610e:	f8c8 3000 	str.w	r3, [r8]
   16112:	f77f acb3 	ble.w	15a7c <_svfprintf_r+0x3bc>
   16116:	aa25      	add	r2, sp, #148	; 0x94
   16118:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1611a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1611c:	f004 fe82 	bl	1ae24 <__ssprint_r>
   16120:	2800      	cmp	r0, #0
   16122:	f47f ab9f 	bne.w	15864 <_svfprintf_r+0x1a4>
   16126:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   16128:	46c8      	mov	r8, r9
   1612a:	e4a9      	b.n	15a80 <_svfprintf_r+0x3c0>
   1612c:	aa25      	add	r2, sp, #148	; 0x94
   1612e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16130:	980c      	ldr	r0, [sp, #48]	; 0x30
   16132:	f004 fe77 	bl	1ae24 <__ssprint_r>
   16136:	2800      	cmp	r0, #0
   16138:	f43f aceb 	beq.w	15b12 <_svfprintf_r+0x452>
   1613c:	f7ff bb92 	b.w	15864 <_svfprintf_r+0x1a4>
   16140:	f8dd b01c 	ldr.w	fp, [sp, #28]
   16144:	2b01      	cmp	r3, #1
   16146:	f000 8134 	beq.w	163b2 <_svfprintf_r+0xcf2>
   1614a:	2b02      	cmp	r3, #2
   1614c:	d125      	bne.n	1619a <_svfprintf_r+0xada>
   1614e:	f8cd b01c 	str.w	fp, [sp, #28]
   16152:	2400      	movs	r4, #0
   16154:	2500      	movs	r5, #0
   16156:	e61e      	b.n	15d96 <_svfprintf_r+0x6d6>
   16158:	aa25      	add	r2, sp, #148	; 0x94
   1615a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1615c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1615e:	f004 fe61 	bl	1ae24 <__ssprint_r>
   16162:	2800      	cmp	r0, #0
   16164:	f47f ab7e 	bne.w	15864 <_svfprintf_r+0x1a4>
   16168:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   1616a:	46c8      	mov	r8, r9
   1616c:	e475      	b.n	15a5a <_svfprintf_r+0x39a>
   1616e:	aa25      	add	r2, sp, #148	; 0x94
   16170:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16172:	980c      	ldr	r0, [sp, #48]	; 0x30
   16174:	f004 fe56 	bl	1ae24 <__ssprint_r>
   16178:	2800      	cmp	r0, #0
   1617a:	f47f ab73 	bne.w	15864 <_svfprintf_r+0x1a4>
   1617e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   16180:	46c8      	mov	r8, r9
   16182:	e41b      	b.n	159bc <_svfprintf_r+0x2fc>
   16184:	aa25      	add	r2, sp, #148	; 0x94
   16186:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16188:	980c      	ldr	r0, [sp, #48]	; 0x30
   1618a:	f004 fe4b 	bl	1ae24 <__ssprint_r>
   1618e:	2800      	cmp	r0, #0
   16190:	f47f ab68 	bne.w	15864 <_svfprintf_r+0x1a4>
   16194:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   16196:	46c8      	mov	r8, r9
   16198:	e420      	b.n	159dc <_svfprintf_r+0x31c>
   1619a:	f8cd b01c 	str.w	fp, [sp, #28]
   1619e:	2400      	movs	r4, #0
   161a0:	2500      	movs	r5, #0
   161a2:	4649      	mov	r1, r9
   161a4:	e000      	b.n	161a8 <_svfprintf_r+0xae8>
   161a6:	4631      	mov	r1, r6
   161a8:	08e2      	lsrs	r2, r4, #3
   161aa:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   161ae:	08e8      	lsrs	r0, r5, #3
   161b0:	f004 0307 	and.w	r3, r4, #7
   161b4:	4605      	mov	r5, r0
   161b6:	4614      	mov	r4, r2
   161b8:	3330      	adds	r3, #48	; 0x30
   161ba:	ea54 0205 	orrs.w	r2, r4, r5
   161be:	f801 3c01 	strb.w	r3, [r1, #-1]
   161c2:	f101 36ff 	add.w	r6, r1, #4294967295
   161c6:	d1ee      	bne.n	161a6 <_svfprintf_r+0xae6>
   161c8:	9a07      	ldr	r2, [sp, #28]
   161ca:	07d2      	lsls	r2, r2, #31
   161cc:	f57f adf3 	bpl.w	15db6 <_svfprintf_r+0x6f6>
   161d0:	2b30      	cmp	r3, #48	; 0x30
   161d2:	f43f adf0 	beq.w	15db6 <_svfprintf_r+0x6f6>
   161d6:	3902      	subs	r1, #2
   161d8:	2330      	movs	r3, #48	; 0x30
   161da:	f806 3c01 	strb.w	r3, [r6, #-1]
   161de:	eba9 0301 	sub.w	r3, r9, r1
   161e2:	930e      	str	r3, [sp, #56]	; 0x38
   161e4:	460e      	mov	r6, r1
   161e6:	f7ff bb7b 	b.w	158e0 <_svfprintf_r+0x220>
   161ea:	991f      	ldr	r1, [sp, #124]	; 0x7c
   161ec:	2900      	cmp	r1, #0
   161ee:	f340 822e 	ble.w	1664e <_svfprintf_r+0xf8e>
   161f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   161f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   161f6:	4293      	cmp	r3, r2
   161f8:	bfa8      	it	ge
   161fa:	4613      	movge	r3, r2
   161fc:	2b00      	cmp	r3, #0
   161fe:	461f      	mov	r7, r3
   16200:	dd0d      	ble.n	1621e <_svfprintf_r+0xb5e>
   16202:	9b26      	ldr	r3, [sp, #152]	; 0x98
   16204:	f8c8 6000 	str.w	r6, [r8]
   16208:	3301      	adds	r3, #1
   1620a:	443c      	add	r4, r7
   1620c:	2b07      	cmp	r3, #7
   1620e:	9427      	str	r4, [sp, #156]	; 0x9c
   16210:	f8c8 7004 	str.w	r7, [r8, #4]
   16214:	9326      	str	r3, [sp, #152]	; 0x98
   16216:	f300 831f 	bgt.w	16858 <_svfprintf_r+0x1198>
   1621a:	f108 0808 	add.w	r8, r8, #8
   1621e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16220:	2f00      	cmp	r7, #0
   16222:	bfa8      	it	ge
   16224:	1bdb      	subge	r3, r3, r7
   16226:	2b00      	cmp	r3, #0
   16228:	461f      	mov	r7, r3
   1622a:	f340 80d6 	ble.w	163da <_svfprintf_r+0xd1a>
   1622e:	2f10      	cmp	r7, #16
   16230:	9b26      	ldr	r3, [sp, #152]	; 0x98
   16232:	4d31      	ldr	r5, [pc, #196]	; (162f8 <_svfprintf_r+0xc38>)
   16234:	f340 81ed 	ble.w	16612 <_svfprintf_r+0xf52>
   16238:	4642      	mov	r2, r8
   1623a:	4621      	mov	r1, r4
   1623c:	46b0      	mov	r8, r6
   1623e:	f04f 0b10 	mov.w	fp, #16
   16242:	462e      	mov	r6, r5
   16244:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   16246:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   16248:	e004      	b.n	16254 <_svfprintf_r+0xb94>
   1624a:	3208      	adds	r2, #8
   1624c:	3f10      	subs	r7, #16
   1624e:	2f10      	cmp	r7, #16
   16250:	f340 81db 	ble.w	1660a <_svfprintf_r+0xf4a>
   16254:	3301      	adds	r3, #1
   16256:	3110      	adds	r1, #16
   16258:	2b07      	cmp	r3, #7
   1625a:	9127      	str	r1, [sp, #156]	; 0x9c
   1625c:	9326      	str	r3, [sp, #152]	; 0x98
   1625e:	e882 0840 	stmia.w	r2, {r6, fp}
   16262:	ddf2      	ble.n	1624a <_svfprintf_r+0xb8a>
   16264:	aa25      	add	r2, sp, #148	; 0x94
   16266:	4629      	mov	r1, r5
   16268:	4620      	mov	r0, r4
   1626a:	f004 fddb 	bl	1ae24 <__ssprint_r>
   1626e:	2800      	cmp	r0, #0
   16270:	f47f aaf8 	bne.w	15864 <_svfprintf_r+0x1a4>
   16274:	9927      	ldr	r1, [sp, #156]	; 0x9c
   16276:	9b26      	ldr	r3, [sp, #152]	; 0x98
   16278:	464a      	mov	r2, r9
   1627a:	e7e7      	b.n	1624c <_svfprintf_r+0xb8c>
   1627c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1627e:	930e      	str	r3, [sp, #56]	; 0x38
   16280:	464e      	mov	r6, r9
   16282:	f7ff bb2d 	b.w	158e0 <_svfprintf_r+0x220>
   16286:	2d00      	cmp	r5, #0
   16288:	bf08      	it	eq
   1628a:	2c0a      	cmpeq	r4, #10
   1628c:	f0c0 808f 	bcc.w	163ae <_svfprintf_r+0xcee>
   16290:	464e      	mov	r6, r9
   16292:	4620      	mov	r0, r4
   16294:	4629      	mov	r1, r5
   16296:	220a      	movs	r2, #10
   16298:	2300      	movs	r3, #0
   1629a:	f7fc f9cd 	bl	12638 <__aeabi_uldivmod>
   1629e:	3230      	adds	r2, #48	; 0x30
   162a0:	f806 2d01 	strb.w	r2, [r6, #-1]!
   162a4:	4620      	mov	r0, r4
   162a6:	4629      	mov	r1, r5
   162a8:	2300      	movs	r3, #0
   162aa:	220a      	movs	r2, #10
   162ac:	f7fc f9c4 	bl	12638 <__aeabi_uldivmod>
   162b0:	4604      	mov	r4, r0
   162b2:	460d      	mov	r5, r1
   162b4:	ea54 0305 	orrs.w	r3, r4, r5
   162b8:	d1eb      	bne.n	16292 <_svfprintf_r+0xbd2>
   162ba:	eba9 0306 	sub.w	r3, r9, r6
   162be:	930e      	str	r3, [sp, #56]	; 0x38
   162c0:	f7ff bb0e 	b.w	158e0 <_svfprintf_r+0x220>
   162c4:	aa25      	add	r2, sp, #148	; 0x94
   162c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   162c8:	980c      	ldr	r0, [sp, #48]	; 0x30
   162ca:	f004 fdab 	bl	1ae24 <__ssprint_r>
   162ce:	2800      	cmp	r0, #0
   162d0:	f47f aac8 	bne.w	15864 <_svfprintf_r+0x1a4>
   162d4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   162d8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   162da:	46c8      	mov	r8, r9
   162dc:	f7ff bb5e 	b.w	1599c <_svfprintf_r+0x2dc>
   162e0:	1e5e      	subs	r6, r3, #1
   162e2:	2e00      	cmp	r6, #0
   162e4:	f77f af0a 	ble.w	160fc <_svfprintf_r+0xa3c>
   162e8:	2e10      	cmp	r6, #16
   162ea:	4d03      	ldr	r5, [pc, #12]	; (162f8 <_svfprintf_r+0xc38>)
   162ec:	dd22      	ble.n	16334 <_svfprintf_r+0xc74>
   162ee:	4622      	mov	r2, r4
   162f0:	f04f 0b10 	mov.w	fp, #16
   162f4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   162f6:	e006      	b.n	16306 <_svfprintf_r+0xc46>
   162f8:	00023cd8 	.word	0x00023cd8
   162fc:	3e10      	subs	r6, #16
   162fe:	2e10      	cmp	r6, #16
   16300:	f108 0808 	add.w	r8, r8, #8
   16304:	dd15      	ble.n	16332 <_svfprintf_r+0xc72>
   16306:	3701      	adds	r7, #1
   16308:	3210      	adds	r2, #16
   1630a:	2f07      	cmp	r7, #7
   1630c:	9227      	str	r2, [sp, #156]	; 0x9c
   1630e:	9726      	str	r7, [sp, #152]	; 0x98
   16310:	e888 0820 	stmia.w	r8, {r5, fp}
   16314:	ddf2      	ble.n	162fc <_svfprintf_r+0xc3c>
   16316:	aa25      	add	r2, sp, #148	; 0x94
   16318:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1631a:	4620      	mov	r0, r4
   1631c:	f004 fd82 	bl	1ae24 <__ssprint_r>
   16320:	2800      	cmp	r0, #0
   16322:	f47f aa9f 	bne.w	15864 <_svfprintf_r+0x1a4>
   16326:	3e10      	subs	r6, #16
   16328:	2e10      	cmp	r6, #16
   1632a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   1632c:	9f26      	ldr	r7, [sp, #152]	; 0x98
   1632e:	46c8      	mov	r8, r9
   16330:	dce9      	bgt.n	16306 <_svfprintf_r+0xc46>
   16332:	4614      	mov	r4, r2
   16334:	3701      	adds	r7, #1
   16336:	4434      	add	r4, r6
   16338:	2f07      	cmp	r7, #7
   1633a:	9427      	str	r4, [sp, #156]	; 0x9c
   1633c:	9726      	str	r7, [sp, #152]	; 0x98
   1633e:	e888 0060 	stmia.w	r8, {r5, r6}
   16342:	f77f aed9 	ble.w	160f8 <_svfprintf_r+0xa38>
   16346:	aa25      	add	r2, sp, #148	; 0x94
   16348:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1634a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1634c:	f004 fd6a 	bl	1ae24 <__ssprint_r>
   16350:	2800      	cmp	r0, #0
   16352:	f47f aa87 	bne.w	15864 <_svfprintf_r+0x1a4>
   16356:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   16358:	9f26      	ldr	r7, [sp, #152]	; 0x98
   1635a:	46c8      	mov	r8, r9
   1635c:	e6ce      	b.n	160fc <_svfprintf_r+0xa3c>
   1635e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   16360:	6814      	ldr	r4, [r2, #0]
   16362:	4613      	mov	r3, r2
   16364:	3304      	adds	r3, #4
   16366:	17e5      	asrs	r5, r4, #31
   16368:	930f      	str	r3, [sp, #60]	; 0x3c
   1636a:	4622      	mov	r2, r4
   1636c:	462b      	mov	r3, r5
   1636e:	e4fa      	b.n	15d66 <_svfprintf_r+0x6a6>
   16370:	3204      	adds	r2, #4
   16372:	681c      	ldr	r4, [r3, #0]
   16374:	920f      	str	r2, [sp, #60]	; 0x3c
   16376:	2301      	movs	r3, #1
   16378:	2500      	movs	r5, #0
   1637a:	f7ff ba94 	b.w	158a6 <_svfprintf_r+0x1e6>
   1637e:	681c      	ldr	r4, [r3, #0]
   16380:	3304      	adds	r3, #4
   16382:	930f      	str	r3, [sp, #60]	; 0x3c
   16384:	2500      	movs	r5, #0
   16386:	e421      	b.n	15bcc <_svfprintf_r+0x50c>
   16388:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1638a:	460a      	mov	r2, r1
   1638c:	3204      	adds	r2, #4
   1638e:	680c      	ldr	r4, [r1, #0]
   16390:	920f      	str	r2, [sp, #60]	; 0x3c
   16392:	2500      	movs	r5, #0
   16394:	f7ff ba87 	b.w	158a6 <_svfprintf_r+0x1e6>
   16398:	4614      	mov	r4, r2
   1639a:	3301      	adds	r3, #1
   1639c:	4434      	add	r4, r6
   1639e:	2b07      	cmp	r3, #7
   163a0:	9427      	str	r4, [sp, #156]	; 0x9c
   163a2:	9326      	str	r3, [sp, #152]	; 0x98
   163a4:	e888 0060 	stmia.w	r8, {r5, r6}
   163a8:	f77f ab68 	ble.w	15a7c <_svfprintf_r+0x3bc>
   163ac:	e6b3      	b.n	16116 <_svfprintf_r+0xa56>
   163ae:	f8dd b01c 	ldr.w	fp, [sp, #28]
   163b2:	f8cd b01c 	str.w	fp, [sp, #28]
   163b6:	ae42      	add	r6, sp, #264	; 0x108
   163b8:	3430      	adds	r4, #48	; 0x30
   163ba:	2301      	movs	r3, #1
   163bc:	f806 4d41 	strb.w	r4, [r6, #-65]!
   163c0:	930e      	str	r3, [sp, #56]	; 0x38
   163c2:	f7ff ba8d 	b.w	158e0 <_svfprintf_r+0x220>
   163c6:	aa25      	add	r2, sp, #148	; 0x94
   163c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   163ca:	980c      	ldr	r0, [sp, #48]	; 0x30
   163cc:	f004 fd2a 	bl	1ae24 <__ssprint_r>
   163d0:	2800      	cmp	r0, #0
   163d2:	f47f aa47 	bne.w	15864 <_svfprintf_r+0x1a4>
   163d6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   163d8:	46c8      	mov	r8, r9
   163da:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   163dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   163de:	429a      	cmp	r2, r3
   163e0:	db44      	blt.n	1646c <_svfprintf_r+0xdac>
   163e2:	9b07      	ldr	r3, [sp, #28]
   163e4:	07d9      	lsls	r1, r3, #31
   163e6:	d441      	bmi.n	1646c <_svfprintf_r+0xdac>
   163e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   163ea:	9812      	ldr	r0, [sp, #72]	; 0x48
   163ec:	1a9a      	subs	r2, r3, r2
   163ee:	1a1d      	subs	r5, r3, r0
   163f0:	4295      	cmp	r5, r2
   163f2:	bfa8      	it	ge
   163f4:	4615      	movge	r5, r2
   163f6:	2d00      	cmp	r5, #0
   163f8:	dd0e      	ble.n	16418 <_svfprintf_r+0xd58>
   163fa:	9926      	ldr	r1, [sp, #152]	; 0x98
   163fc:	f8c8 5004 	str.w	r5, [r8, #4]
   16400:	3101      	adds	r1, #1
   16402:	4406      	add	r6, r0
   16404:	442c      	add	r4, r5
   16406:	2907      	cmp	r1, #7
   16408:	f8c8 6000 	str.w	r6, [r8]
   1640c:	9427      	str	r4, [sp, #156]	; 0x9c
   1640e:	9126      	str	r1, [sp, #152]	; 0x98
   16410:	f300 823b 	bgt.w	1688a <_svfprintf_r+0x11ca>
   16414:	f108 0808 	add.w	r8, r8, #8
   16418:	2d00      	cmp	r5, #0
   1641a:	bfac      	ite	ge
   1641c:	1b56      	subge	r6, r2, r5
   1641e:	4616      	movlt	r6, r2
   16420:	2e00      	cmp	r6, #0
   16422:	f77f ab2d 	ble.w	15a80 <_svfprintf_r+0x3c0>
   16426:	2e10      	cmp	r6, #16
   16428:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1642a:	4db0      	ldr	r5, [pc, #704]	; (166ec <_svfprintf_r+0x102c>)
   1642c:	ddb5      	ble.n	1639a <_svfprintf_r+0xcda>
   1642e:	4622      	mov	r2, r4
   16430:	2710      	movs	r7, #16
   16432:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   16436:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   16438:	e004      	b.n	16444 <_svfprintf_r+0xd84>
   1643a:	f108 0808 	add.w	r8, r8, #8
   1643e:	3e10      	subs	r6, #16
   16440:	2e10      	cmp	r6, #16
   16442:	dda9      	ble.n	16398 <_svfprintf_r+0xcd8>
   16444:	3301      	adds	r3, #1
   16446:	3210      	adds	r2, #16
   16448:	2b07      	cmp	r3, #7
   1644a:	9227      	str	r2, [sp, #156]	; 0x9c
   1644c:	9326      	str	r3, [sp, #152]	; 0x98
   1644e:	e888 00a0 	stmia.w	r8, {r5, r7}
   16452:	ddf2      	ble.n	1643a <_svfprintf_r+0xd7a>
   16454:	aa25      	add	r2, sp, #148	; 0x94
   16456:	4621      	mov	r1, r4
   16458:	4658      	mov	r0, fp
   1645a:	f004 fce3 	bl	1ae24 <__ssprint_r>
   1645e:	2800      	cmp	r0, #0
   16460:	f47f aa00 	bne.w	15864 <_svfprintf_r+0x1a4>
   16464:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   16466:	9b26      	ldr	r3, [sp, #152]	; 0x98
   16468:	46c8      	mov	r8, r9
   1646a:	e7e8      	b.n	1643e <_svfprintf_r+0xd7e>
   1646c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1646e:	9819      	ldr	r0, [sp, #100]	; 0x64
   16470:	991a      	ldr	r1, [sp, #104]	; 0x68
   16472:	f8c8 1000 	str.w	r1, [r8]
   16476:	3301      	adds	r3, #1
   16478:	4404      	add	r4, r0
   1647a:	2b07      	cmp	r3, #7
   1647c:	9427      	str	r4, [sp, #156]	; 0x9c
   1647e:	f8c8 0004 	str.w	r0, [r8, #4]
   16482:	9326      	str	r3, [sp, #152]	; 0x98
   16484:	f300 81f5 	bgt.w	16872 <_svfprintf_r+0x11b2>
   16488:	f108 0808 	add.w	r8, r8, #8
   1648c:	e7ac      	b.n	163e8 <_svfprintf_r+0xd28>
   1648e:	9b07      	ldr	r3, [sp, #28]
   16490:	07da      	lsls	r2, r3, #31
   16492:	f53f adfe 	bmi.w	16092 <_svfprintf_r+0x9d2>
   16496:	3701      	adds	r7, #1
   16498:	3401      	adds	r4, #1
   1649a:	2301      	movs	r3, #1
   1649c:	2f07      	cmp	r7, #7
   1649e:	9427      	str	r4, [sp, #156]	; 0x9c
   164a0:	9726      	str	r7, [sp, #152]	; 0x98
   164a2:	f8c8 6000 	str.w	r6, [r8]
   164a6:	f8c8 3004 	str.w	r3, [r8, #4]
   164aa:	f77f ae25 	ble.w	160f8 <_svfprintf_r+0xa38>
   164ae:	e74a      	b.n	16346 <_svfprintf_r+0xc86>
   164b0:	aa25      	add	r2, sp, #148	; 0x94
   164b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   164b4:	980c      	ldr	r0, [sp, #48]	; 0x30
   164b6:	f004 fcb5 	bl	1ae24 <__ssprint_r>
   164ba:	2800      	cmp	r0, #0
   164bc:	f47f a9d2 	bne.w	15864 <_svfprintf_r+0x1a4>
   164c0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   164c2:	9f26      	ldr	r7, [sp, #152]	; 0x98
   164c4:	46c8      	mov	r8, r9
   164c6:	e5f2      	b.n	160ae <_svfprintf_r+0x9ee>
   164c8:	aa25      	add	r2, sp, #148	; 0x94
   164ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
   164cc:	980c      	ldr	r0, [sp, #48]	; 0x30
   164ce:	f004 fca9 	bl	1ae24 <__ssprint_r>
   164d2:	2800      	cmp	r0, #0
   164d4:	f47f a9c6 	bne.w	15864 <_svfprintf_r+0x1a4>
   164d8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   164da:	9f26      	ldr	r7, [sp, #152]	; 0x98
   164dc:	46c8      	mov	r8, r9
   164de:	e5f5      	b.n	160cc <_svfprintf_r+0xa0c>
   164e0:	464e      	mov	r6, r9
   164e2:	f7ff b9fd 	b.w	158e0 <_svfprintf_r+0x220>
   164e6:	aa25      	add	r2, sp, #148	; 0x94
   164e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   164ea:	980c      	ldr	r0, [sp, #48]	; 0x30
   164ec:	f004 fc9a 	bl	1ae24 <__ssprint_r>
   164f0:	2800      	cmp	r0, #0
   164f2:	f47f a9b7 	bne.w	15864 <_svfprintf_r+0x1a4>
   164f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   164f8:	46c8      	mov	r8, r9
   164fa:	f7ff ba72 	b.w	159e2 <_svfprintf_r+0x322>
   164fe:	9c15      	ldr	r4, [sp, #84]	; 0x54
   16500:	4622      	mov	r2, r4
   16502:	4620      	mov	r0, r4
   16504:	9c14      	ldr	r4, [sp, #80]	; 0x50
   16506:	4623      	mov	r3, r4
   16508:	4621      	mov	r1, r4
   1650a:	f004 fd9b 	bl	1b044 <__aeabi_dcmpun>
   1650e:	2800      	cmp	r0, #0
   16510:	f040 8286 	bne.w	16a20 <_svfprintf_r+0x1360>
   16514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16516:	3301      	adds	r3, #1
   16518:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1651a:	f023 0320 	bic.w	r3, r3, #32
   1651e:	930e      	str	r3, [sp, #56]	; 0x38
   16520:	f000 81e2 	beq.w	168e8 <_svfprintf_r+0x1228>
   16524:	2b47      	cmp	r3, #71	; 0x47
   16526:	f000 811e 	beq.w	16766 <_svfprintf_r+0x10a6>
   1652a:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   1652e:	9307      	str	r3, [sp, #28]
   16530:	9b14      	ldr	r3, [sp, #80]	; 0x50
   16532:	1e1f      	subs	r7, r3, #0
   16534:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16536:	9308      	str	r3, [sp, #32]
   16538:	bfbb      	ittet	lt
   1653a:	463b      	movlt	r3, r7
   1653c:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   16540:	2300      	movge	r3, #0
   16542:	232d      	movlt	r3, #45	; 0x2d
   16544:	9310      	str	r3, [sp, #64]	; 0x40
   16546:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16548:	2b66      	cmp	r3, #102	; 0x66
   1654a:	f000 81bb 	beq.w	168c4 <_svfprintf_r+0x1204>
   1654e:	2b46      	cmp	r3, #70	; 0x46
   16550:	f000 80df 	beq.w	16712 <_svfprintf_r+0x1052>
   16554:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16556:	9a08      	ldr	r2, [sp, #32]
   16558:	2b45      	cmp	r3, #69	; 0x45
   1655a:	bf0c      	ite	eq
   1655c:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   1655e:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   16560:	a823      	add	r0, sp, #140	; 0x8c
   16562:	a920      	add	r1, sp, #128	; 0x80
   16564:	bf08      	it	eq
   16566:	1c5d      	addeq	r5, r3, #1
   16568:	9004      	str	r0, [sp, #16]
   1656a:	9103      	str	r1, [sp, #12]
   1656c:	a81f      	add	r0, sp, #124	; 0x7c
   1656e:	2102      	movs	r1, #2
   16570:	463b      	mov	r3, r7
   16572:	9002      	str	r0, [sp, #8]
   16574:	9501      	str	r5, [sp, #4]
   16576:	9100      	str	r1, [sp, #0]
   16578:	980c      	ldr	r0, [sp, #48]	; 0x30
   1657a:	f002 feb5 	bl	192e8 <_dtoa_r>
   1657e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16580:	2b67      	cmp	r3, #103	; 0x67
   16582:	4606      	mov	r6, r0
   16584:	f040 81e0 	bne.w	16948 <_svfprintf_r+0x1288>
   16588:	f01b 0f01 	tst.w	fp, #1
   1658c:	f000 8246 	beq.w	16a1c <_svfprintf_r+0x135c>
   16590:	1974      	adds	r4, r6, r5
   16592:	9a16      	ldr	r2, [sp, #88]	; 0x58
   16594:	9808      	ldr	r0, [sp, #32]
   16596:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   16598:	4639      	mov	r1, r7
   1659a:	f7fb fc89 	bl	11eb0 <__aeabi_dcmpeq>
   1659e:	2800      	cmp	r0, #0
   165a0:	f040 8165 	bne.w	1686e <_svfprintf_r+0x11ae>
   165a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   165a6:	42a3      	cmp	r3, r4
   165a8:	d206      	bcs.n	165b8 <_svfprintf_r+0xef8>
   165aa:	2130      	movs	r1, #48	; 0x30
   165ac:	1c5a      	adds	r2, r3, #1
   165ae:	9223      	str	r2, [sp, #140]	; 0x8c
   165b0:	7019      	strb	r1, [r3, #0]
   165b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   165b4:	429c      	cmp	r4, r3
   165b6:	d8f9      	bhi.n	165ac <_svfprintf_r+0xeec>
   165b8:	1b9b      	subs	r3, r3, r6
   165ba:	9313      	str	r3, [sp, #76]	; 0x4c
   165bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   165be:	2b47      	cmp	r3, #71	; 0x47
   165c0:	f000 80e9 	beq.w	16796 <_svfprintf_r+0x10d6>
   165c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   165c6:	2b65      	cmp	r3, #101	; 0x65
   165c8:	f340 81cd 	ble.w	16966 <_svfprintf_r+0x12a6>
   165cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   165ce:	2b66      	cmp	r3, #102	; 0x66
   165d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   165d2:	9312      	str	r3, [sp, #72]	; 0x48
   165d4:	f000 819e 	beq.w	16914 <_svfprintf_r+0x1254>
   165d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   165da:	9a12      	ldr	r2, [sp, #72]	; 0x48
   165dc:	4619      	mov	r1, r3
   165de:	4291      	cmp	r1, r2
   165e0:	f300 818a 	bgt.w	168f8 <_svfprintf_r+0x1238>
   165e4:	f01b 0f01 	tst.w	fp, #1
   165e8:	f040 8213 	bne.w	16a12 <_svfprintf_r+0x1352>
   165ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   165f0:	9308      	str	r3, [sp, #32]
   165f2:	2367      	movs	r3, #103	; 0x67
   165f4:	920e      	str	r2, [sp, #56]	; 0x38
   165f6:	9311      	str	r3, [sp, #68]	; 0x44
   165f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   165fa:	2b00      	cmp	r3, #0
   165fc:	f040 80c4 	bne.w	16788 <_svfprintf_r+0x10c8>
   16600:	930a      	str	r3, [sp, #40]	; 0x28
   16602:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   16606:	f7ff b973 	b.w	158f0 <_svfprintf_r+0x230>
   1660a:	4635      	mov	r5, r6
   1660c:	460c      	mov	r4, r1
   1660e:	4646      	mov	r6, r8
   16610:	4690      	mov	r8, r2
   16612:	3301      	adds	r3, #1
   16614:	443c      	add	r4, r7
   16616:	2b07      	cmp	r3, #7
   16618:	9427      	str	r4, [sp, #156]	; 0x9c
   1661a:	9326      	str	r3, [sp, #152]	; 0x98
   1661c:	e888 00a0 	stmia.w	r8, {r5, r7}
   16620:	f73f aed1 	bgt.w	163c6 <_svfprintf_r+0xd06>
   16624:	f108 0808 	add.w	r8, r8, #8
   16628:	e6d7      	b.n	163da <_svfprintf_r+0xd1a>
   1662a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1662c:	6813      	ldr	r3, [r2, #0]
   1662e:	3204      	adds	r2, #4
   16630:	920f      	str	r2, [sp, #60]	; 0x3c
   16632:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16634:	601a      	str	r2, [r3, #0]
   16636:	f7ff b86a 	b.w	1570e <_svfprintf_r+0x4e>
   1663a:	aa25      	add	r2, sp, #148	; 0x94
   1663c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1663e:	980c      	ldr	r0, [sp, #48]	; 0x30
   16640:	f004 fbf0 	bl	1ae24 <__ssprint_r>
   16644:	2800      	cmp	r0, #0
   16646:	f47f a90d 	bne.w	15864 <_svfprintf_r+0x1a4>
   1664a:	46c8      	mov	r8, r9
   1664c:	e48d      	b.n	15f6a <_svfprintf_r+0x8aa>
   1664e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   16650:	4a27      	ldr	r2, [pc, #156]	; (166f0 <_svfprintf_r+0x1030>)
   16652:	f8c8 2000 	str.w	r2, [r8]
   16656:	3301      	adds	r3, #1
   16658:	3401      	adds	r4, #1
   1665a:	2201      	movs	r2, #1
   1665c:	2b07      	cmp	r3, #7
   1665e:	9427      	str	r4, [sp, #156]	; 0x9c
   16660:	9326      	str	r3, [sp, #152]	; 0x98
   16662:	f8c8 2004 	str.w	r2, [r8, #4]
   16666:	dc72      	bgt.n	1674e <_svfprintf_r+0x108e>
   16668:	f108 0808 	add.w	r8, r8, #8
   1666c:	b929      	cbnz	r1, 1667a <_svfprintf_r+0xfba>
   1666e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   16670:	b91b      	cbnz	r3, 1667a <_svfprintf_r+0xfba>
   16672:	9b07      	ldr	r3, [sp, #28]
   16674:	07d8      	lsls	r0, r3, #31
   16676:	f57f aa03 	bpl.w	15a80 <_svfprintf_r+0x3c0>
   1667a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1667c:	9819      	ldr	r0, [sp, #100]	; 0x64
   1667e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   16680:	f8c8 2000 	str.w	r2, [r8]
   16684:	3301      	adds	r3, #1
   16686:	4602      	mov	r2, r0
   16688:	4422      	add	r2, r4
   1668a:	2b07      	cmp	r3, #7
   1668c:	9227      	str	r2, [sp, #156]	; 0x9c
   1668e:	f8c8 0004 	str.w	r0, [r8, #4]
   16692:	9326      	str	r3, [sp, #152]	; 0x98
   16694:	f300 818d 	bgt.w	169b2 <_svfprintf_r+0x12f2>
   16698:	f108 0808 	add.w	r8, r8, #8
   1669c:	2900      	cmp	r1, #0
   1669e:	f2c0 8165 	blt.w	1696c <_svfprintf_r+0x12ac>
   166a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
   166a4:	f8c8 6000 	str.w	r6, [r8]
   166a8:	3301      	adds	r3, #1
   166aa:	188c      	adds	r4, r1, r2
   166ac:	2b07      	cmp	r3, #7
   166ae:	9427      	str	r4, [sp, #156]	; 0x9c
   166b0:	9326      	str	r3, [sp, #152]	; 0x98
   166b2:	f8c8 1004 	str.w	r1, [r8, #4]
   166b6:	f77f a9e1 	ble.w	15a7c <_svfprintf_r+0x3bc>
   166ba:	e52c      	b.n	16116 <_svfprintf_r+0xa56>
   166bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   166be:	9909      	ldr	r1, [sp, #36]	; 0x24
   166c0:	6813      	ldr	r3, [r2, #0]
   166c2:	17cd      	asrs	r5, r1, #31
   166c4:	4608      	mov	r0, r1
   166c6:	3204      	adds	r2, #4
   166c8:	4629      	mov	r1, r5
   166ca:	920f      	str	r2, [sp, #60]	; 0x3c
   166cc:	e9c3 0100 	strd	r0, r1, [r3]
   166d0:	f7ff b81d 	b.w	1570e <_svfprintf_r+0x4e>
   166d4:	aa25      	add	r2, sp, #148	; 0x94
   166d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   166d8:	980c      	ldr	r0, [sp, #48]	; 0x30
   166da:	f004 fba3 	bl	1ae24 <__ssprint_r>
   166de:	2800      	cmp	r0, #0
   166e0:	f47f a8c0 	bne.w	15864 <_svfprintf_r+0x1a4>
   166e4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   166e6:	46c8      	mov	r8, r9
   166e8:	e458      	b.n	15f9c <_svfprintf_r+0x8dc>
   166ea:	bf00      	nop
   166ec:	00023cd8 	.word	0x00023cd8
   166f0:	00020d98 	.word	0x00020d98
   166f4:	2140      	movs	r1, #64	; 0x40
   166f6:	980c      	ldr	r0, [sp, #48]	; 0x30
   166f8:	f7fd fc56 	bl	13fa8 <_malloc_r>
   166fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   166fe:	6010      	str	r0, [r2, #0]
   16700:	6110      	str	r0, [r2, #16]
   16702:	2800      	cmp	r0, #0
   16704:	f000 81f2 	beq.w	16aec <_svfprintf_r+0x142c>
   16708:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1670a:	2340      	movs	r3, #64	; 0x40
   1670c:	6153      	str	r3, [r2, #20]
   1670e:	f7fe bfee 	b.w	156ee <_svfprintf_r+0x2e>
   16712:	a823      	add	r0, sp, #140	; 0x8c
   16714:	a920      	add	r1, sp, #128	; 0x80
   16716:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   16718:	9004      	str	r0, [sp, #16]
   1671a:	9103      	str	r1, [sp, #12]
   1671c:	a81f      	add	r0, sp, #124	; 0x7c
   1671e:	2103      	movs	r1, #3
   16720:	9002      	str	r0, [sp, #8]
   16722:	9a08      	ldr	r2, [sp, #32]
   16724:	9401      	str	r4, [sp, #4]
   16726:	463b      	mov	r3, r7
   16728:	9100      	str	r1, [sp, #0]
   1672a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1672c:	f002 fddc 	bl	192e8 <_dtoa_r>
   16730:	4625      	mov	r5, r4
   16732:	4606      	mov	r6, r0
   16734:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16736:	2b46      	cmp	r3, #70	; 0x46
   16738:	eb06 0405 	add.w	r4, r6, r5
   1673c:	f47f af29 	bne.w	16592 <_svfprintf_r+0xed2>
   16740:	7833      	ldrb	r3, [r6, #0]
   16742:	2b30      	cmp	r3, #48	; 0x30
   16744:	f000 8178 	beq.w	16a38 <_svfprintf_r+0x1378>
   16748:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   1674a:	442c      	add	r4, r5
   1674c:	e721      	b.n	16592 <_svfprintf_r+0xed2>
   1674e:	aa25      	add	r2, sp, #148	; 0x94
   16750:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16752:	980c      	ldr	r0, [sp, #48]	; 0x30
   16754:	f004 fb66 	bl	1ae24 <__ssprint_r>
   16758:	2800      	cmp	r0, #0
   1675a:	f47f a883 	bne.w	15864 <_svfprintf_r+0x1a4>
   1675e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   16760:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   16762:	46c8      	mov	r8, r9
   16764:	e782      	b.n	1666c <_svfprintf_r+0xfac>
   16766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16768:	2b00      	cmp	r3, #0
   1676a:	bf08      	it	eq
   1676c:	2301      	moveq	r3, #1
   1676e:	930a      	str	r3, [sp, #40]	; 0x28
   16770:	e6db      	b.n	1652a <_svfprintf_r+0xe6a>
   16772:	4630      	mov	r0, r6
   16774:	940a      	str	r4, [sp, #40]	; 0x28
   16776:	f7fe fee3 	bl	15540 <strlen>
   1677a:	950f      	str	r5, [sp, #60]	; 0x3c
   1677c:	900e      	str	r0, [sp, #56]	; 0x38
   1677e:	f8cd b01c 	str.w	fp, [sp, #28]
   16782:	4603      	mov	r3, r0
   16784:	f7ff b9f9 	b.w	15b7a <_svfprintf_r+0x4ba>
   16788:	272d      	movs	r7, #45	; 0x2d
   1678a:	2300      	movs	r3, #0
   1678c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   16790:	930a      	str	r3, [sp, #40]	; 0x28
   16792:	f7ff b8ae 	b.w	158f2 <_svfprintf_r+0x232>
   16796:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16798:	9312      	str	r3, [sp, #72]	; 0x48
   1679a:	461a      	mov	r2, r3
   1679c:	3303      	adds	r3, #3
   1679e:	db04      	blt.n	167aa <_svfprintf_r+0x10ea>
   167a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   167a2:	4619      	mov	r1, r3
   167a4:	4291      	cmp	r1, r2
   167a6:	f6bf af17 	bge.w	165d8 <_svfprintf_r+0xf18>
   167aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   167ac:	3b02      	subs	r3, #2
   167ae:	9311      	str	r3, [sp, #68]	; 0x44
   167b0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   167b4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   167b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   167ba:	3b01      	subs	r3, #1
   167bc:	2b00      	cmp	r3, #0
   167be:	931f      	str	r3, [sp, #124]	; 0x7c
   167c0:	bfbd      	ittte	lt
   167c2:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   167c4:	f1c3 0301 	rsblt	r3, r3, #1
   167c8:	222d      	movlt	r2, #45	; 0x2d
   167ca:	222b      	movge	r2, #43	; 0x2b
   167cc:	2b09      	cmp	r3, #9
   167ce:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   167d2:	f340 8116 	ble.w	16a02 <_svfprintf_r+0x1342>
   167d6:	f10d 0493 	add.w	r4, sp, #147	; 0x93
   167da:	4620      	mov	r0, r4
   167dc:	4dab      	ldr	r5, [pc, #684]	; (16a8c <_svfprintf_r+0x13cc>)
   167de:	e000      	b.n	167e2 <_svfprintf_r+0x1122>
   167e0:	4610      	mov	r0, r2
   167e2:	fb85 1203 	smull	r1, r2, r5, r3
   167e6:	17d9      	asrs	r1, r3, #31
   167e8:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   167ec:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   167f0:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   167f4:	3230      	adds	r2, #48	; 0x30
   167f6:	2909      	cmp	r1, #9
   167f8:	f800 2c01 	strb.w	r2, [r0, #-1]
   167fc:	460b      	mov	r3, r1
   167fe:	f100 32ff 	add.w	r2, r0, #4294967295
   16802:	dced      	bgt.n	167e0 <_svfprintf_r+0x1120>
   16804:	3330      	adds	r3, #48	; 0x30
   16806:	3802      	subs	r0, #2
   16808:	b2d9      	uxtb	r1, r3
   1680a:	4284      	cmp	r4, r0
   1680c:	f802 1c01 	strb.w	r1, [r2, #-1]
   16810:	f240 8165 	bls.w	16ade <_svfprintf_r+0x141e>
   16814:	f10d 0086 	add.w	r0, sp, #134	; 0x86
   16818:	4613      	mov	r3, r2
   1681a:	e001      	b.n	16820 <_svfprintf_r+0x1160>
   1681c:	f813 1b01 	ldrb.w	r1, [r3], #1
   16820:	f800 1b01 	strb.w	r1, [r0], #1
   16824:	42a3      	cmp	r3, r4
   16826:	d1f9      	bne.n	1681c <_svfprintf_r+0x115c>
   16828:	3301      	adds	r3, #1
   1682a:	1a9b      	subs	r3, r3, r2
   1682c:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   16830:	4413      	add	r3, r2
   16832:	aa21      	add	r2, sp, #132	; 0x84
   16834:	1a9b      	subs	r3, r3, r2
   16836:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16838:	931b      	str	r3, [sp, #108]	; 0x6c
   1683a:	2a01      	cmp	r2, #1
   1683c:	4413      	add	r3, r2
   1683e:	930e      	str	r3, [sp, #56]	; 0x38
   16840:	f340 8119 	ble.w	16a76 <_svfprintf_r+0x13b6>
   16844:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16846:	9a19      	ldr	r2, [sp, #100]	; 0x64
   16848:	4413      	add	r3, r2
   1684a:	930e      	str	r3, [sp, #56]	; 0x38
   1684c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   16850:	9308      	str	r3, [sp, #32]
   16852:	2300      	movs	r3, #0
   16854:	9312      	str	r3, [sp, #72]	; 0x48
   16856:	e6cf      	b.n	165f8 <_svfprintf_r+0xf38>
   16858:	aa25      	add	r2, sp, #148	; 0x94
   1685a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1685c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1685e:	f004 fae1 	bl	1ae24 <__ssprint_r>
   16862:	2800      	cmp	r0, #0
   16864:	f47e affe 	bne.w	15864 <_svfprintf_r+0x1a4>
   16868:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   1686a:	46c8      	mov	r8, r9
   1686c:	e4d7      	b.n	1621e <_svfprintf_r+0xb5e>
   1686e:	4623      	mov	r3, r4
   16870:	e6a2      	b.n	165b8 <_svfprintf_r+0xef8>
   16872:	aa25      	add	r2, sp, #148	; 0x94
   16874:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16876:	980c      	ldr	r0, [sp, #48]	; 0x30
   16878:	f004 fad4 	bl	1ae24 <__ssprint_r>
   1687c:	2800      	cmp	r0, #0
   1687e:	f47e aff1 	bne.w	15864 <_svfprintf_r+0x1a4>
   16882:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   16884:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   16886:	46c8      	mov	r8, r9
   16888:	e5ae      	b.n	163e8 <_svfprintf_r+0xd28>
   1688a:	aa25      	add	r2, sp, #148	; 0x94
   1688c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1688e:	980c      	ldr	r0, [sp, #48]	; 0x30
   16890:	f004 fac8 	bl	1ae24 <__ssprint_r>
   16894:	2800      	cmp	r0, #0
   16896:	f47e afe5 	bne.w	15864 <_svfprintf_r+0x1a4>
   1689a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1689c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1689e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   168a0:	1a9a      	subs	r2, r3, r2
   168a2:	46c8      	mov	r8, r9
   168a4:	e5b8      	b.n	16418 <_svfprintf_r+0xd58>
   168a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   168a8:	9612      	str	r6, [sp, #72]	; 0x48
   168aa:	2b06      	cmp	r3, #6
   168ac:	bf28      	it	cs
   168ae:	2306      	movcs	r3, #6
   168b0:	960a      	str	r6, [sp, #40]	; 0x28
   168b2:	4637      	mov	r7, r6
   168b4:	9308      	str	r3, [sp, #32]
   168b6:	950f      	str	r5, [sp, #60]	; 0x3c
   168b8:	f8cd b01c 	str.w	fp, [sp, #28]
   168bc:	930e      	str	r3, [sp, #56]	; 0x38
   168be:	4e74      	ldr	r6, [pc, #464]	; (16a90 <_svfprintf_r+0x13d0>)
   168c0:	f7ff b816 	b.w	158f0 <_svfprintf_r+0x230>
   168c4:	a823      	add	r0, sp, #140	; 0x8c
   168c6:	a920      	add	r1, sp, #128	; 0x80
   168c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   168ca:	9004      	str	r0, [sp, #16]
   168cc:	9103      	str	r1, [sp, #12]
   168ce:	a81f      	add	r0, sp, #124	; 0x7c
   168d0:	2103      	movs	r1, #3
   168d2:	9002      	str	r0, [sp, #8]
   168d4:	9a08      	ldr	r2, [sp, #32]
   168d6:	9501      	str	r5, [sp, #4]
   168d8:	463b      	mov	r3, r7
   168da:	9100      	str	r1, [sp, #0]
   168dc:	980c      	ldr	r0, [sp, #48]	; 0x30
   168de:	f002 fd03 	bl	192e8 <_dtoa_r>
   168e2:	4606      	mov	r6, r0
   168e4:	1944      	adds	r4, r0, r5
   168e6:	e72b      	b.n	16740 <_svfprintf_r+0x1080>
   168e8:	2306      	movs	r3, #6
   168ea:	930a      	str	r3, [sp, #40]	; 0x28
   168ec:	e61d      	b.n	1652a <_svfprintf_r+0xe6a>
   168ee:	272d      	movs	r7, #45	; 0x2d
   168f0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   168f4:	f7ff bacd 	b.w	15e92 <_svfprintf_r+0x7d2>
   168f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   168fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   168fc:	4413      	add	r3, r2
   168fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
   16900:	930e      	str	r3, [sp, #56]	; 0x38
   16902:	2a00      	cmp	r2, #0
   16904:	f340 80b0 	ble.w	16a68 <_svfprintf_r+0x13a8>
   16908:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1690c:	9308      	str	r3, [sp, #32]
   1690e:	2367      	movs	r3, #103	; 0x67
   16910:	9311      	str	r3, [sp, #68]	; 0x44
   16912:	e671      	b.n	165f8 <_svfprintf_r+0xf38>
   16914:	2b00      	cmp	r3, #0
   16916:	f340 80c3 	ble.w	16aa0 <_svfprintf_r+0x13e0>
   1691a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1691c:	2a00      	cmp	r2, #0
   1691e:	f040 8099 	bne.w	16a54 <_svfprintf_r+0x1394>
   16922:	f01b 0f01 	tst.w	fp, #1
   16926:	f040 8095 	bne.w	16a54 <_svfprintf_r+0x1394>
   1692a:	9308      	str	r3, [sp, #32]
   1692c:	930e      	str	r3, [sp, #56]	; 0x38
   1692e:	e663      	b.n	165f8 <_svfprintf_r+0xf38>
   16930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16932:	9308      	str	r3, [sp, #32]
   16934:	930e      	str	r3, [sp, #56]	; 0x38
   16936:	900a      	str	r0, [sp, #40]	; 0x28
   16938:	950f      	str	r5, [sp, #60]	; 0x3c
   1693a:	f8cd b01c 	str.w	fp, [sp, #28]
   1693e:	9012      	str	r0, [sp, #72]	; 0x48
   16940:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   16944:	f7fe bfd4 	b.w	158f0 <_svfprintf_r+0x230>
   16948:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1694a:	2b47      	cmp	r3, #71	; 0x47
   1694c:	f47f ae20 	bne.w	16590 <_svfprintf_r+0xed0>
   16950:	f01b 0f01 	tst.w	fp, #1
   16954:	f47f aeee 	bne.w	16734 <_svfprintf_r+0x1074>
   16958:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1695a:	1b9b      	subs	r3, r3, r6
   1695c:	9313      	str	r3, [sp, #76]	; 0x4c
   1695e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16960:	2b47      	cmp	r3, #71	; 0x47
   16962:	f43f af18 	beq.w	16796 <_svfprintf_r+0x10d6>
   16966:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16968:	9312      	str	r3, [sp, #72]	; 0x48
   1696a:	e721      	b.n	167b0 <_svfprintf_r+0x10f0>
   1696c:	424f      	negs	r7, r1
   1696e:	3110      	adds	r1, #16
   16970:	4d48      	ldr	r5, [pc, #288]	; (16a94 <_svfprintf_r+0x13d4>)
   16972:	da2f      	bge.n	169d4 <_svfprintf_r+0x1314>
   16974:	2410      	movs	r4, #16
   16976:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   1697a:	e004      	b.n	16986 <_svfprintf_r+0x12c6>
   1697c:	f108 0808 	add.w	r8, r8, #8
   16980:	3f10      	subs	r7, #16
   16982:	2f10      	cmp	r7, #16
   16984:	dd26      	ble.n	169d4 <_svfprintf_r+0x1314>
   16986:	3301      	adds	r3, #1
   16988:	3210      	adds	r2, #16
   1698a:	2b07      	cmp	r3, #7
   1698c:	9227      	str	r2, [sp, #156]	; 0x9c
   1698e:	9326      	str	r3, [sp, #152]	; 0x98
   16990:	f8c8 5000 	str.w	r5, [r8]
   16994:	f8c8 4004 	str.w	r4, [r8, #4]
   16998:	ddf0      	ble.n	1697c <_svfprintf_r+0x12bc>
   1699a:	aa25      	add	r2, sp, #148	; 0x94
   1699c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1699e:	4658      	mov	r0, fp
   169a0:	f004 fa40 	bl	1ae24 <__ssprint_r>
   169a4:	2800      	cmp	r0, #0
   169a6:	f47e af5d 	bne.w	15864 <_svfprintf_r+0x1a4>
   169aa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   169ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
   169ae:	46c8      	mov	r8, r9
   169b0:	e7e6      	b.n	16980 <_svfprintf_r+0x12c0>
   169b2:	aa25      	add	r2, sp, #148	; 0x94
   169b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   169b6:	980c      	ldr	r0, [sp, #48]	; 0x30
   169b8:	f004 fa34 	bl	1ae24 <__ssprint_r>
   169bc:	2800      	cmp	r0, #0
   169be:	f47e af51 	bne.w	15864 <_svfprintf_r+0x1a4>
   169c2:	991f      	ldr	r1, [sp, #124]	; 0x7c
   169c4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   169c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   169c8:	46c8      	mov	r8, r9
   169ca:	e667      	b.n	1669c <_svfprintf_r+0xfdc>
   169cc:	2000      	movs	r0, #0
   169ce:	900a      	str	r0, [sp, #40]	; 0x28
   169d0:	f7fe bed0 	b.w	15774 <_svfprintf_r+0xb4>
   169d4:	3301      	adds	r3, #1
   169d6:	443a      	add	r2, r7
   169d8:	2b07      	cmp	r3, #7
   169da:	e888 00a0 	stmia.w	r8, {r5, r7}
   169de:	9227      	str	r2, [sp, #156]	; 0x9c
   169e0:	9326      	str	r3, [sp, #152]	; 0x98
   169e2:	f108 0808 	add.w	r8, r8, #8
   169e6:	f77f ae5c 	ble.w	166a2 <_svfprintf_r+0xfe2>
   169ea:	aa25      	add	r2, sp, #148	; 0x94
   169ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
   169ee:	980c      	ldr	r0, [sp, #48]	; 0x30
   169f0:	f004 fa18 	bl	1ae24 <__ssprint_r>
   169f4:	2800      	cmp	r0, #0
   169f6:	f47e af35 	bne.w	15864 <_svfprintf_r+0x1a4>
   169fa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   169fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   169fe:	46c8      	mov	r8, r9
   16a00:	e64f      	b.n	166a2 <_svfprintf_r+0xfe2>
   16a02:	3330      	adds	r3, #48	; 0x30
   16a04:	2230      	movs	r2, #48	; 0x30
   16a06:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   16a0a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   16a0e:	ab22      	add	r3, sp, #136	; 0x88
   16a10:	e70f      	b.n	16832 <_svfprintf_r+0x1172>
   16a12:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16a14:	9a19      	ldr	r2, [sp, #100]	; 0x64
   16a16:	4413      	add	r3, r2
   16a18:	930e      	str	r3, [sp, #56]	; 0x38
   16a1a:	e775      	b.n	16908 <_svfprintf_r+0x1248>
   16a1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   16a1e:	e5cb      	b.n	165b8 <_svfprintf_r+0xef8>
   16a20:	9b14      	ldr	r3, [sp, #80]	; 0x50
   16a22:	4e1d      	ldr	r6, [pc, #116]	; (16a98 <_svfprintf_r+0x13d8>)
   16a24:	2b00      	cmp	r3, #0
   16a26:	bfb6      	itet	lt
   16a28:	272d      	movlt	r7, #45	; 0x2d
   16a2a:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   16a2e:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
   16a32:	4b1a      	ldr	r3, [pc, #104]	; (16a9c <_svfprintf_r+0x13dc>)
   16a34:	f7ff ba2f 	b.w	15e96 <_svfprintf_r+0x7d6>
   16a38:	9a16      	ldr	r2, [sp, #88]	; 0x58
   16a3a:	9808      	ldr	r0, [sp, #32]
   16a3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   16a3e:	4639      	mov	r1, r7
   16a40:	f7fb fa36 	bl	11eb0 <__aeabi_dcmpeq>
   16a44:	2800      	cmp	r0, #0
   16a46:	f47f ae7f 	bne.w	16748 <_svfprintf_r+0x1088>
   16a4a:	f1c5 0501 	rsb	r5, r5, #1
   16a4e:	951f      	str	r5, [sp, #124]	; 0x7c
   16a50:	442c      	add	r4, r5
   16a52:	e59e      	b.n	16592 <_svfprintf_r+0xed2>
   16a54:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16a56:	9a19      	ldr	r2, [sp, #100]	; 0x64
   16a58:	4413      	add	r3, r2
   16a5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16a5c:	441a      	add	r2, r3
   16a5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   16a62:	920e      	str	r2, [sp, #56]	; 0x38
   16a64:	9308      	str	r3, [sp, #32]
   16a66:	e5c7      	b.n	165f8 <_svfprintf_r+0xf38>
   16a68:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16a6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16a6c:	f1c3 0301 	rsb	r3, r3, #1
   16a70:	441a      	add	r2, r3
   16a72:	4613      	mov	r3, r2
   16a74:	e7d0      	b.n	16a18 <_svfprintf_r+0x1358>
   16a76:	f01b 0301 	ands.w	r3, fp, #1
   16a7a:	9312      	str	r3, [sp, #72]	; 0x48
   16a7c:	f47f aee2 	bne.w	16844 <_svfprintf_r+0x1184>
   16a80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16a82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   16a86:	9308      	str	r3, [sp, #32]
   16a88:	e5b6      	b.n	165f8 <_svfprintf_r+0xf38>
   16a8a:	bf00      	nop
   16a8c:	66666667 	.word	0x66666667
   16a90:	00023cc0 	.word	0x00023cc0
   16a94:	00023cd8 	.word	0x00023cd8
   16a98:	00023c94 	.word	0x00023c94
   16a9c:	00023c90 	.word	0x00023c90
   16aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16aa2:	b913      	cbnz	r3, 16aaa <_svfprintf_r+0x13ea>
   16aa4:	f01b 0f01 	tst.w	fp, #1
   16aa8:	d002      	beq.n	16ab0 <_svfprintf_r+0x13f0>
   16aaa:	9b19      	ldr	r3, [sp, #100]	; 0x64
   16aac:	3301      	adds	r3, #1
   16aae:	e7d4      	b.n	16a5a <_svfprintf_r+0x139a>
   16ab0:	2301      	movs	r3, #1
   16ab2:	e73a      	b.n	1692a <_svfprintf_r+0x126a>
   16ab4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   16ab6:	f89a 3001 	ldrb.w	r3, [sl, #1]
   16aba:	6828      	ldr	r0, [r5, #0]
   16abc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   16ac0:	900a      	str	r0, [sp, #40]	; 0x28
   16ac2:	4628      	mov	r0, r5
   16ac4:	3004      	adds	r0, #4
   16ac6:	46a2      	mov	sl, r4
   16ac8:	900f      	str	r0, [sp, #60]	; 0x3c
   16aca:	f7fe be51 	b.w	15770 <_svfprintf_r+0xb0>
   16ace:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   16ad2:	f7ff b867 	b.w	15ba4 <_svfprintf_r+0x4e4>
   16ad6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   16ada:	f7ff ba15 	b.w	15f08 <_svfprintf_r+0x848>
   16ade:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   16ae2:	e6a6      	b.n	16832 <_svfprintf_r+0x1172>
   16ae4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   16ae8:	f7ff b8eb 	b.w	15cc2 <_svfprintf_r+0x602>
   16aec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16aee:	230c      	movs	r3, #12
   16af0:	6013      	str	r3, [r2, #0]
   16af2:	f04f 33ff 	mov.w	r3, #4294967295
   16af6:	9309      	str	r3, [sp, #36]	; 0x24
   16af8:	f7fe bebd 	b.w	15876 <_svfprintf_r+0x1b6>
   16afc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   16b00:	f7ff b99a 	b.w	15e38 <_svfprintf_r+0x778>
   16b04:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   16b08:	f7ff b976 	b.w	15df8 <_svfprintf_r+0x738>
   16b0c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   16b10:	f7ff b959 	b.w	15dc6 <_svfprintf_r+0x706>
   16b14:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   16b18:	f7ff b912 	b.w	15d40 <_svfprintf_r+0x680>

00016b1c <_user_strerror>:
   16b1c:	2000      	movs	r0, #0
   16b1e:	4770      	bx	lr

00016b20 <__sprint_r.part.0>:
   16b20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b24:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   16b26:	049c      	lsls	r4, r3, #18
   16b28:	4693      	mov	fp, r2
   16b2a:	d52f      	bpl.n	16b8c <__sprint_r.part.0+0x6c>
   16b2c:	6893      	ldr	r3, [r2, #8]
   16b2e:	6812      	ldr	r2, [r2, #0]
   16b30:	b353      	cbz	r3, 16b88 <__sprint_r.part.0+0x68>
   16b32:	460e      	mov	r6, r1
   16b34:	4607      	mov	r7, r0
   16b36:	f102 0908 	add.w	r9, r2, #8
   16b3a:	e919 0420 	ldmdb	r9, {r5, sl}
   16b3e:	ea5f 089a 	movs.w	r8, sl, lsr #2
   16b42:	d017      	beq.n	16b74 <__sprint_r.part.0+0x54>
   16b44:	3d04      	subs	r5, #4
   16b46:	2400      	movs	r4, #0
   16b48:	e001      	b.n	16b4e <__sprint_r.part.0+0x2e>
   16b4a:	45a0      	cmp	r8, r4
   16b4c:	d010      	beq.n	16b70 <__sprint_r.part.0+0x50>
   16b4e:	4632      	mov	r2, r6
   16b50:	f855 1f04 	ldr.w	r1, [r5, #4]!
   16b54:	4638      	mov	r0, r7
   16b56:	f003 fc8b 	bl	1a470 <_fputwc_r>
   16b5a:	1c43      	adds	r3, r0, #1
   16b5c:	f104 0401 	add.w	r4, r4, #1
   16b60:	d1f3      	bne.n	16b4a <__sprint_r.part.0+0x2a>
   16b62:	2300      	movs	r3, #0
   16b64:	f8cb 3008 	str.w	r3, [fp, #8]
   16b68:	f8cb 3004 	str.w	r3, [fp, #4]
   16b6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b70:	f8db 3008 	ldr.w	r3, [fp, #8]
   16b74:	f02a 0a03 	bic.w	sl, sl, #3
   16b78:	eba3 030a 	sub.w	r3, r3, sl
   16b7c:	f8cb 3008 	str.w	r3, [fp, #8]
   16b80:	f109 0908 	add.w	r9, r9, #8
   16b84:	2b00      	cmp	r3, #0
   16b86:	d1d8      	bne.n	16b3a <__sprint_r.part.0+0x1a>
   16b88:	2000      	movs	r0, #0
   16b8a:	e7ea      	b.n	16b62 <__sprint_r.part.0+0x42>
   16b8c:	f7fc ff68 	bl	13a60 <__sfvwrite_r>
   16b90:	2300      	movs	r3, #0
   16b92:	f8cb 3008 	str.w	r3, [fp, #8]
   16b96:	f8cb 3004 	str.w	r3, [fp, #4]
   16b9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b9e:	bf00      	nop

00016ba0 <__sprint_r>:
   16ba0:	6893      	ldr	r3, [r2, #8]
   16ba2:	b10b      	cbz	r3, 16ba8 <__sprint_r+0x8>
   16ba4:	f7ff bfbc 	b.w	16b20 <__sprint_r.part.0>
   16ba8:	b410      	push	{r4}
   16baa:	4618      	mov	r0, r3
   16bac:	6053      	str	r3, [r2, #4]
   16bae:	bc10      	pop	{r4}
   16bb0:	4770      	bx	lr
   16bb2:	bf00      	nop

00016bb4 <_vfiprintf_r>:
   16bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bb8:	b0ad      	sub	sp, #180	; 0xb4
   16bba:	461d      	mov	r5, r3
   16bbc:	468b      	mov	fp, r1
   16bbe:	4690      	mov	r8, r2
   16bc0:	9307      	str	r3, [sp, #28]
   16bc2:	9006      	str	r0, [sp, #24]
   16bc4:	b118      	cbz	r0, 16bce <_vfiprintf_r+0x1a>
   16bc6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   16bc8:	2b00      	cmp	r3, #0
   16bca:	f000 80f3 	beq.w	16db4 <_vfiprintf_r+0x200>
   16bce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   16bd2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   16bd6:	07df      	lsls	r7, r3, #31
   16bd8:	b281      	uxth	r1, r0
   16bda:	d402      	bmi.n	16be2 <_vfiprintf_r+0x2e>
   16bdc:	058e      	lsls	r6, r1, #22
   16bde:	f140 80fc 	bpl.w	16dda <_vfiprintf_r+0x226>
   16be2:	048c      	lsls	r4, r1, #18
   16be4:	d40a      	bmi.n	16bfc <_vfiprintf_r+0x48>
   16be6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   16bea:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   16bee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   16bf2:	f8ab 100c 	strh.w	r1, [fp, #12]
   16bf6:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   16bfa:	b289      	uxth	r1, r1
   16bfc:	0708      	lsls	r0, r1, #28
   16bfe:	f140 80b3 	bpl.w	16d68 <_vfiprintf_r+0x1b4>
   16c02:	f8db 3010 	ldr.w	r3, [fp, #16]
   16c06:	2b00      	cmp	r3, #0
   16c08:	f000 80ae 	beq.w	16d68 <_vfiprintf_r+0x1b4>
   16c0c:	f001 031a 	and.w	r3, r1, #26
   16c10:	2b0a      	cmp	r3, #10
   16c12:	f000 80b5 	beq.w	16d80 <_vfiprintf_r+0x1cc>
   16c16:	2300      	movs	r3, #0
   16c18:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   16c1c:	930b      	str	r3, [sp, #44]	; 0x2c
   16c1e:	9311      	str	r3, [sp, #68]	; 0x44
   16c20:	9310      	str	r3, [sp, #64]	; 0x40
   16c22:	9303      	str	r3, [sp, #12]
   16c24:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   16c28:	46ca      	mov	sl, r9
   16c2a:	f8cd b010 	str.w	fp, [sp, #16]
   16c2e:	f898 3000 	ldrb.w	r3, [r8]
   16c32:	4644      	mov	r4, r8
   16c34:	b1fb      	cbz	r3, 16c76 <_vfiprintf_r+0xc2>
   16c36:	2b25      	cmp	r3, #37	; 0x25
   16c38:	d102      	bne.n	16c40 <_vfiprintf_r+0x8c>
   16c3a:	e01c      	b.n	16c76 <_vfiprintf_r+0xc2>
   16c3c:	2b25      	cmp	r3, #37	; 0x25
   16c3e:	d003      	beq.n	16c48 <_vfiprintf_r+0x94>
   16c40:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   16c44:	2b00      	cmp	r3, #0
   16c46:	d1f9      	bne.n	16c3c <_vfiprintf_r+0x88>
   16c48:	eba4 0508 	sub.w	r5, r4, r8
   16c4c:	b19d      	cbz	r5, 16c76 <_vfiprintf_r+0xc2>
   16c4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16c50:	9a11      	ldr	r2, [sp, #68]	; 0x44
   16c52:	f8ca 8000 	str.w	r8, [sl]
   16c56:	3301      	adds	r3, #1
   16c58:	442a      	add	r2, r5
   16c5a:	2b07      	cmp	r3, #7
   16c5c:	f8ca 5004 	str.w	r5, [sl, #4]
   16c60:	9211      	str	r2, [sp, #68]	; 0x44
   16c62:	9310      	str	r3, [sp, #64]	; 0x40
   16c64:	dd7a      	ble.n	16d5c <_vfiprintf_r+0x1a8>
   16c66:	2a00      	cmp	r2, #0
   16c68:	f040 84b0 	bne.w	175cc <_vfiprintf_r+0xa18>
   16c6c:	9b03      	ldr	r3, [sp, #12]
   16c6e:	9210      	str	r2, [sp, #64]	; 0x40
   16c70:	442b      	add	r3, r5
   16c72:	46ca      	mov	sl, r9
   16c74:	9303      	str	r3, [sp, #12]
   16c76:	7823      	ldrb	r3, [r4, #0]
   16c78:	2b00      	cmp	r3, #0
   16c7a:	f000 83e0 	beq.w	1743e <_vfiprintf_r+0x88a>
   16c7e:	2000      	movs	r0, #0
   16c80:	f04f 0300 	mov.w	r3, #0
   16c84:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   16c88:	f104 0801 	add.w	r8, r4, #1
   16c8c:	7862      	ldrb	r2, [r4, #1]
   16c8e:	4605      	mov	r5, r0
   16c90:	4606      	mov	r6, r0
   16c92:	4603      	mov	r3, r0
   16c94:	f04f 34ff 	mov.w	r4, #4294967295
   16c98:	f108 0801 	add.w	r8, r8, #1
   16c9c:	f1a2 0120 	sub.w	r1, r2, #32
   16ca0:	2958      	cmp	r1, #88	; 0x58
   16ca2:	f200 82de 	bhi.w	17262 <_vfiprintf_r+0x6ae>
   16ca6:	e8df f011 	tbh	[pc, r1, lsl #1]
   16caa:	0221      	.short	0x0221
   16cac:	02dc02dc 	.word	0x02dc02dc
   16cb0:	02dc0229 	.word	0x02dc0229
   16cb4:	02dc02dc 	.word	0x02dc02dc
   16cb8:	02dc02dc 	.word	0x02dc02dc
   16cbc:	028902dc 	.word	0x028902dc
   16cc0:	02dc0295 	.word	0x02dc0295
   16cc4:	02bd00a2 	.word	0x02bd00a2
   16cc8:	019f02dc 	.word	0x019f02dc
   16ccc:	01a401a4 	.word	0x01a401a4
   16cd0:	01a401a4 	.word	0x01a401a4
   16cd4:	01a401a4 	.word	0x01a401a4
   16cd8:	01a401a4 	.word	0x01a401a4
   16cdc:	02dc01a4 	.word	0x02dc01a4
   16ce0:	02dc02dc 	.word	0x02dc02dc
   16ce4:	02dc02dc 	.word	0x02dc02dc
   16ce8:	02dc02dc 	.word	0x02dc02dc
   16cec:	02dc02dc 	.word	0x02dc02dc
   16cf0:	01b202dc 	.word	0x01b202dc
   16cf4:	02dc02dc 	.word	0x02dc02dc
   16cf8:	02dc02dc 	.word	0x02dc02dc
   16cfc:	02dc02dc 	.word	0x02dc02dc
   16d00:	02dc02dc 	.word	0x02dc02dc
   16d04:	02dc02dc 	.word	0x02dc02dc
   16d08:	02dc0197 	.word	0x02dc0197
   16d0c:	02dc02dc 	.word	0x02dc02dc
   16d10:	02dc02dc 	.word	0x02dc02dc
   16d14:	02dc019b 	.word	0x02dc019b
   16d18:	025302dc 	.word	0x025302dc
   16d1c:	02dc02dc 	.word	0x02dc02dc
   16d20:	02dc02dc 	.word	0x02dc02dc
   16d24:	02dc02dc 	.word	0x02dc02dc
   16d28:	02dc02dc 	.word	0x02dc02dc
   16d2c:	02dc02dc 	.word	0x02dc02dc
   16d30:	021b025a 	.word	0x021b025a
   16d34:	02dc02dc 	.word	0x02dc02dc
   16d38:	026e02dc 	.word	0x026e02dc
   16d3c:	02dc021b 	.word	0x02dc021b
   16d40:	027302dc 	.word	0x027302dc
   16d44:	01f502dc 	.word	0x01f502dc
   16d48:	02090182 	.word	0x02090182
   16d4c:	02dc02d7 	.word	0x02dc02d7
   16d50:	02dc029a 	.word	0x02dc029a
   16d54:	02dc00a7 	.word	0x02dc00a7
   16d58:	022e02dc 	.word	0x022e02dc
   16d5c:	f10a 0a08 	add.w	sl, sl, #8
   16d60:	9b03      	ldr	r3, [sp, #12]
   16d62:	442b      	add	r3, r5
   16d64:	9303      	str	r3, [sp, #12]
   16d66:	e786      	b.n	16c76 <_vfiprintf_r+0xc2>
   16d68:	4659      	mov	r1, fp
   16d6a:	9806      	ldr	r0, [sp, #24]
   16d6c:	f002 f940 	bl	18ff0 <__swsetup_r>
   16d70:	bb18      	cbnz	r0, 16dba <_vfiprintf_r+0x206>
   16d72:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   16d76:	f001 031a 	and.w	r3, r1, #26
   16d7a:	2b0a      	cmp	r3, #10
   16d7c:	f47f af4b 	bne.w	16c16 <_vfiprintf_r+0x62>
   16d80:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   16d84:	2b00      	cmp	r3, #0
   16d86:	f6ff af46 	blt.w	16c16 <_vfiprintf_r+0x62>
   16d8a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   16d8e:	07db      	lsls	r3, r3, #31
   16d90:	d405      	bmi.n	16d9e <_vfiprintf_r+0x1ea>
   16d92:	058f      	lsls	r7, r1, #22
   16d94:	d403      	bmi.n	16d9e <_vfiprintf_r+0x1ea>
   16d96:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   16d9a:	f7fd f87b 	bl	13e94 <__retarget_lock_release_recursive>
   16d9e:	462b      	mov	r3, r5
   16da0:	4642      	mov	r2, r8
   16da2:	4659      	mov	r1, fp
   16da4:	9806      	ldr	r0, [sp, #24]
   16da6:	f000 fd4d 	bl	17844 <__sbprintf>
   16daa:	9003      	str	r0, [sp, #12]
   16dac:	9803      	ldr	r0, [sp, #12]
   16dae:	b02d      	add	sp, #180	; 0xb4
   16db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16db4:	f003 faba 	bl	1a32c <__sinit>
   16db8:	e709      	b.n	16bce <_vfiprintf_r+0x1a>
   16dba:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   16dbe:	07d9      	lsls	r1, r3, #31
   16dc0:	d404      	bmi.n	16dcc <_vfiprintf_r+0x218>
   16dc2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   16dc6:	059a      	lsls	r2, r3, #22
   16dc8:	f140 84aa 	bpl.w	17720 <_vfiprintf_r+0xb6c>
   16dcc:	f04f 33ff 	mov.w	r3, #4294967295
   16dd0:	9303      	str	r3, [sp, #12]
   16dd2:	9803      	ldr	r0, [sp, #12]
   16dd4:	b02d      	add	sp, #180	; 0xb4
   16dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dda:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   16dde:	f7fd f857 	bl	13e90 <__retarget_lock_acquire_recursive>
   16de2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   16de6:	b281      	uxth	r1, r0
   16de8:	e6fb      	b.n	16be2 <_vfiprintf_r+0x2e>
   16dea:	4276      	negs	r6, r6
   16dec:	9207      	str	r2, [sp, #28]
   16dee:	f043 0304 	orr.w	r3, r3, #4
   16df2:	f898 2000 	ldrb.w	r2, [r8]
   16df6:	e74f      	b.n	16c98 <_vfiprintf_r+0xe4>
   16df8:	9608      	str	r6, [sp, #32]
   16dfa:	069e      	lsls	r6, r3, #26
   16dfc:	f100 8450 	bmi.w	176a0 <_vfiprintf_r+0xaec>
   16e00:	9907      	ldr	r1, [sp, #28]
   16e02:	06dd      	lsls	r5, r3, #27
   16e04:	460a      	mov	r2, r1
   16e06:	f100 83ef 	bmi.w	175e8 <_vfiprintf_r+0xa34>
   16e0a:	0658      	lsls	r0, r3, #25
   16e0c:	f140 83ec 	bpl.w	175e8 <_vfiprintf_r+0xa34>
   16e10:	880e      	ldrh	r6, [r1, #0]
   16e12:	3104      	adds	r1, #4
   16e14:	2700      	movs	r7, #0
   16e16:	2201      	movs	r2, #1
   16e18:	9107      	str	r1, [sp, #28]
   16e1a:	f04f 0100 	mov.w	r1, #0
   16e1e:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   16e22:	2500      	movs	r5, #0
   16e24:	1c61      	adds	r1, r4, #1
   16e26:	f000 8116 	beq.w	17056 <_vfiprintf_r+0x4a2>
   16e2a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   16e2e:	9102      	str	r1, [sp, #8]
   16e30:	ea56 0107 	orrs.w	r1, r6, r7
   16e34:	f040 8114 	bne.w	17060 <_vfiprintf_r+0x4ac>
   16e38:	2c00      	cmp	r4, #0
   16e3a:	f040 835c 	bne.w	174f6 <_vfiprintf_r+0x942>
   16e3e:	2a00      	cmp	r2, #0
   16e40:	f040 83b7 	bne.w	175b2 <_vfiprintf_r+0x9fe>
   16e44:	f013 0301 	ands.w	r3, r3, #1
   16e48:	9305      	str	r3, [sp, #20]
   16e4a:	f000 8457 	beq.w	176fc <_vfiprintf_r+0xb48>
   16e4e:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   16e52:	2330      	movs	r3, #48	; 0x30
   16e54:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   16e58:	9b05      	ldr	r3, [sp, #20]
   16e5a:	42a3      	cmp	r3, r4
   16e5c:	bfb8      	it	lt
   16e5e:	4623      	movlt	r3, r4
   16e60:	9301      	str	r3, [sp, #4]
   16e62:	b10d      	cbz	r5, 16e68 <_vfiprintf_r+0x2b4>
   16e64:	3301      	adds	r3, #1
   16e66:	9301      	str	r3, [sp, #4]
   16e68:	9b02      	ldr	r3, [sp, #8]
   16e6a:	f013 0302 	ands.w	r3, r3, #2
   16e6e:	9309      	str	r3, [sp, #36]	; 0x24
   16e70:	d002      	beq.n	16e78 <_vfiprintf_r+0x2c4>
   16e72:	9b01      	ldr	r3, [sp, #4]
   16e74:	3302      	adds	r3, #2
   16e76:	9301      	str	r3, [sp, #4]
   16e78:	9b02      	ldr	r3, [sp, #8]
   16e7a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   16e7e:	930a      	str	r3, [sp, #40]	; 0x28
   16e80:	f040 8217 	bne.w	172b2 <_vfiprintf_r+0x6fe>
   16e84:	9b08      	ldr	r3, [sp, #32]
   16e86:	9a01      	ldr	r2, [sp, #4]
   16e88:	1a9d      	subs	r5, r3, r2
   16e8a:	2d00      	cmp	r5, #0
   16e8c:	f340 8211 	ble.w	172b2 <_vfiprintf_r+0x6fe>
   16e90:	2d10      	cmp	r5, #16
   16e92:	f340 8490 	ble.w	177b6 <_vfiprintf_r+0xc02>
   16e96:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16e98:	9a11      	ldr	r2, [sp, #68]	; 0x44
   16e9a:	4ec4      	ldr	r6, [pc, #784]	; (171ac <_vfiprintf_r+0x5f8>)
   16e9c:	46d6      	mov	lr, sl
   16e9e:	2710      	movs	r7, #16
   16ea0:	46a2      	mov	sl, r4
   16ea2:	4619      	mov	r1, r3
   16ea4:	9c06      	ldr	r4, [sp, #24]
   16ea6:	e007      	b.n	16eb8 <_vfiprintf_r+0x304>
   16ea8:	f101 0c02 	add.w	ip, r1, #2
   16eac:	f10e 0e08 	add.w	lr, lr, #8
   16eb0:	4601      	mov	r1, r0
   16eb2:	3d10      	subs	r5, #16
   16eb4:	2d10      	cmp	r5, #16
   16eb6:	dd11      	ble.n	16edc <_vfiprintf_r+0x328>
   16eb8:	1c48      	adds	r0, r1, #1
   16eba:	3210      	adds	r2, #16
   16ebc:	2807      	cmp	r0, #7
   16ebe:	9211      	str	r2, [sp, #68]	; 0x44
   16ec0:	e88e 00c0 	stmia.w	lr, {r6, r7}
   16ec4:	9010      	str	r0, [sp, #64]	; 0x40
   16ec6:	ddef      	ble.n	16ea8 <_vfiprintf_r+0x2f4>
   16ec8:	2a00      	cmp	r2, #0
   16eca:	f040 81e4 	bne.w	17296 <_vfiprintf_r+0x6e2>
   16ece:	3d10      	subs	r5, #16
   16ed0:	2d10      	cmp	r5, #16
   16ed2:	4611      	mov	r1, r2
   16ed4:	f04f 0c01 	mov.w	ip, #1
   16ed8:	46ce      	mov	lr, r9
   16eda:	dced      	bgt.n	16eb8 <_vfiprintf_r+0x304>
   16edc:	4654      	mov	r4, sl
   16ede:	4661      	mov	r1, ip
   16ee0:	46f2      	mov	sl, lr
   16ee2:	442a      	add	r2, r5
   16ee4:	2907      	cmp	r1, #7
   16ee6:	9211      	str	r2, [sp, #68]	; 0x44
   16ee8:	f8ca 6000 	str.w	r6, [sl]
   16eec:	f8ca 5004 	str.w	r5, [sl, #4]
   16ef0:	9110      	str	r1, [sp, #64]	; 0x40
   16ef2:	f300 82ec 	bgt.w	174ce <_vfiprintf_r+0x91a>
   16ef6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   16efa:	f10a 0a08 	add.w	sl, sl, #8
   16efe:	1c48      	adds	r0, r1, #1
   16f00:	2d00      	cmp	r5, #0
   16f02:	f040 81de 	bne.w	172c2 <_vfiprintf_r+0x70e>
   16f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16f08:	2b00      	cmp	r3, #0
   16f0a:	f000 81f8 	beq.w	172fe <_vfiprintf_r+0x74a>
   16f0e:	3202      	adds	r2, #2
   16f10:	a90e      	add	r1, sp, #56	; 0x38
   16f12:	2302      	movs	r3, #2
   16f14:	2807      	cmp	r0, #7
   16f16:	9211      	str	r2, [sp, #68]	; 0x44
   16f18:	9010      	str	r0, [sp, #64]	; 0x40
   16f1a:	e88a 000a 	stmia.w	sl, {r1, r3}
   16f1e:	f340 81ea 	ble.w	172f6 <_vfiprintf_r+0x742>
   16f22:	2a00      	cmp	r2, #0
   16f24:	f040 838c 	bne.w	17640 <_vfiprintf_r+0xa8c>
   16f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16f2a:	2b80      	cmp	r3, #128	; 0x80
   16f2c:	f04f 0001 	mov.w	r0, #1
   16f30:	4611      	mov	r1, r2
   16f32:	46ca      	mov	sl, r9
   16f34:	f040 81e7 	bne.w	17306 <_vfiprintf_r+0x752>
   16f38:	9b08      	ldr	r3, [sp, #32]
   16f3a:	9d01      	ldr	r5, [sp, #4]
   16f3c:	1b5e      	subs	r6, r3, r5
   16f3e:	2e00      	cmp	r6, #0
   16f40:	f340 81e1 	ble.w	17306 <_vfiprintf_r+0x752>
   16f44:	2e10      	cmp	r6, #16
   16f46:	4d9a      	ldr	r5, [pc, #616]	; (171b0 <_vfiprintf_r+0x5fc>)
   16f48:	f340 8450 	ble.w	177ec <_vfiprintf_r+0xc38>
   16f4c:	46d4      	mov	ip, sl
   16f4e:	2710      	movs	r7, #16
   16f50:	46a2      	mov	sl, r4
   16f52:	9c06      	ldr	r4, [sp, #24]
   16f54:	e007      	b.n	16f66 <_vfiprintf_r+0x3b2>
   16f56:	f101 0e02 	add.w	lr, r1, #2
   16f5a:	f10c 0c08 	add.w	ip, ip, #8
   16f5e:	4601      	mov	r1, r0
   16f60:	3e10      	subs	r6, #16
   16f62:	2e10      	cmp	r6, #16
   16f64:	dd11      	ble.n	16f8a <_vfiprintf_r+0x3d6>
   16f66:	1c48      	adds	r0, r1, #1
   16f68:	3210      	adds	r2, #16
   16f6a:	2807      	cmp	r0, #7
   16f6c:	9211      	str	r2, [sp, #68]	; 0x44
   16f6e:	e88c 00a0 	stmia.w	ip, {r5, r7}
   16f72:	9010      	str	r0, [sp, #64]	; 0x40
   16f74:	ddef      	ble.n	16f56 <_vfiprintf_r+0x3a2>
   16f76:	2a00      	cmp	r2, #0
   16f78:	f040 829d 	bne.w	174b6 <_vfiprintf_r+0x902>
   16f7c:	3e10      	subs	r6, #16
   16f7e:	2e10      	cmp	r6, #16
   16f80:	f04f 0e01 	mov.w	lr, #1
   16f84:	4611      	mov	r1, r2
   16f86:	46cc      	mov	ip, r9
   16f88:	dced      	bgt.n	16f66 <_vfiprintf_r+0x3b2>
   16f8a:	4654      	mov	r4, sl
   16f8c:	46e2      	mov	sl, ip
   16f8e:	4432      	add	r2, r6
   16f90:	f1be 0f07 	cmp.w	lr, #7
   16f94:	9211      	str	r2, [sp, #68]	; 0x44
   16f96:	e88a 0060 	stmia.w	sl, {r5, r6}
   16f9a:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   16f9e:	f300 8369 	bgt.w	17674 <_vfiprintf_r+0xac0>
   16fa2:	f10a 0a08 	add.w	sl, sl, #8
   16fa6:	f10e 0001 	add.w	r0, lr, #1
   16faa:	4671      	mov	r1, lr
   16fac:	e1ab      	b.n	17306 <_vfiprintf_r+0x752>
   16fae:	9608      	str	r6, [sp, #32]
   16fb0:	f013 0220 	ands.w	r2, r3, #32
   16fb4:	f040 838c 	bne.w	176d0 <_vfiprintf_r+0xb1c>
   16fb8:	f013 0110 	ands.w	r1, r3, #16
   16fbc:	f040 831a 	bne.w	175f4 <_vfiprintf_r+0xa40>
   16fc0:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   16fc4:	f000 8316 	beq.w	175f4 <_vfiprintf_r+0xa40>
   16fc8:	9807      	ldr	r0, [sp, #28]
   16fca:	460a      	mov	r2, r1
   16fcc:	4601      	mov	r1, r0
   16fce:	3104      	adds	r1, #4
   16fd0:	8806      	ldrh	r6, [r0, #0]
   16fd2:	9107      	str	r1, [sp, #28]
   16fd4:	2700      	movs	r7, #0
   16fd6:	e720      	b.n	16e1a <_vfiprintf_r+0x266>
   16fd8:	9608      	str	r6, [sp, #32]
   16fda:	f043 0310 	orr.w	r3, r3, #16
   16fde:	e7e7      	b.n	16fb0 <_vfiprintf_r+0x3fc>
   16fe0:	9608      	str	r6, [sp, #32]
   16fe2:	f043 0310 	orr.w	r3, r3, #16
   16fe6:	e708      	b.n	16dfa <_vfiprintf_r+0x246>
   16fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16fec:	f898 2000 	ldrb.w	r2, [r8]
   16ff0:	e652      	b.n	16c98 <_vfiprintf_r+0xe4>
   16ff2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   16ff6:	2600      	movs	r6, #0
   16ff8:	f818 2b01 	ldrb.w	r2, [r8], #1
   16ffc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   17000:	eb01 0646 	add.w	r6, r1, r6, lsl #1
   17004:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   17008:	2909      	cmp	r1, #9
   1700a:	d9f5      	bls.n	16ff8 <_vfiprintf_r+0x444>
   1700c:	e646      	b.n	16c9c <_vfiprintf_r+0xe8>
   1700e:	9608      	str	r6, [sp, #32]
   17010:	2800      	cmp	r0, #0
   17012:	f040 8408 	bne.w	17826 <_vfiprintf_r+0xc72>
   17016:	f043 0310 	orr.w	r3, r3, #16
   1701a:	069e      	lsls	r6, r3, #26
   1701c:	f100 834c 	bmi.w	176b8 <_vfiprintf_r+0xb04>
   17020:	06dd      	lsls	r5, r3, #27
   17022:	f100 82f3 	bmi.w	1760c <_vfiprintf_r+0xa58>
   17026:	0658      	lsls	r0, r3, #25
   17028:	f140 82f0 	bpl.w	1760c <_vfiprintf_r+0xa58>
   1702c:	9d07      	ldr	r5, [sp, #28]
   1702e:	f9b5 6000 	ldrsh.w	r6, [r5]
   17032:	462a      	mov	r2, r5
   17034:	17f7      	asrs	r7, r6, #31
   17036:	3204      	adds	r2, #4
   17038:	4630      	mov	r0, r6
   1703a:	4639      	mov	r1, r7
   1703c:	9207      	str	r2, [sp, #28]
   1703e:	2800      	cmp	r0, #0
   17040:	f171 0200 	sbcs.w	r2, r1, #0
   17044:	f2c0 835d 	blt.w	17702 <_vfiprintf_r+0xb4e>
   17048:	1c61      	adds	r1, r4, #1
   1704a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   1704e:	f04f 0201 	mov.w	r2, #1
   17052:	f47f aeea 	bne.w	16e2a <_vfiprintf_r+0x276>
   17056:	ea56 0107 	orrs.w	r1, r6, r7
   1705a:	f000 824d 	beq.w	174f8 <_vfiprintf_r+0x944>
   1705e:	9302      	str	r3, [sp, #8]
   17060:	2a01      	cmp	r2, #1
   17062:	f000 828c 	beq.w	1757e <_vfiprintf_r+0x9ca>
   17066:	2a02      	cmp	r2, #2
   17068:	f040 825c 	bne.w	17524 <_vfiprintf_r+0x970>
   1706c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1706e:	46cb      	mov	fp, r9
   17070:	0933      	lsrs	r3, r6, #4
   17072:	f006 010f 	and.w	r1, r6, #15
   17076:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   1707a:	093a      	lsrs	r2, r7, #4
   1707c:	461e      	mov	r6, r3
   1707e:	4617      	mov	r7, r2
   17080:	5c43      	ldrb	r3, [r0, r1]
   17082:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   17086:	ea56 0307 	orrs.w	r3, r6, r7
   1708a:	d1f1      	bne.n	17070 <_vfiprintf_r+0x4bc>
   1708c:	eba9 030b 	sub.w	r3, r9, fp
   17090:	9305      	str	r3, [sp, #20]
   17092:	e6e1      	b.n	16e58 <_vfiprintf_r+0x2a4>
   17094:	2800      	cmp	r0, #0
   17096:	f040 83c0 	bne.w	1781a <_vfiprintf_r+0xc66>
   1709a:	0699      	lsls	r1, r3, #26
   1709c:	f100 8367 	bmi.w	1776e <_vfiprintf_r+0xbba>
   170a0:	06da      	lsls	r2, r3, #27
   170a2:	f100 80f1 	bmi.w	17288 <_vfiprintf_r+0x6d4>
   170a6:	065b      	lsls	r3, r3, #25
   170a8:	f140 80ee 	bpl.w	17288 <_vfiprintf_r+0x6d4>
   170ac:	9a07      	ldr	r2, [sp, #28]
   170ae:	6813      	ldr	r3, [r2, #0]
   170b0:	3204      	adds	r2, #4
   170b2:	9207      	str	r2, [sp, #28]
   170b4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   170b8:	801a      	strh	r2, [r3, #0]
   170ba:	e5b8      	b.n	16c2e <_vfiprintf_r+0x7a>
   170bc:	9807      	ldr	r0, [sp, #28]
   170be:	4a3d      	ldr	r2, [pc, #244]	; (171b4 <_vfiprintf_r+0x600>)
   170c0:	9608      	str	r6, [sp, #32]
   170c2:	920b      	str	r2, [sp, #44]	; 0x2c
   170c4:	6806      	ldr	r6, [r0, #0]
   170c6:	2278      	movs	r2, #120	; 0x78
   170c8:	2130      	movs	r1, #48	; 0x30
   170ca:	3004      	adds	r0, #4
   170cc:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   170d0:	f043 0302 	orr.w	r3, r3, #2
   170d4:	9007      	str	r0, [sp, #28]
   170d6:	2700      	movs	r7, #0
   170d8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   170dc:	2202      	movs	r2, #2
   170de:	e69c      	b.n	16e1a <_vfiprintf_r+0x266>
   170e0:	9608      	str	r6, [sp, #32]
   170e2:	2800      	cmp	r0, #0
   170e4:	d099      	beq.n	1701a <_vfiprintf_r+0x466>
   170e6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   170ea:	e796      	b.n	1701a <_vfiprintf_r+0x466>
   170ec:	f898 2000 	ldrb.w	r2, [r8]
   170f0:	2d00      	cmp	r5, #0
   170f2:	f47f add1 	bne.w	16c98 <_vfiprintf_r+0xe4>
   170f6:	2001      	movs	r0, #1
   170f8:	2520      	movs	r5, #32
   170fa:	e5cd      	b.n	16c98 <_vfiprintf_r+0xe4>
   170fc:	f043 0301 	orr.w	r3, r3, #1
   17100:	f898 2000 	ldrb.w	r2, [r8]
   17104:	e5c8      	b.n	16c98 <_vfiprintf_r+0xe4>
   17106:	9608      	str	r6, [sp, #32]
   17108:	2800      	cmp	r0, #0
   1710a:	f040 8393 	bne.w	17834 <_vfiprintf_r+0xc80>
   1710e:	4929      	ldr	r1, [pc, #164]	; (171b4 <_vfiprintf_r+0x600>)
   17110:	910b      	str	r1, [sp, #44]	; 0x2c
   17112:	069f      	lsls	r7, r3, #26
   17114:	f100 82e8 	bmi.w	176e8 <_vfiprintf_r+0xb34>
   17118:	9807      	ldr	r0, [sp, #28]
   1711a:	06de      	lsls	r6, r3, #27
   1711c:	4601      	mov	r1, r0
   1711e:	f100 8270 	bmi.w	17602 <_vfiprintf_r+0xa4e>
   17122:	065d      	lsls	r5, r3, #25
   17124:	f140 826d 	bpl.w	17602 <_vfiprintf_r+0xa4e>
   17128:	3104      	adds	r1, #4
   1712a:	8806      	ldrh	r6, [r0, #0]
   1712c:	9107      	str	r1, [sp, #28]
   1712e:	2700      	movs	r7, #0
   17130:	07d8      	lsls	r0, r3, #31
   17132:	f140 8222 	bpl.w	1757a <_vfiprintf_r+0x9c6>
   17136:	ea56 0107 	orrs.w	r1, r6, r7
   1713a:	f000 821e 	beq.w	1757a <_vfiprintf_r+0x9c6>
   1713e:	2130      	movs	r1, #48	; 0x30
   17140:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   17144:	f043 0302 	orr.w	r3, r3, #2
   17148:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   1714c:	2202      	movs	r2, #2
   1714e:	e664      	b.n	16e1a <_vfiprintf_r+0x266>
   17150:	9608      	str	r6, [sp, #32]
   17152:	2800      	cmp	r0, #0
   17154:	f040 836b 	bne.w	1782e <_vfiprintf_r+0xc7a>
   17158:	4917      	ldr	r1, [pc, #92]	; (171b8 <_vfiprintf_r+0x604>)
   1715a:	910b      	str	r1, [sp, #44]	; 0x2c
   1715c:	e7d9      	b.n	17112 <_vfiprintf_r+0x55e>
   1715e:	9907      	ldr	r1, [sp, #28]
   17160:	9608      	str	r6, [sp, #32]
   17162:	680a      	ldr	r2, [r1, #0]
   17164:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   17168:	f04f 0000 	mov.w	r0, #0
   1716c:	460a      	mov	r2, r1
   1716e:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   17172:	3204      	adds	r2, #4
   17174:	2001      	movs	r0, #1
   17176:	9001      	str	r0, [sp, #4]
   17178:	9207      	str	r2, [sp, #28]
   1717a:	9005      	str	r0, [sp, #20]
   1717c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   17180:	9302      	str	r3, [sp, #8]
   17182:	2400      	movs	r4, #0
   17184:	e670      	b.n	16e68 <_vfiprintf_r+0x2b4>
   17186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1718a:	f898 2000 	ldrb.w	r2, [r8]
   1718e:	e583      	b.n	16c98 <_vfiprintf_r+0xe4>
   17190:	f898 2000 	ldrb.w	r2, [r8]
   17194:	2a6c      	cmp	r2, #108	; 0x6c
   17196:	bf03      	ittte	eq
   17198:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   1719c:	f043 0320 	orreq.w	r3, r3, #32
   171a0:	f108 0801 	addeq.w	r8, r8, #1
   171a4:	f043 0310 	orrne.w	r3, r3, #16
   171a8:	e576      	b.n	16c98 <_vfiprintf_r+0xe4>
   171aa:	bf00      	nop
   171ac:	00023ce8 	.word	0x00023ce8
   171b0:	00023cf8 	.word	0x00023cf8
   171b4:	00023cac 	.word	0x00023cac
   171b8:	00023c98 	.word	0x00023c98
   171bc:	9907      	ldr	r1, [sp, #28]
   171be:	680e      	ldr	r6, [r1, #0]
   171c0:	460a      	mov	r2, r1
   171c2:	2e00      	cmp	r6, #0
   171c4:	f102 0204 	add.w	r2, r2, #4
   171c8:	f6ff ae0f 	blt.w	16dea <_vfiprintf_r+0x236>
   171cc:	9207      	str	r2, [sp, #28]
   171ce:	f898 2000 	ldrb.w	r2, [r8]
   171d2:	e561      	b.n	16c98 <_vfiprintf_r+0xe4>
   171d4:	f898 2000 	ldrb.w	r2, [r8]
   171d8:	2001      	movs	r0, #1
   171da:	252b      	movs	r5, #43	; 0x2b
   171dc:	e55c      	b.n	16c98 <_vfiprintf_r+0xe4>
   171de:	9907      	ldr	r1, [sp, #28]
   171e0:	9608      	str	r6, [sp, #32]
   171e2:	f8d1 b000 	ldr.w	fp, [r1]
   171e6:	f04f 0200 	mov.w	r2, #0
   171ea:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   171ee:	1d0e      	adds	r6, r1, #4
   171f0:	f1bb 0f00 	cmp.w	fp, #0
   171f4:	f000 82e5 	beq.w	177c2 <_vfiprintf_r+0xc0e>
   171f8:	1c67      	adds	r7, r4, #1
   171fa:	f000 82c4 	beq.w	17786 <_vfiprintf_r+0xbd2>
   171fe:	4622      	mov	r2, r4
   17200:	2100      	movs	r1, #0
   17202:	4658      	mov	r0, fp
   17204:	9301      	str	r3, [sp, #4]
   17206:	f7fd f99b 	bl	14540 <memchr>
   1720a:	9b01      	ldr	r3, [sp, #4]
   1720c:	2800      	cmp	r0, #0
   1720e:	f000 82e5 	beq.w	177dc <_vfiprintf_r+0xc28>
   17212:	eba0 020b 	sub.w	r2, r0, fp
   17216:	9205      	str	r2, [sp, #20]
   17218:	9607      	str	r6, [sp, #28]
   1721a:	9302      	str	r3, [sp, #8]
   1721c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   17220:	2400      	movs	r4, #0
   17222:	e619      	b.n	16e58 <_vfiprintf_r+0x2a4>
   17224:	f898 2000 	ldrb.w	r2, [r8]
   17228:	2a2a      	cmp	r2, #42	; 0x2a
   1722a:	f108 0701 	add.w	r7, r8, #1
   1722e:	f000 82e9 	beq.w	17804 <_vfiprintf_r+0xc50>
   17232:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   17236:	2909      	cmp	r1, #9
   17238:	46b8      	mov	r8, r7
   1723a:	f04f 0400 	mov.w	r4, #0
   1723e:	f63f ad2d 	bhi.w	16c9c <_vfiprintf_r+0xe8>
   17242:	f818 2b01 	ldrb.w	r2, [r8], #1
   17246:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1724a:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   1724e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   17252:	2909      	cmp	r1, #9
   17254:	d9f5      	bls.n	17242 <_vfiprintf_r+0x68e>
   17256:	e521      	b.n	16c9c <_vfiprintf_r+0xe8>
   17258:	f043 0320 	orr.w	r3, r3, #32
   1725c:	f898 2000 	ldrb.w	r2, [r8]
   17260:	e51a      	b.n	16c98 <_vfiprintf_r+0xe4>
   17262:	9608      	str	r6, [sp, #32]
   17264:	2800      	cmp	r0, #0
   17266:	f040 82db 	bne.w	17820 <_vfiprintf_r+0xc6c>
   1726a:	2a00      	cmp	r2, #0
   1726c:	f000 80e7 	beq.w	1743e <_vfiprintf_r+0x88a>
   17270:	2101      	movs	r1, #1
   17272:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   17276:	f04f 0200 	mov.w	r2, #0
   1727a:	9101      	str	r1, [sp, #4]
   1727c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   17280:	9105      	str	r1, [sp, #20]
   17282:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   17286:	e77b      	b.n	17180 <_vfiprintf_r+0x5cc>
   17288:	9a07      	ldr	r2, [sp, #28]
   1728a:	6813      	ldr	r3, [r2, #0]
   1728c:	3204      	adds	r2, #4
   1728e:	9207      	str	r2, [sp, #28]
   17290:	9a03      	ldr	r2, [sp, #12]
   17292:	601a      	str	r2, [r3, #0]
   17294:	e4cb      	b.n	16c2e <_vfiprintf_r+0x7a>
   17296:	aa0f      	add	r2, sp, #60	; 0x3c
   17298:	9904      	ldr	r1, [sp, #16]
   1729a:	4620      	mov	r0, r4
   1729c:	f7ff fc40 	bl	16b20 <__sprint_r.part.0>
   172a0:	2800      	cmp	r0, #0
   172a2:	f040 8139 	bne.w	17518 <_vfiprintf_r+0x964>
   172a6:	9910      	ldr	r1, [sp, #64]	; 0x40
   172a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   172aa:	f101 0c01 	add.w	ip, r1, #1
   172ae:	46ce      	mov	lr, r9
   172b0:	e5ff      	b.n	16eb2 <_vfiprintf_r+0x2fe>
   172b2:	9910      	ldr	r1, [sp, #64]	; 0x40
   172b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   172b6:	1c48      	adds	r0, r1, #1
   172b8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   172bc:	2d00      	cmp	r5, #0
   172be:	f43f ae22 	beq.w	16f06 <_vfiprintf_r+0x352>
   172c2:	3201      	adds	r2, #1
   172c4:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   172c8:	2101      	movs	r1, #1
   172ca:	2807      	cmp	r0, #7
   172cc:	9211      	str	r2, [sp, #68]	; 0x44
   172ce:	9010      	str	r0, [sp, #64]	; 0x40
   172d0:	f8ca 5000 	str.w	r5, [sl]
   172d4:	f8ca 1004 	str.w	r1, [sl, #4]
   172d8:	f340 8108 	ble.w	174ec <_vfiprintf_r+0x938>
   172dc:	2a00      	cmp	r2, #0
   172de:	f040 81bc 	bne.w	1765a <_vfiprintf_r+0xaa6>
   172e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   172e4:	2b00      	cmp	r3, #0
   172e6:	f43f ae1f 	beq.w	16f28 <_vfiprintf_r+0x374>
   172ea:	ab0e      	add	r3, sp, #56	; 0x38
   172ec:	2202      	movs	r2, #2
   172ee:	4608      	mov	r0, r1
   172f0:	931c      	str	r3, [sp, #112]	; 0x70
   172f2:	921d      	str	r2, [sp, #116]	; 0x74
   172f4:	46ca      	mov	sl, r9
   172f6:	4601      	mov	r1, r0
   172f8:	f10a 0a08 	add.w	sl, sl, #8
   172fc:	3001      	adds	r0, #1
   172fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17300:	2b80      	cmp	r3, #128	; 0x80
   17302:	f43f ae19 	beq.w	16f38 <_vfiprintf_r+0x384>
   17306:	9b05      	ldr	r3, [sp, #20]
   17308:	1ae4      	subs	r4, r4, r3
   1730a:	2c00      	cmp	r4, #0
   1730c:	dd2e      	ble.n	1736c <_vfiprintf_r+0x7b8>
   1730e:	2c10      	cmp	r4, #16
   17310:	4db3      	ldr	r5, [pc, #716]	; (175e0 <_vfiprintf_r+0xa2c>)
   17312:	dd1e      	ble.n	17352 <_vfiprintf_r+0x79e>
   17314:	46d6      	mov	lr, sl
   17316:	2610      	movs	r6, #16
   17318:	9f06      	ldr	r7, [sp, #24]
   1731a:	f8dd a010 	ldr.w	sl, [sp, #16]
   1731e:	e006      	b.n	1732e <_vfiprintf_r+0x77a>
   17320:	1c88      	adds	r0, r1, #2
   17322:	f10e 0e08 	add.w	lr, lr, #8
   17326:	4619      	mov	r1, r3
   17328:	3c10      	subs	r4, #16
   1732a:	2c10      	cmp	r4, #16
   1732c:	dd10      	ble.n	17350 <_vfiprintf_r+0x79c>
   1732e:	1c4b      	adds	r3, r1, #1
   17330:	3210      	adds	r2, #16
   17332:	2b07      	cmp	r3, #7
   17334:	9211      	str	r2, [sp, #68]	; 0x44
   17336:	e88e 0060 	stmia.w	lr, {r5, r6}
   1733a:	9310      	str	r3, [sp, #64]	; 0x40
   1733c:	ddf0      	ble.n	17320 <_vfiprintf_r+0x76c>
   1733e:	2a00      	cmp	r2, #0
   17340:	d165      	bne.n	1740e <_vfiprintf_r+0x85a>
   17342:	3c10      	subs	r4, #16
   17344:	2c10      	cmp	r4, #16
   17346:	f04f 0001 	mov.w	r0, #1
   1734a:	4611      	mov	r1, r2
   1734c:	46ce      	mov	lr, r9
   1734e:	dcee      	bgt.n	1732e <_vfiprintf_r+0x77a>
   17350:	46f2      	mov	sl, lr
   17352:	4422      	add	r2, r4
   17354:	2807      	cmp	r0, #7
   17356:	9211      	str	r2, [sp, #68]	; 0x44
   17358:	f8ca 5000 	str.w	r5, [sl]
   1735c:	f8ca 4004 	str.w	r4, [sl, #4]
   17360:	9010      	str	r0, [sp, #64]	; 0x40
   17362:	f300 8085 	bgt.w	17470 <_vfiprintf_r+0x8bc>
   17366:	f10a 0a08 	add.w	sl, sl, #8
   1736a:	3001      	adds	r0, #1
   1736c:	9905      	ldr	r1, [sp, #20]
   1736e:	f8ca b000 	str.w	fp, [sl]
   17372:	440a      	add	r2, r1
   17374:	2807      	cmp	r0, #7
   17376:	9211      	str	r2, [sp, #68]	; 0x44
   17378:	f8ca 1004 	str.w	r1, [sl, #4]
   1737c:	9010      	str	r0, [sp, #64]	; 0x40
   1737e:	f340 8082 	ble.w	17486 <_vfiprintf_r+0x8d2>
   17382:	2a00      	cmp	r2, #0
   17384:	f040 8118 	bne.w	175b8 <_vfiprintf_r+0xa04>
   17388:	9b02      	ldr	r3, [sp, #8]
   1738a:	9210      	str	r2, [sp, #64]	; 0x40
   1738c:	0758      	lsls	r0, r3, #29
   1738e:	d535      	bpl.n	173fc <_vfiprintf_r+0x848>
   17390:	9b08      	ldr	r3, [sp, #32]
   17392:	9901      	ldr	r1, [sp, #4]
   17394:	1a5c      	subs	r4, r3, r1
   17396:	2c00      	cmp	r4, #0
   17398:	f340 80e7 	ble.w	1756a <_vfiprintf_r+0x9b6>
   1739c:	46ca      	mov	sl, r9
   1739e:	2c10      	cmp	r4, #16
   173a0:	f340 8218 	ble.w	177d4 <_vfiprintf_r+0xc20>
   173a4:	9910      	ldr	r1, [sp, #64]	; 0x40
   173a6:	4e8f      	ldr	r6, [pc, #572]	; (175e4 <_vfiprintf_r+0xa30>)
   173a8:	9f06      	ldr	r7, [sp, #24]
   173aa:	f8dd b010 	ldr.w	fp, [sp, #16]
   173ae:	2510      	movs	r5, #16
   173b0:	e006      	b.n	173c0 <_vfiprintf_r+0x80c>
   173b2:	1c88      	adds	r0, r1, #2
   173b4:	f10a 0a08 	add.w	sl, sl, #8
   173b8:	4619      	mov	r1, r3
   173ba:	3c10      	subs	r4, #16
   173bc:	2c10      	cmp	r4, #16
   173be:	dd11      	ble.n	173e4 <_vfiprintf_r+0x830>
   173c0:	1c4b      	adds	r3, r1, #1
   173c2:	3210      	adds	r2, #16
   173c4:	2b07      	cmp	r3, #7
   173c6:	9211      	str	r2, [sp, #68]	; 0x44
   173c8:	f8ca 6000 	str.w	r6, [sl]
   173cc:	f8ca 5004 	str.w	r5, [sl, #4]
   173d0:	9310      	str	r3, [sp, #64]	; 0x40
   173d2:	ddee      	ble.n	173b2 <_vfiprintf_r+0x7fe>
   173d4:	bb42      	cbnz	r2, 17428 <_vfiprintf_r+0x874>
   173d6:	3c10      	subs	r4, #16
   173d8:	2c10      	cmp	r4, #16
   173da:	f04f 0001 	mov.w	r0, #1
   173de:	4611      	mov	r1, r2
   173e0:	46ca      	mov	sl, r9
   173e2:	dced      	bgt.n	173c0 <_vfiprintf_r+0x80c>
   173e4:	4422      	add	r2, r4
   173e6:	2807      	cmp	r0, #7
   173e8:	9211      	str	r2, [sp, #68]	; 0x44
   173ea:	f8ca 6000 	str.w	r6, [sl]
   173ee:	f8ca 4004 	str.w	r4, [sl, #4]
   173f2:	9010      	str	r0, [sp, #64]	; 0x40
   173f4:	dd51      	ble.n	1749a <_vfiprintf_r+0x8e6>
   173f6:	2a00      	cmp	r2, #0
   173f8:	f040 819b 	bne.w	17732 <_vfiprintf_r+0xb7e>
   173fc:	9b03      	ldr	r3, [sp, #12]
   173fe:	9a08      	ldr	r2, [sp, #32]
   17400:	9901      	ldr	r1, [sp, #4]
   17402:	428a      	cmp	r2, r1
   17404:	bfac      	ite	ge
   17406:	189b      	addge	r3, r3, r2
   17408:	185b      	addlt	r3, r3, r1
   1740a:	9303      	str	r3, [sp, #12]
   1740c:	e04e      	b.n	174ac <_vfiprintf_r+0x8f8>
   1740e:	aa0f      	add	r2, sp, #60	; 0x3c
   17410:	4651      	mov	r1, sl
   17412:	4638      	mov	r0, r7
   17414:	f7ff fb84 	bl	16b20 <__sprint_r.part.0>
   17418:	2800      	cmp	r0, #0
   1741a:	f040 813f 	bne.w	1769c <_vfiprintf_r+0xae8>
   1741e:	9910      	ldr	r1, [sp, #64]	; 0x40
   17420:	9a11      	ldr	r2, [sp, #68]	; 0x44
   17422:	1c48      	adds	r0, r1, #1
   17424:	46ce      	mov	lr, r9
   17426:	e77f      	b.n	17328 <_vfiprintf_r+0x774>
   17428:	aa0f      	add	r2, sp, #60	; 0x3c
   1742a:	4659      	mov	r1, fp
   1742c:	4638      	mov	r0, r7
   1742e:	f7ff fb77 	bl	16b20 <__sprint_r.part.0>
   17432:	b960      	cbnz	r0, 1744e <_vfiprintf_r+0x89a>
   17434:	9910      	ldr	r1, [sp, #64]	; 0x40
   17436:	9a11      	ldr	r2, [sp, #68]	; 0x44
   17438:	1c48      	adds	r0, r1, #1
   1743a:	46ca      	mov	sl, r9
   1743c:	e7bd      	b.n	173ba <_vfiprintf_r+0x806>
   1743e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17440:	f8dd b010 	ldr.w	fp, [sp, #16]
   17444:	2b00      	cmp	r3, #0
   17446:	f040 81d4 	bne.w	177f2 <_vfiprintf_r+0xc3e>
   1744a:	2300      	movs	r3, #0
   1744c:	9310      	str	r3, [sp, #64]	; 0x40
   1744e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   17452:	f013 0f01 	tst.w	r3, #1
   17456:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   1745a:	d102      	bne.n	17462 <_vfiprintf_r+0x8ae>
   1745c:	059a      	lsls	r2, r3, #22
   1745e:	f140 80de 	bpl.w	1761e <_vfiprintf_r+0xa6a>
   17462:	065b      	lsls	r3, r3, #25
   17464:	f53f acb2 	bmi.w	16dcc <_vfiprintf_r+0x218>
   17468:	9803      	ldr	r0, [sp, #12]
   1746a:	b02d      	add	sp, #180	; 0xb4
   1746c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17470:	2a00      	cmp	r2, #0
   17472:	f040 8106 	bne.w	17682 <_vfiprintf_r+0xace>
   17476:	9a05      	ldr	r2, [sp, #20]
   17478:	921d      	str	r2, [sp, #116]	; 0x74
   1747a:	2301      	movs	r3, #1
   1747c:	9211      	str	r2, [sp, #68]	; 0x44
   1747e:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   17482:	9310      	str	r3, [sp, #64]	; 0x40
   17484:	46ca      	mov	sl, r9
   17486:	f10a 0a08 	add.w	sl, sl, #8
   1748a:	9b02      	ldr	r3, [sp, #8]
   1748c:	0759      	lsls	r1, r3, #29
   1748e:	d504      	bpl.n	1749a <_vfiprintf_r+0x8e6>
   17490:	9b08      	ldr	r3, [sp, #32]
   17492:	9901      	ldr	r1, [sp, #4]
   17494:	1a5c      	subs	r4, r3, r1
   17496:	2c00      	cmp	r4, #0
   17498:	dc81      	bgt.n	1739e <_vfiprintf_r+0x7ea>
   1749a:	9b03      	ldr	r3, [sp, #12]
   1749c:	9908      	ldr	r1, [sp, #32]
   1749e:	9801      	ldr	r0, [sp, #4]
   174a0:	4281      	cmp	r1, r0
   174a2:	bfac      	ite	ge
   174a4:	185b      	addge	r3, r3, r1
   174a6:	181b      	addlt	r3, r3, r0
   174a8:	9303      	str	r3, [sp, #12]
   174aa:	bb72      	cbnz	r2, 1750a <_vfiprintf_r+0x956>
   174ac:	2300      	movs	r3, #0
   174ae:	9310      	str	r3, [sp, #64]	; 0x40
   174b0:	46ca      	mov	sl, r9
   174b2:	f7ff bbbc 	b.w	16c2e <_vfiprintf_r+0x7a>
   174b6:	aa0f      	add	r2, sp, #60	; 0x3c
   174b8:	9904      	ldr	r1, [sp, #16]
   174ba:	4620      	mov	r0, r4
   174bc:	f7ff fb30 	bl	16b20 <__sprint_r.part.0>
   174c0:	bb50      	cbnz	r0, 17518 <_vfiprintf_r+0x964>
   174c2:	9910      	ldr	r1, [sp, #64]	; 0x40
   174c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   174c6:	f101 0e01 	add.w	lr, r1, #1
   174ca:	46cc      	mov	ip, r9
   174cc:	e548      	b.n	16f60 <_vfiprintf_r+0x3ac>
   174ce:	2a00      	cmp	r2, #0
   174d0:	f040 8140 	bne.w	17754 <_vfiprintf_r+0xba0>
   174d4:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   174d8:	2900      	cmp	r1, #0
   174da:	f000 811b 	beq.w	17714 <_vfiprintf_r+0xb60>
   174de:	2201      	movs	r2, #1
   174e0:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   174e4:	4610      	mov	r0, r2
   174e6:	921d      	str	r2, [sp, #116]	; 0x74
   174e8:	911c      	str	r1, [sp, #112]	; 0x70
   174ea:	46ca      	mov	sl, r9
   174ec:	4601      	mov	r1, r0
   174ee:	f10a 0a08 	add.w	sl, sl, #8
   174f2:	3001      	adds	r0, #1
   174f4:	e507      	b.n	16f06 <_vfiprintf_r+0x352>
   174f6:	9b02      	ldr	r3, [sp, #8]
   174f8:	2a01      	cmp	r2, #1
   174fa:	f000 8098 	beq.w	1762e <_vfiprintf_r+0xa7a>
   174fe:	2a02      	cmp	r2, #2
   17500:	d10d      	bne.n	1751e <_vfiprintf_r+0x96a>
   17502:	9302      	str	r3, [sp, #8]
   17504:	2600      	movs	r6, #0
   17506:	2700      	movs	r7, #0
   17508:	e5b0      	b.n	1706c <_vfiprintf_r+0x4b8>
   1750a:	aa0f      	add	r2, sp, #60	; 0x3c
   1750c:	9904      	ldr	r1, [sp, #16]
   1750e:	9806      	ldr	r0, [sp, #24]
   17510:	f7ff fb06 	bl	16b20 <__sprint_r.part.0>
   17514:	2800      	cmp	r0, #0
   17516:	d0c9      	beq.n	174ac <_vfiprintf_r+0x8f8>
   17518:	f8dd b010 	ldr.w	fp, [sp, #16]
   1751c:	e797      	b.n	1744e <_vfiprintf_r+0x89a>
   1751e:	9302      	str	r3, [sp, #8]
   17520:	2600      	movs	r6, #0
   17522:	2700      	movs	r7, #0
   17524:	4649      	mov	r1, r9
   17526:	e000      	b.n	1752a <_vfiprintf_r+0x976>
   17528:	4659      	mov	r1, fp
   1752a:	08f2      	lsrs	r2, r6, #3
   1752c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   17530:	08f8      	lsrs	r0, r7, #3
   17532:	f006 0307 	and.w	r3, r6, #7
   17536:	4607      	mov	r7, r0
   17538:	4616      	mov	r6, r2
   1753a:	3330      	adds	r3, #48	; 0x30
   1753c:	ea56 0207 	orrs.w	r2, r6, r7
   17540:	f801 3c01 	strb.w	r3, [r1, #-1]
   17544:	f101 3bff 	add.w	fp, r1, #4294967295
   17548:	d1ee      	bne.n	17528 <_vfiprintf_r+0x974>
   1754a:	9a02      	ldr	r2, [sp, #8]
   1754c:	07d6      	lsls	r6, r2, #31
   1754e:	f57f ad9d 	bpl.w	1708c <_vfiprintf_r+0x4d8>
   17552:	2b30      	cmp	r3, #48	; 0x30
   17554:	f43f ad9a 	beq.w	1708c <_vfiprintf_r+0x4d8>
   17558:	3902      	subs	r1, #2
   1755a:	2330      	movs	r3, #48	; 0x30
   1755c:	f80b 3c01 	strb.w	r3, [fp, #-1]
   17560:	eba9 0301 	sub.w	r3, r9, r1
   17564:	9305      	str	r3, [sp, #20]
   17566:	468b      	mov	fp, r1
   17568:	e476      	b.n	16e58 <_vfiprintf_r+0x2a4>
   1756a:	9b03      	ldr	r3, [sp, #12]
   1756c:	9a08      	ldr	r2, [sp, #32]
   1756e:	428a      	cmp	r2, r1
   17570:	bfac      	ite	ge
   17572:	189b      	addge	r3, r3, r2
   17574:	185b      	addlt	r3, r3, r1
   17576:	9303      	str	r3, [sp, #12]
   17578:	e798      	b.n	174ac <_vfiprintf_r+0x8f8>
   1757a:	2202      	movs	r2, #2
   1757c:	e44d      	b.n	16e1a <_vfiprintf_r+0x266>
   1757e:	2f00      	cmp	r7, #0
   17580:	bf08      	it	eq
   17582:	2e0a      	cmpeq	r6, #10
   17584:	d352      	bcc.n	1762c <_vfiprintf_r+0xa78>
   17586:	46cb      	mov	fp, r9
   17588:	4630      	mov	r0, r6
   1758a:	4639      	mov	r1, r7
   1758c:	220a      	movs	r2, #10
   1758e:	2300      	movs	r3, #0
   17590:	f7fb f852 	bl	12638 <__aeabi_uldivmod>
   17594:	3230      	adds	r2, #48	; 0x30
   17596:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   1759a:	4630      	mov	r0, r6
   1759c:	4639      	mov	r1, r7
   1759e:	2300      	movs	r3, #0
   175a0:	220a      	movs	r2, #10
   175a2:	f7fb f849 	bl	12638 <__aeabi_uldivmod>
   175a6:	4606      	mov	r6, r0
   175a8:	460f      	mov	r7, r1
   175aa:	ea56 0307 	orrs.w	r3, r6, r7
   175ae:	d1eb      	bne.n	17588 <_vfiprintf_r+0x9d4>
   175b0:	e56c      	b.n	1708c <_vfiprintf_r+0x4d8>
   175b2:	9405      	str	r4, [sp, #20]
   175b4:	46cb      	mov	fp, r9
   175b6:	e44f      	b.n	16e58 <_vfiprintf_r+0x2a4>
   175b8:	aa0f      	add	r2, sp, #60	; 0x3c
   175ba:	9904      	ldr	r1, [sp, #16]
   175bc:	9806      	ldr	r0, [sp, #24]
   175be:	f7ff faaf 	bl	16b20 <__sprint_r.part.0>
   175c2:	2800      	cmp	r0, #0
   175c4:	d1a8      	bne.n	17518 <_vfiprintf_r+0x964>
   175c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   175c8:	46ca      	mov	sl, r9
   175ca:	e75e      	b.n	1748a <_vfiprintf_r+0x8d6>
   175cc:	aa0f      	add	r2, sp, #60	; 0x3c
   175ce:	9904      	ldr	r1, [sp, #16]
   175d0:	9806      	ldr	r0, [sp, #24]
   175d2:	f7ff faa5 	bl	16b20 <__sprint_r.part.0>
   175d6:	2800      	cmp	r0, #0
   175d8:	d19e      	bne.n	17518 <_vfiprintf_r+0x964>
   175da:	46ca      	mov	sl, r9
   175dc:	f7ff bbc0 	b.w	16d60 <_vfiprintf_r+0x1ac>
   175e0:	00023cf8 	.word	0x00023cf8
   175e4:	00023ce8 	.word	0x00023ce8
   175e8:	3104      	adds	r1, #4
   175ea:	6816      	ldr	r6, [r2, #0]
   175ec:	9107      	str	r1, [sp, #28]
   175ee:	2201      	movs	r2, #1
   175f0:	2700      	movs	r7, #0
   175f2:	e412      	b.n	16e1a <_vfiprintf_r+0x266>
   175f4:	9807      	ldr	r0, [sp, #28]
   175f6:	4601      	mov	r1, r0
   175f8:	3104      	adds	r1, #4
   175fa:	6806      	ldr	r6, [r0, #0]
   175fc:	9107      	str	r1, [sp, #28]
   175fe:	2700      	movs	r7, #0
   17600:	e40b      	b.n	16e1a <_vfiprintf_r+0x266>
   17602:	680e      	ldr	r6, [r1, #0]
   17604:	3104      	adds	r1, #4
   17606:	9107      	str	r1, [sp, #28]
   17608:	2700      	movs	r7, #0
   1760a:	e591      	b.n	17130 <_vfiprintf_r+0x57c>
   1760c:	9907      	ldr	r1, [sp, #28]
   1760e:	680e      	ldr	r6, [r1, #0]
   17610:	460a      	mov	r2, r1
   17612:	17f7      	asrs	r7, r6, #31
   17614:	3204      	adds	r2, #4
   17616:	9207      	str	r2, [sp, #28]
   17618:	4630      	mov	r0, r6
   1761a:	4639      	mov	r1, r7
   1761c:	e50f      	b.n	1703e <_vfiprintf_r+0x48a>
   1761e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   17622:	f7fc fc37 	bl	13e94 <__retarget_lock_release_recursive>
   17626:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   1762a:	e71a      	b.n	17462 <_vfiprintf_r+0x8ae>
   1762c:	9b02      	ldr	r3, [sp, #8]
   1762e:	9302      	str	r3, [sp, #8]
   17630:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   17634:	3630      	adds	r6, #48	; 0x30
   17636:	2301      	movs	r3, #1
   17638:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   1763c:	9305      	str	r3, [sp, #20]
   1763e:	e40b      	b.n	16e58 <_vfiprintf_r+0x2a4>
   17640:	aa0f      	add	r2, sp, #60	; 0x3c
   17642:	9904      	ldr	r1, [sp, #16]
   17644:	9806      	ldr	r0, [sp, #24]
   17646:	f7ff fa6b 	bl	16b20 <__sprint_r.part.0>
   1764a:	2800      	cmp	r0, #0
   1764c:	f47f af64 	bne.w	17518 <_vfiprintf_r+0x964>
   17650:	9910      	ldr	r1, [sp, #64]	; 0x40
   17652:	9a11      	ldr	r2, [sp, #68]	; 0x44
   17654:	1c48      	adds	r0, r1, #1
   17656:	46ca      	mov	sl, r9
   17658:	e651      	b.n	172fe <_vfiprintf_r+0x74a>
   1765a:	aa0f      	add	r2, sp, #60	; 0x3c
   1765c:	9904      	ldr	r1, [sp, #16]
   1765e:	9806      	ldr	r0, [sp, #24]
   17660:	f7ff fa5e 	bl	16b20 <__sprint_r.part.0>
   17664:	2800      	cmp	r0, #0
   17666:	f47f af57 	bne.w	17518 <_vfiprintf_r+0x964>
   1766a:	9910      	ldr	r1, [sp, #64]	; 0x40
   1766c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1766e:	1c48      	adds	r0, r1, #1
   17670:	46ca      	mov	sl, r9
   17672:	e448      	b.n	16f06 <_vfiprintf_r+0x352>
   17674:	2a00      	cmp	r2, #0
   17676:	f040 8091 	bne.w	1779c <_vfiprintf_r+0xbe8>
   1767a:	2001      	movs	r0, #1
   1767c:	4611      	mov	r1, r2
   1767e:	46ca      	mov	sl, r9
   17680:	e641      	b.n	17306 <_vfiprintf_r+0x752>
   17682:	aa0f      	add	r2, sp, #60	; 0x3c
   17684:	9904      	ldr	r1, [sp, #16]
   17686:	9806      	ldr	r0, [sp, #24]
   17688:	f7ff fa4a 	bl	16b20 <__sprint_r.part.0>
   1768c:	2800      	cmp	r0, #0
   1768e:	f47f af43 	bne.w	17518 <_vfiprintf_r+0x964>
   17692:	9810      	ldr	r0, [sp, #64]	; 0x40
   17694:	9a11      	ldr	r2, [sp, #68]	; 0x44
   17696:	3001      	adds	r0, #1
   17698:	46ca      	mov	sl, r9
   1769a:	e667      	b.n	1736c <_vfiprintf_r+0x7b8>
   1769c:	46d3      	mov	fp, sl
   1769e:	e6d6      	b.n	1744e <_vfiprintf_r+0x89a>
   176a0:	9e07      	ldr	r6, [sp, #28]
   176a2:	3607      	adds	r6, #7
   176a4:	f026 0207 	bic.w	r2, r6, #7
   176a8:	f102 0108 	add.w	r1, r2, #8
   176ac:	e9d2 6700 	ldrd	r6, r7, [r2]
   176b0:	9107      	str	r1, [sp, #28]
   176b2:	2201      	movs	r2, #1
   176b4:	f7ff bbb1 	b.w	16e1a <_vfiprintf_r+0x266>
   176b8:	9e07      	ldr	r6, [sp, #28]
   176ba:	3607      	adds	r6, #7
   176bc:	f026 0607 	bic.w	r6, r6, #7
   176c0:	e9d6 0100 	ldrd	r0, r1, [r6]
   176c4:	f106 0208 	add.w	r2, r6, #8
   176c8:	9207      	str	r2, [sp, #28]
   176ca:	4606      	mov	r6, r0
   176cc:	460f      	mov	r7, r1
   176ce:	e4b6      	b.n	1703e <_vfiprintf_r+0x48a>
   176d0:	9e07      	ldr	r6, [sp, #28]
   176d2:	3607      	adds	r6, #7
   176d4:	f026 0207 	bic.w	r2, r6, #7
   176d8:	f102 0108 	add.w	r1, r2, #8
   176dc:	e9d2 6700 	ldrd	r6, r7, [r2]
   176e0:	9107      	str	r1, [sp, #28]
   176e2:	2200      	movs	r2, #0
   176e4:	f7ff bb99 	b.w	16e1a <_vfiprintf_r+0x266>
   176e8:	9e07      	ldr	r6, [sp, #28]
   176ea:	3607      	adds	r6, #7
   176ec:	f026 0107 	bic.w	r1, r6, #7
   176f0:	f101 0008 	add.w	r0, r1, #8
   176f4:	9007      	str	r0, [sp, #28]
   176f6:	e9d1 6700 	ldrd	r6, r7, [r1]
   176fa:	e519      	b.n	17130 <_vfiprintf_r+0x57c>
   176fc:	46cb      	mov	fp, r9
   176fe:	f7ff bbab 	b.w	16e58 <_vfiprintf_r+0x2a4>
   17702:	252d      	movs	r5, #45	; 0x2d
   17704:	4276      	negs	r6, r6
   17706:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   1770a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1770e:	2201      	movs	r2, #1
   17710:	f7ff bb88 	b.w	16e24 <_vfiprintf_r+0x270>
   17714:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17716:	b9b3      	cbnz	r3, 17746 <_vfiprintf_r+0xb92>
   17718:	4611      	mov	r1, r2
   1771a:	2001      	movs	r0, #1
   1771c:	46ca      	mov	sl, r9
   1771e:	e5f2      	b.n	17306 <_vfiprintf_r+0x752>
   17720:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   17724:	f7fc fbb6 	bl	13e94 <__retarget_lock_release_recursive>
   17728:	f04f 33ff 	mov.w	r3, #4294967295
   1772c:	9303      	str	r3, [sp, #12]
   1772e:	f7ff bb50 	b.w	16dd2 <_vfiprintf_r+0x21e>
   17732:	aa0f      	add	r2, sp, #60	; 0x3c
   17734:	9904      	ldr	r1, [sp, #16]
   17736:	9806      	ldr	r0, [sp, #24]
   17738:	f7ff f9f2 	bl	16b20 <__sprint_r.part.0>
   1773c:	2800      	cmp	r0, #0
   1773e:	f47f aeeb 	bne.w	17518 <_vfiprintf_r+0x964>
   17742:	9a11      	ldr	r2, [sp, #68]	; 0x44
   17744:	e6a9      	b.n	1749a <_vfiprintf_r+0x8e6>
   17746:	ab0e      	add	r3, sp, #56	; 0x38
   17748:	2202      	movs	r2, #2
   1774a:	931c      	str	r3, [sp, #112]	; 0x70
   1774c:	921d      	str	r2, [sp, #116]	; 0x74
   1774e:	2001      	movs	r0, #1
   17750:	46ca      	mov	sl, r9
   17752:	e5d0      	b.n	172f6 <_vfiprintf_r+0x742>
   17754:	aa0f      	add	r2, sp, #60	; 0x3c
   17756:	9904      	ldr	r1, [sp, #16]
   17758:	9806      	ldr	r0, [sp, #24]
   1775a:	f7ff f9e1 	bl	16b20 <__sprint_r.part.0>
   1775e:	2800      	cmp	r0, #0
   17760:	f47f aeda 	bne.w	17518 <_vfiprintf_r+0x964>
   17764:	9910      	ldr	r1, [sp, #64]	; 0x40
   17766:	9a11      	ldr	r2, [sp, #68]	; 0x44
   17768:	1c48      	adds	r0, r1, #1
   1776a:	46ca      	mov	sl, r9
   1776c:	e5a4      	b.n	172b8 <_vfiprintf_r+0x704>
   1776e:	9a07      	ldr	r2, [sp, #28]
   17770:	9903      	ldr	r1, [sp, #12]
   17772:	6813      	ldr	r3, [r2, #0]
   17774:	17cd      	asrs	r5, r1, #31
   17776:	4608      	mov	r0, r1
   17778:	3204      	adds	r2, #4
   1777a:	4629      	mov	r1, r5
   1777c:	9207      	str	r2, [sp, #28]
   1777e:	e9c3 0100 	strd	r0, r1, [r3]
   17782:	f7ff ba54 	b.w	16c2e <_vfiprintf_r+0x7a>
   17786:	4658      	mov	r0, fp
   17788:	9607      	str	r6, [sp, #28]
   1778a:	9302      	str	r3, [sp, #8]
   1778c:	f7fd fed8 	bl	15540 <strlen>
   17790:	2400      	movs	r4, #0
   17792:	9005      	str	r0, [sp, #20]
   17794:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   17798:	f7ff bb5e 	b.w	16e58 <_vfiprintf_r+0x2a4>
   1779c:	aa0f      	add	r2, sp, #60	; 0x3c
   1779e:	9904      	ldr	r1, [sp, #16]
   177a0:	9806      	ldr	r0, [sp, #24]
   177a2:	f7ff f9bd 	bl	16b20 <__sprint_r.part.0>
   177a6:	2800      	cmp	r0, #0
   177a8:	f47f aeb6 	bne.w	17518 <_vfiprintf_r+0x964>
   177ac:	9910      	ldr	r1, [sp, #64]	; 0x40
   177ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
   177b0:	1c48      	adds	r0, r1, #1
   177b2:	46ca      	mov	sl, r9
   177b4:	e5a7      	b.n	17306 <_vfiprintf_r+0x752>
   177b6:	9910      	ldr	r1, [sp, #64]	; 0x40
   177b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   177ba:	4e20      	ldr	r6, [pc, #128]	; (1783c <_vfiprintf_r+0xc88>)
   177bc:	3101      	adds	r1, #1
   177be:	f7ff bb90 	b.w	16ee2 <_vfiprintf_r+0x32e>
   177c2:	2c06      	cmp	r4, #6
   177c4:	bf28      	it	cs
   177c6:	2406      	movcs	r4, #6
   177c8:	9405      	str	r4, [sp, #20]
   177ca:	9607      	str	r6, [sp, #28]
   177cc:	9401      	str	r4, [sp, #4]
   177ce:	f8df b070 	ldr.w	fp, [pc, #112]	; 17840 <_vfiprintf_r+0xc8c>
   177d2:	e4d5      	b.n	17180 <_vfiprintf_r+0x5cc>
   177d4:	9810      	ldr	r0, [sp, #64]	; 0x40
   177d6:	4e19      	ldr	r6, [pc, #100]	; (1783c <_vfiprintf_r+0xc88>)
   177d8:	3001      	adds	r0, #1
   177da:	e603      	b.n	173e4 <_vfiprintf_r+0x830>
   177dc:	9405      	str	r4, [sp, #20]
   177de:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   177e2:	9607      	str	r6, [sp, #28]
   177e4:	9302      	str	r3, [sp, #8]
   177e6:	4604      	mov	r4, r0
   177e8:	f7ff bb36 	b.w	16e58 <_vfiprintf_r+0x2a4>
   177ec:	4686      	mov	lr, r0
   177ee:	f7ff bbce 	b.w	16f8e <_vfiprintf_r+0x3da>
   177f2:	9806      	ldr	r0, [sp, #24]
   177f4:	aa0f      	add	r2, sp, #60	; 0x3c
   177f6:	4659      	mov	r1, fp
   177f8:	f7ff f992 	bl	16b20 <__sprint_r.part.0>
   177fc:	2800      	cmp	r0, #0
   177fe:	f43f ae24 	beq.w	1744a <_vfiprintf_r+0x896>
   17802:	e624      	b.n	1744e <_vfiprintf_r+0x89a>
   17804:	9907      	ldr	r1, [sp, #28]
   17806:	f898 2001 	ldrb.w	r2, [r8, #1]
   1780a:	680c      	ldr	r4, [r1, #0]
   1780c:	3104      	adds	r1, #4
   1780e:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   17812:	46b8      	mov	r8, r7
   17814:	9107      	str	r1, [sp, #28]
   17816:	f7ff ba3f 	b.w	16c98 <_vfiprintf_r+0xe4>
   1781a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1781e:	e43c      	b.n	1709a <_vfiprintf_r+0x4e6>
   17820:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   17824:	e521      	b.n	1726a <_vfiprintf_r+0x6b6>
   17826:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1782a:	f7ff bbf4 	b.w	17016 <_vfiprintf_r+0x462>
   1782e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   17832:	e491      	b.n	17158 <_vfiprintf_r+0x5a4>
   17834:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   17838:	e469      	b.n	1710e <_vfiprintf_r+0x55a>
   1783a:	bf00      	nop
   1783c:	00023ce8 	.word	0x00023ce8
   17840:	00023cc0 	.word	0x00023cc0

00017844 <__sbprintf>:
   17844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17848:	460c      	mov	r4, r1
   1784a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   1784e:	8989      	ldrh	r1, [r1, #12]
   17850:	6e66      	ldr	r6, [r4, #100]	; 0x64
   17852:	89e5      	ldrh	r5, [r4, #14]
   17854:	9619      	str	r6, [sp, #100]	; 0x64
   17856:	f021 0102 	bic.w	r1, r1, #2
   1785a:	4606      	mov	r6, r0
   1785c:	69e0      	ldr	r0, [r4, #28]
   1785e:	f8ad 100c 	strh.w	r1, [sp, #12]
   17862:	4617      	mov	r7, r2
   17864:	f44f 6180 	mov.w	r1, #1024	; 0x400
   17868:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1786a:	f8ad 500e 	strh.w	r5, [sp, #14]
   1786e:	4698      	mov	r8, r3
   17870:	ad1a      	add	r5, sp, #104	; 0x68
   17872:	2300      	movs	r3, #0
   17874:	9007      	str	r0, [sp, #28]
   17876:	a816      	add	r0, sp, #88	; 0x58
   17878:	9209      	str	r2, [sp, #36]	; 0x24
   1787a:	9306      	str	r3, [sp, #24]
   1787c:	9500      	str	r5, [sp, #0]
   1787e:	9504      	str	r5, [sp, #16]
   17880:	9102      	str	r1, [sp, #8]
   17882:	9105      	str	r1, [sp, #20]
   17884:	f7fc fb00 	bl	13e88 <__retarget_lock_init_recursive>
   17888:	4643      	mov	r3, r8
   1788a:	463a      	mov	r2, r7
   1788c:	4669      	mov	r1, sp
   1788e:	4630      	mov	r0, r6
   17890:	f7ff f990 	bl	16bb4 <_vfiprintf_r>
   17894:	1e05      	subs	r5, r0, #0
   17896:	db07      	blt.n	178a8 <__sbprintf+0x64>
   17898:	4630      	mov	r0, r6
   1789a:	4669      	mov	r1, sp
   1789c:	f002 fcee 	bl	1a27c <_fflush_r>
   178a0:	2800      	cmp	r0, #0
   178a2:	bf18      	it	ne
   178a4:	f04f 35ff 	movne.w	r5, #4294967295
   178a8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   178ac:	065b      	lsls	r3, r3, #25
   178ae:	d503      	bpl.n	178b8 <__sbprintf+0x74>
   178b0:	89a3      	ldrh	r3, [r4, #12]
   178b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   178b6:	81a3      	strh	r3, [r4, #12]
   178b8:	9816      	ldr	r0, [sp, #88]	; 0x58
   178ba:	f7fc fae7 	bl	13e8c <__retarget_lock_close_recursive>
   178be:	4628      	mov	r0, r5
   178c0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   178c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000178c8 <_vfprintf_r>:
   178c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178cc:	b0c1      	sub	sp, #260	; 0x104
   178ce:	461d      	mov	r5, r3
   178d0:	468a      	mov	sl, r1
   178d2:	4691      	mov	r9, r2
   178d4:	4604      	mov	r4, r0
   178d6:	9008      	str	r0, [sp, #32]
   178d8:	f002 ff70 	bl	1a7bc <_localeconv_r>
   178dc:	6803      	ldr	r3, [r0, #0]
   178de:	9315      	str	r3, [sp, #84]	; 0x54
   178e0:	4618      	mov	r0, r3
   178e2:	f7fd fe2d 	bl	15540 <strlen>
   178e6:	950e      	str	r5, [sp, #56]	; 0x38
   178e8:	9014      	str	r0, [sp, #80]	; 0x50
   178ea:	b11c      	cbz	r4, 178f4 <_vfprintf_r+0x2c>
   178ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   178ee:	2b00      	cmp	r3, #0
   178f0:	f000 825f 	beq.w	17db2 <_vfprintf_r+0x4ea>
   178f4:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   178f8:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
   178fc:	f013 0f01 	tst.w	r3, #1
   17900:	b293      	uxth	r3, r2
   17902:	d102      	bne.n	1790a <_vfprintf_r+0x42>
   17904:	0599      	lsls	r1, r3, #22
   17906:	f140 8275 	bpl.w	17df4 <_vfprintf_r+0x52c>
   1790a:	049f      	lsls	r7, r3, #18
   1790c:	d40a      	bmi.n	17924 <_vfprintf_r+0x5c>
   1790e:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
   17912:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
   17916:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   1791a:	f8aa 300c 	strh.w	r3, [sl, #12]
   1791e:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
   17922:	b29b      	uxth	r3, r3
   17924:	071e      	lsls	r6, r3, #28
   17926:	f140 8223 	bpl.w	17d70 <_vfprintf_r+0x4a8>
   1792a:	f8da 2010 	ldr.w	r2, [sl, #16]
   1792e:	2a00      	cmp	r2, #0
   17930:	f000 821e 	beq.w	17d70 <_vfprintf_r+0x4a8>
   17934:	f003 021a 	and.w	r2, r3, #26
   17938:	2a0a      	cmp	r2, #10
   1793a:	f000 823e 	beq.w	17dba <_vfprintf_r+0x4f2>
   1793e:	2300      	movs	r3, #0
   17940:	4618      	mov	r0, r3
   17942:	9311      	str	r3, [sp, #68]	; 0x44
   17944:	9313      	str	r3, [sp, #76]	; 0x4c
   17946:	9312      	str	r3, [sp, #72]	; 0x48
   17948:	9325      	str	r3, [sp, #148]	; 0x94
   1794a:	9324      	str	r3, [sp, #144]	; 0x90
   1794c:	9318      	str	r3, [sp, #96]	; 0x60
   1794e:	9319      	str	r3, [sp, #100]	; 0x64
   17950:	930b      	str	r3, [sp, #44]	; 0x2c
   17952:	ab30      	add	r3, sp, #192	; 0xc0
   17954:	9323      	str	r3, [sp, #140]	; 0x8c
   17956:	4698      	mov	r8, r3
   17958:	9016      	str	r0, [sp, #88]	; 0x58
   1795a:	9017      	str	r0, [sp, #92]	; 0x5c
   1795c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   17960:	f899 3000 	ldrb.w	r3, [r9]
   17964:	464c      	mov	r4, r9
   17966:	b1eb      	cbz	r3, 179a4 <_vfprintf_r+0xdc>
   17968:	2b25      	cmp	r3, #37	; 0x25
   1796a:	d102      	bne.n	17972 <_vfprintf_r+0xaa>
   1796c:	e01a      	b.n	179a4 <_vfprintf_r+0xdc>
   1796e:	2b25      	cmp	r3, #37	; 0x25
   17970:	d003      	beq.n	1797a <_vfprintf_r+0xb2>
   17972:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   17976:	2b00      	cmp	r3, #0
   17978:	d1f9      	bne.n	1796e <_vfprintf_r+0xa6>
   1797a:	eba4 0509 	sub.w	r5, r4, r9
   1797e:	b18d      	cbz	r5, 179a4 <_vfprintf_r+0xdc>
   17980:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17982:	9a25      	ldr	r2, [sp, #148]	; 0x94
   17984:	f8c8 9000 	str.w	r9, [r8]
   17988:	3301      	adds	r3, #1
   1798a:	442a      	add	r2, r5
   1798c:	2b07      	cmp	r3, #7
   1798e:	f8c8 5004 	str.w	r5, [r8, #4]
   17992:	9225      	str	r2, [sp, #148]	; 0x94
   17994:	9324      	str	r3, [sp, #144]	; 0x90
   17996:	f300 8201 	bgt.w	17d9c <_vfprintf_r+0x4d4>
   1799a:	f108 0808 	add.w	r8, r8, #8
   1799e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   179a0:	442b      	add	r3, r5
   179a2:	930b      	str	r3, [sp, #44]	; 0x2c
   179a4:	7823      	ldrb	r3, [r4, #0]
   179a6:	2b00      	cmp	r3, #0
   179a8:	f000 83f0 	beq.w	1818c <_vfprintf_r+0x8c4>
   179ac:	2300      	movs	r3, #0
   179ae:	461a      	mov	r2, r3
   179b0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   179b4:	4619      	mov	r1, r3
   179b6:	930c      	str	r3, [sp, #48]	; 0x30
   179b8:	469b      	mov	fp, r3
   179ba:	7866      	ldrb	r6, [r4, #1]
   179bc:	f04f 33ff 	mov.w	r3, #4294967295
   179c0:	f104 0901 	add.w	r9, r4, #1
   179c4:	9309      	str	r3, [sp, #36]	; 0x24
   179c6:	f109 0901 	add.w	r9, r9, #1
   179ca:	f1a6 0320 	sub.w	r3, r6, #32
   179ce:	2b58      	cmp	r3, #88	; 0x58
   179d0:	f200 83bf 	bhi.w	18152 <_vfprintf_r+0x88a>
   179d4:	e8df f013 	tbh	[pc, r3, lsl #1]
   179d8:	03bd02e0 	.word	0x03bd02e0
   179dc:	034f03bd 	.word	0x034f03bd
   179e0:	03bd03bd 	.word	0x03bd03bd
   179e4:	03bd03bd 	.word	0x03bd03bd
   179e8:	03bd03bd 	.word	0x03bd03bd
   179ec:	03080354 	.word	0x03080354
   179f0:	021a03bd 	.word	0x021a03bd
   179f4:	03bd02e8 	.word	0x03bd02e8
   179f8:	033a0303 	.word	0x033a0303
   179fc:	033a033a 	.word	0x033a033a
   17a00:	033a033a 	.word	0x033a033a
   17a04:	033a033a 	.word	0x033a033a
   17a08:	033a033a 	.word	0x033a033a
   17a0c:	03bd03bd 	.word	0x03bd03bd
   17a10:	03bd03bd 	.word	0x03bd03bd
   17a14:	03bd03bd 	.word	0x03bd03bd
   17a18:	03bd03bd 	.word	0x03bd03bd
   17a1c:	03bd03bd 	.word	0x03bd03bd
   17a20:	03620349 	.word	0x03620349
   17a24:	036203bd 	.word	0x036203bd
   17a28:	03bd03bd 	.word	0x03bd03bd
   17a2c:	03bd03bd 	.word	0x03bd03bd
   17a30:	03bd03a2 	.word	0x03bd03a2
   17a34:	006f03bd 	.word	0x006f03bd
   17a38:	03bd03bd 	.word	0x03bd03bd
   17a3c:	03bd03bd 	.word	0x03bd03bd
   17a40:	005903bd 	.word	0x005903bd
   17a44:	03bd03bd 	.word	0x03bd03bd
   17a48:	03bd031e 	.word	0x03bd031e
   17a4c:	03bd03bd 	.word	0x03bd03bd
   17a50:	03bd03bd 	.word	0x03bd03bd
   17a54:	03bd03bd 	.word	0x03bd03bd
   17a58:	03bd03bd 	.word	0x03bd03bd
   17a5c:	032403bd 	.word	0x032403bd
   17a60:	03620273 	.word	0x03620273
   17a64:	03620362 	.word	0x03620362
   17a68:	027302b7 	.word	0x027302b7
   17a6c:	03bd03bd 	.word	0x03bd03bd
   17a70:	03bd02bc 	.word	0x03bd02bc
   17a74:	007102c9 	.word	0x007102c9
   17a78:	0247030d 	.word	0x0247030d
   17a7c:	025203bd 	.word	0x025203bd
   17a80:	005b03bd 	.word	0x005b03bd
   17a84:	03bd03bd 	.word	0x03bd03bd
   17a88:	021f      	.short	0x021f
   17a8a:	f04b 0b10 	orr.w	fp, fp, #16
   17a8e:	f01b 0f20 	tst.w	fp, #32
   17a92:	f040 8353 	bne.w	1813c <_vfprintf_r+0x874>
   17a96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17a98:	f01b 0f10 	tst.w	fp, #16
   17a9c:	4613      	mov	r3, r2
   17a9e:	f040 85b4 	bne.w	1860a <_vfprintf_r+0xd42>
   17aa2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   17aa6:	f000 85b0 	beq.w	1860a <_vfprintf_r+0xd42>
   17aaa:	8814      	ldrh	r4, [r2, #0]
   17aac:	3204      	adds	r2, #4
   17aae:	2500      	movs	r5, #0
   17ab0:	2301      	movs	r3, #1
   17ab2:	920e      	str	r2, [sp, #56]	; 0x38
   17ab4:	e014      	b.n	17ae0 <_vfprintf_r+0x218>
   17ab6:	f04b 0b10 	orr.w	fp, fp, #16
   17aba:	f01b 0320 	ands.w	r3, fp, #32
   17abe:	f040 8332 	bne.w	18126 <_vfprintf_r+0x85e>
   17ac2:	f01b 0210 	ands.w	r2, fp, #16
   17ac6:	f040 8589 	bne.w	185dc <_vfprintf_r+0xd14>
   17aca:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   17ace:	f000 8585 	beq.w	185dc <_vfprintf_r+0xd14>
   17ad2:	990e      	ldr	r1, [sp, #56]	; 0x38
   17ad4:	4613      	mov	r3, r2
   17ad6:	460a      	mov	r2, r1
   17ad8:	3204      	adds	r2, #4
   17ada:	880c      	ldrh	r4, [r1, #0]
   17adc:	920e      	str	r2, [sp, #56]	; 0x38
   17ade:	2500      	movs	r5, #0
   17ae0:	f04f 0a00 	mov.w	sl, #0
   17ae4:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
   17ae8:	9909      	ldr	r1, [sp, #36]	; 0x24
   17aea:	1c4a      	adds	r2, r1, #1
   17aec:	f000 820b 	beq.w	17f06 <_vfprintf_r+0x63e>
   17af0:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   17af4:	9206      	str	r2, [sp, #24]
   17af6:	ea54 0205 	orrs.w	r2, r4, r5
   17afa:	f040 820a 	bne.w	17f12 <_vfprintf_r+0x64a>
   17afe:	2900      	cmp	r1, #0
   17b00:	f040 846f 	bne.w	183e2 <_vfprintf_r+0xb1a>
   17b04:	2b00      	cmp	r3, #0
   17b06:	f040 852d 	bne.w	18564 <_vfprintf_r+0xc9c>
   17b0a:	f01b 0301 	ands.w	r3, fp, #1
   17b0e:	930d      	str	r3, [sp, #52]	; 0x34
   17b10:	f000 8668 	beq.w	187e4 <_vfprintf_r+0xf1c>
   17b14:	af40      	add	r7, sp, #256	; 0x100
   17b16:	2330      	movs	r3, #48	; 0x30
   17b18:	f807 3d41 	strb.w	r3, [r7, #-65]!
   17b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17b1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   17b20:	4293      	cmp	r3, r2
   17b22:	bfb8      	it	lt
   17b24:	4613      	movlt	r3, r2
   17b26:	9307      	str	r3, [sp, #28]
   17b28:	2300      	movs	r3, #0
   17b2a:	9310      	str	r3, [sp, #64]	; 0x40
   17b2c:	f1ba 0f00 	cmp.w	sl, #0
   17b30:	d002      	beq.n	17b38 <_vfprintf_r+0x270>
   17b32:	9b07      	ldr	r3, [sp, #28]
   17b34:	3301      	adds	r3, #1
   17b36:	9307      	str	r3, [sp, #28]
   17b38:	9b06      	ldr	r3, [sp, #24]
   17b3a:	f013 0302 	ands.w	r3, r3, #2
   17b3e:	930f      	str	r3, [sp, #60]	; 0x3c
   17b40:	d002      	beq.n	17b48 <_vfprintf_r+0x280>
   17b42:	9b07      	ldr	r3, [sp, #28]
   17b44:	3302      	adds	r3, #2
   17b46:	9307      	str	r3, [sp, #28]
   17b48:	9b06      	ldr	r3, [sp, #24]
   17b4a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   17b4e:	f040 831b 	bne.w	18188 <_vfprintf_r+0x8c0>
   17b52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17b54:	9a07      	ldr	r2, [sp, #28]
   17b56:	eba3 0b02 	sub.w	fp, r3, r2
   17b5a:	f1bb 0f00 	cmp.w	fp, #0
   17b5e:	f340 8313 	ble.w	18188 <_vfprintf_r+0x8c0>
   17b62:	f1bb 0f10 	cmp.w	fp, #16
   17b66:	9925      	ldr	r1, [sp, #148]	; 0x94
   17b68:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17b6a:	dd28      	ble.n	17bbe <_vfprintf_r+0x2f6>
   17b6c:	4643      	mov	r3, r8
   17b6e:	2410      	movs	r4, #16
   17b70:	46a8      	mov	r8, r5
   17b72:	f8dd a020 	ldr.w	sl, [sp, #32]
   17b76:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   17b78:	e006      	b.n	17b88 <_vfprintf_r+0x2c0>
   17b7a:	f1ab 0b10 	sub.w	fp, fp, #16
   17b7e:	f1bb 0f10 	cmp.w	fp, #16
   17b82:	f103 0308 	add.w	r3, r3, #8
   17b86:	dd18      	ble.n	17bba <_vfprintf_r+0x2f2>
   17b88:	3201      	adds	r2, #1
   17b8a:	48b9      	ldr	r0, [pc, #740]	; (17e70 <_vfprintf_r+0x5a8>)
   17b8c:	9224      	str	r2, [sp, #144]	; 0x90
   17b8e:	3110      	adds	r1, #16
   17b90:	2a07      	cmp	r2, #7
   17b92:	9125      	str	r1, [sp, #148]	; 0x94
   17b94:	e883 0011 	stmia.w	r3, {r0, r4}
   17b98:	ddef      	ble.n	17b7a <_vfprintf_r+0x2b2>
   17b9a:	aa23      	add	r2, sp, #140	; 0x8c
   17b9c:	4629      	mov	r1, r5
   17b9e:	4650      	mov	r0, sl
   17ba0:	f7fe fffe 	bl	16ba0 <__sprint_r>
   17ba4:	2800      	cmp	r0, #0
   17ba6:	f040 836a 	bne.w	1827e <_vfprintf_r+0x9b6>
   17baa:	f1ab 0b10 	sub.w	fp, fp, #16
   17bae:	f1bb 0f10 	cmp.w	fp, #16
   17bb2:	9925      	ldr	r1, [sp, #148]	; 0x94
   17bb4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17bb6:	ab30      	add	r3, sp, #192	; 0xc0
   17bb8:	dce6      	bgt.n	17b88 <_vfprintf_r+0x2c0>
   17bba:	4645      	mov	r5, r8
   17bbc:	4698      	mov	r8, r3
   17bbe:	3201      	adds	r2, #1
   17bc0:	4bab      	ldr	r3, [pc, #684]	; (17e70 <_vfprintf_r+0x5a8>)
   17bc2:	9224      	str	r2, [sp, #144]	; 0x90
   17bc4:	eb0b 0401 	add.w	r4, fp, r1
   17bc8:	2a07      	cmp	r2, #7
   17bca:	9425      	str	r4, [sp, #148]	; 0x94
   17bcc:	e888 0808 	stmia.w	r8, {r3, fp}
   17bd0:	f300 84cd 	bgt.w	1856e <_vfprintf_r+0xca6>
   17bd4:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
   17bd8:	f108 0808 	add.w	r8, r8, #8
   17bdc:	f1ba 0f00 	cmp.w	sl, #0
   17be0:	d00e      	beq.n	17c00 <_vfprintf_r+0x338>
   17be2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17be4:	3301      	adds	r3, #1
   17be6:	3401      	adds	r4, #1
   17be8:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
   17bec:	2201      	movs	r2, #1
   17bee:	2b07      	cmp	r3, #7
   17bf0:	9425      	str	r4, [sp, #148]	; 0x94
   17bf2:	9324      	str	r3, [sp, #144]	; 0x90
   17bf4:	e888 0006 	stmia.w	r8, {r1, r2}
   17bf8:	f300 840a 	bgt.w	18410 <_vfprintf_r+0xb48>
   17bfc:	f108 0808 	add.w	r8, r8, #8
   17c00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17c02:	b16b      	cbz	r3, 17c20 <_vfprintf_r+0x358>
   17c04:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17c06:	3301      	adds	r3, #1
   17c08:	3402      	adds	r4, #2
   17c0a:	a91c      	add	r1, sp, #112	; 0x70
   17c0c:	2202      	movs	r2, #2
   17c0e:	2b07      	cmp	r3, #7
   17c10:	9425      	str	r4, [sp, #148]	; 0x94
   17c12:	9324      	str	r3, [sp, #144]	; 0x90
   17c14:	e888 0006 	stmia.w	r8, {r1, r2}
   17c18:	f300 8406 	bgt.w	18428 <_vfprintf_r+0xb60>
   17c1c:	f108 0808 	add.w	r8, r8, #8
   17c20:	2d80      	cmp	r5, #128	; 0x80
   17c22:	f000 832e 	beq.w	18282 <_vfprintf_r+0x9ba>
   17c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17c28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   17c2a:	eba3 0a02 	sub.w	sl, r3, r2
   17c2e:	f1ba 0f00 	cmp.w	sl, #0
   17c32:	dd3b      	ble.n	17cac <_vfprintf_r+0x3e4>
   17c34:	f1ba 0f10 	cmp.w	sl, #16
   17c38:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17c3a:	4d8e      	ldr	r5, [pc, #568]	; (17e74 <_vfprintf_r+0x5ac>)
   17c3c:	dd2b      	ble.n	17c96 <_vfprintf_r+0x3ce>
   17c3e:	4642      	mov	r2, r8
   17c40:	4621      	mov	r1, r4
   17c42:	46b0      	mov	r8, r6
   17c44:	f04f 0b10 	mov.w	fp, #16
   17c48:	462e      	mov	r6, r5
   17c4a:	9c08      	ldr	r4, [sp, #32]
   17c4c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   17c4e:	e006      	b.n	17c5e <_vfprintf_r+0x396>
   17c50:	f1aa 0a10 	sub.w	sl, sl, #16
   17c54:	f1ba 0f10 	cmp.w	sl, #16
   17c58:	f102 0208 	add.w	r2, r2, #8
   17c5c:	dd17      	ble.n	17c8e <_vfprintf_r+0x3c6>
   17c5e:	3301      	adds	r3, #1
   17c60:	3110      	adds	r1, #16
   17c62:	2b07      	cmp	r3, #7
   17c64:	9125      	str	r1, [sp, #148]	; 0x94
   17c66:	9324      	str	r3, [sp, #144]	; 0x90
   17c68:	e882 0840 	stmia.w	r2, {r6, fp}
   17c6c:	ddf0      	ble.n	17c50 <_vfprintf_r+0x388>
   17c6e:	aa23      	add	r2, sp, #140	; 0x8c
   17c70:	4629      	mov	r1, r5
   17c72:	4620      	mov	r0, r4
   17c74:	f7fe ff94 	bl	16ba0 <__sprint_r>
   17c78:	2800      	cmp	r0, #0
   17c7a:	f040 8300 	bne.w	1827e <_vfprintf_r+0x9b6>
   17c7e:	f1aa 0a10 	sub.w	sl, sl, #16
   17c82:	f1ba 0f10 	cmp.w	sl, #16
   17c86:	9925      	ldr	r1, [sp, #148]	; 0x94
   17c88:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17c8a:	aa30      	add	r2, sp, #192	; 0xc0
   17c8c:	dce7      	bgt.n	17c5e <_vfprintf_r+0x396>
   17c8e:	4635      	mov	r5, r6
   17c90:	460c      	mov	r4, r1
   17c92:	4646      	mov	r6, r8
   17c94:	4690      	mov	r8, r2
   17c96:	3301      	adds	r3, #1
   17c98:	4454      	add	r4, sl
   17c9a:	2b07      	cmp	r3, #7
   17c9c:	9425      	str	r4, [sp, #148]	; 0x94
   17c9e:	9324      	str	r3, [sp, #144]	; 0x90
   17ca0:	e888 0420 	stmia.w	r8, {r5, sl}
   17ca4:	f300 83a9 	bgt.w	183fa <_vfprintf_r+0xb32>
   17ca8:	f108 0808 	add.w	r8, r8, #8
   17cac:	9b06      	ldr	r3, [sp, #24]
   17cae:	05db      	lsls	r3, r3, #23
   17cb0:	f100 8285 	bmi.w	181be <_vfprintf_r+0x8f6>
   17cb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17cb6:	990d      	ldr	r1, [sp, #52]	; 0x34
   17cb8:	f8c8 7000 	str.w	r7, [r8]
   17cbc:	3301      	adds	r3, #1
   17cbe:	440c      	add	r4, r1
   17cc0:	2b07      	cmp	r3, #7
   17cc2:	9425      	str	r4, [sp, #148]	; 0x94
   17cc4:	f8c8 1004 	str.w	r1, [r8, #4]
   17cc8:	9324      	str	r3, [sp, #144]	; 0x90
   17cca:	f300 8375 	bgt.w	183b8 <_vfprintf_r+0xaf0>
   17cce:	f108 0808 	add.w	r8, r8, #8
   17cd2:	9b06      	ldr	r3, [sp, #24]
   17cd4:	0759      	lsls	r1, r3, #29
   17cd6:	d53b      	bpl.n	17d50 <_vfprintf_r+0x488>
   17cd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17cda:	9a07      	ldr	r2, [sp, #28]
   17cdc:	1a9d      	subs	r5, r3, r2
   17cde:	2d00      	cmp	r5, #0
   17ce0:	dd36      	ble.n	17d50 <_vfprintf_r+0x488>
   17ce2:	2d10      	cmp	r5, #16
   17ce4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17ce6:	dd21      	ble.n	17d2c <_vfprintf_r+0x464>
   17ce8:	2610      	movs	r6, #16
   17cea:	9f08      	ldr	r7, [sp, #32]
   17cec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   17cf0:	e004      	b.n	17cfc <_vfprintf_r+0x434>
   17cf2:	3d10      	subs	r5, #16
   17cf4:	2d10      	cmp	r5, #16
   17cf6:	f108 0808 	add.w	r8, r8, #8
   17cfa:	dd17      	ble.n	17d2c <_vfprintf_r+0x464>
   17cfc:	3301      	adds	r3, #1
   17cfe:	4a5c      	ldr	r2, [pc, #368]	; (17e70 <_vfprintf_r+0x5a8>)
   17d00:	9324      	str	r3, [sp, #144]	; 0x90
   17d02:	3410      	adds	r4, #16
   17d04:	2b07      	cmp	r3, #7
   17d06:	9425      	str	r4, [sp, #148]	; 0x94
   17d08:	e888 0044 	stmia.w	r8, {r2, r6}
   17d0c:	ddf1      	ble.n	17cf2 <_vfprintf_r+0x42a>
   17d0e:	aa23      	add	r2, sp, #140	; 0x8c
   17d10:	4651      	mov	r1, sl
   17d12:	4638      	mov	r0, r7
   17d14:	f7fe ff44 	bl	16ba0 <__sprint_r>
   17d18:	2800      	cmp	r0, #0
   17d1a:	f040 823f 	bne.w	1819c <_vfprintf_r+0x8d4>
   17d1e:	3d10      	subs	r5, #16
   17d20:	2d10      	cmp	r5, #16
   17d22:	9c25      	ldr	r4, [sp, #148]	; 0x94
   17d24:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17d26:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   17d2a:	dce7      	bgt.n	17cfc <_vfprintf_r+0x434>
   17d2c:	3301      	adds	r3, #1
   17d2e:	4a50      	ldr	r2, [pc, #320]	; (17e70 <_vfprintf_r+0x5a8>)
   17d30:	9324      	str	r3, [sp, #144]	; 0x90
   17d32:	442c      	add	r4, r5
   17d34:	2b07      	cmp	r3, #7
   17d36:	9425      	str	r4, [sp, #148]	; 0x94
   17d38:	e888 0024 	stmia.w	r8, {r2, r5}
   17d3c:	dd08      	ble.n	17d50 <_vfprintf_r+0x488>
   17d3e:	aa23      	add	r2, sp, #140	; 0x8c
   17d40:	990a      	ldr	r1, [sp, #40]	; 0x28
   17d42:	9808      	ldr	r0, [sp, #32]
   17d44:	f7fe ff2c 	bl	16ba0 <__sprint_r>
   17d48:	2800      	cmp	r0, #0
   17d4a:	f040 8347 	bne.w	183dc <_vfprintf_r+0xb14>
   17d4e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   17d50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17d52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   17d54:	9907      	ldr	r1, [sp, #28]
   17d56:	428a      	cmp	r2, r1
   17d58:	bfac      	ite	ge
   17d5a:	189b      	addge	r3, r3, r2
   17d5c:	185b      	addlt	r3, r3, r1
   17d5e:	930b      	str	r3, [sp, #44]	; 0x2c
   17d60:	2c00      	cmp	r4, #0
   17d62:	f040 8333 	bne.w	183cc <_vfprintf_r+0xb04>
   17d66:	2300      	movs	r3, #0
   17d68:	9324      	str	r3, [sp, #144]	; 0x90
   17d6a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   17d6e:	e5f7      	b.n	17960 <_vfprintf_r+0x98>
   17d70:	4651      	mov	r1, sl
   17d72:	9808      	ldr	r0, [sp, #32]
   17d74:	f001 f93c 	bl	18ff0 <__swsetup_r>
   17d78:	2800      	cmp	r0, #0
   17d7a:	d038      	beq.n	17dee <_vfprintf_r+0x526>
   17d7c:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   17d80:	07dd      	lsls	r5, r3, #31
   17d82:	d404      	bmi.n	17d8e <_vfprintf_r+0x4c6>
   17d84:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   17d88:	059c      	lsls	r4, r3, #22
   17d8a:	f140 85ca 	bpl.w	18922 <_vfprintf_r+0x105a>
   17d8e:	f04f 33ff 	mov.w	r3, #4294967295
   17d92:	930b      	str	r3, [sp, #44]	; 0x2c
   17d94:	980b      	ldr	r0, [sp, #44]	; 0x2c
   17d96:	b041      	add	sp, #260	; 0x104
   17d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d9c:	aa23      	add	r2, sp, #140	; 0x8c
   17d9e:	990a      	ldr	r1, [sp, #40]	; 0x28
   17da0:	9808      	ldr	r0, [sp, #32]
   17da2:	f7fe fefd 	bl	16ba0 <__sprint_r>
   17da6:	2800      	cmp	r0, #0
   17da8:	f040 8318 	bne.w	183dc <_vfprintf_r+0xb14>
   17dac:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   17db0:	e5f5      	b.n	1799e <_vfprintf_r+0xd6>
   17db2:	9808      	ldr	r0, [sp, #32]
   17db4:	f002 faba 	bl	1a32c <__sinit>
   17db8:	e59c      	b.n	178f4 <_vfprintf_r+0x2c>
   17dba:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
   17dbe:	2a00      	cmp	r2, #0
   17dc0:	f6ff adbd 	blt.w	1793e <_vfprintf_r+0x76>
   17dc4:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
   17dc8:	07d0      	lsls	r0, r2, #31
   17dca:	d405      	bmi.n	17dd8 <_vfprintf_r+0x510>
   17dcc:	0599      	lsls	r1, r3, #22
   17dce:	d403      	bmi.n	17dd8 <_vfprintf_r+0x510>
   17dd0:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   17dd4:	f7fc f85e 	bl	13e94 <__retarget_lock_release_recursive>
   17dd8:	462b      	mov	r3, r5
   17dda:	464a      	mov	r2, r9
   17ddc:	4651      	mov	r1, sl
   17dde:	9808      	ldr	r0, [sp, #32]
   17de0:	f001 f81e 	bl	18e20 <__sbprintf>
   17de4:	900b      	str	r0, [sp, #44]	; 0x2c
   17de6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   17de8:	b041      	add	sp, #260	; 0x104
   17dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17dee:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   17df2:	e59f      	b.n	17934 <_vfprintf_r+0x6c>
   17df4:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   17df8:	f7fc f84a 	bl	13e90 <__retarget_lock_acquire_recursive>
   17dfc:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
   17e00:	b293      	uxth	r3, r2
   17e02:	e582      	b.n	1790a <_vfprintf_r+0x42>
   17e04:	980c      	ldr	r0, [sp, #48]	; 0x30
   17e06:	930e      	str	r3, [sp, #56]	; 0x38
   17e08:	4240      	negs	r0, r0
   17e0a:	900c      	str	r0, [sp, #48]	; 0x30
   17e0c:	f04b 0b04 	orr.w	fp, fp, #4
   17e10:	f899 6000 	ldrb.w	r6, [r9]
   17e14:	e5d7      	b.n	179c6 <_vfprintf_r+0xfe>
   17e16:	2a00      	cmp	r2, #0
   17e18:	f040 87df 	bne.w	18dda <_vfprintf_r+0x1512>
   17e1c:	4b16      	ldr	r3, [pc, #88]	; (17e78 <_vfprintf_r+0x5b0>)
   17e1e:	9318      	str	r3, [sp, #96]	; 0x60
   17e20:	f01b 0f20 	tst.w	fp, #32
   17e24:	f040 84b9 	bne.w	1879a <_vfprintf_r+0xed2>
   17e28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17e2a:	f01b 0f10 	tst.w	fp, #16
   17e2e:	4613      	mov	r3, r2
   17e30:	f040 83dc 	bne.w	185ec <_vfprintf_r+0xd24>
   17e34:	f01b 0f40 	tst.w	fp, #64	; 0x40
   17e38:	f000 83d8 	beq.w	185ec <_vfprintf_r+0xd24>
   17e3c:	3304      	adds	r3, #4
   17e3e:	8814      	ldrh	r4, [r2, #0]
   17e40:	930e      	str	r3, [sp, #56]	; 0x38
   17e42:	2500      	movs	r5, #0
   17e44:	f01b 0f01 	tst.w	fp, #1
   17e48:	f000 8322 	beq.w	18490 <_vfprintf_r+0xbc8>
   17e4c:	ea54 0305 	orrs.w	r3, r4, r5
   17e50:	f000 831e 	beq.w	18490 <_vfprintf_r+0xbc8>
   17e54:	2330      	movs	r3, #48	; 0x30
   17e56:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
   17e5a:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
   17e5e:	f04b 0b02 	orr.w	fp, fp, #2
   17e62:	2302      	movs	r3, #2
   17e64:	e63c      	b.n	17ae0 <_vfprintf_r+0x218>
   17e66:	f04b 0b20 	orr.w	fp, fp, #32
   17e6a:	f899 6000 	ldrb.w	r6, [r9]
   17e6e:	e5aa      	b.n	179c6 <_vfprintf_r+0xfe>
   17e70:	00023d08 	.word	0x00023d08
   17e74:	00023d18 	.word	0x00023d18
   17e78:	00023cac 	.word	0x00023cac
   17e7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17e7e:	6817      	ldr	r7, [r2, #0]
   17e80:	2400      	movs	r4, #0
   17e82:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   17e86:	1d15      	adds	r5, r2, #4
   17e88:	2f00      	cmp	r7, #0
   17e8a:	f000 864e 	beq.w	18b2a <_vfprintf_r+0x1262>
   17e8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17e90:	1c53      	adds	r3, r2, #1
   17e92:	f000 85cc 	beq.w	18a2e <_vfprintf_r+0x1166>
   17e96:	4621      	mov	r1, r4
   17e98:	4638      	mov	r0, r7
   17e9a:	f7fc fb51 	bl	14540 <memchr>
   17e9e:	2800      	cmp	r0, #0
   17ea0:	f000 8697 	beq.w	18bd2 <_vfprintf_r+0x130a>
   17ea4:	1bc3      	subs	r3, r0, r7
   17ea6:	930d      	str	r3, [sp, #52]	; 0x34
   17ea8:	9409      	str	r4, [sp, #36]	; 0x24
   17eaa:	950e      	str	r5, [sp, #56]	; 0x38
   17eac:	f8cd b018 	str.w	fp, [sp, #24]
   17eb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   17eb4:	9307      	str	r3, [sp, #28]
   17eb6:	9410      	str	r4, [sp, #64]	; 0x40
   17eb8:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
   17ebc:	e636      	b.n	17b2c <_vfprintf_r+0x264>
   17ebe:	2a00      	cmp	r2, #0
   17ec0:	f040 8796 	bne.w	18df0 <_vfprintf_r+0x1528>
   17ec4:	f01b 0f20 	tst.w	fp, #32
   17ec8:	f040 845a 	bne.w	18780 <_vfprintf_r+0xeb8>
   17ecc:	f01b 0f10 	tst.w	fp, #16
   17ed0:	f040 83a2 	bne.w	18618 <_vfprintf_r+0xd50>
   17ed4:	f01b 0f40 	tst.w	fp, #64	; 0x40
   17ed8:	f000 839e 	beq.w	18618 <_vfprintf_r+0xd50>
   17edc:	990e      	ldr	r1, [sp, #56]	; 0x38
   17ede:	f9b1 4000 	ldrsh.w	r4, [r1]
   17ee2:	3104      	adds	r1, #4
   17ee4:	17e5      	asrs	r5, r4, #31
   17ee6:	4622      	mov	r2, r4
   17ee8:	462b      	mov	r3, r5
   17eea:	910e      	str	r1, [sp, #56]	; 0x38
   17eec:	2a00      	cmp	r2, #0
   17eee:	f173 0300 	sbcs.w	r3, r3, #0
   17ef2:	f2c0 8487 	blt.w	18804 <_vfprintf_r+0xf3c>
   17ef6:	9909      	ldr	r1, [sp, #36]	; 0x24
   17ef8:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
   17efc:	1c4a      	adds	r2, r1, #1
   17efe:	f04f 0301 	mov.w	r3, #1
   17f02:	f47f adf5 	bne.w	17af0 <_vfprintf_r+0x228>
   17f06:	ea54 0205 	orrs.w	r2, r4, r5
   17f0a:	f000 826c 	beq.w	183e6 <_vfprintf_r+0xb1e>
   17f0e:	f8cd b018 	str.w	fp, [sp, #24]
   17f12:	2b01      	cmp	r3, #1
   17f14:	f000 8308 	beq.w	18528 <_vfprintf_r+0xc60>
   17f18:	2b02      	cmp	r3, #2
   17f1a:	f040 8295 	bne.w	18448 <_vfprintf_r+0xb80>
   17f1e:	9818      	ldr	r0, [sp, #96]	; 0x60
   17f20:	af30      	add	r7, sp, #192	; 0xc0
   17f22:	0923      	lsrs	r3, r4, #4
   17f24:	f004 010f 	and.w	r1, r4, #15
   17f28:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   17f2c:	092a      	lsrs	r2, r5, #4
   17f2e:	461c      	mov	r4, r3
   17f30:	4615      	mov	r5, r2
   17f32:	5c43      	ldrb	r3, [r0, r1]
   17f34:	f807 3d01 	strb.w	r3, [r7, #-1]!
   17f38:	ea54 0305 	orrs.w	r3, r4, r5
   17f3c:	d1f1      	bne.n	17f22 <_vfprintf_r+0x65a>
   17f3e:	ab30      	add	r3, sp, #192	; 0xc0
   17f40:	1bdb      	subs	r3, r3, r7
   17f42:	930d      	str	r3, [sp, #52]	; 0x34
   17f44:	e5ea      	b.n	17b1c <_vfprintf_r+0x254>
   17f46:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   17f4a:	f899 6000 	ldrb.w	r6, [r9]
   17f4e:	e53a      	b.n	179c6 <_vfprintf_r+0xfe>
   17f50:	f899 6000 	ldrb.w	r6, [r9]
   17f54:	2e6c      	cmp	r6, #108	; 0x6c
   17f56:	bf03      	ittte	eq
   17f58:	f899 6001 	ldrbeq.w	r6, [r9, #1]
   17f5c:	f04b 0b20 	orreq.w	fp, fp, #32
   17f60:	f109 0901 	addeq.w	r9, r9, #1
   17f64:	f04b 0b10 	orrne.w	fp, fp, #16
   17f68:	e52d      	b.n	179c6 <_vfprintf_r+0xfe>
   17f6a:	2a00      	cmp	r2, #0
   17f6c:	f040 874c 	bne.w	18e08 <_vfprintf_r+0x1540>
   17f70:	f01b 0f20 	tst.w	fp, #32
   17f74:	f040 853f 	bne.w	189f6 <_vfprintf_r+0x112e>
   17f78:	f01b 0f10 	tst.w	fp, #16
   17f7c:	f040 80fc 	bne.w	18178 <_vfprintf_r+0x8b0>
   17f80:	f01b 0f40 	tst.w	fp, #64	; 0x40
   17f84:	f000 80f8 	beq.w	18178 <_vfprintf_r+0x8b0>
   17f88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17f8a:	6813      	ldr	r3, [r2, #0]
   17f8c:	3204      	adds	r2, #4
   17f8e:	920e      	str	r2, [sp, #56]	; 0x38
   17f90:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   17f94:	801a      	strh	r2, [r3, #0]
   17f96:	e4e3      	b.n	17960 <_vfprintf_r+0x98>
   17f98:	f899 6000 	ldrb.w	r6, [r9]
   17f9c:	2900      	cmp	r1, #0
   17f9e:	f47f ad12 	bne.w	179c6 <_vfprintf_r+0xfe>
   17fa2:	2201      	movs	r2, #1
   17fa4:	2120      	movs	r1, #32
   17fa6:	e50e      	b.n	179c6 <_vfprintf_r+0xfe>
   17fa8:	f899 6000 	ldrb.w	r6, [r9]
   17fac:	2e2a      	cmp	r6, #42	; 0x2a
   17fae:	f109 0001 	add.w	r0, r9, #1
   17fb2:	f000 86f1 	beq.w	18d98 <_vfprintf_r+0x14d0>
   17fb6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   17fba:	2b09      	cmp	r3, #9
   17fbc:	4681      	mov	r9, r0
   17fbe:	bf98      	it	ls
   17fc0:	2000      	movls	r0, #0
   17fc2:	f200 863d 	bhi.w	18c40 <_vfprintf_r+0x1378>
   17fc6:	f819 6b01 	ldrb.w	r6, [r9], #1
   17fca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17fce:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   17fd2:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   17fd6:	2b09      	cmp	r3, #9
   17fd8:	d9f5      	bls.n	17fc6 <_vfprintf_r+0x6fe>
   17fda:	9009      	str	r0, [sp, #36]	; 0x24
   17fdc:	e4f5      	b.n	179ca <_vfprintf_r+0x102>
   17fde:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   17fe2:	f899 6000 	ldrb.w	r6, [r9]
   17fe6:	e4ee      	b.n	179c6 <_vfprintf_r+0xfe>
   17fe8:	f899 6000 	ldrb.w	r6, [r9]
   17fec:	2201      	movs	r2, #1
   17fee:	212b      	movs	r1, #43	; 0x2b
   17ff0:	e4e9      	b.n	179c6 <_vfprintf_r+0xfe>
   17ff2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17ff4:	4bae      	ldr	r3, [pc, #696]	; (182b0 <_vfprintf_r+0x9e8>)
   17ff6:	6814      	ldr	r4, [r2, #0]
   17ff8:	9318      	str	r3, [sp, #96]	; 0x60
   17ffa:	2678      	movs	r6, #120	; 0x78
   17ffc:	2330      	movs	r3, #48	; 0x30
   17ffe:	3204      	adds	r2, #4
   18000:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
   18004:	f04b 0b02 	orr.w	fp, fp, #2
   18008:	920e      	str	r2, [sp, #56]	; 0x38
   1800a:	2500      	movs	r5, #0
   1800c:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
   18010:	2302      	movs	r3, #2
   18012:	e565      	b.n	17ae0 <_vfprintf_r+0x218>
   18014:	2a00      	cmp	r2, #0
   18016:	f040 86e4 	bne.w	18de2 <_vfprintf_r+0x151a>
   1801a:	4ba6      	ldr	r3, [pc, #664]	; (182b4 <_vfprintf_r+0x9ec>)
   1801c:	9318      	str	r3, [sp, #96]	; 0x60
   1801e:	e6ff      	b.n	17e20 <_vfprintf_r+0x558>
   18020:	990e      	ldr	r1, [sp, #56]	; 0x38
   18022:	f8cd b018 	str.w	fp, [sp, #24]
   18026:	680a      	ldr	r2, [r1, #0]
   18028:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1802c:	2300      	movs	r3, #0
   1802e:	460a      	mov	r2, r1
   18030:	469a      	mov	sl, r3
   18032:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   18036:	3204      	adds	r2, #4
   18038:	2301      	movs	r3, #1
   1803a:	9307      	str	r3, [sp, #28]
   1803c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   18040:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
   18044:	920e      	str	r2, [sp, #56]	; 0x38
   18046:	930d      	str	r3, [sp, #52]	; 0x34
   18048:	af26      	add	r7, sp, #152	; 0x98
   1804a:	e575      	b.n	17b38 <_vfprintf_r+0x270>
   1804c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   18050:	2000      	movs	r0, #0
   18052:	f819 6b01 	ldrb.w	r6, [r9], #1
   18056:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1805a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   1805e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   18062:	2b09      	cmp	r3, #9
   18064:	d9f5      	bls.n	18052 <_vfprintf_r+0x78a>
   18066:	900c      	str	r0, [sp, #48]	; 0x30
   18068:	e4af      	b.n	179ca <_vfprintf_r+0x102>
   1806a:	2a00      	cmp	r2, #0
   1806c:	f040 86c8 	bne.w	18e00 <_vfprintf_r+0x1538>
   18070:	f04b 0b10 	orr.w	fp, fp, #16
   18074:	e726      	b.n	17ec4 <_vfprintf_r+0x5fc>
   18076:	f04b 0b01 	orr.w	fp, fp, #1
   1807a:	f899 6000 	ldrb.w	r6, [r9]
   1807e:	e4a2      	b.n	179c6 <_vfprintf_r+0xfe>
   18080:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   18082:	6823      	ldr	r3, [r4, #0]
   18084:	930c      	str	r3, [sp, #48]	; 0x30
   18086:	4618      	mov	r0, r3
   18088:	2800      	cmp	r0, #0
   1808a:	4623      	mov	r3, r4
   1808c:	f103 0304 	add.w	r3, r3, #4
   18090:	f6ff aeb8 	blt.w	17e04 <_vfprintf_r+0x53c>
   18094:	930e      	str	r3, [sp, #56]	; 0x38
   18096:	f899 6000 	ldrb.w	r6, [r9]
   1809a:	e494      	b.n	179c6 <_vfprintf_r+0xfe>
   1809c:	2a00      	cmp	r2, #0
   1809e:	f040 86b7 	bne.w	18e10 <_vfprintf_r+0x1548>
   180a2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   180a4:	3507      	adds	r5, #7
   180a6:	f025 0307 	bic.w	r3, r5, #7
   180aa:	f103 0208 	add.w	r2, r3, #8
   180ae:	920e      	str	r2, [sp, #56]	; 0x38
   180b0:	681a      	ldr	r2, [r3, #0]
   180b2:	9213      	str	r2, [sp, #76]	; 0x4c
   180b4:	685b      	ldr	r3, [r3, #4]
   180b6:	9312      	str	r3, [sp, #72]	; 0x48
   180b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   180ba:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   180bc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   180c0:	4628      	mov	r0, r5
   180c2:	4621      	mov	r1, r4
   180c4:	f04f 32ff 	mov.w	r2, #4294967295
   180c8:	4b7b      	ldr	r3, [pc, #492]	; (182b8 <_vfprintf_r+0x9f0>)
   180ca:	f002 ffbb 	bl	1b044 <__aeabi_dcmpun>
   180ce:	2800      	cmp	r0, #0
   180d0:	f040 83a2 	bne.w	18818 <_vfprintf_r+0xf50>
   180d4:	4628      	mov	r0, r5
   180d6:	4621      	mov	r1, r4
   180d8:	f04f 32ff 	mov.w	r2, #4294967295
   180dc:	4b76      	ldr	r3, [pc, #472]	; (182b8 <_vfprintf_r+0x9f0>)
   180de:	f7f9 fefb 	bl	11ed8 <__aeabi_dcmple>
   180e2:	2800      	cmp	r0, #0
   180e4:	f040 8398 	bne.w	18818 <_vfprintf_r+0xf50>
   180e8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   180ea:	9813      	ldr	r0, [sp, #76]	; 0x4c
   180ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   180ee:	9912      	ldr	r1, [sp, #72]	; 0x48
   180f0:	f7f9 fee8 	bl	11ec4 <__aeabi_dcmplt>
   180f4:	2800      	cmp	r0, #0
   180f6:	f040 8435 	bne.w	18964 <_vfprintf_r+0x109c>
   180fa:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
   180fe:	4f6f      	ldr	r7, [pc, #444]	; (182bc <_vfprintf_r+0x9f4>)
   18100:	4b6f      	ldr	r3, [pc, #444]	; (182c0 <_vfprintf_r+0x9f8>)
   18102:	2203      	movs	r2, #3
   18104:	2100      	movs	r1, #0
   18106:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   1810a:	9207      	str	r2, [sp, #28]
   1810c:	9109      	str	r1, [sp, #36]	; 0x24
   1810e:	9006      	str	r0, [sp, #24]
   18110:	2e47      	cmp	r6, #71	; 0x47
   18112:	bfd8      	it	le
   18114:	461f      	movle	r7, r3
   18116:	920d      	str	r2, [sp, #52]	; 0x34
   18118:	9110      	str	r1, [sp, #64]	; 0x40
   1811a:	e507      	b.n	17b2c <_vfprintf_r+0x264>
   1811c:	f04b 0b08 	orr.w	fp, fp, #8
   18120:	f899 6000 	ldrb.w	r6, [r9]
   18124:	e44f      	b.n	179c6 <_vfprintf_r+0xfe>
   18126:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   18128:	3507      	adds	r5, #7
   1812a:	f025 0307 	bic.w	r3, r5, #7
   1812e:	f103 0208 	add.w	r2, r3, #8
   18132:	e9d3 4500 	ldrd	r4, r5, [r3]
   18136:	920e      	str	r2, [sp, #56]	; 0x38
   18138:	2300      	movs	r3, #0
   1813a:	e4d1      	b.n	17ae0 <_vfprintf_r+0x218>
   1813c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1813e:	3507      	adds	r5, #7
   18140:	f025 0307 	bic.w	r3, r5, #7
   18144:	f103 0208 	add.w	r2, r3, #8
   18148:	e9d3 4500 	ldrd	r4, r5, [r3]
   1814c:	920e      	str	r2, [sp, #56]	; 0x38
   1814e:	2301      	movs	r3, #1
   18150:	e4c6      	b.n	17ae0 <_vfprintf_r+0x218>
   18152:	2a00      	cmp	r2, #0
   18154:	f040 8650 	bne.w	18df8 <_vfprintf_r+0x1530>
   18158:	b1c6      	cbz	r6, 1818c <_vfprintf_r+0x8c4>
   1815a:	2300      	movs	r3, #0
   1815c:	2201      	movs	r2, #1
   1815e:	469a      	mov	sl, r3
   18160:	9207      	str	r2, [sp, #28]
   18162:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
   18166:	f8cd b018 	str.w	fp, [sp, #24]
   1816a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1816e:	9309      	str	r3, [sp, #36]	; 0x24
   18170:	9310      	str	r3, [sp, #64]	; 0x40
   18172:	920d      	str	r2, [sp, #52]	; 0x34
   18174:	af26      	add	r7, sp, #152	; 0x98
   18176:	e4df      	b.n	17b38 <_vfprintf_r+0x270>
   18178:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1817a:	6813      	ldr	r3, [r2, #0]
   1817c:	3204      	adds	r2, #4
   1817e:	920e      	str	r2, [sp, #56]	; 0x38
   18180:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18182:	601a      	str	r2, [r3, #0]
   18184:	f7ff bbec 	b.w	17960 <_vfprintf_r+0x98>
   18188:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1818a:	e527      	b.n	17bdc <_vfprintf_r+0x314>
   1818c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1818e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   18192:	2b00      	cmp	r3, #0
   18194:	f040 8594 	bne.w	18cc0 <_vfprintf_r+0x13f8>
   18198:	2300      	movs	r3, #0
   1819a:	9324      	str	r3, [sp, #144]	; 0x90
   1819c:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   181a0:	f013 0f01 	tst.w	r3, #1
   181a4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   181a8:	d102      	bne.n	181b0 <_vfprintf_r+0x8e8>
   181aa:	059a      	lsls	r2, r3, #22
   181ac:	f140 8249 	bpl.w	18642 <_vfprintf_r+0xd7a>
   181b0:	065b      	lsls	r3, r3, #25
   181b2:	f53f adec 	bmi.w	17d8e <_vfprintf_r+0x4c6>
   181b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   181b8:	b041      	add	sp, #260	; 0x104
   181ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181be:	2e65      	cmp	r6, #101	; 0x65
   181c0:	f340 80b2 	ble.w	18328 <_vfprintf_r+0xa60>
   181c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
   181c6:	9813      	ldr	r0, [sp, #76]	; 0x4c
   181c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   181ca:	9912      	ldr	r1, [sp, #72]	; 0x48
   181cc:	f7f9 fe70 	bl	11eb0 <__aeabi_dcmpeq>
   181d0:	2800      	cmp	r0, #0
   181d2:	f000 8160 	beq.w	18496 <_vfprintf_r+0xbce>
   181d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   181d8:	4a3a      	ldr	r2, [pc, #232]	; (182c4 <_vfprintf_r+0x9fc>)
   181da:	f8c8 2000 	str.w	r2, [r8]
   181de:	3301      	adds	r3, #1
   181e0:	3401      	adds	r4, #1
   181e2:	2201      	movs	r2, #1
   181e4:	2b07      	cmp	r3, #7
   181e6:	9425      	str	r4, [sp, #148]	; 0x94
   181e8:	9324      	str	r3, [sp, #144]	; 0x90
   181ea:	f8c8 2004 	str.w	r2, [r8, #4]
   181ee:	f300 83bf 	bgt.w	18970 <_vfprintf_r+0x10a8>
   181f2:	f108 0808 	add.w	r8, r8, #8
   181f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   181f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   181fa:	9c25      	ldr	r4, [sp, #148]	; 0x94
   181fc:	4293      	cmp	r3, r2
   181fe:	db03      	blt.n	18208 <_vfprintf_r+0x940>
   18200:	9b06      	ldr	r3, [sp, #24]
   18202:	07df      	lsls	r7, r3, #31
   18204:	f57f ad65 	bpl.w	17cd2 <_vfprintf_r+0x40a>
   18208:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1820a:	9914      	ldr	r1, [sp, #80]	; 0x50
   1820c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1820e:	f8c8 2000 	str.w	r2, [r8]
   18212:	3301      	adds	r3, #1
   18214:	440c      	add	r4, r1
   18216:	2b07      	cmp	r3, #7
   18218:	f8c8 1004 	str.w	r1, [r8, #4]
   1821c:	9425      	str	r4, [sp, #148]	; 0x94
   1821e:	9324      	str	r3, [sp, #144]	; 0x90
   18220:	f300 83f8 	bgt.w	18a14 <_vfprintf_r+0x114c>
   18224:	f108 0808 	add.w	r8, r8, #8
   18228:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1822a:	1e5e      	subs	r6, r3, #1
   1822c:	2e00      	cmp	r6, #0
   1822e:	f77f ad50 	ble.w	17cd2 <_vfprintf_r+0x40a>
   18232:	2e10      	cmp	r6, #16
   18234:	9b24      	ldr	r3, [sp, #144]	; 0x90
   18236:	4d24      	ldr	r5, [pc, #144]	; (182c8 <_vfprintf_r+0xa00>)
   18238:	f340 81dd 	ble.w	185f6 <_vfprintf_r+0xd2e>
   1823c:	2710      	movs	r7, #16
   1823e:	f8dd a020 	ldr.w	sl, [sp, #32]
   18242:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   18246:	e005      	b.n	18254 <_vfprintf_r+0x98c>
   18248:	f108 0808 	add.w	r8, r8, #8
   1824c:	3e10      	subs	r6, #16
   1824e:	2e10      	cmp	r6, #16
   18250:	f340 81d1 	ble.w	185f6 <_vfprintf_r+0xd2e>
   18254:	3301      	adds	r3, #1
   18256:	3410      	adds	r4, #16
   18258:	2b07      	cmp	r3, #7
   1825a:	9425      	str	r4, [sp, #148]	; 0x94
   1825c:	9324      	str	r3, [sp, #144]	; 0x90
   1825e:	e888 00a0 	stmia.w	r8, {r5, r7}
   18262:	ddf1      	ble.n	18248 <_vfprintf_r+0x980>
   18264:	aa23      	add	r2, sp, #140	; 0x8c
   18266:	4659      	mov	r1, fp
   18268:	4650      	mov	r0, sl
   1826a:	f7fe fc99 	bl	16ba0 <__sprint_r>
   1826e:	2800      	cmp	r0, #0
   18270:	f040 83cd 	bne.w	18a0e <_vfprintf_r+0x1146>
   18274:	9c25      	ldr	r4, [sp, #148]	; 0x94
   18276:	9b24      	ldr	r3, [sp, #144]	; 0x90
   18278:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1827c:	e7e6      	b.n	1824c <_vfprintf_r+0x984>
   1827e:	46aa      	mov	sl, r5
   18280:	e78c      	b.n	1819c <_vfprintf_r+0x8d4>
   18282:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18284:	9a07      	ldr	r2, [sp, #28]
   18286:	eba3 0a02 	sub.w	sl, r3, r2
   1828a:	f1ba 0f00 	cmp.w	sl, #0
   1828e:	f77f acca 	ble.w	17c26 <_vfprintf_r+0x35e>
   18292:	f1ba 0f10 	cmp.w	sl, #16
   18296:	9b24      	ldr	r3, [sp, #144]	; 0x90
   18298:	4d0b      	ldr	r5, [pc, #44]	; (182c8 <_vfprintf_r+0xa00>)
   1829a:	dd39      	ble.n	18310 <_vfprintf_r+0xa48>
   1829c:	4642      	mov	r2, r8
   1829e:	4621      	mov	r1, r4
   182a0:	46b0      	mov	r8, r6
   182a2:	f04f 0b10 	mov.w	fp, #16
   182a6:	462e      	mov	r6, r5
   182a8:	9c08      	ldr	r4, [sp, #32]
   182aa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   182ac:	e015      	b.n	182da <_vfprintf_r+0xa12>
   182ae:	bf00      	nop
   182b0:	00023cac 	.word	0x00023cac
   182b4:	00023c98 	.word	0x00023c98
   182b8:	7fefffff 	.word	0x7fefffff
   182bc:	00023c8c 	.word	0x00023c8c
   182c0:	00023c88 	.word	0x00023c88
   182c4:	00020d98 	.word	0x00020d98
   182c8:	00023d18 	.word	0x00023d18
   182cc:	f1aa 0a10 	sub.w	sl, sl, #16
   182d0:	f1ba 0f10 	cmp.w	sl, #16
   182d4:	f102 0208 	add.w	r2, r2, #8
   182d8:	dd16      	ble.n	18308 <_vfprintf_r+0xa40>
   182da:	3301      	adds	r3, #1
   182dc:	3110      	adds	r1, #16
   182de:	2b07      	cmp	r3, #7
   182e0:	9125      	str	r1, [sp, #148]	; 0x94
   182e2:	9324      	str	r3, [sp, #144]	; 0x90
   182e4:	e882 0840 	stmia.w	r2, {r6, fp}
   182e8:	ddf0      	ble.n	182cc <_vfprintf_r+0xa04>
   182ea:	aa23      	add	r2, sp, #140	; 0x8c
   182ec:	4629      	mov	r1, r5
   182ee:	4620      	mov	r0, r4
   182f0:	f7fe fc56 	bl	16ba0 <__sprint_r>
   182f4:	2800      	cmp	r0, #0
   182f6:	d1c2      	bne.n	1827e <_vfprintf_r+0x9b6>
   182f8:	f1aa 0a10 	sub.w	sl, sl, #16
   182fc:	f1ba 0f10 	cmp.w	sl, #16
   18300:	9925      	ldr	r1, [sp, #148]	; 0x94
   18302:	9b24      	ldr	r3, [sp, #144]	; 0x90
   18304:	aa30      	add	r2, sp, #192	; 0xc0
   18306:	dce8      	bgt.n	182da <_vfprintf_r+0xa12>
   18308:	4635      	mov	r5, r6
   1830a:	460c      	mov	r4, r1
   1830c:	4646      	mov	r6, r8
   1830e:	4690      	mov	r8, r2
   18310:	3301      	adds	r3, #1
   18312:	4454      	add	r4, sl
   18314:	2b07      	cmp	r3, #7
   18316:	9425      	str	r4, [sp, #148]	; 0x94
   18318:	9324      	str	r3, [sp, #144]	; 0x90
   1831a:	e888 0420 	stmia.w	r8, {r5, sl}
   1831e:	f300 8264 	bgt.w	187ea <_vfprintf_r+0xf22>
   18322:	f108 0808 	add.w	r8, r8, #8
   18326:	e47e      	b.n	17c26 <_vfprintf_r+0x35e>
   18328:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1832a:	9e24      	ldr	r6, [sp, #144]	; 0x90
   1832c:	2b01      	cmp	r3, #1
   1832e:	f340 81fd 	ble.w	1872c <_vfprintf_r+0xe64>
   18332:	3601      	adds	r6, #1
   18334:	3401      	adds	r4, #1
   18336:	2301      	movs	r3, #1
   18338:	2e07      	cmp	r6, #7
   1833a:	9425      	str	r4, [sp, #148]	; 0x94
   1833c:	9624      	str	r6, [sp, #144]	; 0x90
   1833e:	f8c8 7000 	str.w	r7, [r8]
   18342:	f8c8 3004 	str.w	r3, [r8, #4]
   18346:	f300 820e 	bgt.w	18766 <_vfprintf_r+0xe9e>
   1834a:	f108 0808 	add.w	r8, r8, #8
   1834e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   18350:	9b15      	ldr	r3, [sp, #84]	; 0x54
   18352:	f8c8 3000 	str.w	r3, [r8]
   18356:	3601      	adds	r6, #1
   18358:	4414      	add	r4, r2
   1835a:	2e07      	cmp	r6, #7
   1835c:	9425      	str	r4, [sp, #148]	; 0x94
   1835e:	9624      	str	r6, [sp, #144]	; 0x90
   18360:	f8c8 2004 	str.w	r2, [r8, #4]
   18364:	f300 822e 	bgt.w	187c4 <_vfprintf_r+0xefc>
   18368:	f108 0808 	add.w	r8, r8, #8
   1836c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1836e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   18370:	9813      	ldr	r0, [sp, #76]	; 0x4c
   18372:	9912      	ldr	r1, [sp, #72]	; 0x48
   18374:	f7f9 fd9c 	bl	11eb0 <__aeabi_dcmpeq>
   18378:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1837a:	2800      	cmp	r0, #0
   1837c:	f040 8106 	bne.w	1858c <_vfprintf_r+0xcc4>
   18380:	3b01      	subs	r3, #1
   18382:	3601      	adds	r6, #1
   18384:	3701      	adds	r7, #1
   18386:	441c      	add	r4, r3
   18388:	2e07      	cmp	r6, #7
   1838a:	9624      	str	r6, [sp, #144]	; 0x90
   1838c:	9425      	str	r4, [sp, #148]	; 0x94
   1838e:	f8c8 7000 	str.w	r7, [r8]
   18392:	f8c8 3004 	str.w	r3, [r8, #4]
   18396:	f300 81d9 	bgt.w	1874c <_vfprintf_r+0xe84>
   1839a:	f108 0808 	add.w	r8, r8, #8
   1839e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   183a0:	f8c8 2004 	str.w	r2, [r8, #4]
   183a4:	3601      	adds	r6, #1
   183a6:	4414      	add	r4, r2
   183a8:	ab1f      	add	r3, sp, #124	; 0x7c
   183aa:	2e07      	cmp	r6, #7
   183ac:	9425      	str	r4, [sp, #148]	; 0x94
   183ae:	9624      	str	r6, [sp, #144]	; 0x90
   183b0:	f8c8 3000 	str.w	r3, [r8]
   183b4:	f77f ac8b 	ble.w	17cce <_vfprintf_r+0x406>
   183b8:	aa23      	add	r2, sp, #140	; 0x8c
   183ba:	990a      	ldr	r1, [sp, #40]	; 0x28
   183bc:	9808      	ldr	r0, [sp, #32]
   183be:	f7fe fbef 	bl	16ba0 <__sprint_r>
   183c2:	b958      	cbnz	r0, 183dc <_vfprintf_r+0xb14>
   183c4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   183c6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   183ca:	e482      	b.n	17cd2 <_vfprintf_r+0x40a>
   183cc:	aa23      	add	r2, sp, #140	; 0x8c
   183ce:	990a      	ldr	r1, [sp, #40]	; 0x28
   183d0:	9808      	ldr	r0, [sp, #32]
   183d2:	f7fe fbe5 	bl	16ba0 <__sprint_r>
   183d6:	2800      	cmp	r0, #0
   183d8:	f43f acc5 	beq.w	17d66 <_vfprintf_r+0x49e>
   183dc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   183e0:	e6dc      	b.n	1819c <_vfprintf_r+0x8d4>
   183e2:	f8dd b018 	ldr.w	fp, [sp, #24]
   183e6:	2b01      	cmp	r3, #1
   183e8:	f000 8121 	beq.w	1862e <_vfprintf_r+0xd66>
   183ec:	2b02      	cmp	r3, #2
   183ee:	d127      	bne.n	18440 <_vfprintf_r+0xb78>
   183f0:	f8cd b018 	str.w	fp, [sp, #24]
   183f4:	2400      	movs	r4, #0
   183f6:	2500      	movs	r5, #0
   183f8:	e591      	b.n	17f1e <_vfprintf_r+0x656>
   183fa:	aa23      	add	r2, sp, #140	; 0x8c
   183fc:	990a      	ldr	r1, [sp, #40]	; 0x28
   183fe:	9808      	ldr	r0, [sp, #32]
   18400:	f7fe fbce 	bl	16ba0 <__sprint_r>
   18404:	2800      	cmp	r0, #0
   18406:	d1e9      	bne.n	183dc <_vfprintf_r+0xb14>
   18408:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1840a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1840e:	e44d      	b.n	17cac <_vfprintf_r+0x3e4>
   18410:	aa23      	add	r2, sp, #140	; 0x8c
   18412:	990a      	ldr	r1, [sp, #40]	; 0x28
   18414:	9808      	ldr	r0, [sp, #32]
   18416:	f7fe fbc3 	bl	16ba0 <__sprint_r>
   1841a:	2800      	cmp	r0, #0
   1841c:	d1de      	bne.n	183dc <_vfprintf_r+0xb14>
   1841e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   18420:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   18424:	f7ff bbec 	b.w	17c00 <_vfprintf_r+0x338>
   18428:	aa23      	add	r2, sp, #140	; 0x8c
   1842a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1842c:	9808      	ldr	r0, [sp, #32]
   1842e:	f7fe fbb7 	bl	16ba0 <__sprint_r>
   18432:	2800      	cmp	r0, #0
   18434:	d1d2      	bne.n	183dc <_vfprintf_r+0xb14>
   18436:	9c25      	ldr	r4, [sp, #148]	; 0x94
   18438:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1843c:	f7ff bbf0 	b.w	17c20 <_vfprintf_r+0x358>
   18440:	f8cd b018 	str.w	fp, [sp, #24]
   18444:	2400      	movs	r4, #0
   18446:	2500      	movs	r5, #0
   18448:	a930      	add	r1, sp, #192	; 0xc0
   1844a:	e000      	b.n	1844e <_vfprintf_r+0xb86>
   1844c:	4639      	mov	r1, r7
   1844e:	08e2      	lsrs	r2, r4, #3
   18450:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   18454:	08e8      	lsrs	r0, r5, #3
   18456:	f004 0307 	and.w	r3, r4, #7
   1845a:	4605      	mov	r5, r0
   1845c:	4614      	mov	r4, r2
   1845e:	3330      	adds	r3, #48	; 0x30
   18460:	ea54 0205 	orrs.w	r2, r4, r5
   18464:	f801 3c01 	strb.w	r3, [r1, #-1]
   18468:	f101 37ff 	add.w	r7, r1, #4294967295
   1846c:	d1ee      	bne.n	1844c <_vfprintf_r+0xb84>
   1846e:	9a06      	ldr	r2, [sp, #24]
   18470:	07d2      	lsls	r2, r2, #31
   18472:	f57f ad64 	bpl.w	17f3e <_vfprintf_r+0x676>
   18476:	2b30      	cmp	r3, #48	; 0x30
   18478:	f43f ad61 	beq.w	17f3e <_vfprintf_r+0x676>
   1847c:	2330      	movs	r3, #48	; 0x30
   1847e:	3902      	subs	r1, #2
   18480:	f807 3c01 	strb.w	r3, [r7, #-1]
   18484:	ab30      	add	r3, sp, #192	; 0xc0
   18486:	1a5b      	subs	r3, r3, r1
   18488:	930d      	str	r3, [sp, #52]	; 0x34
   1848a:	460f      	mov	r7, r1
   1848c:	f7ff bb46 	b.w	17b1c <_vfprintf_r+0x254>
   18490:	2302      	movs	r3, #2
   18492:	f7ff bb25 	b.w	17ae0 <_vfprintf_r+0x218>
   18496:	991d      	ldr	r1, [sp, #116]	; 0x74
   18498:	2900      	cmp	r1, #0
   1849a:	f340 8274 	ble.w	18986 <_vfprintf_r+0x10be>
   1849e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   184a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   184a2:	4293      	cmp	r3, r2
   184a4:	bfa8      	it	ge
   184a6:	4613      	movge	r3, r2
   184a8:	2b00      	cmp	r3, #0
   184aa:	461e      	mov	r6, r3
   184ac:	dd0d      	ble.n	184ca <_vfprintf_r+0xc02>
   184ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
   184b0:	f8c8 7000 	str.w	r7, [r8]
   184b4:	3301      	adds	r3, #1
   184b6:	4434      	add	r4, r6
   184b8:	2b07      	cmp	r3, #7
   184ba:	9425      	str	r4, [sp, #148]	; 0x94
   184bc:	f8c8 6004 	str.w	r6, [r8, #4]
   184c0:	9324      	str	r3, [sp, #144]	; 0x90
   184c2:	f300 8324 	bgt.w	18b0e <_vfprintf_r+0x1246>
   184c6:	f108 0808 	add.w	r8, r8, #8
   184ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   184cc:	2e00      	cmp	r6, #0
   184ce:	bfa8      	it	ge
   184d0:	1b9b      	subge	r3, r3, r6
   184d2:	2b00      	cmp	r3, #0
   184d4:	461e      	mov	r6, r3
   184d6:	f340 80d0 	ble.w	1867a <_vfprintf_r+0xdb2>
   184da:	2e10      	cmp	r6, #16
   184dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   184de:	4dc0      	ldr	r5, [pc, #768]	; (187e0 <_vfprintf_r+0xf18>)
   184e0:	f340 80b7 	ble.w	18652 <_vfprintf_r+0xd8a>
   184e4:	4622      	mov	r2, r4
   184e6:	f04f 0a10 	mov.w	sl, #16
   184ea:	f8dd b020 	ldr.w	fp, [sp, #32]
   184ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   184f0:	e005      	b.n	184fe <_vfprintf_r+0xc36>
   184f2:	f108 0808 	add.w	r8, r8, #8
   184f6:	3e10      	subs	r6, #16
   184f8:	2e10      	cmp	r6, #16
   184fa:	f340 80a9 	ble.w	18650 <_vfprintf_r+0xd88>
   184fe:	3301      	adds	r3, #1
   18500:	3210      	adds	r2, #16
   18502:	2b07      	cmp	r3, #7
   18504:	9225      	str	r2, [sp, #148]	; 0x94
   18506:	9324      	str	r3, [sp, #144]	; 0x90
   18508:	e888 0420 	stmia.w	r8, {r5, sl}
   1850c:	ddf1      	ble.n	184f2 <_vfprintf_r+0xc2a>
   1850e:	aa23      	add	r2, sp, #140	; 0x8c
   18510:	4621      	mov	r1, r4
   18512:	4658      	mov	r0, fp
   18514:	f7fe fb44 	bl	16ba0 <__sprint_r>
   18518:	2800      	cmp	r0, #0
   1851a:	f040 8324 	bne.w	18b66 <_vfprintf_r+0x129e>
   1851e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   18520:	9b24      	ldr	r3, [sp, #144]	; 0x90
   18522:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   18526:	e7e6      	b.n	184f6 <_vfprintf_r+0xc2e>
   18528:	2d00      	cmp	r5, #0
   1852a:	bf08      	it	eq
   1852c:	2c0a      	cmpeq	r4, #10
   1852e:	d37c      	bcc.n	1862a <_vfprintf_r+0xd62>
   18530:	af30      	add	r7, sp, #192	; 0xc0
   18532:	4620      	mov	r0, r4
   18534:	4629      	mov	r1, r5
   18536:	220a      	movs	r2, #10
   18538:	2300      	movs	r3, #0
   1853a:	f7fa f87d 	bl	12638 <__aeabi_uldivmod>
   1853e:	3230      	adds	r2, #48	; 0x30
   18540:	f807 2d01 	strb.w	r2, [r7, #-1]!
   18544:	4620      	mov	r0, r4
   18546:	4629      	mov	r1, r5
   18548:	2300      	movs	r3, #0
   1854a:	220a      	movs	r2, #10
   1854c:	f7fa f874 	bl	12638 <__aeabi_uldivmod>
   18550:	4604      	mov	r4, r0
   18552:	460d      	mov	r5, r1
   18554:	ea54 0305 	orrs.w	r3, r4, r5
   18558:	d1eb      	bne.n	18532 <_vfprintf_r+0xc6a>
   1855a:	ab30      	add	r3, sp, #192	; 0xc0
   1855c:	1bdb      	subs	r3, r3, r7
   1855e:	930d      	str	r3, [sp, #52]	; 0x34
   18560:	f7ff badc 	b.w	17b1c <_vfprintf_r+0x254>
   18564:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18566:	930d      	str	r3, [sp, #52]	; 0x34
   18568:	af30      	add	r7, sp, #192	; 0xc0
   1856a:	f7ff bad7 	b.w	17b1c <_vfprintf_r+0x254>
   1856e:	aa23      	add	r2, sp, #140	; 0x8c
   18570:	990a      	ldr	r1, [sp, #40]	; 0x28
   18572:	9808      	ldr	r0, [sp, #32]
   18574:	f7fe fb14 	bl	16ba0 <__sprint_r>
   18578:	2800      	cmp	r0, #0
   1857a:	f47f af2f 	bne.w	183dc <_vfprintf_r+0xb14>
   1857e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
   18582:	9c25      	ldr	r4, [sp, #148]	; 0x94
   18584:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   18588:	f7ff bb28 	b.w	17bdc <_vfprintf_r+0x314>
   1858c:	1e5f      	subs	r7, r3, #1
   1858e:	2f00      	cmp	r7, #0
   18590:	f77f af05 	ble.w	1839e <_vfprintf_r+0xad6>
   18594:	2f10      	cmp	r7, #16
   18596:	4d92      	ldr	r5, [pc, #584]	; (187e0 <_vfprintf_r+0xf18>)
   18598:	f340 810a 	ble.w	187b0 <_vfprintf_r+0xee8>
   1859c:	f04f 0a10 	mov.w	sl, #16
   185a0:	f8dd b020 	ldr.w	fp, [sp, #32]
   185a4:	e005      	b.n	185b2 <_vfprintf_r+0xcea>
   185a6:	f108 0808 	add.w	r8, r8, #8
   185aa:	3f10      	subs	r7, #16
   185ac:	2f10      	cmp	r7, #16
   185ae:	f340 80ff 	ble.w	187b0 <_vfprintf_r+0xee8>
   185b2:	3601      	adds	r6, #1
   185b4:	3410      	adds	r4, #16
   185b6:	2e07      	cmp	r6, #7
   185b8:	9425      	str	r4, [sp, #148]	; 0x94
   185ba:	9624      	str	r6, [sp, #144]	; 0x90
   185bc:	e888 0420 	stmia.w	r8, {r5, sl}
   185c0:	ddf1      	ble.n	185a6 <_vfprintf_r+0xcde>
   185c2:	aa23      	add	r2, sp, #140	; 0x8c
   185c4:	990a      	ldr	r1, [sp, #40]	; 0x28
   185c6:	4658      	mov	r0, fp
   185c8:	f7fe faea 	bl	16ba0 <__sprint_r>
   185cc:	2800      	cmp	r0, #0
   185ce:	f47f af05 	bne.w	183dc <_vfprintf_r+0xb14>
   185d2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   185d4:	9e24      	ldr	r6, [sp, #144]	; 0x90
   185d6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   185da:	e7e6      	b.n	185aa <_vfprintf_r+0xce2>
   185dc:	990e      	ldr	r1, [sp, #56]	; 0x38
   185de:	460a      	mov	r2, r1
   185e0:	3204      	adds	r2, #4
   185e2:	680c      	ldr	r4, [r1, #0]
   185e4:	920e      	str	r2, [sp, #56]	; 0x38
   185e6:	2500      	movs	r5, #0
   185e8:	f7ff ba7a 	b.w	17ae0 <_vfprintf_r+0x218>
   185ec:	681c      	ldr	r4, [r3, #0]
   185ee:	3304      	adds	r3, #4
   185f0:	930e      	str	r3, [sp, #56]	; 0x38
   185f2:	2500      	movs	r5, #0
   185f4:	e426      	b.n	17e44 <_vfprintf_r+0x57c>
   185f6:	3301      	adds	r3, #1
   185f8:	4434      	add	r4, r6
   185fa:	2b07      	cmp	r3, #7
   185fc:	9425      	str	r4, [sp, #148]	; 0x94
   185fe:	9324      	str	r3, [sp, #144]	; 0x90
   18600:	e888 0060 	stmia.w	r8, {r5, r6}
   18604:	f77f ab63 	ble.w	17cce <_vfprintf_r+0x406>
   18608:	e6d6      	b.n	183b8 <_vfprintf_r+0xaf0>
   1860a:	3204      	adds	r2, #4
   1860c:	681c      	ldr	r4, [r3, #0]
   1860e:	920e      	str	r2, [sp, #56]	; 0x38
   18610:	2301      	movs	r3, #1
   18612:	2500      	movs	r5, #0
   18614:	f7ff ba64 	b.w	17ae0 <_vfprintf_r+0x218>
   18618:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1861a:	6814      	ldr	r4, [r2, #0]
   1861c:	4613      	mov	r3, r2
   1861e:	3304      	adds	r3, #4
   18620:	17e5      	asrs	r5, r4, #31
   18622:	930e      	str	r3, [sp, #56]	; 0x38
   18624:	4622      	mov	r2, r4
   18626:	462b      	mov	r3, r5
   18628:	e460      	b.n	17eec <_vfprintf_r+0x624>
   1862a:	f8dd b018 	ldr.w	fp, [sp, #24]
   1862e:	f8cd b018 	str.w	fp, [sp, #24]
   18632:	af40      	add	r7, sp, #256	; 0x100
   18634:	3430      	adds	r4, #48	; 0x30
   18636:	2301      	movs	r3, #1
   18638:	f807 4d41 	strb.w	r4, [r7, #-65]!
   1863c:	930d      	str	r3, [sp, #52]	; 0x34
   1863e:	f7ff ba6d 	b.w	17b1c <_vfprintf_r+0x254>
   18642:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   18646:	f7fb fc25 	bl	13e94 <__retarget_lock_release_recursive>
   1864a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   1864e:	e5af      	b.n	181b0 <_vfprintf_r+0x8e8>
   18650:	4614      	mov	r4, r2
   18652:	3301      	adds	r3, #1
   18654:	4434      	add	r4, r6
   18656:	2b07      	cmp	r3, #7
   18658:	9425      	str	r4, [sp, #148]	; 0x94
   1865a:	9324      	str	r3, [sp, #144]	; 0x90
   1865c:	e888 0060 	stmia.w	r8, {r5, r6}
   18660:	f340 816d 	ble.w	1893e <_vfprintf_r+0x1076>
   18664:	aa23      	add	r2, sp, #140	; 0x8c
   18666:	990a      	ldr	r1, [sp, #40]	; 0x28
   18668:	9808      	ldr	r0, [sp, #32]
   1866a:	f7fe fa99 	bl	16ba0 <__sprint_r>
   1866e:	2800      	cmp	r0, #0
   18670:	f47f aeb4 	bne.w	183dc <_vfprintf_r+0xb14>
   18674:	9c25      	ldr	r4, [sp, #148]	; 0x94
   18676:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1867a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1867c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1867e:	4293      	cmp	r3, r2
   18680:	f280 8158 	bge.w	18934 <_vfprintf_r+0x106c>
   18684:	9a24      	ldr	r2, [sp, #144]	; 0x90
   18686:	9814      	ldr	r0, [sp, #80]	; 0x50
   18688:	9915      	ldr	r1, [sp, #84]	; 0x54
   1868a:	f8c8 1000 	str.w	r1, [r8]
   1868e:	3201      	adds	r2, #1
   18690:	4404      	add	r4, r0
   18692:	2a07      	cmp	r2, #7
   18694:	9425      	str	r4, [sp, #148]	; 0x94
   18696:	f8c8 0004 	str.w	r0, [r8, #4]
   1869a:	9224      	str	r2, [sp, #144]	; 0x90
   1869c:	f300 8152 	bgt.w	18944 <_vfprintf_r+0x107c>
   186a0:	f108 0808 	add.w	r8, r8, #8
   186a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   186a6:	9910      	ldr	r1, [sp, #64]	; 0x40
   186a8:	1ad3      	subs	r3, r2, r3
   186aa:	1a56      	subs	r6, r2, r1
   186ac:	429e      	cmp	r6, r3
   186ae:	bfa8      	it	ge
   186b0:	461e      	movge	r6, r3
   186b2:	2e00      	cmp	r6, #0
   186b4:	dd0e      	ble.n	186d4 <_vfprintf_r+0xe0c>
   186b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
   186b8:	f8c8 6004 	str.w	r6, [r8, #4]
   186bc:	3201      	adds	r2, #1
   186be:	440f      	add	r7, r1
   186c0:	4434      	add	r4, r6
   186c2:	2a07      	cmp	r2, #7
   186c4:	f8c8 7000 	str.w	r7, [r8]
   186c8:	9425      	str	r4, [sp, #148]	; 0x94
   186ca:	9224      	str	r2, [sp, #144]	; 0x90
   186cc:	f300 823c 	bgt.w	18b48 <_vfprintf_r+0x1280>
   186d0:	f108 0808 	add.w	r8, r8, #8
   186d4:	2e00      	cmp	r6, #0
   186d6:	bfac      	ite	ge
   186d8:	1b9e      	subge	r6, r3, r6
   186da:	461e      	movlt	r6, r3
   186dc:	2e00      	cmp	r6, #0
   186de:	f77f aaf8 	ble.w	17cd2 <_vfprintf_r+0x40a>
   186e2:	2e10      	cmp	r6, #16
   186e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   186e6:	4d3e      	ldr	r5, [pc, #248]	; (187e0 <_vfprintf_r+0xf18>)
   186e8:	dd85      	ble.n	185f6 <_vfprintf_r+0xd2e>
   186ea:	2710      	movs	r7, #16
   186ec:	f8dd a020 	ldr.w	sl, [sp, #32]
   186f0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   186f4:	e005      	b.n	18702 <_vfprintf_r+0xe3a>
   186f6:	f108 0808 	add.w	r8, r8, #8
   186fa:	3e10      	subs	r6, #16
   186fc:	2e10      	cmp	r6, #16
   186fe:	f77f af7a 	ble.w	185f6 <_vfprintf_r+0xd2e>
   18702:	3301      	adds	r3, #1
   18704:	3410      	adds	r4, #16
   18706:	2b07      	cmp	r3, #7
   18708:	9425      	str	r4, [sp, #148]	; 0x94
   1870a:	9324      	str	r3, [sp, #144]	; 0x90
   1870c:	e888 00a0 	stmia.w	r8, {r5, r7}
   18710:	ddf1      	ble.n	186f6 <_vfprintf_r+0xe2e>
   18712:	aa23      	add	r2, sp, #140	; 0x8c
   18714:	4659      	mov	r1, fp
   18716:	4650      	mov	r0, sl
   18718:	f7fe fa42 	bl	16ba0 <__sprint_r>
   1871c:	2800      	cmp	r0, #0
   1871e:	f040 8176 	bne.w	18a0e <_vfprintf_r+0x1146>
   18722:	9c25      	ldr	r4, [sp, #148]	; 0x94
   18724:	9b24      	ldr	r3, [sp, #144]	; 0x90
   18726:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1872a:	e7e6      	b.n	186fa <_vfprintf_r+0xe32>
   1872c:	9b06      	ldr	r3, [sp, #24]
   1872e:	07d8      	lsls	r0, r3, #31
   18730:	f53f adff 	bmi.w	18332 <_vfprintf_r+0xa6a>
   18734:	3601      	adds	r6, #1
   18736:	3401      	adds	r4, #1
   18738:	2301      	movs	r3, #1
   1873a:	2e07      	cmp	r6, #7
   1873c:	9425      	str	r4, [sp, #148]	; 0x94
   1873e:	9624      	str	r6, [sp, #144]	; 0x90
   18740:	f8c8 7000 	str.w	r7, [r8]
   18744:	f8c8 3004 	str.w	r3, [r8, #4]
   18748:	f77f ae27 	ble.w	1839a <_vfprintf_r+0xad2>
   1874c:	aa23      	add	r2, sp, #140	; 0x8c
   1874e:	990a      	ldr	r1, [sp, #40]	; 0x28
   18750:	9808      	ldr	r0, [sp, #32]
   18752:	f7fe fa25 	bl	16ba0 <__sprint_r>
   18756:	2800      	cmp	r0, #0
   18758:	f47f ae40 	bne.w	183dc <_vfprintf_r+0xb14>
   1875c:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1875e:	9e24      	ldr	r6, [sp, #144]	; 0x90
   18760:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   18764:	e61b      	b.n	1839e <_vfprintf_r+0xad6>
   18766:	aa23      	add	r2, sp, #140	; 0x8c
   18768:	990a      	ldr	r1, [sp, #40]	; 0x28
   1876a:	9808      	ldr	r0, [sp, #32]
   1876c:	f7fe fa18 	bl	16ba0 <__sprint_r>
   18770:	2800      	cmp	r0, #0
   18772:	f47f ae33 	bne.w	183dc <_vfprintf_r+0xb14>
   18776:	9c25      	ldr	r4, [sp, #148]	; 0x94
   18778:	9e24      	ldr	r6, [sp, #144]	; 0x90
   1877a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1877e:	e5e6      	b.n	1834e <_vfprintf_r+0xa86>
   18780:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   18782:	3507      	adds	r5, #7
   18784:	f025 0507 	bic.w	r5, r5, #7
   18788:	e9d5 2300 	ldrd	r2, r3, [r5]
   1878c:	f105 0108 	add.w	r1, r5, #8
   18790:	910e      	str	r1, [sp, #56]	; 0x38
   18792:	4614      	mov	r4, r2
   18794:	461d      	mov	r5, r3
   18796:	f7ff bba9 	b.w	17eec <_vfprintf_r+0x624>
   1879a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1879c:	3507      	adds	r5, #7
   1879e:	f025 0307 	bic.w	r3, r5, #7
   187a2:	f103 0208 	add.w	r2, r3, #8
   187a6:	920e      	str	r2, [sp, #56]	; 0x38
   187a8:	e9d3 4500 	ldrd	r4, r5, [r3]
   187ac:	f7ff bb4a 	b.w	17e44 <_vfprintf_r+0x57c>
   187b0:	3601      	adds	r6, #1
   187b2:	443c      	add	r4, r7
   187b4:	2e07      	cmp	r6, #7
   187b6:	9425      	str	r4, [sp, #148]	; 0x94
   187b8:	9624      	str	r6, [sp, #144]	; 0x90
   187ba:	e888 00a0 	stmia.w	r8, {r5, r7}
   187be:	f77f adec 	ble.w	1839a <_vfprintf_r+0xad2>
   187c2:	e7c3      	b.n	1874c <_vfprintf_r+0xe84>
   187c4:	aa23      	add	r2, sp, #140	; 0x8c
   187c6:	990a      	ldr	r1, [sp, #40]	; 0x28
   187c8:	9808      	ldr	r0, [sp, #32]
   187ca:	f7fe f9e9 	bl	16ba0 <__sprint_r>
   187ce:	2800      	cmp	r0, #0
   187d0:	f47f ae04 	bne.w	183dc <_vfprintf_r+0xb14>
   187d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   187d6:	9e24      	ldr	r6, [sp, #144]	; 0x90
   187d8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   187dc:	e5c6      	b.n	1836c <_vfprintf_r+0xaa4>
   187de:	bf00      	nop
   187e0:	00023d18 	.word	0x00023d18
   187e4:	af30      	add	r7, sp, #192	; 0xc0
   187e6:	f7ff b999 	b.w	17b1c <_vfprintf_r+0x254>
   187ea:	aa23      	add	r2, sp, #140	; 0x8c
   187ec:	990a      	ldr	r1, [sp, #40]	; 0x28
   187ee:	9808      	ldr	r0, [sp, #32]
   187f0:	f7fe f9d6 	bl	16ba0 <__sprint_r>
   187f4:	2800      	cmp	r0, #0
   187f6:	f47f adf1 	bne.w	183dc <_vfprintf_r+0xb14>
   187fa:	9c25      	ldr	r4, [sp, #148]	; 0x94
   187fc:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   18800:	f7ff ba11 	b.w	17c26 <_vfprintf_r+0x35e>
   18804:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   18808:	4264      	negs	r4, r4
   1880a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   1880e:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
   18812:	2301      	movs	r3, #1
   18814:	f7ff b968 	b.w	17ae8 <_vfprintf_r+0x220>
   18818:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   1881a:	4622      	mov	r2, r4
   1881c:	4620      	mov	r0, r4
   1881e:	9c12      	ldr	r4, [sp, #72]	; 0x48
   18820:	4623      	mov	r3, r4
   18822:	4621      	mov	r1, r4
   18824:	f002 fc0e 	bl	1b044 <__aeabi_dcmpun>
   18828:	2800      	cmp	r0, #0
   1882a:	f040 828c 	bne.w	18d46 <_vfprintf_r+0x147e>
   1882e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18830:	3301      	adds	r3, #1
   18832:	f026 0320 	bic.w	r3, r6, #32
   18836:	930d      	str	r3, [sp, #52]	; 0x34
   18838:	f000 8091 	beq.w	1895e <_vfprintf_r+0x1096>
   1883c:	2b47      	cmp	r3, #71	; 0x47
   1883e:	d104      	bne.n	1884a <_vfprintf_r+0xf82>
   18840:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18842:	2b00      	cmp	r3, #0
   18844:	bf08      	it	eq
   18846:	2301      	moveq	r3, #1
   18848:	9309      	str	r3, [sp, #36]	; 0x24
   1884a:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   1884e:	9306      	str	r3, [sp, #24]
   18850:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18852:	f1b3 0a00 	subs.w	sl, r3, #0
   18856:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   18858:	9307      	str	r3, [sp, #28]
   1885a:	bfbb      	ittet	lt
   1885c:	4653      	movlt	r3, sl
   1885e:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
   18862:	2300      	movge	r3, #0
   18864:	232d      	movlt	r3, #45	; 0x2d
   18866:	2e66      	cmp	r6, #102	; 0x66
   18868:	930f      	str	r3, [sp, #60]	; 0x3c
   1886a:	f000 817f 	beq.w	18b6c <_vfprintf_r+0x12a4>
   1886e:	2e46      	cmp	r6, #70	; 0x46
   18870:	f000 81d4 	beq.w	18c1c <_vfprintf_r+0x1354>
   18874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18876:	9a07      	ldr	r2, [sp, #28]
   18878:	2b45      	cmp	r3, #69	; 0x45
   1887a:	bf0c      	ite	eq
   1887c:	9b09      	ldreq	r3, [sp, #36]	; 0x24
   1887e:	9d09      	ldrne	r5, [sp, #36]	; 0x24
   18880:	a821      	add	r0, sp, #132	; 0x84
   18882:	a91e      	add	r1, sp, #120	; 0x78
   18884:	bf08      	it	eq
   18886:	1c5d      	addeq	r5, r3, #1
   18888:	9004      	str	r0, [sp, #16]
   1888a:	9103      	str	r1, [sp, #12]
   1888c:	a81d      	add	r0, sp, #116	; 0x74
   1888e:	2102      	movs	r1, #2
   18890:	9002      	str	r0, [sp, #8]
   18892:	4653      	mov	r3, sl
   18894:	9501      	str	r5, [sp, #4]
   18896:	9100      	str	r1, [sp, #0]
   18898:	9808      	ldr	r0, [sp, #32]
   1889a:	f000 fd25 	bl	192e8 <_dtoa_r>
   1889e:	2e67      	cmp	r6, #103	; 0x67
   188a0:	4607      	mov	r7, r0
   188a2:	f040 81af 	bne.w	18c04 <_vfprintf_r+0x133c>
   188a6:	f01b 0f01 	tst.w	fp, #1
   188aa:	f000 8213 	beq.w	18cd4 <_vfprintf_r+0x140c>
   188ae:	197c      	adds	r4, r7, r5
   188b0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   188b2:	9807      	ldr	r0, [sp, #28]
   188b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   188b6:	4651      	mov	r1, sl
   188b8:	f7f9 fafa 	bl	11eb0 <__aeabi_dcmpeq>
   188bc:	2800      	cmp	r0, #0
   188be:	f040 8132 	bne.w	18b26 <_vfprintf_r+0x125e>
   188c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   188c4:	42a3      	cmp	r3, r4
   188c6:	d206      	bcs.n	188d6 <_vfprintf_r+0x100e>
   188c8:	2130      	movs	r1, #48	; 0x30
   188ca:	1c5a      	adds	r2, r3, #1
   188cc:	9221      	str	r2, [sp, #132]	; 0x84
   188ce:	7019      	strb	r1, [r3, #0]
   188d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   188d2:	429c      	cmp	r4, r3
   188d4:	d8f9      	bhi.n	188ca <_vfprintf_r+0x1002>
   188d6:	1bdb      	subs	r3, r3, r7
   188d8:	9311      	str	r3, [sp, #68]	; 0x44
   188da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   188dc:	2b47      	cmp	r3, #71	; 0x47
   188de:	f000 80b9 	beq.w	18a54 <_vfprintf_r+0x118c>
   188e2:	2e65      	cmp	r6, #101	; 0x65
   188e4:	f340 8276 	ble.w	18dd4 <_vfprintf_r+0x150c>
   188e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   188ea:	9310      	str	r3, [sp, #64]	; 0x40
   188ec:	2e66      	cmp	r6, #102	; 0x66
   188ee:	f000 8162 	beq.w	18bb6 <_vfprintf_r+0x12ee>
   188f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   188f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   188f6:	4619      	mov	r1, r3
   188f8:	4291      	cmp	r1, r2
   188fa:	f300 814f 	bgt.w	18b9c <_vfprintf_r+0x12d4>
   188fe:	f01b 0f01 	tst.w	fp, #1
   18902:	f040 8209 	bne.w	18d18 <_vfprintf_r+0x1450>
   18906:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1890a:	9307      	str	r3, [sp, #28]
   1890c:	920d      	str	r2, [sp, #52]	; 0x34
   1890e:	2667      	movs	r6, #103	; 0x67
   18910:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18912:	2b00      	cmp	r3, #0
   18914:	f040 8096 	bne.w	18a44 <_vfprintf_r+0x117c>
   18918:	9309      	str	r3, [sp, #36]	; 0x24
   1891a:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
   1891e:	f7ff b905 	b.w	17b2c <_vfprintf_r+0x264>
   18922:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   18926:	f7fb fab5 	bl	13e94 <__retarget_lock_release_recursive>
   1892a:	f04f 33ff 	mov.w	r3, #4294967295
   1892e:	930b      	str	r3, [sp, #44]	; 0x2c
   18930:	f7ff ba30 	b.w	17d94 <_vfprintf_r+0x4cc>
   18934:	9a06      	ldr	r2, [sp, #24]
   18936:	07d5      	lsls	r5, r2, #31
   18938:	f57f aeb4 	bpl.w	186a4 <_vfprintf_r+0xddc>
   1893c:	e6a2      	b.n	18684 <_vfprintf_r+0xdbc>
   1893e:	f108 0808 	add.w	r8, r8, #8
   18942:	e69a      	b.n	1867a <_vfprintf_r+0xdb2>
   18944:	aa23      	add	r2, sp, #140	; 0x8c
   18946:	990a      	ldr	r1, [sp, #40]	; 0x28
   18948:	9808      	ldr	r0, [sp, #32]
   1894a:	f7fe f929 	bl	16ba0 <__sprint_r>
   1894e:	2800      	cmp	r0, #0
   18950:	f47f ad44 	bne.w	183dc <_vfprintf_r+0xb14>
   18954:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   18956:	9c25      	ldr	r4, [sp, #148]	; 0x94
   18958:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   1895c:	e6a2      	b.n	186a4 <_vfprintf_r+0xddc>
   1895e:	2306      	movs	r3, #6
   18960:	9309      	str	r3, [sp, #36]	; 0x24
   18962:	e772      	b.n	1884a <_vfprintf_r+0xf82>
   18964:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   18968:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
   1896c:	f7ff bbc7 	b.w	180fe <_vfprintf_r+0x836>
   18970:	aa23      	add	r2, sp, #140	; 0x8c
   18972:	990a      	ldr	r1, [sp, #40]	; 0x28
   18974:	9808      	ldr	r0, [sp, #32]
   18976:	f7fe f913 	bl	16ba0 <__sprint_r>
   1897a:	2800      	cmp	r0, #0
   1897c:	f47f ad2e 	bne.w	183dc <_vfprintf_r+0xb14>
   18980:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   18984:	e437      	b.n	181f6 <_vfprintf_r+0x92e>
   18986:	9b24      	ldr	r3, [sp, #144]	; 0x90
   18988:	4ab4      	ldr	r2, [pc, #720]	; (18c5c <_vfprintf_r+0x1394>)
   1898a:	f8c8 2000 	str.w	r2, [r8]
   1898e:	3301      	adds	r3, #1
   18990:	3401      	adds	r4, #1
   18992:	2201      	movs	r2, #1
   18994:	2b07      	cmp	r3, #7
   18996:	9425      	str	r4, [sp, #148]	; 0x94
   18998:	9324      	str	r3, [sp, #144]	; 0x90
   1899a:	f8c8 2004 	str.w	r2, [r8, #4]
   1899e:	f300 8124 	bgt.w	18bea <_vfprintf_r+0x1322>
   189a2:	f108 0808 	add.w	r8, r8, #8
   189a6:	b929      	cbnz	r1, 189b4 <_vfprintf_r+0x10ec>
   189a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   189aa:	b91b      	cbnz	r3, 189b4 <_vfprintf_r+0x10ec>
   189ac:	9b06      	ldr	r3, [sp, #24]
   189ae:	07de      	lsls	r6, r3, #31
   189b0:	f57f a98f 	bpl.w	17cd2 <_vfprintf_r+0x40a>
   189b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   189b6:	9814      	ldr	r0, [sp, #80]	; 0x50
   189b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   189ba:	f8c8 2000 	str.w	r2, [r8]
   189be:	3301      	adds	r3, #1
   189c0:	4602      	mov	r2, r0
   189c2:	4422      	add	r2, r4
   189c4:	2b07      	cmp	r3, #7
   189c6:	9225      	str	r2, [sp, #148]	; 0x94
   189c8:	f8c8 0004 	str.w	r0, [r8, #4]
   189cc:	9324      	str	r3, [sp, #144]	; 0x90
   189ce:	f300 8169 	bgt.w	18ca4 <_vfprintf_r+0x13dc>
   189d2:	f108 0808 	add.w	r8, r8, #8
   189d6:	2900      	cmp	r1, #0
   189d8:	f2c0 8136 	blt.w	18c48 <_vfprintf_r+0x1380>
   189dc:	9911      	ldr	r1, [sp, #68]	; 0x44
   189de:	f8c8 7000 	str.w	r7, [r8]
   189e2:	3301      	adds	r3, #1
   189e4:	188c      	adds	r4, r1, r2
   189e6:	2b07      	cmp	r3, #7
   189e8:	9425      	str	r4, [sp, #148]	; 0x94
   189ea:	9324      	str	r3, [sp, #144]	; 0x90
   189ec:	f8c8 1004 	str.w	r1, [r8, #4]
   189f0:	f77f a96d 	ble.w	17cce <_vfprintf_r+0x406>
   189f4:	e4e0      	b.n	183b8 <_vfprintf_r+0xaf0>
   189f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   189f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   189fa:	6813      	ldr	r3, [r2, #0]
   189fc:	17cd      	asrs	r5, r1, #31
   189fe:	4608      	mov	r0, r1
   18a00:	3204      	adds	r2, #4
   18a02:	4629      	mov	r1, r5
   18a04:	920e      	str	r2, [sp, #56]	; 0x38
   18a06:	e9c3 0100 	strd	r0, r1, [r3]
   18a0a:	f7fe bfa9 	b.w	17960 <_vfprintf_r+0x98>
   18a0e:	46da      	mov	sl, fp
   18a10:	f7ff bbc4 	b.w	1819c <_vfprintf_r+0x8d4>
   18a14:	aa23      	add	r2, sp, #140	; 0x8c
   18a16:	990a      	ldr	r1, [sp, #40]	; 0x28
   18a18:	9808      	ldr	r0, [sp, #32]
   18a1a:	f7fe f8c1 	bl	16ba0 <__sprint_r>
   18a1e:	2800      	cmp	r0, #0
   18a20:	f47f acdc 	bne.w	183dc <_vfprintf_r+0xb14>
   18a24:	9c25      	ldr	r4, [sp, #148]	; 0x94
   18a26:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   18a2a:	f7ff bbfd 	b.w	18228 <_vfprintf_r+0x960>
   18a2e:	4638      	mov	r0, r7
   18a30:	9409      	str	r4, [sp, #36]	; 0x24
   18a32:	f7fc fd85 	bl	15540 <strlen>
   18a36:	950e      	str	r5, [sp, #56]	; 0x38
   18a38:	900d      	str	r0, [sp, #52]	; 0x34
   18a3a:	f8cd b018 	str.w	fp, [sp, #24]
   18a3e:	4603      	mov	r3, r0
   18a40:	f7ff ba36 	b.w	17eb0 <_vfprintf_r+0x5e8>
   18a44:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   18a48:	2300      	movs	r3, #0
   18a4a:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
   18a4e:	9309      	str	r3, [sp, #36]	; 0x24
   18a50:	f7ff b86f 	b.w	17b32 <_vfprintf_r+0x26a>
   18a54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   18a56:	9310      	str	r3, [sp, #64]	; 0x40
   18a58:	461a      	mov	r2, r3
   18a5a:	3303      	adds	r3, #3
   18a5c:	db04      	blt.n	18a68 <_vfprintf_r+0x11a0>
   18a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18a60:	4619      	mov	r1, r3
   18a62:	4291      	cmp	r1, r2
   18a64:	f6bf af45 	bge.w	188f2 <_vfprintf_r+0x102a>
   18a68:	3e02      	subs	r6, #2
   18a6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18a6c:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
   18a70:	3b01      	subs	r3, #1
   18a72:	2b00      	cmp	r3, #0
   18a74:	931d      	str	r3, [sp, #116]	; 0x74
   18a76:	bfbd      	ittte	lt
   18a78:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   18a7a:	f1c3 0301 	rsblt	r3, r3, #1
   18a7e:	222d      	movlt	r2, #45	; 0x2d
   18a80:	222b      	movge	r2, #43	; 0x2b
   18a82:	2b09      	cmp	r3, #9
   18a84:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
   18a88:	f340 813e 	ble.w	18d08 <_vfprintf_r+0x1440>
   18a8c:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
   18a90:	4620      	mov	r0, r4
   18a92:	4d73      	ldr	r5, [pc, #460]	; (18c60 <_vfprintf_r+0x1398>)
   18a94:	e000      	b.n	18a98 <_vfprintf_r+0x11d0>
   18a96:	4610      	mov	r0, r2
   18a98:	fb85 1203 	smull	r1, r2, r5, r3
   18a9c:	17d9      	asrs	r1, r3, #31
   18a9e:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   18aa2:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   18aa6:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   18aaa:	3230      	adds	r2, #48	; 0x30
   18aac:	2909      	cmp	r1, #9
   18aae:	f800 2c01 	strb.w	r2, [r0, #-1]
   18ab2:	460b      	mov	r3, r1
   18ab4:	f100 32ff 	add.w	r2, r0, #4294967295
   18ab8:	dced      	bgt.n	18a96 <_vfprintf_r+0x11ce>
   18aba:	3330      	adds	r3, #48	; 0x30
   18abc:	3802      	subs	r0, #2
   18abe:	b2d9      	uxtb	r1, r3
   18ac0:	4284      	cmp	r4, r0
   18ac2:	f802 1c01 	strb.w	r1, [r2, #-1]
   18ac6:	f240 8190 	bls.w	18dea <_vfprintf_r+0x1522>
   18aca:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
   18ace:	4613      	mov	r3, r2
   18ad0:	e001      	b.n	18ad6 <_vfprintf_r+0x120e>
   18ad2:	f813 1b01 	ldrb.w	r1, [r3], #1
   18ad6:	f800 1b01 	strb.w	r1, [r0], #1
   18ada:	42a3      	cmp	r3, r4
   18adc:	d1f9      	bne.n	18ad2 <_vfprintf_r+0x120a>
   18ade:	3301      	adds	r3, #1
   18ae0:	1a9b      	subs	r3, r3, r2
   18ae2:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
   18ae6:	4413      	add	r3, r2
   18ae8:	aa1f      	add	r2, sp, #124	; 0x7c
   18aea:	1a9b      	subs	r3, r3, r2
   18aec:	9a11      	ldr	r2, [sp, #68]	; 0x44
   18aee:	9319      	str	r3, [sp, #100]	; 0x64
   18af0:	2a01      	cmp	r2, #1
   18af2:	4413      	add	r3, r2
   18af4:	930d      	str	r3, [sp, #52]	; 0x34
   18af6:	f340 8145 	ble.w	18d84 <_vfprintf_r+0x14bc>
   18afa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18afc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   18afe:	4413      	add	r3, r2
   18b00:	930d      	str	r3, [sp, #52]	; 0x34
   18b02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   18b06:	9307      	str	r3, [sp, #28]
   18b08:	2300      	movs	r3, #0
   18b0a:	9310      	str	r3, [sp, #64]	; 0x40
   18b0c:	e700      	b.n	18910 <_vfprintf_r+0x1048>
   18b0e:	aa23      	add	r2, sp, #140	; 0x8c
   18b10:	990a      	ldr	r1, [sp, #40]	; 0x28
   18b12:	9808      	ldr	r0, [sp, #32]
   18b14:	f7fe f844 	bl	16ba0 <__sprint_r>
   18b18:	2800      	cmp	r0, #0
   18b1a:	f47f ac5f 	bne.w	183dc <_vfprintf_r+0xb14>
   18b1e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   18b20:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   18b24:	e4d1      	b.n	184ca <_vfprintf_r+0xc02>
   18b26:	4623      	mov	r3, r4
   18b28:	e6d5      	b.n	188d6 <_vfprintf_r+0x100e>
   18b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18b2c:	9710      	str	r7, [sp, #64]	; 0x40
   18b2e:	2b06      	cmp	r3, #6
   18b30:	bf28      	it	cs
   18b32:	2306      	movcs	r3, #6
   18b34:	9709      	str	r7, [sp, #36]	; 0x24
   18b36:	46ba      	mov	sl, r7
   18b38:	9307      	str	r3, [sp, #28]
   18b3a:	950e      	str	r5, [sp, #56]	; 0x38
   18b3c:	f8cd b018 	str.w	fp, [sp, #24]
   18b40:	930d      	str	r3, [sp, #52]	; 0x34
   18b42:	4f48      	ldr	r7, [pc, #288]	; (18c64 <_vfprintf_r+0x139c>)
   18b44:	f7fe bff2 	b.w	17b2c <_vfprintf_r+0x264>
   18b48:	aa23      	add	r2, sp, #140	; 0x8c
   18b4a:	990a      	ldr	r1, [sp, #40]	; 0x28
   18b4c:	9808      	ldr	r0, [sp, #32]
   18b4e:	f7fe f827 	bl	16ba0 <__sprint_r>
   18b52:	2800      	cmp	r0, #0
   18b54:	f47f ac42 	bne.w	183dc <_vfprintf_r+0xb14>
   18b58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   18b5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   18b5c:	9c25      	ldr	r4, [sp, #148]	; 0x94
   18b5e:	1ad3      	subs	r3, r2, r3
   18b60:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   18b64:	e5b6      	b.n	186d4 <_vfprintf_r+0xe0c>
   18b66:	46a2      	mov	sl, r4
   18b68:	f7ff bb18 	b.w	1819c <_vfprintf_r+0x8d4>
   18b6c:	a821      	add	r0, sp, #132	; 0x84
   18b6e:	a91e      	add	r1, sp, #120	; 0x78
   18b70:	9d09      	ldr	r5, [sp, #36]	; 0x24
   18b72:	9004      	str	r0, [sp, #16]
   18b74:	9103      	str	r1, [sp, #12]
   18b76:	a81d      	add	r0, sp, #116	; 0x74
   18b78:	2103      	movs	r1, #3
   18b7a:	9002      	str	r0, [sp, #8]
   18b7c:	9a07      	ldr	r2, [sp, #28]
   18b7e:	9501      	str	r5, [sp, #4]
   18b80:	4653      	mov	r3, sl
   18b82:	9100      	str	r1, [sp, #0]
   18b84:	9808      	ldr	r0, [sp, #32]
   18b86:	f000 fbaf 	bl	192e8 <_dtoa_r>
   18b8a:	4607      	mov	r7, r0
   18b8c:	1944      	adds	r4, r0, r5
   18b8e:	783b      	ldrb	r3, [r7, #0]
   18b90:	2b30      	cmp	r3, #48	; 0x30
   18b92:	f000 80ca 	beq.w	18d2a <_vfprintf_r+0x1462>
   18b96:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   18b98:	442c      	add	r4, r5
   18b9a:	e689      	b.n	188b0 <_vfprintf_r+0xfe8>
   18b9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   18b9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18ba0:	4413      	add	r3, r2
   18ba2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   18ba4:	930d      	str	r3, [sp, #52]	; 0x34
   18ba6:	2a00      	cmp	r2, #0
   18ba8:	f340 80e4 	ble.w	18d74 <_vfprintf_r+0x14ac>
   18bac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   18bb0:	9307      	str	r3, [sp, #28]
   18bb2:	2667      	movs	r6, #103	; 0x67
   18bb4:	e6ac      	b.n	18910 <_vfprintf_r+0x1048>
   18bb6:	2b00      	cmp	r3, #0
   18bb8:	f340 80fb 	ble.w	18db2 <_vfprintf_r+0x14ea>
   18bbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18bbe:	2a00      	cmp	r2, #0
   18bc0:	f040 80ce 	bne.w	18d60 <_vfprintf_r+0x1498>
   18bc4:	f01b 0f01 	tst.w	fp, #1
   18bc8:	f040 80ca 	bne.w	18d60 <_vfprintf_r+0x1498>
   18bcc:	9307      	str	r3, [sp, #28]
   18bce:	930d      	str	r3, [sp, #52]	; 0x34
   18bd0:	e69e      	b.n	18910 <_vfprintf_r+0x1048>
   18bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18bd4:	9307      	str	r3, [sp, #28]
   18bd6:	930d      	str	r3, [sp, #52]	; 0x34
   18bd8:	9009      	str	r0, [sp, #36]	; 0x24
   18bda:	950e      	str	r5, [sp, #56]	; 0x38
   18bdc:	f8cd b018 	str.w	fp, [sp, #24]
   18be0:	9010      	str	r0, [sp, #64]	; 0x40
   18be2:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
   18be6:	f7fe bfa1 	b.w	17b2c <_vfprintf_r+0x264>
   18bea:	aa23      	add	r2, sp, #140	; 0x8c
   18bec:	990a      	ldr	r1, [sp, #40]	; 0x28
   18bee:	9808      	ldr	r0, [sp, #32]
   18bf0:	f7fd ffd6 	bl	16ba0 <__sprint_r>
   18bf4:	2800      	cmp	r0, #0
   18bf6:	f47f abf1 	bne.w	183dc <_vfprintf_r+0xb14>
   18bfa:	991d      	ldr	r1, [sp, #116]	; 0x74
   18bfc:	9c25      	ldr	r4, [sp, #148]	; 0x94
   18bfe:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   18c02:	e6d0      	b.n	189a6 <_vfprintf_r+0x10de>
   18c04:	2e47      	cmp	r6, #71	; 0x47
   18c06:	f47f ae52 	bne.w	188ae <_vfprintf_r+0xfe6>
   18c0a:	f01b 0f01 	tst.w	fp, #1
   18c0e:	f000 80da 	beq.w	18dc6 <_vfprintf_r+0x14fe>
   18c12:	2e46      	cmp	r6, #70	; 0x46
   18c14:	eb07 0405 	add.w	r4, r7, r5
   18c18:	d0b9      	beq.n	18b8e <_vfprintf_r+0x12c6>
   18c1a:	e649      	b.n	188b0 <_vfprintf_r+0xfe8>
   18c1c:	a821      	add	r0, sp, #132	; 0x84
   18c1e:	a91e      	add	r1, sp, #120	; 0x78
   18c20:	9c09      	ldr	r4, [sp, #36]	; 0x24
   18c22:	9004      	str	r0, [sp, #16]
   18c24:	9103      	str	r1, [sp, #12]
   18c26:	a81d      	add	r0, sp, #116	; 0x74
   18c28:	2103      	movs	r1, #3
   18c2a:	9002      	str	r0, [sp, #8]
   18c2c:	9a07      	ldr	r2, [sp, #28]
   18c2e:	9401      	str	r4, [sp, #4]
   18c30:	4653      	mov	r3, sl
   18c32:	9100      	str	r1, [sp, #0]
   18c34:	9808      	ldr	r0, [sp, #32]
   18c36:	f000 fb57 	bl	192e8 <_dtoa_r>
   18c3a:	4625      	mov	r5, r4
   18c3c:	4607      	mov	r7, r0
   18c3e:	e7e8      	b.n	18c12 <_vfprintf_r+0x134a>
   18c40:	2300      	movs	r3, #0
   18c42:	9309      	str	r3, [sp, #36]	; 0x24
   18c44:	f7fe bec1 	b.w	179ca <_vfprintf_r+0x102>
   18c48:	424e      	negs	r6, r1
   18c4a:	3110      	adds	r1, #16
   18c4c:	4d06      	ldr	r5, [pc, #24]	; (18c68 <_vfprintf_r+0x13a0>)
   18c4e:	da43      	bge.n	18cd8 <_vfprintf_r+0x1410>
   18c50:	2410      	movs	r4, #16
   18c52:	f8dd a020 	ldr.w	sl, [sp, #32]
   18c56:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   18c5a:	e00c      	b.n	18c76 <_vfprintf_r+0x13ae>
   18c5c:	00020d98 	.word	0x00020d98
   18c60:	66666667 	.word	0x66666667
   18c64:	00023cc0 	.word	0x00023cc0
   18c68:	00023d18 	.word	0x00023d18
   18c6c:	f108 0808 	add.w	r8, r8, #8
   18c70:	3e10      	subs	r6, #16
   18c72:	2e10      	cmp	r6, #16
   18c74:	dd30      	ble.n	18cd8 <_vfprintf_r+0x1410>
   18c76:	3301      	adds	r3, #1
   18c78:	3210      	adds	r2, #16
   18c7a:	2b07      	cmp	r3, #7
   18c7c:	9225      	str	r2, [sp, #148]	; 0x94
   18c7e:	9324      	str	r3, [sp, #144]	; 0x90
   18c80:	f8c8 5000 	str.w	r5, [r8]
   18c84:	f8c8 4004 	str.w	r4, [r8, #4]
   18c88:	ddf0      	ble.n	18c6c <_vfprintf_r+0x13a4>
   18c8a:	aa23      	add	r2, sp, #140	; 0x8c
   18c8c:	4659      	mov	r1, fp
   18c8e:	4650      	mov	r0, sl
   18c90:	f7fd ff86 	bl	16ba0 <__sprint_r>
   18c94:	2800      	cmp	r0, #0
   18c96:	f47f aeba 	bne.w	18a0e <_vfprintf_r+0x1146>
   18c9a:	9a25      	ldr	r2, [sp, #148]	; 0x94
   18c9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   18c9e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   18ca2:	e7e5      	b.n	18c70 <_vfprintf_r+0x13a8>
   18ca4:	aa23      	add	r2, sp, #140	; 0x8c
   18ca6:	990a      	ldr	r1, [sp, #40]	; 0x28
   18ca8:	9808      	ldr	r0, [sp, #32]
   18caa:	f7fd ff79 	bl	16ba0 <__sprint_r>
   18cae:	2800      	cmp	r0, #0
   18cb0:	f47f ab94 	bne.w	183dc <_vfprintf_r+0xb14>
   18cb4:	991d      	ldr	r1, [sp, #116]	; 0x74
   18cb6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   18cb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   18cba:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   18cbe:	e68a      	b.n	189d6 <_vfprintf_r+0x110e>
   18cc0:	9808      	ldr	r0, [sp, #32]
   18cc2:	aa23      	add	r2, sp, #140	; 0x8c
   18cc4:	4651      	mov	r1, sl
   18cc6:	f7fd ff6b 	bl	16ba0 <__sprint_r>
   18cca:	2800      	cmp	r0, #0
   18ccc:	f43f aa64 	beq.w	18198 <_vfprintf_r+0x8d0>
   18cd0:	f7ff ba64 	b.w	1819c <_vfprintf_r+0x8d4>
   18cd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   18cd6:	e5fe      	b.n	188d6 <_vfprintf_r+0x100e>
   18cd8:	3301      	adds	r3, #1
   18cda:	4432      	add	r2, r6
   18cdc:	2b07      	cmp	r3, #7
   18cde:	e888 0060 	stmia.w	r8, {r5, r6}
   18ce2:	9225      	str	r2, [sp, #148]	; 0x94
   18ce4:	9324      	str	r3, [sp, #144]	; 0x90
   18ce6:	f108 0808 	add.w	r8, r8, #8
   18cea:	f77f ae77 	ble.w	189dc <_vfprintf_r+0x1114>
   18cee:	aa23      	add	r2, sp, #140	; 0x8c
   18cf0:	990a      	ldr	r1, [sp, #40]	; 0x28
   18cf2:	9808      	ldr	r0, [sp, #32]
   18cf4:	f7fd ff54 	bl	16ba0 <__sprint_r>
   18cf8:	2800      	cmp	r0, #0
   18cfa:	f47f ab6f 	bne.w	183dc <_vfprintf_r+0xb14>
   18cfe:	9a25      	ldr	r2, [sp, #148]	; 0x94
   18d00:	9b24      	ldr	r3, [sp, #144]	; 0x90
   18d02:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   18d06:	e669      	b.n	189dc <_vfprintf_r+0x1114>
   18d08:	3330      	adds	r3, #48	; 0x30
   18d0a:	2230      	movs	r2, #48	; 0x30
   18d0c:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
   18d10:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
   18d14:	ab20      	add	r3, sp, #128	; 0x80
   18d16:	e6e7      	b.n	18ae8 <_vfprintf_r+0x1220>
   18d18:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18d1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   18d1c:	4413      	add	r3, r2
   18d1e:	930d      	str	r3, [sp, #52]	; 0x34
   18d20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   18d24:	9307      	str	r3, [sp, #28]
   18d26:	2667      	movs	r6, #103	; 0x67
   18d28:	e5f2      	b.n	18910 <_vfprintf_r+0x1048>
   18d2a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   18d2c:	9807      	ldr	r0, [sp, #28]
   18d2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   18d30:	4651      	mov	r1, sl
   18d32:	f7f9 f8bd 	bl	11eb0 <__aeabi_dcmpeq>
   18d36:	2800      	cmp	r0, #0
   18d38:	f47f af2d 	bne.w	18b96 <_vfprintf_r+0x12ce>
   18d3c:	f1c5 0501 	rsb	r5, r5, #1
   18d40:	951d      	str	r5, [sp, #116]	; 0x74
   18d42:	442c      	add	r4, r5
   18d44:	e5b4      	b.n	188b0 <_vfprintf_r+0xfe8>
   18d46:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18d48:	4f33      	ldr	r7, [pc, #204]	; (18e18 <_vfprintf_r+0x1550>)
   18d4a:	2b00      	cmp	r3, #0
   18d4c:	bfb6      	itet	lt
   18d4e:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
   18d52:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
   18d56:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
   18d5a:	4b30      	ldr	r3, [pc, #192]	; (18e1c <_vfprintf_r+0x1554>)
   18d5c:	f7ff b9d1 	b.w	18102 <_vfprintf_r+0x83a>
   18d60:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18d62:	9a14      	ldr	r2, [sp, #80]	; 0x50
   18d64:	4413      	add	r3, r2
   18d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18d68:	441a      	add	r2, r3
   18d6a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   18d6e:	920d      	str	r2, [sp, #52]	; 0x34
   18d70:	9307      	str	r3, [sp, #28]
   18d72:	e5cd      	b.n	18910 <_vfprintf_r+0x1048>
   18d74:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18d76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   18d78:	f1c3 0301 	rsb	r3, r3, #1
   18d7c:	441a      	add	r2, r3
   18d7e:	4613      	mov	r3, r2
   18d80:	920d      	str	r2, [sp, #52]	; 0x34
   18d82:	e713      	b.n	18bac <_vfprintf_r+0x12e4>
   18d84:	f01b 0301 	ands.w	r3, fp, #1
   18d88:	9310      	str	r3, [sp, #64]	; 0x40
   18d8a:	f47f aeb6 	bne.w	18afa <_vfprintf_r+0x1232>
   18d8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18d90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   18d94:	9307      	str	r3, [sp, #28]
   18d96:	e5bb      	b.n	18910 <_vfprintf_r+0x1048>
   18d98:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   18d9a:	f899 6001 	ldrb.w	r6, [r9, #1]
   18d9e:	6823      	ldr	r3, [r4, #0]
   18da0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   18da4:	9309      	str	r3, [sp, #36]	; 0x24
   18da6:	4623      	mov	r3, r4
   18da8:	3304      	adds	r3, #4
   18daa:	4681      	mov	r9, r0
   18dac:	930e      	str	r3, [sp, #56]	; 0x38
   18dae:	f7fe be0a 	b.w	179c6 <_vfprintf_r+0xfe>
   18db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18db4:	b913      	cbnz	r3, 18dbc <_vfprintf_r+0x14f4>
   18db6:	f01b 0f01 	tst.w	fp, #1
   18dba:	d002      	beq.n	18dc2 <_vfprintf_r+0x14fa>
   18dbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   18dbe:	3301      	adds	r3, #1
   18dc0:	e7d1      	b.n	18d66 <_vfprintf_r+0x149e>
   18dc2:	2301      	movs	r3, #1
   18dc4:	e702      	b.n	18bcc <_vfprintf_r+0x1304>
   18dc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
   18dc8:	1bdb      	subs	r3, r3, r7
   18dca:	9311      	str	r3, [sp, #68]	; 0x44
   18dcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18dce:	2b47      	cmp	r3, #71	; 0x47
   18dd0:	f43f ae40 	beq.w	18a54 <_vfprintf_r+0x118c>
   18dd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   18dd6:	9310      	str	r3, [sp, #64]	; 0x40
   18dd8:	e647      	b.n	18a6a <_vfprintf_r+0x11a2>
   18dda:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   18dde:	f7ff b81d 	b.w	17e1c <_vfprintf_r+0x554>
   18de2:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   18de6:	f7ff b918 	b.w	1801a <_vfprintf_r+0x752>
   18dea:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
   18dee:	e67b      	b.n	18ae8 <_vfprintf_r+0x1220>
   18df0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   18df4:	f7ff b866 	b.w	17ec4 <_vfprintf_r+0x5fc>
   18df8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   18dfc:	f7ff b9ac 	b.w	18158 <_vfprintf_r+0x890>
   18e00:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   18e04:	f7ff b934 	b.w	18070 <_vfprintf_r+0x7a8>
   18e08:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   18e0c:	f7ff b8b0 	b.w	17f70 <_vfprintf_r+0x6a8>
   18e10:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   18e14:	f7ff b945 	b.w	180a2 <_vfprintf_r+0x7da>
   18e18:	00023c94 	.word	0x00023c94
   18e1c:	00023c90 	.word	0x00023c90

00018e20 <__sbprintf>:
   18e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18e24:	460c      	mov	r4, r1
   18e26:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   18e2a:	8989      	ldrh	r1, [r1, #12]
   18e2c:	6e66      	ldr	r6, [r4, #100]	; 0x64
   18e2e:	89e5      	ldrh	r5, [r4, #14]
   18e30:	9619      	str	r6, [sp, #100]	; 0x64
   18e32:	f021 0102 	bic.w	r1, r1, #2
   18e36:	4606      	mov	r6, r0
   18e38:	69e0      	ldr	r0, [r4, #28]
   18e3a:	f8ad 100c 	strh.w	r1, [sp, #12]
   18e3e:	4617      	mov	r7, r2
   18e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
   18e44:	6a62      	ldr	r2, [r4, #36]	; 0x24
   18e46:	f8ad 500e 	strh.w	r5, [sp, #14]
   18e4a:	4698      	mov	r8, r3
   18e4c:	ad1a      	add	r5, sp, #104	; 0x68
   18e4e:	2300      	movs	r3, #0
   18e50:	9007      	str	r0, [sp, #28]
   18e52:	a816      	add	r0, sp, #88	; 0x58
   18e54:	9209      	str	r2, [sp, #36]	; 0x24
   18e56:	9306      	str	r3, [sp, #24]
   18e58:	9500      	str	r5, [sp, #0]
   18e5a:	9504      	str	r5, [sp, #16]
   18e5c:	9102      	str	r1, [sp, #8]
   18e5e:	9105      	str	r1, [sp, #20]
   18e60:	f7fb f812 	bl	13e88 <__retarget_lock_init_recursive>
   18e64:	4643      	mov	r3, r8
   18e66:	463a      	mov	r2, r7
   18e68:	4669      	mov	r1, sp
   18e6a:	4630      	mov	r0, r6
   18e6c:	f7fe fd2c 	bl	178c8 <_vfprintf_r>
   18e70:	1e05      	subs	r5, r0, #0
   18e72:	db07      	blt.n	18e84 <__sbprintf+0x64>
   18e74:	4630      	mov	r0, r6
   18e76:	4669      	mov	r1, sp
   18e78:	f001 fa00 	bl	1a27c <_fflush_r>
   18e7c:	2800      	cmp	r0, #0
   18e7e:	bf18      	it	ne
   18e80:	f04f 35ff 	movne.w	r5, #4294967295
   18e84:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   18e88:	065b      	lsls	r3, r3, #25
   18e8a:	d503      	bpl.n	18e94 <__sbprintf+0x74>
   18e8c:	89a3      	ldrh	r3, [r4, #12]
   18e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18e92:	81a3      	strh	r3, [r4, #12]
   18e94:	9816      	ldr	r0, [sp, #88]	; 0x58
   18e96:	f7fa fff9 	bl	13e8c <__retarget_lock_close_recursive>
   18e9a:	4628      	mov	r0, r5
   18e9c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   18ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018ea4 <__swbuf_r>:
   18ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18ea6:	460d      	mov	r5, r1
   18ea8:	4614      	mov	r4, r2
   18eaa:	4606      	mov	r6, r0
   18eac:	b110      	cbz	r0, 18eb4 <__swbuf_r+0x10>
   18eae:	6b83      	ldr	r3, [r0, #56]	; 0x38
   18eb0:	2b00      	cmp	r3, #0
   18eb2:	d04b      	beq.n	18f4c <__swbuf_r+0xa8>
   18eb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   18eb8:	69a3      	ldr	r3, [r4, #24]
   18eba:	60a3      	str	r3, [r4, #8]
   18ebc:	b291      	uxth	r1, r2
   18ebe:	0708      	lsls	r0, r1, #28
   18ec0:	d539      	bpl.n	18f36 <__swbuf_r+0x92>
   18ec2:	6923      	ldr	r3, [r4, #16]
   18ec4:	2b00      	cmp	r3, #0
   18ec6:	d036      	beq.n	18f36 <__swbuf_r+0x92>
   18ec8:	b2ed      	uxtb	r5, r5
   18eca:	0489      	lsls	r1, r1, #18
   18ecc:	462f      	mov	r7, r5
   18ece:	d515      	bpl.n	18efc <__swbuf_r+0x58>
   18ed0:	6822      	ldr	r2, [r4, #0]
   18ed2:	6961      	ldr	r1, [r4, #20]
   18ed4:	1ad3      	subs	r3, r2, r3
   18ed6:	428b      	cmp	r3, r1
   18ed8:	da1c      	bge.n	18f14 <__swbuf_r+0x70>
   18eda:	3301      	adds	r3, #1
   18edc:	68a1      	ldr	r1, [r4, #8]
   18ede:	1c50      	adds	r0, r2, #1
   18ee0:	3901      	subs	r1, #1
   18ee2:	60a1      	str	r1, [r4, #8]
   18ee4:	6020      	str	r0, [r4, #0]
   18ee6:	7015      	strb	r5, [r2, #0]
   18ee8:	6962      	ldr	r2, [r4, #20]
   18eea:	429a      	cmp	r2, r3
   18eec:	d01a      	beq.n	18f24 <__swbuf_r+0x80>
   18eee:	89a3      	ldrh	r3, [r4, #12]
   18ef0:	07db      	lsls	r3, r3, #31
   18ef2:	d501      	bpl.n	18ef8 <__swbuf_r+0x54>
   18ef4:	2d0a      	cmp	r5, #10
   18ef6:	d015      	beq.n	18f24 <__swbuf_r+0x80>
   18ef8:	4638      	mov	r0, r7
   18efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18efc:	6e61      	ldr	r1, [r4, #100]	; 0x64
   18efe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   18f02:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   18f06:	81a2      	strh	r2, [r4, #12]
   18f08:	6822      	ldr	r2, [r4, #0]
   18f0a:	6661      	str	r1, [r4, #100]	; 0x64
   18f0c:	6961      	ldr	r1, [r4, #20]
   18f0e:	1ad3      	subs	r3, r2, r3
   18f10:	428b      	cmp	r3, r1
   18f12:	dbe2      	blt.n	18eda <__swbuf_r+0x36>
   18f14:	4621      	mov	r1, r4
   18f16:	4630      	mov	r0, r6
   18f18:	f001 f9b0 	bl	1a27c <_fflush_r>
   18f1c:	b940      	cbnz	r0, 18f30 <__swbuf_r+0x8c>
   18f1e:	6822      	ldr	r2, [r4, #0]
   18f20:	2301      	movs	r3, #1
   18f22:	e7db      	b.n	18edc <__swbuf_r+0x38>
   18f24:	4621      	mov	r1, r4
   18f26:	4630      	mov	r0, r6
   18f28:	f001 f9a8 	bl	1a27c <_fflush_r>
   18f2c:	2800      	cmp	r0, #0
   18f2e:	d0e3      	beq.n	18ef8 <__swbuf_r+0x54>
   18f30:	f04f 37ff 	mov.w	r7, #4294967295
   18f34:	e7e0      	b.n	18ef8 <__swbuf_r+0x54>
   18f36:	4621      	mov	r1, r4
   18f38:	4630      	mov	r0, r6
   18f3a:	f000 f859 	bl	18ff0 <__swsetup_r>
   18f3e:	2800      	cmp	r0, #0
   18f40:	d1f6      	bne.n	18f30 <__swbuf_r+0x8c>
   18f42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   18f46:	6923      	ldr	r3, [r4, #16]
   18f48:	b291      	uxth	r1, r2
   18f4a:	e7bd      	b.n	18ec8 <__swbuf_r+0x24>
   18f4c:	f001 f9ee 	bl	1a32c <__sinit>
   18f50:	e7b0      	b.n	18eb4 <__swbuf_r+0x10>
   18f52:	bf00      	nop

00018f54 <_wcrtomb_r>:
   18f54:	b5f0      	push	{r4, r5, r6, r7, lr}
   18f56:	4606      	mov	r6, r0
   18f58:	b085      	sub	sp, #20
   18f5a:	461f      	mov	r7, r3
   18f5c:	b189      	cbz	r1, 18f82 <_wcrtomb_r+0x2e>
   18f5e:	4c10      	ldr	r4, [pc, #64]	; (18fa0 <_wcrtomb_r+0x4c>)
   18f60:	4d10      	ldr	r5, [pc, #64]	; (18fa4 <_wcrtomb_r+0x50>)
   18f62:	6824      	ldr	r4, [r4, #0]
   18f64:	6b64      	ldr	r4, [r4, #52]	; 0x34
   18f66:	2c00      	cmp	r4, #0
   18f68:	bf08      	it	eq
   18f6a:	462c      	moveq	r4, r5
   18f6c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   18f70:	47a0      	blx	r4
   18f72:	1c43      	adds	r3, r0, #1
   18f74:	d103      	bne.n	18f7e <_wcrtomb_r+0x2a>
   18f76:	2200      	movs	r2, #0
   18f78:	238a      	movs	r3, #138	; 0x8a
   18f7a:	603a      	str	r2, [r7, #0]
   18f7c:	6033      	str	r3, [r6, #0]
   18f7e:	b005      	add	sp, #20
   18f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18f82:	460c      	mov	r4, r1
   18f84:	4906      	ldr	r1, [pc, #24]	; (18fa0 <_wcrtomb_r+0x4c>)
   18f86:	4a07      	ldr	r2, [pc, #28]	; (18fa4 <_wcrtomb_r+0x50>)
   18f88:	6809      	ldr	r1, [r1, #0]
   18f8a:	6b49      	ldr	r1, [r1, #52]	; 0x34
   18f8c:	2900      	cmp	r1, #0
   18f8e:	bf08      	it	eq
   18f90:	4611      	moveq	r1, r2
   18f92:	4622      	mov	r2, r4
   18f94:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
   18f98:	a901      	add	r1, sp, #4
   18f9a:	47a0      	blx	r4
   18f9c:	e7e9      	b.n	18f72 <_wcrtomb_r+0x1e>
   18f9e:	bf00      	nop
   18fa0:	20000018 	.word	0x20000018
   18fa4:	20000448 	.word	0x20000448

00018fa8 <__ascii_wctomb>:
   18fa8:	b121      	cbz	r1, 18fb4 <__ascii_wctomb+0xc>
   18faa:	2aff      	cmp	r2, #255	; 0xff
   18fac:	d804      	bhi.n	18fb8 <__ascii_wctomb+0x10>
   18fae:	700a      	strb	r2, [r1, #0]
   18fb0:	2001      	movs	r0, #1
   18fb2:	4770      	bx	lr
   18fb4:	4608      	mov	r0, r1
   18fb6:	4770      	bx	lr
   18fb8:	238a      	movs	r3, #138	; 0x8a
   18fba:	6003      	str	r3, [r0, #0]
   18fbc:	f04f 30ff 	mov.w	r0, #4294967295
   18fc0:	4770      	bx	lr
   18fc2:	bf00      	nop

00018fc4 <_write_r>:
   18fc4:	b570      	push	{r4, r5, r6, lr}
   18fc6:	460d      	mov	r5, r1
   18fc8:	4c08      	ldr	r4, [pc, #32]	; (18fec <_write_r+0x28>)
   18fca:	4611      	mov	r1, r2
   18fcc:	4606      	mov	r6, r0
   18fce:	461a      	mov	r2, r3
   18fd0:	4628      	mov	r0, r5
   18fd2:	2300      	movs	r3, #0
   18fd4:	6023      	str	r3, [r4, #0]
   18fd6:	f7e7 fb67 	bl	6a8 <_write>
   18fda:	1c43      	adds	r3, r0, #1
   18fdc:	d000      	beq.n	18fe0 <_write_r+0x1c>
   18fde:	bd70      	pop	{r4, r5, r6, pc}
   18fe0:	6823      	ldr	r3, [r4, #0]
   18fe2:	2b00      	cmp	r3, #0
   18fe4:	d0fb      	beq.n	18fde <_write_r+0x1a>
   18fe6:	6033      	str	r3, [r6, #0]
   18fe8:	bd70      	pop	{r4, r5, r6, pc}
   18fea:	bf00      	nop
   18fec:	2000fcc0 	.word	0x2000fcc0

00018ff0 <__swsetup_r>:
   18ff0:	b538      	push	{r3, r4, r5, lr}
   18ff2:	4b30      	ldr	r3, [pc, #192]	; (190b4 <__swsetup_r+0xc4>)
   18ff4:	681b      	ldr	r3, [r3, #0]
   18ff6:	4605      	mov	r5, r0
   18ff8:	460c      	mov	r4, r1
   18ffa:	b113      	cbz	r3, 19002 <__swsetup_r+0x12>
   18ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   18ffe:	2a00      	cmp	r2, #0
   19000:	d038      	beq.n	19074 <__swsetup_r+0x84>
   19002:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   19006:	b293      	uxth	r3, r2
   19008:	0718      	lsls	r0, r3, #28
   1900a:	d50c      	bpl.n	19026 <__swsetup_r+0x36>
   1900c:	6920      	ldr	r0, [r4, #16]
   1900e:	b1a8      	cbz	r0, 1903c <__swsetup_r+0x4c>
   19010:	f013 0201 	ands.w	r2, r3, #1
   19014:	d01e      	beq.n	19054 <__swsetup_r+0x64>
   19016:	6963      	ldr	r3, [r4, #20]
   19018:	2200      	movs	r2, #0
   1901a:	425b      	negs	r3, r3
   1901c:	61a3      	str	r3, [r4, #24]
   1901e:	60a2      	str	r2, [r4, #8]
   19020:	b1f0      	cbz	r0, 19060 <__swsetup_r+0x70>
   19022:	2000      	movs	r0, #0
   19024:	bd38      	pop	{r3, r4, r5, pc}
   19026:	06d9      	lsls	r1, r3, #27
   19028:	d53c      	bpl.n	190a4 <__swsetup_r+0xb4>
   1902a:	0758      	lsls	r0, r3, #29
   1902c:	d426      	bmi.n	1907c <__swsetup_r+0x8c>
   1902e:	6920      	ldr	r0, [r4, #16]
   19030:	f042 0308 	orr.w	r3, r2, #8
   19034:	81a3      	strh	r3, [r4, #12]
   19036:	b29b      	uxth	r3, r3
   19038:	2800      	cmp	r0, #0
   1903a:	d1e9      	bne.n	19010 <__swsetup_r+0x20>
   1903c:	f403 7220 	and.w	r2, r3, #640	; 0x280
   19040:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   19044:	d0e4      	beq.n	19010 <__swsetup_r+0x20>
   19046:	4628      	mov	r0, r5
   19048:	4621      	mov	r1, r4
   1904a:	f7fa ff53 	bl	13ef4 <__smakebuf_r>
   1904e:	89a3      	ldrh	r3, [r4, #12]
   19050:	6920      	ldr	r0, [r4, #16]
   19052:	e7dd      	b.n	19010 <__swsetup_r+0x20>
   19054:	0799      	lsls	r1, r3, #30
   19056:	bf58      	it	pl
   19058:	6962      	ldrpl	r2, [r4, #20]
   1905a:	60a2      	str	r2, [r4, #8]
   1905c:	2800      	cmp	r0, #0
   1905e:	d1e0      	bne.n	19022 <__swsetup_r+0x32>
   19060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19064:	061a      	lsls	r2, r3, #24
   19066:	d5dd      	bpl.n	19024 <__swsetup_r+0x34>
   19068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1906c:	81a3      	strh	r3, [r4, #12]
   1906e:	f04f 30ff 	mov.w	r0, #4294967295
   19072:	bd38      	pop	{r3, r4, r5, pc}
   19074:	4618      	mov	r0, r3
   19076:	f001 f959 	bl	1a32c <__sinit>
   1907a:	e7c2      	b.n	19002 <__swsetup_r+0x12>
   1907c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1907e:	b151      	cbz	r1, 19096 <__swsetup_r+0xa6>
   19080:	f104 0340 	add.w	r3, r4, #64	; 0x40
   19084:	4299      	cmp	r1, r3
   19086:	d004      	beq.n	19092 <__swsetup_r+0xa2>
   19088:	4628      	mov	r0, r5
   1908a:	f001 fa75 	bl	1a578 <_free_r>
   1908e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   19092:	2300      	movs	r3, #0
   19094:	6323      	str	r3, [r4, #48]	; 0x30
   19096:	2300      	movs	r3, #0
   19098:	6920      	ldr	r0, [r4, #16]
   1909a:	6063      	str	r3, [r4, #4]
   1909c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   190a0:	6020      	str	r0, [r4, #0]
   190a2:	e7c5      	b.n	19030 <__swsetup_r+0x40>
   190a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   190a8:	2309      	movs	r3, #9
   190aa:	602b      	str	r3, [r5, #0]
   190ac:	f04f 30ff 	mov.w	r0, #4294967295
   190b0:	81a2      	strh	r2, [r4, #12]
   190b2:	bd38      	pop	{r3, r4, r5, pc}
   190b4:	20000018 	.word	0x20000018

000190b8 <__register_exitproc>:
   190b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   190bc:	4d2c      	ldr	r5, [pc, #176]	; (19170 <__register_exitproc+0xb8>)
   190be:	4606      	mov	r6, r0
   190c0:	6828      	ldr	r0, [r5, #0]
   190c2:	4698      	mov	r8, r3
   190c4:	460f      	mov	r7, r1
   190c6:	4691      	mov	r9, r2
   190c8:	f7fa fee2 	bl	13e90 <__retarget_lock_acquire_recursive>
   190cc:	4b29      	ldr	r3, [pc, #164]	; (19174 <__register_exitproc+0xbc>)
   190ce:	681c      	ldr	r4, [r3, #0]
   190d0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   190d4:	2b00      	cmp	r3, #0
   190d6:	d03e      	beq.n	19156 <__register_exitproc+0x9e>
   190d8:	685a      	ldr	r2, [r3, #4]
   190da:	2a1f      	cmp	r2, #31
   190dc:	dc1c      	bgt.n	19118 <__register_exitproc+0x60>
   190de:	f102 0e01 	add.w	lr, r2, #1
   190e2:	b176      	cbz	r6, 19102 <__register_exitproc+0x4a>
   190e4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   190e8:	2401      	movs	r4, #1
   190ea:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   190ee:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   190f2:	4094      	lsls	r4, r2
   190f4:	4320      	orrs	r0, r4
   190f6:	2e02      	cmp	r6, #2
   190f8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   190fc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   19100:	d023      	beq.n	1914a <__register_exitproc+0x92>
   19102:	3202      	adds	r2, #2
   19104:	f8c3 e004 	str.w	lr, [r3, #4]
   19108:	6828      	ldr	r0, [r5, #0]
   1910a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   1910e:	f7fa fec1 	bl	13e94 <__retarget_lock_release_recursive>
   19112:	2000      	movs	r0, #0
   19114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19118:	4b17      	ldr	r3, [pc, #92]	; (19178 <__register_exitproc+0xc0>)
   1911a:	b30b      	cbz	r3, 19160 <__register_exitproc+0xa8>
   1911c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   19120:	f7fa ff32 	bl	13f88 <malloc>
   19124:	4603      	mov	r3, r0
   19126:	b1d8      	cbz	r0, 19160 <__register_exitproc+0xa8>
   19128:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   1912c:	6002      	str	r2, [r0, #0]
   1912e:	2100      	movs	r1, #0
   19130:	6041      	str	r1, [r0, #4]
   19132:	460a      	mov	r2, r1
   19134:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   19138:	f04f 0e01 	mov.w	lr, #1
   1913c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   19140:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   19144:	2e00      	cmp	r6, #0
   19146:	d0dc      	beq.n	19102 <__register_exitproc+0x4a>
   19148:	e7cc      	b.n	190e4 <__register_exitproc+0x2c>
   1914a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   1914e:	430c      	orrs	r4, r1
   19150:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   19154:	e7d5      	b.n	19102 <__register_exitproc+0x4a>
   19156:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1915a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1915e:	e7bb      	b.n	190d8 <__register_exitproc+0x20>
   19160:	6828      	ldr	r0, [r5, #0]
   19162:	f7fa fe97 	bl	13e94 <__retarget_lock_release_recursive>
   19166:	f04f 30ff 	mov.w	r0, #4294967295
   1916a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1916e:	bf00      	nop
   19170:	200009c4 	.word	0x200009c4
   19174:	00023578 	.word	0x00023578
   19178:	00013f89 	.word	0x00013f89

0001917c <register_fini>:
   1917c:	4b02      	ldr	r3, [pc, #8]	; (19188 <register_fini+0xc>)
   1917e:	b113      	cbz	r3, 19186 <register_fini+0xa>
   19180:	4802      	ldr	r0, [pc, #8]	; (1918c <register_fini+0x10>)
   19182:	f000 b805 	b.w	19190 <atexit>
   19186:	4770      	bx	lr
   19188:	00000000 	.word	0x00000000
   1918c:	0001a39d 	.word	0x0001a39d

00019190 <atexit>:
   19190:	2300      	movs	r3, #0
   19192:	4601      	mov	r1, r0
   19194:	461a      	mov	r2, r3
   19196:	4618      	mov	r0, r3
   19198:	f7ff bf8e 	b.w	190b8 <__register_exitproc>

0001919c <_close_r>:
   1919c:	b538      	push	{r3, r4, r5, lr}
   1919e:	4c07      	ldr	r4, [pc, #28]	; (191bc <_close_r+0x20>)
   191a0:	2300      	movs	r3, #0
   191a2:	4605      	mov	r5, r0
   191a4:	4608      	mov	r0, r1
   191a6:	6023      	str	r3, [r4, #0]
   191a8:	f7e7 fa94 	bl	6d4 <_close>
   191ac:	1c43      	adds	r3, r0, #1
   191ae:	d000      	beq.n	191b2 <_close_r+0x16>
   191b0:	bd38      	pop	{r3, r4, r5, pc}
   191b2:	6823      	ldr	r3, [r4, #0]
   191b4:	2b00      	cmp	r3, #0
   191b6:	d0fb      	beq.n	191b0 <_close_r+0x14>
   191b8:	602b      	str	r3, [r5, #0]
   191ba:	bd38      	pop	{r3, r4, r5, pc}
   191bc:	2000fcc0 	.word	0x2000fcc0

000191c0 <quorem>:
   191c0:	6902      	ldr	r2, [r0, #16]
   191c2:	690b      	ldr	r3, [r1, #16]
   191c4:	4293      	cmp	r3, r2
   191c6:	f300 808d 	bgt.w	192e4 <quorem+0x124>
   191ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191ce:	f103 38ff 	add.w	r8, r3, #4294967295
   191d2:	f101 0714 	add.w	r7, r1, #20
   191d6:	f100 0b14 	add.w	fp, r0, #20
   191da:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   191de:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   191e2:	ea4f 0488 	mov.w	r4, r8, lsl #2
   191e6:	b083      	sub	sp, #12
   191e8:	3201      	adds	r2, #1
   191ea:	fbb3 f9f2 	udiv	r9, r3, r2
   191ee:	eb0b 0304 	add.w	r3, fp, r4
   191f2:	9400      	str	r4, [sp, #0]
   191f4:	eb07 0a04 	add.w	sl, r7, r4
   191f8:	9301      	str	r3, [sp, #4]
   191fa:	f1b9 0f00 	cmp.w	r9, #0
   191fe:	d039      	beq.n	19274 <quorem+0xb4>
   19200:	2500      	movs	r5, #0
   19202:	462e      	mov	r6, r5
   19204:	46bc      	mov	ip, r7
   19206:	46de      	mov	lr, fp
   19208:	f85c 4b04 	ldr.w	r4, [ip], #4
   1920c:	f8de 3000 	ldr.w	r3, [lr]
   19210:	b2a2      	uxth	r2, r4
   19212:	fb09 5502 	mla	r5, r9, r2, r5
   19216:	0c22      	lsrs	r2, r4, #16
   19218:	0c2c      	lsrs	r4, r5, #16
   1921a:	fb09 4202 	mla	r2, r9, r2, r4
   1921e:	b2ad      	uxth	r5, r5
   19220:	1b75      	subs	r5, r6, r5
   19222:	b296      	uxth	r6, r2
   19224:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   19228:	fa15 f383 	uxtah	r3, r5, r3
   1922c:	eb06 4623 	add.w	r6, r6, r3, asr #16
   19230:	b29b      	uxth	r3, r3
   19232:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   19236:	45e2      	cmp	sl, ip
   19238:	ea4f 4512 	mov.w	r5, r2, lsr #16
   1923c:	f84e 3b04 	str.w	r3, [lr], #4
   19240:	ea4f 4626 	mov.w	r6, r6, asr #16
   19244:	d2e0      	bcs.n	19208 <quorem+0x48>
   19246:	9b00      	ldr	r3, [sp, #0]
   19248:	f85b 3003 	ldr.w	r3, [fp, r3]
   1924c:	b993      	cbnz	r3, 19274 <quorem+0xb4>
   1924e:	9c01      	ldr	r4, [sp, #4]
   19250:	1f23      	subs	r3, r4, #4
   19252:	459b      	cmp	fp, r3
   19254:	d20c      	bcs.n	19270 <quorem+0xb0>
   19256:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1925a:	b94b      	cbnz	r3, 19270 <quorem+0xb0>
   1925c:	f1a4 0308 	sub.w	r3, r4, #8
   19260:	e002      	b.n	19268 <quorem+0xa8>
   19262:	681a      	ldr	r2, [r3, #0]
   19264:	3b04      	subs	r3, #4
   19266:	b91a      	cbnz	r2, 19270 <quorem+0xb0>
   19268:	459b      	cmp	fp, r3
   1926a:	f108 38ff 	add.w	r8, r8, #4294967295
   1926e:	d3f8      	bcc.n	19262 <quorem+0xa2>
   19270:	f8c0 8010 	str.w	r8, [r0, #16]
   19274:	4604      	mov	r4, r0
   19276:	f001 fcc3 	bl	1ac00 <__mcmp>
   1927a:	2800      	cmp	r0, #0
   1927c:	db2e      	blt.n	192dc <quorem+0x11c>
   1927e:	f109 0901 	add.w	r9, r9, #1
   19282:	465d      	mov	r5, fp
   19284:	2300      	movs	r3, #0
   19286:	f857 1b04 	ldr.w	r1, [r7], #4
   1928a:	6828      	ldr	r0, [r5, #0]
   1928c:	b28a      	uxth	r2, r1
   1928e:	1a9a      	subs	r2, r3, r2
   19290:	0c0b      	lsrs	r3, r1, #16
   19292:	fa12 f280 	uxtah	r2, r2, r0
   19296:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   1929a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   1929e:	b292      	uxth	r2, r2
   192a0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   192a4:	45ba      	cmp	sl, r7
   192a6:	f845 2b04 	str.w	r2, [r5], #4
   192aa:	ea4f 4323 	mov.w	r3, r3, asr #16
   192ae:	d2ea      	bcs.n	19286 <quorem+0xc6>
   192b0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   192b4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   192b8:	b982      	cbnz	r2, 192dc <quorem+0x11c>
   192ba:	1f1a      	subs	r2, r3, #4
   192bc:	4593      	cmp	fp, r2
   192be:	d20b      	bcs.n	192d8 <quorem+0x118>
   192c0:	f853 2c04 	ldr.w	r2, [r3, #-4]
   192c4:	b942      	cbnz	r2, 192d8 <quorem+0x118>
   192c6:	3b08      	subs	r3, #8
   192c8:	e002      	b.n	192d0 <quorem+0x110>
   192ca:	681a      	ldr	r2, [r3, #0]
   192cc:	3b04      	subs	r3, #4
   192ce:	b91a      	cbnz	r2, 192d8 <quorem+0x118>
   192d0:	459b      	cmp	fp, r3
   192d2:	f108 38ff 	add.w	r8, r8, #4294967295
   192d6:	d3f8      	bcc.n	192ca <quorem+0x10a>
   192d8:	f8c4 8010 	str.w	r8, [r4, #16]
   192dc:	4648      	mov	r0, r9
   192de:	b003      	add	sp, #12
   192e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   192e4:	2000      	movs	r0, #0
   192e6:	4770      	bx	lr

000192e8 <_dtoa_r>:
   192e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192ec:	6c01      	ldr	r1, [r0, #64]	; 0x40
   192ee:	b09b      	sub	sp, #108	; 0x6c
   192f0:	4604      	mov	r4, r0
   192f2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   192f4:	4692      	mov	sl, r2
   192f6:	469b      	mov	fp, r3
   192f8:	b141      	cbz	r1, 1930c <_dtoa_r+0x24>
   192fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
   192fc:	604a      	str	r2, [r1, #4]
   192fe:	2301      	movs	r3, #1
   19300:	4093      	lsls	r3, r2
   19302:	608b      	str	r3, [r1, #8]
   19304:	f001 faa4 	bl	1a850 <_Bfree>
   19308:	2300      	movs	r3, #0
   1930a:	6423      	str	r3, [r4, #64]	; 0x40
   1930c:	f1bb 0f00 	cmp.w	fp, #0
   19310:	465d      	mov	r5, fp
   19312:	db35      	blt.n	19380 <_dtoa_r+0x98>
   19314:	2300      	movs	r3, #0
   19316:	6033      	str	r3, [r6, #0]
   19318:	4b9d      	ldr	r3, [pc, #628]	; (19590 <_dtoa_r+0x2a8>)
   1931a:	43ab      	bics	r3, r5
   1931c:	d015      	beq.n	1934a <_dtoa_r+0x62>
   1931e:	4650      	mov	r0, sl
   19320:	4659      	mov	r1, fp
   19322:	2200      	movs	r2, #0
   19324:	2300      	movs	r3, #0
   19326:	f7f8 fdc3 	bl	11eb0 <__aeabi_dcmpeq>
   1932a:	4680      	mov	r8, r0
   1932c:	2800      	cmp	r0, #0
   1932e:	d02d      	beq.n	1938c <_dtoa_r+0xa4>
   19330:	9a26      	ldr	r2, [sp, #152]	; 0x98
   19332:	2301      	movs	r3, #1
   19334:	6013      	str	r3, [r2, #0]
   19336:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   19338:	2b00      	cmp	r3, #0
   1933a:	f000 80bd 	beq.w	194b8 <_dtoa_r+0x1d0>
   1933e:	4895      	ldr	r0, [pc, #596]	; (19594 <_dtoa_r+0x2ac>)
   19340:	6018      	str	r0, [r3, #0]
   19342:	3801      	subs	r0, #1
   19344:	b01b      	add	sp, #108	; 0x6c
   19346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1934a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1934c:	f242 730f 	movw	r3, #9999	; 0x270f
   19350:	6013      	str	r3, [r2, #0]
   19352:	f1ba 0f00 	cmp.w	sl, #0
   19356:	d10d      	bne.n	19374 <_dtoa_r+0x8c>
   19358:	f3c5 0513 	ubfx	r5, r5, #0, #20
   1935c:	b955      	cbnz	r5, 19374 <_dtoa_r+0x8c>
   1935e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   19360:	488d      	ldr	r0, [pc, #564]	; (19598 <_dtoa_r+0x2b0>)
   19362:	2b00      	cmp	r3, #0
   19364:	d0ee      	beq.n	19344 <_dtoa_r+0x5c>
   19366:	f100 0308 	add.w	r3, r0, #8
   1936a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   1936c:	6013      	str	r3, [r2, #0]
   1936e:	b01b      	add	sp, #108	; 0x6c
   19370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19374:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   19376:	4889      	ldr	r0, [pc, #548]	; (1959c <_dtoa_r+0x2b4>)
   19378:	2b00      	cmp	r3, #0
   1937a:	d0e3      	beq.n	19344 <_dtoa_r+0x5c>
   1937c:	1cc3      	adds	r3, r0, #3
   1937e:	e7f4      	b.n	1936a <_dtoa_r+0x82>
   19380:	2301      	movs	r3, #1
   19382:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   19386:	6033      	str	r3, [r6, #0]
   19388:	46ab      	mov	fp, r5
   1938a:	e7c5      	b.n	19318 <_dtoa_r+0x30>
   1938c:	aa18      	add	r2, sp, #96	; 0x60
   1938e:	ab19      	add	r3, sp, #100	; 0x64
   19390:	9201      	str	r2, [sp, #4]
   19392:	9300      	str	r3, [sp, #0]
   19394:	4652      	mov	r2, sl
   19396:	465b      	mov	r3, fp
   19398:	4620      	mov	r0, r4
   1939a:	f001 fcd1 	bl	1ad40 <__d2b>
   1939e:	0d2b      	lsrs	r3, r5, #20
   193a0:	4681      	mov	r9, r0
   193a2:	d071      	beq.n	19488 <_dtoa_r+0x1a0>
   193a4:	f3cb 0213 	ubfx	r2, fp, #0, #20
   193a8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   193ac:	9f18      	ldr	r7, [sp, #96]	; 0x60
   193ae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   193b2:	4650      	mov	r0, sl
   193b4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   193b8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   193bc:	2200      	movs	r2, #0
   193be:	4b78      	ldr	r3, [pc, #480]	; (195a0 <_dtoa_r+0x2b8>)
   193c0:	f7f8 f95a 	bl	11678 <__aeabi_dsub>
   193c4:	a36c      	add	r3, pc, #432	; (adr r3, 19578 <_dtoa_r+0x290>)
   193c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   193ca:	f7f8 fb09 	bl	119e0 <__aeabi_dmul>
   193ce:	a36c      	add	r3, pc, #432	; (adr r3, 19580 <_dtoa_r+0x298>)
   193d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   193d4:	f7f8 f952 	bl	1167c <__adddf3>
   193d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   193dc:	4630      	mov	r0, r6
   193de:	f7f8 fa99 	bl	11914 <__aeabi_i2d>
   193e2:	a369      	add	r3, pc, #420	; (adr r3, 19588 <_dtoa_r+0x2a0>)
   193e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   193e8:	f7f8 fafa 	bl	119e0 <__aeabi_dmul>
   193ec:	4602      	mov	r2, r0
   193ee:	460b      	mov	r3, r1
   193f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   193f4:	f7f8 f942 	bl	1167c <__adddf3>
   193f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   193fc:	f7f8 fd8a 	bl	11f14 <__aeabi_d2iz>
   19400:	2200      	movs	r2, #0
   19402:	9002      	str	r0, [sp, #8]
   19404:	2300      	movs	r3, #0
   19406:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1940a:	f7f8 fd5b 	bl	11ec4 <__aeabi_dcmplt>
   1940e:	2800      	cmp	r0, #0
   19410:	f040 8173 	bne.w	196fa <_dtoa_r+0x412>
   19414:	9d02      	ldr	r5, [sp, #8]
   19416:	2d16      	cmp	r5, #22
   19418:	f200 815d 	bhi.w	196d6 <_dtoa_r+0x3ee>
   1941c:	4b61      	ldr	r3, [pc, #388]	; (195a4 <_dtoa_r+0x2bc>)
   1941e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   19422:	e9d3 0100 	ldrd	r0, r1, [r3]
   19426:	4652      	mov	r2, sl
   19428:	465b      	mov	r3, fp
   1942a:	f7f8 fd69 	bl	11f00 <__aeabi_dcmpgt>
   1942e:	2800      	cmp	r0, #0
   19430:	f000 81c5 	beq.w	197be <_dtoa_r+0x4d6>
   19434:	1e6b      	subs	r3, r5, #1
   19436:	9302      	str	r3, [sp, #8]
   19438:	2300      	movs	r3, #0
   1943a:	930e      	str	r3, [sp, #56]	; 0x38
   1943c:	1bbf      	subs	r7, r7, r6
   1943e:	1e7b      	subs	r3, r7, #1
   19440:	9306      	str	r3, [sp, #24]
   19442:	f100 8154 	bmi.w	196ee <_dtoa_r+0x406>
   19446:	2300      	movs	r3, #0
   19448:	9308      	str	r3, [sp, #32]
   1944a:	9b02      	ldr	r3, [sp, #8]
   1944c:	2b00      	cmp	r3, #0
   1944e:	f2c0 8145 	blt.w	196dc <_dtoa_r+0x3f4>
   19452:	9a06      	ldr	r2, [sp, #24]
   19454:	930d      	str	r3, [sp, #52]	; 0x34
   19456:	4611      	mov	r1, r2
   19458:	4419      	add	r1, r3
   1945a:	2300      	movs	r3, #0
   1945c:	9106      	str	r1, [sp, #24]
   1945e:	930c      	str	r3, [sp, #48]	; 0x30
   19460:	9b24      	ldr	r3, [sp, #144]	; 0x90
   19462:	2b09      	cmp	r3, #9
   19464:	d82a      	bhi.n	194bc <_dtoa_r+0x1d4>
   19466:	2b05      	cmp	r3, #5
   19468:	f340 865b 	ble.w	1a122 <_dtoa_r+0xe3a>
   1946c:	3b04      	subs	r3, #4
   1946e:	9324      	str	r3, [sp, #144]	; 0x90
   19470:	2500      	movs	r5, #0
   19472:	9b24      	ldr	r3, [sp, #144]	; 0x90
   19474:	3b02      	subs	r3, #2
   19476:	2b03      	cmp	r3, #3
   19478:	f200 8642 	bhi.w	1a100 <_dtoa_r+0xe18>
   1947c:	e8df f013 	tbh	[pc, r3, lsl #1]
   19480:	02c903d4 	.word	0x02c903d4
   19484:	046103df 	.word	0x046103df
   19488:	9f18      	ldr	r7, [sp, #96]	; 0x60
   1948a:	9e19      	ldr	r6, [sp, #100]	; 0x64
   1948c:	443e      	add	r6, r7
   1948e:	f206 4332 	addw	r3, r6, #1074	; 0x432
   19492:	2b20      	cmp	r3, #32
   19494:	f340 818e 	ble.w	197b4 <_dtoa_r+0x4cc>
   19498:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   1949c:	f206 4012 	addw	r0, r6, #1042	; 0x412
   194a0:	409d      	lsls	r5, r3
   194a2:	fa2a f000 	lsr.w	r0, sl, r0
   194a6:	4328      	orrs	r0, r5
   194a8:	f7f8 fa24 	bl	118f4 <__aeabi_ui2d>
   194ac:	2301      	movs	r3, #1
   194ae:	3e01      	subs	r6, #1
   194b0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   194b4:	9314      	str	r3, [sp, #80]	; 0x50
   194b6:	e781      	b.n	193bc <_dtoa_r+0xd4>
   194b8:	483b      	ldr	r0, [pc, #236]	; (195a8 <_dtoa_r+0x2c0>)
   194ba:	e743      	b.n	19344 <_dtoa_r+0x5c>
   194bc:	2100      	movs	r1, #0
   194be:	6461      	str	r1, [r4, #68]	; 0x44
   194c0:	4620      	mov	r0, r4
   194c2:	9125      	str	r1, [sp, #148]	; 0x94
   194c4:	f001 f99e 	bl	1a804 <_Balloc>
   194c8:	f04f 33ff 	mov.w	r3, #4294967295
   194cc:	930a      	str	r3, [sp, #40]	; 0x28
   194ce:	9a25      	ldr	r2, [sp, #148]	; 0x94
   194d0:	930f      	str	r3, [sp, #60]	; 0x3c
   194d2:	2301      	movs	r3, #1
   194d4:	9004      	str	r0, [sp, #16]
   194d6:	6420      	str	r0, [r4, #64]	; 0x40
   194d8:	9224      	str	r2, [sp, #144]	; 0x90
   194da:	930b      	str	r3, [sp, #44]	; 0x2c
   194dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   194de:	2b00      	cmp	r3, #0
   194e0:	f2c0 80d9 	blt.w	19696 <_dtoa_r+0x3ae>
   194e4:	9a02      	ldr	r2, [sp, #8]
   194e6:	2a0e      	cmp	r2, #14
   194e8:	f300 80d5 	bgt.w	19696 <_dtoa_r+0x3ae>
   194ec:	4b2d      	ldr	r3, [pc, #180]	; (195a4 <_dtoa_r+0x2bc>)
   194ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   194f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   194f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   194fa:	9b25      	ldr	r3, [sp, #148]	; 0x94
   194fc:	2b00      	cmp	r3, #0
   194fe:	f2c0 83ba 	blt.w	19c76 <_dtoa_r+0x98e>
   19502:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   19506:	4650      	mov	r0, sl
   19508:	462a      	mov	r2, r5
   1950a:	4633      	mov	r3, r6
   1950c:	4659      	mov	r1, fp
   1950e:	f7f8 fb91 	bl	11c34 <__aeabi_ddiv>
   19512:	f7f8 fcff 	bl	11f14 <__aeabi_d2iz>
   19516:	4680      	mov	r8, r0
   19518:	f7f8 f9fc 	bl	11914 <__aeabi_i2d>
   1951c:	462a      	mov	r2, r5
   1951e:	4633      	mov	r3, r6
   19520:	f7f8 fa5e 	bl	119e0 <__aeabi_dmul>
   19524:	460b      	mov	r3, r1
   19526:	4602      	mov	r2, r0
   19528:	4659      	mov	r1, fp
   1952a:	4650      	mov	r0, sl
   1952c:	f7f8 f8a4 	bl	11678 <__aeabi_dsub>
   19530:	9d04      	ldr	r5, [sp, #16]
   19532:	f108 0330 	add.w	r3, r8, #48	; 0x30
   19536:	702b      	strb	r3, [r5, #0]
   19538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1953a:	2b01      	cmp	r3, #1
   1953c:	4606      	mov	r6, r0
   1953e:	460f      	mov	r7, r1
   19540:	f105 0501 	add.w	r5, r5, #1
   19544:	d068      	beq.n	19618 <_dtoa_r+0x330>
   19546:	2200      	movs	r2, #0
   19548:	4b18      	ldr	r3, [pc, #96]	; (195ac <_dtoa_r+0x2c4>)
   1954a:	f7f8 fa49 	bl	119e0 <__aeabi_dmul>
   1954e:	2200      	movs	r2, #0
   19550:	2300      	movs	r3, #0
   19552:	4606      	mov	r6, r0
   19554:	460f      	mov	r7, r1
   19556:	f7f8 fcab 	bl	11eb0 <__aeabi_dcmpeq>
   1955a:	2800      	cmp	r0, #0
   1955c:	f040 8088 	bne.w	19670 <_dtoa_r+0x388>
   19560:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   19564:	f04f 0a00 	mov.w	sl, #0
   19568:	f8df b040 	ldr.w	fp, [pc, #64]	; 195ac <_dtoa_r+0x2c4>
   1956c:	940c      	str	r4, [sp, #48]	; 0x30
   1956e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   19572:	e028      	b.n	195c6 <_dtoa_r+0x2de>
   19574:	f3af 8000 	nop.w
   19578:	636f4361 	.word	0x636f4361
   1957c:	3fd287a7 	.word	0x3fd287a7
   19580:	8b60c8b3 	.word	0x8b60c8b3
   19584:	3fc68a28 	.word	0x3fc68a28
   19588:	509f79fb 	.word	0x509f79fb
   1958c:	3fd34413 	.word	0x3fd34413
   19590:	7ff00000 	.word	0x7ff00000
   19594:	00020d99 	.word	0x00020d99
   19598:	00023d28 	.word	0x00023d28
   1959c:	00023d34 	.word	0x00023d34
   195a0:	3ff80000 	.word	0x3ff80000
   195a4:	00023d60 	.word	0x00023d60
   195a8:	00020d98 	.word	0x00020d98
   195ac:	40240000 	.word	0x40240000
   195b0:	f7f8 fa16 	bl	119e0 <__aeabi_dmul>
   195b4:	2200      	movs	r2, #0
   195b6:	2300      	movs	r3, #0
   195b8:	4606      	mov	r6, r0
   195ba:	460f      	mov	r7, r1
   195bc:	f7f8 fc78 	bl	11eb0 <__aeabi_dcmpeq>
   195c0:	2800      	cmp	r0, #0
   195c2:	f040 83c1 	bne.w	19d48 <_dtoa_r+0xa60>
   195c6:	4642      	mov	r2, r8
   195c8:	464b      	mov	r3, r9
   195ca:	4630      	mov	r0, r6
   195cc:	4639      	mov	r1, r7
   195ce:	f7f8 fb31 	bl	11c34 <__aeabi_ddiv>
   195d2:	f7f8 fc9f 	bl	11f14 <__aeabi_d2iz>
   195d6:	4604      	mov	r4, r0
   195d8:	f7f8 f99c 	bl	11914 <__aeabi_i2d>
   195dc:	4642      	mov	r2, r8
   195de:	464b      	mov	r3, r9
   195e0:	f7f8 f9fe 	bl	119e0 <__aeabi_dmul>
   195e4:	4602      	mov	r2, r0
   195e6:	460b      	mov	r3, r1
   195e8:	4630      	mov	r0, r6
   195ea:	4639      	mov	r1, r7
   195ec:	f7f8 f844 	bl	11678 <__aeabi_dsub>
   195f0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
   195f4:	9e04      	ldr	r6, [sp, #16]
   195f6:	f805 eb01 	strb.w	lr, [r5], #1
   195fa:	eba5 0e06 	sub.w	lr, r5, r6
   195fe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   19600:	45b6      	cmp	lr, r6
   19602:	e9cd 0106 	strd	r0, r1, [sp, #24]
   19606:	4652      	mov	r2, sl
   19608:	465b      	mov	r3, fp
   1960a:	d1d1      	bne.n	195b0 <_dtoa_r+0x2c8>
   1960c:	46a0      	mov	r8, r4
   1960e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   19612:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   19614:	4606      	mov	r6, r0
   19616:	460f      	mov	r7, r1
   19618:	4632      	mov	r2, r6
   1961a:	463b      	mov	r3, r7
   1961c:	4630      	mov	r0, r6
   1961e:	4639      	mov	r1, r7
   19620:	f7f8 f82c 	bl	1167c <__adddf3>
   19624:	4606      	mov	r6, r0
   19626:	460f      	mov	r7, r1
   19628:	4602      	mov	r2, r0
   1962a:	460b      	mov	r3, r1
   1962c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   19630:	f7f8 fc48 	bl	11ec4 <__aeabi_dcmplt>
   19634:	b948      	cbnz	r0, 1964a <_dtoa_r+0x362>
   19636:	4632      	mov	r2, r6
   19638:	463b      	mov	r3, r7
   1963a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1963e:	f7f8 fc37 	bl	11eb0 <__aeabi_dcmpeq>
   19642:	b1a8      	cbz	r0, 19670 <_dtoa_r+0x388>
   19644:	f018 0f01 	tst.w	r8, #1
   19648:	d012      	beq.n	19670 <_dtoa_r+0x388>
   1964a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   1964e:	9a04      	ldr	r2, [sp, #16]
   19650:	1e6b      	subs	r3, r5, #1
   19652:	e004      	b.n	1965e <_dtoa_r+0x376>
   19654:	429a      	cmp	r2, r3
   19656:	f000 8401 	beq.w	19e5c <_dtoa_r+0xb74>
   1965a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   1965e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   19662:	f103 0501 	add.w	r5, r3, #1
   19666:	d0f5      	beq.n	19654 <_dtoa_r+0x36c>
   19668:	f108 0801 	add.w	r8, r8, #1
   1966c:	f883 8000 	strb.w	r8, [r3]
   19670:	4649      	mov	r1, r9
   19672:	4620      	mov	r0, r4
   19674:	f001 f8ec 	bl	1a850 <_Bfree>
   19678:	2200      	movs	r2, #0
   1967a:	9b02      	ldr	r3, [sp, #8]
   1967c:	702a      	strb	r2, [r5, #0]
   1967e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   19680:	3301      	adds	r3, #1
   19682:	6013      	str	r3, [r2, #0]
   19684:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   19686:	2b00      	cmp	r3, #0
   19688:	f000 839e 	beq.w	19dc8 <_dtoa_r+0xae0>
   1968c:	9804      	ldr	r0, [sp, #16]
   1968e:	601d      	str	r5, [r3, #0]
   19690:	b01b      	add	sp, #108	; 0x6c
   19692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19696:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   19698:	2a00      	cmp	r2, #0
   1969a:	d03e      	beq.n	1971a <_dtoa_r+0x432>
   1969c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1969e:	2a01      	cmp	r2, #1
   196a0:	f340 8311 	ble.w	19cc6 <_dtoa_r+0x9de>
   196a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   196a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   196a8:	1e5f      	subs	r7, r3, #1
   196aa:	42ba      	cmp	r2, r7
   196ac:	f2c0 838f 	blt.w	19dce <_dtoa_r+0xae6>
   196b0:	1bd7      	subs	r7, r2, r7
   196b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   196b4:	2b00      	cmp	r3, #0
   196b6:	f2c0 848b 	blt.w	19fd0 <_dtoa_r+0xce8>
   196ba:	9d08      	ldr	r5, [sp, #32]
   196bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   196be:	9a08      	ldr	r2, [sp, #32]
   196c0:	441a      	add	r2, r3
   196c2:	9208      	str	r2, [sp, #32]
   196c4:	9a06      	ldr	r2, [sp, #24]
   196c6:	2101      	movs	r1, #1
   196c8:	441a      	add	r2, r3
   196ca:	4620      	mov	r0, r4
   196cc:	9206      	str	r2, [sp, #24]
   196ce:	f001 f959 	bl	1a984 <__i2b>
   196d2:	4606      	mov	r6, r0
   196d4:	e024      	b.n	19720 <_dtoa_r+0x438>
   196d6:	2301      	movs	r3, #1
   196d8:	930e      	str	r3, [sp, #56]	; 0x38
   196da:	e6af      	b.n	1943c <_dtoa_r+0x154>
   196dc:	9a08      	ldr	r2, [sp, #32]
   196de:	9b02      	ldr	r3, [sp, #8]
   196e0:	1ad2      	subs	r2, r2, r3
   196e2:	425b      	negs	r3, r3
   196e4:	930c      	str	r3, [sp, #48]	; 0x30
   196e6:	2300      	movs	r3, #0
   196e8:	9208      	str	r2, [sp, #32]
   196ea:	930d      	str	r3, [sp, #52]	; 0x34
   196ec:	e6b8      	b.n	19460 <_dtoa_r+0x178>
   196ee:	f1c7 0301 	rsb	r3, r7, #1
   196f2:	9308      	str	r3, [sp, #32]
   196f4:	2300      	movs	r3, #0
   196f6:	9306      	str	r3, [sp, #24]
   196f8:	e6a7      	b.n	1944a <_dtoa_r+0x162>
   196fa:	9d02      	ldr	r5, [sp, #8]
   196fc:	4628      	mov	r0, r5
   196fe:	f7f8 f909 	bl	11914 <__aeabi_i2d>
   19702:	4602      	mov	r2, r0
   19704:	460b      	mov	r3, r1
   19706:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1970a:	f7f8 fbd1 	bl	11eb0 <__aeabi_dcmpeq>
   1970e:	2800      	cmp	r0, #0
   19710:	f47f ae80 	bne.w	19414 <_dtoa_r+0x12c>
   19714:	1e6b      	subs	r3, r5, #1
   19716:	9302      	str	r3, [sp, #8]
   19718:	e67c      	b.n	19414 <_dtoa_r+0x12c>
   1971a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1971c:	9d08      	ldr	r5, [sp, #32]
   1971e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   19720:	2d00      	cmp	r5, #0
   19722:	dd0c      	ble.n	1973e <_dtoa_r+0x456>
   19724:	9906      	ldr	r1, [sp, #24]
   19726:	2900      	cmp	r1, #0
   19728:	460b      	mov	r3, r1
   1972a:	dd08      	ble.n	1973e <_dtoa_r+0x456>
   1972c:	42a9      	cmp	r1, r5
   1972e:	9a08      	ldr	r2, [sp, #32]
   19730:	bfa8      	it	ge
   19732:	462b      	movge	r3, r5
   19734:	1ad2      	subs	r2, r2, r3
   19736:	1aed      	subs	r5, r5, r3
   19738:	1acb      	subs	r3, r1, r3
   1973a:	9208      	str	r2, [sp, #32]
   1973c:	9306      	str	r3, [sp, #24]
   1973e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19740:	b1d3      	cbz	r3, 19778 <_dtoa_r+0x490>
   19742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19744:	2b00      	cmp	r3, #0
   19746:	f000 82b7 	beq.w	19cb8 <_dtoa_r+0x9d0>
   1974a:	2f00      	cmp	r7, #0
   1974c:	dd10      	ble.n	19770 <_dtoa_r+0x488>
   1974e:	4631      	mov	r1, r6
   19750:	463a      	mov	r2, r7
   19752:	4620      	mov	r0, r4
   19754:	f001 f9b2 	bl	1aabc <__pow5mult>
   19758:	464a      	mov	r2, r9
   1975a:	4601      	mov	r1, r0
   1975c:	4606      	mov	r6, r0
   1975e:	4620      	mov	r0, r4
   19760:	f001 f91a 	bl	1a998 <__multiply>
   19764:	4649      	mov	r1, r9
   19766:	4680      	mov	r8, r0
   19768:	4620      	mov	r0, r4
   1976a:	f001 f871 	bl	1a850 <_Bfree>
   1976e:	46c1      	mov	r9, r8
   19770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19772:	1bda      	subs	r2, r3, r7
   19774:	f040 82a1 	bne.w	19cba <_dtoa_r+0x9d2>
   19778:	2101      	movs	r1, #1
   1977a:	4620      	mov	r0, r4
   1977c:	f001 f902 	bl	1a984 <__i2b>
   19780:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19782:	2b00      	cmp	r3, #0
   19784:	4680      	mov	r8, r0
   19786:	dd1c      	ble.n	197c2 <_dtoa_r+0x4da>
   19788:	4601      	mov	r1, r0
   1978a:	461a      	mov	r2, r3
   1978c:	4620      	mov	r0, r4
   1978e:	f001 f995 	bl	1aabc <__pow5mult>
   19792:	9b24      	ldr	r3, [sp, #144]	; 0x90
   19794:	2b01      	cmp	r3, #1
   19796:	4680      	mov	r8, r0
   19798:	f340 8254 	ble.w	19c44 <_dtoa_r+0x95c>
   1979c:	2300      	movs	r3, #0
   1979e:	930c      	str	r3, [sp, #48]	; 0x30
   197a0:	f8d8 3010 	ldr.w	r3, [r8, #16]
   197a4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   197a8:	6918      	ldr	r0, [r3, #16]
   197aa:	f001 f89b 	bl	1a8e4 <__hi0bits>
   197ae:	f1c0 0020 	rsb	r0, r0, #32
   197b2:	e010      	b.n	197d6 <_dtoa_r+0x4ee>
   197b4:	f1c3 0520 	rsb	r5, r3, #32
   197b8:	fa0a f005 	lsl.w	r0, sl, r5
   197bc:	e674      	b.n	194a8 <_dtoa_r+0x1c0>
   197be:	900e      	str	r0, [sp, #56]	; 0x38
   197c0:	e63c      	b.n	1943c <_dtoa_r+0x154>
   197c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   197c4:	2b01      	cmp	r3, #1
   197c6:	f340 8287 	ble.w	19cd8 <_dtoa_r+0x9f0>
   197ca:	2300      	movs	r3, #0
   197cc:	930c      	str	r3, [sp, #48]	; 0x30
   197ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   197d0:	2001      	movs	r0, #1
   197d2:	2b00      	cmp	r3, #0
   197d4:	d1e4      	bne.n	197a0 <_dtoa_r+0x4b8>
   197d6:	9a06      	ldr	r2, [sp, #24]
   197d8:	4410      	add	r0, r2
   197da:	f010 001f 	ands.w	r0, r0, #31
   197de:	f000 80a1 	beq.w	19924 <_dtoa_r+0x63c>
   197e2:	f1c0 0320 	rsb	r3, r0, #32
   197e6:	2b04      	cmp	r3, #4
   197e8:	f340 849e 	ble.w	1a128 <_dtoa_r+0xe40>
   197ec:	9b08      	ldr	r3, [sp, #32]
   197ee:	f1c0 001c 	rsb	r0, r0, #28
   197f2:	4403      	add	r3, r0
   197f4:	9308      	str	r3, [sp, #32]
   197f6:	4613      	mov	r3, r2
   197f8:	4403      	add	r3, r0
   197fa:	4405      	add	r5, r0
   197fc:	9306      	str	r3, [sp, #24]
   197fe:	9b08      	ldr	r3, [sp, #32]
   19800:	2b00      	cmp	r3, #0
   19802:	dd05      	ble.n	19810 <_dtoa_r+0x528>
   19804:	4649      	mov	r1, r9
   19806:	461a      	mov	r2, r3
   19808:	4620      	mov	r0, r4
   1980a:	f001 f9a7 	bl	1ab5c <__lshift>
   1980e:	4681      	mov	r9, r0
   19810:	9b06      	ldr	r3, [sp, #24]
   19812:	2b00      	cmp	r3, #0
   19814:	dd05      	ble.n	19822 <_dtoa_r+0x53a>
   19816:	4641      	mov	r1, r8
   19818:	461a      	mov	r2, r3
   1981a:	4620      	mov	r0, r4
   1981c:	f001 f99e 	bl	1ab5c <__lshift>
   19820:	4680      	mov	r8, r0
   19822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19824:	2b00      	cmp	r3, #0
   19826:	f040 8086 	bne.w	19936 <_dtoa_r+0x64e>
   1982a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1982c:	2b00      	cmp	r3, #0
   1982e:	f340 8266 	ble.w	19cfe <_dtoa_r+0xa16>
   19832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19834:	2b00      	cmp	r3, #0
   19836:	f000 8098 	beq.w	1996a <_dtoa_r+0x682>
   1983a:	2d00      	cmp	r5, #0
   1983c:	dd05      	ble.n	1984a <_dtoa_r+0x562>
   1983e:	4631      	mov	r1, r6
   19840:	462a      	mov	r2, r5
   19842:	4620      	mov	r0, r4
   19844:	f001 f98a 	bl	1ab5c <__lshift>
   19848:	4606      	mov	r6, r0
   1984a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1984c:	2b00      	cmp	r3, #0
   1984e:	f040 8337 	bne.w	19ec0 <_dtoa_r+0xbd8>
   19852:	9606      	str	r6, [sp, #24]
   19854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19856:	9a04      	ldr	r2, [sp, #16]
   19858:	f8dd b018 	ldr.w	fp, [sp, #24]
   1985c:	3b01      	subs	r3, #1
   1985e:	18d3      	adds	r3, r2, r3
   19860:	930b      	str	r3, [sp, #44]	; 0x2c
   19862:	f00a 0301 	and.w	r3, sl, #1
   19866:	930c      	str	r3, [sp, #48]	; 0x30
   19868:	4617      	mov	r7, r2
   1986a:	46c2      	mov	sl, r8
   1986c:	4651      	mov	r1, sl
   1986e:	4648      	mov	r0, r9
   19870:	f7ff fca6 	bl	191c0 <quorem>
   19874:	4631      	mov	r1, r6
   19876:	4605      	mov	r5, r0
   19878:	4648      	mov	r0, r9
   1987a:	f001 f9c1 	bl	1ac00 <__mcmp>
   1987e:	465a      	mov	r2, fp
   19880:	900a      	str	r0, [sp, #40]	; 0x28
   19882:	4651      	mov	r1, sl
   19884:	4620      	mov	r0, r4
   19886:	f001 f9d7 	bl	1ac38 <__mdiff>
   1988a:	68c2      	ldr	r2, [r0, #12]
   1988c:	4680      	mov	r8, r0
   1988e:	f105 0330 	add.w	r3, r5, #48	; 0x30
   19892:	2a00      	cmp	r2, #0
   19894:	f040 822b 	bne.w	19cee <_dtoa_r+0xa06>
   19898:	4601      	mov	r1, r0
   1989a:	4648      	mov	r0, r9
   1989c:	9308      	str	r3, [sp, #32]
   1989e:	f001 f9af 	bl	1ac00 <__mcmp>
   198a2:	4641      	mov	r1, r8
   198a4:	9006      	str	r0, [sp, #24]
   198a6:	4620      	mov	r0, r4
   198a8:	f000 ffd2 	bl	1a850 <_Bfree>
   198ac:	9a06      	ldr	r2, [sp, #24]
   198ae:	9b08      	ldr	r3, [sp, #32]
   198b0:	b932      	cbnz	r2, 198c0 <_dtoa_r+0x5d8>
   198b2:	9924      	ldr	r1, [sp, #144]	; 0x90
   198b4:	b921      	cbnz	r1, 198c0 <_dtoa_r+0x5d8>
   198b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   198b8:	2a00      	cmp	r2, #0
   198ba:	f000 83ef 	beq.w	1a09c <_dtoa_r+0xdb4>
   198be:	9a24      	ldr	r2, [sp, #144]	; 0x90
   198c0:	990a      	ldr	r1, [sp, #40]	; 0x28
   198c2:	2900      	cmp	r1, #0
   198c4:	f2c0 829f 	blt.w	19e06 <_dtoa_r+0xb1e>
   198c8:	d105      	bne.n	198d6 <_dtoa_r+0x5ee>
   198ca:	9924      	ldr	r1, [sp, #144]	; 0x90
   198cc:	b919      	cbnz	r1, 198d6 <_dtoa_r+0x5ee>
   198ce:	990c      	ldr	r1, [sp, #48]	; 0x30
   198d0:	2900      	cmp	r1, #0
   198d2:	f000 8298 	beq.w	19e06 <_dtoa_r+0xb1e>
   198d6:	2a00      	cmp	r2, #0
   198d8:	f300 8306 	bgt.w	19ee8 <_dtoa_r+0xc00>
   198dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   198de:	703b      	strb	r3, [r7, #0]
   198e0:	f107 0801 	add.w	r8, r7, #1
   198e4:	4297      	cmp	r7, r2
   198e6:	4645      	mov	r5, r8
   198e8:	f000 830c 	beq.w	19f04 <_dtoa_r+0xc1c>
   198ec:	4649      	mov	r1, r9
   198ee:	2300      	movs	r3, #0
   198f0:	220a      	movs	r2, #10
   198f2:	4620      	mov	r0, r4
   198f4:	f000 ffb6 	bl	1a864 <__multadd>
   198f8:	455e      	cmp	r6, fp
   198fa:	4681      	mov	r9, r0
   198fc:	4631      	mov	r1, r6
   198fe:	f04f 0300 	mov.w	r3, #0
   19902:	f04f 020a 	mov.w	r2, #10
   19906:	4620      	mov	r0, r4
   19908:	f000 81eb 	beq.w	19ce2 <_dtoa_r+0x9fa>
   1990c:	f000 ffaa 	bl	1a864 <__multadd>
   19910:	4659      	mov	r1, fp
   19912:	4606      	mov	r6, r0
   19914:	2300      	movs	r3, #0
   19916:	220a      	movs	r2, #10
   19918:	4620      	mov	r0, r4
   1991a:	f000 ffa3 	bl	1a864 <__multadd>
   1991e:	4647      	mov	r7, r8
   19920:	4683      	mov	fp, r0
   19922:	e7a3      	b.n	1986c <_dtoa_r+0x584>
   19924:	201c      	movs	r0, #28
   19926:	9b08      	ldr	r3, [sp, #32]
   19928:	4403      	add	r3, r0
   1992a:	9308      	str	r3, [sp, #32]
   1992c:	9b06      	ldr	r3, [sp, #24]
   1992e:	4403      	add	r3, r0
   19930:	4405      	add	r5, r0
   19932:	9306      	str	r3, [sp, #24]
   19934:	e763      	b.n	197fe <_dtoa_r+0x516>
   19936:	4641      	mov	r1, r8
   19938:	4648      	mov	r0, r9
   1993a:	f001 f961 	bl	1ac00 <__mcmp>
   1993e:	2800      	cmp	r0, #0
   19940:	f6bf af73 	bge.w	1982a <_dtoa_r+0x542>
   19944:	9f02      	ldr	r7, [sp, #8]
   19946:	4649      	mov	r1, r9
   19948:	2300      	movs	r3, #0
   1994a:	220a      	movs	r2, #10
   1994c:	4620      	mov	r0, r4
   1994e:	3f01      	subs	r7, #1
   19950:	9702      	str	r7, [sp, #8]
   19952:	f000 ff87 	bl	1a864 <__multadd>
   19956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19958:	4681      	mov	r9, r0
   1995a:	2b00      	cmp	r3, #0
   1995c:	f040 83b6 	bne.w	1a0cc <_dtoa_r+0xde4>
   19960:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19962:	2b00      	cmp	r3, #0
   19964:	f340 83bf 	ble.w	1a0e6 <_dtoa_r+0xdfe>
   19968:	930a      	str	r3, [sp, #40]	; 0x28
   1996a:	f8dd b010 	ldr.w	fp, [sp, #16]
   1996e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   19970:	465d      	mov	r5, fp
   19972:	e002      	b.n	1997a <_dtoa_r+0x692>
   19974:	f000 ff76 	bl	1a864 <__multadd>
   19978:	4681      	mov	r9, r0
   1997a:	4641      	mov	r1, r8
   1997c:	4648      	mov	r0, r9
   1997e:	f7ff fc1f 	bl	191c0 <quorem>
   19982:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   19986:	f805 ab01 	strb.w	sl, [r5], #1
   1998a:	eba5 030b 	sub.w	r3, r5, fp
   1998e:	42bb      	cmp	r3, r7
   19990:	f04f 020a 	mov.w	r2, #10
   19994:	f04f 0300 	mov.w	r3, #0
   19998:	4649      	mov	r1, r9
   1999a:	4620      	mov	r0, r4
   1999c:	dbea      	blt.n	19974 <_dtoa_r+0x68c>
   1999e:	9b04      	ldr	r3, [sp, #16]
   199a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   199a2:	2a01      	cmp	r2, #1
   199a4:	bfac      	ite	ge
   199a6:	189b      	addge	r3, r3, r2
   199a8:	3301      	addlt	r3, #1
   199aa:	461d      	mov	r5, r3
   199ac:	f04f 0b00 	mov.w	fp, #0
   199b0:	4649      	mov	r1, r9
   199b2:	2201      	movs	r2, #1
   199b4:	4620      	mov	r0, r4
   199b6:	f001 f8d1 	bl	1ab5c <__lshift>
   199ba:	4641      	mov	r1, r8
   199bc:	4681      	mov	r9, r0
   199be:	f001 f91f 	bl	1ac00 <__mcmp>
   199c2:	2800      	cmp	r0, #0
   199c4:	f340 823d 	ble.w	19e42 <_dtoa_r+0xb5a>
   199c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   199cc:	9904      	ldr	r1, [sp, #16]
   199ce:	1e6b      	subs	r3, r5, #1
   199d0:	e004      	b.n	199dc <_dtoa_r+0x6f4>
   199d2:	428b      	cmp	r3, r1
   199d4:	f000 81ae 	beq.w	19d34 <_dtoa_r+0xa4c>
   199d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   199dc:	2a39      	cmp	r2, #57	; 0x39
   199de:	f103 0501 	add.w	r5, r3, #1
   199e2:	d0f6      	beq.n	199d2 <_dtoa_r+0x6ea>
   199e4:	3201      	adds	r2, #1
   199e6:	701a      	strb	r2, [r3, #0]
   199e8:	4641      	mov	r1, r8
   199ea:	4620      	mov	r0, r4
   199ec:	f000 ff30 	bl	1a850 <_Bfree>
   199f0:	2e00      	cmp	r6, #0
   199f2:	f43f ae3d 	beq.w	19670 <_dtoa_r+0x388>
   199f6:	f1bb 0f00 	cmp.w	fp, #0
   199fa:	d005      	beq.n	19a08 <_dtoa_r+0x720>
   199fc:	45b3      	cmp	fp, r6
   199fe:	d003      	beq.n	19a08 <_dtoa_r+0x720>
   19a00:	4659      	mov	r1, fp
   19a02:	4620      	mov	r0, r4
   19a04:	f000 ff24 	bl	1a850 <_Bfree>
   19a08:	4631      	mov	r1, r6
   19a0a:	4620      	mov	r0, r4
   19a0c:	f000 ff20 	bl	1a850 <_Bfree>
   19a10:	e62e      	b.n	19670 <_dtoa_r+0x388>
   19a12:	2300      	movs	r3, #0
   19a14:	930b      	str	r3, [sp, #44]	; 0x2c
   19a16:	9b02      	ldr	r3, [sp, #8]
   19a18:	9a25      	ldr	r2, [sp, #148]	; 0x94
   19a1a:	4413      	add	r3, r2
   19a1c:	930f      	str	r3, [sp, #60]	; 0x3c
   19a1e:	3301      	adds	r3, #1
   19a20:	2b01      	cmp	r3, #1
   19a22:	461f      	mov	r7, r3
   19a24:	461e      	mov	r6, r3
   19a26:	930a      	str	r3, [sp, #40]	; 0x28
   19a28:	bfb8      	it	lt
   19a2a:	2701      	movlt	r7, #1
   19a2c:	2100      	movs	r1, #0
   19a2e:	2f17      	cmp	r7, #23
   19a30:	6461      	str	r1, [r4, #68]	; 0x44
   19a32:	d90a      	bls.n	19a4a <_dtoa_r+0x762>
   19a34:	2201      	movs	r2, #1
   19a36:	2304      	movs	r3, #4
   19a38:	005b      	lsls	r3, r3, #1
   19a3a:	f103 0014 	add.w	r0, r3, #20
   19a3e:	4287      	cmp	r7, r0
   19a40:	4611      	mov	r1, r2
   19a42:	f102 0201 	add.w	r2, r2, #1
   19a46:	d2f7      	bcs.n	19a38 <_dtoa_r+0x750>
   19a48:	6461      	str	r1, [r4, #68]	; 0x44
   19a4a:	4620      	mov	r0, r4
   19a4c:	f000 feda 	bl	1a804 <_Balloc>
   19a50:	2e0e      	cmp	r6, #14
   19a52:	9004      	str	r0, [sp, #16]
   19a54:	6420      	str	r0, [r4, #64]	; 0x40
   19a56:	f63f ad41 	bhi.w	194dc <_dtoa_r+0x1f4>
   19a5a:	2d00      	cmp	r5, #0
   19a5c:	f43f ad3e 	beq.w	194dc <_dtoa_r+0x1f4>
   19a60:	9902      	ldr	r1, [sp, #8]
   19a62:	2900      	cmp	r1, #0
   19a64:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   19a68:	f340 8202 	ble.w	19e70 <_dtoa_r+0xb88>
   19a6c:	4bb8      	ldr	r3, [pc, #736]	; (19d50 <_dtoa_r+0xa68>)
   19a6e:	f001 020f 	and.w	r2, r1, #15
   19a72:	110d      	asrs	r5, r1, #4
   19a74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   19a78:	06e9      	lsls	r1, r5, #27
   19a7a:	e9d3 6700 	ldrd	r6, r7, [r3]
   19a7e:	f140 81ae 	bpl.w	19dde <_dtoa_r+0xaf6>
   19a82:	4bb4      	ldr	r3, [pc, #720]	; (19d54 <_dtoa_r+0xa6c>)
   19a84:	4650      	mov	r0, sl
   19a86:	4659      	mov	r1, fp
   19a88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   19a8c:	f7f8 f8d2 	bl	11c34 <__aeabi_ddiv>
   19a90:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   19a94:	f005 050f 	and.w	r5, r5, #15
   19a98:	f04f 0a03 	mov.w	sl, #3
   19a9c:	b18d      	cbz	r5, 19ac2 <_dtoa_r+0x7da>
   19a9e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 19d54 <_dtoa_r+0xa6c>
   19aa2:	07ea      	lsls	r2, r5, #31
   19aa4:	d509      	bpl.n	19aba <_dtoa_r+0x7d2>
   19aa6:	4630      	mov	r0, r6
   19aa8:	4639      	mov	r1, r7
   19aaa:	e9d8 2300 	ldrd	r2, r3, [r8]
   19aae:	f7f7 ff97 	bl	119e0 <__aeabi_dmul>
   19ab2:	f10a 0a01 	add.w	sl, sl, #1
   19ab6:	4606      	mov	r6, r0
   19ab8:	460f      	mov	r7, r1
   19aba:	106d      	asrs	r5, r5, #1
   19abc:	f108 0808 	add.w	r8, r8, #8
   19ac0:	d1ef      	bne.n	19aa2 <_dtoa_r+0x7ba>
   19ac2:	463b      	mov	r3, r7
   19ac4:	4632      	mov	r2, r6
   19ac6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   19aca:	f7f8 f8b3 	bl	11c34 <__aeabi_ddiv>
   19ace:	4607      	mov	r7, r0
   19ad0:	4688      	mov	r8, r1
   19ad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19ad4:	b143      	cbz	r3, 19ae8 <_dtoa_r+0x800>
   19ad6:	2200      	movs	r2, #0
   19ad8:	4b9f      	ldr	r3, [pc, #636]	; (19d58 <_dtoa_r+0xa70>)
   19ada:	4638      	mov	r0, r7
   19adc:	4641      	mov	r1, r8
   19ade:	f7f8 f9f1 	bl	11ec4 <__aeabi_dcmplt>
   19ae2:	2800      	cmp	r0, #0
   19ae4:	f040 8286 	bne.w	19ff4 <_dtoa_r+0xd0c>
   19ae8:	4650      	mov	r0, sl
   19aea:	f7f7 ff13 	bl	11914 <__aeabi_i2d>
   19aee:	463a      	mov	r2, r7
   19af0:	4643      	mov	r3, r8
   19af2:	f7f7 ff75 	bl	119e0 <__aeabi_dmul>
   19af6:	4b99      	ldr	r3, [pc, #612]	; (19d5c <_dtoa_r+0xa74>)
   19af8:	2200      	movs	r2, #0
   19afa:	f7f7 fdbf 	bl	1167c <__adddf3>
   19afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19b00:	4605      	mov	r5, r0
   19b02:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   19b06:	2b00      	cmp	r3, #0
   19b08:	f000 813e 	beq.w	19d88 <_dtoa_r+0xaa0>
   19b0c:	9b02      	ldr	r3, [sp, #8]
   19b0e:	9315      	str	r3, [sp, #84]	; 0x54
   19b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19b12:	9312      	str	r3, [sp, #72]	; 0x48
   19b14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19b16:	2b00      	cmp	r3, #0
   19b18:	f000 81fa 	beq.w	19f10 <_dtoa_r+0xc28>
   19b1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   19b1e:	4b8c      	ldr	r3, [pc, #560]	; (19d50 <_dtoa_r+0xa68>)
   19b20:	498f      	ldr	r1, [pc, #572]	; (19d60 <_dtoa_r+0xa78>)
   19b22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   19b26:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   19b2a:	2000      	movs	r0, #0
   19b2c:	f7f8 f882 	bl	11c34 <__aeabi_ddiv>
   19b30:	462a      	mov	r2, r5
   19b32:	4633      	mov	r3, r6
   19b34:	f7f7 fda0 	bl	11678 <__aeabi_dsub>
   19b38:	4682      	mov	sl, r0
   19b3a:	468b      	mov	fp, r1
   19b3c:	4638      	mov	r0, r7
   19b3e:	4641      	mov	r1, r8
   19b40:	f7f8 f9e8 	bl	11f14 <__aeabi_d2iz>
   19b44:	4605      	mov	r5, r0
   19b46:	f7f7 fee5 	bl	11914 <__aeabi_i2d>
   19b4a:	4602      	mov	r2, r0
   19b4c:	460b      	mov	r3, r1
   19b4e:	4638      	mov	r0, r7
   19b50:	4641      	mov	r1, r8
   19b52:	f7f7 fd91 	bl	11678 <__aeabi_dsub>
   19b56:	3530      	adds	r5, #48	; 0x30
   19b58:	fa5f f885 	uxtb.w	r8, r5
   19b5c:	9d04      	ldr	r5, [sp, #16]
   19b5e:	4606      	mov	r6, r0
   19b60:	460f      	mov	r7, r1
   19b62:	f885 8000 	strb.w	r8, [r5]
   19b66:	4602      	mov	r2, r0
   19b68:	460b      	mov	r3, r1
   19b6a:	4650      	mov	r0, sl
   19b6c:	4659      	mov	r1, fp
   19b6e:	3501      	adds	r5, #1
   19b70:	f7f8 f9c6 	bl	11f00 <__aeabi_dcmpgt>
   19b74:	2800      	cmp	r0, #0
   19b76:	d154      	bne.n	19c22 <_dtoa_r+0x93a>
   19b78:	4632      	mov	r2, r6
   19b7a:	463b      	mov	r3, r7
   19b7c:	2000      	movs	r0, #0
   19b7e:	4976      	ldr	r1, [pc, #472]	; (19d58 <_dtoa_r+0xa70>)
   19b80:	f7f7 fd7a 	bl	11678 <__aeabi_dsub>
   19b84:	4602      	mov	r2, r0
   19b86:	460b      	mov	r3, r1
   19b88:	4650      	mov	r0, sl
   19b8a:	4659      	mov	r1, fp
   19b8c:	f7f8 f9b8 	bl	11f00 <__aeabi_dcmpgt>
   19b90:	2800      	cmp	r0, #0
   19b92:	f040 8270 	bne.w	1a076 <_dtoa_r+0xd8e>
   19b96:	9a12      	ldr	r2, [sp, #72]	; 0x48
   19b98:	2a01      	cmp	r2, #1
   19b9a:	f000 8111 	beq.w	19dc0 <_dtoa_r+0xad8>
   19b9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19ba0:	9a04      	ldr	r2, [sp, #16]
   19ba2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   19ba6:	4413      	add	r3, r2
   19ba8:	4699      	mov	r9, r3
   19baa:	e00d      	b.n	19bc8 <_dtoa_r+0x8e0>
   19bac:	2000      	movs	r0, #0
   19bae:	496a      	ldr	r1, [pc, #424]	; (19d58 <_dtoa_r+0xa70>)
   19bb0:	f7f7 fd62 	bl	11678 <__aeabi_dsub>
   19bb4:	4652      	mov	r2, sl
   19bb6:	465b      	mov	r3, fp
   19bb8:	f7f8 f984 	bl	11ec4 <__aeabi_dcmplt>
   19bbc:	2800      	cmp	r0, #0
   19bbe:	f040 8258 	bne.w	1a072 <_dtoa_r+0xd8a>
   19bc2:	454d      	cmp	r5, r9
   19bc4:	f000 80fa 	beq.w	19dbc <_dtoa_r+0xad4>
   19bc8:	4650      	mov	r0, sl
   19bca:	4659      	mov	r1, fp
   19bcc:	2200      	movs	r2, #0
   19bce:	4b65      	ldr	r3, [pc, #404]	; (19d64 <_dtoa_r+0xa7c>)
   19bd0:	f7f7 ff06 	bl	119e0 <__aeabi_dmul>
   19bd4:	2200      	movs	r2, #0
   19bd6:	4b63      	ldr	r3, [pc, #396]	; (19d64 <_dtoa_r+0xa7c>)
   19bd8:	4682      	mov	sl, r0
   19bda:	468b      	mov	fp, r1
   19bdc:	4630      	mov	r0, r6
   19bde:	4639      	mov	r1, r7
   19be0:	f7f7 fefe 	bl	119e0 <__aeabi_dmul>
   19be4:	460f      	mov	r7, r1
   19be6:	4606      	mov	r6, r0
   19be8:	f7f8 f994 	bl	11f14 <__aeabi_d2iz>
   19bec:	4680      	mov	r8, r0
   19bee:	f7f7 fe91 	bl	11914 <__aeabi_i2d>
   19bf2:	4602      	mov	r2, r0
   19bf4:	460b      	mov	r3, r1
   19bf6:	4630      	mov	r0, r6
   19bf8:	4639      	mov	r1, r7
   19bfa:	f7f7 fd3d 	bl	11678 <__aeabi_dsub>
   19bfe:	f108 0830 	add.w	r8, r8, #48	; 0x30
   19c02:	fa5f f888 	uxtb.w	r8, r8
   19c06:	4652      	mov	r2, sl
   19c08:	465b      	mov	r3, fp
   19c0a:	f805 8b01 	strb.w	r8, [r5], #1
   19c0e:	4606      	mov	r6, r0
   19c10:	460f      	mov	r7, r1
   19c12:	f7f8 f957 	bl	11ec4 <__aeabi_dcmplt>
   19c16:	4632      	mov	r2, r6
   19c18:	463b      	mov	r3, r7
   19c1a:	2800      	cmp	r0, #0
   19c1c:	d0c6      	beq.n	19bac <_dtoa_r+0x8c4>
   19c1e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   19c22:	9b15      	ldr	r3, [sp, #84]	; 0x54
   19c24:	9302      	str	r3, [sp, #8]
   19c26:	e523      	b.n	19670 <_dtoa_r+0x388>
   19c28:	2300      	movs	r3, #0
   19c2a:	930b      	str	r3, [sp, #44]	; 0x2c
   19c2c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   19c2e:	2b00      	cmp	r3, #0
   19c30:	f340 80dc 	ble.w	19dec <_dtoa_r+0xb04>
   19c34:	461f      	mov	r7, r3
   19c36:	461e      	mov	r6, r3
   19c38:	930f      	str	r3, [sp, #60]	; 0x3c
   19c3a:	930a      	str	r3, [sp, #40]	; 0x28
   19c3c:	e6f6      	b.n	19a2c <_dtoa_r+0x744>
   19c3e:	2301      	movs	r3, #1
   19c40:	930b      	str	r3, [sp, #44]	; 0x2c
   19c42:	e7f3      	b.n	19c2c <_dtoa_r+0x944>
   19c44:	f1ba 0f00 	cmp.w	sl, #0
   19c48:	f47f ada8 	bne.w	1979c <_dtoa_r+0x4b4>
   19c4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   19c50:	2b00      	cmp	r3, #0
   19c52:	f47f adba 	bne.w	197ca <_dtoa_r+0x4e2>
   19c56:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   19c5a:	0d3f      	lsrs	r7, r7, #20
   19c5c:	053f      	lsls	r7, r7, #20
   19c5e:	2f00      	cmp	r7, #0
   19c60:	f000 820d 	beq.w	1a07e <_dtoa_r+0xd96>
   19c64:	9b08      	ldr	r3, [sp, #32]
   19c66:	3301      	adds	r3, #1
   19c68:	9308      	str	r3, [sp, #32]
   19c6a:	9b06      	ldr	r3, [sp, #24]
   19c6c:	3301      	adds	r3, #1
   19c6e:	9306      	str	r3, [sp, #24]
   19c70:	2301      	movs	r3, #1
   19c72:	930c      	str	r3, [sp, #48]	; 0x30
   19c74:	e5ab      	b.n	197ce <_dtoa_r+0x4e6>
   19c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19c78:	2b00      	cmp	r3, #0
   19c7a:	f73f ac42 	bgt.w	19502 <_dtoa_r+0x21a>
   19c7e:	f040 8221 	bne.w	1a0c4 <_dtoa_r+0xddc>
   19c82:	2200      	movs	r2, #0
   19c84:	4b38      	ldr	r3, [pc, #224]	; (19d68 <_dtoa_r+0xa80>)
   19c86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   19c8a:	f7f7 fea9 	bl	119e0 <__aeabi_dmul>
   19c8e:	4652      	mov	r2, sl
   19c90:	465b      	mov	r3, fp
   19c92:	f7f8 f92b 	bl	11eec <__aeabi_dcmpge>
   19c96:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   19c9a:	4646      	mov	r6, r8
   19c9c:	2800      	cmp	r0, #0
   19c9e:	d041      	beq.n	19d24 <_dtoa_r+0xa3c>
   19ca0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   19ca2:	9d04      	ldr	r5, [sp, #16]
   19ca4:	43db      	mvns	r3, r3
   19ca6:	9302      	str	r3, [sp, #8]
   19ca8:	4641      	mov	r1, r8
   19caa:	4620      	mov	r0, r4
   19cac:	f000 fdd0 	bl	1a850 <_Bfree>
   19cb0:	2e00      	cmp	r6, #0
   19cb2:	f43f acdd 	beq.w	19670 <_dtoa_r+0x388>
   19cb6:	e6a7      	b.n	19a08 <_dtoa_r+0x720>
   19cb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   19cba:	4649      	mov	r1, r9
   19cbc:	4620      	mov	r0, r4
   19cbe:	f000 fefd 	bl	1aabc <__pow5mult>
   19cc2:	4681      	mov	r9, r0
   19cc4:	e558      	b.n	19778 <_dtoa_r+0x490>
   19cc6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   19cc8:	2a00      	cmp	r2, #0
   19cca:	f000 8187 	beq.w	19fdc <_dtoa_r+0xcf4>
   19cce:	f203 4333 	addw	r3, r3, #1075	; 0x433
   19cd2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   19cd4:	9d08      	ldr	r5, [sp, #32]
   19cd6:	e4f2      	b.n	196be <_dtoa_r+0x3d6>
   19cd8:	f1ba 0f00 	cmp.w	sl, #0
   19cdc:	f47f ad75 	bne.w	197ca <_dtoa_r+0x4e2>
   19ce0:	e7b4      	b.n	19c4c <_dtoa_r+0x964>
   19ce2:	f000 fdbf 	bl	1a864 <__multadd>
   19ce6:	4647      	mov	r7, r8
   19ce8:	4606      	mov	r6, r0
   19cea:	4683      	mov	fp, r0
   19cec:	e5be      	b.n	1986c <_dtoa_r+0x584>
   19cee:	4601      	mov	r1, r0
   19cf0:	4620      	mov	r0, r4
   19cf2:	9306      	str	r3, [sp, #24]
   19cf4:	f000 fdac 	bl	1a850 <_Bfree>
   19cf8:	2201      	movs	r2, #1
   19cfa:	9b06      	ldr	r3, [sp, #24]
   19cfc:	e5e0      	b.n	198c0 <_dtoa_r+0x5d8>
   19cfe:	9b24      	ldr	r3, [sp, #144]	; 0x90
   19d00:	2b02      	cmp	r3, #2
   19d02:	f77f ad96 	ble.w	19832 <_dtoa_r+0x54a>
   19d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19d08:	2b00      	cmp	r3, #0
   19d0a:	d1c9      	bne.n	19ca0 <_dtoa_r+0x9b8>
   19d0c:	4641      	mov	r1, r8
   19d0e:	2205      	movs	r2, #5
   19d10:	4620      	mov	r0, r4
   19d12:	f000 fda7 	bl	1a864 <__multadd>
   19d16:	4601      	mov	r1, r0
   19d18:	4680      	mov	r8, r0
   19d1a:	4648      	mov	r0, r9
   19d1c:	f000 ff70 	bl	1ac00 <__mcmp>
   19d20:	2800      	cmp	r0, #0
   19d22:	ddbd      	ble.n	19ca0 <_dtoa_r+0x9b8>
   19d24:	9a02      	ldr	r2, [sp, #8]
   19d26:	9904      	ldr	r1, [sp, #16]
   19d28:	2331      	movs	r3, #49	; 0x31
   19d2a:	3201      	adds	r2, #1
   19d2c:	9202      	str	r2, [sp, #8]
   19d2e:	700b      	strb	r3, [r1, #0]
   19d30:	1c4d      	adds	r5, r1, #1
   19d32:	e7b9      	b.n	19ca8 <_dtoa_r+0x9c0>
   19d34:	9a02      	ldr	r2, [sp, #8]
   19d36:	3201      	adds	r2, #1
   19d38:	9202      	str	r2, [sp, #8]
   19d3a:	9a04      	ldr	r2, [sp, #16]
   19d3c:	2331      	movs	r3, #49	; 0x31
   19d3e:	7013      	strb	r3, [r2, #0]
   19d40:	e652      	b.n	199e8 <_dtoa_r+0x700>
   19d42:	2301      	movs	r3, #1
   19d44:	930b      	str	r3, [sp, #44]	; 0x2c
   19d46:	e666      	b.n	19a16 <_dtoa_r+0x72e>
   19d48:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   19d4c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   19d4e:	e48f      	b.n	19670 <_dtoa_r+0x388>
   19d50:	00023d60 	.word	0x00023d60
   19d54:	00023d38 	.word	0x00023d38
   19d58:	3ff00000 	.word	0x3ff00000
   19d5c:	401c0000 	.word	0x401c0000
   19d60:	3fe00000 	.word	0x3fe00000
   19d64:	40240000 	.word	0x40240000
   19d68:	40140000 	.word	0x40140000
   19d6c:	4650      	mov	r0, sl
   19d6e:	f7f7 fdd1 	bl	11914 <__aeabi_i2d>
   19d72:	463a      	mov	r2, r7
   19d74:	4643      	mov	r3, r8
   19d76:	f7f7 fe33 	bl	119e0 <__aeabi_dmul>
   19d7a:	2200      	movs	r2, #0
   19d7c:	4bc1      	ldr	r3, [pc, #772]	; (1a084 <_dtoa_r+0xd9c>)
   19d7e:	f7f7 fc7d 	bl	1167c <__adddf3>
   19d82:	4605      	mov	r5, r0
   19d84:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   19d88:	4641      	mov	r1, r8
   19d8a:	2200      	movs	r2, #0
   19d8c:	4bbe      	ldr	r3, [pc, #760]	; (1a088 <_dtoa_r+0xda0>)
   19d8e:	4638      	mov	r0, r7
   19d90:	f7f7 fc72 	bl	11678 <__aeabi_dsub>
   19d94:	462a      	mov	r2, r5
   19d96:	4633      	mov	r3, r6
   19d98:	4682      	mov	sl, r0
   19d9a:	468b      	mov	fp, r1
   19d9c:	f7f8 f8b0 	bl	11f00 <__aeabi_dcmpgt>
   19da0:	4680      	mov	r8, r0
   19da2:	2800      	cmp	r0, #0
   19da4:	f040 8110 	bne.w	19fc8 <_dtoa_r+0xce0>
   19da8:	462a      	mov	r2, r5
   19daa:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   19dae:	4650      	mov	r0, sl
   19db0:	4659      	mov	r1, fp
   19db2:	f7f8 f887 	bl	11ec4 <__aeabi_dcmplt>
   19db6:	b118      	cbz	r0, 19dc0 <_dtoa_r+0xad8>
   19db8:	4646      	mov	r6, r8
   19dba:	e771      	b.n	19ca0 <_dtoa_r+0x9b8>
   19dbc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   19dc0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   19dc4:	f7ff bb8a 	b.w	194dc <_dtoa_r+0x1f4>
   19dc8:	9804      	ldr	r0, [sp, #16]
   19dca:	f7ff babb 	b.w	19344 <_dtoa_r+0x5c>
   19dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19dd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   19dd2:	970c      	str	r7, [sp, #48]	; 0x30
   19dd4:	1afb      	subs	r3, r7, r3
   19dd6:	441a      	add	r2, r3
   19dd8:	920d      	str	r2, [sp, #52]	; 0x34
   19dda:	2700      	movs	r7, #0
   19ddc:	e469      	b.n	196b2 <_dtoa_r+0x3ca>
   19dde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   19de2:	f04f 0a02 	mov.w	sl, #2
   19de6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   19dea:	e657      	b.n	19a9c <_dtoa_r+0x7b4>
   19dec:	2100      	movs	r1, #0
   19dee:	2301      	movs	r3, #1
   19df0:	6461      	str	r1, [r4, #68]	; 0x44
   19df2:	4620      	mov	r0, r4
   19df4:	9325      	str	r3, [sp, #148]	; 0x94
   19df6:	f000 fd05 	bl	1a804 <_Balloc>
   19dfa:	9b25      	ldr	r3, [sp, #148]	; 0x94
   19dfc:	9004      	str	r0, [sp, #16]
   19dfe:	6420      	str	r0, [r4, #64]	; 0x40
   19e00:	930a      	str	r3, [sp, #40]	; 0x28
   19e02:	930f      	str	r3, [sp, #60]	; 0x3c
   19e04:	e629      	b.n	19a5a <_dtoa_r+0x772>
   19e06:	2a00      	cmp	r2, #0
   19e08:	46d0      	mov	r8, sl
   19e0a:	f8cd b018 	str.w	fp, [sp, #24]
   19e0e:	469a      	mov	sl, r3
   19e10:	dd11      	ble.n	19e36 <_dtoa_r+0xb4e>
   19e12:	4649      	mov	r1, r9
   19e14:	2201      	movs	r2, #1
   19e16:	4620      	mov	r0, r4
   19e18:	f000 fea0 	bl	1ab5c <__lshift>
   19e1c:	4641      	mov	r1, r8
   19e1e:	4681      	mov	r9, r0
   19e20:	f000 feee 	bl	1ac00 <__mcmp>
   19e24:	2800      	cmp	r0, #0
   19e26:	f340 8146 	ble.w	1a0b6 <_dtoa_r+0xdce>
   19e2a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   19e2e:	f000 8106 	beq.w	1a03e <_dtoa_r+0xd56>
   19e32:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   19e36:	46b3      	mov	fp, r6
   19e38:	f887 a000 	strb.w	sl, [r7]
   19e3c:	1c7d      	adds	r5, r7, #1
   19e3e:	9e06      	ldr	r6, [sp, #24]
   19e40:	e5d2      	b.n	199e8 <_dtoa_r+0x700>
   19e42:	d104      	bne.n	19e4e <_dtoa_r+0xb66>
   19e44:	f01a 0f01 	tst.w	sl, #1
   19e48:	d001      	beq.n	19e4e <_dtoa_r+0xb66>
   19e4a:	e5bd      	b.n	199c8 <_dtoa_r+0x6e0>
   19e4c:	4615      	mov	r5, r2
   19e4e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   19e52:	2b30      	cmp	r3, #48	; 0x30
   19e54:	f105 32ff 	add.w	r2, r5, #4294967295
   19e58:	d0f8      	beq.n	19e4c <_dtoa_r+0xb64>
   19e5a:	e5c5      	b.n	199e8 <_dtoa_r+0x700>
   19e5c:	9904      	ldr	r1, [sp, #16]
   19e5e:	2230      	movs	r2, #48	; 0x30
   19e60:	700a      	strb	r2, [r1, #0]
   19e62:	9a02      	ldr	r2, [sp, #8]
   19e64:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   19e68:	3201      	adds	r2, #1
   19e6a:	9202      	str	r2, [sp, #8]
   19e6c:	f7ff bbfc 	b.w	19668 <_dtoa_r+0x380>
   19e70:	f000 80bb 	beq.w	19fea <_dtoa_r+0xd02>
   19e74:	9b02      	ldr	r3, [sp, #8]
   19e76:	425d      	negs	r5, r3
   19e78:	4b84      	ldr	r3, [pc, #528]	; (1a08c <_dtoa_r+0xda4>)
   19e7a:	f005 020f 	and.w	r2, r5, #15
   19e7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   19e82:	e9d3 2300 	ldrd	r2, r3, [r3]
   19e86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   19e8a:	f7f7 fda9 	bl	119e0 <__aeabi_dmul>
   19e8e:	112d      	asrs	r5, r5, #4
   19e90:	4607      	mov	r7, r0
   19e92:	4688      	mov	r8, r1
   19e94:	f000 812c 	beq.w	1a0f0 <_dtoa_r+0xe08>
   19e98:	4e7d      	ldr	r6, [pc, #500]	; (1a090 <_dtoa_r+0xda8>)
   19e9a:	f04f 0a02 	mov.w	sl, #2
   19e9e:	07eb      	lsls	r3, r5, #31
   19ea0:	d509      	bpl.n	19eb6 <_dtoa_r+0xbce>
   19ea2:	4638      	mov	r0, r7
   19ea4:	4641      	mov	r1, r8
   19ea6:	e9d6 2300 	ldrd	r2, r3, [r6]
   19eaa:	f7f7 fd99 	bl	119e0 <__aeabi_dmul>
   19eae:	f10a 0a01 	add.w	sl, sl, #1
   19eb2:	4607      	mov	r7, r0
   19eb4:	4688      	mov	r8, r1
   19eb6:	106d      	asrs	r5, r5, #1
   19eb8:	f106 0608 	add.w	r6, r6, #8
   19ebc:	d1ef      	bne.n	19e9e <_dtoa_r+0xbb6>
   19ebe:	e608      	b.n	19ad2 <_dtoa_r+0x7ea>
   19ec0:	6871      	ldr	r1, [r6, #4]
   19ec2:	4620      	mov	r0, r4
   19ec4:	f000 fc9e 	bl	1a804 <_Balloc>
   19ec8:	6933      	ldr	r3, [r6, #16]
   19eca:	3302      	adds	r3, #2
   19ecc:	009a      	lsls	r2, r3, #2
   19ece:	4605      	mov	r5, r0
   19ed0:	f106 010c 	add.w	r1, r6, #12
   19ed4:	300c      	adds	r0, #12
   19ed6:	f7fa fbb3 	bl	14640 <memcpy>
   19eda:	4629      	mov	r1, r5
   19edc:	2201      	movs	r2, #1
   19ede:	4620      	mov	r0, r4
   19ee0:	f000 fe3c 	bl	1ab5c <__lshift>
   19ee4:	9006      	str	r0, [sp, #24]
   19ee6:	e4b5      	b.n	19854 <_dtoa_r+0x56c>
   19ee8:	2b39      	cmp	r3, #57	; 0x39
   19eea:	f8cd b018 	str.w	fp, [sp, #24]
   19eee:	46d0      	mov	r8, sl
   19ef0:	f000 80a5 	beq.w	1a03e <_dtoa_r+0xd56>
   19ef4:	f103 0a01 	add.w	sl, r3, #1
   19ef8:	46b3      	mov	fp, r6
   19efa:	f887 a000 	strb.w	sl, [r7]
   19efe:	1c7d      	adds	r5, r7, #1
   19f00:	9e06      	ldr	r6, [sp, #24]
   19f02:	e571      	b.n	199e8 <_dtoa_r+0x700>
   19f04:	465a      	mov	r2, fp
   19f06:	46d0      	mov	r8, sl
   19f08:	46b3      	mov	fp, r6
   19f0a:	469a      	mov	sl, r3
   19f0c:	4616      	mov	r6, r2
   19f0e:	e54f      	b.n	199b0 <_dtoa_r+0x6c8>
   19f10:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19f12:	495e      	ldr	r1, [pc, #376]	; (1a08c <_dtoa_r+0xda4>)
   19f14:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   19f18:	462a      	mov	r2, r5
   19f1a:	4633      	mov	r3, r6
   19f1c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   19f20:	f7f7 fd5e 	bl	119e0 <__aeabi_dmul>
   19f24:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   19f28:	4638      	mov	r0, r7
   19f2a:	4641      	mov	r1, r8
   19f2c:	f7f7 fff2 	bl	11f14 <__aeabi_d2iz>
   19f30:	4605      	mov	r5, r0
   19f32:	f7f7 fcef 	bl	11914 <__aeabi_i2d>
   19f36:	460b      	mov	r3, r1
   19f38:	4602      	mov	r2, r0
   19f3a:	4641      	mov	r1, r8
   19f3c:	4638      	mov	r0, r7
   19f3e:	f7f7 fb9b 	bl	11678 <__aeabi_dsub>
   19f42:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19f44:	460f      	mov	r7, r1
   19f46:	9904      	ldr	r1, [sp, #16]
   19f48:	3530      	adds	r5, #48	; 0x30
   19f4a:	2b01      	cmp	r3, #1
   19f4c:	700d      	strb	r5, [r1, #0]
   19f4e:	4606      	mov	r6, r0
   19f50:	f101 0501 	add.w	r5, r1, #1
   19f54:	d026      	beq.n	19fa4 <_dtoa_r+0xcbc>
   19f56:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19f58:	9a04      	ldr	r2, [sp, #16]
   19f5a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 1a098 <_dtoa_r+0xdb0>
   19f5e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   19f62:	4413      	add	r3, r2
   19f64:	f04f 0a00 	mov.w	sl, #0
   19f68:	4699      	mov	r9, r3
   19f6a:	4652      	mov	r2, sl
   19f6c:	465b      	mov	r3, fp
   19f6e:	4630      	mov	r0, r6
   19f70:	4639      	mov	r1, r7
   19f72:	f7f7 fd35 	bl	119e0 <__aeabi_dmul>
   19f76:	460f      	mov	r7, r1
   19f78:	4606      	mov	r6, r0
   19f7a:	f7f7 ffcb 	bl	11f14 <__aeabi_d2iz>
   19f7e:	4680      	mov	r8, r0
   19f80:	f7f7 fcc8 	bl	11914 <__aeabi_i2d>
   19f84:	f108 0830 	add.w	r8, r8, #48	; 0x30
   19f88:	4602      	mov	r2, r0
   19f8a:	460b      	mov	r3, r1
   19f8c:	4630      	mov	r0, r6
   19f8e:	4639      	mov	r1, r7
   19f90:	f7f7 fb72 	bl	11678 <__aeabi_dsub>
   19f94:	f805 8b01 	strb.w	r8, [r5], #1
   19f98:	454d      	cmp	r5, r9
   19f9a:	4606      	mov	r6, r0
   19f9c:	460f      	mov	r7, r1
   19f9e:	d1e4      	bne.n	19f6a <_dtoa_r+0xc82>
   19fa0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   19fa4:	4b3b      	ldr	r3, [pc, #236]	; (1a094 <_dtoa_r+0xdac>)
   19fa6:	2200      	movs	r2, #0
   19fa8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   19fac:	f7f7 fb66 	bl	1167c <__adddf3>
   19fb0:	4632      	mov	r2, r6
   19fb2:	463b      	mov	r3, r7
   19fb4:	f7f7 ff86 	bl	11ec4 <__aeabi_dcmplt>
   19fb8:	2800      	cmp	r0, #0
   19fba:	d046      	beq.n	1a04a <_dtoa_r+0xd62>
   19fbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   19fbe:	9302      	str	r3, [sp, #8]
   19fc0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   19fc4:	f7ff bb43 	b.w	1964e <_dtoa_r+0x366>
   19fc8:	f04f 0800 	mov.w	r8, #0
   19fcc:	4646      	mov	r6, r8
   19fce:	e6a9      	b.n	19d24 <_dtoa_r+0xa3c>
   19fd0:	9b08      	ldr	r3, [sp, #32]
   19fd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19fd4:	1a9d      	subs	r5, r3, r2
   19fd6:	2300      	movs	r3, #0
   19fd8:	f7ff bb71 	b.w	196be <_dtoa_r+0x3d6>
   19fdc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19fde:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   19fe0:	9d08      	ldr	r5, [sp, #32]
   19fe2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   19fe6:	f7ff bb6a 	b.w	196be <_dtoa_r+0x3d6>
   19fea:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   19fee:	f04f 0a02 	mov.w	sl, #2
   19ff2:	e56e      	b.n	19ad2 <_dtoa_r+0x7ea>
   19ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19ff6:	2b00      	cmp	r3, #0
   19ff8:	f43f aeb8 	beq.w	19d6c <_dtoa_r+0xa84>
   19ffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19ffe:	2b00      	cmp	r3, #0
   1a000:	f77f aede 	ble.w	19dc0 <_dtoa_r+0xad8>
   1a004:	2200      	movs	r2, #0
   1a006:	4b24      	ldr	r3, [pc, #144]	; (1a098 <_dtoa_r+0xdb0>)
   1a008:	4638      	mov	r0, r7
   1a00a:	4641      	mov	r1, r8
   1a00c:	f7f7 fce8 	bl	119e0 <__aeabi_dmul>
   1a010:	4607      	mov	r7, r0
   1a012:	4688      	mov	r8, r1
   1a014:	f10a 0001 	add.w	r0, sl, #1
   1a018:	f7f7 fc7c 	bl	11914 <__aeabi_i2d>
   1a01c:	463a      	mov	r2, r7
   1a01e:	4643      	mov	r3, r8
   1a020:	f7f7 fcde 	bl	119e0 <__aeabi_dmul>
   1a024:	2200      	movs	r2, #0
   1a026:	4b17      	ldr	r3, [pc, #92]	; (1a084 <_dtoa_r+0xd9c>)
   1a028:	f7f7 fb28 	bl	1167c <__adddf3>
   1a02c:	9a02      	ldr	r2, [sp, #8]
   1a02e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a030:	9312      	str	r3, [sp, #72]	; 0x48
   1a032:	3a01      	subs	r2, #1
   1a034:	4605      	mov	r5, r0
   1a036:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   1a03a:	9215      	str	r2, [sp, #84]	; 0x54
   1a03c:	e56a      	b.n	19b14 <_dtoa_r+0x82c>
   1a03e:	2239      	movs	r2, #57	; 0x39
   1a040:	46b3      	mov	fp, r6
   1a042:	703a      	strb	r2, [r7, #0]
   1a044:	9e06      	ldr	r6, [sp, #24]
   1a046:	1c7d      	adds	r5, r7, #1
   1a048:	e4c0      	b.n	199cc <_dtoa_r+0x6e4>
   1a04a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   1a04e:	2000      	movs	r0, #0
   1a050:	4910      	ldr	r1, [pc, #64]	; (1a094 <_dtoa_r+0xdac>)
   1a052:	f7f7 fb11 	bl	11678 <__aeabi_dsub>
   1a056:	4632      	mov	r2, r6
   1a058:	463b      	mov	r3, r7
   1a05a:	f7f7 ff51 	bl	11f00 <__aeabi_dcmpgt>
   1a05e:	b908      	cbnz	r0, 1a064 <_dtoa_r+0xd7c>
   1a060:	e6ae      	b.n	19dc0 <_dtoa_r+0xad8>
   1a062:	4615      	mov	r5, r2
   1a064:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1a068:	2b30      	cmp	r3, #48	; 0x30
   1a06a:	f105 32ff 	add.w	r2, r5, #4294967295
   1a06e:	d0f8      	beq.n	1a062 <_dtoa_r+0xd7a>
   1a070:	e5d7      	b.n	19c22 <_dtoa_r+0x93a>
   1a072:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   1a076:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1a078:	9302      	str	r3, [sp, #8]
   1a07a:	f7ff bae8 	b.w	1964e <_dtoa_r+0x366>
   1a07e:	970c      	str	r7, [sp, #48]	; 0x30
   1a080:	f7ff bba5 	b.w	197ce <_dtoa_r+0x4e6>
   1a084:	401c0000 	.word	0x401c0000
   1a088:	40140000 	.word	0x40140000
   1a08c:	00023d60 	.word	0x00023d60
   1a090:	00023d38 	.word	0x00023d38
   1a094:	3fe00000 	.word	0x3fe00000
   1a098:	40240000 	.word	0x40240000
   1a09c:	2b39      	cmp	r3, #57	; 0x39
   1a09e:	f8cd b018 	str.w	fp, [sp, #24]
   1a0a2:	46d0      	mov	r8, sl
   1a0a4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   1a0a8:	469a      	mov	sl, r3
   1a0aa:	d0c8      	beq.n	1a03e <_dtoa_r+0xd56>
   1a0ac:	f1bb 0f00 	cmp.w	fp, #0
   1a0b0:	f73f aebf 	bgt.w	19e32 <_dtoa_r+0xb4a>
   1a0b4:	e6bf      	b.n	19e36 <_dtoa_r+0xb4e>
   1a0b6:	f47f aebe 	bne.w	19e36 <_dtoa_r+0xb4e>
   1a0ba:	f01a 0f01 	tst.w	sl, #1
   1a0be:	f43f aeba 	beq.w	19e36 <_dtoa_r+0xb4e>
   1a0c2:	e6b2      	b.n	19e2a <_dtoa_r+0xb42>
   1a0c4:	f04f 0800 	mov.w	r8, #0
   1a0c8:	4646      	mov	r6, r8
   1a0ca:	e5e9      	b.n	19ca0 <_dtoa_r+0x9b8>
   1a0cc:	4631      	mov	r1, r6
   1a0ce:	2300      	movs	r3, #0
   1a0d0:	220a      	movs	r2, #10
   1a0d2:	4620      	mov	r0, r4
   1a0d4:	f000 fbc6 	bl	1a864 <__multadd>
   1a0d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a0da:	2b00      	cmp	r3, #0
   1a0dc:	4606      	mov	r6, r0
   1a0de:	dd0a      	ble.n	1a0f6 <_dtoa_r+0xe0e>
   1a0e0:	930a      	str	r3, [sp, #40]	; 0x28
   1a0e2:	f7ff bbaa 	b.w	1983a <_dtoa_r+0x552>
   1a0e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1a0e8:	2b02      	cmp	r3, #2
   1a0ea:	dc23      	bgt.n	1a134 <_dtoa_r+0xe4c>
   1a0ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a0ee:	e43b      	b.n	19968 <_dtoa_r+0x680>
   1a0f0:	f04f 0a02 	mov.w	sl, #2
   1a0f4:	e4ed      	b.n	19ad2 <_dtoa_r+0x7ea>
   1a0f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1a0f8:	2b02      	cmp	r3, #2
   1a0fa:	dc1b      	bgt.n	1a134 <_dtoa_r+0xe4c>
   1a0fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a0fe:	e7ef      	b.n	1a0e0 <_dtoa_r+0xdf8>
   1a100:	2500      	movs	r5, #0
   1a102:	6465      	str	r5, [r4, #68]	; 0x44
   1a104:	4629      	mov	r1, r5
   1a106:	4620      	mov	r0, r4
   1a108:	f000 fb7c 	bl	1a804 <_Balloc>
   1a10c:	f04f 33ff 	mov.w	r3, #4294967295
   1a110:	930a      	str	r3, [sp, #40]	; 0x28
   1a112:	930f      	str	r3, [sp, #60]	; 0x3c
   1a114:	2301      	movs	r3, #1
   1a116:	9004      	str	r0, [sp, #16]
   1a118:	9525      	str	r5, [sp, #148]	; 0x94
   1a11a:	6420      	str	r0, [r4, #64]	; 0x40
   1a11c:	930b      	str	r3, [sp, #44]	; 0x2c
   1a11e:	f7ff b9dd 	b.w	194dc <_dtoa_r+0x1f4>
   1a122:	2501      	movs	r5, #1
   1a124:	f7ff b9a5 	b.w	19472 <_dtoa_r+0x18a>
   1a128:	f43f ab69 	beq.w	197fe <_dtoa_r+0x516>
   1a12c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   1a130:	f7ff bbf9 	b.w	19926 <_dtoa_r+0x63e>
   1a134:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a136:	930a      	str	r3, [sp, #40]	; 0x28
   1a138:	e5e5      	b.n	19d06 <_dtoa_r+0xa1e>
   1a13a:	bf00      	nop

0001a13c <__sflush_r>:
   1a13c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   1a140:	b29a      	uxth	r2, r3
   1a142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a146:	460d      	mov	r5, r1
   1a148:	0711      	lsls	r1, r2, #28
   1a14a:	4680      	mov	r8, r0
   1a14c:	d43a      	bmi.n	1a1c4 <__sflush_r+0x88>
   1a14e:	686a      	ldr	r2, [r5, #4]
   1a150:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1a154:	2a00      	cmp	r2, #0
   1a156:	81ab      	strh	r3, [r5, #12]
   1a158:	dd6f      	ble.n	1a23a <__sflush_r+0xfe>
   1a15a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1a15c:	2c00      	cmp	r4, #0
   1a15e:	d049      	beq.n	1a1f4 <__sflush_r+0xb8>
   1a160:	2200      	movs	r2, #0
   1a162:	b29b      	uxth	r3, r3
   1a164:	f8d8 6000 	ldr.w	r6, [r8]
   1a168:	f8c8 2000 	str.w	r2, [r8]
   1a16c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   1a170:	d067      	beq.n	1a242 <__sflush_r+0x106>
   1a172:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   1a174:	075f      	lsls	r7, r3, #29
   1a176:	d505      	bpl.n	1a184 <__sflush_r+0x48>
   1a178:	6869      	ldr	r1, [r5, #4]
   1a17a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1a17c:	1a52      	subs	r2, r2, r1
   1a17e:	b10b      	cbz	r3, 1a184 <__sflush_r+0x48>
   1a180:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1a182:	1ad2      	subs	r2, r2, r3
   1a184:	2300      	movs	r3, #0
   1a186:	69e9      	ldr	r1, [r5, #28]
   1a188:	4640      	mov	r0, r8
   1a18a:	47a0      	blx	r4
   1a18c:	1c44      	adds	r4, r0, #1
   1a18e:	d03c      	beq.n	1a20a <__sflush_r+0xce>
   1a190:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   1a194:	692a      	ldr	r2, [r5, #16]
   1a196:	602a      	str	r2, [r5, #0]
   1a198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1a19c:	2200      	movs	r2, #0
   1a19e:	81ab      	strh	r3, [r5, #12]
   1a1a0:	04db      	lsls	r3, r3, #19
   1a1a2:	606a      	str	r2, [r5, #4]
   1a1a4:	d447      	bmi.n	1a236 <__sflush_r+0xfa>
   1a1a6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1a1a8:	f8c8 6000 	str.w	r6, [r8]
   1a1ac:	b311      	cbz	r1, 1a1f4 <__sflush_r+0xb8>
   1a1ae:	f105 0340 	add.w	r3, r5, #64	; 0x40
   1a1b2:	4299      	cmp	r1, r3
   1a1b4:	d002      	beq.n	1a1bc <__sflush_r+0x80>
   1a1b6:	4640      	mov	r0, r8
   1a1b8:	f000 f9de 	bl	1a578 <_free_r>
   1a1bc:	2000      	movs	r0, #0
   1a1be:	6328      	str	r0, [r5, #48]	; 0x30
   1a1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a1c4:	692e      	ldr	r6, [r5, #16]
   1a1c6:	b1ae      	cbz	r6, 1a1f4 <__sflush_r+0xb8>
   1a1c8:	682c      	ldr	r4, [r5, #0]
   1a1ca:	602e      	str	r6, [r5, #0]
   1a1cc:	0791      	lsls	r1, r2, #30
   1a1ce:	bf0c      	ite	eq
   1a1d0:	696b      	ldreq	r3, [r5, #20]
   1a1d2:	2300      	movne	r3, #0
   1a1d4:	1ba4      	subs	r4, r4, r6
   1a1d6:	60ab      	str	r3, [r5, #8]
   1a1d8:	e00a      	b.n	1a1f0 <__sflush_r+0xb4>
   1a1da:	4623      	mov	r3, r4
   1a1dc:	4632      	mov	r2, r6
   1a1de:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   1a1e0:	69e9      	ldr	r1, [r5, #28]
   1a1e2:	4640      	mov	r0, r8
   1a1e4:	47b8      	blx	r7
   1a1e6:	2800      	cmp	r0, #0
   1a1e8:	eba4 0400 	sub.w	r4, r4, r0
   1a1ec:	4406      	add	r6, r0
   1a1ee:	dd04      	ble.n	1a1fa <__sflush_r+0xbe>
   1a1f0:	2c00      	cmp	r4, #0
   1a1f2:	dcf2      	bgt.n	1a1da <__sflush_r+0x9e>
   1a1f4:	2000      	movs	r0, #0
   1a1f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a1fa:	89ab      	ldrh	r3, [r5, #12]
   1a1fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a200:	81ab      	strh	r3, [r5, #12]
   1a202:	f04f 30ff 	mov.w	r0, #4294967295
   1a206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a20a:	f8d8 4000 	ldr.w	r4, [r8]
   1a20e:	2c1d      	cmp	r4, #29
   1a210:	d8f3      	bhi.n	1a1fa <__sflush_r+0xbe>
   1a212:	4b19      	ldr	r3, [pc, #100]	; (1a278 <__sflush_r+0x13c>)
   1a214:	40e3      	lsrs	r3, r4
   1a216:	43db      	mvns	r3, r3
   1a218:	f013 0301 	ands.w	r3, r3, #1
   1a21c:	d1ed      	bne.n	1a1fa <__sflush_r+0xbe>
   1a21e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   1a222:	606b      	str	r3, [r5, #4]
   1a224:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
   1a228:	6929      	ldr	r1, [r5, #16]
   1a22a:	81ab      	strh	r3, [r5, #12]
   1a22c:	04da      	lsls	r2, r3, #19
   1a22e:	6029      	str	r1, [r5, #0]
   1a230:	d5b9      	bpl.n	1a1a6 <__sflush_r+0x6a>
   1a232:	2c00      	cmp	r4, #0
   1a234:	d1b7      	bne.n	1a1a6 <__sflush_r+0x6a>
   1a236:	6528      	str	r0, [r5, #80]	; 0x50
   1a238:	e7b5      	b.n	1a1a6 <__sflush_r+0x6a>
   1a23a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   1a23c:	2a00      	cmp	r2, #0
   1a23e:	dc8c      	bgt.n	1a15a <__sflush_r+0x1e>
   1a240:	e7d8      	b.n	1a1f4 <__sflush_r+0xb8>
   1a242:	2301      	movs	r3, #1
   1a244:	69e9      	ldr	r1, [r5, #28]
   1a246:	4640      	mov	r0, r8
   1a248:	47a0      	blx	r4
   1a24a:	1c43      	adds	r3, r0, #1
   1a24c:	4602      	mov	r2, r0
   1a24e:	d002      	beq.n	1a256 <__sflush_r+0x11a>
   1a250:	89ab      	ldrh	r3, [r5, #12]
   1a252:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1a254:	e78e      	b.n	1a174 <__sflush_r+0x38>
   1a256:	f8d8 3000 	ldr.w	r3, [r8]
   1a25a:	2b00      	cmp	r3, #0
   1a25c:	d0f8      	beq.n	1a250 <__sflush_r+0x114>
   1a25e:	2b1d      	cmp	r3, #29
   1a260:	d001      	beq.n	1a266 <__sflush_r+0x12a>
   1a262:	2b16      	cmp	r3, #22
   1a264:	d102      	bne.n	1a26c <__sflush_r+0x130>
   1a266:	f8c8 6000 	str.w	r6, [r8]
   1a26a:	e7c3      	b.n	1a1f4 <__sflush_r+0xb8>
   1a26c:	89ab      	ldrh	r3, [r5, #12]
   1a26e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a272:	81ab      	strh	r3, [r5, #12]
   1a274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a278:	20400001 	.word	0x20400001

0001a27c <_fflush_r>:
   1a27c:	b538      	push	{r3, r4, r5, lr}
   1a27e:	460d      	mov	r5, r1
   1a280:	4604      	mov	r4, r0
   1a282:	b108      	cbz	r0, 1a288 <_fflush_r+0xc>
   1a284:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1a286:	b1bb      	cbz	r3, 1a2b8 <_fflush_r+0x3c>
   1a288:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   1a28c:	b188      	cbz	r0, 1a2b2 <_fflush_r+0x36>
   1a28e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1a290:	07db      	lsls	r3, r3, #31
   1a292:	d401      	bmi.n	1a298 <_fflush_r+0x1c>
   1a294:	0581      	lsls	r1, r0, #22
   1a296:	d517      	bpl.n	1a2c8 <_fflush_r+0x4c>
   1a298:	4620      	mov	r0, r4
   1a29a:	4629      	mov	r1, r5
   1a29c:	f7ff ff4e 	bl	1a13c <__sflush_r>
   1a2a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1a2a2:	07da      	lsls	r2, r3, #31
   1a2a4:	4604      	mov	r4, r0
   1a2a6:	d402      	bmi.n	1a2ae <_fflush_r+0x32>
   1a2a8:	89ab      	ldrh	r3, [r5, #12]
   1a2aa:	059b      	lsls	r3, r3, #22
   1a2ac:	d507      	bpl.n	1a2be <_fflush_r+0x42>
   1a2ae:	4620      	mov	r0, r4
   1a2b0:	bd38      	pop	{r3, r4, r5, pc}
   1a2b2:	4604      	mov	r4, r0
   1a2b4:	4620      	mov	r0, r4
   1a2b6:	bd38      	pop	{r3, r4, r5, pc}
   1a2b8:	f000 f838 	bl	1a32c <__sinit>
   1a2bc:	e7e4      	b.n	1a288 <_fflush_r+0xc>
   1a2be:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1a2c0:	f7f9 fde8 	bl	13e94 <__retarget_lock_release_recursive>
   1a2c4:	4620      	mov	r0, r4
   1a2c6:	bd38      	pop	{r3, r4, r5, pc}
   1a2c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1a2ca:	f7f9 fde1 	bl	13e90 <__retarget_lock_acquire_recursive>
   1a2ce:	e7e3      	b.n	1a298 <_fflush_r+0x1c>

0001a2d0 <_cleanup_r>:
   1a2d0:	4901      	ldr	r1, [pc, #4]	; (1a2d8 <_cleanup_r+0x8>)
   1a2d2:	f000 ba37 	b.w	1a744 <_fwalk_reent>
   1a2d6:	bf00      	nop
   1a2d8:	0001af81 	.word	0x0001af81

0001a2dc <std.isra.0>:
   1a2dc:	b510      	push	{r4, lr}
   1a2de:	2300      	movs	r3, #0
   1a2e0:	4604      	mov	r4, r0
   1a2e2:	8181      	strh	r1, [r0, #12]
   1a2e4:	81c2      	strh	r2, [r0, #14]
   1a2e6:	6003      	str	r3, [r0, #0]
   1a2e8:	6043      	str	r3, [r0, #4]
   1a2ea:	6083      	str	r3, [r0, #8]
   1a2ec:	6643      	str	r3, [r0, #100]	; 0x64
   1a2ee:	6103      	str	r3, [r0, #16]
   1a2f0:	6143      	str	r3, [r0, #20]
   1a2f2:	6183      	str	r3, [r0, #24]
   1a2f4:	4619      	mov	r1, r3
   1a2f6:	2208      	movs	r2, #8
   1a2f8:	305c      	adds	r0, #92	; 0x5c
   1a2fa:	f7fa fa9f 	bl	1483c <memset>
   1a2fe:	4807      	ldr	r0, [pc, #28]	; (1a31c <std.isra.0+0x40>)
   1a300:	4907      	ldr	r1, [pc, #28]	; (1a320 <std.isra.0+0x44>)
   1a302:	4a08      	ldr	r2, [pc, #32]	; (1a324 <std.isra.0+0x48>)
   1a304:	4b08      	ldr	r3, [pc, #32]	; (1a328 <std.isra.0+0x4c>)
   1a306:	6220      	str	r0, [r4, #32]
   1a308:	61e4      	str	r4, [r4, #28]
   1a30a:	6261      	str	r1, [r4, #36]	; 0x24
   1a30c:	62a2      	str	r2, [r4, #40]	; 0x28
   1a30e:	62e3      	str	r3, [r4, #44]	; 0x2c
   1a310:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1a314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a318:	f7f9 bdb6 	b.w	13e88 <__retarget_lock_init_recursive>
   1a31c:	00014df1 	.word	0x00014df1
   1a320:	00014e15 	.word	0x00014e15
   1a324:	00014e51 	.word	0x00014e51
   1a328:	00014e71 	.word	0x00014e71

0001a32c <__sinit>:
   1a32c:	b510      	push	{r4, lr}
   1a32e:	4604      	mov	r4, r0
   1a330:	4812      	ldr	r0, [pc, #72]	; (1a37c <__sinit+0x50>)
   1a332:	f7f9 fdad 	bl	13e90 <__retarget_lock_acquire_recursive>
   1a336:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1a338:	b9d2      	cbnz	r2, 1a370 <__sinit+0x44>
   1a33a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   1a33e:	4810      	ldr	r0, [pc, #64]	; (1a380 <__sinit+0x54>)
   1a340:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   1a344:	2103      	movs	r1, #3
   1a346:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   1a34a:	63e0      	str	r0, [r4, #60]	; 0x3c
   1a34c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   1a350:	6860      	ldr	r0, [r4, #4]
   1a352:	2104      	movs	r1, #4
   1a354:	f7ff ffc2 	bl	1a2dc <std.isra.0>
   1a358:	2201      	movs	r2, #1
   1a35a:	2109      	movs	r1, #9
   1a35c:	68a0      	ldr	r0, [r4, #8]
   1a35e:	f7ff ffbd 	bl	1a2dc <std.isra.0>
   1a362:	2202      	movs	r2, #2
   1a364:	2112      	movs	r1, #18
   1a366:	68e0      	ldr	r0, [r4, #12]
   1a368:	f7ff ffb8 	bl	1a2dc <std.isra.0>
   1a36c:	2301      	movs	r3, #1
   1a36e:	63a3      	str	r3, [r4, #56]	; 0x38
   1a370:	4802      	ldr	r0, [pc, #8]	; (1a37c <__sinit+0x50>)
   1a372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a376:	f7f9 bd8d 	b.w	13e94 <__retarget_lock_release_recursive>
   1a37a:	bf00      	nop
   1a37c:	2000fca8 	.word	0x2000fca8
   1a380:	0001a2d1 	.word	0x0001a2d1

0001a384 <__sfp_lock_acquire>:
   1a384:	4801      	ldr	r0, [pc, #4]	; (1a38c <__sfp_lock_acquire+0x8>)
   1a386:	f7f9 bd83 	b.w	13e90 <__retarget_lock_acquire_recursive>
   1a38a:	bf00      	nop
   1a38c:	2000fcac 	.word	0x2000fcac

0001a390 <__sfp_lock_release>:
   1a390:	4801      	ldr	r0, [pc, #4]	; (1a398 <__sfp_lock_release+0x8>)
   1a392:	f7f9 bd7f 	b.w	13e94 <__retarget_lock_release_recursive>
   1a396:	bf00      	nop
   1a398:	2000fcac 	.word	0x2000fcac

0001a39c <__libc_fini_array>:
   1a39c:	b538      	push	{r3, r4, r5, lr}
   1a39e:	4c0a      	ldr	r4, [pc, #40]	; (1a3c8 <__libc_fini_array+0x2c>)
   1a3a0:	4d0a      	ldr	r5, [pc, #40]	; (1a3cc <__libc_fini_array+0x30>)
   1a3a2:	1b64      	subs	r4, r4, r5
   1a3a4:	10a4      	asrs	r4, r4, #2
   1a3a6:	d00a      	beq.n	1a3be <__libc_fini_array+0x22>
   1a3a8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   1a3ac:	3b01      	subs	r3, #1
   1a3ae:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1a3b2:	3c01      	subs	r4, #1
   1a3b4:	f855 3904 	ldr.w	r3, [r5], #-4
   1a3b8:	4798      	blx	r3
   1a3ba:	2c00      	cmp	r4, #0
   1a3bc:	d1f9      	bne.n	1a3b2 <__libc_fini_array+0x16>
   1a3be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1a3c2:	f009 be01 	b.w	23fc8 <_fini>
   1a3c6:	bf00      	nop
   1a3c8:	00023fd8 	.word	0x00023fd8
   1a3cc:	00023fd4 	.word	0x00023fd4

0001a3d0 <__fputwc>:
   1a3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a3d4:	b082      	sub	sp, #8
   1a3d6:	4680      	mov	r8, r0
   1a3d8:	4689      	mov	r9, r1
   1a3da:	4614      	mov	r4, r2
   1a3dc:	f7f9 fd46 	bl	13e6c <__locale_mb_cur_max>
   1a3e0:	2801      	cmp	r0, #1
   1a3e2:	d036      	beq.n	1a452 <__fputwc+0x82>
   1a3e4:	464a      	mov	r2, r9
   1a3e6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   1a3ea:	a901      	add	r1, sp, #4
   1a3ec:	4640      	mov	r0, r8
   1a3ee:	f7fe fdb1 	bl	18f54 <_wcrtomb_r>
   1a3f2:	1c42      	adds	r2, r0, #1
   1a3f4:	4606      	mov	r6, r0
   1a3f6:	d025      	beq.n	1a444 <__fputwc+0x74>
   1a3f8:	b3a8      	cbz	r0, 1a466 <__fputwc+0x96>
   1a3fa:	f89d e004 	ldrb.w	lr, [sp, #4]
   1a3fe:	2500      	movs	r5, #0
   1a400:	f10d 0a04 	add.w	sl, sp, #4
   1a404:	e009      	b.n	1a41a <__fputwc+0x4a>
   1a406:	6823      	ldr	r3, [r4, #0]
   1a408:	1c5a      	adds	r2, r3, #1
   1a40a:	6022      	str	r2, [r4, #0]
   1a40c:	f883 e000 	strb.w	lr, [r3]
   1a410:	3501      	adds	r5, #1
   1a412:	42b5      	cmp	r5, r6
   1a414:	d227      	bcs.n	1a466 <__fputwc+0x96>
   1a416:	f815 e00a 	ldrb.w	lr, [r5, sl]
   1a41a:	68a3      	ldr	r3, [r4, #8]
   1a41c:	3b01      	subs	r3, #1
   1a41e:	2b00      	cmp	r3, #0
   1a420:	60a3      	str	r3, [r4, #8]
   1a422:	daf0      	bge.n	1a406 <__fputwc+0x36>
   1a424:	69a7      	ldr	r7, [r4, #24]
   1a426:	42bb      	cmp	r3, r7
   1a428:	4671      	mov	r1, lr
   1a42a:	4622      	mov	r2, r4
   1a42c:	4640      	mov	r0, r8
   1a42e:	db02      	blt.n	1a436 <__fputwc+0x66>
   1a430:	f1be 0f0a 	cmp.w	lr, #10
   1a434:	d1e7      	bne.n	1a406 <__fputwc+0x36>
   1a436:	f7fe fd35 	bl	18ea4 <__swbuf_r>
   1a43a:	1c43      	adds	r3, r0, #1
   1a43c:	d1e8      	bne.n	1a410 <__fputwc+0x40>
   1a43e:	b002      	add	sp, #8
   1a440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a444:	89a3      	ldrh	r3, [r4, #12]
   1a446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a44a:	81a3      	strh	r3, [r4, #12]
   1a44c:	b002      	add	sp, #8
   1a44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a452:	f109 33ff 	add.w	r3, r9, #4294967295
   1a456:	2bfe      	cmp	r3, #254	; 0xfe
   1a458:	d8c4      	bhi.n	1a3e4 <__fputwc+0x14>
   1a45a:	fa5f fe89 	uxtb.w	lr, r9
   1a45e:	4606      	mov	r6, r0
   1a460:	f88d e004 	strb.w	lr, [sp, #4]
   1a464:	e7cb      	b.n	1a3fe <__fputwc+0x2e>
   1a466:	4648      	mov	r0, r9
   1a468:	b002      	add	sp, #8
   1a46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a46e:	bf00      	nop

0001a470 <_fputwc_r>:
   1a470:	b530      	push	{r4, r5, lr}
   1a472:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1a474:	f013 0f01 	tst.w	r3, #1
   1a478:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1a47c:	4614      	mov	r4, r2
   1a47e:	b083      	sub	sp, #12
   1a480:	4605      	mov	r5, r0
   1a482:	b29a      	uxth	r2, r3
   1a484:	d101      	bne.n	1a48a <_fputwc_r+0x1a>
   1a486:	0590      	lsls	r0, r2, #22
   1a488:	d51c      	bpl.n	1a4c4 <_fputwc_r+0x54>
   1a48a:	0490      	lsls	r0, r2, #18
   1a48c:	d406      	bmi.n	1a49c <_fputwc_r+0x2c>
   1a48e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1a490:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1a494:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1a498:	81a3      	strh	r3, [r4, #12]
   1a49a:	6662      	str	r2, [r4, #100]	; 0x64
   1a49c:	4628      	mov	r0, r5
   1a49e:	4622      	mov	r2, r4
   1a4a0:	f7ff ff96 	bl	1a3d0 <__fputwc>
   1a4a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1a4a6:	07da      	lsls	r2, r3, #31
   1a4a8:	4605      	mov	r5, r0
   1a4aa:	d402      	bmi.n	1a4b2 <_fputwc_r+0x42>
   1a4ac:	89a3      	ldrh	r3, [r4, #12]
   1a4ae:	059b      	lsls	r3, r3, #22
   1a4b0:	d502      	bpl.n	1a4b8 <_fputwc_r+0x48>
   1a4b2:	4628      	mov	r0, r5
   1a4b4:	b003      	add	sp, #12
   1a4b6:	bd30      	pop	{r4, r5, pc}
   1a4b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a4ba:	f7f9 fceb 	bl	13e94 <__retarget_lock_release_recursive>
   1a4be:	4628      	mov	r0, r5
   1a4c0:	b003      	add	sp, #12
   1a4c2:	bd30      	pop	{r4, r5, pc}
   1a4c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a4c6:	9101      	str	r1, [sp, #4]
   1a4c8:	f7f9 fce2 	bl	13e90 <__retarget_lock_acquire_recursive>
   1a4cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a4d0:	9901      	ldr	r1, [sp, #4]
   1a4d2:	b29a      	uxth	r2, r3
   1a4d4:	e7d9      	b.n	1a48a <_fputwc_r+0x1a>
   1a4d6:	bf00      	nop

0001a4d8 <_malloc_trim_r>:
   1a4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a4da:	4f24      	ldr	r7, [pc, #144]	; (1a56c <_malloc_trim_r+0x94>)
   1a4dc:	460c      	mov	r4, r1
   1a4de:	4606      	mov	r6, r0
   1a4e0:	f7fa f9fa 	bl	148d8 <__malloc_lock>
   1a4e4:	68bb      	ldr	r3, [r7, #8]
   1a4e6:	685d      	ldr	r5, [r3, #4]
   1a4e8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   1a4ec:	310f      	adds	r1, #15
   1a4ee:	f025 0503 	bic.w	r5, r5, #3
   1a4f2:	4429      	add	r1, r5
   1a4f4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   1a4f8:	f021 010f 	bic.w	r1, r1, #15
   1a4fc:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   1a500:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   1a504:	db07      	blt.n	1a516 <_malloc_trim_r+0x3e>
   1a506:	2100      	movs	r1, #0
   1a508:	4630      	mov	r0, r6
   1a50a:	f7fa fbeb 	bl	14ce4 <_sbrk_r>
   1a50e:	68bb      	ldr	r3, [r7, #8]
   1a510:	442b      	add	r3, r5
   1a512:	4298      	cmp	r0, r3
   1a514:	d004      	beq.n	1a520 <_malloc_trim_r+0x48>
   1a516:	4630      	mov	r0, r6
   1a518:	f7fa f9e4 	bl	148e4 <__malloc_unlock>
   1a51c:	2000      	movs	r0, #0
   1a51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a520:	4261      	negs	r1, r4
   1a522:	4630      	mov	r0, r6
   1a524:	f7fa fbde 	bl	14ce4 <_sbrk_r>
   1a528:	3001      	adds	r0, #1
   1a52a:	d00d      	beq.n	1a548 <_malloc_trim_r+0x70>
   1a52c:	4b10      	ldr	r3, [pc, #64]	; (1a570 <_malloc_trim_r+0x98>)
   1a52e:	68ba      	ldr	r2, [r7, #8]
   1a530:	6819      	ldr	r1, [r3, #0]
   1a532:	1b2d      	subs	r5, r5, r4
   1a534:	f045 0501 	orr.w	r5, r5, #1
   1a538:	4630      	mov	r0, r6
   1a53a:	1b09      	subs	r1, r1, r4
   1a53c:	6055      	str	r5, [r2, #4]
   1a53e:	6019      	str	r1, [r3, #0]
   1a540:	f7fa f9d0 	bl	148e4 <__malloc_unlock>
   1a544:	2001      	movs	r0, #1
   1a546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a548:	2100      	movs	r1, #0
   1a54a:	4630      	mov	r0, r6
   1a54c:	f7fa fbca 	bl	14ce4 <_sbrk_r>
   1a550:	68ba      	ldr	r2, [r7, #8]
   1a552:	1a83      	subs	r3, r0, r2
   1a554:	2b0f      	cmp	r3, #15
   1a556:	ddde      	ble.n	1a516 <_malloc_trim_r+0x3e>
   1a558:	4c06      	ldr	r4, [pc, #24]	; (1a574 <_malloc_trim_r+0x9c>)
   1a55a:	4905      	ldr	r1, [pc, #20]	; (1a570 <_malloc_trim_r+0x98>)
   1a55c:	6824      	ldr	r4, [r4, #0]
   1a55e:	f043 0301 	orr.w	r3, r3, #1
   1a562:	1b00      	subs	r0, r0, r4
   1a564:	6053      	str	r3, [r2, #4]
   1a566:	6008      	str	r0, [r1, #0]
   1a568:	e7d5      	b.n	1a516 <_malloc_trim_r+0x3e>
   1a56a:	bf00      	nop
   1a56c:	200005b4 	.word	0x200005b4
   1a570:	2000fc30 	.word	0x2000fc30
   1a574:	200009bc 	.word	0x200009bc

0001a578 <_free_r>:
   1a578:	2900      	cmp	r1, #0
   1a57a:	d044      	beq.n	1a606 <_free_r+0x8e>
   1a57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a580:	460d      	mov	r5, r1
   1a582:	4680      	mov	r8, r0
   1a584:	f7fa f9a8 	bl	148d8 <__malloc_lock>
   1a588:	f855 7c04 	ldr.w	r7, [r5, #-4]
   1a58c:	4969      	ldr	r1, [pc, #420]	; (1a734 <_free_r+0x1bc>)
   1a58e:	f027 0301 	bic.w	r3, r7, #1
   1a592:	f1a5 0408 	sub.w	r4, r5, #8
   1a596:	18e2      	adds	r2, r4, r3
   1a598:	688e      	ldr	r6, [r1, #8]
   1a59a:	6850      	ldr	r0, [r2, #4]
   1a59c:	42b2      	cmp	r2, r6
   1a59e:	f020 0003 	bic.w	r0, r0, #3
   1a5a2:	d05e      	beq.n	1a662 <_free_r+0xea>
   1a5a4:	07fe      	lsls	r6, r7, #31
   1a5a6:	6050      	str	r0, [r2, #4]
   1a5a8:	d40b      	bmi.n	1a5c2 <_free_r+0x4a>
   1a5aa:	f855 7c08 	ldr.w	r7, [r5, #-8]
   1a5ae:	1be4      	subs	r4, r4, r7
   1a5b0:	f101 0e08 	add.w	lr, r1, #8
   1a5b4:	68a5      	ldr	r5, [r4, #8]
   1a5b6:	4575      	cmp	r5, lr
   1a5b8:	443b      	add	r3, r7
   1a5ba:	d06d      	beq.n	1a698 <_free_r+0x120>
   1a5bc:	68e7      	ldr	r7, [r4, #12]
   1a5be:	60ef      	str	r7, [r5, #12]
   1a5c0:	60bd      	str	r5, [r7, #8]
   1a5c2:	1815      	adds	r5, r2, r0
   1a5c4:	686d      	ldr	r5, [r5, #4]
   1a5c6:	07ed      	lsls	r5, r5, #31
   1a5c8:	d53e      	bpl.n	1a648 <_free_r+0xd0>
   1a5ca:	f043 0201 	orr.w	r2, r3, #1
   1a5ce:	6062      	str	r2, [r4, #4]
   1a5d0:	50e3      	str	r3, [r4, r3]
   1a5d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1a5d6:	d217      	bcs.n	1a608 <_free_r+0x90>
   1a5d8:	08db      	lsrs	r3, r3, #3
   1a5da:	1c58      	adds	r0, r3, #1
   1a5dc:	109a      	asrs	r2, r3, #2
   1a5de:	684d      	ldr	r5, [r1, #4]
   1a5e0:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   1a5e4:	60a7      	str	r7, [r4, #8]
   1a5e6:	2301      	movs	r3, #1
   1a5e8:	4093      	lsls	r3, r2
   1a5ea:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   1a5ee:	432b      	orrs	r3, r5
   1a5f0:	3a08      	subs	r2, #8
   1a5f2:	60e2      	str	r2, [r4, #12]
   1a5f4:	604b      	str	r3, [r1, #4]
   1a5f6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   1a5fa:	60fc      	str	r4, [r7, #12]
   1a5fc:	4640      	mov	r0, r8
   1a5fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a602:	f7fa b96f 	b.w	148e4 <__malloc_unlock>
   1a606:	4770      	bx	lr
   1a608:	0a5a      	lsrs	r2, r3, #9
   1a60a:	2a04      	cmp	r2, #4
   1a60c:	d852      	bhi.n	1a6b4 <_free_r+0x13c>
   1a60e:	099a      	lsrs	r2, r3, #6
   1a610:	f102 0739 	add.w	r7, r2, #57	; 0x39
   1a614:	00ff      	lsls	r7, r7, #3
   1a616:	f102 0538 	add.w	r5, r2, #56	; 0x38
   1a61a:	19c8      	adds	r0, r1, r7
   1a61c:	59ca      	ldr	r2, [r1, r7]
   1a61e:	3808      	subs	r0, #8
   1a620:	4290      	cmp	r0, r2
   1a622:	d04f      	beq.n	1a6c4 <_free_r+0x14c>
   1a624:	6851      	ldr	r1, [r2, #4]
   1a626:	f021 0103 	bic.w	r1, r1, #3
   1a62a:	428b      	cmp	r3, r1
   1a62c:	d232      	bcs.n	1a694 <_free_r+0x11c>
   1a62e:	6892      	ldr	r2, [r2, #8]
   1a630:	4290      	cmp	r0, r2
   1a632:	d1f7      	bne.n	1a624 <_free_r+0xac>
   1a634:	68c3      	ldr	r3, [r0, #12]
   1a636:	60a0      	str	r0, [r4, #8]
   1a638:	60e3      	str	r3, [r4, #12]
   1a63a:	609c      	str	r4, [r3, #8]
   1a63c:	60c4      	str	r4, [r0, #12]
   1a63e:	4640      	mov	r0, r8
   1a640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a644:	f7fa b94e 	b.w	148e4 <__malloc_unlock>
   1a648:	6895      	ldr	r5, [r2, #8]
   1a64a:	4f3b      	ldr	r7, [pc, #236]	; (1a738 <_free_r+0x1c0>)
   1a64c:	42bd      	cmp	r5, r7
   1a64e:	4403      	add	r3, r0
   1a650:	d040      	beq.n	1a6d4 <_free_r+0x15c>
   1a652:	68d0      	ldr	r0, [r2, #12]
   1a654:	60e8      	str	r0, [r5, #12]
   1a656:	f043 0201 	orr.w	r2, r3, #1
   1a65a:	6085      	str	r5, [r0, #8]
   1a65c:	6062      	str	r2, [r4, #4]
   1a65e:	50e3      	str	r3, [r4, r3]
   1a660:	e7b7      	b.n	1a5d2 <_free_r+0x5a>
   1a662:	07ff      	lsls	r7, r7, #31
   1a664:	4403      	add	r3, r0
   1a666:	d407      	bmi.n	1a678 <_free_r+0x100>
   1a668:	f855 2c08 	ldr.w	r2, [r5, #-8]
   1a66c:	1aa4      	subs	r4, r4, r2
   1a66e:	4413      	add	r3, r2
   1a670:	68a0      	ldr	r0, [r4, #8]
   1a672:	68e2      	ldr	r2, [r4, #12]
   1a674:	60c2      	str	r2, [r0, #12]
   1a676:	6090      	str	r0, [r2, #8]
   1a678:	4a30      	ldr	r2, [pc, #192]	; (1a73c <_free_r+0x1c4>)
   1a67a:	6812      	ldr	r2, [r2, #0]
   1a67c:	f043 0001 	orr.w	r0, r3, #1
   1a680:	4293      	cmp	r3, r2
   1a682:	6060      	str	r0, [r4, #4]
   1a684:	608c      	str	r4, [r1, #8]
   1a686:	d3b9      	bcc.n	1a5fc <_free_r+0x84>
   1a688:	4b2d      	ldr	r3, [pc, #180]	; (1a740 <_free_r+0x1c8>)
   1a68a:	4640      	mov	r0, r8
   1a68c:	6819      	ldr	r1, [r3, #0]
   1a68e:	f7ff ff23 	bl	1a4d8 <_malloc_trim_r>
   1a692:	e7b3      	b.n	1a5fc <_free_r+0x84>
   1a694:	4610      	mov	r0, r2
   1a696:	e7cd      	b.n	1a634 <_free_r+0xbc>
   1a698:	1811      	adds	r1, r2, r0
   1a69a:	6849      	ldr	r1, [r1, #4]
   1a69c:	07c9      	lsls	r1, r1, #31
   1a69e:	d444      	bmi.n	1a72a <_free_r+0x1b2>
   1a6a0:	6891      	ldr	r1, [r2, #8]
   1a6a2:	68d2      	ldr	r2, [r2, #12]
   1a6a4:	60ca      	str	r2, [r1, #12]
   1a6a6:	4403      	add	r3, r0
   1a6a8:	f043 0001 	orr.w	r0, r3, #1
   1a6ac:	6091      	str	r1, [r2, #8]
   1a6ae:	6060      	str	r0, [r4, #4]
   1a6b0:	50e3      	str	r3, [r4, r3]
   1a6b2:	e7a3      	b.n	1a5fc <_free_r+0x84>
   1a6b4:	2a14      	cmp	r2, #20
   1a6b6:	d816      	bhi.n	1a6e6 <_free_r+0x16e>
   1a6b8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   1a6bc:	00ff      	lsls	r7, r7, #3
   1a6be:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   1a6c2:	e7aa      	b.n	1a61a <_free_r+0xa2>
   1a6c4:	10aa      	asrs	r2, r5, #2
   1a6c6:	2301      	movs	r3, #1
   1a6c8:	684d      	ldr	r5, [r1, #4]
   1a6ca:	4093      	lsls	r3, r2
   1a6cc:	432b      	orrs	r3, r5
   1a6ce:	604b      	str	r3, [r1, #4]
   1a6d0:	4603      	mov	r3, r0
   1a6d2:	e7b0      	b.n	1a636 <_free_r+0xbe>
   1a6d4:	f043 0201 	orr.w	r2, r3, #1
   1a6d8:	614c      	str	r4, [r1, #20]
   1a6da:	610c      	str	r4, [r1, #16]
   1a6dc:	60e5      	str	r5, [r4, #12]
   1a6de:	60a5      	str	r5, [r4, #8]
   1a6e0:	6062      	str	r2, [r4, #4]
   1a6e2:	50e3      	str	r3, [r4, r3]
   1a6e4:	e78a      	b.n	1a5fc <_free_r+0x84>
   1a6e6:	2a54      	cmp	r2, #84	; 0x54
   1a6e8:	d806      	bhi.n	1a6f8 <_free_r+0x180>
   1a6ea:	0b1a      	lsrs	r2, r3, #12
   1a6ec:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   1a6f0:	00ff      	lsls	r7, r7, #3
   1a6f2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   1a6f6:	e790      	b.n	1a61a <_free_r+0xa2>
   1a6f8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1a6fc:	d806      	bhi.n	1a70c <_free_r+0x194>
   1a6fe:	0bda      	lsrs	r2, r3, #15
   1a700:	f102 0778 	add.w	r7, r2, #120	; 0x78
   1a704:	00ff      	lsls	r7, r7, #3
   1a706:	f102 0577 	add.w	r5, r2, #119	; 0x77
   1a70a:	e786      	b.n	1a61a <_free_r+0xa2>
   1a70c:	f240 5054 	movw	r0, #1364	; 0x554
   1a710:	4282      	cmp	r2, r0
   1a712:	d806      	bhi.n	1a722 <_free_r+0x1aa>
   1a714:	0c9a      	lsrs	r2, r3, #18
   1a716:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   1a71a:	00ff      	lsls	r7, r7, #3
   1a71c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   1a720:	e77b      	b.n	1a61a <_free_r+0xa2>
   1a722:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   1a726:	257e      	movs	r5, #126	; 0x7e
   1a728:	e777      	b.n	1a61a <_free_r+0xa2>
   1a72a:	f043 0101 	orr.w	r1, r3, #1
   1a72e:	6061      	str	r1, [r4, #4]
   1a730:	6013      	str	r3, [r2, #0]
   1a732:	e763      	b.n	1a5fc <_free_r+0x84>
   1a734:	200005b4 	.word	0x200005b4
   1a738:	200005bc 	.word	0x200005bc
   1a73c:	200009c0 	.word	0x200009c0
   1a740:	2000fc60 	.word	0x2000fc60

0001a744 <_fwalk_reent>:
   1a744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a748:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   1a74c:	d01f      	beq.n	1a78e <_fwalk_reent+0x4a>
   1a74e:	4688      	mov	r8, r1
   1a750:	4606      	mov	r6, r0
   1a752:	f04f 0900 	mov.w	r9, #0
   1a756:	687d      	ldr	r5, [r7, #4]
   1a758:	68bc      	ldr	r4, [r7, #8]
   1a75a:	3d01      	subs	r5, #1
   1a75c:	d411      	bmi.n	1a782 <_fwalk_reent+0x3e>
   1a75e:	89a3      	ldrh	r3, [r4, #12]
   1a760:	2b01      	cmp	r3, #1
   1a762:	f105 35ff 	add.w	r5, r5, #4294967295
   1a766:	d908      	bls.n	1a77a <_fwalk_reent+0x36>
   1a768:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   1a76c:	3301      	adds	r3, #1
   1a76e:	4621      	mov	r1, r4
   1a770:	4630      	mov	r0, r6
   1a772:	d002      	beq.n	1a77a <_fwalk_reent+0x36>
   1a774:	47c0      	blx	r8
   1a776:	ea49 0900 	orr.w	r9, r9, r0
   1a77a:	1c6b      	adds	r3, r5, #1
   1a77c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   1a780:	d1ed      	bne.n	1a75e <_fwalk_reent+0x1a>
   1a782:	683f      	ldr	r7, [r7, #0]
   1a784:	2f00      	cmp	r7, #0
   1a786:	d1e6      	bne.n	1a756 <_fwalk_reent+0x12>
   1a788:	4648      	mov	r0, r9
   1a78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a78e:	46b9      	mov	r9, r7
   1a790:	4648      	mov	r0, r9
   1a792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a796:	bf00      	nop

0001a798 <_isatty_r>:
   1a798:	b538      	push	{r3, r4, r5, lr}
   1a79a:	4c07      	ldr	r4, [pc, #28]	; (1a7b8 <_isatty_r+0x20>)
   1a79c:	2300      	movs	r3, #0
   1a79e:	4605      	mov	r5, r0
   1a7a0:	4608      	mov	r0, r1
   1a7a2:	6023      	str	r3, [r4, #0]
   1a7a4:	f7e5 ff9e 	bl	6e4 <_isatty>
   1a7a8:	1c43      	adds	r3, r0, #1
   1a7aa:	d000      	beq.n	1a7ae <_isatty_r+0x16>
   1a7ac:	bd38      	pop	{r3, r4, r5, pc}
   1a7ae:	6823      	ldr	r3, [r4, #0]
   1a7b0:	2b00      	cmp	r3, #0
   1a7b2:	d0fb      	beq.n	1a7ac <_isatty_r+0x14>
   1a7b4:	602b      	str	r3, [r5, #0]
   1a7b6:	bd38      	pop	{r3, r4, r5, pc}
   1a7b8:	2000fcc0 	.word	0x2000fcc0

0001a7bc <_localeconv_r>:
   1a7bc:	4a04      	ldr	r2, [pc, #16]	; (1a7d0 <_localeconv_r+0x14>)
   1a7be:	4b05      	ldr	r3, [pc, #20]	; (1a7d4 <_localeconv_r+0x18>)
   1a7c0:	6812      	ldr	r2, [r2, #0]
   1a7c2:	6b50      	ldr	r0, [r2, #52]	; 0x34
   1a7c4:	2800      	cmp	r0, #0
   1a7c6:	bf08      	it	eq
   1a7c8:	4618      	moveq	r0, r3
   1a7ca:	30f0      	adds	r0, #240	; 0xf0
   1a7cc:	4770      	bx	lr
   1a7ce:	bf00      	nop
   1a7d0:	20000018 	.word	0x20000018
   1a7d4:	20000448 	.word	0x20000448

0001a7d8 <_lseek_r>:
   1a7d8:	b570      	push	{r4, r5, r6, lr}
   1a7da:	460d      	mov	r5, r1
   1a7dc:	4c08      	ldr	r4, [pc, #32]	; (1a800 <_lseek_r+0x28>)
   1a7de:	4611      	mov	r1, r2
   1a7e0:	4606      	mov	r6, r0
   1a7e2:	461a      	mov	r2, r3
   1a7e4:	4628      	mov	r0, r5
   1a7e6:	2300      	movs	r3, #0
   1a7e8:	6023      	str	r3, [r4, #0]
   1a7ea:	f7e5 ff7d 	bl	6e8 <_lseek>
   1a7ee:	1c43      	adds	r3, r0, #1
   1a7f0:	d000      	beq.n	1a7f4 <_lseek_r+0x1c>
   1a7f2:	bd70      	pop	{r4, r5, r6, pc}
   1a7f4:	6823      	ldr	r3, [r4, #0]
   1a7f6:	2b00      	cmp	r3, #0
   1a7f8:	d0fb      	beq.n	1a7f2 <_lseek_r+0x1a>
   1a7fa:	6033      	str	r3, [r6, #0]
   1a7fc:	bd70      	pop	{r4, r5, r6, pc}
   1a7fe:	bf00      	nop
   1a800:	2000fcc0 	.word	0x2000fcc0

0001a804 <_Balloc>:
   1a804:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1a806:	b570      	push	{r4, r5, r6, lr}
   1a808:	4605      	mov	r5, r0
   1a80a:	460c      	mov	r4, r1
   1a80c:	b14b      	cbz	r3, 1a822 <_Balloc+0x1e>
   1a80e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1a812:	b180      	cbz	r0, 1a836 <_Balloc+0x32>
   1a814:	6802      	ldr	r2, [r0, #0]
   1a816:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   1a81a:	2300      	movs	r3, #0
   1a81c:	6103      	str	r3, [r0, #16]
   1a81e:	60c3      	str	r3, [r0, #12]
   1a820:	bd70      	pop	{r4, r5, r6, pc}
   1a822:	2221      	movs	r2, #33	; 0x21
   1a824:	2104      	movs	r1, #4
   1a826:	f000 fb7b 	bl	1af20 <_calloc_r>
   1a82a:	64e8      	str	r0, [r5, #76]	; 0x4c
   1a82c:	4603      	mov	r3, r0
   1a82e:	2800      	cmp	r0, #0
   1a830:	d1ed      	bne.n	1a80e <_Balloc+0xa>
   1a832:	2000      	movs	r0, #0
   1a834:	bd70      	pop	{r4, r5, r6, pc}
   1a836:	2101      	movs	r1, #1
   1a838:	fa01 f604 	lsl.w	r6, r1, r4
   1a83c:	1d72      	adds	r2, r6, #5
   1a83e:	4628      	mov	r0, r5
   1a840:	0092      	lsls	r2, r2, #2
   1a842:	f000 fb6d 	bl	1af20 <_calloc_r>
   1a846:	2800      	cmp	r0, #0
   1a848:	d0f3      	beq.n	1a832 <_Balloc+0x2e>
   1a84a:	6044      	str	r4, [r0, #4]
   1a84c:	6086      	str	r6, [r0, #8]
   1a84e:	e7e4      	b.n	1a81a <_Balloc+0x16>

0001a850 <_Bfree>:
   1a850:	b131      	cbz	r1, 1a860 <_Bfree+0x10>
   1a852:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1a854:	684a      	ldr	r2, [r1, #4]
   1a856:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1a85a:	6008      	str	r0, [r1, #0]
   1a85c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   1a860:	4770      	bx	lr
   1a862:	bf00      	nop

0001a864 <__multadd>:
   1a864:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a866:	690c      	ldr	r4, [r1, #16]
   1a868:	b083      	sub	sp, #12
   1a86a:	460d      	mov	r5, r1
   1a86c:	4606      	mov	r6, r0
   1a86e:	f101 0e14 	add.w	lr, r1, #20
   1a872:	2700      	movs	r7, #0
   1a874:	f8de 0000 	ldr.w	r0, [lr]
   1a878:	b281      	uxth	r1, r0
   1a87a:	fb02 3301 	mla	r3, r2, r1, r3
   1a87e:	0c01      	lsrs	r1, r0, #16
   1a880:	0c18      	lsrs	r0, r3, #16
   1a882:	fb02 0101 	mla	r1, r2, r1, r0
   1a886:	b29b      	uxth	r3, r3
   1a888:	3701      	adds	r7, #1
   1a88a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   1a88e:	42bc      	cmp	r4, r7
   1a890:	f84e 3b04 	str.w	r3, [lr], #4
   1a894:	ea4f 4311 	mov.w	r3, r1, lsr #16
   1a898:	dcec      	bgt.n	1a874 <__multadd+0x10>
   1a89a:	b13b      	cbz	r3, 1a8ac <__multadd+0x48>
   1a89c:	68aa      	ldr	r2, [r5, #8]
   1a89e:	4294      	cmp	r4, r2
   1a8a0:	da07      	bge.n	1a8b2 <__multadd+0x4e>
   1a8a2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   1a8a6:	3401      	adds	r4, #1
   1a8a8:	6153      	str	r3, [r2, #20]
   1a8aa:	612c      	str	r4, [r5, #16]
   1a8ac:	4628      	mov	r0, r5
   1a8ae:	b003      	add	sp, #12
   1a8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a8b2:	6869      	ldr	r1, [r5, #4]
   1a8b4:	9301      	str	r3, [sp, #4]
   1a8b6:	3101      	adds	r1, #1
   1a8b8:	4630      	mov	r0, r6
   1a8ba:	f7ff ffa3 	bl	1a804 <_Balloc>
   1a8be:	692a      	ldr	r2, [r5, #16]
   1a8c0:	3202      	adds	r2, #2
   1a8c2:	f105 010c 	add.w	r1, r5, #12
   1a8c6:	4607      	mov	r7, r0
   1a8c8:	0092      	lsls	r2, r2, #2
   1a8ca:	300c      	adds	r0, #12
   1a8cc:	f7f9 feb8 	bl	14640 <memcpy>
   1a8d0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   1a8d2:	6869      	ldr	r1, [r5, #4]
   1a8d4:	9b01      	ldr	r3, [sp, #4]
   1a8d6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1a8da:	6028      	str	r0, [r5, #0]
   1a8dc:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   1a8e0:	463d      	mov	r5, r7
   1a8e2:	e7de      	b.n	1a8a2 <__multadd+0x3e>

0001a8e4 <__hi0bits>:
   1a8e4:	0c02      	lsrs	r2, r0, #16
   1a8e6:	0412      	lsls	r2, r2, #16
   1a8e8:	4603      	mov	r3, r0
   1a8ea:	b9b2      	cbnz	r2, 1a91a <__hi0bits+0x36>
   1a8ec:	0403      	lsls	r3, r0, #16
   1a8ee:	2010      	movs	r0, #16
   1a8f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   1a8f4:	bf04      	itt	eq
   1a8f6:	021b      	lsleq	r3, r3, #8
   1a8f8:	3008      	addeq	r0, #8
   1a8fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   1a8fe:	bf04      	itt	eq
   1a900:	011b      	lsleq	r3, r3, #4
   1a902:	3004      	addeq	r0, #4
   1a904:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   1a908:	bf04      	itt	eq
   1a90a:	009b      	lsleq	r3, r3, #2
   1a90c:	3002      	addeq	r0, #2
   1a90e:	2b00      	cmp	r3, #0
   1a910:	db02      	blt.n	1a918 <__hi0bits+0x34>
   1a912:	005b      	lsls	r3, r3, #1
   1a914:	d403      	bmi.n	1a91e <__hi0bits+0x3a>
   1a916:	2020      	movs	r0, #32
   1a918:	4770      	bx	lr
   1a91a:	2000      	movs	r0, #0
   1a91c:	e7e8      	b.n	1a8f0 <__hi0bits+0xc>
   1a91e:	3001      	adds	r0, #1
   1a920:	4770      	bx	lr
   1a922:	bf00      	nop

0001a924 <__lo0bits>:
   1a924:	6803      	ldr	r3, [r0, #0]
   1a926:	f013 0207 	ands.w	r2, r3, #7
   1a92a:	4601      	mov	r1, r0
   1a92c:	d007      	beq.n	1a93e <__lo0bits+0x1a>
   1a92e:	07da      	lsls	r2, r3, #31
   1a930:	d421      	bmi.n	1a976 <__lo0bits+0x52>
   1a932:	0798      	lsls	r0, r3, #30
   1a934:	d421      	bmi.n	1a97a <__lo0bits+0x56>
   1a936:	089b      	lsrs	r3, r3, #2
   1a938:	600b      	str	r3, [r1, #0]
   1a93a:	2002      	movs	r0, #2
   1a93c:	4770      	bx	lr
   1a93e:	b298      	uxth	r0, r3
   1a940:	b198      	cbz	r0, 1a96a <__lo0bits+0x46>
   1a942:	4610      	mov	r0, r2
   1a944:	f013 0fff 	tst.w	r3, #255	; 0xff
   1a948:	bf04      	itt	eq
   1a94a:	0a1b      	lsreq	r3, r3, #8
   1a94c:	3008      	addeq	r0, #8
   1a94e:	071a      	lsls	r2, r3, #28
   1a950:	bf04      	itt	eq
   1a952:	091b      	lsreq	r3, r3, #4
   1a954:	3004      	addeq	r0, #4
   1a956:	079a      	lsls	r2, r3, #30
   1a958:	bf04      	itt	eq
   1a95a:	089b      	lsreq	r3, r3, #2
   1a95c:	3002      	addeq	r0, #2
   1a95e:	07da      	lsls	r2, r3, #31
   1a960:	d407      	bmi.n	1a972 <__lo0bits+0x4e>
   1a962:	085b      	lsrs	r3, r3, #1
   1a964:	d104      	bne.n	1a970 <__lo0bits+0x4c>
   1a966:	2020      	movs	r0, #32
   1a968:	4770      	bx	lr
   1a96a:	0c1b      	lsrs	r3, r3, #16
   1a96c:	2010      	movs	r0, #16
   1a96e:	e7e9      	b.n	1a944 <__lo0bits+0x20>
   1a970:	3001      	adds	r0, #1
   1a972:	600b      	str	r3, [r1, #0]
   1a974:	4770      	bx	lr
   1a976:	2000      	movs	r0, #0
   1a978:	4770      	bx	lr
   1a97a:	085b      	lsrs	r3, r3, #1
   1a97c:	600b      	str	r3, [r1, #0]
   1a97e:	2001      	movs	r0, #1
   1a980:	4770      	bx	lr
   1a982:	bf00      	nop

0001a984 <__i2b>:
   1a984:	b510      	push	{r4, lr}
   1a986:	460c      	mov	r4, r1
   1a988:	2101      	movs	r1, #1
   1a98a:	f7ff ff3b 	bl	1a804 <_Balloc>
   1a98e:	2201      	movs	r2, #1
   1a990:	6144      	str	r4, [r0, #20]
   1a992:	6102      	str	r2, [r0, #16]
   1a994:	bd10      	pop	{r4, pc}
   1a996:	bf00      	nop

0001a998 <__multiply>:
   1a998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a99c:	690c      	ldr	r4, [r1, #16]
   1a99e:	6915      	ldr	r5, [r2, #16]
   1a9a0:	42ac      	cmp	r4, r5
   1a9a2:	b083      	sub	sp, #12
   1a9a4:	468b      	mov	fp, r1
   1a9a6:	4616      	mov	r6, r2
   1a9a8:	da04      	bge.n	1a9b4 <__multiply+0x1c>
   1a9aa:	4622      	mov	r2, r4
   1a9ac:	46b3      	mov	fp, r6
   1a9ae:	462c      	mov	r4, r5
   1a9b0:	460e      	mov	r6, r1
   1a9b2:	4615      	mov	r5, r2
   1a9b4:	f8db 3008 	ldr.w	r3, [fp, #8]
   1a9b8:	f8db 1004 	ldr.w	r1, [fp, #4]
   1a9bc:	eb04 0805 	add.w	r8, r4, r5
   1a9c0:	4598      	cmp	r8, r3
   1a9c2:	bfc8      	it	gt
   1a9c4:	3101      	addgt	r1, #1
   1a9c6:	f7ff ff1d 	bl	1a804 <_Balloc>
   1a9ca:	f100 0914 	add.w	r9, r0, #20
   1a9ce:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   1a9d2:	45d1      	cmp	r9, sl
   1a9d4:	9000      	str	r0, [sp, #0]
   1a9d6:	d205      	bcs.n	1a9e4 <__multiply+0x4c>
   1a9d8:	464b      	mov	r3, r9
   1a9da:	2100      	movs	r1, #0
   1a9dc:	f843 1b04 	str.w	r1, [r3], #4
   1a9e0:	459a      	cmp	sl, r3
   1a9e2:	d8fb      	bhi.n	1a9dc <__multiply+0x44>
   1a9e4:	f106 0c14 	add.w	ip, r6, #20
   1a9e8:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   1a9ec:	f10b 0b14 	add.w	fp, fp, #20
   1a9f0:	459c      	cmp	ip, r3
   1a9f2:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   1a9f6:	d24c      	bcs.n	1aa92 <__multiply+0xfa>
   1a9f8:	f8cd a004 	str.w	sl, [sp, #4]
   1a9fc:	469a      	mov	sl, r3
   1a9fe:	f8dc 5000 	ldr.w	r5, [ip]
   1aa02:	b2af      	uxth	r7, r5
   1aa04:	b1ef      	cbz	r7, 1aa42 <__multiply+0xaa>
   1aa06:	2100      	movs	r1, #0
   1aa08:	464d      	mov	r5, r9
   1aa0a:	465e      	mov	r6, fp
   1aa0c:	460c      	mov	r4, r1
   1aa0e:	f856 2b04 	ldr.w	r2, [r6], #4
   1aa12:	6828      	ldr	r0, [r5, #0]
   1aa14:	b293      	uxth	r3, r2
   1aa16:	b281      	uxth	r1, r0
   1aa18:	fb07 1303 	mla	r3, r7, r3, r1
   1aa1c:	0c12      	lsrs	r2, r2, #16
   1aa1e:	0c01      	lsrs	r1, r0, #16
   1aa20:	4423      	add	r3, r4
   1aa22:	fb07 1102 	mla	r1, r7, r2, r1
   1aa26:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   1aa2a:	b29b      	uxth	r3, r3
   1aa2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1aa30:	45b6      	cmp	lr, r6
   1aa32:	f845 3b04 	str.w	r3, [r5], #4
   1aa36:	ea4f 4411 	mov.w	r4, r1, lsr #16
   1aa3a:	d8e8      	bhi.n	1aa0e <__multiply+0x76>
   1aa3c:	602c      	str	r4, [r5, #0]
   1aa3e:	f8dc 5000 	ldr.w	r5, [ip]
   1aa42:	0c2d      	lsrs	r5, r5, #16
   1aa44:	d01d      	beq.n	1aa82 <__multiply+0xea>
   1aa46:	f8d9 3000 	ldr.w	r3, [r9]
   1aa4a:	4648      	mov	r0, r9
   1aa4c:	461c      	mov	r4, r3
   1aa4e:	4659      	mov	r1, fp
   1aa50:	2200      	movs	r2, #0
   1aa52:	880e      	ldrh	r6, [r1, #0]
   1aa54:	0c24      	lsrs	r4, r4, #16
   1aa56:	fb05 4406 	mla	r4, r5, r6, r4
   1aa5a:	4422      	add	r2, r4
   1aa5c:	b29b      	uxth	r3, r3
   1aa5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1aa62:	f840 3b04 	str.w	r3, [r0], #4
   1aa66:	f851 3b04 	ldr.w	r3, [r1], #4
   1aa6a:	6804      	ldr	r4, [r0, #0]
   1aa6c:	0c1b      	lsrs	r3, r3, #16
   1aa6e:	b2a6      	uxth	r6, r4
   1aa70:	fb05 6303 	mla	r3, r5, r3, r6
   1aa74:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   1aa78:	458e      	cmp	lr, r1
   1aa7a:	ea4f 4213 	mov.w	r2, r3, lsr #16
   1aa7e:	d8e8      	bhi.n	1aa52 <__multiply+0xba>
   1aa80:	6003      	str	r3, [r0, #0]
   1aa82:	f10c 0c04 	add.w	ip, ip, #4
   1aa86:	45e2      	cmp	sl, ip
   1aa88:	f109 0904 	add.w	r9, r9, #4
   1aa8c:	d8b7      	bhi.n	1a9fe <__multiply+0x66>
   1aa8e:	f8dd a004 	ldr.w	sl, [sp, #4]
   1aa92:	f1b8 0f00 	cmp.w	r8, #0
   1aa96:	dd0b      	ble.n	1aab0 <__multiply+0x118>
   1aa98:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   1aa9c:	f1aa 0a04 	sub.w	sl, sl, #4
   1aaa0:	b11b      	cbz	r3, 1aaaa <__multiply+0x112>
   1aaa2:	e005      	b.n	1aab0 <__multiply+0x118>
   1aaa4:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   1aaa8:	b913      	cbnz	r3, 1aab0 <__multiply+0x118>
   1aaaa:	f1b8 0801 	subs.w	r8, r8, #1
   1aaae:	d1f9      	bne.n	1aaa4 <__multiply+0x10c>
   1aab0:	9800      	ldr	r0, [sp, #0]
   1aab2:	f8c0 8010 	str.w	r8, [r0, #16]
   1aab6:	b003      	add	sp, #12
   1aab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001aabc <__pow5mult>:
   1aabc:	f012 0303 	ands.w	r3, r2, #3
   1aac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aac4:	4614      	mov	r4, r2
   1aac6:	4607      	mov	r7, r0
   1aac8:	d12e      	bne.n	1ab28 <__pow5mult+0x6c>
   1aaca:	460d      	mov	r5, r1
   1aacc:	10a4      	asrs	r4, r4, #2
   1aace:	d01c      	beq.n	1ab0a <__pow5mult+0x4e>
   1aad0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   1aad2:	b396      	cbz	r6, 1ab3a <__pow5mult+0x7e>
   1aad4:	07e3      	lsls	r3, r4, #31
   1aad6:	f04f 0800 	mov.w	r8, #0
   1aada:	d406      	bmi.n	1aaea <__pow5mult+0x2e>
   1aadc:	1064      	asrs	r4, r4, #1
   1aade:	d014      	beq.n	1ab0a <__pow5mult+0x4e>
   1aae0:	6830      	ldr	r0, [r6, #0]
   1aae2:	b1a8      	cbz	r0, 1ab10 <__pow5mult+0x54>
   1aae4:	4606      	mov	r6, r0
   1aae6:	07e3      	lsls	r3, r4, #31
   1aae8:	d5f8      	bpl.n	1aadc <__pow5mult+0x20>
   1aaea:	4632      	mov	r2, r6
   1aaec:	4629      	mov	r1, r5
   1aaee:	4638      	mov	r0, r7
   1aaf0:	f7ff ff52 	bl	1a998 <__multiply>
   1aaf4:	b1b5      	cbz	r5, 1ab24 <__pow5mult+0x68>
   1aaf6:	686a      	ldr	r2, [r5, #4]
   1aaf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1aafa:	1064      	asrs	r4, r4, #1
   1aafc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1ab00:	6029      	str	r1, [r5, #0]
   1ab02:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   1ab06:	4605      	mov	r5, r0
   1ab08:	d1ea      	bne.n	1aae0 <__pow5mult+0x24>
   1ab0a:	4628      	mov	r0, r5
   1ab0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ab10:	4632      	mov	r2, r6
   1ab12:	4631      	mov	r1, r6
   1ab14:	4638      	mov	r0, r7
   1ab16:	f7ff ff3f 	bl	1a998 <__multiply>
   1ab1a:	6030      	str	r0, [r6, #0]
   1ab1c:	f8c0 8000 	str.w	r8, [r0]
   1ab20:	4606      	mov	r6, r0
   1ab22:	e7e0      	b.n	1aae6 <__pow5mult+0x2a>
   1ab24:	4605      	mov	r5, r0
   1ab26:	e7d9      	b.n	1aadc <__pow5mult+0x20>
   1ab28:	1e5a      	subs	r2, r3, #1
   1ab2a:	4d0b      	ldr	r5, [pc, #44]	; (1ab58 <__pow5mult+0x9c>)
   1ab2c:	2300      	movs	r3, #0
   1ab2e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   1ab32:	f7ff fe97 	bl	1a864 <__multadd>
   1ab36:	4605      	mov	r5, r0
   1ab38:	e7c8      	b.n	1aacc <__pow5mult+0x10>
   1ab3a:	2101      	movs	r1, #1
   1ab3c:	4638      	mov	r0, r7
   1ab3e:	f7ff fe61 	bl	1a804 <_Balloc>
   1ab42:	f240 2171 	movw	r1, #625	; 0x271
   1ab46:	2201      	movs	r2, #1
   1ab48:	2300      	movs	r3, #0
   1ab4a:	6141      	str	r1, [r0, #20]
   1ab4c:	6102      	str	r2, [r0, #16]
   1ab4e:	4606      	mov	r6, r0
   1ab50:	64b8      	str	r0, [r7, #72]	; 0x48
   1ab52:	6003      	str	r3, [r0, #0]
   1ab54:	e7be      	b.n	1aad4 <__pow5mult+0x18>
   1ab56:	bf00      	nop
   1ab58:	00023e28 	.word	0x00023e28

0001ab5c <__lshift>:
   1ab5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ab60:	4691      	mov	r9, r2
   1ab62:	690a      	ldr	r2, [r1, #16]
   1ab64:	688b      	ldr	r3, [r1, #8]
   1ab66:	ea4f 1469 	mov.w	r4, r9, asr #5
   1ab6a:	eb04 0802 	add.w	r8, r4, r2
   1ab6e:	f108 0501 	add.w	r5, r8, #1
   1ab72:	429d      	cmp	r5, r3
   1ab74:	460e      	mov	r6, r1
   1ab76:	4607      	mov	r7, r0
   1ab78:	6849      	ldr	r1, [r1, #4]
   1ab7a:	dd04      	ble.n	1ab86 <__lshift+0x2a>
   1ab7c:	005b      	lsls	r3, r3, #1
   1ab7e:	429d      	cmp	r5, r3
   1ab80:	f101 0101 	add.w	r1, r1, #1
   1ab84:	dcfa      	bgt.n	1ab7c <__lshift+0x20>
   1ab86:	4638      	mov	r0, r7
   1ab88:	f7ff fe3c 	bl	1a804 <_Balloc>
   1ab8c:	2c00      	cmp	r4, #0
   1ab8e:	f100 0314 	add.w	r3, r0, #20
   1ab92:	dd06      	ble.n	1aba2 <__lshift+0x46>
   1ab94:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   1ab98:	2100      	movs	r1, #0
   1ab9a:	f843 1b04 	str.w	r1, [r3], #4
   1ab9e:	429a      	cmp	r2, r3
   1aba0:	d1fb      	bne.n	1ab9a <__lshift+0x3e>
   1aba2:	6934      	ldr	r4, [r6, #16]
   1aba4:	f106 0114 	add.w	r1, r6, #20
   1aba8:	f019 091f 	ands.w	r9, r9, #31
   1abac:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   1abb0:	d01d      	beq.n	1abee <__lshift+0x92>
   1abb2:	f1c9 0c20 	rsb	ip, r9, #32
   1abb6:	2200      	movs	r2, #0
   1abb8:	680c      	ldr	r4, [r1, #0]
   1abba:	fa04 f409 	lsl.w	r4, r4, r9
   1abbe:	4314      	orrs	r4, r2
   1abc0:	f843 4b04 	str.w	r4, [r3], #4
   1abc4:	f851 2b04 	ldr.w	r2, [r1], #4
   1abc8:	458e      	cmp	lr, r1
   1abca:	fa22 f20c 	lsr.w	r2, r2, ip
   1abce:	d8f3      	bhi.n	1abb8 <__lshift+0x5c>
   1abd0:	601a      	str	r2, [r3, #0]
   1abd2:	b10a      	cbz	r2, 1abd8 <__lshift+0x7c>
   1abd4:	f108 0502 	add.w	r5, r8, #2
   1abd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1abda:	6872      	ldr	r2, [r6, #4]
   1abdc:	3d01      	subs	r5, #1
   1abde:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1abe2:	6105      	str	r5, [r0, #16]
   1abe4:	6031      	str	r1, [r6, #0]
   1abe6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   1abea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1abee:	3b04      	subs	r3, #4
   1abf0:	f851 2b04 	ldr.w	r2, [r1], #4
   1abf4:	f843 2f04 	str.w	r2, [r3, #4]!
   1abf8:	458e      	cmp	lr, r1
   1abfa:	d8f9      	bhi.n	1abf0 <__lshift+0x94>
   1abfc:	e7ec      	b.n	1abd8 <__lshift+0x7c>
   1abfe:	bf00      	nop

0001ac00 <__mcmp>:
   1ac00:	b430      	push	{r4, r5}
   1ac02:	690b      	ldr	r3, [r1, #16]
   1ac04:	4605      	mov	r5, r0
   1ac06:	6900      	ldr	r0, [r0, #16]
   1ac08:	1ac0      	subs	r0, r0, r3
   1ac0a:	d10f      	bne.n	1ac2c <__mcmp+0x2c>
   1ac0c:	009b      	lsls	r3, r3, #2
   1ac0e:	3514      	adds	r5, #20
   1ac10:	3114      	adds	r1, #20
   1ac12:	4419      	add	r1, r3
   1ac14:	442b      	add	r3, r5
   1ac16:	e001      	b.n	1ac1c <__mcmp+0x1c>
   1ac18:	429d      	cmp	r5, r3
   1ac1a:	d207      	bcs.n	1ac2c <__mcmp+0x2c>
   1ac1c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   1ac20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   1ac24:	4294      	cmp	r4, r2
   1ac26:	d0f7      	beq.n	1ac18 <__mcmp+0x18>
   1ac28:	d302      	bcc.n	1ac30 <__mcmp+0x30>
   1ac2a:	2001      	movs	r0, #1
   1ac2c:	bc30      	pop	{r4, r5}
   1ac2e:	4770      	bx	lr
   1ac30:	f04f 30ff 	mov.w	r0, #4294967295
   1ac34:	e7fa      	b.n	1ac2c <__mcmp+0x2c>
   1ac36:	bf00      	nop

0001ac38 <__mdiff>:
   1ac38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ac3c:	690f      	ldr	r7, [r1, #16]
   1ac3e:	460e      	mov	r6, r1
   1ac40:	6911      	ldr	r1, [r2, #16]
   1ac42:	1a7f      	subs	r7, r7, r1
   1ac44:	2f00      	cmp	r7, #0
   1ac46:	4690      	mov	r8, r2
   1ac48:	d117      	bne.n	1ac7a <__mdiff+0x42>
   1ac4a:	0089      	lsls	r1, r1, #2
   1ac4c:	f106 0514 	add.w	r5, r6, #20
   1ac50:	f102 0e14 	add.w	lr, r2, #20
   1ac54:	186b      	adds	r3, r5, r1
   1ac56:	4471      	add	r1, lr
   1ac58:	e001      	b.n	1ac5e <__mdiff+0x26>
   1ac5a:	429d      	cmp	r5, r3
   1ac5c:	d25c      	bcs.n	1ad18 <__mdiff+0xe0>
   1ac5e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1ac62:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   1ac66:	42a2      	cmp	r2, r4
   1ac68:	d0f7      	beq.n	1ac5a <__mdiff+0x22>
   1ac6a:	d25e      	bcs.n	1ad2a <__mdiff+0xf2>
   1ac6c:	4633      	mov	r3, r6
   1ac6e:	462c      	mov	r4, r5
   1ac70:	4646      	mov	r6, r8
   1ac72:	4675      	mov	r5, lr
   1ac74:	4698      	mov	r8, r3
   1ac76:	2701      	movs	r7, #1
   1ac78:	e005      	b.n	1ac86 <__mdiff+0x4e>
   1ac7a:	db58      	blt.n	1ad2e <__mdiff+0xf6>
   1ac7c:	f106 0514 	add.w	r5, r6, #20
   1ac80:	f108 0414 	add.w	r4, r8, #20
   1ac84:	2700      	movs	r7, #0
   1ac86:	6871      	ldr	r1, [r6, #4]
   1ac88:	f7ff fdbc 	bl	1a804 <_Balloc>
   1ac8c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1ac90:	6936      	ldr	r6, [r6, #16]
   1ac92:	60c7      	str	r7, [r0, #12]
   1ac94:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   1ac98:	46a6      	mov	lr, r4
   1ac9a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   1ac9e:	f100 0414 	add.w	r4, r0, #20
   1aca2:	2300      	movs	r3, #0
   1aca4:	f85e 1b04 	ldr.w	r1, [lr], #4
   1aca8:	f855 8b04 	ldr.w	r8, [r5], #4
   1acac:	b28a      	uxth	r2, r1
   1acae:	fa13 f388 	uxtah	r3, r3, r8
   1acb2:	0c09      	lsrs	r1, r1, #16
   1acb4:	1a9a      	subs	r2, r3, r2
   1acb6:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   1acba:	eb03 4322 	add.w	r3, r3, r2, asr #16
   1acbe:	b292      	uxth	r2, r2
   1acc0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   1acc4:	45f4      	cmp	ip, lr
   1acc6:	f844 2b04 	str.w	r2, [r4], #4
   1acca:	ea4f 4323 	mov.w	r3, r3, asr #16
   1acce:	d8e9      	bhi.n	1aca4 <__mdiff+0x6c>
   1acd0:	42af      	cmp	r7, r5
   1acd2:	d917      	bls.n	1ad04 <__mdiff+0xcc>
   1acd4:	46a4      	mov	ip, r4
   1acd6:	46ae      	mov	lr, r5
   1acd8:	f85e 2b04 	ldr.w	r2, [lr], #4
   1acdc:	fa13 f382 	uxtah	r3, r3, r2
   1ace0:	1419      	asrs	r1, r3, #16
   1ace2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   1ace6:	b29b      	uxth	r3, r3
   1ace8:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   1acec:	4577      	cmp	r7, lr
   1acee:	f84c 2b04 	str.w	r2, [ip], #4
   1acf2:	ea4f 4321 	mov.w	r3, r1, asr #16
   1acf6:	d8ef      	bhi.n	1acd8 <__mdiff+0xa0>
   1acf8:	43ed      	mvns	r5, r5
   1acfa:	442f      	add	r7, r5
   1acfc:	f027 0703 	bic.w	r7, r7, #3
   1ad00:	3704      	adds	r7, #4
   1ad02:	443c      	add	r4, r7
   1ad04:	3c04      	subs	r4, #4
   1ad06:	b922      	cbnz	r2, 1ad12 <__mdiff+0xda>
   1ad08:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   1ad0c:	3e01      	subs	r6, #1
   1ad0e:	2b00      	cmp	r3, #0
   1ad10:	d0fa      	beq.n	1ad08 <__mdiff+0xd0>
   1ad12:	6106      	str	r6, [r0, #16]
   1ad14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ad18:	2100      	movs	r1, #0
   1ad1a:	f7ff fd73 	bl	1a804 <_Balloc>
   1ad1e:	2201      	movs	r2, #1
   1ad20:	2300      	movs	r3, #0
   1ad22:	6102      	str	r2, [r0, #16]
   1ad24:	6143      	str	r3, [r0, #20]
   1ad26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ad2a:	4674      	mov	r4, lr
   1ad2c:	e7ab      	b.n	1ac86 <__mdiff+0x4e>
   1ad2e:	4633      	mov	r3, r6
   1ad30:	f106 0414 	add.w	r4, r6, #20
   1ad34:	f102 0514 	add.w	r5, r2, #20
   1ad38:	4616      	mov	r6, r2
   1ad3a:	2701      	movs	r7, #1
   1ad3c:	4698      	mov	r8, r3
   1ad3e:	e7a2      	b.n	1ac86 <__mdiff+0x4e>

0001ad40 <__d2b>:
   1ad40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad44:	b082      	sub	sp, #8
   1ad46:	2101      	movs	r1, #1
   1ad48:	461c      	mov	r4, r3
   1ad4a:	f3c3 570a 	ubfx	r7, r3, #20, #11
   1ad4e:	4615      	mov	r5, r2
   1ad50:	9e08      	ldr	r6, [sp, #32]
   1ad52:	f7ff fd57 	bl	1a804 <_Balloc>
   1ad56:	f3c4 0413 	ubfx	r4, r4, #0, #20
   1ad5a:	4680      	mov	r8, r0
   1ad5c:	b10f      	cbz	r7, 1ad62 <__d2b+0x22>
   1ad5e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   1ad62:	9401      	str	r4, [sp, #4]
   1ad64:	b31d      	cbz	r5, 1adae <__d2b+0x6e>
   1ad66:	a802      	add	r0, sp, #8
   1ad68:	f840 5d08 	str.w	r5, [r0, #-8]!
   1ad6c:	f7ff fdda 	bl	1a924 <__lo0bits>
   1ad70:	2800      	cmp	r0, #0
   1ad72:	d134      	bne.n	1adde <__d2b+0x9e>
   1ad74:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1ad78:	f8c8 2014 	str.w	r2, [r8, #20]
   1ad7c:	2b00      	cmp	r3, #0
   1ad7e:	bf0c      	ite	eq
   1ad80:	2101      	moveq	r1, #1
   1ad82:	2102      	movne	r1, #2
   1ad84:	f8c8 3018 	str.w	r3, [r8, #24]
   1ad88:	f8c8 1010 	str.w	r1, [r8, #16]
   1ad8c:	b9df      	cbnz	r7, 1adc6 <__d2b+0x86>
   1ad8e:	eb08 0381 	add.w	r3, r8, r1, lsl #2
   1ad92:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   1ad96:	6030      	str	r0, [r6, #0]
   1ad98:	6918      	ldr	r0, [r3, #16]
   1ad9a:	f7ff fda3 	bl	1a8e4 <__hi0bits>
   1ad9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ada0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   1ada4:	6018      	str	r0, [r3, #0]
   1ada6:	4640      	mov	r0, r8
   1ada8:	b002      	add	sp, #8
   1adaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1adae:	a801      	add	r0, sp, #4
   1adb0:	f7ff fdb8 	bl	1a924 <__lo0bits>
   1adb4:	9b01      	ldr	r3, [sp, #4]
   1adb6:	f8c8 3014 	str.w	r3, [r8, #20]
   1adba:	2101      	movs	r1, #1
   1adbc:	3020      	adds	r0, #32
   1adbe:	f8c8 1010 	str.w	r1, [r8, #16]
   1adc2:	2f00      	cmp	r7, #0
   1adc4:	d0e3      	beq.n	1ad8e <__d2b+0x4e>
   1adc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1adc8:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
   1adcc:	4407      	add	r7, r0
   1adce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   1add2:	6037      	str	r7, [r6, #0]
   1add4:	6018      	str	r0, [r3, #0]
   1add6:	4640      	mov	r0, r8
   1add8:	b002      	add	sp, #8
   1adda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1adde:	e89d 000a 	ldmia.w	sp, {r1, r3}
   1ade2:	f1c0 0220 	rsb	r2, r0, #32
   1ade6:	fa03 f202 	lsl.w	r2, r3, r2
   1adea:	430a      	orrs	r2, r1
   1adec:	40c3      	lsrs	r3, r0
   1adee:	9301      	str	r3, [sp, #4]
   1adf0:	f8c8 2014 	str.w	r2, [r8, #20]
   1adf4:	e7c2      	b.n	1ad7c <__d2b+0x3c>
   1adf6:	bf00      	nop

0001adf8 <_read_r>:
   1adf8:	b570      	push	{r4, r5, r6, lr}
   1adfa:	460d      	mov	r5, r1
   1adfc:	4c08      	ldr	r4, [pc, #32]	; (1ae20 <_read_r+0x28>)
   1adfe:	4611      	mov	r1, r2
   1ae00:	4606      	mov	r6, r0
   1ae02:	461a      	mov	r2, r3
   1ae04:	4628      	mov	r0, r5
   1ae06:	2300      	movs	r3, #0
   1ae08:	6023      	str	r3, [r4, #0]
   1ae0a:	f7e5 fc4f 	bl	6ac <_read>
   1ae0e:	1c43      	adds	r3, r0, #1
   1ae10:	d000      	beq.n	1ae14 <_read_r+0x1c>
   1ae12:	bd70      	pop	{r4, r5, r6, pc}
   1ae14:	6823      	ldr	r3, [r4, #0]
   1ae16:	2b00      	cmp	r3, #0
   1ae18:	d0fb      	beq.n	1ae12 <_read_r+0x1a>
   1ae1a:	6033      	str	r3, [r6, #0]
   1ae1c:	bd70      	pop	{r4, r5, r6, pc}
   1ae1e:	bf00      	nop
   1ae20:	2000fcc0 	.word	0x2000fcc0

0001ae24 <__ssprint_r>:
   1ae24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae28:	6893      	ldr	r3, [r2, #8]
   1ae2a:	b083      	sub	sp, #12
   1ae2c:	4690      	mov	r8, r2
   1ae2e:	2b00      	cmp	r3, #0
   1ae30:	d070      	beq.n	1af14 <__ssprint_r+0xf0>
   1ae32:	4682      	mov	sl, r0
   1ae34:	460c      	mov	r4, r1
   1ae36:	6817      	ldr	r7, [r2, #0]
   1ae38:	688d      	ldr	r5, [r1, #8]
   1ae3a:	6808      	ldr	r0, [r1, #0]
   1ae3c:	e042      	b.n	1aec4 <__ssprint_r+0xa0>
   1ae3e:	89a3      	ldrh	r3, [r4, #12]
   1ae40:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1ae44:	d02e      	beq.n	1aea4 <__ssprint_r+0x80>
   1ae46:	6965      	ldr	r5, [r4, #20]
   1ae48:	6921      	ldr	r1, [r4, #16]
   1ae4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1ae4e:	eba0 0b01 	sub.w	fp, r0, r1
   1ae52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1ae56:	f10b 0001 	add.w	r0, fp, #1
   1ae5a:	106d      	asrs	r5, r5, #1
   1ae5c:	4430      	add	r0, r6
   1ae5e:	42a8      	cmp	r0, r5
   1ae60:	462a      	mov	r2, r5
   1ae62:	bf84      	itt	hi
   1ae64:	4605      	movhi	r5, r0
   1ae66:	462a      	movhi	r2, r5
   1ae68:	055b      	lsls	r3, r3, #21
   1ae6a:	d538      	bpl.n	1aede <__ssprint_r+0xba>
   1ae6c:	4611      	mov	r1, r2
   1ae6e:	4650      	mov	r0, sl
   1ae70:	f7f9 f89a 	bl	13fa8 <_malloc_r>
   1ae74:	2800      	cmp	r0, #0
   1ae76:	d03c      	beq.n	1aef2 <__ssprint_r+0xce>
   1ae78:	465a      	mov	r2, fp
   1ae7a:	6921      	ldr	r1, [r4, #16]
   1ae7c:	9001      	str	r0, [sp, #4]
   1ae7e:	f7f9 fbdf 	bl	14640 <memcpy>
   1ae82:	89a2      	ldrh	r2, [r4, #12]
   1ae84:	9b01      	ldr	r3, [sp, #4]
   1ae86:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1ae8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1ae8e:	81a2      	strh	r2, [r4, #12]
   1ae90:	eba5 020b 	sub.w	r2, r5, fp
   1ae94:	eb03 000b 	add.w	r0, r3, fp
   1ae98:	6165      	str	r5, [r4, #20]
   1ae9a:	6123      	str	r3, [r4, #16]
   1ae9c:	6020      	str	r0, [r4, #0]
   1ae9e:	60a2      	str	r2, [r4, #8]
   1aea0:	4635      	mov	r5, r6
   1aea2:	46b3      	mov	fp, r6
   1aea4:	465a      	mov	r2, fp
   1aea6:	4649      	mov	r1, r9
   1aea8:	f7f9 fc64 	bl	14774 <memmove>
   1aeac:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1aeb0:	68a2      	ldr	r2, [r4, #8]
   1aeb2:	6820      	ldr	r0, [r4, #0]
   1aeb4:	1b55      	subs	r5, r2, r5
   1aeb6:	4458      	add	r0, fp
   1aeb8:	1b9e      	subs	r6, r3, r6
   1aeba:	60a5      	str	r5, [r4, #8]
   1aebc:	6020      	str	r0, [r4, #0]
   1aebe:	f8c8 6008 	str.w	r6, [r8, #8]
   1aec2:	b33e      	cbz	r6, 1af14 <__ssprint_r+0xf0>
   1aec4:	687e      	ldr	r6, [r7, #4]
   1aec6:	463b      	mov	r3, r7
   1aec8:	3708      	adds	r7, #8
   1aeca:	2e00      	cmp	r6, #0
   1aecc:	d0fa      	beq.n	1aec4 <__ssprint_r+0xa0>
   1aece:	42ae      	cmp	r6, r5
   1aed0:	f8d3 9000 	ldr.w	r9, [r3]
   1aed4:	46ab      	mov	fp, r5
   1aed6:	d2b2      	bcs.n	1ae3e <__ssprint_r+0x1a>
   1aed8:	4635      	mov	r5, r6
   1aeda:	46b3      	mov	fp, r6
   1aedc:	e7e2      	b.n	1aea4 <__ssprint_r+0x80>
   1aede:	4650      	mov	r0, sl
   1aee0:	f7f9 fd5a 	bl	14998 <_realloc_r>
   1aee4:	4603      	mov	r3, r0
   1aee6:	2800      	cmp	r0, #0
   1aee8:	d1d2      	bne.n	1ae90 <__ssprint_r+0x6c>
   1aeea:	6921      	ldr	r1, [r4, #16]
   1aeec:	4650      	mov	r0, sl
   1aeee:	f7ff fb43 	bl	1a578 <_free_r>
   1aef2:	230c      	movs	r3, #12
   1aef4:	f8ca 3000 	str.w	r3, [sl]
   1aef8:	89a3      	ldrh	r3, [r4, #12]
   1aefa:	2200      	movs	r2, #0
   1aefc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1af00:	f04f 30ff 	mov.w	r0, #4294967295
   1af04:	81a3      	strh	r3, [r4, #12]
   1af06:	f8c8 2008 	str.w	r2, [r8, #8]
   1af0a:	f8c8 2004 	str.w	r2, [r8, #4]
   1af0e:	b003      	add	sp, #12
   1af10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af14:	2000      	movs	r0, #0
   1af16:	f8c8 0004 	str.w	r0, [r8, #4]
   1af1a:	b003      	add	sp, #12
   1af1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001af20 <_calloc_r>:
   1af20:	b510      	push	{r4, lr}
   1af22:	fb02 f101 	mul.w	r1, r2, r1
   1af26:	f7f9 f83f 	bl	13fa8 <_malloc_r>
   1af2a:	4604      	mov	r4, r0
   1af2c:	b1d8      	cbz	r0, 1af66 <_calloc_r+0x46>
   1af2e:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1af32:	f022 0203 	bic.w	r2, r2, #3
   1af36:	3a04      	subs	r2, #4
   1af38:	2a24      	cmp	r2, #36	; 0x24
   1af3a:	d818      	bhi.n	1af6e <_calloc_r+0x4e>
   1af3c:	2a13      	cmp	r2, #19
   1af3e:	d914      	bls.n	1af6a <_calloc_r+0x4a>
   1af40:	2300      	movs	r3, #0
   1af42:	2a1b      	cmp	r2, #27
   1af44:	6003      	str	r3, [r0, #0]
   1af46:	6043      	str	r3, [r0, #4]
   1af48:	d916      	bls.n	1af78 <_calloc_r+0x58>
   1af4a:	2a24      	cmp	r2, #36	; 0x24
   1af4c:	6083      	str	r3, [r0, #8]
   1af4e:	60c3      	str	r3, [r0, #12]
   1af50:	bf11      	iteee	ne
   1af52:	f100 0210 	addne.w	r2, r0, #16
   1af56:	6103      	streq	r3, [r0, #16]
   1af58:	6143      	streq	r3, [r0, #20]
   1af5a:	f100 0218 	addeq.w	r2, r0, #24
   1af5e:	2300      	movs	r3, #0
   1af60:	6013      	str	r3, [r2, #0]
   1af62:	6053      	str	r3, [r2, #4]
   1af64:	6093      	str	r3, [r2, #8]
   1af66:	4620      	mov	r0, r4
   1af68:	bd10      	pop	{r4, pc}
   1af6a:	4602      	mov	r2, r0
   1af6c:	e7f7      	b.n	1af5e <_calloc_r+0x3e>
   1af6e:	2100      	movs	r1, #0
   1af70:	f7f9 fc64 	bl	1483c <memset>
   1af74:	4620      	mov	r0, r4
   1af76:	bd10      	pop	{r4, pc}
   1af78:	f100 0208 	add.w	r2, r0, #8
   1af7c:	e7ef      	b.n	1af5e <_calloc_r+0x3e>
   1af7e:	bf00      	nop

0001af80 <_fclose_r>:
   1af80:	b570      	push	{r4, r5, r6, lr}
   1af82:	b159      	cbz	r1, 1af9c <_fclose_r+0x1c>
   1af84:	4605      	mov	r5, r0
   1af86:	460c      	mov	r4, r1
   1af88:	b110      	cbz	r0, 1af90 <_fclose_r+0x10>
   1af8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1af8c:	2b00      	cmp	r3, #0
   1af8e:	d03c      	beq.n	1b00a <_fclose_r+0x8a>
   1af90:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1af92:	07d8      	lsls	r0, r3, #31
   1af94:	d505      	bpl.n	1afa2 <_fclose_r+0x22>
   1af96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1af9a:	b92b      	cbnz	r3, 1afa8 <_fclose_r+0x28>
   1af9c:	2600      	movs	r6, #0
   1af9e:	4630      	mov	r0, r6
   1afa0:	bd70      	pop	{r4, r5, r6, pc}
   1afa2:	89a3      	ldrh	r3, [r4, #12]
   1afa4:	0599      	lsls	r1, r3, #22
   1afa6:	d53c      	bpl.n	1b022 <_fclose_r+0xa2>
   1afa8:	4621      	mov	r1, r4
   1afaa:	4628      	mov	r0, r5
   1afac:	f7ff f8c6 	bl	1a13c <__sflush_r>
   1afb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1afb2:	4606      	mov	r6, r0
   1afb4:	b133      	cbz	r3, 1afc4 <_fclose_r+0x44>
   1afb6:	69e1      	ldr	r1, [r4, #28]
   1afb8:	4628      	mov	r0, r5
   1afba:	4798      	blx	r3
   1afbc:	2800      	cmp	r0, #0
   1afbe:	bfb8      	it	lt
   1afc0:	f04f 36ff 	movlt.w	r6, #4294967295
   1afc4:	89a3      	ldrh	r3, [r4, #12]
   1afc6:	061a      	lsls	r2, r3, #24
   1afc8:	d422      	bmi.n	1b010 <_fclose_r+0x90>
   1afca:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1afcc:	b141      	cbz	r1, 1afe0 <_fclose_r+0x60>
   1afce:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1afd2:	4299      	cmp	r1, r3
   1afd4:	d002      	beq.n	1afdc <_fclose_r+0x5c>
   1afd6:	4628      	mov	r0, r5
   1afd8:	f7ff face 	bl	1a578 <_free_r>
   1afdc:	2300      	movs	r3, #0
   1afde:	6323      	str	r3, [r4, #48]	; 0x30
   1afe0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1afe2:	b121      	cbz	r1, 1afee <_fclose_r+0x6e>
   1afe4:	4628      	mov	r0, r5
   1afe6:	f7ff fac7 	bl	1a578 <_free_r>
   1afea:	2300      	movs	r3, #0
   1afec:	6463      	str	r3, [r4, #68]	; 0x44
   1afee:	f7ff f9c9 	bl	1a384 <__sfp_lock_acquire>
   1aff2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1aff4:	2200      	movs	r2, #0
   1aff6:	07db      	lsls	r3, r3, #31
   1aff8:	81a2      	strh	r2, [r4, #12]
   1affa:	d50e      	bpl.n	1b01a <_fclose_r+0x9a>
   1affc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1affe:	f7f8 ff45 	bl	13e8c <__retarget_lock_close_recursive>
   1b002:	f7ff f9c5 	bl	1a390 <__sfp_lock_release>
   1b006:	4630      	mov	r0, r6
   1b008:	bd70      	pop	{r4, r5, r6, pc}
   1b00a:	f7ff f98f 	bl	1a32c <__sinit>
   1b00e:	e7bf      	b.n	1af90 <_fclose_r+0x10>
   1b010:	6921      	ldr	r1, [r4, #16]
   1b012:	4628      	mov	r0, r5
   1b014:	f7ff fab0 	bl	1a578 <_free_r>
   1b018:	e7d7      	b.n	1afca <_fclose_r+0x4a>
   1b01a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1b01c:	f7f8 ff3a 	bl	13e94 <__retarget_lock_release_recursive>
   1b020:	e7ec      	b.n	1affc <_fclose_r+0x7c>
   1b022:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1b024:	f7f8 ff34 	bl	13e90 <__retarget_lock_acquire_recursive>
   1b028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1b02c:	2b00      	cmp	r3, #0
   1b02e:	d1bb      	bne.n	1afa8 <_fclose_r+0x28>
   1b030:	6e66      	ldr	r6, [r4, #100]	; 0x64
   1b032:	f016 0601 	ands.w	r6, r6, #1
   1b036:	d1b1      	bne.n	1af9c <_fclose_r+0x1c>
   1b038:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1b03a:	f7f8 ff2b 	bl	13e94 <__retarget_lock_release_recursive>
   1b03e:	4630      	mov	r0, r6
   1b040:	bd70      	pop	{r4, r5, r6, pc}
   1b042:	bf00      	nop

0001b044 <__aeabi_dcmpun>:
   1b044:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1b048:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1b04c:	d102      	bne.n	1b054 <__aeabi_dcmpun+0x10>
   1b04e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1b052:	d10a      	bne.n	1b06a <__aeabi_dcmpun+0x26>
   1b054:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1b058:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1b05c:	d102      	bne.n	1b064 <__aeabi_dcmpun+0x20>
   1b05e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1b062:	d102      	bne.n	1b06a <__aeabi_dcmpun+0x26>
   1b064:	f04f 0000 	mov.w	r0, #0
   1b068:	4770      	bx	lr
   1b06a:	f04f 0001 	mov.w	r0, #1
   1b06e:	4770      	bx	lr
   1b070:	682f2e2e 	.word	0x682f2e2e
   1b074:	732f6c61 	.word	0x732f6c61
   1b078:	682f6372 	.word	0x682f6372
   1b07c:	695f6c61 	.word	0x695f6c61
   1b080:	00632e6f 	.word	0x00632e6f
   1b084:	682f2e2e 	.word	0x682f2e2e
   1b088:	732f6c61 	.word	0x732f6c61
   1b08c:	682f6372 	.word	0x682f6372
   1b090:	745f6c61 	.word	0x745f6c61
   1b094:	72656d69 	.word	0x72656d69
   1b098:	0000632e 	.word	0x0000632e
   1b09c:	682f2e2e 	.word	0x682f2e2e
   1b0a0:	732f6c61 	.word	0x732f6c61
   1b0a4:	682f6372 	.word	0x682f6372
   1b0a8:	755f6c61 	.word	0x755f6c61
   1b0ac:	74726173 	.word	0x74726173
   1b0b0:	6e79735f 	.word	0x6e79735f
   1b0b4:	00632e63 	.word	0x00632e63
   1b0b8:	682f2e2e 	.word	0x682f2e2e
   1b0bc:	752f6c61 	.word	0x752f6c61
   1b0c0:	736c6974 	.word	0x736c6974
   1b0c4:	6372732f 	.word	0x6372732f
   1b0c8:	6974752f 	.word	0x6974752f
   1b0cc:	6c5f736c 	.word	0x6c5f736c
   1b0d0:	2e747369 	.word	0x2e747369
   1b0d4:	00000063 	.word	0x00000063
   1b0d8:	74697845 	.word	0x74697845
   1b0dc:	20676e69 	.word	0x20676e69
   1b0e0:	68746977 	.word	0x68746977
   1b0e4:	61747320 	.word	0x61747320
   1b0e8:	20737574 	.word	0x20737574
   1b0ec:	0a2e6425 	.word	0x0a2e6425
   1b0f0:	00000000 	.word	0x00000000
   1b0f4:	682f2e2e 	.word	0x682f2e2e
   1b0f8:	722f6c70 	.word	0x722f6c70
   1b0fc:	682f6374 	.word	0x682f6374
   1b100:	725f6c70 	.word	0x725f6c70
   1b104:	632e6374 	.word	0x632e6374
   1b108:	00000000 	.word	0x00000000
   1b10c:	40003000 	.word	0x40003000
   1b110:	40003400 	.word	0x40003400
   1b114:	41012000 	.word	0x41012000
   1b118:	41014000 	.word	0x41014000
   1b11c:	43000000 	.word	0x43000000
   1b120:	43000400 	.word	0x43000400
   1b124:	43000800 	.word	0x43000800
   1b128:	43000c00 	.word	0x43000c00

0001b12c <_i2cms>:
	...
   1b144:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   1b154:	65735f6c 6d6f6372 0000632e              l_sercom.c..

0001b160 <g_magic_wand_model_data>:
   1b160:	0000001c 334c4654 00120000 0004001c     ....TFL3........
   1b170:	000c0008 00140010 00180000 00000012     ................
   1b180:	00000003 00004c24 00000010 0000001c     ....$L..........
   1b190:	0000002c 0000000c 00000001 00000114     ,...............
   1b1a0:	00000001 000000dc 0000000f 4f434f54     ............TOCO
   1b1b0:	6e6f4320 74726576 002e6465 00000012      Converted......
   1b1c0:	000000b0 000000a4 00000098 0000008c     ................
   1b1d0:	00000080 00000074 00000068 00000060     ....t...h...`...
   1b1e0:	00000058 00000050 00000048 00000040     X...P...H...@...
   1b1f0:	00000038 0000002c 00000020 00000018     8...,... .......
   1b200:	00000010 00000004 ffffb66e 00000068     ........n...h...
   1b210:	ffffb630 ffffb634 ffffb67e 000001f0     0...4...~.......
   1b220:	ffffb686 000003c8 ffffb648 ffffb64c     ........H...L...
   1b230:	ffffb650 ffffb654 ffffb658 ffffb65c     P...T...X...\...
   1b240:	ffffb6a6 00000dc0 ffffb6ae 00004600     .............F..
   1b250:	ffffb6b6 00004660 ffffb6be 000046e0     ....`F.......F..
   1b260:	ffffb6c6 00004748 ffffb6ce 00004898     ....HG.......H..
   1b270:	ffffb690 00000005 2e352e31 00000030     ........1.5.0...
   1b280:	fffff454 00000008 00000011 00000013     T...............
   1b290:	5f6e696d 746e7572 5f656d69 73726576     min_runtime_vers
   1b2a0:	006e6f69 0014000c 00080004 0010000c     ion.............
   1b2b0:	0000000c 00000020 00000014 00000008     .... ...........
   1b2c0:	00004888 00000001 00000000 00000001     .H..............
   1b2d0:	00000001 00000010 00000c9c 00000b14     ................
   1b2e0:	000000d4 00004524 00000084 000002a4     ....$E..........
   1b2f0:	00004580 00000b9c 00000cb0 000047c4     .E...........G..
   1b300:	00000b50 00000c2c 00004648 000045ec     P...,...HF...E..
   1b310:	00000008 00000bc8 ffffb866 00000010     ........f.......
   1b320:	00000010 0000001c 00000040 00000004     ........@.......
   1b330:	00000001 0000002a 00000001 00000008     ....*...........
   1b340:	00000020 75716573 69746e65 6d2f6c61      ...sequential/m
   1b350:	705f7861 696c6f6f 6432676e 78614d2f     ax_pooling2d/Max
   1b360:	6c6f6f50 00000000 ffffb788 ffffb8ba     Pool............
   1b370:	00000010 0000000f 0000001c 00000034     ............4...
   1b380:	00000004 00000001 00000080 00000003     ................
   1b390:	00000008 00000016 75716573 69746e65     ........sequenti
   1b3a0:	632f6c61 32766e6f 65522f64 0000756c     al/conv2d/Relu..
   1b3b0:	ffffb7d0 ffffb902 00000010 0000000e     ................
   1b3c0:	0000001c 00000044 00000004 00000001     ....D...........
   1b3d0:	00000004 00000003 00000008 00000027     ............'...
   1b3e0:	75716573 69746e65 632f6c61 32766e6f     sequential/conv2
   1b3f0:	6f432f64 4432766e 6165522f 72615664     d/Conv2D/ReadVar
   1b400:	6c626169 00704f65 ffffb828 00000180     iableOp.(.......
   1b410:	bdf66a1c 3cfd16aa 3e20d9f6 3dddf864     .j.....<.. >d..=
   1b420:	be82c007 bd38a39e 3da14113 bd9081b0     ......8..A.=....
   1b430:	bbbcddc7 be249c87 bd6a0872 3e611b10     ......$.r.j...a>
   1b440:	be184979 be8809da 3d4d702d bd9e4a5c     yI......-pM=\J..
   1b450:	3e46f10f bf02bd1c 3e07bc56 be399263     ..F>....V..>c.9.
   1b460:	3e84de4e bd883864 bdc332a0 beb7940f     N..>d8...2......
   1b470:	bc2711d6 3df37ecc 3daa4df3 3e288abc     ..'..~.=.M.=..(>
   1b480:	bddab5a2 bdb61a92 3db1499a 3d1c93fc     .........I.=...=
   1b490:	bda1a174 be1d48c7 3bb2533a bda55192     t....H..:S.;.Q..
   1b4a0:	bd3cc46a bd6d61db be039f78 bd301f40     j.<..am.x...@.0.
   1b4b0:	3dadde17 bd74eed7 3dc25cb6 be65891c     ...=..t..\.=..e.
   1b4c0:	3e48c4fd 3d1329b2 3d1356cc bc1bcef8     ..H>.).=.V.=....
   1b4d0:	bce84bb5 be5c0548 3e0dfaaf 3da48474     .K..H.\....>t..=
   1b4e0:	3e04844c 3cba7a09 3e07a6b3 3de5e57d     L..>.z.<...>}..=
   1b4f0:	3ca5b97e 3e49704e be12fe39 be018bfa     ~..<NpI>9.......
   1b500:	bce68eb9 bdb32fc8 bd9e2b1b 3d0e7fe7     ...../...+.....=
   1b510:	3d2aa33e 3d3173a1 bd03c7c8 bdaf7107     >.*=.s1=.....q..
   1b520:	be2b6bb2 be1fc206 be30bf3b 3e22517e     .k+.....;.0.~Q">
   1b530:	3d92a75a be3560b8 3d8fdfa7 3e42fcbc     Z..=.`5....=..B>
   1b540:	bc7d8642 3cd8d03a bc4045ea b79dd304     B.}.:..<.E@.....
   1b550:	bdaedfe3 be595e80 bdc01588 bdaa86ea     .....^Y.........
   1b560:	3d644a3b be422589 be9329c2 3e008562     ;Jd=.%B..)..b..>
   1b570:	bdda0ef1 beb80948 be4de2ad be992669     ....H.....M.i&..
   1b580:	becd3c86 bd4ee605 3dfb8fdb 3e97f5c6     .<....N....=...>
   1b590:	ffffbade 00000010 0000000d 0000001c     ................
   1b5a0:	00000048 00000004 00000010 00000004     H...............
   1b5b0:	00000001 00000008 00000029 75716573     ........)...sequ
   1b5c0:	69746e65 632f6c61 32766e6f 2f315f64     ential/conv2d_1/
   1b5d0:	766e6f43 522f4432 56646165 61697261     Conv2D/ReadVaria
   1b5e0:	4f656c62 00000070 ffffba08 00000800     bleOp...........
   1b5f0:	bf107a40 beccf19b bf1d8878 bf09b7c2     @z......x.......
   1b600:	beafd6bd beed29f5 be7018ad 3b40913d     .....)....p.=.@;
   1b610:	be55cf2f 3eed0bc6 be807abe 3ab13c3c     /.U....>.z..<<.:
   1b620:	3da6eaab be555788 bedc620c 3ebe6b07     ...=.WU..b...k.>
   1b630:	3d280d9e 3db1d2d9 bdbd454c 3d1fe03c     ..(=...=LE..<..=
   1b640:	bd48b576 be3ae82b be5721d3 3e7021dc     v.H.+.:..!W..!p>
   1b650:	3dec7100 3d61eb9c 3d9c8a0d 3d03352a     .q.=..a=...=*5.=
   1b660:	3b281c1b bda9f9a6 be2ffb20 3d04cb8c     ..(;.... ./....=
   1b670:	3d646243 3dd665f8 bd3abef3 3d532baf     Cbd=.e.=..:..+S=
   1b680:	bdf85899 bd43be3a bcc0e7d0 3df38da4     .X..:.C........=
   1b690:	bc9cd7a2 3eb01b87 bd882018 3ec59eee     .......>. .....>
   1b6a0:	3caf35c1 bd3997c0 bd046fa5 be1c037b     .5.<..9..o..{...
   1b6b0:	bdbb750f bd541bdf bdccbffb bd10011b     .u....T.........
   1b6c0:	bcb46720 3c40a6df 3d28b474 bdc3e765      g....@<t.(=e...
   1b6d0:	bd91388d bc45ba8f bc49c769 3cf8cba3     .8....E.i.I....<
   1b6e0:	3e2ded69 bcc6f40d bdfee7d6 bd86a0fa     i.->............
   1b6f0:	bdf08330 bdd1b9f5 be90391c bdd86274     0........9..tb..
   1b700:	be072813 bdbfbdbf bba8cf15 bd8f1a9c     .(..............
   1b710:	3d932391 bdc46379 be72ddec beacd8d2     .#.=yc....r.....
   1b720:	be211ebf bd20abae 3d90e98f 3ddd47bb     ..!... ....=.G.=
   1b730:	bd3793b1 bc45cfeb be158f33 be9f19eb     ..7...E.3.......
   1b740:	bde32166 3c608253 bcf1dc11 3d1e010c     f!..S.`<.......=
   1b750:	3f1dd5db 3d61a358 be162b0a be509d01     ...?X.a=.+....P.
   1b760:	3e63acac bc8adb76 bc8fec57 3dd620ad     ..c>v...W.... .=
   1b770:	3d8963c2 3ee91ec3 bd9e41a8 be2b2cac     .c.=...>.A...,+.
   1b780:	3dbf7398 bd54227a be2caf44 bcd94505     .s.=z"T.D.,..E..
   1b790:	3e20aa74 3e951e6e bc122054 3dcf20be     t. >n..>T ... .=
   1b7a0:	be2802a6 bde8fed1 be832a1f 3df34433     ..(......*..3D.=
   1b7b0:	bdda48ff 3e791e8d 3db2eedb be5bdedb     .H....y>...=..[.
   1b7c0:	be495755 bf294b62 bf23bf93 3d71a3ea     UWI.bK)...#...q=
   1b7d0:	be0050a5 bfc0d1b6 bd7d221d 3d810900     .P......."}....=
   1b7e0:	be7528de bf2e1b03 bf3b3a3c bde61a52     .(u.....<:;.R...
   1b7f0:	bdeae99d 3d2c7149 bb558be8 be24976c     ....Iq,=..U.l.$.
   1b800:	bae0e844 3f4b456d 3e38267f be6e04ab     D...mEK?.&8>..n.
   1b810:	be0e5970 3d7afbd6 bda27245 be2e6fb5     pY....z=Er...o..
   1b820:	3e07f5da bdac2be0 bdf635af bdac2bd0     ...>.+...5...+..
   1b830:	be112d26 3d87fa7e bdf6b73a bce2d0b1     &-..~..=:.......
   1b840:	bd86a2c8 bdb1f519 be4d65f6 3e476323     .........eM.#cG>
   1b850:	bdd326b7 bf12f457 be39d493 3d62f277     .&..W.....9.w.b=
   1b860:	bec33df6 be2bf5b6 be768abe 3e6339b1     .=....+...v..9c>
   1b870:	be3cbede be9401d4 bb971a19 be4e83cb     ..<...........N.
   1b880:	bd941950 be958af8 be86abc8 3e6d5718     P............Wm>
   1b890:	3c8bad87 3e8d7b72 3d953954 be4bfa1d     ...<r{.>T9.=..K.
   1b8a0:	be7ad297 becb4a68 bf0410f0 3e82b52b     ..z.hJ......+..>
   1b8b0:	3e1a71f8 3d29f029 3e1a5a74 bdd17558     .q.>).)=tZ.>Xu..
   1b8c0:	3e996c38 be63d46c be9051c3 beaeffcf     8l.>l.c..Q......
   1b8d0:	3d00f1fe bd906452 bdce1a02 3d007486     ...=Rd.......t.=
   1b8e0:	3e044082 3e820338 3ef41c8f be68046f     .@.>8..>...>o.h.
   1b8f0:	3de31200 3db5f601 3d3699d9 3edead40     ...=...=..6=@..>
   1b900:	3dc174af be6f8eb7 be32a6b3 3e23caff     .t.=..o...2...#>
   1b910:	3e42f10c 3d2c85e3 bab7c8ca bd53941a     ..B>..,=......S.
   1b920:	3daa339a be797c9c be71b284 bd2bc148     .3.=.|y...q.H.+.
   1b930:	bd6c89f4 bdf2d21f bd284fd2 bdb3bbb4     ..l......O(.....
   1b940:	bcab966f be829d23 bd596be6 be030927     o...#....kY.'...
   1b950:	bdaca642 3d2012b6 be24630a be282775     B..... =.c$.u'(.
   1b960:	be2b62a5 be06481f bdb2d07e 3a80d6a9     .b+..H..~......:
   1b970:	be117aff 3e415f76 bdfaa917 bd71d15b     .z..v_A>....[.q.
   1b980:	bdaf23f3 bce02463 3e9d62c6 be4719d6     .#..c$...b.>..G.
   1b990:	bdf16992 3d82678a 3d693317 be25911a     .i...g.=.3i=..%.
   1b9a0:	3daeabf1 3ec1213a bd5dc4d8 bea658c7     ...=:!.>..]..X..
   1b9b0:	3bedb0c6 3ca2d675 be1da864 be3a1fe5     ...;u..<d.....:.
   1b9c0:	bd39037b 3d81a214 bcb2fddb be9a96ca     {.9....=........
   1b9d0:	3cc9cc7c 3d887db8 bd0b3936 be3c1f5e     |..<.}.=69..^.<.
   1b9e0:	3c833627 bd23a138 3bf6faba bec3a98d     '6.<8.#....;....
   1b9f0:	bdf03450 bdb30f92 be5eadd9 3cb227c1     P4........^..'.<
   1ba00:	be07296a be26b50f 3e27f9c8 3ea4972a     j)....&...'>*..>
   1ba10:	3e5345e1 3da0d7ec be8c1afd bdd64c1d     .ES>...=.....L..
   1ba20:	be63784a bcd9a418 3d37aa5a be3be8ff     Jxc.....Z.7=..;.
   1ba30:	3e678c6b bc12ec13 bcabccae bd729b2e     k.g>..........r.
   1ba40:	3eb43f46 bdd3badb be86db7b bed9666a     F?.>....{...jf..
   1ba50:	3d805c8c be4d6460 3e58914d be0efca9     .\.=`dM.M.X>....
   1ba60:	3ecec832 beb3c8a8 beae074d bf2ca3bc     2..>....M.....,.
   1ba70:	be219c57 be6e6d0e bf15a630 bf0176d6     W.!..mn.0....v..
   1ba80:	beab3e80 be2d98be be4802e2 be964bc8     .>....-...H..K..
   1ba90:	3e2eaa48 3f0119a2 be8feca8 3e24d215     H..>...?......$>
   1baa0:	bcc2805c be2978f0 be631dfe bd22f132     \....x)...c.2.".
   1bab0:	3e1d8c35 3ec222b9 bec075de bb737127     5..>.".>.u..'qs.
   1bac0:	3dde4137 bdfe710a bdf6669e bc07932b     7A.=.q...f..+...
   1bad0:	3d901e75 3e594901 bebeb20a bc9f65d4     u..=.IY>.....e..
   1bae0:	3ddd2043 bd7401ef 3bd5a4b2 bcf930a4     C .=..t....;.0..
   1baf0:	b86815b8 bea7a258 3da5255a beb2862d     ..h.X...Z%.=-...
   1bb00:	3ec231c9 3d2861d2 3dbafea6 bdf66c4b     .1.>.a(=...=Kl..
   1bb10:	bcdc14aa bddc7df6 bd75b6ce bea8a50b     .....}....u.....
   1bb20:	3e4ab59b 3d98fafc 3d39d627 3d67bf1a     ..J>...='.9=..g=
   1bb30:	bc04043f bd425607 be52e6d8 bdc7ff72     ?....VB...R.r...
   1bb40:	bdba5bd8 bdc8b9e9 be0554e2 3ef28fb5     .[.......T.....>
   1bb50:	bd68e974 becd166f 3c40222a 3df203fc     t.h.o...*"@<...=
   1bb60:	3daa7491 be1fb17d be14c195 be89e5bb     .t.=}...........
   1bb70:	3d5affae be077931 3ebafb07 bd86d04e     ..Z=1y.....>N...
   1bb80:	3e293668 3dc714ec 3b06f6ef 3ce8a076     h6)>...=...;v..<
   1bb90:	3cac5797 be8d02ec 3d42af43 3d0e3913     .W.<....C.B=.9.=
   1bba0:	3e5aedf4 be18f1bb bbc81f71 be0b8c6d     ..Z>....q...m...
   1bbb0:	bdc35dfe be87ae2c 3d3e7458 be135214     .]..,...Xt>=.R..
   1bbc0:	be551141 3e0e0343 3e2e4cf8 bdea6a09     A.U.C..>.L.>.j..
   1bbd0:	bdc3e1ec be2adfd5 bdd9c12e be725bc1     ......*......[r.
   1bbe0:	be0fe973 3e0cc3ab 3e5ed185 be0d7008     s......>..^>.p..
   1bbf0:	3d01b76f bd860f0c 3e56230d bc106f16     o..=.....#V>.o..
   1bc00:	bf42984f be444e85 be0b20f0 bc0fa35b     O.B..ND.. ..[...
   1bc10:	bd4533bd bd48fb84 3c8c9911 3e081e41     .3E...H....<A..>
   1bc20:	bf6c3ee3 be0c2b97 bb23ec94 3c4f358f     .>l..+....#..5O<
   1bc30:	bd0cecea be3d1304 3e237613 3c990d37     ......=..v#>7..<
   1bc40:	bef4a3d4 be6c6a18 bdf63c3d bcaf51f8     .....jl.=<...Q..
   1bc50:	bc8a6e1f be8cc555 bd799c9e bdb71413     .n..U.....y.....
   1bc60:	be1acd89 3e2e1479 3e71a2dd bcbe71ad     ....y..>..q>.q..
   1bc70:	3f22c9a3 3d0f4b66 be291c45 be9379f6     .."?fK.=E.)..y..
   1bc80:	3db61871 3c9dcbcc bcfdbba1 3e0575c9     q..=...<.....u.>
   1bc90:	bdad4b77 3e5c1d81 bd24cc2d be36ce3a     wK....\>-.$.:.6.
   1bca0:	be2737b8 3b753ee6 bd2cb4b7 3c47051f     .7'..>u;..,...G<
   1bcb0:	3e331d81 3e4ffd8a 3d3b7caf bddaa000     ..3>..O>.|;=....
   1bcc0:	bf20d139 bdf378c9 bea3019d bcbb4442     9. ..x......BD..
   1bcd0:	bdd4c15a bf3ce7fd 3d853746 3dbc4e79     Z.....<.F7.=yN.=
   1bce0:	bf7fcda4 bf69ca1d bf69eb97 3c9fc9aa     ......i...i....<
   1bcf0:	3e9d82b4 3e7794f1 be8474f2 be9c6688     ...>..w>.t...f..
   1bd00:	bdf14edf 3e319ea2 3d49c98b 3e5c635a     .N....1>..I=Zc\>
   1bd10:	3d4ea5f9 3d8d3f95 be68e01c be7ce1b6     ..N=.?.=..h...|.
   1bd20:	be632b82 be026c76 be3630fe 3d365f8f     .+c.vl...06.._6=
   1bd30:	3c155217 bf88c81e 3d5da10a 3e7131e8     .R.<......]=.1q>
   1bd40:	bc0145d2 be273c41 bc4da9bb 3c9dde0f     .E..A<'...M....<
   1bd50:	bdc335bf bf700e5b 3bd5f4e9 3dec9b60     .5..[.p....;`..=
   1bd60:	bc23758b be840317 3cd00499 be0801dd     .u#........<....
   1bd70:	bd75d582 3cecaa05 3d454db9 bb6911a3     ..u....<.ME=..i.
   1bd80:	3e50b0a3 bdaa5f7a bdbe736a bda92591     ..P>z_..js...%..
   1bd90:	bde08e0f 3c8f5150 3db97df4 3d5011a2     ....PQ.<.}.=..P=
   1bda0:	3e32b53a 3e8728e1 3e098344 be0a5fc3     :.2>.(.>D..>._..
   1bdb0:	be0fb8c4 bdabb2aa bd5c4093 bd19f035     .........@\.5...
   1bdc0:	3b02a84a 3c1a513c bbdd2dbe 3dc35d55     J..;<Q.<.-..U].=
   1bdd0:	bd7c6f10 be45f762 3de1dad5 3e13d525     .o|.b.E....=%..>
   1bde0:	bdead6f0 bd562b62 3db10c80 3da5be19     ....b+V....=...=
   1bdf0:	ffffc33e 00000010 0000000c 0000001c     >...............
   1be00:	00000034 00000004 00000001 00000080     4...............
   1be10:	00000003 00000001 0000000c 766e6f63     ............conv
   1be20:	695f6432 7475706e 00000000 000c0008     2d_input........
   1be30:	00080004 00000008 00000010 00000004     ................
   1be40:	00000001 437f0000 00000001 00000000     .......C........
   1be50:	ffffc39e 00000010 0000000b 00000014     ................
   1be60:	0000002c 00000002 00000001 00000010     ,...............
   1be70:	00000015 75716573 69746e65 642f6c61     ....sequential/d
   1be80:	65736e65 6c65522f 00000075 ffffc2ac     ense/Relu.......
   1be90:	ffffc3de 00000010 0000000a 0000001c     ................
   1bea0:	00000038 00000004 00000001 0000002a     8...........*...
   1beb0:	00000001 00000010 00000018 75716573     ............sequ
   1bec0:	69746e65 632f6c61 32766e6f 2f315f64     ential/conv2d_1/
   1bed0:	756c6552 00000000 ffffc2f8 ffffc42a     Relu........*...
   1bee0:	00000010 00000009 0000001c 00000040     ............@...
   1bef0:	00000004 00000001 0000000e 00000001     ................
   1bf00:	00000010 00000022 75716573 69746e65     ...."...sequenti
   1bf10:	6d2f6c61 705f7861 696c6f6f 6432676e     al/max_pooling2d
   1bf20:	4d2f315f 6f507861 00006c6f ffffc34c     _1/MaxPool..L...
   1bf30:	ffffc47e 00000010 00000008 00000014     ~...............
   1bf40:	00000030 00000002 00000001 00000004     0...............
   1bf50:	0000001a 75716573 69746e65 642f6c61     ....sequential/d
   1bf60:	65736e65 422f315f 41736169 00006464     ense_1/BiasAdd..
   1bf70:	ffffc390 ffffc4c2 00000010 00000007     ................
   1bf80:	00000014 00000020 00000002 00000001     .... ...........
   1bf90:	00000004 00000008 6e656449 79746974     ........Identity
   1bfa0:	00000000 ffffc3c4 ffffc4f6 00000010     ................
   1bfb0:	00000006 00000014 00000048 00000002     ........H.......
   1bfc0:	00000010 000000e0 00000030 75716573     ........0...sequ
   1bfd0:	69746e65 642f6c61 65736e65 74614d2f     ential/dense/Mat
   1bfe0:	2f6c754d 64616552 69726156 656c6261     Mul/ReadVariable
   1bff0:	742f704f 736e6172 65736f70 00000000     Op/transpose....
   1c000:	ffffc420 00003800 3d9e7891 3e726e02      ....8...x.=.nr>
   1c010:	bc655faf 3ea58983 3df51e99 3d9202b4     ._e....>...=...=
   1c020:	3d9631af bea27744 be733cf0 3f35ec0f     .1.=Dw...<s...5?
   1c030:	bc20d147 be488dae 3e3dccce 3e7849ad     G. ...H...=>.Ix>
   1c040:	bd822e11 3d7ef3a7 3d7aea7b 3e1fe5d1     ......~={.z=...>
   1c050:	3d7a8c92 be4622e8 3e245ce4 3c6b0da2     ..z=."F..\$>..k<
   1c060:	bd2104fb bed16e1c bcd9c6d5 3ddfe8b6     ..!..n.........=
   1c070:	3d0973d8 beb145cb 3d0e6ada bcefbe40     .s.=.E...j.=@...
   1c080:	bdcbbbe4 3d3035f6 be563a25 3d0a351f     .....50=%:V..5.=
   1c090:	3d213195 be54aade 3e6b0a8d bd0270d5     .1!=..T...k>.p..
   1c0a0:	3caa18dc be790c2a 3b04c5ee 3dbeb92c     ...<*.y....;,..=
   1c0b0:	bc82550f bf00f694 be02a20a bd582ba3     .U...........+X.
   1c0c0:	bdd34f09 be369857 be81edcd bd3b4d78     .O..W.6.....xM;.
   1c0d0:	bddcf9a1 bd29c418 3eb26df5 3e537b43     ......)..m.>C{S>
   1c0e0:	3c696a2b bf132eec be2c0d6a 3e32e33d     +ji<....j.,.=.2>
   1c0f0:	3d3941f4 be49d348 be9a257f be0b36d3     .A9=H.I..%...6..
   1c100:	bd89a3a5 bde53009 be831713 bcc44c1a     .....0.......L..
   1c110:	be671e81 bddf7782 3e337d02 3e0235d3     ..g..w...}3>.5.>
   1c120:	3c90c08a be95d08b be6f672a 3e20f4f3     ...<....*go... >
   1c130:	3cba2801 bdaa6555 bd901d76 3dce37a5     .(.<Ue..v....7.=
   1c140:	bd80d78f bc7dea02 bde6ffd1 3da0b596     ......}........=
   1c150:	be90b0ea bd99ed9e 3dd9ee2e 3eb5f4e9     ...........=...>
   1c160:	3dfeb4a2 3d304be5 be58f307 3b2aa829     ...=.K0=..X.).*;
   1c170:	3e400cf6 bcc087b9 3d6712f3 bd8233d7     ..@>......g=.3..
   1c180:	bd1547ba 3e29ca64 3e5d70ca 3dcba89c     .G..d.)>.p]>...=
   1c190:	bdafe3be be2c93af 3eb53607 3e34fffc     ......,..6.>..4>
   1c1a0:	bdbb9a71 3e4b92a8 be2922b1 3e3e5dce     q.....K>.")..]>>
   1c1b0:	3e42cada 3d581a20 3d0c0a5c 3df0ffe2     ..B> .X=\..=...=
   1c1c0:	3e0cfd79 3e035f69 bb2ed366 3c64633a     y..>i_.>f...:cd<
   1c1d0:	be482f10 be47a7c5 3e975ada bccd6ec1     ./H...G..Z.>.n..
   1c1e0:	bd519c9a 3ddd2731 bd80b20b bca775bf     ..Q.1'.=.....u..
   1c1f0:	3e2f65d5 3e1b0dc4 3df27fcf 3df2c773     .e/>...>...=s..=
   1c200:	bb982e69 3da85ba8 bdbfb0fd bdfc49a3     i....[.=.....I..
   1c210:	be02f5ad be261e60 3e3d961d 3e2c23f7     ....`.&...=>.#,>
   1c220:	3d861b44 bd485688 3ceef6ad 3d13810d     D..=.VH....<...=
   1c230:	3e0976d0 bd838349 be79d650 3d4f178c     .v.>I...P.y...O=
   1c240:	3d90e5ec 3d4f191e bd9f3c1f be4b47e5     ...=..O=.<...GK.
   1c250:	be14f033 3d21bf58 3e428cd2 3d9ae631     3...X.!=..B>1..=
   1c260:	bdab4ef9 be1f466f 3d21f19e 3dfb7204     .N..oF....!=.r.=
   1c270:	3e24ca29 bea10132 be459b07 3dc509f9     ).$>2.....E....=
   1c280:	bd4484c9 bd68b5de be3ef60a bdbc6e78     ..D...h...>.xn..
   1c290:	bd38f803 bd17f6e9 3e3b191a 3cdbb143     ..8.......;>C..<
   1c2a0:	bb1e5bc5 be009bcc bae4e401 3e268de5     .[............&>
   1c2b0:	bc0a094b bee04e50 bcf393e3 3d20e9e8     K...PN........ =
   1c2c0:	3ce2a723 3da705e2 bd29dad4 bca743b3     #..<...=..)..C..
   1c2d0:	bd0d6128 3da7557e 3e3f275f 3bca1912     (a..~U.=_'?>...;
   1c2e0:	bd0b89c9 bd339957 bcda8f61 3e5a546a     ....W.3.a...jTZ>
   1c2f0:	3d2beb31 be97958c 3e852d5b bcf43f49     1.+=....[-.>I?..
   1c300:	3c62bb20 bdae6901 be432ce1 3d845de9      .b<.i...,C..].=
   1c310:	3e1761b3 bc950747 3e877ccd 3d03b3d9     .a.>G....|.>...=
   1c320:	3d157e1c bdb00be1 3c94fe23 3dd736f0     .~.=....#..<.6.=
   1c330:	3c822b9e be9b4378 be0c5df9 3dda4507     .+.<xC...]...E.=
   1c340:	3d193679 3cbcff49 beec6ed6 3cd5b26c     y6.=I..<.n..l..<
   1c350:	3b92b02a 3e3a8745 bdb8e5d3 3c2e1a92     *..;E.:>.......<
   1c360:	3e3c339b bea83d0f 3da67c53 be989e3b     .3<>.=..S|.=;...
   1c370:	3cd69196 be995b71 3e040b73 3dc08afa     ...<q[..s..>...=
   1c380:	3ddd1b7f bd8401e4 bddb63cf bd8d5dda     ...=.....c...]..
   1c390:	bd46e144 be056c65 bdb1830a be594a97     D.F.el.......JY.
   1c3a0:	3da72677 bdea220d be144870 3e043101     w&.=."..pH...1.>
   1c3b0:	bdb85ee0 bdeee3d3 bcc46f4e 3d53ab2f     .^......No../.S=
   1c3c0:	be2c79d2 bddb5eea bd4d4002 bd5d47cf     .y,..^...@M..G].
   1c3d0:	bd97481e 3dca3b7c be431d75 3b86abb7     .H..|;.=u.C....;
   1c3e0:	3be251fa be1a0ccc 3dc056da bd6ba5d2     .Q.;.....V.=..k.
   1c3f0:	be27e846 be4e7195 3db0da78 be31fdec     F.'..qN.x..=..1.
   1c400:	be44b55f be06482b bdf45c28 3ca3b11a     _.D.+H..(\.....<
   1c410:	bdefd677 bd93e1ec bdcdb285 bd520bf8     w.............R.
   1c420:	3cd79516 3c2900b2 3db68c42 be1f79a8     ...<..)<B..=.y..
   1c430:	bde8fea5 3db83028 3d9e23b8 be33e17f     ....(0.=.#.=..3.
   1c440:	be3ff82b bd708c05 bde03230 be45d3ff     +.?...p.02....E.
   1c450:	bc338229 be13862b bd07810b 3ca8d4b1     ).3.+..........<
   1c460:	bc2dd642 ba3319fc be29f7d5 be18b9ff     B.-...3...).....
   1c470:	be369634 bdcc808d bce91f55 be69dda1     4.6.....U.....i.
   1c480:	3cb486d3 be0fc23a bccd63c0 bdcff8cb     ...<:....c......
   1c490:	3d5f7f45 3dbd5995 bdf09c7b 3cfbaf57     E._=.Y.={...W..<
   1c4a0:	bdaf44ad bdbcf3a5 bd59e1b4 3d2928a6     .D........Y..()=
   1c4b0:	be508bcb bd958520 bbfacf33 3d1cfcde     ..P. ...3......=
   1c4c0:	be43b691 bdaf8454 be04dedc be19c669     ..C.T.......i...
   1c4d0:	bd23cf43 be583b77 bd500950 bd2da217     C.#.w;X.P.P...-.
   1c4e0:	bab5ade0 3dcc9d47 3de37206 3c9f8192     ....G..=.r.=...<
   1c4f0:	be061d55 3c9c79a0 bde6ece1 bd9a0c63     U....y.<....c...
   1c500:	be5e82c1 be384c01 bd520664 be0854d1     ..^..L8.d.R..T..
   1c510:	3dc2b80c 3db4d25a be24cb84 3c8fb480     ...=Z..=..$....<
   1c520:	be0c6984 be05da3d 3e0c484c bccf35dc     .i..=...LH.>.5..
   1c530:	be0b1b80 bc9c3aaa 3d83d421 3de86e26     .....:..!..=&n.=
   1c540:	3d2841e4 be1d3588 3db2fb2c be0abbe4     .A(=.5..,..=....
   1c550:	bdfe0095 3c89873d bca09f19 bd6fceac     ....=..<......o.
   1c560:	be214816 be1321d8 bdfc4915 3e31106c     .H!..!...I..l.1>
   1c570:	bda20493 bdbecebc bd51ce59 3d60f1d6     ........Y.Q...`=
   1c580:	bd76923a 3b66efb8 3d8e2c26 be1efff1     :.v...f;&,.=....
   1c590:	3d266fc2 be4eb2e7 bdc41e31 3c810a2f     .o&=..N.1.../..<
   1c5a0:	bdea73b9 bd4bdf41 bd88479d bd6821ab     .s..A.K..G...!h.
   1c5b0:	bcf92077 3daa5540 bdf9e126 3dddbe97     w ..@U.=&......=
   1c5c0:	bd91e857 be3ebb00 bd915122 3da1e66b     W.....>."Q..k..=
   1c5d0:	3da6f17d 3d8689a9 bdef9157 ba0106cb     }..=...=W.......
   1c5e0:	3d4ac09d be35af71 bc163d01 bd81a401     ..J=q.5..=......
   1c5f0:	bd2ef6a4 bd0de9b7 be26ef94 be2031ee     ..........&..1 .
   1c600:	3d308a43 bdb1a309 3c11b820 3d1e7c55     C.0=.... ..<U|.=
   1c610:	be4f60bd 3ca30605 bbfa4892 be0a536a     .`O....<.H..jS..
   1c620:	bc1901d5 be2af669 be08bef9 3c49174b     ....i.*.....K.I<
   1c630:	3d7910b4 bcf2b14f 3c8a6bc4 be35a76c     ..y=O....k.<l.5.
   1c640:	bde0fbe2 bd2ac0f3 bdbd47e6 be6630c3     ......*..G...0f.
   1c650:	3d352dfb bdadd613 be01d27f bd57e19e     .-5=..........W.
   1c660:	3ce2028c be119021 3dab8f56 3ddc5bba     ...<!...V..=.[.=
   1c670:	be775eaa 3d64c91c 3bd4f6fa 3d4a3d72     .^w...d=...;r=J=
   1c680:	be34d58c 3ba83032 3c8e0c60 3d30c77b     ..4.20.;`..<{.0=
   1c690:	bbb95186 3e0e50ed bc8a70b3 be1d3ac6     .Q...P.>.p...:..
   1c6a0:	be094d77 bd395bb7 3d94c923 bd7d6b8c     wM...[9.#..=.k}.
   1c6b0:	be457ec7 bdb839f7 be414622 3c64cc9c     .~E..9.."FA...d<
   1c6c0:	bd94ae97 bd8e00f9 bdaed334 3d4c7e95     ........4....~L=
   1c6d0:	3d813f16 bc9b7e77 bc877b47 be14c1b8     .?.=w~..G{......
   1c6e0:	bdff6448 bce20941 bd2d02cb ba265752     Hd..A.....-.RW&.
   1c6f0:	bd83922b be818812 3de48711 be5125f6     +..........=.%Q.
   1c700:	bde92dd5 be6bc7ca 3c423320 be543bfd     .-....k. 3B<.;T.
   1c710:	bd186dcc be1f3150 3e485a15 3e1ea86a     .m..P1...ZH>j..>
   1c720:	be9d721c 3e19cfc2 3d3e99da bf849c33     .r.....>..>=3...
   1c730:	3d19f1c3 bd24f73f 3ef72a29 be48f548     ...=?.$.)*.>H.H.
   1c740:	bdf4bcf4 bd7f44ed 3e8a943b bc5d23cd     .....D..;..>.#].
   1c750:	3e8bdb58 beac74e7 bd84536e 3e4a4a18     X..>.t..nS...JJ>
   1c760:	3df18c96 bc5bc0ae 3e528792 bd55cd51     ...=..[...R>Q.U.
   1c770:	3d0f962d bc95eeba 3e32f279 bed86c9a     -..=....y.2>.l..
   1c780:	be06fd67 bcd52047 3df52067 3bbb84b6     g...G ..g .=...;
   1c790:	3e3a9120 be2b8c86 3deb2b94 3e17bd57      .:>..+..+.=W..>
   1c7a0:	bc185f8f bd658f7d 3ec33799 bda88c04     ._..}.e..7.>....
   1c7b0:	3dd38d8a bda919dc 3d841392 bea3b891     ...=.......=....
   1c7c0:	bd87317b bb29f45b 3e449a99 bd26997a     {1..[.)...D>z.&.
   1c7d0:	3e03d1e1 3ca1ac37 3e0de346 3d96adcc     ...>7..<F..>...=
   1c7e0:	bdf9ab34 be367ecb 3e8ca775 be415865     4....~6.u..>eXA.
   1c7f0:	baa34512 bce251d5 bcc82cac be701d8a     .E...Q...,....p.
   1c800:	3c65b058 3ddc2900 3e9d94f7 bd84fa24     X.e<.).=...>$...
   1c810:	3dfe06a0 bd100884 3dc50af0 3cd3f2d4     ...=.......=...<
   1c820:	bdd5a3fd bb4e95ac 3e996d0a 3c1d845a     ......N..m.>Z..<
   1c830:	bc8c7656 bca8ffa3 3c4b9db2 be8b87e3     Vv........K<....
   1c840:	bde6e930 bceff397 3e9f4067 bd9c957e     0.......g@.>~...
   1c850:	3df4d7a1 bd440514 3e405032 be0e4f7f     ...=..D.2P@>.O..
   1c860:	bd35b424 be1301bb 3e729775 bcc4b572     $.5.....u.r>r...
   1c870:	bea3032d bd859c30 3ddd8ae9 bde18566     -...0......=f...
   1c880:	be167800 bd5de0a6 3e61a739 bdfae940     .x....].9.a>@...
   1c890:	3e781a03 be108aae 3d7369ff bdd1c183     ..x>.....is=....
   1c8a0:	be01dce9 3d5fa7ef 3e3fe31d 3d3674e2     ......_=..?>.t6=
   1c8b0:	be5db4da bd5667df 3dcae83b be2114db     ..]..gV.;..=..!.
   1c8c0:	be210e26 bdceee70 3e8dd1ce bddb98f7     &.!.p......>....
   1c8d0:	3d78d876 be25c5d9 3d971e7b be113136     v.x=..%.{..=61..
   1c8e0:	be09151b bb0ba620 3ea0a125 bdbbb21b     .... ...%..>....
   1c8f0:	be9f786d bd6afbdf bdc3dcae be8ae1b2     mx....j.........
   1c900:	bd90865a bd912c36 3e8b4fa1 bd1110ef     Z...6,...O.>....
   1c910:	3da8cc4e be7bf054 3d604028 3d009ba8     N..=T.{.(@`=...=
   1c920:	bd28cecf 3d48313c 3ea4a141 be8b2aa7     ..(.<1H=A..>.*..
   1c930:	bdf4d5df 3ba2c1ac bccf44c4 be5b374f     .......;.D..O7[.
   1c940:	bd4cc267 3cb2108b 3e26e350 3dc25ef8     g.L....<P.&>.^.=
   1c950:	3e051203 be1fbd62 3dfeec1c 3d50476e     ...>b......=nGP=
   1c960:	3d893260 bd9239ac 3e3c3823 3c761e5f     `2.=.9..#8<>_.v<
   1c970:	bd19e294 bcc8d77a 3b91e3d8 be99260d     ....z......;.&..
   1c980:	be5dad2a 3c898e94 3de6994f 3b98d738     *.]....<O..=8..;
   1c990:	3e129de2 be8eb1e8 3e28892c 3e3ed08f     ...>....,.(>..>>
   1c9a0:	bd500722 bdb54901 3e767e06 bda08baa     ".P..I...~v>....
   1c9b0:	bc4a43a5 bc8464e5 3d36b17c bec600ae     .CJ..d..|.6=....
   1c9c0:	be0a177f bd3c53a0 3dab43b2 3dcdfff2     .....S<..C.=...=
   1c9d0:	3eb6de42 bf070536 bd54472d 3e21a073     B..>6...-GT.s.!>
   1c9e0:	3e0561c1 bdcb6b27 3e5be19a bd33dcfe     .a.>'k....[>..3.
   1c9f0:	3e2f0512 bc287984 be66683e beb70f7a     ../>.y(.>hf.z...
   1ca00:	bea6ffcb 3d6c4ce1 3ebe0f10 bdd3ef90     .....Ll=...>....
   1ca10:	3e8e9820 bebb833f bdc80e22 3e08945b      ..>?..."...[..>
   1ca20:	3d9b96f7 bd464453 3dbc4731 bdee9a4b     ...=SDF.1G.=K...
   1ca30:	3d35f938 3d3eb3ce 3d95959b bebf6fcd     8.5=..>=...=.o..
   1ca40:	be6a4313 3de24da7 3f0fb476 bca0988e     .Cj..M.=v..?....
   1ca50:	be339126 be7c43c6 bcd598be 3e437248     &.3..C|.....HrC>
   1ca60:	bc8874f7 3cec58c2 3da716b6 3e398c17     .t...X.<...=..9>
   1ca70:	be00f584 3de2a8c4 3e22c956 be9657a1     .......=V.">.W..
   1ca80:	bd971c06 3d8224da bc1eafb1 be7e3d4c     .....$.=....L=~.
   1ca90:	3dbce6ca bd93d0ec bdeb3513 bd0e88bb     ...=.....5......
   1caa0:	3cf42beb 3e462013 bd789f54 bd44113d     .+.<. F>T.x.=.D.
   1cab0:	bde33db2 3da8613d bd10f8a9 3d94dce2     .=..=a.=.......=
   1cac0:	bdde3914 bddea465 bd92dd72 bd5305b3     .9..e...r.....S.
   1cad0:	3d1d8dcf bea3840a be86035c becbb616     ...=....\.......
   1cae0:	befd1430 3d3ffee8 bdc402ec 3c994b55     0.....?=....UK.<
   1caf0:	bd1ea5cb 3d8206b4 be92d82a bda1ea49     .......=*...I...
   1cb00:	be7b7825 bde8d634 be956af3 bda10cde     %x{.4....j......
   1cb10:	3b78ac81 bed6a555 be65fafb beb2a0d2     ..x;U.....e.....
   1cb20:	be4f3301 3d8fa4c6 3d7235b4 bcc4fbfd     .3O....=.5r=....
   1cb30:	bc02c58a 3d1b812e be7188f1 be23e710     .......=..q...#.
   1cb40:	bd9bd4e5 bd9c927e bea55d32 bd10123f     ....~...2]..?...
   1cb50:	bca4a806 beb0e081 be5def1a beca9b15     ..........].....
   1cb60:	be36b4a3 bd549680 bcd44127 3d7a96e1     ..6...T.'A....z=
   1cb70:	3da4f1b0 3d379f2e bea01969 3daed8b0     ...=..7=i......=
   1cb80:	bd0e8042 3c8dbbbe be93711f bca013e5     B......<.q......
   1cb90:	bccdb855 3bc0f055 be2ce0ba befc38a5     U...U..;..,..8..
   1cba0:	bddc0803 bd14728c 3c67d9ef 3de003c9     .....r....g<...=
   1cbb0:	3da0e269 3d0686e1 be9052a4 bc2956da     i..=...=.R...V).
   1cbc0:	3dbd9c2b bcf3f712 bd41ad96 bd104ab6     +..=......A..J..
   1cbd0:	bdb5ee7a 3daa8388 bebd03ae bee1af4d     z......=....M...
   1cbe0:	3c4a2232 bd90a26b bd95817e 3dbce1c7     2"J<k...~......=
   1cbf0:	bd7e4256 3dcbdbb4 bf0e8efe 3e60e968     VB~....=....h.`>
   1cc00:	3cce83ea bb6d0804 3d38b2ff 3c82e226     ...<..m...8=&..<
   1cc10:	be102071 3e136482 bec61aa7 bec7e83e     q ...d.>....>...
   1cc20:	3dd81e30 be508766 be4bbf5d bdb89ef9     0..=f.P.].K.....
   1cc30:	3d049e22 3d7a8f89 be15d94a 3e5e774f     "..=..z=J...Ow^>
   1cc40:	3d0819c0 bd47d6e0 3db62bfb 3cf1a364     ...=..G..+.=d..<
   1cc50:	bdd1ee36 3d60603c be75ae23 be8900c8     6...<``=#.u.....
   1cc60:	3e229cc4 be8829c9 bec26ad5 bdca7187     ..">.)...j...q..
   1cc70:	bca38076 bdbccf84 be17ac4c 3e91d8aa     v.......L......>
   1cc80:	3c5244a9 bdfaeec0 3d243b2c 3d8c0ac8     .DR<....,;$=...=
   1cc90:	3d071037 3ddf7898 bde5e20c be34382c     7..=.x.=....,84.
   1cca0:	bdb749e5 bed8cfc7 be6ef354 be19bc2d     .I......T.n.-...
   1ccb0:	3d8d0fe4 bddc48f1 3cdc21a2 3e9d4c86     ...=.H...!.<.L.>
   1ccc0:	3de7cd93 bdbf7730 bc9fd2e0 3d8e3a55     ...=0w......U:.=
   1ccd0:	be6e3ff2 3d96b4fc bea1fef3 bdfcf780     .?n....=........
   1cce0:	3d6cd434 be445b31 be4550cc bdf42bd0     4.l=1[D..PE..+..
   1ccf0:	be0213f7 bdd70860 3e957ee5 3e7e1eed     ....`....~.>..~>
   1cd00:	3d105f30 be47f2c7 3b8e3c69 bd51eef1     0_.=..G.i<.;..Q.
   1cd10:	be41098e 3dbf3e6f be098d30 be19a9c1     ..A.o>.=0.......
   1cd20:	bd96b8a7 3c82d86c bd3d4545 be4fb881     ....l..<EE=...O.
   1cd30:	3d32e1d5 bc518526 3e8b0986 3e8745a3     ..2=&.Q....>.E.>
   1cd40:	3e52eb50 3c97e717 be1863c6 bcd4ff34     P.R>...<.c..4...
   1cd50:	bee5dcf9 3d86054c bcf291ee bcfa839f     ....L..=........
   1cd60:	bd9e3802 bcfe8a7c be02139a be08cfc3     .8..|...........
   1cd70:	3d0dfb49 bd29f617 3edd7a88 3e013b6f     I..=..)..z.>o;.>
   1cd80:	3e5bdd19 bd19bc47 bd9ac443 3d8216dd     ..[>G...C......=
   1cd90:	be8908d4 bed8b51f 3d69445a be601535     ........ZDi=5.`.
   1cda0:	be9e3406 3ea15aff be866961 bd8aee90     .4...Z.>ai......
   1cdb0:	be36554a 3d577143 bf0ecbaa bf3591b4     JU6.CqW=......5.
   1cdc0:	bf0f5b6f 3e038240 be987807 be9015c2     o[..@..>.x......
   1cdd0:	beaa72f9 be9c17e2 3da93e08 bf1aae9f     .r.......>.=....
   1cde0:	bf28f7f0 3dfc8be1 beecb55b 3ca91464     ..(....=[...d..<
   1cdf0:	bcdb3a5f bdd3c8c2 bf52a21d 3d85068d     _:........R....=
   1ce00:	beaffc59 3cb0a1ab be2fa04d bbd31f04     Y......<M./.....
   1ce10:	bce24920 3d02c712 3e318976 3d4883b6      I.....=v.1>..H=
   1ce20:	becfc840 3ddb9ea3 3e2a472f bf8df7a8     @......=/G*>....
   1ce30:	3d253afc bdb39c82 3e0525e4 bec07d56     .:%=.....%.>V}..
   1ce40:	3d9fec7c bd8e5948 3e914bcd 3e0d6e53     |..=HY...K.>Sn.>
   1ce50:	3e939991 be169c54 3dbf8f68 3da1efbd     ...>T...h..=...=
   1ce60:	3bcf83c4 bec1c4d6 3e3e4711 bdf55c37     ...;.....G>>7\..
   1ce70:	3ddb27c2 bd97795d 3d0cf298 beaaa66c     .'.=]y.....=l...
   1ce80:	bdb530d9 3a010590 3e358ff1 bcfd5d82     .0.....:..5>.]..
   1ce90:	3e54f8c7 bcd8e19e 3e239dba 3e0687c5     ..T>......#>...>
   1cea0:	3ceee76b be2a75ae 3e2cf59b bc9d58c5     k..<.u*...,>.X..
   1ceb0:	3cbb3b4b 3c7a3396 beabd3d7 be5e0333     K;.<.3z<....3.^.
   1cec0:	3d2ce424 bc0966c6 3e8e166f 3b0741d1     $.,=.f..o..>.A.;
   1ced0:	3e40cc25 3d0f18e2 3e82e815 3ddb6941     %.@>...=...>Ai.=
   1cee0:	be3727e1 be9d5b00 3e40dbcb bbea3ce1     .'7..[....@>.<..
   1cef0:	bc30610e 3d9537ba bef317fd be5074c2     .a0..7.=.....tP.
   1cf00:	bd7e7a9a 3dc33430 3ec3e254 3d9aa66d     .z~.04.=T..>m..=
   1cf10:	3e88a2af 3d7111d8 3e26a84b 3beb2fb8     ...>..q=K.&>./.;
   1cf20:	bd2b6365 3c37d392 3ea6f095 be156a00     ec+...7<...>.j..
   1cf30:	3d375536 3d4d591d be91df7c be6f6ba2     6U7=.YM=|....ko.
   1cf40:	3ce24b27 bc50001a 3e9e40e9 be01aa99     'K.<..P..@.>....
   1cf50:	bb7058c2 3cd98c83 3de63e0d 3d816ff1     .Xp....<.>.=.o.=
   1cf60:	3c7b83cb bd3bff78 3e79aee1 bc857227     ..{<x.;...y>'r..
   1cf70:	be0ab172 3b8ac6da be14e56b bd9e70af     r......;k....p..
   1cf80:	3dc3baa2 bd10643e 3e94e26c bd086a65     ...=>d..l..>ej..
   1cf90:	3e9a6670 bdd4969e 3e70cdb3 3e0f7a93     pf.>......p>.z.>
   1cfa0:	bdfa948c bd6390a4 3e8807cb 3d48ab06     ......c....>..H=
   1cfb0:	3e3e5b44 bb6cd67f bcf0ed04 be7cc3e4     D[>>..l.......|.
   1cfc0:	bd2c9426 3ccc274a 3e92c2fc bd271b82     &.,.J'.<...>..'.
   1cfd0:	3e9bf49a be8b5336 3e8c9c0f 3d99682f     ...>6S.....>/h.=
   1cfe0:	3caa6220 bc6f1ebb 3e4b1f9d be457f54      b.<..o...K>T.E.
   1cff0:	3cb5ba9b 3c2b194b 3cb7e699 be23450b     ...<K.+<...<.E#.
   1d000:	3d2ad678 3e07e202 3e6626d6 be2b283a     x.*=...>.&f>:(+.
   1d010:	3e367745 bdf6f32e 3dea28b9 3ddbdf74     Ew6>.....(.=t..=
   1d020:	3a826915 3ca189e2 3eb6fe04 3e1c5bc2     .i.:...<...>.[.>
   1d030:	bd087a73 3d0e504d bdb355a0 be1d2418     sz..MP.=.U...$..
   1d040:	bdd15bbc 3dd9b0cc 3d952ca1 be087079     .[.....=.,.=yp..
   1d050:	3e1853eb bd438dc5 3d6ea35d 3e0f0566     .S.>..C.].n=f..>
   1d060:	bd8b01a4 bd47b857 3e8a97e8 bd135277     ....W.G....>wR..
   1d070:	3daea240 3ad4bc8f bdd4088b be441a56     @..=...:....V.D.
   1d080:	bd358722 bca929b1 3e8c06fe bd3888ca     ".5..).....>..8.
   1d090:	3e04ddba bea90b66 be9da89d 3b326055     ...>f.......U`2;
   1d0a0:	3e09097d bc3fb54f 3ede7971 be38e92d     }..>O.?.qy.>-.8.
   1d0b0:	bd764c9a bca0e8a2 bd10c7f4 3c200771     .Lv.........q. <
   1d0c0:	3d46c86d bd163c44 3e5a5afb bee00143     m.F=D<...ZZ>C...
   1d0d0:	bf41bf2e bf1e7f14 bf4d88cf bea6b085     ..A.......M.....
   1d0e0:	3d9ad065 bc1cbead 3d85c1fa bdae72fc     e..=.......=.r..
   1d0f0:	bdc8f514 3d08200c 3e6335e8 3d74f5c0     ..... .=.5c>..t=
   1d100:	bf0dd58b 3d4b943d be33ff69 bf81b76f     ....=.K=i.3.o...
   1d110:	bf5e052a be941921 beed2a34 bf03f110     *.^.!...4*......
   1d120:	bf80f040 bd1e4408 bf46590d beb3a631     @....D...YF.1...
   1d130:	bec45d58 bd10051a 3ee1e6a7 beb906f7     X].........>....
   1d140:	bfa0f0ce bc85cff4 be82e23a bf7385fd     ........:.....s.
   1d150:	bf552224 bf20ad49 bc3f5890 beb4bf5d     $"U.I. ..X?.]...
   1d160:	bf614b23 3c4d9a4a bf3d207a 3ba18cfd     #Ka.J.M<z =....;
   1d170:	be0e15c4 bc56b82a 3f0c41b5 becffaf6     ....*.V..A.?....
   1d180:	befc1c3b bd248bb5 3efde0ca 3ec9f32a     ;.....$....>*..>
   1d190:	3b1a8b58 3f0f3706 be5a79e5 3da56ccb     X..;.7.?.yZ..l.=
   1d1a0:	3ec6a061 3cbc2786 be4b51ee 3f0d4a88     a..>.'.<.QK..J.?
   1d1b0:	be820e16 bdcdd9ca 3eec2653 3e89a667     ........S&.>g..>
   1d1c0:	3d21893e ba8a9489 be99bc4e 3ddcf0b9     >.!=....N......=
   1d1d0:	bea7614b be2e3c5a 3e822ea8 bd851068     Ka..Z<.....>h...
   1d1e0:	be7c2328 3e017b82 be1bc3c1 3ec58b60     (#|..{.>....`..>
   1d1f0:	bdb155da 3d2946d7 3dcdff8e bde3acf1     .U...F)=...=....
   1d200:	be437872 3e52edd3 bee89e6d 3d9a9a79     rxC...R>m...y..=
   1d210:	be63f698 bebf7c0c 3e9a4583 be0b351d     ..c..|...E.>.5..
   1d220:	3b6700c5 3df43e75 be1b2b77 bcebffa5     ..g;u>.=w+......
   1d230:	3e74b3b6 bd3dbf52 be2ddc7a be3d5b8a     ..t>R.=.z.-..[=.
   1d240:	be6d30fb 3e35d867 beb8720e 3a800ad2     .0m.g.5>.r.....:
   1d250:	3d8d8b43 be9a8fd9 3e8a80ba bd021bc7     C..=.......>....
   1d260:	bb80ae2a 3e083131 be2f7555 bd48c6ad     *...11.>Uu/...H.
   1d270:	3e7e0343 bdb8e448 bde8c675 bda13c06     C.~>H...u....<..
   1d280:	3dc2a2d7 3e0747e5 bedb42a6 be05bf6b     ...=.G.>.B..k...
   1d290:	bdc76284 be972eb7 3e9e29dc 3d0ac53b     .b.......).>;..=
   1d2a0:	bd28d278 bc0b0041 bcc4cc08 bde088a2     x.(.A...........
   1d2b0:	3eb04823 be2f0e00 3d84b069 bd839d20     #H.>../.i..= ...
   1d2c0:	bca6e353 3dd17499 be8d3336 bcfe2e35     S....t.=63..5...
   1d2d0:	bcf6ead4 be90f9c2 3da76772 3e08ae44     ........rg.=D..>
   1d2e0:	3d496fed bda4e3ed 3d2511c8 bd307bc0     .oI=......%=.{0.
   1d2f0:	3df76e80 be94e9b9 3dba8012 bcacfb03     .n.=.......=....
   1d300:	bcf453be bd27268c bec71371 be02c56e     .S...&'.q...n...
   1d310:	3d239d54 be39baa5 3d5226f0 3dc9f6fe     T.#=..9..&R=...=
   1d320:	3da81894 be1cd3e6 bde6d29a bd1db0bc     ...=............
   1d330:	3db00a22 be740f09 3dde3622 3d20c6ab     "..=..t."6.=.. =
   1d340:	bdd1eb5b bd1a09af be3183aa bcbd9d2d     [.........1.-...
   1d350:	bdb6ca8f be4aa08c 3dfa674b 3e01993f     ......J.Kg.=?..>
   1d360:	3da5640e bad3e9e3 bc6a099d 3e824f28     .d.=......j.(O.>
   1d370:	3e0a4ce3 bd6efd44 3da0fc94 3d83358e     .L.>D.n....=.5.=
   1d380:	bcea14ef bd10f94b bd8e4342 bd3b780b     ....K...BC...x;.
   1d390:	bd2fc80d beb1c043 3e8592f4 3dea10fd     ../.C......>...=
   1d3a0:	3d89a13f bd2ad2b9 be99fd6c 3e22f068     ?..=..*.l...h.">
   1d3b0:	bdf83b4e be18a06a bd1dee91 3d0e1448     N;..j.......H..=
   1d3c0:	bdb22b64 3cad3447 bde79cb1 3d8b9ad0     d+..G4.<.......=
   1d3d0:	3de55bc6 be211fa5 3e0b260a bd5a1aa4     .[.=..!..&.>..Z.
   1d3e0:	bde8533e 3bc9b5da be5368c0 3e9a3185     >S.....;.hS..1.>
   1d3f0:	3e1a64f9 bd354ae0 bda0aae8 3dbdf7ac     .d.>.J5........=
   1d400:	be1abdbf 3d413e71 bdfb555c 3de0794b     ....q>A=\U..Ky.=
   1d410:	3d870ec1 bd83faac 3e1e1b1c 3da7e6cd     ...=.......>...=
   1d420:	bda32add 3cc048d2 bed54a4e 3e16a261     .*...H.<NJ..a..>
   1d430:	bc82e697 bdaf7e79 3dfb1a3b 3e3d30c9     ....y~..;..=.0=>
   1d440:	be86273d 3e5f31d1 be99fc42 3dc382e0     ='...1_>B......=
   1d450:	3dd18591 3ceabf95 3de41939 be17404f     ...=...<9..=O@..
   1d460:	bdd88f5b bd638b16 3ba112d5 3c68d5c0     [.....c....;..h<
   1d470:	bdb89655 be9df3bc 3dd579f8 3dd51aac     U........y.=...=
   1d480:	bd1400d0 baad1dca be2ced79 bcc605c4     ........y.,.....
   1d490:	3df71c0d bd8fd0d8 3dba0e79 3d30333c     ...=....y..=<30=
   1d4a0:	bdbf082c bd717a4a bc453bc2 be8eac7a     ,...Jzq..;E.z...
   1d4b0:	bda90613 be3bd40e 3d474bc5 bd85b590     ......;..KG=....
   1d4c0:	be0fcee5 3cc7ae02 be4d9cc1 3d8f0760     .......<..M.`..=
   1d4d0:	bd7857a0 3e869348 bdfbede4 3d74576e     .Wx.H..>....nWt=
   1d4e0:	bd015385 bdffaf56 3e07e2fe bddbb413     .S..V......>....
   1d4f0:	be9f89fb bde2b974 3e8cac4b bd8d2af8     ....t...K..>.*..
   1d500:	be087d76 3d84c839 bde90262 3afc1cb0     v}..9..=b......:
   1d510:	bd067e52 bccef1ec 3cc33b00 3d3e4e08     R~.......;.<.N>=
   1d520:	be45195c bdbd06bb baf7bb9d 3b87a59c     \.E............;
   1d530:	bd85831a bceb38a3 3ddc6583 3e0e8d5c     .....8...e.=\..>
   1d540:	3be67fcf bdaf2c7d 3cafc59c bcc76ad7     ...;},.....<.j..
   1d550:	be48c27a 3d0e1afc 3d3e979e bad034f1     z.H....=..>=.4..
   1d560:	bdee60bb bdec2f85 3c7b6f8e bdfc28b9     .`.../...o{<.(..
   1d570:	be6b844d bd4c3526 bd2fe98a be1c112a     M.k.&5L.../.*...
   1d580:	be087ebb be8173f6 bd11fd36 bdcf856a     .~...s..6...j...
   1d590:	bd939f64 bdfffeb8 be19a54f be349bd9     d.......O.....4.
   1d5a0:	3adbac17 bda11c2d 3c909422 bb6da9cb     ...:-..."..<..m.
   1d5b0:	3d9ead84 be119afd 3d13aa93 bd8b6142     ...=.......=Ba..
   1d5c0:	be28215d bdd27b15 3d547ef5 3d8176c1     ]!(..{...~T=.v.=
   1d5d0:	bde71345 3d124fac 3c0e1c8f 3c706db3     E....O.=...<.mp<
   1d5e0:	bbdcfa6b bcf9abd6 bcf74949 bd59504b     k.......II..KPY.
   1d5f0:	bdb01e10 bd397143 bdc1e0d5 3d5fc233     ....Cq9.....3._=
   1d600:	be4aa748 be358def bd3c9ea1 bda53ab0     H.J...5...<..:..
   1d610:	3da19da8 3d73b061 3dbd36db bd03c1a1     ...=a.s=.6.=....
   1d620:	bdac98de 3dd45ae1 bda10487 3d2fcf22     .....Z.=...."./=
   1d630:	bdc2f3ae be30e07d be03361d 3db186c3     ....}.0..6.....=
   1d640:	bdbbf100 bd56985f be06cddd 3ba56ecf     ...._.V......n.;
   1d650:	bd88a0aa be568799 3d37ce59 bb9c1ec6     ......V.Y.7=....
   1d660:	be1f24f9 3d89ee6e bbe8d5a5 bd7d47de     .$..n..=.....G}.
   1d670:	be2646e3 3dc7428b bdc6c8b5 bdc3c158     .F&..B.=....X...
   1d680:	3d4f674d be2bdd9f bd022413 bd2a308c     MgO=..+..$...0*.
   1d690:	3c543099 3ca4ce86 3c1bea3c 3d002018     .0T<...<<..<. .=
   1d6a0:	bc0a1df5 3d74c03f bbf44f5a bdc5771e     ....?.t=ZO...w..
   1d6b0:	bde416ee 3d60b4b5 bdeda225 bd9e7d97     ......`=%....}..
   1d6c0:	bd36d4c9 3ca61bbf 3d27b96e 3d2e11e8     ..6....<n.'=...=
   1d6d0:	bdbdaea5 bd04fadd bde501e6 3d654303     .............Ce=
   1d6e0:	bd34f436 bdd133c8 be1c0606 3bb79417     6.4..3.........;
   1d6f0:	be011164 bde6b1df be3b78a5 bd58160d     d........x;...X.
   1d700:	3cd4bc4b be522392 be153f0d be52d38c     K..<.#R..?....R.
   1d710:	3b35a400 3da58437 be02e3df be0f99bd     ..5;7..=........
   1d720:	be33379d 3dfdd187 be3926cb be0e3f5d     .73....=.&9.]?..
   1d730:	be2db1e6 bd7d004c 3bd832f7 3d86cfc5     ..-.L.}..2.;...=
   1d740:	bda86260 be2f0d44 3df91eed be51794d     `b..D./....=MyQ.
   1d750:	be50dd22 be1e3b74 bd774fe1 be1d0200     ".P.t;...Ow.....
   1d760:	bd445f07 3cb83f44 bba9959d 3d55e84a     ._D.D?.<....J.U=
   1d770:	3d5d6efd be207ccd 3da223b5 3d84c892     .n]=.| ..#.=...=
   1d780:	be3f4aa4 bd75d7ae bdc45e46 bd24e0b9     .J?...u.F^....$.
   1d790:	bd83ba2a 3dd9fedd 3d947298 3d09916b     *......=.r.=k..=
   1d7a0:	3b88ae51 bbd86a65 be171544 3db3bbcf     Q..;ej..D......=
   1d7b0:	be3fa1fe bdd8bf57 3d9dc5cf bc5980ce     ..?.W......=..Y.
   1d7c0:	bddd3814 be56b549 3da5b0c5 bd1099a9     .8..I.V....=....
   1d7d0:	bc95ea39 be3f5573 bd8557fd 3d65f11d     9...sU?..W....e=
   1d7e0:	bd06e9ab bcf85377 bd75bcfa 3d6cc832     ....wS....u.2.l=
   1d7f0:	be42fbec bd8ae34f bc32d4c9 3dbe14e0     ..B.O.....2....=
   1d800:	be2ad2dd be42f32d 3d6e618a bb85ed34     ..*.-.B..an=4...
   1d810:	bd3c83cc bc8fe4f4 bd2a4e6a be1bb832     ..<.....jN*.2...
   1d820:	3d73d245 bd6463a9 bdb52334 3e0016e3     E.s=.cd.4#.....>
   1d830:	bdf0aca5 3d3def1c 3cffbafc 3d0bfabc     ......==...<...=
   1d840:	bd60d7fc bbdd1091 3dbe68e4 be5092a5     ..`......h.=..P.
   1d850:	be277b98 bea2e378 bd2163a6 3dc0e46d     .{'.x....c!.m..=
   1d860:	bdd29c68 3e11b45b bda9efa7 3d83fbf9     h...[..>.......=
   1d870:	3ce56dd8 bd3d59c2 bce3026f bbcf52dd     .m.<.Y=.o....R..
   1d880:	bdbc3458 bd4543a9 bd9af01e 3d614380     X4...CE......Ca=
   1d890:	be72a477 3eb017a1 3ed15f36 bdfe2012     w.r....>6_.>. ..
   1d8a0:	bc7c4d5d 3e3d0afe 3b22cfd5 3c0f2edc     ]M|...=>..";...<
   1d8b0:	3d903c79 3d2e83ac bf22ce75 be354e23     y<.=...=u.".#N5.
   1d8c0:	3c610b92 3e70dccf bea2e43f 3d9e0163     ..a<..p>?...c..=
   1d8d0:	bea80561 3de07d1b 3ecc3bb5 be9d97dc     a....}.=.;.>....
   1d8e0:	3d60f113 bd955bfc 3e0627d8 bd653e27     ..`=.[...'.>'>e.
   1d8f0:	bd7bc33a 3d37a577 be146730 bebe10f9     :.{.w.7=0g......
   1d900:	3e53ec4f 3dd926f5 bf2d3b48 bc359bd1     O.S>.&.=H;-...5.
   1d910:	3dae607e 3d5b08df be9be958 bef6c6b6     ~`.=..[=X.......
   1d920:	3e45a357 bd1911a1 3e2db8af 3e069bb8     W.E>......->...>
   1d930:	be3103bc 3ca4e049 bd163d67 be54a25d     ..1.I..<g=..].T.
   1d940:	3d1b85c7 bb0576fb bbd51f20 be6512c3     ...=.v.. .....e.
   1d950:	3e9d601e bd038d74 bf0187e6 bec3584e     .`.>t.......NX..
   1d960:	3e093e0b bd170fae 3d5bebab 3e894133     .>.>......[=3A.>
   1d970:	be1466fe bc63fd82 bebb1d07 3d7e1380     .f....c.......~=
   1d980:	bedf5351 3d9178b3 bdac797e be3fe22e     QS...x.=~y....?.
   1d990:	3d018546 3e64f8ec beed8e06 bf1c7bf7     F..=..d>.....{..
   1d9a0:	3d425b09 3b82fd5b bde4a5de 3e827ccb     .[B=[..;.....|.>
   1d9b0:	be77e7d6 bae38e28 bf1619f5 3e0cf947     ..w.(.......G..>
   1d9c0:	bea7a493 bd0bfda1 be2a2534 be3ea679     ........4%*.y.>.
   1d9d0:	3e7a4672 3ed4b1dd 3dd7aea6 beb8a3cd     rFz>...>...=....
   1d9e0:	bdeaf283 bcfc19da bca2768d 3ca25617     .........v...V.<
   1d9f0:	be00a9f4 3d36de5b bf2d780f bd7edc7f     ....[.6=.x-...~.
   1da00:	bd93238b 3d0e440b be73dad1 be5b9fcf     .#...D.=..s...[.
   1da10:	3e25e950 3e956c83 3d760872 be51e5ae     P.%>.l.>r.v=..Q.
   1da20:	bda4f0d4 bdce06f9 3e149890 3c202924     ...........>$) <
   1da30:	be1c7511 3c2b7699 bec1649b be085d58     .u...v+<.d..X]..
   1da40:	3e0f09cc bd1e156e bded4517 be00b415     ...>n....E......
   1da50:	3d830671 3eb27ee5 3e579572 be782b10     q..=.~.>r.W>.+x.
   1da60:	be178b8f bd69cb7a bd35e993 3e134a70     ....z.i...5.pJ.>
   1da70:	bdde2f29 3d0f2c49 3e7bd1b4 bd1aff15     )/..I,.=..{>....
   1da80:	3d16eb09 3d942016 be378162 bca9b4f4     ...=. .=b.7.....
   1da90:	bcfbe9a1 3dfce06a 3e4f3e34 be3745c3     ....j..=4>O>.E7.
   1daa0:	3d137cbd 3ca1c580 bd942d95 3dc3f237     .|.=...<.-..7..=
   1dab0:	bcb54cea 3d0e6c3c 3dea0395 bda5cb00     .L..<l.=...=....
   1dac0:	3d94dbc6 3d9f75e0 bccd2b35 bc9dd64b     ...=.u.=5+..K...
   1dad0:	3e34e619 3da8c795 3e4da839 be2efe1a     ..4>...=9.M>....
   1dae0:	3d8c4663 be0c63b2 bc8253cb 3d23cc0d     cF.=.c...S....#=
   1daf0:	3cffee93 bd10baa1 bbfd9ff4 be5263e4     ...<.........cR.
   1db00:	3ddb3fa0 bda18ce3 bd754f75 3ce6c364     .?.=....uOu.d..<
   1db10:	3e966a91 3e418f5b 3e8ded0b bd47fae1     .j.>[.A>...>..G.
   1db20:	3da679e8 3c774e7f baf1bf3d 3d922e83     .y.=.Nw<=......=
   1db30:	bdc3c814 3d006942 3d8b9386 be37b3c6     ....Bi.=...=..7.
   1db40:	bc278c5d bcc970ee be96f5f7 3de1203f     ].'..p......? .=
   1db50:	3e8b7a07 3d1746c1 3e3ccc39 be11a0d4     .z.>.F.=9.<>....
   1db60:	3de38b24 3d49329b be086fc1 3d0e215f     $..=.2I=.o.._!.=
   1db70:	3d1ac1c0 3d8e304d 3e2edf0d be4b8458     ...=M0.=...>X.K.
   1db80:	3d850896 3c4f2e9a bec24d26 3dea7678     ...=..O<&M..xv.=
   1db90:	3d0a01d6 be78eff5 3e829b66 be5f6b90     ...=..x.f..>.k_.
   1dba0:	3df9df8c bee99884 3c734e38 3e2aacce     ...=....8Ns<..*>
   1dbb0:	3d80291d be94d404 be2f8b5d bec5de02     .).=....]./.....
   1dbc0:	bd0e6bbc bdb2340e be71c1fc bca49ab3     .k...4....q.....
   1dbd0:	3e5528d2 3e154b99 be8b9e6b bea6a70f     .(U>.K.>k.......
   1dbe0:	3d7f1c9f bed69703 bd7e2dec 3e2aa25a     ...=.....-~.Z.*>
   1dbf0:	3cf90196 bed3aa02 bf1e3ab1 3e50ee4b     ...<.....:..K.P>
   1dc00:	be4a8433 beca5eae be3dad6d bd8bdc35     3.J..^..m.=.5...
   1dc10:	be193b7f bde93ff7 bea90d39 be2faf62     .;...?..9...b./.
   1dc20:	bdf24250 3deca20b be6e3987 bd18e2a0     PB.....=.9n.....
   1dc30:	bd9df9d0 3c1cca44 3ec35322 be93898b     ....D..<"S.>....
   1dc40:	be2ac05b bce908c5 bdbb7a55 be4459a6     [.*.....Uz...YD.
   1dc50:	be9e5a92 be922144 be574f97 be1926e6     .Z..D!...OW..&..
   1dc60:	bef91a7c 3c9a2da7 beb96ca1 bef01f17     |....-.<.l......
   1dc70:	be634136 bd72fbe1 3ee05277 bf0123a8     6Ac...r.wR.>.#..
   1dc80:	be342334 bdbe7c86 bede3195 be0479ea     4#4..|...1...y..
   1dc90:	becc8223 bf1cc9f6 3c417d1a be6bc1cb     #........}A<..k.
   1dca0:	bf2d47f7 bd3287fe be8273ad be3ed1a2     .G-...2..s....>.
   1dcb0:	bd08fa4c bd3de1ef 3e724caf bea14679     L.....=..Lr>yF..
   1dcc0:	bee1735a bdc80b0d 3e91222d be7d093f     Zs......-".>?.}.
   1dcd0:	be25e718 bd495020 bc4b2908 be82d6ce     ..%. PI..)K.....
   1dce0:	beece098 3d2d3dcd bdb0f8f4 bdf3ee7a     .....=-=....z...
   1dcf0:	b8d8d421 bd81f3f1 3d0c082f 3e194680     !......./..=.F.>
   1dd00:	be9c3c80 bdf246c1 3e3a891d be0a64a9     .<...F....:>.d..
   1dd10:	bd2fe3b5 be558d99 bdcf1119 bd3a5d00     ../...U......]:.
   1dd20:	beb870ef bc4ee72f 3ea1bc57 bcd9cdbc     .p../.N.W..>....
   1dd30:	bdbe6a7d bd3a6e23 bd7765c8 be1ae9b2     }j..#n:..ew.....
   1dd40:	be7ab34f bd3d2992 3eacf1c2 bd393560     O.z..)=....>`59.
   1dd50:	3ce8a649 3e04f435 bc092641 3ea34e51     I..<5..>A&..QN.>
   1dd60:	bd9a7456 3d9410ae 3d51e901 3d451dc0     Vt.....=..Q=..E=
   1dd70:	bcb4b180 bdcb519b bd2dcaa8 bc5212a3     .....Q....-...R.
   1dd80:	be05ee22 bd664cf0 3ea30a12 bc8de7ae     "....Lf....>....
   1dd90:	3e4832a2 bdc625d9 3e0ee79f 3e20d483     .2H>.%.....>.. >
   1dda0:	bcf011f5 3d8cb1d8 3bd503ad 3dc04f87     .......=...;.O.=
   1ddb0:	3d3617b5 bd08dc13 3d23286d be944824     ..6=....m(#=$H..
   1ddc0:	bd4fbed9 bd90180b 3e91ee04 3e201260     ..O........>`. >
   1ddd0:	3e3150a4 bd91b479 3dfd3bb6 3dce3a87     .P1>y....;.=.:.=
   1dde0:	3d3c25ab 3bf6ba2e 3e88be22 3d911d41     .%<=...;"..>A..=
   1ddf0:	3d922e40 3d90d802 be583f68 bdd7ac9b     @..=...=h?X.....
   1de00:	bb8a6d18 bc7df41f 3e0945e9 3d95fe9f     .m....}..E.>...=
   1de10:	3e2af89d be185955 3e36fdb1 3e3baa2a     ..*>UY....6>*.;>
   1de20:	ba39f6a6 bd744da1 3e8de6d9 bc8ca580     ..9..Mt....>....
   1de30:	3d257461 3d71fe34 be8fb5bc bef44146     at%=4.q=....FA..
   1de40:	3a9ef217 3cce4580 3e8fd1a4 bc432ee3     ...:.E.<...>..C.
   1de50:	3eb4243d bd301eb1 3dcd3698 3d55480c     =$.>..0..6.=.HU=
   1de60:	be166f39 be34821d 3e817dc0 be0ae173     9o....4..}.>s...
   1de70:	3d13951d bbf56b52 bebc7e42 becc5a0c     ...=Rk..B~...Z..
   1de80:	bcc3c16b 3cf7a285 3e4bef11 3d85b9a4     k......<..K>...=
   1de90:	3ebe761b bdd4209f 3e2a1565 3dfedd6e     .v.>. ..e.*>n..=
   1dea0:	bd213572 be480f54 3e46e7fe bd80806f     r5!.T.H...F>o...
   1deb0:	3dc82cf4 bd8e0b45 be99d3b3 be196412     .,.=E........d..
   1dec0:	3c34988e 3d5c823f 3e8d5c05 3d1d6d66     ..4<?.\=.\.>fm.=
   1ded0:	3e79e4e8 bd0c0609 3d9025fc 3df1dad8     ..y>.....%.=...=
   1dee0:	3e187ebb 3ce179a7 3d316568 be0f1680     .~.>.y.<he1=....
   1def0:	3c792aa6 3df56a4f be838e2d bd861aef     .*y<Oj.=-.......
   1df00:	bcd398d7 3dfb99dc 3ed02de8 be239993     .......=.-.>..#.
   1df10:	3e84dd36 3e0a0f41 bcd54b90 3dac40d3     6..>A..>.K...@.=
   1df20:	3c95088e be6f5bcc 3e897b02 be552a6f     ...<.[o..{.>o*U.
   1df30:	bdcd5764 3da8a28d bd421faa be5c2212     dW.....=..B.."\.
   1df40:	bd43fa9a bd8193e0 bd7478a6 bed48d78     ..C......xt.x...
   1df50:	bf32c77e bf06c001 bd7fadd8 bea7c7d2     ~.2.............
   1df60:	beffc5be 3c03f51e bf07ae96 be60f643     .......<....C.`.
   1df70:	be8c7e1c bd5105d4 3e8c9021 be85cb13     .~....Q.!..>....
   1df80:	bf05b4df 3ba779c3 3c395460 3d919a12     .....y.;`T9<...=
   1df90:	3d8d53e2 bb5b49e8 be95cc28 bcd77900     .S.=.I[.(....y..
   1dfa0:	3c807e2a be155fc9 3d4c7e4f bc586d4a     *~.<._..O~L=JmX.
   1dfb0:	be17a26d be11641c 3e7df205 3bb4160f     m....d....}>...;
   1dfc0:	3d883698 bec09187 3ccdbb3a bea85d89     .6.=....:..<.]..
   1dfd0:	3de2db67 bd5fe3d0 be0ead2b be241e4c     g..=.._.+...L.$.
   1dfe0:	be8f6fe7 3cb5a30a bd8bf3fe 3dc2fb42     .o.....<....B..=
   1dff0:	bd30307b be49bfbd 3e1492b6 bd3d1597     {00...I....>..=.
   1e000:	bd8b58fa be895d88 be64808d be6cb33b     .X...]....d.;.l.
   1e010:	bbdad487 be643192 bdf4858a bda4899e     .....1d.........
   1e020:	be5dd75e be4573bf 3c52a577 bda74a3a     ^.]..sE.w.R<:J..
   1e030:	bc3efb37 bd8e9c24 bc91541e bd45af48     7.>.$....T..H.E.
   1e040:	3d1e8c25 bd921af2 3e3ab77b be98e90c     %..=....{.:>....
   1e050:	3db17470 be59a943 3d18e3e1 be9081c3     pt.=C.Y....=....
   1e060:	be080c53 bda55906 3ca27109 3da6307c     S....Y...q.<|0.=
   1e070:	3bab3ad7 bd68f900 be192a79 bdb1836d     .:.;..h.y*..m...
   1e080:	bd15c320 bd956e70 bd5324da beb6886c      ...pn...$S.l...
   1e090:	3d5f6514 be41d580 3e3731af bd1cada3     .e_=..A..17>....
   1e0a0:	be0bfa2f be2e59ed 3e5b9d6a bd8fde37     /....Y..j.[>7...
   1e0b0:	3db09b39 bd03c0af 3e04c385 bc384f0f     9..=.......>.O8.
   1e0c0:	be06b30f be2b2064 3e1db081 be8c0857     ....d +....>W...
   1e0d0:	3de7bc62 3d4edf45 3d297da0 bdc4d487     b..=E.N=.})=....
   1e0e0:	bd54a7b2 3d8ffa87 3e34054b 3da95aef     ..T....=K.4>.Z.=
   1e0f0:	bdc9d2d5 bd16bd66 3e08cf54 3cf48a54     ....f...T..>T..<
   1e100:	3e31cdc6 bc7c6df6 bd101e7e be1d4630     ..1>.m|.~...0F..
   1e110:	bc9c655d be4dbeea bc91c076 3d33846d     ]e....M.v...m.3=
   1e120:	be1ac563 3daaa048 3e27552c 3d9441ee     c...H..=,U'>.A.=
   1e130:	3ca22b3a be15a014 3bdb7533 bd5d0ee2     :+.<....3u.;..].
   1e140:	3cc3948d bec38e76 be05d026 bdc37cb3     ...<v...&....|..
   1e150:	3da3bd95 bcc70798 bd77c0bb 3c80870b     ...=......w....<
   1e160:	bd88da3b 3e0353c3 be007de3 3c40f157     ;....S.>.}..W.@<
   1e170:	bd23f2d3 bdcf47cf bd0c3555 bd60413a     ..#..G..U5..:A`.
   1e180:	3e21c1b3 be797917 be0e9e4f be009181     ..!>.yy.O.......
   1e190:	bcbc5baf bcd0bce2 3d9dfea5 be93bd03     .[.........=....
   1e1a0:	bda9591e bdd0ea1f 3e0361c9 3e164ce8     .Y.......a.>.L.>
   1e1b0:	bb4183e5 bdd277d3 bc8d9e9e bc374175     ..A..w......uA7.
   1e1c0:	bd704061 bddeecbf bcee638c bde806c1     a@p......c......
   1e1d0:	3c4e1715 bdf0aaee bd021217 be67bfbb     ..N<..........g.
   1e1e0:	be44cb35 3da2af40 bc9de9c1 3e615184     5.D.@..=.....Qa>
   1e1f0:	3d7fadea 3c82135f bcf51c87 3ce8c45c     ...=_..<....\..<
   1e200:	bd68a3c1 be98bf2c 3bd2a1f7 3c244c70     ..h.,......;pL$<
   1e210:	bd8b19e2 be1795d0 be2b5ea4 be531155     .........^+.U.S.
   1e220:	be7cdc33 3e005fa3 3df25c41 bde8ab0d     3.|.._.>A\.=....
   1e230:	3d24f9dd 3e06077f 3d26d062 bdf93272     ..$=...>b.&=r2..
   1e240:	bdce7a80 be1c00a8 be333a28 bce6fcef     .z......(:3.....
   1e250:	3de4d469 be335d9a 3cd91fb1 bd5ce8a8     i..=.]3....<..\.
   1e260:	be9d5edb bcb8ac17 3d4d525a bc97003d     .^......ZRM==...
   1e270:	be53aa9a be188cc0 bd2893dd 3d976aa5     ..S.......(..j.=
   1e280:	bd5509e1 beaadbea bda00db1 be0cb733     ..U.........3...
   1e290:	3de57cf3 be9c059e be0e7b52 be0b507d     .|.=....R{..}P..
   1e2a0:	be1a998a 3cde9070 bc7f9873 3e1b72f2     ....p..<s....r.>
   1e2b0:	bd727164 be7cdbd5 bcc6b4b0 bc430a80     dqr...|.......C.
   1e2c0:	3da83e7c bedad99a be219de6 be30365e     |>.=......!.^60.
   1e2d0:	3e3814c5 3da3a1d1 be3ddd22 bd9971d6     ..8>...=".=..q..
   1e2e0:	3e8dabe8 3a386802 bdc64f4c 3e38b332     ...>.h8:LO..2.8>
   1e2f0:	be230d29 bdd83984 3daf9382 3c98bb5b     ).#..9.....=[..<
   1e300:	3da79733 be969225 be791f51 be0b7824     3..=%...Q.y.$x..
   1e310:	be78852b 3f40d1f7 3e9ad5a2 be63ff9b     +.x...@?...>..c.
   1e320:	be08cb0c 3d998ab8 3d25b9d1 bd3191d0     .......=..%=..1.
   1e330:	3d88063d 3ded6547 bed2c4aa bec46cd9     =..=Ge.=.....l..
   1e340:	3dc2eea1 3e62bc56 be417d76 3d566035     ...=V.b>v}A.5`V=
   1e350:	be1d506c 3d84f4cf 3e4e1d61 be36cdea     lP.....=a.N>..6.
   1e360:	3c77c2c4 bd146aa1 3dcb01f2 3e0de673     ..w<.j.....=s..>
   1e370:	bd4d54f7 3df00b1b 3e4c6bd8 bebfd905     .TM....=.kL>....
   1e380:	3e0a5a29 3daa1554 beadd06a 3d7ea9b5     )Z.>T..=j.....~=
   1e390:	bda29b5b 3e1eeb66 3db3fadf bdebb901     [...f..>...=....
   1e3a0:	3d7b60ed bcabc3dd 3da7f99c 3dd7057c     .`{=.......=|..=
   1e3b0:	beb762f3 3d7b899d 3c20252e be3de4db     .b....{=.% <..=.
   1e3c0:	3d3dee0e 3cdcd39c be384d00 bd1e3cd6     ..==...<.M8..<..
   1e3d0:	3e14418b 3e216b56 beb40bfc be24ee8c     .A.>Vk!>......$.
   1e3e0:	3e48f692 3c4ea401 3d0bf386 3e1d84de     ..H>..N<...=...>
   1e3f0:	bf00a9e1 3da703a5 bd32f42b bd30ed7b     .......=+.2.{.0.
   1e400:	be2ab6d7 bdaaa7a4 3e59a876 bd3f2b63     ..*.....v.Y>c+?.
   1e410:	3c8db16a 3e90f71c bdb2a8ad be80e25e     j..<...>....^...
   1e420:	bd673bb1 bc8858aa be6693ce 3d85e43d     .;g..X....f.=..=
   1e430:	bed87dfc bceb8d73 be6c65f7 3d51d4c5     .}..s....el...Q=
   1e440:	be4b0d62 bd1fc3b0 3d699887 bcd2804d     b.K.......i=M...
   1e450:	3e380c9c 3e818b89 3dea7955 bdc8f2d0     ..8>...>Uy.=....
   1e460:	3da99cb4 bd83057f 3bb07705 3d4cbd62     ...=.....w.;b.L=
   1e470:	bdc94449 3db93fdc bee3c556 3d26615e     ID...?.=V...^a&=
   1e480:	bc120e31 3b93e82b be1015c0 bdd46bdb     1...+..;.....k..
   1e490:	3d97f7a7 3e08a061 3e658a54 be1dcc58     ...=a..>T.e>X...
   1e4a0:	3c634433 bdf61469 3dd462ff 3d8b2b05     3Dc<i....b.=.+.=
   1e4b0:	be132c22 3d0f0c52 bdc79648 3dab354d     ",..R..=H...M5.=
   1e4c0:	3debbe20 bd86f064 bda571cb 3c952ad5      ..=d....q...*.<
   1e4d0:	3e06aa57 3e3c145e 3e11f8cb 3d6d3434     W..>^.<>...>44m=
   1e4e0:	3c0b66a4 bb9d5b52 bd90847a 3e4ac811     .f.<R[..z.....J>
   1e4f0:	bd8af975 bd226583 bd155d64 bc5e2291     u....e".d]..."^.
   1e500:	3d1209bd 3ceb19fe bd2e78a3 3c7ff362     ...=...<.x..b..<
   1e510:	3e035e05 3db79e6c 3e4d03b1 bdfd7266     .^.>l..=..M>fr..
   1e520:	3d1112c5 3cab3999 bd5af5c8 3c988433     ...=.9.<..Z.3..<
   1e530:	3d99d60a bbb5cb4f 3e413900 bc2720dc     ...=O....9A>. '.
   1e540:	3dbbdb34 3d263c33 3d2b993a 3d7631a4     4..=3<&=:.+=.1v=
   1e550:	3d917950 3dc35080 3e393d5c bced7bc9     Py.=.P.=\=9>.{..
   1e560:	3d88bbf2 be5eb276 bdb9800c 3d129110     ...=v.^........=
   1e570:	3d47fbca bdc443c4 bd8236d3 bdda9603     ..G=.C...6......
   1e580:	3dbf46ac 3d266b26 be0fa102 3e420968     .F.=&k&=....h.B>
   1e590:	3e5df732 3deca5ad 3eb18a97 bdee0ec7     2.]>...=...>....
   1e5a0:	3df02d12 beae0205 3ce32c63 3e47861c     .-.=....c,.<..G>
   1e5b0:	3e46a6e5 bd8c886b 3e28846b be79c4ad     ..F>k...k.(>..y.
   1e5c0:	bcfc4677 3e282740 bde0302c 3cd8b6e5     wF..@'(>,0.....<
   1e5d0:	3e90ac68 be1c7514 be9ec90d be4fec4b     h..>.u......K.O.
   1e5e0:	3dcb781b bed3ebf6 bdedab38 3df41a86     .x.=....8......=
   1e5f0:	3cd23f43 bec391bf 3d6a1976 be3529d9     C?.<....v.j=.)5.
   1e600:	bae7833b bf2ecd6e 3e255fec 3d9f01b6     ;...n...._%>...=
   1e610:	3e376ed6 be498209 bf676531 befcf71a     .n7>..I.1eg.....
   1e620:	bc7a80a9 bea07e09 bd381c62 3d9e50ce     ..z..~..b.8..P.=
   1e630:	be474b69 be8f6d53 bea417ee 3c527542     iKG.Sm......BuR<
   1e640:	be1a67e5 bf53b734 bdb3dfc7 be00606a     .g..4.S.....j`..
   1e650:	3dc0d932 3b9c8315 be9a9479 bef10bac     2..=...;y.......
   1e660:	be11d813 beb32625 3dc7ce13 3e17b63a     ....%&.....=:..>
   1e670:	3d6fd8b7 bee2c11f be26215a 3e390bbd     ..o=....Z!&...9>
   1e680:	3d87b2f3 bef01747 3dd8b909 3e81613c     ...=G......=<a.>
   1e690:	bdbae521 3e0c8026 bd9a3e95 be31c145     !...&..>.>..E.1.
   1e6a0:	bd14a03d bd325802 3cffc759 3ee20515     =....X2.Y..<...>
   1e6b0:	be0f1d86 bebc40a0 3e445e68 3dfb1f99     .....@..h^D>...=
   1e6c0:	be210efe be67f413 bce18239 3ddb0df4     ..!...g.9......=
   1e6d0:	be9805d6 be4396d5 be048b0d bd9b1bdb     ......C.........
   1e6e0:	be86b8a7 3e48a793 be7083ff 3eb69281     ......H>..p....>
   1e6f0:	be2dde00 bed1eacb 3d895f26 bc9478a9     ..-.....&_.=.x..
   1e700:	bcc0e446 be7f7af8 bdda6c7f 3d7a26f0     F....z...l...&z=
   1e710:	be68e1c8 bd2278f9 be7ee1c6 bda1a748     ..h..x"...~.H...
   1e720:	bc63dc79 3e25333b be8a5de9 be426a68     y.c.;3%>.]..hjB.
   1e730:	bd2415b6 beecab8a 3df00d57 bdd00eea     ..$.....W..=....
   1e740:	bdd4e66e be843cc1 be0fc7fe bd3b6ee0     n....<.......n;.
   1e750:	be755bb5 be70b257 3c45b99a bcd2e1c0     .[u.W.p...E<....
   1e760:	bdbcc371 3d0b3ac1 bcd4920d bd147290     q....:.=.....r..
   1e770:	3c790f19 bec9b08d 3de08bec bd92eb61     ..y<.......=a...
   1e780:	bdf190cc bd9238c4 bc33a089 bd4de54e     .....8....3.N.M.
   1e790:	bd83d27a 3dd09a61 bd94ca33 3db31a8c     z...a..=3......=
   1e7a0:	3e51064e 3db37ad5 be011d6a 3ec4c03a     N.Q>.z.=j...:..>
   1e7b0:	bdeef7e6 be1f8ee2 3e96fdc2 be62e16c     ...........>l.b.
   1e7c0:	be13d8ff bd81b6bd 3b4adcd8 3acbe2e5     ..........J;...:
   1e7d0:	bdc34c49 3da138fb bca75e96 3d23decb     IL...8.=.^....#=
   1e7e0:	3e8f0d0f 3e04549b bd781b7d 3e2a2f06     ...>.T.>}.x../*>
   1e7f0:	bece9a3e bea7a0a2 3e5e1f58 3cc5e423     >.......X.^>#..<
   1e800:	be1fc425 3b56809a 3e17b969 3df1d64d     %.....V;i..>M..=
   1e810:	be4a63f3 3dcda02b be28c314 3e057161     .cJ.+..=..(.aq.>
   1e820:	3d07b86a 3e2bf955 bd0f8639 3e61d538     j..=U.+>9...8.a>
   1e830:	bea624db be2cde20 3dc83f15 3d459b9e     .$.. .,..?.=..E=
   1e840:	be2209ed be332c2a bd548a37 ba840c48     ..".*,3.7.T.H...
   1e850:	be12232f 3e487cc4 be95d582 3c06da79     /#...|H>....y..<
   1e860:	3d33f12d bd776055 be05611d 3e8dcb81     -.3=U`w..a.....>
   1e870:	be010806 bd51c795 bd9972f0 3dc6b206     ......Q..r.....=
   1e880:	3dca0ffb 3b7e738e bd6734fd bcdd3270     ...=.s~;.4g.p2..
   1e890:	beea992d bd6473c2 be0f9400 bdba7a75     -....sd.....uz..
   1e8a0:	3d2ac485 3d308876 bd9d7253 3e815730     ..*=v.0=Sr..0W.>
   1e8b0:	bd95966e 3d38353c bb6f989b 3d2778f0     n...<58=..o..x'=
   1e8c0:	3d13a7dc 3e01266d 3c0d560c 3d267334     ...=m&.>.V.<4s&=
   1e8d0:	bee5d19c bd803d3a bdf83e12 bd8215af     ....:=...>......
   1e8e0:	be492050 3e3e4569 be2df1aa be5a9846     P I.iE>>..-.F.Z.
   1e8f0:	beb8093a be6ba710 3e712af4 bd1ade34     :.....k..*q>4...
   1e900:	3dc52514 bd0e10ac 3e6cd6dd 3d6d104a     .%.=......l>J.m=
   1e910:	be45028a 3d820079 3e6d2da0 bdaa3bcf     ..E.y..=.-m>.;..
   1e920:	3d3bbc62 3e85841d be497574 be813d72     b.;=...>tuI.r=..
   1e930:	be13b1d5 be956e15 3e95246f 3e22c307     .....n..o$.>..">
   1e940:	bd1c2771 be5556f8 be504b4d bd61364e     q'...VU.MKP.N6a.
   1e950:	bf0821b4 bce17918 3e580e05 bdffa3af     .!...y....X>....
   1e960:	bd784e20 bcfe7ace be02ca8d beb8260c      Nx..z.......&..
   1e970:	beab0064 be2b25d2 bd4e461f bda01230     d....%+..FN.0...
   1e980:	3e29aeea be8fe07f 3d2b189e be14a8e2     ..)>......+=....
   1e990:	3c17e323 3e21c3ee 3dcedf43 bbd21c12     #..<..!>C..=....
   1e9a0:	3dcad57f 3df15c3c 3d447195 bebaf393     ...=<\.=.qD=....
   1e9b0:	be5c9368 bef16710 3d18152a 3b82e273     h.\..g..*..=s..;
   1e9c0:	3dbc91d6 beb9cb52 3cd74acb bea3726c     ...=R....J.<lr..
   1e9d0:	bcedb6f7 3a784bf2 be923b22 3e90d993     .....Kx:";.....>
   1e9e0:	be154745 bc29b515 bde30012 bea7b2fb     EG....).........
   1e9f0:	be9b1988 be294718 bbece865 be5e95d7     .....G).e.....^.
   1ea00:	bdaef044 be63b25e bdda8c8f 3cceec21     D...^.c.....!..<
   1ea10:	bdc9ec61 beaebcc4 bea77755 be436f5b     a.......Uw..[oC.
   1ea20:	3d727c09 be9d9c07 3c503fa3 be0ca91c     .|r=.....?P<....
   1ea30:	bd3b2d67 3d10edc4 bed4a250 be0c2947     g-;....=P...G)..
   1ea40:	3d12919d b867dd88 be2f0738 bc37061a     ...=..g.8./...7.
   1ea50:	bea39862 3e81cc98 bdd6976e bddd8b95     b......>n.......
   1ea60:	3cf3a479 be11c2b5 be66ecd3 bc8056a3     y..<......f..V..
   1ea70:	3c630001 3b878956 be3959e2 3dfb6d4d     ..c<V..;.Y9.Mm.=
   1ea80:	3dcc39a0 bd8e4569 3dd6845f 3dbd84a1     .9.=iE.._..=...=
   1ea90:	be380710 3e10fa9e be29a7b7 bd6a8897     ..8....>..)...j.
   1eaa0:	bc4944be be52af6d bd60471b 3e094d2d     .DI.m.R..G`.-M.>
   1eab0:	3d4d9baf 3b8d610e 3e43f079 3e6ee4f1     ..M=.a.;y.C>..n>
   1eac0:	3db48230 be1f9ab1 3de76df0 3d7203a4     0..=.....m.=..r=
   1ead0:	3ba52bf6 3dd91cd0 beaa2246 bd5408d3     .+.;...=F"....T.
   1eae0:	bac2b1cd bdb6f207 3c7375fe bd0a9be4     .........us<....
   1eaf0:	bd9e90c7 3ca7eaf1 3e5226c8 3ec727fc     .......<.&R>.'.>
   1eb00:	3da96f97 be24cb7f bdb8067d 3d5e40a3     .o.=..$.}....@^=
   1eb10:	be2b4727 3e8d6144 be8c2604 bdfa595c     'G+.Da.>.&..\Y..
   1eb20:	bda6f0cf 3d9cddc6 be70e844 be3114da     .......=D.p...1.
   1eb30:	bdd2db38 3d19a750 3e3b2df0 3ee79cfd     8...P..=.-;>...>
   1eb40:	3dbb62b3 3c95e4e6 3e1026a4 3d4d96f6     .b.=...<.&.>..M=
   1eb50:	bd3493d8 bd819d87 bd85b44f be55b67a     ..4.....O...z.U.
   1eb60:	3d84fdbd 3e15a253 be931e10 bdc5ab4e     ...=S..>....N...
   1eb70:	3ddfd955 3d6df4ca 3e84fedb 3e369895     U..=..m=...>..6>
   1eb80:	3cfd3e93 bd047061 3ce47246 be580ea9     .>.<ap..Fr.<..X.
   1eb90:	3d3386e5 be03462d bdf0dc94 be2748aa     ..3=-F.......H'.
   1eba0:	bd63b034 bbb71f56 bddececd 3d4db0c7     4.c.V.........M=
   1ebb0:	3e011165 3d8aabf5 be10e134 bdff0649     e..>...=4...I...
   1ebc0:	be69e4b6 bd7848c8 3d2b631a be35737f     ..i..Hx..c+=.s5.
   1ebd0:	bdf5011e be6bad89 3d09856a bdf66974     ......k.j..=ti..
   1ebe0:	bec93962 3d8e0072 be9ca5fc bd954e53     b9..r..=....SN..
   1ebf0:	bbae7dc7 bab961a7 bece9ab8 bed2cc80     .}...a..........
   1ec00:	be5cebcf bd0ea469 be1ea912 be506dc9     ..\.i........mP.
   1ec10:	bde6d5fc bed05c9f bdbbcf33 bea56670     .....\..3...pf..
   1ec20:	befa926b 3d4ba027 be75265d be8c6346     k...'.K=]&u.Fc..
   1ec30:	bdaf6557 3d1cd8ea bec24fcd bf0bf087     We.....=.O......
   1ec40:	bed9df25 3d4e6a5d bdf106aa be60e231     %...]jN=....1.`.
   1ec50:	bcf26f72 be9e4ab9 bdd7b0fb be96fa9f     ro...J..........
   1ec60:	bf1314c8 bc396aaa bd5a247f 3da93612     .....j9..$Z..6.=
   1ec70:	3d60869e 3c8533bc bef2724c beba9f39     ..`=.3.<Lr..9...
   1ec80:	be68a5c2 3ca10635 3d53adb5 bda2d03e     ..h.5..<..S=>...
   1ec90:	3caa9bfd 3ea88f0a bd09ca24 be4c2c14     ...<...>$....,L.
   1eca0:	bdae1b56 bc60459d be5f16b7 3e8d8f57     V....E`..._.W..>
   1ecb0:	bd50ab5d 3cb011cc bed12152 bcb2fffb     ].P....<R!......
   1ecc0:	be14d19b bd7e2cfc b9fb9439 bdca93ca     .....,~.9.......
   1ecd0:	bdfca70a 3e7fd3f6 be0bdad3 bd99f98e     .......>........
   1ece0:	bd73e4c5 bdae7dba 3d240e5b 3d9046cf     ..s..}..[.$=.F.=
   1ecf0:	bc888042 3ca04493 bb532c02 3edf0db3     B....D.<.,S....>
   1ed00:	3cc846f3 bda484c5 3bad13f8 3cb5416d     .F.<.......;mA.<
   1ed10:	be5f74eb 3ed08267 bd9cd03c 3e4897a0     .t_.g..><.....H>
   1ed20:	be360a1f bd4a51f6 be20e54f bd0d8ea1     ..6..QJ.O. .....
   1ed30:	bd9c1370 bbb143e8 3ea459c3 3e10d606     p....C...Y.>...>
   1ed40:	3e888e8e bde1a8e8 be6b6eb3 be7f9628     ...>.....nk.(...
   1ed50:	beabccde bea6c9b0 3dc57560 3dea3639     ........`u.=96.=
   1ed60:	beea4353 3d9e9db0 be7c0106 be5149b8     SC.....=..|..IQ.
   1ed70:	3ce8ad7c 3cc64ee2 be561f9f 3d79d75a     |..<.N.<..V.Z.y=
   1ed80:	be817362 3cd1c1e6 3f181c4e 3ea4e72a     bs.....<N..?*..>
   1ed90:	3e2480f6 3f00f706 be918e34 3cf39f17     ..$>...?4......<
   1eda0:	3f1569c5 3dabd818 3d55d298 3edb5ff1     .i.?...=..U=._.>
   1edb0:	bf054821 bd6544f7 3ef627bd 3eaa584e     !H...De..'.>NX.>
   1edc0:	3bd5871f bda86f4e bed0081f 3d76d506     ...;No........v=
   1edd0:	3e48f815 bf0ee038 bdaf5caa bebde2fd     ..H>8....\......
   1ede0:	bf2f5b54 3dd9e637 be896dd4 3cc4a0e4     T[/.7..=.m.....<
   1edf0:	bee23776 3c98f0d2 3ecc7ae7 bf113faa     v7.....<.z.>.?..
   1ee00:	bf3e4a86 3be5a4ae be319862 3d804eff     .J>....;b.1..N.=
   1ee10:	bdbae779 beca5b93 3d97973c bf2d41f1     y....[..<..=.A-.
   1ee20:	bf4ba4c9 3dde2a9e be844ead 3b5c2f01     ..K..*.=.N.../\;
   1ee30:	be451cab 3c2b4132 3e505373 bf06c4e2     ..E.2A+<sSP>....
   1ee40:	bf13ef62 3c863d6e bdee9a6d 3da8bc49     b...n=.<m...I..=
   1ee50:	3e11fe68 befa38de bc8106bc bec385b7     h..>.8..........
   1ee60:	bf244f26 bbbb94e8 be9b0e16 be52e8ca     &O$...........R.
   1ee70:	bd53b7a2 3b52ef04 bd1ead08 bf01ba72     ..S...R;....r...
   1ee80:	be8749d7 3cf27bf3 3d848efc 3d3acccf     .I...{.<...=..:=
   1ee90:	bce4e035 3d058888 3dab2f8d be494f33     5......=./.=3OI.
   1eea0:	befc68c6 bb2f90fc bdc13820 bd275319     .h..../. 8...S'.
   1eeb0:	be09eea2 3d6b6f5e 3d0df91e beddd576     ....^ok=...=v...
   1eec0:	beaca8e3 3d0dadaa bdce6291 bcbb5283     .......=.b...R..
   1eed0:	3e184efd bd8f7398 39551f55 be6785b9     .N.>.s..U.U9..g.
   1eee0:	bed3cf1a bd140897 be11f1ca be394b8b     .............K9.
   1eef0:	bcd8e0e8 bc26f40a bd20da0d beb1e752     ......&... .R...
   1ef00:	bed369fc 3cc8106f be20b5b8 3d72d6cd     .i..o..<.. ...r=
   1ef10:	bdca1bb4 bdfba71c bd910cf4 bcdaec95     ................
   1ef20:	be2bff00 bd454b17 be850c45 bd883897     ..+..KE.E....8..
   1ef30:	be0afb76 3cdfb5e3 3dd52c80 beb5b8c7     v......<.,.=....
   1ef40:	beba5d94 3cba731e be2581e6 3d493dff     .]...s.<..%..=I=
   1ef50:	3e7d10c1 be554f62 be2f293e be6c318c     ..}>bOU.>)/..1l.
   1ef60:	bedf0fb3 bcb28763 be3f8af0 3c92e624     ....c.....?.$..<
   1ef70:	bda720b3 3bb4a689 3dfce773 bebc9de7     . .....;s..=....
   1ef80:	be971909 3d78fc7c be237bae 3d3a86e5     ....|.x=.{#...:=
   1ef90:	bd875607 be87908e be4e20c4 bc380e22     .V....... N.".8.
   1efa0:	beae44e7 3d1ad5a8 be934e93 bc2fb900     .D.....=.N..../.
   1efb0:	beb5cf30 bb8b54fb 3e00d065 beda24d5     0....T..e..>.$..
   1efc0:	bed8c4cf 3cb99334 be8a9702 3d22d48f     ....4..<......"=
   1efd0:	bea8fc9a bd5c293c 3cf508ab be421e45     ....<)\....<E.B.
   1efe0:	bec96ec4 3cceb00a be94f97c be1feb09     .n.....<|.......
   1eff0:	be9e6a82 3c9e1f29 3d0d1900 be775447     .j..)..<...=GTw.
   1f000:	bf446831 3d144c0a 3de090dd 3d8ec2d4     1hD..L.=...=...=
   1f010:	bea7fb64 be633576 be18e6df bf085082     d...v5c......P..
   1f020:	bf1b97d5 bcce8d28 beaaa009 bdce7fbc     ....(...........
   1f030:	be7a93ae 3bec9f6c 3d897cf2 be9b8ea7     ..z.l..;.|.=....
   1f040:	bf017e7d 3d7eae0d bd09e0fc 3d5a70f4     }~....~=.....pZ=
   1f050:	bdf933d3 bebbf8c5 be8dc6d5 be5eb1c9     .3............^.
   1f060:	bed66e93 3cca9aae be629d59 be626f95     .n.....<Y.b..ob.
   1f070:	beac20a8 3cb0b240 3dedf408 be423c39     . ..@..<...=9<B.
   1f080:	bee31c31 3c0e1a1a 3be97959 be1022a2     1......<Yy.;."..
   1f090:	3da5aa30 bf068f71 bea02416 bec9b267     0..=q....$..g...
   1f0a0:	bf0f7b52 3d4fe9f9 be1749ac bd6848ae     R{....O=.I...Hh.
   1f0b0:	beb6007b 3c68b6eb 3de9c1c9 bec32ded     {.....h<...=.-..
   1f0c0:	bf4162a0 3d250962 be56069b 3e178b9f     .bA.b.%=..V....>
   1f0d0:	3c3ce734 3e17bb8a 3c15e99d bf046524     4.<<...>...<$e..
   1f0e0:	be0c1f3e 3c8333d7 bca055c7 bdbfc6b4     >....3.<.U......
   1f0f0:	bdfbb15a 3d0b9e64 3e5fbc1a 3dc8783b     Z...d..=.._>;x.=
   1f100:	bdd61060 3d7de42d be9b409d bcd10ceb     `...-.}=.@......
   1f110:	be2e0058 3eff75b9 3eab204d bded6026     X....u.>M .>&`..
   1f120:	beddb9c3 3ea8dab5 3da26833 3ca9d043     .......>3h.=C..<
   1f130:	3b8b7ff1 3ebf6b3f be34696c bef35879     ...;?k.>li4.yX..
   1f140:	bddb2ef1 3e984862 bd756d59 3c5a2c37     ....bH.>Ymu.7,Z<
   1f150:	bd30e713 3cfcaca1 3e2ad8b2 bdb64b22     ..0....<..*>"K..
   1f160:	be81a3d1 bd159173 3d76fae7 3cdbf160     ....s.....v=`..<
   1f170:	3cc2cf07 3c8aaa7d 3eb113a2 bea390fa     ...<}..<...>....
   1f180:	3e1f3783 3db0e8d3 be6849da 3e6b3c9d     .7.>...=.Ih..<k>
   1f190:	bc1d5abc 3d2502c9 3e15169e be1740b5     .Z....%=...>.@..
   1f1a0:	3e1a1719 bd8c9517 bd0a42e5 3dc96f61     ...>.....B..ao.=
   1f1b0:	be583c16 be7a1519 3ea2b12a bd5ca252     .<X...z.*..>R.\.
   1f1c0:	3e115f92 bd2c1fb5 be20f8a5 3dc9750b     ._.>..,... ..u.=
   1f1d0:	3e82001e 3d61a1fe 3e413fd5 3dcb6509     ...>..a=.?A>.e.=
   1f1e0:	3c1e75c5 be760fbb 3da0b6bf 3dae04df     .u.<..v....=...=
   1f1f0:	bf06da9b be848c38 3e0c5c92 bdfc67b8     ....8....\.>.g..
   1f200:	bd95ecb7 be155013 bd8db175 3e1e710a     .....P..u....q.>
   1f210:	3df8797d 3d779740 be9de73b 3caa88b2     }y.=@.w=;......<
   1f220:	3d441679 be02dcb9 bca3cbe1 bbffda29     y.D=........)...
   1f230:	beb84ab2 befb15d9 bd430bf4 bd17c03e     .J........C.>...
   1f240:	bcaea304 bedfffd0 3e0fcb72 3dff7903     ........r..>.y.=
   1f250:	3e406591 bdbb77b6 bf158fa5 be1e6130     .e@>.w......0a..
   1f260:	3dc2a98b be06df6e 3ddf891e 3cf28f8a     ...=n......=...<
   1f270:	bc43cdfd bea24c9c be19b430 3d4594b3     ..C..L..0.....E=
   1f280:	bdc1af6c bf1246d4 3e5bdebb 3db0b430     l....F....[>0..=
   1f290:	3d842ece bdce763e be935a82 3dc8202d     ...=>v...Z..- .=
   1f2a0:	bd074100 be365ab1 bcce9e40 3e0a6a04     .A...Z6.@....j.>
   1f2b0:	be05c61d bd22b848 be9549f7 bdcabdfb     ....H."..I......
   1f2c0:	be313425 bf0fe3c3 3d32b1cf 3d860d73     %41.......2=s..=
   1f2d0:	bccfbb05 bd8dd54a bf0d6eb3 be2fec64     ....J....n..d./.
   1f2e0:	be15f852 3d80a2d3 bd6a9fac bdf9c75e     R......=..j.^...
   1f2f0:	bd8190c8 3d499de7 be064ad4 3d000443     ......I=.J..C..=
   1f300:	bec2a527 befa6890 3e1cb1e9 bd94406c     '....h.....>l@..
   1f310:	3c39e3ee bdd7d940 be4619e8 beaa0472     ..9<@.....F.r...
   1f320:	bdd3d880 be048ee6 bcf8ea80 3e5117a2     ..............Q>
   1f330:	3d592bd9 bb758f0c bd8253dd 3d50c306     .+Y=..u..S....P=
   1f340:	be5435f2 beeaf5ce bc613122 be4b0f03     .5T....."1a...K.
   1f350:	3d1e661a be226bb2 bee096d7 beb36f08     .f.=.k"......o..
   1f360:	bdf90430 be2357ea bd8b3f79 3d62a2ea     0....W#.y?....b=
   1f370:	3cfb5bdc 3d175191 be588de7 bd4f9aab     .[.<.Q.=..X...O.
   1f380:	beadab7c bf0666a8 3c9efbbf bd1ef148     |....f.....<H...
   1f390:	3c94afad be81dcf7 beda56aa be1aca41     ...<.....V..A...
   1f3a0:	beab06af bda3b79e 3db67908 bd043119     .........y.=.1..
   1f3b0:	bcedb590 3c8af75d be378616 3dcd12a6     ....]..<..7....=
   1f3c0:	be429482 bead01d7 3db4ecd1 3c2df643     ..B........=C.-<
   1f3d0:	3dcc80eb be851465 bedbc683 be8bd0f4     ...=e...........
   1f3e0:	bcfd0197 be9edc99 3e09c5f9 3dc01a12     ...........>...=
   1f3f0:	3e2c7d95 bd881640 be3b85d0 3d51efea     .},>@.....;...Q=
   1f400:	be5bb363 bec54950 3e2ca6c3 3b47643e     c.[.PI....,>>dG;
   1f410:	3d22e2fd be52f21e bed68f9d be0ef839     .."=..R.....9...
   1f420:	bd726760 be0a6005 3c8f1943 3e3de184     `gr..`..C..<..=>
   1f430:	3d248b7d bd3ef517 bde3f2ab 3d9cc28c     }.$=..>........=
   1f440:	bd2155f6 be8a7764 bb975eca 3e085257     .U!.dw...^..WR.>
   1f450:	3dd1b282 bd0b537c 3c9e789b bda5e2e5     ...=|S...x.<....
   1f460:	bdbe311a bd8a5937 3e5e48b5 3de2d36f     .1..7Y...H^>o..=
   1f470:	bd26747f be8cfe8d be75bc35 3d07a9df     .t&.....5.u....=
   1f480:	3df4902c 3d9eb063 3e788438 3ed15ca4     ,..=c..=8.x>.\.>
   1f490:	bda89d0c 3e8e4f08 be96c112 bbee4c9a     .....O.>.....L..
   1f4a0:	3e9a69e2 bec71471 bce9aac8 3eae811a     .i.>q..........>
   1f4b0:	bf0b0f0d bf15409f 3e9fec99 3e4281fe     .....@.....>..B>
   1f4c0:	be42b074 be969325 3d3636ee 3da29fa5     t.B.%....66=...=
   1f4d0:	3e3e8e07 3d9f2a89 bd5883e5 be01f772     ..>>.*.=..X.r...
   1f4e0:	bc678b9c bdf7c128 bd865d3b bd342d8c     ..g.(...;]...-4.
   1f4f0:	bede8f6f bef2f38a 3eb9493b bd8363fb     o.......;I.>.c..
   1f500:	be932fda bea844d6 3bffec3d bd04d6b5     ./...D..=..;....
   1f510:	3d19c9e3 3d87db6c bc9ebc70 3e241676     ...=l..=p...v.$>
   1f520:	3d6eb663 be9a58b7 3e21d079 3b22e716     c.n=.X..y.!>..";
   1f530:	bd4a444c becc3478 3d8292fd bd9b223d     LDJ.x4.....=="..
   1f540:	bdcbba01 bcedacf0 3e095f92 bd976e76     ........._.>vn..
   1f550:	3d187d6e 3cf855ed 3e4aaa01 3e77f749     n}.=.U.<..J>I.w>
   1f560:	3dd4d2a9 bdac7a6b bd9067b1 bd94f530     ...=kz...g..0...
   1f570:	3dd7b9dd be042ec3 3da8c1fd be41f080     ...=.......=..A.
   1f580:	3c8e23ae bc058a03 3e263350 3dca04dd     .#.<....P3&>...=
   1f590:	be82d911 3e422bc9 3e7294bb 3ca58fdb     .....+B>..r>...<
   1f5a0:	3dd089de be86b624 be54a71b bdd12e48     ...=$.....T.H...
   1f5b0:	3e00475d 3da9d78c bd9b22c9 3de8a09c     ]G.>...=.".....=
   1f5c0:	bd1c7bc0 3dddd227 3da08e24 bc53f462     .{..'..=$..=b.S.
   1f5d0:	beba3816 3de36e7c 3e440d7b 3d8d3cae     .8..|n.={.D>.<.=
   1f5e0:	3d4f4e1b be4d7573 be449b98 be74e8d2     .NO=suM...D...t.
   1f5f0:	3e56d98f 3e4e2a74 3dd8b1da 3d85d738     ..V>t*N>...=8..=
   1f600:	3d3cbe09 3c6d2824 3d1fcdbb be3f77fb     ..<=$(m<...=.w?.
   1f610:	bcbede33 3cb3a15c 3d9dd16b 3e3b7bf1     3...\..<k..=.{;>
   1f620:	3d752c4c beb2ef70 bde017b5 bd658761     L,u=p.......a.e.
   1f630:	3e3e093a bbbf4948 3daa302f 3d077565     :.>>HI../0.=eu.=
   1f640:	3e1fc2bd bdf88ce9 3ce8977c bb51c79d     ...>....|..<..Q.
   1f650:	bd898d40 3c8727d5 bd65a192 bca67af7     @....'.<..e..z..
   1f660:	3cd67cec be1447f7 3c920dd5 bb01113a     .|.<.G.....<:...
   1f670:	3e033b9a be22dee0 bce4ad37 bb03b34e     .;.>..".7...N...
   1f680:	bdf6e83f bbf71087 bd9ac3e2 3e0b420e     ?............B.>
   1f690:	be9d2692 bc32e34f 3e030a26 3ca760f3     .&..O.2.&..>.`.<
   1f6a0:	3d05240c be94c83e be023150 bd69d4ff     .$.=>...P1....i.
   1f6b0:	3d72421d be7f8ce7 3d168733 bda22c93     .Br=....3..=.,..
   1f6c0:	bbe3f088 3d8496a8 3e40c0da 3d58688a     .......=..@>.hX=
   1f6d0:	be19b0ad bc264e97 3de6261c 3d556848     .....N&..&.=HhU=
   1f6e0:	3dc3e3c6 bbc8e6a7 bd9900f3 3cda632d     ...=........-c.<
   1f6f0:	3e81bdb4 be92b9df bdb23a48 3dd2cb9f     ...>....H:.....=
   1f700:	3c97380b bcb795e2 391382f6 3d1a98c0     .8.<.......9...=
   1f710:	3d51f4c2 3cf5eb0d 3d52da1d 3d77b0ad     ..Q=...<..R=..w=
   1f720:	3d5158ca 3cb02d5a bdeb8bf0 3e50d80d     .XQ=Z-.<......P>
   1f730:	be182565 befd18b0 bd3b02c4 3d827bfa     e%........;..{.=
   1f740:	be4da0ce bd32c60b 3dc06284 3d1e6e60     ..M...2..b.=`n.=
   1f750:	3e280131 3e047631 bd606b91 3e20f514     1.(>1v.>.k`... >
   1f760:	bd67385c 3dc22136 be7e1013 3e9fd119     \8g.6!.=..~....>
   1f770:	be161ad0 beafb534 3d166786 be580511     ....4....g.=..X.
   1f780:	3cd00dfb bd208890 3d9accdc 3e7a2911     ...<.. ....=.)z>
   1f790:	bebf4405 3e0a1a54 bdb46fff 3d86a4eb     .D..T..>.o.....=
   1f7a0:	3e00435e bcd94ffa bda27bad 3e01f60e     ^C.>.O...{.....>
   1f7b0:	bdb4f090 be9a21d0 3e144374 be0be84d     .....!..tC.>M...
   1f7c0:	bd932b80 3e353987 3db86390 3e832ccf     .+...95>.c.=.,.>
   1f7d0:	bf0be5bd 3c90f75f bc5261a0 bcac888f     ...._..<.aR.....
   1f7e0:	3dd3640c 3d8bd99c be39b780 3e95304e     .d.=...=..9.N0.>
   1f7f0:	beda3e73 3d845651 3d8528e6 be87e9b9     s>..QV.=.(.=....
   1f800:	bd6c0146 3dd5644b fffffd56 00000010     F.l.Kd.=V.......
   1f810:	00000005 00000010 00000030 00000001     ........0.......
   1f820:	00000008 0000001d 75716573 69746e65     ........sequenti
   1f830:	632f6c61 32766e6f 6f432f64 4432766e     al/conv2d/Conv2D
   1f840:	6169625f 00000073 fffffc68 00000020     _bias...h... ...
   1f850:	c03ee5e4 3f92e722 bfde0457 3e1c8fda     ..>."..?W......>
   1f860:	c005bf47 bfcbab53 bf6a6a68 bfe40bd2     G...S...hjj.....
   1f870:	fffffdbe 00000010 00000004 00000010     ................
   1f880:	00000030 00000001 00000010 0000001f     0...............
   1f890:	75716573 69746e65 632f6c61 32766e6f     sequential/conv2
   1f8a0:	2f315f64 766e6f43 625f4432 00736169     d_1/Conv2D_bias.
   1f8b0:	fffffcd0 00000040 3eb715a3 3f956729     ....@......>)g.?
   1f8c0:	be62964b 3efc5f61 bf3ed4a2 bf0d1c45     K.b.a_.>..>.E...
   1f8d0:	be70dd29 bf97759a be6f0afc 3f2556cc     ).p..u....o..V%?
   1f8e0:	bf98acdf bf8b1c0e 3f8cd8a5 3cd542a5     ...........?.B.<
   1f8f0:	bf7a8ea9 be71db9e fffffe46 00000010     ..z...q.F.......
   1f900:	00000003 00000010 00000030 00000001     ........0.......
   1f910:	00000004 0000001e 75716573 69746e65     ........sequenti
   1f920:	642f6c61 65736e65 4d2f315f 754d7461     al/dense_1/MatMu
   1f930:	69625f6c 00007361 fffffd58 00000010     l_bias..X.......
   1f940:	bfb699c3 3f8b87e9 bf9a83ac be3d494c     .......?....LI=.
   1f950:	fffffe9e 00000010 00000002 00000014     ................
   1f960:	00000048 00000002 00000004 00000010     H...............
   1f970:	00000032 75716573 69746e65 642f6c61     2...sequential/d
   1f980:	65736e65 4d2f315f 754d7461 65522f6c     ense_1/MatMul/Re
   1f990:	61566461 62616972 704f656c 6172742f     adVariableOp/tra
   1f9a0:	6f70736e 00006573 fffffdc8 00000100     nspose..........
   1f9b0:	be8a5c40 3eaa88c5 be1f76b0 3e583a35     @\.....>.v..5:X>
   1f9c0:	3ea3a584 3d49d938 bc786358 be2e9482     ...>8.I=Xcx.....
   1f9d0:	be6ede97 be9f27ea 3dc0241d 3c663121     ..n..'...$.=!1f<
   1f9e0:	be88f880 be1906dd beb34b3f 3e8ddc70     ........?K..p..>
   1f9f0:	be93ee20 bebf7cde be503ada 3e6e910e      ....|...:P...n>
   1fa00:	3e81bc18 b9fe9c18 be9b2d11 be3f73a2     ...>.....-...s?.
   1fa10:	bea36c0c be8c4b37 3da02691 3ebd04b3     .l..7K...&.=...>
   1fa20:	be703e01 be69dbd1 be98c0b4 3e80d9d4     .>p...i........>
   1fa30:	be74a962 be83e98a be54927a 3e435d92     b.t.....z.T..]C>
   1fa40:	3e7b35e3 3d2e81ee 3dec68bb be1b7270     .5{>...=.h.=pr..
   1fa50:	bea42064 bd8d1f4f 3df8d6ee 3eb083db     d ..O......=...>
   1fa60:	be8c99d1 be452199 be820497 3e88df25     .....!E.....%..>
   1fa70:	be5be6e2 3d6853e5 be40cd0b 3e55ea4e     ..[..Sh=..@.N.U>
   1fa80:	3e85d854 3d82ba3c 3ee9c058 be29cc0c     T..><..=X..>..).
   1fa90:	bea26e3a 3e124a84 3dcbd932 3ed416ad     :n...J.>2..=...>
   1faa0:	be85a8f5 bdc8345c beac0231 3e9e153e     ....\4..1...>..>
   1fab0:	000e0000 00040014 00080000 0010000c     ................
   1fac0:	0000000e 00000010 00000001 00000010     ................
   1fad0:	00000030 00000001 00000010 0000001c     0...............
   1fae0:	75716573 69746e65 642f6c61 65736e65     sequential/dense
   1faf0:	74614d2f 5f6c754d 73616962 00000000     /MatMul_bias....
   1fb00:	ffffff20 00000040 3f93a9a9 be21da3c      ...@......?<.!.
   1fb10:	3d3de333 bf33edd8 bf3e9d4c 3fa640ba     3.==..3.L.>..@.?
   1fb20:	be254e6e 3f935e6e bec5a248 3e33aa67     nN%.n^.?H...g.3>
   1fb30:	3f2066c0 be7e25b3 bed92f8a 3fc864da     .f ?.%~../...d.?
   1fb40:	bd89141a 3e8948ea 00000007 00000200     .....H.>........
   1fb50:	00000190 0000013c 000000d0 0000008c     ....<...........
   1fb60:	00000048 00000004 fffffe30 09000000     H.......0.......
   1fb70:	00000004 00000010 00000014 00000024     ............$...
   1fb80:	00000014 00000001 0000000b 00000001     ................
	...
   1fb98:	00060000 00040008 00000006 3f800000     ...............?
   1fba8:	fffffe70 08000000 00000002 00000010     p...............
   1fbb8:	0000001c 00000028 0000001c 00000003     ....(...........
   1fbc8:	0000000a 0000000c 0000000d 00000001     ................
   1fbd8:	0000000b 00000000 00040004 00000004     ................
   1fbe8:	fffffeb0 08000000 00000002 00000010     ................
   1fbf8:	0000001c 00000024 0000001c 00000003     ....$...........
   1fc08:	0000000f 00000008 00000009 00000001     ................
   1fc18:	0000000a 00000000 fffffe2e 01000000     ................
   1fc28:	fffffef0 05000000 00000003 00000010     ................
   1fc38:	00000014 0000002c 00000014 00000001     ....,...........
   1fc48:	00000007 00000001 0000000f 00000000     ................
   1fc58:	000e0000 00000014 00080004 0010000c     ................
   1fc68:	0000000e 00000001 00000003 00000001     ................
   1fc78:	00000003 00180014 00080000 0007000c     ................
   1fc88:	00000010 00140000 00000014 01000000     ................
   1fc98:	00000010 0000001c 00000030 0000001c     ........0.......
   1fca8:	00000003 0000000e 00000005 00000006     ................
   1fcb8:	00000001 00000007 00000000 0010000c     ................
   1fcc8:	00080000 0007000c 0000000c 01000000     ................
   1fcd8:	00000001 00000001 ffffffa8 05000000     ................
   1fce8:	00000003 00000010 00000014 0000002c     ............,...
   1fcf8:	00000014 00000001 00000004 00000001     ................
   1fd08:	0000000e 00000000 000e0000 00070018     ................
   1fd18:	000c0008 00140010 0000000e 01000000     ................
   1fd28:	00000003 00000003 00000003 00000003     ................
   1fd38:	001c0014 000c0008 00070010 00000014     ................
   1fd48:	00180000 00000014 02000000 00000001     ................
   1fd58:	00000010 0000001c 00000034 0000001c     ........4.......
   1fd68:	00000003 00000001 00000002 00000003     ................
   1fd78:	00000001 00000004 00000000 000e0000     ................
   1fd88:	00000014 000c0008 00070010 0000000e     ................
   1fd98:	01000000 00000001 00000001 00000008     ................
   1fda8:	00000005 00000034 00000048 00000014     ....4...H.......
   1fdb8:	00000020 00000004 ffffffce 19000000      ...............
   1fdc8:	ffffffd6 09000000 ffffffde 09000000     ................
   1fdd8:	ffffffe6 11000000 fffffffa 00060300     ................
   1fde8:	00050006 00000006 00061100 00070008     ................
   1fdf8:	00000006 04000000 67676f54 4c20656c     ........Toggle L
   1fe08:	0a214445 00000000 74616c46 66667542     ED!.....FlatBuff
   1fe18:	20737265 32312e31 0000302e              ers 1.12.0..

0001fe24 <_ZTVN6tflite22MicroMutableOpResolverILj5EEE>:
	...
   1fe2c:	00000c75 00000c7f 00000cc9 00000d59     u...........Y...
   1fe3c:	00000c89 00000d11 00000ccd 6c6c6143     ............Call
   1fe4c:	20676e69 42646441 746c6975 77206e69     ing AddBuiltin w
   1fe5c:	20687469 20656874 656d6173 20706f20     ith the same op 
   1fe6c:	65726f6d 61687420 6e6f206e 69206563     more than once i
   1fe7c:	6f6e2073 75732074 726f7070 20646574     s not supported 
   1fe8c:	3a704f28 64252320 00002e29 6c756f43     (Op: #%d)...Coul
   1fe9c:	74276e64 67657220 65747369 75622072     dn't register bu
   1feac:	69746c69 706f206e 64252320 6572202c     iltin op #%d, re
   1febc:	766c6f73 73207265 20657a69 74207369     solver size is t
   1fecc:	73206f6f 6c6c616d 64252820 00002e29     oo small (%d)...
   1fedc:	75706e49 72612074 20796172 20746f6e     Input array not 
   1feec:	766f7270 64656469 726f6620 65706f20     provided for ope
   1fefc:	69746172 27206e6f 2e277325 0000000a     ration '%s'.....
   1ff0c:	6e756f46 6f742064 616d206f 6420796e     Found too many d
   1ff1c:	6e656d69 6e6f6973 6e692073 65687420     imensions in the
   1ff2c:	706e6920 61207475 79617272 20666f20      input array of 
   1ff3c:	7265706f 6f697461 2527206e 0a2e2773     operation '%s'..
   1ff4c:	00000000 203c2069 657a6973 00002928     ....i < size()..
   1ff5c:	742f2e2e 64726968 7261705f 662f7974     ../third_party/f
   1ff6c:	6274616c 65666675 692f7372 756c636e     latbuffers/inclu
   1ff7c:	662f6564 6274616c 65666675 662f7372     de/flatbuffers/f
   1ff8c:	6274616c 65666675 682e7372 00000000     latbuffers.h....
   1ff9c:	75736e55 726f7070 20646574 61746164     Unsupported data
   1ffac:	70797420 64252065 206e6920 736e6574      type %d in tens
   1ffbc:	000a726f 742f2e2e 6f736e65 6f6c6672     or..../tensorflo
   1ffcc:	696c2f77 632f6574 2f65726f 2f697061     w/lite/core/api/
   1ffdc:	74616c66 66667562 635f7265 65766e6f     flatbuffer_conve
   1ffec:	6f697372 632e736e 00007070 253a7325     rsions.cpp..%s:%
   1fffc:	73252064 73617720 746f6e20 75727420     d %s was not tru
   2000c:	00002e65 61726170 2120736d 756e203d     e...params != nu
   2001c:	74706c6c 00000072 61686e55 656c646e     llptr...Unhandle
   2002c:	75662064 2d796c6c 6e6e6f63 65746365     d fully-connecte
   2003c:	65772064 74686769 6f662073 74616d72     d weights format
   2004c:	0000002e 68736572 00657061 61686e55     ....reshape.Unha
   2005c:	656c646e 534c2064 6b204d54 656e7265     ndled LSTM kerne
   2006c:	7974206c 203a6570 00006425 76206f4e     l type: %d..No v
   2007c:	64696c61 54534c20 7562204d 69746c69     alid LSTM builti
   2008c:	706f206e 6e6f6974 78652073 00747369     n options exist.
   2009c:	65757173 00657a65 454c4544 45544147     squeeze.DELEGATE
   200ac:	20706f20 756f6873 276e646c 78652074      op shouldn't ex
   200bc:	20747369 6d206e69 6c65646f 0000002e     ist in model....

000200cc <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names>:
   200cc:	00020390 00020394 000203a4 000203b4     ................
   200dc:	000203bc 000203d0 000203e0 000203ec     ................
   200ec:	00020400 00020408 00020418 0002042c     ............,...
   200fc:	00020440 0002044c 0002046c 00020478     @...L...l...x...
   2010c:	000205c4 00020488 00020494 00020498     ................
   2011c:	000204a0 000204b0 000204b8 000204c0     ................
   2012c:	00020554 00020610 000204d0 000204e0     T...............
   2013c:	000204e8 000204f0 00020504 00020510     ................
   2014c:	00020518 00020520 00020538 0002053c     .... ...8...<...
   2015c:	00020558 00020560 00020574 00020588     X...`...t.......
   2016c:	00020594 0002059c 000205a0 000205a4     ................
   2017c:	000205ac 000205cc 000205dc 000205f8     ................
   2018c:	000205fc 00020604 0002060c 00020618     ................
   2019c:	00020624 00020640 00020648 00020650     $...@...H...P...
   201ac:	00020658 00020660 00020668 00020670     X...`...h...p...
   201bc:	00020674 0002067c 00020684 00020694     t...|...........
   201cc:	000206a0 000205d4 000206a8 000206ac     ................
   201dc:	000206bc 000206cc 000206d4 0002068c     ................
   201ec:	000206e0 000206ec 00020914 000206f0     ................
   201fc:	000206f8 00020700 00020708 0002070c     ................
   2020c:	00020714 00020720 0002072c 00020738     .... ...,...8...
   2021c:	00020740 0002074c 00020754 00020760     @...L...T...`...
   2022c:	0002076c 00020774 00020780 0002078c     l...t...........
   2023c:	00020798 000207a0 000207ac 000207b4     ................
   2024c:	000207c0 000207c8 000207e0 000207ec     ................
   2025c:	00020800 0002080c 00020810 00020818     ................
   2026c:	00020820 00020828 00020834 0002083c      ...(...4...<...
   2027c:	00020848 0002084c 00020854 0002085c     H...L...T...\...
   2028c:	00020860 00020874 00020880 0002088c     `...t...........
   2029c:	0002089c 000208a4 000208b0 000208b4     ................
   202ac:	000208bc 000208d4 000208ec 000208f8     ................
   202bc:	00020904 0002090c 00020918 00000000     ................
   202cc:	6220704f 746c6975 635f6e69 2065646f     Op builtin_code 
   202dc:	2074756f 7220666f 65676e61 6425203a     out of range: %d
   202ec:	7241202e 6f792065 73752075 20676e69     . Are you using 
   202fc:	20646c6f 694c4654 62206574 72616e69     old TFLite binar
   2030c:	69772079 6e206874 72657765 646f6d20     y with newer mod
   2031c:	003f6c65 6e646944 66207427 20646e69     el?.Didn't find 
   2032c:	6620706f 6220726f 746c6975 6f206e69     op for builtin o
   2033c:	646f6370 25272065 76202773 69737265     pcode '%s' versi
   2034c:	27206e6f 0a276425 00000000 7265704f     on '%d'.....Oper
   2035c:	726f7461 74697720 55432068 4d4f5453     ator with CUSTOM
   2036c:	69756220 6e69746c 646f635f 61682065      builtin_code ha
   2037c:	6f6e2073 73756320 5f6d6f74 65646f63     s no custom_code
   2038c:	00000a2e 00444441 52455641 5f454741     ....ADD.AVERAGE_
   2039c:	4c4f4f50 0044325f 434e4f43 4e455441     POOL_2D.CONCATEN
   203ac:	4f495441 0000004e 564e4f43 0044325f     ATION...CONV_2D.
   203bc:	54504544 53495748 4f435f45 325f564e     DEPTHWISE_CONV_2
   203cc:	00000044 54504544 4f545f48 4150535f     D...DEPTH_TO_SPA
   203dc:	00004543 55514544 49544e41 0000455a     CE..DEQUANTIZE..
   203ec:	45424d45 4e494444 4f4c5f47 50554b4f     EMBEDDING_LOOKUP
   203fc:	00000000 4f4f4c46 00000052 4c4c5546     ....FLOOR...FULL
   2040c:	4f435f59 43454e4e 00444554 48534148     Y_CONNECTED.HASH
   2041c:	4c424154 4f4c5f45 50554b4f 00000000     TABLE_LOOKUP....
   2042c:	4e5f324c 414d524f 415a494c 4e4f4954     L2_NORMALIZATION
   2043c:	00000000 505f324c 5f4c4f4f 00004432     ....L2_POOL_2D..
   2044c:	41434f4c 45525f4c 4e4f5053 4e5f4553     LOCAL_RESPONSE_N
   2045c:	414d524f 415a494c 4e4f4954 00000000     ORMALIZATION....
   2046c:	49474f4c 43495453 00000000 5f48534c     LOGISTIC....LSH_
   2047c:	4a4f5250 49544345 00004e4f 5f58414d     PROJECTION..MAX_
   2048c:	4c4f4f50 0044325f 004c554d 554c4552     POOL_2D.MUL.RELU
   2049c:	00000000 554c4552 5f314e5f 315f4f54     ....RELU_N1_TO_1
   204ac:	00000000 554c4552 00000036 48534552     ....RELU6...RESH
   204bc:	00455041 49534552 425f455a 4e494c49     APE.RESIZE_BILIN
   204cc:	00524145 43415053 4f545f45 5045445f     EAR.SPACE_TO_DEP
   204dc:	00004854 46445653 00000000 484e4154     TH..SVDF....TANH
   204ec:	00000000 434e4f43 455f5441 4445424d     ....CONCAT_EMBED
   204fc:	474e4944 00000053 50494b53 4152475f     DINGS...SKIP_GRA
   2050c:	0000004d 4c4c4143 00000000 54535543     M...CALL....CUST
   2051c:	00004d4f 45424d45 4e494444 4f4c5f47     OM..EMBEDDING_LO
   2052c:	50554b4f 4150535f 00455352 00444150     OKUP_SPARSE.PAD.
   2053c:	44494e55 43455249 4e4f4954 535f4c41     UNIDIRECTIONAL_S
   2054c:	45555145 5f45434e 004e4e52 48544147     EQUENCE_RNN.GATH
   2055c:	00005245 43544142 4f545f48 4150535f     ER..BATCH_TO_SPA
   2056c:	4e5f4543 00000044 43415053 4f545f45     CE_ND...SPACE_TO
   2057c:	5441425f 4e5f4843 00000044 4e415254     _BATCH_ND...TRAN
   2058c:	534f5053 00000045 4e41454d 00000000     SPOSE...MEAN....
   2059c:	00425553 00564944 45555153 00455a45     SUB.DIV.SQUEEZE.
   205ac:	44494e55 43455249 4e4f4954 535f4c41     UNIDIRECTIONAL_S
   205bc:	45555145 5f45434e 4d54534c 00000000     EQUENCE_LSTM....
   205cc:	49525453 5f444544 43494c53 00000045     STRIDED_SLICE...
   205dc:	49444942 54434552 414e4f49 45535f4c     BIDIRECTIONAL_SE
   205ec:	4e455551 525f4543 00004e4e 00505845     QUENCE_RNN..EXP.
   205fc:	4b504f54 0032565f 494c5053 00000054     TOPK_V2.SPLIT...
   2060c:	5f474f4c 54464f53 0058414d 454c4544     LOG_SOFTMAX.DELE
   2061c:	45544147 00000000 49444942 54434552     GATE....BIDIRECT
   2062c:	414e4f49 45535f4c 4e455551 4c5f4543     IONAL_SEQUENCE_L
   2063c:	004d5453 54534143 00000000 4c455250     STM.CAST....PREL
   2064c:	00000055 4958414d 004d554d 5f475241     U...MAXIMUM.ARG_
   2065c:	0058414d 494e494d 004d554d 5353454c     MAX.MINIMUM.LESS
   2066c:	00000000 0047454e 56444150 00000032     ....NEG.PADV2...
   2067c:	41455247 00524554 41455247 5f524554     GREATER.GREATER_
   2068c:	41555145 0000004c 5353454c 5551455f     EQUAL...LESS_EQU
   2069c:	00004c41 454c4553 00005443 004e4953     AL..SELECT..SIN.
   206ac:	4e415254 534f5053 4f435f45 0000564e     TRANSPOSE_CONV..
   206bc:	52415053 545f4553 45445f4f 0045534e     SPARSE_TO_DENSE.
   206cc:	454c4954 00000000 41505845 445f444e     TILE....EXPAND_D
   206dc:	00534d49 5f544f4e 41555145 0000004c     IMS.NOT_EQUAL...
   206ec:	00474f4c 54525153 00000000 52515352     LOG.SQRT....RSQR
   206fc:	00000054 50414853 00000045 00574f50     T...SHAPE...POW.
   2070c:	5f475241 004e494d 454b4146 4155515f     ARG_MIN.FAKE_QUA
   2071c:	0000544e 55444552 505f4543 00444f52     NT..REDUCE_PROD.
   2072c:	55444552 4d5f4543 00005841 4b434150     REDUCE_MAX..PACK
   2073c:	00000000 49474f4c 5f4c4143 0000524f     ....LOGICAL_OR..
   2074c:	5f454e4f 00544f48 49474f4c 5f4c4143     ONE_HOT.LOGICAL_
   2075c:	00444e41 49474f4c 5f4c4143 00544f4e     AND.LOGICAL_NOT.
   2076c:	41504e55 00004b43 55444552 4d5f4543     UNPACK..REDUCE_M
   2077c:	00004e49 4f4f4c46 49445f52 00000056     IN..FLOOR_DIV...
   2078c:	55444552 415f4543 0000594e 41555153     REDUCE_ANY..SQUA
   2079c:	00004552 4f52455a 494c5f53 0000454b     RE..ZEROS_LIKE..
   207ac:	4c4c4946 00000000 4f4f4c46 4f4d5f52     FILL....FLOOR_MO
   207bc:	00000044 474e4152 00000045 49534552     D...RANGE...RESI
   207cc:	4e5f455a 45524145 4e5f5453 48474945     ZE_NEAREST_NEIGH
   207dc:	00524f42 4b41454c 45525f59 0000554c     BOR.LEAKY_RELU..
   207ec:	41555153 5f444552 46464944 4e455245     SQUARED_DIFFEREN
   207fc:	00004543 5252494d 505f524f 00004441     CE..MIRROR_PAD..
   2080c:	00534241 494c5053 00565f54 51494e55     ABS.SPLIT_V.UNIQ
   2081c:	00004555 4c494543 00000000 45564552     UE..CEIL....REVE
   2082c:	5f455352 00003256 5f444441 0000004e     RSE_V2..ADD_N...
   2083c:	48544147 4e5f5245 00000044 00534f43     GATHER_ND...COS.
   2084c:	52454857 00000045 4b4e4152 00000000     WHERE...RANK....
   2085c:	00554c45 45564552 5f455352 55514553     ELU.REVERSE_SEQU
   2086c:	45434e45 00000000 5254414d 445f5849     ENCE....MATRIX_D
   2087c:	00474149 4e415551 455a4954 00000000     IAG.QUANTIZE....
   2088c:	5254414d 535f5849 445f5445 00474149     MATRIX_SET_DIAG.
   2089c:	4e554f52 00000044 44524148 4957535f     ROUND...HARD_SWI
   208ac:	00004853 00004649 4c494857 00000045     SH..IF..WHILE...
   208bc:	5f4e4f4e 5f58414d 50505553 53534552     NON_MAX_SUPPRESS
   208cc:	5f4e4f49 00003456 5f4e4f4e 5f58414d     ION_V4..NON_MAX_
   208dc:	50505553 53534552 5f4e4f49 00003556     SUPPRESSION_V5..
   208ec:	54414353 5f524554 0000444e 454c4553     SCATTER_ND..SELE
   208fc:	565f5443 00000032 534e4544 00594649     CT_V2...DENSIFY.
   2090c:	4d474553 5f544e45 004d5553 43544142     SEGMENT_SUM.BATC
   2091c:	414d5f48 4c554d54 00000000 742f2e2e     H_MATMUL....../t
   2092c:	6f736e65 6f6c6672 696c2f77 6b2f6574     ensorflow/lite/k
   2093c:	656e7265 6b2f736c 656e7265 74755f6c     ernels/kernel_ut
   2094c:	632e6c69 00007070 75706e69 72705f74     il.cpp..input_pr
   2095c:	6375646f 63735f74 20656c61 30203d3e     oduct_scale >= 0
   2096c:	00000000 6c616373 69645f65 2f206666     ....scale_diff /
   2097c:	74756f20 5f747570 6c616373 3d3c2065      output_scale <=
   2098c:	302e3020 00000032 736c6166 00000065      0.02...false...
   2099c:	253a7325 73252064 203d2120 28207325     %s:%d %s != %s (
   209ac:	21206425 6425203d 00000029 4c66546b     %d != %d)...kTfL
   209bc:	41657469 6e696666 61755165 7a69746e     iteAffineQuantiz
   209cc:	6f697461 0000006e 75706e69 713e2d74     ation...input->q
   209dc:	746e6175 74617a69 2e6e6f69 65707974     uantization.type
   209ec:	00000000 746c6966 3e2d7265 6e617571     ....filter->quan
   209fc:	617a6974 6e6f6974 7079742e 00000065     tization.type...
   20a0c:	69666661 715f656e 746e6175 74617a69     affine_quantizat
   20a1c:	006e6f69 69666661 715f656e 746e6175     ion.affine_quant
   20a2c:	74617a69 2d6e6f69 6163733e 0000656c     ization->scale..
   20a3c:	75706e69 743e2d74 20657079 6b203d3d     input->type == k
   20a4c:	694c6654 6e496574 7c203874 6e69207c     TfLiteInt8 || in
   20a5c:	2d747570 7079743e 3d3d2065 66546b20     put->type == kTf
   20a6c:	6574694c 31746e49 00000036 4c66546b     LiteInt16...kTfL
   20a7c:	49657469 0038746e 746c6966 3e2d7265     iteInt8.filter->
   20a8c:	65707974 00000000 5f6d756e 6e616863     type....num_chan
   20a9c:	736c656e 00000000 69666661 715f656e     nels....affine_q
   20aac:	746e6175 74617a69 2d6e6f69 6163733e     uantization->sca
   20abc:	3e2d656c 657a6973 00000000 746c6966     le->size....filt
   20acc:	3e2d7265 736d6964 61643e2d 615b6174     er->dims->data[a
   20adc:	6e696666 75715f65 69746e61 6974617a     ffine_quantizati
   20aec:	3e2d6e6f 6e617571 657a6974 69645f64     on->quantized_di
   20afc:	736e656d 5d6e6f69 00000000 3d203164     mension]....d1 =
   20b0c:	3264203d 207c7c20 3d203164 2031203d     = d2 || d1 == 1 
   20b1c:	64207c7c 3d3d2032 00003120 3d203164     || d2 == 1..d1 =
   20b2c:	2031203d 64207c7c 3d3d2031 78616d20     = 1 || d1 == max
   20b3c:	6c61765f 00006575 3d203264 2031203d     _value..d2 == 1 
   20b4c:	64207c7c 3d3d2032 78616d20 6c61765f     || d2 == max_val
   20b5c:	00006575 3d203364 2031203d 64207c7c     ue..d3 == 1 || d
   20b6c:	3d3d2033 78616d20 6c61765f 00006575     3 == max_value..
	...
   20b84:	00001ee1 00001ee9 00000000 00000000     ................
	...
   20ba4:	00001ee5 00002325 00000000 00000000     ....%#..........
	...
   20bbc:	796c6e4f 6f6c6620 32337461 20736920     Only float32 is 
   20bcc:	70707573 6574726f 75632064 6e657272     supported curren
   20bdc:	2c796c74 746f6720 00732520              tly, got %s.

00020be8 <_ZZN8gemmlowp19RoundingDivideByPOTIlEET_S1_iE19__PRETTY_FUNCTION__>:
   20be8:	65746e49 54726567 20657079 6d6d6567     IntegerType gemm
   20bf8:	70776f6c 6f523a3a 69646e75 6944676e     lowp::RoundingDi
   20c08:	65646976 4f507942 6e492854 65676574     videByPOT(Intege
   20c18:	70795472 69202c65 2029746e 7469775b     rType, int) [wit
   20c28:	6e492068 65676574 70795472 203d2065     h IntegerType = 
   20c38:	676e6f6c 746e6920 0000005d 000027f9     long int]....'..
   20c48:	00000000 000029d1 00003d51 00000000     .....)..Q=......
	...
   20c64:	742f2e2e 6f736e65 6f6c6672 696c2f77     ../tensorflow/li
   20c74:	6d2f6574 6f726369 72656b2f 736c656e     te/micro/kernels
   20c84:	6e6f632f 70632e76 00000070 5f736168     /conv.cpp...has_
   20c94:	73616962 207c7c20 65646f6e 6e693e2d     bias || node->in
   20ca4:	73747570 69733e2d 3d20657a 0032203d     puts->size == 2.
   20cb4:	65646f6e 756f3e2d 74757074 733e2d73     node->outputs->s
   20cc4:	00657a69 69666661 715f656e 746e6175     ize.affine_quant
   20cd4:	74617a69 2d6e6f69 72657a3e 6f705f6f     ization->zero_po
   20ce4:	00746e69 69666661 715f656e 746e6175     int.affine_quant
   20cf4:	74617a69 2d6e6f69 6163733e 3e2d656c     ization->scale->
   20d04:	657a6973 203d3d20 7c7c2031 66666120     size == 1 || aff
   20d14:	5f656e69 6e617571 617a6974 6e6f6974     ine_quantization
   20d24:	63733e2d 2d656c61 7a69733e 3d3d2065     ->scale->size ==
   20d34:	6c696620 2d726574 6d69643e 643e2d73      filter->dims->d
   20d44:	5b617461 6e6f436b 61755176 7a69746e     ata[kConvQuantiz
   20d54:	69446465 736e656d 5d6e6f69 00000000     edDimension]....
   20d64:	69666661 715f656e 746e6175 74617a69     affine_quantizat
   20d74:	2d6e6f69 72657a3e 6f705f6f 2d746e69     ion->zero_point-
   20d84:	7a69733e 00000065 6f707865 746e656e     >size...exponent
   20d94:	203d3e20 00000030 742f2e2e 64726968      >= 0...../third
   20da4:	7261705f 672f7974 6c6d6d65 2f70776f     _party/gemmlowp/
   20db4:	65786966 696f7064 662f746e 64657869     fixedpoint/fixed
   20dc4:	6e696f70 00682e74 6f707865 746e656e     point.h.exponent
   20dd4:	203d3c20 00003133 65707954 20732520      <= 31..Type %s 
   20de4:	29642528 746f6e20 70757320 74726f70     (%d) not support
   20df4:	002e6465                                ed..

00020df8 <_ZZN8gemmlowp19RoundingDivideByPOTIlEET_S1_iE19__PRETTY_FUNCTION__>:
   20df8:	65746e49 54726567 20657079 6d6d6567     IntegerType gemm
   20e08:	70776f6c 6f523a3a 69646e75 6944676e     lowp::RoundingDi
   20e18:	65646976 4f507942 6e492854 65676574     videByPOT(Intege
   20e28:	70795472 69202c65 2029746e 7469775b     rType, int) [wit
   20e38:	6e492068 65676574 70795472 203d2065     h IntegerType = 
   20e48:	676e6f6c 746e6920 0000005d 00003e51     long int]...Q>..
   20e58:	00000000 00003e7d 000042ed 00000000     ....}>...B......
	...
   20e74:	742f2e2e 6f736e65 6f6c6672 696c2f77     ../tensorflow/li
   20e84:	6d2f6574 6f726369 72656b2f 736c656e     te/micro/kernels
   20e94:	6c75662f 635f796c 656e6e6f 64657463     /fully_connected
   20ea4:	7070632e 00000000 253a7325 73252064     .cpp....%s:%d %s
   20eb4:	203d2120 28207325 21207325 7325203d      != %s (%s != %s
   20ec4:	00000029 7074756f 3e2d7475 65707974     )...output->type
   20ed4:	00000000 75706e69 743e2d74 00657079     ....input->type.
   20ee4:	742f2e2e 6f736e65 6f6c6672 696c2f77     ../tensorflow/li
   20ef4:	6d2f6574 6f726369 72656b2f 736c656e     te/micro/kernels
   20f04:	6c75662f 635f796c 656e6e6f 64657463     /fully_connected
   20f14:	7070632e 62794820 20646972 65646f6d     .cpp Hybrid mode
   20f24:	6120736c 6e206572 7320746f 6f707075     ls are not suppo
   20f34:	64657472 206e6f20 694c4654 4d206574     rted on TFLite M
   20f44:	6f726369 0000002e 75706e49 79742074     icro....Input ty
   20f54:	25206570 73692073 746f6e20 72756320     pe %s is not cur
   20f64:	746e6572 7320796c 6f707075 64657472     rently supported
   20f74:	00000000 65707954 20732520 20746f6e     ....Type %s not 
   20f84:	72727563 6c746e65 75732079 726f7070     currently suppor
   20f94:	2e646574 00000000 00005e3d 00000000     ted.....=^......
   20fa4:	00005e69 0000723d 00000000 00000000     i^..=r..........
	...

00020fbc <_ZZN8gemmlowp19RoundingDivideByPOTIlEET_S1_iE19__PRETTY_FUNCTION__>:
   20fbc:	65746e49 54726567 20657079 6d6d6567     IntegerType gemm
   20fcc:	70776f6c 6f523a3a 69646e75 6944676e     lowp::RoundingDi
   20fdc:	65646976 4f507942 6e492854 65676574     videByPOT(Intege
   20fec:	70795472 69202c65 2029746e 7469775b     rType, int) [wit
   20ffc:	6e492068 65676574 70795472 203d2065     h IntegerType = 
   2100c:	676e6f6c 746e6920 0000005d 742f2e2e     long int]...../t
   2101c:	6f736e65 6f6c6672 696c2f77 6d2f6574     ensorflow/lite/m
   2102c:	6f726369 72656b2f 736c656e 666f732f     icro/kernels/sof
   2103c:	78616d74 7070632e 00000000 496d754e     tmax.cpp....NumI
   2104c:	7475706e 6f6e2873 00296564 4f6d754e     nputs(node).NumO
   2105c:	75707475 6e287374 2965646f 00000000     utputs(node)....
   2106c:	446d754e 6e656d69 6e6f6973 6e692873     NumDimensions(in
   2107c:	29747570 203d3e20 00000031 4c66546b     put) >= 1...kTfL
   2108c:	55657469 38746e49 00000000 7074756f     iteUInt8....outp
   2109c:	3e2d7475 61726170 7a2e736d 5f6f7265     ut->params.zero_
   210ac:	6e696f70 00000074 3732332d 00003836     point...-32768..
   210bc:	3832312d 00000000 7074756f 3e2d7475     -128....output->
   210cc:	61726170 732e736d 656c6163 203d3d20     params.scale == 
   210dc:	20662e31 3532202f 00000036 4c66546b     1.f / 256...kTfL
   210ec:	46657469 74616f6c 00003233              iteFloat32..

000210f8 <_ZTVN6tflite19GreedyMemoryPlannerE>:
	...
   21100:	000073cd 00007419 000073d5 00007725     .s...t...s..%w..
   21110:	000073cf 00007791 206f6f54 796e616d     .s...w..Too many
   21120:	66756220 73726566 616d2820 73692078      buffers (max is
   21130:	29642520 00000000 66667562 69207265      %d)....buffer i
   21140:	7865646e 20642520 6f207369 69737475     ndex %d is outsi
   21150:	72206564 65676e61 74203020 6425206f     de range 0 to %d
   21160:	00000000 6e616c50 2072656e 66667562     ....Planner buff
   21170:	49207265 25203a44 63202c64 75636c61     er ID: %d, calcu
   21180:	6574616c 666f2064 74657366 6425203a     lated offset: %d
   21190:	6973202c 7220657a 69757165 3a646572     , size required:
   211a0:	2c642520 72696620 745f7473 5f656d69      %d, first_time_
   211b0:	61657263 3a646574 2c642520 73616c20     created: %d, las
   211c0:	69745f74 755f656d 3a646573 00642520     t_time_used: %d.
   211d0:	00007325 7265764f 3a70616c 20642520     %s..Overlap: %d 
   211e0:	3d642528 2c64253e 2d642520 2964253e     (%d=>%d, %d->%d)
   211f0:	20737620 28206425 3e3d6425 202c6425      vs %d (%d=>%d, 
   21200:	3e2d6425 00296425                       %d->%d).

00021208 <_ZZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEmE19__PRETTY_FUNCTION__>:
   21208:	74616c66 66667562 3a737265 6365563a     flatbuffers::Vec
   21218:	3c726f74 3a3a3e54 75746572 745f6e72     tor<T>::return_t
   21228:	20657079 74616c66 66667562 3a737265     ype flatbuffers:
   21238:	6365563a 3c726f74 3a3a3e54 28746547     :Vector<T>::Get(
   21248:	74616c66 66667562 3a737265 666f753a     flatbuffers::uof
   21258:	74657366 2029745f 736e6f63 775b2074     fset_t) const [w
   21268:	20687469 203d2054 74616c66 66667562     ith T = flatbuff
   21278:	3a737265 66664f3a 3c746573 696c6674     ers::Offset<tfli
   21288:	3a3a6574 736e6554 3b3e726f 616c6620     te::Tensor>; fla
   21298:	66756274 73726566 65563a3a 726f7463     tbuffers::Vector
   212a8:	3a3e543c 7465723a 5f6e7275 65707974     <T>::return_type
   212b8:	63203d20 74736e6f 6c667420 3a657469      = const tflite:
   212c8:	6e65543a 2a726f73 6c66203b 75627461     :Tensor*; flatbu
   212d8:	72656666 753a3a73 7366666f 745f7465     ffers::uoffset_t
   212e8:	6c203d20 20676e6f 69736e75 64656e67      = long unsigned
   212f8:	746e6920 0000005d                        int]...

00021300 <_ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE>:
	...
   21308:	000077d1 000077dd 000077ed 000077f1     .w...w...w...w..

00021318 <_ZZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEmE19__PRETTY_FUNCTION__>:
   21318:	74616c66 66667562 3a737265 6365563a     flatbuffers::Vec
   21328:	3c726f74 3a3a3e54 75746572 745f6e72     tor<T>::return_t
   21338:	20657079 74616c66 66667562 3a737265     ype flatbuffers:
   21348:	6365563a 3c726f74 3a3a3e54 28746547     :Vector<T>::Get(
   21358:	74616c66 66667562 3a737265 666f753a     flatbuffers::uof
   21368:	74657366 2029745f 736e6f63 775b2074     fset_t) const [w
   21378:	20687469 203d2054 74616c66 66667562     ith T = flatbuff
   21388:	3a737265 66664f3a 3c746573 696c6674     ers::Offset<tfli
   21398:	3a3a6574 66667542 3b3e7265 616c6620     te::Buffer>; fla
   213a8:	66756274 73726566 65563a3a 726f7463     tbuffers::Vector
   213b8:	3a3e543c 7465723a 5f6e7275 65707974     <T>::return_type
   213c8:	63203d20 74736e6f 6c667420 3a657469      = const tflite:
   213d8:	6675423a 2a726566 6c66203b 75627461     :Buffer*; flatbu
   213e8:	72656666 753a3a73 7366666f 745f7465     ffers::uoffset_t
   213f8:	6c203d20 20676e6f 69736e75 64656e67      = long unsigned
   21408:	746e6920 0000005d                        int]...

00021410 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE>:
   21410:	00000000                                ....

00021414 <_ZZNK11flatbuffers6VectorIfE3GetEmE19__PRETTY_FUNCTION__>:
   21414:	74616c66 66667562 3a737265 6365563a     flatbuffers::Vec
   21424:	3c726f74 3a3a3e54 75746572 745f6e72     tor<T>::return_t
   21434:	20657079 74616c66 66667562 3a737265     ype flatbuffers:
   21444:	6365563a 3c726f74 3a3a3e54 28746547     :Vector<T>::Get(
   21454:	74616c66 66667562 3a737265 666f753a     flatbuffers::uof
   21464:	74657366 2029745f 736e6f63 775b2074     fset_t) const [w
   21474:	20687469 203d2054 616f6c66 66203b74     ith T = float; f
   21484:	6274616c 65666675 3a3a7372 74636556     latbuffers::Vect
   21494:	543c726f 723a3a3e 72757465 79745f6e     or<T>::return_ty
   214a4:	3d206570 6f6c6620 203b7461 74616c66     pe = float; flat
   214b4:	66667562 3a737265 666f753a 74657366     buffers::uoffset
   214c4:	3d20745f 6e6f6c20 6e752067 6e676973     _t = long unsign
   214d4:	69206465 005d746e                       ed int].

000214dc <_ZZNK11flatbuffers6VectorIxE3GetEmE19__PRETTY_FUNCTION__>:
   214dc:	74616c66 66667562 3a737265 6365563a     flatbuffers::Vec
   214ec:	3c726f74 3a3a3e54 75746572 745f6e72     tor<T>::return_t
   214fc:	20657079 74616c66 66667562 3a737265     ype flatbuffers:
   2150c:	6365563a 3c726f74 3a3a3e54 28746547     :Vector<T>::Get(
   2151c:	74616c66 66667562 3a737265 666f753a     flatbuffers::uof
   2152c:	74657366 2029745f 736e6f63 775b2074     fset_t) const [w
   2153c:	20687469 203d2054 676e6f6c 6e6f6c20     ith T = long lon
   2154c:	6e692067 66203b74 6274616c 65666675     g int; flatbuffe
   2155c:	3a3a7372 74636556 543c726f 723a3a3e     rs::Vector<T>::r
   2156c:	72757465 79745f6e 3d206570 6e6f6c20     eturn_type = lon
   2157c:	6f6c2067 6920676e 203b746e 74616c66     g long int; flat
   2158c:	66667562 3a737265 666f753a 74657366     buffers::uoffset
   2159c:	3d20745f 6e6f6c20 6e752067 6e676973     _t = long unsign
   215ac:	69206465 005d746e                       ed int].

000215b4 <_ZTVN6tflite14MicroAllocatorE>:
	...
   215bc:	0000835d 000077e1 000077df 00007805     ]....w...w...x..
   215cc:	00007819 00008025 0000786d 0000799d     .x..%...mx...y..
   215dc:	000078bd 00008415                       .x......

000215e4 <_ZN6tflite12_GLOBAL__N_1L24kOfflineMemAllocMetadataE>:
   215e4:	6c66664f 4d656e69 726f6d65 6c6c4179     OfflineMemoryAll
   215f4:	7461636f 006e6f69                       ocation.

000215fc <_ZZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEmE19__PRETTY_FUNCTION__>:
   215fc:	74616c66 66667562 3a737265 6365563a     flatbuffers::Vec
   2160c:	3c726f74 3a3a3e54 75746572 745f6e72     tor<T>::return_t
   2161c:	20657079 74616c66 66667562 3a737265     ype flatbuffers:
   2162c:	6365563a 3c726f74 3a3a3e54 28746547     :Vector<T>::Get(
   2163c:	74616c66 66667562 3a737265 666f753a     flatbuffers::uof
   2164c:	74657366 2029745f 736e6f63 775b2074     fset_t) const [w
   2165c:	20687469 203d2054 74616c66 66667562     ith T = flatbuff
   2166c:	3a737265 66664f3a 3c746573 696c6674     ers::Offset<tfli
   2167c:	3a3a6574 7265704f 726f7461 66203b3e     te::Operator>; f
   2168c:	6274616c 65666675 3a3a7372 74636556     latbuffers::Vect
   2169c:	543c726f 723a3a3e 72757465 79745f6e     or<T>::return_ty
   216ac:	3d206570 6e6f6320 74207473 74696c66     pe = const tflit
   216bc:	4f3a3a65 61726570 2a726f74 6c66203b     e::Operator*; fl
   216cc:	75627461 72656666 753a3a73 7366666f     atbuffers::uoffs
   216dc:	745f7465 6c203d20 20676e6f 69736e75     et_t = long unsi
   216ec:	64656e67 746e6920 0000005d 6c696146     gned int]...Fail
   216fc:	74206465 6c61206f 61636f6c 6d206574     ed to allocate m
   2170c:	726f6d65 6f662079 6f632072 7865746e     emory for contex
   2171c:	743e2d74 6f736e65 202c7372 62206425     t->tensors, %d b
   2172c:	73657479 71657220 65726975 00000064     ytes required...
   2173c:	6c696146 74206465 6c61206f 61636f6c     Failed to alloca
   2174c:	6d206574 726f6d65 6f662079 6f6e2072     te memory for no
   2175c:	615f6564 725f646e 73696765 74617274     de_and_registrat
   2176c:	736e6f69 0000002e 6c696146 74206465     ions....Failed t
   2177c:	6c61206f 61636f6c 76206574 61697261     o allocate varia
   2178c:	20656c62 736e6574 6f20726f 69732066     ble tensor of si
   2179c:	2520657a 00000064 7373694d 20676e69     ze %d...Missing 
   217ac:	69676572 61727473 6e6f6974 726f6620     registration for
   217bc:	63706f20 5f65646f 65646e69 64252078      opcode_index %d
   217cc:	0000000a 6c696146 74206465 6567206f     ....Failed to ge
   217dc:	65722074 74736967 69746172 66206e6f     t registration f
   217ec:	206d6f72 6320706f 2065646f 200a7325     rom op code %s. 
   217fc:	00000000 70696b53 676e6970 20706f20     ....Skipping op 
   2180c:	20726f66 6f63706f 695f6564 7865646e     for opcode_index
   2181c:	0a642520 00000000 75736e55 726f7070      %d.....Unsuppor
   2182c:	20646574 61686562 726f6976 6f66203a     ted behavior: fo
   2183c:	20646e75 6c697562 206e6974 7265706f     und builtin oper
   2184c:	726f7461 20732520 68746977 73756320     ator %s with cus
   2185c:	206d6f74 6974706f 2e736e6f 0000000a     tom options.....
   2186c:	20646944 20746f6e 646e6966 70206120     Did not find a p
   2187c:	65737261 6f662072 73252072 00000000     arser for %s....
   2188c:	62616e55 7420656c 6c61206f 61636f6c     Unable to alloca
   2189c:	54206574 74694c66 66664165 51656e69     te TfLiteAffineQ
   218ac:	746e6175 74617a69 2e6e6f69 0000000a     uantization.....
   218bc:	62616e55 7420656c 6c61206f 61636f6c     Unable to alloca
   218cc:	71206574 746e6175 74617a69 2d6e6f69     te quantization-
   218dc:	72657a3e 6f705f6f 2e746e69 0000000a     >zero_point.....
   218ec:	6c696146 74206465 6e69206f 61697469     Failed to initia
   218fc:	657a696c 6e657420 20726f73 00006425     lize tensor %d..
   2190c:	62206425 73657479 736f6c20 75642074     %d bytes lost du
   2191c:	6f742065 696c6120 656d6e67 202e746e     e to alignment. 
   2192c:	61206f54 64696f76 69687420 6f6c2073     To avoid this lo
   2193c:	202c7373 61656c70 6d206573 20656b61     ss, please make 
   2194c:	65727573 65687420 6e657420 5f726f73     sure the tensor_
   2195c:	6e657261 73692061 20363120 65747962     arena is 16 byte
   2196c:	6c612073 656e6769 00002e64 6c696146     s aligned...Fail
   2197c:	74206465 6c61206f 61636f6c 70206574     ed to allocate p
   2198c:	69737265 6e657473 75622074 72656666     ersistent buffer
   2199c:	20666f20 657a6973 00642520 65746e49      of size %d.Inte
   219ac:	6c616e72 72726520 203a726f 6f6c6c41     rnal error: Allo
   219bc:	65746163 6d6f7246 6c696154 6e616320     cateFromTail can
   219cc:	746f6e20 20656220 6c6c6163 62206465      not be called b
   219dc:	65777465 74206e65 52206f77 65757165     etween two Reque
   219ec:	63537473 63746172 66754268 49726566     stScratchBufferI
   219fc:	6572416e 6320616e 736c6c61 0000002e     nArena calls....
   21a0c:	6c696146 74206465 6572206f 74736967     Failed to regist
   21a1c:	73207265 74617263 62206863 65666675     er scratch buffe
   21a2c:	61682072 656c646e 726f6620 646f6e20     r handle for nod
   21a3c:	73252065 00000000 66667542 25207265     e %s....Buffer %
   21a4c:	6f6e2064 6f662074 2e646e75 20642520     d not found. %d 
   21a5c:	66667562 20737265 69617661 6c62616c     buffers availabl
   21a6c:	00002e65 796c6e4f 73203120 72676275     e...Only 1 subgr
   21a7c:	20687061 63207369 65727275 796c746e     aph is currently
   21a8c:	70757320 74726f70 0a2e6465 00000000      supported......
   21a9c:	7263694d 6c6c416f 7461636f 203a726f     MicroAllocator: 
   21aac:	65646f4d 6c61206c 61636f6c 6e6f6974     Model allocation
   21abc:	61747320 64657472 66656220 2065726f      started before 
   21acc:	696e6966 6e696873 72702067 6f697665     finishing previo
   21adc:	796c7375 6c6c6120 7461636f 6d206465     usly allocated m
   21aec:	6c65646f 00000000 7263694d 6c6c416f     odel....MicroAll
   21afc:	7461636f 203a726f 65646f4d 6c61206c     ocator: Model al
   21b0c:	61636f6c 6e6f6974 6e696620 65687369     location finishe
   21b1c:	65622064 65726f66 61747320 6e697472     d before startin
   21b2c:	6c612067 61636f6c 676e6974 646f6d20     g allocating mod
   21b3c:	00006c65 6c696146 74206465 6c61206f     el..Failed to al
   21b4c:	61636f6c 6d206574 726f6d65 6f662079     locate memory fo
   21b5c:	6c612072 61636f6c 6e6f6974 666e695f     r allocation_inf
   21b6c:	25202c6f 79622064 20736574 75716572     o, %d bytes requ
   21b7c:	64657269 00000000 2072624e 6f20666f     ired....Nbr of o
   21b8c:	696c6666 6220656e 65666675 666f2072     ffline buffer of
   21b9c:	74657366 25282073 69202964 656d206e     fsets (%d) in me
   21bac:	61646174 6e206174 6520746f 6c617571     tadata not equal
   21bbc:	72626e20 6e657420 73726f73 64252820      nbr tensors (%d
   21bcc:	00000a29 69676f4c 72652063 20726f72     )...Logic error 
   21bdc:	6d206e69 726f6d65 6c702079 656e6e61     in memory planne
   21bec:	74202c72 6f736e65 64252072 73616820     r, tensor %d has
   21bfc:	206e6120 61766e69 2064696c 6566696c      an invalid life
   21c0c:	656d6974 6966203a 5f747372 61657263     time: first_crea
   21c1c:	3a646574 2c642520 73616c20 73755f74     ted: %d, last_us
   21c2c:	203a6465 00006425 742f2e2e 6f736e65     ed: %d..../tenso
   21c3c:	6f6c6672 696c2f77 6d2f6574 6f726369     rflow/lite/micro
   21c4c:	63696d2f 615f6f72 636f6c6c 726f7461     /micro_allocator
   21c5c:	7070632e 00000000 6e616c70 5f72656e     .cpp....planner_
   21c6c:	6e657261 3d212061 6c756e20 7274706c     arena != nullptr
   21c7c:	00000000 6e657241 69732061 6920657a     ....Arena size i
   21c8c:	6f742073 6d73206f 206c6c61 20726f66     s too small for 
   21c9c:	69746361 69746176 62206e6f 65666675     activation buffe
   21cac:	202e7372 6465654e 25206465 75622064     rs. Needed %d bu
   21cbc:	6e6f2074 2520796c 61772064 76612073     t only %d was av
   21ccc:	616c6961 2e656c62 00000000 6f6c6c61     ailable.....allo
   21cdc:	65746163 65745f64 726f736e 6d656d5f     cated_tensor_mem
   21cec:	2079726f 6e203d21 706c6c75 00007274     ory != nullptr..
   21cfc:	6c696146 73206465 74726174 20676e69     Failed starting 
   21d0c:	65646f6d 6c61206c 61636f6c 6e6f6974     model allocation
   21d1c:	00000a2e 65646f4e 20732520 6d756e28     ....Node %s (num
   21d2c:	20726562 29666425 69616620 2064656c     ber %df) failed 
   21d3c:	70206f74 61706572 77206572 20687469     to prepare with 
   21d4c:	74617473 25207375 00000064 6f766e49     status %d...Invo
   21d5c:	2928656b 6c616320 2064656c 65746661     ke() called afte
   21d6c:	6e692072 61697469 617a696c 6e6f6974     r initialization
   21d7c:	69616620 0a64656c 00000000 65646f4e      failed.....Node
   21d8c:	20732520 6d756e28 20726562 20296425      %s (number %d) 
   21d9c:	6c696166 74206465 6e69206f 656b6f76     failed to invoke
   21dac:	74697720 74732068 73757461 00642520      with status %d.
   21dbc:	75706e49 6e692074 20786564 6f206425     Input index %d o
   21dcc:	6f207475 61722066 2065676e 6e656c28     ut of range (len
   21ddc:	20687467 25207369 00002964 7074754f     gth is %d)..Outp
   21dec:	69207475 7865646e 20642520 2074756f     ut index %d out 
   21dfc:	7220666f 65676e61 656c2820 6874676e     of range (length
   21e0c:	20736920 00296425 736e6554 6920726f      is %d).Tensor i
   21e1c:	7865646e 20642520 2074756f 7220666f     ndex %d out of r
   21e2c:	65676e61 656c2820 6874676e 20736920     ange (length is 
   21e3c:	00296425 6c696146 74206465 6572206f     %d).Failed to re
   21e4c:	20746573 69726176 656c6261 6e657420     set variable ten
   21e5c:	20726f73 69207461 7865646e 6425203a     sor at index: %d
   21e6c:	00000000                                ....

00021e70 <_ZTVN6tflite21SimpleMemoryAllocatorE>:
	...
   21e78:	00008fe1 00009099 00008fe9 00009019     ................
   21e88:	00009059 00008fe3 6c6c6143 41206465     Y.......Called A
   21e98:	636f6c6c 46657461 486d6f72 28646165     llocateFromHead(
   21ea8:	66612029 20726574 6f6c6c41 65746163     ) after Allocate
   21eb8:	706d6554 77202928 6f687469 72207475     Temp() without r
   21ec8:	74657365 676e6974 6d657420 6c612070     esetting temp al
   21ed8:	61636f6c 6e6f6974 69772073 52206874     locations with R
   21ee8:	74657365 706d6554 6f6c6c41 69746163     esetTempAllocati
   21ef8:	28736e6f 00000029 6c696146 74206465     ons()...Failed t
   21f08:	6c61206f 61636f6c 6d206574 726f6d65     o allocate memor
   21f18:	52202e79 65757165 64657473 7525203a     y. Requested: %u
   21f28:	7661202c 616c6961 20656c62 202c7525     , available %u, 
   21f38:	7373696d 3a676e69 00752520 59544f4e     missing: %u.NOTY
   21f48:	00004550 414f4c46 00323354 31544e49     PE..FLOAT32.INT1
   21f58:	00000036 33544e49 00000032 544e4955     6...INT32...UINT
   21f68:	00000038 38544e49 00000000 36544e49     8...INT8....INT6
   21f78:	00000034 4c4f4f42 00000000 504d4f43     4...BOOL....COMP
   21f88:	3658454c 00000034 504d4f43 3158454c     LEX64...COMPLEX1
   21f98:	00003832 49525453 0000474e 414f4c46     28..STRING..FLOA
   21fa8:	00363154 414f4c46 00343654 6e6b6e55     T16.FLOAT64.Unkn
   21fb8:	206e776f 65707974 00000000              own type....

00021fc4 <_ZTIN9__gnu_cxx20recursive_init_errorE>:
   21fc4:	00022044 00021fd0 000222d8              D ......."..

00021fd0 <_ZTSN9__gnu_cxx20recursive_init_errorE>:
   21fd0:	5f5f394e 5f756e67 32787863 63657230     N9__gnu_cxx20rec
   21fe0:	69737275 695f6576 5f74696e 6f727265     ursive_init_erro
   21ff0:	00004572                                rE..

00021ff4 <_ZTVN9__gnu_cxx20recursive_init_errorE>:
   21ff4:	00000000 00021fc4 00009225 00009239     ........%...9...
   22004:	00009d2d                                -...

00022008 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   22008:	00022044 00022014 0002223c              D ... ..<"..

00022014 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   22014:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   22024:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   22034:	456f666e 00000000                       nfoE....

0002203c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   2203c:	00000000 00022008 00009295 000092a9     ..... ..........
   2204c:	000093c1 000093c1 000098c5 00009839     ............9...
   2205c:	00009391 00009301 000092c5              ............

00022068 <_ZTISt9type_info>:
   22068:	00022274 00022070                       t"..p ..

00022070 <_ZTSSt9type_info>:
   22070:	74397453 5f657079 6f666e69 00000000     St9type_info....
   22080:	74737973 00006d65 656e6567 00636972     system..generic.
   22090:	69736162 74735f63 676e6972 4d5f3a3a     basic_string::_M
   220a0:	6e6f635f 75727473 6e207463 206c6c75     _construct null 
   220b0:	20746f6e 696c6176 00000064              not valid...

000220bc <_ZTIN12_GLOBAL__N_121system_error_categoryE>:
   220bc:	00022044 000220dc 000220d4              D ... ... ..

000220c8 <_ZTIN12_GLOBAL__N_122generic_error_categoryE>:
   220c8:	00022044 00022108 000220d4              D ...!... ..

000220d4 <_ZTINSt3_V214error_categoryE>:
   220d4:	00022274 00022134                       t"..4!..

000220dc <_ZTSN12_GLOBAL__N_121system_error_categoryE>:
   220dc:	32314e2a 4f4c475f 5f4c4142 315f4e5f     *N12_GLOBAL__N_1
   220ec:	79733132 6d657473 7272655f 635f726f     21system_error_c
   220fc:	67657461 4579726f 00000000              ategoryE....

00022108 <_ZTSN12_GLOBAL__N_122generic_error_categoryE>:
   22108:	32314e2a 4f4c475f 5f4c4142 315f4e5f     *N12_GLOBAL__N_1
   22118:	65673232 6972656e 72655f63 5f726f72     22generic_error_
   22128:	65746163 79726f67 00000045              categoryE...

00022134 <_ZTSNSt3_V214error_categoryE>:
   22134:	3374534e 3132565f 72726534 635f726f     NSt3_V214error_c
   22144:	67657461 4579726f 00000000              ategoryE....

00022150 <_ZTVN12_GLOBAL__N_121system_error_categoryE>:
   22150:	00000000 000220bc 00009481 00009489     ..... ..........
   22160:	00009459 000094a1 00009539 00009461     Y.......9...a...
   22170:	00009571 00009469                       q...i...

00022178 <_ZTVN12_GLOBAL__N_122generic_error_categoryE>:
   22178:	00000000 000220c8 00009485 00009495     ..... ..........
   22188:	00009451 000094a1 00009539 00009461     Q.......9...a...
   22198:	00009571 00009469 69736162 74735f63     q...i...basic_st
   221a8:	676e6972 535f3a3a 6e6f635f 75727473     ring::_S_constru
   221b8:	6e207463 206c6c75 20746f6e 696c6176     ct null not vali
   221c8:	00000064 69736162 74735f63 676e6972     d...basic_string
   221d8:	535f3a3a 6572635f 00657461 69736162     ::_S_create.basi
   221e8:	74735f63 676e6972 4d5f3a3a 6572635f     c_string::_M_cre
   221f8:	00657461 3a647473 6461623a 6c6c615f     ate.std::bad_all
   22208:	0000636f                                oc..

0002220c <_ZTISt9bad_alloc>:
   2220c:	00022044 00022218 000222d8              D ..."..."..

00022218 <_ZTSSt9bad_alloc>:
   22218:	62397453 615f6461 636f6c6c 00000000     St9bad_alloc....

00022228 <_ZTVSt9bad_alloc>:
   22228:	00000000 0002220c 00009809 0000981d     ....."..........
   22238:	00009801                                ....

0002223c <_ZTIN10__cxxabiv117__class_type_infoE>:
   2223c:	00022044 00022248 00022068              D ..H"..h ..

00022248 <_ZTSN10__cxxabiv117__class_type_infoE>:
   22248:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   22258:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   22268:	00000045                                E...

0002226c <_ZTVN10__cxxabiv117__class_type_infoE>:
   2226c:	00000000 0002223c 0000987d 00009891     ....<"..}.......
   2227c:	000093c1 000093c1 000098c5 00009839     ............9...
   2228c:	000098ad 000098f1 00009871 3a647473     ........q...std:
   2229c:	6461623a 6378655f 69747065 00006e6f     :bad_exception..
   222ac:	3a647473 6378653a 69747065 00006e6f     std::exception..

000222bc <_ZTIN10__cxxabiv115__forced_unwindE>:
   222bc:	00022274 000222e0                       t"..."..

000222c4 <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   222c4:	00022274 00022300                       t"...#..

000222cc <_ZTISt13bad_exception>:
   222cc:	00022044 00022324 000222d8              D ..$#..."..

000222d8 <_ZTISt9exception>:
   222d8:	00022274 00022338                       t"..8#..

000222e0 <_ZTSN10__cxxabiv115__forced_unwindE>:
   222e0:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   222f0:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

00022300 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   22300:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   22310:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   22320:	00456e6f                                onE.

00022324 <_ZTSSt13bad_exception>:
   22324:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   22334:	0000006e                                n...

00022338 <_ZTSSt9exception>:
   22338:	65397453 70656378 6e6f6974 00000000     St9exception....

00022348 <_ZTVSt13bad_exception>:
   22348:	00000000 000222cc 00009d29 00009d3d     ....."..)...=...
   22358:	00009d35                                5...

0002235c <_ZTISt11logic_error>:
   2235c:	00022044 00022374 000222d8              D ..t#..."..

00022368 <_ZTISt12length_error>:
   22368:	00022044 00022384 0002235c              D ...#..\#..

00022374 <_ZTSSt11logic_error>:
   22374:	31317453 69676f6c 72655f63 00726f72     St11logic_error.

00022384 <_ZTSSt12length_error>:
   22384:	32317453 676e656c 655f6874 726f7272     St12length_error
   22394:	00000000                                ....

00022398 <_ZTVSt11logic_error>:
   22398:	00000000 0002235c 0000a569 0000a5a9     ....\#..i.......
   223a8:	0000a565                                e...

000223ac <_ZTVSt12length_error>:
   223ac:	00000000 00022368 0000a5bd 0000a5d1     ....h#..........
   223bc:	0000a565 6d726574 74616e69 61632065     e...terminate ca
   223cc:	64656c6c 63657220 69737275 796c6576     lled recursively
   223dc:	0000000a 6d726574 74616e69 61632065     ....terminate ca
   223ec:	64656c6c 74666120 74207265 776f7268     lled after throw
   223fc:	20676e69 69206e61 6174736e 2065636e     ing an instance 
   2240c:	2720666f 00000000 00000a27 6d726574     of '....'...term
   2241c:	74616e69 61632065 64656c6c 74697720     inate called wit
   2242c:	74756f68 206e6120 69746361 65206576     hout an active e
   2243c:	70656378 6e6f6974 0000000a 68772020     xception....  wh
   2244c:	29287461 0020203a                       at():  .

00022454 <standard_subs>:
   22454:	00000074 00022c34 00000003 00022c34     t...4,......4,..
   22464:	00000003 00000000 00000000 00000061     ............a...
   22474:	00022f44 0000000e 00022f44 0000000e     D/......D/......
   22484:	00022f54 00000009 00000062 00022f60     T/......b...`/..
   22494:	00000011 00022f60 00000011 00022f74     ....`/......t/..
   224a4:	0000000c 00000073 00022f84 0000000b     ....s..../......
   224b4:	00022f90 00000046 00022f74 0000000c     ./..F...t/......
   224c4:	00000069 00022fd8 0000000c 00022fe8     i..../......./..
   224d4:	00000031 0002301c 0000000d 0000006f     1....0......o...
   224e4:	0002302c 0000000c 0002303c 00000031     ,0......<0..1...
   224f4:	00023070 0000000d 00000064 00023080     p0......d....0..
   22504:	0000000d 00023090 00000032 000230c4     .....0..2....0..
   22514:	0000000e                                ....

00022518 <cplus_demangle_builtin_types>:
   22518:	000232c4 0000000b 000232c4 0000000b     .2.......2......
   22528:	00000000 000232d0 00000004 000232d8     .....2.......2..
   22538:	00000007 00000007 000232e0 00000004     .........2......
   22548:	000232e8 00000004 00000000 000232f0     .2...........2..
   22558:	00000006 000232f0 00000006 00000008     .....2..........
   22568:	000232f8 0000000b 000232f8 0000000b     .2.......2......
   22578:	00000008 00023304 00000005 00023304     .....3.......3..
   22588:	00000005 00000008 0002330c 0000000a     .........3......
   22598:	0002330c 0000000a 00000008 00023318     .3...........3..
   225a8:	0000000d 00023318 0000000d 00000000     .....3..........
   225b8:	00020ce4 00000003 00020ce4 00000003     ................
   225c8:	00000001 00023328 0000000c 00023338     ....(3......83..
   225d8:	00000008 00000002 00000000 00000000     ................
	...
   225f4:	00023c68 00000004 00023c68 00000004     h<......h<......
   22604:	00000003 00023344 0000000d 00023344     ....D3......D3..
   22614:	0000000d 00000004 00023354 00000008     ........T3......
   22624:	00023354 00000008 00000000 00023360     T3..........`3..
   22634:	00000011 00023360 00000011 00000000     ....`3..........
	...
   22680:	00023374 00000005 00023374 00000005     t3......t3......
   22690:	00000000 0002337c 0000000e 0002337c     ....|3......|3..
   226a0:	0000000e 00000000 00000000 00000000     ................
	...
   226bc:	0002338c 00000004 0002338c 00000004     .3.......3......
   226cc:	00000009 00023394 00000007 000232e0     .....3.......2..
   226dc:	00000004 00000000 0002339c 00000009     .........3......
   226ec:	00023c68 00000004 00000005 000233a8     h<...........3..
   226fc:	00000012 000233a8 00000012 00000006     .....3..........
   2270c:	00022e50 00000003 00022e50 00000003     P.......P.......
   2271c:	00000000 000233bc 00000009 000233bc     .....3.......3..
   2272c:	00000009 00000000 000233c8 00000009     .........3......
   2273c:	000233c8 00000009 00000000 000233d4     .3...........3..
   2274c:	0000000a 000233d4 0000000a 00000000     .....3..........
   2275c:	000233e0 00000004 000233e0 00000004     .3.......3......
   2276c:	00000008 000233e8 00000008 000233e8     .....3.......3..
   2277c:	00000008 00000000 000233f4 00000008     .........3......
   2278c:	000233f4 00000008 00000000 00023400     .3...........4..
   2279c:	00000011 00023400 00000011 00000000     .....4..........

000227ac <cplus_demangle_operators>:
   227ac:	000230d4 000230d8 00000002 00000002     .0...0..........
   227bc:	000230dc 000230e0 00000001 00000002     .0...0..........
   227cc:	000230e4 00022f08 00000002 00000002     .0.../..........
   227dc:	00022e04 000230e8 00000001 00000001     .....0..........
   227ec:	000230ec 000230e8 00000001 00000002     .0...0..........
   227fc:	000230f0 000230f4 00000008 00000001     .0...0..........
   2280c:	00023100 000230f4 00000008 00000001     .1...0..........
   2281c:	00023104 00023108 0000000a 00000002     .1...1..........
   2282c:	00022c14 0001ff58 00000002 00000002     .,..X...........
   2283c:	00023114 00023118 00000001 00000002     .1...1..........
   2284c:	0002311c 00023120 00000001 00000001     .1.. 1..........
   2285c:	00023124 00023128 00000002 00000002     $1..(1..........
   2286c:	0002312c 00023130 00000009 00000001     ,1..01..........
   2287c:	0002313c 00023140 0000000c 00000002     <1..@1..........
   2288c:	00023150 00023154 00000001 00000001     P1..T1..........
   2289c:	00023158 0002315c 00000007 00000001     X1..\1..........
   228ac:	00023164 00023168 00000002 00000002     d1..h1..........
   228bc:	00022c18 00023290 00000001 00000002     .,...2..........
   228cc:	0002316c 00023170 00000001 00000002     l1..p1..........
   228dc:	00023174 00023178 00000002 00000002     t1..x1..........
   228ec:	0002317c 00023180 00000001 00000002     |1...1..........
   228fc:	00023184 00023188 00000002 00000002     .1...1..........
   2290c:	0002318c 00022e50 00000003 00000003     .1..P...........
   2291c:	00023190 00022e50 00000003 00000003     .1..P...........
   2292c:	00023194 00022e50 00000003 00000002     .1..P...........
   2293c:	00023198 00022e50 00000003 00000002     .1..P...........
   2294c:	00023834 0002319c 00000002 00000002     48...1..........
   2295c:	00022e08 00022c5c 00000002 00000001     ....\,..........
   2296c:	000231a0 00023018 00000001 00000002     .1...0..........
   2297c:	00022e10 00022c7c 00000002 00000002     ....|,..........
   2298c:	000231a4 000231a8 00000003 00000002     .1...1..........
   2299c:	00020a38 000231ac 00000002 00000002     8....1..........
   229ac:	00022c50 000231b0 0000000b 00000001     P,...1..........
   229bc:	000231bc 000231c0 00000002 00000002     .1...1..........
   229cc:	000231c4 000231c8 00000001 00000002     .1...1..........
   229dc:	000231cc 000231d0 00000002 00000002     .1...1..........
   229ec:	000231d4 000231d8 00000002 00000002     .1...1..........
   229fc:	000231dc 000231e0 00000001 00000002     .1...1..........
   22a0c:	000231e4 00023154 00000001 00000002     .1..T1..........
   22a1c:	000231e8 000231ec 00000002 00000001     .1...1..........
   22a2c:	000231f0 000231f4 00000005 00000003     .1...1..........
   22a3c:	000231fc 00023200 00000002 00000002     .1...2..........
   22a4c:	000233b8 000231e0 00000001 00000001     .3...1..........
   22a5c:	00023204 00023208 00000001 00000001     .2...2..........
   22a6c:	0002320c 00023210 00000003 00000003     .2...2..........
   22a7c:	00023214 00023218 00000002 00000002     .2...2..........
   22a8c:	0002321c 00023220 00000002 00000002     .2.. 2..........
   22a9c:	000239d0 00023224 00000001 00000002     .9..$2..........
   22aac:	00023228 0002322c 00000002 00000002     (2..,2..........
   22abc:	00023230 00023234 00000001 00000002     02..42..........
   22acc:	00023238 0002323c 00000003 00000002     82..<2..........
   22adc:	00020950 00023240 00000002 00000001     P...@2..........
   22aec:	00023244 00023234 00000001 00000001     D2..42..........
   22afc:	00022c1c 00023248 00000002 00000002     .,..H2..........
   22b0c:	00022c20 0002324c 00000001 00000003      ,..L2..........
   22b1c:	00023250 00023254 00000002 00000002     P2..T2..........
   22b2c:	00023258 0002325c 00000003 00000002     X2..\2..........
   22b3c:	00023260 00023264 00000010 00000002     `2..d2..........
   22b4c:	00023278 0002327c 00000001 00000002     x2..|2..........
   22b5c:	00023280 00023284 00000002 00000002     .2...2..........
   22b6c:	00022c10 00023288 00000009 00000001     .,...2..........
   22b7c:	00022ed0 00023288 00000009 00000001     .....2..........
   22b8c:	00023294 00023298 0000000b 00000002     .2...2..........
   22b9c:	00023110 000232a4 00000007 00000001     .1...2..........
   22bac:	000232ac 000232a4 00000007 00000001     .2...2..........
   22bbc:	00021cf8 000232b0 00000005 00000000     .....2..........
   22bcc:	000232b8 000232bc 00000006 00000001     .2...2..........
	...
   22bec:	4f4c475f 5f4c4142 00000000 6f6e6128     _GLOBAL_....(ano
   22bfc:	6f6d796e 6e207375 73656d61 65636170     nymous namespace
   22c0c:	00000029 00005073 00006c63 00007464     )...sP..cl..dt..
   22c1c:	00007470 00007571 69727473 6c20676e     pt..qu..string l
   22c2c:	72657469 00006c61 00647473 6f747561     iteral..std.auto
   22c3c:	00000000 6c636564 65707974 74756128     ....decltype(aut
   22c4c:	0000296f 0000696c 6962615b 0000003a     o)..li..[abi:...
   22c5c:	00003a3a 6665647b 746c7561 67726120     ::..{default arg
   22c6c:	00000023 003a3a7d 7272414a 00007961     #...}::.JArray..
   22c7c:	00005d5b 6f747561 0000003a 62617476     []..auto:...vtab
   22c8c:	6620656c 0020726f 20545456 20726f66     le for .VTT for 
   22c9c:	00000000 736e6f63 63757274 6e6f6974     ....construction
   22cac:	61747620 20656c62 20726f66 00000000      vtable for ....
   22cbc:	2d6e692d 00000000 65707974 6f666e69     -in-....typeinfo
   22ccc:	726f6620 00000020 65707974 6f666e69      for ...typeinfo
   22cdc:	6d616e20 6f662065 00002072 65707974      name for ..type
   22cec:	6f666e69 206e6620 20726f66 00000000     info fn for ....
   22cfc:	2d6e6f6e 74726976 206c6175 6e756874     non-virtual thun
   22d0c:	6f74206b 00000020 61766f63 6e616972     k to ...covarian
   22d1c:	65722074 6e727574 75687420 74206b6e     t return thunk t
   22d2c:	0000206f 6176616a 616c4320 66207373     o ..java Class f
   22d3c:	0020726f 72617567 61762064 62616972     or .guard variab
   22d4c:	6620656c 0020726f 20534c54 74696e69     le for .TLS init
   22d5c:	6e756620 6f697463 6f66206e 00002072      function for ..
   22d6c:	20534c54 70617277 20726570 636e7566     TLS wrapper func
   22d7c:	6e6f6974 726f6620 00000020 65666572     tion for ...refe
   22d8c:	636e6572 65742065 726f706d 20797261     rence temporary 
   22d9c:	00000023 64646968 61206e65 7361696c     #...hidden alias
   22dac:	726f6620 00000020 2d6e6f6e 6e617274      for ...non-tran
   22dbc:	74636173 206e6f69 6e6f6c63 6f662065     saction clone fo
   22dcc:	00002072 7461535f 00000020 6363415f     r .._Sat ..._Acc
   22ddc:	00006d75 6172465f 00007463 0000202c     um.._Fract.., ..
   22dec:	7265706f 726f7461 00000000 7265706f     operator....oper
   22dfc:	726f7461 00000020 00006461 00007367     ator ...ad..gs..
   22e0c:	0000283e 00007869 00203a20 2077656e     >(..ix.. : .new 
   22e1c:	00000000 00006c75 00006c6c 006c6c75     ....ul..ll..ull.
   22e2c:	65757274 00000000 6176616a 73657220     true....java res
   22e3c:	6372756f 00002065 6c636564 65707974     ource ..decltype
   22e4c:	00002820 002e2e2e 73696874 00000000      (......this....
   22e5c:	7261707b 0000236d 626f6c67 63206c61     {parm#..global c
   22e6c:	74736e6f 74637572 2073726f 6579656b     onstructors keye
   22e7c:	6f742064 00000020 626f6c67 64206c61     d to ...global d
   22e8c:	72747365 6f746375 6b207372 64657965     estructors keyed
   22e9c:	206f7420 00000000 6d616c7b 28616462      to ....{lambda(
   22eac:	00000000 00002329 6e6e757b 64656d61     ....)#..{unnamed
   22ebc:	70797420 00002365 6c635b20 20656e6f      type#.. [clone 
   22ecc:	00000000 00005a73 73657220 63697274     ....sZ.. restric
   22edc:	00000074 6c6f7620 6c697461 00000065     t... volatile...
   22eec:	6e6f6320 00007473 61727420 6361736e      const.. transac
   22efc:	6e6f6974 6661735f 00000065 00002626     tion_safe...&&..
   22f0c:	706d6f63 2078656c 00000000 67616d69     complex ....imag
   22f1c:	72616e69 00002079 002a3a3a 765f5f20     inary ..::*. __v
   22f2c:	6f746365 00002872 2e2e2e28 00000000     ector(..(.......
   22f3c:	292e2e2e 00000000 3a647473 6c6c613a     ...)....std::all
   22f4c:	7461636f 0000726f 6f6c6c61 6f746163     ocator..allocato
   22f5c:	00000072 3a647473 7361623a 735f6369     r...std::basic_s
   22f6c:	6e697274 00000067 69736162 74735f63     tring...basic_st
   22f7c:	676e6972 00000000 3a647473 7274733a     ring....std::str
   22f8c:	00676e69 3a647473 7361623a 735f6369     ing.std::basic_s
   22f9c:	6e697274 68633c67 202c7261 3a647473     tring<char, std:
   22fac:	6168633a 72745f72 73746961 6168633c     :char_traits<cha
   22fbc:	202c3e72 3a647473 6c6c613a 7461636f     r>, std::allocat
   22fcc:	633c726f 3e726168 00003e20 3a647473     or<char> >..std:
   22fdc:	7473693a 6d616572 00000000 3a647473     :istream....std:
   22fec:	7361623a 695f6369 65727473 633c6d61     :basic_istream<c
   22ffc:	2c726168 64747320 68633a3a 745f7261     har, std::char_t
   2300c:	74696172 68633c73 203e7261 0000003e     raits<char> >...
   2301c:	69736162 73695f63 61657274 0000006d     basic_istream...
   2302c:	3a647473 74736f3a 6d616572 00000000     std::ostream....
   2303c:	3a647473 7361623a 6f5f6369 65727473     std::basic_ostre
   2304c:	633c6d61 2c726168 64747320 68633a3a     am<char, std::ch
   2305c:	745f7261 74696172 68633c73 203e7261     ar_traits<char> 
   2306c:	0000003e 69736162 736f5f63 61657274     >...basic_ostrea
   2307c:	0000006d 3a647473 736f693a 61657274     m...std::iostrea
   2308c:	0000006d 3a647473 7361623a 695f6369     m...std::basic_i
   2309c:	7274736f 3c6d6165 72616863 7473202c     ostream<char, st
   230ac:	633a3a64 5f726168 69617274 633c7374     d::char_traits<c
   230bc:	3e726168 00003e20 69736162 6f695f63     har> >..basic_io
   230cc:	65727473 00006d61 00004e61 00003d26     stream..aN..&=..
   230dc:	00005361 0000003d 00006161 00000026     aS..=...aa..&...
   230ec:	00006e61 00007461 67696c61 20666f6e     an..at..alignof 
   230fc:	00000000 00007a61 00006363 736e6f63     ....az..cc..cons
   2310c:	61635f74 00007473 00006d63 0000002c     t_cast..cm..,...
   2311c:	00006f63 0000007e 00005664 00003d2f     co..~...dV../=..
   2312c:	00006164 656c6564 5d5b6574 00000020     da..delete[] ...
   2313c:	00006364 616e7964 5f63696d 74736163     dc..dynamic_cast
   2314c:	00000000 00006564 0000002a 00006c64     ....de..*...dl..
   2315c:	656c6564 00206574 00007364 00002a2e     delete .ds...*..
   2316c:	00007664 0000002f 00004f65 00003d5e     dv../...eO..^=..
   2317c:	00006f65 0000005e 00007165 00003d3d     eo..^...eq..==..
   2318c:	00004c66 00005266 00006c66 00007266     fL..fR..fl..fr..
   2319c:	00003d3e 00007467 0000536c 003d3c3c     >=..gt..lS..<<=.
   231ac:	00003d3c 7265706f 726f7461 00202222     <=..operator"" .
   231bc:	0000736c 00003c3c 0000746c 0000003c     ls..<<..lt..<...
   231cc:	0000496d 00003d2d 00004c6d 00003d2a     mI..-=..mL..*=..
   231dc:	0000696d 0000002d 00006c6d 00006d6d     mi..-...ml..mm..
   231ec:	00002d2d 0000616e 5b77656e 0000005d     --..na..new[]...
   231fc:	0000656e 00003d21 0000746e 00000021     ne..!=..nt..!...
   2320c:	0000776e 0077656e 0000526f 00003d7c     nw..new.oR..|=..
   2321c:	00006f6f 00007c7c 0000007c 00004c70     oo..||..|...pL..
   2322c:	00003d2b 00006c70 0000002b 00006d70     +=..pl..+...pm..
   2323c:	002a3e2d 00002b2b 00007370 00003e2d     ->*.++..ps..->..
   2324c:	0000003f 00004d72 00003d25 00005372     ?...rM..%=..rS..
   2325c:	003d3e3e 00006372 6e696572 70726574     >>=.rc..reinterp
   2326c:	5f746572 74736163 00000000 00006d72     ret_cast....rm..
   2327c:	00000025 00007372 00003e3e 657a6973     %...rs..>>..size
   2328c:	2e2e666f 0000002e 00006373 74617473     of......sc..stat
   2329c:	635f6369 00747361 657a6973 0020666f     ic_cast.sizeof .
   232ac:	00007a73 6f726874 00000077 00007774     sz..throw...tw..
   232bc:	6f726874 00002077 6e676973 63206465     throw ..signed c
   232cc:	00726168 6c6f6f62 00000000 6c6f6f62     har.bool....bool
   232dc:	006e6165 72616863 00000000 65747962     ean.char....byte
   232ec:	00000000 62756f64 0000656c 676e6f6c     ....double..long
   232fc:	756f6420 00656c62 616f6c66 00000074      double.float...
   2330c:	6c665f5f 3174616f 00003832 69736e75     __float128..unsi
   2331c:	64656e67 61686320 00000072 69736e75     gned char...unsi
   2332c:	64656e67 746e6920 00000000 69736e75     gned int....unsi
   2333c:	64656e67 00000000 69736e75 64656e67     gned....unsigned
   2334c:	6e6f6c20 00000067 6e695f5f 38323174      long...__int128
   2335c:	00000000 69736e75 64656e67 695f5f20     ....unsigned __i
   2336c:	3231746e 00000038 726f6873 00000074     nt128...short...
   2337c:	69736e75 64656e67 6f687320 00007472     unsigned short..
   2338c:	64696f76 00000000 61686377 00745f72     void....wchar_t.
   2339c:	676e6f6c 6e6f6c20 00000067 69736e75     long long...unsi
   233ac:	64656e67 6e6f6c20 6f6c2067 0000676e     gned long long..
   233bc:	69636564 336c616d 00000032 69636564     decimal32...deci
   233cc:	366c616d 00000034 69636564 316c616d     mal64...decimal1
   233dc:	00003832 666c6168 00000000 72616863     28..half....char
   233ec:	745f3631 00000000 72616863 745f3233     16_t....char32_t
   233fc:	00000000 6c636564 65707974 6c756e28     ....decltype(nul
   2340c:	7274706c 00000029 66707865 00000000     lptr)...expf....

0002341c <halF>:
   2341c:	3f000000 bf000000                       ...?....

00023424 <ln2HI>:
   23424:	3f317180 bf317180                       .q1?.q1.

0002342c <ln2LO>:
   2342c:	3717f7d1 b717f7d1 7566202c 6974636e     ...7...., functi
   2343c:	203a6e6f 00000000 65737361 6f697472     on: ....assertio
   2344c:	2522206e 66202273 656c6961 66203a64     n "%s" failed: f
   2345c:	20656c69 22732522 696c202c 2520656e     ile "%s", line %
   2346c:	25732564 00000a73                       d%s%s...

00023474 <_ctype_>:
   23474:	20202000 20202020 28282020 20282828     .         ((((( 
   23484:	20202020 20202020 20202020 20202020                     
   23494:	10108820 10101010 10101010 10101010      ...............
   234a4:	04040410 04040404 10040404 10101010     ................
   234b4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   234c4:	01010101 01010101 01010101 10101010     ................
   234d4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   234e4:	02020202 02020202 02020202 10101010     ................
   234f4:	00000020 00000000 00000000 00000000      ...............
	...

00023578 <_global_impure_ptr>:
   23578:	20000020 00000043 49534f50 00000058      .. C...POSIX...
   23588:	63637553 00737365 20746f4e 656e776f     Success.Not owne
   23598:	00000072 73206f4e 20686375 656c6966     r...No such file
   235a8:	20726f20 65726964 726f7463 00000079      or directory...
   235b8:	73206f4e 20686375 636f7270 00737365     No such process.
   235c8:	65746e49 70757272 20646574 74737973     Interrupted syst
   235d8:	63206d65 006c6c61 204f2f49 6f727265     em call.I/O erro
   235e8:	00000072 73206f4e 20686375 69766564     r...No such devi
   235f8:	6f206563 64612072 73657264 00000073     ce or address...
   23608:	20677241 7473696c 6f6f7420 6e6f6c20     Arg list too lon
   23618:	00000067 63657845 726f6620 2074616d     g...Exec format 
   23628:	6f727265 00000072 6b636f53 61207465     error...Socket a
   23638:	6165726c 63207964 656e6e6f 64657463     lready connected
   23648:	00000000 20646142 656c6966 6d756e20     ....Bad file num
   23658:	00726562 63206f4e 646c6968 006e6572     ber.No children.
   23668:	74736544 74616e69 206e6f69 72646461     Destination addr
   23678:	20737365 75716572 64657269 00000000     ess required....
   23688:	6d206f4e 2065726f 636f7270 65737365     No more processe
   23698:	00000073 20746f4e 756f6e65 73206867     s...Not enough s
   236a8:	65636170 00000000 6d726550 69737369     pace....Permissi
   236b8:	64206e6f 65696e65 00000064 20646142     on denied...Bad 
   236c8:	72646461 00737365 69766544 6f206563     address.Device o
   236d8:	65722072 72756f73 62206563 00797375     r resource busy.
   236e8:	656c6946 69786520 00737473 736f7243     File exists.Cros
   236f8:	65642d73 65636976 6e696c20 0000006b     s-device link...
   23708:	73206f4e 20686375 69766564 00006563     No such device..
   23718:	20746f4e 69642061 74636572 0079726f     Not a directory.
   23728:	74736f48 20736920 6e776f64 00000000     Host is down....
   23738:	6e6e6f43 69746365 61206e6f 6165726c     Connection alrea
   23748:	69207964 7270206e 6572676f 00007373     dy in progress..
   23758:	61207349 72696420 6f746365 00007972     Is a directory..
   23768:	61766e49 2064696c 75677261 746e656d     Invalid argument
   23778:	00000000 7774654e 206b726f 65746e69     ....Network inte
   23788:	63616672 73692065 746f6e20 6e6f6320     rface is not con
   23798:	75676966 00646572 6e6e6f43 69746365     figured.Connecti
   237a8:	61206e6f 74726f62 62206465 656e2079     on aborted by ne
   237b8:	726f7774 0000006b 206f6f54 796e616d     twork...Too many
   237c8:	65706f20 6966206e 2073656c 73206e69      open files in s
   237d8:	65747379 0000006d 656c6946 73656420     ystem...File des
   237e8:	70697263 20726f74 756c6176 6f742065     criptor value to
   237f8:	616c206f 00656772 20746f4e 68632061     o large.Not a ch
   23808:	63617261 20726574 69766564 00006563     aracter device..
   23818:	74786554 6c696620 75622065 00007973     Text file busy..
   23828:	656c6946 6f6f7420 72616c20 00006567     File too large..
   23838:	74736f48 20736920 65726e75 61686361     Host is unreacha
   23848:	00656c62 73206f4e 65636170 66656c20     ble.No space lef
   23858:	6e6f2074 76656420 00656369 20746f4e     t on device.Not 
   23868:	70707573 6574726f 00000064 656c6c49     supported...Ille
   23878:	206c6167 6b656573 00000000 64616552     gal seek....Read
   23888:	6c6e6f2d 69662079 7320656c 65747379     -only file syste
   23898:	0000006d 206f6f54 796e616d 6e696c20     m...Too many lin
   238a8:	0000736b 6b6f7242 70206e65 00657069     ks..Broken pipe.
   238b8:	6874614d 74616d65 20736369 75677261     Mathematics argu
   238c8:	746e656d 74756f20 20666f20 616d6f64     ment out of doma
   238d8:	6f206e69 75662066 6974636e 00006e6f     in of function..
   238e8:	75736552 7420746c 6c206f6f 65677261     Result too large
   238f8:	00000000 6d206f4e 61737365 6f206567     ....No message o
   23908:	65642066 65726973 79742064 00006570     f desired type..
   23918:	6e656449 69666974 72207265 766f6d65     Identifier remov
   23928:	00006465 656c6c49 206c6167 65747962     ed..Illegal byte
   23938:	71657320 636e6575 00000065 64616544      sequence...Dead
   23948:	6b636f6c 00000000 7774654e 206b726f     lock....Network 
   23958:	75207369 6165726e 62616863 0000656c     is unreachable..
   23968:	6c206f4e 006b636f 20746f4e 74732061     No lock.Not a st
   23978:	6d616572 00000000 65727453 69206d61     ream....Stream i
   23988:	6c74636f 6d697420 74756f65 00000000     octl timeout....
   23998:	73206f4e 61657274 6572206d 72756f73     No stream resour
   239a8:	00736563 74726956 206c6175 63726963     ces.Virtual circ
   239b8:	20746975 67207369 00656e6f 746f7250     uit is gone.Prot
   239c8:	6c6f636f 72726520 0000726f 6e6b6e55     ocol error..Unkn
   239d8:	206e776f 746f7270 6c6f636f 00000000     own protocol....
   239e8:	746c754d 706f6869 74746120 74706d65     Multihop attempt
   239f8:	00006465 20646142 7373656d 00656761     ed..Bad message.
   23a08:	636e7546 6e6f6974 746f6e20 706d6920     Function not imp
   23a18:	656d656c 6465746e 00000000 65726944     lemented....Dire
   23a28:	726f7463 6f6e2079 6d652074 00797470     ctory not empty.
   23a38:	656c6946 20726f20 68746170 6d616e20     File or path nam
   23a48:	6f742065 6f6c206f 0000676e 206f6f54     e too long..Too 
   23a58:	796e616d 6d797320 696c6f62 696c2063     many symbolic li
   23a68:	00736b6e 62206f4e 65666675 70732072     nks.No buffer sp
   23a78:	20656361 69617661 6c62616c 00000065     ace available...
   23a88:	64206f4e 00617461 72646441 20737365     No data.Address 
   23a98:	696d6166 6e20796c 7320746f 6f707075     family not suppo
   23aa8:	64657472 20796220 746f7270 6c6f636f     rted by protocol
   23ab8:	6d616620 00796c69 746f7250 6c6f636f      family.Protocol
   23ac8:	6f727720 7420676e 20657079 20726f66      wrong type for 
   23ad8:	6b636f73 00007465 6b636f53 6f207465     socket..Socket o
   23ae8:	61726570 6e6f6974 206e6f20 2d6e6f6e     peration on non-
   23af8:	6b636f73 00007465 746f7250 6c6f636f     socket..Protocol
   23b08:	746f6e20 61766120 62616c69 0000656c      not available..
   23b18:	6e6e6f43 69746365 72206e6f 73756665     Connection refus
   23b28:	00006465 6e6e6f43 69746365 72206e6f     ed..Connection r
   23b38:	74657365 20796220 72656570 00000000     eset by peer....
   23b48:	72646441 20737365 65726c61 20796461     Address already 
   23b58:	75206e69 00006573 72646441 20737365     in use..Address 
   23b68:	20746f6e 69617661 6c62616c 00000065     not available...
   23b78:	74666f53 65726177 75616320 20646573     Software caused 
   23b88:	6e6e6f63 69746365 61206e6f 74726f62     connection abort
   23b98:	00000000 6b636f53 69207465 6f6e2073     ....Socket is no
   23ba8:	6f632074 63656e6e 00646574 6b636f53     t connected.Sock
   23bb8:	69207465 6c612073 64616572 6f632079     et is already co
   23bc8:	63656e6e 00646574 7265704f 6f697461     nnected.Operatio
   23bd8:	6163206e 6c65636e 00006465 74617453     n canceled..Stat
   23be8:	6f6e2065 65722074 65766f63 6c626172     e not recoverabl
   23bf8:	00000065 76657250 73756f69 6e776f20     e...Previous own
   23c08:	64207265 00646569 7265704f 6f697461     er died.Operatio
   23c18:	6f6e206e 75732074 726f7070 20646574     n not supported 
   23c28:	73206e6f 656b636f 00000074 756c6156     on socket...Valu
   23c38:	6f742065 616c206f 20656772 20726f66     e too large for 
   23c48:	69666564 2064656e 61746164 70797420     defined data typ
   23c58:	00000065 7373654d 20656761 206f6f74     e...Message too 
   23c68:	676e6f6c 00000000 6e6e6f43 69746365     long....Connecti
   23c78:	74206e6f 64656d69 74756f20 00000000     on timed out....
   23c88:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   23c98:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   23ca8:	00000000 33323130 37363534 62613938     ....0123456789ab
   23cb8:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00023cc8 <blanks.7223>:
   23cc8:	20202020 20202020 20202020 20202020                     

00023cd8 <zeroes.7224>:
   23cd8:	30303030 30303030 30303030 30303030     0000000000000000

00023ce8 <blanks.7217>:
   23ce8:	20202020 20202020 20202020 20202020                     

00023cf8 <zeroes.7218>:
   23cf8:	30303030 30303030 30303030 30303030     0000000000000000

00023d08 <blanks.7238>:
   23d08:	20202020 20202020 20202020 20202020                     

00023d18 <zeroes.7239>:
   23d18:	30303030 30303030 30303030 30303030     0000000000000000
   23d28:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

00023d38 <__mprec_bigtens>:
   23d38:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   23d48:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   23d58:	7f73bf3c 75154fdd                       <.s..O.u

00023d60 <__mprec_tens>:
   23d60:	00000000 3ff00000 00000000 40240000     .......?......$@
   23d70:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   23d80:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   23d90:	00000000 412e8480 00000000 416312d0     .......A......cA
   23da0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   23db0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   23dc0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   23dd0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   23de0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   23df0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   23e00:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   23e10:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   23e20:	79d99db4 44ea7843                       ...yCx.D

00023e28 <p05.6055>:
   23e28:	00000005 00000019 0000007d 8101b108     ........}.......
   23e38:	8400b0b0 00000000 7ffe60b5 00b108a9     .........`......
   23e48:	0801ffff 001c040e 00000e18 7ffe60a1     .............`..
   23e58:	00b108a9 0801ffff 001c040e 00000e18     ................
   23e68:	7ffe608d 0005a8b0 0c01ffff 0000020c     .`..............
   23e78:	002a0414 00000436 8101b108 8400b0b0     ..*.6...........
   23e88:	00000000 8101b108 8400b0b0 00000000     ................
   23e98:	7ffe605d 00b108a9 0001ffff 8101b108     ]`..............
   23ea8:	8400b0b0 00000000 7ffe6045 0016afb0     ........E`......
   23eb8:	011510ff 08ca200b 09a60000 0109b004     ..... ..........
   23ec8:	00000001 00000000 7ffe6025 01b10884     ........%`......
   23ed8:	00b0b0b0 011910ff 0806020c 10040c01     ................
   23ee8:	000a1c05 7f000100 007d0000 00000000     ..........}.....
   23ef8:	00000000 8101b108 8400b0b0 00000000     ................
   23f08:	8101b108 8400b0b0 00000000 7ffe5fe1     ............._..
   23f18:	0001a8b0 0801ffff 0018040e 0000041e     ................
   23f28:	7ffe5fcd 0004afb0 011d10ff 3a042412     ._...........$.:
   23f38:	32042e01 c8507801 01d00001 01000004     ...2.xP.........
	...
   23f50:	7ffe5fa5 0001aab0 012910ff 00303418     ._........)..40.
   23f60:	94046800 1a720301 01b00000 0001e218     .h....r.........
   23f70:	002601cc 01000200 0000007d 00000000     ..&.....}.......
   23f80:	ffffe358 8101b108 8400b0b0 00000000     X...............
   23f90:	8101b108 8400b0b0 00000000              ............

00023f9c <_init>:
   23f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23f9e:	bf00      	nop
   23fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   23fa2:	bc08      	pop	{r3}
   23fa4:	469e      	mov	lr, r3
   23fa6:	4770      	bx	lr

00023fa8 <__init_array_start>:
   23fa8:	0001917d 	.word	0x0001917d

00023fac <__frame_dummy_init_array_entry>:
   23fac:	00000289 000095ad 000096f5 00009a5d     ............]...
   23fbc:	0000a63d 0000a6c1 0000a745              =.......E...

00023fc8 <_fini>:
   23fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23fca:	bf00      	nop
   23fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   23fce:	bc08      	pop	{r3}
   23fd0:	469e      	mov	lr, r3
   23fd2:	4770      	bx	lr

00023fd4 <__fini_array_start>:
   23fd4:	00000265 	.word	0x00000265
